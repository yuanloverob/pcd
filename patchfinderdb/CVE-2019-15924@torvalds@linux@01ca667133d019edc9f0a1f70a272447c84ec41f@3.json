{
  "cve_id": "CVE-2019-15924",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.11. fm10k_init_module in drivers/net/ethernet/intel/fm10k/fm10k_main.c has a NULL pointer dereference because there is no -ENOMEM upon an alloc_workqueue failure.",
  "repo": "torvalds/linux",
  "patch_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
  "patch_info": {
    "commit_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/01ca667133d019edc9f0a1f70a272447c84ec41f",
    "files": [
      "drivers/net/ethernet/intel/fm10k/fm10k_main.c"
    ],
    "message": "fm10k: Fix a potential NULL pointer dereference\n\nSyzkaller report this:\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 0 PID: 4378 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:__lock_acquire+0x95b/0x3200 kernel/locking/lockdep.c:3573\nCode: 00 0f 85 28 1e 00 00 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 4c 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 cc 24 00 00 49 81 7d 00 e0 de 03 a6 41 bc 00 00\nRSP: 0018:ffff8881e3c07a40 EFLAGS: 00010002\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000010 RSI: 0000000000000000 RDI: 0000000000000080\nRBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000\nR10: ffff8881e3c07d98 R11: ffff8881c7f21f80 R12: 0000000000000001\nR13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000001\nFS:  00007fce2252e700(0000) GS:ffff8881f2400000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fffc7eb0228 CR3: 00000001e5bea002 CR4: 00000000007606f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n lock_acquire+0xff/0x2c0 kernel/locking/lockdep.c:4211\n __mutex_lock_common kernel/locking/mutex.c:925 [inline]\n __mutex_lock+0xdf/0x1050 kernel/locking/mutex.c:1072\n drain_workqueue+0x24/0x3f0 kernel/workqueue.c:2934\n destroy_workqueue+0x23/0x630 kernel/workqueue.c:4319\n __do_sys_delete_module kernel/module.c:1018 [inline]\n __se_sys_delete_module kernel/module.c:961 [inline]\n __x64_sys_delete_module+0x30c/0x480 kernel/module.c:961\n do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007fce2252dc58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000140\nRBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007fce2252e6bc\nR13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff\n\nIf alloc_workqueue fails, it should return -ENOMEM, otherwise may\ntrigger this NULL pointer dereference while unloading drivers.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: 0a38c17a21a0 (\"fm10k: Remove create_workqueue\")\nSigned-off-by: Yue Haibing <yuehaibing@huawei.com>\nTested-by: Andrew Bowers <andrewx.bowers@intel.com>\nSigned-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>",
    "before_after_code_files": [
      "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c"
    ]
  },
  "patch_diff": {
    "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c": [
      "File: drivers/net/ethernet/intel/fm10k/fm10k_main.c -> drivers/net/ethernet/intel/fm10k/fm10k_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  fm10k_workqueue = alloc_workqueue(\"%s\", WQ_MEM_RECLAIM, 0,",
      "43:        fm10k_driver_name);",
      "45:  fm10k_dbg_init();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:  if (!fm10k_workqueue)",
      "45:   return -ENOMEM;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c53075ea5d3c44849992523d5d83e2810d05a00e",
      "candidate_info": {
        "commit_hash": "c53075ea5d3c44849992523d5d83e2810d05a00e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c53075ea5d3c44849992523d5d83e2810d05a00e",
        "files": [
          "net/sched/act_connmark.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/connmark.json"
        ],
        "message": "net/sched: act_connmark: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall \\\n > action connmark pass index 90\n # tc actions replace action connmark \\\n > goto chain 42 index 90 cookie c1a0c1a0\n # tc actions show action connmark\n\nhad the following output:\n\n Error: Failed to init TC action chain.\n We have an error talking to the kernel\n total acts 1\n\n         action order 0: connmark zone 0 goto chain 42\n          index 90 ref 2 bind 1\n         cookie c1a0c1a0\n\nThen, the first packet transmitted by crash0 made the kernel crash:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 0 P4D 0\n Oops: 0000 [#1] SMP PTI\n CPU: 0 PID: 302 Comm: kworker/0:2 Not tainted 5.0.0-rc4.gotochain_crash+ #533\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n Workqueue: ipv6_addrconf addrconf_dad_work\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffff9bea406c3ad0 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff8c5dfc009f00 RCX: 0000000000000000\n RDX: 0000000000000000 RSI: ffff9bea406c3a80 RDI: ffff8c5dfb9d6ec0\n RBP: ffff9bea406c3b70 R08: ffff8c5dfda222a0 R09: ffffffff90933c3c\n R10: 0000000000000000 R11: 0000000092793f7d R12: ffff8c5df48b3c00\n R13: ffff8c5df48b3c08 R14: 0000000000000001 R15: ffff8c5dfb9d6e40\n FS:  0000000000000000(0000) GS:ffff8c5dfda00000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 0000000062e0e006 CR4: 00000000001606f0\n Call Trace:\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ndisc_next_option+0x50/0x50\n  ? ___neigh_create+0x4d5/0x680\n  ? ip6_finish_output2+0x1b5/0x590\n  ip6_finish_output2+0x1b5/0x590\n  ? ip6_output+0x68/0x110\n  ip6_output+0x68/0x110\n  ? nf_hook.constprop.28+0x79/0xc0\n  ndisc_send_skb+0x248/0x2e0\n  ndisc_send_ns+0xf8/0x200\n  ? addrconf_dad_work+0x389/0x4b0\n  addrconf_dad_work+0x389/0x4b0\n  ? __switch_to_asm+0x34/0x70\n  ? process_one_work+0x195/0x380\n  ? addrconf_dad_completed+0x370/0x370\n  process_one_work+0x195/0x380\n  worker_thread+0x30/0x390\n  ? process_one_work+0x380/0x380\n  kthread+0x113/0x130\n  ? kthread_park+0x90/0x90\n  ret_from_fork+0x35/0x40\n Modules linked in: act_connmark nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 veth ip6table_filter ip6_tables iptable_filter binfmt_misc ext4 crct10dif_pclmul mbcache crc32_pclmul jbd2 snd_hda_codec_generic ghash_clmulni_intel snd_hda_intel snd_hda_codec snd_hwdep snd_hda_core snd_seq snd_seq_device snd_pcm aesni_intel snd_timer crypto_simd cryptd snd glue_helper joydev virtio_balloon pcspkr soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl drm_kms_helper virtio_net net_failover syscopyarea virtio_blk failover virtio_console sysfillrect sysimgblt fb_sys_fops ttm drm ata_piix crc32c_intel serio_raw libata virtio_pci virtio_ring virtio floppy dm_mirror dm_region_hash dm_log dm_mod\n CR2: 0000000000000000\n\nValidating the control action within tcf_connmark_init() proved to fix the\nabove issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_connmark.c||net/sched/act_connmark.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_connmark.c||net/sched/act_connmark.c": [
          "File: net/sched/act_connmark.c -> net/sched/act_connmark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <net/netlink.h>",
          "22: #include <net/pkt_sched.h>",
          "23: #include <net/act_api.h>",
          "24: #include <uapi/linux/tc_act/tc_connmark.h>",
          "25: #include <net/tc_act/tc_connmark.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: {",
          "103:  struct tc_action_net *tn = net_generic(net, connmark_net_id);",
          "104:  struct nlattr *tb[TCA_CONNMARK_MAX + 1];",
          "105:  struct tcf_connmark_info *ci;",
          "106:  struct tc_connmark *parm;",
          "109:  if (!nla)",
          "110:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "107:  int ret = 0;",
          "",
          "[Added Lines]",
          "106:  struct tcf_chain *goto_ch = NULL;",
          "109:  int ret = 0, err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:   }",
          "131:   ci = to_connmark(*a);",
          "133:   ci->net = net;",
          "134:   ci->zone = parm->zone;",
          "",
          "[Removed Lines]",
          "132:   ci->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "134:   err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch,",
          "135:             extack);",
          "136:   if (err < 0)",
          "137:    goto release_idr;",
          "138:   tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:    tcf_idr_release(*a, bind);",
          "144:    return -EEXIST;",
          "145:   }",
          "147:   spin_lock_bh(&ci->tcf_lock);",
          "149:   ci->zone = parm->zone;",
          "150:   spin_unlock_bh(&ci->tcf_lock);",
          "151:   ret = 0;",
          "152:  }",
          "154:  return ret;",
          "155: }",
          "157: static inline int tcf_connmark_dump(struct sk_buff *skb, struct tc_action *a,",
          "",
          "[Removed Lines]",
          "148:   ci->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "152:   err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch,",
          "153:             extack);",
          "154:   if (err < 0)",
          "155:    goto release_idr;",
          "158:   goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "161:   if (goto_ch)",
          "162:    tcf_chain_put_by_act(goto_ch);",
          "167: release_idr:",
          "168:  tcf_idr_release(*a, bind);",
          "169:  return err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "11a94d7fd80f92325e7b8653290ad3d2cd67f119",
      "candidate_info": {
        "commit_hash": "11a94d7fd80f92325e7b8653290ad3d2cd67f119",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/11a94d7fd80f92325e7b8653290ad3d2cd67f119",
        "files": [
          "net/sched/act_ife.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/ife.json"
        ],
        "message": "net/sched: act_ife: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall \\\n > action ife encode allow mark pass index 90\n # tc actions replace action ife \\\n > encode allow mark goto chain 42 index 90 cookie c1a0c1a0\n # tc action show action ife\n\nhad the following output:\n\n IFE type 0xED3E\n IFE type 0xED3E\n Error: Failed to init TC action chain.\n We have an error talking to the kernel\n total acts 1\n\n         action order 0: ife encode action goto chain 42 type 0XED3E\n         allow mark\n          index 90 ref 2 bind 1\n         cookie c1a0c1a0\n\nThen, the first packet transmitted by crash0 made the kernel crash:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 800000007b4e7067 P4D 800000007b4e7067 PUD 7b4e6067 PMD 0\n Oops: 0000 [#1] SMP PTI\n CPU: 2 PID: 164 Comm: kworker/2:1 Not tainted 5.0.0-rc4.gotochain_crash+ #533\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n Workqueue: ipv6_addrconf addrconf_dad_work\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffffa6a7c0553ad0 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff9796ee1bbd00 RCX: 0000000000000001\n RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000\n RBP: ffffa6a7c0553b70 R08: 0000000000000000 R09: 0000000000000000\n R10: 0000000000000000 R11: ffff9797385bb038 R12: ffff9796ead9d700\n R13: ffff9796ead9d708 R14: 0000000000000001 R15: ffff9796ead9d800\n FS:  0000000000000000(0000) GS:ffff97973db00000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 000000007c41e006 CR4: 00000000001606e0\n Call Trace:\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ndisc_next_option+0x50/0x50\n  ? ___neigh_create+0x4d5/0x680\n  ? ip6_finish_output2+0x1b5/0x590\n  ip6_finish_output2+0x1b5/0x590\n  ? ip6_output+0x68/0x110\n  ip6_output+0x68/0x110\n  ? nf_hook.constprop.28+0x79/0xc0\n  ndisc_send_skb+0x248/0x2e0\n  ndisc_send_ns+0xf8/0x200\n  ? addrconf_dad_work+0x389/0x4b0\n  addrconf_dad_work+0x389/0x4b0\n  ? __switch_to_asm+0x34/0x70\n  ? process_one_work+0x195/0x380\n  ? addrconf_dad_completed+0x370/0x370\n  process_one_work+0x195/0x380\n  worker_thread+0x30/0x390\n  ? process_one_work+0x380/0x380\n  kthread+0x113/0x130\n  ? kthread_park+0x90/0x90\n  ret_from_fork+0x35/0x40\n Modules linked in: act_gact act_meta_mark act_ife dummy veth ip6table_filter ip6_tables iptable_filter binfmt_misc snd_hda_codec_generic ext4 snd_hda_intel snd_hda_codec crct10dif_pclmul mbcache crc32_pclmul jbd2 snd_hwdep snd_hda_core ghash_clmulni_intel snd_seq snd_seq_device snd_pcm snd_timer aesni_intel crypto_simd snd cryptd glue_helper virtio_balloon joydev pcspkr soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl virtio_net drm_kms_helper virtio_blk net_failover syscopyarea failover sysfillrect virtio_console sysimgblt fb_sys_fops ttm drm crc32c_intel serio_raw ata_piix virtio_pci virtio_ring libata virtio floppy dm_mirror dm_region_hash dm_log dm_mod [last unloaded: act_ife]\n CR2: 0000000000000000\n\nValidating the control action within tcf_ife_init() proved to fix the\nabove issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_ife.c||net/sched/act_ife.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_ife.c||net/sched/act_ife.c": [
          "File: net/sched/act_ife.c -> net/sched/act_ife.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <net/net_namespace.h>",
          "30: #include <net/netlink.h>",
          "31: #include <net/pkt_sched.h>",
          "32: #include <uapi/linux/tc_act/tc_ife.h>",
          "33: #include <net/tc_act/tc_ife.h>",
          "34: #include <linux/etherdevice.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474:  struct tc_action_net *tn = net_generic(net, ife_net_id);",
          "475:  struct nlattr *tb[TCA_IFE_MAX + 1];",
          "476:  struct nlattr *tb2[IFE_META_MAX + 1];",
          "477:  struct tcf_ife_params *p;",
          "478:  struct tcf_ife_info *ife;",
          "479:  u16 ife_type = ETH_P_IFE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:  struct tcf_chain *goto_ch = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531:  }",
          "533:  ife = to_ife(*a);",
          "534:  p->flags = parm->flags;",
          "536:  if (parm->flags & IFE_ENCODE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "537:  if (err < 0)",
          "538:   goto release_idr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "563:  if (tb[TCA_IFE_METALST]) {",
          "564:   err = nla_parse_nested(tb2, IFE_META_MAX, tb[TCA_IFE_METALST],",
          "565:            NULL, NULL);",
          "573:   err = populate_metalist(ife, tb2, exists, rtnl_held);",
          "574:   if (err)",
          "575:    goto metadata_parse_err;",
          "",
          "[Removed Lines]",
          "566:   if (err) {",
          "567: metadata_parse_err:",
          "568:    tcf_idr_release(*a, bind);",
          "569:    kfree(p);",
          "570:    return err;",
          "571:   }",
          "",
          "[Added Lines]",
          "572:   if (err)",
          "573:    goto metadata_parse_err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "583:   err = use_all_metadata(ife, exists);",
          "589:  }",
          "591:  if (exists)",
          "592:   spin_lock_bh(&ife->tcf_lock);",
          "595:  rcu_swap_protected(ife->params, p, 1);",
          "597:  if (exists)",
          "598:   spin_unlock_bh(&ife->tcf_lock);",
          "599:  if (p)",
          "600:   kfree_rcu(p, rcu);",
          "",
          "[Removed Lines]",
          "584:   if (err) {",
          "585:    tcf_idr_release(*a, bind);",
          "586:    kfree(p);",
          "587:    return err;",
          "588:   }",
          "593:  ife->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "585:   if (err)",
          "586:    goto metadata_parse_err;",
          "592:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "597:  if (goto_ch)",
          "598:   tcf_chain_put_by_act(goto_ch);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "603:   tcf_idr_insert(tn, *a);",
          "605:  return ret;",
          "606: }",
          "608: static int tcf_ife_dump(struct sk_buff *skb, struct tc_action *a, int bind,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606: metadata_parse_err:",
          "607:  if (goto_ch)",
          "608:   tcf_chain_put_by_act(goto_ch);",
          "609: release_idr:",
          "610:  kfree(p);",
          "611:  tcf_idr_release(*a, bind);",
          "612:  return err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5fdabacbffc5d321bf9f51410fe0db0834606eb",
      "candidate_info": {
        "commit_hash": "e5fdabacbffc5d321bf9f51410fe0db0834606eb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e5fdabacbffc5d321bf9f51410fe0db0834606eb",
        "files": [
          "net/sched/act_tunnel_key.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/tunnel_key.json"
        ],
        "message": "net/sched: act_tunnel_key: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall \\\n > action tunnel_key set src_ip 10.10.10.1 dst_ip 20.20.2 dst_port 3128 \\\n > nocsum id 1 pass index 90\n # tc actions replace action tunnel_key \\\n > set src_ip 10.10.10.1 dst_ip 20.20.2 dst_port 3128 nocsum id 1 \\\n > goto chain 42 index 90 cookie c1a0c1a0\n # tc actions show action tunnel_key\n\nhad the following output:\n\n Error: Failed to init TC action chain.\n We have an error talking to the kernel\n total acts 1\n\n         action order 0: tunnel_key  set\n         src_ip 10.10.10.1\n         dst_ip 20.20.2.0\n         key_id 1\n         dst_port 3128\n         nocsum goto chain 42\n          index 90 ref 2 bind 1\n         cookie c1a0c1a0\n\nthen, the first packet transmitted by crash0 made the kernel crash:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 800000002aba4067 P4D 800000002aba4067 PUD 795f9067 PMD 0\n Oops: 0000 [#1] SMP PTI\n CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.0.0-rc4.gotochain_crash+ #536\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffff9346bdb83be0 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff9346bb795c00 RCX: 0000000000000002\n RDX: 0000000000000000 RSI: ffff93466c881700 RDI: 0000000000000246\n RBP: ffff9346bdb83c80 R08: ffff9346b3e1e0c8 R09: 0000000000000000\n R10: 0000000000000000 R11: 0000000000000000 R12: ffff9346b978f000\n R13: ffff9346b978f008 R14: 0000000000000001 R15: ffff93466dceeb40\n FS:  0000000000000000(0000) GS:ffff9346bdb80000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 000000007a6c2002 CR4: 00000000001606e0\n Call Trace:\n  <IRQ>\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ip6_finish_output2+0x369/0x590\n  ip6_finish_output2+0x369/0x590\n  ? ip6_output+0x68/0x110\n  ip6_output+0x68/0x110\n  ? nf_hook.constprop.35+0x79/0xc0\n  mld_sendpack+0x16f/0x220\n  mld_ifc_timer_expire+0x195/0x2c0\n  ? igmp6_timer_handler+0x70/0x70\n  call_timer_fn+0x2b/0x130\n  run_timer_softirq+0x3e8/0x440\n  ? tick_sched_timer+0x37/0x70\n  __do_softirq+0xe3/0x2f5\n  irq_exit+0xf0/0x100\n  smp_apic_timer_interrupt+0x6c/0x130\n  apic_timer_interrupt+0xf/0x20\n  </IRQ>\n RIP: 0010:native_safe_halt+0x2/0x10\n Code: 55 ff ff ff 7f f3 c3 65 48 8b 04 25 00 5c 01 00 f0 80 48 02 20 48 8b 00 a8 08 74 8b eb c1 90 90 90 90 90 90 90 90 90 90 fb f4 <c3> 0f 1f 00 66 2e 0f 1f 84 00 00 00 00 00 f4 c3 90 90 90 90 90 90\n RSP: 0018:ffffa48a8038feb8 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13\n RAX: ffffffffaa8184f0 RBX: 0000000000000003 RCX: 0000000000000000\n RDX: 0000000000000001 RSI: 0000000000000087 RDI: 0000000000000003\n RBP: 0000000000000003 R08: 0011251c6fcfac49 R09: ffff9346b995be00\n R10: ffffa48a805e7ce8 R11: 00000000024c38dd R12: 0000000000000000\n R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n  ? __sched_text_end+0x1/0x1\n  default_idle+0x1c/0x140\n  do_idle+0x1c4/0x280\n  cpu_startup_entry+0x19/0x20\n  start_secondary+0x1a7/0x200\n  secondary_startup_64+0xa4/0xb0\n Modules linked in: act_tunnel_key veth ip6table_filter ip6_tables iptable_filter binfmt_misc ext4 crct10dif_pclmul crc32_pclmul snd_hda_codec_generic ghash_clmulni_intel mbcache snd_hda_intel jbd2 snd_hda_codec snd_hwdep snd_hda_core snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd cryptd glue_helper joydev snd_timer snd pcspkr virtio_balloon soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl drm_kms_helper syscopyarea sysfillrect virtio_net sysimgblt fb_sys_fops ttm net_failover virtio_console virtio_blk failover drm serio_raw crc32c_intel ata_piix virtio_pci floppy virtio_ring libata virtio dm_mirror dm_region_hash dm_log dm_mod\n CR2: 0000000000000000\n\nValidating the control action within tcf_tunnel_key_init() proved to fix\nthe above issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_tunnel_key.c||net/sched/act_tunnel_key.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_tunnel_key.c||net/sched/act_tunnel_key.c": [
          "File: net/sched/act_tunnel_key.c -> net/sched/act_tunnel_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <net/netlink.h>",
          "18: #include <net/pkt_sched.h>",
          "19: #include <net/dst.h>",
          "21: #include <linux/tc_act/tc_tunnel_key.h>",
          "22: #include <net/tc_act/tc_tunnel_key.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:  struct nlattr *tb[TCA_TUNNEL_KEY_MAX + 1];",
          "218:  struct tcf_tunnel_key_params *params_new;",
          "219:  struct metadata_dst *metadata = NULL;",
          "220:  struct tc_tunnel_key *parm;",
          "221:  struct tcf_tunnel_key *t;",
          "222:  bool exists = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:  struct tcf_chain *goto_ch = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:   goto release_tun_meta;",
          "361:  }",
          "363:  t = to_tunnel_key(*a);",
          "365:  params_new = kzalloc(sizeof(*params_new), GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "366:  if (err < 0) {",
          "367:   ret = err;",
          "368:   exists = true;",
          "369:   goto release_tun_meta;",
          "370:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "367:   NL_SET_ERR_MSG(extack, \"Cannot allocate tunnel key parameters\");",
          "368:   ret = -ENOMEM;",
          "369:   exists = true;",
          "371:  }",
          "372:  params_new->tcft_action = parm->t_action;",
          "373:  params_new->tcft_enc_metadata = metadata;",
          "375:  spin_lock_bh(&t->tcf_lock);",
          "377:  rcu_swap_protected(t->params, params_new,",
          "378:       lockdep_is_held(&t->tcf_lock));",
          "379:  spin_unlock_bh(&t->tcf_lock);",
          "380:  tunnel_key_release_params(params_new);",
          "382:  if (ret == ACT_P_CREATED)",
          "383:   tcf_idr_insert(tn, *a);",
          "385:  return ret;",
          "387: release_tun_meta:",
          "388:  if (metadata)",
          "389:   dst_release(&metadata->dst);",
          "",
          "[Removed Lines]",
          "370:   goto release_tun_meta;",
          "376:  t->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "378:   goto put_chain;",
          "384:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "389:  if (goto_ch)",
          "390:   tcf_chain_put_by_act(goto_ch);",
          "397: put_chain:",
          "398:  if (goto_ch)",
          "399:   tcf_chain_put_by_act(goto_ch);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08e046c8966a872a4fb047aa940b5c991ee5635d",
      "candidate_info": {
        "commit_hash": "08e046c8966a872a4fb047aa940b5c991ee5635d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/08e046c8966a872a4fb047aa940b5c991ee5635d",
        "files": [
          "net/tipc/bcast.c",
          "net/tipc/bcast.h",
          "net/tipc/socket.c"
        ],
        "message": "tipc: fix a null pointer deref\n\nIn commit c55c8edafa91 (\"tipc: smooth change between replicast and\nbroadcast\") we introduced new method to eliminate the risk of message\nreordering that happen in between different nodes.\nUnfortunately, we forgot checking at receiving side to ignore intra node.\n\nWe fix this by checking and returning if arrived message from intra node.\n\nsyzbot report:\n\n==================================================================\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] PREEMPT SMP KASAN\nCPU: 0 PID: 7820 Comm: syz-executor418 Not tainted 5.0.0+ #61\nHardware name: Google Google Compute Engine/Google Compute Engine,\nBIOS Google 01/01/2011\nRIP: 0010:tipc_mcast_filter_msg+0x21b/0x13d0 net/tipc/bcast.c:782\nCode: 45 c0 0f 84 39 06 00 00 48 89 5d 98 e8 ce ab a5 fa 49 8d bc\n 24 c8 00 00 00 48 b9 00 00 00 00 00 fc ff df 48 89 f8 48 c1 e8 03\n <80> 3c 08 00 0f 85 9a 0e 00 00 49 8b 9c 24 c8 00 00 00 48 be 00 00\nRSP: 0018:ffff8880959defc8 EFLAGS: 00010202\nRAX: 0000000000000019 RBX: ffff888081258a48 RCX: dffffc0000000000\nRDX: 0000000000000000 RSI: ffffffff86cab862 RDI: 00000000000000c8\nRBP: ffff8880959df030 R08: ffff8880813d0200 R09: ffffed1015d05bc8\nR10: ffffed1015d05bc7 R11: ffff8880ae82de3b R12: 0000000000000000\nR13: 000000000000002c R14: 0000000000000000 R15: ffff888081258a48\nFS:  000000000106a880(0000) GS:ffff8880ae800000(0000)\n knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020001cc0 CR3: 0000000094a20000 CR4: 00000000001406f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n tipc_sk_filter_rcv+0x182d/0x34f0 net/tipc/socket.c:2168\n tipc_sk_enqueue net/tipc/socket.c:2254 [inline]\n tipc_sk_rcv+0xc45/0x25a0 net/tipc/socket.c:2305\n tipc_sk_mcast_rcv+0x724/0x1020 net/tipc/socket.c:1209\n tipc_mcast_xmit+0x7fe/0x1200 net/tipc/bcast.c:410\n tipc_sendmcast+0xb36/0xfc0 net/tipc/socket.c:820\n __tipc_sendmsg+0x10df/0x18d0 net/tipc/socket.c:1358\n tipc_sendmsg+0x53/0x80 net/tipc/socket.c:1291\n sock_sendmsg_nosec net/socket.c:651 [inline]\n sock_sendmsg+0xdd/0x130 net/socket.c:661\n ___sys_sendmsg+0x806/0x930 net/socket.c:2260\n __sys_sendmsg+0x105/0x1d0 net/socket.c:2298\n __do_sys_sendmsg net/socket.c:2307 [inline]\n __se_sys_sendmsg net/socket.c:2305 [inline]\n __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2305\n do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x4401c9\nCode: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8\n 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05\n <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00\nRSP: 002b:00007ffd887fa9d8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e\nRAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 00000000004401c9\nRDX: 0000000000000000 RSI: 0000000020002140 RDI: 0000000000000003\nRBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8\nR10: 0000000000000000 R11: 0000000000000246 R12: 0000000000401a50\nR13: 0000000000401ae0 R14: 0000000000000000 R15: 0000000000000000\nModules linked in:\n---[ end trace ba79875754e1708f ]---\n\nReported-by: syzbot+be4bdf2cc3e85e952c50@syzkaller.appspotmail.com\nFixes: c55c8eda (\"tipc: smooth change between replicast and broadcast\")\nAcked-by: Jon Maloy <jon.maloy@ericsson.com>\nSigned-off-by: Hoang Le <hoang.h.le@dektech.com.au>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/tipc/bcast.c||net/tipc/bcast.c",
          "net/tipc/bcast.h||net/tipc/bcast.h",
          "net/tipc/socket.c||net/tipc/socket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/tipc/bcast.c||net/tipc/bcast.c": [
          "File: net/tipc/bcast.c -> net/tipc/bcast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:  return bb->rc_ratio;",
          "761: }",
          "764:       struct sk_buff_head *inputq)",
          "765: {",
          "766:  struct sk_buff *skb, *_skb, *tmp;",
          "",
          "[Removed Lines]",
          "763: void tipc_mcast_filter_msg(struct sk_buff_head *defq,",
          "",
          "[Added Lines]",
          "763: void tipc_mcast_filter_msg(struct net *net, struct sk_buff_head *defq,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "775:   return;",
          "777:  node = msg_orignode(hdr);",
          "778:  port = msg_origport(hdr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "778:  if (node == tipc_own_addr(net))",
          "779:   return;",
          "",
          "---------------"
        ],
        "net/tipc/bcast.h||net/tipc/bcast.h": [
          "File: net/tipc/bcast.h -> net/tipc/bcast.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: u32 tipc_bcast_get_broadcast_mode(struct net *net);",
          "102: u32 tipc_bcast_get_broadcast_ratio(struct net *net);",
          "105:       struct sk_buff_head *inputq);",
          "107: static inline void tipc_bcast_lock(struct net *net)",
          "",
          "[Removed Lines]",
          "104: void tipc_mcast_filter_msg(struct sk_buff_head *defq,",
          "",
          "[Added Lines]",
          "104: void tipc_mcast_filter_msg(struct net *net, struct sk_buff_head *defq,",
          "",
          "---------------"
        ],
        "net/tipc/socket.c||net/tipc/socket.c": [
          "File: net/tipc/socket.c -> net/tipc/socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2166:   tipc_group_filter_msg(grp, &inputq, xmitq);",
          "2168:  if (unlikely(!grp) && mtyp == TIPC_MCAST_MSG)",
          "2172:  while ((skb = __skb_dequeue(&inputq))) {",
          "",
          "[Removed Lines]",
          "2169:   tipc_mcast_filter_msg(&tsk->mc_method.deferredq, &inputq);",
          "",
          "[Added Lines]",
          "2169:   tipc_mcast_filter_msg(net, &tsk->mc_method.deferredq, &inputq);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5c29d83866d75585f9c89754de0b86b45ceab89",
      "candidate_info": {
        "commit_hash": "f5c29d83866d75585f9c89754de0b86b45ceab89",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f5c29d83866d75585f9c89754de0b86b45ceab89",
        "files": [
          "net/sched/act_csum.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/csum.json"
        ],
        "message": "net/sched: act_csum: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall action csum icmp pass index 90\n # tc actions replace action csum icmp goto chain 42 index 90 \\\n > cookie c1a0c1a0\n # tc actions show action csum\n\nhad the following output:\n\nError: Failed to init TC action chain.\nWe have an error talking to the kernel\ntotal acts 1\n\n        action order 0: csum (icmp) action goto chain 42\n        index 90 ref 2 bind 1\n        cookie c1a0c1a0\n\nThen, the first packet transmitted by crash0 made the kernel crash:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 8000000074692067 P4D 8000000074692067 PUD 2e210067 PMD 0\n Oops: 0000 [#1] SMP PTI\n CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.0.0-rc4.gotochain_crash+ #533\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffff93153da03be0 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff9314ee40f700 RCX: 0000000000003a00\n RDX: 0000000000000000 RSI: ffff931537c87828 RDI: ffff931537c87818\n RBP: ffff93153da03c80 R08: 00000000527cffff R09: 0000000000000003\n R10: 000000000000003f R11: 0000000000000028 R12: ffff9314edf68400\n R13: ffff9314edf68408 R14: 0000000000000001 R15: ffff9314ed67b600\n FS:  0000000000000000(0000) GS:ffff93153da00000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 0000000073e32003 CR4: 00000000001606f0\n Call Trace:\n  <IRQ>\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ip6_finish_output2+0x369/0x590\n  ip6_finish_output2+0x369/0x590\n  ? ip6_output+0x68/0x110\n  ip6_output+0x68/0x110\n  ? nf_hook.constprop.35+0x79/0xc0\n  mld_sendpack+0x16f/0x220\n  mld_ifc_timer_expire+0x195/0x2c0\n  ? igmp6_timer_handler+0x70/0x70\n  call_timer_fn+0x2b/0x130\n  run_timer_softirq+0x3e8/0x440\n  ? tick_sched_timer+0x37/0x70\n  __do_softirq+0xe3/0x2f5\n  irq_exit+0xf0/0x100\n  smp_apic_timer_interrupt+0x6c/0x130\n  apic_timer_interrupt+0xf/0x20\n  </IRQ>\n RIP: 0010:native_safe_halt+0x2/0x10\n Code: 66 ff ff ff 7f f3 c3 65 48 8b 04 25 00 5c 01 00 f0 80 48 02 20 48 8b 00 a8 08 74 8b eb c1 90 90 90 90 90 90 90 90 90 90 fb f4 <c3> 0f 1f 00 66 2e 0f 1f 84 00 00 00 00 00 f4 c3 90 90 90 90 90 90\n RSP: 0018:ffffffff9a803e98 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13\n RAX: ffffffff99e184f0 RBX: 0000000000000000 RCX: 0000000000000001\n RDX: 0000000000000001 RSI: 0000000000000087 RDI: 0000000000000000\n RBP: 0000000000000000 R08: 000eb5c4572376b3 R09: 0000000000000000\n R10: ffffa53e806a3ca0 R11: 00000000000f4240 R12: 0000000000000000\n R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n  ? __sched_text_end+0x1/0x1\n  default_idle+0x1c/0x140\n  do_idle+0x1c4/0x280\n  cpu_startup_entry+0x19/0x20\n  start_kernel+0x49e/0x4be\n  secondary_startup_64+0xa4/0xb0\n Modules linked in: act_csum veth ip6table_filter ip6_tables iptable_filter binfmt_misc ext4 crct10dif_pclmul crc32_pclmul snd_hda_codec_generic ghash_clmulni_intel snd_hda_intel mbcache snd_hda_codec jbd2 snd_hwdep snd_hda_core snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd cryptd snd_timer glue_helper snd joydev virtio_balloon pcspkr soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl drm_kms_helper syscopyarea sysfillrect virtio_net sysimgblt net_failover fb_sys_fops virtio_console virtio_blk ttm failover drm ata_piix crc32c_intel floppy virtio_pci serio_raw libata virtio_ring virtio dm_mirror dm_region_hash dm_log dm_mod\n CR2: 0000000000000000\n\nValidating the control action within tcf_csum_init() proved to fix the\nabove issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_csum.c||net/sched/act_csum.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_csum.c||net/sched/act_csum.c": [
          "File: net/sched/act_csum.c -> net/sched/act_csum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <net/sctp/checksum.h>",
          "35: #include <net/act_api.h>",
          "37: #include <linux/tc_act/tc_csum.h>",
          "38: #include <net/tc_act/tc_csum.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:  struct tc_action_net *tn = net_generic(net, csum_net_id);",
          "53:  struct tcf_csum_params *params_new;",
          "54:  struct nlattr *tb[TCA_CSUM_MAX + 1];",
          "55:  struct tc_csum *parm;",
          "56:  struct tcf_csum *p;",
          "57:  int ret = 0, err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:  struct tcf_chain *goto_ch = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:   return err;",
          "88:  }",
          "90:  p = to_tcf_csum(*a);",
          "92:  params_new = kzalloc(sizeof(*params_new), GFP_KERNEL);",
          "93:  if (unlikely(!params_new)) {",
          "96:  }",
          "97:  params_new->update_flags = parm->update_flags;",
          "99:  spin_lock_bh(&p->tcf_lock);",
          "101:  rcu_swap_protected(p->params, params_new,",
          "102:       lockdep_is_held(&p->tcf_lock));",
          "103:  spin_unlock_bh(&p->tcf_lock);",
          "105:  if (params_new)",
          "106:   kfree_rcu(params_new, rcu);",
          "",
          "[Removed Lines]",
          "94:   tcf_idr_release(*a, bind);",
          "95:   return -ENOMEM;",
          "100:  p->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "92:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "93:  if (err < 0)",
          "94:   goto release_idr;",
          "100:   err = -ENOMEM;",
          "101:   goto put_chain;",
          "106:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "111:  if (goto_ch)",
          "112:   tcf_chain_put_by_act(goto_ch);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:   tcf_idr_insert(tn, *a);",
          "111:  return ret;",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: put_chain:",
          "121:  if (goto_ch)",
          "122:   tcf_chain_put_by_act(goto_ch);",
          "123: release_idr:",
          "124:  tcf_idr_release(*a, bind);",
          "125:  return err;",
          "",
          "---------------"
        ]
      }
    }
  ]
}