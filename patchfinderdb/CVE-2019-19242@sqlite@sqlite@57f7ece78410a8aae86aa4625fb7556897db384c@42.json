{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
      "candidate_info": {
        "commit_hash": "4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/shell.c.in",
          "src/tokenize.c",
          "src/update.c",
          "test/fts4merge.test",
          "test/insert.test",
          "test/normalize.test"
        ],
        "message": "Merge trunk enhancements into the generated-columns branch.\n\nFossilOrigin-Name: 85bc4524d76999080faa4474e8880d2b6a2ac3a7f6a76239af4de1a42f8138c8",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/shell.c.in||src/shell.c.in",
          "src/tokenize.c||src/tokenize.c",
          "src/update.c||src/update.c",
          "test/fts4merge.test||test/fts4merge.test",
          "test/insert.test||test/insert.test",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4950:     }",
          "4951:     if( SQLITE_OK==rc && pCsr->nSegment==nSeg",
          "4952:      && SQLITE_OK==(rc = sqlite3Fts3SegReaderStart(p, pCsr, pFilter))",
          "4954:     ){",
          "4955:       if( bUseHint && iIdx>0 ){",
          "4956:         const char *zKey = pCsr->zTerm;",
          "4957:         int nKey = pCsr->nTerm;",
          "",
          "[Removed Lines]",
          "4953:      && SQLITE_ROW==(rc = sqlite3Fts3SegReaderStep(p, pCsr))",
          "",
          "[Added Lines]",
          "4954:       int bEmpty = 0;",
          "4955:       rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4956:       if( rc==SQLITE_OK ){",
          "4957:         bEmpty = 1;",
          "4958:       }else if( rc!=SQLITE_ROW ){",
          "4959:         sqlite3Fts3SegReaderFinish(pCsr);",
          "4960:         break;",
          "4961:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4963:       if( rc==SQLITE_OK && pWriter->nLeafEst ){",
          "4964:         fts3LogMerge(nSeg, iAbsLevel);",
          "4972:         if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4965:         do {",
          "4966:           rc = fts3IncrmergeAppend(p, pWriter, pCsr);",
          "4967:           if( rc==SQLITE_OK ) rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4968:           if( pWriter->nWork>=nRem && rc==SQLITE_ROW ) rc = SQLITE_OK;",
          "4969:         }while( rc==SQLITE_ROW );",
          "",
          "[Added Lines]",
          "4972:         if( bEmpty==0 ){",
          "4973:           do {",
          "4974:             rc = fts3IncrmergeAppend(p, pWriter, pCsr);",
          "4975:             if( rc==SQLITE_OK ) rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4976:             if( pWriter->nWork>=nRem && rc==SQLITE_ROW ) rc = SQLITE_OK;",
          "4977:           }while( rc==SQLITE_ROW );",
          "4978:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9f409649ec4282a47f0a8b079b419f1922e0c24779b297f477ced168d5b7910d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1680:           sqlite3MultiWrite(pParse);",
          "1681:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1682:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1683:         }else{",
          "1684: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1685:           assert( HasRowid(pTab) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1683:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1684:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1934:       }",
          "1935:       default: {",
          "1936:         Trigger *pTrigger = 0;",
          "1937:         assert( onError==OE_Replace );",
          "1938:         if( db->flags&SQLITE_RecTriggers ){",
          "1939:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1940:         }",
          "1941:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1942:           sqlite3MultiWrite(pParse);",
          "1943:         }",
          "1944:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1945:             regR, nPkField, 0, OE_Replace,",
          "1946:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "1947:         seenReplace = 1;",
          "1948:         break;",
          "1949:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1939:         int bRetryConstraintCheck = 0;",
          "1946:           bRetryConstraintCheck = 1;",
          "1951:         if( bRetryConstraintCheck ){",
          "1952:           sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1953:                                regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "1954:           sqlite3UniqueConstraint(pParse, OE_Abort, pIdx);",
          "1955:         }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7770:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 0, 1);",
          "7771:       goto meta_command_exit;",
          "7772:     }",
          "7775:     sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7776:     sqlite3_free(zSql);",
          "7777:     if( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7778:       tnum = sqlite3_column_int(pStmt, 0);",
          "7779:     }",
          "7780:     sqlite3_finalize(pStmt);",
          "7786:     zSql = sqlite3_mprintf(\"PRAGMA index_xinfo='%q'\", azArg[1]);",
          "7787:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7788:     sqlite3_free(zSql);",
          "",
          "[Removed Lines]",
          "7773:     zSql = sqlite3_mprintf(\"SELECT rootpage FROM sqlite_master\"",
          "7774:                            \" WHERE name='%q' AND type='index'\", azArg[1]);",
          "7781:     if( tnum==0 ){",
          "7782:       utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);",
          "7783:       rc = 1;",
          "7784:       goto meta_command_exit;",
          "7785:     }",
          "",
          "[Added Lines]",
          "7782:     zSql = sqlite3_mprintf(",
          "7783:       \"SELECT rootpage, 0 FROM sqlite_master\"",
          "7784:       \" WHERE name='%q' AND type='index'\"",
          "7785:       \"UNION ALL \"",
          "7786:       \"SELECT rootpage, 1 FROM sqlite_master\"",
          "7787:       \" WHERE name='%q' AND type='table'\"",
          "7788:       \"   AND sql LIKE '%%without%%rowid%%'\",",
          "7789:       azArg[1], azArg[1]",
          "7790:     );",
          "7795:       isWO = sqlite3_column_int(pStmt, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7799:           zCol = zLabel;",
          "7800:         }",
          "7801:       }",
          "7802:       if( zCollist==0 ){",
          "7803:         zCollist = sqlite3_mprintf(\"\\\"%w\\\"\", zCol);",
          "7804:       }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7814:       if( isWO && lenPK==0 && sqlite3_column_int(pStmt,5)==0 && zCollist ){",
          "7815:         lenPK = (int)strlen(zCollist);",
          "7816:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7806:       }",
          "7807:     }",
          "7808:     sqlite3_finalize(pStmt);",
          "7809:     zSql = sqlite3_mprintf(",
          "7812:     sqlite3_free(zCollist);",
          "7813:     rc = sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 1, tnum);",
          "7814:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "7810:           \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%s))WITHOUT ROWID\",",
          "7811:           azArg[2], zCollist, zCollist);",
          "",
          "[Added Lines]",
          "7824:     if( i==0 || tnum==0 ){",
          "7825:       utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);",
          "7826:       rc = 1;",
          "7827:       sqlite3_free(zCollist);",
          "7828:       goto meta_command_exit;",
          "7829:     }",
          "7830:     if( lenPK==0 ) lenPK = 100000;",
          "7832:           \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%.*s))WITHOUT ROWID\",",
          "7833:           azArg[2], zCollist, lenPK, zCollist);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7819:       }else{",
          "7820:         utf8_printf(stdout, \"%s;\\n\", zSql);",
          "7821:         raw_printf(stdout,",
          "7823:         );",
          "7824:       }",
          "7825:     }else{",
          "",
          "[Removed Lines]",
          "7822:            \"WARNING: writing to an imposter table will corrupt the index!\\n\"",
          "",
          "[Added Lines]",
          "7844:           \"WARNING: writing to an imposter table will corrupt the \\\"%s\\\" %s!\\n\",",
          "7845:           azArg[1], isWO ? \"table\" : \"index\"",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:       }",
          "802:       case TK_RP: {",
          "803:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "805:           pStr->nChar = iStartIN+1;",
          "806:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "807:           iStartIN = 0;",
          "",
          "[Removed Lines]",
          "804:           assert( pStr->nChar>=iStartIN );",
          "",
          "[Added Lines]",
          "804:           assert( pStr->nChar>=(u32)iStartIN );",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   sNC.uNC.pUpsert = pUpsert;",
          "290:   sNC.ncFlags = NC_UUpsert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:   v = sqlite3GetVdbe(pParse);",
          "294:   if( v==0 ) goto update_cleanup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     memset(aToOpen, 1, nIdx+1);",
          "395:   }",
          "400:   if( pParse->nested==0 ) sqlite3VdbeCountChanges(v);",
          "401:   sqlite3BeginWriteOperation(pParse, pTrigger || hasFK, iDb);",
          "",
          "[Removed Lines]",
          "398:   v = sqlite3GetVdbe(pParse);",
          "399:   if( v==0 ) goto update_cleanup;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4merge.test||test/fts4merge.test": [
          "File: test/fts4merge.test -> test/fts4merge.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     execsql { INSERT INTO t1(t1) VALUES('merge=200,10') }",
          "327:     expr { ([db total_changes] - $x)>1 }",
          "328:   } {0}",
          "330: }",
          "332: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: }",
          "331: #-------------------------------------------------------------------------",
          "332: # Test cases 8.* - ticket [bf1aab89].",
          "333: #",
          "334: set testprefix fts4merge",
          "335: reset_db",
          "336: do_execsql_test 8.0 {",
          "337:   CREATE VIRTUAL TABLE t1 USING fts4(a, order=DESC);",
          "338:   INSERT INTO t1(a) VALUES (0);",
          "339:   INSERT INTO t1(a) VALUES (0);",
          "340:   UPDATE t1 SET a = NULL;",
          "341: }",
          "343: do_execsql_test 8.1 {",
          "344:   INSERT INTO t1(t1) VALUES('merge=1,4');",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2001 September 15",
          "",
          "[Added Lines]",
          "1: # 2001-09-15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the INSERT statement.",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "14: # $Id: insert.test,v 1.31 2007/04/05 11:25:59 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:   SELECT x FROM t14;",
          "459: } {1}",
          "463: # 2019-08-12.",
          "464: #",
          "",
          "[Removed Lines]",
          "461: integrity_check insert-99.0",
          "",
          "[Added Lines]",
          "460: integrity_check insert-14.2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "475:   SELECT a, length(b) FROM t1;",
          "476: } {4 33000}",
          "479: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477: # 2019-10-16",
          "478: # ticket https://www.sqlite.org/src/info/a8a4847a2d96f5de",
          "479: # On a REPLACE INTO, if an AFTER trigger adds back the conflicting",
          "480: # row, you can end up with the wrong number of rows in an index.",
          "481: #",
          "482: db close",
          "483: sqlite3 db :memory:",
          "484: do_catchsql_test insert-16.1 {",
          "485:   PRAGMA recursive_triggers = true;",
          "486:   CREATE TABLE t0(c0,c1);",
          "487:   CREATE UNIQUE INDEX i0 ON t0(c0);",
          "488:   INSERT INTO t0(c0,c1) VALUES(123,1);",
          "489:   CREATE TRIGGER tr0 AFTER DELETE ON t0",
          "490:   BEGIN",
          "491:     INSERT INTO t0 VALUES(123,2);",
          "492:   END;",
          "493:   REPLACE INTO t0(c0,c1) VALUES(123,3);",
          "494: } {1 {UNIQUE constraint failed: t0.c0}}",
          "495: do_execsql_test insert-16.2 {",
          "496:   SELECT * FROM t0;",
          "497: } {123 1}",
          "498: integrity_check insert-16.3",
          "499: do_catchsql_test insert-16.4 {",
          "500:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "501:   CREATE INDEX t1b ON t1(b);",
          "502:   INSERT INTO t1 VALUES(1, 'one');",
          "503:   CREATE TRIGGER tr3 AFTER DELETE ON t1 BEGIN",
          "504:     INSERT INTO t1 VALUES(1, 'three');",
          "505:   END;",
          "506:   REPLACE INTO t1 VALUES(1, 'two');",
          "507: } {1 {UNIQUE constraint failed: t1.a}}",
          "508: integrity_check insert-16.5",
          "509: do_catchsql_test insert-16.6 {",
          "510:   PRAGMA foreign_keys = 1;",
          "511:   CREATE TABLE p1(a, b UNIQUE);",
          "512:   CREATE TABLE c1(c, d REFERENCES p1(b) ON DELETE CASCADE);",
          "513:   CREATE TRIGGER tr6 AFTER DELETE ON c1 BEGIN",
          "514:     INSERT INTO p1 VALUES(4, 1);",
          "515:   END;",
          "516:   INSERT INTO p1 VALUES(1, 1);",
          "517:   INSERT INTO c1 VALUES(2, 1);",
          "518:   REPLACE INTO p1 VALUES(3, 1);",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:   800",
          "352:   {ATTACH \"normalize800.db\" AS somefile;}",
          "353:   0x2",
          "354:   {0 {ATTACH\"normalize800.db\"AS somefile;}}",
          "356:   810",
          "357:   {ATTACH DATABASE \"normalize810.db\" AS somefile;}",
          "358:   0x2",
          "359:   {0 {ATTACH DATABASE\"normalize810.db\"AS somefile;}}",
          "361:   900",
          "362:   {INSERT INTO t1 (x) VALUES(\"sl1\"), (1), (\"sl2\"), ('i');}",
          "363:   0x2",
          "364:   {0 {INSERT INTO t1(x)VALUES(?),(?),(?),(?);}}",
          "366:   910",
          "367:   {UPDATE t1 SET x = \"sl1\" WHERE x IN (1, \"sl2\", 'i');}",
          "368:   0x2",
          "369:   {0 {UPDATE t1 SET x=?WHERE x IN(?,?,?);}}",
          "371:   920",
          "372:   {UPDATE t1 SET x = \"y\" WHERE x IN (1, \"sl1\", 'i');}",
          "373:   0x2",
          "374:   {0 {UPDATE t1 SET x=y WHERE x IN(?,?,?);}}",
          "376:   930",
          "377:   {DELETE FROM t1 WHERE x IN (1, \"sl1\", 'i');}",
          "378:   0x2",
          "379:   {0 {DELETE FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97c8cb3ed8adb0867db29dbc24b2df9d35fb1d88",
      "candidate_info": {
        "commit_hash": "97c8cb3ed8adb0867db29dbc24b2df9d35fb1d88",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97c8cb3ed8adb0867db29dbc24b2df9d35fb1d88",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/vdbe.c",
          "test/window1.test"
        ],
        "message": "Ensure that when a new cursor is opened by OP_OpenDup, any existing cursor with the same id opened by a previous OP_OpenDup is closed first.\n\nFossilOrigin-Name: 5c188361a91407805c0feb4bf6d3214522ce3e55013efcf63a4613ecd416bcbc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/vdbe.c||src/vdbe.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7e6cdc5625664f449d0edbe39af2d45910c4137bfd856ae1f770dd826c138ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4416:     sqlite3_free(pCur->aOverflow);",
          "4417:     sqlite3_free(pCur->pKey);",
          "4418:     sqlite3BtreeLeave(pBtree);",
          "4419:   }",
          "4420:   return SQLITE_OK;",
          "4421: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4419:     pCur->pBtree = 0;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   assert( iCur>=0 && iCur<p->nCursor );",
          "243:     sqlite3VdbeFreeCursor(p, p->apCsr[iCur]);",
          "244:     p->apCsr[iCur] = 0;",
          "245:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     p->apCsr[iCur]->isEphemeral = 0;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "665:   ) FROM t1;",
          "666: } {a 3 b 3 c 3}",
          "668: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "668: do_execsql_test 15.2 {",
          "669:   SELECT(",
          "670:     WITH c AS(",
          "671:       VALUES(1)",
          "672:     ) SELECT '' FROM c,c",
          "673:   ) x WHERE x+x;",
          "674: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f78d0f426c2ce84904823a087e3950e343c8e6ec",
      "candidate_info": {
        "commit_hash": "f78d0f426c2ce84904823a087e3950e343c8e6ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f78d0f426c2ce84904823a087e3950e343c8e6ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Take collating sequence into account when removing redundant columns from indexes on WITHOUT ROWID tables.  This is the first proof-of-concept fix for ticket [3182d3879020ef3]. More testing needed.\n\nFossilOrigin-Name: b34fa5bff40d3d364bd8c80e7de55c606ef3caac47b14b5265ebcb38857eb85e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 50fe48458942fa7a6bcc76316c6321f95b23dc34f2f8e0a483826483b2fb16f6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1726:   pIdx->szIdxRow = sqlite3LogEst(wIndex*4);",
          "1727: }",
          "1731: static int hasColumn(const i16 *aiCol, int nCol, int x){",
          "1733:   return 0;",
          "1734: }",
          "",
          "[Removed Lines]",
          "1732:   while( nCol-- > 0 ) if( x==*(aiCol++) ) return 1;",
          "",
          "[Added Lines]",
          "1734:   while( nCol-- > 0 ){",
          "1735:     assert( aiCol[0]>=0 );",
          "1736:     if( x==*(aiCol++) ){",
          "1737:       return 1;",
          "1738:     }",
          "1739:   }",
          "1740:   return 0;",
          "1741: }",
          "1754: static int isDupColumn(Index *pIdx1, int nKey, Index *pIdx2, int iCol){",
          "1755:   int i, j;",
          "1756:   assert( nKey<=pIdx1->nColumn );",
          "1757:   assert( iCol<MAX(pIdx2->nColumn,pIdx2->nKeyCol) );",
          "1758:   j = pIdx2->aiColumn[iCol];",
          "1759:   testcase( j==XN_EXPR );",
          "1760:   assert( j!=XN_ROWID );",
          "1761:   for(i=0; i<nKey; i++){",
          "1762:     assert( pIdx1->aiColumn[i]>=0 || j>=0 );",
          "1763:     if( pIdx1->aiColumn[i]==j",
          "1764:      && sqlite3StrICmp(pIdx1->azColl[i],pIdx2->azColl[iCol])==0",
          "1765:     ){",
          "1766:       return 1;",
          "1767:     }",
          "1768:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1837:     for(i=j=1; i<pPk->nKeyCol; i++){",
          "1839:         pPk->nColumn--;",
          "1840:       }else{",
          "1841:         pPk->aiColumn[j++] = pPk->aiColumn[i];",
          "1842:       }",
          "1843:     }",
          "",
          "[Removed Lines]",
          "1838:       if( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1874:       if( isDupColumn(pPk, j, pPk, i) ){",
          "1877:         testcase( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1867:     int n;",
          "1868:     if( IsPrimaryKeyIndex(pIdx) ) continue;",
          "1869:     for(i=n=0; i<nPk; i++){",
          "1871:     }",
          "1872:     if( n==0 ){",
          "",
          "[Removed Lines]",
          "1870:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ) n++;",
          "",
          "[Added Lines]",
          "1907:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1908:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1909:         n++;",
          "1910:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1876:     }",
          "1877:     if( resizeIndexObject(db, pIdx, pIdx->nKeyCol+n) ) return;",
          "1878:     for(i=0, j=pIdx->nKeyCol; i<nPk; i++){",
          "1880:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1881:         pIdx->azColl[j] = pPk->azColl[i];",
          "1882:         j++;",
          "",
          "[Removed Lines]",
          "1879:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1919:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1920:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3392:     for(j=0; j<pPk->nKeyCol; j++){",
          "3393:       int x = pPk->aiColumn[j];",
          "3394:       assert( x>=0 );",
          "3396:         pIndex->nColumn--;",
          "3397:       }else{",
          "3398:         pIndex->aiColumn[i] = x;",
          "3399:         pIndex->azColl[i] = pPk->azColl[j];",
          "3400:         pIndex->aSortOrder[i] = pPk->aSortOrder[j];",
          "",
          "[Removed Lines]",
          "3395:       if( hasColumn(pIndex->aiColumn, pIndex->nKeyCol, x) ){",
          "",
          "[Added Lines]",
          "3436:       if( isDupColumn(pIndex, pIndex->nKeyCol, pPk, j) ){",
          "3439:         testcase( hasColumn(pIndex->aiColumn,pIndex->nKeyCol,x) );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4de9f7b1e9a7864691f4b6a785628749d5c461a",
      "candidate_info": {
        "commit_hash": "d4de9f7b1e9a7864691f4b6a785628749d5c461a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4de9f7b1e9a7864691f4b6a785628749d5c461a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/pcache1.c",
          "src/utf.c"
        ],
        "message": "Fix an obsolete comment and other minor issues from code inspection.\n\nFossilOrigin-Name: cd084427319394386844d6651479256a2fd57a412fccb79ba53172ce76693eb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/pcache1.c||src/pcache1.c",
          "src/utf.c||src/utf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c3932e66040bf4c82727a26a976291fab219e8bc8a6d7579e19304538cc6df18",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1322: static With *withDup(sqlite3 *db, With *p){",
          "1323:   With *pRet = 0;",
          "1324:   if( p ){",
          "1326:     pRet = sqlite3DbMallocZero(db, nByte);",
          "1327:     if( pRet ){",
          "1328:       int i;",
          "",
          "[Removed Lines]",
          "1325:     int nByte = sizeof(*p) + sizeof(p->a[0]) * (p->nCte-1);",
          "",
          "[Added Lines]",
          "1325:     sqlite3_int64 nByte = sizeof(*p) + sizeof(p->a[0]) * (p->nCte-1);",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c"
        ],
        "src/utf.c||src/utf.c": [
          "File: src/utf.c -> src/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:     pMem->n &= ~1;",
          "257:   }else{",
          "264:   }",
          "",
          "[Removed Lines]",
          "256:     len = pMem->n * 2 + 1;",
          "263:     len = pMem->n * 2 + 2;",
          "",
          "[Added Lines]",
          "256:     len = 2 * (sqlite3_int64)pMem->n + 1;",
          "263:     len = 2 * (sqlite3_int64)pMem->n + 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70738712deac70dbadd5692edd6135494eed6a12",
      "candidate_info": {
        "commit_hash": "70738712deac70dbadd5692edd6135494eed6a12",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/70738712deac70dbadd5692edd6135494eed6a12",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved type information display when tracing VDBE execution.\n\nFossilOrigin-Name: ee83d8e30d6f9ca8f1cce653ee094ff151f633f4b6a21dd814ab07e8cfb901eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6fe0367f9a337b7c62886b7771f3ce0642faa13f4e4f3d9a0c848abbab514cd0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ]
      }
    }
  ]
}