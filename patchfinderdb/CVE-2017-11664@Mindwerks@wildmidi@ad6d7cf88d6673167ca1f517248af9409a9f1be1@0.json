{
  "cve_id": "CVE-2017-11664",
  "cve_desc": "The _WM_SetupMidiEvent function in internal_midi.c:2122 in WildMIDI 0.4.2 can cause a denial of service (invalid memory read and application crash) via a crafted mid file.",
  "repo": "Mindwerks/wildmidi",
  "patch_hash": "ad6d7cf88d6673167ca1f517248af9409a9f1be1",
  "patch_info": {
    "commit_hash": "ad6d7cf88d6673167ca1f517248af9409a9f1be1",
    "repo": "Mindwerks/wildmidi",
    "commit_url": "https://github.com/Mindwerks/wildmidi/commit/ad6d7cf88d6673167ca1f517248af9409a9f1be1",
    "files": [
      "include/internal_midi.h",
      "src/f_hmi.c",
      "src/f_hmp.c",
      "src/f_midi.c",
      "src/f_mus.c",
      "src/f_xmidi.c",
      "src/internal_midi.c"
    ],
    "message": "Fix bug #175:\n\nCVE-2017-11661, CVE-2017-11662, CVE-2017-11663, CVE-2017-11664:\nAdd a new size parameter to _WM_SetupMidiEvent() so that it\nknows where to stop reading, and adjust its clients properly.",
    "before_after_code_files": [
      "include/internal_midi.h||include/internal_midi.h",
      "src/f_hmi.c||src/f_hmi.c",
      "src/f_hmp.c||src/f_hmp.c",
      "src/f_midi.c||src/f_midi.c",
      "src/f_mus.c||src/f_mus.c",
      "src/f_xmidi.c||src/f_xmidi.c",
      "src/internal_midi.c||src/internal_midi.c"
    ]
  },
  "patch_diff": {
    "include/internal_midi.h||include/internal_midi.h": [
      "File: include/internal_midi.h -> include/internal_midi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "192: extern struct _mdi * _WM_initMDI(void);",
      "193: extern void _WM_freeMDI(struct _mdi *mdi);",
      "195: extern void _WM_ResetToStart(struct _mdi *mdi);",
      "196: extern void _WM_do_pan_adjust(struct _mdi *mdi, uint8_t ch);",
      "197: extern void _WM_do_note_off_extra(struct _note *nte);",
      "",
      "[Removed Lines]",
      "194: extern uint32_t _WM_SetupMidiEvent(struct _mdi *mdi, uint8_t * event_data, uint8_t running_event);",
      "",
      "[Added Lines]",
      "194: extern uint32_t _WM_SetupMidiEvent(struct _mdi *mdi, uint8_t * event_data, uint32_t siz, uint8_t running_event);",
      "",
      "---------------"
    ],
    "src/f_hmi.c||src/f_hmi.c": [
      "File: src/f_hmi.c -> src/f_hmi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: _WM_ParseNewHmi(uint8_t *hmi_data, uint32_t hmi_size) {",
      "43:     uint32_t hmi_tmp = 0;",
      "44:     uint8_t *hmi_base = hmi_data;",
      "45:     uint16_t hmi_bpm = 0;",
      "46:     uint16_t hmi_division = 0;",
      "49:     uint32_t hmi_track_cnt = 0;",
      "50:     uint32_t *hmi_track_offset = NULL;",
      "51:     uint32_t i = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     uint32_t data_siz;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:         uint8_t channel;",
      "75:     } *note;",
      "80:     if (memcmp(hmi_data, \"HMI-MIDISONG061595\", 18)) {",
      "81:         _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0);",
      "",
      "[Removed Lines]",
      "78:     UNUSED(hmi_size);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "216:             do {",
      "217:                 hmi_data = hmi_base + hmi_track_offset[i];",
      "218:                 hmi_delta[i] = 0;",
      "220:                 if (hmi_data[0] == 0xfe) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "217:                 if (hmi_track_offset[i] >= hmi_size) {",
      "218:                     _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMI, \"file too short\", 0);",
      "219:                     goto _hmi_end;",
      "220:                 }",
      "221:                 data_siz = hmi_size - hmi_track_offset[i];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "223:                         hmi_tmp = (hmi_data[4] + 5);",
      "224:                         hmi_data += hmi_tmp;",
      "225:                         hmi_track_offset[i] += hmi_tmp;",
      "226:                     } else if (hmi_data[1] == 0x15) {",
      "227:                         hmi_data += 4;",
      "228:                         hmi_track_offset[i] += 4;",
      "229:                     }",
      "230:                     hmi_data += 4;",
      "231:                     hmi_track_offset[i] += 4;",
      "232:                 } else {",
      "234:                         goto _hmi_end;",
      "235:                     }",
      "236:                     if ((hmi_data[0] == 0xff) && (hmi_data[1] == 0x2f) && (hmi_data[2] == 0x00)) {",
      "",
      "[Removed Lines]",
      "233:                     if ((setup_ret = _WM_SetupMidiEvent(hmi_mdi,hmi_data,hmi_running_event[i])) == 0) {",
      "",
      "[Added Lines]",
      "229:                         hmi_tmp += 4;",
      "233:                         hmi_tmp = 8;",
      "234:                     } else {",
      "235:                         hmi_tmp = 4;",
      "239:                     if (hmi_tmp > data_siz) {",
      "240:                         _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMI, \"file too short\", 0);",
      "241:                         goto _hmi_end;",
      "242:                     }",
      "243:                     data_siz -= hmi_tmp;",
      "245:                     if ((setup_ret = _WM_SetupMidiEvent(hmi_mdi,hmi_data,data_siz,hmi_running_event[i])) == 0) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "270:                         hmi_data += setup_ret;",
      "271:                         hmi_track_offset[i] += setup_ret;",
      "273:                         note[hmi_tmp].length = 0;",
      "275:                             do {",
      "276:                                 note[hmi_tmp].length = (note[hmi_tmp].length << 7) | (*hmi_data & 0x7F);",
      "277:                                 hmi_data++;",
      "278:                                 hmi_track_offset[i]++;",
      "279:                             } while (*hmi_data > 0x7F);",
      "280:                         }",
      "281:                         note[hmi_tmp].length = (note[hmi_tmp].length << 7) | (*hmi_data & 0x7F);",
      "282:                         hmi_data++;",
      "283:                         hmi_track_offset[i]++;",
      "285:                         if (note[hmi_tmp].length) {",
      "",
      "[Removed Lines]",
      "274:                         if (*hmi_data > 0x7f) {",
      "",
      "[Added Lines]",
      "284:                         data_siz -= setup_ret;",
      "287:                         if (data_siz && *hmi_data > 0x7f) {",
      "289:                                 if (!data_siz) break;",
      "292:                                 data_siz--;",
      "296:                         if (!data_siz) {",
      "297:                             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMI, \"file too short\", 0);",
      "298:                             goto _hmi_end;",
      "299:                         }",
      "302:                         data_siz--;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "293:                     } else {",
      "294:                         hmi_data += setup_ret;",
      "295:                         hmi_track_offset[i] += setup_ret;",
      "296:                     }",
      "297:                 }",
      "302:                     do {",
      "303:                         hmi_delta[i] = (hmi_delta[i] << 7) | (*hmi_data & 0x7F);",
      "304:                         hmi_data++;",
      "305:                         hmi_track_offset[i]++;",
      "306:                     } while (*hmi_data > 0x7F);",
      "307:                 }",
      "308:                 hmi_delta[i] = (hmi_delta[i] << 7) | (*hmi_data & 0x7F);",
      "309:                 hmi_data++;",
      "310:                 hmi_track_offset[i]++;",
      "311:             } while (!hmi_delta[i]);",
      "312:             if ((!smallest_delta) || (smallest_delta > hmi_delta[i])) {",
      "",
      "[Removed Lines]",
      "301:                 if (*hmi_data > 0x7f) {",
      "",
      "[Added Lines]",
      "316:                         data_siz -= setup_ret;",
      "322:                 if (data_siz && *hmi_data > 0x7f) {",
      "324:                         if (!data_siz) break;",
      "327:                         data_siz--;",
      "331:                 if (!data_siz) {",
      "332:                     _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMI, \"file too short\", 0);",
      "333:                     goto _hmi_end;",
      "334:                 }",
      "337:                 data_siz--;",
      "",
      "---------------"
    ],
    "src/f_hmp.c||src/f_hmp.c": [
      "File: src/f_hmp.c -> src/f_hmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "237:         hmp_data = hmp_chunk[i] + chunk_length[i];",
      "238:         hmp_chunk[i] += chunk_ofs[i]++;",
      "239:         chunk_end[i] = 0;",
      "240:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238:         chunk_length[i] -= chunk_ofs[i];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "275:                     hmp_chunk[i] += 3;",
      "276:                 } else {",
      "277:                     uint32_t setup_ret = 0;",
      "280:                         goto _hmp_end;",
      "281:                     }",
      "",
      "[Removed Lines]",
      "279:                     if ((setup_ret = _WM_SetupMidiEvent(hmp_mdi, hmp_chunk[i], 0)) == 0) {",
      "",
      "[Added Lines]",
      "277:                     chunk_length[i] -= 3;",
      "281:                     if ((setup_ret = _WM_SetupMidiEvent(hmp_mdi, hmp_chunk[i], chunk_length[i], 0)) == 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "285:                         end_of_chunks++;",
      "286:                         chunk_end[i] = 1;",
      "287:                         hmp_chunk[i] += 3;",
      "288:                         goto NEXT_CHUNK;",
      "289:                     } else if ((hmp_chunk[i][0] == 0xff) && (hmp_chunk[i][1] == 0x51) && (hmp_chunk[i][2] == 0x03)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "289:                         chunk_length[i] -= 3;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "296:                         fprintf(stderr,\"DEBUG: Tempo change %f\\r\\n\", tempo_f);",
      "297:                     }",
      "298:                     hmp_chunk[i] += setup_ret;",
      "299:                 }",
      "300:                 var_len_shift = 0;",
      "301:                 chunk_delta[i] = 0;",
      "303:                     do {",
      "304:                         chunk_delta[i] = chunk_delta[i] + ((*hmp_chunk[i] & 0x7F) << var_len_shift);",
      "305:                         var_len_shift += 7;",
      "306:                         hmp_chunk[i]++;",
      "307:                     } while (*hmp_chunk[i] < 0x80);",
      "308:                 }",
      "309:                 chunk_delta[i] = chunk_delta[i] + ((*hmp_chunk[i] & 0x7F) << var_len_shift);",
      "310:                 hmp_chunk[i]++;",
      "311:             } while (!chunk_delta[i]);",
      "313:             if ((!smallest_delta) || (smallest_delta > chunk_delta[i])) {",
      "",
      "[Removed Lines]",
      "302:                 if (*hmp_chunk[i] < 0x80) {",
      "",
      "[Added Lines]",
      "302:                     chunk_length[i] -= setup_ret;",
      "306:                 if (chunk_length[i] && *hmp_chunk[i] < 0x80) {",
      "308:                         if (! chunk_length[i]) break;",
      "312:                         chunk_length[i]--;",
      "315:                 if (! chunk_length[i]) {",
      "316:                     _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMP, \"file too short\", 0);",
      "317:                     goto _hmp_end;",
      "318:                 }",
      "321:                 chunk_length[i]--;",
      "",
      "---------------"
    ],
    "src/f_midi.c||src/f_midi.c": [
      "File: src/f_midi.c -> src/f_midi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:     uint32_t tmp_val;",
      "45:     uint32_t midi_type;",
      "47:     uint8_t **tracks;",
      "48:     uint32_t end_of_tracks = 0;",
      "49:     uint32_t no_tracks;",
      "50:     uint32_t i;",
      "",
      "[Removed Lines]",
      "46:     uint32_t track_size;",
      "",
      "[Added Lines]",
      "47:     uint32_t *track_size;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151:     _WM_midi_setup_divisions(mdi,divisions);",
      "153:     tracks = malloc(sizeof(uint8_t *) * no_tracks);",
      "154:     track_delta = malloc(sizeof(uint32_t) * no_tracks);",
      "155:     track_end = malloc(sizeof(uint8_t) * no_tracks);",
      "156:     running_event = malloc(sizeof(uint8_t) * no_tracks);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "150:     track_size = malloc(sizeof(uint32_t) * no_tracks);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "168:         midi_data += 4;",
      "169:         midi_size -= 4;",
      "175:         midi_size -= 4;",
      "177:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(too short)\", 0);",
      "178:             goto _end;",
      "179:         }",
      "181:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(bad track size)\", 0);",
      "182:             goto _end;",
      "183:         }",
      "187:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(missing EOT)\", 0);",
      "188:             goto _end;",
      "189:         }",
      "190:         tracks[i] = midi_data;",
      "193:         track_end[i] = 0;",
      "194:         running_event[i] = 0;",
      "195:         track_delta[i] = 0;",
      "",
      "[Removed Lines]",
      "171:         track_size = *midi_data++ << 24;",
      "172:         track_size |= *midi_data++ << 16;",
      "173:         track_size |= *midi_data++ << 8;",
      "174:         track_size |= *midi_data++;",
      "176:         if (midi_size < track_size) {",
      "180:         if (track_size < 3) {",
      "184:         if ((midi_data[track_size - 3] != 0xFF)",
      "185:                 || (midi_data[track_size - 2] != 0x2F)",
      "186:                 || (midi_data[track_size - 1] != 0x00)) {",
      "191:         midi_data += track_size;",
      "192:         midi_size -= track_size;",
      "",
      "[Added Lines]",
      "169:         tmp_val = *midi_data++ << 24;",
      "170:         tmp_val |= *midi_data++ << 16;",
      "171:         tmp_val |= *midi_data++ << 8;",
      "172:         tmp_val |= *midi_data++;",
      "174:         if (midi_size < tmp_val) {",
      "178:         if (tmp_val < 3) {",
      "182:         if ((midi_data[tmp_val - 3] != 0xFF)",
      "183:                 || (midi_data[tmp_val - 2] != 0x2F)",
      "184:                 || (midi_data[tmp_val - 1] != 0x00)) {",
      "189:         track_size[i] = tmp_val;",
      "190:         midi_data += tmp_val;",
      "191:         midi_size -= tmp_val;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "197:         while (*tracks[i] > 0x7F) {",
      "198:             track_delta[i] = (track_delta[i] << 7) + (*tracks[i] & 0x7F);",
      "199:             tracks[i]++;",
      "200:         }",
      "201:         track_delta[i] = (track_delta[i] << 7) + (*tracks[i] & 0x7F);",
      "202:         tracks[i]++;",
      "204:         if (midi_type == 1 ) {",
      "205:             if (track_delta[i] < smallest_delta) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "199:             track_size[i]--;",
      "203:         track_size[i]--;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "243:                     }",
      "244:                 }",
      "245:                 do {",
      "247:                     if (setup_ret == 0) {",
      "248:                         goto _end;",
      "249:                     }",
      "",
      "[Removed Lines]",
      "246:                     setup_ret = _WM_SetupMidiEvent(mdi, tracks[i], running_event[i]);",
      "",
      "[Added Lines]",
      "247:                     setup_ret = _WM_SetupMidiEvent(mdi, tracks[i], track_size[i], running_event[i]);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "259:                             end_of_tracks++;",
      "260:                             track_end[i] = 1;",
      "261:                             tracks[i] += 3;",
      "262:                             goto NEXT_TRACK;",
      "263:                         } else if ((tracks[i][0] == 0xff) && (tracks[i][1] == 0x51) && (tracks[i][2] == 0x03)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "263:                             track_size[i] -= 3;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "270:                         }",
      "271:                     }",
      "272:                     tracks[i] += setup_ret;",
      "274:                     if (*tracks[i] > 0x7f) {",
      "275:                         do {",
      "276:                             track_delta[i] = (track_delta[i] << 7) + (*tracks[i] & 0x7F);",
      "277:                             tracks[i]++;",
      "278:                         } while (*tracks[i] > 0x7f);",
      "279:                     }",
      "280:                     track_delta[i] = (track_delta[i] << 7) + (*tracks[i] & 0x7F);",
      "281:                     tracks[i]++;",
      "282:                 } while (!track_delta[i]);",
      "283:                 if ((!smallest_delta) || (smallest_delta > track_delta[i])) {",
      "284:                     smallest_delta = track_delta[i];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "275:                     track_size[i] -= setup_ret;",
      "279:                             if (!track_size[i]) break;",
      "282:                             track_size[i]--;",
      "285:                     if (!track_size[i]) {",
      "286:                         _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(too short)\", 0);",
      "287:                         goto _end;",
      "288:                     }",
      "291:                     track_size[i]--;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "304:         for (i = 0; i < no_tracks; i++) {",
      "305:             running_event[i] = 0;",
      "306:             do {",
      "308:                 if (setup_ret == 0) {",
      "309:                     goto _end;",
      "310:                 }",
      "",
      "[Removed Lines]",
      "307:                 setup_ret = _WM_SetupMidiEvent(mdi, tracks[i], running_event[i]);",
      "",
      "[Added Lines]",
      "317:                 setup_ret = _WM_SetupMidiEvent(mdi, tracks[i], track_size[i], running_event[i]);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "329:                     }",
      "330:                 }",
      "331:                 tracks[i] += setup_ret;",
      "333:                 track_delta[i] = 0;",
      "334:                 if (*tracks[i] > 0x7f) {",
      "335:                     do {",
      "336:                         track_delta[i] = (track_delta[i] << 7) + (*tracks[i] & 0x7F);",
      "337:                         tracks[i]++;",
      "338:                     } while (*tracks[i] > 0x7f);",
      "339:                 }",
      "340:                 track_delta[i] = (track_delta[i] << 7) + (*tracks[i] & 0x7F);",
      "341:                 tracks[i]++;",
      "343:                 sample_count_f = (((float) track_delta[i] * samples_per_delta_f)",
      "344:                                   + sample_remainder);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "342:                 track_size[i] -= setup_ret;",
      "347:                         if (!track_size[i]) break;",
      "350:                         track_size[i]--;",
      "353:                 if (!track_size[i]) {",
      "354:                     _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(too short)\", 0);",
      "355:                     goto _end;",
      "356:                 }",
      "359:                 track_size[i]--;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "372:     free(track_delta);",
      "373:     free(running_event);",
      "374:     free(tracks);",
      "375:     if (mdi->reverb) return (mdi);",
      "376:     _WM_freeMDI(mdi);",
      "377:     return (NULL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "393:     free(track_size);",
      "",
      "---------------"
    ],
    "src/f_mus.c||src/f_mus.c": [
      "File: src/f_mus.c -> src/f_mus.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:     float tempo_f = 0.0;",
      "62:     uint16_t mus_freq = 0;",
      "63:     float samples_per_tick_f = 0.0;",
      "65:     uint8_t mus_event_size = 0;",
      "66:     uint8_t mus_prev_vol[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
      "67:     uint32_t setup_ret = 0;",
      "",
      "[Removed Lines]",
      "64:     uint8_t mus_event[] = { 0, 0, 0, 0 };",
      "",
      "[Added Lines]",
      "64: #define MUS_SZ 4",
      "65:     uint8_t mus_event[MUS_SZ] = { 0, 0, 0, 0 };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "314:                 break;",
      "315:         }",
      "318:         if (setup_ret == 0) {",
      "319:             goto _mus_end;",
      "320:         }",
      "",
      "[Removed Lines]",
      "317:         setup_ret = _WM_SetupMidiEvent(mus_mdi, (uint8_t *)mus_event, 0);",
      "",
      "[Added Lines]",
      "318:         setup_ret = _WM_SetupMidiEvent(mus_mdi, (uint8_t *)mus_event, MUS_SZ, 0);",
      "",
      "---------------"
    ],
    "src/f_xmidi.c||src/f_xmidi.c": [
      "File: src/f_xmidi.c -> src/f_xmidi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "267:                             setup_ret = 6;",
      "268:                             goto _XMI_Next_Event;",
      "269:                         }",
      "271:                             goto _xmi_end;",
      "272:                         }",
      "",
      "[Removed Lines]",
      "270:                         if ((setup_ret = _WM_SetupMidiEvent(xmi_mdi,xmi_data,0)) == 0) {",
      "",
      "[Added Lines]",
      "270:                         if ((setup_ret = _WM_SetupMidiEvent(xmi_mdi,xmi_data, xmi_size, 0)) == 0) {",
      "",
      "---------------"
    ],
    "src/internal_midi.c||src/internal_midi.c": [
      "File: src/internal_midi.c -> src/internal_midi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1962:     free(mdi);",
      "1963: }",
      "1967:      Only add standard MIDI and Sysex events in here.",
      "1968:      Non-standard events need to be handled by calling function",
      "",
      "[Removed Lines]",
      "1965: uint32_t _WM_SetupMidiEvent(struct _mdi *mdi, uint8_t * event_data, uint8_t running_event) {",
      "",
      "[Added Lines]",
      "1965: uint32_t _WM_SetupMidiEvent(struct _mdi *mdi, uint8_t * event_data, uint32_t siz, uint8_t running_event) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1978:     uint8_t data_2 = 0;",
      "1979:     char *text = NULL;",
      "1981:     if (event_data[0] >= 0x80) {",
      "1982:         command = *event_data & 0xf0;",
      "1983:         channel = *event_data++ & 0x0f;",
      "1984:         ret_cnt++;",
      "1985:     } else {",
      "1986:         command = running_event & 0xf0;",
      "1987:         channel = running_event & 0x0f;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1981:     if (!siz) goto shortbuf;",
      "1987:         if (--siz == 0) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1990:     switch(command) {",
      "1991:         case 0x80:",
      "1992:         _SETUP_NOTEOFF:",
      "1993:             data_1 = *event_data++;",
      "1994:             data_2 = *event_data++;",
      "1995:             _WM_midi_setup_noteoff(mdi, channel, data_1, data_2);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1996:             if (siz < 2) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1997:             break;",
      "1998:         case 0x90:",
      "2000:             data_1 = *event_data++;",
      "2001:             data_2 = *event_data++;",
      "2002:             midi_setup_noteon(mdi, channel, data_1, data_2);",
      "2003:             ret_cnt += 2;",
      "2004:             break;",
      "2005:         case 0xa0:",
      "2006:             data_1 = *event_data++;",
      "2007:             data_2 = *event_data++;",
      "2008:             midi_setup_aftertouch(mdi, channel, data_1, data_2);",
      "2009:             ret_cnt += 2;",
      "2010:             break;",
      "2011:         case 0xb0:",
      "2012:             data_1 = *event_data++;",
      "2013:             data_2 = *event_data++;",
      "2014:             midi_setup_control(mdi, channel, data_1, data_2);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2004:             if (siz < 2) goto shortbuf;",
      "2011:             if (siz < 2) goto shortbuf;",
      "2018:             if (siz < 2) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2025:             ret_cnt++;",
      "2026:             break;",
      "2027:         case 0xe0:",
      "2028:             data_1 = *event_data++;",
      "2029:             data_2 = *event_data++;",
      "2030:             midi_setup_pitch(mdi, channel, ((data_2 << 7) | (data_1 & 0x7f)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2035:             if (siz < 2) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2041:                      Sequence Number",
      "2042:                      We only setting this up here for WM_Event2Midi function",
      "2044:                     midi_setup_sequenceno(mdi, ((event_data[2] << 8) + event_data[3]));",
      "2045:                     ret_cnt += 4;",
      "2046:                 } else if (event_data[0] == 0x01) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2052:                     if (siz < 4) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2049:                     event_data++;",
      "2050:                     ret_cnt++;",
      "2052:                         do {",
      "2053:                             tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2054:                             event_data++;",
      "2055:                             ret_cnt++;",
      "2056:                         } while (*event_data > 0x7f);",
      "2057:                     }",
      "2058:                     tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2059:                     event_data++;",
      "2060:                     ret_cnt++;",
      "2062:                     text = malloc(tmp_length + 1);",
      "2063:                     memcpy(text, event_data, tmp_length);",
      "",
      "[Removed Lines]",
      "2051:                     if (*event_data > 0x7f) {",
      "",
      "[Added Lines]",
      "2060:                     if (--siz && *event_data > 0x7f) {",
      "2062:                             if (!siz) break;",
      "2065:                             siz--;",
      "2069:                     if (!siz) goto shortbuf;",
      "2073:                     if (--siz < tmp_length) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2072:                     event_data++;",
      "2073:                     ret_cnt++;",
      "2075:                         do {",
      "2076:                             tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2077:                             event_data++;",
      "2078:                             ret_cnt++;",
      "2079:                         } while (*event_data > 0x7f);",
      "2080:                     }",
      "2081:                     tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2082:                     event_data++;",
      "2083:                     ret_cnt++;",
      "2086:                     if (mdi->extra_info.copyright) {",
      "",
      "[Removed Lines]",
      "2074:                     if (*event_data > 0x7f) {",
      "",
      "[Added Lines]",
      "2088:                     if (--siz && *event_data > 0x7f) {",
      "2090:                             if (!siz) break;",
      "2093:                             siz--;",
      "2097:                     if (!siz) goto shortbuf;",
      "2101:                     if (--siz < tmp_length) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2108:                     event_data++;",
      "2109:                     ret_cnt++;",
      "2111:                         do {",
      "2112:                             tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2113:                             event_data++;",
      "2114:                             ret_cnt++;",
      "2115:                         } while (*event_data > 0x7f);",
      "2116:                     }",
      "2117:                     tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2118:                     event_data++;",
      "2119:                     ret_cnt++;",
      "2121:                     text = malloc(tmp_length + 1);",
      "2122:                     memcpy(text, event_data, tmp_length);",
      "",
      "[Removed Lines]",
      "2110:                     if (*event_data > 0x7f) {",
      "",
      "[Added Lines]",
      "2129:                     if (--siz && *event_data > 0x7f) {",
      "2131:                             if (!siz) break;",
      "2134:                             siz--;",
      "2138:                     if (!siz) goto shortbuf;",
      "2142:                     if (--siz < tmp_length) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2131:                     event_data++;",
      "2132:                     ret_cnt++;",
      "2134:                         do {",
      "2135:                             tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2136:                             event_data++;",
      "2137:                             ret_cnt++;",
      "2138:                         } while (*event_data > 0x7f);",
      "2139:                     }",
      "2140:                     tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2141:                     event_data++;",
      "2142:                     ret_cnt++;",
      "2144:                     text = malloc(tmp_length + 1);",
      "2145:                     memcpy(text, event_data, tmp_length);",
      "",
      "[Removed Lines]",
      "2133:                     if (*event_data > 0x7f) {",
      "",
      "[Added Lines]",
      "2157:                     if (--siz && *event_data > 0x7f) {",
      "2159:                             if (!siz) break;",
      "2162:                             siz--;",
      "2166:                     if (!siz) goto shortbuf;",
      "2170:                     if (--siz < tmp_length) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2154:                     event_data++;",
      "2155:                     ret_cnt++;",
      "2157:                         do {",
      "2158:                             tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2159:                             event_data++;",
      "2160:                             ret_cnt++;",
      "2161:                         } while (*event_data > 0x7f);",
      "2162:                     }",
      "2163:                     tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2164:                     event_data++;",
      "2165:                     ret_cnt++;",
      "2167:                     text = malloc(tmp_length + 1);",
      "2168:                     memcpy(text, event_data, tmp_length);",
      "",
      "[Removed Lines]",
      "2156:                     if (*event_data > 0x7f) {",
      "",
      "[Added Lines]",
      "2185:                     if (--siz && *event_data > 0x7f) {",
      "2187:                             if (!siz) break;",
      "2190:                             siz--;",
      "2194:                     if (!siz) goto shortbuf;",
      "2198:                     if (--siz < tmp_length) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2177:                     event_data++;",
      "2178:                     ret_cnt++;",
      "2180:                         do {",
      "2181:                             tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2182:                             event_data++;",
      "2183:                             ret_cnt++;",
      "2184:                         } while (*event_data > 0x7f);",
      "2185:                     }",
      "2186:                     tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2187:                     event_data++;",
      "2188:                     ret_cnt++;",
      "2190:                     text = malloc(tmp_length + 1);",
      "2191:                     memcpy(text, event_data, tmp_length);",
      "",
      "[Removed Lines]",
      "2179:                     if (*event_data > 0x7f) {",
      "",
      "[Added Lines]",
      "2213:                     if (--siz && *event_data > 0x7f) {",
      "2215:                             if (!siz) break;",
      "2218:                             siz--;",
      "2222:                     if (!siz) goto shortbuf;",
      "2226:                     if (--siz < tmp_length) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2200:                     event_data++;",
      "2201:                     ret_cnt++;",
      "2203:                         do {",
      "2204:                             tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2205:                             event_data++;",
      "2206:                             ret_cnt++;",
      "2207:                         } while (*event_data > 0x7f);",
      "2208:                     }",
      "2209:                     tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2210:                     event_data++;",
      "2211:                     ret_cnt++;",
      "2213:                     text = malloc(tmp_length + 1);",
      "2214:                     memcpy(text, event_data, tmp_length);",
      "",
      "[Removed Lines]",
      "2202:                     if (*event_data > 0x7f) {",
      "",
      "[Added Lines]",
      "2241:                     if (--siz && *event_data > 0x7f) {",
      "2243:                             if (!siz) break;",
      "2246:                             siz--;",
      "2250:                     if (!siz) goto shortbuf;",
      "2254:                     if (--siz < tmp_length) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2222:                      Channel Prefix",
      "2223:                      We only setting this up here for WM_Event2Midi function",
      "2225:                     midi_setup_channelprefix(mdi, event_data[2]);",
      "2226:                     ret_cnt += 3;",
      "2227:                 } else if ((event_data[0] == 0x21) && (event_data[1] == 0x01)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2269:                     if (siz < 3) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2229:                      Port Prefix",
      "2230:                      We only setting this up here for WM_Event2Midi function",
      "2232:                     midi_setup_portprefix(mdi, event_data[2]);",
      "2233:                     ret_cnt += 3;",
      "2234:                 } else if ((event_data[0] == 0x2F) && (event_data[1] == 0x00)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2277:                     if (siz < 3) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2237:                      Deal with this inside calling function",
      "2238:                      We only setting this up here for _WM_Event2Midi function",
      "2240:                     _WM_midi_setup_endoftrack(mdi);",
      "2241:                     ret_cnt += 2;",
      "2242:                 } else if ((event_data[0] == 0x51) && (event_data[1] == 0x03)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2286:                     if (siz < 2) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2245:                      Deal with this inside calling function.",
      "2246:                      We only setting this up here for _WM_Event2Midi function",
      "2248:                     _WM_midi_setup_tempo(mdi, ((event_data[2] << 16) + (event_data[3] << 8) + event_data[4]));",
      "2249:                     ret_cnt += 5;",
      "2250:                 } else if ((event_data[0] == 0x54) && (event_data[1] == 0x05)) {",
      "2252:                      SMPTE Offset",
      "2253:                      We only setting this up here for WM_Event2Midi function",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2295:                     if (siz < 5) goto shortbuf;",
      "2299:                     if (siz < 7) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2265:                      Time Signature",
      "2266:                      We only setting this up here for WM_Event2Midi function",
      "2268:                     midi_setup_timesignature(mdi, ((event_data[2] << 24) + (event_data[3] << 16) + (event_data[4] << 8) + event_data[5]));",
      "2269:                     ret_cnt += 6;",
      "2270:                 } else if ((event_data[0] == 0x59) && (event_data[1] == 0x02)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2317:                     if (siz < 6) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2272:                      Key Signature",
      "2273:                      We only setting this up here for WM_Event2Midi function",
      "2275:                     midi_setup_keysignature(mdi, ((event_data[2] << 8) + event_data[3]));",
      "2276:                     ret_cnt += 4;",
      "2277:                 } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2325:                     if (siz < 4) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "2281:                     event_data++;",
      "2282:                     ret_cnt++;",
      "2284:                         do {",
      "2285:                             tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2286:                             event_data++;",
      "2287:                             ret_cnt++;",
      "2288:                         } while (*event_data > 0x7f);",
      "2289:                     }",
      "2290:                     tmp_length = (tmp_length << 7) + (*event_data & 0x7f);",
      "2291:                     ret_cnt++;",
      "2292:                     ret_cnt += tmp_length;",
      "2293:                 }",
      "2295:             } else if ((channel == 0) || (channel == 7)) {",
      "",
      "[Removed Lines]",
      "2283:                     if (*event_data > 0x7f) {",
      "",
      "[Added Lines]",
      "2334:                     if (--siz && *event_data > 0x7f) {",
      "2336:                             if (!siz) break;",
      "2339:                             siz--;",
      "2343:                     if (!siz) goto shortbuf;",
      "2347:                     if (--siz < tmp_length) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "2302:                 if (*event_data > 0x7f) {",
      "2303:                     do {",
      "2304:                         sysex_len = (sysex_len << 7) + (*event_data & 0x7F);",
      "2305:                         event_data++;",
      "2306:                         ret_cnt++;",
      "2307:                     } while (*event_data > 0x7f);",
      "2308:                 }",
      "2309:                 sysex_len = (sysex_len << 7) + (*event_data & 0x7F);",
      "2310:                 event_data++;",
      "2312:                 ret_cnt++;",
      "2314:                 sysex_store = malloc(sizeof(uint8_t) * sysex_len);",
      "2315:                 memcpy(sysex_store, event_data, sysex_len);",
      "",
      "[Removed Lines]",
      "2311:                 if (!sysex_len) break;",
      "",
      "[Added Lines]",
      "2359:                         if (!siz) break;",
      "2362:                         siz--;",
      "2366:                 if (!siz) goto shortbuf;",
      "2370:                 if (--siz < sysex_len) goto shortbuf;",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "2381:     if (ret_cnt == 0)",
      "2382:         _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(missing event)\", 0);",
      "2383:     return ret_cnt;",
      "2384: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2444: shortbuf:",
      "2445:     _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(input too short)\", 0);",
      "2446:     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "809e400e50338c71bd13274fa09bb826aaaf8554",
      "candidate_info": {
        "commit_hash": "809e400e50338c71bd13274fa09bb826aaaf8554",
        "repo": "Mindwerks/wildmidi",
        "commit_url": "https://github.com/Mindwerks/wildmidi/commit/809e400e50338c71bd13274fa09bb826aaaf8554",
        "files": [
          "src/internal_midi.c"
        ],
        "message": "_WM_SetupMidiEvent, sysex handling: break without incrementing ret_cnt if we have zero sysex_len.\n\nfixes the first test case in issue #175",
        "before_after_code_files": [
          "src/internal_midi.c||src/internal_midi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/internal_midi.c||src/internal_midi.c"
          ],
          "candidate": [
            "src/internal_midi.c||src/internal_midi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/internal_midi.c||src/internal_midi.c": [
          "File: src/internal_midi.c -> src/internal_midi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2308:                 }",
          "2309:                 sysex_len = (sysex_len << 7) + (*event_data & 0x7F);",
          "2310:                 event_data++;",
          "2311:                 ret_cnt++;",
          "2313:                 sysex_store = malloc(sizeof(uint8_t) * sysex_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2311:                 if (!sysex_len) break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8a466829c67cacbb1700beded25c448d99514e5",
      "candidate_info": {
        "commit_hash": "d8a466829c67cacbb1700beded25c448d99514e5",
        "repo": "Mindwerks/wildmidi",
        "commit_url": "https://github.com/Mindwerks/wildmidi/commit/d8a466829c67cacbb1700beded25c448d99514e5",
        "files": [
          "src/DevTest.c"
        ],
        "message": "fix DevTest crashes for bug #175.",
        "before_after_code_files": [
          "src/DevTest.c||src/DevTest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/DevTest.c||src/DevTest.c": [
          "File: src/DevTest.c -> src/DevTest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:                 midi_data++;",
          "439:                 midi_size--;",
          "440:                 rtn_cnt++;",
          "442:                 sysex_store = realloc(sysex_store,",
          "443:                                       (sysex_store_ofs + sysex_size));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:                 if (!sysex_size) {",
          "442:                     if (verbose) printf(\"Zero Sysex size\\n\");",
          "443:                     break;",
          "444:                 }",
          "445:                 if (sysex_size > midi_size) {",
          "446:                     printf(\"Bad Sysex size %lu\\n\", sysex_size);",
          "447:                     return -1;",
          "448:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec0e2880b05c62562db16fbe448bafd19adb4593",
      "candidate_info": {
        "commit_hash": "ec0e2880b05c62562db16fbe448bafd19adb4593",
        "repo": "Mindwerks/wildmidi",
        "commit_url": "https://github.com/Mindwerks/wildmidi/commit/ec0e2880b05c62562db16fbe448bafd19adb4593",
        "files": [
          "src/f_hmi.c",
          "src/f_hmp.c",
          "src/f_midi.c",
          "src/f_mus.c",
          "src/f_xmidi.c",
          "src/file_io.c",
          "src/gus_pat.c",
          "src/internal_midi.c",
          "src/mus2mid.c",
          "src/patches.c",
          "src/reverb.c",
          "src/wildmidi.c",
          "src/wildmidi_lib.c",
          "src/wm_error.c",
          "src/xmi2mid.c"
        ],
        "message": "add type casts to malloc calls. compiles with c++ compilers, if one chooses to do so.",
        "before_after_code_files": [
          "src/f_hmi.c||src/f_hmi.c",
          "src/f_hmp.c||src/f_hmp.c",
          "src/f_midi.c||src/f_midi.c",
          "src/f_mus.c||src/f_mus.c",
          "src/f_xmidi.c||src/f_xmidi.c",
          "src/file_io.c||src/file_io.c",
          "src/gus_pat.c||src/gus_pat.c",
          "src/internal_midi.c||src/internal_midi.c",
          "src/mus2mid.c||src/mus2mid.c",
          "src/patches.c||src/patches.c",
          "src/reverb.c||src/reverb.c",
          "src/wildmidi.c||src/wildmidi.c",
          "src/wildmidi_lib.c||src/wildmidi_lib.c",
          "src/wm_error.c||src/wm_error.c",
          "src/xmi2mid.c||src/xmi2mid.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/f_hmi.c||src/f_hmi.c",
            "src/f_hmp.c||src/f_hmp.c",
            "src/f_midi.c||src/f_midi.c",
            "src/f_mus.c||src/f_mus.c",
            "src/f_xmidi.c||src/f_xmidi.c",
            "src/internal_midi.c||src/internal_midi.c"
          ],
          "candidate": [
            "src/f_hmi.c||src/f_hmi.c",
            "src/f_hmp.c||src/f_hmp.c",
            "src/f_midi.c||src/f_midi.c",
            "src/f_mus.c||src/f_mus.c",
            "src/f_xmidi.c||src/f_xmidi.c",
            "src/internal_midi.c||src/internal_midi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/f_hmi.c||src/f_hmi.c": [
          "File: src/f_hmi.c -> src/f_hmi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     _WM_midi_setup_tempo(hmi_mdi, (uint32_t)tempo_f);",
          "110:     hmi_data += 370;",
          "",
          "[Removed Lines]",
          "103:     hmi_track_offset = (uint32_t *)malloc(sizeof(uint32_t) * hmi_track_cnt);",
          "104:     hmi_track_header_length = malloc(sizeof(uint32_t) * hmi_track_cnt);",
          "105:     hmi_track_end = malloc(sizeof(uint32_t) * hmi_track_cnt);",
          "106:     hmi_delta = malloc(sizeof(uint32_t) * hmi_track_cnt);",
          "107:     note = malloc(sizeof(struct _note) * 128 * hmi_track_cnt);",
          "108:     hmi_running_event = malloc(sizeof(uint8_t) * 128 * hmi_track_cnt);",
          "",
          "[Added Lines]",
          "103:     hmi_track_offset = (uint32_t *) malloc(sizeof(uint32_t) * hmi_track_cnt);",
          "104:     hmi_track_header_length = (uint32_t *) malloc(sizeof(uint32_t) * hmi_track_cnt);",
          "105:     hmi_track_end = (uint32_t *) malloc(sizeof(uint32_t) * hmi_track_cnt);",
          "106:     hmi_delta = (uint32_t *) malloc(sizeof(uint32_t) * hmi_track_cnt);",
          "107:     note = (struct _note *) malloc(sizeof(struct _note) * 128 * hmi_track_cnt);",
          "108:     hmi_running_event = (uint8_t *) malloc(sizeof(uint8_t) * 128 * hmi_track_cnt);",
          "",
          "---------------"
        ],
        "src/f_hmp.c||src/f_hmp.c": [
          "File: src/f_hmp.c -> src/f_hmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     _WM_midi_setup_divisions(hmp_mdi, hmp_divisions);",
          "172:     _WM_midi_setup_tempo(hmp_mdi, (uint32_t)tempo_f);",
          "180:     smallest_delta = 0xffffffff;",
          "",
          "[Removed Lines]",
          "174:     hmp_chunk = malloc(sizeof(uint8_t *) * hmp_chunks);",
          "175:     chunk_length = malloc(sizeof(uint32_t) * hmp_chunks);",
          "176:     chunk_delta = malloc(sizeof(uint32_t) * hmp_chunks);",
          "177:     chunk_ofs = malloc(sizeof(uint32_t) * hmp_chunks);",
          "178:     chunk_end = malloc(sizeof(uint8_t) * hmp_chunks);",
          "",
          "[Added Lines]",
          "174:     hmp_chunk = (uint8_t **) malloc(sizeof(uint8_t *) * hmp_chunks);",
          "175:     chunk_length = (uint32_t *) malloc(sizeof(uint32_t) * hmp_chunks);",
          "176:     chunk_delta = (uint32_t *) malloc(sizeof(uint32_t) * hmp_chunks);",
          "177:     chunk_ofs = (uint32_t *) malloc(sizeof(uint32_t) * hmp_chunks);",
          "178:     chunk_end = (uint8_t *) malloc(sizeof(uint8_t) * hmp_chunks);",
          "",
          "---------------"
        ],
        "src/f_midi.c||src/f_midi.c": [
          "File: src/f_midi.c -> src/f_midi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     mdi = _WM_initMDI();",
          "147:     _WM_midi_setup_divisions(mdi,divisions);",
          "155:     smallest_delta = 0xffffffff;",
          "156:     for (i = 0; i < no_tracks; i++) {",
          "",
          "[Removed Lines]",
          "149:     tracks = malloc(sizeof(uint8_t *) * no_tracks);",
          "150:     track_size = malloc(sizeof(uint32_t) * no_tracks);",
          "151:     track_delta = malloc(sizeof(uint32_t) * no_tracks);",
          "152:     track_end = malloc(sizeof(uint8_t) * no_tracks);",
          "153:     running_event = malloc(sizeof(uint8_t) * no_tracks);",
          "",
          "[Added Lines]",
          "149:     tracks = (uint8_t **) malloc(sizeof(uint8_t *) * no_tracks);",
          "150:     track_size = (uint32_t *) malloc(sizeof(uint32_t) * no_tracks);",
          "151:     track_delta = (uint32_t *) malloc(sizeof(uint32_t) * no_tracks);",
          "152:     track_end = (uint8_t *) malloc(sizeof(uint8_t) * no_tracks);",
          "153:     running_event = (uint8_t *) malloc(sizeof(uint8_t) * no_tracks);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:      Note: This isn't accurate but will allow enough space for",
          "439:             events plus delta values.",
          "444:     (*out)[0] = 'M';",
          "",
          "[Removed Lines]",
          "441:     (*out) = malloc (sizeof(uint8_t) * (mdi->event_count * 12));",
          "",
          "[Added Lines]",
          "441:     (*out) = (uint8_t *) malloc (sizeof(uint8_t) * (mdi->event_count * 12));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "928:     (*out)[10] = (track_count >> 8) & 0xff;",
          "929:     (*out)[11] = track_count & 0xff;",
          "932:     (*outsize) = out_ofs;",
          "934:     return 0;",
          "",
          "[Removed Lines]",
          "931:     (*out) = realloc((*out), out_ofs);",
          "",
          "[Added Lines]",
          "931:     (*out) = (uint8_t *) realloc((*out), out_ofs);",
          "",
          "---------------"
        ],
        "src/f_mus.c||src/f_mus.c": [
          "File: src/f_mus.c -> src/f_mus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     }",
          "111:     for (mus_instr_cnt = 0; mus_instr_cnt < mus_no_instr; mus_instr_cnt++) {",
          "112:         mus_mid_instr[mus_instr_cnt] = (mus_data[mus_data_ofs + 1] << 8) | mus_data[mus_data_ofs];",
          "113:         mus_data_ofs += 2;",
          "",
          "[Removed Lines]",
          "110:     mus_mid_instr = malloc(mus_no_instr * sizeof(uint16_t));",
          "",
          "[Added Lines]",
          "109:     mus_mid_instr = (uint16_t *) malloc(mus_no_instr * sizeof(uint16_t));",
          "",
          "---------------"
        ],
        "src/f_xmidi.c||src/f_xmidi.c": [
          "File: src/f_xmidi.c -> src/f_xmidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:     xmi_samples_per_delta_f = _WM_GetSamplesPerTick(xmi_divisions, xmi_tempo);",
          "141:     memset(xmi_notelen, 0, (sizeof(uint32_t) * 16 * 128));",
          "143:     for (i = 0; i < xmi_formcnt; i++) {",
          "",
          "[Removed Lines]",
          "140:     xmi_notelen = malloc(sizeof(uint32_t) * 16 * 128);",
          "",
          "[Added Lines]",
          "140:     xmi_notelen = (uint32_t *) malloc(sizeof(uint32_t) * 16 * 128);",
          "",
          "---------------"
        ],
        "src/file_io.c||src/file_io.c": [
          "File: src/file_io.c -> src/file_io.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     BPTR fh = Open((const STRPTR) path, MODE_OLDFILE);",
          "79:     if (fh) {",
          "80:         struct FileInfoBlock *fib = (struct FileInfoBlock*)",
          "82:         if (fib != NULL) {",
          "83:             if (ExamineFH(fh, fib))",
          "84:                 size = fib->fib_Size;",
          "",
          "[Removed Lines]",
          "81:                                 AllocDosObject(DOS_FIB, NULL);",
          "",
          "[Added Lines]",
          "81:                               AllocDosObject(DOS_FIB, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     char buffer_dir[1024];",
          "142:     if (strncmp(filename, \"~/\", 2) == 0) {",
          "144:             home = pwd_ent->pw_dir;",
          "145:         } else {",
          "146:             home = getenv(\"HOME\");",
          "147:         }",
          "148:         if (home) {",
          "150:             if (buffer_file == NULL) {",
          "151:                 _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, filename, errno);",
          "152:                 return NULL;",
          "",
          "[Removed Lines]",
          "143:         if ((pwd_ent = getpwuid(getuid()))) {",
          "149:             buffer_file = malloc(strlen(filename) + strlen(home) + 1);",
          "",
          "[Added Lines]",
          "143:         pwd_ent = getpwuid(getuid());",
          "144:         if (pwd_ent) {",
          "150:             buffer_file = (char *) malloc(strlen(filename) + strlen(home) + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:     } else if (filename[0] != '/') {",
          "158:         char* cwdresult = getcwd(buffer_dir, 1024);",
          "159:         if (cwdresult != NULL)",
          "161:         if (buffer_file == NULL || cwdresult == NULL) {",
          "162:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, filename, errno);",
          "163:             return NULL;",
          "",
          "[Removed Lines]",
          "160:             buffer_file = malloc(strlen(filename) + strlen(buffer_dir) + 2);",
          "",
          "[Added Lines]",
          "161:             buffer_file = (char *) malloc(strlen(filename) + strlen(buffer_dir) + 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:     if (buffer_file == NULL) {",
          "174:         if (buffer_file == NULL) {",
          "175:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, filename, errno);",
          "176:             return NULL;",
          "",
          "[Removed Lines]",
          "173:         buffer_file = malloc(strlen(filename) + 1);",
          "",
          "[Added Lines]",
          "174:         buffer_file = (char *) malloc(strlen(filename) + 1);",
          "",
          "---------------"
        ],
        "src/gus_pat.c||src/gus_pat.c": [
          "File: src/gus_pat.c -> src/gus_pat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     int16_t *write_data = NULL;",
          "66:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "68:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "69:         write_data = gus_sample->data;",
          "70:         do {",
          "",
          "[Removed Lines]",
          "67:     gus_sample->data = calloc((gus_sample->data_length + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "67:     gus_sample->data = (int16_t *) calloc((gus_sample->data_length + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     int16_t *write_data_b = NULL;",
          "93:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "95:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "96:         write_data = gus_sample->data;",
          "97:         do {",
          "",
          "[Removed Lines]",
          "94:     gus_sample->data = calloc((new_length + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "94:     gus_sample->data = (int16_t *) calloc((new_length + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     uint32_t tmp_loop = 0;",
          "140:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "142:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "143:         write_data = gus_sample->data + gus_sample->data_length - 1;",
          "144:         do {",
          "",
          "[Removed Lines]",
          "141:     gus_sample->data = calloc((gus_sample->data_length + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "141:     gus_sample->data = (int16_t *) calloc((gus_sample->data_length + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "169:     int16_t *write_data_b = NULL;",
          "171:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "173:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "174:         write_data = gus_sample->data;",
          "175:         do {",
          "",
          "[Removed Lines]",
          "172:     gus_sample->data = calloc((new_length + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "172:     gus_sample->data = (int16_t *) calloc((new_length + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214:     int16_t *write_data = NULL;",
          "216:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "218:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "219:         write_data = gus_sample->data;",
          "220:         do {",
          "",
          "[Removed Lines]",
          "217:     gus_sample->data = calloc((gus_sample->data_length + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "217:     gus_sample->data = (int16_t *) calloc((gus_sample->data_length + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "240:     int16_t *write_data_b = NULL;",
          "242:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "244:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "245:         write_data = gus_sample->data;",
          "246:         do {",
          "",
          "[Removed Lines]",
          "243:     gus_sample->data = calloc((new_length + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "243:     gus_sample->data = (int16_t *) calloc((new_length + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "287:     uint32_t tmp_loop = 0;",
          "289:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "291:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "292:         write_data = gus_sample->data + gus_sample->data_length - 1;",
          "293:         do {",
          "",
          "[Removed Lines]",
          "290:     gus_sample->data = calloc((gus_sample->data_length + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "290:     gus_sample->data = (int16_t *) calloc((gus_sample->data_length + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "318:     int16_t *write_data_b = NULL;",
          "320:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "322:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "323:         write_data = gus_sample->data;",
          "324:         do {",
          "",
          "[Removed Lines]",
          "321:     gus_sample->data = calloc((new_length + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "321:     gus_sample->data = (int16_t *) calloc((new_length + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "362:     int16_t *write_data = NULL;",
          "364:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "366:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "367:         write_data = gus_sample->data;",
          "368:         do {",
          "",
          "[Removed Lines]",
          "365:     gus_sample->data = calloc(((gus_sample->data_length >> 1) + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "365:     gus_sample->data = (int16_t *) calloc(((gus_sample->data_length >> 1) + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "392:     int16_t *write_data_b = NULL;",
          "394:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "396:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "397:         write_data = gus_sample->data;",
          "398:         do {",
          "",
          "[Removed Lines]",
          "395:     gus_sample->data = calloc(((new_length >> 1) + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "395:     gus_sample->data = (int16_t *) calloc(((new_length >> 1) + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "447:     uint32_t tmp_loop = 0;",
          "449:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "451:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "452:         write_data = gus_sample->data + (gus_sample->data_length >> 1) - 1;",
          "453:         do {",
          "",
          "[Removed Lines]",
          "450:     gus_sample->data = calloc(((gus_sample->data_length >> 1) + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "450:     gus_sample->data = (int16_t *) calloc(((gus_sample->data_length >> 1) + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "482:     int16_t *write_data_b = NULL;",
          "484:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "486:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "487:         write_data = gus_sample->data;",
          "488:         do {",
          "",
          "[Removed Lines]",
          "485:     gus_sample->data = calloc(((new_length >> 1) + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "485:     gus_sample->data = (int16_t *) calloc(((new_length >> 1) + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "531:     int16_t *write_data = NULL;",
          "533:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "535:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "536:         write_data = gus_sample->data;",
          "537:         do {",
          "",
          "[Removed Lines]",
          "534:     gus_sample->data = calloc(((gus_sample->data_length >> 1) + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "534:     gus_sample->data = (int16_t *) calloc(((gus_sample->data_length >> 1) + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "561:     int16_t *write_data_b = NULL;",
          "563:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "565:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "566:         write_data = gus_sample->data;",
          "567:         do {",
          "",
          "[Removed Lines]",
          "564:     gus_sample->data = calloc(((new_length >> 1) + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "564:     gus_sample->data = (int16_t *) calloc(((new_length >> 1) + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "616:     uint32_t tmp_loop = 0;",
          "618:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "620:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "621:         write_data = gus_sample->data + (gus_sample->data_length >> 1) - 1;",
          "622:         do {",
          "",
          "[Removed Lines]",
          "619:     gus_sample->data = calloc(((gus_sample->data_length >> 1) + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "619:     gus_sample->data = (int16_t *) calloc(((gus_sample->data_length >> 1) + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "651:     int16_t *write_data_b = NULL;",
          "653:     SAMPLE_CONVERT_DEBUG(__FUNCTION__);",
          "655:     if (__builtin_expect((gus_sample->data != NULL), 1)) {",
          "656:         write_data = gus_sample->data;",
          "657:         do {",
          "",
          "[Removed Lines]",
          "654:     gus_sample->data = calloc(((new_length >> 1) + 2), sizeof(int16_t));",
          "",
          "[Added Lines]",
          "654:     gus_sample->data = (int16_t *) calloc(((new_length >> 1) + 2), sizeof(int16_t));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "761:     while (no_of_samples) {",
          "762:         uint32_t tmp_cnt;",
          "763:         if (first_gus_sample == NULL) {",
          "765:             gus_sample = first_gus_sample;",
          "766:         } else {",
          "768:             gus_sample = gus_sample->next;",
          "769:         }",
          "770:         if (gus_sample == NULL) {",
          "",
          "[Removed Lines]",
          "764:             first_gus_sample = malloc(sizeof(struct _sample));",
          "767:             gus_sample->next = malloc(sizeof(struct _sample));",
          "",
          "[Added Lines]",
          "764:             first_gus_sample = (struct _sample *) malloc(sizeof(struct _sample));",
          "767:             gus_sample->next = (struct _sample *) malloc(sizeof(struct _sample));",
          "",
          "---------------"
        ],
        "src/internal_midi.c||src/internal_midi.c": [
          "File: src/internal_midi.c -> src/internal_midi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "557: static void _WM_CheckEventMemoryPool(struct _mdi *mdi) {",
          "558:     if ((mdi->event_count + 1) >= mdi->events_size) {",
          "559:         mdi->events_size += MEM_CHUNK;",
          "561:                               (mdi->events_size * sizeof(struct _event)));",
          "562:     }",
          "563: }",
          "",
          "[Removed Lines]",
          "560:         mdi->events = realloc(mdi->events,",
          "",
          "[Added Lines]",
          "560:         mdi->events = (struct _event *) realloc(mdi->events,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1878: _WM_initMDI(void) {",
          "1879:     struct _mdi *mdi;",
          "1882:     memset(mdi, 0, (sizeof(struct _mdi)));",
          "1884:     mdi->extra_info.copyright = NULL;",
          "",
          "[Removed Lines]",
          "1881:     mdi = malloc(sizeof(struct _mdi));",
          "",
          "[Added Lines]",
          "1881:     mdi = (struct _mdi *) malloc(sizeof(struct _mdi));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1887:     _WM_load_patch(mdi, 0x0000);",
          "1889:     mdi->events_size = MEM_CHUNK;",
          "1891:     mdi->event_count = 0;",
          "1892:     mdi->current_event = mdi->events;",
          "",
          "[Removed Lines]",
          "1890:     mdi->events = malloc(mdi->events_size * sizeof(struct _event));",
          "",
          "[Added Lines]",
          "1890:     mdi->events = (struct _event *) malloc(mdi->events_size * sizeof(struct _event));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2073:                     if (--input_length < tmp_length) goto shortbuf;",
          "2077:                     memcpy(text, event_data, tmp_length);",
          "2078:                     text[tmp_length] = '\\0';",
          "2079:                     midi_setup_text(mdi, text);",
          "",
          "[Removed Lines]",
          "2076:                     text = malloc(tmp_length + 1);",
          "",
          "[Added Lines]",
          "2076:                     text = (char *) malloc(tmp_length + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2105:                     if (mdi->extra_info.copyright) {",
          "2107:                         memcpy(&mdi->extra_info.copyright[strlen(mdi->extra_info.copyright) + 1], event_data, tmp_length);",
          "2108:                         mdi->extra_info.copyright[strlen(mdi->extra_info.copyright) + 1 + tmp_length] = '\\0';",
          "2109:                         mdi->extra_info.copyright[strlen(mdi->extra_info.copyright)] = '\\n';",
          "2110:                     } else {",
          "2112:                         memcpy(mdi->extra_info.copyright, event_data, tmp_length);",
          "2113:                         mdi->extra_info.copyright[tmp_length] = '\\0';",
          "2114:                     }",
          "2118:                     memcpy(text, event_data, tmp_length);",
          "2119:                     text[tmp_length] = '\\0';",
          "2120:                     midi_setup_copyright(mdi, text);",
          "",
          "[Removed Lines]",
          "2106:                         mdi->extra_info.copyright = realloc(mdi->extra_info.copyright,(strlen(mdi->extra_info.copyright) + 1 + tmp_length + 1));",
          "2111:                         mdi->extra_info.copyright = malloc(tmp_length + 1);",
          "2117:                     text = malloc(tmp_length + 1);",
          "",
          "[Added Lines]",
          "2106:                         mdi->extra_info.copyright = (char *) realloc(mdi->extra_info.copyright,(strlen(mdi->extra_info.copyright) + 1 + tmp_length + 1));",
          "2111:                         mdi->extra_info.copyright = (char *) malloc(tmp_length + 1);",
          "2117:                     text = (char *) malloc(tmp_length + 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2142:                     if (--input_length < tmp_length) goto shortbuf;",
          "2146:                     memcpy(text, event_data, tmp_length);",
          "2147:                     text[tmp_length] = '\\0';",
          "2148:                     midi_setup_trackname(mdi, text);",
          "",
          "[Removed Lines]",
          "2145:                     text = malloc(tmp_length + 1);",
          "",
          "[Added Lines]",
          "2145:                     text = (char *) malloc(tmp_length + 1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2170:                     if (--input_length < tmp_length) goto shortbuf;",
          "2174:                     memcpy(text, event_data, tmp_length);",
          "2175:                     text[tmp_length] = '\\0';",
          "2176:                     midi_setup_instrumentname(mdi, text);",
          "",
          "[Removed Lines]",
          "2173:                     text = malloc(tmp_length + 1);",
          "",
          "[Added Lines]",
          "2173:                     text = (char *) malloc(tmp_length + 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2198:                     if (--input_length < tmp_length) goto shortbuf;",
          "2202:                     memcpy(text, event_data, tmp_length);",
          "2203:                     text[tmp_length] = '\\0';",
          "2204:                     midi_setup_lyric(mdi, text);",
          "",
          "[Removed Lines]",
          "2201:                     text = malloc(tmp_length + 1);",
          "",
          "[Added Lines]",
          "2201:                     text = (char *) malloc(tmp_length + 1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2226:                     if (--input_length < tmp_length) goto shortbuf;",
          "2230:                     memcpy(text, event_data, tmp_length);",
          "2231:                     text[tmp_length] = '\\0';",
          "2232:                     midi_setup_marker(mdi, text);",
          "",
          "[Removed Lines]",
          "2229:                     text = malloc(tmp_length + 1);",
          "",
          "[Added Lines]",
          "2229:                     text = (char *) malloc(tmp_length + 1);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2254:                     if (--input_length < tmp_length) goto shortbuf;",
          "2258:                     memcpy(text, event_data, tmp_length);",
          "2259:                     text[tmp_length] = '\\0';",
          "2260:                     midi_setup_cuepoint(mdi, text);",
          "",
          "[Removed Lines]",
          "2257:                     text = malloc(tmp_length + 1);",
          "",
          "[Added Lines]",
          "2257:                     text = (char *) malloc(tmp_length + 1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2370:                 if (--input_length < sysex_len) goto shortbuf;",
          "2374:                 memcpy(sysex_store, event_data, sysex_len);",
          "2376:                 if (sysex_store[sysex_len - 1] == 0xF7) {",
          "",
          "[Removed Lines]",
          "2373:                 sysex_store = malloc(sizeof(uint8_t) * sysex_len);",
          "",
          "[Added Lines]",
          "2373:                 sysex_store = (uint8_t *) malloc(sizeof(uint8_t) * sysex_len);",
          "",
          "---------------"
        ],
        "src/mus2mid.c||src/mus2mid.c": [
          "File: src/mus2mid.c -> src/mus2mid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: #define DST_CHUNK 8192",
          "134: static void resize_dst(struct mus_ctx *ctx) {",
          "135:     uint32_t pos = ctx->dst_ptr - ctx->dst;",
          "137:     ctx->dstsize += DST_CHUNK;",
          "138:     ctx->dstrem += DST_CHUNK;",
          "139:     ctx->dst_ptr = ctx->dst + pos;",
          "",
          "[Removed Lines]",
          "136:     ctx->dst = realloc(ctx->dst, ctx->dstsize + DST_CHUNK);",
          "",
          "[Added Lines]",
          "136:     ctx->dst = (uint8_t *) realloc(ctx->dst, ctx->dstsize + DST_CHUNK);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:     ctx.src = ctx.src_ptr = in;",
          "261:     ctx.srcsize = insize;",
          "264:     ctx.dst_ptr = ctx.dst;",
          "265:     ctx.dstsize = DST_CHUNK;",
          "266:     ctx.dstrem = DST_CHUNK;",
          "",
          "[Removed Lines]",
          "263:     ctx.dst = calloc(DST_CHUNK, sizeof(uint8_t));",
          "",
          "[Added Lines]",
          "263:     ctx.dst = (uint8_t *) calloc(DST_CHUNK, sizeof(uint8_t));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:         if (event & 128) {",
          "425:             delta_time = 0;",
          "426:             do {",
          "428:             } while ((*cur++ & 128));",
          "429:         } else {",
          "430:             delta_time = 0;",
          "",
          "[Removed Lines]",
          "427:                 delta_time = (delta_time * 128 + (*cur & 127)) * (140.0f / frequency);",
          "",
          "[Added Lines]",
          "427:                 delta_time = (int32_t)",
          "428:                               ((delta_time * 128 + (*cur & 127)) * (140.0f / frequency));",
          "",
          "---------------"
        ],
        "src/patches.c||src/patches.c": [
          "File: src/patches.c -> src/patches.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     }",
          "95:     mdi->patch_count++;",
          "97:                            (sizeof(struct _patch*) * mdi->patch_count));",
          "98:     mdi->patches[mdi->patch_count - 1] = tmp_patch;",
          "99:     tmp_patch->inuse_count++;",
          "",
          "[Removed Lines]",
          "96:     mdi->patches = realloc(mdi->patches,",
          "",
          "[Added Lines]",
          "96:     mdi->patches = (struct _patch **) realloc(mdi->patches,",
          "",
          "---------------"
        ],
        "src/reverb.c||src/reverb.c": [
          "File: src/reverb.c -> src/reverb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     double SPR_LSN_YOFS = 0.0;",
          "121:     double SPR_LSN_DST = 0.0;",
          "124:     int j = 0;",
          "125:     int i = 0;",
          "",
          "[Removed Lines]",
          "123:     struct _rvb *rtn_rvb = malloc(sizeof(struct _rvb));",
          "",
          "[Added Lines]",
          "123:     struct _rvb *rtn_rvb = (struct _rvb *) malloc(sizeof(struct _rvb));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     rtn_rvb->l_buf_size = (int) ((float) rate * (MAXL_DST / 340.29));",
          "264:     rtn_rvb->l_out = 0;",
          "266:     rtn_rvb->r_buf_size = (int) ((float) rate * (MAXR_DST / 340.29));",
          "268:     rtn_rvb->r_out = 0;",
          "270:     for (i = 0; i < 4; i++) {",
          "",
          "[Removed Lines]",
          "263:     rtn_rvb->l_buf = malloc(sizeof(int32_t) * (rtn_rvb->l_buf_size + 1));",
          "267:     rtn_rvb->r_buf = malloc(sizeof(int32_t) * (rtn_rvb->r_buf_size + 1));",
          "",
          "[Added Lines]",
          "263:     rtn_rvb->l_buf = (int32_t *) malloc(sizeof(int32_t) * (rtn_rvb->l_buf_size + 1));",
          "267:     rtn_rvb->r_buf = (int32_t *) malloc(sizeof(int32_t) * (rtn_rvb->r_buf_size + 1));",
          "",
          "---------------"
        ],
        "src/wildmidi.c||src/wildmidi.c": [
          "File: src/wildmidi.c -> src/wildmidi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:     InitializeCriticalSection(&waveCriticalSection);",
          "572:         fprintf(stderr, \"Memory allocation error\\r\\n\");",
          "573:         return -1;",
          "574:     }",
          "",
          "[Removed Lines]",
          "571:     if((mm_buffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, ((MM_BLOCK_SIZE + sizeof(WAVEHDR)) * MM_BLOCK_COUNT))) == NULL) {",
          "",
          "[Added Lines]",
          "571:     if((mm_buffer = (char *) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, ((MM_BLOCK_SIZE + sizeof(WAVEHDR)) * MM_BLOCK_COUNT))) == NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028: static int open_ahi_output(void) {",
          "1029:     AHImp = CreateMsgPort();",
          "1030:     if (AHImp) {",
          "1032:         if (AHIReq[0]) {",
          "1033:             AHIReq[0]->ahir_Version = 4;",
          "1035:             if (AHIReq[1]) {",
          "1036:                 if (!OpenDevice(AHINAME, AHI_DEFAULT_UNIT, (struct IORequest *)AHIReq[0], 0)) {",
          "",
          "[Removed Lines]",
          "1031:         AHIReq[0] = (struct AHIRequest *)CreateIORequest(AHImp, sizeof(struct AHIRequest));",
          "1034:             AHIReq[1] = AllocVec(sizeof(struct AHIRequest), MEMF_PUBLIC);",
          "",
          "[Added Lines]",
          "1031:         AHIReq[0] = (struct AHIRequest *) CreateIORequest(AHImp, sizeof(struct AHIRequest));",
          "1034:             AHIReq[1] = (struct AHIRequest *) AllocVec(sizeof(struct AHIRequest), MEMF_PUBLIC);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1044:                     AHIReq[0]->ahir_Position = 0x8000;",
          "1045:                     CopyMem(AHIReq[0], AHIReq[1], sizeof(struct AHIRequest));",
          "1048:                     if (AHIBuf[0]) {",
          "1050:                         if (AHIBuf[1]) {",
          "1051:                             send_output = write_ahi_output;",
          "1052:                             close_output = close_ahi_output;",
          "",
          "[Removed Lines]",
          "1047:                     AHIBuf[0] = AllocVec(BUFFERSIZE, MEMF_PUBLIC | MEMF_CLEAR);",
          "1049:                         AHIBuf[1] = AllocVec(BUFFERSIZE, MEMF_PUBLIC | MEMF_CLEAR);",
          "",
          "[Added Lines]",
          "1047:                     AHIBuf[0] = (int8_t *) AllocVec(BUFFERSIZE, MEMF_PUBLIC | MEMF_CLEAR);",
          "1049:                         AHIBuf[1] = (int8_t *) AllocVec(BUFFERSIZE, MEMF_PUBLIC | MEMF_CLEAR);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1778:     printf(\" ,  1sec Seek Back   r  Reverb               .  1sec Seek Forward\\n\");",
          "1779:     printf(\" m  save as midi     p  Pause On/Off\\n\\n\");",
          "1782:     if (output_buffer == NULL) {",
          "1783:         fprintf(stderr, \"Not enough memory, exiting\\n\");",
          "1784:         WildMidi_Shutdown();",
          "",
          "[Removed Lines]",
          "1781:     output_buffer = malloc(16384);",
          "",
          "[Added Lines]",
          "1781:     output_buffer = (int8_t *) malloc(16384);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1812:             if (test_count == midi_test_max) {",
          "1813:                 break;",
          "1814:             }",
          "1816:             memcpy(test_data, midi_test[test_count].data,",
          "1817:                     midi_test[test_count].size);",
          "1818:             test_data[25] = test_bank;",
          "",
          "[Removed Lines]",
          "1815:             test_data = malloc(midi_test[test_count].size);",
          "",
          "[Added Lines]",
          "1815:             test_data = (uint8_t *) malloc(midi_test[test_count].size);",
          "",
          "---------------"
        ],
        "src/wildmidi_lib.c||src/wildmidi_lib.c": [
          "File: src/wildmidi_lib.c -> src/wildmidi_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:         for (j = 0, sign = (int) pow(-1, i); j <= i; j++, sign *= -1)",
          "149:             newt_coeffs[i][j] *= sign;",
          "152:     x_inc = 1.0 / (1<<FPBITS);",
          "153:     for (m = 0, x = 0.0; m < (1<<FPBITS); m++, x += x_inc) {",
          "154:         xz = (x + n_half) / (4 * M_PI);",
          "",
          "[Removed Lines]",
          "151:     t = malloc((1<<FPBITS) * (n + 1) * sizeof(double));",
          "",
          "[Added Lines]",
          "151:     t = (double *) malloc((1<<FPBITS) * (n + 1) * sizeof(double));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:                 token_start = 1;",
          "329:                 if (token_count >= token_data_length) {",
          "330:                     token_data_length += TOKEN_CNT_INC;",
          "332:                     if (token_data == NULL) {",
          "333:                         _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM,\"to parse config\", errno);",
          "334:                         return (NULL);",
          "",
          "[Removed Lines]",
          "331:                     token_data = realloc(token_data, token_data_length * sizeof(char *));",
          "",
          "[Added Lines]",
          "331:                     token_data = (char **) realloc(token_data, token_data_length * sizeof(char *));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:     if (token_count) {",
          "347:         if (token_count >= token_data_length) {",
          "350:         }",
          "351:         token_data[token_count] = NULL;",
          "352:     }",
          "",
          "[Removed Lines]",
          "348:             token_data = realloc(token_data,",
          "349:                 ((token_count + 1) * sizeof(char *)));",
          "",
          "[Added Lines]",
          "348:             token_data = (char **) realloc(token_data, ((token_count + 1) * sizeof(char *)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:     } else {",
          "383:         dir_end = FIND_LAST_DIRSEP(config_file);",
          "384:         if (dir_end) {",
          "386:             if (config_dir == NULL) {",
          "387:                 _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, config_file, errno);",
          "388:                 WM_FreePatches();",
          "",
          "[Removed Lines]",
          "385:             config_dir = malloc((dir_end - config_file + 2));",
          "",
          "[Added Lines]",
          "384:             config_dir = (char *) malloc((dir_end - config_file + 2));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "439:                             free(config_buffer);",
          "440:                             return (-1);",
          "441:                         } else if (!IS_ABSOLUTE_PATH(line_tokens[1]) && config_dir) {",
          "443:                             if (new_config == NULL) {",
          "444:                                 _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, config_file, errno);",
          "445:                                 WM_FreePatches();",
          "",
          "[Removed Lines]",
          "442:                             new_config = malloc(strlen(config_dir) + strlen(line_tokens[1]) + 1);",
          "",
          "[Added Lines]",
          "441:                             new_config = (char *) malloc(strlen(config_dir) + strlen(line_tokens[1]) + 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "563:                         patchid = (patchid & 0xFF80)",
          "564:                                 | (atoi(line_tokens[0]) & 0x7F);",
          "565:                         if (_WM_patch[(patchid & 0x7F)] == NULL) {",
          "567:                             if (_WM_patch[(patchid & 0x7F)] == NULL) {",
          "568:                                 _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, config_file, errno);",
          "569:                                 WM_FreePatches();",
          "",
          "[Removed Lines]",
          "566:                             _WM_patch[(patchid & 0x7F)] = malloc(sizeof(struct _patch));",
          "",
          "[Added Lines]",
          "565:                             _WM_patch[(patchid & 0x7F)] = (struct _patch *) malloc(sizeof(struct _patch));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "596:                                         tmp_patch = tmp_patch->next;",
          "597:                                     }",
          "598:                                     if (tmp_patch->next == NULL) {",
          "600:                                             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, config_file, 0);",
          "601:                                             WM_FreePatches();",
          "602:                                             free(config_dir);",
          "",
          "[Removed Lines]",
          "599:                                         if ((tmp_patch->next = malloc(sizeof(struct _patch))) == NULL) {",
          "",
          "[Added Lines]",
          "598:                                         if ((tmp_patch->next = (struct _patch *) malloc(sizeof(struct _patch))) == NULL) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "621:                                         tmp_patch->note = 0;",
          "622:                                     }",
          "623:                                 } else {",
          "626:                                     if (tmp_patch->next == NULL) {",
          "627:                                         _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, config_file, errno);",
          "628:                                         WM_FreePatches();",
          "",
          "[Removed Lines]",
          "624:                                     tmp_patch->next = malloc(",
          "625:                                             sizeof(struct _patch));",
          "",
          "[Added Lines]",
          "623:                                     tmp_patch->next = (struct _patch *) malloc(sizeof(struct _patch));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "651:                             free(config_buffer);",
          "652:                             return (-1);",
          "653:                         } else if (!IS_ABSOLUTE_PATH(line_tokens[1]) && config_dir) {",
          "655:                             if (tmp_patch->filename == NULL) {",
          "656:                                 _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, config_file, 0);",
          "657:                                 WM_FreePatches();",
          "",
          "[Removed Lines]",
          "654:                             tmp_patch->filename = malloc(strlen(config_dir) + strlen(line_tokens[1]) + 5);",
          "",
          "[Added Lines]",
          "652:                             tmp_patch->filename = (char *) malloc(strlen(config_dir) + strlen(line_tokens[1]) + 5);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "779:     struct _hndl *tmp_handle = NULL;",
          "781:     if (first_handle == NULL) {",
          "783:         if (first_handle == NULL) {",
          "784:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, \" to get ram\", errno);",
          "785:             return (-1);",
          "",
          "[Removed Lines]",
          "782:         first_handle = malloc(sizeof(struct _hndl));",
          "",
          "[Added Lines]",
          "780:         first_handle = (struct _hndl *) malloc(sizeof(struct _hndl));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "793:             while (tmp_handle->next)",
          "794:                 tmp_handle = tmp_handle->next;",
          "795:         }",
          "797:         if (tmp_handle->next == NULL) {",
          "798:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, \" to get ram\", errno);",
          "799:             return (-1);",
          "",
          "[Removed Lines]",
          "796:         tmp_handle->next = malloc(sizeof(struct _hndl));",
          "",
          "[Added Lines]",
          "794:         tmp_handle->next = (struct _hndl *) malloc(sizeof(struct _hndl));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "844:         } else {",
          "845:             mdi->mix_buffer_size = size / 2;",
          "846:         }",
          "848:     }",
          "850:     tmp_buffer = mdi->mix_buffer;",
          "",
          "[Removed Lines]",
          "847:         mdi->mix_buffer = realloc(mdi->mix_buffer, mdi->mix_buffer_size * sizeof(int32_t));",
          "",
          "[Added Lines]",
          "845:         mdi->mix_buffer = (int32_t *) realloc(mdi->mix_buffer, mdi->mix_buffer_size * sizeof(int32_t));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1162:         } else {",
          "1163:             mdi->mix_buffer_size = size / 2;",
          "1164:         }",
          "1166:     }",
          "1168:     tmp_buffer = mdi->mix_buffer;",
          "",
          "[Removed Lines]",
          "1165:         mdi->mix_buffer = realloc(mdi->mix_buffer, mdi->mix_buffer_size * sizeof(int32_t));",
          "",
          "[Added Lines]",
          "1163:         mdi->mix_buffer = (int32_t *) realloc(mdi->mix_buffer, mdi->mix_buffer_size * sizeof(int32_t));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1765:     if (mdi->extra_info.current_sample > *sample_pos) {",
          "1767:         event = mdi->events;",
          "1769:         mdi->extra_info.current_sample = 0;",
          "1770:         mdi->samples_to_mix = 0;",
          "1771:     }",
          "",
          "[Removed Lines]",
          "1768:         _WM_ResetToStart(handle);",
          "",
          "[Added Lines]",
          "1766:         _WM_ResetToStart((struct _mdi *) handle);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1869:         }",
          "1870:         event_new = event;",
          "1871:         event = mdi->events;",
          "1874:     } else if (nextsong == 1) {",
          "",
          "[Removed Lines]",
          "1872:         _WM_ResetToStart(handle);",
          "",
          "[Added Lines]",
          "1870:         _WM_ResetToStart((struct _mdi *) handle);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1900:         }",
          "1901:         event_new = event;",
          "1902:         event = mdi->events;",
          "1904:     }",
          "1906:     while (event != event_new) {",
          "",
          "[Removed Lines]",
          "1903:         _WM_ResetToStart(handle);",
          "",
          "[Added Lines]",
          "1901:         _WM_ResetToStart((struct _mdi *) handle);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1968:         _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_INVALID_ARG, \"(NULL buffer pointer)\", 0);",
          "1969:         return (-1);",
          "1970:     }",
          "1972: }",
          "",
          "[Removed Lines]",
          "1971:     return _WM_Event2Midi(handle, (uint8_t **)buffer, size);",
          "",
          "[Added Lines]",
          "1969:     return _WM_Event2Midi((struct _mdi *)handle, (uint8_t **)buffer, size);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2042:     }",
          "2043:     _WM_Lock(&mdi->lock);",
          "2044:     if (mdi->tmp_info == NULL) {",
          "2046:         if (mdi->tmp_info == NULL) {",
          "2047:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, \"to set info\", 0);",
          "2048:             _WM_Unlock(&mdi->lock);",
          "",
          "[Removed Lines]",
          "2045:         mdi->tmp_info = malloc(sizeof(struct _WM_Info));",
          "",
          "[Added Lines]",
          "2043:         mdi->tmp_info = (struct _WM_Info *) malloc(sizeof(struct _WM_Info));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2056:     mdi->tmp_info->total_midi_time = (mdi->tmp_info->approx_total_samples * 1000) / _WM_SampleRate;",
          "2057:     if (mdi->extra_info.copyright) {",
          "2058:         free(mdi->tmp_info->copyright);",
          "2060:         if (mdi->tmp_info->copyright == NULL) {",
          "2061:             free(mdi->tmp_info);",
          "2062:             mdi->tmp_info = NULL;",
          "",
          "[Removed Lines]",
          "2059:         mdi->tmp_info->copyright = malloc(strlen(mdi->extra_info.copyright) + 1);",
          "",
          "[Added Lines]",
          "2057:         mdi->tmp_info->copyright = (char *) malloc(strlen(mdi->extra_info.copyright) + 1);",
          "",
          "---------------"
        ],
        "src/wm_error.c||src/wm_error.c": [
          "File: src/wm_error.c -> src/wm_error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     if (_WM_Global_ErrorS != NULL) free(_WM_Global_ErrorS);",
          "83:     if (error == 0) {",
          "84:         if (wmfor == NULL) {",
          "",
          "[Removed Lines]",
          "81:     errorstring = malloc(MAX_ERROR_LEN+1);",
          "",
          "[Added Lines]",
          "81:     errorstring = (char *) malloc(MAX_ERROR_LEN+1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     char *errorstring;",
          "107:     va_list args;",
          "108:     va_start(args, wmfmt);",
          "110:     vsprintf(errorstring, wmfmt, args);",
          "111:     va_end(args);",
          "112:     errorstring[MAX_ERROR_LEN] = 0;",
          "",
          "[Removed Lines]",
          "109:     errorstring = malloc(MAX_ERROR_LEN+1);",
          "",
          "[Added Lines]",
          "109:     errorstring = (char *) malloc(MAX_ERROR_LEN+1);",
          "",
          "---------------"
        ],
        "src/xmi2mid.c||src/xmi2mid.c": [
          "File: src/xmi2mid.c -> src/xmi2mid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: #define DST_CHUNK 8192",
          "123: static void resize_dst(struct xmi_ctx *ctx) {",
          "124:     uint32_t pos = ctx->dst_ptr - ctx->dst;",
          "126:     ctx->dstsize += DST_CHUNK;",
          "127:     ctx->dstrem += DST_CHUNK;",
          "128:     ctx->dst_ptr = ctx->dst + pos;",
          "",
          "[Removed Lines]",
          "125:     ctx->dst = realloc(ctx->dst, ctx->dstsize + DST_CHUNK);",
          "",
          "[Added Lines]",
          "125:     ctx->dst = (uint8_t *) realloc(ctx->dst, ctx->dstsize + DST_CHUNK);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "488:         goto _end;",
          "489:     }",
          "492:     ctx.dst_ptr = ctx.dst;",
          "493:     ctx.dstsize = DST_CHUNK;",
          "494:     ctx.dstrem = DST_CHUNK;",
          "",
          "[Removed Lines]",
          "491:     ctx.dst = malloc(DST_CHUNK);",
          "",
          "[Added Lines]",
          "491:     ctx.dst = (uint8_t *) malloc(DST_CHUNK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "544: static void CreateNewEvent(struct xmi_ctx *ctx, int32_t time) {",
          "545:     if (!ctx->list) {",
          "547:         ctx->current->time = (time < 0)? 0 : time;",
          "548:         return;",
          "549:     }",
          "551:     if (time < 0) {",
          "553:         event->next = ctx->list;",
          "554:         ctx->list = ctx->current = event;",
          "555:         return;",
          "",
          "[Removed Lines]",
          "546:         ctx->list = ctx->current = calloc(1, sizeof(midi_event));",
          "552:         midi_event *event = calloc(1, sizeof(midi_event));",
          "",
          "[Added Lines]",
          "546:         ctx->list = ctx->current = (midi_event *) calloc(1, sizeof(midi_event));",
          "552:         midi_event *event = (midi_event *) calloc(1, sizeof(midi_event));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "561:     while (ctx->current->next) {",
          "562:         if (ctx->current->next->time > time) {",
          "564:             event->next = ctx->current->next;",
          "565:             ctx->current->next = event;",
          "566:             ctx->current = event;",
          "",
          "[Removed Lines]",
          "563:             midi_event *event = calloc(1, sizeof(midi_event));",
          "",
          "[Added Lines]",
          "563:             midi_event *event = (midi_event *) calloc(1, sizeof(midi_event));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "571:         ctx->current = ctx->current->next;",
          "572:     }",
          "575:     ctx->current = ctx->current->next;",
          "576:     ctx->current->time = time;",
          "577: }",
          "",
          "[Removed Lines]",
          "574:     ctx->current->next = calloc(1, sizeof(midi_event));",
          "",
          "[Added Lines]",
          "574:     ctx->current->next = (midi_event *) calloc(1, sizeof(midi_event));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "751:     if (!ctx->current->len)",
          "752:         return (i);",
          "755:     copy(ctx, (char *) ctx->current->buffer, ctx->current->len);",
          "757:     return (i + ctx->current->len);",
          "",
          "[Removed Lines]",
          "754:     ctx->current->buffer = malloc(sizeof(uint8_t)*ctx->current->len);",
          "",
          "[Added Lines]",
          "754:     ctx->current->buffer = (uint8_t *) malloc(sizeof(uint8_t)*ctx->current->len);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1084: static int ExtractTracks(struct xmi_ctx *ctx) {",
          "1085:     uint32_t i;",
          "1090:     ctx->info.type = (ctx->info.tracks > 1)? 2 : 0;",
          "",
          "[Removed Lines]",
          "1087:     ctx->events = calloc(ctx->info.tracks, sizeof(midi_event*));",
          "1088:     ctx->timing = calloc(ctx->info.tracks, sizeof(int16_t));",
          "",
          "[Added Lines]",
          "1087:     ctx->events = (midi_event **) calloc(ctx->info.tracks, sizeof(midi_event*));",
          "1088:     ctx->timing = (int16_t *) calloc(ctx->info.tracks, sizeof(int16_t));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e488a42b9a6dbe7129e8e3a2df4ce896cea23da1",
      "candidate_info": {
        "commit_hash": "e488a42b9a6dbe7129e8e3a2df4ce896cea23da1",
        "repo": "Mindwerks/wildmidi",
        "commit_url": "https://github.com/Mindwerks/wildmidi/commit/e488a42b9a6dbe7129e8e3a2df4ce896cea23da1",
        "files": [
          "src/f_midi.c"
        ],
        "message": "tidy-up after commit 35452b2 (bug #183 fix):\n\nmake sure to not read beyond bounds when checking a possible extra\nbyte at the end of the track.  minor cleanup.",
        "before_after_code_files": [
          "src/f_midi.c||src/f_midi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/f_midi.c||src/f_midi.c"
          ],
          "candidate": [
            "src/f_midi.c||src/f_midi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/f_midi.c||src/f_midi.c": [
          "File: src/f_midi.c -> src/f_midi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:             _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(bad track size)\", 0);",
          "180:             goto _end;",
          "181:         }",
          "198:                     _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(missing EOT)\", 0);",
          "199:                     goto _end;",
          "200:                 }",
          "",
          "[Removed Lines]",
          "182:         if ((midi_data[tmp_val - 3] != 0xFF)",
          "183:                 || (midi_data[tmp_val - 2] != 0x2F)",
          "184:                 || (midi_data[tmp_val - 1] != 0x00)) {",
          "190:             if (!(midi_type == 0)) {",
          "195:                 if ((midi_data[tmp_val - 4] != 0xFF)",
          "196:                     || (midi_data[tmp_val - 3] != 0x2F)",
          "197:                     || (midi_data[tmp_val - 2] != 0x00)) {",
          "",
          "[Added Lines]",
          "182:         if ((midi_data[tmp_val - 3] != 0xFF) ||",
          "183:             (midi_data[tmp_val - 2] != 0x2F) ||",
          "184:             (midi_data[tmp_val - 1] != 0x00)) {",
          "189:             if (midi_type != 0) {",
          "194:                 if ((tmp_val < 4)                    ||",
          "195:                     (midi_data[tmp_val - 4] != 0xFF) ||",
          "196:                     (midi_data[tmp_val - 3] != 0x2F) ||",
          "197:                     (midi_data[tmp_val - 2] != 0x00)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:                 if (track_delta[i]) {",
          "252:                     track_delta[i] -= subtract_delta;",
          "253:                     if (track_delta[i]) {",
          "256:                             smallest_delta = track_delta[i];",
          "257:                         }",
          "258:                         continue;",
          "",
          "[Removed Lines]",
          "254:                         if ((!smallest_delta)",
          "255:                              || (smallest_delta > track_delta[i])) {",
          "",
          "[Added Lines]",
          "254:                         if (!smallest_delta || (smallest_delta > track_delta[i])) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24ca2671a7739fab9a774055db7de593eb397608",
      "candidate_info": {
        "commit_hash": "24ca2671a7739fab9a774055db7de593eb397608",
        "repo": "Mindwerks/wildmidi",
        "commit_url": "https://github.com/Mindwerks/wildmidi/commit/24ca2671a7739fab9a774055db7de593eb397608",
        "files": [
          "src/f_midi.c"
        ],
        "message": "Fix for no EOT marker for type 0 MIDI",
        "before_after_code_files": [
          "src/f_midi.c||src/f_midi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/f_midi.c||src/f_midi.c"
          ],
          "candidate": [
            "src/f_midi.c||src/f_midi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/f_midi.c||src/f_midi.c": [
          "File: src/f_midi.c -> src/f_midi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:                     } while (*tracks[i] > 0x7f);",
          "367:                 }",
          "368:                 if (!track_size[i]) {",
          "371:                 }",
          "372:                 track_delta[i] = (track_delta[i] << 7) + (*tracks[i] & 0x7F);",
          "373:                 tracks[i]++;",
          "",
          "[Removed Lines]",
          "369:                     _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(too short)\", 0);",
          "370:                     goto _end;",
          "",
          "[Added Lines]",
          "369:                     if (midi_type != 0)",
          "370:                         _WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(too short)\", 0);",
          "371:                         goto _end;",
          "372:                 } else {",
          "373:                     track_end[i] = 1;",
          "374:                     goto NEXT_TRACK2;",
          "",
          "---------------"
        ]
      }
    }
  ]
}