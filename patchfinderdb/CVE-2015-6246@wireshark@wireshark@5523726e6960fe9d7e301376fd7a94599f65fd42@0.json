{
  "cve_id": "CVE-2015-6246",
  "cve_desc": "The dissect_wa_payload function in epan/dissectors/packet-waveagent.c in the WaveAgent dissector in Wireshark 1.12.x before 1.12.7 mishandles large tag values, which allows remote attackers to cause a denial of service (application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "5523726e6960fe9d7e301376fd7a94599f65fd42",
  "patch_info": {
    "commit_hash": "5523726e6960fe9d7e301376fd7a94599f65fd42",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/5523726e6960fe9d7e301376fd7a94599f65fd42",
    "files": [
      "epan/dissectors/packet-waveagent.c"
    ],
    "message": "WaveAgent - Use tvb_get_guint8 instead of tvb_get_ptr to walk a packet and protect against a really big tag value\n\nPing-Bug: 11358\nChange-Id: I9ecb5fe6bcd7f25c763d968bf56fb2d9bce2180c\nReviewed-on: https://code.wireshark.org/review/9639\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c": [
      "File: epan/dissectors/packet-waveagent.c -> epan/dissectors/packet-waveagent.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "524:                 tag_len = tvb_get_ntohl(tvb, current_offset + 52);",
      "526:                 if (tag_len != 0) {",
      "532:                     for (isr = 0; isr < tag_len; isr++) {",
      "534:                             proto_tree_add_string (bss_tree, hf_waveagent_ifwlansupprates, tvb, offset + 36 + isr,",
      "535:                                                    1,",
      "536:                                                    \"BSS requires support for mandatory features of HT PHY (IEEE 802.11\"",
      "537:                                                    \" - Clause 20)\");",
      "538:                         } else {",
      "539:                             wmem_strbuf_append_printf(sb, \"%2.1f%s \",",
      "543:                         }",
      "544:                     }",
      "",
      "[Removed Lines]",
      "527:                     const guint8  *tag_data_ptr;",
      "528:                     guint32        isr;",
      "530:                     tag_data_ptr = tvb_get_ptr (tvb, offset + 36, tag_len);",
      "533:                         if (tag_data_ptr[isr] == 0xFF){",
      "540:                                       (tag_data_ptr[isr] & 0x7F) * 0.5,",
      "541:                                       (tag_data_ptr[isr] & 0x80) ? \"(B)\" : \"\");",
      "",
      "[Added Lines]",
      "527:                     guint32       isr;",
      "528:                     guint8        isr_value;",
      "531:                         isr_value = tvb_get_guint8(tvb, offset + 36 + isr);",
      "532:                         if (isr_value == 0xFF){",
      "539:                                       (isr_value & 0x7F) * 0.5,",
      "540:                                       (isr_value & 0x80) ? \"(B)\" : \"\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e0c9f257b6ebe44a14b74af4016dd8595ec39ed9",
      "candidate_info": {
        "commit_hash": "e0c9f257b6ebe44a14b74af4016dd8595ec39ed9",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e0c9f257b6ebe44a14b74af4016dd8595ec39ed9",
        "files": [
          "epan/dissectors/packet-waveagent.c"
        ],
        "message": "WaveAgent - Use tvb_get_guint8 instead of tvb_get_ptr to walk a packet and protect against a really big tag value\n\nConflicts:\n\tepan/dissectors/packet-waveagent.c\n\nPing-Bug: 11358\nChange-Id: I9ecb5fe6bcd7f25c763d968bf56fb2d9bce2180c\nReviewed-on: https://code.wireshark.org/review/9639\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 5523726e6960fe9d7e301376fd7a94599f65fd42)\nReviewed-on: https://code.wireshark.org/review/9653\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 1c1733e4be25c1e125e02f9eae2c7dc2e0206bf4)\nReviewed-on: https://code.wireshark.org/review/10586\nReviewed-by: Balint Reczey <balint@balintreczey.hu>\nReviewed-on: https://code.wireshark.org/review/11259",
        "before_after_code_files": [
          "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
          ],
          "candidate": [
            "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c": [
          "File: epan/dissectors/packet-waveagent.c -> epan/dissectors/packet-waveagent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: static void dissect_wa_payload(guint32 starting_offset, proto_item *parent_tree, tvbuff_t *tvb, guint32 control_word, guint8 version)",
          "299: {",
          "300:     guint32 if_type, if_status, flags_bitfield;",
          "302:     guint32 offset, delta, num_bss_entries, st_index[NUM_STATE_CHANGES], bss_array[NUM_BSS];",
          "303:     proto_tree *st_change_index_tree[NUM_STATE_CHANGES], *fs_flags;",
          "304:     proto_tree *bss_tree[NUM_BSS], *fs_flags_tree;",
          "305:     proto_item *stIndex[NUM_STATE_CHANGES], *bssIndex[NUM_BSS];",
          "307:     guint32 tag_len;",
          "308:     char out_buff[SHORT_STR];",
          "309:     char print_buff[SHORT_STR];",
          "",
          "[Removed Lines]",
          "301:     guint8 iLoop, isr, n, ret;",
          "306:     const guint8 *tag_data_ptr;",
          "",
          "[Added Lines]",
          "301:     guint8 iLoop, n, ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:                 tag_len = tvb_get_ntohl(tvb, current_offset + 52);",
          "543:                 if (tag_len > 0) {",
          "546:                     for (isr = 0, n = 0; isr < tag_len; isr++) {",
          "548:                             proto_tree_add_string (bss_tree[iLoop], hf_waveagent_ifwlansupprates, tvb, offset + 36 + isr,",
          "549:                                 1, \"BSS requires support for mandatory features of HT PHY (IEEE 802.11 - Clause 20)\");",
          "550:                         } else {",
          "551:                             ret = g_snprintf (print_buff + n, SHORT_STR - n, \"%2.1f%s \",",
          "554:                             if (ret >= SHORT_STR - n) {",
          "556:                                 break;",
          "",
          "[Removed Lines]",
          "544:                     tag_data_ptr = tvb_get_ptr (tvb, offset + 36, tag_len);",
          "547:                         if (tag_data_ptr[isr] == 0xFF){",
          "552:                                       (tag_data_ptr[isr] & 0x7F) * 0.5,",
          "553:                                       (tag_data_ptr[isr] & 0x80) ? \"(B)\" : \"\");",
          "",
          "[Added Lines]",
          "543:                     guint32       isr;",
          "544:                     guint8        isr_value;",
          "547:                         isr_value = tvb_get_guint8(tvb, offset + 36 + isr);",
          "548:                         if (isr_value == 0xFF){",
          "553:                                       (isr_value & 0x7F) * 0.5,",
          "554:                                       (isr_value & 0x80) ? \"(B)\" : \"\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c1733e4be25c1e125e02f9eae2c7dc2e0206bf4",
      "candidate_info": {
        "commit_hash": "1c1733e4be25c1e125e02f9eae2c7dc2e0206bf4",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1c1733e4be25c1e125e02f9eae2c7dc2e0206bf4",
        "files": [
          "epan/dissectors/packet-waveagent.c"
        ],
        "message": "WaveAgent - Use tvb_get_guint8 instead of tvb_get_ptr to walk a packet and protect against a really big tag value\n\nPing-Bug: 11358\nChange-Id: I9ecb5fe6bcd7f25c763d968bf56fb2d9bce2180c\nReviewed-on: https://code.wireshark.org/review/9639\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 5523726e6960fe9d7e301376fd7a94599f65fd42)\nReviewed-on: https://code.wireshark.org/review/9653\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
          ],
          "candidate": [
            "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c": [
          "File: epan/dissectors/packet-waveagent.c -> epan/dissectors/packet-waveagent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:                 tag_len = tvb_get_ntohl(tvb, current_offset + 52);",
          "530:                 if (tag_len != 0) {",
          "536:                     for (isr = 0; isr < tag_len; isr++) {",
          "538:                             proto_tree_add_string (bss_tree, hf_waveagent_ifwlansupprates, tvb, offset + 36 + isr,",
          "539:                                                    1,",
          "540:                                                    \"BSS requires support for mandatory features of HT PHY (IEEE 802.11\"",
          "541:                                                    \" - Clause 20)\");",
          "542:                         } else {",
          "543:                             wmem_strbuf_append_printf(sb, \"%2.1f%s \",",
          "547:                         }",
          "548:                     }",
          "",
          "[Removed Lines]",
          "531:                     const guint8  *tag_data_ptr;",
          "532:                     guint32        isr;",
          "534:                     tag_data_ptr = tvb_get_ptr (tvb, offset + 36, tag_len);",
          "537:                         if (tag_data_ptr[isr] == 0xFF){",
          "544:                                       (tag_data_ptr[isr] & 0x7F) * 0.5,",
          "545:                                       (tag_data_ptr[isr] & 0x80) ? \"(B)\" : \"\");",
          "",
          "[Added Lines]",
          "531:                     guint32       isr;",
          "532:                     guint8        isr_value;",
          "535:                         isr_value = tvb_get_guint8(tvb, offset + 36 + isr);",
          "536:                         if (isr_value == 0xFF){",
          "543:                                       (isr_value & 0x7F) * 0.5,",
          "544:                                       (isr_value & 0x80) ? \"(B)\" : \"\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c7952b62352c74e48dde9ce506b7163a80dbbbf",
      "candidate_info": {
        "commit_hash": "1c7952b62352c74e48dde9ce506b7163a80dbbbf",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1c7952b62352c74e48dde9ce506b7163a80dbbbf",
        "files": [
          "epan/dissectors/packet-waveagent.c"
        ],
        "message": "WaveAgent - Use tvb_get_guint8 instead of tvb_get_ptr to walk a packet and protect against a really big tag value\n\nPing-Bug: 11358\nChange-Id: I9ecb5fe6bcd7f25c763d968bf56fb2d9bce2180c\nReviewed-on: https://code.wireshark.org/review/9639\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit 5523726e6960fe9d7e301376fd7a94599f65fd42)\nReviewed-on: https://code.wireshark.org/review/9653\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 1c1733e4be25c1e125e02f9eae2c7dc2e0206bf4)\nReviewed-on: https://code.wireshark.org/review/10586\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
          ],
          "candidate": [
            "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-waveagent.c||epan/dissectors/packet-waveagent.c": [
          "File: epan/dissectors/packet-waveagent.c -> epan/dissectors/packet-waveagent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:                 tag_len = tvb_get_ntohl(tvb, current_offset + 52);",
          "530:                 if (tag_len != 0) {",
          "536:                     for (isr = 0; isr < tag_len; isr++) {",
          "538:                             proto_tree_add_string (bss_tree, hf_waveagent_ifwlansupprates, tvb, offset + 36 + isr,",
          "539:                                                    1,",
          "540:                                                    \"BSS requires support for mandatory features of HT PHY (IEEE 802.11\"",
          "541:                                                    \" - Clause 20)\");",
          "542:                         } else {",
          "543:                             wmem_strbuf_append_printf(sb, \"%2.1f%s \",",
          "547:                         }",
          "548:                     }",
          "",
          "[Removed Lines]",
          "531:                     const guint8  *tag_data_ptr;",
          "532:                     guint32        isr;",
          "534:                     tag_data_ptr = tvb_get_ptr (tvb, offset + 36, tag_len);",
          "537:                         if (tag_data_ptr[isr] == 0xFF){",
          "544:                                       (tag_data_ptr[isr] & 0x7F) * 0.5,",
          "545:                                       (tag_data_ptr[isr] & 0x80) ? \"(B)\" : \"\");",
          "",
          "[Added Lines]",
          "531:                     guint32       isr;",
          "532:                     guint8        isr_value;",
          "535:                         isr_value = tvb_get_guint8(tvb, offset + 36 + isr);",
          "536:                         if (isr_value == 0xFF){",
          "543:                                       (isr_value & 0x7F) * 0.5,",
          "544:                                       (isr_value & 0x80) ? \"(B)\" : \"\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}