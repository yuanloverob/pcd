{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "da03c1e65e449ee4f0f685b63c6906ad3d7ac2a9",
      "candidate_info": {
        "commit_hash": "da03c1e65e449ee4f0f685b63c6906ad3d7ac2a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/da03c1e65e449ee4f0f685b63c6906ad3d7ac2a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Avoid assuming that an expression that contains the sub-expression (? IS FALSE) or (? IS TRUE) may only be true if ? is non-null. Fix for [a976c487].\n\nFossilOrigin-Name: eb7ed90b8a65748f0721aaf7bdddd2207f552be5015603fbfb7044d815ae2f36",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86e497209217abb7bcb491a023cd353f3c7c9c103ebd9f58dd8661b12cf3694c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5149:     case TK_CASE:",
          "5150:     case TK_IN:",
          "5151:     case TK_FUNCTION:",
          "5152:       testcase( pExpr->op==TK_ISNOT );",
          "5153:       testcase( pExpr->op==TK_ISNULL );",
          "5154:       testcase( pExpr->op==TK_NOTNULL );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5152:     case TK_TRUTH:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5157:       testcase( pExpr->op==TK_CASE );",
          "5158:       testcase( pExpr->op==TK_IN );",
          "5159:       testcase( pExpr->op==TK_FUNCTION );",
          "5160:       return WRC_Prune;",
          "5161:     case TK_COLUMN:",
          "5162:       if( pWalker->u.iCur==pExpr->iTable ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5161:       testcase( pExpr->op==TK_TRUTH );",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "884:    WHERE NOT(y='a');",
          "885: } {1 3 1 3}",
          "887: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887: #-------------------------------------------------------------------------",
          "888: reset_db",
          "889: do_execsql_test join-18.1 {",
          "890:   CREATE TABLE t0(a);",
          "891:   CREATE TABLE t1(b);",
          "892:   CREATE VIEW v0 AS SELECT a FROM t1 LEFT JOIN t0;",
          "893:   INSERT INTO t1 VALUES (1);",
          "894: } {}",
          "896: do_execsql_test join-18.2 {",
          "897:   SELECT * FROM v0 WHERE NOT(v0.a IS FALSE);",
          "898: } {{}}",
          "900: do_execsql_test join-18.3 {",
          "901:   SELECT * FROM t1 LEFT JOIN t0 WHERE NOT(a IS FALSE);",
          "902: } {1 {}}",
          "904: do_execsql_test join-18.4 {",
          "905:   SELECT NOT(v0.a IS FALSE) FROM v0",
          "906: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eefc72d12fa7b76393e9a1092dfc8278260da1d9",
      "candidate_info": {
        "commit_hash": "eefc72d12fa7b76393e9a1092dfc8278260da1d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eefc72d12fa7b76393e9a1092dfc8278260da1d9",
        "files": [
          "ext/fts5/fts5_tokenize.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid an undefined left-shift operation in fts5 caused by malformed utf-8 text.\n\nFossilOrigin-Name: c3a3a11194586bef80a9d7ca54caae8af30d4e7b464b8bb3d257ba2d2ec4791f",
        "before_after_code_files": [
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:       const unsigned char *zCsr = (const unsigned char*)z;",
          "263:       const unsigned char *zTerm = (const unsigned char*)&z[n];",
          "264:       while( zCsr<zTerm ){",
          "266:         int bToken;",
          "267:         READ_UTF8(zCsr, zTerm, iCode);",
          "268:         if( iCode<128 ){",
          "269:           p->aTokenChar[iCode] = (unsigned char)bTokenChars;",
          "270:         }else{",
          "272:           assert( (bToken==0 || bToken==1) );",
          "273:           assert( (bTokenChars==0 || bTokenChars==1) );",
          "274:           if( bToken!=bTokenChars && sqlite3Fts5UnicodeIsdiacritic(iCode)==0 ){",
          "",
          "[Removed Lines]",
          "265:         int iCode;",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory((u32)iCode)];",
          "",
          "[Added Lines]",
          "265:         u32 iCode;",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory(iCode)];",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a385298df264dbfa6765f63ad8708f74bc8e8a1404239c1049890b39a1bda888",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac713403fdfa3b2c28aa9e1e0068baafdee7b2a5",
      "candidate_info": {
        "commit_hash": "ac713403fdfa3b2c28aa9e1e0068baafdee7b2a5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac713403fdfa3b2c28aa9e1e0068baafdee7b2a5",
        "files": [
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix harmless compiler warning seen with MSVC for x64.\n\nFossilOrigin-Name: 857b2ba6d05d6f5a8cfdf269bae9005b25e1903ab9dc6b70546979d8c633f03b",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1837:     i64 nNew = p->nAlloc ? p->nAlloc : 128;",
          "1838:     do {",
          "1839:       nNew = nNew*2;",
          "1842:     aNew = (u8 *)sqlite3_realloc64(p->aBuf, nNew);",
          "1843:     if( 0==aNew ){",
          "",
          "[Removed Lines]",
          "1840:     }while( (nNew-p->nBuf)<nByte );",
          "",
          "[Added Lines]",
          "1840:     }while( (size_t)(nNew-p->nBuf)<nByte );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6bfa44da226fd758a2ee924d1e8e3a742b0635b6d3f922a4a7919cb14b2418e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dc0e9c2afeadf5896478cf0e1a37b6c18a45ce7",
      "candidate_info": {
        "commit_hash": "0dc0e9c2afeadf5896478cf0e1a37b6c18a45ce7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0dc0e9c2afeadf5896478cf0e1a37b6c18a45ce7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "More improvements to TreeView output for Window objects: (1) Show when the frame-spec is implied rather than explicit. (2) Move the FILTER clause out from within the OVER clause, making it a sibling of the OVER clause, to match syntax.\n\nFossilOrigin-Name: d6a07433421ac9a475ff0014587f0beefdf88ce89aef9443f8a20cd26083731f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec2f207dedb223077bbd3e4584499250eb12219712c917e930acccfa2c46e23b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: void sqlite3TreeViewWindow(TreeView *pView, const Window *pWin, u8 more){",
          "312:   int nElement = 0;",
          "313:   pView = sqlite3TreeViewPush(pView, more);",
          "314:   if( pWin->zName ){",
          "315:     sqlite3TreeViewLine(pView, \"OVER %s\", pWin->zName);",
          "316:   }else{",
          "317:     sqlite3TreeViewLine(pView, \"OVER\");",
          "318:   }",
          "320:   if( pWin->zBase )    nElement++;",
          "321:   if( pWin->pOrderBy ) nElement++;",
          "322:   if( pWin->eFrmType ) nElement++;",
          "323:   if( pWin->eExclude ) nElement++;",
          "329:   if( pWin->zBase ){",
          "330:     sqlite3TreeViewPush(pView, (--nElement)>0);",
          "331:     sqlite3TreeViewLine(pView, \"window: %s\", pWin->zBase);",
          "",
          "[Removed Lines]",
          "319:   if( pWin->pFilter )  nElement++;",
          "324:   if( pWin->pFilter ){",
          "325:     sqlite3TreeViewItem(pView, \"FILTER\", (--nElement)>0);",
          "326:     sqlite3TreeViewExpr(pView, pWin->pFilter, 0);",
          "327:     sqlite3TreeViewPop(pView);",
          "328:   }",
          "",
          "[Added Lines]",
          "313:   if( pWin->pFilter ){",
          "314:     sqlite3TreeViewItem(pView, \"FILTER\", 1);",
          "315:     sqlite3TreeViewExpr(pView, pWin->pFilter, 0);",
          "316:     sqlite3TreeViewPop(pView);",
          "317:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:     sqlite3TreeViewExprList(pView, pWin->pOrderBy, (--nElement)>0, \"ORDER-BY\");",
          "339:   }",
          "340:   if( pWin->eFrmType ){",
          "341:     const char *zFrmType = \"ROWS\";",
          "342:     if( pWin->eFrmType==TK_RANGE ) zFrmType = \"RANGE\";",
          "343:     if( pWin->eFrmType==TK_GROUPS ) zFrmType = \"GROUPS\";",
          "345:     sqlite3TreeViewBound(pView, pWin->eStart, pWin->pStart, 1);",
          "346:     sqlite3TreeViewBound(pView, pWin->eEnd, pWin->pEnd, 0);",
          "347:     sqlite3TreeViewPop(pView);",
          "",
          "[Removed Lines]",
          "344:     sqlite3TreeViewItem(pView, zFrmType, (--nElement)>0);",
          "",
          "[Added Lines]",
          "340:     char zBuf[30];",
          "344:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%s%s\",zFrmType,",
          "345:         pWin->bImplicitFrame ? \" (implied)\" : \"\");",
          "346:     sqlite3TreeViewItem(pView, zBuf, (--nElement)>0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ddf7f42115eb93c489f966e035dec00af57aa39",
      "candidate_info": {
        "commit_hash": "4ddf7f42115eb93c489f966e035dec00af57aa39",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4ddf7f42115eb93c489f966e035dec00af57aa39",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test case loaded into test/fuzzdata8.db.\n\nFossilOrigin-Name: 00ae0c6c4815366bd2f36bc054b13bc7b568dd0a3caceddf0eba4db33f010ee4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d5250db6322103326f0d5782ba049996d9ce8784f9e53a3112fb6f09f888f1c3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}