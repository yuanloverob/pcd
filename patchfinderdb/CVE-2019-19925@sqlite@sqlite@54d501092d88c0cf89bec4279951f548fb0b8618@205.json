{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c81cada052ef8207d32abde930b1460a0ae320f",
      "candidate_info": {
        "commit_hash": "4c81cada052ef8207d32abde930b1460a0ae320f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c81cada052ef8207d32abde930b1460a0ae320f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix a typo in the documentation for sqlite3_value_frombind().  Also add a new hyperlink to that same documentation.  No code changes.\n\nFossilOrigin-Name: bf3cd9364fdfc951feb04f78728eb8e0dae12b3dc5702a36bb6e69c0abab8864",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 02ebc60b9bbc1736f4989eb56f8d31ca97fe90c930841d10986c618381ceb8b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "6d2566dfc2d38beb03665867df144aae5cc9eba1",
      "candidate_info": {
        "commit_hash": "6d2566dfc2d38beb03665867df144aae5cc9eba1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6d2566dfc2d38beb03665867df144aae5cc9eba1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/tkt-3a77c9714e.test"
        ],
        "message": "Always clear the temporary register cache after coding a subroutine.\n\nFossilOrigin-Name: b6f2a7f9cdb547c925f08306df82519e41a7a0dd2cabd9861a48917bb6eef845",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/tkt-3a77c9714e.test||test/tkt-3a77c9714e.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40e29a47d1266c16a4992e43579a51addcc632503099c4cd128f77dd4e67da3c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2868:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2869:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2870:   }",
          "2871: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2870:     sqlite3ClearTempRegCache(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2978:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2979:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2980:   }",
          "2982:   return rReg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2981:     sqlite3ClearTempRegCache(pParse);",
          "",
          "---------------"
        ],
        "test/tkt-3a77c9714e.test||test/tkt-3a77c9714e.test": [
          "File: test/tkt-3a77c9714e.test -> test/tkt-3a77c9714e.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2011 December 06",
          "",
          "[Added Lines]",
          "1: # 2011-12-06",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     )",
          "69: } {FACTORING FACTOR SWIMMING SWIMM}",
          "72: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: # Similar problem discovered by dbsqlfuzz on 2019-09-18",
          "72: #",
          "73: do_execsql_test 3.0 {",
          "74:   DROP TABLE IF EXISTS t1;",
          "75:   CREATE TABLE t1(i INT PRIMARY KEY, a, b);",
          "76:   INSERT INTO t1 VALUES(NULL,'one','i');",
          "77:   CREATE INDEX i1a ON t1(a);",
          "78:   CREATE INDEX i1b ON t1(b);",
          "79:   SELECT (SELECT 1",
          "80:             FROM (SELECT 1 FROM t1 WHERE a=1 OR b='i')",
          "81:            WHERE a='o'",
          "82:               OR b IN (SELECT a=('b' IN (SELECT 'a'))))",
          "83:     FROM t1;",
          "84: } {{}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ced89124d866cd865a8546291f6588f74be2ec36",
      "candidate_info": {
        "commit_hash": "ced89124d866cd865a8546291f6588f74be2ec36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ced89124d866cd865a8546291f6588f74be2ec36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/window1.test"
        ],
        "message": "Ensure that all the new window-function keywords can still be used as SQL identifiers.\n\nFossilOrigin-Name: a6d61dfd4780eccfce5f7a5ead6c04e3b78bc4a461551fd7dd602550e0d51084",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fbddf01b1c3fff95b05e2f2f709754e2b514296060b4846518791e7161d9ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "218: %endif SQLITE_OMIT_COMPOUND_SELECT",
          "219: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "220:   CURRENT FOLLOWING PARTITION PRECEDING RANGE UNBOUNDED",
          "221: %endif SQLITE_OMIT_WINDOWFUNC",
          "222:   REINDEX RENAME CTIME_KW IF",
          "223:   .",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "924:   ) FROM t1 ORDER BY a ASC;",
          "925: } {{} 200 {} 200 1 3 2 6 3 10 4 14 5 12 a 6 b 7 c 8 d 9 e 10}",
          "927: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927: #-------------------------------------------------------------------------",
          "928: do_execsql_test 21.0 {",
          "929:   CREATE TABLE keyword_tab(",
          "930:     current, exclude, filter, following, groups, no, others, over,",
          "931:     partition, preceding, range, ties, unbounded, window",
          "932:   );",
          "933: }",
          "934: do_execsql_test 21.1 {",
          "935:   SELECT",
          "936:     current, exclude, filter, following, groups, no, others, over,",
          "937:     partition, preceding, range, ties, unbounded, window",
          "938:   FROM keyword_tab",
          "939: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db7d895e9d145be140b8290f930a3be521861a0a",
      "candidate_info": {
        "commit_hash": "db7d895e9d145be140b8290f930a3be521861a0a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db7d895e9d145be140b8290f930a3be521861a0a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/btree.c",
          "src/whereexpr.c",
          "test/corruptL.test",
          "test/fuzzdata8.db",
          "test/memdb1.test",
          "test/window1.test"
        ],
        "message": "Merge latest trunk changes into this branch.\n\nFossilOrigin-Name: 0b904517bd6c4c59082381577246d3d2351b4265fc9151438ee4c33cf16f2eb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/btree.c||src/btree.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/corruptL.test||test/corruptL.test",
          "test/memdb1.test||test/memdb1.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 180be266238e18c01f8bd52c75dd9aa3e26e553620258141cd95189a0ae59ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     sqlite3BtreeEnterAll(db);",
          "235:     db->init.iDb = 0;",
          "236:     db->mDbFlags &= ~(DBFLAG_SchemaKnownOk);",
          "238:     sqlite3BtreeLeaveAll(db);",
          "239:     assert( zErrDyn==0 || rc!=SQLITE_OK );",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:     rc = sqlite3Init(db, &zErrDyn);",
          "",
          "[Added Lines]",
          "237:     if( !REOPEN_AS_MEMDB(db) ){",
          "238:       rc = sqlite3Init(db, &zErrDyn);",
          "239:     }",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1573:     }",
          "1574:     iAddr = pc;",
          "1575:     pc = get2byte(&aData[pc]);",
          "1577:       if( pc ){",
          "",
          "[Removed Lines]",
          "1576:     if( pc<iAddr+size ){",
          "",
          "[Added Lines]",
          "1576:     if( pc<=iAddr+size ){",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:   }else if( p->x.pList ){",
          "1521:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->x.pList);",
          "1522:   }",
          "1523:   return mask;",
          "1524: }",
          "1525: Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1523: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1524:   if( p->op==TK_FUNCTION && p->y.pWin ){",
          "1525:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pPartition);",
          "1526:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pOrderBy);",
          "1527:   }",
          "1528: #endif",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: do_catchsql_test 1.1 {",
          "124:   PRAGMA cell_size_check = off;",
          "125:   DROP INDEX t1x1;",
          "128: do_catchsql_test 1.2 {",
          "129:   SELECT sum(s+length(b)) FROM t1 WHERE a IN (110,10,150) AND q IS NULL;",
          "132: do_catchsql_test 1.3 {",
          "133:   REINDEX t1;",
          "136: #-------------------------------------------------------------------------",
          "137: reset_db",
          "",
          "[Removed Lines]",
          "126: } {1 {no such index: t1x1}}",
          "130: } {1 {no such table: t1}}",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "",
          "[Added Lines]",
          "126: } {1 {database disk image is malformed}}",
          "130: } {1 {database disk image is malformed}}",
          "134: } {1 {database disk image is malformed}}",
          "136: do_catchsql_test 1.4 {",
          "137:   PRAGMA integrity_check",
          "138: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:   lappend rc $msg",
          "186: } {1 {wrong # args: should be \"db serialize ?DATABASE?\"}}",
          "188: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #-------------------------------------------------------------------------",
          "189: reset_db",
          "190: do_execsql_test 700 {",
          "191:   CREATE TABLE t1(a, b);",
          "192:   PRAGMA schema_version = 0;",
          "193: }",
          "194: do_test 710 {",
          "195:   set ser [db serialize main]",
          "196:   db close",
          "197:   sqlite3 db",
          "198:   db deserialize main $ser",
          "199:   catchsql {",
          "200:     CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "201:   }",
          "202: } {1 {table t1 already exists}}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "723: #-------------------------------------------------------------------------",
          "724: # Test error cases from chaining window definitions.",
          "725: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723: #-------------------------------------------------------------------------",
          "724: #",
          "725: reset_db",
          "726: do_execsql_test 18.0 {",
          "727:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "728:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "729:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "731:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "732:   INSERT INTO t2 VALUES      (3), (5);",
          "733:   INSERT INTO t3 VALUES(10), (11), (12);",
          "734: }",
          "736: do_execsql_test 18.1 {",
          "737:   SELECT t1.* FROM t1, t2 WHERE",
          "738:     t1_id=t2_id AND t1_id IN (",
          "739:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "740:     )",
          "741: }",
          "743: do_execsql_test 18.2 {",
          "744:   SELECT t1.* FROM t1, t2 WHERE",
          "745:     t1_id=t2_id AND t1_id IN (",
          "746:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "747:     )",
          "748: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94809086e50e86bfd34f134eb3385676359f8b3c",
      "candidate_info": {
        "commit_hash": "94809086e50e86bfd34f134eb3385676359f8b3c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94809086e50e86bfd34f134eb3385676359f8b3c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Use a separate bit on db->dbOptFlags to disable the xInverse optimization on window functions, rather than reusing the query-flattener disable bit.\n\nFossilOrigin-Name: bc0fb1c324be2fd668bc4398c7d364b7e3c5a98537fe5fb58a125b66f3e6d041",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10aedce3dd2c0c9f0ee9e0aefd0b4d2c2eb17c4ca72003c4db9768ea5cdafcf4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1092:   pWin->eFrmType = eType;",
          "1093:   pWin->eStart = eStart;",
          "1094:   pWin->eEnd = eEnd;",
          "1096:     eExclude = TK_NO;",
          "1097:   }",
          "1098:   pWin->eExclude = eExclude;",
          "",
          "[Removed Lines]",
          "1095:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_QueryFlattener) ){",
          "",
          "[Added Lines]",
          "1095:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_WindowFunc) ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}