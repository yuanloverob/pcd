{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3735bf466b8220d126ae7be4b4fc3482a997fdd",
      "candidate_info": {
        "commit_hash": "e3735bf466b8220d126ae7be4b4fc3482a997fdd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3735bf466b8220d126ae7be4b4fc3482a997fdd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Fix a problem involving window function aliases being referenced from sub-selects.\n\nFossilOrigin-Name: e3b5fc05c00fc58be7a7c94ce1d97a5b05113f39aba03df64aab08364f85616b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4e6fbb1a5100fe29209bcf668fbecf3a733034b84925265d8a15b0a84baf6cf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:             sqlite3ErrorMsg(pParse, \"misuse of aliased aggregate %s\", zAs);",
          "460:             return WRC_Abort;",
          "461:           }",
          "463:             sqlite3ErrorMsg(pParse, \"misuse of aliased window function %s\",zAs);",
          "464:             return WRC_Abort;",
          "465:           }",
          "",
          "[Removed Lines]",
          "462:           if( (pNC->ncFlags&NC_AllowWin)==0 && ExprHasProperty(pOrig, EP_Win) ){",
          "",
          "[Added Lines]",
          "462:           if( ExprHasProperty(pOrig, EP_Win)",
          "463:            && ((pNC->ncFlags&NC_AllowWin)==0 || pNC!=pTopNC )",
          "464:           ){",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444:   SELECT sum(b), sum( sum(b) ) OVER (ORDER BY a) FROM t2;",
          "1445: } {21 21}",
          "1447: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1447: #-------------------------------------------------------------------------",
          "1448: reset_db",
          "1449: do_execsql_test 43.1.1 {",
          "1450:   CREATE TABLE t1(x INTEGER PRIMARY KEY);",
          "1451:   INSERT INTO t1 VALUES (10);",
          "1452: }",
          "1453: do_catchsql_test 43.1.2 {",
          "1454:   SELECT count() OVER() AS m FROM t1 ORDER BY (SELECT m);",
          "1455: } {1 {misuse of aliased window function m}}",
          "1457: reset_db",
          "1458: do_execsql_test 43.2.1 {",
          "1459:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "1460:   INSERT INTO t1(a, b) VALUES(1,  10); -- 10",
          "1461:   INSERT INTO t1(a, b) VALUES(2,  15); -- 25",
          "1462:   INSERT INTO t1(a, b) VALUES(3,  -5); -- 20",
          "1463:   INSERT INTO t1(a, b) VALUES(4,  -5); -- 15",
          "1464:   INSERT INTO t1(a, b) VALUES(5,  20); -- 35",
          "1465:   INSERT INTO t1(a, b) VALUES(6, -11); -- 24",
          "1466: }",
          "1468: do_execsql_test 43.2.2 {",
          "1469:   SELECT a, sum(b) OVER (ORDER BY a) AS abc FROM t1 ORDER BY 2",
          "1470: } {",
          "1471:   1 10   4 15   3 20   6 24   2 25   5 35",
          "1472: }",
          "1474: do_execsql_test 43.2.3 {",
          "1475:   SELECT a, sum(b) OVER (ORDER BY a) AS abc FROM t1 ORDER BY abc",
          "1476: } {",
          "1477:   1 10   4 15   3 20   6 24   2 25   5 35",
          "1478: }",
          "1480: do_execsql_test 43.2.4 {",
          "1481:   SELECT a, sum(b) OVER (ORDER BY a) AS abc FROM t1 ORDER BY abc+5",
          "1482: } {",
          "1483:   1 10   4 15   3 20   6 24   2 25   5 35",
          "1484: }",
          "1486: do_catchsql_test 43.2.5 {",
          "1487:   SELECT a, sum(b) OVER (ORDER BY a) AS abc FROM t1 ORDER BY (SELECT abc)",
          "1488: } {1 {misuse of aliased window function abc}}",
          "1490: do_catchsql_test 43.2.6 {",
          "1491:   SELECT a, 1+sum(b) OVER (ORDER BY a) AS abc FROM t1 ORDER BY (SELECT abc)",
          "1492: } {1 {misuse of aliased window function abc}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7648f02e02aa989ffb91227b8bb4466a76304bc",
      "candidate_info": {
        "commit_hash": "a7648f02e02aa989ffb91227b8bb4466a76304bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7648f02e02aa989ffb91227b8bb4466a76304bc",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzcheck.c"
        ],
        "message": "Enhancements to fuzzcheck on unix so that it captures signals and prints the current test file and test number prior to terminating.\n\nFossilOrigin-Name: ae7cbb246bff3717c283869ccf27ce83611422f3801176819465a8d96f6481bf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 519864da8bb671941a64bf333c2086ad9a068b5f85759e7abd368f0706d3aefd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: static void fatalError(const char *zFormat, ...){",
          "150:   va_list ap;",
          "156:   va_start(ap, zFormat);",
          "157:   vfprintf(stderr, zFormat, ap);",
          "158:   va_end(ap);",
          "",
          "[Removed Lines]",
          "151:   if( g.zTestName[0] ){",
          "152:     fprintf(stderr, \"%s (%s): \", g.zArgv0, g.zTestName);",
          "153:   }else{",
          "154:     fprintf(stderr, \"%s: \", g.zArgv0);",
          "155:   }",
          "",
          "[Added Lines]",
          "152:   fprintf(stderr, \"%s\", g.zArgv0);",
          "153:   if( g.zDbFile ) fprintf(stderr, \" %s\", g.zDbFile);",
          "154:   if( g.zTestName[0] ) fprintf(stderr, \" (%s)\", g.zTestName);",
          "155:   fprintf(stderr, \": \");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161: }",
          "166: #ifdef __unix__",
          "170: }",
          "171: #endif",
          "",
          "[Removed Lines]",
          "167: static void timeoutHandler(int NotUsed){",
          "168:   (void)NotUsed;",
          "169:   fatalError(\"timeout\\n\");",
          "",
          "[Added Lines]",
          "167: static void signalHandler(int signum){",
          "168:   const char *zSig;",
          "169:   if( signum==SIGABRT ){",
          "170:     zSig = \"abort\";",
          "171:   }else if( signum==SIGALRM ){",
          "172:     zSig = \"timeout\";",
          "173:   }else if( signum==SIGSEGV ){",
          "174:     zSig = \"segfault\";",
          "175:   }else{",
          "176:     zSig = \"signal\";",
          "177:   }",
          "178:   fatalError(zSig);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1360:   sqlite3_initialize();",
          "1361:   iBegin = timeOfDay();",
          "1362: #ifdef __unix__",
          "1364: #endif",
          "1365:   g.zArgv0 = argv[0];",
          "1366:   openFlags4Data = SQLITE_OPEN_READONLY;",
          "",
          "[Removed Lines]",
          "1363:   signal(SIGALRM, timeoutHandler);",
          "",
          "[Added Lines]",
          "1372:   signal(SIGALRM, signalHandler);",
          "1373:   signal(SIGSEGV, signalHandler);",
          "1374:   signal(SIGABRT, signalHandler);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1508:   for(iSrcDb=0; iSrcDb<nSrcDb; iSrcDb++){",
          "1509:     rc = sqlite3_open_v2(azSrcDb[iSrcDb], &db,",
          "1510:                          openFlags4Data, pDfltVfs->zName);",
          "1511:     if( rc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1520:     g.zDbFile = azSrcDb[iSrcDb];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95866af326ad06f6162fc7448100e0162ea2e2e6",
      "candidate_info": {
        "commit_hash": "95866af326ad06f6162fc7448100e0162ea2e2e6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95866af326ad06f6162fc7448100e0162ea2e2e6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Abort the OP_Savepoint opcode early if a virtual table xSync method fails, perhaps due to an interrupt.\n\nFossilOrigin-Name: 672e749aef7351de3c69b365c1f80c756fda4e261b5d2ac1faa01d3a7d5a4c49",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a89b38605661e36d192df1d074383b704b34a959fcbc169837c0d4f6848f3208",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3293:           db->mDbFlags |= DBFLAG_SchemaChange;",
          "3294:         }",
          "3295:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3296:       if( rc ) goto abort_due_to_error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0225d819c4ca87cd29cd6f58d50c75bcee6213bc",
      "candidate_info": {
        "commit_hash": "0225d819c4ca87cd29cd6f58d50c75bcee6213bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0225d819c4ca87cd29cd6f58d50c75bcee6213bc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/malloc.c",
          "src/sqliteInt.h"
        ],
        "message": "Change the size of a mini-lookaside allocation to a macro (MINI_SZ) rather than a magic number (128).\n\nFossilOrigin-Name: 5e1949bca998f3c8c23a8ebf01c7a2e7a2af1fdad43886271e1fe0f25411551d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/malloc.c||src/malloc.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6cb053f99b5be2ecc30e0733d8f1e4f2a89f642656d3883fc0c867b10a87ba6b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   db->lookaside.pMiniFree = 0;",
          "726: #endif",
          "727:   db->lookaside.sz = (u16)sz;",
          "728:   db->lookaside.szTrue = (u16)sz;",
          "",
          "[Removed Lines]",
          "725:   cnt = szAlloc/(3*128+sz);",
          "",
          "[Added Lines]",
          "725:   cnt = szAlloc/(3*MINI_SZ+sz);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "740: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "741:     db->lookaside.pMiddle = p;",
          "744:       p->pNext = db->lookaside.pMiniInit;",
          "745:       db->lookaside.pMiniInit = p;",
          "746:       db->lookaside.nSlot++;",
          "748:     }",
          "749: #endif",
          "750:     db->lookaside.pEnd = p;",
          "",
          "[Removed Lines]",
          "743:     while(p<=(LookasideSlot*)&((u8*)pStart)[szAlloc-128]){",
          "747:       p = (LookasideSlot*)&((u8*)p)[128];",
          "",
          "[Added Lines]",
          "743:     while(p<=(LookasideSlot*)&((u8*)pStart)[szAlloc-MINI_SZ]){",
          "747:       p = (LookasideSlot*)&((u8*)p)[MINI_SZ];",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334: }",
          "335: static int lookasideMallocSize(sqlite3 *db, void *p){",
          "336: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "338: #else",
          "339:   return db->lookaside.szTrue;",
          "340: #endif",
          "",
          "[Removed Lines]",
          "337:   return p<db->lookaside.pMiddle ? db->lookaside.szTrue : 128;",
          "",
          "[Added Lines]",
          "337:   return p<db->lookaside.pMiddle ? db->lookaside.szTrue : MINI_SZ;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408:       if( p>=db->lookaside.pMiddle ){",
          "409: # ifdef SQLITE_DEBUG",
          "412: # endif",
          "413:         pBuf->pNext = db->lookaside.pMiniFree;",
          "414:         db->lookaside.pMiniFree = pBuf;",
          "",
          "[Removed Lines]",
          "411:         memset(p, 0xaa, 128);",
          "",
          "[Added Lines]",
          "411:         memset(p, 0xaa, MINI_SZ);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "583:     }",
          "584:     db->lookaside.anStat[1]++;",
          "585: # ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "587:     if( (pBuf = db->lookaside.pMiniFree)!=0 ){",
          "588:       db->lookaside.pMiniFree = pBuf->pNext;",
          "589:       db->lookaside.anStat[0]++;",
          "",
          "[Removed Lines]",
          "586:   }else if( n<=128 ){",
          "",
          "[Added Lines]",
          "586:   }else if( n<=MINI_SZ ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1303: #define EnableLookaside   db->lookaside.bDisable--;\\",
          "1304:    db->lookaside.sz=db->lookaside.bDisable?0:db->lookaside.szTrue",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1307: #define MINI_SZ           128",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56e38185fe26dbaeba7545bf94c5a25150e16907",
      "candidate_info": {
        "commit_hash": "56e38185fe26dbaeba7545bf94c5a25150e16907",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56e38185fe26dbaeba7545bf94c5a25150e16907",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt2.test",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a buffer overread in fts3 that could occur when decoding a corrupted record.\n\nFossilOrigin-Name: 9a4a40c45feb2bb89020dc7711b4753479112ceae7ce2a44521d72afeddfac83",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt2.test||test/fts3corrupt2.test",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2268:       fts3GetDeltaVarint(&p1, &i1);",
          "2269:       fts3GetDeltaVarint(&p2, &i2);",
          "2270:       do {",
          "2271:         fts3PutDeltaVarint(&p, &iPrev, (i1<i2) ? i1 : i2);",
          "2272:         iPrev -= 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2270:       if( i1<2 || i2<2 ){",
          "2271:         break;",
          "2272:       }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 44e573ecd5c2b60107133d60c51f3a04a3f904e9c1cf926e9b8ea977c7acae8d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt2.test||test/fts3corrupt2.test": [
          "File: test/fts3corrupt2.test -> test/fts3corrupt2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: ifcapable !fts3 { finish_test ; return }",
          "18: set ::testprefix fts3corrupt2",
          "20: set data [list]",
          "21: lappend data {*}{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: sqlite3_fts3_may_be_corrupt 1",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5850: #-------------------------------------------------------------------------",
          "5851: #",
          "5854: reset_db",
          "5855: do_test 38.0 {",
          "5856:   sqlite3 db {}",
          "",
          "[Removed Lines]",
          "5852: reset_db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6061:   UPDATE t1 SET b=a;",
          "6062: }",
          "6065:   SELECT b FROM t1 WHERE a MATCH 'e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*e*'",
          "6066: } {1 {database disk image is malformed}}",
          "6069: finish_test",
          "",
          "[Removed Lines]",
          "6064: do_catchsql_test 38.1 {",
          "",
          "[Added Lines]",
          "6062: do_catchsql_test 38.2 {",
          "6066: #-------------------------------------------------------------------------",
          "6067: reset_db",
          "6068: set saved $sqlite_fts3_enable_parentheses",
          "6069: set sqlite_fts3_enable_parentheses 1",
          "6070: do_execsql_test 39.0 {",
          "6071:   CREATE VIRTUAL TABLE t0 USING fts3(",
          "6072:     col0 INTEGER PRIMARY KEY,",
          "6073:     col1 VARCHAR(8),",
          "6074:     col2 BINARY,",
          "6075:     col3 BINARY",
          "6076:   );",
          "6077:   INSERT INTO t0_content VALUES(1,1,'1234','aaaa','bbbb');",
          "6078:   INSERT INTO t0_segdir VALUES(0,0,0,0,'0 42',X'000131030782000103323334050101010200000461616161050101020200000462626262050101030200');",
          "6079: }",
          "6081: do_test 39.1 {",
          "6082:   catch {",
          "6083:     db eval { SELECT rowid FROM t0 WHERE t0 MATCH '1 NEAR 1' }",
          "6084:   }",
          "6085: } 0",
          "6087: do_test 39.2 {",
          "6088:   catch {",
          "6089:     db eval {",
          "6090:   SELECT matchinfo(t0,'yxy') FROM t0 WHERE t0 MATCH x'2b0a312b0a312a312a2a0b5d0a0b0b0a312a0a0b0b0a312a0b310a392a0b0a27312a2a0b5d0a312a0b310a31315d0b310a312a316d2a0b313b15bceaa50a312a0b0a27312a2a0b5d0a312a0b310a312b0b2a310a312a0b2a0b2a0b2e5d0a0bff313336e34a2a312a0b0a3c310b0a0b4b4b0b4b2a4bec40322b2a0b310a0a312a0a0a0a0a0a0a0a0a0b310a312a2a2a0b5d0a0b0b0a312a0b310a312a0b0a4e4541530b310a5df5ced70a0a0a0a0a4f520a0a0a0a0a0a0a312a0b0a4e4541520b310a5d616161610a0a0a0a4f520a0a0a0a0a0a312b0a312a312a0a0a0a0a0a0a004a0b0a310b220a0b0a310a4a22310a0b0a7e6fe0e0e030e0e0e0e0e01176e02000e0e0e0e0e01131320226310a0b0a310a4a22310a0b0a310a766f8b8b4ee0e0300ae0090909090909090909090909090909090909090909090909090909090909090947aaaa540b09090909090909090909090909090909090909090909090909090909090909fae0e0f2f22164e0e0f273e07fefefef7d6dfafafafa6d6d6d6d';",
          "6091:     }",
          "6092:   }",
          "6093: } 0",
          "6096: set sqlite_fts3_enable_parentheses $saved",
          "",
          "---------------"
        ]
      }
    }
  ]
}