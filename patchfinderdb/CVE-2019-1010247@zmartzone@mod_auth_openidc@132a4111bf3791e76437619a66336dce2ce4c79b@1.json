{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9afaef026749941dbad64e4b17aee88a6d4002e0",
      "candidate_info": {
        "commit_hash": "9afaef026749941dbad64e4b17aee88a6d4002e0",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/9afaef026749941dbad64e4b17aee88a6d4002e0",
        "files": [
          "configure.ac"
        ],
        "message": "actually bump to 2.3.4rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.4rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32321024ed5bdbc02ba8b5d61aabc4a4c3745c89",
      "candidate_info": {
        "commit_hash": "32321024ed5bdbc02ba8b5d61aabc4a4c3745c89",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/32321024ed5bdbc02ba8b5d61aabc4a4c3745c89",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/metadata.c"
        ],
        "message": "fix parsing of OIDCOAuthServerMetadataURL; thanks Lance Fannin\n\nbump to 2.4.0rc5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/metadata.c||src/metadata.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/metadata.c||src/metadata.c": [
          "File: src/metadata.c -> src/metadata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:  oidc_json_object_get_string(r->pool, j_provider, OIDC_METADATA_ISSUER,",
          "1059:    &issuer, NULL);",
          "1089:  }",
          "1091:  return TRUE;",
          "",
          "[Removed Lines]",
          "1061:  if (c->oauth.introspection_endpoint_url == NULL) {",
          "1063:   oidc_metadata_parse_url(r, OIDC_METADATA_SUFFIX_PROVIDER, issuer,",
          "1064:     j_provider,",
          "1065:     OIDC_METADATA_INTROSPECTION_ENDPOINT,",
          "1066:     &c->oauth.introspection_endpoint_url,",
          "1067:     NULL);",
          "1068:  }",
          "1070:  if (c->oauth.verify_jwks_uri == NULL) {",
          "1072:   oidc_metadata_parse_url(r, OIDC_METADATA_SUFFIX_PROVIDER, issuer,",
          "1073:     j_provider,",
          "1074:     OIDC_METADATA_JWKS_URI, &c->oauth.verify_jwks_uri,",
          "1075:     NULL);",
          "1076:  }",
          "1078:  if (c->oauth.introspection_endpoint_auth == NULL) {",
          "1079:   if (oidc_valid_string_in_array(r->pool, j_provider,",
          "1080:     OIDC_METADATA_INTROSPECTON_ENDPOINT_AUTH_METHODS_SUPPORTED,",
          "1081:     oidc_cfg_get_valid_endpoint_auth_function(c),",
          "1082:     &c->oauth.introspection_endpoint_auth,",
          "1083:     TRUE) != NULL) {",
          "1084:    oidc_error(r,",
          "1085:      \"could not find a supported token endpoint authentication method in provider metadata (%s) for entry \\\"\" OIDC_METADATA_INTROSPECTON_ENDPOINT_AUTH_METHODS_SUPPORTED \"\\\"\",",
          "1086:      issuer);",
          "1087:    return FALSE;",
          "1088:   }",
          "",
          "[Added Lines]",
          "1062:  oidc_metadata_parse_url(r, OIDC_METADATA_SUFFIX_PROVIDER, issuer,",
          "1063:    j_provider,",
          "1064:    OIDC_METADATA_INTROSPECTION_ENDPOINT,",
          "1065:    &c->oauth.introspection_endpoint_url,",
          "1066:    NULL);",
          "1069:  oidc_metadata_parse_url(r, OIDC_METADATA_SUFFIX_PROVIDER, issuer,",
          "1070:    j_provider,",
          "1071:    OIDC_METADATA_JWKS_URI, &c->oauth.verify_jwks_uri,",
          "1072:    NULL);",
          "1074:  if (oidc_valid_string_in_array(r->pool, j_provider,",
          "1075:    OIDC_METADATA_INTROSPECTON_ENDPOINT_AUTH_METHODS_SUPPORTED,",
          "1076:    oidc_cfg_get_valid_endpoint_auth_function(c),",
          "1077:    &c->oauth.introspection_endpoint_auth,",
          "1078:    TRUE) != NULL) {",
          "1079:   oidc_error(r,",
          "1080:     \"could not find a supported token endpoint authentication method in provider metadata (%s) for entry \\\"\" OIDC_METADATA_INTROSPECTON_ENDPOINT_AUTH_METHODS_SUPPORTED \"\\\"\",",
          "1081:     issuer);",
          "1082:   return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9977f7565a934f0530ecca56d47bc539f1354bfb",
      "candidate_info": {
        "commit_hash": "9977f7565a934f0530ecca56d47bc539f1354bfb",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/9977f7565a934f0530ecca56d47bc539f1354bfb",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/authz.c",
          "src/mod_auth_openidc.h",
          "test/stub.c",
          "test/test.c"
        ],
        "message": "support nested arrays in Require claim authorization evaluation\n\n- see #392; thanks @hpbieker\n- bump to 2.3.9rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/authz.c||src/authz.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "test/stub.c||test/stub.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/authz.c||src/authz.c": [
          "File: src/authz.c -> src/authz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:  const char *key;",
          "192:  json_t *val;",
          "",
          "[Removed Lines]",
          "188: apr_byte_t oidc_authz_match_claim(request_rec *r,",
          "189:   const char * const attr_spec, const json_t * const claims) {",
          "",
          "[Added Lines]",
          "188: apr_byte_t oidc_authz_match_claim(request_rec *r, const char * const attr_spec,",
          "189:   const json_t * const claims) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:    spec_c++;",
          "242:     return FALSE;",
          "243:    }",
          "248:   }",
          "250:   iter = json_object_iter_next((json_t *) claims, iter);",
          "",
          "[Removed Lines]",
          "240:    if (!json_is_object(val)) {",
          "241:     oidc_warn(r, \"\\\"%s\\\" matched, and child nodes should be evaluated, but value is not an object.\", key);",
          "245:    oidc_debug(r, \"Attribute chunk matched. Evaluating children of key: \\\"%s\\\".\", key);",
          "247:    return oidc_authz_match_claim(r, spec_c, json_object_get(claims, key));",
          "",
          "[Added Lines]",
          "240:    if (json_is_object(val)) {",
          "241:     oidc_debug(r,",
          "242:       \"attribute chunk matched, evaluating children of key: \\\"%s\\\".\",",
          "243:       key);",
          "244:     return oidc_authz_match_claim(r, spec_c,",
          "245:       json_object_get(claims, key));",
          "246:    } else if (json_is_array(val)) {",
          "247:     oidc_debug(r,",
          "248:       \"attribute chunk matched, evaluating array values of key: \\\"%s\\\".\",",
          "249:       key);",
          "250:     return oidc_authz_match_value(r, spec_c,",
          "251:       json_object_get(claims, key), key);",
          "252:    } else {",
          "253:     oidc_warn(r,",
          "254:       \"\\\"%s\\\" matched, and child nodes or array values should be evaluated, but value is not an object or array.\",",
          "255:       key);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #include <http_core.h>",
          "3: #include <http_config.h>",
          "4: #include <apr_global_mutex.h>",
          "5: #include <http_log.h>",
          "7: #define ap_HOOK_check_user_id_t void",
          "9: AP_DECLARE(void) ap_hook_check_authn(ap_HOOK_check_user_id_t *pf,",
          "13: }",
          "15: AP_DECLARE(apr_status_t) ap_register_auth_provider(apr_pool_t *pool,",
          "22: }",
          "25:  return 0;",
          "26: }",
          "",
          "[Removed Lines]",
          "10:                                      const char * const *aszPre,",
          "11:                                      const char * const *aszSucc,",
          "12:                                      int nOrder, int type) {",
          "16:                                                    const char *provider_group,",
          "17:                                                    const char *provider_name,",
          "18:                                                    const char *provider_version,",
          "19:                                                    const void *provider,",
          "20:                                                    int type) {",
          "21:        return 0;",
          "24: AP_DECLARE(apr_status_t) ap_unixd_set_global_mutex_perms(apr_global_mutex_t *gmutex) {",
          "",
          "[Added Lines]",
          "5: #include <apr_lib.h>",
          "11:   const char * const *aszPre, const char * const *aszSucc, int nOrder,",
          "12:   int type) {",
          "16:   const char *provider_group, const char *provider_name,",
          "17:   const char *provider_version, const void *provider, int type) {",
          "18:  return 0;",
          "21: AP_DECLARE(apr_status_t) ap_unixd_set_global_mutex_perms(",
          "22:   apr_global_mutex_t *gmutex) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:  return \"\";",
          "43: }",
          "45: AP_DECLARE(char *) ap_getword_conf(apr_pool_t *p, const char **line) {",
          "47: }",
          "49: AP_DECLARE(char *) ap_getword_nulls(apr_pool_t *p, const char **line, char stop) {",
          "",
          "[Removed Lines]",
          "46:  return \"\";",
          "",
          "[Added Lines]",
          "43: static char *substring_conf(apr_pool_t *p, const char *start, int len,",
          "44:   char quote) {",
          "45:  char *result = apr_palloc(p, len + 1);",
          "46:  char *resp = result;",
          "47:  int i;",
          "49:  for (i = 0; i < len; ++i) {",
          "50:   if (start[i] == '\\\\'",
          "51:     && (start[i + 1] == '\\\\' || (quote && start[i + 1] == quote)))",
          "53:   else",
          "55:  }",
          "58: #if RESOLVE_ENV_PER_TOKEN",
          "59:  return (char *)ap_resolve_env(p,result);",
          "60: #else",
          "61:  return result;",
          "62: #endif",
          "63: }",
          "66:  const char *str = *line, *strend;",
          "67:  char *res;",
          "68:  char quote;",
          "70:  while (apr_isspace(*str))",
          "71:   ++str;",
          "73:  if (!*str) {",
          "75:   return \"\";",
          "76:  }",
          "78:  if ((quote = *str) == '\"' || quote == '\\'') {",
          "79:   strend = str + 1;",
          "80:   while (*strend && *strend != quote) {",
          "81:    if (*strend == '\\\\' && strend[1] &&",
          "82:      (strend[1] == quote || strend[1] == '\\\\')) {",
          "83:     strend += 2;",
          "84:    }",
          "85:    else {",
          "86:     ++strend;",
          "87:    }",
          "88:   }",
          "89:   res = substring_conf(p, str + 1, strend - str - 1, quote);",
          "91:   if (*strend == quote)",
          "92:    ++strend;",
          "93:  }",
          "94:  else {",
          "95:   strend = str;",
          "96:   while (*strend && !apr_isspace(*strend))",
          "97:    ++strend;",
          "99:   res = substring_conf(p, str, strend - str, 0);",
          "100:  }",
          "102:  while (apr_isspace(*strend))",
          "103:   ++strend;",
          "105:  return res;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:   const char * const *aszPre, const char * const *aszSucc, int nOrder) {",
          "78: }",
          "83: }",
          "85: AP_DECLARE(int) ap_is_initial_req(request_rec *r) {",
          "",
          "[Removed Lines]",
          "80: AP_DECLARE(void) ap_hook_handler(",
          "81:  int (*handler)(request_rec *r),",
          "82:  const char * const *aszPre, const char * const *aszSucc, int nOrder) {",
          "",
          "[Added Lines]",
          "139: AP_DECLARE(void) ap_hook_handler(int (*handler)(request_rec *r),",
          "140:   const char * const *aszPre, const char * const *aszSucc, int nOrder) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87: }",
          "89: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "92: #else",
          "95: #endif",
          "103:  }",
          "106: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "109: #else",
          "112: #endif",
          "",
          "[Removed Lines]",
          "90: AP_DECLARE(void) ap_log_error_(const char *file, int line, int module_index, int level,",
          "91:   apr_status_t status, const server_rec *s, const char *fmt, ...) {",
          "93: AP_DECLARE(void) ap_log_error(const char *file, int line, int level,",
          "94:   apr_status_t status, const server_rec *s, const char *fmt, ...) {",
          "96:  if (level < APLOG_DEBUG) {",
          "97:   fprintf(stderr, \"%s:%d [%d] [%d] \", file, line, level, status);",
          "98:   va_list ap;",
          "99:   va_start(ap, fmt);",
          "100:   vfprintf(stderr, fmt, ap);",
          "101:   va_end(ap);",
          "102:   fprintf(stderr, \"\\n\");",
          "104: }",
          "107: AP_DECLARE(void) ap_log_rerror_(const char *file, int line, int module_index, int level,",
          "108:   apr_status_t status, const request_rec *r, const char *fmt, ...) {",
          "110: AP_DECLARE(void) ap_log_rerror(const char *file, int line, int level,",
          "111:   apr_status_t status, const request_rec *r, const char *fmt, ...) {",
          "113:  if (level < APLOG_DEBUG) {",
          "114:   fprintf(stderr, \"%s:%d [%d] [%d] \", file, line, level, status);",
          "115:   va_list ap;",
          "116:   va_start(ap, fmt);",
          "117:   vfprintf(stderr, fmt, ap);",
          "118:   va_end(ap);",
          "119:   fprintf(stderr, \"\\n\");",
          "120:  }",
          "121: }",
          "123: AP_DECLARE(void) ap_note_auth_failure(request_rec *r) {",
          "124: }",
          "126: AP_DECLARE(apr_status_t) ap_pass_brigade(ap_filter_t *filter,",
          "127:   apr_bucket_brigade *bucket) {",
          "128:  return APR_SUCCESS;",
          "129: }",
          "131: AP_DECLARE(const apr_array_header_t *) ap_requires(request_rec *r) {",
          "132:  return NULL;",
          "133: }",
          "135: const char *ap_run_http_scheme(const request_rec *r) {",
          "136:  char *rv;",
          "137:  apr_pool_userdata_get((void **) &rv, \"scheme\", r->pool);",
          "138:  return (const char *) rv;",
          "139: }",
          "141: AP_DECLARE(void) ap_set_content_type(request_rec *r, const char *ct) {",
          "142: }",
          "144: AP_DECLARE_NONSTD(const char *) ap_set_flag_slot(cmd_parms *cmd,",
          "145:   void *struct_ptr,",
          "146:   int arg) {",
          "147:  return \"\";",
          "148: }",
          "150: AP_DECLARE_NONSTD(const char *) ap_set_string_slot(cmd_parms *cmd,",
          "151:   void *struct_ptr,",
          "152:   const char *arg) {",
          "154:  return \"\";",
          "155: }",
          "157: AP_DECLARE_NONSTD(const char *) ap_set_int_slot(cmd_parms *cmd,",
          "158:   void *struct_ptr,",
          "159:   const char *arg) {",
          "160:  return \"\";",
          "161: }",
          "163: AP_DECLARE(int) ap_setup_client_block(request_rec *r, int read_policy) {",
          "164:  return 0;",
          "165: }",
          "167: AP_DECLARE(int) ap_should_client_block(request_rec *r) {",
          "168:  return 0;",
          "169: }",
          "171: AP_DECLARE(int) ap_unescape_url(char *url) {",
          "172:  return 0;",
          "173: }",
          "175: AP_DECLARE(apr_status_t) unixd_set_global_mutex_perms(",
          "176:   apr_global_mutex_t *gmutex) {",
          "177:  return APR_SUCCESS;",
          "178: }",
          "180: AP_DECLARE(const char *) ap_get_server_name(request_rec *r) {",
          "181:  return \"www.example.com\";",
          "182: }",
          "184: AP_DECLARE(char *) ap_server_root_relative(apr_pool_t *p, const char *file) {",
          "185:  return \"\";",
          "186: }",
          "",
          "[Added Lines]",
          "148: AP_DECLARE(void) ap_log_error_(const char *file, int line, int module_index,",
          "149:   int level, apr_status_t status, const server_rec *s, const char *fmt,",
          "150:   ...) {",
          "152:  AP_DECLARE(void) ap_log_error(const char *file, int line, int level,",
          "153:    apr_status_t status, const server_rec *s, const char *fmt, ...) {",
          "155:   if (level < APLOG_DEBUG) {",
          "156:    fprintf(stderr, \"%s:%d [%d] [%d] \", file, line, level, status);",
          "157:    va_list ap;",
          "158:    va_start(ap, fmt);",
          "159:    vfprintf(stderr, fmt, ap);",
          "160:    va_end(ap);",
          "161:    fprintf(stderr, \"\\n\");",
          "162:   }",
          "166:  AP_DECLARE(void) ap_log_rerror_(const char *file, int line, int module_index,",
          "167:    int level, apr_status_t status, const request_rec *r, const char *fmt,",
          "168:    ...) {",
          "170:   AP_DECLARE(void) ap_log_rerror(const char *file, int line, int level,",
          "171:     apr_status_t status, const request_rec *r, const char *fmt, ...) {",
          "173:    if (level < APLOG_DEBUG) {",
          "174:     fprintf(stderr, \"%s:%d [%d] [%d] \", file, line, level, status);",
          "175:     va_list ap;",
          "176:     va_start(ap, fmt);",
          "177:     vfprintf(stderr, fmt, ap);",
          "178:     va_end(ap);",
          "179:     fprintf(stderr, \"\\n\");",
          "180:    }",
          "181:   }",
          "183:   AP_DECLARE(void) ap_note_auth_failure(request_rec *r) {",
          "184:   }",
          "186:   AP_DECLARE(apr_status_t) ap_pass_brigade(ap_filter_t *filter,",
          "187:     apr_bucket_brigade *bucket) {",
          "188:    return APR_SUCCESS;",
          "189:   }",
          "191:   AP_DECLARE(const apr_array_header_t *) ap_requires(request_rec *r) {",
          "192:    return NULL;",
          "193:   }",
          "195:   const char *ap_run_http_scheme(const request_rec *r) {",
          "196:    char *rv;",
          "197:    apr_pool_userdata_get((void **) &rv, \"scheme\", r->pool);",
          "198:    return (const char *) rv;",
          "199:   }",
          "201:   AP_DECLARE(void) ap_set_content_type(request_rec *r, const char *ct) {",
          "202:   }",
          "204:   AP_DECLARE_NONSTD(const char *) ap_set_flag_slot(cmd_parms *cmd,",
          "205:     void *struct_ptr,",
          "206:     int arg) {",
          "207:    return \"\";",
          "208:   }",
          "210:   AP_DECLARE_NONSTD(const char *) ap_set_string_slot(cmd_parms *cmd,",
          "211:     void *struct_ptr,",
          "212:     const char *arg) {",
          "214:    return \"\";",
          "215:   }",
          "217:   AP_DECLARE_NONSTD(const char *) ap_set_int_slot(cmd_parms *cmd,",
          "218:     void *struct_ptr,",
          "219:     const char *arg) {",
          "220:    return \"\";",
          "221:   }",
          "223:   AP_DECLARE(int) ap_setup_client_block(request_rec *r, int read_policy) {",
          "224:    return 0;",
          "225:   }",
          "227:   AP_DECLARE(int) ap_should_client_block(request_rec *r) {",
          "228:    return 0;",
          "229:   }",
          "231:   AP_DECLARE(int) ap_unescape_url(char *url) {",
          "232:    return 0;",
          "233:   }",
          "235:   AP_DECLARE(apr_status_t) unixd_set_global_mutex_perms(",
          "236:     apr_global_mutex_t *gmutex) {",
          "237:    return APR_SUCCESS;",
          "238:   }",
          "240:   AP_DECLARE(const char *) ap_get_server_name(request_rec *r) {",
          "241:    return \"www.example.com\";",
          "242:   }",
          "244:   AP_DECLARE(char *) ap_server_root_relative(apr_pool_t *p, const char *file) {",
          "245:    return \"\";",
          "246:   }",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1293:  return 0;",
          "1294: }",
          "1295: static char * all_tests(apr_pool_t *pool, request_rec *r) {",
          "1296:  char *message;",
          "1297:  TST_RUN(test_jwt_parse, pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1296: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1298: static char * test_authz_worker(request_rec *r) {",
          "1299:  authz_status rc;",
          "1300:  char *require_args = NULL;",
          "1301:  json_error_t err;",
          "1302:  json_t *json = NULL;",
          "1303:  char *claims = NULL;",
          "1305:  r->user = \"dummy\";",
          "1307:  claims = \"{\"",
          "1308:    \"\\\"sub\\\": \\\"stef\\\",\"",
          "1309:    \"\\\"nested\\\": {\"",
          "1310:    \"\\\"level1\\\": {\"",
          "1311:    \"\\\"level2\\\": \\\"hans\\\"\"",
          "1312:    \"},\"",
          "1313:    \"\\\"nestedarray\\\": [\"",
          "1314:    \"\\\"b\\\",\"",
          "1315:    \"\\\"c\\\",\"",
          "1316:    \"true\"",
          "1317:    \"],\"",
          "1318:    \"\\\"somebool\\\": false\"",
          "1319:    \"},\"",
          "1320:    \"\\\"somearray\\\": [\"",
          "1321:    \"\\\"one\\\",\"",
          "1322:    \"\\\"two\\\",\"",
          "1323:    \"\\\"three\\\"\"",
          "1324:    \"],\"",
          "1325:    \"\\\"somebool\\\": false\"",
          "1326:    \"}\";",
          "1328:  json = json_loads(claims, 0, &err);",
          "1329:  TST_ASSERT(",
          "1330:    apr_psprintf(r->pool, \"JSON parsed [%s]\", json ? \"ok\" : err.text),",
          "1331:    json != NULL);",
          "1333:  require_args = \"Require claim sub:hans\";",
          "1334:  rc = oidc_authz_worker24(r, json, require_args, oidc_authz_match_claim);",
          "1335:  TST_ASSERT(\"auth status (1: simple sub claim)\", rc == AUTHZ_DENIED);",
          "1337:  require_args = \"Require claim sub:stef\";",
          "1338:  rc = oidc_authz_worker24(r, json, require_args, oidc_authz_match_claim);",
          "1339:  TST_ASSERT(\"auth status (2: simple sub claim)\", rc == AUTHZ_GRANTED);",
          "1341:  require_args = \"Require claim nested.level1.level2:hans\";",
          "1342:  rc = oidc_authz_worker24(r, json, require_args, oidc_authz_match_claim);",
          "1343:  TST_ASSERT(\"auth status (3: nested claim)\", rc == AUTHZ_GRANTED);",
          "1345:  require_args = \"Require claim nested.nestedarray:a\";",
          "1346:  rc = oidc_authz_worker24(r, json, require_args, oidc_authz_match_claim);",
          "1347:  TST_ASSERT(\"auth status (4: nested array)\", rc == AUTHZ_DENIED);",
          "1349:  require_args = \"Require claim nested.nestedarray:c\";",
          "1350:  rc = oidc_authz_worker24(r, json, require_args, oidc_authz_match_claim);",
          "1351:  TST_ASSERT(\"auth status (5: nested array)\", rc == AUTHZ_GRANTED);",
          "1353:  require_args = \"Require claim nested.level1:a\";",
          "1354:  rc = oidc_authz_worker24(r, json, require_args, oidc_authz_match_claim);",
          "1355:  TST_ASSERT(\"auth status (6: nested non-string)\", rc == AUTHZ_DENIED);",
          "1357:  require_args = \"Require claim somebool:a\";",
          "1358:  rc = oidc_authz_worker24(r, json, require_args, oidc_authz_match_claim);",
          "1359:  TST_ASSERT(\"auth status (7: non-array)\", rc == AUTHZ_DENIED);",
          "1361:  require_args = \"Require claim somebool.level1:a\";",
          "1362:  rc = oidc_authz_worker24(r, json, require_args, oidc_authz_match_claim);",
          "1363:  TST_ASSERT(\"auth status (8: nested non-array)\", rc == AUTHZ_DENIED);",
          "1365:  json_decref(json);",
          "1367:  return 0;",
          "1368: }",
          "1370: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1324:  TST_RUN(test_current_url, r);",
          "1325:  TST_RUN(test_accept, r);",
          "1327:  return 0;",
          "1328: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1404: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1405:  TST_RUN(test_authz_worker, r);",
          "1406: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cff35bba8861ddb09d694ecfcd88d5fac1018453",
      "candidate_info": {
        "commit_hash": "cff35bba8861ddb09d694ecfcd88d5fac1018453",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/cff35bba8861ddb09d694ecfcd88d5fac1018453",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/util.c",
          "test/test.c"
        ],
        "message": "improve auto-detection of XMLHttpRequests via Accept header; see #331\n\nversion 2.3.8rc5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "808: static int oidc_authorization_request_set_cookie(request_rec *r,",
          "809:   oidc_cfg *c, const char *state, oidc_proto_state_t *proto_state) {",
          "",
          "[Added Lines]",
          "808: static int oidc_authorization_request_set_cookie(request_rec *r, oidc_cfg *c,",
          "809:   const char *state, oidc_proto_state_t *proto_state) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "953:    apr_time_sec(session_expires - apr_time_now()));",
          "954: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959: static apr_byte_t oidc_is_xml_http_request(request_rec *r) {",
          "961:  if ((oidc_util_hdr_in_x_requested_with_get(r) != NULL)",
          "962:    && (apr_strnatcasecmp(oidc_util_hdr_in_x_requested_with_get(r),",
          "963:      OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST) == 0))",
          "964:   return TRUE;",
          "966:  if ((oidc_util_hdr_in_accept_contains(r, OIDC_CONTENT_TYPE_TEXT_HTML)",
          "967:    == FALSE) && (oidc_util_hdr_in_accept_contains(r,",
          "968:      OIDC_CONTENT_TYPE_APP_XHTML_XML) == FALSE)",
          "969:      && (oidc_util_hdr_in_accept_contains(r,",
          "970:        OIDC_CONTENT_TYPE_ANY) == FALSE))",
          "971:   return TRUE;",
          "973:  return FALSE;",
          "974: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "988:    return HTTP_UNAUTHORIZED;",
          "989:  }",
          "",
          "[Removed Lines]",
          "985:   if ((oidc_util_hdr_in_x_requested_with_get(r) != NULL)",
          "986:     && (apr_strnatcasecmp(oidc_util_hdr_in_x_requested_with_get(r),",
          "987:       OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST) == 0))",
          "",
          "[Added Lines]",
          "1005:   if (oidc_is_xml_http_request(r) == TRUE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "997:    oidc_dir_cfg_path_scope(r));",
          "998: }",
          "",
          "[Removed Lines]",
          "1003: static apr_byte_t oidc_is_xml_http_request(request_rec *r) {",
          "1004:  if ((oidc_util_hdr_in_x_requested_with_get(r) != NULL)",
          "1005:    && (apr_strnatcasecmp(oidc_util_hdr_in_x_requested_with_get(r),",
          "1006:      OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST) == 0))",
          "1007:   return TRUE;",
          "1008:  return FALSE;",
          "1009: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "537: #define OIDC_CONTENT_TYPE_JWT           \"application/jwt\"",
          "538: #define OIDC_CONTENT_TYPE_FORM_ENCODED  \"application/x-www-form-urlencoded\"",
          "539: #define OIDC_CONTENT_TYPE_IMAGE_PNG     \"image/png\"",
          "542: #define OIDC_STR_SPACE         \" \"",
          "543: #define OIDC_STR_EQUAL         \"=\"",
          "",
          "[Removed Lines]",
          "540: #define OIDC_CONTENT_TYPE_HTML          \"text/html\"",
          "",
          "[Added Lines]",
          "540: #define OIDC_CONTENT_TYPE_TEXT_HTML     \"text/html\"",
          "541: #define OIDC_CONTENT_TYPE_APP_XHTML_XML \"application/xhtml+xml\"",
          "542: #define OIDC_CONTENT_TYPE_ANY           \"*/*\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560: #define OIDC_CHAR_FORWARD_SLASH '/'",
          "561: #define OIDC_CHAR_PIPE          '|'",
          "562: #define OIDC_CHAR_AMP           '&'",
          "564: #define OIDC_APP_INFO_REFRESH_TOKEN     \"refresh_token\"",
          "565: #define OIDC_APP_INFO_ACCESS_TOKEN      \"access_token\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565: #define OIDC_CHAR_SEMI_COLON    ';'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "787: void oidc_util_hdr_out_location_set(const request_rec *r, const char *value);",
          "788: const char *oidc_util_hdr_out_location_get(const request_rec *r);",
          "789: void oidc_util_hdr_err_out_add(const request_rec *r, const char *name, const char *value);",
          "792: apr_byte_t oidc_metadata_provider_retrieve(request_rec *r, oidc_cfg *cfg, const char *issuer, const char *url, json_t **j_metadata, char **response);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "793: apr_byte_t oidc_util_hdr_in_accept_contains(const request_rec *r, const char *needle);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:    enc_len--;",
          "98:   if ((enc_len > 0) && (enc[enc_len - 1] == ','))",
          "99:    enc_len--;",
          "101:    enc_len--;",
          "102:   enc[enc_len] = '\\0';",
          "103:  }",
          "",
          "[Removed Lines]",
          "100:   if ((enc_len > 0) &&(enc[enc_len - 1] == ','))",
          "",
          "[Added Lines]",
          "100:   if ((enc_len > 0) && (enc[enc_len - 1] == ','))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:   return NULL;",
          "321:  }",
          "322:  int counter = 0;",
          "326:    replaced[counter] = ' ';",
          "327:   }",
          "328:   counter++;",
          "",
          "[Removed Lines]",
          "323:  char *replaced = (char *)str;",
          "324:  while(str[counter] != '\\0') {",
          "325:   if(str[counter] == '+') {",
          "",
          "[Added Lines]",
          "323:  char *replaced = (char *) str;",
          "324:  while (str[counter] != '\\0') {",
          "325:   if (str[counter] == '+') {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:  for (i = 0; i < strlen(s); i++) {",
          "354:   for (n = 0; n < len; n++) {",
          "355:    if (s[i] == chars[n]) {",
          "357:     for (k = 0; k < m; k++)",
          "358:      r[j + k] = replace[n][k];",
          "359:     j += m;",
          "",
          "[Removed Lines]",
          "356:     m = (unsigned int)strlen(replace[n]);",
          "",
          "[Added Lines]",
          "356:     m = (unsigned int) strlen(replace[n]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "530:  const char *redirect_uri = oidc_get_redirect_uri(r, cfg);",
          "531:  if (provider->issuer_specific_redirect_uri != 0) {",
          "532:   redirect_uri = apr_psprintf(r->pool, \"%s%s%s=%s\", redirect_uri,",
          "539:   oidc_debug(r, \"determined issuer specific redirect uri: %s\",",
          "540:     redirect_uri);",
          "541:  }",
          "",
          "[Removed Lines]",
          "533:     strchr(redirect_uri ? redirect_uri : \"\", OIDC_CHAR_QUERY) != NULL ?",
          "534:       OIDC_STR_AMP :",
          "535:       OIDC_STR_QUERY,",
          "536:       OIDC_PROTO_ISS, oidc_util_escape_string(r, provider->issuer));",
          "",
          "[Added Lines]",
          "533:     strchr(redirect_uri ? redirect_uri : \"\",",
          "534:       OIDC_CHAR_QUERY) != NULL ?",
          "535:         OIDC_STR_AMP :",
          "536:         OIDC_STR_QUERY,",
          "537:         OIDC_PROTO_ISS, oidc_util_escape_string(r, provider->issuer));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1346:        on_load ? apr_psprintf(r->pool, \" onload=\\\"%s()\\\"\", on_load) : \"\",",
          "1347:          html_body ? html_body : \"<p></p>\");",
          "1351: }",
          "1353: static char *html_error_template_contents = NULL;",
          "",
          "[Removed Lines]",
          "1349:  return oidc_util_http_send(r, html, strlen(html), OIDC_CONTENT_TYPE_HTML,",
          "1350:    status_code);",
          "",
          "[Added Lines]",
          "1350:  return oidc_util_http_send(r, html, strlen(html),",
          "1351:    OIDC_CONTENT_TYPE_TEXT_HTML, status_code);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1359: char *oidc_util_get_full_path(apr_pool_t *pool, const char *abs_or_rel_filename) {",
          "1361: }",
          "",
          "[Removed Lines]",
          "1360:  return (abs_or_rel_filename) ? ap_server_root_relative(pool, abs_or_rel_filename) : NULL;",
          "",
          "[Added Lines]",
          "1361:  return (abs_or_rel_filename) ?",
          "1362:    ap_server_root_relative(pool, abs_or_rel_filename) : NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1389:        description ? description : \"\"));",
          "1391:    return oidc_util_http_send(r, html, strlen(html),",
          "1393:   }",
          "1394:  }",
          "",
          "[Removed Lines]",
          "1392:      OIDC_CONTENT_TYPE_HTML, status_code);",
          "",
          "[Added Lines]",
          "1394:      OIDC_CONTENT_TYPE_TEXT_HTML, status_code);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1982: apr_byte_t oidc_util_create_symmetric_key(request_rec *r,",
          "1985:  oidc_jose_error_t err;",
          "1986:  unsigned char *key = NULL;",
          "1987:  unsigned int key_len;",
          "",
          "[Removed Lines]",
          "1983:   const char *client_secret, unsigned int r_key_len, const char *hash_algo,",
          "1984:   apr_byte_t set_kid, oidc_jwk_t **jwk) {",
          "",
          "[Added Lines]",
          "1985:   const char *client_secret, unsigned int r_key_len,",
          "1986:   const char *hash_algo, apr_byte_t set_kid, oidc_jwk_t **jwk) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2216:  return value;",
          "2217: }",
          "2220:  char *last = NULL;",
          "2221:  const char *value = oidc_util_hdr_in_get(r, name);",
          "2222:  if (value)",
          "",
          "[Removed Lines]",
          "2219: static const char *oidc_util_hdr_in_get_left_most_only(const request_rec *r, const char *name, const char *separator) {",
          "",
          "[Added Lines]",
          "2221: static const char *oidc_util_hdr_in_get_left_most_only(const request_rec *r,",
          "2222:   const char *name, const char *separator) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2224:  return NULL;",
          "2225: }",
          "2227: static void oidc_util_hdr_table_set(const request_rec *r, apr_table_t *table,",
          "2228:   const char *name, const char *value) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2230: static apr_byte_t oidc_util_hdr_in_contains(const request_rec *r,",
          "2231:   const char *name, const char *separator, const char postfix_separator,",
          "2232:   const char *needle) {",
          "2233:  char *ctx = NULL, *elem = NULL;",
          "2234:  const char *value = oidc_util_hdr_in_get(r, name);",
          "2235:  apr_byte_t rc = FALSE;",
          "2236:  if (value) {",
          "2237:   elem = apr_strtok(apr_pstrdup(r->pool, value), separator, &ctx);",
          "2238:   while (elem != NULL) {",
          "2239:    while (*elem == OIDC_CHAR_SPACE)",
          "2240:     elem++;",
          "2241:    if ((strncmp(elem, needle, strlen(needle)) == 0)",
          "2242:      && ((elem[strlen(needle)] == '\\0')",
          "2243:        || (elem[strlen(needle)] == postfix_separator))) {",
          "2244:     rc = TRUE;",
          "2245:     break;",
          "2246:    }",
          "2247:    elem = apr_strtok(NULL, separator, &ctx);",
          "2248:   }",
          "2249:  }",
          "2250:  return rc;",
          "2251: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2288: }",
          "2290: const char *oidc_util_hdr_in_x_forwarded_for_get(const request_rec *r) {",
          "2292: }",
          "2294: const char *oidc_util_hdr_in_content_type_get(const request_rec *r) {",
          "",
          "[Removed Lines]",
          "2291:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_FOR, OIDC_STR_COMMA);",
          "",
          "[Added Lines]",
          "2317:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_FOR,",
          "2318:    OIDC_STR_COMMA);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2303:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_ACCEPT);",
          "2304: }",
          "2306: const char *oidc_util_hdr_in_authorization_get(const request_rec *r) {",
          "2307:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_AUTHORIZATION);",
          "2308: }",
          "2310: const char *oidc_util_hdr_in_x_forwarded_proto_get(const request_rec *r) {",
          "2312: }",
          "2314: const char *oidc_util_hdr_in_x_forwarded_port_get(const request_rec *r) {",
          "2316: }",
          "2318: const char *oidc_util_hdr_in_x_forwarded_host_get(const request_rec *r) {",
          "2320: }",
          "2322: const char *oidc_util_hdr_in_host_get(const request_rec *r) {",
          "",
          "[Removed Lines]",
          "2311:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_PROTO, OIDC_STR_COMMA);",
          "2315:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_PORT, OIDC_STR_COMMA);",
          "2319:  return oidc_util_hdr_in_get_left_most_only(r, OIDC_HTTP_HDR_X_FORWARDED_HOST, OIDC_STR_COMMA);",
          "",
          "[Added Lines]",
          "2333: apr_byte_t oidc_util_hdr_in_accept_contains(const request_rec *r,",
          "2334:   const char *needle) {",
          "2335:  return oidc_util_hdr_in_contains(r, OIDC_HTTP_HDR_ACCEPT, OIDC_STR_COMMA,",
          "2336:    OIDC_CHAR_SEMI_COLON, needle);",
          "2337: }",
          "2344:  return oidc_util_hdr_in_get_left_most_only(r,",
          "2345:    OIDC_HTTP_HDR_X_FORWARDED_PROTO, OIDC_STR_COMMA);",
          "2349:  return oidc_util_hdr_in_get_left_most_only(r,",
          "2350:    OIDC_HTTP_HDR_X_FORWARDED_PORT, OIDC_STR_COMMA);",
          "2354:  return oidc_util_hdr_in_get_left_most_only(r,",
          "2355:    OIDC_HTTP_HDR_X_FORWARDED_HOST, OIDC_STR_COMMA);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   }",
          "90: #define TST_ASSERT_CJOSE_ERR(message, expression, pool, cjose_err) \\",
          "97: #define TST_ASSERT_STR(message, result, expected) \\",
          "98:   TST_RC = (result && expected) ? (apr_strnatcmp(result, expected) != 0) : ((result != NULL) || (expected != NULL)); \\",
          "",
          "[Removed Lines]",
          "91:         TST_RC = (expression); \\",
          "92:         if (!TST_RC) { \\",
          "93:             sprintf(TST_ERR_MSG, TST_FORMAT(\"%d\") \" %s\", __FUNCTION__, message, TST_RC, 1, oidc_cjose_e2s(pool, cjose_err)); \\",
          "94:             return TST_ERR_MSG; \\",
          "95:         }",
          "",
          "[Added Lines]",
          "91:   TST_RC = (expression); \\",
          "92:   if (!TST_RC) { \\",
          "93:    sprintf(TST_ERR_MSG, TST_FORMAT(\"%d\") \" %s\", __FUNCTION__, message, TST_RC, 1, oidc_cjose_e2s(pool, cjose_err)); \\",
          "94:    return TST_ERR_MSG; \\",
          "95:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:  const char * k =",
          "152:    \"{\\\"kty\\\":\\\"oct\\\", \\\"k\\\":\\\"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\\\"}\";",
          "153:  jwk = NULL;",
          "156:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk);",
          "157:  TST_ASSERT_ERR(\"oidc_jwt_verify\", oidc_jwt_verify(pool, jwt, keys, &err),",
          "158:    pool, err);",
          "",
          "[Removed Lines]",
          "154:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0,",
          "155:    pool, err);",
          "",
          "[Added Lines]",
          "154:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0, pool,",
          "155:    err);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:    oidc_jwt_parse(pool, s_jwt, &jwt, NULL, &err), pool, err);",
          "197:  char *s_key = \"{\"",
          "206:  apr_hash_t *keys = apr_hash_make(pool);",
          "207:  oidc_jwk_t *jwk = NULL;",
          "",
          "[Removed Lines]",
          "198:         \"\\\"kty\\\": \\\"EC\\\",\"",
          "199:         \"\\\"kid\\\": \\\"f6qtj\\\",\"",
          "200:         \"\\\"use\\\": \\\"sig\\\",\"",
          "201:         \"\\\"x\\\": \\\"iARwFlN3B3xa8Zn_O-CVfqry68tXIhO9DckKo1yrNg0\\\",\"",
          "202:         \"\\\"y\\\": \\\"583S_mPS7YVZtLCjx2O69G_JzQPnMxjieOli-9cc_6Q\\\",\"",
          "203:         \"\\\"crv\\\": \\\"P-256\\\"\"",
          "204:       \"}\";",
          "",
          "[Added Lines]",
          "198:    \"\\\"kty\\\": \\\"EC\\\",\"",
          "199:    \"\\\"kid\\\": \\\"f6qtj\\\",\"",
          "200:    \"\\\"use\\\": \\\"sig\\\",\"",
          "201:    \"\\\"x\\\": \\\"iARwFlN3B3xa8Zn_O-CVfqry68tXIhO9DckKo1yrNg0\\\",\"",
          "202:    \"\\\"y\\\": \\\"583S_mPS7YVZtLCjx2O69G_JzQPnMxjieOli-9cc_6Q\\\",\"",
          "203:    \"\\\"crv\\\": \\\"P-256\\\"\"",
          "204:    \"}\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "262:  oidc_jwt_t *jwt = NULL;",
          "263:  oidc_jose_error_t err;",
          "",
          "[Removed Lines]",
          "260:  char *s_jwt = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IloxTkNqb2plaUhBaWItR204dkZFNnlhNmxQTSJ9.eyJub25jZSI6ImF2U2s3UzY5RzRrRUU4S200YlBpT2pyZkNoSHQ2bk80WjM5N0xwX2JRbmMsIiwiaWF0IjoxNDExNTgwODc2LCJhdF9oYXNoIjoieVRxc29PTlpidVdiTjZUYmdldnVEUSIsInN1YiI6IjYzNDNhMjljLTUzOTktNDRhNy05YjM1LTQ5OTBmNDM3N2M5NiIsImFtciI6InBhc3N3b3JkIiwiYXV0aF90aW1lIjoxNDExNTc3MjY3LCJpZHAiOiJpZHNydiIsIm5hbWUiOiJrc29uYXR5IiwiaXNzIjoiaHR0cHM6Ly9hZ3N5bmMuY29tIiwiYXVkIjoiYWdzeW5jX2ltcGxpY2l0IiwiZXhwIjoxNDExNTg0NDc1LCJuYmYiOjE0MTE1ODA4NzV9.lEG-DgHHa0JuOEuOTBvCqyexjRVcKXBnJJm289o2HyTgclpH80DsOMED9RlXCFfuDY7nw9i2cxUmIMAV42AdTxkMPomK3chytcajvpAZJirlk653bo9GTDXJSKZr5fwyEu--qahsoT5t9qvoWyFdYkvmMHFw1-mAHDGgVe23voc9jPuFFIhRRqIn4e8ikzN4VQeEV1UXJD02kYYFn2TRWURgiFyVeTr2r0MTn-auCEsFS_AfR1Bl_kmpMfqwrsicf5MTBvfPJeuSMt3t3d3LOGBkg36_z21X-ZRN7wy1KTjagr7iQ_y5csIpmtqs_QM55TTB9dW1HIosJPhiuMEJEA\";",
          "",
          "[Added Lines]",
          "260:  char *s_jwt =",
          "261:    \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IloxTkNqb2plaUhBaWItR204dkZFNnlhNmxQTSJ9.eyJub25jZSI6ImF2U2s3UzY5RzRrRUU4S200YlBpT2pyZkNoSHQ2bk80WjM5N0xwX2JRbmMsIiwiaWF0IjoxNDExNTgwODc2LCJhdF9oYXNoIjoieVRxc29PTlpidVdiTjZUYmdldnVEUSIsInN1YiI6IjYzNDNhMjljLTUzOTktNDRhNy05YjM1LTQ5OTBmNDM3N2M5NiIsImFtciI6InBhc3N3b3JkIiwiYXV0aF90aW1lIjoxNDExNTc3MjY3LCJpZHAiOiJpZHNydiIsIm5hbWUiOiJrc29uYXR5IiwiaXNzIjoiaHR0cHM6Ly9hZ3N5bmMuY29tIiwiYXVkIjoiYWdzeW5jX2ltcGxpY2l0IiwiZXhwIjoxNDExNTg0NDc1LCJuYmYiOjE0MTE1ODA4NzV9.lEG-DgHHa0JuOEuOTBvCqyexjRVcKXBnJJm289o2HyTgclpH80DsOMED9RlXCFfuDY7nw9i2cxUmIMAV42AdTxkMPomK3chytcajvpAZJirlk653bo9GTDXJSKZr5fwyEu--qahsoT5t9qvoWyFdYkvmMHFw1-mAHDGgVe23voc9jPuFFIhRRqIn4e8ikzN4VQeEV1UXJD02kYYFn2TRWURgiFyVeTr2r0MTn-auCEsFS_AfR1Bl_kmpMfqwrsicf5MTBvfPJeuSMt3t3d3LOGBkg36_z21X-ZRN7wy1KTjagr7iQ_y5csIpmtqs_QM55TTB9dW1HIosJPhiuMEJEA\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "267:  char *s_key =",
          "268:    \"{\"",
          "269:    \"\\\"kty\\\": \\\"RSA\\\",\"",
          "272:    \"}\";",
          "274:  apr_hash_t *keys = apr_hash_make(pool);",
          "275:  oidc_jwk_t *jwk = NULL;",
          "279:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk);",
          "281:  TST_ASSERT_ERR(\"oidc_jwt_verify\", oidc_jwt_verify(pool, jwt, keys, &err),",
          "",
          "[Removed Lines]",
          "270:          \"\\\"n\\\": \\\"3lDyn_ZvG32Pw5kYbRuVxHsPfe9Xt8s9vOXnt8z7_T-hZZvealNhCxz9VEwTJ7TsZ9CLi5c30FjoEJYFkKddLAdxKo0oOXWc_AWrQvPwht9a-o6dX2fL_9CmXW1hGHXMH0qiLMrFqMSzZeh-GUY6F1woE_eKsAo6LOhP8X77FlEQT2Eu71wu8KC4B3sH_9QTco50KNw14-bRY5j2V2TZelvsXJnvrN4lXtEVYWFkREKeXzMH8DhDyZzh0NcHa7dFBa7rDusyfIHjuP6uAju_Ao6hhdOGjlKePMVtfusWBAI7MWDChLTqiCTvlZnCpkpTTh5m-i7TbE1TwmdbLceq1w\\\",\"",
          "271:          \"\\\"e\\\": \\\"AQAB\\\"\"",
          "277:  TST_ASSERT_ERR(\"oidc_jwk_parse\",",
          "278:    _jwk_parse(pool, s_key, &jwk, &err) == 0, pool, err);",
          "",
          "[Added Lines]",
          "271:    \"\\\"n\\\": \\\"3lDyn_ZvG32Pw5kYbRuVxHsPfe9Xt8s9vOXnt8z7_T-hZZvealNhCxz9VEwTJ7TsZ9CLi5c30FjoEJYFkKddLAdxKo0oOXWc_AWrQvPwht9a-o6dX2fL_9CmXW1hGHXMH0qiLMrFqMSzZeh-GUY6F1woE_eKsAo6LOhP8X77FlEQT2Eu71wu8KC4B3sH_9QTco50KNw14-bRY5j2V2TZelvsXJnvrN4lXtEVYWFkREKeXzMH8DhDyZzh0NcHa7dFBa7rDusyfIHjuP6uAju_Ao6hhdOGjlKePMVtfusWBAI7MWDChLTqiCTvlZnCpkpTTh5m-i7TbE1TwmdbLceq1w\\\",\"",
          "272:    \"\\\"e\\\": \\\"AQAB\\\"\"",
          "278:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, s_key, &jwk, &err) == 0,",
          "279:    pool, err);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284:  oidc_jwt_destroy(jwt);",
          "285:  jwt = NULL;",
          "289:  TST_ASSERT_ERR(\"oidc_jwt_parse (rsa1)\",",
          "290:    oidc_jwt_parse(pool, s_jwt, &jwt, NULL, &err), pool, err);",
          "295:  oidc_jwt_destroy(jwt);",
          "296:  jwt = NULL;",
          "299:  TST_ASSERT_ERR(\"oidc_jwt_parse (rsa2)\",",
          "300:    oidc_jwt_parse(pool, s_jwt, &jwt, NULL, &err), pool, err);",
          "305:  oidc_jwt_destroy(jwt);",
          "306:  oidc_jwk_destroy(jwk);",
          "",
          "[Removed Lines]",
          "288:  s_jwt = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IloxTkNqb2plaUhBaWItR204dkZFNnlhNmxQTSJ9.eyJub25jZSI6ImF2U2s3UzY5RzRrRUU4S200YlBpT2pyZkNoSHQ2bk80WjM5N0xwX2JRbmMsIiwiaWF0IjoxNDExNTgwODc2LCJhdF9oYXNoIjoieVRxc29PTlpidVdiTjZUYmdldnVEUSIsInN1YiI6IjYzNDNhMjljLTUzOTktNDRhNy05YjM1LTQ5OTBmNDM3N2M5NiIsImFtciI6InBhc3N3b3JkIiwiYXV0aF90aW1lIjoxNDExNTc3MjY3LCJpZHAiOiJpZHNydiIsIm5hbWUiOiJrc29uYXR5IiwiaXNzIjoiaHR0cHM6Ly9hZ3N5bmMuY29tIiwiYXVkIjoiYWdzeW5jX2ltcGxpY2l0IiwiZXhwIjoxNDExNTg0NDc1LCJuYmYiOjE1MTE1ODA4NzV9.lEG-DgHHa0JuOEuOTBvCqyexjRVcKXBnJJm289o2HyTgclpH80DsOMED9RlXCFfuDY7nw9i2cxUmIMAV42AdTxkMPomK3chytcajvpAZJirlk653bo9GTDXJSKZr5fwyEu--qahsoT5t9qvoWyFdYkvmMHFw1-mAHDGgVe23voc9jPuFFIhRRqIn4e8ikzN4VQeEV1UXJD02kYYFn2TRWURgiFyVeTr2r0MTn-auCEsFS_AfR1Bl_kmpMfqwrsicf5MTBvfPJeuSMt3t3d3LOGBkg36_z21X-ZRN7wy1KTjagr7iQ_y5csIpmtqs_QM55TTB9dW1HIosJPhiuMEJEA\";",
          "292:  TST_ASSERT_ERR(\"oidc_jwt_verify (rsa1)\", oidc_jwt_verify(pool, jwt, keys, &err) == FALSE,",
          "293:    pool, err);",
          "298:  s_jwt = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IloxTkNqb2plaUhBaWItR204dkZFNnlhNmxQTSJ9.eyJub25jZSI6ImF2U2s3UzY5RzRrRUU4S200YlBpT2pyZkNoSHQ2bk80WjM5N0xwX2JRbmMsIiwiaWF0IjoxNDExNTgwODc2LCJhdF9oYXNoIjoieVRxc29PTlpidVdiTjZUYmdldnVEUSIsInN1YiI6IjYzNDNhMjljLTUzOTktNDRhNy05YjM1LTQ5OTBmNDM3N2M5NiIsImFtciI6InBhc3N3b3JkIiwiYXV0aF90aW1lIjoxNDExNTc3MjY3LCJpZHAiOiJpZHNydiIsIm5hbWUiOiJrc29uYXR5IiwiaXNzIjoiaHR0cHM6Ly9hZ3N5bmMuY29tIiwiYXVkIjoiYWdzeW5jX2ltcGxpY2l0IiwiZXhwIjoxNDExNTg0NDc1LCJuYmYiOjE0MTE1ODA4NzV9.lEG-DgHHa0JuOEuOTBvCqyexjRVcKXBnJJm289o2HyTgclpH80DsOMED9RlXCFfuDY7nw9i2cxUmIMAV42AdTxkMPomK3chytcajvpAZJirlk653bo9GTDXJSKZr5fwyEu--qahsoT5t9qvoWyFdYkvmMHFw1-mAHDGgVe23voc9jPuFFIhRRqIn4e8ikzN4VQeEV1UXJD02kYYFn2TRWURgiFyVeTr2r0MTn-auCEsFS_AfR1Bl_kmpMfqwrsicf5MTBvfPJeuSMt3t3d3LOGBkg36_z21X-ZRN7wy1KTjagr7iQ_y5csIpmtqs_QM55TTB9dW1HIosJPhiuMEJEa\";",
          "302:  TST_ASSERT_ERR(\"oidc_jwt_verify (rsa2)\", oidc_jwt_verify(pool, jwt, keys, &err) == FALSE,",
          "303:    pool, err);",
          "",
          "[Added Lines]",
          "288:  s_jwt =",
          "289:    \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IloxTkNqb2plaUhBaWItR204dkZFNnlhNmxQTSJ9.eyJub25jZSI6ImF2U2s3UzY5RzRrRUU4S200YlBpT2pyZkNoSHQ2bk80WjM5N0xwX2JRbmMsIiwiaWF0IjoxNDExNTgwODc2LCJhdF9oYXNoIjoieVRxc29PTlpidVdiTjZUYmdldnVEUSIsInN1YiI6IjYzNDNhMjljLTUzOTktNDRhNy05YjM1LTQ5OTBmNDM3N2M5NiIsImFtciI6InBhc3N3b3JkIiwiYXV0aF90aW1lIjoxNDExNTc3MjY3LCJpZHAiOiJpZHNydiIsIm5hbWUiOiJrc29uYXR5IiwiaXNzIjoiaHR0cHM6Ly9hZ3N5bmMuY29tIiwiYXVkIjoiYWdzeW5jX2ltcGxpY2l0IiwiZXhwIjoxNDExNTg0NDc1LCJuYmYiOjE1MTE1ODA4NzV9.lEG-DgHHa0JuOEuOTBvCqyexjRVcKXBnJJm289o2HyTgclpH80DsOMED9RlXCFfuDY7nw9i2cxUmIMAV42AdTxkMPomK3chytcajvpAZJirlk653bo9GTDXJSKZr5fwyEu--qahsoT5t9qvoWyFdYkvmMHFw1-mAHDGgVe23voc9jPuFFIhRRqIn4e8ikzN4VQeEV1UXJD02kYYFn2TRWURgiFyVeTr2r0MTn-auCEsFS_AfR1Bl_kmpMfqwrsicf5MTBvfPJeuSMt3t3d3LOGBkg36_z21X-ZRN7wy1KTjagr7iQ_y5csIpmtqs_QM55TTB9dW1HIosJPhiuMEJEA\";",
          "293:  TST_ASSERT_ERR(\"oidc_jwt_verify (rsa1)\",",
          "294:    oidc_jwt_verify(pool, jwt, keys, &err) == FALSE, pool, err);",
          "299:  s_jwt =",
          "300:    \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IloxTkNqb2plaUhBaWItR204dkZFNnlhNmxQTSJ9.eyJub25jZSI6ImF2U2s3UzY5RzRrRUU4S200YlBpT2pyZkNoSHQ2bk80WjM5N0xwX2JRbmMsIiwiaWF0IjoxNDExNTgwODc2LCJhdF9oYXNoIjoieVRxc29PTlpidVdiTjZUYmdldnVEUSIsInN1YiI6IjYzNDNhMjljLTUzOTktNDRhNy05YjM1LTQ5OTBmNDM3N2M5NiIsImFtciI6InBhc3N3b3JkIiwiYXV0aF90aW1lIjoxNDExNTc3MjY3LCJpZHAiOiJpZHNydiIsIm5hbWUiOiJrc29uYXR5IiwiaXNzIjoiaHR0cHM6Ly9hZ3N5bmMuY29tIiwiYXVkIjoiYWdzeW5jX2ltcGxpY2l0IiwiZXhwIjoxNDExNTg0NDc1LCJuYmYiOjE0MTE1ODA4NzV9.lEG-DgHHa0JuOEuOTBvCqyexjRVcKXBnJJm289o2HyTgclpH80DsOMED9RlXCFfuDY7nw9i2cxUmIMAV42AdTxkMPomK3chytcajvpAZJirlk653bo9GTDXJSKZr5fwyEu--qahsoT5t9qvoWyFdYkvmMHFw1-mAHDGgVe23voc9jPuFFIhRRqIn4e8ikzN4VQeEV1UXJD02kYYFn2TRWURgiFyVeTr2r0MTn-auCEsFS_AfR1Bl_kmpMfqwrsicf5MTBvfPJeuSMt3t3d3LOGBkg36_z21X-ZRN7wy1KTjagr7iQ_y5csIpmtqs_QM55TTB9dW1HIosJPhiuMEJEa\";",
          "304:  TST_ASSERT_ERR(\"oidc_jwt_verify (rsa2)\",",
          "305:    oidc_jwt_verify(pool, jwt, keys, &err) == FALSE, pool, err);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "326:  apr_hash_t *keys = apr_hash_make(pool);",
          "331:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk);",
          "",
          "[Removed Lines]",
          "328:  TST_ASSERT_ERR(\"oidc_jwk_parse\",",
          "329:    _jwk_parse(pool, s_key, &jwk, &err) == 0, pool, err);",
          "",
          "[Added Lines]",
          "330:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, s_key, &jwk, &err) == 0,",
          "331:    pool, err);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "350:  TST_ASSERT_ERR(\"oidc_jwt_serialize (rsa)\", cser != NULL, pool, err);",
          "352:  oidc_jwt_t *rsa_jwt = NULL;",
          "355:  TST_ASSERT_ERR(\"oidc_jwt_verify (rsa)\",",
          "356:    oidc_jwt_verify(pool, rsa_jwt, keys, &err), pool, err);",
          "357:  oidc_jwt_destroy(rsa_jwt);",
          "",
          "[Removed Lines]",
          "353:  TST_ASSERT_ERR(\"oidc_jwt_parse (rsa)\", oidc_jwt_parse(pool, cser, &rsa_jwt, NULL, &err),",
          "354:    pool, err);",
          "",
          "[Added Lines]",
          "355:  TST_ASSERT_ERR(\"oidc_jwt_parse (rsa)\",",
          "356:    oidc_jwt_parse(pool, cser, &rsa_jwt, NULL, &err), pool, err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "359:  oidc_jwk_destroy(jwk);",
          "361:  const char *secret = \"my_secret4321\";",
          "363:  TST_ASSERT_ERR(\"oidc_jwk_create_symmetric_key\", jwk != NULL, pool, err);",
          "364:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk);",
          "",
          "[Removed Lines]",
          "362:  jwk = oidc_jwk_create_symmetric_key(pool, NULL, (const unsigned char *)secret, strlen(secret), FALSE, &err);",
          "",
          "[Added Lines]",
          "364:  jwk = oidc_jwk_create_symmetric_key(pool, NULL,",
          "365:    (const unsigned char *) secret, strlen(secret), FALSE, &err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "371:  TST_ASSERT_ERR(\"oidc_jwt_serialize (hmac)\", cser != NULL, pool, err);",
          "373:  oidc_jwt_t *hmac_jwt = NULL;",
          "376:  TST_ASSERT_ERR(\"oidc_jwt_verify (rsa)\",",
          "377:    oidc_jwt_verify(pool, hmac_jwt, keys, &err), pool, err);",
          "378:  oidc_jwt_destroy(hmac_jwt);",
          "",
          "[Removed Lines]",
          "374:  TST_ASSERT_ERR(\"oidc_jwt_parse (rsa)\", oidc_jwt_parse(pool, cser, &hmac_jwt, NULL, &err),",
          "375:    pool, err);",
          "",
          "[Added Lines]",
          "377:  TST_ASSERT_ERR(\"oidc_jwt_parse (rsa)\",",
          "378:    oidc_jwt_parse(pool, cser, &hmac_jwt, NULL, &err), pool, err);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "453:  oidc_jwk_t *jwk;",
          "455:  jwk = NULL;",
          "458:  oidc_jwk_destroy(jwk);",
          "",
          "[Removed Lines]",
          "456:  TST_ASSERT_ERR(\"oidc_jwk_parse (1)\",",
          "457:    _jwk_parse(pool, s, &jwk, &err) == 0, pool, err);",
          "",
          "[Added Lines]",
          "458:  TST_ASSERT_ERR(\"oidc_jwk_parse (1)\", _jwk_parse(pool, s, &jwk, &err) == 0,",
          "459:    pool, err);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "624:  apr_hash_t *keys = apr_hash_make(pool);",
          "625:  oidc_jwk_t *jwk = NULL;",
          "629:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk);",
          "642:  oidc_jwk_destroy(jwk);",
          "643:  cjose_jwe_release(jwe);",
          "",
          "[Removed Lines]",
          "627:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0,",
          "628:    pool, err);",
          "631:     cjose_err cjose_err;",
          "632:     cjose_jwe_t *jwe = cjose_jwe_import(s, strlen(s), &cjose_err);",
          "633:     TST_ASSERT_CJOSE_ERR(\"cjose_jwe_import\", jwe != NULL, pool, cjose_err);",
          "635:     size_t content_len = 0;",
          "636:     uint8_t *decrypted = cjose_jwe_decrypt(jwe, jwk->cjose_jwk, &content_len, &cjose_err);",
          "637:     TST_ASSERT_CJOSE_ERR(\"cjose_jwe_decrypt\", decrypted != NULL, pool, cjose_err);",
          "639:  TST_ASSERT_STRN(\"decrypted\", (const char *)decrypted, \"Live long and prosper.\", content_len);",
          "641:     cjose_get_dealloc()(decrypted);",
          "",
          "[Added Lines]",
          "629:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0, pool,",
          "630:    err);",
          "633:  cjose_err cjose_err;",
          "634:  cjose_jwe_t *jwe = cjose_jwe_import(s, strlen(s), &cjose_err);",
          "635:  TST_ASSERT_CJOSE_ERR(\"cjose_jwe_import\", jwe != NULL, pool, cjose_err);",
          "637:  size_t content_len = 0;",
          "638:  uint8_t *decrypted = cjose_jwe_decrypt(jwe, jwk->cjose_jwk, &content_len,",
          "639:    &cjose_err);",
          "640:  TST_ASSERT_CJOSE_ERR(\"cjose_jwe_decrypt\", decrypted != NULL, pool,",
          "641:    cjose_err);",
          "643:  TST_ASSERT_STRN(\"decrypted\", (const char * )decrypted,",
          "644:    \"Live long and prosper.\", content_len);",
          "646:  cjose_get_dealloc()(decrypted);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "718:  apr_hash_t *keys = apr_hash_make(pool);",
          "719:  oidc_jwk_t *jwk = NULL;",
          "735:    \"You can trust us to stick with you through thick and \"",
          "736:    \"thin\\u2013to the bitter end. And you can trust us to \"",
          "737:    \"keep any secret of yours\\u2013closer than you keep it \"",
          "738:    \"yourself. But you cannot trust us to let you face trouble \"",
          "745:  return 0;",
          "746: }",
          "",
          "[Removed Lines]",
          "721:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0,",
          "722:    pool, err);",
          "724:  apr_hash_set(keys, \"frodo.baggins@hobbiton.example\", APR_HASH_KEY_STRING, jwk);",
          "726:     cjose_err cjose_err;",
          "727:     cjose_jwe_t *jwe = cjose_jwe_import(s, strlen(s), &cjose_err);",
          "728:     TST_ASSERT_CJOSE_ERR(\"cjose_jwe_import\", jwe != NULL, pool, cjose_err);",
          "730:     size_t content_len = 0;",
          "731:     uint8_t *decrypted = cjose_jwe_decrypt(jwe, jwk->cjose_jwk, &content_len, &cjose_err);",
          "732:     TST_ASSERT_CJOSE_ERR(\"cjose_jwe_decrypt\", decrypted != NULL, pool, cjose_err);",
          "734:  TST_ASSERT_STRN(\"decrypted\", (const char *)decrypted,",
          "739:    \"alone, and go off without a word. We are your friends, Frodo.\", content_len);",
          "741:     cjose_get_dealloc()(decrypted);",
          "742:     oidc_jwk_destroy(jwk);",
          "743:     cjose_jwe_release(jwe);",
          "",
          "[Added Lines]",
          "726:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0, pool,",
          "727:    err);",
          "729:  apr_hash_set(keys, \"frodo.baggins@hobbiton.example\", APR_HASH_KEY_STRING,",
          "730:    jwk);",
          "732:  cjose_err cjose_err;",
          "733:  cjose_jwe_t *jwe = cjose_jwe_import(s, strlen(s), &cjose_err);",
          "734:  TST_ASSERT_CJOSE_ERR(\"cjose_jwe_import\", jwe != NULL, pool, cjose_err);",
          "736:  size_t content_len = 0;",
          "737:  uint8_t *decrypted = cjose_jwe_decrypt(jwe, jwk->cjose_jwk, &content_len,",
          "738:    &cjose_err);",
          "739:  TST_ASSERT_CJOSE_ERR(\"cjose_jwe_decrypt\", decrypted != NULL, pool,",
          "740:    cjose_err);",
          "742:  TST_ASSERT_STRN(\"decrypted\", (const char * )decrypted,",
          "747:    \"alone, and go off without a word. We are your friends, Frodo.\",",
          "748:    content_len);",
          "750:  cjose_get_dealloc()(decrypted);",
          "751:  oidc_jwk_destroy(jwk);",
          "752:  cjose_jwe_release(jwe);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "755:  const char * k = \"{\\\"kty\\\":\\\"oct\\\", \\\"k\\\":\\\"GawgguFyGrWKav7AX4VKUg\\\"}\";",
          "756:  jwk = NULL;",
          "759:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk);",
          "761:  const char *s = \"eyJhbGciOiJBMTI4S1ciLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.\"",
          "",
          "[Removed Lines]",
          "757:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0,",
          "758:    pool, err);",
          "",
          "[Added Lines]",
          "766:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0, pool,",
          "767:    err);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "764:    \"KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.\"",
          "765:    \"U0m_YmjN04DJvceFICbCVQ\";",
          "781:  return 0;",
          "782: }",
          "",
          "[Removed Lines]",
          "767:     cjose_err cjose_err;",
          "768:     cjose_jwe_t *jwe = cjose_jwe_import(s, strlen(s), &cjose_err);",
          "769:     TST_ASSERT_CJOSE_ERR(\"cjose_jwe_import\", jwe != NULL, pool, cjose_err);",
          "771:     size_t content_len = 0;",
          "772:     uint8_t *decrypted = cjose_jwe_decrypt(jwe, jwk->cjose_jwk, &content_len, &cjose_err);",
          "773:     TST_ASSERT_CJOSE_ERR(\"cjose_jwe_decrypt\", decrypted != NULL, pool, cjose_err);",
          "775:  TST_ASSERT_STRN(\"decrypted\", (const char *)decrypted, \"Live long and prosper.\", content_len);",
          "777:     cjose_get_dealloc()(decrypted);",
          "778:     oidc_jwk_destroy(jwk);",
          "779:     cjose_jwe_release(jwe);",
          "",
          "[Added Lines]",
          "776:  cjose_err cjose_err;",
          "777:  cjose_jwe_t *jwe = cjose_jwe_import(s, strlen(s), &cjose_err);",
          "778:  TST_ASSERT_CJOSE_ERR(\"cjose_jwe_import\", jwe != NULL, pool, cjose_err);",
          "780:  size_t content_len = 0;",
          "781:  uint8_t *decrypted = cjose_jwe_decrypt(jwe, jwk->cjose_jwk, &content_len,",
          "782:    &cjose_err);",
          "783:  TST_ASSERT_CJOSE_ERR(\"cjose_jwe_decrypt\", decrypted != NULL, pool,",
          "784:    cjose_err);",
          "786:  TST_ASSERT_STRN(\"decrypted\", (const char * )decrypted,",
          "787:    \"Live long and prosper.\", content_len);",
          "789:  cjose_get_dealloc()(decrypted);",
          "790:  oidc_jwk_destroy(jwk);",
          "791:  cjose_jwe_release(jwe);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "857:    _jwk_parse(pool, ek, &jwk_e, &err) == 0, pool, err);",
          "858:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk_e);",
          "864:  TST_ASSERT_ERR(\"oidc_jwk_parse (signing key)\",",
          "865:    _jwk_parse(pool, sk, &jwk_s, &err) == 0, pool, err);",
          "866:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk_s);",
          "867:  TST_ASSERT_ERR(\"oidc_jwt_verify\", oidc_jwt_verify(pool, jwt, keys, &err),",
          "868:    pool, err);",
          "871:  TST_ASSERT_STR(\"header.alg\", jwt->header.alg, CJOSE_HDR_ALG_RS256);",
          "872:  TST_ASSERT_STR(\"payload.iss\", jwt->payload.iss, \"joe\");",
          "",
          "[Removed Lines]",
          "860:     TST_ASSERT_ERR(\"oidc_jwt_parse\", oidc_jwt_parse(pool, s, &jwt, keys, &err),",
          "861:             pool, err);",
          "862:     oidc_jwk_destroy(jwk_e);",
          "869:     oidc_jwk_destroy(jwk_s);",
          "",
          "[Added Lines]",
          "872:  TST_ASSERT_ERR(\"oidc_jwt_parse\", oidc_jwt_parse(pool, s, &jwt, keys, &err),",
          "873:    pool, err);",
          "874:  oidc_jwk_destroy(jwk_e);",
          "881:  oidc_jwk_destroy(jwk_s);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "897:      \"SdiwkIr3ajwQzaBtQD_A.\"",
          "898:      \"XFBoMYUZodetZdvTiFvSkQ\");",
          "902:    \"\\\"n\\\":\\\"oahUIoWw0K0usKNuOR6H4wkf4oBUXHTxRvgb48E-BVvxkeDNjbC4he8rUW\"",
          "908:    \"\\\"e\\\":\\\"AQAB\\\",\"",
          "909:    \"\\\"d\\\":\\\"kLdtIj6GbDks_ApCSTYQtelcNttlKiOyPzMrXHeI-yk1F7-kpDxY4-WY5N\"",
          "915:    \"\\\"p\\\":\\\"1r52Xk46c-LsfB5P442p7atdPUrxQSy4mti_tZI3Mgf2EuFVbUoDBvaRQ-\"",
          "918:    \"\\\"q\\\":\\\"wLb35x7hmQWZsWJmB_vle87ihgZ19S8lBEROLIsZG4ayZVe9Hi9gDVCOBm\"",
          "921:    \"\\\"dp\\\":\\\"ZK-YwE7diUh0qR1tR7w8WHtolDx3MZ_OTowiFvgfeQ3SiresXjm9gZ5KL\"",
          "924:    \"\\\"dq\\\":\\\"Dq0gfgJ1DdFGXiLvQEZnuKEN0UUmsJBxkjydc3j4ZYdBiMRAy86x0vHCj\"",
          "927:    \"\\\"qi\\\":\\\"VIMpMYbPf47dT1w_zDUXfPimsSegnMOA1zTaX7aGk_8urY6R8-ZW1FxU7\"",
          "930:    \"}\";",
          "932:  oidc_jose_error_t err;",
          "933:  apr_hash_t *keys = apr_hash_make(pool);",
          "934:  oidc_jwk_t *jwk = NULL;",
          "937:  apr_hash_set(keys, \"dummy\", APR_HASH_KEY_STRING, jwk);",
          "939:  cjose_err cjose_err;",
          "940:  cjose_jwe_t *jwe = cjose_jwe_import(s, strlen(s), &cjose_err);",
          "943:  size_t content_len = 0;",
          "950:  cjose_jwe_release(jwe);",
          "951:  oidc_jwk_destroy(jwk);",
          "",
          "[Removed Lines]",
          "900:  char * k =",
          "901:    \"{\\\"kty\\\":\\\"RSA\\\",\"",
          "903:      \"cJoZmds2h7M70imEVhRU5djINXtqllXI4DFqcI1DgjT9LewND8MW2Krf3S\"",
          "904:      \"psk_ZkoFnilakGygTwpZ3uesH-PFABNIUYpOiN15dsQRkgr0vEhxN92i2a\"",
          "905:      \"sbOenSZeyaxziK72UwxrrKoExv6kc5twXTq4h-QChLOln0_mtUZwfsRaMS\"",
          "906:      \"tPs6mS6XrgxnxbWhojf663tuEQueGC-FCMfra36C9knDFGzKsNa7LZK2dj\"",
          "907:      \"YgyD3JR_MB_4NUJW_TqOQtwHYbxevoJArm-L5StowjzGy-_bq6Gw\\\",\"",
          "910:      \"WV5KntaEeXS1j82E375xxhWMHXyvjYecPT9fpwR_M9gV8n9Hrh2anTpTD9\"",
          "911:      \"3Dt62ypW3yDsJzBnTnrYu1iwWRgBKrEYY46qAZIrA2xAwnm2X7uGR1hghk\"",
          "912:      \"qDp0Vqj3kbSCz1XyfCs6_LehBwtxHIyh8Ripy40p24moOAbgxVw3rxT_vl\"",
          "913:      \"t3UVe4WO3JkJOzlpUf-KTVI2Ptgm-dARxTEtE-id-4OJr0h-K-VFs3VSnd\"",
          "914:      \"VTIznSxfyrj8ILL6MG_Uv8YAu7VILSB3lOW085-4qE3DzgrTjgyQ\\\",\"",
          "916:      \"SWxkbkmoEzL7JXroSBjSrK3YIQgYdMgyAEPTPjXv_hI2_1eTSPVZfzL0lf\"",
          "917:      \"fNn03IXqWF5MDFuoUYE0hzb2vhrlN_rKrbfDIwUbTrjjgieRbwC6Cl0\\\",\"",
          "919:      \"UDdaDYVTSNx_8Fyw1YYa9XGrGnDew00J28cRUoeBB_jKI1oma0Orv1T9aX\"",
          "920:      \"IWxKwd4gvxFImOWr3QRL9KEBRzk2RatUBnmDZJTIAfwTs0g68UZHvtc\\\",\"",
          "922:      \"hMXvo-uz-KUJWDxS5pFQ_M0evdo1dKiRTjVw_x4NyqyXPM5nULPkcpU827\"",
          "923:      \"rnpZzAJKpdhWAgqrXGKAECQH0Xt4taznjnd_zVpAmZZq60WPMBMfKcuE\\\",\"",
          "925:      \"ywcMlYYg4yoC4YZa9hNVcsjqA3FeiL19rk8g6Qn29Tt0cj8qqyFpz9vNDB\"",
          "926:      \"UfCAiJVeESOjJDZPYHdHY8v1b-o-Z2X5tvLx-TCekf7oxyeKDUqKWjis\\\",\"",
          "928:      \"AlWAyLWybqq6t16VFd7hQd0y6flUK4SlOydB61gwanOsXGOAOv82cHq0E3\"",
          "929:      \"eL4HrtZkUuKvnPrMnsUUFlfUdybVzxyjz9JF_XyaY14ardLSjf4L_FNY\\\"\"",
          "935:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0,",
          "936:    pool, err);",
          "941:     TST_ASSERT_CJOSE_ERR(\"cjose_jwe_import\", jwe != NULL, pool, cjose_err);",
          "944:  uint8_t *decrypted = cjose_jwe_decrypt(jwe, jwk->cjose_jwk, &content_len, &cjose_err);",
          "945:     TST_ASSERT_CJOSE_ERR(\"cjose_jwe_decrypt\", decrypted != NULL, pool, cjose_err);",
          "947:  TST_ASSERT_STRN(\"decrypted\", (const char *)decrypted, \"The true sign of intelligence is not knowledge but imagination.\", content_len);",
          "949:     cjose_get_dealloc()(decrypted);",
          "",
          "[Added Lines]",
          "912:  char * k = \"{\\\"kty\\\":\\\"RSA\\\",\"",
          "914:    \"cJoZmds2h7M70imEVhRU5djINXtqllXI4DFqcI1DgjT9LewND8MW2Krf3S\"",
          "915:    \"psk_ZkoFnilakGygTwpZ3uesH-PFABNIUYpOiN15dsQRkgr0vEhxN92i2a\"",
          "916:    \"sbOenSZeyaxziK72UwxrrKoExv6kc5twXTq4h-QChLOln0_mtUZwfsRaMS\"",
          "917:    \"tPs6mS6XrgxnxbWhojf663tuEQueGC-FCMfra36C9knDFGzKsNa7LZK2dj\"",
          "918:    \"YgyD3JR_MB_4NUJW_TqOQtwHYbxevoJArm-L5StowjzGy-_bq6Gw\\\",\"",
          "921:    \"WV5KntaEeXS1j82E375xxhWMHXyvjYecPT9fpwR_M9gV8n9Hrh2anTpTD9\"",
          "922:    \"3Dt62ypW3yDsJzBnTnrYu1iwWRgBKrEYY46qAZIrA2xAwnm2X7uGR1hghk\"",
          "923:    \"qDp0Vqj3kbSCz1XyfCs6_LehBwtxHIyh8Ripy40p24moOAbgxVw3rxT_vl\"",
          "924:    \"t3UVe4WO3JkJOzlpUf-KTVI2Ptgm-dARxTEtE-id-4OJr0h-K-VFs3VSnd\"",
          "925:    \"VTIznSxfyrj8ILL6MG_Uv8YAu7VILSB3lOW085-4qE3DzgrTjgyQ\\\",\"",
          "927:    \"SWxkbkmoEzL7JXroSBjSrK3YIQgYdMgyAEPTPjXv_hI2_1eTSPVZfzL0lf\"",
          "928:    \"fNn03IXqWF5MDFuoUYE0hzb2vhrlN_rKrbfDIwUbTrjjgieRbwC6Cl0\\\",\"",
          "930:    \"UDdaDYVTSNx_8Fyw1YYa9XGrGnDew00J28cRUoeBB_jKI1oma0Orv1T9aX\"",
          "931:    \"IWxKwd4gvxFImOWr3QRL9KEBRzk2RatUBnmDZJTIAfwTs0g68UZHvtc\\\",\"",
          "933:    \"hMXvo-uz-KUJWDxS5pFQ_M0evdo1dKiRTjVw_x4NyqyXPM5nULPkcpU827\"",
          "934:    \"rnpZzAJKpdhWAgqrXGKAECQH0Xt4taznjnd_zVpAmZZq60WPMBMfKcuE\\\",\"",
          "936:    \"ywcMlYYg4yoC4YZa9hNVcsjqA3FeiL19rk8g6Qn29Tt0cj8qqyFpz9vNDB\"",
          "937:    \"UfCAiJVeESOjJDZPYHdHY8v1b-o-Z2X5tvLx-TCekf7oxyeKDUqKWjis\\\",\"",
          "939:    \"AlWAyLWybqq6t16VFd7hQd0y6flUK4SlOydB61gwanOsXGOAOv82cHq0E3\"",
          "940:    \"eL4HrtZkUuKvnPrMnsUUFlfUdybVzxyjz9JF_XyaY14ardLSjf4L_FNY\\\"\"",
          "946:  TST_ASSERT_ERR(\"oidc_jwk_parse\", _jwk_parse(pool, k, &jwk, &err) == 0, pool,",
          "947:    err);",
          "952:  TST_ASSERT_CJOSE_ERR(\"cjose_jwe_import\", jwe != NULL, pool, cjose_err);",
          "955:  uint8_t *decrypted = cjose_jwe_decrypt(jwe, jwk->cjose_jwk, &content_len,",
          "956:    &cjose_err);",
          "957:  TST_ASSERT_CJOSE_ERR(\"cjose_jwe_decrypt\", decrypted != NULL, pool,",
          "958:    cjose_err);",
          "960:  TST_ASSERT_STRN(\"decrypted\", (const char * )decrypted,",
          "961:    \"The true sign of intelligence is not knowledge but imagination.\",",
          "962:    content_len);",
          "964:  cjose_get_dealloc()(decrypted);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "974:  oidc_jose_error_t err;",
          "975:  oidc_jwt_t *jwt = NULL;",
          "979:  const char *access_token = \"jHkWEdUXMU1BwAsC4vtUsZwnNvTIxEl0z9K3vx5KF0Y\";",
          "980:  TST_ASSERT(\"oidc_proto_validate_access_token\",",
          "",
          "[Removed Lines]",
          "976:  TST_ASSERT_ERR(\"oidc_jwt_parse\", oidc_jwt_parse(r->pool, s, &jwt, NULL, &err),",
          "977:    r->pool, err);",
          "",
          "[Added Lines]",
          "991:  TST_ASSERT_ERR(\"oidc_jwt_parse\",",
          "992:    oidc_jwt_parse(r->pool, s, &jwt, NULL, &err), r->pool, err);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1004:  oidc_jose_error_t err;",
          "1005:  oidc_jwt_t *jwt = NULL;",
          "1009:  const char *code =",
          "1010:    \"Qcb0Orv1zh30vL1MPRsbm-diHiMwcLyZvn1arpZv-Jxf_11jnpEX3Tgfvk\";",
          "",
          "[Removed Lines]",
          "1006:  TST_ASSERT_ERR(\"oidc_jwt_parse\", oidc_jwt_parse(r->pool, s, &jwt, NULL, &err),",
          "1007:    r->pool, err);",
          "",
          "[Added Lines]",
          "1021:  TST_ASSERT_ERR(\"oidc_jwt_parse\",",
          "1022:    oidc_jwt_parse(r->pool, s, &jwt, NULL, &err), r->pool, err);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1021:  oidc_provider_t provider;",
          "1025:  provider.issuer = \"https://idp.example.com\";",
          "1026:  provider.authorization_endpoint_url = \"https://idp.example.com/authorize\";",
          "",
          "[Removed Lines]",
          "1023:         memset(&provider, 0, sizeof(provider));",
          "",
          "[Added Lines]",
          "1038:  memset(&provider, 0, sizeof(provider));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1031:  provider.auth_request_params = NULL;",
          "1032:  provider.request_object = NULL;",
          "1033:  provider.token_binding_policy = OIDC_TOKEN_BINDING_POLICY_OPTIONAL;",
          "1036:  const char *redirect_uri = \"https://www.example.com/protected/\";",
          "1037:  const char *state = \"12345\";",
          "1039:  oidc_proto_state_t *proto_state = oidc_proto_state_new();",
          "1040:  oidc_proto_state_set_nonce(proto_state, \"anonce\");",
          "1042:  oidc_proto_state_set_original_method(proto_state, OIDC_METHOD_GET);",
          "1043:  oidc_proto_state_set_issuer(proto_state, provider.issuer);",
          "1044:  oidc_proto_state_set_response_type(proto_state, provider.response_type);",
          "",
          "[Removed Lines]",
          "1034:         provider.auth_request_method = OIDC_AUTH_REQUEST_METHOD_GET;",
          "1041:  oidc_proto_state_set_original_url(proto_state, \"https://localhost/protected/index.php\");",
          "",
          "[Added Lines]",
          "1049:  provider.auth_request_method = OIDC_AUTH_REQUEST_METHOD_GET;",
          "1056:  oidc_proto_state_set_original_url(proto_state,",
          "1057:    \"https://localhost/protected/index.php\");",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1207:  return 0;",
          "1208: }",
          "1210: static char * all_tests(apr_pool_t *pool, request_rec *r) {",
          "1211:  char *message;",
          "1212:  TST_RUN(test_jwt_parse, pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226: static char * test_accept(request_rec *r) {",
          "1229:  apr_table_set(r->headers_in, \"Accept\",",
          "1230:    \"text/html, application/xhtml+xml, */*\");",
          "1231:  TST_ASSERT(\"Accept: text/html (ie 9/10/11)\",",
          "1232:    oidc_util_hdr_in_accept_contains(r, \"text/html\") != 0);",
          "1233:  TST_ASSERT(\"Accept: application/json (ie 9/10/11)\",",
          "1234:    oidc_util_hdr_in_accept_contains(r, \"application/json\") == 0);",
          "1237:  apr_table_set(r->headers_in, \"Accept\",",
          "1238:    \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\");",
          "1239:  TST_ASSERT(\"Accept: text/html (firefox)\",",
          "1240:    oidc_util_hdr_in_accept_contains(r, \"text/html\") != 0);",
          "1241:  TST_ASSERT(\"Accept: application/json (firefox)\",",
          "1242:    oidc_util_hdr_in_accept_contains(r, \"application/json\") == 0);",
          "1245:  apr_table_set(r->headers_in, \"Accept\",",
          "1246:    \"application/xml,application/xhtml+xml,text/html;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5\");",
          "1247:  TST_ASSERT(\"Accept: text/html (chrome/safari)\",",
          "1248:    oidc_util_hdr_in_accept_contains(r, \"text/html\") != 0);",
          "1249:  TST_ASSERT(\"Accept: application/json (chrome/safari)\",",
          "1250:    oidc_util_hdr_in_accept_contains(r, \"application/json\") == 0);",
          "1253:  apr_table_set(r->headers_in, \"Accept\",",
          "1254:    \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\");",
          "1255:  TST_ASSERT(\"Accept: text/html (safari 5)\",",
          "1256:    oidc_util_hdr_in_accept_contains(r, \"text/html\") != 0);",
          "1257:  TST_ASSERT(\"Accept: application/json (safari 5)\",",
          "1258:    oidc_util_hdr_in_accept_contains(r, \"application/json\") == 0);",
          "1261:  apr_table_set(r->headers_in, \"Accept\",",
          "1262:    \"image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/msword, */*\");",
          "1263:  TST_ASSERT(\"Accept: text/html (ie 8)\",",
          "1264:    oidc_util_hdr_in_accept_contains(r, \"text/html\") == 0);",
          "1265:  TST_ASSERT(\"Accept: */* (ie 8)\",",
          "1266:    oidc_util_hdr_in_accept_contains(r, \"*/*\") != 0);",
          "1267:  TST_ASSERT(\"Accept: application/json (ie 8)\",",
          "1268:    oidc_util_hdr_in_accept_contains(r, \"application/json\") == 0);",
          "1271:  apr_table_set(r->headers_in, \"Accept\",",
          "1272:    \"text/html, application/xhtml+xml, image/jxr, */*\");",
          "1273:  TST_ASSERT(\"Accept: text/html (edge)\",",
          "1274:    oidc_util_hdr_in_accept_contains(r, \"text/html\") != 0);",
          "1275:  TST_ASSERT(\"Accept: application/json (edge)\",",
          "1276:    oidc_util_hdr_in_accept_contains(r, \"application/json\") == 0);",
          "1279:  apr_table_set(r->headers_in, \"Accept\",",
          "1280:    \"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1\");",
          "1281:  TST_ASSERT(\"Accept: text/html (opera)\",",
          "1282:    oidc_util_hdr_in_accept_contains(r, \"text/html\") != 0);",
          "1283:  TST_ASSERT(\"Accept: application/json (opera)\",",
          "1284:    oidc_util_hdr_in_accept_contains(r, \"application/json\") == 0);",
          "1287:  apr_table_set(r->headers_in, \"Accept\", \"application/json\");",
          "1288:  TST_ASSERT(\"Accept: text/html (opera)\",",
          "1289:    oidc_util_hdr_in_accept_contains(r, \"text/html\") == 0);",
          "1290:  TST_ASSERT(\"Accept: application/json (opera)\",",
          "1291:    oidc_util_hdr_in_accept_contains(r, \"application/json\") != 0);",
          "1293:  return 0;",
          "1294: }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1237:  TST_RUN(test_proto_validate_jwt, r);",
          "1239:  TST_RUN(test_current_url, r);",
          "1241:  return 0;",
          "1242: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1325:  TST_RUN(test_accept, r);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1265:    sizeof(struct process_rec));",
          "1266:  request->server->process->pool = request->pool;",
          "1267:  request->connection = apr_pcalloc(request->pool, sizeof(struct conn_rec));",
          "1269:  request->connection->local_addr = apr_pcalloc(request->pool,",
          "1270:    sizeof(apr_sockaddr_t));",
          "",
          "[Removed Lines]",
          "1268:         request->connection->bucket_alloc = apr_bucket_alloc_create(request->pool);",
          "",
          "[Added Lines]",
          "1354:  request->connection->bucket_alloc = apr_bucket_alloc_create(request->pool);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a326dbe843a755124ecee883db52dcdc26284c26",
      "candidate_info": {
        "commit_hash": "a326dbe843a755124ecee883db52dcdc26284c26",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/a326dbe843a755124ecee883db52dcdc26284c26",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c"
        ],
        "message": "add value of OIDC_SET_COOKIE_APPEND env var to Set-Cookie headers\n\n- useful for handling changing/upcoming SameSite behaviors across\ndifferent browsers, e.g.:\n  SetEnvIf User-Agent \".*IOS.*\" OIDC_SET_COOKIE_APPEND=SameSite=None\n- bump to 2.4.1rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "932: #define OIDC_COOKIE_MAX_SIZE            4093",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "934: #define OIDC_SET_COOKIE_APPEND_ENV_VAR  \"OIDC_SET_COOKIE_APPEND\"",
          "936: const char *oidc_util_set_cookie_append_value(request_rec *r, oidc_cfg *c) {",
          "937:  const char *env_var_value = NULL;",
          "939:  if (r->subprocess_env != NULL)",
          "940:   env_var_value = apr_table_get(r->subprocess_env,",
          "941:     OIDC_SET_COOKIE_APPEND_ENV_VAR);",
          "943:  if (env_var_value == NULL) {",
          "944:   oidc_debug(r, \"no cookie append environment variable %s found\",",
          "945:     OIDC_SET_COOKIE_APPEND_ENV_VAR);",
          "946:   return NULL;",
          "947:  }",
          "949:  oidc_debug(r, \"cookie append environment variable %s=%s found\",",
          "950:    OIDC_SET_COOKIE_APPEND_ENV_VAR, env_var_value);",
          "952:  return env_var_value;",
          "953: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "940:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "941:    &auth_openidc_module);",
          "942:  char *headerString, *expiresString = NULL;",
          "945:  if (apr_strnatcmp(cookieValue, \"\") == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "964:  const char *appendString = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "978:  if (ext != NULL)",
          "979:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString, ext);",
          "982:  if (strlen(headerString) > OIDC_COOKIE_MAX_SIZE) {",
          "983:   oidc_warn(r,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1003:  appendString = oidc_util_set_cookie_append_value(r, c);",
          "1004:  if (appendString != NULL)",
          "1005:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString,",
          "1006:     appendString);",
          "",
          "---------------"
        ]
      }
    }
  ]
}