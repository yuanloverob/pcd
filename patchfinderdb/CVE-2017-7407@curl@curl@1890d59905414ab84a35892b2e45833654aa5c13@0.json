{
  "cve_id": "CVE-2017-7407",
  "cve_desc": "The ourWriteOut function in tool_writeout.c in curl 7.53.1 might allow physically proximate attackers to obtain sensitive information from process memory in opportunistic circumstances by reading a workstation screen during use of a --write-out argument ending in a '%' character, which leads to a heap-based buffer over-read.",
  "repo": "curl/curl",
  "patch_hash": "1890d59905414ab84a35892b2e45833654aa5c13",
  "patch_info": {
    "commit_hash": "1890d59905414ab84a35892b2e45833654aa5c13",
    "repo": "curl/curl",
    "commit_url": "https://github.com/curl/curl/commit/1890d59905414ab84a35892b2e45833654aa5c13",
    "files": [
      "src/tool_writeout.c",
      "tests/data/Makefile.inc",
      "tests/data/test1440",
      "tests/data/test1441"
    ],
    "message": "tool_writeout: fixed a buffer read overrun on --write-out\n\nIf a % ended the statement, the string's trailing NUL would be skipped\nand memory past the end of the buffer would be accessed and potentially\ndisplayed as part of the --write-out output. Added tests 1440 and 1441\nto check for this kind of condition.\n\nReported-by: Brian Carpenter",
    "before_after_code_files": [
      "src/tool_writeout.c||src/tool_writeout.c",
      "tests/data/Makefile.inc||tests/data/Makefile.inc"
    ]
  },
  "patch_diff": {
    "src/tool_writeout.c||src/tool_writeout.c": [
      "File: src/tool_writeout.c -> src/tool_writeout.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "113:   double doubleinfo;",
      "115:   while(ptr && *ptr) {",
      "117:       if('%' == ptr[1]) {",
      "119:         fputc('%', stream);",
      "",
      "[Removed Lines]",
      "116:     if('%' == *ptr) {",
      "",
      "[Added Lines]",
      "116:     if('%' == *ptr && ptr[1]) {",
      "",
      "---------------"
    ],
    "tests/data/Makefile.inc||tests/data/Makefile.inc": [
      "File: tests/data/Makefile.inc -> tests/data/Makefile.inc",
      "--- Hunk 1 ---",
      "[Context before]",
      "153: test1416 test1417 test1418 test1419 test1420 test1421 test1422 test1423 \\",
      "154: test1424 \\",
      "155: test1428 test1429 test1430 test1431 test1432 test1433 test1434 test1435 \\",
      "157: \\",
      "158: test1500 test1501 test1502 test1503 test1504 test1505 test1506 test1507 \\",
      "159: test1508 test1509 test1510 test1511 test1512 test1513 test1514 test1515 \\",
      "",
      "[Removed Lines]",
      "156: test1436 test1437 test1438 test1439 \\",
      "",
      "[Added Lines]",
      "156: test1436 test1437 test1438 test1439 test1440 test1441 \\",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3364de00f75ef1bc9d2e70a74e63090d583e048d",
      "candidate_info": {
        "commit_hash": "3364de00f75ef1bc9d2e70a74e63090d583e048d",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/3364de00f75ef1bc9d2e70a74e63090d583e048d",
        "files": [
          "tests/data/Makefile.inc",
          "tests/data/test1443"
        ],
        "message": "test1443: test --remote-time",
        "before_after_code_files": [
          "tests/data/Makefile.inc||tests/data/Makefile.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/data/Makefile.inc||tests/data/Makefile.inc"
          ],
          "candidate": [
            "tests/data/Makefile.inc||tests/data/Makefile.inc"
          ]
        }
      },
      "candidate_diff": {
        "tests/data/Makefile.inc||tests/data/Makefile.inc": [
          "File: tests/data/Makefile.inc -> tests/data/Makefile.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: test1416 test1417 test1418 test1419 test1420 test1421 test1422 test1423 \\",
          "154: test1424 \\",
          "155: test1428 test1429 test1430 test1431 test1432 test1433 test1434 test1435 \\",
          "157: \\",
          "158: test1500 test1501 test1502 test1503 test1504 test1505 test1506 test1507 \\",
          "159: test1508 test1509 test1510 test1511 test1512 test1513 test1514 test1515 \\",
          "",
          "[Removed Lines]",
          "156: test1436 test1437 test1438 test1439 test1440 test1441 test1442 \\",
          "",
          "[Added Lines]",
          "156: test1436 test1437 test1438 test1439 test1440 test1441 test1442 test1443 \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e38fe7abbf127c50b846a4456835dd2c1be631a5",
      "candidate_info": {
        "commit_hash": "e38fe7abbf127c50b846a4456835dd2c1be631a5",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/e38fe7abbf127c50b846a4456835dd2c1be631a5",
        "files": [
          "tests/data/Makefile.inc",
          "tests/data/test1438",
          "tests/data/test1439",
          "tests/data/test1535",
          "tests/data/test1536",
          "tests/libtest/Makefile.inc",
          "tests/libtest/lib1535.c",
          "tests/libtest/lib1536.c"
        ],
        "message": "tests: Add some testcases for recent new features.\n\nAdd missing tests for CURLINFO_SCHEME, CURLINFO_PROTOCOL, %{scheme},\nand %{http_version}\n\ncloses #1143",
        "before_after_code_files": [
          "tests/datMakefile.inc||tests/data/Makefile.inc",
          "tests/libtest/Makefile.inc||tests/libtest/Makefile.inc",
          "tests/libtest/lib1535.c||tests/libtest/lib1535.c",
          "tests/libtest/lib1536.c||tests/libtest/lib1536.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/datMakefile.inc||tests/data/Makefile.inc": [
          "File: tests/datMakefile.inc -> tests/data/Makefile.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: test1436 test1437 test1438 test1439 \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: test1533 test1534 test1535 test1536 \\",
          "",
          "---------------"
        ],
        "tests/libtest/Makefile.inc||tests/libtest/Makefile.inc": [
          "File: tests/libtest/Makefile.inc -> tests/libtest/Makefile.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  lib1509 lib1510 lib1511 lib1512 lib1513 lib1514 lib1515         lib1517 \\",
          "25:  lib1520 \\",
          "26:  lib1525 lib1526 lib1527 lib1528 lib1529 lib1530 lib1531 lib1532 lib1533 \\",
          "28:  lib1900 \\",
          "29:  lib2033",
          "",
          "[Removed Lines]",
          "27:  lib1534 \\",
          "",
          "[Added Lines]",
          "27:  lib1534 lib1535 lib1536 \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404: lib1534_LDADD = $(TESTUTIL_LIBS)",
          "405: lib1534_CPPFLAGS = $(AM_CPPFLAGS) -DLIB1534",
          "407: lib1900_SOURCES = lib1900.c $(SUPPORTFILES) $(TESTUTIL) $(WARNLESS)",
          "408: lib1900_LDADD = $(TESTUTIL_LIBS)",
          "409: lib1900_CPPFLAGS = $(AM_CPPFLAGS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407: lib1535_SOURCES = lib1535.c $(SUPPORTFILES) $(TESTUTIL) $(WARNLESS)",
          "408: lib1535_LDADD = $(TESTUTIL_LIBS)",
          "409: lib1535_CPPFLAGS = $(AM_CPPFLAGS) -DLIB1535",
          "411: lib1536_SOURCES = lib1536.c $(SUPPORTFILES) $(TESTUTIL) $(WARNLESS)",
          "412: lib1536_LDADD = $(TESTUTIL_LIBS)",
          "413: lib1536_CPPFLAGS = $(AM_CPPFLAGS) -DLIB1536",
          "",
          "---------------"
        ],
        "tests/libtest/lib1535.c||tests/libtest/lib1535.c": [
          "File: tests/libtest/lib1535.c -> tests/libtest/lib1535.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"test.h\"",
          "24: #include \"memdebug.h\"",
          "28: int test(char *URL)",
          "29: {",
          "30:   CURL *curl, *dupe = NULL;",
          "31:   long protocol;",
          "32:   int res = CURLE_OK;",
          "34:   global_init(CURL_GLOBAL_ALL);",
          "36:   easy_init(curl);",
          "41:   res = curl_easy_getinfo(curl, CURLINFO_PROTOCOL, &protocol);",
          "42:   if(res) {",
          "43:     fprintf(stderr, \"%s:%d curl_easy_getinfo() failed with code %d (%s)\\n\",",
          "44:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "45:     goto test_cleanup;",
          "46:   }",
          "47:   if(protocol != 0) {",
          "48:     fprintf(stderr, \"%s:%d protocol init failed; expected 0 but is %ld\\n\",",
          "49:             __FILE__, __LINE__, protocol);",
          "50:     res = CURLE_FAILED_INIT;",
          "51:     goto test_cleanup;",
          "52:   }",
          "54:   easy_setopt(curl, CURLOPT_URL, URL);",
          "56:   res = curl_easy_perform(curl);",
          "57:   if(res) {",
          "58:     fprintf(stderr, \"%s:%d curl_easy_perform() failed with code %d (%s)\\n\",",
          "59:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "60:     goto test_cleanup;",
          "61:   }",
          "66:   res = curl_easy_getinfo(curl, CURLINFO_PROTOCOL, &protocol);",
          "67:   if(res) {",
          "68:     fprintf(stderr, \"%s:%d curl_easy_getinfo() failed with code %d (%s)\\n\",",
          "69:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "70:     goto test_cleanup;",
          "71:   }",
          "72:   if(protocol != CURLPROTO_HTTP) {",
          "73:     fprintf(stderr, \"%s:%d protocol of http resource is incorrect; \"",
          "74:             \"expected %ld but is %ld\\n\",",
          "75:             __FILE__, __LINE__, CURLPROTO_HTTP, protocol);",
          "76:     res = CURLE_HTTP_RETURNED_ERROR;",
          "77:     goto test_cleanup;",
          "78:   }",
          "83:   dupe = curl_easy_duphandle(curl);",
          "84:   if(!dupe) {",
          "85:     fprintf(stderr, \"%s:%d curl_easy_duphandle() failed\\n\",",
          "86:             __FILE__, __LINE__);",
          "87:     res = CURLE_FAILED_INIT;",
          "88:     goto test_cleanup;",
          "89:   }",
          "91:   res = curl_easy_getinfo(dupe, CURLINFO_PROTOCOL, &protocol);",
          "92:   if(res) {",
          "93:     fprintf(stderr, \"%s:%d curl_easy_getinfo() failed with code %d (%s)\\n\",",
          "94:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "95:     goto test_cleanup;",
          "96:   }",
          "97:   if(protocol != 0) {",
          "98:     fprintf(stderr, \"%s:%d protocol init failed; expected 0 but is %ld\\n\",",
          "99:             __FILE__, __LINE__, protocol);",
          "100:     res = CURLE_FAILED_INIT;",
          "101:     goto test_cleanup;",
          "102:   }",
          "108:   curl_easy_reset(curl);",
          "110:   res = curl_easy_getinfo(curl, CURLINFO_PROTOCOL, &protocol);",
          "111:   if(res) {",
          "112:     fprintf(stderr, \"%s:%d curl_easy_getinfo() failed with code %d (%s)\\n\",",
          "113:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "114:     goto test_cleanup;",
          "115:   }",
          "116:   if(protocol != 0) {",
          "117:     fprintf(stderr, \"%s:%d protocol init failed; expected 0 but is %ld\\n\",",
          "118:             __FILE__, __LINE__, protocol);",
          "119:     res = CURLE_FAILED_INIT;",
          "120:     goto test_cleanup;",
          "121:   }",
          "123: test_cleanup:",
          "124:   curl_easy_cleanup(curl);",
          "125:   curl_easy_cleanup(dupe);",
          "126:   curl_global_cleanup();",
          "127:   return res;",
          "128: }",
          "",
          "---------------"
        ],
        "tests/libtest/lib1536.c||tests/libtest/lib1536.c": [
          "File: tests/libtest/lib1536.c -> tests/libtest/lib1536.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"test.h\"",
          "24: #include \"memdebug.h\"",
          "28: int test(char *URL)",
          "29: {",
          "30:   CURL *curl, *dupe = NULL;",
          "31:   char *scheme;",
          "32:   int res = CURLE_OK;",
          "34:   global_init(CURL_GLOBAL_ALL);",
          "36:   easy_init(curl);",
          "41:   res = curl_easy_getinfo(curl, CURLINFO_SCHEME, &scheme);",
          "42:   if(res) {",
          "43:     fprintf(stderr, \"%s:%d curl_easy_getinfo() failed with code %d (%s)\\n\",",
          "44:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "45:     goto test_cleanup;",
          "46:   }",
          "47:   if(scheme != NULL) {",
          "48:     fprintf(stderr, \"%s:%d scheme init failed; expected NULL\\n\",",
          "49:             __FILE__, __LINE__);",
          "50:     res = CURLE_FAILED_INIT;",
          "51:     goto test_cleanup;",
          "52:   }",
          "54:   easy_setopt(curl, CURLOPT_URL, URL);",
          "56:   res = curl_easy_perform(curl);",
          "57:   if(res) {",
          "58:     fprintf(stderr, \"%s:%d curl_easy_perform() failed with code %d (%s)\\n\",",
          "59:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "60:     goto test_cleanup;",
          "61:   }",
          "66:   res = curl_easy_getinfo(curl, CURLINFO_SCHEME, &scheme);",
          "67:   if(res) {",
          "68:     fprintf(stderr, \"%s:%d curl_easy_getinfo() failed with code %d (%s)\\n\",",
          "69:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "70:     goto test_cleanup;",
          "71:   }",
          "72:   if(memcmp(scheme, \"HTTP\", 5) != 0) {",
          "73:     fprintf(stderr, \"%s:%d scheme of http resource is incorrect; \"",
          "74:             \"expected 'HTTP' but is %s\\n\",",
          "75:             __FILE__, __LINE__, CURLPROTO_HTTP, (scheme == NULL ? \"NULL\" : \"invalid\"));",
          "76:     res = CURLE_HTTP_RETURNED_ERROR;",
          "77:     goto test_cleanup;",
          "78:   }",
          "83:   dupe = curl_easy_duphandle(curl);",
          "84:   if(!dupe) {",
          "85:     fprintf(stderr, \"%s:%d curl_easy_duphandle() failed\\n\",",
          "86:             __FILE__, __LINE__);",
          "87:     res = CURLE_FAILED_INIT;",
          "88:     goto test_cleanup;",
          "89:   }",
          "91:   res = curl_easy_getinfo(dupe, CURLINFO_SCHEME, &scheme);",
          "92:   if(res) {",
          "93:     fprintf(stderr, \"%s:%d curl_easy_getinfo() failed with code %d (%s)\\n\",",
          "94:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "95:     goto test_cleanup;",
          "96:   }",
          "97:   if(scheme != 0) {",
          "98:     fprintf(stderr, \"%s:%d scheme init failed; expected NULL\\n\",",
          "99:             __FILE__, __LINE__);",
          "100:     res = CURLE_FAILED_INIT;",
          "101:     goto test_cleanup;",
          "102:   }",
          "108:   curl_easy_reset(curl);",
          "110:   res = curl_easy_getinfo(curl, CURLINFO_SCHEME, &scheme);",
          "111:   if(res) {",
          "112:     fprintf(stderr, \"%s:%d curl_easy_getinfo() failed with code %d (%s)\\n\",",
          "113:             __FILE__, __LINE__, res, curl_easy_strerror(res));",
          "114:     goto test_cleanup;",
          "115:   }",
          "116:   if(scheme != 0) {",
          "117:     fprintf(stderr, \"%s:%d scheme init failed; expected NULL\\n\",",
          "118:             __FILE__, __LINE__);",
          "119:     res = CURLE_FAILED_INIT;",
          "120:     goto test_cleanup;",
          "121:   }",
          "123: test_cleanup:",
          "124:   curl_easy_cleanup(curl);",
          "125:   curl_easy_cleanup(dupe);",
          "126:   curl_global_cleanup();",
          "127:   return res;",
          "128: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e65877870c1fac920b65219adec720df810aab9",
      "candidate_info": {
        "commit_hash": "8e65877870c1fac920b65219adec720df810aab9",
        "repo": "curl/curl",
        "commit_url": "https://github.com/curl/curl/commit/8e65877870c1fac920b65219adec720df810aab9",
        "files": [
          "src/tool_writeout.c",
          "tests/data/Makefile.inc",
          "tests/data/test1442"
        ],
        "message": "curl: check for end of input in writeout backslash handling\n\nReported-by: Brian Carpenter\n\nAdded test 1442 to verify",
        "before_after_code_files": [
          "src/tool_writeout.c||src/tool_writeout.c",
          "tests/data/Makefile.inc||tests/data/Makefile.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/tool_writeout.c||src/tool_writeout.c",
            "tests/data/Makefile.inc||tests/data/Makefile.inc"
          ],
          "candidate": [
            "src/tool_writeout.c||src/tool_writeout.c",
            "tests/data/Makefile.inc||tests/data/Makefile.inc"
          ]
        }
      },
      "candidate_diff": {
        "src/tool_writeout.c||src/tool_writeout.c": [
          "File: src/tool_writeout.c -> src/tool_writeout.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:         }",
          "342:       }",
          "343:     }",
          "345:       switch(ptr[1]) {",
          "346:       case 'r':",
          "347:         fputc('\\r', stream);",
          "",
          "[Removed Lines]",
          "344:     else if('\\\\' == *ptr) {",
          "",
          "[Added Lines]",
          "344:     else if('\\\\' == *ptr && ptr[1]) {",
          "",
          "---------------"
        ],
        "tests/data/Makefile.inc||tests/data/Makefile.inc": [
          "File: tests/data/Makefile.inc -> tests/data/Makefile.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: test1416 test1417 test1418 test1419 test1420 test1421 test1422 test1423 \\",
          "154: test1424 \\",
          "155: test1428 test1429 test1430 test1431 test1432 test1433 test1434 test1435 \\",
          "157: \\",
          "158: test1500 test1501 test1502 test1503 test1504 test1505 test1506 test1507 \\",
          "159: test1508 test1509 test1510 test1511 test1512 test1513 test1514 test1515 \\",
          "",
          "[Removed Lines]",
          "156: test1436 test1437 test1438 test1439 test1440 test1441 \\",
          "",
          "[Added Lines]",
          "156: test1436 test1437 test1438 test1439 test1440 test1441 test1442 \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}