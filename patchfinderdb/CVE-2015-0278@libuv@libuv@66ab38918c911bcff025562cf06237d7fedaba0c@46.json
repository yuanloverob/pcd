{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e500266eb02d6e0beb79d7ff4733fd714992f4f",
      "candidate_info": {
        "commit_hash": "1e500266eb02d6e0beb79d7ff4733fd714992f4f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1e500266eb02d6e0beb79d7ff4733fd714992f4f",
        "files": [
          "src/uv-common.h",
          "src/win/internal.h"
        ],
        "message": "windows: move INLINE macro, remove UNUSED\n\nMove the INLINE macro from src/uv-common.h to src/win/internal.h, it's\nnot used in src/unix/ or src/\n\nRemove the UNUSED macro. It's, well, unused.",
        "before_after_code_files": [
          "src/uv-common.h||src/uv-common.h",
          "src/win/internal.h||src/win/internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"tree.h\"",
          "41: #include \"queue.h\"",
          "44: #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "46: #define container_of(ptr, type, member) \\",
          "47:   ((type *) ((char *) (ptr) - offsetof(type, member)))",
          "58: #ifndef _WIN32",
          "59: enum {",
          "60:   UV__HANDLE_INTERNAL = 0x8000,",
          "",
          "[Removed Lines]",
          "49: #ifdef _MSC_VER",
          "51: # define INLINE __inline",
          "52: #else",
          "53: # define UNUSED __attribute__((unused))",
          "54: # define INLINE inline",
          "55: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"winapi.h\"",
          "30: #include \"winsock.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #ifdef _MSC_VER",
          "33: # define INLINE __inline",
          "34: #else",
          "35: # define INLINE inline",
          "36: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "372e9229ad72c7bd9892d5f26149d3c3568d24ad",
      "candidate_info": {
        "commit_hash": "372e9229ad72c7bd9892d5f26149d3c3568d24ad",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/372e9229ad72c7bd9892d5f26149d3c3568d24ad",
        "files": [
          "src/unix/tty.c"
        ],
        "message": "unix: clean up uv_tty_set_mode() a little",
        "before_after_code_files": [
          "src/unix/tty.c||src/unix/tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/tty.c||src/unix/tty.c": [
          "File: src/unix/tty.c -> src/unix/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   fd = uv__stream_fd(tty);",
          "75:     if (orig_termios_fd == -1) {",
          "",
          "[Removed Lines]",
          "67:   if (mode && tty->mode == 0) {",
          "70:     if (tcgetattr(fd, &tty->orig_termios)) {",
          "71:       goto fatal;",
          "72:     }",
          "",
          "[Added Lines]",
          "68:     if (tcgetattr(fd, &tty->orig_termios))",
          "69:       return -errno;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     raw.c_cc[VTIME] = 0;",
          "93:     tty->mode = 1;",
          "103:     tty->mode = 0;",
          "105:   }",
          "109: }",
          "",
          "[Removed Lines]",
          "89:     if (tcsetattr(fd, TCSADRAIN, &raw)) {",
          "90:       goto fatal;",
          "91:     }",
          "94:     return 0;",
          "95:   } else if (mode == 0 && tty->mode) {",
          "99:     if (tcsetattr(fd, TCSAFLUSH, &tty->orig_termios)) {",
          "100:       goto fatal;",
          "101:     }",
          "104:     return 0;",
          "107: fatal:",
          "108:   return -errno;",
          "",
          "[Added Lines]",
          "86:     if (tcsetattr(fd, TCSADRAIN, &raw))",
          "87:       return -errno;",
          "92:     if (tcsetattr(fd, TCSAFLUSH, &tty->orig_termios))",
          "93:       return -errno;",
          "97:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "68cd6d6a6ff7b4088b210498f81002080733fe5f",
      "candidate_info": {
        "commit_hash": "68cd6d6a6ff7b4088b210498f81002080733fe5f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/68cd6d6a6ff7b4088b210498f81002080733fe5f",
        "files": [
          "src/win/tty.c"
        ],
        "message": "windows: add tty unicode support for input\n\nSwitches from using ReadConsoleA to ReadConsoleW.\nUses an auxiliary buffer to store the temporary utf-16 string.\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>\nSigned-off-by: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
        "before_after_code_files": [
          "src/win/tty.c||src/win/tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/tty.c||src/win/tty.c": [
          "File: src/win/tty.c -> src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #define ANSI_IN_STRING        0x40",
          "49: #define ANSI_BACKSLASH_SEEN   0x80",
          "52: static void uv_tty_update_virtual_window(CONSOLE_SCREEN_BUFFER_INFO* info);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: #define MAX_INPUT_BUFFER_LENGTH 8192",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:   uv_tty_t* handle;",
          "304:   uv_req_t* req;",
          "305:   DWORD bytes, read_bytes;",
          "307:   assert(data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:   WCHAR utf16[MAX_INPUT_BUFFER_LENGTH / 3];",
          "309:   DWORD chars, read_chars;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "314:   assert(handle->read_line_buffer.len > 0);",
          "318:     bytes = handle->read_line_buffer.len;",
          "319:   } else {",
          "321:   }",
          "328:                    NULL)) {",
          "329:     SET_REQ_SUCCESS(req);",
          "330:     req->overlapped.InternalHigh = read_bytes;",
          "331:   } else {",
          "",
          "[Removed Lines]",
          "317:   if (handle->read_line_buffer.len < 8192) {",
          "320:     bytes = 8192;",
          "324:   if (ReadConsoleA(handle->read_line_handle,",
          "325:                    (void*) handle->read_line_buffer.base,",
          "326:                    bytes,",
          "327:                    &read_bytes,",
          "",
          "[Added Lines]",
          "321:   if (handle->read_line_buffer.len < MAX_INPUT_BUFFER_LENGTH) {",
          "324:     bytes = MAX_INPUT_BUFFER_LENGTH;",
          "329:   chars = bytes / 3;",
          "331:   if (ReadConsoleW(handle->read_line_handle,",
          "332:                    (void*) utf16,",
          "333:                    chars,",
          "334:                    &read_chars,",
          "336:     read_bytes = WideCharToMultiByte(CP_UTF8,",
          "337:                                      0,",
          "338:                                      utf16,",
          "339:                                      read_chars,",
          "340:                                      handle->read_line_buffer.base,",
          "341:                                      bytes,",
          "342:                                      NULL,",
          "343:                                      NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab935a25a5f2709105717005de70655bf8291e36",
      "candidate_info": {
        "commit_hash": "ab935a25a5f2709105717005de70655bf8291e36",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/ab935a25a5f2709105717005de70655bf8291e36",
        "files": [
          "include/uv.h"
        ],
        "message": "include: use x macros for uv_any_{handle,req} unions\n\nGenerate the members of the uv_any_handle and uv_any_req unions with\nthe UV_HANDLE_TYPE_MAP and UV_REQ_TYPE_MAP macros. Eases maintenance\nwhen new handle or request types are added.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1902: UV_EXTERN unsigned long uv_thread_self(void);",
          "1903: UV_EXTERN int uv_thread_join(uv_thread_t *tid);",
          "1906: union uv_any_handle {",
          "1922: };",
          "1924: union uv_any_req {",
          "1933: };",
          "1936: struct uv_loop_s {",
          "",
          "[Removed Lines]",
          "1907:   uv_handle_t handle;",
          "1908:   uv_stream_t stream;",
          "1909:   uv_tcp_t tcp;",
          "1910:   uv_pipe_t pipe;",
          "1911:   uv_prepare_t prepare;",
          "1912:   uv_check_t check;",
          "1913:   uv_idle_t idle;",
          "1914:   uv_async_t async;",
          "1915:   uv_timer_t timer;",
          "1916:   uv_fs_event_t fs_event;",
          "1917:   uv_fs_poll_t fs_poll;",
          "1918:   uv_poll_t poll;",
          "1919:   uv_process_t process;",
          "1920:   uv_tty_t tty;",
          "1921:   uv_udp_t udp;",
          "1925:   uv_req_t req;",
          "1926:   uv_write_t write;",
          "1927:   uv_connect_t connect;",
          "1928:   uv_shutdown_t shutdown;",
          "1929:   uv_fs_t fs_req;",
          "1930:   uv_work_t work_req;",
          "1931:   uv_udp_send_t udp_send_req;",
          "1932:   uv_getaddrinfo_t getaddrinfo_req;",
          "",
          "[Added Lines]",
          "1906: #define XX(_, name) uv_ ## name ## _t name;",
          "1908:   UV_HANDLE_TYPE_MAP(XX)",
          "1912:   UV_REQ_TYPE_MAP(XX)",
          "1914: #undef XX",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e99b89f2ad289c0ed50795bdfc174768ea7521e5",
      "candidate_info": {
        "commit_hash": "e99b89f2ad289c0ed50795bdfc174768ea7521e5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e99b89f2ad289c0ed50795bdfc174768ea7521e5",
        "files": [
          "include/uv.h",
          "src/unix/fs.c",
          "src/win/fs.c",
          "test/test-fs.c",
          "test/test-list.h"
        ],
        "message": "unix, windows: add uv_fs_mkdtemp",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/fs.c||src/unix/fs.c",
          "src/win/fs.c||src/win/fs.c",
          "test/test-fs.c||test/test-fs.c",
          "test/test-list.h||test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1849:   UV_FS_UNLINK,",
          "1850:   UV_FS_RMDIR,",
          "1851:   UV_FS_MKDIR,",
          "1852:   UV_FS_RENAME,",
          "1853:   UV_FS_READDIR,",
          "1854:   UV_FS_LINK,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1852:   UV_FS_MKDTEMP,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1891: UV_EXTERN int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1892:     int mode, uv_fs_cb cb);",
          "1894: UV_EXTERN int uv_fs_rmdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1895:     uv_fs_cb cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1895: UV_EXTERN int uv_fs_mkdtemp(uv_loop_t* loop, uv_fs_t* req, const char* template,",
          "1896:     uv_fs_cb cb);",
          "",
          "---------------"
        ],
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: }",
          "217: static ssize_t uv__fs_read(uv_fs_t* req) {",
          "218:   ssize_t result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: static ssize_t uv__fs_mkdtemp(uv_fs_t* req) {",
          "218:   return mkdtemp((char*) req->path) ? 0 : -1;",
          "219: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "789:     X(LSTAT, uv__fs_lstat(req->path, &req->statbuf));",
          "790:     X(LINK, link(req->path, req->new_path));",
          "791:     X(MKDIR, mkdir(req->path, req->mode));",
          "792:     X(READ, uv__fs_read(req));",
          "793:     X(READDIR, uv__fs_readdir(req));",
          "794:     X(READLINK, uv__fs_readlink(req));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "797:     X(MKDTEMP, uv__fs_mkdtemp(req));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1001: }",
          "1004: int uv_fs_open(uv_loop_t* loop,",
          "1005:                uv_fs_t* req,",
          "1006:                const char* path,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010: int uv_fs_mkdtemp(uv_loop_t* loop,",
          "1011:                   uv_fs_t* req,",
          "1012:                   const char* template,",
          "1013:                   uv_fs_cb cb) {",
          "1014:   INIT(MKDTEMP);",
          "1015:   req->path = strdup(template);",
          "1016:   if (req->path == NULL)",
          "1017:     return -ENOMEM;",
          "1018:   POST;",
          "1019: }",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: }",
          "724: void fs__readdir(uv_fs_t* req) {",
          "725:   WCHAR* pathw = req->pathw;",
          "726:   size_t len = wcslen(pathw);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: void fs__mkdtemp(uv_fs_t* req) {",
          "726:   static const WCHAR letters[] =",
          "727:     L\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
          "728:   size_t len;",
          "729:   WCHAR* template_part;",
          "730:   static uint64_t value;",
          "731:   unsigned int count;",
          "732:   int fd;",
          "735:      generate. The maximum total number of temporary file names that",
          "736:      can exist for a given template is 62**6. It should never be",
          "737:      necessary to try all these combinations. Instead if a reasonable",
          "738:      number of names is tried (we define reasonable as 62**3) fail to",
          "740: #define ATTEMPTS_MIN (62 * 62 * 62)",
          "744: #if ATTEMPTS_MIN < TMP_MAX",
          "745:   unsigned int attempts = TMP_MAX;",
          "746: #else",
          "747:   unsigned int attempts = ATTEMPTS_MIN;",
          "748: #endif",
          "750:   len = wcslen(req->pathw);",
          "751:   if (len < 6 || wcsncmp(&req->pathw[len - 6], L\"XXXXXX\", 6)) {",
          "752:     SET_REQ_UV_ERROR(req, UV_EINVAL, ERROR_INVALID_PARAMETER);",
          "753:     return;",
          "754:   }",
          "757:   template_part = &req->pathw[len - 6];",
          "760:   value += uv_hrtime() ^ _getpid();",
          "762:   for (count = 0; count < attempts; value += 7777, ++count) {",
          "763:     uint64_t v = value;",
          "766:     template_part[0] = letters[v % 62];",
          "767:     v /= 62;",
          "768:     template_part[1] = letters[v % 62];",
          "769:     v /= 62;",
          "770:     template_part[2] = letters[v % 62];",
          "771:     v /= 62;",
          "772:     template_part[3] = letters[v % 62];",
          "773:     v /= 62;",
          "774:     template_part[4] = letters[v % 62];",
          "775:     v /= 62;",
          "776:     template_part[5] = letters[v % 62];",
          "778:     fd = _wmkdir(req->pathw);",
          "780:     if (fd >= 0) {",
          "781:       len = strlen(req->path);",
          "782:       wcstombs((char*) req->path + len - 6, template_part, 6);",
          "783:       SET_REQ_RESULT(req, 0);",
          "784:       return;",
          "785:     } else if (errno != EEXIST) {",
          "786:       SET_REQ_RESULT(req, -1);",
          "787:       return;",
          "788:     }",
          "789:   }",
          "792:   SET_REQ_RESULT(req, -1);",
          "793: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1528:     XX(UNLINK, unlink)",
          "1529:     XX(RMDIR, rmdir)",
          "1530:     XX(MKDIR, mkdir)",
          "1531:     XX(RENAME, rename)",
          "1532:     XX(READDIR, readdir)",
          "1533:     XX(LINK, link)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1603:     XX(MKDTEMP, mkdtemp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1724: }",
          "1727: int uv_fs_rmdir(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb) {",
          "1728:   int err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1800: int uv_fs_mkdtemp(uv_loop_t* loop, uv_fs_t* req, const char* template,",
          "1801:     uv_fs_cb cb) {",
          "1802:   int err;",
          "1804:   uv_fs_req_init(loop, req, UV_FS_MKDTEMP, cb);",
          "1806:   err = fs__capture_path(loop, req, template, NULL, TRUE);",
          "1807:   if (err)",
          "1808:     return uv_translate_sys_error(err);",
          "1810:   if (cb) {",
          "1811:     QUEUE_FS_TP_JOB(loop, req);",
          "1812:     return 0;",
          "1813:   } else {",
          "1814:     fs__mkdtemp(req);",
          "1815:     return req->result;",
          "1816:   }",
          "1817: }",
          "",
          "---------------"
        ],
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: static int write_cb_count;",
          "66: static int unlink_cb_count;",
          "67: static int mkdir_cb_count;",
          "68: static int rmdir_cb_count;",
          "69: static int readdir_cb_count;",
          "70: static int stat_cb_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: static int mkdtemp_cb_count;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93: static uv_fs_t unlink_req;",
          "94: static uv_fs_t close_req;",
          "95: static uv_fs_t mkdir_req;",
          "96: static uv_fs_t rmdir_req;",
          "97: static uv_fs_t readdir_req;",
          "98: static uv_fs_t stat_req;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: static uv_fs_t mkdtemp_req1;",
          "98: static uv_fs_t mkdtemp_req2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "376: }",
          "379: static void rmdir_cb(uv_fs_t* req) {",
          "380:   ASSERT(req == &rmdir_req);",
          "381:   ASSERT(req->fs_type == UV_FS_RMDIR);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: static void check_mkdtemp_result(uv_fs_t* req) {",
          "383:   int r;",
          "385:   ASSERT(req->fs_type == UV_FS_MKDTEMP);",
          "386:   ASSERT(req->result == 0);",
          "387:   ASSERT(req->path);",
          "388:   ASSERT(strlen(req->path) == 15);",
          "389:   ASSERT(memcmp(req->path, \"test_dir_\", 9) == 0);",
          "390:   ASSERT(memcmp(req->path + 9, \"XXXXXX\", 6) != 0);",
          "391:   check_permission(req->path, 0700);",
          "394:   r = uv_fs_stat(uv_default_loop(), &stat_req, req->path, NULL);",
          "395:   ASSERT(r == 0);",
          "396:   ASSERT(((uv_stat_t*)stat_req.ptr)->st_mode & S_IFDIR);",
          "397:   uv_fs_req_cleanup(&stat_req);",
          "398: }",
          "401: static void mkdtemp_cb(uv_fs_t* req) {",
          "402:   ASSERT(req == &mkdtemp_req1);",
          "403:   check_mkdtemp_result(req);",
          "404:   mkdtemp_cb_count++;",
          "405: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "927: }",
          "930: TEST_IMPL(fs_fstat) {",
          "931:   int r;",
          "932:   uv_fs_t req;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959: TEST_IMPL(fs_mkdtemp) {",
          "960:   int r;",
          "961:   const char* path_template = \"test_dir_XXXXXX\";",
          "963:   loop = uv_default_loop();",
          "965:   r = uv_fs_mkdtemp(loop, &mkdtemp_req1, path_template, mkdtemp_cb);",
          "966:   ASSERT(r == 0);",
          "968:   uv_run(loop, UV_RUN_DEFAULT);",
          "969:   ASSERT(mkdtemp_cb_count == 1);",
          "972:   r = uv_fs_mkdtemp(loop, &mkdtemp_req2, path_template, NULL);",
          "973:   ASSERT(r == 0);",
          "974:   check_mkdtemp_result(&mkdtemp_req2);",
          "977:   ASSERT(strcmp(mkdtemp_req1.path, mkdtemp_req2.path) != 0);",
          "980:   rmdir(mkdtemp_req1.path);",
          "981:   rmdir(mkdtemp_req2.path);",
          "982:   uv_fs_req_cleanup(&mkdtemp_req1);",
          "983:   uv_fs_req_cleanup(&mkdtemp_req2);",
          "985:   MAKE_VALGRIND_HAPPY();",
          "986:   return 0;",
          "987: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "200: TEST_DECLARE   (fs_file_write_null_buffer)",
          "201: TEST_DECLARE   (fs_async_dir)",
          "202: TEST_DECLARE   (fs_async_sendfile)",
          "203: TEST_DECLARE   (fs_fstat)",
          "204: TEST_DECLARE   (fs_chmod)",
          "205: TEST_DECLARE   (fs_chown)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203: TEST_DECLARE   (fs_mkdtemp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:   TEST_ENTRY  (fs_file_write_null_buffer)",
          "549:   TEST_ENTRY  (fs_async_dir)",
          "550:   TEST_ENTRY  (fs_async_sendfile)",
          "551:   TEST_ENTRY  (fs_fstat)",
          "552:   TEST_ENTRY  (fs_chmod)",
          "553:   TEST_ENTRY  (fs_chown)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:   TEST_ENTRY  (fs_mkdtemp)",
          "",
          "---------------"
        ]
      }
    }
  ]
}