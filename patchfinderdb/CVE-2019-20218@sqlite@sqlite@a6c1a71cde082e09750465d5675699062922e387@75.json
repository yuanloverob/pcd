{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b0b3a95d025430c83563ee390656901734f9988",
      "candidate_info": {
        "commit_hash": "0b0b3a95d025430c83563ee390656901734f9988",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b0b3a95d025430c83563ee390656901734f9988",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/pragma.c",
          "src/sqliteInt.h"
        ],
        "message": "In the Table object, change the nVCol field to nNVCol - the number of non-virtual columns, as that is the quantity that we need most.\n\nFossilOrigin-Name: 4ad66af04a654d92711d2d056ce8f35cd21eac4b99fb8d78be1a314620b6d29e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 61b4459ae6a6cc182c11abbc8b1dd629f77beb088d7ccad5e563d8d4769056df",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:   int i;",
          "902:   i16 n;",
          "903:   assert( iCol<pTab->nCol );",
          "905:   for(i=0, n=0; i<iCol; i++){",
          "906:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "907:   }",
          "",
          "[Removed Lines]",
          "904:   if( pTab->nVCol==0 ) return iCol;",
          "",
          "[Added Lines]",
          "904:   if( (pTab->tabFlags & TF_HasVirtual)==0 ) return iCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1568:   pCol->colFlags |= eType;",
          "1569:   assert( TF_HasVirtual==COLFLAG_VIRTUAL );",
          "1570:   assert( TF_HasStored==COLFLAG_STORED );",
          "",
          "[Removed Lines]",
          "1567:   if( eType==COLFLAG_VIRTUAL ) pTab->nVCol++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2127:   assert( !db->mallocFailed );",
          "2128:   p = pParse->pNewTable;",
          "2129:   if( p==0 ) return;",
          "2131:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
          "2132:     p->tabFlags |= TF_Shadow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2129:   p->nNVCol = p->nCol;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2183:   if( p->tabFlags & (TF_HasVirtual|TF_HasStored) ){",
          "2184:     int ii;",
          "2185:     for(ii=0; ii<p->nCol; ii++){",
          "2187:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2188:                                     p->aCol[ii].pDflt, 0);",
          "2189:       }",
          "",
          "[Removed Lines]",
          "2186:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "",
          "[Added Lines]",
          "2186:       u32 colFlags = p->aCol[ii].colFlags;",
          "2187:       if( (colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2188:         if( colFlags & COLFLAG_VIRTUAL ){",
          "2189:           p->nNVCol--;",
          "2190:           assert( p->nNVCol>=0 );",
          "2191:         }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3TableLock(pParse, iDb, pTab->tnum,",
          "38:                    (opcode==OP_OpenWrite)?1:0, pTab->zName);",
          "39:   if( HasRowid(pTab) ){",
          "42:     VdbeComment((v, \"%s\", pTab->zName));",
          "43:   }else{",
          "44:     Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "",
          "[Removed Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb,",
          "41:                          pTab->nCol - pTab->nVCol);",
          "",
          "[Added Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb, pTab->nNVCol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1934:   if( HasRowid(pTab) ){",
          "1935:     int regRec = aRegIdx[ix];",
          "1938:     sqlite3SetMakeRecordP5(v, pTab);",
          "1939:     if( !bAffinityDone ){",
          "1940:       sqlite3TableAffinity(v, pTab, 0);",
          "",
          "[Removed Lines]",
          "1936:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1,",
          "1937:                       pTab->nCol-pTab->nVCol, regRec);",
          "",
          "[Added Lines]",
          "1935:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1, pTab->nNVCol, regRec);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:         loopTop = sqlite3VdbeAddOp2(v, OP_AddImm, 7, 1);",
          "1587:         if( !isQuick ){",
          "1590:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1591:         }",
          "",
          "[Removed Lines]",
          "1589:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-pTab->nVCol-1,3);",
          "",
          "[Added Lines]",
          "1589:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nNVCol-1,3);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "94ec92a1f7c3aef3be16e00d53c1b876e1cd832c",
      "candidate_info": {
        "commit_hash": "94ec92a1f7c3aef3be16e00d53c1b876e1cd832c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94ec92a1f7c3aef3be16e00d53c1b876e1cd832c",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix a problem with querying a corrupt fts3 database.\n\nFossilOrigin-Name: 65e50706a017751d72d0f9c7f575955194977decd0acf13aaca90c3cb925f20e",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2961:           }else{",
          "2962:             iDelta = iDocid - iPrev;",
          "2963:           }",
          "2965:           assert( nDoclist>0 || iDelta==iDocid );",
          "2967:           nByte = sqlite3Fts3VarintLen(iDelta) + (isRequirePos?nList+1:0);",
          "",
          "[Removed Lines]",
          "2964:           assert( iDelta>0 || (nDoclist==0 && iDelta==iDocid) );",
          "",
          "[Added Lines]",
          "2964:           if( iDelta<=0 && (nDoclist>0 || iDelta!=iDocid) ){",
          "2965:             return FTS_CORRUPT_VTAB;",
          "2966:           }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddc3697efd61830fad55c6bf7f9115f4a7f53e08838eba5a82e1406c7a721665",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:   SELECT matchinfo(t1,'y') FROM t1 WHERE t1 MATCH 'e*';",
          "558: } {1 {database disk image is malformed}}",
          "560: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: #-------------------------------------------------------------------------",
          "561: reset_db",
          "562: do_test 8.0 {",
          "563:   sqlite3 db {}",
          "564:   db deserialize [decode_hexdb {",
          "565: | size 28672 pagesize 4096 filename crash-7948058d822acb.db",
          "566: | page 1 offset 0",
          "567: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "568: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "569: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "570: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "571: |     96: 00 00 00 00 0d 0e ef 00 07 0d 4d 00 0f bd 0f 5f   ..........M...._",
          "572: |    112: 0e f7 0e 06 0e bc 0d a4 0d 4d 00 00 00 00 00 00   .........M......",
          "573: |   3392: 00 00 00 00 00 00 00 00 00 00 00 00 00 55 07 07   .............U..",
          "574: |   3408: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 73 74   ......tablet1_st",
          "575: |   3424: 61 74 74 31 5f 73 74 61 74 07 43 52 45 41 54 45   att1_stat.CREATE",
          "576: |   3440: 20 54 41 42 4c 45 20 27 74 31 5f 73 74 61 74 27    TABLE 't1_stat'",
          "577: |   3456: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "578: |   3472: 41 52 59 20 4b 45 59 2c 20 76 61 6c 75 65 20 42   ARY KEY, value B",
          "579: |   3488: 4c 4f 42 29 60 06 07 17 21 21 01 81 0b 74 61 62   LOB)`...!!...tab",
          "580: |   3504: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "581: |   3520: 6f 63 73 69 7a 65 06 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "582: |   3536: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "583: |   3552: 28 64 6f 63 69 64 20 49 4e 54 45 47 45 52 20 50   (docid INTEGER P",
          "584: |   3568: 52 49 4d 41 52 59 20 4b 45 59 2c 20 73 69 7a 65   RIMARY KEY, size",
          "585: |   3584: 20 42 4c 4f 42 29 81 33 04 07 17 1f 1f 01 82 35    BLOB).3.......5",
          "586: |   3600: 74 61 62 6c 65 74 31 5f 73 65 67 64 69 72 74 31   tablet1_segdirt1",
          "587: |   3616: 5f 73 65 67 64 69 72 04 43 52 45 41 54 45 20 54   _segdir.CREATE T",
          "588: |   3632: 41 42 4c 45 20 27 74 31 5f 73 65 67 64 69 72 27   ABLE 't1_segdir'",
          "589: |   3648: 28 6c 65 76 65 6c 20 49 4e 54 45 47 45 52 2c 69   (level INTEGER,i",
          "590: |   3664: 64 78 20 49 4e 54 45 47 45 52 2c 73 74 61 72 74   dx INTEGER,start",
          "591: |   3680: 5f 62 6c 6f 63 6b 20 49 4e 54 45 47 45 52 2c 6c   _block INTEGER,l",
          "592: |   3696: 65 61 76 65 73 5f 65 6e 64 5f 62 6c 6f 63 6b 20   eaves_end_block",
          "593: |   3712: 49 4e 54 45 47 45 52 2c 65 6e 64 5f 62 6c 6f 63   INTEGER,end_bloc",
          "594: |   3728: 6b 20 49 4e 54 45 47 45 52 2c 72 6f 6f 74 20 42   k INTEGER,root B",
          "595: |   3744: 4c 4f 42 2c 50 52 49 4d 41 52 59 20 4b 45 59 28   LOB,PRIMARY KEY(",
          "596: |   3760: 6c 65 76 65 6c 2c 20 69 64 78 29 29 31 05 06 17   level, idx))1...",
          "597: |   3776: 45 1f 01 00 69 6e 64 65 78 73 71 6c 69 74 65 5f   E...indexsqlite_",
          "598: |   3792: 61 75 74 6f 69 6e 64 65 78 5f 74 31 5f 73 65 67   autoindex_t1_seg",
          "599: |   3808: 64 69 72 5f 31 74 31 5f 73 65 67 64 69 72 05 00   dir_1t1_segdir..",
          "600: |   3824: 00 00 08 00 00 00 00 66 03 07 17 23 23 01 81 13   .......f...##...",
          "601: |   3840: 74 61 62 6c 65 74 31 5f 73 65 67 6d 65 6e 74 73   tablet1_segments",
          "602: |   3856: 74 31 5f 73 65 67 6d 65 6e 74 73 03 43 52 45 41   t1_segments.CREA",
          "603: |   3872: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 73 65 67   TE TABLE 't1_seg",
          "604: |   3888: 6d 65 6e 74 73 27 28 62 6c 6f 63 6b 69 64 20 49   ments'(blockid I",
          "605: |   3904: 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b   NTEGER PRIMARY K",
          "606: |   3920: 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 5c   EY, block BLOB).",
          "607: |   3936: 02 07 17 21 21 01 81 03 74 61 62 6c 65 74 31 5f   ...!!...tablet1_",
          "608: |   3952: 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74 65 6e   contentt1_conten",
          "609: |   3968: 74 02 43 52 45 41 54 45 20 54 41 42 4c 45 20 27   t.CREATE TABLE '",
          "610: |   3984: 74 31 5f 63 6f 6e 74 65 6e 74 27 28 64 6f 63 69   t1_content'(doci",
          "611: |   4000: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "612: |   4016: 59 20 4b 45 59 2c 20 27 63 30 61 27 29 41 01 06   Y KEY, 'c0a')A..",
          "613: |   4032: 17 11 11 08 71 74 61 62 6c 65 74 31 74 31 43 52   ....qtablet1t1CR",
          "614: |   4048: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "615: |   4064: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 34   LE t1 USING fts4",
          "616: |   4080: 28 61 2c 70 72 65 66 69 78 3d 27 31 2c 32 27 29   (a,prefix='1,2')",
          "617: | page 2 offset 4096",
          "618: |      0: 0d 00 00 00 08 0e 1f 00 0f c4 0f 7c 0f 34 0f 07   ...........|.4..",
          "619: |     16: 0e c3 0e 97 0e 63 0e 1f 00 00 00 00 00 00 00 00   .....c..........",
          "620: |   3600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42   ...............B",
          "621: |   3616: 08 04 00 81 09 73 75 6e 74 20 69 6e 20 63 75 6c   .....sunt in cul",
          "622: |   3632: 70 61 20 71 75 69 20 6f 66 66 69 63 69 61 20 64   pa qui officia d",
          "623: |   3648: 65 73 65 72 75 6e 74 20 6d 6f 6c 6c 69 74 20 61   eserunt mollit a",
          "624: |   3664: 6e 69 6d 20 69 64 20 65 73 74 20 6c 61 62 6f 72   nim id est labor",
          "625: |   3680: 75 6d 2e 32 07 03 00 6b 45 78 63 65 70 74 65 75   um.2...kExcepteu",
          "626: |   3696: 72 20 73 69 6e 74 20 6f 63 63 61 65 63 67 42 06   r sint occaecgB.",
          "627: |   3712: 37 57 06 96 46 17 46 17 42 06 e6 f6 e2 07 07 26   7W..F.F.B......&",
          "628: |   3728: f6 96 46 56 e7 42 c2 a0 60 30 05 b6 36 96 c6 c7   ..FV.B..`0..6...",
          "629: |   3744: 56 d2 06 46 f6 c6 f7 26 52 06 57 52 06 67 56 7c   V..F...&R.WR.gV|",
          "630: |   3760: 65 3f 04 20 6e 75 6c 6c 61 20 70 61 72 69 61 74   e?. nulla pariat",
          "631: |   3776: 75 72 2e 42 05 04 00 81 09 44 75 69 73 20 61 75   ur.B.....Duis au",
          "632: |   3792: 74 65 20 69 72 75 72 65 20 64 6f 6c 6f 72 20 69   te irure dolor i",
          "633: |   3808: 6e 20 72 65 70 72 65 68 65 6e 64 65 72 69 74 20   n reprehenderit",
          "634: |   3824: 69 6e 20 76 6f 6c 75 70 74 61 74 65 20 76 65 6c   in voluptate vel",
          "635: |   3840: 69 74 20 65 73 73 65 2b 04 03 00 5d 6e 69 73 69   it esse+...]nisi",
          "636: |   3856: 20 75 74 20 61 7c 69 71 75 69 70 20 65 78 20 65    ut a|iquip ex e",
          "637: |   3872: 61 20 63 6f 6d 6d 6f 64 6f 20 63 6f 6e 73 65 71   a commodo conseq",
          "638: |   3888: 75 61 74 2e 46 03 04 00 81 11 55 74 20 65 6e 69   uat.F.....Ut eni",
          "639: |   3904: 6d 20 61 64 20 6d 69 6e 69 6d 20 76 65 6e 69 61   m ad minim venia",
          "640: |   3920: 6d 2c 20 71 75 69 73 20 6e 6f 73 74 72 75 64 20   m, quis nostrud",
          "641: |   3936: 65 78 65 72 63 69 74 61 74 69 6f 6e 20 75 6c 6c   exercitation ull",
          "642: |   3952: 61 6d 63 6f 20 6c 61 62 6f 72 69 73 46 02 04 00   amco laborisF...",
          "643: |   3968: 81 11 73 65 64 20 64 6f 20 65 69 75 73 6d 6f 64   ..sed do eiusmod",
          "644: |   3984: 20 74 65 6d 70 6f 72 20 69 6e 63 69 64 69 64 75    tempor incididu",
          "645: |   4000: 6e 74 20 75 74 20 6c 61 62 6f 72 65 20 65 74 20   nt ut labore et",
          "646: |   4016: 64 6f 6c 6f 72 65 20 6d 61 67 6e 61 20 61 6c 69   dolore magna ali",
          "647: |   4032: 71 75 61 2e 3a 01 03 00 7b 4c 6f 72 65 6d 20 69   qua.:....Lorem i",
          "648: |   4048: 70 73 75 6d 20 64 6f 6c 6f 72 20 73 69 74 20 61   psum dolor sit a",
          "649: |   4064: 6d 65 74 2c 20 63 6f 6e 73 65 63 74 65 74 75 72   met, consectetur",
          "650: |   4080: 20 61 64 69 70 69 73 63 69 6e 67 20 65 6c 69 74    adipiscing elit",
          "651: | page 3 offset 8192",
          "652: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "653: | page 4 offset 12288",
          "654: |      0: 0d 00 00 00 03 0a a6 00 0d 57 0c 4a 0a a6 00 00   .........W.J....",
          "655: |   2720: 00 00 00 00 00 00 83 21 03 08 02 08 08 08 17 86   .......!........",
          "656: |   2736: 30 08 00 30 20 34 30 32 00 02 61 64 06 01 08 00   0..0 402..ad....",
          "657: |   2752: 02 04 00 01 01 6c 06 02 0c 00 02 04 00 01 01 6d   .....l.........m",
          "658: |   2768: 03 01 06 00 01 01 6e 03 08 00 00 91 01 75 03 05   ......n......u..",
          "659: |   2784: 03 00 00 02 63 69 03 06 02 00 01 01 6f 07 01 07   ....ci......o...",
          "660: |   2800: 00 03 07 03 00 01 01 75 06 07 05 00 01 04 00 00   .......u........",
          "661: |   2816: 02 64 65 03 08 07 00 01 01 6f 0d 01 04 00 01 03   .de......o......",
          "662: |   2832: 09 00 03 05 00 01 03 00 01 01 75 03 05 02 00 00   ..........u.....",
          "663: |   2848: 02 65 61 03 04 06 00 01 01 69 03 02 04 00 01 01   .ea......i......",
          "664: |   2864: 6c 03 01 09 00 01 01 6e 30 03 03 00 01 01 73 06   l......n0.....s.",
          "665: |   2880: 05 0b 00 03 0b 00 01 01 74 03 02 09 00 01 01 75   ........t......u",
          "666: |   2896: 03 06 04 00 01 01 78 09 03 09 00 01 05 00 03 02   ......x.........",
          "667: |   2912: 00 00 02 66 75 03 06 05 00 00 02 69 64 03 08 0a   ...fu......id...",
          "668: |   2928: 00 01 01 6e 0a 02 06 00 03 06 04 00 03 03 00 01   ...n............",
          "669: |   2944: 01 70 03 01 03 00 01 01 72 03 05 04 00 00 02 6c   .p......r......l",
          "670: |   2960: 61 09 02 08 00 01 0b 00 05 0c 00 01 01 6f 03 01   a............o..",
          "671: |   2976: 02 00 00 02 6d 61 03 02 0b 00 01 01 69 03 03 05   ....ma......i...",
          "672: |   2992: 00 01 01 6f 03 08 08 00 00 02 6e 69 03 04 02 00   ...o......ni....",
          "673: |   3008: 01 01 6f 06 03 08 00 04 06 00 01 01 75 03 06 06   ..o.........u...",
          "674: |   3024: 00 00 02 6f 63 03 07 04 00 01 01 66 03 08 06 00   ...oc......f....",
          "675: |   3040: 00 02 70 61 03 06 07 00 01 01 72 03 07 07 00 00   ..pa......r.....",
          "676: |   3056: 02 71 75 06 03 07 00 05 05 00 00 02 72 65 03 05   .qu.........re..",
          "677: |   3072: 07 00 00 02 73 65 03 02 02 00 01 01 69 06 01 05   ....se......i...",
          "678: |   3088: 00 06 03 00 01 01 75 03 08 02 00 00 02 74 65 03   ......u......te.",
          "679: |   3104: 02 05 00 00 02 75 6c 03 03 0a 00 01 01 74 09 02   .....ul......t..",
          "680: |   3120: 07 00 01 02 00 01 03 00 00 02 76 65 06 03 06 00   ..........ve....",
          "681: |   3136: 02 0a 00 01 01 6f 03 05 09 00 82 0a 02 08 02 08   .....o..........",
          "682: |   3152: 08 08 17 84 02 04 00 30 20 32 35 31 00 01 61 13   .......0 251..a.",
          "683: |   3168: 01 06 04 00 01 0c 00 01 04 00 01 04 00 01 03 00   ................",
          "684: |   3184: 03 09 00 00 01 63 10 01 07 00 03 07 03 00 02 02   .....c..........",
          "685: |   3200: 00 01 05 00 01 04 00 00 01 64 11 01 04 00 01 03   .........d......",
          "686: |   3216: 09 00 03 02 05 00 01 03 00 02 07 00 00 01 65 1b   ..............e.",
          "687: |   3232: 01 09 00 01 04 07 00 01 03 00 80 00 15 03 00 01   ................",
          "688: |   3248: 0b 00 01 04 00 01 02 00 01 0b 00 00 01 66 03 06   .............f..",
          "689: |   3264: 05 00 00 01 69 0f 01 03 00 01 06 00 03 04 04 04   ....i...........",
          "690: |   3280: 00 03 03 09 00 00 01 6c 0c 01 02 00 01 08 00 01   .......l........",
          "691: |   3296: 0b 00 05 0c 00 00 01 6d 09 02 0b 00 01 05 00 05   .......m........",
          "692: |   3312: 08 00 00 01 6e 0c 03 08 00 01 02 00 02 06 00 01   ....n...........",
          "693: |   3328: 06 00 00 01 6f 06 07 04 00 01 06 00 00 01 70 06   ....o.........p.",
          "694: |   3344: 06 07 00 01 07 00 00 01 71 06 03 07 00 05 05 00   ........q.......",
          "695: |   3360: 00 01 72 03 05 07 00 00 01 73 0c 01 05 00 01 02   ..r......s......",
          "696: |   3376: 00 05 03 00 01 02 00 00 01 74 03 02 05 00 00 01   .........t......",
          "697: |   3392: 75 0a 02 07 00 01 02 0a 00 01 03 00 00 01 76 07   u.............v.",
          "698: |   3408: 03 06 00 02 09 03 00 85 26 01 08 08 08 08 08 17   ........&.......",
          "699: |   3424: 8a 3e 30 20 36 36 35 00 02 61 64 03 03 04 00 02   .>0 665..ad.....",
          "700: |   3440: 08 69 70 69 73 63 69 6e 67 03 01 08 00 01 05 6c   .ipiscing......l",
          "701: |   3456: 69 71 75 61 03 02 0c 00 05 02 69 70 03 04 04 00   iqua......ip....",
          "702: |   3472: 01 03 6d 65 74 03 01 06 00 01 03 6e 69 6d 03 08   ..met......nim..",
          "703: |   3488: 09 00 01 03 75 74 65 03 05 03 00 00 06 63 69 6c   ....ute......cil",
          "704: |   3504: 6c 75 6d 03 06 02 00 01 06 6f 6d 6d 6f 64 6f 03   lum......ommodo.",
          "705: |   3520: 04 07 00 02 09 6e 73 65 63 74 65 74 75 72 03 01   .....nsectetur..",
          "706: |   3536: 07 00 05 04 71 75 61 74 03 04 08 00 01 04 75 6c   ....quat......ul",
          "707: |   3552: 70 61 03 08 04 00 02 07 70 69 64 61 74 61 74 03   pa......pidatat.",
          "708: |   3568: 07 05 00 00 08 64 65 73 65 72 75 6e 74 03 08 07   .....deserunt...",
          "709: |   3584: 00 01 01 6f 03 02 03 00 02 03 6c 6f 72 06 01 04   ...o......lor...",
          "710: |   3600: 00 40 05 00 05 01 65 06 02 0a 00 04 03 00 01 03   .@....e.........",
          "711: |   3616: 75 69 73 03 05 02 00 00 02 65 61 03 04 06 00 01   uis......ea.....",
          "712: |   3632: 06 69 75 73 6d 6f 64 03 02 04 00 01 03 6c 69 74   .iusmod......lit",
          "713: |   3648: 03 01 09 00 01 03 6e 69 6d 03 03 03 00 01 03 73   ......nim......s",
          "714: |   3664: 73 65 03 05 0b 00 02 01 74 03 08 0b 00 01 01 74   se......t......t",
          "715: |   3680: 03 02 09 00 01 01 75 03 06 04 00 01 01 78 03 04   ......u......x..",
          "716: |   3696: 05 00 02 07 63 65 70 74 65 75 72 03 07 02 00 02   ....cepteur.....",
          "717: |   3712: 0a 65 72 63 69 74 61 74 69 6f 6e 03 03 09 00 00   .ercitation.....",
          "718: |   3728: 06 66 75 67 69 61 74 03 06 05 00 00 02 69 64 03   .fugiat......id.",
          "719: |   3744: 08 0a 00 01 01 6e 07 05 06 04 00 03 03 00 02 08   .....n..........",
          "720: |   3760: 63 69 64 69 64 75 6e 74 03 02 06 00 01 04 70 73   cididunt......ps",
          "721: |   3776: 75 6d 03 01 03 00 01 04 72 75 72 65 03 05 04 00   um......rure....",
          "722: |   3792: 00 06 6c 61 62 6f 72 65 03 02 08 00 05 02 69 73   ..labore......is",
          "723: |   3808: 03 03 0b 00 05 02 75 6d 03 08 0c 00 01 04 6f 72   ......um......or",
          "724: |   3824: 65 6d 03 01 02 00 00 05 6d 61 67 6e 61 03 02 0b   em......magna...",
          "725: |   3840: 00 01 04 69 6e 69 6d 03 03 05 00 01 05 6f 6c 6c   ...inim......oll",
          "726: |   3856: 69 74 03 08 08 00 00 04 6e 69 73 69 03 04 02 00   it......nisi....",
          "727: |   3872: 01 02 6f 6e 03 07 06 00 02 05 73 74 72 75 64 03   ..on......strud.",
          "728: |   3888: 03 08 00 01 04 75 6c 6c 61 03 06 06 00 00 08 6f   .....ulla......o",
          "729: |   3904: 63 63 61 65 63 61 74 03 07 04 00 01 06 66 66 69   ccaecat......ffi",
          "730: |   3920: 63 69 61 03 08 06 00 00 08 70 61 72 69 61 74 75   cia......pariatu",
          "731: |   3936: 72 03 06 07 00 01 07 72 6f 69 64 65 6e 74 03 07   r......roident..",
          "732: |   3952: 07 00 00 03 71 75 69 03 08 05 00 03 01 73 03 03   ....qui......s..",
          "733: |   3968: 07 00 00 0d 72 65 70 72 65 68 65 6e 64 65 72 69   ....reprehenderi",
          "734: |   3984: 74 03 05 07 00 00 03 73 65 64 03 02 02 00 01 03   t......sed......",
          "735: |   4000: 69 6e 74 03 07 03 00 02 01 74 03 01 05 00 01 03   int......t......",
          "736: |   4016: 75 6e 74 03 08 02 00 00 06 74 65 6d 70 6f 72 03   unt......tempor.",
          "737: |   4032: 02 05 00 00 07 75 6c 6c 61 6d 63 6f 03 03 0a 00   .....ullamco....",
          "738: |   4048: 01 01 74 09 02 07 00 01 02 00 01 03 00 00 05 76   ..t............v",
          "739: |   4064: 65 6c 69 74 03 05 0a 00 02 04 6e 69 61 6d 03 03   elit......niam..",
          "740: |   4080: 06 00 01 08 6f 6c 75 70 74 61 74 65 03 05 09 00   ....oluptate....",
          "741: | page 5 offset 16384",
          "742: |      0: 0a 00 00 00 03 0f eb 00 0f fb 0f f3 0f eb 00 00   ................",
          "743: |   4064: 00 00 00 00 00 00 00 00 00 00 00 07 04 02 08 01   ................",
          "744: |   4080: 08 00 03 07 04 02 08 01 04 00 02 04 04 08 08 09   ................",
          "745: | page 6 offset 20480",
          "746: |      0: 0d 00 00 00 08 0f d0 00 0f fa 0f f4 0f ee 0f e8   ................",
          "747: |     16: 0f e2 0f dc 0f d6 0f d0 00 00 00 00 00 00 00 00   ................",
          "748: |   4048: 04 08 03 00 0e 0b 04 07 03 00 0e 06 04 06 03 00   ................",
          "749: |   4064: 0e 06 04 05 03 00 0e 0a 04 04 03 00 0e 07 04 03   ................",
          "750: |   4080: 03 00 0e 0a 04 02 03 00 0e 0b 04 01 03 00 0e 08   ................",
          "751: | page 7 offset 24576",
          "752: |      0: 0d 00 00 00 01 0f f7 00 0f f7 00 00 00 00 00 00   ................",
          "753: |   4080: 00 00 00 00 00 00 00 07 00 03 00 14 08 45 b5 03   .............E..",
          "754: | end crash-7948058d822acb.db",
          "755: }]} {}",
          "757: do_catchsql_test 8.1 {",
          "758:   SELECT matchinfo(t1,'x') FROM t1 WHERE t1 MATCH 'e*';",
          "759: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1972c8cf073b7ddb1e5872628f7c2d078f794740",
      "candidate_info": {
        "commit_hash": "1972c8cf073b7ddb1e5872628f7c2d078f794740",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1972c8cf073b7ddb1e5872628f7c2d078f794740",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --vdbe-debug command-line option to dbfuzz2.\n\nFossilOrigin-Name: 599b4df43c64ce295517c804b6bb4c3ab77d77e0ba585dc0657274f55489a3b1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05c7609cfd02f49114876267d7090f4e0ea2467f3aa7c65019c5986ec8f60a87",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: int eVerbosity = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: static int bVdbeDebug = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:   sqlite3_deserialize(db, \"main\", a, nByte, nByte,",
          "88:         SQLITE_DESERIALIZE_RESIZEABLE |",
          "89:         SQLITE_DESERIALIZE_FREEONCLOSE);",
          "90:   for(i=0; i<sizeof(azSql)/sizeof(azSql[0]); i++){",
          "91:     if( eVerbosity>=1 ){",
          "92:       printf(\"%s\\n\", azSql[i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:   if( bVdbeDebug ){",
          "94:     sqlite3_exec(db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "95:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:   return 0;",
          "110: }",
          "115: int LLVMFuzzerInitialize(int *pArgc, char ***pArgv){",
          "117:   int argc = *pArgc;",
          "118:   char **newArgv;",
          "119:   char **argv = *pArgv;",
          "",
          "[Removed Lines]",
          "116:   int i, j;",
          "",
          "[Added Lines]",
          "122: static int numberOfVChar(const char *z){",
          "123:   int N = 0;",
          "124:   while( z[0] && z[0]=='v' ){",
          "125:     z++;",
          "126:     N++;",
          "127:   }",
          "128:   return z[0]==0 ? N : 0;",
          "129: }",
          "135:   int i, j, n;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125:     if( z[0]=='-' ){",
          "126:       z++;",
          "127:       if( z[0]=='-' ) z++;",
          "130:         continue;",
          "131:       }",
          "132:     }",
          "",
          "[Removed Lines]",
          "128:       if( strcmp(z,\"v\")==0 ){",
          "129:         eVerbosity++;",
          "",
          "[Added Lines]",
          "147:       if( z[0]=='v' && (n = numberOfVChar(z))>0 ){",
          "148:         eVerbosity += n;",
          "149:         continue;",
          "150:       }",
          "151:       if( strcmp(z,\"vdbe-debug\")==0 ){",
          "152:         bVdbeDebug = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "491c5bea7ab5cd98361885ce1a5fac2424beae22",
      "candidate_info": {
        "commit_hash": "491c5bea7ab5cd98361885ce1a5fac2424beae22",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/491c5bea7ab5cd98361885ce1a5fac2424beae22",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhance the \".imposter\" command in the CLI so that the first argument can be an existing WITHOUT ROWID table instead of an index.  The resulting imposter is the same table, but with columns in storage order and with all constraints removed.\n\nFossilOrigin-Name: 9dc0d34586eebf6705d9bd81494c417ac76707b8625d1ff99eda18b4ca2d8a50",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 35beaee059a6cccead4311886ca928d936f23584cf435e35e265e98feea723dc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7770:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 0, 1);",
          "7771:       goto meta_command_exit;",
          "7772:     }",
          "7775:     sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7776:     sqlite3_free(zSql);",
          "7777:     if( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7778:       tnum = sqlite3_column_int(pStmt, 0);",
          "7779:     }",
          "7780:     sqlite3_finalize(pStmt);",
          "7786:     zSql = sqlite3_mprintf(\"PRAGMA index_xinfo='%q'\", azArg[1]);",
          "7787:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7788:     sqlite3_free(zSql);",
          "",
          "[Removed Lines]",
          "7773:     zSql = sqlite3_mprintf(\"SELECT rootpage FROM sqlite_master\"",
          "7774:                            \" WHERE name='%q' AND type='index'\", azArg[1]);",
          "7781:     if( tnum==0 ){",
          "7782:       utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);",
          "7783:       rc = 1;",
          "7784:       goto meta_command_exit;",
          "7785:     }",
          "",
          "[Added Lines]",
          "7782:     zSql = sqlite3_mprintf(",
          "7783:       \"SELECT rootpage, 0 FROM sqlite_master\"",
          "7784:       \" WHERE name='%q' AND type='index'\"",
          "7785:       \"UNION ALL \"",
          "7786:       \"SELECT rootpage, 1 FROM sqlite_master\"",
          "7787:       \" WHERE name='%q' AND type='table'\"",
          "7788:       \"   AND sql LIKE '%%without%%rowid%%'\",",
          "7789:       azArg[1], azArg[1]",
          "7790:     );",
          "7795:       isWO = sqlite3_column_int(pStmt, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7799:           zCol = zLabel;",
          "7800:         }",
          "7801:       }",
          "7802:       if( zCollist==0 ){",
          "7803:         zCollist = sqlite3_mprintf(\"\\\"%w\\\"\", zCol);",
          "7804:       }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7814:       if( isWO && lenPK==0 && sqlite3_column_int(pStmt,5)==0 && zCollist ){",
          "7815:         lenPK = (int)strlen(zCollist);",
          "7816:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7806:       }",
          "7807:     }",
          "7808:     sqlite3_finalize(pStmt);",
          "7809:     zSql = sqlite3_mprintf(",
          "7812:     sqlite3_free(zCollist);",
          "7813:     rc = sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 1, tnum);",
          "7814:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "7810:           \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%s))WITHOUT ROWID\",",
          "7811:           azArg[2], zCollist, zCollist);",
          "",
          "[Added Lines]",
          "7824:     if( i==0 || tnum==0 ){",
          "7825:       utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);",
          "7826:       rc = 1;",
          "7827:       sqlite3_free(zCollist);",
          "7828:       goto meta_command_exit;",
          "7829:     }",
          "7830:     if( lenPK==0 ) lenPK = 100000;",
          "7832:           \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%.*s))WITHOUT ROWID\",",
          "7833:           azArg[2], zCollist, lenPK, zCollist);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7819:       }else{",
          "7820:         utf8_printf(stdout, \"%s;\\n\", zSql);",
          "7821:         raw_printf(stdout,",
          "7823:         );",
          "7824:       }",
          "7825:     }else{",
          "",
          "[Removed Lines]",
          "7822:            \"WARNING: writing to an imposter table will corrupt the index!\\n\"",
          "",
          "[Added Lines]",
          "7844:           \"WARNING: writing to an imposter table will corrupt the \\\"%s\\\" %s!\\n\",",
          "7845:           azArg[1], isWO ? \"table\" : \"index\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4f86f3fcaa6110aaf64cd2f5b9f878dac17974c",
      "candidate_info": {
        "commit_hash": "f4f86f3fcaa6110aaf64cd2f5b9f878dac17974c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4f86f3fcaa6110aaf64cd2f5b9f878dac17974c",
        "files": [
          "ext/rbu/rbu_common.tcl",
          "ext/rbu/rbupartial.test",
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Optimize the restarting of an RBU vacuum.\n\nFossilOrigin-Name: 82062351a62f4ccc438a2b47a22ee581bd030dec952fecd610f360a25002a5ea",
        "before_after_code_files": [
          "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl",
          "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test",
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl": [
          "File: ext/rbu/rbu_common.tcl -> ext/rbu/rbu_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: proc do_rbu_vacuum_test {tn step {statedb state.db}} {",
          "90:   forcedelete $statedb",
          "91:   if {$statedb==\"\" && $step==1} breakpoint",
          "94:     while 1 {",
          "96:       set state [rbu state]",
          "97:       check_prestep_state test.db $state",
          "98:       set rc [rbu step]",
          "99:       check_poststep_state $rc test.db $state",
          "100:       if {$rc!=\"SQLITE_OK\"} break",
          "102:     }",
          "103:     rbu close",
          "104:   }] {SQLITE_DONE}]",
          "",
          "[Removed Lines]",
          "92:   uplevel [list do_test $tn.1 [string map [list %state% $statedb] {",
          "93:     if {$step==0} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "95:       if {$step==1} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "101:       if {$step==1} { rbu close }",
          "",
          "[Added Lines]",
          "92:   uplevel [list do_test $tn.1 [string map [list %state% $statedb %step% $step] {",
          "93:     if {%step%==0} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "95:       if {%step%==1} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "101:       if {%step%==1} { rbu close }",
          "",
          "---------------"
        ],
        "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test": [
          "File: ext/rbu/rbupartial.test -> ext/rbu/rbupartial.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   set step 0",
          "82:   do_rbu_vacuum_test $tn.1.5 0",
          "83:   }]",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   do_test $tn.1.6 {",
          "85:     execsql { PRAGMA integrity_check }",
          "86:   } {ok}",
          "",
          "---------------"
        ],
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Jan 3",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # This file contains tests for the RBU module. More specifically, it",
          "13: # contains tests to ensure that the sqlite3rbu_vacuum() API works as",
          "14: # expected.",
          "15: #",
          "17: source [file join [file dirname [info script]] rbu_common.tcl]",
          "18: set testprefix rbuvacuum4",
          "20: set step 1",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE TABLE t1(a PRIMARY KEY, b, c) WITHOUT ROWID;",
          "24:   INSERT INTO t1 VALUES(1, 2, 3);",
          "25:   INSERT INTO t1 VALUES(4, 5, 6);",
          "26:   INSERT INTO t1 VALUES(7, 8, 9);",
          "27: }",
          "28: do_rbu_vacuum_test 1.1 1",
          "30: #-------------------------------------------------------------------------",
          "31: reset_db",
          "33: do_execsql_test 2.0 {",
          "34:   CREATE TABLE t1(a, b, c, PRIMARY KEY(a, b, c)) WITHOUT ROWID;",
          "35:   INSERT INTO t1 VALUES(1, 2, 3);",
          "36:   INSERT INTO t1 VALUES(4, 5, 6);",
          "37:   INSERT INTO t1 VALUES(7, 8, 9);",
          "38: }",
          "39: do_rbu_vacuum_test 2.1 1",
          "40: do_execsql_test 2.2 {",
          "41:   SELECT * FROM t1;",
          "42: } {1 2 3 4 5 6 7 8 9}",
          "44: #-------------------------------------------------------------------------",
          "45: reset_db",
          "47: do_execsql_test 3.0 {",
          "48:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "49:   CREATE INDEX i1 oN t1(b, c);",
          "50:   INSERT INTO t1 VALUES(1, 2, 3);",
          "51:   INSERT INTO t1 VALUES(4, 5, 6);",
          "52:   INSERT INTO t1 VALUES(7, 8, 9);",
          "53: }",
          "55: do_rbu_vacuum_test 3.1 1",
          "57: do_execsql_test 3.2 {",
          "58:   SELECT * FROM t1;",
          "59: } {1 2 3 4 5 6 7 8 9}",
          "61: #-------------------------------------------------------------------------",
          "62: reset_db",
          "63: do_execsql_test 4.0 {",
          "64:   CREATE TABLE x1(a, b, c, d, PRIMARY KEY(c, b)) WITHOUT ROWID;",
          "65:   INSERT INTO x1 VALUES(1, 1, 1, 1);",
          "66:   INSERT INTO x1 VALUES(1, 1, 2, 1);",
          "67:   INSERT INTO x1 VALUES(1, 2, 2, 1);",
          "69:   INSERT INTO x1 VALUES(NULL, 2, 3, NULL);",
          "70:   INSERT INTO x1 VALUES(NULL, 2, 4, NULL);",
          "71:   INSERT INTO x1 VALUES(NULL, 2, 5, NULL);",
          "73:   CREATE INDEX x1ad ON x1(d, a);",
          "74:   CREATE INDEX x1null ON x1(d, a) WHERE d>15;",
          "75: }",
          "77: do_rbu_vacuum_test 4.1.1 1",
          "79: do_execsql_test 4.2 {",
          "80:   SELECT count(*) fROM x1",
          "81: } 6",
          "83: do_rbu_vacuum_test 4.1.2 0",
          "85: #-------------------------------------------------------------------------",
          "86: reset_db",
          "87: do_execsql_test 5.0 {",
          "88:   CREATE TABLE \"a b c\"(a, \"b b\" PRIMARY KEY, \"c c\");",
          "89:   CREATE INDEX abc1 ON \"a b c\"(a, \"c c\");",
          "91:   INSERT INTO \"a b c\" VALUES(NULL, 'a', NULL);",
          "92:   INSERT INTO \"a b c\" VALUES(NULL, 'b', NULL);",
          "93:   INSERT INTO \"a b c\" VALUES(NULL, 'c', NULL);",
          "95:   INSERT INTO \"a b c\" VALUES(1, 2, 3);",
          "96:   INSERT INTO \"a b c\" VALUES(3, 9, 1);",
          "97:   INSERT INTO \"a b c\" VALUES('aaa', 'bbb', 'ccc');",
          "99:   CREATE TABLE x(a);",
          "100:   INSERT INTO x VALUES('a'), ('b'), ('d');",
          "101:   CREATE UNIQUE INDEX y ON x(a);",
          "102: }",
          "104: do_rbu_vacuum_test 5.1 1",
          "106: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:   zIn = (const char*)sqlite3_value_text(argv[0]);",
          "931:   if( zIn ){",
          "932:     if( rbuIsVacuum(p) ){",
          "934:         sqlite3_result_text(pCtx, zIn, -1, SQLITE_STATIC);",
          "935:       }",
          "936:     }else{",
          "",
          "[Removed Lines]",
          "933:       if( argc==1 || 0==sqlite3_value_int(argv[1]) ){",
          "",
          "[Added Lines]",
          "933:       assert( argc==2 );",
          "934:       if( 0==sqlite3_value_int(argv[1]) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1381:         }",
          "1383:         pIter->azTblType[iOrder] = rbuStrndup(zType, &p->rc);",
          "1385:         pIter->abNotNull[iOrder] = (u8)bNotNull || (iPk!=0);",
          "1386:         iOrder++;",
          "1387:       }",
          "",
          "[Removed Lines]",
          "1384:         pIter->abTblPk[iOrder] = (iPk!=0);",
          "",
          "[Added Lines]",
          "1385:         assert( iPk>=0 );",
          "1386:         pIter->abTblPk[iOrder] = (u8)iPk;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1416:   return zList;",
          "1417: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1427: static char *rbuObjIterGetPkList(",
          "1433: ){",
          "1434:   int iPk = 1;",
          "1435:   char *zRet = 0;",
          "1436:   const char *zSep = \"\";",
          "1437:   while( 1 ){",
          "1438:     int i;",
          "1439:     for(i=0; i<pIter->nTblCol; i++){",
          "1440:       if( (int)pIter->abTblPk[i]==iPk ){",
          "1441:         const char *zCol = pIter->azTblCol[i];",
          "1442:         zRet = rbuMPrintf(p, \"%z%s%s\\\"%w\\\"%s\", zRet, zSep, zPre, zCol, zPost);",
          "1443:         zSep = zSeparator;",
          "1444:         break;",
          "1445:       }",
          "1446:     }",
          "1447:     if( i==pIter->nTblCol ) break;",
          "1448:     iPk++;",
          "1449:   }",
          "1450:   return zRet;",
          "1451: }",
          "1472: static char *rbuVacuumTableStart(",
          "1477: ){",
          "1478:   sqlite3_stmt *pMax = 0;",
          "1479:   char *zRet = 0;",
          "1480:   if( bRowid ){",
          "1481:     p->rc = prepareFreeAndCollectError(p->dbMain, &pMax, &p->zErrmsg,",
          "1482:         sqlite3_mprintf(",
          "1483:           \"SELECT max(_rowid_) FROM \\\"%s%w\\\"\", zWrite, pIter->zTbl",
          "1484:         )",
          "1485:     );",
          "1486:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pMax) ){",
          "1487:       sqlite3_int64 iMax = sqlite3_column_int64(pMax, 0);",
          "1488:       zRet = rbuMPrintf(p, \" WHERE _rowid_ > %lld \", iMax);",
          "1489:     }",
          "1490:     rbuFinalize(p, pMax);",
          "1491:   }else{",
          "1492:     char *zOrder = rbuObjIterGetPkList(p, pIter, \"\", \", \", \" DESC\");",
          "1493:     char *zSelect = rbuObjIterGetPkList(p, pIter, \"quote(\", \"||','||\", \")\");",
          "1494:     char *zList = rbuObjIterGetPkList(p, pIter, \"\", \", \", \"\");",
          "1496:     if( p->rc==SQLITE_OK ){",
          "1497:       p->rc = prepareFreeAndCollectError(p->dbMain, &pMax, &p->zErrmsg,",
          "1498:           sqlite3_mprintf(",
          "1499:             \"SELECT %s FROM \\\"%s%w\\\" ORDER BY %s LIMIT 1\",",
          "1500:                 zSelect, zWrite, pIter->zTbl, zOrder",
          "1501:           )",
          "1502:       );",
          "1503:       if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pMax) ){",
          "1504:         const char *zVal = (const char*)sqlite3_column_text(pMax, 0);",
          "1505:         zRet = rbuMPrintf(p, \" WHERE (%s) > (%s) \", zList, zVal);",
          "1506:       }",
          "1507:       rbuFinalize(p, pMax);",
          "1508:     }",
          "1510:     sqlite3_free(zOrder);",
          "1511:     sqlite3_free(zSelect);",
          "1512:     sqlite3_free(zList);",
          "1513:   }",
          "1514:   return zRet;",
          "1515: }",
          "1539: char *rbuVacuumIndexStart(",
          "1542: ){",
          "1543:   char *zOrder = 0;",
          "1544:   char *zLhs = 0;",
          "1545:   char *zSelect = 0;",
          "1546:   char *zVector = 0;",
          "1547:   char *zRet = 0;",
          "1548:   int bFailed = 0;",
          "1550:   if( p->rc==SQLITE_OK ){",
          "1551:     const char *zSep = \"\";",
          "1552:     int iCol = 0;",
          "1553:     sqlite3_stmt *pXInfo = 0;",
          "1554:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1555:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1556:     );",
          "1557:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1558:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1559:       const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1560:       const char *zCol;",
          "1561:       if( sqlite3_column_int(pXInfo, 3) ){",
          "1562:         bFailed = 1;",
          "1563:         break;",
          "1564:       }",
          "1566:       if( iCid<0 ){",
          "1567:         if( pIter->eType==RBU_PK_IPK ){",
          "1568:           int i;",
          "1569:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1570:           assert( i<pIter->nTblCol );",
          "1571:           zCol = pIter->azTblCol[i];",
          "1572:         }else{",
          "1573:           zCol = \"_rowid_\";",
          "1574:         }",
          "1575:       }else{",
          "1576:         zCol = pIter->azTblCol[iCid];",
          "1577:       }",
          "1579:       zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1580:           zLhs, zSep, zCol, zCollate",
          "1581:       );",
          "1582:       zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1583:           zOrder, zSep, iCol, zCol, zCollate",
          "1584:       );",
          "1585:       zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1586:           zSelect, zSep, iCol, zCol",
          "1587:       );",
          "1588:       zSep = \", \";",
          "1589:       iCol++;",
          "1590:     }",
          "1591:     rbuFinalize(p, pXInfo);",
          "1592:   }",
          "1593:   if( bFailed ) goto index_start_out;",
          "1595:   if( p->rc==SQLITE_OK ){",
          "1596:     int iCol;",
          "1597:     sqlite3_stmt *pSel = 0;",
          "1599:     if( p->rc==SQLITE_OK ){",
          "1600:       p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1601:           sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1602:             zSelect, pIter->zTbl, zOrder",
          "1603:           )",
          "1604:       );",
          "1605:     }",
          "1606:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSel) ){",
          "1607:       const char *zSep = \"\";",
          "1608:       for(iCol=0; iCol<pIter->nCol; iCol++){",
          "1609:         const char *zQuoted = (const char*)sqlite3_column_text(pSel, iCol);",
          "1610:         if( zQuoted[0]=='N' ){",
          "1611:           bFailed = 1;",
          "1612:           break;",
          "1613:         }",
          "1614:         zVector = rbuMPrintf(p, \"%z%s%s\", zVector, zSep, zQuoted);",
          "1615:         zSep = \", \";",
          "1616:       }",
          "1618:       if( !bFailed ){",
          "1619:         zRet = rbuMPrintf(p, \"(%s) > (%s)\", zLhs, zVector);",
          "1620:       }",
          "1621:     }",
          "1622:     rbuFinalize(p, pSel);",
          "1623:   }",
          "1625:  index_start_out:",
          "1626:   sqlite3_free(zOrder);",
          "1627:   sqlite3_free(zSelect);",
          "1628:   sqlite3_free(zVector);",
          "1629:   sqlite3_free(zLhs);",
          "1630:   return zRet;",
          "1631: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2092:       if( p->rc==SQLITE_OK ){",
          "2093:         char *zSql;",
          "2094:         if( rbuIsVacuum(p) ){",
          "2095:           zSql = sqlite3_mprintf(",
          "2097:               zCollist,",
          "2098:               pIter->zDataTbl,",
          "2100:           );",
          "2101:         }else",
          "2103:         if( pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_NONE ){",
          "",
          "[Removed Lines]",
          "2096:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s ORDER BY %s%s\",",
          "2099:               zPart, zCollist, zLimit",
          "",
          "[Added Lines]",
          "2309:           char *zStart = 0;",
          "2310:           if( nOffset ){",
          "2311:             zStart = rbuVacuumIndexStart(p, pIter);",
          "2312:             if( zStart ){",
          "2313:               sqlite3_free(zLimit);",
          "2314:               zLimit = 0;",
          "2315:             }",
          "2316:           }",
          "2319:               \"SELECT %s, 0 AS rbu_control FROM '%q' %s %s %s ORDER BY %s%s\",",
          "2322:               zPart,",
          "2323:               (zStart ? (zPart ? \"AND\" : \"WHERE\") : \"\"), zStart,",
          "2324:               zCollist, zLimit",
          "2326:           sqlite3_free(zStart);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2120:               zCollist, zLimit",
          "2121:           );",
          "2122:         }",
          "2124:       }",
          "2126:       sqlite3_free(zImposterCols);",
          "",
          "[Removed Lines]",
          "2123:         p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz, zSql);",
          "",
          "[Added Lines]",
          "2349:         if( p->rc==SQLITE_OK ){",
          "2350:           p->rc = prepareFreeAndCollectError(p->dbRbu,&pIter->pSelect,pz,zSql);",
          "2351:         }else{",
          "2352:           sqlite3_free(zSql);",
          "2353:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2221:       if( p->rc==SQLITE_OK ){",
          "2222:         const char *zRbuRowid = \"\";",
          "2223:         if( bRbuRowid ){",
          "2224:           zRbuRowid = rbuIsVacuum(p) ? \",_rowid_ \" : \",rbu_rowid\";",
          "2225:         }",
          "2235:       }",
          "2237:       sqlite3_free(zWhere);",
          "",
          "[Removed Lines]",
          "2226:         p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz,",
          "2227:             sqlite3_mprintf(",
          "2228:               \"SELECT %s,%s rbu_control%s FROM '%q'%s\",",
          "2229:               zCollist,",
          "2230:               (rbuIsVacuum(p) ? \"0 AS \" : \"\"),",
          "2231:               zRbuRowid,",
          "2232:               pIter->zDataTbl, zLimit",
          "2233:             )",
          "2234:         );",
          "",
          "[Added Lines]",
          "2453:         char *zStart = 0;",
          "2454:         char *zOrder = 0;",
          "2459:         if( rbuIsVacuum(p) ){",
          "2460:           if( nOffset ){",
          "2461:             zStart = rbuVacuumTableStart(p, pIter, bRbuRowid, zWrite);",
          "2462:             if( zStart ){",
          "2463:               sqlite3_free(zLimit);",
          "2464:               zLimit = 0;",
          "2465:             }",
          "2466:           }",
          "2467:           if( bRbuRowid ){",
          "2468:             zOrder = rbuMPrintf(p, \"_rowid_\");",
          "2469:           }else{",
          "2470:             zOrder = rbuObjIterGetPkList(p, pIter, \"\", \", \", \"\");",
          "2471:           }",
          "2472:         }",
          "2474:         if( p->rc==SQLITE_OK ){",
          "2475:           p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz,",
          "2476:               sqlite3_mprintf(",
          "2477:                 \"SELECT %s,%s rbu_control%s FROM '%q'%s %s %s %s\",",
          "2478:                 zCollist,",
          "2479:                 (rbuIsVacuum(p) ? \"0 AS \" : \"\"),",
          "2480:                 zRbuRowid,",
          "2481:                 pIter->zDataTbl, (zStart ? zStart : \"\"),",
          "2482:                 (zOrder ? \"ORDER BY\" : \"\"), zOrder,",
          "2483:                 zLimit",
          "2484:               )",
          "2485:           );",
          "2486:         }",
          "2487:         sqlite3_free(zStart);",
          "2488:         sqlite3_free(zOrder);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 91f701d39852ef1ddb29d1527d1520867c5efea110333315c55d8b08084384e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}