{
  "cve_id": "CVE-2014-7831",
  "cve_desc": "lib/classes/grades_external.php in Moodle 2.7.x before 2.7.3 does not consider the moodle/grade:viewhidden capability before displaying hidden grades, which allows remote authenticated users to obtain sensitive information by leveraging the student role to access the get_grades web service.",
  "repo": "moodle/moodle",
  "patch_hash": "a0095e5a893190ec28f63a89deba7fd89ad1839a",
  "patch_info": {
    "commit_hash": "a0095e5a893190ec28f63a89deba7fd89ad1839a",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/a0095e5a893190ec28f63a89deba7fd89ad1839a",
    "files": [
      "lib/classes/grades_external.php",
      "lib/db/services.php",
      "lib/tests/grades_externallib_test.php"
    ],
    "message": "MDL-47766 web services: get_grades exposes hidden grades to students",
    "before_after_code_files": [
      "lib/classes/grades_external.php||lib/classes/grades_external.php",
      "lib/db/services.php||lib/db/services.php",
      "lib/tests/grades_externallib_test.php||lib/tests/grades_externallib_test.php"
    ]
  },
  "patch_diff": {
    "lib/classes/grades_external.php||lib/classes/grades_external.php": [
      "File: lib/classes/grades_external.php -> lib/classes/grades_external.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "86:             throw new moodle_exception('errorcoursecontextnotvalid' , 'webservice', '', $exceptionparam);",
      "87:         }",
      "89:         $course = $DB->get_record('course', array('id' => $params['courseid']), '*', MUST_EXIST);",
      "91:         $access = false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91:         require_capability('moodle/grade:viewhidden', $coursecontext);",
      "",
      "---------------"
    ],
    "lib/db/services.php||lib/db/services.php": [
      "File: lib/db/services.php -> lib/db/services.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:     'core_grades_get_grades' => array(",
      "105:         'classname'     => 'core_grades_external',",
      "106:         'methodname'    => 'get_grades',",
      "108:         'type'          => 'read',",
      "110:     ),",
      "112:     'core_grades_update_grades' => array(",
      "",
      "[Removed Lines]",
      "107:         'description'   => 'Returns grade item details and optionally student grades.',",
      "109:         'capabilities'  => 'moodle/grade:view, moodle/grade:viewall',",
      "",
      "[Added Lines]",
      "107:         'description'   => 'Returns student course total grade and grades for activities.",
      "108:                                 This function does not return category or manual items.",
      "109:                                 This function is suitable for managers or teachers not students.',",
      "111:         'capabilities'  => 'moodle/grade:view, moodle/grade:viewall, moodle/grade:viewhidden',",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "962:             'mod_assign_reveal_identities',",
      "963:             'message_airnotifier_is_system_configured',",
      "964:             'message_airnotifier_are_notification_preferences_configured',",
      "966:             'core_grades_update_grades',",
      "967:             'mod_forum_get_forums_by_courses',",
      "968:             'mod_forum_get_forum_discussions_paginated',",
      "",
      "[Removed Lines]",
      "965:             'core_grades_get_grades',",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "lib/tests/grades_externallib_test.php||lib/tests/grades_externallib_test.php": [
      "File: lib/tests/grades_externallib_test.php -> lib/tests/grades_externallib_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:             $this->load_test_data($assignmentname, $student1rawgrade, $student2rawgrade);",
      "151:         $assigmentcm = get_coursemodule_from_id('assign', $assignment->cmid, 0, false, MUST_EXIST);",
      "155:         $grades = core_grades_external::get_grades(",
      "156:             $course->id,",
      "157:             'mod_assign',",
      "",
      "[Removed Lines]",
      "154:         $this->setUser($student1);",
      "",
      "[Added Lines]",
      "154:         $this->setUser($teacher);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "177:         $this->assertEquals($outcome['name'], 'Team work');",
      "178:         $this->assertEquals(0, $this->get_outcome_student_grade($grades, $assigmentcm->id, $student1->id));",
      "181:         try {",
      "182:             $grades = core_grades_external::get_grades(",
      "183:                 $course->id,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:         $grades = core_grades_external::get_grades(",
      "182:             $course->id,",
      "183:             null,",
      "184:             null,",
      "185:             array($student1->id, $student2->id)",
      "186:         );",
      "187:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
      "188:         $this->assertTrue(count($grades['items']) == 2);",
      "189:         $this->assertTrue(count($grades['items'][0]['grades']) == 2);",
      "190:         $this->assertTrue(count($grades['items'][1]['grades']) == 2);",
      "193:         $this->setUser($student1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "190:             $this->assertTrue(true);",
      "191:         }",
      "194:         $this->setUser($parent);",
      "205:         try {",
      "",
      "[Removed Lines]",
      "195:         $grades = core_grades_external::get_grades(",
      "196:             $course->id,",
      "197:             'mod_assign',",
      "198:             $assigmentcm->id,",
      "199:             array($student1->id)",
      "200:         );",
      "201:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
      "202:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigmentcm->id, $student1->id));",
      "",
      "[Added Lines]",
      "208:         try {",
      "209:             $grades = core_grades_external::get_grades(",
      "210:                 $course->id,",
      "211:                 'mod_assign',",
      "212:                 $assigmentcm->id,",
      "213:                 array($student1->id)",
      "214:             );",
      "215:             $this->fail('moodle_exception expected');",
      "216:         } catch (moodle_exception $ex) {",
      "217:             $this->assertTrue(true);",
      "218:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "294:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id);",
      "295:         $this->assertEquals($grades->items[0]->hidden, 1);",
      "309:         $this->setUser($teacher);",
      "310:         $grades = core_grades_external::get_grades(",
      "",
      "[Removed Lines]",
      "298:         $this->setUser($student1);",
      "299:         $grades = core_grades_external::get_grades(",
      "300:             $course->id,",
      "301:             'mod_assign',",
      "302:             $assigmentcm->id,",
      "303:             array($student1->id)",
      "304:         );",
      "305:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
      "306:         $this->assertEquals(null, $this->get_activity($grades, $assigmentcm->id));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "198e802f9deaf17ce9425b46a591127e9e8506bd",
      "candidate_info": {
        "commit_hash": "198e802f9deaf17ce9425b46a591127e9e8506bd",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/198e802f9deaf17ce9425b46a591127e9e8506bd",
        "files": [
          "grade/externallib.php",
          "grade/tests/externallib_grades_test.php",
          "grade/upgrade.txt",
          "lib/db/services.php",
          "lib/grade/externallib.php",
          "lib/grade/tests/externallib_test.php",
          "lib/gradelib.php"
        ],
        "message": "MDL-30085 core_grades functions moved to correct location",
        "before_after_code_files": [
          "grade/externallib.php||grade/externallib.php",
          "lib/grade/tests/externallib_test.php||grade/tests/externallib_grades_test.php",
          "lib/db/services.php||lib/db/services.php",
          "lib/grade/externallib.php||lib/grade/externallib.php",
          "lib/gradelib.php||lib/gradelib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/services.php||lib/db/services.php"
          ],
          "candidate": [
            "lib/db/services.php||lib/db/services.php"
          ]
        }
      },
      "candidate_diff": {
        "grade/externallib.php||grade/externallib.php": [
          "File: grade/externallib.php -> grade/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     }",
          "51: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: class core_grades_external extends external_api {",
          "69:     public static function get_grades_parameters() {",
          "70:         return new external_function_parameters(",
          "71:             array(",
          "72:                 'courseid' => new external_value(PARAM_INT, 'id of course'),",
          "73:                 'component' => new external_value(",
          "74:                     PARAM_COMPONENT, 'A component, for example mod_forum or mod_quiz', VALUE_DEFAULT, ''),",
          "75:                 'activityid' => new external_value(PARAM_INT, 'The activity ID', VALUE_DEFAULT, null),",
          "76:                 'userids' => new external_multiple_structure(",
          "77:                     new external_value(PARAM_INT, 'user ID'),",
          "78:                     'An array of user IDs, leave empty to just retrieve grade item information', VALUE_DEFAULT, array()",
          "79:                 )",
          "80:             )",
          "81:         );",
          "82:     }",
          "94:     public static function get_grades($courseid, $component = null, $activityid = null, $userids = array()) {",
          "95:         global $CFG, $USER, $DB;",
          "96:         require_once(\"$CFG->libdir/gradelib.php\");",
          "98:         $params = self::validate_parameters(self::get_grades_parameters(),",
          "99:             array('courseid' => $courseid, 'component' => $component, 'activityid' => $activityid, 'userids' => $userids));",
          "101:         $coursecontext = context_course::instance($params['courseid']);",
          "103:         try {",
          "104:             self::validate_context($coursecontext);",
          "105:         } catch (Exception $e) {",
          "106:             $exceptionparam = new stdClass();",
          "107:             $exceptionparam->message = $e->getMessage();",
          "108:             $exceptionparam->courseid = $params['courseid'];",
          "109:             throw new moodle_exception('errorcoursecontextnotvalid' , 'webservice', '', $exceptionparam);",
          "110:         }",
          "112:         $course = $DB->get_record('course', array('id' => $params['courseid']), '*', MUST_EXIST);",
          "114:         $access = false;",
          "115:         if (has_capability('moodle/grade:viewall', $coursecontext)) {",
          "117:             $access = true;",
          "119:         } else if ($course->showgrades && count($params['userids']) == 1) {",
          "122:             if ($params['userids'][0] == $USER->id and has_capability('moodle/grade:view', $coursecontext)) {",
          "124:                 $access = true;",
          "126:             } else if (has_capability('moodle/grade:viewall', context_user::instance($params['userids'][0]))) {",
          "128:                 $access = true;",
          "129:             }",
          "130:         }",
          "132:         if (!$access) {",
          "133:             throw new moodle_exception('nopermissiontoviewgrades', 'error');",
          "134:         }",
          "136:         $itemtype = null;",
          "137:         $itemmodule = null;",
          "138:         if (!empty($params['component'])) {",
          "139:             list($itemtype, $itemmodule) = normalize_component($params['component']);",
          "140:         }",
          "142:         $cm = null;",
          "143:         if (!empty($itemmodule) && !empty($activityid)) {",
          "144:             if (! $cm = get_coursemodule_from_id($itemmodule, $activityid)) {",
          "145:                 throw new moodle_exception('invalidcoursemodule');",
          "146:             }",
          "147:         }",
          "149:         $cminstanceid = null;",
          "150:         if (!empty($cm)) {",
          "151:             $cminstanceid = $cm->instance;",
          "152:         }",
          "153:         $grades = grade_get_grades($params['courseid'], $itemtype, $itemmodule, $cminstanceid, $params['userids']);",
          "155:         $acitivityinstances = null;",
          "156:         if (empty($cm)) {",
          "158:             $modinfo = get_fast_modinfo($params['courseid']);",
          "159:             $acitivityinstances = $modinfo->get_instances();",
          "160:         }",
          "162:         foreach ($grades->items as $gradeitem) {",
          "163:             if (!empty($cm)) {",
          "165:                 $modulecm = $cm;",
          "166:             } else if (!empty($gradeitem->itemmodule)) {",
          "167:                 $modulecm = $acitivityinstances[$gradeitem->itemmodule][$gradeitem->iteminstance];",
          "168:             } else {",
          "170:                 continue;",
          "171:             }",
          "174:             foreach ($gradeitem->grades as $studentgrade) {",
          "175:                 if (!empty($studentgrade->feedback)) {",
          "176:                     list($studentgrade->feedback, $categoryinfo->feedbackformat) =",
          "177:                         external_format_text($studentgrade->feedback, $studentgrade->feedbackformat,",
          "178:                         $modulecm->id, $params['component'], 'feedback', null);",
          "179:                 }",
          "180:             }",
          "181:         }",
          "185:         $gradesarray = array();",
          "186:         $canviewhidden = has_capability('moodle/grade:viewhidden', context_course::instance($params['courseid']));",
          "188:         $gradesarray['items'] = array();",
          "189:         foreach ($grades->items as $gradeitem) {",
          "191:             $gradeiteminstance = self::get_grade_item(",
          "192:                 $course->id, $gradeitem->itemtype, $gradeitem->itemmodule, $gradeitem->iteminstance, 0);",
          "193:             if (!$canviewhidden && $gradeiteminstance->is_hidden()) {",
          "194:                 continue;",
          "195:             }",
          "196:             $gradeitemarray = (array)$gradeitem;",
          "197:             $gradeitemarray['grades'] = array();",
          "199:             if (!empty($gradeitem->grades)) {",
          "200:                 foreach ($gradeitem->grades as $studentid => $studentgrade) {",
          "201:                     $gradegradeinstance = grade_grade::fetch(",
          "202:                         array(",
          "203:                             'userid' => $studentid,",
          "204:                             'itemid' => $gradeiteminstance->id",
          "205:                         )",
          "206:                     );",
          "207:                     if (!$canviewhidden && $gradegradeinstance->is_hidden()) {",
          "208:                         continue;",
          "209:                     }",
          "210:                     $gradeitemarray['grades'][$studentid] = (array)$studentgrade;",
          "212:                     $gradeitemarray['grades'][$studentid]['userid'] = $studentid;",
          "213:                 }",
          "214:             }",
          "217:             $modulecm = $cm;",
          "218:             if (empty($modulecm) && !empty($gradeiteminstance->itemmodule)) {",
          "219:                 $modulecm = $acitivityinstances[$gradeiteminstance->itemmodule][$gradeiteminstance->iteminstance];",
          "220:             }",
          "221:             if ($gradeiteminstance->itemtype == 'course') {",
          "222:                 $gradesarray['items']['course'] = $gradeitemarray;",
          "223:                 $gradesarray['items']['course']['activityid'] = 'course';",
          "224:             } else {",
          "225:                 $gradesarray['items'][$modulecm->id] = $gradeitemarray;",
          "227:                 $gradesarray['items'][$modulecm->id]['activityid'] = $modulecm->id;",
          "228:             }",
          "229:         }",
          "231:         $gradesarray['outcomes'] = array();",
          "232:         foreach ($grades->outcomes as $outcome) {",
          "233:             $modulecm = $cm;",
          "234:             if (empty($modulecm)) {",
          "235:                 $modulecm = $acitivityinstances[$outcome->itemmodule][$outcome->iteminstance];",
          "236:             }",
          "237:             $gradesarray['outcomes'][$modulecm->id] = (array)$outcome;",
          "238:             $gradesarray['outcomes'][$modulecm->id]['activityid'] = $modulecm->id;",
          "240:             $gradesarray['outcomes'][$modulecm->id]['grades'] = array();",
          "241:             if (!empty($outcome->grades)) {",
          "242:                 foreach ($outcome->grades as $studentid => $studentgrade) {",
          "243:                     if (!$canviewhidden) {",
          "245:                         $gradeiteminstance = self::get_grade_item(",
          "246:                             $course->id, $outcome->itemtype, $outcome->itemmodule, $outcome->iteminstance, $outcome->itemnumber);",
          "247:                         $gradegradeinstance = grade_grade::fetch(",
          "248:                             array(",
          "249:                                 'userid' => $studentid,",
          "250:                                 'itemid' => $gradeiteminstance->id",
          "251:                             )",
          "252:                         );",
          "254:                         if (!empty($gradegradeinstance ) && $gradegradeinstance->is_hidden()) {",
          "255:                             continue;",
          "256:                         }",
          "257:                     }",
          "258:                     $gradesarray['outcomes'][$modulecm->id]['grades'][$studentid] = (array)$studentgrade;",
          "261:                     $gradesarray['outcomes'][$modulecm->id]['grades'][$studentid]['userid'] = $studentid;",
          "262:                 }",
          "263:             }",
          "264:         }",
          "266:         return $gradesarray;",
          "267:     }",
          "278:     private static function get_grade_item($courseid, $itemtype, $itemmodule = null, $iteminstance = null, $itemnumber = null) {",
          "279:         $gradeiteminstance = null;",
          "280:         if ($itemtype == 'course') {",
          "281:             $gradeiteminstance = grade_item::fetch(array('courseid' => $courseid, 'itemtype' => $itemtype));",
          "282:         } else {",
          "283:             $gradeiteminstance = grade_item::fetch(",
          "284:                 array('courseid' => $courseid, 'itemtype' => $itemtype,",
          "285:                     'itemmodule' => $itemmodule, 'iteminstance' => $iteminstance, 'itemnumber' => $itemnumber));",
          "286:         }",
          "287:         return $gradeiteminstance;",
          "288:     }",
          "296:     public static function get_grades_returns() {",
          "297:         return new external_single_structure(",
          "298:             array(",
          "299:                 'items'  => new external_multiple_structure(",
          "300:                     new external_single_structure(",
          "301:                         array(",
          "302:                             'activityid' => new external_value(",
          "303:                                 PARAM_ALPHANUM, 'The ID of the activity or \"course\" for the course grade item'),",
          "304:                             'itemnumber'  => new external_value(PARAM_INT, 'Will be 0 unless the module has multiple grades'),",
          "305:                             'scaleid' => new external_value(PARAM_INT, 'The ID of the custom scale or 0'),",
          "306:                             'name' => new external_value(PARAM_RAW, 'The module name'),",
          "307:                             'grademin' => new external_value(PARAM_FLOAT, 'Minimum grade'),",
          "308:                             'grademax' => new external_value(PARAM_FLOAT, 'Maximum grade'),",
          "309:                             'gradepass' => new external_value(PARAM_FLOAT, 'The passing grade threshold'),",
          "310:                             'locked' => new external_value(PARAM_BOOL, 'Is the grade item locked?'),",
          "311:                             'hidden' => new external_value(PARAM_BOOL, 'Is the grade item hidden?'),",
          "312:                             'grades' => new external_multiple_structure(",
          "313:                                 new external_single_structure(",
          "314:                                     array(",
          "315:                                         'userid' => new external_value(",
          "316:                                             PARAM_INT, 'Student ID'),",
          "317:                                         'grade' => new external_value(",
          "318:                                             PARAM_FLOAT, 'Student grade'),",
          "319:                                         'locked' => new external_value(",
          "320:                                             PARAM_BOOL, 'Is the student\\'s grade locked?'),",
          "321:                                         'hidden' => new external_value(",
          "322:                                             PARAM_BOOL, 'Is the student\\'s grade hidden?'),",
          "323:                                         'overridden' => new external_value(",
          "324:                                             PARAM_BOOL, 'Is the student\\'s grade overridden?'),",
          "325:                                         'feedback' => new external_value(",
          "326:                                             PARAM_RAW, 'Feedback from the grader'),",
          "327:                                         'feedbackformat' => new external_value(",
          "328:                                             PARAM_INT, 'The format of the feedback'),",
          "329:                                         'usermodified' => new external_value(",
          "330:                                             PARAM_INT, 'The ID of the last user to modify this student grade'),",
          "331:                                         'datesubmitted' => new external_value(",
          "332:                                             PARAM_INT, 'A timestamp indicating when the student submitted the activity'),",
          "333:                                         'dategraded' => new external_value(",
          "334:                                             PARAM_INT, 'A timestamp indicating when the assignment was grades'),",
          "335:                                         'str_grade' => new external_value(",
          "336:                                             PARAM_RAW, 'A string representation of the grade'),",
          "337:                                         'str_long_grade' => new external_value(",
          "338:                                             PARAM_RAW, 'A nicely formatted string representation of the grade'),",
          "339:                                         'str_feedback' => new external_value(",
          "340:                                             PARAM_TEXT, 'A string representation of the feedback from the grader'),",
          "341:                                     )",
          "342:                                 )",
          "343:                             ),",
          "344:                         )",
          "345:                     )",
          "346:                 ),",
          "347:                 'outcomes'  => new external_multiple_structure(",
          "348:                     new external_single_structure(",
          "349:                         array(",
          "350:                             'activityid' => new external_value(",
          "351:                                 PARAM_ALPHANUM, 'The ID of the activity or \"course\" for the course grade item'),",
          "352:                             'itemnumber'  => new external_value(PARAM_INT, 'Will be 0 unless the module has multiple grades'),",
          "353:                             'scaleid' => new external_value(PARAM_INT, 'The ID of the custom scale or 0'),",
          "354:                             'name' => new external_value(PARAM_RAW, 'The module name'),",
          "355:                             'locked' => new external_value(PARAM_BOOL, 'Is the grade item locked?'),",
          "356:                             'hidden' => new external_value(PARAM_BOOL, 'Is the grade item hidden?'),",
          "357:                             'grades' => new external_multiple_structure(",
          "358:                                 new external_single_structure(",
          "359:                                     array(",
          "360:                                         'userid' => new external_value(",
          "361:                                             PARAM_INT, 'Student ID'),",
          "362:                                         'grade' => new external_value(",
          "363:                                             PARAM_FLOAT, 'Student grade'),",
          "364:                                         'locked' => new external_value(",
          "365:                                             PARAM_BOOL, 'Is the student\\'s grade locked?'),",
          "366:                                         'hidden' => new external_value(",
          "367:                                             PARAM_BOOL, 'Is the student\\'s grade hidden?'),",
          "368:                                         'feedback' => new external_value(",
          "369:                                             PARAM_RAW, 'Feedback from the grader'),",
          "370:                                         'feedbackformat' => new external_value(",
          "371:                                             PARAM_INT, 'The feedback format'),",
          "372:                                         'usermodified' => new external_value(",
          "373:                                             PARAM_INT, 'The ID of the last user to modify this student grade'),",
          "374:                                         'str_grade' => new external_value(",
          "375:                                             PARAM_RAW, 'A string representation of the grade'),",
          "376:                                         'str_feedback' => new external_value(",
          "377:                                             PARAM_TEXT, 'A string representation of the feedback from the grader'),",
          "378:                                     )",
          "379:                                 )",
          "380:                             ),",
          "381:                         )",
          "382:                     ), 'An array of outcomes associated with the grade items', VALUE_OPTIONAL",
          "383:                 )",
          "384:             )",
          "385:         );",
          "387:     }",
          "395:     public static function update_grades_parameters() {",
          "396:         return new external_function_parameters(",
          "397:             array(",
          "398:                 'source' => new external_value(PARAM_TEXT, 'The source of the grade update'),",
          "399:                 'courseid' => new external_value(PARAM_INT, 'id of course'),",
          "400:                 'component' => new external_value(PARAM_COMPONENT, 'A component, for example mod_forum or mod_quiz'),",
          "401:                 'activityid' => new external_value(PARAM_INT, 'The activity ID'),",
          "402:                 'itemnumber' => new external_value(",
          "403:                     PARAM_INT, 'grade item ID number for modules that have multiple grades. Typically this is 0.'),",
          "404:                 'grades' => new external_multiple_structure(",
          "405:                     new external_single_structure(",
          "406:                         array(",
          "407:                             'studentid' => new external_value(PARAM_INT, 'Student ID'),",
          "408:                             'grade' => new external_value(PARAM_FLOAT, 'Student grade'),",
          "409:                             'str_feedback' => new external_value(",
          "410:                                 PARAM_TEXT, 'A string representation of the feedback from the grader', VALUE_OPTIONAL),",
          "411:                         )",
          "412:                 ), 'Any student grades to alter', VALUE_OPTIONAL),",
          "413:                 'itemdetails' => new external_single_structure(",
          "414:                     array(",
          "415:                         'itemname' => new external_value(",
          "416:                             PARAM_ALPHANUMEXT, 'The grade item name', VALUE_OPTIONAL),",
          "417:                         'idnumber' => new external_value(",
          "418:                             PARAM_INT, 'Arbitrary ID provided by the module responsible for the grade item', VALUE_OPTIONAL),",
          "419:                         'gradetype' => new external_value(",
          "420:                             PARAM_INT, 'The type of grade (0 = none, 1 = value, 2 = scale, 3 = text)', VALUE_OPTIONAL),",
          "421:                         'grademax' => new external_value(",
          "422:                             PARAM_FLOAT, 'Maximum grade allowed', VALUE_OPTIONAL),",
          "423:                         'grademin' => new external_value(",
          "424:                             PARAM_FLOAT, 'Minimum grade allowed', VALUE_OPTIONAL),",
          "425:                         'scaleid' => new external_value(",
          "426:                             PARAM_INT, 'The ID of the custom scale being is used', VALUE_OPTIONAL),",
          "427:                         'multfactor' => new external_value(",
          "428:                             PARAM_FLOAT, 'Multiply all grades by this number', VALUE_OPTIONAL),",
          "429:                         'plusfactor' => new external_value(",
          "430:                             PARAM_FLOAT, 'Add this to all grades', VALUE_OPTIONAL),",
          "431:                         'deleted' => new external_value(",
          "432:                             PARAM_BOOL, 'True if the grade item should be deleted', VALUE_OPTIONAL),",
          "433:                         'hidden' => new external_value(",
          "434:                             PARAM_BOOL, 'True if the grade item is hidden', VALUE_OPTIONAL),",
          "435:                     ), 'Any grade item settings to alter', VALUE_OPTIONAL",
          "436:                 )",
          "437:             )",
          "438:         );",
          "439:     }",
          "454:     public static function update_grades($source, $courseid, $component, $activityid,",
          "455:         $itemnumber, $grades = array(), $itemdetails = array()) {",
          "456:         global $CFG;",
          "458:         require_once(\"$CFG->libdir/gradelib.php\");",
          "460:         $params = self::validate_parameters(",
          "461:             self::update_grades_parameters(),",
          "462:             array(",
          "463:                 'source' => $source,",
          "464:                 'courseid' => $courseid,",
          "465:                 'component' => $component,",
          "466:                 'activityid' => $activityid,",
          "467:                 'itemnumber' => $itemnumber,",
          "468:                 'grades' => $grades,",
          "469:                 'itemdetails' => $itemdetails",
          "470:             )",
          "471:         );",
          "473:         list($itemtype, $itemmodule) = normalize_component($params['component']);",
          "475:         if (! $cm = get_coursemodule_from_id($itemmodule, $activityid)) {",
          "476:             throw new moodle_exception('invalidcoursemodule');",
          "477:         }",
          "478:         $iteminstance = $cm->instance;",
          "480:         $coursecontext = context_course::instance($params['courseid']);",
          "482:         try {",
          "483:             self::validate_context($coursecontext);",
          "484:         } catch (Exception $e) {",
          "485:             $exceptionparam = new stdClass();",
          "486:             $exceptionparam->message = $e->getMessage();",
          "487:             $exceptionparam->courseid = $params['courseid'];",
          "488:             throw new moodle_exception('errorcoursecontextnotvalid' , 'webservice', '', $exceptionparam);",
          "489:         }",
          "491:         $hidinggrades = false;",
          "492:         $editinggradeitem = false;",
          "493:         $editinggrades = false;",
          "495:         $gradestructure = array();",
          "496:         foreach ($grades as $grade) {",
          "497:             $editinggrades = true;",
          "498:             $gradestructure[ $grade['studentid'] ] = array('userid' => $grade['studentid'], 'rawgrade' => $grade['grade']);",
          "499:         }",
          "500:         if (!empty($params['itemdetails'])) {",
          "501:             if (isset($params['itemdetails']['hidden'])) {",
          "502:                 $hidinggrades = true;",
          "503:             } else {",
          "504:                 $editinggradeitem = true;",
          "505:             }",
          "506:         }",
          "508:         if ($editinggradeitem && !has_capability('moodle/grade:manage', $coursecontext)) {",
          "509:             throw new moodle_exception('nopermissiontoviewgrades', 'error', '', null,",
          "510:                 'moodle/grade:manage required to edit grade information');",
          "511:         }",
          "512:         if ($hidinggrades && !has_capability('moodle/grade:hide', $coursecontext) &&",
          "513:             !has_capability('moodle/grade:hide', $coursecontext)) {",
          "514:             throw new moodle_exception('nopermissiontoviewgrades', 'error', '', null,",
          "515:                 'moodle/grade:hide required to hide grade items');",
          "516:         }",
          "517:         if ($editinggrades && !has_capability('moodle/grade:edit', $coursecontext)) {",
          "518:             throw new moodle_exception('nopermissiontoviewgrades', 'error', '', null,",
          "519:                 'moodle/grade:edit required to edit grades');",
          "520:         }",
          "522:         return grade_update($params['source'], $params['courseid'], $itemtype,",
          "523:             $itemmodule, $iteminstance, $itemnumber, $gradestructure, $params['itemdetails']);",
          "524:     }",
          "532:     public static function update_grades_returns() {",
          "533:         return new external_single_structure(",
          "534:             array (",
          "535:                 'result' => new external_value(",
          "536:                     PARAM_INT,",
          "537:                     'A value like ' . GRADE_UPDATE_OK . ' => OK, ' . GRADE_UPDATE_FAILED . ' => FAILED",
          "538:                     as defined in lib/grade/constants.php')",
          "539:             )",
          "540:         );",
          "541:     }",
          "542: }",
          "",
          "---------------"
        ],
        "lib/grade/tests/externallib_test.php||grade/tests/externallib_grades_test.php": [
          "File: lib/grade/tests/externallib_test.php -> grade/tests/externallib_grades_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: global $CFG;",
          "31: require_once($CFG->dirroot . '/webservice/tests/helpers.php');",
          "36:     protected function load_test_data($assignmentname, $student1rawgrade, $student2rawgrade) {",
          "37:         global $DB;",
          "",
          "[Removed Lines]",
          "32: require_once($CFG->libdir . '/grade/externallib.php');",
          "34: class core_grade_external_testcase extends externallib_advanced_testcase {",
          "",
          "[Added Lines]",
          "32: require_once($CFG->dirroot . '/grade/externallib.php');",
          "42: class core_grades_external_testcase extends externallib_advanced_testcase {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:         $course = $this->getDataGenerator()->create_course();",
          "41:         $coursecontext = context_course::instance($course->id);",
          "46:         $this->getDataGenerator()->enrol_user($student1->id, $course->id, $studentrole->id);",
          "49:         $this->getDataGenerator()->enrol_user($student2->id, $course->id, $studentrole->id);",
          "52:         $teacher = $this->getDataGenerator()->create_user();",
          "53:         $this->getDataGenerator()->enrol_user($teacher->id, $course->id, $teacherrole->id);",
          "",
          "[Removed Lines]",
          "43:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "45:         $student1 = $this->getDataGenerator()->create_user();",
          "48:         $student2 = $this->getDataGenerator()->create_user();",
          "51:         $teacherrole = $DB->get_record('role', array('shortname'=>'editingteacher'));",
          "",
          "[Added Lines]",
          "59:         $studentrole = $DB->get_record('role', array('shortname' => 'student'));",
          "61:         $student1 = $this->getDataGenerator()->create_user();",
          "64:         $student2 = $this->getDataGenerator()->create_user();",
          "67:         $teacherrole = $DB->get_record('role', array('shortname' => 'editingteacher'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:         assign_grade_item_update($assignment, $studentgrades);",
          "82:         $data = new stdClass();",
          "83:         $data->courseid = $course->id;",
          "84:         $data->fullname = 'Team work';",
          "85:         $data->shortname = 'Team work';",
          "87:         $outcome = new grade_outcome($data, false);",
          "88:         $outcome->insert();",
          "105:             array(",
          "106:                 'itemtype' => 'mod',",
          "107:                 'itemmodule' => 'assign',",
          "",
          "[Removed Lines]",
          "73:         $grade_scale = new grade_scale();",
          "74:         $grade_scale->name        = 'unittestscale3';",
          "75:         $grade_scale->courseid    = $course->id;",
          "76:         $grade_scale->userid      = 0;",
          "77:         $grade_scale->scale       = 'Distinction, Very Good, Good, Pass, Fail';",
          "78:         $grade_scale->description = 'This scale is used to mark standard assignments.';",
          "79:         $grade_scale->insert();",
          "86:         $data->scaleid = $grade_scale->id;",
          "90:         $outcome_gradeitem = new grade_item();",
          "91:         $outcome_gradeitem->itemname = $outcome->shortname;",
          "92:         $outcome_gradeitem->itemtype = 'mod';",
          "93:         $outcome_gradeitem->itemmodule = 'assign';",
          "94:         $outcome_gradeitem->iteminstance = $assignment->id;",
          "95:         $outcome_gradeitem->outcomeid = $outcome->id;",
          "96:         $outcome_gradeitem->cmid = 0;",
          "97:         $outcome_gradeitem->courseid = $course->id;",
          "98:         $outcome_gradeitem->aggregationcoef = 0;",
          "99:         $outcome_gradeitem->itemnumber = 1; // The activity's original grade item will be 0.",
          "100:         $outcome_gradeitem->gradetype = GRADE_TYPE_SCALE;",
          "101:         $outcome_gradeitem->scaleid = $outcome->scaleid;",
          "102:         $outcome_gradeitem->insert();",
          "104:         $assignment_gradeitem = grade_item::fetch(",
          "",
          "[Added Lines]",
          "89:         $gradescale = new grade_scale();",
          "90:         $gradescale->name        = 'unittestscale3';",
          "91:         $gradescale->courseid    = $course->id;",
          "92:         $gradescale->userid      = 0;",
          "93:         $gradescale->scale       = 'Distinction, Very Good, Good, Pass, Fail';",
          "94:         $gradescale->description = 'This scale is used to mark standard assignments.';",
          "95:         $gradescale->insert();",
          "102:         $data->scaleid = $gradescale->id;",
          "106:         $outcomegradeitem = new grade_item();",
          "107:         $outcomegradeitem->itemname = $outcome->shortname;",
          "108:         $outcomegradeitem->itemtype = 'mod';",
          "109:         $outcomegradeitem->itemmodule = 'assign';",
          "110:         $outcomegradeitem->iteminstance = $assignment->id;",
          "111:         $outcomegradeitem->outcomeid = $outcome->id;",
          "112:         $outcomegradeitem->cmid = 0;",
          "113:         $outcomegradeitem->courseid = $course->id;",
          "114:         $outcomegradeitem->aggregationcoef = 0;",
          "115:         $outcomegradeitem->itemnumber = 1; // The activity's original grade item will be 0.",
          "116:         $outcomegradeitem->gradetype = GRADE_TYPE_SCALE;",
          "117:         $outcomegradeitem->scaleid = $outcome->scaleid;",
          "118:         $outcomegradeitem->insert();",
          "120:         $assignmentgradeitem = grade_item::fetch(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:                 'courseid' => $course->id",
          "111:             )",
          "112:         );",
          "116:         return array($course, $assignment, $student1, $student2, $teacher, $parent);",
          "117:     }",
          "",
          "[Removed Lines]",
          "113:         $outcome_gradeitem->set_parent($assignment_gradeitem->categoryid);",
          "114:         $outcome_gradeitem->move_after_sortorder($assignment_gradeitem->sortorder);",
          "",
          "[Added Lines]",
          "129:         $outcomegradeitem->set_parent($assignmentgradeitem->categoryid);",
          "130:         $outcomegradeitem->move_after_sortorder($assignmentgradeitem->sortorder);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:         $assignmentname = 'The assignment';",
          "129:         $student1rawgrade = 10;",
          "130:         $student2rawgrade = 20;",
          "135:         $this->setUser($student1);",
          "137:             $course->id,",
          "138:             'mod_assign',",
          "140:             array($student1->id)",
          "141:         );",
          "147:             $course->id,",
          "148:             null,",
          "149:             null,",
          "150:             array($student1->id)",
          "151:         );",
          "153:         $this->assertTrue(count($grades['items']) == 2);",
          "155:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, 'course', $student1->id));",
          "158:         $this->assertEquals($outcome['name'], 'Team work');",
          "162:         try {",
          "164:                 $course->id,",
          "165:                 'mod_assign',",
          "167:                 array($student2->id)",
          "168:             );",
          "169:             $this->fail('moodle_exception expected');",
          "",
          "[Removed Lines]",
          "131:         list($course, $assignment, $student1, $student2, $teacher, $parent) = $this->load_test_data($assignmentname, $student1rawgrade, $student2rawgrade);",
          "132:         $assigment_cm = get_coursemodule_from_id('assign', $assignment->id, 0, false, MUST_EXIST);",
          "136:         $grades = core_grade_external::get_grades(",
          "139:             $assigment_cm->id,",
          "142:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "143:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "146:         $grades = core_grade_external::get_grades(",
          "152:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "154:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "157:         $outcome = $this->get_outcome($grades, $assigment_cm->id);",
          "159:         $this->assertEquals(0, $this->get_outcome_student_grade($grades, $assigment_cm->id, $student1->id));",
          "163:             $grades = core_grade_external::get_grades(",
          "166:                 $assigment_cm->id,",
          "",
          "[Added Lines]",
          "147:         list($course, $assignment, $student1, $student2, $teacher, $parent) =",
          "148:             $this->load_test_data($assignmentname, $student1rawgrade, $student2rawgrade);",
          "149:         $assigmentcm = get_coursemodule_from_id('assign', $assignment->id, 0, false, MUST_EXIST);",
          "153:         $grades = core_grades_external::get_grades(",
          "156:             $assigmentcm->id,",
          "159:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
          "160:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigmentcm->id, $student1->id));",
          "163:         $grades = core_grades_external::get_grades(",
          "169:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
          "171:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigmentcm->id, $student1->id));",
          "174:         $outcome = $this->get_outcome($grades, $assigmentcm->id);",
          "176:         $this->assertEquals(0, $this->get_outcome_student_grade($grades, $assigmentcm->id, $student1->id));",
          "180:             $grades = core_grades_external::get_grades(",
          "183:                 $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175:         $this->setUser($parent);",
          "177:             $course->id,",
          "178:             'mod_assign',",
          "180:             array($student1->id)",
          "181:         );",
          "186:         try {",
          "188:                 $course->id,",
          "189:                 'mod_assign',",
          "191:                 array($student2->id)",
          "192:             );",
          "193:             $this->fail('moodle_exception expected');",
          "",
          "[Removed Lines]",
          "176:         $grades = core_grade_external::get_grades(",
          "179:             $assigment_cm->id,",
          "182:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "183:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "187:             $grades = core_grade_external::get_grades(",
          "190:                 $assigment_cm->id,",
          "",
          "[Added Lines]",
          "193:         $grades = core_grades_external::get_grades(",
          "196:             $assigmentcm->id,",
          "199:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
          "200:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigmentcm->id, $student1->id));",
          "204:             $grades = core_grades_external::get_grades(",
          "207:                 $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "199:         try {",
          "201:                 $course->id,",
          "202:                 'mod_assign',",
          "204:                 array($student1->id, $student2->id)",
          "205:             );",
          "206:             $this->fail('moodle_exception expected');",
          "",
          "[Removed Lines]",
          "200:             $grades = core_grade_external::get_grades(",
          "203:                 $assigment_cm->id,",
          "",
          "[Added Lines]",
          "217:             $grades = core_grades_external::get_grades(",
          "220:                 $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "212:         try {",
          "214:                 $course->id,",
          "215:                 'mod_assign',",
          "217:                 array()",
          "218:             );",
          "219:             $this->fail('moodle_exception expected');",
          "",
          "[Removed Lines]",
          "213:             $grades = core_grade_external::get_grades(",
          "216:                 $assigment_cm->id,",
          "",
          "[Added Lines]",
          "230:             $grades = core_grades_external::get_grades(",
          "233:                 $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "225:         $this->setUser($teacher);",
          "227:             $course->id,",
          "228:             'mod_assign',",
          "230:             array($student1->id, $student2->id)",
          "231:         );",
          "238:             $course->id,",
          "239:             'mod_assign',",
          "241:         );",
          "244:         $this->assertEquals($activity['name'], $assignmentname);",
          "245:         $this->assertEquals(count($activity['grades']), 0);",
          "249:             $course->id",
          "250:         );",
          "252:         $this->assertTrue(count($grades['items']) == 2);",
          "255:         $this->assertEquals($activity['name'], $assignmentname);",
          "256:         $this->assertEquals(count($activity['grades']), 0);",
          "259:         $this->assertEquals($outcome['name'], 'Team work');",
          "263:             'test',",
          "264:             $course->id,",
          "265:             'mod_assign',",
          "267:             0,",
          "268:             array(),",
          "269:             array('hidden' => 1)",
          "",
          "[Removed Lines]",
          "226:         $grades = core_grade_external::get_grades(",
          "229:             $assigment_cm->id,",
          "232:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "233:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "234:         $this->assertEquals($student2rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student2->id));",
          "237:         $grades = core_grade_external::get_grades(",
          "240:             $assigment_cm->id",
          "242:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "243:         $activity = $this->get_activity($grades, $assigment_cm->id);",
          "248:         $grades = core_grade_external::get_grades(",
          "251:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "254:         $activity = $this->get_activity($grades, $assigment_cm->id);",
          "258:         $outcome = $this->get_outcome($grades, $assigment_cm->id);",
          "262:         $result = core_grade_external::update_grades(",
          "266:             $assigment_cm->id,",
          "",
          "[Added Lines]",
          "243:         $grades = core_grades_external::get_grades(",
          "246:             $assigmentcm->id,",
          "249:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
          "250:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigmentcm->id, $student1->id));",
          "251:         $this->assertEquals($student2rawgrade, $this->get_activity_student_grade($grades, $assigmentcm->id, $student2->id));",
          "254:         $grades = core_grades_external::get_grades(",
          "257:             $assigmentcm->id",
          "259:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
          "260:         $activity = $this->get_activity($grades, $assigmentcm->id);",
          "265:         $grades = core_grades_external::get_grades(",
          "268:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
          "271:         $activity = $this->get_activity($grades, $assigmentcm->id);",
          "275:         $outcome = $this->get_outcome($grades, $assigmentcm->id);",
          "279:         $result = core_grades_external::update_grades(",
          "283:             $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "278:         $this->setUser($student1);",
          "280:             $course->id,",
          "281:             'mod_assign',",
          "283:             array($student1->id)",
          "284:         );",
          "289:         $this->setUser($teacher);",
          "291:             $course->id,",
          "292:             'mod_assign',",
          "294:             array($student1->id)",
          "295:         );",
          "298:     }",
          "300:     private function get_activity($grades, $cmid) {",
          "301:         foreach ($grades['items'] as $item) {",
          "302:             if ($item['activityid'] == $cmid) {",
          "",
          "[Removed Lines]",
          "279:         $grades = core_grade_external::get_grades(",
          "282:             $assigment_cm->id,",
          "285:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "286:         $this->assertEquals(null, $this->get_activity($grades, $assigment_cm->id));",
          "290:         $grades = core_grade_external::get_grades(",
          "293:             $assigment_cm->id,",
          "296:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "297:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "",
          "[Added Lines]",
          "296:         $grades = core_grades_external::get_grades(",
          "299:             $assigmentcm->id,",
          "302:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
          "303:         $this->assertEquals(null, $this->get_activity($grades, $assigmentcm->id));",
          "307:         $grades = core_grades_external::get_grades(",
          "310:             $assigmentcm->id,",
          "313:         $grades = external_api::clean_returnvalue(core_grades_external::get_grades_returns(), $grades);",
          "314:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigmentcm->id, $student1->id));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "315:         }",
          "316:         return null;",
          "317:     }",
          "319:     private function get_outcome($grades, $cmid) {",
          "321:             if ($outcome['activityid'] == $cmid) {",
          "322:                 return $outcome;",
          "323:             }",
          "324:         }",
          "325:         return null;",
          "326:     }",
          "328:     private function get_outcome_student_grade($grades, $cmid, $studentid) {",
          "329:         $outcome = $this->get_outcome($grades, $cmid);",
          "331:             if ($grade['userid'] == $studentid) {",
          "332:                 return $grade['grade'];",
          "333:             }",
          "",
          "[Removed Lines]",
          "320:         foreach($grades['outcomes'] as $outcome) {",
          "330:         foreach ($outcome['grades'] as $grade) {",
          "",
          "[Added Lines]",
          "359:         foreach ($grades['outcomes'] as $outcome) {",
          "377:         foreach ($outcome['grades'] as $grade) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "346:         $assignmentname = 'The assignment';",
          "347:         $student1rawgrade = 10;",
          "348:         $student2rawgrade = 20;",
          "352:         $this->setUser($teacher);",
          "355:         $changedmax = 93;",
          "357:             'test',",
          "358:             $course->id,",
          "359:             'mod_assign',",
          "361:             0,",
          "362:             array(),",
          "363:             array('grademax' => $changedmax)",
          "",
          "[Removed Lines]",
          "349:         list($course, $assignment, $student1, $student2, $teacher, $parent) = $this->load_test_data($assignmentname, $student1rawgrade, $student2rawgrade);",
          "350:         $assigment_cm = get_coursemodule_from_id('assign', $assignment->id, 0, false, MUST_EXIST);",
          "356:         $result = core_grade_external::update_grades(",
          "360:             $assigment_cm->id,",
          "",
          "[Added Lines]",
          "396:         list($course, $assignment, $student1, $student2, $teacher, $parent) =",
          "397:             $this->load_test_data($assignmentname, $student1rawgrade, $student2rawgrade);",
          "398:         $assigmentcm = get_coursemodule_from_id('assign', $assignment->id, 0, false, MUST_EXIST);",
          "404:         $result = core_grades_external::update_grades(",
          "408:             $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "366:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id);",
          "367:         $this->assertTrue($grades->items[0]->grademax == $changedmax);",
          "370:         $student1grade = 23;",
          "372:             'test',",
          "373:             $course->id,",
          "374:             'mod_assign',",
          "376:             0,",
          "377:             array(array('studentid' => $student1->id, 'grade' => $student1grade))",
          "378:         );",
          "",
          "[Removed Lines]",
          "371:         $result = core_grade_external::update_grades(",
          "375:             $assigment_cm->id,",
          "",
          "[Added Lines]",
          "419:         $result = core_grades_external::update_grades(",
          "423:             $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "380:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id, array($student1->id));",
          "381:         $this->assertTrue($grades->items[0]->grades[$student1->id]->grade == $student1grade);",
          "384:         $student1grade = 11;",
          "385:         $student2grade = 13;",
          "387:             'test',",
          "388:             $course->id,",
          "389:             'mod_assign',",
          "391:             0,",
          "392:             array(",
          "393:                 array('studentid' => $student1->id, 'grade' => $student1grade),",
          "",
          "[Removed Lines]",
          "386:         $result = core_grade_external::update_grades(",
          "390:             $assigment_cm->id,",
          "",
          "[Added Lines]",
          "434:         $result = core_grades_external::update_grades(",
          "438:             $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "399:         $this->assertTrue($grades->items[0]->grades[$student1->id]->grade == $student1grade);",
          "400:         $this->assertTrue($grades->items[0]->grades[$student2->id]->grade == $student2grade);",
          "403:         $this->setUser($student1);",
          "404:         try {",
          "405:             $student1grade = 17;",
          "407:                 'test',",
          "408:                 $course->id,",
          "409:                 'mod_assign',",
          "411:                 0,",
          "412:                 array( array('studentid' => $student1->id, 'grade' => $student1grade))",
          "413:             );",
          "",
          "[Removed Lines]",
          "406:             $result = core_grade_external::update_grades(",
          "410:                 $assigment_cm->id,",
          "",
          "[Added Lines]",
          "454:             $result = core_grades_external::update_grades(",
          "458:                 $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "416:             $this->assertTrue(true);",
          "417:         }",
          "420:         $this->setUser($parent);",
          "421:         try {",
          "422:             $student1grade = 13;",
          "424:                 'test',",
          "425:                 $course->id,",
          "426:                 'mod_assign',",
          "428:                 0,",
          "429:                 array( array('studentid' => $student1->id, 'grade' => $student1grade))",
          "430:             );",
          "",
          "[Removed Lines]",
          "423:             $result = core_grade_external::update_grades(",
          "427:                 $assigment_cm->id,",
          "",
          "[Added Lines]",
          "471:             $result = core_grades_external::update_grades(",
          "475:                 $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "437:         $this->setUser($student1);",
          "438:         try {",
          "440:                 'test',",
          "441:                 $course->id,",
          "442:                 'mod_assign',",
          "444:                 0,",
          "445:                 array(),",
          "446:                 array('hidden' => 1)",
          "",
          "[Removed Lines]",
          "439:             $result = core_grade_external::update_grades(",
          "443:                 $assigment_cm->id,",
          "",
          "[Added Lines]",
          "487:             $result = core_grades_external::update_grades(",
          "491:                 $assigmentcm->id,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "451:         }",
          "455:         $coursecontext = context_course::instance($course->id);",
          "456:         assign_capability('moodle/grade:hide', CAP_ALLOW, $studentrole->id, $coursecontext->id);",
          "457:         accesslib_clear_all_caches_for_unit_testing();",
          "",
          "[Removed Lines]",
          "454:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "",
          "[Added Lines]",
          "502:         $studentrole = $DB->get_record('role', array('shortname' => 'student'));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "460:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id);",
          "461:         $this->assertTrue($grades->items[0]->hidden == 0);",
          "464:             'test',",
          "465:             $course->id,",
          "466:             'mod_assign',",
          "468:             0,",
          "469:             array(),",
          "470:             array('hidden' => 1)",
          "",
          "[Removed Lines]",
          "463:         $result = core_grade_external::update_grades(",
          "467:             $assigment_cm->id,",
          "",
          "[Added Lines]",
          "511:         $result = core_grades_external::update_grades(",
          "515:             $assigmentcm->id,",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         'type'        => 'read',",
          "100:         'capabilities'=> 'moodle/cohort:view',",
          "101:     ),",
          "111:     ),",
          "120:     ),",
          "",
          "[Removed Lines]",
          "104:     'core_grade_get_grades' => array(",
          "105:         'classname'   => 'core_grade_external',",
          "106:         'methodname'  => 'get_grades',",
          "107:         'classpath'   => 'lib/grade/externallib.php',",
          "108:         'description' => 'Returns grade item details and optionally student grades.',",
          "109:         'type'        => 'read',",
          "110:         'capabilities'=> 'moodle/grade:view, moodle/grade:viewall',",
          "113:     'core_grade_update_grades' => array(",
          "114:         'classname'   => 'core_grade_external',",
          "115:         'methodname'  => 'update_grades',",
          "116:         'classpath'   => 'lib/grade/externallib.php',",
          "117:         'description' => 'Update a grade item and associated student grades.',",
          "118:         'type'        => 'write',",
          "119:         'capabilities'=> '',",
          "",
          "[Added Lines]",
          "104:     'core_grades_get_grades' => array(",
          "105:         'classname'     => 'core_grades_external',",
          "106:         'methodname'    => 'get_grades',",
          "107:         'classpath'     => 'grade/externallib.php',",
          "108:         'description'   => 'Returns grade item details and optionally student grades.',",
          "109:         'type'          => 'read',",
          "110:         'capabilities'  => 'moodle/grade:view, moodle/grade:viewall',",
          "113:     'core_grades_update_grades' => array(",
          "114:         'classname'     => 'core_grades_external',",
          "115:         'methodname'    => 'update_grades',",
          "116:         'classpath'     => 'grade/externallib.php',",
          "117:         'description'   => 'Update a grade item and associated student grades.',",
          "118:         'type'          => 'write',",
          "119:         'capabilities'  => '',",
          "",
          "---------------"
        ],
        "lib/grade/externallib.php||lib/grade/externallib.php": [
          "File: lib/grade/externallib.php -> lib/grade/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/gradelib.php||lib/gradelib.php": [
          "File: lib/gradelib.php -> lib/gradelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "353:         }",
          "354:     }",
          "357:     if (!empty($itemtype)) {",
          "358:         $params['itemtype'] = $itemtype;",
          "359:     }",
          "",
          "[Removed Lines]",
          "356:     $params = array('courseid'=>$courseid);",
          "",
          "[Added Lines]",
          "356:     $params = array('courseid' => $courseid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6acfacfa9a4cbd8c20148cedb908ff5c1ec8dd30",
      "candidate_info": {
        "commit_hash": "6acfacfa9a4cbd8c20148cedb908ff5c1ec8dd30",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6acfacfa9a4cbd8c20148cedb908ff5c1ec8dd30",
        "files": [
          "lib/db/services.php"
        ],
        "message": "MDL-44342 airnotifier: Added new functions to the Mobile service",
        "before_after_code_files": [
          "lib/db/services.php||lidservices.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/services.php||lib/db/services.php"
          ],
          "candidate": [
            "lib/db/services.php||lidservices.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lidservices.php": [
          "File: lib/db/services.php -> lidservices.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "943:             'mod_assign_submit_for_grading',",
          "944:             'mod_assign_save_grade',",
          "945:             'mod_assign_save_user_extensions',",
          "947:         'enabled' => 0,",
          "948:         'restrictedusers' => 0,",
          "949:         'shortname' => MOODLE_OFFICIAL_MOBILE_SERVICE,",
          "",
          "[Removed Lines]",
          "946:             'mod_assign_reveal_identities'),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba1dc597215a801a910af344d88b9f900056fe0d",
      "candidate_info": {
        "commit_hash": "ba1dc597215a801a910af344d88b9f900056fe0d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ba1dc597215a801a910af344d88b9f900056fe0d",
        "files": [
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-44462 mobile: Add mod_assign functions to service definition\n\nTo support new functionality in the Moodle Mobile app.",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/services.php||lib/db/services.php"
          ],
          "candidate": [
            "lib/db/services.php||lib/db/services.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "914:             'core_notes_create_notes',",
          "915:             'core_user_get_course_user_profiles',",
          "916:             'core_enrol_get_enrolled_users',",
          "918:         'enabled' => 0,",
          "919:         'restrictedusers' => 0,",
          "920:         'shortname' => MOODLE_OFFICIAL_MOBILE_SERVICE,",
          "",
          "[Removed Lines]",
          "917:             'core_message_send_instant_messages'),",
          "",
          "[Added Lines]",
          "917:             'core_message_send_instant_messages',",
          "918:             'mod_assign_get_grades',",
          "919:             'mod_assign_get_assignments',",
          "920:             'mod_assign_get_submissions',",
          "921:             'mod_assign_get_user_flags',",
          "922:             'mod_assign_set_user_flags',",
          "923:             'mod_assign_get_user_mappings',",
          "924:             'mod_assign_revert_submissions_to_draft',",
          "925:             'mod_assign_lock_submissions',",
          "926:             'mod_assign_unlock_submissions',",
          "927:             'mod_assign_save_submission',",
          "928:             'mod_assign_submit_for_grading',",
          "929:             'mod_assign_save_grade',",
          "930:             'mod_assign_save_user_extensions',",
          "931:             'mod_assign_reveal_identities'),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2014030700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2014031100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d35499312dd82b5f3a207490daf9539553c2e5f7",
      "candidate_info": {
        "commit_hash": "d35499312dd82b5f3a207490daf9539553c2e5f7",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d35499312dd82b5f3a207490daf9539553c2e5f7",
        "files": [
          "course/externallib.php",
          "grade/upgrade.txt",
          "lib/db/services.php",
          "lib/grade/externallib.php",
          "lib/grade/tests/externallib_test.php",
          "lib/gradelib.php"
        ],
        "message": "MDL-30085 core_grade: added a grade web service",
        "before_after_code_files": [
          "course/externallib.php||course/externallib.php",
          "lib/db/services.php||lib/db/services.php",
          "lib/grade/externallib.php||lib/grade/externallib.php",
          "lib/grade/tests/externallib_test.php||lib/grade/tests/externallib_test.php",
          "lib/gradelib.php||lib/gradelib.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/services.php||lib/db/services.php"
          ],
          "candidate": [
            "lib/db/services.php||lib/db/services.php"
          ]
        }
      },
      "candidate_diff": {
        "course/externallib.php||course/externallib.php": [
          "File: course/externallib.php -> course/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:                         $module['id'] = $cm->id;",
          "142:                         $module['name'] = format_string($cm->name, true);",
          "143:                         $module['modname'] = $cm->modname;",
          "144:                         $module['modplural'] = $cm->modplural;",
          "145:                         $module['modicon'] = $cm->get_icon_url()->out(false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:                         $module['instance'] = $cm->instance;",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         'type'        => 'read',",
          "100:         'capabilities'=> 'moodle/cohort:view',",
          "101:     ),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     'core_grade_get_grades' => array(",
          "105:         'classname'   => 'core_grade_external',",
          "106:         'methodname'  => 'get_grades',",
          "107:         'classpath'   => 'lib/grade/externallib.php',",
          "108:         'description' => 'Returns grade item details and optionally student grades.',",
          "109:         'type'        => 'read',",
          "110:         'capabilities'=> 'moodle/grade:view, moodle/grade:viewall',",
          "111:     ),",
          "113:     'core_grade_update_grades' => array(",
          "114:         'classname'   => 'core_grade_external',",
          "115:         'methodname'  => 'update_grades',",
          "116:         'classpath'   => 'lib/grade/externallib.php',",
          "117:         'description' => 'Update a grade item and associated student grades.',",
          "118:         'type'        => 'write',",
          "119:         'capabilities'=> '',",
          "120:     ),",
          "",
          "---------------"
        ],
        "lib/grade/externallib.php||lib/grade/externallib.php": [
          "File: lib/grade/externallib.php -> lib/grade/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "27: require_once(\"$CFG->libdir/externallib.php\");",
          "38: class core_grade_external extends external_api {",
          "45:     public static function get_grades_parameters() {",
          "46:         return new external_function_parameters(",
          "47:             array(",
          "48:                 'courseid' => new external_value(PARAM_INT, 'id of course'),",
          "49:                 'component' => new external_value(PARAM_COMPONENT, 'A component, for example mod_forum or mod_quiz', VALUE_DEFAULT, ''),",
          "50:                 'activityid' => new external_value(PARAM_INT, 'The activity ID', VALUE_DEFAULT, null),",
          "51:                 'userids' => new external_multiple_structure(",
          "52:                     new external_value(PARAM_INT, 'user ID'), 'An array of user IDs, leave empty to just retrieve grade item information', VALUE_DEFAULT, array()",
          "53:                 )",
          "54:             )",
          "55:         );",
          "56:     }",
          "65:     public static function get_grades($courseid, $component = null, $activityid = null, $userids = array()) {",
          "66:         global $CFG, $USER, $DB;",
          "67:         require_once(\"$CFG->libdir/gradelib.php\");",
          "69:         $params = self::validate_parameters(self::get_grades_parameters(),",
          "70:             array('courseid' => $courseid, 'component' => $component, 'activityid' => $activityid, 'userids' => $userids));",
          "72:         $coursecontext = context_course::instance($params['courseid']);",
          "74:         try {",
          "75:             self::validate_context($coursecontext);",
          "76:         } catch (Exception $e) {",
          "77:             $exceptionparam = new stdClass();",
          "78:             $exceptionparam->message = $e->getMessage();",
          "79:             $exceptionparam->courseid = $params['courseid'];",
          "80:             throw new moodle_exception('errorcoursecontextnotvalid' , 'webservice', '', $exceptionparam);",
          "81:         }",
          "83:         $course = $DB->get_record('course', array('id' => $params['courseid']));",
          "85:         $access = false;",
          "86:         if (has_capability('moodle/grade:viewall', $coursecontext)) {",
          "88:             $access = true;",
          "90:         } else if ($course->showgrades && count($params['userids']) == 1) {",
          "93:             if ($params['userids'][0] == $USER->id and has_capability('moodle/grade:view', $coursecontext)) {",
          "95:                 $access = true;",
          "97:             } else if (has_capability('moodle/grade:viewall', context_user::instance($params['userids'][0]))) {",
          "99:                 $access = true;",
          "100:             }",
          "101:         }",
          "103:         if (!$access) {",
          "104:             throw new moodle_exception('nopermissiontoviewgrades', 'error');",
          "105:         }",
          "107:         $itemtype = null;",
          "108:         $itemmodule = null;",
          "109:         if (!empty($params['component'])) {",
          "110:             list($itemtype, $itemmodule) = normalize_component($params['component']);",
          "111:         }",
          "113:         $cm = null;",
          "114:         if (!empty($itemmodule) && !empty($activityid)) {",
          "115:             if (! $cm = get_coursemodule_from_id($itemmodule, $activityid)) {",
          "116:                 throw new moodle_exception('invalidcoursemodule');",
          "117:             }",
          "118:         }",
          "120:         $cminstanceid = null;",
          "121:         if (!empty($cm)) {",
          "122:             $cminstanceid = $cm->instance;",
          "123:         }",
          "124:         $grades = grade_get_grades($params['courseid'], $itemtype, $itemmodule, $cminstanceid, $params['userids']);",
          "126:         $activity_instances = null;",
          "127:         if (empty($cm)) {",
          "129:             $modinfo = get_fast_modinfo($params['courseid']);",
          "130:             $activity_instances = $modinfo->get_instances();",
          "131:         }",
          "133:         foreach ($grades->items as $gradeitem) {",
          "134:             if (!empty($cm)) {",
          "136:                 $modulecm = $cm;",
          "137:             } else if (!empty($gradeitem->itemmodule)) {",
          "138:                 $modulecm = $activity_instances[$gradeitem->itemmodule][$gradeitem->iteminstance];",
          "139:             } else {",
          "141:                 continue;",
          "142:             }",
          "145:             foreach ($gradeitem->grades as $studentgrade) {",
          "146:                 if (!empty($studentgrade->feedback)) {",
          "147:                     list($studentgrade->feedback, $categoryinfo->feedbackformat) =",
          "148:                         external_format_text($studentgrade->feedback, $studentgrade->feedbackformat,",
          "149:                         $modulecm->id, $params['component'], 'feedback', null);",
          "150:                 }",
          "151:             }",
          "152:         }",
          "156:         $grades_array = array();",
          "157:         $canviewhidden = has_capability('moodle/grade:viewhidden', context_course::instance($params['courseid']));",
          "159:         $grades_array['items'] = array();",
          "160:         foreach ($grades->items as $grade_item) {",
          "162:             $grade_item_instance = self::get_grade_item($course->id, $grade_item->itemtype, $grade_item->itemmodule, $grade_item->iteminstance, 0);",
          "163:             if (!$canviewhidden && $grade_item_instance->is_hidden()) {",
          "164:                 continue;",
          "165:             }",
          "166:             $grade_item_array = (array)$grade_item;",
          "167:             $grade_item_array['grades'] = array();",
          "169:             if (!empty($grade_item->grades)) {",
          "170:                 foreach ($grade_item->grades as $studentid => $studentgrade) {",
          "171:                     $grade_grade_instance = grade_grade::fetch(",
          "172:                         array(",
          "173:                             'userid' => $studentid,",
          "174:                             'itemid' => $grade_item_instance->id",
          "175:                         )",
          "176:                     );",
          "177:                     if (!$canviewhidden && $grade_grade_instance->is_hidden()) {",
          "178:                         continue;",
          "179:                     }",
          "180:                     $grade_item_array['grades'][$studentid] = (array)$studentgrade;",
          "182:                     $grade_item_array['grades'][$studentid]['userid'] = $studentid;",
          "183:                 }",
          "184:             }",
          "187:             $modulecm = $cm;",
          "188:             if (empty($modulecm) && !empty($grade_item_instance->itemmodule)) {",
          "189:                 $modulecm = $activity_instances[$grade_item_instance->itemmodule][$grade_item_instance->iteminstance];",
          "190:             }",
          "191:             if ($grade_item_instance->itemtype == 'course') {",
          "192:                 $grades_array['items']['course'] = $grade_item_array;",
          "193:                 $grades_array['items']['course']['activityid'] = 'course';",
          "194:             } else {",
          "195:                 $grades_array['items'][$modulecm->id] = $grade_item_array;",
          "197:                 $grades_array['items'][$modulecm->id]['activityid'] = $modulecm->id;",
          "198:             }",
          "199:         }",
          "201:         $grades_array['outcomes'] = array();",
          "202:         foreach ($grades->outcomes as $outcome) {",
          "203:             $modulecm = $cm;",
          "204:             if (empty($modulecm)) {",
          "205:                 $modulecm = $activity_instances[$outcome->itemmodule][$outcome->iteminstance];",
          "206:             }",
          "207:             $grades_array['outcomes'][$modulecm->id] = (array)$outcome;",
          "208:             $grades_array['outcomes'][$modulecm->id]['activityid'] = $modulecm->id;",
          "210:             $grades_array['outcomes'][$modulecm->id]['grades'] = array();",
          "211:             if (!empty($outcome->grades)) {",
          "212:                 foreach ($outcome->grades as $studentid => $studentgrade) {",
          "213:                     if (!$canviewhidden) {",
          "215:                         $grade_item_instance = self::get_grade_item($course->id, $outcome->itemtype, $outcome->itemmodule, $outcome->iteminstance, $outcome->itemnumber);",
          "216:                         $grade_grade_instance = grade_grade::fetch(",
          "217:                             array(",
          "218:                                 'userid' => $studentid,",
          "219:                                 'itemid' => $grade_item_instance->id",
          "220:                             )",
          "221:                         );",
          "223:                         if (!empty($grade_grade_instance) && $grade_grade_instance->is_hidden()) {",
          "224:                             continue;",
          "225:                         }",
          "226:                     }",
          "227:                     $grades_array['outcomes'][$modulecm->id]['grades'][$studentid] = (array)$studentgrade;",
          "230:                     $grades_array['outcomes'][$modulecm->id]['grades'][$studentid]['userid'] = $studentid;",
          "231:                 }",
          "232:             }",
          "233:         }",
          "235:         return $grades_array;",
          "236:     }",
          "238:     private static function get_grade_item($courseid, $itemtype, $itemmodule = null, $iteminstance = null, $itemnumber = null) {",
          "239:         $grade_item_instance = null;",
          "240:         if ($itemtype == 'course') {",
          "241:             $grade_item_instance = grade_item::fetch(array('courseid' => $courseid, 'itemtype' => $itemtype));",
          "242:         } else {",
          "243:             $grade_item_instance = grade_item::fetch(array('courseid' => $courseid, 'itemtype' => $itemtype, 'itemmodule' => $itemmodule, 'iteminstance' => $iteminstance, 'itemnumber' => $itemnumber));",
          "244:         }",
          "245:         return $grade_item_instance;",
          "246:     }",
          "254:     public static function get_grades_returns() {",
          "255:         return new external_single_structure(",
          "256:             array(",
          "257:                 'items'  => new external_multiple_structure(",
          "258:                     new external_single_structure(",
          "259:                         array(",
          "260:                             'activityid' => new external_value(PARAM_ALPHANUM, 'The ID of the activity or \"course\" for the course grade item'),",
          "261:                             'itemnumber'  => new external_value(PARAM_INT, 'Will be 0 unless the module has multiple grades'),",
          "262:                             'scaleid' => new external_value(PARAM_INT, 'The ID of the custom scale or 0'),",
          "263:                             'name' => new external_value(PARAM_RAW, 'The module name'),",
          "264:                             'grademin' => new external_value(PARAM_FLOAT, 'Minimum grade'),",
          "265:                             'grademax' => new external_value(PARAM_FLOAT, 'Maximum grade'),",
          "266:                             'gradepass' => new external_value(PARAM_FLOAT, 'The passing grade threshold'),",
          "267:                             'locked' => new external_value(PARAM_BOOL, 'Is the grade item locked?'),",
          "268:                             'hidden' => new external_value(PARAM_BOOL, 'Is the grade item hidden?'),",
          "269:                             'grades' => new external_multiple_structure(",
          "270:                                 new external_single_structure(",
          "271:                                     array(",
          "272:                                         'userid' => new external_value(PARAM_INT, 'Student ID'),",
          "273:                                         'grade' => new external_value(PARAM_FLOAT, 'Student grade'),",
          "274:                                         'locked' => new external_value(PARAM_BOOL, 'Is the student\\'s grade locked?'),",
          "275:                                         'hidden' => new external_value(PARAM_BOOL, 'Is the student\\'s grade hidden?'),",
          "276:                                         'overridden' => new external_value(PARAM_BOOL, 'Is the student\\'s grade overridden?'),",
          "277:                                         'feedback' => new external_value(PARAM_RAW, 'Feedback from the grader'),",
          "278:                                         'feedbackformat' => new external_value(PARAM_INT, 'The format of the feedback'),",
          "279:                                         'usermodified' => new external_value(PARAM_INT, 'The ID of the last user to modify this student grade'),",
          "280:                                         'datesubmitted' => new external_value(PARAM_INT, 'A timestamp indicating when the student submitted the activity'),",
          "281:                                         'dategraded' => new external_value(PARAM_INT, 'A timestamp indicating when the assignment was grades'),",
          "282:                                         'str_grade' => new external_value(PARAM_RAW, 'A string representation of the grade'),",
          "283:                                         'str_long_grade' => new external_value(PARAM_RAW, 'A nicely formatted string representation of the grade'),",
          "284:                                         'str_feedback' => new external_value(PARAM_TEXT, 'A string representation of the feedback from the grader'),",
          "285:                                     )",
          "286:                                 )",
          "287:                             ),",
          "288:                         )",
          "289:                     )",
          "290:                 ),",
          "291:                 'outcomes'  => new external_multiple_structure(",
          "292:                     new external_single_structure(",
          "293:                         array(",
          "294:                             'activityid' => new external_value(PARAM_ALPHANUM, 'The ID of the activity or \"course\" for the course grade item'),",
          "295:                             'itemnumber'  => new external_value(PARAM_INT, 'Will be 0 unless the module has multiple grades'),",
          "296:                             'scaleid' => new external_value(PARAM_INT, 'The ID of the custom scale or 0'),",
          "297:                             'name' => new external_value(PARAM_RAW, 'The module name'),",
          "298:                             'locked' => new external_value(PARAM_BOOL, 'Is the grade item locked?'),",
          "299:                             'hidden' => new external_value(PARAM_BOOL, 'Is the grade item hidden?'),",
          "300:                             'grades' => new external_multiple_structure(",
          "301:                                 new external_single_structure(",
          "302:                                     array(",
          "303:                                         'userid' => new external_value(PARAM_INT, 'Student ID'),",
          "304:                                         'grade' => new external_value(PARAM_FLOAT, 'Student grade'),",
          "305:                                         'locked' => new external_value(PARAM_BOOL, 'Is the student\\'s grade locked?'),",
          "306:                                         'hidden' => new external_value(PARAM_BOOL, 'Is the student\\'s grade hidden?'),",
          "307:                                         'feedback' => new external_value(PARAM_RAW, 'Feedback from the grader'),",
          "308:                                         'feedbackformat' => new external_value(PARAM_INT, 'The feedback format'),",
          "309:                                         'usermodified' => new external_value(PARAM_INT, 'The ID of the last user to modify this student grade'),",
          "310:                                         'str_grade' => new external_value(PARAM_RAW, 'A string representation of the grade'),",
          "311:                                         'str_feedback' => new external_value(PARAM_TEXT, 'A string representation of the feedback from the grader'),",
          "312:                                     )",
          "313:                                 )",
          "314:                             ),",
          "315:                         )",
          "316:                     ), 'An array of outcomes associated with the grade items', VALUE_OPTIONAL",
          "317:                 )",
          "318:             )",
          "319:         );",
          "321:     }",
          "329:     public static function update_grades_parameters() {",
          "330:         return new external_function_parameters(",
          "331:             array(",
          "332:                 'source' => new external_value(PARAM_TEXT, 'The source of the grade update'),",
          "333:                 'courseid' => new external_value(PARAM_INT, 'id of course'),",
          "334:                 'component' => new external_value(PARAM_COMPONENT, 'A component, for example mod_forum or mod_quiz'),",
          "335:                 'activityid' => new external_value(PARAM_INT, 'The activity ID'),",
          "336:                 'itemnumber' => new external_value(PARAM_INT, 'grade item ID number for modules that have multiple grades. Typically this is 0.'),",
          "337:                 'grades' => new external_multiple_structure(",
          "338:                     new external_single_structure(",
          "339:                         array(",
          "340:                             'studentid' => new external_value(PARAM_INT, 'Student ID'),",
          "341:                             'grade' => new external_value(PARAM_FLOAT, 'Student grade'),",
          "342:                             'str_feedback' => new external_value(PARAM_TEXT, 'A string representation of the feedback from the grader', VALUE_OPTIONAL),",
          "343:                         )",
          "344:                 ), 'Any student grades to alter', VALUE_OPTIONAL),",
          "345:                 'itemdetails' => new external_single_structure(",
          "346:                     array(",
          "347:                         'itemname' => new external_value(PARAM_ALPHANUMEXT, 'The grade item name', VALUE_OPTIONAL),",
          "348:                         'idnumber' => new external_value(PARAM_INT, 'Arbitrary ID provided by the module responsible for the grade item', VALUE_OPTIONAL),",
          "349:                         'gradetype' => new external_value(PARAM_INT, 'The type of grade (0 = none, 1 = value, 2 = scale, 3 = text)', VALUE_OPTIONAL),",
          "350:                         'grademax' => new external_value(PARAM_FLOAT, 'Maximum grade allowed', VALUE_OPTIONAL),",
          "351:                         'grademin' => new external_value(PARAM_FLOAT, 'Minimum grade allowed', VALUE_OPTIONAL),",
          "352:                         'scaleid' => new external_value(PARAM_INT, 'The ID of the custom scale being is used', VALUE_OPTIONAL),",
          "353:                         'multfactor' => new external_value(PARAM_FLOAT, 'Multiply all grades by this number', VALUE_OPTIONAL),",
          "354:                         'plusfactor' => new external_value(PARAM_FLOAT, 'Add this to all grades', VALUE_OPTIONAL),",
          "355:                         'deleted' => new external_value(PARAM_BOOL, 'True if the grade item should be deleted', VALUE_OPTIONAL),",
          "356:                         'hidden' => new external_value(PARAM_BOOL, 'True if the grade item is hidden', VALUE_OPTIONAL),",
          "357:                     ), 'Any grade item settings to alter', VALUE_OPTIONAL",
          "358:                 )",
          "359:             )",
          "360:         );",
          "361:     }",
          "369:     public static function update_grades($source, $courseid, $component, $activityid, $itemnumber, $grades = array(), $itemdetails = array()) {",
          "370:         global $CFG;",
          "372:         require_once(\"$CFG->libdir/gradelib.php\");",
          "374:         $params = self::validate_parameters(",
          "375:             self::update_grades_parameters(),",
          "376:             array(",
          "377:                 'source' => $source,",
          "378:                 'courseid' => $courseid,",
          "379:                 'component' => $component,",
          "380:                 'activityid' => $activityid,",
          "381:                 'itemnumber' => $itemnumber,",
          "382:                 'grades' => $grades,",
          "383:                 'itemdetails' => $itemdetails",
          "384:             )",
          "385:         );",
          "387:         list($itemtype, $itemmodule) = normalize_component($params['component']);",
          "389:         if (! $cm = get_coursemodule_from_id($itemmodule, $activityid)) {",
          "390:             throw new moodle_exception('invalidcoursemodule');",
          "391:         }",
          "392:         $iteminstance = $cm->instance;",
          "394:         $coursecontext = context_course::instance($params['courseid']);",
          "396:         try {",
          "397:             self::validate_context($coursecontext);",
          "398:         } catch (Exception $e) {",
          "399:             $exceptionparam = new stdClass();",
          "400:             $exceptionparam->message = $e->getMessage();",
          "401:             $exceptionparam->courseid = $params['courseid'];",
          "402:             throw new moodle_exception('errorcoursecontextnotvalid' , 'webservice', '', $exceptionparam);",
          "403:         }",
          "405:         $hidinggrades = false;",
          "406:         $editinggradeitem = false;",
          "407:         $editinggrades = false;",
          "409:         $gradestructure = array();",
          "410:         foreach ($grades as $grade) {",
          "411:             $editinggrades = true;",
          "412:             $gradestructure[ $grade['studentid'] ] = array('userid' => $grade['studentid'], 'rawgrade' => $grade['grade']);",
          "413:         }",
          "414:         if (!empty($params['itemdetails'])) {",
          "415:             if (isset($params['itemdetails']['hidden'])) {",
          "416:                 $hidinggrades = true;",
          "417:             } else {",
          "418:                 $editinggradeitem = true;",
          "419:             }",
          "420:         }",
          "422:         if ($editinggradeitem && !has_capability('moodle/grade:manage', $coursecontext)) {",
          "423:             throw new moodle_exception('nopermissiontoviewgrades', 'error', '', null, 'moodle/grade:manage required to edit grade information');",
          "424:         }",
          "425:         if ($hidinggrades && !has_capability('moodle/grade:hide', $coursecontext) && !has_capability('moodle/grade:hide', $coursecontext)) {",
          "426:             throw new moodle_exception('nopermissiontoviewgrades', 'error', '', null, 'moodle/grade:hide required to hide grade items');",
          "427:         }",
          "428:         if ($editinggrades && !has_capability('moodle/grade:edit', $coursecontext)) {",
          "429:             throw new moodle_exception('nopermissiontoviewgrades', 'error', '', null, 'moodle/grade:edit required to edit grades');",
          "430:         }",
          "432:         return grade_update($params['source'], $params['courseid'], $itemtype, $itemmodule, $iteminstance, $itemnumber, $gradestructure, $params['itemdetails']);",
          "433:     }",
          "441:     public static function update_grades_returns() {",
          "442:         return new external_single_structure(",
          "443:             array (",
          "444:                 'result' => new external_value(PARAM_INT, 'A value like ' . GRADE_UPDATE_OK . ' => OK, ' . GRADE_UPDATE_FAILED . ' => FAILED  as defined in lib/grade/constants.php')",
          "445:             )",
          "446:         );",
          "447:     }",
          "448: }",
          "",
          "---------------"
        ],
        "lib/grade/tests/externallib_test.php||lib/grade/tests/externallib_test.php": [
          "File: lib/grade/tests/externallib_test.php -> lib/grade/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: global $CFG;",
          "31: require_once($CFG->dirroot . '/webservice/tests/helpers.php');",
          "32: require_once($CFG->libdir . '/grade/externallib.php');",
          "34: class core_grade_external_testcase extends externallib_advanced_testcase {",
          "36:     protected function load_test_data($assignmentname, $student1rawgrade, $student2rawgrade) {",
          "37:         global $DB;",
          "40:         $course = $this->getDataGenerator()->create_course();",
          "41:         $coursecontext = context_course::instance($course->id);",
          "43:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "45:         $student1 = $this->getDataGenerator()->create_user();",
          "46:         $this->getDataGenerator()->enrol_user($student1->id, $course->id, $studentrole->id);",
          "48:         $student2 = $this->getDataGenerator()->create_user();",
          "49:         $this->getDataGenerator()->enrol_user($student2->id, $course->id, $studentrole->id);",
          "51:         $teacherrole = $DB->get_record('role', array('shortname'=>'editingteacher'));",
          "52:         $teacher = $this->getDataGenerator()->create_user();",
          "53:         $this->getDataGenerator()->enrol_user($teacher->id, $course->id, $teacherrole->id);",
          "55:         $parent = $this->getDataGenerator()->create_user();",
          "56:         $this->setUser($parent);",
          "57:         $student1context = context_user::instance($student1->id);",
          "59:         $parentroleid = $this->assignUserCapability('moodle/grade:viewall', $student1context->id);",
          "61:         $this->getDataGenerator()->enrol_user($parent->id, $course->id, $parentroleid);",
          "63:         $assignment = $this->getDataGenerator()->create_module('assign', array('name' => $assignmentname, 'course' => $course->id));",
          "64:         $modcontext = get_coursemodule_from_instance('assign', $assignment->id, $course->id);",
          "65:         $assignment->cmidnumber = $modcontext->id;",
          "67:         $student1grade = array('userid' => $student1->id, 'rawgrade' => $student1rawgrade);",
          "68:         $student2grade = array('userid' => $student2->id, 'rawgrade' => $student2rawgrade);",
          "69:         $studentgrades = array($student1->id => $student1grade, $student2->id => $student2grade);",
          "70:         assign_grade_item_update($assignment, $studentgrades);",
          "73:         $grade_scale = new grade_scale();",
          "74:         $grade_scale->name        = 'unittestscale3';",
          "75:         $grade_scale->courseid    = $course->id;",
          "76:         $grade_scale->userid      = 0;",
          "77:         $grade_scale->scale       = 'Distinction, Very Good, Good, Pass, Fail';",
          "78:         $grade_scale->description = 'This scale is used to mark standard assignments.';",
          "79:         $grade_scale->insert();",
          "82:         $data = new stdClass();",
          "83:         $data->courseid = $course->id;",
          "84:         $data->fullname = 'Team work';",
          "85:         $data->shortname = 'Team work';",
          "86:         $data->scaleid = $grade_scale->id;",
          "87:         $outcome = new grade_outcome($data, false);",
          "88:         $outcome->insert();",
          "90:         $outcome_gradeitem = new grade_item();",
          "91:         $outcome_gradeitem->itemname = $outcome->shortname;",
          "92:         $outcome_gradeitem->itemtype = 'mod';",
          "93:         $outcome_gradeitem->itemmodule = 'assign';",
          "94:         $outcome_gradeitem->iteminstance = $assignment->id;",
          "95:         $outcome_gradeitem->outcomeid = $outcome->id;",
          "96:         $outcome_gradeitem->cmid = 0;",
          "97:         $outcome_gradeitem->courseid = $course->id;",
          "98:         $outcome_gradeitem->aggregationcoef = 0;",
          "99:         $outcome_gradeitem->itemnumber = 1; // The activity's original grade item will be 0.",
          "100:         $outcome_gradeitem->gradetype = GRADE_TYPE_SCALE;",
          "101:         $outcome_gradeitem->scaleid = $outcome->scaleid;",
          "102:         $outcome_gradeitem->insert();",
          "104:         $assignment_gradeitem = grade_item::fetch(",
          "105:             array(",
          "106:                 'itemtype' => 'mod',",
          "107:                 'itemmodule' => 'assign',",
          "108:                 'iteminstance' => $assignment->id,",
          "109:                 'itemnumber' => 0,",
          "110:                 'courseid' => $course->id",
          "111:             )",
          "112:         );",
          "113:         $outcome_gradeitem->set_parent($assignment_gradeitem->categoryid);",
          "114:         $outcome_gradeitem->move_after_sortorder($assignment_gradeitem->sortorder);",
          "116:         return array($course, $assignment, $student1, $student2, $teacher, $parent);",
          "117:     }",
          "122:     public function test_get_grades() {",
          "123:         global $CFG;",
          "125:         $this->resetAfterTest(true);",
          "126:         $CFG->enableoutcomes = 1;",
          "128:         $assignmentname = 'The assignment';",
          "129:         $student1rawgrade = 10;",
          "130:         $student2rawgrade = 20;",
          "131:         list($course, $assignment, $student1, $student2, $teacher, $parent) = $this->load_test_data($assignmentname, $student1rawgrade, $student2rawgrade);",
          "132:         $assigment_cm = get_coursemodule_from_id('assign', $assignment->id, 0, false, MUST_EXIST);",
          "135:         $this->setUser($student1);",
          "136:         $grades = core_grade_external::get_grades(",
          "137:             $course->id,",
          "138:             'mod_assign',",
          "139:             $assigment_cm->id,",
          "140:             array($student1->id)",
          "141:         );",
          "142:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "143:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "146:         $grades = core_grade_external::get_grades(",
          "147:             $course->id,",
          "148:             null,",
          "149:             null,",
          "150:             array($student1->id)",
          "151:         );",
          "152:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "153:         $this->assertTrue(count($grades['items']) == 2);",
          "154:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "155:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, 'course', $student1->id));",
          "157:         $outcome = $this->get_outcome($grades, $assigment_cm->id);",
          "158:         $this->assertEquals($outcome['name'], 'Team work');",
          "159:         $this->assertEquals(0, $this->get_outcome_student_grade($grades, $assigment_cm->id, $student1->id));",
          "162:         try {",
          "163:             $grades = core_grade_external::get_grades(",
          "164:                 $course->id,",
          "165:                 'mod_assign',",
          "166:                 $assigment_cm->id,",
          "167:                 array($student2->id)",
          "168:             );",
          "169:             $this->fail('moodle_exception expected');",
          "170:         } catch (moodle_exception $ex) {",
          "171:             $this->assertTrue(true);",
          "172:         }",
          "175:         $this->setUser($parent);",
          "176:         $grades = core_grade_external::get_grades(",
          "177:             $course->id,",
          "178:             'mod_assign',",
          "179:             $assigment_cm->id,",
          "180:             array($student1->id)",
          "181:         );",
          "182:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "183:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "186:         try {",
          "187:             $grades = core_grade_external::get_grades(",
          "188:                 $course->id,",
          "189:                 'mod_assign',",
          "190:                 $assigment_cm->id,",
          "191:                 array($student2->id)",
          "192:             );",
          "193:             $this->fail('moodle_exception expected');",
          "194:         } catch (moodle_exception $ex) {",
          "195:             $this->assertTrue(true);",
          "196:         }",
          "199:         try {",
          "200:             $grades = core_grade_external::get_grades(",
          "201:                 $course->id,",
          "202:                 'mod_assign',",
          "203:                 $assigment_cm->id,",
          "204:                 array($student1->id, $student2->id)",
          "205:             );",
          "206:             $this->fail('moodle_exception expected');",
          "207:         } catch (moodle_exception $ex) {",
          "208:             $this->assertTrue(true);",
          "209:         }",
          "212:         try {",
          "213:             $grades = core_grade_external::get_grades(",
          "214:                 $course->id,",
          "215:                 'mod_assign',",
          "216:                 $assigment_cm->id,",
          "217:                 array()",
          "218:             );",
          "219:             $this->fail('moodle_exception expected');",
          "220:         } catch (moodle_exception $ex) {",
          "221:             $this->assertTrue(true);",
          "222:         }",
          "225:         $this->setUser($teacher);",
          "226:         $grades = core_grade_external::get_grades(",
          "227:             $course->id,",
          "228:             'mod_assign',",
          "229:             $assigment_cm->id,",
          "230:             array($student1->id, $student2->id)",
          "231:         );",
          "232:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "233:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "234:         $this->assertEquals($student2rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student2->id));",
          "237:         $grades = core_grade_external::get_grades(",
          "238:             $course->id,",
          "239:             'mod_assign',",
          "240:             $assigment_cm->id",
          "241:         );",
          "242:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "243:         $activity = $this->get_activity($grades, $assigment_cm->id);",
          "244:         $this->assertEquals($activity['name'], $assignmentname);",
          "245:         $this->assertEquals(count($activity['grades']), 0);",
          "248:         $grades = core_grade_external::get_grades(",
          "249:             $course->id",
          "250:         );",
          "251:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "252:         $this->assertTrue(count($grades['items']) == 2);",
          "254:         $activity = $this->get_activity($grades, $assigment_cm->id);",
          "255:         $this->assertEquals($activity['name'], $assignmentname);",
          "256:         $this->assertEquals(count($activity['grades']), 0);",
          "258:         $outcome = $this->get_outcome($grades, $assigment_cm->id);",
          "259:         $this->assertEquals($outcome['name'], 'Team work');",
          "262:         $result = core_grade_external::update_grades(",
          "263:             'test',",
          "264:             $course->id,",
          "265:             'mod_assign',",
          "266:             $assigment_cm->id,",
          "267:             0,",
          "268:             array(),",
          "269:             array('hidden' => 1)",
          "270:         );",
          "271:         $this->assertTrue($result == GRADE_UPDATE_OK);",
          "274:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id);",
          "275:         $this->assertEquals($grades->items[0]->hidden, 1);",
          "278:         $this->setUser($student1);",
          "279:         $grades = core_grade_external::get_grades(",
          "280:             $course->id,",
          "281:             'mod_assign',",
          "282:             $assigment_cm->id,",
          "283:             array($student1->id)",
          "284:         );",
          "285:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "286:         $this->assertEquals(null, $this->get_activity($grades, $assigment_cm->id));",
          "289:         $this->setUser($teacher);",
          "290:         $grades = core_grade_external::get_grades(",
          "291:             $course->id,",
          "292:             'mod_assign',",
          "293:             $assigment_cm->id,",
          "294:             array($student1->id)",
          "295:         );",
          "296:         $grades = external_api::clean_returnvalue(core_grade_external::get_grades_returns(), $grades);",
          "297:         $this->assertEquals($student1rawgrade, $this->get_activity_student_grade($grades, $assigment_cm->id, $student1->id));",
          "298:     }",
          "300:     private function get_activity($grades, $cmid) {",
          "301:         foreach ($grades['items'] as $item) {",
          "302:             if ($item['activityid'] == $cmid) {",
          "303:                 return $item;",
          "304:             }",
          "305:         }",
          "306:         return null;",
          "307:     }",
          "309:     private function get_activity_student_grade($grades, $cmid, $studentid) {",
          "310:         $item = $this->get_activity($grades, $cmid);",
          "311:         foreach ($item['grades'] as $grade) {",
          "312:             if ($grade['userid'] == $studentid) {",
          "313:                 return $grade['grade'];",
          "314:             }",
          "315:         }",
          "316:         return null;",
          "317:     }",
          "319:     private function get_outcome($grades, $cmid) {",
          "320:         foreach($grades['outcomes'] as $outcome) {",
          "321:             if ($outcome['activityid'] == $cmid) {",
          "322:                 return $outcome;",
          "323:             }",
          "324:         }",
          "325:         return null;",
          "326:     }",
          "328:     private function get_outcome_student_grade($grades, $cmid, $studentid) {",
          "329:         $outcome = $this->get_outcome($grades, $cmid);",
          "330:         foreach ($outcome['grades'] as $grade) {",
          "331:             if ($grade['userid'] == $studentid) {",
          "332:                 return $grade['grade'];",
          "333:             }",
          "334:         }",
          "335:         return null;",
          "336:     }",
          "341:     public function test_update_grades() {",
          "342:         global $DB;",
          "344:         $this->resetAfterTest(true);",
          "346:         $assignmentname = 'The assignment';",
          "347:         $student1rawgrade = 10;",
          "348:         $student2rawgrade = 20;",
          "349:         list($course, $assignment, $student1, $student2, $teacher, $parent) = $this->load_test_data($assignmentname, $student1rawgrade, $student2rawgrade);",
          "350:         $assigment_cm = get_coursemodule_from_id('assign', $assignment->id, 0, false, MUST_EXIST);",
          "352:         $this->setUser($teacher);",
          "355:         $changedmax = 93;",
          "356:         $result = core_grade_external::update_grades(",
          "357:             'test',",
          "358:             $course->id,",
          "359:             'mod_assign',",
          "360:             $assigment_cm->id,",
          "361:             0,",
          "362:             array(),",
          "363:             array('grademax' => $changedmax)",
          "364:         );",
          "365:         $this->assertTrue($result == GRADE_UPDATE_OK);",
          "366:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id);",
          "367:         $this->assertTrue($grades->items[0]->grademax == $changedmax);",
          "370:         $student1grade = 23;",
          "371:         $result = core_grade_external::update_grades(",
          "372:             'test',",
          "373:             $course->id,",
          "374:             'mod_assign',",
          "375:             $assigment_cm->id,",
          "376:             0,",
          "377:             array(array('studentid' => $student1->id, 'grade' => $student1grade))",
          "378:         );",
          "379:         $this->assertTrue($result == GRADE_UPDATE_OK);",
          "380:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id, array($student1->id));",
          "381:         $this->assertTrue($grades->items[0]->grades[$student1->id]->grade == $student1grade);",
          "384:         $student1grade = 11;",
          "385:         $student2grade = 13;",
          "386:         $result = core_grade_external::update_grades(",
          "387:             'test',",
          "388:             $course->id,",
          "389:             'mod_assign',",
          "390:             $assigment_cm->id,",
          "391:             0,",
          "392:             array(",
          "393:                 array('studentid' => $student1->id, 'grade' => $student1grade),",
          "394:                 array('studentid' => $student2->id, 'grade' => $student2grade)",
          "395:             )",
          "396:         );",
          "397:         $this->assertTrue($result == GRADE_UPDATE_OK);",
          "398:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id, array($student1->id, $student2->id));",
          "399:         $this->assertTrue($grades->items[0]->grades[$student1->id]->grade == $student1grade);",
          "400:         $this->assertTrue($grades->items[0]->grades[$student2->id]->grade == $student2grade);",
          "403:         $this->setUser($student1);",
          "404:         try {",
          "405:             $student1grade = 17;",
          "406:             $result = core_grade_external::update_grades(",
          "407:                 'test',",
          "408:                 $course->id,",
          "409:                 'mod_assign',",
          "410:                 $assigment_cm->id,",
          "411:                 0,",
          "412:                 array( array('studentid' => $student1->id, 'grade' => $student1grade))",
          "413:             );",
          "414:             $this->fail('moodle_exception expected');",
          "415:         } catch (moodle_exception $ex) {",
          "416:             $this->assertTrue(true);",
          "417:         }",
          "420:         $this->setUser($parent);",
          "421:         try {",
          "422:             $student1grade = 13;",
          "423:             $result = core_grade_external::update_grades(",
          "424:                 'test',",
          "425:                 $course->id,",
          "426:                 'mod_assign',",
          "427:                 $assigment_cm->id,",
          "428:                 0,",
          "429:                 array( array('studentid' => $student1->id, 'grade' => $student1grade))",
          "430:             );",
          "431:             $this->fail('moodle_exception expected');",
          "432:         } catch (moodle_exception $ex) {",
          "433:             $this->assertTrue(true);",
          "434:         }",
          "437:         $this->setUser($student1);",
          "438:         try {",
          "439:             $result = core_grade_external::update_grades(",
          "440:                 'test',",
          "441:                 $course->id,",
          "442:                 'mod_assign',",
          "443:                 $assigment_cm->id,",
          "444:                 0,",
          "445:                 array(),",
          "446:                 array('hidden' => 1)",
          "447:             );",
          "448:             $this->fail('moodle_exception expected');",
          "449:         } catch (moodle_exception $ex) {",
          "450:             $this->assertTrue(true);",
          "451:         }",
          "454:         $studentrole = $DB->get_record('role', array('shortname'=>'student'));",
          "455:         $coursecontext = context_course::instance($course->id);",
          "456:         assign_capability('moodle/grade:hide', CAP_ALLOW, $studentrole->id, $coursecontext->id);",
          "457:         accesslib_clear_all_caches_for_unit_testing();",
          "460:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id);",
          "461:         $this->assertTrue($grades->items[0]->hidden == 0);",
          "463:         $result = core_grade_external::update_grades(",
          "464:             'test',",
          "465:             $course->id,",
          "466:             'mod_assign',",
          "467:             $assigment_cm->id,",
          "468:             0,",
          "469:             array(),",
          "470:             array('hidden' => 1)",
          "471:         );",
          "472:         $this->assertTrue($result == GRADE_UPDATE_OK);",
          "473:         $grades = grade_get_grades($course->id, 'mod', 'assign', $assignment->id);",
          "474:         $this->assertTrue($grades->items[0]->hidden == 1);",
          "475:     }",
          "477: }",
          "",
          "---------------"
        ],
        "lib/gradelib.php||lib/gradelib.php": [
          "File: lib/gradelib.php -> lib/gradelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:     global $CFG;",
          "343:     $return = new stdClass();",
          "",
          "[Removed Lines]",
          "340: function grade_get_grades($courseid, $itemtype, $itemmodule, $iteminstance, $userid_or_ids=null) {",
          "",
          "[Added Lines]",
          "340: function grade_get_grades($courseid, $itemtype = null, $itemmodule = null, $iteminstance = null, $userid_or_ids=null) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:         }",
          "354:     }",
          "357:         foreach ($grade_items as $grade_item) {",
          "358:             $decimalpoints = null;",
          "360:             if (empty($grade_item->outcomeid)) {",
          "362:                 $item = new stdClass();",
          "363:                 $item->itemnumber = $grade_item->itemnumber;",
          "364:                 $item->scaleid    = $grade_item->scaleid;",
          "365:                 $item->name       = $grade_item->get_name();",
          "366:                 $item->grademin   = $grade_item->grademin;",
          "",
          "[Removed Lines]",
          "356:     if ($grade_items = grade_item::fetch_all(array('itemtype'=>$itemtype, 'itemmodule'=>$itemmodule, 'iteminstance'=>$iteminstance, 'courseid'=>$courseid))) {",
          "",
          "[Added Lines]",
          "356:     $params = array('courseid'=>$courseid);",
          "357:     if (!empty($itemtype)) {",
          "358:         $params['itemtype'] = $itemtype;",
          "359:     }",
          "360:     if (!empty($itemmodule)) {",
          "361:         $params['itemmodule'] = $itemmodule;",
          "362:     }",
          "363:     if (!empty($iteminstance)) {",
          "364:         $params['iteminstance'] = $iteminstance;",
          "365:     }",
          "366:     if ($grade_items = grade_item::fetch_all($params)) {",
          "373:                 $item->id = $grade_item->id;",
          "375:                 $item->itemtype  = $grade_item->itemtype;",
          "376:                 $item->itemmodule = $grade_item->itemmodule;",
          "377:                 $item->iteminstance = $grade_item->iteminstance;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "461:                 $outcome = new stdClass();",
          "462:                 $outcome->itemnumber = $grade_item->itemnumber;",
          "463:                 $outcome->scaleid    = $grade_outcome->scaleid;",
          "464:                 $outcome->name       = $grade_outcome->get_name();",
          "465:                 $outcome->locked     = $grade_item->is_locked();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "476:                 $outcome->id = $grade_item->id;",
          "478:                 $outcome->itemtype   = $grade_item->itemtype;",
          "479:                 $outcome->itemmodule = $grade_item->itemmodule;",
          "480:                 $outcome->iteminstance = $grade_item->iteminstance;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "925f4d6b16eaa4bc6a199aaddcbc8acc59f9bb04",
      "candidate_info": {
        "commit_hash": "925f4d6b16eaa4bc6a199aaddcbc8acc59f9bb04",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/925f4d6b16eaa4bc6a199aaddcbc8acc59f9bb04",
        "files": [
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-44020 Add core_calendar_get_calendar_events function to the moodle mobile core service",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/services.php||lib/db/services.php"
          ],
          "candidate": [
            "lib/db/services.php||lib/db/services.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:             'moodle_message_send_instantmessages',",
          "906:             'core_course_get_contents',",
          "907:             'core_get_component_strings',",
          "909:         'enabled' => 0,",
          "910:         'restrictedusers' => 0,",
          "911:         'shortname' => MOODLE_OFFICIAL_MOBILE_SERVICE,",
          "",
          "[Removed Lines]",
          "908:             'core_user_add_user_device'),",
          "",
          "[Added Lines]",
          "908:             'core_user_add_user_device',",
          "909:             'core_calendar_get_calendar_events'),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2014020700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2014020700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}