{
  "cve_id": "CVE-2018-5334",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.3 and 2.2.0 to 2.2.11, the IxVeriWave file parser could crash. This was addressed in wiretap/vwr.c by correcting the signature timestamp bounds checks.",
  "repo": "wireshark/wireshark",
  "patch_hash": "5dbc1d8d1c14aea4fda820567d6ac0e226027ed3",
  "patch_info": {
    "commit_hash": "5dbc1d8d1c14aea4fda820567d6ac0e226027ed3",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/5dbc1d8d1c14aea4fda820567d6ac0e226027ed3",
    "files": [
      "wiretap/vwr.c"
    ],
    "message": "IxVeriWave: Adjust signature timestamp checking.\n\nMove the signature timestamp bounds checks inside get_signature_ts. Fix\nwhat appears to be an off-by-one error.\n\nBug: 14297\nChange-Id: I9ca1762a8418e47153f270a1a62b2d0d3a800130\nReviewed-on: https://code.wireshark.org/review/25229\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "wiretap/vwr.c||wiretap/vwr.c"
    ]
  },
  "patch_diff": {
    "wiretap/vwr.c||wiretap/vwr.c": [
      "File: wiretap/vwr.c -> wiretap/vwr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "808:                                                int, int *, gchar **);",
      "810: static int          find_signature(const guint8 *, int, int, register guint32, register guint8);",
      "812: static float        get_legacy_rate(guint8);",
      "813: static float        get_ht_rate(guint8, guint16);",
      "814: static float        get_vht_rate(guint8, guint16, guint8);",
      "",
      "[Removed Lines]",
      "811: static guint64      get_signature_ts(const guint8 *, int);",
      "",
      "[Added Lines]",
      "811: static guint64      get_signature_ts(const guint8 *, int, int);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1270:     sig_off = find_signature(m_ptr, rec_size - 6, pay_off, flow_id, flow_seq);",
      "1273:     else",
      "1274:         sig_ts = 0;",
      "",
      "[Removed Lines]",
      "1271:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - v22_W_STATS_LEN)))",
      "1272:         sig_ts = get_signature_ts(m_ptr, sig_off);",
      "",
      "[Added Lines]",
      "1271:     if (m_ptr[sig_off] == 0xdd)",
      "1272:         sig_ts = get_signature_ts(m_ptr, sig_off, rec_size - v22_W_STATS_LEN);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1669:     m_ptr = &(rec[8+12]);",
      "1671:     sig_off = find_signature(m_ptr, rec_size - 20, pay_off, flow_id, flow_seq);",
      "1674:     else",
      "1675:         sig_ts = 0;",
      "",
      "[Removed Lines]",
      "1672:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - vVW510021_W_STATS_TRAILER_LEN)))",
      "1673:         sig_ts = get_signature_ts(m_ptr, sig_off);",
      "",
      "[Added Lines]",
      "1672:     if (m_ptr[sig_off] == 0xdd)",
      "1673:         sig_ts = get_signature_ts(m_ptr, sig_off, rec_size - vVW510021_W_STATS_TRAILER_LEN);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2168:         m_ptr = &(rec[stats_offset+8+12]);",
      "2170:         sig_off = find_signature(m_ptr, rec_size - 20, pay_off, flow_id, flow_seq);",
      "2173:         else",
      "2174:             sig_ts = 0;",
      "",
      "[Removed Lines]",
      "2171:         if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - vVW510021_W_STATS_TRAILER_LEN)))",
      "2172:             sig_ts = get_signature_ts(m_ptr, sig_off);",
      "",
      "[Added Lines]",
      "2171:         if (m_ptr[sig_off] == 0xdd)",
      "2172:             sig_ts = get_signature_ts(m_ptr, sig_off, rec_size - vVW510021_W_STATS_TRAILER_LEN);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2692:     }",
      "2694:     sig_off = find_signature(m_ptr, rec_size, pay_off, flow_id, flow_seq);",
      "2697:     else",
      "2698:         sig_ts = 0;",
      "",
      "[Removed Lines]",
      "2695:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= msdu_length) && (f_flow != 0))",
      "2696:         sig_ts = get_signature_ts(m_ptr, sig_off);",
      "",
      "[Added Lines]",
      "2695:     if ((m_ptr[sig_off] == 0xdd) && (f_flow != 0))",
      "2696:         sig_ts = get_signature_ts(m_ptr, sig_off, msdu_length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3233: }",
      "3237: {",
      "3238:     int     ts_offset;",
      "3239:     guint64 sig_ts;",
      "3241:     if (m_ptr[sig_off + 15] == 0xe2)",
      "3242:         ts_offset = 5;",
      "3243:     else",
      "",
      "[Removed Lines]",
      "3236: guint64 get_signature_ts(const guint8 *m_ptr,int sig_off)",
      "",
      "[Added Lines]",
      "3236: guint64 get_signature_ts(const guint8 *m_ptr,int sig_off, int sig_max)",
      "3241:     if (sig_off + 15 >= sig_max)",
      "3242:         return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6b2f2a6ce0d461d0a930077c11323708611acd6",
      "candidate_info": {
        "commit_hash": "d6b2f2a6ce0d461d0a930077c11323708611acd6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/d6b2f2a6ce0d461d0a930077c11323708611acd6",
        "files": [
          "wiretap/vwr.c"
        ],
        "message": "IxVeriWave: Adjust signature timestamp checking.\n\nMove the signature timestamp bounds checks inside get_signature_ts. Fix\nwhat appears to be an off-by-one error.\n\nBug: 14297\nChange-Id: I9ca1762a8418e47153f270a1a62b2d0d3a800130\nReviewed-on: https://code.wireshark.org/review/25229\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 5dbc1d8d1c14aea4fda820567d6ac0e226027ed3)\nReviewed-on: https://code.wireshark.org/review/25245\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
        "before_after_code_files": [
          "wiretap/vwr.c||wiretap/vwr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/vwr.c||wiretap/vwr.c"
          ],
          "candidate": [
            "wiretap/vwr.c||wiretap/vwr.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/vwr.c||wiretap/vwr.c": [
          "File: wiretap/vwr.c -> wiretap/vwr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "808:                                                int, int *, gchar **);",
          "810: static int          find_signature(const guint8 *, int, int, register guint32, register guint8);",
          "812: static float        get_legacy_rate(guint8);",
          "813: static float        get_ht_rate(guint8, guint16);",
          "814: static float        get_vht_rate(guint8, guint16, guint8);",
          "",
          "[Removed Lines]",
          "811: static guint64      get_signature_ts(const guint8 *, int);",
          "",
          "[Added Lines]",
          "811: static guint64      get_signature_ts(const guint8 *, int, int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1268:     sig_off = find_signature(m_ptr, rec_size - 6, pay_off, flow_id, flow_seq);",
          "1271:     else",
          "1272:         sig_ts = 0;",
          "",
          "[Removed Lines]",
          "1269:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - v22_W_STATS_LEN)))",
          "1270:         sig_ts = get_signature_ts(m_ptr, sig_off);",
          "",
          "[Added Lines]",
          "1269:     if (m_ptr[sig_off] == 0xdd)",
          "1270:         sig_ts = get_signature_ts(m_ptr, sig_off, rec_size - v22_W_STATS_LEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1665:     m_ptr = &(rec[8+12]);",
          "1667:     sig_off = find_signature(m_ptr, rec_size - 20, pay_off, flow_id, flow_seq);",
          "1670:     else",
          "1671:         sig_ts = 0;",
          "",
          "[Removed Lines]",
          "1668:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - vVW510021_W_STATS_TRAILER_LEN)))",
          "1669:         sig_ts = get_signature_ts(m_ptr, sig_off);",
          "",
          "[Added Lines]",
          "1668:     if (m_ptr[sig_off] == 0xdd)",
          "1669:         sig_ts = get_signature_ts(m_ptr, sig_off, rec_size - vVW510021_W_STATS_TRAILER_LEN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2154:         m_ptr = &(rec[stats_offset+8+12]);",
          "2156:         sig_off = find_signature(m_ptr, rec_size - 20, pay_off, flow_id, flow_seq);",
          "2159:         else",
          "2160:             sig_ts = 0;",
          "",
          "[Removed Lines]",
          "2157:         if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - vVW510021_W_STATS_TRAILER_LEN)))",
          "2158:             sig_ts = get_signature_ts(m_ptr, sig_off);",
          "",
          "[Added Lines]",
          "2157:         if (m_ptr[sig_off] == 0xdd)",
          "2158:             sig_ts = get_signature_ts(m_ptr, sig_off, rec_size - vVW510021_W_STATS_TRAILER_LEN);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2678:     }",
          "2680:     sig_off = find_signature(m_ptr, rec_size, pay_off, flow_id, flow_seq);",
          "2683:     else",
          "2684:         sig_ts = 0;",
          "",
          "[Removed Lines]",
          "2681:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= msdu_length) && (f_flow != 0))",
          "2682:         sig_ts = get_signature_ts(m_ptr, sig_off);",
          "",
          "[Added Lines]",
          "2681:     if ((m_ptr[sig_off] == 0xdd) && (f_flow != 0))",
          "2682:         sig_ts = get_signature_ts(m_ptr, sig_off, msdu_length);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3219: }",
          "3223: {",
          "3224:     int     ts_offset;",
          "3225:     guint64 sig_ts;",
          "3227:     if (m_ptr[sig_off + 15] == 0xe2)",
          "3228:         ts_offset = 5;",
          "3229:     else",
          "",
          "[Removed Lines]",
          "3222: guint64 get_signature_ts(const guint8 *m_ptr,int sig_off)",
          "",
          "[Added Lines]",
          "3222: guint64 get_signature_ts(const guint8 *m_ptr,int sig_off, int sig_max)",
          "3227:     if (sig_off + 15 >= sig_max)",
          "3228:         return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc308c05ba0673460fe80873b22d296880ee996d",
      "candidate_info": {
        "commit_hash": "dc308c05ba0673460fe80873b22d296880ee996d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/dc308c05ba0673460fe80873b22d296880ee996d",
        "files": [
          "wiretap/vwr.c"
        ],
        "message": "IxVeriWave: Adjust signature timestamp checking.\n\nMove the signature timestamp bounds checks inside get_signature_ts. Fix\nwhat appears to be an off-by-one error.\n\nManually backported from 5dbc1d8d1c.\n\nBug: 14297\nChange-Id: I6455162d12fd0854ffe6daaf624eeaf94f6e32b0\nReviewed-on: https://code.wireshark.org/review/25246\nPetri-Dish: Gerald Combs <gerald@wireshark.org>\nTested-by: Petri Dish Buildbot\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
        "before_after_code_files": [
          "wiretap/vwr.c||wiretap/vwr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/vwr.c||wiretap/vwr.c"
          ],
          "candidate": [
            "wiretap/vwr.c||wiretap/vwr.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/vwr.c||wiretap/vwr.c": [
          "File: wiretap/vwr.c -> wiretap/vwr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:                                                int, int *, gchar **);",
          "583: static int          find_signature(const guint8 *, int, int, register guint32, register guint8);",
          "585: static float        getRate( guint8 plcpType, guint8 mcsIndex, guint16 rflags, guint8 nss );",
          "",
          "[Removed Lines]",
          "584: static guint64      get_signature_ts(const guint8 *, int);",
          "",
          "[Added Lines]",
          "584: static guint64      get_signature_ts(const guint8 *, int, int);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:     sig_off = find_signature(m_ptr, rec_size - 6, pay_off, flow_id, flow_seq);",
          "1038:     else",
          "1039:         sig_ts = 0;",
          "",
          "[Removed Lines]",
          "1036:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - v22_W_STATS_LEN)))",
          "1037:         sig_ts = get_signature_ts(m_ptr, sig_off);",
          "",
          "[Added Lines]",
          "1036:     if (m_ptr[sig_off] == 0xdd)",
          "1037:         sig_ts = get_signature_ts(m_ptr, sig_off, rec_size - v22_W_STATS_LEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1453:     m_ptr = &(rec[8+12]);",
          "1455:     sig_off = find_signature(m_ptr, rec_size - 20, pay_off, flow_id, flow_seq);",
          "1458:     else",
          "1459:         sig_ts = 0;",
          "",
          "[Removed Lines]",
          "1456:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - vVW510021_W_STATS_TRAILER_LEN)))",
          "1457:         sig_ts = get_signature_ts(m_ptr, sig_off);",
          "",
          "[Added Lines]",
          "1456:     if (m_ptr[sig_off] == 0xdd)",
          "1457:         sig_ts = get_signature_ts(m_ptr, sig_off, rec_size - vVW510021_W_STATS_TRAILER_LEN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1799:     }",
          "1801:     sig_off = find_signature(m_ptr, rec_size, pay_off, flow_id, flow_seq);",
          "1804:     else",
          "1805:         sig_ts = 0;",
          "",
          "[Removed Lines]",
          "1802:     if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= msdu_length) && (f_flow != 0))",
          "1803:         sig_ts = get_signature_ts(m_ptr, sig_off);",
          "",
          "[Added Lines]",
          "1802:     if ((m_ptr[sig_off] == 0xdd) && (f_flow != 0))",
          "1803:         sig_ts = get_signature_ts(m_ptr, sig_off, msdu_length);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2275: }",
          "2279: {",
          "2280:     int     ts_offset;",
          "2281:     guint64 sig_ts;",
          "2283:     if (m_ptr[sig_off + 15] == 0xe2)",
          "2284:         ts_offset = 5;",
          "2285:     else",
          "",
          "[Removed Lines]",
          "2278: guint64 get_signature_ts(const guint8 *m_ptr,int sig_off)",
          "",
          "[Added Lines]",
          "2278: guint64 get_signature_ts(const guint8 *m_ptr,int sig_off, int sig_max)",
          "2283:     if (sig_off + 15 >= sig_max)",
          "2284:         return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc9b38a734ac64603e78fe2dc00ad5bdc214e3ff",
      "candidate_info": {
        "commit_hash": "cc9b38a734ac64603e78fe2dc00ad5bdc214e3ff",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/cc9b38a734ac64603e78fe2dc00ad5bdc214e3ff",
        "files": [
          "epan/dissectors/packet-ixveriwave.c",
          "wiretap/vwr.c",
          "wiretap/wtap-int.h"
        ],
        "message": "Improve ixveriwave dissector\n\nBug: 13652\nBug: 12535\nChange-Id: Ie4c140acbe983a585776bc1430cf407cdcd6e07a\nReviewed-on: https://code.wireshark.org/review/21356\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "epan/dissectors/packet-ixveriwave.c||epan/dissectors/packet-ixveriwave.c",
          "wiretap/vwr.c||wiretap/vwr.c",
          "wiretap/wtap-int.h||wiretap/wtap-int.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/vwr.c||wiretap/vwr.c"
          ],
          "candidate": [
            "wiretap/vwr.c||wiretap/vwr.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-ixveriwave.c||epan/dissectors/packet-ixveriwave.c": [
          "File: epan/dissectors/packet-ixveriwave.c -> epan/dissectors/packet-ixveriwave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include \"config.h\"",
          "27: #include <epan/packet.h>",
          "28: #include <epan/proto_data.h>",
          "30: #include <wiretap/wtap.h>",
          "32: void proto_register_ixveriwave(void);",
          "33: void proto_reg_handoff_ixveriwave(void);",
          "35: static void ethernettap_dissect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *tap_tree);",
          "38: typedef struct {",
          "39:     guint32 previous_frame_num;",
          "",
          "[Removed Lines]",
          "36: static void wlantap_dissect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *tap_tree, guint16 vw_msdu_length);",
          "",
          "[Added Lines]",
          "27: #include <math.h>",
          "31: #include <epan/expert.h>",
          "32: #include <epan/crc32-tvb.h>",
          "41: static void wlantap_dissect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *tap_tree, guint16 vw_msdu_length, guint8 cmd_type, guint8 mgmt_byte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: #define VW_RADIOTAP_FPGA_VER_vVW510021_11n  0x000D",
          "75: #define FLAGS_SHORTPRE                      0x0002  /* sent/received",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: #define IEEE80211_RADIOTAP_F_DATAPAD        0x0020  /* frame has padding between",
          "87: #define IEEE80211_RADIOTAP_F_FRAG           0x0008  /* sent/received",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102: #define ETHERNET_PORT           1",
          "103: #define WLAN_PORT               0",
          "105: static int proto_ixveriwave = -1;",
          "106: static dissector_handle_t ethernet_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #define VW_INFO_OFF                         48",
          "135: #define IFG_MAX_VAL                         0xEE6B2800",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119: static int hf_ixveriwave_vw_latency = -1;",
          "120: static int hf_ixveriwave_vw_pktdur = -1;",
          "121: static int hf_ixveriwave_vw_ifg = -1;",
          "122: static int hf_ixveriwave = -1;",
          "123: static int hf_ixveriwave_vw_startt = -1;",
          "124: static int hf_ixveriwave_vw_endt = -1;",
          "126: static gint ett_commontap = -1;",
          "127: static gint ett_commontap_times = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: static int hf_ixveriwave_vw_ifg_neg = -1;",
          "158: static int hf_ixveriwave_vw_delay = -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "176: static int hf_radiotap_mcsindex = -1;",
          "177: static int hf_radiotap_plcptype = -1;",
          "178: static int hf_radiotap_nss = -1;",
          "180: static int hf_radiotap_dbm_antb = -1;",
          "181: static int hf_radiotap_dbm_antc = -1;",
          "182: static int hf_radiotap_dbm_antd = -1;",
          "184: static int hf_radiotap_flags_preamble = -1;",
          "185: static int hf_radiotap_flags_wep = -1;",
          "187: static int hf_radiotap_flags_ht = -1;",
          "188: static int hf_radiotap_flags_vht = -1;",
          "189: static int hf_radiotap_flags_40mhz = -1;",
          "",
          "[Removed Lines]",
          "179: static int hf_radiotap_dbm_antsignal = -1;",
          "186: static int hf_radiotap_flags_fcs_present = -1;",
          "",
          "[Added Lines]",
          "213: static int hf_radiotap_dbm_anta = -1;",
          "217: static int hf_radiotap_dbm_tx_anta = -1;",
          "218: static int hf_radiotap_dbm_tx_antb = -1;",
          "219: static int hf_radiotap_dbm_tx_antc = -1;",
          "220: static int hf_radiotap_dbm_tx_antd = -1;",
          "222: static int hf_radiotap_flags_cfp = -1;",
          "225: static int hf_radiotap_flags_frag = -1;",
          "226: static int hf_radiotap_flags_fcs = -1;",
          "227: static int hf_radiotap_flags_datapad = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "197: static int hf_radiotap_vht_grp_id = -1;",
          "198: static int hf_radiotap_vht_su_nsts = -1;",
          "199: static int hf_radiotap_vht_su_partial_aid = -1;",
          "200: static int hf_radiotap_vht_u0_nsts = -1;",
          "201: static int hf_radiotap_vht_u1_nsts = -1;",
          "202: static int hf_radiotap_vht_u2_nsts = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: static int hf_radiotap_vht_su_coding_type = -1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "204: static int hf_radiotap_vht_beamformed = -1;",
          "205: static int hf_radiotap_vht_user_pos = -1;",
          "206: static int hf_radiotap_vht_mu_mimo_flg = -1;",
          "207: static int hf_radiotap_vht_u0_coding_type = -1;",
          "208: static int hf_radiotap_vht_u1_coding_type = -1;",
          "209: static int hf_radiotap_vht_u2_coding_type = -1;",
          "210: static int hf_radiotap_vht_u3_coding_type = -1;",
          "212: static int hf_radiotap_vw_info_tx_bit10 = -1;",
          "213: static int hf_radiotap_vw_info_tx_bit11 = -1;",
          "214: static int hf_radiotap_vw_info_tx_bit12 = -1;",
          "215: static int hf_radiotap_vw_info_tx_bit13 = -1;",
          "216: static int hf_radiotap_vw_info_tx_bit14 = -1;",
          "217: static int hf_radiotap_vw_info_tx_bit15 = -1;",
          "219: static int hf_radiotap_vw_info_rx_2_bit8 = -1;",
          "220: static int hf_radiotap_vw_info_rx_2_bit9 = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: static int hf_radiotap_vht_su_mimo_flg = -1;",
          "255: static int hf_radiotap_vw_info_tx_bit0 = -1;",
          "256: static int hf_radiotap_vw_info_tx_bit1 = -1;",
          "257: static int hf_radiotap_vw_info_tx_bit3 = -1;",
          "258: static int hf_radiotap_vw_info_tx_bit4 = -1;",
          "259: static int hf_radiotap_vw_info_tx_bit5 = -1;",
          "260: static int hf_radiotap_vw_info_tx_bit6 = -1;",
          "261: static int hf_radiotap_vw_info_tx_bit7 = -1;",
          "262: static int hf_radiotap_vw_info_tx_bit8 = -1;",
          "263: static int hf_radiotap_vw_info_tx_bit9 = -1;",
          "270: static const int *radiotap_info_tx_fields[] = {",
          "271:     &hf_radiotap_vw_info_tx_bit0,",
          "272:     &hf_radiotap_vw_info_tx_bit1,",
          "273:     &hf_radiotap_vw_info_tx_bit3,",
          "274:     &hf_radiotap_vw_info_tx_bit4,",
          "275:     &hf_radiotap_vw_info_tx_bit5,",
          "276:     &hf_radiotap_vw_info_tx_bit6,",
          "277:     &hf_radiotap_vw_info_tx_bit7,",
          "278:     &hf_radiotap_vw_info_tx_bit8,",
          "279:     &hf_radiotap_vw_info_tx_bit9,",
          "280:     &hf_radiotap_vw_info_tx_bit10,",
          "281:     &hf_radiotap_vw_info_tx_bit11,",
          "282:     &hf_radiotap_vw_info_tx_bit12,",
          "283:     &hf_radiotap_vw_info_tx_bit13,",
          "284:     &hf_radiotap_vw_info_tx_bit14,",
          "285:     &hf_radiotap_vw_info_tx_bit15,",
          "286:     NULL,",
          "287: };",
          "289: static int hf_radiotap_vw_info_tx = -1;",
          "290: static int hf_radiotap_vw_info_rx = -1;",
          "291: static int hf_radiotap_vw_info_rx_bit0 = -1;",
          "292: static int hf_radiotap_vw_info_rx_bit1 = -1;",
          "293: static int hf_radiotap_vw_info_rx_bit3 = -1;",
          "294: static int hf_radiotap_vw_info_rx_bit4 = -1;",
          "295: static int hf_radiotap_vw_info_rx_bit5 = -1;",
          "296: static int hf_radiotap_vw_info_rx_bit6 = -1;",
          "297: static int hf_radiotap_vw_info_rx_bit7 = -1;",
          "298: static int hf_radiotap_vw_info_rx_bit8 = -1;",
          "299: static int hf_radiotap_vw_info_rx_bit9 = -1;",
          "300: static int hf_radiotap_vw_info_rx_bit10 = -1;",
          "301: static int hf_radiotap_vw_info_rx_bit11 = -1;",
          "302: static int hf_radiotap_vw_info_rx_bit12 = -1;",
          "303: static int hf_radiotap_vw_info_rx_bit13 = -1;",
          "304: static int hf_radiotap_vw_info_rx_bit14 = -1;",
          "305: static int hf_radiotap_vw_info_rx_bit15 = -1;",
          "306: static int hf_radiotap_vw_info_rx_bit16 = -1;",
          "307: static int hf_radiotap_vw_info_rx_bit17 = -1;",
          "308: static int hf_radiotap_vw_info_rx_bit18 = -1;",
          "309: static int hf_radiotap_vw_info_rx_bit19 = -1;",
          "310: static int hf_radiotap_vw_info_rx_bit20 = -1;",
          "311: static const int *radiotap_info_rx_fields[] = {",
          "312:     &hf_radiotap_vw_info_rx_bit0,",
          "313:     &hf_radiotap_vw_info_rx_bit1,",
          "314:     &hf_radiotap_vw_info_rx_bit3,",
          "315:     &hf_radiotap_vw_info_rx_bit4,",
          "316:     &hf_radiotap_vw_info_rx_bit5,",
          "317:     &hf_radiotap_vw_info_rx_bit6,",
          "318:     &hf_radiotap_vw_info_rx_bit7,",
          "319:     &hf_radiotap_vw_info_rx_bit8,",
          "320:     &hf_radiotap_vw_info_rx_bit9,",
          "321:     &hf_radiotap_vw_info_rx_bit10,",
          "322:     &hf_radiotap_vw_info_rx_bit11,",
          "323:     &hf_radiotap_vw_info_rx_bit12,",
          "324:     &hf_radiotap_vw_info_rx_bit13,",
          "325:     &hf_radiotap_vw_info_rx_bit14,",
          "326:     &hf_radiotap_vw_info_rx_bit15,",
          "327:     &hf_radiotap_vw_info_rx_bit16,",
          "328:     &hf_radiotap_vw_info_rx_bit17,",
          "329:     &hf_radiotap_vw_info_rx_bit18,",
          "330:     &hf_radiotap_vw_info_rx_bit19,",
          "331:     &hf_radiotap_vw_info_rx_bit20,",
          "332:     NULL,",
          "333: };",
          "335: static int hf_radiotap_vw_info_tx_2_bit10 = -1;",
          "336: static int hf_radiotap_vw_info_tx_2_bit11 = -1;",
          "337: static int hf_radiotap_vw_info_tx_2_bit12 = -1;",
          "338: static int hf_radiotap_vw_info_tx_2_bit13 = -1;",
          "339: static int hf_radiotap_vw_info_tx_2_bit14 = -1;",
          "340: static int hf_radiotap_vw_info_tx_2_bit15 = -1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "225: static int hf_radiotap_vw_info_rx_2_bit14 = -1;",
          "226: static int hf_radiotap_vw_info_rx_2_bit15 = -1;",
          "228: static int hf_radiotap_vw_errors_rx_2_bit0 = -1;",
          "229: static int hf_radiotap_vw_errors_rx_2_bit1 = -1;",
          "230: static int hf_radiotap_vw_errors_rx_2_bit2 = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351: static int hf_radiotap_vw_errors_tx_bit01 = -1;",
          "352: static int hf_radiotap_vw_errors_tx_bit05 = -1;",
          "353: static int hf_radiotap_vw_errors_tx_bit8 = -1;",
          "354: static int hf_radiotap_vw_errors_tx_bit9 = -1;",
          "355: static int hf_radiotap_vw_errors_tx_bit10 = -1;",
          "356: static int hf_radiotap_vw_errors_tx_bit31 = -1;",
          "357: static int hf_radiotap_vw_tx_retrycount = -1;",
          "358: static int hf_radiotap_vw_tx_factorydebug = -1;",
          "360: static int hf_radiotap_vw_errors_tx_bit1 = -1;",
          "361: static int hf_radiotap_vw_errors_tx_bit5 = -1;",
          "363: static int hf_radiotap_vw_errors_rx_bit0 = -1;",
          "364: static int hf_radiotap_vw_errors_rx_bit1 = -1;",
          "365: static int hf_radiotap_vw_errors_rx_bit2 = -1;",
          "366: static int hf_radiotap_vw_errors_rx_bit3 = -1;",
          "367: static int hf_radiotap_vw_errors_rx_bit4 = -1;",
          "368: static int hf_radiotap_vw_errors_rx_bit5 = -1;",
          "369: static int hf_radiotap_vw_errors_rx_bit6 = -1;",
          "370: static int hf_radiotap_vw_errors_rx_bit7 = -1;",
          "371: static int hf_radiotap_vw_errors_rx_bit8 = -1;",
          "372: static int hf_radiotap_vw_errors_rx_bit9 = -1;",
          "373: static int hf_radiotap_vw_errors_rx_bit10 = -1;",
          "374: static int hf_radiotap_vw_errors_rx_bit11 = -1;",
          "375: static int hf_radiotap_vw_errors_rx_bit12 = -1;",
          "376: static int hf_radiotap_vw_errors_rx_bit14 = -1;",
          "377: static int hf_radiotap_vw_errors_rx_bit15 = -1;",
          "378: static int hf_radiotap_vw_errors_rx_bit16 = -1;",
          "379: static int hf_radiotap_vw_errors_rx_bit17 = -1;",
          "380: static int hf_radiotap_vw_errors_rx_bit18 = -1;",
          "381: static int hf_radiotap_vw_errors_rx_bit19 = -1;",
          "382: static int hf_radiotap_vw_errors_rx_bit20 = -1;",
          "383: static int hf_radiotap_vw_errors_rx_bit21 = -1;",
          "384: static int hf_radiotap_vw_errors_rx_bit22 = -1;",
          "385: static int hf_radiotap_vw_errors_rx_bit23 = -1;",
          "386: static int hf_radiotap_vw_errors_rx_bit24 = -1;",
          "387: static int hf_radiotap_vw_errors_rx_bit31 = -1;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "236: static int hf_radiotap_vw_errors_rx_2_bit10 = -1;",
          "237: static int hf_radiotap_vw_errors_rx_2_bit11 = -1;",
          "242: static int hf_radiotap_vwf_txf = -1;",
          "243: static int hf_radiotap_vwf_fcserr = -1;",
          "244: static int hf_radiotap_vwf_dcrerr = -1;",
          "",
          "[Removed Lines]",
          "239: static int hf_radiotap_vw_errors_tx_bit1 = -1;",
          "240: static int hf_radiotap_vw_errors_tx_bit5 = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "248: static gint ett_radiotap_info = -1;",
          "249: static gint ett_radiotap_errors = -1;",
          "250: static gint ett_radiotap_times = -1;",
          "252: static dissector_handle_t ixveriwave_handle;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409: static gint ett_radiotap_layer1 = -1;",
          "410: static gint ett_radiotap_layer2to4 = -1;",
          "411: static gint ett_radiotap_rf = -1;",
          "412: static gint ett_radiotap_plcp = -1;",
          "413: static gint ett_radiotap_infoc = -1;",
          "414: static gint ett_radiotap_contextp = -1;",
          "415: static gint ett_rf_info = -1;",
          "417: static int hf_radiotap_rf_info = -1;",
          "418: static int hf_radiotap_rx = -1;",
          "419: static int hf_radiotap_tx = -1;",
          "420: static int hf_radiotap_modulation = -1;",
          "421: static int hf_radiotap_preamble = -1;",
          "422: static int hf_radiotap_sigbandwidth = -1;",
          "424: static int hf_radiotap_l1infoc = -1;",
          "425: static int hf_radiotap_sigbandwidthmask = -1;",
          "426: static int hf_radiotap_antennaportenergydetect = -1;",
          "427: static int hf_radiotap_mumask = -1;",
          "428: static int hf_radiotap_plcp_info = -1;",
          "429: static int hf_radiotap_l2_l4_info = -1;",
          "431: static int hf_radiotap_rfinfo_rfid = -1;",
          "432: static int hf_radiotap_bssid = -1;",
          "433: static int hf_radiotap_unicastormulticast = -1;",
          "434: static int hf_radiotap_clientidvalid = -1;",
          "435: static int hf_radiotap_bssidvalid = -1;",
          "436: static int hf_radiotap_flowvalid = -1;",
          "437: static int hf_radiotap_l4idvalid = -1;",
          "438: static int hf_radiotap_istypeqos = -1;",
          "439: static int hf_radiotap_containshtfield = -1;",
          "440: static int hf_radiotap_tid = -1;",
          "442: static int hf_radiotap_payloaddecode = -1;",
          "443: static int hf_radiotap_vht_bw = -1;",
          "444: static int hf_radiotap_vht_stbc = -1;",
          "445: static int hf_radiotap_vht_txop_ps_notallowd = -1;",
          "446: static int hf_radiotap_vht_shortgi = -1;",
          "447: static int hf_radiotap_vht_shortginsymdisa = -1;",
          "448: static int hf_radiotap_vht_ldpc_ofdmsymbol = -1;",
          "449: static int hf_radiotap_vht_su_mcs = -1;",
          "450: static int hf_radiotap_vht_crc = -1;",
          "451: static int hf_radiotap_vht_tail = -1;",
          "452: static int hf_radiotap_vht_length = -1;",
          "453: static int hf_radiotap_rfid = -1;",
          "454: static int hf_radiotap_vht_mcs = -1;",
          "455: static int hf_radiotap_parity = -1;",
          "456: static int hf_radiotap_rate = -1;",
          "457: static int hf_radiotap_plcp_length = -1;",
          "458: static int hf_radiotap_feccoding = -1;",
          "459: static int hf_radiotap_aggregation = -1;",
          "460: static int hf_radiotap_notsounding = -1;",
          "461: static int hf_radiotap_smoothing = -1;",
          "462: static int hf_radiotap_ness = -1;",
          "463: static int hf_radiotap_plcp_service = -1;",
          "464: static int hf_radiotap_plcp_signal = -1;",
          "465: static int hf_radiotap_plcp_default = -1;",
          "466: static int hf_radiotap_tx_antennaselect = -1;",
          "467: static int hf_radiotap_tx_stbcselect = -1;",
          "468: static int hf_radiotap_ac = -1;",
          "469: static int hf_radiotap_crc16 = -1;",
          "471: static int hf_radiotap_rfinfo_pfe = -1;",
          "473: static int hf_radiotap_rfinfo_noise = -1;",
          "474: static int hf_radiotap_rfinfo_noise_anta = -1;",
          "475: static int hf_radiotap_rfinfo_noise_antb = -1;",
          "476: static int hf_radiotap_rfinfo_noise_antc = -1;",
          "477: static int hf_radiotap_rfinfo_noise_antd = -1;",
          "479: static int hf_radiotap_rfinfo_snr = -1;",
          "480: static int hf_radiotap_rfinfo_snr_anta = -1;",
          "481: static int hf_radiotap_rfinfo_snr_antb = -1;",
          "482: static int hf_radiotap_rfinfo_snr_antc = -1;",
          "483: static int hf_radiotap_rfinfo_snr_antd = -1;",
          "484: static int hf_radiotap_rfinfo_pfe_anta = -1;",
          "485: static int hf_radiotap_rfinfo_pfe_antb = -1;",
          "486: static int hf_radiotap_rfinfo_pfe_antc = -1;",
          "487: static int hf_radiotap_rfinfo_pfe_antd = -1;",
          "488: static int hf_radiotap_rfinfo_contextpa = -1;",
          "489: static int hf_radiotap_rfinfo_contextpb = -1;",
          "490: static int hf_radiotap_rfinfo_contextpc = -1;",
          "491: static int hf_radiotap_rfinfo_contextpd = -1;",
          "492: static int hf_radiotap_rfinfo_contextpA_bit0 = -1;",
          "493: static int hf_radiotap_rfinfo_contextpA_bit1 = -1;",
          "494: static int hf_radiotap_rfinfo_contextpA_bit2 = -1;",
          "495: static int hf_radiotap_rfinfo_contextpA_bit3 = -1;",
          "496: static int hf_radiotap_rfinfo_contextpA_bit4 = -1;",
          "497: static int hf_radiotap_rfinfo_contextpA_bit5 = -1;",
          "501: static int hf_radiotap_rfinfo_contextpA_bit13 = -1;",
          "503: static int hf_radiotap_rfinfo_contextpB_bit0 = -1;",
          "504: static int hf_radiotap_rfinfo_contextpB_bit1 = -1;",
          "505: static int hf_radiotap_rfinfo_contextpB_bit2 = -1;",
          "506: static int hf_radiotap_rfinfo_contextpB_bit3 = -1;",
          "507: static int hf_radiotap_rfinfo_contextpB_bit4 = -1;",
          "508: static int hf_radiotap_rfinfo_contextpB_bit5 = -1;",
          "509: static int hf_radiotap_rfinfo_contextpB_bit13 = -1;",
          "511: static int hf_radiotap_rfinfo_contextpC_bit0 = -1;",
          "512: static int hf_radiotap_rfinfo_contextpC_bit1 = -1;",
          "513: static int hf_radiotap_rfinfo_contextpC_bit2 = -1;",
          "514: static int hf_radiotap_rfinfo_contextpC_bit3 = -1;",
          "515: static int hf_radiotap_rfinfo_contextpC_bit4 = -1;",
          "516: static int hf_radiotap_rfinfo_contextpC_bit5 = -1;",
          "517: static int hf_radiotap_rfinfo_contextpC_bit13 = -1;",
          "519: static int hf_radiotap_rfinfo_contextpD_bit0 = -1;",
          "520: static int hf_radiotap_rfinfo_contextpD_bit1 = -1;",
          "521: static int hf_radiotap_rfinfo_contextpD_bit2 = -1;",
          "522: static int hf_radiotap_rfinfo_contextpD_bit3 = -1;",
          "523: static int hf_radiotap_rfinfo_contextpD_bit4 = -1;",
          "524: static int hf_radiotap_rfinfo_contextpD_bit5 = -1;",
          "525: static int hf_radiotap_rfinfo_contextpD_bit13 = -1;",
          "527: static int hf_radiotap_rfinfo_avg_evm_sd_siga = -1;",
          "528: static int hf_radiotap_rfinfo_avg_evm_sd_sigb = -1;",
          "529: static int hf_radiotap_rfinfo_avg_evm_sd_sigc = -1;",
          "530: static int hf_radiotap_rfinfo_avg_evm_sd_sigd = -1;",
          "531: static int hf_radiotap_rfinfo_avg_evm_sp_siga = -1;",
          "532: static int hf_radiotap_rfinfo_avg_evm_sp_sigb = -1;",
          "533: static int hf_radiotap_rfinfo_avg_evm_sp_sigc = -1;",
          "534: static int hf_radiotap_rfinfo_avg_evm_sp_sigd = -1;",
          "535: static int hf_radiotap_rfinfo_avg_evm_dd_siga = -1;",
          "536: static int hf_radiotap_rfinfo_avg_evm_dd_sigb = -1;",
          "537: static int hf_radiotap_rfinfo_avg_evm_dd_sigc = -1;",
          "538: static int hf_radiotap_rfinfo_avg_evm_dd_sigd = -1;",
          "539: static int hf_radiotap_rfinfo_avg_evm_dp_siga = -1;",
          "540: static int hf_radiotap_rfinfo_avg_evm_dp_sigb = -1;",
          "541: static int hf_radiotap_rfinfo_avg_evm_dp_sigc = -1;",
          "542: static int hf_radiotap_rfinfo_avg_evm_dp_sigd = -1;",
          "543: static int hf_radiotap_rfinfo_avg_evm_ws_siga = -1;",
          "544: static int hf_radiotap_rfinfo_avg_evm_ws_sigb = -1;",
          "545: static int hf_radiotap_rfinfo_avg_evm_ws_sigc = -1;",
          "546: static int hf_radiotap_rfinfo_avg_evm_ws_sigd = -1;",
          "548: static int hf_radiotap_rfinfo_frameformatA = -1;",
          "549: static int hf_radiotap_rfinfo_frameformatB = -1;",
          "550: static int hf_radiotap_rfinfo_frameformatC = -1;",
          "551: static int hf_radiotap_rfinfo_frameformatD = -1;",
          "552: static int hf_radiotap_rfinfo_sigbwevmA = -1;",
          "553: static int hf_radiotap_rfinfo_sigbwevmB = -1;",
          "554: static int hf_radiotap_rfinfo_sigbwevmC = -1;",
          "555: static int hf_radiotap_rfinfo_sigbwevmD = -1;",
          "556: static int hf_radiotap_rfinfo_legacytypeA = -1;",
          "557: static int hf_radiotap_rfinfo_legacytypeB = -1;",
          "558: static int hf_radiotap_rfinfo_legacytypeC = -1;",
          "559: static int hf_radiotap_rfinfo_legacytypeD = -1;",
          "561: static int hf_radiotap_rfinfo_avg_ws_symbol = -1;",
          "562: static int hf_radiotap_rfinfo_sigdata = -1;",
          "563: static int hf_radiotap_rfinfo_sigpilot = -1;",
          "564: static int hf_radiotap_rfinfo_datadata = -1;",
          "565: static int hf_radiotap_rfinfo_datapilot = -1;",
          "566: static int hf_radiotap_plcp_type = -1;",
          "567: static int hf_radiotap_vht_ndp_flg = -1;",
          "569: static expert_field ei_radiotap_fcs_bad = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "261:     proto_item *ti                          = NULL;",
          "262:     proto_item *vw_times_ti                 = NULL;",
          "263:     proto_tree *vw_times_tree               = NULL;",
          "266:     guint       length_remaining;",
          "267:     guint64     vw_startt=0, vw_endt=0;",
          "268:     guint32     true_length;",
          "271:     tvbuff_t   *next_tvb;",
          "272:     ifg_info   *p_ifg_info;",
          "274:     offset = 0;",
          "277:     length = tvb_get_letohs(tvb, offset + COMMON_LENGTH_OFFSET);",
          "280:     col_clear(pinfo->cinfo, COL_INFO);",
          "284:     col_add_fstr(pinfo->cinfo, COL_INFO, \"%s Capture, Length %u\",",
          "310:         }",
          "322:         }",
          "334:         }",
          "347:         }",
          "359:             if (vw_latency != 0) {",
          "360:                 vw_times_ti = proto_tree_add_float_format(common_tree,",
          "",
          "[Removed Lines]",
          "264:     int         offset, time_tree_offset    = 0;",
          "265:     guint16     version, length;",
          "269:     guint32     vw_latency, vw_pktdur, vw_flowid;",
          "270:     guint16     vw_vcid, vw_msdu_length=0, vw_seqnum;",
          "275:     version = tvb_get_letohs(tvb, offset);",
          "279:     col_add_fstr(pinfo->cinfo, COL_PROTOCOL, \"%s\", version ? \"ETH\" : \"WLAN\");",
          "285:                  version ? \"IxVeriWave Ethernet Tap\" : \"IxVeriWave Radio Tap\", length);",
          "288:     if (tree) {",
          "289:         ti = proto_tree_add_protocol_format(tree, proto_ixveriwave,",
          "290:                                             tvb, 0, length, \"%s Header, Length %u\",",
          "291:                                             version ? \"IxVeriWave Ethernet Tap\" : \"IxVeriWave Radio Tap\", length);",
          "293:         common_tree = proto_item_add_subtree(ti, ett_commontap);",
          "295:         proto_tree_add_uint(common_tree, hf_ixveriwave_frame_length,",
          "296:                             tvb, 4, 2, true_length);",
          "297:     }",
          "299:     length_remaining = length;",
          "301:     offset              +=4;",
          "302:     length_remaining    -=4;",
          "304:     if (length_remaining >= 2) {",
          "306:         vw_msdu_length = tvb_get_letohs(tvb, offset);",
          "307:         if (tree) {",
          "308:             proto_tree_add_uint(common_tree, hf_ixveriwave_vw_msdu_length,",
          "309:             tvb, offset, 2, vw_msdu_length);",
          "312:         offset              +=2;",
          "313:         length_remaining    -=2;",
          "314:     }",
          "317:     if (length_remaining >= 4) {",
          "318:         vw_flowid = tvb_get_letohl(tvb, offset);",
          "319:         if (tree) {",
          "320:             proto_tree_add_uint(common_tree, hf_ixveriwave_vw_flowid,",
          "321:                                 tvb, offset, 4, vw_flowid);",
          "324:         offset              +=4;",
          "325:         length_remaining    -=4;",
          "326:     }",
          "329:     if (length_remaining >= 2) {",
          "330:         vw_vcid = tvb_get_letohs(tvb, offset);",
          "331:         if (tree) {",
          "332:             proto_tree_add_uint(common_tree, hf_ixveriwave_vw_vcid,",
          "333:                                 tvb, offset, 2, vw_vcid);",
          "336:         offset              +=2;",
          "337:         length_remaining    -=2;",
          "338:     }",
          "341:     if (length_remaining >= 2) {",
          "343:         vw_seqnum = tvb_get_letohs(tvb, offset);",
          "344:         if (tree) {",
          "345:             proto_tree_add_uint(common_tree, hf_ixveriwave_vw_seqnum,",
          "346:                                 tvb, offset, 2, vw_seqnum);",
          "349:         offset              +=2;",
          "350:         length_remaining    -=2;",
          "351:     }",
          "354:     if (length_remaining >= 4) {",
          "355:         vw_latency = tvb_get_letohl(tvb, offset);",
          "357:         if (tree) {",
          "",
          "[Added Lines]",
          "583:     proto_item *rf_infot                    = NULL;",
          "584:     proto_tree *rf_info_tree                = NULL;",
          "585:     int         offset;",
          "586:     guint16     length;",
          "590:     guint32     vw_latency, vw_pktdur;",
          "591:     guint32     vw_msdu_length=0;",
          "594:     guint8      ver_fpga, ixport_type,cmd_type, mgmt_byte;",
          "595:     guint8      frameformat, rfid, legacy_type;",
          "596:     gint8       noisevalida, noisevalidb, noisevalidc, noisevalidd, pfevalida, pfevalidb, pfevalidc, pfevalidd;",
          "597:     guint16     vw_info_ifg;",
          "598:     int         ifg_flag = 0;",
          "599:     proto_tree  *vwrft, *vw_rfinfo_tree = NULL, *rfinfo_contextp_tree;",
          "601:     static const int * context_a_flags[] = {",
          "602:         &hf_radiotap_rfinfo_contextpA_bit0,",
          "603:         &hf_radiotap_rfinfo_contextpA_bit1,",
          "604:         &hf_radiotap_rfinfo_contextpA_bit2,",
          "605:         &hf_radiotap_rfinfo_contextpA_bit3,",
          "606:         &hf_radiotap_rfinfo_contextpA_bit4,",
          "607:         &hf_radiotap_rfinfo_contextpA_bit5,",
          "609:         &hf_radiotap_rfinfo_contextpA_bit8,",
          "610:         &hf_radiotap_rfinfo_contextpA_bit10,",
          "611:         &hf_radiotap_rfinfo_contextpA_bit11,",
          "613:         &hf_radiotap_rfinfo_contextpA_bit13,",
          "614:         NULL",
          "615:     };",
          "616:     static const int * context_b_flags[] = {",
          "617:         &hf_radiotap_rfinfo_contextpB_bit0,",
          "618:         &hf_radiotap_rfinfo_contextpB_bit1,",
          "619:         &hf_radiotap_rfinfo_contextpB_bit2,",
          "620:         &hf_radiotap_rfinfo_contextpB_bit3,",
          "621:         &hf_radiotap_rfinfo_contextpB_bit4,",
          "622:         &hf_radiotap_rfinfo_contextpB_bit5,",
          "624:         &hf_radiotap_rfinfo_contextpB_bit8,",
          "625:         &hf_radiotap_rfinfo_contextpB_bit10,",
          "626:         &hf_radiotap_rfinfo_contextpB_bit11,",
          "628:         &hf_radiotap_rfinfo_contextpB_bit13,",
          "629:         NULL",
          "630:     };",
          "631:     static const int * context_c_flags[] = {",
          "632:         &hf_radiotap_rfinfo_contextpC_bit0,",
          "633:         &hf_radiotap_rfinfo_contextpC_bit1,",
          "634:         &hf_radiotap_rfinfo_contextpC_bit2,",
          "635:         &hf_radiotap_rfinfo_contextpC_bit3,",
          "636:         &hf_radiotap_rfinfo_contextpC_bit4,",
          "637:         &hf_radiotap_rfinfo_contextpC_bit5,",
          "639:         &hf_radiotap_rfinfo_contextpC_bit8,",
          "640:         &hf_radiotap_rfinfo_contextpC_bit10,",
          "641:         &hf_radiotap_rfinfo_contextpC_bit11,",
          "643:         &hf_radiotap_rfinfo_contextpC_bit13,",
          "644:         NULL",
          "645:     };",
          "646:     static const int * context_d_flags[] = {",
          "647:         &hf_radiotap_rfinfo_contextpD_bit0,",
          "648:         &hf_radiotap_rfinfo_contextpD_bit1,",
          "649:         &hf_radiotap_rfinfo_contextpD_bit2,",
          "650:         &hf_radiotap_rfinfo_contextpD_bit3,",
          "651:         &hf_radiotap_rfinfo_contextpD_bit4,",
          "652:         &hf_radiotap_rfinfo_contextpD_bit5,",
          "654:         &hf_radiotap_rfinfo_contextpD_bit8,",
          "655:         &hf_radiotap_rfinfo_contextpD_bit10,",
          "656:         &hf_radiotap_rfinfo_contextpD_bit11,",
          "658:         &hf_radiotap_rfinfo_contextpD_bit13,",
          "659:         NULL",
          "660:     };",
          "670:     ixport_type = tvb_get_guint8(tvb, offset);",
          "671:     cmd_type = (ixport_type & 0xf0) >> 4;",
          "672:     ixport_type &= 0x0f;",
          "673:     mgmt_byte = tvb_get_guint8(tvb, offset+1);",
          "674:     ver_fpga = mgmt_byte & 0x0f;",
          "678:     col_add_fstr(pinfo->cinfo, COL_PROTOCOL, \"%s\", ixport_type ? \"ETH\" : \"WLAN\");",
          "684:                  ixport_type ? \"IxVeriWave Ethernet Tap\" : \"IxVeriWave Radio Tap\", length);",
          "687:     ti = proto_tree_add_protocol_format(tree, proto_ixveriwave,",
          "688:                                             tvb, 0, length, \"%s Header\",",
          "689:                                             ixport_type ? \"IxVeriWave Ethernet Tap\" : \"IxVeriWave Radio Tap\");",
          "690:     common_tree = proto_item_add_subtree(ti, ett_commontap);",
          "693:     if (cmd_type !=3)",
          "694:     {",
          "696:         if (!ver_fpga) {",
          "697:             proto_tree_add_uint(common_tree, hf_ixveriwave_frame_length,",
          "698:                                 tvb, 4, 2, true_length);",
          "699:         }",
          "701:         length_remaining = length;",
          "703:         offset              +=4;",
          "704:         length_remaining    -=4;",
          "706:         if (length_remaining >= 2) {",
          "708:             proto_tree_add_item_ret_uint(common_tree, hf_ixveriwave_vw_msdu_length, tvb, offset, 2, ENC_LITTLE_ENDIAN, &vw_msdu_length);",
          "709:             offset              +=2;",
          "710:             length_remaining    -=2;",
          "714:         if (length_remaining >= 4) {",
          "715:             proto_tree_add_item(common_tree, hf_ixveriwave_vw_flowid, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "717:             offset              +=4;",
          "718:             length_remaining    -=4;",
          "722:         if (length_remaining >= 2) {",
          "723:             proto_tree_add_item(common_tree, hf_ixveriwave_vw_vcid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "725:             offset              +=2;",
          "726:             length_remaining    -=2;",
          "730:         if (length_remaining >= 2) {",
          "732:             proto_tree_add_item(common_tree, hf_ixveriwave_vw_seqnum, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "734:             offset              +=2;",
          "735:             length_remaining    -=2;",
          "739:         if (length_remaining >= 4) {",
          "740:             vw_latency = tvb_get_letohl(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "364:                     (float)(vw_latency/1000000.0));",
          "365:                 vw_times_tree = proto_item_add_subtree(vw_times_ti, ett_commontap_times);",
          "370:             }",
          "371:             else",
          "372:             {",
          "",
          "[Removed Lines]",
          "367:                 proto_tree_add_uint_format(vw_times_tree, hf_ixveriwave_vw_latency,",
          "368:                     tvb, offset, 4, vw_latency,",
          "369:                     \"Frame latency: %u nsec\", vw_latency);",
          "",
          "[Added Lines]",
          "751:                 proto_tree_add_uint(vw_times_tree, hf_ixveriwave_vw_latency, tvb, offset, 4, vw_latency);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "376:                     \"Frame timestamp values:\");",
          "377:                 vw_times_tree = proto_item_add_subtree(vw_times_ti, ett_commontap_times);",
          "382:             }",
          "383:         }",
          "385:         offset              +=4;",
          "386:         length_remaining    -=4;",
          "395:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "433:             }",
          "434:             else {",
          "439:             }",
          "448:         }",
          "455:     }",
          "460:     p_ifg_info = (ifg_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_ixveriwave, 0);",
          "461:     if (!p_ifg_info)",
          "462:     {",
          "",
          "[Removed Lines]",
          "379:                 proto_tree_add_uint_format(vw_times_tree, hf_ixveriwave_vw_latency,",
          "380:                     tvb, offset, 4, vw_latency,",
          "381:                     \"Frame latency: N/A\");",
          "387:     }",
          "392:     if (length_remaining >= 4) {",
          "394:         proto_tree_add_item(vw_times_tree, hf_ixveriwave,",
          "396:         time_tree_offset    = offset;",
          "397:         offset              +=4;",
          "398:         length_remaining    -=4;",
          "399:     }",
          "402:     if (length_remaining >= 8) {",
          "403:         vw_startt = tvb_get_letoh64(tvb, offset);",
          "405:         proto_tree_add_uint64(vw_times_tree, hf_ixveriwave_vw_startt,",
          "406:                 tvb, offset, 8, vw_startt);",
          "408:         offset              +=8;",
          "409:         length_remaining    -=8;",
          "410:     }",
          "413:     if (length_remaining >= 8) {",
          "414:         vw_endt = tvb_get_letoh64(tvb, offset);",
          "416:         proto_tree_add_uint64(vw_times_tree, hf_ixveriwave_vw_endt,",
          "417:                 tvb, offset, 8, vw_endt);",
          "419:         offset              +=8;",
          "420:         length_remaining    -=8;",
          "421:     }",
          "423:     if (length_remaining >= 4) {",
          "424:         vw_pktdur = tvb_get_letohl(tvb, offset);",
          "426:         if (vw_endt >= vw_startt) {",
          "428:             if (version == ETHERNET_PORT) {",
          "429:                 proto_item_append_text(vw_times_ti, \" (Frame duration=%u nsecs)\", vw_pktdur);",
          "430:                 proto_tree_add_uint_format(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "431:                                     tvb, offset-16, 16, vw_pktdur,",
          "432:                                     \"Frame duration: %u nsec\", vw_pktdur);",
          "435:                 proto_item_append_text(vw_times_ti, \" (Frame duration=%u usecs)\", vw_pktdur);",
          "436:                 proto_tree_add_uint_format(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "437:                                     tvb, offset-16, 16, vw_pktdur,",
          "438:                                     \"Frame duration: %u usec\", vw_pktdur);",
          "440:         }",
          "441:         else {",
          "442:             proto_tree_add_uint_format(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "443:                                         tvb, offset, 0, vw_pktdur,",
          "444:                                         \"Frame duration: N/A\");",
          "447:             proto_item_append_text(vw_times_ti, \" (Frame duration=N/A)\");",
          "450:         offset              +=4;",
          "451:     }",
          "453:     if (vw_times_ti) {",
          "454:         proto_item_set_len(vw_times_ti, offset-time_tree_offset);",
          "",
          "[Added Lines]",
          "761:                 proto_tree_add_uint_format_value(vw_times_tree, hf_ixveriwave_vw_latency,",
          "762:                     tvb, offset, 4, vw_latency, \"N/A\");",
          "763:             }",
          "765:             offset              +=4;",
          "766:             length_remaining    -=4;",
          "767:         }",
          "770:         if (length_remaining >= 4) {",
          "772:             proto_tree_add_item(vw_times_tree, hf_ixveriwave,",
          "773:                             tvb, offset, 4, ENC_BIG_ENDIAN);",
          "774:             offset              +=4;",
          "775:             length_remaining    -=4;",
          "776:         }",
          "779:         if (length_remaining >= 8) {",
          "780:             proto_tree_add_item_ret_uint64(vw_times_tree, hf_ixveriwave_vw_startt,",
          "781:                     tvb, offset, 8, ENC_LITTLE_ENDIAN, &vw_startt);",
          "783:             offset              +=8;",
          "784:             length_remaining    -=8;",
          "785:         }",
          "788:         if (length_remaining >= 8) {",
          "789:             proto_tree_add_item_ret_uint64(vw_times_tree, hf_ixveriwave_vw_endt,",
          "790:                     tvb, offset, 8, ENC_LITTLE_ENDIAN, &vw_endt);",
          "792:             offset              +=8;",
          "793:             length_remaining    -=8;",
          "794:         }",
          "797:         if (length_remaining >= 4) {",
          "798:             vw_pktdur = tvb_get_letohl(tvb, offset);",
          "800:             if (vw_endt >= vw_startt) {",
          "802:                 if (ixport_type == ETHERNET_PORT) {",
          "803:                     proto_item_append_text(vw_times_ti, \" (Frame duration=%u nsecs)\", vw_pktdur);",
          "804:                     proto_tree_add_uint(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "805:                                         tvb, offset-16, 16, vw_pktdur);",
          "806:                 }",
          "807:                 else {",
          "808:                     proto_item_append_text(vw_times_ti, \" (Frame duration=%u usecs)\", vw_pktdur);",
          "809:                     proto_tree_add_uint(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "810:                                         tvb, offset-16, 16, vw_pktdur);",
          "811:                 }",
          "812:             }",
          "813:             else {",
          "814:                 proto_tree_add_uint_format_value(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "815:                                             tvb, offset, 0, vw_pktdur, \"N/A\");",
          "818:                 proto_item_append_text(vw_times_ti, \" (Frame duration=N/A)\");",
          "821:             offset              +=4;",
          "824:     } else { //Rather then the legacy it takes care to show the Time Header for RadioTapHeader in new format",
          "825:         length_remaining = length;",
          "830:         if (length_remaining >= 4) {",
          "831:             vw_latency = tvb_get_letohl(tvb, offset);",
          "834:             if (vw_latency != 0) {",
          "835:                 vw_times_ti = proto_tree_add_float_format(common_tree,",
          "836:                     hf_ixveriwave_vw_mslatency,",
          "837:                     tvb, offset, 4, (float)(vw_latency/1000000.0),",
          "838:                     \"Time Header(latency %.3f msec)\",",
          "839:                     (float)(vw_latency/1000000.0));",
          "840:                 vw_times_tree = proto_item_add_subtree(vw_times_ti, ett_commontap_times);",
          "842:                 proto_tree_add_uint(vw_times_tree, hf_ixveriwave_vw_latency, tvb, offset, 4, vw_latency);",
          "843:             }",
          "844:             else",
          "845:             {",
          "846:                 vw_times_ti = proto_tree_add_float_format(common_tree,",
          "847:                     hf_ixveriwave_vw_mslatency,",
          "848:                     tvb, offset, 4, (float)(vw_latency/1000000.0),",
          "849:                     \"Time Header\");",
          "850:                 vw_times_tree = proto_item_add_subtree(vw_times_ti, ett_commontap_times);",
          "852:                 if (cmd_type != 1) {",
          "853:                     proto_tree_add_uint_format_value(vw_times_tree, hf_ixveriwave_vw_latency,",
          "854:                         tvb, offset, 4, vw_latency, \"N/A\");",
          "855:                 }",
          "856:             }",
          "857:             offset              +=4;",
          "858:             length_remaining    -=4;",
          "859:         }",
          "862:         if (length_remaining >= 4) {",
          "864:                 if (cmd_type != 1)",
          "865:                     proto_tree_add_item(vw_times_tree, hf_ixveriwave,",
          "867:                 else",
          "868:                     proto_tree_add_item(vw_times_tree, hf_ixveriwave_vw_delay,",
          "869:                         tvb, offset, 4, ENC_BIG_ENDIAN);",
          "870:             offset              +=4;",
          "871:             length_remaining    -=4;",
          "872:         }",
          "875:         if (length_remaining >= 8) {",
          "876:             proto_tree_add_item_ret_uint64(vw_times_tree, hf_ixveriwave_vw_startt,",
          "877:                     tvb, offset, 8, ENC_LITTLE_ENDIAN, &vw_startt);",
          "879:             offset              +=8;",
          "880:             length_remaining    -=8;",
          "881:         }",
          "884:         if (length_remaining >= 8) {",
          "885:             proto_tree_add_item_ret_uint64(vw_times_tree, hf_ixveriwave_vw_endt,",
          "886:                 tvb, offset, 8, ENC_LITTLE_ENDIAN, &vw_endt);",
          "888:             offset              +=8;",
          "889:             length_remaining    -=8;",
          "890:         }",
          "893:         if (length_remaining >= 4) {",
          "894:             vw_pktdur = tvb_get_letohl(tvb, offset);",
          "896:             if (vw_endt >= vw_startt) {",
          "898:                 if (ixport_type == ETHERNET_PORT) {",
          "899:                     proto_item_append_text(vw_times_ti, \" (Frame duration=%u nsecs)\", vw_pktdur);",
          "900:                         proto_tree_add_uint(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "901:                                         tvb, offset-16, 16, vw_pktdur);",
          "902:                 }",
          "903:                 else {",
          "904:                     proto_item_append_text(vw_times_ti, \" (Frame duration=%u usecs)\", vw_pktdur);",
          "905:                     proto_tree_add_uint(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "906:                                         tvb, offset, 4, vw_pktdur);",
          "907:                 }",
          "910:                 proto_tree_add_uint_format_value(vw_times_tree, hf_ixveriwave_vw_pktdur,",
          "911:                                             tvb, offset, 0, vw_pktdur, \"N/A\");",
          "914:                 proto_item_append_text(vw_times_ti, \" (Frame duration=N/A)\");",
          "917:             offset += 4;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "486:         p_add_proto_data(wmem_file_scope(), pinfo, proto_ixveriwave, 0, p_ifg_info);",
          "487:     }",
          "529:         PROTO_ITEM_SET_GENERATED(ti);",
          "530:     }",
          "577:             }",
          "627:             }",
          "647:     }",
          "",
          "[Removed Lines]",
          "490:     next_tvb = tvb_new_subset_remaining(tvb, length);",
          "493:     if (version == ETHERNET_PORT)",
          "494:         ethernettap_dissect(next_tvb, pinfo, tree, common_tree);",
          "495:     else",
          "496:         wlantap_dissect(next_tvb, pinfo, tree, common_tree, vw_msdu_length);",
          "497:     return tvb_captured_length(tvb);",
          "498: }",
          "503: #define ALIGN_OFFSET(offset, width) \\",
          "504:     ( (((offset) + ((width) - 1)) & (~((width) - 1))) - offset )",
          "506: static void",
          "507: ethernettap_dissect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *tap_tree)",
          "508: {",
          "509:     proto_tree *vweft, *vw_errorFlags_tree = NULL, *vwift,*vw_infoFlags_tree = NULL;",
          "510:     int         offset;",
          "511:     tvbuff_t   *next_tvb;",
          "512:     guint       length, length_remaining;",
          "513:     guint16     vw_flags, vw_info;",
          "514:     guint16     vw_l4id;",
          "515:     guint32     vw_error;",
          "516:     gint32      vwf_txf, vwf_fcserr;",
          "517:     ifg_info   *p_ifg_info;",
          "518:     proto_item *ti;",
          "520:     vwf_txf = 0;",
          "522:     offset = 0;",
          "525:     p_ifg_info = (struct ifg_info *) p_get_proto_data(wmem_file_scope(), pinfo, proto_ixveriwave, 0);",
          "526:     if (tap_tree) {",
          "527:         ti = proto_tree_add_uint(tap_tree, hf_ixveriwave_vw_ifg,",
          "528:                                  tvb, offset, 0, p_ifg_info->ifg);",
          "533:     length = tvb_get_letohs(tvb, offset);",
          "534:     length_remaining = length;",
          "536:     offset += 2;",
          "537:     length_remaining -= 2;",
          "540:     if (length >= 2) {",
          "541:         vw_flags = tvb_get_letohs(tvb, offset);",
          "542:         vwf_txf = ((vw_flags & ETHERNETTAP_VWF_TXF) == 0) ? 0 : 1;",
          "543:         vwf_fcserr = ((vw_flags & ETHERNETTAP_VWF_FCSERR) == 0) ? 0 : 1;",
          "545:         if (tap_tree) {",
          "546:             proto_tree_add_uint(tap_tree, hf_ixveriwave_vwf_txf,",
          "547:                 tvb, 0, 0, vwf_txf);",
          "548:             proto_tree_add_uint(tap_tree, hf_ixveriwave_vwf_fcserr,",
          "549:                 tvb, 0, 0, vwf_fcserr);",
          "550:         }",
          "552:         offset += 2;",
          "553:         length_remaining -= 2;",
          "554:     }",
          "558:     if (length_remaining >= 2) {",
          "559:         vw_info = tvb_get_letohs(tvb, offset);",
          "561:         if (tap_tree) {",
          "562:             vwift = proto_tree_add_uint(tap_tree, hf_ixveriwave_vw_info,",
          "563:                 tvb, offset, 2, vw_info);",
          "564:             vw_infoFlags_tree = proto_item_add_subtree(vwift, ett_ethernettap_info);",
          "566:             if (vwf_txf == 0) {",
          "568:                 proto_tree_add_item(vw_infoFlags_tree, hf_ixveriwave_vw_info_rx_1_bit8,",
          "569:                                     tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "570:                 proto_tree_add_item(vw_infoFlags_tree, hf_ixveriwave_vw_info_rx_1_bit9,",
          "571:                                     tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "572:             } else {",
          "574:                 proto_tree_add_uint_format(vw_infoFlags_tree, hf_ixveriwave_vw_info_retryCount,",
          "575:                                            tvb, offset, 2, vw_info,",
          "576:                                            \"Retry count: %u \", vw_info);",
          "580:         offset              +=2;",
          "581:         length_remaining    -=2;",
          "582:     }",
          "585:     if (length_remaining >= 4) {",
          "586:         vw_error = tvb_get_letohl(tvb, offset);",
          "588:         if (tap_tree) {",
          "589:             vweft = proto_tree_add_uint(tap_tree, hf_ixveriwave_vw_error,",
          "590:             tvb, offset, 4, vw_error);",
          "591:             vw_errorFlags_tree = proto_item_add_subtree(vweft, ett_ethernettap_error);",
          "593:             if (vwf_txf == 0) {",
          "595:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit0,",
          "596:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "597:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit1,",
          "598:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "599:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit2,",
          "600:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "601:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit3,",
          "602:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "603:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit4,",
          "604:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "605:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit5,",
          "606:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "607:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit6,",
          "608:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "609:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit7,",
          "610:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "611:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit8,",
          "612:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "613:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_rx_1_bit9,",
          "614:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "615:             } else {",
          "617:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_tx_bit1,",
          "618:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "619:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_tx_bit5,",
          "620:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "621:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_tx_bit9,",
          "622:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "623:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_tx_bit10,",
          "624:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "625:                 proto_tree_add_item(vw_errorFlags_tree, hf_ixveriwave_vw_error_tx_bit11,",
          "626:                     tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "630:         offset              +=4;",
          "631:         length_remaining    -=4;",
          "632:     }",
          "634:     if (length_remaining >= 4) {",
          "635:         vw_l4id = tvb_get_letohl(tvb, offset);",
          "636:         if (tap_tree) {",
          "637:             proto_tree_add_uint(tap_tree, hf_ixveriwave_vw_l4id,",
          "638:             tvb, offset, 4, vw_l4id);",
          "639:         }",
          "640:         offset              +=4;",
          "641:         length_remaining    -=4;",
          "642:     }",
          "645:     if (length_remaining >= 4) {",
          "",
          "[Added Lines]",
          "954:     if (ver_fpga) {",
          "955:         p_ifg_info = (struct ifg_info *) p_get_proto_data(wmem_file_scope(), pinfo, proto_ixveriwave, 0);",
          "956:         switch (cmd_type) {",
          "957:         case 0:",
          "958:             vw_info_ifg = tvb_get_ntohs(tvb, offset+ VW_INFO_OFF );",
          "960:                 ifg_flag = 1;",
          "961:             else",
          "962:                 ifg_flag = 0;",
          "963:             break;",
          "964:         case 1:",
          "965:             vw_info_ifg = tvb_get_letohs(tvb, offset+ VW_INFO_OFF);",
          "967:                 ifg_flag = 1;",
          "968:             else",
          "969:                 ifg_flag = 0;",
          "970:             break;",
          "972:         case 4:",
          "973:             vw_info_ifg = tvb_get_ntohs(tvb, offset+ VW_INFO_OFF + OCTO_MODIFIED_RF_LEN);",
          "975:                 ifg_flag = 1;",
          "976:             else",
          "977:                 ifg_flag = 0;",
          "978:             break;",
          "980:         default:",
          "981:             break;",
          "982:         }",
          "985:             ti = proto_tree_add_uint(common_tree, hf_ixveriwave_vw_ifg, tvb, 18, 0, 0);",
          "986:         else {",
          "988:             if ((gint32) p_ifg_info->ifg >= 0)",
          "989:                 ti = proto_tree_add_uint(common_tree, hf_ixveriwave_vw_ifg, tvb, 18, 0, p_ifg_info->ifg);",
          "990:             else",
          "991:                 ti = proto_tree_add_string(common_tree, hf_ixveriwave_vw_ifg_neg, tvb, 18, 0, \"Cannot be determined\");",
          "992:         }",
          "997:     if(cmd_type ==3 || cmd_type ==4)",
          "998:     {",
          "999:         float flttmp;",
          "1000:         frameformat = tvb_get_guint8(tvb, offset+33)& 0x03;",
          "1001:         legacy_type = tvb_get_guint8(tvb, offset+33)& 0x04 >>2;",
          "1003:         if(cmd_type ==3)",
          "1004:             offset += 1;",
          "1007:         if (tree) {",
          "1009:             rfid = tvb_get_guint8(tvb, offset);",
          "1010:             vwrft = proto_tree_add_uint(common_tree, hf_radiotap_rf_info,",
          "1011:                             tvb, offset, 76, rfid);",
          "1012:             proto_item_append_text(vwrft, \" (RFID = %u)\",rfid);",
          "1013:             vw_rfinfo_tree = proto_item_add_subtree(vwrft, ett_radiotap_rf);",
          "1015:             proto_tree_add_uint(vw_rfinfo_tree,",
          "1016:                 hf_radiotap_rfinfo_rfid, tvb, offset, 1, rfid);",
          "1017:             offset += 4;",
          "1019:             noisevalida = tvb_get_guint8(tvb, offset+65)& 0x01;",
          "1020:             noisevalidb = tvb_get_guint8(tvb, offset+67)& 0x01;",
          "1021:             noisevalidc = tvb_get_guint8(tvb, offset+69)& 0x01;",
          "1022:             noisevalidd = tvb_get_guint8(tvb, offset+71)& 0x01;",
          "1025:             noisea = (gint16) tvb_get_ntohs(tvb, offset);",
          "1027:             if (noisevalida == 1)",
          "1028:                 rf_infot = proto_tree_add_float_format(vw_rfinfo_tree, hf_radiotap_rfinfo_noise,",
          "1029:                     tvb, offset, 8, (float)(noisea/16.0),\"Noise:   A:%.2fdBm, \", (float)(noisea/16.0));",
          "1031:             else",
          "1032:                 rf_infot = proto_tree_add_float_format(vw_rfinfo_tree, hf_radiotap_rfinfo_noise,",
          "1033:                     tvb, offset, 8, (float)(noisea/16.0),\"Noise:   A: N/A, \", (float)(noisea/16.0));",
          "1034:             rf_info_tree = proto_item_add_subtree(rf_infot, ett_rf_info);",
          "1035:             noiseb = tvb_get_ntohs(tvb, offset+2);",
          "1036:             noisevalidb = tvb_get_guint8(tvb, offset+67)& 0x01;",
          "1037:             if (noisevalidb == 1)",
          "1038:                 proto_item_append_text(rf_infot, \"B:%.2fdBm, \", (float)(noiseb/16.0));",
          "1039:             else",
          "1040:                 proto_item_append_text(rf_infot, \"B: N/A, \", (float)(noiseb/16.0));",
          "1041:             noisec = tvb_get_ntohs(tvb, offset+4);",
          "1042:             noisevalidc = tvb_get_guint8(tvb, offset+69)& 0x01;",
          "1043:             if (noisevalidc == 1)",
          "1044:                 proto_item_append_text(rf_infot, \"C:%.2fdBm, \", (float)(noisec/16.0));",
          "1045:             else",
          "1046:                 proto_item_append_text(rf_infot, \"C: N/A, \", (float)(noisec/16.0));",
          "1047:             noised = tvb_get_ntohs(tvb, offset+6);",
          "1048:             noisevalidd = tvb_get_guint8(tvb, offset+71)& 0x01;",
          "1049:             if (noisevalidd == 1)",
          "1050:                 proto_item_append_text(rf_infot, \"D:%.2fdBm\", (float)(noised/16.0));",
          "1051:             else",
          "1052:                 proto_item_append_text(rf_infot, \"D: N/A\", (float)(noised/16.0));",
          "1055:             offset     += 8;",
          "1058:             rf_infot = proto_tree_add_none_format(vw_rfinfo_tree, hf_radiotap_rfinfo_snr, tvb, offset, 8, \"SNR:     \");",
          "1059:             rf_info_tree = proto_item_add_subtree(rf_infot, ett_rf_info);",
          "1061:             flttmp = (float)round(tvb_get_ntohs(tvb, offset) / 16.0f);",
          "1062:             if (noisevalida == 1)",
          "1063:             {",
          "1064:                 proto_tree_add_float(rf_info_tree, hf_radiotap_rfinfo_snr_anta, tvb, offset, 2, flttmp);",
          "1065:                 proto_item_append_text(rf_infot, \"A:%.0fdB, \", flttmp);",
          "1066:             }",
          "1067:             else",
          "1068:             {",
          "1069:                 proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_snr_anta, tvb, offset, 2, flttmp, \"N/A\");",
          "1070:                 proto_item_append_text(rf_infot, \"A:N/A, \");",
          "1071:             }",
          "1072:             offset += 2;",
          "1073:             flttmp = (float)round(tvb_get_ntohs(tvb, offset) / 16.0f);",
          "1074:             if (noisevalidb == 1)",
          "1075:             {",
          "1076:                 proto_tree_add_float(rf_info_tree, hf_radiotap_rfinfo_snr_antb, tvb, offset, 2, flttmp);",
          "1077:                 proto_item_append_text(rf_infot, \"B:%.0fdB, \", flttmp);",
          "1078:             }",
          "1079:             else",
          "1080:             {",
          "1081:                 proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_snr_antb, tvb, offset, 2, flttmp, \"N/A\");",
          "1082:                 proto_item_append_text(rf_infot, \"B:N/A, \");",
          "1083:             }",
          "1084:             offset += 2;",
          "1085:             flttmp = (float)round(tvb_get_ntohs(tvb, offset) / 16.0f);",
          "1086:             if (noisevalidc == 1)",
          "1087:             {",
          "1088:                 proto_tree_add_float(rf_info_tree, hf_radiotap_rfinfo_snr_antc, tvb, offset, 2, flttmp);",
          "1089:                 proto_item_append_text(rf_infot, \"C:%.0fdB, \", flttmp);",
          "1090:             }",
          "1091:             else",
          "1092:             {",
          "1093:                 proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_snr_antc, tvb, offset, 2, flttmp, \"N/A\");",
          "1094:                 proto_item_append_text(rf_infot, \"C:N/A, \");",
          "1095:             }",
          "1096:             offset      += 2;",
          "1097:             flttmp = (float)round(tvb_get_ntohs(tvb, offset) / 16.0f);",
          "1098:             if (noisevalidd == 1)",
          "1099:             {",
          "1100:                 proto_tree_add_float(rf_info_tree, hf_radiotap_rfinfo_snr_antd, tvb, offset, 2, flttmp);",
          "1101:                 proto_item_append_text(rf_infot, \"D:%.0fdB\", flttmp);",
          "1102:             }",
          "1103:             else",
          "1104:             {",
          "1105:                 proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_snr_antd, tvb, offset, 2, flttmp, \"N/A\");",
          "1106:                 proto_item_append_text(rf_infot, \"D:N/A\");",
          "1107:             }",
          "1108:             offset      += 2;",
          "1110:             pfevalida = (tvb_get_guint8(tvb, offset+49)& 0x02) >>1;",
          "1111:             pfevalidb = (tvb_get_guint8(tvb, offset+51)& 0x02) >>1;",
          "1112:             pfevalidc = (tvb_get_guint8(tvb, offset+53)& 0x02) >>1;",
          "1113:             pfevalidd = (tvb_get_guint8(tvb, offset+55)& 0x02) >>1;",
          "1114:             rf_infot = proto_tree_add_none_format(vw_rfinfo_tree, hf_radiotap_rfinfo_pfe,",
          "1115:                         tvb, offset, 8, \"PFE:     \");",
          "1116:             rf_info_tree = proto_item_add_subtree(rf_infot, ett_rf_info);",
          "1117:             if ((frameformat == 0) && (legacy_type == 0))",
          "1118:             {",
          "1121:                 flttmp = (float)(tvb_get_ntohs(tvb, offset)*19.073);",
          "1122:             }",
          "1123:             else",
          "1124:             {",
          "1127:                 flttmp = (float)(tvb_get_ntohs(tvb, offset)*20.981);",
          "1128:             }",
          "1130:             if (pfevalida == 1)",
          "1131:             {",
          "1132:                 proto_item_append_text(rf_infot, \"SS#1:%.0fHz, \", flttmp);",
          "1133:                 proto_tree_add_float(rf_info_tree, hf_radiotap_rfinfo_pfe_anta,",
          "1134:                     tvb, offset, 2, flttmp);",
          "1135:             }",
          "1136:             else",
          "1137:             {",
          "1138:                 proto_item_append_text(rf_infot, \"SS#1:N/A, \");",
          "1139:                 proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_pfe_anta,",
          "1140:                     tvb, offset, 2, flttmp, \"N/A\");",
          "1141:             }",
          "1142:             offset += 2;",
          "1144:             if ((frameformat == 0) && (legacy_type == 0))",
          "1145:             {",
          "1146:                 flttmp = (float)(tvb_get_ntohs(tvb, offset)*19.073);",
          "1147:             }",
          "1148:             else",
          "1149:             {",
          "1150:                 flttmp = (float)(tvb_get_ntohs(tvb, offset)*20.981);",
          "1151:             }",
          "1152:             if (pfevalidb == 1)",
          "1153:             {",
          "1154:                 proto_item_append_text(rf_infot, \"SS#2:%.0fHz, \", flttmp);",
          "1155:                 proto_tree_add_float(rf_info_tree, hf_radiotap_rfinfo_pfe_antb,",
          "1156:                     tvb, offset, 2, flttmp);",
          "1158:             else",
          "1159:             {",
          "1160:                 proto_item_append_text(rf_infot, \"SS#2:N/A, \");",
          "1161:                 proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_pfe_antb,",
          "1162:                     tvb, offset, 2, flttmp, \"N/A\");",
          "1163:             }",
          "1164:             offset += 2;",
          "1166:             if ((frameformat == 0) && (legacy_type == 0))",
          "1167:             {",
          "1168:                 flttmp = (float)(tvb_get_ntohs(tvb, offset)*19.073);",
          "1169:             }",
          "1170:             else",
          "1171:             {",
          "1172:                 flttmp = (float)(tvb_get_ntohs(tvb, offset)*20.981);",
          "1173:             }",
          "1174:             if (pfevalidc == 1)",
          "1175:             {",
          "1176:                 proto_item_append_text(rf_infot, \"SS#3:%.0fHz, \", flttmp);",
          "1177:                 proto_tree_add_float(rf_info_tree, hf_radiotap_rfinfo_pfe_antc,",
          "1178:                     tvb, offset, 2, flttmp);",
          "1179:             }",
          "1180:             else",
          "1181:             {",
          "1182:                 proto_item_append_text(rf_infot, \"SS#3:N/A, \");",
          "1183:                 proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_pfe_antc,",
          "1184:                     tvb, offset, 2, flttmp, \"N/A\");",
          "1185:             }",
          "1186:             offset += 2;",
          "1188:             if ((frameformat == 0) && (legacy_type == 0))",
          "1189:             {",
          "1190:                 flttmp = (float)(tvb_get_ntohs(tvb, offset)*19.073);",
          "1191:             }",
          "1192:             else",
          "1193:             {",
          "1194:                 flttmp = (float)(tvb_get_ntohs(tvb, offset)*20.981);",
          "1195:             }",
          "1196:             if (pfevalidd == 1)",
          "1197:             {",
          "1198:                 proto_item_append_text(rf_infot, \"SS#4:%.0fHz\", flttmp);",
          "1199:                 proto_tree_add_float(rf_info_tree, hf_radiotap_rfinfo_pfe_antd,",
          "1200:                     tvb, offset, 2, flttmp);",
          "1201:             }",
          "1202:             else",
          "1203:             {",
          "1204:                 proto_item_append_text(rf_infot, \"SS#4:N/A\");",
          "1205:                 proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_pfe_antd,",
          "1206:                     tvb, offset, 2, flttmp, \"N/A\");",
          "1207:             }",
          "1208:             offset += 2;",
          "1211:             rf_infot = proto_tree_add_none_format(vw_rfinfo_tree, hf_radiotap_rfinfo_sigdata, tvb, offset, 8, \"AVG EVM SIG Data:    \");",
          "1212:             rf_info_tree = proto_item_add_subtree(rf_infot, ett_rf_info);",
          "1214:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1215:             proto_item_append_text(rf_infot, \"SS#1:%.1f%%, \", flttmp);",
          "1216:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_sd_siga,",
          "1217:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1218:             offset += 2;",
          "1220:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1221:             proto_item_append_text(rf_infot, \"SS#2:%.1f%%, \", flttmp);",
          "1222:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_sd_sigb,",
          "1223:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1224:             offset += 2;",
          "1226:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1227:             proto_item_append_text(rf_infot, \"SS#3:%.1f%%, \", flttmp);",
          "1228:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_sd_sigc,",
          "1229:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1230:             offset += 2;",
          "1232:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1233:             proto_item_append_text(rf_infot, \"SS#4:%.1f%%\", flttmp);",
          "1234:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_sd_sigd,",
          "1235:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1236:             offset += 2;",
          "1239:             rf_infot = proto_tree_add_none_format(vw_rfinfo_tree, hf_radiotap_rfinfo_sigpilot, tvb, offset, 8, \"AVG EVM SIG Pilot:   \");",
          "1240:             rf_info_tree = proto_item_add_subtree(rf_infot, ett_rf_info);",
          "1242:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1243:             proto_item_append_text(rf_infot, \"SS#1:%.1f%%, \", flttmp);",
          "1244:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_sp_siga,",
          "1245:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1246:             offset += 2;",
          "1248:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1249:             proto_item_append_text(rf_infot, \"SS#2:%.1f%%, \", flttmp);",
          "1250:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_sp_sigb,",
          "1251:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1252:             offset += 2;",
          "1254:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1255:             proto_item_append_text(rf_infot, \"SS#3:%.1f%%, \", flttmp);",
          "1256:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_sp_sigc,",
          "1257:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1258:             offset += 2;",
          "1260:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1261:             proto_item_append_text(rf_infot, \"SS#4:%.1f%%, \", flttmp);",
          "1262:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_sp_sigd,",
          "1263:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1264:             offset += 2;",
          "1267:             rf_infot = proto_tree_add_none_format(vw_rfinfo_tree, hf_radiotap_rfinfo_datadata,",
          "1268:                           tvb, offset, 8, \"AVG EVM DATA Data:   \");",
          "1269:             rf_info_tree = proto_item_add_subtree(rf_infot, ett_rf_info);",
          "1271:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1272:             proto_item_append_text(rf_infot, \"SS#1:%.1f%%, \", flttmp);",
          "1273:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_dd_siga,",
          "1274:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1275:             offset += 2;",
          "1277:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1278:             proto_item_append_text(rf_infot, \"SS#2:%.1f%%, \", flttmp);",
          "1279:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_dd_sigb,",
          "1280:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1281:             offset += 2;",
          "1283:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1284:             proto_item_append_text(rf_infot, \"SS#3:%.1f%%, \", flttmp);",
          "1285:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_dd_sigc,",
          "1286:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1287:             offset += 2;",
          "1289:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1290:             proto_item_append_text(rf_infot, \"SS#4:%.1f%%, \", flttmp);",
          "1291:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_dd_sigd,",
          "1292:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1293:             offset += 2;",
          "1296:             rf_infot = proto_tree_add_none_format(vw_rfinfo_tree, hf_radiotap_rfinfo_datapilot,",
          "1297:                           tvb, offset, 8, \"AVG EVM DATA Pilot:  \");",
          "1298:             rf_info_tree = proto_item_add_subtree(rf_infot, ett_rf_info);",
          "1300:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1301:             proto_item_append_text(rf_infot, \"SS#1:%.1f%%, \", flttmp);",
          "1302:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_dp_siga,",
          "1303:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1304:             offset += 2;",
          "1306:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1307:             proto_item_append_text(rf_infot, \"SS#2:%.1f%%, \", flttmp);",
          "1308:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_dp_sigb,",
          "1309:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1310:             offset += 2;",
          "1312:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1313:             proto_item_append_text(rf_infot, \"SS#3:%.1f%%, \", flttmp);",
          "1314:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_dp_sigc,",
          "1315:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1316:             offset += 2;",
          "1318:             flttmp = (float)(tvb_get_ntohs(tvb, offset)/512.0);",
          "1319:             proto_item_append_text(rf_infot, \"SS#4:%.1f%%\", flttmp);",
          "1320:             proto_tree_add_float_format_value(rf_info_tree, hf_radiotap_rfinfo_avg_evm_dp_sigd,",
          "1321:                 tvb, offset, 2, flttmp, \"%.1f%%\", flttmp);",
          "1322:             offset += 2;",
          "1325:             rf_infot = proto_tree_add_item(vw_rfinfo_tree, hf_radiotap_rfinfo_avg_ws_symbol,",
          "1326:                           tvb, offset, 8, ENC_NA);",
          "1327:             rf_info_tree = proto_item_add_subtree(rf_infot, ett_rf_info);",
          "1329:             proto_tree_add_item(rf_info_tree, hf_radiotap_rfinfo_avg_evm_ws_siga, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1330:             proto_item_append_text(rf_infot, \":   SS#1:%u%%, \", tvb_get_ntohs(tvb, offset));",
          "1331:             offset += 2;",
          "1333:             proto_tree_add_item(rf_info_tree, hf_radiotap_rfinfo_avg_evm_ws_sigb, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1334:             proto_item_append_text(rf_infot, \"SS#2:%u%%, \", tvb_get_ntohs(tvb, offset));",
          "1335:             offset += 2;",
          "1337:             proto_tree_add_item(rf_info_tree, hf_radiotap_rfinfo_avg_evm_ws_sigc, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1338:             proto_item_append_text(rf_infot, \"SS#3:%u%%, \", tvb_get_ntohs(tvb, offset));",
          "1339:             offset += 2;",
          "1341:             proto_tree_add_item(rf_info_tree, hf_radiotap_rfinfo_avg_evm_ws_sigd, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1342:             proto_item_append_text(rf_infot, \"SS#4:%u%%\", tvb_get_ntohs(tvb, offset));",
          "1343:             offset += 2;",
          "1346:             ti = proto_tree_add_bitmask(rf_info_tree, tvb, offset, hf_radiotap_rfinfo_contextpa, ett_radiotap_contextp, context_a_flags, ENC_BIG_ENDIAN);",
          "1347:             rfinfo_contextp_tree = proto_item_add_subtree(ti, ett_radiotap_contextp);",
          "1349:             frameformat = tvb_get_guint8(tvb, offset)& 0x03;",
          "1350:             if (frameformat == 0)",
          "1351:             {",
          "1352:                 proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_legacytypeA, tvb, offset, 1, ENC_NA);",
          "1353:             }",
          "1354:             else",
          "1355:             {",
          "1356:                 proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_frameformatA, tvb, offset, 1, ENC_NA);",
          "1359:             proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_sigbwevmA, tvb, offset, 1, ENC_NA);",
          "1360:             offset      += 2;",
          "1363:             ti = proto_tree_add_bitmask(rf_info_tree, tvb, offset, hf_radiotap_rfinfo_contextpb, ett_radiotap_contextp, context_b_flags, ENC_BIG_ENDIAN);",
          "1364:             rfinfo_contextp_tree = proto_item_add_subtree(ti, ett_radiotap_contextp);",
          "1366:             frameformat = tvb_get_guint8(tvb, offset)& 0x03;",
          "1367:             if (frameformat == 0)",
          "1368:             {",
          "1369:                 proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_legacytypeB, tvb, offset, 1, ENC_NA);",
          "1370:             }",
          "1371:             else",
          "1372:             {",
          "1373:                 proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_frameformatB, tvb, offset, 1, ENC_NA);",
          "1374:             }",
          "1376:             proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_sigbwevmB, tvb, offset, 1, ENC_NA);",
          "1377:             offset += 2;",
          "1380:             ti = proto_tree_add_bitmask(vw_rfinfo_tree, tvb, offset, hf_radiotap_rfinfo_contextpc, ett_radiotap_contextp, context_c_flags, ENC_BIG_ENDIAN);",
          "1381:             rfinfo_contextp_tree = proto_item_add_subtree(ti, ett_radiotap_contextp);",
          "1383:             frameformat = tvb_get_guint8(tvb, offset)& 0x03;",
          "1384:             if (frameformat == 0)",
          "1385:             {",
          "1386:                 proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_legacytypeC, tvb, offset, 1, ENC_NA);",
          "1387:             }",
          "1388:             else",
          "1389:             {",
          "1390:                 proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_frameformatC, tvb, offset, 1, ENC_NA);",
          "1391:             }",
          "1393:             proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_sigbwevmC, tvb, offset, 1, ENC_NA);",
          "1394:             offset      += 2;",
          "1397:             ti = proto_tree_add_bitmask(vw_rfinfo_tree, tvb, offset, hf_radiotap_rfinfo_contextpd, ett_radiotap_contextp, context_d_flags, ENC_BIG_ENDIAN);",
          "1398:             rfinfo_contextp_tree = proto_item_add_subtree(ti, ett_radiotap_contextp);",
          "1400:             frameformat = tvb_get_guint8(tvb, offset)& 0x03;",
          "1401:             if (frameformat == 0)",
          "1402:             {",
          "1403:                 proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_legacytypeD, tvb, offset, 1, ENC_NA);",
          "1404:             }",
          "1405:             else",
          "1406:             {",
          "1407:                 proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_frameformatD, tvb, offset, 1, ENC_NA);",
          "1408:             }",
          "1410:             proto_tree_add_item(rfinfo_contextp_tree, hf_radiotap_rfinfo_sigbwevmD, tvb, offset, 1, ENC_NA);",
          "1411:             offset += 2;",
          "1412:         }",
          "1413:     }",
          "1414:     if (cmd_type !=3) //only RF",
          "1415:     {",
          "1416:         proto_item_set_len(vw_times_ti, 28);",
          "1419:         if(!ver_fpga)",
          "1420:         {",
          "1421:             next_tvb = tvb_new_subset_remaining(tvb, length);",
          "1422:         }",
          "1423:         else",
          "1424:         {",
          "1425:             if (cmd_type ==4) //RF+Rx",
          "1426:                 next_tvb = tvb_new_subset_remaining(tvb, 108);",
          "1427:             else",
          "1428:                 next_tvb = tvb_new_subset_remaining(tvb, 32);",
          "1429:         }",
          "1432:      if (ixport_type == ETHERNET_PORT)",
          "1433:         ethernettap_dissect(next_tvb, pinfo, tree, common_tree);",
          "1434:      else",
          "1435:         wlantap_dissect(next_tvb, pinfo, tree, common_tree,vw_msdu_length, cmd_type, mgmt_byte);",
          "1436:     }",
          "1438:     return tvb_captured_length(tvb);",
          "1439: }",
          "1444: #define ALIGN_OFFSET(offset, width) \\",
          "1445:     ( (((offset) + ((width) - 1)) & (~((width) - 1))) - offset )",
          "1447: static void",
          "1448: ethernettap_dissect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *tap_tree)",
          "1449: {",
          "1450:     proto_tree *vwift,*vw_infoFlags_tree = NULL;",
          "1451:     int         offset = 0;",
          "1452:     tvbuff_t   *next_tvb;",
          "1453:     guint       length, length_remaining;",
          "1454:     gboolean    vwf_txf = FALSE;",
          "1455:     ifg_info   *p_ifg_info;",
          "1456:     proto_item *ti;",
          "1459:     p_ifg_info = (struct ifg_info *) p_get_proto_data(wmem_file_scope(), pinfo, proto_ixveriwave, 0);",
          "1460:     ti = proto_tree_add_uint(tap_tree, hf_ixveriwave_vw_ifg,",
          "1461:                             tvb, offset, 0, p_ifg_info->ifg);",
          "1462:     PROTO_ITEM_SET_GENERATED(ti);",
          "1464:     length = tvb_get_letohs(tvb, offset);",
          "1465:     length_remaining = length;",
          "1467:     offset += 2;",
          "1468:     length_remaining -= 2;",
          "1471:     if (length >= 2) {",
          "1472:         proto_tree_add_item_ret_boolean(tap_tree, hf_ixveriwave_vwf_txf,",
          "1473:                  tvb, offset, 2, ENC_LITTLE_ENDIAN, &vwf_txf);",
          "1474:         proto_tree_add_item(tap_tree, hf_ixveriwave_vwf_fcserr,",
          "1475:                  tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1477:         offset += 2;",
          "1478:         length_remaining -= 2;",
          "1479:     }",
          "1483:     if (length_remaining >= 2) {",
          "1484:         vwift = proto_tree_add_item(tap_tree, hf_ixveriwave_vw_info, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1485:         vw_infoFlags_tree = proto_item_add_subtree(vwift, ett_ethernettap_info);",
          "1487:         if (vwf_txf == 0) {",
          "1489:             proto_tree_add_item(vw_infoFlags_tree, hf_ixveriwave_vw_info_rx_1_bit8,",
          "1490:                                 tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1491:             proto_tree_add_item(vw_infoFlags_tree, hf_ixveriwave_vw_info_rx_1_bit9,",
          "1492:                                 tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1493:         } else {",
          "1495:             proto_tree_add_item(vw_infoFlags_tree, hf_ixveriwave_vw_info_retryCount,",
          "1496:                                     tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1497:         }",
          "1499:         offset              +=2;",
          "1500:         length_remaining    -=2;",
          "1501:     }",
          "1504:     if (length_remaining >= 4) {",
          "1505:         if (vwf_txf == 0) {",
          "1507:             static const int * vw_error_rx_flags[] = {",
          "1508:                 &hf_ixveriwave_vw_error_rx_1_bit0,",
          "1509:                 &hf_ixveriwave_vw_error_rx_1_bit1,",
          "1510:                 &hf_ixveriwave_vw_error_rx_1_bit2,",
          "1511:                 &hf_ixveriwave_vw_error_rx_1_bit3,",
          "1512:                 &hf_ixveriwave_vw_error_rx_1_bit4,",
          "1513:                 &hf_ixveriwave_vw_error_rx_1_bit5,",
          "1514:                 &hf_ixveriwave_vw_error_rx_1_bit6,",
          "1515:                 &hf_ixveriwave_vw_error_rx_1_bit7,",
          "1516:                 &hf_ixveriwave_vw_error_rx_1_bit8,",
          "1517:                 &hf_ixveriwave_vw_error_rx_1_bit9,",
          "1518:                 NULL",
          "1519:             };",
          "1521:             proto_tree_add_bitmask(tap_tree, tvb, offset, hf_ixveriwave_vw_error, ett_ethernettap_error, vw_error_rx_flags, ENC_LITTLE_ENDIAN);",
          "1522:         } else {",
          "1524:             static const int * vw_error_tx_flags[] = {",
          "1525:                 &hf_ixveriwave_vw_error_tx_bit1,",
          "1526:                 &hf_ixveriwave_vw_error_tx_bit5,",
          "1527:                 &hf_ixveriwave_vw_error_tx_bit9,",
          "1528:                 &hf_ixveriwave_vw_error_tx_bit10,",
          "1529:                 &hf_ixveriwave_vw_error_tx_bit11,",
          "1530:                 NULL",
          "1531:             };",
          "1533:             proto_tree_add_bitmask(tap_tree, tvb, offset, hf_ixveriwave_vw_error, ett_ethernettap_error, vw_error_tx_flags, ENC_LITTLE_ENDIAN);",
          "1534:         }",
          "1536:         offset              +=4;",
          "1537:         length_remaining    -=4;",
          "1538:     }",
          "1540:     if (length_remaining >= 4) {",
          "1541:         proto_tree_add_item(tap_tree, hf_ixveriwave_vw_l4id, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "1543:         offset              +=4;",
          "1544:         length_remaining    -=4;",
          "1545:     }",
          "1548:     if (length_remaining >= 4) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "654: }",
          "656: static void",
          "658: {",
          "659:     proto_tree *ft, *flags_tree         = NULL;",
          "660:     int         align_offset, offset;",
          "661:     tvbuff_t   *next_tvb;",
          "662:     guint       length;",
          "663:     gint8       dbm;",
          "667:     guint8      vht_ndp_flag,vht_mu_mimo_flg,vht_coding_type,vht_u0_coding_type,vht_u1_coding_type,vht_u2_coding_type;",
          "668:     float       phyRate;",
          "669:     guint       i;",
          "673:     guint32     vw_errors;",
          "676:     ifg_info   *p_ifg_info;",
          "677:     proto_item *ti;",
          "678:     struct ieee_802_11_phdr phdr;",
          "",
          "[Removed Lines]",
          "657: wlantap_dissect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *tap_tree, guint16 vw_msdu_length)",
          "664:     guint8      plcp_type;",
          "665:     guint8      mcs_index;",
          "666:     guint8      nss;",
          "671:     proto_tree *vweft, *vw_errorFlags_tree = NULL, *vwift,*vw_infoFlags_tree = NULL;",
          "672:     guint16     vw_flags, vw_chanflags, vw_info, vw_ht_length, vht_su_partial_id, vw_rflags;",
          "674:     guint8      vht_grp_id1, vht_grp_id2, vht_grp_id, vht_su_nsts,vht_beamformed,vht_user_pos,vht_u0_nsts,vht_u1_nsts,vht_u2_nsts,vht_u3_nsts,vht_su_partial_id1,vht_su_partial_id2;",
          "",
          "[Added Lines]",
          "1560: wlantap_dissect(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, proto_tree *tap_tree, guint16 vw_msdu_length, guint8 cmd_type, guint8 mgmt_byte)",
          "1563:     proto_item *hdr_fcs_ti              = NULL;",
          "1565:     guint32     calc_fcs;",
          "1569:     guint8      rflags                  = 0;",
          "1570:     guint8      mcs_index, vw_plcp_info, vw_bssid;",
          "1571:     guint8      plcp_type, vht_u3_coding_type = 0, vht_reserved_coding_type=1;",
          "1576:     proto_tree *vweft, *vw_errorFlags_tree = NULL, *vwict,*vw_infoC_tree = NULL;",
          "1577:     guint16     vw_info, vw_chanflags, vw_flags, vw_ht_length,  vht_su_partial_id,vw_rflags,vw_vcid, vw_seqnum, mpdu_length, vht_length, crc16, vht_plcp_length, plcp_service_ofdm;",
          "1579:     guint8      vht_grp_id, vht_grp_id1, vht_grp_id2, vht_su_nsts,vht_beamformed,vht_user_pos,vht_su_partial_id1,vht_su_partial_id2;",
          "1580:     guint32     vht_u0_nsts,vht_u1_nsts,vht_u2_nsts,vht_u3_nsts;",
          "1581:     guint8      vht_bw, vht_stbc, vht_txop_ps_notallowd, vht_shortgi, vht_shortginsymdisa, vht_ldpc_ofdmsymbol, vht_su_mcs, vht_crc1, vht_crc2, vht_crc, vht_tail, rfid;",
          "1582:     guint8      vht_mcs1, vht_mcs2, vht_mcs, vht_plcp_length1, vht_plcp_length2, vht_plcp_length3, vht_rate, vht_parity;",
          "1583:     guint8      feccoding, aggregation, notsounding, smoothing, ness, plcp_service, signal, plcp_default;",
          "1584:     guint8      ver_fpga, log_mode;",
          "1588:     proto_tree  *vwl1t,*vw_l1info_tree = NULL, *vwl2l4t,*vw_l2l4info_tree = NULL, *vwplt,*vw_plcpinfo_tree = NULL;",
          "1589:     guint8      preamble, nss, direction, sigbw, cidv, bssidv, flowv, l4idv;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "684:     phdr.datapad = FALSE;",
          "685:     phdr.phy = PHDR_802_11_PHY_UNKNOWN;",
          "692:             ti = proto_tree_add_uint(tap_tree, hf_ixveriwave_vw_ifg, tvb, 18, 0, 0);",
          "693:         else",
          "694:             ti = proto_tree_add_uint(tap_tree, hf_ixveriwave_vw_ifg, tvb, 18, 0, p_ifg_info->ifg);",
          "695:         PROTO_ITEM_SET_GENERATED(ti);",
          "711:         flags_tree = proto_item_add_subtree(ft, ett_radiotap_flags);",
          "718:         if ( vw_rflags & FLAGS_CHAN_HT ) {",
          "725:         }",
          "726:         if ( vw_rflags & FLAGS_CHAN_VHT ) {",
          "735:         }",
          "781:             proto_tree_add_item(tap_tree, hf_radiotap_mcsindex,",
          "782:                                 tvb, offset - 2, 1, ENC_BIG_ENDIAN);",
          "",
          "[Removed Lines]",
          "688:     vw_info = tvb_get_letohs(tvb, 20);",
          "689:     p_ifg_info = (struct ifg_info *) p_get_proto_data(wmem_file_scope(), pinfo, proto_ixveriwave, 0);",
          "690:     if (tap_tree) {",
          "696:     }",
          "698:     offset      = 0;",
          "701:     length = tvb_get_letohs(tvb, offset);",
          "702:     offset      += 2;",
          "704:     vw_rflags = tvb_get_letohs(tvb, offset);",
          "705:     if (vw_rflags & FLAGS_FCS)",
          "706:         phdr.fcs_len = 4;",
          "707:     else",
          "708:         phdr.fcs_len = 0;",
          "709:     if (tap_tree) {",
          "710:         ft = proto_tree_add_uint(tap_tree, hf_radiotap_flags, tvb, offset, 2, vw_rflags);",
          "712:         proto_tree_add_boolean(flags_tree, hf_radiotap_flags_preamble,",
          "713:             tvb, offset, 2, vw_rflags);",
          "714:         proto_tree_add_boolean(flags_tree, hf_radiotap_flags_wep,",
          "715:             tvb, offset, 2, vw_rflags);",
          "716:         proto_tree_add_boolean(flags_tree, hf_radiotap_flags_fcs_present,",
          "717:             tvb, offset, 2, vw_rflags);",
          "719:             proto_tree_add_boolean(flags_tree, hf_radiotap_flags_ht,",
          "720:             tvb, offset, 2, vw_rflags);",
          "721:             proto_tree_add_boolean(flags_tree, hf_radiotap_flags_40mhz,",
          "722:             tvb, offset, 2, vw_rflags);",
          "723:             proto_tree_add_boolean(flags_tree, hf_radiotap_flags_shortgi,",
          "724:             tvb, offset, 2, vw_rflags);",
          "727:             proto_tree_add_boolean(flags_tree, hf_radiotap_flags_vht,",
          "728:             tvb, offset, 2, vw_rflags);",
          "729:             proto_tree_add_boolean(flags_tree, hf_radiotap_flags_shortgi,",
          "730:             tvb, offset, 2, vw_rflags);",
          "731:             proto_tree_add_boolean(flags_tree, hf_radiotap_flags_40mhz,",
          "732:             tvb, offset, 2, vw_rflags);",
          "733:             proto_tree_add_boolean(flags_tree, hf_radiotap_flags_80mhz,",
          "734:             tvb, offset, 2, vw_rflags);",
          "736:     }",
          "737:     offset      += 2;",
          "739:     vw_chanflags = tvb_get_letohs(tvb, offset);",
          "740:     offset      += 2;",
          "741:     phyRate = (float)tvb_get_letohs(tvb, offset) / 10;",
          "742:     offset      += 2;",
          "743:     plcp_type = tvb_get_guint8(tvb,offset) & 0x03;",
          "744:     vht_ndp_flag = tvb_get_guint8(tvb,offset) & 0x80;",
          "745:     offset++;",
          "747:     mcs_index = tvb_get_guint8(tvb, offset);",
          "748:     offset++;",
          "749:     nss = tvb_get_guint8(tvb, offset);",
          "750:     offset++;",
          "752:     if ((vw_rflags & FLAGS_CHAN_HT) || (vw_rflags & FLAGS_CHAN_VHT)) {",
          "753:         if (vw_rflags & FLAGS_CHAN_VHT) {",
          "754:             phdr.phy = PHDR_802_11_PHY_11AC;",
          "755:             phdr.phy_info.info_11ac.has_short_gi = TRUE;",
          "756:             phdr.phy_info.info_11ac.short_gi = ((vw_rflags & FLAGS_CHAN_SHORTGI) != 0);",
          "761:             phdr.phy_info.info_11ac.nss[0] = nss;",
          "762:             phdr.phy_info.info_11ac.mcs[0] = mcs_index;",
          "763:             for (i = 1; i < 4; i++)",
          "764:                 phdr.phy_info.info_11ac.nss[i] = 0;",
          "765:         } else {",
          "770:             phdr.phy = PHDR_802_11_PHY_11N;",
          "771:             phdr.phy_info.info_11n.has_mcs_index = TRUE;",
          "772:             phdr.phy_info.info_11n.mcs_index = mcs_index;",
          "774:             phdr.phy_info.info_11n.has_short_gi = TRUE;",
          "775:             phdr.phy_info.info_11n.short_gi = ((vw_rflags & FLAGS_CHAN_SHORTGI) != 0);",
          "777:             phdr.phy_info.info_11n.has_greenfield = TRUE;",
          "778:             phdr.phy_info.info_11n.greenfield = (plcp_type == PLCP_TYPE_GREENFIELD);",
          "779:         }",
          "780:         if (tap_tree) {",
          "",
          "[Added Lines]",
          "1607:     log_mode = (mgmt_byte & 0xf0) >> 4;",
          "1608:     ver_fpga = mgmt_byte & 0x0f;",
          "1610:     if (!ver_fpga)",
          "1611:     {",
          "1613:         vw_info = tvb_get_letohs(tvb, 20);",
          "1614:         p_ifg_info = (struct ifg_info *) p_get_proto_data(wmem_file_scope(), pinfo, proto_ixveriwave, 0);",
          "1621:         offset      = 0;",
          "1622:         length = tvb_get_letohs(tvb, offset);",
          "1623:         offset      += 2;",
          "1625:         vw_rflags = tvb_get_letohs(tvb, offset);",
          "1626:         if (vw_rflags & FLAGS_FCS)",
          "1627:             phdr.fcs_len = 4;",
          "1628:         else",
          "1629:             phdr.fcs_len = 0;",
          "1631:         ft = proto_tree_add_item(tap_tree, hf_radiotap_flags, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1633:         proto_tree_add_item(flags_tree, hf_radiotap_flags_cfp, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1634:         proto_tree_add_item(flags_tree, hf_radiotap_flags_preamble, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1635:         proto_tree_add_item(flags_tree, hf_radiotap_flags_wep, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1636:         proto_tree_add_item(flags_tree, hf_radiotap_flags_frag, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1637:         proto_tree_add_item(flags_tree, hf_radiotap_flags_fcs, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1638:         proto_tree_add_item(flags_tree, hf_radiotap_flags_datapad, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1640:             proto_tree_add_item(flags_tree, hf_radiotap_flags_ht, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1641:             proto_tree_add_item(flags_tree, hf_radiotap_flags_40mhz, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1642:             proto_tree_add_item(flags_tree, hf_radiotap_flags_shortgi, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1645:             proto_tree_add_item(flags_tree, hf_radiotap_flags_vht, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1646:             proto_tree_add_item(flags_tree, hf_radiotap_flags_shortgi, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1647:             proto_tree_add_item(flags_tree, hf_radiotap_flags_40mhz, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1648:             proto_tree_add_item(flags_tree, hf_radiotap_flags_80mhz, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1650:         offset      += 2;",
          "1653:         vw_chanflags = tvb_get_letohs(tvb, offset);",
          "1654:         offset      += 2;",
          "1655:         phyRate = (float)tvb_get_letohs(tvb, offset) / 10;",
          "1656:         offset      += 2;",
          "1657:         plcp_type = tvb_get_guint8(tvb,offset) & 0x03;",
          "1658:         vht_ndp_flag = tvb_get_guint8(tvb,offset) & 0x80;",
          "1659:         offset++;",
          "1663:         mcs_index = tvb_get_guint8(tvb, offset);",
          "1664:         offset++;",
          "1665:         nss = tvb_get_guint8(tvb, offset);",
          "1666:         offset++;",
          "1668:         if ((vw_rflags & FLAGS_CHAN_HT) || (vw_rflags & FLAGS_CHAN_VHT)) {",
          "1669:             if (vw_rflags & FLAGS_CHAN_VHT) {",
          "1670:                 phdr.phy = PHDR_802_11_PHY_11AC;",
          "1671:                 phdr.phy_info.info_11ac.has_short_gi = TRUE;",
          "1672:                 phdr.phy_info.info_11ac.short_gi = ((vw_rflags & FLAGS_CHAN_SHORTGI) != 0);",
          "1677:                 phdr.phy_info.info_11ac.nss[0] = nss;",
          "1678:                 phdr.phy_info.info_11ac.mcs[0] = mcs_index;",
          "1679:                 for (i = 1; i < 4; i++)",
          "1680:                     phdr.phy_info.info_11ac.nss[i] = 0;",
          "1681:             } else {",
          "1686:                 phdr.phy = PHDR_802_11_PHY_11N;",
          "1687:                 phdr.phy_info.info_11n.has_mcs_index = TRUE;",
          "1688:                 phdr.phy_info.info_11n.mcs_index = mcs_index;",
          "1690:                 phdr.phy_info.info_11n.has_short_gi = TRUE;",
          "1691:                 phdr.phy_info.info_11n.short_gi = ((vw_rflags & FLAGS_CHAN_SHORTGI) != 0);",
          "1693:                 phdr.phy_info.info_11n.has_greenfield = TRUE;",
          "1694:                 phdr.phy_info.info_11n.greenfield = (plcp_type == PLCP_TYPE_GREENFIELD);",
          "1695:             }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "785:                                 tvb, offset - 1, 1, ENC_BIG_ENDIAN);",
          "787:             proto_tree_add_uint_format_value(tap_tree, hf_radiotap_datarate,",
          "790:         }",
          "799:         }",
          "806:         }",
          "859:             }",
          "861:         }",
          "933:         }",
          "939:         vweft = proto_tree_add_uint(tap_tree, hf_radiotap_vw_errors,",
          "940:                                     tvb, offset, 4, vw_errors);",
          "941:         vw_errorFlags_tree = proto_item_add_subtree(vweft, ett_radiotap_errors);",
          "",
          "[Removed Lines]",
          "788:                                        tvb, offset - 5, 2, tvb_get_letohs(tvb, offset-5),",
          "789:                                        \"%.1f (MCS %d)\", phyRate, mcs_index);",
          "791:     } else {",
          "797:         if (vw_chanflags & CHAN_CCK) {",
          "798:             phdr.phy = PHDR_802_11_PHY_11B;",
          "800:         phdr.has_data_rate = TRUE;",
          "801:         phdr.data_rate = tvb_get_letohs(tvb, offset-5) / 5;",
          "802:         if (tap_tree) {",
          "803:             proto_tree_add_uint_format_value(tap_tree, hf_radiotap_datarate,",
          "804:             tvb, offset - 5, 2, tvb_get_letohs(tvb, offset-5),",
          "805:             \"%.1f Mb/s\", phyRate);",
          "807:     }",
          "808:     col_add_fstr(pinfo->cinfo, COL_TX_RATE, \"%.1f\", phyRate);",
          "810:     dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "811:     phdr.has_signal_dbm = TRUE;",
          "812:     phdr.signal_dbm = dbm;",
          "813:     col_add_fstr(pinfo->cinfo, COL_RSSI, \"%d dBm\", dbm);",
          "814:     if (tap_tree) {",
          "815:         proto_tree_add_int(tap_tree,",
          "816:                                   hf_radiotap_dbm_antsignal,",
          "817:                                   tvb, offset, 1, dbm);",
          "818:     }",
          "820:     offset++;",
          "821:     dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "822:     if (tap_tree && dbm != 100) {",
          "823:         proto_tree_add_int(tap_tree,",
          "824:                                   hf_radiotap_dbm_antb,",
          "825:                                   tvb, offset, 1, dbm);",
          "826:     }",
          "827:     offset++;",
          "828:     dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "829:     if (tap_tree && dbm != 100) {",
          "830:         proto_tree_add_int(tap_tree,",
          "831:                                   hf_radiotap_dbm_antc,",
          "832:                                   tvb, offset, 1, dbm);",
          "833:     }",
          "834:     offset++;",
          "835:     dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "836:     if (tap_tree && dbm != 100) {",
          "837:         proto_tree_add_int(tap_tree,",
          "838:                                   hf_radiotap_dbm_antd,",
          "839:                                   tvb, offset, 1, dbm);",
          "840:     }",
          "841:     offset+=2;",
          "843:     vw_flags = tvb_get_letohs(tvb, offset);",
          "845:     if (tap_tree) {",
          "846:       if ((vw_rflags & FLAGS_CHAN_HT) || (vw_rflags & FLAGS_CHAN_VHT)) {",
          "847:         if (plcp_type == PLCP_TYPE_VHT_MIXED) {",
          "848:           if (!(vw_flags & VW_RADIOTAPF_TXF) && (vht_ndp_flag == 0x80)) {",
          "850:             proto_tree_add_uint_format(tap_tree, hf_radiotap_plcptype,",
          "851:                                        tvb, offset-3, 1, plcp_type,",
          "852:                                        \"VHT-NDP\");",
          "853:           } else {",
          "856:               proto_tree_add_uint_format(tap_tree, hf_radiotap_plcptype,",
          "857:                                          tvb, offset-3, 1, plcp_type,",
          "858:                                          \"VHT-NDP\");",
          "860:           }",
          "862:       }",
          "864:       proto_tree_add_uint(tap_tree, hf_radiotap_vwf_txf,",
          "865:           tvb, offset, 2, (vw_flags & VW_RADIOTAPF_TXF) != 0);",
          "866:       proto_tree_add_uint(tap_tree, hf_radiotap_vwf_fcserr,",
          "867:           tvb, offset, 2, (vw_flags & VW_RADIOTAPF_FCSERR) != 0);",
          "868:       proto_tree_add_uint(tap_tree, hf_radiotap_vwf_dcrerr,",
          "869:           tvb, offset, 2, (vw_flags & VW_RADIOTAPF_DCRERR) != 0);",
          "870:       proto_tree_add_uint(tap_tree, hf_radiotap_vwf_retrerr,",
          "871:           tvb, offset, 2, (vw_flags & VW_RADIOTAPF_RETRERR) != 0);",
          "872:       proto_tree_add_uint(tap_tree, hf_radiotap_vwf_enctype,",
          "873:           tvb, offset, 2, (vw_flags & VW_RADIOTAPF_ENCMSK) >>",
          "874:                       VW_RADIOTAPF_ENCSHIFT);",
          "875:     }",
          "877:     offset      += 2;",
          "879:     align_offset = ALIGN_OFFSET(offset, 2);",
          "880:     offset += align_offset;",
          "882:     vw_ht_length = tvb_get_letohs(tvb, offset);",
          "883:     if ((tree) && (vw_ht_length != 0)) {",
          "884:         proto_tree_add_uint_format(tap_tree, hf_radiotap_vw_ht_length,",
          "885:             tvb, offset, 2, vw_ht_length, \"HT length: %u (includes the sum of the pieces of the aggregate and their respective Start_Spacing + Delimiter + MPDU + Padding)\",",
          "886:             vw_ht_length);",
          "887:     }",
          "888:     offset      += 2;",
          "890:     align_offset = ALIGN_OFFSET(offset, 2);",
          "891:     offset += align_offset;",
          "895:     if (tap_tree) {",
          "896:         vwift = proto_tree_add_uint(tap_tree, hf_radiotap_vw_info,",
          "897:         tvb, offset, 2, vw_info);",
          "898:         vw_infoFlags_tree = proto_item_add_subtree(vwift, ett_radiotap_info);",
          "903:             proto_tree_add_item(vw_infoFlags_tree,",
          "904:                 hf_radiotap_vw_info_rx_2_bit8, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "905:             proto_tree_add_item(vw_infoFlags_tree,",
          "906:                 hf_radiotap_vw_info_rx_2_bit9, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "907:             proto_tree_add_item(vw_infoFlags_tree,",
          "908:                 hf_radiotap_vw_info_rx_2_bit10, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "909:             proto_tree_add_item(vw_infoFlags_tree,",
          "910:                 hf_radiotap_vw_info_rx_2_bit11, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "911:             proto_tree_add_item(vw_infoFlags_tree,",
          "912:             hf_radiotap_vw_info_rx_2_bit12, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "913:             proto_tree_add_item(vw_infoFlags_tree,",
          "914:             hf_radiotap_vw_info_rx_2_bit13, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "915:             proto_tree_add_item(vw_infoFlags_tree,",
          "916:             hf_radiotap_vw_info_rx_2_bit14, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "917:             proto_tree_add_item(vw_infoFlags_tree,",
          "918:             hf_radiotap_vw_info_rx_2_bit15, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "921:             proto_tree_add_item(vw_infoFlags_tree,",
          "922:                 hf_radiotap_vw_info_tx_bit10, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "923:             proto_tree_add_item(vw_infoFlags_tree,",
          "924:                 hf_radiotap_vw_info_tx_bit11, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "925:             proto_tree_add_item(vw_infoFlags_tree,",
          "926:                 hf_radiotap_vw_info_tx_bit12, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "927:             proto_tree_add_item(vw_infoFlags_tree,",
          "928:                 hf_radiotap_vw_info_tx_bit13, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "929:             proto_tree_add_item(vw_infoFlags_tree,",
          "930:                 hf_radiotap_vw_info_tx_bit14, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "931:             proto_tree_add_item(vw_infoFlags_tree,",
          "932:                 hf_radiotap_vw_info_tx_bit15, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "934:     }",
          "935:     offset      += 2;",
          "937:     vw_errors = tvb_get_letohl(tvb, offset);",
          "938:     if (tap_tree) {",
          "",
          "[Added Lines]",
          "1704:                                         tvb, offset - 5, 2, tvb_get_letohs(tvb, offset-5),",
          "1705:                                         \"%.1f (MCS %d)\", phyRate, mcs_index);",
          "1706:         } else {",
          "1712:             if (vw_chanflags & CHAN_CCK) {",
          "1713:                 phdr.phy = PHDR_802_11_PHY_11B;",
          "1714:             }",
          "1715:             phdr.has_data_rate = TRUE;",
          "1716:             phdr.data_rate = tvb_get_letohs(tvb, offset-5) / 5;",
          "1718:             proto_tree_add_uint_format_value(tap_tree, hf_radiotap_datarate,",
          "1719:                 tvb, offset - 5, 2, tvb_get_letohs(tvb, offset-5),",
          "1720:                 \"%.1f Mb/s\", phyRate);",
          "1722:         col_add_fstr(pinfo->cinfo, COL_TX_RATE, \"%.1f\", phyRate);",
          "1724:         dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "1725:         phdr.has_signal_dbm = TRUE;",
          "1726:         phdr.signal_dbm = dbm;",
          "1727:         col_add_fstr(pinfo->cinfo, COL_RSSI, \"%d dBm\", dbm);",
          "1729:         proto_tree_add_item(tap_tree, hf_radiotap_dbm_anta, tvb, offset, 1, ENC_NA);",
          "1730:         offset++;",
          "1732:         dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "1733:         if (dbm != 100) {",
          "1734:             proto_tree_add_item(tap_tree, hf_radiotap_dbm_antb, tvb, offset, 1, ENC_NA);",
          "1736:         offset++;",
          "1737:         dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "1738:         if (dbm != 100) {",
          "1739:             proto_tree_add_item(tap_tree, hf_radiotap_dbm_antc, tvb, offset, 1, ENC_NA);",
          "1741:         offset++;",
          "1742:         dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "1743:         if (dbm != 100) {",
          "1744:             proto_tree_add_item(tap_tree, hf_radiotap_dbm_antd, tvb, offset, 1, ENC_NA);",
          "1745:         }",
          "1746:         offset+=2;",
          "1748:         vw_flags = tvb_get_letohs(tvb, offset);",
          "1750:         if ((vw_rflags & FLAGS_CHAN_HT) || (vw_rflags & FLAGS_CHAN_VHT)) {",
          "1751:             if (plcp_type == PLCP_TYPE_VHT_MIXED) {",
          "1752:                 if (!(vw_flags & VW_RADIOTAPF_TXF) && (vht_ndp_flag == 0x80)) {",
          "1754:                     proto_tree_add_uint(tap_tree, hf_radiotap_plcptype,",
          "1755:                                                 tvb, offset-3, 1, plcp_type);",
          "1756:                 } else {",
          "1759:                         proto_tree_add_uint(tap_tree, hf_radiotap_plcptype,",
          "1760:                                          tvb, offset-3, 1, plcp_type);",
          "1761:                     }",
          "1762:                 }",
          "1766:         proto_tree_add_item(tap_tree, hf_radiotap_vwf_txf, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1767:         proto_tree_add_item(tap_tree, hf_radiotap_vwf_fcserr, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1768:         proto_tree_add_item(tap_tree, hf_radiotap_vwf_dcrerr, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1769:         proto_tree_add_item(tap_tree, hf_radiotap_vwf_retrerr, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1770:         proto_tree_add_item(tap_tree, hf_radiotap_vwf_enctype, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1772:         offset      += 2;",
          "1774:         align_offset = ALIGN_OFFSET(offset, 2);",
          "1775:         offset += align_offset;",
          "1777:         vw_ht_length = tvb_get_letohs(tvb, offset);",
          "1778:         if ((vw_ht_length != 0)) {",
          "1779:             proto_tree_add_uint_format_value(tap_tree, hf_radiotap_vw_ht_length,",
          "1780:                 tvb, offset, 2, vw_ht_length, \"%u (includes the sum of the pieces of the aggregate and their respective Start_Spacing + Delimiter + MPDU + Padding)\",",
          "1781:                 vw_ht_length);",
          "1782:         }",
          "1783:         offset      += 2;",
          "1785:         align_offset = ALIGN_OFFSET(offset, 2);",
          "1786:         offset += align_offset;",
          "1790:             static const int * vw_info_rx_2_flags[] = {",
          "1791:                 &hf_radiotap_vw_info_rx_2_bit8,",
          "1792:                 &hf_radiotap_vw_info_rx_2_bit9,",
          "1793:                 &hf_radiotap_vw_info_rx_2_bit10,",
          "1794:                 &hf_radiotap_vw_info_rx_2_bit11,",
          "1795:                 &hf_radiotap_vw_info_rx_2_bit12,",
          "1796:                 &hf_radiotap_vw_info_rx_2_bit13,",
          "1797:                 &hf_radiotap_vw_info_rx_2_bit14,",
          "1798:                 &hf_radiotap_vw_info_rx_2_bit15,",
          "1799:                 NULL",
          "1800:             };",
          "1802:             proto_tree_add_bitmask(tap_tree, tvb, offset, hf_radiotap_vw_info, ett_radiotap_info, vw_info_rx_2_flags, ENC_LITTLE_ENDIAN);",
          "1805:             static const int * vw_info_tx_2_flags[] = {",
          "1806:                 &hf_radiotap_vw_info_tx_2_bit10,",
          "1807:                 &hf_radiotap_vw_info_tx_2_bit11,",
          "1808:                 &hf_radiotap_vw_info_tx_2_bit12,",
          "1809:                 &hf_radiotap_vw_info_tx_2_bit13,",
          "1810:                 &hf_radiotap_vw_info_tx_2_bit14,",
          "1811:                 &hf_radiotap_vw_info_tx_2_bit15,",
          "1812:                 NULL",
          "1813:             };",
          "1816:             proto_tree_add_bitmask(tap_tree, tvb, offset, hf_radiotap_vw_info, ett_radiotap_info, vw_info_tx_2_flags, ENC_LITTLE_ENDIAN);",
          "1818:         offset += 2;",
          "1820:         vw_errors = tvb_get_letohl(tvb, offset);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "954:             proto_tree_add_item(vw_errorFlags_tree,",
          "955:                 hf_radiotap_vw_errors_rx_2_bit2, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "984:         }",
          "985:     }",
          "1071:         }",
          "1153:             }",
          "1167:             }",
          "1168:         }",
          "1178:     }",
          "1191: }",
          "1193: void proto_register_ixveriwave(void)",
          "1194: {",
          "1199:         { 0, NULL },",
          "1200:     };",
          "1205:         { 0, NULL },",
          "1206:     };",
          "1211:     };",
          "1217:         { 0, NULL },",
          "1218:     };",
          "1225:     };",
          "1228:     static const value_string encrypt_type[] = {",
          "1229:     { 0, \"No encryption\" },",
          "",
          "[Removed Lines]",
          "959:             proto_tree_add_item(vw_errorFlags_tree,",
          "960:                 hf_radiotap_vw_errors_rx_2_bit4, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "961:             proto_tree_add_item(vw_errorFlags_tree,",
          "962:                 hf_radiotap_vw_errors_rx_2_bit5, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "963:             proto_tree_add_item(vw_errorFlags_tree,",
          "964:                 hf_radiotap_vw_errors_rx_2_bit6, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "965:             proto_tree_add_item(vw_errorFlags_tree,",
          "966:                 hf_radiotap_vw_errors_rx_2_bit7, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "967:             proto_tree_add_item(vw_errorFlags_tree,",
          "968:                 hf_radiotap_vw_errors_rx_2_bit8, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "970:             proto_tree_add_item(vw_errorFlags_tree,",
          "971:             hf_radiotap_vw_errors_rx_2_bit10, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "972:             proto_tree_add_item(vw_errorFlags_tree,",
          "973:             hf_radiotap_vw_errors_rx_2_bit11, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "978:             proto_tree_add_item(vw_errorFlags_tree,",
          "979:                                 hf_radiotap_vw_errors_tx_bit1, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "981:             proto_tree_add_item(vw_errorFlags_tree,",
          "982:                                 hf_radiotap_vw_errors_tx_bit5, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "986:     offset      += 4;",
          "994:     if ((vw_rflags & FLAGS_CHAN_VHT) && vw_ht_length != 0) {",
          "996:         vht_user_pos = tvb_get_guint8(tvb, offset);",
          "997:         vht_mu_mimo_flg = (vht_user_pos & 0x08) >> 3;",
          "999:         if (vht_mu_mimo_flg == 1) {",
          "1000:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_mu_mimo_flg,",
          "1001:                 tvb, offset, 1, vht_mu_mimo_flg, \"VHT MU MIMO: %u \",vht_mu_mimo_flg);",
          "1004:             vht_user_pos = (vht_user_pos & 0x03);",
          "1005:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_user_pos,",
          "1006:                 tvb, offset, 1, vht_user_pos, \"VHT User Pos: %u \",vht_user_pos);",
          "1008:         } else {",
          "1009:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_mu_mimo_flg,",
          "1010:                 tvb, offset, 1, vht_mu_mimo_flg, \"VHT SU MIMO: %u \",vht_mu_mimo_flg);",
          "1011:         }",
          "1025:         vht_grp_id1 = tvb_get_guint8(tvb, offset);",
          "1026:         vht_grp_id2 = tvb_get_guint8(tvb, offset+1);",
          "1027:         vht_grp_id = ((vht_grp_id1 &0xF0) >> 4) + ((vht_grp_id2 &0x03) << 4);",
          "1028:         phdr.phy_info.info_11ac.has_group_id = TRUE;",
          "1029:         phdr.phy_info.info_11ac.group_id = vht_grp_id;",
          "1030:         proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_grp_id,",
          "1031:             tvb, offset, 2, vht_grp_id, \"VHT Group Id: %u \",vht_grp_id);",
          "1034:         {",
          "1035:             vht_su_nsts = tvb_get_guint8(tvb, offset+1);",
          "1036:             vht_su_nsts = ((vht_su_nsts & 0x1c) >> 2);",
          "1037:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_su_nsts,",
          "1038:                 tvb, offset, 2, vht_su_nsts, \"VHT NSTS: %u \",vht_su_nsts);",
          "1041:             vht_su_partial_id1 = tvb_get_guint8(tvb,offset);",
          "1042:             vht_su_partial_id2 = tvb_get_guint8(tvb,offset+1);",
          "1043:             vht_su_partial_id = ((vht_su_partial_id1 &0xE0) >> 5) + ((vht_su_partial_id2 &0x3f) << 3);",
          "1044:             phdr.phy_info.info_11ac.has_partial_aid = TRUE;",
          "1045:             phdr.phy_info.info_11ac.partial_aid = vht_su_partial_id;",
          "1046:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_su_partial_aid,",
          "1047:                 tvb, offset, 2, vht_su_partial_id, \"VHT PARTIAL AID: %u \",vht_su_partial_id);",
          "1048:         }",
          "1049:         else {",
          "1051:             vht_u0_nsts = tvb_get_guint8(tvb, offset+1);",
          "1052:             vht_u0_nsts = ((vht_u0_nsts & 0x1c) >> 2);",
          "1053:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_nsts,",
          "1054:                 tvb, offset, 2, vht_u0_nsts, \"VHT U0 NSTS: %u \",vht_u0_nsts);",
          "1056:             vht_u1_nsts = tvb_get_guint8(tvb, offset+1);",
          "1057:             vht_u1_nsts = ((vht_u1_nsts & 0xe0) >> 5);",
          "1058:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u1_nsts,",
          "1059:                 tvb, offset, 2, vht_u1_nsts, \"VHT U1 NSTS: %u \",vht_u1_nsts);",
          "1062:             vht_u2_nsts = tvb_get_guint8(tvb, offset+1);",
          "1063:             vht_u2_nsts = (vht_u2_nsts & 0x07);",
          "1064:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u2_nsts,",
          "1065:                 tvb, offset, 2, vht_u2_nsts, \"VHT U2 NSTS: %u \",vht_u2_nsts);",
          "1067:             vht_u3_nsts = tvb_get_guint8(tvb, offset+1);",
          "1068:             vht_u3_nsts = ((vht_u3_nsts & 0x38) >> 3);",
          "1069:             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u3_nsts,",
          "1070:                 tvb, offset, 2, vht_u3_nsts, \"VHT U3 NSTS: %u \",vht_u3_nsts);",
          "1079:         offset += 2;",
          "1088:         vht_coding_type = tvb_get_guint8(tvb, offset);",
          "1089:         vht_u0_coding_type = ((vht_coding_type & 0x04) >> 2);",
          "1091:         {",
          "1092:             if (vht_u0_coding_type == 0) {",
          "1093:                 proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1094:                    tvb, offset, 1, vht_u0_coding_type, \"VHT BCC Coding : %u \",vht_u0_coding_type);",
          "1095:             }",
          "1096:             else {",
          "1097:                 proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1098:                    tvb, offset, 1, vht_u0_coding_type, \"VHT LDPC Coding : %u \",vht_u0_coding_type);",
          "1099:             }",
          "1102:                 vht_su_mcs = tvb_get_guint8(tvb, offset);",
          "1103:                 vht_su_mcs = ((vht_su_mcs & 0xF0) >> 4);",
          "1104:                 proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_su_mcs,",
          "1105:                     tvb, offset, 1, vht_su_mcs, \"VHT SU MCS : %u \",vht_su_mcs);",
          "1107:         } else {",
          "1110:             if (vht_u0_nsts) {",
          "1111:                 if (vht_u0_coding_type == 0) {",
          "1112:                     proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1113:                     tvb, offset, 1, vht_u0_coding_type, \"VHT U0 BCC Coding : %u \",vht_u0_coding_type);",
          "1114:                 } else {",
          "1115:                     proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1116:                     tvb, offset, 1, vht_u0_coding_type, \"VHT U0 LDPC Coding : %u \",vht_u0_coding_type);",
          "1117:                 }",
          "1118:             } else {",
          "1120:                 proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1121:                 tvb, offset, 1, vht_u0_coding_type, \"VHT U0 Reserved Coding : %u \",vht_u0_coding_type);",
          "1122:             }",
          "1124:             vht_u1_coding_type = ((vht_coding_type & 0x10) >> 4);",
          "1125:             if (vht_u1_nsts) {",
          "1126:                 if (vht_u1_coding_type == 0) {",
          "1127:                     proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u1_coding_type,",
          "1128:                         tvb, offset, 1, vht_u1_coding_type, \"VHT U1 BCC Coding : %u \",vht_u1_coding_type);",
          "1129:                 } else {",
          "1130:                     proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u1_coding_type,",
          "1131:                         tvb, offset, 1, vht_u1_coding_type, \"VHT U1 LDPC Coding : %u \",vht_u1_coding_type);",
          "1132:                 }",
          "1133:             } else {",
          "1135:                 proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u1_coding_type,",
          "1136:                     tvb, offset, 1, vht_u1_coding_type, \"VHT U1 Reserved Coding : %u \",vht_u1_coding_type);",
          "1137:             }",
          "1140:             vht_u2_coding_type = ((vht_coding_type & 0x20) >> 5);",
          "1141:             if (vht_u2_nsts) {",
          "1142:                 if (vht_u2_coding_type == 0) {",
          "1143:                     proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u2_coding_type,",
          "1144:                     tvb, offset, 1, vht_u2_coding_type, \"VHT U2 BCC Coding : %u \",vht_u2_coding_type);",
          "1145:                 } else {",
          "1146:                     proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u2_coding_type,",
          "1147:                     tvb, offset, 1, vht_u2_coding_type, \"VHT U2 LDPC Coding : %u \",vht_u2_coding_type);",
          "1148:                 }",
          "1149:             }else {",
          "1151:                proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u2_coding_type,",
          "1152:                tvb, offset, 1, vht_u2_coding_type, \"VHT U2 Reserved Coding : %u \",vht_u2_coding_type);",
          "1156:             if (vht_u3_nsts == 1) {",
          "1157:                 guint vht_u3_coding_type;",
          "1159:                 vht_u3_coding_type = ((vht_coding_type & 0x40) >> 6);",
          "1160:                 if (vht_u3_coding_type == 0) {",
          "1161:                     proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u3_coding_type,",
          "1162:                     tvb, offset, 1, vht_u3_coding_type, \"VHT U3 BCC Coding : %u \",vht_u3_coding_type);",
          "1163:                 } else {",
          "1164:                     proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u3_coding_type,",
          "1165:                     tvb, offset, 1, vht_u3_coding_type, \"VHT U3 LDPC Coding : %u \",vht_u3_coding_type);",
          "1166:                 }",
          "1171:         offset = offset + 1;",
          "1172:         vht_beamformed = tvb_get_guint8(tvb, offset);",
          "1173:         vht_beamformed = (vht_beamformed & 0x01);",
          "1174:         phdr.phy_info.info_11ac.has_beamformed = TRUE;",
          "1175:         phdr.phy_info.info_11ac.beamformed = vht_beamformed;",
          "1176:         proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_beamformed,",
          "1177:             tvb, offset, 1, vht_beamformed, \"VHT Beamformed: %u \",vht_beamformed);",
          "1184:     length = length + 17;",
          "1187:     next_tvb = tvb_new_subset_remaining(tvb, length);",
          "1190:     call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "1196:     static const value_string tx_rx_type[] = {",
          "1197:         { 0, \"Received\" },",
          "1198:         { 1, \"Transmitted\" },",
          "1202:     static const value_string fcserr_type[] = {",
          "1203:         { 0, \"Correct\" },",
          "1204:         { 1, \"Incorrect\" },",
          "1208:     static const true_false_string preamble_type = {",
          "1209:       \"Short\",",
          "1210:       \"Long\",",
          "1214:     static const value_string decrypterr_type[] = {",
          "1215:         { 0, \"Decrypt Succeeded\" },",
          "1216:         { 1, \"Decrypt Failed\" },",
          "1221:     static const value_string retryerr_type[] = {",
          "1222:     { 0, \"Retry limit not reached\" },",
          "1223:     { 1, \"Excess retry abort\" },",
          "1224:     { 0, NULL },",
          "",
          "[Added Lines]",
          "1842:             proto_tree_add_item(vw_errorFlags_tree,",
          "1843:                 hf_radiotap_vw_errors_rx_2_bit4, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1844:             proto_tree_add_item(vw_errorFlags_tree,",
          "1845:                 hf_radiotap_vw_errors_rx_2_bit5, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1846:             proto_tree_add_item(vw_errorFlags_tree,",
          "1847:                 hf_radiotap_vw_errors_rx_2_bit6, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1848:             proto_tree_add_item(vw_errorFlags_tree,",
          "1849:                 hf_radiotap_vw_errors_rx_2_bit7, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1850:             proto_tree_add_item(vw_errorFlags_tree,",
          "1851:                 hf_radiotap_vw_errors_rx_2_bit8, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1853:             proto_tree_add_item(vw_errorFlags_tree,",
          "1854:             hf_radiotap_vw_errors_rx_2_bit10, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1855:             proto_tree_add_item(vw_errorFlags_tree,",
          "1856:             hf_radiotap_vw_errors_rx_2_bit11, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1861:             proto_tree_add_item(vw_errorFlags_tree,",
          "1862:                                 hf_radiotap_vw_errors_tx_bit1, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1864:             proto_tree_add_item(vw_errorFlags_tree,",
          "1865:                                 hf_radiotap_vw_errors_tx_bit5, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1867:         }",
          "1868:         offset += 4;",
          "1871:         if ((vw_rflags & FLAGS_CHAN_VHT) && vw_ht_length != 0)",
          "1872:         {",
          "1873:             if (plcp_type == 0x03) //If the frame is VHT type",
          "1874:             {",
          "1878:                 vht_user_pos = tvb_get_guint8(tvb, offset);",
          "1879:                 vht_mu_mimo_flg = (vht_user_pos & 0x08) >> 3;",
          "1881:                 if (vht_mu_mimo_flg == 1) {",
          "1882:                     proto_tree_add_item(tap_tree, hf_radiotap_vht_mu_mimo_flg, tvb, offset, 1, ENC_NA);",
          "1885:                     proto_tree_add_item(tap_tree, hf_radiotap_vht_user_pos, tvb, offset, 1, ENC_NA);",
          "1887:                 } else {",
          "1888:                     proto_tree_add_item(tap_tree, hf_radiotap_vht_su_mimo_flg, tvb, offset, 1, ENC_NA);",
          "1889:                 }",
          "1903:                 vht_grp_id1 = tvb_get_guint8(tvb, offset);",
          "1904:                 vht_grp_id2 = tvb_get_guint8(tvb, offset+1);",
          "1905:                 vht_grp_id = ((vht_grp_id1 &0xF0) >> 4) + ((vht_grp_id2 &0x03) << 4);",
          "1906:                 phdr.phy_info.info_11ac.has_group_id = TRUE;",
          "1907:                 phdr.phy_info.info_11ac.group_id = vht_grp_id;",
          "1908:                 proto_tree_add_uint(tap_tree, hf_radiotap_vht_grp_id, tvb, offset, 2, vht_grp_id);",
          "1911:                 {",
          "1912:                     proto_tree_add_item(tap_tree, hf_radiotap_vht_su_nsts, tvb, offset+1, 1, ENC_NA);",
          "1916:                     vht_su_partial_id1 = tvb_get_guint8(tvb,offset);",
          "1917:                     vht_su_partial_id2 = tvb_get_guint8(tvb,offset+1);",
          "1918:                     vht_su_partial_id = ((vht_su_partial_id1 &0xE0) >> 5) + ((vht_su_partial_id2 &0x3f) << 3);",
          "1919:                     phdr.phy_info.info_11ac.has_partial_aid = TRUE;",
          "1920:                     phdr.phy_info.info_11ac.partial_aid = vht_su_partial_id;",
          "1921:                     proto_tree_add_item(tap_tree, hf_radiotap_vht_su_partial_aid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "1922:                 }",
          "1923:                 else {",
          "1925:                     proto_tree_add_item_ret_uint(tap_tree, hf_radiotap_vht_u0_nsts, tvb, offset, 2, ENC_LITTLE_ENDIAN, &vht_u0_nsts);",
          "1926:                     proto_tree_add_item_ret_uint(tap_tree, hf_radiotap_vht_u1_nsts, tvb, offset, 2, ENC_LITTLE_ENDIAN, &vht_u1_nsts);",
          "1927:                     proto_tree_add_item_ret_uint(tap_tree, hf_radiotap_vht_u2_nsts, tvb, offset, 2, ENC_LITTLE_ENDIAN, &vht_u2_nsts);",
          "1928:                     proto_tree_add_item_ret_uint(tap_tree, hf_radiotap_vht_u3_nsts, tvb, offset, 2, ENC_LITTLE_ENDIAN, &vht_u3_nsts);",
          "1929:                 }",
          "1937:                  offset += 2;",
          "1947:                 vht_coding_type = tvb_get_guint8(tvb, offset);",
          "1948:                 vht_u0_coding_type = ((vht_coding_type & 0x04) >> 2);",
          "1951:                 {",
          "1952:                     if (vht_u0_coding_type == 0) {",
          "1953:                         proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1954:                                 tvb, offset, 1, vht_u0_coding_type, \"VHT BCC Coding : %u \",vht_u0_coding_type);",
          "1955:                     }",
          "1956:                     else {",
          "1957:                         proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1958:                                 tvb, offset, 1, vht_u0_coding_type, \"VHT LDPC Coding : %u \",vht_u0_coding_type);",
          "1959:                     }",
          "1962:                         vht_su_mcs = tvb_get_guint8(tvb, offset);",
          "1963:                         vht_su_mcs = ((vht_su_mcs & 0xF0) >> 4);",
          "1964:                         proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_su_mcs,",
          "1965:                             tvb, offset, 1, vht_su_mcs, \"VHT SU MCS : %u \",vht_su_mcs);",
          "1967:                 } else {",
          "1970:                     if (vht_u0_nsts) {",
          "1971:                         if (vht_u0_coding_type == 0) {",
          "1972:                             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1973:                             tvb, offset, 1, vht_u0_coding_type, \"VHT U0 BCC Coding : %u \",vht_u0_coding_type);",
          "1974:                         } else {",
          "1975:                             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1976:                             tvb, offset, 1, vht_u0_coding_type, \"VHT U0 LDPC Coding : %u \",vht_u0_coding_type);",
          "1977:                         }",
          "1978:                     } else {",
          "1980:                         proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u0_coding_type,",
          "1981:                         tvb, offset, 1, vht_u0_coding_type, \"VHT U0 Reserved Coding : %u \",vht_u0_coding_type);",
          "1982:                     }",
          "1984:                     vht_u1_coding_type = ((vht_coding_type & 0x10) >> 4);",
          "1985:                     if (vht_u1_nsts) {",
          "1986:                         if (vht_u1_coding_type == 0) {",
          "1987:                             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u1_coding_type,",
          "1988:                                 tvb, offset, 1, vht_u1_coding_type, \"VHT U1 BCC Coding : %u \",vht_u1_coding_type);",
          "1989:                         } else {",
          "1990:                             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u1_coding_type,",
          "1991:                                 tvb, offset, 1, vht_u1_coding_type, \"VHT U1 LDPC Coding : %u \",vht_u1_coding_type);",
          "1992:                         }",
          "1993:                     } else {",
          "1995:                         proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u1_coding_type,",
          "1996:                             tvb, offset, 1, vht_u1_coding_type, \"VHT U1 Reserved Coding : %u \",vht_u1_coding_type);",
          "1997:                     }",
          "2000:                     vht_u2_coding_type = ((vht_coding_type & 0x20) >> 5);",
          "2001:                     if (vht_u2_nsts) {",
          "2002:                         if (vht_u2_coding_type == 0) {",
          "2003:                             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u2_coding_type,",
          "2004:                             tvb, offset, 1, vht_u2_coding_type, \"VHT U2 BCC Coding : %u \",vht_u2_coding_type);",
          "2005:                         } else {",
          "2006:                             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u2_coding_type,",
          "2007:                             tvb, offset, 1, vht_u2_coding_type, \"VHT U2 LDPC Coding : %u \",vht_u2_coding_type);",
          "2008:                         }",
          "2009:                     } else {",
          "2011:                         proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u2_coding_type,",
          "2012:                         tvb, offset, 1, vht_u2_coding_type, \"VHT U2 Reserved Coding : %u \",vht_u2_coding_type);",
          "2013:                     }",
          "2016:                     if (vht_u3_nsts == 1) {",
          "2019:                         vht_u3_coding_type = ((vht_coding_type & 0x40) >> 6);",
          "2020:                         if (vht_u3_coding_type == 0) {",
          "2021:                             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u3_coding_type,",
          "2022:                             tvb, offset, 1, vht_u3_coding_type, \"VHT U3 BCC Coding : %u \",vht_u3_coding_type);",
          "2023:                         } else {",
          "2024:                             proto_tree_add_uint_format(tap_tree, hf_radiotap_vht_u3_coding_type,",
          "2025:                             tvb, offset, 1, vht_u3_coding_type, \"VHT U3 LDPC Coding : %u \",vht_u3_coding_type);",
          "2026:                         }",
          "2027:                     }",
          "2028:                 }",
          "2031:                 offset += 1;",
          "2032:                 vht_beamformed = tvb_get_guint8(tvb, offset) & 0x01;",
          "2033:                 phdr.phy_info.info_11ac.has_beamformed = TRUE;",
          "2034:                 phdr.phy_info.info_11ac.beamformed = vht_beamformed;",
          "2035:                 proto_tree_add_item(tap_tree, hf_radiotap_vht_beamformed, tvb, offset, 1, ENC_NA);",
          "2036:             }",
          "2037:         }",
          "2038:     }",
          "2039:     else {",
          "2041:         offset      = 0;",
          "2043:         length = tvb_get_letohs(tvb, offset);",
          "2044:         offset      += 2;",
          "2046:         if (tvb_get_guint8(tvb, offset+1) & 0x01)",
          "2047:             vwl1t = proto_tree_add_item(tap_tree, hf_radiotap_tx, tvb, offset, 12, ENC_NA);",
          "2048:         else",
          "2049:             vwl1t = proto_tree_add_item(tap_tree, hf_radiotap_rx, tvb, offset, 12, ENC_NA);",
          "2050:         vw_l1info_tree = proto_item_add_subtree(vwl1t, ett_radiotap_layer1);",
          "2052:         preamble = (tvb_get_guint8(tvb, offset) & 0x40) >> 6;",
          "2053:         plcp_type = tvb_get_guint8(tvb, offset+4) & 0x0f;",
          "2054:         if (plcp_type == 3)",
          "2055:             mcs_index = tvb_get_guint8(tvb, offset) & 0x0f;",
          "2056:         else",
          "2057:             mcs_index = tvb_get_guint8(tvb, offset) & 0x3f;",
          "2059:         proto_tree_add_uint(vw_l1info_tree, hf_radiotap_preamble,",
          "2060:             tvb, offset, 1, preamble);",
          "2061:         proto_tree_add_uint(vw_l1info_tree, hf_radiotap_mcsindex,",
          "2062:                 tvb, offset, 1, mcs_index);",
          "2063:         offset++;",
          "2065:         nss = (tvb_get_guint8(tvb, offset) & 0xf0) >> 4;",
          "2066:         direction = tvb_get_guint8(tvb, offset) & 0x01;",
          "2068:         if (plcp_type)",
          "2069:             proto_tree_add_uint(vw_l1info_tree, hf_radiotap_nss, tvb, offset, 1, nss);",
          "2071:         proto_tree_add_uint(vw_l1info_tree, hf_radiotap_vwf_txf, tvb, offset, 1, direction);",
          "2072:         offset++;",
          "2078:         phdr.fcs_len = 0;",
          "2079:         switch (plcp_type) //To check 5 types of PLCP(NULL, CCK, OFDM, HT & VHT)",
          "2080:         {",
          "2081:         case 0:",
          "2087:             if (mcs_index < 4)",
          "2088:             {",
          "2089:                 phdr.phy = PHDR_802_11_PHY_11B;",
          "2090:             }",
          "2091:             phdr.has_data_rate = TRUE;",
          "2092:             phdr.data_rate = tvb_get_letohs(tvb, offset) / 5;",
          "2093:             break;",
          "2095:         case 1:",
          "2101:             phdr.phy = PHDR_802_11_PHY_11N;",
          "2102:             phdr.phy_info.info_11n.has_mcs_index = TRUE;",
          "2103:             phdr.phy_info.info_11n.mcs_index = mcs_index;",
          "2104:             phdr.phy_info.info_11n.has_short_gi = TRUE;",
          "2105:             phdr.phy_info.info_11n.short_gi = preamble;",
          "2106:             phdr.phy_info.info_11n.has_greenfield = TRUE;",
          "2107:             phdr.phy_info.info_11n.greenfield = (plcp_type == PLCP_TYPE_GREENFIELD);",
          "2108:             break;",
          "2110:         case 3:",
          "2111:             phdr.phy = PHDR_802_11_PHY_11AC;",
          "2112:             phdr.phy_info.info_11ac.has_short_gi = TRUE;",
          "2113:             phdr.phy_info.info_11ac.short_gi = preamble;",
          "2118:             phdr.phy_info.info_11ac.nss[0] = nss;",
          "2119:             phdr.phy_info.info_11ac.mcs[0] = mcs_index;",
          "2120:             for (i = 1; i < 4; i++)",
          "2121:                 phdr.phy_info.info_11ac.nss[i] = 0;",
          "2122:             break;",
          "2123:         }",
          "2125:         phyRate = (float)tvb_get_letohs(tvb, offset) / 10;",
          "2126:         proto_tree_add_uint_format_value(vw_l1info_tree, hf_radiotap_datarate,",
          "2127:                     tvb, offset, 2, tvb_get_letohs(tvb, offset),",
          "2128:                     \"%.1f Mb/s\", phyRate);",
          "2129:         offset = offset + 2;",
          "2130:         col_add_fstr(pinfo->cinfo, COL_TX_RATE, \"%.1f\", phyRate);",
          "2132:         sigbw = (tvb_get_guint8(tvb, offset) & 0xf0) >> 4;",
          "2133:         plcp_type = tvb_get_guint8(tvb, offset) & 0x0f;",
          "2134:         proto_tree_add_uint(vw_l1info_tree,",
          "2135:                 hf_radiotap_sigbandwidth, tvb, offset, 1, sigbw);",
          "2137:         if (plcp_type)",
          "2138:             proto_tree_add_uint(vw_l1info_tree,",
          "2139:                 hf_radiotap_modulation, tvb, offset, 1, plcp_type);",
          "2140:         else",
          "2141:         {",
          "2142:             if (mcs_index < 4)",
          "2143:                 proto_tree_add_uint_format_value(vw_l1info_tree, hf_radiotap_modulation,",
          "2144:                     tvb, offset, 1, plcp_type, \"CCK (%u)\", plcp_type);",
          "2145:             else",
          "2146:                 proto_tree_add_uint_format_value(vw_l1info_tree, hf_radiotap_modulation,",
          "2147:                     tvb, offset, 1, plcp_type, \"OFDM (%u)\", plcp_type);",
          "2148:         }",
          "2149:         offset++;",
          "2151:         dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "2153:         phdr.has_signal_dbm = TRUE;",
          "2154:         phdr.signal_dbm = dbm;",
          "2156:         col_add_fstr(pinfo->cinfo, COL_RSSI, \"%d dBm\", dbm);",
          "2158:         if (cmd_type != 1)",
          "2159:             proto_tree_add_item(vwl1t, hf_radiotap_dbm_anta,",
          "2160:                                     tvb, offset, 1, ENC_NA);",
          "2161:         else",
          "2162:             proto_tree_add_item(vwl1t, hf_radiotap_dbm_tx_anta,",
          "2163:                                     tvb, offset, 1, ENC_NA);",
          "2164:         offset++;",
          "2166:         dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "2167:         if (dbm != 100) {",
          "2168:             if (cmd_type != 1)",
          "2169:                 proto_tree_add_item(vwl1t, hf_radiotap_dbm_antb,",
          "2170:                                             tvb, offset, 1, ENC_NA);",
          "2171:             else",
          "2172:                 proto_tree_add_item(vwl1t,",
          "2173:                                         hf_radiotap_dbm_tx_antb,",
          "2174:                                         tvb, offset, 1, ENC_NA);",
          "2175:         }",
          "2176:         offset++;",
          "2178:         dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "2179:         if (dbm != 100) {",
          "2180:             if (cmd_type != 1)",
          "2181:                 proto_tree_add_item(vwl1t, hf_radiotap_dbm_antc,",
          "2182:                                         tvb, offset, 1, ENC_NA);",
          "2183:             else",
          "2184:                 proto_tree_add_item(vwl1t, hf_radiotap_dbm_tx_antc,",
          "2185:                                         tvb, offset, 1, ENC_NA);",
          "2186:         }",
          "2187:         offset++;",
          "2189:         dbm = (gint8) tvb_get_guint8(tvb, offset);",
          "2190:         if (dbm != 100) {",
          "2191:             if (cmd_type != 1)",
          "2192:                 proto_tree_add_item(vwl1t, hf_radiotap_dbm_antd,",
          "2193:                                         tvb, offset, 1, ENC_NA);",
          "2194:             else",
          "2195:                 proto_tree_add_item(vwl1t,",
          "2196:                                         hf_radiotap_dbm_tx_antd,",
          "2197:                                         tvb, offset, 1, ENC_NA);",
          "2198:         }",
          "2199:         offset++;",
          "2201:         proto_tree_add_item(vw_l1info_tree, hf_radiotap_sigbandwidthmask, tvb, offset, 1, ENC_NA);",
          "2202:         offset++;",
          "2204:         if (cmd_type != 1)",
          "2205:         {",
          "2206:             proto_tree_add_item(vw_l1info_tree, hf_radiotap_antennaportenergydetect, tvb, offset, 1, ENC_NA);",
          "2207:         }",
          "2208:         else",
          "2209:         {",
          "2210:             proto_tree_add_item(vw_l1info_tree, hf_radiotap_tx_antennaselect, tvb, offset, 1, ENC_NA);",
          "2211:             proto_tree_add_item(vw_l1info_tree, hf_radiotap_tx_stbcselect, tvb, offset, 1, ENC_NA);",
          "2212:         }",
          "2213:         if (plcp_type == 3)",
          "2214:         {",
          "2215:             proto_tree_add_item(vw_l1info_tree, hf_radiotap_mumask, tvb, offset, 1, ENC_NA);",
          "2216:         }",
          "2217:         offset++;",
          "2219:         if (plcp_type == 3)",
          "2220:         {",
          "2222:             vht_user_pos = tvb_get_guint8(tvb, offset);",
          "2224:             vwict = proto_tree_add_item(vw_l1info_tree,",
          "2225:                     hf_radiotap_l1infoc, tvb, offset, 1, vht_user_pos);",
          "2226:             vw_infoC_tree = proto_item_add_subtree(vwict, ett_radiotap_infoc);",
          "2228:             vht_ndp_flag = (vht_user_pos & 0x80) >> 7;",
          "2229:             vht_mu_mimo_flg = (vht_user_pos & 0x08) >> 3;",
          "2230:             proto_tree_add_item(vw_infoC_tree, hf_radiotap_vht_ndp_flg, tvb, offset, 1, ENC_NA);",
          "2231:             if (vht_ndp_flag == 0)",
          "2232:             {",
          "2233:                 if (vht_mu_mimo_flg == 1) {",
          "2234:                     proto_tree_add_uint(vw_infoC_tree, hf_radiotap_vht_mu_mimo_flg,",
          "2235:                         tvb, offset, 1, vht_mu_mimo_flg);",
          "2238:                     proto_tree_add_item(vw_infoC_tree, hf_radiotap_vht_user_pos, tvb, offset, 1, ENC_NA);",
          "2240:                 } else {",
          "2241:                     proto_tree_add_item(vw_infoC_tree, hf_radiotap_vht_su_mimo_flg, tvb, offset, 1, ENC_NA);",
          "2242:                 }",
          "2243:             }",
          "2244:         }",
          "2245:         offset++;",
          "2247:         mpdu_length = tvb_get_letohs(tvb, offset);",
          "2248:         if (cmd_type != 1) //Checking for Rx and Tx",
          "2249:         {",
          "2250:             proto_tree_add_item(vw_l1info_tree, hf_ixveriwave_frame_length, tvb, offset, 2, mpdu_length);",
          "2251:         }",
          "2252:         offset      += 2;",
          "2255:         vw_plcp_info = tvb_get_guint8(tvb, offset);",
          "2257:         vwplt = proto_tree_add_item(tap_tree, hf_radiotap_plcp_info, tvb, offset, 16, vw_plcp_info);",
          "2258:         vw_plcpinfo_tree = proto_item_add_subtree(vwplt, ett_radiotap_plcp);",
          "2260:         switch (plcp_type) //To check 5 types of PLCP(NULL, CCK, OFDM, HT & VHT)",
          "2261:         {",
          "2262:         case 0:",
          "2263:             if (mcs_index < 4)",
          "2264:             {",
          "2265:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_type,",
          "2266:                     tvb, offset-10, 1, plcp_type, \"Format: Legacy CCK \");",
          "2267:                 signal = tvb_get_guint8(tvb, offset);",
          "2268:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_plcp_signal,",
          "2269:                                         tvb, offset, 1, signal);",
          "2270:                 offset = offset + 1;",
          "2271:                 plcp_service = tvb_get_guint8(tvb, offset);",
          "2272:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_plcp_service,",
          "2273:                                         tvb, offset, 1, plcp_service);",
          "2274:                 offset = offset + 1;",
          "2275:                 vht_plcp_length = tvb_get_letohs(tvb, offset);",
          "2278:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_length,",
          "2279:                     tvb, offset, 2, vht_plcp_length, \"PLCP Length: %u \",vht_plcp_length);",
          "2280:                 offset      += 2;",
          "2281:                 crc16 = tvb_get_letohs(tvb, offset);",
          "2282:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_crc16,",
          "2283:                     tvb, offset, 2, crc16, \"CRC 16: %u \",crc16);",
          "2284:                 offset      += 2;",
          "2285:                 offset = offset + 9;",
          "2286:                 rfid = tvb_get_guint8(tvb, offset);",
          "2287:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_rfid,",
          "2288:                                         tvb, offset, 1, rfid);",
          "2289:                 offset = offset + 1;",
          "2290:             }",
          "2291:             else",
          "2292:             {",
          "2293:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2294:                     tvb, offset, 1, plcp_type, \"Format: Legacy OFDM \");",
          "2295:                 vht_plcp_length1 = tvb_get_guint8(tvb, offset);",
          "2296:                 vht_plcp_length2 = tvb_get_guint8(tvb, offset+1);",
          "2297:                 vht_plcp_length3 = tvb_get_guint8(tvb, offset+2);",
          "2298:                 vht_plcp_length1 = ((vht_plcp_length1 & 0xe0) >> 5);",
          "2299:                 vht_plcp_length3 = ((vht_plcp_length3) & 0x01);",
          "2300:                 vht_plcp_length = (vht_plcp_length1 + (vht_plcp_length2 << 3) + (vht_plcp_length3 << 11));",
          "2301:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_plcp_length,",
          "2302:                                         tvb, offset, 3, vht_plcp_length);",
          "2303:                 vht_rate = (tvb_get_guint8(tvb, offset) &0x0f);",
          "2304:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_rate,",
          "2305:                                         tvb, offset, 1, vht_rate);",
          "2306:                 vht_parity = (tvb_get_guint8(tvb, offset+2) &0x02)>>1;",
          "2307:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_parity,",
          "2308:                                         tvb, offset+2, 1, vht_parity);",
          "2309:                 offset = offset + 3;",
          "2310:                 plcp_service_ofdm = tvb_get_letohs(tvb, offset);",
          "2311:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_plcp_service,",
          "2312:                                         tvb, offset, 2, plcp_service_ofdm);",
          "2314:                 offset = offset + 2;",
          "2315:                 offset = offset + 10;",
          "2316:                 rfid = tvb_get_guint8(tvb, offset);",
          "2317:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_rfid,",
          "2318:                                         tvb, offset, 1, rfid);",
          "2319:                 offset = offset + 1;",
          "2321:             }",
          "2322:             break;",
          "2324:         case 1:",
          "2325:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2326:                 tvb, offset, 1, plcp_type, \"Format: HT \");",
          "2327:             vht_plcp_length1 = tvb_get_guint8(tvb, offset);",
          "2328:             vht_plcp_length2 = tvb_get_guint8(tvb, offset+1);",
          "2329:             vht_plcp_length3 = tvb_get_guint8(tvb, offset+2);",
          "2330:             vht_plcp_length1 = ((vht_plcp_length1 & 0xe0) >> 5);",
          "2331:             vht_plcp_length3 = ((vht_plcp_length3) & 0x01);",
          "2332:             vht_plcp_length = (vht_plcp_length1 + (vht_plcp_length2 << 3) + (vht_plcp_length3 << 11));",
          "2333:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_plcp_length,",
          "2334:                                     tvb, offset, 3, vht_plcp_length);",
          "2335:             vht_rate = (tvb_get_guint8(tvb, offset) &0x0f);",
          "2336:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_rate,",
          "2337:                                     tvb, offset, 1, vht_rate);",
          "2338:             vht_parity = (tvb_get_guint8(tvb, offset+2) &0x02)>>1;",
          "2339:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_parity,",
          "2340:                                     tvb, offset+2, 1, vht_parity);",
          "2341:             offset = offset + 3;",
          "2343:             vht_bw = tvb_get_guint8(tvb, offset) &0x80 >>7;",
          "2346:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_bw,",
          "2347:                 tvb, offset, 1, vht_bw, \"CBW 20/40: %u \",vht_bw);",
          "2348:             vht_mcs = (tvb_get_guint8(tvb, offset)&0x7f);",
          "2349:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_mcs,",
          "2350:                                     tvb, offset, 1, vht_mcs);",
          "2351:             offset = offset + 1;",
          "2352:             vht_length = tvb_get_letohs(tvb, offset);",
          "2355:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_length,",
          "2356:                 tvb, offset, 2, vht_length, \"HT Length: %u \", vht_length);",
          "2357:             offset      += 2;",
          "2358:             vht_shortgi = (tvb_get_guint8(tvb, offset) &0x80) >> 7;",
          "2359:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_shortgi,",
          "2360:                                     tvb, offset, 1, vht_shortgi);",
          "2361:             feccoding = (tvb_get_guint8(tvb, offset) &0x40) >> 6;",
          "2362:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_feccoding,",
          "2363:                                     tvb, offset, 1, feccoding);",
          "2364:             vht_stbc = (tvb_get_guint8(tvb, offset) &0x30) >> 4;",
          "2365:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_stbc,",
          "2366:                                     tvb, offset, 1, vht_stbc);",
          "2367:             aggregation = (tvb_get_guint8(tvb, offset) &0x08) >> 3;",
          "2368:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_aggregation,",
          "2369:                                     tvb, offset, 1, aggregation);",
          "2370:             notsounding = (tvb_get_guint8(tvb, offset) &0x02) >> 1;",
          "2371:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_notsounding,",
          "2372:                                     tvb, offset, 1, notsounding);",
          "2373:             smoothing = (tvb_get_guint8(tvb, offset) &0x01);",
          "2374:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_smoothing,",
          "2375:                                     tvb, offset, 1, smoothing);",
          "2376:             offset = offset + 1;",
          "2378:             vht_crc1 = tvb_get_guint8(tvb, offset);",
          "2379:             vht_crc2 = tvb_get_guint8(tvb, offset+1);",
          "2380:             vht_crc = ((vht_crc1 &0xFC) >> 2) + ((vht_crc2 &0x03) << 2);",
          "2381:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_crc,",
          "2382:                                     tvb, offset, 2, vht_crc);",
          "2383:             ness = (tvb_get_guint8(tvb, offset) &0x03);",
          "2384:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_ness,",
          "2385:                                     tvb, offset, 1, ness);",
          "2386:             offset = offset + 1;",
          "2387:             vht_tail = (tvb_get_guint8(tvb, offset) &0xFC) >> 2;",
          "2390:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_tail,",
          "2391:                 tvb, offset, 1, vht_tail, \"Signal Tail: %u \", vht_tail);",
          "2392:             offset = offset + 1;",
          "2393:             plcp_service_ofdm = tvb_get_letohs(tvb, offset);",
          "2394:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_plcp_service,",
          "2395:                                     tvb, offset, 2, plcp_service_ofdm);",
          "2397:             offset = offset + 2;",
          "2398:             offset = offset + 4;",
          "2399:             rfid = tvb_get_guint8(tvb, offset);",
          "2400:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_rfid,",
          "2401:                                     tvb, offset, 1, rfid);",
          "2402:             offset = offset + 1;",
          "2403:             break;",
          "2405:         case 2:",
          "2407:             break;",
          "2409:         case 3:",
          "2410:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2411:                 tvb, offset, 1, plcp_type, \"Format: VHT \");",
          "2412:             vht_plcp_length1 = tvb_get_guint8(tvb, offset);",
          "2413:             vht_plcp_length2 = tvb_get_guint8(tvb, offset+1);",
          "2414:             vht_plcp_length3 = tvb_get_guint8(tvb, offset+2);",
          "2415:             vht_plcp_length1 = ((vht_plcp_length1 & 0xe0) >> 5);",
          "2416:             vht_plcp_length3 = ((vht_plcp_length3) & 0x01);",
          "2417:             vht_plcp_length = (vht_plcp_length1 + (vht_plcp_length2 << 3) + (vht_plcp_length3 << 11));",
          "2418:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_plcp_length,",
          "2419:                                     tvb, offset, 3, vht_plcp_length);",
          "2420:             vht_rate = (tvb_get_guint8(tvb, offset) &0x0f);",
          "2421:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_rate,",
          "2422:                                     tvb, offset, 1, vht_rate);",
          "2423:             vht_parity = (tvb_get_guint8(tvb, offset+2) &0x02) >>1;",
          "2424:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_parity,",
          "2425:                                     tvb, offset+2, 1, vht_parity);",
          "2426:             offset = offset + 3; // 3 bytes are for HT length",
          "2427:             vht_bw = tvb_get_guint8(tvb, offset) &0x03;",
          "2428:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_bw,",
          "2429:                                     tvb, offset, 1, vht_bw);",
          "2430:             vht_stbc = (tvb_get_guint8(tvb, offset) &0x08) >> 3;",
          "2431:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_stbc,",
          "2432:                                     tvb, offset, 1, vht_stbc);",
          "2434:             vht_grp_id1 = tvb_get_guint8(tvb, offset);",
          "2435:             vht_grp_id2 = tvb_get_guint8(tvb, offset+1);",
          "2436:             vht_grp_id = ((vht_grp_id1 &0xF0) >> 4) + ((vht_grp_id2 &0x03) << 4);",
          "2438:             phdr.phy_info.info_11ac.has_group_id = TRUE;",
          "2439:             phdr.phy_info.info_11ac.group_id = vht_grp_id;",
          "2441:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_grp_id,",
          "2442:                 tvb, offset, 2, vht_grp_id);",
          "2443:             offset = offset + 1;",
          "2444:             if ((vht_grp_id == 0) || (vht_grp_id == 63)) // SU VHT type",
          "2445:             {",
          "2446:                 vht_su_nsts = tvb_get_guint8(tvb, offset);",
          "2447:                 vht_su_nsts = ((vht_su_nsts & 0x1c) >> 2);",
          "2448:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_su_nsts,",
          "2449:                     tvb, offset, 2, vht_su_nsts);",
          "2451:                 vht_su_partial_id1 = tvb_get_guint8(tvb,offset);",
          "2452:                 vht_su_partial_id2 = tvb_get_guint8(tvb,offset+1);",
          "2453:                 vht_su_partial_id = ((vht_su_partial_id1 &0xE0) >> 5) + ((vht_su_partial_id2 &0x3f) << 3);",
          "2455:                 phdr.phy_info.info_11ac.has_partial_aid = TRUE;",
          "2456:                 phdr.phy_info.info_11ac.partial_aid = vht_su_partial_id;",
          "2458:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_su_partial_aid,",
          "2459:                     tvb, offset, 2, vht_su_partial_id, \"PARTIAL AID: %u \",vht_su_partial_id);",
          "2460:                 offset = offset + 1;",
          "2461:             }",
          "2462:             else {",
          "2464:                 vht_u0_nsts = tvb_get_guint8(tvb, offset);",
          "2465:                 vht_u0_nsts = ((vht_u0_nsts & 0x1c) >> 2);",
          "2466:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_u0_nsts,",
          "2467:                     tvb, offset, 2, vht_u0_nsts, \"MU[0] NSTS: %u \",vht_u0_nsts);",
          "2469:                 vht_u1_nsts = tvb_get_guint8(tvb, offset);",
          "2470:                 vht_u1_nsts = ((vht_u1_nsts & 0xe0) >> 5);",
          "2471:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_u1_nsts,",
          "2472:                     tvb, offset, 2, vht_u1_nsts, \"MU[1] NSTS: %u \",vht_u1_nsts);",
          "2474:                 vht_u2_nsts = tvb_get_guint8(tvb, offset+1);",
          "2475:                 vht_u2_nsts = (vht_u2_nsts & 0x07);",
          "2476:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_u2_nsts,",
          "2477:                     tvb, offset, 2, vht_u2_nsts, \"MU[2] NSTS: %u \",vht_u2_nsts);",
          "2479:                 vht_u3_nsts = tvb_get_guint8(tvb, offset+1);",
          "2480:                 vht_u3_nsts = ((vht_u3_nsts & 0x38) >> 3);",
          "2481:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_u3_nsts,",
          "2482:                     tvb, offset, 2, vht_u3_nsts, \"MU[3] NSTS: %u \",vht_u3_nsts);",
          "2483:                 offset = offset + 1;",
          "2484:             }",
          "2486:             vht_txop_ps_notallowd = (tvb_get_guint8(tvb, offset) &0x40) >> 6;",
          "2487:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_txop_ps_notallowd,",
          "2488:                                     tvb, offset, 1, vht_txop_ps_notallowd);",
          "2489:             offset = offset + 1;",
          "2491:             vht_shortgi = tvb_get_guint8(tvb, offset) &0x01;",
          "2492:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_shortgi,",
          "2493:                                     tvb, offset, 1, vht_shortgi);",
          "2494:             vht_shortginsymdisa = (tvb_get_guint8(tvb, offset) &0x02) >> 1;",
          "2495:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_shortginsymdisa,",
          "2496:                                     tvb, offset, 1, vht_shortginsymdisa);",
          "2498:             vht_coding_type = (tvb_get_guint8(tvb, offset)& 0x04) >> 2;",
          "2499:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_u0_coding_type,",
          "2500:                     tvb, offset, 1, vht_coding_type, \"SU/MU[0] Coding : %u \",vht_coding_type);",
          "2502:             vht_ldpc_ofdmsymbol = (tvb_get_guint8(tvb, offset) &0x08) >> 3;",
          "2503:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_ldpc_ofdmsymbol,",
          "2504:                                     tvb, offset, 1, vht_ldpc_ofdmsymbol);",
          "2505:             vht_coding_type = tvb_get_guint8(tvb, offset);",
          "2508:             if ((vht_grp_id == 0) || (vht_grp_id == 63)) // SU VHT type",
          "2509:             {",
          "2510:                 vht_coding_type = (tvb_get_guint8(tvb, offset)& 0x04) >> 2;",
          "2511:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_su_coding_type,",
          "2512:                         tvb, offset, 1, vht_coding_type);",
          "2513:                 vht_su_mcs = (tvb_get_guint8(tvb, offset) &0xf0) >> 4;",
          "2514:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_su_mcs,",
          "2515:                                             tvb, offset, 1, vht_su_mcs);",
          "2517:             } else {",
          "2520:                 vht_u0_coding_type = ((vht_coding_type & 0x04) >> 2);",
          "2521:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_u0_coding_type,",
          "2522:                        tvb, offset, 1, vht_u0_coding_type);",
          "2525:                 vht_u1_coding_type = ((vht_coding_type & 0x10) >> 4);",
          "2526:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_u1_coding_type,",
          "2527:                        tvb, offset, 1, vht_u1_coding_type);",
          "2530:                 vht_u2_coding_type = ((vht_coding_type & 0x20) >> 5);",
          "2531:                 proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_u2_coding_type,",
          "2532:                        tvb, offset, 1, vht_u2_coding_type);",
          "2536:                 proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_vht_u3_coding_type,",
          "2537:                     tvb, offset, 1, vht_u3_coding_type, \"MU[3] Coding Type: Reserved (%u)\",vht_reserved_coding_type);",
          "2539:             }",
          "2542:             offset = offset + 1;",
          "2543:             vht_beamformed = tvb_get_guint8(tvb, offset);",
          "2544:             vht_beamformed = (vht_beamformed & 0x01);",
          "2546:             phdr.phy_info.info_11ac.has_beamformed = TRUE;",
          "2547:             phdr.phy_info.info_11ac.beamformed = vht_beamformed;",
          "2549:             proto_tree_add_item(vw_plcpinfo_tree, hf_radiotap_vht_beamformed, tvb, offset, 1, ENC_NA);",
          "2550:             vht_crc1 = tvb_get_guint8(tvb, offset);",
          "2551:             vht_crc2 = tvb_get_guint8(tvb, offset+1);",
          "2552:             vht_crc = ((vht_crc1 &0xFC) >> 2) + ((vht_crc2 &0x03) << 2);",
          "2553:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_crc,",
          "2554:                                     tvb, offset, 2, vht_crc);",
          "2555:             offset = offset + 1;",
          "2556:             vht_tail = (tvb_get_guint8(tvb, offset) &0xFC) >> 2;",
          "2557:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_tail,",
          "2558:                                     tvb, offset, 1, vht_tail);",
          "2559:             offset = offset + 1;",
          "2560:             vht_length = tvb_get_letohs(tvb, offset);",
          "2561:             proto_tree_add_item(vw_plcpinfo_tree,",
          "2562:                  hf_radiotap_vht_length, tvb, offset, 2, vht_length);",
          "2563:             offset      += 2;",
          "2564:             vht_mcs1 = tvb_get_guint8(tvb, offset);",
          "2565:             vht_mcs2 = tvb_get_guint8(tvb, offset+1);",
          "2566:             vht_mcs = ((vht_mcs1 &0xC0) >> 6) + ((vht_mcs2 &0x03) << 2);",
          "2567:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_vht_mcs,",
          "2568:                                     tvb, offset, 2, vht_mcs);",
          "2569:             offset = offset + 2;",
          "2571:             offset = offset + 2;",
          "2572:             rfid = tvb_get_guint8(tvb, offset);",
          "2573:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_rfid,",
          "2574:                                     tvb, offset, 1, rfid);",
          "2575:             offset = offset + 1;",
          "2576:             break;",
          "2578:         default:",
          "2579:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2580:                 tvb, offset, 1, plcp_type, \"Format: Null \");",
          "2581:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2582:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2583:                 tvb, offset, 1, plcp_default, \"PLCP0: %u \", plcp_default);",
          "2584:             offset = offset + 1;",
          "2585:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2586:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2587:                 tvb, offset, 1, plcp_default, \"PLCP1: %u \", plcp_default);",
          "2588:             offset = offset + 1;",
          "2589:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2590:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2591:                 tvb, offset, 1, plcp_default, \"PLCP2: %u \", plcp_default);",
          "2592:             offset = offset + 1;",
          "2593:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2594:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2595:                 tvb, offset, 1, plcp_default, \"PLCP3: %u \", plcp_default);",
          "2596:             offset = offset + 1;",
          "2597:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2598:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2599:                 tvb, offset, 1, plcp_default, \"PLCP4: %u \", plcp_default);",
          "2600:             offset = offset + 1;",
          "2601:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2602:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2603:                 tvb, offset, 1, plcp_default, \"PLCP5: %u \", plcp_default);",
          "2604:             offset = offset + 1;",
          "2605:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2606:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2607:                 tvb, offset, 1, plcp_default, \"PLCP6: %u \", plcp_default);",
          "2608:             offset = offset + 1;",
          "2609:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2610:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2611:                 tvb, offset, 1, plcp_default, \"PLCP7: %u \", plcp_default);",
          "2612:             offset = offset + 1;",
          "2613:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2614:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2615:                 tvb, offset, 1, plcp_default, \"PLCP8: %u \", plcp_default);",
          "2616:             offset = offset + 1;",
          "2617:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2618:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2619:                 tvb, offset, 1, plcp_default, \"PLCP9: %u \", plcp_default);",
          "2620:             offset = offset + 1;",
          "2621:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2622:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2623:                 tvb, offset, 1, plcp_default, \"PLCP10: %u \", plcp_default);",
          "2624:             offset = offset + 1;",
          "2625:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2626:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2627:                 tvb, offset, 1, plcp_default, \"PLCP11: %u \", plcp_default);",
          "2628:             offset = offset + 1;",
          "2629:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2630:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2631:                 tvb, offset, 1, plcp_default, \"PLCP12: %u \", plcp_default);",
          "2632:             offset = offset + 1;",
          "2633:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2634:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2635:                 tvb, offset, 1, plcp_default, \"PLCP13: %u \", plcp_default);",
          "2636:             offset = offset + 1;",
          "2637:             plcp_default = tvb_get_guint8(tvb, offset);",
          "2638:             proto_tree_add_uint_format(vw_plcpinfo_tree, hf_radiotap_plcp_default,",
          "2639:                 tvb, offset, 1, plcp_default, \"PLCP14: %u \", plcp_default);",
          "2640:             offset = offset + 1;",
          "2641:             rfid = tvb_get_guint8(tvb, offset);",
          "2642:             proto_tree_add_uint(vw_plcpinfo_tree, hf_radiotap_rfid,",
          "2643:                                     tvb, offset, 1, rfid);",
          "2644:             offset = offset + 1;",
          "2645:         }",
          "2648:         vwl2l4t = proto_tree_add_item(tap_tree, hf_radiotap_l2_l4_info,",
          "2649:                             tvb, offset, 23, ENC_NA);",
          "2650:         vw_l2l4info_tree = proto_item_add_subtree(vwl2l4t, ett_radiotap_layer2to4);",
          "2651:         cidv = ((tvb_get_guint8(tvb, offset+3)& 0x20) >> 5);",
          "2652:         bssidv = ((tvb_get_guint8(tvb, offset+3)& 0x40) >> 6);",
          "2653:         if (cmd_type != 1)",
          "2654:         {",
          "2655:             vw_vcid = (tvb_get_letohs(tvb, offset)) &0x0fff;",
          "2656:             if (cidv == 1)",
          "2657:             {",
          "2658:                 proto_tree_add_uint(vw_l2l4info_tree, hf_ixveriwave_vw_vcid, tvb, offset, 2, vw_vcid);",
          "2659:             }",
          "2660:             else",
          "2661:             {",
          "2662:                 proto_tree_add_uint_format_value(vw_l2l4info_tree, hf_ixveriwave_vw_vcid,",
          "2663:                                     tvb, offset, 2, vw_vcid, \"Invalid\");",
          "2664:             }",
          "2666:             offset++;",
          "2667:             vw_bssid = ((tvb_get_letohs(tvb, offset)) &0x0ff0)>>4;",
          "2668:             if (bssidv == 1)",
          "2669:             {",
          "2670:                 proto_tree_add_uint(vw_l2l4info_tree, hf_radiotap_bssid,",
          "2671:                                     tvb, offset, 2, vw_bssid);",
          "2672:             }",
          "2673:             else",
          "2674:             {",
          "2675:                     proto_tree_add_uint_format_value(vw_l2l4info_tree, hf_radiotap_bssid,",
          "2676:                                         tvb, offset, 2, vw_bssid, \"Invalid\");",
          "2677:             }",
          "2678:             offset +=2;",
          "2680:             proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_clientidvalid, tvb, offset, 1, ENC_NA);",
          "2681:             bssidv = ((tvb_get_guint8(tvb, offset)& 0x40) >> 6);",
          "2682:             proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_bssidvalid, tvb, offset, 1, ENC_NA);",
          "2683:             proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_unicastormulticast, tvb, offset, 1, ENC_NA);",
          "2684:             offset++;",
          "2685:         }",
          "2686:         else",
          "2687:         {",
          "2688:             if (cidv == 1)",
          "2689:             {",
          "2690:                 proto_tree_add_item(vw_l2l4info_tree, hf_ixveriwave_vw_vcid,",
          "2691:                                         tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2692:             }",
          "2693:             else",
          "2694:             {",
          "2695:                 vw_vcid = tvb_get_letohs(tvb, offset);",
          "2696:                 proto_tree_add_uint_format_value(vw_l2l4info_tree, hf_ixveriwave_vw_vcid,",
          "2697:                                         tvb, offset, 2, vw_vcid, \"Invalid\");",
          "2698:             }",
          "2699:             offset +=3;",
          "2701:             proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_clientidvalid, tvb, offset, 1, ENC_NA);",
          "2702:             offset++;",
          "2703:         }",
          "2705:         wlantype = tvb_get_guint8(tvb, offset)& 0x3f;",
          "2706:         proto_tree_add_uint(vw_l2l4info_tree, hf_radiotap_wlantype,",
          "2707:                                 tvb, offset, 1, wlantype);",
          "2709:         proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_tid, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2710:         offset++;",
          "2711:         if (cmd_type == 1)",
          "2712:         {",
          "2713:             proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_ac, tvb, offset, 1, ENC_NA);",
          "2714:         }",
          "2715:         l4idv = (tvb_get_guint8(tvb, offset)& 0x10) >> 4;",
          "2716:         proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_l4idvalid, tvb, offset, 1, ENC_NA);",
          "2717:         proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_containshtfield, tvb, offset, 1, ENC_NA);",
          "2718:         proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_istypeqos, tvb, offset, 1, ENC_NA);",
          "2719:         flowv = (tvb_get_guint8(tvb, offset)& 0x80) >> 7;",
          "2720:         proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_flowvalid, tvb, offset, 1, ENC_NA);",
          "2721:         offset++;",
          "2723:         vw_seqnum = tvb_get_guint8(tvb, offset);",
          "2724:         proto_tree_add_item(vw_l2l4info_tree, hf_ixveriwave_vw_seqnum,",
          "2725:                                 tvb, offset, 1, vw_seqnum);",
          "2726:         offset++;",
          "2727:         if (flowv == 1)",
          "2728:         {",
          "2729:             proto_tree_add_item(vw_l2l4info_tree, hf_ixveriwave_vw_flowid,",
          "2730:                         tvb, offset, 3, ENC_LITTLE_ENDIAN);",
          "2731:         }",
          "2732:         else",
          "2733:         {",
          "2734:             proto_tree_add_uint_format_value(vw_l2l4info_tree, hf_ixveriwave_vw_flowid,",
          "2735:                                     tvb, offset, 2, tvb_get_letohl(tvb, offset) & 0xffffff, \"Invalid\");",
          "2736:         }",
          "2737:         offset +=3;",
          "2738:         if (l4idv == 1)",
          "2739:         {",
          "2740:             proto_tree_add_item(vw_l2l4info_tree, hf_ixveriwave_vw_l4id,",
          "2741:                         tvb, offset, 2, ENC_LITTLE_ENDIAN);",
          "2742:         }",
          "2743:         else",
          "2744:         {",
          "2745:             proto_tree_add_uint_format_value(vw_l2l4info_tree, hf_ixveriwave_vw_l4id,",
          "2746:                             tvb, offset, 2, tvb_get_letohs(tvb, offset), \"Invalid\");",
          "2747:         }",
          "2748:         offset +=2;",
          "2749:         proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_payloaddecode, tvb, offset, 4, ENC_LITTLE_ENDIAN);",
          "2750:         offset +=4;",
          "2754:             proto_tree_add_bitmask(vw_l2l4info_tree, tvb, offset, hf_radiotap_vw_info_rx, ett_radiotap_info, radiotap_info_rx_fields, ENC_LITTLE_ENDIAN);",
          "2758:             proto_tree_add_bitmask(vw_l2l4info_tree, tvb, offset, hf_radiotap_vw_info_tx, ett_radiotap_info, radiotap_info_tx_fields, ENC_LITTLE_ENDIAN);",
          "2759:         }",
          "2761:         offset      +=3;",
          "2762:         vw_errors = tvb_get_letohl(tvb, offset);",
          "2767:         if (cmd_type != 1) {",
          "2769:             static const int * vw_errors_rx_flags[] = {",
          "2770:                 &hf_radiotap_vw_errors_rx_bit0,",
          "2771:                 &hf_radiotap_vw_errors_rx_bit1,",
          "2772:                 &hf_radiotap_vw_errors_rx_bit2,",
          "2773:                 &hf_radiotap_vw_errors_rx_bit3,",
          "2774:                 &hf_radiotap_vw_errors_rx_bit4,",
          "2775:                 &hf_radiotap_vw_errors_rx_bit5,",
          "2776:                 &hf_radiotap_vw_errors_rx_bit6,",
          "2777:                 &hf_radiotap_vw_errors_rx_bit7,",
          "2778:                 &hf_radiotap_vw_errors_rx_bit8,",
          "2779:                 &hf_radiotap_vw_errors_rx_bit9,",
          "2780:                 &hf_radiotap_vw_errors_rx_bit10,",
          "2781:                 &hf_radiotap_vw_errors_rx_bit11,",
          "2782:                 &hf_radiotap_vw_errors_rx_bit12,",
          "2783:                 &hf_radiotap_vw_errors_rx_bit14,",
          "2784:                 &hf_radiotap_vw_errors_rx_bit15,",
          "2785:                 &hf_radiotap_vw_errors_rx_bit16,",
          "2786:                 &hf_radiotap_vw_errors_rx_bit17,",
          "2787:                 &hf_radiotap_vw_errors_rx_bit18,",
          "2788:                 &hf_radiotap_vw_errors_rx_bit19,",
          "2789:                 &hf_radiotap_vw_errors_rx_bit20,",
          "2790:                 &hf_radiotap_vw_errors_rx_bit21,",
          "2791:                 &hf_radiotap_vw_errors_rx_bit22,",
          "2792:                 &hf_radiotap_vw_errors_rx_bit23,",
          "2793:                 &hf_radiotap_vw_errors_rx_bit24,",
          "2794:                 &hf_radiotap_vw_errors_rx_bit31,",
          "2795:                 NULL",
          "2796:             };",
          "2798:             proto_tree_add_bitmask(vw_l2l4info_tree, tvb, offset, hf_radiotap_vw_errors, ett_radiotap_errors, vw_errors_rx_flags, ENC_LITTLE_ENDIAN);",
          "2801:             static const int * vw_errors_tx_flags[] = {",
          "2802:                 &hf_radiotap_vw_errors_tx_bit01,",
          "2803:                 &hf_radiotap_vw_errors_tx_bit05,",
          "2804:                 &hf_radiotap_vw_errors_tx_bit8,",
          "2805:                 &hf_radiotap_vw_errors_tx_bit9,",
          "2806:                 &hf_radiotap_vw_errors_tx_bit10,",
          "2807:                 &hf_radiotap_vw_errors_tx_bit31,",
          "2808:                 NULL",
          "2809:             };",
          "2812:             proto_tree_add_bitmask(vw_l2l4info_tree, tvb, offset, hf_radiotap_vw_errors, ett_radiotap_errors, vw_errors_tx_flags, ENC_LITTLE_ENDIAN);",
          "2817:             proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_vw_tx_retrycount, tvb, offset+2, 1, ENC_NA);",
          "2818:             proto_tree_add_item(vw_l2l4info_tree, hf_radiotap_vw_tx_factorydebug, tvb, offset+2, 2, ENC_LITTLE_ENDIAN);",
          "2820:         offset      +=4;",
          "2822:         if (vwl2l4t && log_mode)",
          "2823:             proto_item_append_text(vwl2l4t, \" (Reduced)\");",
          "2826:         align_offset = ALIGN_OFFSET(offset, 2);",
          "2827:         offset += align_offset;",
          "2829:         vw_ht_length = tvb_get_letohs(tvb, offset);",
          "2830:         if ((tree) && (vw_ht_length != 0))",
          "2831:             if (plcp_type == 3)",
          "2832:             {",
          "2833:                 proto_tree_add_uint_format(tap_tree, hf_radiotap_vw_ht_length,",
          "2834:                     tvb, offset, 2, vw_ht_length, \"VHT length: %u (includes the sum of the pieces of the aggregate and their respective Start_Spacing + Delimiter + MPDU + Padding)\",",
          "2835:                     vw_ht_length);",
          "2836:             }",
          "2837:         else",
          "2838:             {",
          "2839:                 proto_tree_add_uint_format(tap_tree, hf_radiotap_vw_ht_length,",
          "2840:                     tvb, offset, 2, vw_ht_length, \"HT length: %u (includes the sum of the pieces of the aggregate and their respective Start_Spacing + Delimiter + MPDU + Padding)\",",
          "2841:                     vw_ht_length);",
          "2842:             }",
          "2843:         offset      +=2;",
          "2845:         align_offset = ALIGN_OFFSET(offset, 2);",
          "2853:         if (vw_ht_length != 0)",
          "2856:     else {",
          "2857:         offset = offset + 17;",
          "2858:      }",
          "2862:     if (rflags & FLAGS_FCS)",
          "2863:         pinfo->pseudo_header->ieee_802_11.fcs_len = 4;",
          "2864:     else",
          "2865:         pinfo->pseudo_header->ieee_802_11.fcs_len = 0;",
          "2867:     if (!ver_fpga)",
          "2868:     {",
          "2870:         if (plcp_type == 3) {",
          "2874:         next_tvb = tvb_new_subset_remaining(tvb, length);",
          "2875:     }",
          "2876:     else",
          "2877:     {",
          "2878:         if (cmd_type != 4)",
          "2879:             proto_item_set_len(tap_tree, length + OCTO_TIMESTAMP_FIELDS_LEN);",
          "2880:         else",
          "2881:             proto_item_set_len(tap_tree, length + OCTO_TIMESTAMP_FIELDS_LEN + OCTO_MODIFIED_RF_LEN);",
          "2884:         next_tvb = tvb_new_subset_remaining(tvb, length);",
          "2885:     }",
          "2888:     if (hdr_fcs_ti) {",
          "2894:         if (tvb_captured_length(next_tvb) > (unsigned int) pinfo->pseudo_header->ieee_802_11.fcs_len) {",
          "2895:             guint32 sent_fcs = 0;",
          "2896:             calc_fcs = crc32_802_tvb(next_tvb,",
          "2897:                                      tvb_captured_length(next_tvb) - pinfo->pseudo_header->ieee_802_11.fcs_len);",
          "2901:             if (calc_fcs == sent_fcs) {",
          "2902:                 proto_item_append_text(hdr_fcs_ti, \" [correct]\");",
          "2904:             else {",
          "2905:                 proto_item_append_text(hdr_fcs_ti, \" [incorrect, should be 0x%08x]\", calc_fcs);",
          "2906:                 proto_tree_add_expert(tap_tree, pinfo, &ei_radiotap_fcs_bad,",
          "2907:                     tvb, 0, 4);",
          "2910:         else {",
          "2911:             proto_item_append_text(hdr_fcs_ti,",
          "2912:             \" [cannot verify - not enough data]\");",
          "2913:         }",
          "2916:     if(!ver_fpga || mpdu_length != 0)",
          "2917:         call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, tree, &phdr);",
          "2923:     static const true_false_string tfs_tx_rx_type = { \"Transmitted\", \"Received\" };",
          "2924:     static const true_false_string tfs_fcserr_type = { \"Incorrect\", \"Correct\" };",
          "2925:     static const true_false_string tfs_preamble_type = { \"Short\", \"Long\", };",
          "2928:     static const true_false_string tfs_decrypterr_type = { \"Decrypt Failed\", \"Decrypt Succeeded\" };",
          "2931:     static const true_false_string tfs_retryerr_type = {\"Excess retry abort\", \"Retry limit not reached\" };",
          "2933:     static const true_false_string tfs_legacy_type = {\"802.11b LEGACY CCK\", \"LEGACY OFDM\"};",
          "2935:     static const value_string vht_coding_vals[] = {",
          "2936:         { 0, \"BCC\" },",
          "2937:         { 1, \"LDPC\" },",
          "2942:     static const value_string l1_preamble_type[] = {",
          "2943:         { 0, \"Short\" },",
          "2944:         { 1, \"Long\" },",
          "2948:    static const value_string modulation_type[] = {",
          "2949:         { 0, \"LEGACY\" },",
          "2950:         { 1, \"HT\" },",
          "2951:         { 2, \"HT-Greenfield\" },",
          "2952:         { 3, \"VHT\" },",
          "2953:         { 0, NULL },",
          "2956:     static const value_string sbw_type[] = {",
          "2957:         { 0, \"5 MHz\" },",
          "2958:         { 1, \"10 MHz\" },",
          "2959:         { 2, \"20 MHz\" },",
          "2960:         { 3, \"40 MHz\" },",
          "2961:         { 4, \"80 MHz\" },",
          "2962:         { 5, \"reserved\" },",
          "2963:         { 6, \"reserved\" },",
          "2964:         { 7, \"reserved\" },",
          "2967: #if 0",
          "2968:     static const value_string mcs[] = {",
          "2969:         { 0, \"DBPSK\" },",
          "2970:         { 1, \"DQPSK\" },",
          "2971:         { 2, \"CCK (4bits)\" },",
          "2972:         { 3, \"CCK (8bits)\" },",
          "2973:         { 4, \"BPSK (1/2)\" },",
          "2974:         { 5, \"BPSK (3/4)\" },",
          "2975:         { 6, \"QPSK (1/2)\" },",
          "2976:         { 7, \"QPSK (3/4)\" },",
          "2977:         { 8, \"16-QAM (1/2)\" },",
          "2978:         { 9, \"16-QAM (3/4)\" },",
          "2979:         { 10, \"64-QAM (1/2)\" },",
          "2980:         { 11, \"64-QAM (3/4)\" },",
          "2981:         { 0, NULL },",
          "2983: #endif",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1233:     { 0, NULL },",
          "1234:     };",
          "1236:     static hf_register_info hf[] = {",
          "1237:     { &hf_ixveriwave_frame_length,",
          "1238:         { \"Actual frame length\", \"ixveriwave.frame_length\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2993:    static const value_string bmbit[] = {",
          "2994:     {0, \"Unicast\"},",
          "2995:     {1, \"Multicast\"},",
          "2996:     { 0, NULL },",
          "2997:     };",
          "2999:     static const value_string sbw_evm[] = {",
          "3000:         { 0, \"20 MHz\" },",
          "3001:         { 1, \"40 MHz\" },",
          "3002:         { 2, \"80 MHz\" },",
          "3003:         { 3, \"160 MHz\" },",
          "3004:         { 0, NULL },",
          "3005:     };",
          "3006:     static const value_string frameformat_type[] = {",
          "3007:         { 0x0, \"LEGACY\" },",
          "3008:         { 0x1, \"HT\" },",
          "3009:         { 0x3, \"VHT\" },",
          "3010:         { 0, NULL },",
          "3011:    };",
          "3013:     static const value_string crypto_TKIP_type[] = {",
          "3014:         { 0x0, \"False\" },",
          "3015:         { 0x1, \"TKIP Encapped\" },",
          "3016:         { 0x2, \"CCMP Encapped\" },",
          "3017:         { 0x3, \"BIP Encapped\" },",
          "3018:         { 0, NULL },",
          "3019:     };",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1259:         FT_FLOAT, 0, NULL, 0x0, NULL, HFILL } },",
          "1261:     { &hf_ixveriwave_vw_latency,",
          "1265:     { &hf_ixveriwave,",
          "1267:         FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1269:     { &hf_ixveriwave_vw_startt,",
          "",
          "[Removed Lines]",
          "1262:         { \"Latency\", \"ixveriwave.latency\",",
          "1263:         FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1266:         { \"Signature (32 LSBs)\", \"ixveriwave.sig_ts\",",
          "",
          "[Added Lines]",
          "3047:         { \"Frame latency\", \"ixveriwave.latency\",",
          "3048:         FT_UINT32, BASE_DEC|BASE_UNIT_STRING, &units_nanoseconds, 0x0, NULL, HFILL } },",
          "3051:         { \"Frame Signature Timestamp(32 LSBs)\", \"ixveriwave.sig_ts\",",
          "3052:         FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3054:     { &hf_ixveriwave_vw_delay,",
          "3055:         { \"Frame Queue Delay (32 LSBs)\", \"ixveriwave.delay_ts\",",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1275:         FT_UINT64, BASE_DEC|BASE_UNIT_STRING, &units_microseconds, 0x0, NULL, HFILL } },",
          "1277:     { &hf_ixveriwave_vw_pktdur,",
          "1281:     { &hf_ixveriwave_vw_ifg,",
          "1282:         { \"Inter-frame gap (usecs)\", \"ixveriwave.ifg\",",
          "1283:         FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1285:     { &hf_ixveriwave_vwf_txf,",
          "1286:         { \"Frame direction\", \"ixveriwave.vwflags.txframe\",",
          "1289:     { &hf_ixveriwave_vwf_fcserr,",
          "1290:         { \"MAC FCS check\", \"ixveriwave.vwflags.fcserr\",",
          "1293:     { &hf_ixveriwave_vw_info,",
          "1294:         { \"Info field\", \"ixveriwave.info\",",
          "1295:         FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "1297:     { &hf_ixveriwave_vw_info_retryCount,",
          "1299:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "1278:         { \"Packet duration\", \"ixveriwave.pktdur\",",
          "1279:         FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1287:         FT_UINT32, BASE_DEC, VALS(tx_rx_type), 0x0, NULL, HFILL } },",
          "1291:         FT_UINT32, BASE_DEC, VALS(fcserr_type), 0x0, NULL, HFILL } },",
          "1298:         { \"Info field retry count\", \"ixveriwave.info\",",
          "",
          "[Added Lines]",
          "3067:         { \"Frame duration\", \"ixveriwave.pktdur\",",
          "3068:         FT_UINT32, BASE_DEC|BASE_UNIT_STRING, &units_nanoseconds, 0x0, NULL, HFILL } },",
          "3074:     { &hf_ixveriwave_vw_ifg_neg,",
          "3075:         { \"Inter-frame gap (usecs)\", \"ixveriwave.ifg\",",
          "3076:         FT_STRING, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3080:         FT_BOOLEAN, 8, TFS(&tfs_tx_rx_type), ETHERNETTAP_VWF_TXF, NULL, HFILL } },",
          "3084:         FT_BOOLEAN, 8, TFS(&tfs_fcserr_type), ETHERNETTAP_VWF_FCSERR, NULL, HFILL } },",
          "3091:         { \"Retry count\", \"ixveriwave.info.retry_count\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1382:         { \"Layer 4 ID\", \"ixveriwave.layer4id\",",
          "1383:         FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "1385:     { &hf_radiotap_datarate,",
          "1386:         { \"Data rate\", \"ixveriwave.datarate\",",
          "1387:         FT_UINT32, BASE_DEC, NULL, 0x0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3179: #define RADIOTAP_MASK_VW_FPGA_VERSION       (1 << VW_RADIOTAP_FPGA_VERSION)",
          "3180: #define RADIOTAP_MASK_VW_MCID               (1 << VW_RADIOTAP_MCID)",
          "3181: #define RADIOTAP_MASK_VW_ERRORS             (1 << VW_RADIOTAP_ERRORS)",
          "3182: #define RADIOTAP_MASK_VW_INFO               (1 << VW_RADIOTAP_INFO)",
          "3183: #define RADIOTAP_MASK_VW_MSDU_LENGTH        (1 << VW_RADIOTAP_MSDU_LENGTH)",
          "3184: #define RADIOTAP_MASK_VW_HT_LENGTH          (1 << VW_RADIOTAP_HT_LENGTH)",
          "3185: #define RADIOTAP_MASK_VW_FLOWID             (1 << VW_RADIOTAP_FLOWID)",
          "3186: #define RADIOTAP_MASK_VW_SEQNUM             (1 << VW_RADIOTAP_SEQNUM)",
          "3187: #define RADIOTAP_MASK_VW_LATENCY            (1 << VW_RADIOTAP_LATENCY)",
          "3188: #define RADIOTAP_MASK_VW_SIG_TS             (1 << VW_RADIOTAP_SIG_TS)",
          "3189: #define RADIOTAP_MASK_VW_STARTT             (1 << VW_RADIOTAP_STARTT)",
          "3190: #define RADIOTAP_MASK_VW_ENDT               (1 << VW_RADIOTAP_ENDT)",
          "3191: #define RADIOTAP_MASK_VW_PKTDUR             (1 << VW_RADIOTAP_PKTDUR)",
          "3192: #define RADIOTAP_MASK_VW_IFG                (1 << VW_RADIOTAP_IFG)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1404:         { \"Flags\", \"ixveriwave.flags\",",
          "1405:         FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "1407:     { &hf_radiotap_flags_preamble,",
          "1408:         { \"Preamble\", \"ixveriwave.flags.preamble\",",
          "1410:         \"Sent/Received with short preamble\", HFILL } },",
          "1412:     { &hf_radiotap_flags_wep,",
          "",
          "[Removed Lines]",
          "1409:         FT_BOOLEAN, 12, TFS(&preamble_type),  FLAGS_SHORTPRE,",
          "",
          "[Added Lines]",
          "3217:     { &hf_radiotap_flags_cfp,",
          "3218:        { \"CFP\", \"ixveriwave.flags.cfp\",",
          "3219:        FT_BOOLEAN, 12, NULL, IEEE80211_RADIOTAP_F_CFP,",
          "3220:        \"Sent/Received radha CFP\", HFILL } },",
          "3224:         FT_BOOLEAN, 12, TFS(&tfs_preamble_type),  FLAGS_SHORTPRE,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1414:         FT_BOOLEAN, 12, NULL, FLAGS_WEP,",
          "1415:         \"Sent/Received with WEP encryption\", HFILL } },",
          "1419:         FT_BOOLEAN, 12, NULL, FLAGS_FCS,",
          "1422:     { &hf_radiotap_flags_ht,",
          "1423:         { \"HT frame\", \"ixveriwave.flags.ht\",",
          "",
          "[Removed Lines]",
          "1417:     { &hf_radiotap_flags_fcs_present,",
          "1418:         { \"FCS present\", \"ixveriwave.flags.fcs_present\",",
          "1420:         \"FCS present in frame\", HFILL } },",
          "",
          "[Added Lines]",
          "3232:     { &hf_radiotap_flags_frag,",
          "3233:         { \"Fragmentation\", \"ixveriwave.flags.frag\",",
          "3234:         FT_BOOLEAN, 12, NULL, IEEE80211_RADIOTAP_F_FRAG,",
          "3235:         \"Sent/Received with fragmentation\", HFILL } },",
          "3237:     { &hf_radiotap_flags_fcs,",
          "3238:         { \"FCS at end\", \"ixveriwave.flags.fcs\",",
          "3240:         \"Frame includes FCS at end\", HFILL } },",
          "3242:     { &hf_radiotap_flags_datapad,",
          "3243:         { \"Data Pad\", \"ixveriwave.flags.datapad\",",
          "3244:         FT_BOOLEAN, 12, NULL, IEEE80211_RADIOTAP_F_DATAPAD,",
          "3245:         \"Frame has padding between 802.11 header and payload\", HFILL } },",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1439:         { \"Short guard interval\", \"ixveriwave.flags.shortgi\",",
          "1440:         FT_BOOLEAN, 12, NULL, FLAGS_CHAN_SHORTGI, NULL, HFILL } },",
          "1444:         FT_INT32, BASE_DEC|BASE_UNIT_STRING, &units_dbm, 0x0,",
          "1445:         \"RF signal power at the antenna from a fixed, arbitrary value in decibels from one milliwatt\", HFILL } },",
          "",
          "[Removed Lines]",
          "1442:     { &hf_radiotap_dbm_antsignal,",
          "1443:         { \"SSI Signal\", \"ixveriwave.dbm_antsignal\",",
          "",
          "[Added Lines]",
          "3267:     { &hf_radiotap_dbm_anta,",
          "3268:         { \"SSI Signal for Antenna A\", \"ixveriwave.dbm_anta\",",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1459:         FT_INT32, BASE_DEC|BASE_UNIT_STRING, &units_dbm, 0x0,",
          "1460:         \"RF signal power at the antenna from a fixed, arbitrary value in decibels from one milliwatt\", HFILL } },",
          "1464:     { &hf_radiotap_vwf_txf,",
          "1465:         { \"Frame direction\", \"ixveriwave.vwflags.txframe\",",
          "1468:     { &hf_radiotap_vwf_fcserr,",
          "1469:         { \"MAC FCS check\", \"ixveriwave.vwflags.fcserr\",",
          "1472:     { &hf_radiotap_vwf_dcrerr,",
          "1473:         { \"Decryption error\", \"ixveriwave.vwflags.decrypterr\",",
          "1476:     { &hf_radiotap_vwf_retrerr,",
          "1477:         { \"TX retry limit\", \"ixveriwave.vwflags.retryerr\",",
          "1480:     { &hf_radiotap_vwf_enctype,",
          "1481:         { \"Encryption type\", \"ixveriwave.vwflags.encrypt\",",
          "1485:     { &hf_radiotap_vw_ht_length,",
          "1489:     { &hf_radiotap_vht_grp_id,",
          "1491:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1493:     { &hf_radiotap_vht_su_nsts,",
          "1497:     { &hf_radiotap_vht_su_partial_aid,",
          "1501:     { &hf_radiotap_vht_u0_nsts,",
          "1505:     { &hf_radiotap_vht_u1_nsts,",
          "1509:     { &hf_radiotap_vht_u2_nsts,",
          "1513:     { &hf_radiotap_vht_u3_nsts,",
          "1517:     { &hf_radiotap_vht_beamformed,",
          "1521:     { &hf_radiotap_vht_user_pos,",
          "1522:         { \"VHT User Pos\", \"ixveriwave.VHT_user_pos\",",
          "1525:     { &hf_radiotap_vht_mu_mimo_flg,",
          "1529:     { &hf_radiotap_vht_u0_coding_type,",
          "1533:     { &hf_radiotap_vht_u1_coding_type,",
          "1537:     { &hf_radiotap_vht_u2_coding_type,",
          "1541:     { &hf_radiotap_vht_u3_coding_type,",
          "1543:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1545:     { &hf_radiotap_vw_errors,",
          "1546:         { \"Errors\", \"ixveriwave.errors\",",
          "1547:         FT_UINT32, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "1466:         FT_UINT32, BASE_DEC, VALS(tx_rx_type), 0x0, NULL, HFILL } },",
          "1470:         FT_UINT32, BASE_DEC, VALS(fcserr_type), 0x0, NULL, HFILL } },",
          "1474:         FT_UINT32, BASE_DEC, VALS(decrypterr_type), 0x0, NULL, HFILL } },",
          "1478:         FT_UINT32, BASE_DEC, VALS(retryerr_type), 0x0, NULL, HFILL } },",
          "1482:         FT_UINT32, BASE_DEC, VALS(encrypt_type), 0x0, NULL, HFILL } },",
          "1486:         { \"Total IP length (incl all pieces of an aggregate)\", \"ixveriwave.ht_length\",",
          "1487:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1490:         { \"VHT GRP ID})\", \"ixveriwave.VHT_GRPID\",",
          "1494:         { \"VHT SU NSTS})\", \"ixveriwave.VHT_SU_NSTS\",",
          "1495:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1498:         { \"VHT SU Partial ID})\", \"ixveriwave.VHT_SU_PARTIAL_AID\",",
          "1499:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1502:         { \"VHT U0 NSTS})\", \"ixveriwave.VHT_U0_NSTS\",",
          "1503:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1506:         { \"VHT U1 NSTS})\", \"ixveriwave.VHT_U1_NSTS\",",
          "1507:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1510:         { \"VHT U2 NSTS})\", \"ixveriwave.VHT_U2_NSTS\",",
          "1511:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1514:         { \"VHT U3 NSTS})\", \"ixveriwave.VHT_U3_NSTS\",",
          "1515:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1518:         { \"VHT Beamformed\", \"ixveriwave.VHT_BEAMFORMED\",",
          "1519:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1523:          FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1526:         { \"VHT MU SU\", \"ixveriwave.VHT_mu_mimo_flg\",",
          "1527:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1530:         { \"VHT CODING\", \"ixveriwave.VHT_u0_CODING_TYPE\",",
          "1531:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1534:         { \"VHT CODING\", \"ixveriwave.VHT_u1_CODING_TYPE\",",
          "1535:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1538:         { \"VHT CODING\", \"ixveriwave.VHT_u2_CODING_TYPE\",",
          "1539:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "1542:         { \"VHT CODING\", \"ixveriwave.VHT_u3_CODING_TYPE\",",
          "",
          "[Added Lines]",
          "3287:     { &hf_radiotap_dbm_tx_anta,",
          "3288:         { \"TX Power for Antenna A\", \"ixveriwave.dbm_anta\",",
          "3289:         FT_INT32, BASE_DEC|BASE_UNIT_STRING, &units_dbm, 0x0,",
          "3290:         \"RF signal power at the antenna from a fixed, arbitrary value in decibels from one milliwatt\", HFILL } },",
          "3292:     { &hf_radiotap_dbm_tx_antb,",
          "3293:         { \"TX Power for Antenna B\", \"ixveriwave.dbm_antb\",",
          "3294:         FT_INT32, BASE_DEC, NULL, 0x0,",
          "3295:         \"RF signal power at the antenna from a fixed, arbitrary value in decibels from one milliwatt\", HFILL } },",
          "3297:     { &hf_radiotap_dbm_tx_antc,",
          "3298:         { \"TX Power for Antenna C\", \"ixveriwave.dbm_antc\",",
          "3299:         FT_INT32, BASE_DEC, NULL, 0x0,",
          "3300:         \"RF signal power at the antenna from a fixed, arbitrary value in decibels from one milliwatt\", HFILL } },",
          "3302:     { &hf_radiotap_dbm_tx_antd,",
          "3303:         { \"TX Power for Antenna D\", \"ixveriwave.dbm_antd\",",
          "3304:         FT_INT32, BASE_DEC, NULL, 0x0,",
          "3305:         \"RF signal power at the antenna from a fixed, arbitrary value in decibels from one milliwatt\", HFILL } },",
          "3311:         FT_BOOLEAN, 16, TFS(&tfs_tx_rx_type), VW_RADIOTAPF_TXF, NULL, HFILL } },",
          "3315:         FT_BOOLEAN, 16, TFS(&tfs_fcserr_type), VW_RADIOTAPF_FCSERR, NULL, HFILL } },",
          "3319:         FT_BOOLEAN, 16, TFS(&tfs_decrypterr_type), VW_RADIOTAPF_DCRERR, NULL, HFILL } },",
          "3323:         FT_BOOLEAN, 16, TFS(&tfs_retryerr_type), VW_RADIOTAPF_RETRERR, NULL, HFILL } },",
          "3327:         FT_UINT32, BASE_DEC, VALS(encrypt_type), VW_RADIOTAPF_ENCMSK, NULL, HFILL } },",
          "3331:         { \"HT length\", \"ixveriwave.ht_length\",",
          "3332:         FT_UINT16, BASE_DEC, NULL, 0x0, \"Total IP length (incl all pieces of an aggregate)\", HFILL } },",
          "3335:         { \"Group Id\", \"ixveriwave.GRPID\",",
          "3339:         { \"SU NSTS\", \"ixveriwave.SU_NSTS\",",
          "3340:         FT_UINT16, BASE_DEC, NULL, 0x1c, NULL, HFILL } },",
          "3343:         { \"SU Partial ID\", \"ixveriwave.VHT_SU_PARTIAL_AID\",",
          "3344:             FT_UINT16, BASE_HEX, NULL, 0x3FE0, NULL, HFILL } },",
          "3346:     { &hf_radiotap_vht_su_coding_type,",
          "3347:         { \"SU Coding Type\", \"ixveriwave.vht_su_coding_type\",",
          "3348:         FT_UINT16, BASE_DEC, VALS(vht_coding_vals), 0x0, NULL, HFILL } },",
          "3351:         { \"MU[0] NSTS\", \"ixveriwave.VHT_U0_NSTS\",",
          "3352:         FT_UINT16, BASE_DEC, NULL, 0x001c, NULL, HFILL } },",
          "3355:         { \"MU[1] NSTS\", \"ixveriwave.VHT_U1_NSTS\",",
          "3356:         FT_UINT16, BASE_DEC, NULL, 0x000e, NULL, HFILL } },",
          "3359:         { \"MU[2] NSTS\", \"ixveriwave.VHT_U2_NSTS\",",
          "3360:         FT_UINT16, BASE_DEC, NULL, 0x0700, NULL, HFILL } },",
          "3363:         { \"MU[3] NSTS\", \"ixveriwave.VHT_U3_NSTS\",",
          "3364:         FT_UINT16, BASE_DEC, NULL, 0x3800, NULL, HFILL } },",
          "3367:         { \"Beamformed\", \"ixveriwave.BEAMFORMED\",",
          "3368:         FT_UINT8, BASE_DEC, NULL, 0x01, NULL, HFILL } },",
          "3372:          FT_UINT8, BASE_DEC, NULL, 0x03, NULL, HFILL } },",
          "3374:     { &hf_radiotap_vht_ndp_flg,",
          "3375:         { \"NDP\", \"ixveriwave.VHT_ndp_flg\",",
          "3376:         FT_UINT8, BASE_HEX, NULL, 0x80, NULL, HFILL } },",
          "3379:         { \"VHT MU MIMO\", \"ixveriwave.VHT_mu_mimo_flg\",",
          "3380:         FT_UINT8, BASE_DEC, NULL, 0x08, NULL, HFILL } },",
          "3382:     { &hf_radiotap_vht_su_mimo_flg,",
          "3383:         { \"VHT SU MIMO\", \"ixveriwave.VHT_su_mimo_flg\",",
          "3384:         FT_UINT8, BASE_DEC, NULL, 0x04, NULL, HFILL } },",
          "3387:         { \"MU[0] Coding Type\", \"ixveriwave.vht_u0_coding_type\",",
          "3388:         FT_UINT16, BASE_DEC, VALS(vht_coding_vals), 0x0, NULL, HFILL } },",
          "3391:         { \"MU[1] Coding Type\", \"ixveriwave.vht_u1_coding_type\",",
          "3392:         FT_UINT16, BASE_DEC, VALS(vht_coding_vals), 0x0, NULL, HFILL } },",
          "3395:         { \"MU[2] Coding Type\", \"ixveriwave.vht_u2_coding_type\",",
          "3396:         FT_UINT16, BASE_DEC, VALS(vht_coding_vals), 0x0, NULL, HFILL } },",
          "3399:         { \"MU[3] Coding Type\", \"ixveriwave.vht_u3_coding_type\",",
          "3400:         FT_UINT16, BASE_DEC, VALS(vht_coding_vals), 0x0, NULL, HFILL } },",
          "3402:     { &hf_radiotap_rf_info,",
          "3403:         { \"RF Header\", \"ixveriwave.RFInfo\",",
          "3404:         FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3406:     { &hf_radiotap_tx,",
          "3407:         { \"Layer 1 Header (Direction=Transmit)\", \"ixveriwave.l1info\",",
          "3408:         FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3409:     { &hf_radiotap_rx,",
          "3410:         { \"Layer 1 Header (Direction=Receive)\", \"ixveriwave.l1info\",",
          "3411:         FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3413:     { &hf_radiotap_modulation,",
          "3414:         { \"Modulation\", \"ixveriwave.Modulation\",",
          "3415:         FT_UINT8, BASE_DEC, VALS(modulation_type), 0x0, NULL, HFILL } },",
          "3417:     { &hf_radiotap_preamble,",
          "3418:         { \"Preamble\", \"ixveriwave.preamble\",",
          "3419:         FT_UINT8, BASE_DEC, VALS(l1_preamble_type), 0x0, NULL, HFILL } },",
          "3421:     { &hf_radiotap_sigbandwidth,",
          "3422:         { \"Signaling Band Width\", \"ixveriwave.sigbandwidth\",",
          "3423:         FT_UINT8, BASE_DEC, VALS(sbw_type), 0x0, NULL, HFILL } },",
          "3424: #if 0",
          "3425:     {&hf_radiotap_rssi,",
          "3426:         { \"RSSI\", \"ixveriwave.rssi\",",
          "3427:         FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3428: #endif",
          "3429:     {&hf_radiotap_l1infoc,",
          "3430:         {\"L1InfoC\", \"ixveriwave.l1InfoC\",",
          "3431:             FT_NONE, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3433:     { &hf_radiotap_sigbandwidthmask,",
          "3434:         { \"Signaling Band Width Mask\", \"ixveriwave.sigbandwidthmask\",",
          "3435:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3437:     { &hf_radiotap_antennaportenergydetect,",
          "3438:         { \"Antenna Port Energy Detect\", \"ixveriwave.antennaportenergydetect\",",
          "3439:         FT_UINT8, BASE_HEX, NULL, 0x0F, NULL, HFILL } },",
          "3441:     { &hf_radiotap_mumask,",
          "3442:         { \"MU_MASK\", \"ixveriwave.mumask\",",
          "3443:         FT_UINT8, BASE_HEX, NULL, 0xF0, NULL, HFILL } },",
          "3445:     { &hf_radiotap_plcp_info,",
          "3446:         {\"PLCP Header\", \"ixveriwave.plcp_info\",",
          "3447:             FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3448:     { &hf_radiotap_l2_l4_info,",
          "3449:         {\"Layer 2-4 Header\", \"ixveriwave.l2_l4info\",",
          "3450:             FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3451:     { &hf_radiotap_bssid,",
          "3452:         {\"BSS ID\", \"ixveriwave.bssid\",",
          "3453:             FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3455:     { &hf_radiotap_unicastormulticast,",
          "3456:         { \"Unicast/Multicast\", \"ixveriwave.unicastormulticast\",",
          "3457:         FT_UINT8, BASE_DEC, VALS(bmbit), 0x80, NULL, HFILL } },",
          "3459:     { &hf_radiotap_clientidvalid,",
          "3460:         { \"Client Id Valid\", \"ixveriwave.clientidvalid\",",
          "3461:         FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x20, NULL, HFILL } },",
          "3463:     { &hf_radiotap_bssidvalid,",
          "3464:         { \"BSS ID Valid\", \"ixveriwave.bssidvalid\",",
          "3465:         FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x40, NULL, HFILL } },",
          "3467:     { &hf_radiotap_flowvalid,",
          "3468:         { \"Flow Id Valid\", \"ixveriwave.flowvalid\",",
          "3469:         FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x80, NULL, HFILL } },",
          "3471:     { &hf_radiotap_l4idvalid,",
          "3472:         { \"Layer 4 Id Valid\", \"ixveriwave.l4idvalid\",",
          "3473:         FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x10, NULL, HFILL } },",
          "3475:     { &hf_radiotap_istypeqos,",
          "3476:         { \"Is Type QOS\", \"ixveriwave.istypeqos\",",
          "3477:         FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x40, NULL, HFILL } },",
          "3479:     { &hf_radiotap_containshtfield,",
          "3480:         { \"Contains HT Field\", \"ixveriwave.containshtfield\",",
          "3481:         FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x20, NULL, HFILL } },",
          "3483:     { &hf_radiotap_tid,",
          "3484:         { \"TID\", \"ixveriwave.tid\",",
          "3485:         FT_UINT16, BASE_HEX, NULL, 0x01c0, NULL, HFILL } },",
          "3486: #if 0",
          "3487:     { &hf_radiotap_wlantype,",
          "3488:         { \"WLAN Type\", \"ixveriwave.wlantype\",",
          "3489:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3490: #endif",
          "3491:     { &hf_radiotap_payloaddecode,",
          "3492:         { \"Payload Decode\", \"ixveriwave.payloaddecode\",",
          "3493:         FT_UINT32, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3495:     { &hf_radiotap_vht_bw,",
          "3496:         { \"BW\", \"ixveriwave.bw\",",
          "3497:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3499:     { &hf_radiotap_vht_stbc,",
          "3500:         { \"STBC\", \"ixveriwave.stbc\",",
          "3501:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3503:     { &hf_radiotap_vht_txop_ps_notallowd,",
          "3504:         { \"TXOP_PS_NOT_ALLOWD\", \"ixveriwave.txop_ps_notallowd\",",
          "3505:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3507:     { &hf_radiotap_vht_shortgi,",
          "3508:         { \"Short GI\", \"ixveriwave.shortgi\",",
          "3509:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3511:     { &hf_radiotap_vht_shortginsymdisa,",
          "3512:         { \"Short GI NSYM DISA\", \"ixveriwave.shortginsymdisa\",",
          "3513:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3515:     { &hf_radiotap_vht_ldpc_ofdmsymbol,",
          "3516:         { \"LDPC Extra OFDM Symbol\", \"ixveriwave.ldpc_ofdmsymbol\",",
          "3517:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3519:     { &hf_radiotap_vht_su_mcs,",
          "3520:         { \"SU VHT-MCS\", \"ixveriwave.su_mcs\",",
          "3521:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3523:     { &hf_radiotap_vht_crc,",
          "3524:         { \"CRC8\", \"ixveriwave.crc\",",
          "3525:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3527:     { &hf_radiotap_vht_tail,",
          "3528:         { \"Tail\", \"ixveriwave.tail\",",
          "3529:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3531:     { &hf_radiotap_vht_length,",
          "3532:         { \"VHT Length\", \"ixveriwave.vht.length\",",
          "3533:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3535:     { &hf_radiotap_rfid,",
          "3536:         { \"RFID\", \"ixveriwave.rfid\",",
          "3537:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3539:     { &hf_radiotap_vht_mcs,",
          "3540:         { \"VHT MCS\", \"ixveriwave.vhtmcs\",",
          "3541:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3543:     { &hf_radiotap_parity,",
          "3544:         { \"Parity\", \"ixveriwave.parity\",",
          "3545:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3547:     { &hf_radiotap_rate,",
          "3548:         { \"Rate\", \"ixveriwave.rate\",",
          "3549:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3551:     { &hf_radiotap_plcp_length,",
          "3552:         { \"PLCP Length\", \"ixveriwave.length\",",
          "3553:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3554:     { &hf_radiotap_feccoding,",
          "3555:         { \"FEC Coding\", \"ixveriwave.feccoding\",",
          "3556:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3557:     { &hf_radiotap_aggregation,",
          "3558:         { \"Aggregation\", \"ixveriwave.aggregation\",",
          "3559:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3560:     { &hf_radiotap_notsounding,",
          "3561:         { \"Not Sounding\", \"ixveriwave.notsounding\",",
          "3562:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3563:     { &hf_radiotap_smoothing,",
          "3564:         { \"Smoothing\", \"ixveriwave.smoothing\",",
          "3565:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3566:     { &hf_radiotap_ness,",
          "3567:         { \"NUMBER of Extension Spatial Streams\", \"ixveriwave.ness\",",
          "3568:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3569:     { &hf_radiotap_plcp_service,",
          "3570:         { \"Service\", \"ixveriwave.plcp.service\",",
          "3571:         FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3572:     { &hf_radiotap_plcp_signal,",
          "3573:         { \"Signal\", \"ixveriwave.plcp.signal\",",
          "3574:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3575:     { &hf_radiotap_plcp_default,",
          "3576:         { \"PLCP\", \"ixveriwave.plcp\",",
          "3577:         FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3578:     { &hf_radiotap_tx_antennaselect,",
          "3579:         { \"Antenna Select\", \"ixveriwave.tx.antennaselect\",",
          "3580:         FT_UINT8, BASE_HEX, NULL, 0x07, NULL, HFILL } },",
          "3581:     { &hf_radiotap_tx_stbcselect,",
          "3582:         { \"STBC Select\", \"ixveriwave.tx.stbcselect\",",
          "3583:         FT_UINT8, BASE_HEX, NULL, 0x18, NULL, HFILL } },",
          "3584:     { &hf_radiotap_ac,",
          "3585:         { \"AC\", \"ixveriwave.tx.ac\",",
          "3586:         FT_UINT8, BASE_HEX, NULL, 0x0e, NULL, HFILL } },",
          "3587:     { &hf_radiotap_crc16,",
          "3588:         { \"CRC16\", \"ixveriwave.crc16\",",
          "3589:         FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "3590:     { &hf_radiotap_plcp_type,",
          "3591:         { \"PLCP_TYPE\", \"ixveriwave.plcp.type\",",
          "3595: #if 0",
          "3596:     { &hf_radiotap_rfinfo_noise,",
          "3597:         { \"Noise\", \"ixveriwave.rfinfo.noise\",",
          "3598:         FT_FLOAT, 0, NULL, 0x0, NULL, HFILL } },",
          "3599:     { &hf_radiotap_rfinfo_noise_anta,",
          "3600:         { \"Noise Antenna A\", \"ixveriwave.noise_anta\",",
          "3601:         FT_INT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3602:     { &hf_radiotap_rfinfo_noise_antb,",
          "3603:         { \"Noise Antenna B\", \"ixveriwave.noise_antb\",",
          "3604:         FT_INT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3605:     { &hf_radiotap_rfinfo_noise_antc,",
          "3606:         { \"Noise Antenna C\", \"ixveriwave.noise_antc\",",
          "3607:         FT_INT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3608:     { &hf_radiotap_rfinfo_noise_antd,",
          "3609:         { \"Noise Antenna D\", \"ixveriwave.noise_antd\",",
          "3610:         FT_INT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3611: #endif",
          "3612:     { &hf_radiotap_rfinfo_snr,",
          "3613:         { \"SNR\", \"ixveriwave.snr\",",
          "3614:         FT_NONE, BASE_NONE, NULL, 0x0, \"Signal-to-noise ratio\", HFILL } },",
          "3615:     { &hf_radiotap_rfinfo_snr_anta,",
          "3616:         { \"SNR Antenna A\", \"ixveriwave.snr_anta\",",
          "3617:         FT_FLOAT, BASE_NONE|BASE_UNIT_STRING, &units_decibels, 0x0, \"Signal-to-noise ratio\", HFILL } },",
          "3618:     { &hf_radiotap_rfinfo_snr_antb,",
          "3619:         { \"SNR Antenna B\", \"ixveriwave.snr_antb\",",
          "3620:         FT_FLOAT, BASE_NONE|BASE_UNIT_STRING, &units_decibels, 0x0, \"Signal-to-noise ratio\", HFILL } },",
          "3621:     { &hf_radiotap_rfinfo_snr_antc,",
          "3622:         { \"SNR Antenna C\", \"ixveriwave.snr_antc\",",
          "3623:         FT_FLOAT, BASE_NONE|BASE_UNIT_STRING, &units_decibels, 0x0, \"Signal-to-noise ratio\", HFILL } },",
          "3624:     { &hf_radiotap_rfinfo_snr_antd,",
          "3625:         { \"SNR Antenna D\", \"ixveriwave.snr_antd\",",
          "3626:         FT_FLOAT, BASE_NONE|BASE_UNIT_STRING, &units_decibels, 0x0, \"Signal-to-noise ratio\", HFILL } },",
          "3628:     { &hf_radiotap_rfinfo_pfe,",
          "3629:         { \"PFE\", \"ixveriwave.rfinfo.pfe\",",
          "3630:         FT_NONE, BASE_NONE, NULL, 0x0, \"Preamble Frequency Error metric\", HFILL } },",
          "3631:     { &hf_radiotap_rfinfo_pfe_anta,",
          "3632:         { \"PFE SS#1\", \"ixveriwave.pfe_anta\",",
          "3633:         FT_FLOAT, BASE_NONE|BASE_UNIT_STRING, &units_hz, 0x0, \"Preamble Frequency Error metric\", HFILL } },",
          "3634:     { &hf_radiotap_rfinfo_pfe_antb,",
          "3635:         { \"PFE SS#2\", \"ixveriwave.pfe_antb\",",
          "3636:         FT_FLOAT, BASE_NONE|BASE_UNIT_STRING, &units_hz, 0x0, \"Preamble Frequency Error metric\", HFILL } },",
          "3637:     { &hf_radiotap_rfinfo_pfe_antc,",
          "3638:         { \"PFE SS#3\", \"ixveriwave.pfe_antc\",",
          "3639:         FT_FLOAT, BASE_NONE|BASE_UNIT_STRING, &units_hz, 0x0, \"Preamble Frequency Error metric\", HFILL } },",
          "3640:     { &hf_radiotap_rfinfo_pfe_antd,",
          "3641:         { \"PFE SS#4\", \"ixveriwave.pfe_antd\",",
          "3642:         FT_FLOAT, BASE_NONE|BASE_UNIT_STRING, &units_hz, 0x0, \"Preamble Frequency Error metric\", HFILL } },",
          "3644:     { &hf_radiotap_rfinfo_contextpa,",
          "3645:         { \"CONTEXT_A\", \"ixveriwave.contextpa\",",
          "3646:         FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3647:     { &hf_radiotap_rfinfo_contextpb,",
          "3648:         { \"CONTEXT_B\", \"ixveriwave.contextpb\",",
          "3649:         FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3650:     { &hf_radiotap_rfinfo_contextpc,",
          "3651:         { \"CONTEXT_C\", \"ixveriwave.contextpc\",",
          "3652:         FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3653:     { &hf_radiotap_rfinfo_contextpd,",
          "3654:         { \"CONTEXT_D\", \"ixveriwave.contextpd\",",
          "3655:         FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "3656:     { &hf_radiotap_rfinfo_contextpA_bit0,",
          "3657:         { \"SNR_NOISE_valid\", \"ixveriwave.contextpA.bit0\",",
          "3658:         FT_BOOLEAN, 16, NULL, 0x0001, NULL, HFILL } },",
          "3659:     { &hf_radiotap_rfinfo_contextpA_bit1,",
          "3660:         { \"PFE_valid\", \"ixveriwave.contextpA.bit1\",",
          "3661:         FT_BOOLEAN, 16, NULL, 0x0002, NULL, HFILL } },",
          "3662:     { &hf_radiotap_rfinfo_contextpA_bit2,",
          "3663:         { \"PFE_is_CCK\", \"ixveriwave.contextpA.bit2\",",
          "3664:         FT_BOOLEAN, 16, NULL, 0x0004, NULL, HFILL } },",
          "3665: #if 0",
          "3666:     { &hf_radiotap_rfinfo_contextp_bits3,",
          "3667:         { \"AGC\", \"ixveriwave.contextp.bits3\",",
          "3668:         FT_BOOLEAN, 16, NULL, 0x0038, \"Automatic Gain Control\", HFILL } },",
          "3669: #endif",
          "3670:     { &hf_radiotap_rfinfo_contextpA_bit3,",
          "3671:         { \"AGC 3\", \"ixveriwave.contextpA.bit3\",",
          "3672:         FT_BOOLEAN, 16, NULL, 0x0008, \"Automatic Gain Control-[3] agc_idle2iqrdy_no_gain_change\", HFILL } },",
          "3673:     { &hf_radiotap_rfinfo_contextpA_bit4,",
          "3674:         { \"AGC 4\", \"ixveriwave.contextpA.bit4\",",
          "3675:         FT_BOOLEAN, 16, NULL, 0x0010, \"Automatic Gain Control-[4] agc_high_pwr_terminated\", HFILL } },",
          "3676:     { &hf_radiotap_rfinfo_contextpA_bit5,",
          "3677:         { \"AGC 5\", \"ixveriwave.contextpA.bit5\",",
          "3678:         FT_BOOLEAN, 16, NULL, 0x0020, \"Automatic Gain Control-[5] agc_high_pwr_terminator\", HFILL } },",
          "3679: #if 0",
          "3680:     { &hf_radiotap_rfinfo_contextpA_bit8,",
          "3681:         { \"Frame format\", \"ixveriwave.contextp.bits8\",",
          "3682:         FT_UINT16, BASE_DEC, VALS(frameformat_type), 0x0300, \"0: LEGACY.   1:HT.   3:-VHT.\", HFILL } },",
          "3683:     { &hf_radiotap_rfinfo_contextpA_bit10,",
          "3684:         { \"OFDM or CCK\", \"ixveriwave.contextp.bit10\",",
          "3685:         FT_BOOLEAN, 16, TFS(&tfs_legacy_type), 0x0400, \"0: LEGACY OFDM      1: 802.11b LEGACY CCK\", HFILL } },",
          "3686:     { &hf_radiotap_rfinfo_contextpA_bit11,",
          "3687:         { \"SigBandWidth of EVM\", \"ixveriwave.contextp.bits11\",",
          "3688:         FT_UINT16, BASE_DEC, VALS(sbw_evm), 0x1800, \"Signal Bandwidth of EVM measurement\", HFILL } },",
          "3689: #endif",
          "3690:     { &hf_radiotap_rfinfo_contextpA_bit13,",
          "3691:         { \"QAM modulation\", \"ixveriwave.contextpA.bits13\",",
          "3692:         FT_BOOLEAN, 16, NULL, 0xe000, NULL, HFILL } },",
          "3694:     { &hf_radiotap_rfinfo_contextpB_bit0,",
          "3695:         { \"SNR_NOISE_valid\", \"ixveriwave.contextpB.bit0\",",
          "3696:         FT_BOOLEAN, 16, NULL, 0x0001, NULL, HFILL } },",
          "3697:     { &hf_radiotap_rfinfo_contextpB_bit1,",
          "3698:         { \"PFE_valid\", \"ixveriwave.contextpB.bit1\",",
          "3699:         FT_BOOLEAN, 16, NULL, 0x0002, NULL, HFILL } },",
          "3700:     { &hf_radiotap_rfinfo_contextpB_bit2,",
          "3701:         { \"PFE_is_CCK\", \"ixveriwave.contextpB.bit2\",",
          "3702:         FT_BOOLEAN, 16, NULL, 0x0004, NULL, HFILL } },",
          "3703:     { &hf_radiotap_rfinfo_contextpB_bit3,",
          "3704:         { \"AGC 3\", \"ixveriwave.contextpB.bit3\",",
          "3705:         FT_BOOLEAN, 16, NULL, 0x0008, \"Automatic Gain Control-[3] agc_idle2iqrdy_no_gain_change\", HFILL } },",
          "3706:     { &hf_radiotap_rfinfo_contextpB_bit4,",
          "3707:         { \"AGC 4\", \"ixveriwave.contextpB.bit4\",",
          "3708:         FT_BOOLEAN, 16, NULL, 0x0010, \"Automatic Gain Control-[4] agc_high_pwr_terminated\", HFILL } },",
          "3709:     { &hf_radiotap_rfinfo_contextpB_bit5,",
          "3710:         { \"AGC 5\", \"ixveriwave.contextpB.bit5\",",
          "3711:         FT_BOOLEAN, 16, NULL, 0x0020, \"Automatic Gain Control-[5] agc_high_pwr_terminator\", HFILL } },",
          "3712:     { &hf_radiotap_rfinfo_contextpB_bit13,",
          "3713:         { \"QAM modulation\", \"ixveriwave.contextpB.bits13\",",
          "3714:         FT_BOOLEAN, 16, NULL, 0xe000, NULL, HFILL } },",
          "3716:     { &hf_radiotap_rfinfo_contextpC_bit0,",
          "3717:         { \"SNR_NOISE_valid\", \"ixveriwave.contextpC.bit0\",",
          "3718:         FT_BOOLEAN, 16, NULL, 0x0001, NULL, HFILL } },",
          "3719:     { &hf_radiotap_rfinfo_contextpC_bit1,",
          "3720:         { \"PFE_valid\", \"ixveriwave.contextpC.bit1\",",
          "3721:         FT_BOOLEAN, 16, NULL, 0x0002, NULL, HFILL } },",
          "3722:     { &hf_radiotap_rfinfo_contextpC_bit2,",
          "3723:         { \"PFE_is_CCK\", \"ixveriwave.contextpC.bit2\",",
          "3724:         FT_BOOLEAN, 16, NULL, 0x0004, NULL, HFILL } },",
          "3725:     { &hf_radiotap_rfinfo_contextpC_bit3,",
          "3726:         { \"AGC 3\", \"ixveriwave.contextpC.bit3\",",
          "3727:         FT_BOOLEAN, 16, NULL, 0x0008, \"Automatic Gain Control-[3] agc_idle2iqrdy_no_gain_change\", HFILL } },",
          "3728:     { &hf_radiotap_rfinfo_contextpC_bit4,",
          "3729:         { \"AGC 4\", \"ixveriwave.contextpC.bit4\",",
          "3730:         FT_BOOLEAN, 16, NULL, 0x0010, \"Automatic Gain Control-[4] agc_high_pwr_terminated\", HFILL } },",
          "3731:     { &hf_radiotap_rfinfo_contextpC_bit5,",
          "3732:         { \"AGC 5\", \"ixveriwave.contextpC.bit5\",",
          "3733:         FT_BOOLEAN, 16, NULL, 0x0020, \"Automatic Gain Control-[5] agc_high_pwr_terminator\", HFILL } },",
          "3734:     { &hf_radiotap_rfinfo_contextpC_bit13,",
          "3735:         { \"QAM modulation\", \"ixveriwave.contextpC.bits13\",",
          "3736:         FT_BOOLEAN, 16, NULL, 0xe000, NULL, HFILL } },",
          "3738:     { &hf_radiotap_rfinfo_contextpD_bit0,",
          "3739:         { \"SNR_NOISE_valid\", \"ixveriwave.contextpD.bit0\",",
          "3740:         FT_BOOLEAN, 16, NULL, 0x0001, NULL, HFILL } },",
          "3741:     { &hf_radiotap_rfinfo_contextpD_bit1,",
          "3742:         { \"PFE_valid\", \"ixveriwave.contextpD.bit1\",",
          "3743:         FT_BOOLEAN, 16, NULL, 0x0002, NULL, HFILL } },",
          "3744:     { &hf_radiotap_rfinfo_contextpD_bit2,",
          "3745:         { \"PFE_is_CCK\", \"ixveriwave.contextpD.bit2\",",
          "3746:         FT_BOOLEAN, 16, NULL, 0x0004, NULL, HFILL } },",
          "3747:     { &hf_radiotap_rfinfo_contextpD_bit3,",
          "3748:         { \"AGC 3\", \"ixveriwave.contextpD.bit3\",",
          "3749:         FT_BOOLEAN, 16, NULL, 0x0008, \"Automatic Gain Control-[3] agc_idle2iqrdy_no_gain_change\", HFILL } },",
          "3750:     { &hf_radiotap_rfinfo_contextpD_bit4,",
          "3751:         { \"AGC 4\", \"ixveriwave.contextpD.bit4\",",
          "3752:         FT_BOOLEAN, 16, NULL, 0x0010, \"Automatic Gain Control-[4] agc_high_pwr_terminated\", HFILL } },",
          "3753:     { &hf_radiotap_rfinfo_contextpD_bit5,",
          "3754:         { \"AGC 5\", \"ixveriwave.contextpD.bit5\",",
          "3755:         FT_BOOLEAN, 16, NULL, 0x0020, \"Automatic Gain Control-[5] agc_high_pwr_terminator\", HFILL } },",
          "3756:     { &hf_radiotap_rfinfo_contextpD_bit13,",
          "3757:         { \"QAM modulation\", \"ixveriwave.contextpD.bits13\",",
          "3758:         FT_BOOLEAN, 16, NULL, 0xe000, NULL, HFILL } },",
          "3760:     { &hf_radiotap_rfinfo_frameformatA,",
          "3761:         { \"Frame format\", \"ixveriwave.rfinfo.frameformatA\",",
          "3762:         FT_UINT8, BASE_DEC, VALS(frameformat_type), 0x03, NULL, HFILL } },",
          "3763:     { &hf_radiotap_rfinfo_frameformatB,",
          "3764:         { \"Frame format\", \"ixveriwave.rfinfo.frameformatB\",",
          "3765:         FT_UINT8, BASE_DEC, VALS(frameformat_type), 0x03, NULL, HFILL } },",
          "3766:     { &hf_radiotap_rfinfo_frameformatC,",
          "3767:         { \"Frame format\", \"ixveriwave.rfinfo.frameformatC\",",
          "3768:         FT_UINT8, BASE_DEC, VALS(frameformat_type), 0x03, NULL, HFILL } },",
          "3769:     { &hf_radiotap_rfinfo_frameformatD,",
          "3770:         { \"Frame format\", \"ixveriwave.rfinfo.frameformatD\",",
          "3771:         FT_UINT8, BASE_DEC, VALS(frameformat_type), 0x03, NULL, HFILL } },",
          "3772:     { &hf_radiotap_rfinfo_legacytypeA,",
          "3773:         { \"Frame format\", \"ixveriwave.rfinfo.legacytypeA\",",
          "3774:         FT_BOOLEAN, 8, TFS(&tfs_legacy_type), 0x04, NULL, HFILL } },",
          "3775:     { &hf_radiotap_rfinfo_legacytypeB,",
          "3776:         { \"Frame format\", \"ixveriwave.rfinfo.legacytypeB\",",
          "3777:         FT_BOOLEAN, 8, TFS(&tfs_legacy_type), 0x04, NULL, HFILL } },",
          "3778:     { &hf_radiotap_rfinfo_legacytypeC,",
          "3779:         { \"Frame format\", \"ixveriwave.rfinfo.legacytypeC\",",
          "3780:         FT_BOOLEAN, 8, TFS(&tfs_legacy_type), 0x04, NULL, HFILL } },",
          "3781:     { &hf_radiotap_rfinfo_legacytypeD,",
          "3782:         { \"Frame format\", \"ixveriwave.rfinfo.legacytypeD\",",
          "3783:         FT_BOOLEAN, 8, TFS(&tfs_legacy_type), 0x04, NULL, HFILL } },",
          "3784:     { &hf_radiotap_rfinfo_sigbwevmA,",
          "3785:         { \"SigBandWidth of EVM\", \"ixveriwave.rfinfo.sigbwevmA\",",
          "3786:         FT_UINT8, BASE_DEC, VALS(sbw_evm), 0x18, NULL, HFILL } },",
          "3787:     { &hf_radiotap_rfinfo_sigbwevmB,",
          "3788:         { \"SigBandWidth of EVM\", \"ixveriwave.rfinfo.sigbwevmB\",",
          "3789:         FT_UINT8, BASE_DEC, VALS(sbw_evm), 0x18, NULL, HFILL } },",
          "3790:     { &hf_radiotap_rfinfo_sigbwevmC,",
          "3791:         { \"SigBandWidth of EVM\", \"ixveriwave.rfinfo.sigbwevmC\",",
          "3792:         FT_UINT8, BASE_DEC, VALS(sbw_evm), 0x18, NULL, HFILL } },",
          "3793:     { &hf_radiotap_rfinfo_sigbwevmD,",
          "3794:         { \"SigBandWidth of EVM\", \"ixveriwave.rfinfo.sigbwevmD\",",
          "3795:         FT_UINT8, BASE_DEC, VALS(sbw_evm), 0x18, NULL, HFILL } },",
          "3797:     { &hf_radiotap_rfinfo_sigdata,",
          "3798:         { \"AVG EVM SIG Data\", \"ixveriwave.rfinfo.sigdata\",",
          "3799:         FT_NONE, BASE_NONE, NULL, 0x0, \"Average EVM for DATA SUBCARRIERS for all SIG symbols of the frame\", HFILL } },",
          "3800:     { &hf_radiotap_rfinfo_avg_evm_sd_siga,",
          "3801:         { \"AVG EVM SIG Data SS#1\", \"ixveriwave.avg_evm_sda\",",
          "3802:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3803:     { &hf_radiotap_rfinfo_avg_evm_sd_sigb,",
          "3804:         { \"AVG EVM SIG Data SS#2\", \"ixveriwave.avg_evm_sdb\",",
          "3805:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3806:     { &hf_radiotap_rfinfo_avg_evm_sd_sigc,",
          "3807:         { \"AVG EVM SIG Data SS#3\", \"ixveriwave.avg_evm_sdc\",",
          "3808:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3809:     { &hf_radiotap_rfinfo_avg_evm_sd_sigd,",
          "3810:         { \"AVG EVM SIG Data SS#4\", \"ixveriwave.avg_evm_sdd\",",
          "3811:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3813:     { &hf_radiotap_rfinfo_sigpilot,",
          "3814:         { \"AVG EVM SIG Pilot\", \"ixveriwave.rfinfo.sigpilot\",",
          "3815:         FT_NONE, BASE_NONE, NULL, 0x0, \"Average EVM for  PILOT SUBCARRIERS for all SIG symbols of the frame\", HFILL } },",
          "3816:     { &hf_radiotap_rfinfo_avg_evm_sp_siga,",
          "3817:         { \"AVG EVM SIG Pilot SS#1\", \"ixveriwave.avg_evm_spa\",",
          "3818:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3819:     { &hf_radiotap_rfinfo_avg_evm_sp_sigb,",
          "3820:         { \"AVG EVM SIG Pilot SS#2\", \"ixveriwave.avg_evm_spb\",",
          "3821:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3822:     { &hf_radiotap_rfinfo_avg_evm_sp_sigc,",
          "3823:         { \"AVG EVM SIG Pilot SS#3\", \"ixveriwave.avg_evm_spc\",",
          "3824:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3825:     { &hf_radiotap_rfinfo_avg_evm_sp_sigd,",
          "3826:         { \"AVG EVM SIG Pilot SS#4\", \"ixveriwave.avg_evm_spd\",",
          "3827:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3829:     { &hf_radiotap_rfinfo_datadata,",
          "3830:         { \"AVG EVM DATA Data\", \"ixveriwave.rfinfo.datadata\",",
          "3831:         FT_NONE, BASE_NONE, NULL, 0x0, \"Average EVM for  DATA SUBCARRIERS for all DATA symbols of the frame\", HFILL } },",
          "3832:     { &hf_radiotap_rfinfo_avg_evm_dd_siga,",
          "3833:         { \"AVG EVM DATA Data SS#1\", \"ixveriwave.avg_evm_dda\",",
          "3834:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3835:     { &hf_radiotap_rfinfo_avg_evm_dd_sigb,",
          "3836:         { \"AVG EVM DATA Data SS#2\", \"ixveriwave.avg_evm_ddb\",",
          "3837:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3838:     { &hf_radiotap_rfinfo_avg_evm_dd_sigc,",
          "3839:         { \"AVG EVM DATA Data SS#3\", \"ixveriwave.avg_evm_ddc\",",
          "3840:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3841:     { &hf_radiotap_rfinfo_avg_evm_dd_sigd,",
          "3842:         { \"AVG EVM DATA Data SS#4\", \"ixveriwave.avg_evm_ddd\",",
          "3843:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3845:     { &hf_radiotap_rfinfo_datapilot,",
          "3846:         { \"AVG EVM DATA Pilot\", \"ixveriwave.rfinfo.datapilot\",",
          "3847:         FT_NONE, BASE_NONE, NULL, 0x0, \"Average EVM for  PILOT SUBCARRIERS for all DATA symbols of the frame\", HFILL } },",
          "3848:     { &hf_radiotap_rfinfo_avg_evm_dp_siga,",
          "3849:         { \"AVG EVM DATA Pilot SSI-1\", \"ixveriwave.avg_evm_dpa\",",
          "3850:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3851:     { &hf_radiotap_rfinfo_avg_evm_dp_sigb,",
          "3852:         { \"AVG EVM DATA Pilot SSI-2\", \"ixveriwave.avg_evm_dpb\",",
          "3853:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3854:     { &hf_radiotap_rfinfo_avg_evm_dp_sigc,",
          "3855:         { \"AVG EVM DATA Pilot SSI-3\", \"ixveriwave.avg_evm_dpc\",",
          "3856:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3857:     { &hf_radiotap_rfinfo_avg_evm_dp_sigd,",
          "3858:         { \"AVG EVM DATA Pilot SSI-4\", \"ixveriwave.avg_evm_dpd\",",
          "3859:         FT_FLOAT, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "3861:     { &hf_radiotap_rfinfo_avg_ws_symbol,",
          "3862:         { \"EVM Worst Symbol\", \"ixveriwave.wssymbol\",",
          "3863:         FT_NONE, BASE_NONE, NULL, 0, \"WORST-CASE SYMBOL\", HFILL } },",
          "3864:     { &hf_radiotap_rfinfo_avg_evm_ws_siga,",
          "3865:         { \"EVM Worst Symbol SS#1\", \"ixveriwave.avg_evm_wsa\",",
          "3866:         FT_UINT16, BASE_DEC|BASE_UNIT_STRING, &units_percent, 0, NULL, HFILL } },",
          "3867:     { &hf_radiotap_rfinfo_avg_evm_ws_sigb,",
          "3868:         { \"EVM Worst Symbol SS#2\", \"ixveriwave.avg_evm_wsb\",",
          "3869:         FT_UINT16, BASE_DEC|BASE_UNIT_STRING, &units_percent, 0, NULL, HFILL } },",
          "3870:     { &hf_radiotap_rfinfo_avg_evm_ws_sigc,",
          "3871:         { \"EVM Worst Symbol SS#3\", \"ixveriwave.avg_evm_wsc\",",
          "3872:         FT_UINT16, BASE_DEC|BASE_UNIT_STRING, &units_percent, 0, NULL, HFILL } },",
          "3873:     { &hf_radiotap_rfinfo_avg_evm_ws_sigd,",
          "3874:         { \"EVM Worst Symbol SS#4\", \"ixveriwave.avg_evm_wsd\",",
          "3875:         FT_UINT16, BASE_DEC|BASE_UNIT_STRING, &units_percent, 0, NULL, HFILL } },",
          "3877:     { &hf_radiotap_rfinfo_rfid,",
          "3878:         { \"RF_ID\", \"ixveriwave.rfinfo.rfid\",",
          "3879:         FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3880: #if 0",
          "3881:     { &hf_radiotap_rfinfo_tbd,",
          "3882:         { \"RF_TBD\", \"ixveriwave.rfinfo.tbd\",",
          "3883:         FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "3884: #endif",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1587:         { \"L4(TCP/ICMP/IGMP/UDP) checksum error\", \"ixveriwave.errors.bit11\",",
          "1588:         FT_BOOLEAN, 16, NULL, 0x0800, NULL, HFILL } },",
          "1590:     { &hf_radiotap_vw_info,",
          "1591:         { \"Info field\", \"ixveriwave.info\",",
          "1592:         FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "1595:     { &hf_radiotap_vw_info_tx_bit10,",
          "1596:         { \"MPDU of A-MPDU\", \"ixveriwave.info.bit10\",",
          "1597:         FT_BOOLEAN, 16, NULL, INFO_MPDU_OF_A_MPDU, NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3930:     { &hf_radiotap_vw_errors_tx_bit01,",
          "3931:         { \"CRC32 Error\", \"ixveriwave.errors.bit1\",",
          "3932:         FT_BOOLEAN, 32, NULL, 0x00000002, NULL, HFILL } },",
          "3933:     { &hf_radiotap_vw_errors_tx_bit05,",
          "3934:         { \"IP Checksum Error\", \"ixveriwave.errors.bit5\",",
          "3935:         FT_BOOLEAN, 32, NULL, 0x00000020, NULL, HFILL } },",
          "3936:     { &hf_radiotap_vw_errors_tx_bit8,",
          "3937:         { \"ACK Timeout\", \"ixveriwave.errors.bit8\",",
          "3938:         FT_BOOLEAN, 32, NULL, 0x00000100, NULL, HFILL } },",
          "3939:     { &hf_radiotap_vw_errors_tx_bit9,",
          "3940:         { \"CTS Timeout\", \"ixveriwave.errors.bit9\",",
          "3941:         FT_BOOLEAN, 32, NULL, 0x00000200, NULL, HFILL } },",
          "3942:     { &hf_radiotap_vw_errors_tx_bit10,",
          "3943:         { \"Last Retry Attempt for this MPDU\", \"ixveriwave.errors.bit10\",",
          "3944:         FT_BOOLEAN, 32, NULL, 0x00000400, NULL, HFILL } },",
          "3945:     { &hf_radiotap_vw_errors_tx_bit31,",
          "3946:         { \"Internal Error\", \"ixveriwave.errors.bit31\",",
          "3947:         FT_BOOLEAN, 32, NULL, 0x80000000, NULL, HFILL } },",
          "3948:     { &hf_radiotap_vw_tx_retrycount,",
          "3949:         { \"Retry Count\", \"ixveriwave.tx.retrycount\",",
          "3950:         FT_UINT8, BASE_DEC, NULL, 0x1f, NULL, HFILL } },",
          "3951:     { &hf_radiotap_vw_tx_factorydebug,",
          "3952:         { \"Factory Debug\", \"ixveriwave.tx.factorydebug\",",
          "3953:         FT_UINT8, BASE_HEX, NULL, 0x7f80, NULL, HFILL } },",
          "3955:     { &hf_radiotap_vw_errors_rx_bit0,",
          "3956:         { \"SIG Field CRC/Parity Error\", \"ixveriwave.errors.bit0\",",
          "3957:         FT_BOOLEAN, 32, NULL, 0x00000001, NULL, HFILL } },",
          "3958:     { &hf_radiotap_vw_errors_rx_bit1,",
          "3959:         { \"Non-supported service field\", \"ixveriwave.errors.bit1\",",
          "3960:         FT_BOOLEAN, 32, NULL, 0x00000002, NULL, HFILL } },",
          "3961:     { &hf_radiotap_vw_errors_rx_bit2,",
          "3962:         { \"Frame Length Error\", \"ixveriwave.errors.bit2\",",
          "3963:         FT_BOOLEAN, 32, NULL, 0x00000004, NULL, HFILL } },",
          "3964:     { &hf_radiotap_vw_errors_rx_bit3,",
          "3965:         { \"VHT_SIG_A/B CRC Error\", \"ixveriwave.errors.bit3\",",
          "3966:         FT_BOOLEAN, 32, NULL, 0x00000008, NULL, HFILL } },",
          "3967:     { &hf_radiotap_vw_errors_rx_bit4,",
          "3968:         { \"CRC32 Error\", \"ixveriwave.errors.bit4\",",
          "3969:         FT_BOOLEAN, 32, NULL, 0x00000010, NULL, HFILL } },",
          "3970:     { &hf_radiotap_vw_errors_rx_bit5,",
          "3971:         { \"L2 de-aggregation error\", \"ixveriwave.errors.bit5\",",
          "3972:         FT_BOOLEAN, 32, NULL, 0x00000020, NULL, HFILL } },",
          "3973:     { &hf_radiotap_vw_errors_rx_bit6,",
          "3974:         { \"Duplicate MPDU\", \"ixveriwave.errors.bit6\",",
          "3975:         FT_BOOLEAN, 32, NULL, 0x00000040, NULL, HFILL } },",
          "3976:     { &hf_radiotap_vw_errors_rx_bit7,",
          "3977:         { \"Bad Flow Magic Number\", \"ixveriwave.errors.bit7\",",
          "3978:         FT_BOOLEAN, 32, NULL, 0x00000080, NULL, HFILL } },",
          "3979:     { &hf_radiotap_vw_errors_rx_bit8,",
          "3980:         { \"Bad flow payload checksum\", \"ixveriwave.errors.bit8\",",
          "3981:         FT_BOOLEAN, 32, NULL, 0x00000100, NULL, HFILL } },",
          "3982:     { &hf_radiotap_vw_errors_rx_bit9,",
          "3983:         { \"Illegal VHT_SIG Value\", \"ixveriwave.errors.bit9\",",
          "3984:         FT_BOOLEAN, 32, NULL, 0x00000200, NULL, HFILL } },",
          "3985:     { &hf_radiotap_vw_errors_rx_bit10,",
          "3986:         { \"Bad IP checksum error\", \"ixveriwave.errors.bit10\",",
          "3987:         FT_BOOLEAN, 32, NULL, 0x00000400, NULL, HFILL } },",
          "3988:     { &hf_radiotap_vw_errors_rx_bit11,",
          "3989:         { \"TCP/ICMP/IGMP/UDP Checksum Error\", \"ixveriwave.errors.bit11\",",
          "3990:         FT_BOOLEAN, 32, NULL, 0x00000800, NULL, HFILL } },",
          "3991:     { &hf_radiotap_vw_errors_rx_bit12,",
          "3992:         { \"Layer 1 Unsupported Feature\", \"ixveriwave.errors.bit12\",",
          "3993:         FT_BOOLEAN, 32, NULL, 0x00001000, NULL, HFILL } },",
          "3994:     { &hf_radiotap_vw_errors_rx_bit14,",
          "3995:         { \"Layer 1 Packet Termination\", \"ixveriwave.errors.bit14\",",
          "3996:         FT_BOOLEAN, 32, NULL, 0x00004000, NULL, HFILL } },",
          "3997:     { &hf_radiotap_vw_errors_rx_bit15,",
          "3998:         { \"Internal Error\", \"ixveriwave.errors.bit15\",",
          "3999:         FT_BOOLEAN, 32, NULL, 0x00008000, NULL, HFILL } },",
          "4000:     { &hf_radiotap_vw_errors_rx_bit16,",
          "4001:         { \"WEP IVC/TKIP/CCMP/BIP MIC Miscompare\", \"ixveriwave.errors.bit16\",",
          "4002:         FT_BOOLEAN, 32, NULL, 0x00010000, NULL, HFILL } },",
          "4003:     { &hf_radiotap_vw_errors_rx_bit17,",
          "4004:         { \"WEP/TKIP Rate Exceeded\", \"ixveriwave.errors.bit17\",",
          "4005:         FT_BOOLEAN, 32, NULL, 0x00020000, NULL, HFILL } },",
          "4006:     { &hf_radiotap_vw_errors_rx_bit18,",
          "4007:         { \"Crypto Short Error\", \"ixveriwave.errors.bit18\",",
          "4008:         FT_BOOLEAN, 32, NULL, 0x00040000, NULL, HFILL } },",
          "4009:     { &hf_radiotap_vw_errors_rx_bit19,",
          "4010:         { \"EXTIV Fault A\", \"ixveriwave.errors.bit19\",",
          "4011:         FT_BOOLEAN, 32, NULL, 0x00080000, NULL, HFILL } },",
          "4012:     { &hf_radiotap_vw_errors_rx_bit20,",
          "4013:         { \"EXTIV Fault B\", \"ixveriwave.errors.bit20\",",
          "4014:         FT_BOOLEAN, 32, NULL, 0x00100000, NULL, HFILL } },",
          "4015:     { &hf_radiotap_vw_errors_rx_bit21,",
          "4016:         { \"Internal Error\", \"ixveriwave.errors.bit21\",",
          "4017:         FT_BOOLEAN, 32, NULL, 0x00200000, NULL, HFILL } },",
          "4018:     { &hf_radiotap_vw_errors_rx_bit22,",
          "4019:         { \"Protected Fault A\", \"ixveriwave.errors.bit22\",",
          "4020:         FT_BOOLEAN, 32, NULL, 0x00400000, NULL, HFILL } },",
          "4021:     { &hf_radiotap_vw_errors_rx_bit23,",
          "4022:         { \"RX MAC Crypto Incompatibility\", \"ixveriwave.errors.bit23\",",
          "4023:         FT_BOOLEAN, 32, NULL, 0x00800000, NULL, HFILL } },",
          "4024:     { &hf_radiotap_vw_errors_rx_bit24,",
          "4025:         { \"Factory Debug\", \"ixveriwave.errors.bit24\",",
          "4026:         FT_BOOLEAN, 32, NULL, 0x7F000000, NULL, HFILL } },",
          "4027:     { &hf_radiotap_vw_errors_rx_bit31,",
          "4028:         { \"Internal Error\", \"ixveriwave.errors.bit31\",",
          "4029:         FT_BOOLEAN, 32, NULL, 0x80000000, NULL, HFILL } },",
          "4034:     { &hf_radiotap_vw_info_tx,",
          "4035:         { \"Info field\", \"ixveriwave.info\",",
          "4036:         FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "4037:     { &hf_radiotap_vw_info_rx,",
          "4038:             { \"Info field\", \"ixveriwave.info\",",
          "4039:             FT_UINT24, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "4044:     { &hf_radiotap_vw_info_tx_bit0,",
          "4045:         { \"Crypto WEP Encoded\", \"ixveriwave.info.bit0\",",
          "4046:         FT_BOOLEAN, 16, NULL, 0x0001, NULL, HFILL } },",
          "4047:     { &hf_radiotap_vw_info_tx_bit1,",
          "4048:         { \"Crypto TKIP Encoded\", \"ixveriwave.info.bit1\",",
          "4049:         FT_BOOLEAN, 16, NULL, 0x0006, NULL, HFILL } },",
          "4050:     { &hf_radiotap_vw_info_tx_bit3,",
          "4051:         { \"Crypto C bit Error\", \"ixveriwave.info.bit3\",",
          "4052:         FT_BOOLEAN, 16, NULL, 0x0008, NULL, HFILL } },",
          "4053:     { &hf_radiotap_vw_info_tx_bit4,",
          "4054:         { \"Crypto TKIP not full MSDU\", \"ixveriwave.info.bit4\",",
          "4055:         FT_BOOLEAN, 16, NULL, 0x0010, NULL, HFILL } },",
          "4056:     { &hf_radiotap_vw_info_tx_bit5,",
          "4057:         { \"Crypto Software Error\", \"ixveriwave.info.bit5\",",
          "4058:         FT_BOOLEAN, 16, NULL, 0x0020, NULL, HFILL } },",
          "4059:     { &hf_radiotap_vw_info_tx_bit6,",
          "4060:         { \"Crypto Short Fault\", \"ixveriwave.info.bit6\",",
          "4061:         FT_BOOLEAN, 16, NULL, 0x0040, NULL, HFILL } },",
          "4062:     { &hf_radiotap_vw_info_tx_bit7,",
          "4063:         { \"Crypto Payload Length Fault\", \"ixveriwave.info.bit7\",",
          "4064:         FT_BOOLEAN, 16, NULL, 0x0080, NULL, HFILL } },",
          "4065:     { &hf_radiotap_vw_info_tx_bit8,",
          "4066:         { \"Sent RTS before Data\", \"ixveriwave.info.bit8\",",
          "4067:         FT_BOOLEAN, 16, NULL, 0x0100, NULL, HFILL } },",
          "4068:     { &hf_radiotap_vw_info_tx_bit9,",
          "4069:         { \"Sent CTS to Self before Data\", \"ixveriwave.info.bit9\",",
          "4070:         FT_BOOLEAN, 16, NULL, 0x0200, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1615:     { &hf_radiotap_vw_info_tx_bit15,",
          "1616:         { \"Last MSDU of A-MSDU\", \"ixveriwave.info.bit15\",",
          "1617:         FT_BOOLEAN, 16, NULL, INFO_LAST_MSDU_OF_A_MSDU, NULL, HFILL } },",
          "1621:     { &hf_radiotap_vw_info_rx_2_bit8,",
          "1622:         { \"ACK withheld from frame\", \"ixveriwave.info.bit8\",",
          "1623:         FT_BOOLEAN, 16, NULL, 0x0100, NULL, HFILL } },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4097:     { &hf_radiotap_vw_info_tx_bit0,",
          "4098:         { \"Crypto WEP Encoded\", \"ixveriwave.info.bit0\",",
          "4099:         FT_UINT16, BASE_DEC, NULL, 0x0001, NULL, HFILL } },",
          "4100:     { &hf_radiotap_vw_info_tx_bit1,",
          "4101:         { \"Crypto TKIP Encoded\", \"ixveriwave.info.bit1\",",
          "4102:         FT_UINT16, BASE_DEC, VALS(crypto_TKIP_type), 0x0006, NULL, HFILL } },",
          "4103:     { &hf_radiotap_vw_info_tx_bit3,",
          "4104:         { \"Crypto C bit Error\", \"ixveriwave.info.bit3\",",
          "4105:         FT_UINT16, BASE_DEC, NULL, 0x0008, NULL, HFILL } },",
          "4106:     { &hf_radiotap_vw_info_tx_bit4,",
          "4107:         { \"Crypto TKIP not full MSDU\", \"ixveriwave.info.bit4\",",
          "4108:         FT_UINT16, BASE_DEC, NULL, 0x0010, NULL, HFILL } },",
          "4109:     { &hf_radiotap_vw_info_tx_bit5,",
          "4110:         { \"Crypto Software Error\", \"ixveriwave.info.bit5\",",
          "4111:         FT_UINT16, BASE_DEC, NULL, 0x0020, NULL, HFILL } },",
          "4112:     { &hf_radiotap_vw_info_tx_bit6,",
          "4113:         { \"Crypto Short Fault\", \"ixveriwave.info.bit6\",",
          "4114:         FT_UINT16, BASE_DEC, NULL, 0x0040, NULL, HFILL } },",
          "4115:     { &hf_radiotap_vw_info_tx_bit7,",
          "4116:         { \"Crypto Payload Length Fault\", \"ixveriwave.info.bit7\",",
          "4117:         FT_UINT16, BASE_DEC, NULL, 0x0080, NULL, HFILL } },",
          "4118:     { &hf_radiotap_vw_info_tx_bit8,",
          "4119:         { \"Sent RTS before Data\", \"ixveriwave.info.bit8\",",
          "4120:         FT_UINT16, BASE_DEC, NULL, 0x0100, NULL, HFILL } },",
          "4121:     { &hf_radiotap_vw_info_tx_bit9,",
          "4122:         { \"Sent CTS to Self before Data\", \"ixveriwave.info.bit9\",",
          "4123:         FT_UINT16, BASE_DEC, NULL, 0x0200, NULL, HFILL } },",
          "4125:     { &hf_radiotap_vw_info_tx_bit10,",
          "4126:         { \"MPDU of A-MPDU\", \"ixveriwave.info.bit10\",",
          "4127:         FT_UINT16, BASE_DEC, NULL, INFO_MPDU_OF_A_MPDU, NULL, HFILL } },",
          "4129:     { &hf_radiotap_vw_info_tx_bit11,",
          "4130:         { \"First MPDU of A-MPDU\", \"ixveriwave.info.bit11\",",
          "4131:         FT_UINT16, BASE_DEC, NULL, INFO_FIRST_MPDU_OF_A_MPDU, NULL, HFILL } },",
          "4133:     { &hf_radiotap_vw_info_tx_bit12,",
          "4134:         { \"Last MPDU of A-MPDU\", \"ixveriwave.info.bit12\",",
          "4135:         FT_UINT16, BASE_DEC, NULL, INFO_LAST_MPDU_OF_A_MPDU, NULL, HFILL } },",
          "4137:     { &hf_radiotap_vw_info_tx_bit13,",
          "4138:         { \"MSDU of A-MSDU\", \"ixveriwave.info.bit13\",",
          "4139:         FT_UINT16, BASE_DEC, NULL, INFO_MSDU_OF_A_MSDU, NULL, HFILL } },",
          "4141:     { &hf_radiotap_vw_info_tx_bit14,",
          "4142:         { \"First MSDU of A-MSDU\", \"ixveriwave.info.bit14\",",
          "4143:         FT_UINT16, BASE_DEC, NULL, INFO_FIRST_MSDU_OF_A_MSDU, NULL, HFILL } },",
          "4145:     { &hf_radiotap_vw_info_tx_bit15,",
          "4146:         { \"Last MSDU of A-MSDU\", \"ixveriwave.info.bit15\",",
          "4147:         FT_UINT16, BASE_DEC, NULL, INFO_LAST_MSDU_OF_A_MSDU, NULL, HFILL } },",
          "4149:     { &hf_radiotap_vw_info_tx_2_bit10,",
          "4150:         { \"MPDU of A-MPDU\", \"ixveriwave.info.bit10\",",
          "4151:         FT_BOOLEAN, 16, NULL, INFO_MPDU_OF_A_MPDU, NULL, HFILL } },",
          "4153:     { &hf_radiotap_vw_info_tx_2_bit11,",
          "4154:         { \"First MPDU of A-MPDU\", \"ixveriwave.info.bit11\",",
          "4155:         FT_BOOLEAN, 16, NULL, INFO_FIRST_MPDU_OF_A_MPDU, NULL, HFILL } },",
          "4157:     { &hf_radiotap_vw_info_tx_2_bit12,",
          "4158:         { \"Last MPDU of A-MPDU\", \"ixveriwave.info.bit12\",",
          "4159:         FT_BOOLEAN, 16, NULL, INFO_LAST_MPDU_OF_A_MPDU, NULL, HFILL } },",
          "4161:     { &hf_radiotap_vw_info_tx_2_bit13,",
          "4162:         { \"MSDU of A-MSDU\", \"ixveriwave.info.bit13\",",
          "4163:         FT_BOOLEAN, 16, NULL, INFO_MSDU_OF_A_MSDU, NULL, HFILL } },",
          "4165:     { &hf_radiotap_vw_info_tx_2_bit14,",
          "4166:         { \"First MSDU of A-MSDU\", \"ixveriwave.info.bit14\",",
          "4167:         FT_BOOLEAN, 16, NULL, INFO_FIRST_MSDU_OF_A_MSDU, NULL, HFILL } },",
          "4169:     { &hf_radiotap_vw_info_tx_2_bit15,",
          "4170:         { \"Last MSDU of A-MSDU\", \"ixveriwave.info.bit15\",",
          "4171:         FT_BOOLEAN, 16, NULL, INFO_LAST_MSDU_OF_A_MSDU, NULL, HFILL } },",
          "4175:     { &hf_radiotap_vw_info_rx_bit0,",
          "4176:         { \"Crypto WEP Encoded\", \"ixveriwave.info.bit0\",",
          "4177:         FT_UINT24, BASE_DEC, NULL, 0x000001, NULL, HFILL } },",
          "4178:     { &hf_radiotap_vw_info_rx_bit1,",
          "4179:         { \"Crypto TKIP Encoded\", \"ixveriwave.info.bit1\",",
          "4180:         FT_UINT24, BASE_DEC, VALS(crypto_TKIP_type), 0x000006, NULL, HFILL } },",
          "4181:     { &hf_radiotap_vw_info_rx_bit3,",
          "4182:         { \"Crypto RX TKIP TSC SEQSKIP\", \"ixveriwave.info.bit3\",",
          "4183:         FT_UINT24, BASE_DEC, NULL, 0x000008, NULL, HFILL } },",
          "4184:     { &hf_radiotap_vw_info_rx_bit4,",
          "4185:         { \"Crypto RX CCMP PN SEQSKIP\", \"ixveriwave.info.bit4\",",
          "4186:         FT_UINT24, BASE_DEC, NULL, 0x000010, NULL, HFILL } },",
          "4187:     { &hf_radiotap_vw_info_rx_bit5,",
          "4188:         { \"TKIP not full MSDU\", \"ixveriwave.info.bit5\",",
          "4189:         FT_UINT24, BASE_DEC, NULL, 0x000020, NULL, HFILL } },",
          "4190:     { &hf_radiotap_vw_info_rx_bit6,",
          "4191:         { \"MPDU Length field is greater than MPDU octets\", \"ixveriwave.info.bit6\",",
          "4192:         FT_UINT24, BASE_DEC, NULL, 0x000040, NULL, HFILL } },",
          "4193:     { &hf_radiotap_vw_info_rx_bit7,",
          "4194:         { \"RX TKIP / CCMP TSC SEQERR\", \"ixveriwave.info.bit7\",",
          "4195:         FT_UINT24, BASE_DEC, NULL, 0x000080, NULL, HFILL } },",
          "4196:     { &hf_radiotap_vw_info_rx_bit8,",
          "4197:         { \"ACK withheld from frame\", \"ixveriwave.info.bit8\",",
          "4198:         FT_UINT24, BASE_DEC, NULL, 0x000100, NULL, HFILL } },",
          "4199:     { &hf_radiotap_vw_info_rx_bit9,",
          "4200:         { \"Client BSSID matched\", \"ixveriwave.info.bit9\",",
          "4201:         FT_UINT24, BASE_DEC, NULL, 0x000200, NULL, HFILL } },",
          "4202:     { &hf_radiotap_vw_info_rx_bit10,",
          "4203:         { \"MPDU of an A-MPDU\", \"ixveriwave.info.bit10\",",
          "4204:         FT_UINT24, BASE_DEC, NULL, 0x000400, NULL, HFILL } },",
          "4206:     { &hf_radiotap_vw_info_rx_bit11,",
          "4207:         { \"First MPDU of A-MPDU\", \"ixveriwave.info.bit11\",",
          "4208:         FT_UINT24, BASE_DEC, NULL, 0x000800, NULL, HFILL } },",
          "4210:     { &hf_radiotap_vw_info_rx_bit12,",
          "4211:         { \"Last MPDU of A-MPDU\", \"ixveriwave.info.bit12\",",
          "4212:         FT_UINT24, BASE_DEC, NULL, 0x001000, NULL, HFILL } },",
          "4214:     { &hf_radiotap_vw_info_rx_bit13,",
          "4215:         { \"MSDU of A-MSDU\", \"ixveriwave.info.bit13\",",
          "4216:         FT_UINT24, BASE_DEC, NULL, 0x002000, NULL, HFILL } },",
          "4218:     { &hf_radiotap_vw_info_rx_bit14,",
          "4219:         { \"First MSDU of A-MSDU\", \"ixveriwave.info.bit14\",",
          "4220:         FT_UINT24, BASE_DEC, NULL, 0x004000, NULL, HFILL } },",
          "4222:     { &hf_radiotap_vw_info_rx_bit15,",
          "4223:         { \"Last MSDU of A-MSDU\", \"ixveriwave.info.bit15\",",
          "4224:         FT_UINT24, BASE_DEC, NULL, 0x008000, NULL, HFILL } },",
          "4225:     { &hf_radiotap_vw_info_rx_bit16,",
          "4226:         { \"Layer 1 Info[0]\", \"ixveriwave.info.bit16\",",
          "4227:         FT_UINT24, BASE_DEC, NULL, 0x010000, NULL, HFILL } },",
          "4229:     { &hf_radiotap_vw_info_rx_bit17,",
          "4230:         { \"Layer 1 Info[1]\", \"ixveriwave.info.bit17\",",
          "4231:         FT_UINT24, BASE_DEC, NULL, 0x020000, NULL, HFILL } },",
          "4233:     { &hf_radiotap_vw_info_rx_bit18,",
          "4234:         { \"VHT frame received with the use of the VHT_SIG_B.LENGTH\", \"ixveriwave.info.bit18\",",
          "4235:         FT_UINT24, BASE_DEC, NULL, 0x040000, NULL, HFILL } },",
          "4237:     { &hf_radiotap_vw_info_rx_bit19,",
          "4238:         { \"VHT frame received without the use of VHT_SIG_B.LENGTH\", \"ixveriwave.info.bit19\",",
          "4239:         FT_UINT24, BASE_DEC, NULL, 0x080000, NULL, HFILL } },",
          "4240:     { &hf_radiotap_vw_info_rx_bit20,",
          "4241:         { \"Factory Internal\", \"ixveriwave.info.bit20\",",
          "4242:         FT_UINT24, BASE_DEC, NULL, 0xf00000, NULL, HFILL } },",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1660:         &ett_radiotap_flags,",
          "1661:         &ett_radiotap_info,",
          "1662:         &ett_radiotap_times,",
          "1664:     };",
          "1666:     proto_ixveriwave = proto_register_protocol(\"ixveriwave\", \"ixveriwave\", \"ixveriwave\");",
          "1667:     proto_register_field_array(proto_ixveriwave, hf, array_length(hf));",
          "1668:     proto_register_subtree_array(ett, array_length(ett));",
          "1670:     ixveriwave_handle = register_dissector(\"ixveriwave\", dissect_ixveriwave, proto_ixveriwave);",
          "1671: }",
          "",
          "[Removed Lines]",
          "1663:         &ett_radiotap_errors",
          "",
          "[Added Lines]",
          "4286:         &ett_radiotap_errors,",
          "4287:         &ett_radiotap_layer1,",
          "4288:         &ett_radiotap_layer2to4,",
          "4289:         &ett_radiotap_rf,",
          "4290:         &ett_radiotap_plcp,",
          "4291:         &ett_radiotap_infoc,",
          "4292:         &ett_rf_info,",
          "4293:         &ett_radiotap_contextp,",
          "4296:    static ei_register_info ei[] = {",
          "4297:       { &ei_radiotap_fcs_bad, { \"ixveriwave.fcs_error\", PI_CHECKSUM, PI_WARN, \"FCS error\", EXPFILL } },",
          "4298:    };",
          "4300:     expert_module_t* expert_ixveriwave;",
          "4305:     expert_ixveriwave = expert_register_protocol(proto_ixveriwave);",
          "4306:     expert_register_field_array(expert_ixveriwave, ei, array_length(ei));",
          "",
          "---------------"
        ],
        "wiretap/vwr.c||wiretap/vwr.c": [
          "File: wiretap/vwr.c -> wiretap/vwr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: #define EXT_ETHERNET_FIELDS_LEN (2+2+2+4+4+4)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180: #define OCTO_TIMESTAMP_FIELDS_LEN   (4+4+8+8+4+4)",
          "182: #define OCTO_LAYER1TO4_LEN          (2+14+16+23)",
          "187: #define RF_PORT_1_NOISE_OFF         4",
          "188: #define RF_PORT_1_SNR_OFF           6",
          "189: #define RF_PORT_1_PFE_OFF           8",
          "190: #define RF_PORT_1_CONTEXT_OFF       10",
          "191: #define RF_PORT_1_EVM_SD_SIG_OFF    12",
          "192: #define RF_PORT_1_EVM_SP_SIG_OFF    14",
          "193: #define RF_PORT_1_EVM_SD_DATA_OFF   16",
          "194: #define RF_PORT_1_EVM_SP_DATA_OFF   18",
          "195: #define RF_PORT_1_DSYMBOL_IDX_OFF   22",
          "197: #define RF_NUMBER_OF_PORTS          4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: #define v22_E_HEADER_IS_RX  0x21",
          "263: #define v22_E_HEADER_IS_TX  0x31",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322:      v22_W_FIRST_MSDU_OF_A_MSDU | \\",
          "323:      v22_W_LAST_MSDU_OF_A_MSDU)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347: #define v22_W_HEADER_IS_RX  0x21",
          "348: #define v22_W_HEADER_IS_TX  0x31",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "389: #define vVW510021_W_MT_SEL_LEGACY       0x00",
          "391: #define vVW510021_W_IS_WEP              0x0001",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418: #define vVW510021_W_PLCP_LEGACY         0x00",
          "419: #define vVW510021_W_PLCP_MIXED          0x01",
          "420: #define vVW510021_W_PLCP_GREENFIELD     0x02",
          "421: #define vVW510021_W_PLCP_VHT_MIXED      0x03",
          "422: #define vVW510021_W_HEADER_IS_RX        0x21",
          "423: #define vVW510021_W_HEADER_IS_TX        0x31",
          "426: #define vVW510021_W_IS_LONGPREAMBLE     0x40",
          "427: #define vVW510021_W_HEADER_IS_RFN       0x30",
          "428: #define vVW510021_W_HEADER_IS_RF        0x38",
          "429: #define vVW510021_W_HEADER_IS_RFRX      0x39",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494: #define vVW510024_E_L4ID_VALID          0x1000",
          "495: #define vVW510024_E_CBW_MASK            0xC0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: #define vVW510024_E_HEADER_IS_RX        0x21",
          "539: #define vVW510024_E_HEADER_IS_TX        0x31",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "598:     guint32      FPGA_VERSION;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:     guint32      HEADER_IS_RX;",
          "643:     guint32      HEADER_IS_TX;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "606:     guint16      IS_QOS;",
          "607:     guint32      IS_VLAN;",
          "608:     guint32      MPDU_OFF;",
          "609: } vwr_t;",
          "613: static guint8       get_ofdm_rate(const guint8 *);",
          "614: static guint8       get_cck_rate(const guint8 *plcp);",
          "615: static void         setup_defaults(vwr_t *, guint16);",
          "",
          "[Removed Lines]",
          "612: static int          decode_msg(register guint8 *, int *, int *);",
          "",
          "[Added Lines]",
          "654:     guint32      HEADER_IS_RFN;",
          "655:     guint32      HEADER_IS_RF;",
          "656:     guint32      HEADER_IS_RXRF;",
          "657:     guint32      OCTO_VERSION;",
          "661: static int          decode_msg(vwr_t *vwr, register guint8 *, int *, int *, int *);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "618: static gboolean     vwr_seek_read(wtap *, gint64, struct wtap_pkthdr *phdr,",
          "619:                                   Buffer *, int *, gchar **);",
          "622: static gboolean     vwr_process_rec_data(FILE_T fh, int rec_size,",
          "623:                                          struct wtap_pkthdr *phdr, Buffer *buf,",
          "625:                                          gchar **err_info);",
          "627: static int          vwr_get_fpga_version(wtap *, int *, gchar **);",
          "629: static gboolean     vwr_read_s1_W_rec(vwr_t *, struct wtap_pkthdr *, Buffer *,",
          "630:                                       const guint8 *, int, int *, gchar **);",
          "634: static gboolean     vwr_read_rec_data_ethernet(vwr_t *, struct wtap_pkthdr *,",
          "635:                                                Buffer *, const guint8 *, int,",
          "636:                                                int, int *, gchar **);",
          "638: static int          find_signature(const guint8 *, int, int, register guint32, register guint8);",
          "639: static guint64      get_signature_ts(const guint8 *, int);",
          "640: static float        getRate( guint8 plcpType, guint8 mcsIndex, guint16 rflags, guint8 nss );",
          "",
          "[Removed Lines]",
          "621: static gboolean     vwr_read_rec_header(FILE_T, int *, int *, int *, gchar **);",
          "624:                                          vwr_t *vwr, int IS_TX, int *err,",
          "631: static gboolean     vwr_read_s2_s3_W_rec(vwr_t *, struct wtap_pkthdr *, Buffer *,",
          "632:                                          const guint8 *, int, int, int *,",
          "633:                                          gchar **);",
          "",
          "[Added Lines]",
          "670: static gboolean     vwr_read_rec_header(vwr_t *, FILE_T, int *, int *, int *, int *, gchar **);",
          "673:                                          vwr_t *vwr, int IS_TX, int log_mode, int *err,",
          "680: static gboolean     vwr_read_s2_W_rec(vwr_t *, struct wtap_pkthdr *, Buffer *,",
          "681:                                       const guint8 *, int, int, int, int *,",
          "682:                                       gchar **);",
          "684: static gboolean     vwr_read_s3_W_rec(vwr_t *, struct wtap_pkthdr *, Buffer *,",
          "685:                                       const guint8 *, int, int, int, int *,",
          "686:                                       gchar **);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "692: static gboolean vwr_read(wtap *wth, int *err, gchar **err_info, gint64 *data_offset)",
          "693: {",
          "694:     vwr_t *vwr      = (vwr_t *)wth->priv;",
          "",
          "[Removed Lines]",
          "695:     int    rec_size = 0, IS_TX;",
          "698:     if (!vwr_read_rec_header(wth->fh, &rec_size, &IS_TX, err, err_info))",
          "",
          "[Added Lines]",
          "747:     int    rec_size = 0, IS_TX, log_mode;",
          "750:     if (!vwr_read_rec_header(vwr, wth->fh, &rec_size, &IS_TX, &log_mode, err, err_info))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "708:     if (!vwr_process_rec_data(wth->fh, rec_size, &wth->phdr,",
          "710:        return FALSE;",
          "",
          "[Removed Lines]",
          "709:                               wth->frame_buffer, vwr, IS_TX, err, err_info))",
          "",
          "[Added Lines]",
          "761:                               wth->frame_buffer, vwr, IS_TX, log_mode, err, err_info))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "729:     struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info)",
          "730: {",
          "731:     vwr_t *vwr = (vwr_t *)wth->priv;",
          "735:     if (file_seek(wth->random_fh, seek_off, SEEK_SET, err) == -1)",
          "736:         return FALSE;",
          "742:     return vwr_process_rec_data(wth->random_fh, rec_size, phdr, buf,",
          "744: }",
          "",
          "[Removed Lines]",
          "732:     int    rec_size, IS_TX;",
          "739:     if (!vwr_read_rec_header(wth->random_fh, &rec_size, &IS_TX, err, err_info))",
          "743:                                 vwr, IS_TX, err, err_info);",
          "",
          "[Added Lines]",
          "784:     int    rec_size, IS_TX, log_mode;",
          "791:     if (!vwr_read_rec_header(vwr, wth->random_fh, &rec_size, &IS_TX, &log_mode, err, err_info))",
          "795:                                 vwr, IS_TX, log_mode, err, err_info);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "752: {",
          "753:     int     f_len, v_type;",
          "754:     guint8  header[VW_RECORD_HEADER_LENGTH];",
          "",
          "[Removed Lines]",
          "751: static gboolean vwr_read_rec_header(FILE_T fh, int *rec_size, int *IS_TX, int *err, gchar **err_info)",
          "",
          "[Added Lines]",
          "803: static gboolean vwr_read_rec_header(vwr_t *vwr, FILE_T fh, int *rec_size, int *IS_TX, int *log_mode, int *err, gchar **err_info)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "772:             if (f_len > B_SIZE) {",
          "",
          "[Removed Lines]",
          "771:         if ((f_len = decode_msg(header, &v_type, IS_TX)) != 0) {",
          "",
          "[Added Lines]",
          "823:         if ((f_len = decode_msg(vwr, header, &v_type, IS_TX, log_mode)) != 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "799:     guint8  *s_510006_ptr = NULL;",
          "800:     guint8  *s_510024_ptr = NULL;",
          "803:     guint32  frame_type   = 0;",
          "804:     int      f_len, v_type;",
          "805:     guint16  data_length  = 0;",
          "",
          "[Removed Lines]",
          "802:     gint64   filePos;",
          "",
          "[Added Lines]",
          "854:     gint64   filePos = -1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "830:             if (f_len > B_SIZE) {",
          "831:                 g_free(rec);",
          "",
          "[Removed Lines]",
          "829:         if ((f_len = decode_msg(header, &v_type, NULL)) != 0) {",
          "",
          "[Added Lines]",
          "881:         if ((f_len = decode_msg(NULL, header, &v_type, NULL, NULL)) != 0) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1115:     phdr->ts.secs   = (time_t)s_sec;",
          "1116:     phdr->ts.nsecs  = (int)(s_usec * 1000);",
          "",
          "[Removed Lines]",
          "1112:     phdr->len = STATS_COMMON_FIELDS_LEN + EXT_WLAN_FIELDS_LEN + 1 + 16 + actual_octets;",
          "1113:     phdr->caplen = STATS_COMMON_FIELDS_LEN + EXT_WLAN_FIELDS_LEN + 1 + 16 + actual_octets;",
          "",
          "[Added Lines]",
          "1164:     phdr->len = STATS_COMMON_FIELDS_LEN + EXT_WLAN_FIELDS_LEN + actual_octets;",
          "1165:     phdr->caplen = STATS_COMMON_FIELDS_LEN + EXT_WLAN_FIELDS_LEN + actual_octets;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1134:     bytes_written += 2;",
          "1135:     phtoles(&data_ptr[bytes_written], msdu_length);",
          "",
          "[Removed Lines]",
          "1132:     bytes_written += 2;",
          "",
          "[Added Lines]",
          "1184:     bytes_written += 1;",
          "1186:     bytes_written += 1;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1218:     phtolel(&data_ptr[bytes_written], errors);",
          "1219:     bytes_written += 4;",
          "",
          "[Removed Lines]",
          "1227:     data_ptr[bytes_written] = 0;",
          "1228:     bytes_written += 1;",
          "1233:     memset(&data_ptr[bytes_written], 0, 16);",
          "1234:     bytes_written += 16;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1246: }",
          "1250:                                      Buffer *buf, const guint8 *rec, int rec_size,",
          "1252: {",
          "1253:     guint8           *data_ptr;",
          "",
          "[Removed Lines]",
          "1249: static gboolean vwr_read_s2_s3_W_rec(vwr_t *vwr, struct wtap_pkthdr *phdr,",
          "1251:                                      int IS_TX, int *err, gchar **err_info)",
          "",
          "[Added Lines]",
          "1288: static gboolean vwr_read_s2_W_rec(vwr_t *vwr, struct wtap_pkthdr *phdr,",
          "1290:                                      int IS_TX, int log_mode _U_, int *err, gchar **err_info)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1276:     guint16          phyRate;",
          "",
          "[Removed Lines]",
          "1278:     guint8           vht_ndp_flag = 0;",
          "",
          "[Added Lines]",
          "1317:     guint8           L1InfoC,vht_ndp_flag = 0;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1323:         rssi[2] = 100;",
          "1324:         rssi[3] = 100;",
          "1329:         plcp_ptr = &(rec[8]);",
          "1330:     }",
          "1331:     else",
          "1332:     {",
          "1335:         plcp_type = vVW510021_W_S3_PLCP_TYPE(l1p_2);",
          "1336:         if (plcp_type == vVW510021_W_PLCP_VHT_MIXED)",
          "1337:         {",
          "1339:             mcs_index = vVW510021_W_S3_MCS_INDEX_VHT(l1p_1);",
          "1341:         }",
          "1343:         {",
          "1347:         }",
          "1350:         if (!IS_TX){",
          "1352:         }",
          "1354:         msdu_length = pntoh24(&s_start_ptr[9]);",
          "",
          "[Removed Lines]",
          "1326:         nss = 0;",
          "1334:         radioflags |= FLAGS_FCS;",
          "1340:             nss = vVW510021_W_S3_NSS_VHT(l1p_1);",
          "1342:         else",
          "1345:             mcs_index = vVW510021_W_S3_MCS_INDEX_HT(l1p_1);",
          "1346:             nss = 0;",
          "1351:             vht_ndp_flag = s_start_ptr[8];",
          "",
          "[Added Lines]",
          "1366:         nss = (mcs_index / 8) + 1;",
          "1379:             plcp_hdr_flag = 1;",
          "1383:             mcs_index = l1p_1 & 0x3f;",
          "1384:             nss = (mcs_index / 8) + 1;",
          "1389:             L1InfoC = s_start_ptr[8];",
          "1390:             vht_ndp_flag = L1InfoC & 0x80;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1371:         plcp_ptr = &(rec[16]);",
          "1372:     }",
          "1373:     actual_octets = msdu_length;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1415:     if (plcp_hdr_flag == 1) {",
          "1417:         actual_octets = actual_octets + 17;",
          "1418:     }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1488:             radioflags |= FLAGS_CHAN_80MHZ;",
          "1489:     }",
          "1493:     s_time = pcoreytohll(&s_trail_ptr[vVW510021_W_STARTT_OFF]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1545:     if (actual_octets < 4) {",
          "1547:                                     actual_octets);",
          "1549:         return FALSE;",
          "1550:     }",
          "1551:     if (actual_octets > 4) {",
          "1552:         actual_octets -= 4;",
          "1553:     }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1545:     if (phdr->caplen > WTAP_MAX_PACKET_SIZE) {",
          "",
          "[Removed Lines]",
          "1543:     phdr->len = STATS_COMMON_FIELDS_LEN + EXT_WLAN_FIELDS_LEN + 1 + 16 + actual_octets;",
          "1544:     phdr->caplen = STATS_COMMON_FIELDS_LEN + EXT_WLAN_FIELDS_LEN + 1 + 16 + actual_octets;",
          "",
          "[Added Lines]",
          "1600:     phdr->len = STATS_COMMON_FIELDS_LEN + EXT_WLAN_FIELDS_LEN + actual_octets;",
          "1601:     phdr->caplen = STATS_COMMON_FIELDS_LEN + EXT_WLAN_FIELDS_LEN + actual_octets;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1577:     bytes_written += 2;",
          "1578:     phtoles(&data_ptr[bytes_written], msdu_length);",
          "",
          "[Removed Lines]",
          "1575:     bytes_written += 2;",
          "",
          "[Added Lines]",
          "1632:     bytes_written += 1;",
          "1634:     bytes_written += 1;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1607:     bytes_written += 2;",
          "1608:     if (info & vVW510021_W_IS_WEP)",
          "1609:         radioflags |= FLAGS_WEP;",
          "1611:         radioflags |= FLAGS_SHORTPRE;",
          "1612:     phtoles(&data_ptr[bytes_written], radioflags);",
          "1613:     bytes_written += 2;",
          "",
          "[Removed Lines]",
          "1610:     if (!(l1p_1 & vVW510021_W_IS_LONGPREAMBLE) && (plcp_type == vVW510021_W_PLCP_LEGACY))",
          "",
          "[Added Lines]",
          "1669:     if ((l1p_1 & vVW510021_W_PREAMBLE_MASK) != vVW510021_W_IS_LONGPREAMBLE && (plcp_type == vVW510021_W_PLCP_LEGACY))",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1669:     phtolel(&data_ptr[bytes_written], errors);",
          "1670:     bytes_written += 4;",
          "1697:     memcpy(&data_ptr[bytes_written], &rec[vwr->MPDU_OFF], actual_octets);",
          "1699:     return TRUE;",
          "1700: }",
          "1711: {",
          "1712:     guint8           *data_ptr;",
          "1739:     }",
          "1761:     }",
          "1780:     }",
          "1788:     }",
          "1794: #if 0",
          "1798: #endif",
          "1800:     l4id = pntoh16(&s_ptr[vwr->L4ID_OFF]);",
          "",
          "[Removed Lines]",
          "1676:     if (!IS_TX){",
          "1677:       data_ptr[bytes_written] = vht_ndp_flag;",
          "1678:     } else {",
          "1679:       data_ptr[bytes_written] = 0;",
          "1680:     }",
          "1681:     bytes_written += 1;",
          "1690:     memcpy(&data_ptr[bytes_written], &rec[16], 16);",
          "1691:     bytes_written += 16;",
          "1707: static gboolean vwr_read_rec_data_ethernet(vwr_t *vwr, struct wtap_pkthdr *phdr,",
          "1708:                                            Buffer *buf, const guint8 *rec,",
          "1709:                                            int rec_size, int IS_TX, int *err,",
          "1710:                                            gchar **err_info)",
          "1719:     guint32          latency = 0;",
          "1722:     guint            l4id;",
          "1724:     guint32          errors;",
          "1735:     if ((guint)rec_size < vwr->STATS_LEN) {",
          "1738:         return FALSE;",
          "1746:     msdu_length = pntoh16(&s_ptr[vwr->OCTET_OFF]);",
          "1747:     actual_octets = msdu_length;",
          "1756:     if (actual_octets > rec_size - vwr->STATS_LEN) {",
          "1758:                                     actual_octets);",
          "1760:         return FALSE;",
          "1768:     vc_id = pntoh16(&s_ptr[vwr->VCID_OFF]) & vwr->VCID_MASK;",
          "1769:     flow_seq   = s_ptr[vwr->FLOWSEQ_OFF];",
          "1770:     frame_type = pntoh32(&s_ptr[vwr->FRAME_TYPE_OFF]);",
          "1772:     if (vwr->FPGA_VERSION == vVW510024_E_FPGA) {",
          "1773:         validityBits = pntoh16(&s_ptr[vwr->VALID_OFF]);",
          "1774:         f_flow = validityBits & vwr->FLOW_VALID;",
          "1779:         errors = pntoh16(&s_ptr[vwr->ERRORS_OFF]);",
          "1781:     else {",
          "1782:         f_flow  = s_ptr[vwr->VALID_OFF] & vwr->FLOW_VALID;",
          "1787:         errors = pntoh16(&s_ptr[vwr->ERRORS_OFF]);",
          "1790:     info = pntoh16(&s_ptr[vwr->INFO_OFF]);",
          "1792:     flow_id = pntoh24(&s_ptr[vwr->FLOWID_OFF]);",
          "1797:     tsid = pcorey48tohll(&s_ptr[vwr->LATVAL_OFF]);",
          "",
          "[Added Lines]",
          "1733:     if (plcp_hdr_flag == 1) {",
          "1735:         data_ptr[bytes_written] = L1InfoC;",
          "1736:         bytes_written += 1;",
          "1737:         memcpy(&data_ptr[bytes_written], &rec[16], 16);",
          "1738:         bytes_written += 16;",
          "1739:     }",
          "1750: static gboolean vwr_read_s3_W_rec(vwr_t *vwr, struct wtap_pkthdr *phdr,",
          "1751:                                  Buffer *buf, const guint8 *rec, int rec_size,",
          "1752:                                   int IS_TX, int log_mode, int *err, gchar **err_info)",
          "1762:     guint64          latency = LL_ZERO;",
          "1766:     guint32          errors = 0;",
          "1773:     guint8           L1InfoC,port_type,ver_fpga = 0;",
          "1775:     const guint8    *rf_ptr = NULL;",
          "1783:         if ((guint)rec_size < OCTO_MODIFIED_RF_LEN) {",
          "1785:                                         rec_size,",
          "1786:                                         OCTO_MODIFIED_RF_LEN);",
          "1788:             return FALSE;",
          "1789:         }",
          "1791:         rf_ptr = &(rec[0]);",
          "1792:         rf_id = rf_ptr[0];",
          "1795:         phdr->caplen = OCTO_MODIFIED_RF_LEN + 1;",
          "1797:         phdr->ts.secs   = (time_t)s_sec;",
          "1798:         phdr->ts.nsecs  = (int)(s_usec * 1000);",
          "1799:         phdr->pkt_encap = WTAP_ENCAP_IXVERIWAVE;",
          "1801:         phdr->rec_type = REC_TYPE_PACKET;",
          "1802:         phdr->presence_flags = WTAP_HAS_TS;",
          "1804:         ws_buffer_assure_space(buf, phdr->caplen);",
          "1805:         data_ptr = ws_buffer_start_ptr(buf);",
          "1807:         port_type = IS_TX << 4;",
          "1809:     else {",
          "1810:         if ((guint)rec_size < vwr->MPDU_OFF + vVW510021_W_STATS_TRAILER_LEN) {",
          "1812:                                         rec_size,",
          "1813:                                         vwr->MPDU_OFF + vVW510021_W_STATS_TRAILER_LEN);",
          "1815:             return FALSE;",
          "1816:         }",
          "1825:         {",
          "1826:             j = OCTO_RF_MOD_ACTUAL_LEN;",
          "1827:             rf_ptr = &(rec[0]);",
          "1828:             rf_id = rf_ptr[0];",
          "1829:         }",
          "1830:         else",
          "1831:         {",
          "1832:             j = 0;",
          "1833:         }",
          "1839:         l1p_1 = s_start_ptr[vVW510021_W_L1P_1_OFF];",
          "1840:         l1p_2 = s_start_ptr[vVW510021_W_L1P_2_OFF];",
          "1843:         plcp_type = vVW510021_W_S3_PLCP_TYPE(l1p_2);",
          "1845:         {",
          "1846:             mcs_index = vVW510021_W_S3_MCS_INDEX_VHT(l1p_1);",
          "1848:             plcp_hdr_flag = 1;",
          "1849:         }",
          "1850:         else",
          "1851:         {",
          "1852:             mcs_index = l1p_1 & 0x3f;",
          "1853:             if (plcp_type == vVW510021_W_PLCP_LEGACY)",
          "1854:                 nss = 0;",
          "1856:                 nss = (mcs_index / 8) + 1;",
          "1857:         }",
          "1859:         if (IS_TX == 0 || IS_TX == 4){",
          "1860:             L1InfoC = s_start_ptr[8];",
          "1861:         }",
          "1863:         msdu_length = pntoh24(&s_start_ptr[9]);",
          "1864:         for (i = 0; i < 4; i++)",
          "1865:         {",
          "1866:             if (IS_TX == 1)",
          "1867:             {",
          "1868:                 rssi[i] = (s_start_ptr[4+i] & 0x80) ? -1 * (s_start_ptr[4+i] & 0x7f) : s_start_ptr[4+i] & 0x7f;",
          "1869:             }",
          "1870:             else",
          "1871:             {",
          "1872:                 rssi[i] = (s_start_ptr[4+i] >= 128) ? (s_start_ptr[4+i] - 256) : s_start_ptr[4+i];",
          "1873:             }",
          "1874:         }",
          "1876:         plcp_ptr = &(rec[j+16]);",
          "1879:         if (log_mode == 3) {",
          "1880:             frame_size = rec_size - 80 -j;",
          "1881:             if (frame_size > ((int) msdu_length))",
          "1882:                 actual_octets = msdu_length;",
          "1883:             else",
          "1884:                 actual_octets = frame_size;",
          "1885:         }",
          "1886:         else",
          "1887:         {",
          "1888:             actual_octets = msdu_length;",
          "1889:         }",
          "1898:         if (actual_octets > rec_size - (vwr->MPDU_OFF + vVW510021_W_STATS_TRAILER_LEN)) {",
          "1900:                                         actual_octets);",
          "1902:             return FALSE;",
          "1903:         }",
          "1905:         flow_seq = s_trail_ptr[vVW510021_W_FLOWSEQ_OFF];",
          "1911:         tsid = pcorey48tohll(&s_trail_ptr[vVW510021_W_LATVAL_OFF]);",
          "1913:         errors = pntoh32(&s_trail_ptr[vVW510021_W_ERRORS_OFF]);",
          "1914:         info = pntoh16(&s_trail_ptr[vVW510021_W_INFO_OFF]);",
          "1916:         if (IS_TX == 0 || IS_TX == 4)",
          "1917:             info_2nd = s_trail_ptr[41];",
          "1923:         if (plcp_type == vVW510021_W_PLCP_MIXED)",
          "1924:         {",
          "1925:             radioflags |= FLAGS_CHAN_HT | ((plcp_ptr[3] & 0x80) ? FLAGS_CHAN_40MHZ : 0) |",
          "1926:                                ((l1p_1 & 0x40) ? 0 : FLAGS_CHAN_SHORTGI);",
          "1927:         }",
          "1928:         else",
          "1929:         {",
          "1930:             if (plcp_type == vVW510021_W_PLCP_GREENFIELD)",
          "1931:             {",
          "1932:                 radioflags |= FLAGS_CHAN_HT | ((plcp_ptr[0] & 0x80) ? FLAGS_CHAN_40MHZ : 0) |",
          "1933:                                ((l1p_1 & 0x40) ?  0 : FLAGS_CHAN_SHORTGI);",
          "1934:             }",
          "1935:             else",
          "1936:             {",
          "1937:                 if (plcp_type == vVW510021_W_PLCP_VHT_MIXED) {",
          "1938:                     guint8 SBW = vVW510021_W_BANDWIDTH_VHT(l1p_2);",
          "1939:                     radioflags |= FLAGS_CHAN_VHT | ((l1p_1 & 0x40) ?  0 : FLAGS_CHAN_SHORTGI);",
          "1940:                     if (SBW == 3)",
          "1941:                         radioflags |= FLAGS_CHAN_40MHZ;",
          "1942:                     else if (SBW == 4)",
          "1943:                         radioflags |= FLAGS_CHAN_80MHZ;",
          "1944:                  }",
          "1945:             }",
          "1946:         }",
          "1947:         if (info & vVW510021_W_IS_WEP)",
          "1948:             radioflags |= FLAGS_WEP;",
          "1949:         if ((l1p_1 & vVW510021_W_PREAMBLE_MASK) != vVW510021_W_IS_LONGPREAMBLE && (plcp_type == vVW510021_W_PLCP_LEGACY))",
          "1950:             radioflags |= FLAGS_SHORTPRE;",
          "1952:         phyRate = (guint16)(getRate(plcp_type, mcs_index, radioflags, nss) * 10);",
          "1964:         if (actual_octets < 4) {",
          "1966:                                          actual_octets);",
          "1968:             return FALSE;",
          "1969:         }",
          "1975:         if (log_mode == 3) {",
          "1976:             if (actual_octets > 4 && (frame_size >= (int) msdu_length))",
          "1977:                 actual_octets -=4;",
          "1978:             ver_fpga = 0x11;",
          "1979:         }",
          "1980:         else {",
          "1981:             if (actual_octets > 4)",
          "1982:                 actual_octets -= 4;",
          "1983:             ver_fpga = 0x01;",
          "1984:         }",
          "1988:         s_time = pcoreytohll(&s_trail_ptr[vVW510021_W_STARTT_OFF]);",
          "1989:         e_time = pcoreytohll(&s_trail_ptr[vVW510021_W_ENDT_OFF]);",
          "2003:         m_ptr = &(rec[j+8+12]);",
          "2005:         sig_off = find_signature(m_ptr, rec_size - 20, pay_off, flow_id, flow_seq);",
          "2006:         if ((m_ptr[sig_off] == 0xdd) && (sig_off + 15 <= (rec_size - vVW510021_W_STATS_TRAILER_LEN)))",
          "2007:             sig_ts = get_signature_ts(m_ptr, sig_off);",
          "2008:         else",
          "2009:             sig_ts = 0;",
          "2012:         if (IS_TX == 0 || IS_TX == 4) {",
          "2013:             if (tsid < s_time) {",
          "2014:                 latency = s_time - tsid;",
          "2015:             } else {",
          "2018:                 delta_b = tsid - s_time;",
          "2019:                 if (delta_b >  0x10000000)",
          "2020:                     latency = 0;",
          "2021:                 else",
          "2022:                     latency = delta_b;",
          "2023:             }",
          "2024:         }",
          "2026:         nss = nss << 4;",
          "2027:         nss |= IS_TX;",
          "2028:         port_type = IS_TX << 4;",
          "2034:         if (IS_TX == 4) {",
          "2035:             phdr->len = OCTO_MODIFIED_RF_LEN + OCTO_TIMESTAMP_FIELDS_LEN + OCTO_LAYER1TO4_LEN + actual_octets;",
          "2036:             phdr->caplen = OCTO_MODIFIED_RF_LEN + OCTO_TIMESTAMP_FIELDS_LEN + OCTO_LAYER1TO4_LEN + actual_octets;",
          "2037:         } else {",
          "2038:             phdr->len = OCTO_TIMESTAMP_FIELDS_LEN + OCTO_LAYER1TO4_LEN + actual_octets;",
          "2039:             phdr->caplen = OCTO_TIMESTAMP_FIELDS_LEN + OCTO_LAYER1TO4_LEN + actual_octets;",
          "2040:         }",
          "2042:         phdr->ts.secs   = (time_t)s_sec;",
          "2043:         phdr->ts.nsecs  = (int)(s_usec * 1000);",
          "2044:         phdr->pkt_encap = WTAP_ENCAP_IXVERIWAVE;",
          "2046:         phdr->rec_type = REC_TYPE_PACKET;",
          "2047:         phdr->presence_flags = WTAP_HAS_TS;",
          "2049:         ws_buffer_assure_space(buf, phdr->caplen);",
          "2050:         data_ptr = ws_buffer_start_ptr(buf);",
          "2051:     }",
          "2061:     bytes_written += 1;",
          "2063:     if (IS_TX != 3) {",
          "2065:         bytes_written += 1;",
          "2068:         bytes_written += 2;",
          "2071:         if (IS_TX == 1 && sig_ts != 0) {",
          "2072:             phtolel(&data_ptr[bytes_written], latency);",
          "2073:         } else {",
          "2074:             phtolel(&data_ptr[bytes_written], 0);",
          "2075:         }",
          "2076:         bytes_written += 4;",
          "2078:         bytes_written += 4;",
          "2080:         bytes_written += 8;",
          "2081:         phtolell(&data_ptr[bytes_written], end_time);",
          "2082:         bytes_written += 8;",
          "2083:         phtolel(&data_ptr[bytes_written], d_time);",
          "2084:         bytes_written += 4;",
          "2089:     if (IS_TX == 3 || IS_TX == 4) {",
          "2090:         phtole8(&data_ptr[bytes_written], rf_id);",
          "2091:         bytes_written += 1;",
          "2092:         data_ptr[bytes_written] = 0;",
          "2093:         bytes_written += 1;",
          "2094:         data_ptr[bytes_written] = 0;",
          "2095:         bytes_written += 1;",
          "2096:         data_ptr[bytes_written] = 0;",
          "2097:         bytes_written += 1;",
          "2100:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2101:         {",
          "2102:             if (pntoh16(&rf_ptr[RF_PORT_1_NOISE_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2103:                 phtoles(&data_ptr[bytes_written], 0);",
          "2104:                 bytes_written += 2;",
          "2105:             } else {",
          "2106:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_NOISE_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2107:                 bytes_written += 1;",
          "2108:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_NOISE_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2109:                 bytes_written += 1;",
          "2110:             }",
          "2111:         }",
          "2114:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2115:         {",
          "2116:             if (pntoh16(&rf_ptr[RF_PORT_1_SNR_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2117:                 phtoles(&data_ptr[bytes_written], 0);",
          "2118:                 bytes_written += 2;",
          "2119:             } else {",
          "2120:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_SNR_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2121:                 bytes_written += 1;",
          "2122:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_SNR_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2123:                 bytes_written += 1;",
          "2124:             }",
          "2125:         }",
          "2128:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2129:         {",
          "2130:             if (pntoh16(&rf_ptr[RF_PORT_1_PFE_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2131:                 phtoles(&data_ptr[bytes_written], 0);",
          "2132:                 bytes_written += 2;",
          "2133:             } else {",
          "2134:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_PFE_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2135:                 bytes_written += 1;",
          "2136:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_PFE_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2137:                 bytes_written += 1;",
          "2138:             }",
          "2139:         }",
          "2142:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2143:         {",
          "2144:             if (pntoh16(&rf_ptr[RF_PORT_1_EVM_SD_SIG_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2145:                 phtoles(&data_ptr[bytes_written], 0);",
          "2146:                 bytes_written += 2;",
          "2147:             } else {",
          "2148:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_EVM_SD_SIG_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2149:                 bytes_written += 1;",
          "2150:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_EVM_SD_SIG_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2151:                 bytes_written += 1;",
          "2152:             }",
          "2153:         }",
          "2156:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2157:         {",
          "2158:             if (pntoh16(&rf_ptr[RF_PORT_1_EVM_SP_SIG_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2159:                 phtoles(&data_ptr[bytes_written], 0);",
          "2160:                 bytes_written += 2;",
          "2161:             } else {",
          "2162:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_EVM_SP_SIG_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2163:                 bytes_written += 1;",
          "2164:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_EVM_SP_SIG_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2165:                 bytes_written += 1;",
          "2166:             }",
          "2167:         }",
          "2170:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2171:         {",
          "2172:             if (pntoh16(&rf_ptr[RF_PORT_1_EVM_SD_DATA_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2173:                 phtoles(&data_ptr[bytes_written], 0);",
          "2174:                 bytes_written += 2;",
          "2175:             } else {",
          "2176:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_EVM_SD_DATA_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2177:                 bytes_written += 1;",
          "2178:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_EVM_SD_DATA_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2179:                 bytes_written += 1;",
          "2180:             }",
          "2181:         }",
          "2184:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2185:         {",
          "2186:             if (pntoh16(&rf_ptr[RF_PORT_1_EVM_SP_DATA_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2187:                 phtoles(&data_ptr[bytes_written], 0);",
          "2188:                 bytes_written += 2;",
          "2189:             } else {",
          "2190:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_EVM_SP_DATA_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2191:                 bytes_written += 1;",
          "2192:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_EVM_SP_DATA_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2193:                 bytes_written += 1;",
          "2194:             }",
          "2195:         }",
          "2198:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2199:         {",
          "2200:             if (pntoh16(&rf_ptr[RF_PORT_1_DSYMBOL_IDX_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2201:                 phtoles(&data_ptr[bytes_written], 0);",
          "2202:                 bytes_written += 2;",
          "2203:             } else {",
          "2204:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_DSYMBOL_IDX_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2205:                 bytes_written += 1;",
          "2206:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_DSYMBOL_IDX_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2207:                 bytes_written += 1;",
          "2208:             }",
          "2209:         }",
          "2212:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2213:         {",
          "2214:             if (pntoh16(&rf_ptr[RF_PORT_1_CONTEXT_OFF+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2215:                 phtoles(&data_ptr[bytes_written], 0);",
          "2216:                 bytes_written += 2;",
          "2217:             } else {",
          "2218:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_CONTEXT_OFF+i*RF_INTER_PORT_GAP_OFF];",
          "2219:                 bytes_written += 1;",
          "2220:                 data_ptr[bytes_written] = rf_ptr[RF_PORT_1_CONTEXT_OFF+1+i*RF_INTER_PORT_GAP_OFF];",
          "2221:                 bytes_written += 1;",
          "2222:             }",
          "2223:         }",
          "2227:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2228:         {",
          "2229:             if (pntoh16(&rf_ptr[20+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2230:                 phtoles(&data_ptr[bytes_written], 0);",
          "2231:                 bytes_written += 2;",
          "2232:             } else {",
          "2233:                 data_ptr[bytes_written] = rf_ptr[20+i*RF_INTER_PORT_GAP_OFF];",
          "2234:                 bytes_written += 1;",
          "2235:                 data_ptr[bytes_written] = rf_ptr[21+i*RF_INTER_PORT_GAP_OFF];",
          "2236:                 bytes_written += 1;",
          "2237:             }",
          "2238:         }",
          "2239:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2240:         {",
          "2241:             if (pntoh16(&rf_ptr[24+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2242:                 phtoles(&data_ptr[bytes_written], 0);",
          "2243:                 bytes_written += 2;",
          "2244:             } else {",
          "2245:                 data_ptr[bytes_written] = rf_ptr[24+i*RF_INTER_PORT_GAP_OFF];",
          "2246:                 bytes_written += 1;",
          "2247:                 data_ptr[bytes_written] = rf_ptr[25+i*RF_INTER_PORT_GAP_OFF];",
          "2248:                 bytes_written += 1;",
          "2249:             }",
          "2250:         }",
          "2251:         for (i = 0; i < RF_NUMBER_OF_PORTS; i++)",
          "2252:         {",
          "2253:             if (pntoh16(&rf_ptr[26+i*RF_INTER_PORT_GAP_OFF]) == 0) {",
          "2254:                 phtoles(&data_ptr[bytes_written], 0);",
          "2255:                 bytes_written += 2;",
          "2256:             } else {",
          "2257:                 data_ptr[bytes_written] = rf_ptr[26+i*RF_INTER_PORT_GAP_OFF];",
          "2258:                 bytes_written += 1;",
          "2259:                 data_ptr[bytes_written] = rf_ptr[27+i*RF_INTER_PORT_GAP_OFF];",
          "2260:                 bytes_written += 1;",
          "2261:             }",
          "2262:         }",
          "2267:     if (IS_TX != 3) {",
          "2273:         phtoles(&data_ptr[bytes_written], OCTO_LAYER1TO4_LEN);",
          "2274:         bytes_written += 2;",
          "2277:         data_ptr[bytes_written] = l1p_1;",
          "2278:         bytes_written += 1;",
          "2280:         data_ptr[bytes_written] = nss;",
          "2281:         bytes_written += 1;",
          "2284:         bytes_written += 2;",
          "2286:         data_ptr[bytes_written] = l1p_2;",
          "2287:         bytes_written += 1;",
          "2289:         data_ptr[bytes_written] = rssi[0];",
          "2290:         bytes_written += 1;",
          "2291:         data_ptr[bytes_written] = rssi[1];",
          "2292:         bytes_written += 1;",
          "2293:         data_ptr[bytes_written] = rssi[2];",
          "2294:         bytes_written += 1;",
          "2295:         data_ptr[bytes_written] = rssi[3];",
          "2296:         bytes_written += 1;",
          "2301:         bytes_written += 1;",
          "2303:         bytes_written += 1;",
          "2305:         if (plcp_hdr_flag == 1 && (IS_TX == 0 || IS_TX == 4)) {",
          "2307:         } else {",
          "2309:         }",
          "2310:         bytes_written += 1;",
          "2312:         phtoles(&data_ptr[bytes_written], msdu_length);",
          "2313:         bytes_written += 2;",
          "2317:         memcpy(&data_ptr[bytes_written], &rec[j+16], 16);",
          "2318:         bytes_written += 16;",
          "2324:         bytes_written += 4;",
          "2326:         bytes_written += 2;",
          "2327:         data_ptr[bytes_written] = flow_seq;",
          "2328:         bytes_written += 1;",
          "2329:         phtole24(&data_ptr[bytes_written], flow_id);",
          "2330:         bytes_written += 3;",
          "2332:         bytes_written += 2;",
          "2334:         bytes_written += 4;",
          "2337:         if (IS_TX == 0 || IS_TX == 4) {",
          "2338:             phtoles(&data_ptr[bytes_written], info);",
          "2339:             bytes_written += 2;",
          "2340:             data_ptr[bytes_written] = info_2nd;",
          "2341:             bytes_written += 1;",
          "2342:         }",
          "2343:         else {",
          "2344:             phtoles(&data_ptr[bytes_written], info);",
          "2345:             bytes_written += 2;",
          "2346:             data_ptr[bytes_written] = 0;",
          "2347:             bytes_written += 1;",
          "2348:         }",
          "2350:         phtolel(&data_ptr[bytes_written], errors);",
          "2351:         bytes_written += 4;",
          "2359:         memcpy(&data_ptr[bytes_written], &rec[j+(vwr->MPDU_OFF)], actual_octets);",
          "2362:     return TRUE;",
          "2363: }",
          "2369: static gboolean vwr_read_rec_data_ethernet(vwr_t *vwr, struct wtap_pkthdr *phdr,",
          "2370:                                             Buffer *buf, const guint8 *rec,",
          "2371:                                             int rec_size, int IS_TX, int *err,",
          "2372:                                             gchar **err_info)",
          "2373: {",
          "2374:      guint8           *data_ptr;",
          "2381:      guint32          latency = 0;",
          "2384:      guint            l4id;",
          "2386:      guint32          errors;",
          "2397:      if ((guint)rec_size < vwr->STATS_LEN) {",
          "2400:          return FALSE;",
          "2401:      }",
          "2408:      msdu_length = pntoh16(&s_ptr[vwr->OCTET_OFF]);",
          "2409:      actual_octets = msdu_length;",
          "2418:      if (actual_octets > rec_size - vwr->STATS_LEN) {",
          "2420:                                      actual_octets);",
          "2422:          return FALSE;",
          "2423:      }",
          "2425:      vc_id = pntoh16(&s_ptr[vwr->VCID_OFF]) & vwr->VCID_MASK;",
          "2426:      flow_seq   = s_ptr[vwr->FLOWSEQ_OFF];",
          "2427:      frame_type = pntoh32(&s_ptr[vwr->FRAME_TYPE_OFF]);",
          "2429:      if (vwr->FPGA_VERSION == vVW510024_E_FPGA) {",
          "2430:          validityBits = pntoh16(&s_ptr[vwr->VALID_OFF]);",
          "2431:          f_flow = validityBits & vwr->FLOW_VALID;",
          "2436:          errors = pntoh16(&s_ptr[vwr->ERRORS_OFF]);",
          "2437:      }",
          "2438:      else {",
          "2439:          f_flow  = s_ptr[vwr->VALID_OFF] & vwr->FLOW_VALID;",
          "2444:          errors = pntoh16(&s_ptr[vwr->ERRORS_OFF]);",
          "2445:      }",
          "2447:      info = pntoh16(&s_ptr[vwr->INFO_OFF]);",
          "2449:      flow_id = pntoh24(&s_ptr[vwr->FLOWID_OFF]);",
          "2454:      tsid = pcorey48tohll(&s_ptr[vwr->LATVAL_OFF]);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1905:     phtoles(&data_ptr[bytes_written], STATS_COMMON_FIELDS_LEN);",
          "1906:     bytes_written += 2;",
          "1907:     phtoles(&data_ptr[bytes_written], msdu_length);",
          "",
          "[Removed Lines]",
          "1903:     phtoles(&data_ptr[bytes_written], ETHERNET_PORT);",
          "1904:     bytes_written += 2;",
          "",
          "[Added Lines]",
          "2561:     bytes_written += 1;",
          "2563:     bytes_written += 1;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1969: {",
          "1971:     guint32 wd2, wd3;",
          "1981:     switch (cmd) {",
          "1982:         case COMMAND_RX:",
          "1985:             v_size  = (int)(wd2 & 0xffff);",
          "1987:             break;",
          "1992:             v_size  = (int)(wd2 & 0xffff);",
          "1994:             break;",
          "1996:         case 0xc1:",
          "1997:         case 0x8b:",
          "2000:             v_size  = (int)(wd2 & 0xffff);",
          "2002:             break;",
          "2004:         case 0xfe:",
          "2007:             v_size  = (int)(wd3 & 0xffff);",
          "2009:             break;",
          "2011:         default:",
          "2014:             break;",
          "2015:     }",
          "",
          "[Removed Lines]",
          "1968: static int decode_msg(guint8 *rec, int *v_type, int *IS_TX)",
          "1983:             if (IS_TX != NULL)",
          "1989:         case COMMAND_TX:",
          "1990:             if (IS_TX != NULL)",
          "1998:             if (IS_TX != NULL)",
          "2005:             if (IS_TX != NULL)",
          "2012:             if (IS_TX != NULL)",
          "",
          "[Added Lines]",
          "2627: static int decode_msg(vwr_t *vwr, guint8 *rec, int *v_type, int *IS_TX, int *log_mode)",
          "2635:     cmd = rec[0];",
          "2636:     fpga_log_mode = rec[1];",
          "2637:     fpga_log_mode = ((fpga_log_mode & 0x30) >> 4);",
          "2639:     wd2 = pntoh32(&rec[8]);",
          "2640:     wd3 = pntoh32(&rec[12]);",
          "2642:     if (vwr != NULL) {",
          "2644:         if ((cmd & vwr->HEADER_IS_TX) == vwr->HEADER_IS_TX) {",
          "2646:         }",
          "2647:         else if ((cmd & vwr->HEADER_IS_RX) == vwr->HEADER_IS_RX) {",
          "2649:         }",
          "2650:         else {",
          "2652:         }",
          "2653:     }",
          "2655:     if (vwr != NULL)",
          "2661:         case COMMAND_TX:",
          "2662:             v_size  = (int)(wd2 & 0xffff);",
          "2664:             break;",
          "2666:         case 0x30:",
          "2667:             if (vwr != NULL) {",
          "2668:                 v_size  = (int)(wd2 & 0xffff);",
          "2671:             }",
          "2672:             break;",
          "2675:             if (vwr != NULL) {",
          "2677:             }",
          "2683:             if (vwr != NULL) {",
          "2685:             }",
          "2692:         case 0xbb:",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2086:             vwr->IPLEN_OFF          = vVW510021_W_IPLEN_OFF;",
          "2087:             vwr->PLCP_LENGTH_OFF    = vVW510021_W_PLCP_LENGTH_OFF;",
          "2089:             vwr->MT_MASK            = vVW510021_W_SEL_MASK;",
          "2090:             vwr->VCID_MASK          = 0xffff;",
          "2091:             vwr->FLOW_VALID         = vVW510021_W_FLOW_VALID;",
          "2092:             vwr->STATS_START_OFF    = vVW510021_W_HEADER_LEN;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2778:             vwr->HEADER_IS_RX       = vVW510021_W_HEADER_IS_RX;",
          "2779:             vwr->HEADER_IS_TX       = vVW510021_W_HEADER_IS_TX;",
          "2781:             vwr->MCS_INDEX_MASK     = vVW510021_W_MCS_MASK;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2108:             vwr->MT_CCKS            = v22_W_MT_CCKS;",
          "2115:             vwr->FRAME_TYPE_OFF     =   vVW510021_W_FRAME_TYPE_OFF;",
          "2116:             vwr->IS_TCP             =   vVW510021_W_IS_TCP;",
          "",
          "[Removed Lines]",
          "2111:             vwr->WEPTYPE            = v22_W_WEPTYPE;",
          "2112:             vwr->TKIPTYPE           = v22_W_TKIPTYPE;",
          "2113:             vwr->CCMPTYPE           = v22_W_CCMPTYPE;",
          "",
          "[Added Lines]",
          "2803:             vwr->WEPTYPE            = vVW510021_W_WEPTYPE;",
          "2804:             vwr->TKIPTYPE           = vVW510021_W_TKIPTYPE;",
          "2805:             vwr->CCMPTYPE           = vVW510021_W_CCMPTYPE;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2131:             vwr->STATS_LEN       = vVW510021_W_STATS_TRAILER_LEN;",
          "2132:             vwr->PLCP_LENGTH_OFF = 16;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2826:             vwr->HEADER_IS_RX    = vVW510021_W_HEADER_IS_RX;",
          "2827:             vwr->HEADER_IS_TX    = vVW510021_W_HEADER_IS_TX;",
          "2828:             vwr->HEADER_IS_RFN      = vVW510021_W_HEADER_IS_RFN;",
          "2829:             vwr->HEADER_IS_RF       = vVW510021_W_HEADER_IS_RF;",
          "2830:             vwr->HEADER_IS_RXRF     = vVW510021_W_HEADER_IS_RFRX;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2157:             vwr->INFO_OFF       = v22_E_INFO_OFF;",
          "2158:             vwr->L4ID_OFF       = v22_E_L4ID_OFF;",
          "2160:             vwr->IS_RX          = v22_E_IS_RX;",
          "2161:             vwr->MT_MASK        = v22_E_MT_MASK;",
          "2162:             vwr->VCID_MASK      = v22_E_VCID_MASK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2858:             vwr->HEADER_IS_RX   = v22_E_HEADER_IS_RX;",
          "2859:             vwr->HEADER_IS_TX   = v22_E_HEADER_IS_TX;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2217:             vwr->VCID_MASK          = v22_W_VCID_MASK;",
          "2218:             vwr->FLOW_VALID         = v22_W_FLOW_VALID;",
          "2220:             vwr->RX_DECRYPTS        = v22_W_RX_DECRYPTS;",
          "2221:             vwr->TX_DECRYPTS        = v22_W_TX_DECRYPTS;",
          "2222:             vwr->FC_PROT_BIT        = v22_W_FC_PROT_BIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2921:             vwr->HEADER_IS_RX       = v22_W_HEADER_IS_RX;",
          "2922:             vwr->HEADER_IS_TX       = v22_W_HEADER_IS_TX;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2265:             vwr->FPGA_VERSION_OFF   = vVW510024_E_FPGA_VERSION_OFF;",
          "2266:             vwr->HEADER_VERSION_OFF = vVW510024_E_HEADER_VERSION_OFF;",
          "2268:             vwr->VCID_MASK          = vVW510024_E_VCID_MASK;",
          "2269:             vwr->FLOW_VALID         = vVW510024_E_FLOW_VALID;",
          "2270:             vwr->FCS_ERROR          = v22_E_FCS_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2972:             vwr->HEADER_IS_RX       = vVW510024_E_HEADER_IS_RX;",
          "2973:             vwr->HEADER_IS_TX       = vVW510024_E_HEADER_IS_TX;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2374:             symbol_tx_time = 4.0f;",
          "2376:         if ( rflags & FLAGS_CHAN_40MHZ )",
          "2378:         else",
          "2381:         bitrate = ( ndbps * (((int)(mcsIndex >> 3) + 1) )) / symbol_tx_time;",
          "2382:     }",
          "",
          "[Removed Lines]",
          "2377:             ndbps = canonical_ndbps_40_ht[mcsIndex & 0x07];",
          "2379:             ndbps = canonical_ndbps_20_ht[mcsIndex & 0x07];",
          "",
          "[Added Lines]",
          "3084:             ndbps = canonical_ndbps_40_ht[mcsIndex - 8*(int)(mcsIndex/8)];",
          "3086:             ndbps = canonical_ndbps_20_ht[mcsIndex - 8*(int)(mcsIndex/8)];",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2408: static gboolean",
          "2409: vwr_process_rec_data(FILE_T fh, int rec_size,",
          "2410:                      struct wtap_pkthdr *phdr, Buffer *buf, vwr_t *vwr,",
          "2412: {",
          "2414:     gboolean  ret = FALSE;",
          "",
          "[Removed Lines]",
          "2411:                      int IS_TX, int *err, gchar **err_info)",
          "",
          "[Added Lines]",
          "3118:                      int IS_TX, int log_mode, int *err, gchar **err_info)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2430:             ret = vwr_read_s1_W_rec(vwr, phdr, buf, rec, rec_size, err, err_info);",
          "2431:             break;",
          "2432:         case S2_W_FPGA:",
          "2433:         case S3_W_FPGA:",
          "2435:             break;",
          "2436:         case vVW510012_E_FPGA:",
          "2437:         case vVW510024_E_FPGA:",
          "",
          "[Removed Lines]",
          "2434:             ret = vwr_read_s2_s3_W_rec(vwr, phdr, buf, rec, rec_size, IS_TX, err, err_info);",
          "",
          "[Added Lines]",
          "3141:             ret = vwr_read_s2_W_rec(vwr, phdr, buf, rec, rec_size, IS_TX, log_mode, err, err_info);",
          "3142:             break;",
          "3144:             ret = vwr_read_s3_W_rec(vwr, phdr, buf, rec, rec_size, IS_TX, log_mode, err, err_info);",
          "",
          "---------------"
        ],
        "wiretap/wtap-int.h||wiretap/wtap-int.h": [
          "File: wiretap/wtap-int.h -> wiretap/wtap-int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:     }",
          "209: #endif",
          "211: #ifndef phtoles",
          "212: #define phtoles(p, v) \\",
          "213:     {                 \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211: #ifndef phtole8",
          "212: #define phtole8(p, v) \\",
          "213:     {                 \\",
          "214:         (p)[0] = (guint8)((v) >> 0);    \\",
          "215:     }",
          "216: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:     }",
          "217: #endif",
          "219: #ifndef phtolel",
          "220: #define phtolel(p, v) \\",
          "221:     {                 \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226: #ifndef phtole24",
          "227: #define phtole24(p, v) \\",
          "228:     {                 \\",
          "229:         (p)[0] = (guint8)((v) >> 0);     \\",
          "230:         (p)[1] = (guint8)((v) >> 8);     \\",
          "231:         (p)[2] = (guint8)((v) >> 16);    \\",
          "232:     }",
          "233: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}