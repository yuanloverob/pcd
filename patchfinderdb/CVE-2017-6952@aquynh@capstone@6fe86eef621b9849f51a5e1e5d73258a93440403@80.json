{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1504f913f17be8868a04bb308bccb04e5dbc5a24",
      "candidate_info": {
        "commit_hash": "1504f913f17be8868a04bb308bccb04e5dbc5a24",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/1504f913f17be8868a04bb308bccb04e5dbc5a24",
        "files": [
          "arch/X86/X86Mapping.c"
        ],
        "message": "x86: consistent register names ST0-ST7 with the asm output",
        "before_after_code_files": [
          "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
          "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  { X86_REG_R13, \"r13\" },",
          "184:  { X86_REG_R14, \"r14\" },",
          "185:  { X86_REG_R15, \"r15\" },",
          "194:  { X86_REG_XMM0, \"xmm0\" },",
          "195:  { X86_REG_XMM1, \"xmm1\" },",
          "196:  { X86_REG_XMM2, \"xmm2\" },",
          "",
          "[Removed Lines]",
          "186:  { X86_REG_ST0, \"st0\" },",
          "187:  { X86_REG_ST1, \"st1\" },",
          "188:  { X86_REG_ST2, \"st2\" },",
          "189:  { X86_REG_ST3, \"st3\" },",
          "190:  { X86_REG_ST4, \"st4\" },",
          "191:  { X86_REG_ST5, \"st5\" },",
          "192:  { X86_REG_ST6, \"st6\" },",
          "193:  { X86_REG_ST7, \"st7\" },",
          "",
          "[Added Lines]",
          "186:  { X86_REG_ST0, \"st(0\" },",
          "187:  { X86_REG_ST1, \"st(1)\" },",
          "188:  { X86_REG_ST2, \"st(2)\" },",
          "189:  { X86_REG_ST3, \"st(3)\" },",
          "190:  { X86_REG_ST4, \"st(4)\" },",
          "191:  { X86_REG_ST5, \"st(5)\" },",
          "192:  { X86_REG_ST6, \"st(6)\" },",
          "193:  { X86_REG_ST7, \"st(7)\" },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81f2bcf31c869867f092c42c14bc30f61280ea33",
      "candidate_info": {
        "commit_hash": "81f2bcf31c869867f092c42c14bc30f61280ea33",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/81f2bcf31c869867f092c42c14bc30f61280ea33",
        "files": [
          "arch/X86/X86DisassemblerDecoder.c"
        ],
        "message": "x86: initialize eaDisplacement in 16-bit mode.  Fixes #656",
        "before_after_code_files": [
          "arch/X86/X86DisassemblerDecoder.c||arch/X86/X86DisassemblerDecoder.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86DisassemblerDecoder.c||arch/X86/X86DisassemblerDecoder.c": [
          "File: arch/X86/X86DisassemblerDecoder.c -> arch/X86/X86DisassemblerDecoder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1646:      break;",
          "1647:     case 0x3:",
          "1648:      insn->eaBase = (EABase)(insn->eaRegBase + rm);",
          "1649:      if (readDisplacement(insn))",
          "1650:       return -1;",
          "1651:      break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1649:      insn->eaDisplacement = EA_DISP_NONE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41b09c34cd3a85097ebcae6c548baeb977f42157",
      "candidate_info": {
        "commit_hash": "41b09c34cd3a85097ebcae6c548baeb977f42157",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/41b09c34cd3a85097ebcae6c548baeb977f42157",
        "files": [
          "include/capstone/arm.h",
          "include/capstone/arm64.h",
          "include/capstone/mips.h",
          "include/capstone/ppc.h",
          "include/capstone/sparc.h",
          "include/capstone/systemz.h",
          "include/capstone/xcore.h"
        ],
        "message": "Fixed register types\n\nIn some architecture headers, register values were\nrepresented as `unsigned int`/`uint8_t` or other types\ninstead of the corresponding enums. This commit fixes most (all)\noccurences of this problem.",
        "before_after_code_files": [
          "include/capstone/arm.h||include/capstone/arm.h",
          "include/capstone/arm64.h||include/capstone/arm64.h",
          "include/capstone/mips.h||include/capstone/mips.h",
          "include/capstone/ppc.h||include/capstone/ppc.h",
          "include/capstone/sparc.h||include/capstone/sparc.h",
          "include/capstone/systemz.h||include/capstone/systemz.h",
          "include/capstone/xcore.h||include/capstone/xcore.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/arm.h||include/capstone/arm.h": [
          "File: include/capstone/arm.h -> include/capstone/arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:  ARM_VECTORDATA_F64U32, // f64.u32",
          "250: } arm_vectordata_type;",
          "314: typedef enum arm_reg {",
          "315:  ARM_REG_INVALID = 0,",
          "",
          "[Removed Lines]",
          "254: typedef struct arm_op_mem {",
          "255:  unsigned int base; // base register",
          "256:  unsigned int index; // index register",
          "257:  int scale; // scale for index register (can be 1, or -1)",
          "258:  int disp; // displacement/offset value",
          "259:  int lshift; // left-shift on index register, or 0 if irrelevant.",
          "260: } arm_op_mem;",
          "263: typedef struct cs_arm_op {",
          "264:  int vector_index; // Vector Index for some vector operands (or -1 if irrelevant)",
          "266:  struct {",
          "267:   arm_shifter type;",
          "268:   unsigned int value;",
          "269:  } shift;",
          "271:  arm_op_type type; // operand type",
          "273:  union {",
          "274:   unsigned int reg; // register value for REG/SYSREG operand",
          "275:   int32_t imm;   // immediate value for C-IMM, P-IMM or IMM operand",
          "276:   double fp;   // floating point value for FP operand",
          "277:   arm_op_mem mem;  // base/index/scale/disp value for MEM operand",
          "278:   arm_setend_type setend; // SETEND instruction's operand type",
          "279:  };",
          "283:  bool subtracted; // if TRUE, this operand is subtracted. otherwise, it is added.",
          "288:  uint8_t access;",
          "291:  int8_t neon_lane;",
          "292: } cs_arm_op;",
          "295: typedef struct cs_arm {",
          "296:  bool usermode; // User-mode registers to be loaded (for LDM/STM instructions)",
          "297:  int vector_size;  // Scalar size for vector instructions",
          "298:  arm_vectordata_type vector_data; // Data type for elements of vector instructions",
          "299:  arm_cpsmode_type cps_mode; // CPS mode for CPS instruction",
          "300:  arm_cpsflag_type cps_flag; // CPS mode for CPS instruction",
          "301:  arm_cc cc;   // conditional code for this insn",
          "302:  bool update_flags; // does this insn update flags?",
          "303:  bool writeback;  // does this insn write-back?",
          "304:  arm_mem_barrier mem_barrier; // Option for some memory barrier instructions",
          "308:  uint8_t op_count;",
          "310:  cs_arm_op operands[36]; // operands for this instruction.",
          "311: } cs_arm;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:  ARM_REG_IP = ARM_REG_R12,",
          "438: } arm_reg;",
          "441: typedef enum arm_insn {",
          "442:  ARM_INS_INVALID = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381: typedef struct arm_op_mem {",
          "382:  arm_reg base; // base register",
          "383:  arm_reg index; // index register",
          "384:  int scale; // scale for index register (can be 1, or -1)",
          "385:  int disp; // displacement/offset value",
          "386:  int lshift; // left-shift on index register, or 0 if irrelevant.",
          "387: } arm_op_mem;",
          "390: typedef struct cs_arm_op {",
          "391:  int vector_index; // Vector Index for some vector operands (or -1 if irrelevant)",
          "393:  struct {",
          "394:   arm_shifter type;",
          "395:   unsigned int value;",
          "396:  } shift;",
          "398:  arm_op_type type; // operand type",
          "400:  union {",
          "401:   arm_reg reg; // register value for REG/SYSREG operand",
          "402:   int32_t imm;   // immediate value for C-IMM, P-IMM or IMM operand",
          "403:   double fp;   // floating point value for FP operand",
          "404:   arm_op_mem mem;  // base/index/scale/disp value for MEM operand",
          "405:   arm_setend_type setend; // SETEND instruction's operand type",
          "406:  };",
          "410:  bool subtracted; // if TRUE, this operand is subtracted. otherwise, it is added.",
          "415:  uint8_t access;",
          "418:  int8_t neon_lane;",
          "419: } cs_arm_op;",
          "422: typedef struct cs_arm {",
          "423:  bool usermode; // User-mode registers to be loaded (for LDM/STM instructions)",
          "424:  int vector_size;  // Scalar size for vector instructions",
          "425:  arm_vectordata_type vector_data; // Data type for elements of vector instructions",
          "426:  arm_cpsmode_type cps_mode; // CPS mode for CPS instruction",
          "427:  arm_cpsflag_type cps_flag; // CPS mode for CPS instruction",
          "428:  arm_cc cc;   // conditional code for this insn",
          "429:  bool update_flags; // does this insn update flags?",
          "430:  bool writeback;  // does this insn write-back?",
          "431:  arm_mem_barrier mem_barrier; // Option for some memory barrier instructions",
          "435:  uint8_t op_count;",
          "437:  cs_arm_op operands[36]; // operands for this instruction.",
          "438: } cs_arm;",
          "",
          "---------------"
        ],
        "include/capstone/arm64.h||include/capstone/arm64.h": [
          "File: include/capstone/arm64.h -> include/capstone/arm64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:  ARM64_PRFM_PSTL3STRM = 0x15 + 1,",
          "344: } arm64_prefetch_op;",
          "396: typedef enum arm64_reg {",
          "",
          "[Removed Lines]",
          "348: typedef struct arm64_op_mem {",
          "349:  unsigned int base; // base register",
          "350:  unsigned int index; // index register",
          "351:  int32_t disp; // displacement/offset value",
          "352: } arm64_op_mem;",
          "355: typedef struct cs_arm64_op {",
          "356:  int vector_index; // Vector Index for some vector operands (or -1 if irrelevant)",
          "357:  arm64_vas vas;  // Vector Arrangement Specifier",
          "358:  arm64_vess vess; // Vector Element Size Specifier",
          "359:  struct {",
          "360:   arm64_shifter type; // shifter type of this operand",
          "361:   unsigned int value; // shifter value of this operand",
          "362:  } shift;",
          "363:  arm64_extender ext;  // extender type of this operand",
          "364:  arm64_op_type type; // operand type",
          "365:  union {",
          "366:   unsigned int reg; // register value for REG operand",
          "367:   int64_t imm;  // immediate value, or index for C-IMM or IMM operand",
          "368:   double fp;   // floating point value for FP operand",
          "369:   arm64_op_mem mem;  // base/index/scale/disp value for MEM operand",
          "370:   arm64_pstate pstate;  // PState field of MSR instruction.",
          "371:   unsigned int sys;  // IC/DC/AT/TLBI operation (see arm64_ic_op, arm64_dc_op, arm64_at_op, arm64_tlbi_op)",
          "372:   arm64_prefetch_op prefetch;  // PRFM operation.",
          "373:   arm64_barrier_op barrier;  // Memory barrier operation (ISB/DMB/DSB instructions).",
          "374:  };",
          "379:  cs_ac_type access;",
          "380: } cs_arm64_op;",
          "383: typedef struct cs_arm64 {",
          "384:  arm64_cc cc; // conditional code for this insn",
          "385:  bool update_flags; // does this insn update flags?",
          "386:  bool writeback; // does this insn request writeback? 'True' means 'yes'",
          "390:  uint8_t op_count;",
          "392:  cs_arm64_op operands[8]; // operands for this instruction.",
          "393: } cs_arm64;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "667:  ARM64_REG_LR = ARM64_REG_X30,",
          "668: } arm64_reg;",
          "671: typedef enum arm64_insn {",
          "672:  ARM64_INS_INVALID = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624: typedef struct arm64_op_mem {",
          "625:  arm64_reg base; // base register",
          "626:  arm64_reg index; // index register",
          "627:  int32_t disp; // displacement/offset value",
          "628: } arm64_op_mem;",
          "631: typedef struct cs_arm64_op {",
          "632:  int vector_index; // Vector Index for some vector operands (or -1 if irrelevant)",
          "633:  arm64_vas vas;  // Vector Arrangement Specifier",
          "634:  arm64_vess vess; // Vector Element Size Specifier",
          "635:  struct {",
          "636:   arm64_shifter type; // shifter type of this operand",
          "637:   unsigned int value; // shifter value of this operand",
          "638:  } shift;",
          "639:  arm64_extender ext;  // extender type of this operand",
          "640:  arm64_op_type type; // operand type",
          "641:  union {",
          "642:   arm64_reg reg; // register value for REG operand",
          "643:   int64_t imm;  // immediate value, or index for C-IMM or IMM operand",
          "644:   double fp;   // floating point value for FP operand",
          "645:   arm64_op_mem mem;  // base/index/scale/disp value for MEM operand",
          "646:   arm64_pstate pstate;  // PState field of MSR instruction.",
          "647:   unsigned int sys;  // IC/DC/AT/TLBI operation (see arm64_ic_op, arm64_dc_op, arm64_at_op, arm64_tlbi_op)",
          "648:   arm64_prefetch_op prefetch;  // PRFM operation.",
          "649:   arm64_barrier_op barrier;  // Memory barrier operation (ISB/DMB/DSB instructions).",
          "650:  };",
          "655:  cs_ac_type access;",
          "656: } cs_arm64_op;",
          "659: typedef struct cs_arm64 {",
          "660:  arm64_cc cc; // conditional code for this insn",
          "661:  bool update_flags; // does this insn update flags?",
          "662:  bool writeback; // does this insn request writeback? 'True' means 'yes'",
          "666:  uint8_t op_count;",
          "668:  cs_arm64_op operands[8]; // operands for this instruction.",
          "669: } cs_arm64;",
          "",
          "---------------"
        ],
        "include/capstone/mips.h||include/capstone/mips.h": [
          "File: include/capstone/mips.h -> include/capstone/mips.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  MIPS_OP_MEM, // = CS_OP_MEM (Memory operand).",
          "28: } mips_op_type;",
          "56: typedef enum mips_reg {",
          "57:  MIPS_REG_INVALID = 0,",
          "",
          "[Removed Lines]",
          "32: typedef struct mips_op_mem {",
          "33:  unsigned int base; // base register",
          "34:  int64_t disp; // displacement/offset value",
          "35: } mips_op_mem;",
          "38: typedef struct cs_mips_op {",
          "39:  mips_op_type type; // operand type",
          "40:  union {",
          "41:   unsigned int reg; // register value for REG operand",
          "42:   int64_t imm;  // immediate value for IMM operand",
          "43:   mips_op_mem mem; // base/index/scale/disp value for MEM operand",
          "44:  };",
          "45: } cs_mips_op;",
          "48: typedef struct cs_mips {",
          "51:  uint8_t op_count;",
          "52:  cs_mips_op operands[8]; // operands for this instruction.",
          "53: } cs_mips;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:  MIPS_REG_LO3 = MIPS_REG_HI3,",
          "256: } mips_reg;",
          "259: typedef enum mips_insn {",
          "260:  MIPS_INS_INVALID = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: typedef struct mips_op_mem {",
          "236:  mips_reg base; // base register",
          "237:  int64_t disp; // displacement/offset value",
          "238: } mips_op_mem;",
          "241: typedef struct cs_mips_op {",
          "242:  mips_op_type type; // operand type",
          "243:  union {",
          "244:   mips_reg reg;  // register value for REG operand",
          "245:   int64_t imm;  // immediate value for IMM operand",
          "246:   mips_op_mem mem; // base/index/scale/disp value for MEM operand",
          "247:  };",
          "248: } cs_mips_op;",
          "251: typedef struct cs_mips {",
          "254:  uint8_t op_count;",
          "255:  cs_mips_op operands[8]; // operands for this instruction.",
          "256: } cs_mips;",
          "",
          "---------------"
        ],
        "include/capstone/ppc.h||include/capstone/ppc.h": [
          "File: include/capstone/ppc.h -> include/capstone/ppc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  PPC_OP_CRX = 64, // Condition Register field",
          "49: } ppc_op_type;",
          "93: typedef enum ppc_reg {",
          "94:  PPC_REG_INVALID = 0,",
          "",
          "[Removed Lines]",
          "53: typedef struct ppc_op_mem {",
          "54:  unsigned int base; // base register",
          "55:  int32_t disp; // displacement/offset value",
          "56: } ppc_op_mem;",
          "58: typedef struct ppc_op_crx {",
          "59:  unsigned int scale;",
          "60:  unsigned int reg;",
          "61:  ppc_bc cond;",
          "62: } ppc_op_crx;",
          "65: typedef struct cs_ppc_op {",
          "66:  ppc_op_type type; // operand type",
          "67:  union {",
          "68:   unsigned int reg; // register value for REG operand",
          "69:   int64_t imm;  // immediate value for IMM operand",
          "70:   ppc_op_mem mem;  // base/disp value for MEM operand",
          "71:   ppc_op_crx crx;  // operand with condition register",
          "72:  };",
          "73: } cs_ppc_op;",
          "76: typedef struct cs_ppc {",
          "78:  ppc_bc bc;",
          "81:  ppc_bh bh;",
          "84:  bool update_cr0;",
          "88:  uint8_t op_count;",
          "89:  cs_ppc_op operands[8]; // operands for this instruction.",
          "90: } cs_ppc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:  PPC_REG_ENDING,   // <-- mark the end of the list of registers",
          "309: } ppc_reg;",
          "312: typedef enum ppc_insn {",
          "313:  PPC_INS_INVALID = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: typedef struct ppc_op_mem {",
          "273:  ppc_reg base; // base register",
          "274:  int32_t disp; // displacement/offset value",
          "275: } ppc_op_mem;",
          "277: typedef struct ppc_op_crx {",
          "278:  unsigned int scale;",
          "279:  ppc_reg reg;",
          "280:  ppc_bc cond;",
          "281: } ppc_op_crx;",
          "284: typedef struct cs_ppc_op {",
          "285:  ppc_op_type type; // operand type",
          "286:  union {",
          "287:   ppc_reg reg; // register value for REG operand",
          "288:   int64_t imm;  // immediate value for IMM operand",
          "289:   ppc_op_mem mem;  // base/disp value for MEM operand",
          "290:   ppc_op_crx crx;  // operand with condition register",
          "291:  };",
          "292: } cs_ppc_op;",
          "295: typedef struct cs_ppc {",
          "297:  ppc_bc bc;",
          "300:  ppc_bh bh;",
          "303:  bool update_cr0;",
          "307:  uint8_t op_count;",
          "308:  cs_ppc_op operands[8]; // operands for this instruction.",
          "309: } cs_ppc;",
          "",
          "---------------"
        ],
        "include/capstone/sparc.h||include/capstone/sparc.h": [
          "File: include/capstone/sparc.h -> include/capstone/sparc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  SPARC_OP_MEM, // = CS_OP_MEM (Memory operand).",
          "76: } sparc_op_type;",
          "107: typedef enum sparc_reg {",
          "108:  SPARC_REG_INVALID = 0,",
          "",
          "[Removed Lines]",
          "80: typedef struct sparc_op_mem {",
          "81:  uint8_t base; // base register",
          "82:  uint8_t index; // index register",
          "83:  int32_t disp; // displacement/offset value",
          "84: } sparc_op_mem;",
          "87: typedef struct cs_sparc_op {",
          "88:  sparc_op_type type; // operand type",
          "89:  union {",
          "90:   unsigned int reg; // register value for REG operand",
          "91:   int32_t imm;  // immediate value for IMM operand",
          "92:   sparc_op_mem mem;  // base/disp value for MEM operand",
          "93:  };",
          "94: } cs_sparc_op;",
          "97: typedef struct cs_sparc {",
          "98:  sparc_cc cc; // code condition for this insn",
          "99:  sparc_hint hint; // branch hint: encoding as bitwise OR of sparc_hint.",
          "102:  uint8_t op_count;",
          "103:  cs_sparc_op operands[4]; // operands for this instruction.",
          "104: } cs_sparc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:  SPARC_REG_I6 = SPARC_REG_FP,",
          "205: } sparc_reg;",
          "208: typedef enum sparc_insn {",
          "209:  SPARC_INS_INVALID = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: typedef struct sparc_op_mem {",
          "182:  sparc_reg base;  // base register",
          "183:  sparc_reg index; // index register",
          "184:  int32_t disp;  // displacement/offset value",
          "185: } sparc_op_mem;",
          "188: typedef struct cs_sparc_op {",
          "189:  sparc_op_type type; // operand type",
          "190:  union {",
          "191:   sparc_reg reg; // register value for REG operand",
          "192:   int32_t imm;  // immediate value for IMM operand",
          "193:   sparc_op_mem mem;  // base/disp value for MEM operand",
          "194:  };",
          "195: } cs_sparc_op;",
          "198: typedef struct cs_sparc {",
          "199:  sparc_cc cc; // code condition for this insn",
          "200:  sparc_hint hint; // branch hint: encoding as bitwise OR of sparc_hint.",
          "203:  uint8_t op_count;",
          "204:  cs_sparc_op operands[4]; // operands for this instruction.",
          "205: } cs_sparc;",
          "",
          "---------------"
        ],
        "include/capstone/systemz.h||include/capstone/systemz.h": [
          "File: include/capstone/systemz.h -> include/capstone/systemz.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  SYSZ_OP_ACREG = 64, // Access register operand.",
          "45: } sysz_op_type;",
          "76: typedef enum sysz_reg {",
          "77:  SYSZ_REG_INVALID = 0,",
          "",
          "[Removed Lines]",
          "49: typedef struct sysz_op_mem {",
          "50:  uint8_t base; // base register",
          "51:  uint8_t index; // index register",
          "52:  uint64_t length; // BDLAddr operand",
          "53:  int64_t disp; // displacement/offset value",
          "54: } sysz_op_mem;",
          "57: typedef struct cs_sysz_op {",
          "58:  sysz_op_type type; // operand type",
          "59:  union {",
          "60:   unsigned int reg; // register value for REG operand",
          "61:   int64_t imm;  // immediate value for IMM operand",
          "62:   sysz_op_mem mem;  // base/disp value for MEM operand",
          "63:  };",
          "64: } cs_sysz_op;",
          "67: typedef struct cs_sysz {",
          "68:  sysz_cc cc;  // Code condition",
          "71:  uint8_t op_count;",
          "72:  cs_sysz_op operands[6]; // operands for this instruction.",
          "73: } cs_sysz;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:  SYSZ_REG_ENDING,",
          "116: } sysz_reg;",
          "119: typedef enum sysz_insn {",
          "120:  SYSZ_INS_INVALID = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: typedef struct sysz_op_mem {",
          "93:  sysz_reg base;  // base register",
          "94:  sysz_reg index;  // index register",
          "95:  uint64_t length; // BDLAddr operand",
          "96:  int64_t disp; // displacement/offset value",
          "97: } sysz_op_mem;",
          "100: typedef struct cs_sysz_op {",
          "101:  sysz_op_type type; // operand type",
          "102:  union {",
          "103:   sysz_reg reg;  // register value for REG operand",
          "104:   int64_t imm;  // immediate value for IMM operand",
          "105:   sysz_op_mem mem; // base/disp value for MEM operand",
          "106:  };",
          "107: } cs_sysz_op;",
          "110: typedef struct cs_sysz {",
          "111:  sysz_cc cc;  // Code condition",
          "114:  uint8_t op_count;",
          "115:  cs_sysz_op operands[6]; // operands for this instruction.",
          "116: } cs_sysz;",
          "",
          "---------------"
        ],
        "include/capstone/xcore.h||include/capstone/xcore.h": [
          "File: include/capstone/xcore.h -> include/capstone/xcore.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  XCORE_OP_MEM, // = CS_OP_MEM (Memory operand).",
          "24: } xcore_op_type;",
          "54: typedef enum xcore_reg {",
          "55:  XCORE_REG_INVALID = 0,",
          "",
          "[Removed Lines]",
          "28: typedef struct xcore_op_mem {",
          "29:  uint8_t base; // base register",
          "30:  uint8_t index; // index register",
          "31:  int32_t disp; // displacement/offset value",
          "32:  int     direct; // +1: forward, -1: backward",
          "33: } xcore_op_mem;",
          "36: typedef struct cs_xcore_op {",
          "37:  xcore_op_type type; // operand type",
          "38:  union {",
          "39:   unsigned int reg; // register value for REG operand",
          "40:   int32_t imm;  // immediate value for IMM operand",
          "41:   xcore_op_mem mem;  // base/disp value for MEM operand",
          "42:  };",
          "43: } cs_xcore_op;",
          "46: typedef struct cs_xcore {",
          "49:  uint8_t op_count;",
          "50:  cs_xcore_op operands[8]; // operands for this instruction.",
          "51: } cs_xcore;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:  XCORE_REG_ENDING, // <-- mark the end of the list of registers",
          "89: } xcore_reg;",
          "92: typedef enum xcore_insn {",
          "93:  XCORE_INS_INVALID = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: typedef struct xcore_op_mem {",
          "67:  xcore_reg base;  // base register",
          "68:  xcore_reg index; // index register",
          "69:  int32_t disp; // displacement/offset value",
          "70:  int     direct; // +1: forward, -1: backward",
          "71: } xcore_op_mem;",
          "74: typedef struct cs_xcore_op {",
          "75:  xcore_op_type type; // operand type",
          "76:  union {",
          "77:   xcore_reg reg; // register value for REG operand",
          "78:   int32_t imm;  // immediate value for IMM operand",
          "79:   xcore_op_mem mem;  // base/disp value for MEM operand",
          "80:  };",
          "81: } cs_xcore_op;",
          "84: typedef struct cs_xcore {",
          "87:  uint8_t op_count;",
          "88:  cs_xcore_op operands[8]; // operands for this instruction.",
          "89: } cs_xcore;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0662879d35e4689b579b34fc2b92fd15fe2604b4",
      "candidate_info": {
        "commit_hash": "0662879d35e4689b579b34fc2b92fd15fe2604b4",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/0662879d35e4689b579b34fc2b92fd15fe2604b4",
        "files": [
          "bindings/python/capstone/__init__.py"
        ],
        "message": "python: fix CS_SKIPDATA_CALLBACK prototype",
        "before_after_code_files": [
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:     )",
          "300: # callback for SKIPDATA option",
          "303: class _cs_opt_skipdata(ctypes.Structure):",
          "304:     _fields_ = (",
          "",
          "[Removed Lines]",
          "301: CS_SKIPDATA_CALLBACK = ctypes.CFUNCTYPE(ctypes.c_size_t, ctypes.POINTER(ctypes.c_char), ctypes.c_size_t, ctypes.c_void_p)",
          "",
          "[Added Lines]",
          "301: CS_SKIPDATA_CALLBACK = ctypes.CFUNCTYPE(ctypes.c_size_t, ctypes.POINTER(ctypes.c_char), ctypes.c_size_t, ctypes.c_size_t, ctypes.c_void_p)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94bce437e8f06ab6c5b73b2e68831dbddcc4ebc8",
      "candidate_info": {
        "commit_hash": "94bce437e8f06ab6c5b73b2e68831dbddcc4ebc8",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/94bce437e8f06ab6c5b73b2e68831dbddcc4ebc8",
        "files": [
          "arch/Mips/MipsModule.c"
        ],
        "message": "Fix selection of mips disasm handler (#1022)\n\n* Fix selection of mips disasm handler\n\nhandle->disasm was incorrectly set to Mips64_getInstruction if CS_MODE_MIPS32R6\nwas set but CS_MODE_32 was not set. Now, CS_MODE_32 is set automatically if\nCS_MODE_MIPS32R6 is set.\n\n* Align with current style",
        "before_after_code_files": [
          "arch/Mips/MipsModule.c||arch/Mips/MipsModule.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/Mips/MipsModule.c||arch/Mips/MipsModule.c": [
          "File: arch/Mips/MipsModule.c -> arch/Mips/MipsModule.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"MipsInstPrinter.h\"",
          "10: #include \"MipsMapping.h\"",
          "12: static cs_err init(cs_struct *ud)",
          "13: {",
          "14:  MCRegisterInfo *mri;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: static inline cs_mode updated_mode(cs_mode mode)",
          "14: {",
          "15:  if (mode & CS_MODE_MIPS32R6) {",
          "16:   mode |= CS_MODE_32;",
          "17:  }",
          "19:  return mode;",
          "20: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  ud->insn_name = Mips_insn_name;",
          "31:  ud->group_name = Mips_group_name;",
          "34:   ud->disasm = Mips_getInstruction;",
          "35:  else",
          "36:   ud->disasm = Mips64_getInstruction;",
          "",
          "[Removed Lines]",
          "33:  if (ud->mode & CS_MODE_32 || ud->mode & CS_MODE_MIPS32R6)",
          "",
          "[Added Lines]",
          "43:  ud->mode = updated_mode(ud->mode);",
          "44:  if (ud->mode & CS_MODE_32)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41: static cs_err option(cs_struct *handle, cs_opt_type type, size_t value)",
          "42: {",
          "43:  if (type == CS_OPT_MODE) {",
          "44:   if (value & CS_MODE_32)",
          "45:    handle->disasm = Mips_getInstruction;",
          "46:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:   value = updated_mode(value);",
          "",
          "---------------"
        ]
      }
    }
  ]
}