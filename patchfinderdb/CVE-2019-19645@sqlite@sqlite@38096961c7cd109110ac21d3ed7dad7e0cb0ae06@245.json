{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e691dcb506e01077e8d3af90e19714eac1373eb4",
      "candidate_info": {
        "commit_hash": "e691dcb506e01077e8d3af90e19714eac1373eb4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e691dcb506e01077e8d3af90e19714eac1373eb4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/instr.test"
        ],
        "message": "Test cases for ticket [587791f92620090e]\n\nFossilOrigin-Name: ca0e3a83a1c015b346a791e6de03904d17a769c52dad0e3d71316c6e2e3f43c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/instr.test||test/instr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3fb40f518086c1e8d11eb1f4134e965450dbedfa4277bce39ef1e969fc747d38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/instr.test||test/instr.test": [
          "File: test/instr.test -> test/instr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:   SELECT instr(a, b) FROM x1;",
          "258: } 0",
          "260: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: # 2019-09-16 ticket https://www.sqlite.org/src/info/587791f92620090e",
          "261: #",
          "262: do_execsql_test instr-2.0 {",
          "263:   DROP TABLE IF EXISTS t0;",
          "264:   CREATE TABLE t0(c0 PRIMARY KEY, c1);",
          "265:   INSERT INTO t0(c0) VALUES (x'bb'), (0);",
          "266:   SELECT COUNT(*) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1;",
          "267: } {1}",
          "268: do_execsql_test instr-2.1 {",
          "269:   SELECT quote(c0) FROM t0 WHERE INSTR(x'aabb', t0.c0) ORDER BY t0.c0, t0.c1;",
          "270: } {X'BB'}",
          "271: do_execsql_test instr-2.2 {",
          "272:   DROP TABLE IF EXISTS t1;",
          "273:   CREATE TABLE t1(x);",
          "274:   INSERT INTO t1(x) VALUES('text'),(x'bb');",
          "275:   SELECT quote(x) FROM t1 WHERE instr(x'aabb',x);",
          "276: } {X'BB'}",
          "277: do_execsql_test instr-2.3 {",
          "278:   SELECT quote(x) FROM t1 WHERE x>'zzz' AND instr(x'aabb',x);",
          "279: } {X'BB'}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afb3f3c72c6cfaca39d4ef45b3ebcf319a2787a7",
      "candidate_info": {
        "commit_hash": "afb3f3c72c6cfaca39d4ef45b3ebcf319a2787a7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/afb3f3c72c6cfaca39d4ef45b3ebcf319a2787a7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vdbecov.c",
          "test/tester.tcl",
          "test/window1.test"
        ],
        "message": "Add a test case to cover a missed VDBE branch generated by window.c.\n\nFossilOrigin-Name: b36813d6467c82159bd3bb69d34ac28fc161a13052ca67d7cf9ad75e2aaea9d5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vdbecov.c||src/test_vdbecov.c",
          "test/tester.tcl||test/tester.tcl",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f0ed714637bf30443d0551d9b6fececa00fc9dfe9669fe720c4598ef71c61e2c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vdbecov.c||src/test_vdbecov.c": [
          "File: src/test_vdbecov.c -> src/test_vdbecov.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   }",
          "37: }",
          "40:   Tcl_Obj *pNew = Tcl_NewObj();",
          "41:   Tcl_IncrRefCount(pNew);",
          "42:   Tcl_ListObjAppendElement(0, pNew, Tcl_NewIntObj(iLine));",
          "43:   Tcl_ListObjAppendElement(0, pNew, Tcl_NewIntObj(iPath));",
          "44:   Tcl_ListObjAppendElement(0, pList, pNew);",
          "45:   Tcl_DecrRefCount(pNew);",
          "46: }",
          "",
          "[Removed Lines]",
          "39: static void appendToList(Tcl_Obj *pList, int iLine, int iPath){",
          "",
          "[Added Lines]",
          "39: static void appendToList(",
          "40:   Tcl_Obj *pList,",
          "41:   int iLine,",
          "42:   int iPath,",
          "43:   const char *zNever",
          "44: ){",
          "49:   Tcl_ListObjAppendElement(0, pNew, Tcl_NewStringObj(zNever, -1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:       Tcl_IncrRefCount(pRes);",
          "77:       for(i=0; i<sizeof(aBranchArray); i++){",
          "78:         u8 b = aBranchArray[i];",
          "79:         if( b ){",
          "83:         }",
          "84:       }",
          "85:       Tcl_SetObjResult(interp, pRes);",
          "",
          "[Removed Lines]",
          "80:           if( (b & 0x01)==0 ) appendToList(pRes, i, 0);",
          "81:           if( (b & 0x02)==0 ) appendToList(pRes, i, 1);",
          "82:           if( (b & 0x04)==0 ) appendToList(pRes, i, 2);",
          "",
          "[Added Lines]",
          "85:         int bFlag = ((b >> 4)==4);",
          "87:           if( (b & 0x01)==0 ){",
          "88:             appendToList(pRes, i, 0, bFlag ? \"less than\" : \"falls through\");",
          "89:           }",
          "90:           if( (b & 0x02)==0 ){",
          "91:             appendToList(pRes, i, 1, bFlag ? \"equal\" : \"taken\");",
          "92:           }",
          "93:           if( (b & 0x04)==0 ){",
          "94:             appendToList(pRes, i, 2, bFlag ? \"greater-than\" : \"NULL\");",
          "95:           }",
          "",
          "---------------"
        ],
        "test/tester.tcl||test/tester.tcl": [
          "File: test/tester.tcl -> test/tester.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:   }",
          "1331:   set fd [open vdbe_coverage.txt w]",
          "1332:   foreach miss [vdbe_coverage report] {",
          "1334:     set nextfile \"\"",
          "1335:     while {[llength $lSrc]>0 && [lindex $lSrc 0 0] < $line} {",
          "1336:       set nextfile [lindex $lSrc 0 1]",
          "",
          "[Removed Lines]",
          "1333:     foreach {line branch} $miss {}",
          "",
          "[Added Lines]",
          "1333:     foreach {line branch never} $miss {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1340:       puts $fd \"\"",
          "1341:       puts $fd \"### $nextfile ###\"",
          "1342:     }",
          "1344:   }",
          "1345:   close $fd",
          "1346: }",
          "",
          "[Removed Lines]",
          "1343:     puts $fd \"Vdbe branch $line: path $branch never taken\"",
          "",
          "[Added Lines]",
          "1343:     puts $fd \"Vdbe branch $line: never $never (path $branch)\"",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:   ) FROM t2",
          "1068: } {1 1  2 0  3 1  4 0}",
          "1072: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070: #-------------------------------------------------------------------------",
          "1071: reset_db",
          "1072: do_execsql_test 27.0 {",
          "1073:   CREATE TABLE t1(x);",
          "1074:   INSERT INTO t1 VALUES(NULL), (1), (2), (3), (4), (5);",
          "1075: }",
          "1076: do_execsql_test 27.1 {",
          "1077:   SELECT min(x) FROM t1;",
          "1078: } {1}",
          "1079: do_execsql_test 27.2 {",
          "1080:   SELECT min(x) OVER win FROM t1",
          "1081:   WINDOW win AS (ORDER BY rowid ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)",
          "1082: } {1 1 1 2 3 4}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05fbfd827c9fb79412fc8179ef460032c33b6dfc",
      "candidate_info": {
        "commit_hash": "05fbfd827c9fb79412fc8179ef460032c33b6dfc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05fbfd827c9fb79412fc8179ef460032c33b6dfc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Additional debugging information printed with the \".wheretrace 0x100\" option. No changes to normally delivered code.\n\nFossilOrigin-Name: fc72ec52c92ca6a953e765b48e21d52021fdb23a2cd84f737da4e43c642f6a5d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ae8c0d52f6aa7f27537216f85456ef49dade040366cfb250c789206ecd4dc5a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1816:   }else{",
          "1817:     char *z;",
          "1818:     if( p->u.vtab.idxStr ){",
          "1820:                 p->u.vtab.idxNum, p->u.vtab.idxStr, p->u.vtab.omitMask);",
          "1821:     }else{",
          "1822:       z = sqlite3_mprintf(\"(%d,%x)\", p->u.vtab.idxNum, p->u.vtab.omitMask);",
          "",
          "[Removed Lines]",
          "1819:       z = sqlite3_mprintf(\"(%d,\\\"%s\\\",%x)\",",
          "",
          "[Added Lines]",
          "1819:       z = sqlite3_mprintf(\"(%d,\\\"%s\\\",%#x)\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4810:     }",
          "4811:   }",
          "4813:     sqlite3WhereClausePrint(sWLB.pWC);",
          "4814:   }",
          "4815: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4813:     sqlite3DebugPrintf(\"---- WHERE clause at start of analysis:\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4948:       nTabList--;",
          "4949:     }",
          "4950:   }",
          "4951:   WHERETRACE(0xffff,(\"*** Optimizer Finished ***\\n\"));",
          "4952:   pWInfo->pParse->nQueryLoop += pWInfo->nRowOut;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4952: #if defined(WHERETRACE_ENABLED)",
          "4954:     sqlite3DebugPrintf(\"---- WHERE clause at end of analysis:\\n\");",
          "4955:     sqlite3WhereClausePrint(sWLB.pWC);",
          "4956:   }",
          "4958: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1da4397d6920ebdefbf4eeaf35c780f5478c6fb",
      "candidate_info": {
        "commit_hash": "c1da4397d6920ebdefbf4eeaf35c780f5478c6fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c1da4397d6920ebdefbf4eeaf35c780f5478c6fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Move the sqlite3VdbeSerialType() routine in-line in the OP_MakeRecord opcode. Optimizing compilers were doing this already.  By doing it manually, we can omit some redundant tests and make the whole thing run a million cycles faster and use about 80 bytes less code space.\n\nFossilOrigin-Name: d837ab0da52632699abc09320980606aef020df5020c253f99c97e24bf3c6d00",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc82b73eaac8b36950e527f12c4b5dc1e147e6f4ad2217ae43ad82882a88bfa6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2932:   pRec = pLast;",
          "2933:   do{",
          "2934:     assert( memIsValid(pRec) );",
          "",
          "[Removed Lines]",
          "2935:     serial_type = sqlite3VdbeSerialType(pRec, file_format, &len);",
          "2936:     if( pRec->flags & MEM_Zero ){",
          "2937:       if( serial_type==0 ){",
          "",
          "[Added Lines]",
          "2935:     if( pRec->flags & MEM_Null ){",
          "2936:       if( pRec->flags & MEM_Zero ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2944:         assert( pOp->p5==OPFLAG_NOCHNG_MAGIC || CORRUPT_DB );",
          "2948:       }else{",
          "2951:       }",
          "2952:     }",
          "2958:     if( pRec==pData0 ) break;",
          "2959:     pRec--;",
          "2960:   }while(1);",
          "",
          "[Removed Lines]",
          "2945:         serial_type = 10;",
          "2946:       }else if( nData ){",
          "2947:         if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "2949:         nZero += pRec->u.nZero;",
          "2950:         len -= pRec->u.nZero;",
          "2953:     nData += len;",
          "2954:     testcase( serial_type==127 );",
          "2955:     testcase( serial_type==128 );",
          "2956:     nHdr += serial_type<=127 ? 1 : sqlite3VarintLen(serial_type);",
          "2957:     pRec->uTemp = serial_type;",
          "",
          "[Added Lines]",
          "2944:         pRec->uTemp = 10;",
          "2948:       nHdr++;",
          "2949:     }else if( pRec->flags & (MEM_Int|MEM_IntReal) ){",
          "2951:       i64 i = pRec->u.i;",
          "2952:       u64 u;",
          "2953:       testcase( pRec->flags & MEM_Int );",
          "2954:       testcase( pRec->flags & MEM_IntReal );",
          "2955:       if( i<0 ){",
          "2956:         u = ~i;",
          "2957:       }else{",
          "2958:         u = i;",
          "2959:       }",
          "2960:       nHdr++;",
          "2961:       if( u<=127 ){",
          "2962:         if( (i&1)==i && file_format>=4 ){",
          "2963:           pRec->uTemp = 8+(u32)u;",
          "2964:         }else{",
          "2965:           nData++;",
          "2966:           pRec->uTemp = 1;",
          "2967:         }",
          "2968:       }else if( u<=32767 ){",
          "2969:         nData += 2;",
          "2970:         pRec->uTemp = 2;",
          "2971:       }else if( u<=8388607 ){",
          "2972:         nData += 3;",
          "2973:         pRec->uTemp = 3;",
          "2974:       }else if( u<=2147483647 ){",
          "2975:         nData += 4;",
          "2976:         pRec->uTemp = 4;",
          "2977:       }else if( u<=140737488355327LL ){",
          "2978:         nData += 6;",
          "2979:         pRec->uTemp = 5;",
          "2980:       }else{",
          "2981:         nData += 8;",
          "2982:         if( pRec->flags & MEM_IntReal ){",
          "2986:           pRec->u.r = (double)pRec->u.i;",
          "2987:           pRec->flags &= ~MEM_IntReal;",
          "2988:           pRec->flags |= MEM_Real;",
          "2989:           pRec->uTemp = 7;",
          "2990:         }else{",
          "2991:           pRec->uTemp = 6;",
          "2992:         }",
          "2993:       }",
          "2994:     }else if( pRec->flags & MEM_Real ){",
          "2995:       nHdr++;",
          "2996:       nData += 8;",
          "2997:       pRec->uTemp = 7;",
          "2998:     }else{",
          "2999:       assert( db->mallocFailed || pRec->flags&(MEM_Str|MEM_Blob) );",
          "3000:       assert( pRec->n>=0 );",
          "3001:       len = (u32)pRec->n;",
          "3002:       serial_type = (len*2) + 12 + ((pRec->flags & MEM_Str)!=0);",
          "3003:       if( pRec->flags & MEM_Zero ){",
          "3004:         serial_type += pRec->u.nZero*2;",
          "3005:         if( nData ){",
          "3006:           if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "3007:           len += pRec->u.nZero;",
          "3008:         }else{",
          "3009:           nZero += pRec->u.nZero;",
          "3010:         }",
          "3011:       }",
          "3012:       nData += len;",
          "3013:       nHdr += sqlite3VarintLen(serial_type);",
          "3014:       pRec->uTemp = serial_type;",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: int sqlite3VdbeCursorRestore(VdbeCursor*);",
          "487: u32 sqlite3VdbeSerialTypeLen(u32);",
          "488: u8 sqlite3VdbeOneByteSerialTypeLen(u8);",
          "489: u32 sqlite3VdbeSerialType(Mem*, int, u32*);",
          "490: u32 sqlite3VdbeSerialPut(unsigned char*, Mem*, u32);",
          "491: u32 sqlite3VdbeSerialGet(const unsigned char*, u32, Mem*);",
          "492: void sqlite3VdbeDeleteAuxData(sqlite3*, AuxData**, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "491: #endif",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3438: u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){",
          "3439:   int flags = pMem->flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3433: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bd207ff6d3a1c83f133293a96ea691a0adb318c",
      "candidate_info": {
        "commit_hash": "2bd207ff6d3a1c83f133293a96ea691a0adb318c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2bd207ff6d3a1c83f133293a96ea691a0adb318c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Omit errors about missing SAVEPOINTs when aborting the .archive command in the CLI.\n\nFossilOrigin-Name: 2a47387ba6aa3c294607b7641aa1c4cf70a7b27a861e1098c2f79a38e5b7036a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa47f4c6589c431cf678560ac33dea6b695052012bea2096b2c92869ed51c688",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5749:   }",
          "5750: end_ar_transaction:",
          "5751:   if( rc!=SQLITE_OK ){",
          "5753:   }else{",
          "5754:     rc = arExecSql(pAr, \"RELEASE ar;\");",
          "5755:     if( pAr->bZip && pAr->zFile ){",
          "",
          "[Removed Lines]",
          "5752:     arExecSql(pAr, \"ROLLBACK TO ar; RELEASE ar;\");",
          "",
          "[Added Lines]",
          "5752:     sqlite3_exec(pAr->db, \"ROLLBACK TO ar; RELEASE ar;\", 0, 0, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}