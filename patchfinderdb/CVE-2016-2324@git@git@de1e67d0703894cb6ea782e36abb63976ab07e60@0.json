{
  "cve_id": "CVE-2016-2324",
  "cve_desc": "Integer overflow in Git before 2.7.4 allows remote attackers to execute arbitrary code via a (1) long filename or (2) many nested trees, which triggers a heap-based buffer overflow.",
  "repo": "git/git",
  "patch_hash": "de1e67d0703894cb6ea782e36abb63976ab07e60",
  "patch_info": {
    "commit_hash": "de1e67d0703894cb6ea782e36abb63976ab07e60",
    "repo": "git/git",
    "commit_url": "https://github.com/git/git/commit/de1e67d0703894cb6ea782e36abb63976ab07e60",
    "files": [
      "builtin/pack-objects.c",
      "builtin/rev-list.c",
      "list-objects.c",
      "list-objects.h",
      "pack-bitmap-write.c",
      "pack-bitmap.c",
      "reachable.c",
      "revision.c",
      "revision.h"
    ],
    "message": "list-objects: pass full pathname to callbacks\n\nWhen we find a blob at \"a/b/c\", we currently pass this to\nour show_object_fn callbacks as two components: \"a/b/\" and\n\"c\". Callbacks which want the full value then call\npath_name(), which concatenates the two. But this is an\ninefficient interface; the path is a strbuf, and we could\nsimply append \"c\" to it temporarily, then roll back the\nlength, without creating a new copy.\n\nSo we could improve this by teaching the callsites of\npath_name() this trick (and there are only 3). But we can\nalso notice that no callback actually cares about the\nbroken-down representation, and simply pass each callback\nthe full path \"a/b/c\" as a string. The callback code becomes\neven simpler, then, as we do not have to worry about freeing\nan allocated buffer, nor rolling back our modification to\nthe strbuf.\n\nThis is theoretically less efficient, as some callbacks\nwould not bother to format the final path component. But in\npractice this is not measurable. Since we use the same\nstrbuf over and over, our work to grow it is amortized, and\nwe really only pay to memcpy a few bytes.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
    "before_after_code_files": [
      "builtin/pack-objects.c||builtin/pack-objects.c",
      "builtin/rev-list.c||builtin/rev-list.c",
      "list-objects.c||list-objects.c",
      "list-objects.h||list-objects.h",
      "pack-bitmap-write.c||pack-bitmap-write.c",
      "pack-bitmap.c||pack-bitmap.c",
      "reachable.c||reachable.c",
      "revision.c||revision.c",
      "revision.h||revision.h"
    ]
  },
  "patch_diff": {
    "builtin/pack-objects.c||builtin/pack-objects.c": [
      "File: builtin/pack-objects.c -> builtin/pack-objects.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2284:   index_commit_for_bitmap(commit);",
      "2285: }",
      "2290: {",
      "2293:  add_preferred_base_object(name);",
      "2294:  add_object_entry(obj->oid.hash, obj->type, name, 0);",
      "2295:  obj->flags |= OBJECT_ADDED;",
      "2302: }",
      "2304: static void show_edge(struct commit *commit)",
      "",
      "[Removed Lines]",
      "2287: static void show_object(struct object *obj,",
      "2288:    struct strbuf *path, const char *last,",
      "2289:    void *data)",
      "2291:  char *name = path_name(path, last);",
      "2301:  free((char *)name);",
      "",
      "[Added Lines]",
      "2287: static void show_object(struct object *obj, const char *name, void *data)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2480: }",
      "2482: static void record_recent_object(struct object *obj,",
      "2485:      void *data)",
      "2486: {",
      "2487:  sha1_array_append(&recent_objects, obj->oid.hash);",
      "",
      "[Removed Lines]",
      "2483:      struct strbuf *path,",
      "2484:      const char *last,",
      "",
      "[Added Lines]",
      "2473:      const char *name,",
      "",
      "---------------"
    ],
    "builtin/rev-list.c||builtin/rev-list.c": [
      "File: builtin/rev-list.c -> builtin/rev-list.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:  free_commit_buffer(commit);",
      "178: }",
      "183: {",
      "184:  struct rev_list_info *info = cb_data;",
      "185:  if (obj->type == OBJ_BLOB && !has_object_file(&obj->oid))",
      "",
      "[Removed Lines]",
      "180: static void finish_object(struct object *obj,",
      "181:      struct strbuf *path, const char *name,",
      "182:      void *cb_data)",
      "",
      "[Added Lines]",
      "180: static void finish_object(struct object *obj, const char *name, void *cb_data)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:   parse_object(obj->oid.hash);",
      "189: }",
      "194: {",
      "195:  struct rev_list_info *info = cb_data;",
      "197:  if (info->flags & REV_LIST_QUIET)",
      "198:   return;",
      "200: }",
      "202: static void show_edge(struct commit *commit)",
      "",
      "[Removed Lines]",
      "191: static void show_object(struct object *obj,",
      "192:    struct strbuf *path, const char *component,",
      "193:    void *cb_data)",
      "196:  finish_object(obj, path, component, cb_data);",
      "199:  show_object_with_name(stdout, obj, path, component);",
      "",
      "[Added Lines]",
      "189: static void show_object(struct object *obj, const char *name, void *cb_data)",
      "192:  finish_object(obj, name, cb_data);",
      "195:  show_object_with_name(stdout, obj, name);",
      "",
      "---------------"
    ],
    "list-objects.c||list-objects.c": [
      "File: list-objects.c -> list-objects.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:     void *cb_data)",
      "17: {",
      "18:  struct object *obj = &blob->object;",
      "20:  if (!revs->blob_objects)",
      "21:   return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:  size_t pathlen;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:  if (obj->flags & (UNINTERESTING | SEEN))",
      "25:   return;",
      "26:  obj->flags |= SEEN;",
      "28: }",
      "",
      "[Removed Lines]",
      "27:  show(obj, path, name, cb_data);",
      "",
      "[Added Lines]",
      "29:  pathlen = path->len;",
      "30:  strbuf_addstr(path, name);",
      "31:  show(obj, path->buf, cb_data);",
      "32:  strbuf_setlen(path, pathlen);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "86:  }",
      "88:  obj->flags |= SEEN;",
      "91:  strbuf_addstr(base, name);",
      "92:  if (base->len)",
      "93:   strbuf_addch(base, '/');",
      "",
      "[Removed Lines]",
      "89:  show(obj, base, name, cb_data);",
      "",
      "[Added Lines]",
      "95:  show(obj, base->buf, cb_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "207:    continue;",
      "208:   if (obj->type == OBJ_TAG) {",
      "209:    obj->flags |= SEEN;",
      "211:    continue;",
      "212:   }",
      "213:   if (!path)",
      "",
      "[Removed Lines]",
      "210:    show_object(obj, NULL, name, data);",
      "",
      "[Added Lines]",
      "214:    show_object(obj, name, data);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "219:   }",
      "220:   if (obj->type == OBJ_BLOB) {",
      "221:    process_blob(revs, (struct blob *)obj, show_object,",
      "223:    continue;",
      "224:   }",
      "225:   die(\"unknown pending object %s (%s)\",",
      "",
      "[Removed Lines]",
      "222:          NULL, path, data);",
      "",
      "[Added Lines]",
      "226:          &base, path, data);",
      "",
      "---------------"
    ],
    "list-objects.h||list-objects.h": [
      "File: list-objects.h -> list-objects.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: #define LIST_OBJECTS_H",
      "4: typedef void (*show_commit_fn)(struct commit *, void *);",
      "6: void traverse_commit_list(struct rev_info *, show_commit_fn, show_object_fn, void *);",
      "8: typedef void (*show_edge_fn)(struct commit *);",
      "",
      "[Removed Lines]",
      "5: typedef void (*show_object_fn)(struct object *, struct strbuf *, const char *, void *);",
      "",
      "[Added Lines]",
      "5: typedef void (*show_object_fn)(struct object *, const char *, void *);",
      "",
      "---------------"
    ],
    "pack-bitmap-write.c||pack-bitmap-write.c": [
      "File: pack-bitmap-write.c -> pack-bitmap-write.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "148:  return entry->in_pack_pos;",
      "149: }",
      "153: {",
      "154:  struct bitmap *base = data;",
      "155:  bitmap_set(base, find_object_pos(object->oid.hash));",
      "",
      "[Removed Lines]",
      "151: static void show_object(struct object *object, struct strbuf *path,",
      "152:    const char *last, void *data)",
      "",
      "[Added Lines]",
      "151: static void show_object(struct object *object, const char *name, void *data)",
      "",
      "---------------"
    ],
    "pack-bitmap.c||pack-bitmap.c": [
      "File: pack-bitmap.c -> pack-bitmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "414:  return bitmap_pos + bitmap_git.pack->num_objects;",
      "415: }",
      "419: {",
      "420:  struct bitmap *base = data;",
      "421:  int bitmap_pos;",
      "423:  bitmap_pos = bitmap_position(object->oid.hash);",
      "427:   bitmap_pos = ext_index_add_object(object, name);",
      "431:  bitmap_set(base, bitmap_pos);",
      "432: }",
      "",
      "[Removed Lines]",
      "417: static void show_object(struct object *object, struct strbuf *path,",
      "418:    const char *last, void *data)",
      "425:  if (bitmap_pos < 0) {",
      "426:   char *name = path_name(path, last);",
      "428:   free(name);",
      "429:  }",
      "",
      "[Added Lines]",
      "417: static void show_object(struct object *object, const char *name, void *data)",
      "424:  if (bitmap_pos < 0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "894:  size_t seen;",
      "895: };",
      "900: {",
      "901:  struct bitmap_test_data *tdata = data;",
      "902:  int bitmap_pos;",
      "",
      "[Removed Lines]",
      "897: static void test_show_object(struct object *object,",
      "898:         struct strbuf *path,",
      "899:         const char *last, void *data)",
      "",
      "[Added Lines]",
      "893: static void test_show_object(struct object *object, const char *name,",
      "894:         void *data)",
      "",
      "---------------"
    ],
    "reachable.c||reachable.c": [
      "File: reachable.c -> reachable.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: {",
      "49:  update_progress(data);",
      "50: }",
      "52: static void mark_commit(struct commit *c, void *data)",
      "53: {",
      "55: }",
      "57: struct recent_data {",
      "",
      "[Removed Lines]",
      "46: static void mark_object(struct object *obj, struct strbuf *path,",
      "47:    const char *name, void *data)",
      "54:  mark_object(&c->object, NULL, NULL, data);",
      "",
      "[Added Lines]",
      "46: static void mark_object(struct object *obj, const char *name, void *data)",
      "53:  mark_object(&c->object, NULL, data);",
      "",
      "---------------"
    ],
    "revision.c||revision.c": [
      "File: revision.c -> revision.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: static const char *term_bad;",
      "26: static const char *term_good;",
      "29: {",
      "43:  fprintf(out, \"%s \", oid_to_hex(&obj->oid));",
      "44:  for (p = name; *p && *p != '\\n'; p++)",
      "45:   fputc(*p, out);",
      "46:  fputc('\\n', out);",
      "49: }",
      "51: static void mark_blob_uninteresting(struct blob *blob)",
      "",
      "[Removed Lines]",
      "28: char *path_name(struct strbuf *path, const char *name)",
      "30:  struct strbuf ret = STRBUF_INIT;",
      "31:  if (path)",
      "32:   strbuf_addbuf(&ret, path);",
      "33:  strbuf_addstr(&ret, name);",
      "34:  return strbuf_detach(&ret, NULL);",
      "35: }",
      "37: void show_object_with_name(FILE *out, struct object *obj,",
      "38:       struct strbuf *path, const char *component)",
      "39: {",
      "40:  char *name = path_name(path, component);",
      "41:  char *p;",
      "48:  free(name);",
      "",
      "[Added Lines]",
      "28: void show_object_with_name(FILE *out, struct object *obj, const char *name)",
      "30:  const char *p;",
      "",
      "---------------"
    ],
    "revision.h||revision.h": [
      "File: revision.h -> revision.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "260: char *path_name(struct strbuf *path, const char *name);",
      "265: extern void add_pending_object(struct rev_info *revs,",
      "266:           struct object *obj, const char *name);",
      "",
      "[Removed Lines]",
      "262: extern void show_object_with_name(FILE *, struct object *,",
      "263:       struct strbuf *, const char *);",
      "",
      "[Added Lines]",
      "262: extern void show_object_with_name(FILE *, struct object *, const char *);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2824e1841b99393d2469c495253d547c643bd8f1",
      "candidate_info": {
        "commit_hash": "2824e1841b99393d2469c495253d547c643bd8f1",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/2824e1841b99393d2469c495253d547c643bd8f1",
        "files": [
          "builtin/pack-objects.c",
          "builtin/rev-list.c",
          "list-objects.c",
          "list-objects.h",
          "pack-bitmap-write.c",
          "pack-bitmap.c",
          "reachable.c",
          "revision.c",
          "revision.h"
        ],
        "message": "list-objects: pass full pathname to callbacks\n\nWhen we find a blob at \"a/b/c\", we currently pass this to\nour show_object_fn callbacks as two components: \"a/b/\" and\n\"c\". Callbacks which want the full value then call\npath_name(), which concatenates the two. But this is an\ninefficient interface; the path is a strbuf, and we could\nsimply append \"c\" to it temporarily, then roll back the\nlength, without creating a new copy.\n\nSo we could improve this by teaching the callsites of\npath_name() this trick (and there are only 3). But we can\nalso notice that no callback actually cares about the\nbroken-down representation, and simply pass each callback\nthe full path \"a/b/c\" as a string. The callback code becomes\neven simpler, then, as we do not have to worry about freeing\nan allocated buffer, nor rolling back our modification to\nthe strbuf.\n\nThis is theoretically less efficient, as some callbacks\nwould not bother to format the final path component. But in\npractice this is not measurable. Since we use the same\nstrbuf over and over, our work to grow it is amortized, and\nwe really only pay to memcpy a few bytes.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "before_after_code_files": [
          "builtin/pack-objects.c||builtin/pack-objects.c",
          "builtin/rev-list.c||builtin/rev-list.c",
          "list-objects.c||list-objects.c",
          "list-objects.h||list-objects.h",
          "pack-bitmap-write.c||pack-bitmap-write.c",
          "pack-bitmap.c||pack-bitmap.c",
          "reachable.c||reachable.c",
          "revision.c||revision.c",
          "revision.h||revision.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "builtin/pack-objects.c||builtin/pack-objects.c",
            "builtin/rev-list.c||builtin/rev-list.c",
            "list-objects.c||list-objects.c",
            "list-objects.h||list-objects.h",
            "pack-bitmap-write.c||pack-bitmap-write.c",
            "pack-bitmap.c||pack-bitmap.c",
            "reachable.c||reachable.c",
            "revision.c||revision.c",
            "revision.h||revision.h"
          ],
          "candidate": [
            "builtin/pack-objects.c||builtin/pack-objects.c",
            "builtin/rev-list.c||builtin/rev-list.c",
            "list-objects.c||list-objects.c",
            "list-objects.h||list-objects.h",
            "pack-bitmap-write.c||pack-bitmap-write.c",
            "pack-bitmap.c||pack-bitmap.c",
            "reachable.c||reachable.c",
            "revision.c||revision.c",
            "revision.h||revision.h"
          ]
        }
      },
      "candidate_diff": {
        "builtin/pack-objects.c||builtin/pack-objects.c": [
          "File: builtin/pack-objects.c -> builtin/pack-objects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2284:   index_commit_for_bitmap(commit);",
          "2285: }",
          "2290: {",
          "2293:  add_preferred_base_object(name);",
          "2294:  add_object_entry(obj->sha1, obj->type, name, 0);",
          "2295:  obj->flags |= OBJECT_ADDED;",
          "2302: }",
          "2304: static void show_edge(struct commit *commit)",
          "",
          "[Removed Lines]",
          "2287: static void show_object(struct object *obj,",
          "2288:    struct strbuf *path, const char *last,",
          "2289:    void *data)",
          "2291:  char *name = path_name(path, last);",
          "2301:  free((char *)name);",
          "",
          "[Added Lines]",
          "2287: static void show_object(struct object *obj, const char *name, void *data)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2480: }",
          "2482: static void record_recent_object(struct object *obj,",
          "2485:      void *data)",
          "2486: {",
          "2487:  sha1_array_append(&recent_objects, obj->sha1);",
          "",
          "[Removed Lines]",
          "2483:      struct strbuf *path,",
          "2484:      const char *last,",
          "",
          "[Added Lines]",
          "2473:      const char *name,",
          "",
          "---------------"
        ],
        "builtin/rev-list.c||builtin/rev-list.c": [
          "File: builtin/rev-list.c -> builtin/rev-list.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:  free_commit_buffer(commit);",
          "178: }",
          "183: {",
          "184:  struct rev_list_info *info = cb_data;",
          "185:  if (obj->type == OBJ_BLOB && !has_sha1_file(obj->sha1))",
          "",
          "[Removed Lines]",
          "180: static void finish_object(struct object *obj,",
          "181:      struct strbuf *path, const char *name,",
          "182:      void *cb_data)",
          "",
          "[Added Lines]",
          "180: static void finish_object(struct object *obj, const char *name, void *cb_data)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   parse_object(obj->sha1);",
          "189: }",
          "194: {",
          "195:  struct rev_list_info *info = cb_data;",
          "197:  if (info->flags & REV_LIST_QUIET)",
          "198:   return;",
          "200: }",
          "202: static void show_edge(struct commit *commit)",
          "",
          "[Removed Lines]",
          "191: static void show_object(struct object *obj,",
          "192:    struct strbuf *path, const char *component,",
          "193:    void *cb_data)",
          "196:  finish_object(obj, path, component, cb_data);",
          "199:  show_object_with_name(stdout, obj, path, component);",
          "",
          "[Added Lines]",
          "189: static void show_object(struct object *obj, const char *name, void *cb_data)",
          "192:  finish_object(obj, name, cb_data);",
          "195:  show_object_with_name(stdout, obj, name);",
          "",
          "---------------"
        ],
        "list-objects.c||list-objects.c": [
          "File: list-objects.c -> list-objects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     void *cb_data)",
          "17: {",
          "18:  struct object *obj = &blob->object;",
          "20:  if (!revs->blob_objects)",
          "21:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  size_t pathlen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  if (obj->flags & (UNINTERESTING | SEEN))",
          "25:   return;",
          "26:  obj->flags |= SEEN;",
          "28: }",
          "",
          "[Removed Lines]",
          "27:  show(obj, path, name, cb_data);",
          "",
          "[Added Lines]",
          "29:  pathlen = path->len;",
          "30:  strbuf_addstr(path, name);",
          "31:  show(obj, path->buf, cb_data);",
          "32:  strbuf_setlen(path, pathlen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:  }",
          "88:  obj->flags |= SEEN;",
          "91:  strbuf_addstr(base, name);",
          "92:  if (base->len)",
          "93:   strbuf_addch(base, '/');",
          "",
          "[Removed Lines]",
          "89:  show(obj, base, name, cb_data);",
          "",
          "[Added Lines]",
          "95:  show(obj, base->buf, cb_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:    continue;",
          "208:   if (obj->type == OBJ_TAG) {",
          "209:    obj->flags |= SEEN;",
          "211:    continue;",
          "212:   }",
          "213:   if (!path)",
          "",
          "[Removed Lines]",
          "210:    show_object(obj, NULL, name, data);",
          "",
          "[Added Lines]",
          "214:    show_object(obj, name, data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:   }",
          "220:   if (obj->type == OBJ_BLOB) {",
          "221:    process_blob(revs, (struct blob *)obj, show_object,",
          "223:    continue;",
          "224:   }",
          "225:   die(\"unknown pending object %s (%s)\",",
          "",
          "[Removed Lines]",
          "222:          NULL, path, data);",
          "",
          "[Added Lines]",
          "226:          &base, path, data);",
          "",
          "---------------"
        ],
        "list-objects.h||list-objects.h": [
          "File: list-objects.h -> list-objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #define LIST_OBJECTS_H",
          "4: typedef void (*show_commit_fn)(struct commit *, void *);",
          "6: void traverse_commit_list(struct rev_info *, show_commit_fn, show_object_fn, void *);",
          "8: typedef void (*show_edge_fn)(struct commit *);",
          "",
          "[Removed Lines]",
          "5: typedef void (*show_object_fn)(struct object *, struct strbuf *, const char *, void *);",
          "",
          "[Added Lines]",
          "5: typedef void (*show_object_fn)(struct object *, const char *, void *);",
          "",
          "---------------"
        ],
        "pack-bitmap-write.c||pack-bitmap-write.c": [
          "File: pack-bitmap-write.c -> pack-bitmap-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:  return entry->in_pack_pos;",
          "149: }",
          "153: {",
          "154:  struct bitmap *base = data;",
          "155:  bitmap_set(base, find_object_pos(object->sha1));",
          "",
          "[Removed Lines]",
          "151: static void show_object(struct object *object, struct strbuf *path,",
          "152:    const char *last, void *data)",
          "",
          "[Added Lines]",
          "151: static void show_object(struct object *object, const char *name, void *data)",
          "",
          "---------------"
        ],
        "pack-bitmap.c||pack-bitmap.c": [
          "File: pack-bitmap.c -> pack-bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "422:  return bitmap_pos + bitmap_git.pack->num_objects;",
          "423: }",
          "427: {",
          "428:  struct bitmap *base = data;",
          "429:  int bitmap_pos;",
          "431:  bitmap_pos = bitmap_position(object->sha1);",
          "435:   bitmap_pos = ext_index_add_object(object, name);",
          "439:  bitmap_set(base, bitmap_pos);",
          "440: }",
          "",
          "[Removed Lines]",
          "425: static void show_object(struct object *object, struct strbuf *path,",
          "426:    const char *last, void *data)",
          "433:  if (bitmap_pos < 0) {",
          "434:   char *name = path_name(path, last);",
          "436:   free(name);",
          "437:  }",
          "",
          "[Added Lines]",
          "425: static void show_object(struct object *object, const char *name, void *data)",
          "432:  if (bitmap_pos < 0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "902:  size_t seen;",
          "903: };",
          "908: {",
          "909:  struct bitmap_test_data *tdata = data;",
          "910:  int bitmap_pos;",
          "",
          "[Removed Lines]",
          "905: static void test_show_object(struct object *object,",
          "906:         struct strbuf *path,",
          "907:         const char *last, void *data)",
          "",
          "[Added Lines]",
          "901: static void test_show_object(struct object *object, const char *name,",
          "902:         void *data)",
          "",
          "---------------"
        ],
        "reachable.c||reachable.c": [
          "File: reachable.c -> reachable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: {",
          "42:  update_progress(data);",
          "43: }",
          "45: static void mark_commit(struct commit *c, void *data)",
          "46: {",
          "48: }",
          "50: struct recent_data {",
          "",
          "[Removed Lines]",
          "39: static void mark_object(struct object *obj, struct strbuf *path,",
          "40:    const char *name, void *data)",
          "47:  mark_object(&c->object, NULL, NULL, data);",
          "",
          "[Added Lines]",
          "39: static void mark_object(struct object *obj, const char *name, void *data)",
          "46:  mark_object(&c->object, NULL, data);",
          "",
          "---------------"
        ],
        "revision.c||revision.c": [
          "File: revision.c -> revision.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: volatile show_early_output_fn_t show_early_output;",
          "25: {",
          "39:  fprintf(out, \"%s \", sha1_to_hex(obj->sha1));",
          "40:  for (p = name; *p && *p != '\\n'; p++)",
          "41:   fputc(*p, out);",
          "42:  fputc('\\n', out);",
          "45: }",
          "47: static void mark_blob_uninteresting(struct blob *blob)",
          "",
          "[Removed Lines]",
          "24: char *path_name(struct strbuf *path, const char *name)",
          "26:  struct strbuf ret = STRBUF_INIT;",
          "27:  if (path)",
          "28:   strbuf_addbuf(&ret, path);",
          "29:  strbuf_addstr(&ret, name);",
          "30:  return strbuf_detach(&ret, NULL);",
          "31: }",
          "33: void show_object_with_name(FILE *out, struct object *obj,",
          "34:       struct strbuf *path, const char *component)",
          "35: {",
          "36:  char *name = path_name(path, component);",
          "37:  char *p;",
          "44:  free(name);",
          "",
          "[Added Lines]",
          "24: void show_object_with_name(FILE *out, struct object *obj, const char *name)",
          "26:  const char *p;",
          "",
          "---------------"
        ],
        "revision.h||revision.h": [
          "File: revision.h -> revision.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: char *path_name(struct strbuf *path, const char *name);",
          "264: extern void add_pending_object(struct rev_info *revs,",
          "265:           struct object *obj, const char *name);",
          "",
          "[Removed Lines]",
          "261: extern void show_object_with_name(FILE *, struct object *,",
          "262:       struct strbuf *, const char *);",
          "",
          "[Added Lines]",
          "261: extern void show_object_with_name(FILE *, struct object *, const char *);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "34fa79a6cde56d6d428ab0d3160cb094ebad3305",
      "candidate_info": {
        "commit_hash": "34fa79a6cde56d6d428ab0d3160cb094ebad3305",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/34fa79a6cde56d6d428ab0d3160cb094ebad3305",
        "files": [
          "compat/nedmalloc/nedmalloc.c",
          "fast-import.c",
          "revision.c"
        ],
        "message": "prefer memcpy to strcpy\n\nWhen we already know the length of a string (e.g., because\nwe just malloc'd to fit it), it's nicer to use memcpy than\nstrcpy, as it makes it more obvious that we are not going to\noverflow the buffer (because the size we pass matches the\nsize in the allocation).\n\nThis also eliminates calls to strcpy, which make auditing\nthe code base harder.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "before_after_code_files": [
          "compat/nedmalloc/nedmalloc.c||compat/nedmalloc/nedmalloc.c",
          "fast-import.c||fast-import.c",
          "revision.c||revision.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "revision.c||revision.c"
          ],
          "candidate": [
            "revision.c||revision.c"
          ]
        }
      },
      "candidate_diff": {
        "compat/nedmalloc/nedmalloc.c||compat/nedmalloc/nedmalloc.c": [
          "File: compat/nedmalloc/nedmalloc.c -> compat/nedmalloc/nedmalloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "957: {",
          "958:  char *s2 = 0;",
          "959:  if (s1) {",
          "962:  }",
          "963:  return s2;",
          "964: }",
          "",
          "[Removed Lines]",
          "960:   s2 = malloc(strlen(s1) + 1);",
          "961:   strcpy(s2, s1);",
          "",
          "[Added Lines]",
          "960:   size_t len = strlen(s1) + 1;",
          "961:   s2 = malloc(len);",
          "962:   memcpy(s2, s1, len);",
          "",
          "---------------"
        ],
        "fast-import.c||fast-import.c": [
          "File: fast-import.c -> fast-import.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "645: static char *pool_strdup(const char *s)",
          "646: {",
          "649:  return r;",
          "650: }",
          "",
          "[Removed Lines]",
          "647:  char *r = pool_alloc(strlen(s) + 1);",
          "648:  strcpy(r, s);",
          "",
          "[Added Lines]",
          "647:  size_t len = strlen(s) + 1;",
          "648:  char *r = pool_alloc(len);",
          "649:  memcpy(r, s, len);",
          "",
          "---------------"
        ],
        "revision.c||revision.c": [
          "File: revision.c -> revision.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  }",
          "39:  n = xmalloc(len);",
          "40:  m = n + len - (nlen + 1);",
          "42:  for (p = path; p; p = p->up) {",
          "43:   if (p->elem_len) {",
          "44:    m -= p->elem_len + 1;",
          "",
          "[Removed Lines]",
          "41:  strcpy(m, name);",
          "",
          "[Added Lines]",
          "41:  memcpy(m, name, nlen + 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9fb9d0e3caebe97c54c101d8235e6529d5a1273",
      "candidate_info": {
        "commit_hash": "f9fb9d0e3caebe97c54c101d8235e6529d5a1273",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/f9fb9d0e3caebe97c54c101d8235e6529d5a1273",
        "files": [
          "revision.c"
        ],
        "message": "show_object_with_name: simplify by using path_name()\n\nWhen \"git rev-list\" shows an object with its associated path\nname, it does so by walking the name_path linked list and\nprinting each component (stopping at any embedded NULs or\nnewlines).\n\nWe'd like to eventually get rid of name_path entirely in\nfavor of a single buffer, and dropping this custom printing\ncode is part of that. As a first step, let's use path_name()\nto format the list into a single buffer, and print that.\nThis is strictly less efficient than the original, but it's\na temporary step in the refactoring; our end game will be to\nget the fully formatted name in the first place.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "before_after_code_files": [
          "revision.c||revision.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "revision.c||revision.c"
          ],
          "candidate": [
            "revision.c||revision.c"
          ]
        }
      },
      "candidate_diff": {
        "revision.c||revision.c": [
          "File: revision.c -> revision.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  return n;",
          "50: }",
          "81: void show_object_with_name(FILE *out, struct object *obj,",
          "82:       const struct name_path *path, const char *component)",
          "83: {",
          "89:  fprintf(out, \"%s \", oid_to_hex(&obj->oid));",
          "91:  fputc('\\n', out);",
          "92: }",
          "94: static void mark_blob_uninteresting(struct blob *blob)",
          "",
          "[Removed Lines]",
          "52: static int show_path_component_truncated(FILE *out, const char *name, int len)",
          "53: {",
          "54:  int cnt;",
          "55:  for (cnt = 0; cnt < len; cnt++) {",
          "56:   int ch = name[cnt];",
          "57:   if (!ch || ch == '\\n')",
          "58:    return -1;",
          "59:   fputc(ch, out);",
          "60:  }",
          "61:  return len;",
          "62: }",
          "64: static int show_path_truncated(FILE *out, const struct name_path *path)",
          "65: {",
          "66:  int emitted, ours;",
          "68:  if (!path)",
          "69:   return 0;",
          "70:  emitted = show_path_truncated(out, path->up);",
          "71:  if (emitted < 0)",
          "72:   return emitted;",
          "73:  if (emitted)",
          "74:   fputc('/', out);",
          "75:  ours = show_path_component_truncated(out, path->elem, path->elem_len);",
          "76:  if (ours < 0)",
          "77:   return ours;",
          "78:  return ours || emitted;",
          "79: }",
          "84:  struct name_path leaf;",
          "85:  leaf.up = (struct name_path *)path;",
          "86:  leaf.elem = component;",
          "87:  leaf.elem_len = strlen(component);",
          "90:  show_path_truncated(out, &leaf);",
          "",
          "[Added Lines]",
          "55:  char *name = path_name(path, component);",
          "56:  char *p;",
          "59:  for (p = name; *p && *p != '\\n'; p++)",
          "60:   fputc(*p, out);",
          "63:  free(name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abcb86553d3ec4afffa4e3963089dffe0559740e",
      "candidate_info": {
        "commit_hash": "abcb86553d3ec4afffa4e3963089dffe0559740e",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/abcb86553d3ec4afffa4e3963089dffe0559740e",
        "files": [
          "builtin/pack-objects.c",
          "reachable.c",
          "reachable.h",
          "t/t6501-freshen-objects.sh"
        ],
        "message": "pack-objects: match prune logic for discarding objects\n\nA recent commit taught git-prune to keep non-recent objects\nthat are reachable from recent ones. However, pack-objects,\nwhen loosening unreachable objects, tries to optimize out\nthe write in the case that the object will be immediately\npruned. It now gets this wrong, since its rule does not\nreflect the new prune code (and this can be seen by running\nt6501 with a strategically placed repack).\n\nLet's teach pack-objects similar logic.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "before_after_code_files": [
          "builtin/pack-objects.c||builtin/pack-objects.c",
          "reachable.c||reachable.c",
          "reachable.h||reachable.h",
          "t/t6501-freshen-objects.sh||t/t6501-freshen-objects.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "builtin/pack-objects.c||builtin/pack-objects.c",
            "reachable.c||reachable.c"
          ],
          "candidate": [
            "builtin/pack-objects.c||builtin/pack-objects.c",
            "reachable.c||reachable.c"
          ]
        }
      },
      "candidate_diff": {
        "builtin/pack-objects.c||builtin/pack-objects.c": [
          "File: builtin/pack-objects.c -> builtin/pack-objects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"streaming.h\"",
          "21: #include \"thread-utils.h\"",
          "22: #include \"pack-bitmap.h\"",
          "24: static const char *pack_usage[] = {",
          "25:  N_(\"git pack-objects --stdout [options...] [< ref-list | < object-list]\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"reachable.h\"",
          "24: #include \"sha1-array.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2407:  return 0;",
          "2408: }",
          "2410: static int loosened_object_can_be_discarded(const unsigned char *sha1,",
          "2411:          unsigned long mtime)",
          "2412: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2419: static struct sha1_array recent_objects;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2414:   return 0;",
          "2415:  if (mtime > unpack_unreachable_expiration)",
          "2416:   return 0;",
          "2417:  return 1;",
          "2418: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2428:  if (sha1_array_lookup(&recent_objects, sha1) >= 0)",
          "2429:   return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2470:  return 0;",
          "2471: }",
          "2473: static void get_object_list(int ac, const char **av)",
          "2474: {",
          "2475:  struct rev_info revs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2486: static void record_recent_object(struct object *obj,",
          "2487:      const struct name_path *path,",
          "2488:      const char *last,",
          "2489:      void *data)",
          "2490: {",
          "2491:  sha1_array_append(&recent_objects, obj->sha1);",
          "2492: }",
          "2494: static void record_recent_commit(struct commit *commit, void *data)",
          "2495: {",
          "2496:  sha1_array_append(&recent_objects, commit->object.sha1);",
          "2497: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2517:  mark_edges_uninteresting(&revs, show_edge);",
          "2518:  traverse_commit_list(&revs, show_commit, show_object, NULL);",
          "2520:  if (keep_unreachable)",
          "2521:   add_objects_in_unpacked_packs(&revs);",
          "2522:  if (unpack_unreachable)",
          "2523:   loosen_unused_packed_objects(&revs);",
          "2524: }",
          "2526: static int option_parse_index_version(const struct option *opt,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2546:  if (unpack_unreachable_expiration) {",
          "2547:   revs.ignore_missing_links = 1;",
          "2548:   if (add_unseen_recent_objects_to_traversal(&revs,",
          "2549:     unpack_unreachable_expiration))",
          "2550:    die(\"unable to add recent objects\");",
          "2551:   if (prepare_revision_walk(&revs))",
          "2552:    die(\"revision walk setup failed\");",
          "2553:   traverse_commit_list(&revs, record_recent_commit,",
          "2554:          record_recent_object, NULL);",
          "2555:  }",
          "2562:  sha1_array_clear(&recent_objects);",
          "",
          "---------------"
        ],
        "reachable.c||reachable.c": [
          "File: reachable.c -> reachable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  return 0;",
          "184: }",
          "188: {",
          "189:  struct recent_data data;",
          "190:  int r;",
          "",
          "[Removed Lines]",
          "186: static int add_unseen_recent_objects_to_traversal(struct rev_info *revs,",
          "187:         unsigned long timestamp)",
          "",
          "[Added Lines]",
          "186: int add_unseen_recent_objects_to_traversal(struct rev_info *revs,",
          "187:         unsigned long timestamp)",
          "",
          "---------------"
        ],
        "reachable.h||reachable.h": [
          "File: reachable.h -> reachable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #define REACHEABLE_H",
          "4: struct progress;",
          "5: extern void mark_reachable_objects(struct rev_info *revs, int mark_reflog,",
          "6:        unsigned long mark_recent, struct progress *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: extern int add_unseen_recent_objects_to_traversal(struct rev_info *revs,",
          "6:         unsigned long timestamp);",
          "",
          "---------------"
        ],
        "t/t6501-freshen-objects.sh||t/t6501-freshen-objects.sh": [
          "File: t/t6501-freshen-objects.sh -> t/t6501-freshen-objects.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  git commit -m \"$1\"",
          "40: }",
          "88: test_done",
          "",
          "[Removed Lines]",
          "42: test_expect_success 'disable reflogs' '",
          "43:  git config core.logallrefupdates false &&",
          "44:  rm -rf .git/logs",
          "45: '",
          "47: test_expect_success 'setup basic history' '",
          "48:  commit base",
          "49: '",
          "51: test_expect_success 'create and abandon some objects' '",
          "52:  git checkout -b experiment &&",
          "53:  commit abandon &&",
          "54:  git checkout master &&",
          "55:  git branch -D experiment",
          "56: '",
          "58: test_expect_success 'simulate time passing' '",
          "59:  find .git/objects -type f |",
          "60:  xargs test-chmtime -v -86400",
          "61: '",
          "63: test_expect_success 'start writing new commit with old blob' '",
          "64:  tree=$(",
          "65:   GIT_INDEX_FILE=index.tmp &&",
          "66:   export GIT_INDEX_FILE &&",
          "67:   git read-tree HEAD &&",
          "68:   add unrelated &&",
          "69:   add abandon &&",
          "70:   git write-tree",
          "71:  )",
          "72: '",
          "74: test_expect_success 'simultaneous gc' '",
          "75:  git gc --prune=12.hours.ago",
          "76: '",
          "78: test_expect_success 'finish writing out commit' '",
          "79:  commit=$(echo foo | git commit-tree -p HEAD $tree) &&",
          "80:  git update-ref HEAD $commit",
          "81: '",
          "83: # \"abandon\" blob should have been rescued by reference from new tree",
          "84: test_expect_success 'repository passes fsck' '",
          "85:  git fsck",
          "86: '",
          "",
          "[Added Lines]",
          "42: maybe_repack () {",
          "43:  if test -n \"$repack\"; then",
          "44:   git repack -ad",
          "45:  fi",
          "46: }",
          "48: for repack in '' true; do",
          "49:  title=${repack:+repack}",
          "50:  title=${title:-loose}",
          "52:  test_expect_success \"make repo completely empty ($title)\" '",
          "53:   rm -rf .git &&",
          "54:   git init",
          "55:  '",
          "57:  test_expect_success \"disable reflogs ($title)\" '",
          "58:   git config core.logallrefupdates false &&",
          "59:   rm -rf .git/logs",
          "60:  '",
          "62:  test_expect_success \"setup basic history ($title)\" '",
          "63:   commit base",
          "64:  '",
          "66:  test_expect_success \"create and abandon some objects ($title)\" '",
          "67:   git checkout -b experiment &&",
          "68:   commit abandon &&",
          "69:   maybe_repack &&",
          "70:   git checkout master &&",
          "71:   git branch -D experiment",
          "72:  '",
          "74:  test_expect_success \"simulate time passing ($title)\" '",
          "75:   find .git/objects -type f |",
          "76:   xargs test-chmtime -v -86400",
          "77:  '",
          "79:  test_expect_success \"start writing new commit with old blob ($title)\" '",
          "80:   tree=$(",
          "81:    GIT_INDEX_FILE=index.tmp &&",
          "82:    export GIT_INDEX_FILE &&",
          "83:    git read-tree HEAD &&",
          "84:    add unrelated &&",
          "85:    add abandon &&",
          "86:    git write-tree",
          "87:   )",
          "88:  '",
          "90:  test_expect_success \"simultaneous gc ($title)\" '",
          "91:   git gc --prune=12.hours.ago",
          "92:  '",
          "94:  test_expect_success \"finish writing out commit ($title)\" '",
          "95:   commit=$(echo foo | git commit-tree -p HEAD $tree) &&",
          "96:   git update-ref HEAD $commit",
          "97:  '",
          "99:  # \"abandon\" blob should have been rescued by reference from new tree",
          "100:  test_expect_success \"repository passes fsck ($title)\" '",
          "101:   git fsck",
          "102:  '",
          "103: done",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd64516aca4d4e22acb33c71429d293a14d355cf",
      "candidate_info": {
        "commit_hash": "bd64516aca4d4e22acb33c71429d293a14d355cf",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/bd64516aca4d4e22acb33c71429d293a14d355cf",
        "files": [
          "builtin/pack-objects.c",
          "builtin/rev-list.c",
          "list-objects.c",
          "list-objects.h",
          "pack-bitmap-write.c",
          "pack-bitmap.c",
          "reachable.c",
          "revision.c",
          "revision.h"
        ],
        "message": "list-objects: drop name_path entirely\n\nIn the previous commit, we left name_path as a thin wrapper\naround a strbuf. This patch drops it entirely. As a result,\nevery show_object_fn callback needs to be adjusted. However,\nnone of their code needs to be changed at all, because the\nonly use was to pass it to path_name(), which now handles\nthe bare strbuf.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "before_after_code_files": [
          "builtin/pack-objects.c||builtin/pack-objects.c",
          "builtin/rev-list.c||builtin/rev-list.c",
          "list-objects.c||list-objects.c",
          "list-objects.h||list-objects.h",
          "pack-bitmap-write.c||pack-bitmap-write.c",
          "pack-bitmap.c||pack-bitmap.c",
          "reachable.c||reachable.c",
          "revision.c||revision.c",
          "revision.h||revision.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "builtin/pack-objects.c||builtin/pack-objects.c",
            "builtin/rev-list.c||builtin/rev-list.c",
            "list-objects.c||list-objects.c",
            "list-objects.h||list-objects.h",
            "pack-bitmap-write.c||pack-bitmap-write.c",
            "pack-bitmap.c||pack-bitmap.c",
            "reachable.c||reachable.c",
            "revision.c||revision.c",
            "revision.h||revision.h"
          ],
          "candidate": [
            "builtin/pack-objects.c||builtin/pack-objects.c",
            "builtin/rev-list.c||builtin/rev-list.c",
            "list-objects.c||list-objects.c",
            "list-objects.h||list-objects.h",
            "pack-bitmap-write.c||pack-bitmap-write.c",
            "pack-bitmap.c||pack-bitmap.c",
            "reachable.c||reachable.c",
            "revision.c||revision.c",
            "revision.h||revision.h"
          ]
        }
      },
      "candidate_diff": {
        "builtin/pack-objects.c||builtin/pack-objects.c": [
          "File: builtin/pack-objects.c -> builtin/pack-objects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2285: }",
          "2287: static void show_object(struct object *obj,",
          "2289:    void *data)",
          "2290: {",
          "2291:  char *name = path_name(path, last);",
          "",
          "[Removed Lines]",
          "2288:    const struct name_path *path, const char *last,",
          "",
          "[Added Lines]",
          "2288:    struct strbuf *path, const char *last,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2480: }",
          "2482: static void record_recent_object(struct object *obj,",
          "2484:      const char *last,",
          "2485:      void *data)",
          "2486: {",
          "",
          "[Removed Lines]",
          "2483:      const struct name_path *path,",
          "",
          "[Added Lines]",
          "2483:      struct strbuf *path,",
          "",
          "---------------"
        ],
        "builtin/rev-list.c||builtin/rev-list.c": [
          "File: builtin/rev-list.c -> builtin/rev-list.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178: }",
          "180: static void finish_object(struct object *obj,",
          "182:      void *cb_data)",
          "183: {",
          "184:  struct rev_list_info *info = cb_data;",
          "",
          "[Removed Lines]",
          "181:      const struct name_path *path, const char *name,",
          "",
          "[Added Lines]",
          "181:      struct strbuf *path, const char *name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: }",
          "191: static void show_object(struct object *obj,",
          "193:    void *cb_data)",
          "194: {",
          "195:  struct rev_list_info *info = cb_data;",
          "",
          "[Removed Lines]",
          "192:    const struct name_path *path, const char *component,",
          "",
          "[Added Lines]",
          "192:    struct strbuf *path, const char *component,",
          "",
          "---------------"
        ],
        "list-objects.c||list-objects.c": [
          "File: list-objects.c -> list-objects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: static void process_blob(struct rev_info *revs,",
          "12:     struct blob *blob,",
          "13:     show_object_fn show,",
          "15:     const char *name,",
          "16:     void *cb_data)",
          "17: {",
          "",
          "[Removed Lines]",
          "14:     struct name_path *path,",
          "",
          "[Added Lines]",
          "14:     struct strbuf *path,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: static void process_gitlink(struct rev_info *revs,",
          "53:        const unsigned char *sha1,",
          "54:        show_object_fn show,",
          "56:        const char *name,",
          "57:        void *cb_data)",
          "58: {",
          "",
          "[Removed Lines]",
          "55:        struct name_path *path,",
          "",
          "[Added Lines]",
          "55:        struct strbuf *path,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:  struct object *obj = &tree->object;",
          "70:  struct tree_desc desc;",
          "71:  struct name_entry entry;",
          "73:  enum interesting match = revs->diffopt.pathspec.nr == 0 ?",
          "74:   all_entries_interesting: entry_not_interesting;",
          "75:  int baselen = base->len;",
          "",
          "[Removed Lines]",
          "72:  struct name_path me;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:  }",
          "89:  obj->flags |= SEEN;",
          "93:  strbuf_addstr(base, name);",
          "94:  if (base->len)",
          "",
          "[Removed Lines]",
          "90:  me.base = base;",
          "91:  show(obj, &me, name, cb_data);",
          "",
          "[Added Lines]",
          "89:  show(obj, base, name, cb_data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:          cb_data);",
          "114:   else if (S_ISGITLINK(entry.mode))",
          "115:    process_gitlink(revs, entry.sha1,",
          "117:      cb_data);",
          "118:   else",
          "119:    process_blob(revs,",
          "120:          lookup_blob(entry.sha1),",
          "122:          cb_data);",
          "123:  }",
          "124:  strbuf_setlen(base, baselen);",
          "",
          "[Removed Lines]",
          "116:      show, &me, entry.path,",
          "121:          show, &me, entry.path,",
          "",
          "[Added Lines]",
          "114:      show, base, entry.path,",
          "119:          show, base, entry.path,",
          "",
          "---------------"
        ],
        "list-objects.h||list-objects.h": [
          "File: list-objects.h -> list-objects.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #define LIST_OBJECTS_H",
          "4: typedef void (*show_commit_fn)(struct commit *, void *);",
          "6: void traverse_commit_list(struct rev_info *, show_commit_fn, show_object_fn, void *);",
          "8: typedef void (*show_edge_fn)(struct commit *);",
          "",
          "[Removed Lines]",
          "5: typedef void (*show_object_fn)(struct object *, const struct name_path *, const char *, void *);",
          "",
          "[Added Lines]",
          "5: typedef void (*show_object_fn)(struct object *, struct strbuf *, const char *, void *);",
          "",
          "---------------"
        ],
        "pack-bitmap-write.c||pack-bitmap-write.c": [
          "File: pack-bitmap-write.c -> pack-bitmap-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:  return entry->in_pack_pos;",
          "149: }",
          "152:    const char *last, void *data)",
          "153: {",
          "154:  struct bitmap *base = data;",
          "",
          "[Removed Lines]",
          "151: static void show_object(struct object *object, const struct name_path *path,",
          "",
          "[Added Lines]",
          "151: static void show_object(struct object *object, struct strbuf *path,",
          "",
          "---------------"
        ],
        "pack-bitmap.c||pack-bitmap.c": [
          "File: pack-bitmap.c -> pack-bitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:  return bitmap_pos + bitmap_git.pack->num_objects;",
          "415: }",
          "418:    const char *last, void *data)",
          "419: {",
          "420:  struct bitmap *base = data;",
          "",
          "[Removed Lines]",
          "417: static void show_object(struct object *object, const struct name_path *path,",
          "",
          "[Added Lines]",
          "417: static void show_object(struct object *object, struct strbuf *path,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "895: };",
          "897: static void test_show_object(struct object *object,",
          "899:         const char *last, void *data)",
          "900: {",
          "901:  struct bitmap_test_data *tdata = data;",
          "",
          "[Removed Lines]",
          "898:         const struct name_path *path,",
          "",
          "[Added Lines]",
          "898:         struct strbuf *path,",
          "",
          "---------------"
        ],
        "reachable.c||reachable.c": [
          "File: reachable.c -> reachable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:    const char *name, void *data)",
          "48: {",
          "49:  update_progress(data);",
          "",
          "[Removed Lines]",
          "46: static void mark_object(struct object *obj, const struct name_path *path,",
          "",
          "[Added Lines]",
          "46: static void mark_object(struct object *obj, struct strbuf *path,",
          "",
          "---------------"
        ],
        "revision.c||revision.c": [
          "File: revision.c -> revision.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: static const char *term_bad;",
          "26: static const char *term_good;",
          "29: {",
          "30:  struct strbuf ret = STRBUF_INIT;",
          "31:  if (path)",
          "33:  strbuf_addstr(&ret, name);",
          "34:  return strbuf_detach(&ret, NULL);",
          "35: }",
          "37: void show_object_with_name(FILE *out, struct object *obj,",
          "39: {",
          "40:  char *name = path_name(path, component);",
          "41:  char *p;",
          "",
          "[Removed Lines]",
          "28: char *path_name(const struct name_path *path, const char *name)",
          "32:   strbuf_addbuf(&ret, path->base);",
          "38:       const struct name_path *path, const char *component)",
          "",
          "[Added Lines]",
          "28: char *path_name(struct strbuf *path, const char *name)",
          "32:   strbuf_addbuf(&ret, path);",
          "38:       struct strbuf *path, const char *component)",
          "",
          "---------------"
        ],
        "revision.h||revision.h": [
          "File: revision.h -> revision.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "257: extern void mark_parents_uninteresting(struct commit *commit);",
          "258: extern void mark_tree_uninteresting(struct tree *tree);",
          "266: extern void show_object_with_name(FILE *, struct object *,",
          "269: extern void add_pending_object(struct rev_info *revs,",
          "270:           struct object *obj, const char *name);",
          "",
          "[Removed Lines]",
          "260: struct name_path {",
          "261:  struct strbuf *base;",
          "262: };",
          "264: char *path_name(const struct name_path *path, const char *name);",
          "267:       const struct name_path *, const char *);",
          "",
          "[Added Lines]",
          "260: char *path_name(struct strbuf *path, const char *name);",
          "263:       struct strbuf *, const char *);",
          "",
          "---------------"
        ]
      }
    }
  ]
}