{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
      "candidate_info": {
        "commit_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Performance optimization on sqlite3GenerateConstraintChecks() - bypass the loop that checks each column for NOT NULL constraints if it is known in advance that the table has no NOT NULL constraints.\n\nFossilOrigin-Name: e3c3f4d7872f431a95627d52553101388c1e39458cc7e7f93fc81255f49a89a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c0042bd5ccd83f8794d19cbb1ec7564584f0dce54bfebc0ada00b836aca065f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836:         pTab->aCol[i].notNull = OE_Abort;",
          "1837:       }",
          "1838:     }",
          "1839:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1839:     pTab->tabFlags |= TF_HasNotNull;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1385:         onError = OE_Abort;",
          "1388:       }",
          "1403:       }",
          "1409:       }",
          "1410:     }",
          "1411:   }",
          "1415: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "1355:   for(i=0; i<nCol; i++){",
          "1356:     if( i==pTab->iPKey ){",
          "1358:     }",
          "1359:     if( aiChng && aiChng[i]<0 ){",
          "1361:       continue;",
          "1362:     }",
          "1363:     onError = pTab->aCol[i].notNull;",
          "1365:     if( overrideError!=OE_Default ){",
          "1366:       onError = overrideError;",
          "1367:     }else if( onError==OE_Default ){",
          "1368:       onError = OE_Abort;",
          "1369:     }",
          "1370:     if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1371:       onError = OE_Abort;",
          "1372:     }",
          "1373:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1374:         || onError==OE_Ignore || onError==OE_Replace );",
          "1375:     addr1 = 0;",
          "1376:     switch( onError ){",
          "1377:       case OE_Replace: {",
          "1378:         assert( onError==OE_Replace );",
          "1379:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1380:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1381:           VdbeCoverage(v);",
          "1382:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1383:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1384:           VdbeCoverage(v);",
          "1389:       case OE_Abort:",
          "1390:         sqlite3MayAbort(pParse);",
          "1392:       case OE_Rollback:",
          "1393:       case OE_Fail: {",
          "1394:         char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1395:                                     pTab->aCol[i].zName);",
          "1396:         sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL, onError,",
          "1397:                           regNewData+1+i);",
          "1398:         sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1399:         sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1400:         VdbeCoverage(v);",
          "1401:         if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1402:         break;",
          "1404:       default: {",
          "1405:         assert( onError==OE_Ignore );",
          "1406:         sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1407:         VdbeCoverage(v);",
          "1408:         break;",
          "",
          "[Added Lines]",
          "1355:   if( pTab->tabFlags & TF_HasNotNull ){",
          "1356:     for(i=0; i<nCol; i++){",
          "1357:       onError = pTab->aCol[i].notNull;",
          "1359:       assert( pTab->tabFlags & TF_HasNotNull );",
          "1360:       if( i==pTab->iPKey ){",
          "1362:       }",
          "1363:       if( aiChng && aiChng[i]<0 ){",
          "1365:         continue;",
          "1366:       }",
          "1367:       if( overrideError!=OE_Default ){",
          "1368:         onError = overrideError;",
          "1369:       }else if( onError==OE_Default ){",
          "1372:       if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1373:         onError = OE_Abort;",
          "1375:       assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1376:           || onError==OE_Ignore || onError==OE_Replace );",
          "1377:       addr1 = 0;",
          "1378:       switch( onError ){",
          "1379:         case OE_Replace: {",
          "1380:           assert( onError==OE_Replace );",
          "1381:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1382:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1383:             VdbeCoverage(v);",
          "1384:           sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1385:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1386:             VdbeCoverage(v);",
          "1387:           onError = OE_Abort;",
          "1390:         }",
          "1391:         case OE_Abort:",
          "1392:           sqlite3MayAbort(pParse);",
          "1394:         case OE_Rollback:",
          "1395:         case OE_Fail: {",
          "1396:           char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1397:                                       pTab->aCol[i].zName);",
          "1398:           sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1399:                             onError, regNewData+1+i);",
          "1400:           sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1401:           sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1402:           VdbeCoverage(v);",
          "1403:           if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1404:           break;",
          "1405:         }",
          "1406:         default: {",
          "1407:           assert( onError==OE_Ignore );",
          "1408:           sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1409:           VdbeCoverage(v);",
          "1410:           break;",
          "1411:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
      "candidate_info": {
        "commit_hash": "01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Trivial performance improvement for balance().\n\nFossilOrigin-Name: c7920f5569022f645ec4dbfce8c228880263785c708c2c0ac065e770c438b1d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 777fec84a5db968e033883920586ec0afef65578be0c1eb3021fce525111edde",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8307:   VVA_ONLY( int balance_deeper_called = 0 );",
          "8309:   do {",
          "8311:     MemPage *pPage = pCur->pPage;",
          "8313:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "8315:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8310:     int iPage = pCur->iPage;",
          "8314:     if( iPage==0 ){",
          "",
          "[Added Lines]",
          "8310:     int iPage;",
          "8314:     if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8315:       break;",
          "8316:     }else if( (iPage = pCur->iPage)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8332:       }else{",
          "8333:         break;",
          "8334:       }",
          "8337:     }else{",
          "8338:       MemPage * const pParent = pCur->apPage[iPage-1];",
          "8339:       int const iIdx = pCur->aiIdx[iPage-1];",
          "",
          "[Removed Lines]",
          "8335:     }else if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8336:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
      "candidate_info": {
        "commit_hash": "c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c6b24ab1b136b151c1d5c0d20cd9ab9991428750",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/upsert1.test"
        ],
        "message": "Do not allow UPSERT of a view.\n\nFossilOrigin-Name: ebf897e861c19e214c57f1e73841b505182202cc8d7d39e24d5a1e5625e26b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/upsert1.test||test/upsert1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7810062ec2489e1c5ca6638dbeb0892e4ce376c5c1834a31d1a332ebab8a871",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "949:               pTab->zName);",
          "950:       goto insert_cleanup;",
          "951:     }",
          "952:     if( sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget) ){",
          "953:       goto insert_cleanup;",
          "954:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952:     if( pTab->pSelect ){",
          "953:       sqlite3ErrorMsg(pParse, \"cannot UPSERT a view\");",
          "954:       goto insert_cleanup;",
          "955:     }",
          "",
          "---------------"
        ],
        "test/upsert1.test||test/upsert1.test": [
          "File: test/upsert1.test -> test/upsert1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   REINDEX;",
          "222: } {ok}",
          "224: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: # 2019-12-06 gramfuzz find",
          "225: sqlite3 db :memory:",
          "226: do_execsql_test upsert1-900 {",
          "227:   CREATE VIEW t1(a) AS SELECT 1;",
          "228:   CREATE TRIGGER t1r1 INSTEAD OF INSERT ON t1 BEGIN",
          "229:      SELECT 2;",
          "230:   END;",
          "231: }",
          "232: do_catchsql_test upsert1-910 {",
          "233:   INSERT INTO t1 VALUES(3) ON CONFLICT(x) DO NOTHING;",
          "234: } {1 {cannot UPSERT a view}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
      "candidate_info": {
        "commit_hash": "4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fc836546e035fc18a4bf66c3bb895dc5af10fa0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/in.test"
        ],
        "message": "Fix a bug introduced earlier today by check-in [88833a9c2849c959]. Ticket [29f635e0af71234b]\n\nFossilOrigin-Name: 6e7b4527d32cc1be0294614b9d7363d4b59cf654a954b86515b3f6888975ce73",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9490683ae883561fa347cbe54ebdd61188d849b4852d904b508250ba5d0807ef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3132:     }",
          "3133:     bLhsReal = sqlite3ExprAffinity(pExpr->pLeft)==SQLITE_AFF_REAL;",
          "3134:     for(ii=0; ii<pList->nExpr; ii++){",
          "3136:       if( bLhsReal ){",
          "3137:         sqlite3VdbeAddOp4(v, OP_Affinity, r2, 1, 0, \"E\", P4_STATIC);",
          "3138:       }",
          "3139:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3140:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "",
          "[Removed Lines]",
          "3135:       r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "",
          "[Added Lines]",
          "3136:         r2 = regToFree = sqlite3GetTempReg(pParse);",
          "3137:         sqlite3ExprCode(pParse, pList->a[ii].pExpr, r2);",
          "3139:       }else{",
          "3140:         r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "763: # For the IN_INDEX_NOOP optimization, apply REAL affinity to the LHS",
          "764: # values prior to comparison if the RHS has REAL affinity.",
          "765: #",
          "766: do_execsql_test in-19.1 {",
          "767:   DROP TABLE IF EXISTS t0;",
          "768:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766: # Also ticket https://sqlite.org/src/info/29f635e0af71234b",
          "767: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "775: do_execsql_test in-19.3 {",
          "776:   SELECT c0 IN ('2070934912552030444',2,3) FROM t0;",
          "777: } {1}",
          "779: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "780: do_execsql_test in-19.4 {",
          "781:   DROP TABLE t0;",
          "782:   CREATE TABLE t0(c0 TEXT, c1 REAL, c2, PRIMARY KEY(c2, c0, c1));",
          "783:   CREATE INDEX i0 ON t0(c1 IN (c0));",
          "784:   INSERT INTO t0(c0, c2) VALUES (0, NULL) ON CONFLICT(c2, c1, c0) DO NOTHING;",
          "785:   PRAGMA integrity_check;",
          "786: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
      "candidate_info": {
        "commit_hash": "deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/deb201b8663ebf1793298ecdd8eb83fa1b407c6d",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use SQLITE_PREPARE_NO_VTAB in rtree as well.\n\nFossilOrigin-Name: 82a2ae7132964eab0dfad9a8314a399ffd3b72366b35e1767df6452125dd1d80",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3423:   };",
          "3424:   sqlite3_stmt **appStmt[N_STATEMENT];",
          "3425:   int i;",
          "3427:   pRtree->db = db;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3426:   const int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3479:     }",
          "3480:     zSql = sqlite3_mprintf(zFormat, zDb, zPrefix);",
          "3481:     if( zSql ){",
          "3484:     }else{",
          "3485:       rc = SQLITE_NOMEM;",
          "3486:     }",
          "",
          "[Removed Lines]",
          "3482:       rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3483:                               appStmt[i], 0);",
          "",
          "[Added Lines]",
          "3483:       rc = sqlite3_prepare_v3(db, zSql, -1, f, appStmt[i], 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3510:       if( zSql==0 ){",
          "3511:         rc = SQLITE_NOMEM;",
          "3512:       }else{",
          "3515:         sqlite3_free(zSql);",
          "3516:       }",
          "3517:     }",
          "",
          "[Removed Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3514:                                 &pRtree->pWriteAux, 0);",
          "",
          "[Added Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, f, &pRtree->pWriteAux, 0);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test": [
          "File: ext/rtree/rtreecirc.test -> ext/rtree/rtreecirc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: if {![info exists testdir]} {",
          "16:   set testdir [file join [file dirname [info script]] .. .. test]",
          "17: }",
          "18: source [file join [file dirname [info script]] rtree_util.tcl]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix rtreecirc",
          "22: ifcapable !rtree {",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: do_execsql_test 1.0 {",
          "28:   CREATE VIRTUAL TABLE rt USING rtree(id, x1, x2, y1, y2);",
          "29:   SELECT name FROM sqlite_master ORDER BY 1;",
          "30: } {",
          "31:   rt rt_node rt_parent rt_rowid",
          "32: }",
          "33: db_save_and_close",
          "35: foreach {tn schema sql} {",
          "36:   1 {",
          "37:     CREATE TRIGGER tr1 AFTER INSERT ON rt_node BEGIN",
          "38:       SELECT * FROM rt;",
          "39:     END;",
          "40:   } {",
          "41:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "42:   }",
          "43:   2 {",
          "44:     CREATE TRIGGER tr1 AFTER INSERT ON rt_parent BEGIN",
          "45:       SELECT * FROM rt;",
          "46:     END;",
          "47:   } {",
          "48:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "49:   }",
          "50:   3 {",
          "51:     CREATE TRIGGER tr1 AFTER INSERT ON rt_rowid BEGIN",
          "52:       SELECT * FROM rt;",
          "53:     END;",
          "54:   } {",
          "55:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "56:   }",
          "57: } {",
          "58:   db_restore_and_reopen",
          "59:   do_execsql_test  1.1.$tn.1 $schema",
          "60:   do_catchsql_test 1.1.$tn.2 $sql {1 {no such table: main.rt}}",
          "61:   db close",
          "62: }",
          "65: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1999612010e310fc2430d1f00076f69fade0c66d202771dbb0f3d5597ac0a03c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}