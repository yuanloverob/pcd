{
  "cve_id": "CVE-2018-15863",
  "cve_desc": "Unchecked NULL pointer usage in ResolveStateAndPredicate in xkbcomp/compat.c in xkbcommon before 0.8.2 could be used by local attackers to crash (NULL pointer dereference) the xkbcommon parser by supplying a crafted keymap file with a no-op modmask expression.",
  "repo": "xkbcommon/libxkbcommon",
  "patch_hash": "96df3106d49438e442510c59acad306e94f3db4d",
  "patch_info": {
    "commit_hash": "96df3106d49438e442510c59acad306e94f3db4d",
    "repo": "xkbcommon/libxkbcommon",
    "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/96df3106d49438e442510c59acad306e94f3db4d",
    "files": [
      "src/xkbcomp/compat.c"
    ],
    "message": "xkbcomp: Don't crash on no-op modmask expressions\n\nIf we have an expression of the form 'l1' in an interp section, we\nunconditionally try to dereference its args, even if it has none.\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
    "before_after_code_files": [
      "src/xkbcomp/compat.c||src/xkbcomp/compat.c"
    ]
  },
  "patch_diff": {
    "src/xkbcomp/compat.c||src/xkbcomp/compat.c": [
      "File: src/xkbcomp/compat.c -> src/xkbcomp/compat.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "265:     if (expr->expr.op == EXPR_ACTION_DECL) {",
      "266:         const char *pred_txt = xkb_atom_text(info->ctx, expr->action.name);",
      "268:             log_err(info->ctx,",
      "269:                     \"Illegal modifier predicate \\\"%s\\\"; Ignored\\n\", pred_txt);",
      "270:             return false;",
      "",
      "[Removed Lines]",
      "267:         if (!LookupString(symInterpretMatchMaskNames, pred_txt, pred_rtrn)) {",
      "",
      "[Added Lines]",
      "267:         if (!LookupString(symInterpretMatchMaskNames, pred_txt, pred_rtrn) ||",
      "268:             !expr->action.args) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb4909d2d8fa6b08155e449986a478101e2b2634",
      "candidate_info": {
        "commit_hash": "bb4909d2d8fa6b08155e449986a478101e2b2634",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/bb4909d2d8fa6b08155e449986a478101e2b2634",
        "files": [
          "src/xkbcomp/expr.c"
        ],
        "message": "Fail expression lookup on invalid atoms\n\nIf we fail atom lookup, then we should not claim that we successfully\nlooked up the expression.\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/xkbcomp/expr.c||src/xkbcomp/expr.c": [
          "File: src/xkbcomp/expr.c -> src/xkbcomp/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     case EXPR_ARRAY_REF:",
          "55:         return true;",
          "56:     default:",
          "57:         break;",
          "",
          "[Removed Lines]",
          "50:         return true;",
          "",
          "[Added Lines]",
          "50:         return (*elem_rtrn != NULL && *field_rtrn != NULL);",
          "55:  if (expr->array_ref.element != XKB_ATOM_NONE && *elem_rtrn == NULL)",
          "56:   return false;",
          "57:  if (*field_rtrn == NULL)",
          "58:   return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
      "candidate_info": {
        "commit_hash": "4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/4e2ee9c3f6050d773f8bbe05bc0edb17f1ff8371",
        "files": [
          "src/xkbcomp/expr.c"
        ],
        "message": "xkbcomp: Don't explode on invalid virtual modifiers\n\ntestcase: 'virtualModifiers=LevelThreC'\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/xkbcomp/expr.c||src/xkbcomp/expr.c": [
          "File: src/xkbcomp/expr.c -> src/xkbcomp/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:         return false;",
          "103:     str = xkb_atom_text(ctx, field);",
          "105:     if (istreq(str, \"all\")) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     if (!str)",
          "105:         return false;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5440aaa5222b02275b4fd982f5326c92c072982b",
      "candidate_info": {
        "commit_hash": "5440aaa5222b02275b4fd982f5326c92c072982b",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/5440aaa5222b02275b4fd982f5326c92c072982b",
        "files": [
          "src/keymap-priv.c"
        ],
        "message": "Fix signed vs. unsigned confusion in name sanitisation\n\nDon't try to divide through a signed char when indexing an array, lest\nye try to index off the start of it.\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/keymap-priv.c||src/keymap-priv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/keymap-priv.c||src/keymap-priv.c": [
          "File: src/keymap-priv.c -> src/keymap-priv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         return;",
          "120:     while (*name) {",
          "123:         name++;",
          "124:     }",
          "",
          "[Removed Lines]",
          "121:         if (!(legal[*name / 8] & (1 << (*name % 8))))",
          "",
          "[Added Lines]",
          "121:         unsigned char c = *name;",
          "122:         if (!(legal[c / 8] & (1 << (c % 8))))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae7856db48be161cb336c44fd188253bc06dd5ae",
      "candidate_info": {
        "commit_hash": "ae7856db48be161cb336c44fd188253bc06dd5ae",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/ae7856db48be161cb336c44fd188253bc06dd5ae",
        "files": [
          "src/text.c"
        ],
        "message": "text: NULL-terminate SI mask names\n\nThe list should have a NULL sentry. Add one.\n\ntestcase: 'interpret KP_Delete+AnyOfOrNaneo(ll)'\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/text.c||src/text.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/text.c||src/text.c": [
          "File: src/text.c -> src/text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     { \"AnyOf\", MATCH_ANY },",
          "205:     { \"AllOf\", MATCH_ALL },",
          "206:     { \"Exactly\", MATCH_EXACTLY },",
          "207: };",
          "209: const char *",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     { NULL, 0 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38e1766bc6e20108948aec8a0b222a4bad0254e9",
      "candidate_info": {
        "commit_hash": "38e1766bc6e20108948aec8a0b222a4bad0254e9",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/38e1766bc6e20108948aec8a0b222a4bad0254e9",
        "files": [
          "src/xkbcomp/expr.c"
        ],
        "message": "xkbcomp: Don't falsely promise from ExprResolveLhs\n\nEvery user of ExprReturnLhs goes on to unconditionally dereference the\nfield return, which can be NULL if xkb_intern_atom fails. Return false\nif this is the case, so we fail safely.\n\ntestcase: splice geometry data into interp\n\nSigned-off-by: Daniel Stone <daniels@collabora.com>",
        "before_after_code_files": [
          "src/xkbcomp/expr.c||src/xkbcomp/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/67"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/xkbcomp/expr.c||src/xkbcomp/expr.c": [
          "File: src/xkbcomp/expr.c -> src/xkbcomp/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     case EXPR_FIELD_REF:",
          "",
          "[Removed Lines]",
          "45:         return true;",
          "",
          "[Added Lines]",
          "45:         return (*field_rtrn != NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}