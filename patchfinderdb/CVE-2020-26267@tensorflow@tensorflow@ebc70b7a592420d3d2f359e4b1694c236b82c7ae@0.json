{
  "cve_id": "CVE-2020-26267",
  "cve_desc": "In affected versions of TensorFlow the tf.raw_ops.DataFormatVecPermute API does not validate the src_format and dst_format attributes. The code assumes that these two arguments define a permutation of NHWC. This can result in uninitialized memory accesses, read outside of bounds and even crashes. This is fixed in versions 1.15.5, 2.0.4, 2.1.3, 2.2.2, 2.3.2, and 2.4.0.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ebc70b7a592420d3d2f359e4b1694c236b82c7ae",
  "patch_info": {
    "commit_hash": "ebc70b7a592420d3d2f359e4b1694c236b82c7ae",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ebc70b7a592420d3d2f359e4b1694c236b82c7ae",
    "files": [
      "tensorflow/core/kernels/data_format_ops.cc",
      "tensorflow/python/ops/nn_test.py"
    ],
    "message": "Validate that `DataFormat*` attributes form a permutation.\n\nThe `src_format` and `dst_format` attributes for the `DataFormatDimMap` and `DataFormatVecPermute` raw ops are supposed to determine a permutation. However, this was not validated and could result in unitialized memory accesses as well as writes outside of bounds and potential crashes.\n\nWhile here, we also test that the format attributes have the needed length, add tests for all validation failure cases, remove unnecessary calls to `strings::StrCat`, and fix a few grammar errors.\n\nThis will be cherry-picked on the supported release branches.\n\nPiperOrigin-RevId: 346135579\nChange-Id: I1c76392382c89ad8f072d5bc93d70669851eb404",
    "before_after_code_files": [
      "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
      "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
      "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #define EIGEN_USE_THREADS",
      "20: #include \"tensorflow/core/kernels/data_format_ops.h\"",
      "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
      "22: #include \"tensorflow/core/framework/op_kernel.h\"",
      "23: #include \"tensorflow/core/framework/register_types.h\"",
      "24: #include \"tensorflow/core/framework/tensor.h\"",
      "26: namespace tensorflow {",
      "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
      "29: typedef Eigen::GpuDevice GPUDevice;",
      "31: template <typename Device, typename T>",
      "32: class DataFormatDimMapOp : public OpKernel {",
      "33:  public:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: #include <map>",
      "28: #include \"tensorflow/core/platform/errors.h\"",
      "39: static bool IsValidPermutation(const std::string& src, const std::string& dst) {",
      "40:   if (src.size() != dst.size()) {",
      "41:     return false;",
      "42:   }",
      "44:   std::map<char, bool> characters;",
      "47:   for (const auto c : src) {",
      "48:     if (characters[c]) {",
      "49:       return false;",
      "50:     }",
      "51:     characters[c] = true;",
      "52:   }",
      "55:   for (const auto c : dst) {",
      "56:     if (!characters[c]) {",
      "57:       return false;",
      "58:     }",
      "59:     characters[c] = false;",
      "60:   }",
      "64:   return true;",
      "65: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:     string dst_format;",
      "39:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
      "40:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
      "43:                     \"src_format = \",",
      "45:     OP_REQUIRES(",
      "50:     dst_idx_ = Tensor(DT_INT32, {static_cast<int64>(src_format.size())});",
      "51:     for (int i = 0; i < src_format.size(); ++i) {",
      "52:       for (int j = 0; j < dst_format.size(); ++j) {",
      "",
      "[Removed Lines]",
      "41:                 errors::InvalidArgument(strings::StrCat(",
      "42:                     \"Source format must of length 4 or 5, received \"",
      "44:                     src_format)));",
      "46:         context, dst_format.size() == 4 || dst_format.size() == 5,",
      "47:         errors::InvalidArgument(strings::StrCat(",
      "48:             \"Destination format must of length 4 or 5, received dst_format = \",",
      "49:             dst_format)));",
      "",
      "[Added Lines]",
      "77:                 errors::InvalidArgument(",
      "78:                     \"Source format must be of length 4 or 5, received \"",
      "80:                     src_format));",
      "81:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
      "82:                 errors::InvalidArgument(\"Destination format must be of length \"",
      "83:                                         \"4 or 5, received dst_format = \",",
      "84:                                         dst_format));",
      "86:         context, IsValidPermutation(src_format, dst_format),",
      "87:         errors::InvalidArgument(",
      "88:             \"Destination and source format must determine a permutation, got \",",
      "89:             src_format, \" and \", dst_format));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "78:       : OpKernel(context) {",
      "79:     string src_format;",
      "80:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
      "81:     string dst_format;",
      "82:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
      "83:     src_format_ = src_format;",
      "84:     dst_format_ = dst_format;",
      "85:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
      "122:                 errors::InvalidArgument(",
      "123:                     \"Source format must be of length 4 or 5, received \"",
      "124:                     \"src_format = \",",
      "125:                     src_format));",
      "128:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
      "129:                 errors::InvalidArgument(\"Destination format must be of length \"",
      "130:                                         \"4 or 5, received dst_format = \",",
      "131:                                         dst_format));",
      "132:     OP_REQUIRES(",
      "133:         context, IsValidPermutation(src_format, dst_format),",
      "134:         errors::InvalidArgument(",
      "135:             \"Destination and source format must determine a permutation, got \",",
      "136:             src_format, \" and \", dst_format));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "127:       };",
      "128:       keep_only_spatial_dimensions(&src_format_str);",
      "129:       keep_only_spatial_dimensions(&dst_format_str);",
      "130:     }",
      "131:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184:       OP_REQUIRES(context,",
      "185:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
      "186:                   errors::InvalidArgument(",
      "187:                       \"Format specifier must contain H and W for 2D case\"));",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
      "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: from tensorflow.python.eager import def_function",
      "28: from tensorflow.python.framework import constant_op",
      "29: from tensorflow.python.framework import dtypes",
      "30: from tensorflow.python.framework import ops",
      "31: from tensorflow.python.framework import tensor_spec",
      "32: from tensorflow.python.framework import test_util",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: from tensorflow.python.framework import errors",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1260:       y_val = self.evaluate(y)",
      "1261:       self.assertAllEqual(y_val, y_val_expected)",
      "1263:   def testArbitraryASCII(self):",
      "1264:     x_val = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1265:     y_val_expected = [3, 2, 1, 0, 3, 2, 1, 0]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1264:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1269:       y_val = self.evaluate(y)",
      "1270:       self.assertAllEqual(y_val, y_val_expected)",
      "1273: class DataFormatVectorPermuteTest(test_lib.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1274:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1275:   def testInvalidLength(self):",
      "1276:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1277:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "1278:                                 \"Source format must be of length 4 or 5\"):",
      "1279:       op = nn_ops.data_format_dim_map(",
      "1280:           x, src_format=\"12345678\", dst_format=\"87654321\")",
      "1281:       with test_util.use_gpu():",
      "1282:         self.evaluate(op)",
      "1284:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1285:   def testDuplicateSrc(self):",
      "1286:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1287:     with self.assertRaisesRegex(",
      "1288:         errors.InvalidArgumentError,",
      "1289:         \"Destination and source format must determine a permutation\"):",
      "1290:       op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")",
      "1291:       with test_util.use_gpu():",
      "1292:         self.evaluate(op)",
      "1294:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1295:   def testDuplicateDst(self):",
      "1296:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1297:     with self.assertRaisesRegex(",
      "1298:         errors.InvalidArgumentError,",
      "1299:         \"Destination and source format must determine a permutation\"):",
      "1300:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")",
      "1301:       with test_util.use_gpu():",
      "1302:         self.evaluate(op)",
      "1304:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1305:   def testExtraSpecifiers(self):",
      "1306:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
      "1307:     with self.assertRaisesRegex(",
      "1308:         errors.InvalidArgumentError,",
      "1309:         \"Destination and source format must determine a permutation\"):",
      "1310:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")",
      "1311:       with test_util.use_gpu():",
      "1312:         self.evaluate(op)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1370:       y_val = self.evaluate(y)",
      "1371:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
      "1374: @test_util.run_all_in_graph_and_eager_modes",
      "1375: class AvgPoolTest(test_lib.TestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1415:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1416:   def testInvalidLength(self):",
      "1417:     x = [0, 1, 2, 3]",
      "1418:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "1419:                                 \"Source format must be of length 4 or 5\"):",
      "1420:       op = nn_ops.data_format_vec_permute(",
      "1421:           x, src_format=\"12345678\", dst_format=\"87654321\")",
      "1422:       with test_util.use_gpu():",
      "1423:         self.evaluate(op)",
      "1425:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1426:   def testDuplicateSrc(self):",
      "1427:     x = [0, 1, 2, 3]",
      "1428:     with self.assertRaisesRegex(",
      "1429:         errors.InvalidArgumentError,",
      "1430:         \"Destination and source format must determine a permutation\"):",
      "1431:       op = nn_ops.data_format_vec_permute(",
      "1432:           x, src_format=\"1233\", dst_format=\"4321\")",
      "1433:       with test_util.use_gpu():",
      "1434:         self.evaluate(op)",
      "1436:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1437:   def testDuplicateDst(self):",
      "1438:     x = [0, 1, 2, 3]",
      "1439:     with self.assertRaisesRegex(",
      "1440:         errors.InvalidArgumentError,",
      "1441:         \"Destination and source format must determine a permutation\"):",
      "1442:       op = nn_ops.data_format_vec_permute(",
      "1443:           x, src_format=\"1234\", dst_format=\"3321\")",
      "1444:       with test_util.use_gpu():",
      "1445:         self.evaluate(op)",
      "1447:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1448:   def testExtraSpecifiers(self):",
      "1449:     x = [0, 1, 2, 3]",
      "1450:     with self.assertRaisesRegex(",
      "1451:         errors.InvalidArgumentError,",
      "1452:         \"Destination and source format must determine a permutation\"):",
      "1453:       op = nn_ops.data_format_vec_permute(",
      "1454:           x, src_format=\"1234\", dst_format=\"5321\")",
      "1455:       with test_util.use_gpu():",
      "1456:         self.evaluate(op)",
      "1458:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
      "1459:   def test2DNoWH(self):",
      "1460:     x = [[0, 1], [2, 3]]",
      "1461:     with self.assertRaisesRegex(",
      "1462:         errors.InvalidArgumentError,",
      "1463:         \"Format specifier must contain H and W for 2D case\"):",
      "1464:       op = nn_ops.data_format_vec_permute(",
      "1465:           x, src_format=\"1234\", dst_format=\"4321\")",
      "1466:       with test_util.use_gpu():",
      "1467:         self.evaluate(op)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51702c47de186d91489d47d23f0653813889333f",
      "candidate_info": {
        "commit_hash": "51702c47de186d91489d47d23f0653813889333f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/51702c47de186d91489d47d23f0653813889333f",
        "files": [
          "tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/core/kernels/data_format_ops.h",
          "tensorflow/python/ops/nn_test.py"
        ],
        "message": "Make DataFormatVecPermute's validation and implementation consistent with each other",
        "before_after_code_files": [
          "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/core/kernels/data_format_ops.h||tensorflow/core/kernels/data_format_ops.h",
          "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
          "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <map>",
          "25: #include \"tensorflow/core/framework/op_kernel.h\"",
          "26: #include \"tensorflow/core/framework/register_types.h\"",
          "27: #include \"tensorflow/core/framework/tensor.h\"",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "30: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "24: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "",
          "[Added Lines]",
          "28: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:                 errors::InvalidArgument(",
          "145:                     \"input must be a vector or 2D tensor, but got shape \",",
          "146:                     input.shape().DebugString()));",
          "147:     if (input.dims() == 1) {",
          "148:       OP_REQUIRES(context,",
          "154:     } else if (input.dims() == 2) {",
          "156:                   errors::InvalidArgument(\"First dimension of 2D input must be \"",
          "158:                                           input.shape().DebugString()));",
          "159:       OP_REQUIRES(",
          "160:           context, input.dim_size(1) == 2,",
          "",
          "[Removed Lines]",
          "149:                   input.NumElements() == 2 || input.NumElements() == 4 ||",
          "150:                       input.NumElements() == 5,",
          "151:                   errors::InvalidArgument(",
          "152:                       \"1D input must be of size 2, 4 or 5, but got shape \",",
          "153:                       input.shape().DebugString()));",
          "155:       OP_REQUIRES(context, input.dim_size(0) == 2 || input.dim_size(0) == 4,",
          "157:                                           \"of size 2 or 4, but got shape \",",
          "",
          "[Added Lines]",
          "148:     const int full_dim_count = src_format_.size();",
          "149:     const int spatial_dim_count = full_dim_count - 2;",
          "153:                   input.NumElements() == spatial_dim_count ||",
          "154:                       input.NumElements() == full_dim_count,",
          "155:                   errors::InvalidArgument(\"1D input must be of size \",",
          "156:                                           spatial_dim_count, \" or \",",
          "157:                                           full_dim_count, \", but got shape \",",
          "158:                                           input.shape().DebugString()));",
          "160:       OP_REQUIRES(context,",
          "161:                   input.dim_size(0) == spatial_dim_count ||",
          "162:                       input.dim_size(0) == full_dim_count,",
          "164:                                           \"of size \",",
          "165:                                           spatial_dim_count, \" or \",",
          "166:                                           full_dim_count, \", but got shape \",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:     OP_REQUIRES_OK(context,",
          "168:                    context->allocate_output(0, input.shape(), &output));",
          "171:     string src_format_str = src_format_;",
          "172:     string dst_format_str = dst_format_;",
          "180:         format_str->erase(new_end, format_str->end());",
          "181:       };",
          "182:       keep_only_spatial_dimensions(&src_format_str);",
          "183:       keep_only_spatial_dimensions(&dst_format_str);",
          "188:     }",
          "189:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
          "",
          "[Removed Lines]",
          "170:     Eigen::DSizes<Eigen::DenseIndex, 8> dst_idx;",
          "173:     if (input.dim_size(0) == 2) {",
          "176:       auto keep_only_spatial_dimensions = [](string* format_str) -> void {",
          "177:         auto new_end = std::remove_if(",
          "178:             format_str->begin(), format_str->end(),",
          "179:             [](const char dim) { return dim != 'H' && dim != 'W'; });",
          "184:       OP_REQUIRES(context,",
          "185:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
          "186:                   errors::InvalidArgument(",
          "187:                       \"Format specifier must contain H and W for 2D case\"));",
          "",
          "[Added Lines]",
          "179:     Eigen::DSizes<Eigen::DenseIndex, 10> dst_idx;",
          "182:     if (input.dim_size(0) == spatial_dim_count) {",
          "185:       auto keep_only_spatial_dimensions =",
          "186:           [spatial_dim_count](string* format_str) -> void {",
          "187:         auto new_end =",
          "188:             std::remove_if(format_str->begin(), format_str->end(),",
          "189:                            [spatial_dim_count](const char dim) {",
          "190:                              return dim != 'H' && dim != 'W' &&",
          "191:                                     (spatial_dim_count == 2 || dim != 'D');",
          "192:                            });",
          "197:       if (spatial_dim_count == 3) {",
          "198:         OP_REQUIRES(",
          "199:             context, src_format_str.size() == 3 && dst_format_str.size() == 3,",
          "200:             errors::InvalidArgument(",
          "201:                 \"Format specifier must contain D, H and W for 2D case\"));",
          "202:       } else {",
          "203:         DCHECK(spatial_dim_count == 2);",
          "204:         OP_REQUIRES(context,",
          "205:                     src_format_str.size() == 2 && dst_format_str.size() == 2,",
          "206:                     errors::InvalidArgument(",
          "207:                         \"Format specifier must contain H and W for 2D case\"));",
          "208:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:   static void ComputeDstIndex(const string& src_format_str,",
          "202:                               const string& dst_format_str, int num_dim,",
          "204:     for (int i = 0; i < src_format_str.size(); ++i) {",
          "205:       for (int j = 0; j < dst_format_str.size(); ++j) {",
          "206:         if (dst_format_str[j] != src_format_str[i]) continue;",
          "",
          "[Removed Lines]",
          "203:                               Eigen::DSizes<Eigen::DenseIndex, 8>* dst) {",
          "",
          "[Added Lines]",
          "224:                               Eigen::DSizes<Eigen::DenseIndex, 10>* dst) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266: TF_CALL_int64(DECLARE_GPU_SPECS);",
          "267: #undef DECLARE_GPU_SPEC",
          "275:   extern template struct DataFormatVecPermute<GPUDevice, T>;",
          "276: #define DECLARE_GPU_SPECS(T) DECLARE_GPU_SPEC(T);",
          "277: TF_CALL_int32(DECLARE_GPU_SPECS);",
          "",
          "[Removed Lines]",
          "269: #define DECLARE_GPU_SPEC(T)                                \\",
          "270:   template <>                                              \\",
          "271:   void DataFormatVecPermute<GPUDevice, T>::operator()(     \\",
          "272:       const GPUDevice& d, typename TTypes<T>::ConstFlat x, \\",
          "273:       typename TTypes<T>::Vec y,                           \\",
          "274:       const Eigen::DSizes<Eigen::DenseIndex, 8>& dst_idx); \\",
          "",
          "[Added Lines]",
          "290: #define DECLARE_GPU_SPEC(T)                                 \\",
          "291:   template <>                                               \\",
          "292:   void DataFormatVecPermute<GPUDevice, T>::operator()(      \\",
          "293:       const GPUDevice& d, typename TTypes<T>::ConstFlat x,  \\",
          "294:       typename TTypes<T>::Vec y,                            \\",
          "295:       const Eigen::DSizes<Eigen::DenseIndex, 10>& dst_idx); \\",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/data_format_ops.h||tensorflow/core/kernels/data_format_ops.h": [
          "File: tensorflow/core/kernels/data_format_ops.h -> tensorflow/core/kernels/data_format_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: template <typename T>",
          "79: struct VecPermute {",
          "81:   Eigen::DSizes<Eigen::DenseIndex, 1> dimensions(",
          "82:       typename TTypes<T>::ConstFlat input) const {",
          "83:     Eigen::DSizes<Eigen::DenseIndex, 1> result;",
          "",
          "[Removed Lines]",
          "80:   VecPermute(const Eigen::DSizes<Eigen::DenseIndex, 8>& dst) : dst_(dst) {}",
          "",
          "[Added Lines]",
          "80:   VecPermute(const Eigen::DSizes<Eigen::DenseIndex, 10>& dst) : dst_(dst) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:   }",
          "95:  private:",
          "97: };",
          "",
          "[Removed Lines]",
          "96:   Eigen::DSizes<Eigen::DenseIndex, 8> dst_;",
          "",
          "[Added Lines]",
          "96:   Eigen::DSizes<Eigen::DenseIndex, 10> dst_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101: struct DataFormatVecPermute {",
          "102:   void operator()(const Device& d, typename TTypes<T>::ConstFlat x,",
          "103:                   typename TTypes<T>::Flat y,",
          "105:     y.device(d) = x.customOp(VecPermute<T>(dst));",
          "106:   }",
          "107: };",
          "",
          "[Removed Lines]",
          "104:                   const Eigen::DSizes<Eigen::DenseIndex, 8>& dst) {",
          "",
          "[Added Lines]",
          "104:                   const Eigen::DSizes<Eigen::DenseIndex, 10>& dst) {",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
          "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1331:       y_val = self.evaluate(y)",
          "1332:       self.assertAllEqual(y_val, [4, 9])",
          "1334:   @test_util.disable_xla(\"unsupported data format\")",
          "1335:   def testNHWCToWHCN(self):",
          "1336:     x_val = [7, 4, 9, 3]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1334:   def testNDHWCtoNCDHW(self):",
          "1335:     x_val = [7, 4, 9, 3, 5]",
          "1336:     x = constant_op.constant(x_val)",
          "1337:     y = nn_ops.data_format_vec_permute(",
          "1338:         x, src_format=\"NDHWC\", dst_format=\"NCDHW\")",
          "1339:     with test_util.use_gpu():",
          "1340:       y_val = self.evaluate(y)",
          "1341:       self.assertAllEqual(y_val, [7, 5, 4, 9, 3])",
          "1343:   def testNDHWCtoNCDHW_Size3(self):",
          "1344:     x_val = [4, 9, 3]",
          "1345:     x = constant_op.constant(x_val)",
          "1346:     y = nn_ops.data_format_vec_permute(",
          "1347:         x, src_format=\"NDHWC\", dst_format=\"NCDHW\")",
          "1348:     with test_util.use_gpu():",
          "1349:       y_val = self.evaluate(y)",
          "1350:       self.assertAllEqual(y_val, [4, 9, 3])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1349:       y_val = self.evaluate(y)",
          "1350:       self.assertAllEqual(y_val, [9, 4])",
          "1352:   def testNCHWToNHWC(self):",
          "1353:     x_val = [7, 4, 9, 3]",
          "1354:     x = constant_op.constant(x_val)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1370:   @test_util.disable_xla(\"unsupported data format\")",
          "1371:   def testNDHWCToWHDCN(self):",
          "1372:     x_val = [7, 4, 9, 3, 5]",
          "1373:     x = constant_op.constant(x_val)",
          "1374:     y = nn_ops.data_format_vec_permute(",
          "1375:         x, src_format=\"NDHWC\", dst_format=\"WHDCN\")",
          "1376:     with test_util.use_gpu():",
          "1377:       y_val = self.evaluate(y)",
          "1378:       self.assertAllEqual(y_val, [3, 9, 4, 5, 7])",
          "1380:   @test_util.disable_xla(\"unsupported data format\")",
          "1381:   def testNDHWCToWHDCN_Size3(self):",
          "1382:     x_val = [4, 9, 3]",
          "1383:     x = constant_op.constant(x_val)",
          "1384:     y = nn_ops.data_format_vec_permute(",
          "1385:         x, src_format=\"NDHWC\", dst_format=\"WHDCN\")",
          "1386:     with test_util.use_gpu():",
          "1387:       y_val = self.evaluate(y)",
          "1388:       self.assertAllEqual(y_val, [3, 9, 4])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1365:       y_val = self.evaluate(y)",
          "1366:       self.assertAllEqual(y_val, [9, 3])",
          "1368:   def testNHWCToHWNC(self):",
          "1369:     x_val = [7, 4, 9, 3]",
          "1370:     x = constant_op.constant(x_val)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1406:   def testNCDHWToNDHWC(self):",
          "1407:     x_val = [7, 4, 9, 3, 5]",
          "1408:     x = constant_op.constant(x_val)",
          "1409:     y = nn_ops.data_format_vec_permute(x, src_format=\"NCDHW\", dst_format=\"NDHWC\")",
          "1410:     with test_util.use_gpu():",
          "1411:       y_val = self.evaluate(y)",
          "1412:       self.assertAllEqual(y_val, [7, 9, 3, 5, 4])",
          "1414:   def testNCDHWToNDHWC_Size3(self):",
          "1415:     x_val = [9, 3, 5]",
          "1416:     x = constant_op.constant(x_val)",
          "1417:     y = nn_ops.data_format_vec_permute(",
          "1418:         x, src_format=\"NCDHW\", dst_format=\"NDHWC\")",
          "1419:     with test_util.use_gpu():",
          "1420:       y_val = self.evaluate(y)",
          "1421:       self.assertAllEqual(y_val, [9, 3, 5])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1413:       y_val = self.evaluate(y)",
          "1414:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
          "1416:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1417:   def testInvalidLength(self):",
          "1418:     x = [0, 1, 2, 3]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1471:   def testNDHWCToNCDHW2D(self):",
          "1472:     x_val = [[7, 4], [9, 3], [4, 5], [5, 1], [8, 2]]",
          "1473:     x = constant_op.constant(x_val)",
          "1474:     y = nn_ops.data_format_vec_permute(",
          "1475:         x, src_format=\"NDHWC\", dst_format=\"NCDHW\")",
          "1476:     with test_util.use_gpu():",
          "1477:       y_val = self.evaluate(y)",
          "1478:       self.assertAllEqual(y_val, [[7, 4], [8, 2], [9, 3], [4, 5], [5, 1]])",
          "1480:   def testNDHWCToDHWNC2D(self):",
          "1481:     x_val = [[7, 4], [9, 3], [4, 5], [5, 1], [8, 2]]",
          "1482:     x = constant_op.constant(x_val)",
          "1483:     y = nn_ops.data_format_vec_permute(",
          "1484:         x, src_format=\"NDHWC\", dst_format=\"DHWNC\")",
          "1485:     with test_util.use_gpu():",
          "1486:       y_val = self.evaluate(y)",
          "1487:       self.assertAllEqual(y_val, [[9, 3], [4, 5], [5, 1], [7, 4], [8, 2]])",
          "1489:   def testDHWNCToNDHWC2D(self):",
          "1490:     x_val = [[7, 4], [9, 3], [4, 5], [5, 1], [8, 2]]",
          "1491:     x = constant_op.constant(x_val)",
          "1492:     y = nn_ops.data_format_vec_permute(",
          "1493:         x, src_format=\"DHWNC\", dst_format=\"NDHWC\")",
          "1494:     with test_util.use_gpu():",
          "1495:       y_val = self.evaluate(y)",
          "1496:       self.assertAllEqual(y_val, [[5, 1], [7, 4], [9, 3], [4, 5], [8, 2]])",
          "1498:   def testNCDHWToNDHWC2D(self):",
          "1499:     x_val = [[7, 4], [9, 3], [4, 5], [5, 1], [8, 2]]",
          "1500:     x = constant_op.constant(x_val)",
          "1501:     y = nn_ops.data_format_vec_permute(",
          "1502:         x, src_format=\"NCDHW\", dst_format=\"NDHWC\")",
          "1503:     with test_util.use_gpu():",
          "1504:       y_val = self.evaluate(y)",
          "1505:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [8, 2], [9, 3]])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "faf7af8ef8aacfa0e3d20ae61fe302ab13203f55",
      "candidate_info": {
        "commit_hash": "faf7af8ef8aacfa0e3d20ae61fe302ab13203f55",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/faf7af8ef8aacfa0e3d20ae61fe302ab13203f55",
        "files": [
          "tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py"
        ],
        "message": "Validate that `DataFormat*` attributes form a permutation.\n\nThe `src_format` and `dst_format` attributes for the `DataFormatDimMap` and `DataFormatVecPermute` raw ops are supposed to determine a permutation. However, this was not validated and could result in unitialized memory accesses as well as writes outside of bounds and potential crashes.\n\nWhile here, we also test that the format attributes have the needed length, add tests for all validation failure cases, remove unnecessary calls to `strings::StrCat`, and fix a few grammar errors.\n\nThis will be cherry-picked on the supported release branches.\n\nPiperOrigin-RevId: 346135579\nChange-Id: I1c76392382c89ad8f072d5bc93d70669851eb404",
        "before_after_code_files": [
          "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
          "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define EIGEN_USE_THREADS",
          "20: #include \"tensorflow/core/kernels/data_format_ops.h\"",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/register_types.h\"",
          "24: #include \"tensorflow/core/framework/tensor.h\"",
          "26: namespace tensorflow {",
          "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "29: typedef Eigen::GpuDevice GPUDevice;",
          "31: template <typename Device, typename T>",
          "32: class DataFormatDimMapOp : public OpKernel {",
          "33:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <map>",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "39: static bool IsValidPermutation(const std::string& src, const std::string& dst) {",
          "40:   if (src.size() != dst.size()) {",
          "41:     return false;",
          "42:   }",
          "44:   std::map<char, bool> characters;",
          "47:   for (const auto c : src) {",
          "48:     if (characters[c]) {",
          "49:       return false;",
          "50:     }",
          "51:     characters[c] = true;",
          "52:   }",
          "55:   for (const auto c : dst) {",
          "56:     if (!characters[c]) {",
          "57:       return false;",
          "58:     }",
          "59:     characters[c] = false;",
          "60:   }",
          "64:   return true;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "38:     string dst_format;",
          "39:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "44:     OP_REQUIRES(",
          "49:     dst_idx_ = Tensor(DT_INT32, {static_cast<int64>(src_format.size())});",
          "50:     for (int i = 0; i < src_format.size(); ++i) {",
          "51:       for (int j = 0; j < dst_format.size(); ++j) {",
          "",
          "[Removed Lines]",
          "40:     OP_REQUIRES(context, src_format.size() == 4,",
          "41:                 errors::InvalidArgument(strings::StrCat(",
          "42:                     \"Source format must of length 4, received src_format = \",",
          "43:                     src_format)));",
          "45:         context, dst_format.size() == 4,",
          "46:         errors::InvalidArgument(strings::StrCat(",
          "47:             \"Destination format must of length 4, received dst_format = \",",
          "48:             dst_format)));",
          "",
          "[Added Lines]",
          "76:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "77:                 errors::InvalidArgument(",
          "78:                     \"Source format must be of length 4 or 5, received \"",
          "79:                     \"src_format = \",",
          "80:                     src_format));",
          "81:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "82:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "83:                                         \"4 or 5, received dst_format = \",",
          "84:                                         dst_format));",
          "86:         context, IsValidPermutation(src_format, dst_format),",
          "87:         errors::InvalidArgument(",
          "88:             \"Destination and source format must determine a permutation, got \",",
          "89:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:       : OpKernel(context) {",
          "78:     string src_format;",
          "79:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "80:     string dst_format;",
          "81:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "82:     src_format_ = src_format;",
          "83:     dst_format_ = dst_format;",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "122:                 errors::InvalidArgument(",
          "123:                     \"Source format must be of length 4 or 5, received \"",
          "124:                     \"src_format = \",",
          "125:                     src_format));",
          "128:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "129:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "130:                                         \"4 or 5, received dst_format = \",",
          "131:                                         dst_format));",
          "132:     OP_REQUIRES(",
          "133:         context, IsValidPermutation(src_format, dst_format),",
          "134:         errors::InvalidArgument(",
          "135:             \"Destination and source format must determine a permutation, got \",",
          "136:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:                    context->allocate_output(0, input.shape(), &output));",
          "114:     Eigen::DSizes<Eigen::DenseIndex, 8> dst_idx;",
          "117:     functor::DataFormatVecPermute<Device, T>()(context->eigen_device<Device>(),",
          "118:                                                input.flat<T>(),",
          "",
          "[Removed Lines]",
          "115:     ComputeDstIndex(input.dims(), &dst_idx);",
          "",
          "[Added Lines]",
          "170:     string src_format_str = src_format_;",
          "171:     string dst_format_str = dst_format_;",
          "172:     if (input.dim_size(0) == 2) {",
          "175:       auto keep_only_spatial_dimensions = [](string* format_str) -> void {",
          "176:         auto new_end = std::remove_if(",
          "177:             format_str->begin(), format_str->end(),",
          "178:             [](const char dim) { return dim != 'H' && dim != 'W'; });",
          "179:         format_str->erase(new_end, format_str->end());",
          "180:       };",
          "181:       keep_only_spatial_dimensions(&src_format_str);",
          "182:       keep_only_spatial_dimensions(&dst_format_str);",
          "183:       OP_REQUIRES(context,",
          "184:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
          "185:                   errors::InvalidArgument(",
          "186:                       \"Format specifier must contain H and W for 2D case\"));",
          "187:     }",
          "188:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
          "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from tensorflow.python.eager import def_function",
          "28: from tensorflow.python.framework import constant_op",
          "29: from tensorflow.python.framework import dtypes",
          "30: from tensorflow.python.framework import ops",
          "31: from tensorflow.python.framework import tensor_spec",
          "32: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1188:       y_val = self.evaluate(y)",
          "1189:       self.assertAllEqual(y_val, y_val_expected)",
          "1192: class DataFormatVectorPermuteTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1192:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1193:   def testInvalidLength(self):",
          "1194:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1195:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1196:                                 \"Source format must be of length 4 or 5\"):",
          "1197:       op = nn_ops.data_format_dim_map(",
          "1198:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1199:       with test_util.use_gpu():",
          "1200:         self.evaluate(op)",
          "1202:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1203:   def testDuplicateSrc(self):",
          "1204:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1205:     with self.assertRaisesRegex(",
          "1206:         errors.InvalidArgumentError,",
          "1207:         \"Destination and source format must determine a permutation\"):",
          "1208:       op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")",
          "1209:       with test_util.use_gpu():",
          "1210:         self.evaluate(op)",
          "1212:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1213:   def testDuplicateDst(self):",
          "1214:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1215:     with self.assertRaisesRegex(",
          "1216:         errors.InvalidArgumentError,",
          "1217:         \"Destination and source format must determine a permutation\"):",
          "1218:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")",
          "1219:       with test_util.use_gpu():",
          "1220:         self.evaluate(op)",
          "1222:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1223:   def testExtraSpecifiers(self):",
          "1224:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1225:     with self.assertRaisesRegex(",
          "1226:         errors.InvalidArgumentError,",
          "1227:         \"Destination and source format must determine a permutation\"):",
          "1228:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")",
          "1229:       with test_util.use_gpu():",
          "1230:         self.evaluate(op)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1255:       y_val = self.evaluate(y)",
          "1256:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
          "1259: @test_util.run_all_in_graph_and_eager_modes",
          "1260: class AvgPoolTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1299:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1300:   def testInvalidLength(self):",
          "1301:     x = [0, 1, 2, 3]",
          "1302:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1303:                                 \"Source format must be of length 4 or 5\"):",
          "1304:       op = nn_ops.data_format_vec_permute(",
          "1305:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1306:       with test_util.use_gpu():",
          "1307:         self.evaluate(op)",
          "1309:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1310:   def testDuplicateSrc(self):",
          "1311:     x = [0, 1, 2, 3]",
          "1312:     with self.assertRaisesRegex(",
          "1313:         errors.InvalidArgumentError,",
          "1314:         \"Destination and source format must determine a permutation\"):",
          "1315:       op = nn_ops.data_format_vec_permute(",
          "1316:           x, src_format=\"1233\", dst_format=\"4321\")",
          "1317:       with test_util.use_gpu():",
          "1318:         self.evaluate(op)",
          "1320:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1321:   def testDuplicateDst(self):",
          "1322:     x = [0, 1, 2, 3]",
          "1323:     with self.assertRaisesRegex(",
          "1324:         errors.InvalidArgumentError,",
          "1325:         \"Destination and source format must determine a permutation\"):",
          "1326:       op = nn_ops.data_format_vec_permute(",
          "1327:           x, src_format=\"1234\", dst_format=\"3321\")",
          "1328:       with test_util.use_gpu():",
          "1329:         self.evaluate(op)",
          "1331:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1332:   def testExtraSpecifiers(self):",
          "1333:     x = [0, 1, 2, 3]",
          "1334:     with self.assertRaisesRegex(",
          "1335:         errors.InvalidArgumentError,",
          "1336:         \"Destination and source format must determine a permutation\"):",
          "1337:       op = nn_ops.data_format_vec_permute(",
          "1338:           x, src_format=\"1234\", dst_format=\"5321\")",
          "1339:       with test_util.use_gpu():",
          "1340:         self.evaluate(op)",
          "1342:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1343:   def test2DNoWH(self):",
          "1344:     x = [[0, 1], [2, 3]]",
          "1345:     with self.assertRaisesRegex(",
          "1346:         errors.InvalidArgumentError,",
          "1347:         \"Format specifier must contain H and W for 2D case\"):",
          "1348:       op = nn_ops.data_format_vec_permute(",
          "1349:           x, src_format=\"1234\", dst_format=\"4321\")",
          "1350:       with test_util.use_gpu():",
          "1351:         self.evaluate(op)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b289c33bed2e9338d42378ffffeb71552c3caeb",
      "candidate_info": {
        "commit_hash": "0b289c33bed2e9338d42378ffffeb71552c3caeb",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0b289c33bed2e9338d42378ffffeb71552c3caeb",
        "files": [
          "tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py"
        ],
        "message": "Validate that `DataFormat*` attributes form a permutation.\n\nThe `src_format` and `dst_format` attributes for the `DataFormatDimMap` and `DataFormatVecPermute` raw ops are supposed to determine a permutation. However, this was not validated and could result in unitialized memory accesses as well as writes outside of bounds and potential crashes.\n\nWhile here, we also test that the format attributes have the needed length, add tests for all validation failure cases, remove unnecessary calls to `strings::StrCat`, and fix a few grammar errors.\n\nThis will be cherry-picked on the supported release branches.\n\nPiperOrigin-RevId: 346135579\nChange-Id: I1c76392382c89ad8f072d5bc93d70669851eb404",
        "before_after_code_files": [
          "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
          "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define EIGEN_USE_THREADS",
          "20: #include \"tensorflow/core/kernels/data_format_ops.h\"",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/register_types.h\"",
          "24: #include \"tensorflow/core/framework/tensor.h\"",
          "26: namespace tensorflow {",
          "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "29: typedef Eigen::GpuDevice GPUDevice;",
          "31: template <typename Device, typename T>",
          "32: class DataFormatDimMapOp : public OpKernel {",
          "33:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <map>",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "39: static bool IsValidPermutation(const std::string& src, const std::string& dst) {",
          "40:   if (src.size() != dst.size()) {",
          "41:     return false;",
          "42:   }",
          "44:   std::map<char, bool> characters;",
          "47:   for (const auto c : src) {",
          "48:     if (characters[c]) {",
          "49:       return false;",
          "50:     }",
          "51:     characters[c] = true;",
          "52:   }",
          "55:   for (const auto c : dst) {",
          "56:     if (!characters[c]) {",
          "57:       return false;",
          "58:     }",
          "59:     characters[c] = false;",
          "60:   }",
          "64:   return true;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "38:     string dst_format;",
          "39:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "44:     OP_REQUIRES(",
          "49:     dst_idx_ = Tensor(DT_INT32, {static_cast<int64>(src_format.size())});",
          "50:     for (int i = 0; i < src_format.size(); ++i) {",
          "51:       for (int j = 0; j < dst_format.size(); ++j) {",
          "",
          "[Removed Lines]",
          "40:     OP_REQUIRES(context, src_format.size() == 4,",
          "41:                 errors::InvalidArgument(strings::StrCat(",
          "42:                     \"Source format must of length 4, received src_format = \",",
          "43:                     src_format)));",
          "45:         context, dst_format.size() == 4,",
          "46:         errors::InvalidArgument(strings::StrCat(",
          "47:             \"Destination format must of length 4, received dst_format = \",",
          "48:             dst_format)));",
          "",
          "[Added Lines]",
          "76:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "77:                 errors::InvalidArgument(",
          "78:                     \"Source format must be of length 4 or 5, received \"",
          "79:                     \"src_format = \",",
          "80:                     src_format));",
          "81:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "82:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "83:                                         \"4 or 5, received dst_format = \",",
          "84:                                         dst_format));",
          "86:         context, IsValidPermutation(src_format, dst_format),",
          "87:         errors::InvalidArgument(",
          "88:             \"Destination and source format must determine a permutation, got \",",
          "89:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:       : OpKernel(context) {",
          "78:     string src_format;",
          "79:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "80:     string dst_format;",
          "81:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "82:     src_format_ = src_format;",
          "83:     dst_format_ = dst_format;",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "122:                 errors::InvalidArgument(",
          "123:                     \"Source format must be of length 4 or 5, received \"",
          "124:                     \"src_format = \",",
          "125:                     src_format));",
          "128:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "129:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "130:                                         \"4 or 5, received dst_format = \",",
          "131:                                         dst_format));",
          "132:     OP_REQUIRES(",
          "133:         context, IsValidPermutation(src_format, dst_format),",
          "134:         errors::InvalidArgument(",
          "135:             \"Destination and source format must determine a permutation, got \",",
          "136:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:       };",
          "125:       keep_only_spatial_dimensions(&src_format_str);",
          "126:       keep_only_spatial_dimensions(&dst_format_str);",
          "127:     }",
          "128:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:       OP_REQUIRES(context,",
          "183:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
          "184:                   errors::InvalidArgument(",
          "185:                       \"Format specifier must contain H and W for 2D case\"));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
          "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from tensorflow.python.eager import def_function",
          "28: from tensorflow.python.framework import constant_op",
          "29: from tensorflow.python.framework import dtypes",
          "30: from tensorflow.python.framework import ops",
          "31: from tensorflow.python.framework import tensor_spec",
          "32: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1216:       y_val = self.evaluate(y)",
          "1217:       self.assertAllEqual(y_val, y_val_expected)",
          "1220: class DataFormatVectorPermuteTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1220:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1221:   def testInvalidLength(self):",
          "1222:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1223:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1224:                                 \"Source format must be of length 4 or 5\"):",
          "1225:       op = nn_ops.data_format_dim_map(",
          "1226:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1227:       with test_util.use_gpu():",
          "1228:         self.evaluate(op)",
          "1230:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1231:   def testDuplicateSrc(self):",
          "1232:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1233:     with self.assertRaisesRegex(",
          "1234:         errors.InvalidArgumentError,",
          "1235:         \"Destination and source format must determine a permutation\"):",
          "1236:       op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")",
          "1237:       with test_util.use_gpu():",
          "1238:         self.evaluate(op)",
          "1240:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1241:   def testDuplicateDst(self):",
          "1242:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1243:     with self.assertRaisesRegex(",
          "1244:         errors.InvalidArgumentError,",
          "1245:         \"Destination and source format must determine a permutation\"):",
          "1246:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")",
          "1247:       with test_util.use_gpu():",
          "1248:         self.evaluate(op)",
          "1250:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1251:   def testExtraSpecifiers(self):",
          "1252:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1253:     with self.assertRaisesRegex(",
          "1254:         errors.InvalidArgumentError,",
          "1255:         \"Destination and source format must determine a permutation\"):",
          "1256:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")",
          "1257:       with test_util.use_gpu():",
          "1258:         self.evaluate(op)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1317:       y_val = self.evaluate(y)",
          "1318:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
          "1321: @test_util.run_all_in_graph_and_eager_modes",
          "1322: class AvgPoolTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1361:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1362:   def testInvalidLength(self):",
          "1363:     x = [0, 1, 2, 3]",
          "1364:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1365:                                 \"Source format must be of length 4 or 5\"):",
          "1366:       op = nn_ops.data_format_vec_permute(",
          "1367:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1368:       with test_util.use_gpu():",
          "1369:         self.evaluate(op)",
          "1371:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1372:   def testDuplicateSrc(self):",
          "1373:     x = [0, 1, 2, 3]",
          "1374:     with self.assertRaisesRegex(",
          "1375:         errors.InvalidArgumentError,",
          "1376:         \"Destination and source format must determine a permutation\"):",
          "1377:       op = nn_ops.data_format_vec_permute(",
          "1378:           x, src_format=\"1233\", dst_format=\"4321\")",
          "1379:       with test_util.use_gpu():",
          "1380:         self.evaluate(op)",
          "1382:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1383:   def testDuplicateDst(self):",
          "1384:     x = [0, 1, 2, 3]",
          "1385:     with self.assertRaisesRegex(",
          "1386:         errors.InvalidArgumentError,",
          "1387:         \"Destination and source format must determine a permutation\"):",
          "1388:       op = nn_ops.data_format_vec_permute(",
          "1389:           x, src_format=\"1234\", dst_format=\"3321\")",
          "1390:       with test_util.use_gpu():",
          "1391:         self.evaluate(op)",
          "1393:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1394:   def testExtraSpecifiers(self):",
          "1395:     x = [0, 1, 2, 3]",
          "1396:     with self.assertRaisesRegex(",
          "1397:         errors.InvalidArgumentError,",
          "1398:         \"Destination and source format must determine a permutation\"):",
          "1399:       op = nn_ops.data_format_vec_permute(",
          "1400:           x, src_format=\"1234\", dst_format=\"5321\")",
          "1401:       with test_util.use_gpu():",
          "1402:         self.evaluate(op)",
          "1404:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1405:   def test2DNoWH(self):",
          "1406:     x = [[0, 1], [2, 3]]",
          "1407:     with self.assertRaisesRegex(",
          "1408:         errors.InvalidArgumentError,",
          "1409:         \"Format specifier must contain H and W for 2D case\"):",
          "1410:       op = nn_ops.data_format_vec_permute(",
          "1411:           x, src_format=\"1234\", dst_format=\"4321\")",
          "1412:       with test_util.use_gpu():",
          "1413:         self.evaluate(op)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54461b130dff8ad05740179d7c47abd6b782667d",
      "candidate_info": {
        "commit_hash": "54461b130dff8ad05740179d7c47abd6b782667d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/54461b130dff8ad05740179d7c47abd6b782667d",
        "files": [
          "tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py"
        ],
        "message": "Validate that `DataFormat*` attributes form a permutation.\n\nThe `src_format` and `dst_format` attributes for the `DataFormatDimMap` and `DataFormatVecPermute` raw ops are supposed to determine a permutation. However, this was not validated and could result in unitialized memory accesses as well as writes outside of bounds and potential crashes.\n\nWhile here, we also test that the format attributes have the needed length, add tests for all validation failure cases, remove unnecessary calls to `strings::StrCat`, and fix a few grammar errors.\n\nThis will be cherry-picked on the supported release branches.\n\nPiperOrigin-RevId: 346135579\nChange-Id: I1c76392382c89ad8f072d5bc93d70669851eb404",
        "before_after_code_files": [
          "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
          "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define EIGEN_USE_THREADS",
          "20: #include \"tensorflow/core/kernels/data_format_ops.h\"",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/register_types.h\"",
          "24: #include \"tensorflow/core/framework/tensor.h\"",
          "26: namespace tensorflow {",
          "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "29: typedef Eigen::GpuDevice GPUDevice;",
          "31: template <typename Device, typename T>",
          "32: class DataFormatDimMapOp : public OpKernel {",
          "33:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <map>",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "39: static bool IsValidPermutation(const std::string& src, const std::string& dst) {",
          "40:   if (src.size() != dst.size()) {",
          "41:     return false;",
          "42:   }",
          "44:   std::map<char, bool> characters;",
          "47:   for (const auto c : src) {",
          "48:     if (characters[c]) {",
          "49:       return false;",
          "50:     }",
          "51:     characters[c] = true;",
          "52:   }",
          "55:   for (const auto c : dst) {",
          "56:     if (!characters[c]) {",
          "57:       return false;",
          "58:     }",
          "59:     characters[c] = false;",
          "60:   }",
          "64:   return true;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "38:     string dst_format;",
          "39:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "44:     OP_REQUIRES(",
          "49:     dst_idx_ = Tensor(DT_INT32, {static_cast<int64>(src_format.size())});",
          "50:     for (int i = 0; i < src_format.size(); ++i) {",
          "51:       for (int j = 0; j < dst_format.size(); ++j) {",
          "",
          "[Removed Lines]",
          "40:     OP_REQUIRES(context, src_format.size() == 4,",
          "41:                 errors::InvalidArgument(strings::StrCat(",
          "42:                     \"Source format must of length 4, received src_format = \",",
          "43:                     src_format)));",
          "45:         context, dst_format.size() == 4,",
          "46:         errors::InvalidArgument(strings::StrCat(",
          "47:             \"Destination format must of length 4, received dst_format = \",",
          "48:             dst_format)));",
          "",
          "[Added Lines]",
          "76:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "77:                 errors::InvalidArgument(",
          "78:                     \"Source format must be of length 4 or 5, received \"",
          "79:                     \"src_format = \",",
          "80:                     src_format));",
          "81:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "82:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "83:                                         \"4 or 5, received dst_format = \",",
          "84:                                         dst_format));",
          "86:         context, IsValidPermutation(src_format, dst_format),",
          "87:         errors::InvalidArgument(",
          "88:             \"Destination and source format must determine a permutation, got \",",
          "89:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:       : OpKernel(context) {",
          "78:     string src_format;",
          "79:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "80:     string dst_format;",
          "81:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "82:     src_format_ = src_format;",
          "83:     dst_format_ = dst_format;",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "122:                 errors::InvalidArgument(",
          "123:                     \"Source format must be of length 4 or 5, received \"",
          "124:                     \"src_format = \",",
          "125:                     src_format));",
          "128:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "129:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "130:                                         \"4 or 5, received dst_format = \",",
          "131:                                         dst_format));",
          "132:     OP_REQUIRES(",
          "133:         context, IsValidPermutation(src_format, dst_format),",
          "134:         errors::InvalidArgument(",
          "135:             \"Destination and source format must determine a permutation, got \",",
          "136:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:                    context->allocate_output(0, input.shape(), &output));",
          "114:     Eigen::DSizes<Eigen::DenseIndex, 8> dst_idx;",
          "117:     functor::DataFormatVecPermute<Device, T>()(context->eigen_device<Device>(),",
          "118:                                                input.flat<T>(),",
          "",
          "[Removed Lines]",
          "115:     ComputeDstIndex(input.dims(), &dst_idx);",
          "",
          "[Added Lines]",
          "170:     string src_format_str = src_format_;",
          "171:     string dst_format_str = dst_format_;",
          "172:     if (input.dim_size(0) == 2) {",
          "175:       auto keep_only_spatial_dimensions = [](string* format_str) -> void {",
          "176:         auto new_end = std::remove_if(",
          "177:             format_str->begin(), format_str->end(),",
          "178:             [](const char dim) { return dim != 'H' && dim != 'W'; });",
          "179:         format_str->erase(new_end, format_str->end());",
          "180:       };",
          "181:       keep_only_spatial_dimensions(&src_format_str);",
          "182:       keep_only_spatial_dimensions(&dst_format_str);",
          "183:       OP_REQUIRES(context,",
          "184:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
          "185:                   errors::InvalidArgument(",
          "186:                       \"Format specifier must contain H and W for 2D case\"));",
          "187:     }",
          "188:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
          "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from tensorflow.python.eager import def_function",
          "28: from tensorflow.python.framework import constant_op",
          "29: from tensorflow.python.framework import dtypes",
          "30: from tensorflow.python.framework import ops",
          "31: from tensorflow.python.framework import tensor_spec",
          "32: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1182:       y_val = self.evaluate(y)",
          "1183:       self.assertAllEqual(y_val, y_val_expected)",
          "1186: class DataFormatVectorPermuteTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1186:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1187:   def testInvalidLength(self):",
          "1188:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1189:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1190:                                 \"Source format must be of length 4 or 5\"):",
          "1191:       op = nn_ops.data_format_dim_map(",
          "1192:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1193:       with test_util.use_gpu():",
          "1194:         self.evaluate(op)",
          "1196:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1197:   def testDuplicateSrc(self):",
          "1198:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1199:     with self.assertRaisesRegex(",
          "1200:         errors.InvalidArgumentError,",
          "1201:         \"Destination and source format must determine a permutation\"):",
          "1202:       op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")",
          "1203:       with test_util.use_gpu():",
          "1204:         self.evaluate(op)",
          "1206:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1207:   def testDuplicateDst(self):",
          "1208:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1209:     with self.assertRaisesRegex(",
          "1210:         errors.InvalidArgumentError,",
          "1211:         \"Destination and source format must determine a permutation\"):",
          "1212:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")",
          "1213:       with test_util.use_gpu():",
          "1214:         self.evaluate(op)",
          "1216:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1217:   def testExtraSpecifiers(self):",
          "1218:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1219:     with self.assertRaisesRegex(",
          "1220:         errors.InvalidArgumentError,",
          "1221:         \"Destination and source format must determine a permutation\"):",
          "1222:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")",
          "1223:       with test_util.use_gpu():",
          "1224:         self.evaluate(op)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1249:       y_val = self.evaluate(y)",
          "1250:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
          "1253: @test_util.run_all_in_graph_and_eager_modes",
          "1254: class AvgPoolTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1293:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1294:   def testInvalidLength(self):",
          "1295:     x = [0, 1, 2, 3]",
          "1296:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1297:                                 \"Source format must be of length 4 or 5\"):",
          "1298:       op = nn_ops.data_format_vec_permute(",
          "1299:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1300:       with test_util.use_gpu():",
          "1301:         self.evaluate(op)",
          "1303:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1304:   def testDuplicateSrc(self):",
          "1305:     x = [0, 1, 2, 3]",
          "1306:     with self.assertRaisesRegex(",
          "1307:         errors.InvalidArgumentError,",
          "1308:         \"Destination and source format must determine a permutation\"):",
          "1309:       op = nn_ops.data_format_vec_permute(",
          "1310:           x, src_format=\"1233\", dst_format=\"4321\")",
          "1311:       with test_util.use_gpu():",
          "1312:         self.evaluate(op)",
          "1314:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1315:   def testDuplicateDst(self):",
          "1316:     x = [0, 1, 2, 3]",
          "1317:     with self.assertRaisesRegex(",
          "1318:         errors.InvalidArgumentError,",
          "1319:         \"Destination and source format must determine a permutation\"):",
          "1320:       op = nn_ops.data_format_vec_permute(",
          "1321:           x, src_format=\"1234\", dst_format=\"3321\")",
          "1322:       with test_util.use_gpu():",
          "1323:         self.evaluate(op)",
          "1325:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1326:   def testExtraSpecifiers(self):",
          "1327:     x = [0, 1, 2, 3]",
          "1328:     with self.assertRaisesRegex(",
          "1329:         errors.InvalidArgumentError,",
          "1330:         \"Destination and source format must determine a permutation\"):",
          "1331:       op = nn_ops.data_format_vec_permute(",
          "1332:           x, src_format=\"1234\", dst_format=\"5321\")",
          "1333:       with test_util.use_gpu():",
          "1334:         self.evaluate(op)",
          "1336:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1337:   def test2DNoWH(self):",
          "1338:     x = [[0, 1], [2, 3]]",
          "1339:     with self.assertRaisesRegex(",
          "1340:         errors.InvalidArgumentError,",
          "1341:         \"Format specifier must contain H and W for 2D case\"):",
          "1342:       op = nn_ops.data_format_vec_permute(",
          "1343:           x, src_format=\"1234\", dst_format=\"4321\")",
          "1344:       with test_util.use_gpu():",
          "1345:         self.evaluate(op)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffea0239373512240bb17101b5a5992de26aa5a4",
      "candidate_info": {
        "commit_hash": "ffea0239373512240bb17101b5a5992de26aa5a4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ffea0239373512240bb17101b5a5992de26aa5a4",
        "files": [
          "tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py"
        ],
        "message": "Validate that `DataFormat*` attributes form a permutation.\n\nThe `src_format` and `dst_format` attributes for the `DataFormatDimMap` and `DataFormatVecPermute` raw ops are supposed to determine a permutation. However, this was not validated and could result in unitialized memory accesses as well as writes outside of bounds and potential crashes.\n\nWhile here, we also test that the format attributes have the needed length, add tests for all validation failure cases, remove unnecessary calls to `strings::StrCat`, and fix a few grammar errors.\n\nThis will be cherry-picked on the supported release branches.\n\nPiperOrigin-RevId: 346135579\nChange-Id: I1c76392382c89ad8f072d5bc93d70669851eb404",
        "before_after_code_files": [
          "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
          "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc",
            "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/data_format_ops.cc||tensorflow/core/kernels/data_format_ops.cc": [
          "File: tensorflow/core/kernels/data_format_ops.cc -> tensorflow/core/kernels/data_format_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define EIGEN_USE_THREADS",
          "20: #include \"tensorflow/core/kernels/data_format_ops.h\"",
          "21: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/register_types.h\"",
          "24: #include \"tensorflow/core/framework/tensor.h\"",
          "26: namespace tensorflow {",
          "28: typedef Eigen::ThreadPoolDevice CPUDevice;",
          "29: typedef Eigen::GpuDevice GPUDevice;",
          "31: template <typename Device, typename T>",
          "32: class DataFormatDimMapOp : public OpKernel {",
          "33:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include <map>",
          "28: #include \"tensorflow/core/platform/errors.h\"",
          "39: static bool IsValidPermutation(const std::string& src, const std::string& dst) {",
          "40:   if (src.size() != dst.size()) {",
          "41:     return false;",
          "42:   }",
          "44:   std::map<char, bool> characters;",
          "47:   for (const auto c : src) {",
          "48:     if (characters[c]) {",
          "49:       return false;",
          "50:     }",
          "51:     characters[c] = true;",
          "52:   }",
          "55:   for (const auto c : dst) {",
          "56:     if (!characters[c]) {",
          "57:       return false;",
          "58:     }",
          "59:     characters[c] = false;",
          "60:   }",
          "64:   return true;",
          "65: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     string dst_format;",
          "39:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "40:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "43:                     \"src_format = \",",
          "45:     OP_REQUIRES(",
          "50:     dst_idx_ = Tensor(DT_INT32, {static_cast<int64>(src_format.size())});",
          "51:     for (int i = 0; i < src_format.size(); ++i) {",
          "52:       for (int j = 0; j < dst_format.size(); ++j) {",
          "",
          "[Removed Lines]",
          "41:                 errors::InvalidArgument(strings::StrCat(",
          "42:                     \"Source format must of length 4 or 5, received \"",
          "44:                     src_format)));",
          "46:         context, dst_format.size() == 4 || dst_format.size() == 5,",
          "47:         errors::InvalidArgument(strings::StrCat(",
          "48:             \"Destination format must of length 4 or 5, received dst_format = \",",
          "49:             dst_format)));",
          "",
          "[Added Lines]",
          "77:                 errors::InvalidArgument(",
          "78:                     \"Source format must be of length 4 or 5, received \"",
          "80:                     src_format));",
          "81:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "82:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "83:                                         \"4 or 5, received dst_format = \",",
          "84:                                         dst_format));",
          "86:         context, IsValidPermutation(src_format, dst_format),",
          "87:         errors::InvalidArgument(",
          "88:             \"Destination and source format must determine a permutation, got \",",
          "89:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:       : OpKernel(context) {",
          "79:     string src_format;",
          "80:     OP_REQUIRES_OK(context, context->GetAttr(\"src_format\", &src_format));",
          "81:     string dst_format;",
          "82:     OP_REQUIRES_OK(context, context->GetAttr(\"dst_format\", &dst_format));",
          "83:     src_format_ = src_format;",
          "84:     dst_format_ = dst_format;",
          "85:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     OP_REQUIRES(context, src_format.size() == 4 || src_format.size() == 5,",
          "122:                 errors::InvalidArgument(",
          "123:                     \"Source format must be of length 4 or 5, received \"",
          "124:                     \"src_format = \",",
          "125:                     src_format));",
          "128:     OP_REQUIRES(context, dst_format.size() == 4 || dst_format.size() == 5,",
          "129:                 errors::InvalidArgument(\"Destination format must be of length \"",
          "130:                                         \"4 or 5, received dst_format = \",",
          "131:                                         dst_format));",
          "132:     OP_REQUIRES(",
          "133:         context, IsValidPermutation(src_format, dst_format),",
          "134:         errors::InvalidArgument(",
          "135:             \"Destination and source format must determine a permutation, got \",",
          "136:             src_format, \" and \", dst_format));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:       };",
          "128:       keep_only_spatial_dimensions(&src_format_str);",
          "129:       keep_only_spatial_dimensions(&dst_format_str);",
          "130:     }",
          "131:     ComputeDstIndex(src_format_str, dst_format_str, input.dims(), &dst_idx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:       OP_REQUIRES(context,",
          "185:                   src_format_str.size() == 2 && dst_format_str.size() == 2,",
          "186:                   errors::InvalidArgument(",
          "187:                       \"Format specifier must contain H and W for 2D case\"));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_test.py||tensorflow/python/ops/nn_test.py": [
          "File: tensorflow/python/ops/nn_test.py -> tensorflow/python/ops/nn_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from tensorflow.python.eager import def_function",
          "28: from tensorflow.python.framework import constant_op",
          "29: from tensorflow.python.framework import dtypes",
          "30: from tensorflow.python.framework import ops",
          "31: from tensorflow.python.framework import tensor_spec",
          "32: from tensorflow.python.framework import test_util",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from tensorflow.python.framework import errors",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1260:       y_val = self.evaluate(y)",
          "1261:       self.assertAllEqual(y_val, y_val_expected)",
          "1263:   def testArbitraryASCII(self):",
          "1264:     x_val = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1265:     y_val_expected = [3, 2, 1, 0, 3, 2, 1, 0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1264:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1269:       y_val = self.evaluate(y)",
          "1270:       self.assertAllEqual(y_val, y_val_expected)",
          "1273: class DataFormatVectorPermuteTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1274:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1275:   def testInvalidLength(self):",
          "1276:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1277:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1278:                                 \"Source format must be of length 4 or 5\"):",
          "1279:       op = nn_ops.data_format_dim_map(",
          "1280:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1281:       with test_util.use_gpu():",
          "1282:         self.evaluate(op)",
          "1284:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1285:   def testDuplicateSrc(self):",
          "1286:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1287:     with self.assertRaisesRegex(",
          "1288:         errors.InvalidArgumentError,",
          "1289:         \"Destination and source format must determine a permutation\"):",
          "1290:       op = nn_ops.data_format_dim_map(x, src_format=\"1233\", dst_format=\"4321\")",
          "1291:       with test_util.use_gpu():",
          "1292:         self.evaluate(op)",
          "1294:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1295:   def testDuplicateDst(self):",
          "1296:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1297:     with self.assertRaisesRegex(",
          "1298:         errors.InvalidArgumentError,",
          "1299:         \"Destination and source format must determine a permutation\"):",
          "1300:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"3321\")",
          "1301:       with test_util.use_gpu():",
          "1302:         self.evaluate(op)",
          "1304:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1305:   def testExtraSpecifiers(self):",
          "1306:     x = [-4, -3, -2, -1, 0, 1, 2, 3]",
          "1307:     with self.assertRaisesRegex(",
          "1308:         errors.InvalidArgumentError,",
          "1309:         \"Destination and source format must determine a permutation\"):",
          "1310:       op = nn_ops.data_format_dim_map(x, src_format=\"1234\", dst_format=\"5321\")",
          "1311:       with test_util.use_gpu():",
          "1312:         self.evaluate(op)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1370:       y_val = self.evaluate(y)",
          "1371:       self.assertAllEqual(y_val, [[7, 4], [4, 5], [5, 1], [9, 3]])",
          "1374: @test_util.run_all_in_graph_and_eager_modes",
          "1375: class AvgPoolTest(test_lib.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1415:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1416:   def testInvalidLength(self):",
          "1417:     x = [0, 1, 2, 3]",
          "1418:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "1419:                                 \"Source format must be of length 4 or 5\"):",
          "1420:       op = nn_ops.data_format_vec_permute(",
          "1421:           x, src_format=\"12345678\", dst_format=\"87654321\")",
          "1422:       with test_util.use_gpu():",
          "1423:         self.evaluate(op)",
          "1425:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1426:   def testDuplicateSrc(self):",
          "1427:     x = [0, 1, 2, 3]",
          "1428:     with self.assertRaisesRegex(",
          "1429:         errors.InvalidArgumentError,",
          "1430:         \"Destination and source format must determine a permutation\"):",
          "1431:       op = nn_ops.data_format_vec_permute(",
          "1432:           x, src_format=\"1233\", dst_format=\"4321\")",
          "1433:       with test_util.use_gpu():",
          "1434:         self.evaluate(op)",
          "1436:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1437:   def testDuplicateDst(self):",
          "1438:     x = [0, 1, 2, 3]",
          "1439:     with self.assertRaisesRegex(",
          "1440:         errors.InvalidArgumentError,",
          "1441:         \"Destination and source format must determine a permutation\"):",
          "1442:       op = nn_ops.data_format_vec_permute(",
          "1443:           x, src_format=\"1234\", dst_format=\"3321\")",
          "1444:       with test_util.use_gpu():",
          "1445:         self.evaluate(op)",
          "1447:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1448:   def testExtraSpecifiers(self):",
          "1449:     x = [0, 1, 2, 3]",
          "1450:     with self.assertRaisesRegex(",
          "1451:         errors.InvalidArgumentError,",
          "1452:         \"Destination and source format must determine a permutation\"):",
          "1453:       op = nn_ops.data_format_vec_permute(",
          "1454:           x, src_format=\"1234\", dst_format=\"5321\")",
          "1455:       with test_util.use_gpu():",
          "1456:         self.evaluate(op)",
          "1458:   @test_util.disable_xla(\"XLA catches the error and rethrows as different one\")",
          "1459:   def test2DNoWH(self):",
          "1460:     x = [[0, 1], [2, 3]]",
          "1461:     with self.assertRaisesRegex(",
          "1462:         errors.InvalidArgumentError,",
          "1463:         \"Format specifier must contain H and W for 2D case\"):",
          "1464:       op = nn_ops.data_format_vec_permute(",
          "1465:           x, src_format=\"1234\", dst_format=\"4321\")",
          "1466:       with test_util.use_gpu():",
          "1467:         self.evaluate(op)",
          "",
          "---------------"
        ]
      }
    }
  ]
}