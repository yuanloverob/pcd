{
  "cve_id": "CVE-2022-29206",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SparseTensorDenseAdd` does not fully validate the input arguments. In this case, a reference gets bound to a `nullptr` during kernel execution. This is undefined behavior. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "11ced8467eccad9c7cb94867708be8fa5c66c730",
  "patch_info": {
    "commit_hash": "11ced8467eccad9c7cb94867708be8fa5c66c730",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/11ced8467eccad9c7cb94867708be8fa5c66c730",
    "files": [
      "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
      "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
      "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
    ],
    "message": "Fix UB in SparseTensorDenseAdd\n\nAdded more input validation to avoid nullptr dereferencing and array index\nout of bounds issues.\n\nPiperOrigin-RevId: 446192704",
    "before_after_code_files": [
      "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
      "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
      "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc": [
      "File: tensorflow/core/kernels/sparse_tensor_dense_add_op.cc -> tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include \"tensorflow/core/kernels/sparse_tensor_dense_add_op.h\"",
      "20: #include \"tensorflow/core/framework/op_kernel.h\"",
      "21: #include \"tensorflow/core/framework/register_types.h\"",
      "22: #include \"tensorflow/core/framework/tensor.h\"",
      "23: #include \"tensorflow/core/framework/tensor_util.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include \"tensorflow/core/framework/op_requires.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:         a_values->shape().DebugString(), \" and \",",
      "48:         a_shape->shape().DebugString());",
      "49:   }",
      "50:   if (a_shape->NumElements() != b->dims()) {",
      "51:     return errors::InvalidArgument(",
      "52:         \"Two operands have different ranks; received: \", a_shape->NumElements(),",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:   int64_t nnz = a_indices->dim_size(0);",
      "52:   int64_t ndims = a_indices->dim_size(1);",
      "53:   if (a_values->dim_size(0) != nnz) {",
      "54:     return errors::InvalidArgument(\"Dimensions \", nnz, \" and \",",
      "55:                                    a_values->dim_size(0),",
      "56:                                    \" are not compatible\");",
      "57:   }",
      "58:   if (a_shape->dim_size(0) != ndims) {",
      "59:     return errors::InvalidArgument(\"Dimensions \", ndims, \" and \",",
      "60:                                    a_shape->dim_size(0), \" are not compatible\");",
      "61:   }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "61:           a_shape_flat(i), \" vs dense side \", b->dim_size(i));",
      "62:     }",
      "63:   }",
      "64:   return Status::OK();",
      "65: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:   const auto a_indices_mat = a_indices->flat_inner_dims<Index>();",
      "80:   for (int64_t zidx = 0; zidx < nnz; ++zidx) {",
      "81:     for (int64_t didx = 0; didx < ndims; ++didx) {",
      "82:       const Index idx = a_indices_mat(zidx, didx);",
      "83:       if (idx < 0 || idx >= a_shape_flat(didx)) {",
      "84:         return errors::InvalidArgument(",
      "85:             \"Sparse tensor has an invalid index on dimension \", didx,",
      "86:             \": \"",
      "87:             \"a_indices(\",",
      "88:             zidx, \",\", didx, \") = \", idx,",
      "89:             \", dense tensor shape: \", a_shape_flat);",
      "90:       }",
      "91:     }",
      "92:   }",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py": [
      "File: tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:                                                     [(nnz,), (n, m)], s, (n, m))",
      "190:       self.assertLess(err, 1e-3)",
      "193:   def testInvalidSparseTensor(self):",
      "194:     with test_util.force_cpu():",
      "195:       shape = [2, 2]",
      "",
      "[Removed Lines]",
      "192:   @test_util.run_deprecated_v1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "201:           [[1, 3]],  # ...so is 3.",
      "202:       ]:",
      "203:         sparse = sparse_tensor.SparseTensorValue(bad_idx, val, shape)",
      "208:           self.evaluate(s)",
      "210: ######################## Benchmarking code",
      "",
      "[Removed Lines]",
      "204:         s = sparse_ops.sparse_add(sparse, dense)",
      "206:         with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
      "207:                                     \"invalid index\"):",
      "",
      "[Added Lines]",
      "203:         with self.assertRaisesRegex(",
      "204:             (ValueError, errors_impl.InvalidArgumentError), \"invalid index\"):",
      "205:           s = sparse_ops.sparse_add(sparse, dense)",
      "208:   def _testSparseDenseInvalidInputs(self,",
      "209:                                     a_indices,",
      "210:                                     a_values,",
      "211:                                     a_shape,",
      "212:                                     b,",
      "213:                                     expected_error=\"\"):",
      "214:     # Public API call to sparse-dense add.",
      "215:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
      "216:                                 expected_error):",
      "217:       a = sparse_tensor.SparseTensor(a_indices, a_values, a_shape)",
      "218:       self.evaluate(sparse_ops.sparse_add(a, b))",
      "219:     # Directly call generated kernel, by-passing SparseTensor validation.",
      "220:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
      "221:                                 expected_error):",
      "222:       self.evaluate(",
      "223:           sparse_ops.gen_sparse_ops.sparse_tensor_dense_add(",
      "224:               a_indices, a_values, a_shape, b))",
      "226:   def testSparseDenseInvalidInputs(self):",
      "227:     self._testSparseDenseInvalidInputs(",
      "228:         a_indices=constant_op.constant(0, shape=[17, 2], dtype=dtypes.int64),",
      "229:         a_values=constant_op.constant(0, shape=[5], dtype=dtypes.float32),",
      "230:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
      "231:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
      "232:         expected_error=\"Dimensions 17 and 5 are not compatible\")",
      "233:     self._testSparseDenseInvalidInputs(",
      "234:         a_indices=constant_op.constant(0, shape=[17, 4], dtype=dtypes.int64),",
      "235:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
      "236:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
      "237:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
      "238:         expected_error=\"Dimensions 4 and 2 are not compatible\")",
      "239:     self._testSparseDenseInvalidInputs(",
      "240:         a_indices=constant_op.constant(7, shape=[17, 2], dtype=dtypes.int64),",
      "241:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
      "242:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
      "243:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
      "244:         expected_error=\"invalid index\")",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
      "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "665: class SparseAddTest(test_util.TensorFlowTestCase):",
      "667:   def testValuesInVariable(self):",
      "669:     values = variables.Variable([1], trainable=False, dtype=dtypes.float32)",
      "670:     shape = constant_op.constant([1], dtype=dtypes.int64)",
      "",
      "[Removed Lines]",
      "668:     indices = constant_op.constant([[1]], dtype=dtypes.int64)",
      "",
      "[Added Lines]",
      "668:     indices = constant_op.constant([[0]], dtype=dtypes.int64)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c42f5d68fa7048f35af0360b3cf6d4159ad4c17f",
      "candidate_info": {
        "commit_hash": "c42f5d68fa7048f35af0360b3cf6d4159ad4c17f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c42f5d68fa7048f35af0360b3cf6d4159ad4c17f",
        "files": [
          "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "tensorflow/python/kernel_tests/sparse_add_op_test.py",
          "tensorflow/python/kernel_tests/sparse_ops_test.py"
        ],
        "message": "Fix UB in SparseTensorDenseAdd\n\nAdded more input validation to avoid nullptr dereferencing and array index\nout of bounds issues.\n\nPiperOrigin-RevId: 446192704",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "tensorflow/python/kernel_tests/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_add_op_test.py",
          "tensorflow/python/kernel_tests/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc": [
          "File: tensorflow/core/kernels/sparse_tensor_dense_add_op.cc -> tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"tensorflow/core/kernels/sparse_tensor_dense_add_op.h\"",
          "20: #include \"tensorflow/core/framework/op_kernel.h\"",
          "21: #include \"tensorflow/core/framework/register_types.h\"",
          "22: #include \"tensorflow/core/framework/tensor.h\"",
          "23: #include \"tensorflow/core/framework/tensor_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         a_values->shape().DebugString(), \" and \",",
          "48:         a_shape->shape().DebugString());",
          "49:   }",
          "50:   if (a_shape->NumElements() != b->dims()) {",
          "51:     return errors::InvalidArgument(",
          "52:         \"Two operands have different ranks; received: \", a_shape->NumElements(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   int64_t nnz = a_indices->dim_size(0);",
          "52:   int64_t ndims = a_indices->dim_size(1);",
          "53:   if (a_values->dim_size(0) != nnz) {",
          "54:     return errors::InvalidArgument(\"Dimensions \", nnz, \" and \",",
          "55:                                    a_values->dim_size(0),",
          "56:                                    \" are not compatible\");",
          "57:   }",
          "58:   if (a_shape->dim_size(0) != ndims) {",
          "59:     return errors::InvalidArgument(\"Dimensions \", ndims, \" and \",",
          "60:                                    a_shape->dim_size(0), \" are not compatible\");",
          "61:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:           a_shape_flat(i), \" vs dense side \", b->dim_size(i));",
          "62:     }",
          "63:   }",
          "64:   return Status::OK();",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   const auto a_indices_mat = a_indices->flat_inner_dims<Index>();",
          "80:   for (int64_t zidx = 0; zidx < nnz; ++zidx) {",
          "81:     for (int64_t didx = 0; didx < ndims; ++didx) {",
          "82:       const Index idx = a_indices_mat(zidx, didx);",
          "83:       if (idx < 0 || idx >= a_shape_flat(didx)) {",
          "84:         return errors::InvalidArgument(",
          "85:             \"Sparse tensor has an invalid index on dimension \", didx,",
          "86:             \": \"",
          "87:             \"a_indices(\",",
          "88:             zidx, \",\", didx, \") = \", idx,",
          "89:             \", dense tensor shape: \", a_shape_flat);",
          "90:       }",
          "91:     }",
          "92:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_add_op_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_add_op_test.py -> tensorflow/python/kernel_tests/sparse_add_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:                                                     [(nnz,), (n, m)], s, (n, m))",
          "194:       self.assertLess(err, 1e-3)",
          "197:   def testInvalidSparseTensor(self):",
          "198:     with test_util.force_cpu():",
          "199:       shape = [2, 2]",
          "",
          "[Removed Lines]",
          "196:   @test_util.run_deprecated_v1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:           [[1, 3]],  # ...so is 3.",
          "206:       ]:",
          "207:         sparse = sparse_tensor.SparseTensorValue(bad_idx, val, shape)",
          "212:           self.evaluate(s)",
          "214: ######################## Benchmarking code",
          "",
          "[Removed Lines]",
          "208:         s = sparse_ops.sparse_add(sparse, dense)",
          "210:         with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "211:                                     \"invalid index\"):",
          "",
          "[Added Lines]",
          "207:         with self.assertRaisesRegex(",
          "208:             (ValueError, errors_impl.InvalidArgumentError), \"invalid index\"):",
          "209:           s = sparse_ops.sparse_add(sparse, dense)",
          "212:   def _testSparseDenseInvalidInputs(self,",
          "213:                                     a_indices,",
          "214:                                     a_values,",
          "215:                                     a_shape,",
          "216:                                     b,",
          "217:                                     expected_error=\"\"):",
          "218:     # Public API call to sparse-dense add.",
          "219:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "220:                                 expected_error):",
          "221:       a = sparse_tensor.SparseTensor(a_indices, a_values, a_shape)",
          "222:       self.evaluate(sparse_ops.sparse_add(a, b))",
          "223:     # Directly call generated kernel, by-passing SparseTensor validation.",
          "224:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "225:                                 expected_error):",
          "226:       self.evaluate(",
          "227:           sparse_ops.gen_sparse_ops.sparse_tensor_dense_add(",
          "228:               a_indices, a_values, a_shape, b))",
          "230:   def testSparseDenseInvalidInputs(self):",
          "231:     self._testSparseDenseInvalidInputs(",
          "232:         a_indices=constant_op.constant(0, shape=[17, 2], dtype=dtypes.int64),",
          "233:         a_values=constant_op.constant(0, shape=[5], dtype=dtypes.float32),",
          "234:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "235:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "236:         expected_error=\"Dimensions 17 and 5 are not compatible\")",
          "237:     self._testSparseDenseInvalidInputs(",
          "238:         a_indices=constant_op.constant(0, shape=[17, 4], dtype=dtypes.int64),",
          "239:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
          "240:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "241:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "242:         expected_error=\"Dimensions 4 and 2 are not compatible\")",
          "243:     self._testSparseDenseInvalidInputs(",
          "244:         a_indices=constant_op.constant(7, shape=[17, 2], dtype=dtypes.int64),",
          "245:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
          "246:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "247:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "248:         expected_error=\"invalid index\")",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "669: class SparseAddTest(test_util.TensorFlowTestCase):",
          "671:   def testValuesInVariable(self):",
          "673:     values = variables.Variable([1], trainable=False, dtype=dtypes.float32)",
          "674:     shape = constant_op.constant([1], dtype=dtypes.int64)",
          "",
          "[Removed Lines]",
          "672:     indices = constant_op.constant([[1]], dtype=dtypes.int64)",
          "",
          "[Added Lines]",
          "672:     indices = constant_op.constant([[0]], dtype=dtypes.int64)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4350df55b2b966462138f984d79d1904d5baf967",
      "candidate_info": {
        "commit_hash": "4350df55b2b966462138f984d79d1904d5baf967",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4350df55b2b966462138f984d79d1904d5baf967",
        "files": [
          "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ],
        "message": "Fix UB in SparseTensorDenseAdd\n\nAdded more input validation to avoid nullptr dereferencing and array index\nout of bounds issues.\n\nPiperOrigin-RevId: 446192704",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc": [
          "File: tensorflow/core/kernels/sparse_tensor_dense_add_op.cc -> tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"tensorflow/core/kernels/sparse_tensor_dense_add_op.h\"",
          "20: #include \"tensorflow/core/framework/op_kernel.h\"",
          "21: #include \"tensorflow/core/framework/register_types.h\"",
          "22: #include \"tensorflow/core/framework/tensor.h\"",
          "23: #include \"tensorflow/core/framework/tensor_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         a_values->shape().DebugString(), \" and \",",
          "48:         a_shape->shape().DebugString());",
          "49:   }",
          "50:   if (a_shape->NumElements() != b->dims()) {",
          "51:     return errors::InvalidArgument(",
          "52:         \"Two operands have different ranks; received: \", a_shape->NumElements(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   int64_t nnz = a_indices->dim_size(0);",
          "52:   int64_t ndims = a_indices->dim_size(1);",
          "53:   if (a_values->dim_size(0) != nnz) {",
          "54:     return errors::InvalidArgument(\"Dimensions \", nnz, \" and \",",
          "55:                                    a_values->dim_size(0),",
          "56:                                    \" are not compatible\");",
          "57:   }",
          "58:   if (a_shape->dim_size(0) != ndims) {",
          "59:     return errors::InvalidArgument(\"Dimensions \", ndims, \" and \",",
          "60:                                    a_shape->dim_size(0), \" are not compatible\");",
          "61:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:           a_shape_flat(i), \" vs dense side \", b->dim_size(i));",
          "62:     }",
          "63:   }",
          "64:   return Status::OK();",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   const auto a_indices_mat = a_indices->flat_inner_dims<Index>();",
          "80:   for (int64_t zidx = 0; zidx < nnz; ++zidx) {",
          "81:     for (int64_t didx = 0; didx < ndims; ++didx) {",
          "82:       const Index idx = a_indices_mat(zidx, didx);",
          "83:       if (idx < 0 || idx >= a_shape_flat(didx)) {",
          "84:         return errors::InvalidArgument(",
          "85:             \"Sparse tensor has an invalid index on dimension \", didx,",
          "86:             \": \"",
          "87:             \"a_indices(\",",
          "88:             zidx, \",\", didx, \") = \", idx,",
          "89:             \", dense tensor shape: \", a_shape_flat);",
          "90:       }",
          "91:     }",
          "92:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:                                                     [(nnz,), (n, m)], s, (n, m))",
          "190:       self.assertLess(err, 1e-3)",
          "193:   def testInvalidSparseTensor(self):",
          "194:     with test_util.force_cpu():",
          "195:       shape = [2, 2]",
          "",
          "[Removed Lines]",
          "192:   @test_util.run_deprecated_v1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:           [[1, 3]],  # ...so is 3.",
          "202:       ]:",
          "203:         sparse = sparse_tensor.SparseTensorValue(bad_idx, val, shape)",
          "208:           self.evaluate(s)",
          "210: ######################## Benchmarking code",
          "",
          "[Removed Lines]",
          "204:         s = sparse_ops.sparse_add(sparse, dense)",
          "206:         with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "207:                                     \"invalid index\"):",
          "",
          "[Added Lines]",
          "203:         with self.assertRaisesRegex(",
          "204:             (ValueError, errors_impl.InvalidArgumentError), \"invalid index\"):",
          "205:           s = sparse_ops.sparse_add(sparse, dense)",
          "208:   def _testSparseDenseInvalidInputs(self,",
          "209:                                     a_indices,",
          "210:                                     a_values,",
          "211:                                     a_shape,",
          "212:                                     b,",
          "213:                                     expected_error=\"\"):",
          "214:     # Public API call to sparse-dense add.",
          "215:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "216:                                 expected_error):",
          "217:       a = sparse_tensor.SparseTensor(a_indices, a_values, a_shape)",
          "218:       self.evaluate(sparse_ops.sparse_add(a, b))",
          "219:     # Directly call generated kernel, by-passing SparseTensor validation.",
          "220:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "221:                                 expected_error):",
          "222:       self.evaluate(",
          "223:           sparse_ops.gen_sparse_ops.sparse_tensor_dense_add(",
          "224:               a_indices, a_values, a_shape, b))",
          "226:   def testSparseDenseInvalidInputs(self):",
          "227:     self._testSparseDenseInvalidInputs(",
          "228:         a_indices=constant_op.constant(0, shape=[17, 2], dtype=dtypes.int64),",
          "229:         a_values=constant_op.constant(0, shape=[5], dtype=dtypes.float32),",
          "230:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "231:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "232:         expected_error=\"Dimensions 17 and 5 are not compatible\")",
          "233:     self._testSparseDenseInvalidInputs(",
          "234:         a_indices=constant_op.constant(0, shape=[17, 4], dtype=dtypes.int64),",
          "235:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
          "236:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "237:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "238:         expected_error=\"Dimensions 4 and 2 are not compatible\")",
          "239:     self._testSparseDenseInvalidInputs(",
          "240:         a_indices=constant_op.constant(7, shape=[17, 2], dtype=dtypes.int64),",
          "241:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
          "242:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "243:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "244:         expected_error=\"invalid index\")",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "665: class SparseAddTest(test_util.TensorFlowTestCase):",
          "667:   def testValuesInVariable(self):",
          "669:     values = variables.Variable([1], trainable=False, dtype=dtypes.float32)",
          "670:     shape = constant_op.constant([1], dtype=dtypes.int64)",
          "",
          "[Removed Lines]",
          "668:     indices = constant_op.constant([[1]], dtype=dtypes.int64)",
          "",
          "[Added Lines]",
          "668:     indices = constant_op.constant([[0]], dtype=dtypes.int64)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "105970d29d5c6ea360e6e6eee17805f9a112778d",
      "candidate_info": {
        "commit_hash": "105970d29d5c6ea360e6e6eee17805f9a112778d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/105970d29d5c6ea360e6e6eee17805f9a112778d",
        "files": [
          "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "tensorflow/python/kernel_tests/sparse_add_op_test.py",
          "tensorflow/python/kernel_tests/sparse_ops_test.py"
        ],
        "message": "Fix UB in SparseTensorDenseAdd\n\nAdded more input validation to avoid nullptr dereferencing and array index\nout of bounds issues.\n\nPiperOrigin-RevId: 446192704",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "tensorflow/python/kernel_tests/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_add_op_test.py",
          "tensorflow/python/kernel_tests/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc": [
          "File: tensorflow/core/kernels/sparse_tensor_dense_add_op.cc -> tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"tensorflow/core/kernels/sparse_tensor_dense_add_op.h\"",
          "20: #include \"tensorflow/core/framework/op_kernel.h\"",
          "21: #include \"tensorflow/core/framework/register_types.h\"",
          "22: #include \"tensorflow/core/framework/tensor.h\"",
          "23: #include \"tensorflow/core/framework/tensor_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         a_values->shape().DebugString(), \" and \",",
          "48:         a_shape->shape().DebugString());",
          "49:   }",
          "50:   if (a_shape->NumElements() != b->dims()) {",
          "51:     return errors::InvalidArgument(",
          "52:         \"Two operands have different ranks; received: \", a_shape->NumElements(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   int64_t nnz = a_indices->dim_size(0);",
          "52:   int64_t ndims = a_indices->dim_size(1);",
          "53:   if (a_values->dim_size(0) != nnz) {",
          "54:     return errors::InvalidArgument(\"Dimensions \", nnz, \" and \",",
          "55:                                    a_values->dim_size(0),",
          "56:                                    \" are not compatible\");",
          "57:   }",
          "58:   if (a_shape->dim_size(0) != ndims) {",
          "59:     return errors::InvalidArgument(\"Dimensions \", ndims, \" and \",",
          "60:                                    a_shape->dim_size(0), \" are not compatible\");",
          "61:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:           a_shape_flat(i), \" vs dense side \", b->dim_size(i));",
          "62:     }",
          "63:   }",
          "64:   return Status::OK();",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   const auto a_indices_mat = a_indices->flat_inner_dims<Index>();",
          "80:   for (int64_t zidx = 0; zidx < nnz; ++zidx) {",
          "81:     for (int64_t didx = 0; didx < ndims; ++didx) {",
          "82:       const Index idx = a_indices_mat(zidx, didx);",
          "83:       if (idx < 0 || idx >= a_shape_flat(didx)) {",
          "84:         return errors::InvalidArgument(",
          "85:             \"Sparse tensor has an invalid index on dimension \", didx,",
          "86:             \": \"",
          "87:             \"a_indices(\",",
          "88:             zidx, \",\", didx, \") = \", idx,",
          "89:             \", dense tensor shape: \", a_shape_flat);",
          "90:       }",
          "91:     }",
          "92:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_add_op_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_add_op_test.py -> tensorflow/python/kernel_tests/sparse_add_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:                                                     [(nnz,), (n, m)], s, (n, m))",
          "194:       self.assertLess(err, 1e-3)",
          "197:   def testInvalidSparseTensor(self):",
          "198:     with test_util.force_cpu():",
          "199:       shape = [2, 2]",
          "",
          "[Removed Lines]",
          "196:   @test_util.run_deprecated_v1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:           [[1, 3]],  # ...so is 3.",
          "206:       ]:",
          "207:         sparse = sparse_tensor.SparseTensorValue(bad_idx, val, shape)",
          "212:           self.evaluate(s)",
          "214: ######################## Benchmarking code",
          "",
          "[Removed Lines]",
          "208:         s = sparse_ops.sparse_add(sparse, dense)",
          "210:         with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "211:                                     \"invalid index\"):",
          "",
          "[Added Lines]",
          "207:         with self.assertRaisesRegex(",
          "208:             (ValueError, errors_impl.InvalidArgumentError), \"invalid index\"):",
          "209:           s = sparse_ops.sparse_add(sparse, dense)",
          "212:   def _testSparseDenseInvalidInputs(self,",
          "213:                                     a_indices,",
          "214:                                     a_values,",
          "215:                                     a_shape,",
          "216:                                     b,",
          "217:                                     expected_error=\"\"):",
          "218:     # Public API call to sparse-dense add.",
          "219:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "220:                                 expected_error):",
          "221:       a = sparse_tensor.SparseTensor(a_indices, a_values, a_shape)",
          "222:       self.evaluate(sparse_ops.sparse_add(a, b))",
          "223:     # Directly call generated kernel, by-passing SparseTensor validation.",
          "224:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "225:                                 expected_error):",
          "226:       self.evaluate(",
          "227:           sparse_ops.gen_sparse_ops.sparse_tensor_dense_add(",
          "228:               a_indices, a_values, a_shape, b))",
          "230:   def testSparseDenseInvalidInputs(self):",
          "231:     self._testSparseDenseInvalidInputs(",
          "232:         a_indices=constant_op.constant(0, shape=[17, 2], dtype=dtypes.int64),",
          "233:         a_values=constant_op.constant(0, shape=[5], dtype=dtypes.float32),",
          "234:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "235:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "236:         expected_error=\"Dimensions 17 and 5 are not compatible\")",
          "237:     self._testSparseDenseInvalidInputs(",
          "238:         a_indices=constant_op.constant(0, shape=[17, 4], dtype=dtypes.int64),",
          "239:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
          "240:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "241:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "242:         expected_error=\"Dimensions 4 and 2 are not compatible\")",
          "243:     self._testSparseDenseInvalidInputs(",
          "244:         a_indices=constant_op.constant(7, shape=[17, 2], dtype=dtypes.int64),",
          "245:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
          "246:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "247:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "248:         expected_error=\"invalid index\")",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "669: class SparseAddTest(test_util.TensorFlowTestCase):",
          "671:   def testValuesInVariable(self):",
          "673:     values = variables.Variable([1], trainable=False, dtype=dtypes.float32)",
          "674:     shape = constant_op.constant([1], dtype=dtypes.int64)",
          "",
          "[Removed Lines]",
          "672:     indices = constant_op.constant([[1]], dtype=dtypes.int64)",
          "",
          "[Added Lines]",
          "672:     indices = constant_op.constant([[0]], dtype=dtypes.int64)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ace612cc7f21ba9e570c62e41ff62fc9252e1997",
      "candidate_info": {
        "commit_hash": "ace612cc7f21ba9e570c62e41ff62fc9252e1997",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ace612cc7f21ba9e570c62e41ff62fc9252e1997",
        "files": [
          "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ],
        "message": "Fix UB in SparseTensorDenseAdd\n\nAdded more input validation to avoid nullptr dereferencing and array index\nout of bounds issues.\n\nPiperOrigin-RevId: 446192704",
        "before_after_code_files": [
          "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
          "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
            "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/sparse_tensor_dense_add_op.cc||tensorflow/core/kernels/sparse_tensor_dense_add_op.cc": [
          "File: tensorflow/core/kernels/sparse_tensor_dense_add_op.cc -> tensorflow/core/kernels/sparse_tensor_dense_add_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"tensorflow/core/kernels/sparse_tensor_dense_add_op.h\"",
          "20: #include \"tensorflow/core/framework/op_kernel.h\"",
          "21: #include \"tensorflow/core/framework/register_types.h\"",
          "22: #include \"tensorflow/core/framework/tensor.h\"",
          "23: #include \"tensorflow/core/framework/tensor_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"tensorflow/core/framework/op_requires.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         a_values->shape().DebugString(), \" and \",",
          "48:         a_shape->shape().DebugString());",
          "49:   }",
          "50:   if (a_shape->NumElements() != b->dims()) {",
          "51:     return errors::InvalidArgument(",
          "52:         \"Two operands have different ranks; received: \", a_shape->NumElements(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   int64_t nnz = a_indices->dim_size(0);",
          "52:   int64_t ndims = a_indices->dim_size(1);",
          "53:   if (a_values->dim_size(0) != nnz) {",
          "54:     return errors::InvalidArgument(\"Dimensions \", nnz, \" and \",",
          "55:                                    a_values->dim_size(0),",
          "56:                                    \" are not compatible\");",
          "57:   }",
          "58:   if (a_shape->dim_size(0) != ndims) {",
          "59:     return errors::InvalidArgument(\"Dimensions \", ndims, \" and \",",
          "60:                                    a_shape->dim_size(0), \" are not compatible\");",
          "61:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:           a_shape_flat(i), \" vs dense side \", b->dim_size(i));",
          "62:     }",
          "63:   }",
          "64:   return Status::OK();",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:   const auto a_indices_mat = a_indices->flat_inner_dims<Index>();",
          "80:   for (int64_t zidx = 0; zidx < nnz; ++zidx) {",
          "81:     for (int64_t didx = 0; didx < ndims; ++didx) {",
          "82:       const Index idx = a_indices_mat(zidx, didx);",
          "83:       if (idx < 0 || idx >= a_shape_flat(didx)) {",
          "84:         return errors::InvalidArgument(",
          "85:             \"Sparse tensor has an invalid index on dimension \", didx,",
          "86:             \": \"",
          "87:             \"a_indices(\",",
          "88:             zidx, \",\", didx, \") = \", idx,",
          "89:             \", dense tensor shape: \", a_shape_flat);",
          "90:       }",
          "91:     }",
          "92:   }",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_add_op_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:                                                     [(nnz,), (n, m)], s, (n, m))",
          "190:       self.assertLess(err, 1e-3)",
          "193:   def testInvalidSparseTensor(self):",
          "194:     with test_util.force_cpu():",
          "195:       shape = [2, 2]",
          "",
          "[Removed Lines]",
          "192:   @test_util.run_deprecated_v1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:           [[1, 3]],  # ...so is 3.",
          "202:       ]:",
          "203:         sparse = sparse_tensor.SparseTensorValue(bad_idx, val, shape)",
          "208:           self.evaluate(s)",
          "210: ######################## Benchmarking code",
          "",
          "[Removed Lines]",
          "204:         s = sparse_ops.sparse_add(sparse, dense)",
          "206:         with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "207:                                     \"invalid index\"):",
          "",
          "[Added Lines]",
          "203:         with self.assertRaisesRegex(",
          "204:             (ValueError, errors_impl.InvalidArgumentError), \"invalid index\"):",
          "205:           s = sparse_ops.sparse_add(sparse, dense)",
          "208:   def _testSparseDenseInvalidInputs(self,",
          "209:                                     a_indices,",
          "210:                                     a_values,",
          "211:                                     a_shape,",
          "212:                                     b,",
          "213:                                     expected_error=\"\"):",
          "214:     # Public API call to sparse-dense add.",
          "215:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "216:                                 expected_error):",
          "217:       a = sparse_tensor.SparseTensor(a_indices, a_values, a_shape)",
          "218:       self.evaluate(sparse_ops.sparse_add(a, b))",
          "219:     # Directly call generated kernel, by-passing SparseTensor validation.",
          "220:     with self.assertRaisesRegex((ValueError, errors_impl.InvalidArgumentError),",
          "221:                                 expected_error):",
          "222:       self.evaluate(",
          "223:           sparse_ops.gen_sparse_ops.sparse_tensor_dense_add(",
          "224:               a_indices, a_values, a_shape, b))",
          "226:   def testSparseDenseInvalidInputs(self):",
          "227:     self._testSparseDenseInvalidInputs(",
          "228:         a_indices=constant_op.constant(0, shape=[17, 2], dtype=dtypes.int64),",
          "229:         a_values=constant_op.constant(0, shape=[5], dtype=dtypes.float32),",
          "230:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "231:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "232:         expected_error=\"Dimensions 17 and 5 are not compatible\")",
          "233:     self._testSparseDenseInvalidInputs(",
          "234:         a_indices=constant_op.constant(0, shape=[17, 4], dtype=dtypes.int64),",
          "235:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
          "236:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "237:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "238:         expected_error=\"Dimensions 4 and 2 are not compatible\")",
          "239:     self._testSparseDenseInvalidInputs(",
          "240:         a_indices=constant_op.constant(7, shape=[17, 2], dtype=dtypes.int64),",
          "241:         a_values=constant_op.constant(0, shape=[17], dtype=dtypes.float32),",
          "242:         a_shape=constant_op.constant([3, 4], dtype=dtypes.int64),",
          "243:         b=constant_op.constant(1, shape=[3, 4], dtype=dtypes.float32),",
          "244:         expected_error=\"invalid index\")",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py||tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py": [
          "File: tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py -> tensorflow/python/kernel_tests/sparse_ops/sparse_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "665: class SparseAddTest(test_util.TensorFlowTestCase):",
          "667:   def testValuesInVariable(self):",
          "669:     values = variables.Variable([1], trainable=False, dtype=dtypes.float32)",
          "670:     shape = constant_op.constant([1], dtype=dtypes.int64)",
          "",
          "[Removed Lines]",
          "668:     indices = constant_op.constant([[1]], dtype=dtypes.int64)",
          "",
          "[Added Lines]",
          "668:     indices = constant_op.constant([[0]], dtype=dtypes.int64)",
          "",
          "---------------"
        ]
      }
    }
  ]
}