{
  "cve_id": "CVE-2017-7704",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.5, the DOF dissector could go into an infinite loop, triggered by packet injection or a malformed capture file. This was addressed in epan/dissectors/packet-dof.c by using a different integer data type and adjusting a return value.",
  "repo": "wireshark/wireshark",
  "patch_hash": "78d168fcbb0480109ba637590912f220197737cc",
  "patch_info": {
    "commit_hash": "78d168fcbb0480109ba637590912f220197737cc",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/78d168fcbb0480109ba637590912f220197737cc",
    "files": [
      "epan/dissectors/packet-dof.c"
    ],
    "message": "DOF: ensure to return a value different from 0 when asking for more data\n\nBug: 13453\nChange-Id: I331fb5f662f152c9c16b0d8ccbe228cded8ca85d\nReviewed-on: https://code.wireshark.org/review/20389\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c": [
      "File: epan/dissectors/packet-dof.c -> epan/dissectors/packet-dof.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6077:             {",
      "6078:                 pinfo->desegment_offset = offset;",
      "6079:                 pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
      "6081:             }",
      "6083:             if (available < packet_length)",
      "6084:             {",
      "6085:                 pinfo->desegment_offset = offset;",
      "6086:                 pinfo->desegment_len = packet_length - available;",
      "6088:             }",
      "6090:             remember_offset(pinfo, session, packet, tcpinfo);",
      "",
      "[Removed Lines]",
      "6080:                 return offset;",
      "6087:                 return offset;",
      "",
      "[Added Lines]",
      "6080:                 return offset + available;",
      "6087:                 return offset + available;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6032b0fe5fc1176ab77e03e20765f95fbd21b19e",
      "candidate_info": {
        "commit_hash": "6032b0fe5fc1176ab77e03e20765f95fbd21b19e",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/6032b0fe5fc1176ab77e03e20765f95fbd21b19e",
        "files": [
          "epan/dissectors/packet-dof.c"
        ],
        "message": "DOF: ensure to return a value different from 0 when asking for more data\n\nBug: 13453\nChange-Id: I331fb5f662f152c9c16b0d8ccbe228cded8ca85d\nReviewed-on: https://code.wireshark.org/review/20389\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit 78d168fcbb0480109ba637590912f220197737cc)\nReviewed-on: https://code.wireshark.org/review/20391",
        "before_after_code_files": [
          "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c": [
          "File: epan/dissectors/packet-dof.c -> epan/dissectors/packet-dof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6081:             {",
          "6082:                 pinfo->desegment_offset = offset;",
          "6083:                 pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
          "6085:             }",
          "6087:             if (available < packet_length)",
          "6088:             {",
          "6089:                 pinfo->desegment_offset = offset;",
          "6090:                 pinfo->desegment_len = packet_length - available;",
          "6092:             }",
          "6094:             remember_offset(pinfo, session, packet, tcpinfo);",
          "",
          "[Removed Lines]",
          "6084:                 return offset;",
          "6091:                 return offset;",
          "",
          "[Added Lines]",
          "6084:                 return offset + available;",
          "6091:                 return offset + available;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "006d9821f610bb6c006ac0f0d84ab8668a307945",
      "candidate_info": {
        "commit_hash": "006d9821f610bb6c006ac0f0d84ab8668a307945",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/006d9821f610bb6c006ac0f0d84ab8668a307945",
        "files": [
          "epan/dissectors/CMakeLists.txt",
          "epan/dissectors/Makefile.common",
          "epan/dissectors/packet-dof.c",
          "epan/dissectors/packet-v120.c",
          "epan/tfs.c",
          "epan/tfs.h"
        ],
        "message": "Adding a dissector for the Distributed Object Framework protocol.\n\nThe DOF is part of the open-source OpenDOF Project,\nmore information at https://opendof.org\n\nThere is a sample capture file (with encryption keys) at\nhttps://wiki.wireshark.org/SampleCaptures#DOF_.28Distributed_Object_Framework.29_Protocols\n\nChange-Id: I8d8ce3edf39904d0467a403157f9de2d2a165e90\nReviewed-on: https://code.wireshark.org/review/14394\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/Makefile.common||epan/dissectors/Makefile.common",
          "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c",
          "epan/dissectors/packet-v120.c||epan/dissectors/packet-v120.c",
          "epan/tfs.c||epan/tfs.c",
          "epan/tfs.h||epan/tfs.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c"
          ],
          "candidate": [
            "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/Makefile.common||epan/dissectors/Makefile.common": [
          "File: epan/dissectors/Makefile.common -> epan/dissectors/Makefile.common",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:  packet-dmx.c  \\",
          "521:  packet-dnp.c  \\",
          "522:  packet-dns.c  \\",
          "523:  packet-dplay.c  \\",
          "524:  packet-dpnss-link.c \\",
          "525:  packet-dpnss.c  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:  packet-dof.c  \\",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-dof.c||epan/dissectors/packet-dof.c": [
          "File: epan/dissectors/packet-dof.c -> epan/dissectors/packet-dof.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190: #include <config.h>",
          "192: #include <ctype.h>",
          "193: #include <stdio.h>",
          "194: #include <glib.h>",
          "196: #ifdef HAVE_LIBGCRYPT",
          "197: #include <wsutil/wsgcrypt.h>",
          "198: #if (defined GCRYPT_VERSION_NUMBER) && (GCRYPT_VERSION_NUMBER  >= 0x010600)",
          "199: #define LIBGCRYPT_OK",
          "200: #endif",
          "201: #endif",
          "203: #include <epan/packet.h>",
          "204: #include <epan/proto.h>",
          "205: #include <epan/proto_data.h>",
          "206: #include <epan/prefs.h>",
          "207: #include <epan/conversation.h>",
          "208: #include <epan/expert.h>",
          "209: #include <epan/uat.h>",
          "210: #include <wsutil/aes.h>",
          "211: #include <wsutil/str_util.h>",
          "212: #include <epan/to_str.h>",
          "213: #include <epan/dissectors/packet-tcp.h>",
          "238: typedef guint8 *dof_2009_1_pdu_19_sid;",
          "247: typedef struct _dpp_opid",
          "248: {",
          "249:     guint op_sid_id;",
          "250:     dof_2009_1_pdu_19_sid op_sid;",
          "251:     guint op_cnt;",
          "252: } dof_2009_1_pdu_20_opid;",
          "260: typedef struct _dof_transport_session",
          "261: {",
          "268:     gint transport_id;",
          "274:     guint32 transport_session_id;",
          "279:     nstime_t session_start_ts;",
          "284:     gboolean negotiation_required;",
          "289:     guint32 negotiation_complete_at;",
          "294:     nstime_t negotiation_complete_at_ts;",
          "305: } dof_transport_session;",
          "307: typedef struct _dof_transport_packet",
          "308: {",
          "319:     guint sender_id;",
          "320:     guint receiver_id;",
          "321: } dof_transport_packet;",
          "329: typedef struct _dof_session_key_exchange_data",
          "330: {",
          "334:     guint32 i_valid;",
          "339:     guint32 r_valid;",
          "345:     guint32 security_mode;",
          "351:     guint32 security_mode_data_length;",
          "352:     guint8 *security_mode_data;",
          "358:     void *security_mode_key_data;",
          "363:     guint8 *session_key;",
          "368:     struct _dof_session_key_exchange_data *next;",
          "369: } dof_session_key_exchange_data;",
          "375: typedef struct _dof_session_key_data",
          "376: {",
          "377:     guint8 *session_key;",
          "378: } dof_session_key_data;",
          "383: typedef struct _dof_group_data",
          "384: {",
          "385:     guint8 *domain;",
          "386:     guint8 domain_length;",
          "387:     guint8 *identity;",
          "388:     guint8 identity_length;",
          "389:     guint8 *kek;",
          "390: } dof_group_data;",
          "395: typedef struct _dof_identity_data",
          "396: {",
          "397:     guint8 *domain;",
          "398:     guint8 domain_length;",
          "399:     guint8 *identity;",
          "400:     guint8 identity_length;",
          "401:     guint8 *secret;",
          "402: } dof_identity_data;",
          "411: typedef struct _dof_security_data",
          "412: {",
          "414:     dof_session_key_data *session_key;",
          "415:     guint16 session_key_count;",
          "418:     dof_group_data *group_data;",
          "419:     guint16 group_data_count;",
          "422:     dof_identity_data *identity_data;",
          "423:     guint16 identity_data_count;",
          "428: } dof_security_data;",
          "433: struct _dof_learned_group_data;",
          "434: typedef struct _dof_learned_group_auth_data",
          "435: {",
          "436:     guint32 epoch;",
          "437:     guint8 *kek;",
          "438:     guint mode_length;",
          "439:     guint8 *mode;",
          "440:     guint16 security_mode;",
          "441:     struct _dof_learned_group_data *parent;",
          "442:     struct _dof_learned_group_auth_data *next;",
          "443: } dof_learned_group_auth_data;",
          "448: typedef struct _dof_learned_group_data",
          "449: {",
          "450:     guint8 domain_length;",
          "451:     guint8 *domain;",
          "452:     guint8 group_length;",
          "453:     guint8 *group;",
          "454:     guint32 ssid;",
          "456:     dof_learned_group_auth_data *keys;",
          "457:     struct _dof_learned_group_data *next;",
          "458: } dof_learned_group_data;",
          "473: struct _dof_session_data;",
          "474: typedef struct _dof_secure_session_data",
          "475: {",
          "479:     guint32 ssid;",
          "485:     guint8 domain_length;",
          "491:     guint8 *domain;",
          "497:     dof_session_key_exchange_data *session_security_data;",
          "498:     dof_session_key_exchange_data *session_security_data_last;",
          "506:     struct _dof_secure_session_data *next;",
          "507:     struct _dof_session_data *parent;",
          "508:     guint32 original_session_id;",
          "509:     gboolean is_2_node;",
          "510: } dof_secure_session_data;",
          "525: typedef struct _dof_session_data",
          "526: {",
          "530:     guint32 session_id;",
          "537:     guint8 dof_id;",
          "544:     dof_secure_session_data *secure_sessions;",
          "549:     GSList *data_list;",
          "550: } dof_session_data;",
          "555: typedef struct _dof_2008_16_security_3_1",
          "556: {",
          "557:     tvbuff_t *identity;",
          "558: } dof_2008_16_security_3_1;",
          "560: typedef struct _dof_2008_16_security_4",
          "561: {",
          "562:     tvbuff_t *identity;",
          "563:     tvbuff_t *nonce;",
          "564: } dof_2008_16_security_4;",
          "566: typedef struct _dof_2008_16_security_6_1",
          "567: {",
          "568:     tvbuff_t *i_identity;",
          "569:     tvbuff_t *i_nonce;",
          "570:     guint16 security_mode;",
          "571:     guint32 security_mode_data_length;",
          "572:     guint8 *security_mode_data;",
          "573: } dof_2008_16_security_6_1;",
          "575: typedef struct _dof_2008_16_security_6_2",
          "576: {",
          "577:     tvbuff_t *r_identity;",
          "578:     tvbuff_t *r_nonce;",
          "579: } dof_2008_16_security_6_2;",
          "586: typedef struct _ws_node",
          "587: {",
          "588:     address addr;",
          "589:     guint32 port;",
          "590: } ws_node;",
          "592: typedef struct _dof_session_list",
          "593: {",
          "594:     dof_session_data *session;",
          "595:     struct _dof_session_list *next;",
          "596: } dof_session_list;",
          "609: typedef struct _dof_packet_data",
          "610: {",
          "615:     GSList *data_list;",
          "620:     guint32 frame;",
          "625:     guint32 dof_frame;",
          "630:     struct _dof_packet_data *next;",
          "638:     gboolean processed;",
          "644:     const gchar *summary;",
          "651:     gint sender_id;",
          "652:     gint receiver_id;",
          "658:     gboolean is_sent_by_initiator;",
          "665:     guint sender_sid_id;",
          "666:     guint receiver_sid_id;",
          "671:     dof_2009_1_pdu_19_sid sender_sid;",
          "672:     dof_2009_1_pdu_19_sid receiver_sid;",
          "677:     gboolean has_opid;",
          "678:     dof_2009_1_pdu_20_opid op;",
          "679:     gboolean has_referenced_opid;",
          "680:     dof_2009_1_pdu_20_opid ref_op;",
          "682:     struct _dof_packet_data *opid_first;",
          "683:     struct _dof_packet_data *opid_next;",
          "684:     struct _dof_packet_data *opid_last;",
          "685:     struct _dof_packet_data *opid_first_response;",
          "686:     struct _dof_packet_data *opid_next_response;",
          "687:     struct _dof_packet_data *opid_last_response;",
          "692:     const gchar *security_session_error;",
          "693:     dof_session_key_exchange_data *security_session;",
          "694:     void *security_packet;",
          "695:     guint8 *decrypted_buffer;",
          "696:     tvbuff_t *decrypted_tvb;",
          "697:     guint16 decrypted_offset;",
          "698:     gchar *decrypted_buffer_error;",
          "705:     void *opid_data;",
          "706: } dof_packet_data;",
          "712: typedef struct _dof_globals",
          "713: {",
          "714:     guint32 next_transport_session;",
          "715:     guint32 next_session;",
          "716:     dof_packet_data *dof_packet_head;",
          "717:     dof_packet_data *dof_packet_tail;",
          "718:     dof_security_data *global_security;",
          "719:     dof_learned_group_data *learned_group_data;",
          "720:     gboolean decrypt_all_packets;",
          "721:     gboolean track_operations;",
          "722:     guint track_operations_window;",
          "723: } dof_globals;",
          "730: typedef struct _dof_api_data",
          "731: {",
          "735:     dof_transport_session *transport_session;",
          "740:     dof_transport_packet *transport_packet;",
          "745:     dof_session_data *session;",
          "750:     dof_packet_data *packet;",
          "755:     dof_secure_session_data *secure_session;",
          "756: } dof_api_data;",
          "766: typedef enum _dof_secmode_context",
          "767: {",
          "768:     INITIALIZE,",
          "769:     HEADER,",
          "770:     TRAILER",
          "771: } dof_secmode_context;",
          "774: typedef struct _dof_secmode_api_data",
          "775: {",
          "780:     guint8 version;",
          "785:     dof_secmode_context context;",
          "790:     guint security_mode_offset;",
          "795:     dof_api_data *dof_api;",
          "802:     dof_secure_session_data *secure_session;",
          "808:     dof_session_key_exchange_data *session_key_data;",
          "809: } dof_secmode_api_data;",
          "812: void proto_register_dof(void);",
          "813: void proto_reg_handoff_dof(void);",
          "816: static int dissect_2008_1_dsp_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree);",
          "817: static int dissect_2008_16_security_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "818: static int dissect_2008_16_security_2(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "819: static int dissect_2008_16_security_3_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "820: static int dissect_2008_16_security_3_2(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "821: static int dissect_2008_16_security_4(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "822: static int dissect_2008_16_security_5(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "823: static int dissect_2008_16_security_6_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "824: static int dissect_2008_16_security_6_2(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "825: static int dissect_2008_16_security_6_3(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "826: static int dissect_2008_16_security_7(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "827: static int dissect_2008_16_security_8(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "828: static int dissect_2008_16_security_9(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "829: static int dissect_2008_16_security_10(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "830: static int dissect_2008_16_security_11(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "831: static int dissect_2008_16_security_12(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "832: static int dissect_2008_16_security_13(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "833: static int dissect_2009_11_type_4(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data);",
          "834: static int dissect_2009_11_type_5(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree);",
          "836: static const gchar* dof_oid_create_standard_string(guint32 bufferSize, const guint8 *pOIDBuffer);",
          "837: static const gchar* dof_iid_create_standard_string(guint32 bufferSize, const guint8 *pIIDBuffer);",
          "838: static guint8 dof_oid_create_internal(const char *oid, guint32 *size, guint8 *buffer);",
          "839: static void dof_oid_new_standard_string(const char *data, guint32 *rsize, guint8 **oid);",
          "840: static gint read_c4(tvbuff_t *tvb, gint offset, guint32 *v, gint *len);",
          "841: static void validate_c4(packet_info *pinfo, proto_item *pi, guint32, gint len);",
          "842: static gint read_c3(tvbuff_t *tvb, gint offset, guint32 *v, gint *len);",
          "843: static void validate_c3(packet_info *pinfo, proto_item *pi, guint32, gint len);",
          "844: static gint read_c2(tvbuff_t *tvb, gint offset, guint16 *v, gint *len);",
          "845: static void validate_c2(packet_info *pinfo, proto_item *pi, guint16, gint len);",
          "847: static gint dof_dissect_pdu(dissector_t dissector, tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *result);",
          "848: static gint dof_dissect_pdu_as_field(dissector_t disector, tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset, int item, int ett, void *result);",
          "851: static void dof_session_add_proto_data(dof_session_data *session, int proto, void *proto_data);",
          "852: static void* dof_session_get_proto_data(dof_session_data *session, int proto);",
          "853: static void dof_session_delete_proto_data(dof_session_data *session, int proto);",
          "854: #endif",
          "856: static void dof_packet_add_proto_data(dof_packet_data *packet, int proto, void *proto_data);",
          "857: static void* dof_packet_get_proto_data(dof_packet_data *packet, int proto);",
          "859: static void dof_packet_delete_proto_data(dof_packet_data *packet, int proto);",
          "860: #endif",
          "863: #define DOF_PROTOCOL_STACK \"DOF Protocol Stack\"",
          "880: #define DOF_P2P_NEG_SEC_UDP_PORT    3567",
          "881: #define DOF_P2P_NEG_SEC_TCP_PORT    3567",
          "883: #define DOF_TUN_SEC_TCP_PORT        3568",
          "884: #define DOF_MCAST_NEG_SEC_UDP_PORT  5567",
          "885: #define DOF_P2P_SEC_TCP_PORT        5567",
          "887: #define DOF_TUN_NON_SEC_TCP_PORT    8567",
          "890: static dissector_handle_t dof_udp_handle;",
          "892: static int proto_2008_1_dof = -1;",
          "893: static int proto_2008_1_dof_tcp = -1;",
          "894: static int proto_2008_1_dof_udp = -1;",
          "896: static int hf_2008_1_dof_session = -1;",
          "897: static int hf_2008_1_dof_is_2_node = -1;",
          "898: static int hf_2008_1_dof_is_streaming = -1;",
          "899: static int hf_2008_1_dof_is_from_client = -1;",
          "900: static int hf_2008_1_dof_frame = -1;",
          "901: static int hf_2008_1_dof_session_transport = -1;",
          "903: static int ett_2008_1_dof = -1;",
          "908: #define TUNNEL_PROTOCOL_STACK \"DOF Tunnel Protocol Stack\"",
          "909: #define TUNNEL_APPLICATION_PROTOCOL \"DOF Tunnel Protocol\"",
          "911: static dissector_table_t dof_tun_app_dissectors;",
          "914: static int proto_2012_1_tunnel = -1;",
          "916: static int ett_2012_1_tunnel = -1;",
          "918: static int hf_2012_1_tunnel_1_version = -1;",
          "919: static int hf_2012_1_tunnel_1_length = -1;",
          "922: #define DNP_MAX_VERSION 1",
          "923: #define DOF_NETWORK_PROTOCOL \"DOF Network Protocol\"",
          "925: static dissector_table_t dnp_dissectors;",
          "926: static dissector_table_t dnp_framing_dissectors;",
          "928: static int proto_2008_1_dnp = -1;",
          "930: static int hf_2008_1_dnp_1_version = -1;",
          "931: static int hf_2008_1_dnp_1_flag = -1;",
          "933: static int ett_2008_1_dnp = -1;",
          "934: static int ett_2008_1_dnp_header = -1;",
          "937: static int proto_2008_1_dnp_0 = -1;",
          "939: static int hf_2008_1_dnp_0_1_1_padding = -1;",
          "940: static int hf_2008_1_dnp_0_1_1_version = -1;",
          "943: #define DNP_V1_DEFAULT_FLAGS    (0)",
          "944: static int proto_2009_9_dnp_1 = -1;",
          "946: static int hf_2009_9_dnp_1_flags = -1;",
          "947: static int hf_2009_9_dnp_1_flag_length = -1;",
          "948: static int hf_2009_9_dnp_1_length = -1;",
          "949: static int hf_2009_9_dnp_1_flag_srcport = -1;",
          "950: static int hf_2009_9_dnp_1_srcport = -1;",
          "951: static int hf_2009_9_dnp_1_flag_dstport = -1;",
          "952: static int hf_2009_9_dnp_1_dstport = -1;",
          "954: static int ett_2009_9_dnp_1_flags = -1;",
          "956: static const int *bitmask_2009_9_dnp_1_flags[] = {",
          "957:     &hf_2009_9_dnp_1_flag_length,",
          "958:     &hf_2009_9_dnp_1_flag_srcport,",
          "959:     &hf_2009_9_dnp_1_flag_dstport,",
          "960:     NULL",
          "961: };",
          "964: #define DOF_PRESENTATION_PROTOCOL \"DOF Presentation Protocol\"",
          "966: static dissector_table_t dof_dpp_dissectors;",
          "968: static int proto_2008_1_dpp = -1;",
          "970: static int hf_2008_1_dpp_sid_num = -1;",
          "971: static int hf_2008_1_dpp_rid_num = -1;",
          "972: static int hf_2008_1_dpp_sid_str = -1;",
          "973: static int hf_2008_1_dpp_rid_str = -1;",
          "974: static int hf_2008_1_dpp_first_command = -1;",
          "975: static int hf_2008_1_dpp_last_command = -1;",
          "976: static int hf_2008_1_dpp_first_response = -1;",
          "977: static int hf_2008_1_dpp_last_response = -1;",
          "978: static int hf_2008_1_dpp_related_frame = -1;",
          "979: static int hf_2008_1_dpp_1_version = -1;",
          "980: static int hf_2008_1_dpp_1_flag = -1;",
          "982: static int ett_2008_1_dpp = -1;",
          "983: static int ett_2008_1_dpp_1_header = -1;",
          "986: static int proto_2008_1_dpp_0 = -1;",
          "988: static int hf_2008_1_dpp_0_1_1_version = -1;",
          "993: #define DPP_V2_DEFAULT_FLAGS    (0)",
          "994: #define DPP_V2_SEC_FLAG_E (0x80)",
          "995: #define DPP_V2_SEC_FLAG_D (0x08)",
          "996: #define DPP_V2_SEC_FLAG_P (0x04)",
          "997: #define DPP_V2_SEC_FLAG_A (0x02)",
          "998: #define DPP_V2_SEC_FLAG_S (0x01)",
          "1000: static int proto_2009_12_dpp = -1;",
          "1001: static int proto_2009_12_dpp_common = -1;",
          "1004: static int hf_2009_12_dpp_2_1_flags = -1;",
          "1005: static int hf_2009_12_dpp_2_1_flag_security = -1;",
          "1006: static int hf_2009_12_dpp_2_1_flag_opid = -1;",
          "1007: static int hf_2009_12_dpp_2_1_flag_seq = -1;",
          "1008: static int hf_2009_12_dpp_2_1_flag_retry = -1;",
          "1009: static int hf_2009_12_dpp_2_1_flag_cmdrsp = -1;",
          "1010: static int hf_2009_12_dpp_2_3_sec_flags = -1;",
          "1011: static int hf_2009_12_dpp_2_3_sec_flag_secure = -1;",
          "1012: static int hf_2009_12_dpp_2_3_sec_flag_rdid = -1;",
          "1013: static int hf_2009_12_dpp_2_3_sec_flag_partition = -1;",
          "1014: static int hf_2009_12_dpp_2_3_sec_flag_ssid = -1;",
          "1015: static int hf_2009_12_dpp_2_3_sec_flag_as = -1;",
          "1016: static int hf_2009_12_dpp_2_3_sec_ssid = -1;",
          "1017: static int hf_2009_12_dpp_2_3_sec_rdid = -1;",
          "1018: static int hf_2009_12_dpp_2_3_sec_remote_partition = -1;",
          "1019: static int hf_2009_12_dpp_2_3_sec_partition = -1;",
          "1020: static int hf_2009_12_dpp_2_1_opcnt = -1;",
          "1021: static int hf_2009_12_dpp_2_1_seq = -1;",
          "1022: static int hf_2009_12_dpp_2_1_retry = -1;",
          "1023: static int hf_2009_12_dpp_2_1_delay = -1;",
          "1024: static int hf_2009_12_dpp_2_14_opcode = -1;",
          "1026: static int ett_2009_12_dpp_2_1_flags = -1;",
          "1027: static int ett_2009_12_dpp_2_3_security = -1;",
          "1028: static int ett_2009_12_dpp_2_3_sec_flags = -1;",
          "1029: static int ett_2009_12_dpp_2_3_sec_remote_partition = -1;",
          "1030: static int ett_2009_12_dpp_2_3_sec_partition = -1;",
          "1031: static int ett_2009_12_dpp_2_opid = -1;",
          "1032: static int ett_2009_12_dpp_2_opid_history = -1;",
          "1034: static int ett_2009_12_dpp_common = -1;",
          "1036: static const value_string strings_2009_12_dpp_opid_types[] = {",
          "1037:     { 0, \"Not Present\" },",
          "1038:     { 1, \"SID [Sender]\" },",
          "1039:     { 2, \"SID [Receiver]\" },",
          "1040:     { 3, \"SID [Explicit]\" },",
          "1041:     { 0, NULL }",
          "1042: };",
          "1044: #define OP_2009_12_RESPONSE_FLAG      (0x80)",
          "1045: #define OP_2009_12_NODE_DOWN_CMD      (0)",
          "1046: #define OP_2009_12_NODE_DOWN_RSP      (OP_2009_12_RESPONSE_FLAG|OP_2009_12_NODE_DOWN_CMD)",
          "1047: #define OP_2009_12_SOURCE_LOST_CMD    (1)",
          "1048: #define OP_2009_12_SOURCE_LOST_RSP    (OP_2009_12_RESPONSE_FLAG|OP_2009_12_SOURCE_LOST_CMD)",
          "1049: #define OP_2009_12_RENAME_CMD         (2)",
          "1050: #define OP_2009_12_RENAME_RSP         (OP_2009_12_RESPONSE_FLAG|OP_2009_12_RENAME_CMD)",
          "1051: #define OP_2009_12_PING_CMD           (3)",
          "1052: #define OP_2009_12_PING_RSP           (OP_2009_12_RESPONSE_FLAG|OP_2009_12_PING_CMD)",
          "1053: #define OP_2009_12_CANCEL_ALL_CMD     (4)",
          "1054: #define OP_2009_12_CANCEL_ALL_RSP     (OP_2009_12_RESPONSE_FLAG|OP_2009_12_CANCEL_ALL_CMD)",
          "1055: #define OP_2009_12_HEARTBEAT_CMD      (5)",
          "1056: #define OP_2009_12_HEARTBEAT_RSP      (OP_2009_12_RESPONSE_FLAG|OP_2009_12_HEARTBEAT_CMD)",
          "1057: #define OP_2009_12_QUERY_CMD          (6)",
          "1058: #define OP_2009_12_QUERY_RSP          (OP_2009_12_RESPONSE_FLAG|OP_2009_12_QUERY_CMD)",
          "1059: #define OP_2009_12_SOURCE_FOUND_CMD   (8)",
          "1060: #define OP_2009_12_SOURCE_FOUND_RSP   (OP_2009_12_RESPONSE_FLAG|OP_2009_12_SOURCE_FOUND_CMD)",
          "1062: static const value_string strings_2009_12_dpp_common_opcodes[] = {",
          "1063:     { OP_2009_12_NODE_DOWN_CMD, \"DPP Node Down\" },",
          "1064:     { OP_2009_12_NODE_DOWN_RSP, \"DPP Node Down Response (Illegal)\" },",
          "1065:     { OP_2009_12_SOURCE_LOST_CMD, \"DPP Source Lost\" },",
          "1066:     { OP_2009_12_SOURCE_LOST_RSP, \"DPP Source Lost Response (Illegal)\" },",
          "1067:     { OP_2009_12_SOURCE_FOUND_CMD, \"DPP Source Found\" },",
          "1068:     { OP_2009_12_SOURCE_FOUND_RSP, \"DPP Source Found Response (Illegal)\" },",
          "1069:     { OP_2009_12_RENAME_CMD, \"DPP Rename\" },",
          "1070:     { OP_2009_12_RENAME_RSP, \"DPP Rename Response (Illegal)\" },",
          "1071:     { OP_2009_12_PING_CMD, \"DPP Ping\" },",
          "1072:     { OP_2009_12_PING_RSP, \"DPP Ping Response\" },",
          "1073:     { OP_2009_12_HEARTBEAT_CMD, \"DPP Heartbeat\" },",
          "1074:     { OP_2009_12_HEARTBEAT_RSP, \"DPP Heartbeat Response (Illegal)\" },",
          "1075:     { OP_2009_12_QUERY_CMD, \"DPP Query\" },",
          "1076:     { OP_2009_12_QUERY_RSP, \"DPP Query Response\" },",
          "1077:     { OP_2009_12_CANCEL_ALL_CMD, \"DPP Cancel All\" },",
          "1078:     { OP_2009_12_CANCEL_ALL_RSP, \"DPP Cancel All Response (Illegal)\" },",
          "1079:     { 0, NULL }",
          "1080: };",
          "1083: #define DOF_APPLICATION_PROTOCOL \"DOF Application Protocol\"",
          "1085: static dissector_table_t app_dissectors;",
          "1087: static int proto_2008_1_app = -1;",
          "1089: static int hf_2008_1_app_version = -1;",
          "1093: static dissector_table_t dsp_option_dissectors;",
          "1095: static int hf_2008_1_dsp_12_opcode = -1;",
          "1096: static int hf_2008_1_dsp_attribute_code = -1;",
          "1097: static int hf_2008_1_dsp_attribute_data = -1;",
          "1098: static int hf_2008_1_dsp_value_length = -1;",
          "1099: static int hf_2008_1_dsp_value_data = -1;",
          "1101: static const value_string strings_2008_1_dsp_attribute_codes[] = {",
          "1102:     { 0, \"TEP Family\" },",
          "1103:     { 1, \"OAP Family\" },",
          "1104:     { 2, \"CCM Family\" },",
          "1105:     { 3, \"TRP Family\" },",
          "1106:     { 255, \"General\" },",
          "1107:     { 0, NULL }",
          "1108: };",
          "1110: #define DOF_PROTOCOL_DSP 0",
          "1111: #define DSP_OAP_FAMILY 0x010000",
          "1113: static int proto_2008_1_dsp = -1;",
          "1115: #define OP_2008_1_RSP                   (0x80)",
          "1116: #define OP_2008_1_QUERY_CMD             0",
          "1117: #define OP_2008_1_QUERY_RSP             (OP_2008_1_RSP|OP_2008_1_QUERY_CMD)",
          "1118: #define OP_2008_1_CONFIG_REQ            1",
          "1119: #define OP_2008_1_CONFIG_ACK            (OP_2008_1_RSP|2)",
          "1120: #define OP_2008_1_CONFIG_NAK            (OP_2008_1_RSP|3)",
          "1121: #define OP_2008_1_CONFIG_REJ            (OP_2008_1_RSP|4)",
          "1122: #define OP_2008_1_TERMINATE_CMD         5",
          "1123: #define OP_2008_1_TERMINATE_RSP         (OP_2008_1_RSP|OP_2008_1_TERMINATE_CMD)",
          "1124: #define OP_2008_1_OPEN_CMD              6",
          "1125: #define OP_2008_1_OPEN_RSP              (OP_2008_1_RSP|OP_2008_1_OPEN_CMD)",
          "1126: #define OP_2008_1_OPEN_SECURE_RSP       (OP_2008_1_RSP|7)",
          "1128: static const value_string strings_2008_1_dsp_opcodes[] = {",
          "1129:     { OP_2008_1_QUERY_CMD, \"DSP Query\" },",
          "1130:     { OP_2008_1_QUERY_RSP, \"DSP Query Response\" },",
          "1131:     { OP_2008_1_CONFIG_REQ, \"DSP Request\" },",
          "1132:     { OP_2008_1_CONFIG_ACK, \"DSP ACK Response\" },",
          "1133:     { OP_2008_1_CONFIG_NAK, \"DSP NAK Response\" },",
          "1134:     { OP_2008_1_CONFIG_REJ, \"DSP REJ Response\" },",
          "1135:     { OP_2008_1_TERMINATE_CMD, \"DSP Terminate/Close Request\" },",
          "1136:     { OP_2008_1_TERMINATE_RSP, \"DSP Terminate/Close Response\" },",
          "1137:     { OP_2008_1_OPEN_CMD, \"DSP Open\" },",
          "1138:     { OP_2008_1_OPEN_RSP, \"DSP Open Response\" },",
          "1139:     { OP_2008_1_OPEN_SECURE_RSP, \"DSP Open Secure Response\" },",
          "1140:     { 0, NULL }",
          "1141: };",
          "1143: #define DSP_AVP_AUTHENTICATION          0",
          "1144: #define DSP_AVP_APPLICATION             1",
          "1147: static const value_string strings_2008_1_dsp_attributes[] = {",
          "1148:     { DSP_AVP_AUTHENTICATION, \"Authentication Protocol\" },",
          "1149:     { DSP_AVP_APPLICATION, \"Application Protocol\" },",
          "1150:     { 0, NULL }",
          "1151: };",
          "1153: static const value_string strings_2008_1_dsp_values[] = {",
          "1154:     { 1, \"DOF Object Access Protocol (version 1)\" },",
          "1155:     { 3, \"DOF Ticket Exchange Protocol (version 1)\" },",
          "1156:     { 0, NULL }",
          "1157: };",
          "1158: #endif",
          "1160: static int ett_2008_1_dsp_12 = -1;",
          "1161: static int ett_2008_1_dsp_12_options = -1;",
          "1162: static int ett_2008_1_dsp_12_option = -1;",
          "1166: #define DOF_PROTOCOL_OAP_1 1",
          "1168: static int proto_oap_1 = -1;",
          "1169: static int proto_oap_1_dsp = -1;",
          "1172: static int hf_oap_1_dsp_option = -1;",
          "1175: static int hf_oap_1_opcode = -1;",
          "1177: static int hf_oap_1_alias_size = -1;",
          "1178: static int hf_oap_1_flags = -1;",
          "1179: static int hf_oap_1_exception_internal_flag = -1;",
          "1180: static int hf_oap_1_exception_final_flag = -1;",
          "1181: static int hf_oap_1_exception_provider_flag = -1;",
          "1182: static int hf_oap_1_cmdcontrol = -1;",
          "1183: static int hf_oap_1_cmdcontrol_cache_flag = -1;",
          "1184: static int hf_oap_1_cmdcontrol_verbosity_flag = -1;",
          "1185: static int hf_oap_1_cmdcontrol_noexecute_flag = -1;",
          "1186: static int hf_oap_1_cmdcontrol_ack_flag = -1;",
          "1187: static int hf_oap_1_cmdcontrol_delay_flag = -1;",
          "1188: static int hf_oap_1_cmdcontrol_heuristic_flag = -1;",
          "1189: static int hf_oap_1_cmdcontrol_heuristic = -1;",
          "1190: static int hf_oap_1_cmdcontrol_cache = -1;",
          "1191: static int hf_oap_1_cmdcontrol_ackcnt = -1;",
          "1192: static int hf_oap_1_cmdcontrol_ack = -1;",
          "1195: static int hf_oap_1_opinfo_start_frame = -1;",
          "1196: static int hf_oap_1_opinfo_end_frame = -1;",
          "1197: static int hf_oap_1_opinfo_timeout = -1;",
          "1198: #endif",
          "1200: static int hf_oap_1_providerid = -1;",
          "1201: static int ett_oap_1_1_providerid = -1;",
          "1203: static int hf_oap_1_objectid = -1;",
          "1204: static int ett_oap_1_objectid = -1;",
          "1206: static int hf_oap_1_interfaceid = -1;",
          "1207: static int hf_oap_1_itemid = -1;",
          "1210: static int hf_oap_1_distance = -1;",
          "1211: #endif",
          "1213: static int hf_oap_1_alias = -1;",
          "1214: static int hf_oap_1_alias_frame = -1;",
          "1216: static int hf_oap_1_subscription_delta = -1;",
          "1217: static int hf_oap_1_update_sequence = -1;",
          "1218: static int hf_oap_1_value_list = -1;",
          "1220: static int ett_oap_1_dsp = -1;",
          "1221: static int ett_oap_1_dsp_options = -1;",
          "1223: static int ett_oap_1 = -1;",
          "1224: static int ett_oap_1_opinfo = -1;",
          "1225: static int ett_oap_1_cmdcontrol = -1;",
          "1226: static int ett_oap_1_cmdcontrol_flags = -1;",
          "1227: static int ett_oap_1_cmdcontrol_ack = -1;",
          "1228: static int ett_oap_1_alias = -1;",
          "1230: static const int *bitmask_oap_1_cmdcontrol_flags[] = {",
          "1231:     &hf_oap_1_cmdcontrol_cache_flag,",
          "1232:     &hf_oap_1_cmdcontrol_verbosity_flag,",
          "1233:     &hf_oap_1_cmdcontrol_noexecute_flag,",
          "1234:     &hf_oap_1_cmdcontrol_ack_flag,",
          "1235:     &hf_oap_1_cmdcontrol_delay_flag,",
          "1236:     &hf_oap_1_cmdcontrol_heuristic_flag,",
          "1237:     NULL",
          "1238: };",
          "1240: static expert_field ei_oap_no_session = EI_INIT;",
          "1242: static GHashTable *oap_1_alias_to_binding = NULL;",
          "1244: #define OAP_1_RESPONSE                    (0x80)",
          "1245: #define OAP_1_CMD_ACTIVATE                28",
          "1246: #define OAP_1_RSP_ACTIVATE                (OAP_1_CMD_ACTIVATE|OAP_1_RESPONSE)",
          "1247: #define OAP_1_CMD_ADVERTISE               5",
          "1248: #define OAP_1_RSP_ADVERTISE               (OAP_1_CMD_ADVERTISE|OAP_1_RESPONSE)",
          "1249: #define OAP_1_CMD_CHANGE                  2",
          "1250: #define OAP_1_RSP_CHANGE                  (OAP_1_CMD_CHANGE|OAP_1_RESPONSE)",
          "1251: #define OAP_1_CMD_CONNECT                 4",
          "1252: #define OAP_1_RSP_CONNECT                 (OAP_1_CMD_CONNECT|OAP_1_RESPONSE)",
          "1253: #define OAP_1_CMD_DEFINE                  6",
          "1254: #define OAP_1_RSP_DEFINE                  (OAP_1_CMD_DEFINE|OAP_1_RESPONSE)",
          "1255: #define OAP_1_CMD_EXCEPTION               9",
          "1256: #define OAP_1_RSP_EXCEPTION               (OAP_1_CMD_EXCEPTION|OAP_1_RESPONSE)",
          "1257: #define OAP_1_CMD_FULL_CONNECT            3",
          "1258: #define OAP_1_RSP_FULL_CONNECT            (OAP_1_CMD_FULL_CONNECT|OAP_1_RESPONSE)",
          "1259: #define OAP_1_CMD_GET                     10",
          "1260: #define OAP_1_RSP_GET                     (OAP_1_CMD_GET|OAP_1_RESPONSE)",
          "1261: #define OAP_1_CMD_INVOKE                  12",
          "1262: #define OAP_1_RSP_INVOKE                  (OAP_1_CMD_INVOKE|OAP_1_RESPONSE)",
          "1263: #define OAP_1_CMD_OPEN                    14",
          "1264: #define OAP_1_RSP_OPEN                    (OAP_1_CMD_OPEN|OAP_1_RESPONSE)",
          "1265: #define OAP_1_CMD_PROVIDE                 16",
          "1266: #define OAP_1_RSP_PROVIDE                 (OAP_1_CMD_PROVIDE|OAP_1_RESPONSE)",
          "1267: #define OAP_1_CMD_REGISTER                25",
          "1268: #define OAP_1_RSP_REGISTER                (OAP_1_CMD_REGISTER|OAP_1_RESPONSE)",
          "1269: #define OAP_1_CMD_SET                     20",
          "1270: #define OAP_1_RSP_SET                     (OAP_1_CMD_SET|OAP_1_RESPONSE)",
          "1271: #define OAP_1_CMD_SIGNAL                  22",
          "1272: #define OAP_1_RSP_SIGNAL                  (OAP_1_CMD_SIGNAL|OAP_1_RESPONSE)",
          "1273: #define OAP_1_CMD_SUBSCRIBE               24",
          "1274: #define OAP_1_RSP_SUBSCRIBE               (OAP_1_CMD_SUBSCRIBE|OAP_1_RESPONSE)",
          "1275: #define OAP_1_CMD_WATCH                   30",
          "1276: #define OAP_1_RSP_WATCH                   (OAP_1_CMD_WATCH|OAP_1_RESPONSE)",
          "1278: static const value_string oap_opcode_strings[] = {",
          "1279:     { OAP_1_CMD_ACTIVATE, \"OAP Activate\" },",
          "1280:     { OAP_1_RSP_ACTIVATE, \"OAP Activate Response (Illegal)\" },",
          "1281:     { OAP_1_CMD_ADVERTISE, \"OAP Advertise\" },",
          "1282:     { OAP_1_RSP_ADVERTISE, \"OAP Advertise Response (Illegal)\" },",
          "1283:     { OAP_1_CMD_CHANGE, \"OAP Change\" },",
          "1284:     { OAP_1_RSP_CHANGE, \"OAP Change Response (Illegal)\" },",
          "1285:     { OAP_1_CMD_CONNECT, \"OAP Connect\" },",
          "1286:     { OAP_1_RSP_CONNECT, \"OAP Connect Response (Illegal)\" },",
          "1287:     { OAP_1_CMD_DEFINE, \"OAP Define\" },",
          "1288:     { OAP_1_RSP_DEFINE, \"OAP Define Response\" },",
          "1289:     { OAP_1_CMD_EXCEPTION, \"OAP Exception (Illegal)\" },",
          "1290:     { OAP_1_RSP_EXCEPTION, \"OAP Exception Response\" },",
          "1291:     { OAP_1_CMD_FULL_CONNECT, \"OAP Full Connect\" },",
          "1292:     { OAP_1_RSP_FULL_CONNECT, \"OAP Full Connect Response (Illegal)\" },",
          "1293:     { OAP_1_CMD_GET, \"OAP Get\" },",
          "1294:     { OAP_1_RSP_GET, \"OAP Get Response\" },",
          "1295:     { OAP_1_CMD_INVOKE, \"OAP Invoke\" },",
          "1296:     { OAP_1_RSP_INVOKE, \"OAP Invoke Response\" },",
          "1297:     { OAP_1_CMD_OPEN, \"OAP Open\" },",
          "1298:     { OAP_1_RSP_OPEN, \"OAP Open Response\" },",
          "1299:     { OAP_1_CMD_PROVIDE, \"OAP Provide\" },",
          "1300:     { OAP_1_RSP_PROVIDE, \"OAP Provide Response (Illegal)\" },",
          "1301:     { OAP_1_CMD_REGISTER, \"OAP Register\" },",
          "1302:     { OAP_1_RSP_REGISTER, \"OAP Register Response\" },",
          "1303:     { OAP_1_CMD_SET, \"OAP Set\" },",
          "1304:     { OAP_1_RSP_SET, \"OAP Set Response\" },",
          "1305:     { OAP_1_CMD_SIGNAL, \"OAP Signal\" },",
          "1306:     { OAP_1_RSP_SIGNAL, \"OAP Signal Response (Illegal)\" },",
          "1307:     { OAP_1_CMD_SUBSCRIBE, \"OAP Subscribe\" },",
          "1308:     { OAP_1_RSP_SUBSCRIBE, \"OAP Subscribe Response\" },",
          "1309:     { OAP_1_CMD_WATCH, \"OAP Watch\" },",
          "1310:     { OAP_1_RSP_WATCH, \"OAP Watch Response (Illegal)\" },",
          "1312:     { 0, NULL }",
          "1313: };",
          "1315: typedef struct _alias_key",
          "1316: {",
          "1317:     guint32 session;",
          "1318:     guint32 sender;",
          "1319:     guint32 alias;",
          "1320: } oap_1_alias_key;",
          "1322: static guint oap_1_alias_hash_func(gconstpointer ptr)",
          "1323: {",
          "1324:     const oap_1_alias_key *key = (const oap_1_alias_key *)ptr;",
          "1325:     return g_int_hash(&key->session) + g_int_hash(&key->sender) + g_int_hash(&key->alias);",
          "1326: }",
          "1328: static int oap_1_alias_equal_func(gconstpointer ptr1, gconstpointer ptr2)",
          "1329: {",
          "1330:     const oap_1_alias_key *key1 = (const oap_1_alias_key *)ptr1;",
          "1331:     const oap_1_alias_key *key2 = (const oap_1_alias_key *)ptr2;",
          "1333:     if (key1->session != key2->session)",
          "1334:         return 0;",
          "1336:     if (key1->sender != key2->sender)",
          "1337:         return 0;",
          "1339:     if (key1->alias != key2->alias)",
          "1340:         return 0;",
          "1342:     return 1;",
          "1343: }",
          "1345: typedef struct",
          "1346: {",
          "1347:     guint8 *oid;",
          "1348:     guint16 oid_length;",
          "1349:     guint8 *iid;",
          "1350:     guint16 iid_length;",
          "1351:     guint32 frame;",
          "1352: } oap_1_binding;",
          "1354: typedef struct oap_1_binding_list",
          "1355: {",
          "1356:     oap_1_binding *binding;",
          "1357:     struct oap_1_binding_list *next;",
          "1358: } oap_1_binding_list;",
          "1360: typedef struct",
          "1361: {",
          "1362:     oap_1_binding *resolved_alias;",
          "1363: } oap_1_packet_data;",
          "1365: static oap_1_binding* oap_1_resolve_alias(oap_1_alias_key *key);",
          "1367: static int oap_1_tree_add_alias(dof_api_data *api_data, oap_1_packet_data *oap_packet _U_, dof_packet_data *packet, proto_tree *tree, tvbuff_t *tvb, gint offset, guint8 alias_length, guint8 resolve)",
          "1368: {",
          "1369:     dof_session_data *session = api_data->session;",
          "1370:     proto_item *ti;",
          "1371:     proto_tree *options_tree;",
          "1373:     if (alias_length == 0)",
          "1375:         return offset;",
          "1377:     if (session == NULL)",
          "1379:         return offset;",
          "1381:     ti = proto_tree_add_item(tree, hf_oap_1_alias, tvb, offset, alias_length, ENC_BIG_ENDIAN);",
          "1383:     if (resolve)",
          "1384:     {",
          "1385:         oap_1_binding *binding = NULL;",
          "1386:         oap_1_alias_key key;",
          "1387:         int i;",
          "1388:         guint32 alias;",
          "1390:         alias = 0;",
          "1391:         for (i = 0; i < alias_length; i++)",
          "1392:             alias = (alias << 8) | tvb_get_guint8(tvb, offset + i);",
          "1394:         key.session = session->session_id;",
          "1395:         key.sender = packet->sender_id;",
          "1396:         key.alias = alias;",
          "1397:         binding = oap_1_resolve_alias(&key);",
          "1398:         if (binding)",
          "1399:         {",
          "1400:             options_tree = proto_item_add_subtree(ti, ett_oap_1_alias);",
          "1403:             ti = proto_tree_add_bytes_format_value(tree, hf_oap_1_interfaceid, tvb, offset, alias_length, binding->iid, \"%s\", dof_iid_create_standard_string(binding->iid_length, binding->iid));",
          "1404:             PROTO_ITEM_SET_GENERATED(ti);",
          "1407:             ti = proto_tree_add_bytes_format_value(tree, hf_oap_1_objectid, tvb, offset, alias_length, binding->oid, \"%s\", dof_oid_create_standard_string(binding->oid_length, binding->oid));",
          "1408:             PROTO_ITEM_SET_GENERATED(ti);",
          "1410:             proto_tree_add_uint_format(options_tree, hf_oap_1_alias_frame,",
          "1411:                                        tvb, 0, 0, binding->frame,",
          "1412:                                        \"This alias is defined in frame %u\",",
          "1413:                                        binding->frame);",
          "1414:         }",
          "1415:     }",
          "1417:     return offset + alias_length;",
          "1418: }",
          "1420: static int oap_1_tree_add_interface(proto_tree *tree, tvbuff_t *tvb, int offset)",
          "1421: {",
          "1422:     guint8 registry;",
          "1423:     guint8 len;",
          "1425:     registry = tvb_get_guint8(tvb, offset);",
          "1426:     len = registry & 0x03;",
          "1427:     if (len == 0)",
          "1428:         len = 16;",
          "1429:     else",
          "1430:         len = 1 << (len - 1);",
          "1432:     proto_tree_add_item(tree, hf_oap_1_interfaceid, tvb, offset, 1 + len, ENC_NA);",
          "1433:     return offset + 1 + len;",
          "1434: }",
          "1436: static int oap_1_tree_add_binding(proto_tree *tree, packet_info *pinfo, tvbuff_t *tvb, int offset)",
          "1437: {",
          "1438:     guint8 len;",
          "1441:     len = tvb_get_guint8(tvb, offset);",
          "1442:     len = len & 0x03;",
          "1443:     if (len == 0)",
          "1444:         len = 16;",
          "1445:     else",
          "1446:         len = 1 << (len - 1);",
          "1448:     proto_tree_add_item(tree, hf_oap_1_interfaceid, tvb, offset, 1 + len, ENC_NA);",
          "1449:     offset += 1 + len;",
          "1452:     cl = tvb_get_guint8(tvb, offset);",
          "1453:     if (cl & 0x80)",
          "1454:         len = tvb_get_guint8(tvb, offset + 2);",
          "1455:     else",
          "1456:         len = tvb_get_guint8(tvb, offset + 1);",
          "1457: #endif",
          "1459:     offset = dof_dissect_pdu_as_field(dissect_2009_11_type_4, tvb, pinfo, tree,",
          "1460:                                       offset, hf_oap_1_objectid, ett_oap_1_objectid, NULL);",
          "1461:     return offset;",
          "1462: }",
          "1464: static int oap_1_tree_add_cmdcontrol(packet_info *pinfo, proto_tree *tree, tvbuff_t *tvb, int offset)",
          "1465: {",
          "1466:     proto_item *ti;",
          "1467:     proto_tree *opinfo_tree;",
          "1468:     guint8 flags;",
          "1470:     flags = tvb_get_guint8(tvb, offset);",
          "1472:     ti = proto_tree_add_bitmask(tree, tvb, offset, hf_oap_1_cmdcontrol, ett_oap_1_cmdcontrol_flags, bitmask_oap_1_cmdcontrol_flags, ENC_NA);",
          "1473:     opinfo_tree = proto_item_add_subtree(ti, ett_oap_1_cmdcontrol);",
          "1475:     proto_tree_add_item(opinfo_tree, hf_oap_1_cmdcontrol_cache_flag, tvb, offset, 1, ENC_NA);",
          "1476:     proto_tree_add_item(opinfo_tree, hf_oap_1_cmdcontrol_verbosity_flag, tvb, offset, 1, ENC_NA);",
          "1477:     proto_tree_add_item(opinfo_tree, hf_oap_1_cmdcontrol_noexecute_flag, tvb, offset, 1, ENC_NA);",
          "1478:     proto_tree_add_item(opinfo_tree, hf_oap_1_cmdcontrol_ack_flag, tvb, offset, 1, ENC_NA);",
          "1479:     proto_tree_add_item(opinfo_tree, hf_oap_1_cmdcontrol_delay_flag, tvb, offset, 1, ENC_NA);",
          "1480:     proto_tree_add_item(opinfo_tree, hf_oap_1_cmdcontrol_heuristic_flag, tvb, offset, 1, ENC_NA);",
          "1482:     offset += 1;",
          "1484:     if (flags & 0x01)",
          "1485:     {",
          "1487:         gint heur_len;",
          "1488:         guint16 heur;",
          "1489:         proto_item *pi;",
          "1491:         read_c2(tvb, offset, &heur, &heur_len);",
          "1492:         pi = proto_tree_add_uint_format(opinfo_tree, hf_oap_1_cmdcontrol_heuristic, tvb, offset, heur_len, heur, \"Heuristic Value: %hu\", heur);",
          "1493:         validate_c2(pinfo, pi, heur, heur_len);",
          "1494:         offset += heur_len;",
          "1495:     }",
          "1497:     if (flags & 0x04)",
          "1498:     {",
          "1500:         guint8 ackcnt;",
          "1501:         guint8 i;",
          "1503:         ackcnt = tvb_get_guint8(tvb, offset);",
          "1504:         proto_tree_add_item(opinfo_tree, hf_oap_1_cmdcontrol_ackcnt, tvb, offset, 1, ENC_NA);",
          "1505:         offset += 1;",
          "1507:         for (i = 0; i < ackcnt; i++)",
          "1508:         {",
          "1509:             offset = dof_dissect_pdu_as_field(dissect_2009_11_type_4, tvb, pinfo, opinfo_tree,",
          "1510:                                               offset, hf_oap_1_cmdcontrol_ack, ett_oap_1_cmdcontrol_ack, NULL);",
          "1511:         }",
          "1512:     }",
          "1514:     if (flags & 0x40)",
          "1515:     {",
          "1517:         gint cache_len;",
          "1518:         guint16 cache;",
          "1519:         proto_item *pi;",
          "1521:         read_c2(tvb, offset, &cache, &cache_len);",
          "1522:         pi = proto_tree_add_uint_format(opinfo_tree, hf_oap_1_cmdcontrol_cache, tvb, offset, cache_len, cache, \"Cache Delay: %hu\", cache);",
          "1523:         validate_c2(pinfo, pi, cache, cache_len);",
          "1524:         offset += cache_len;",
          "1525:     }",
          "1527:     return offset;",
          "1528: }",
          "1542: static void oap_1_define_alias(dof_api_data *api_data, guint32 alias, oap_1_binding *binding)",
          "1543: {",
          "1545:     dof_session_data *session = api_data->session;",
          "1546:     dof_packet_data *packet = (dof_packet_data *)api_data->packet;",
          "1547:     guint32 session_id;",
          "1548:     guint32 sender_id;",
          "1549:     oap_1_alias_key key;",
          "1551:     if (!session)",
          "1552:         return;",
          "1554:     session_id = session->session_id;",
          "1555:     sender_id = packet->sender_id;",
          "1557:     if (!binding)",
          "1558:         return;",
          "1560:     key.session = session_id;",
          "1561:     key.sender = sender_id;",
          "1562:     key.alias = alias;",
          "1567:     if (!g_hash_table_lookup(oap_1_alias_to_binding, &key))",
          "1568:     {",
          "1569:         oap_1_alias_key *alias_ptr = (oap_1_alias_key *)wmem_alloc0(wmem_file_scope(), sizeof(oap_1_alias_key));",
          "1570:         memcpy(alias_ptr, &key, sizeof(oap_1_alias_key));",
          "1571:         g_hash_table_insert(oap_1_alias_to_binding, alias_ptr, binding);",
          "1572:     }",
          "1573: }",
          "1579: static oap_1_binding* oap_1_resolve_alias(oap_1_alias_key *key)",
          "1580: {",
          "1582:     return (oap_1_binding *)g_hash_table_lookup(oap_1_alias_to_binding, key);",
          "1583: }",
          "1586: #define DOF_PROTOCOL_TEP 128",
          "1587: #define DSP_TEP_FAMILY 0x000000",
          "1588: static int proto_tep = -1;",
          "1589: static int proto_tep_dsp = -1;",
          "1591: static int hf_dsp_option = -1;",
          "1593: static int ett_tep_operation = -1;",
          "1594: static int hf_tep_operation = -1;",
          "1595: static int hf_tep_operation_type = -1;",
          "1596: static int hf_tep_opcode = -1;",
          "1597: static int hf_tep_k = -1;",
          "1598: static int hf_tep_c = -1;",
          "1599: static int hf_tep_reject_code = -1;",
          "1600: static int hf_tep_reject_data = -1;",
          "1602: static const true_false_string tep_optype_vals = { \"DPP Response\", \"DPP Command\" };",
          "1605: static int ett_tep_2_1_domain = -1;",
          "1606: static int hf_tep_2_1_domain = -1;",
          "1607: static int ett_tep_2_1_initiator_block = -1;",
          "1608: static int hf_tep_2_1_initiator_block = -1;",
          "1609: static int hf_tep_2_1_ticket_confirmation = -1;",
          "1612: static int ett_tep_2_2_initiator_ticket = -1;",
          "1613: static int hf_tep_2_2_initiator_ticket = -1;",
          "1614: static int hf_tep_2_2_ticket_confirmation = -1;",
          "1615: static int ett_tep_2_2_responder_initialization = -1;",
          "1616: static int hf_tep_2_2_responder_initialization = -1;",
          "1617: static int ett_tep_2_2_responder_block = -1;",
          "1618: static int hf_tep_2_2_responder_block = -1;",
          "1619: static int ett_tep_2_2_authenticator_initialization = -1;",
          "1620: static int hf_tep_2_2_authenticator_initialization = -1;",
          "1623: static int hf_tep_2_2_1_state_identifier = -1;",
          "1624: static int ett_tep_2_2_1_initial_state = -1;",
          "1625: static int hf_tep_2_2_1_initial_state = -1;",
          "1627: static int hf_tep_session_key = -1;",
          "1629: static int ett_tep_dsp = -1;",
          "1630: static int ett_tep_dsp_options = -1;",
          "1631: static int ett_tep = -1;",
          "1634: static const value_string tep_filter_existing[] = {",
          "1635:     { 1, \"Include Existing Matches\" },",
          "1636:     { 0, \"Exclude Existing Matches\" },",
          "1637:     { 0, NULL }",
          "1638: };",
          "1639: #endif",
          "1641: #define TEP_OPCODE_RSP                                                  (0x80)",
          "1642: #define TEP_OPCODE_C                                                    (0x20)",
          "1643: #define TEP_OPCODE_K                                                    (0x10)",
          "1644: #define TEP_PDU_REJECT                                                  (TEP_OPCODE_RSP|0)",
          "1645: #define TEP_PDU_REQUEST                                                 (1)",
          "1646: #define TEP_PDU_END_SESSION                                             (5)",
          "1647: #define TEP_PDU_SESSION_ENDING                                  (6)",
          "1649: #define TEP_PDU_REQUEST_KEY                                             (TEP_OPCODE_K|TEP_PDU_REQUEST)",
          "1650: #define TEP_PDU_CONFIRM                                                 (TEP_OPCODE_C|TEP_PDU_REQUEST)",
          "1651: #define TEP_PDU_ACCEPT                                                  (TEP_OPCODE_RSP|TEP_PDU_REQUEST)",
          "1652: #define TEP_PDU_CONFIRM_ACK                                             (TEP_OPCODE_RSP|TEP_OPCODE_C|TEP_PDU_REQUEST)",
          "1654: static const value_string tep_opcode_strings[] = {",
          "1655:     { TEP_PDU_REJECT, \"TEP Reject\" },",
          "1656:     { TEP_PDU_REQUEST, \"TEP Request\" },",
          "1657:     { TEP_PDU_END_SESSION, \"TEP End Session\" },",
          "1658:     { TEP_PDU_SESSION_ENDING, \"TEP Session Ending\" },",
          "1660:     { TEP_PDU_REQUEST_KEY, \"TEP Rekey\" },",
          "1661:     { TEP_PDU_CONFIRM, \"TEP Confirm\" },",
          "1662:     { TEP_PDU_ACCEPT, \"TEP Accept\" },",
          "1663:     { TEP_PDU_CONFIRM_ACK, \"TEP Confirm Ack\" },",
          "1665:     { 0, NULL }",
          "1666: };",
          "1669: static const value_string tep_error_strings[] = {",
          "1670:     { 1, \"Parse Error\" },",
          "1671:     { 2, \"Access Denied\" },",
          "1672:     { 3, \"Duration Not Supported\" },",
          "1673:     { 4, \"Authentication Failed\" },",
          "1674:     { 0, NULL }",
          "1675: };",
          "1676: #endif",
          "1679: typedef struct tep_rekey_data",
          "1680: {",
          "1682:     gboolean is_rekey;",
          "1685:     guint8 domain_length;",
          "1686:     guint8 *domain;",
          "1689:     guint8 *i_identity;",
          "1690:     guint8 i_identity_length;",
          "1693:     guint8 *i_nonce;",
          "1694:     guint8 i_nonce_length;",
          "1697:     guint8 *r_identity;",
          "1698:     guint8 r_identity_length;",
          "1701:     guint8 *r_nonce;",
          "1702:     guint8 r_nonce_length;",
          "1704:     guint16 security_mode;",
          "1705:     guint32 security_mode_data_length;",
          "1706:     guint8 *security_mode_data;",
          "1709:     dof_session_key_exchange_data *key_data;",
          "1710: } tep_rekey_data;",
          "1713: #define DOF_PROTOCOL_TRP 129",
          "1714: #define DSP_TRP_FAMILY 0x030000",
          "1715: typedef struct _trp_packet_data",
          "1716: {",
          "1717:     guint8 *domain;",
          "1718:     guint8 domain_length;",
          "1719:     guint8 *identity;",
          "1720:     guint8 identity_length;",
          "1721:     guint8 *group;",
          "1722:     guint8 group_length;",
          "1723:     guint8 *block_I;",
          "1724:     guint16 block_I_length;",
          "1725:     guint8 *secret;",
          "1726:     gboolean kek_known;",
          "1727: } trp_packet_data;",
          "1730: static int proto_trp = -1;",
          "1731: static int proto_trp_dsp = -1;",
          "1733: static int hf_trp_dsp_option = -1;",
          "1735: static int hf_trp_opcode = -1;",
          "1736: static int hf_domain = -1;",
          "1737: static int hf_identity_resolution = -1;",
          "1738: static int hf_initiator_request = -1;",
          "1739: static int hf_responder_request = -1;",
          "1740: static int hf_initiator_ticket = -1;",
          "1741: static int hf_responder_ticket = -1;",
          "1742: static int hf_authentication_block = -1;",
          "1743: static int hf_group_identifier = -1;",
          "1744: static int hf_node_identifier = -1;",
          "1745: static int hf_thb = -1;",
          "1746: static int hf_tmin = -1;",
          "1747: static int hf_tmax = -1;",
          "1748: static int hf_trp_epoch = -1;",
          "1749: static int hf_sidg = -1;",
          "1750: static int hf_security_scope = -1;",
          "1751: static int hf_security_mode = -1;",
          "1752: static int hf_ssid = -1;",
          "1754: static int hf_initiator_pg = -1;",
          "1755: #endif",
          "1756: static int hf_initiator_validation = -1;",
          "1757: static int hf_responder_pg = -1;",
          "1758: static int hf_responder_validation = -1;",
          "1760: static int hf_trp_errorcode = -1;",
          "1761: static int hf_trp_duration = -1;",
          "1763: static int hf_trp_rnonce = -1;",
          "1764: static int hf_trp_pnonce = -1;",
          "1765: static int hf_trp_reqid = -1;",
          "1766: static int hf_trp_provid = -1;",
          "1767: static int hf_trp_perm_count = -1;",
          "1768: static int hf_trp_perm_type = -1;",
          "1769: static int hf_trp_perm_rcache = -1;",
          "1770: static int hf_trp_perm_rsrp = -1;",
          "1771: static int hf_trp_perm_rsrp_a = -1;",
          "1772: static int hf_trp_perm_rsrp_u = -1;",
          "1773: static int hf_trp_perm_rflags = -1;",
          "1774: static int hf_trp_perm_pcache = -1;",
          "1775: static int hf_trp_perm_psrp = -1;",
          "1776: static int hf_trp_perm_psrp_a = -1;",
          "1777: static int hf_trp_perm_psrp_u = -1;",
          "1778: static int hf_trp_perm_psrp_b = -1;",
          "1779: static int hf_trp_perm_psrp_s = -1;",
          "1780: static int hf_trp_perm_pflags = -1;",
          "1781: static int hf_trp_confirmation = -1;",
          "1782: static int hf_trp_perm_pke = -1;",
          "1783: static int hf_trp_perm_pka = -1;",
          "1784: #endif",
          "1786: static int ett_trp_dsp = -1;",
          "1787: static int ett_trp = -1;",
          "1788: static int ett_domain = -1;",
          "1789: static int ett_identity_resolution = -1;",
          "1790: static int ett_initiator_request = -1;",
          "1791: static int ett_initiator_ticket = -1;",
          "1792: static int ett_responder_request = -1;",
          "1793: static int ett_responder_ticket = -1;",
          "1794: static int ett_authentication_block = -1;",
          "1795: static int ett_group_identifier = -1;",
          "1796: static int ett_node_identifier = -1;",
          "1797: static int ett_sidg = -1;",
          "1798: static int ett_security_scope = -1;",
          "1799: static int ett_security_mode = -1;",
          "1800: static int ett_initiator_pg = -1;",
          "1801: static int ett_initiator_validation = -1;",
          "1802: static int ett_responder_pg = -1;",
          "1803: static int ett_responder_validation = -1;",
          "1806: static int ett_trp_permset = -1;",
          "1807: static int ett_srp_flags = -1;",
          "1808: static int ett_trp_ticket = -1;",
          "1810: static expert_field ei_trp_initiator_id_known = EI_INIT;",
          "1811: static expert_field ei_trp_kek_discovered = EI_INIT;",
          "1813: #define TRP_RESPONSE                    (0x80)",
          "1815: #define TRP_RSP_REJECT                                                  (TRP_RESPONSE|0)",
          "1816: #define TRP_CMD_REQUEST_KEK                                             (1)",
          "1817: #define TRP_RSP_REQUEST_KEK                                             (TRP_RESPONSE|TRP_CMD_REQUEST_KEK)",
          "1818: #define TRP_CMD_REQUEST_RANDOM                                  (2)",
          "1819: #define TRP_RSP_REQUEST_RANDOM                                  (TRP_RESPONSE|TRP_CMD_REQUEST_RANDOM)",
          "1820: #define TRP_CMD_REQUEST_SESSION                                 (3)",
          "1821: #define TRP_RSP_REQUEST_SESSION                                 (TRP_RESPONSE|TRP_CMD_REQUEST_SESSION)",
          "1822: #define TRP_CMD_REQUEST_SECURITY_SCOPES                 (4)",
          "1823: #define TRP_RSP_REQUEST_SECURITY_SCOPES                 (TRP_RESPONSE|TRP_CMD_REQUEST_SECURITY_SCOPES)",
          "1824: #define TRP_CMD_RESOLVE_CREDENTIAL                              (6)",
          "1825: #define TRP_RSP_RESOLVE_CREDENTIAL                              (TRP_RESPONSE|TRP_CMD_RESOLVE_CREDENTIAL)",
          "1826: #define TRP_CMD_REQUEST_LOCAL_DOMAIN                    (7)",
          "1827: #define TRP_RSP_REQUEST_LOCAL_DOMAIN                    (TRP_RESPONSE|TRP_CMD_REQUEST_LOCAL_DOMAIN)",
          "1828: #define TRP_CMD_REQUEST_REMOTE_DOMAIN                   (8)",
          "1829: #define TRP_RSP_REQUEST_REMOTE_DOMAIN                   (TRP_RESPONSE|TRP_CMD_REQUEST_REMOTE_DOMAIN)",
          "1830: #define TRP_RSP_REQUEST_DISCOVERED_REMOTE_DOMAIN        (TRP_RESPONSE|0x0A)",
          "1831: #define TRP_CMD_VALIDATE_CREDENTIAL                             (9)",
          "1832: #define TRP_RSP_VALIDATE_CREDENTIAL                             (TRP_RESPONSE|TRP_CMD_VALIDATE_CREDENTIAL)",
          "1834: static const value_string trp_opcode_strings[] = {",
          "1835:     { TRP_RSP_REJECT, \"Reject\" },",
          "1837:     { TRP_CMD_REQUEST_KEK, \"TRP Request KEK\" },",
          "1838:     { TRP_RSP_REQUEST_KEK, \"TRP Request KEK Response\" },",
          "1840:     { TRP_CMD_REQUEST_RANDOM, \"TRP Request Random\" },",
          "1841:     { TRP_RSP_REQUEST_RANDOM, \"TRP Request Random Response\" },",
          "1843:     { TRP_CMD_REQUEST_SESSION, \"TRP Request Session\" },",
          "1844:     { TRP_RSP_REQUEST_SESSION, \"TRP Request Session Response\" },",
          "1846:     { TRP_CMD_REQUEST_SECURITY_SCOPES, \"TRP Request Security Scopes\" },",
          "1847:     { TRP_RSP_REQUEST_SECURITY_SCOPES, \"TRP Request Security Scopes Response\" },",
          "1849:     { TRP_CMD_RESOLVE_CREDENTIAL, \"TRP Resolve Credential\" },",
          "1850:     { TRP_RSP_RESOLVE_CREDENTIAL, \"TRP Resolve Credential Response\" },",
          "1852:     { TRP_CMD_REQUEST_LOCAL_DOMAIN, \"TRP Request Local Domain\" },",
          "1853:     { TRP_RSP_REQUEST_LOCAL_DOMAIN, \"TRP Request Local Domain Response\" },",
          "1855:     { TRP_CMD_REQUEST_REMOTE_DOMAIN, \"TRP Request Remote Domain\" },",
          "1856:     { TRP_RSP_REQUEST_REMOTE_DOMAIN, \"TRP Request Remote Domain Response\" },",
          "1857:     { TRP_RSP_REQUEST_DISCOVERED_REMOTE_DOMAIN, \"TRP Request Discovered Remote Domain Response\" },",
          "1859:     { TRP_CMD_VALIDATE_CREDENTIAL, \"TRP Validate Credential\" },",
          "1860:     { TRP_RSP_VALIDATE_CREDENTIAL, \"TRP Validate Credential Response\" },",
          "1862:     { 0, NULL }",
          "1863: };",
          "1865: static const value_string trp_error_strings[] = {",
          "1866:     { 1, \"Parse Error\" },",
          "1867:     { 2, \"Access Denied\" },",
          "1868:     { 3, \"Unknown Initiator\" },",
          "1869:     { 4, \"Unknown Responder\" },",
          "1870:     { 5, \"Unknown Domain\" },",
          "1871:     { 6, \"High Load\" },",
          "1872:     { 7, \"Bad Mode\" },",
          "1873:     { 8, \"Incompatible Security Identifiers\" },",
          "1874:     { 127, \"Internal Error\" },",
          "1876:     { 0, NULL }",
          "1877: };",
          "1880: #define DOF_PROTOCOL_SGMP       130",
          "1881: typedef struct _sgmp_packet_data",
          "1882: {",
          "1883:     guint8 domain_length;",
          "1884:     guint8 *domain;",
          "1886:     guint8 group_length;",
          "1887:     guint8 *group;",
          "1889:     guint16 epoch;",
          "1890:     guint8 *kek;",
          "1892:     guint I_length;",
          "1893:     guint8 *I;",
          "1894:     guint A_length;",
          "1895:     guint8 *A;",
          "1897:     dof_session_data *request_session;",
          "1898: } sgmp_packet_data;",
          "1900: static int proto_sgmp = -1;",
          "1902: static int hf_opcode = -1;",
          "1903: static int hf_sgmp_domain = -1;",
          "1904: static int hf_sgmp_epoch = -1;",
          "1905: static int hf_initiator_block = -1;",
          "1906: static int hf_sgmp_security_scope = -1;",
          "1907: static int hf_initial_state = -1;",
          "1908: static int hf_latest_version = -1;",
          "1909: static int hf_desire = -1;",
          "1910: static int hf_ticket = -1;",
          "1911: static int hf_sgmp_tmin = -1;",
          "1912: static int hf_tie_breaker = -1;",
          "1913: static int hf_delay = -1;",
          "1914: static int hf_key = -1;",
          "1916: static int ett_sgmp = -1;",
          "1917: static int ett_sgmp_domain = -1;",
          "1918: static int ett_initiator_block = -1;",
          "1919: static int ett_sgmp_security_scope = -1;",
          "1920: static int ett_initial_state = -1;",
          "1921: static int ett_ticket = -1;",
          "1923: #define SGMP_RESPONSE                                   (0x80)",
          "1924: #define SGMP_CMD_HEARTBEAT                              (0)",
          "1925: #define SGMP_RSP_HEARTBEAT                              (SGMP_CMD_HEARTBEAT|SGMP_RESPONSE)",
          "1926: #define SGMP_CMD_EPOCH_CHANGED                  (1)",
          "1927: #define SGMP_RSP_EPOCH_CHANGED                  (SGMP_CMD_EPOCH_CHANGED|SGMP_RESPONSE)",
          "1928: #define SGMP_CMD_REKEY                                  (2)",
          "1929: #define SGMP_RSP_REKEY                                  (SGMP_CMD_REKEY|SGMP_RESPONSE)",
          "1930: #define SGMP_CMD_REQUEST_GROUP                  (3)",
          "1931: #define SGMP_RSP_REQUEST_GROUP                  (SGMP_CMD_REQUEST_GROUP|SGMP_RESPONSE)",
          "1932: #define SGMP_CMD_REKEY_EPOCH                    (5)",
          "1933: #define SGMP_RSP_REKEY_EPOCH                    (SGMP_CMD_REKEY_EPOCH|SGMP_RESPONSE)",
          "1934: #define SGMP_CMD_REKEY_MERGE                    (7)",
          "1935: #define SGMP_RSP_REKEY_MERGE                    (SGMP_CMD_REKEY_MERGE|SGMP_RESPONSE)",
          "1937: static const value_string sgmp_opcode_strings[] = {",
          "1938:     { SGMP_CMD_HEARTBEAT, \"SGMP Heartbeat\" },",
          "1939:     { SGMP_RSP_HEARTBEAT, \"SGMP Heartbeat Response (Illegal)\" },",
          "1940:     { SGMP_CMD_EPOCH_CHANGED, \"SGMP Epoch Changed\" },",
          "1941:     { SGMP_RSP_EPOCH_CHANGED, \"SGMP Epoch Changed Response (Illegal)\" },",
          "1942:     { SGMP_CMD_REKEY, \"SGMP Rekey\" },",
          "1943:     { SGMP_RSP_REKEY, \"SGMP Rekey Response (Illegal)\" },",
          "1944:     { SGMP_CMD_REQUEST_GROUP, \"SGMP Request Group\" },",
          "1945:     { SGMP_RSP_REQUEST_GROUP, \"SGMP Request Group Response\" },",
          "1946:     { SGMP_CMD_REKEY_EPOCH, \"SGMP Rekey Epoch\" },",
          "1947:     { SGMP_RSP_REKEY_EPOCH, \"SGMP Rekey Epoch Response (Illegal)\" },",
          "1948:     { SGMP_CMD_REKEY_MERGE, \"SGMP Rekey Merge\" },",
          "1949:     { SGMP_RSP_REKEY_MERGE, \"SGMP Rekey Merge Response (Illegal)\" },",
          "1951:     { 0, NULL }",
          "1952: };",
          "1956: static gboolean sgmp_validate_session_key(sgmp_packet_data *cmd_data, guint8 *confirmation, guint8 *kek, guint8 *key)",
          "1957: {",
          "1958: #ifdef LIBGCRYPT_OK",
          "1959:     gcry_mac_hd_t hmac;",
          "1960:     gcry_error_t result;",
          "1962:     result = gcry_mac_open(&hmac, GCRY_MAC_HMAC_SHA256, 0, NULL);",
          "1963:     if (result != 0)",
          "1964:         return FALSE;",
          "1966:     gcry_mac_setkey(hmac, kek, 32);",
          "1967:     gcry_mac_write(hmac, cmd_data->I, cmd_data->I_length);",
          "1968:     gcry_mac_write(hmac, cmd_data->A, cmd_data->A_length);",
          "1969:     gcry_mac_write(hmac, key, 32);",
          "1970:     result = gcry_mac_verify(hmac, confirmation, sizeof(confirmation));",
          "1971:     return result == 0;",
          "1972: #else",
          "1973:     return FALSE;",
          "1974: #endif",
          "1975: }",
          "1976: #endif",
          "1979: #define DOF_SECURITY_PROTOCOL \"DOF Security Protocol\"",
          "1980: static dissector_table_t dof_sec_dissectors;",
          "1981: #define AS_ASSIGNED_SSID 0x40000000",
          "1984: #define DOF_PROTOCOL_CCM 24577",
          "1985: #define DSP_CCM_FAMILY 0x020000",
          "1987: static int proto_ccm_app = -1;",
          "1988: static int proto_ccm = -1;",
          "1989: static int proto_ccm_dsp = -1;",
          "1991: static int hf_ccm_dsp_option = -1;",
          "1992: static int hf_ccm_dsp_strength_count = -1;",
          "1993: static int hf_ccm_dsp_strength = -1;",
          "1994: static int hf_ccm_dsp_e_flag = -1;",
          "1995: static int hf_ccm_dsp_m_flag = -1;",
          "1996: static int hf_ccm_dsp_tmax = -1;",
          "1997: static int hf_ccm_dsp_tmin = -1;",
          "1999: static const value_string ccm_strengths[] = {",
          "2000:     { 1, \"256-bit\" },",
          "2001:     { 2, \"192-bit\" },",
          "2002:     { 3, \"128-bit\" },",
          "2003:     { 0, NULL }",
          "2004: };",
          "2005: static int hf_ccm_opcode = -1;",
          "2007: static int hf_epp_v1_ccm_flags = -1;",
          "2008: static int hf_epp_v1_ccm_flags_manager = -1;",
          "2009: static int hf_epp_v1_ccm_flags_period = -1;",
          "2010: static int hf_epp_v1_ccm_flags_target = -1;",
          "2011: static int hf_epp_v1_ccm_flags_next_nid = -1;",
          "2012: static int hf_epp_v1_ccm_flags_packet = -1;",
          "2013: static int hf_epp_v1_ccm_tnid = -1;",
          "2014: static int hf_epp_v1_ccm_nnid = -1;",
          "2015: static int hf_epp_v1_ccm_nid = -1;",
          "2016: static int hf_epp_v1_ccm_slot = -1;",
          "2017: static int hf_epp_v1_ccm_pn = -1;",
          "2019: static int ett_header = -1;",
          "2020: static int ett_epp_v1_ccm_flags = -1;",
          "2022: static int ett_ccm_dsp_option = -1;",
          "2023: static int ett_ccm_dsp = -1;",
          "2024: static int ett_ccm = -1;",
          "2026: static expert_field ei_decode_failure = EI_INIT;",
          "2028: typedef struct _ccm_session_data",
          "2029: {",
          "2030:     guint protocol_id;",
          "2031:     void *cipher_data;",
          "2032:     GHashTable *cipher_data_table;",
          "2034:     guint32 period;",
          "2036:     guint8 periods[8];",
          "2037:     guint8 cipher;",
          "2038:     gboolean encrypted;",
          "2039:     guint8 mac_len;",
          "2040:     guint32 client_datagram_number;",
          "2041:     guint32 server_datagram_number;",
          "2042: } ccm_session_data;",
          "2044: typedef struct _ccm_packet_data",
          "2045: {",
          "2046:     guint32 nid;",
          "2047:     guint32 dn;",
          "2048:     guint32 period;",
          "2049: } ccm_packet_data;",
          "2051: #define CCM_PDU_PROBE            (0)",
          "2053: static const value_string ccm_opcode_strings[] = {",
          "2054:     { CCM_PDU_PROBE, \"Probe\" },",
          "2055:     { 0, NULL }",
          "2056: };",
          "2059: #define DOF_OBJECT_IDENTIFIER \"DOF Object Identifier\"",
          "2061: static dissector_handle_t dof_oid_handle;",
          "2062: static dissector_handle_t undissected_data_handle;",
          "2064: static int oid_proto = -1;",
          "2066: static int hf_oid_class = -1;",
          "2067: static int hf_oid_header = -1;",
          "2068: static int hf_oid_attribute = -1;",
          "2069: static int hf_oid_length = -1;",
          "2070: static int hf_oid_data = -1;",
          "2071: static int hf_oid_all_attribute_data = -1;",
          "2072: static int hf_oid_attribute_header = -1;",
          "2073: static int hf_oid_attribute_attribute = -1;",
          "2074: static int hf_oid_attribute_id = -1;",
          "2075: static int hf_oid_attribute_length = -1;",
          "2076: static int hf_oid_attribute_data = -1;",
          "2077: static int hf_oid_attribute_oid = -1;",
          "2079: static int ett_oid = -1;",
          "2080: static int ett_oid_header = -1;",
          "2081: static int ett_oid_attribute = -1;",
          "2082: static int ett_oid_attribute_header = -1;",
          "2083: static int ett_oid_attribute_oid = -1;",
          "2090: static expert_field ei_undecoded = EI_INIT;",
          "2091: static expert_field ei_malformed = EI_INIT;",
          "2092: static expert_field ei_implicit_no_op = EI_INIT;",
          "2093: static expert_field ei_c2_c3_c4_format = EI_INIT;",
          "2094: static expert_field ei_type_4_header_zero = EI_INIT;",
          "2095: static expert_field ei_dof_10_flags_zero = EI_INIT;",
          "2096: static expert_field ei_dof_13_length_specified = EI_INIT;",
          "2098: static expert_field ei_dpp2_dof_10_flags_zero = EI_INIT;",
          "2099: static expert_field ei_dpp_default_flags = EI_INIT;",
          "2100: static expert_field ei_dpp_explicit_sender_sid_included = EI_INIT;",
          "2101: static expert_field ei_dpp_explicit_receiver_sid_included = EI_INIT;",
          "2102: static expert_field ei_dpp_no_security_context = EI_INIT;",
          "2103: static expert_field ei_dof_6_timeout = EI_INIT;",
          "2105: static expert_field ei_security_3_1_invalid_stage = EI_INIT;",
          "2106: static expert_field ei_security_4_invalid_bit = EI_INIT;",
          "2107: static expert_field ei_security_13_out_of_range = EI_INIT;",
          "2130: static GHashTable *node_key_to_sid_id = NULL;",
          "2131: static GHashTable *sid_buffer_to_sid_id = NULL;",
          "2132: static GHashTable *sid_id_to_sid_buffer = NULL;",
          "2134: typedef struct _node_key_to_sid_id_key",
          "2135: {",
          "2136:     gint transport_id;",
          "2137:     gint transport_node_id;",
          "2138:     gint dof_id;",
          "2139:     gint dof_node_id;",
          "2140:     gint dof_session_id;",
          "2141: } node_key_to_sid_id_key;",
          "2143: static guint sender_key_hash_fn(gconstpointer key)",
          "2144: {",
          "2145:     const node_key_to_sid_id_key *sid_key_ptr = (const node_key_to_sid_id_key *)key;",
          "2146:     guint result = 0;",
          "2148:     result += g_int_hash(&(sid_key_ptr->transport_id));",
          "2149:     result += g_int_hash(&(sid_key_ptr->transport_node_id));",
          "2150:     result += g_int_hash(&(sid_key_ptr->dof_id));",
          "2151:     result += g_int_hash(&(sid_key_ptr->dof_node_id));",
          "2152:     result += g_int_hash(&(sid_key_ptr->dof_session_id));",
          "2154:     return result;",
          "2155: }",
          "2157: static guint sid_buffer_hash_fn(gconstpointer key)",
          "2158: {",
          "2160:     guint hash = 5381;",
          "2161:     const guint8 *str = (const guint8 *)key;",
          "2162:     guint8 i;",
          "2164:     for (i = 0; i <= str[0]; i++)",
          "2167:     return hash;",
          "2168: }",
          "2170: static gboolean sender_key_equal_fn(gconstpointer key1, gconstpointer key2)",
          "2171: {",
          "2172:     const node_key_to_sid_id_key *sid_key_ptr1 = (const node_key_to_sid_id_key *)key1;",
          "2173:     const node_key_to_sid_id_key *sid_key_ptr2 = (const node_key_to_sid_id_key *)key2;",
          "2175:     if (sid_key_ptr1->transport_id != sid_key_ptr2->transport_id)",
          "2176:         return FALSE;",
          "2178:     if (sid_key_ptr1->transport_node_id != sid_key_ptr2->transport_node_id)",
          "2179:         return FALSE;",
          "2181:     if (sid_key_ptr1->dof_id != sid_key_ptr2->dof_id)",
          "2182:         return FALSE;",
          "2184:     if (sid_key_ptr1->dof_node_id != sid_key_ptr2->dof_node_id)",
          "2185:         return FALSE;",
          "2187:     if (sid_key_ptr1->dof_session_id != sid_key_ptr2->dof_session_id)",
          "2188:         return FALSE;",
          "2190:     return TRUE;",
          "2191: }",
          "2193: static gboolean sid_buffer_equal_fn(gconstpointer key1, gconstpointer key2)",
          "2194: {",
          "2195:     const guint8 *sb1 = (const guint8 *)key1;",
          "2196:     const guint8 *sb2 = (const guint8 *)key2;",
          "2198:     if (sb1[0] != sb2[0])",
          "2199:         return FALSE;",
          "2201:     return memcmp(sb1 + 1, sb2 + 1, sb1[0]) == 0;",
          "2202: }",
          "2204: static guint dpp_next_sid_id = 1;",
          "2211: static void dpp_reset_sid_support(void)",
          "2212: {",
          "2213:     dpp_next_sid_id = 1;",
          "2215:     if (node_key_to_sid_id != NULL)",
          "2216:     {",
          "2217:         g_hash_table_destroy(node_key_to_sid_id);",
          "2218:         node_key_to_sid_id = NULL;",
          "2219:     }",
          "2221:     if (sid_buffer_to_sid_id != NULL)",
          "2222:     {",
          "2223:         g_hash_table_destroy(sid_buffer_to_sid_id);",
          "2224:         sid_buffer_to_sid_id = NULL;",
          "2225:     }",
          "2227:     if (sid_id_to_sid_buffer != NULL)",
          "2228:     {",
          "2229:         g_hash_table_destroy(sid_id_to_sid_buffer);",
          "2230:         sid_id_to_sid_buffer = NULL;",
          "2231:     }",
          "2234:     node_key_to_sid_id = g_hash_table_new_full(sender_key_hash_fn, sender_key_equal_fn, g_free, NULL);",
          "2235:     sid_buffer_to_sid_id = g_hash_table_new_full(sid_buffer_hash_fn, sid_buffer_equal_fn, g_free, NULL);",
          "2236:     sid_id_to_sid_buffer = g_hash_table_new_full(g_direct_hash, g_direct_equal, NULL, NULL);",
          "2237: }",
          "2249: static GHashTable *dpp_opid_to_packet_data = NULL;",
          "2251: static guint dpp_opid_hash_fn(gconstpointer opid)",
          "2252: {",
          "2253:     const dof_2009_1_pdu_20_opid *ptr = (const dof_2009_1_pdu_20_opid *)opid;",
          "2254:     return g_int_hash(&ptr->op_sid_id) + g_int_hash(&ptr->op_cnt);",
          "2255: }",
          "2257: static gboolean dpp_opid_equal_fn(gconstpointer opid1, gconstpointer opid2)",
          "2258: {",
          "2259:     const dof_2009_1_pdu_20_opid *ptr1 = (const dof_2009_1_pdu_20_opid *)opid1;",
          "2260:     const dof_2009_1_pdu_20_opid *ptr2 = (const dof_2009_1_pdu_20_opid *)opid2;",
          "2261:     if (ptr1->op_cnt != ptr2->op_cnt)",
          "2262:         return FALSE;",
          "2263:     if (ptr1->op_sid_id != ptr2->op_sid_id)",
          "2264:         return FALSE;",
          "2266:     return TRUE;",
          "2267: }",
          "2269: static void dpp_reset_opid_support(void)",
          "2270: {",
          "2271:     if (dpp_opid_to_packet_data != NULL)",
          "2272:     {",
          "2274:         g_hash_table_destroy(dpp_opid_to_packet_data);",
          "2275:         dpp_opid_to_packet_data = NULL;",
          "2276:     }",
          "2278:     dpp_opid_to_packet_data = g_hash_table_new_full(dpp_opid_hash_fn, dpp_opid_equal_fn, NULL, NULL);",
          "2279: }",
          "2284: static GHashTable *dof_ns_session_lookup = NULL;",
          "2290: typedef struct _dof_ns_session_key",
          "2291: {",
          "2292:     guint transport_session_id;",
          "2293:     guint client;",
          "2294:     guint server;",
          "2295:     gboolean is_secure;",
          "2296: } dof_ns_session_key;",
          "2298: static dof_session_data* dof_ns_session_retrieve(guint transport_session_id, guint client, guint server)",
          "2299: {",
          "2300:     dof_ns_session_key lookup_key;",
          "2301:     dof_session_data *value;",
          "2304:     lookup_key.transport_session_id = transport_session_id;",
          "2305:     lookup_key.client = client;",
          "2306:     lookup_key.server = server;",
          "2308:     value = (dof_session_data *)g_hash_table_lookup(dof_ns_session_lookup, &lookup_key);",
          "2309:     if (value)",
          "2310:     {",
          "2312:         return value;",
          "2313:     }",
          "2315:     return NULL;",
          "2316: }",
          "2318: static void dof_ns_session_define(guint transport_session_id, guint client, guint server, dof_session_data *session_data)",
          "2319: {",
          "2320:     dof_ns_session_key *key;",
          "2323:     key = g_new0(dof_ns_session_key, 1);",
          "2324:     key->transport_session_id = transport_session_id;",
          "2325:     key->client = client;",
          "2326:     key->server = server;",
          "2329:     g_hash_table_insert(dof_ns_session_lookup, key, session_data);",
          "2330: }",
          "2335: static int hf_security_1_permission_type = -1;",
          "2336: static int hf_security_1_length = -1;",
          "2337: static int hf_security_1_data = -1;",
          "2339: static const value_string dof_2008_16_permission_type[] = {",
          "2340:     { 1, \"Binding\" },",
          "2341:     { 3, \"IAM\" },",
          "2342:     { 5, \"ACTAS\" },",
          "2343:     { 128, \"Requestor\" },",
          "2344:     { 130, \"Provider\" },",
          "2345:     { 131, \"Define\" },",
          "2346:     { 133, \"Tunnel Domain\" },",
          "2347:     { 0, NULL }",
          "2348: };",
          "2351: static int hf_security_2_count = -1;",
          "2352: static int ett_security_2_permission = -1;",
          "2353: static int hf_security_2_permission = -1;",
          "2356: static int hf_security_3_1_credential_type = -1;",
          "2357: static int hf_security_3_1_stage = -1;",
          "2358: static int ett_security_3_1_security_node_identifier = -1;",
          "2359: static int hf_security_3_1_security_node_identifier = -1;",
          "2362: static int hf_security_3_2_credential_type = -1;",
          "2363: static int hf_security_3_2_stage = -1;",
          "2364: static int hf_security_3_2_length = -1;",
          "2365: static int hf_security_3_2_public_data = -1;",
          "2368: static int hf_security_4_l = -1;",
          "2369: static int hf_security_4_f = -1;",
          "2370: static int hf_security_4_ln = -1;",
          "2371: static int ett_security_4_identity = -1;",
          "2372: static int hf_security_4_identity = -1;",
          "2373: static int hf_security_4_nonce = -1;",
          "2374: static int ett_security_4_permission_set = -1;",
          "2375: static int hf_security_4_permission_set = -1;",
          "2378: static int hf_security_5_mac = -1;",
          "2379: static int hf_security_5_key = -1;",
          "2382: static int hf_security_6_1_desired_duration = -1;",
          "2383: static int ett_security_6_1_desired_security_mode = -1;",
          "2384: static int hf_security_6_1_desired_security_mode = -1;",
          "2385: static int ett_security_6_1_initiator_request = -1;",
          "2386: static int hf_security_6_1_initiator_request = -1;",
          "2389: static int ett_security_6_2_responder_request = -1;",
          "2390: static int hf_security_6_2_responder_request = -1;",
          "2393: static int hf_security_6_3_granted_duration = -1;",
          "2394: static int ett_security_6_3_session_security_scope = -1;",
          "2395: static int hf_security_6_3_session_security_scope = -1;",
          "2396: static int ett_security_6_3_initiator_validation = -1;",
          "2397: static int hf_security_6_3_initiator_validation = -1;",
          "2398: static int ett_security_6_3_responder_validation = -1;",
          "2399: static int hf_security_6_3_responder_validation = -1;",
          "2402: static int hf_security_9_length = -1;",
          "2403: static int hf_security_9_initial_state = -1;",
          "2406: static int hf_security_10_count = -1;",
          "2407: static int hf_security_10_permission_group_identifier = -1;",
          "2410: static int hf_security_11_count = -1;",
          "2411: static int ett_security_11_permission_security_scope = -1;",
          "2412: static int hf_security_11_permission_security_scope = -1;",
          "2415: static int hf_security_12_m = -1;",
          "2417: static const value_string dof_2008_16_security_12_m[] = {",
          "2418:     { 0, \"Reference\" },",
          "2419:     { 1, \"Relative\" },",
          "2420:     { 2, \"Absolute\" },",
          "2421:     { 3, \"Continued\" },",
          "2422:     { 0, NULL }",
          "2423: };",
          "2425: static int hf_security_12_count = -1;",
          "2426: static int hf_security_12_permission_group_identifier = -1;",
          "2429: static int dissect_2008_1_dsp_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "2430: {",
          "2431:     proto_item *parent = proto_tree_get_parent(tree);",
          "2432:     guint8 attribute_code = tvb_get_guint8(tvb, 0);",
          "2433:     guint16 attribute_data = tvb_get_ntohs(tvb, 1);",
          "2434:     guint8 option_length = tvb_get_guint8(tvb, 3);",
          "2437:     proto_tree_add_item(tree, hf_2008_1_dsp_attribute_code, tvb, 0, 1, ENC_NA);",
          "2438:     proto_tree_add_item(tree, hf_2008_1_dsp_attribute_data, tvb, 1, 2, ENC_BIG_ENDIAN);",
          "2439:     proto_tree_add_item(tree, hf_2008_1_dsp_value_length, tvb, 3, 1, ENC_NA);",
          "2442:     proto_item_append_text(parent, \" (Code=%s/Data=0x%04x)\", val_to_str(attribute_code, strings_2008_1_dsp_attribute_codes, \"%u\"), attribute_data);",
          "2444:     if (option_length)",
          "2445:     {",
          "2446:         proto_tree_add_item(tree, hf_2008_1_dsp_value_data, tvb, 4, option_length, ENC_NA);",
          "2449:         tvb_set_reported_length(tvb, option_length + 4);",
          "2450:         dissector_try_uint(dsp_option_dissectors, (attribute_code << 16) | attribute_data, tvb, pinfo, tree);",
          "2451:     }",
          "2452:     return option_length + 4;",
          "2453: }",
          "2459: static int dissect_2008_16_security_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2460: {",
          "2461:     gint offset = 0;",
          "2462:     gboolean has_length;",
          "2463:     guint16 length;",
          "2466:     {",
          "2467:         gint start = offset;",
          "2468:         guint16 value;",
          "2469:         gint val_len;",
          "2470:         proto_item *pi;",
          "2471:         offset = read_c2(tvb, offset, &value, &val_len);",
          "2472:         has_length = (gboolean)(value % 2);",
          "2473:         pi = proto_tree_add_uint(tree, hf_security_1_permission_type, tvb, start, offset - start, value);",
          "2474:         validate_c2(pinfo, pi, value, val_len);",
          "2475:     }",
          "2477:     if (!has_length)",
          "2478:         return offset;",
          "2481:     {",
          "2482:         gint start = offset;",
          "2483:         guint16 value;",
          "2484:         gint value_len;",
          "2485:         proto_item *pi;",
          "2486:         offset = read_c2(tvb, offset, &value, &value_len);",
          "2487:         length = value;",
          "2488:         pi = proto_tree_add_uint(tree, hf_security_1_length, tvb, start, offset - start, value);",
          "2489:         validate_c2(pinfo, pi, value, value_len);",
          "2490:     }",
          "2493:     proto_tree_add_item(tree, hf_security_1_data, tvb, offset, length, ENC_NA);",
          "2494:     offset += length;",
          "2496:     return offset;",
          "2497: }",
          "2502: static int dissect_2008_16_security_2(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2503: {",
          "2504:     gint offset = 0;",
          "2505:     guint16 count;",
          "2508:     {",
          "2509:         gint start = offset;",
          "2510:         guint16 value;",
          "2511:         gint length;",
          "2512:         proto_item *pi;",
          "2513:         offset = read_c2(tvb, offset, &value, &length);",
          "2514:         count = value;",
          "2515:         pi = proto_tree_add_uint(tree, hf_security_2_count, tvb, start, offset - start, value);",
          "2516:         validate_c2(pinfo, pi, value, length);",
          "2517:     }",
          "2519:     while (count--)",
          "2520:     {",
          "2521:         proto_item *ti = proto_tree_add_item(tree, hf_security_2_permission, tvb, offset, -1, ENC_NA);",
          "2522:         proto_tree *subtree = proto_item_add_subtree(ti, ett_security_2_permission);",
          "2523:         tvbuff_t *next_tvb = tvb_new_subset(tvb, offset, -1, -1);",
          "2524:         gint len = dissect_2008_16_security_1(next_tvb, pinfo, subtree, NULL);",
          "2525:         proto_item_set_len(ti, len);",
          "2526:         offset += len;",
          "2527:     }",
          "2529:     return offset;",
          "2530: }",
          "2536: static int dissect_2008_16_security_3_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "2537: {",
          "2538:     gint offset = 0;",
          "2539:     guint8 stage;",
          "2540:     proto_item *ti;",
          "2541:     dof_2008_16_security_3_1 *return_data = (dof_2008_16_security_3_1 *)data;",
          "2544:     {",
          "2545:         gint start = offset;",
          "2546:         guint16 value;",
          "2547:         gint length;",
          "2548:         proto_item *pi;",
          "2549:         offset = read_c2(tvb, offset, &value, &length);",
          "2550:         pi = proto_tree_add_uint(tree, hf_security_3_1_credential_type, tvb, start, offset - start, value);",
          "2551:         validate_c2(pinfo, pi, value, length);",
          "2552:     }",
          "2555:     stage = tvb_get_guint8(tvb, offset);",
          "2556:     ti = proto_tree_add_item(tree, hf_security_3_1_stage, tvb, offset, 1, ENC_NA);",
          "2557:     offset += 1;",
          "2559:     if (stage != 0)",
          "2560:         expert_add_info(pinfo, ti, &ei_security_3_1_invalid_stage);",
          "2563:     {",
          "2564:         int block_length;",
          "2565:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2566:         proto_tree *subtree;",
          "2567:         ti = proto_tree_add_item(tree, hf_security_3_1_security_node_identifier, tvb, offset, 0, ENC_NA);",
          "2568:         subtree = proto_item_add_subtree(ti, ett_security_3_1_security_node_identifier);",
          "2569:         block_length = dissect_2008_16_security_8(start, pinfo, subtree, NULL);",
          "2570:         proto_item_set_len(ti, block_length);",
          "2571:         offset += block_length;",
          "2572:         tvb_set_reported_length(start, block_length);",
          "2573:         if (return_data)",
          "2574:             return_data->identity = start;",
          "2575:     }",
          "2577:     return offset;",
          "2578: }",
          "2583: int dissect_2008_16_security_3_2(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2584: {",
          "2585:     gint offset = 0;",
          "2586:     guint16 length;",
          "2589:     {",
          "2590:         gint start = offset;",
          "2591:         guint16 value;",
          "2592:         gint val_len;",
          "2593:         proto_item *pi;",
          "2594:         offset = read_c2(tvb, offset, &value, &val_len);",
          "2595:         pi = proto_tree_add_uint(tree, hf_security_3_2_credential_type, tvb, start, offset - start, value);",
          "2596:         validate_c2(pinfo, pi, value, val_len);",
          "2597:     }",
          "2600:     proto_tree_add_item(tree, hf_security_3_2_stage, tvb, offset, 1, ENC_NA);",
          "2601:     offset += 1;",
          "2604:     {",
          "2605:         gint start = offset;",
          "2606:         guint16 value;",
          "2607:         gint value_len;",
          "2608:         proto_item *pi;",
          "2609:         offset = read_c2(tvb, offset, &value, &value_len);",
          "2610:         length = value;",
          "2611:         pi = proto_tree_add_uint(tree, hf_security_3_2_length, tvb, start, offset - start, value);",
          "2612:         validate_c2(pinfo, pi, value, value_len);",
          "2613:     }",
          "2616:     proto_tree_add_item(tree, hf_security_3_2_public_data, tvb, offset, length, ENC_NA);",
          "2617:     offset += length;",
          "2619:     return offset;",
          "2620: }",
          "2625: static int dissect_2008_16_security_4(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "2626: {",
          "2627:     gint offset = 0;",
          "2628:     guint8 flag;",
          "2629:     dof_2008_16_security_4 *return_data = (dof_2008_16_security_4 *)data;",
          "2631:     flag = tvb_get_guint8(tvb, offset);",
          "2632:     if (flag & 0x30)",
          "2633:         expert_add_info(pinfo, tree, &ei_security_4_invalid_bit);",
          "2635:     proto_tree_add_item(tree, hf_security_4_l, tvb, offset, 1, ENC_NA);",
          "2636:     proto_tree_add_item(tree, hf_security_4_f, tvb, offset, 1, ENC_NA);",
          "2637:     proto_tree_add_item(tree, hf_security_4_ln, tvb, offset, 1, ENC_NA);",
          "2638:     offset += 1;",
          "2640:     {",
          "2641:         int block_length;",
          "2642:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2643:         proto_item *ti;",
          "2644:         proto_tree *subtree;",
          "2645:         dof_2008_16_security_3_1 return_3_1;",
          "2647:         ti = proto_tree_add_item(tree, hf_security_4_identity, tvb, offset, 0, ENC_NA);",
          "2648:         subtree = proto_item_add_subtree(ti, ett_security_4_identity);",
          "2650:         block_length = dissect_2008_16_security_3_1(start, pinfo, subtree, &return_3_1);",
          "2651:         proto_item_set_len(ti, block_length);",
          "2652:         offset += block_length;",
          "2653:         if (return_data)",
          "2654:         {",
          "2655:             return_data->identity = return_3_1.identity;",
          "2656:         }",
          "2657:     }",
          "2659:     {",
          "2660:         tvbuff_t *start = tvb_new_subset(tvb, offset, (flag & 0x0F) + 1, (flag & 0x0F) + 1);",
          "2661:         if (return_data)",
          "2662:             return_data->nonce = start;",
          "2664:         proto_tree_add_item(tree, hf_security_4_nonce, start, 0, (flag & 0x0F) + 1, ENC_NA);",
          "2665:         offset += (flag & 0x0F) + 1;",
          "2666:     }",
          "2668:     {",
          "2669:         int block_length;",
          "2670:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2671:         proto_item *ti;",
          "2672:         proto_tree *subtree;",
          "2674:         ti = proto_tree_add_item(tree, hf_security_4_permission_set, tvb, offset, 0, ENC_NA);",
          "2675:         subtree = proto_item_add_subtree(ti, ett_security_4_permission_set);",
          "2676:         block_length = dissect_2008_16_security_2(start, pinfo, subtree, NULL);",
          "2677:         proto_item_set_len(ti, block_length);",
          "2678:         offset += block_length;",
          "2679:     }",
          "2681:     return offset;",
          "2682: }",
          "2687: static int dissect_2008_16_security_5(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "2688: {",
          "2689:     gint offset = 0;",
          "2691:     proto_tree_add_item(tree, hf_security_5_mac, tvb, offset, 32, ENC_NA);",
          "2692:     offset += 32;",
          "2694:     proto_tree_add_item(tree, hf_security_5_key, tvb, offset, 32, ENC_NA);",
          "2695:     offset += 32;",
          "2697:     return offset;",
          "2698: }",
          "2704: static int dissect_2008_16_security_6_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "2705: {",
          "2706:     gint offset = 0;",
          "2709:     dof_2008_16_security_6_1 *return_data = (dof_2008_16_security_6_1 *)data;",
          "2712:     proto_tree_add_item(tree, hf_security_6_1_desired_duration, tvb, offset, 1, ENC_NA);",
          "2713:     offset += 1;",
          "2716:     {",
          "2717:         int block_length;",
          "2718:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2719:         proto_item *ti;",
          "2720:         proto_tree *subtree;",
          "2722:         ti = proto_tree_add_item(tree, hf_security_6_1_desired_security_mode, tvb, offset, 0, ENC_NA);",
          "2723:         subtree = proto_item_add_subtree(ti, ett_security_6_1_desired_security_mode);",
          "2725:         block_length = dissect_2008_16_security_13(start, pinfo, subtree, NULL);",
          "2726:         offset += block_length;",
          "2727:         tvb_set_reported_length(start, block_length);",
          "2728:         proto_item_set_len(ti, block_length);",
          "2730:         if (return_data)",
          "2731:         {",
          "2732:             return_data->security_mode = tvb_get_ntohs(start, 1);",
          "2733:             return_data->security_mode_data_length = block_length - 4;",
          "2734:             return_data->security_mode_data = (guint8 *)wmem_alloc0(wmem_file_scope(), block_length - 4);",
          "2735:             memcpy(return_data->security_mode_data, tvb_get_ptr(start, 4, block_length - 4), block_length - 4);",
          "2736:         }",
          "2737:     }",
          "2740:     {",
          "2741:         int block_length;",
          "2742:         dof_2008_16_security_4 output;",
          "2743:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2744:         proto_item *ti;",
          "2745:         proto_tree *subtree;",
          "2747:         ti = proto_tree_add_item(tree, hf_security_6_1_initiator_request, tvb, offset, 0, ENC_NA);",
          "2748:         subtree = proto_item_add_subtree(ti, ett_security_6_1_initiator_request);",
          "2750:         block_length = dissect_2008_16_security_4(start, pinfo, subtree, &output);",
          "2751:         proto_item_set_len(ti, block_length);",
          "2752:         offset += block_length;",
          "2753:         if (return_data)",
          "2754:         {",
          "2755:             return_data->i_identity = output.identity;",
          "2756:             return_data->i_nonce = output.nonce;",
          "2757:         }",
          "2758:     }",
          "2760:     return offset;",
          "2761: }",
          "2767: static int dissect_2008_16_security_6_2(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "2768: {",
          "2769:     gint offset = 0;",
          "2770:     dof_2008_16_security_6_2 *return_data = (dof_2008_16_security_6_2 *)data;",
          "2773:     {",
          "2774:         int block_length;",
          "2775:         dof_2008_16_security_4 output;",
          "2776:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2777:         proto_item *ti;",
          "2778:         proto_tree *subtree;",
          "2780:         ti = proto_tree_add_item(tree, hf_security_6_2_responder_request, tvb, offset, 0, ENC_NA);",
          "2781:         subtree = proto_item_add_subtree(ti, ett_security_6_2_responder_request);",
          "2783:         block_length = dissect_2008_16_security_4(start, pinfo, subtree, &output);",
          "2784:         proto_item_set_len(ti, block_length);",
          "2785:         offset += block_length;",
          "2786:         if (return_data)",
          "2787:         {",
          "2788:             return_data->r_identity = output.identity;",
          "2789:             return_data->r_nonce = output.nonce;",
          "2790:         }",
          "2791:     }",
          "2793:     return offset;",
          "2794: }",
          "2799: static int dissect_2008_16_security_6_3(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2800: {",
          "2801:     gint offset = 0;",
          "2804:     proto_tree_add_item(tree, hf_security_6_3_granted_duration, tvb, offset, 1, ENC_NA);",
          "2805:     offset += 1;",
          "2808:     {",
          "2809:         int block_length;",
          "2810:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2811:         proto_item *ti;",
          "2812:         proto_tree *subtree;",
          "2814:         ti = proto_tree_add_item(tree, hf_security_6_3_session_security_scope, tvb, offset, 0, ENC_NA);",
          "2815:         subtree = proto_item_add_subtree(ti, ett_security_6_3_session_security_scope);",
          "2816:         block_length = dissect_2008_16_security_10(start, pinfo, subtree, NULL);",
          "2817:         proto_item_set_len(ti, block_length);",
          "2818:         offset += block_length;",
          "2819:     }",
          "2822:     {",
          "2823:         int block_length;",
          "2824:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2825:         proto_item *ti;",
          "2826:         proto_tree *subtree;",
          "2828:         ti = proto_tree_add_item(tree, hf_security_6_3_initiator_validation, tvb, offset, 0, ENC_NA);",
          "2829:         subtree = proto_item_add_subtree(ti, ett_security_6_3_initiator_validation);",
          "2830:         block_length = dissect_2008_16_security_11(start, pinfo, subtree, NULL);",
          "2831:         proto_item_set_len(ti, block_length);",
          "2832:         offset += block_length;",
          "2833:     }",
          "2836:     {",
          "2837:         int block_length;",
          "2838:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "2839:         proto_item *ti;",
          "2840:         proto_tree *subtree;",
          "2842:         ti = proto_tree_add_item(tree, hf_security_6_3_responder_validation, tvb, offset, 0, ENC_NA);",
          "2843:         subtree = proto_item_add_subtree(ti, ett_security_6_3_responder_validation);",
          "2844:         block_length = dissect_2008_16_security_11(start, pinfo, subtree, NULL);",
          "2845:         proto_item_set_len(ti, block_length);",
          "2846:         offset += block_length;",
          "2847:     }",
          "2849:     return offset;",
          "2850: }",
          "2855: static int dissect_2008_16_security_7(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2856: {",
          "2858:     gint block_length;",
          "2860:     block_length = dissect_2009_11_type_4(tvb, pinfo, tree, NULL);",
          "2862:     return block_length;",
          "2863: }",
          "2868: static int dissect_2008_16_security_8(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2869: {",
          "2871:     gint block_length;",
          "2873:     block_length = dissect_2009_11_type_4(tvb, pinfo, tree, NULL);",
          "2875:     return block_length;",
          "2876: }",
          "2883: static int dissect_2008_16_security_9(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2884: {",
          "2885:     gint offset = 0;",
          "2886:     guint16 length;",
          "2889:     {",
          "2890:         gint start = offset;",
          "2891:         guint16 value;",
          "2892:         gint value_len;",
          "2893:         proto_item *pi;",
          "2894:         offset = read_c2(tvb, offset, &value, &value_len);",
          "2895:         length = value;",
          "2896:         pi = proto_tree_add_uint(tree, hf_security_9_length, tvb, start, offset - start, value);",
          "2897:         validate_c2(pinfo, pi, value, value_len);",
          "2898:     }",
          "2900:     if (length > 0)",
          "2901:     {",
          "2902:         proto_tree_add_item(tree, hf_security_9_initial_state, tvb, offset, length, ENC_NA);",
          "2903:         offset += length;",
          "2904:     }",
          "2906:     return offset;",
          "2907: }",
          "2912: static int dissect_2008_16_security_10(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "2913: {",
          "2914:     gint offset = 0;",
          "2915:     guint16 count;",
          "2918:     {",
          "2919:         gint start = offset;",
          "2920:         guint16 value;",
          "2921:         gint length;",
          "2922:         proto_item *pi;",
          "2923:         offset = read_c2(tvb, offset, &value, &length);",
          "2924:         count = value;",
          "2925:         pi = proto_tree_add_uint(tree, hf_security_10_count, tvb, start, offset - start, value);",
          "2926:         validate_c2(pinfo, pi, value, length);",
          "2927:     }",
          "2929:     while (count--)",
          "2930:     {",
          "2931:         const char *def = \"\";",
          "2933:         gint start = offset;",
          "2934:         guint32 value;",
          "2935:         gint length;",
          "2936:         proto_item *pi;",
          "2938:         offset = read_c4(tvb, offset, &value, &length);",
          "2940:         switch (value)",
          "2941:         {",
          "2942:         case 0x3FFFFFFF:",
          "2943:             def = \" (all scopes)\";",
          "2944:             break;",
          "2945:         case 0x3FFFFFFE:",
          "2946:             def = \" (doesn't mask)\";",
          "2947:             break;",
          "2948:         case 0x3FFFFFFD:",
          "2949:             def = \" (session scope)\";",
          "2950:             break;",
          "2951:         }",
          "2953:         pi = proto_tree_add_uint_format_value(tree, hf_security_10_permission_group_identifier, tvb, start, offset - start, value, \"%u%s\", value, def);",
          "2954:         validate_c4(pinfo, pi, value, length);",
          "2955:     }",
          "2957:     return offset;",
          "2958: }",
          "2963: static int dissect_2008_16_security_11(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "2964: {",
          "2965:     gint offset = 0;",
          "2966:     guint16 count;",
          "2969:     {",
          "2970:         gint start = offset;",
          "2971:         guint16 value;",
          "2972:         gint length;",
          "2973:         proto_item *pi;",
          "2974:         offset = read_c2(tvb, offset, &value, &length);",
          "2975:         count = value;",
          "2976:         pi = proto_tree_add_uint(tree, hf_security_11_count, tvb, start, offset - start, value);",
          "2977:         validate_c2(pinfo, pi, value, length);",
          "2978:     }",
          "2980:     while (count--)",
          "2981:     {",
          "2982:         proto_item *ti = proto_tree_add_item(tree, hf_security_11_permission_security_scope, tvb, offset, -1, ENC_NA);",
          "2983:         proto_tree *subtree = proto_item_add_subtree(ti, ett_security_11_permission_security_scope);",
          "2984:         tvbuff_t *next_tvb = tvb_new_subset(tvb, offset, -1, -1);",
          "2985:         gint len;",
          "2986:         len = dissect_2008_16_security_12(next_tvb, pinfo, subtree, NULL);",
          "2987:         proto_item_set_len(ti, len);",
          "2988:         offset += len;",
          "2989:     }",
          "2991:     return offset;",
          "2992: }",
          "2997: static int dissect_2008_16_security_12(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "2998: {",
          "2999:     gint offset = 0;",
          "3000:     guint8 m = tvb_get_guint8(tvb, offset) >> 6;",
          "3001:     guint16 count = tvb_get_guint8(tvb, offset) & 0x3F;",
          "3002:     proto_item *pi;",
          "3004:     proto_tree_add_item(tree, hf_security_12_m, tvb, offset, 1, ENC_NA);",
          "3005:     proto_tree_add_item(tree, hf_security_12_count, tvb, offset, 1, ENC_NA);",
          "3006:     offset += 1;",
          "3008:     if (m == 0)",
          "3009:         return offset;",
          "3011:     while (count--)",
          "3012:     {",
          "3013:         const char *def = \"\";",
          "3015:         gint start = offset;",
          "3016:         guint32 value;",
          "3017:         gint length;",
          "3018:         offset = read_c4(tvb, offset, &value, &length);",
          "3020:         switch (value)",
          "3021:         {",
          "3022:         case 0x3FFFFFFF:",
          "3023:             def = \" (all scopes)\";",
          "3024:             break;",
          "3025:         case 0x3FFFFFFE:",
          "3026:             def = \" (doesn't mask)\";",
          "3027:             break;",
          "3028:         case 0x3FFFFFFD:",
          "3029:             def = \" (session scope)\";",
          "3030:             break;",
          "3031:         }",
          "3033:         pi = proto_tree_add_uint_format_value(tree, hf_security_12_permission_group_identifier, tvb, start, offset - start, value, \"%u%s\", value, def);",
          "3034:         validate_c4(pinfo, pi, value, length);",
          "3035:     }",
          "3037:     return offset;",
          "3038: }",
          "3043: static int dissect_2008_16_security_13(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "3044: {",
          "3046:     gint block_length;",
          "3047:     guint16 attribute_data;",
          "3050:     attribute_data = tvb_get_ntohs(tvb, 1);",
          "3051:     if (attribute_data < 0x6000 || attribute_data >= 0x7000)",
          "3052:         expert_add_info(pinfo, tree, &ei_security_13_out_of_range);",
          "3054:     block_length = dissect_2008_1_dsp_1(tvb, pinfo, tree);",
          "3056:     return block_length;",
          "3057: }",
          "3072: static gint dissect_2009_11_type_4(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "3073: {",
          "3074:     proto_item *ti;",
          "3075:     gint start_offset = 0;",
          "3076:     gint offset = 0;",
          "3077:     guint32 oid_class;",
          "3078:     gint oid_class_len;",
          "3079:     guint8 oid_len_byte;",
          "3080:     proto_tree *oid_tree = tree;",
          "3081:     proto_tree *header_tree;",
          "3083:     if (tree)",
          "3084:     {",
          "3085:         ti = proto_tree_get_parent(tree);",
          "3086:         proto_item_set_text(ti, \"Object ID: %s\", dof_oid_create_standard_string(tvb_reported_length(tvb), tvb_get_ptr(tvb, 0, tvb_reported_length(tvb))));",
          "3087:     }",
          "3089:     offset = read_c4(tvb, offset, &oid_class, &oid_class_len);",
          "3090:     ti = proto_tree_add_uint_format(oid_tree, hf_oid_class, tvb, start_offset, offset - start_offset, oid_class, \"Class: %u\", oid_class);",
          "3091:     validate_c4(pinfo, ti, oid_class, oid_class_len);",
          "3093:     oid_len_byte = tvb_get_guint8(tvb, offset);",
          "3094:     ti = proto_tree_add_uint_format(oid_tree, hf_oid_header, tvb,",
          "3095:                                     offset, 1, oid_len_byte, \"Header: 0x%02x (%sLength=%d)\", oid_len_byte, oid_len_byte & 0x80 ? \"Attribute, \" : \"\", oid_len_byte & 0x3F);",
          "3097:     header_tree = proto_item_add_subtree(ti, ett_oid_header);",
          "3098:     proto_tree_add_item(header_tree, hf_oid_attribute, tvb, offset, 1, ENC_NA);",
          "3099:     proto_tree_add_item(header_tree, hf_oid_length, tvb, offset, 1, ENC_NA);",
          "3100:     offset += 1;",
          "3103:     if (oid_len_byte & 0x40)",
          "3104:     {",
          "3106:         expert_add_info(pinfo, ti, &ei_type_4_header_zero);",
          "3107:     }",
          "3109:     if ((oid_len_byte & 0x3F) > 0)",
          "3110:     {",
          "3112:         proto_tree_add_item(oid_tree, hf_oid_data, tvb, offset, oid_len_byte & 0x3F, ENC_NA);",
          "3113:         offset += oid_len_byte & 0x3F;",
          "3114:     }",
          "3117:     if (oid_len_byte & 0x80)",
          "3118:     {",
          "3120:         guint8 flag;",
          "3122:         do",
          "3123:         {",
          "3124:             tvbuff_t *packet = tvb_new_subset(tvb, offset, -1, -1);",
          "3125:             proto_tree *attribute_tree;",
          "3126:             gint attribute_length;",
          "3128:             ti = proto_tree_add_item(tree, hf_oid_all_attribute_data, tvb, offset, -1, ENC_NA);",
          "3129:             attribute_tree = proto_item_add_subtree(ti, ett_oid_attribute);",
          "3130:             flag = tvb_get_guint8(tvb, offset);",
          "3131:             attribute_length = dissect_2009_11_type_5(packet, pinfo, attribute_tree);",
          "3132:             proto_item_set_len(ti, (const gint)attribute_length);",
          "3133:             offset += attribute_length;",
          "3134:         }",
          "3135:         while (flag & 0x80);",
          "3136:     }",
          "3138:     if (tree)",
          "3139:     {",
          "3140:         ti = proto_tree_get_parent(tree);",
          "3141:         proto_item_set_len(ti, offset - start_offset);",
          "3142:     }",
          "3146:     return offset;",
          "3147: }",
          "3163: static int dissect_2009_11_type_5(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)",
          "3164: {",
          "3165:     proto_item *ti;",
          "3166:     gint offset = 0;",
          "3167:     guint8 attribute_id_byte;",
          "3168:     guint8 attribute_length_byte;",
          "3169:     proto_tree *oid_tree = tree;",
          "3170:     proto_tree *header_tree;",
          "3172:     attribute_id_byte = tvb_get_guint8(tvb, offset);",
          "3173:     ti = proto_tree_add_uint_format(oid_tree, hf_oid_attribute_header, tvb,",
          "3174:                                     offset, 1, attribute_id_byte, \"Header: 0x%02x (%sLength=%d)\", attribute_id_byte, attribute_id_byte & 0x80 ? \"Attribute, \" : \"\", attribute_id_byte & 0x3F);",
          "3176:     header_tree = proto_item_add_subtree(ti, ett_oid_attribute_header);",
          "3177:     proto_tree_add_item(header_tree, hf_oid_attribute_attribute, tvb, offset, 1, ENC_NA);",
          "3178:     proto_tree_add_item(header_tree, hf_oid_attribute_id, tvb, offset, 1, ENC_NA);",
          "3179:     offset += 1;",
          "3181:     attribute_length_byte = tvb_get_guint8(tvb, offset);",
          "3182:     proto_tree_add_item(oid_tree, hf_oid_attribute_length, tvb, offset, 1, ENC_NA);",
          "3183:     offset += 1;",
          "3185:     switch (attribute_id_byte & 0x7F)",
          "3186:     {",
          "3187:     case 1:",
          "3189:         proto_tree_add_item(oid_tree, hf_oid_attribute_data, tvb, offset, attribute_length_byte, ENC_NA);",
          "3190:         offset += attribute_length_byte;",
          "3191:         break;",
          "3193:     case 0:",
          "3194:     case 2:",
          "3195:     {",
          "3196:         tvbuff_t *packet = tvb_new_subset(tvb, offset, attribute_length_byte, attribute_length_byte);",
          "3197:         proto_tree *attribute_tree;",
          "3199:         ti = proto_tree_add_item(tree, hf_oid_attribute_oid, tvb, offset, -1, ENC_NA);",
          "3200:         attribute_tree = proto_item_add_subtree(ti, ett_oid_attribute_oid);",
          "3201:         offset += dissect_2009_11_type_4(packet, pinfo, attribute_tree, NULL);",
          "3202:     }",
          "3203:         break;",
          "3205:     default:",
          "3206:         proto_tree_add_item(oid_tree, hf_oid_attribute_data, tvb, offset, attribute_length_byte, ENC_NA);",
          "3207:         offset += attribute_length_byte;",
          "3208:     }",
          "3210:     return offset;",
          "3211: }",
          "3215: static dof_globals globals;",
          "3219: static dof_packet_data* create_packet_data(packet_info *pinfo);",
          "3220: static int dof_dissect_dnp_length(tvbuff_t *tvb, packet_info *pinfo, guint8 version, gint *offset);",
          "3221: static void encryptInPlace(guint protocol_id, void *cipher_state, guint8 *ptct, guint8 ptct_len);",
          "3223: #define VALIDHEX(c) ( ((c) >= '0' && (c) <= '9') || ((c) >= 'A' && (c) <= 'F') || ((c) >= 'a' && (c) <= 'f') )",
          "3230: static gboolean decrypt_all_packets = FALSE;",
          "3231: static gboolean track_operations = FALSE;",
          "3232: static guint track_operations_window = 5;",
          "3233: static guint32 next_dof_frame = 1;",
          "3236: typedef struct _secmode_field_t {",
          "3237:     gchar *domain;",
          "3238:     gchar *identity;",
          "3239:     gchar *kek;",
          "3240: } secmode_field_t;",
          "3242: static secmode_field_t *secmode_list = NULL;",
          "3243: static guint num_secmode_list = 0;",
          "3246: typedef struct _seckey_field_t {",
          "3247:     gchar *key;",
          "3248: } seckey_field_t;",
          "3251: typedef struct _identsecret_field_t {",
          "3252:     gchar *domain;",
          "3253:     gchar *identity;",
          "3254:     gchar *secret;",
          "3255: } identsecret_field_t;",
          "3257: typedef struct _tcp_ignore_data",
          "3258: {",
          "3259:     guint32 sequence;",
          "3260:     gboolean ignore;",
          "3261:     struct _tcp_ignore_data *next;",
          "3262: } tcp_ignore_data;",
          "3264: typedef struct _tcp_dof_packet_ref",
          "3265: {",
          "3269:     dof_api_data api_data;",
          "3271:     guint16 start_offset;",
          "3272:     dof_transport_packet transport_packet;",
          "3273:     struct _tcp_dof_packet_ref *next;",
          "3274: } tcp_dof_packet_ref;",
          "3280: typedef struct _tcp_packet_data",
          "3281: {",
          "3283:     tcp_ignore_data *from_client_ignore_list;",
          "3284:     tcp_ignore_data *from_server_ignore_list;",
          "3287:     tcp_dof_packet_ref *dof_packets;",
          "3288: } tcp_packet_data;",
          "3294: typedef struct _udp_session_data",
          "3295: {",
          "3297:     dof_transport_session common;",
          "3302:     ws_node server;",
          "3303: } udp_session_data;",
          "3308: typedef struct _tcp_session_data",
          "3309: {",
          "3311:     dof_transport_session common;",
          "3318:     gboolean not_dps;",
          "3323:     ws_node client, server;",
          "3328:     guint32 from_client_seq;",
          "3329:     guint32 from_server_seq;",
          "3331: } tcp_session_data;",
          "3333: static dof_security_data global_security;",
          "3335: static guint8 count_hex_bytes(gchar *str);",
          "3338: static seckey_field_t *seckey_list = NULL;",
          "3339: static guint num_seckey_list = 0;",
          "3342: static identsecret_field_t *identsecret_list = NULL;",
          "3343: static guint num_identsecret_list = 0;",
          "3347: UAT_CSTRING_CB_DEF(secmode_list, domain, secmode_field_t)",
          "3348: UAT_CSTRING_CB_DEF(secmode_list, identity, secmode_field_t)",
          "3349: UAT_CSTRING_CB_DEF(secmode_list, kek, secmode_field_t)",
          "3351: static void secmode_list_post_update_cb(void)",
          "3352: {",
          "3353: }",
          "3355: static void secmode_list_update_cb(void *r, const char **err)",
          "3356: {",
          "3357:     secmode_field_t *rec = (secmode_field_t *)r;",
          "3358:     guint32 size;",
          "3362:     size = (guint32)strlen(rec->domain);",
          "3363:     if (!VALIDHEX(rec->domain[0]) && !dof_oid_create_internal(rec->domain, &size, NULL))",
          "3364:     {",
          "3366:         return;",
          "3367:     }",
          "3368:     else if (!count_hex_bytes(rec->domain))",
          "3369:     {",
          "3371:         return;",
          "3372:     }",
          "3374:     size = (guint32)strlen(rec->identity);",
          "3375:     if (!VALIDHEX(rec->identity[0]) && !dof_oid_create_internal(rec->identity, &size, NULL))",
          "3376:     {",
          "3378:         return;",
          "3379:     }",
          "3380:     else if (!count_hex_bytes(rec->identity))",
          "3381:     {",
          "3383:         return;",
          "3384:     }",
          "3386:     if (count_hex_bytes(rec->kek) != 32)",
          "3387:     {",
          "3389:         return;",
          "3390:     }",
          "3391: }",
          "3393: static void* secmode_list_copy_cb(void *n, const void *o, unsigned siz _U_)",
          "3394: {",
          "3395:     secmode_field_t *new_rec = (secmode_field_t *)n;",
          "3396:     const secmode_field_t *old_rec = (const secmode_field_t *)o;",
          "3398:     if (old_rec->domain)",
          "3399:     {",
          "3400:         new_rec->domain = g_strdup(old_rec->domain);",
          "3401:     }",
          "3402:     else",
          "3403:     {",
          "3404:         new_rec->domain = NULL;",
          "3405:     }",
          "3407:     if (old_rec->identity)",
          "3408:     {",
          "3409:         new_rec->identity = g_strdup(old_rec->identity);",
          "3410:     }",
          "3411:     else",
          "3412:     {",
          "3413:         new_rec->identity = NULL;",
          "3414:     }",
          "3416:     if (old_rec->kek)",
          "3417:     {",
          "3418:         new_rec->kek = g_strdup(old_rec->kek);",
          "3419:     }",
          "3420:     else",
          "3421:     {",
          "3422:         new_rec->kek = NULL;",
          "3423:     }",
          "3425:     return new_rec;",
          "3426: }",
          "3428: static void secmode_list_free_cb(void *r)",
          "3429: {",
          "3430:     secmode_field_t *rec = (secmode_field_t *)r;",
          "3432:     if (rec->domain)",
          "3433:         g_free(rec->domain);",
          "3434:     if (rec->identity)",
          "3435:         g_free(rec->identity);",
          "3436:     if (rec->kek)",
          "3437:         g_free(rec->kek);",
          "3438: }",
          "3442: UAT_CSTRING_CB_DEF(seckey_list, key, seckey_field_t)",
          "3444: static void seckey_list_post_update_cb(void)",
          "3445: {",
          "3446: }",
          "3448: static void seckey_list_update_cb(void *r, const char **err)",
          "3449: {",
          "3450:     seckey_field_t *rec = (seckey_field_t *)r;",
          "3453:     if (count_hex_bytes(rec->key) != 32)",
          "3454:     {",
          "3456:         return;",
          "3457:     }",
          "3458: }",
          "3460: static void* seckey_list_copy_cb(void *n, const void *o, unsigned siz _U_)",
          "3461: {",
          "3462:     seckey_field_t *new_rec = (seckey_field_t *)n;",
          "3463:     const seckey_field_t *old_rec = (const seckey_field_t *)o;",
          "3465:     if (old_rec->key)",
          "3466:     {",
          "3467:         new_rec->key = g_strdup(old_rec->key);",
          "3468:     }",
          "3469:     else",
          "3470:     {",
          "3471:         new_rec->key = NULL;",
          "3472:     }",
          "3474:     return new_rec;",
          "3475: }",
          "3477: static void seckey_list_free_cb(void *r)",
          "3478: {",
          "3479:     seckey_field_t *rec = (seckey_field_t *)r;",
          "3481:     if (rec->key)",
          "3482:         g_free(rec->key);",
          "3483: }",
          "3487: UAT_CSTRING_CB_DEF(identsecret_list, domain, identsecret_field_t)",
          "3488: UAT_CSTRING_CB_DEF(identsecret_list, identity, identsecret_field_t)",
          "3489: UAT_CSTRING_CB_DEF(identsecret_list, secret, identsecret_field_t)",
          "3491: static void identsecret_list_post_update_cb(void)",
          "3492: {",
          "3493: }",
          "3495: static void identsecret_list_update_cb(void *r, const char **err)",
          "3496: {",
          "3497:     identsecret_field_t *rec = (identsecret_field_t *)r;",
          "3498:     guint32 size;",
          "3502:     size = (guint32)strlen(rec->domain);",
          "3503:     if (!VALIDHEX(rec->domain[0]))",
          "3504:     {",
          "3505:         if (dof_oid_create_internal(rec->domain, &size, NULL))",
          "3506:         {",
          "3508:             return;",
          "3509:         }",
          "3510:     }",
          "3511:     else if (!count_hex_bytes(rec->domain))",
          "3512:     {",
          "3514:         return;",
          "3515:     }",
          "3517:     size = (guint32)strlen(rec->identity);",
          "3518:     if (!VALIDHEX(rec->identity[0]))",
          "3519:     {",
          "3520:         if (dof_oid_create_internal(rec->identity, &size, NULL))",
          "3521:         {",
          "3523:             return;",
          "3524:         }",
          "3525:     }",
          "3526:     else if (!count_hex_bytes(rec->identity))",
          "3527:     {",
          "3529:         return;",
          "3530:     }",
          "3532:     if (count_hex_bytes(rec->secret) != 32)",
          "3533:     {",
          "3535:         return;",
          "3536:     }",
          "3537: }",
          "3539: static void* identsecret_list_copy_cb(void *n, const void *o, unsigned siz _U_)",
          "3540: {",
          "3541:     identsecret_field_t *new_rec = (identsecret_field_t *)n;",
          "3542:     const identsecret_field_t *old_rec = (const identsecret_field_t *)o;",
          "3544:     if (old_rec->domain)",
          "3545:     {",
          "3546:         new_rec->domain = g_strdup(old_rec->domain);",
          "3547:     }",
          "3548:     else",
          "3549:     {",
          "3550:         new_rec->domain = NULL;",
          "3551:     }",
          "3553:     if (old_rec->identity)",
          "3554:     {",
          "3555:         new_rec->identity = g_strdup(old_rec->identity);",
          "3556:     }",
          "3557:     else",
          "3558:     {",
          "3559:         new_rec->identity = NULL;",
          "3560:     }",
          "3562:     if (old_rec->secret)",
          "3563:     {",
          "3564:         new_rec->secret = g_strdup(old_rec->secret);",
          "3565:     }",
          "3566:     else",
          "3567:     {",
          "3568:         new_rec->secret = NULL;",
          "3569:     }",
          "3571:     return new_rec;",
          "3572: }",
          "3574: static void identsecret_list_free_cb(void *r)",
          "3575: {",
          "3576:     identsecret_field_t *rec = (identsecret_field_t *)r;",
          "3578:     if (rec->domain)",
          "3579:         g_free(rec->domain);",
          "3580:     if (rec->identity)",
          "3581:         g_free(rec->identity);",
          "3582:     if (rec->secret)",
          "3583:         g_free(rec->secret);",
          "3584: }",
          "3586: static void init_addr_port_tables(void);",
          "3592: static GHashTable *addr_port_to_id = NULL;",
          "3594: typedef struct _addr_port_key",
          "3595: {",
          "3596:     address addr;",
          "3597:     guint16 port;",
          "3598: } addr_port_key;",
          "3600: static guint addr_port_key_hash_fn(gconstpointer key)",
          "3601: {",
          "3602:     const addr_port_key *addr_key = (const addr_port_key *)key;",
          "3603:     guint result = 0;",
          "3604:     guint port_as_int = addr_key->port;",
          "3605:     guint type_as_int = addr_key->addr.type;",
          "3607:     result += g_int_hash(&port_as_int);",
          "3608:     result += g_int_hash(&type_as_int);",
          "3610:     {",
          "3611:         guint hash = 5381;",
          "3612:         const guint8 *str = (const guint8 *)addr_key->addr.data;",
          "3613:         guint8 i;",
          "3615:         for (i = 0; i < addr_key->addr.len; i++)",
          "3618:         result += hash;",
          "3619:     }",
          "3621:     return result;",
          "3622: }",
          "3624: static gboolean addr_port_key_equal_fn(gconstpointer key1, gconstpointer key2)",
          "3625: {",
          "3626:     const addr_port_key *addr_key_ptr1 = (const addr_port_key *)key1;",
          "3627:     const addr_port_key *addr_key_ptr2 = (const addr_port_key *)key2;",
          "3629:     if (addr_key_ptr1->port != addr_key_ptr2->port)",
          "3630:         return FALSE;",
          "3632:     return addresses_equal(&addr_key_ptr1->addr, &addr_key_ptr2->addr);",
          "3633: }",
          "3635: static void addr_port_key_free_fn(gpointer key)",
          "3636: {",
          "3637:     addr_port_key *addr_port = (addr_port_key *)key;",
          "3638:     g_free(addr_port->addr.priv);",
          "3639:     g_free(addr_port);",
          "3640: }",
          "3642: static void init_addr_port_tables(void)",
          "3643: {",
          "3647:     if (addr_port_to_id != NULL)",
          "3648:     {",
          "3650:         g_hash_table_destroy(addr_port_to_id);",
          "3651:         addr_port_to_id = NULL;",
          "3652:     }",
          "3655:     addr_port_to_id = g_hash_table_new_full(addr_port_key_hash_fn, addr_port_key_equal_fn, addr_port_key_free_fn, NULL);",
          "3656: }",
          "3658: static guint next_addr_port_id = 1;",
          "3660: #define EP_COPY_ADDRESS(to, from) { \\",
          "3661:     guint8 *EP_COPY_ADDRESS_data; \\",
          "3662:     (to)->type = (from)->type; \\",
          "3663:     (to)->len = (from)->len; \\",
          "3664:     EP_COPY_ADDRESS_data = (guint8*) wmem_alloc(wmem_packet_scope(),(from)->len); \\",
          "3665:     memcpy(EP_COPY_ADDRESS_data, (from)->data, (from)->len); \\",
          "3666:     (to)->priv = EP_COPY_ADDRESS_data; \\",
          "3667:     (to)->data = (to)->priv; \\",
          "3668:     }",
          "3672: static guint assign_addr_port_id(address *addr, guint16 port)",
          "3673: {",
          "3674:     addr_port_key lookup_key;",
          "3675:     addr_port_key *key;",
          "3676:     guint value;",
          "3680:     EP_COPY_ADDRESS(&lookup_key.addr, addr);",
          "3681:     lookup_key.port = port;",
          "3683:     value = GPOINTER_TO_UINT(g_hash_table_lookup(addr_port_to_id, &lookup_key));",
          "3684:     if (value)",
          "3685:     {",
          "3687:         return value;",
          "3688:     }",
          "3691:     key = g_new0(addr_port_key, 1);",
          "3692:     copy_address(&key->addr, addr);",
          "3693:     key->port = port;",
          "3696:     g_hash_table_insert(addr_port_to_id, key, GUINT_TO_POINTER(next_addr_port_id));",
          "3697:     return next_addr_port_id++;",
          "3698: }",
          "3702: static gboolean identsecret_chk_cb(void *r _U_, const char *p _U_, unsigned len _U_, const void *u1 _U_, const void *u2 _U_, char **err _U_)",
          "3703: {",
          "3704: #if 0",
          "3705:     gchar** protos;",
          "3706:     gchar* line = ep_strndup(p, len);",
          "3707:     guint num_protos, i;",
          "3709:     g_strstrip(line);",
          "3710:     ascii_strdown_inplace(line);",
          "3712:     protos = ep_strsplit(line, \":\", 0);",
          "3714:     for (num_protos = 0; protos[num_protos]; num_protos++)",
          "3715:     g_strstrip(protos[num_protos]);",
          "3717:     if (!num_protos)",
          "3718:     {",
          "3720:         return FALSE;",
          "3721:     }",
          "3723:     for (i = 0; i < num_protos; i++)",
          "3724:     {",
          "3725:         if (!find_dissector(protos[i]))",
          "3726:         {",
          "3728:             return FALSE;",
          "3729:         }",
          "3730:     }",
          "3731: #endif",
          "3732:     return TRUE;",
          "3733: }",
          "3737: static guint8 count_hex_bytes(gchar *str)",
          "3738: {",
          "3739:     guint8 total = 0;",
          "3741:     while (str != NULL && *str != '\\0' && *str != '#')",
          "3742:     {",
          "3743:         if (!g_ascii_isxdigit(*str))",
          "3744:         {",
          "3745:             str += 1;",
          "3746:             continue;",
          "3747:         }",
          "3749:         if (!g_ascii_isxdigit(str[1]))",
          "3750:             return 0;",
          "3752:         total += 1;",
          "3753:         str += 2;",
          "3754:     }",
          "3756:     return total;",
          "3757: }",
          "3759: static void parse_hex_string(gchar *str, guint8 **ptr, guint8 *len)",
          "3760: {",
          "3761:     guint8 j = 0;",
          "3765:     while (j < *len)",
          "3766:     {",
          "3767:         int high, low;",
          "3769:         if (!g_ascii_isxdigit(*str))",
          "3770:         {",
          "3771:             str += 1;",
          "3772:             continue;",
          "3773:         }",
          "3775:         high = ws_xton(str[0]);",
          "3776:         low = ws_xton(str[1]);",
          "3777:         (*ptr)[j++] = (high << 4) | low;",
          "3778:         str += 2;",
          "3779:     }",
          "3780: }",
          "3784: static const guint8 OALString_HexChar[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };",
          "3786: #define IS_PRINTABLE(c)         ( ((guint8)c) >= 32U && ((guint8)c) < 127U )",
          "3787: #define IS_ESCAPED(c)           ( (c) == '(' || (c) == ')' || (c) == '[' || (c) == ']' || (c) == '{' || (c) == '}' || (c) == '\\\\' || (c) == '|' )",
          "3788: #define DOFOBJECTID_MAX_CLASS_SIZE (4)",
          "3789: #define MAX_OID_DATA_SIZE                 (63)",
          "3790: #define OID_DATA_LEN_MASK                 (MAX_OID_DATA_SIZE)",
          "3792: #define ObjectID_DataToStringLength( data, dataSize ) ObjectID_DataToString( (data), (dataSize), NULL )",
          "3793: #define OALString_HexDigitToChar(c)     (OALString_HexChar[(c)])",
          "3794: #define DOFObjectIDAttribute_IsValid( attribute ) ((attribute).id < DOFOBJECTIDATTRIBUTE_INVALID)",
          "3795: #define DOFOBJECTID_HEADER_SIZE     (offsetof( DOFObjectID_t, oid ))",
          "3796: #define DOFObjectIDAttribute_GetValueSize( attribute ) ((attribute).dataSize)",
          "3797: #define DOFObjectIDAttribute_GetValue( attribute ) ((attribute).data)",
          "3798: #define DOFObjectIDAttribute_GetType( attribute ) ((DOFObjectIDAttributeType)(attribute).id)",
          "3800: typedef enum DOFObjectIDAttributeID_t",
          "3801: {",
          "3807:     DOFOBJECTIDATTRIBUTE_PROVIDER = 0,",
          "3813:     DOFOBJECTIDATTRIBUTE_SESSION = 1,",
          "3821:     DOFOBJECTIDATTRIBUTE_GROUP = 2,",
          "3826:     DOFOBJECTIDATTRIBUTE_INVALID = 128",
          "3827: } DOFObjectIDAttributeType;",
          "3828: typedef guint32                        DOFObjectIDClass;",
          "3830: typedef struct DOFObjectID_t",
          "3831: {",
          "3832:     guint32 refCount;",
          "3835: } DOFObjectID_t;",
          "3837: typedef DOFObjectID_t *DOFObjectID;",
          "3839: typedef guint8                         DOFObjectIDAttributeDataSize;",
          "3841: typedef struct DOFObjectIDAttribute_t",
          "3842: {",
          "3846: } DOFObjectIDAttribute;",
          "3848: static guint32 OALMarshal_UncompressValue(guint8 maxSize, guint32 *bufLength, const guint8 *buffer)",
          "3849: {",
          "3850:     guint32 value = 0;",
          "3851:     guint8 used = 0;",
          "3852:     guint8 size = maxSize;",
          "3853:     guint8 mask;",
          "3855:     switch (buffer[0] >> 6)",
          "3856:     {",
          "3857:     case 0x02:",
          "3859:         if (maxSize > 2)",
          "3860:             mask = 0x3F;",
          "3861:         else",
          "3862:             mask = 0x7F;",
          "3863:         size = 2;",
          "3864:         break;",
          "3866:     case 0x03:",
          "3868:         if (maxSize > 2)",
          "3869:             mask = 0x3F;",
          "3870:         else",
          "3871:             mask = 0x7F;",
          "3872:         break;",
          "3874:     default:",
          "3876:         size = 1;",
          "3877:         mask = 0x7F;",
          "3878:         break;",
          "3879:     }",
          "3881:     value = buffer[used++] & mask;",
          "3882:     while (used < size)",
          "3883:         value = (value << 8) | buffer[used++];",
          "3886:     return (value);",
          "3887: }",
          "3889: static guint32 DOFObjectID_GetClassSize_Bytes(const guint8 *pBytes)",
          "3890: {",
          "3891:     guint32 size = 4;",
          "3893:     (void)OALMarshal_UncompressValue(DOFOBJECTID_MAX_CLASS_SIZE, &size, pBytes);",
          "3895:     return size;",
          "3896: }",
          "3898: static guint32 DOFObjectID_GetClassSize(DOFObjectID self)",
          "3899: {",
          "3900:     return DOFObjectID_GetClassSize_Bytes(self->oid);",
          "3901: }",
          "3903: static guint32 DOFObjectID_GetDataSize(const DOFObjectID self)",
          "3904: {",
          "3905:     return ((*((const guint8 *)self->oid + DOFObjectID_GetClassSize(self))) & OID_DATA_LEN_MASK);",
          "3906: }",
          "3908: static guint32 ObjectID_DataToString(const guint8 *data, guint32 dataSize, char *pBuf)",
          "3909: {",
          "3910:     guint32 len = 0, i, nonprintable, escaped;",
          "3913:     for (i = 0, nonprintable = 0, escaped = 0; i < dataSize; i++)",
          "3914:     {",
          "3915:         if (!IS_PRINTABLE(data[i]))",
          "3916:             nonprintable++;",
          "3917:         else if (IS_ESCAPED(data[i]))",
          "3918:             escaped++;",
          "3919:     }",
          "3920:     if (nonprintable == 0)",
          "3921:     {",
          "3923:         if (pBuf)",
          "3924:         {",
          "3925:             for (i = 0; i < dataSize; i++)",
          "3926:             {",
          "3927:                 if (IS_ESCAPED(data[i]))",
          "3928:                 {",
          "3929:                     pBuf[len++] = '\\\\';",
          "3930:                     pBuf[len++] = data[i];",
          "3931:                 }",
          "3932:                 else",
          "3933:                     pBuf[len++] = data[i];",
          "3934:             }",
          "3935:         }",
          "3936:         else",
          "3937:         {",
          "3939:         }",
          "3940:     }",
          "3941:     else",
          "3942:     {",
          "3944:         if (pBuf)",
          "3945:         {",
          "3946:             pBuf[len++] = '{';",
          "3947:             for (i = 0; i < dataSize; i++)",
          "3948:             {",
          "3949:                 pBuf[len++] = OALString_HexDigitToChar((data[i] >> 4) & 0x0F);",
          "3950:                 pBuf[len++] = OALString_HexDigitToChar((data[i]) & 0x0F);",
          "3951:             }",
          "3952:             pBuf[len++] = '}';",
          "3953:         }",
          "3954:         else",
          "3955:         {",
          "3956:             len = dataSize * 2 + 2;",
          "3957:         }",
          "3958:     }",
          "3959:     return len;",
          "3960: }",
          "3962: static const guint8* DOFObjectID_GetData(const DOFObjectID self)",
          "3963: {",
          "3964:     if (DOFObjectID_GetDataSize(self) > 0)",
          "3967:     return NULL;",
          "3968: }",
          "3970: static guint32 DOFObjectID_GetIDClass(const DOFObjectID self)",
          "3971: {",
          "3972:     guint32 size = 4;",
          "3974:     return OALMarshal_UncompressValue(DOFOBJECTID_MAX_CLASS_SIZE, &size, self->oid);",
          "3975: }",
          "3977: static gboolean DOFObjectID_HasAttributes(const DOFObjectID self)",
          "3978: {",
          "3979:     if (!self)",
          "3980:         return FALSE;",
          "3983:     return (gboolean)(((*(const guint8 *)((const guint8 *)(self->oid) + DOFObjectID_GetClassSize(self))) & 0x80) != 0);",
          "3984: }",
          "3986: static guint8 DOFObjectID_GetBaseSize(const DOFObjectID oid)",
          "3987: {",
          "3988:     return DOFObjectID_GetClassSize(oid) + 1 + DOFObjectID_GetDataSize(oid);",
          "3989: }",
          "3991: static guint8 DOFObjectID_GetAttributeCount(const DOFObjectID self)",
          "3992: {",
          "3993:     guint8 retVal = 0;",
          "3996:     if (self && DOFObjectID_HasAttributes(self))",
          "3997:     {",
          "3998:         const guint8 *pNextAttribute = (const guint8 *)self->oid + DOFObjectID_GetBaseSize(self);",
          "4000:         ++retVal;",
          "4002:         {",
          "4003:             ++retVal;",
          "4005:         }",
          "4006:     }",
          "4008:     return retVal;",
          "4009: }",
          "4011: static DOFObjectIDAttribute DOFObjectID_GetAttributeAtIndex(const DOFObjectID self, guint8 attribute_index)",
          "4012: {",
          "4013:     DOFObjectIDAttribute retAttributeDescriptor = { DOFOBJECTIDATTRIBUTE_INVALID, 0, NULL };",
          "4016:     if (self && attribute_index < DOFOBJECTIDATTRIBUTE_INVALID)",
          "4017:     {",
          "4018:         if (DOFObjectID_HasAttributes(self))",
          "4019:         {",
          "4020:             guint8         count = 0;",
          "4021:             const guint8 *pNextAttribute = (const guint8 *)self->oid + DOFObjectID_GetBaseSize(self);",
          "4024:             {",
          "4025:                 if (attribute_index == count++)",
          "4026:                 {",
          "4027:                     retAttributeDescriptor.id = *pNextAttribute & 0x7F;",
          "4028:                     retAttributeDescriptor.dataSize = (DOFObjectIDAttributeDataSize) * ((const guint8 *)pNextAttribute + 1);",
          "4031:                 }",
          "4032:                 if (!(*pNextAttribute & 0x80))",
          "4034:                 pNextAttribute += (2 + *((const guint8 *)pNextAttribute + 1));",
          "4035:             }",
          "4036:         }",
          "4037:     }",
          "4039:     return retAttributeDescriptor;",
          "4040: }",
          "4042: static void DOFObjectID_Destroy(DOFObjectID self _U_)",
          "4043: {",
          "4045: }",
          "4047: static void DOFObjectID_InitStruct(DOFObjectID newObjID, guint32 dataLen)",
          "4048: {",
          "4049:     newObjID->refCount = 1;",
          "4050:     newObjID->len = dataLen;",
          "4051: }",
          "4053: static DOFObjectID DOFObjectID_Create_Unmarshal(guint32 *length, const guint8 *buffer)",
          "4054: {",
          "4055:     guint32  len = *length;",
          "4058:     if (buffer && len >= 2)",
          "4059:     {",
          "4060:         guint32 classSize = len;",
          "4061:         guint32 classv = OALMarshal_UncompressValue(DOFOBJECTID_MAX_CLASS_SIZE, &classSize, buffer);",
          "4064:         if (1)",
          "4065:         {",
          "4066:             guint32 computedSize;",
          "4071:             if (len >= computedSize)",
          "4072:             {",
          "4073:                 guint8 lenByte = buffer[classSize];",
          "4076:                 if (!(lenByte & 0x40))",
          "4077:                 {",
          "4078:                     gboolean hasAttr;",
          "4079:                     guint8   dataLen = lenByte & OID_DATA_LEN_MASK;",
          "4082:                     if ((classv == 0) && (dataLen > 0))",
          "4083:                         goto notvalid;",
          "4084:                     computedSize += dataLen;",
          "4086:                     while (hasAttr)",
          "4087:                     {",
          "4090:                         {",
          "4092:                             computedSize += (2 + buffer[computedSize + 1]);",
          "4093:                         }",
          "4094:                         else",
          "4095:                             goto notvalid;",
          "4096:                     }",
          "4098:                     if (len >= computedSize)",
          "4099:                     {",
          "4100:                         DOFObjectID newObjID = (DOFObjectID)wmem_alloc0(wmem_packet_scope(), DOFOBJECTID_HEADER_SIZE + computedSize + 1);",
          "4104:                         if (newObjID)",
          "4105:                         {",
          "4106:                             DOFObjectID_InitStruct(newObjID, computedSize);",
          "4107:                             memcpy(newObjID->oid, buffer, computedSize);",
          "4108:                             newObjID->oid[computedSize] = 0;",
          "4110:                         }",
          "4112:                         goto allocErrorOut;",
          "4113:                     }",
          "4114:                 }",
          "4115:             }",
          "4116:         }",
          "4117:     }",
          "4118: notvalid:",
          "4121: allocErrorOut :",
          "4124:     return NULL;",
          "4125: }",
          "4127: static DOFObjectID DOFObjectID_Create_Bytes(guint32 bufferSize, const guint8 *pOIDBuffer)",
          "4128: {",
          "4129:     guint32      len = bufferSize;",
          "4130:     DOFObjectID rval = DOFObjectID_Create_Unmarshal(&len, pOIDBuffer);",
          "4132:     if (rval)",
          "4133:     {",
          "4134:         if (len != bufferSize)",
          "4135:         {",
          "4136:             DOFObjectID_Destroy(rval);",
          "4137:             rval = NULL;",
          "4138:         }",
          "4139:     }",
          "4140:     return rval;",
          "4141: }",
          "4143: static guint32 ObjectID_ToStringLength(const DOFObjectID oid)",
          "4144: {",
          "4145:     guint32 len = 0;",
          "4148:     len = 7 /* [{xx}: and trailing ] */ + ObjectID_DataToStringLength(DOFObjectID_GetData(oid),",
          "4149:                                                                       DOFObjectID_GetDataSize(oid));",
          "4150:     if (DOFObjectID_GetIDClass(oid) & 0xFF000000)",
          "4152:     else if (DOFObjectID_GetIDClass(oid) & 0xFF0000)",
          "4154:     else if (DOFObjectID_GetIDClass(oid) & 0xFF00)",
          "4157:     if (DOFObjectID_HasAttributes(oid))",
          "4158:     {",
          "4160:         guint8 attributeCount = DOFObjectID_GetAttributeCount(oid);",
          "4163:         for (i = 0; i < attributeCount; i++)",
          "4164:         {",
          "4165:             DOFObjectID embedOID;",
          "4166:             DOFObjectIDAttribute avpDescriptor = DOFObjectID_GetAttributeAtIndex(oid, i);",
          "4168:             if (!DOFObjectIDAttribute_IsValid(avpDescriptor))",
          "4171:             if (i)",
          "4172:                 len++;",
          "4175:             embedOID = DOFObjectID_Create_Bytes(DOFObjectIDAttribute_GetValueSize(avpDescriptor),",
          "4176:                                                 DOFObjectIDAttribute_GetValue(avpDescriptor));",
          "4177:             if (embedOID)",
          "4178:             {",
          "4180:                 DOFObjectID_Destroy(embedOID);",
          "4181:             }",
          "4182:             else",
          "4183:             {",
          "4185:                 len += ObjectID_DataToStringLength(DOFObjectIDAttribute_GetValue(avpDescriptor),",
          "4186:                                                    DOFObjectIDAttribute_GetValueSize(avpDescriptor));",
          "4187:             }",
          "4189:     }",
          "4191:     return len;",
          "4192: }",
          "4194: static guint32 InterfaceID_ToString(const guint8 *iid, char *pBuf)",
          "4195: {",
          "4196:     guint32           len = 0;",
          "4197:     guint iid_len = iid[0] & 0x03;",
          "4198:     guint i;",
          "4200:     if (iid_len == 3)",
          "4201:         iid_len = 4;",
          "4203:     pBuf[len++] = '[';",
          "4204:     pBuf[len++] = '{';",
          "4206:     pBuf[len++] = OALString_HexDigitToChar((iid[0] >> 6) & 0x0F);",
          "4207:     pBuf[len++] = OALString_HexDigitToChar((iid[0] >> 2) & 0x0F);",
          "4209:     pBuf[len++] = '}';",
          "4210:     pBuf[len++] = ':';",
          "4211:     pBuf[len++] = '{';",
          "4214:     for (i = 0; i < iid_len; i++)",
          "4215:     {",
          "4216:         pBuf[len++] = OALString_HexDigitToChar((iid[i + 1] >> 4) & 0x0F);",
          "4217:         pBuf[len++] = OALString_HexDigitToChar(iid[i + 1] & 0x0F);",
          "4218:     }",
          "4220:     pBuf[len++] = '}';",
          "4221:     pBuf[len++] = ']';",
          "4223:     return len;",
          "4224: }",
          "4226: static guint32 ObjectID_ToString(const DOFObjectID oid, char *pBuf)",
          "4227: {",
          "4228:     DOFObjectIDClass oidClass;",
          "4229:     guint32           len = 0;",
          "4231:     pBuf[len++] = '[';",
          "4232:     pBuf[len++] = '{';",
          "4234:     oidClass = DOFObjectID_GetIDClass(oid);",
          "4235:     if (oidClass & 0xFF000000)",
          "4236:     {",
          "4237:         pBuf[len++] = OALString_HexDigitToChar((oidClass >> 28) & 0x0F);",
          "4238:         pBuf[len++] = OALString_HexDigitToChar((oidClass >> 24) & 0x0F);",
          "4239:     }",
          "4240:     if (oidClass & 0xFFFF0000)",
          "4241:     {",
          "4242:         pBuf[len++] = OALString_HexDigitToChar((oidClass >> 20) & 0x0F);",
          "4243:         pBuf[len++] = OALString_HexDigitToChar((oidClass >> 16) & 0x0F);",
          "4244:     }",
          "4245:     if (oidClass & 0xFFFFFF00)",
          "4246:     {",
          "4247:         pBuf[len++] = OALString_HexDigitToChar((oidClass >> 12) & 0x0F);",
          "4248:         pBuf[len++] = OALString_HexDigitToChar((oidClass >> 8) & 0x0F);",
          "4249:     }",
          "4250:     pBuf[len++] = OALString_HexDigitToChar((oidClass >> 4) & 0x0F);",
          "4251:     pBuf[len++] = OALString_HexDigitToChar((oidClass) & 0x0F);",
          "4252:     pBuf[len++] = '}';",
          "4253:     pBuf[len++] = ':';",
          "4255:     len += ObjectID_DataToString(DOFObjectID_GetData(oid), DOFObjectID_GetDataSize(oid), &pBuf[len]);",
          "4257:     if (DOFObjectID_HasAttributes(oid))",
          "4258:     {",
          "4259:         guint8 i;",
          "4260:         guint8 attributeCount = DOFObjectID_GetAttributeCount(oid);",
          "4262:         pBuf[len++] = '(';",
          "4263:         for (i = 0; i < attributeCount; i++)",
          "4264:         {",
          "4265:             DOFObjectID embedOID;",
          "4266:             DOFObjectIDAttribute avpDescriptor = DOFObjectID_GetAttributeAtIndex(oid, i);",
          "4268:             if (!DOFObjectIDAttribute_IsValid(avpDescriptor))",
          "4271:             if (i)",
          "4272:                 pBuf[len++] = '|';",
          "4273:             pBuf[len++] = '{';",
          "4274:             pBuf[len++] = OALString_HexDigitToChar((DOFObjectIDAttribute_GetType(avpDescriptor) >> 4) & 0x0F);",
          "4275:             pBuf[len++] = OALString_HexDigitToChar((DOFObjectIDAttribute_GetType(avpDescriptor)) & 0x0F);",
          "4276:             pBuf[len++] = '}';",
          "4277:             pBuf[len++] = ':';",
          "4280:             embedOID = DOFObjectID_Create_Bytes(DOFObjectIDAttribute_GetValueSize(avpDescriptor),",
          "4281:                                                 DOFObjectIDAttribute_GetValue(avpDescriptor));",
          "4282:             if (embedOID)",
          "4283:             {",
          "4285:                 DOFObjectID_Destroy(embedOID);",
          "4286:             }",
          "4287:             else",
          "4288:             {",
          "4290:                 len += ObjectID_DataToString(DOFObjectIDAttribute_GetValue(avpDescriptor),",
          "4291:                                              DOFObjectIDAttribute_GetValueSize(avpDescriptor), &pBuf[len]);",
          "4292:             }",
          "4294:         pBuf[len++] = ')';",
          "4295:     }",
          "4296:     pBuf[len++] = ']';",
          "4298:     return len;",
          "4299: }",
          "4301: static const gchar* dof_iid_create_standard_string(guint32 bufferSize, const guint8 *pIIDBuffer)",
          "4302: {",
          "4303:     gchar *pRetval;",
          "4306:     pRetval = (gchar *)wmem_alloc(wmem_packet_scope(), len + 1);",
          "4307:     if (pRetval)",
          "4308:     {",
          "4309:         InterfaceID_ToString(pIIDBuffer, pRetval);",
          "4310:         pRetval[len] = 0;",
          "4311:     }",
          "4313:     return pRetval;",
          "4314: }",
          "4316: static const gchar* dof_oid_create_standard_string(guint32 bufferSize, const guint8 *pOIDBuffer)",
          "4317: {",
          "4318:     DOFObjectID oid;",
          "4319:     gchar *pRetval;",
          "4320:     guint32 len = bufferSize;",
          "4322:     oid = DOFObjectID_Create_Unmarshal(&len, pOIDBuffer);",
          "4323:     if (!oid)",
          "4324:         return \"Illegal OID\";",
          "4326:     len = ObjectID_ToStringLength(oid);",
          "4328:     pRetval = (gchar *)wmem_alloc(wmem_packet_scope(), len + 1);",
          "4329:     if (pRetval)",
          "4330:     {",
          "4331:         ObjectID_ToString(oid, pRetval);",
          "4332:         pRetval[len] = 0;",
          "4333:     }",
          "4335:     return pRetval;",
          "4336: }",
          "4338: struct parseCtx",
          "4339: {",
          "4340:     const char *oid;",
          "4341:     guint8 *buffer;",
          "4342:     guint32 buffLen;",
          "4343:     guint32 oidLen;",
          "4344:     guint32 currOidPos;",
          "4345:     guint32 currBufferPos;",
          "4346: }parseCtx;",
          "4349: #define PARSECTX_PEEK_CHAR_OID(ctx) ( (ctx)->oid[(ctx)->currOidPos] )",
          "4350: #define PARSECTX_PEEK_NEXT_CHAR_OID(ctx) ( (ctx)->oid[(ctx)->currOidPos+1] )",
          "4351: #define PARSECTX_READ_CHAR_OID(ctx) ( (ctx)->oid[(ctx)->currOidPos++] )",
          "4352: #define PARSECTX_GET_CURRENT_POS_OID(ctx) ( (ctx)->oid+(ctx)->currOidPos )",
          "4353: #define PARSECTX_STEP_OID(ctx, count)((ctx)->currOidPos+=(count))",
          "4356: #define PARSECTX_GET_CURRENT_POS_BUF(ctx)( ((ctx)->buffer)? (ctx)->buffer+(ctx)->currBufferPos: NULL )",
          "4357: #define PARSECTX_STEP_BUF(ctx, count)( (ctx)->currBufferPos+=(count))",
          "4358: #define PARSECTX_WRITE_AT_POS_BUF(ctx, pos, value) do{ if((ctx)->buffer) *(pos) = (value); } while(0)",
          "4359: #define PARSECTX_OR_AT_POS_BUF(ctx, pos, value) do{ if((ctx)->buffer) *(pos) |= (value); } while(0)",
          "4360: #define PARSECTX_WRITE_BUF(ctx, value)( ((ctx)->buffer)? (ctx)->buffer[(ctx)->currBufferPos++] = (value): (ctx)->currBufferPos++ )",
          "4361: #define PARSECTX_CHECK_LEN(ctx, len) (((ctx)->buffer)? (((ctx)->currBufferPos+len <= (ctx)->buffLen)? 0: 1): 0)",
          "4364: #define PARSECTX_WRITE_BUF_FROM_OID(ctx) (((ctx)->buffer)? (ctx)->buffer[(ctx)->currBufferPos++] = (ctx)->oid[(ctx)->currOidPos]: ((ctx)->currBufferPos++),((ctx)->currOidPos++))",
          "4366: #define IS_DIGIT(c) (((c) >= '0' && (c) <= '9'))",
          "4367: #define DIGIT2VALUE(c) (c-48)",
          "4369: #define HEX2VALUE(c) ( (IS_DIGIT(c))? DIGIT2VALUE(c) : ((c) >= 'A' && (c) <= 'F')? (c-55): (c-87) )",
          "4370: #define VALIDHEXSEP(c) ( (c) == ' ' || (c) == ':' || (c) == '-' )",
          "4371: #define VALIDHEX(c) ( ((c) >= '0' && (c) <= '9') || ((c) >= 'A' && (c) <= 'F') || ((c) >= 'a' && (c) <= 'f') )",
          "4372: #define VALIDHEXBYTE(s) ( VALIDHEX((s)[0]) && VALIDHEX((s)[1]) )",
          "4373: #define VALIDNUMBER(c) ((c) >= '0' && (c) <= '9')",
          "4375: #define VALIDASCIICHAR(c) (((guint8)c) >= 32 && ((guint8)c) <= 126 )",
          "4377: #define IS_ESCAPED(c) ( (c) == '(' || (c) == ')' || (c) == '[' || (c) == ']' || (c) == '{' || (c) == '}' || (c) == '\\\\' || (c) == '|' )",
          "4379: static guint8 parseFormatOID(struct parseCtx *ctx);",
          "4381: static guint8 parseHexField(struct parseCtx *ctx)",
          "4382: {",
          "4384:     if (PARSECTX_READ_CHAR_OID(ctx) == '{' && PARSECTX_PEEK_CHAR_OID(ctx) != '}')",
          "4385:     {",
          "4386:         while (PARSECTX_PEEK_CHAR_OID(ctx) != '}')",
          "4387:         {",
          "4388:             if (VALIDHEXBYTE(PARSECTX_GET_CURRENT_POS_OID(ctx)))",
          "4389:             {",
          "4390:                 if (PARSECTX_CHECK_LEN(ctx, 1) == 0)",
          "4391:                 {",
          "4392:                     PARSECTX_WRITE_BUF(ctx, HEX2VALUE(PARSECTX_PEEK_CHAR_OID(ctx)) << 4 | HEX2VALUE(PARSECTX_PEEK_NEXT_CHAR_OID(ctx)));",
          "4393:                     PARSECTX_STEP_OID(ctx, 2);",
          "4395:                     if (VALIDHEXSEP(PARSECTX_PEEK_CHAR_OID(ctx)))",
          "4396:                     {",
          "4397:                         if (PARSECTX_PEEK_NEXT_CHAR_OID(ctx) == '}')",
          "4398:                         {",
          "4400:                             return 1;",
          "4401:                         }",
          "4402:                         PARSECTX_STEP_OID(ctx, 1);",
          "4403:                     }",
          "4404:                 }",
          "4405:                 else",
          "4406:                 {",
          "4407:                     return 1;",
          "4408:                 }",
          "4409:             }",
          "4410:             else",
          "4411:             {",
          "4412:                 return 1;",
          "4413:             }",
          "4414:         }",
          "4415:         PARSECTX_STEP_OID(ctx, 1);",
          "4416:         return 0;",
          "4417:     }",
          "4418:     return 1;",
          "4419: }",
          "4421: static guint8 parseStringField(struct parseCtx *ctx)",
          "4422: {",
          "4424:     while (ctx->currOidPos < (ctx->oidLen - 1))",
          "4425:     {",
          "4426:         char curr = PARSECTX_PEEK_CHAR_OID(ctx);",
          "4427:         if (curr == ']' || curr == '(')",
          "4428:         {",
          "4430:         }",
          "4431:         else if (curr == '\\\\')",
          "4432:         {",
          "4434:             PARSECTX_STEP_OID(ctx, 1);",
          "4435:             if (!IS_ESCAPED(PARSECTX_PEEK_CHAR_OID(ctx)) || PARSECTX_CHECK_LEN(ctx, 1) != 0)",
          "4436:                 return 1;",
          "4437:             PARSECTX_WRITE_BUF_FROM_OID(ctx);",
          "4438:         }",
          "4439:         else",
          "4440:         {",
          "4441:             if (VALIDASCIICHAR(curr) && PARSECTX_CHECK_LEN(ctx, 1) == 0)",
          "4442:                 PARSECTX_WRITE_BUF_FROM_OID(ctx);",
          "4443:             else",
          "4444:                 return 1;",
          "4445:         }",
          "4446:     }",
          "4447:     return 0;",
          "4448: }",
          "4450: static guint8 OALMarshal_GetCompressedValueSize(guint8 maxSize, guint32 value)",
          "4451: {",
          "4452:     guint8 lenbytes = (1 + (value > 0x7F) + (value > 0x3FFF));",
          "4453:     if (lenbytes > 2)",
          "4454:         return (maxSize);",
          "4455:     return (lenbytes);",
          "4456: }",
          "4458: static guint32 OALMarshal_CompressValue(guint8 maxSize, guint32 value, guint32 bufLength, guint8 *buffer)",
          "4459: {",
          "4460:     guint8 lenSize = OALMarshal_GetCompressedValueSize(maxSize, value);",
          "4462:     if (bufLength < lenSize)",
          "4463:         return 0;",
          "4464:     switch (lenSize)",
          "4465:     {",
          "4466:     case 4:",
          "4471:         break;",
          "4473:     case 3:",
          "4477:         break;",
          "4479:     case 2:",
          "4480:         if (maxSize == 2)",
          "4481:         {",
          "4483:         }",
          "4484:         else",
          "4485:         {",
          "4487:         }",
          "4489:         break;",
          "4491:     case 1:",
          "4493:         break;",
          "4495:     default:",
          "4497:         break;",
          "4498:     }",
          "4499:     return (lenSize);",
          "4500: }",
          "4502: static guint8 parseOIDClass(struct parseCtx *ctx)",
          "4503: {",
          "4504:     if (PARSECTX_PEEK_CHAR_OID(ctx) == '{' && PARSECTX_PEEK_NEXT_CHAR_OID(ctx) != '}')",
          "4505:     {",
          "4507:         guint8 classSize = 0;",
          "4508:         guint32 oidClass = 0;",
          "4509:         PARSECTX_STEP_OID(ctx, 1);",
          "4510:         while (PARSECTX_PEEK_CHAR_OID(ctx) != '}')",
          "4511:         {",
          "4512:             if (VALIDHEXBYTE(PARSECTX_GET_CURRENT_POS_OID(ctx)))",
          "4513:             {",
          "4514:                 oidClass <<= 8;",
          "4515:                 oidClass += (HEX2VALUE(PARSECTX_PEEK_CHAR_OID(ctx)) << 4 | HEX2VALUE(PARSECTX_PEEK_NEXT_CHAR_OID(ctx)));",
          "4516:                 PARSECTX_STEP_OID(ctx, 2);",
          "4518:                 if (VALIDHEXSEP(PARSECTX_PEEK_CHAR_OID(ctx)))",
          "4519:                 {",
          "4520:                     if (PARSECTX_PEEK_NEXT_CHAR_OID(ctx) == '}')",
          "4521:                     {",
          "4523:                         return 1;",
          "4524:                     }",
          "4525:                     PARSECTX_STEP_OID(ctx, 1);",
          "4526:                 }",
          "4527:             }",
          "4528:             else",
          "4529:             {",
          "4530:                 return 1;",
          "4531:             }",
          "4532:         }",
          "4533:         PARSECTX_STEP_OID(ctx, 1);",
          "4535:         classSize = OALMarshal_GetCompressedValueSize(4, oidClass);",
          "4536:         if (PARSECTX_CHECK_LEN(ctx, classSize) == 0)",
          "4537:         {",
          "4538:             if (PARSECTX_GET_CURRENT_POS_BUF(ctx))",
          "4539:                 classSize = OALMarshal_CompressValue(4, oidClass, classSize, PARSECTX_GET_CURRENT_POS_BUF(ctx));",
          "4541:             PARSECTX_STEP_BUF(ctx, classSize);",
          "4542:         }",
          "4544:         return 0;",
          "4545:     }",
          "4546:     else",
          "4547:     {",
          "4549:         guint8 classSize = 0;",
          "4550:         guint32 oidClass = 0;",
          "4551:         while (IS_DIGIT(PARSECTX_PEEK_CHAR_OID(ctx)))",
          "4552:         {",
          "4553:             oidClass *= 10;",
          "4554:             oidClass += DIGIT2VALUE(PARSECTX_PEEK_CHAR_OID(ctx));",
          "4555:             PARSECTX_STEP_OID(ctx, 1);",
          "4556:         }",
          "4558:         classSize = OALMarshal_GetCompressedValueSize(4, oidClass);",
          "4559:         if (PARSECTX_CHECK_LEN(ctx, classSize) == 0)",
          "4560:         {",
          "4561:             if (PARSECTX_GET_CURRENT_POS_BUF(ctx))",
          "4562:                 classSize = OALMarshal_CompressValue(4, oidClass, classSize, PARSECTX_GET_CURRENT_POS_BUF(ctx));",
          "4564:             PARSECTX_STEP_BUF(ctx, classSize);",
          "4565:         }",
          "4567:         return 0;",
          "4568:     }",
          "4569: }",
          "4571: static guint8 parseAttributeID(struct parseCtx *ctx)",
          "4572: {",
          "4573:     if (PARSECTX_PEEK_CHAR_OID(ctx) == '{')",
          "4574:     {",
          "4575:         return parseHexField(ctx);",
          "4576:     }",
          "4577:     else",
          "4578:     {",
          "4579:         guint8 avpid = 0;",
          "4580:         while (IS_DIGIT(PARSECTX_PEEK_CHAR_OID(ctx)))",
          "4581:         {",
          "4582:             avpid *= 10;",
          "4583:             avpid += DIGIT2VALUE(PARSECTX_PEEK_CHAR_OID(ctx));",
          "4584:             PARSECTX_STEP_OID(ctx, 1);",
          "4585:         }",
          "4587:         if (PARSECTX_CHECK_LEN(ctx, 1) == 0)",
          "4588:         {",
          "4589:             PARSECTX_WRITE_BUF(ctx, avpid);",
          "4590:             return 0;",
          "4591:         }",
          "4592:     }",
          "4593:     return 1;",
          "4594: }",
          "4596: static guint8 parseAttributeData(struct parseCtx *ctx)",
          "4597: {",
          "4598:     if (PARSECTX_PEEK_CHAR_OID(ctx) == '[')",
          "4599:     {",
          "4600:         return parseFormatOID(ctx);",
          "4601:     }",
          "4602:     else if (PARSECTX_PEEK_CHAR_OID(ctx) == '{')",
          "4603:     {",
          "4604:         return parseHexField(ctx);",
          "4605:     }",
          "4606:     else",
          "4607:     {",
          "4608:         return parseStringField(ctx);",
          "4609:     }",
          "4610: }",
          "4612: static guint8 parseAttribute(struct parseCtx *ctx)",
          "4613: {",
          "4614:     if (parseAttributeID(ctx) == 0)",
          "4615:     {",
          "4617:         if (PARSECTX_READ_CHAR_OID(ctx) == ':' && PARSECTX_CHECK_LEN(ctx, 1) == 0)",
          "4618:         {",
          "4619:             guint8 *length = PARSECTX_GET_CURRENT_POS_BUF(ctx);",
          "4620:             if (length == NULL)",
          "4621:                 return 0;",
          "4623:             PARSECTX_STEP_BUF(ctx, 1);",
          "4625:             if (parseAttributeData(ctx) == 0)",
          "4626:             {",
          "4627:                 PARSECTX_WRITE_AT_POS_BUF(ctx, length, (guint8)(PARSECTX_GET_CURRENT_POS_BUF(ctx) - (length + 1)));",
          "4628:                 return 0;",
          "4629:             }",
          "4630:         }",
          "4631:     }",
          "4632:     return 1;",
          "4633: }",
          "4635: static guint8 parseAttributes(struct parseCtx *ctx)",
          "4636: {",
          "4638:     if (PARSECTX_READ_CHAR_OID(ctx) == '(' &&  PARSECTX_PEEK_CHAR_OID(ctx) != ')')",
          "4639:     {",
          "4640:         while (PARSECTX_PEEK_CHAR_OID(ctx) != ')')",
          "4641:         {",
          "4642:             guint8 *avpID = PARSECTX_GET_CURRENT_POS_BUF(ctx);",
          "4643:             if (avpID == NULL)",
          "4644:                 return 0;",
          "4646:             if (parseAttribute(ctx) != 0)",
          "4647:                 return 1;",
          "4650:             if (PARSECTX_PEEK_CHAR_OID(ctx) == '|' && PARSECTX_PEEK_NEXT_CHAR_OID(ctx) != ')')",
          "4651:             {",
          "4653:                 PARSECTX_STEP_OID(ctx, 1);",
          "4654:             }",
          "4655:         }",
          "4656:         PARSECTX_STEP_OID(ctx, 1);",
          "4657:         return 0;",
          "4658:     }",
          "4659:     return 1;",
          "4660: }",
          "4662: static guint8 parseFormatOID(struct parseCtx *ctx)",
          "4663: {",
          "4665:     if (PARSECTX_PEEK_CHAR_OID(ctx) == '[')",
          "4666:     {",
          "4667:         PARSECTX_STEP_OID(ctx, 1);",
          "4669:         if (parseOIDClass(ctx) == 0)",
          "4670:         {",
          "4672:             if (PARSECTX_READ_CHAR_OID(ctx) == ':' && PARSECTX_CHECK_LEN(ctx, 1) == 0)",
          "4673:             {",
          "4674:                 guint8 *length = PARSECTX_GET_CURRENT_POS_BUF(ctx);",
          "4675:                 PARSECTX_STEP_BUF(ctx, 1);",
          "4678:                 if (PARSECTX_PEEK_CHAR_OID(ctx) == '{')",
          "4679:                 {",
          "4681:                     if (parseHexField(ctx) != 0)",
          "4682:                         return 1;",
          "4683:                 }",
          "4684:                 else",
          "4685:                 {",
          "4687:                     if (parseStringField(ctx) != 0)",
          "4688:                         return 1;",
          "4689:                 }",
          "4692:                 if (length == NULL)",
          "4693:                     return 0;",
          "4694:                 PARSECTX_WRITE_AT_POS_BUF(ctx, length, (guint8)(PARSECTX_GET_CURRENT_POS_BUF(ctx) - (length + 1)));",
          "4697:                 if (PARSECTX_PEEK_CHAR_OID(ctx) == '(')",
          "4698:                 {",
          "4700:                     if (parseAttributes(ctx) != 0)",
          "4701:                         return 1;",
          "4702:                 }",
          "4705:                 if (PARSECTX_READ_CHAR_OID(ctx) == ']')",
          "4706:                 {",
          "4707:                     return 0;",
          "4708:                 }",
          "4709:             }",
          "4710:         }",
          "4711:     }",
          "4712:     return 1;",
          "4713: }",
          "4715: static guint8 dof_oid_create_internal(const char *oid, guint32 *size, guint8 *buffer)",
          "4716: {",
          "4717:     struct parseCtx ctx;",
          "4719:     ctx.oid = oid;",
          "4720:     ctx.buffer = buffer;",
          "4721:     ctx.currOidPos = 0;",
          "4722:     ctx.currBufferPos = 0;",
          "4724:     if (oid)",
          "4725:     {",
          "4726:         if (size)",
          "4727:         {",
          "4728:             ctx.buffLen = (*size);",
          "4729:             ctx.oidLen = (guint32)strlen(oid);",
          "4730:             if (PARSECTX_PEEK_CHAR_OID(&ctx) == '[')",
          "4731:             {",
          "4733:                 if (parseFormatOID(&ctx) == 0)",
          "4734:                 {",
          "4735:                     (*size) = ctx.currBufferPos;",
          "4736:                     return 0;",
          "4737:                 }",
          "4738:             }",
          "4739:             else if (PARSECTX_PEEK_CHAR_OID(&ctx) == '{')",
          "4740:             {",
          "4742:                 if (parseHexField(&ctx) == 0)",
          "4743:                 {",
          "4744:                     (*size) = ctx.currBufferPos;",
          "4745:                     return 0;",
          "4746:                 }",
          "4747:             }",
          "4748:             (*size) = 0;",
          "4749:         }",
          "4750:     }",
          "4751:     return 1;",
          "4752: }",
          "4754: static void dof_oid_new_standard_string(const char *data, guint32 *rsize, guint8 **oid)",
          "4755: {",
          "4756:     if (data)",
          "4757:     {",
          "4758:         guint8 err;",
          "4759:         guint32 size = 0;",
          "4762:         err = dof_oid_create_internal(data, &size, NULL);",
          "4764:         if (err == 0)",
          "4765:         {",
          "4769:             if (*oid)",
          "4770:             {",
          "4772:                 err = dof_oid_create_internal(data, &size, *oid);",
          "4774:                 if (err == 0)",
          "4775:                 {",
          "4777:                     return;",
          "4778:                 }",
          "4780:                 g_free(*oid);",
          "4781:             }",
          "4782:         }",
          "4783:     }",
          "4787: }",
          "4797: static gint read_c4(tvbuff_t *tvb, gint offset, guint32 *v, gint *L)",
          "4798: {",
          "4799:     guint32 val = 0;",
          "4800:     guint8 len = 0;",
          "4801:     guint8 b = tvb_get_guint8(tvb, offset++);",
          "4802:     int i;",
          "4804:     if ((b & 0x80) == 0)",
          "4805:     {",
          "4806:         len = 1;",
          "4807:         b = b & 0x7F;",
          "4808:     }",
          "4809:     else if ((b & 0x40) == 0)",
          "4810:     {",
          "4811:         len = 2;",
          "4812:         b = b & 0x3F;",
          "4813:     }",
          "4814:     else",
          "4815:     {",
          "4816:         len = 4;",
          "4817:         b = b & 0x3F;",
          "4818:     }",
          "4820:     val = b;",
          "4821:     for (i = 1; i < len; i++)",
          "4822:         val = (val << 8) | tvb_get_guint8(tvb, offset++);",
          "4824:     if (L)",
          "4826:     if (v)",
          "4828:     return offset;",
          "4829: }",
          "4837: static void validate_c4(packet_info *pinfo _U_, proto_item *pi _U_, guint32 val, gint len)",
          "4838: {",
          "4839:     if (len > 1 && val < 0x80)",
          "4840:     {",
          "4842:         expert_add_info_format(pinfo, pi, &ei_c2_c3_c4_format, \"DOF Violation: Type.3.1: Compressed 32-bit Compression Manditory.\");",
          "4843:     }",
          "4845:     if (len > 2 && val < 0x4000)",
          "4846:     {",
          "4848:         expert_add_info_format(pinfo, pi, &ei_c2_c3_c4_format, \"DOF Violation: Type.3.1: Compressed 32-bit Compression Manditory.\");",
          "4849:     }",
          "4850: }",
          "4859: static gint read_c3(tvbuff_t *tvb, gint offset, guint32 *v, gint *L)",
          "4860: {",
          "4861:     guint32 val = 0;",
          "4862:     guint8 len = 0;",
          "4863:     guint8 b = tvb_get_guint8(tvb, offset++);",
          "4864:     int i;",
          "4866:     if ((b & 0x80) == 0)",
          "4867:     {",
          "4868:         len = 1;",
          "4869:         b = b & 0x7F;",
          "4870:     }",
          "4871:     else if ((b & 0x40) == 0)",
          "4872:     {",
          "4873:         len = 2;",
          "4874:         b = b & 0x3F;",
          "4875:     }",
          "4876:     else",
          "4877:     {",
          "4878:         len = 3;",
          "4879:         b = b & 0x3F;",
          "4880:     }",
          "4882:     val = b;",
          "4883:     for (i = 1; i < len; i++)",
          "4884:         val = (val << 8) | tvb_get_guint8(tvb, offset++);",
          "4886:     if (L)",
          "4888:     if (v)",
          "4890:     return offset;",
          "4891: }",
          "4899: static void validate_c3(packet_info *pinfo _U_, proto_item *pi _U_, guint32 val, gint len)",
          "4900: {",
          "4901:     if (len > 1 && val < 0x80)",
          "4902:     {",
          "4904:         expert_add_info_format(pinfo, pi, &ei_c2_c3_c4_format, \"DOF Violation: Type.2.1: Compressed 24-bit Compression Manditory.\" );",
          "4905:     }",
          "4907:     if (len > 2 && val < 0x4000)",
          "4908:     {",
          "4910:         expert_add_info_format(pinfo, pi, &ei_c2_c3_c4_format, \"DOF Violation: Type.2.1: Compressed 24-bit Compression Manditory.\");",
          "4911:     }",
          "4912: }",
          "4920: static gint read_c2(tvbuff_t *tvb, gint offset, guint16 *v, gint *L)",
          "4921: {",
          "4922:     guint16 val = 0;",
          "4923:     guint8 b = tvb_get_guint8(tvb, offset++);",
          "4924:     if (b & 0x80)",
          "4925:     {",
          "4926:         b = b & 0x7F;",
          "4927:         val = (b << 8) | tvb_get_guint8(tvb, offset++);",
          "4928:         if (L)",
          "4930:     }",
          "4931:     else",
          "4932:     {",
          "4933:         val = b;",
          "4934:         if (L)",
          "4936:     }",
          "4938:     if (v)",
          "4940:     return offset;",
          "4941: }",
          "4949: static void validate_c2(packet_info *pinfo _U_, proto_item *pi _U_, guint16 val, gint len)",
          "4950: {",
          "4951:     if (len > 1 && val < 0x80)",
          "4952:     {",
          "4954:         expert_add_info_format( pinfo, pi, &ei_c2_c3_c4_format, \"DOF Violation: Type.1.1: Compressed 16-bit Compression Manditory.\" );",
          "4955:     }",
          "4956: }",
          "4965: static void assign_sid_id(dof_api_data *api_data)",
          "4966: {",
          "4967:     node_key_to_sid_id_key lookup_key;",
          "4968:     node_key_to_sid_id_key *key;",
          "4969:     dof_session_data *session;",
          "4970:     dof_packet_data *packet;",
          "4971:     guint value;",
          "4975:     if (!api_data || !api_data->packet || !api_data->session)",
          "4976:         return;",
          "4978:     session = api_data->session;",
          "4979:     packet = (dof_packet_data *)api_data->packet;",
          "4983:     if (!packet->sender_sid_id)",
          "4984:     {",
          "4986:         lookup_key.transport_id = api_data->transport_session->transport_id;",
          "4987:         lookup_key.transport_node_id = api_data->transport_packet->sender_id;",
          "4988:         lookup_key.dof_id = session->dof_id;",
          "4989:         lookup_key.dof_node_id = packet->sender_id;",
          "4990:         lookup_key.dof_session_id = session->session_id;",
          "4992:         value = GPOINTER_TO_UINT(g_hash_table_lookup(node_key_to_sid_id, &lookup_key));",
          "4993:         if (value)",
          "4994:         {",
          "4995:             gpointer sid_id_key = GUINT_TO_POINTER(value);",
          "4996:             gpointer sid_buffer;",
          "4999:             packet->sender_sid_id = value;",
          "5002:             sid_buffer = g_hash_table_lookup(sid_id_to_sid_buffer, sid_id_key);",
          "5003:             if (sid_buffer)",
          "5004:             {",
          "5006:                 packet->sender_sid = (dof_2009_1_pdu_19_sid)sid_buffer;",
          "5007:             }",
          "5008:         }",
          "5009:         else",
          "5010:         {",
          "5012:             key = g_new0(node_key_to_sid_id_key, 1);",
          "5013:             memcpy(key, &lookup_key, sizeof(node_key_to_sid_id_key));",
          "5016:             g_hash_table_insert(node_key_to_sid_id, key, GUINT_TO_POINTER(dpp_next_sid_id));",
          "5017:             packet->sender_sid_id = dpp_next_sid_id++;",
          "5018:         }",
          "5019:     }",
          "5022:     if (!packet->receiver_sid_id)",
          "5023:     {",
          "5025:         lookup_key.transport_id = api_data->transport_session->transport_id;",
          "5026:         lookup_key.transport_node_id = api_data->transport_packet->receiver_id;",
          "5027:         lookup_key.dof_id = session->dof_id;",
          "5028:         lookup_key.dof_node_id = packet->receiver_id;",
          "5029:         lookup_key.dof_session_id = session->session_id;",
          "5031:         value = GPOINTER_TO_UINT(g_hash_table_lookup(node_key_to_sid_id, &lookup_key));",
          "5032:         if (value)",
          "5033:         {",
          "5034:             gpointer sid_id_key = GUINT_TO_POINTER(value);",
          "5035:             gpointer sid_buffer;",
          "5038:             packet->receiver_sid_id = value;",
          "5041:             sid_buffer = g_hash_table_lookup(sid_id_to_sid_buffer, sid_id_key);",
          "5042:             if (sid_buffer)",
          "5043:             {",
          "5045:                 packet->receiver_sid = (dof_2009_1_pdu_19_sid)sid_buffer;",
          "5046:             }",
          "5047:         }",
          "5048:         else",
          "5049:         {",
          "5051:             key = g_new0(node_key_to_sid_id_key, 1);",
          "5052:             memcpy(key, &lookup_key, sizeof(node_key_to_sid_id_key));",
          "5055:             g_hash_table_insert(node_key_to_sid_id, key, GUINT_TO_POINTER(dpp_next_sid_id));",
          "5056:             packet->receiver_sid_id = dpp_next_sid_id++;",
          "5057:         }",
          "5058:     }",
          "5060: }",
          "5071: static void learn_sender_sid(dof_api_data *api_data, guint8 length, const guint8 *sid)",
          "5072: {",
          "5073:     dof_packet_data *packet;",
          "5074:     guint8 lookup_key[256];",
          "5075:     guint8 *key;",
          "5076:     gpointer value;",
          "5079:     if (!api_data)",
          "5080:     {",
          "5082:         return;",
          "5083:     }",
          "5085:     if (!api_data->packet)",
          "5086:     {",
          "5088:         return;",
          "5089:     }",
          "5091:     packet = (dof_packet_data *)api_data->packet;",
          "5092:     if (!packet->sender_sid_id)",
          "5093:         return;",
          "5096:     if (packet->sender_sid)",
          "5097:         return;",
          "5101:     lookup_key[0] = length;",
          "5102:     memcpy(lookup_key + 1, sid, length);",
          "5104:     if (g_hash_table_lookup_extended(sid_buffer_to_sid_id, &lookup_key, (gpointer *)&key, &value))",
          "5105:     {",
          "5106:         guint sid_id = GPOINTER_TO_UINT(value);",
          "5109:         if (packet->sender_sid_id == sid_id)",
          "5110:         {",
          "5112:             packet->sender_sid = key;",
          "5113:             return;",
          "5114:         }",
          "5115:         else",
          "5116:         {",
          "5120:             guint sid_id_correct = sid_id;",
          "5121:             guint sid_id_incorrect = packet->sender_sid_id;",
          "5122:             dof_packet_data *ptr = globals.dof_packet_head;",
          "5124:             while (ptr)",
          "5125:             {",
          "5126:                 if (ptr->sender_sid_id == sid_id_incorrect)",
          "5127:                     ptr->sender_sid_id = sid_id_correct;",
          "5129:                 if (ptr->receiver_sid_id == sid_id_incorrect)",
          "5130:                     ptr->receiver_sid_id = sid_id_correct;",
          "5132:                 if (ptr->op.op_sid_id == sid_id_incorrect)",
          "5133:                     ptr->op.op_sid_id = sid_id_correct;",
          "5135:                 if (ptr->ref_op.op_sid_id == sid_id_incorrect)",
          "5136:                     ptr->ref_op.op_sid_id = sid_id_correct;",
          "5138:                 ptr = ptr->next;",
          "5139:             }",
          "5140:         }",
          "5142:         return;",
          "5143:     }",
          "5146:     key = (dof_2009_1_pdu_19_sid)g_malloc0(length + 1);",
          "5147:     memcpy(key, lookup_key, length + 1);",
          "5150:     g_hash_table_insert(sid_buffer_to_sid_id, key, GUINT_TO_POINTER(packet->sender_sid_id));",
          "5151:     g_hash_table_insert(sid_id_to_sid_buffer, GUINT_TO_POINTER(packet->sender_sid_id), key);",
          "5157:     packet->sender_sid = (dof_2009_1_pdu_19_sid)key;",
          "5162:     {",
          "5163:         dof_packet_data *ptr = globals.dof_packet_head;",
          "5165:         while (ptr)",
          "5166:         {",
          "5167:             if (ptr->sender_sid_id == packet->sender_sid_id)",
          "5168:                 ptr->sender_sid = key;",
          "5170:             if (ptr->receiver_sid_id == packet->sender_sid_id)",
          "5171:                 ptr->receiver_sid = key;",
          "5173:             ptr = ptr->next;",
          "5174:         }",
          "5175:     }",
          "5176: }",
          "5181: static void learn_operation_sid(dof_2009_1_pdu_20_opid *opid, guint8 length, const guint8 *sid)",
          "5182: {",
          "5183:     guint8 lookup_key[256];",
          "5184:     guint8 *key;",
          "5185:     gpointer value;",
          "5188:     if (opid->op_sid)",
          "5189:         return;",
          "5193:     lookup_key[0] = length;",
          "5194:     memcpy(lookup_key + 1, sid, length);",
          "5196:     if (g_hash_table_lookup_extended(sid_buffer_to_sid_id, &lookup_key, (gpointer *)&key, &value))",
          "5197:     {",
          "5198:         guint sid_id = GPOINTER_TO_UINT(value);",
          "5200:         opid->op_sid_id = sid_id;",
          "5201:         opid->op_sid = key;",
          "5202:         return;",
          "5203:     }",
          "5206:     key = (dof_2009_1_pdu_19_sid)g_malloc0(length + 1);",
          "5207:     memcpy(key, lookup_key, length + 1);",
          "5210:     opid->op_sid_id = dpp_next_sid_id++;",
          "5213:     g_hash_table_insert(sid_buffer_to_sid_id, key, GUINT_TO_POINTER(opid->op_sid_id));",
          "5214:     g_hash_table_insert(sid_id_to_sid_buffer, GUINT_TO_POINTER(opid->op_sid_id), key);",
          "5220:     opid->op_sid = (dof_2009_1_pdu_19_sid)key;",
          "5221: }",
          "5223: static void encryptInPlace(guint protocol_id, void *cipher_state, guint8 *ptct, guint8 ptct_len)",
          "5224: {",
          "5225:     switch (protocol_id)",
          "5226:     {",
          "5228:     {",
          "5229:         rijndael_ctx *ctx = (rijndael_ctx *)cipher_state;",
          "5230:         guint8 ct[16];",
          "5232:         if (ptct_len != 16)",
          "5233:         {",
          "5234:             memset(ptct, 0, ptct_len);",
          "5235:             return;",
          "5236:         }",
          "5238:         rijndael_encrypt(ctx, ptct, ct);",
          "5239:         memcpy(ptct, ct, sizeof(ct));",
          "5240:     }",
          "5241:         break;",
          "5244:     {",
          "5245:         rijndael_ctx *ctx = (rijndael_ctx *)cipher_state;",
          "5246:         guint8 ct[16];",
          "5248:         if (ptct_len != 16)",
          "5249:         {",
          "5250:             memset(ptct, 0, ptct_len);",
          "5251:             return;",
          "5252:         }",
          "5254:         rijndael_encrypt(ctx, ptct, ct);",
          "5255:         memcpy(ptct, ct, sizeof(ct));",
          "5256:     }",
          "5257:         break;",
          "5260:         memset(ptct, 0, ptct_len);",
          "5261:         return;",
          "5262:     }",
          "5263: }",
          "5265: static void generateMac(guint protocol_id, void *cipher_state, guint8 *nonce, const guint8 *epp, gint a_len, guint8 *data, gint len, guint8 *mac, gint mac_len)",
          "5266: {",
          "5267:     guint16 i;",
          "5268:     guint16 cnt;",
          "5271:     mac[0] = 0x43 | (((mac_len - 2) / 2) << 3);",
          "5272:     memcpy(mac + 1, nonce, 11);",
          "5273:     memset(mac + 12, 0, 4);",
          "5274:     mac[14] = len >> 8;",
          "5275:     mac[15] = len & 0xFF;",
          "5277:     encryptInPlace(protocol_id, cipher_state, mac, 16);",
          "5279:     mac[0] ^= (a_len >> 8);",
          "5280:     mac[1] ^= (a_len);",
          "5281:     i = 2;",
          "5283:     for (cnt = 0; cnt < a_len; cnt++, i++)",
          "5284:     {",
          "5285:         if (i % 16 == 0)",
          "5286:             encryptInPlace(protocol_id, cipher_state, mac, 16);",
          "5288:         mac[i % 16] ^= epp[cnt];",
          "5289:     }",
          "5291:     i = 0;",
          "5292:     for (cnt = 0; cnt < len; cnt++, i++)",
          "5293:     {",
          "5294:         if (i % 16 == 0)",
          "5295:             encryptInPlace(protocol_id, cipher_state, mac, 16);",
          "5297:         mac[i % 16] ^= data[cnt];",
          "5298:     }",
          "5300:     encryptInPlace(protocol_id, cipher_state, mac, 16);",
          "5301: }",
          "5303: static int decrypt(ccm_session_data *session, ccm_packet_data *pdata, guint8 *nonce, const guint8 *epp, gint a_len, guint8 *data, gint len)",
          "5304: {",
          "5305:     unsigned short i;",
          "5307:     unsigned char ctr[16];",
          "5308:     unsigned char encrypted_ctr[16];",
          "5309:     unsigned char mac[16];",
          "5310:     unsigned char computed_mac[16];",
          "5311:     unsigned int skip;",
          "5312:     guint8 *ekey;",
          "5314:     if (data == NULL || len == 0)",
          "5315:         return 0;",
          "5318:     if (session->mac_len < 4 || session->mac_len > 16)",
          "5319:         return 0;",
          "5321:     if (pdata->period == 0)",
          "5322:         ekey = (guint8 *)session->cipher_data;",
          "5323:     else",
          "5324:         ekey = (guint8 *)g_hash_table_lookup(session->cipher_data_table, GUINT_TO_POINTER(pdata->period));",
          "5326:     if (!ekey)",
          "5327:         return 0;",
          "5331:     skip = a_len + 2;",
          "5332:     skip /= 16;",
          "5333:     if ((a_len + 2) % 16)",
          "5334:         skip += 1;",
          "5335: #endif",
          "5336:     skip = 0;",
          "5340:     ctr[0] = 0x03;",
          "5341:     memcpy(ctr + 1, nonce, 11);",
          "5342:     ctr[12] = 0;",
          "5343:     ctr[13] = 0;",
          "5344:     ctr[14] = 0;",
          "5348:     for (i = 0; i < len - session->mac_len; i++)",
          "5349:     {",
          "5350:         if (i % 16 == 0)",
          "5351:         {",
          "5352:             if (ctr[15] == 255)",
          "5353:                 ctr[14] += 1;",
          "5354:             ctr[15] += 1;",
          "5355:             memcpy(encrypted_ctr, ctr, 16);",
          "5356:             encryptInPlace(session->protocol_id, session->cipher_data, encrypted_ctr, 16);",
          "5357:         }",
          "5359:         data[i] ^= encrypted_ctr[i % 16];",
          "5360:     }",
          "5362:     memcpy(mac, data + i, session->mac_len);",
          "5364:     ctr[12] = 0;",
          "5365:     ctr[13] = 0;",
          "5366:     ctr[14] = 0;",
          "5367:     ctr[15] = 0;",
          "5368:     memcpy(encrypted_ctr, ctr, 16);",
          "5369:     encryptInPlace(session->protocol_id, session->cipher_data, encrypted_ctr, 16);",
          "5371:     for (i = 0; i < session->mac_len; i++)",
          "5372:         mac[i] ^= encrypted_ctr[i];",
          "5375:     generateMac(session->protocol_id, session->cipher_data, nonce, epp, a_len, data, (gint)(len - session->mac_len), computed_mac, session->mac_len);",
          "5376:     if (!memcmp(mac, computed_mac, session->mac_len))",
          "5377:         return 1;",
          "5380:     return 0;",
          "5381: }",
          "5389: static int dissect_app_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "5390: {",
          "5391:     col_clear(pinfo->cinfo, COL_INFO);",
          "5396:     {",
          "5397:         guint16 app;",
          "5398:         gint app_len;",
          "5400:         read_c2(tvb, 0, &app, &app_len);",
          "5402:         col_add_fstr(pinfo->cinfo, COL_PROTOCOL, \"APP(%u)\", app);",
          "5405:         if (dissector_try_uint_new(app_dissectors, app, tvb, pinfo, tree, TRUE, data))",
          "5406:         {",
          "5407:             col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "5408:             col_set_fence(pinfo->cinfo, COL_INFO);",
          "5410:             return tvb_reported_length(tvb);",
          "5411:         }",
          "5412:         else",
          "5413:         {",
          "5414:             proto_tree_add_protocol_format(tree, proto_2008_1_app, tvb, 0, app_len,",
          "5415:                                            DOF_APPLICATION_PROTOCOL \", Version: %u\", app);",
          "5416:         }",
          "5417:     }",
          "5419:     return 0;",
          "5420: }",
          "5426: static int dof_dissect_dpp_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "5427: {",
          "5428:     dof_api_data *api_data = (dof_api_data *)data;",
          "5429:     guint offset = 0;",
          "5431:     DISSECTOR_ASSERT(api_data != NULL);",
          "5433:     col_clear(pinfo->cinfo, COL_INFO);",
          "5438:     {",
          "5439:         guint8 header = tvb_get_guint8(tvb, offset);",
          "5440:         guint8 dpp_version = header & 0x7F;",
          "5441:         guint8 dpp_flags_included = header & 0x80;",
          "5442:         proto_item *hi;",
          "5443:         proto_tree * dpp_root,*dpp_tree;",
          "5445:         col_add_fstr(pinfo->cinfo, COL_PROTOCOL, \"DPPv%u\", dpp_version);",
          "5448:         hi = proto_tree_add_protocol_format(tree, proto_2008_1_dpp, tvb, offset, 0,",
          "5449:                                             DOF_PRESENTATION_PROTOCOL \" Version %u, Flags: %s\", dpp_version, dpp_flags_included ? \"Included\" : \"Default\");",
          "5451:         dpp_root = proto_item_add_subtree(hi, ett_2008_1_dpp);",
          "5453:         dpp_tree = proto_tree_add_subtree(dpp_root, tvb, offset, 1, ett_2008_1_dpp_1_header, NULL, \"Header\");",
          "5457:         proto_tree_add_item(dpp_tree, hf_2008_1_dpp_1_flag, tvb, offset, 1, ENC_NA);",
          "5458:         proto_tree_add_item(dpp_tree, hf_2008_1_dpp_1_version, tvb, offset, 1, ENC_NA);",
          "5459:         offset += 1;",
          "5464:         if (offset == tvb_reported_length(tvb))",
          "5465:         {",
          "5468:             proto_item_set_len(hi, offset);",
          "5470:             if (!api_data)",
          "5471:                 return offset;",
          "5473:             if (api_data->transport_session->is_streaming)",
          "5474:             {",
          "5475:                 col_append_fstr(pinfo->cinfo, COL_INFO, \"DNP/DPP Negotiation\");",
          "5477:                 if (pinfo->fd->flags.visited &&",
          "5478:                     api_data->transport_session->negotiation_required &&",
          "5479:                     ((api_data->transport_session->negotiation_complete_at == 0) || (api_data->transport_session->negotiation_complete_at_ts.secs - api_data->transport_session->session_start_ts.secs > 10)))",
          "5480:                 {",
          "5482:                     expert_add_info(pinfo, hi, &ei_dof_6_timeout);",
          "5483:                 }",
          "5485:                 return offset;",
          "5486:             }",
          "5487:         }",
          "5490:         if (dissector_try_uint_new(dof_dpp_dissectors, dpp_version, tvb, pinfo, dpp_root, FALSE, data))",
          "5491:         {",
          "5492:             col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "5493:             col_set_fence(pinfo->cinfo, COL_INFO);",
          "5495:             return tvb_reported_length(tvb);",
          "5496:         }",
          "5497:     }",
          "5499:     return 0;",
          "5500: }",
          "5506: static int dof_dissect_dnp_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, dof_api_data *api_data, gint offset)",
          "5507: {",
          "5508:     guint8 header = tvb_get_guint8(tvb, offset);",
          "5509:     guint8 dnp_version = header & 0x7F;",
          "5510:     guint8 dnp_flags_included = header & 0x80;",
          "5511:     proto_item *main_ti;",
          "5512:     proto_tree * dnp_root,*dnp_tree;",
          "5514:     col_add_fstr(pinfo->cinfo, COL_PROTOCOL, \"DNPv%u\", dnp_version);",
          "5516:     main_ti = proto_tree_add_protocol_format(tree, proto_2008_1_dnp, tvb, offset, 0,",
          "5517:                                              DOF_NETWORK_PROTOCOL \" Version %u, Flags: %s\", dnp_version, dnp_flags_included ? \"Included\" : \"Default\");",
          "5519:     dnp_root = proto_item_add_subtree(main_ti, ett_2008_1_dnp);",
          "5521:     dnp_tree = proto_tree_add_subtree(dnp_root, tvb, offset, 1, ett_2008_1_dnp_header, NULL, \"Header\");",
          "5524:     proto_tree_add_item(dnp_tree, hf_2008_1_dnp_1_flag, tvb, offset, 1, ENC_NA);",
          "5525:     proto_tree_add_item(dnp_tree, hf_2008_1_dnp_1_version, tvb, offset, 1, ENC_NA);",
          "5528:     if (dissector_try_uint_new(dnp_dissectors, dnp_version, tvb, pinfo, dnp_root, FALSE, api_data))",
          "5529:     {",
          "5531:         col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "5532:         col_set_fence(pinfo->cinfo, COL_INFO);",
          "5533:     }",
          "5534:     else",
          "5535:     {",
          "5536:         proto_item_set_end(main_ti, tvb, 1);",
          "5539:         if (((header & 0x80) == 0) && api_data->transport_session->negotiation_required && ((pinfo->fd->num < api_data->transport_session->negotiation_complete_at) || (api_data->transport_session->negotiation_complete_at == 0)))",
          "5540:         {",
          "5541:             offset += dof_dissect_dpp_common(tvb_new_subset_remaining(tvb, offset + 1), pinfo, tree, api_data);",
          "5542:         }",
          "5543:     }",
          "5545:     if (dnp_flags_included && !api_data->transport_session->negotiation_complete_at)",
          "5546:     {",
          "5547:         api_data->transport_session->negotiation_complete_at = pinfo->fd->num;",
          "5548:         api_data->transport_session->negotiation_complete_at_ts = pinfo->fd->abs_ts;",
          "5549:     }",
          "5551:     return offset;",
          "5552: }",
          "5563: static int dissect_dof_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "5564: {",
          "5565:     dof_api_data *api_data = (dof_api_data *)data;",
          "5566:     proto_tree *dof_root;",
          "5567:     dof_packet_data *packet;",
          "5569:     DISSECTOR_ASSERT(api_data != NULL);",
          "5570:     DISSECTOR_ASSERT(api_data->transport_session != NULL);",
          "5571:     DISSECTOR_ASSERT(api_data->transport_packet != NULL);",
          "5573:     packet = (dof_packet_data *)api_data->packet;",
          "5576:     if (packet == NULL)",
          "5577:     {",
          "5578:         api_data->packet = packet = create_packet_data(pinfo);",
          "5579:         DISSECTOR_ASSERT(packet != NULL);",
          "5582:         packet->is_sent_by_initiator = api_data->transport_packet->is_sent_by_client;",
          "5583:     }",
          "5586:     if (api_data->transport_session->transport_session_id == 0)",
          "5587:         api_data->transport_session->transport_session_id = globals.next_transport_session++;",
          "5590:     {",
          "5591:         proto_item *ti;",
          "5593:         ti = proto_tree_add_protocol_format(tree, proto_2008_1_dof, tvb, 0, tvb_reported_length(tvb), DOF_PROTOCOL_STACK);",
          "5594:         dof_root = proto_item_add_subtree(ti, ett_2008_1_dof);",
          "5597:         {",
          "5598:             ti = proto_tree_add_uint(dof_root, hf_2008_1_dof_session_transport, tvb, 0, 0, api_data->transport_session->transport_session_id);",
          "5599:             PROTO_ITEM_SET_GENERATED(ti);",
          "5601:             ti = proto_tree_add_boolean(dof_root, hf_2008_1_dof_is_2_node, tvb, 0, 0, api_data->transport_session->is_2_node);",
          "5602:             PROTO_ITEM_SET_GENERATED(ti);",
          "5604:             ti = proto_tree_add_boolean(dof_root, hf_2008_1_dof_is_streaming, tvb, 0, 0, api_data->transport_session->is_streaming);",
          "5605:             PROTO_ITEM_SET_GENERATED(ti);",
          "5607:             if (api_data->session)",
          "5608:             {",
          "5609:                 ti = proto_tree_add_uint(dof_root, hf_2008_1_dof_session, tvb, 0, 0, api_data->session->session_id);",
          "5610:                 PROTO_ITEM_SET_GENERATED(ti);",
          "5611:             }",
          "5613:             if (api_data->secure_session)",
          "5614:             {",
          "5615:                 ti = proto_tree_add_uint_format(dof_root, hf_2008_1_dof_session, tvb, 0, 0, api_data->secure_session->original_session_id, \"DPS Session (Non-secure): %d\", api_data->secure_session->original_session_id);",
          "5616:                 PROTO_ITEM_SET_GENERATED(ti);",
          "5617:             }",
          "5619:             ti = proto_tree_add_uint(dof_root, hf_2008_1_dof_frame, tvb, 0, 0, packet->dof_frame);",
          "5620:             PROTO_ITEM_SET_GENERATED(ti);",
          "5622:             ti = proto_tree_add_boolean(dof_root, hf_2008_1_dof_is_from_client, tvb, 0, 0, api_data->transport_packet->is_sent_by_client);",
          "5623:             PROTO_ITEM_SET_GENERATED(ti);",
          "5624:         }",
          "5625:     }",
          "5627:     dof_dissect_dnp_common(tvb, pinfo, tree, api_data, 0);",
          "5629:     packet->processed = TRUE;",
          "5630:     return tvb_reported_length(tvb);",
          "5631: }",
          "5642: static int dissect_tunnel_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "5643: {",
          "5645:     tcp_dof_packet_ref *ref = (tcp_dof_packet_ref *)data;",
          "5646:     gint offset = 0;",
          "5648:     offset = 0;",
          "5653:     {",
          "5654:         guint8 version = tvb_get_guint8(tvb, offset);",
          "5655:         guint8 opcode;",
          "5656:         proto_item *ti;",
          "5657:         proto_tree *app_root;",
          "5659:         col_add_fstr(pinfo->cinfo, COL_PROTOCOL, \"TUNv%u\", version);",
          "5661:         ti = proto_tree_add_protocol_format(tree, proto_2012_1_tunnel, tvb, offset, 0,",
          "5662:                                             \"DOF Tunnel Protocol, Version: %u\", version);",
          "5664:         app_root = proto_item_add_subtree(ti, ett_2012_1_tunnel);",
          "5665:         proto_tree_add_item(app_root, hf_2012_1_tunnel_1_version, tvb, offset, 1, ENC_NA);",
          "5666:         proto_tree_add_item(app_root, hf_2012_1_tunnel_1_length, tvb, offset + 1, 2, ENC_BIG_ENDIAN);",
          "5668:         opcode = tvb_get_guint8(tvb, offset + 3);",
          "5669:         if (opcode == 3)",
          "5670:         {",
          "5671:             tvbuff_t *next_tvb = tvb_new_subset(tvb, offset + 5, -1, -1);",
          "5673:             dissect_dof_common(next_tvb, pinfo, tree, &ref->api_data);",
          "5674:         }",
          "5675:     }",
          "5677:     return tvb_captured_length(tvb);",
          "5678: }",
          "5680: static int dissect_tun_app_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "5681: {",
          "5682:     col_clear(pinfo->cinfo, COL_INFO);",
          "5687:     {",
          "5688:         guint16 app;",
          "5689:         gint app_len;",
          "5692:         app = tvb_get_guint8(tvb, 0);",
          "5693:         app_len = 1;",
          "5695:         col_add_fstr(pinfo->cinfo, COL_PROTOCOL, \"APP(%u)\", app);",
          "5698:         if (dissector_try_uint(dof_tun_app_dissectors, app, tvb, pinfo, tree))",
          "5699:         {",
          "5700:             col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "5701:             col_set_fence(pinfo->cinfo, COL_INFO);",
          "5703:             return tvb_captured_length(tvb);",
          "5704:         }",
          "5705:         else",
          "5706:         {",
          "5707:             proto_tree_add_protocol_format(tree, proto_2012_1_tunnel, tvb, 0, app_len,",
          "5708:                                                 DOF_APPLICATION_PROTOCOL \", Version: %u\", app);",
          "5709:         }",
          "5710:     }",
          "5712:     return 0;",
          "5713: }",
          "5717: static udp_session_data* create_udp_session_data(packet_info *pinfo, conversation_t *conversation _U_)",
          "5718: {",
          "5719:     udp_session_data *packet = wmem_new0(wmem_file_scope(), udp_session_data);",
          "5724:     copy_address_wmem(wmem_file_scope(), &packet->server.addr, &pinfo->dst);",
          "5725:     packet->server.port = pinfo->destport;",
          "5727:     packet->common.transport_id = proto_2008_1_dof_udp;",
          "5729:     {",
          "5730:         const guint8 *addr = (const guint8 *)packet->server.addr.data;",
          "5731:         if ((packet->server.addr.type == AT_IPv4) && (addr != NULL) && (addr[0] != 224))",
          "5732:             packet->common.is_2_node = TRUE;",
          "5733:         else",
          "5734:             packet->common.is_2_node = FALSE;",
          "5735:     }",
          "5737:     packet->common.is_streaming = FALSE;",
          "5738:     packet->common.session_start_ts = pinfo->fd->abs_ts;",
          "5739:     packet->common.negotiation_required = FALSE;",
          "5740:     packet->common.negotiation_complete_at = 0;",
          "5742:     return packet;",
          "5743: }",
          "5745: static tcp_session_data* create_tcp_session_data(packet_info *pinfo, conversation_t *conversation)",
          "5746: {",
          "5747:     tcp_session_data *packet = wmem_new0(wmem_file_scope(), tcp_session_data);",
          "5749:     copy_address_wmem(wmem_file_scope(), &packet->client.addr, &conversation->key_ptr->addr1);",
          "5750:     packet->client.port = conversation->key_ptr->port1;",
          "5751:     copy_address_wmem(wmem_file_scope(), &packet->server.addr, &conversation->key_ptr->addr2);",
          "5752:     packet->server.port = conversation->key_ptr->port2;",
          "5754:     packet->not_dps = FALSE;",
          "5756:     packet->common.transport_id = proto_2008_1_dof_tcp;",
          "5757:     packet->common.is_2_node = TRUE;",
          "5758:     packet->common.is_streaming = TRUE;",
          "5759:     packet->common.session_start_ts = pinfo->fd->abs_ts;",
          "5760:     packet->common.negotiation_required = TRUE;",
          "5761:     packet->common.negotiation_complete_at = 0;",
          "5763:     return packet;",
          "5764: }",
          "5766: static dof_packet_data* create_packet_data(packet_info *pinfo)",
          "5767: {",
          "5769:     dof_packet_data *packet = wmem_new0(wmem_file_scope(), dof_packet_data);",
          "5771:     packet->frame = pinfo->fd->num;",
          "5772:     packet->dof_frame = next_dof_frame++;",
          "5775:     if (!globals.dof_packet_head)",
          "5776:     {",
          "5777:         globals.dof_packet_head = packet;",
          "5778:         globals.dof_packet_tail = packet;",
          "5779:     }",
          "5780:     else",
          "5781:     {",
          "5782:         globals.dof_packet_tail->next = packet;",
          "5783:         globals.dof_packet_tail = packet;",
          "5784:     }",
          "5786:     return packet;",
          "5787: }",
          "5798: static int dissect_dof_udp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "5799: {",
          "5800:     dof_api_data *api_data = (dof_api_data *)p_get_proto_data(NULL, pinfo, proto_2008_1_dof_udp, 0);",
          "5801:     if (api_data == NULL)",
          "5802:     {",
          "5803:         conversation_t *conversation;",
          "5804:         udp_session_data *transport_session;",
          "5805:         dof_transport_packet *transport_packet;",
          "5809:             guint8* addr = (guint8*) pinfo->dst.data;",
          "5810:             if ( (pinfo->dst.type == AT_IPv4) && (addr != NULL) && (addr[0] != 224) )",
          "5811:                 mcast = TRUE;",
          "5815:         conversation = find_conversation(pinfo->fd->num, &pinfo->src, &pinfo->dst, pinfo->ptype, pinfo->srcport, pinfo->destport, NO_ADDR_B | NO_PORT_B);",
          "5816:         if (!conversation)",
          "5817:         {",
          "5818:             conversation = conversation_new(pinfo->fd->num, &pinfo->src, &pinfo->dst, pinfo->ptype, pinfo->srcport, pinfo->destport, NO_ADDR_B | NO_PORT_B);",
          "5819:             conversation_set_dissector(conversation, dof_udp_handle);",
          "5820:         }",
          "5825:         conversation = find_conversation(pinfo->fd->num, &pinfo->dst, &pinfo->src, PT_UDP, pinfo->destport, pinfo->srcport, NO_ADDR_B | NO_PORT_B);",
          "5826:         if (conversation)",
          "5827:         {",
          "5831:         }",
          "5833:         if (!conversation)",
          "5834:             conversation = conversation_new(pinfo->fd->num, &pinfo->dst, &pinfo->src, PT_UDP, pinfo->destport, pinfo->srcport, NO_ADDR2 | NO_PORT2 | CONVERSATION_TEMPLATE);",
          "5836:         transport_session = (udp_session_data *)conversation_get_proto_data(conversation, proto_2008_1_dof_udp);",
          "5837:         if (transport_session == NULL)",
          "5838:         {",
          "5839:             transport_session = create_udp_session_data(pinfo, conversation);",
          "5840:             conversation_add_proto_data(conversation, proto_2008_1_dof_udp, transport_session);",
          "5841:         }",
          "5844:         api_data = wmem_new0(wmem_file_scope(), dof_api_data);",
          "5845:         if (api_data == NULL)",
          "5846:             return 0;",
          "5848:         transport_packet = wmem_new0(wmem_file_scope(), dof_transport_packet);",
          "5849:         if (transport_packet == NULL)",
          "5850:             return 0;",
          "5852:         transport_packet->is_sent_by_client = TRUE;",
          "5853:         if (addresses_equal(&transport_session->server.addr, &pinfo->src) && (transport_session->server.port == pinfo->srcport))",
          "5854:             transport_packet->is_sent_by_client = FALSE;",
          "5856:         transport_packet->sender_id = assign_addr_port_id(&pinfo->src, pinfo->srcport);",
          "5857:         transport_packet->receiver_id = assign_addr_port_id(&pinfo->dst, pinfo->destport);",
          "5859:         api_data->transport_session = &transport_session->common;",
          "5860:         api_data->transport_packet = transport_packet;",
          "5861:         p_add_proto_data(NULL, pinfo, proto_2008_1_dof_udp, 0, api_data);",
          "5862:     }",
          "5864:     return dissect_dof_common(tvb, pinfo, tree, api_data);",
          "5865: }",
          "5871: static gboolean is_retransmission(packet_info *pinfo, tcp_session_data *session, tcp_packet_data *packet, struct tcpinfo *tcpinfo)",
          "5872: {",
          "5875:     {",
          "5876:         tcp_ignore_data *id;",
          "5877:         guint32 sequence = tcpinfo->seq;",
          "5879:         if (addresses_equal(&pinfo->src, &session->client.addr) && (pinfo->srcport == session->client.port))",
          "5880:         {",
          "5881:             id = packet->from_client_ignore_list;",
          "5882:         }",
          "5883:         else",
          "5884:         {",
          "5885:             id = packet->from_server_ignore_list;",
          "5886:         }",
          "5888:         while (id != NULL && id->sequence != sequence)",
          "5889:         {",
          "5890:             id = id->next;",
          "5891:         }",
          "5893:         if (id == NULL)",
          "5894:             return FALSE;",
          "5896:         return id->ignore;",
          "5897:     }",
          "5899:     return FALSE;",
          "5900: }",
          "5907: static void remember_offset(packet_info *pinfo, tcp_session_data *session, tcp_packet_data *packet, struct tcpinfo *tcpinfo)",
          "5908: {",
          "5909:     gboolean ignore = FALSE;",
          "5913:     {",
          "5914:         tcp_ignore_data **last;",
          "5915:         tcp_ignore_data *id;",
          "5916:         guint32 sequence;",
          "5917:         guint32 *seqptr = NULL;",
          "5919:         if (addresses_equal(&pinfo->src, &session->client.addr) && (pinfo->srcport == session->client.port))",
          "5920:         {",
          "5921:             last = &(packet->from_client_ignore_list);",
          "5922:             id = packet->from_client_ignore_list;",
          "5923:             sequence = tcpinfo->seq;",
          "5924:             seqptr = &session->from_client_seq;",
          "5926:             if (LE_SEQ(tcpinfo->seq, session->from_client_seq))",
          "5927:                 ignore = TRUE;",
          "5928:         }",
          "5929:         else",
          "5930:         {",
          "5931:             last = &(packet->from_server_ignore_list);",
          "5932:             id = packet->from_server_ignore_list;",
          "5933:             sequence = tcpinfo->seq;",
          "5934:             seqptr = &session->from_server_seq;",
          "5936:             if (LE_SEQ(tcpinfo->seq, session->from_server_seq))",
          "5937:                 ignore = TRUE;",
          "5938:         }",
          "5940:         while (id != NULL && id->sequence != tcpinfo->seq)",
          "5941:         {",
          "5942:             last = &(id->next);",
          "5943:             id = id->next;",
          "5944:         }",
          "5947:         if (id == NULL)",
          "5948:         {",
          "5950:             id = *last;",
          "5951:             id->ignore = ignore;",
          "5952:             id->sequence = tcpinfo->seq;",
          "5953:         }",
          "5954:     }",
          "5955: }",
          "5962: static int dissect_dof_tcp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "5963: {",
          "5964:     conversation_t *conversation;",
          "5965:     tcp_session_data *session;",
          "5966:     tcp_packet_data *packet;",
          "5967:     struct tcpinfo *tcpinfo = (struct tcpinfo *)data;",
          "5968:     guint8 header;",
          "5974:     conversation = find_conversation(pinfo->fd->num, &pinfo->src, &pinfo->dst, pinfo->ptype, pinfo->srcport, pinfo->destport, 0);",
          "5975:     {",
          "5979:         DISSECTOR_ASSERT(conversation != NULL);",
          "5980:     }",
          "6002:     session = (tcp_session_data *)conversation_get_proto_data(conversation, proto_2008_1_dof_tcp);",
          "6003:     if (session == NULL)",
          "6004:     {",
          "6005:         session = create_tcp_session_data(pinfo, conversation);",
          "6006:         if (!session)",
          "6007:         {",
          "6008:             fprintf(stderr, \"! session\");",
          "6009:             return 0;",
          "6010:         }",
          "6012:         conversation_add_proto_data(conversation, proto_2008_1_dof_tcp, session);",
          "6013:     }",
          "6015:     if (session->not_dps)",
          "6016:         return 0;",
          "6018:     packet = (tcp_packet_data *)p_get_proto_data(NULL, pinfo, proto_2008_1_dof_tcp, 0);",
          "6019:     if (packet == NULL)",
          "6020:     {",
          "6021:         packet = (tcp_packet_data *)wmem_alloc0(wmem_file_scope(), sizeof(tcp_packet_data));",
          "6022:         if (!packet)",
          "6023:         {",
          "6024:             fprintf(stderr, \"! packet\");",
          "6025:             return 0;",
          "6026:         }",
          "6028:         p_add_proto_data(NULL, pinfo, proto_2008_1_dof_tcp, 0, packet);",
          "6029:     }",
          "6031:     if (is_retransmission(pinfo, session, packet, tcpinfo))",
          "6032:         return 0;",
          "6038:     {",
          "6040:         gint offset = 0;",
          "6042:         while (offset < (gint)tvb_reported_length(tvb))",
          "6043:         {",
          "6044:             gint available = tvb_ensure_captured_length_remaining(tvb, offset);",
          "6045:             int packet_length;",
          "6047:             header = tvb_get_guint8(tvb, offset);",
          "6055:             if (((header & 0x80) == 0) && session->common.negotiation_required && ((pinfo->fd->num < session->common.negotiation_complete_at) || (session->common.negotiation_complete_at == 0)))",
          "6056:             {",
          "6057:                 packet_length = 2;",
          "6058:                 if (header > DNP_MAX_VERSION)",
          "6059:                 {",
          "6060:                     session->not_dps = TRUE;",
          "6061:                     return 0;",
          "6062:                 }",
          "6063:             }",
          "6064:             else",
          "6065:             {",
          "6066:                 packet_length = dof_dissect_dnp_length(tvb, pinfo, header & 0x7F, &offset);",
          "6067:                 if (packet_length < 0)",
          "6068:                 {",
          "6069:                     session->not_dps = TRUE;",
          "6070:                     return offset;",
          "6071:                 }",
          "6072:             }",
          "6074:             if (packet_length == 0)",
          "6075:             {",
          "6076:                 pinfo->desegment_offset = offset;",
          "6077:                 pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
          "6078:                 return offset;",
          "6079:             }",
          "6081:             if (available < packet_length)",
          "6082:             {",
          "6083:                 pinfo->desegment_offset = offset;",
          "6084:                 pinfo->desegment_len = packet_length - available;",
          "6085:                 return offset;",
          "6086:             }",
          "6088:             remember_offset(pinfo, session, packet, tcpinfo);",
          "6089:             if (is_retransmission(pinfo, session, packet, tcpinfo))",
          "6090:                 return 0;",
          "6095:             {",
          "6096:                 tvbuff_t *next_tvb = tvb_new_subset(tvb, offset, packet_length, packet_length);",
          "6097:                 tcp_dof_packet_ref *ref;",
          "6098:                 gint raw_offset = tvb_raw_offset(tvb) + offset;",
          "6099:                 gboolean ref_is_new = FALSE;",
          "6102:                 if (packet->dof_packets == NULL)",
          "6103:                 {",
          "6104:                     ref_is_new = TRUE;",
          "6105:                     ref = (tcp_dof_packet_ref *)wmem_alloc0(wmem_file_scope(), sizeof(tcp_dof_packet_ref));",
          "6106:                     ref->transport_packet.sender_id = assign_addr_port_id(&pinfo->src, pinfo->srcport);",
          "6107:                     ref->transport_packet.receiver_id = assign_addr_port_id(&pinfo->dst, pinfo->destport);",
          "6108:                     packet->dof_packets = ref;",
          "6109:                     ref->start_offset = raw_offset;",
          "6110:                 }",
          "6111:                 else",
          "6112:                     ref = packet->dof_packets;",
          "6115:                 while (ref->start_offset != raw_offset)",
          "6116:                 {",
          "6117:                     if (ref->next)",
          "6118:                     {",
          "6119:                         ref = ref->next;",
          "6120:                         continue;",
          "6121:                     }",
          "6123:                     {",
          "6124:                         tcp_dof_packet_ref *last = ref;",
          "6127:                         ref_is_new = TRUE;",
          "6128:                         ref = wmem_new0(wmem_file_scope(), tcp_dof_packet_ref);",
          "6129:                         if (!ref)",
          "6130:                         {",
          "6131:                             fprintf(stderr, \"! ref\");",
          "6132:                             return offset;",
          "6133:                         }",
          "6135:                         ref->transport_packet.sender_id = last->transport_packet.sender_id;",
          "6136:                         ref->transport_packet.receiver_id = last->transport_packet.receiver_id;",
          "6137:                         ref->start_offset = raw_offset;",
          "6138:                         last->next = ref;",
          "6139:                     }",
          "6140:                 }",
          "6142:                 if (ref_is_new)",
          "6143:                 {",
          "6144:                     dof_transport_packet *tp = &(ref->transport_packet);",
          "6146:                     tp->is_sent_by_client = FALSE;",
          "6147:                     if (addresses_equal(&session->client.addr, &pinfo->src) &&",
          "6148:                         (session->client.port == pinfo->srcport))",
          "6149:                         tp->is_sent_by_client = TRUE;",
          "6151:                     ref->api_data.transport_session = (dof_transport_session *)&(session->common);",
          "6152:                     ref->api_data.transport_packet = tp;",
          "6153:                 }",
          "6156:                 dissect_dof_common(next_tvb, pinfo, tree, &ref->api_data);",
          "6157:             }",
          "6159:             offset += packet_length;",
          "6160:         }",
          "6162:         return offset;",
          "6163:     }",
          "6164: }",
          "6171: #if 0",
          "6172: static int dissect_tunnel_udp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "6173: {",
          "6174:     conversation_t *conversation;",
          "6175:     dof_packet_data *packet;",
          "6178:     if (!udp_transport_session)",
          "6179:     udp_transport_session = se_alloc0(sizeof(*udp_transport_session));",
          "6181:     conversation = find_conversation(pinfo->fd->num, &pinfo->src, &pinfo->dst, PT_UDP, pinfo->srcport, pinfo->destport, 0);",
          "6182:     if (!conversation)",
          "6183:     {",
          "6184:         conversation = conversation_new(pinfo->fd->num, &pinfo->src, &pinfo->dst, PT_UDP, pinfo->srcport, pinfo->destport, 0);",
          "6185:     }",
          "6188:     packet = p_get_proto_data(pinfo->fd, proto_2012_1_tunnel, 0);",
          "6189:     if (!packet)",
          "6190:     {",
          "6191:         packet = se_alloc0(sizeof(dof_packet_data));",
          "6192:         packet->frame = pinfo->fd->num;",
          "6193:         packet->next = NULL;",
          "6194:         packet->start_offset = 0;",
          "6195:         packet->session_counter = &session_counter;",
          "6196:         packet->transport_session = udp_transport_session;",
          "6197:         p_add_proto_data(pinfo->fd, proto_2012_1_tunnel, 0, packet);",
          "6198:     }",
          "6200:     pinfo->private_data = packet;",
          "6201:     return dissect_tunnel_common(tvb, pinfo, tree);",
          "6202: #else",
          "6203: static int dissect_tunnel_udp(tvbuff_t *tvb _U_, packet_info *pinfo _U_, proto_tree *tree _U_, void *data _U_)",
          "6204: {",
          "6205: #endif",
          "6206:     return 0;",
          "6207: }",
          "6208: #endif",
          "6216: static int dissect_tunnel_tcp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "6217: {",
          "6218:     conversation_t *conversation;",
          "6219:     tcp_session_data *session;",
          "6220:     tcp_packet_data *packet;",
          "6221:     struct tcpinfo *tcpinfo = (struct tcpinfo *)data;",
          "6227:     conversation = find_conversation(pinfo->fd->num, &pinfo->src, &pinfo->dst, pinfo->ptype, pinfo->srcport, pinfo->destport, 0);",
          "6228:     {",
          "6232:         DISSECTOR_ASSERT(conversation != NULL);",
          "6233:     }",
          "6255:     session = (tcp_session_data *)conversation_get_proto_data(conversation, proto_2012_1_tunnel);",
          "6256:     if (session == NULL)",
          "6257:     {",
          "6258:         session = create_tcp_session_data(pinfo, conversation);",
          "6259:         if (!session)",
          "6260:         {",
          "6261:             fprintf(stderr, \"! session\");",
          "6262:             return 0;",
          "6263:         }",
          "6265:         conversation_add_proto_data(conversation, proto_2012_1_tunnel, session);",
          "6266:     }",
          "6268:     packet = (tcp_packet_data *)p_get_proto_data(NULL, pinfo, proto_2012_1_tunnel, 0);",
          "6269:     if (packet == NULL)",
          "6270:     {",
          "6271:         packet = (tcp_packet_data *)wmem_alloc0(wmem_file_scope(), sizeof(tcp_packet_data));",
          "6272:         if (!packet)",
          "6273:         {",
          "6274:             fprintf(stderr, \"! packet\");",
          "6275:             return 0;",
          "6276:         }",
          "6278:         p_add_proto_data(NULL, pinfo, proto_2012_1_tunnel, 0, packet);",
          "6279:     }",
          "6281:     if (is_retransmission(pinfo, session, packet, tcpinfo))",
          "6282:         return 0;",
          "6286:     {",
          "6288:         gint offset = 0;",
          "6290:         while (offset < (gint)tvb_reported_length(tvb))",
          "6291:         {",
          "6292:             gint available = tvb_reported_length_remaining(tvb, offset);",
          "6293:             int packet_length;",
          "6294:             int header_length;",
          "6295:             int i;",
          "6297:             if (available < 3)",
          "6298:             {",
          "6299:                 pinfo->desegment_offset = offset;",
          "6300:                 pinfo->desegment_len = DESEGMENT_ONE_MORE_SEGMENT;",
          "6301:                 return offset + available;",
          "6302:             }",
          "6304:             packet_length = 0;",
          "6305:             header_length = 3;",
          "6307:             for (i = 0; i < 2; i++)",
          "6308:                 packet_length = packet_length * 256 + tvb_get_guint8(tvb, offset + 1 + i);",
          "6310:             packet_length += header_length;",
          "6312:             if (available < packet_length)",
          "6313:             {",
          "6314:                 pinfo->desegment_offset = offset;",
          "6315:                 pinfo->desegment_len = packet_length - available;",
          "6316:                 return offset + available;",
          "6317:             }",
          "6322:             {",
          "6323:                 tvbuff_t *next_tvb = tvb_new_subset(tvb, offset, packet_length, packet_length);",
          "6324:                 tcp_dof_packet_ref *ref;",
          "6325:                 gint raw_offset = tvb_raw_offset(tvb) + offset;",
          "6326:                 gboolean ref_is_new = FALSE;",
          "6329:                 if (packet->dof_packets == NULL)",
          "6330:                 {",
          "6331:                     ref_is_new = TRUE;",
          "6332:                     ref = (tcp_dof_packet_ref *)wmem_alloc0(wmem_file_scope(), sizeof(tcp_dof_packet_ref));",
          "6333:                     ref->transport_packet.sender_id = assign_addr_port_id(&pinfo->src, pinfo->srcport);",
          "6334:                     ref->transport_packet.receiver_id = assign_addr_port_id(&pinfo->dst, pinfo->destport);",
          "6335:                     packet->dof_packets = ref;",
          "6336:                     ref->start_offset = raw_offset;",
          "6337:                 }",
          "6338:                 else",
          "6339:                     ref = packet->dof_packets;",
          "6342:                 while (ref->start_offset != raw_offset)",
          "6343:                 {",
          "6344:                     if (ref->next)",
          "6345:                     {",
          "6346:                         ref = ref->next;",
          "6347:                         continue;",
          "6348:                     }",
          "6350:                     {",
          "6351:                         tcp_dof_packet_ref *last = ref;",
          "6354:                         ref_is_new = TRUE;",
          "6355:                         ref = (tcp_dof_packet_ref *)wmem_alloc0(wmem_file_scope(), sizeof(tcp_dof_packet_ref));",
          "6356:                         if (!ref)",
          "6357:                         {",
          "6358:                             fprintf(stderr, \"! ref\");",
          "6359:                             return offset;",
          "6360:                         }",
          "6362:                         ref->transport_packet.sender_id = last->transport_packet.sender_id;",
          "6363:                         ref->transport_packet.receiver_id = last->transport_packet.receiver_id;",
          "6364:                         ref->start_offset = raw_offset;",
          "6365:                         last->next = ref;",
          "6366:                     }",
          "6367:                 }",
          "6369:                 if (ref_is_new)",
          "6370:                 {",
          "6371:                     dof_transport_packet *tp = &(ref->transport_packet);",
          "6373:                     tp->is_sent_by_client = FALSE;",
          "6374:                     if (addresses_equal(&session->client.addr, &pinfo->src) &&",
          "6375:                         (session->client.port == pinfo->srcport))",
          "6376:                         tp->is_sent_by_client = TRUE;",
          "6378:                     ref->api_data.transport_session = (dof_transport_session *)&(session->common);",
          "6379:                     ref->api_data.transport_packet = tp;",
          "6380:                 }",
          "6383:                 {",
          "6384:                     dissect_tunnel_common(next_tvb, pinfo, tree, ref);",
          "6385:                 }",
          "6386:             }",
          "6388:             offset += packet_length;",
          "6389:         }",
          "6391:         return tvb_captured_length(tvb);",
          "6392:     }",
          "6393: }",
          "6397: static int dissect_dnp_0(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "6398: {",
          "6399:     guint offset = 0;",
          "6401:     guint8 dnp_flags_included = 0;",
          "6403:     offset = 0;",
          "6404:     col_clear(pinfo->cinfo, COL_INFO);",
          "6409:     {",
          "6410:         guint8 header = tvb_get_guint8(tvb, offset);",
          "6412:         dnp_flags_included = (header & 0x80) != 0;",
          "6414:         offset += 1;",
          "6416:         {",
          "6417:             col_set_str(pinfo->cinfo, COL_PROTOCOL, \"DNPv0 \");",
          "6419:             if (dnp_flags_included)",
          "6420:             {",
          "6422:             }",
          "6424:             if (tvb_reported_length(tvb) == offset)",
          "6425:                 col_set_str(pinfo->cinfo, COL_INFO, \"Query\");",
          "6426:             else",
          "6427:             {",
          "6428:                 guint8 first = tvb_get_guint8(tvb, offset);",
          "6429:                 if (first == 0)",
          "6430:                 {",
          "6432:                     col_set_str(pinfo->cinfo, COL_INFO, \"Query\");",
          "6433:                     proto_tree_add_item(tree, hf_2008_1_dnp_0_1_1_padding, tvb, offset, -1, ENC_NA);",
          "6434:                 }",
          "6435:                 else",
          "6436:                 {",
          "6438:                     col_set_str(pinfo->cinfo, COL_INFO, \"Query Response\");",
          "6439:                     while (first)",
          "6440:                     {",
          "6441:                         proto_tree_add_item(tree, hf_2008_1_dnp_0_1_1_version, tvb, offset, 1, ENC_NA);",
          "6442:                         offset += 1;",
          "6443:                         if (offset == tvb_reported_length(tvb))",
          "6444:                             break;",
          "6446:                         first = tvb_get_guint8(tvb, offset);",
          "6447:                     }",
          "6449:                     if (offset < tvb_reported_length(tvb))",
          "6450:                         proto_tree_add_item(tree, hf_2008_1_dnp_0_1_1_padding, tvb, offset, -1, ENC_NA);",
          "6451:                 }",
          "6452:             }",
          "6453:         }",
          "6454:     }",
          "6456:     col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "6457:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "6458:     return tvb_reported_length(tvb);",
          "6459: }",
          "6467: static int determine_packet_length_1(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree _U_, void *data)",
          "6468: {",
          "6470:     gint offset = *((gint *)data);",
          "6472:     {",
          "6473:         gint available = tvb_ensure_captured_length_remaining(tvb, offset);",
          "6474:         guint8 header, flags;",
          "6475:         guint8 size;",
          "6476:         guint8 i;",
          "6477:         gint data_len, header_len;",
          "6479:         if (available < 2)",
          "6480:             return 0;",
          "6482:         header = tvb_get_guint8(tvb, offset);",
          "6483:         data_len = 0;",
          "6485:         if ((header & 0x80) == 0)",
          "6486:         {",
          "6488:             data_len = 0;",
          "6489:             header_len = 2;",
          "6490:             size = 0;",
          "6491:         }",
          "6492:         else",
          "6493:         {",
          "6494:             flags = tvb_get_guint8(tvb, offset + 1);",
          "6495:             size = flags & 0x03;",
          "6496:             header_len = 2 + size;",
          "6497:         }",
          "6499:         if (available < header_len)",
          "6500:             return 0;",
          "6502:         for (i = 0; i < size; i++)",
          "6503:             data_len = data_len * 256 + tvb_get_guint8(tvb, offset + 2 + i);",
          "6505:         return header_len + data_len;",
          "6506:     }",
          "6507: }",
          "6509: static int dissect_dnp_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "6510: {",
          "6511:     gint offset = 0;",
          "6512:     dof_api_data *api_data = (dof_api_data *)data;",
          "6513:     dof_packet_data *packet;",
          "6515:     gint8 dnp_version = -1;",
          "6516:     guint8 dnp_flags_included = 0;",
          "6517:     guint8 dnp_length_length = 0;",
          "6518:     guint32 dnp_flags = 0;",
          "6520:     guint length = 0;",
          "6521:     guint encapsulated_length = 0;",
          "6523:     int i;",
          "6525:     proto_tree *dnp_tree = tree;",
          "6527:     if (!api_data)",
          "6528:     {",
          "6530:         return 0;",
          "6531:     }",
          "6533:     if (!api_data->packet)",
          "6534:     {",
          "6536:         return 0;",
          "6537:     }",
          "6539:     packet = api_data->packet;",
          "6541:     offset = 0;",
          "6542:     col_clear(pinfo->cinfo, COL_INFO);",
          "6547:     {",
          "6548:         guint8 header = tvb_get_guint8(tvb, offset);",
          "6549:         guint32 dnp_src_port = 0;",
          "6550:         guint32 dnp_dst_port = 0;",
          "6552:         dnp_version = header & 0x7F;",
          "6553:         dnp_flags_included = (header & 0x80) != 0;",
          "6556:         offset += 1;",
          "6558:         {",
          "6559:             col_set_str(pinfo->cinfo, COL_PROTOCOL, \"DNPv1 \");",
          "6561:             if (dnp_flags_included)",
          "6562:             {",
          "6566:                 dnp_flags = tvb_get_guint8(tvb, offset);",
          "6567:                 if ((dnp_flags & 0xF0) != 0)",
          "6568:                     expert_add_info(pinfo, NULL, &ei_dof_10_flags_zero);",
          "6570:                 proto_tree_add_bitmask(dnp_tree, tvb, offset, hf_2009_9_dnp_1_flags, ett_2009_9_dnp_1_flags, bitmask_2009_9_dnp_1_flags, ENC_BIG_ENDIAN);",
          "6572:                 offset += 1;",
          "6573:             }",
          "6574:             else",
          "6575:                 dnp_flags = DNP_V1_DEFAULT_FLAGS;",
          "6578:             dnp_length_length = dnp_flags & 0x03;",
          "6579:             if (dnp_length_length)",
          "6580:                 proto_tree_add_item(dnp_tree, hf_2009_9_dnp_1_length, tvb, offset, dnp_length_length, ENC_BIG_ENDIAN);",
          "6583:             length = 0;",
          "6584:             for (i = 0; i < dnp_length_length; i++)",
          "6585:                 length = (length << 8) | tvb_get_guint8(tvb, offset + i);",
          "6589:             {",
          "6590:             expert_add_info( pinfo, NULL, &ei_dof_13_length_specified );",
          "6593:             offset += dnp_length_length;",
          "6596:             if (dnp_length_length == 0)",
          "6597:                 length = tvb_reported_length(tvb) - offset;",
          "6599:             encapsulated_length = length;",
          "6602:             if (dnp_flags & 0x04)",
          "6603:             {",
          "6604:                 gint s_offset = offset;",
          "6605:                 proto_item *item;",
          "6606:                 gint dnp_src_port_len;",
          "6608:                 offset = read_c3(tvb, offset, &dnp_src_port, &dnp_src_port_len);",
          "6609:                 item = proto_tree_add_uint_format(dnp_tree, hf_2009_9_dnp_1_srcport, tvb, s_offset, offset - s_offset, dnp_src_port, \"Source Address: %u\", dnp_src_port);",
          "6610:                 validate_c3(pinfo, item, dnp_src_port, dnp_src_port_len);",
          "6611:                 encapsulated_length -= (offset - s_offset);",
          "6612:             }",
          "6613:             else",
          "6614:             {",
          "6615:                 proto_item *item = proto_tree_add_uint_format(dnp_tree, hf_2009_9_dnp_1_srcport, tvb, 0, 0, 0, \"Source Address: %u\", 0);",
          "6616:                 PROTO_ITEM_SET_GENERATED(item);",
          "6617:             }",
          "6620:             if (dnp_flags & 0x08)",
          "6621:             {",
          "6622:                 gint s_offset = offset;",
          "6623:                 gint dnp_dst_port_len;",
          "6624:                 proto_item *item;",
          "6626:                 offset = read_c3(tvb, offset, &dnp_dst_port, &dnp_dst_port_len);",
          "6627:                 item = proto_tree_add_uint_format(dnp_tree, hf_2009_9_dnp_1_dstport, tvb, s_offset, offset - s_offset, dnp_dst_port, \"Destination Address: %u\", dnp_dst_port);",
          "6628:                 validate_c3(pinfo, item, dnp_dst_port, dnp_dst_port_len);",
          "6629:                 encapsulated_length -= (offset - s_offset);",
          "6630:             }",
          "6631:             else",
          "6632:             {",
          "6633:                 proto_item *item = proto_tree_add_uint_format(dnp_tree, hf_2009_9_dnp_1_dstport, tvb, 0, 0, 0, \"Destination Address: %u\", 0);",
          "6634:                 PROTO_ITEM_SET_GENERATED(item);",
          "6635:             }",
          "6636:         }",
          "6638:         proto_item_set_end(tree, tvb, offset);",
          "6641:         if (api_data->session == NULL)",
          "6642:         {",
          "6643:             guint32 client;",
          "6644:             guint32 server;",
          "6646:             if (api_data->transport_packet->is_sent_by_client)",
          "6647:             {",
          "6648:                 client = dnp_src_port;",
          "6649:                 server = dnp_dst_port;",
          "6650:             }",
          "6651:             else",
          "6652:             {",
          "6653:                 client = dnp_dst_port;",
          "6654:                 server = dnp_src_port;",
          "6655:             }",
          "6657:             api_data->session = dof_ns_session_retrieve(api_data->transport_session->transport_session_id, client, server);",
          "6658:             if (api_data->session == NULL)",
          "6659:             {",
          "6660:                 dof_session_data *sdata = (dof_session_data *)wmem_alloc0(wmem_file_scope(), sizeof(dof_session_data));",
          "6661:                 dof_ns_session_define(api_data->transport_session->transport_session_id, client, server, sdata);",
          "6662:                 sdata->session_id = globals.next_session++;",
          "6663:                 sdata->dof_id = dnp_version;",
          "6664:                 api_data->session = sdata;",
          "6665:             }",
          "6666:         }",
          "6668:         packet->sender_id = dnp_src_port;",
          "6669:         packet->receiver_id = dnp_dst_port;",
          "6674:         {",
          "6675:             tvbuff_t *next_tvb = tvb_new_subset(tvb, offset, encapsulated_length, tvb_reported_length(tvb) - offset);",
          "6676:             offset += dof_dissect_dpp_common(next_tvb, pinfo, proto_item_get_parent(tree), data);",
          "6677:         }",
          "6678:     }",
          "6680:     col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "6681:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "6682:     return offset;",
          "6683: }",
          "6685: static int dissect_dpp_0(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "6686: {",
          "6687:     guint offset = 0;",
          "6689:     guint8 dpp_flags_included = 0;",
          "6691:     offset = 0;",
          "6692:     col_clear(pinfo->cinfo, COL_INFO);",
          "6697:     {",
          "6698:         guint8 header = tvb_get_guint8(tvb, offset);",
          "6700:         dpp_flags_included = (header & 0x80) != 0;",
          "6702:         offset += 1;",
          "6704:         {",
          "6705:             col_set_str(pinfo->cinfo, COL_PROTOCOL, \"DPPv0 \");",
          "6707:             if (dpp_flags_included)",
          "6708:             {",
          "6710:             }",
          "6712:             if (tvb_reported_length(tvb) == offset)",
          "6713:                 col_set_str(pinfo->cinfo, COL_INFO, \"Query\");",
          "6714:             else",
          "6715:             {",
          "6716:                 guint8 first = tvb_get_guint8(tvb, offset);",
          "6718:                 col_set_str(pinfo->cinfo, COL_INFO, \"Query Response\");",
          "6719:                 while (first)",
          "6720:                 {",
          "6721:                     proto_tree_add_item(tree, hf_2008_1_dpp_0_1_1_version, tvb, offset, 1, ENC_NA);",
          "6722:                     offset += 1;",
          "6723:                     if (offset == tvb_reported_length(tvb))",
          "6724:                         break;",
          "6726:                     first = tvb_get_guint8(tvb, offset);",
          "6727:                 }",
          "6728:             }",
          "6729:         }",
          "6730:     }",
          "6732:     col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "6733:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "6734:     return tvb_reported_length(tvb);",
          "6735: }",
          "6737: static int dissect_dpp_v2_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "6738: {",
          "6739:     dof_api_data *api_data = (dof_api_data *)data;",
          "6740:     dof_packet_data *packet_data;",
          "6741:     gint offset = 0;",
          "6742:     guint8 opcode;",
          "6743:     guint16 app;",
          "6744:     gint app_len;",
          "6745:     proto_item *ti;",
          "6746:     proto_tree *dpps_tree;",
          "6747:     proto_tree *opid_tree;",
          "6749:     if (api_data == NULL)",
          "6750:     {",
          "6752:         return 0;",
          "6753:     }",
          "6755:     packet_data = api_data->packet;",
          "6756:     if (packet_data == NULL)",
          "6757:     {",
          "6759:         return 0;",
          "6760:     }",
          "6763:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"DPPs \");",
          "6766:     offset = 0;",
          "6767:     ti = proto_tree_add_item(tree, proto_2009_12_dpp_common, tvb, offset, -1, ENC_NA);",
          "6768:     dpps_tree = proto_item_add_subtree(ti, ett_2009_12_dpp_common);",
          "6771:     offset = read_c2(tvb, offset, &app, &app_len);",
          "6772:     ti = proto_tree_add_uint(dpps_tree, hf_2008_1_app_version, tvb, 0, app_len, app);",
          "6773:     validate_c2(pinfo, ti, app, app_len);",
          "6777:     opcode = tvb_get_guint8(tvb, offset);",
          "6778:     if (!packet_data->is_command)",
          "6779:         opcode |= OP_2009_12_RESPONSE_FLAG;",
          "6781:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", val_to_str(opcode, strings_2009_12_dpp_common_opcodes, \"Unknown Opcode (%d)\"));",
          "6784:     proto_tree_add_uint_format(dpps_tree, hf_2009_12_dpp_2_14_opcode, tvb, offset, 1, opcode & 0x3F, \"Opcode: %s (%u)\", val_to_str(opcode, strings_2009_12_dpp_common_opcodes, \"Unknown Opcode (%d)\"), opcode & 0x3F);",
          "6785:     offset += 1;",
          "6787:     switch (opcode)",
          "6788:     {",
          "6789:     case OP_2009_12_SOURCE_LOST_CMD:",
          "6790:     case OP_2009_12_SOURCE_FOUND_CMD:",
          "6791:     case OP_2009_12_RENAME_CMD:",
          "6792:         packet_data->has_referenced_opid = TRUE;",
          "6796:     case OP_2009_12_CANCEL_ALL_CMD:",
          "6797:     case OP_2009_12_NODE_DOWN_CMD:",
          "6798:     case OP_2009_12_QUERY_RSP:",
          "6800:     {",
          "6801:         proto_tree *oid_tree;",
          "6802:         gint opid_len;",
          "6803:         tvbuff_t *next_tvb;",
          "6805:         if (packet_data->has_referenced_opid)",
          "6806:         {",
          "6807:             opid_tree = proto_tree_add_subtree(dpps_tree, tvb, offset, 0, ett_2009_12_dpp_2_opid, NULL, \"Operation Identifier\");",
          "6808:         }",
          "6809:         else",
          "6810:         {",
          "6811:             opid_tree = dpps_tree;",
          "6812:         }",
          "6814:         oid_tree = proto_tree_add_subtree(opid_tree, tvb, offset, 0, ett_2009_12_dpp_2_opid, NULL, \"Source Identifier\");",
          "6816:         next_tvb = tvb_new_subset(tvb, offset, -1, tvb_reported_length(tvb) - offset);",
          "6817:         opid_len = call_dissector_only(dof_oid_handle, next_tvb, pinfo, oid_tree, NULL);",
          "6819:         learn_sender_sid(api_data, opid_len, tvb_get_ptr(next_tvb, 0, opid_len));",
          "6820:         if (packet_data->has_referenced_opid)",
          "6821:             learn_operation_sid(&packet_data->ref_op, opid_len, tvb_get_ptr(next_tvb, 0, opid_len));",
          "6823:         offset += opid_len;",
          "6824:     }",
          "6826:         if (packet_data->has_referenced_opid)",
          "6827:         {",
          "6828:             guint32 opcnt;",
          "6829:             gint opcnt_len;",
          "6830:             proto_item *pi;",
          "6832:             read_c4(tvb, offset, &opcnt, &opcnt_len);",
          "6833:             pi = proto_tree_add_uint_format(opid_tree, hf_2009_12_dpp_2_1_opcnt, tvb, offset, opcnt_len, opcnt, \"Operation Count: %u\", opcnt);",
          "6834:             validate_c4(pinfo, pi, opcnt, opcnt_len);",
          "6835:             offset += opcnt_len;",
          "6837:             packet_data->ref_op.op_cnt = opcnt;",
          "6838:         }",
          "6840:         break;",
          "6841:     }",
          "6842:     return offset;",
          "6843: }",
          "6845: static int dissect_dpp_2(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "6846: {",
          "6847:     dof_api_data *api_data = (dof_api_data *)data;",
          "6848:     dof_packet_data *packet_data;",
          "6850:     proto_item *ti = NULL;",
          "6851:     proto_item *tf = NULL;",
          "6852:     proto_item *opid = NULL;",
          "6854:     gint opid_start = -1;",
          "6855:     guint8 dpp_flags_included = 0;",
          "6856:     guint32 dpp_flags = 0;",
          "6857:     guint8 dpp_opid_keytype = 0;",
          "6859:     proto_tree *dpp_flags_tree;",
          "6860:     proto_tree *opid_tree = NULL;",
          "6863:     gint offset = 0;",
          "6865:     proto_tree *dpp_tree = tree;",
          "6867:     if (api_data == NULL)",
          "6868:     {",
          "6870:         return 0;",
          "6871:     }",
          "6873:     packet_data = api_data->packet;",
          "6874:     if (packet_data == NULL)",
          "6875:     {",
          "6877:         return 0;",
          "6878:     }",
          "6881:     assign_sid_id(api_data);",
          "6883:     offset = 0;",
          "6884:     col_clear(pinfo->cinfo, COL_INFO);",
          "6889:     {",
          "6890:         guint8 header = tvb_get_guint8(tvb, offset);",
          "6891:         dpp_flags_included = (header & 0x80) != 0;",
          "6892:         offset += 1;",
          "6894:         {",
          "6895:             col_set_str(pinfo->cinfo, COL_PROTOCOL, \"DPPv2 \");",
          "6897:             ti = proto_tree_add_uint_format(tree, hf_2008_1_dpp_sid_num, tvb,",
          "6898:                                             0, 0, packet_data->sender_sid_id, \"SID ID: %d\", packet_data->sender_sid_id);",
          "6899:             PROTO_ITEM_SET_GENERATED(ti);",
          "6901:             if (packet_data->sender_sid)",
          "6902:             {",
          "6903:                 const gchar *SID = dof_oid_create_standard_string(packet_data->sender_sid[0], packet_data->sender_sid + 1);",
          "6904:                 ti = proto_tree_add_bytes_format_value(tree, hf_2008_1_dpp_sid_str, tvb, 0, 0, packet_data->sender_sid, \"%s\", SID);",
          "6905:                 PROTO_ITEM_SET_GENERATED(ti);",
          "6906:             }",
          "6908:             ti = proto_tree_add_uint_format(tree, hf_2008_1_dpp_rid_num, tvb,",
          "6909:                                             0, 0, packet_data->receiver_sid_id, \"RID ID: %d\", packet_data->receiver_sid_id);",
          "6910:             PROTO_ITEM_SET_GENERATED(ti);",
          "6912:             if (packet_data->receiver_sid)",
          "6913:             {",
          "6914:                 const gchar *SID = dof_oid_create_standard_string(packet_data->receiver_sid[0], packet_data->receiver_sid + 1);",
          "6915:                 ti = proto_tree_add_bytes_format_value(tree, hf_2008_1_dpp_rid_str, tvb, 0, 0, packet_data->receiver_sid, \"%s\", SID);",
          "6916:                 PROTO_ITEM_SET_GENERATED(ti);",
          "6917:             }",
          "6919:             if (dpp_flags_included)",
          "6920:             {",
          "6921:                 dpp_flags = tvb_get_guint8(tvb, offset);",
          "6922:                 if (((dpp_flags & 0x10) != 0) && ((dpp_flags & 0x0F) != 0))",
          "6923:                     expert_add_info(pinfo, NULL, &ei_dpp2_dof_10_flags_zero);",
          "6924:                 if (((dpp_flags & 0x10) == 0) && ((dpp_flags & 0x09) != 0))",
          "6925:                     expert_add_info(pinfo, NULL, &ei_dpp2_dof_10_flags_zero);",
          "6927:                 tf = proto_tree_add_uint_format(dpp_tree, hf_2009_12_dpp_2_1_flags, tvb,",
          "6928:                                                 offset, 1, dpp_flags, \"Flags: 0x%02x\", dpp_flags);",
          "6930:                 dpp_flags_tree = proto_item_add_subtree(tf, ett_2009_12_dpp_2_1_flags);",
          "6932:                 if (dpp_flags == DPP_V2_DEFAULT_FLAGS)",
          "6933:                     expert_add_info(pinfo, dpp_flags_tree, &ei_dpp_default_flags);",
          "6935:                 proto_tree_add_item(dpp_flags_tree, hf_2009_12_dpp_2_1_flag_security, tvb, offset, 1, ENC_NA);",
          "6936:                 proto_tree_add_item(dpp_flags_tree, hf_2009_12_dpp_2_1_flag_opid, tvb, offset, 1, ENC_NA);",
          "6937:                 proto_tree_add_item(dpp_flags_tree, hf_2009_12_dpp_2_1_flag_cmdrsp, tvb, offset, 1, ENC_NA);",
          "6938:                 if ((dpp_flags & 0x10) == 0)",
          "6939:                 {",
          "6940:                     proto_tree_add_item(dpp_flags_tree, hf_2009_12_dpp_2_1_flag_seq, tvb, offset, 1, ENC_NA);",
          "6941:                     proto_tree_add_item(dpp_flags_tree, hf_2009_12_dpp_2_1_flag_retry, tvb, offset, 1, ENC_NA);",
          "6942:                 }",
          "6944:                 offset += 1;",
          "6945:             }",
          "6946:             else",
          "6947:                 dpp_flags = DPP_V2_DEFAULT_FLAGS;",
          "6949:             packet_data->is_command = (dpp_flags & 0x10) == 0;",
          "6953:             {",
          "6954:             col_set_str( pinfo->cinfo, COL_INFO, \"DPS Negotiation\" );",
          "6955:             return 1;",
          "6958:             dpp_opid_keytype = (dpp_flags & 0x60) >> 5;",
          "6959:             switch (dpp_opid_keytype)",
          "6960:             {",
          "6962:                 packet_data->has_opid = FALSE;",
          "6963:                 break;",
          "6966:                 packet_data->has_opid = TRUE;",
          "6967:                 packet_data->op.op_sid_id = packet_data->sender_sid_id;",
          "6968:                 packet_data->op.op_sid = packet_data->sender_sid;",
          "6969:                 break;",
          "6972:                 packet_data->has_opid = TRUE;",
          "6973:                 packet_data->op.op_sid_id = packet_data->receiver_sid_id;",
          "6974:                 packet_data->op.op_sid = packet_data->receiver_sid;",
          "6975:                 break;",
          "6978:                 packet_data->has_opid = TRUE;",
          "6979:                 break;",
          "6980:             }",
          "6982:             if (dpp_opid_keytype != 0)",
          "6983:             {",
          "6984:                 opid_start = offset;",
          "6985:                 opid_tree = proto_tree_add_subtree(dpp_tree, tvb, offset, 0, ett_2009_12_dpp_2_opid, NULL, \"Operation Identifier\");",
          "6986:             }",
          "6988:             switch (dpp_opid_keytype)",
          "6989:             {",
          "6991:                 break;",
          "6994:             {",
          "6995:                 proto_tree *oid_tree;",
          "6996:                 tvbuff_t *next_tvb;",
          "6997:                 gint opid_len;",
          "6999:                 oid_tree = proto_tree_add_subtree(opid_tree, tvb, offset, 0, ett_2009_12_dpp_2_opid, NULL, \"Source Identifier\");",
          "7001:                 next_tvb = tvb_new_subset(tvb, offset, -1, tvb_reported_length(tvb) - offset);",
          "7002:                 opid_len = call_dissector_only(dof_oid_handle, next_tvb, pinfo, oid_tree, NULL);",
          "7003:                 proto_item_set_len(oid_tree, opid_len);",
          "7005:                 learn_operation_sid(&packet_data->op, opid_len, tvb_get_ptr(next_tvb, 0, opid_len));",
          "7008:                 if (packet_data->op.op_sid_id == packet_data->sender_sid_id)",
          "7009:                     expert_add_info(pinfo, ti, &ei_dpp_explicit_sender_sid_included);",
          "7010:                 if (packet_data->op.op_sid_id == packet_data->receiver_sid_id)",
          "7011:                     expert_add_info(pinfo, ti, &ei_dpp_explicit_receiver_sid_included);",
          "7013:                 offset += opid_len;",
          "7014:             }",
          "7020:             {",
          "7021:                 guint32 opcnt;",
          "7022:                 gint opcnt_len;",
          "7023:                 proto_item *pi;",
          "7026:                 if ((dpp_opid_keytype != 3) && packet_data->op.op_sid)",
          "7027:                 {",
          "7028:                     proto_tree *oid_tree;",
          "7030:                     tvbuff_t *next_tvb = tvb_new_child_real_data(tvb, packet_data->op.op_sid + 1, packet_data->op.op_sid[0], packet_data->op.op_sid[0]);",
          "7031:                     oid_tree = proto_tree_add_subtree(opid_tree, tvb, 0, 0, ett_2009_12_dpp_2_opid, NULL, \"Source Identifier\");",
          "7033:                     call_dissector_only(dof_oid_handle, next_tvb, pinfo, oid_tree, NULL);",
          "7035:                     PROTO_ITEM_SET_GENERATED(ti);",
          "7036:                 }",
          "7038:                 read_c4(tvb, offset, &opcnt, &opcnt_len);",
          "7039:                 pi = proto_tree_add_uint_format(opid_tree, hf_2009_12_dpp_2_1_opcnt, tvb, offset, opcnt_len, opcnt, \"Operation Count: %u\", opcnt);",
          "7040:                 validate_c4(pinfo, pi, opcnt, opcnt_len);",
          "7041:                 offset += opcnt_len;",
          "7043:                 proto_item_set_len(opid, offset - opid_start);",
          "7045:                 packet_data->op.op_cnt = opcnt;",
          "7051:                 if (packet_data->has_opid && !packet_data->opid_first)",
          "7052:                 {",
          "7053:                     dof_packet_data *first = (dof_packet_data *)g_hash_table_lookup(dpp_opid_to_packet_data, (gconstpointer) & packet_data->op);",
          "7054:                     if (first == NULL)",
          "7055:                     {",
          "7057:                         g_hash_table_insert(dpp_opid_to_packet_data, (gpointer) & packet_data->op, (gpointer)packet_data);",
          "7058:                         packet_data->opid_first = packet_data;",
          "7059:                         packet_data->opid_last = packet_data;",
          "7062:                     }",
          "7063:                     else",
          "7064:                     {",
          "7066:                         packet_data->opid_first = first;",
          "7067:                         first->opid_last->opid_next = packet_data;",
          "7068:                         first->opid_last = packet_data;",
          "7070:                         if (!packet_data->is_command)",
          "7071:                         {",
          "7072:                             if (!first->opid_first_response)",
          "7073:                             {",
          "7074:                                 first->opid_first_response = packet_data;",
          "7075:                                 first->opid_last_response = packet_data;",
          "7076:                             }",
          "7077:                             else",
          "7078:                             {",
          "7079:                                 first->opid_last_response->opid_next_response = packet_data;",
          "7080:                                 first->opid_last_response = packet_data;",
          "7081:                             }",
          "7082:                         }",
          "7083:                     }",
          "7084:                 }",
          "7088:                 if (globals.track_operations && tree)",
          "7089:                 {",
          "7090:                     proto_tree *ophistory_tree = proto_tree_add_subtree(tree, tvb, 0, 0, ett_2009_12_dpp_2_opid_history, NULL, \"Operation History\");",
          "7092:                     dof_packet_data *ptr = packet_data->opid_first;",
          "7094:                     if (ptr)",
          "7095:                         proto_tree_add_uint_format(ophistory_tree, hf_2008_1_dpp_first_command,",
          "7096:                                                    tvb, 0, 0, ptr->frame,",
          "7097:                                                    \"First Operation: %u\",",
          "7098:                                                    ptr->frame);",
          "7100:                     if (ptr->opid_last && ptr->opid_last != ptr)",
          "7101:                         proto_tree_add_uint_format(ophistory_tree, hf_2008_1_dpp_last_command,",
          "7102:                                                    tvb, 0, 0, ptr->opid_last->frame,",
          "7103:                                                    \"Last Operation: %u\",",
          "7104:                                                    ptr->opid_last->frame);",
          "7106:                     if (ptr->opid_first_response)",
          "7107:                         proto_tree_add_uint_format(ophistory_tree, hf_2008_1_dpp_first_response,",
          "7108:                                                    tvb, 0, 0, ptr->opid_first_response->frame,",
          "7109:                                                    \"First Response: %u\",",
          "7110:                                                    ptr->opid_first_response->frame);",
          "7112:                     if (ptr->opid_last_response && ptr->opid_last_response != ptr->opid_first_response)",
          "7113:                         proto_tree_add_uint_format(ophistory_tree, hf_2008_1_dpp_last_response,",
          "7114:                                                    tvb, 0, 0, ptr->opid_last_response->frame,",
          "7115:                                                    \"Last Response: %u\",",
          "7116:                                                    ptr->opid_last_response->frame);",
          "7121:                     {",
          "7122:                         dof_packet_data *start = packet_data->opid_first;",
          "7123:                         guint diff = 0;",
          "7124:                         while (ptr)",
          "7125:                         {",
          "7126:                             if (ptr == packet_data)",
          "7127:                                 break;",
          "7129:                             ptr = ptr->opid_next;",
          "7130:                             diff += 1;",
          "7132:                             if (diff > globals.track_operations_window)",
          "7133:                             {",
          "7134:                                 start = start->opid_next;",
          "7135:                                 diff -= 1;",
          "7136:                             }",
          "7137:                         }",
          "7139:                         ptr = start;",
          "7140:                         diff = 0;",
          "7142:                         while (ptr)",
          "7143:                         {",
          "7144:                             const char *THIS = \"\";",
          "7146:                             if (ptr == packet_data)",
          "7147:                             {",
          "7148:                                 THIS = \"this \";",
          "7149:                                 diff = globals.track_operations_window + 1;",
          "7150:                             }",
          "7153:                             proto_tree_add_uint_format(ophistory_tree, hf_2008_1_dpp_related_frame,",
          "7154:                                                        tvb, 0, 0, ptr->frame,",
          "7155:                                                        \"%u[ws %u]: %u->%u: %s%s\",",
          "7156:                                                        ptr->dof_frame, ptr->frame,",
          "7157:                                                        ptr->sender_sid_id, ptr->receiver_sid_id,",
          "7158:                                                        THIS,",
          "7159:                                                        ptr->summary ? ptr->summary : \"\");",
          "7161:                             ptr = ptr->opid_next;",
          "7162:                             if (diff && !--diff)",
          "7163:                                 break;",
          "7164:                         }",
          "7165:                     }",
          "7166:                 }",
          "7167:             }",
          "7168:                 break;",
          "7169:             }",
          "7171:             proto_item_set_len(opid_tree, offset - opid_start);",
          "7173:             {",
          "7174:                 if ((dpp_flags & 0x10) == 0)",
          "7175:                 {",
          "7176:                     guint8 dpp_seq = 0;",
          "7177:                     guint8 dpp_retry = 0;",
          "7178:                     guint16 dpp_delay = 0;",
          "7181:                     if (dpp_flags & 0x04)",
          "7182:                     {",
          "7183:                         dpp_seq = tvb_get_guint8(tvb, offset);",
          "7184:                         proto_tree_add_uint_format(dpp_tree, hf_2009_12_dpp_2_1_seq, tvb, offset, 1, dpp_seq, \"Sequence: %u\", dpp_seq);",
          "7185:                         offset += 1;",
          "7186:                     }",
          "7189:                     if (dpp_flags & 0x02)",
          "7190:                     {",
          "7191:                         dpp_retry = tvb_get_guint8(tvb, offset);",
          "7192:                         proto_tree_add_uint_format(dpp_tree, hf_2009_12_dpp_2_1_retry, tvb, offset, 1, dpp_retry, \"Retry: %u\", dpp_retry);",
          "7193:                         offset += 1;",
          "7194:                     }",
          "7197:                     {",
          "7198:                         dpp_delay = tvb_get_guint8(tvb, offset);",
          "7199:                         if (dpp_delay > 128)",
          "7200:                             dpp_delay = 128 + ((dpp_delay - 128) * 32);",
          "7202:                         proto_tree_add_uint_format(dpp_tree, hf_2009_12_dpp_2_1_delay, tvb, offset, 1, dpp_delay, \"Delay: %u seconds\", dpp_delay);",
          "7203:                         offset += 1;",
          "7204:                     }",
          "7206:                     packet_data->summary = wmem_strdup_printf(wmem_file_scope(), \"command seq %u, retry %u, delay %u\", dpp_seq, dpp_retry, dpp_delay);",
          "7207:                 }",
          "7208:                 else",
          "7209:                     packet_data->summary = \"response\";",
          "7210:             }",
          "7213:             if (dpp_flags & 0x80)",
          "7214:             {",
          "7215:                 guint32 sec_offset = offset;",
          "7216:                 guint8 sh_flags;",
          "7217:                 guint32 ssid;",
          "7218:                 proto_tree *security_tree;",
          "7219:                 proto_tree *sec_flags_tree;",
          "7220:                 proto_item *item;",
          "7222:                 security_tree = proto_tree_add_subtree(dpp_tree, tvb, offset, -1, ett_2009_12_dpp_2_3_security, NULL, \"Security Header\");",
          "7224:                 sh_flags = tvb_get_guint8(tvb, offset);",
          "7225:                 item = proto_tree_add_uint_format(security_tree, hf_2009_12_dpp_2_3_sec_flags, tvb,",
          "7226:                                                   offset, 1, sh_flags, \"Flags: 0x%02x\", sh_flags);",
          "7228:                 sec_flags_tree = proto_item_add_subtree(item, ett_2009_12_dpp_2_3_sec_flags);",
          "7229:                 proto_tree_add_item(sec_flags_tree, hf_2009_12_dpp_2_3_sec_flag_secure, tvb, offset, 1, ENC_NA);",
          "7230:                 proto_tree_add_item(sec_flags_tree, hf_2009_12_dpp_2_3_sec_flag_rdid, tvb, offset, 1, ENC_NA);",
          "7231:                 proto_tree_add_item(sec_flags_tree, hf_2009_12_dpp_2_3_sec_flag_partition, tvb, offset, 1, ENC_NA);",
          "7232:                 proto_tree_add_item(sec_flags_tree, hf_2009_12_dpp_2_3_sec_flag_as, tvb, offset, 1, ENC_NA);",
          "7233:                 proto_tree_add_item(sec_flags_tree, hf_2009_12_dpp_2_3_sec_flag_ssid, tvb, offset, 1, ENC_NA);",
          "7234:                 offset += 1;",
          "7236:                 ssid = 0;",
          "7237:                 if (sh_flags & DPP_V2_SEC_FLAG_S)",
          "7238:                 {",
          "7239:                     gint s_offset = offset;",
          "7240:                     gint ssid_len;",
          "7241:                     proto_item *pi;",
          "7242:                     offset = read_c4(tvb, offset, &ssid, &ssid_len);",
          "7243:                     pi = proto_tree_add_uint_format(security_tree, hf_2009_12_dpp_2_3_sec_ssid, tvb, s_offset, offset - s_offset, ssid, \"Security State Identifier: %u (0x%x)\", ssid, ssid);",
          "7244:                     validate_c4(pinfo, pi, ssid, ssid_len);",
          "7245:                 }",
          "7251:                 if (sh_flags & DPP_V2_SEC_FLAG_A)",
          "7252:                     ssid |= AS_ASSIGNED_SSID;",
          "7254:                 if (api_data->session && !api_data->secure_session)",
          "7255:                 {",
          "7256:                     dof_secure_session_data *search = api_data->session->secure_sessions;",
          "7257:                     while (search)",
          "7258:                     {",
          "7259:                         if (ssid == search->ssid)",
          "7260:                             break;",
          "7262:                         search = search->next;",
          "7263:                     }",
          "7265:                     if (search)",
          "7266:                     {",
          "7267:                         api_data->session = search->parent;",
          "7268:                         api_data->secure_session = search;",
          "7269:                     }",
          "7270:                 }",
          "7272:                 if (sh_flags & DPP_V2_SEC_FLAG_D)",
          "7273:                 {",
          "7274:                     gint s_offset = offset;",
          "7275:                     guint32 rdid;",
          "7276:                     gint rdid_len;",
          "7277:                     proto_item *pi;",
          "7278:                     offset = read_c4(tvb, offset, &rdid, &rdid_len);",
          "7279:                     pi = proto_tree_add_uint_format(security_tree, hf_2009_12_dpp_2_3_sec_rdid, tvb, s_offset, offset - s_offset, rdid, \"Remote Domain Identifier: %u (0x%x)\", rdid, rdid);",
          "7280:                     validate_c4(pinfo, pi, rdid, rdid_len);",
          "7282:                     offset = dof_dissect_pdu_as_field(dissect_2008_16_security_10, tvb, pinfo, security_tree,",
          "7283:                                                       offset, hf_2009_12_dpp_2_3_sec_remote_partition, ett_2009_12_dpp_2_3_sec_remote_partition, NULL);",
          "7284:                 }",
          "7286:                 if (sh_flags & DPP_V2_SEC_FLAG_P)",
          "7287:                 {",
          "7288:                     offset = dof_dissect_pdu_as_field(dissect_2008_16_security_10, tvb, pinfo, security_tree,",
          "7289:                                                       offset, hf_2009_12_dpp_2_3_sec_partition, ett_2009_12_dpp_2_3_sec_partition, NULL);",
          "7290:                 }",
          "7292:                 if (sh_flags & DPP_V2_SEC_FLAG_E)",
          "7293:                 {",
          "7295:                     if (packet_data->security_session_error)",
          "7296:                     {",
          "7297:                         col_set_str(pinfo->cinfo, COL_INFO, packet_data->security_session_error);",
          "7298:                         proto_item_set_end(tree, tvb, offset);",
          "7299:                         expert_add_info(pinfo, security_tree, &ei_dpp_no_security_context);",
          "7300:                         {",
          "7301:                             tvbuff_t *data_tvb = tvb_new_subset_remaining(tvb, offset);",
          "7302:                             call_dissector(undissected_data_handle, data_tvb, pinfo, tree);",
          "7303:                         }",
          "7304:                         proto_item_set_len(security_tree, offset - sec_offset);",
          "7305:                         return offset;",
          "7306:                     }",
          "7308:                     if (!api_data->secure_session)",
          "7309:                     {",
          "7310:                         packet_data->security_session_error = \"[Encrypted - No Session Available]\";",
          "7311:                         proto_item_set_len(security_tree, offset - sec_offset);",
          "7312:                         return offset;",
          "7313:                     }",
          "7316:                     {",
          "7317:                         dissector_table_t sec_header = find_dissector_table(\"dof.secmode\");",
          "7320:                         if (dp)",
          "7321:                         {",
          "7322:                             dof_secmode_api_data sdata;",
          "7324:                             sdata.context = HEADER;",
          "7325:                             sdata.security_mode_offset = offset;",
          "7326:                             sdata.dof_api = api_data;",
          "7327:                             sdata.secure_session = api_data->secure_session;",
          "7328:                             sdata.session_key_data = NULL;",
          "7330:                             offset += call_dissector_only(dp, tvb, pinfo, security_tree, &sdata);",
          "7332:                             if (!packet_data->decrypted_buffer)",
          "7333:                             {",
          "7334:                                 proto_item_set_end(tree, tvb, offset);",
          "7335:                                 proto_item_set_len(security_tree, offset - sec_offset);",
          "7336:                                 return offset;",
          "7337:                             }",
          "7338:                         }",
          "7339:                     }",
          "7340:                 }",
          "7341:                 proto_item_set_len(security_tree, offset - sec_offset);",
          "7342:             }",
          "7345:             proto_item_set_end(tree, tvb, offset);",
          "7346:         }",
          "7349:         if (packet_data->decrypted_tvb)",
          "7350:         {",
          "7351:             tvb = packet_data->decrypted_tvb;",
          "7352:             offset = packet_data->decrypted_offset;",
          "7353:         }",
          "7359:         {",
          "7360:             guint16 app;",
          "7361:             tvbuff_t *next_tvb = tvb_new_subset(tvb, offset, -1, tvb_reported_length(tvb) - offset);",
          "7363:             read_c2(tvb, offset, &app, NULL);",
          "7364:             if (app == 0x7FFF)",
          "7365:             {",
          "7366:                 offset += dissect_dpp_v2_common(next_tvb, pinfo, proto_item_get_parent(tree), data);",
          "7367:             }",
          "7368:             else",
          "7369:             {",
          "7370:                 offset += dissect_app_common(next_tvb, pinfo, proto_item_get_parent(tree), data);",
          "7371:             }",
          "7372:         }",
          "7373:     }",
          "7375:     col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "7376:     col_set_fence(pinfo->cinfo, COL_INFO);",
          "7377:     return offset;",
          "7378: }",
          "7380: static int dissect_options(tvbuff_t *tvb, gint offset, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "7381: {",
          "7382:     while (offset < (gint)tvb_captured_length(tvb))",
          "7383:     {",
          "7384:         proto_tree *subtree = proto_tree_add_subtree(tree, tvb, offset, 0, ett_2008_1_dsp_12_option, NULL, \"Option\");",
          "7385:         tvbuff_t *next_tvb = tvb_new_subset(tvb, offset, -1, -1);",
          "7386:         gint len = dissect_2008_1_dsp_1(next_tvb, pinfo, subtree);",
          "7387:         proto_item_set_len(proto_tree_get_parent(subtree), len);",
          "7388:         offset += len;",
          "7389:     }",
          "7391:     return offset;",
          "7392: }",
          "7394: static int dissect_dsp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "7395: {",
          "7396:     dof_api_data *api_data = (dof_api_data *)data;",
          "7397:     dof_packet_data *packet_data;",
          "7398:     guint offset = 0;",
          "7399:     guint8 opcode;",
          "7400:     guint16 app;",
          "7401:     gint app_len;",
          "7402:     proto_item *ti;",
          "7403:     proto_tree *dsp_tree;",
          "7404:     proto_tree *options_tree;",
          "7406:     if (api_data == NULL)",
          "7407:     {",
          "7409:         return 0;",
          "7410:     }",
          "7412:     packet_data = api_data->packet;",
          "7413:     if (packet_data == NULL)",
          "7414:     {",
          "7416:         return 0;",
          "7417:     }",
          "7420:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"DSPv2 \");",
          "7423:     offset = 0;",
          "7424:     ti = proto_tree_add_item(tree, proto_2008_1_dsp, tvb, offset, -1, ENC_NA);",
          "7425:     dsp_tree = proto_item_add_subtree(ti, ett_2008_1_dsp_12);",
          "7428:     offset = read_c2(tvb, offset, &app, &app_len);",
          "7429:     ti = proto_tree_add_uint(dsp_tree, hf_2008_1_app_version, tvb, 0, app_len, app);",
          "7430:     validate_c2(pinfo, ti, app, app_len);",
          "7432: #if 0",
          "7433:     if (!packet->is_streaming)",
          "7434:     {",
          "7435:         col_set_str(pinfo->cinfo, COL_PROTOCOL, \"DSPv2 \");",
          "7437:         if (tvb_captured_length(tvb) == offset)",
          "7438:         col_set_str(pinfo->cinfo, COL_INFO, \"Query\");",
          "7439:         else",
          "7440:         {",
          "7441:             col_set_str(pinfo->cinfo, COL_INFO, \"Query Response\");",
          "7442:             while (offset < tvb_captured_length(tvb))",
          "7443:             {",
          "7444:                 guint16 app;",
          "7445:                 gint start = offset;",
          "7446:                 offset = read_c2(tvb, offset, &app, NULL);",
          "7447:                 proto_tree_add_uint(dsp_tree, hf_2008_1_app_version, tvb, start, offset - start, app);",
          "7448:             }",
          "7449:         }",
          "7451:         return offset;",
          "7452:     }",
          "7453: #endif",
          "7455:     if (offset == tvb_captured_length(tvb))",
          "7456:     {",
          "7457:         col_append_str(pinfo->cinfo, COL_INFO, \"DSP [nop]\");",
          "7458:         expert_add_info(pinfo, dsp_tree, &ei_implicit_no_op);",
          "7460:         return offset;",
          "7461:     }",
          "7464:     opcode = tvb_get_guint8(tvb, offset);",
          "7466:     if (!packet_data->is_command)",
          "7467:         opcode |= OP_2008_1_RSP;",
          "7469:     proto_tree_add_uint_format(dsp_tree, hf_2008_1_dsp_12_opcode, tvb, offset, 1, opcode, \"Opcode: %s (%u)\", val_to_str(opcode, strings_2008_1_dsp_opcodes, \"Unknown Opcode (%d)\"), opcode & 0x7F);",
          "7470:     offset += 1;",
          "7471:     col_append_sep_fstr(pinfo->cinfo, COL_INFO, \"/\", \"%s\", val_to_str(opcode, strings_2008_1_dsp_opcodes, \"Unknown Opcode (%d)\"));",
          "7473:     switch (opcode)",
          "7474:     {",
          "7476:         break;",
          "7480:     {",
          "7481:         while (offset < tvb_captured_length(tvb))",
          "7482:         {",
          "7483:             guint16 ap;",
          "7484:             gint length;",
          "7485:             proto_item *pi;",
          "7486:             gint start = offset;",
          "7487:             offset = read_c2(tvb, offset, &ap, &length);",
          "7488:             pi = proto_tree_add_uint(dsp_tree, hf_2008_1_app_version, tvb, start, offset - start, ap);",
          "7489:             validate_c2(pinfo, pi, ap, length);",
          "7490:         }",
          "7491:     }",
          "7492:         break;",
          "7494:     case OP_2008_1_QUERY_CMD:",
          "7495:         break;",
          "7497:     case OP_2008_1_QUERY_RSP:",
          "7498:         break;",
          "7500:     case OP_2008_1_CONFIG_ACK:",
          "7501:         break;",
          "7503:     case OP_2008_1_CONFIG_REQ:",
          "7507:     case OP_2008_1_CONFIG_NAK:",
          "7508:     {",
          "7509:         gint length = tvb_captured_length(tvb) - offset;",
          "7511:         options_tree = proto_tree_add_subtree_format(dsp_tree, tvb, offset, length, ett_2008_1_dsp_12_options, NULL,",
          "7512:                                                      \"DSP Options: (%d byte%s)\", length, plurality(length, \"\", \"s\"));",
          "7513:         offset = dissect_options(tvb, offset, pinfo, options_tree, NULL);",
          "7514:     }",
          "7515:         break;",
          "7517:     case OP_2008_1_CONFIG_REJ:",
          "7519:         break;",
          "7521:     case OP_2008_1_TERMINATE_CMD:",
          "7522:     case OP_2008_1_TERMINATE_RSP:",
          "7524:         break;",
          "7525:     }",
          "7527:     return offset;",
          "7528: }",
          "7530: static int dissect_ccm_dsp(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "7531: {",
          "7533:     gint offset = 0;",
          "7534:     proto_item *parent = proto_tree_get_parent(tree);",
          "7535:     guint8 len, strength_count, i;",
          "7536:     proto_item *ti;",
          "7537:     proto_tree *ccm_tree;",
          "7540:     proto_item_append_text(parent, \" (CCM)\");",
          "7544:     len = tvb_get_guint8(tvb, offset++);",
          "7546:     ti = proto_tree_add_item(tree, hf_ccm_dsp_option, tvb, offset, len, ENC_NA);",
          "7547:     ccm_tree = proto_item_add_subtree(ti, ett_ccm_dsp_option);",
          "7549:     strength_count = tvb_get_guint8(tvb, offset);",
          "7550:     proto_tree_add_item(ccm_tree, hf_ccm_dsp_strength_count, tvb, offset++, 1, ENC_NA);",
          "7552:     for (i = 0; i < strength_count; i++)",
          "7553:         proto_tree_add_item(ccm_tree, hf_ccm_dsp_strength, tvb, offset++, 1, ENC_NA);",
          "7555:     proto_tree_add_item(ccm_tree, hf_ccm_dsp_e_flag, tvb, offset, 1, ENC_NA);",
          "7556:     proto_tree_add_item(ccm_tree, hf_ccm_dsp_m_flag, tvb, offset, 1, ENC_NA);",
          "7557:     proto_tree_add_item(ccm_tree, hf_ccm_dsp_tmax, tvb, offset, 1, ENC_NA);",
          "7558:     proto_tree_add_item(ccm_tree, hf_ccm_dsp_tmin, tvb, offset, 1, ENC_NA);",
          "7560:     offset += 1;",
          "7561:     return offset;",
          "7562: }",
          "7568: static int dissect_ccm(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "7569: {",
          "7570:     dof_secmode_api_data *secmode_api_data;",
          "7571:     dof_session_key_exchange_data *key_data;",
          "7573:     secmode_api_data = (dof_secmode_api_data *)data;",
          "7574:     if (secmode_api_data == NULL)",
          "7575:     {",
          "7576:         fprintf(stderr, \"secmode_api_data == NULL\");",
          "7577:         return 0;",
          "7578:     }",
          "7580:     key_data = secmode_api_data->session_key_data;",
          "7583:     switch (secmode_api_data->context)",
          "7584:     {",
          "7585:     case INITIALIZE:",
          "7589:     {",
          "7590:         ccm_session_data *ccm_data = (ccm_session_data *)key_data->security_mode_key_data;",
          "7591:         gint offset = 0;",
          "7592:         guint8 header;",
          "7593:         guint16 length;",
          "7595:         if (!ccm_data)",
          "7596:         {",
          "7598:             ccm_data = (ccm_session_data *)wmem_alloc0(wmem_file_scope(), sizeof(ccm_session_data));",
          "7599:             if (!ccm_data)",
          "7600:                 return 0;",
          "7602:             key_data->security_mode_key_data = ccm_data;",
          "7604:             if (!key_data->security_mode_data || key_data->security_mode_data_length < 3)",
          "7605:                 return 0;",
          "7608:             ccm_data->protocol_id = DOF_PROTOCOL_CCM;",
          "7609:             ccm_data->cipher = key_data->security_mode_data[1];",
          "7610:             ccm_data->encrypted = key_data->security_mode_data[key_data->security_mode_data_length - 1] & 0x80;",
          "7611:             ccm_data->mac_len = (key_data->security_mode_data[key_data->security_mode_data_length - 1] & 0x07) * 2 + 2;",
          "7612:             ccm_data->client_datagram_number = 0;",
          "7613:             ccm_data->server_datagram_number = 0;",
          "7615:             switch (ccm_data->protocol_id)",
          "7616:             {",
          "7617:             case DOF_PROTOCOL_CCM:",
          "7618:                 ccm_data->cipher_data = wmem_alloc0(wmem_file_scope(), sizeof(rijndael_ctx));",
          "7619:                 break;",
          "7621:             default:",
          "7622:                 return 0;",
          "7623:             }",
          "7624:         }",
          "7626:         if (!ccm_data)",
          "7627:             return 0;",
          "7629:         if (secmode_api_data->dof_api->transport_session->is_2_node)",
          "7630:         {",
          "7631:             switch (ccm_data->protocol_id)",
          "7632:             {",
          "7633:             case DOF_PROTOCOL_CCM:",
          "7634:                 rijndael_set_key((rijndael_ctx *)ccm_data->cipher_data, key_data->session_key, 256);",
          "7635:                 break;",
          "7637:             default:",
          "7638:                 return 0;",
          "7639:             }",
          "7642:             return 2;",
          "7643:         }",
          "7645:         offset = read_c2(tvb, offset, &length, NULL);",
          "7647:         header = tvb_get_guint8(tvb, offset);",
          "7648:         offset += 1;",
          "7651:         {",
          "7652:             guint8 period = (header & 0x70) >> 4;",
          "7653:             if (ccm_data->cipher_data_table == NULL)",
          "7654:             {",
          "7655:                 guint8 *ekey = (guint8 *)wmem_alloc0(wmem_file_scope(), sizeof(rijndael_ctx));",
          "7658:                 ccm_data->cipher_data_table = g_hash_table_new(g_direct_hash, g_direct_equal);",
          "7659:                 ccm_data->period = 1;",
          "7660:                 ccm_data->periods[period] = ccm_data->period;",
          "7662:                 switch (ccm_data->protocol_id)",
          "7663:                 {",
          "7664:                 case DOF_PROTOCOL_CCM:",
          "7665:                     rijndael_set_key((rijndael_ctx *)ekey, key_data->session_key, 256);",
          "7666:                     break;",
          "7668:                 default:",
          "7669:                     return 0;",
          "7670:                 }",
          "7672:                 g_hash_table_insert(ccm_data->cipher_data_table, GUINT_TO_POINTER(ccm_data->period), ekey);",
          "7673:             }",
          "7674:             else",
          "7675:             {",
          "7676:                 guint32 lookup = ccm_data->periods[period];",
          "7678:                 if (!lookup)",
          "7679:                 {",
          "7680:                     guint8 *ekey = (guint8 *)wmem_alloc0(wmem_file_scope(), sizeof(rijndael_ctx));",
          "7681:                     switch (ccm_data->protocol_id)",
          "7682:                     {",
          "7683:                     case DOF_PROTOCOL_CCM:",
          "7684:                         rijndael_set_key((rijndael_ctx *)ekey, key_data->session_key, 256);",
          "7685:                         break;",
          "7687:                     default:",
          "7688:                         return 0;",
          "7689:                     }",
          "7691:                     ccm_data->period += 1;",
          "7692:                     ccm_data->periods[period] = ccm_data->period;",
          "7693:                     g_hash_table_insert(ccm_data->cipher_data_table, GUINT_TO_POINTER(ccm_data->period), ekey);",
          "7694:                 }",
          "7695:                 else",
          "7696:                 {",
          "7697:                     guint8 *in_table = (guint8 *)g_hash_table_lookup(ccm_data->cipher_data_table, GUINT_TO_POINTER(lookup));",
          "7698:                     if (memcmp(key_data->session_key, in_table, 32) != 0)",
          "7699:                     {",
          "7700:                         guint8 *ekey = (guint8 *)wmem_alloc0(wmem_file_scope(), sizeof(rijndael_ctx));",
          "7701:                         switch (ccm_data->protocol_id)",
          "7702:                         {",
          "7703:                         case DOF_PROTOCOL_CCM:",
          "7704:                             rijndael_set_key((rijndael_ctx *)ekey, key_data->session_key, 256);",
          "7705:                             break;",
          "7707:                         default:",
          "7708:                             return 0;",
          "7709:                         }",
          "7711:                         ccm_data->period += 1;",
          "7712:                         ccm_data->periods[period] = ccm_data->period;",
          "7713:                         g_hash_table_insert(ccm_data->cipher_data_table, GUINT_TO_POINTER(ccm_data->period), ekey);",
          "7714:                     }",
          "7715:                 }",
          "7716:             }",
          "7717:         }",
          "7719:         return offset + length - 1;",
          "7720:     }",
          "7722:     case HEADER:",
          "7723:     {",
          "7724:         ccm_session_data *session;",
          "7725:         dof_transport_session *transport_session = (dof_transport_session *)secmode_api_data->dof_api->transport_session;",
          "7726:         dof_secure_session_data *secure_session = secmode_api_data->secure_session;",
          "7727:         dof_session_key_exchange_data *security_data = NULL;",
          "7728:         dof_packet_data *dof_packet = secmode_api_data->dof_api->packet;",
          "7729:         guint8 ccm_flags;",
          "7730:         guint32 nid;",
          "7731:         guint16 slot = 0;",
          "7732:         guint32 pn = 0;",
          "7733:         gboolean pn_present = FALSE;",
          "7734:         guint32 tnid;",
          "7735:         guint32 nnid;",
          "7736:         proto_tree *ccm_flags_tree;",
          "7737:         proto_tree *header_tree;",
          "7738:         proto_item * item,*header;",
          "7739:         ccm_packet_data *pdata;",
          "7740:         gint offset = 0;",
          "7742:         if (!dof_packet->security_session)",
          "7743:         {",
          "7744:             if (transport_session->is_streaming)",
          "7745:             {",
          "7747:                 security_data = secure_session->session_security_data;",
          "7748:                 while (security_data)",
          "7749:                 {",
          "7750:                     if (dof_packet->is_sent_by_initiator && (dof_packet->dof_frame > security_data->i_valid))",
          "7751:                         break;",
          "7753:                     if (!dof_packet->is_sent_by_initiator && (dof_packet->dof_frame > security_data->r_valid))",
          "7754:                         break;",
          "7756:                     security_data = security_data->next;",
          "7757:                 }",
          "7759:                 if (security_data)",
          "7760:                     dof_packet->security_session = security_data;",
          "7761:                 else",
          "7762:                 {",
          "7763:                     dof_packet->security_session_error = \"[Encrypted - No Session Available]\";",
          "7764:                     return offset;",
          "7765:                 }",
          "7766:             }",
          "7767:             else",
          "7768:             {",
          "7769:                 dof_packet->security_session = secure_session->session_security_data;",
          "7770:                 security_data = dof_packet->security_session;",
          "7771:             }",
          "7772:         }",
          "7773:         else",
          "7774:         {",
          "7775:             security_data = dof_packet->security_session;",
          "7776:         }",
          "7778:         if (!security_data || !security_data->session_key || !security_data->security_mode_key_data)",
          "7779:         {",
          "7780:             dof_packet->security_session_error = \"[Encrypted - No Session Available]\";",
          "7781:             return offset;",
          "7782:         }",
          "7784:         session = (ccm_session_data *)security_data->security_mode_key_data;",
          "7785:         offset = secmode_api_data->security_mode_offset;",
          "7788:         header = proto_tree_add_protocol_format(tree, proto_ccm, tvb, offset, 0,",
          "7789:                                                 \"CCM Security Mode, Version: 1\");",
          "7790:         header_tree = proto_item_add_subtree(header, ett_header);",
          "7791:         tree = header_tree;",
          "7793:         ccm_flags = tvb_get_guint8(tvb, offset);",
          "7794:         item = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_flags, tvb,",
          "7795:                                           offset, 1, ccm_flags, \"Flags: 0x%02x\", ccm_flags);",
          "7797:         ccm_flags_tree = proto_item_add_subtree(item, ett_epp_v1_ccm_flags);",
          "7798:         proto_tree_add_item(ccm_flags_tree, hf_epp_v1_ccm_flags_manager, tvb, offset, 1, ENC_NA);",
          "7799:         proto_tree_add_item(ccm_flags_tree, hf_epp_v1_ccm_flags_period, tvb, offset, 1, ENC_NA);",
          "7800:         proto_tree_add_item(ccm_flags_tree, hf_epp_v1_ccm_flags_target, tvb, offset, 1, ENC_NA);",
          "7801:         proto_tree_add_item(ccm_flags_tree, hf_epp_v1_ccm_flags_next_nid, tvb, offset, 1, ENC_NA);",
          "7802:         proto_tree_add_item(ccm_flags_tree, hf_epp_v1_ccm_flags_packet, tvb, offset, 1, ENC_NA);",
          "7803:         offset += 1;",
          "7805:         if (ccm_flags & 0x01)",
          "7806:             pn_present = TRUE;",
          "7808:         pdata = (ccm_packet_data *)dof_packet->security_packet;",
          "7809:         if (!pdata)",
          "7810:         {",
          "7811:             pdata = (ccm_packet_data *)wmem_alloc0(wmem_file_scope(), sizeof(ccm_packet_data));",
          "7812:             if (pdata)",
          "7813:             {",
          "7814:                 dof_packet->security_packet = pdata;",
          "7816:                 if (transport_session->is_2_node)",
          "7817:                 {",
          "7818:                     if (dof_packet->is_sent_by_initiator)",
          "7819:                     {",
          "7820:                         pdata->nid = 0;",
          "7821:                         if (pn_present == FALSE)",
          "7822:                             pdata->dn = ++session->client_datagram_number;",
          "7823:                         else",
          "7824:                             pdata->dn = pn;",
          "7825:                     }",
          "7826:                     else",
          "7827:                     {",
          "7828:                         pdata->nid = 1;",
          "7829:                         if (pn_present == 0)",
          "7830:                             pdata->dn = ++session->server_datagram_number;",
          "7831:                         else",
          "7832:                             pdata->dn = pn;",
          "7833:                     }",
          "7834:                 }",
          "7835:                 else",
          "7836:                 {",
          "7837:                     guint8 packet_period = (ccm_flags & 0x70) >> 4;",
          "7838:                     pdata->period = session->periods[packet_period];",
          "7839:                 }",
          "7840:             }",
          "7841:         }",
          "7843:         if (!pdata)",
          "7844:             return offset - secmode_api_data->security_mode_offset;",
          "7846:         if (!secure_session->is_2_node)",
          "7847:         {",
          "7848:             gint nid_len;",
          "7849:             proto_item *pi;",
          "7850:             read_c4(tvb, offset, &nid, &nid_len);",
          "7852:             nid /= 2;",
          "7853:             pdata->nid = nid;",
          "7854:             pi = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_nid, tvb, offset, nid_len, nid, \"Node ID: %u\", nid);",
          "7855:             validate_c4(pinfo, pi, nid, nid_len);",
          "7856:             offset += nid_len;",
          "7857:         }",
          "7858:         else",
          "7859:         {",
          "7860:             item = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_nid, tvb, 0, 0, pdata->nid, \"Node ID: %u\", pdata->nid);",
          "7861:             PROTO_ITEM_SET_GENERATED(item);",
          "7862:         }",
          "7864:         if (!secure_session->is_2_node)",
          "7865:         {",
          "7866:             gint slot_len;",
          "7867:             proto_item *pi;",
          "7868:             read_c2(tvb, offset, &slot, &slot_len);",
          "7869:             pi = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_slot, tvb, offset, slot_len, slot, \"Slot: %hu\", slot);",
          "7870:             validate_c2(pinfo, pi, slot, slot_len);",
          "7871:             offset += slot_len;",
          "7872:         }",
          "7873:         else",
          "7874:         {",
          "7875:             item = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_slot, tvb, 0, 0, 0, \"Slot: %u\", 0);",
          "7876:             PROTO_ITEM_SET_GENERATED(item);",
          "7877:         }",
          "7879:         if (ccm_flags & 0x01)",
          "7880:         {",
          "7881:             gint pn_len;",
          "7882:             proto_item *pi;",
          "7883:             read_c4(tvb, offset, &pn, &pn_len);",
          "7884:             pi = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_pn, tvb, offset, pn_len, pn, \"Packet Number: %u\", pn);",
          "7885:             validate_c4(pinfo, pi, pn, pn_len);",
          "7886:             pdata->dn = pn;",
          "7887:             offset += pn_len;",
          "7888:         }",
          "7889:         else",
          "7890:         {",
          "7891:             item = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_pn, tvb, 0, 0, pdata->dn, \"Packet Number: %u\", pdata->dn);",
          "7892:             PROTO_ITEM_SET_GENERATED(item);",
          "7893:         }",
          "7895:         if (ccm_flags & 0x08)",
          "7896:         {",
          "7897:             gint tnid_len;",
          "7898:             proto_item *pi;",
          "7899:             read_c4(tvb, offset, &tnid, &tnid_len);",
          "7900:             pi = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_tnid, tvb, offset, tnid_len, tnid, \"Target Node ID: %u\", tnid);",
          "7901:             validate_c4(pinfo, pi, tnid, tnid_len);",
          "7902:             offset += tnid_len;",
          "7903:         }",
          "7905:         if (ccm_flags & 0x02)",
          "7906:         {",
          "7907:             gint nnid_len;",
          "7908:             proto_item *pi;",
          "7909:             read_c4(tvb, offset, &nnid, &nnid_len);",
          "7910:             pi = proto_tree_add_uint_format(tree, hf_epp_v1_ccm_nnid, tvb, offset, nnid_len, nnid, \"Next Node ID: %u\", nnid);",
          "7911:             validate_c4(pinfo, pi, nnid, nnid_len);",
          "7912:             offset += nnid_len;",
          "7913:         }",
          "7915:         proto_item_set_len(header, offset - secmode_api_data->security_mode_offset);",
          "7917:         if (dof_packet->decrypted_buffer_error)",
          "7918:         {",
          "7919:             col_set_str(pinfo->cinfo, COL_INFO, dof_packet->decrypted_buffer_error);",
          "7920:             expert_add_info(pinfo, tree, &ei_decode_failure);",
          "7921:             return offset - secmode_api_data->security_mode_offset;",
          "7922:         }",
          "7932:         {",
          "7933:             gint e_len = tvb_captured_length(tvb) - offset;",
          "7934:             const guint8 *epp_buf = tvb_get_ptr(tvb, 0, -1);",
          "7935:             guint a_len = offset;",
          "7936:             guint16 e_off;",
          "7937:             guint8 *buf = (guint8 *)g_malloc(e_len);",
          "7938:             tvbuff_t *app;",
          "7944:             guint8 nonce[] = { 0x00, 0x00, 0x00, 0x00,",
          "7945:                 0x00, 0x00,",
          "7946:                 0x00,",
          "7947:                 0x00, 0x00, 0x00, 0x00 };",
          "7949:             nonce[0] = (pdata->nid) >> 24;",
          "7950:             nonce[1] = (pdata->nid) >> 16;",
          "7951:             nonce[2] = (pdata->nid) >> 8;",
          "7952:             nonce[3] = (guint8)(pdata->nid);",
          "7953:             nonce[4] = slot >> 8;",
          "7954:             nonce[5] = (guint8)slot;",
          "7955:             nonce[7] = (pdata->dn) >> 24;",
          "7956:             nonce[8] = (pdata->dn) >> 16;",
          "7957:             nonce[9] = (pdata->dn) >> 8;",
          "7958:             nonce[10] = (guint8)(pdata->dn);",
          "7964:             for (e_off = 0; e_off < e_len; e_off++)",
          "7965:                 buf[e_off] = tvb_get_guint8(tvb, offset + e_off);",
          "7967:             app = NULL;",
          "7969:             proto_item_set_end(tree, tvb, offset);",
          "7970:             if (!session->encrypted)",
          "7971:             {",
          "7975:                 g_free(buf);",
          "7976:                 app = tvb_new_subset(tvb, offset, e_len - session->mac_len, e_len - session->mac_len);",
          "7977:                 dof_packet->decrypted_tvb = app;",
          "7978:                 dof_packet->decrypted_offset = 0;",
          "7979:             }",
          "7980:             else",
          "7981:             {",
          "7982:                 if (dof_packet->decrypted_buffer)",
          "7983:                 {",
          "7985:                     app = tvb_new_real_data((const guint8 *)dof_packet->decrypted_buffer, e_len - session->mac_len, e_len - session->mac_len);",
          "7986:                     tvb_set_child_real_data_tvbuff(tvb, app);",
          "7987:                     add_new_data_source(pinfo, app, \"Decrypted DOF\");",
          "7988:                     dof_packet->decrypted_tvb = app;",
          "7989:                     dof_packet->decrypted_offset = 0;",
          "7990:                 }",
          "7991:                 else",
          "7992:                 {",
          "7993:                     if (decrypt(session, pdata, nonce, epp_buf, a_len, buf, e_len))",
          "7994:                     {",
          "7995:                         guint8 *cache = (guint8 *)wmem_alloc0(wmem_file_scope(), e_len - session->mac_len);",
          "7996:                         memcpy(cache, buf, e_len - session->mac_len);",
          "7997:                         app = tvb_new_real_data(cache, e_len - session->mac_len, e_len - session->mac_len);",
          "7998:                         tvb_set_child_real_data_tvbuff(tvb, app);",
          "7999:                         add_new_data_source(pinfo, app, \"Decrypted DOF\");",
          "8000:                         dof_packet->decrypted_buffer = cache;",
          "8001:                         dof_packet->decrypted_offset = 0;",
          "8002:                         dof_packet->decrypted_tvb = app;",
          "8004:                         g_free(buf);",
          "8005:                     }",
          "8006:                     else",
          "8007:                     {",
          "8011:                         dof_packet->decrypted_buffer_error = \"[Encrypted packet - decryption failure]\";",
          "8013:                         g_free(buf);",
          "8014:                     }",
          "8015:                 }",
          "8016:             }",
          "8017:         }",
          "8019:         return offset - secmode_api_data->security_mode_offset;",
          "8020:     }",
          "8021:         break;",
          "8023:     case TRAILER:",
          "8025:         break;",
          "8027:     }",
          "8029:     return 0;",
          "8030: }",
          "8032: static int dissect_ccm_app(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "8033: {",
          "8034:     gint offset = 0;",
          "8035:     guint8 opcode = 0;",
          "8036:     guint16 app;",
          "8037:     gint app_len;",
          "8039:     proto_item *ti;",
          "8040:     proto_tree *ccm_tree;",
          "8043:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"CCM \");",
          "8046:     offset = 0;",
          "8047:     ti = proto_tree_add_item(tree, proto_ccm_app, tvb, offset, -1, ENC_NA);",
          "8048:     ccm_tree = proto_item_add_subtree(ti, ett_ccm);",
          "8051:     offset = read_c2(tvb, offset, &app, &app_len);",
          "8052:     ti = proto_tree_add_uint(ccm_tree, hf_2008_1_app_version, tvb, 0, app_len, app);",
          "8053:     validate_c2(pinfo, ti, app, app_len);",
          "8056:     opcode = tvb_get_guint8(tvb, offset);",
          "8058:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", val_to_str(opcode, ccm_opcode_strings, \"Unknown Opcode (%d)\"));",
          "8060:     if (tree)",
          "8061:     {",
          "8063:         proto_tree_add_item(ccm_tree, hf_ccm_opcode, tvb, offset, 1, ENC_NA);",
          "8065:         offset += 1;",
          "8067:         switch (opcode)",
          "8068:         {",
          "8069:         case CCM_PDU_PROBE:",
          "8070:         {",
          "8071:         }",
          "8072:             break;",
          "8074:         }",
          "8075: #endif",
          "8076:     }",
          "8078:     return 1;",
          "8079: }",
          "8082: static int dissect_ccm_validate(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data)",
          "8083: {",
          "8084:     dof_api_data *api_data = (dof_api_data *)data;",
          "8085:     dof_packet_data *packet;",
          "8086:     ccm_session_data *session;",
          "8087:     gint offset;",
          "8088:     guint8 ccm_flags;",
          "8089:     guint32 nid;",
          "8090:     guint16 slot;",
          "8091:     guint32 pn;",
          "8092:     guint32 tnid;",
          "8094:     if (api_data == NULL)",
          "8095:     {",
          "8096:         fprintf(stderr, \"api_data is NULL.\");",
          "8097:         return 0;",
          "8098:     }",
          "8100:     packet = api_data->packet;",
          "8101:     if (packet == NULL)",
          "8102:     {",
          "8103:         fprintf(stderr, \"api_data->packet is NULL.\");",
          "8104:         return 0;",
          "8105:     }",
          "8107:     if (!packet->security_session)",
          "8108:     {",
          "8109:         fprintf(stderr, \"packet->security_session is NULL\");",
          "8110:         return 0;",
          "8111:     }",
          "8113:     if (packet->security_session->security_mode != DOF_PROTOCOL_CCM)",
          "8114:     {",
          "8115:         fprintf(stderr, \"packet->security_session->security_mode != DOF_PROTOCOL_CCM\");",
          "8116:         return 0;",
          "8117:     }",
          "8119:     session = (ccm_session_data *)packet->security_session->security_mode_key_data;",
          "8124:     offset = 0;",
          "8126:     ccm_flags = tvb_get_guint8(tvb, offset);",
          "8127:     offset += 1;",
          "8130:     if (ccm_flags & 0x04)",
          "8131:         offset = read_c4(tvb, offset, &nid, NULL);",
          "8133:     if (ccm_flags & 0x02)",
          "8134:         offset = read_c2(tvb, offset, &slot, NULL);",
          "8136:     if (ccm_flags & 0x01)",
          "8137:         offset = read_c4(tvb, offset, &pn, NULL);",
          "8139:     if (ccm_flags & 0x08)",
          "8140:         offset = read_c4(tvb, offset, &tnid, NULL);",
          "8151:     {",
          "8152:         gint e_len = tvb_captured_length(tvb) - offset;",
          "8153:         const guint8 *epp_buf = tvb_get_ptr(tvb, 0, -1);",
          "8154:         guint a_len = offset - 0;",
          "8155:         guint16 e_off;",
          "8156:         guint8 *buf = (guint8 *)g_malloc(e_len);",
          "8162:         guint8 nonce[] = { 0x00, 0x00, 0x00, 0x01,",
          "8163:             0x00, 0x00,",
          "8164:             0x00,",
          "8165:             0x00, 0x00, 0x00, 0x00 };",
          "8167:         nonce[0] = nid >> 24;",
          "8168:         nonce[1] = nid >> 16;",
          "8169:         nonce[2] = nid >> 8;",
          "8170:         nonce[3] = (guint8)nid;",
          "8171:         nonce[4] = slot >> 8;",
          "8172:         nonce[5] = (guint8)slot;",
          "8173:         nonce[7] = pn >> 24;",
          "8174:         nonce[8] = pn >> 16;",
          "8175:         nonce[9] = pn >> 8;",
          "8176:         nonce[10] = (guint8)pn;",
          "8182:         for (e_off = 0; e_off < e_len; e_off++)",
          "8183:             buf[e_off] = tvb_get_guint8(tvb, offset + e_off);",
          "8187:         proto_item_set_end(tree, tvb, offset);",
          "8188:         if (decrypt(session, (ccm_packet_data *)packet->security_packet, nonce, epp_buf, a_len, buf, e_len))",
          "8189:         {",
          "8190:             g_free(buf);",
          "8191:             return 1;",
          "8192:         }",
          "8193:         else",
          "8194:         {",
          "8198:             g_free(buf);",
          "8199:             return 1;",
          "8200:         }",
          "8201:     }",
          "8202: }",
          "8203: #endif",
          "8205: static int dissect_oap_dsp(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "8206: {",
          "8208:     gint offset = 0;",
          "8211:     if (!tree)",
          "8212:         return 0;",
          "8217:     proto_tree_add_item(tree, hf_oap_1_dsp_option, tvb, 0, -1, ENC_NA);",
          "8218:     return offset;",
          "8219: }",
          "8221: static int dissect_oap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "8222: {",
          "8223:     dof_api_data *api_data = (dof_api_data *)data;",
          "8224:     dof_packet_data *packet_data;",
          "8226:     gint offset = 0;",
          "8227:     guint8 opcode = 0;",
          "8228:     guint8 flags = 0;",
          "8229:     guint16 item_id = 0;",
          "8230:     guint16 app;",
          "8231:     guint app_len;",
          "8233:     oap_1_packet_data *oap_packet = NULL;",
          "8235:     proto_item *ti;",
          "8236:     proto_tree *oap_tree;",
          "8238:     if (api_data == NULL)",
          "8239:     {",
          "8240:         fprintf(stderr, \"api_data == NULL\");",
          "8241:         return 0;",
          "8242:     }",
          "8244:     packet_data = api_data->packet;",
          "8245:     if (packet_data == NULL)",
          "8246:     {",
          "8247:         fprintf(stderr, \"packet_data == NULL\");",
          "8248:         return 0;",
          "8249:     }",
          "8253:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"OAPv1 \");",
          "8256:     offset = 0;",
          "8257:     ti = proto_tree_add_item(tree, proto_oap_1, tvb, offset, -1, ENC_NA);",
          "8258:     oap_tree = proto_item_add_subtree(ti, ett_oap_1);",
          "8261:     offset = read_c2(tvb, offset, &app, &app_len);",
          "8262:     ti = proto_tree_add_uint(oap_tree, hf_2008_1_app_version, tvb, 0, app_len, app);",
          "8263:     validate_c2(pinfo, ti, app, app_len);",
          "8265:     if (app_len == tvb_captured_length(tvb))",
          "8266:     {",
          "8267:         col_append_str(pinfo->cinfo, COL_INFO, \"OAP [nop]\");",
          "8268:         expert_add_info(pinfo, oap_tree, &ei_implicit_no_op);",
          "8270:         return app_len;",
          "8271:     }",
          "8273:     oap_packet = (oap_1_packet_data *)dof_packet_get_proto_data(packet_data, proto_oap_1);",
          "8274:     if (!oap_packet)",
          "8275:     {",
          "8276:         oap_packet = (oap_1_packet_data *)wmem_alloc0(wmem_file_scope(), sizeof(oap_1_packet_data));",
          "8277:         dof_packet_add_proto_data(packet_data, proto_oap_1, oap_packet);",
          "8278:     }",
          "8281:     opcode = tvb_get_guint8(tvb, offset) & 0x1F;",
          "8282:     if (!packet_data->is_command)",
          "8283:         opcode |= OAP_1_RESPONSE;",
          "8285:     flags = tvb_get_guint8(tvb, offset) & 0xE0;",
          "8287:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", val_to_str(opcode, oap_opcode_strings, \"Unknown Opcode (%d)\"));",
          "8291:     {",
          "8292:         guint8 mask = 0x10;",
          "8293:         char str[20];",
          "8294:         guint8 no_of_bits = 5;",
          "8295:         guint8 i;",
          "8296:         guint8 bit = 3;",
          "8297:         g_strlcpy(str, \"...\", 20);",
          "8300:         for (i = 0; i < no_of_bits; i++)",
          "8301:         {",
          "8302:             if (bit && (!(bit % 4)))",
          "8303:                 g_strlcat(str, \" \", 20);",
          "8305:             bit++;",
          "8307:             if (opcode & mask)",
          "8308:                 g_strlcat(str, \"1\", 20);",
          "8309:             else",
          "8310:                 g_strlcat(str, \"0\", 20);",
          "8312:             mask = mask >> 1;",
          "8313:         }",
          "8315:         proto_tree_add_uint_format(oap_tree, hf_oap_1_opcode, tvb, offset, 1, opcode & 0x1F, \"%s = Opcode: %s (%u)\", str, val_to_str(opcode, oap_opcode_strings, \"Unknown Opcode (%d)\"), opcode & 0x1F);",
          "8316:     }",
          "8322:     switch (opcode)",
          "8323:     {",
          "8325:     case OAP_1_CMD_ACTIVATE:",
          "8326:     case OAP_1_CMD_CONNECT:",
          "8327:     case OAP_1_CMD_FULL_CONNECT:",
          "8328:     case OAP_1_CMD_GET:",
          "8329:     case OAP_1_CMD_INVOKE:",
          "8330:     case OAP_1_CMD_REGISTER:",
          "8331:     case OAP_1_CMD_SET:",
          "8332:     case OAP_1_CMD_SUBSCRIBE:",
          "8333:     case OAP_1_CMD_WATCH:",
          "8334:         proto_tree_add_item(oap_tree, hf_oap_1_alias_size, tvb, offset, 1, ENC_NA);",
          "8335:         proto_tree_add_item(oap_tree, hf_oap_1_flags, tvb, offset, 1, ENC_NA);",
          "8336:         if (flags & 0x20)",
          "8337:         {",
          "8338:             offset += 1;",
          "8339:             offset = oap_1_tree_add_cmdcontrol(pinfo, oap_tree, tvb, offset);",
          "8340:         }",
          "8341:         else",
          "8342:             offset += 1;",
          "8344:         break;",
          "8347:     case OAP_1_CMD_ADVERTISE:",
          "8349:         proto_tree_add_item(oap_tree, hf_oap_1_flags, tvb, offset, 1, ENC_NA);",
          "8350:         if (flags & 0x20)",
          "8351:         {",
          "8352:             offset = oap_1_tree_add_cmdcontrol(pinfo, oap_tree, tvb, ENC_BIG_ENDIAN);",
          "8353:         }",
          "8354:         else",
          "8355:             offset += 1;",
          "8357:         break;",
          "8360:     case OAP_1_RSP_GET:",
          "8361:     case OAP_1_RSP_INVOKE:",
          "8362:     case OAP_1_RSP_REGISTER:",
          "8363:     case OAP_1_RSP_SET:",
          "8364:     case OAP_1_RSP_SUBSCRIBE:",
          "8366:         proto_tree_add_item(oap_tree, hf_oap_1_flags, tvb, offset, 1, ENC_NA);",
          "8367:         if (flags & 0x20)",
          "8368:         {",
          "8369:             offset += 1;",
          "8370:             offset = dof_dissect_pdu_as_field(dissect_2009_11_type_4, tvb, pinfo, oap_tree,",
          "8371:                                               offset, hf_oap_1_providerid, ett_oap_1_1_providerid, NULL);",
          "8372:         }",
          "8373:         else",
          "8374:             offset += 1;",
          "8375:         if ((opcode == OAP_1_RSP_GET) || (opcode == OAP_1_RSP_INVOKE))",
          "8376:         {",
          "8377:             proto_tree_add_item(oap_tree, hf_oap_1_value_list, tvb, offset, -1, ENC_NA);",
          "8378:             offset += tvb_reported_length_remaining(tvb, offset);",
          "8379:         }",
          "8381:         break;",
          "8384:     case OAP_1_CMD_CHANGE:",
          "8385:     case OAP_1_CMD_OPEN:",
          "8386:     case OAP_1_CMD_PROVIDE:",
          "8387:     case OAP_1_CMD_SIGNAL:",
          "8388:         proto_tree_add_item(oap_tree, hf_oap_1_alias_size, tvb, offset, 1, ENC_NA);",
          "8389:         offset += 1;",
          "8390:         break;",
          "8393:     case OAP_1_RSP_EXCEPTION:",
          "8394:         proto_tree_add_item(oap_tree, hf_oap_1_exception_internal_flag, tvb, offset, 1, ENC_NA);",
          "8395:         proto_tree_add_item(oap_tree, hf_oap_1_exception_final_flag, tvb, offset, 1, ENC_NA);",
          "8396:         proto_tree_add_item(oap_tree, hf_oap_1_exception_provider_flag, tvb, offset, 1, ENC_NA);",
          "8397:         offset += 1;",
          "8398:         break;",
          "8401:     case OAP_1_CMD_DEFINE:",
          "8402:     case OAP_1_RSP_DEFINE:",
          "8403:     case OAP_1_RSP_OPEN:",
          "8405:         offset += 1;",
          "8406:         break;",
          "8408:     default:",
          "8410:         return offset;",
          "8411:     }",
          "8414:     switch (opcode)",
          "8415:     {",
          "8416:     case OAP_1_CMD_SUBSCRIBE:",
          "8417:     {",
          "8418:         guint8 alias_len = (flags & 0xC0) >> 6;",
          "8419:         if (alias_len == 3)",
          "8420:             alias_len = 4;",
          "8423:         {",
          "8424:             gint item_id_len;",
          "8425:             proto_item *pi;",
          "8427:             read_c2(tvb, offset, &item_id, &item_id_len);",
          "8428:             pi = proto_tree_add_uint_format(oap_tree, hf_oap_1_itemid, tvb, offset, item_id_len, item_id, \"Item ID: %u\", item_id);",
          "8429:             validate_c2(pinfo, pi, item_id, item_id_len);",
          "8430:             offset += item_id_len;",
          "8431:         }",
          "8433:         if (alias_len > 0)",
          "8434:         {",
          "8435:             if (api_data->session == NULL)",
          "8436:             {",
          "8437:                 expert_add_info(pinfo, ti, &ei_oap_no_session);",
          "8438:                 return offset;",
          "8439:             }",
          "8440:             offset = oap_1_tree_add_alias(api_data, oap_packet, packet_data, oap_tree, tvb, offset, alias_len, TRUE);",
          "8441:         }",
          "8442:         else",
          "8443:             offset = oap_1_tree_add_binding(oap_tree, pinfo, tvb, offset);",
          "8446:         {",
          "8447:             gint delta_len;",
          "8448:             guint16 delta;",
          "8449:             proto_item *pi;",
          "8451:             read_c2(tvb, offset, &delta, &delta_len);",
          "8452:             pi = proto_tree_add_uint_format(oap_tree, hf_oap_1_subscription_delta, tvb, offset, delta_len, delta, \"Minimum Delta: %u\", delta);",
          "8453:             validate_c2(pinfo, pi, delta, delta_len);",
          "8454:             offset += delta_len;",
          "8455:         }",
          "8456:     }",
          "8457:         break;",
          "8459:     case OAP_1_CMD_REGISTER:",
          "8460:     {",
          "8461:         guint8 alias_len = (flags & 0xC0) >> 6;",
          "8462:         if (alias_len == 3)",
          "8463:             alias_len = 4;",
          "8466:         {",
          "8467:             gint item_id_len;",
          "8468:             proto_item *pi;",
          "8470:             read_c2(tvb, offset, &item_id, &item_id_len);",
          "8471:             pi = proto_tree_add_uint_format(oap_tree, hf_oap_1_itemid, tvb, offset, item_id_len, item_id, \"Item ID: %u\", item_id);",
          "8472:             validate_c2(pinfo, pi, item_id, item_id_len);",
          "8473:             offset += item_id_len;",
          "8474:         }",
          "8476:         if (alias_len > 0)",
          "8477:         {",
          "8478:             if (api_data->session == NULL)",
          "8479:             {",
          "8480:                 expert_add_info(pinfo, ti, &ei_oap_no_session);",
          "8481:                 return offset;",
          "8482:             }",
          "8483:             offset = oap_1_tree_add_alias(api_data, oap_packet, packet_data, oap_tree, tvb, offset, alias_len, TRUE);",
          "8484:         }",
          "8485:         else",
          "8486:             offset = oap_1_tree_add_binding(oap_tree, pinfo, tvb, offset);",
          "8487:     }",
          "8488:         break;",
          "8490:     case OAP_1_RSP_REGISTER:",
          "8491:     {",
          "8492:         if (flags & 0x20)",
          "8493:         {",
          "8495:         }",
          "8498:         proto_tree_add_item(oap_tree, hf_oap_1_update_sequence, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "8499:         offset += 2;",
          "8500:     }",
          "8501:         break;",
          "8503:     case OAP_1_CMD_WATCH:",
          "8504:     case OAP_1_CMD_ACTIVATE:",
          "8505:     case OAP_1_CMD_CONNECT:",
          "8506:     case OAP_1_CMD_FULL_CONNECT:",
          "8507:     {",
          "8508:         guint8 alias_len = (flags & 0xC0) >> 6;",
          "8509:         if (alias_len == 3)",
          "8510:             alias_len = 4;",
          "8512:         if (alias_len > 0)",
          "8513:         {",
          "8514:             if (api_data->session == NULL)",
          "8515:             {",
          "8516:                 expert_add_info(pinfo, ti, &ei_oap_no_session);",
          "8517:                 return offset;",
          "8518:             }",
          "8519:             offset = oap_1_tree_add_alias(api_data, oap_packet, packet_data, oap_tree, tvb, offset, alias_len, TRUE);",
          "8520:         }",
          "8521:         else",
          "8522:             offset = oap_1_tree_add_binding(oap_tree, pinfo, tvb, offset);",
          "8523:     }",
          "8524:         break;",
          "8526:     case OAP_1_CMD_ADVERTISE:",
          "8527:         offset = oap_1_tree_add_binding(oap_tree, pinfo, tvb, offset);",
          "8528:         break;",
          "8530:     case OAP_1_CMD_GET:",
          "8531:     case OAP_1_CMD_INVOKE:",
          "8532:     case OAP_1_CMD_SET:",
          "8533:     {",
          "8534:         guint8 alias_len = (flags & 0xC0) >> 6;",
          "8535:         if (alias_len == 3)",
          "8536:             alias_len = 4;",
          "8539:         {",
          "8540:             gint item_id_len;",
          "8541:             proto_item *pi;",
          "8543:             read_c2(tvb, offset, &item_id, &item_id_len);",
          "8544:             pi = proto_tree_add_uint_format(oap_tree, hf_oap_1_itemid, tvb, offset, item_id_len, item_id, \"Item ID: %u\", item_id);",
          "8545:             validate_c2(pinfo, pi, item_id, item_id_len);",
          "8546:             offset += item_id_len;",
          "8547:         }",
          "8549:         if (alias_len > 0)",
          "8550:         {",
          "8551:             if (api_data->session == NULL)",
          "8552:             {",
          "8553:                 expert_add_info(pinfo, ti, &ei_oap_no_session);",
          "8554:                 return offset;",
          "8555:             }",
          "8556:             offset = oap_1_tree_add_alias(api_data, oap_packet, packet_data, oap_tree, tvb, offset, alias_len, TRUE);",
          "8557:         }",
          "8558:         else",
          "8559:             offset = oap_1_tree_add_binding(oap_tree, pinfo, tvb, offset);",
          "8561:         if ((opcode == OAP_1_CMD_SET) || (opcode == OAP_1_CMD_INVOKE))",
          "8562:         {",
          "8563:             proto_tree_add_item(oap_tree, hf_oap_1_value_list, tvb, offset, -1, ENC_NA);",
          "8564:             offset += tvb_reported_length_remaining(tvb, offset);",
          "8565:         }",
          "8566:     }",
          "8567:         break;",
          "8569:     case OAP_1_CMD_OPEN:",
          "8570:     {",
          "8571:         guint8 alias_len = (flags & 0xC0) >> 6;",
          "8572:         if (alias_len == 3)",
          "8573:             alias_len = 4;",
          "8575:         if (alias_len > 0)",
          "8576:         {",
          "8577:             if (api_data->session == NULL)",
          "8578:             {",
          "8579:                 expert_add_info(pinfo, ti, &ei_oap_no_session);",
          "8580:                 return offset;",
          "8581:             }",
          "8582:             offset = oap_1_tree_add_alias(api_data, oap_packet, packet_data, oap_tree, tvb, offset, alias_len, TRUE);",
          "8583:         }",
          "8584:         else",
          "8585:             offset = oap_1_tree_add_binding(oap_tree, pinfo, tvb, offset);",
          "8587:         offset = oap_1_tree_add_interface(oap_tree, tvb, offset);",
          "8589:         offset = dof_dissect_pdu_as_field(dissect_2009_11_type_4, tvb, pinfo, oap_tree,",
          "8590:                                           offset, hf_oap_1_objectid, ett_oap_1_objectid, NULL);",
          "8591:     }",
          "8592:         break;",
          "8594:     case OAP_1_CMD_PROVIDE:",
          "8595:     {",
          "8596:         guint8 alias_length = flags >> 6;",
          "8597:         gint alias_offset;",
          "8598:         gint iid_offset;",
          "8599:         gint oid_offset;",
          "8601:         if (alias_length == 3)",
          "8602:             alias_length = 4;",
          "8604:         alias_offset = offset;",
          "8605:         if (alias_length == 0)",
          "8606:         {",
          "8607:             expert_add_info_format(pinfo, ti, &ei_malformed, \"alias_length == 0\");",
          "8608:             return offset;",
          "8609:         }",
          "8610:         if (api_data->session == NULL)",
          "8611:         {",
          "8612:             expert_add_info(pinfo, ti, &ei_oap_no_session);",
          "8613:             return offset;",
          "8614:         }",
          "8615:         offset = oap_1_tree_add_alias(api_data, oap_packet, packet_data, oap_tree, tvb, offset, alias_length, FALSE);",
          "8617:         iid_offset = offset;",
          "8618:         offset = oap_1_tree_add_interface(oap_tree, tvb, offset);",
          "8620:         oid_offset = offset;",
          "8621:         offset = dof_dissect_pdu_as_field(dissect_2009_11_type_4, tvb, pinfo, oap_tree,",
          "8622:                                           offset, hf_oap_1_objectid, ett_oap_1_objectid, NULL);",
          "8624:         if (alias_length && !packet_data->processed)",
          "8625:         {",
          "8626:             guint32 alias;",
          "8627:             oap_1_binding *binding = (oap_1_binding *)wmem_alloc0(wmem_file_scope(), sizeof(oap_1_binding));",
          "8628:             int i;",
          "8630:             alias = 0;",
          "8631:             for (i = 0; i < alias_length; i++)",
          "8632:                 alias = (alias << 8) | tvb_get_guint8(tvb, alias_offset + i);",
          "8634:             binding->iid_length = oid_offset - iid_offset;",
          "8635:             binding->iid = (guint8 *)wmem_alloc0(wmem_file_scope(), binding->iid_length);",
          "8636:             tvb_memcpy(tvb, binding->iid, iid_offset, binding->iid_length);",
          "8638:             binding->oid_length = offset - oid_offset;",
          "8639:             binding->oid = (guint8 *)wmem_alloc0(wmem_file_scope(), binding->oid_length);",
          "8640:             tvb_memcpy(tvb, binding->oid, oid_offset, binding->oid_length);",
          "8642:             binding->frame = pinfo->fd->num;",
          "8643:             oap_1_define_alias(api_data, alias, binding);",
          "8644:         }",
          "8645:     }",
          "8646:         break;",
          "8648:     case OAP_1_CMD_CHANGE:",
          "8649:     case OAP_1_CMD_SIGNAL:",
          "8650:     {",
          "8651:         guint8 alias_len = (flags & 0xC0) >> 6;",
          "8652:         if (alias_len == 3)",
          "8653:             alias_len = 4;",
          "8656:         {",
          "8657:             gint item_id_len;",
          "8658:             proto_item *pi;",
          "8660:             read_c2(tvb, offset, &item_id, &item_id_len);",
          "8661:             pi = proto_tree_add_uint_format(oap_tree, hf_oap_1_itemid, tvb, offset, item_id_len, item_id, \"Item ID: %u\", item_id);",
          "8662:             validate_c2(pinfo, pi, item_id, item_id_len);",
          "8663:             offset += item_id_len;",
          "8664:         }",
          "8666:         if (alias_len > 0)",
          "8667:         {",
          "8668:             if (api_data->session == NULL)",
          "8669:             {",
          "8670:                 expert_add_info(pinfo, ti, &ei_oap_no_session);",
          "8671:                 return offset;",
          "8672:             }",
          "8673:             offset = oap_1_tree_add_alias(api_data, oap_packet, packet_data, oap_tree, tvb, offset, alias_len, TRUE);",
          "8674:         }",
          "8675:         else",
          "8676:             offset = oap_1_tree_add_binding(oap_tree, pinfo, tvb, offset);",
          "8679:         proto_tree_add_item(oap_tree, hf_oap_1_update_sequence, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "8680:         offset += 2;",
          "8682:         proto_tree_add_item(oap_tree, hf_oap_1_value_list, tvb, offset, -1, ENC_NA);",
          "8683:         offset += tvb_reported_length_remaining(tvb, offset);",
          "8684:     }",
          "8685:         break;",
          "8687:     case OAP_1_RSP_EXCEPTION:",
          "8688:     {",
          "8689:         if (flags & 0x20)",
          "8690:         {",
          "8692:         }",
          "8695:         {",
          "8696:             gint rsp_len;",
          "8697:             guint16 rsp;",
          "8700:             read_c2(tvb, offset, &rsp, &rsp_len);",
          "8702:             offset += rsp_len;",
          "8703:         }",
          "8704:         proto_tree_add_item(oap_tree, hf_oap_1_value_list, tvb, offset, -1, ENC_NA);",
          "8705:         offset += tvb_reported_length_remaining(tvb, offset);",
          "8706:     }",
          "8707:         break;",
          "8709:     default:",
          "8711:         break;",
          "8712:     }",
          "8714:     return offset;",
          "8715: }",
          "8717: static int dissect_sgmp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "8718: {",
          "8719:     dof_api_data *api_data = (dof_api_data *)data;",
          "8720:     dof_packet_data *packet_data;",
          "8721:     guint offset = 0;",
          "8722:     guint8 opcode;",
          "8723:     guint16 app;",
          "8724:     gint app_len;",
          "8725:     proto_item *ti;",
          "8726:     proto_tree *sgmp_tree;",
          "8728:     if (api_data == NULL)",
          "8729:     {",
          "8731:         return 0;",
          "8732:     }",
          "8734:     packet_data = api_data->packet;",
          "8735:     if (packet_data == NULL)",
          "8736:     {",
          "8738:         return 0;",
          "8739:     }",
          "8742:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"SGMPv1 \");",
          "8745:     offset = 0;",
          "8746:     ti = proto_tree_add_item(tree, proto_sgmp, tvb, offset, -1, ENC_NA);",
          "8747:     sgmp_tree = proto_item_add_subtree(ti, ett_sgmp);",
          "8750:     offset = read_c2(tvb, offset, &app, &app_len);",
          "8751:     ti = proto_tree_add_uint(sgmp_tree, hf_2008_1_app_version, tvb, 0, app_len, app);",
          "8752:     validate_c2(pinfo, ti, app, app_len);",
          "8754:     if (offset == tvb_captured_length(tvb))",
          "8755:     {",
          "8756:         col_append_str(pinfo->cinfo, COL_INFO, \"SGMP [nop]\");",
          "8757:         expert_add_info(pinfo, sgmp_tree, &ei_implicit_no_op);",
          "8759:         return offset;",
          "8760:     }",
          "8764:     opcode = tvb_get_guint8(tvb, offset);",
          "8765:     if (!packet_data->is_command)",
          "8766:         opcode |= SGMP_RESPONSE;",
          "8768:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", val_to_str(opcode, sgmp_opcode_strings, \"Unknown Opcode (%d)\"));",
          "8771:     proto_tree_add_item(sgmp_tree, hf_opcode, tvb, offset, 1, ENC_NA);",
          "8772:     offset += 1;",
          "8774:     switch (opcode)",
          "8775:     {",
          "8776:     case SGMP_CMD_EPOCH_CHANGED:",
          "8777:     {",
          "8779:         {",
          "8780:             proto_tree_add_item(sgmp_tree, hf_sgmp_tmin, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "8781:             offset += 2;",
          "8782:         }",
          "8785:         {",
          "8786:             proto_tree_add_item(sgmp_tree, hf_sgmp_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "8787:             offset += 2;",
          "8788:         }",
          "8789:     }",
          "8790:         break;",
          "8792:     case SGMP_CMD_HEARTBEAT:",
          "8793:     {",
          "8794:         gint start_offset;",
          "8797:         {",
          "8798:             guint16 version;",
          "8799:             gint length;",
          "8800:             proto_item *pi;",
          "8802:             start_offset = offset;",
          "8803:             offset = read_c2(tvb, offset, &version, &length);",
          "8804:             pi = proto_tree_add_uint(sgmp_tree, hf_latest_version, tvb, start_offset, offset - start_offset, version);",
          "8805:             validate_c2(pinfo, pi, version, length);",
          "8806:         }",
          "8809:         {",
          "8810:             proto_tree_add_item(sgmp_tree, hf_desire, tvb, offset, 1, ENC_NA);",
          "8811:             offset += 1;",
          "8812:         }",
          "8815:         {",
          "8816:             proto_tree_add_item(sgmp_tree, hf_tie_breaker, tvb, offset, 4, ENC_BIG_ENDIAN);",
          "8817:             offset += 4;",
          "8818:         }",
          "8819:     }",
          "8820:         break;",
          "8822:     case SGMP_CMD_REKEY:",
          "8823:     case SGMP_CMD_REKEY_EPOCH:",
          "8824:     case SGMP_CMD_REKEY_MERGE:",
          "8825:     {",
          "8827:         gint start_offset;",
          "8828:         tvbuff_t *initial_state;",
          "8829: #endif",
          "8830:         guint8 key[32];",
          "8833:         if (opcode != SGMP_CMD_REKEY_MERGE)",
          "8834:         {",
          "8835:             proto_tree_add_item(sgmp_tree, hf_delay, tvb, offset, 1, ENC_NA);",
          "8836:             offset += 1;",
          "8837:         }",
          "8840:         {",
          "8841:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_9, tvb, pinfo, sgmp_tree,",
          "8842:                                               offset, hf_initial_state, ett_initial_state, NULL);",
          "8844:             initial_state = tvb_new_subset(tvb, start_offset, offset - start_offset, offset - start_offset);",
          "8845: #endif",
          "8846:         }",
          "8849:         if (opcode == SGMP_CMD_REKEY_EPOCH)",
          "8850:         {",
          "8851:             proto_tree_add_item(sgmp_tree, hf_sgmp_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "8852:             offset += 2;",
          "8853:         }",
          "8856:         {",
          "8857:             proto_tree_add_item(sgmp_tree, hf_key, tvb, offset, 32, ENC_NA);",
          "8858:             tvb_memcpy(tvb, key, offset, 32);",
          "8859:             offset += 32;",
          "8860:         }",
          "8863:         if (!packet_data->processed && api_data->session)",
          "8864:         {",
          "8868:             dissector_table_t field_dissector = find_dissector_table(\"dof.secmode\");",
          "8869:             if (field_dissector != NULL)",
          "8870:             {",
          "8871: #if 0",
          "8872:                 dissector_handle_t field_handle = dissector_get_port_handle(field_dissector, packet_data->security_mode);",
          "8873:                 if (field_handle != NULL)",
          "8874:                 {",
          "8875:                     void *saved_private = pinfo->private_data;",
          "8876:                     dof_secmode_api_data setup_data;",
          "8877:                     gint block_length;",
          "8879:                     setup_data.version = DOF_API_VERSION;",
          "8880:                     setup_data.context = INITIALIZE;",
          "8881:                     setup_data.dof_api = api_data;",
          "8882:                     setup_data.secure_session = rekey_data->security_session;",
          "8884:                     pinfo->private_data = &setup_data;",
          "8885:                     block_length = call_dissector_only(field_handle, NULL, pinfo, NULL);",
          "8886:                     pinfo->private_data = saved_private;",
          "8887:                 }",
          "8888: #endif",
          "8889:             }",
          "8890:         }",
          "8891:     }",
          "8892:         break;",
          "8894:     case SGMP_CMD_REQUEST_GROUP:",
          "8895:     {",
          "8896:         guint8 *domain_buf = NULL;",
          "8897:         guint8 domain_length = 0;",
          "8898:         gint start_offset;",
          "8899:         guint I_offset = offset;",
          "8900:         sgmp_packet_data *sgmp_data = NULL;",
          "8901:         guint16 epoch;",
          "8905:         {",
          "8906:             start_offset = offset;",
          "8907:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_7, tvb, pinfo, sgmp_tree,",
          "8908:                                               offset, hf_sgmp_domain, ett_sgmp_domain, NULL);",
          "8909:             if (!packet_data->processed)",
          "8910:             {",
          "8911:                 domain_length = offset - start_offset;",
          "8912:                 domain_buf = (guint8 *)wmem_alloc0(wmem_packet_scope(), domain_length);",
          "8913:                 tvb_memcpy(tvb, domain_buf, start_offset, domain_length);",
          "8914:             }",
          "8915:         }",
          "8918:         {",
          "8919:             epoch = tvb_get_ntohs(tvb, offset);",
          "8920:             proto_tree_add_item(sgmp_tree, hf_sgmp_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "8921:             offset += 2;",
          "8922:         }",
          "8925:         {",
          "8927:             {",
          "8928:                 dof_2008_16_security_4 *response;",
          "8929:                 offset = dof_dissect_pdu_as_field(dissect_2008_16_security_4, tvb, pinfo, sgmp_tree,",
          "8930:                                                   offset, hf_initiator_block, ett_initiator_block, (void **)&response);",
          "8931:                 if (response && !packet_data->processed)",
          "8932:                 {",
          "8933:                     tvbuff_t *identity = response->identity;",
          "8934:                     guint8 identity_length = tvb_reported_length(identity);",
          "8935:                     guint8 *identity_buf = (guint8 *)wmem_alloc0(wmem_file_scope(), identity_length);",
          "8938:                     tvb_memcpy(identity, identity_buf, 0, identity_length);",
          "8940:                     {",
          "8941:                         sgmp_data = (sgmp_packet_data *)wmem_alloc0(wmem_file_scope(), sizeof(sgmp_packet_data));",
          "8942:                         dof_packet_add_proto_data(packet_data, proto_sgmp, sgmp_data);",
          "8944:                         sgmp_data->domain_length = domain_length;",
          "8945:                         sgmp_data->domain = (guint8 *)wmem_alloc0(wmem_file_scope(), domain_length);",
          "8946:                         memcpy(sgmp_data->domain, domain_buf, domain_length);",
          "8948:                         sgmp_data->group_length = identity_length;",
          "8949:                         sgmp_data->group = (guint8 *)wmem_alloc0(wmem_file_scope(), identity_length);",
          "8950:                         memcpy(sgmp_data->group, identity_buf, identity_length);",
          "8952:                         sgmp_data->epoch = epoch;",
          "8953:                         sgmp_data->request_session = api_data->session;",
          "8954:                     }",
          "8955:                 }",
          "8956:             }",
          "8957:         }",
          "8960:         {",
          "8961:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_10, tvb, pinfo, sgmp_tree,",
          "8962:                                               offset, hf_sgmp_security_scope, ett_sgmp_security_scope, NULL);",
          "8963:         }",
          "8966:         if (sgmp_data && !sgmp_data->I)",
          "8967:         {",
          "8968:             sgmp_data->I_length = offset - I_offset;",
          "8969:             sgmp_data->I = (guint8 *)wmem_alloc0(wmem_file_scope(), sgmp_data->I_length);",
          "8970:             tvb_memcpy(tvb, sgmp_data->I, I_offset, sgmp_data->I_length);",
          "8971:         }",
          "8972:     }",
          "8973:         break;",
          "8975:     case SGMP_RSP_REQUEST_GROUP:",
          "8976:     {",
          "8977:         gint start_offset;",
          "8979:         guint A_offset;",
          "8980:         tvbuff_t *initial_state;",
          "8981:         guint A_end;",
          "8982: #endif",
          "8986:         {",
          "8990:             {",
          "8991:                 offset = dof_dissect_pdu_as_field(dissect_2008_16_security_9, tvb, pinfo, sgmp_tree,",
          "8992:                                                   offset, hf_initial_state, ett_initial_state, NULL);",
          "8994:                 initial_state = tvb_new_subset(tvb, start_offset, offset - start_offset, offset - start_offset);",
          "8995: #endif",
          "8996:             }",
          "8999:             {",
          "9000:                 guint16 version;",
          "9001:                 gint length;",
          "9002:                 proto_item *pi;",
          "9004:                 start_offset = offset;",
          "9005:                 offset = read_c2(tvb, offset, &version, &length);",
          "9006:                 pi = proto_tree_add_uint(sgmp_tree, hf_latest_version, tvb, start_offset, offset - start_offset, version);",
          "9007:                 validate_c2(pinfo, pi, version, length);",
          "9008:             }",
          "9011:             {",
          "9012:                 proto_tree_add_item(sgmp_tree, hf_desire, tvb, offset, 1, ENC_NA);",
          "9013:                 offset += 1;",
          "9014:             }",
          "9015:         }",
          "9020:         A_end = offset;",
          "9021: #endif",
          "9024:         {",
          "9025:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_5, tvb, pinfo, sgmp_tree,",
          "9026:                                               offset, hf_ticket, ett_ticket, NULL);",
          "9027:         }",
          "9034:         if (packet_data->opid_first && !api_data->secure_session)",
          "9035:         {",
          "9036: #if 0",
          "9037:             sgmp_packet_data* cmd_data = (sgmp_packet_data*)dof_packet_get_proto_data(packet_data->opid_first, proto_sgmp);",
          "9038:             extern struct BlockCipher BlockCipher_AES_256;",
          "9039:             struct BlockCipher* cipher = &BlockCipher_AES_256;",
          "9040:             guint8* ekey = (guint8*)ep_alloc(cipher->keyStateSize);",
          "9042:             if (cmd_data && !cmd_data->A)",
          "9043:             {",
          "9044:                 cmd_data->A_length = A_end - A_offset;",
          "9045:                 cmd_data->A = (guint8*)wmem_alloc0(wmem_file_scope(), cmd_data->A_length);",
          "9046:                 tvb_memcpy(tvb, cmd_data->A, A_offset, cmd_data->A_length);",
          "9047:             }",
          "9050:             {",
          "9051:                 dof_learned_group_data* group = globals.learned_group_data;",
          "9052:                 struct list;",
          "9053:                 struct list",
          "9054:                 { dof_learned_group_data *group;",
          "9055:                     struct list *next; };",
          "9056:                 struct list *to_try = NULL;",
          "9057:                 guint8 confirmation[32];",
          "9058:                 guint8* discovered_kek = NULL;",
          "9059:                 dof_learned_group_auth_data *auth = NULL;",
          "9061:                 tvb_memcpy(tvb, confirmation, start_offset, 32);",
          "9063:                 while (group)",
          "9064:                 {",
          "9065:                     if ((cmd_data->domain_length == group->domain_length) &&",
          "9066:                         (memcmp(cmd_data->domain, group->domain, group->domain_length) == 0) &&",
          "9067:                         (cmd_data->group_length == group->group_length) &&",
          "9068:                         (memcmp(cmd_data->group, group->group, group->group_length) == 0))",
          "9069:                     {",
          "9070:                         struct list *n = (struct list *) ep_alloc0(sizeof(struct list));",
          "9071:                         n->group = group;",
          "9072:                         n->next = to_try;",
          "9073:                         to_try = n;",
          "9074:                     }",
          "9076:                     group = group->next;",
          "9077:                 }",
          "9080:                 while (to_try && !discovered_kek)",
          "9081:                 {",
          "9082:                     group = to_try->group;",
          "9084:                     auth = group->keys;",
          "9086:                     while (auth && !discovered_kek)",
          "9087:                     {",
          "9088:                         guint8 mac[32];",
          "9089:                         guint8 key[32];",
          "9090:                         int j;",
          "9093:                         if (auth->epoch == cmd_data->epoch)",
          "9094:                         {",
          "9095:                             tvb_memcpy(tvb, mac, start_offset, 32);",
          "9096:                             tvb_memcpy(tvb, key, start_offset + 32, 32);",
          "9098:                             if (cipher != NULL)",
          "9099:                             {",
          "9100:                                 cipher->GenerateKeyState(ekey, auth->kek);",
          "9101:                                 cipher->Encrypt(ekey, mac);",
          "9102:                                 cipher->Encrypt(ekey, mac + 16);",
          "9103:                             }",
          "9105:                             for (j = 0; j < 32; j++)",
          "9106:                             key[j] ^= mac[j];",
          "9108:                             if (sgmp_validate_session_key(cmd_data, confirmation, auth->kek, key))",
          "9109:                             {",
          "9110:                                 discovered_kek = (guint8*)se_alloc0(32);",
          "9111:                                 memcpy(discovered_kek, key, 32);",
          "9112:                                 break;",
          "9113:                             }",
          "9114:                         }",
          "9116:                         auth = auth->next;",
          "9117:                     }",
          "9119:                     to_try = to_try->next;",
          "9120:                 }",
          "9130:                 if (discovered_kek)",
          "9131:                 {",
          "9132:                     dissector_table_t field_dissector;",
          "9133:                     dissector_handle_t field_handle;",
          "9134:                     dof_session_key_exchange_data *key_exchange = NULL;",
          "9136:                     dof_secure_session_data *dof_secure_session = cmd_data->request_session->secure_sessions;",
          "9137:                     while (dof_secure_session)",
          "9138:                     {",
          "9139:                         if ((dof_secure_session->ssid == group->ssid) &&",
          "9140:                             (dof_secure_session->domain_length == group->domain_length) &&",
          "9141:                             (memcmp(dof_secure_session->domain, group->domain, group->domain_length) == 0))",
          "9142:                         break;",
          "9144:                         dof_secure_session = dof_secure_session->next;",
          "9145:                     }",
          "9147:                     if (!dof_secure_session)",
          "9148:                     {",
          "9149:                         dof_session_data *dof_session = wmem_alloc0(wmem_file_scope(), sizeof(dof_session_data));",
          "9150:                         dof_session->session_id = globals.next_session++;",
          "9151:                         dof_session->dof_id = api_data->session->dof_id;",
          "9153:                         dof_secure_session = wmem_alloc0(wmem_file_scope(), sizeof(dof_secure_session_data));",
          "9154:                         dof_secure_session->ssid = group->ssid;",
          "9155:                         dof_secure_session->domain_length = group->domain_length;",
          "9156:                         dof_secure_session->domain = group->domain;",
          "9157:                         dof_secure_session->original_session_id = cmd_data->request_session->session_id;",
          "9158:                         dof_secure_session->parent = dof_session;",
          "9159:                         dof_secure_session->is_2_node = FALSE;",
          "9160:                         dof_secure_session->next = cmd_data->request_session->secure_sessions;",
          "9161:                         cmd_data->request_session->secure_sessions = dof_secure_session;",
          "9162:                     }",
          "9167:                     {",
          "9168:                         key_exchange = wmem_alloc0(wmem_file_scope(), sizeof(dof_session_key_exchange_data));",
          "9169:                         if (!key_exchange)",
          "9170:                         return offset;",
          "9172:                         key_exchange->i_valid = packet_data->opid_first->dof_frame;",
          "9173:                         key_exchange->r_valid = packet_data->dof_frame;",
          "9174:                         key_exchange->security_mode = auth->security_mode;",
          "9175:                         key_exchange->security_mode_data = auth->mode;",
          "9176:                         key_exchange->security_mode_data_length = auth->mode_length;",
          "9177:                         key_exchange->session_key = discovered_kek;",
          "9180:                         if (!dof_secure_session->session_security_data_last)",
          "9181:                         dof_secure_session->session_security_data = key_exchange;",
          "9182:                         else",
          "9183:                         dof_secure_session->session_security_data_last->next = key_exchange;",
          "9185:                         dof_secure_session->session_security_data_last = key_exchange;",
          "9186:                     }",
          "9189:                     field_dissector = find_dissector_table(\"dps.secmode\");",
          "9190:                     if (field_dissector != NULL)",
          "9191:                     {",
          "9192:                         field_handle = dissector_get_uint_handle(field_dissector, auth->security_mode);",
          "9193:                         if (field_handle != NULL)",
          "9194:                         {",
          "9195:                             dof_secmode_api_data setup_data;",
          "9196:                             gint block_length;",
          "9197:                             tvbuff_t *ntvb = tvb_new_subset(tvb, A_offset, -1, -1);",
          "9199:                             setup_data.context = INITIALIZE;",
          "9200:                             setup_data.security_mode_offset = 0;",
          "9201:                             setup_data.dof_api = api_data;",
          "9202:                             setup_data.secure_session = dof_secure_session;",
          "9203:                             setup_data.session_key_data = key_exchange;",
          "9204:                             block_length = call_dissector_only(field_handle, ntvb, pinfo, tree, &setup_data);",
          "9205:                         }",
          "9206:                     }",
          "9207:                 }",
          "9208:             }",
          "9209: #endif",
          "9210:         }",
          "9211:     }",
          "9212:         break;",
          "9214:     default:",
          "9215:         break;",
          "9216:     }",
          "9218:     return offset;",
          "9219: }",
          "9221: #ifdef LIBGCRYPT_OK",
          "9222: static gboolean validate_session_key(tep_rekey_data *rekey, guint S_length, guint8 *S, guint8 *confirmation, guint8 *key)",
          "9223: {",
          "9224:     guint8 pad[16];",
          "9225:     gcry_mac_hd_t hmac;",
          "9226:     gcry_error_t result;",
          "9228:     memset(pad, 0, sizeof(pad));",
          "9229:     result = gcry_mac_open(&hmac, GCRY_MAC_HMAC_SHA256, 0, NULL);",
          "9230:     if (result != 0)",
          "9231:         return FALSE;",
          "9233:     gcry_mac_setkey(hmac, key, 32);",
          "9234:     gcry_mac_write(hmac, pad, 16 - rekey->i_nonce_length);",
          "9235:     gcry_mac_write(hmac, rekey->i_nonce, rekey->i_nonce_length);",
          "9236:     gcry_mac_write(hmac, pad, 16 - rekey->r_nonce_length);",
          "9237:     gcry_mac_write(hmac, rekey->r_nonce, rekey->r_nonce_length);",
          "9238:     gcry_mac_write(hmac, S, S_length);",
          "9239:     gcry_mac_write(hmac, rekey->r_identity, rekey->r_identity_length);",
          "9240:     result = gcry_mac_verify(hmac, confirmation, 32);",
          "9241:     return result == 0;",
          "9242: }",
          "9243: #else",
          "9244: static gboolean validate_session_key(tep_rekey_data *rekey _U_, guint S_length _U_, guint8 *S _U_, guint8 *confirmation _U_, guint8 *key _U_)",
          "9245: {",
          "9246:    return FALSE;",
          "9247: }",
          "9248: #endif",
          "9250: static int dissect_tep_dsp(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "9251: {",
          "9253:     gint offset = 0;",
          "9256:     if (!tree)",
          "9257:         return 0;",
          "9262:     proto_tree_add_item(tree, hf_dsp_option, tvb, 0, -1, ENC_NA);",
          "9263:     return offset;",
          "9264: }",
          "9266: static int dissect_2008_4_tep_2_2_1(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint32 *ssid, void *data)",
          "9267: {",
          "9268:     gint offset = 0;",
          "9269:     proto_item *ti;",
          "9270:     dof_api_data *api_data = (dof_api_data *)data;",
          "9271:     dof_packet_data *packet_data;",
          "9273:     if (api_data == NULL)",
          "9274:     {",
          "9276:         return 0;",
          "9277:     }",
          "9279:     packet_data = api_data->packet;",
          "9280:     if (packet_data == NULL)",
          "9281:     {",
          "9283:         return 0;",
          "9284:     }",
          "9287:     if (packet_data->decrypted_buffer == NULL)",
          "9288:     {",
          "9289:         proto_item *pi;",
          "9290:         gint ssid_len;",
          "9291:         gint start = offset;",
          "9292:         offset = read_c4(tvb, offset, ssid, &ssid_len);",
          "9293:         pi = proto_tree_add_uint(tree, hf_tep_2_2_1_state_identifier, tvb, start, offset - start, *ssid);",
          "9294:         validate_c4(pinfo, pi, *ssid, ssid_len);",
          "9295:     }",
          "9298:     {",
          "9299:         int block_length;",
          "9300:         tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "9301:         ti = proto_tree_add_item(tree, hf_tep_2_2_1_initial_state, tvb, offset, 0, ENC_NA);",
          "9302:         ti = proto_item_add_subtree(ti, ett_tep_2_2_1_initial_state);",
          "9303:         block_length = dof_dissect_pdu(dissect_2008_16_security_9, start, pinfo, ti, NULL);",
          "9304:         proto_item_set_len(ti, block_length);",
          "9305:         offset += block_length;",
          "9306:     }",
          "9308:     return offset;",
          "9309: }",
          "9328: static int dissect_tep(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "9329: {",
          "9330:     dof_api_data *api_data = (dof_api_data *)data;",
          "9331:     dof_packet_data *packet;",
          "9332:     tep_rekey_data *rekey_data;",
          "9334:     guint offset = 0;",
          "9335:     guint8 operation;",
          "9336:     guint16 app;",
          "9337:     gint app_len;",
          "9338:     proto_item *ti;",
          "9339:     proto_tree *tep_tree, *operation_tree;",
          "9341:     if (api_data == NULL)",
          "9342:     {",
          "9344:         return 0;",
          "9345:     }",
          "9347:     packet = api_data->packet;",
          "9348:     if (packet == NULL)",
          "9349:     {",
          "9351:         return 0;",
          "9352:     }",
          "9355:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"TEPv1 \");",
          "9358:     offset = 0;",
          "9359:     ti = proto_tree_add_item(tree, proto_tep, tvb, offset, -1, ENC_NA);",
          "9360:     tep_tree = proto_item_add_subtree(ti, ett_tep);",
          "9363:     offset = read_c2(tvb, offset, &app, &app_len);",
          "9364:     ti = proto_tree_add_uint(tep_tree, hf_2008_1_app_version, tvb, 0, app_len, app);",
          "9365:     validate_c2(pinfo,ti, app, app_len);",
          "9368:     if (offset == tvb_captured_length(tvb))",
          "9369:     {",
          "9370:         col_append_str(pinfo->cinfo, COL_INFO, \"TEP [nop]\");",
          "9371:         expert_add_info(pinfo, tep_tree, &ei_implicit_no_op);",
          "9373:         return offset;",
          "9374:     }",
          "9377:     operation = tvb_get_guint8(tvb, offset);",
          "9378:     if (!packet->is_command)",
          "9379:         operation |= TEP_OPCODE_RSP;",
          "9381:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", val_to_str(operation, tep_opcode_strings, \"Unknown Opcode (%d)\"));",
          "9383:     ti = proto_tree_add_uint_format(tep_tree, hf_tep_operation, tvb, offset, 1, operation, \"Operation: %s (%u)\", val_to_str(operation, tep_opcode_strings, \"Unknown Opcode (%d)\"), operation);",
          "9385:     operation_tree = proto_item_add_subtree(ti, ett_tep_operation);",
          "9386:     ti = proto_tree_add_boolean(operation_tree, hf_tep_operation_type, tvb, offset, 0, operation);",
          "9387:     PROTO_ITEM_SET_GENERATED(ti);",
          "9390:     if ((operation & 0x8F) == 0x01)",
          "9391:     {",
          "9392:         proto_tree_add_item(operation_tree, hf_tep_c, tvb, offset, 1, ENC_NA);",
          "9393:         proto_tree_add_item(operation_tree, hf_tep_k, tvb, offset, 1, ENC_NA);",
          "9394:     }",
          "9396:     proto_tree_add_item(operation_tree, hf_tep_opcode, tvb, offset, 1, ENC_NA);",
          "9397:     offset += 1;",
          "9399:     switch (operation)",
          "9400:     {",
          "9401:     case TEP_PDU_REQUEST_KEY:",
          "9405:         rekey_data = (tep_rekey_data *)packet->opid_data;",
          "9406:         if (!rekey_data)",
          "9407:         {",
          "9408:             packet->opid_data = rekey_data = (tep_rekey_data *)wmem_alloc0(wmem_file_scope(), sizeof(tep_rekey_data));",
          "9409:             rekey_data->key_data = (dof_session_key_exchange_data *)wmem_alloc0(wmem_file_scope(), sizeof(dof_session_key_exchange_data));",
          "9410:         }",
          "9412:         if (!rekey_data)",
          "9413:         {",
          "9415:             return 0;",
          "9416:         }",
          "9418:         rekey_data->is_rekey = TRUE;",
          "9421:         if (packet->decrypted_buffer == NULL)",
          "9422:         {",
          "9423:             gint start_offset = offset;",
          "9425:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_7, tvb, pinfo, tep_tree,",
          "9426:                                               offset, hf_tep_2_1_domain, ett_tep_2_1_domain, NULL);",
          "9428:             if (!rekey_data->domain)",
          "9429:             {",
          "9430:                 rekey_data->domain_length = offset - start_offset;",
          "9431:                 rekey_data->domain = (guint8 *)wmem_alloc0(wmem_file_scope(), rekey_data->domain_length);",
          "9434:                 tvb_memcpy(tvb, rekey_data->domain, start_offset, rekey_data->domain_length);",
          "9435:             }",
          "9436:         }",
          "9437:         else",
          "9438:         {",
          "9442:             if (!rekey_data->domain)",
          "9443:             {",
          "9444:                 rekey_data->domain_length = api_data->secure_session->domain_length;",
          "9445:                 rekey_data->domain = api_data->secure_session->domain;",
          "9446:             }",
          "9447:         }",
          "9451:     case TEP_PDU_REQUEST:",
          "9454:         rekey_data = (tep_rekey_data *)packet->opid_data;",
          "9455:         if (!rekey_data)",
          "9456:         {",
          "9457:             if (api_data->secure_session == NULL)",
          "9458:             {",
          "9460:                 return 0;",
          "9461:             }",
          "9462:             packet->opid_data = rekey_data = (tep_rekey_data *)wmem_alloc0(wmem_file_scope(), sizeof(tep_rekey_data));",
          "9463:             rekey_data->domain_length = api_data->secure_session->domain_length;",
          "9464:             rekey_data->domain = api_data->secure_session->domain;",
          "9465:         }",
          "9467:         if (!rekey_data)",
          "9468:         {",
          "9470:             return 0;",
          "9471:         }",
          "9474:         {",
          "9475:             dof_2008_16_security_6_1 response;",
          "9476:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_6_1, tvb, pinfo, tep_tree,",
          "9477:                                               offset, hf_tep_2_1_initiator_block, ett_tep_2_1_initiator_block, &response);",
          "9478:             if (!packet->processed)",
          "9479:             {",
          "9480:                 tvbuff_t *inonce = response.i_nonce;",
          "9481:                 tvbuff_t *iidentity = response.i_identity;",
          "9483:                 rekey_data->i_nonce_length = tvb_reported_length(inonce);",
          "9484:                 rekey_data->i_nonce = (guint8 *)wmem_alloc0(wmem_file_scope(), rekey_data->i_nonce_length);",
          "9485:                 tvb_memcpy(inonce, rekey_data->i_nonce, 0, rekey_data->i_nonce_length);",
          "9487:                 rekey_data->i_identity_length = tvb_reported_length(iidentity);",
          "9488:                 rekey_data->i_identity = (guint8 *)wmem_alloc0(wmem_file_scope(), rekey_data->i_identity_length);",
          "9489:                 tvb_memcpy(iidentity, rekey_data->i_identity, 0, rekey_data->i_identity_length);",
          "9491:                 rekey_data->security_mode = response.security_mode;",
          "9492:                 rekey_data->security_mode_data_length = response.security_mode_data_length;",
          "9493:                 rekey_data->security_mode_data = response.security_mode_data;",
          "9494:             }",
          "9495:         }",
          "9496:         break;",
          "9498:     case TEP_PDU_ACCEPT:",
          "9499:     {",
          "9500:         guint32 ssid = 0;",
          "9501:         guint8 *S = NULL;",
          "9502:         guint8 S_length = 0;",
          "9503:         guint8 confirmation[32];",
          "9504:         typedef struct identity_key",
          "9505:         {",
          "9506:             guint8 *session_key;",
          "9507:             struct identity_key *next;",
          "9508:         } identity_key;",
          "9509:         identity_key *identity_key_list = NULL;",
          "9510:         dof_secure_session_data *dof_secure_session = NULL;",
          "9512:         if (!packet->opid_first)",
          "9513:         {",
          "9515:             return 0;",
          "9516:         }",
          "9518:         rekey_data = (tep_rekey_data *)packet->opid_first->opid_data;",
          "9519:         if (!rekey_data)",
          "9520:             return tvb_captured_length(tvb);",
          "9523:         {",
          "9524:             gint start_offset;",
          "9525:             guint8 ticket[64];",
          "9527:             start_offset = offset;",
          "9528:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_5, tvb, pinfo, tep_tree,",
          "9529:                                               offset, hf_tep_2_2_initiator_ticket, ett_tep_2_2_initiator_ticket, NULL);",
          "9531:             if (!packet->processed && rekey_data)",
          "9532:             {",
          "9533:                 rijndael_ctx cipher_state;",
          "9534:                 int i;",
          "9540:                 for (i = 0; i < globals.global_security->identity_data_count; i++)",
          "9541:                 {",
          "9542:                     dof_identity_data *identity = globals.global_security->identity_data + i;",
          "9543:                     int j;",
          "9545:                     if (identity->domain_length != rekey_data->domain_length)",
          "9546:                         continue;",
          "9547:                     if (memcmp(identity->domain, rekey_data->domain, identity->domain_length) != 0)",
          "9548:                         continue;",
          "9549:                     if (identity->identity_length != rekey_data->i_identity_length)",
          "9550:                         continue;",
          "9551:                     if (memcmp(identity->identity, rekey_data->i_identity, identity->identity_length) != 0)",
          "9552:                         continue;",
          "9554:                     tvb_memcpy(tvb, ticket, start_offset, 64);",
          "9556:                     rijndael_set_key(&cipher_state, identity->secret, 256);",
          "9557:                     encryptInPlace(DOF_PROTOCOL_TEP, &cipher_state, ticket, 16);",
          "9558:                     encryptInPlace(DOF_PROTOCOL_TEP, &cipher_state, ticket + 16, 16);",
          "9560:                     for (j = 0; j < 32; j++)",
          "9561:                         ticket[j + 32] = ticket[j + 32] ^ ticket[j];",
          "9564:                     {",
          "9565:                         identity_key *key = (identity_key *)wmem_alloc0(wmem_file_scope(), sizeof(*key));",
          "9566:                         key->session_key = (guint8 *)wmem_alloc0(wmem_file_scope(), 32);",
          "9567:                         memcpy(key->session_key, ticket + 32, 32);",
          "9568:                         key->next = identity_key_list;",
          "9569:                         identity_key_list = key;",
          "9570:                     }",
          "9571:                 }",
          "9572:             }",
          "9573:         }",
          "9576:         {",
          "9577:             if (!packet->processed)",
          "9578:                 tvb_memcpy(tvb, confirmation, offset, sizeof(confirmation));",
          "9579:             proto_tree_add_item(tep_tree, hf_tep_2_2_ticket_confirmation, tvb, offset, 32, ENC_NA);",
          "9580:             offset += 32;",
          "9581:         }",
          "9584:         if (rekey_data->key_data && rekey_data->key_data->session_key && tep_tree)",
          "9585:         {",
          "9586:             const gchar *SID = bytestring_to_str(NULL, rekey_data->key_data->session_key, 32, ':');",
          "9587:             ti = proto_tree_add_bytes_format_value(tree, hf_tep_session_key, tvb, 0, 0, rekey_data->key_data->session_key, \"%s\", SID);",
          "9588:             PROTO_ITEM_SET_GENERATED(ti);",
          "9589:         }",
          "9592:         {",
          "9594:             if (rekey_data && rekey_data->is_rekey)",
          "9595:             {",
          "9596:                 int block_length;",
          "9597:                 tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "9598:                 ti = proto_tree_add_item(tep_tree, hf_tep_2_2_responder_initialization, tvb, offset, 0, ENC_NA);",
          "9599:                 ti = proto_item_add_subtree(ti, ett_tep_2_2_responder_initialization);",
          "9600:                 block_length = dissect_2008_4_tep_2_2_1(start, pinfo, ti, &ssid, data);",
          "9601:                 proto_item_set_len(ti, block_length);",
          "9602:                 offset += block_length;",
          "9604:                 if (!packet->processed)",
          "9605:                 {",
          "9606:                     S_length = block_length;",
          "9607:                     S = (guint8 *)wmem_alloc0(wmem_file_scope(), S_length);",
          "9608:                     tvb_memcpy(start, S, 0, S_length);",
          "9609:                 }",
          "9616:                 if (packet->decrypted_buffer == NULL && !packet->processed)",
          "9617:                 {",
          "9618: #if 0",
          "9619:                     if (api_data->session)",
          "9620:                     tep_session = (tep_session_data*)dof_session_get_proto_data((dof_session_data*)api_data->session, proto_tep);",
          "9621:                     if (!tep_session && api_data->session)",
          "9622:                     {",
          "9623:                         tep_session = (tep_session_data*)se_alloc0(sizeof(*tep_session));",
          "9624:                         dof_session_add_proto_data((dof_session_data*)api_data->session, proto_tep, tep_session);",
          "9625:                     }",
          "9627:                     tep_session->pending_rekey = cmd;",
          "9628:                     tep_session->pending_confirm = packet;",
          "9629: #endif",
          "9630:                 }",
          "9631:             }",
          "9632:         }",
          "9635:         {",
          "9636:             dof_2008_16_security_6_2 response;",
          "9637:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_6_2, tvb, pinfo, tep_tree,",
          "9638:                                               offset, hf_tep_2_2_responder_block, ett_tep_2_2_responder_block, &response);",
          "9639:             if (!packet->processed)",
          "9640:             {",
          "9641:                 tvbuff_t *rnonce = response.r_nonce;",
          "9642:                 tvbuff_t *ridentity = response.r_identity;",
          "9644:                 rekey_data->r_nonce_length = tvb_reported_length(rnonce);",
          "9645:                 rekey_data->r_nonce = (guint8 *)wmem_alloc0(wmem_file_scope(), rekey_data->r_nonce_length);",
          "9646:                 tvb_memcpy(rnonce, rekey_data->r_nonce, 0, rekey_data->r_nonce_length);",
          "9648:                 rekey_data->r_identity_length = tvb_reported_length(ridentity);",
          "9649:                 rekey_data->r_identity = (guint8 *)wmem_alloc0(wmem_file_scope(), rekey_data->r_identity_length);",
          "9650:                 tvb_memcpy(ridentity, rekey_data->r_identity, 0, rekey_data->r_identity_length);",
          "9651:             }",
          "9652:         }",
          "9655:         {",
          "9656:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_6_3, tvb, pinfo, tep_tree,",
          "9657:                                               offset, hf_tep_2_2_authenticator_initialization, ett_tep_2_2_authenticator_initialization, NULL);",
          "9658:         }",
          "9665:         if (packet->decrypted_buffer == NULL)",
          "9666:         {",
          "9672:             {",
          "9673:                 dof_session_data *dof_session = api_data->session;",
          "9675:                 dof_secure_session = dof_session->secure_sessions;",
          "9676:                 while (dof_secure_session != NULL)",
          "9677:                 {",
          "9681:                     if ((dof_secure_session->ssid == ssid) &&",
          "9682:                         (dof_secure_session->domain_length == rekey_data->domain_length) &&",
          "9683:                         (memcmp(dof_secure_session->domain, rekey_data->domain, rekey_data->domain_length) == 0))",
          "9684:                         break;",
          "9686:                     dof_secure_session = dof_secure_session->next;",
          "9687:                 }",
          "9689:                 if (!dof_secure_session)",
          "9690:                 {",
          "9691:                     dof_session = (dof_session_data *)wmem_alloc0(wmem_file_scope(), sizeof(dof_session_data));",
          "9692:                     dof_session->session_id = globals.next_session++;",
          "9693:                     dof_session->dof_id = api_data->session->dof_id;",
          "9695:                     dof_secure_session = (dof_secure_session_data *)wmem_alloc0(wmem_file_scope(), sizeof(dof_secure_session_data));",
          "9696:                     dof_secure_session->ssid = ssid;",
          "9697:                     dof_secure_session->domain_length = rekey_data->domain_length;",
          "9698:                     dof_secure_session->domain = rekey_data->domain;",
          "9699:                     dof_secure_session->original_session_id = api_data->session->session_id;",
          "9700:                     dof_secure_session->parent = dof_session;",
          "9701:                     dof_secure_session->is_2_node = TRUE;",
          "9702:                     dof_secure_session->next = api_data->session->secure_sessions;",
          "9703:                     api_data->session->secure_sessions = dof_secure_session;",
          "9705:                     if (!dof_secure_session->session_security_data_last)",
          "9706:                         dof_secure_session->session_security_data = rekey_data->key_data;",
          "9707:                     else",
          "9708:                         dof_secure_session->session_security_data_last->next = rekey_data->key_data;",
          "9710:                     dof_secure_session->session_security_data_last = rekey_data->key_data;",
          "9711:                 }",
          "9712:             }",
          "9713:         }",
          "9719:         if (!packet->processed && rekey_data->is_rekey)",
          "9720:         {",
          "9721:             int i;",
          "9722:             guint8 *session_key = NULL;",
          "9727:             while (session_key == NULL && identity_key_list)",
          "9728:             {",
          "9729:                 if (validate_session_key(rekey_data, S_length, S, confirmation, identity_key_list->session_key))",
          "9730:                 {",
          "9731:                     session_key = (guint8 *)wmem_alloc0(wmem_file_scope(), 32);",
          "9732:                     memcpy(session_key, identity_key_list->session_key, 32);",
          "9733:                 }",
          "9735:                 identity_key_list = identity_key_list->next;",
          "9736:             }",
          "9739:             for (i = 0; session_key == NULL && i < globals.global_security->session_key_count; i++)",
          "9740:             {",
          "9741:                 if (validate_session_key(rekey_data, S_length, S, confirmation, globals.global_security->session_key[i].session_key))",
          "9742:                     session_key = globals.global_security->session_key[i].session_key;",
          "9743:             }",
          "9749:             {",
          "9750:                 rekey_data->key_data->r_valid = packet->dof_frame;",
          "9751:                 rekey_data->key_data->i_valid = G_MAXUINT32;",
          "9752:                 rekey_data->key_data->session_key = session_key;",
          "9753:                 rekey_data->key_data->security_mode = rekey_data->security_mode;",
          "9754:                 rekey_data->key_data->security_mode_data_length = rekey_data->security_mode_data_length;",
          "9755:                 rekey_data->key_data->security_mode_data = rekey_data->security_mode_data;",
          "9757:                 if (session_key && dof_secure_session)",
          "9758:                 {",
          "9760:                     dissector_table_t field_dissector = find_dissector_table(\"dof.secmode\");",
          "9761:                     if (field_dissector != NULL)",
          "9762:                     {",
          "9763:                         dissector_handle_t field_handle = dissector_get_uint_handle(field_dissector, rekey_data->key_data->security_mode);",
          "9764:                         if (field_handle != NULL)",
          "9765:                         {",
          "9766:                             dof_secmode_api_data setup_data;",
          "9768:                             setup_data.context = INITIALIZE;",
          "9769:                             setup_data.security_mode_offset = 0;",
          "9770:                             setup_data.dof_api = api_data;",
          "9771:                             setup_data.secure_session = dof_secure_session;",
          "9772:                             setup_data.session_key_data = rekey_data->key_data;",
          "9774:                             call_dissector_only(field_handle, NULL, pinfo, NULL, &setup_data);",
          "9775:                         }",
          "9776:                     }",
          "9777:                 }",
          "9778:             }",
          "9779:         }",
          "9780:     }",
          "9781:         break;",
          "9783:     case TEP_PDU_CONFIRM:",
          "9784:     {",
          "9787:         proto_tree_add_item(tep_tree, hf_tep_2_1_ticket_confirmation, tvb, offset, 32, ENC_NA);",
          "9788:         offset += 32;",
          "9790:         if (!packet->processed && api_data->session && packet->opid_first && packet->opid_first->opid_data)",
          "9791:         {",
          "9792:             dof_session_key_exchange_data *sk_data;",
          "9794:             rekey_data = (tep_rekey_data *)packet->opid_first->opid_data;",
          "9795:             sk_data = rekey_data->key_data;",
          "9798:             if (sk_data)",
          "9799:                 sk_data->i_valid = packet->dof_frame;",
          "9800:         }",
          "9801:     }",
          "9802:         break;",
          "9804:     case TEP_PDU_END_SESSION:",
          "9805:     case TEP_PDU_SESSION_ENDING:",
          "9806:         break;",
          "9808:     case TEP_PDU_REJECT:",
          "9809:     {",
          "9811:         proto_tree_add_item(tep_tree, hf_tep_reject_code, tvb, offset, 1, ENC_NA);",
          "9812:         offset += 1;",
          "9815:         if (tvb_captured_length(tvb) > offset)",
          "9816:             proto_tree_add_item(tep_tree, hf_tep_reject_data, tvb, offset, -1, ENC_NA);",
          "9817:     }",
          "9818:         break;",
          "9820:     default:",
          "9821:         break;",
          "9822:     }",
          "9823:     return offset;",
          "9824: }",
          "9826: static int dissect_trp_dsp(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree, void *data _U_)",
          "9827: {",
          "9829:     gint offset = 0;",
          "9832:     if (!tree)",
          "9833:         return 0;",
          "9838:     proto_tree_add_item(tree, hf_trp_dsp_option, tvb, 0, -1, ENC_NA);",
          "9839:     return offset;",
          "9840: }",
          "9842: static int dissect_trp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "9843: {",
          "9844:     dof_api_data *api_data = (dof_api_data *)data;",
          "9845:     dof_packet_data *packet_data;",
          "9846:     guint offset = 0;",
          "9847:     guint8 opcode;",
          "9848:     guint16 app;",
          "9849:     gint app_len;",
          "9850:     proto_item *ti;",
          "9851:     proto_tree *trp_tree;",
          "9852:     trp_packet_data *trp_data;",
          "9855:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"TRP \");",
          "9858:     offset = 0;",
          "9859:     ti = proto_tree_add_item(tree, proto_trp, tvb, offset, -1, ENC_NA);",
          "9860:     trp_tree = proto_item_add_subtree(ti, ett_trp);",
          "9863:     offset = read_c2(tvb, offset, &app, &app_len);",
          "9864:     ti = proto_tree_add_uint(trp_tree, hf_2008_1_app_version, tvb, 0, app_len, app);",
          "9865:     validate_c2(pinfo, ti, app, app_len);",
          "9867:     if (api_data == NULL)",
          "9868:     {",
          "9869:         expert_add_info_format(pinfo, ti, &ei_malformed, \"api_data == NULL\");",
          "9870:         return offset;",
          "9871:     }",
          "9873:     packet_data = api_data->packet;",
          "9874:     if (packet_data == NULL)",
          "9875:     {",
          "9876:         expert_add_info_format(pinfo, ti, &ei_malformed, \"api_data == NULL\");",
          "9877:         return offset;",
          "9878:     }",
          "9880:     trp_data = (trp_packet_data *)dof_packet_get_proto_data(packet_data, proto_trp);",
          "9882:     if (offset == tvb_captured_length(tvb))",
          "9883:     {",
          "9884:         col_append_str(pinfo->cinfo, COL_INFO, \"TRP [nop]\");",
          "9885:         expert_add_info(pinfo, trp_tree, &ei_implicit_no_op);",
          "9887:         return offset;",
          "9888:     }",
          "9891:     opcode = tvb_get_guint8(tvb, offset);",
          "9892:     if (!packet_data->is_command)",
          "9893:         opcode |= TRP_RESPONSE;",
          "9895:     col_append_fstr(pinfo->cinfo, COL_INFO, \"%s \", val_to_str(opcode, trp_opcode_strings, \"Unknown Opcode (%d)\"));",
          "9898:     ti = proto_tree_add_uint_format(trp_tree, hf_trp_opcode, tvb, offset, 1, opcode & 0x7F, \"Opcode: %s (%u)\", val_to_str(opcode, trp_opcode_strings, \"Unknown Opcode (%d)\"), opcode & 0x7F);",
          "9899:     offset += 1;",
          "9901:     switch (opcode)",
          "9902:     {",
          "9903:     case TRP_RSP_REJECT:",
          "9904:     {",
          "9906:         proto_tree_add_item(trp_tree, hf_trp_errorcode, tvb, offset, 1, ENC_NA);",
          "9907:         offset += 1;",
          "9908:     }",
          "9909:         break;",
          "9911:     case TRP_CMD_REQUEST_KEK:",
          "9912:     {",
          "9913:         guint8 *domain_buf = NULL;",
          "9914:         guint8 domain_length = 0;",
          "9915:         gint start_offset;",
          "9917:         if (trp_data && trp_data->identity_length)",
          "9918:         {",
          "9919:             expert_add_info(pinfo, ti, &ei_trp_initiator_id_known);",
          "9920:         }",
          "9923:         start_offset = offset;",
          "9924:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_7, tvb, pinfo, trp_tree, offset, hf_domain, ett_domain, NULL);",
          "9925:         if (!packet_data->processed)",
          "9926:         {",
          "9927:             domain_length = offset - start_offset;",
          "9928:             domain_buf = (guint8 *)wmem_alloc0(wmem_file_scope(), domain_length);",
          "9929:             tvb_memcpy(tvb, domain_buf, start_offset, domain_length);",
          "9930:         }",
          "9933:         {",
          "9934:             dof_2008_16_security_4 *response;",
          "9935:             trp_packet_data *trp_pkt_data = NULL;",
          "9937:             start_offset = offset;",
          "9940:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_4, tvb, pinfo, trp_tree,",
          "9941:                                               offset, hf_initiator_request, ett_initiator_request, (void **)&response);",
          "9942:             if (response && !packet_data->processed)",
          "9943:             {",
          "9944:                 tvbuff_t *identity = response->identity;",
          "9945:                 guint8 identity_length = tvb_reported_length(identity);",
          "9946:                 guint8 *identity_buf = (guint8 *)wmem_alloc0(wmem_packet_scope(), identity_length);",
          "9947:                 int i;",
          "9950:                 tvb_memcpy(identity, identity_buf, 0, identity_length);",
          "9953:                 for (i = 0; i < globals.global_security->identity_data_count; i++)",
          "9954:                 {",
          "9955:                     dof_identity_data *gidentity = globals.global_security->identity_data + i;",
          "9957:                     if (domain_length != gidentity->domain_length ||",
          "9958:                         memcmp(domain_buf, gidentity->domain, domain_length) != 0)",
          "9959:                         continue;",
          "9961:                     if (identity_length == gidentity->identity_length &&",
          "9962:                         memcmp(identity_buf, gidentity->identity, identity_length) == 0)",
          "9963:                     {",
          "9964:                         trp_pkt_data = (trp_packet_data *)wmem_alloc0(wmem_file_scope(), sizeof(trp_pkt_data));",
          "9965:                         dof_packet_add_proto_data(packet_data, proto_trp, trp_pkt_data);",
          "9967:                         trp_pkt_data->domain_length = domain_length;",
          "9968:                         trp_pkt_data->domain = (guint8 *)wmem_alloc0(wmem_file_scope(), domain_length);",
          "9969:                         memcpy(trp_pkt_data->domain, domain_buf, domain_length);",
          "9971:                         trp_pkt_data->identity_length = identity_length;",
          "9972:                         trp_pkt_data->identity = (guint8 *)wmem_alloc0(wmem_file_scope(), identity_length);",
          "9973:                         memcpy(trp_pkt_data->identity, identity_buf, identity_length);",
          "9975:                         trp_pkt_data->secret = gidentity->secret;",
          "9976:                     }",
          "9977:                 }",
          "9978:             }",
          "9981:             {",
          "9982:                 gint gid_start = offset;",
          "9983:                 offset = dof_dissect_pdu_as_field(dissect_2008_16_security_8, tvb, pinfo, trp_tree,",
          "9984:                                                   offset, hf_group_identifier, ett_group_identifier, NULL);",
          "9986:                 if (trp_pkt_data)",
          "9987:                 {",
          "9988:                     trp_pkt_data->group_length = offset - gid_start;",
          "9989:                     trp_pkt_data->group = (guint8 *)wmem_alloc0(wmem_file_scope(), trp_pkt_data->group_length);",
          "9990:                     tvb_memcpy(tvb, trp_pkt_data->group, gid_start, trp_pkt_data->group_length);",
          "9991:                 }",
          "9992:             }",
          "9994:             if (trp_pkt_data)",
          "9995:             {",
          "9997:                 trp_pkt_data->block_I_length = offset - start_offset;",
          "9998:                 trp_pkt_data->block_I = (guint8 *)wmem_alloc0(wmem_file_scope(), trp_pkt_data->block_I_length);",
          "9999:                 tvb_memcpy(tvb, trp_pkt_data->block_I, start_offset, trp_pkt_data->block_I_length);",
          "10000:             }",
          "10001:         }",
          "10002:     }",
          "10003:         break;",
          "10005:     case TRP_RSP_REQUEST_KEK:",
          "10006:     {",
          "10007:         gint start_offset;",
          "10008:         guint32 ssid;",
          "10009:         guint8 *mode;",
          "10010:         guint8 mode_length;",
          "10011:         guint8 *block_A;",
          "10012:         guint8 block_A_length;",
          "10014:         if (trp_data && trp_data->kek_known)",
          "10015:         {",
          "10016:             expert_add_info(pinfo, ti, &ei_trp_kek_discovered);",
          "10017:         }",
          "10020:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_5, tvb, pinfo, trp_tree,",
          "10021:                                           offset, hf_initiator_ticket, ett_initiator_ticket, NULL);",
          "10025:         {",
          "10026:             start_offset = offset;",
          "10029:             {",
          "10030:                 proto_tree_add_item(trp_tree, hf_thb, tvb, offset, 1, ENC_NA);",
          "10031:                 offset += 1;",
          "10032:             }",
          "10035:             {",
          "10036:                 proto_tree_add_item(trp_tree, hf_tmin, tvb, offset, 1, ENC_NA);",
          "10037:                 offset += 1;",
          "10038:             }",
          "10041:             {",
          "10042:                 proto_tree_add_item(trp_tree, hf_tmax, tvb, offset, 1, ENC_NA);",
          "10043:                 offset += 1;",
          "10044:             }",
          "10047:             {",
          "10048:                 proto_tree_add_item(trp_tree, hf_trp_epoch, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "10049:                 offset += 2;",
          "10050:             }",
          "10053:             {",
          "10054:                 offset = dof_dissect_pdu_as_field(dissect_2009_11_type_4, tvb, pinfo, trp_tree,",
          "10055:                                                   offset, hf_sidg, ett_sidg, NULL);",
          "10056:             }",
          "10059:             {",
          "10060:                 offset = dof_dissect_pdu_as_field(dissect_2008_16_security_10, tvb, pinfo, trp_tree,",
          "10061:                                                   offset, hf_security_scope, ett_security_scope, NULL);",
          "10062:             }",
          "10065:             {",
          "10066:                 gint mode_start = offset;",
          "10067:                 offset = dof_dissect_pdu_as_field(dissect_2008_16_security_13, tvb, pinfo, trp_tree,",
          "10068:                                                   offset, hf_security_mode, ett_security_mode, NULL);",
          "10069:                 if (!packet_data->processed)",
          "10070:                 {",
          "10071:                     mode_length = offset - mode_start;",
          "10072:                     mode = (guint8 *)wmem_alloc0(wmem_packet_scope(), mode_length);",
          "10073:                     tvb_memcpy(tvb, mode, mode_start, mode_length);",
          "10074:                 }",
          "10075:             }",
          "10078:             {",
          "10079:                 gint s_offset = offset;",
          "10080:                 gint ssid_len;",
          "10081:                 proto_item *pi;",
          "10082:                 offset = read_c4(tvb, offset, &ssid, &ssid_len);",
          "10084:                 pi = proto_tree_add_uint_format(trp_tree, hf_ssid, tvb, s_offset, offset - s_offset, ssid, \"SSID: %u\", ssid);",
          "10085:                 validate_c4(pinfo, pi, ssid, ssid_len);",
          "10086:             }",
          "10089:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_2, tvb, pinfo, trp_tree,",
          "10090:                                               offset, hf_responder_pg, ett_responder_pg, NULL);",
          "10093:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_11, tvb, pinfo, trp_tree,",
          "10094:                                               offset, hf_responder_validation, ett_responder_validation, NULL);",
          "10097:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_11, tvb, pinfo, trp_tree,",
          "10098:                                               offset, hf_initiator_validation, ett_initiator_validation, NULL);",
          "10100:             block_A_length = offset - start_offset;",
          "10101:             block_A = (guint8 *)wmem_alloc0(wmem_packet_scope(), block_A_length);",
          "10102:             tvb_memcpy(tvb, block_A, start_offset, block_A_length);",
          "10103:         }",
          "10109:         if (packet_data->opid_first && !packet_data->processed)",
          "10110:         {",
          "10111: #if 0",
          "10112:             trp_packet_data* cmd_data = (trp_packet_data*)dof_packet_get_proto_data(packet_data->opid_first, proto_trp);",
          "10113:             guint8 mac[32];",
          "10114:             extern struct BlockCipher BlockCipher_AES_256;",
          "10115:             struct BlockCipher* cipher = &BlockCipher_AES_256;",
          "10116:             guint8* ekey = (guint8*)ep_alloc(cipher->keyStateSize);",
          "10118:             int i;",
          "10120:             if (cmd_data)",
          "10121:             {",
          "10122:                 guint8 kek[32];",
          "10124:                 tvb_memcpy(tvb, mac, mac_offset, 32);",
          "10125:                 tvb_memcpy(tvb, kek, mac_offset + 32, 32);",
          "10127:                 if (cipher != NULL)",
          "10128:                 {",
          "10129:                     cipher->GenerateKeyState(ekey, cmd_data->secret);",
          "10130:                     cipher->Encrypt(ekey, mac);",
          "10131:                     cipher->Encrypt(ekey, mac + 16);",
          "10132:                 }",
          "10134:                 for (i = 0; i < 32; i++)",
          "10135:                 kek[i] ^= mac[i];",
          "10137:                 {",
          "10138:                     OALSecureHMACContext ctx;",
          "10139:                     OALSecureHMACDigest digest;",
          "10141:                     OALSecureHMAC_Start(&ctx, cmd_data->secret);",
          "10142:                     OALSecureHMAC_Digest(&ctx, cmd_data->domain_length, cmd_data->domain);",
          "10143:                     OALSecureHMAC_Digest(&ctx, cmd_data->block_I_length, cmd_data->block_I);",
          "10144:                     OALSecureHMAC_Digest(&ctx, block_A_length, block_A);",
          "10145:                     OALSecureHMAC_Digest(&ctx, 32, kek);",
          "10146:                     OALSecureHMAC_Finish(&ctx, digest);",
          "10148:                     tvb_memcpy(tvb, mac, mac_offset, 32);",
          "10149:                     if (memcmp(mac, digest, 32) == 0)",
          "10150:                     {",
          "10151:                         dof_learned_group_data* group = globals.learned_group_data;",
          "10152:                         dof_learned_group_auth_data *auth = NULL;",
          "10155:                         if (!trp_data)",
          "10156:                         {",
          "10157:                             trp_data = wmem_alloc0(wmem_file_scope(), sizeof(trp_packet_data));",
          "10158:                             dof_packet_add_proto_data(packet_data, proto_trp, trp_data);",
          "10159:                         }",
          "10161:                         trp_data->kek_known = TRUE;",
          "10163:                         while (group)",
          "10164:                         {",
          "10165:                             if ((cmd_data->domain_length == group->domain_length) &&",
          "10166:                                 (memcmp(cmd_data->domain, group->domain, group->domain_length) == 0) &&",
          "10167:                                 (cmd_data->group_length == group->group_length) &&",
          "10168:                                 (memcmp(cmd_data->group, group->group, group->group_length) == 0) &&",
          "10169:                                 (ssid == group->ssid))",
          "10170:                             break;",
          "10172:                             group = group->next;",
          "10173:                         }",
          "10175:                         if (group == NULL)",
          "10176:                         {",
          "10177:                             group = wmem_alloc0(wmem_file_scope, sizeof(dof_learned_group_data));",
          "10178:                             group->domain_length = cmd_data->domain_length;",
          "10179:                             group->domain = cmd_data->domain;",
          "10180:                             group->group_length = cmd_data->group_length;",
          "10181:                             group->group = cmd_data->group;",
          "10182:                             group->ssid = ssid;",
          "10183:                             group->next = globals.learned_group_data;",
          "10184:                             globals.learned_group_data = group;",
          "10185:                         }",
          "10187:                         auth = group->keys;",
          "10189:                         while (auth)",
          "10190:                         {",
          "10191:                             if (epoch == auth->epoch)",
          "10192:                             break;",
          "10194:                             auth = auth->next;",
          "10195:                         }",
          "10197:                         if (auth == NULL)",
          "10198:                         {",
          "10199:                             auth = wmem_alloc0(wmem_file_scope(), sizeof(dof_learned_group_auth_data));",
          "10200:                             auth->epoch = epoch;",
          "10201:                             auth->next = group->keys;",
          "10202:                             group->keys = auth;",
          "10204:                             auth->kek = (guint8*)wmem_alloc0(wmem_file_scope(), 32);",
          "10205:                             memcpy(auth->kek, kek, 32);",
          "10207:                             auth->mode_length = mode_length;",
          "10208:                             auth->mode = (guint8*)wmem_alloc0(wmem_file_scope(), mode_length);",
          "10209:                             memcpy(auth->mode, mode, mode_length);",
          "10211:                             auth->security_mode = (mode[1] * 256) | mode[2];",
          "10212:                             auth->parent = group;",
          "10213:                         }",
          "10214:                     }",
          "10215:                 }",
          "10216:             }",
          "10217: #endif",
          "10218:         }",
          "10219:     }",
          "10220:         break;",
          "10222:     case TRP_CMD_REQUEST_RANDOM:",
          "10223:     {",
          "10224:         guint8 *domain_buf = NULL;",
          "10225:         guint8 domain_length = 0;",
          "10226:         gint start_offset;",
          "10228:         if (trp_data && trp_data->identity_length)",
          "10229:         {",
          "10230:             expert_add_info(pinfo, ti, &ei_trp_initiator_id_known);",
          "10231:         }",
          "10234:         start_offset = offset;",
          "10235:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_7, tvb, pinfo, trp_tree,",
          "10236:                                           offset, hf_domain, ett_domain, NULL);",
          "10237:         if (!packet_data->processed)",
          "10238:         {",
          "10239:             domain_length = offset - start_offset;",
          "10240:             domain_buf = (guint8 *)wmem_alloc0(wmem_packet_scope(), domain_length);",
          "10241:             tvb_memcpy(tvb, domain_buf, start_offset, domain_length);",
          "10242:         }",
          "10245:         {",
          "10246:             dof_2008_16_security_4 *response;",
          "10247:             trp_packet_data *trp_pkt_data = NULL;",
          "10249:             start_offset = offset;",
          "10252:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_4, tvb, pinfo, trp_tree,",
          "10253:                                               offset, hf_initiator_request, ett_initiator_request, (void **)&response);",
          "10254:             if (response && !packet_data->processed)",
          "10255:             {",
          "10256:                 tvbuff_t *identity = response->identity;",
          "10257:                 guint8 identity_length = tvb_reported_length(identity);",
          "10258:                 guint8 *identity_buf = (guint8 *)wmem_alloc0(wmem_packet_scope(), identity_length);",
          "10259:                 int i;",
          "10262:                 tvb_memcpy(identity, identity_buf, 0, identity_length);",
          "10265:                 for (i = 0; i < globals.global_security->identity_data_count; i++)",
          "10266:                 {",
          "10267:                     dof_identity_data *gidentity = globals.global_security->identity_data + i;",
          "10269:                     if (domain_length != gidentity->domain_length ||",
          "10270:                         memcmp(domain_buf, gidentity->domain, domain_length) != 0)",
          "10271:                         continue;",
          "10273:                     if (identity_length == gidentity->identity_length &&",
          "10274:                         memcmp(identity_buf, gidentity->identity, identity_length) == 0)",
          "10275:                     {",
          "10276:                         trp_pkt_data = (trp_packet_data *)wmem_alloc0(wmem_file_scope(), sizeof(trp_packet_data));",
          "10277:                         dof_packet_add_proto_data(packet_data, proto_trp, trp_pkt_data);",
          "10279:                         trp_pkt_data->domain_length = domain_length;",
          "10280:                         trp_pkt_data->domain = (guint8 *)wmem_alloc0(wmem_file_scope(), domain_length);",
          "10281:                         memcpy(trp_pkt_data->domain, domain_buf, domain_length);",
          "10283:                         trp_pkt_data->identity_length = identity_length;",
          "10284:                         trp_pkt_data->identity = (guint8 *)wmem_alloc0(wmem_file_scope(), identity_length);",
          "10285:                         memcpy(trp_pkt_data->identity, identity_buf, identity_length);",
          "10287:                         trp_pkt_data->secret = gidentity->secret;",
          "10288:                     }",
          "10289:                 }",
          "10290:             }",
          "10292:             if (trp_pkt_data)",
          "10293:             {",
          "10295:                 trp_pkt_data->block_I_length = offset - start_offset;",
          "10296:                 trp_pkt_data->block_I = (guint8 *)wmem_alloc0(wmem_file_scope(), trp_pkt_data->block_I_length);",
          "10297:                 tvb_memcpy(tvb, trp_pkt_data->block_I, start_offset, trp_pkt_data->block_I_length);",
          "10298:             }",
          "10299:         }",
          "10300:     }",
          "10301:         break;",
          "10303:     case TRP_RSP_REQUEST_RANDOM:",
          "10304:     {",
          "10306:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_5, tvb, pinfo, trp_tree,",
          "10307:                                           offset, hf_initiator_ticket, ett_initiator_ticket, NULL);",
          "10308:     }",
          "10309:         break;",
          "10311:     case TRP_CMD_REQUEST_SECURITY_SCOPES:",
          "10312:     {",
          "10313:         guint8 *domain_buf = NULL;",
          "10314:         guint8 domain_length = 0;",
          "10315:         gint start_offset;",
          "10317:         if (trp_data && trp_data->identity_length)",
          "10318:         {",
          "10319:             expert_add_info(pinfo, ti, &ei_trp_initiator_id_known);",
          "10320:         }",
          "10323:         start_offset = offset;",
          "10324:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_7, tvb, pinfo, trp_tree,",
          "10325:                                           offset, hf_domain, ett_domain, NULL);",
          "10326:         if (!packet_data->processed)",
          "10327:         {",
          "10328:             domain_length = offset - start_offset;",
          "10329:             domain_buf = (guint8 *)wmem_alloc0(wmem_packet_scope(), domain_length);",
          "10330:             tvb_memcpy(tvb, domain_buf, start_offset, domain_length);",
          "10331:         }",
          "10334:         {",
          "10335:             dof_2008_16_security_4 *response;",
          "10336:             trp_packet_data *trp_pk_data = NULL;",
          "10338:             start_offset = offset;",
          "10341:             proto_tree_add_item(trp_tree, hf_trp_duration, tvb, offset, 1, ENC_NA);",
          "10342:             offset += 1;",
          "10345:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_4, tvb, pinfo, trp_tree,",
          "10346:                                               offset, hf_initiator_request, ett_initiator_request, (void **)&response);",
          "10347:             if (response && !packet_data->processed)",
          "10348:             {",
          "10349:                 tvbuff_t *identity = response->identity;",
          "10350:                 guint8 identity_length = tvb_reported_length(identity);",
          "10351:                 guint8 *identity_buf = (guint8 *)wmem_alloc0(wmem_packet_scope(), identity_length);",
          "10352:                 int i;",
          "10355:                 tvb_memcpy(identity, identity_buf, 0, identity_length);",
          "10358:                 for (i = 0; i < globals.global_security->identity_data_count; i++)",
          "10359:                 {",
          "10360:                     dof_identity_data *gidentity = globals.global_security->identity_data + i;",
          "10362:                     if (domain_length != gidentity->domain_length ||",
          "10363:                         memcmp(domain_buf, gidentity->domain, domain_length) != 0)",
          "10364:                         continue;",
          "10366:                     if (identity_length == gidentity->identity_length &&",
          "10367:                         memcmp(identity_buf, gidentity->identity, identity_length) == 0)",
          "10368:                     {",
          "10369:                         trp_pk_data = (trp_packet_data *)wmem_alloc0(wmem_file_scope(), sizeof(trp_packet_data));",
          "10370:                         dof_packet_add_proto_data(packet_data, proto_trp, trp_pk_data);",
          "10372:                         trp_pk_data->domain_length = domain_length;",
          "10373:                         trp_pk_data->domain = (guint8 *)wmem_alloc0(wmem_file_scope(), domain_length);",
          "10374:                         memcpy(trp_pk_data->domain, domain_buf, domain_length);",
          "10376:                         trp_pk_data->identity_length = identity_length;",
          "10377:                         trp_pk_data->identity = (guint8 *)wmem_alloc0(wmem_file_scope(), identity_length);",
          "10378:                         memcpy(trp_pk_data->identity, identity_buf, identity_length);",
          "10380:                         trp_pk_data->secret = gidentity->secret;",
          "10381:                     }",
          "10382:                 }",
          "10383:             }",
          "10386:             {",
          "10387:                 gint gid_start = offset;",
          "10388:                 offset = dof_dissect_pdu_as_field(dissect_2008_16_security_8, tvb, pinfo, trp_tree,",
          "10389:                                                   offset, hf_node_identifier, ett_node_identifier, NULL);",
          "10391:                 if (trp_pk_data)",
          "10392:                 {",
          "10393:                     trp_pk_data->group_length = offset - gid_start;",
          "10394:                     trp_pk_data->group = (guint8 *)wmem_alloc0(wmem_file_scope(), trp_pk_data->group_length);",
          "10395:                     tvb_memcpy(tvb, trp_pk_data->group, gid_start, trp_pk_data->group_length);",
          "10396:                 }",
          "10397:             }",
          "10399:             if (trp_pk_data)",
          "10400:             {",
          "10402:                 trp_pk_data->block_I_length = offset - start_offset;",
          "10403:                 trp_pk_data->block_I = (guint8 *)wmem_alloc0(wmem_file_scope(), trp_pk_data->block_I_length);",
          "10404:                 tvb_memcpy(tvb, trp_pk_data->block_I, start_offset, trp_pk_data->block_I_length);",
          "10405:             }",
          "10406:         }",
          "10407:     }",
          "10408:         break;",
          "10410:     case TRP_RSP_REQUEST_SECURITY_SCOPES:",
          "10411:     {",
          "10412:         gint start_offset;",
          "10413:         guint8 *block_A;",
          "10414:         guint8 block_A_length;",
          "10417:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_5, tvb, pinfo, trp_tree,",
          "10418:                                           offset, hf_initiator_ticket, ett_initiator_ticket, NULL);",
          "10422:         {",
          "10423:             start_offset = offset;",
          "10426:             proto_tree_add_item(trp_tree, hf_trp_duration, tvb, offset, 1, ENC_NA);",
          "10427:             offset += 1;",
          "10430:             {",
          "10431:                 offset = dof_dissect_pdu_as_field(dissect_2008_16_security_10, tvb, pinfo, trp_tree,",
          "10432:                                                   offset, hf_security_scope, ett_security_scope, NULL);",
          "10433:             }",
          "10436:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_11, tvb, pinfo, trp_tree,",
          "10437:                                               offset, hf_initiator_validation, ett_initiator_validation, NULL);",
          "10439:             block_A_length = offset - start_offset;",
          "10440:             block_A = (guint8 *)wmem_alloc0(wmem_packet_scope(), block_A_length);",
          "10441:             tvb_memcpy(tvb, block_A, start_offset, block_A_length);",
          "10442:         }",
          "10443:     }",
          "10444:         break;",
          "10446:     case TRP_CMD_RESOLVE_CREDENTIAL:",
          "10447:     {",
          "10448:         guint8 *domain_buf = NULL;",
          "10449:         guint8 domain_length = 0;",
          "10450:         gint start_offset;",
          "10453:         start_offset = offset;",
          "10454:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_7, tvb, pinfo, trp_tree,",
          "10455:                                           offset, hf_domain, ett_domain, NULL);",
          "10456:         if (!packet_data->processed)",
          "10457:         {",
          "10458:             domain_length = offset - start_offset;",
          "10459:             domain_buf = (guint8 *)wmem_alloc0(wmem_packet_scope(), domain_length);",
          "10460:             tvb_memcpy(tvb, domain_buf, start_offset, domain_length);",
          "10461:         }",
          "10464:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_3_2, tvb, pinfo, trp_tree,",
          "10465:                                           offset, hf_identity_resolution, ett_identity_resolution, NULL);",
          "10466:     }",
          "10467:         break;",
          "10469:     case TRP_RSP_RESOLVE_CREDENTIAL:",
          "10470:     {",
          "10472:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_3_2, tvb, pinfo, trp_tree,",
          "10473:                                           offset, hf_identity_resolution, ett_identity_resolution, NULL);",
          "10474:     }",
          "10475:         break;",
          "10477:     case TRP_CMD_REQUEST_SESSION:",
          "10478:     {",
          "10479:         guint8 *domain_buf = NULL;",
          "10480:         guint8 domain_length = 0;",
          "10481:         gint start_offset;",
          "10483:         if (trp_data && trp_data->identity_length)",
          "10484:         {",
          "10485:             expert_add_info(pinfo, ti, &ei_trp_initiator_id_known);",
          "10486:         }",
          "10489:         start_offset = offset;",
          "10490:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_7, tvb, pinfo, trp_tree,",
          "10491:                                           offset, hf_domain, ett_domain, NULL);",
          "10492:         if (!packet_data->processed)",
          "10493:         {",
          "10494:             domain_length = offset - start_offset;",
          "10495:             domain_buf = (guint8 *)wmem_alloc0(wmem_packet_scope(), domain_length);",
          "10496:             tvb_memcpy(tvb, domain_buf, start_offset, domain_length);",
          "10497:         }",
          "10500:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_6_2, tvb, pinfo, trp_tree,",
          "10501:                                           offset, hf_responder_request, ett_responder_request, NULL);",
          "10504:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_6_1, tvb, pinfo, trp_tree,",
          "10505:                                           offset, hf_initiator_request, ett_initiator_request, NULL);",
          "10506:     }",
          "10507:         break;",
          "10509:     case TRP_RSP_REQUEST_SESSION:",
          "10510:     {",
          "10511:         gint start_offset;",
          "10512:         guint8 *block_A;",
          "10513:         guint8 block_A_length;",
          "10516:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_5, tvb, pinfo, trp_tree,",
          "10517:                                           offset, hf_responder_ticket, ett_responder_ticket, NULL);",
          "10520:         offset = dof_dissect_pdu_as_field(dissect_2008_16_security_5, tvb, pinfo, trp_tree,",
          "10521:                                           offset, hf_initiator_ticket, ett_initiator_ticket, NULL);",
          "10526:         {",
          "10527:             start_offset = offset;",
          "10529:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_6_3, tvb, pinfo, trp_tree,",
          "10530:                                               offset, hf_authentication_block, ett_authentication_block, NULL);",
          "10532:             block_A_length = offset - start_offset;",
          "10533:             block_A = (guint8 *)wmem_alloc0(wmem_packet_scope(), block_A_length);",
          "10534:             tvb_memcpy(tvb, block_A, start_offset, block_A_length);",
          "10535:         }",
          "10536:     }",
          "10537:         break;",
          "10539:     case TRP_CMD_VALIDATE_CREDENTIAL:",
          "10540:         {",
          "10541:             tvbuff_t *data_tvb;",
          "10544:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_7, tvb, pinfo, trp_tree,",
          "10545:                                               offset, hf_domain, ett_domain, NULL);",
          "10547:             offset = dof_dissect_pdu_as_field(dissect_2008_16_security_3_1, tvb, pinfo, trp_tree,",
          "10548:                                               offset, hf_identity_resolution, ett_identity_resolution, NULL);",
          "10549:             data_tvb = tvb_new_subset_remaining(tvb, offset);",
          "10550:             call_dissector(undissected_data_handle, data_tvb, pinfo, trp_tree);",
          "10551:         }",
          "10552:         break;",
          "10554:     case TRP_RSP_VALIDATE_CREDENTIAL:",
          "10555:     {",
          "10556:         tvbuff_t *data_tvb = tvb_new_subset_remaining(tvb, offset);",
          "10557:         call_dissector(undissected_data_handle, data_tvb, pinfo, trp_tree);",
          "10558:     }",
          "10559:        break;",
          "10560:     }",
          "10562:     return offset;",
          "10563: }",
          "10566: static void dof_tun_register(void)",
          "10567: {",
          "10568:     static hf_register_info hf[] =",
          "10569:     {",
          "10570:         { &hf_2012_1_tunnel_1_version,",
          "10571:             { \"Version\", \"dof.2012_1.tunnel_1.version\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }",
          "10572:         },",
          "10573:         { &hf_2012_1_tunnel_1_length,",
          "10574:             { \"Length\", \"dof.2012_1.tunnel_1.length\", FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL }",
          "10575:         },",
          "10576:     };",
          "10578:     static gint *ett[] = {",
          "10579:         &ett_2012_1_tunnel,",
          "10580:     };",
          "10582:     proto_2012_1_tunnel = proto_register_protocol(TUNNEL_PROTOCOL_STACK, \"DTPS\", \"dtps\");",
          "10583:     proto_register_field_array(proto_2008_1_app, hf, array_length(hf));",
          "10584:     proto_register_subtree_array(ett, array_length(ett));",
          "10586:     register_dissector(TUNNEL_PROTOCOL_STACK, dissect_tunnel_common, proto_2012_1_tunnel);",
          "10587:     dof_tun_app_dissectors = register_dissector_table(\"dof.tunnel.app\", \"DOF Tunnel Version\", proto_2012_1_tunnel, FT_UINT8, BASE_DEC, DISSECTOR_TABLE_NOT_ALLOW_DUPLICATE);",
          "10588: }",
          "10590: static void dof_tun_reset(void)",
          "10591: {",
          "10592: }",
          "10594: static void dof_tun_cleanup(void)",
          "10595: {",
          "10596: }",
          "10599: static void dof_tun_handoff(void)",
          "10600: {",
          "10601:     static dissector_handle_t tcp_handle;",
          "10603:     register_dissector(TUNNEL_APPLICATION_PROTOCOL, dissect_tun_app_common, proto_2008_1_app);",
          "10605:     tcp_handle = create_dissector_handle(dissect_tunnel_tcp, proto_2012_1_tunnel);",
          "10607:     dissector_add_uint(\"tcp.port\", DOF_TUN_NON_SEC_TCP_PORT, tcp_handle);",
          "10608: }",
          "10612: static void dof_reset(void)",
          "10613: {",
          "10614:     globals.next_session = 1;",
          "10615:     globals.next_transport_session = 1;",
          "10616:     globals.dof_packet_head = globals.dof_packet_tail = NULL;",
          "10617:     globals.global_security = &global_security;",
          "10618:     globals.learned_group_data = NULL;",
          "10619:     globals.decrypt_all_packets = decrypt_all_packets;",
          "10620:     globals.track_operations = track_operations;",
          "10621:     globals.track_operations_window = track_operations_window;",
          "10623:     init_addr_port_tables();",
          "10626:     next_dof_frame = 1;",
          "10629:     {",
          "10630:         secmode_field_t *list = secmode_list;",
          "10631:         guint i;",
          "10633:         global_security.group_data = g_new0(dof_group_data, num_secmode_list);",
          "10634:         global_security.group_data_count = num_secmode_list;",
          "10635:         for (i = 0; i < num_secmode_list; i++)",
          "10636:         {",
          "10637:             guint8 kek_len;",
          "10638:             dof_group_data *group_data = global_security.group_data + i;",
          "10639:             parse_hex_string(list[i].domain, &(group_data->domain), &(group_data->domain_length));",
          "10640:             parse_hex_string(list[i].identity, &(group_data->identity), &(group_data->identity_length));",
          "10641:             parse_hex_string(list[i].kek, &(group_data->kek), &kek_len);",
          "10642:         }",
          "10643:     }",
          "10646:     {",
          "10647:         seckey_field_t *list = seckey_list;",
          "10648:         guint i;",
          "10651:         for (i = 0; i < global_security.session_key_count; i++)",
          "10652:         {",
          "10653:             dof_session_key_data *session_data = &global_security.session_key[i];",
          "10654:             g_free(session_data->session_key);",
          "10655:         }",
          "10657:         g_free(global_security.session_key);",
          "10658:         global_security.session_key = NULL;",
          "10659:         global_security.session_key_count = 0;",
          "10661:         global_security.session_key = g_new0(dof_session_key_data, num_seckey_list);",
          "10662:         global_security.session_key_count = num_seckey_list;",
          "10663:         for (i = 0; i < num_seckey_list; i++)",
          "10664:         {",
          "10665:             guint8 key_len;",
          "10666:             dof_session_key_data *session_data = global_security.session_key + i;",
          "10667:             parse_hex_string(list[i].key, &(session_data->session_key), &key_len);",
          "10668:         }",
          "10669:     }",
          "10672:     {",
          "10673:         identsecret_field_t *list = identsecret_list;",
          "10674:         guint i;",
          "10677:         for (i = 0; i < global_security.identity_data_count; i++)",
          "10678:         {",
          "10679:             dof_identity_data *identity_data = &global_security.identity_data[i];",
          "10680:             g_free(identity_data->domain);",
          "10681:             g_free(identity_data->identity);",
          "10682:             g_free(identity_data->secret);",
          "10683:         }",
          "10685:         g_free(global_security.identity_data);",
          "10686:         global_security.identity_data = NULL;",
          "10687:         global_security.identity_data_count = 0;",
          "10689:         global_security.identity_data = g_new0(dof_identity_data, num_identsecret_list);",
          "10690:         global_security.identity_data_count = num_identsecret_list;",
          "10691:         for (i = 0; i < num_identsecret_list; i++)",
          "10692:         {",
          "10693:             guint8 key_len;",
          "10694:             guint32 size;",
          "10696:             dof_identity_data *identity_data = global_security.identity_data + i;",
          "10697:             if (VALIDHEX(list[i].domain[0]))",
          "10698:             {",
          "10699:                 parse_hex_string(list[i].domain, &(identity_data->domain), &(identity_data->domain_length));",
          "10700:             }",
          "10701:             else",
          "10702:             {",
          "10703:                 size = (guint32)strlen(list[i].domain);",
          "10704:                 dof_oid_new_standard_string(list[i].domain, &size, &(identity_data->domain));",
          "10705:                 identity_data->domain_length = size;",
          "10706:             }",
          "10708:             if (VALIDHEX(list[i].identity[0]))",
          "10709:             {",
          "10710:                 parse_hex_string(list[i].identity, &(identity_data->identity), &(identity_data->identity_length));",
          "10711:             }",
          "10712:             else",
          "10713:             {",
          "10714:                 size = (guint32)strlen(list[i].identity);",
          "10715:                 dof_oid_new_standard_string(list[i].identity, &size, &(identity_data->identity));",
          "10716:                 identity_data->identity_length = size;",
          "10717:             }",
          "10719:             parse_hex_string(list[i].secret, &(identity_data->secret), &key_len);",
          "10720:         }",
          "10721:     }",
          "10722: }",
          "10724: static void dof_cleanup(void)",
          "10725: {",
          "10726:     guint i;",
          "10729:     for (i = 0; i < global_security.group_data_count; i++)",
          "10730:     {",
          "10731:         dof_group_data *group_data = &global_security.group_data[i];",
          "10732:         g_free(group_data->domain);",
          "10733:         g_free(group_data->identity);",
          "10734:         g_free(group_data->kek);",
          "10735:     }",
          "10737:     g_free(global_security.group_data);",
          "10738:     global_security.group_data = NULL;",
          "10739:     global_security.group_data_count = 0;",
          "10741: }",
          "10746: static void dof_register(void)",
          "10747: {",
          "10748:     static hf_register_info hf[] =",
          "10749:     {",
          "10750:         { &hf_security_1_permission_type,",
          "10751:             { \"Permission Type\", \"dof.2008.16.security.1.desired-duration\", FT_UINT16, BASE_DEC, VALS(dof_2008_16_permission_type), 0, NULL, HFILL } },",
          "10753:         { &hf_security_1_length,",
          "10754:             { \"Length\", \"dof.2008.16.security.1.length\", FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10756:         { &hf_security_1_data,",
          "10757:             { \"Data\", \"dof.2008.16.security.1.data\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10760:         { &hf_security_2_count,",
          "10761:             { \"Count\", \"dof.2008.16.security.2.count\", FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10763:         { &hf_security_2_permission,",
          "10764:             { \"Permission\", \"dof.2008.16.security.2.permission\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10767:         { &hf_security_3_1_credential_type,",
          "10768:             { \"Credential Type\", \"dof.2008.16.security.3.1.credential_type\", FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10770:         { &hf_security_3_1_stage,",
          "10771:             { \"Stage\", \"dof.2008.16.security.3.1.stage\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10773:         { &hf_security_3_1_security_node_identifier,",
          "10774:             { \"Security Node Identifier\", \"dof.2008.16.security.3.1.security_node_identifier\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10777:         { &hf_security_3_2_credential_type,",
          "10778:             { \"Credential Type\", \"dof.2008.16.security.3.2.credential_type\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10780:         { &hf_security_3_2_stage,",
          "10781:             { \"Stage\", \"dof.2008.16.security.3.2.stage\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10783:         { &hf_security_3_2_length,",
          "10784:             { \"Length\", \"dof.2008.16.security.3.2.length\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10786:         { &hf_security_3_2_public_data,",
          "10787:             { \"Public Data\", \"dof.2008.16.security.3.2.public_data\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10790:         { &hf_security_4_l,",
          "10791:             { \"L\", \"dof.2008.16.security.4.l\", FT_UINT8, BASE_DEC, NULL, 0x80, NULL, HFILL } },",
          "10793:         { &hf_security_4_f,",
          "10794:             { \"F\", \"dof.2008.16.security.4.f\", FT_UINT8, BASE_DEC, NULL, 0x40, NULL, HFILL } },",
          "10796:         { &hf_security_4_ln,",
          "10797:             { \"Ln\", \"dof.2008.16.security.4.ln\", FT_UINT8, BASE_DEC, NULL, 0x0F, NULL, HFILL } },",
          "10799:         { &hf_security_4_identity,",
          "10800:             { \"Identity\", \"dof.2008.16.security.4.identity\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10802:         { &hf_security_4_nonce,",
          "10803:             { \"Nonce\", \"dof.2008.16.security.4.nonce\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10805:         { &hf_security_4_permission_set,",
          "10806:             { \"Permission Set\", \"dof.2008.16.security.4.permission_set\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10809:         { &hf_security_5_mac,",
          "10810:             { \"MAC\", \"dof.2008.16.security.5.mac\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10812:         { &hf_security_5_key,",
          "10813:             { \"KEY\", \"dof.2008.16.security.5.key\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10816:         { &hf_security_6_1_desired_duration,",
          "10817:             { \"Desired Duration\", \"dof.2008.16.security.6.1.desired_duration\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10819:         { &hf_security_6_1_desired_security_mode,",
          "10820:             { \"Desired Security Mode\", \"dof.2008.16.security.6.1.desired_security_mode\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10822:         { &hf_security_6_1_initiator_request,",
          "10823:             { \"Initiator Request\", \"dof.2008.16.security.6.1.initiator_request\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10826:         { &hf_security_6_2_responder_request,",
          "10827:             { \"Responder Request\", \"dof.2008.16.security.6.2.responder_request\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10830:         { &hf_security_6_3_granted_duration,",
          "10831:             { \"Granted Duration\", \"dof.2008.16.security.6.3.granted_duration\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10833:         { &hf_security_6_3_session_security_scope,",
          "10834:             { \"Session Security Scope\", \"dof.2008.16.security.6.3.session_security_scope\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10836:         { &hf_security_6_3_initiator_validation,",
          "10837:             { \"Initiator Validation\", \"dof.2008.16.security.6.3.initiator_validation\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10839:         { &hf_security_6_3_responder_validation,",
          "10840:             { \"Responder Validation\", \"dof.2008.16.security.6.3.responder_validation\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10843:         { &hf_security_9_length,",
          "10844:             { \"Length\", \"dof.2008.16.security.9.length\", FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10846:         { &hf_security_9_initial_state,",
          "10847:             { \"Initial State\", \"dof.2008.16.security.9.initial_state\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10850:         { &hf_security_10_count,",
          "10851:             { \"Count\", \"dof.2008.16.security.10.count\", FT_UINT8, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "10853:         { &hf_security_10_permission_group_identifier,",
          "10854:             { \"Permission Group Identifier\", \"dof.2008.16.security.10.permission_group_identifier\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "10857:         { &hf_security_11_count,",
          "10858:             { \"Count\", \"dof.2008.16.security.11.count\", FT_UINT16, BASE_DEC, NULL, 0, NULL, HFILL } },",
          "10860:         { &hf_security_11_permission_security_scope,",
          "10861:             { \"Permission Security Scope\", \"dof.2008.16.security.11.permission_security_scope\", FT_NONE, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "10864:         { &hf_security_12_m,",
          "10865:             { \"M\", \"dof.2008.16.security.12.m\", FT_UINT8, BASE_DEC, VALS(dof_2008_16_security_12_m), 0xC0, NULL, HFILL } },",
          "10867:         { &hf_security_12_count,",
          "10868:             { \"Count\", \"dof.2008.16.security.12.count\", FT_UINT8, BASE_DEC, NULL, 0x3F, NULL, HFILL } },",
          "10870:         { &hf_security_12_permission_group_identifier,",
          "10871:             { \"Permission Group Identifier\", \"dof.2008.16.security.12.permission_group_identifier\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "10873:         { &hf_2008_1_dof_session_transport,",
          "10874:             { \"Transport Session\", \"dof.transport_session\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "10875:         },",
          "10876:         { &hf_2008_1_dof_session,",
          "10877:             { \"DPS Session\", \"dof.session\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "10878:         },",
          "10879:         { &hf_2008_1_dof_frame,",
          "10880:             { \"DPS Frame\", \"dof.frame\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "10881:         },",
          "10882:         { &hf_2008_1_dof_is_2_node,",
          "10883:             { \"DPS Is 2 Node\", \"dof.is_2_node\", FT_BOOLEAN, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "10884:         },",
          "10885:         { &hf_2008_1_dof_is_streaming,",
          "10886:             { \"DPS Is Streaming\", \"dof.is_streaming\", FT_BOOLEAN, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "10887:         },",
          "10888:         { &hf_2008_1_dof_is_from_client,",
          "10889:             { \"DPS Is From Client\", \"dof.is_from_client\", FT_BOOLEAN, BASE_DEC, NULL, 0x00, NULL, HFILL }",
          "10890:         }",
          "10891:     };",
          "10893:     static gint *ett[] = {",
          "10895:         &ett_security_2_permission,",
          "10896:         &ett_security_3_1_security_node_identifier,",
          "10899:         &ett_security_11_permission_security_scope,",
          "10901:         &ett_security_6_1_desired_security_mode,",
          "10902:         &ett_security_6_1_initiator_request,",
          "10904:         &ett_security_6_2_responder_request,",
          "10905:         &ett_security_6_3_session_security_scope,",
          "10906:         &ett_security_6_3_initiator_validation,",
          "10907:         &ett_security_6_3_responder_validation,",
          "10909:         &ett_security_4_identity,",
          "10910:         &ett_security_4_permission_set,",
          "10912:         &ett_2008_1_dof,",
          "10913:     };",
          "10915:     static ei_register_info ei[] =",
          "10916:     {",
          "10917:         { &ei_undecoded, { \"dof.undecoded\", PI_UNDECODED, PI_WARN, \"DOF: Some protocol octets were not decoded\", EXPFILL } },",
          "10918:         { &ei_malformed, { \"dof.malformed\", PI_MALFORMED, PI_ERROR, \"Malformed:\", EXPFILL } },",
          "10919:         { &ei_implicit_no_op, { \"dof.implicit_no_op\", PI_PROTOCOL, PI_COMMENT, \"Implicit No-op\", EXPFILL } },",
          "10920:         { &ei_c2_c3_c4_format, { \"dof.c2_c3_c4_format\", PI_MALFORMED, PI_WARN, \"DOF: Cx IE format\", EXPFILL } },",
          "10921:         { &ei_security_3_1_invalid_stage, { \"dof.security.3.1.invalid_stage\", PI_MALFORMED, PI_ERROR, \"DPS: Security.3.1: Stage invalid.\", EXPFILL } },",
          "10922:         { &ei_security_4_invalid_bit, { \"dof.security.4.invalid_bit\", PI_MALFORMED, PI_WARN, \"DPS: Security.4: Reserved bit set.\", EXPFILL } },",
          "10923:         { &ei_security_13_out_of_range, { \"dof.security.13.out_of_range\", PI_MALFORMED, PI_ERROR, \"DPS: Security.13: Attribute Data out of range.\", EXPFILL } },",
          "10924:     };",
          "10927:     static uat_field_t secmode_uat_fields[] = {",
          "10928:         UAT_FLD_CSTRING(secmode_list, domain, \"Domain\", \"The domain, coded as hex digits of PDU Security.7.\"),",
          "10929:         UAT_FLD_CSTRING(secmode_list, identity, \"Group ID\", \"The group identifer, coded as hex digits of PDU Security.8.\"),",
          "10930:         UAT_FLD_CSTRING(secmode_list, kek, \"KEK\", \"The KEK, coded as hex digits representing the KEK (256-bit).\"),",
          "10931:         UAT_END_FIELDS",
          "10932:     };",
          "10935:     static uat_field_t seckey_uat_fields[] = {",
          "10936:         UAT_FLD_CSTRING(seckey_list, key, \"Session Key\", \"The session key to try to use, coded as hex digits representing the key (256-bit).\"),",
          "10937:         UAT_END_FIELDS",
          "10938:     };",
          "10941:     static uat_field_t identsecret_uat_fields[] = {",
          "10942:         UAT_FLD_CSTRING(identsecret_list, domain, \"Domain\", \"The domain, coded as hex digits of PDU Security.7.\"),",
          "10943:         UAT_FLD_CSTRING(identsecret_list, identity, \"Identity\", \"The group identifer, coded as hex digits of PDU Security.8.\"),",
          "10944:         UAT_FLD_CSTRING_OTHER(identsecret_list, secret, \"Secret\", identsecret_chk_cb, \"The resolved secret for a given identity, coded as hex digits representing the secret (256-bit).\"),",
          "10945:         UAT_END_FIELDS",
          "10946:     };",
          "10948:     module_t *dof_module;",
          "10949:     uat_t *secmode_uat;",
          "10950:     uat_t *seckey_uat;",
          "10951:     uat_t *identsecret_uat;",
          "10952:     char *uat_load_err;",
          "10953:     expert_module_t *expert_security;",
          "10955:     dsp_option_dissectors = register_dissector_table(\"dof.dsp.options\", \"DSP Protocol Options\", proto_2008_1_dsp, FT_UINT32, BASE_DEC, DISSECTOR_TABLE_NOT_ALLOW_DUPLICATE);",
          "10956:     dof_sec_dissectors = register_dissector_table(\"dof.secmode\", \"DOF Security Mode of Operation\", proto_2008_1_dof, FT_UINT16, BASE_DEC, DISSECTOR_TABLE_NOT_ALLOW_DUPLICATE);",
          "10957:     register_dissector_table(\"dof.2008.1\", \"DOF Common PDU\", proto_2008_1_dof, FT_STRING, BASE_DEC, DISSECTOR_TABLE_NOT_ALLOW_DUPLICATE);",
          "10959:     proto_2008_1_dof = proto_register_protocol(DOF_PROTOCOL_STACK, \"DOF\", \"dof\");",
          "10961:     proto_2008_1_dof_tcp = proto_register_protocol(DOF_PROTOCOL_STACK\" TCP\", \"DOF-TCP\", \"dof-tcp\");",
          "10962:     proto_2008_1_dof_udp = proto_register_protocol(DOF_PROTOCOL_STACK\" UDP\", \"DOF-UDP\", \"dof-udp\");",
          "10964:     proto_register_field_array(proto_2008_1_dof, hf, array_length(hf));",
          "10965:     proto_register_subtree_array(ett, array_length(ett));",
          "10967:     expert_security = expert_register_protocol(proto_2008_1_dof);",
          "10968:     expert_register_field_array(expert_security, ei, array_length(ei));",
          "10970:     dof_module = prefs_register_protocol(proto_2008_1_dof, dof_reset);",
          "10971:     secmode_uat = uat_new((const char *)\"DPS Security Mode Templates\",",
          "10972:                           (size_t)sizeof(secmode_field_t),",
          "10973:                           (const char *)\"custom_dof_secmode_list\",",
          "10974:                           (gboolean)TRUE,",
          "10975:                           (void **)&secmode_list,",
          "10976:                           (guint *)&num_secmode_list,",
          "10977:                           (guint)(UAT_AFFECTS_DISSECTION | UAT_AFFECTS_FIELDS),",
          "10978:                           (const char *)NULL,",
          "10979:                           (uat_copy_cb_t)secmode_list_copy_cb,",
          "10980:                           (uat_update_cb_t)secmode_list_update_cb,",
          "10981:                           (uat_free_cb_t)secmode_list_free_cb,",
          "10982:                           (uat_post_update_cb_t)secmode_list_post_update_cb,",
          "10983:                           (uat_field_t *)secmode_uat_fields",
          "10984:                           );",
          "10986:     seckey_uat = uat_new((const char *)\"DPS Session Keys\",",
          "10987:                          (size_t)sizeof(seckey_field_t),",
          "10988:                          (const char *)\"custom_dof_seckey_list\",",
          "10989:                          (gboolean)TRUE,",
          "10990:                          (void **)&seckey_list,",
          "10991:                          (guint *)&num_seckey_list,",
          "10992:                          (guint)(UAT_AFFECTS_DISSECTION | UAT_AFFECTS_FIELDS),",
          "10993:                          (const char *)NULL,",
          "10994:                          (uat_copy_cb_t)seckey_list_copy_cb,",
          "10995:                          (uat_update_cb_t)seckey_list_update_cb,",
          "10996:                          (uat_free_cb_t)seckey_list_free_cb,",
          "10997:                          (uat_post_update_cb_t)seckey_list_post_update_cb,",
          "10998:                          (uat_field_t *)seckey_uat_fields",
          "10999:                          );",
          "11001:     identsecret_uat = uat_new((const char *)\"DPS Identity Secrets\",",
          "11002:                               (size_t)sizeof(identsecret_field_t),",
          "11003:                               (const char *)\"custom_dof_identsecret_list\",",
          "11004:                               (gboolean)TRUE,",
          "11005:                               (void **)&identsecret_list,",
          "11006:                               (guint *)&num_identsecret_list,",
          "11007:                               (guint)(UAT_AFFECTS_DISSECTION | UAT_AFFECTS_FIELDS),",
          "11008:                               (const char *)NULL,",
          "11009:                               (uat_copy_cb_t)identsecret_list_copy_cb,",
          "11010:                               (uat_update_cb_t)identsecret_list_update_cb,",
          "11011:                               (uat_free_cb_t)identsecret_list_free_cb,",
          "11012:                               (uat_post_update_cb_t)identsecret_list_post_update_cb,",
          "11013:                               (uat_field_t *)identsecret_uat_fields",
          "11014:                               );",
          "11016:     prefs_register_bool_preference(dof_module, \"custom_dof_decrypt_all\",",
          "11017:                                    \"Attempt to decrypt all packets\",",
          "11018:                                    \"Specifies that decryption should be attempted on all packets, even if the session initialization wasn't captured.\",",
          "11019:                                    &decrypt_all_packets);",
          "11021:     prefs_register_bool_preference(dof_module, \"custom_dof_track_operations\",",
          "11022:                                    \"Track DPS operations\",",
          "11023:                                    \"Specifies that operations should be tracked across multiple packets, providing summary lists. This takes time and memory.\",",
          "11024:                                    &track_operations);",
          "11026:     prefs_register_uint_preference(dof_module, \"custom_dof_track_operations_window\",",
          "11027:                                    \"Track DPS window\",",
          "11028:                                    \"Limits the number of operations shown before and after the current operations\",",
          "11029:                                    10, &track_operations_window);",
          "11031:     prefs_register_static_text_preference(dof_module, \"name4567\", \"The following are tables not preferences.\", \"These tables are not controlled by OK, Apply, and Cancel of this dialog.\");",
          "11033:     prefs_register_uat_preference(dof_module, \"custom_dof_secmode_list\", \"DPS Security Mode Templates\",",
          "11034:                                   \"A table of security modes and initialization data that will be tried if no security mode is found.\",",
          "11035:                                   secmode_uat);",
          "11037:     prefs_register_uat_preference(dof_module, \"custom_dof_seckey_list\", \"DPS Session Keys\",",
          "11038:                                   \"A table of session keys to attempt if none is known.\",",
          "11039:                                   seckey_uat);",
          "11041:     prefs_register_uat_preference(dof_module, \"custom_dof_identsecret_list\", \"DPS Identity Secrets\",",
          "11042:                                   \"A table of secrets for different identities.\",",
          "11043:                                   identsecret_uat);",
          "11045:     uat_load(secmode_uat, &uat_load_err);",
          "11046:     uat_load(seckey_uat, &uat_load_err);",
          "11047:     uat_load(identsecret_uat, &uat_load_err);",
          "11048: }",
          "11050: static void dof_handoff(void)",
          "11051: {",
          "11052:     static dissector_handle_t tcp_handle;",
          "11054:     dof_oid_handle = register_dissector(DOF_OBJECT_IDENTIFIER, dissect_2009_11_type_4, oid_proto);",
          "11056:     tcp_handle = create_dissector_handle(dissect_dof_tcp, proto_2008_1_dof);",
          "11057:     dof_udp_handle = create_dissector_handle(dissect_dof_udp, proto_2008_1_dof);",
          "11059:     undissected_data_handle = find_dissector(\"data\");",
          "11061:     dissector_add_uint(\"tcp.port\", DOF_P2P_NEG_SEC_TCP_PORT, tcp_handle);",
          "11062:     dissector_add_uint(\"udp.port\", DOF_P2P_NEG_SEC_UDP_PORT, dof_udp_handle);",
          "11063:     dissector_add_uint(\"udp.port\", DOF_MCAST_NEG_SEC_UDP_PORT, dof_udp_handle);",
          "11064: }",
          "11068: static void oid_reset(void)",
          "11069: {",
          "11070: }",
          "11072: static void oid_cleanup(void)",
          "11073: {",
          "11074: }",
          "11077: static void oid_register(void)",
          "11078: {",
          "11079:     static hf_register_info hf[] = {",
          "11080:         { &hf_oid_class,",
          "11081:             { \"Class\", \"dof.oid.class\", FT_UINT32, BASE_DEC, NULL, 0, \"DPS Object Identifier Class\", HFILL }",
          "11082:         },",
          "11083:         { &hf_oid_header,",
          "11084:             { \"Header\", \"dof.oid.header\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL }",
          "11085:         },",
          "11086:         { &hf_oid_attribute,",
          "11087:             { \"Attribute\", \"dof.oid.attribute\", FT_UINT8, BASE_DEC, NULL, 0x80, NULL, HFILL }",
          "11088:         },",
          "11089:         { &hf_oid_length,",
          "11090:             { \"Length\", \"dof.oid.length\", FT_UINT8, BASE_DEC, NULL, 0x3F, NULL, HFILL }",
          "11091:         },",
          "11092:         { &hf_oid_data,",
          "11093:             { \"Data\", \"dof.oid.data\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }",
          "11094:         },",
          "11095:         { &hf_oid_all_attribute_data,",
          "11096:             { \"Attribute Data\", \"dof.oid.attribute-data\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }",
          "11097:         },",
          "11098:         { &hf_oid_attribute_header,",
          "11099:             { \"Header\", \"dof.attribute.header\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL }",
          "11100:         },",
          "11101:         { &hf_oid_attribute_attribute,",
          "11102:             { \"Attribute\", \"dof.attribute.attribute\", FT_UINT8, BASE_DEC, NULL, 0x80, NULL, HFILL }",
          "11103:         },",
          "11104:         { &hf_oid_attribute_id,",
          "11105:             { \"ID\", \"dof.attribute.id\", FT_UINT8, BASE_DEC, NULL, 0x7F, NULL, HFILL }",
          "11106:         },",
          "11107:         { &hf_oid_attribute_length,",
          "11108:             { \"Length\", \"dof.attribute.length\", FT_UINT8, BASE_DEC, NULL, 0, NULL, HFILL }",
          "11109:         },",
          "11110:         { &hf_oid_attribute_data,",
          "11111:             { \"Data\", \"dof.attribute.data\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }",
          "11112:         },",
          "11113:         { &hf_oid_attribute_oid,",
          "11114:             { \"OID\", \"dof.attribute.oid\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }",
          "11115:         },",
          "11116:     };",
          "11118:     static gint *ett[] = {",
          "11119:         &ett_oid,",
          "11120:         &ett_oid_header,",
          "11121:         &ett_oid_attribute,",
          "11122:         &ett_oid_attribute_header,",
          "11123:         &ett_oid_attribute_oid,",
          "11124:     };",
          "11126:     static ei_register_info ei[] =",
          "11127:     {",
          "11128:         { &ei_type_4_header_zero, { \"dof.oid.header_zero\", PI_MALFORMED, PI_ERROR, \"DOF Violation: Type.4: Header bit mandated 0.\", EXPFILL } },",
          "11129:     };",
          "11131:     if (oid_proto == -1)",
          "11132:     {",
          "11133:         expert_module_t *expert_oid;",
          "11135:         oid_proto = proto_register_protocol(DOF_OBJECT_IDENTIFIER, \"DPS.OID\", \"dof.oid\");",
          "11136:         proto_register_field_array(oid_proto, hf, array_length(hf));",
          "11137:         proto_register_subtree_array(ett, array_length(ett));",
          "11138:         expert_oid = expert_register_protocol(oid_proto);",
          "11139:         expert_register_field_array(expert_oid, ei, array_length(ei));",
          "11140:     }",
          "11141: }",
          "11143: static void oid_handoff(void)",
          "11144: {",
          "11145: }",
          "11149: static guint dof_ns_session_key_hash_fn(gconstpointer key)",
          "11150: {",
          "11151:     const dof_ns_session_key *session_key = (const dof_ns_session_key *)key;",
          "11152:     guint result = 0;",
          "11154:     result += g_int_hash(&session_key->transport_session_id);",
          "11155:     result += g_int_hash(&session_key->client);",
          "11156:     result += g_int_hash(&session_key->server);",
          "11158:     return result;",
          "11159: }",
          "11161: static gboolean dof_ns_session_key_equal_fn(gconstpointer key1, gconstpointer key2)",
          "11162: {",
          "11163:     const dof_ns_session_key *session_key_ptr1 = (const dof_ns_session_key *)key1;",
          "11164:     const dof_ns_session_key *session_key_ptr2 = (const dof_ns_session_key *)key2;",
          "11166:     if (session_key_ptr1->transport_session_id != session_key_ptr2->transport_session_id)",
          "11167:         return FALSE;",
          "11169:     if (session_key_ptr1->client != session_key_ptr2->client)",
          "11170:         return FALSE;",
          "11172:     if (session_key_ptr1->server != session_key_ptr2->server)",
          "11173:         return FALSE;",
          "11175:     return TRUE;",
          "11176: }",
          "11178: static void dof_dnp_reset(void)",
          "11179: {",
          "11180:     dof_ns_session_lookup = g_hash_table_new_full(dof_ns_session_key_hash_fn, dof_ns_session_key_equal_fn, g_free, NULL);",
          "11181: }",
          "11183: static void dof_dnp_cleanup(void)",
          "11184: {",
          "11185:     g_hash_table_destroy(dof_ns_session_lookup);",
          "11186:     dof_ns_session_lookup = NULL;",
          "11187: }",
          "11189: static void dof_register_dnp_0(void)",
          "11190: {",
          "11191:     static hf_register_info hf[] =",
          "11192:     {",
          "11193:         { &hf_2008_1_dnp_0_1_1_padding,",
          "11194:             { \"Padding\", \"dof.dnp.v0.padding\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL }",
          "11195:         },",
          "11196:         { &hf_2008_1_dnp_0_1_1_version,",
          "11197:             { \"Version\", \"dof.dnp.v0.version\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL }",
          "11198:         },",
          "11199:     };",
          "11201:     if (proto_2008_1_dnp_0 == -1)",
          "11202:     {",
          "11203:         proto_2008_1_dnp_0 = proto_register_protocol(DOF_NETWORK_PROTOCOL \" V0\", \"DPS.DNP.V0\", \"dof.dnp.v0\");",
          "11205:         proto_register_field_array(proto_2008_1_dnp_0, hf, array_length(hf));",
          "11206:     }",
          "11207: }",
          "11212: static void dof_reg_handoff_dnp_0(void)",
          "11213: {",
          "11214:     dissector_handle_t dnp_handle;",
          "11215:     dnp_handle = create_dissector_handle(dissect_dnp_0, proto_2008_1_dnp_0);",
          "11217:     dissector_add_uint(\"dof.dnp\", 0, dnp_handle);",
          "11218: }",
          "11220: static void dof_register_dnp_1(void)",
          "11221: {",
          "11222:     expert_module_t *expert_dnp;",
          "11224:     static hf_register_info hf[] =",
          "11225:     {",
          "11226:         { &hf_2009_9_dnp_1_flags,",
          "11227:             { \"Flags\", \"dof.2009_9.dnp_1.flags\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL }",
          "11228:         },",
          "11229:         { &hf_2009_9_dnp_1_flag_length,",
          "11230:             { \"Length Size\", \"dof.2009_9.dnp_1.flags.lengthsize\", FT_UINT8, BASE_DEC, NULL, 0x03, NULL, HFILL }",
          "11231:         },",
          "11232:         { &hf_2009_9_dnp_1_flag_srcport,",
          "11233:             { \"Source Port\", \"dof.2009_9.dnp_1.flags.srcport\", FT_UINT8, BASE_DEC, NULL, 0x04, NULL, HFILL }",
          "11234:         },",
          "11235:         { &hf_2009_9_dnp_1_flag_dstport,",
          "11236:             { \"Destination Port\", \"dof.2009_9.dnp_1.flags.dstport\", FT_UINT8, BASE_DEC, NULL, 0x08, NULL, HFILL }",
          "11237:         },",
          "11239:         { &hf_2009_9_dnp_1_length,",
          "11240:             { \"Length\", \"dof.2009_9.dnp_1.length\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL }",
          "11241:         },",
          "11242:         { &hf_2009_9_dnp_1_srcport,",
          "11243:             { \"Source Port\", \"dof.2009_9.dnp_1.srcport\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL }",
          "11244:         },",
          "11245:         { &hf_2009_9_dnp_1_dstport,",
          "11246:             { \"Destination Port\", \"dof.2009_9.dnp_1.dstport\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL }",
          "11247:         },",
          "11248:     };",
          "11250:     static gint *ett[] =",
          "11251:     {",
          "11252:         &ett_2009_9_dnp_1_flags,",
          "11253:     };",
          "11255:     static ei_register_info ei[] =",
          "11256:     {",
          "11257:         { &ei_dof_10_flags_zero, { \"dof.dnp.v1.flags_zero\", PI_UNDECODED, PI_ERROR, \"DPS-10: Reserved flag bits must be zero.\", EXPFILL } },",
          "11258:         { &ei_dof_13_length_specified, { \"dof.dnp.v1.length_specified\", PI_UNDECODED, PI_ERROR, \"DPS-13: Length must be specified on a connection.\", EXPFILL } },",
          "11259:     };",
          "11261:     if (proto_2009_9_dnp_1 == -1)",
          "11262:     {",
          "11263:         proto_2009_9_dnp_1 = proto_register_protocol(DOF_NETWORK_PROTOCOL \" V1\", \"DOF.DNP.V1\", \"dof.dnp.v1\");",
          "11265:         proto_register_field_array(proto_2009_9_dnp_1, hf, array_length(hf));",
          "11266:         proto_register_subtree_array(ett, array_length(ett));",
          "11268:         expert_dnp = expert_register_protocol(proto_2009_9_dnp_1);",
          "11269:         expert_register_field_array(expert_dnp, ei, array_length(ei));",
          "11270:     }",
          "11271: }",
          "11276: static void dof_reg_handoff_dnp_1(void)",
          "11277: {",
          "11278:     dissector_handle_t dnp_handle, dnp_frame_handle;",
          "11279:     dnp_handle = create_dissector_handle(dissect_dnp_1, proto_2009_9_dnp_1);",
          "11280:     dnp_frame_handle = create_dissector_handle(determine_packet_length_1, proto_2009_9_dnp_1);",
          "11282:     dissector_add_uint(\"dof.dnp\", 1, dnp_handle);",
          "11283:     dissector_add_uint(\"dof.dnp.frame\", 1, dnp_frame_handle);",
          "11284: }",
          "11286: static void dof_dnp_handoff(void)",
          "11287: {",
          "11288:     dof_reg_handoff_dnp_0();",
          "11289:     dof_reg_handoff_dnp_1();",
          "11290: }",
          "11295: static void dof_dnp_register(void)",
          "11296: {",
          "11297:     static hf_register_info hf[] =",
          "11298:     {",
          "11299:         { &hf_2008_1_dnp_1_flag,",
          "11300:             { \"Flag\", \"dof.2008_1.dnp_1.flag\", FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x80, NULL, HFILL }",
          "11301:         },",
          "11302:         { &hf_2008_1_dnp_1_version,",
          "11303:             { \"Version\", \"dof.2008_1.dnp_1.version\", FT_UINT8, BASE_DEC, NULL, 0x7F, NULL, HFILL }",
          "11304:         },",
          "11305:     };",
          "11307:     static gint *ett[] =",
          "11308:     {",
          "11309:         &ett_2008_1_dnp,",
          "11310:         &ett_2008_1_dnp_header,",
          "11311:     };",
          "11313:     proto_2008_1_dnp = proto_register_protocol(DOF_NETWORK_PROTOCOL, \"DPS.DNP\", \"dof.dnp\");",
          "11315:     proto_register_field_array(proto_2008_1_dnp, hf, array_length(hf));",
          "11316:     proto_register_subtree_array(ett, array_length(ett));",
          "11317:     dnp_dissectors = register_dissector_table(\"dof.dnp\", \"DOF DNP Version\", proto_2008_1_dnp, FT_UINT8, BASE_DEC, DISSECTOR_TABLE_NOT_ALLOW_DUPLICATE);",
          "11318:     dnp_framing_dissectors = register_dissector_table(\"dof.dnp.frame\", \"DOF DNP Framing\", proto_2008_1_dnp, FT_UINT8, BASE_DEC, DISSECTOR_TABLE_NOT_ALLOW_DUPLICATE);",
          "11320:     dof_register_dnp_0();",
          "11321:     dof_register_dnp_1();",
          "11322: }",
          "11330: static void dof_dpp_reset(void)",
          "11331: {",
          "11332:     dpp_reset_opid_support();",
          "11333:     dpp_reset_sid_support();",
          "11334: }",
          "11336: static void dof_dpp_cleanup(void)",
          "11337: {",
          "11338: }",
          "11340: static void dof_register_dpp_0(void)",
          "11341: {",
          "11342:     static hf_register_info hf[] =",
          "11343:     {",
          "11344:         { &hf_2008_1_dpp_0_1_1_version,",
          "11345:             { \"Version\", \"dof.dpp.v0.version\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL }",
          "11346:         },",
          "11347:     };",
          "11349:     if (proto_2008_1_dpp_0 == -1)",
          "11350:     {",
          "11351:         proto_2008_1_dpp_0 = proto_register_protocol(DOF_PRESENTATION_PROTOCOL \" V0\", \"DPS.DPP.V0\", \"dof.dpp.v0\");",
          "11353:         proto_register_field_array(proto_2008_1_dpp_0, hf, array_length(hf));",
          "11354:     }",
          "11355: }",
          "11360: static void dof_reg_handoff_dpp_0(void)",
          "11361: {",
          "11362:     dissector_handle_t dpp_handle;",
          "11363:     dpp_handle = create_dissector_handle(dissect_dpp_0, proto_2008_1_dpp_0);",
          "11365:     dissector_add_uint(\"dof.dpp\", 0, dpp_handle);",
          "11366: }",
          "11368: static void dof_register_dpp_2(void)",
          "11369: {",
          "11370:     expert_module_t *expert_dpp;",
          "11372:     static hf_register_info hf[] =",
          "11373:     {",
          "11374:         { &hf_2009_12_dpp_2_1_flags,",
          "11375:             { \"Flags\", \"dof.dpp.v2.flags\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL }",
          "11376:         },",
          "11377:         { &hf_2009_12_dpp_2_1_flag_security,",
          "11378:             { \"Secure\", \"dof.dpp.v2.flags.security\", FT_BOOLEAN, 8, NULL, 0x80, NULL, HFILL }",
          "11379:         },",
          "11380:         { &hf_2009_12_dpp_2_1_flag_opid,",
          "11381:             { \"Operation ID Type\", \"dof.dpp.v2.flags.opidtype\", FT_UINT8, BASE_DEC, VALS(strings_2009_12_dpp_opid_types), 0x60, NULL, HFILL } },",
          "11382:         { &hf_2009_12_dpp_2_1_flag_cmdrsp,",
          "11383:             { \"Command/Response\", \"dof.dpp.v2.flags.cmdrsp\", FT_BOOLEAN, 8, TFS(&tfs_response_command), 0x10, NULL, HFILL } },",
          "11384:         { &hf_2009_12_dpp_2_1_flag_seq,",
          "11385:             { \"Sequence\", \"dof.dpp.v2.flags.sequence\", FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04, NULL, HFILL } },",
          "11386:         { &hf_2009_12_dpp_2_1_flag_retry,",
          "11387:             { \"Retry\", \"dof.dpp.v2.flags.retry\", FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02, NULL, HFILL } },",
          "11389:         { &hf_2009_12_dpp_2_3_sec_flags,",
          "11390:             { \"Flags\", \"dof.dpp.v2.security.flags\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "11391:         { &hf_2009_12_dpp_2_3_sec_flag_secure,",
          "11392:             { \"Security Mode Header\", \"dof.dpp.v2.security.flags.securitymodeheader\", FT_UINT8, BASE_DEC, NULL, 0x80, NULL, HFILL } },",
          "11393:         { &hf_2009_12_dpp_2_3_sec_flag_rdid,",
          "11394:             { \"Remote Domain ID\", \"dof.dpp.v2.security.flags.rdid\", FT_UINT8, BASE_DEC, NULL, 0x08, NULL, HFILL } },",
          "11395:         { &hf_2009_12_dpp_2_3_sec_flag_partition,",
          "11396:             { \"Partition Present\", \"dof.dpp.v2.security.flags.partition\", FT_UINT8, BASE_DEC, NULL, 0x04, NULL, HFILL } },",
          "11397:         { &hf_2009_12_dpp_2_3_sec_flag_ssid,",
          "11398:             { \"SSID Present\", \"dof.dpp.v2.security.flags.ssid\", FT_UINT8, BASE_DEC, NULL, 0x01, NULL, HFILL } },",
          "11399:         { &hf_2009_12_dpp_2_3_sec_flag_as,",
          "11400:             { \"AS Present\", \"dof.dpp.v2.security.flags.as\", FT_UINT8, BASE_DEC, NULL, 0x02, NULL, HFILL } },",
          "11401:         { &hf_2009_12_dpp_2_3_sec_ssid,",
          "11402:             { \"Security State Identifier\", \"dof.dpp.v2.security.ssid\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11403:         { &hf_2009_12_dpp_2_3_sec_rdid,",
          "11404:             { \"Remote Domain Identifier\", \"dof.dpp.v2.security.rdid\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11405:         { &hf_2009_12_dpp_2_3_sec_remote_partition,",
          "11406:             { \"Remote Security Scope\", \"dof.dpp.v2.security.remote-scope\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11407:         { &hf_2009_12_dpp_2_3_sec_partition,",
          "11408:             { \"Security Scope\", \"dof.dpp.v2.security.scope\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11410:         { &hf_2009_12_dpp_2_1_opcnt,",
          "11411:             { \"Operation Count\", \"dof.dpp.v2.opcnt\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11412:         { &hf_2009_12_dpp_2_1_seq,",
          "11413:             { \"Sequence\", \"dof.dpp.v2.sequence\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11414:         { &hf_2009_12_dpp_2_1_retry,",
          "11415:             { \"Retry\", \"dof.dpp.v2.retry\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11416:         { &hf_2009_12_dpp_2_1_delay,",
          "11417:             { \"Delay\", \"dof.dpp.v2.delay\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11418:     };",
          "11420:     static hf_register_info shf[] =",
          "11421:     {",
          "11422:         { &hf_2009_12_dpp_2_14_opcode,",
          "11423:             { \"Opcode\", \"dof.dpp.v2s.opcode\", FT_UINT8, BASE_DEC, VALS(strings_2009_12_dpp_common_opcodes), 0x0, NULL, HFILL } },",
          "11424:     };",
          "11426:     static gint *ett[] =",
          "11427:     {",
          "11428:         &ett_2009_12_dpp_2_1_flags,",
          "11429:         &ett_2009_12_dpp_2_opid,",
          "11430:         &ett_2009_12_dpp_2_opid_history,",
          "11431:         &ett_2009_12_dpp_2_3_security,",
          "11432:         &ett_2009_12_dpp_2_3_sec_flags,",
          "11433:         &ett_2009_12_dpp_2_3_sec_remote_partition,",
          "11434:         &ett_2009_12_dpp_2_3_sec_partition,",
          "11435:     };",
          "11437:     static ei_register_info ei[] =",
          "11438:     {",
          "11439:         { &ei_dpp2_dof_10_flags_zero, { \"dof.dpp.v2.flags_zero\", PI_UNDECODED, PI_ERROR, \"DPS-10: Reserved flag bits must be zero.\", EXPFILL } },",
          "11440:         { &ei_dpp_default_flags, { \"dof.dpp.v2.flags_included\", 0, PI_NOTE, \"Default flag value is included explicitly.\", EXPFILL } },",
          "11441:         { &ei_dpp_explicit_sender_sid_included, { \"dof.dpp.v2.sender_sid_included\", PI_COMMENT, PI_NOTE, \"Explicit SID could be optimized, same as sender.\", EXPFILL } },",
          "11442:         { &ei_dpp_explicit_receiver_sid_included, { \"dof.dpp.v2.receiver_sid_included\", PI_COMMENT, PI_NOTE, \"Explicit SID could be optimized, same as receiver.\", EXPFILL } },",
          "11443: #ifdef LIBGCRYPT_OK",
          "11444:         { &ei_dpp_no_security_context, { \"dof.dpp.v2.no_context\", PI_UNDECODED, PI_WARN, \"No security context to enable packet decryption.\", EXPFILL } },",
          "11445: #else",
          "11446:         { &ei_dpp_no_security_context, { \"dof.dpp.v2.no_context\", PI_UNDECODED, PI_WARN, \"This version of wireshark was built without DOF decryption capability\", EXPFILL } },",
          "11447: #endif",
          "11448:     };",
          "11450:     static gint *sett[] =",
          "11451:     {",
          "11452:         &ett_2009_12_dpp_common,",
          "11453:     };",
          "11455:     if (proto_2009_12_dpp == -1)",
          "11456:     {",
          "11457:         proto_2009_12_dpp = proto_register_protocol(DOF_PRESENTATION_PROTOCOL \" V2\", \"DPS.DPP.V2\", \"dof.dpp.v2\");",
          "11458:         proto_register_field_array(proto_2009_12_dpp, hf, array_length(hf));",
          "11459:         proto_register_subtree_array(ett, array_length(ett));",
          "11460:     }",
          "11462:     if (proto_2009_12_dpp_common == -1)",
          "11463:     {",
          "11464:         proto_2009_12_dpp_common = proto_register_protocol(DOF_PRESENTATION_PROTOCOL \" V2 Support\", \"DPS.DPP.V2S\", \"dof.dpp.v2s\");",
          "11466:         proto_register_field_array(proto_2009_12_dpp, shf, array_length(shf));",
          "11467:         proto_register_subtree_array(sett, array_length(sett));",
          "11469:         expert_dpp = expert_register_protocol(proto_2009_12_dpp);",
          "11470:         expert_register_field_array(expert_dpp, ei, array_length(ei));",
          "11471:     }",
          "11472: }",
          "11477: static void dof_reg_handoff_dpp_2(void)",
          "11478: {",
          "11479:     dissector_handle_t dpp_handle;",
          "11480:     dpp_handle = create_dissector_handle(dissect_dpp_2, proto_2009_12_dpp);",
          "11481:     dissector_add_uint(\"dof.dpp\", 2, dpp_handle);",
          "11482: }",
          "11487: static void dof_dpp_register(void)",
          "11488: {",
          "11489:     static hf_register_info hf[] =",
          "11490:     {",
          "11491:         { &hf_2008_1_dpp_sid_num,",
          "11492:             { \"SID ID\", \"dof.dpp.v2.sid-id\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL }",
          "11493:         },",
          "11494:         { &hf_2008_1_dpp_sid_str,",
          "11495:             { \"SID\", \"dof.dpp.v2.sid\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL }",
          "11496:         },",
          "11497:         { &hf_2008_1_dpp_rid_num,",
          "11498:             { \"RID ID\", \"dof.dpp.v2.rid-id\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL }",
          "11499:         },",
          "11500:         { &hf_2008_1_dpp_rid_str,",
          "11501:             { \"RID\", \"dof.dpp.v2.rid\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL }",
          "11502:         },",
          "11503:         { &hf_2008_1_dpp_first_command,",
          "11504:             { \"First Operation\", \"dof.dpp.v2.first-operation\", FT_FRAMENUM, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11505:         { &hf_2008_1_dpp_last_command,",
          "11506:             { \"Last Operation\", \"dof.dpp.v2.last-operation\", FT_FRAMENUM, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11507:         { &hf_2008_1_dpp_first_response,",
          "11508:             { \"First Response\", \"dof.dpp.v2.first-response\", FT_FRAMENUM, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11509:         { &hf_2008_1_dpp_last_response,",
          "11510:             { \"Last Response\", \"dof.dpp.v2.last-response\", FT_FRAMENUM, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11511:         { &hf_2008_1_dpp_related_frame,",
          "11512:             { \"Related Frame\", \"dof.dpp.v2.related-frame\", FT_FRAMENUM, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11513:         { &hf_2008_1_dpp_1_flag,",
          "11514:             { \"Flags\", \"dof.dpp.flag\", FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x80, NULL, HFILL }",
          "11515:         },",
          "11516:         { &hf_2008_1_dpp_1_version,",
          "11517:             { \"Version\", \"dof.dpp.version\", FT_UINT8, BASE_DEC, NULL, 0x7F, NULL, HFILL }",
          "11518:         },",
          "11519:     };",
          "11521:     static gint *ett[] =",
          "11522:     {",
          "11523:         &ett_2008_1_dpp,",
          "11524:         &ett_2008_1_dpp_1_header,",
          "11525:     };",
          "11527:     static ei_register_info ei[] =",
          "11528:     {",
          "11529:         { &ei_dof_6_timeout, { \"dof.dpp.timeout\", PI_PROTOCOL, PI_ERROR, \"DOF Violation: DPS.6: Negotiation not complete within 10 seconds.\", EXPFILL } },",
          "11530:     };",
          "11532:     if (proto_2008_1_dpp == -1)",
          "11533:     {",
          "11534:         expert_module_t *expert_dpp;",
          "11536:         proto_2008_1_dpp = proto_register_protocol(DOF_PRESENTATION_PROTOCOL, \"DPS.DPP\", \"dof.dpp\");",
          "11538:         proto_register_field_array(proto_2008_1_dpp, hf, array_length(hf));",
          "11539:         proto_register_subtree_array(ett, array_length(ett));",
          "11540:         dof_dpp_dissectors = register_dissector_table(\"dof.dpp\", \"DOF DPP Version\", proto_2008_1_dpp, FT_UINT8, BASE_DEC, DISSECTOR_TABLE_NOT_ALLOW_DUPLICATE);",
          "11542:         expert_dpp = expert_register_protocol(proto_2008_1_dpp);",
          "11543:         expert_register_field_array(expert_dpp, ei, array_length(ei));",
          "11544:     }",
          "11546:     dof_register_dpp_0();",
          "11547:     dof_register_dpp_2();",
          "11548: }",
          "11550: static void dof_dpp_handoff(void)",
          "11551: {",
          "11552:     dof_reg_handoff_dpp_0();",
          "11553:     dof_reg_handoff_dpp_2();",
          "11554: }",
          "11558: static void app_reset(void)",
          "11559: {",
          "11560: }",
          "11562: static void app_cleanup(void)",
          "11563: {",
          "11564: }",
          "11569: static void app_register(void)",
          "11570: {",
          "11571:     if (proto_2008_1_app == -1)",
          "11572:     {",
          "11573:         proto_2008_1_app = proto_register_protocol(DOF_APPLICATION_PROTOCOL, \"DPS.APP\", \"dof.app\");",
          "11574:         app_dissectors = register_dissector_table(\"dof.app\", \"DOF APP Version\", proto_2008_1_app, FT_UINT16, BASE_DEC, DISSECTOR_TABLE_NOT_ALLOW_DUPLICATE);",
          "11575:     }",
          "11576: }",
          "11578: static void app_handoff(void)",
          "11579: {",
          "11580: }",
          "11584: static void dof_dsp_reset(void)",
          "11585: {",
          "11586: }",
          "11588: static void dof_dsp_cleanup(void)",
          "11589: {",
          "11590: }",
          "11592: static void dof_register_dsp_0(void)",
          "11593: {",
          "11594:     static hf_register_info hf[] =",
          "11595:     {",
          "11596:         { &hf_2008_1_app_version,",
          "11597:             { \"APPID\", \"dof.app.v0.appid\", FT_UINT16, BASE_HEX, NULL, 0x0, NULL, HFILL }",
          "11598:         },",
          "11600:         { &hf_2008_1_dsp_12_opcode,",
          "11601:             { \"Opcode\", \"dof.dsp.opcode\", FT_UINT8, BASE_DEC, VALS(strings_2008_1_dsp_opcodes), 0x0, NULL, HFILL } },",
          "11603:         { &hf_2008_1_dsp_attribute_code,",
          "11604:             { \"Attribute Code\", \"dof.dsp.avp.attribute-code\", FT_UINT8, BASE_DEC, VALS(strings_2008_1_dsp_attribute_codes), 0x00, NULL, HFILL } },",
          "11606:         { &hf_2008_1_dsp_attribute_data,",
          "11607:             { \"Attribute Data\", \"dof.dsp.avp.attribute-data\", FT_UINT16, BASE_HEX, NULL, 0x00, NULL, HFILL } },",
          "11609:         { &hf_2008_1_dsp_value_length,",
          "11610:             { \"Value Length\", \"dof.dsp.avp.value-length\", FT_UINT8, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "11612:         { &hf_2008_1_dsp_value_data,",
          "11613:             { \"Value Data\", \"dof.dsp.avp.value-data\", FT_BYTES, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "11614:     };",
          "11616:     static gint *ett[] =",
          "11617:     {",
          "11618:         &ett_2008_1_dsp_12,",
          "11619:         &ett_2008_1_dsp_12_options,",
          "11620:         &ett_2008_1_dsp_12_option,",
          "11621:     };",
          "11623:     proto_2008_1_dsp = proto_register_protocol(\"DOF Session Protocol\", \"DOF.ESP\", \"dof.esp\");",
          "11625:     proto_register_field_array(proto_2008_1_dsp, hf, array_length(hf));",
          "11626:     proto_register_subtree_array(ett, array_length(ett));",
          "11627: }",
          "11632: static void dof_reg_handoff_dsp_0(void)",
          "11633: {",
          "11634:     dissector_handle_t dsp_handle = create_dissector_handle(dissect_dsp, proto_2008_1_dsp);",
          "11635:     dissector_add_uint(\"dof.app\", 0, dsp_handle);",
          "11636: }",
          "11638: static void dof_dsp_register(void)",
          "11639: {",
          "11640:     dof_register_dsp_0();",
          "11641: }",
          "11643: static void dof_dsp_handoff(void)",
          "11644: {",
          "11645:     dof_reg_handoff_dsp_0();",
          "11646: }",
          "11650: static void dof_ccm_reset(void)",
          "11651: {",
          "11652: }",
          "11654: static void dof_ccm_cleanup(void)",
          "11655: {",
          "11656: }",
          "11658: static void dof_register_ccm_24577(void)",
          "11659: {",
          "11660:     expert_module_t *expert_ccm;",
          "11662:     static hf_register_info hfdsp[] =",
          "11663:     {",
          "11664:         { &hf_ccm_dsp_option,",
          "11665:             { \"CCM Security Mode\", \"dof.ccm.dsp_opt\", FT_NONE, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11666:         { &hf_ccm_dsp_strength_count,",
          "11667:             { \"CCM Strength Count\", \"dof.ccm.strength-count\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11668:         { &hf_ccm_dsp_strength,",
          "11669:             { \"CCM Strength\", \"dof.ccm.strength\", FT_UINT8, BASE_DEC, VALS(ccm_strengths), 0x0, NULL, HFILL } },",
          "11670:         { &hf_ccm_dsp_e_flag,",
          "11671:             { \"CCM Minimum Encrypt\", \"dof.ccm.encrypt.min\", FT_BOOLEAN, 8, TFS(&tfs_encrypt_do_not_encrypt), 0x80, NULL, HFILL } },",
          "11672:         { &hf_ccm_dsp_m_flag,",
          "11673:             { \"CCM Maximum Encrypt\", \"dof.ccm.encrypt.max\", FT_BOOLEAN, 8, TFS(&tfs_encrypt_do_not_encrypt), 0x40, NULL, HFILL } },",
          "11674:         { &hf_ccm_dsp_tmax,",
          "11675:             { \"CCM Maximum MAC\", \"dof.ccm.mac.max\", FT_UINT8, BASE_DEC, NULL, 0x38, NULL, HFILL } },",
          "11676:         { &hf_ccm_dsp_tmin,",
          "11677:             { \"CCM Minimum MAC\", \"dof.ccm.mac.min\", FT_UINT8, BASE_DEC, NULL, 0x07, NULL, HFILL } },",
          "11678:     };",
          "11680:     static hf_register_info hf[] =",
          "11681:     {",
          "11682:         { &hf_ccm_opcode,",
          "11683:             { \"Opcode\", \"dof.ccm.opcode\", FT_UINT8, BASE_DEC, VALS(ccm_opcode_strings), 0x0, NULL, HFILL } },",
          "11684:     };",
          "11686:     static gint *ett[] =",
          "11687:     {",
          "11688:         &ett_ccm_dsp_option,",
          "11689:         &ett_ccm_dsp,",
          "11690:         &ett_ccm,",
          "11691:     };",
          "11693:     static hf_register_info hfheader[] =",
          "11694:     {",
          "11695:         { &hf_epp_v1_ccm_flags,",
          "11696:             { \"Flags\", \"dof.epp.v1.ccm.flags\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "11697:         { &hf_epp_v1_ccm_flags_manager,",
          "11698:             { \"Manager\", \"dof.epp.v1.ccm.flags.manager\", FT_UINT8, BASE_DEC, NULL, 0x80, NULL, HFILL } },",
          "11699:         { &hf_epp_v1_ccm_flags_period,",
          "11700:             { \"Period\", \"dof.epp.v1.ccm.flags.period\", FT_UINT8, BASE_DEC, NULL, 0x70, NULL, HFILL } },",
          "11701:         { &hf_epp_v1_ccm_flags_target,",
          "11702:             { \"Target\", \"dof.epp.v1.ccm.flags.target\", FT_UINT8, BASE_DEC, NULL, 0x08, NULL, HFILL } },",
          "11703:         { &hf_epp_v1_ccm_flags_next_nid,",
          "11704:             { \"Next Node Identifier\", \"dof.epp.v1.ccm.flags.next-nid\", FT_UINT8, BASE_DEC, NULL, 0x02, NULL, HFILL } },",
          "11705:         { &hf_epp_v1_ccm_flags_packet,",
          "11706:             { \"Packet\", \"dof.epp.v1.ccm.flags.packet\", FT_UINT8, BASE_DEC, NULL, 0x01, NULL, HFILL } },",
          "11707:         { &hf_epp_v1_ccm_nid,",
          "11708:             { \"Node ID\", \"dof.epp.v1.ccm.nodeid\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "11709:         { &hf_epp_v1_ccm_slot,",
          "11710:             { \"Slot\", \"dof.epp.v1.ccm.slot\", FT_UINT16, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "11711:         { &hf_epp_v1_ccm_pn,",
          "11712:             { \"Packet\", \"dof.epp.v1.ccm.packet\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "11713:         { &hf_epp_v1_ccm_tnid,",
          "11714:             { \"Target Node ID\", \"dof.epp.v1.ccm.target\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "11715:         { &hf_epp_v1_ccm_nnid,",
          "11716:             { \"Next Node ID\", \"dof.epp.v1.ccm.nnid\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "11717:     };",
          "11719:     static gint *ettheader[] =",
          "11720:     {",
          "11721:         &ett_epp_v1_ccm_flags,",
          "11722:         &ett_header,",
          "11723:     };",
          "11725:     static ei_register_info ei[] =",
          "11726:     {",
          "11727:         { &ei_decode_failure, { \"dof.ccm.decode_failure\", PI_UNDECODED, PI_WARN, \"Failure to decrypt packet.\", EXPFILL } },",
          "11728:     };",
          "11732:     proto_ccm_app = proto_register_protocol(\"DOF CCM Security Mode App\", \"DOF.CCM.APP\", \"dof.ccm.app\");",
          "11733:     proto_ccm = proto_register_protocol(\"DOF CCM Security Mode of Operation\", \"DOF.CCM\", \"dof.ccm\");",
          "11734:     proto_ccm_dsp = proto_register_protocol(\"DOF CCM Security Mode DSP Options\", \"DOF.CCM.DSP\", \"dof.ccm.dsp\");",
          "11736:     proto_register_field_array(proto_ccm_app, hf, array_length(hf));",
          "11737:     proto_register_field_array(proto_ccm_dsp, hfdsp, array_length(hfdsp));",
          "11738:     proto_register_subtree_array(ett, array_length(ett));",
          "11740:     proto_register_field_array(proto_ccm, hfheader, array_length(hfheader));",
          "11741:     proto_register_subtree_array(ettheader, array_length(ettheader));",
          "11743:     expert_ccm = expert_register_protocol(proto_ccm);",
          "11744:     expert_register_field_array(expert_ccm, ei, array_length(ei));",
          "11745: }",
          "11750: static void dof_reg_handoff_ccm_24577(void)",
          "11751: {",
          "11752:     static dissector_handle_t ccm_app_handle;",
          "11753:     static dissector_handle_t dsp_handle;",
          "11754:     static dissector_handle_t ccm_handle;",
          "11756:     ccm_app_handle = create_dissector_handle(dissect_ccm_app, proto_ccm_app);",
          "11757:     dsp_handle = create_dissector_handle(dissect_ccm_dsp, proto_ccm_dsp);",
          "11758:     ccm_handle = create_dissector_handle(dissect_ccm, proto_ccm);",
          "11760:     dissector_add_uint(\"dof.app\", DOF_PROTOCOL_CCM, ccm_app_handle);",
          "11761:     dissector_add_uint(\"dof.dsp.options\", DSP_CCM_FAMILY | DOF_PROTOCOL_CCM, dsp_handle);",
          "11762:     dissector_add_uint(\"dof.secmode\", DOF_PROTOCOL_CCM, ccm_handle);",
          "11763: }",
          "11765: static void dof_ccm_register(void)",
          "11766: {",
          "11767:     dof_register_ccm_24577();",
          "11768: }",
          "11770: static void dof_ccm_handoff(void)",
          "11771: {",
          "11772:     dof_reg_handoff_ccm_24577();",
          "11773: }",
          "11777: static void dof_oap_reset(void)",
          "11778: {",
          "11780:     oap_1_alias_to_binding = g_hash_table_new_full(oap_1_alias_hash_func, oap_1_alias_equal_func, NULL, NULL);",
          "11781: }",
          "11783: static void dof_oap_cleanup(void)",
          "11784: {",
          "11785:     g_hash_table_destroy(oap_1_alias_to_binding);",
          "11786:     oap_1_alias_to_binding = NULL;",
          "11787: }",
          "11789: static void dof_register_oap_1(void)",
          "11790: {",
          "11791:     expert_module_t *expert_oap;",
          "11793:     static hf_register_info hfdsp[] =",
          "11794:     {",
          "11795:         { &hf_oap_1_dsp_option,",
          "11796:             { \"Object Access Protocol\", \"dof.oap.dsp_opt\", FT_NONE, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11797:     };",
          "11799:     static hf_register_info hf[] =",
          "11800:     {",
          "11801:         { &hf_oap_1_opcode,",
          "11802:             { \"Opcode\", \"dof.oap.opcode\", FT_UINT8, BASE_DEC, VALS(oap_opcode_strings), 0x1F, NULL, HFILL } },",
          "11804:         { &hf_oap_1_alias_size,",
          "11805:             { \"Alias Length\", \"dof.oap.aliaslen\", FT_UINT8, BASE_DEC, NULL, 0xC0, NULL, HFILL } },",
          "11807:         { &hf_oap_1_flags,",
          "11808:             { \"Flags\", \"dof.oap.flags\", FT_UINT8, BASE_DEC, NULL, 0x20, NULL, HFILL } },",
          "11810:         { &hf_oap_1_exception_internal_flag,",
          "11811:             { \"Internal Exception\", \"dof.oap.exception.internal\", FT_UINT8, BASE_DEC, NULL, 0x80, NULL, HFILL } },",
          "11813:         { &hf_oap_1_exception_final_flag,",
          "11814:             { \"Final Exception\", \"dof.oap.exception.final\", FT_UINT8, BASE_DEC, NULL, 0x40, NULL, HFILL } },",
          "11816:         { &hf_oap_1_exception_provider_flag,",
          "11817:             { \"Exception Provider\", \"dof.oap.exception.provider\", FT_UINT8, BASE_DEC, NULL, 0x20, NULL, HFILL } },",
          "11819:         { &hf_oap_1_cmdcontrol,",
          "11820:             { \"Command Control\", \"dof.oap.cmdcontrol\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "11822:         { &hf_oap_1_cmdcontrol_cache_flag,",
          "11823:             { \"Cache Delay Flag\", \"dof.oap.cmdcontrol.flag.cache\", FT_UINT8, BASE_HEX, NULL, 0x40, NULL, HFILL } },",
          "11825:         { &hf_oap_1_cmdcontrol_cache,",
          "11826:             { \"Cache Delay\", \"dof.oap.cmdcontrol.cache\", FT_UINT8, BASE_HEX, NULL, 0x00, NULL, HFILL } },",
          "11828:         { &hf_oap_1_cmdcontrol_verbosity_flag,",
          "11829:             { \"Verbosity Flag\", \"dof.oap.cmdcontrol.flag.verbosity\", FT_UINT8, BASE_HEX, NULL, 0x30, NULL, HFILL } },",
          "11831:         { &hf_oap_1_cmdcontrol_noexecute_flag,",
          "11832:             { \"No Execute Flag\", \"dof.oap.cmdcontrol.flag.noexecute\", FT_UINT8, BASE_HEX, NULL, 0x08, NULL, HFILL } },",
          "11834:         { &hf_oap_1_cmdcontrol_ack_flag,",
          "11835:             { \"Ack List Flag\", \"dof.oap.cmdcontrol.flag.ack\", FT_UINT8, BASE_HEX, NULL, 0x04, NULL, HFILL } },",
          "11837:         { &hf_oap_1_cmdcontrol_ackcnt,",
          "11838:             { \"Ack List Count\", \"dof.oap.cmdcontrol.ackcnt\", FT_UINT8, BASE_HEX, NULL, 0x00, NULL, HFILL } },",
          "11840:         { &hf_oap_1_cmdcontrol_ack,",
          "11841:             { \"Ack\", \"dof.oap.cmdcontrol.ack\", FT_BYTES, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "11843:         { &hf_oap_1_cmdcontrol_delay_flag,",
          "11844:             { \"Execution Delay Flag\", \"dof.oap.cmdcontrol.flag.delay\", FT_UINT8, BASE_HEX, NULL, 0x02, NULL, HFILL } },",
          "11846:         { &hf_oap_1_cmdcontrol_heuristic_flag,",
          "11847:             { \"Heuristic Flag\", \"dof.oap.cmdcontrol.flag.heuristic\", FT_UINT8, BASE_HEX, NULL, 0x01, NULL, HFILL } },",
          "11849:         { &hf_oap_1_cmdcontrol_heuristic,",
          "11850:             { \"Heuristic\", \"dof.oap.cmdcontrol.heuristic\", FT_UINT8, BASE_HEX, NULL, 0x00, NULL, HFILL } },",
          "11852:         { &hf_oap_1_providerid,",
          "11853:             { \"Provider ID\", \"dof.oap.provider-id\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11855:         { &hf_oap_1_objectid,",
          "11856:             { \"Object ID\", \"dof.oap.object-id\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11858:         { &hf_oap_1_interfaceid,",
          "11859:             { \"Interface ID\", \"dof.oap.interface-id\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11861:         { &hf_oap_1_itemid,",
          "11862:             { \"Item ID\", \"dof.oap.item-id\", FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11865:         { &hf_oap_1_distance,",
          "11866:             { \"Distance\", \"dof.oap.distance\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11867: #endif",
          "11869:         { &hf_oap_1_alias,",
          "11870:             { \"Alias\", \"dof.oap.alias\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11872:         { &hf_oap_1_alias_frame,",
          "11873:             { \"Alias Frame\", \"dof.oap.alias-frame\", FT_FRAMENUM, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11876:         { &hf_oap_1_opinfo_start_frame,",
          "11877:             { \"Command Frame\", \"dof.oap.command-frame\", FT_FRAMENUM, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11879:         { &hf_oap_1_opinfo_end_frame,",
          "11880:             { \"Response Frame\", \"dof.oap.response-frame\", FT_FRAMENUM, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11882:         { &hf_oap_1_opinfo_timeout,",
          "11883:             { \"Operation Timeout\", \"dof.oap.opid.timeout\", FT_RELATIVE_TIME, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11884: #endif",
          "11886:         { &hf_oap_1_subscription_delta,",
          "11887:             { \"Minimum Delta\", \"dof.oap.subscription.min-delta\", FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11889:         { &hf_oap_1_update_sequence,",
          "11890:             { \"Sequence\", \"dof.oap.sequence\", FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "11892:         { &hf_oap_1_value_list,",
          "11893:             { \"OAP Value List\", \"dof.oap.value_list\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "11894:     };",
          "11896:     static gint *ett[] =",
          "11897:     {",
          "11898:         &ett_oap_1_dsp,",
          "11899:         &ett_oap_1_dsp_options,",
          "11900:         &ett_oap_1,",
          "11901:         &ett_oap_1_opinfo,",
          "11902:         &ett_oap_1_cmdcontrol,",
          "11903:         &ett_oap_1_cmdcontrol_flags,",
          "11904:         &ett_oap_1_cmdcontrol_ack,",
          "11905:         &ett_oap_1_alias,",
          "11906:         &ett_oap_1_objectid,",
          "11907:         &ett_oap_1_1_providerid,",
          "11908:     };",
          "11910:     static ei_register_info ei[] =",
          "11911:     {",
          "11912:         { &ei_oap_no_session, { \"dof.oap.no_session\", PI_PROTOCOL, PI_ERROR, \"Session not found\", EXPFILL } },",
          "11913:     };",
          "11915:     proto_oap_1 = proto_register_protocol(\"DOF Object Access Protocol\", \"DOF.OAP\", \"dof.oap\");",
          "11916:     proto_oap_1_dsp = proto_register_protocol(\"DOF Object Access Protocol DSP Options\", \"DOF.OAP.DSP\", \"dof.oap.dsp\");",
          "11918:     proto_register_field_array(proto_oap_1, hf, array_length(hf));",
          "11919:     proto_register_field_array(proto_oap_1_dsp, hfdsp, array_length(hfdsp));",
          "11920:     proto_register_subtree_array(ett, array_length(ett));",
          "11922:     expert_oap = expert_register_protocol(proto_oap_1);",
          "11923:     expert_register_field_array(expert_oap, ei, array_length(ei));",
          "11924: }",
          "11929: static void dof_reg_handoff_oap_1(void)",
          "11930: {",
          "11931:     dissector_handle_t oap_handle = create_dissector_handle(dissect_oap, proto_oap_1);",
          "11932:     dissector_handle_t dsp_handle = create_dissector_handle(dissect_oap_dsp, proto_oap_1_dsp);",
          "11934:     dissector_add_uint(\"dof.app\", DOF_PROTOCOL_OAP_1, oap_handle);",
          "11935:     dissector_add_uint(\"dof.dsp.options\", DSP_OAP_FAMILY | DOF_PROTOCOL_OAP_1, dsp_handle);",
          "11936: }",
          "11938: static void dof_oap_register(void)",
          "11939: {",
          "11940:     dof_register_oap_1();",
          "11941: }",
          "11943: static void dof_oap_handoff(void)",
          "11944: {",
          "11945:     dof_reg_handoff_oap_1();",
          "11946: }",
          "11950: void dof_register_sgmp_130(void);",
          "11951: void dof_reg_handoff_sgmp_130(void);",
          "11953: static void dof_sgmp_reset(void)",
          "11954: {",
          "11955: }",
          "11957: static void dof_sgmp_cleanup(void)",
          "11958: {",
          "11959: }",
          "11961: void dof_register_sgmp_130(void)",
          "11962: {",
          "11963:     static hf_register_info hf[] =",
          "11964:     {",
          "11965:         { &hf_opcode,",
          "11966:             { \"Opcode\", \"dof.sgmp.v1.opcode\", FT_UINT8, BASE_DEC, VALS(sgmp_opcode_strings), 0x0, NULL, HFILL } },",
          "11968:         { &hf_sgmp_domain,",
          "11969:             { \"Domain\", \"dof.sgmp.v1.domain\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "11971:         { &hf_sgmp_epoch,",
          "11972:             { \"Epoch\", \"dof.sgmp.v1.epoch\", FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL } },",
          "11974:         { &hf_initiator_block,",
          "11975:             { \"Initiator Block\", \"dof.sgmp.v1.initiator-block\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "11977:         { &hf_sgmp_security_scope,",
          "11978:             { \"Security Scope\", \"dof.sgmp.v1.security-scope\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "11980:         { &hf_initial_state,",
          "11981:             { \"Initial State\", \"dof.sgmp.v1.initial-state\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "11983:         { &hf_latest_version,",
          "11984:             { \"Latest SGMP Version\", \"dof.sgmp.v1.latest-sgmp-version\", FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL } },",
          "11986:         { &hf_desire,",
          "11987:             { \"Desire\", \"dof.sgmp.v1.desire\", FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL } },",
          "11989:         { &hf_ticket,",
          "11990:             { \"Ticket\", \"dof.sgmp.v1.ticket\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "11992:         { &hf_sgmp_tmin,",
          "11993:             { \"TMIN\", \"dof.sgmp.v1.tmin\", FT_UINT16, BASE_HEX, NULL, 0, NULL, HFILL } },",
          "11995:         { &hf_tie_breaker,",
          "11996:             { \"Tie Breaker\", \"dof.sgmp.v1.tie-breaker\", FT_UINT32, BASE_HEX, NULL, 0, NULL, HFILL } },",
          "11998:         { &hf_delay,",
          "11999:             { \"Delay\", \"dof.sgmp.v1.delay\", FT_UINT8, BASE_HEX, NULL, 0, NULL, HFILL } },",
          "12001:         { &hf_key,",
          "12002:             { \"Key\", \"dof.sgmp.v1.key\", FT_BYTES, BASE_NONE, NULL, 0, NULL, HFILL } },",
          "12003:     };",
          "12005:     static gint *ett[] =",
          "12006:     {",
          "12007:         &ett_sgmp,",
          "12008:         &ett_sgmp_domain,",
          "12009:         &ett_initiator_block,",
          "12010:         &ett_sgmp_security_scope,",
          "12011:         &ett_initial_state,",
          "12012:         &ett_ticket,",
          "12013:     };",
          "12015:     proto_sgmp = proto_register_protocol(\"DOF Secure Group Management Protocol\", \"DOF.SGMP\", \"dof.sgmp\");",
          "12017:     proto_register_field_array(proto_sgmp, hf, array_length(hf));",
          "12018:     proto_register_subtree_array(ett, array_length(ett));",
          "12019: }",
          "12024: void dof_reg_handoff_sgmp_130(void)",
          "12025: {",
          "12026:     dissector_handle_t sgmp_handle = create_dissector_handle(dissect_sgmp, proto_sgmp);",
          "12028:     dissector_add_uint(\"dof.app\", DOF_PROTOCOL_SGMP, sgmp_handle);",
          "12029: }",
          "12031: static void dof_sgmp_register(void)",
          "12032: {",
          "12033:     dof_register_sgmp_130();",
          "12034: }",
          "12036: static void dof_sgmp_handoff(void)",
          "12037: {",
          "12038:     dof_reg_handoff_sgmp_130();",
          "12039: }",
          "12043: static void dof_tep_reset(void)",
          "12044: {",
          "12045: }",
          "12047: static void dof_tep_cleanup(void)",
          "12048: {",
          "12049: }",
          "12051: static void dof_register_tep_128(void)",
          "12052: {",
          "12053:     static hf_register_info hfdsp[] =",
          "12054:     {",
          "12055:         { &hf_dsp_option,",
          "12056:             { \"Ticket Exchange Protocol Version 1\", \"dof.tep1.dsp_opt\", FT_NONE, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12057:     };",
          "12059:     static hf_register_info hf[] =",
          "12060:     {",
          "12061:         { &hf_tep_operation,",
          "12062:             { \"Operation\", \"dof.tep1.operation\", FT_UINT8, BASE_DEC, VALS(tep_opcode_strings), 0x00, NULL, HFILL } },",
          "12064:         { &hf_tep_operation_type,",
          "12065:             { \"Operation Type\", \"dof.tep1.operation_type\", FT_BOOLEAN, 8, TFS(&tep_optype_vals), TEP_OPCODE_RSP, NULL, HFILL } },",
          "12067:         { &hf_tep_opcode,",
          "12068:             { \"Opcode\", \"dof.tep1.opcode\", FT_UINT8, BASE_DEC, VALS(tep_opcode_strings), 0x0F, NULL, HFILL } },",
          "12070:         { &hf_tep_k,",
          "12071:             { \"K\", \"dof.tep1.k\", FT_UINT8, BASE_DEC, NULL, 0x10, NULL, HFILL } },",
          "12073:         { &hf_tep_c,",
          "12074:             { \"C\", \"dof.tep1.c\", FT_UINT8, BASE_DEC, NULL, 0x20, NULL, HFILL } },",
          "12076:         { &hf_tep_reject_code,",
          "12077:             { \"Code\", \"dof.tep1.reject.code\", FT_UINT8, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "12079:         { &hf_tep_reject_data,",
          "12080:             { \"Data\", \"dof.tep1.reject.data\", FT_BYTES, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12083:         { &hf_tep_2_1_domain,",
          "12084:             { \"Domain\", \"dof.2008.4.tep1.2.1.domain\", FT_NONE, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12086:         { &hf_tep_2_1_initiator_block,",
          "12087:             { \"Initiator Block\", \"dof.2008.4.tep1.2.1.initiator_block\", FT_NONE, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12089:         { &hf_tep_2_1_ticket_confirmation,",
          "12090:             { \"Ticket Confirmation\", \"dof.2008.4.tep1.2.1.ticket_confirmation\", FT_BYTES, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12093:         { &hf_tep_2_2_initiator_ticket,",
          "12094:             { \"Initiator Ticket\", \"dof.2008.4.tep1.2.2.initiator_ticket\", FT_NONE, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12096:         { &hf_tep_2_2_ticket_confirmation,",
          "12097:             { \"Ticket Confirmation\", \"dof.2008.4.tep1.2.2.ticket_confirmation\", FT_BYTES, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12099:         { &hf_tep_2_2_responder_initialization,",
          "12100:             { \"Responder Initialization\", \"dof.2008.4.tep1.2.2.responder_initialization\", FT_NONE, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12102:         { &hf_tep_2_2_responder_block,",
          "12103:             { \"Responder Block\", \"dof.2008.4.tep1.2.2.responder_block\", FT_NONE, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12105:         { &hf_tep_2_2_authenticator_initialization,",
          "12106:             { \"Authenticator Initialization\", \"dof.2008.4.tep1.2.2.authenticator_initialization\", FT_NONE, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12109:         { &hf_tep_2_2_1_state_identifier,",
          "12110:             { \"State Identifier\", \"dof.2008.4.tep1.2.2.1.state_identifier\", FT_UINT32, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "12112:         { &hf_tep_2_2_1_initial_state,",
          "12113:             { \"Initial State\", \"dof.2008.4.tep1.2.2.1.initial_state\", FT_NONE, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12115:         { &hf_tep_session_key,",
          "12116:             { \"Session Key\", \"dof.session_key\", FT_BYTES, BASE_NONE, NULL, 0x00, NULL, HFILL } },",
          "12117:     };",
          "12119:     static gint *ett[] =",
          "12120:     {",
          "12121:         &ett_tep_dsp,",
          "12122:         &ett_tep_dsp_options,",
          "12123:         &ett_tep,",
          "12124:         &ett_tep_operation,",
          "12126:         &ett_tep_2_1_domain,",
          "12127:         &ett_tep_2_1_initiator_block,",
          "12129:         &ett_tep_2_2_initiator_ticket,",
          "12130:         &ett_tep_2_2_responder_initialization,",
          "12131:         &ett_tep_2_2_responder_block,",
          "12132:         &ett_tep_2_2_authenticator_initialization,",
          "12134:         &ett_tep_2_2_1_initial_state,",
          "12135:     };",
          "12141:     proto_tep = proto_register_protocol(\"DOF Ticket Exchange Protocol Version 1\", \"DOF.TEP1\", \"dof.tep1\");",
          "12143:     proto_tep_dsp = proto_register_protocol(\"DOF Ticket Exchange Protocol DSP Options\", \"DOF.TEP1.DSP\", \"dof.tep1.dsp\");",
          "12145:     proto_register_field_array(proto_tep, hf, array_length(hf));",
          "12146:     proto_register_field_array(proto_tep_dsp, hfdsp, array_length(hfdsp));",
          "12147:     proto_register_subtree_array(ett, array_length(ett));",
          "12150: }",
          "12155: static void dof_reg_handoff_tep_128(void)",
          "12156: {",
          "12157:     dissector_handle_t tep_handle = create_dissector_handle(dissect_tep, proto_tep);",
          "12158:     dissector_handle_t dsp_handle = create_dissector_handle(dissect_tep_dsp, proto_tep_dsp);",
          "12160:     dissector_add_uint(\"dof.app\", DOF_PROTOCOL_TEP, tep_handle);",
          "12161:     dissector_add_uint(\"dof.dsp.options\", DSP_TEP_FAMILY | DOF_PROTOCOL_TEP, dsp_handle);",
          "12162: }",
          "12164: static void dof_tep_register(void)",
          "12165: {",
          "12166:     dof_register_tep_128();",
          "12167: }",
          "12169: static void dof_tep_handoff(void)",
          "12170: {",
          "12171:     dof_reg_handoff_tep_128();",
          "12172: }",
          "12176: static void dof_trp_reset(void)",
          "12177: {",
          "12178: }",
          "12180: static void dof_trp_cleanup(void)",
          "12181: {",
          "12182: }",
          "12184: static void dof_register_trp_129(void)",
          "12185: {",
          "12186:     expert_module_t *expert_trp;",
          "12188:     static hf_register_info hfdsp[] =",
          "12189:     {",
          "12190:         { &hf_trp_dsp_option,",
          "12191:             { \"Ticket Request Protocol\", \"dof.trp.dsp_opt\", FT_NONE, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12192:     };",
          "12194:     static hf_register_info hf[] =",
          "12195:     {",
          "12196:         { &hf_trp_opcode,",
          "12197:             { \"Opcode\", \"dof.trp.opcode\", FT_UINT8, BASE_DEC, VALS(trp_opcode_strings), 0x0, NULL, HFILL } },",
          "12199:         { &hf_domain,",
          "12200:             { \"Domain\", \"dof.trp.domain\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12202:         { &hf_identity_resolution,",
          "12203:             { \"Identity Resolution\", \"dof.trp.identity_resolution\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12205:         { &hf_initiator_request,",
          "12206:             { \"Initiator Request\", \"dof.trp.initiator_request\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12208:         { &hf_responder_request,",
          "12209:             { \"Responder Request\", \"dof.trp.responder_request\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12211:         { &hf_initiator_ticket,",
          "12212:             { \"Initiator Ticket\", \"dof.trp.initiator_ticket\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12214:         { &hf_responder_ticket,",
          "12215:             { \"Responder Ticket\", \"dof.trp.responder_ticket\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12217:         { &hf_authentication_block,",
          "12218:             { \"Authentication Block\", \"dof.trp.authentication_block\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12220:         { &hf_group_identifier,",
          "12221:             { \"Group Identifier\", \"dof.trp.group_identifier\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12223:         { &hf_node_identifier,",
          "12224:             { \"Node Identifier\", \"dof.trp.node_identifier\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12226:         { &hf_thb,",
          "12227:             { \"Thb\", \"dof.trp.thb\", FT_UINT8, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "12229:         { &hf_tmin,",
          "12230:             { \"Tmin\", \"dof.trp.tmin\", FT_UINT8, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "12232:         { &hf_tmax,",
          "12233:             { \"Tmax\", \"dof.trp.tmax\", FT_UINT8, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "12235:         { &hf_trp_epoch,",
          "12236:             { \"Epoch\", \"dof.trp.epoch\", FT_UINT16, BASE_DEC, NULL, 0x00, NULL, HFILL } },",
          "12238:         { &hf_sidg,",
          "12239:             { \"SIDg\", \"dof.trp.sid_g\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12241:         { &hf_security_scope,",
          "12242:             { \"Security Scope\", \"dof.trp.security_scope\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12244:         { &hf_security_mode,",
          "12245:             { \"Security Mode\", \"dof.trp.security_mode\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12247:         { &hf_ssid,",
          "12248:             { \"SSID\", \"dof.trp.ssid\", FT_UINT32, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "12251:         { &hf_initiator_pg,",
          "12252:             { \"Initiator Permissions\", \"dof.trp.initiator_pg\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12253: #endif",
          "12255:         { &hf_initiator_validation,",
          "12256:             { \"Initiator Validation\", \"dof.trp.initiator_validation\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12258:         { &hf_responder_pg,",
          "12259:             { \"Responder Permissions\", \"dof.trp.responder_pg\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12261:         { &hf_responder_validation,",
          "12262:             { \"Responder Validation\", \"dof.trp.responder_validation\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12264:         { &hf_trp_errorcode,",
          "12265:             { \"Error Code\", \"dof.trp.errorcode\", FT_UINT8, BASE_DEC, VALS(trp_error_strings), 0x0, NULL, HFILL } },",
          "12267:         { &hf_trp_duration,",
          "12268:             { \"Duration\", \"dof.trp.duration\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "12271:         { &hf_trp_rnonce,",
          "12272:             { \"Requestor Nonce\", \"dof.trp.rnonce\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12274:         { &hf_trp_pnonce,",
          "12275:             { \"Provider Nonce\", \"dof.trp.pnonce\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12277:         { &hf_trp_reqid,",
          "12278:             { \"Requestor ID\", \"dof.trp.reqid\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12280:         { &hf_trp_provid,",
          "12281:             { \"Provider ID\", \"dof.trp.provid\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12283:         { &hf_trp_perm_count,",
          "12284:             { \"Permission Count\", \"dof.trp.perm.count\", FT_UINT8, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "12286:         { &hf_trp_perm_type,",
          "12287:             { \"Permission Type\", \"dof.trp.perm.type\", FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL } },",
          "12289:         { &hf_trp_perm_rflags,",
          "12290:             { \"Requestor SRP Flags\", \"dof.trp.rflags\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "12292:         { &hf_trp_perm_rcache,",
          "12293:             { \"Requestor SRP Cache\", \"dof.trp.rcache\", FT_BOOLEAN, 8, NULL, 0x2, NULL, HFILL } },",
          "12295:         { &hf_trp_perm_rsrp,",
          "12296:             { \"Requestor SRP\", \"dof.trp.rsrp\", FT_BOOLEAN, 8, NULL, 0x1, NULL, HFILL } },",
          "12298:         { &hf_trp_perm_rsrp_a,",
          "12299:             { \"Requestor SRP A\", \"dof.trp.rsrp.a\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12301:         { &hf_trp_perm_rsrp_u,",
          "12302:             { \"Requestor SRP u\", \"dof.trp.rsrp.u\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12304:         { &hf_trp_perm_pflags,",
          "12305:             { \"Provider SRP Flags\", \"dof.trp.pflags\", FT_UINT8, BASE_HEX, NULL, 0x0, NULL, HFILL } },",
          "12307:         { &hf_trp_perm_pcache,",
          "12308:             { \"Provider SRP Cache\", \"dof.trp.pcache\", FT_BOOLEAN, 8, NULL, 0x2, NULL, HFILL } },",
          "12310:         { &hf_trp_perm_psrp,",
          "12311:             { \"Provider SRP\", \"dof.trp.psrp\", FT_BOOLEAN, 8, NULL, 0x1, NULL, HFILL } },",
          "12313:         { &hf_trp_perm_psrp_a,",
          "12314:             { \"Provider SRP A\", \"dof.trp.psrp.a\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12316:         { &hf_trp_perm_psrp_u,",
          "12317:             { \"Provider SRP u\", \"dof.trp.psrp.u\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12319:         { &hf_trp_perm_psrp_b,",
          "12320:             { \"Provider SRP B\", \"dof.trp.psrp.b\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12322:         { &hf_trp_perm_psrp_s,",
          "12323:             { \"Provider SRP S\", \"dof.trp.psrp.s\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12325:         { &hf_trp_confirmation,",
          "12326:             { \"Confirmation\", \"dof.trp.confirmation\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12328:         { &hf_trp_perm_pke,",
          "12329:             { \"Provider Key Expression\", \"dof.trp.pke\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12331:         { &hf_trp_perm_pka,",
          "12332:             { \"Provider Key Authenticator\", \"dof.trp.pka\", FT_BYTES, BASE_NONE, NULL, 0x0, NULL, HFILL } },",
          "12333: #endif",
          "12334:     };",
          "12336:     static gint *ett[] =",
          "12337:     {",
          "12338:         &ett_trp_dsp,",
          "12339:         &ett_trp,",
          "12340:         &ett_domain,",
          "12341:         &ett_identity_resolution,",
          "12342:         &ett_initiator_request,",
          "12343:         &ett_initiator_ticket,",
          "12344:         &ett_responder_request,",
          "12345:         &ett_responder_ticket,",
          "12346:         &ett_authentication_block,",
          "12347:         &ett_group_identifier,",
          "12348:         &ett_node_identifier,",
          "12349:         &ett_sidg,",
          "12350:         &ett_security_scope,",
          "12351:         &ett_security_mode,",
          "12352:         &ett_initiator_pg,",
          "12353:         &ett_initiator_validation,",
          "12354:         &ett_responder_pg,",
          "12355:         &ett_responder_validation,",
          "12356:         &ett_trp_permset,",
          "12357:         &ett_srp_flags,",
          "12358:         &ett_trp_ticket,",
          "12359:     };",
          "12361:     static ei_register_info ei[] =",
          "12362:     {",
          "12363:         { &ei_trp_initiator_id_known, { \"dof.trp.initiator_id_known\", PI_PROTOCOL, PI_COMMENT, \"Initiator identity known\", EXPFILL } },",
          "12364:         { &ei_trp_kek_discovered, { \"dof.trp.kek_discovered\", PI_PROTOCOL, PI_COMMENT, \"KEK discovered\", EXPFILL } },",
          "12365:     };",
          "12369:     proto_trp = proto_register_protocol(\"DOF Ticket Request Protocol\", \"DOF.TRP\", \"dof.trp\");",
          "12371:     proto_trp_dsp = proto_register_protocol(\"DOF Ticket Request Protocol DSP Options\", \"DOF.TRP.DSP\", \"dof.trp.dsp\");",
          "12373:     proto_register_field_array(proto_trp, hf, array_length(hf));",
          "12374:     proto_register_field_array(proto_trp_dsp, hfdsp, array_length(hfdsp));",
          "12375:     proto_register_subtree_array(ett, array_length(ett));",
          "12376:     expert_trp = expert_register_protocol(proto_trp);",
          "12377:     expert_register_field_array(expert_trp, ei, array_length(ei));",
          "12378: }",
          "12383: static void dof_reg_handoff_trp_129(void)",
          "12384: {",
          "12385:     dissector_handle_t trp_handle = create_dissector_handle(dissect_trp, proto_trp);",
          "12386:     dissector_handle_t dsp_handle = create_dissector_handle(dissect_trp_dsp, proto_trp_dsp);",
          "12388:     dissector_add_uint(\"dof.app\", DOF_PROTOCOL_TRP, trp_handle);",
          "12389:     dissector_add_uint(\"dof.dsp.options\", DSP_TRP_FAMILY | DOF_PROTOCOL_TRP, dsp_handle);",
          "12390: }",
          "12392: static void dof_trp_register(void)",
          "12393: {",
          "12394:     dof_register_trp_129();",
          "12395: }",
          "12397: static void dof_trp_handoff(void)",
          "12398: {",
          "12399:     dof_reg_handoff_trp_129();",
          "12400: }",
          "12407: static void dof_reset_routine(void)",
          "12408: {",
          "12409:     dof_tun_reset();",
          "12410:     dof_reset();",
          "12411:     oid_reset();",
          "12412:     dof_dnp_reset();",
          "12413:     dof_dpp_reset();",
          "12414:     app_reset();",
          "12415:     dof_dsp_reset();",
          "12416:     dof_ccm_reset();",
          "12417:     dof_oap_reset();",
          "12418:     dof_sgmp_reset();",
          "12419:     dof_tep_reset();",
          "12420:     dof_trp_reset();",
          "12421: }",
          "12423: static void dof_cleanup_routine(void)",
          "12424: {",
          "12425:     dof_tun_cleanup();",
          "12426:     dof_cleanup();",
          "12427:     oid_cleanup();",
          "12428:     dof_dnp_cleanup();",
          "12429:     dof_dpp_cleanup();",
          "12430:     app_cleanup();",
          "12431:     dof_dsp_cleanup();",
          "12432:     dof_ccm_cleanup();",
          "12433:     dof_oap_cleanup();",
          "12434:     dof_sgmp_cleanup();",
          "12435:     dof_tep_cleanup();",
          "12436:     dof_trp_cleanup();",
          "12437: }",
          "12442: void proto_register_dof(void)",
          "12443: {",
          "12444:     dof_tun_register();",
          "12445:     dof_register();",
          "12446:     oid_register();",
          "12447:     dof_dnp_register();",
          "12448:     dof_dpp_register();",
          "12449:     app_register();",
          "12450:     dof_dsp_register();",
          "12451:     dof_ccm_register();",
          "12452:     dof_oap_register();",
          "12453:     dof_sgmp_register();",
          "12454:     dof_tep_register();",
          "12455:     dof_trp_register();",
          "12457:     register_init_routine(&dof_reset_routine);",
          "12458:     register_cleanup_routine(&dof_cleanup_routine);",
          "12459: }",
          "12464: void proto_reg_handoff_dof(void)",
          "12465: {",
          "12466:     dof_tun_handoff();",
          "12467:     dof_handoff();",
          "12468:     oid_handoff();",
          "12469:     dof_dnp_handoff();",
          "12470:     dof_dpp_handoff();",
          "12471:     app_handoff();",
          "12472:     dof_dsp_handoff();",
          "12473:     dof_ccm_handoff();",
          "12474:     dof_oap_handoff();",
          "12475:     dof_sgmp_handoff();",
          "12476:     dof_tep_handoff();",
          "12477:     dof_trp_handoff();",
          "12478: }",
          "12484: typedef struct _dof_proto_data {",
          "12485:     int     proto;",
          "12486:     void    *proto_data;",
          "12487: } dof_proto_data;",
          "12489: static gint p_compare(gconstpointer a, gconstpointer b)",
          "12490: {",
          "12491:     const dof_proto_data *ap = (const dof_proto_data *)a;",
          "12492:     const dof_proto_data *bp = (const dof_proto_data *)b;",
          "12494:     if (ap->proto > bp->proto)",
          "12495:         return 1;",
          "12496:     else if (ap->proto == bp->proto)",
          "12497:         return 0;",
          "12498:     else",
          "12499:         return -1;",
          "12500: }",
          "12503: static void dof_session_add_proto_data(dof_session_data *session, int proto, void *proto_data)",
          "12504: {",
          "12505:     dof_proto_data *p1 = wmem_new0(wmem_packet_scope(), dof_proto_data);",
          "12507:     p1->proto = proto;",
          "12508:     p1->proto_data = proto_data;",
          "12512:     session->data_list = g_slist_insert_sorted(session->data_list, (gpointer *)p1, p_compare);",
          "12513: }",
          "12515: static void *dof_session_get_proto_data(dof_session_data *session, int proto)",
          "12516: {",
          "12517:     dof_proto_data temp, *p1;",
          "12518:     GSList *item;",
          "12520:     temp.proto = proto;",
          "12521:     temp.proto_data = NULL;",
          "12523:     item = g_slist_find_custom(session->data_list, (gpointer *)&temp,",
          "12524:                                p_compare);",
          "12526:     if (item != NULL)",
          "12527:     {",
          "12528:         p1 = (dof_proto_data *)item->data;",
          "12529:         return p1->proto_data;",
          "12530:     }",
          "12532:     return NULL;",
          "12533: }",
          "12535: static void dof_session_delete_proto_data(dof_session_data *session, int proto)",
          "12536: {",
          "12537:     dof_proto_data temp;",
          "12538:     GSList *item;",
          "12540:     temp.proto = proto;",
          "12541:     temp.proto_data = NULL;",
          "12543:     item = g_slist_find_custom(session->data_list, (gpointer *)&temp,",
          "12544:                                p_compare);",
          "12546:     while (item)",
          "12547:     {",
          "12548:         session->data_list = g_slist_remove(session->data_list, item->data);",
          "12549:         item = item->next;",
          "12550:     }",
          "12551: }",
          "12552: #endif",
          "12554: static void dof_packet_add_proto_data(dof_packet_data *packet, int proto, void *proto_data)",
          "12555: {",
          "12556:     dof_proto_data *p1 = wmem_new0(wmem_file_scope(), dof_proto_data);",
          "12558:     p1->proto = proto;",
          "12559:     p1->proto_data = proto_data;",
          "12563:     packet->data_list = g_slist_insert_sorted(packet->data_list, (gpointer *)p1, p_compare);",
          "12564: }",
          "12566: static void *dof_packet_get_proto_data(dof_packet_data *packet, int proto)",
          "12567: {",
          "12568:     dof_proto_data temp, *p1;",
          "12569:     GSList *item;",
          "12571:     temp.proto = proto;",
          "12572:     temp.proto_data = NULL;",
          "12574:     item = g_slist_find_custom(packet->data_list, (gpointer *)&temp,",
          "12575:                                p_compare);",
          "12577:     if (item != NULL)",
          "12578:     {",
          "12579:         p1 = (dof_proto_data *)item->data;",
          "12580:         return p1->proto_data;",
          "12581:     }",
          "12583:     return NULL;",
          "12584: }",
          "12587: static void dof_packet_delete_proto_data(dof_packet_data *packet, int proto)",
          "12588: {",
          "12589:     dof_proto_data temp;",
          "12590:     GSList *item;",
          "12592:     temp.proto = proto;",
          "12593:     temp.proto_data = NULL;",
          "12595:     item = g_slist_find_custom(packet->data_list, (gpointer *)&temp,",
          "12596:                                p_compare);",
          "12598:     while (item)",
          "12599:     {",
          "12600:         packet->data_list = g_slist_remove(packet->data_list, item->data);",
          "12601:         item = item->next;",
          "12602:     }",
          "12603: }",
          "12604: #endif",
          "12606: static gint dof_dissect_pdu_as_field(dissector_t dissector, tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, int offset, int item, int ett, void *result)",
          "12607: {",
          "12608:     int block_length;",
          "12609:     tvbuff_t *start = tvb_new_subset(tvb, offset, -1, -1);",
          "12610:     proto_tree *my_tree;",
          "12611:     proto_item *ti = proto_tree_add_item(tree, item, tvb, offset, -1, ENC_NA);",
          "12612:     my_tree = proto_item_add_subtree(ti, ett);",
          "12613:     block_length = dof_dissect_pdu(dissector, start, pinfo, my_tree, result);",
          "12614:     return offset + block_length;",
          "12615: }",
          "12617: static gint dof_dissect_pdu(dissector_t dissector, tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *result)",
          "12618: {",
          "12619:     gint len = dissector(tvb, pinfo, tree, result);",
          "12620:     proto_item_set_len(proto_tree_get_parent(tree), len);",
          "12622:     return len;",
          "12623: }",
          "12625: static int dof_dissect_dnp_length(tvbuff_t *tvb, packet_info *pinfo, guint8 version, gint *offset)",
          "12626: {",
          "12627:     dissector_handle_t dp;",
          "12629:     dp = dissector_get_uint_handle(dnp_framing_dissectors, version);",
          "12630:     if (!dp)",
          "12631:         return -1;",
          "12633:     return call_dissector_only(dp, tvb, pinfo, NULL, offset);",
          "12634: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-v120.c||epan/dissectors/packet-v120.c": [
          "File: epan/dissectors/packet-v120.c -> epan/dissectors/packet-v120.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: static gint ett_v120_control = -1;",
          "70: static gint ett_v120_header = -1;",
          "75: static int dissect_v120_header(tvbuff_t *tvb, int offset, proto_tree *tree);",
          "",
          "[Removed Lines]",
          "72: static const true_false_string tfs_response_command = { \"Response\", \"Command\"  };",
          "73: static const true_false_string tfs_segmentation_no_segmentation = { \"Segmentation\", \"No segmentation\" };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/tfs.c||epan/tfs.c": [
          "File: epan/tfs.c -> epan/tfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: const true_false_string tfs_active_inactive = { \"Active\", \"Inactive\" };",
          "52: const true_false_string tfs_found_not_found = { \"Found\", \"Not found\" };",
          "53: const true_false_string tfs_command_response = { \"Command\", \"Response\" };",
          "54: const true_false_string tfs_capable_not_capable = { \"Capable\", \"Not capable\" };",
          "55: const true_false_string tfs_supported_not_supported = { \"Supported\", \"Not supported\" };",
          "56: const true_false_string tfs_used_notused = { \"Used\", \"Not used\" };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: const true_false_string tfs_response_command = { \"Response\", \"Command\" };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: const true_false_string tfs_protocol_sensative_bit_transparent = { \"Protocol sensitive\", \"Bit transparent\" };",
          "86: const true_false_string tfs_full_half = { \"Full\", \"Half\" };",
          "87: const true_false_string tfs_acknowledged_not_acknowledged = { \"Acknowledged\", \"Not Acknowledged\" };",
          "88: const true_false_string tfs_response_request = { \"Response\", \"Request\" };",
          "89: const true_false_string tfs_defined_not_defined = { \"Defined\", \"Not defined\" };",
          "90: const true_false_string tfs_constructed_primitive = { \"Constructed\", \"Primitive\" };",
          "91: const true_false_string tfs_client_server = { \"Client\", \"Server\" };",
          "92: const true_false_string tfs_server_client = { \"Server\", \"Client\" };",
          "93: const true_false_string tfs_preferred_no_preference = { \"Preferred\", \"No preference\" };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: const true_false_string tfs_segmentation_no_segmentation = { \"Segmentation\", \"No segmentation\" };",
          "96: const true_false_string tfs_encrypt_do_not_encrypt = { \"Encrypt\", \"Do Not Encrypt\" };",
          "",
          "---------------"
        ],
        "epan/tfs.h||epan/tfs.h": [
          "File: epan/tfs.h -> epan/tfs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: WS_DLL_PUBLIC const true_false_string tfs_active_inactive;",
          "67: WS_DLL_PUBLIC const true_false_string tfs_found_not_found;",
          "68: WS_DLL_PUBLIC const true_false_string tfs_command_response;",
          "69: WS_DLL_PUBLIC const true_false_string tfs_capable_not_capable;",
          "70: WS_DLL_PUBLIC const true_false_string tfs_supported_not_supported;",
          "71: WS_DLL_PUBLIC const true_false_string tfs_used_notused;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: WS_DLL_PUBLIC const true_false_string tfs_response_command;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: WS_DLL_PUBLIC const true_false_string tfs_protocol_sensative_bit_transparent;",
          "101: WS_DLL_PUBLIC const true_false_string tfs_full_half;",
          "102: WS_DLL_PUBLIC const true_false_string tfs_acknowledged_not_acknowledged;",
          "103: WS_DLL_PUBLIC const true_false_string tfs_response_request;",
          "104: WS_DLL_PUBLIC const true_false_string tfs_defined_not_defined;",
          "105: WS_DLL_PUBLIC const true_false_string tfs_constructed_primitive;",
          "106: WS_DLL_PUBLIC const true_false_string tfs_client_server;",
          "107: WS_DLL_PUBLIC const true_false_string tfs_server_client;",
          "108: WS_DLL_PUBLIC const true_false_string tfs_preferred_no_preference;",
          "110: #ifdef __cplusplus",
          "111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: WS_DLL_PUBLIC const true_false_string tfs_segmentation_no_segmentation;",
          "111: WS_DLL_PUBLIC const true_false_string tfs_encrypt_do_not_encrypt;",
          "",
          "---------------"
        ]
      }
    }
  ]
}