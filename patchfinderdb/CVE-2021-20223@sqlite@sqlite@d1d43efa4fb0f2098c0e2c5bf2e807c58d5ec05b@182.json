{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ebd2ecdda7c13e92a01349bf9b58367975b3f264",
      "candidate_info": {
        "commit_hash": "ebd2ecdda7c13e92a01349bf9b58367975b3f264",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ebd2ecdda7c13e92a01349bf9b58367975b3f264",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbesort.c"
        ],
        "message": "Fix another (harmless in practice) tsan error in shared-cache mode.\n\nFossilOrigin-Name: 5a74fa3f0a64f462c8add9beae231a9bbdd19e54d07b54f08726cb1411fc8d3a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbesort.c||src/vdbesort.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 783fa887c9ed1a7d72c310df1dd9de91c016061b05fdeec87fbb2a7eb0b952ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "970:   if( pSorter==0 ){",
          "971:     rc = SQLITE_NOMEM_BKPT;",
          "972:   }else{",
          "973:     pSorter->pKeyInfo = pKeyInfo = (KeyInfo*)((u8*)pSorter + sz);",
          "974:     memcpy(pKeyInfo, pCsr->pKeyInfo, szKeyInfo);",
          "975:     pKeyInfo->db = 0;",
          "976:     if( nField && nWorker==0 ){",
          "977:       pKeyInfo->nKeyField = nField;",
          "978:     }",
          "980:     pSorter->nTask = nWorker + 1;",
          "981:     pSorter->iPrev = (u8)(nWorker - 1);",
          "982:     pSorter->bUseThreads = (pSorter->nTask>1);",
          "",
          "[Removed Lines]",
          "979:     pSorter->pgsz = pgsz = sqlite3BtreeGetPageSize(db->aDb[0].pBt);",
          "",
          "[Added Lines]",
          "973:     Btree *pBt = db->aDb[0].pBt;",
          "980:     sqlite3BtreeEnter(pBt);",
          "981:     pSorter->pgsz = pgsz = sqlite3BtreeGetPageSize(pBt);",
          "982:     sqlite3BtreeLeave(pBt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cfee74a2812b8f09e8b8ecf419a69b19de16b79",
      "candidate_info": {
        "commit_hash": "1cfee74a2812b8f09e8b8ecf419a69b19de16b79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1cfee74a2812b8f09e8b8ecf419a69b19de16b79",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Fix a potential NULL pointer dereference following OOM.  Problem discovered by dbsqlfuzz.  Test case in TH3.\n\nFossilOrigin-Name: 5aeb5a2d295e10d5fc1d456b3acaf8ac13c04cb5bb71a8c4571541d366e95887",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee034fe916448e953ee7824e5c0db99a36a0ad138ebfb25f751bf84cb80a8fa7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "1055:         int rc = resolveExprStep(pWalker, pRight);",
          "1056:         if( rc==WRC_Abort ) return WRC_Abort;",
          "1057:         if( pRight->op==TK_TRUEFALSE ){",
          "",
          "[Removed Lines]",
          "1054:       if( pRight->op==TK_ID ){",
          "",
          "[Added Lines]",
          "1054:       if( pRight && pRight->op==TK_ID ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87969b2a1190584c09f8676e3a17c2acaa99227c",
      "candidate_info": {
        "commit_hash": "87969b2a1190584c09f8676e3a17c2acaa99227c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87969b2a1190584c09f8676e3a17c2acaa99227c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c",
          "test/atof1.test"
        ],
        "message": "When doing a test-to-double conversion on a BLOB with an odd number of bytes and assuming a UTF16 encoding, ignore the last byte. Ticket [9eda2697f5cc1aba].\n\nFossilOrigin-Name: 1c76f1d8ec0937a2d2e4ce75f98494c953e9621db31945d7e44f45d90d1c3892",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c",
          "test/atof1.test||test/atof1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 295442887a3cd5868df26c5be244649ffb3bae8367f5cf02fe513424a1c9f6a7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:   }else{",
          "412:     int i;",
          "413:     incr = 2;",
          "414:     assert( SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 );",
          "415:     testcase( enc==SQLITE_UTF16LE );",
          "416:     testcase( enc==SQLITE_UTF16BE );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     length &= ~1;",
          "",
          "---------------"
        ],
        "test/atof1.test||test/atof1.test": [
          "File: test/atof1.test -> test/atof1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   } {1}",
          "57: }",
          "60: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: # 2020-01-08 ticket 9eda2697f5cc1aba",
          "60: # When running sqlite3AtoF() on a blob with an odd number of bytes using",
          "61: # UTF16, ignore the last byte so that the string has an integer number of",
          "62: # UTF16 code points.",
          "63: #",
          "64: reset_db",
          "65: do_execsql_test atof1-2.10 {",
          "66:   PRAGMA encoding = 'UTF16be';",
          "67:   CREATE TABLE t1(a, b);",
          "68:   INSERT INTO t1(rowid,a) VALUES (1,x'00'),(2,3);",
          "69:   SELECT substr(a,',') is true FROM t1 ORDER BY rowid;",
          "70: } {0 1}",
          "71: do_execsql_test atof1-2.20 {",
          "72:   SELECT substr(a,',') is true FROM t1 ORDER BY rowid DESC;",
          "73: } {1 0}",
          "74: do_execsql_test atof1-2.30 {",
          "75:   CREATE INDEX i1 ON t1(a);",
          "76:   SELECT count(*) FROM t1 WHERE substr(a,',');",
          "77: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7fe2fc0dcb0bb214fe83a8a8fcdeb553fb20b97d",
      "candidate_info": {
        "commit_hash": "7fe2fc0dcb0bb214fe83a8a8fcdeb553fb20b97d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7fe2fc0dcb0bb214fe83a8a8fcdeb553fb20b97d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "Fix a problem with foreign keys and generated columns discovered by Manuel Rigger.\n\nFossilOrigin-Name: 27c0fdab1ba4d4993b164eb4b777c63e82aa247c3fa406121dc8ed94970a0b35",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef73107f475e40e6bdd8b722e96992070f81fd2b7a3cb718ec8f251c89ca3e81",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "952: i16 sqlite3TableColumnToStorage(Table *pTab, i16 iCol){",
          "953:   int i;",
          "954:   i16 n;",
          "955:   assert( iCol<pTab->nCol );",
          "957:   for(i=0, n=0; i<iCol; i++){",
          "958:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "959:   }",
          "",
          "[Removed Lines]",
          "956:   if( (pTab->tabFlags & TF_HasVirtual)==0 ) return iCol;",
          "",
          "[Added Lines]",
          "958:   if( (pTab->tabFlags & TF_HasVirtual)==0 || iCol<0 ) return iCol;",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4136:       Table *pTab = pExpr->y.pTab;",
          "4137:       int iCol = pExpr->iColumn;",
          "4138:       int p1 = pExpr->iTable * (pTab->nCol+1) + 1",
          "4141:       assert( pExpr->iTable==0 || pExpr->iTable==1 );",
          "4142:       assert( iCol>=-1 && iCol<pTab->nCol );",
          "",
          "[Removed Lines]",
          "4139:                      + (iCol>=0 ? sqlite3TableColumnToStorage(pTab, iCol) : -1);",
          "",
          "[Added Lines]",
          "4139:                      + sqlite3TableColumnToStorage(pTab, iCol);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:   PRAGMA integrity_check;",
          "273: } {ok}",
          "275: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275: # 2019-12-06 Found by mrigger",
          "276: #",
          "277: sqlite3 db :memory:",
          "278: do_execsql_test gencol1-11.10 {",
          "279:   PRAGMA foreign_keys = true;",
          "280:   CREATE TABLE t0(",
          "281:     c0,",
          "282:     c1 INTEGER PRIMARY KEY,",
          "283:     c2 BLOB UNIQUE DEFAULT x'00',",
          "284:     c3 BLOB GENERATED ALWAYS AS (1),",
          "285:     FOREIGN KEY(c1) REFERENCES t0(c2)",
          "286:   );",
          "287: }",
          "288: do_catchsql_test gencol1-11.20 {",
          "289:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "290: } {1 {FOREIGN KEY constraint failed}}",
          "291: do_execsql_test gencol1-11.30 {",
          "292:   DROP TABLE t0;",
          "293:   CREATE TABLE t0(",
          "294:     c0,",
          "295:     c1 INTEGER PRIMARY KEY,",
          "296:     c3 BLOB GENERATED ALWAYS AS (1),",
          "297:     c2 BLOB UNIQUE DEFAULT x'00',",
          "298:     FOREIGN KEY(c1) REFERENCES t0(c2)",
          "299:   );",
          "300: }",
          "301: do_catchsql_test gencol1-11.40 {",
          "302:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "303: } {1 {FOREIGN KEY constraint failed}}",
          "304: do_execsql_test gencol1-11.50 {",
          "305:   DROP TABLE t0;",
          "306:   CREATE TABLE t0(",
          "307:     c0,",
          "308:     c3 BLOB GENERATED ALWAYS AS (1),",
          "309:     c1 INTEGER PRIMARY KEY,",
          "310:     c2 BLOB UNIQUE DEFAULT x'00',",
          "311:     FOREIGN KEY(c1) REFERENCES t0(c2)",
          "312:   );",
          "313: }",
          "314: do_catchsql_test gencol1-11.60 {",
          "315:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "316: } {1 {FOREIGN KEY constraint failed}}",
          "317: do_execsql_test gencol1-11.70 {",
          "318:   DROP TABLE t0;",
          "319:   CREATE TABLE t0(",
          "320:     c3 BLOB GENERATED ALWAYS AS (1),",
          "321:     c0,",
          "322:     c1 INTEGER PRIMARY KEY,",
          "323:     c2 BLOB UNIQUE DEFAULT x'00',",
          "324:     FOREIGN KEY(c1) REFERENCES t0(c2)",
          "325:   );",
          "326: }",
          "327: do_catchsql_test gencol1-11.80 {",
          "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
          "329: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "787f6d418d26977de5c5bbfb9641bd288f1fa1d9",
      "candidate_info": {
        "commit_hash": "787f6d418d26977de5c5bbfb9641bd288f1fa1d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/787f6d418d26977de5c5bbfb9641bd288f1fa1d9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/select.c",
          "test/with1.test",
          "test/with3.test",
          "test/with5.test"
        ],
        "message": "Enhance recursive common table expressions to support two or more recursive terms.\n\nFossilOrigin-Name: 77e64647ec429c6e0d884abbd00dabebe738f89544a4984d6fd7a702b928ccfd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/select.c||src/select.c",
          "test/with1.test||test/with1.test",
          "test/with3.test||test/with3.test",
          "test/with5.test||test/with5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f8802bb7be61fdf7c7a591945d533d848bc46d2989f7739dd9ad89e1b6a9c65",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4460:   assert(pList || pParse->db->mallocFailed );",
          "4461:   if( pList ){",
          "4462:     for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "4464:       pItem->iCursor = pParse->nTab++;",
          "4465:       if( pItem->pSelect ){",
          "4466:         sqlite3SrcListAssignCursors(pParse, pItem->pSelect->pSrc);",
          "",
          "[Removed Lines]",
          "4463:       if( pItem->iCursor>=0 ) break;",
          "",
          "[Added Lines]",
          "4463:       if( pItem->iCursor>=0 ) continue;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2416:   p->pOrderBy = 0;",
          "2419:   pSetup->pNext = 0;",
          "2420:   ExplainQueryPlan((pParse, 1, \"SETUP\"));",
          "2421:   rc = sqlite3Select(pParse, pSetup, &destQueue);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2426:   pFirstRec = p;",
          "2427:   for(pFirstRec=p; ALWAYS(pFirstRec!=0); pFirstRec=pFirstRec->pPrior){",
          "2428:     if( pFirstRec->selFlags & SF_Aggregate ){",
          "2429:       sqlite3ErrorMsg(pParse, \"recursive aggregate queries not supported\");",
          "2430:       goto end_of_recursive_query;",
          "2431:     }",
          "2432:     pFirstRec->op = TK_ALL;",
          "2433:     if( (pFirstRec->pPrior->selFlags & SF_Recursive)==0 ) break;",
          "2434:   }",
          "2437:   pSetup = pFirstRec->pPrior;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2462:   sqlite3VdbeGoto(v, addrTop);",
          "",
          "[Removed Lines]",
          "2451:   if( p->selFlags & SF_Aggregate ){",
          "2452:     sqlite3ErrorMsg(pParse, \"recursive aggregate queries not supported\");",
          "2453:   }else{",
          "2454:     p->pPrior = 0;",
          "2455:     ExplainQueryPlan((pParse, 1, \"RECURSIVE STEP\"));",
          "2456:     sqlite3Select(pParse, p, &destQueue);",
          "2457:     assert( p->pPrior==0 );",
          "2458:     p->pPrior = pSetup;",
          "2459:   }",
          "",
          "[Added Lines]",
          "2470:   pFirstRec->pPrior = 0;",
          "2471:   ExplainQueryPlan((pParse, 1, \"RECURSIVE STEP\"));",
          "2472:   sqlite3Select(pParse, p, &destQueue);",
          "2473:   assert( pFirstRec->pPrior==0 );",
          "2474:   pFirstRec->pPrior = pSetup;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2525:   return rc;",
          "2526: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2548: static int hasAnchor(Select *p){",
          "2549:   while( p && (p->selFlags & SF_Recursive)!=0 ){ p = p->pPrior; }",
          "2550:   return p!=0;",
          "2551: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2610:   assert( p->pEList->nExpr==pPrior->pEList->nExpr );",
          "2612: #ifndef SQLITE_OMIT_CTE",
          "2614:     generateWithRecursiveQuery(pParse, p, &dest);",
          "2615:   }else",
          "2616: #endif",
          "",
          "[Removed Lines]",
          "2613:   if( p->selFlags & SF_Recursive ){",
          "",
          "[Added Lines]",
          "2638:   if( (p->selFlags & SF_Recursive)!=0 && hasAnchor(p) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4820:     assert( pFrom->pSelect );",
          "4824:     bMayRecursive = ( pSel->op==TK_ALL || pSel->op==TK_UNION );",
          "4826:       int i;",
          "4828:       for(i=0; i<pSrc->nSrc; i++){",
          "4829:         struct SrcList_item *pItem = &pSrc->a[i];",
          "4830:         if( pItem->zDatabase==0",
          "4831:          && pItem->zName!=0",
          "4832:          && 0==sqlite3StrICmp(pItem->zName, pCte->zName)",
          "4834:           pItem->pTab = pTab;",
          "4835:           pItem->fg.isRecursive = 1;",
          "4836:           pTab->nTabRef++;",
          "4838:         }",
          "4839:       }",
          "4840:     }",
          "4852:     pCte->zCteErr = \"circular reference: %s\";",
          "4853:     pSavedWith = pParse->pWith;",
          "4854:     pParse->pWith = pWith;",
          "4861:     }else{",
          "4862:       sqlite3WalkSelect(pWalker, pSel);",
          "4863:     }",
          "",
          "[Removed Lines]",
          "4823:     pSel = pFrom->pSelect;",
          "4825:     if( bMayRecursive ){",
          "4827:       SrcList *pSrc = pFrom->pSelect->pSrc;",
          "4833:           ){",
          "4837:           pSel->selFlags |= SF_Recursive;",
          "4843:     if( pTab->nTabRef>2 ){",
          "4844:       sqlite3ErrorMsg(",
          "4845:           pParse, \"multiple references to recursive table: %s\", pCte->zName",
          "4846:       );",
          "4847:       return SQLITE_ERROR;",
          "4848:     }",
          "4849:     assert( pTab->nTabRef==1 ||",
          "4850:             ((pSel->selFlags&SF_Recursive) && pTab->nTabRef==2 ));",
          "4855:     if( bMayRecursive ){",
          "4856:       Select *pPrior = pSel->pPrior;",
          "4857:       assert( pPrior->pWith==0 );",
          "4858:       pPrior->pWith = pSel->pWith;",
          "4859:       sqlite3WalkSelect(pWalker, pPrior);",
          "4860:       pPrior->pWith = 0;",
          "",
          "[Added Lines]",
          "4851:     pRecTerm = pSel = pFrom->pSelect;",
          "4853:     while( bMayRecursive && pRecTerm->op==pSel->op ){",
          "4855:       SrcList *pSrc = pRecTerm->pSrc;",
          "4856:       assert( pRecTerm->pPrior!=0 );",
          "4862:         ){",
          "4865:           if( pRecTerm->selFlags & SF_Recursive ){",
          "4866:             sqlite3ErrorMsg(pParse,",
          "4867:                \"multiple references to recursive table: %s\", pCte->zName",
          "4868:             );",
          "4869:             return SQLITE_ERROR;",
          "4870:           }",
          "4872:           pRecTerm->selFlags |= SF_Recursive;",
          "4873:           if( iRecTab<0 ) iRecTab = pParse->nTab++;",
          "4874:           pItem->iCursor = iRecTab;",
          "4877:       if( (pRecTerm->selFlags & SF_Recursive)==0 ) break;",
          "4878:       pRecTerm = pRecTerm->pPrior;",
          "4884:     if( pSel->selFlags & SF_Recursive ){",
          "4885:       assert( pRecTerm!=0 );",
          "4886:       assert( (pRecTerm->selFlags & SF_Recursive)==0 );",
          "4887:       assert( pRecTerm->pNext!=0 );",
          "4888:       assert( (pRecTerm->pNext->selFlags & SF_Recursive)!=0 );",
          "4889:       assert( pRecTerm->pWith==0 );",
          "4890:       pRecTerm->pWith = pSel->pWith;",
          "4891:       sqlite3WalkSelect(pWalker, pRecTerm);",
          "4892:       pRecTerm->pWith = 0;",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:     SELECT i FROM tree WHERE p IN (SELECT id FROM t)",
          "353:   )",
          "354:   SELECT id FROM t;",
          "357: do_catchsql_test 7.5 {",
          "358:   WITH t(id) AS (",
          "",
          "[Removed Lines]",
          "355: } {1 {recursive reference in a subquery: t}}",
          "",
          "[Added Lines]",
          "355: } {1 {circular reference: t}}",
          "",
          "---------------"
        ],
        "test/with3.test||test/with3.test": [
          "File: test/with3.test -> test/with3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     SELECT 5 FROM t0 UNION SELECT 8 FROM m",
          "31:   )",
          "32:   SELECT * FROM i;",
          "35: # 2019-11-09 dbfuzzcheck find",
          "36: do_catchsql_test 1.1 {",
          "",
          "[Removed Lines]",
          "33: } {1 {no such table: t0}}",
          "",
          "[Added Lines]",
          "33: } {1 {no such table: m}}",
          "",
          "---------------"
        ],
        "test/with5.test||test/with5.test": [
          "File: test/with5.test -> test/with5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020-10-19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is recursive common table expressions with",
          "13: # multiple recursive terms in the compound select.",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: set ::testprefix with5",
          "20: ifcapable {!cte} {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: do_execsql_test 100 {",
          "26:   CREATE TABLE link(aa INT, bb INT);",
          "27:   CREATE INDEX link_f ON link(aa,bb);",
          "28:   CREATE INDEX link_t ON link(bb,aa);",
          "29:   INSERT INTO link(aa,bb) VALUES",
          "30:     (1,3),",
          "31:     (5,3),",
          "32:     (7,1),",
          "33:     (7,9),",
          "34:     (9,9),",
          "35:     (5,11),",
          "36:     (11,7),",
          "37:     (2,4),",
          "38:     (4,6),",
          "39:     (8,6);",
          "40: } {}",
          "41: do_execsql_test 110 {",
          "42:   WITH RECURSIVE closure(x) AS (",
          "43:      VALUES(1)",
          "44:      UNION",
          "45:      SELECT aa FROM closure, link WHERE link.bb=closure.x",
          "46:      UNION",
          "47:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "48:   )",
          "49:   SELECT x FROM closure ORDER BY x;",
          "50: } {1 3 5 7 9 11}",
          "51: do_execsql_test 111 {",
          "52:   WITH RECURSIVE closure(x) AS (",
          "53:      VALUES(1)",
          "54:      UNION",
          "55:      SELECT aa FROM link, closure WHERE link.bb=closure.x",
          "56:      UNION",
          "57:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "58:   )",
          "59:   SELECT x FROM closure ORDER BY x;",
          "60: } {1 3 5 7 9 11}",
          "61: do_execsql_test 112 {",
          "62:   WITH RECURSIVE closure(x) AS (",
          "63:      VALUES(1)",
          "64:      UNION",
          "65:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "66:      UNION",
          "67:      SELECT aa FROM link, closure WHERE link.bb=closure.x",
          "68:   )",
          "69:   SELECT x FROM closure ORDER BY x;",
          "70: } {1 3 5 7 9 11}",
          "71: do_execsql_test 113 {",
          "72:   WITH RECURSIVE closure(x) AS (",
          "73:      VALUES(1),(200),(300),(400)",
          "74:      INTERSECT",
          "75:      VALUES(1)",
          "76:      UNION",
          "77:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "78:      UNION",
          "79:      SELECT aa FROM link, closure WHERE link.bb=closure.x",
          "80:   )",
          "81:   SELECT x FROM closure ORDER BY x;",
          "82: } {1 3 5 7 9 11}",
          "83: do_execsql_test 114 {",
          "84:   WITH RECURSIVE closure(x) AS (",
          "85:      VALUES(1),(200),(300),(400)",
          "86:      UNION ALL",
          "87:      VALUES(2)",
          "88:      UNION",
          "89:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "90:      UNION",
          "91:      SELECT aa FROM link, closure WHERE link.bb=closure.x",
          "92:   )",
          "93:   SELECT x FROM closure ORDER BY x;",
          "94: } {1 2 3 4 5 6 7 8 9 11 200 300 400}",
          "96: do_catchsql_test 120 {",
          "97:   WITH RECURSIVE closure(x) AS (",
          "98:      VALUES(1),(200),(300),(400)",
          "99:      UNION ALL",
          "100:      VALUES(2)",
          "101:      UNION ALL",
          "102:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "103:      UNION",
          "104:      SELECT aa FROM link, closure WHERE link.bb=closure.x",
          "105:   )",
          "106:   SELECT x FROM closure ORDER BY x;",
          "107: } {1 {circular reference: closure}}",
          "108: do_catchsql_test 121 {",
          "109:   WITH RECURSIVE closure(x) AS (",
          "110:      VALUES(1),(200),(300),(400)",
          "111:      UNION ALL",
          "112:      VALUES(2)",
          "113:      UNION",
          "114:      SELECT bb FROM closure, link WHERE link.aa=closure.x",
          "115:      UNION ALL",
          "116:      SELECT aa FROM link, closure WHERE link.bb=closure.x",
          "117:   )",
          "118:   SELECT x FROM closure ORDER BY x;",
          "119: } {1 {circular reference: closure}}",
          "121: do_execsql_test 130 {",
          "122:   WITH RECURSIVE closure(x) AS (",
          "123:     SELECT 1 AS x",
          "124:     UNION",
          "125:     SELECT aa FROM link JOIN closure ON bb=x",
          "126:     UNION",
          "127:     SELECT bb FROM link JOIN closure on aa=x",
          "128:     ORDER BY x LIMIT 4",
          "129:   )",
          "130:   SELECT * FROM closure;",
          "131: } {1 3 5 7}",
          "132: do_execsql_test 131 {",
          "133:   WITH RECURSIVE closure(x) AS (",
          "134:     SELECT 1 AS x",
          "135:     UNION ALL",
          "136:     SELECT 2",
          "137:     UNION",
          "138:     SELECT aa FROM link JOIN closure ON bb=x",
          "139:     UNION",
          "140:     SELECT bb FROM link JOIN closure on aa=x",
          "141:     ORDER BY x LIMIT 4",
          "142:   )",
          "143:   SELECT * FROM closure;",
          "144: } {1 2 3 4}",
          "146: do_execsql_test 200 {",
          "147:   CREATE TABLE linkA(aa1,aa2);",
          "148:   INSERT INTO linkA(aa1,aa2) VALUES(1,3),(5,7),(9,11);",
          "149:   CREATE TABLE linkB(bb1,bb2);",
          "150:   INSERT INTO linkB(bb1,bb2) VALUES(7,9),(11,13),(3,5);",
          "151:   CREATE TABLE linkC(cc1,cc2);",
          "152:   INSERT INTO linkC(cc1,cc2) VALUES(1,2),(2,4),(6,8);",
          "153:   CREATE TABLE linkD(dd1,dd2);",
          "154:   INSERT INTO linkD(dd1,dd2) VALUES(4,6),(100,110);",
          "155: } {}",
          "156: do_execsql_test 210 {",
          "157:   WITH RECURSIVE closure(x) AS (",
          "158:     VALUES(1)",
          "159:     UNION ALL",
          "160:     SELECT aa2 FROM linkA JOIN closure ON x=aa1",
          "161:     UNION ALL",
          "162:     SELECT bb2 FROM linkB JOIN closure ON x=bb1",
          "163:     UNION ALL",
          "164:     SELECT cc2 FROM linkC JOIN closure ON x=cc1",
          "165:     UNION ALL",
          "166:     SELECT dd2 FROM linkD JOIN closure ON x=dd1",
          "167:   )",
          "168:   SELECT x FROM closure ORDER BY +x;",
          "169: } {1 2 3 4 5 6 7 8 9 11 13}",
          "170: do_execsql_test 220 {",
          "171:   CREATE TABLE linkA_ipk(aa1 INTEGER PRIMARY KEY,aa2);",
          "172:   INSERT INTO linkA_ipk(aa1,aa2) SELECT aa1, aa2 FROM linkA;",
          "173:   CREATE TABLE linkB_ipk(bb1 INTEGER PRIMARY KEY,bb2);",
          "174:   INSERT INTO linkB_ipk(bb1,bb2) SELECT bb1, bb2 FROM linkB;",
          "175:   CREATE TABLE linkC_ipk(cc1 INTEGER PRIMARY KEY,cc2);",
          "176:   INSERT INTO linkC_ipk(cc1,cc2) SELECT cc1, cc2 FROM linkC;",
          "177:   CREATE TABLE linkD_ipk(dd1 INTEGER PRIMARY KEY,dd2);",
          "178:   INSERT INTO linkD_ipk(dd1,dd2) SELECT dd1, dd2 FROM linkD;",
          "179:   WITH RECURSIVE closure(x) AS (",
          "180:     VALUES(1)",
          "181:     UNION ALL",
          "182:     SELECT aa2 FROM linkA_ipk JOIN closure ON x=aa1",
          "183:     UNION ALL",
          "184:     SELECT bb2 FROM linkB_ipk JOIN closure ON x=bb1",
          "185:     UNION ALL",
          "186:     SELECT cc2 FROM linkC_ipk JOIN closure ON x=cc1",
          "187:     UNION ALL",
          "188:     SELECT dd2 FROM linkD_ipk JOIN closure ON x=dd1",
          "189:   )",
          "190:   SELECT x FROM closure ORDER BY +x;",
          "191: } {1 2 3 4 5 6 7 8 9 11 13}",
          "194: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}