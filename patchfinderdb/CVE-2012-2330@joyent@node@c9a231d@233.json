{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3cf3f35fcf192c717e7a393fb984bf6f879d0cc",
      "candidate_info": {
        "commit_hash": "b3cf3f35fcf192c717e7a393fb984bf6f879d0cc",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b3cf3f35fcf192c717e7a393fb984bf6f879d0cc",
        "files": [
          "src/node.cc",
          "src/node.js",
          "src/node_script.cc",
          "test/message/eval_messages.js",
          "test/message/eval_messages.out",
          "test/simple/test-cli-eval.js"
        ],
        "message": "Report errors properly from --eval and stdin",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js",
          "src/node_script.cc||src/node_script.cc",
          "test/message/eval_messages.js||test/message/eval_messages.js",
          "test/simple/test-cli-eval.js||test/simple/test-cli-eval.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1214:   return buflen;",
          "1215: }",
          "1218: void DisplayExceptionLine (TryCatch &try_catch) {",
          "1219:   HandleScope scope;",
          "1221:   Handle<Message> message = try_catch.Message();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1221:   static bool displayed_error = false;",
          "1223:   if (displayed_error) return;",
          "1224:   displayed_error = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1234:     String::Utf8Value sourceline(message->GetSourceLine());",
          "1235:     const char* sourceline_string = *sourceline;",
          "1259:     int start = message->GetStartColumn();",
          "1261:       fputc((sourceline_string[i] == '\\t') ? '\\t' : ' ', stderr);",
          "1262:     }",
          "1264:     for (int i = start; i < end; i++) {",
          "1265:       fputc('^', stderr);",
          "1266:     }",
          "",
          "[Removed Lines]",
          "1255:     int offset = linenum == 1 ? 62 : 0;",
          "1257:     fprintf(stderr, \"%s\\n\", sourceline_string + offset);",
          "1260:     for (int i = offset; i < start; i++) {",
          "1263:     int end = message->GetEndColumn();",
          "",
          "[Added Lines]",
          "1266:     int end = message->GetEndColumn();",
          "1270:     fprintf(stderr, \"%s\\n\", sourceline_string);",
          "1272:     for (int i = 0; i < start; i++) {",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     } else if (process._eval != null) {",
          "77:     } else if (process.argv[1]) {",
          "79:       var path = NativeModule.require('path');",
          "",
          "[Removed Lines]",
          "76:       evalScript('eval');",
          "",
          "[Added Lines]",
          "76:       evalScript('[eval]');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     var module = new Module(name);",
          "268:     module.filename = path.join(cwd, name);",
          "269:     module.paths = Module._nodeModulePaths(cwd);",
          "271:     if (process._print_eval) console.log(result);",
          "272:   }",
          "",
          "[Removed Lines]",
          "270:     var result = module._compile('return eval(process._eval)', name);",
          "",
          "[Added Lines]",
          "270:     var script = process._eval;",
          "271:     if (!Module._contextLoad) {",
          "272:       var body = script;",
          "273:       script = 'global.__filename = ' + JSON.stringify(name) + ';\\n' +",
          "274:                'global.exports = exports;\\n' +",
          "275:                'global.module = module;\\n' +",
          "276:                'global.__dirname = __dirname;\\n' +",
          "277:                'global.require = require;\\n' +",
          "278:                'return require(\"vm\").runInThisContext(' +",
          "279:                JSON.stringify(body) + ', ' +",
          "280:                JSON.stringify(name) + ', true);\\n';",
          "281:     }",
          "282:     var result = module._compile(script, name + '-wrapper');",
          "",
          "---------------"
        ],
        "src/node_script.cc||src/node_script.cc": [
          "File: src/node_script.cc -> src/node_script.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:   if (output_flag == returnResult) {",
          "418:     result = script->Run();",
          "419:     if (result.IsEmpty()) {",
          "420:       return try_catch.ReThrow();",
          "421:     }",
          "422:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420:       if (display_error) DisplayExceptionLine(try_catch);",
          "",
          "---------------"
        ],
        "test/message/eval_messages.js||test/message/eval_messages.js": [
          "File: test/message/eval_messages.js -> test/message/eval_messages.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: var common = require('../common');",
          "24: var assert = require('assert');",
          "26: var spawn = require('child_process').spawn;",
          "28: function run(cmd, strict, cb) {",
          "29:   var args = [];",
          "30:   if (strict) args.push('--use_strict');",
          "31:   args.push('-pe', cmd);",
          "32:   var child = spawn(process.execPath, args);",
          "33:   child.stdout.pipe(process.stdout);",
          "34:   child.stderr.pipe(process.stdout);",
          "35:   child.on('close', cb);",
          "36: }",
          "38: var queue =",
          "39:   [ 'with(this){__filename}',",
          "40:     '42',",
          "41:     'throw new Error(\"hello\")',",
          "42:     'var x = 100; y = x;',",
          "43:     'var ______________________________________________; throw 10' ];",
          "45: function go() {",
          "46:   var c = queue.shift();",
          "47:   if (!c) return console.log('done');",
          "48:   run(c, false, function() {",
          "49:     run(c, true, go);",
          "50:   });",
          "51: }",
          "53: go();",
          "",
          "---------------"
        ],
        "test/simple/test-cli-eval.js||test/simple/test-cli-eval.js": [
          "File: test/simple/test-cli-eval.js -> test/simple/test-cli-eval.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var common = require('../common.js'),",
          "23:     assert = require('assert'),",
          "24:     child = require('child_process'),",
          "25:     nodejs = '\"' + process.execPath + '\"';",
          "29: var filename = __filename.replace(/\\\\/g, '/');",
          "38: child.exec(nodejs + ' --eval 42',",
          "39:     function(err, stdout, stderr) {",
          "",
          "[Removed Lines]",
          "31: if (module.parent) {",
          "33:   console.log('Loaded as a module, exiting with status code 42.');",
          "34:   process.exit(42);",
          "35: }",
          "",
          "[Added Lines]",
          "22: if (module.parent) {",
          "24:   console.log('Loaded as a module, exiting with status code 42.');",
          "25:   process.exit(42);",
          "26: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0950cbea282024a21c735ba20803ac8b05e0b48",
      "candidate_info": {
        "commit_hash": "b0950cbea282024a21c735ba20803ac8b05e0b48",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b0950cbea282024a21c735ba20803ac8b05e0b48",
        "files": [
          "lib/net.js",
          "test/simple/test-net-settimeout.js"
        ],
        "message": "net: ignore socket.setTimeout(Infinity) (and NaN)",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-settimeout.js||test/simple/test-net-settimeout.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "162: Socket.prototype.setTimeout = function(msecs, callback) {",
          "164:     timers.enroll(this, msecs);",
          "165:     timers.active(this);",
          "166:     if (callback) {",
          "",
          "[Removed Lines]",
          "163:   if (msecs > 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-settimeout.js||test/simple/test-net-settimeout.js": [
          "File: test/simple/test-net-settimeout.js -> test/simple/test-net-settimeout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: });",
          "34: server.listen(common.PORT);",
          "42: });",
          "",
          "[Removed Lines]",
          "36: var socket = net.createConnection(common.PORT, 'localhost');",
          "38: socket.setTimeout(T, function() {",
          "39:   socket.destroy();",
          "40:   server.close();",
          "41:   assert.ok(false);",
          "44: socket.setTimeout(0);",
          "46: setTimeout(function() {",
          "47:   socket.destroy();",
          "48:   server.close();",
          "49:   assert.ok(true);",
          "50: }, T * 2);",
          "",
          "[Added Lines]",
          "36: var killers = [0, Infinity, NaN];",
          "38: var left = killers.length;",
          "39: killers.forEach(function(killer) {",
          "40:   var socket = net.createConnection(common.PORT, 'localhost');",
          "42:   socket.setTimeout(T, function() {",
          "43:     socket.destroy();",
          "44:     if (--left === 0) server.close();",
          "45:     assert.ok(killer !== 0);",
          "46:     clearTimeout(timeout);",
          "47:   });",
          "49:   socket.setTimeout(killer);",
          "51:   var timeout = setTimeout(function() {",
          "52:     socket.destroy();",
          "53:     if (--left === 0) server.close();",
          "54:     assert.ok(killer === 0);",
          "55:   }, T * 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7407be896ef4cacaa96b383cb24b692c47debf62",
      "candidate_info": {
        "commit_hash": "7407be896ef4cacaa96b383cb24b692c47debf62",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7407be896ef4cacaa96b383cb24b692c47debf62",
        "files": [
          "src/node.cc",
          "src/node.h"
        ],
        "message": "MakeCallback: Accept Function or Symbol argument",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.h||src/node.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "979:   HandleScope scope;",
          "982:   if (!callback_v->IsFunction()) {",
          "984:   }",
          "985:   assert(callback_v->IsFunction());",
          "986:   Local<Function> callback = Local<Function>::Cast(callback_v);",
          "990:   TryCatch try_catch;",
          "",
          "[Removed Lines]",
          "975: void MakeCallback(Handle<Object> object,",
          "976:                   const char* method,",
          "977:                   int argc,",
          "978:                   Handle<Value> argv[]) {",
          "981:   Local<Value> callback_v = object->Get(String::New(method));",
          "983:     fprintf(stderr, \"method = %s\", method);",
          "",
          "[Added Lines]",
          "975: void",
          "976: MakeCallback(const Handle<Object> object,",
          "977:              const char* method,",
          "978:              int argc,",
          "979:              Handle<Value> argv[]) {",
          "980:   HandleScope scope;",
          "981:   return scope.Close(MakeCallback(object, String::NewSymbol(method), argc, argv));",
          "982: }",
          "984: void",
          "985: MakeCallback(const Handle<Object> object,",
          "986:              const Handle<String> symbol,",
          "987:              int argc,",
          "988:              Handle<Value> argv[]) {",
          "991:   Local<Value> callback_v = object->Get(symbol);",
          "993:     String::Utf8Value method(symbol);",
          "994:     fprintf(stderr, \"method = %s\", *method);",
          "999: }",
          "1001: void",
          "1002: MakeCallback(const Handle<Object> object,",
          "1003:              const Handle<Function> callback,",
          "1004:              int argc,",
          "1005:              Handle<Value> argv[]) {",
          "1006:   HandleScope scope;",
          "",
          "---------------"
        ],
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:   extern \"C\" node::node_module_struct modname ## _module;",
          "245: NODE_EXTERN void SetErrno(uv_err_t err);",
          "247:                               const char* method,",
          "248:                               int argc,",
          "249:                               v8::Handle<v8::Value> argv[]);",
          "251: }  // namespace node",
          "252: #endif  // SRC_NODE_H_",
          "",
          "[Removed Lines]",
          "246: NODE_EXTERN void MakeCallback(v8::Handle<v8::Object> object,",
          "",
          "[Added Lines]",
          "246: NODE_EXTERN void MakeCallback(const v8::Handle<v8::Object> object,",
          "251: NODE_EXTERN void MakeCallback(const v8::Handle<v8::Object> object,",
          "252:                               const v8::Handle<v8::String> symbol,",
          "253:                               int argc,",
          "254:                               v8::Handle<v8::Value> argv[]);",
          "256: NODE_EXTERN void MakeCallback(const v8::Handle<v8::Object> object,",
          "257:                               const v8::Handle<v8::Function> callback,",
          "258:                               int argc,",
          "259:                               v8::Handle<v8::Value> argv[]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ff86a2848c2e047ac05dd0fb6f584d8e3111ab7",
      "candidate_info": {
        "commit_hash": "9ff86a2848c2e047ac05dd0fb6f584d8e3111ab7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9ff86a2848c2e047ac05dd0fb6f584d8e3111ab7",
        "files": [
          "node.gyp"
        ],
        "message": "build: set `process.platform` to \"darwin\" on OS X\n\nThis is consistent with the old waf build system, and doesn't break old scripts\nthat are expecting the value to be \"darwin\".\n\nFixes #2518.",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:         }],",
          "179:         [ 'OS==\"mac\"', {",
          "180:           'libraries': [ '-framework Carbon' ],",
          "181:         }],",
          "182:         [ 'OS==\"linux\"', {",
          "183:           'libraries': [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:           'defines': [",
          "182:             # we need to use node's preferred \"darwin\" rather than gyp's preferred \"mac\"",
          "183:             'PLATFORM=\"darwin\"',",
          "184:           ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee6c11876aa0064a34420eb5039bdc6c509fcff6",
      "candidate_info": {
        "commit_hash": "ee6c11876aa0064a34420eb5039bdc6c509fcff6",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ee6c11876aa0064a34420eb5039bdc6c509fcff6",
        "files": [
          "benchmark/fs-readfile.js"
        ],
        "message": "benchmark for fs.readfile",
        "before_after_code_files": [
          "benchmark/fs-readfile.js||benchmark/fs-readfile.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/fs-readfile.js||benchmark/fs-readfile.js": [
          "File: benchmark/fs-readfile.js -> benchmark/fs-readfile.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: var path = require('path');",
          "6: var filename = path.resolve(__dirname, 'http.sh');",
          "7: var fs = require('fs');",
          "8: var count = 0;",
          "9: var go = true;",
          "10: var len = -1;",
          "11: var assert = require('assert');",
          "13: var concurrency = 1;",
          "14: var encoding = null;",
          "15: var time = 10;",
          "17: for (var i = 2; i < process.argv.length; i++) {",
          "18:   var arg = process.argv[i];",
          "19:   if (arg.match(/^-e$/)) {",
          "20:     encoding = process.argv[++i] || null;",
          "21:   } else if (arg.match(/^-c$/)) {",
          "22:     concurrency = ~~process.argv[++i];",
          "23:     if (concurrency < 1) concurrency = 1;",
          "24:   } else if (arg === '-t') {",
          "25:     time = ~~process.argv[++i];",
          "26:     if (time < 1) time = 1;",
          "27:   }",
          "28: }",
          "31: setTimeout(function() {",
          "32:   go = false;",
          "33: }, time * 1000);",
          "35: function round(n) {",
          "36:   return Math.floor(n * 100) / 100;",
          "37: }",
          "39: var start = process.hrtime();",
          "40: while (concurrency--) readFile();",
          "42: function readFile() {",
          "43:   if (!go) {",
          "44:     process.stdout.write('\\n');",
          "45:     console.log('read the file %d times (higher is better)', count);",
          "46:     var end = process.hrtime();",
          "47:     var elapsed = [end[0] - start[0], end[1] - start[1]];",
          "48:     var ns = elapsed[0] * 1E9 + elapsed[1];",
          "49:     var nsper = round(ns / count);",
          "50:     console.log('%d ns per read (lower is better)', nsper);",
          "51:     var readsper = round(count / (ns / 1E9));",
          "52:     console.log('%d reads per sec (higher is better)', readsper);",
          "53:     process.exit(0);",
          "54:     return;",
          "55:   }",
          "57:   if (!(count % 1000)) {",
          "58:     process.stdout.write('.');",
          "59:   }",
          "61:   if (encoding) fs.readFile(filename, encoding, then);",
          "62:   else fs.readFile(filename, then);",
          "64:   function then(er, data) {",
          "65:     assert.ifError(er);",
          "66:     count++;",
          "68:     if (count === 1) len = data.length;",
          "69:     else assert(len === data.length);",
          "70:     readFile();",
          "71:   }",
          "72: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}