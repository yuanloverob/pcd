{
  "cve_id": "CVE-2013-0865",
  "cve_desc": "The vqa_decode_chunk function in libavcodec/vqavideo.c in FFmpeg before 1.0.4 and 1.1.x before 1.1.2 allows remote attackers to have an unspecified impact via a large (1) cbp0 or (2) cbpz chunk in Westwood Studios VQA Video file, which triggers an out-of-bounds write.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "ab6c9332bfa1e20127a16392a0b85a4aa4840889",
  "patch_info": {
    "commit_hash": "ab6c9332bfa1e20127a16392a0b85a4aa4840889",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ab6c9332bfa1e20127a16392a0b85a4aa4840889",
    "files": [
      "libavcodec/vqavideo.c"
    ],
    "message": "vqavideo: check chunk sizes before reading chunks\n\nFixes out of array writes\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
    ]
  },
  "patch_diff": {
    "libavcodec/vqavideo.c||libavcodec/vqavideo.c": [
      "File: libavcodec/vqavideo.c -> libavcodec/vqavideo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "537:         bytestream2_seek(&s->gb, cbp0_chunk, SEEK_SET);",
      "538:         chunk_size = bytestream2_get_be32(&s->gb);",
      "541:         bytestream2_get_buffer(&s->gb, &s->next_codebook_buffer[s->next_codebook_buffer_index],",
      "542:                                chunk_size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "540:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
      "541:             av_log(s->avctx, AV_LOG_ERROR, \"cbp0 chunk too large (0x%X bytes)\\n\", chunk_size);",
      "542:             return AVERROR_INVALIDDATA;",
      "543:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "560:         bytestream2_seek(&s->gb, cbpz_chunk, SEEK_SET);",
      "561:         chunk_size = bytestream2_get_be32(&s->gb);",
      "564:         bytestream2_get_buffer(&s->gb, &s->next_codebook_buffer[s->next_codebook_buffer_index],",
      "565:                                chunk_size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "568:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
      "569:             av_log(s->avctx, AV_LOG_ERROR, \"cbpz chunk too large (0x%X bytes)\\n\", chunk_size);",
      "570:             return AVERROR_INVALIDDATA;",
      "571:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d04194db45711f82e3e87fab62c9224ac03998c3",
      "candidate_info": {
        "commit_hash": "d04194db45711f82e3e87fab62c9224ac03998c3",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/d04194db45711f82e3e87fab62c9224ac03998c3",
        "files": [
          "libavcodec/vqavideo.c"
        ],
        "message": "vqavideo: check chunk sizes before reading chunks\n\nFixes out of array writes\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit ab6c9332bfa1e20127a16392a0b85a4aa4840889)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 13093f9767b922661132a3c1f4b5ba2c7338b660)\n\nCC: libav-stable@libav.org\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit f7d18deb73d1dd1b27b2c7062c9a10d168a6c62a)\n\nAddresses: CVE-2013-0865\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit ab434bf0d051008a329d49d0256faa5d64e2bf4d)\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ],
          "candidate": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vqavideo.c||libavcodec/vqavideo.c": [
          "File: libavcodec/vqavideo.c -> libavcodec/vqavideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "533:         bytestream2_seek(&s->gb, cbp0_chunk, SEEK_SET);",
          "534:         chunk_size = bytestream2_get_be32(&s->gb);",
          "537:         bytestream2_get_buffer(&s->gb, &s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "538:                                chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "537:             av_log(s->avctx, AV_LOG_ERROR, \"cbp0 chunk too large (%u bytes)\\n\",",
          "538:                    chunk_size);",
          "539:             return AVERROR_INVALIDDATA;",
          "540:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "556:         bytestream2_seek(&s->gb, cbpz_chunk, SEEK_SET);",
          "557:         chunk_size = bytestream2_get_be32(&s->gb);",
          "560:         bytestream2_get_buffer(&s->gb, &s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "561:                                chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "566:             av_log(s->avctx, AV_LOG_ERROR, \"cbpz chunk too large (%u bytes)\\n\",",
          "567:                    chunk_size);",
          "568:             return AVERROR_INVALIDDATA;",
          "569:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08e2c7a45f82b897a285548c257972eb1ad352c5",
      "candidate_info": {
        "commit_hash": "08e2c7a45f82b897a285548c257972eb1ad352c5",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/08e2c7a45f82b897a285548c257972eb1ad352c5",
        "files": [
          "libavcodec/vqavideo.c"
        ],
        "message": "vqavideo: check chunk sizes before reading chunks\n\nFixes out of array writes\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit ab6c9332bfa1e20127a16392a0b85a4aa4840889)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ],
          "candidate": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vqavideo.c||libavcodec/vqavideo.c": [
          "File: libavcodec/vqavideo.c -> libavcodec/vqavideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:         bytestream2_seek(&s->gb, cbp0_chunk, SEEK_SET);",
          "537:         chunk_size = bytestream2_get_be32(&s->gb);",
          "540:         bytestream2_get_buffer(&s->gb, &s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "541:                                chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "540:             av_log(s->avctx, AV_LOG_ERROR, \"cbp0 chunk too large (0x%X bytes)\\n\", chunk_size);",
          "541:             return AVERROR_INVALIDDATA;",
          "542:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:         bytestream2_seek(&s->gb, cbpz_chunk, SEEK_SET);",
          "560:         chunk_size = bytestream2_get_be32(&s->gb);",
          "563:         bytestream2_get_buffer(&s->gb, &s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "564:                                chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "568:             av_log(s->avctx, AV_LOG_ERROR, \"cbpz chunk too large (0x%X bytes)\\n\", chunk_size);",
          "569:             return AVERROR_INVALIDDATA;",
          "570:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cac35086c9e103fa98960c546d5017e7363803a",
      "candidate_info": {
        "commit_hash": "2cac35086c9e103fa98960c546d5017e7363803a",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/2cac35086c9e103fa98960c546d5017e7363803a",
        "files": [
          "libavcodec/vqavideo.c"
        ],
        "message": "vqavideo: check chunk sizes before reading chunks\n\nFixes out of array writes\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit ab6c9332bfa1e20127a16392a0b85a4aa4840889)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ],
          "candidate": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vqavideo.c||libavcodec/vqavideo.c": [
          "File: libavcodec/vqavideo.c -> libavcodec/vqavideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:         chunk_size = AV_RB32(&s->buf[cbp0_chunk + 4]);",
          "528:         cbp0_chunk += CHUNK_PREAMBLE_SIZE;",
          "531:         memcpy(&s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "532:             &s->buf[cbp0_chunk], chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "531:             av_log(s->avctx, AV_LOG_ERROR, \"cbp0 chunk too large (0x%X bytes)\\n\", chunk_size);",
          "532:             return AVERROR_INVALIDDATA;",
          "533:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "550:         chunk_size = AV_RB32(&s->buf[cbpz_chunk + 4]);",
          "551:         cbpz_chunk += CHUNK_PREAMBLE_SIZE;",
          "554:         memcpy(&s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "555:             &s->buf[cbpz_chunk], chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "559:             av_log(s->avctx, AV_LOG_ERROR, \"cbpz chunk too large (0x%X bytes)\\n\", chunk_size);",
          "560:             return AVERROR_INVALIDDATA;",
          "561:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13093f9767b922661132a3c1f4b5ba2c7338b660",
      "candidate_info": {
        "commit_hash": "13093f9767b922661132a3c1f4b5ba2c7338b660",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/13093f9767b922661132a3c1f4b5ba2c7338b660",
        "files": [
          "libavcodec/vqavideo.c"
        ],
        "message": "vqavideo: check chunk sizes before reading chunks\n\nFixes out of array writes\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit ab6c9332bfa1e20127a16392a0b85a4aa4840889)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ],
          "candidate": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vqavideo.c||libavcodec/vqavideo.c": [
          "File: libavcodec/vqavideo.c -> libavcodec/vqavideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "526:         chunk_size = AV_RB32(&s->buf[cbp0_chunk + 4]);",
          "527:         cbp0_chunk += CHUNK_PREAMBLE_SIZE;",
          "530:         memcpy(&s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "531:             &s->buf[cbp0_chunk], chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "530:             av_log(s->avctx, AV_LOG_ERROR, \"cbp0 chunk too large (0x%X bytes)\\n\", chunk_size);",
          "531:             return AVERROR_INVALIDDATA;",
          "532:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "549:         chunk_size = AV_RB32(&s->buf[cbpz_chunk + 4]);",
          "550:         cbpz_chunk += CHUNK_PREAMBLE_SIZE;",
          "553:         memcpy(&s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "554:             &s->buf[cbpz_chunk], chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "558:             av_log(s->avctx, AV_LOG_ERROR, \"cbpz chunk too large (0x%X bytes)\\n\", chunk_size);",
          "559:             return AVERROR_INVALIDDATA;",
          "560:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab434bf0d051008a329d49d0256faa5d64e2bf4d",
      "candidate_info": {
        "commit_hash": "ab434bf0d051008a329d49d0256faa5d64e2bf4d",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ab434bf0d051008a329d49d0256faa5d64e2bf4d",
        "files": [
          "libavcodec/vqavideo.c"
        ],
        "message": "vqavideo: check chunk sizes before reading chunks\n\nFixes out of array writes\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit ab6c9332bfa1e20127a16392a0b85a4aa4840889)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 13093f9767b922661132a3c1f4b5ba2c7338b660)\n\nCC: libav-stable@libav.org\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>\n(cherry picked from commit f7d18deb73d1dd1b27b2c7062c9a10d168a6c62a)\n\nSigned-off-by: Reinhard Tartler <siretart@tauware.de>",
        "before_after_code_files": [
          "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ],
          "candidate": [
            "libavcodec/vqavideo.c||libavcodec/vqavideo.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/vqavideo.c||libavcodec/vqavideo.c": [
          "File: libavcodec/vqavideo.c -> libavcodec/vqavideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:         bytestream2_seek(&s->gb, cbp0_chunk, SEEK_SET);",
          "533:         chunk_size = bytestream2_get_be32(&s->gb);",
          "536:         bytestream2_get_buffer(&s->gb, &s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "537:                                chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "536:             av_log(s->avctx, AV_LOG_ERROR, \"cbp0 chunk too large (%u bytes)\\n\",",
          "537:                    chunk_size);",
          "538:             return AVERROR_INVALIDDATA;",
          "539:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "555:         bytestream2_seek(&s->gb, cbpz_chunk, SEEK_SET);",
          "556:         chunk_size = bytestream2_get_be32(&s->gb);",
          "559:         bytestream2_get_buffer(&s->gb, &s->next_codebook_buffer[s->next_codebook_buffer_index],",
          "560:                                chunk_size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:         if (chunk_size > MAX_CODEBOOK_SIZE - s->next_codebook_buffer_index) {",
          "565:             av_log(s->avctx, AV_LOG_ERROR, \"cbpz chunk too large (%u bytes)\\n\",",
          "566:                    chunk_size);",
          "567:             return AVERROR_INVALIDDATA;",
          "568:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}