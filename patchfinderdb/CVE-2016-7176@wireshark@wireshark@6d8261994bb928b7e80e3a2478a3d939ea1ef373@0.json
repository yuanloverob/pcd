{
  "cve_id": "CVE-2016-7176",
  "cve_desc": "epan/dissectors/packet-h225.c in the H.225 dissector in Wireshark 2.x before 2.0.6 calls snprintf with one of its input buffers as the output buffer, which allows remote attackers to cause a denial of service (copy overlap and application crash) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "6d8261994bb928b7e80e3a2478a3d939ea1ef373",
  "patch_info": {
    "commit_hash": "6d8261994bb928b7e80e3a2478a3d939ea1ef373",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/6d8261994bb928b7e80e3a2478a3d939ea1ef373",
    "files": [
      "epan/dissectors/asn1/h225/h225.cnf",
      "epan/dissectors/packet-h225.c"
    ],
    "message": "Don't snprintf() into a string with one of the arguments being the same string.\n\nThat doesn't work - you could be writing into the string from which\nyou're reading.\n\nBug: 12700\nChange-Id: I70f3ce6048dea582ec5e08c24c99e9a553b352df\nReviewed-on: https://code.wireshark.org/review/16850\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf",
      "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf": [
      "File: epan/dissectors/asn1/h225/h225.cnf -> epan/dissectors/asn1/h225/h225.cnf",
      "--- Hunk 1 ---",
      "[Context before]",
      "283:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), %(ACTX)s->pinfo, proto_h225, 0);",
      "284:   if (h225_pi != NULL) {",
      "286:     h225_pi->is_faststart = TRUE;",
      "287:   }",
      "288:   contains_faststart = TRUE;",
      "",
      "[Removed Lines]",
      "285:     g_snprintf(h225_pi->frame_label, 50, \"%%s %%s\", h225_pi->frame_label, codec_str);",
      "",
      "[Added Lines]",
      "285:     char temp[50];",
      "286:     g_snprintf(temp, 50, \"%%s %%s\", h225_pi->frame_label, codec_str);",
      "287:     g_strlcpy(h225_pi->frame_label, temp, 50);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "417:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "418:   if (h225_pi != NULL) {",
      "419:     h225_pi->cs_type = H225_PROGRESS;",
      "423:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "424:   }",
      "425: #.END",
      "",
      "[Removed Lines]",
      "420:     if (contains_faststart == TRUE )",
      "421:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "422:     else",
      "",
      "[Added Lines]",
      "422:     if (contains_faststart) {",
      "423:       char temp[50];",
      "424:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "425:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "426:     } else",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "472:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "473:   if (h225_pi != NULL) {",
      "474:     h225_pi->cs_type = H225_SETUP;",
      "478:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "479:   }",
      "480: #.END",
      "",
      "[Removed Lines]",
      "475:     if (contains_faststart == TRUE )",
      "476:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "477:     else",
      "",
      "[Added Lines]",
      "479:     if (contains_faststart) {",
      "480:       char temp[50];",
      "481:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "482:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "483:     } else",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "488:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "489:   if (h225_pi != NULL) {",
      "490:     h225_pi->cs_type = H225_CALL_PROCEDING;",
      "494:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "495:   }",
      "496: #.END",
      "",
      "[Removed Lines]",
      "491:     if (contains_faststart == TRUE )",
      "492:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "493:     else",
      "",
      "[Added Lines]",
      "497:     if (contains_faststart) {",
      "498:       char temp[50];",
      "499:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "500:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "501:     } else",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "504:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "505:   if (h225_pi != NULL) {",
      "506:     h225_pi->cs_type = H225_ALERTING;",
      "510:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "511:   }",
      "512: #.END",
      "",
      "[Removed Lines]",
      "507:     if (contains_faststart == TRUE )",
      "508:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "509:     else",
      "",
      "[Added Lines]",
      "515:     if (contains_faststart) {",
      "516:       char temp[50];",
      "517:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "518:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "519:     } else",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "533:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "534:   if (h225_pi != NULL) {",
      "535:     h225_pi->cs_type = H225_CONNECT;",
      "539:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "540:   }",
      "541: #.END",
      "",
      "[Removed Lines]",
      "536:     if (contains_faststart == TRUE )",
      "537:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "538:     else",
      "",
      "[Added Lines]",
      "546:     if (contains_faststart) {",
      "547:       char temp[50];",
      "548:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "549:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "550:     } else",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c": [
      "File: epan/dissectors/packet-h225.c -> epan/dissectors/packet-h225.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1300: static int",
      "1301: dissect_h225_T_h245Ip(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1303:   tvbuff_t *value_tvb;",
      "1305:   ipv4_address = 0;",
      "",
      "[Removed Lines]",
      "1302: #line 339 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1302: #line 341 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1460: static int",
      "1461: dissect_h225_T_h245Ip6(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1463:   tvbuff_t *value_tvb;",
      "1465:   ipv6_address = ipv6_address_zeros;",
      "",
      "[Removed Lines]",
      "1462: #line 348 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1462: #line 350 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1568: static int",
      "1569: dissect_h225_H221NonStandard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1571:   t35CountryCode = 0;",
      "1572:   t35Extension = 0;",
      "1573:   manufacturerCode = 0;",
      "",
      "[Removed Lines]",
      "1570: #line 790 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1570: #line 802 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1575:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "1576:                                    ett_h225_H221NonStandard, H221NonStandard_sequence);",
      "1579:   h221NonStandard = ((t35CountryCode * 256) + t35Extension) * 65536 + manufacturerCode;",
      "1580:   proto_tree_add_uint(tree, hf_h221Manufacturer, tvb, (offset>>3)-4, 4, h221NonStandard);",
      "",
      "[Removed Lines]",
      "1578: #line 794 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1578: #line 806 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1598: static int",
      "1599: dissect_h225_NonStandardIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1601:   gint32 value;",
      "1603:   nsiOID = \"\";",
      "",
      "[Removed Lines]",
      "1600: #line 771 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1600: #line 783 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1627: static int",
      "1628: dissect_h225_T_nsp_data(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1630:   tvbuff_t *next_tvb = NULL;",
      "1632:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "1629: #line 805 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1629: #line 817 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1650: int",
      "1651: dissect_h225_NonStandardParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1653:   nsp_handle = NULL;",
      "1655:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "1652: #line 803 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1652: #line 815 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1684: static int",
      "1685: dissect_h225_H245TransportAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1687:   h225_packet_info* h225_pi;",
      "1688:   ipv4_address=0;",
      "1689:   ipv6_address = ipv6_address_zeros;",
      "",
      "[Removed Lines]",
      "1686: #line 544 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1686: #line 556 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1694:                                  ett_h225_H245TransportAddress, H245TransportAddress_choice,",
      "1695:                                  NULL);",
      "1699:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "1697: #line 552 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1697: #line 564 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1730: static int",
      "1731: dissect_h225_DialedDigits(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1733:   tvbuff_t *value_tvb = NULL;",
      "1734:   guint len = 0;",
      "1735:   h225_packet_info* h225_pi;",
      "",
      "[Removed Lines]",
      "1732: #line 319 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "1732: #line 321 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2049: static int",
      "2050: dissect_h225_TBCD_STRING(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "2052:   int min_len, max_len;",
      "2053:   gboolean has_extension;",
      "",
      "[Removed Lines]",
      "2051: #line 900 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "2051: #line 912 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2848: int",
      "2849: dissect_h225_TunnelledProtocol(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "2851:   tpOID = \"\";",
      "2853:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "2854:                                    ett_h225_TunnelledProtocol, TunnelledProtocol_sequence);",
      "2857:   tp_handle = dissector_get_string_handle(tp_dissector_table, tpOID);",
      "2859:   return offset;",
      "",
      "[Removed Lines]",
      "2850: #line 748 \"./asn1/h225/h225.cnf\"",
      "2856: #line 750 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "2850: #line 760 \"./asn1/h225/h225.cnf\"",
      "2856: #line 762 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "3032: static int",
      "3033: dissect_h225_T_guid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3035:   tvbuff_t *guid_tvb = NULL;",
      "3037:   actx->value_ptr = &guid_tvb;",
      "",
      "[Removed Lines]",
      "3034: #line 712 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "3034: #line 724 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "3262:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "3263:   if (h225_pi != NULL) {",
      "3265:     h225_pi->is_faststart = TRUE;",
      "3266:   }",
      "3267:   contains_faststart = TRUE;",
      "",
      "[Removed Lines]",
      "3264:     g_snprintf(h225_pi->frame_label, 50, \"%s %s\", h225_pi->frame_label, codec_str);",
      "",
      "[Added Lines]",
      "3264:     char temp[50];",
      "3265:     g_snprintf(temp, 50, \"%s %s\", h225_pi->frame_label, codec_str);",
      "3266:     g_strlcpy(h225_pi->frame_label, temp, 50);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "3838: static int",
      "3839: dissect_h225_T_standard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3841:   guint32 value_int = (guint32)-1;",
      "3842:   gef_ctx_t *gefx;",
      "",
      "[Removed Lines]",
      "3840: #line 862 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "3842: #line 874 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "3856: static int",
      "3857: dissect_h225_T_oid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3859:   const gchar *oid_str = NULL;",
      "3860:   gef_ctx_t *gefx;",
      "",
      "[Removed Lines]",
      "3858: #line 871 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "3860: #line 883 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "3886: int",
      "3887: dissect_h225_GenericIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3889:   gef_ctx_t *gefx;",
      "3890:   proto_item* ti;",
      "",
      "[Removed Lines]",
      "3888: #line 848 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "3890: #line 860 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "3893:                                  ett_h225_GenericIdentifier, GenericIdentifier_choice,",
      "3894:                                  NULL);",
      "3897:   gef_ctx_update_key(gef_ctx_get(actx->private_data));",
      "3898:   gefx = gef_ctx_get(actx->private_data);",
      "3899:   if (gefx) {",
      "",
      "[Removed Lines]",
      "3896: #line 851 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "3898: #line 863 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "3911: static int",
      "3912: dissect_h225_T_raw(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "3914:   tvbuff_t *value_tvb;",
      "3915:   gef_ctx_t *gefx;",
      "3916:   proto_item* ti;",
      "",
      "[Removed Lines]",
      "3913: #line 881 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "3915: #line 893 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "4029: static int",
      "4030: dissect_h225_EnumeratedParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4032:   gef_ctx_t *parent_gefx;",
      "4034:   parent_gefx = gef_ctx_get(actx->private_data);",
      "",
      "[Removed Lines]",
      "4031: #line 830 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4033: #line 842 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "4037:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4038:                                    ett_h225_EnumeratedParameter, EnumeratedParameter_sequence);",
      "4041:   actx->private_data = parent_gefx;",
      "4043:   return offset;",
      "",
      "[Removed Lines]",
      "4040: #line 835 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4042: #line 847 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "4053: int",
      "4054: dissect_h225_GenericData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4056:   void *priv_data = actx->private_data;",
      "4057:   gef_ctx_t *gefx;",
      "",
      "[Removed Lines]",
      "4055: #line 816 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4057: #line 828 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "4066:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4067:                                    ett_h225_GenericData, GenericData_sequence);",
      "4070:   actx->private_data = priv_data;",
      "4072:   return offset;",
      "",
      "[Removed Lines]",
      "4069: #line 826 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4071: #line 838 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "4106: static int",
      "4107: dissect_h225_FeatureDescriptor(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4109:   void *priv_data = actx->private_data;",
      "4110:   actx->private_data = gef_ctx_alloc(NULL, \"FeatureDescriptor\");",
      "4112:   offset = dissect_h225_GenericData(tvb, offset, actx, tree, hf_index);",
      "4115:   actx->private_data = priv_data;",
      "4117:   return offset;",
      "",
      "[Removed Lines]",
      "4108: #line 840 \"./asn1/h225/h225.cnf\"",
      "4114: #line 843 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4110: #line 852 \"./asn1/h225/h225.cnf\"",
      "4116: #line 855 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "4135: static int",
      "4136: dissect_h225_ParallelH245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4138:   tvbuff_t *h245_tvb = NULL;",
      "4140:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "4137: #line 361 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4139: #line 363 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "4285: static int",
      "4286: dissect_h225_Setup_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4288:   h225_packet_info* h225_pi;",
      "4289:   contains_faststart = FALSE;",
      "4291:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4292:                                    ett_h225_Setup_UUIE, Setup_UUIE_sequence);",
      "4296:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4297:   if (h225_pi != NULL) {",
      "4298:     h225_pi->cs_type = H225_SETUP;",
      "4302:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "4303:   }",
      "",
      "[Removed Lines]",
      "4287: #line 466 \"./asn1/h225/h225.cnf\"",
      "4294: #line 471 \"./asn1/h225/h225.cnf\"",
      "4299:     if (contains_faststart == TRUE )",
      "4300:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4301:     else",
      "",
      "[Added Lines]",
      "4289: #line 470 \"./asn1/h225/h225.cnf\"",
      "4296: #line 475 \"./asn1/h225/h225.cnf\"",
      "4301:     if (contains_faststart) {",
      "4302:       char temp[50];",
      "4303:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4304:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "4305:     } else",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "4342: static int",
      "4343: dissect_h225_CallProceeding_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4345:   h225_packet_info* h225_pi;",
      "4347:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4348:                                    ett_h225_CallProceeding_UUIE, CallProceeding_UUIE_sequence);",
      "4352:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4353:   if (h225_pi != NULL) {",
      "4354:     h225_pi->cs_type = H225_CALL_PROCEDING;",
      "4358:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "4359:   }",
      "",
      "[Removed Lines]",
      "4344: #line 483 \"./asn1/h225/h225.cnf\"",
      "4350: #line 487 \"./asn1/h225/h225.cnf\"",
      "4355:     if (contains_faststart == TRUE )",
      "4356:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4357:     else",
      "",
      "[Added Lines]",
      "4348: #line 489 \"./asn1/h225/h225.cnf\"",
      "4354: #line 493 \"./asn1/h225/h225.cnf\"",
      "4359:     if (contains_faststart) {",
      "4360:       char temp[50];",
      "4361:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4362:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "4363:     } else",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "4389: static int",
      "4390: dissect_h225_Connect_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4392:   h225_packet_info* h225_pi;",
      "4394:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4395:                                    ett_h225_Connect_UUIE, Connect_UUIE_sequence);",
      "4399:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4400:   if (h225_pi != NULL) {",
      "4401:     h225_pi->cs_type = H225_CONNECT;",
      "4405:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "4406:   }",
      "",
      "[Removed Lines]",
      "4391: #line 528 \"./asn1/h225/h225.cnf\"",
      "4397: #line 532 \"./asn1/h225/h225.cnf\"",
      "4402:     if (contains_faststart == TRUE )",
      "4403:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4404:     else",
      "",
      "[Added Lines]",
      "4397: #line 538 \"./asn1/h225/h225.cnf\"",
      "4403: #line 542 \"./asn1/h225/h225.cnf\"",
      "4408:     if (contains_faststart) {",
      "4409:       char temp[50];",
      "4410:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4411:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "4412:     } else",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "4434: static int",
      "4435: dissect_h225_Alerting_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4437:   h225_packet_info* h225_pi;",
      "4439:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4440:                                    ett_h225_Alerting_UUIE, Alerting_UUIE_sequence);",
      "4444:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4445:   if (h225_pi != NULL) {",
      "4446:     h225_pi->cs_type = H225_ALERTING;",
      "4450:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "4451:   }",
      "",
      "[Removed Lines]",
      "4436: #line 499 \"./asn1/h225/h225.cnf\"",
      "4442: #line 503 \"./asn1/h225/h225.cnf\"",
      "4447:     if (contains_faststart == TRUE )",
      "4448:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4449:     else",
      "",
      "[Added Lines]",
      "4444: #line 507 \"./asn1/h225/h225.cnf\"",
      "4450: #line 511 \"./asn1/h225/h225.cnf\"",
      "4455:     if (contains_faststart) {",
      "4456:       char temp[50];",
      "4457:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4458:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "4459:     } else",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "4468: static int",
      "4469: dissect_h225_Information_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4471:   h225_packet_info* h225_pi;",
      "4473:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4474:                                    ett_h225_Information_UUIE, Information_UUIE_sequence);",
      "4478:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4479:   if (h225_pi != NULL) {",
      "",
      "[Removed Lines]",
      "4470: #line 399 \"./asn1/h225/h225.cnf\"",
      "4476: #line 403 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4480: #line 401 \"./asn1/h225/h225.cnf\"",
      "4486: #line 405 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "4596: int",
      "4597: dissect_h225_ReleaseCompleteReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4599:   gint32 value;",
      "4600:   h225_packet_info* h225_pi;",
      "4601:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "4598: #line 701 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4608: #line 713 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "4633: static int",
      "4634: dissect_h225_ReleaseComplete_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4636:   h225_packet_info* h225_pi;",
      "4638:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4639:                                    ett_h225_ReleaseComplete_UUIE, ReleaseComplete_UUIE_sequence);",
      "4643:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4644:   if (h225_pi != NULL) {",
      "",
      "[Removed Lines]",
      "4635: #line 515 \"./asn1/h225/h225.cnf\"",
      "4641: #line 519 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4645: #line 525 \"./asn1/h225/h225.cnf\"",
      "4651: #line 529 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "4683: static int",
      "4684: dissect_h225_FacilityReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4686:   gint32 value;",
      "4687:   h225_packet_info* h225_pi;",
      "4688:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "4685: #line 581 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4695: #line 593 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "4757: static int",
      "4758: dissect_h225_Facility_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4760:   h225_packet_info* h225_pi;",
      "4762:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4763:                                    ett_h225_Facility_UUIE, Facility_UUIE_sequence);",
      "4767:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4768:   if (h225_pi != NULL) {",
      "",
      "[Removed Lines]",
      "4759: #line 441 \"./asn1/h225/h225.cnf\"",
      "4765: #line 445 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4769: #line 445 \"./asn1/h225/h225.cnf\"",
      "4775: #line 449 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "4792: static int",
      "4793: dissect_h225_Progress_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4795:   h225_packet_info* h225_pi;",
      "4797:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4798:                                    ett_h225_Progress_UUIE, Progress_UUIE_sequence);",
      "4802:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4803:   if (h225_pi != NULL) {",
      "4804:     h225_pi->cs_type = H225_PROGRESS;",
      "4808:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
      "4809:   }",
      "",
      "[Removed Lines]",
      "4794: #line 412 \"./asn1/h225/h225.cnf\"",
      "4800: #line 416 \"./asn1/h225/h225.cnf\"",
      "4805:     if (contains_faststart == TRUE )",
      "4806:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4807:     else",
      "",
      "[Added Lines]",
      "4804: #line 414 \"./asn1/h225/h225.cnf\"",
      "4810: #line 418 \"./asn1/h225/h225.cnf\"",
      "4815:     if (contains_faststart) {",
      "4816:       char temp[50];",
      "4817:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
      "4818:       g_strlcpy(h225_pi->frame_label, temp, 50);",
      "4819:     } else",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "4816: static int",
      "4817: dissect_h225_T_empty_flg(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4819:   h225_packet_info* h225_pi;",
      "4821:   offset = dissect_per_null(tvb, offset, actx, tree, hf_index);",
      "4824:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4825:   if (h225_pi != NULL) {",
      "4826:     h225_pi->cs_type = H225_EMPTY;",
      "",
      "[Removed Lines]",
      "4818: #line 375 \"./asn1/h225/h225.cnf\"",
      "4823: #line 379 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4830: #line 377 \"./asn1/h225/h225.cnf\"",
      "4835: #line 381 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "4841: static int",
      "4842: dissect_h225_Status_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4844:   h225_packet_info* h225_pi;",
      "4846:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4847:                                    ett_h225_Status_UUIE, Status_UUIE_sequence);",
      "4851:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4852:   if (h225_pi != NULL) {",
      "",
      "[Removed Lines]",
      "4843: #line 386 \"./asn1/h225/h225.cnf\"",
      "4849: #line 390 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4855: #line 388 \"./asn1/h225/h225.cnf\"",
      "4861: #line 392 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "4886: static int",
      "4887: dissect_h225_SetupAcknowledge_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "4889:   h225_packet_info* h225_pi;",
      "4891:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "4892:                                    ett_h225_SetupAcknowledge_UUIE, SetupAcknowledge_UUIE_sequence);",
      "4896:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "4897:   if (h225_pi != NULL) {",
      "",
      "[Removed Lines]",
      "4888: #line 428 \"./asn1/h225/h225.cnf\"",
      "4894: #line 432 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "4900: #line 432 \"./asn1/h225/h225.cnf\"",
      "4906: #line 436 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "5003: static int",
      "5004: dissect_h225_T_h4501SupplementaryService_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "5006:   tvbuff_t *h4501_tvb = NULL;",
      "5008:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "5005: #line 736 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "5017: #line 748 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "5034: static int",
      "5035: dissect_h225_T_h245Tunnelling(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "5037:   h225_packet_info* h225_pi;",
      "5038:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "5039:   if (h225_pi != NULL) {",
      "5041:   offset = dissect_per_boolean(tvb, offset, actx, tree, hf_index, &(h225_pi->is_h245Tunneling));",
      "5044:   }",
      "5046:   return offset;",
      "",
      "[Removed Lines]",
      "5036: #line 454 \"./asn1/h225/h225.cnf\"",
      "5043: #line 462 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "5048: #line 458 \"./asn1/h225/h225.cnf\"",
      "5055: #line 466 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "5051: static int",
      "5052: dissect_h225_H245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "5054:   tvbuff_t *h245_tvb = NULL;",
      "5056:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "5053: #line 368 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "5065: #line 370 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "5108: static int",
      "5109: dissect_h225_T_messageContent_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "5111:   tvbuff_t *next_tvb = NULL;",
      "5113:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "5110: #line 758 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "5122: #line 770 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "5144: static int",
      "5145: dissect_h225_T_tunnelledSignallingMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "5147:   tp_handle = NULL;",
      "5149:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
      "",
      "[Removed Lines]",
      "5146: #line 756 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "5158: #line 768 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "5447: static int",
      "5448: dissect_h225_RequestSeqNum(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "5450:   h225_packet_info* h225_pi;",
      "5451:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "5452:   if (h225_pi != NULL) {",
      "",
      "[Removed Lines]",
      "5449: #line 724 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "5461: #line 736 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "5454:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
      "5455:                                                             1U, 65535U, &(h225_pi->requestSeqNum), FALSE);",
      "5458:   }",
      "5460:   return offset;",
      "",
      "[Removed Lines]",
      "5457: #line 732 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "5469: #line 744 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "6000: static int",
      "6001: dissect_h225_GatekeeperRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6003:   gint32 value;",
      "6004:   h225_packet_info* h225_pi;",
      "6005:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "6002: #line 592 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "6014: #line 604 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "6306: static int",
      "6307: dissect_h225_RegistrationRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6309:   gint32 value;",
      "6310:   h225_packet_info* h225_pi;",
      "6311:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "6308: #line 679 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "6320: #line 691 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "6373: static int",
      "6374: dissect_h225_UnregRequestReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6376:   gint32 value;",
      "6377:   h225_packet_info* h225_pi;",
      "6378:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "6375: #line 603 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "6387: #line 615 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "6462: static int",
      "6463: dissect_h225_UnregRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6465:   gint32 value;",
      "6466:   h225_packet_info* h225_pi;",
      "6467:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "6464: #line 614 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "6476: #line 626 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "6526: static int",
      "6527: dissect_h225_DestinationInfo_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6529:   h225_packet_info* h225_pi;",
      "6531:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "6528: #line 310 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "6540: #line 312 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 51 ---",
      "[Context before]",
      "6738: static int",
      "6739: dissect_h225_AdmissionRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6741:   gint32 value;",
      "6742:   h225_packet_info* h225_pi;",
      "6743:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "6740: #line 657 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "6752: #line 669 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 52 ---",
      "[Context before]",
      "6874: static int",
      "6875: dissect_h225_BandRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6877:   gint32 value;",
      "6878:   h225_packet_info* h225_pi;",
      "6879:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "6876: #line 625 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "6888: #line 637 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 53 ---",
      "[Context before]",
      "6930: static int",
      "6931: dissect_h225_DisengageReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "6933:   gint32 value;",
      "6934:   h225_packet_info* h225_pi;",
      "6935:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "6932: #line 636 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "6944: #line 648 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 54 ---",
      "[Context before]",
      "7021: static int",
      "7022: dissect_h225_DisengageRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "7024:   gint32 value;",
      "7025:   h225_packet_info* h225_pi;",
      "7026:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "7023: #line 646 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "7035: #line 658 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 55 ---",
      "[Context before]",
      "7171: static int",
      "7172: dissect_h225_LocationRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "7174:   gint32 value;",
      "7175:   h225_packet_info* h225_pi;",
      "7176:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "7173: #line 668 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "7185: #line 680 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 56 ---",
      "[Context before]",
      "7546: static int",
      "7547: dissect_h225_InfoRequestNakReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "7549:   gint32 value;",
      "7550:   h225_packet_info* h225_pi;",
      "7551:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
      "",
      "[Removed Lines]",
      "7548: #line 690 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "7560: #line 702 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------",
      "--- Hunk 57 ---",
      "[Context before]",
      "7761: int",
      "7762: dissect_h225_RasMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "7764:     gint32 rasmessage_value;",
      "7765:     h225_packet_info* h225_pi;",
      "",
      "[Removed Lines]",
      "7763: #line 292 \"./asn1/h225/h225.cnf\"",
      "",
      "[Added Lines]",
      "7775: #line 294 \"./asn1/h225/h225.cnf\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8eb7e540eaecb9f4565aa1e6263216717edd8fb6",
      "candidate_info": {
        "commit_hash": "8eb7e540eaecb9f4565aa1e6263216717edd8fb6",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8eb7e540eaecb9f4565aa1e6263216717edd8fb6",
        "files": [
          "epan/dissectors/asn1/h225/h225.cnf",
          "epan/dissectors/packet-h225.c"
        ],
        "message": "Don't snprintf() into a string with one of the arguments being the same string.\n\nThat doesn't work - you could be writing into the string from which\nyou're reading.\n\nBug: 12700\nChange-Id: I70f3ce6048dea582ec5e08c24c99e9a553b352df\nReviewed-on: https://code.wireshark.org/review/16850\nReviewed-by: Guy Harris <guy@alum.mit.edu>\n(cherry picked from commit 6d8261994bb928b7e80e3a2478a3d939ea1ef373)\nReviewed-on: https://code.wireshark.org/review/16851",
        "before_after_code_files": [
          "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf",
          "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf",
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ],
          "candidate": [
            "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf",
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf": [
          "File: epan/dissectors/asn1/h225/h225.cnf -> epan/dissectors/asn1/h225/h225.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), %(ACTX)s->pinfo, proto_h225, 0);",
          "284:   if (h225_pi != NULL) {",
          "286:     h225_pi->is_faststart = TRUE;",
          "287:   }",
          "288:   contains_faststart = TRUE;",
          "",
          "[Removed Lines]",
          "285:     g_snprintf(h225_pi->frame_label, 50, \"%%s %%s\", h225_pi->frame_label, codec_str);",
          "",
          "[Added Lines]",
          "285:     char temp[50];",
          "286:     g_snprintf(temp, 50, \"%%s %%s\", h225_pi->frame_label, codec_str);",
          "287:     g_strlcpy(h225_pi->frame_label, temp, 50);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "418:   if (h225_pi != NULL) {",
          "419:     h225_pi->cs_type = H225_PROGRESS;",
          "423:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "424:   }",
          "425: #.END",
          "",
          "[Removed Lines]",
          "420:     if (contains_faststart == TRUE )",
          "421:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "422:     else",
          "",
          "[Added Lines]",
          "422:     if (contains_faststart) {",
          "423:       char temp[50];",
          "424:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "425:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "426:     } else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "473:   if (h225_pi != NULL) {",
          "474:     h225_pi->cs_type = H225_SETUP;",
          "478:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "479:   }",
          "480: #.END",
          "",
          "[Removed Lines]",
          "475:     if (contains_faststart == TRUE )",
          "476:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "477:     else",
          "",
          "[Added Lines]",
          "479:     if (contains_faststart) {",
          "480:       char temp[50];",
          "481:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "482:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "483:     } else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "488:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "489:   if (h225_pi != NULL) {",
          "490:     h225_pi->cs_type = H225_CALL_PROCEDING;",
          "494:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "495:   }",
          "496: #.END",
          "",
          "[Removed Lines]",
          "491:     if (contains_faststart == TRUE )",
          "492:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "493:     else",
          "",
          "[Added Lines]",
          "497:     if (contains_faststart) {",
          "498:       char temp[50];",
          "499:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "500:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "501:     } else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "504:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "505:   if (h225_pi != NULL) {",
          "506:     h225_pi->cs_type = H225_ALERTING;",
          "510:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "511:   }",
          "512: #.END",
          "",
          "[Removed Lines]",
          "507:     if (contains_faststart == TRUE )",
          "508:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "509:     else",
          "",
          "[Added Lines]",
          "515:     if (contains_faststart) {",
          "516:       char temp[50];",
          "517:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "518:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "519:     } else",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "533:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "534:   if (h225_pi != NULL) {",
          "535:     h225_pi->cs_type = H225_CONNECT;",
          "539:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "540:   }",
          "541: #.END",
          "",
          "[Removed Lines]",
          "536:     if (contains_faststart == TRUE )",
          "537:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "538:     else",
          "",
          "[Added Lines]",
          "546:     if (contains_faststart) {",
          "547:       char temp[50];",
          "548:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "549:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "550:     } else",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c": [
          "File: epan/dissectors/packet-h225.c -> epan/dissectors/packet-h225.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1300: static int",
          "1301: dissect_h225_T_h245Ip(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1303:   tvbuff_t *value_tvb;",
          "1305:   ipv4_address = 0;",
          "",
          "[Removed Lines]",
          "1302: #line 339 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1302: #line 341 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1460: static int",
          "1461: dissect_h225_T_h245Ip6(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1463:   tvbuff_t *value_tvb;",
          "1465:   ipv6_address = ipv6_address_zeros;",
          "",
          "[Removed Lines]",
          "1462: #line 348 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1462: #line 350 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1568: static int",
          "1569: dissect_h225_H221NonStandard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1571:   t35CountryCode = 0;",
          "1572:   t35Extension = 0;",
          "1573:   manufacturerCode = 0;",
          "",
          "[Removed Lines]",
          "1570: #line 790 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1570: #line 802 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1575:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "1576:                                    ett_h225_H221NonStandard, H221NonStandard_sequence);",
          "1579:   h221NonStandard = ((t35CountryCode * 256) + t35Extension) * 65536 + manufacturerCode;",
          "1580:   proto_tree_add_uint(tree, hf_h221Manufacturer, tvb, (offset>>3)-4, 4, h221NonStandard);",
          "",
          "[Removed Lines]",
          "1578: #line 794 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1578: #line 806 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1598: static int",
          "1599: dissect_h225_NonStandardIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1601:   gint32 value;",
          "1603:   nsiOID = \"\";",
          "",
          "[Removed Lines]",
          "1600: #line 771 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1600: #line 783 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1627: static int",
          "1628: dissect_h225_T_nsp_data(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1630:   tvbuff_t *next_tvb = NULL;",
          "1632:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1629: #line 805 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1629: #line 817 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1650: int",
          "1651: dissect_h225_NonStandardParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1653:   nsp_handle = NULL;",
          "1655:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1652: #line 803 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1652: #line 815 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1684: static int",
          "1685: dissect_h225_H245TransportAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1687:   h225_packet_info* h225_pi;",
          "1688:   ipv4_address=0;",
          "1689:   ipv6_address = ipv6_address_zeros;",
          "",
          "[Removed Lines]",
          "1686: #line 544 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1686: #line 556 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1694:                                  ett_h225_H245TransportAddress, H245TransportAddress_choice,",
          "1695:                                  NULL);",
          "1699:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "1697: #line 552 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1697: #line 564 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1730: static int",
          "1731: dissect_h225_DialedDigits(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1733:   tvbuff_t *value_tvb = NULL;",
          "1734:   guint len = 0;",
          "1735:   h225_packet_info* h225_pi;",
          "",
          "[Removed Lines]",
          "1732: #line 319 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1732: #line 321 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2049: static int",
          "2050: dissect_h225_TBCD_STRING(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2052:   int min_len, max_len;",
          "2053:   gboolean has_extension;",
          "",
          "[Removed Lines]",
          "2051: #line 900 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "2051: #line 912 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2848: int",
          "2849: dissect_h225_TunnelledProtocol(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2851:   tpOID = \"\";",
          "2853:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "2854:                                    ett_h225_TunnelledProtocol, TunnelledProtocol_sequence);",
          "2857:   tp_handle = dissector_get_string_handle(tp_dissector_table, tpOID);",
          "2859:   return offset;",
          "",
          "[Removed Lines]",
          "2850: #line 748 \"./asn1/h225/h225.cnf\"",
          "2856: #line 750 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "2850: #line 760 \"./asn1/h225/h225.cnf\"",
          "2856: #line 762 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3032: static int",
          "3033: dissect_h225_T_guid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3035:   tvbuff_t *guid_tvb = NULL;",
          "3037:   actx->value_ptr = &guid_tvb;",
          "",
          "[Removed Lines]",
          "3034: #line 712 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3034: #line 724 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3262:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "3263:   if (h225_pi != NULL) {",
          "3265:     h225_pi->is_faststart = TRUE;",
          "3266:   }",
          "3267:   contains_faststart = TRUE;",
          "",
          "[Removed Lines]",
          "3264:     g_snprintf(h225_pi->frame_label, 50, \"%s %s\", h225_pi->frame_label, codec_str);",
          "",
          "[Added Lines]",
          "3264:     char temp[50];",
          "3265:     g_snprintf(temp, 50, \"%s %s\", h225_pi->frame_label, codec_str);",
          "3266:     g_strlcpy(h225_pi->frame_label, temp, 50);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3838: static int",
          "3839: dissect_h225_T_standard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3841:   guint32 value_int = (guint32)-1;",
          "3842:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "3840: #line 862 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3842: #line 874 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3856: static int",
          "3857: dissect_h225_T_oid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3859:   const gchar *oid_str = NULL;",
          "3860:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "3858: #line 871 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3860: #line 883 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3886: int",
          "3887: dissect_h225_GenericIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3889:   gef_ctx_t *gefx;",
          "3890:   proto_item* ti;",
          "",
          "[Removed Lines]",
          "3888: #line 848 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3890: #line 860 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3893:                                  ett_h225_GenericIdentifier, GenericIdentifier_choice,",
          "3894:                                  NULL);",
          "3897:   gef_ctx_update_key(gef_ctx_get(actx->private_data));",
          "3898:   gefx = gef_ctx_get(actx->private_data);",
          "3899:   if (gefx) {",
          "",
          "[Removed Lines]",
          "3896: #line 851 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3898: #line 863 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3911: static int",
          "3912: dissect_h225_T_raw(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3914:   tvbuff_t *value_tvb;",
          "3915:   gef_ctx_t *gefx;",
          "3916:   proto_item* ti;",
          "",
          "[Removed Lines]",
          "3913: #line 881 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3915: #line 893 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4029: static int",
          "4030: dissect_h225_EnumeratedParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4032:   gef_ctx_t *parent_gefx;",
          "4034:   parent_gefx = gef_ctx_get(actx->private_data);",
          "",
          "[Removed Lines]",
          "4031: #line 830 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4033: #line 842 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4037:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4038:                                    ett_h225_EnumeratedParameter, EnumeratedParameter_sequence);",
          "4041:   actx->private_data = parent_gefx;",
          "4043:   return offset;",
          "",
          "[Removed Lines]",
          "4040: #line 835 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4042: #line 847 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4053: int",
          "4054: dissect_h225_GenericData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4056:   void *priv_data = actx->private_data;",
          "4057:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "4055: #line 816 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4057: #line 828 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4066:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4067:                                    ett_h225_GenericData, GenericData_sequence);",
          "4070:   actx->private_data = priv_data;",
          "4072:   return offset;",
          "",
          "[Removed Lines]",
          "4069: #line 826 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4071: #line 838 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4106: static int",
          "4107: dissect_h225_FeatureDescriptor(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4109:   void *priv_data = actx->private_data;",
          "4110:   actx->private_data = gef_ctx_alloc(NULL, \"FeatureDescriptor\");",
          "4112:   offset = dissect_h225_GenericData(tvb, offset, actx, tree, hf_index);",
          "4115:   actx->private_data = priv_data;",
          "4117:   return offset;",
          "",
          "[Removed Lines]",
          "4108: #line 840 \"./asn1/h225/h225.cnf\"",
          "4114: #line 843 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4110: #line 852 \"./asn1/h225/h225.cnf\"",
          "4116: #line 855 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4135: static int",
          "4136: dissect_h225_ParallelH245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4138:   tvbuff_t *h245_tvb = NULL;",
          "4140:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4137: #line 361 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4139: #line 363 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4285: static int",
          "4286: dissect_h225_Setup_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4288:   h225_packet_info* h225_pi;",
          "4289:   contains_faststart = FALSE;",
          "4291:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4292:                                    ett_h225_Setup_UUIE, Setup_UUIE_sequence);",
          "4296:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4297:   if (h225_pi != NULL) {",
          "4298:     h225_pi->cs_type = H225_SETUP;",
          "4302:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4303:   }",
          "",
          "[Removed Lines]",
          "4287: #line 466 \"./asn1/h225/h225.cnf\"",
          "4294: #line 471 \"./asn1/h225/h225.cnf\"",
          "4299:     if (contains_faststart == TRUE )",
          "4300:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4301:     else",
          "",
          "[Added Lines]",
          "4289: #line 470 \"./asn1/h225/h225.cnf\"",
          "4296: #line 475 \"./asn1/h225/h225.cnf\"",
          "4301:     if (contains_faststart) {",
          "4302:       char temp[50];",
          "4303:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4304:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "4305:     } else",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4342: static int",
          "4343: dissect_h225_CallProceeding_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4345:   h225_packet_info* h225_pi;",
          "4347:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4348:                                    ett_h225_CallProceeding_UUIE, CallProceeding_UUIE_sequence);",
          "4352:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4353:   if (h225_pi != NULL) {",
          "4354:     h225_pi->cs_type = H225_CALL_PROCEDING;",
          "4358:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4359:   }",
          "",
          "[Removed Lines]",
          "4344: #line 483 \"./asn1/h225/h225.cnf\"",
          "4350: #line 487 \"./asn1/h225/h225.cnf\"",
          "4355:     if (contains_faststart == TRUE )",
          "4356:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4357:     else",
          "",
          "[Added Lines]",
          "4348: #line 489 \"./asn1/h225/h225.cnf\"",
          "4354: #line 493 \"./asn1/h225/h225.cnf\"",
          "4359:     if (contains_faststart) {",
          "4360:       char temp[50];",
          "4361:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4362:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "4363:     } else",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4389: static int",
          "4390: dissect_h225_Connect_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4392:   h225_packet_info* h225_pi;",
          "4394:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4395:                                    ett_h225_Connect_UUIE, Connect_UUIE_sequence);",
          "4399:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4400:   if (h225_pi != NULL) {",
          "4401:     h225_pi->cs_type = H225_CONNECT;",
          "4405:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4406:   }",
          "",
          "[Removed Lines]",
          "4391: #line 528 \"./asn1/h225/h225.cnf\"",
          "4397: #line 532 \"./asn1/h225/h225.cnf\"",
          "4402:     if (contains_faststart == TRUE )",
          "4403:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4404:     else",
          "",
          "[Added Lines]",
          "4397: #line 538 \"./asn1/h225/h225.cnf\"",
          "4403: #line 542 \"./asn1/h225/h225.cnf\"",
          "4408:     if (contains_faststart) {",
          "4409:       char temp[50];",
          "4410:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4411:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "4412:     } else",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4434: static int",
          "4435: dissect_h225_Alerting_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4437:   h225_packet_info* h225_pi;",
          "4439:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4440:                                    ett_h225_Alerting_UUIE, Alerting_UUIE_sequence);",
          "4444:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4445:   if (h225_pi != NULL) {",
          "4446:     h225_pi->cs_type = H225_ALERTING;",
          "4450:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4451:   }",
          "",
          "[Removed Lines]",
          "4436: #line 499 \"./asn1/h225/h225.cnf\"",
          "4442: #line 503 \"./asn1/h225/h225.cnf\"",
          "4447:     if (contains_faststart == TRUE )",
          "4448:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4449:     else",
          "",
          "[Added Lines]",
          "4444: #line 507 \"./asn1/h225/h225.cnf\"",
          "4450: #line 511 \"./asn1/h225/h225.cnf\"",
          "4455:     if (contains_faststart) {",
          "4456:       char temp[50];",
          "4457:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4458:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "4459:     } else",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4468: static int",
          "4469: dissect_h225_Information_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4471:   h225_packet_info* h225_pi;",
          "4473:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4474:                                    ett_h225_Information_UUIE, Information_UUIE_sequence);",
          "4478:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4479:   if (h225_pi != NULL) {",
          "",
          "[Removed Lines]",
          "4470: #line 399 \"./asn1/h225/h225.cnf\"",
          "4476: #line 403 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4480: #line 401 \"./asn1/h225/h225.cnf\"",
          "4486: #line 405 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4596: int",
          "4597: dissect_h225_ReleaseCompleteReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4599:   gint32 value;",
          "4600:   h225_packet_info* h225_pi;",
          "4601:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "4598: #line 701 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4608: #line 713 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4633: static int",
          "4634: dissect_h225_ReleaseComplete_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4636:   h225_packet_info* h225_pi;",
          "4638:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4639:                                    ett_h225_ReleaseComplete_UUIE, ReleaseComplete_UUIE_sequence);",
          "4643:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4644:   if (h225_pi != NULL) {",
          "",
          "[Removed Lines]",
          "4635: #line 515 \"./asn1/h225/h225.cnf\"",
          "4641: #line 519 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4645: #line 525 \"./asn1/h225/h225.cnf\"",
          "4651: #line 529 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4683: static int",
          "4684: dissect_h225_FacilityReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4686:   gint32 value;",
          "4687:   h225_packet_info* h225_pi;",
          "4688:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "4685: #line 581 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4695: #line 593 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4757: static int",
          "4758: dissect_h225_Facility_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4760:   h225_packet_info* h225_pi;",
          "4762:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4763:                                    ett_h225_Facility_UUIE, Facility_UUIE_sequence);",
          "4767:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4768:   if (h225_pi != NULL) {",
          "",
          "[Removed Lines]",
          "4759: #line 441 \"./asn1/h225/h225.cnf\"",
          "4765: #line 445 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4769: #line 445 \"./asn1/h225/h225.cnf\"",
          "4775: #line 449 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4792: static int",
          "4793: dissect_h225_Progress_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4795:   h225_packet_info* h225_pi;",
          "4797:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4798:                                    ett_h225_Progress_UUIE, Progress_UUIE_sequence);",
          "4802:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4803:   if (h225_pi != NULL) {",
          "4804:     h225_pi->cs_type = H225_PROGRESS;",
          "4808:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4809:   }",
          "",
          "[Removed Lines]",
          "4794: #line 412 \"./asn1/h225/h225.cnf\"",
          "4800: #line 416 \"./asn1/h225/h225.cnf\"",
          "4805:     if (contains_faststart == TRUE )",
          "4806:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4807:     else",
          "",
          "[Added Lines]",
          "4804: #line 414 \"./asn1/h225/h225.cnf\"",
          "4810: #line 418 \"./asn1/h225/h225.cnf\"",
          "4815:     if (contains_faststart) {",
          "4816:       char temp[50];",
          "4817:       g_snprintf(temp, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4818:       g_strlcpy(h225_pi->frame_label, temp, 50);",
          "4819:     } else",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4816: static int",
          "4817: dissect_h225_T_empty_flg(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4819:   h225_packet_info* h225_pi;",
          "4821:   offset = dissect_per_null(tvb, offset, actx, tree, hf_index);",
          "4824:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4825:   if (h225_pi != NULL) {",
          "4826:     h225_pi->cs_type = H225_EMPTY;",
          "",
          "[Removed Lines]",
          "4818: #line 375 \"./asn1/h225/h225.cnf\"",
          "4823: #line 379 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4830: #line 377 \"./asn1/h225/h225.cnf\"",
          "4835: #line 381 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4841: static int",
          "4842: dissect_h225_Status_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4844:   h225_packet_info* h225_pi;",
          "4846:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4847:                                    ett_h225_Status_UUIE, Status_UUIE_sequence);",
          "4851:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4852:   if (h225_pi != NULL) {",
          "",
          "[Removed Lines]",
          "4843: #line 386 \"./asn1/h225/h225.cnf\"",
          "4849: #line 390 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4855: #line 388 \"./asn1/h225/h225.cnf\"",
          "4861: #line 392 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4886: static int",
          "4887: dissect_h225_SetupAcknowledge_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4889:   h225_packet_info* h225_pi;",
          "4891:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4892:                                    ett_h225_SetupAcknowledge_UUIE, SetupAcknowledge_UUIE_sequence);",
          "4896:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4897:   if (h225_pi != NULL) {",
          "",
          "[Removed Lines]",
          "4888: #line 428 \"./asn1/h225/h225.cnf\"",
          "4894: #line 432 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4900: #line 432 \"./asn1/h225/h225.cnf\"",
          "4906: #line 436 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "5003: static int",
          "5004: dissect_h225_T_h4501SupplementaryService_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5006:   tvbuff_t *h4501_tvb = NULL;",
          "5008:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5005: #line 736 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5017: #line 748 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "5034: static int",
          "5035: dissect_h225_T_h245Tunnelling(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5037:   h225_packet_info* h225_pi;",
          "5038:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "5039:   if (h225_pi != NULL) {",
          "5041:   offset = dissect_per_boolean(tvb, offset, actx, tree, hf_index, &(h225_pi->is_h245Tunneling));",
          "5044:   }",
          "5046:   return offset;",
          "",
          "[Removed Lines]",
          "5036: #line 454 \"./asn1/h225/h225.cnf\"",
          "5043: #line 462 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5048: #line 458 \"./asn1/h225/h225.cnf\"",
          "5055: #line 466 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "5051: static int",
          "5052: dissect_h225_H245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5054:   tvbuff_t *h245_tvb = NULL;",
          "5056:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5053: #line 368 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5065: #line 370 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "5108: static int",
          "5109: dissect_h225_T_messageContent_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5111:   tvbuff_t *next_tvb = NULL;",
          "5113:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5110: #line 758 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5122: #line 770 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "5144: static int",
          "5145: dissect_h225_T_tunnelledSignallingMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5147:   tp_handle = NULL;",
          "5149:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5146: #line 756 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5158: #line 768 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "5447: static int",
          "5448: dissect_h225_RequestSeqNum(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5450:   h225_packet_info* h225_pi;",
          "5451:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "5452:   if (h225_pi != NULL) {",
          "",
          "[Removed Lines]",
          "5449: #line 724 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5461: #line 736 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "5454:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5455:                                                             1U, 65535U, &(h225_pi->requestSeqNum), FALSE);",
          "5458:   }",
          "5460:   return offset;",
          "",
          "[Removed Lines]",
          "5457: #line 732 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5469: #line 744 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "6000: static int",
          "6001: dissect_h225_GatekeeperRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6003:   gint32 value;",
          "6004:   h225_packet_info* h225_pi;",
          "6005:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "6002: #line 592 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6014: #line 604 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "6306: static int",
          "6307: dissect_h225_RegistrationRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6309:   gint32 value;",
          "6310:   h225_packet_info* h225_pi;",
          "6311:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "6308: #line 679 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6320: #line 691 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "6373: static int",
          "6374: dissect_h225_UnregRequestReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6376:   gint32 value;",
          "6377:   h225_packet_info* h225_pi;",
          "6378:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "6375: #line 603 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6387: #line 615 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "6462: static int",
          "6463: dissect_h225_UnregRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6465:   gint32 value;",
          "6466:   h225_packet_info* h225_pi;",
          "6467:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "6464: #line 614 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6476: #line 626 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "6526: static int",
          "6527: dissect_h225_DestinationInfo_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6529:   h225_packet_info* h225_pi;",
          "6531:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "6528: #line 310 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6540: #line 312 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "6738: static int",
          "6739: dissect_h225_AdmissionRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6741:   gint32 value;",
          "6742:   h225_packet_info* h225_pi;",
          "6743:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "6740: #line 657 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6752: #line 669 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "6874: static int",
          "6875: dissect_h225_BandRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6877:   gint32 value;",
          "6878:   h225_packet_info* h225_pi;",
          "6879:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "6876: #line 625 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6888: #line 637 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "6930: static int",
          "6931: dissect_h225_DisengageReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6933:   gint32 value;",
          "6934:   h225_packet_info* h225_pi;",
          "6935:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "6932: #line 636 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6944: #line 648 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "7021: static int",
          "7022: dissect_h225_DisengageRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7024:   gint32 value;",
          "7025:   h225_packet_info* h225_pi;",
          "7026:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "7023: #line 646 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "7035: #line 658 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "7171: static int",
          "7172: dissect_h225_LocationRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7174:   gint32 value;",
          "7175:   h225_packet_info* h225_pi;",
          "7176:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "7173: #line 668 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "7185: #line 680 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "7546: static int",
          "7547: dissect_h225_InfoRequestNakReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7549:   gint32 value;",
          "7550:   h225_packet_info* h225_pi;",
          "7551:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "[Removed Lines]",
          "7548: #line 690 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "7560: #line 702 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "7761: int",
          "7762: dissect_h225_RasMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7764:     gint32 rasmessage_value;",
          "7765:     h225_packet_info* h225_pi;",
          "",
          "[Removed Lines]",
          "7763: #line 292 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "7775: #line 294 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0eeeab7c5ed269be238d9faebfba85c0c84b1f4b",
      "candidate_info": {
        "commit_hash": "0eeeab7c5ed269be238d9faebfba85c0c84b1f4b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/0eeeab7c5ed269be238d9faebfba85c0c84b1f4b",
        "files": [
          "asn1/h225/h225.cnf",
          "asn1/h225/packet-h225-template.c",
          "asn1/h245/h245.cnf",
          "epan/dissectors/packet-h225.c",
          "epan/dissectors/packet-h245.c"
        ],
        "message": "H225, H245 over IPv6\n\nThis commit extends h225 and h245 dissectors to support dissection\nof ipv6 packets.\n\nChange-Id: Id8c045344711a96f15d619ddd72065aa3712c429\nReviewed-on: https://code.wireshark.org/review/10799\nReviewed-by: Tom\u00e1\u0161 Kukosa <tomas.kukosa@unify.com>\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "asn1/h225/h225.cnf||asn1/h225/h225.cnf",
          "asn1/h225/packet-h225-template.c||asn1/h225/packet-h225-template.c",
          "asn1/h245/h245.cnf||asn1/h245/h245.cnf",
          "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c",
          "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ],
          "candidate": [
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/h225/h225.cnf||asn1/h225/h225.cnf": [
          "File: asn1/h225/h225.cnf -> asn1/h225/h225.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:     ipv4_address = tvb_get_ipv4(value_tvb, 0);",
          "328: #.END",
          "329: #----------------------------------------------------------------------------------------",
          "331: #----------------------------------------------------------------------------------------",
          "332: #.FN_BODY ParallelH245Control/_item  VAL_PTR = &h245_tvb",
          "333:   tvbuff_t *h245_tvb = NULL;",
          "",
          "[Removed Lines]",
          "330: #.FN_PARS H245TransportAddress/ipAddress/port  VAL_PTR = &ipv4_port",
          "",
          "[Added Lines]",
          "330: #.FN_BODY H245TransportAddress/ip6Address/ip  VAL_PTR = &value_tvb",
          "331:   tvbuff_t *value_tvb;",
          "333:   ipv6_address = ipv6_address_zeros;",
          "334: %(DEFAULT_BODY)s",
          "335:   if (value_tvb)",
          "336:     tvb_get_ipv6(value_tvb, 0, &ipv6_address);",
          "337: #.END",
          "338: #----------------------------------------------------------------------------------------",
          "339: #.FN_PARS H245TransportAddress/ipAddress/port  VAL_PTR = &ip_port",
          "340: #----------------------------------------------------------------------------------------",
          "341: #.FN_PARS H245TransportAddress/ip6Address/port  VAL_PTR = &ip_port",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430: #----------------------------------------------------------------------------------------",
          "431: #.FN_HDR H245TransportAddress",
          "432:   ipv4_address=0;",
          "435: #.END",
          "436: #----------------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "433:   ipv4_port=0;",
          "",
          "[Added Lines]",
          "444:   ipv6_address = ipv6_address_zeros;",
          "445:   ip_port=0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "439:   h225_pi->is_h245 = TRUE;",
          "440:   h225_pi->h245_address = ipv4_address;",
          "444:     address src_addr;",
          "445:     conversation_t *conv=NULL;",
          "450:     if(!conv){",
          "452:       conversation_set_dissector(conv, h245_handle);",
          "453:     }",
          "454:   }",
          "456: #.END",
          "457: #----------------------------------------------------------------------------------------",
          "458: #.FN_BODY FacilityReason  VAL_PTR = &value",
          "",
          "[Removed Lines]",
          "441:   h225_pi->h245_port = ipv4_port;",
          "443:   if((!actx->pinfo->fd->flags.visited) && ipv4_address!=0 && ipv4_port!=0 && h245_handle){",
          "447:     SET_ADDRESS(&src_addr, AT_IPv4, 4, &ipv4_address);",
          "449:     conv=find_conversation(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR_B|NO_PORT_B);",
          "451:       conv=conversation_new(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR2|NO_PORT2);",
          "",
          "[Added Lines]",
          "453:   h225_pi->h245_port = ip_port;",
          "455:   if ( !actx->pinfo->fd->flags.visited && h245_handle && ip_port!=0 ) {",
          "459:     if (ipv4_address!=0) {",
          "460:       SET_ADDRESS(&src_addr, AT_IPv4, 4, &ipv4_address);",
          "461:     } else if (memcmp(ipv6_address.bytes, ipv6_address_zeros.bytes, sizeof(ipv6_address.bytes))!=0) {",
          "462:       SET_ADDRESS(&src_addr, AT_IPv6, 16, ipv6_address.bytes);",
          "463:     } else {",
          "464:       return offset;",
          "465:     }",
          "467:     conv=find_conversation(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ip_port, ip_port, NO_ADDR_B|NO_PORT_B);",
          "469:       conv=conversation_new(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ip_port, ip_port, NO_ADDR2|NO_PORT2);",
          "",
          "---------------"
        ],
        "asn1/h225/packet-h225-template.c||asn1/h225/packet-h225-template.c": [
          "File: asn1/h225/packet-h225-template.c -> asn1/h225/packet-h225-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: static gboolean h225_tp_in_tree = TRUE;",
          "146: static gboolean contains_faststart = FALSE;",
          "147: static e_guid_t *call_id_guid;",
          "",
          "[Removed Lines]",
          "144: static guint32  ipv4_address;",
          "145: static guint32  ipv4_port;",
          "",
          "[Added Lines]",
          "143: static guint32 ipv4_address;",
          "144: static struct e_in6_addr ipv6_address;",
          "145: static struct e_in6_addr ipv6_address_zeros = {{0}};",
          "146: static guint32 ip_port;",
          "",
          "---------------"
        ],
        "asn1/h245/h245.cnf||asn1/h245/h245.cnf": [
          "File: asn1/h245/h245.cnf -> asn1/h245/h245.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "855: #.FN_BODY UnicastAddress/iPAddress/tsapIdentifier  VAL_PTR = &tsapIdentifier",
          "856:   guint32 tsapIdentifier;",
          "858: %(DEFAULT_BODY)s",
          "860:   if (upcoming_channel && upcoming_channel->upcoming_addr) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858: %(DEFAULT_BODY)s",
          "860:   if (upcoming_channel && upcoming_channel->upcoming_addr) {",
          "861:     upcoming_channel->upcoming_addr->port = tsapIdentifier;",
          "862:   }",
          "863: #.END",
          "864: #----------------------------------------------------------------------------------------",
          "865: #.FN_BODY UnicastAddress/iP6Address/network  VAL_PTR = &value_tvb",
          "866:   tvbuff_t *value_tvb;",
          "868: %(DEFAULT_BODY)s",
          "870:   if (upcoming_channel && upcoming_channel->upcoming_addr) {",
          "871:     tvb_memcpy(value_tvb, upcoming_channel->upcoming_addr->addr_buf, 0, 16);",
          "872:     SET_ADDRESS(&upcoming_channel->upcoming_addr->addr, AT_IPv6, 16, upcoming_channel->upcoming_addr->addr_buf);",
          "873:   }",
          "874: #.END",
          "875: #----------------------------------------------------------------------------------------",
          "876: #.FN_BODY UnicastAddress/iP6Address/tsapIdentifier  VAL_PTR = &tsapIdentifier",
          "877:   guint32 tsapIdentifier;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c": [
          "File: epan/dissectors/packet-h225.c -> epan/dissectors/packet-h225.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "917: static gint ett_h225 = -1;",
          "",
          "[Removed Lines]",
          "914: #line 132 \"../../asn1/h225/packet-h225-template.c\"",
          "",
          "[Added Lines]",
          "914: #line 131 \"../../asn1/h225/packet-h225-template.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1159: static gint ett_h225_T_result = -1;",
          "1165: static guint h225_tls_port = TLS_PORT_CS;",
          "",
          "[Removed Lines]",
          "1162: #line 136 \"../../asn1/h225/packet-h225-template.c\"",
          "",
          "[Added Lines]",
          "1162: #line 135 \"../../asn1/h225/packet-h225-template.c\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1168: static gboolean h225_tp_in_tree = TRUE;",
          "1173: static gboolean contains_faststart = FALSE;",
          "1174: static e_guid_t *call_id_guid;",
          "",
          "[Removed Lines]",
          "1171: static guint32  ipv4_address;",
          "1172: static guint32  ipv4_port;",
          "",
          "[Added Lines]",
          "1171: static guint32 ipv4_address;",
          "1172: static struct e_in6_addr ipv6_address;",
          "1173: static struct e_in6_addr ipv6_address_zeros = {{0}};",
          "1174: static guint32 ip_port;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1317: static int",
          "1318: dissect_h225_T_h245IpPort(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1319:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "1322:   return offset;",
          "1323: }",
          "",
          "[Removed Lines]",
          "1320:                                                             0U, 65535U, &ipv4_port, FALSE);",
          "",
          "[Added Lines]",
          "1322:                                                             0U, 65535U, &ip_port, FALSE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1459: static int",
          "1461:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "1464:   return offset;",
          "1465: }",
          "1468: static const per_sequence_t T_h245Ip6Address_sequence[] = {",
          "1471:   { NULL, 0, 0, NULL }",
          "1472: };",
          "",
          "[Removed Lines]",
          "1460: dissect_h225_OCTET_STRING_SIZE_16(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1462:                                        16, 16, FALSE, NULL);",
          "1469:   { &hf_h225_h245Ip6        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_h225_OCTET_STRING_SIZE_16 },",
          "1470:   { &hf_h225_port           , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_h225_INTEGER_0_65535 },",
          "",
          "[Added Lines]",
          "1462: dissect_h225_T_h245Ip6(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1463: #line 331 \"../../asn1/h225/h225.cnf\"",
          "1464:   tvbuff_t *value_tvb;",
          "1466:   ipv6_address = ipv6_address_zeros;",
          "1468:                                        16, 16, FALSE, &value_tvb);",
          "1470:   if (value_tvb)",
          "1471:     tvb_get_ipv6(value_tvb, 0, &ipv6_address);",
          "1474:   return offset;",
          "1475: }",
          "1479: static int",
          "1480: dissect_h225_T_port(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1481:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "1482:                                                             0U, 65535U, &ip_port, FALSE);",
          "1489:   { &hf_h225_h245Ip6        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_h225_T_h245Ip6 },",
          "1490:   { &hf_h225_port_01        , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_h225_T_port },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1484: static int",
          "1485: dissect_h225_OCTET_STRING_SIZE_1_20(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1486:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1504: static int",
          "1505: dissect_h225_OCTET_STRING_SIZE_16(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1506:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "1507:                                        16, 16, FALSE, NULL);",
          "1509:   return offset;",
          "1510: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1539: static int",
          "1540: dissect_h225_H221NonStandard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1542:   t35CountryCode = 0;",
          "1543:   t35Extension = 0;",
          "1544:   manufacturerCode = 0;",
          "",
          "[Removed Lines]",
          "1541: #line 610 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1571: #line 627 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1546:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "1547:                                    ett_h225_H221NonStandard, H221NonStandard_sequence);",
          "1550:   h221NonStandard = ((t35CountryCode * 256) + t35Extension) * 65536 + manufacturerCode;",
          "1551:   proto_tree_add_uint(tree, hf_h221Manufacturer, tvb, (offset>>3)-4, 4, h221NonStandard);",
          "",
          "[Removed Lines]",
          "1549: #line 614 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1579: #line 631 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1569: static int",
          "1570: dissect_h225_NonStandardIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1572:   gint32 value;",
          "1574:   nsiOID = \"\";",
          "",
          "[Removed Lines]",
          "1571: #line 591 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1601: #line 608 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1598: static int",
          "1599: dissect_h225_T_nsp_data(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1601:   tvbuff_t *next_tvb = NULL;",
          "1603:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1600: #line 625 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1630: #line 642 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1621: int",
          "1622: dissect_h225_NonStandardParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1624:   nsp_handle = NULL;",
          "1626:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1623: #line 623 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1653: #line 640 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1655: static int",
          "1656: dissect_h225_H245TransportAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1658:   ipv4_address=0;",
          "1662:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "1663:                                  ett_h225_H245TransportAddress, H245TransportAddress_choice,",
          "1664:                                  NULL);",
          "1668:   h225_pi->is_h245 = TRUE;",
          "1669:   h225_pi->h245_address = ipv4_address;",
          "1673:     address src_addr;",
          "1674:     conversation_t *conv=NULL;",
          "1679:     if(!conv){",
          "1681:       conversation_set_dissector(conv, h245_handle);",
          "1682:     }",
          "1683:   }",
          "1686:   return offset;",
          "1687: }",
          "",
          "[Removed Lines]",
          "1657: #line 432 \"../../asn1/h225/h225.cnf\"",
          "1659:   ipv4_port=0;",
          "1666: #line 438 \"../../asn1/h225/h225.cnf\"",
          "1670:   h225_pi->h245_port = ipv4_port;",
          "1672:   if((!actx->pinfo->fd->flags.visited) && ipv4_address!=0 && ipv4_port!=0 && h245_handle){",
          "1676:     SET_ADDRESS(&src_addr, AT_IPv4, 4, &ipv4_address);",
          "1678:     conv=find_conversation(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR_B|NO_PORT_B);",
          "1680:       conv=conversation_new(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR2|NO_PORT2);",
          "",
          "[Added Lines]",
          "1687: #line 443 \"../../asn1/h225/h225.cnf\"",
          "1689:   ipv6_address = ipv6_address_zeros;",
          "1690:   ip_port=0;",
          "1697: #line 450 \"../../asn1/h225/h225.cnf\"",
          "1701:   h225_pi->h245_port = ip_port;",
          "1703:   if ( !actx->pinfo->fd->flags.visited && h245_handle && ip_port!=0 ) {",
          "1707:     if (ipv4_address!=0) {",
          "1708:       SET_ADDRESS(&src_addr, AT_IPv4, 4, &ipv4_address);",
          "1709:     } else if (memcmp(ipv6_address.bytes, ipv6_address_zeros.bytes, sizeof(ipv6_address.bytes))!=0) {",
          "1710:       SET_ADDRESS(&src_addr, AT_IPv6, 16, ipv6_address.bytes);",
          "1711:     } else {",
          "1712:       return offset;",
          "1713:     }",
          "1715:     conv=find_conversation(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ip_port, ip_port, NO_ADDR_B|NO_PORT_B);",
          "1717:       conv=conversation_new(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ip_port, ip_port, NO_ADDR2|NO_PORT2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2008: static int",
          "2009: dissect_h225_TBCD_STRING(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2011:   int min_len, max_len;",
          "2012:   gboolean has_extension;",
          "",
          "[Removed Lines]",
          "2010: #line 720 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "2046: #line 737 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2807: int",
          "2808: dissect_h225_TunnelledProtocol(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2810:   tpOID = \"\";",
          "2812:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "2813:                                    ett_h225_TunnelledProtocol, TunnelledProtocol_sequence);",
          "2816:   tp_handle = dissector_get_string_handle(tp_dissector_table, tpOID);",
          "2818:   return offset;",
          "",
          "[Removed Lines]",
          "2809: #line 568 \"../../asn1/h225/h225.cnf\"",
          "2815: #line 570 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "2845: #line 585 \"../../asn1/h225/h225.cnf\"",
          "2851: #line 587 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2991: static int",
          "2992: dissect_h225_T_guid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2994:   tvbuff_t *guid_tvb = NULL;",
          "2996:   actx->value_ptr = &guid_tvb;",
          "",
          "[Removed Lines]",
          "2993: #line 542 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3029: #line 559 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3794: static int",
          "3795: dissect_h225_T_standard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3797:   guint32 value_int = (guint32)-1;",
          "3798:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "3796: #line 682 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3832: #line 699 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3812: static int",
          "3813: dissect_h225_T_oid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3815:   const gchar *oid_str = NULL;",
          "3816:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "3814: #line 691 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3850: #line 708 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3842: int",
          "3843: dissect_h225_GenericIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3845:   gef_ctx_t *gefx;",
          "3846:   proto_item* ti;",
          "",
          "[Removed Lines]",
          "3844: #line 668 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3880: #line 685 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3849:                                  ett_h225_GenericIdentifier, GenericIdentifier_choice,",
          "3850:                                  NULL);",
          "3853:   gef_ctx_update_key(gef_ctx_get(actx->private_data));",
          "3854:   gefx = gef_ctx_get(actx->private_data);",
          "3855:   if (gefx) {",
          "",
          "[Removed Lines]",
          "3852: #line 671 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3888: #line 688 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3867: static int",
          "3868: dissect_h225_T_raw(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3870:   tvbuff_t *value_tvb;",
          "3871:   gef_ctx_t *gefx;",
          "3872:   proto_item* ti;",
          "",
          "[Removed Lines]",
          "3869: #line 701 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3905: #line 718 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3985: static int",
          "3986: dissect_h225_EnumeratedParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3988:   gef_ctx_t *parent_gefx;",
          "3990:   parent_gefx = gef_ctx_get(actx->private_data);",
          "",
          "[Removed Lines]",
          "3987: #line 650 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4023: #line 667 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3993:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "3994:                                    ett_h225_EnumeratedParameter, EnumeratedParameter_sequence);",
          "3997:   actx->private_data = parent_gefx;",
          "3999:   return offset;",
          "",
          "[Removed Lines]",
          "3996: #line 655 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4032: #line 672 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4009: int",
          "4010: dissect_h225_GenericData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4012:   void *priv_data = actx->private_data;",
          "4013:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "4011: #line 636 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4047: #line 653 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4022:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4023:                                    ett_h225_GenericData, GenericData_sequence);",
          "4026:   actx->private_data = priv_data;",
          "4028:   return offset;",
          "",
          "[Removed Lines]",
          "4025: #line 646 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4061: #line 663 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4062: static int",
          "4063: dissect_h225_FeatureDescriptor(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4065:   void *priv_data = actx->private_data;",
          "4066:   actx->private_data = gef_ctx_alloc(NULL, \"FeatureDescriptor\");",
          "4068:   offset = dissect_h225_GenericData(tvb, offset, actx, tree, hf_index);",
          "4071:   actx->private_data = priv_data;",
          "4073:   return offset;",
          "",
          "[Removed Lines]",
          "4064: #line 660 \"../../asn1/h225/h225.cnf\"",
          "4070: #line 663 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4100: #line 677 \"../../asn1/h225/h225.cnf\"",
          "4106: #line 680 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4091: static int",
          "4092: dissect_h225_ParallelH245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4094:   tvbuff_t *h245_tvb = NULL;",
          "4096:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4093: #line 333 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4129: #line 344 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4241: static int",
          "4242: dissect_h225_Setup_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4244:   contains_faststart = FALSE;",
          "4246:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4247:                                    ett_h225_Setup_UUIE, Setup_UUIE_sequence);",
          "4251:   h225_pi->cs_type = H225_SETUP;",
          "4252:   if (contains_faststart == TRUE )",
          "",
          "[Removed Lines]",
          "4243: #line 386 \"../../asn1/h225/h225.cnf\"",
          "4249: #line 390 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4279: #line 397 \"../../asn1/h225/h225.cnf\"",
          "4285: #line 401 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4296:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4297:                                    ett_h225_CallProceeding_UUIE, CallProceeding_UUIE_sequence);",
          "4301:   h225_pi->cs_type = H225_CALL_PROCEDING;",
          "4302:   if (contains_faststart == TRUE )",
          "",
          "[Removed Lines]",
          "4299: #line 399 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4335: #line 410 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4337:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4338:                                    ett_h225_Connect_UUIE, Connect_UUIE_sequence);",
          "4342:   h225_pi->cs_type = H225_CONNECT;",
          "4343:   if (contains_faststart == TRUE )",
          "",
          "[Removed Lines]",
          "4340: #line 423 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4376: #line 434 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4376:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4377:                                    ett_h225_Alerting_UUIE, Alerting_UUIE_sequence);",
          "4381:   h225_pi->cs_type = H225_ALERTING;",
          "4382:   if (contains_faststart == TRUE )",
          "",
          "[Removed Lines]",
          "4379: #line 408 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4415: #line 419 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4404:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4405:                                    ett_h225_Information_UUIE, Information_UUIE_sequence);",
          "4409:   h225_pi->cs_type = H225_INFORMATION;",
          "4410:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Removed Lines]",
          "4407: #line 357 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4443: #line 368 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4524: int",
          "4525: dissect_h225_ReleaseCompleteReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4527:   gint32 value;",
          "4529:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4526: #line 535 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4562: #line 552 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4559:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4560:                                    ett_h225_ReleaseComplete_UUIE, ReleaseComplete_UUIE_sequence);",
          "4564:   h225_pi->cs_type = H225_RELEASE_COMPLET;",
          "4565:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Removed Lines]",
          "4562: #line 417 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4598: #line 428 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4601: static int",
          "4602: dissect_h225_FacilityReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4604:   gint32 value;",
          "4606:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4603: #line 459 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4639: #line 476 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4673:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4674:                                    ett_h225_Facility_UUIE, Facility_UUIE_sequence);",
          "4678:   h225_pi->cs_type = H225_FACILITY;",
          "4679:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Removed Lines]",
          "4676: #line 378 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4712: #line 389 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4702:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4703:                                    ett_h225_Progress_UUIE, Progress_UUIE_sequence);",
          "4707:   h225_pi->cs_type = H225_PROGRESS;",
          "4708:   if (contains_faststart == TRUE )",
          "",
          "[Removed Lines]",
          "4705: #line 363 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4741: #line 374 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4719: dissect_h225_T_empty_flg(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4720:   offset = dissect_per_null(tvb, offset, actx, tree, hf_index);",
          "4723:   h225_pi->cs_type = H225_EMPTY;",
          "4725:   return offset;",
          "",
          "[Removed Lines]",
          "4722: #line 347 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4758: #line 358 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4739:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4740:                                    ett_h225_Status_UUIE, Status_UUIE_sequence);",
          "4744:   h225_pi->cs_type = H225_STATUS;",
          "4745:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Removed Lines]",
          "4742: #line 351 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4778: #line 362 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "4778:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4779:                                    ett_h225_SetupAcknowledge_UUIE, SetupAcknowledge_UUIE_sequence);",
          "4783:   h225_pi->cs_type = H225_SETUP_ACK;",
          "4784:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Removed Lines]",
          "4781: #line 372 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4817: #line 383 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "4883: static int",
          "4884: dissect_h225_T_h4501SupplementaryService_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4886:   tvbuff_t *h4501_tvb = NULL;",
          "4888:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4885: #line 556 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4921: #line 573 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "4923: static int",
          "4924: dissect_h225_H245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4926:   tvbuff_t *h245_tvb = NULL;",
          "4928:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4925: #line 340 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4961: #line 351 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4980: static int",
          "4981: dissect_h225_T_messageContent_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4983:   tvbuff_t *next_tvb = NULL;",
          "4985:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4982: #line 578 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5018: #line 595 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "5016: static int",
          "5017: dissect_h225_T_tunnelledSignallingMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5019:   tp_handle = NULL;",
          "5021:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5018: #line 576 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5054: #line 593 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "5864: static int",
          "5865: dissect_h225_GatekeeperRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5867:   gint32 value;",
          "5869:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5866: #line 466 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5902: #line 483 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "6166: static int",
          "6167: dissect_h225_RegistrationRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6169:   gint32 value;",
          "6171:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6168: #line 521 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6204: #line 538 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "6229: static int",
          "6230: dissect_h225_UnregRequestReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6232:   gint32 value;",
          "6234:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6231: #line 473 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6267: #line 490 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "6314: static int",
          "6315: dissect_h225_UnregRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6317:   gint32 value;",
          "6319:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6316: #line 480 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6352: #line 497 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "6582: static int",
          "6583: dissect_h225_AdmissionRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6585:   gint32 value;",
          "6587:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6584: #line 507 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6620: #line 524 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "6714: static int",
          "6715: dissect_h225_BandRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6717:   gint32 value;",
          "6719:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6716: #line 487 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6752: #line 504 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "6766: static int",
          "6767: dissect_h225_DisengageReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6769:   gint32 value;",
          "6771:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6768: #line 494 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6804: #line 511 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "6853: static int",
          "6854: dissect_h225_DisengageRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6856:   gint32 value;",
          "6858:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "6855: #line 500 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "6891: #line 517 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "6999: static int",
          "7000: dissect_h225_LocationRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7002:   gint32 value;",
          "7004:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "7001: #line 514 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "7037: #line 531 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "7370: static int",
          "7371: dissect_h225_InfoRequestNakReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7373:   gint32 value;",
          "7375:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "7372: #line 528 \"../../asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "7408: #line 545 \"../../asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "7636: void proto_reg_handoff_h225(void);",
          "",
          "[Removed Lines]",
          "7632: #line 250 \"../../asn1/h225/packet-h225-template.c\"",
          "",
          "[Added Lines]",
          "7668: #line 251 \"../../asn1/h225/packet-h225-template.c\"",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "9013:     { &hf_h225_h245Ip6,",
          "9014:       { \"ip\", \"h225.ip\",",
          "9015:         FT_IPv6, BASE_NONE, NULL, 0,",
          "9017:     { &hf_h225_netBios,",
          "9018:       { \"netBios\", \"h225.netBios\",",
          "9019:         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "9016:         \"OCTET_STRING_SIZE_16\", HFILL }},",
          "",
          "[Added Lines]",
          "9051:         \"T_h245Ip6\", HFILL }},",
          "9052:     { &hf_h225_port_01,",
          "9053:       { \"port\", \"h225.port\",",
          "9054:         FT_UINT32, BASE_DEC, NULL, 0,",
          "9055:         NULL, HFILL }},",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h245.c||epan/dissectors/packet-h245.c": [
          "File: epan/dissectors/packet-h245.c -> epan/dissectors/packet-h245.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2531: static int",
          "2532: dissect_h245_H221NonStandardID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2534:   t35CountryCode = 0;",
          "2535:   t35Extension = 0;",
          "2536:   manufacturerCode = 0;",
          "",
          "[Removed Lines]",
          "2533: #line 945 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "2533: #line 966 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2538:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "2539:                                    ett_h245_H221NonStandardID, H221NonStandardID_sequence);",
          "2542:   h221NonStandard = ((t35CountryCode * 256) + t35Extension) * 65536 + manufacturerCode;",
          "2543:   proto_tree_add_uint(tree, hf_h245Manufacturer, tvb, (offset>>3)-4, 4, h221NonStandard);",
          "",
          "[Removed Lines]",
          "2541: #line 949 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "2541: #line 970 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2561: static int",
          "2562: dissect_h245_NonStandardIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2564:  gint32 value;",
          "2566:  nsiOID = \"\";",
          "",
          "[Removed Lines]",
          "2563: #line 926 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "2563: #line 947 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2590: static int",
          "2591: dissect_h245_T_nsd_data(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2593:   tvbuff_t *next_tvb = NULL;",
          "2595:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "2592: #line 960 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "2592: #line 981 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2613: static int",
          "2614: dissect_h245_NonStandardParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2616:   nsp_handle = NULL;",
          "2618:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "2615: #line 958 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "2615: #line 979 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4258: static int",
          "4259: dissect_h245_T_rtpPayloadType(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4261:   unsigned int pt;",
          "4263:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4260: #line 911 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "4260: #line 932 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4282: static int",
          "4283: dissect_h245_RTPPayloadType(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4285:   rfc_number = 0;",
          "4287:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4284: #line 903 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "4284: #line 924 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7269: static int",
          "7270: dissect_h245_DataType(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7272: gint choice_index;",
          "7274:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "7271: #line 986 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "7271: #line 1007 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8103: }",
          "8106: static const per_sequence_t T_iP6Address_sequence[] = {",
          "8109:   { NULL, 0, 0, NULL }",
          "8110: };",
          "",
          "[Removed Lines]",
          "8107:   { &hf_h245_ip6_network    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_h245_OCTET_STRING_SIZE_16 },",
          "8108:   { &hf_h245_ipv6_tsapIdentifier, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_h245_INTEGER_0_65535 },",
          "",
          "[Added Lines]",
          "8107: static int",
          "8108: dissect_h245_T_ip6_network(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8109: #line 866 \"../../asn1/h245/h245.cnf\"",
          "8110:   tvbuff_t *value_tvb;",
          "8112:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "8113:                                        16, 16, FALSE, &value_tvb);",
          "8116:   if (upcoming_channel && upcoming_channel->upcoming_addr) {",
          "8117:     tvb_memcpy(value_tvb, upcoming_channel->upcoming_addr->addr_buf, 0, 16);",
          "8118:     SET_ADDRESS(&upcoming_channel->upcoming_addr->addr, AT_IPv6, 16, upcoming_channel->upcoming_addr->addr_buf);",
          "8119:   }",
          "8122:   return offset;",
          "8123: }",
          "8127: static int",
          "8128: dissect_h245_T_ipv6_tsapIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8129: #line 877 \"../../asn1/h245/h245.cnf\"",
          "8130:   guint32 tsapIdentifier;",
          "8132:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "8133:                                                             0U, 65535U, &tsapIdentifier, FALSE);",
          "8136:   if (upcoming_channel && upcoming_channel->upcoming_addr) {",
          "8137:     upcoming_channel->upcoming_addr->port = tsapIdentifier;",
          "8138:   }",
          "8141:   return offset;",
          "8142: }",
          "8146:   { &hf_h245_ip6_network    , ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_h245_T_ip6_network },",
          "8147:   { &hf_h245_ipv6_tsapIdentifier, ASN1_EXTENSION_ROOT    , ASN1_NOT_OPTIONAL, dissect_h245_T_ipv6_tsapIdentifier },",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "8284: static int",
          "8285: dissect_h245_T_mediaChannel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8287:   if (upcoming_channel)",
          "8288:     upcoming_channel->upcoming_addr = &upcoming_channel->media_addr;",
          "8290:   offset = dissect_h245_TransportAddress(tvb, offset, actx, tree, hf_index);",
          "8293:   if (upcoming_channel)",
          "8294:     upcoming_channel->upcoming_addr = NULL;",
          "",
          "[Removed Lines]",
          "8286: #line 875 \"../../asn1/h245/h245.cnf\"",
          "8292: #line 879 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "8325: #line 896 \"../../asn1/h245/h245.cnf\"",
          "8331: #line 900 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "8301: static int",
          "8302: dissect_h245_T_mediaControlChannel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "8304:   if (upcoming_channel)",
          "8305:     upcoming_channel->upcoming_addr = &upcoming_channel->media_control_addr;",
          "8307:   offset = dissect_h245_TransportAddress(tvb, offset, actx, tree, hf_index);",
          "8310:   if (upcoming_channel)",
          "8311:     upcoming_channel->upcoming_addr = NULL;",
          "",
          "[Removed Lines]",
          "8303: #line 893 \"../../asn1/h245/h245.cnf\"",
          "8309: #line 897 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "8342: #line 914 \"../../asn1/h245/h245.cnf\"",
          "8348: #line 918 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "10977: static int",
          "10978: dissect_h245_Ack_mediaChannel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10980:   if (upcoming_channel)",
          "10981:     upcoming_channel->upcoming_addr = &upcoming_channel->media_addr;",
          "10983:   offset = dissect_h245_TransportAddress(tvb, offset, actx, tree, hf_index);",
          "10986:   if (upcoming_channel)",
          "10987:     upcoming_channel->upcoming_addr = NULL;",
          "",
          "[Removed Lines]",
          "10979: #line 866 \"../../asn1/h245/h245.cnf\"",
          "10985: #line 870 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "11018: #line 887 \"../../asn1/h245/h245.cnf\"",
          "11024: #line 891 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "10994: static int",
          "10995: dissect_h245_Ack_mediaControlChannel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "10997:   if (upcoming_channel)",
          "10998:     upcoming_channel->upcoming_addr = &upcoming_channel->media_control_addr;",
          "11000:   offset = dissect_h245_TransportAddress(tvb, offset, actx, tree, hf_index);",
          "11003:   if (upcoming_channel)",
          "11004:     upcoming_channel->upcoming_addr = NULL;",
          "",
          "[Removed Lines]",
          "10996: #line 884 \"../../asn1/h245/h245.cnf\"",
          "11002: #line 888 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "11035: #line 905 \"../../asn1/h245/h245.cnf\"",
          "11041: #line 909 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "14236: static int",
          "14237: dissect_h245_T_returnedFunction(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "14239:   tvbuff_t *next_tvb = NULL;",
          "14240:   proto_item *item;",
          "14241:   proto_tree *subtree;",
          "",
          "[Removed Lines]",
          "14238: #line 969 \"../../asn1/h245/h245.cnf\"",
          "",
          "[Added Lines]",
          "14277: #line 990 \"../../asn1/h245/h245.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "18088:     { &hf_h245_ip6_network,",
          "18089:       { \"network\", \"h245.network\",",
          "18090:         FT_IPv6, BASE_NONE, NULL, 0,",
          "18092:     { &hf_h245_ipv6_tsapIdentifier,",
          "18093:       { \"tsapIdentifier\", \"h245.tsapIdentifier\",",
          "18094:         FT_UINT32, BASE_DEC, NULL, 0,",
          "18096:     { &hf_h245_netBios,",
          "18097:       { \"netBios\", \"h245.netBios\",",
          "18098:         FT_BYTES, BASE_NONE, NULL, 0,",
          "",
          "[Removed Lines]",
          "18091:         \"OCTET_STRING_SIZE_16\", HFILL }},",
          "18095:         \"INTEGER_0_65535\", HFILL }},",
          "",
          "[Added Lines]",
          "18130:         \"T_ip6_network\", HFILL }},",
          "18134:         \"T_ipv6_tsapIdentifier\", HFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de70d2a18a6d740df47ce764a81e195c158b2e51",
      "candidate_info": {
        "commit_hash": "de70d2a18a6d740df47ce764a81e195c158b2e51",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/de70d2a18a6d740df47ce764a81e195c158b2e51",
        "files": [
          "asn1/h225/h225.cnf",
          "asn1/h225/packet-h225-template.c",
          "asn1/h225/packet-h225-template.h",
          "epan/dissectors/packet-h225.c",
          "epan/dissectors/packet-h225.h"
        ],
        "message": "H225: fix indent (use 2 spaces) and add modelines info\n\nChange-Id: Ibe4cf8d004c6c94f745e5c620100af9483fa6a31\nReviewed-on: https://code.wireshark.org/review/9934\nReviewed-by: Bill Meier <wmeier@newsguy.com>",
        "before_after_code_files": [
          "asn1/h225/h225.cnf||asn1/h225/h225.cnf",
          "asn1/h225/packet-h225-template.c||asn1/h225/packet-h225-template.c",
          "asn1/h225/packet-h225-template.h||asn1/h225/packet-h225-template.h",
          "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c",
          "epan/dissectors/packet-h225.h||epan/dissectors/packet-h225.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ],
          "candidate": [
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ]
        }
      },
      "candidate_diff": {
        "asn1/h225/h225.cnf||asn1/h225/h225.cnf": [
          "File: asn1/h225/h225.cnf -> asn1/h225/h225.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: NonStandardParameter",
          "32: PublicTypeOfNumber",
          "33: PrivateTypeOfNumber",
          "35: PartyNumber",
          "36: PresentationIndicator",
          "37: ScreeningIndicator",
          "",
          "[Removed Lines]",
          "34: AliasAddress   NO_PROT_PREFIX",
          "",
          "[Added Lines]",
          "34: AliasAddress      NO_PROT_PREFIX",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239: #----------------------------------------------------------------------------------------",
          "240: #.FN_BODY H323-UU-PDU/h323-message-body  VAL_PTR = &message_body_val",
          "245: %(DEFAULT_BODY)s",
          "265: #.END",
          "266: #----------------------------------------------------------------------------------------",
          "267: #.FN_BODY FastStart/_item  VAL_PTR = &value_tvb",
          "272: %(DEFAULT_BODY)s",
          "282: #.END",
          "283: #----------------------------------------------------------------------------------------",
          "284: #.FN_BODY RasMessage  VAL_PTR = &rasmessage_value",
          "288: %(DEFAULT_BODY)s",
          "296: #.END",
          "297: #----------------------------------------------------------------------------------------",
          "298: #.FN_HDR DestinationInfo/_item",
          "",
          "[Removed Lines]",
          "241:  gint32 message_body_val;",
          "243:  contains_faststart = FALSE;",
          "244:  call_id_guid = NULL;",
          "246:  col_append_fstr(%(ACTX)s->pinfo->cinfo, COL_INFO, \"CS: %%s \",",
          "247:   val_to_str(message_body_val, T_h323_message_body_vals, \"<unknown>\"));",
          "249:  if (h225_pi->msg_type == H225_CS) {",
          "251:   h225_pi->msg_tag = message_body_val;",
          "252:  }",
          "254:  if (call_id_guid) {",
          "255:   h225_pi->guid = *call_id_guid;",
          "256:  }",
          "258:  if (contains_faststart == TRUE )",
          "259:  {",
          "260:   col_append_str(%(ACTX)s->pinfo->cinfo, COL_INFO, \"OpenLogicalChannel \" );",
          "261:  }",
          "263:  col_set_fence(%(ACTX)s->pinfo->cinfo,COL_INFO);",
          "268:  tvbuff_t *value_tvb = NULL;",
          "269:  char codec_str[50];",
          "270:  codec_str[0] = '\\0';",
          "273:  if (value_tvb && tvb_reported_length(value_tvb)) {",
          "274:   dissect_h245_FastStart_OLC(value_tvb, %(ACTX)s->pinfo, tree, codec_str);",
          "275:  }",
          "278:     g_snprintf(h225_pi->frame_label, 50, \"%%s %%s\", h225_pi->frame_label, codec_str);",
          "280:  contains_faststart = TRUE;",
          "281:  h225_pi->is_faststart = TRUE;",
          "285:    gint32 rasmessage_value;",
          "287:  call_id_guid = NULL;",
          "289:  col_add_fstr(%(ACTX)s->pinfo->cinfo, COL_INFO, \"RAS: %%s \",",
          "290:   val_to_str(rasmessage_value, h225_RasMessage_vals, \"<unknown>\"));",
          "292:  h225_pi->msg_tag = rasmessage_value;",
          "293:  if (call_id_guid) {",
          "294:   h225_pi->guid = *call_id_guid;",
          "295:  }",
          "",
          "[Added Lines]",
          "241:   gint32 message_body_val;",
          "243:   contains_faststart = FALSE;",
          "244:   call_id_guid = NULL;",
          "246:   col_append_fstr(%(ACTX)s->pinfo->cinfo, COL_INFO, \"CS: %%s \",",
          "247:     val_to_str(message_body_val, T_h323_message_body_vals, \"<unknown>\"));",
          "249:   if (h225_pi->msg_type == H225_CS) {",
          "251:     h225_pi->msg_tag = message_body_val;",
          "252:   }",
          "254:   if (call_id_guid) {",
          "255:     h225_pi->guid = *call_id_guid;",
          "256:   }",
          "258:   if (contains_faststart == TRUE )",
          "259:   {",
          "260:     col_append_str(%(ACTX)s->pinfo->cinfo, COL_INFO, \"OpenLogicalChannel \" );",
          "261:   }",
          "263:   col_set_fence(%(ACTX)s->pinfo->cinfo,COL_INFO);",
          "268:   tvbuff_t *value_tvb = NULL;",
          "269:   char codec_str[50];",
          "270:   codec_str[0] = '\\0';",
          "273:   if (value_tvb && tvb_reported_length(value_tvb)) {",
          "274:     dissect_h245_FastStart_OLC(value_tvb, %(ACTX)s->pinfo, tree, codec_str);",
          "275:   }",
          "278:   g_snprintf(h225_pi->frame_label, 50, \"%%s %%s\", h225_pi->frame_label, codec_str);",
          "280:   contains_faststart = TRUE;",
          "281:   h225_pi->is_faststart = TRUE;",
          "285:     gint32 rasmessage_value;",
          "287:   call_id_guid = NULL;",
          "289:   col_add_fstr(%(ACTX)s->pinfo->cinfo, COL_INFO, \"RAS: %%s \",",
          "290:     val_to_str(rasmessage_value, h225_RasMessage_vals, \"<unknown>\"));",
          "292:   h225_pi->msg_tag = rasmessage_value;",
          "293:   if (call_id_guid) {",
          "294:     h225_pi->guid = *call_id_guid;",
          "295:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330: #.FN_PARS H245TransportAddress/ipAddress/port  VAL_PTR = &ipv4_port",
          "331: #----------------------------------------------------------------------------------------",
          "332: #.FN_BODY ParallelH245Control/_item  VAL_PTR = &h245_tvb",
          "335: %(DEFAULT_BODY)s",
          "336:   next_tvb_add_handle(&h245_list, h245_tvb, (h225_h245_in_tree)?tree:NULL, h245dg_handle);",
          "337: #.END",
          "338: #----------------------------------------------------------------------------------------",
          "339: #.FN_BODY H245Control/_item  VAL_PTR = &h245_tvb",
          "342: %(DEFAULT_BODY)s",
          "343:   next_tvb_add_handle(&h245_list, h245_tvb, (h225_h245_in_tree)?tree:NULL, h245dg_handle);",
          "",
          "[Removed Lines]",
          "333:  tvbuff_t *h245_tvb = NULL;",
          "340:  tvbuff_t *h245_tvb = NULL;",
          "",
          "[Added Lines]",
          "333:   tvbuff_t *h245_tvb = NULL;",
          "340:   tvbuff_t *h245_tvb = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "364:   h225_pi->cs_type = H225_PROGRESS;",
          "365:   if (contains_faststart == TRUE )",
          "367:   else",
          "369: #.END",
          "370: #----------------------------------------------------------------------------------------",
          "371: #.FN_FTR SetupAcknowledge-UUIE",
          "",
          "[Removed Lines]",
          "366:         g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "368:         g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "366:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "368:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "391:   h225_pi->cs_type = H225_SETUP;",
          "392:   if (contains_faststart == TRUE )",
          "394:   else",
          "396: #.END",
          "397: #----------------------------------------------------------------------------------------",
          "398: #.FN_FTR CallProceeding-UUIE",
          "400:   h225_pi->cs_type = H225_CALL_PROCEDING;",
          "401:   if (contains_faststart == TRUE )",
          "403:   else",
          "405: #.END",
          "406: #----------------------------------------------------------------------------------------",
          "407: #.FN_FTR Alerting-UUIE",
          "409:   h225_pi->cs_type = H225_ALERTING;",
          "410:   if (contains_faststart == TRUE )",
          "412:   else",
          "414: #.END",
          "415: #----------------------------------------------------------------------------------------",
          "416: #.FN_FTR ReleaseComplete-UUIE",
          "",
          "[Removed Lines]",
          "393:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "395:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "402:         g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "404:         g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "411:        g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "413:        g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "393:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "395:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "402:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "404:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "411:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "413:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "424:   h225_pi->cs_type = H225_CONNECT;",
          "425:   if (contains_faststart == TRUE )",
          "427:   else",
          "429: #.END",
          "430: #----------------------------------------------------------------------------------------",
          "431: #.FN_HDR H245TransportAddress",
          "435: #.END",
          "436: #----------------------------------------------------------------------------------------",
          "437: #.FN_FTR H245TransportAddress",
          "456: #.END",
          "457: #----------------------------------------------------------------------------------------",
          "458: #.FN_BODY FacilityReason  VAL_PTR = &value",
          "461: %(DEFAULT_BODY)s",
          "463: #.END",
          "464: #----------------------------------------------------------------------------------------",
          "465: #.FN_BODY GatekeeperRejectReason  VAL_PTR = &value",
          "",
          "[Removed Lines]",
          "426:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "428:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "432:  ipv4_address=0;",
          "433:  ipv4_port=0;",
          "439:  h225_pi->is_h245 = TRUE;",
          "440:  h225_pi->h245_address = ipv4_address;",
          "441:  h225_pi->h245_port = ipv4_port;",
          "443:  if((!actx->pinfo->fd->flags.visited) && ipv4_address!=0 && ipv4_port!=0 && h245_handle){",
          "444:   address src_addr;",
          "445:   conversation_t *conv=NULL;",
          "447:   SET_ADDRESS(&src_addr, AT_IPv4, 4, &ipv4_address);",
          "449:   conv=find_conversation(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR_B|NO_PORT_B);",
          "450:   if(!conv){",
          "451:    conv=conversation_new(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR2|NO_PORT2);",
          "452:    conversation_set_dissector(conv, h245_handle);",
          "453:   }",
          "454:  }",
          "459:  gint32 value;",
          "462:  h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "426:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "428:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "432:   ipv4_address=0;",
          "433:   ipv4_port=0;",
          "439:   h225_pi->is_h245 = TRUE;",
          "440:   h225_pi->h245_address = ipv4_address;",
          "441:   h225_pi->h245_port = ipv4_port;",
          "443:   if((!actx->pinfo->fd->flags.visited) && ipv4_address!=0 && ipv4_port!=0 && h245_handle){",
          "444:     address src_addr;",
          "445:     conversation_t *conv=NULL;",
          "447:     SET_ADDRESS(&src_addr, AT_IPv4, 4, &ipv4_address);",
          "449:     conv=find_conversation(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR_B|NO_PORT_B);",
          "450:     if(!conv){",
          "451:       conv=conversation_new(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR2|NO_PORT2);",
          "452:       conversation_set_dissector(conv, h245_handle);",
          "453:     }",
          "454:   }",
          "459:   gint32 value;",
          "462:   h225_pi->reason = value;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "553: #.FN_PARS RequestSeqNum  VAL_PTR = &(h225_pi->requestSeqNum)",
          "554: #----------------------------------------------------------------------------------------",
          "555: #.FN_BODY H323-UU-PDU/h4501SupplementaryService/_item  VAL_PTR = &h4501_tvb",
          "558: %(DEFAULT_BODY)s",
          "562: #.END",
          "563: #----------------------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "556:  tvbuff_t *h4501_tvb = NULL;",
          "559:  if (h4501_tvb && tvb_reported_length(h4501_tvb)) {",
          "560:   call_dissector(h4501_handle, h4501_tvb, %(ACTX)s->pinfo, tree);",
          "561:  }",
          "",
          "[Added Lines]",
          "556:   tvbuff_t *h4501_tvb = NULL;",
          "559:   if (h4501_tvb && tvb_reported_length(h4501_tvb)) {",
          "560:     call_dissector(h4501_handle, h4501_tvb, %(ACTX)s->pinfo, tree);",
          "561:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "588: #.END",
          "590: #.FN_BODY NonStandardIdentifier  VAL_PTR = &value",
          "596: %(DEFAULT_BODY)s",
          "606:     }",
          "607: #.END",
          "",
          "[Removed Lines]",
          "591:  gint32 value;",
          "593:  nsiOID = \"\";",
          "594:  h221NonStandard = 0;",
          "597:  switch (value) {",
          "599:    nsp_handle = dissector_get_string_handle(nsp_object_dissector_table, nsiOID);",
          "600:    break;",
          "602:    nsp_handle = dissector_get_uint_handle(nsp_h221_dissector_table, h221NonStandard);",
          "603:    break;",
          "604:   default :",
          "605:    nsp_handle = NULL;",
          "",
          "[Added Lines]",
          "591:   gint32 value;",
          "593:   nsiOID = \"\";",
          "594:   h221NonStandard = 0;",
          "597:   switch (value) {",
          "599:       nsp_handle = dissector_get_string_handle(nsp_object_dissector_table, nsiOID);",
          "600:       break;",
          "602:       nsp_handle = dissector_get_uint_handle(nsp_h221_dissector_table, h221NonStandard);",
          "603:       break;",
          "604:     default :",
          "605:       nsp_handle = NULL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "672:   gefx = gef_ctx_get(actx->private_data);",
          "673:   if (gefx) {",
          "674:     ti = proto_tree_add_string(tree, hf_h225_debug_dissector_try_string, tvb, offset>>3, 0, gefx->key);",
          "676:     dissector_try_string(gef_name_dissector_table, gefx->key, tvb_new_subset(tvb, offset>>3, 0, 0), actx->pinfo, tree, actx);",
          "677:   }",
          "",
          "[Removed Lines]",
          "675:  PROTO_ITEM_SET_HIDDEN(ti);",
          "",
          "[Added Lines]",
          "675:   PROTO_ITEM_SET_HIDDEN(ti);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "706:   gefx = gef_ctx_get(actx->private_data);",
          "707:   if (gefx) {",
          "708:     ti = proto_tree_add_string(tree, hf_h225_debug_dissector_try_string, tvb, offset>>3, 0, gefx->key);",
          "710:     dissector_try_string(gef_content_dissector_table, gefx->key, value_tvb, %(ACTX)s->pinfo, %(TREE)s, %(ACTX)s);",
          "711:   }",
          "712: #.END",
          "",
          "[Removed Lines]",
          "709:  PROTO_ITEM_SET_HIDDEN(ti);",
          "",
          "[Added Lines]",
          "709:   PROTO_ITEM_SET_HIDDEN(ti);",
          "",
          "---------------"
        ],
        "asn1/h225/packet-h225-template.c||asn1/h225/packet-h225-template.c": [
          "File: asn1/h225/packet-h225-template.c -> asn1/h225/packet-h225-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: typedef struct _h225ras_call_t {",
          "79: } h225ras_call_t;",
          "83: typedef struct _h225ras_call_info_key {",
          "86: } h225ras_call_info_key;",
          "",
          "[Removed Lines]",
          "72:  guint32 requestSeqNum;",
          "73:  e_guid_t guid;",
          "84:  guint reqSeqNum;",
          "85:  conversation_t *conversation;",
          "",
          "[Added Lines]",
          "72:   guint32 requestSeqNum;",
          "73:   e_guid_t guid;",
          "84:   guint reqSeqNum;",
          "85:   conversation_t *conversation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: static const char *tpOID;",
          "159: static const value_string ras_message_category[] = {",
          "168: };",
          "170: typedef enum _ras_type {",
          "175: }ras_type;",
          "177: typedef enum _ras_category {",
          "186: }ras_category;",
          "188: #define NUM_RAS_STATS 7",
          "",
          "[Removed Lines]",
          "160:  {  0, \"Gatekeeper    \"},",
          "161:  {  1, \"Registration  \"},",
          "162:  {  2, \"UnRegistration\"},",
          "163:  {  3, \"Admission     \"},",
          "164:  {  4, \"Bandwidth     \"},",
          "165:  {  5, \"Disengage     \"},",
          "166:  {  6, \"Location      \"},",
          "167:  {  0, NULL }",
          "171:  RAS_REQUEST,",
          "172:  RAS_CONFIRM,",
          "173:  RAS_REJECT,",
          "174:  RAS_OTHER",
          "178:  RAS_GATEKEEPER,",
          "179:  RAS_REGISTRATION,",
          "180:  RAS_UNREGISTRATION,",
          "181:  RAS_ADMISSION,",
          "182:  RAS_BANDWIDTH,",
          "183:  RAS_DISENGAGE,",
          "184:  RAS_LOCATION,",
          "185:  RAS_OTHERS",
          "",
          "[Added Lines]",
          "160:   {  0, \"Gatekeeper    \"},",
          "161:   {  1, \"Registration  \"},",
          "162:   {  2, \"UnRegistration\"},",
          "163:   {  3, \"Admission     \"},",
          "164:   {  4, \"Bandwidth     \"},",
          "165:   {  5, \"Disengage     \"},",
          "166:   {  6, \"Location      \"},",
          "167:   {  0, NULL }",
          "171:   RAS_REQUEST,",
          "172:   RAS_CONFIRM,",
          "173:   RAS_REJECT,",
          "174:   RAS_OTHER",
          "178:   RAS_GATEKEEPER,",
          "179:   RAS_REGISTRATION,",
          "180:   RAS_UNREGISTRATION,",
          "181:   RAS_ADMISSION,",
          "182:   RAS_BANDWIDTH,",
          "183:   RAS_DISENGAGE,",
          "184:   RAS_LOCATION,",
          "185:   RAS_OTHERS",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190: static gboolean",
          "191: h225rassrt_packet(void *phs, packet_info *pinfo _U_, epan_dissect_t *edt _U_, const void *phi)",
          "192: {",
          "247: }",
          "249: #include \"packet-h225-fn.c\"",
          "",
          "[Removed Lines]",
          "193:  rtd_data_t* rtd_data = (rtd_data_t*)phs;",
          "194:  rtd_stat_table* rs = &rtd_data->stat_table;",
          "195:  const h225_packet_info *pi=(const h225_packet_info *)phi;",
          "197:  ras_type rasmsg_type = RAS_OTHER;",
          "198:  ras_category rascategory = RAS_OTHERS;",
          "200:  if (pi->msg_type != H225_RAS || pi->msg_tag == -1) {",
          "202:   return FALSE;",
          "203:  }",
          "205:  if (pi->msg_tag < 21) {",
          "207:   rascategory = (ras_category)(pi->msg_tag / 3);",
          "208:   rasmsg_type = (ras_type)(pi->msg_tag % 3);",
          "209:  }",
          "210:  else {",
          "212:   return FALSE;",
          "213:  }",
          "215:  switch(rasmsg_type) {",
          "217:  case RAS_REQUEST:",
          "218:   if(pi->is_duplicate){",
          "219:    rs->time_stats[rascategory].req_dup_num++;",
          "220:   }",
          "221:   else {",
          "222:    rs->time_stats[rascategory].open_req_num++;",
          "223:   }",
          "224:   break;",
          "226:  case RAS_CONFIRM:",
          "228:  case RAS_REJECT:",
          "229:   if(pi->is_duplicate){",
          "231:    rs->time_stats[rascategory].rsp_dup_num++;",
          "232:   }",
          "233:   else if (!pi->request_available) {",
          "235:    rs->time_stats[rascategory].disc_rsp_num++;",
          "236:   }",
          "237:   else {",
          "238:    rs->time_stats[rascategory].open_req_num--;",
          "239:    time_stat_update(&(rs->time_stats[rascategory].rtd[0]),&(pi->delta_time), pinfo);",
          "240:   }",
          "241:   break;",
          "243:  default:",
          "244:   return FALSE;",
          "245:  }",
          "246:  return TRUE;",
          "",
          "[Added Lines]",
          "193:   rtd_data_t* rtd_data = (rtd_data_t*)phs;",
          "194:   rtd_stat_table* rs = &rtd_data->stat_table;",
          "195:   const h225_packet_info *pi=(const h225_packet_info *)phi;",
          "197:   ras_type rasmsg_type = RAS_OTHER;",
          "198:   ras_category rascategory = RAS_OTHERS;",
          "200:   if (pi->msg_type != H225_RAS || pi->msg_tag == -1) {",
          "202:     return FALSE;",
          "203:   }",
          "205:   if (pi->msg_tag < 21) {",
          "207:     rascategory = (ras_category)(pi->msg_tag / 3);",
          "208:     rasmsg_type = (ras_type)(pi->msg_tag % 3);",
          "209:   }",
          "210:   else {",
          "212:     return FALSE;",
          "213:   }",
          "215:   switch(rasmsg_type) {",
          "217:   case RAS_REQUEST:",
          "218:     if(pi->is_duplicate){",
          "219:       rs->time_stats[rascategory].req_dup_num++;",
          "220:     }",
          "221:     else {",
          "222:       rs->time_stats[rascategory].open_req_num++;",
          "223:     }",
          "224:     break;",
          "226:   case RAS_CONFIRM:",
          "228:   case RAS_REJECT:",
          "229:     if(pi->is_duplicate){",
          "231:       rs->time_stats[rascategory].rsp_dup_num++;",
          "232:     }",
          "233:     else if (!pi->request_available) {",
          "235:       rs->time_stats[rascategory].disc_rsp_num++;",
          "236:     }",
          "237:     else {",
          "238:       rs->time_stats[rascategory].open_req_num--;",
          "239:       time_stat_update(&(rs->time_stats[rascategory].rtd[0]),&(pi->delta_time), pinfo);",
          "240:     }",
          "241:     break;",
          "243:   default:",
          "244:     return FALSE;",
          "245:   }",
          "246:   return TRUE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260: static gint h225ras_call_equal(gconstpointer k1, gconstpointer k2)",
          "261: {",
          "267: }",
          "270: static guint h225ras_call_hash(gconstpointer k)",
          "271: {",
          "275: }",
          "278: h225ras_call_t * find_h225ras_call(h225ras_call_info_key *h225ras_call_key ,int category)",
          "279: {",
          "284: }",
          "286: h225ras_call_t * new_h225ras_call(h225ras_call_info_key *h225ras_call_key, packet_info *pinfo, e_guid_t *guid, int category)",
          "287: {",
          "312: }",
          "314: h225ras_call_t * append_h225ras_call(h225ras_call_t *prev_call, packet_info *pinfo, e_guid_t *guid, int category _U_)",
          "315: {",
          "334: }",
          "",
          "[Removed Lines]",
          "262:  const h225ras_call_info_key* key1 = (const h225ras_call_info_key*) k1;",
          "263:  const h225ras_call_info_key* key2 = (const h225ras_call_info_key*) k2;",
          "265:  return (key1->reqSeqNum == key2->reqSeqNum &&",
          "266:      key1->conversation == key2->conversation);",
          "272:  const h225ras_call_info_key* key = (const h225ras_call_info_key*) k;",
          "274:  return key->reqSeqNum + GPOINTER_TO_UINT(key->conversation);",
          "280:  h225ras_call_t *h225ras_call = NULL;",
          "281:  h225ras_call = (h225ras_call_t *)g_hash_table_lookup(ras_calls[category], h225ras_call_key);",
          "283:  return h225ras_call;",
          "288:  h225ras_call_info_key *new_h225ras_call_key;",
          "289:  h225ras_call_t *h225ras_call = NULL;",
          "293:     \"req_num\" and \"rsp_num\" are frame numbers;",
          "294:     frame numbers are 1-origin, so we use 0",
          "295:     to mean \"we don't yet know in which frame",
          "297:  new_h225ras_call_key = wmem_new(wmem_file_scope(), h225ras_call_info_key);",
          "298:  new_h225ras_call_key->reqSeqNum = h225ras_call_key->reqSeqNum;",
          "299:  new_h225ras_call_key->conversation = h225ras_call_key->conversation;",
          "300:  h225ras_call = wmem_new(wmem_file_scope(), h225ras_call_t);",
          "301:  h225ras_call->req_num = pinfo->fd->num;",
          "302:  h225ras_call->rsp_num = 0;",
          "303:  h225ras_call->requestSeqNum = h225ras_call_key->reqSeqNum;",
          "304:  h225ras_call->responded = FALSE;",
          "305:  h225ras_call->next_call = NULL;",
          "306:  h225ras_call->req_time=pinfo->fd->abs_ts;",
          "307:  h225ras_call->guid=*guid;",
          "309:  g_hash_table_insert(ras_calls[category], new_h225ras_call_key, h225ras_call);",
          "311:  return h225ras_call;",
          "316:  h225ras_call_t *h225ras_call = NULL;",
          "319:     \"req_num\" and \"rsp_num\" are frame numbers;",
          "320:     frame numbers are 1-origin, so we use 0",
          "321:     to mean \"we don't yet know in which frame",
          "323:  h225ras_call = wmem_new(wmem_file_scope(), h225ras_call_t);",
          "324:  h225ras_call->req_num = pinfo->fd->num;",
          "325:  h225ras_call->rsp_num = 0;",
          "326:  h225ras_call->requestSeqNum = prev_call->requestSeqNum;",
          "327:  h225ras_call->responded = FALSE;",
          "328:  h225ras_call->next_call = NULL;",
          "329:  h225ras_call->req_time=pinfo->fd->abs_ts;",
          "330:  h225ras_call->guid=*guid;",
          "332:  prev_call->next_call = h225ras_call;",
          "333:  return h225ras_call;",
          "",
          "[Added Lines]",
          "262:   const h225ras_call_info_key* key1 = (const h225ras_call_info_key*) k1;",
          "263:   const h225ras_call_info_key* key2 = (const h225ras_call_info_key*) k2;",
          "265:   return (key1->reqSeqNum == key2->reqSeqNum &&",
          "266:           key1->conversation == key2->conversation);",
          "272:   const h225ras_call_info_key* key = (const h225ras_call_info_key*) k;",
          "274:   return key->reqSeqNum + GPOINTER_TO_UINT(key->conversation);",
          "280:   h225ras_call_t *h225ras_call = NULL;",
          "281:   h225ras_call = (h225ras_call_t *)g_hash_table_lookup(ras_calls[category], h225ras_call_key);",
          "283:   return h225ras_call;",
          "288:   h225ras_call_info_key *new_h225ras_call_key;",
          "289:   h225ras_call_t *h225ras_call = NULL;",
          "293:      \"req_num\" and \"rsp_num\" are frame numbers;",
          "294:      frame numbers are 1-origin, so we use 0",
          "295:      to mean \"we don't yet know in which frame",
          "297:   new_h225ras_call_key = wmem_new(wmem_file_scope(), h225ras_call_info_key);",
          "298:   new_h225ras_call_key->reqSeqNum = h225ras_call_key->reqSeqNum;",
          "299:   new_h225ras_call_key->conversation = h225ras_call_key->conversation;",
          "300:   h225ras_call = wmem_new(wmem_file_scope(), h225ras_call_t);",
          "301:   h225ras_call->req_num = pinfo->fd->num;",
          "302:   h225ras_call->rsp_num = 0;",
          "303:   h225ras_call->requestSeqNum = h225ras_call_key->reqSeqNum;",
          "304:   h225ras_call->responded = FALSE;",
          "305:   h225ras_call->next_call = NULL;",
          "306:   h225ras_call->req_time=pinfo->fd->abs_ts;",
          "307:   h225ras_call->guid=*guid;",
          "309:   g_hash_table_insert(ras_calls[category], new_h225ras_call_key, h225ras_call);",
          "311:   return h225ras_call;",
          "316:   h225ras_call_t *h225ras_call = NULL;",
          "319:      \"req_num\" and \"rsp_num\" are frame numbers;",
          "320:      frame numbers are 1-origin, so we use 0",
          "321:      to mean \"we don't yet know in which frame",
          "323:   h225ras_call = wmem_new(wmem_file_scope(), h225ras_call_t);",
          "324:   h225ras_call->req_num = pinfo->fd->num;",
          "325:   h225ras_call->rsp_num = 0;",
          "326:   h225ras_call->requestSeqNum = prev_call->requestSeqNum;",
          "327:   h225ras_call->responded = FALSE;",
          "328:   h225ras_call->next_call = NULL;",
          "329:   h225ras_call->req_time=pinfo->fd->abs_ts;",
          "330:   h225ras_call->guid=*guid;",
          "332:   prev_call->next_call = h225ras_call;",
          "333:   return h225ras_call;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "341: static void",
          "342: h225_init_routine(void)",
          "343: {",
          "351: }",
          "353: static void",
          "354: h225_cleanup_routine(void)",
          "355: {",
          "362: }",
          "364: static int",
          "365: dissect_h225_H323UserInformation(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "366: {",
          "403: }",
          "404: static int",
          "405: dissect_h225_h225_RasMessage(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_){",
          "432: }",
          "",
          "[Removed Lines]",
          "344:  int i;",
          "347:  for(i=0;i<7;i++) {",
          "348:   ras_calls[i] = g_hash_table_new(h225ras_call_hash, h225ras_call_equal);",
          "349:  }",
          "356:  int i;",
          "359:  for(i=0;i<7;i++) {",
          "360:   g_hash_table_destroy(ras_calls[i]);",
          "361:  }",
          "367:  proto_item *it;",
          "368:  proto_tree *tr;",
          "369:  int offset = 0;",
          "371:  pi_current++;",
          "372:  if(pi_current==5){",
          "373:   pi_current=0;",
          "374:  }",
          "375:  h225_pi=&pi_arr[pi_current];",
          "378:  reset_h225_packet_info(h225_pi);",
          "379:  h225_pi->msg_type = H225_CS;",
          "381:  next_tvb_init(&h245_list);",
          "382:  next_tvb_init(&tp_list);",
          "384:  col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "385:  col_clear(pinfo->cinfo, COL_INFO);",
          "387:  it=proto_tree_add_protocol_format(tree, proto_h225, tvb, 0, -1, PSNAME\" CS\");",
          "388:  tr=proto_item_add_subtree(it, ett_h225);",
          "390:  offset = dissect_H323_UserInformation_PDU(tvb, pinfo, tr, NULL);",
          "392:  if (h245_list.count){",
          "393:   col_append_str(pinfo->cinfo, COL_PROTOCOL, \"/\");",
          "394:   col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "395:  }",
          "397:  next_tvb_call(&h245_list, pinfo, tree, h245dg_handle, data_handle);",
          "398:  next_tvb_call(&tp_list, pinfo, tree, NULL, data_handle);",
          "400:  tap_queue_packet(h225_tap, pinfo, h225_pi);",
          "402:  return offset;",
          "406:  proto_item *it;",
          "407:  proto_tree *tr;",
          "408:  guint32 offset=0;",
          "410:  pi_current++;",
          "411:  if(pi_current==5){",
          "412:   pi_current=0;",
          "413:  }",
          "414:  h225_pi=&pi_arr[pi_current];",
          "417:  reset_h225_packet_info(h225_pi);",
          "418:  h225_pi->msg_type = H225_RAS;",
          "420:  col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "422:  it=proto_tree_add_protocol_format(tree, proto_h225, tvb, offset, -1, PSNAME\" RAS\");",
          "423:  tr=proto_item_add_subtree(it, ett_h225);",
          "425:  offset = dissect_RasMessage_PDU(tvb, pinfo, tr, NULL);",
          "427:  ras_call_matching(tvb, pinfo, tr, h225_pi);",
          "429:  tap_queue_packet(h225_tap, pinfo, h225_pi);",
          "431:  return offset;",
          "",
          "[Added Lines]",
          "344:   int i;",
          "347:   for(i=0;i<7;i++) {",
          "348:     ras_calls[i] = g_hash_table_new(h225ras_call_hash, h225ras_call_equal);",
          "349:   }",
          "356:   int i;",
          "359:   for(i=0;i<7;i++) {",
          "360:     g_hash_table_destroy(ras_calls[i]);",
          "361:   }",
          "367:   proto_item *it;",
          "368:   proto_tree *tr;",
          "369:   int offset = 0;",
          "371:   pi_current++;",
          "372:   if(pi_current==5){",
          "373:     pi_current=0;",
          "374:   }",
          "375:   h225_pi=&pi_arr[pi_current];",
          "378:   reset_h225_packet_info(h225_pi);",
          "379:   h225_pi->msg_type = H225_CS;",
          "381:   next_tvb_init(&h245_list);",
          "382:   next_tvb_init(&tp_list);",
          "384:   col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "385:   col_clear(pinfo->cinfo, COL_INFO);",
          "387:   it=proto_tree_add_protocol_format(tree, proto_h225, tvb, 0, -1, PSNAME\" CS\");",
          "388:   tr=proto_item_add_subtree(it, ett_h225);",
          "390:   offset = dissect_H323_UserInformation_PDU(tvb, pinfo, tr, NULL);",
          "392:   if (h245_list.count){",
          "393:     col_append_str(pinfo->cinfo, COL_PROTOCOL, \"/\");",
          "394:     col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "395:   }",
          "397:   next_tvb_call(&h245_list, pinfo, tree, h245dg_handle, data_handle);",
          "398:   next_tvb_call(&tp_list, pinfo, tree, NULL, data_handle);",
          "400:   tap_queue_packet(h225_tap, pinfo, h225_pi);",
          "402:   return offset;",
          "406:   proto_item *it;",
          "407:   proto_tree *tr;",
          "408:   guint32 offset=0;",
          "410:   pi_current++;",
          "411:   if(pi_current==5){",
          "412:     pi_current=0;",
          "413:   }",
          "414:   h225_pi=&pi_arr[pi_current];",
          "417:   reset_h225_packet_info(h225_pi);",
          "418:   h225_pi->msg_type = H225_RAS;",
          "420:   col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "422:   it=proto_tree_add_protocol_format(tree, proto_h225, tvb, offset, -1, PSNAME\" RAS\");",
          "423:   tr=proto_item_add_subtree(it, ett_h225);",
          "425:   offset = dissect_RasMessage_PDU(tvb, pinfo, tr, NULL);",
          "427:   ras_call_matching(tvb, pinfo, tr, h225_pi);",
          "429:   tap_queue_packet(h225_tap, pinfo, h225_pi);",
          "431:   return offset;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "454: typedef enum",
          "455: {",
          "458: } h225_stat_columns;",
          "460: typedef struct _h225_table_item {",
          "463: } h225_table_item_t;",
          "465: static stat_tap_table_item h225_stat_fields[] = {{TABLE_ITEM_STRING, TAP_ALIGN_LEFT, \"Message Type or Reason\", \"%-25s\"}, {TABLE_ITEM_UINT, TAP_ALIGN_RIGHT, \"Count\", \"%d\"}};",
          "",
          "[Removed Lines]",
          "456:  MESSAGE_TYPE_COLUMN = 0,",
          "457:  COUNT_COLUMN",
          "",
          "[Added Lines]",
          "456:   MESSAGE_TYPE_COLUMN = 0,",
          "457:   COUNT_COLUMN",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "485: static void h225_stat_init(new_stat_tap_ui* new_stat, new_stat_tap_gui_init_cb gui_callback, void* gui_data)",
          "486: {",
          "700: }",
          "702: static gboolean",
          "703: h225_stat_packet(void *tapdata, packet_info *pinfo _U_, epan_dissect_t *edt _U_, const void *hpi_ptr)",
          "704: {",
          "806: }",
          "808: static void",
          "809: h225_stat_reset(new_stat_tap_table* table)",
          "810: {",
          "820: }",
          "",
          "[Removed Lines]",
          "487:  int num_fields = sizeof(h225_stat_fields)/sizeof(stat_tap_table_item);",
          "488:  new_stat_tap_table* table = new_stat_tap_init_table(\"H.225 Messages and Message Reasons\", num_fields, 0, NULL, gui_callback, gui_data);",
          "489:  int row_idx = 0, msg_idx;",
          "490:  stat_tap_table_item_type items[sizeof(h225_stat_fields)/sizeof(stat_tap_table_item)];",
          "492:  new_stat_tap_add_table(new_stat, table);",
          "494:  items[MESSAGE_TYPE_COLUMN].type = TABLE_ITEM_STRING;",
          "495:  items[COUNT_COLUMN].type = TABLE_ITEM_UINT;",
          "496:  items[COUNT_COLUMN].value.uint_value = 0;",
          "500:  msg_idx = 0;",
          "501:  do",
          "502:  {",
          "503:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "504:    h225_RasMessage_vals[msg_idx].strptr",
          "505:    ? h225_RasMessage_vals[msg_idx].strptr",
          "506:    : \"Unknown RAS message\";",
          "507:   ras_msg_idx[msg_idx] = row_idx;",
          "509:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "510:   row_idx++;",
          "511:   msg_idx++;",
          "512:  } while (h225_RasMessage_vals[msg_idx].strptr);",
          "514:  msg_idx = 0;",
          "515:  do",
          "516:  {",
          "517:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "518:    T_h323_message_body_vals[msg_idx].strptr",
          "519:    ? T_h323_message_body_vals[msg_idx].strptr",
          "520:    : \"Unknown CS message\";",
          "521:   cs_msg_idx[msg_idx] = row_idx;",
          "523:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "524:   row_idx++;",
          "525:   msg_idx++;",
          "526:  } while (T_h323_message_body_vals[msg_idx].strptr);",
          "528:  msg_idx = 0;",
          "529:  do",
          "530:  {",
          "531:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "532:    GatekeeperRejectReason_vals[msg_idx].strptr",
          "533:    ? GatekeeperRejectReason_vals[msg_idx].strptr",
          "534:    : \"Unknown gatekeeper reject reason\";",
          "535:   grj_reason_idx[msg_idx] = row_idx;",
          "537:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "538:   row_idx++;",
          "539:   msg_idx++;",
          "540:  } while (GatekeeperRejectReason_vals[msg_idx].strptr);",
          "542:  msg_idx = 0;",
          "543:  do",
          "544:  {",
          "545:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "546:    RegistrationRejectReason_vals[msg_idx].strptr",
          "547:    ? RegistrationRejectReason_vals[msg_idx].strptr",
          "548:    : \"Unknown registration reject reason\";",
          "549:   rrj_reason_idx[msg_idx] = row_idx;",
          "551:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "552:   row_idx++;",
          "553:   msg_idx++;",
          "554:  } while (RegistrationRejectReason_vals[msg_idx].strptr);",
          "556:  msg_idx = 0;",
          "557:  do",
          "558:  {",
          "559:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "560:    UnregRequestReason_vals[msg_idx].strptr",
          "561:    ? UnregRequestReason_vals[msg_idx].strptr",
          "562:    : \"Unknown unregistration request reason\";",
          "563:   urq_reason_idx[msg_idx] = row_idx;",
          "565:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "566:   row_idx++;",
          "567:   msg_idx++;",
          "568:  } while (UnregRequestReason_vals[msg_idx].strptr);",
          "570:  msg_idx = 0;",
          "571:  do",
          "572:  {",
          "573:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "574:    UnregRejectReason_vals[msg_idx].strptr",
          "575:    ? UnregRejectReason_vals[msg_idx].strptr",
          "576:    : \"Unknown unregistration reject reason\";",
          "577:   urj_reason_idx[msg_idx] = row_idx;",
          "579:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "580:   row_idx++;",
          "581:   msg_idx++;",
          "582:  } while (UnregRejectReason_vals[msg_idx].strptr);",
          "584:  msg_idx = 0;",
          "585:  do",
          "586:  {",
          "587:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "588:    AdmissionRejectReason_vals[msg_idx].strptr",
          "589:    ? AdmissionRejectReason_vals[msg_idx].strptr",
          "590:    : \"Unknown admission reject reason\";",
          "591:   arj_reason_idx[msg_idx] = row_idx;",
          "593:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "594:   row_idx++;",
          "595:   msg_idx++;",
          "596:  } while (AdmissionRejectReason_vals[msg_idx].strptr);",
          "598:  msg_idx = 0;",
          "599:  do",
          "600:  {",
          "601:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "602:    BandRejectReason_vals[msg_idx].strptr",
          "603:    ? BandRejectReason_vals[msg_idx].strptr",
          "604:    : \"Unknown band reject reason\";",
          "605:   brj_reason_idx[msg_idx] = row_idx;",
          "607:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "608:   row_idx++;",
          "609:   msg_idx++;",
          "610:  } while (BandRejectReason_vals[msg_idx].strptr);",
          "612:  msg_idx = 0;",
          "613:  do",
          "614:  {",
          "615:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "616:    DisengageReason_vals[msg_idx].strptr",
          "617:    ? DisengageReason_vals[msg_idx].strptr",
          "618:    : \"Unknown disengage reason\";",
          "619:   drq_reason_idx[msg_idx] = row_idx;",
          "621:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "622:   row_idx++;",
          "623:   msg_idx++;",
          "624:  } while (DisengageReason_vals[msg_idx].strptr);",
          "626:  msg_idx = 0;",
          "627:  do",
          "628:  {",
          "629:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "630:    DisengageRejectReason_vals[msg_idx].strptr",
          "631:    ? DisengageRejectReason_vals[msg_idx].strptr",
          "632:    : \"Unknown disengage reject reason\";",
          "633:   drj_reason_idx[msg_idx] = row_idx;",
          "635:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "636:   row_idx++;",
          "637:   msg_idx++;",
          "638:  } while (DisengageRejectReason_vals[msg_idx].strptr);",
          "640:  msg_idx = 0;",
          "641:  do",
          "642:  {",
          "643:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "644:    LocationRejectReason_vals[msg_idx].strptr",
          "645:    ? LocationRejectReason_vals[msg_idx].strptr",
          "646:    : \"Unknown location reject reason\";",
          "647:   lrj_reason_idx[msg_idx] = row_idx;",
          "649:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "650:   row_idx++;",
          "651:   msg_idx++;",
          "652:  } while (LocationRejectReason_vals[msg_idx].strptr);",
          "654:  msg_idx = 0;",
          "655:  do",
          "656:  {",
          "657:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "658:    InfoRequestNakReason_vals[msg_idx].strptr",
          "659:    ? InfoRequestNakReason_vals[msg_idx].strptr",
          "660:    : \"Unknown info request nak reason\";",
          "661:   irqnak_reason_idx[msg_idx] = row_idx;",
          "663:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "664:   row_idx++;",
          "665:   msg_idx++;",
          "666:  } while (InfoRequestNakReason_vals[msg_idx].strptr);",
          "668:  msg_idx = 0;",
          "669:  do",
          "670:  {",
          "671:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "672:    h225_ReleaseCompleteReason_vals[msg_idx].strptr",
          "673:    ? h225_ReleaseCompleteReason_vals[msg_idx].strptr",
          "674:    : \"Unknown release complete reason\";",
          "675:   rel_cmp_reason_idx[msg_idx] = row_idx;",
          "677:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "678:   row_idx++;",
          "679:   msg_idx++;",
          "680:  } while (h225_ReleaseCompleteReason_vals[msg_idx].strptr);",
          "682:  msg_idx = 0;",
          "683:  do",
          "684:  {",
          "685:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "686:    FacilityReason_vals[msg_idx].strptr",
          "687:    ? FacilityReason_vals[msg_idx].strptr",
          "688:    : \"Unknown facility reason\";",
          "689:   facility_reason_idx[msg_idx] = row_idx;",
          "691:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "692:   row_idx++;",
          "693:   msg_idx++;",
          "694:  } while (FacilityReason_vals[msg_idx].strptr);",
          "697:  items[MESSAGE_TYPE_COLUMN].value.string_value = \"Unknown H.225 message\";",
          "698:  new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "699:  other_idx = row_idx;",
          "705:  new_stat_data_t* stat_data = (new_stat_data_t*)tapdata;",
          "706:  const h225_packet_info *hpi = (const h225_packet_info *)hpi_ptr;",
          "707:  int tag_idx = -1;",
          "708:  int reason_idx = -1;",
          "711:   return FALSE;",
          "712:  }",
          "714:  switch (hpi->msg_type) {",
          "716:  case H225_RAS:",
          "717:   tag_idx = ras_msg_idx[MIN(hpi->msg_tag, (int)RAS_MSG_TYPES-1)];",
          "721:    break;",
          "722:   }",
          "724:   switch(hpi->msg_tag) {",
          "727:    reason_idx = grj_reason_idx[MIN(hpi->reason, (int)GRJ_REASONS-1)];",
          "728:    break;",
          "730:    reason_idx = rrj_reason_idx[MIN(hpi->reason, (int)RRJ_REASONS-1)];",
          "731:    break;",
          "733:    reason_idx = urq_reason_idx[MIN(hpi->reason, (int)URQ_REASONS-1)];",
          "734:    break;",
          "736:    reason_idx = urj_reason_idx[MIN(hpi->reason, (int)URJ_REASONS-1)];",
          "737:    break;",
          "739:    reason_idx = arj_reason_idx[MIN(hpi->reason, (int)ARJ_REASONS-1)];",
          "740:    break;",
          "742:    reason_idx = brj_reason_idx[MIN(hpi->reason, (int)BRJ_REASONS-1)];",
          "743:    break;",
          "745:    reason_idx = drq_reason_idx[MIN(hpi->reason, (int)DRQ_REASONS-1)];",
          "746:    break;",
          "748:    reason_idx = drj_reason_idx[MIN(hpi->reason, (int)DRJ_REASONS-1)];",
          "749:    break;",
          "751:    reason_idx = lrj_reason_idx[MIN(hpi->reason, (int)LRJ_REASONS-1)];",
          "752:    break;",
          "754:    reason_idx = irqnak_reason_idx[MIN(hpi->reason, (int)IRQNAK_REASONS-1)];",
          "755:    break;",
          "756:   default:",
          "758:    break;",
          "759:   }",
          "761:   break;",
          "763:  case H225_CS:",
          "764:   tag_idx = cs_msg_idx[MIN(hpi->msg_tag, (int)CS_MSG_TYPES-1)];",
          "768:    break;",
          "769:   }",
          "771:   switch(hpi->msg_tag) {",
          "774:    reason_idx = rel_cmp_reason_idx[MIN(hpi->reason, (int)REL_CMP_REASONS-1)];",
          "775:    break;",
          "777:    reason_idx = facility_reason_idx[MIN(hpi->reason, (int)FACILITY_REASONS-1)];",
          "778:    break;",
          "779:   default:",
          "781:    break;",
          "782:   }",
          "784:   break;",
          "786:  case H225_OTHERS:",
          "787:  default:",
          "788:   tag_idx = other_idx;",
          "789:  }",
          "791:  if (tag_idx >= 0) {",
          "792:   new_stat_tap_table*table = g_array_index(stat_data->new_stat_tap_data->tables, new_stat_tap_table*, 0);",
          "793:   stat_tap_table_item_type* msg_data = new_stat_tap_get_field_data(table, tag_idx, COUNT_COLUMN);;",
          "794:   msg_data->value.uint_value++;",
          "795:   new_stat_tap_set_field_data(table, tag_idx, COUNT_COLUMN, msg_data);",
          "797:   if (reason_idx >= 0) {",
          "798:    msg_data = new_stat_tap_get_field_data(table, reason_idx, COUNT_COLUMN);;",
          "799:    msg_data->value.uint_value++;",
          "800:    new_stat_tap_set_field_data(table, reason_idx, COUNT_COLUMN, msg_data);",
          "801:   }",
          "803:   return TRUE;",
          "804:  }",
          "805:  return FALSE;",
          "811:  guint element;",
          "812:  stat_tap_table_item_type* item_data;",
          "814:  for (element = 0; element < table->num_elements; element++)",
          "815:  {",
          "816:   item_data = new_stat_tap_get_field_data(table, element, COUNT_COLUMN);",
          "817:   item_data->value.uint_value = 0;",
          "818:   new_stat_tap_set_field_data(table, element, COUNT_COLUMN, item_data);",
          "819:  }",
          "",
          "[Added Lines]",
          "487:   int num_fields = sizeof(h225_stat_fields)/sizeof(stat_tap_table_item);",
          "488:   new_stat_tap_table* table = new_stat_tap_init_table(\"H.225 Messages and Message Reasons\", num_fields, 0, NULL, gui_callback, gui_data);",
          "489:   int row_idx = 0, msg_idx;",
          "490:   stat_tap_table_item_type items[sizeof(h225_stat_fields)/sizeof(stat_tap_table_item)];",
          "492:   new_stat_tap_add_table(new_stat, table);",
          "494:   items[MESSAGE_TYPE_COLUMN].type = TABLE_ITEM_STRING;",
          "495:   items[COUNT_COLUMN].type = TABLE_ITEM_UINT;",
          "496:   items[COUNT_COLUMN].value.uint_value = 0;",
          "500:   msg_idx = 0;",
          "501:   do",
          "502:   {",
          "503:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "504:       h225_RasMessage_vals[msg_idx].strptr",
          "505:       ? h225_RasMessage_vals[msg_idx].strptr",
          "506:       : \"Unknown RAS message\";",
          "507:     ras_msg_idx[msg_idx] = row_idx;",
          "509:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "510:     row_idx++;",
          "511:     msg_idx++;",
          "512:   } while (h225_RasMessage_vals[msg_idx].strptr);",
          "514:   msg_idx = 0;",
          "515:   do",
          "516:   {",
          "517:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "518:       T_h323_message_body_vals[msg_idx].strptr",
          "519:       ? T_h323_message_body_vals[msg_idx].strptr",
          "520:       : \"Unknown CS message\";",
          "521:     cs_msg_idx[msg_idx] = row_idx;",
          "523:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "524:     row_idx++;",
          "525:     msg_idx++;",
          "526:   } while (T_h323_message_body_vals[msg_idx].strptr);",
          "528:   msg_idx = 0;",
          "529:   do",
          "530:   {",
          "531:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "532:       GatekeeperRejectReason_vals[msg_idx].strptr",
          "533:       ? GatekeeperRejectReason_vals[msg_idx].strptr",
          "534:       : \"Unknown gatekeeper reject reason\";",
          "535:     grj_reason_idx[msg_idx] = row_idx;",
          "537:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "538:     row_idx++;",
          "539:     msg_idx++;",
          "540:   } while (GatekeeperRejectReason_vals[msg_idx].strptr);",
          "542:   msg_idx = 0;",
          "543:   do",
          "544:   {",
          "545:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "546:       RegistrationRejectReason_vals[msg_idx].strptr",
          "547:       ? RegistrationRejectReason_vals[msg_idx].strptr",
          "548:       : \"Unknown registration reject reason\";",
          "549:     rrj_reason_idx[msg_idx] = row_idx;",
          "551:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "552:     row_idx++;",
          "553:     msg_idx++;",
          "554:   } while (RegistrationRejectReason_vals[msg_idx].strptr);",
          "556:   msg_idx = 0;",
          "557:   do",
          "558:   {",
          "559:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "560:       UnregRequestReason_vals[msg_idx].strptr",
          "561:       ? UnregRequestReason_vals[msg_idx].strptr",
          "562:       : \"Unknown unregistration request reason\";",
          "563:     urq_reason_idx[msg_idx] = row_idx;",
          "565:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "566:     row_idx++;",
          "567:     msg_idx++;",
          "568:   } while (UnregRequestReason_vals[msg_idx].strptr);",
          "570:   msg_idx = 0;",
          "571:   do",
          "572:   {",
          "573:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "574:       UnregRejectReason_vals[msg_idx].strptr",
          "575:       ? UnregRejectReason_vals[msg_idx].strptr",
          "576:       : \"Unknown unregistration reject reason\";",
          "577:     urj_reason_idx[msg_idx] = row_idx;",
          "579:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "580:     row_idx++;",
          "581:     msg_idx++;",
          "582:   } while (UnregRejectReason_vals[msg_idx].strptr);",
          "584:   msg_idx = 0;",
          "585:   do",
          "586:   {",
          "587:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "588:       AdmissionRejectReason_vals[msg_idx].strptr",
          "589:       ? AdmissionRejectReason_vals[msg_idx].strptr",
          "590:       : \"Unknown admission reject reason\";",
          "591:     arj_reason_idx[msg_idx] = row_idx;",
          "593:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "594:     row_idx++;",
          "595:     msg_idx++;",
          "596:   } while (AdmissionRejectReason_vals[msg_idx].strptr);",
          "598:   msg_idx = 0;",
          "599:   do",
          "600:   {",
          "601:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "602:       BandRejectReason_vals[msg_idx].strptr",
          "603:       ? BandRejectReason_vals[msg_idx].strptr",
          "604:       : \"Unknown band reject reason\";",
          "605:     brj_reason_idx[msg_idx] = row_idx;",
          "607:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "608:     row_idx++;",
          "609:     msg_idx++;",
          "610:   } while (BandRejectReason_vals[msg_idx].strptr);",
          "612:   msg_idx = 0;",
          "613:   do",
          "614:   {",
          "615:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "616:       DisengageReason_vals[msg_idx].strptr",
          "617:       ? DisengageReason_vals[msg_idx].strptr",
          "618:       : \"Unknown disengage reason\";",
          "619:     drq_reason_idx[msg_idx] = row_idx;",
          "621:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "622:     row_idx++;",
          "623:     msg_idx++;",
          "624:   } while (DisengageReason_vals[msg_idx].strptr);",
          "626:   msg_idx = 0;",
          "627:   do",
          "628:   {",
          "629:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "630:       DisengageRejectReason_vals[msg_idx].strptr",
          "631:       ? DisengageRejectReason_vals[msg_idx].strptr",
          "632:       : \"Unknown disengage reject reason\";",
          "633:     drj_reason_idx[msg_idx] = row_idx;",
          "635:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "636:     row_idx++;",
          "637:     msg_idx++;",
          "638:   } while (DisengageRejectReason_vals[msg_idx].strptr);",
          "640:   msg_idx = 0;",
          "641:   do",
          "642:   {",
          "643:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "644:       LocationRejectReason_vals[msg_idx].strptr",
          "645:       ? LocationRejectReason_vals[msg_idx].strptr",
          "646:       : \"Unknown location reject reason\";",
          "647:     lrj_reason_idx[msg_idx] = row_idx;",
          "649:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "650:     row_idx++;",
          "651:     msg_idx++;",
          "652:   } while (LocationRejectReason_vals[msg_idx].strptr);",
          "654:   msg_idx = 0;",
          "655:   do",
          "656:   {",
          "657:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "658:       InfoRequestNakReason_vals[msg_idx].strptr",
          "659:       ? InfoRequestNakReason_vals[msg_idx].strptr",
          "660:       : \"Unknown info request nak reason\";",
          "661:     irqnak_reason_idx[msg_idx] = row_idx;",
          "663:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "664:     row_idx++;",
          "665:     msg_idx++;",
          "666:   } while (InfoRequestNakReason_vals[msg_idx].strptr);",
          "668:   msg_idx = 0;",
          "669:   do",
          "670:   {",
          "671:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "672:       h225_ReleaseCompleteReason_vals[msg_idx].strptr",
          "673:       ? h225_ReleaseCompleteReason_vals[msg_idx].strptr",
          "674:       : \"Unknown release complete reason\";",
          "675:     rel_cmp_reason_idx[msg_idx] = row_idx;",
          "677:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "678:     row_idx++;",
          "679:     msg_idx++;",
          "680:   } while (h225_ReleaseCompleteReason_vals[msg_idx].strptr);",
          "682:   msg_idx = 0;",
          "683:   do",
          "684:   {",
          "685:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "686:       FacilityReason_vals[msg_idx].strptr",
          "687:       ? FacilityReason_vals[msg_idx].strptr",
          "688:       : \"Unknown facility reason\";",
          "689:     facility_reason_idx[msg_idx] = row_idx;",
          "691:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "692:     row_idx++;",
          "693:     msg_idx++;",
          "694:   } while (FacilityReason_vals[msg_idx].strptr);",
          "697:   items[MESSAGE_TYPE_COLUMN].value.string_value = \"Unknown H.225 message\";",
          "698:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "699:   other_idx = row_idx;",
          "705:   new_stat_data_t* stat_data = (new_stat_data_t*)tapdata;",
          "706:   const h225_packet_info *hpi = (const h225_packet_info *)hpi_ptr;",
          "707:   int tag_idx = -1;",
          "708:   int reason_idx = -1;",
          "711:     return FALSE;",
          "712:   }",
          "714:   switch (hpi->msg_type) {",
          "716:   case H225_RAS:",
          "717:     tag_idx = ras_msg_idx[MIN(hpi->msg_tag, (int)RAS_MSG_TYPES-1)];",
          "721:       break;",
          "722:     }",
          "724:     switch(hpi->msg_tag) {",
          "727:       reason_idx = grj_reason_idx[MIN(hpi->reason, (int)GRJ_REASONS-1)];",
          "728:       break;",
          "730:       reason_idx = rrj_reason_idx[MIN(hpi->reason, (int)RRJ_REASONS-1)];",
          "731:       break;",
          "733:       reason_idx = urq_reason_idx[MIN(hpi->reason, (int)URQ_REASONS-1)];",
          "734:       break;",
          "736:       reason_idx = urj_reason_idx[MIN(hpi->reason, (int)URJ_REASONS-1)];",
          "737:       break;",
          "739:       reason_idx = arj_reason_idx[MIN(hpi->reason, (int)ARJ_REASONS-1)];",
          "740:       break;",
          "742:       reason_idx = brj_reason_idx[MIN(hpi->reason, (int)BRJ_REASONS-1)];",
          "743:       break;",
          "745:       reason_idx = drq_reason_idx[MIN(hpi->reason, (int)DRQ_REASONS-1)];",
          "746:       break;",
          "748:       reason_idx = drj_reason_idx[MIN(hpi->reason, (int)DRJ_REASONS-1)];",
          "749:       break;",
          "751:       reason_idx = lrj_reason_idx[MIN(hpi->reason, (int)LRJ_REASONS-1)];",
          "752:       break;",
          "754:       reason_idx = irqnak_reason_idx[MIN(hpi->reason, (int)IRQNAK_REASONS-1)];",
          "755:       break;",
          "756:     default:",
          "758:       break;",
          "759:     }",
          "761:     break;",
          "763:   case H225_CS:",
          "764:     tag_idx = cs_msg_idx[MIN(hpi->msg_tag, (int)CS_MSG_TYPES-1)];",
          "768:       break;",
          "769:     }",
          "771:     switch(hpi->msg_tag) {",
          "774:       reason_idx = rel_cmp_reason_idx[MIN(hpi->reason, (int)REL_CMP_REASONS-1)];",
          "775:       break;",
          "777:       reason_idx = facility_reason_idx[MIN(hpi->reason, (int)FACILITY_REASONS-1)];",
          "778:       break;",
          "779:     default:",
          "781:       break;",
          "782:     }",
          "784:     break;",
          "786:   case H225_OTHERS:",
          "787:   default:",
          "788:     tag_idx = other_idx;",
          "789:   }",
          "791:   if (tag_idx >= 0) {",
          "792:     new_stat_tap_table*table = g_array_index(stat_data->new_stat_tap_data->tables, new_stat_tap_table*, 0);",
          "793:     stat_tap_table_item_type* msg_data = new_stat_tap_get_field_data(table, tag_idx, COUNT_COLUMN);;",
          "794:     msg_data->value.uint_value++;",
          "795:     new_stat_tap_set_field_data(table, tag_idx, COUNT_COLUMN, msg_data);",
          "797:     if (reason_idx >= 0) {",
          "798:       msg_data = new_stat_tap_get_field_data(table, reason_idx, COUNT_COLUMN);;",
          "799:       msg_data->value.uint_value++;",
          "800:       new_stat_tap_set_field_data(table, reason_idx, COUNT_COLUMN, msg_data);",
          "801:     }",
          "803:     return TRUE;",
          "804:   }",
          "805:   return FALSE;",
          "811:   guint element;",
          "812:   stat_tap_table_item_type* item_data;",
          "814:   for (element = 0; element < table->num_elements; element++)",
          "815:   {",
          "816:     item_data = new_stat_tap_get_field_data(table, element, COUNT_COLUMN);",
          "817:     item_data->value.uint_value = 0;",
          "818:     new_stat_tap_set_field_data(table, element, COUNT_COLUMN, item_data);",
          "819:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "826:   static hf_register_info hf[] = {",
          "846: #include \"packet-h225-hfarr.c\"",
          "852: #include \"packet-h225-ettarr.c\"",
          "930: }",
          "",
          "[Removed Lines]",
          "827:  { &hf_h221Manufacturer,",
          "828:   { \"H.225 Manufacturer\", \"h225.Manufacturer\", FT_UINT32, BASE_HEX,",
          "829:   VALS(H221ManufacturerCode_vals), 0, \"h225.H.221 Manufacturer\", HFILL }},",
          "830:  { &hf_h225_ras_req_frame,",
          "831:         { \"RAS Request Frame\", \"h225.ras.reqframe\", FT_FRAMENUM, BASE_NONE,",
          "832:         NULL, 0, NULL, HFILL }},",
          "833:    { &hf_h225_ras_rsp_frame,",
          "834:         { \"RAS Response Frame\", \"h225.ras.rspframe\", FT_FRAMENUM, BASE_NONE,",
          "835:         NULL, 0, NULL, HFILL }},",
          "836:    { &hf_h225_ras_dup,",
          "837:         { \"Duplicate RAS Message\", \"h225.ras.dup\", FT_UINT32, BASE_DEC,",
          "838:   NULL, 0, NULL, HFILL }},",
          "839:    { &hf_h225_ras_deltatime,",
          "840:         { \"RAS Service Response Time\", \"h225.ras.timedelta\", FT_RELATIVE_TIME, BASE_NONE,",
          "841:         NULL, 0, \"Timedelta between RAS-Request and RAS-Response\", HFILL }},",
          "842:    { &hf_h225_debug_dissector_try_string,",
          "843:         { \"*** DEBUG dissector_try_string\", \"h225.debug.dissector_try_string\", FT_STRING, BASE_NONE,",
          "844:         NULL, 0, NULL, HFILL }},",
          "847:  };",
          "850:  static gint *ett[] = {",
          "851:   &ett_h225,",
          "853:  };",
          "855:  static tap_param h225_stat_params[] = {",
          "856:   { PARAM_FILTER, \"filter\", \"Filter\", NULL, TRUE }",
          "857:  };",
          "859:  static new_stat_tap_ui h225_stat_table = {",
          "860:   REGISTER_STAT_GROUP_TELEPHONY,",
          "861:   \"H.225\",",
          "862:   PFNAME,",
          "863:   \"h225,counter\",",
          "864:   h225_stat_init,",
          "865:   h225_stat_packet,",
          "866:   h225_stat_reset,",
          "867:   NULL,",
          "868:   NULL,",
          "869:   sizeof(h225_stat_fields)/sizeof(stat_tap_table_item), h225_stat_fields,",
          "870:   sizeof(h225_stat_params)/sizeof(tap_param), h225_stat_params,",
          "871:   NULL",
          "872:  };",
          "874:  module_t *h225_module;",
          "875:  int proto_h225_ras;",
          "878:  proto_h225 = proto_register_protocol(PNAME, PSNAME, PFNAME);",
          "881:  proto_h225_ras = proto_register_protocol(\"H.225 RAS\", \"H.225 RAS\", \"h225_ras\");",
          "884:  proto_register_field_array(proto_h225, hf, array_length(hf));",
          "885:  proto_register_subtree_array(ett, array_length(ett));",
          "887:  h225_module = prefs_register_protocol(proto_h225, proto_reg_handoff_h225);",
          "888:  prefs_register_uint_preference(h225_module, \"tls.port\",",
          "889:   \"H.225 TLS Port\",",
          "890:   \"H.225 Server TLS Port\",",
          "891:   10, &h225_tls_port);",
          "892:  prefs_register_bool_preference(h225_module, \"reassembly\",",
          "893:   \"Reassemble H.225 messages spanning multiple TCP segments\",",
          "894:   \"Whether the H.225 dissector should reassemble messages spanning multiple TCP segments.\"",
          "895:   \" To use this option, you must also enable \\\"Allow subdissectors to reassemble TCP streams\\\" in the TCP protocol settings.\",",
          "896:   &h225_reassembly);",
          "897:  prefs_register_bool_preference(h225_module, \"h245_in_tree\",",
          "898:   \"Display tunnelled H.245 inside H.225.0 tree\",",
          "899:   \"ON - display tunnelled H.245 inside H.225.0 tree, OFF - display tunnelled H.245 in root tree after H.225.0\",",
          "900:   &h225_h245_in_tree);",
          "901:  prefs_register_bool_preference(h225_module, \"tp_in_tree\",",
          "902:   \"Display tunnelled protocols inside H.225.0 tree\",",
          "903:   \"ON - display tunnelled protocols inside H.225.0 tree, OFF - display tunnelled protocols in root tree after H.225.0\",",
          "904:   &h225_tp_in_tree);",
          "906:  new_register_dissector(PFNAME, dissect_h225_H323UserInformation, proto_h225);",
          "907:  new_register_dissector(\"h323ui\",dissect_h225_H323UserInformation, proto_h225);",
          "908:  new_register_dissector(\"h225.ras\", dissect_h225_h225_RasMessage, proto_h225);",
          "910:  nsp_object_dissector_table = register_dissector_table(\"h225.nsp.object\", \"H.225 NonStandardParameter (object)\", FT_STRING, BASE_NONE);",
          "911:  nsp_h221_dissector_table = register_dissector_table(\"h225.nsp.h221\", \"H.225 NonStandardParameter (h221)\", FT_UINT32, BASE_HEX);",
          "912:  tp_dissector_table = register_dissector_table(\"h225.tp\", \"H.225 TunnelledProtocol\", FT_STRING, BASE_NONE);",
          "913:  gef_name_dissector_table = register_dissector_table(\"h225.gef.name\", \"H.225 Generic Extensible Framework (names)\", FT_STRING, BASE_NONE);",
          "914:  gef_content_dissector_table = register_dissector_table(\"h225.gef.content\", \"H.225 Generic Extensible Framework\", FT_STRING, BASE_NONE);",
          "916:  register_init_routine(&h225_init_routine);",
          "917:  register_cleanup_routine(&h225_cleanup_routine);",
          "918:  h225_tap = register_tap(PFNAME);",
          "920:  register_rtd_table(proto_h225_ras, PFNAME, NUM_RAS_STATS, 1, ras_message_category, h225rassrt_packet, NULL);",
          "922:  register_new_stat_tap_ui(&h225_stat_table);",
          "924:  oid_add_from_string(\"Version 1\",\"0.0.8.2250.0.1\");",
          "925:  oid_add_from_string(\"Version 2\",\"0.0.8.2250.0.2\");",
          "926:  oid_add_from_string(\"Version 3\",\"0.0.8.2250.0.3\");",
          "927:  oid_add_from_string(\"Version 4\",\"0.0.8.2250.0.4\");",
          "928:  oid_add_from_string(\"Version 5\",\"0.0.8.2250.0.5\");",
          "929:  oid_add_from_string(\"Version 6\",\"0.0.8.2250.0.6\");",
          "",
          "[Added Lines]",
          "827:   { &hf_h221Manufacturer,",
          "828:     { \"H.225 Manufacturer\", \"h225.Manufacturer\", FT_UINT32, BASE_HEX,",
          "829:     VALS(H221ManufacturerCode_vals), 0, \"h225.H.221 Manufacturer\", HFILL }},",
          "831:   { &hf_h225_ras_req_frame,",
          "832:     { \"RAS Request Frame\", \"h225.ras.reqframe\", FT_FRAMENUM, BASE_NONE,",
          "833:     NULL, 0, NULL, HFILL }},",
          "835:   { &hf_h225_ras_rsp_frame,",
          "836:     { \"RAS Response Frame\", \"h225.ras.rspframe\", FT_FRAMENUM, BASE_NONE,",
          "837:     NULL, 0, NULL, HFILL }},",
          "839:   { &hf_h225_ras_dup,",
          "840:     { \"Duplicate RAS Message\", \"h225.ras.dup\", FT_UINT32, BASE_DEC,",
          "841:     NULL, 0, NULL, HFILL }},",
          "843:   { &hf_h225_ras_deltatime,",
          "844:     { \"RAS Service Response Time\", \"h225.ras.timedelta\", FT_RELATIVE_TIME, BASE_NONE,",
          "845:     NULL, 0, \"Timedelta between RAS-Request and RAS-Response\", HFILL }},",
          "847:   { &hf_h225_debug_dissector_try_string,",
          "848:     { \"*** DEBUG dissector_try_string\", \"h225.debug.dissector_try_string\", FT_STRING, BASE_NONE,",
          "849:     NULL, 0, NULL, HFILL }},",
          "852:   };",
          "855:   static gint *ett[] = {",
          "856:     &ett_h225,",
          "858:   };",
          "860:   static tap_param h225_stat_params[] = {",
          "861:     { PARAM_FILTER, \"filter\", \"Filter\", NULL, TRUE }",
          "862:   };",
          "864:   static new_stat_tap_ui h225_stat_table = {",
          "865:     REGISTER_STAT_GROUP_TELEPHONY,",
          "866:     \"H.225\",",
          "867:     PFNAME,",
          "868:     \"h225,counter\",",
          "869:     h225_stat_init,",
          "870:     h225_stat_packet,",
          "871:     h225_stat_reset,",
          "872:     NULL,",
          "873:     NULL,",
          "874:     sizeof(h225_stat_fields)/sizeof(stat_tap_table_item), h225_stat_fields,",
          "875:     sizeof(h225_stat_params)/sizeof(tap_param), h225_stat_params,",
          "876:     NULL",
          "877:   };",
          "879:   module_t *h225_module;",
          "880:   int proto_h225_ras;",
          "883:   proto_h225 = proto_register_protocol(PNAME, PSNAME, PFNAME);",
          "886:   proto_h225_ras = proto_register_protocol(\"H.225 RAS\", \"H.225 RAS\", \"h225_ras\");",
          "889:   proto_register_field_array(proto_h225, hf, array_length(hf));",
          "890:   proto_register_subtree_array(ett, array_length(ett));",
          "892:   h225_module = prefs_register_protocol(proto_h225, proto_reg_handoff_h225);",
          "893:   prefs_register_uint_preference(h225_module, \"tls.port\",",
          "894:     \"H.225 TLS Port\",",
          "895:     \"H.225 Server TLS Port\",",
          "896:     10, &h225_tls_port);",
          "897:   prefs_register_bool_preference(h225_module, \"reassembly\",",
          "898:     \"Reassemble H.225 messages spanning multiple TCP segments\",",
          "899:     \"Whether the H.225 dissector should reassemble messages spanning multiple TCP segments.\"",
          "900:     \" To use this option, you must also enable \\\"Allow subdissectors to reassemble TCP streams\\\" in the TCP protocol settings.\",",
          "901:     &h225_reassembly);",
          "902:   prefs_register_bool_preference(h225_module, \"h245_in_tree\",",
          "903:     \"Display tunnelled H.245 inside H.225.0 tree\",",
          "904:     \"ON - display tunnelled H.245 inside H.225.0 tree, OFF - display tunnelled H.245 in root tree after H.225.0\",",
          "905:     &h225_h245_in_tree);",
          "906:   prefs_register_bool_preference(h225_module, \"tp_in_tree\",",
          "907:     \"Display tunnelled protocols inside H.225.0 tree\",",
          "908:     \"ON - display tunnelled protocols inside H.225.0 tree, OFF - display tunnelled protocols in root tree after H.225.0\",",
          "909:     &h225_tp_in_tree);",
          "911:   new_register_dissector(PFNAME, dissect_h225_H323UserInformation, proto_h225);",
          "912:   new_register_dissector(\"h323ui\",dissect_h225_H323UserInformation, proto_h225);",
          "913:   new_register_dissector(\"h225.ras\", dissect_h225_h225_RasMessage, proto_h225);",
          "915:   nsp_object_dissector_table = register_dissector_table(\"h225.nsp.object\", \"H.225 NonStandardParameter (object)\", FT_STRING, BASE_NONE);",
          "916:   nsp_h221_dissector_table = register_dissector_table(\"h225.nsp.h221\", \"H.225 NonStandardParameter (h221)\", FT_UINT32, BASE_HEX);",
          "917:   tp_dissector_table = register_dissector_table(\"h225.tp\", \"H.225 TunnelledProtocol\", FT_STRING, BASE_NONE);",
          "918:   gef_name_dissector_table = register_dissector_table(\"h225.gef.name\", \"H.225 Generic Extensible Framework (names)\", FT_STRING, BASE_NONE);",
          "919:   gef_content_dissector_table = register_dissector_table(\"h225.gef.content\", \"H.225 Generic Extensible Framework\", FT_STRING, BASE_NONE);",
          "921:   register_init_routine(&h225_init_routine);",
          "922:   register_cleanup_routine(&h225_cleanup_routine);",
          "923:   h225_tap = register_tap(PFNAME);",
          "925:   register_rtd_table(proto_h225_ras, PFNAME, NUM_RAS_STATS, 1, ras_message_category, h225rassrt_packet, NULL);",
          "927:   register_new_stat_tap_ui(&h225_stat_table);",
          "929:   oid_add_from_string(\"Version 1\",\"0.0.8.2250.0.1\");",
          "930:   oid_add_from_string(\"Version 2\",\"0.0.8.2250.0.2\");",
          "931:   oid_add_from_string(\"Version 3\",\"0.0.8.2250.0.3\");",
          "932:   oid_add_from_string(\"Version 4\",\"0.0.8.2250.0.4\");",
          "933:   oid_add_from_string(\"Version 5\",\"0.0.8.2250.0.5\");",
          "934:   oid_add_from_string(\"Version 6\",\"0.0.8.2250.0.6\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "934: void",
          "935: proto_reg_handoff_h225(void)",
          "936: {",
          "957: }",
          "960: static void reset_h225_packet_info(h225_packet_info *pi)",
          "961: {",
          "982: }",
          "1009: #define THRESHOLD_REPEATED_RESPONDED_CALL 300",
          "",
          "[Removed Lines]",
          "937:  static gboolean h225_prefs_initialized = FALSE;",
          "938:  static dissector_handle_t h225ras_handle;",
          "939:  static guint saved_h225_tls_port;",
          "941:  if (!h225_prefs_initialized) {",
          "942:   h225ras_handle=find_dissector(\"h225.ras\");",
          "943:   dissector_add_uint(\"udp.port\", UDP_PORT_RAS1, h225ras_handle);",
          "944:   dissector_add_uint(\"udp.port\", UDP_PORT_RAS2, h225ras_handle);",
          "946:   h245_handle = find_dissector(\"h245\");",
          "947:   h245dg_handle = find_dissector(\"h245dg\");",
          "948:   h4501_handle = find_dissector(\"h4501\");",
          "949:   data_handle = find_dissector(\"data\");",
          "950:   h225_prefs_initialized = TRUE;",
          "951:  } else {",
          "952:   ssl_dissector_delete(saved_h225_tls_port, \"q931.tpkt\", TRUE);",
          "953:  }",
          "955:  saved_h225_tls_port = h225_tls_port;",
          "956:  ssl_dissector_add(saved_h225_tls_port, \"q931.tpkt\", TRUE);",
          "962:  if(pi == NULL) {",
          "963:   return;",
          "964:  }",
          "966:  pi->msg_type = H225_OTHERS;",
          "967:  pi->cs_type = H225_OTHER;",
          "968:  pi->msg_tag = -1;",
          "969:  pi->reason = -1;",
          "970:  pi->requestSeqNum = 0;",
          "971:  memset(&pi->guid,0,sizeof pi->guid);",
          "972:  pi->is_duplicate = FALSE;",
          "973:  pi->request_available = FALSE;",
          "974:  pi->is_faststart = FALSE;",
          "975:  pi->is_h245 = FALSE;",
          "976:  pi->is_h245Tunneling = FALSE;",
          "977:  pi->h245_address = 0;",
          "978:  pi->h245_port = 0;",
          "979:  pi->frame_label[0] = '\\0';",
          "980:  pi->dialedDigits[0] = '\\0';",
          "981:  pi->is_destinationInfo = FALSE;",
          "985:  The following function contains the routines for RAS request/response matching.",
          "986:  A RAS response matches with a request, if both messages have the same",
          "987:  RequestSequenceNumber, belong to the same IP conversation and belong to the same",
          "988:  RAS \"category\" (e.g. Admission, Registration).",
          "990:  We use hashtables to access the lists of RAS calls (request/response pairs).",
          "991:  We have one hashtable for each RAS category. The hashkeys consist of the",
          "992:  non-unique 16-bit RequestSequenceNumber and values representing the conversation.",
          "994:  In big capture files, we might get different requests with identical keys.",
          "995:  These requests aren't necessarily duplicates. They might be valid new requests.",
          "996:  At the moment we just use the timedelta between the last valid and the new request",
          "997:  to decide if the new request is a duplicate or not. There might be better ways.",
          "998:  Two thresholds are defined below.",
          "1000:  However the decision is made, another problem arises. We can't just add those",
          "1001:  requests to our hashtables. Instead we create lists of RAS calls with identical keys.",
          "1002:  The hashtables for RAS calls contain now pointers to the first RAS call in a list of",
          "1003:  RAS calls with identical keys.",
          "1004:  These lists aren't expected to contain more than 3 items and are usually single item",
          "1005:  lists. So we don't need an expensive but intelligent way to access these lists",
          "1006:  (e.g. hashtables). Just walk through such a list.",
          "",
          "[Added Lines]",
          "942:   static gboolean h225_prefs_initialized = FALSE;",
          "943:   static dissector_handle_t h225ras_handle;",
          "944:   static guint saved_h225_tls_port;",
          "946:   if (!h225_prefs_initialized) {",
          "947:     h225ras_handle=find_dissector(\"h225.ras\");",
          "948:     dissector_add_uint(\"udp.port\", UDP_PORT_RAS1, h225ras_handle);",
          "949:     dissector_add_uint(\"udp.port\", UDP_PORT_RAS2, h225ras_handle);",
          "951:     h245_handle = find_dissector(\"h245\");",
          "952:     h245dg_handle = find_dissector(\"h245dg\");",
          "953:     h4501_handle = find_dissector(\"h4501\");",
          "954:     data_handle = find_dissector(\"data\");",
          "955:     h225_prefs_initialized = TRUE;",
          "956:   } else {",
          "957:     ssl_dissector_delete(saved_h225_tls_port, \"q931.tpkt\", TRUE);",
          "958:   }",
          "960:   saved_h225_tls_port = h225_tls_port;",
          "961:   ssl_dissector_add(saved_h225_tls_port, \"q931.tpkt\", TRUE);",
          "967:   if(pi == NULL) {",
          "968:     return;",
          "969:   }",
          "971:   pi->msg_type = H225_OTHERS;",
          "972:   pi->cs_type = H225_OTHER;",
          "973:   pi->msg_tag = -1;",
          "974:   pi->reason = -1;",
          "975:   pi->requestSeqNum = 0;",
          "976:   memset(&pi->guid,0,sizeof pi->guid);",
          "977:   pi->is_duplicate = FALSE;",
          "978:   pi->request_available = FALSE;",
          "979:   pi->is_faststart = FALSE;",
          "980:   pi->is_h245 = FALSE;",
          "981:   pi->is_h245Tunneling = FALSE;",
          "982:   pi->h245_address = 0;",
          "983:   pi->h245_port = 0;",
          "984:   pi->frame_label[0] = '\\0';",
          "985:   pi->dialedDigits[0] = '\\0';",
          "986:   pi->is_destinationInfo = FALSE;",
          "990:   The following function contains the routines for RAS request/response matching.",
          "991:   A RAS response matches with a request, if both messages have the same",
          "992:   RequestSequenceNumber, belong to the same IP conversation and belong to the same",
          "993:   RAS \"category\" (e.g. Admission, Registration).",
          "995:   We use hashtables to access the lists of RAS calls (request/response pairs).",
          "996:   We have one hashtable for each RAS category. The hashkeys consist of the",
          "997:   non-unique 16-bit RequestSequenceNumber and values representing the conversation.",
          "999:   In big capture files, we might get different requests with identical keys.",
          "1000:   These requests aren't necessarily duplicates. They might be valid new requests.",
          "1001:   At the moment we just use the timedelta between the last valid and the new request",
          "1002:   to decide if the new request is a duplicate or not. There might be better ways.",
          "1003:   Two thresholds are defined below.",
          "1005:   However the decision is made, another problem arises. We can't just add those",
          "1006:   requests to our hashtables. Instead we create lists of RAS calls with identical keys.",
          "1007:   The hashtables for RAS calls contain now pointers to the first RAS call in a list of",
          "1008:   RAS calls with identical keys.",
          "1009:   These lists aren't expected to contain more than 3 items and are usually single item",
          "1010:   lists. So we don't need an expensive but intelligent way to access these lists",
          "1011:   (e.g. hashtables). Just walk through such a list.",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1012: static void ras_call_matching(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, h225_packet_info *pi)",
          "1013: {",
          "1165: }",
          "",
          "[Removed Lines]",
          "1014:  proto_item *hidden_item;",
          "1015:  conversation_t* conversation = NULL;",
          "1016:  h225ras_call_info_key h225ras_call_key;",
          "1017:  h225ras_call_t *h225ras_call = NULL;",
          "1018:  nstime_t delta;",
          "1019:  guint msg_category;",
          "1021:  if(pi->msg_type == H225_RAS && pi->msg_tag < 21) {",
          "1024:   msg_category = pi->msg_tag / 3;",
          "1026:    conversation = find_or_create_conversation(pinfo);",
          "1029:    h225ras_call_key.reqSeqNum = pi->requestSeqNum;",
          "1030:    h225ras_call_key.conversation = conversation;",
          "1033:    h225ras_call = find_h225ras_call(&h225ras_call_key ,msg_category);",
          "1035:    if (h225ras_call != NULL) {",
          "1037:        source and destination, before - do we have",
          "1040:     do {",
          "1041:      if (pinfo->fd->num == h225ras_call->req_num) {",
          "1043:       break;",
          "1044:      }",
          "1047:      if (h225ras_call->next_call == NULL) {",
          "1048:       if ( (pinfo->fd->num > h225ras_call->rsp_num && h225ras_call->rsp_num != 0",
          "1049:          && pinfo->fd->abs_ts.secs > (h225ras_call->req_time.secs + THRESHOLD_REPEATED_RESPONDED_CALL) )",
          "1050:          ||(pinfo->fd->num > h225ras_call->req_num && h225ras_call->rsp_num == 0",
          "1051:          && pinfo->fd->abs_ts.secs > (h225ras_call->req_time.secs + THRESHOLD_REPEATED_NOT_RESPONDED_CALL) ) )",
          "1052:       {",
          "1054:           and this request appears after last response (has bigger frame number)",
          "1055:           and last request occurred more than 300 seconds ago,",
          "1056:           or if last request hasn't been responded",
          "1057:           and this request appears after last request (has bigger frame number)",
          "1058:           and last request occurred more than 1800 seconds ago,",
          "1061:        h225ras_call = append_h225ras_call(h225ras_call, pinfo, &pi->guid, msg_category);",
          "1062:       } else {",
          "1065:        pi->is_duplicate = TRUE;",
          "1066:        hidden_item = proto_tree_add_uint(tree, hf_h225_ras_dup, tvb, 0,0, pi->requestSeqNum);",
          "1067:        PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "1068:       }",
          "1069:       break;",
          "1070:      }",
          "1071:      h225ras_call = h225ras_call->next_call;",
          "1072:     } while (h225ras_call != NULL );",
          "1073:    }",
          "1074:    else {",
          "1075:     h225ras_call = new_h225ras_call(&h225ras_call_key, pinfo, &pi->guid, msg_category);",
          "1076:    }",
          "1079:    if(h225ras_call && h225ras_call->rsp_num != 0){",
          "1080:     proto_item *ti =",
          "1081:     proto_tree_add_uint_format(tree, hf_h225_ras_rsp_frame, tvb, 0, 0, h225ras_call->rsp_num,",
          "1082:                                 \"The response to this request is in frame %u\",",
          "1083:                                 h225ras_call->rsp_num);",
          "1084:     PROTO_ITEM_SET_GENERATED(ti);",
          "1085:    }",
          "1088:   }",
          "1090:    conversation = find_conversation(pinfo->fd->num, &pinfo->src,",
          "1091:         &pinfo->dst, pinfo->ptype, pinfo->srcport,",
          "1092:       pinfo->destport, 0);",
          "1093:      if (conversation != NULL) {",
          "1096:     h225ras_call_key.reqSeqNum = pi->requestSeqNum;",
          "1097:     h225ras_call_key.conversation = conversation;",
          "1098:     h225ras_call = find_h225ras_call(&h225ras_call_key ,msg_category);",
          "1099:     if(h225ras_call) {",
          "1101:      do {",
          "1102:       if (pinfo->fd->num == h225ras_call->rsp_num) {",
          "1104:        break;",
          "1105:       }",
          "1108:       if(h225ras_call->next_call == NULL) {",
          "1109:        break;",
          "1110:       }",
          "1111:       h225ras_call = h225ras_call->next_call;",
          "1112:      } while (h225ras_call != NULL) ;",
          "1114:      if (!h225ras_call) {",
          "1115:       return;",
          "1116:      }",
          "1119:      if (msg_category == 3 || msg_category == 5) {",
          "1120:       pi->guid = h225ras_call->guid;",
          "1121:       hidden_item = proto_tree_add_guid(tree, hf_h225_guid, tvb, 0, GUID_LEN, &pi->guid);",
          "1122:       PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "1123:      }",
          "1125:      if (h225ras_call->rsp_num == 0) {",
          "1127:          this must be the first response; remember its",
          "1129:       h225ras_call->rsp_num = pinfo->fd->num;",
          "1130:      }",
          "1131:      else {",
          "1134:       if (h225ras_call->rsp_num != pinfo->fd->num) {",
          "1137:        pi->is_duplicate = TRUE;",
          "1138:        hidden_item = proto_tree_add_uint(tree, hf_h225_ras_dup, tvb, 0,0, pi->requestSeqNum);",
          "1139:        PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "1140:       }",
          "1141:      }",
          "1143:      if(h225ras_call->req_num != 0){",
          "1144:       proto_item *ti;",
          "1145:       h225ras_call->responded = TRUE;",
          "1146:       pi->request_available = TRUE;",
          "1149:       ti = proto_tree_add_uint_format(tree, hf_h225_ras_req_frame, tvb, 0, 0, h225ras_call->req_num,",
          "1150:        \"This is a response to a request in frame %u\", h225ras_call->req_num);",
          "1151:       PROTO_ITEM_SET_GENERATED(ti);",
          "1154:       nstime_delta(&delta, &pinfo->fd->abs_ts, &h225ras_call->req_time);",
          "1158:       ti = proto_tree_add_time(tree, hf_h225_ras_deltatime, tvb, 0, 0, &(pi->delta_time));",
          "1159:       PROTO_ITEM_SET_GENERATED(ti);",
          "1160:      }",
          "1161:     }",
          "1162:    }",
          "1163:   }",
          "1164:  }",
          "",
          "[Added Lines]",
          "1019:   proto_item *hidden_item;",
          "1020:   conversation_t* conversation = NULL;",
          "1021:   h225ras_call_info_key h225ras_call_key;",
          "1022:   h225ras_call_t *h225ras_call = NULL;",
          "1023:   nstime_t delta;",
          "1024:   guint msg_category;",
          "1026:   if(pi->msg_type == H225_RAS && pi->msg_tag < 21) {",
          "1029:     msg_category = pi->msg_tag / 3;",
          "1031:       conversation = find_or_create_conversation(pinfo);",
          "1034:       h225ras_call_key.reqSeqNum = pi->requestSeqNum;",
          "1035:       h225ras_call_key.conversation = conversation;",
          "1038:       h225ras_call = find_h225ras_call(&h225ras_call_key ,msg_category);",
          "1040:       if (h225ras_call != NULL) {",
          "1042:            source and destination, before - do we have",
          "1045:         do {",
          "1046:           if (pinfo->fd->num == h225ras_call->req_num) {",
          "1048:             break;",
          "1049:           }",
          "1052:           if (h225ras_call->next_call == NULL) {",
          "1053:             if ( (pinfo->fd->num > h225ras_call->rsp_num && h225ras_call->rsp_num != 0",
          "1054:                && pinfo->fd->abs_ts.secs > (h225ras_call->req_time.secs + THRESHOLD_REPEATED_RESPONDED_CALL) )",
          "1055:                ||(pinfo->fd->num > h225ras_call->req_num && h225ras_call->rsp_num == 0",
          "1056:                && pinfo->fd->abs_ts.secs > (h225ras_call->req_time.secs + THRESHOLD_REPEATED_NOT_RESPONDED_CALL) ) )",
          "1057:             {",
          "1059:                  and this request appears after last response (has bigger frame number)",
          "1060:                  and last request occurred more than 300 seconds ago,",
          "1061:                  or if last request hasn't been responded",
          "1062:                  and this request appears after last request (has bigger frame number)",
          "1063:                  and last request occurred more than 1800 seconds ago,",
          "1066:               h225ras_call = append_h225ras_call(h225ras_call, pinfo, &pi->guid, msg_category);",
          "1067:             } else {",
          "1070:               pi->is_duplicate = TRUE;",
          "1071:               hidden_item = proto_tree_add_uint(tree, hf_h225_ras_dup, tvb, 0,0, pi->requestSeqNum);",
          "1072:               PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "1073:             }",
          "1074:             break;",
          "1075:           }",
          "1076:           h225ras_call = h225ras_call->next_call;",
          "1077:         } while (h225ras_call != NULL );",
          "1078:       }",
          "1079:       else {",
          "1080:         h225ras_call = new_h225ras_call(&h225ras_call_key, pinfo, &pi->guid, msg_category);",
          "1081:       }",
          "1084:       if(h225ras_call && h225ras_call->rsp_num != 0){",
          "1085:         proto_item *ti =",
          "1086:         proto_tree_add_uint_format(tree, hf_h225_ras_rsp_frame, tvb, 0, 0, h225ras_call->rsp_num,",
          "1087:                                      \"The response to this request is in frame %u\",",
          "1088:                                      h225ras_call->rsp_num);",
          "1089:         PROTO_ITEM_SET_GENERATED(ti);",
          "1090:       }",
          "1093:     }",
          "1095:       conversation = find_conversation(pinfo->fd->num, &pinfo->src,",
          "1096:         &pinfo->dst, pinfo->ptype, pinfo->srcport,",
          "1097:         pinfo->destport, 0);",
          "1098:       if (conversation != NULL) {",
          "1101:         h225ras_call_key.reqSeqNum = pi->requestSeqNum;",
          "1102:         h225ras_call_key.conversation = conversation;",
          "1103:         h225ras_call = find_h225ras_call(&h225ras_call_key ,msg_category);",
          "1104:         if(h225ras_call) {",
          "1106:           do {",
          "1107:             if (pinfo->fd->num == h225ras_call->rsp_num) {",
          "1109:               break;",
          "1110:             }",
          "1113:             if(h225ras_call->next_call == NULL) {",
          "1114:               break;",
          "1115:             }",
          "1116:             h225ras_call = h225ras_call->next_call;",
          "1117:           } while (h225ras_call != NULL) ;",
          "1119:           if (!h225ras_call) {",
          "1120:             return;",
          "1121:           }",
          "1124:           if (msg_category == 3 || msg_category == 5) {",
          "1125:             pi->guid = h225ras_call->guid;",
          "1126:             hidden_item = proto_tree_add_guid(tree, hf_h225_guid, tvb, 0, GUID_LEN, &pi->guid);",
          "1127:             PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "1128:           }",
          "1130:           if (h225ras_call->rsp_num == 0) {",
          "1132:                this must be the first response; remember its",
          "1134:             h225ras_call->rsp_num = pinfo->fd->num;",
          "1135:           }",
          "1136:           else {",
          "1139:             if (h225ras_call->rsp_num != pinfo->fd->num) {",
          "1142:               pi->is_duplicate = TRUE;",
          "1143:               hidden_item = proto_tree_add_uint(tree, hf_h225_ras_dup, tvb, 0,0, pi->requestSeqNum);",
          "1144:               PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "1145:             }",
          "1146:           }",
          "1148:           if(h225ras_call->req_num != 0){",
          "1149:             proto_item *ti;",
          "1150:             h225ras_call->responded = TRUE;",
          "1151:             pi->request_available = TRUE;",
          "1154:             ti = proto_tree_add_uint_format(tree, hf_h225_ras_req_frame, tvb, 0, 0, h225ras_call->req_num,",
          "1155:               \"This is a response to a request in frame %u\", h225ras_call->req_num);",
          "1156:             PROTO_ITEM_SET_GENERATED(ti);",
          "1159:             nstime_delta(&delta, &pinfo->fd->abs_ts, &h225ras_call->req_time);",
          "1163:             ti = proto_tree_add_time(tree, hf_h225_ras_deltatime, tvb, 0, 0, &(pi->delta_time));",
          "1164:             PROTO_ITEM_SET_GENERATED(ti);",
          "1165:           }",
          "1166:         }",
          "1167:       }",
          "1168:     }",
          "1169:   }",
          "",
          "---------------"
        ],
        "asn1/h225/packet-h225-template.h||asn1/h225/packet-h225-template.h": [
          "File: asn1/h225/packet-h225-template.h -> asn1/h225/packet-h225-template.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define PACKET_H225_H",
          "27: typedef enum _h225_msg_type {",
          "31: } h225_msg_type;",
          "33: typedef enum _h225_cs_type {",
          "48: } h225_cs_type;",
          "50: typedef struct _h225_packet_info {",
          "69: } h225_packet_info;",
          "",
          "[Removed Lines]",
          "28:  H225_RAS,",
          "29:  H225_CS,",
          "30:  H225_OTHERS",
          "34:     H225_SETUP,",
          "35:     H225_CALL_PROCEDING,",
          "36:     H225_CONNECT,",
          "37:     H225_ALERTING,",
          "38:     H225_INFORMATION,",
          "39:     H225_RELEASE_COMPLET,",
          "40:     H225_FACILITY,",
          "41:     H225_PROGRESS,",
          "42:     H225_EMPTY,",
          "43:     H225_STATUS,",
          "44:     H225_STATUS_INQUIRY,",
          "45:     H225_SETUP_ACK,",
          "46:     H225_NOTIFY,",
          "47:     H225_OTHER",
          "62:  gboolean is_h245;",
          "63:  gboolean is_h245Tunneling;",
          "64:  guint32 h245_address;",
          "65:  guint16 h245_port;",
          "67:  gboolean is_destinationInfo;",
          "",
          "[Added Lines]",
          "28:   H225_RAS,",
          "29:   H225_CS,",
          "30:   H225_OTHERS",
          "34:   H225_SETUP,",
          "35:   H225_CALL_PROCEDING,",
          "36:   H225_CONNECT,",
          "37:   H225_ALERTING,",
          "38:   H225_INFORMATION,",
          "39:   H225_RELEASE_COMPLET,",
          "40:   H225_FACILITY,",
          "41:   H225_PROGRESS,",
          "42:   H225_EMPTY,",
          "43:   H225_STATUS,",
          "44:   H225_STATUS_INQUIRY,",
          "45:   H225_SETUP_ACK,",
          "46:   H225_NOTIFY,",
          "47:   H225_OTHER",
          "62:   gboolean      is_h245;",
          "63:   gboolean      is_h245Tunneling;",
          "64:   guint32       h245_address;",
          "65:   guint16       h245_port;",
          "67:   gboolean      is_destinationInfo;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c": [
          "File: epan/dissectors/packet-h225.c -> epan/dissectors/packet-h225.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: typedef struct _h225ras_call_t {",
          "87: } h225ras_call_t;",
          "91: typedef struct _h225ras_call_info_key {",
          "94: } h225ras_call_info_key;",
          "",
          "[Removed Lines]",
          "80:  guint32 requestSeqNum;",
          "81:  e_guid_t guid;",
          "92:  guint reqSeqNum;",
          "93:  conversation_t *conversation;",
          "",
          "[Added Lines]",
          "80:   guint32 requestSeqNum;",
          "81:   e_guid_t guid;",
          "92:   guint reqSeqNum;",
          "93:   conversation_t *conversation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1184: static const char *tpOID;",
          "1186: static const value_string ras_message_category[] = {",
          "1195: };",
          "1197: typedef enum _ras_type {",
          "1202: }ras_type;",
          "1204: typedef enum _ras_category {",
          "1213: }ras_category;",
          "1215: #define NUM_RAS_STATS 7",
          "",
          "[Removed Lines]",
          "1187:  {  0, \"Gatekeeper    \"},",
          "1188:  {  1, \"Registration  \"},",
          "1189:  {  2, \"UnRegistration\"},",
          "1190:  {  3, \"Admission     \"},",
          "1191:  {  4, \"Bandwidth     \"},",
          "1192:  {  5, \"Disengage     \"},",
          "1193:  {  6, \"Location      \"},",
          "1194:  {  0, NULL }",
          "1198:  RAS_REQUEST,",
          "1199:  RAS_CONFIRM,",
          "1200:  RAS_REJECT,",
          "1201:  RAS_OTHER",
          "1205:  RAS_GATEKEEPER,",
          "1206:  RAS_REGISTRATION,",
          "1207:  RAS_UNREGISTRATION,",
          "1208:  RAS_ADMISSION,",
          "1209:  RAS_BANDWIDTH,",
          "1210:  RAS_DISENGAGE,",
          "1211:  RAS_LOCATION,",
          "1212:  RAS_OTHERS",
          "",
          "[Added Lines]",
          "1187:   {  0, \"Gatekeeper    \"},",
          "1188:   {  1, \"Registration  \"},",
          "1189:   {  2, \"UnRegistration\"},",
          "1190:   {  3, \"Admission     \"},",
          "1191:   {  4, \"Bandwidth     \"},",
          "1192:   {  5, \"Disengage     \"},",
          "1193:   {  6, \"Location      \"},",
          "1194:   {  0, NULL }",
          "1198:   RAS_REQUEST,",
          "1199:   RAS_CONFIRM,",
          "1200:   RAS_REJECT,",
          "1201:   RAS_OTHER",
          "1205:   RAS_GATEKEEPER,",
          "1206:   RAS_REGISTRATION,",
          "1207:   RAS_UNREGISTRATION,",
          "1208:   RAS_ADMISSION,",
          "1209:   RAS_BANDWIDTH,",
          "1210:   RAS_DISENGAGE,",
          "1211:   RAS_LOCATION,",
          "1212:   RAS_OTHERS",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1217: static gboolean",
          "1218: h225rassrt_packet(void *phs, packet_info *pinfo _U_, epan_dissect_t *edt _U_, const void *phi)",
          "1219: {",
          "1274: }",
          "",
          "[Removed Lines]",
          "1220:  rtd_data_t* rtd_data = (rtd_data_t*)phs;",
          "1221:  rtd_stat_table* rs = &rtd_data->stat_table;",
          "1222:  const h225_packet_info *pi=(const h225_packet_info *)phi;",
          "1224:  ras_type rasmsg_type = RAS_OTHER;",
          "1225:  ras_category rascategory = RAS_OTHERS;",
          "1227:  if (pi->msg_type != H225_RAS || pi->msg_tag == -1) {",
          "1229:   return FALSE;",
          "1230:  }",
          "1232:  if (pi->msg_tag < 21) {",
          "1234:   rascategory = (ras_category)(pi->msg_tag / 3);",
          "1235:   rasmsg_type = (ras_type)(pi->msg_tag % 3);",
          "1236:  }",
          "1237:  else {",
          "1239:   return FALSE;",
          "1240:  }",
          "1242:  switch(rasmsg_type) {",
          "1244:  case RAS_REQUEST:",
          "1245:   if(pi->is_duplicate){",
          "1246:    rs->time_stats[rascategory].req_dup_num++;",
          "1247:   }",
          "1248:   else {",
          "1249:    rs->time_stats[rascategory].open_req_num++;",
          "1250:   }",
          "1251:   break;",
          "1253:  case RAS_CONFIRM:",
          "1255:  case RAS_REJECT:",
          "1256:   if(pi->is_duplicate){",
          "1258:    rs->time_stats[rascategory].rsp_dup_num++;",
          "1259:   }",
          "1260:   else if (!pi->request_available) {",
          "1262:    rs->time_stats[rascategory].disc_rsp_num++;",
          "1263:   }",
          "1264:   else {",
          "1265:    rs->time_stats[rascategory].open_req_num--;",
          "1266:    time_stat_update(&(rs->time_stats[rascategory].rtd[0]),&(pi->delta_time), pinfo);",
          "1267:   }",
          "1268:   break;",
          "1270:  default:",
          "1271:   return FALSE;",
          "1272:  }",
          "1273:  return TRUE;",
          "",
          "[Added Lines]",
          "1220:   rtd_data_t* rtd_data = (rtd_data_t*)phs;",
          "1221:   rtd_stat_table* rs = &rtd_data->stat_table;",
          "1222:   const h225_packet_info *pi=(const h225_packet_info *)phi;",
          "1224:   ras_type rasmsg_type = RAS_OTHER;",
          "1225:   ras_category rascategory = RAS_OTHERS;",
          "1227:   if (pi->msg_type != H225_RAS || pi->msg_tag == -1) {",
          "1229:     return FALSE;",
          "1230:   }",
          "1232:   if (pi->msg_tag < 21) {",
          "1234:     rascategory = (ras_category)(pi->msg_tag / 3);",
          "1235:     rasmsg_type = (ras_type)(pi->msg_tag % 3);",
          "1236:   }",
          "1237:   else {",
          "1239:     return FALSE;",
          "1240:   }",
          "1242:   switch(rasmsg_type) {",
          "1244:   case RAS_REQUEST:",
          "1245:     if(pi->is_duplicate){",
          "1246:       rs->time_stats[rascategory].req_dup_num++;",
          "1247:     }",
          "1248:     else {",
          "1249:       rs->time_stats[rascategory].open_req_num++;",
          "1250:     }",
          "1251:     break;",
          "1253:   case RAS_CONFIRM:",
          "1255:   case RAS_REJECT:",
          "1256:     if(pi->is_duplicate){",
          "1258:       rs->time_stats[rascategory].rsp_dup_num++;",
          "1259:     }",
          "1260:     else if (!pi->request_available) {",
          "1262:       rs->time_stats[rascategory].disc_rsp_num++;",
          "1263:     }",
          "1264:     else {",
          "1265:       rs->time_stats[rascategory].open_req_num--;",
          "1266:       time_stat_update(&(rs->time_stats[rascategory].rtd[0]),&(pi->delta_time), pinfo);",
          "1267:     }",
          "1268:     break;",
          "1270:   default:",
          "1271:     return FALSE;",
          "1272:   }",
          "1273:   return TRUE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1569: static int",
          "1570: dissect_h225_NonStandardIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1571: #line 591 \"../../asn1/h225/h225.cnf\"",
          "1577:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "1578:                                  ett_h225_NonStandardIdentifier, NonStandardIdentifier_choice,",
          "1579:                                  &value);",
          "1590:     }",
          "",
          "[Removed Lines]",
          "1572:  gint32 value;",
          "1574:  nsiOID = \"\";",
          "1575:  h221NonStandard = 0;",
          "1581:  switch (value) {",
          "1583:    nsp_handle = dissector_get_string_handle(nsp_object_dissector_table, nsiOID);",
          "1584:    break;",
          "1586:    nsp_handle = dissector_get_uint_handle(nsp_h221_dissector_table, h221NonStandard);",
          "1587:    break;",
          "1588:   default :",
          "1589:    nsp_handle = NULL;",
          "",
          "[Added Lines]",
          "1572:   gint32 value;",
          "1574:   nsiOID = \"\";",
          "1575:   h221NonStandard = 0;",
          "1581:   switch (value) {",
          "1583:       nsp_handle = dissector_get_string_handle(nsp_object_dissector_table, nsiOID);",
          "1584:       break;",
          "1586:       nsp_handle = dissector_get_uint_handle(nsp_h221_dissector_table, h221NonStandard);",
          "1587:       break;",
          "1588:     default :",
          "1589:       nsp_handle = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1655: static int",
          "1656: dissect_h225_H245TransportAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1657: #line 432 \"../../asn1/h225/h225.cnf\"",
          "1662:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1658:  ipv4_address=0;",
          "1659:  ipv4_port=0;",
          "",
          "[Added Lines]",
          "1658:   ipv4_address=0;",
          "1659:   ipv4_port=0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1664:                                  NULL);",
          "1666: #line 438 \"../../asn1/h225/h225.cnf\"",
          "1686:   return offset;",
          "",
          "[Removed Lines]",
          "1668:  h225_pi->is_h245 = TRUE;",
          "1669:  h225_pi->h245_address = ipv4_address;",
          "1670:  h225_pi->h245_port = ipv4_port;",
          "1672:  if((!actx->pinfo->fd->flags.visited) && ipv4_address!=0 && ipv4_port!=0 && h245_handle){",
          "1673:   address src_addr;",
          "1674:   conversation_t *conv=NULL;",
          "1676:   SET_ADDRESS(&src_addr, AT_IPv4, 4, &ipv4_address);",
          "1678:   conv=find_conversation(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR_B|NO_PORT_B);",
          "1679:   if(!conv){",
          "1680:    conv=conversation_new(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR2|NO_PORT2);",
          "1681:    conversation_set_dissector(conv, h245_handle);",
          "1682:   }",
          "1683:  }",
          "",
          "[Added Lines]",
          "1668:   h225_pi->is_h245 = TRUE;",
          "1669:   h225_pi->h245_address = ipv4_address;",
          "1670:   h225_pi->h245_port = ipv4_port;",
          "1672:   if((!actx->pinfo->fd->flags.visited) && ipv4_address!=0 && ipv4_port!=0 && h245_handle){",
          "1673:     address src_addr;",
          "1674:     conversation_t *conv=NULL;",
          "1676:     SET_ADDRESS(&src_addr, AT_IPv4, 4, &ipv4_address);",
          "1678:     conv=find_conversation(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR_B|NO_PORT_B);",
          "1679:     if(!conv){",
          "1680:       conv=conversation_new(actx->pinfo->fd->num, &src_addr, &src_addr, PT_TCP, ipv4_port, ipv4_port, NO_ADDR2|NO_PORT2);",
          "1681:       conversation_set_dissector(conv, h245_handle);",
          "1682:     }",
          "1683:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3205: static int",
          "3206: dissect_h225_FastStart_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3207: #line 268 \"../../asn1/h225/h225.cnf\"",
          "3212:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "3213:                                        NO_BOUND, NO_BOUND, FALSE, &value_tvb);",
          "3226:   return offset;",
          "",
          "[Removed Lines]",
          "3208:  tvbuff_t *value_tvb = NULL;",
          "3209:  char codec_str[50];",
          "3210:  codec_str[0] = '\\0';",
          "3215:  if (value_tvb && tvb_reported_length(value_tvb)) {",
          "3216:   dissect_h245_FastStart_OLC(value_tvb, actx->pinfo, tree, codec_str);",
          "3217:  }",
          "3220:     g_snprintf(h225_pi->frame_label, 50, \"%s %s\", h225_pi->frame_label, codec_str);",
          "3222:  contains_faststart = TRUE;",
          "3223:  h225_pi->is_faststart = TRUE;",
          "",
          "[Added Lines]",
          "3208:   tvbuff_t *value_tvb = NULL;",
          "3209:   char codec_str[50];",
          "3210:   codec_str[0] = '\\0';",
          "3215:   if (value_tvb && tvb_reported_length(value_tvb)) {",
          "3216:     dissect_h245_FastStart_OLC(value_tvb, actx->pinfo, tree, codec_str);",
          "3217:   }",
          "3220:   g_snprintf(h225_pi->frame_label, 50, \"%s %s\", h225_pi->frame_label, codec_str);",
          "3222:   contains_faststart = TRUE;",
          "3223:   h225_pi->is_faststart = TRUE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3854:   gefx = gef_ctx_get(actx->private_data);",
          "3855:   if (gefx) {",
          "3856:     ti = proto_tree_add_string(tree, hf_h225_debug_dissector_try_string, tvb, offset>>3, 0, gefx->key);",
          "3858:     dissector_try_string(gef_name_dissector_table, gefx->key, tvb_new_subset(tvb, offset>>3, 0, 0), actx->pinfo, tree, actx);",
          "3859:   }",
          "",
          "[Removed Lines]",
          "3857:  PROTO_ITEM_SET_HIDDEN(ti);",
          "",
          "[Added Lines]",
          "3857:   PROTO_ITEM_SET_HIDDEN(ti);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3877:   gefx = gef_ctx_get(actx->private_data);",
          "3878:   if (gefx) {",
          "3879:     ti = proto_tree_add_string(tree, hf_h225_debug_dissector_try_string, tvb, offset>>3, 0, gefx->key);",
          "3881:     dissector_try_string(gef_content_dissector_table, gefx->key, value_tvb, actx->pinfo, tree, actx);",
          "3882:   }",
          "",
          "[Removed Lines]",
          "3880:  PROTO_ITEM_SET_HIDDEN(ti);",
          "",
          "[Added Lines]",
          "3880:   PROTO_ITEM_SET_HIDDEN(ti);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4091: static int",
          "4092: dissect_h225_ParallelH245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4093: #line 333 \"../../asn1/h225/h225.cnf\"",
          "4096:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "4097:                                        NO_BOUND, NO_BOUND, FALSE, &h245_tvb);",
          "",
          "[Removed Lines]",
          "4094:  tvbuff_t *h245_tvb = NULL;",
          "",
          "[Added Lines]",
          "4094:   tvbuff_t *h245_tvb = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4251:   h225_pi->cs_type = H225_SETUP;",
          "4252:   if (contains_faststart == TRUE )",
          "4254:   else",
          "4257:   return offset;",
          "4258: }",
          "",
          "[Removed Lines]",
          "4253:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4255:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4253:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4255:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4301:   h225_pi->cs_type = H225_CALL_PROCEDING;",
          "4302:   if (contains_faststart == TRUE )",
          "4304:   else",
          "4307:   return offset;",
          "4308: }",
          "",
          "[Removed Lines]",
          "4303:         g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4305:         g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4303:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4305:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4342:   h225_pi->cs_type = H225_CONNECT;",
          "4343:   if (contains_faststart == TRUE )",
          "4345:   else",
          "4348:   return offset;",
          "4349: }",
          "",
          "[Removed Lines]",
          "4344:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4346:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4344:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4346:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4381:   h225_pi->cs_type = H225_ALERTING;",
          "4382:   if (contains_faststart == TRUE )",
          "4384:   else",
          "4387:   return offset;",
          "4388: }",
          "",
          "[Removed Lines]",
          "4383:        g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4385:        g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4383:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4385:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4601: static int",
          "4602: dissect_h225_FacilityReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4603: #line 459 \"../../asn1/h225/h225.cnf\"",
          "4606:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "4607:                                  ett_h225_FacilityReason, FacilityReason_choice,",
          "4608:                                  &value);",
          "4613:   return offset;",
          "",
          "[Removed Lines]",
          "4604:  gint32 value;",
          "4610:  h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "4604:   gint32 value;",
          "4610:   h225_pi->reason = value;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4707:   h225_pi->cs_type = H225_PROGRESS;",
          "4708:   if (contains_faststart == TRUE )",
          "4710:   else",
          "4713:   return offset;",
          "4714: }",
          "",
          "[Removed Lines]",
          "4709:         g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4711:         g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4709:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4711:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4846: static int",
          "4847: dissect_h225_T_h323_message_body(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4848: #line 241 \"../../asn1/h225/h225.cnf\"",
          "4853:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "4854:                                  ett_h225_T_h323_message_body, T_h323_message_body_choice,",
          "4855:                                  &message_body_val);",
          "",
          "[Removed Lines]",
          "4849:  gint32 message_body_val;",
          "4851:  contains_faststart = FALSE;",
          "4852:  call_id_guid = NULL;",
          "4857:  col_append_fstr(actx->pinfo->cinfo, COL_INFO, \"CS: %s \",",
          "4858:   val_to_str(message_body_val, T_h323_message_body_vals, \"<unknown>\"));",
          "4860:  if (h225_pi->msg_type == H225_CS) {",
          "4862:   h225_pi->msg_tag = message_body_val;",
          "4863:  }",
          "4865:  if (call_id_guid) {",
          "4866:   h225_pi->guid = *call_id_guid;",
          "4867:  }",
          "4869:  if (contains_faststart == TRUE )",
          "4870:  {",
          "4871:   col_append_str(actx->pinfo->cinfo, COL_INFO, \"OpenLogicalChannel \" );",
          "4872:  }",
          "4874:  col_set_fence(actx->pinfo->cinfo,COL_INFO);",
          "",
          "[Added Lines]",
          "4849:   gint32 message_body_val;",
          "4851:   contains_faststart = FALSE;",
          "4852:   call_id_guid = NULL;",
          "4857:   col_append_fstr(actx->pinfo->cinfo, COL_INFO, \"CS: %s \",",
          "4858:     val_to_str(message_body_val, T_h323_message_body_vals, \"<unknown>\"));",
          "4860:   if (h225_pi->msg_type == H225_CS) {",
          "4862:     h225_pi->msg_tag = message_body_val;",
          "4863:   }",
          "4865:   if (call_id_guid) {",
          "4866:     h225_pi->guid = *call_id_guid;",
          "4867:   }",
          "4869:   if (contains_faststart == TRUE )",
          "4870:   {",
          "4871:     col_append_str(actx->pinfo->cinfo, COL_INFO, \"OpenLogicalChannel \" );",
          "4872:   }",
          "4874:   col_set_fence(actx->pinfo->cinfo,COL_INFO);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4883: static int",
          "4884: dissect_h225_T_h4501SupplementaryService_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4885: #line 556 \"../../asn1/h225/h225.cnf\"",
          "4888:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "4889:                                        NO_BOUND, NO_BOUND, FALSE, &h4501_tvb);",
          "4896:   return offset;",
          "",
          "[Removed Lines]",
          "4886:  tvbuff_t *h4501_tvb = NULL;",
          "4891:  if (h4501_tvb && tvb_reported_length(h4501_tvb)) {",
          "4892:   call_dissector(h4501_handle, h4501_tvb, actx->pinfo, tree);",
          "4893:  }",
          "",
          "[Added Lines]",
          "4886:   tvbuff_t *h4501_tvb = NULL;",
          "4891:   if (h4501_tvb && tvb_reported_length(h4501_tvb)) {",
          "4892:     call_dissector(h4501_handle, h4501_tvb, actx->pinfo, tree);",
          "4893:   }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4923: static int",
          "4924: dissect_h225_H245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4925: #line 340 \"../../asn1/h225/h225.cnf\"",
          "4928:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "4929:                                        NO_BOUND, NO_BOUND, FALSE, &h245_tvb);",
          "",
          "[Removed Lines]",
          "4926:  tvbuff_t *h245_tvb = NULL;",
          "",
          "[Added Lines]",
          "4926:   tvbuff_t *h245_tvb = NULL;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7581: int",
          "7582: dissect_h225_RasMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7583: #line 285 \"../../asn1/h225/h225.cnf\"",
          "7587:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7588:                                  ett_h225_RasMessage, RasMessage_choice,",
          "7589:                                  &rasmessage_value);",
          "7600:   return offset;",
          "",
          "[Removed Lines]",
          "7584:    gint32 rasmessage_value;",
          "7586:  call_id_guid = NULL;",
          "7591:  col_add_fstr(actx->pinfo->cinfo, COL_INFO, \"RAS: %s \",",
          "7592:   val_to_str(rasmessage_value, h225_RasMessage_vals, \"<unknown>\"));",
          "7594:  h225_pi->msg_tag = rasmessage_value;",
          "7595:  if (call_id_guid) {",
          "7596:   h225_pi->guid = *call_id_guid;",
          "7597:  }",
          "",
          "[Added Lines]",
          "7584:     gint32 rasmessage_value;",
          "7586:   call_id_guid = NULL;",
          "7591:   col_add_fstr(actx->pinfo->cinfo, COL_INFO, \"RAS: %s \",",
          "7592:     val_to_str(rasmessage_value, h225_RasMessage_vals, \"<unknown>\"));",
          "7594:   h225_pi->msg_tag = rasmessage_value;",
          "7595:   if (call_id_guid) {",
          "7596:     h225_pi->guid = *call_id_guid;",
          "7597:   }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7643: static gint h225ras_call_equal(gconstpointer k1, gconstpointer k2)",
          "7644: {",
          "7650: }",
          "7653: static guint h225ras_call_hash(gconstpointer k)",
          "7654: {",
          "7658: }",
          "7661: h225ras_call_t * find_h225ras_call(h225ras_call_info_key *h225ras_call_key ,int category)",
          "7662: {",
          "7667: }",
          "7669: h225ras_call_t * new_h225ras_call(h225ras_call_info_key *h225ras_call_key, packet_info *pinfo, e_guid_t *guid, int category)",
          "7670: {",
          "7695: }",
          "7697: h225ras_call_t * append_h225ras_call(h225ras_call_t *prev_call, packet_info *pinfo, e_guid_t *guid, int category _U_)",
          "7698: {",
          "7717: }",
          "",
          "[Removed Lines]",
          "7645:  const h225ras_call_info_key* key1 = (const h225ras_call_info_key*) k1;",
          "7646:  const h225ras_call_info_key* key2 = (const h225ras_call_info_key*) k2;",
          "7648:  return (key1->reqSeqNum == key2->reqSeqNum &&",
          "7649:      key1->conversation == key2->conversation);",
          "7655:  const h225ras_call_info_key* key = (const h225ras_call_info_key*) k;",
          "7657:  return key->reqSeqNum + GPOINTER_TO_UINT(key->conversation);",
          "7663:  h225ras_call_t *h225ras_call = NULL;",
          "7664:  h225ras_call = (h225ras_call_t *)g_hash_table_lookup(ras_calls[category], h225ras_call_key);",
          "7666:  return h225ras_call;",
          "7671:  h225ras_call_info_key *new_h225ras_call_key;",
          "7672:  h225ras_call_t *h225ras_call = NULL;",
          "7676:     \"req_num\" and \"rsp_num\" are frame numbers;",
          "7677:     frame numbers are 1-origin, so we use 0",
          "7678:     to mean \"we don't yet know in which frame",
          "7680:  new_h225ras_call_key = wmem_new(wmem_file_scope(), h225ras_call_info_key);",
          "7681:  new_h225ras_call_key->reqSeqNum = h225ras_call_key->reqSeqNum;",
          "7682:  new_h225ras_call_key->conversation = h225ras_call_key->conversation;",
          "7683:  h225ras_call = wmem_new(wmem_file_scope(), h225ras_call_t);",
          "7684:  h225ras_call->req_num = pinfo->fd->num;",
          "7685:  h225ras_call->rsp_num = 0;",
          "7686:  h225ras_call->requestSeqNum = h225ras_call_key->reqSeqNum;",
          "7687:  h225ras_call->responded = FALSE;",
          "7688:  h225ras_call->next_call = NULL;",
          "7689:  h225ras_call->req_time=pinfo->fd->abs_ts;",
          "7690:  h225ras_call->guid=*guid;",
          "7692:  g_hash_table_insert(ras_calls[category], new_h225ras_call_key, h225ras_call);",
          "7694:  return h225ras_call;",
          "7699:  h225ras_call_t *h225ras_call = NULL;",
          "7702:     \"req_num\" and \"rsp_num\" are frame numbers;",
          "7703:     frame numbers are 1-origin, so we use 0",
          "7704:     to mean \"we don't yet know in which frame",
          "7706:  h225ras_call = wmem_new(wmem_file_scope(), h225ras_call_t);",
          "7707:  h225ras_call->req_num = pinfo->fd->num;",
          "7708:  h225ras_call->rsp_num = 0;",
          "7709:  h225ras_call->requestSeqNum = prev_call->requestSeqNum;",
          "7710:  h225ras_call->responded = FALSE;",
          "7711:  h225ras_call->next_call = NULL;",
          "7712:  h225ras_call->req_time=pinfo->fd->abs_ts;",
          "7713:  h225ras_call->guid=*guid;",
          "7715:  prev_call->next_call = h225ras_call;",
          "7716:  return h225ras_call;",
          "",
          "[Added Lines]",
          "7645:   const h225ras_call_info_key* key1 = (const h225ras_call_info_key*) k1;",
          "7646:   const h225ras_call_info_key* key2 = (const h225ras_call_info_key*) k2;",
          "7648:   return (key1->reqSeqNum == key2->reqSeqNum &&",
          "7649:           key1->conversation == key2->conversation);",
          "7655:   const h225ras_call_info_key* key = (const h225ras_call_info_key*) k;",
          "7657:   return key->reqSeqNum + GPOINTER_TO_UINT(key->conversation);",
          "7663:   h225ras_call_t *h225ras_call = NULL;",
          "7664:   h225ras_call = (h225ras_call_t *)g_hash_table_lookup(ras_calls[category], h225ras_call_key);",
          "7666:   return h225ras_call;",
          "7671:   h225ras_call_info_key *new_h225ras_call_key;",
          "7672:   h225ras_call_t *h225ras_call = NULL;",
          "7676:      \"req_num\" and \"rsp_num\" are frame numbers;",
          "7677:      frame numbers are 1-origin, so we use 0",
          "7678:      to mean \"we don't yet know in which frame",
          "7680:   new_h225ras_call_key = wmem_new(wmem_file_scope(), h225ras_call_info_key);",
          "7681:   new_h225ras_call_key->reqSeqNum = h225ras_call_key->reqSeqNum;",
          "7682:   new_h225ras_call_key->conversation = h225ras_call_key->conversation;",
          "7683:   h225ras_call = wmem_new(wmem_file_scope(), h225ras_call_t);",
          "7684:   h225ras_call->req_num = pinfo->fd->num;",
          "7685:   h225ras_call->rsp_num = 0;",
          "7686:   h225ras_call->requestSeqNum = h225ras_call_key->reqSeqNum;",
          "7687:   h225ras_call->responded = FALSE;",
          "7688:   h225ras_call->next_call = NULL;",
          "7689:   h225ras_call->req_time=pinfo->fd->abs_ts;",
          "7690:   h225ras_call->guid=*guid;",
          "7692:   g_hash_table_insert(ras_calls[category], new_h225ras_call_key, h225ras_call);",
          "7694:   return h225ras_call;",
          "7699:   h225ras_call_t *h225ras_call = NULL;",
          "7702:      \"req_num\" and \"rsp_num\" are frame numbers;",
          "7703:      frame numbers are 1-origin, so we use 0",
          "7704:      to mean \"we don't yet know in which frame",
          "7706:   h225ras_call = wmem_new(wmem_file_scope(), h225ras_call_t);",
          "7707:   h225ras_call->req_num = pinfo->fd->num;",
          "7708:   h225ras_call->rsp_num = 0;",
          "7709:   h225ras_call->requestSeqNum = prev_call->requestSeqNum;",
          "7710:   h225ras_call->responded = FALSE;",
          "7711:   h225ras_call->next_call = NULL;",
          "7712:   h225ras_call->req_time=pinfo->fd->abs_ts;",
          "7713:   h225ras_call->guid=*guid;",
          "7715:   prev_call->next_call = h225ras_call;",
          "7716:   return h225ras_call;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7724: static void",
          "7725: h225_init_routine(void)",
          "7726: {",
          "7734: }",
          "7736: static void",
          "7737: h225_cleanup_routine(void)",
          "7738: {",
          "7745: }",
          "7747: static int",
          "7748: dissect_h225_H323UserInformation(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "7749: {",
          "7786: }",
          "7787: static int",
          "7788: dissect_h225_h225_RasMessage(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_){",
          "7815: }",
          "",
          "[Removed Lines]",
          "7727:  int i;",
          "7730:  for(i=0;i<7;i++) {",
          "7731:   ras_calls[i] = g_hash_table_new(h225ras_call_hash, h225ras_call_equal);",
          "7732:  }",
          "7739:  int i;",
          "7742:  for(i=0;i<7;i++) {",
          "7743:   g_hash_table_destroy(ras_calls[i]);",
          "7744:  }",
          "7750:  proto_item *it;",
          "7751:  proto_tree *tr;",
          "7752:  int offset = 0;",
          "7754:  pi_current++;",
          "7755:  if(pi_current==5){",
          "7756:   pi_current=0;",
          "7757:  }",
          "7758:  h225_pi=&pi_arr[pi_current];",
          "7761:  reset_h225_packet_info(h225_pi);",
          "7762:  h225_pi->msg_type = H225_CS;",
          "7764:  next_tvb_init(&h245_list);",
          "7765:  next_tvb_init(&tp_list);",
          "7767:  col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "7768:  col_clear(pinfo->cinfo, COL_INFO);",
          "7770:  it=proto_tree_add_protocol_format(tree, proto_h225, tvb, 0, -1, PSNAME\" CS\");",
          "7771:  tr=proto_item_add_subtree(it, ett_h225);",
          "7773:  offset = dissect_H323_UserInformation_PDU(tvb, pinfo, tr, NULL);",
          "7775:  if (h245_list.count){",
          "7776:   col_append_str(pinfo->cinfo, COL_PROTOCOL, \"/\");",
          "7777:   col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "7778:  }",
          "7780:  next_tvb_call(&h245_list, pinfo, tree, h245dg_handle, data_handle);",
          "7781:  next_tvb_call(&tp_list, pinfo, tree, NULL, data_handle);",
          "7783:  tap_queue_packet(h225_tap, pinfo, h225_pi);",
          "7785:  return offset;",
          "7789:  proto_item *it;",
          "7790:  proto_tree *tr;",
          "7791:  guint32 offset=0;",
          "7793:  pi_current++;",
          "7794:  if(pi_current==5){",
          "7795:   pi_current=0;",
          "7796:  }",
          "7797:  h225_pi=&pi_arr[pi_current];",
          "7800:  reset_h225_packet_info(h225_pi);",
          "7801:  h225_pi->msg_type = H225_RAS;",
          "7803:  col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "7805:  it=proto_tree_add_protocol_format(tree, proto_h225, tvb, offset, -1, PSNAME\" RAS\");",
          "7806:  tr=proto_item_add_subtree(it, ett_h225);",
          "7808:  offset = dissect_RasMessage_PDU(tvb, pinfo, tr, NULL);",
          "7810:  ras_call_matching(tvb, pinfo, tr, h225_pi);",
          "7812:  tap_queue_packet(h225_tap, pinfo, h225_pi);",
          "7814:  return offset;",
          "",
          "[Added Lines]",
          "7727:   int i;",
          "7730:   for(i=0;i<7;i++) {",
          "7731:     ras_calls[i] = g_hash_table_new(h225ras_call_hash, h225ras_call_equal);",
          "7732:   }",
          "7739:   int i;",
          "7742:   for(i=0;i<7;i++) {",
          "7743:     g_hash_table_destroy(ras_calls[i]);",
          "7744:   }",
          "7750:   proto_item *it;",
          "7751:   proto_tree *tr;",
          "7752:   int offset = 0;",
          "7754:   pi_current++;",
          "7755:   if(pi_current==5){",
          "7756:     pi_current=0;",
          "7757:   }",
          "7758:   h225_pi=&pi_arr[pi_current];",
          "7761:   reset_h225_packet_info(h225_pi);",
          "7762:   h225_pi->msg_type = H225_CS;",
          "7764:   next_tvb_init(&h245_list);",
          "7765:   next_tvb_init(&tp_list);",
          "7767:   col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "7768:   col_clear(pinfo->cinfo, COL_INFO);",
          "7770:   it=proto_tree_add_protocol_format(tree, proto_h225, tvb, 0, -1, PSNAME\" CS\");",
          "7771:   tr=proto_item_add_subtree(it, ett_h225);",
          "7773:   offset = dissect_H323_UserInformation_PDU(tvb, pinfo, tr, NULL);",
          "7775:   if (h245_list.count){",
          "7776:     col_append_str(pinfo->cinfo, COL_PROTOCOL, \"/\");",
          "7777:     col_set_fence(pinfo->cinfo, COL_PROTOCOL);",
          "7778:   }",
          "7780:   next_tvb_call(&h245_list, pinfo, tree, h245dg_handle, data_handle);",
          "7781:   next_tvb_call(&tp_list, pinfo, tree, NULL, data_handle);",
          "7783:   tap_queue_packet(h225_tap, pinfo, h225_pi);",
          "7785:   return offset;",
          "7789:   proto_item *it;",
          "7790:   proto_tree *tr;",
          "7791:   guint32 offset=0;",
          "7793:   pi_current++;",
          "7794:   if(pi_current==5){",
          "7795:     pi_current=0;",
          "7796:   }",
          "7797:   h225_pi=&pi_arr[pi_current];",
          "7800:   reset_h225_packet_info(h225_pi);",
          "7801:   h225_pi->msg_type = H225_RAS;",
          "7803:   col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "7805:   it=proto_tree_add_protocol_format(tree, proto_h225, tvb, offset, -1, PSNAME\" RAS\");",
          "7806:   tr=proto_item_add_subtree(it, ett_h225);",
          "7808:   offset = dissect_RasMessage_PDU(tvb, pinfo, tr, NULL);",
          "7810:   ras_call_matching(tvb, pinfo, tr, h225_pi);",
          "7812:   tap_queue_packet(h225_tap, pinfo, h225_pi);",
          "7814:   return offset;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7837: typedef enum",
          "7838: {",
          "7841: } h225_stat_columns;",
          "7843: typedef struct _h225_table_item {",
          "7846: } h225_table_item_t;",
          "7848: static stat_tap_table_item h225_stat_fields[] = {{TABLE_ITEM_STRING, TAP_ALIGN_LEFT, \"Message Type or Reason\", \"%-25s\"}, {TABLE_ITEM_UINT, TAP_ALIGN_RIGHT, \"Count\", \"%d\"}};",
          "",
          "[Removed Lines]",
          "7839:  MESSAGE_TYPE_COLUMN = 0,",
          "7840:  COUNT_COLUMN",
          "",
          "[Added Lines]",
          "7839:   MESSAGE_TYPE_COLUMN = 0,",
          "7840:   COUNT_COLUMN",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7868: static void h225_stat_init(new_stat_tap_ui* new_stat, new_stat_tap_gui_init_cb gui_callback, void* gui_data)",
          "7869: {",
          "8083: }",
          "8085: static gboolean",
          "8086: h225_stat_packet(void *tapdata, packet_info *pinfo _U_, epan_dissect_t *edt _U_, const void *hpi_ptr)",
          "8087: {",
          "8189: }",
          "8191: static void",
          "8192: h225_stat_reset(new_stat_tap_table* table)",
          "8193: {",
          "8203: }",
          "",
          "[Removed Lines]",
          "7870:  int num_fields = sizeof(h225_stat_fields)/sizeof(stat_tap_table_item);",
          "7871:  new_stat_tap_table* table = new_stat_tap_init_table(\"H.225 Messages and Message Reasons\", num_fields, 0, NULL, gui_callback, gui_data);",
          "7872:  int row_idx = 0, msg_idx;",
          "7873:  stat_tap_table_item_type items[sizeof(h225_stat_fields)/sizeof(stat_tap_table_item)];",
          "7875:  new_stat_tap_add_table(new_stat, table);",
          "7877:  items[MESSAGE_TYPE_COLUMN].type = TABLE_ITEM_STRING;",
          "7878:  items[COUNT_COLUMN].type = TABLE_ITEM_UINT;",
          "7879:  items[COUNT_COLUMN].value.uint_value = 0;",
          "7883:  msg_idx = 0;",
          "7884:  do",
          "7885:  {",
          "7886:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7887:    h225_RasMessage_vals[msg_idx].strptr",
          "7888:    ? h225_RasMessage_vals[msg_idx].strptr",
          "7889:    : \"Unknown RAS message\";",
          "7890:   ras_msg_idx[msg_idx] = row_idx;",
          "7892:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7893:   row_idx++;",
          "7894:   msg_idx++;",
          "7895:  } while (h225_RasMessage_vals[msg_idx].strptr);",
          "7897:  msg_idx = 0;",
          "7898:  do",
          "7899:  {",
          "7900:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7901:    T_h323_message_body_vals[msg_idx].strptr",
          "7902:    ? T_h323_message_body_vals[msg_idx].strptr",
          "7903:    : \"Unknown CS message\";",
          "7904:   cs_msg_idx[msg_idx] = row_idx;",
          "7906:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7907:   row_idx++;",
          "7908:   msg_idx++;",
          "7909:  } while (T_h323_message_body_vals[msg_idx].strptr);",
          "7911:  msg_idx = 0;",
          "7912:  do",
          "7913:  {",
          "7914:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7915:    GatekeeperRejectReason_vals[msg_idx].strptr",
          "7916:    ? GatekeeperRejectReason_vals[msg_idx].strptr",
          "7917:    : \"Unknown gatekeeper reject reason\";",
          "7918:   grj_reason_idx[msg_idx] = row_idx;",
          "7920:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7921:   row_idx++;",
          "7922:   msg_idx++;",
          "7923:  } while (GatekeeperRejectReason_vals[msg_idx].strptr);",
          "7925:  msg_idx = 0;",
          "7926:  do",
          "7927:  {",
          "7928:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7929:    RegistrationRejectReason_vals[msg_idx].strptr",
          "7930:    ? RegistrationRejectReason_vals[msg_idx].strptr",
          "7931:    : \"Unknown registration reject reason\";",
          "7932:   rrj_reason_idx[msg_idx] = row_idx;",
          "7934:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7935:   row_idx++;",
          "7936:   msg_idx++;",
          "7937:  } while (RegistrationRejectReason_vals[msg_idx].strptr);",
          "7939:  msg_idx = 0;",
          "7940:  do",
          "7941:  {",
          "7942:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7943:    UnregRequestReason_vals[msg_idx].strptr",
          "7944:    ? UnregRequestReason_vals[msg_idx].strptr",
          "7945:    : \"Unknown unregistration request reason\";",
          "7946:   urq_reason_idx[msg_idx] = row_idx;",
          "7948:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7949:   row_idx++;",
          "7950:   msg_idx++;",
          "7951:  } while (UnregRequestReason_vals[msg_idx].strptr);",
          "7953:  msg_idx = 0;",
          "7954:  do",
          "7955:  {",
          "7956:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7957:    UnregRejectReason_vals[msg_idx].strptr",
          "7958:    ? UnregRejectReason_vals[msg_idx].strptr",
          "7959:    : \"Unknown unregistration reject reason\";",
          "7960:   urj_reason_idx[msg_idx] = row_idx;",
          "7962:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7963:   row_idx++;",
          "7964:   msg_idx++;",
          "7965:  } while (UnregRejectReason_vals[msg_idx].strptr);",
          "7967:  msg_idx = 0;",
          "7968:  do",
          "7969:  {",
          "7970:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7971:    AdmissionRejectReason_vals[msg_idx].strptr",
          "7972:    ? AdmissionRejectReason_vals[msg_idx].strptr",
          "7973:    : \"Unknown admission reject reason\";",
          "7974:   arj_reason_idx[msg_idx] = row_idx;",
          "7976:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7977:   row_idx++;",
          "7978:   msg_idx++;",
          "7979:  } while (AdmissionRejectReason_vals[msg_idx].strptr);",
          "7981:  msg_idx = 0;",
          "7982:  do",
          "7983:  {",
          "7984:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7985:    BandRejectReason_vals[msg_idx].strptr",
          "7986:    ? BandRejectReason_vals[msg_idx].strptr",
          "7987:    : \"Unknown band reject reason\";",
          "7988:   brj_reason_idx[msg_idx] = row_idx;",
          "7990:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7991:   row_idx++;",
          "7992:   msg_idx++;",
          "7993:  } while (BandRejectReason_vals[msg_idx].strptr);",
          "7995:  msg_idx = 0;",
          "7996:  do",
          "7997:  {",
          "7998:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7999:    DisengageReason_vals[msg_idx].strptr",
          "8000:    ? DisengageReason_vals[msg_idx].strptr",
          "8001:    : \"Unknown disengage reason\";",
          "8002:   drq_reason_idx[msg_idx] = row_idx;",
          "8004:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8005:   row_idx++;",
          "8006:   msg_idx++;",
          "8007:  } while (DisengageReason_vals[msg_idx].strptr);",
          "8009:  msg_idx = 0;",
          "8010:  do",
          "8011:  {",
          "8012:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8013:    DisengageRejectReason_vals[msg_idx].strptr",
          "8014:    ? DisengageRejectReason_vals[msg_idx].strptr",
          "8015:    : \"Unknown disengage reject reason\";",
          "8016:   drj_reason_idx[msg_idx] = row_idx;",
          "8018:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8019:   row_idx++;",
          "8020:   msg_idx++;",
          "8021:  } while (DisengageRejectReason_vals[msg_idx].strptr);",
          "8023:  msg_idx = 0;",
          "8024:  do",
          "8025:  {",
          "8026:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8027:    LocationRejectReason_vals[msg_idx].strptr",
          "8028:    ? LocationRejectReason_vals[msg_idx].strptr",
          "8029:    : \"Unknown location reject reason\";",
          "8030:   lrj_reason_idx[msg_idx] = row_idx;",
          "8032:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8033:   row_idx++;",
          "8034:   msg_idx++;",
          "8035:  } while (LocationRejectReason_vals[msg_idx].strptr);",
          "8037:  msg_idx = 0;",
          "8038:  do",
          "8039:  {",
          "8040:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8041:    InfoRequestNakReason_vals[msg_idx].strptr",
          "8042:    ? InfoRequestNakReason_vals[msg_idx].strptr",
          "8043:    : \"Unknown info request nak reason\";",
          "8044:   irqnak_reason_idx[msg_idx] = row_idx;",
          "8046:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8047:   row_idx++;",
          "8048:   msg_idx++;",
          "8049:  } while (InfoRequestNakReason_vals[msg_idx].strptr);",
          "8051:  msg_idx = 0;",
          "8052:  do",
          "8053:  {",
          "8054:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8055:    h225_ReleaseCompleteReason_vals[msg_idx].strptr",
          "8056:    ? h225_ReleaseCompleteReason_vals[msg_idx].strptr",
          "8057:    : \"Unknown release complete reason\";",
          "8058:   rel_cmp_reason_idx[msg_idx] = row_idx;",
          "8060:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8061:   row_idx++;",
          "8062:   msg_idx++;",
          "8063:  } while (h225_ReleaseCompleteReason_vals[msg_idx].strptr);",
          "8065:  msg_idx = 0;",
          "8066:  do",
          "8067:  {",
          "8068:   items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8069:    FacilityReason_vals[msg_idx].strptr",
          "8070:    ? FacilityReason_vals[msg_idx].strptr",
          "8071:    : \"Unknown facility reason\";",
          "8072:   facility_reason_idx[msg_idx] = row_idx;",
          "8074:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8075:   row_idx++;",
          "8076:   msg_idx++;",
          "8077:  } while (FacilityReason_vals[msg_idx].strptr);",
          "8080:  items[MESSAGE_TYPE_COLUMN].value.string_value = \"Unknown H.225 message\";",
          "8081:  new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8082:  other_idx = row_idx;",
          "8088:  new_stat_data_t* stat_data = (new_stat_data_t*)tapdata;",
          "8089:  const h225_packet_info *hpi = (const h225_packet_info *)hpi_ptr;",
          "8090:  int tag_idx = -1;",
          "8091:  int reason_idx = -1;",
          "8094:   return FALSE;",
          "8095:  }",
          "8097:  switch (hpi->msg_type) {",
          "8099:  case H225_RAS:",
          "8100:   tag_idx = ras_msg_idx[MIN(hpi->msg_tag, (int)RAS_MSG_TYPES-1)];",
          "8104:    break;",
          "8105:   }",
          "8107:   switch(hpi->msg_tag) {",
          "8110:    reason_idx = grj_reason_idx[MIN(hpi->reason, (int)GRJ_REASONS-1)];",
          "8111:    break;",
          "8113:    reason_idx = rrj_reason_idx[MIN(hpi->reason, (int)RRJ_REASONS-1)];",
          "8114:    break;",
          "8116:    reason_idx = urq_reason_idx[MIN(hpi->reason, (int)URQ_REASONS-1)];",
          "8117:    break;",
          "8119:    reason_idx = urj_reason_idx[MIN(hpi->reason, (int)URJ_REASONS-1)];",
          "8120:    break;",
          "8122:    reason_idx = arj_reason_idx[MIN(hpi->reason, (int)ARJ_REASONS-1)];",
          "8123:    break;",
          "8125:    reason_idx = brj_reason_idx[MIN(hpi->reason, (int)BRJ_REASONS-1)];",
          "8126:    break;",
          "8128:    reason_idx = drq_reason_idx[MIN(hpi->reason, (int)DRQ_REASONS-1)];",
          "8129:    break;",
          "8131:    reason_idx = drj_reason_idx[MIN(hpi->reason, (int)DRJ_REASONS-1)];",
          "8132:    break;",
          "8134:    reason_idx = lrj_reason_idx[MIN(hpi->reason, (int)LRJ_REASONS-1)];",
          "8135:    break;",
          "8137:    reason_idx = irqnak_reason_idx[MIN(hpi->reason, (int)IRQNAK_REASONS-1)];",
          "8138:    break;",
          "8139:   default:",
          "8141:    break;",
          "8142:   }",
          "8144:   break;",
          "8146:  case H225_CS:",
          "8147:   tag_idx = cs_msg_idx[MIN(hpi->msg_tag, (int)CS_MSG_TYPES-1)];",
          "8151:    break;",
          "8152:   }",
          "8154:   switch(hpi->msg_tag) {",
          "8157:    reason_idx = rel_cmp_reason_idx[MIN(hpi->reason, (int)REL_CMP_REASONS-1)];",
          "8158:    break;",
          "8160:    reason_idx = facility_reason_idx[MIN(hpi->reason, (int)FACILITY_REASONS-1)];",
          "8161:    break;",
          "8162:   default:",
          "8164:    break;",
          "8165:   }",
          "8167:   break;",
          "8169:  case H225_OTHERS:",
          "8170:  default:",
          "8171:   tag_idx = other_idx;",
          "8172:  }",
          "8174:  if (tag_idx >= 0) {",
          "8175:   new_stat_tap_table*table = g_array_index(stat_data->new_stat_tap_data->tables, new_stat_tap_table*, 0);",
          "8176:   stat_tap_table_item_type* msg_data = new_stat_tap_get_field_data(table, tag_idx, COUNT_COLUMN);;",
          "8177:   msg_data->value.uint_value++;",
          "8178:   new_stat_tap_set_field_data(table, tag_idx, COUNT_COLUMN, msg_data);",
          "8180:   if (reason_idx >= 0) {",
          "8181:    msg_data = new_stat_tap_get_field_data(table, reason_idx, COUNT_COLUMN);;",
          "8182:    msg_data->value.uint_value++;",
          "8183:    new_stat_tap_set_field_data(table, reason_idx, COUNT_COLUMN, msg_data);",
          "8184:   }",
          "8186:   return TRUE;",
          "8187:  }",
          "8188:  return FALSE;",
          "8194:  guint element;",
          "8195:  stat_tap_table_item_type* item_data;",
          "8197:  for (element = 0; element < table->num_elements; element++)",
          "8198:  {",
          "8199:   item_data = new_stat_tap_get_field_data(table, element, COUNT_COLUMN);",
          "8200:   item_data->value.uint_value = 0;",
          "8201:   new_stat_tap_set_field_data(table, element, COUNT_COLUMN, item_data);",
          "8202:  }",
          "",
          "[Added Lines]",
          "7870:   int num_fields = sizeof(h225_stat_fields)/sizeof(stat_tap_table_item);",
          "7871:   new_stat_tap_table* table = new_stat_tap_init_table(\"H.225 Messages and Message Reasons\", num_fields, 0, NULL, gui_callback, gui_data);",
          "7872:   int row_idx = 0, msg_idx;",
          "7873:   stat_tap_table_item_type items[sizeof(h225_stat_fields)/sizeof(stat_tap_table_item)];",
          "7875:   new_stat_tap_add_table(new_stat, table);",
          "7877:   items[MESSAGE_TYPE_COLUMN].type = TABLE_ITEM_STRING;",
          "7878:   items[COUNT_COLUMN].type = TABLE_ITEM_UINT;",
          "7879:   items[COUNT_COLUMN].value.uint_value = 0;",
          "7883:   msg_idx = 0;",
          "7884:   do",
          "7885:   {",
          "7886:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7887:       h225_RasMessage_vals[msg_idx].strptr",
          "7888:       ? h225_RasMessage_vals[msg_idx].strptr",
          "7889:       : \"Unknown RAS message\";",
          "7890:     ras_msg_idx[msg_idx] = row_idx;",
          "7892:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7893:     row_idx++;",
          "7894:     msg_idx++;",
          "7895:   } while (h225_RasMessage_vals[msg_idx].strptr);",
          "7897:   msg_idx = 0;",
          "7898:   do",
          "7899:   {",
          "7900:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7901:       T_h323_message_body_vals[msg_idx].strptr",
          "7902:       ? T_h323_message_body_vals[msg_idx].strptr",
          "7903:       : \"Unknown CS message\";",
          "7904:     cs_msg_idx[msg_idx] = row_idx;",
          "7906:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7907:     row_idx++;",
          "7908:     msg_idx++;",
          "7909:   } while (T_h323_message_body_vals[msg_idx].strptr);",
          "7911:   msg_idx = 0;",
          "7912:   do",
          "7913:   {",
          "7914:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7915:       GatekeeperRejectReason_vals[msg_idx].strptr",
          "7916:       ? GatekeeperRejectReason_vals[msg_idx].strptr",
          "7917:       : \"Unknown gatekeeper reject reason\";",
          "7918:     grj_reason_idx[msg_idx] = row_idx;",
          "7920:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7921:     row_idx++;",
          "7922:     msg_idx++;",
          "7923:   } while (GatekeeperRejectReason_vals[msg_idx].strptr);",
          "7925:   msg_idx = 0;",
          "7926:   do",
          "7927:   {",
          "7928:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7929:       RegistrationRejectReason_vals[msg_idx].strptr",
          "7930:       ? RegistrationRejectReason_vals[msg_idx].strptr",
          "7931:       : \"Unknown registration reject reason\";",
          "7932:     rrj_reason_idx[msg_idx] = row_idx;",
          "7934:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7935:     row_idx++;",
          "7936:     msg_idx++;",
          "7937:   } while (RegistrationRejectReason_vals[msg_idx].strptr);",
          "7939:   msg_idx = 0;",
          "7940:   do",
          "7941:   {",
          "7942:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7943:       UnregRequestReason_vals[msg_idx].strptr",
          "7944:       ? UnregRequestReason_vals[msg_idx].strptr",
          "7945:       : \"Unknown unregistration request reason\";",
          "7946:     urq_reason_idx[msg_idx] = row_idx;",
          "7948:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7949:     row_idx++;",
          "7950:     msg_idx++;",
          "7951:   } while (UnregRequestReason_vals[msg_idx].strptr);",
          "7953:   msg_idx = 0;",
          "7954:   do",
          "7955:   {",
          "7956:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7957:       UnregRejectReason_vals[msg_idx].strptr",
          "7958:       ? UnregRejectReason_vals[msg_idx].strptr",
          "7959:       : \"Unknown unregistration reject reason\";",
          "7960:     urj_reason_idx[msg_idx] = row_idx;",
          "7962:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7963:     row_idx++;",
          "7964:     msg_idx++;",
          "7965:   } while (UnregRejectReason_vals[msg_idx].strptr);",
          "7967:   msg_idx = 0;",
          "7968:   do",
          "7969:   {",
          "7970:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7971:       AdmissionRejectReason_vals[msg_idx].strptr",
          "7972:       ? AdmissionRejectReason_vals[msg_idx].strptr",
          "7973:       : \"Unknown admission reject reason\";",
          "7974:     arj_reason_idx[msg_idx] = row_idx;",
          "7976:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7977:     row_idx++;",
          "7978:     msg_idx++;",
          "7979:   } while (AdmissionRejectReason_vals[msg_idx].strptr);",
          "7981:   msg_idx = 0;",
          "7982:   do",
          "7983:   {",
          "7984:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7985:       BandRejectReason_vals[msg_idx].strptr",
          "7986:       ? BandRejectReason_vals[msg_idx].strptr",
          "7987:       : \"Unknown band reject reason\";",
          "7988:     brj_reason_idx[msg_idx] = row_idx;",
          "7990:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "7991:     row_idx++;",
          "7992:     msg_idx++;",
          "7993:   } while (BandRejectReason_vals[msg_idx].strptr);",
          "7995:   msg_idx = 0;",
          "7996:   do",
          "7997:   {",
          "7998:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "7999:       DisengageReason_vals[msg_idx].strptr",
          "8000:       ? DisengageReason_vals[msg_idx].strptr",
          "8001:       : \"Unknown disengage reason\";",
          "8002:     drq_reason_idx[msg_idx] = row_idx;",
          "8004:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8005:     row_idx++;",
          "8006:     msg_idx++;",
          "8007:   } while (DisengageReason_vals[msg_idx].strptr);",
          "8009:   msg_idx = 0;",
          "8010:   do",
          "8011:   {",
          "8012:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8013:       DisengageRejectReason_vals[msg_idx].strptr",
          "8014:       ? DisengageRejectReason_vals[msg_idx].strptr",
          "8015:       : \"Unknown disengage reject reason\";",
          "8016:     drj_reason_idx[msg_idx] = row_idx;",
          "8018:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8019:     row_idx++;",
          "8020:     msg_idx++;",
          "8021:   } while (DisengageRejectReason_vals[msg_idx].strptr);",
          "8023:   msg_idx = 0;",
          "8024:   do",
          "8025:   {",
          "8026:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8027:       LocationRejectReason_vals[msg_idx].strptr",
          "8028:       ? LocationRejectReason_vals[msg_idx].strptr",
          "8029:       : \"Unknown location reject reason\";",
          "8030:     lrj_reason_idx[msg_idx] = row_idx;",
          "8032:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8033:     row_idx++;",
          "8034:     msg_idx++;",
          "8035:   } while (LocationRejectReason_vals[msg_idx].strptr);",
          "8037:   msg_idx = 0;",
          "8038:   do",
          "8039:   {",
          "8040:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8041:       InfoRequestNakReason_vals[msg_idx].strptr",
          "8042:       ? InfoRequestNakReason_vals[msg_idx].strptr",
          "8043:       : \"Unknown info request nak reason\";",
          "8044:     irqnak_reason_idx[msg_idx] = row_idx;",
          "8046:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8047:     row_idx++;",
          "8048:     msg_idx++;",
          "8049:   } while (InfoRequestNakReason_vals[msg_idx].strptr);",
          "8051:   msg_idx = 0;",
          "8052:   do",
          "8053:   {",
          "8054:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8055:       h225_ReleaseCompleteReason_vals[msg_idx].strptr",
          "8056:       ? h225_ReleaseCompleteReason_vals[msg_idx].strptr",
          "8057:       : \"Unknown release complete reason\";",
          "8058:     rel_cmp_reason_idx[msg_idx] = row_idx;",
          "8060:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8061:     row_idx++;",
          "8062:     msg_idx++;",
          "8063:   } while (h225_ReleaseCompleteReason_vals[msg_idx].strptr);",
          "8065:   msg_idx = 0;",
          "8066:   do",
          "8067:   {",
          "8068:     items[MESSAGE_TYPE_COLUMN].value.string_value =",
          "8069:       FacilityReason_vals[msg_idx].strptr",
          "8070:       ? FacilityReason_vals[msg_idx].strptr",
          "8071:       : \"Unknown facility reason\";",
          "8072:     facility_reason_idx[msg_idx] = row_idx;",
          "8074:     new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8075:     row_idx++;",
          "8076:     msg_idx++;",
          "8077:   } while (FacilityReason_vals[msg_idx].strptr);",
          "8080:   items[MESSAGE_TYPE_COLUMN].value.string_value = \"Unknown H.225 message\";",
          "8081:   new_stat_tap_init_table_row(table, row_idx, num_fields, items);",
          "8082:   other_idx = row_idx;",
          "8088:   new_stat_data_t* stat_data = (new_stat_data_t*)tapdata;",
          "8089:   const h225_packet_info *hpi = (const h225_packet_info *)hpi_ptr;",
          "8090:   int tag_idx = -1;",
          "8091:   int reason_idx = -1;",
          "8094:     return FALSE;",
          "8095:   }",
          "8097:   switch (hpi->msg_type) {",
          "8099:   case H225_RAS:",
          "8100:     tag_idx = ras_msg_idx[MIN(hpi->msg_tag, (int)RAS_MSG_TYPES-1)];",
          "8104:       break;",
          "8105:     }",
          "8107:     switch(hpi->msg_tag) {",
          "8110:       reason_idx = grj_reason_idx[MIN(hpi->reason, (int)GRJ_REASONS-1)];",
          "8111:       break;",
          "8113:       reason_idx = rrj_reason_idx[MIN(hpi->reason, (int)RRJ_REASONS-1)];",
          "8114:       break;",
          "8116:       reason_idx = urq_reason_idx[MIN(hpi->reason, (int)URQ_REASONS-1)];",
          "8117:       break;",
          "8119:       reason_idx = urj_reason_idx[MIN(hpi->reason, (int)URJ_REASONS-1)];",
          "8120:       break;",
          "8122:       reason_idx = arj_reason_idx[MIN(hpi->reason, (int)ARJ_REASONS-1)];",
          "8123:       break;",
          "8125:       reason_idx = brj_reason_idx[MIN(hpi->reason, (int)BRJ_REASONS-1)];",
          "8126:       break;",
          "8128:       reason_idx = drq_reason_idx[MIN(hpi->reason, (int)DRQ_REASONS-1)];",
          "8129:       break;",
          "8131:       reason_idx = drj_reason_idx[MIN(hpi->reason, (int)DRJ_REASONS-1)];",
          "8132:       break;",
          "8134:       reason_idx = lrj_reason_idx[MIN(hpi->reason, (int)LRJ_REASONS-1)];",
          "8135:       break;",
          "8137:       reason_idx = irqnak_reason_idx[MIN(hpi->reason, (int)IRQNAK_REASONS-1)];",
          "8138:       break;",
          "8139:     default:",
          "8141:       break;",
          "8142:     }",
          "8144:     break;",
          "8146:   case H225_CS:",
          "8147:     tag_idx = cs_msg_idx[MIN(hpi->msg_tag, (int)CS_MSG_TYPES-1)];",
          "8151:       break;",
          "8152:     }",
          "8154:     switch(hpi->msg_tag) {",
          "8157:       reason_idx = rel_cmp_reason_idx[MIN(hpi->reason, (int)REL_CMP_REASONS-1)];",
          "8158:       break;",
          "8160:       reason_idx = facility_reason_idx[MIN(hpi->reason, (int)FACILITY_REASONS-1)];",
          "8161:       break;",
          "8162:     default:",
          "8164:       break;",
          "8165:     }",
          "8167:     break;",
          "8169:   case H225_OTHERS:",
          "8170:   default:",
          "8171:     tag_idx = other_idx;",
          "8172:   }",
          "8174:   if (tag_idx >= 0) {",
          "8175:     new_stat_tap_table*table = g_array_index(stat_data->new_stat_tap_data->tables, new_stat_tap_table*, 0);",
          "8176:     stat_tap_table_item_type* msg_data = new_stat_tap_get_field_data(table, tag_idx, COUNT_COLUMN);;",
          "8177:     msg_data->value.uint_value++;",
          "8178:     new_stat_tap_set_field_data(table, tag_idx, COUNT_COLUMN, msg_data);",
          "8180:     if (reason_idx >= 0) {",
          "8181:       msg_data = new_stat_tap_get_field_data(table, reason_idx, COUNT_COLUMN);;",
          "8182:       msg_data->value.uint_value++;",
          "8183:       new_stat_tap_set_field_data(table, reason_idx, COUNT_COLUMN, msg_data);",
          "8184:     }",
          "8186:     return TRUE;",
          "8187:   }",
          "8188:   return FALSE;",
          "8194:   guint element;",
          "8195:   stat_tap_table_item_type* item_data;",
          "8197:   for (element = 0; element < table->num_elements; element++)",
          "8198:   {",
          "8199:     item_data = new_stat_tap_get_field_data(table, element, COUNT_COLUMN);",
          "8200:     item_data->value.uint_value = 0;",
          "8201:     new_stat_tap_set_field_data(table, element, COUNT_COLUMN, item_data);",
          "8202:   }",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "8209:   static hf_register_info hf[] = {",
          "",
          "[Removed Lines]",
          "8210:  { &hf_h221Manufacturer,",
          "8211:   { \"H.225 Manufacturer\", \"h225.Manufacturer\", FT_UINT32, BASE_HEX,",
          "8212:   VALS(H221ManufacturerCode_vals), 0, \"h225.H.221 Manufacturer\", HFILL }},",
          "8213:  { &hf_h225_ras_req_frame,",
          "8214:         { \"RAS Request Frame\", \"h225.ras.reqframe\", FT_FRAMENUM, BASE_NONE,",
          "8215:         NULL, 0, NULL, HFILL }},",
          "8216:    { &hf_h225_ras_rsp_frame,",
          "8217:         { \"RAS Response Frame\", \"h225.ras.rspframe\", FT_FRAMENUM, BASE_NONE,",
          "8218:         NULL, 0, NULL, HFILL }},",
          "8219:    { &hf_h225_ras_dup,",
          "8220:         { \"Duplicate RAS Message\", \"h225.ras.dup\", FT_UINT32, BASE_DEC,",
          "8221:   NULL, 0, NULL, HFILL }},",
          "8222:    { &hf_h225_ras_deltatime,",
          "8223:         { \"RAS Service Response Time\", \"h225.ras.timedelta\", FT_RELATIVE_TIME, BASE_NONE,",
          "8224:         NULL, 0, \"Timedelta between RAS-Request and RAS-Response\", HFILL }},",
          "8225:    { &hf_h225_debug_dissector_try_string,",
          "8226:         { \"*** DEBUG dissector_try_string\", \"h225.debug.dissector_try_string\", FT_STRING, BASE_NONE,",
          "8227:         NULL, 0, NULL, HFILL }},",
          "",
          "[Added Lines]",
          "8210:   { &hf_h221Manufacturer,",
          "8211:     { \"H.225 Manufacturer\", \"h225.Manufacturer\", FT_UINT32, BASE_HEX,",
          "8212:     VALS(H221ManufacturerCode_vals), 0, \"h225.H.221 Manufacturer\", HFILL }},",
          "8214:   { &hf_h225_ras_req_frame,",
          "8215:     { \"RAS Request Frame\", \"h225.ras.reqframe\", FT_FRAMENUM, BASE_NONE,",
          "8216:     NULL, 0, NULL, HFILL }},",
          "8218:   { &hf_h225_ras_rsp_frame,",
          "8219:     { \"RAS Response Frame\", \"h225.ras.rspframe\", FT_FRAMENUM, BASE_NONE,",
          "8220:     NULL, 0, NULL, HFILL }},",
          "8222:   { &hf_h225_ras_dup,",
          "8223:     { \"Duplicate RAS Message\", \"h225.ras.dup\", FT_UINT32, BASE_DEC,",
          "8224:     NULL, 0, NULL, HFILL }},",
          "8226:   { &hf_h225_ras_deltatime,",
          "8227:     { \"RAS Service Response Time\", \"h225.ras.timedelta\", FT_RELATIVE_TIME, BASE_NONE,",
          "8228:     NULL, 0, \"Timedelta between RAS-Request and RAS-Response\", HFILL }},",
          "8230:   { &hf_h225_debug_dissector_try_string,",
          "8231:     { \"*** DEBUG dissector_try_string\", \"h225.debug.dissector_try_string\", FT_STRING, BASE_NONE,",
          "8232:     NULL, 0, NULL, HFILL }},",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "11311:         NULL, HFILL }},",
          "11322: #line 1 \"../../asn1/h225/packet-h225-ettarr.c\"",
          "",
          "[Removed Lines]",
          "11314: #line 847 \"../../asn1/h225/packet-h225-template.c\"",
          "11315:  };",
          "11318:  static gint *ett[] = {",
          "11319:   &ett_h225,",
          "",
          "[Added Lines]",
          "11319: #line 852 \"../../asn1/h225/packet-h225-template.c\"",
          "11320:   };",
          "11323:   static gint *ett[] = {",
          "11324:     &ett_h225,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "11561:     &ett_h225_T_result,",
          "11642: }",
          "",
          "[Removed Lines]",
          "11564: #line 853 \"../../asn1/h225/packet-h225-template.c\"",
          "11565:  };",
          "11567:  static tap_param h225_stat_params[] = {",
          "11568:   { PARAM_FILTER, \"filter\", \"Filter\", NULL, TRUE }",
          "11569:  };",
          "11571:  static new_stat_tap_ui h225_stat_table = {",
          "11572:   REGISTER_STAT_GROUP_TELEPHONY,",
          "11573:   \"H.225\",",
          "11574:   PFNAME,",
          "11575:   \"h225,counter\",",
          "11576:   h225_stat_init,",
          "11577:   h225_stat_packet,",
          "11578:   h225_stat_reset,",
          "11579:   NULL,",
          "11580:   NULL,",
          "11581:   sizeof(h225_stat_fields)/sizeof(stat_tap_table_item), h225_stat_fields,",
          "11582:   sizeof(h225_stat_params)/sizeof(tap_param), h225_stat_params,",
          "11583:   NULL",
          "11584:  };",
          "11586:  module_t *h225_module;",
          "11587:  int proto_h225_ras;",
          "11590:  proto_h225 = proto_register_protocol(PNAME, PSNAME, PFNAME);",
          "11593:  proto_h225_ras = proto_register_protocol(\"H.225 RAS\", \"H.225 RAS\", \"h225_ras\");",
          "11596:  proto_register_field_array(proto_h225, hf, array_length(hf));",
          "11597:  proto_register_subtree_array(ett, array_length(ett));",
          "11599:  h225_module = prefs_register_protocol(proto_h225, proto_reg_handoff_h225);",
          "11600:  prefs_register_uint_preference(h225_module, \"tls.port\",",
          "11601:   \"H.225 TLS Port\",",
          "11602:   \"H.225 Server TLS Port\",",
          "11603:   10, &h225_tls_port);",
          "11604:  prefs_register_bool_preference(h225_module, \"reassembly\",",
          "11605:   \"Reassemble H.225 messages spanning multiple TCP segments\",",
          "11606:   \"Whether the H.225 dissector should reassemble messages spanning multiple TCP segments.\"",
          "11607:   \" To use this option, you must also enable \\\"Allow subdissectors to reassemble TCP streams\\\" in the TCP protocol settings.\",",
          "11608:   &h225_reassembly);",
          "11609:  prefs_register_bool_preference(h225_module, \"h245_in_tree\",",
          "11610:   \"Display tunnelled H.245 inside H.225.0 tree\",",
          "11611:   \"ON - display tunnelled H.245 inside H.225.0 tree, OFF - display tunnelled H.245 in root tree after H.225.0\",",
          "11612:   &h225_h245_in_tree);",
          "11613:  prefs_register_bool_preference(h225_module, \"tp_in_tree\",",
          "11614:   \"Display tunnelled protocols inside H.225.0 tree\",",
          "11615:   \"ON - display tunnelled protocols inside H.225.0 tree, OFF - display tunnelled protocols in root tree after H.225.0\",",
          "11616:   &h225_tp_in_tree);",
          "11618:  new_register_dissector(PFNAME, dissect_h225_H323UserInformation, proto_h225);",
          "11619:  new_register_dissector(\"h323ui\",dissect_h225_H323UserInformation, proto_h225);",
          "11620:  new_register_dissector(\"h225.ras\", dissect_h225_h225_RasMessage, proto_h225);",
          "11622:  nsp_object_dissector_table = register_dissector_table(\"h225.nsp.object\", \"H.225 NonStandardParameter (object)\", FT_STRING, BASE_NONE);",
          "11623:  nsp_h221_dissector_table = register_dissector_table(\"h225.nsp.h221\", \"H.225 NonStandardParameter (h221)\", FT_UINT32, BASE_HEX);",
          "11624:  tp_dissector_table = register_dissector_table(\"h225.tp\", \"H.225 TunnelledProtocol\", FT_STRING, BASE_NONE);",
          "11625:  gef_name_dissector_table = register_dissector_table(\"h225.gef.name\", \"H.225 Generic Extensible Framework (names)\", FT_STRING, BASE_NONE);",
          "11626:  gef_content_dissector_table = register_dissector_table(\"h225.gef.content\", \"H.225 Generic Extensible Framework\", FT_STRING, BASE_NONE);",
          "11628:  register_init_routine(&h225_init_routine);",
          "11629:  register_cleanup_routine(&h225_cleanup_routine);",
          "11630:  h225_tap = register_tap(PFNAME);",
          "11632:  register_rtd_table(proto_h225_ras, PFNAME, NUM_RAS_STATS, 1, ras_message_category, h225rassrt_packet, NULL);",
          "11634:  register_new_stat_tap_ui(&h225_stat_table);",
          "11636:  oid_add_from_string(\"Version 1\",\"0.0.8.2250.0.1\");",
          "11637:  oid_add_from_string(\"Version 2\",\"0.0.8.2250.0.2\");",
          "11638:  oid_add_from_string(\"Version 3\",\"0.0.8.2250.0.3\");",
          "11639:  oid_add_from_string(\"Version 4\",\"0.0.8.2250.0.4\");",
          "11640:  oid_add_from_string(\"Version 5\",\"0.0.8.2250.0.5\");",
          "11641:  oid_add_from_string(\"Version 6\",\"0.0.8.2250.0.6\");",
          "",
          "[Added Lines]",
          "11569: #line 858 \"../../asn1/h225/packet-h225-template.c\"",
          "11570:   };",
          "11572:   static tap_param h225_stat_params[] = {",
          "11573:     { PARAM_FILTER, \"filter\", \"Filter\", NULL, TRUE }",
          "11574:   };",
          "11576:   static new_stat_tap_ui h225_stat_table = {",
          "11577:     REGISTER_STAT_GROUP_TELEPHONY,",
          "11578:     \"H.225\",",
          "11579:     PFNAME,",
          "11580:     \"h225,counter\",",
          "11581:     h225_stat_init,",
          "11582:     h225_stat_packet,",
          "11583:     h225_stat_reset,",
          "11584:     NULL,",
          "11585:     NULL,",
          "11586:     sizeof(h225_stat_fields)/sizeof(stat_tap_table_item), h225_stat_fields,",
          "11587:     sizeof(h225_stat_params)/sizeof(tap_param), h225_stat_params,",
          "11588:     NULL",
          "11589:   };",
          "11591:   module_t *h225_module;",
          "11592:   int proto_h225_ras;",
          "11595:   proto_h225 = proto_register_protocol(PNAME, PSNAME, PFNAME);",
          "11598:   proto_h225_ras = proto_register_protocol(\"H.225 RAS\", \"H.225 RAS\", \"h225_ras\");",
          "11601:   proto_register_field_array(proto_h225, hf, array_length(hf));",
          "11602:   proto_register_subtree_array(ett, array_length(ett));",
          "11604:   h225_module = prefs_register_protocol(proto_h225, proto_reg_handoff_h225);",
          "11605:   prefs_register_uint_preference(h225_module, \"tls.port\",",
          "11606:     \"H.225 TLS Port\",",
          "11607:     \"H.225 Server TLS Port\",",
          "11608:     10, &h225_tls_port);",
          "11609:   prefs_register_bool_preference(h225_module, \"reassembly\",",
          "11610:     \"Reassemble H.225 messages spanning multiple TCP segments\",",
          "11611:     \"Whether the H.225 dissector should reassemble messages spanning multiple TCP segments.\"",
          "11612:     \" To use this option, you must also enable \\\"Allow subdissectors to reassemble TCP streams\\\" in the TCP protocol settings.\",",
          "11613:     &h225_reassembly);",
          "11614:   prefs_register_bool_preference(h225_module, \"h245_in_tree\",",
          "11615:     \"Display tunnelled H.245 inside H.225.0 tree\",",
          "11616:     \"ON - display tunnelled H.245 inside H.225.0 tree, OFF - display tunnelled H.245 in root tree after H.225.0\",",
          "11617:     &h225_h245_in_tree);",
          "11618:   prefs_register_bool_preference(h225_module, \"tp_in_tree\",",
          "11619:     \"Display tunnelled protocols inside H.225.0 tree\",",
          "11620:     \"ON - display tunnelled protocols inside H.225.0 tree, OFF - display tunnelled protocols in root tree after H.225.0\",",
          "11621:     &h225_tp_in_tree);",
          "11623:   new_register_dissector(PFNAME, dissect_h225_H323UserInformation, proto_h225);",
          "11624:   new_register_dissector(\"h323ui\",dissect_h225_H323UserInformation, proto_h225);",
          "11625:   new_register_dissector(\"h225.ras\", dissect_h225_h225_RasMessage, proto_h225);",
          "11627:   nsp_object_dissector_table = register_dissector_table(\"h225.nsp.object\", \"H.225 NonStandardParameter (object)\", FT_STRING, BASE_NONE);",
          "11628:   nsp_h221_dissector_table = register_dissector_table(\"h225.nsp.h221\", \"H.225 NonStandardParameter (h221)\", FT_UINT32, BASE_HEX);",
          "11629:   tp_dissector_table = register_dissector_table(\"h225.tp\", \"H.225 TunnelledProtocol\", FT_STRING, BASE_NONE);",
          "11630:   gef_name_dissector_table = register_dissector_table(\"h225.gef.name\", \"H.225 Generic Extensible Framework (names)\", FT_STRING, BASE_NONE);",
          "11631:   gef_content_dissector_table = register_dissector_table(\"h225.gef.content\", \"H.225 Generic Extensible Framework\", FT_STRING, BASE_NONE);",
          "11633:   register_init_routine(&h225_init_routine);",
          "11634:   register_cleanup_routine(&h225_cleanup_routine);",
          "11635:   h225_tap = register_tap(PFNAME);",
          "11637:   register_rtd_table(proto_h225_ras, PFNAME, NUM_RAS_STATS, 1, ras_message_category, h225rassrt_packet, NULL);",
          "11639:   register_new_stat_tap_ui(&h225_stat_table);",
          "11641:   oid_add_from_string(\"Version 1\",\"0.0.8.2250.0.1\");",
          "11642:   oid_add_from_string(\"Version 2\",\"0.0.8.2250.0.2\");",
          "11643:   oid_add_from_string(\"Version 3\",\"0.0.8.2250.0.3\");",
          "11644:   oid_add_from_string(\"Version 4\",\"0.0.8.2250.0.4\");",
          "11645:   oid_add_from_string(\"Version 5\",\"0.0.8.2250.0.5\");",
          "11646:   oid_add_from_string(\"Version 6\",\"0.0.8.2250.0.6\");",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "11646: void",
          "11647: proto_reg_handoff_h225(void)",
          "11648: {",
          "11669: }",
          "11672: static void reset_h225_packet_info(h225_packet_info *pi)",
          "11673: {",
          "11694: }",
          "11721: #define THRESHOLD_REPEATED_RESPONDED_CALL 300",
          "",
          "[Removed Lines]",
          "11649:  static gboolean h225_prefs_initialized = FALSE;",
          "11650:  static dissector_handle_t h225ras_handle;",
          "11651:  static guint saved_h225_tls_port;",
          "11653:  if (!h225_prefs_initialized) {",
          "11654:   h225ras_handle=find_dissector(\"h225.ras\");",
          "11655:   dissector_add_uint(\"udp.port\", UDP_PORT_RAS1, h225ras_handle);",
          "11656:   dissector_add_uint(\"udp.port\", UDP_PORT_RAS2, h225ras_handle);",
          "11658:   h245_handle = find_dissector(\"h245\");",
          "11659:   h245dg_handle = find_dissector(\"h245dg\");",
          "11660:   h4501_handle = find_dissector(\"h4501\");",
          "11661:   data_handle = find_dissector(\"data\");",
          "11662:   h225_prefs_initialized = TRUE;",
          "11663:  } else {",
          "11664:   ssl_dissector_delete(saved_h225_tls_port, \"q931.tpkt\", TRUE);",
          "11665:  }",
          "11667:  saved_h225_tls_port = h225_tls_port;",
          "11668:  ssl_dissector_add(saved_h225_tls_port, \"q931.tpkt\", TRUE);",
          "11674:  if(pi == NULL) {",
          "11675:   return;",
          "11676:  }",
          "11678:  pi->msg_type = H225_OTHERS;",
          "11679:  pi->cs_type = H225_OTHER;",
          "11680:  pi->msg_tag = -1;",
          "11681:  pi->reason = -1;",
          "11682:  pi->requestSeqNum = 0;",
          "11683:  memset(&pi->guid,0,sizeof pi->guid);",
          "11684:  pi->is_duplicate = FALSE;",
          "11685:  pi->request_available = FALSE;",
          "11686:  pi->is_faststart = FALSE;",
          "11687:  pi->is_h245 = FALSE;",
          "11688:  pi->is_h245Tunneling = FALSE;",
          "11689:  pi->h245_address = 0;",
          "11690:  pi->h245_port = 0;",
          "11691:  pi->frame_label[0] = '\\0';",
          "11692:  pi->dialedDigits[0] = '\\0';",
          "11693:  pi->is_destinationInfo = FALSE;",
          "11697:  The following function contains the routines for RAS request/response matching.",
          "11698:  A RAS response matches with a request, if both messages have the same",
          "11699:  RequestSequenceNumber, belong to the same IP conversation and belong to the same",
          "11700:  RAS \"category\" (e.g. Admission, Registration).",
          "11702:  We use hashtables to access the lists of RAS calls (request/response pairs).",
          "11703:  We have one hashtable for each RAS category. The hashkeys consist of the",
          "11704:  non-unique 16-bit RequestSequenceNumber and values representing the conversation.",
          "11706:  In big capture files, we might get different requests with identical keys.",
          "11707:  These requests aren't necessarily duplicates. They might be valid new requests.",
          "11708:  At the moment we just use the timedelta between the last valid and the new request",
          "11709:  to decide if the new request is a duplicate or not. There might be better ways.",
          "11710:  Two thresholds are defined below.",
          "11712:  However the decision is made, another problem arises. We can't just add those",
          "11713:  requests to our hashtables. Instead we create lists of RAS calls with identical keys.",
          "11714:  The hashtables for RAS calls contain now pointers to the first RAS call in a list of",
          "11715:  RAS calls with identical keys.",
          "11716:  These lists aren't expected to contain more than 3 items and are usually single item",
          "11717:  lists. So we don't need an expensive but intelligent way to access these lists",
          "11718:  (e.g. hashtables). Just walk through such a list.",
          "",
          "[Added Lines]",
          "11654:   static gboolean h225_prefs_initialized = FALSE;",
          "11655:   static dissector_handle_t h225ras_handle;",
          "11656:   static guint saved_h225_tls_port;",
          "11658:   if (!h225_prefs_initialized) {",
          "11659:     h225ras_handle=find_dissector(\"h225.ras\");",
          "11660:     dissector_add_uint(\"udp.port\", UDP_PORT_RAS1, h225ras_handle);",
          "11661:     dissector_add_uint(\"udp.port\", UDP_PORT_RAS2, h225ras_handle);",
          "11663:     h245_handle = find_dissector(\"h245\");",
          "11664:     h245dg_handle = find_dissector(\"h245dg\");",
          "11665:     h4501_handle = find_dissector(\"h4501\");",
          "11666:     data_handle = find_dissector(\"data\");",
          "11667:     h225_prefs_initialized = TRUE;",
          "11668:   } else {",
          "11669:     ssl_dissector_delete(saved_h225_tls_port, \"q931.tpkt\", TRUE);",
          "11670:   }",
          "11672:   saved_h225_tls_port = h225_tls_port;",
          "11673:   ssl_dissector_add(saved_h225_tls_port, \"q931.tpkt\", TRUE);",
          "11679:   if(pi == NULL) {",
          "11680:     return;",
          "11681:   }",
          "11683:   pi->msg_type = H225_OTHERS;",
          "11684:   pi->cs_type = H225_OTHER;",
          "11685:   pi->msg_tag = -1;",
          "11686:   pi->reason = -1;",
          "11687:   pi->requestSeqNum = 0;",
          "11688:   memset(&pi->guid,0,sizeof pi->guid);",
          "11689:   pi->is_duplicate = FALSE;",
          "11690:   pi->request_available = FALSE;",
          "11691:   pi->is_faststart = FALSE;",
          "11692:   pi->is_h245 = FALSE;",
          "11693:   pi->is_h245Tunneling = FALSE;",
          "11694:   pi->h245_address = 0;",
          "11695:   pi->h245_port = 0;",
          "11696:   pi->frame_label[0] = '\\0';",
          "11697:   pi->dialedDigits[0] = '\\0';",
          "11698:   pi->is_destinationInfo = FALSE;",
          "11702:   The following function contains the routines for RAS request/response matching.",
          "11703:   A RAS response matches with a request, if both messages have the same",
          "11704:   RequestSequenceNumber, belong to the same IP conversation and belong to the same",
          "11705:   RAS \"category\" (e.g. Admission, Registration).",
          "11707:   We use hashtables to access the lists of RAS calls (request/response pairs).",
          "11708:   We have one hashtable for each RAS category. The hashkeys consist of the",
          "11709:   non-unique 16-bit RequestSequenceNumber and values representing the conversation.",
          "11711:   In big capture files, we might get different requests with identical keys.",
          "11712:   These requests aren't necessarily duplicates. They might be valid new requests.",
          "11713:   At the moment we just use the timedelta between the last valid and the new request",
          "11714:   to decide if the new request is a duplicate or not. There might be better ways.",
          "11715:   Two thresholds are defined below.",
          "11717:   However the decision is made, another problem arises. We can't just add those",
          "11718:   requests to our hashtables. Instead we create lists of RAS calls with identical keys.",
          "11719:   The hashtables for RAS calls contain now pointers to the first RAS call in a list of",
          "11720:   RAS calls with identical keys.",
          "11721:   These lists aren't expected to contain more than 3 items and are usually single item",
          "11722:   lists. So we don't need an expensive but intelligent way to access these lists",
          "11723:   (e.g. hashtables). Just walk through such a list.",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "11724: static void ras_call_matching(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, h225_packet_info *pi)",
          "11725: {",
          "11877: }",
          "",
          "[Removed Lines]",
          "11726:  proto_item *hidden_item;",
          "11727:  conversation_t* conversation = NULL;",
          "11728:  h225ras_call_info_key h225ras_call_key;",
          "11729:  h225ras_call_t *h225ras_call = NULL;",
          "11730:  nstime_t delta;",
          "11731:  guint msg_category;",
          "11733:  if(pi->msg_type == H225_RAS && pi->msg_tag < 21) {",
          "11736:   msg_category = pi->msg_tag / 3;",
          "11738:    conversation = find_or_create_conversation(pinfo);",
          "11741:    h225ras_call_key.reqSeqNum = pi->requestSeqNum;",
          "11742:    h225ras_call_key.conversation = conversation;",
          "11745:    h225ras_call = find_h225ras_call(&h225ras_call_key ,msg_category);",
          "11747:    if (h225ras_call != NULL) {",
          "11749:        source and destination, before - do we have",
          "11752:     do {",
          "11753:      if (pinfo->fd->num == h225ras_call->req_num) {",
          "11755:       break;",
          "11756:      }",
          "11759:      if (h225ras_call->next_call == NULL) {",
          "11760:       if ( (pinfo->fd->num > h225ras_call->rsp_num && h225ras_call->rsp_num != 0",
          "11761:          && pinfo->fd->abs_ts.secs > (h225ras_call->req_time.secs + THRESHOLD_REPEATED_RESPONDED_CALL) )",
          "11762:          ||(pinfo->fd->num > h225ras_call->req_num && h225ras_call->rsp_num == 0",
          "11763:          && pinfo->fd->abs_ts.secs > (h225ras_call->req_time.secs + THRESHOLD_REPEATED_NOT_RESPONDED_CALL) ) )",
          "11764:       {",
          "11766:           and this request appears after last response (has bigger frame number)",
          "11767:           and last request occurred more than 300 seconds ago,",
          "11768:           or if last request hasn't been responded",
          "11769:           and this request appears after last request (has bigger frame number)",
          "11770:           and last request occurred more than 1800 seconds ago,",
          "11773:        h225ras_call = append_h225ras_call(h225ras_call, pinfo, &pi->guid, msg_category);",
          "11774:       } else {",
          "11777:        pi->is_duplicate = TRUE;",
          "11778:        hidden_item = proto_tree_add_uint(tree, hf_h225_ras_dup, tvb, 0,0, pi->requestSeqNum);",
          "11779:        PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "11780:       }",
          "11781:       break;",
          "11782:      }",
          "11783:      h225ras_call = h225ras_call->next_call;",
          "11784:     } while (h225ras_call != NULL );",
          "11785:    }",
          "11786:    else {",
          "11787:     h225ras_call = new_h225ras_call(&h225ras_call_key, pinfo, &pi->guid, msg_category);",
          "11788:    }",
          "11791:    if(h225ras_call && h225ras_call->rsp_num != 0){",
          "11792:     proto_item *ti =",
          "11793:     proto_tree_add_uint_format(tree, hf_h225_ras_rsp_frame, tvb, 0, 0, h225ras_call->rsp_num,",
          "11794:                                 \"The response to this request is in frame %u\",",
          "11795:                                 h225ras_call->rsp_num);",
          "11796:     PROTO_ITEM_SET_GENERATED(ti);",
          "11797:    }",
          "11800:   }",
          "11802:    conversation = find_conversation(pinfo->fd->num, &pinfo->src,",
          "11803:         &pinfo->dst, pinfo->ptype, pinfo->srcport,",
          "11804:       pinfo->destport, 0);",
          "11805:      if (conversation != NULL) {",
          "11808:     h225ras_call_key.reqSeqNum = pi->requestSeqNum;",
          "11809:     h225ras_call_key.conversation = conversation;",
          "11810:     h225ras_call = find_h225ras_call(&h225ras_call_key ,msg_category);",
          "11811:     if(h225ras_call) {",
          "11813:      do {",
          "11814:       if (pinfo->fd->num == h225ras_call->rsp_num) {",
          "11816:        break;",
          "11817:       }",
          "11820:       if(h225ras_call->next_call == NULL) {",
          "11821:        break;",
          "11822:       }",
          "11823:       h225ras_call = h225ras_call->next_call;",
          "11824:      } while (h225ras_call != NULL) ;",
          "11826:      if (!h225ras_call) {",
          "11827:       return;",
          "11828:      }",
          "11831:      if (msg_category == 3 || msg_category == 5) {",
          "11832:       pi->guid = h225ras_call->guid;",
          "11833:       hidden_item = proto_tree_add_guid(tree, hf_h225_guid, tvb, 0, GUID_LEN, &pi->guid);",
          "11834:       PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "11835:      }",
          "11837:      if (h225ras_call->rsp_num == 0) {",
          "11839:          this must be the first response; remember its",
          "11841:       h225ras_call->rsp_num = pinfo->fd->num;",
          "11842:      }",
          "11843:      else {",
          "11846:       if (h225ras_call->rsp_num != pinfo->fd->num) {",
          "11849:        pi->is_duplicate = TRUE;",
          "11850:        hidden_item = proto_tree_add_uint(tree, hf_h225_ras_dup, tvb, 0,0, pi->requestSeqNum);",
          "11851:        PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "11852:       }",
          "11853:      }",
          "11855:      if(h225ras_call->req_num != 0){",
          "11856:       proto_item *ti;",
          "11857:       h225ras_call->responded = TRUE;",
          "11858:       pi->request_available = TRUE;",
          "11861:       ti = proto_tree_add_uint_format(tree, hf_h225_ras_req_frame, tvb, 0, 0, h225ras_call->req_num,",
          "11862:        \"This is a response to a request in frame %u\", h225ras_call->req_num);",
          "11863:       PROTO_ITEM_SET_GENERATED(ti);",
          "11866:       nstime_delta(&delta, &pinfo->fd->abs_ts, &h225ras_call->req_time);",
          "11870:       ti = proto_tree_add_time(tree, hf_h225_ras_deltatime, tvb, 0, 0, &(pi->delta_time));",
          "11871:       PROTO_ITEM_SET_GENERATED(ti);",
          "11872:      }",
          "11873:     }",
          "11874:    }",
          "11875:   }",
          "11876:  }",
          "",
          "[Added Lines]",
          "11731:   proto_item *hidden_item;",
          "11732:   conversation_t* conversation = NULL;",
          "11733:   h225ras_call_info_key h225ras_call_key;",
          "11734:   h225ras_call_t *h225ras_call = NULL;",
          "11735:   nstime_t delta;",
          "11736:   guint msg_category;",
          "11738:   if(pi->msg_type == H225_RAS && pi->msg_tag < 21) {",
          "11741:     msg_category = pi->msg_tag / 3;",
          "11743:       conversation = find_or_create_conversation(pinfo);",
          "11746:       h225ras_call_key.reqSeqNum = pi->requestSeqNum;",
          "11747:       h225ras_call_key.conversation = conversation;",
          "11750:       h225ras_call = find_h225ras_call(&h225ras_call_key ,msg_category);",
          "11752:       if (h225ras_call != NULL) {",
          "11754:            source and destination, before - do we have",
          "11757:         do {",
          "11758:           if (pinfo->fd->num == h225ras_call->req_num) {",
          "11760:             break;",
          "11761:           }",
          "11764:           if (h225ras_call->next_call == NULL) {",
          "11765:             if ( (pinfo->fd->num > h225ras_call->rsp_num && h225ras_call->rsp_num != 0",
          "11766:                && pinfo->fd->abs_ts.secs > (h225ras_call->req_time.secs + THRESHOLD_REPEATED_RESPONDED_CALL) )",
          "11767:                ||(pinfo->fd->num > h225ras_call->req_num && h225ras_call->rsp_num == 0",
          "11768:                && pinfo->fd->abs_ts.secs > (h225ras_call->req_time.secs + THRESHOLD_REPEATED_NOT_RESPONDED_CALL) ) )",
          "11769:             {",
          "11771:                  and this request appears after last response (has bigger frame number)",
          "11772:                  and last request occurred more than 300 seconds ago,",
          "11773:                  or if last request hasn't been responded",
          "11774:                  and this request appears after last request (has bigger frame number)",
          "11775:                  and last request occurred more than 1800 seconds ago,",
          "11778:               h225ras_call = append_h225ras_call(h225ras_call, pinfo, &pi->guid, msg_category);",
          "11779:             } else {",
          "11782:               pi->is_duplicate = TRUE;",
          "11783:               hidden_item = proto_tree_add_uint(tree, hf_h225_ras_dup, tvb, 0,0, pi->requestSeqNum);",
          "11784:               PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "11785:             }",
          "11786:             break;",
          "11787:           }",
          "11788:           h225ras_call = h225ras_call->next_call;",
          "11789:         } while (h225ras_call != NULL );",
          "11790:       }",
          "11791:       else {",
          "11792:         h225ras_call = new_h225ras_call(&h225ras_call_key, pinfo, &pi->guid, msg_category);",
          "11793:       }",
          "11796:       if(h225ras_call && h225ras_call->rsp_num != 0){",
          "11797:         proto_item *ti =",
          "11798:         proto_tree_add_uint_format(tree, hf_h225_ras_rsp_frame, tvb, 0, 0, h225ras_call->rsp_num,",
          "11799:                                      \"The response to this request is in frame %u\",",
          "11800:                                      h225ras_call->rsp_num);",
          "11801:         PROTO_ITEM_SET_GENERATED(ti);",
          "11802:       }",
          "11805:     }",
          "11807:       conversation = find_conversation(pinfo->fd->num, &pinfo->src,",
          "11808:         &pinfo->dst, pinfo->ptype, pinfo->srcport,",
          "11809:         pinfo->destport, 0);",
          "11810:       if (conversation != NULL) {",
          "11813:         h225ras_call_key.reqSeqNum = pi->requestSeqNum;",
          "11814:         h225ras_call_key.conversation = conversation;",
          "11815:         h225ras_call = find_h225ras_call(&h225ras_call_key ,msg_category);",
          "11816:         if(h225ras_call) {",
          "11818:           do {",
          "11819:             if (pinfo->fd->num == h225ras_call->rsp_num) {",
          "11821:               break;",
          "11822:             }",
          "11825:             if(h225ras_call->next_call == NULL) {",
          "11826:               break;",
          "11827:             }",
          "11828:             h225ras_call = h225ras_call->next_call;",
          "11829:           } while (h225ras_call != NULL) ;",
          "11831:           if (!h225ras_call) {",
          "11832:             return;",
          "11833:           }",
          "11836:           if (msg_category == 3 || msg_category == 5) {",
          "11837:             pi->guid = h225ras_call->guid;",
          "11838:             hidden_item = proto_tree_add_guid(tree, hf_h225_guid, tvb, 0, GUID_LEN, &pi->guid);",
          "11839:             PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "11840:           }",
          "11842:           if (h225ras_call->rsp_num == 0) {",
          "11844:                this must be the first response; remember its",
          "11846:             h225ras_call->rsp_num = pinfo->fd->num;",
          "11847:           }",
          "11848:           else {",
          "11851:             if (h225ras_call->rsp_num != pinfo->fd->num) {",
          "11854:               pi->is_duplicate = TRUE;",
          "11855:               hidden_item = proto_tree_add_uint(tree, hf_h225_ras_dup, tvb, 0,0, pi->requestSeqNum);",
          "11856:               PROTO_ITEM_SET_HIDDEN(hidden_item);",
          "11857:             }",
          "11858:           }",
          "11860:           if(h225ras_call->req_num != 0){",
          "11861:             proto_item *ti;",
          "11862:             h225ras_call->responded = TRUE;",
          "11863:             pi->request_available = TRUE;",
          "11866:             ti = proto_tree_add_uint_format(tree, hf_h225_ras_req_frame, tvb, 0, 0, h225ras_call->req_num,",
          "11867:               \"This is a response to a request in frame %u\", h225ras_call->req_num);",
          "11868:             PROTO_ITEM_SET_GENERATED(ti);",
          "11871:             nstime_delta(&delta, &pinfo->fd->abs_ts, &h225ras_call->req_time);",
          "11875:             ti = proto_tree_add_time(tree, hf_h225_ras_deltatime, tvb, 0, 0, &(pi->delta_time));",
          "11876:             PROTO_ITEM_SET_GENERATED(ti);",
          "11877:           }",
          "11878:         }",
          "11879:       }",
          "11880:     }",
          "11881:   }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h225.h||epan/dissectors/packet-h225.h": [
          "File: epan/dissectors/packet-h225.h -> epan/dissectors/packet-h225.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define PACKET_H225_H",
          "35: typedef enum _h225_msg_type {",
          "39: } h225_msg_type;",
          "41: typedef enum _h225_cs_type {",
          "56: } h225_cs_type;",
          "58: typedef struct _h225_packet_info {",
          "77: } h225_packet_info;",
          "",
          "[Removed Lines]",
          "36:  H225_RAS,",
          "37:  H225_CS,",
          "38:  H225_OTHERS",
          "42:     H225_SETUP,",
          "43:     H225_CALL_PROCEDING,",
          "44:     H225_CONNECT,",
          "45:     H225_ALERTING,",
          "46:     H225_INFORMATION,",
          "47:     H225_RELEASE_COMPLET,",
          "48:     H225_FACILITY,",
          "49:     H225_PROGRESS,",
          "50:     H225_EMPTY,",
          "51:     H225_STATUS,",
          "52:     H225_STATUS_INQUIRY,",
          "53:     H225_SETUP_ACK,",
          "54:     H225_NOTIFY,",
          "55:     H225_OTHER",
          "70:  gboolean is_h245;",
          "71:  gboolean is_h245Tunneling;",
          "72:  guint32 h245_address;",
          "73:  guint16 h245_port;",
          "75:  gboolean is_destinationInfo;",
          "",
          "[Added Lines]",
          "36:   H225_RAS,",
          "37:   H225_CS,",
          "38:   H225_OTHERS",
          "42:   H225_SETUP,",
          "43:   H225_CALL_PROCEDING,",
          "44:   H225_CONNECT,",
          "45:   H225_ALERTING,",
          "46:   H225_INFORMATION,",
          "47:   H225_RELEASE_COMPLET,",
          "48:   H225_FACILITY,",
          "49:   H225_PROGRESS,",
          "50:   H225_EMPTY,",
          "51:   H225_STATUS,",
          "52:   H225_STATUS_INQUIRY,",
          "53:   H225_SETUP_ACK,",
          "54:   H225_NOTIFY,",
          "55:   H225_OTHER",
          "70:   gboolean      is_h245;",
          "71:   gboolean      is_h245Tunneling;",
          "72:   guint32       h245_address;",
          "73:   guint16       h245_port;",
          "75:   gboolean      is_destinationInfo;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4962ea601f6ee08a4f774750dc37bac2fd92c2ca",
      "candidate_info": {
        "commit_hash": "4962ea601f6ee08a4f774750dc37bac2fd92c2ca",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/4962ea601f6ee08a4f774750dc37bac2fd92c2ca",
        "files": [
          "epan/dissectors/asn1/ansi_map/packet-ansi_map-template.c",
          "epan/dissectors/asn1/camel/packet-camel-template.c",
          "epan/dissectors/asn1/gsm_map/packet-gsm_map-template.c",
          "epan/dissectors/asn1/h225/packet-h225-template.c",
          "epan/dissectors/packet-ansi_a.c",
          "epan/dissectors/packet-ansi_map.c",
          "epan/dissectors/packet-bootp.c",
          "epan/dissectors/packet-camel.c",
          "epan/dissectors/packet-gsm_a_common.c",
          "epan/dissectors/packet-gsm_map.c",
          "epan/dissectors/packet-h225.c",
          "epan/dissectors/packet-mtp3.c",
          "epan/dissectors/packet-rpc.c",
          "epan/dissectors/packet-sip.c",
          "epan/dissectors/packet-wsp.c",
          "epan/stat_tap_ui.h",
          "ui/qt/simple_statistics_dialog.cpp",
          "ui/qt/simple_statistics_dialog.h"
        ],
        "message": "qt: move free_stat_tables from SimpleStatisticsDialog::fillTree to ~SimpleStatisticsDialog.\n\nAdd a reference count to stat_tap_table_ui to prevent bad deallocations.\n\nBug: 12437\nChange-Id: Ib9b1f929d08a574c306dc755ec416ab94a3fd6d3\nReviewed-on: https://code.wireshark.org/review/15920\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/asn1/ansi_map/packet-ansi_map-template.c||epan/dissectors/asn1/ansi_map/packet-ansi_map-template.c",
          "epan/dissectors/asn1/camel/packet-camel-template.c||epan/dissectors/asn1/camel/packet-camel-template.c",
          "epan/dissectors/asn1/gsm_map/packet-gsm_map-template.c||epan/dissectors/asn1/gsm_map/packet-gsm_map-template.c",
          "epan/dissectors/asn1/h225/packet-h225-template.c||epan/dissectors/asn1/h225/packet-h225-template.c",
          "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c",
          "epan/dissectors/packet-ansi_map.c||epan/dissectors/packet-ansi_map.c",
          "epan/dissectors/packet-bootp.c||epan/dissectors/packet-bootp.c",
          "epan/dissectors/packet-camel.c||epan/dissectors/packet-camel.c",
          "epan/dissectors/packet-gsm_a_common.c||epan/dissectors/packet-gsm_a_common.c",
          "epan/dissectors/packet-gsm_map.c||epan/dissectors/packet-gsm_map.c",
          "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c",
          "epan/dissectors/packet-mtp3.c||epan/dissectors/packet-mtp3.c",
          "epan/dissectors/packet-rpc.c||epan/dissectors/packet-rpc.c",
          "epan/dissectors/packet-sip.c||epan/dissectors/packet-sip.c",
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c",
          "epan/stat_tap_ui.h||epan/stat_tap_ui.h",
          "ui/qt/simple_statistics_dialog.cpp||ui/qt/simple_statistics_dialog.cpp",
          "ui/qt/simple_statistics_dialog.h||ui/qt/simple_statistics_dialog.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ],
          "candidate": [
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/asn1/ansi_map/packet-ansi_map-template.c||epan/dissectors/asn1/ansi_map/packet-ansi_map-template.c": [
          "File: epan/dissectors/asn1/ansi_map/packet-ansi_map-template.c -> epan/dissectors/asn1/ansi_map/packet-ansi_map-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5449:         NULL,",
          "5450:         sizeof(stat_fields)/sizeof(stat_tap_table_item), stat_fields,",
          "5451:         0, NULL,",
          "5453:     };",
          "",
          "[Removed Lines]",
          "5452:         NULL",
          "",
          "[Added Lines]",
          "5452:         NULL,",
          "5453:         0",
          "",
          "---------------"
        ],
        "epan/dissectors/asn1/camel/packet-camel-template.c||epan/dissectors/asn1/camel/packet-camel-template.c": [
          "File: epan/dissectors/asn1/camel/packet-camel-template.c -> epan/dissectors/asn1/camel/packet-camel-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1544:     NULL,",
          "1545:     sizeof(camel_stat_fields)/sizeof(stat_tap_table_item), camel_stat_fields,",
          "1546:     sizeof(camel_stat_params)/sizeof(tap_param), camel_stat_params,",
          "1548:   };",
          "",
          "[Removed Lines]",
          "1547:     NULL",
          "",
          "[Added Lines]",
          "1547:     NULL,",
          "1548:     0",
          "",
          "---------------"
        ],
        "epan/dissectors/asn1/gsm_map/packet-gsm_map-template.c||epan/dissectors/asn1/gsm_map/packet-gsm_map-template.c": [
          "File: epan/dissectors/asn1/gsm_map/packet-gsm_map-template.c -> epan/dissectors/asn1/gsm_map/packet-gsm_map-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3120:     NULL,",
          "3121:     sizeof(gsm_map_stat_fields)/sizeof(stat_tap_table_item), gsm_map_stat_fields,",
          "3122:     sizeof(gsm_map_stat_params)/sizeof(tap_param), gsm_map_stat_params,",
          "3124:   };",
          "",
          "[Removed Lines]",
          "3123:     NULL",
          "",
          "[Added Lines]",
          "3123:     NULL,",
          "3124:     0",
          "",
          "---------------"
        ],
        "epan/dissectors/asn1/h225/packet-h225-template.c||epan/dissectors/asn1/h225/packet-h225-template.c": [
          "File: epan/dissectors/asn1/h225/packet-h225-template.c -> epan/dissectors/asn1/h225/packet-h225-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "862:     NULL,",
          "863:     sizeof(h225_stat_fields)/sizeof(stat_tap_table_item), h225_stat_fields,",
          "864:     sizeof(h225_stat_params)/sizeof(tap_param), h225_stat_params,",
          "866:   };",
          "868:   module_t *h225_module;",
          "",
          "[Removed Lines]",
          "865:     NULL",
          "",
          "[Added Lines]",
          "865:     NULL,",
          "866:     0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ansi_a.c||epan/dissectors/packet-ansi_a.c": [
          "File: epan/dissectors/packet-ansi_a.c -> epan/dissectors/packet-ansi_a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12763:         NULL,",
          "12764:         sizeof(dtap_stat_fields)/sizeof(stat_tap_table_item), dtap_stat_fields,",
          "12765:         0, NULL,",
          "12767:     };",
          "12769:     static stat_tap_table_ui bsmap_stat_table = {",
          "",
          "[Removed Lines]",
          "12766:         NULL",
          "",
          "[Added Lines]",
          "12766:         NULL,",
          "12767:         0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12778:         NULL,",
          "12779:         sizeof(bsmap_stat_fields)/sizeof(stat_tap_table_item), bsmap_stat_fields,",
          "12780:         0, NULL,",
          "12782:     };",
          "12784:     memset((void *) ett_dtap_msg, -1, sizeof(ett_dtap_msg));",
          "",
          "[Removed Lines]",
          "12781:         NULL",
          "",
          "[Added Lines]",
          "12782:         NULL,",
          "12783:         0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-ansi_map.c||epan/dissectors/packet-ansi_map.c": [
          "File: epan/dissectors/packet-ansi_map.c -> epan/dissectors/packet-ansi_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19519:         NULL,",
          "19520:         sizeof(stat_fields)/sizeof(stat_tap_table_item), stat_fields,",
          "19521:         0, NULL,",
          "19523:     };",
          "",
          "[Removed Lines]",
          "19522:         NULL",
          "",
          "[Added Lines]",
          "19522:         NULL,",
          "19523:         0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-bootp.c||epan/dissectors/packet-bootp.c": [
          "File: epan/dissectors/packet-bootp.c -> epan/dissectors/packet-bootp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8553:   NULL,",
          "8554:   sizeof(bootp_stat_fields)/sizeof(stat_tap_table_item), bootp_stat_fields,",
          "8555:   sizeof(bootp_stat_params)/sizeof(tap_param), bootp_stat_params,",
          "8557:  };",
          "8559:  module_t *bootp_module;",
          "",
          "[Removed Lines]",
          "8556:   NULL",
          "",
          "[Added Lines]",
          "8556:   NULL,",
          "8557:   0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-camel.c||epan/dissectors/packet-camel.c": [
          "File: epan/dissectors/packet-camel.c -> epan/dissectors/packet-camel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10663:     NULL,",
          "10664:     sizeof(camel_stat_fields)/sizeof(stat_tap_table_item), camel_stat_fields,",
          "10665:     sizeof(camel_stat_params)/sizeof(tap_param), camel_stat_params,",
          "10667:   };",
          "",
          "[Removed Lines]",
          "10666:     NULL",
          "",
          "[Added Lines]",
          "10666:     NULL,",
          "10667:     0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-gsm_a_common.c||epan/dissectors/packet-gsm_a_common.c": [
          "File: epan/dissectors/packet-gsm_a_common.c -> epan/dissectors/packet-gsm_a_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4680:         NULL,",
          "4681:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4682:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4684:     };",
          "4686:     static stat_tap_table_ui gsm_a_dtap_mm_stat_table = {",
          "",
          "[Removed Lines]",
          "4683:         NULL",
          "",
          "[Added Lines]",
          "4683:         NULL,",
          "4684:         0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4695:         NULL,",
          "4696:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4697:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4699:     };",
          "4701:     static stat_tap_table_ui gsm_a_dtap_rr_stat_table = {",
          "",
          "[Removed Lines]",
          "4698:         NULL",
          "",
          "[Added Lines]",
          "4699:         NULL,",
          "4700:         0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4710:         NULL,",
          "4711:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4712:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4714:     };",
          "4716:     static stat_tap_table_ui gsm_a_dtap_cc_stat_table = {",
          "",
          "[Removed Lines]",
          "4713:         NULL",
          "",
          "[Added Lines]",
          "4715:         NULL,",
          "4716:         0",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4725:         NULL,",
          "4726:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4727:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4729:     };",
          "4731:     static stat_tap_table_ui gsm_a_dtap_gmm_stat_table = {",
          "",
          "[Removed Lines]",
          "4728:         NULL",
          "",
          "[Added Lines]",
          "4731:         NULL,",
          "4732:         0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4740:         NULL,",
          "4741:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4742:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4744:     };",
          "4746:     static stat_tap_table_ui gsm_a_dtap_sm_stat_table = {",
          "",
          "[Removed Lines]",
          "4743:         NULL",
          "",
          "[Added Lines]",
          "4747:         NULL,",
          "4748:         0",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4755:         NULL,",
          "4756:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4757:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4759:     };",
          "4761:     static stat_tap_table_ui gsm_a_dtap_sms_stat_table = {",
          "",
          "[Removed Lines]",
          "4758:         NULL",
          "",
          "[Added Lines]",
          "4763:         NULL,",
          "4764:         0",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4770:         NULL,",
          "4771:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4772:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4774:     };",
          "4776:     static stat_tap_table_ui gsm_a_dtap_tp_stat_table = {",
          "",
          "[Removed Lines]",
          "4773:         NULL",
          "",
          "[Added Lines]",
          "4779:         NULL,",
          "4780:         0",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4785:         NULL,",
          "4786:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4787:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4789:     };",
          "4791:     static stat_tap_table_ui gsm_a_dtap_ss_stat_table = {",
          "",
          "[Removed Lines]",
          "4788:         NULL",
          "",
          "[Added Lines]",
          "4795:         NULL,",
          "4796:         0",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4800:         NULL,",
          "4801:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4802:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4804:     };",
          "4806:     static stat_tap_table_ui gsm_a_sacch_rr_stat_table = {",
          "",
          "[Removed Lines]",
          "4803:         NULL",
          "",
          "[Added Lines]",
          "4811:         NULL,",
          "4812:         0",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4815:         NULL,",
          "4816:         sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item), gsm_a_stat_fields,",
          "4817:         sizeof(gsm_a_stat_params)/sizeof(tap_param), gsm_a_stat_params,",
          "4819:     };",
          "4821:     last_offset = NUM_INDIVIDUAL_ELEMS;",
          "",
          "[Removed Lines]",
          "4818:         NULL",
          "",
          "[Added Lines]",
          "4827:         NULL,",
          "4828:         0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-gsm_map.c||epan/dissectors/packet-gsm_map.c": [
          "File: epan/dissectors/packet-gsm_map.c -> epan/dissectors/packet-gsm_map.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31113:     NULL,",
          "31114:     sizeof(gsm_map_stat_fields)/sizeof(stat_tap_table_item), gsm_map_stat_fields,",
          "31115:     sizeof(gsm_map_stat_params)/sizeof(tap_param), gsm_map_stat_params,",
          "31117:   };",
          "",
          "[Removed Lines]",
          "31116:     NULL",
          "",
          "[Added Lines]",
          "31116:     NULL,",
          "31117:     0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31225:   oid_add_from_string(\"ericsson-gsm-Map-Ext\",\"1.2.826.0.1249.58.1.0\" );",
          "31226:   oid_add_from_string(\"accessTypeNotAllowed-id\",\"1.3.12.2.1107.3.66.1.2\");",
          "",
          "[Removed Lines]",
          "31224: #line 3148 \"./asn1/gsm_map/packet-gsm_map-template.c\"",
          "",
          "[Added Lines]",
          "31225: #line 3149 \"./asn1/gsm_map/packet-gsm_map-template.c\"",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c": [
          "File: epan/dissectors/packet-h225.c -> epan/dissectors/packet-h225.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1566: static int",
          "1567: dissect_h225_H221NonStandard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1569:   t35CountryCode = 0;",
          "1570:   t35Extension = 0;",
          "1571:   manufacturerCode = 0;",
          "",
          "[Removed Lines]",
          "1568: #line 792 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1568: #line 790 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1573:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "1574:                                    ett_h225_H221NonStandard, H221NonStandard_sequence);",
          "1577:   h221NonStandard = ((t35CountryCode * 256) + t35Extension) * 65536 + manufacturerCode;",
          "1578:   proto_tree_add_uint(tree, hf_h221Manufacturer, tvb, (offset>>3)-4, 4, h221NonStandard);",
          "",
          "[Removed Lines]",
          "1576: #line 796 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1576: #line 794 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1596: static int",
          "1597: dissect_h225_NonStandardIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1599:   gint32 value;",
          "1601:   nsiOID = \"\";",
          "",
          "[Removed Lines]",
          "1598: #line 773 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1598: #line 771 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1625: static int",
          "1626: dissect_h225_T_nsp_data(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1628:   tvbuff_t *next_tvb = NULL;",
          "1630:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1627: #line 807 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1627: #line 805 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1648: int",
          "1649: dissect_h225_NonStandardParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1651:   nsp_handle = NULL;",
          "1653:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1650: #line 805 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1650: #line 803 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2047: static int",
          "2048: dissect_h225_TBCD_STRING(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2050:   int min_len, max_len;",
          "2051:   gboolean has_extension;",
          "",
          "[Removed Lines]",
          "2049: #line 902 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "2049: #line 900 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2846: int",
          "2847: dissect_h225_TunnelledProtocol(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2849:   tpOID = \"\";",
          "2851:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "2852:                                    ett_h225_TunnelledProtocol, TunnelledProtocol_sequence);",
          "2855:   tp_handle = dissector_get_string_handle(tp_dissector_table, tpOID);",
          "2857:   return offset;",
          "",
          "[Removed Lines]",
          "2848: #line 750 \"./asn1/h225/h225.cnf\"",
          "2854: #line 752 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "2848: #line 748 \"./asn1/h225/h225.cnf\"",
          "2854: #line 750 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3836: static int",
          "3837: dissect_h225_T_standard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3839:   guint32 value_int = (guint32)-1;",
          "3840:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "3838: #line 864 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3838: #line 862 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3854: static int",
          "3855: dissect_h225_T_oid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3857:   const gchar *oid_str = NULL;",
          "3858:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "3856: #line 873 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3856: #line 871 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3884: int",
          "3885: dissect_h225_GenericIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3887:   gef_ctx_t *gefx;",
          "3888:   proto_item* ti;",
          "",
          "[Removed Lines]",
          "3886: #line 850 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3886: #line 848 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3891:                                  ett_h225_GenericIdentifier, GenericIdentifier_choice,",
          "3892:                                  NULL);",
          "3895:   gef_ctx_update_key(gef_ctx_get(actx->private_data));",
          "3896:   gefx = gef_ctx_get(actx->private_data);",
          "3897:   if (gefx) {",
          "",
          "[Removed Lines]",
          "3894: #line 853 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3894: #line 851 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3909: static int",
          "3910: dissect_h225_T_raw(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3912:   tvbuff_t *value_tvb;",
          "3913:   gef_ctx_t *gefx;",
          "3914:   proto_item* ti;",
          "",
          "[Removed Lines]",
          "3911: #line 883 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3911: #line 881 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4027: static int",
          "4028: dissect_h225_EnumeratedParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4030:   gef_ctx_t *parent_gefx;",
          "4032:   parent_gefx = gef_ctx_get(actx->private_data);",
          "",
          "[Removed Lines]",
          "4029: #line 832 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4029: #line 830 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4035:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4036:                                    ett_h225_EnumeratedParameter, EnumeratedParameter_sequence);",
          "4039:   actx->private_data = parent_gefx;",
          "4041:   return offset;",
          "",
          "[Removed Lines]",
          "4038: #line 837 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4038: #line 835 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4051: int",
          "4052: dissect_h225_GenericData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4054:   void *priv_data = actx->private_data;",
          "4055:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "4053: #line 818 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4053: #line 816 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4064:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4065:                                    ett_h225_GenericData, GenericData_sequence);",
          "4068:   actx->private_data = priv_data;",
          "4070:   return offset;",
          "",
          "[Removed Lines]",
          "4067: #line 828 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4067: #line 826 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4104: static int",
          "4105: dissect_h225_FeatureDescriptor(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4107:   void *priv_data = actx->private_data;",
          "4108:   actx->private_data = gef_ctx_alloc(NULL, \"FeatureDescriptor\");",
          "4110:   offset = dissect_h225_GenericData(tvb, offset, actx, tree, hf_index);",
          "4113:   actx->private_data = priv_data;",
          "4115:   return offset;",
          "",
          "[Removed Lines]",
          "4106: #line 842 \"./asn1/h225/h225.cnf\"",
          "4112: #line 845 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4106: #line 840 \"./asn1/h225/h225.cnf\"",
          "4112: #line 843 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5106: static int",
          "5107: dissect_h225_T_messageContent_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5109:   tvbuff_t *next_tvb = NULL;",
          "5111:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5108: #line 760 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5108: #line 758 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5142: static int",
          "5143: dissect_h225_T_tunnelledSignallingMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5145:   tp_handle = NULL;",
          "5147:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5144: #line 758 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5144: #line 756 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "11762:     NULL,",
          "11763:     sizeof(h225_stat_fields)/sizeof(stat_tap_table_item), h225_stat_fields,",
          "11764:     sizeof(h225_stat_params)/sizeof(tap_param), h225_stat_params,",
          "11766:   };",
          "11768:   module_t *h225_module;",
          "",
          "[Removed Lines]",
          "11765:     NULL",
          "",
          "[Added Lines]",
          "11765:     NULL,",
          "11766:     0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-mtp3.c||epan/dissectors/packet-mtp3.c": [
          "File: epan/dissectors/packet-mtp3.c -> epan/dissectors/packet-mtp3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1060:     NULL,",
          "1061:     sizeof(mtp3_stat_fields)/sizeof(stat_tap_table_item), mtp3_stat_fields,",
          "1062:     sizeof(mtp3_stat_params)/sizeof(tap_param), mtp3_stat_params,",
          "1064:   };",
          "",
          "[Removed Lines]",
          "1063:     NULL",
          "",
          "[Added Lines]",
          "1063:     NULL,",
          "1064:     0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-rpc.c||epan/dissectors/packet-rpc.c": [
          "File: epan/dissectors/packet-rpc.c -> epan/dissectors/packet-rpc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4354:   NULL,",
          "4355:   sizeof(rpc_prog_stat_fields)/sizeof(stat_tap_table_item), rpc_prog_stat_fields,",
          "4356:   sizeof(rpc_prog_stat_params)/sizeof(tap_param), rpc_prog_stat_params,",
          "4358:  };",
          "4360:  proto_rpc = proto_register_protocol(\"Remote Procedure Call\", \"RPC\", \"rpc\");",
          "",
          "[Removed Lines]",
          "4357:   NULL",
          "",
          "[Added Lines]",
          "4357:   NULL,",
          "4358:   0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-sip.c||epan/dissectors/packet-sip.c": [
          "File: epan/dissectors/packet-sip.c -> epan/dissectors/packet-sip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6573:       NULL,",
          "6574:       sizeof(sip_stat_fields)/sizeof(stat_tap_table_item), sip_stat_fields,",
          "6575:       sizeof(sip_stat_params)/sizeof(tap_param), sip_stat_params,",
          "6577:     };",
          "",
          "[Removed Lines]",
          "6576:       NULL",
          "",
          "[Added Lines]",
          "6576:       NULL,",
          "6577:       0",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7335:         NULL,",
          "7336:         sizeof(wsp_stat_fields)/sizeof(stat_tap_table_item), wsp_stat_fields,",
          "7337:         sizeof(wsp_stat_params)/sizeof(tap_param), wsp_stat_params,",
          "7339:     };",
          "",
          "[Removed Lines]",
          "7338:         NULL",
          "",
          "[Added Lines]",
          "7338:         NULL,",
          "7339:         0",
          "",
          "---------------"
        ],
        "epan/stat_tap_ui.h||epan/stat_tap_ui.h": [
          "File: epan/stat_tap_ui.h -> epan/stat_tap_ui.h"
        ],
        "ui/qt/simple_statistics_dialog.cpp||ui/qt/simple_statistics_dialog.cpp": [
          "File: ui/qt/simple_statistics_dialog.cpp -> ui/qt/simple_statistics_dialog.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     TapParameterDialog(parent, cf, help_topic),",
          "159:     stu_(stu)",
          "160: {",
          "161:     setWindowSubtitle(stu_->title);",
          "162:     loadGeometry(0, 0, stu_->title);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     stu->refcount++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:     tapDraw(&stat_data);",
          "287:     removeTapListeners();",
          "289: }",
          "",
          "[Removed Lines]",
          "288:     free_stat_tables(stu_, NULL, NULL);",
          "",
          "[Added Lines]",
          "289: }",
          "291: SimpleStatisticsDialog::~SimpleStatisticsDialog()",
          "292: {",
          "293:     stu_->refcount--;",
          "294:     if (stu_->refcount == 0) {",
          "295:         if (stu_->tables)",
          "296:             free_stat_tables(stu_, NULL, NULL);",
          "297:     }",
          "",
          "---------------"
        ],
        "ui/qt/simple_statistics_dialog.h||ui/qt/simple_statistics_dialog.h": [
          "File: ui/qt/simple_statistics_dialog.h -> ui/qt/simple_statistics_dialog.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     static void tapReset(void *sd_ptr);",
          "50:     static void tapDraw(void *sd_ptr);",
          "52: private slots:",
          "53:     virtual void fillTree();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     ~SimpleStatisticsDialog();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21007dc5466b6f9e3f4c00a23eed2fc23f6ac66f",
      "candidate_info": {
        "commit_hash": "21007dc5466b6f9e3f4c00a23eed2fc23f6ac66f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/21007dc5466b6f9e3f4c00a23eed2fc23f6ac66f",
        "files": [
          "epan/dissectors/asn1/h225/h225.cnf",
          "epan/dissectors/asn1/h225/packet-h225-template.c",
          "epan/dissectors/packet-h225.c"
        ],
        "message": "H225: Replace globals that track packet data with p_add_proto_data/p_get_proto_data.\n\nChange-Id: I0380151fb0f45063b81bc55dd5b8dc4add99ad30\nReviewed-on: https://code.wireshark.org/review/15794\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf",
          "epan/dissectors/asn1/h225/packet-h225-template.c||epan/dissectors/asn1/h225/packet-h225-template.c",
          "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf",
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ],
          "candidate": [
            "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf",
            "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/asn1/h225/h225.cnf||epan/dissectors/asn1/h225/h225.cnf": [
          "File: epan/dissectors/asn1/h225/h225.cnf -> epan/dissectors/asn1/h225/h225.cnf",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: #----------------------------------------------------------------------------------------",
          "240: #.FN_BODY H323-UU-PDU/h323-message-body  VAL_PTR = &message_body_val",
          "241:   gint32 message_body_val;",
          "243:   contains_faststart = FALSE;",
          "244:   call_id_guid = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:   h225_packet_info* h225_pi;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   col_append_fstr(%(ACTX)s->pinfo->cinfo, COL_INFO, \"CS: %%s \",",
          "247:     val_to_str(message_body_val, T_h323_message_body_vals, \"<unknown>\"));",
          "256:   }",
          "258:   if (contains_faststart == TRUE )",
          "",
          "[Removed Lines]",
          "249:   if (h225_pi->msg_type == H225_CS) {",
          "251:     h225_pi->msg_tag = message_body_val;",
          "252:   }",
          "254:   if (call_id_guid) {",
          "255:     h225_pi->guid = *call_id_guid;",
          "",
          "[Added Lines]",
          "250:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), %(ACTX)s->pinfo, proto_h225, 0);",
          "251:   if (h225_pi != NULL) {",
          "252:     if (h225_pi->msg_type == H225_CS) {",
          "254:       h225_pi->msg_tag = message_body_val;",
          "255:     }",
          "257:     if (call_id_guid) {",
          "258:       h225_pi->guid = *call_id_guid;",
          "259:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267: #.FN_BODY FastStart/_item  VAL_PTR = &value_tvb",
          "268:   tvbuff_t *value_tvb = NULL;",
          "269:   char codec_str[50];",
          "270:   codec_str[0] = '\\0';",
          "272: %(DEFAULT_BODY)s",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:   h225_packet_info* h225_pi;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275:   }",
          "280:   contains_faststart = TRUE;",
          "282: #.END",
          "283: #----------------------------------------------------------------------------------------",
          "284: #.FN_BODY RasMessage  VAL_PTR = &rasmessage_value",
          "285:     gint32 rasmessage_value;",
          "287:   call_id_guid = NULL;",
          "288: %(DEFAULT_BODY)s",
          "289:   col_add_fstr(%(ACTX)s->pinfo->cinfo, COL_INFO, \"RAS: %%s \",",
          "290:     val_to_str(rasmessage_value, h225_RasMessage_vals, \"<unknown>\"));",
          "295:   }",
          "296: #.END",
          "297: #----------------------------------------------------------------------------------------",
          "298: #.FN_HDR DestinationInfo/_item",
          "301: #.END",
          "302: #----------------------------------------------------------------------------------------",
          "303: #.FN_BODY DialedDigits  VAL_PTR = &value_tvb",
          "304:   tvbuff_t *value_tvb = NULL;",
          "305:   guint len = 0;",
          "307: %(DEFAULT_BODY)s",
          "308:   if (h225_pi && h225_pi->is_destinationInfo == TRUE) {",
          "309:     if (value_tvb) {",
          "310:       len = tvb_reported_length(value_tvb);",
          "",
          "[Removed Lines]",
          "278:   g_snprintf(h225_pi->frame_label, 50, \"%%s %%s\", h225_pi->frame_label, codec_str);",
          "281:   h225_pi->is_faststart = TRUE;",
          "292:   h225_pi->msg_tag = rasmessage_value;",
          "293:   if (call_id_guid) {",
          "294:     h225_pi->guid = *call_id_guid;",
          "300:   h225_pi->is_destinationInfo = TRUE;",
          "",
          "[Added Lines]",
          "283:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), %(ACTX)s->pinfo, proto_h225, 0);",
          "284:   if (h225_pi != NULL) {",
          "285:     g_snprintf(h225_pi->frame_label, 50, \"%%s %%s\", h225_pi->frame_label, codec_str);",
          "286:     h225_pi->is_faststart = TRUE;",
          "287:   }",
          "293:     h225_packet_info* h225_pi;",
          "300:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), %(ACTX)s->pinfo, proto_h225, 0);",
          "301:   if (h225_pi != NULL) {",
          "302:     h225_pi->msg_tag = rasmessage_value;",
          "303:     if (call_id_guid) {",
          "304:       h225_pi->guid = *call_id_guid;",
          "305:     }",
          "310:   h225_packet_info* h225_pi;",
          "312:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "313:   if (h225_pi != NULL) {",
          "314:     h225_pi->is_destinationInfo = TRUE;",
          "315:   }",
          "321:   h225_packet_info* h225_pi;",
          "324:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "354:   next_tvb_add_handle(&h245_list, h245_tvb, (h225_h245_in_tree)?tree:NULL, h245dg_handle);",
          "355: #.END",
          "356: #----------------------------------------------------------------------------------------",
          "357: #.FN_FTR H323-UU-PDU/h323-message-body/empty",
          "359: #.END",
          "360: #----------------------------------------------------------------------------------------",
          "361: #.FN_FTR Status-UUIE",
          "365: #.END",
          "366: #----------------------------------------------------------------------------------------",
          "367: #.FN_FTR Information-UUIE",
          "371: #.END",
          "372: #----------------------------------------------------------------------------------------",
          "373: #.FN_FTR Progress-UUIE",
          "380: #.END",
          "381: #----------------------------------------------------------------------------------------",
          "382: #.FN_FTR SetupAcknowledge-UUIE",
          "386: #.END",
          "387: #----------------------------------------------------------------------------------------",
          "388: #.FN_FTR Facility-UUIE",
          "392: #.END",
          "393: #----------------------------------------------------------------------------------------",
          "394: #.FN_PARS H323-UU-PDU/h245Tunnelling  VAL_PTR = &(h225_pi->is_h245Tunneling)",
          "395: #----------------------------------------------------------------------------------------",
          "396: #.FN_HDR Setup-UUIE",
          "397:   contains_faststart = FALSE;",
          "398: #.END",
          "399: #----------------------------------------------------------------------------------------",
          "400: #.FN_FTR Setup-UUIE",
          "407: #.END",
          "408: #----------------------------------------------------------------------------------------",
          "409: #.FN_FTR CallProceeding-UUIE",
          "416: #.END",
          "417: #----------------------------------------------------------------------------------------",
          "418: #.FN_FTR Alerting-UUIE",
          "425: #.END",
          "426: #----------------------------------------------------------------------------------------",
          "427: #.FN_FTR ReleaseComplete-UUIE",
          "431: #.END",
          "432: #----------------------------------------------------------------------------------------",
          "433: #.FN_FTR Connect-UUIE",
          "440: #.END",
          "441: #----------------------------------------------------------------------------------------",
          "442: #.FN_HDR H245TransportAddress",
          "443:   ipv4_address=0;",
          "444:   ipv6_address = ipv6_address_zeros;",
          "445:   ip_port=0;",
          "",
          "[Removed Lines]",
          "358:   h225_pi->cs_type = H225_EMPTY;",
          "363:   h225_pi->cs_type = H225_STATUS;",
          "364:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "369:   h225_pi->cs_type = H225_INFORMATION;",
          "370:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "375:   h225_pi->cs_type = H225_PROGRESS;",
          "376:   if (contains_faststart == TRUE )",
          "377:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "378:   else",
          "379:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "384:   h225_pi->cs_type = H225_SETUP_ACK;",
          "385:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "390:   h225_pi->cs_type = H225_FACILITY;",
          "391:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "402:   h225_pi->cs_type = H225_SETUP;",
          "403:   if (contains_faststart == TRUE )",
          "404:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "405:   else",
          "406:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "411:   h225_pi->cs_type = H225_CALL_PROCEDING;",
          "412:   if (contains_faststart == TRUE )",
          "413:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "414:   else",
          "415:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "420:   h225_pi->cs_type = H225_ALERTING;",
          "421:   if (contains_faststart == TRUE )",
          "422:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "423:   else",
          "424:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "429:   h225_pi->cs_type = H225_RELEASE_COMPLET;",
          "430:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "435:   h225_pi->cs_type = H225_CONNECT;",
          "436:   if (contains_faststart == TRUE )",
          "437:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "438:   else",
          "439:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "374: #.FN_HDR H323-UU-PDU/h323-message-body/empty",
          "375:   h225_packet_info* h225_pi;",
          "376: #.END",
          "377: #----------------------------------------------------------------------------------------",
          "379:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "380:   if (h225_pi != NULL) {",
          "381:     h225_pi->cs_type = H225_EMPTY;",
          "382:   }",
          "383: #.END",
          "384: #----------------------------------------------------------------------------------------",
          "385: #.FN_HDR Status-UUIE",
          "386:   h225_packet_info* h225_pi;",
          "391:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "392:   if (h225_pi != NULL) {",
          "393:     h225_pi->cs_type = H225_STATUS;",
          "394:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "395:   }",
          "396: #.END",
          "397: #----------------------------------------------------------------------------------------",
          "398: #.FN_HDR Information-UUIE",
          "399:   h225_packet_info* h225_pi;",
          "404:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "405:   if (h225_pi != NULL) {",
          "406:     h225_pi->cs_type = H225_INFORMATION;",
          "407:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "408:   }",
          "409: #.END",
          "410: #----------------------------------------------------------------------------------------",
          "411: #.FN_HDR Progress-UUIE",
          "412:   h225_packet_info* h225_pi;",
          "417:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "418:   if (h225_pi != NULL) {",
          "419:     h225_pi->cs_type = H225_PROGRESS;",
          "420:     if (contains_faststart == TRUE )",
          "421:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "422:     else",
          "423:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "424:   }",
          "425: #.END",
          "426: #----------------------------------------------------------------------------------------",
          "427: #.FN_HDR SetupAcknowledge-UUIE",
          "428:   h225_packet_info* h225_pi;",
          "433:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "434:   if (h225_pi != NULL) {",
          "435:     h225_pi->cs_type = H225_SETUP_ACK;",
          "436:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "437:   }",
          "438: #.END",
          "439: #----------------------------------------------------------------------------------------",
          "440: #.FN_HDR Facility-UUIE",
          "441:   h225_packet_info* h225_pi;",
          "446:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "447:   if (h225_pi != NULL) {",
          "448:     h225_pi->cs_type = H225_FACILITY;",
          "449:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "450:   }",
          "451: #.END",
          "452: #----------------------------------------------------------------------------------------",
          "453: #.FN_HDR H323-UU-PDU/h245Tunnelling",
          "454:   h225_packet_info* h225_pi;",
          "455:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "456:   if (h225_pi != NULL) {",
          "461: #.FN_FTR H323-UU-PDU/h245Tunnelling",
          "462:   }",
          "463: #.END",
          "464: #----------------------------------------------------------------------------------------",
          "466:   h225_packet_info* h225_pi;",
          "472:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "473:   if (h225_pi != NULL) {",
          "474:     h225_pi->cs_type = H225_SETUP;",
          "475:     if (contains_faststart == TRUE )",
          "476:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "477:     else",
          "478:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "479:   }",
          "480: #.END",
          "481: #----------------------------------------------------------------------------------------",
          "482: #.FN_HDR CallProceeding-UUIE",
          "483:   h225_packet_info* h225_pi;",
          "488:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "489:   if (h225_pi != NULL) {",
          "490:     h225_pi->cs_type = H225_CALL_PROCEDING;",
          "491:     if (contains_faststart == TRUE )",
          "492:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "493:     else",
          "494:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "495:   }",
          "496: #.END",
          "497: #----------------------------------------------------------------------------------------",
          "498: #.FN_HDR Alerting-UUIE",
          "499:   h225_packet_info* h225_pi;",
          "504:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "505:   if (h225_pi != NULL) {",
          "506:     h225_pi->cs_type = H225_ALERTING;",
          "507:     if (contains_faststart == TRUE )",
          "508:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "509:     else",
          "510:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "511:   }",
          "512: #.END",
          "513: #----------------------------------------------------------------------------------------",
          "514: #.FN_HDR ReleaseComplete-UUIE",
          "515:   h225_packet_info* h225_pi;",
          "520:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "521:   if (h225_pi != NULL) {",
          "522:     h225_pi->cs_type = H225_RELEASE_COMPLET;",
          "523:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "524:   }",
          "525: #.END",
          "526: #----------------------------------------------------------------------------------------",
          "527: #.FN_HDR Connect-UUIE",
          "528:   h225_packet_info* h225_pi;",
          "533:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "534:   if (h225_pi != NULL) {",
          "535:     h225_pi->cs_type = H225_CONNECT;",
          "536:     if (contains_faststart == TRUE )",
          "537:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "538:     else",
          "539:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "540:   }",
          "544:   h225_packet_info* h225_pi;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "448: #----------------------------------------------------------------------------------------",
          "449: #.FN_FTR H245TransportAddress",
          "455:   if ( !actx->pinfo->fd->flags.visited && h245_handle && ip_port!=0 ) {",
          "456:     address src_addr;",
          "457:     conversation_t *conv=NULL;",
          "",
          "[Removed Lines]",
          "451:   h225_pi->is_h245 = TRUE;",
          "452:   h225_pi->h245_address = ipv4_address;",
          "453:   h225_pi->h245_port = ip_port;",
          "",
          "[Added Lines]",
          "553:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "555:   if (h225_pi) {",
          "556:     h225_pi->is_h245 = TRUE;",
          "557:     h225_pi->h245_address = ipv4_address;",
          "558:     h225_pi->h245_port = ip_port;",
          "559:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "474: #----------------------------------------------------------------------------------------",
          "475: #.FN_BODY FacilityReason  VAL_PTR = &value",
          "476:   gint32 value;",
          "478: %(DEFAULT_BODY)s",
          "480: #.END",
          "481: #----------------------------------------------------------------------------------------",
          "482: #.FN_BODY GatekeeperRejectReason  VAL_PTR = &value",
          "483:   gint32 value;",
          "485: %(DEFAULT_BODY)s",
          "487: #.END",
          "488: #----------------------------------------------------------------------------------------",
          "489: #.FN_BODY UnregRequestReason  VAL_PTR = &value",
          "490:   gint32 value;",
          "492: %(DEFAULT_BODY)s",
          "494: #.END",
          "495: #----------------------------------------------------------------------------------------",
          "496: #.FN_BODY UnregRejectReason  VAL_PTR = &value",
          "497:   gint32 value;",
          "499: %(DEFAULT_BODY)s",
          "501: #.END",
          "502: #----------------------------------------------------------------------------------------",
          "503: #.FN_BODY BandRejectReason  VAL_PTR = &value",
          "504:   gint32 value;",
          "506: %(DEFAULT_BODY)s",
          "508: #.END",
          "509: #----------------------------------------------------------------------------------------",
          "510: #.FN_BODY DisengageReason  VAL_PTR = &value",
          "511:   gint32 value;",
          "513: %(DEFAULT_BODY)s",
          "515: #----------------------------------------------------------------------------------------",
          "516: #.FN_BODY DisengageRejectReason  VAL_PTR = &value",
          "517:   gint32 value;",
          "519: %(DEFAULT_BODY)s",
          "521: #.END",
          "522: #----------------------------------------------------------------------------------------",
          "523: #.FN_BODY AdmissionRejectReason  VAL_PTR = &value",
          "524:   gint32 value;",
          "526: %(DEFAULT_BODY)s",
          "528: #.END",
          "529: #----------------------------------------------------------------------------------------",
          "530: #.FN_BODY LocationRejectReason  VAL_PTR = &value",
          "531:   gint32 value;",
          "533: %(DEFAULT_BODY)s",
          "535: #.END",
          "536: #----------------------------------------------------------------------------------------",
          "537: #.FN_BODY RegistrationRejectReason  VAL_PTR = &value",
          "538:   gint32 value;",
          "540: %(DEFAULT_BODY)s",
          "542: #.END",
          "543: #----------------------------------------------------------------------------------------",
          "544: #.FN_BODY InfoRequestNakReason  VAL_PTR = &value",
          "545:   gint32 value;",
          "547: %(DEFAULT_BODY)s",
          "549: #.END",
          "550: #----------------------------------------------------------------------------------------",
          "551: #.FN_BODY ReleaseCompleteReason  VAL_PTR = &value",
          "552:   gint32 value;",
          "554: %(DEFAULT_BODY)s",
          "556: #.END",
          "557: #----------------------------------------------------------------------------------------",
          "558: #.FN_BODY CallIdentifier/guid",
          "",
          "[Removed Lines]",
          "479:   h225_pi->reason = value;",
          "486:   h225_pi->reason = value;",
          "493:   h225_pi->reason = value;",
          "500:   h225_pi->reason = value;",
          "507:   h225_pi->reason = value;",
          "514:   h225_pi->reason = value;",
          "520:   h225_pi->reason = value;",
          "527:   h225_pi->reason = value;",
          "534:   h225_pi->reason = value;",
          "541:   h225_pi->reason = value;",
          "548:   h225_pi->reason = value;",
          "555:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "582:   h225_packet_info* h225_pi;",
          "583:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "586:   if (h225_pi != NULL) {",
          "587:     h225_pi->reason = value;",
          "588:   }",
          "593:   h225_packet_info* h225_pi;",
          "594:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "597:   if (h225_pi != NULL) {",
          "598:     h225_pi->reason = value;",
          "599:   }",
          "604:   h225_packet_info* h225_pi;",
          "605:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "608:   if (h225_pi != NULL) {",
          "609:     h225_pi->reason = value;",
          "610:   }",
          "615:   h225_packet_info* h225_pi;",
          "616:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "619:   if (h225_pi != NULL) {",
          "620:     h225_pi->reason = value;",
          "621:   }",
          "626:   h225_packet_info* h225_pi;",
          "627:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "630:   if (h225_pi != NULL) {",
          "631:     h225_pi->reason = value;",
          "632:   }",
          "637:   h225_packet_info* h225_pi;",
          "638:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "641:   if (h225_pi != NULL) {",
          "642:     h225_pi->reason = value;",
          "643:   }",
          "647:   h225_packet_info* h225_pi;",
          "648:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "651:   if (h225_pi != NULL) {",
          "652:     h225_pi->reason = value;",
          "653:   }",
          "658:   h225_packet_info* h225_pi;",
          "659:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "662:   if (h225_pi != NULL) {",
          "663:     h225_pi->reason = value;",
          "664:   }",
          "669:   h225_packet_info* h225_pi;",
          "670:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "673:   if (h225_pi != NULL) {",
          "674:     h225_pi->reason = value;",
          "675:   }",
          "680:   h225_packet_info* h225_pi;",
          "681:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "684:   if (h225_pi != NULL) {",
          "685:     h225_pi->reason = value;",
          "686:   }",
          "691:   h225_packet_info* h225_pi;",
          "692:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "695:   if (h225_pi != NULL) {",
          "696:     h225_pi->reason = value;",
          "697:   }",
          "702:   h225_packet_info* h225_pi;",
          "703:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "706:   if (h225_pi != NULL) {",
          "707:     h225_pi->reason = value;",
          "708:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "567: #----------------------------------------------------------------------------------------",
          "568: #.FN_PARS GloballyUniqueID  VAL_PTR = (tvbuff_t **)%(ACTX)s->value_ptr",
          "569: #----------------------------------------------------------------------------------------",
          "570: #.FN_PARS RequestSeqNum  VAL_PTR = &(h225_pi->requestSeqNum)",
          "571: #----------------------------------------------------------------------------------------",
          "572: #.FN_BODY H323-UU-PDU/h4501SupplementaryService/_item  VAL_PTR = &h4501_tvb",
          "573:   tvbuff_t *h4501_tvb = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723: #.FN_HDR RequestSeqNum",
          "724:   h225_packet_info* h225_pi;",
          "725:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "726:   if (h225_pi != NULL) {",
          "727: #.END",
          "728: #----------------------------------------------------------------------------------------",
          "731: #.FN_FTR RequestSeqNum",
          "732:   }",
          "733: #.END",
          "734: #----------------------------------------------------------------------------------------",
          "",
          "---------------"
        ],
        "epan/dissectors/asn1/h225/packet-h225-template.c||epan/dissectors/asn1/h225/packet-h225-template.c": [
          "File: epan/dissectors/asn1/h225/packet-h225-template.c -> epan/dissectors/asn1/h225/packet-h225-template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <epan/packet.h>",
          "36: #include <epan/conversation.h>",
          "38: #include <epan/prefs.h>",
          "39: #include <epan/oids.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: #define TLS_PORT_CS   1300",
          "64: void proto_register_h225(void);",
          "66: static void h225_init_routine(void);",
          "67: static void ras_call_matching(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, h225_packet_info *pi);",
          "",
          "[Removed Lines]",
          "65: static void reset_h225_packet_info(h225_packet_info *pi);",
          "",
          "[Added Lines]",
          "66: static h225_packet_info* create_h225_packet_info(packet_info *pinfo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:   conversation_t *conversation;",
          "85: } h225ras_call_info_key;",
          "93: static GHashTable *ras_calls[7] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL};",
          "",
          "[Removed Lines]",
          "88: static int pi_current=0;",
          "89: static h225_packet_info *h225_pi=&pi_arr[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "367:   proto_item *it;",
          "368:   proto_tree *tr;",
          "369:   int offset = 0;",
          "379:   h225_pi->msg_type = H225_CS;",
          "381:   next_tvb_init(&h245_list);",
          "382:   next_tvb_init(&tp_list);",
          "",
          "[Removed Lines]",
          "371:   pi_current++;",
          "372:   if(pi_current==5){",
          "373:     pi_current=0;",
          "374:   }",
          "375:   h225_pi=&pi_arr[pi_current];",
          "378:   reset_h225_packet_info(h225_pi);",
          "",
          "[Added Lines]",
          "367:   h225_packet_info* h225_pi;",
          "370:   h225_pi = create_h225_packet_info(pinfo);",
          "372:   p_add_proto_data(wmem_packet_scope(), pinfo, proto_h225, 0, h225_pi);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "406:   proto_item *it;",
          "407:   proto_tree *tr;",
          "408:   guint32 offset=0;",
          "418:   h225_pi->msg_type = H225_RAS;",
          "420:   col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "",
          "[Removed Lines]",
          "410:   pi_current++;",
          "411:   if(pi_current==5){",
          "412:     pi_current=0;",
          "413:   }",
          "414:   h225_pi=&pi_arr[pi_current];",
          "417:   reset_h225_packet_info(h225_pi);",
          "",
          "[Added Lines]",
          "402:   h225_packet_info* h225_pi;",
          "405:   h225_pi = create_h225_packet_info(pinfo);",
          "407:   p_add_proto_data(wmem_packet_scope(), pinfo, proto_h225, 0, h225_pi);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "962:   ssl_dissector_add(saved_h225_tls_port, q931_tpkt_handle);",
          "963: }",
          "967: {",
          "972:   pi->msg_type = H225_OTHERS;",
          "973:   pi->cs_type = H225_OTHER;",
          "974:   pi->msg_tag = -1;",
          "975:   pi->reason = -1;",
          "988: }",
          "",
          "[Removed Lines]",
          "966: static void reset_h225_packet_info(h225_packet_info *pi)",
          "968:   if(pi == NULL) {",
          "969:     return;",
          "970:   }",
          "976:   pi->requestSeqNum = 0;",
          "977:   memset(&pi->guid,0,sizeof pi->guid);",
          "978:   pi->is_duplicate = FALSE;",
          "979:   pi->request_available = FALSE;",
          "980:   pi->is_faststart = FALSE;",
          "981:   pi->is_h245 = FALSE;",
          "982:   pi->is_h245Tunneling = FALSE;",
          "983:   pi->h245_address = 0;",
          "984:   pi->h245_port = 0;",
          "985:   pi->frame_label[0] = '\\0';",
          "986:   pi->dialedDigits[0] = '\\0';",
          "987:   pi->is_destinationInfo = FALSE;",
          "",
          "[Added Lines]",
          "954: static h225_packet_info* create_h225_packet_info(packet_info *pinfo)",
          "956:   h225_packet_info* pi = wmem_new0(pinfo->pool, h225_packet_info);",
          "963:   return pi;",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-h225.c||epan/dissectors/packet-h225.c": [
          "File: epan/dissectors/packet-h225.c -> epan/dissectors/packet-h225.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <epan/packet.h>",
          "44: #include <epan/conversation.h>",
          "46: #include <epan/prefs.h>",
          "47: #include <epan/oids.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #include <epan/proto_data.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: #define TLS_PORT_CS   1300",
          "72: void proto_register_h225(void);",
          "74: static void h225_init_routine(void);",
          "75: static void ras_call_matching(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, h225_packet_info *pi);",
          "",
          "[Removed Lines]",
          "73: static void reset_h225_packet_info(h225_packet_info *pi);",
          "",
          "[Added Lines]",
          "74: static h225_packet_info* create_h225_packet_info(packet_info *pinfo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   conversation_t *conversation;",
          "93: } h225ras_call_info_key;",
          "101: static GHashTable *ras_calls[7] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL};",
          "",
          "[Removed Lines]",
          "96: static int pi_current=0;",
          "97: static h225_packet_info *h225_pi=&pi_arr[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "917: static gint ett_h225 = -1;",
          "",
          "[Removed Lines]",
          "914: #line 131 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "[Added Lines]",
          "911: #line 128 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1159: static gint ett_h225_T_result = -1;",
          "1165: static guint h225_tls_port = TLS_PORT_CS;",
          "",
          "[Removed Lines]",
          "1162: #line 135 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "[Added Lines]",
          "1159: #line 132 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1301: static int",
          "1302: dissect_h225_T_h245Ip(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1304:   tvbuff_t *value_tvb;",
          "1306:   ipv4_address = 0;",
          "",
          "[Removed Lines]",
          "1303: #line 322 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1300: #line 339 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1461: static int",
          "1462: dissect_h225_T_h245Ip6(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1464:   tvbuff_t *value_tvb;",
          "1466:   ipv6_address = ipv6_address_zeros;",
          "",
          "[Removed Lines]",
          "1463: #line 331 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1460: #line 348 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1569: static int",
          "1570: dissect_h225_H221NonStandard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1572:   t35CountryCode = 0;",
          "1573:   t35Extension = 0;",
          "1574:   manufacturerCode = 0;",
          "",
          "[Removed Lines]",
          "1571: #line 627 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1568: #line 792 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1576:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "1577:                                    ett_h225_H221NonStandard, H221NonStandard_sequence);",
          "1580:   h221NonStandard = ((t35CountryCode * 256) + t35Extension) * 65536 + manufacturerCode;",
          "1581:   proto_tree_add_uint(tree, hf_h221Manufacturer, tvb, (offset>>3)-4, 4, h221NonStandard);",
          "",
          "[Removed Lines]",
          "1579: #line 631 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1576: #line 796 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1599: static int",
          "1600: dissect_h225_NonStandardIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1602:   gint32 value;",
          "1604:   nsiOID = \"\";",
          "",
          "[Removed Lines]",
          "1601: #line 608 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1598: #line 773 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1628: static int",
          "1629: dissect_h225_T_nsp_data(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1631:   tvbuff_t *next_tvb = NULL;",
          "1633:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1630: #line 642 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1627: #line 807 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1651: int",
          "1652: dissect_h225_NonStandardParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1654:   nsp_handle = NULL;",
          "1656:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "1653: #line 640 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1650: #line 805 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1685: static int",
          "1686: dissect_h225_H245TransportAddress(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1688:   ipv4_address=0;",
          "1689:   ipv6_address = ipv6_address_zeros;",
          "1690:   ip_port=0;",
          "",
          "[Removed Lines]",
          "1687: #line 443 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1684: #line 544 \"./asn1/h225/h225.cnf\"",
          "1685:   h225_packet_info* h225_pi;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1694:                                  ett_h225_H245TransportAddress, H245TransportAddress_choice,",
          "1695:                                  NULL);",
          "1703:   if ( !actx->pinfo->fd->flags.visited && h245_handle && ip_port!=0 ) {",
          "1704:     address src_addr;",
          "1705:     conversation_t *conv=NULL;",
          "",
          "[Removed Lines]",
          "1697: #line 450 \"./asn1/h225/h225.cnf\"",
          "1699:   h225_pi->is_h245 = TRUE;",
          "1700:   h225_pi->h245_address = ipv4_address;",
          "1701:   h225_pi->h245_port = ip_port;",
          "",
          "[Added Lines]",
          "1695: #line 552 \"./asn1/h225/h225.cnf\"",
          "1697:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "1699:   if (h225_pi) {",
          "1700:     h225_pi->is_h245 = TRUE;",
          "1701:     h225_pi->h245_address = ipv4_address;",
          "1702:     h225_pi->h245_port = ip_port;",
          "1703:   }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1727: static int",
          "1728: dissect_h225_DialedDigits(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "1730:   tvbuff_t *value_tvb = NULL;",
          "1731:   guint len = 0;",
          "1733:   offset = dissect_per_restricted_character_string(tvb, offset, actx, tree, hf_index,",
          "1734:                                                       1, 128, FALSE, \"0123456789#*,\", 13,",
          "1735:                                                       &value_tvb);",
          "1737:   if (h225_pi && h225_pi->is_destinationInfo == TRUE) {",
          "1738:     if (value_tvb) {",
          "1739:       len = tvb_reported_length(value_tvb);",
          "",
          "[Removed Lines]",
          "1729: #line 304 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "1730: #line 319 \"./asn1/h225/h225.cnf\"",
          "1733:   h225_packet_info* h225_pi;",
          "1739:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2044: static int",
          "2045: dissect_h225_TBCD_STRING(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2047:   int min_len, max_len;",
          "2048:   gboolean has_extension;",
          "",
          "[Removed Lines]",
          "2046: #line 737 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "2049: #line 902 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2843: int",
          "2844: dissect_h225_TunnelledProtocol(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "2846:   tpOID = \"\";",
          "2848:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "2849:                                    ett_h225_TunnelledProtocol, TunnelledProtocol_sequence);",
          "2852:   tp_handle = dissector_get_string_handle(tp_dissector_table, tpOID);",
          "2854:   return offset;",
          "",
          "[Removed Lines]",
          "2845: #line 585 \"./asn1/h225/h225.cnf\"",
          "2851: #line 587 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "2848: #line 750 \"./asn1/h225/h225.cnf\"",
          "2854: #line 752 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3027: static int",
          "3028: dissect_h225_T_guid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3030:   tvbuff_t *guid_tvb = NULL;",
          "3032:   actx->value_ptr = &guid_tvb;",
          "",
          "[Removed Lines]",
          "3029: #line 559 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3032: #line 712 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3241: static int",
          "3242: dissect_h225_FastStart_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3244:   tvbuff_t *value_tvb = NULL;",
          "3245:   char codec_str[50];",
          "3246:   codec_str[0] = '\\0';",
          "3248:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "3243: #line 268 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3246: #line 272 \"./asn1/h225/h225.cnf\"",
          "3249:   h225_packet_info* h225_pi;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3253:   }",
          "3258:   contains_faststart = TRUE;",
          "3262:   return offset;",
          "",
          "[Removed Lines]",
          "3256:   g_snprintf(h225_pi->frame_label, 50, \"%s %s\", h225_pi->frame_label, codec_str);",
          "3259:   h225_pi->is_faststart = TRUE;",
          "",
          "[Added Lines]",
          "3260:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "3261:   if (h225_pi != NULL) {",
          "3262:     g_snprintf(h225_pi->frame_label, 50, \"%s %s\", h225_pi->frame_label, codec_str);",
          "3263:     h225_pi->is_faststart = TRUE;",
          "3264:   }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3830: static int",
          "3831: dissect_h225_T_standard(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3833:   guint32 value_int = (guint32)-1;",
          "3834:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "3832: #line 699 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3838: #line 864 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3848: static int",
          "3849: dissect_h225_T_oid(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3851:   const gchar *oid_str = NULL;",
          "3852:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "3850: #line 708 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3856: #line 873 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3878: int",
          "3879: dissect_h225_GenericIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3881:   gef_ctx_t *gefx;",
          "3882:   proto_item* ti;",
          "",
          "[Removed Lines]",
          "3880: #line 685 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3886: #line 850 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3885:                                  ett_h225_GenericIdentifier, GenericIdentifier_choice,",
          "3886:                                  NULL);",
          "3889:   gef_ctx_update_key(gef_ctx_get(actx->private_data));",
          "3890:   gefx = gef_ctx_get(actx->private_data);",
          "3891:   if (gefx) {",
          "",
          "[Removed Lines]",
          "3888: #line 688 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3894: #line 853 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3903: static int",
          "3904: dissect_h225_T_raw(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "3906:   tvbuff_t *value_tvb;",
          "3907:   gef_ctx_t *gefx;",
          "3908:   proto_item* ti;",
          "",
          "[Removed Lines]",
          "3905: #line 718 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "3911: #line 883 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4021: static int",
          "4022: dissect_h225_EnumeratedParameter(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4024:   gef_ctx_t *parent_gefx;",
          "4026:   parent_gefx = gef_ctx_get(actx->private_data);",
          "",
          "[Removed Lines]",
          "4023: #line 667 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4029: #line 832 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4029:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4030:                                    ett_h225_EnumeratedParameter, EnumeratedParameter_sequence);",
          "4033:   actx->private_data = parent_gefx;",
          "4035:   return offset;",
          "",
          "[Removed Lines]",
          "4032: #line 672 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4038: #line 837 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4045: int",
          "4046: dissect_h225_GenericData(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4048:   void *priv_data = actx->private_data;",
          "4049:   gef_ctx_t *gefx;",
          "",
          "[Removed Lines]",
          "4047: #line 653 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4053: #line 818 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4058:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4059:                                    ett_h225_GenericData, GenericData_sequence);",
          "4062:   actx->private_data = priv_data;",
          "4064:   return offset;",
          "",
          "[Removed Lines]",
          "4061: #line 663 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4067: #line 828 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4098: static int",
          "4099: dissect_h225_FeatureDescriptor(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4101:   void *priv_data = actx->private_data;",
          "4102:   actx->private_data = gef_ctx_alloc(NULL, \"FeatureDescriptor\");",
          "4104:   offset = dissect_h225_GenericData(tvb, offset, actx, tree, hf_index);",
          "4107:   actx->private_data = priv_data;",
          "4109:   return offset;",
          "",
          "[Removed Lines]",
          "4100: #line 677 \"./asn1/h225/h225.cnf\"",
          "4106: #line 680 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4106: #line 842 \"./asn1/h225/h225.cnf\"",
          "4112: #line 845 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4127: static int",
          "4128: dissect_h225_ParallelH245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4130:   tvbuff_t *h245_tvb = NULL;",
          "4132:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4129: #line 344 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "4135: #line 361 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4277: static int",
          "4278: dissect_h225_Setup_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4280:   contains_faststart = FALSE;",
          "4282:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4283:                                    ett_h225_Setup_UUIE, Setup_UUIE_sequence);",
          "4293:   return offset;",
          "4294: }",
          "",
          "[Removed Lines]",
          "4279: #line 397 \"./asn1/h225/h225.cnf\"",
          "4285: #line 401 \"./asn1/h225/h225.cnf\"",
          "4287:   h225_pi->cs_type = H225_SETUP;",
          "4288:   if (contains_faststart == TRUE )",
          "4289:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4290:   else",
          "4291:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4285: #line 466 \"./asn1/h225/h225.cnf\"",
          "4286:   h225_packet_info* h225_pi;",
          "4292: #line 471 \"./asn1/h225/h225.cnf\"",
          "4294:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4295:   if (h225_pi != NULL) {",
          "4296:     h225_pi->cs_type = H225_SETUP;",
          "4297:     if (contains_faststart == TRUE )",
          "4298:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4299:     else",
          "4300:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4301:   }",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4330: static int",
          "4331: dissect_h225_CallProceeding_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4332:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4333:                                    ett_h225_CallProceeding_UUIE, CallProceeding_UUIE_sequence);",
          "4343:   return offset;",
          "4344: }",
          "",
          "[Removed Lines]",
          "4335: #line 410 \"./asn1/h225/h225.cnf\"",
          "4337:   h225_pi->cs_type = H225_CALL_PROCEDING;",
          "4338:   if (contains_faststart == TRUE )",
          "4339:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4340:   else",
          "4341:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4342: #line 483 \"./asn1/h225/h225.cnf\"",
          "4343:   h225_packet_info* h225_pi;",
          "4348: #line 487 \"./asn1/h225/h225.cnf\"",
          "4350:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4351:   if (h225_pi != NULL) {",
          "4352:     h225_pi->cs_type = H225_CALL_PROCEDING;",
          "4353:     if (contains_faststart == TRUE )",
          "4354:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4355:     else",
          "4356:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4357:   }",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4371: static int",
          "4372: dissect_h225_Connect_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4373:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4374:                                    ett_h225_Connect_UUIE, Connect_UUIE_sequence);",
          "4384:   return offset;",
          "4385: }",
          "",
          "[Removed Lines]",
          "4376: #line 434 \"./asn1/h225/h225.cnf\"",
          "4378:   h225_pi->cs_type = H225_CONNECT;",
          "4379:   if (contains_faststart == TRUE )",
          "4380:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4381:   else",
          "4382:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4389: #line 528 \"./asn1/h225/h225.cnf\"",
          "4390:   h225_packet_info* h225_pi;",
          "4395: #line 532 \"./asn1/h225/h225.cnf\"",
          "4397:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4398:   if (h225_pi != NULL) {",
          "4399:     h225_pi->cs_type = H225_CONNECT;",
          "4400:     if (contains_faststart == TRUE )",
          "4401:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4402:     else",
          "4403:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4404:   }",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4410: static int",
          "4411: dissect_h225_Alerting_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4412:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4413:                                    ett_h225_Alerting_UUIE, Alerting_UUIE_sequence);",
          "4423:   return offset;",
          "4424: }",
          "",
          "[Removed Lines]",
          "4415: #line 419 \"./asn1/h225/h225.cnf\"",
          "4417:   h225_pi->cs_type = H225_ALERTING;",
          "4418:   if (contains_faststart == TRUE )",
          "4419:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4420:   else",
          "4421:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4434: #line 499 \"./asn1/h225/h225.cnf\"",
          "4435:   h225_packet_info* h225_pi;",
          "4440: #line 503 \"./asn1/h225/h225.cnf\"",
          "4442:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4443:   if (h225_pi != NULL) {",
          "4444:     h225_pi->cs_type = H225_ALERTING;",
          "4445:     if (contains_faststart == TRUE )",
          "4446:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4447:     else",
          "4448:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4449:   }",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4438: static int",
          "4439: dissect_h225_Information_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4440:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4441:                                    ett_h225_Information_UUIE, Information_UUIE_sequence);",
          "4448:   return offset;",
          "4449: }",
          "",
          "[Removed Lines]",
          "4443: #line 368 \"./asn1/h225/h225.cnf\"",
          "4445:   h225_pi->cs_type = H225_INFORMATION;",
          "4446:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4468: #line 399 \"./asn1/h225/h225.cnf\"",
          "4469:   h225_packet_info* h225_pi;",
          "4474: #line 403 \"./asn1/h225/h225.cnf\"",
          "4476:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4477:   if (h225_pi != NULL) {",
          "4478:     h225_pi->cs_type = H225_INFORMATION;",
          "4479:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4480:   }",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4560: int",
          "4561: dissect_h225_ReleaseCompleteReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4563:   gint32 value;",
          "4565:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "4566:                                  ett_h225_ReleaseCompleteReason, ReleaseCompleteReason_choice,",
          "4567:                                  &value);",
          "4572:   return offset;",
          "",
          "[Removed Lines]",
          "4562: #line 552 \"./asn1/h225/h225.cnf\"",
          "4569:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "4596: #line 701 \"./asn1/h225/h225.cnf\"",
          "4598:   h225_packet_info* h225_pi;",
          "4599:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4605:   if (h225_pi != NULL) {",
          "4606:     h225_pi->reason = value;",
          "4607:   }",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4593: static int",
          "4594: dissect_h225_ReleaseComplete_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4595:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4596:                                    ett_h225_ReleaseComplete_UUIE, ReleaseComplete_UUIE_sequence);",
          "4603:   return offset;",
          "4604: }",
          "",
          "[Removed Lines]",
          "4598: #line 428 \"./asn1/h225/h225.cnf\"",
          "4600:   h225_pi->cs_type = H225_RELEASE_COMPLET;",
          "4601:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4633: #line 515 \"./asn1/h225/h225.cnf\"",
          "4634:   h225_packet_info* h225_pi;",
          "4639: #line 519 \"./asn1/h225/h225.cnf\"",
          "4641:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4642:   if (h225_pi != NULL) {",
          "4643:     h225_pi->cs_type = H225_RELEASE_COMPLET;",
          "4644:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4645:   }",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "4637: static int",
          "4638: dissect_h225_FacilityReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4640:   gint32 value;",
          "4642:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "4643:                                  ett_h225_FacilityReason, FacilityReason_choice,",
          "4644:                                  &value);",
          "4649:   return offset;",
          "",
          "[Removed Lines]",
          "4639: #line 476 \"./asn1/h225/h225.cnf\"",
          "4646:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "4683: #line 581 \"./asn1/h225/h225.cnf\"",
          "4685:   h225_packet_info* h225_pi;",
          "4686:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4692:   if (h225_pi != NULL) {",
          "4693:     h225_pi->reason = value;",
          "4694:   }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "4707: static int",
          "4708: dissect_h225_Facility_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4709:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4710:                                    ett_h225_Facility_UUIE, Facility_UUIE_sequence);",
          "4717:   return offset;",
          "4718: }",
          "",
          "[Removed Lines]",
          "4712: #line 389 \"./asn1/h225/h225.cnf\"",
          "4714:   h225_pi->cs_type = H225_FACILITY;",
          "4715:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4757: #line 441 \"./asn1/h225/h225.cnf\"",
          "4758:   h225_packet_info* h225_pi;",
          "4763: #line 445 \"./asn1/h225/h225.cnf\"",
          "4765:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4766:   if (h225_pi != NULL) {",
          "4767:     h225_pi->cs_type = H225_FACILITY;",
          "4768:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4769:   }",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "4736: static int",
          "4737: dissect_h225_Progress_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4738:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4739:                                    ett_h225_Progress_UUIE, Progress_UUIE_sequence);",
          "4749:   return offset;",
          "4750: }",
          "",
          "[Removed Lines]",
          "4741: #line 374 \"./asn1/h225/h225.cnf\"",
          "4743:   h225_pi->cs_type = H225_PROGRESS;",
          "4744:   if (contains_faststart == TRUE )",
          "4745:     g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4746:   else",
          "4747:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4792: #line 412 \"./asn1/h225/h225.cnf\"",
          "4793:   h225_packet_info* h225_pi;",
          "4798: #line 416 \"./asn1/h225/h225.cnf\"",
          "4800:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4801:   if (h225_pi != NULL) {",
          "4802:     h225_pi->cs_type = H225_PROGRESS;",
          "4803:     if (contains_faststart == TRUE )",
          "4804:       g_snprintf(h225_pi->frame_label, 50, \"%s OLC (%s)\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"), h225_pi->frame_label);",
          "4805:     else",
          "4806:       g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4807:   }",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4754: static int",
          "4755: dissect_h225_T_empty_flg(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4756:   offset = dissect_per_null(tvb, offset, actx, tree, hf_index);",
          "4761:   return offset;",
          "4762: }",
          "",
          "[Removed Lines]",
          "4758: #line 358 \"./asn1/h225/h225.cnf\"",
          "4759:   h225_pi->cs_type = H225_EMPTY;",
          "",
          "[Added Lines]",
          "4816: #line 375 \"./asn1/h225/h225.cnf\"",
          "4817:   h225_packet_info* h225_pi;",
          "4821: #line 379 \"./asn1/h225/h225.cnf\"",
          "4822:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4823:   if (h225_pi != NULL) {",
          "4824:     h225_pi->cs_type = H225_EMPTY;",
          "4825:   }",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "4773: static int",
          "4774: dissect_h225_Status_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4775:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4776:                                    ett_h225_Status_UUIE, Status_UUIE_sequence);",
          "4783:   return offset;",
          "4784: }",
          "",
          "[Removed Lines]",
          "4778: #line 362 \"./asn1/h225/h225.cnf\"",
          "4780:   h225_pi->cs_type = H225_STATUS;",
          "4781:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4841: #line 386 \"./asn1/h225/h225.cnf\"",
          "4842:   h225_packet_info* h225_pi;",
          "4847: #line 390 \"./asn1/h225/h225.cnf\"",
          "4849:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4850:   if (h225_pi != NULL) {",
          "4851:     h225_pi->cs_type = H225_STATUS;",
          "4852:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4853:   }",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "4812: static int",
          "4813: dissect_h225_SetupAcknowledge_UUIE(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4814:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "4815:                                    ett_h225_SetupAcknowledge_UUIE, SetupAcknowledge_UUIE_sequence);",
          "4822:   return offset;",
          "4823: }",
          "",
          "[Removed Lines]",
          "4817: #line 383 \"./asn1/h225/h225.cnf\"",
          "4819:   h225_pi->cs_type = H225_SETUP_ACK;",
          "4820:   g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "",
          "[Added Lines]",
          "4886: #line 428 \"./asn1/h225/h225.cnf\"",
          "4887:   h225_packet_info* h225_pi;",
          "4892: #line 432 \"./asn1/h225/h225.cnf\"",
          "4894:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4895:   if (h225_pi != NULL) {",
          "4896:     h225_pi->cs_type = H225_SETUP_ACK;",
          "4897:     g_snprintf(h225_pi->frame_label, 50, \"%s\", val_to_str(h225_pi->cs_type, T_h323_message_body_vals, \"<unknown>\"));",
          "4898:   }",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "4883: dissect_h225_T_h323_message_body(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4884: #line 241 \"./asn1/h225/h225.cnf\"",
          "4885:   gint32 message_body_val;",
          "4887:   contains_faststart = FALSE;",
          "4888:   call_id_guid = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4964:   h225_packet_info* h225_pi;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "4893:   col_append_fstr(actx->pinfo->cinfo, COL_INFO, \"CS: %s \",",
          "4894:     val_to_str(message_body_val, T_h323_message_body_vals, \"<unknown>\"));",
          "4903:   }",
          "4905:   if (contains_faststart == TRUE )",
          "",
          "[Removed Lines]",
          "4896:   if (h225_pi->msg_type == H225_CS) {",
          "4898:     h225_pi->msg_tag = message_body_val;",
          "4899:   }",
          "4901:   if (call_id_guid) {",
          "4902:     h225_pi->guid = *call_id_guid;",
          "",
          "[Added Lines]",
          "4975:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "4976:   if (h225_pi != NULL) {",
          "4977:     if (h225_pi->msg_type == H225_CS) {",
          "4979:       h225_pi->msg_tag = message_body_val;",
          "4980:     }",
          "4982:     if (call_id_guid) {",
          "4983:       h225_pi->guid = *call_id_guid;",
          "4984:     }",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "4919: static int",
          "4920: dissect_h225_T_h4501SupplementaryService_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4922:   tvbuff_t *h4501_tvb = NULL;",
          "4924:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4921: #line 573 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5003: #line 736 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "4950: static int",
          "4951: dissect_h225_T_h245Tunnelling(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4952:   offset = dissect_per_boolean(tvb, offset, actx, tree, hf_index, &(h225_pi->is_h245Tunneling));",
          "4954:   return offset;",
          "4955: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5034: #line 454 \"./asn1/h225/h225.cnf\"",
          "5035:   h225_packet_info* h225_pi;",
          "5036:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "5037:   if (h225_pi != NULL) {",
          "5041: #line 462 \"./asn1/h225/h225.cnf\"",
          "5042:   }",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "4959: static int",
          "4960: dissect_h225_H245Control_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "4962:   tvbuff_t *h245_tvb = NULL;",
          "4964:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "4961: #line 351 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5051: #line 368 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "5016: static int",
          "5017: dissect_h225_T_messageContent_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5019:   tvbuff_t *next_tvb = NULL;",
          "5021:   offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5018: #line 595 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5108: #line 760 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "5052: static int",
          "5053: dissect_h225_T_tunnelledSignallingMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5055:   tp_handle = NULL;",
          "5057:   offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "5054: #line 593 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "5144: #line 758 \"./asn1/h225/h225.cnf\"",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "5355: static int",
          "5356: dissect_h225_RequestSeqNum(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5357:   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,",
          "5358:                                                             1U, 65535U, &(h225_pi->requestSeqNum), FALSE);",
          "5360:   return offset;",
          "5361: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5447: #line 724 \"./asn1/h225/h225.cnf\"",
          "5448:   h225_packet_info* h225_pi;",
          "5449:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "5450:   if (h225_pi != NULL) {",
          "5455: #line 732 \"./asn1/h225/h225.cnf\"",
          "5456:   }",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "5900: static int",
          "5901: dissect_h225_GatekeeperRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "5903:   gint32 value;",
          "5905:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "5906:                                  ett_h225_GatekeeperRejectReason, GatekeeperRejectReason_choice,",
          "5907:                                  &value);",
          "5912:   return offset;",
          "",
          "[Removed Lines]",
          "5902: #line 483 \"./asn1/h225/h225.cnf\"",
          "5909:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "6000: #line 592 \"./asn1/h225/h225.cnf\"",
          "6002:   h225_packet_info* h225_pi;",
          "6003:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "6009:   if (h225_pi != NULL) {",
          "6010:     h225_pi->reason = value;",
          "6011:   }",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "6202: static int",
          "6203: dissect_h225_RegistrationRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6205:   gint32 value;",
          "6207:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6208:                                  ett_h225_RegistrationRejectReason, RegistrationRejectReason_choice,",
          "6209:                                  &value);",
          "6214:   return offset;",
          "",
          "[Removed Lines]",
          "6204: #line 538 \"./asn1/h225/h225.cnf\"",
          "6211:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "6306: #line 679 \"./asn1/h225/h225.cnf\"",
          "6308:   h225_packet_info* h225_pi;",
          "6309:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "6315:   if (h225_pi != NULL) {",
          "6316:     h225_pi->reason = value;",
          "6317:   }",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "6265: static int",
          "6266: dissect_h225_UnregRequestReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6268:   gint32 value;",
          "6270:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6271:                                  ett_h225_UnregRequestReason, UnregRequestReason_choice,",
          "6272:                                  &value);",
          "6277:   return offset;",
          "",
          "[Removed Lines]",
          "6267: #line 490 \"./asn1/h225/h225.cnf\"",
          "6274:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "6373: #line 603 \"./asn1/h225/h225.cnf\"",
          "6375:   h225_packet_info* h225_pi;",
          "6376:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "6382:   if (h225_pi != NULL) {",
          "6383:     h225_pi->reason = value;",
          "6384:   }",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "6350: static int",
          "6351: dissect_h225_UnregRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6353:   gint32 value;",
          "6355:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6356:                                  ett_h225_UnregRejectReason, UnregRejectReason_choice,",
          "6357:                                  &value);",
          "6362:   return offset;",
          "",
          "[Removed Lines]",
          "6352: #line 497 \"./asn1/h225/h225.cnf\"",
          "6359:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "6462: #line 614 \"./asn1/h225/h225.cnf\"",
          "6464:   h225_packet_info* h225_pi;",
          "6465:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "6471:   if (h225_pi != NULL) {",
          "6472:     h225_pi->reason = value;",
          "6473:   }",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "6410: static int",
          "6411: dissect_h225_DestinationInfo_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6416:   offset = dissect_h225_AliasAddress(tvb, offset, actx, tree, hf_index);",
          "",
          "[Removed Lines]",
          "6412: #line 299 \"./asn1/h225/h225.cnf\"",
          "6414:   h225_pi->is_destinationInfo = TRUE;",
          "",
          "[Added Lines]",
          "6526: #line 310 \"./asn1/h225/h225.cnf\"",
          "6527:   h225_packet_info* h225_pi;",
          "6529:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "6530:   if (h225_pi != NULL) {",
          "6531:     h225_pi->is_destinationInfo = TRUE;",
          "6532:   }",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "6618: static int",
          "6619: dissect_h225_AdmissionRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6621:   gint32 value;",
          "6623:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6624:                                  ett_h225_AdmissionRejectReason, AdmissionRejectReason_choice,",
          "6625:                                  &value);",
          "6630:   return offset;",
          "",
          "[Removed Lines]",
          "6620: #line 524 \"./asn1/h225/h225.cnf\"",
          "6627:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "6738: #line 657 \"./asn1/h225/h225.cnf\"",
          "6740:   h225_packet_info* h225_pi;",
          "6741:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "6747:   if (h225_pi != NULL) {",
          "6748:     h225_pi->reason = value;",
          "6749:   }",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "6750: static int",
          "6751: dissect_h225_BandRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6753:   gint32 value;",
          "6755:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6756:                                  ett_h225_BandRejectReason, BandRejectReason_choice,",
          "6757:                                  &value);",
          "6762:   return offset;",
          "",
          "[Removed Lines]",
          "6752: #line 504 \"./asn1/h225/h225.cnf\"",
          "6759:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "6874: #line 625 \"./asn1/h225/h225.cnf\"",
          "6876:   h225_packet_info* h225_pi;",
          "6877:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "6883:   if (h225_pi != NULL) {",
          "6884:     h225_pi->reason = value;",
          "6885:   }",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "6802: static int",
          "6803: dissect_h225_DisengageReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6805:   gint32 value;",
          "6807:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6808:                                  ett_h225_DisengageReason, DisengageReason_choice,",
          "6809:                                  &value);",
          "6814:   return offset;",
          "",
          "[Removed Lines]",
          "6804: #line 511 \"./asn1/h225/h225.cnf\"",
          "6811:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "6930: #line 636 \"./asn1/h225/h225.cnf\"",
          "6932:   h225_packet_info* h225_pi;",
          "6933:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "6939:   if (h225_pi != NULL) {",
          "6940:     h225_pi->reason = value;",
          "6941:   }",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "6889: static int",
          "6890: dissect_h225_DisengageRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "6892:   gint32 value;",
          "6894:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "6895:                                  ett_h225_DisengageRejectReason, DisengageRejectReason_choice,",
          "6896:                                  &value);",
          "6901:   return offset;",
          "",
          "[Removed Lines]",
          "6891: #line 517 \"./asn1/h225/h225.cnf\"",
          "6898:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "7021: #line 646 \"./asn1/h225/h225.cnf\"",
          "7023:   h225_packet_info* h225_pi;",
          "7024:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "7030:   if (h225_pi != NULL) {",
          "7031:     h225_pi->reason = value;",
          "7032:   }",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "7035: static int",
          "7036: dissect_h225_LocationRejectReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7038:   gint32 value;",
          "7040:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7041:                                  ett_h225_LocationRejectReason, LocationRejectReason_choice,",
          "7042:                                  &value);",
          "7047:   return offset;",
          "",
          "[Removed Lines]",
          "7037: #line 531 \"./asn1/h225/h225.cnf\"",
          "7044:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "7171: #line 668 \"./asn1/h225/h225.cnf\"",
          "7173:   h225_packet_info* h225_pi;",
          "7174:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "7180:   if (h225_pi != NULL) {",
          "7181:     h225_pi->reason = value;",
          "7182:   }",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "7406: static int",
          "7407: dissect_h225_InfoRequestNakReason(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7409:   gint32 value;",
          "7411:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "7412:                                  ett_h225_InfoRequestNakReason, InfoRequestNakReason_choice,",
          "7413:                                  &value);",
          "7418:   return offset;",
          "",
          "[Removed Lines]",
          "7408: #line 545 \"./asn1/h225/h225.cnf\"",
          "7415:   h225_pi->reason = value;",
          "",
          "[Added Lines]",
          "7546: #line 690 \"./asn1/h225/h225.cnf\"",
          "7548:   h225_packet_info* h225_pi;",
          "7549:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "7555:   if (h225_pi != NULL) {",
          "7556:     h225_pi->reason = value;",
          "7557:   }",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "7617: int",
          "7618: dissect_h225_RasMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
          "7620:     gint32 rasmessage_value;",
          "7622:   call_id_guid = NULL;",
          "7623:   offset = dissect_per_choice(tvb, offset, actx, tree, hf_index,",
          "",
          "[Removed Lines]",
          "7619: #line 285 \"./asn1/h225/h225.cnf\"",
          "",
          "[Added Lines]",
          "7761: #line 292 \"./asn1/h225/h225.cnf\"",
          "7763:     h225_packet_info* h225_pi;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "7627:   col_add_fstr(actx->pinfo->cinfo, COL_INFO, \"RAS: %s \",",
          "7628:     val_to_str(rasmessage_value, h225_RasMessage_vals, \"<unknown>\"));",
          "7633:   }",
          "",
          "[Removed Lines]",
          "7630:   h225_pi->msg_tag = rasmessage_value;",
          "7631:   if (call_id_guid) {",
          "7632:     h225_pi->guid = *call_id_guid;",
          "",
          "[Added Lines]",
          "7773:   h225_pi = (h225_packet_info*)p_get_proto_data(wmem_packet_scope(), actx->pinfo, proto_h225, 0);",
          "7774:   if (h225_pi != NULL) {",
          "7775:     h225_pi->msg_tag = rasmessage_value;",
          "7776:     if (call_id_guid) {",
          "7777:       h225_pi->guid = *call_id_guid;",
          "7778:     }",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "7671: void proto_reg_handoff_h225(void);",
          "",
          "[Removed Lines]",
          "7668: #line 251 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "[Added Lines]",
          "7814: #line 248 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "7785:   proto_item *it;",
          "7786:   proto_tree *tr;",
          "7787:   int offset = 0;",
          "7797:   h225_pi->msg_type = H225_CS;",
          "7799:   next_tvb_init(&h245_list);",
          "7800:   next_tvb_init(&tp_list);",
          "",
          "[Removed Lines]",
          "7789:   pi_current++;",
          "7790:   if(pi_current==5){",
          "7791:     pi_current=0;",
          "7792:   }",
          "7793:   h225_pi=&pi_arr[pi_current];",
          "7796:   reset_h225_packet_info(h225_pi);",
          "",
          "[Added Lines]",
          "7934:   h225_packet_info* h225_pi;",
          "7937:   h225_pi = create_h225_packet_info(pinfo);",
          "7939:   p_add_proto_data(wmem_packet_scope(), pinfo, proto_h225, 0, h225_pi);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "7824:   proto_item *it;",
          "7825:   proto_tree *tr;",
          "7826:   guint32 offset=0;",
          "7836:   h225_pi->msg_type = H225_RAS;",
          "7838:   col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);",
          "",
          "[Removed Lines]",
          "7828:   pi_current++;",
          "7829:   if(pi_current==5){",
          "7830:     pi_current=0;",
          "7831:   }",
          "7832:   h225_pi=&pi_arr[pi_current];",
          "7835:   reset_h225_packet_info(h225_pi);",
          "",
          "[Added Lines]",
          "7969:   h225_packet_info* h225_pi;",
          "7972:   h225_pi = create_h225_packet_info(pinfo);",
          "7974:   p_add_proto_data(wmem_packet_scope(), pinfo, proto_h225, 0, h225_pi);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "11355:         NULL, HFILL }},",
          "11359:   };",
          "",
          "[Removed Lines]",
          "11358: #line 852 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "[Added Lines]",
          "11496: #line 841 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "11605:     &ett_h225_T_result,",
          "11609:   };",
          "11611:   static tap_param h225_stat_params[] = {",
          "",
          "[Removed Lines]",
          "11608: #line 858 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "[Added Lines]",
          "11746: #line 847 \"./asn1/h225/packet-h225-template.c\"",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "11713:   ssl_dissector_add(saved_h225_tls_port, q931_tpkt_handle);",
          "11714: }",
          "11718: {",
          "11723:   pi->msg_type = H225_OTHERS;",
          "11724:   pi->cs_type = H225_OTHER;",
          "11725:   pi->msg_tag = -1;",
          "11726:   pi->reason = -1;",
          "11739: }",
          "",
          "[Removed Lines]",
          "11717: static void reset_h225_packet_info(h225_packet_info *pi)",
          "11719:   if(pi == NULL) {",
          "11720:     return;",
          "11721:   }",
          "11727:   pi->requestSeqNum = 0;",
          "11728:   memset(&pi->guid,0,sizeof pi->guid);",
          "11729:   pi->is_duplicate = FALSE;",
          "11730:   pi->request_available = FALSE;",
          "11731:   pi->is_faststart = FALSE;",
          "11732:   pi->is_h245 = FALSE;",
          "11733:   pi->is_h245Tunneling = FALSE;",
          "11734:   pi->h245_address = 0;",
          "11735:   pi->h245_port = 0;",
          "11736:   pi->frame_label[0] = '\\0';",
          "11737:   pi->dialedDigits[0] = '\\0';",
          "11738:   pi->is_destinationInfo = FALSE;",
          "",
          "[Added Lines]",
          "11854: static h225_packet_info* create_h225_packet_info(packet_info *pinfo)",
          "11856:   h225_packet_info* pi = wmem_new0(pinfo->pool, h225_packet_info);",
          "11863:   return pi;",
          "",
          "---------------"
        ]
      }
    }
  ]
}