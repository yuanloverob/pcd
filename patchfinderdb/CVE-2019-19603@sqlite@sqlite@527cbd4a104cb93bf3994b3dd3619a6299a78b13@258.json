{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3fc60429924d3141df71059c114352713b5548b2",
      "candidate_info": {
        "commit_hash": "3fc60429924d3141df71059c114352713b5548b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3fc60429924d3141df71059c114352713b5548b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "Improvements to VdbeCoverage macros.\n\nFossilOrigin-Name: 10ee9e337e5f8a846dc827f6deb07930a790ac9d290b62f73de59454e465d5a1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bb643bac535ac7d5fb4c13edb8782cd13540bbc7d2b2deb689f4ca8d1914f422",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197:         u32 x = pLevel->iLikeRepCntr;",
          "2198:         if( x>0 ){",
          "2199:           skipLikeAddr = sqlite3VdbeAddOp1(v, (x&1)?OP_IfNot:OP_If,(int)(x>>1));",
          "2200:         }",
          "2202: #endif",
          "2203:       }",
          "",
          "[Removed Lines]",
          "2201:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2200:           VdbeCoverageIf(v, (x&1)==1);",
          "2201:           VdbeCoverageIf(v, (x&1)==0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1310:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1311:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1312:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1313:   }else{",
          "1314:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1315:   }",
          "1321:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1322:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1323:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "",
          "[Removed Lines]",
          "1316:   VdbeCoverageIf(v, eCond==0);",
          "1317:   VdbeCoverageIf(v, eCond==1);",
          "1318:   VdbeCoverageIf(v, eCond==2);",
          "1319:   VdbeCoverageIf(v, eCond==3);",
          "1320:   VdbeCoverageIf(v, eCond==4);",
          "",
          "[Added Lines]",
          "1313:     VdbeCoverage(v);",
          "1314:     assert( eCond==3 || eCond==4 );",
          "1315:     VdbeCoverageIf(v, eCond==3);",
          "1316:     VdbeCoverageIf(v, eCond==4);",
          "1319:     VdbeCoverage(v);",
          "1320:     assert( eCond==0 || eCond==1 || eCond==2 );",
          "1321:     VdbeCoverageIf(v, eCond==0);",
          "1322:     VdbeCoverageIf(v, eCond==1);",
          "1323:     VdbeCoverageIf(v, eCond==2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   VdbeCoverage(v);",
          "1834:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1835:   sqlite3VdbeJumpHere(v, addrGe);",
          "1837:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1840:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1841:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1836:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1838:   VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1840:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1842:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1843:   testcase(op==OP_Ge); VdbeCoverageIf(v, op==OP_Ge);",
          "1844:   testcase(op==OP_Lt); VdbeCoverageIf(v, op==OP_Lt);",
          "1845:   testcase(op==OP_Le); VdbeCoverageIf(v, op==OP_Le);",
          "1846:   testcase(op==OP_Gt); VdbeCoverageIf(v, op==OP_Gt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2534:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2535:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2536:     VdbeCoverage(v);",
          "2537:     windowAggFinal(&s, 0);",
          "2538:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2539:     VdbeCoverageNeverTaken(v);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2545:     VdbeCoverageIf(v, op==OP_Ge);",
          "2546:     VdbeCoverageIf(v, op==OP_Le);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efb699fc7cbd00b5a41403e4cbc108860beb3949",
      "candidate_info": {
        "commit_hash": "efb699fc7cbd00b5a41403e4cbc108860beb3949",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efb699fc7cbd00b5a41403e4cbc108860beb3949",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Prevent the use of subroutines to implement the RHS of IN operators within CHECK constraints.\n\nFossilOrigin-Name: 6b24d3fb94e787d25e49501714780dfb0c0c99077102056aa68445f4808cdd57",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c44838adbe5dc482bc010e91a6dd7a0f777c989f443dd600740d2c783208e0d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2688:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "",
          "[Added Lines]",
          "2688:   if( !ExprHasProperty(pExpr, EP_VarSelect) && pParse->iSelfTab==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "093589de5e339d6ad39e06b79eb9305fa2112127",
      "candidate_info": {
        "commit_hash": "093589de5e339d6ad39e06b79eb9305fa2112127",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/093589de5e339d6ad39e06b79eb9305fa2112127",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h"
        ],
        "message": "Fix a faulty assert() statement in the sqlite3VdbeMemExpandBlob() routine.\n\nFossilOrigin-Name: 69a26eade2f92029e722a5a654214b1e2a3fc7ed497ce9aa5a7dce944f90e502",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cde82c86b963fa75192907d548febd3882c7d8fc7daf1903fadd5ca46623be1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: #define MemNullNochng(X) \\",
          "",
          "[Removed Lines]",
          "289:   ((X)->flags==(MEM_Null|MEM_Zero) && (X)->n==0 && (X)->u.nZero==0)",
          "",
          "[Added Lines]",
          "289:   (((X)->flags&MEM_TypeMask)==(MEM_Null|MEM_Zero) \\",
          "290:     && (X)->n==0 && (X)->u.nZero==0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ea557e0e7d289b28c05c1797f900ee224fc9471",
      "candidate_info": {
        "commit_hash": "3ea557e0e7d289b28c05c1797f900ee224fc9471",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3ea557e0e7d289b28c05c1797f900ee224fc9471",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Changes to the --hexdb decoder option in the shell (and also in the TCL test code) so that it works on systems where sscanf() does not recognize \"%hhx\" as wanting to delivery results into a character-size variable.\n\nFossilOrigin-Name: 4258e42d92b0113ba59f407197fc24f21734900e5b02952deed07818be3e3e5d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69bad9257f8db6a2a761bdd298d972eb48d4f845ec11dedc802ba3bafb979915",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3858:   int j, k;",
          "3859:   int rc;",
          "3860:   FILE *in;",
          "3862:   char zLine[1000];",
          "3863:   if( p->zDbFilename ){",
          "3864:     in = fopen(p->zDbFilename, \"r\");",
          "",
          "[Removed Lines]",
          "3861:   unsigned char x[16];",
          "",
          "[Added Lines]",
          "3861:   unsigned int x[16];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3896:     if( strncmp(zLine, \"| end \", 6)==0 ){",
          "3897:       break;",
          "3898:     }",
          "3901:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "3902:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "3903:     if( rc==17 ){",
          "3904:       k = iOffset+j;",
          "3905:       if( k+16<=n ){",
          "3907:       }",
          "3908:     }",
          "3909:   }",
          "",
          "[Removed Lines]",
          "3899:     rc = sscanf(zLine,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "3900:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "3906:         memcpy(a+k, x, 16);",
          "",
          "[Added Lines]",
          "3899:     rc = sscanf(zLine,\"| %d: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\",",
          "3905:         int ii;",
          "3906:         for(ii=0; ii<16; ii++) a[k+ii] = x[ii]&0xff;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7699:   int iOffset = 0;",
          "7700:   int j, k;",
          "7701:   int rc;",
          "7703:   if( objc!=2 ){",
          "7704:     Tcl_WrongNumArgs(interp, 1, objv, \"HEXDB\");",
          "7705:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "7702:   unsigned char x[16];",
          "",
          "[Added Lines]",
          "7702:   unsigned int x[16];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7731:       iOffset = k;",
          "7732:       continue;",
          "7733:     }",
          "7736:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "7737:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "7738:     if( rc==17 ){",
          "7739:       k = iOffset+j;",
          "7740:       if( k+16<=n ){",
          "7742:       }",
          "7743:       continue;",
          "7744:     }",
          "",
          "[Removed Lines]",
          "7734:     rc = sscanf(zIn+i,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "7735:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "7741:         memcpy(a+k, x, 16);",
          "",
          "[Added Lines]",
          "7734:     rc = sscanf(zIn+i,\"| %d: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\",",
          "7740:         int ii;",
          "7741:         for(ii=0; ii<16; ii++) a[k+ii] = x[ii]&0xff;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a7e9a25b64489a9d7e8f1d84f0e50cbbb4a7735",
      "candidate_info": {
        "commit_hash": "4a7e9a25b64489a9d7e8f1d84f0e50cbbb4a7735",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4a7e9a25b64489a9d7e8f1d84f0e50cbbb4a7735",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/ossfuzz.c"
        ],
        "message": "Set a low limit on the length of strings and blobs in the OSSFuzz module, in an effort to avoid timeouts when the fuzzer does things like \"randomblob(1e12)\".\n\nFossilOrigin-Name: 119d1609fa415894fdd0aa19440ca1c658bd01910838a4cfadbe0e304b033bfd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/ossfuzz.c||test/ossfuzz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c886f3d49c9569e9f6ee28b89b57e2d4004c8972d11da0c23f7b2d2e0c9900a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/ossfuzz.c||test/ossfuzz.c": [
          "File: test/ossfuzz.c -> test/ossfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   sqlite3_limit(cx.db, SQLITE_LIMIT_VDBE_OP, 25000);",
          "159:   sqlite3_db_config(cx.db, SQLITE_DBCONFIG_ENABLE_FKEY, uSelector&1, &rc);",
          "160:   uSelector >>= 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   sqlite3_limit(cx.db, SQLITE_LIMIT_LENGTH, 50000);",
          "",
          "---------------"
        ]
      }
    }
  ]
}