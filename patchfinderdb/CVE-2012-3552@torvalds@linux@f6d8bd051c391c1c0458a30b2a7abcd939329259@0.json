{
  "cve_id": "CVE-2012-3552",
  "cve_desc": "Race condition in the IP implementation in the Linux kernel before 3.0 might allow remote attackers to cause a denial of service (slab corruption and system crash) by sending packets to an application that sets socket options during the handling of network traffic.",
  "repo": "torvalds/linux",
  "patch_hash": "f6d8bd051c391c1c0458a30b2a7abcd939329259",
  "patch_info": {
    "commit_hash": "f6d8bd051c391c1c0458a30b2a7abcd939329259",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f6d8bd051c391c1c0458a30b2a7abcd939329259",
    "files": [
      "include/net/inet_sock.h",
      "include/net/ip.h",
      "net/dccp/ipv4.c",
      "net/dccp/ipv6.c",
      "net/ipv4/af_inet.c",
      "net/ipv4/cipso_ipv4.c",
      "net/ipv4/icmp.c",
      "net/ipv4/inet_connection_sock.c",
      "net/ipv4/ip_options.c",
      "net/ipv4/ip_output.c",
      "net/ipv4/ip_sockglue.c",
      "net/ipv4/raw.c",
      "net/ipv4/syncookies.c",
      "net/ipv4/tcp_ipv4.c",
      "net/ipv4/udp.c",
      "net/ipv6/tcp_ipv6.c",
      "net/l2tp/l2tp_ip.c"
    ],
    "message": "inet: add RCU protection to inet->opt\n\nWe lack proper synchronization to manipulate inet->opt ip_options\n\nProblem is ip_make_skb() calls ip_setup_cork() and\nip_setup_cork() possibly makes a copy of ipc->opt (struct ip_options),\nwithout any protection against another thread manipulating inet->opt.\n\nAnother thread can change inet->opt pointer and free old one under us.\n\nUse RCU to protect inet->opt (changed to inet->inet_opt).\n\nInstead of handling atomic refcounts, just copy ip_options when\nnecessary, to avoid cache line dirtying.\n\nWe cant insert an rcu_head in struct ip_options since its included in\nskb->cb[], so this patch is large because I had to introduce a new\nip_options_rcu structure.\n\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Herbert Xu <herbert@gondor.apana.org.au>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/net/inet_sock.h||include/net/inet_sock.h",
      "include/net/ip.h||include/net/ip.h",
      "net/dccp/ipv4.c||net/dccp/ipv4.c",
      "net/dccp/ipv6.c||net/dccp/ipv6.c",
      "net/ipv4/af_inet.c||net/ipv4/af_inet.c",
      "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c",
      "net/ipv4/icmp.c||net/ipv4/icmp.c",
      "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c",
      "net/ipv4/ip_options.c||net/ipv4/ip_options.c",
      "net/ipv4/ip_output.c||net/ipv4/ip_output.c",
      "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c",
      "net/ipv4/raw.c||net/ipv4/raw.c",
      "net/ipv4/syncookies.c||net/ipv4/syncookies.c",
      "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c",
      "net/ipv4/udp.c||net/ipv4/udp.c",
      "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
      "net/l2tp/l2tp_ip.c||net/l2tp/l2tp_ip.c"
    ]
  },
  "patch_diff": {
    "include/net/inet_sock.h||include/net/inet_sock.h": [
      "File: include/net/inet_sock.h -> include/net/inet_sock.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:  unsigned char __data[0];",
      "58: };",
      "62: struct inet_request_sock {",
      "63:  struct request_sock req;",
      "",
      "[Removed Lines]",
      "60: #define optlength(opt) (sizeof(struct ip_options) + opt->optlen)",
      "",
      "[Added Lines]",
      "60: struct ip_options_rcu {",
      "61:  struct rcu_head rcu;",
      "62:  struct ip_options opt;",
      "63: };",
      "65: struct ip_options_data {",
      "66:  struct ip_options_rcu opt;",
      "67:  char   data[40];",
      "68: };",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:     acked    : 1,",
      "79:     no_srccheck: 1;",
      "80:  kmemcheck_bitfield_end(flags);",
      "82: };",
      "84: static inline struct inet_request_sock *inet_rsk(const struct request_sock *sk)",
      "",
      "[Removed Lines]",
      "81:  struct ip_options *opt;",
      "",
      "[Added Lines]",
      "89:  struct ip_options_rcu *opt;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "140:  __be16   inet_sport;",
      "141:  __u16   inet_id;",
      "144:  __u8   tos;",
      "145:  __u8   min_ttl;",
      "146:  __u8   mc_ttl;",
      "",
      "[Removed Lines]",
      "143:  struct ip_options *opt;",
      "",
      "[Added Lines]",
      "151:  struct ip_options_rcu __rcu *inet_opt;",
      "",
      "---------------"
    ],
    "include/net/ip.h||include/net/ip.h": [
      "File: include/net/ip.h -> include/net/ip.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: struct ipcm_cookie {",
      "53:  __be32   addr;",
      "54:  int   oif;",
      "56:  __u8   tx_flags;",
      "57: };",
      "",
      "[Removed Lines]",
      "55:  struct ip_options *opt;",
      "",
      "[Added Lines]",
      "55:  struct ip_options_rcu *opt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "93: extern int  ip_build_and_send_pkt(struct sk_buff *skb, struct sock *sk,",
      "94:            __be32 saddr, __be32 daddr,",
      "96: extern int  ip_rcv(struct sk_buff *skb, struct net_device *dev,",
      "97:           struct packet_type *pt, struct net_device *orig_dev);",
      "98: extern int  ip_local_deliver(struct sk_buff *skb);",
      "",
      "[Removed Lines]",
      "95:            struct ip_options *opt);",
      "",
      "[Added Lines]",
      "95:            struct ip_options_rcu *opt);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "420: extern int ip_options_echo(struct ip_options *dopt, struct sk_buff *skb);",
      "421: extern void ip_options_fragment(struct sk_buff *skb);",
      "422: extern int ip_options_compile(struct net *net,",
      "423:          struct ip_options *opt, struct sk_buff *skb);",
      "425:      unsigned char *data, int optlen);",
      "427:         unsigned char __user *data, int optlen);",
      "428: extern void ip_options_undo(struct ip_options * opt);",
      "429: extern void ip_forward_options(struct sk_buff *skb);",
      "",
      "[Removed Lines]",
      "419: extern void ip_options_build(struct sk_buff *skb, struct ip_options *opt, __be32 daddr, struct rtable *rt, int is_frag);",
      "424: extern int ip_options_get(struct net *net, struct ip_options **optp,",
      "426: extern int ip_options_get_from_user(struct net *net, struct ip_options **optp,",
      "",
      "[Added Lines]",
      "419: extern void ip_options_build(struct sk_buff *skb, struct ip_options *opt,",
      "420:         __be32 daddr, struct rtable *rt, int is_frag);",
      "425: extern int ip_options_get(struct net *net, struct ip_options_rcu **optp,",
      "427: extern int ip_options_get_from_user(struct net *net, struct ip_options_rcu **optp,",
      "",
      "---------------"
    ],
    "net/dccp/ipv4.c||net/dccp/ipv4.c": [
      "File: net/dccp/ipv4.c -> net/dccp/ipv4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "48:  struct flowi4 fl4;",
      "49:  struct rtable *rt;",
      "50:  int err;",
      "52:  dp->dccps_role = DCCP_ROLE_CLIENT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:   return -EAFNOSUPPORT;",
      "60:  nexthop = daddr = usin->sin_addr.s_addr;",
      "62:   if (daddr == 0)",
      "63:    return -EINVAL;",
      "65:  }",
      "67:  orig_sport = inet->inet_sport;",
      "",
      "[Removed Lines]",
      "61:  if (inet->opt != NULL && inet->opt->srr) {",
      "64:   nexthop = inet->opt->faddr;",
      "",
      "[Added Lines]",
      "63:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "64:           sock_owned_by_user(sk));",
      "65:  if (inet_opt != NULL && inet_opt->opt.srr) {",
      "68:   nexthop = inet_opt->opt.faddr;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "78:   return -ENETUNREACH;",
      "79:  }",
      "82:   daddr = rt->rt_dst;",
      "84:  if (inet->inet_saddr == 0)",
      "",
      "[Removed Lines]",
      "81:  if (inet->opt == NULL || !inet->opt->srr)",
      "",
      "[Added Lines]",
      "85:  if (inet_opt == NULL || !inet_opt->opt.srr)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "89:  inet->inet_daddr = daddr;",
      "91:  inet_csk(sk)->icsk_ext_hdr_len = 0;",
      "",
      "[Removed Lines]",
      "92:  if (inet->opt != NULL)",
      "93:   inet_csk(sk)->icsk_ext_hdr_len = inet->opt->optlen;",
      "",
      "[Added Lines]",
      "96:  if (inet_opt)",
      "97:   inet_csk(sk)->icsk_ext_hdr_len = inet_opt->opt.optlen;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "405:  newinet->inet_daddr = ireq->rmt_addr;",
      "406:  newinet->inet_rcv_saddr = ireq->loc_addr;",
      "407:  newinet->inet_saddr = ireq->loc_addr;",
      "409:  ireq->opt    = NULL;",
      "410:  newinet->mc_index  = inet_iif(skb);",
      "411:  newinet->mc_ttl    = ip_hdr(skb)->ttl;",
      "",
      "[Removed Lines]",
      "408:  newinet->opt    = ireq->opt;",
      "",
      "[Added Lines]",
      "412:  newinet->inet_opt = ireq->opt;",
      "",
      "---------------"
    ],
    "net/dccp/ipv6.c||net/dccp/ipv6.c": [
      "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "574:     First: no IPv4 options.",
      "579:  newnp->rxopt.all = np->rxopt.all;",
      "",
      "[Removed Lines]",
      "576:  newinet->opt = NULL;",
      "",
      "[Added Lines]",
      "576:  newinet->inet_opt = NULL;",
      "",
      "---------------"
    ],
    "net/ipv4/af_inet.c||net/ipv4/af_inet.c": [
      "File: net/ipv4/af_inet.c -> net/ipv4/af_inet.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "153:  WARN_ON(sk->sk_wmem_queued);",
      "154:  WARN_ON(sk->sk_forward_alloc);",
      "157:  dst_release(rcu_dereference_check(sk->sk_dst_cache, 1));",
      "158:  sk_refcnt_debug_dec(sk);",
      "159: }",
      "",
      "[Removed Lines]",
      "156:  kfree(inet->opt);",
      "",
      "[Added Lines]",
      "156:  kfree(rcu_dereference_protected(inet->inet_opt, 1));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1106:  struct flowi4 fl4;",
      "1107:  struct rtable *rt;",
      "1108:  __be32 new_saddr;",
      "1114:  rt = ip_route_connect(&fl4, daddr, 0, RT_CONN_FLAGS(sk),",
      "",
      "[Removed Lines]",
      "1110:  if (inet->opt && inet->opt->srr)",
      "1111:   daddr = inet->opt->faddr;",
      "",
      "[Added Lines]",
      "1109:  struct ip_options_rcu *inet_opt;",
      "1111:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "1112:           sock_owned_by_user(sk));",
      "1113:  if (inet_opt && inet_opt->opt.srr)",
      "1114:   daddr = inet_opt->opt.faddr;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1148:  struct inet_sock *inet = inet_sk(sk);",
      "1149:  struct rtable *rt = (struct rtable *)__sk_dst_check(sk, 0);",
      "1150:  __be32 daddr;",
      "1151:  int err;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1154:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1155:   return 0;",
      "1158:  daddr = inet->inet_daddr;",
      "1161:  rt = ip_route_output_ports(sock_net(sk), sk, daddr, inet->inet_saddr,",
      "1162:        inet->inet_dport, inet->inet_sport,",
      "1163:        sk->sk_protocol, RT_CONN_FLAGS(sk),",
      "",
      "[Removed Lines]",
      "1159:  if (inet->opt && inet->opt->srr)",
      "1160:   daddr = inet->opt->faddr;",
      "",
      "[Added Lines]",
      "1162:  rcu_read_lock();",
      "1163:  inet_opt = rcu_dereference(inet->inet_opt);",
      "1165:  if (inet_opt && inet_opt->opt.srr)",
      "1166:   daddr = inet_opt->opt.faddr;",
      "1167:  rcu_read_unlock();",
      "",
      "---------------"
    ],
    "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c": [
      "File: net/ipv4/cipso_ipv4.c -> net/ipv4/cipso_ipv4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1857:  return CIPSO_V4_HDR_LEN + ret_val;",
      "1858: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1860: static void opt_kfree_rcu(struct rcu_head *head)",
      "1861: {",
      "1862:  kfree(container_of(head, struct ip_options_rcu, rcu));",
      "1863: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1879:  unsigned char *buf = NULL;",
      "1880:  u32 buf_len;",
      "1881:  u32 opt_len;",
      "1883:  struct inet_sock *sk_inet;",
      "1884:  struct inet_connection_sock *sk_conn;",
      "",
      "[Removed Lines]",
      "1882:  struct ip_options *opt = NULL;",
      "",
      "[Added Lines]",
      "1887:  struct ip_options_rcu *old, *opt = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1915:   ret_val = -ENOMEM;",
      "1916:   goto socket_setattr_failure;",
      "1917:  }",
      "1921:  kfree(buf);",
      "1922:  buf = NULL;",
      "1924:  sk_inet = inet_sk(sk);",
      "1925:  if (sk_inet->is_icsk) {",
      "1926:   sk_conn = inet_csk(sk);",
      "1930:   sk_conn->icsk_sync_mss(sk, sk_conn->icsk_pmtu_cookie);",
      "1931:  }",
      "1935:  return 0;",
      "",
      "[Removed Lines]",
      "1918:  memcpy(opt->__data, buf, buf_len);",
      "1919:  opt->optlen = opt_len;",
      "1920:  opt->cipso = sizeof(struct iphdr);",
      "1927:   if (sk_inet->opt)",
      "1928:    sk_conn->icsk_ext_hdr_len -= sk_inet->opt->optlen;",
      "1929:   sk_conn->icsk_ext_hdr_len += opt->optlen;",
      "1932:  opt = xchg(&sk_inet->opt, opt);",
      "1933:  kfree(opt);",
      "",
      "[Added Lines]",
      "1923:  memcpy(opt->opt.__data, buf, buf_len);",
      "1924:  opt->opt.optlen = opt_len;",
      "1925:  opt->opt.cipso = sizeof(struct iphdr);",
      "1931:  old = rcu_dereference_protected(sk_inet->inet_opt, sock_owned_by_user(sk));",
      "1934:   if (old)",
      "1935:    sk_conn->icsk_ext_hdr_len -= old->opt.optlen;",
      "1936:   sk_conn->icsk_ext_hdr_len += opt->opt.optlen;",
      "1939:  rcu_assign_pointer(sk_inet->inet_opt, opt);",
      "1940:  if (old)",
      "1941:   call_rcu(&old->rcu, opt_kfree_rcu);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1960:  unsigned char *buf = NULL;",
      "1961:  u32 buf_len;",
      "1962:  u32 opt_len;",
      "1964:  struct inet_request_sock *req_inet;",
      "",
      "[Removed Lines]",
      "1963:  struct ip_options *opt = NULL;",
      "",
      "[Added Lines]",
      "1971:  struct ip_options_rcu *opt = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1988:   ret_val = -ENOMEM;",
      "1989:   goto req_setattr_failure;",
      "1990:  }",
      "1994:  kfree(buf);",
      "1995:  buf = NULL;",
      "1997:  req_inet = inet_rsk(req);",
      "1998:  opt = xchg(&req_inet->opt, opt);",
      "2001:  return 0;",
      "",
      "[Removed Lines]",
      "1991:  memcpy(opt->__data, buf, buf_len);",
      "1992:  opt->optlen = opt_len;",
      "1993:  opt->cipso = sizeof(struct iphdr);",
      "1999:  kfree(opt);",
      "",
      "[Added Lines]",
      "1999:  memcpy(opt->opt.__data, buf, buf_len);",
      "2000:  opt->opt.optlen = opt_len;",
      "2001:  opt->opt.cipso = sizeof(struct iphdr);",
      "2007:  if (opt)",
      "2008:   call_rcu(&opt->rcu, opt_kfree_rcu);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2020: {",
      "2021:  int hdr_delta = 0;",
      "2025:   u8 cipso_len;",
      "2026:   u8 cipso_off;",
      "2027:   unsigned char *cipso_ptr;",
      "2028:   int iter;",
      "2029:   int optlen_new;",
      "2033:   cipso_len = cipso_ptr[1];",
      "2045:   memmove(cipso_ptr, cipso_ptr + cipso_len,",
      "",
      "[Removed Lines]",
      "2019: static int cipso_v4_delopt(struct ip_options **opt_ptr)",
      "2022:  struct ip_options *opt = *opt_ptr;",
      "2024:  if (opt->srr || opt->rr || opt->ts || opt->router_alert) {",
      "2031:   cipso_off = opt->cipso - sizeof(struct iphdr);",
      "2032:   cipso_ptr = &opt->__data[cipso_off];",
      "2035:   if (opt->srr > opt->cipso)",
      "2036:    opt->srr -= cipso_len;",
      "2037:   if (opt->rr > opt->cipso)",
      "2038:    opt->rr -= cipso_len;",
      "2039:   if (opt->ts > opt->cipso)",
      "2040:    opt->ts -= cipso_len;",
      "2041:   if (opt->router_alert > opt->cipso)",
      "2042:    opt->router_alert -= cipso_len;",
      "2043:   opt->cipso = 0;",
      "2046:    opt->optlen - cipso_off - cipso_len);",
      "",
      "[Added Lines]",
      "2028: static int cipso_v4_delopt(struct ip_options_rcu **opt_ptr)",
      "2031:  struct ip_options_rcu *opt = *opt_ptr;",
      "2033:  if (opt->opt.srr || opt->opt.rr || opt->opt.ts || opt->opt.router_alert) {",
      "2040:   cipso_off = opt->opt.cipso - sizeof(struct iphdr);",
      "2041:   cipso_ptr = &opt->opt.__data[cipso_off];",
      "2044:   if (opt->opt.srr > opt->opt.cipso)",
      "2045:    opt->opt.srr -= cipso_len;",
      "2046:   if (opt->opt.rr > opt->opt.cipso)",
      "2047:    opt->opt.rr -= cipso_len;",
      "2048:   if (opt->opt.ts > opt->opt.cipso)",
      "2049:    opt->opt.ts -= cipso_len;",
      "2050:   if (opt->opt.router_alert > opt->opt.cipso)",
      "2051:    opt->opt.router_alert -= cipso_len;",
      "2052:   opt->opt.cipso = 0;",
      "2055:    opt->opt.optlen - cipso_off - cipso_len);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2053:   iter = 0;",
      "2054:   optlen_new = 0;",
      "2058:     optlen_new = iter;",
      "2059:    } else",
      "2060:     iter++;",
      "2064:  } else {",
      "2070:  }",
      "2072:  return hdr_delta;",
      "",
      "[Removed Lines]",
      "2055:   while (iter < opt->optlen)",
      "2056:    if (opt->__data[iter] != IPOPT_NOP) {",
      "2057:     iter += opt->__data[iter + 1];",
      "2061:   hdr_delta = opt->optlen;",
      "2062:   opt->optlen = (optlen_new + 3) & ~3;",
      "2063:   hdr_delta -= opt->optlen;",
      "2068:   hdr_delta = opt->optlen;",
      "2069:   kfree(opt);",
      "",
      "[Added Lines]",
      "2064:   while (iter < opt->opt.optlen)",
      "2065:    if (opt->opt.__data[iter] != IPOPT_NOP) {",
      "2066:     iter += opt->opt.__data[iter + 1];",
      "2070:   hdr_delta = opt->opt.optlen;",
      "2071:   opt->opt.optlen = (optlen_new + 3) & ~3;",
      "2072:   hdr_delta -= opt->opt.optlen;",
      "2077:   hdr_delta = opt->opt.optlen;",
      "2078:   call_rcu(&opt->rcu, opt_kfree_rcu);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2083: void cipso_v4_sock_delattr(struct sock *sk)",
      "2084: {",
      "2085:  int hdr_delta;",
      "2087:  struct inet_sock *sk_inet;",
      "2089:  sk_inet = inet_sk(sk);",
      "2092:   return;",
      "2095:  if (sk_inet->is_icsk && hdr_delta > 0) {",
      "2096:   struct inet_connection_sock *sk_conn = inet_csk(sk);",
      "2097:   sk_conn->icsk_ext_hdr_len -= hdr_delta;",
      "",
      "[Removed Lines]",
      "2086:  struct ip_options *opt;",
      "2090:  opt = sk_inet->opt;",
      "2091:  if (opt == NULL || opt->cipso == 0)",
      "2094:  hdr_delta = cipso_v4_delopt(&sk_inet->opt);",
      "",
      "[Added Lines]",
      "2095:  struct ip_options_rcu *opt;",
      "2099:  opt = rcu_dereference_protected(sk_inet->inet_opt, 1);",
      "2100:  if (opt == NULL || opt->opt.cipso == 0)",
      "2103:  hdr_delta = cipso_v4_delopt(&sk_inet->inet_opt);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2110: void cipso_v4_req_delattr(struct request_sock *req)",
      "2111: {",
      "2113:  struct inet_request_sock *req_inet;",
      "2115:  req_inet = inet_rsk(req);",
      "2116:  opt = req_inet->opt;",
      "2118:   return;",
      "2120:  cipso_v4_delopt(&req_inet->opt);",
      "",
      "[Removed Lines]",
      "2112:  struct ip_options *opt;",
      "2117:  if (opt == NULL || opt->cipso == 0)",
      "",
      "[Added Lines]",
      "2121:  struct ip_options_rcu *opt;",
      "2126:  if (opt == NULL || opt->opt.cipso == 0)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2185: int cipso_v4_sock_getattr(struct sock *sk, struct netlbl_lsm_secattr *secattr)",
      "2186: {",
      "2195: }",
      "",
      "[Removed Lines]",
      "2187:  struct ip_options *opt;",
      "2189:  opt = inet_sk(sk)->opt;",
      "2190:  if (opt == NULL || opt->cipso == 0)",
      "2191:   return -ENOMSG;",
      "2193:  return cipso_v4_getattr(opt->__data + opt->cipso - sizeof(struct iphdr),",
      "2194:     secattr);",
      "",
      "[Added Lines]",
      "2196:  struct ip_options_rcu *opt;",
      "2197:  int res = -ENOMSG;",
      "2199:  rcu_read_lock();",
      "2200:  opt = rcu_dereference(inet_sk(sk)->inet_opt);",
      "2201:  if (opt && opt->opt.cipso)",
      "2202:   res = cipso_v4_getattr(opt->opt.__data +",
      "2203:       opt->opt.cipso -",
      "2204:       sizeof(struct iphdr),",
      "2205:            secattr);",
      "2206:  rcu_read_unlock();",
      "2207:  return res;",
      "",
      "---------------"
    ],
    "net/ipv4/icmp.c||net/ipv4/icmp.c": [
      "File: net/ipv4/icmp.c -> net/ipv4/icmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "108:   __be32        times[3];",
      "109:  } data;",
      "110:  int head_len;",
      "113: };",
      "",
      "[Removed Lines]",
      "111:  struct ip_options replyopts;",
      "112:  unsigned char  optbuf[40];",
      "",
      "[Added Lines]",
      "111:  struct ip_options_data replyopts;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "333:  struct inet_sock *inet;",
      "334:  __be32 daddr;",
      "337:   return;",
      "339:  sk = icmp_xmit_lock(net);",
      "",
      "[Removed Lines]",
      "336:  if (ip_options_echo(&icmp_param->replyopts, skb))",
      "",
      "[Added Lines]",
      "335:  if (ip_options_echo(&icmp_param->replyopts.opt.opt, skb))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "347:  daddr = ipc.addr = rt->rt_src;",
      "348:  ipc.opt = NULL;",
      "349:  ipc.tx_flags = 0;",
      "354:  }",
      "355:  {",
      "356:   struct flowi4 fl4 = {",
      "",
      "[Removed Lines]",
      "350:  if (icmp_param->replyopts.optlen) {",
      "351:   ipc.opt = &icmp_param->replyopts;",
      "352:   if (ipc.opt->srr)",
      "353:    daddr = icmp_param->replyopts.faddr;",
      "",
      "[Added Lines]",
      "349:  if (icmp_param->replyopts.opt.opt.optlen) {",
      "350:   ipc.opt = &icmp_param->replyopts.opt;",
      "351:   if (ipc.opt->opt.srr)",
      "352:    daddr = icmp_param->replyopts.opt.opt.faddr;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "379:      struct icmp_bxm *param)",
      "380: {",
      "381:  struct flowi4 fl4 = {",
      "384:   .saddr = saddr,",
      "385:   .flowi4_tos = RT_TOS(tos),",
      "386:   .flowi4_proto = IPPROTO_ICMP,",
      "",
      "[Removed Lines]",
      "382:   .daddr = (param->replyopts.srr ?",
      "383:      param->replyopts.faddr : iph->saddr),",
      "",
      "[Added Lines]",
      "381:   .daddr = (param->replyopts.opt.opt.srr ?",
      "382:      param->replyopts.opt.opt.faddr : iph->saddr),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "581:         IPTOS_PREC_INTERNETCONTROL) :",
      "582:        iph->tos;",
      "585:   goto out_unlock;",
      "",
      "[Removed Lines]",
      "584:  if (ip_options_echo(&icmp_param.replyopts, skb_in))",
      "",
      "[Added Lines]",
      "583:  if (ip_options_echo(&icmp_param.replyopts.opt.opt, skb_in))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "597:  icmp_param.offset = skb_network_offset(skb_in);",
      "598:  inet_sk(sk)->tos = tos;",
      "599:  ipc.addr = iph->saddr;",
      "601:  ipc.tx_flags = 0;",
      "603:  rt = icmp_route_lookup(net, skb_in, iph, saddr, tos,",
      "",
      "[Removed Lines]",
      "600:  ipc.opt = &icmp_param.replyopts;",
      "",
      "[Added Lines]",
      "599:  ipc.opt = &icmp_param.replyopts.opt;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "613:  room = dst_mtu(&rt->dst);",
      "614:  if (room > 576)",
      "615:   room = 576;",
      "617:  room -= sizeof(struct icmphdr);",
      "619:  icmp_param.data_len = skb_in->len - icmp_param.offset;",
      "",
      "[Removed Lines]",
      "616:  room -= sizeof(struct iphdr) + icmp_param.replyopts.optlen;",
      "",
      "[Added Lines]",
      "615:  room -= sizeof(struct iphdr) + icmp_param.replyopts.opt.opt.optlen;",
      "",
      "---------------"
    ],
    "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c": [
      "File: net/ipv4/inet_connection_sock.c -> net/ipv4/inet_connection_sock.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "354: {",
      "355:  struct rtable *rt;",
      "356:  const struct inet_request_sock *ireq = inet_rsk(req);",
      "358:  struct net *net = sock_net(sk);",
      "359:  struct flowi4 fl4;",
      "361:  flowi4_init_output(&fl4, sk->sk_bound_dev_if, sk->sk_mark,",
      "362:       RT_CONN_FLAGS(sk), RT_SCOPE_UNIVERSE,",
      "363:       sk->sk_protocol, inet_sk_flowi_flags(sk),",
      "365:       ireq->loc_addr, ireq->rmt_port, inet_sk(sk)->inet_sport);",
      "366:  security_req_classify_flow(req, flowi4_to_flowi(&fl4));",
      "367:  rt = ip_route_output_flow(net, &fl4, sk);",
      "368:  if (IS_ERR(rt))",
      "369:   goto no_route;",
      "371:   goto route_err;",
      "372:  return &rt->dst;",
      "",
      "[Removed Lines]",
      "357:  struct ip_options *opt = inet_rsk(req)->opt;",
      "364:       (opt && opt->srr) ? opt->faddr : ireq->rmt_addr,",
      "370:  if (opt && opt->is_strictroute && rt->rt_dst != rt->rt_gateway)",
      "",
      "[Added Lines]",
      "357:  struct ip_options_rcu *opt = inet_rsk(req)->opt;",
      "364:       (opt && opt->opt.srr) ? opt->opt.faddr : ireq->rmt_addr,",
      "370:  if (opt && opt->opt.is_strictroute && rt->rt_dst != rt->rt_gateway)",
      "",
      "---------------"
    ],
    "net/ipv4/ip_options.c||net/ipv4/ip_options.c": [
      "File: net/ipv4/ip_options.c -> net/ipv4/ip_options.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:        __be32 daddr, struct rtable *rt, int is_frag)",
      "41: {",
      "42:  unsigned char *iph = skb_network_header(skb);",
      "",
      "[Removed Lines]",
      "39: void ip_options_build(struct sk_buff * skb, struct ip_options * opt,",
      "",
      "[Added Lines]",
      "39: void ip_options_build(struct sk_buff *skb, struct ip_options *opt,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87: {",
      "89:  unsigned char *sptr, *dptr;",
      "90:  int soffset, doffset;",
      "91:  int optlen;",
      "",
      "[Removed Lines]",
      "86: int ip_options_echo(struct ip_options * dopt, struct sk_buff * skb)",
      "88:  struct ip_options *sopt;",
      "",
      "[Added Lines]",
      "86: int ip_options_echo(struct ip_options *dopt, struct sk_buff *skb)",
      "88:  const struct ip_options *sopt;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:  sopt = &(IPCB(skb)->opt);",
      "100:   return 0;",
      "103:  sptr = skb_network_header(skb);",
      "104:  dptr = dopt->__data;",
      "",
      "[Removed Lines]",
      "98:  if (sopt->optlen == 0) {",
      "99:   dopt->optlen = 0;",
      "101:  }",
      "",
      "[Added Lines]",
      "98:  if (sopt->optlen == 0)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "157:   dopt->optlen += optlen;",
      "158:  }",
      "159:  if (sopt->srr) {",
      "161:   __be32 faddr;",
      "163:   optlen  = start[1];",
      "",
      "[Removed Lines]",
      "160:   unsigned char * start = sptr+sopt->srr;",
      "",
      "[Added Lines]",
      "158:   unsigned char *start = sptr+sopt->srr;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "499:  }",
      "500: }",
      "503: {",
      "505:          GFP_KERNEL);",
      "506: }",
      "510: {",
      "511:  while (optlen & 3)",
      "515:   kfree(opt);",
      "516:   return -EINVAL;",
      "517:  }",
      "",
      "[Removed Lines]",
      "502: static struct ip_options *ip_options_get_alloc(const int optlen)",
      "504:  return kzalloc(sizeof(struct ip_options) + ((optlen + 3) & ~3),",
      "508: static int ip_options_get_finish(struct net *net, struct ip_options **optp,",
      "509:      struct ip_options *opt, int optlen)",
      "512:   opt->__data[optlen++] = IPOPT_END;",
      "513:  opt->optlen = optlen;",
      "514:  if (optlen && ip_options_compile(net, opt, NULL)) {",
      "",
      "[Added Lines]",
      "500: static struct ip_options_rcu *ip_options_get_alloc(const int optlen)",
      "502:  return kzalloc(sizeof(struct ip_options_rcu) + ((optlen + 3) & ~3),",
      "506: static int ip_options_get_finish(struct net *net, struct ip_options_rcu **optp,",
      "507:      struct ip_options_rcu *opt, int optlen)",
      "510:   opt->opt.__data[optlen++] = IPOPT_END;",
      "511:  opt->opt.optlen = optlen;",
      "512:  if (optlen && ip_options_compile(net, &opt->opt, NULL)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "520:  return 0;",
      "521: }",
      "524:         unsigned char __user *data, int optlen)",
      "525: {",
      "528:  if (!opt)",
      "529:   return -ENOMEM;",
      "531:   kfree(opt);",
      "532:   return -EFAULT;",
      "533:  }",
      "534:  return ip_options_get_finish(net, optp, opt, optlen);",
      "535: }",
      "538:      unsigned char *data, int optlen)",
      "539: {",
      "542:  if (!opt)",
      "543:   return -ENOMEM;",
      "544:  if (optlen)",
      "546:  return ip_options_get_finish(net, optp, opt, optlen);",
      "547: }",
      "",
      "[Removed Lines]",
      "523: int ip_options_get_from_user(struct net *net, struct ip_options **optp,",
      "526:  struct ip_options *opt = ip_options_get_alloc(optlen);",
      "530:  if (optlen && copy_from_user(opt->__data, data, optlen)) {",
      "537: int ip_options_get(struct net *net, struct ip_options **optp,",
      "540:  struct ip_options *opt = ip_options_get_alloc(optlen);",
      "545:   memcpy(opt->__data, data, optlen);",
      "",
      "[Added Lines]",
      "521: int ip_options_get_from_user(struct net *net, struct ip_options_rcu **optp,",
      "524:  struct ip_options_rcu *opt = ip_options_get_alloc(optlen);",
      "528:  if (optlen && copy_from_user(opt->opt.__data, data, optlen)) {",
      "535: int ip_options_get(struct net *net, struct ip_options_rcu **optp,",
      "538:  struct ip_options_rcu *opt = ip_options_get_alloc(optlen);",
      "543:   memcpy(opt->opt.__data, data, optlen);",
      "",
      "---------------"
    ],
    "net/ipv4/ip_output.c||net/ipv4/ip_output.c": [
      "File: net/ipv4/ip_output.c -> net/ipv4/ip_output.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "142: int ip_build_and_send_pkt(struct sk_buff *skb, struct sock *sk,",
      "144: {",
      "145:  struct inet_sock *inet = inet_sk(sk);",
      "146:  struct rtable *rt = skb_rtable(skb);",
      "147:  struct iphdr *iph;",
      "151:  skb_reset_network_header(skb);",
      "152:  iph = ip_hdr(skb);",
      "153:  iph->version  = 4;",
      "",
      "[Removed Lines]",
      "143:      __be32 saddr, __be32 daddr, struct ip_options *opt)",
      "150:  skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));",
      "",
      "[Added Lines]",
      "143:      __be32 saddr, __be32 daddr, struct ip_options_rcu *opt)",
      "150:  skb_push(skb, sizeof(struct iphdr) + (opt ? opt->opt.optlen : 0));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "163:  iph->protocol = sk->sk_protocol;",
      "164:  ip_select_ident(iph, &rt->dst, sk);",
      "169:  }",
      "171:  skb->priority = sk->sk_priority;",
      "",
      "[Removed Lines]",
      "166:  if (opt && opt->optlen) {",
      "167:   iph->ihl += opt->optlen>>2;",
      "168:   ip_options_build(skb, opt, daddr, rt, 0);",
      "",
      "[Added Lines]",
      "166:  if (opt && opt->opt.optlen) {",
      "167:   iph->ihl += opt->opt.optlen>>2;",
      "168:   ip_options_build(skb, &opt->opt, daddr, rt, 0);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "316: {",
      "317:  struct sock *sk = skb->sk;",
      "318:  struct inet_sock *inet = inet_sk(sk);",
      "320:  struct rtable *rt;",
      "321:  struct iphdr *iph;",
      "322:  int res;",
      "",
      "[Removed Lines]",
      "319:  struct ip_options *opt = inet->opt;",
      "",
      "[Added Lines]",
      "319:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "327:  rcu_read_lock();",
      "328:  rt = skb_rtable(skb);",
      "329:  if (rt != NULL)",
      "330:   goto packet_routed;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "328:  inet_opt = rcu_dereference(inet->inet_opt);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "338:   daddr = inet->inet_daddr;",
      "",
      "[Removed Lines]",
      "339:   if(opt && opt->srr)",
      "340:    daddr = opt->faddr;",
      "",
      "[Added Lines]",
      "340:   if (inet_opt && inet_opt->opt.srr)",
      "341:    daddr = inet_opt->opt.faddr;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "357:  skb_dst_set_noref(skb, &rt->dst);",
      "359: packet_routed:",
      "361:   goto no_route;",
      "365:  skb_reset_network_header(skb);",
      "366:  iph = ip_hdr(skb);",
      "",
      "[Removed Lines]",
      "360:  if (opt && opt->is_strictroute && rt->rt_dst != rt->rt_gateway)",
      "364:  skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));",
      "",
      "[Added Lines]",
      "361:  if (inet_opt && inet_opt->opt.is_strictroute && rt->rt_dst != rt->rt_gateway)",
      "365:  skb_push(skb, sizeof(struct iphdr) + (inet_opt ? inet_opt->opt.optlen : 0));",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "375:  iph->daddr    = rt->rt_dst;",
      "381:  }",
      "383:  ip_select_ident_more(iph, &rt->dst, sk,",
      "",
      "[Removed Lines]",
      "378:  if (opt && opt->optlen) {",
      "379:   iph->ihl += opt->optlen >> 2;",
      "380:   ip_options_build(skb, opt, inet->inet_daddr, rt, 0);",
      "",
      "[Added Lines]",
      "379:  if (inet_opt && inet_opt->opt.optlen) {",
      "380:   iph->ihl += inet_opt->opt.optlen >> 2;",
      "381:   ip_options_build(skb, &inet_opt->opt, inet->inet_daddr, rt, 0);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1033:     struct ipcm_cookie *ipc, struct rtable **rtp)",
      "1034: {",
      "1035:  struct inet_sock *inet = inet_sk(sk);",
      "1037:  struct rtable *rt;",
      "",
      "[Removed Lines]",
      "1036:  struct ip_options *opt;",
      "",
      "[Added Lines]",
      "1037:  struct ip_options_rcu *opt;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1047:    if (unlikely(cork->opt == NULL))",
      "1048:     return -ENOBUFS;",
      "1049:   }",
      "1051:   cork->flags |= IPCORK_OPT;",
      "1052:   cork->addr = ipc->addr;",
      "1053:  }",
      "",
      "[Removed Lines]",
      "1050:   memcpy(cork->opt, opt, sizeof(struct ip_options) + opt->optlen);",
      "",
      "[Added Lines]",
      "1051:   memcpy(cork->opt, &opt->opt, sizeof(struct ip_options) + opt->opt.optlen);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1451:      unsigned int len)",
      "1452: {",
      "1453:  struct inet_sock *inet = inet_sk(sk);",
      "1458:  struct ipcm_cookie ipc;",
      "1459:  __be32 daddr;",
      "1460:  struct rtable *rt = skb_rtable(skb);",
      "1463:   return;",
      "1465:  daddr = ipc.addr = rt->rt_src;",
      "1466:  ipc.opt = NULL;",
      "1467:  ipc.tx_flags = 0;",
      "1470:   ipc.opt = &replyopts.opt;",
      "1474:  }",
      "1476:  {",
      "",
      "[Removed Lines]",
      "1454:  struct {",
      "1455:   struct ip_options opt;",
      "1456:   char   data[40];",
      "1457:  } replyopts;",
      "1462:  if (ip_options_echo(&replyopts.opt, skb))",
      "1469:  if (replyopts.opt.optlen) {",
      "1472:   if (ipc.opt->srr)",
      "1473:    daddr = replyopts.opt.faddr;",
      "",
      "[Added Lines]",
      "1455:  struct ip_options_data replyopts;",
      "1460:  if (ip_options_echo(&replyopts.opt.opt, skb))",
      "1467:  if (replyopts.opt.opt.optlen) {",
      "1470:   if (replyopts.opt.opt.srr)",
      "1471:    daddr = replyopts.opt.opt.faddr;",
      "",
      "---------------"
    ],
    "net/ipv4/ip_sockglue.c||net/ipv4/ip_sockglue.c": [
      "File: net/ipv4/ip_sockglue.c -> net/ipv4/ip_sockglue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "451: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "454: static void opt_kfree_rcu(struct rcu_head *head)",
      "455: {",
      "456:  kfree(container_of(head, struct ip_options_rcu, rcu));",
      "457: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "497:  switch (optname) {",
      "498:  case IP_OPTIONS:",
      "499:  {",
      "501:   if (optlen > 40)",
      "502:    goto e_inval;",
      "503:   err = ip_options_get_from_user(sock_net(sk), &opt,",
      "504:             optval, optlen);",
      "505:   if (err)",
      "506:    break;",
      "507:   if (inet->is_icsk) {",
      "508:    struct inet_connection_sock *icsk = inet_csk(sk);",
      "509: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
      "",
      "[Removed Lines]",
      "500:   struct ip_options *opt = NULL;",
      "",
      "[Added Lines]",
      "505:   struct ip_options_rcu *old, *opt = NULL;",
      "513:   old = rcu_dereference_protected(inet->inet_opt,",
      "514:       sock_owned_by_user(sk));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "512:           (TCPF_LISTEN | TCPF_CLOSE)) &&",
      "513:         inet->inet_daddr != LOOPBACK4_IPV6)) {",
      "514: #endif",
      "517:     if (opt)",
      "519:     icsk->icsk_sync_mss(sk, icsk->icsk_pmtu_cookie);",
      "520: #if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)",
      "521:    }",
      "522: #endif",
      "523:   }",
      "526:   break;",
      "527:  }",
      "528:  case IP_PKTINFO:",
      "",
      "[Removed Lines]",
      "515:     if (inet->opt)",
      "516:      icsk->icsk_ext_hdr_len -= inet->opt->optlen;",
      "518:      icsk->icsk_ext_hdr_len += opt->optlen;",
      "524:   opt = xchg(&inet->opt, opt);",
      "525:   kfree(opt);",
      "",
      "[Added Lines]",
      "523:     if (old)",
      "524:      icsk->icsk_ext_hdr_len -= old->opt.optlen;",
      "526:      icsk->icsk_ext_hdr_len += opt->opt.optlen;",
      "532:   rcu_assign_pointer(inet->inet_opt, opt);",
      "533:   if (old)",
      "534:    call_rcu(&old->rcu, opt_kfree_rcu);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1081:  case IP_OPTIONS:",
      "1082:  {",
      "1083:   unsigned char optbuf[sizeof(struct ip_options)+40];",
      "1085:   opt->optlen = 0;",
      "1090:   release_sock(sk);",
      "1092:   if (opt->optlen == 0)",
      "",
      "[Removed Lines]",
      "1084:   struct ip_options * opt = (struct ip_options *)optbuf;",
      "1086:   if (inet->opt)",
      "1087:    memcpy(optbuf, inet->opt,",
      "1088:           sizeof(struct ip_options)+",
      "1089:           inet->opt->optlen);",
      "",
      "[Added Lines]",
      "1093:   struct ip_options *opt = (struct ip_options *)optbuf;",
      "1094:   struct ip_options_rcu *inet_opt;",
      "1096:   inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "1097:            sock_owned_by_user(sk));",
      "1099:   if (inet_opt)",
      "1100:    memcpy(optbuf, &inet_opt->opt,",
      "1101:           sizeof(struct ip_options) +",
      "1102:           inet_opt->opt.optlen);",
      "",
      "---------------"
    ],
    "net/ipv4/raw.c||net/ipv4/raw.c": [
      "File: net/ipv4/raw.c -> net/ipv4/raw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "460:  __be32 saddr;",
      "461:  u8  tos;",
      "462:  int err;",
      "464:  err = -EMSGSIZE;",
      "465:  if (len > 0xFFFF)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "463:  struct ip_options_data opt_copy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "520:  saddr = ipc.addr;",
      "521:  ipc.addr = daddr;",
      "526:  if (ipc.opt) {",
      "527:   err = -EINVAL;",
      "",
      "[Removed Lines]",
      "523:  if (!ipc.opt)",
      "524:   ipc.opt = inet->opt;",
      "",
      "[Added Lines]",
      "524:  if (!ipc.opt) {",
      "525:   struct ip_options_rcu *inet_opt;",
      "527:   rcu_read_lock();",
      "528:   inet_opt = rcu_dereference(inet->inet_opt);",
      "529:   if (inet_opt) {",
      "530:    memcpy(&opt_copy, inet_opt,",
      "531:           sizeof(*inet_opt) + inet_opt->opt.optlen);",
      "532:    ipc.opt = &opt_copy.opt;",
      "533:   }",
      "534:   rcu_read_unlock();",
      "535:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "531:   if (inet->hdrincl)",
      "532:    goto done;",
      "534:    if (!daddr)",
      "535:     goto done;",
      "537:   }",
      "538:  }",
      "539:  tos = RT_CONN_FLAGS(sk);",
      "",
      "[Removed Lines]",
      "533:   if (ipc.opt->srr) {",
      "536:    daddr = ipc.opt->faddr;",
      "",
      "[Added Lines]",
      "544:   if (ipc.opt->opt.srr) {",
      "547:    daddr = ipc.opt->opt.faddr;",
      "",
      "---------------"
    ],
    "net/ipv4/syncookies.c||net/ipv4/syncookies.c": [
      "File: net/ipv4/syncookies.c -> net/ipv4/syncookies.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "323:  if (opt && opt->optlen) {",
      "326:   ireq->opt = kmalloc(opt_size, GFP_ATOMIC);",
      "328:    kfree(ireq->opt);",
      "329:    ireq->opt = NULL;",
      "330:   }",
      "",
      "[Removed Lines]",
      "324:   int opt_size = sizeof(struct ip_options) + opt->optlen;",
      "327:   if (ireq->opt != NULL && ip_options_echo(ireq->opt, skb)) {",
      "",
      "[Added Lines]",
      "324:   int opt_size = sizeof(struct ip_options_rcu) + opt->optlen;",
      "327:   if (ireq->opt != NULL && ip_options_echo(&ireq->opt->opt, skb)) {",
      "",
      "---------------"
    ],
    "net/ipv4/tcp_ipv4.c||net/ipv4/tcp_ipv4.c": [
      "File: net/ipv4/tcp_ipv4.c -> net/ipv4/tcp_ipv4.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "154:  struct flowi4 fl4;",
      "155:  struct rtable *rt;",
      "156:  int err;",
      "158:  if (addr_len < sizeof(struct sockaddr_in))",
      "159:   return -EINVAL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "157:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "162:   return -EAFNOSUPPORT;",
      "164:  nexthop = daddr = usin->sin_addr.s_addr;",
      "166:   if (!daddr)",
      "167:    return -EINVAL;",
      "169:  }",
      "171:  orig_sport = inet->inet_sport;",
      "",
      "[Removed Lines]",
      "165:  if (inet->opt && inet->opt->srr) {",
      "168:   nexthop = inet->opt->faddr;",
      "",
      "[Added Lines]",
      "166:  inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "167:           sock_owned_by_user(sk));",
      "168:  if (inet_opt && inet_opt->opt.srr) {",
      "171:   nexthop = inet_opt->opt.faddr;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "186:   return -ENETUNREACH;",
      "187:  }",
      "190:   daddr = rt->rt_dst;",
      "192:  if (!inet->inet_saddr)",
      "",
      "[Removed Lines]",
      "189:  if (!inet->opt || !inet->opt->srr)",
      "",
      "[Added Lines]",
      "192:  if (!inet_opt || !inet_opt->opt.srr)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "222:  inet->inet_daddr = daddr;",
      "224:  inet_csk(sk)->icsk_ext_hdr_len = 0;",
      "228:  tp->rx_opt.mss_clamp = TCP_MSS_DEFAULT;",
      "",
      "[Removed Lines]",
      "225:  if (inet->opt)",
      "226:   inet_csk(sk)->icsk_ext_hdr_len = inet->opt->optlen;",
      "",
      "[Added Lines]",
      "228:  if (inet_opt)",
      "229:   inet_csk(sk)->icsk_ext_hdr_len = inet_opt->opt.optlen;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "825: {",
      "829:  if (opt && opt->optlen) {",
      "831:   dopt = kmalloc(opt_size, GFP_ATOMIC);",
      "832:   if (dopt) {",
      "834:     kfree(dopt);",
      "835:     dopt = NULL;",
      "836:    }",
      "",
      "[Removed Lines]",
      "823: static struct ip_options *tcp_v4_save_options(struct sock *sk,",
      "824:            struct sk_buff *skb)",
      "826:  struct ip_options *opt = &(IPCB(skb)->opt);",
      "827:  struct ip_options *dopt = NULL;",
      "830:   int opt_size = optlength(opt);",
      "833:    if (ip_options_echo(dopt, skb)) {",
      "",
      "[Added Lines]",
      "826: static struct ip_options_rcu *tcp_v4_save_options(struct sock *sk,",
      "827:         struct sk_buff *skb)",
      "829:  const struct ip_options *opt = &(IPCB(skb)->opt);",
      "830:  struct ip_options_rcu *dopt = NULL;",
      "833:   int opt_size = sizeof(*dopt) + opt->optlen;",
      "837:    if (ip_options_echo(&dopt->opt, skb)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1411: #ifdef CONFIG_TCP_MD5SIG",
      "1412:  struct tcp_md5sig_key *key;",
      "1413: #endif",
      "1415:  if (sk_acceptq_is_full(sk))",
      "1416:   goto exit_overflow;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1418:  struct ip_options_rcu *inet_opt;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1431:  newinet->inet_daddr   = ireq->rmt_addr;",
      "1432:  newinet->inet_rcv_saddr = ireq->loc_addr;",
      "1433:  newinet->inet_saddr       = ireq->loc_addr;",
      "1435:  ireq->opt       = NULL;",
      "1436:  newinet->mc_index     = inet_iif(skb);",
      "1437:  newinet->mc_ttl       = ip_hdr(skb)->ttl;",
      "1438:  inet_csk(newsk)->icsk_ext_hdr_len = 0;",
      "1441:  newinet->inet_id = newtp->write_seq ^ jiffies;",
      "1443:  tcp_mtup_init(newsk);",
      "",
      "[Removed Lines]",
      "1434:  newinet->opt       = ireq->opt;",
      "1439:  if (newinet->opt)",
      "1440:   inet_csk(newsk)->icsk_ext_hdr_len = newinet->opt->optlen;",
      "",
      "[Added Lines]",
      "1439:  inet_opt       = ireq->opt;",
      "1440:  rcu_assign_pointer(newinet->inet_opt, inet_opt);",
      "1445:  if (inet_opt)",
      "1446:   inet_csk(newsk)->icsk_ext_hdr_len = inet_opt->opt.optlen;",
      "",
      "---------------"
    ],
    "net/ipv4/udp.c||net/ipv4/udp.c": [
      "File: net/ipv4/udp.c -> net/ipv4/udp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "804:  int corkreq = up->corkflag || msg->msg_flags&MSG_MORE;",
      "805:  int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);",
      "806:  struct sk_buff *skb;",
      "808:  if (len > 0xFFFF)",
      "809:   return -EMSGSIZE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "807:  struct ip_options_data opt_copy;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "877:    free = 1;",
      "878:   connected = 0;",
      "879:  }",
      "883:  saddr = ipc.addr;",
      "884:  ipc.addr = faddr = daddr;",
      "887:   if (!daddr)",
      "888:    return -EINVAL;",
      "890:   connected = 0;",
      "891:  }",
      "892:  tos = RT_TOS(inet->tos);",
      "893:  if (sock_flag(sk, SOCK_LOCALROUTE) ||",
      "894:      (msg->msg_flags & MSG_DONTROUTE) ||",
      "896:   tos |= RTO_ONLINK;",
      "897:   connected = 0;",
      "898:  }",
      "",
      "[Removed Lines]",
      "880:  if (!ipc.opt)",
      "881:   ipc.opt = inet->opt;",
      "886:  if (ipc.opt && ipc.opt->srr) {",
      "889:   faddr = ipc.opt->faddr;",
      "895:      (ipc.opt && ipc.opt->is_strictroute)) {",
      "",
      "[Added Lines]",
      "881:  if (!ipc.opt) {",
      "882:   struct ip_options_rcu *inet_opt;",
      "884:   rcu_read_lock();",
      "885:   inet_opt = rcu_dereference(inet->inet_opt);",
      "886:   if (inet_opt) {",
      "887:    memcpy(&opt_copy, inet_opt,",
      "888:           sizeof(*inet_opt) + inet_opt->opt.optlen);",
      "889:    ipc.opt = &opt_copy.opt;",
      "890:   }",
      "891:   rcu_read_unlock();",
      "892:  }",
      "897:  if (ipc.opt && ipc.opt->opt.srr) {",
      "900:   faddr = ipc.opt->opt.faddr;",
      "906:      (ipc.opt && ipc.opt->opt.is_strictroute)) {",
      "",
      "---------------"
    ],
    "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
      "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1470:     First: no IPv4 options.",
      "1473:  newnp->ipv6_fl_list = NULL;",
      "",
      "[Removed Lines]",
      "1472:  newinet->opt = NULL;",
      "",
      "[Added Lines]",
      "1472:  newinet->inet_opt = NULL;",
      "",
      "---------------"
    ],
    "net/l2tp/l2tp_ip.c||net/l2tp/l2tp_ip.c": [
      "File: net/l2tp/l2tp_ip.c -> net/l2tp/l2tp_ip.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "416:  int rc;",
      "417:  struct l2tp_ip_sock *lsa = l2tp_ip_sk(sk);",
      "418:  struct inet_sock *inet = inet_sk(sk);",
      "420:  struct rtable *rt = NULL;",
      "421:  int connected = 0;",
      "422:  __be32 daddr;",
      "",
      "[Removed Lines]",
      "419:  struct ip_options *opt = inet->opt;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "471:   rt = (struct rtable *) __sk_dst_check(sk, 0);",
      "473:  if (rt == NULL) {",
      "",
      "[Removed Lines]",
      "475:   if (opt && opt->srr)",
      "476:    daddr = opt->faddr;",
      "",
      "[Added Lines]",
      "473:   struct ip_options_rcu *inet_opt;",
      "475:   inet_opt = rcu_dereference_protected(inet->inet_opt,",
      "476:            sock_owned_by_user(sk));",
      "479:   if (inet_opt && inet_opt->opt.srr)",
      "480:    daddr = inet_opt->opt.faddr;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f9c8c1b091628a550b70ee51d7d729187f5c290",
      "candidate_info": {
        "commit_hash": "4f9c8c1b091628a550b70ee51d7d729187f5c290",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4f9c8c1b091628a550b70ee51d7d729187f5c290",
        "files": [
          "net/ipv4/cipso_ipv4.c"
        ],
        "message": "ipv4: Convert call_rcu() to kfree_rcu(), drop opt_kfree_rcu()\n\nBecause opt_kfree_rcu() just calls kfree(), all call_rcu() uses of it\nmay be converted to kfree_rcu().  This permits opt_kfree_rcu() to\nbe eliminated.\n\nSigned-off-by: Paul E. McKenney <paul.mckenney@linaro.org>\nSigned-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>\nAcked-by: David S. Miller <davem@davemloft.net>\nCc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>\nCc: James Morris <jmorris@namei.org>\nCc: Hideaki YOSHIFUJI <yoshfuji@linux-ipv6.org>\nCc: Patrick McHardy <kaber@trash.net>\nCc: netdev@vger.kernel.org",
        "before_after_code_files": [
          "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c"
          ],
          "candidate": [
            "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/cipso_ipv4.c||net/ipv4/cipso_ipv4.c": [
          "File: net/ipv4/cipso_ipv4.c -> net/ipv4/cipso_ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1857:  return CIPSO_V4_HDR_LEN + ret_val;",
          "1858: }",
          "",
          "[Removed Lines]",
          "1860: static void opt_kfree_rcu(struct rcu_head *head)",
          "1861: {",
          "1862:  kfree(container_of(head, struct ip_options_rcu, rcu));",
          "1863: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1938:  }",
          "1939:  rcu_assign_pointer(sk_inet->inet_opt, opt);",
          "1940:  if (old)",
          "1943:  return 0;",
          "",
          "[Removed Lines]",
          "1941:   call_rcu(&old->rcu, opt_kfree_rcu);",
          "",
          "[Added Lines]",
          "1936:   kfree_rcu(old, rcu);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2005:  req_inet = inet_rsk(req);",
          "2006:  opt = xchg(&req_inet->opt, opt);",
          "2007:  if (opt)",
          "2010:  return 0;",
          "",
          "[Removed Lines]",
          "2008:   call_rcu(&opt->rcu, opt_kfree_rcu);",
          "",
          "[Added Lines]",
          "2003:   kfree_rcu(opt, rcu);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2077:   hdr_delta = opt->opt.optlen;",
          "2079:  }",
          "2081:  return hdr_delta;",
          "",
          "[Removed Lines]",
          "2078:   call_rcu(&opt->rcu, opt_kfree_rcu);",
          "",
          "[Added Lines]",
          "2073:   kfree_rcu(opt, rcu);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "081b1b1bb27f1f4a3b682f4cf75103108f2066d7",
      "candidate_info": {
        "commit_hash": "081b1b1bb27f1f4a3b682f4cf75103108f2066d7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/081b1b1bb27f1f4a3b682f4cf75103108f2066d7",
        "files": [
          "net/l2tp/l2tp_ip.c"
        ],
        "message": "l2tp: fix l2tp_ip_sendmsg() route handling\n\nl2tp_ip_sendmsg() in non connected mode incorrectly calls\nsk_setup_caps(). Subsequent send() calls send data to wrong destination.\n\nWe can also avoid changing dst refcount in connected mode, using\nappropriate rcu locking. Once output route lookups can also be done\nunder rcu, sendto() calls wont change dst refcounts too.\n\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nCC: James Chapman <jchapman@katalix.com>\nSigned-off-by: David S. Miller <davem@conan.davemloft.net>",
        "before_after_code_files": [
          "net/l2tp/l2tp_ip.c||net/l2tp/l2tp_ip.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/l2tp/l2tp_ip.c||net/l2tp/l2tp_ip.c"
          ],
          "candidate": [
            "net/l2tp/l2tp_ip.c||net/l2tp/l2tp_ip.c"
          ]
        }
      },
      "candidate_diff": {
        "net/l2tp/l2tp_ip.c||net/l2tp/l2tp_ip.c": [
          "File: net/l2tp/l2tp_ip.c -> net/l2tp/l2tp_ip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:  if (connected)",
          "481:   rt = (struct rtable *) __sk_dst_check(sk, 0);",
          "483:  if (rt == NULL) {",
          "487:   inet_opt = rcu_dereference(inet->inet_opt);",
          "490:   if (inet_opt && inet_opt->opt.srr)",
          "491:    daddr = inet_opt->opt.faddr;",
          "",
          "[Removed Lines]",
          "484:   struct ip_options_rcu *inet_opt;",
          "486:   rcu_read_lock();",
          "493:   rcu_read_unlock();",
          "",
          "[Added Lines]",
          "483:  rcu_read_lock();",
          "485:   const struct ip_options_rcu *inet_opt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "503:         sk->sk_bound_dev_if);",
          "504:   if (IS_ERR(rt))",
          "505:    goto no_route;",
          "507:  }",
          "511:  rc = ip_queue_xmit(skb, &inet->cork.fl);",
          "513: error:",
          "",
          "[Removed Lines]",
          "506:   sk_setup_caps(sk, &rt->dst);",
          "508:  skb_dst_set(skb, dst_clone(&rt->dst));",
          "",
          "[Added Lines]",
          "504:   if (connected)",
          "505:    sk_setup_caps(sk, &rt->dst);",
          "506:   else",
          "513:  skb_dst_set_noref(skb, &rt->dst);",
          "517:  rcu_read_unlock();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "525:  return rc;",
          "527: no_route:",
          "528:  IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);",
          "529:  kfree_skb(skb);",
          "530:  rc = -EHOSTUNREACH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:  rcu_read_unlock();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea4fc0d6193ff56fcef39b0d2210d402a7acb5f0",
      "candidate_info": {
        "commit_hash": "ea4fc0d6193ff56fcef39b0d2210d402a7acb5f0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ea4fc0d6193ff56fcef39b0d2210d402a7acb5f0",
        "files": [
          "net/ipv4/ip_output.c"
        ],
        "message": "ipv4: Don't use rt->rt_{src,dst} in ip_queue_xmit().\n\nNow we can pick it out of the provided flow key.\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv4/ip_output.c||net/ipv4/ip_output.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/ip_output.c||net/ipv4/ip_output.c"
          ],
          "candidate": [
            "net/ipv4/ip_output.c||net/ipv4/ip_output.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/ip_output.c||net/ipv4/ip_output.c": [
          "File: net/ipv4/ip_output.c -> net/ipv4/ip_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:  rcu_read_lock();",
          "329:  inet_opt = rcu_dereference(inet->inet_opt);",
          "330:  rt = skb_rtable(skb);",
          "331:  if (rt != NULL)",
          "332:   goto packet_routed;",
          "336:  rt = (struct rtable *)__sk_dst_check(sk, 0);",
          "337:  if (rt == NULL) {",
          "338:   __be32 daddr;",
          "",
          "[Removed Lines]",
          "335:  fl4 = &fl->u.ip4;",
          "",
          "[Added Lines]",
          "330:  fl4 = &fl->u.ip4;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:  skb_dst_set_noref(skb, &rt->dst);",
          "362: packet_routed:",
          "364:   goto no_route;",
          "",
          "[Removed Lines]",
          "363:  if (inet_opt && inet_opt->opt.is_strictroute && rt->rt_dst != rt->rt_gateway)",
          "",
          "[Added Lines]",
          "363:  if (inet_opt && inet_opt->opt.is_strictroute && fl4->daddr != rt->rt_gateway)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:   iph->frag_off = 0;",
          "375:  iph->ttl      = ip_select_ttl(inet, &rt->dst);",
          "376:  iph->protocol = sk->sk_protocol;",
          "381:  if (inet_opt && inet_opt->opt.optlen) {",
          "",
          "[Removed Lines]",
          "377:  iph->saddr    = rt->rt_src;",
          "378:  iph->daddr    = rt->rt_dst;",
          "",
          "[Added Lines]",
          "377:  iph->saddr    = fl4->saddr;",
          "378:  iph->daddr    = fl4->daddr;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1470ddf7f8cecf776921e5ccee72e3d2b3d60cbc",
      "candidate_info": {
        "commit_hash": "1470ddf7f8cecf776921e5ccee72e3d2b3d60cbc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1470ddf7f8cecf776921e5ccee72e3d2b3d60cbc",
        "files": [
          "include/net/inet_sock.h",
          "net/ipv4/ip_output.c"
        ],
        "message": "inet: Remove explicit write references to sk/inet in ip_append_data\n\nIn order to allow simultaneous calls to ip_append_data on the same\nsocket, it must not modify any shared state in sk or inet (other\nthan those that are designed to allow that such as atomic counters).\n\nThis patch abstracts out write references to sk and inet_sk in\nip_append_data and its friends so that we may use the underlying\ncode in parallel.\n\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>\nAcked-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/inet_sock.h||include/net/inet_sock.h",
          "net/ipv4/ip_output.c||net/ipv4/ip_output.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/inet_sock.h||include/net/inet_sock.h",
            "net/ipv4/ip_output.c||net/ipv4/ip_output.c"
          ],
          "candidate": [
            "include/net/inet_sock.h||include/net/inet_sock.h",
            "net/ipv4/ip_output.c||net/ipv4/ip_output.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/inet_sock.h||include/net/inet_sock.h": [
          "File: include/net/inet_sock.h -> include/net/inet_sock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  return (struct inet_request_sock *)sk;",
          "87: }",
          "89: struct ip_mc_socklist;",
          "90: struct ipv6_pinfo;",
          "91: struct rtable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: struct inet_cork {",
          "90:  unsigned int  flags;",
          "91:  unsigned int  fragsize;",
          "92:  struct ip_options *opt;",
          "93:  struct dst_entry *dst;",
          "95:  __be32   addr;",
          "96:  struct flowi  fl;",
          "97:  struct page  *page;",
          "98:  u32   off;",
          "99:  u8   tx_flags;",
          "100: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:  int   mc_index;",
          "144:  __be32   mc_addr;",
          "145:  struct ip_mc_socklist __rcu *mc_list;",
          "155: };",
          "",
          "[Removed Lines]",
          "146:  struct {",
          "147:   unsigned int  flags;",
          "148:   unsigned int  fragsize;",
          "149:   struct ip_options *opt;",
          "150:   struct dst_entry *dst;",
          "152:   __be32   addr;",
          "153:   struct flowi  fl;",
          "154:  } cork;",
          "",
          "[Added Lines]",
          "159:  struct inet_cork cork;",
          "",
          "---------------"
        ],
        "net/ipv4/ip_output.c||net/ipv4/ip_output.c": [
          "File: net/ipv4/ip_output.c -> net/ipv4/ip_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733: }",
          "735: static inline int ip_ufo_append_data(struct sock *sk,",
          "736:    int getfrag(void *from, char *to, int offset, int len,",
          "737:           int odd, struct sk_buff *skb),",
          "738:    void *from, int length, int hh_len, int fragheaderlen,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "736:    struct sk_buff_head *queue,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "749:   skb = sock_alloc_send_skb(sk,",
          "750:    hh_len + fragheaderlen + transhdrlen + 20,",
          "751:    (flags & MSG_DONTWAIT), &err);",
          "",
          "[Removed Lines]",
          "748:  if ((skb = skb_peek_tail(&sk->sk_write_queue)) == NULL) {",
          "",
          "[Added Lines]",
          "749:  if ((skb = skb_peek_tail(queue)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "772:   skb_shinfo(skb)->gso_size = mtu - fragheaderlen;",
          "773:   skb_shinfo(skb)->gso_type = SKB_GSO_UDP;",
          "775:  }",
          "777:  return skb_append_datato_frags(sk, skb, getfrag, from,",
          "778:            (length - transhdrlen));",
          "779: }",
          "798: {",
          "799:  struct inet_sock *inet = inet_sk(sk);",
          "800:  struct sk_buff *skb;",
          "803:  int hh_len;",
          "804:  int exthdrlen;",
          "805:  int mtu;",
          "",
          "[Removed Lines]",
          "774:   __skb_queue_tail(&sk->sk_write_queue, skb);",
          "792: int ip_append_data(struct sock *sk,",
          "793:      int getfrag(void *from, char *to, int offset, int len,",
          "794:           int odd, struct sk_buff *skb),",
          "795:      void *from, int length, int transhdrlen,",
          "796:      struct ipcm_cookie *ipc, struct rtable **rtp,",
          "797:      unsigned int flags)",
          "802:  struct ip_options *opt = NULL;",
          "",
          "[Added Lines]",
          "775:   __skb_queue_tail(queue, skb);",
          "782: static int __ip_append_data(struct sock *sk, struct sk_buff_head *queue,",
          "783:        struct inet_cork *cork,",
          "784:        int getfrag(void *from, char *to, int offset,",
          "785:      int len, int odd, struct sk_buff *skb),",
          "786:        void *from, int length, int transhdrlen,",
          "787:        unsigned int flags)",
          "792:  struct ip_options *opt = inet->cork.opt;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "808:  int offset = 0;",
          "809:  unsigned int maxfraglen, fragheaderlen;",
          "810:  int csummode = CHECKSUM_NONE;",
          "857:  hh_len = LL_RESERVED_SPACE(rt->dst.dev);",
          "859:  fragheaderlen = sizeof(struct iphdr) + (opt ? opt->optlen : 0);",
          "860:  maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen;",
          "863:   ip_local_error(sk, EMSGSIZE, rt->rt_dst, inet->inet_dport,",
          "864:           mtu-exthdrlen);",
          "865:   return -EMSGSIZE;",
          "",
          "[Removed Lines]",
          "811:  struct rtable *rt;",
          "813:  if (flags&MSG_PROBE)",
          "814:   return 0;",
          "816:  if (skb_queue_empty(&sk->sk_write_queue)) {",
          "820:   opt = ipc->opt;",
          "821:   if (opt) {",
          "822:    if (inet->cork.opt == NULL) {",
          "823:     inet->cork.opt = kmalloc(sizeof(struct ip_options) + 40, sk->sk_allocation);",
          "824:     if (unlikely(inet->cork.opt == NULL))",
          "825:      return -ENOBUFS;",
          "826:    }",
          "827:    memcpy(inet->cork.opt, opt, sizeof(struct ip_options)+opt->optlen);",
          "828:    inet->cork.flags |= IPCORK_OPT;",
          "829:    inet->cork.addr = ipc->addr;",
          "830:   }",
          "831:   rt = *rtp;",
          "832:   if (unlikely(!rt))",
          "833:    return -EFAULT;",
          "838:   inet->cork.fragsize = mtu = inet->pmtudisc == IP_PMTUDISC_PROBE ?",
          "839:          rt->dst.dev->mtu :",
          "840:          dst_mtu(rt->dst.path);",
          "841:   inet->cork.dst = &rt->dst;",
          "842:   inet->cork.length = 0;",
          "843:   sk->sk_sndmsg_page = NULL;",
          "844:   sk->sk_sndmsg_off = 0;",
          "845:   exthdrlen = rt->dst.header_len;",
          "846:   length += exthdrlen;",
          "847:   transhdrlen += exthdrlen;",
          "848:  } else {",
          "849:   rt = (struct rtable *)inet->cork.dst;",
          "850:   if (inet->cork.flags & IPCORK_OPT)",
          "851:    opt = inet->cork.opt;",
          "853:   transhdrlen = 0;",
          "854:   exthdrlen = 0;",
          "855:   mtu = inet->cork.fragsize;",
          "856:  }",
          "862:  if (inet->cork.length + length > 0xFFFF - fragheaderlen) {",
          "",
          "[Added Lines]",
          "801:  struct rtable *rt = (struct rtable *)cork->dst;",
          "803:  exthdrlen = transhdrlen ? rt->dst.header_len : 0;",
          "804:  length += exthdrlen;",
          "805:  transhdrlen += exthdrlen;",
          "806:  mtu = inet->cork.fragsize;",
          "813:  if (cork->length + length > 0xFFFF - fragheaderlen) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "875:      !exthdrlen)",
          "876:   csummode = CHECKSUM_PARTIAL;",
          "881:  if (((length > mtu) || (skb && skb_is_gso(skb))) &&",
          "882:      (sk->sk_protocol == IPPROTO_UDP) &&",
          "883:      (rt->dst.dev->features & NETIF_F_UFO)) {",
          "887:   if (err)",
          "888:    goto error;",
          "889:   return 0;",
          "",
          "[Removed Lines]",
          "878:  skb = skb_peek_tail(&sk->sk_write_queue);",
          "880:  inet->cork.length += length;",
          "884:   err = ip_ufo_append_data(sk, getfrag, from, length, hh_len,",
          "885:       fragheaderlen, transhdrlen, mtu,",
          "886:       flags);",
          "",
          "[Added Lines]",
          "829:  skb = skb_peek_tail(queue);",
          "831:  cork->length += length;",
          "835:   err = ip_ufo_append_data(sk, queue, getfrag, from, length,",
          "836:       hh_len, fragheaderlen, transhdrlen,",
          "837:       mtu, flags);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "960:     else",
          "964:    }",
          "965:    if (skb == NULL)",
          "966:     goto error;",
          "",
          "[Removed Lines]",
          "963:      ipc->tx_flags = 0;",
          "",
          "[Added Lines]",
          "914:      cork->tx_flags = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "971:    skb->ip_summed = csummode;",
          "972:    skb->csum = 0;",
          "973:    skb_reserve(skb, hh_len);",
          "",
          "[Removed Lines]",
          "974:    skb_shinfo(skb)->tx_flags = ipc->tx_flags;",
          "",
          "[Added Lines]",
          "925:    skb_shinfo(skb)->tx_flags = cork->tx_flags;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1012:    continue;",
          "1013:   }",
          "",
          "[Removed Lines]",
          "1011:    __skb_queue_tail(&sk->sk_write_queue, skb);",
          "",
          "[Added Lines]",
          "962:    __skb_queue_tail(queue, skb);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1028:   } else {",
          "1029:    int i = skb_shinfo(skb)->nr_frags;",
          "1030:    skb_frag_t *frag = &skb_shinfo(skb)->frags[i-1];",
          "1033:    unsigned int left;",
          "1035:    if (page && (left = PAGE_SIZE - off) > 0) {",
          "",
          "[Removed Lines]",
          "1031:    struct page *page = sk->sk_sndmsg_page;",
          "1032:    int off = sk->sk_sndmsg_off;",
          "",
          "[Added Lines]",
          "982:    struct page *page = cork->page;",
          "983:    int off = cork->off;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1041:       goto error;",
          "1042:      }",
          "1043:      get_page(page);",
          "1045:      frag = &skb_shinfo(skb)->frags[i];",
          "1046:     }",
          "1047:    } else if (i < MAX_SKB_FRAGS) {",
          "",
          "[Removed Lines]",
          "1044:      skb_fill_page_desc(skb, i, page, sk->sk_sndmsg_off, 0);",
          "",
          "[Added Lines]",
          "995:      skb_fill_page_desc(skb, i, page, off, 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1052:      err = -ENOMEM;",
          "1053:      goto error;",
          "1054:     }",
          "1058:     skb_fill_page_desc(skb, i, page, 0, 0);",
          "1059:     frag = &skb_shinfo(skb)->frags[i];",
          "",
          "[Removed Lines]",
          "1055:     sk->sk_sndmsg_page = page;",
          "1056:     sk->sk_sndmsg_off = 0;",
          "",
          "[Added Lines]",
          "1006:     cork->page = page;",
          "1007:     cork->off = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1065:     err = -EFAULT;",
          "1066:     goto error;",
          "1067:    }",
          "1069:    frag->size += copy;",
          "1070:    skb->len += copy;",
          "1071:    skb->data_len += copy;",
          "",
          "[Removed Lines]",
          "1068:    sk->sk_sndmsg_off += copy;",
          "",
          "[Added Lines]",
          "1019:    cork->off += copy;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1079:  return 0;",
          "1081: error:",
          "1083:  IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTDISCARDS);",
          "1084:  return err;",
          "1085: }",
          "1087: ssize_t ip_append_page(struct sock *sk, struct page *page,",
          "1088:          int offset, size_t size, int flags)",
          "1089: {",
          "",
          "[Removed Lines]",
          "1082:  inet->cork.length -= length;",
          "",
          "[Added Lines]",
          "1033:  cork->length -= length;",
          "1038: static int ip_setup_cork(struct sock *sk, struct inet_cork *cork,",
          "1039:     struct ipcm_cookie *ipc, struct rtable **rtp)",
          "1040: {",
          "1041:  struct inet_sock *inet = inet_sk(sk);",
          "1042:  struct ip_options *opt;",
          "1043:  struct rtable *rt;",
          "1048:  opt = ipc->opt;",
          "1049:  if (opt) {",
          "1050:   if (cork->opt == NULL) {",
          "1051:    cork->opt = kmalloc(sizeof(struct ip_options) + 40,",
          "1052:          sk->sk_allocation);",
          "1053:    if (unlikely(cork->opt == NULL))",
          "1054:     return -ENOBUFS;",
          "1055:   }",
          "1056:   memcpy(cork->opt, opt, sizeof(struct ip_options) + opt->optlen);",
          "1057:   cork->flags |= IPCORK_OPT;",
          "1058:   cork->addr = ipc->addr;",
          "1059:  }",
          "1060:  rt = *rtp;",
          "1061:  if (unlikely(!rt))",
          "1062:   return -EFAULT;",
          "1067:  cork->fragsize = inet->pmtudisc == IP_PMTUDISC_PROBE ?",
          "1068:     rt->dst.dev->mtu : dst_mtu(rt->dst.path);",
          "1069:  cork->dst = &rt->dst;",
          "1070:  cork->length = 0;",
          "1071:  cork->tx_flags = ipc->tx_flags;",
          "1072:  cork->page = NULL;",
          "1073:  cork->off = 0;",
          "1075:  return 0;",
          "1076: }",
          "1089: int ip_append_data(struct sock *sk,",
          "1090:      int getfrag(void *from, char *to, int offset, int len,",
          "1091:           int odd, struct sk_buff *skb),",
          "1092:      void *from, int length, int transhdrlen,",
          "1093:      struct ipcm_cookie *ipc, struct rtable **rtp,",
          "1094:      unsigned int flags)",
          "1095: {",
          "1096:  struct inet_sock *inet = inet_sk(sk);",
          "1097:  int err;",
          "1099:  if (flags&MSG_PROBE)",
          "1100:   return 0;",
          "1102:  if (skb_queue_empty(&sk->sk_write_queue)) {",
          "1103:   err = ip_setup_cork(sk, &inet->cork, ipc, rtp);",
          "1104:   if (err)",
          "1105:    return err;",
          "1106:  } else {",
          "1107:   transhdrlen = 0;",
          "1108:  }",
          "1110:  return __ip_append_data(sk, &sk->sk_write_queue, &inet->cork, getfrag,",
          "1111:     from, length, transhdrlen, flags);",
          "1112: }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1227:  return err;",
          "1228: }",
          "1231: {",
          "1237: }",
          "1244: {",
          "1245:  struct sk_buff *skb, *tmp_skb;",
          "1246:  struct sk_buff **tail_skb;",
          "1247:  struct inet_sock *inet = inet_sk(sk);",
          "1248:  struct net *net = sock_net(sk);",
          "1249:  struct ip_options *opt = NULL;",
          "1251:  struct iphdr *iph;",
          "1252:  __be16 df = 0;",
          "1253:  __u8 ttl;",
          "1254:  int err = 0;",
          "1257:   goto out;",
          "1258:  tail_skb = &(skb_shinfo(skb)->frag_list);",
          "1261:  if (skb->data < skb_network_header(skb))",
          "1262:   __skb_pull(skb, skb_network_offset(skb));",
          "1264:   __skb_pull(tmp_skb, skb_network_header_len(skb));",
          "1266:   tail_skb = &(tmp_skb->next);",
          "",
          "[Removed Lines]",
          "1230: static void ip_cork_release(struct inet_sock *inet)",
          "1232:  inet->cork.flags &= ~IPCORK_OPT;",
          "1233:  kfree(inet->cork.opt);",
          "1234:  inet->cork.opt = NULL;",
          "1235:  dst_release(inet->cork.dst);",
          "1236:  inet->cork.dst = NULL;",
          "1243: int ip_push_pending_frames(struct sock *sk)",
          "1250:  struct rtable *rt = (struct rtable *)inet->cork.dst;",
          "1256:  if ((skb = __skb_dequeue(&sk->sk_write_queue)) == NULL)",
          "1263:  while ((tmp_skb = __skb_dequeue(&sk->sk_write_queue)) != NULL) {",
          "",
          "[Added Lines]",
          "1257: static void ip_cork_release(struct inet_cork *cork)",
          "1259:  cork->flags &= ~IPCORK_OPT;",
          "1260:  kfree(cork->opt);",
          "1261:  cork->opt = NULL;",
          "1262:  dst_release(cork->dst);",
          "1263:  cork->dst = NULL;",
          "1270: static int __ip_push_pending_frames(struct sock *sk,",
          "1271:         struct sk_buff_head *queue,",
          "1272:         struct inet_cork *cork)",
          "1279:  struct rtable *rt = (struct rtable *)cork->dst;",
          "1285:  if ((skb = __skb_dequeue(queue)) == NULL)",
          "1292:  while ((tmp_skb = __skb_dequeue(queue)) != NULL) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1286:       ip_dont_fragment(sk, &rt->dst)))",
          "1287:   df = htons(IP_DF);",
          "1292:  if (rt->rt_type == RTN_MULTICAST)",
          "1293:   ttl = inet->mc_ttl;",
          "",
          "[Removed Lines]",
          "1289:  if (inet->cork.flags & IPCORK_OPT)",
          "1290:   opt = inet->cork.opt;",
          "",
          "[Added Lines]",
          "1318:  if (cork->flags & IPCORK_OPT)",
          "1319:   opt = cork->opt;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1299:  iph->ihl = 5;",
          "1300:  if (opt) {",
          "1301:   iph->ihl += opt->optlen>>2;",
          "1303:  }",
          "1304:  iph->tos = inet->tos;",
          "1305:  iph->frag_off = df;",
          "",
          "[Removed Lines]",
          "1302:   ip_options_build(skb, opt, inet->cork.addr, rt, 0);",
          "",
          "[Added Lines]",
          "1331:   ip_options_build(skb, opt, cork->addr, rt, 0);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1319:  skb_dst_set(skb, &rt->dst);",
          "1321:  if (iph->protocol == IPPROTO_ICMP)",
          "",
          "[Removed Lines]",
          "1318:  inet->cork.dst = NULL;",
          "",
          "[Added Lines]",
          "1347:  cork->dst = NULL;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1332:  }",
          "1334: out:",
          "1336:  return err;",
          "1338: error:",
          "",
          "[Removed Lines]",
          "1335:  ip_cork_release(inet);",
          "",
          "[Added Lines]",
          "1364:  ip_cork_release(cork);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1340:  goto out;",
          "1341: }",
          "1347: {",
          "1348:  struct sk_buff *skb;",
          "1351:   kfree_skb(skb);",
          "1354: }",
          "",
          "[Removed Lines]",
          "1346: void ip_flush_pending_frames(struct sock *sk)",
          "1350:  while ((skb = __skb_dequeue_tail(&sk->sk_write_queue)) != NULL)",
          "1353:  ip_cork_release(inet_sk(sk));",
          "",
          "[Added Lines]",
          "1372: int ip_push_pending_frames(struct sock *sk)",
          "1373: {",
          "1374:  return __ip_push_pending_frames(sk, &sk->sk_write_queue,",
          "1375:      &inet_sk(sk)->cork);",
          "1376: }",
          "1381: static void __ip_flush_pending_frames(struct sock *sk,",
          "1382:           struct sk_buff_head *queue,",
          "1383:           struct inet_cork *cork)",
          "1387:  while ((skb = __skb_dequeue_tail(queue)) != NULL)",
          "1390:  ip_cork_release(cork);",
          "1391: }",
          "1393: void ip_flush_pending_frames(struct sock *sk)",
          "1394: {",
          "1395:  __ip_flush_pending_frames(sk, &sk->sk_write_queue, &inet_sk(sk)->cork);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6281dcc94a96bd73017b2baa8fa83925405109ef",
      "candidate_info": {
        "commit_hash": "6281dcc94a96bd73017b2baa8fa83925405109ef",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6281dcc94a96bd73017b2baa8fa83925405109ef",
        "files": [
          "include/net/flow.h",
          "include/net/route.h",
          "include/net/xfrm.h",
          "net/dccp/ipv4.c",
          "net/dccp/ipv6.c",
          "net/ipv4/icmp.c",
          "net/ipv4/inet_connection_sock.c",
          "net/ipv4/ip_output.c",
          "net/ipv4/netfilter/nf_nat_standalone.c",
          "net/ipv4/raw.c",
          "net/ipv4/syncookies.c",
          "net/ipv4/udp.c",
          "net/ipv4/xfrm4_policy.c",
          "net/ipv4/xfrm4_state.c",
          "net/ipv6/af_inet6.c",
          "net/ipv6/datagram.c",
          "net/ipv6/icmp.c",
          "net/ipv6/inet6_connection_sock.c",
          "net/ipv6/mip6.c",
          "net/ipv6/netfilter/ip6t_REJECT.c",
          "net/ipv6/raw.c",
          "net/ipv6/syncookies.c",
          "net/ipv6/tcp_ipv6.c",
          "net/ipv6/udp.c",
          "net/ipv6/xfrm6_policy.c",
          "net/ipv6/xfrm6_state.c",
          "net/sctp/protocol.c",
          "net/xfrm/xfrm_policy.c"
        ],
        "message": "net: Make flowi ports AF dependent.\n\nCreate two sets of port member accessors, one set prefixed by fl4_*\nand the other prefixed by fl6_*\n\nThis will let us to create AF optimal flow instances.\n\nIt will work because every context in which we access the ports,\nwe have to be fully aware of which AF the flowi is anyways.\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/flow.h||include/net/flow.h",
          "include/net/route.h||include/net/route.h",
          "include/net/xfrm.h||include/net/xfrm.h",
          "net/dccp/ipv4.c||net/dccp/ipv4.c",
          "net/dccp/ipv6.c||net/dccp/ipv6.c",
          "net/ipv4/icmp.c||net/ipv4/icmp.c",
          "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c",
          "net/ipv4/ip_output.c||net/ipv4/ip_output.c",
          "net/ipv4/netfilter/nf_nat_standalone.c||net/ipv4/netfilter/nf_nat_standalone.c",
          "net/ipv4/raw.c||net/ipv4/raw.c",
          "net/ipv4/syncookies.c||net/ipv4/syncookies.c",
          "net/ipv4/udp.c||net/ipv4/udp.c",
          "net/ipv4/xfrm4_policy.c||net/ipv4/xfrm4_policy.c",
          "net/ipv4/xfrm4_state.c||net/ipv4/xfrm4_state.c",
          "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c",
          "net/ipv6/datagram.c||net/ipv6/datagram.c",
          "net/ipv6/icmp.c||net/ipv6/icmp.c",
          "net/ipv6/inet6_connection_sock.c||net/ipv6/inet6_connection_sock.c",
          "net/ipv6/mip6.c||net/ipv6/mip6.c",
          "net/ipv6/netfilter/ip6t_REJECT.c||net/ipv6/netfilter/ip6t_REJECT.c",
          "net/ipv6/raw.c||net/ipv6/raw.c",
          "net/ipv6/syncookies.c||net/ipv6/syncookies.c",
          "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c",
          "net/ipv6/udp.c||net/ipv6/udp.c",
          "net/ipv6/xfrm6_policy.c||net/ipv6/xfrm6_policy.c",
          "net/ipv6/xfrm6_state.c||net/ipv6/xfrm6_state.c",
          "net/sctp/protocol.c||net/sctp/protocol.c",
          "net/xfrm/xfrm_policy.c||net/xfrm/xfrm_policy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/dccp/ipv4.c||net/dccp/ipv4.c",
            "net/dccp/ipv6.c||net/dccp/ipv6.c",
            "net/ipv4/icmp.c||net/ipv4/icmp.c",
            "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c",
            "net/ipv4/ip_output.c||net/ipv4/ip_output.c",
            "net/ipv4/raw.c||net/ipv4/raw.c",
            "net/ipv4/syncookies.c||net/ipv4/syncookies.c",
            "net/ipv4/udp.c||net/ipv4/udp.c",
            "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
          ],
          "candidate": [
            "net/dccp/ipv4.c||net/dccp/ipv4.c",
            "net/dccp/ipv6.c||net/dccp/ipv6.c",
            "net/ipv4/icmp.c||net/ipv4/icmp.c",
            "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c",
            "net/ipv4/ip_output.c||net/ipv4/ip_output.c",
            "net/ipv4/raw.c||net/ipv4/raw.c",
            "net/ipv4/syncookies.c||net/ipv4/syncookies.c",
            "net/ipv4/udp.c||net/ipv4/udp.c",
            "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/flow.h||include/net/flow.h": [
          "File: include/net/flow.h -> include/net/flow.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: #define fl4_scope flowi_scope",
          "91:  union flowi_uli uli_u;",
          "99: } __attribute__((__aligned__(BITS_PER_LONG/8)));",
          "101: #define FLOW_DIR_IN 0",
          "",
          "[Removed Lines]",
          "92: #define fl_ip_sport uli_u.ports.sport",
          "93: #define fl_ip_dport uli_u.ports.dport",
          "94: #define fl_icmp_type uli_u.icmpt.type",
          "95: #define fl_icmp_code uli_u.icmpt.code",
          "96: #define fl_ipsec_spi uli_u.spi",
          "97: #define fl_mh_type uli_u.mht.type",
          "98: #define fl_gre_key uli_u.gre_key",
          "",
          "[Added Lines]",
          "92: #define fl4_sport uli_u.ports.sport",
          "93: #define fl4_dport uli_u.ports.dport",
          "94: #define fl4_icmp_type uli_u.icmpt.type",
          "95: #define fl4_icmp_code uli_u.icmpt.code",
          "96: #define fl4_ipsec_spi uli_u.spi",
          "97: #define fl4_mh_type uli_u.mht.type",
          "98: #define fl4_gre_key uli_u.gre_key",
          "99: #define fl6_sport uli_u.ports.sport",
          "100: #define fl6_dport uli_u.ports.dport",
          "101: #define fl6_icmp_type uli_u.icmpt.type",
          "102: #define fl6_icmp_code uli_u.icmpt.code",
          "103: #define fl6_ipsec_spi uli_u.spi",
          "104: #define fl6_mh_type uli_u.mht.type",
          "105: #define fl6_gre_key uli_u.gre_key",
          "",
          "---------------"
        ],
        "include/net/route.h||include/net/route.h": [
          "File: include/net/route.h -> include/net/route.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:   .fl4_src = saddr,",
          "158:   .fl4_tos = tos,",
          "159:   .flowi_proto = proto,",
          "162:  };",
          "163:  if (sk)",
          "164:   security_sk_classify_flow(sk, &fl);",
          "",
          "[Removed Lines]",
          "160:   .fl_ip_dport = dport,",
          "161:   .fl_ip_sport = sport,",
          "",
          "[Added Lines]",
          "160:   .fl4_dport = dport,",
          "161:   .fl4_sport = sport,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:   .fl4_src = saddr,",
          "176:   .fl4_tos = tos,",
          "177:   .flowi_proto = IPPROTO_GRE,",
          "179:  };",
          "180:  return ip_route_output_key(net, &fl);",
          "181: }",
          "",
          "[Removed Lines]",
          "178:   .fl_gre_key = gre_key,",
          "",
          "[Added Lines]",
          "178:   .fl4_gre_key = gre_key,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "228:            __be16 sport, __be16 dport,",
          "229:            struct sock *sk, bool can_sleep)",
          "230: {",
          "239:  struct net *net = sock_net(sk);",
          "240:  struct rtable *rt;",
          "",
          "[Removed Lines]",
          "231:  struct flowi fl = { .flowi_oif = oif,",
          "232:        .flowi_mark = sk->sk_mark,",
          "233:        .fl4_dst = dst,",
          "234:        .fl4_src = src,",
          "235:        .fl4_tos = tos,",
          "236:        .flowi_proto = protocol,",
          "237:        .fl_ip_sport = sport,",
          "238:        .fl_ip_dport = dport };",
          "",
          "[Added Lines]",
          "231:  struct flowi fl = {",
          "232:   .flowi_oif = oif,",
          "233:   .flowi_mark = sk->sk_mark,",
          "234:   .fl4_dst = dst,",
          "235:   .fl4_src = src,",
          "236:   .fl4_tos = tos,",
          "237:   .flowi_proto = protocol,",
          "238:   .fl4_sport = sport,",
          "239:   .fl4_dport = dport,",
          "240:  };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:             __be16 dport, struct sock *sk)",
          "265: {",
          "266:  if (sport != orig_sport || dport != orig_dport) {",
          "276:   if (inet_sk(sk)->transparent)",
          "277:    fl.flowi_flags |= FLOWI_FLAG_ANYSRC;",
          "278:   if (protocol == IPPROTO_TCP)",
          "",
          "[Removed Lines]",
          "267:   struct flowi fl = { .flowi_oif = rt->rt_oif,",
          "268:         .flowi_mark = rt->rt_mark,",
          "269:         .fl4_dst = rt->rt_key_dst,",
          "270:         .fl4_src = rt->rt_key_src,",
          "271:         .fl4_tos = rt->rt_tos,",
          "272:         .flowi_proto = protocol,",
          "273:         .fl_ip_sport = sport,",
          "274:         .fl_ip_dport = dport };",
          "",
          "[Added Lines]",
          "269:   struct flowi fl = {",
          "270:    .flowi_oif = rt->rt_oif,",
          "271:    .flowi_mark = rt->rt_mark,",
          "272:    .fl4_dst = rt->rt_key_dst,",
          "273:    .fl4_src = rt->rt_key_src,",
          "274:    .fl4_tos = rt->rt_tos,",
          "275:    .flowi_proto = protocol,",
          "276:    .fl4_sport = sport,",
          "277:    .fl4_dport = dport",
          "278:   };",
          "",
          "---------------"
        ],
        "include/net/xfrm.h||include/net/xfrm.h": [
          "File: include/net/xfrm.h -> include/net/xfrm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "800: }",
          "802: static __inline__",
          "804: {",
          "805:  __be16 port;",
          "806:  switch(fl->flowi_proto) {",
          "",
          "[Removed Lines]",
          "803: __be16 xfrm_flowi_sport(const struct flowi *fl)",
          "",
          "[Added Lines]",
          "803: __be16 xfrm_flowi_sport(const struct flowi *fl, const union flowi_uli *uli)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808:  case IPPROTO_UDP:",
          "809:  case IPPROTO_UDPLITE:",
          "810:  case IPPROTO_SCTP:",
          "812:   break;",
          "813:  case IPPROTO_ICMP:",
          "814:  case IPPROTO_ICMPV6:",
          "816:   break;",
          "817:  case IPPROTO_MH:",
          "819:   break;",
          "820:  case IPPROTO_GRE:",
          "822:   break;",
          "823:  default:",
          "",
          "[Removed Lines]",
          "811:   port = fl->fl_ip_sport;",
          "815:   port = htons(fl->fl_icmp_type);",
          "818:   port = htons(fl->fl_mh_type);",
          "821:   port = htons(ntohl(fl->fl_gre_key) >> 16);",
          "",
          "[Added Lines]",
          "811:   port = uli->ports.sport;",
          "815:   port = htons(uli->icmpt.type);",
          "818:   port = htons(uli->mht.type);",
          "821:   port = htons(ntohl(uli->gre_key) >> 16);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "827: }",
          "829: static __inline__",
          "831: {",
          "832:  __be16 port;",
          "833:  switch(fl->flowi_proto) {",
          "",
          "[Removed Lines]",
          "830: __be16 xfrm_flowi_dport(const struct flowi *fl)",
          "",
          "[Added Lines]",
          "830: __be16 xfrm_flowi_dport(const struct flowi *fl, const union flowi_uli *uli)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "835:  case IPPROTO_UDP:",
          "836:  case IPPROTO_UDPLITE:",
          "837:  case IPPROTO_SCTP:",
          "839:   break;",
          "840:  case IPPROTO_ICMP:",
          "841:  case IPPROTO_ICMPV6:",
          "843:   break;",
          "844:  case IPPROTO_GRE:",
          "846:   break;",
          "847:  default:",
          "",
          "[Removed Lines]",
          "838:   port = fl->fl_ip_dport;",
          "842:   port = htons(fl->fl_icmp_code);",
          "845:   port = htons(ntohl(fl->fl_gre_key) & 0xffff);",
          "",
          "[Added Lines]",
          "838:   port = uli->ports.dport;",
          "842:   port = htons(uli->icmpt.code);",
          "845:   port = htons(ntohl(uli->gre_key) & 0xffff);",
          "",
          "---------------"
        ],
        "net/dccp/ipv4.c||net/dccp/ipv4.c": [
          "File: net/dccp/ipv4.c -> net/dccp/ipv4.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:   .fl4_src = ip_hdr(skb)->daddr,",
          "472:   .fl4_tos = RT_CONN_FLAGS(sk),",
          "473:   .flowi_proto = sk->sk_protocol,",
          "476:  };",
          "478:  security_skb_classify_flow(skb, &fl);",
          "",
          "[Removed Lines]",
          "474:   .fl_ip_sport = dccp_hdr(skb)->dccph_dport,",
          "475:   .fl_ip_dport = dccp_hdr(skb)->dccph_sport,",
          "",
          "[Added Lines]",
          "474:   .fl4_sport = dccp_hdr(skb)->dccph_dport,",
          "475:   .fl4_dport = dccp_hdr(skb)->dccph_sport,",
          "",
          "---------------"
        ],
        "net/dccp/ipv6.c||net/dccp/ipv6.c": [
          "File: net/dccp/ipv6.c -> net/dccp/ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:    ipv6_addr_copy(&fl.fl6_dst, &np->daddr);",
          "159:    ipv6_addr_copy(&fl.fl6_src, &np->saddr);",
          "160:    fl.flowi_oif = sk->sk_bound_dev_if;",
          "163:    security_sk_classify_flow(sk, &fl);",
          "165:    dst = ip6_dst_lookup_flow(sk, &fl, NULL, false);",
          "",
          "[Removed Lines]",
          "161:    fl.fl_ip_dport = inet->inet_dport;",
          "162:    fl.fl_ip_sport = inet->inet_sport;",
          "",
          "[Added Lines]",
          "161:    fl.fl6_dport = inet->inet_dport;",
          "162:    fl.fl6_sport = inet->inet_sport;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "253:  ipv6_addr_copy(&fl.fl6_src, &ireq6->loc_addr);",
          "254:  fl.fl6_flowlabel = 0;",
          "255:  fl.flowi_oif = ireq6->iif;",
          "258:  security_req_classify_flow(req, &fl);",
          "260:  opt = np->opt;",
          "",
          "[Removed Lines]",
          "256:  fl.fl_ip_dport = inet_rsk(req)->rmt_port;",
          "257:  fl.fl_ip_sport = inet_rsk(req)->loc_port;",
          "",
          "[Added Lines]",
          "256:  fl.fl6_dport = inet_rsk(req)->rmt_port;",
          "257:  fl.fl6_sport = inet_rsk(req)->loc_port;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "324:  fl.flowi_proto = IPPROTO_DCCP;",
          "325:  fl.flowi_oif = inet6_iif(rxskb);",
          "328:  security_skb_classify_flow(rxskb, &fl);",
          "",
          "[Removed Lines]",
          "326:  fl.fl_ip_dport = dccp_hdr(skb)->dccph_dport;",
          "327:  fl.fl_ip_sport = dccp_hdr(skb)->dccph_sport;",
          "",
          "[Added Lines]",
          "326:  fl.fl6_dport = dccp_hdr(skb)->dccph_dport;",
          "327:  fl.fl6_sport = dccp_hdr(skb)->dccph_sport;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "535:   final_p = fl6_update_dst(&fl, opt, &final);",
          "536:   ipv6_addr_copy(&fl.fl6_src, &ireq6->loc_addr);",
          "537:   fl.flowi_oif = sk->sk_bound_dev_if;",
          "540:   security_sk_classify_flow(sk, &fl);",
          "542:   dst = ip6_dst_lookup_flow(sk, &fl, final_p, false);",
          "",
          "[Removed Lines]",
          "538:   fl.fl_ip_dport = inet_rsk(req)->rmt_port;",
          "539:   fl.fl_ip_sport = inet_rsk(req)->loc_port;",
          "",
          "[Added Lines]",
          "538:   fl.fl6_dport = inet_rsk(req)->rmt_port;",
          "539:   fl.fl6_sport = inet_rsk(req)->loc_port;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "957:  ipv6_addr_copy(&fl.fl6_dst, &np->daddr);",
          "958:  ipv6_addr_copy(&fl.fl6_src, saddr ? saddr : &np->saddr);",
          "959:  fl.flowi_oif = sk->sk_bound_dev_if;",
          "962:  security_sk_classify_flow(sk, &fl);",
          "964:  final_p = fl6_update_dst(&fl, np->opt, &final);",
          "",
          "[Removed Lines]",
          "960:  fl.fl_ip_dport = usin->sin6_port;",
          "961:  fl.fl_ip_sport = inet->inet_sport;",
          "",
          "[Added Lines]",
          "960:  fl.fl6_dport = usin->sin6_port;",
          "961:  fl.fl6_sport = inet->inet_sport;",
          "",
          "---------------"
        ],
        "net/ipv4/icmp.c||net/ipv4/icmp.c": [
          "File: net/ipv4/icmp.c -> net/ipv4/icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:   .fl4_src = saddr,",
          "385:   .fl4_tos = RT_TOS(tos),",
          "386:   .flowi_proto = IPPROTO_ICMP,",
          "389:  };",
          "390:  struct rtable *rt, *rt2;",
          "391:  int err;",
          "",
          "[Removed Lines]",
          "387:   .fl_icmp_type = type,",
          "388:   .fl_icmp_code = code,",
          "",
          "[Added Lines]",
          "387:   .fl4_icmp_type = type,",
          "388:   .fl4_icmp_code = code,",
          "",
          "---------------"
        ],
        "net/ipv4/inet_connection_sock.c||net/ipv4/inet_connection_sock.c": [
          "File: net/ipv4/inet_connection_sock.c -> net/ipv4/inet_connection_sock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:   .fl4_tos = RT_CONN_FLAGS(sk),",
          "366:   .flowi_proto = sk->sk_protocol,",
          "367:   .flowi_flags = inet_sk_flowi_flags(sk),",
          "370:  };",
          "371:  struct net *net = sock_net(sk);",
          "",
          "[Removed Lines]",
          "368:   .fl_ip_sport = inet_sk(sk)->inet_sport,",
          "369:   .fl_ip_dport = ireq->rmt_port,",
          "",
          "[Added Lines]",
          "368:   .fl4_sport = inet_sk(sk)->inet_sport,",
          "369:   .fl4_dport = ireq->rmt_port,",
          "",
          "---------------"
        ],
        "net/ipv4/ip_output.c||net/ipv4/ip_output.c": [
          "File: net/ipv4/ip_output.c -> net/ipv4/ip_output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1479:    .fl4_dst = daddr,",
          "1480:    .fl4_src = rt->rt_spec_dst,",
          "1481:    .fl4_tos = RT_TOS(ip_hdr(skb)->tos),",
          "1484:    .flowi_proto = sk->sk_protocol,",
          "1485:    .flowi_flags = ip_reply_arg_flowi_flags(arg),",
          "1486:   };",
          "",
          "[Removed Lines]",
          "1482:    .fl_ip_sport = tcp_hdr(skb)->dest,",
          "1483:    .fl_ip_dport = tcp_hdr(skb)->source,",
          "",
          "[Added Lines]",
          "1482:    .fl4_sport = tcp_hdr(skb)->dest,",
          "1483:    .fl4_dport = tcp_hdr(skb)->source,",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/nf_nat_standalone.c||net/ipv4/netfilter/nf_nat_standalone.c": [
          "File: net/ipv4/netfilter/nf_nat_standalone.c -> net/ipv4/netfilter/nf_nat_standalone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:       t->dst.protonum == IPPROTO_UDPLITE ||",
          "56:       t->dst.protonum == IPPROTO_DCCP ||",
          "57:       t->dst.protonum == IPPROTO_SCTP)",
          "59:  }",
          "61:  statusbit ^= IPS_NAT_MASK;",
          "",
          "[Removed Lines]",
          "58:    fl->fl_ip_dport = t->dst.u.tcp.port;",
          "",
          "[Added Lines]",
          "58:    fl->fl4_dport = t->dst.u.tcp.port;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:       t->dst.protonum == IPPROTO_UDPLITE ||",
          "68:       t->dst.protonum == IPPROTO_DCCP ||",
          "69:       t->dst.protonum == IPPROTO_SCTP)",
          "71:  }",
          "72: }",
          "73: #endif",
          "",
          "[Removed Lines]",
          "70:    fl->fl_ip_sport = t->src.u.tcp.port;",
          "",
          "[Added Lines]",
          "70:    fl->fl4_sport = t->src.u.tcp.port;",
          "",
          "---------------"
        ],
        "net/ipv4/raw.c||net/ipv4/raw.c": [
          "File: net/ipv4/raw.c -> net/ipv4/raw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     code = iov->iov_base;",
          "435:    if (type && code) {",
          "438:      return -EFAULT;",
          "439:     probed = 1;",
          "440:    }",
          "",
          "[Removed Lines]",
          "436:     if (get_user(fl->fl_icmp_type, type) ||",
          "437:         get_user(fl->fl_icmp_code, code))",
          "",
          "[Added Lines]",
          "436:     if (get_user(fl->fl4_icmp_type, type) ||",
          "437:         get_user(fl->fl4_icmp_code, code))",
          "",
          "---------------"
        ],
        "net/ipv4/syncookies.c||net/ipv4/syncookies.c": [
          "File: net/ipv4/syncookies.c -> net/ipv4/syncookies.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "353:    .fl4_tos = RT_CONN_FLAGS(sk),",
          "354:    .flowi_proto = IPPROTO_TCP,",
          "355:    .flowi_flags = inet_sk_flowi_flags(sk),",
          "358:   };",
          "359:   security_req_classify_flow(req, &fl);",
          "360:   rt = ip_route_output_key(sock_net(sk), &fl);",
          "",
          "[Removed Lines]",
          "356:    .fl_ip_sport = th->dest,",
          "357:    .fl_ip_dport = th->source,",
          "",
          "[Added Lines]",
          "356:    .fl4_sport = th->dest,",
          "357:    .fl4_dport = th->source,",
          "",
          "---------------"
        ],
        "net/ipv4/udp.c||net/ipv4/udp.c": [
          "File: net/ipv4/udp.c -> net/ipv4/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:  if (!skb)",
          "779:   goto out;",
          "783: out:",
          "784:  up->len = 0;",
          "",
          "[Removed Lines]",
          "781:  err = udp_send_skb(skb, fl->fl4_dst, fl->fl_ip_dport);",
          "",
          "[Added Lines]",
          "781:  err = udp_send_skb(skb, fl->fl4_dst, fl->fl4_dport);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "917:    .flowi_proto = sk->sk_protocol,",
          "918:    .flowi_flags = (inet_sk_flowi_flags(sk) |",
          "919:          FLOWI_FLAG_CAN_SLEEP),",
          "922:   };",
          "923:   struct net *net = sock_net(sk);",
          "",
          "[Removed Lines]",
          "920:    .fl_ip_sport = inet->inet_sport,",
          "921:    .fl_ip_dport = dport,",
          "",
          "[Added Lines]",
          "920:    .fl4_sport = inet->inet_sport,",
          "921:    .fl4_dport = dport,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "975:  inet->cork.fl.fl4_dst = daddr;",
          "977:  inet->cork.fl.fl4_src = saddr;",
          "979:  up->pending = AF_INET;",
          "981: do_append_data:",
          "",
          "[Removed Lines]",
          "976:  inet->cork.fl.fl_ip_dport = dport;",
          "978:  inet->cork.fl.fl_ip_sport = inet->inet_sport;",
          "",
          "[Added Lines]",
          "976:  inet->cork.fl.fl4_dport = dport;",
          "978:  inet->cork.fl.fl4_sport = inet->inet_sport;",
          "",
          "---------------"
        ],
        "net/ipv4/xfrm4_policy.c||net/ipv4/xfrm4_policy.c": [
          "File: net/ipv4/xfrm4_policy.c -> net/ipv4/xfrm4_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:        pskb_may_pull(skb, xprth + 4 - skb->data)) {",
          "118:     __be16 *ports = (__be16 *)xprth;",
          "122:    }",
          "123:    break;",
          "",
          "[Removed Lines]",
          "120:     fl->fl_ip_sport = ports[!!reverse];",
          "121:     fl->fl_ip_dport = ports[!reverse];",
          "",
          "[Added Lines]",
          "120:     fl->fl4_sport = ports[!!reverse];",
          "121:     fl->fl4_dport = ports[!reverse];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:    if (pskb_may_pull(skb, xprth + 2 - skb->data)) {",
          "127:     u8 *icmp = xprth;",
          "131:    }",
          "132:    break;",
          "",
          "[Removed Lines]",
          "129:     fl->fl_icmp_type = icmp[0];",
          "130:     fl->fl_icmp_code = icmp[1];",
          "",
          "[Added Lines]",
          "129:     fl->fl4_icmp_type = icmp[0];",
          "130:     fl->fl4_icmp_code = icmp[1];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:    if (pskb_may_pull(skb, xprth + 4 - skb->data)) {",
          "136:     __be32 *ehdr = (__be32 *)xprth;",
          "139:    }",
          "140:    break;",
          "",
          "[Removed Lines]",
          "138:     fl->fl_ipsec_spi = ehdr[0];",
          "",
          "[Added Lines]",
          "138:     fl->fl4_ipsec_spi = ehdr[0];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:    if (pskb_may_pull(skb, xprth + 8 - skb->data)) {",
          "144:     __be32 *ah_hdr = (__be32*)xprth;",
          "147:    }",
          "148:    break;",
          "",
          "[Removed Lines]",
          "146:     fl->fl_ipsec_spi = ah_hdr[1];",
          "",
          "[Added Lines]",
          "146:     fl->fl4_ipsec_spi = ah_hdr[1];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151:    if (pskb_may_pull(skb, xprth + 4 - skb->data)) {",
          "152:     __be16 *ipcomp_hdr = (__be16 *)xprth;",
          "155:    }",
          "156:    break;",
          "",
          "[Removed Lines]",
          "154:     fl->fl_ipsec_spi = htonl(ntohs(ipcomp_hdr[1]));",
          "",
          "[Added Lines]",
          "154:     fl->fl4_ipsec_spi = htonl(ntohs(ipcomp_hdr[1]));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "163:     if (greflags[0] & GRE_KEY) {",
          "164:      if (greflags[0] & GRE_CSUM)",
          "165:       gre_hdr++;",
          "167:     }",
          "168:    }",
          "169:    break;",
          "171:   default:",
          "173:    break;",
          "174:   }",
          "175:  }",
          "",
          "[Removed Lines]",
          "166:      fl->fl_gre_key = gre_hdr[1];",
          "172:    fl->fl_ipsec_spi = 0;",
          "",
          "[Added Lines]",
          "166:      fl->fl4_gre_key = gre_hdr[1];",
          "172:    fl->fl4_ipsec_spi = 0;",
          "",
          "---------------"
        ],
        "net/ipv4/xfrm4_state.c||net/ipv4/xfrm4_state.c": [
          "File: net/ipv4/xfrm4_state.c -> net/ipv4/xfrm4_state.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: {",
          "26:  sel->daddr.a4 = fl->fl4_dst;",
          "27:  sel->saddr.a4 = fl->fl4_src;",
          "29:  sel->dport_mask = htons(0xffff);",
          "31:  sel->sport_mask = htons(0xffff);",
          "32:  sel->family = AF_INET;",
          "33:  sel->prefixlen_d = 32;",
          "",
          "[Removed Lines]",
          "28:  sel->dport = xfrm_flowi_dport(fl);",
          "30:  sel->sport = xfrm_flowi_sport(fl);",
          "",
          "[Added Lines]",
          "28:  sel->dport = xfrm_flowi_dport(fl, &fl->uli_u);",
          "30:  sel->sport = xfrm_flowi_sport(fl, &fl->uli_u);",
          "",
          "---------------"
        ],
        "net/ipv6/af_inet6.c||net/ipv6/af_inet6.c": [
          "File: net/ipv6/af_inet6.c -> net/ipv6/af_inet6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:   fl.fl6_flowlabel = np->flow_label;",
          "662:   fl.flowi_oif = sk->sk_bound_dev_if;",
          "663:   fl.flowi_mark = sk->sk_mark;",
          "666:   security_sk_classify_flow(sk, &fl);",
          "668:   final_p = fl6_update_dst(&fl, np->opt, &final);",
          "",
          "[Removed Lines]",
          "664:   fl.fl_ip_dport = inet->inet_dport;",
          "665:   fl.fl_ip_sport = inet->inet_sport;",
          "",
          "[Added Lines]",
          "664:   fl.fl6_dport = inet->inet_dport;",
          "665:   fl.fl6_sport = inet->inet_sport;",
          "",
          "---------------"
        ],
        "net/ipv6/datagram.c||net/ipv6/datagram.c": [
          "File: net/ipv6/datagram.c -> net/ipv6/datagram.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:  ipv6_addr_copy(&fl.fl6_src, &np->saddr);",
          "152:  fl.flowi_oif = sk->sk_bound_dev_if;",
          "153:  fl.flowi_mark = sk->sk_mark;",
          "157:  if (!fl.flowi_oif && (addr_type&IPV6_ADDR_MULTICAST))",
          "158:   fl.flowi_oif = np->mcast_oif;",
          "",
          "[Removed Lines]",
          "154:  fl.fl_ip_dport = inet->inet_dport;",
          "155:  fl.fl_ip_sport = inet->inet_sport;",
          "",
          "[Added Lines]",
          "154:  fl.fl6_dport = inet->inet_dport;",
          "155:  fl.fl6_sport = inet->inet_sport;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:  serr->ee.ee_info = info;",
          "262:  serr->ee.ee_data = 0;",
          "263:  serr->addr_offset = (u8 *)&iph->daddr - skb_network_header(skb);",
          "266:  __skb_pull(skb, skb_tail_pointer(skb) - skb->data);",
          "267:  skb_reset_transport_header(skb);",
          "",
          "[Removed Lines]",
          "264:  serr->port = fl->fl_ip_dport;",
          "",
          "[Added Lines]",
          "264:  serr->port = fl->fl6_dport;",
          "",
          "---------------"
        ],
        "net/ipv6/icmp.c||net/ipv6/icmp.c": [
          "File: net/ipv6/icmp.c -> net/ipv6/icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:  if (saddr)",
          "449:   ipv6_addr_copy(&fl.fl6_src, saddr);",
          "450:  fl.flowi_oif = iif;",
          "453:  security_skb_classify_flow(skb, &fl);",
          "455:  sk = icmpv6_xmit_lock(net);",
          "",
          "[Removed Lines]",
          "451:  fl.fl_icmp_type = type;",
          "452:  fl.fl_icmp_code = code;",
          "",
          "[Added Lines]",
          "451:  fl.fl6_icmp_type = type;",
          "452:  fl.fl6_icmp_code = code;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:  if (saddr)",
          "545:   ipv6_addr_copy(&fl.fl6_src, saddr);",
          "546:  fl.flowi_oif = skb->dev->ifindex;",
          "548:  security_skb_classify_flow(skb, &fl);",
          "550:  sk = icmpv6_xmit_lock(net);",
          "",
          "[Removed Lines]",
          "547:  fl.fl_icmp_type = ICMPV6_ECHO_REPLY;",
          "",
          "[Added Lines]",
          "547:  fl.fl6_icmp_type = ICMPV6_ECHO_REPLY;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "794:  ipv6_addr_copy(&fl->fl6_src, saddr);",
          "795:  ipv6_addr_copy(&fl->fl6_dst, daddr);",
          "796:  fl->flowi_proto   = IPPROTO_ICMPV6;",
          "799:  fl->flowi_oif  = oif;",
          "800:  security_sk_classify_flow(sk, fl);",
          "801: }",
          "",
          "[Removed Lines]",
          "797:  fl->fl_icmp_type = type;",
          "798:  fl->fl_icmp_code = 0;",
          "",
          "[Added Lines]",
          "797:  fl->fl6_icmp_type = type;",
          "798:  fl->fl6_icmp_code = 0;",
          "",
          "---------------"
        ],
        "net/ipv6/inet6_connection_sock.c||net/ipv6/inet6_connection_sock.c": [
          "File: net/ipv6/inet6_connection_sock.c -> net/ipv6/inet6_connection_sock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  ipv6_addr_copy(&fl.fl6_src, &treq->loc_addr);",
          "71:  fl.flowi_oif = sk->sk_bound_dev_if;",
          "72:  fl.flowi_mark = sk->sk_mark;",
          "75:  security_req_classify_flow(req, &fl);",
          "77:  dst = ip6_dst_lookup_flow(sk, &fl, final_p, false);",
          "",
          "[Removed Lines]",
          "73:  fl.fl_ip_dport = inet_rsk(req)->rmt_port;",
          "74:  fl.fl_ip_sport = inet_rsk(req)->loc_port;",
          "",
          "[Added Lines]",
          "73:  fl.fl6_dport = inet_rsk(req)->rmt_port;",
          "74:  fl.fl6_sport = inet_rsk(req)->loc_port;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:  IP6_ECN_flow_xmit(sk, fl.fl6_flowlabel);",
          "221:  fl.flowi_oif = sk->sk_bound_dev_if;",
          "222:  fl.flowi_mark = sk->sk_mark;",
          "225:  security_sk_classify_flow(sk, &fl);",
          "227:  final_p = fl6_update_dst(&fl, np->opt, &final);",
          "",
          "[Removed Lines]",
          "223:  fl.fl_ip_sport = inet->inet_sport;",
          "224:  fl.fl_ip_dport = inet->inet_dport;",
          "",
          "[Added Lines]",
          "223:  fl.fl6_sport = inet->inet_sport;",
          "224:  fl.fl6_dport = inet->inet_dport;",
          "",
          "---------------"
        ],
        "net/ipv6/mip6.c||net/ipv6/mip6.c": [
          "File: net/ipv6/mip6.c -> net/ipv6/mip6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:  int err = 0;",
          "217:  if (unlikely(fl->flowi_proto == IPPROTO_MH &&",
          "219:   goto out;",
          "221:  if (likely(opt->dsthao)) {",
          "",
          "[Removed Lines]",
          "218:        fl->fl_mh_type <= IP6_MH_TYPE_MAX))",
          "",
          "[Added Lines]",
          "218:        fl->fl6_mh_type <= IP6_MH_TYPE_MAX))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:  sel.prefixlen_s = 128;",
          "242:  sel.family = AF_INET6;",
          "243:  sel.proto = fl->flowi_proto;",
          "245:  if (sel.dport)",
          "246:   sel.dport_mask = htons(~0);",
          "248:  if (sel.sport)",
          "249:   sel.sport_mask = htons(~0);",
          "250:  sel.ifindex = fl->flowi_oif;",
          "",
          "[Removed Lines]",
          "244:  sel.dport = xfrm_flowi_dport(fl);",
          "247:  sel.sport = xfrm_flowi_sport(fl);",
          "",
          "[Added Lines]",
          "244:  sel.dport = xfrm_flowi_dport(fl, &fl->uli_u);",
          "247:  sel.sport = xfrm_flowi_sport(fl, &fl->uli_u);",
          "",
          "---------------"
        ],
        "net/ipv6/netfilter/ip6t_REJECT.c||net/ipv6/netfilter/ip6t_REJECT.c": [
          "File: net/ipv6/netfilter/ip6t_REJECT.c -> net/ipv6/netfilter/ip6t_REJECT.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:  fl.flowi_proto = IPPROTO_TCP;",
          "94:  ipv6_addr_copy(&fl.fl6_src, &oip6h->daddr);",
          "95:  ipv6_addr_copy(&fl.fl6_dst, &oip6h->saddr);",
          "98:  security_skb_classify_flow(oldskb, &fl);",
          "99:  dst = ip6_route_output(net, NULL, &fl);",
          "100:  if (dst == NULL || dst->error) {",
          "",
          "[Removed Lines]",
          "96:  fl.fl_ip_sport = otcph.dest;",
          "97:  fl.fl_ip_dport = otcph.source;",
          "",
          "[Added Lines]",
          "96:  fl.fl6_sport = otcph.dest;",
          "97:  fl.fl6_dport = otcph.source;",
          "",
          "---------------"
        ],
        "net/ipv6/raw.c||net/ipv6/raw.c": [
          "File: net/ipv6/raw.c -> net/ipv6/raw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:     code = iov->iov_base;",
          "696:    if (type && code) {",
          "699:      return -EFAULT;",
          "700:     probed = 1;",
          "701:    }",
          "",
          "[Removed Lines]",
          "697:     if (get_user(fl->fl_icmp_type, type) ||",
          "698:         get_user(fl->fl_icmp_code, code))",
          "",
          "[Added Lines]",
          "697:     if (get_user(fl->fl6_icmp_type, type) ||",
          "698:         get_user(fl->fl6_icmp_code, code))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "707:    if (iov->iov_len > 2 - len) {",
          "708:     u8 __user *p = iov->iov_base;",
          "710:      return -EFAULT;",
          "711:     probed = 1;",
          "712:    } else",
          "",
          "[Removed Lines]",
          "709:     if (get_user(fl->fl_mh_type, &p[2 - len]))",
          "",
          "[Added Lines]",
          "709:     if (get_user(fl->fl6_mh_type, &p[2 - len]))",
          "",
          "---------------"
        ],
        "net/ipv6/syncookies.c||net/ipv6/syncookies.c": [
          "File: net/ipv6/syncookies.c -> net/ipv6/syncookies.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:   ipv6_addr_copy(&fl.fl6_src, &ireq6->loc_addr);",
          "241:   fl.flowi_oif = sk->sk_bound_dev_if;",
          "242:   fl.flowi_mark = sk->sk_mark;",
          "245:   security_req_classify_flow(req, &fl);",
          "247:   dst = ip6_dst_lookup_flow(sk, &fl, final_p, false);",
          "",
          "[Removed Lines]",
          "243:   fl.fl_ip_dport = inet_rsk(req)->rmt_port;",
          "244:   fl.fl_ip_sport = inet_sk(sk)->inet_sport;",
          "",
          "[Added Lines]",
          "243:   fl.fl6_dport = inet_rsk(req)->rmt_port;",
          "244:   fl.fl6_sport = inet_sk(sk)->inet_sport;",
          "",
          "---------------"
        ],
        "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
          "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:          (saddr ? saddr : &np->saddr));",
          "249:  fl.flowi_oif = sk->sk_bound_dev_if;",
          "250:  fl.flowi_mark = sk->sk_mark;",
          "254:  final_p = fl6_update_dst(&fl, np->opt, &final);",
          "",
          "[Removed Lines]",
          "251:  fl.fl_ip_dport = usin->sin6_port;",
          "252:  fl.fl_ip_sport = inet->inet_sport;",
          "",
          "[Added Lines]",
          "251:  fl.fl6_dport = usin->sin6_port;",
          "252:  fl.fl6_sport = inet->inet_sport;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "401:    ipv6_addr_copy(&fl.fl6_src, &np->saddr);",
          "402:    fl.flowi_oif = sk->sk_bound_dev_if;",
          "403:    fl.flowi_mark = sk->sk_mark;",
          "406:    security_skb_classify_flow(skb, &fl);",
          "408:    dst = ip6_dst_lookup_flow(sk, &fl, NULL, false);",
          "",
          "[Removed Lines]",
          "404:    fl.fl_ip_dport = inet->inet_dport;",
          "405:    fl.fl_ip_sport = inet->inet_sport;",
          "",
          "[Added Lines]",
          "404:    fl.fl6_dport = inet->inet_dport;",
          "405:    fl.fl6_sport = inet->inet_sport;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "493:  fl.fl6_flowlabel = 0;",
          "494:  fl.flowi_oif = treq->iif;",
          "495:  fl.flowi_mark = sk->sk_mark;",
          "498:  security_req_classify_flow(req, &fl);",
          "500:  opt = np->opt;",
          "",
          "[Removed Lines]",
          "496:  fl.fl_ip_dport = inet_rsk(req)->rmt_port;",
          "497:  fl.fl_ip_sport = inet_rsk(req)->loc_port;",
          "",
          "[Added Lines]",
          "496:  fl.fl6_dport = inet_rsk(req)->rmt_port;",
          "497:  fl.fl6_sport = inet_rsk(req)->loc_port;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1058:  fl.flowi_proto = IPPROTO_TCP;",
          "1059:  fl.flowi_oif = inet6_iif(skb);",
          "1062:  security_skb_classify_flow(skb, &fl);",
          "",
          "[Removed Lines]",
          "1060:  fl.fl_ip_dport = t1->dest;",
          "1061:  fl.fl_ip_sport = t1->source;",
          "",
          "[Added Lines]",
          "1060:  fl.fl6_dport = t1->dest;",
          "1061:  fl.fl6_sport = t1->source;",
          "",
          "---------------"
        ],
        "net/ipv6/udp.c||net/ipv6/udp.c": [
          "File: net/ipv6/udp.c -> net/ipv6/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:  uh = udp_hdr(skb);",
          "904:  uh->len = htons(up->len);",
          "905:  uh->check = 0;",
          "",
          "[Removed Lines]",
          "902:  uh->source = fl->fl_ip_sport;",
          "903:  uh->dest = fl->fl_ip_dport;",
          "",
          "[Added Lines]",
          "902:  uh->source = fl->fl6_sport;",
          "903:  uh->dest = fl->fl6_dport;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1036:   if (sin6->sin6_port == 0)",
          "1037:    return -EINVAL;",
          "1040:   daddr = &sin6->sin6_addr;",
          "1042:   if (np->sndflow) {",
          "",
          "[Removed Lines]",
          "1039:   fl.fl_ip_dport = sin6->sin6_port;",
          "",
          "[Added Lines]",
          "1039:   fl.fl6_dport = sin6->sin6_port;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1065:   if (sk->sk_state != TCP_ESTABLISHED)",
          "1066:    return -EDESTADDRREQ;",
          "1069:   daddr = &np->daddr;",
          "1070:   fl.fl6_flowlabel = np->flow_label;",
          "1071:   connected = 1;",
          "",
          "[Removed Lines]",
          "1068:   fl.fl_ip_dport = inet->inet_dport;",
          "",
          "[Added Lines]",
          "1068:   fl.fl6_dport = inet->inet_dport;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1113:  if (ipv6_addr_any(&fl.fl6_src) && !ipv6_addr_any(&np->saddr))",
          "1114:   ipv6_addr_copy(&fl.fl6_src, &np->saddr);",
          "1117:  final_p = fl6_update_dst(&fl, opt, &final);",
          "1118:  if (final_p)",
          "",
          "[Removed Lines]",
          "1115:  fl.fl_ip_sport = inet->inet_sport;",
          "",
          "[Added Lines]",
          "1115:  fl.fl6_sport = inet->inet_sport;",
          "",
          "---------------"
        ],
        "net/ipv6/xfrm6_policy.c||net/ipv6/xfrm6_policy.c": [
          "File: net/ipv6/xfrm6_policy.c -> net/ipv6/xfrm6_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         pskb_may_pull(skb, nh + offset + 4 - skb->data))) {",
          "159:     __be16 *ports = (__be16 *)exthdr;",
          "163:    }",
          "164:    fl->flowi_proto = nexthdr;",
          "165:    return;",
          "",
          "[Removed Lines]",
          "161:     fl->fl_ip_sport = ports[!!reverse];",
          "162:     fl->fl_ip_dport = ports[!reverse];",
          "",
          "[Added Lines]",
          "161:     fl->fl6_sport = ports[!!reverse];",
          "162:     fl->fl6_dport = ports[!reverse];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:    if (!onlyproto && pskb_may_pull(skb, nh + offset + 2 - skb->data)) {",
          "169:     u8 *icmp = (u8 *)exthdr;",
          "173:    }",
          "174:    fl->flowi_proto = nexthdr;",
          "175:    return;",
          "",
          "[Removed Lines]",
          "171:     fl->fl_icmp_type = icmp[0];",
          "172:     fl->fl_icmp_code = icmp[1];",
          "",
          "[Added Lines]",
          "171:     fl->fl6_icmp_type = icmp[0];",
          "172:     fl->fl6_icmp_code = icmp[1];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:     struct ip6_mh *mh;",
          "181:     mh = (struct ip6_mh *)exthdr;",
          "184:    }",
          "185:    fl->flowi_proto = nexthdr;",
          "186:    return;",
          "",
          "[Removed Lines]",
          "183:     fl->fl_mh_type = mh->ip6mh_type;",
          "",
          "[Added Lines]",
          "183:     fl->fl6_mh_type = mh->ip6mh_type;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   case IPPROTO_ESP:",
          "192:   case IPPROTO_COMP:",
          "193:   default:",
          "195:    fl->flowi_proto = nexthdr;",
          "196:    return;",
          "197:   }",
          "",
          "[Removed Lines]",
          "194:    fl->fl_ipsec_spi = 0;",
          "",
          "[Added Lines]",
          "194:    fl->fl6_ipsec_spi = 0;",
          "",
          "---------------"
        ],
        "net/ipv6/xfrm6_state.c||net/ipv6/xfrm6_state.c": [
          "File: net/ipv6/xfrm6_state.c -> net/ipv6/xfrm6_state.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  ipv6_addr_copy((struct in6_addr *)&sel->daddr, &fl->fl6_dst);",
          "28:  ipv6_addr_copy((struct in6_addr *)&sel->saddr, &fl->fl6_src);",
          "30:  sel->dport_mask = htons(0xffff);",
          "32:  sel->sport_mask = htons(0xffff);",
          "33:  sel->family = AF_INET6;",
          "34:  sel->prefixlen_d = 128;",
          "",
          "[Removed Lines]",
          "29:  sel->dport = xfrm_flowi_dport(fl);",
          "31:  sel->sport = xfrm_flowi_sport(fl);",
          "",
          "[Added Lines]",
          "29:  sel->dport = xfrm_flowi_dport(fl, &fl->uli_u);",
          "31:  sel->sport = xfrm_flowi_sport(fl, &fl->uli_u);",
          "",
          "---------------"
        ],
        "net/sctp/protocol.c||net/sctp/protocol.c": [
          "File: net/sctp/protocol.c -> net/sctp/protocol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:  memset(&fl, 0x0, sizeof(struct flowi));",
          "478:  fl.fl4_dst  = daddr->v4.sin_addr.s_addr;",
          "480:  fl.flowi_proto = IPPROTO_SCTP;",
          "481:  if (asoc) {",
          "482:   fl.fl4_tos = RT_CONN_FLAGS(asoc->base.sk);",
          "483:   fl.flowi_oif = asoc->base.sk->sk_bound_dev_if;",
          "485:  }",
          "486:  if (saddr) {",
          "487:   fl.fl4_src = saddr->v4.sin_addr.s_addr;",
          "489:  }",
          "491:  SCTP_DEBUG_PRINTK(\"%s: DST:%pI4, SRC:%pI4 - \",",
          "",
          "[Removed Lines]",
          "479:  fl.fl_ip_dport = daddr->v4.sin_port;",
          "484:   fl.fl_ip_sport = htons(asoc->base.bind_addr.port);",
          "488:   fl.fl_ip_sport = saddr->v4.sin_port;",
          "",
          "[Added Lines]",
          "479:  fl.fl4_dport = daddr->v4.sin_port;",
          "484:   fl.fl4_sport = htons(asoc->base.bind_addr.port);",
          "488:   fl.fl4_sport = saddr->v4.sin_port;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:   if ((laddr->state == SCTP_ADDR_SRC) &&",
          "535:       (AF_INET == laddr->a.sa.sa_family)) {",
          "536:    fl.fl4_src = laddr->a.v4.sin_addr.s_addr;",
          "538:    rt = ip_route_output_key(&init_net, &fl);",
          "539:    if (!IS_ERR(rt)) {",
          "540:     dst = &rt->dst;",
          "",
          "[Removed Lines]",
          "537:    fl.fl_ip_sport = laddr->a.v4.sin_port;",
          "",
          "[Added Lines]",
          "537:    fl.fl4_sport = laddr->a.v4.sin_port;",
          "",
          "---------------"
        ],
        "net/xfrm/xfrm_policy.c||net/xfrm/xfrm_policy.c": [
          "File: net/xfrm/xfrm_policy.c -> net/xfrm/xfrm_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: {",
          "62:  return  addr_match(&fl->fl4_dst, &sel->daddr, sel->prefixlen_d) &&",
          "63:   addr_match(&fl->fl4_src, &sel->saddr, sel->prefixlen_s) &&",
          "66:   (fl->flowi_proto == sel->proto || !sel->proto) &&",
          "67:   (fl->flowi_oif == sel->ifindex || !sel->ifindex);",
          "68: }",
          "",
          "[Removed Lines]",
          "64:   !((xfrm_flowi_dport(fl) ^ sel->dport) & sel->dport_mask) &&",
          "65:   !((xfrm_flowi_sport(fl) ^ sel->sport) & sel->sport_mask) &&",
          "",
          "[Added Lines]",
          "64:   !((xfrm_flowi_dport(fl, &fl->uli_u) ^ sel->dport) & sel->dport_mask) &&",
          "65:   !((xfrm_flowi_sport(fl, &fl->uli_u) ^ sel->sport) & sel->sport_mask) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: {",
          "73:  return  addr_match(&fl->fl6_dst, &sel->daddr, sel->prefixlen_d) &&",
          "74:   addr_match(&fl->fl6_src, &sel->saddr, sel->prefixlen_s) &&",
          "77:   (fl->flowi_proto == sel->proto || !sel->proto) &&",
          "78:   (fl->flowi_oif == sel->ifindex || !sel->ifindex);",
          "79: }",
          "",
          "[Removed Lines]",
          "75:   !((xfrm_flowi_dport(fl) ^ sel->dport) & sel->dport_mask) &&",
          "76:   !((xfrm_flowi_sport(fl) ^ sel->sport) & sel->sport_mask) &&",
          "",
          "[Added Lines]",
          "75:   !((xfrm_flowi_dport(fl, &fl->uli_u) ^ sel->dport) & sel->dport_mask) &&",
          "76:   !((xfrm_flowi_sport(fl, &fl->uli_u) ^ sel->sport) & sel->sport_mask) &&",
          "",
          "---------------"
        ]
      }
    }
  ]
}