{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df241318813985a220dc9eae24a42e81dd001b38",
      "candidate_info": {
        "commit_hash": "df241318813985a220dc9eae24a42e81dd001b38",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/df241318813985a220dc9eae24a42e81dd001b38",
        "files": [
          "arch/ARM/ARMDisassembler.c"
        ],
        "message": "arm: fix decoding Thumb big-endian instructions. ported from PR #813",
        "before_after_code_files": [
          "arch/ARM/ARMDisassembler.c||arch/ARM/ARMDisassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMDisassembler.c||arch/ARM/ARMDisassembler.c": [
          "File: arch/ARM/ARMDisassembler.c -> arch/ARM/ARMDisassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "777:   return MCDisassembler_Fail;",
          "779:  if (ud->big_endian)",
          "784:  else",
          "785:   insn32 = (code[3] <<  8) |",
          "786:    (code[2] <<  0) |",
          "",
          "[Removed Lines]",
          "780:   insn32 = (code[3] <<  24) |",
          "781:    (code[2] <<  16) |",
          "782:    (code[1] << 8) |",
          "783:    (code[0] << 0);",
          "",
          "[Added Lines]",
          "780:   insn32 = (code[3] <<  0) |",
          "781:    (code[2] <<  8) |",
          "782:    (code[1] << 16) |",
          "783:    (code[0] << 24);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b5f404d751d72a2e1cfe82e04fca0a3732bad30",
      "candidate_info": {
        "commit_hash": "9b5f404d751d72a2e1cfe82e04fca0a3732bad30",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/9b5f404d751d72a2e1cfe82e04fca0a3732bad30",
        "files": [
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "arm: update imm in printOperand() to fix error reported by @trufae in PR #764",
        "before_after_code_files": [
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "863:     address = (uint32_t)MI->address + 8;",
          "864:    }",
          "867:   } else {",
          "868:    switch(MI->flat_insn->id) {",
          "869:     default:",
          "",
          "[Removed Lines]",
          "866:    printUInt32Bang(O, address + imm);",
          "",
          "[Added Lines]",
          "866:    imm = address + imm;",
          "867:    printUInt32Bang(O, imm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "996db1f1a1b2cfd84349706547f27b9716a14d59",
      "candidate_info": {
        "commit_hash": "996db1f1a1b2cfd84349706547f27b9716a14d59",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/996db1f1a1b2cfd84349706547f27b9716a14d59",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: support armbe mode",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  if (cs_support(CS_ARCH_ARM)) {",
          "87:   printf(\"        arm:       arm\\n\");",
          "90:   printf(\"        thumb:     thumb mode\\n\");",
          "91:   printf(\"        thumbbe:   thumb + big endian\\n\");",
          "93:  }",
          "95:  if (cs_support(CS_ARCH_ARM64)) {",
          "",
          "[Removed Lines]",
          "88:   printf(\"        armb:      arm + big endian\\n\");",
          "89:   printf(\"        arml:      arm + little endian\\n\");",
          "92:   printf(\"        thumble:   thumb + billtle endian\\n\");",
          "",
          "[Added Lines]",
          "88:   printf(\"        armbe:     arm + big endian\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "192:  }",
          "195:   arch = CS_ARCH_ARM;",
          "196:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "197:  }",
          "",
          "[Removed Lines]",
          "194:  if (!strcmp(mode, \"armb\")) {",
          "",
          "[Added Lines]",
          "192:  if (!strcmp(mode, \"armb\") || !strcmp(mode, \"armbe\") ) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abc28b5bd37c4365ae80fd01f280b38e4ef5fd66",
      "candidate_info": {
        "commit_hash": "abc28b5bd37c4365ae80fd01f280b38e4ef5fd66",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/abc28b5bd37c4365ae80fd01f280b38e4ef5fd66",
        "files": [
          "cstool/Makefile",
          "cstool/cstool.c",
          "cstool/cstool_x86.c"
        ],
        "message": "cstool: add x86 debug information",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_x86.c||cstool/cstool_x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION \"1.0\"",
          "13: static uint8_t char_to_hexnum(char c)",
          "14: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: static void usage(char *prog)",
          "54: {",
          "55:  printf(\"Cstool v%s for Capstone Disassembler Engine (www.capstone-engine.org)\\n\\n\", VERSION);",
          "57:  printf(\"\\nThe following <arch+mode> options are supported:\\n\");",
          "59:  if (cs_support(CS_ARCH_X86)) {",
          "",
          "[Removed Lines]",
          "56:  printf(\"Syntax: %s <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "",
          "[Added Lines]",
          "58:  printf(\"Syntax: %s [-d:print all debug information] <arch+mode> <assembly-hexstring> [start-address-in-hex-format]\\n\", prog);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:  uint64_t address = 0;",
          "115:  cs_insn *insn;",
          "116:  cs_err err;",
          "120:   usage(argv[0]);",
          "121:   return -1;",
          "122:  }",
          "141:  if (!strcmp(mode, \"arm\")) {",
          "142:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "143:  }",
          "",
          "[Removed Lines]",
          "117:  bool x86_arch = false;",
          "119:  if (argc != 3 && argc != 4) {",
          "124:  mode = argv[1];",
          "125:  assembly = preprocess(argv[2], &size);",
          "126:  if (assembly == NULL) {",
          "127:   printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "128:   return -3;",
          "129:  }",
          "131:  if (argc == 4) {",
          "133:   char *temp;",
          "134:   address = strtoull(argv[3], &temp, 16);",
          "135:   if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "136:    printf(\"ERROR: invalid address argument, quit!\\n\");",
          "137:    return -2;",
          "138:   }",
          "139:  }",
          "",
          "[Added Lines]",
          "119:     cs_mode md;",
          "120:     char *platform;",
          "121:     bool x86_arch = false, debug_flag = false;",
          "123:  if (argc != 3 && argc != 4 && argc != 5) {",
          "128:     if (!strcmp(argv[1], \"-d\")) {",
          "129:         if (argc == 3) {",
          "130:             usage(argv[0]);",
          "131:             return -1;",
          "132:         }",
          "133:         debug_flag = true;",
          "134:         mode = argv[2];",
          "135:         assembly = preprocess(argv[3], &size);",
          "136:         if (argc == 5) {",
          "137:             char *temp;",
          "138:             address = strtoull(argv[4], &temp, 16);",
          "139:             if (temp == argv[4] || *temp != '\\0' || errno == ERANGE) {",
          "140:                 printf(\"ERROR: invalid address argument, quit!\\n\");",
          "141:                 return -2;",
          "142:             }",
          "143:         }",
          "144:     } else {",
          "145:         if (argc == 5) {",
          "146:             usage(argv[0]);",
          "147:             return -1;",
          "148:         }",
          "150:         mode = argv[1];",
          "151:         assembly = preprocess(argv[2], &size);",
          "152:         if (assembly == NULL) {",
          "153:             printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "154:             return -3;",
          "155:         }",
          "157:         if (argc == 4) {",
          "159:             char *temp;",
          "160:             address = strtoull(argv[3], &temp, 16);",
          "161:             if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "162:                 printf(\"ERROR: invalid address argument, quit!\\n\");",
          "163:                 return -2;",
          "164:             }",
          "165:         }",
          "166:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "188:  }",
          "190:  if (!strcmp(mode, \"x32\")) {",
          "191:   x86_arch = true;",
          "192:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "193:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:         md = CS_MODE_32;",
          "219:         platform = \"x32\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "247:   return -1;",
          "248:  }",
          "251:  if (count > 0) {",
          "252:   size_t i;",
          "",
          "[Removed Lines]",
          "250:  count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "",
          "[Added Lines]",
          "279:     if (debug_flag) {",
          "280:         cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "281:     }",
          "283:     count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "265:     }",
          "266:    }",
          "267:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "268:   }",
          "269:   cs_free(insn, count);",
          "270:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301:             if (debug_flag) {",
          "302:                 if (x86_arch) {",
          "303:                     print_insn_detail_x86(handle, md, &insn[i]);",
          "304:                 }",
          "305:             }",
          "",
          "---------------"
        ],
        "cstool/cstool_x86.c||cstool/cstool_x86.c": [
          "File: cstool/cstool_x86.c -> cstool/cstool_x86.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "7: #include <platform.h>",
          "8: #include <capstone.h>",
          "12: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "13: {",
          "14:     unsigned char *c;",
          "16:     printf(\"%s\", comment);",
          "17:     for (c = str; c < str + len; c++) {",
          "18:         printf(\"0x%02x \", *c & 0xff);",
          "19:     }",
          "21:     printf(\"\\n\");",
          "22: }",
          "24: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins)",
          "25: {",
          "26:     int count, i;",
          "27:     cs_x86 *x86;",
          "30:     if (ins->detail == NULL)",
          "31:         return;",
          "33:     x86 = &(ins->detail->x86);",
          "35:     print_string_hex(\"\\tPrefix:\", x86->prefix, 4);",
          "37:     print_string_hex(\"\\tOpcode:\", x86->opcode, 4);",
          "39:     printf(\"\\trex: 0x%x\\n\", x86->rex);",
          "41:     printf(\"\\taddr_size: %u\\n\", x86->addr_size);",
          "42:     printf(\"\\tmodrm: 0x%x\\n\", x86->modrm);",
          "43:     printf(\"\\tdisp: 0x%x\\n\", x86->disp);",
          "46:     if ((mode & CS_MODE_16) == 0) {",
          "47:         printf(\"\\tsib: 0x%x\\n\", x86->sib);",
          "48:         if (x86->sib_base != X86_REG_INVALID)",
          "49:             printf(\"\\t\\tsib_base: %s\\n\", cs_reg_name(ud, x86->sib_base));",
          "50:         if (x86->sib_index != X86_REG_INVALID)",
          "51:             printf(\"\\t\\tsib_index: %s\\n\", cs_reg_name(ud, x86->sib_index));",
          "52:         if (x86->sib_scale != 0)",
          "53:             printf(\"\\t\\tsib_scale: %d\\n\", x86->sib_scale);",
          "54:     }",
          "57:     if (x86->sse_cc != X86_SSE_CC_INVALID) {",
          "58:         printf(\"\\tsse_cc: %u\\n\", x86->sse_cc);",
          "59:     }",
          "62:     if (x86->avx_cc != X86_AVX_CC_INVALID) {",
          "63:         printf(\"\\tavx_cc: %u\\n\", x86->avx_cc);",
          "64:     }",
          "67:     if (x86->avx_sae) {",
          "68:         printf(\"\\tavx_sae: %u\\n\", x86->avx_sae);",
          "69:     }",
          "72:     if (x86->avx_rm != X86_AVX_RM_INVALID) {",
          "73:         printf(\"\\tavx_rm: %u\\n\", x86->avx_rm);",
          "74:     }",
          "76:     count = cs_op_count(ud, ins, X86_OP_IMM);",
          "77:     if (count) {",
          "78:         printf(\"\\timm_count: %u\\n\", count);",
          "79:         for (i = 1; i < count + 1; i++) {",
          "80:             int index = cs_op_index(ud, ins, X86_OP_IMM, i);",
          "81:             printf(\"\\t\\timms[%u]: 0x%\" PRIx64 \"\\n\", i, x86->operands[index].imm);",
          "82:         }",
          "83:     }",
          "85:     if (x86->op_count)",
          "86:         printf(\"\\top_count: %u\\n\", x86->op_count);",
          "87:     for (i = 0; i < x86->op_count; i++) {",
          "88:         cs_x86_op *op = &(x86->operands[i]);",
          "90:         switch((int)op->type) {",
          "91:             case X86_OP_REG:",
          "92:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(ud, op->reg));",
          "93:                 break;",
          "94:             case X86_OP_IMM:",
          "95:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "96:                 break;",
          "97:             case X86_OP_MEM:",
          "98:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "99:                 if (op->mem.segment != X86_REG_INVALID)",
          "100:                     printf(\"\\t\\t\\toperands[%u].mem.segment: REG = %s\\n\", i, cs_reg_name(ud, op->mem.segment));",
          "101:                 if (op->mem.base != X86_REG_INVALID)",
          "102:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\", i, cs_reg_name(ud, op->mem.base));",
          "103:                 if (op->mem.index != X86_REG_INVALID)",
          "104:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\", i, cs_reg_name(ud, op->mem.index));",
          "105:                 if (op->mem.scale != 1)",
          "106:                     printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "107:                 if (op->mem.disp != 0)",
          "108:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "109:                 break;",
          "110:             default:",
          "111:                 break;",
          "112:         }",
          "115:         if (op->avx_bcast != X86_AVX_BCAST_INVALID)",
          "116:             printf(\"\\t\\toperands[%u].avx_bcast: %u\\n\", i, op->avx_bcast);",
          "119:         if (op->avx_zero_opmask != false)",
          "120:             printf(\"\\t\\toperands[%u].avx_zero_opmask: TRUE\\n\", i);",
          "122:         printf(\"\\t\\toperands[%u].size: %u\\n\", i, op->size);",
          "123:     }",
          "125:     printf(\"\\n\");",
          "126: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91d42730214749bdb9670925bca183004d081089",
      "candidate_info": {
        "commit_hash": "91d42730214749bdb9670925bca183004d081089",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/91d42730214749bdb9670925bca183004d081089",
        "files": [
          "arch/Mips/MipsMapping.c"
        ],
        "message": "Add missing MIPS groups",
        "before_after_code_files": [
          "arch/Mips/MipsMapping.c||arch/Mips/MipsMapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/Mips/MipsMapping.c||arch/Mips/MipsMapping.c": [
          "File: arch/Mips/MipsMapping.c -> arch/Mips/MipsMapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "905:  { MIPS_GRP_CALL, \"call\" },",
          "906:  { MIPS_GRP_RET, \"ret\" },",
          "907:  { MIPS_GRP_INT, \"int\" },",
          "910:  { MIPS_GRP_BITCOUNT, \"bitcount\" },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908:  { MIPS_GRP_IRET, \"iret\" },",
          "909:  { MIPS_GRP_PRIVILEGE, \"privileged\" },",
          "",
          "---------------"
        ]
      }
    }
  ]
}