{
  "cve_id": "CVE-2015-6824",
  "cve_desc": "The sws_init_context function in libswscale/utils.c in FFmpeg before 2.7.2 does not initialize certain pixbuf data structures, which allows remote attackers to cause a denial of service (segmentation violation) or possibly have unspecified other impact via crafted video data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "a5d44d5c220e12ca0cb7a4eceb0f74759cb13111",
  "patch_info": {
    "commit_hash": "a5d44d5c220e12ca0cb7a4eceb0f74759cb13111",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/a5d44d5c220e12ca0cb7a4eceb0f74759cb13111",
    "files": [
      "libswscale/utils.c"
    ],
    "message": "swscale/utils: Clear pix buffers\n\nFixes use of uninitialized memory\nFixes: a96874b9466b6edc660a519c7ad47977_signal_sigsegv_7ffff713351a_744_nc_sample.avi with memlimit 2147483648\n\nFound-by: Samuel Gro\u00df, Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libswscale/utils.c||libswscale/utils.c"
    ]
  },
  "patch_diff": {
    "libswscale/utils.c||libswscale/utils.c": [
      "File: libswscale/utils.c -> libswscale/utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1502:     if (CONFIG_SWSCALE_ALPHA && isALPHA(c->srcFormat) && isALPHA(c->dstFormat))",
      "1503:         FF_ALLOCZ_OR_GOTO(c, c->alpPixBuf, c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
      "",
      "[Removed Lines]",
      "1499:     FF_ALLOC_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
      "1500:     FF_ALLOC_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
      "1501:     FF_ALLOC_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
      "",
      "[Added Lines]",
      "1499:     FF_ALLOCZ_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
      "1500:     FF_ALLOCZ_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
      "1501:     FF_ALLOCZ_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "46236b0bae230df903e9c4ebaa79d14ddd7dd303",
      "candidate_info": {
        "commit_hash": "46236b0bae230df903e9c4ebaa79d14ddd7dd303",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/46236b0bae230df903e9c4ebaa79d14ddd7dd303",
        "files": [
          "libswscale/utils.c"
        ],
        "message": "swscale/utils: Clear pix buffers\n\nFixes use of uninitialized memory\nFixes: a96874b9466b6edc660a519c7ad47977_signal_sigsegv_7ffff713351a_744_nc_sample.avi with memlimit 2147483648\n\nFound-by: Samuel Gro\u00df, Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit a5d44d5c220e12ca0cb7a4eceb0f74759cb13111)\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libswscale/utils.c||libswscale/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/utils.c||libswscale/utils.c"
          ],
          "candidate": [
            "libswscale/utils.c||libswscale/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/utils.c||libswscale/utils.c": [
          "File: libswscale/utils.c -> libswscale/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:     if (CONFIG_SWSCALE_ALPHA && isALPHA(c->srcFormat) && isALPHA(c->dstFormat))",
          "1417:         FF_ALLOCZ_OR_GOTO(c, c->alpPixBuf, c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "[Removed Lines]",
          "1413:     FF_ALLOC_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1414:     FF_ALLOC_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1415:     FF_ALLOC_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "[Added Lines]",
          "1413:     FF_ALLOCZ_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1414:     FF_ALLOCZ_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1415:     FF_ALLOCZ_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bc20fe48c5e374d92948e39a09d28332c339e0e",
      "candidate_info": {
        "commit_hash": "3bc20fe48c5e374d92948e39a09d28332c339e0e",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3bc20fe48c5e374d92948e39a09d28332c339e0e",
        "files": [
          "libswscale/utils.c"
        ],
        "message": "swscale/utils: Clear pix buffers\n\nFixes use of uninitialized memory\nFixes: a96874b9466b6edc660a519c7ad47977_signal_sigsegv_7ffff713351a_744_nc_sample.avi with memlimit 2147483648\n\nFound-by: Samuel Gro\u00df, Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit a5d44d5c220e12ca0cb7a4eceb0f74759cb13111)\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libswscale/utils.c||libswscale/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/utils.c||libswscale/utils.c"
          ],
          "candidate": [
            "libswscale/utils.c||libswscale/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/utils.c||libswscale/utils.c": [
          "File: libswscale/utils.c -> libswscale/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1427:     if (CONFIG_SWSCALE_ALPHA && isALPHA(c->srcFormat) && isALPHA(c->dstFormat))",
          "1428:         FF_ALLOCZ_OR_GOTO(c, c->alpPixBuf, c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "[Removed Lines]",
          "1424:     FF_ALLOC_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1425:     FF_ALLOC_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1426:     FF_ALLOC_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "[Added Lines]",
          "1424:     FF_ALLOCZ_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1425:     FF_ALLOCZ_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1426:     FF_ALLOCZ_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb47b6cb4b897fad03c6977b20c36a954f3f2de3",
      "candidate_info": {
        "commit_hash": "fb47b6cb4b897fad03c6977b20c36a954f3f2de3",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/fb47b6cb4b897fad03c6977b20c36a954f3f2de3",
        "files": [
          "libswscale/utils.c"
        ],
        "message": "swscale/utils: Clear pix buffers\n\nFixes use of uninitialized memory\nFixes: a96874b9466b6edc660a519c7ad47977_signal_sigsegv_7ffff713351a_744_nc_sample.avi with memlimit 2147483648\n\nFound-by: Samuel Gro\u00df, Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit a5d44d5c220e12ca0cb7a4eceb0f74759cb13111)\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libswscale/utils.c||libswscale/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/utils.c||libswscale/utils.c"
          ],
          "candidate": [
            "libswscale/utils.c||libswscale/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/utils.c||libswscale/utils.c": [
          "File: libswscale/utils.c -> libswscale/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1423:     if (CONFIG_SWSCALE_ALPHA && isALPHA(c->srcFormat) && isALPHA(c->dstFormat))",
          "1424:         FF_ALLOCZ_OR_GOTO(c, c->alpPixBuf, c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "[Removed Lines]",
          "1420:     FF_ALLOC_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1421:     FF_ALLOC_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1422:     FF_ALLOC_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "[Added Lines]",
          "1420:     FF_ALLOCZ_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1421:     FF_ALLOCZ_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1422:     FF_ALLOCZ_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cbd7b08f661163ea0f41f03752e420a47904c11",
      "candidate_info": {
        "commit_hash": "1cbd7b08f661163ea0f41f03752e420a47904c11",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/1cbd7b08f661163ea0f41f03752e420a47904c11",
        "files": [
          "libswscale/utils.c"
        ],
        "message": "swscale/utils: Clear pix buffers\n\nFixes use of uninitialized memory\nFixes: a96874b9466b6edc660a519c7ad47977_signal_sigsegv_7ffff713351a_744_nc_sample.avi with memlimit 2147483648\n\nFound-by: Samuel Gro\u00df, Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit a5d44d5c220e12ca0cb7a4eceb0f74759cb13111)\n\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libswscale/utils.c||libswscale/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/utils.c||libswscale/utils.c"
          ],
          "candidate": [
            "libswscale/utils.c||libswscale/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/utils.c||libswscale/utils.c": [
          "File: libswscale/utils.c -> libswscale/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1493:     if (CONFIG_SWSCALE_ALPHA && isALPHA(c->srcFormat) && isALPHA(c->dstFormat))",
          "1494:         FF_ALLOCZ_OR_GOTO(c, c->alpPixBuf, c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "[Removed Lines]",
          "1490:     FF_ALLOC_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1491:     FF_ALLOC_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1492:     FF_ALLOC_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "[Added Lines]",
          "1490:     FF_ALLOCZ_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1491:     FF_ALLOCZ_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1492:     FF_ALLOCZ_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6de58b49032a206985602effec91e5e46c886ea2",
      "candidate_info": {
        "commit_hash": "6de58b49032a206985602effec91e5e46c886ea2",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/6de58b49032a206985602effec91e5e46c886ea2",
        "files": [
          "libswscale/input.c",
          "libswscale/output.c",
          "libswscale/ppc/swscale_altivec.c",
          "libswscale/slice.c",
          "libswscale/swscale.c",
          "libswscale/swscale_internal.h",
          "libswscale/utils.c",
          "libswscale/vscale.c",
          "libswscale/x86/swscale.c",
          "libswscale/x86/swscale_template.c"
        ],
        "message": "swscale: cleanup unused code\n\nRemoved previous swscale code under '#ifndef NEW_FILTER'\nand removed unused fields of SwsContext",
        "before_after_code_files": [
          "libswscale/input.c||libswscale/input.c",
          "libswscale/output.c||libswscale/output.c",
          "libswscale/ppc/swscale_altivec.c||libswscale/ppc/swscale_altivec.c",
          "libswscale/slice.c||libswscale/slice.c",
          "libswscale/swscale.c||libswscale/swscale.c",
          "libswscale/swscale_internal.h||libswscale/swscale_internal.h",
          "libswscale/utils.c||libswscale/utils.c",
          "libswscale/vscale.c||libswscale/vscale.c",
          "libswscale/x86/swscale.c||libswscale/x86/swscale.c",
          "libswscale/x86/swscale_template.c||libswscale/x86/swscale_template.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libswscale/utils.c||libswscale/utils.c"
          ],
          "candidate": [
            "libswscale/utils.c||libswscale/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "libswscale/input.c||libswscale/input.c": [
          "File: libswscale/input.c -> libswscale/input.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1482:         c->lumToYV12 = p010BEToY_c;",
          "1483:         break;",
          "1484:     }",
          "1486:         if (is16BPS(srcFormat) || isNBPS(srcFormat)) {",
          "1487:             if (HAVE_BIGENDIAN == !isBE(srcFormat))",
          "1488:                 c->alpToYV12 = bswap16Y_c;",
          "",
          "[Removed Lines]",
          "1485:     if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "1485:     if (c->needAlpha) {",
          "",
          "---------------"
        ],
        "libswscale/output.c||libswscale/output.c": [
          "File: libswscale/output.c -> libswscale/output.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1513: }",
          "1515: #if CONFIG_SMALL",
          "1518: #else",
          "1519: #if CONFIG_SWSCALE_ALPHA",
          "1520: YUV2RGBWRAPPER(yuv2rgb,, a32_1,  AV_PIX_FMT_RGB32_1,   1)",
          "",
          "[Removed Lines]",
          "1516: YUV2RGBWRAPPER(yuv2rgb,,  32_1,  AV_PIX_FMT_RGB32_1,   CONFIG_SWSCALE_ALPHA && c->alpPixBuf)",
          "1517: YUV2RGBWRAPPER(yuv2rgb,,  32,    AV_PIX_FMT_RGB32,     CONFIG_SWSCALE_ALPHA && c->alpPixBuf)",
          "",
          "[Added Lines]",
          "1516: YUV2RGBWRAPPER(yuv2rgb,,  32_1,  AV_PIX_FMT_RGB32_1,   CONFIG_SWSCALE_ALPHA && c->needAlpha)",
          "1517: YUV2RGBWRAPPER(yuv2rgb,,  32,    AV_PIX_FMT_RGB32,     CONFIG_SWSCALE_ALPHA && c->needAlpha)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1823: }",
          "1825: #if CONFIG_SMALL",
          "1830: #else",
          "1831: #if CONFIG_SWSCALE_ALPHA",
          "1832: YUV2RGBWRAPPER(yuv2, rgb_full, bgra32_full, AV_PIX_FMT_BGRA,  1)",
          "",
          "[Removed Lines]",
          "1826: YUV2RGBWRAPPER(yuv2, rgb_full, bgra32_full, AV_PIX_FMT_BGRA,  CONFIG_SWSCALE_ALPHA && c->alpPixBuf)",
          "1827: YUV2RGBWRAPPER(yuv2, rgb_full, abgr32_full, AV_PIX_FMT_ABGR,  CONFIG_SWSCALE_ALPHA && c->alpPixBuf)",
          "1828: YUV2RGBWRAPPER(yuv2, rgb_full, rgba32_full, AV_PIX_FMT_RGBA,  CONFIG_SWSCALE_ALPHA && c->alpPixBuf)",
          "1829: YUV2RGBWRAPPER(yuv2, rgb_full, argb32_full, AV_PIX_FMT_ARGB,  CONFIG_SWSCALE_ALPHA && c->alpPixBuf)",
          "",
          "[Added Lines]",
          "1826: YUV2RGBWRAPPER(yuv2, rgb_full, bgra32_full, AV_PIX_FMT_BGRA,  CONFIG_SWSCALE_ALPHA && c->needAlpha)",
          "1827: YUV2RGBWRAPPER(yuv2, rgb_full, abgr32_full, AV_PIX_FMT_ABGR,  CONFIG_SWSCALE_ALPHA && c->needAlpha)",
          "1828: YUV2RGBWRAPPER(yuv2, rgb_full, rgba32_full, AV_PIX_FMT_RGBA,  CONFIG_SWSCALE_ALPHA && c->needAlpha)",
          "1829: YUV2RGBWRAPPER(yuv2, rgb_full, argb32_full, AV_PIX_FMT_ARGB,  CONFIG_SWSCALE_ALPHA && c->needAlpha)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2120: #else",
          "2121: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2122:                 if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2122:                 if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2140: #else",
          "2141: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2142:                 if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2142:                 if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2160: #else",
          "2161: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2162:                 if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2162:                 if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2180: #else",
          "2181: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2182:                 if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2182:                 if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2194:                 break;",
          "2195:         case AV_PIX_FMT_RGBA64LE:",
          "2196: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2197:             if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2197:             if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2208:             break;",
          "2209:         case AV_PIX_FMT_RGBA64BE:",
          "2210: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2211:             if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2211:             if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2222:             break;",
          "2223:         case AV_PIX_FMT_BGRA64LE:",
          "2224: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2225:             if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2225:             if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2236:             break;",
          "2237:         case AV_PIX_FMT_BGRA64BE:",
          "2238: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2239:             if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2239:             if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2321:         switch (dstFormat) {",
          "2322:         case AV_PIX_FMT_RGBA64LE:",
          "2323: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2324:             if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2324:             if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2335:             break;",
          "2336:         case AV_PIX_FMT_RGBA64BE:",
          "2337: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2338:             if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2338:             if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2349:             break;",
          "2350:         case AV_PIX_FMT_BGRA64LE:",
          "2351: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2352:             if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2352:             if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2363:             break;",
          "2364:         case AV_PIX_FMT_BGRA64BE:",
          "2365: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2366:             if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2366:             if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2404: #else",
          "2405: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2406:                 if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2406:                 if (c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2425: #else",
          "2426: #if CONFIG_SWSCALE_ALPHA",
          "",
          "[Removed Lines]",
          "2427:                 if (c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "2427:                 if (c->needAlpha) {",
          "",
          "---------------"
        ],
        "libswscale/ppc/swscale_altivec.c||libswscale/ppc/swscale_altivec.c": [
          "File: libswscale/ppc/swscale_altivec.c -> libswscale/ppc/swscale_altivec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     }",
          "340:     if (!is16BPS(dstFormat) && !is9_OR_10BPS(dstFormat) &&",
          "341:         dstFormat != AV_PIX_FMT_NV12 && dstFormat != AV_PIX_FMT_NV21 &&",
          "343:         c->yuv2planeX = yuv2planeX_altivec;",
          "344:     }",
          "349:         switch (c->dstFormat) {",
          "350:         case AV_PIX_FMT_ABGR:",
          "351:             c->yuv2packedX = ff_yuv2abgr_X_altivec;",
          "",
          "[Removed Lines]",
          "342:         !c->alpPixBuf) {",
          "348:     if (!(c->flags & (SWS_BITEXACT | SWS_FULL_CHR_H_INT)) && !c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "342:         !c->needAlpha) {",
          "348:     if (!(c->flags & (SWS_BITEXACT | SWS_FULL_CHR_H_INT)) && !c->needAlpha) {",
          "",
          "---------------"
        ],
        "libswscale/slice.c||libswscale/slice.c": [
          "File: libswscale/slice.c -> libswscale/slice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     if (need_lum_conv) {",
          "280:         res = ff_init_desc_fmt_convert(&c->desc[index], &c->slice[srcIdx], &c->slice[dstIdx], pal);",
          "281:         if (res < 0) goto cleanup;",
          "283:         ++index;",
          "284:         srcIdx = dstIdx;",
          "285:     }",
          "",
          "[Removed Lines]",
          "282:         c->desc[index].alpha = c->alpPixBuf != 0;",
          "",
          "[Added Lines]",
          "282:         c->desc[index].alpha = c->needAlpha;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:     dstIdx = FFMAX(num_ydesc, num_cdesc);",
          "289:     res = ff_init_desc_hscale(&c->desc[index], &c->slice[srcIdx], &c->slice[dstIdx], c->hLumFilter, c->hLumFilterPos, c->hLumFilterSize, c->lumXInc);",
          "290:     if (res < 0) goto cleanup;",
          "294:     ++index;",
          "",
          "[Removed Lines]",
          "291:     c->desc[index].alpha = c->alpPixBuf != 0;",
          "",
          "[Added Lines]",
          "291:     c->desc[index].alpha = c->needAlpha;",
          "",
          "---------------"
        ],
        "libswscale/swscale.c||libswscale/swscale.c": [
          "File: libswscale/swscale.c -> libswscale/swscale.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     64, 64, 64, 64, 64, 64, 64, 64",
          "53: };",
          "73: static av_always_inline void fillPlane(uint8_t *plane, int stride, int width,",
          "74:                                        int height, int y, uint8_t val)",
          "75: {",
          "",
          "[Removed Lines]",
          "55: #ifndef NEW_FILTER",
          "56: static void gamma_convert(uint8_t * src[], int width, uint16_t *gamma)",
          "57: {",
          "58:     int i;",
          "59:     uint16_t *src1 = (uint16_t*)src[0];",
          "61:     for (i = 0; i < width; ++i) {",
          "62:         uint16_t r = AV_RL16(src1 + i*4 + 0);",
          "63:         uint16_t g = AV_RL16(src1 + i*4 + 1);",
          "64:         uint16_t b = AV_RL16(src1 + i*4 + 2);",
          "66:         AV_WL16(src1 + i*4 + 0, gamma[r]);",
          "67:         AV_WL16(src1 + i*4 + 1, gamma[g]);",
          "68:         AV_WL16(src1 + i*4 + 2, gamma[b]);",
          "69:     }",
          "70: }",
          "71: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:         dst[i] = (dst[i]*(14071/4) + (33561947<<4)/4)>>12;",
          "241: }",
          "317: #define DEBUG_SWSCALE_BUFFERS 0",
          "318: #define DEBUG_BUFFERS(...)                      \\",
          "",
          "[Removed Lines]",
          "243: #ifndef NEW_FILTER",
          "245: static av_always_inline void hyscale(SwsContext *c, int16_t *dst, int dstWidth,",
          "246:                                      const uint8_t *src_in[4],",
          "247:                                      int srcW, int xInc,",
          "248:                                      const int16_t *hLumFilter,",
          "249:                                      const int32_t *hLumFilterPos,",
          "250:                                      int hLumFilterSize,",
          "251:                                      uint8_t *formatConvBuffer,",
          "252:                                      uint32_t *pal, int isAlpha)",
          "253: {",
          "254:     void (*toYV12)(uint8_t *, const uint8_t *, const uint8_t *, const uint8_t *, int, uint32_t *) =",
          "255:         isAlpha ? c->alpToYV12 : c->lumToYV12;",
          "256:     void (*convertRange)(int16_t *, int) = isAlpha ? NULL : c->lumConvertRange;",
          "257:     const uint8_t *src = src_in[isAlpha ? 3 : 0];",
          "259:     if (toYV12) {",
          "260:         toYV12(formatConvBuffer, src, src_in[1], src_in[2], srcW, pal);",
          "261:         src = formatConvBuffer;",
          "262:     } else if (c->readLumPlanar && !isAlpha) {",
          "263:         c->readLumPlanar(formatConvBuffer, src_in, srcW, c->input_rgb2yuv_table);",
          "264:         src = formatConvBuffer;",
          "265:     } else if (c->readAlpPlanar && isAlpha) {",
          "266:         c->readAlpPlanar(formatConvBuffer, src_in, srcW, NULL);",
          "267:         src = formatConvBuffer;",
          "268:     }",
          "270:     if (!c->hyscale_fast) {",
          "271:         c->hyScale(c, dst, dstWidth, src, hLumFilter,",
          "272:                    hLumFilterPos, hLumFilterSize);",
          "273:     } else { // fast bilinear upscale / crap downscale",
          "274:         c->hyscale_fast(c, dst, dstWidth, src, srcW, xInc);",
          "275:     }",
          "277:     if (convertRange)",
          "278:         convertRange(dst, dstWidth);",
          "279: }",
          "281: static av_always_inline void hcscale(SwsContext *c, int16_t *dst1,",
          "282:                                      int16_t *dst2, int dstWidth,",
          "283:                                      const uint8_t *src_in[4],",
          "284:                                      int srcW, int xInc,",
          "285:                                      const int16_t *hChrFilter,",
          "286:                                      const int32_t *hChrFilterPos,",
          "287:                                      int hChrFilterSize,",
          "288:                                      uint8_t *formatConvBuffer, uint32_t *pal)",
          "289: {",
          "290:     const uint8_t *src1 = src_in[1], *src2 = src_in[2];",
          "291:     if (c->chrToYV12) {",
          "292:         uint8_t *buf2 = formatConvBuffer +",
          "293:                         FFALIGN(srcW*2+78, 16);",
          "294:         c->chrToYV12(formatConvBuffer, buf2, src_in[0], src1, src2, srcW, pal);",
          "295:         src1= formatConvBuffer;",
          "296:         src2= buf2;",
          "297:     } else if (c->readChrPlanar) {",
          "298:         uint8_t *buf2 = formatConvBuffer +",
          "299:                         FFALIGN(srcW*2+78, 16);",
          "300:         c->readChrPlanar(formatConvBuffer, buf2, src_in, srcW, c->input_rgb2yuv_table);",
          "301:         src1 = formatConvBuffer;",
          "302:         src2 = buf2;",
          "303:     }",
          "305:     if (!c->hcscale_fast) {",
          "306:         c->hcScale(c, dst1, dstWidth, src1, hChrFilter, hChrFilterPos, hChrFilterSize);",
          "307:         c->hcScale(c, dst2, dstWidth, src2, hChrFilter, hChrFilterPos, hChrFilterSize);",
          "308:     } else { // fast bilinear upscale / crap downscale",
          "309:         c->hcscale_fast(c, dst1, dst2, dstWidth, src1, src2, srcW, xInc);",
          "310:     }",
          "312:     if (c->chrConvertRange)",
          "313:         c->chrConvertRange(dst1, dst2, dstWidth);",
          "314: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325: {",
          "331:     const int dstW                   = c->dstW;",
          "332:     const int dstH                   = c->dstH;",
          "339:     const enum AVPixelFormat dstFormat = c->dstFormat;",
          "340:     const int flags                  = c->flags;",
          "341:     int32_t *vLumFilterPos           = c->vLumFilterPos;",
          "342:     int32_t *vChrFilterPos           = c->vChrFilterPos;",
          "351:     const int vLumFilterSize         = c->vLumFilterSize;",
          "352:     const int vChrFilterSize         = c->vChrFilterSize;",
          "368:     yuv2planar1_fn yuv2plane1        = c->yuv2plane1;",
          "369:     yuv2planarX_fn yuv2planeX        = c->yuv2planeX;",
          "370:     yuv2interleavedX_fn yuv2nv12cX   = c->yuv2nv12cX;",
          "",
          "[Removed Lines]",
          "328: #ifndef NEW_FILTER",
          "329:     const int srcW                   = c->srcW;",
          "330: #endif",
          "333: #ifndef NEW_FILTER",
          "334:     const int chrDstW                = c->chrDstW;",
          "335:     const int chrSrcW                = c->chrSrcW;",
          "336:     const int lumXInc                = c->lumXInc;",
          "337:     const int chrXInc                = c->chrXInc;",
          "338: #endif",
          "343: #ifndef NEW_FILTER",
          "344:     int32_t *hLumFilterPos           = c->hLumFilterPos;",
          "345:     int32_t *hChrFilterPos           = c->hChrFilterPos;",
          "346:     int16_t *hLumFilter              = c->hLumFilter;",
          "347:     int16_t *hChrFilter              = c->hChrFilter;",
          "348:     int32_t *lumMmxFilter            = c->lumMmxFilter;",
          "349:     int32_t *chrMmxFilter            = c->chrMmxFilter;",
          "350: #endif",
          "353: #ifndef NEW_FILTER",
          "354:     const int hLumFilterSize         = c->hLumFilterSize;",
          "355:     const int hChrFilterSize         = c->hChrFilterSize;",
          "356:     int16_t **lumPixBuf              = c->lumPixBuf;",
          "357:     int16_t **chrUPixBuf             = c->chrUPixBuf;",
          "358:     int16_t **chrVPixBuf             = c->chrVPixBuf;",
          "359: #endif",
          "360:     int16_t **alpPixBuf              = c->alpPixBuf;",
          "361:     const int vLumBufSize            = c->vLumBufSize;",
          "362:     const int vChrBufSize            = c->vChrBufSize;",
          "363: #ifndef NEW_FILTER",
          "364:     uint8_t *formatConvBuffer        = c->formatConvBuffer;",
          "365:     uint32_t *pal                    = c->pal_yuv;",
          "366:     int perform_gamma = c->is_internal_gamma;",
          "367: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "385:     int lastInLumBuf = c->lastInLumBuf;",
          "386:     int lastInChrBuf = c->lastInChrBuf;",
          "389:     int lumStart = 0;",
          "390:     int lumEnd = c->descIndex[0];",
          "391:     int chrStart = lumEnd;",
          "",
          "[Removed Lines]",
          "388: #ifdef NEW_FILTER",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "397:     SwsSlice *vout_slice = &c->slice[c->numSlice-1];",
          "398:     SwsFilterDescriptor *desc = c->desc;",
          "400:     int hasLumHoles = 1;",
          "401:     int hasChrHoles = 1;",
          "410:     if (isPacked(c->srcFormat)) {",
          "411:         src[0] =",
          "",
          "[Removed Lines]",
          "402: #endif",
          "404: #ifndef NEW_FILTER",
          "405:     if (!usePal(c->srcFormat)) {",
          "406:         pal = c->input_rgb2yuv_table;",
          "407:     }",
          "408: #endif",
          "",
          "[Added Lines]",
          "281:     int needAlpha = c->needAlpha;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "427:                   dst[2], dstStride[2], dst[3], dstStride[3]);",
          "428:     DEBUG_BUFFERS(\"srcSliceY: %d srcSliceH: %d dstY: %d dstH: %d\\n\",",
          "429:                   srcSliceY, srcSliceH, dstY, dstH);",
          "433:     if (dstStride[0]&15 || dstStride[1]&15 ||",
          "434:         dstStride[2]&15 || dstStride[3]&15) {",
          "",
          "[Removed Lines]",
          "430:     DEBUG_BUFFERS(\"vLumFilterSize: %d vLumBufSize: %d vChrFilterSize: %d vChrBufSize: %d\\n\",",
          "431:                   vLumFilterSize, vLumBufSize, vChrFilterSize, vChrBufSize);",
          "",
          "[Added Lines]",
          "307:     DEBUG_BUFFERS(\"vLumFilterSize: %d vChrFilterSize: %d\\n\",",
          "308:                   vLumFilterSize, vChrFilterSize);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "470:     }",
          "471:     lastDstY = dstY;",
          "474:     ff_init_vscale_pfn(c, yuv2plane1, yuv2planeX, yuv2nv12cX,",
          "475:                    yuv2packed1, yuv2packed2, yuv2packedX, yuv2anyX, c->use_mmx_vfilter);",
          "",
          "[Removed Lines]",
          "473: #ifdef NEW_FILTER",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "492:         hout_slice->plane[3].sliceH = 0;",
          "493:         hout_slice->width = dstW;",
          "494:     }",
          "497:     for (; dstY < dstH; dstY++) {",
          "498:         const int chrDstY = dstY >> c->chrDstVSubSample;",
          "507:         int use_mmx_vfilter= c->use_mmx_vfilter;",
          "",
          "[Removed Lines]",
          "495: #endif",
          "499: #ifndef NEW_FILTER",
          "500:         uint8_t *dest[4]  = {",
          "501:             dst[0] + dstStride[0] * dstY,",
          "502:             dst[1] + dstStride[1] * chrDstY,",
          "503:             dst[2] + dstStride[2] * chrDstY,",
          "504:             (CONFIG_SWSCALE_ALPHA && alpPixBuf) ? dst[3] + dstStride[3] * dstY : NULL,",
          "505:         };",
          "506: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "517:         int lastLumSrcY2 = FFMIN(c->srcH,    firstLumSrcY2 + vLumFilterSize) - 1;",
          "518:         int lastChrSrcY  = FFMIN(c->chrSrcH, firstChrSrcY  + vChrFilterSize) - 1;",
          "519:         int enough_lines;",
          "521:         int i;",
          "522:         int posY, cPosY, firstPosY, lastPosY, firstCPosY, lastCPosY;",
          "526:         if (firstLumSrcY > lastInLumBuf) {",
          "528:             hasLumHoles = lastInLumBuf != firstLumSrcY - 1;",
          "529:             if (hasLumHoles) {",
          "530:                 hout_slice->plane[0].sliceY = firstLumSrcY;",
          "",
          "[Removed Lines]",
          "520: #ifdef NEW_FILTER",
          "523: #endif",
          "527: #ifdef NEW_FILTER",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "532:                 hout_slice->plane[0].sliceH =",
          "533:                 hout_slice->plane[3].sliceH = 0;",
          "534:             }",
          "536:             lastInLumBuf = firstLumSrcY - 1;",
          "537:         }",
          "538:         if (firstChrSrcY > lastInChrBuf) {",
          "540:             hasChrHoles = lastInChrBuf != firstChrSrcY - 1;",
          "541:             if (hasChrHoles) {",
          "542:                 hout_slice->plane[1].sliceY = firstChrSrcY;",
          "",
          "[Removed Lines]",
          "535: #endif",
          "539: #ifdef NEW_FILTER",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "544:                 hout_slice->plane[1].sliceH =",
          "545:                 hout_slice->plane[2].sliceH = 0;",
          "546:             }",
          "548:             lastInChrBuf = firstChrSrcY - 1;",
          "549:         }",
          "553:         DEBUG_BUFFERS(\"dstY: %d\\n\", dstY);",
          "554:         DEBUG_BUFFERS(\"\\tfirstLumSrcY: %d lastLumSrcY: %d lastInLumBuf: %d\\n\",",
          "",
          "[Removed Lines]",
          "547: #endif",
          "550:         av_assert0(firstLumSrcY >= lastInLumBuf - vLumBufSize + 1);",
          "551:         av_assert0(firstChrSrcY >= lastInChrBuf - vChrBufSize + 1);",
          "",
          "[Added Lines]",
          "416:         av_assert0(firstLumSrcY >= lastInLumBuf - vLumFilterSize + 1);",
          "417:         av_assert0(firstChrSrcY >= lastInChrBuf - vChrFilterSize + 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "567:                           lastLumSrcY, lastChrSrcY);",
          "568:         }",
          "571:         posY = hout_slice->plane[0].sliceY + hout_slice->plane[0].sliceH;",
          "572:         if (posY <= lastLumSrcY && !hasLumHoles) {",
          "573:             firstPosY = FFMAX(firstLumSrcY, posY);",
          "",
          "[Removed Lines]",
          "570: #ifdef NEW_FILTER",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "604:         chrBufIndex += lastChrSrcY - lastInChrBuf;",
          "605:         lastInChrBuf = lastChrSrcY;",
          "663:         if (!enough_lines)",
          "664:             break;  // we can't output a dstY line so let's try with the next slice",
          "",
          "[Removed Lines]",
          "607: #else",
          "609:         while (lastInLumBuf < lastLumSrcY) {",
          "610:             const uint8_t *src1[4] = {",
          "611:                 src[0] + (lastInLumBuf + 1 - srcSliceY) * srcStride[0],",
          "612:                 src[1] + (lastInLumBuf + 1 - srcSliceY) * srcStride[1],",
          "613:                 src[2] + (lastInLumBuf + 1 - srcSliceY) * srcStride[2],",
          "614:                 src[3] + (lastInLumBuf + 1 - srcSliceY) * srcStride[3],",
          "615:             };",
          "616:             lumBufIndex++;",
          "617:             av_assert0(lumBufIndex < 2 * vLumBufSize);",
          "618:             av_assert0(lastInLumBuf + 1 - srcSliceY < srcSliceH);",
          "619:             av_assert0(lastInLumBuf + 1 - srcSliceY >= 0);",
          "621:             if (perform_gamma)",
          "622:                 gamma_convert((uint8_t **)src1, srcW, c->inv_gamma);",
          "624:             hyscale(c, lumPixBuf[lumBufIndex], dstW, src1, srcW, lumXInc,",
          "625:                     hLumFilter, hLumFilterPos, hLumFilterSize,",
          "626:                     formatConvBuffer, pal, 0);",
          "627:             if (CONFIG_SWSCALE_ALPHA && alpPixBuf)",
          "628:                 hyscale(c, alpPixBuf[lumBufIndex], dstW, src1, srcW,",
          "629:                         lumXInc, hLumFilter, hLumFilterPos, hLumFilterSize,",
          "630:                         formatConvBuffer, pal, 1);",
          "631:             lastInLumBuf++;",
          "632:             DEBUG_BUFFERS(\"\\t\\tlumBufIndex %d: lastInLumBuf: %d\\n\",",
          "633:                           lumBufIndex, lastInLumBuf);",
          "634:         }",
          "635:         while (lastInChrBuf < lastChrSrcY) {",
          "636:             const uint8_t *src1[4] = {",
          "637:                 src[0] + (lastInChrBuf + 1 - chrSrcSliceY) * srcStride[0],",
          "638:                 src[1] + (lastInChrBuf + 1 - chrSrcSliceY) * srcStride[1],",
          "639:                 src[2] + (lastInChrBuf + 1 - chrSrcSliceY) * srcStride[2],",
          "640:                 src[3] + (lastInChrBuf + 1 - chrSrcSliceY) * srcStride[3],",
          "641:             };",
          "642:             chrBufIndex++;",
          "643:             av_assert0(chrBufIndex < 2 * vChrBufSize);",
          "644:             av_assert0(lastInChrBuf + 1 - chrSrcSliceY < (chrSrcSliceH));",
          "645:             av_assert0(lastInChrBuf + 1 - chrSrcSliceY >= 0);",
          "648:             if (c->needs_hcscale)",
          "649:                 hcscale(c, chrUPixBuf[chrBufIndex], chrVPixBuf[chrBufIndex],",
          "650:                         chrDstW, src1, chrSrcW, chrXInc,",
          "651:                         hChrFilter, hChrFilterPos, hChrFilterSize,",
          "652:                         formatConvBuffer, pal);",
          "653:             lastInChrBuf++;",
          "654:             DEBUG_BUFFERS(\"\\t\\tchrBufIndex %d: lastInChrBuf: %d\\n\",",
          "655:                           chrBufIndex, lastInChrBuf);",
          "656:         }",
          "657: #endif",
          "659:         if (lumBufIndex >= vLumBufSize)",
          "660:             lumBufIndex -= vLumBufSize;",
          "661:         if (chrBufIndex >= vChrBufSize)",
          "662:             chrBufIndex -= vChrBufSize;",
          "",
          "[Added Lines]",
          "473:         if (lumBufIndex >= vLumFilterSize)",
          "474:             lumBufIndex -= vLumFilterSize;",
          "475:         if (chrBufIndex >= vChrFilterSize)",
          "476:             chrBufIndex -= vChrFilterSize;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "682:         }",
          "684:         {",
          "686:             for (i = vStart; i < vEnd; ++i)",
          "687:                 desc[i].process(c, &desc[i], dstY, 1);",
          "795:         }",
          "796:     }",
          "798:         int length = dstW;",
          "799:         int height = dstY - lastDstY;",
          "",
          "[Removed Lines]",
          "685: #ifdef NEW_FILTER",
          "688: #else",
          "689:             const int16_t **lumSrcPtr  = (const int16_t **)(void*) lumPixBuf  + lumBufIndex + firstLumSrcY - lastInLumBuf + vLumBufSize;",
          "690:             const int16_t **chrUSrcPtr = (const int16_t **)(void*) chrUPixBuf + chrBufIndex + firstChrSrcY - lastInChrBuf + vChrBufSize;",
          "691:             const int16_t **chrVSrcPtr = (const int16_t **)(void*) chrVPixBuf + chrBufIndex + firstChrSrcY - lastInChrBuf + vChrBufSize;",
          "692:             const int16_t **alpSrcPtr  = (CONFIG_SWSCALE_ALPHA && alpPixBuf) ?",
          "693:                                          (const int16_t **)(void*) alpPixBuf + lumBufIndex + firstLumSrcY - lastInLumBuf + vLumBufSize : NULL;",
          "694:             int16_t *vLumFilter = c->vLumFilter;",
          "695:             int16_t *vChrFilter = c->vChrFilter;",
          "697:             if (isPlanarYUV(dstFormat) ||",
          "698:                 (isGray(dstFormat) && !isALPHA(dstFormat))) { // YV12 like",
          "699:                 const int chrSkipMask = (1 << c->chrDstVSubSample) - 1;",
          "701:                 vLumFilter +=    dstY * vLumFilterSize;",
          "702:                 vChrFilter += chrDstY * vChrFilterSize;",
          "713:                 if(use_mmx_vfilter){",
          "714:                     vLumFilter= (int16_t *)c->lumMmxFilter;",
          "715:                     vChrFilter= (int16_t *)c->chrMmxFilter;",
          "716:                 }",
          "718:                 if (vLumFilterSize == 1) {",
          "719:                     yuv2plane1(lumSrcPtr[0], dest[0], dstW, c->lumDither8, 0);",
          "720:                 } else {",
          "721:                     yuv2planeX(vLumFilter, vLumFilterSize,",
          "722:                                lumSrcPtr, dest[0],",
          "723:                                dstW, c->lumDither8, 0);",
          "724:                 }",
          "726:                 if (!((dstY & chrSkipMask) || isGray(dstFormat))) {",
          "727:                     if (yuv2nv12cX) {",
          "728:                         yuv2nv12cX(c, vChrFilter,",
          "729:                                    vChrFilterSize, chrUSrcPtr, chrVSrcPtr,",
          "730:                                    dest[1], chrDstW);",
          "731:                     } else if (vChrFilterSize == 1) {",
          "732:                         yuv2plane1(chrUSrcPtr[0], dest[1], chrDstW, c->chrDither8, 0);",
          "733:                         yuv2plane1(chrVSrcPtr[0], dest[2], chrDstW, c->chrDither8, 3);",
          "734:                     } else {",
          "735:                         yuv2planeX(vChrFilter,",
          "736:                                    vChrFilterSize, chrUSrcPtr, dest[1],",
          "737:                                    chrDstW, c->chrDither8, 0);",
          "738:                         yuv2planeX(vChrFilter,",
          "739:                                    vChrFilterSize, chrVSrcPtr, dest[2],",
          "740:                                    chrDstW, c->chrDither8, use_mmx_vfilter ? (c->uv_offx2 >> 1) : 3);",
          "741:                     }",
          "742:                 }",
          "744:                 if (CONFIG_SWSCALE_ALPHA && alpPixBuf) {",
          "745:                     if(use_mmx_vfilter){",
          "746:                         vLumFilter= (int16_t *)c->alpMmxFilter;",
          "747:                     }",
          "748:                     if (vLumFilterSize == 1) {",
          "749:                         yuv2plane1(alpSrcPtr[0], dest[3], dstW,",
          "750:                                    c->lumDither8, 0);",
          "751:                     } else {",
          "752:                         yuv2planeX(vLumFilter,",
          "753:                                    vLumFilterSize, alpSrcPtr, dest[3],",
          "754:                                    dstW, c->lumDither8, 0);",
          "755:                     }",
          "756:                 }",
          "757:             } else if (yuv2packedX) {",
          "758:                 av_assert1(lumSrcPtr  + vLumFilterSize - 1 < (const int16_t **)lumPixBuf  + vLumBufSize * 2);",
          "759:                 av_assert1(chrUSrcPtr + vChrFilterSize - 1 < (const int16_t **)chrUPixBuf + vChrBufSize * 2);",
          "760:                 if (c->yuv2packed1 && vLumFilterSize == 1 &&",
          "761:                     vChrFilterSize <= 2) { // unscaled RGB",
          "762:                     int chrAlpha = vChrFilterSize == 1 ? 0 : vChrFilter[2 * dstY + 1];",
          "763:                     yuv2packed1(c, *lumSrcPtr, chrUSrcPtr, chrVSrcPtr,",
          "764:                                 alpPixBuf ? *alpSrcPtr : NULL,",
          "765:                                 dest[0], dstW, chrAlpha, dstY);",
          "766:                 } else if (c->yuv2packed2 && vLumFilterSize == 2 &&",
          "767:                            vChrFilterSize == 2) { // bilinear upscale RGB",
          "768:                     int lumAlpha = vLumFilter[2 * dstY + 1];",
          "769:                     int chrAlpha = vChrFilter[2 * dstY + 1];",
          "770:                     lumMmxFilter[2] =",
          "771:                     lumMmxFilter[3] = vLumFilter[2 * dstY]    * 0x10001;",
          "772:                     chrMmxFilter[2] =",
          "773:                     chrMmxFilter[3] = vChrFilter[2 * chrDstY] * 0x10001;",
          "774:                     yuv2packed2(c, lumSrcPtr, chrUSrcPtr, chrVSrcPtr,",
          "775:                                 alpPixBuf ? alpSrcPtr : NULL,",
          "776:                                 dest[0], dstW, lumAlpha, chrAlpha, dstY);",
          "777:                 } else { // general RGB",
          "778:                     yuv2packedX(c, vLumFilter + dstY * vLumFilterSize,",
          "779:                                 lumSrcPtr, vLumFilterSize,",
          "780:                                 vChrFilter + dstY * vChrFilterSize,",
          "781:                                 chrUSrcPtr, chrVSrcPtr, vChrFilterSize,",
          "782:                                 alpSrcPtr, dest[0], dstW, dstY);",
          "783:                 }",
          "784:             } else {",
          "785:                 av_assert1(!yuv2packed1 && !yuv2packed2);",
          "786:                 yuv2anyX(c, vLumFilter + dstY * vLumFilterSize,",
          "787:                          lumSrcPtr, vLumFilterSize,",
          "788:                          vChrFilter + dstY * vChrFilterSize,",
          "789:                          chrUSrcPtr, chrVSrcPtr, vChrFilterSize,",
          "790:                          alpSrcPtr, dest, dstW, dstY);",
          "791:             }",
          "792:             if (perform_gamma)",
          "793:                 gamma_convert(dest, dstW, c->gamma);",
          "794: #endif",
          "797:     if (isPlanar(dstFormat) && isALPHA(dstFormat) && !alpPixBuf) {",
          "",
          "[Added Lines]",
          "503:     if (isPlanar(dstFormat) && isALPHA(dstFormat) && !needAlpha) {",
          "",
          "---------------"
        ],
        "libswscale/swscale_internal.h||libswscale/swscale_internal.h": [
          "File: libswscale/swscale_internal.h -> libswscale/swscale_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:     int lastInLumBuf;             ///< Last scaled horizontal luma/alpha line from source in the ring buffer.",
          "360:     int lastInChrBuf;             ///< Last scaled horizontal chroma     line from source in the ring buffer.",
          "361:     int lumBufIndex;              ///< Index in ring buffer of the last scaled horizontal luma/alpha line from source.",
          "",
          "[Removed Lines]",
          "353:     int16_t **lumPixBuf;          ///< Ring buffer for scaled horizontal luma   plane lines to be fed to the vertical scaler.",
          "354:     int16_t **chrUPixBuf;         ///< Ring buffer for scaled horizontal chroma plane lines to be fed to the vertical scaler.",
          "355:     int16_t **chrVPixBuf;         ///< Ring buffer for scaled horizontal chroma plane lines to be fed to the vertical scaler.",
          "356:     int16_t **alpPixBuf;          ///< Ring buffer for scaled horizontal alpha  plane lines to be fed to the vertical scaler.",
          "357:     int vLumBufSize;              ///< Number of vertical luma/alpha lines allocated in the ring buffer.",
          "358:     int vChrBufSize;              ///< Number of vertical chroma     lines allocated in the ring buffer.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "365:     uint8_t *formatConvBuffer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:     int needAlpha;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1039: #define MAX_LINES_AHEAD 4",
          "",
          "[Removed Lines]",
          "1042: #define NEW_FILTER",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libswscale/utils.c||libswscale/utils.c": [
          "File: libswscale/utils.c -> libswscale/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1696: #endif",
          "1697:     }",
          "1718:     for (i = 0; i < 4; i++)",
          "1719:         FF_ALLOCZ_OR_GOTO(c, c->dither_error[i], (c->dstW+2) * sizeof(int), fail);",
          "1737:     c->uv_off   = (dst_stride>>1) + 64 / (c->dstBpc &~ 7);",
          "1738:     c->uv_offx2 = dst_stride + 16;",
          "1763:     av_assert0(c->chrDstH <= dstH);",
          "",
          "[Removed Lines]",
          "1700:     c->vLumBufSize = c->vLumFilterSize;",
          "1701:     c->vChrBufSize = c->vChrFilterSize;",
          "1702:     for (i = 0; i < dstH; i++) {",
          "1703:         int chrI      = (int64_t)i * c->chrDstH / dstH;",
          "1704:         int nextSlice = FFMAX(c->vLumFilterPos[i] + c->vLumFilterSize - 1,",
          "1705:                               ((c->vChrFilterPos[chrI] + c->vChrFilterSize - 1)",
          "1706:                                << c->chrSrcVSubSample));",
          "1708:         nextSlice >>= c->chrSrcVSubSample;",
          "1709:         nextSlice <<= c->chrSrcVSubSample;",
          "1710:         if (c->vLumFilterPos[i] + c->vLumBufSize < nextSlice)",
          "1711:             c->vLumBufSize = nextSlice - c->vLumFilterPos[i];",
          "1712:         if (c->vChrFilterPos[chrI] + c->vChrBufSize <",
          "1713:             (nextSlice >> c->chrSrcVSubSample))",
          "1714:             c->vChrBufSize = (nextSlice >> c->chrSrcVSubSample) -",
          "1715:                              c->vChrFilterPos[chrI];",
          "1716:     }",
          "1723:     FF_ALLOCZ_OR_GOTO(c, c->lumPixBuf,  c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1724:     FF_ALLOCZ_OR_GOTO(c, c->chrUPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1725:     FF_ALLOCZ_OR_GOTO(c, c->chrVPixBuf, c->vChrBufSize * 3 * sizeof(int16_t *), fail);",
          "1726:     if (CONFIG_SWSCALE_ALPHA && isALPHA(c->srcFormat) && isALPHA(c->dstFormat))",
          "1727:         FF_ALLOCZ_OR_GOTO(c, c->alpPixBuf, c->vLumBufSize * 3 * sizeof(int16_t *), fail);",
          "1731:     for (i = 0; i < c->vLumBufSize; i++) {",
          "1732:         FF_ALLOCZ_OR_GOTO(c, c->lumPixBuf[i + c->vLumBufSize],",
          "1733:                           dst_stride + 16, fail);",
          "1734:         c->lumPixBuf[i] = c->lumPixBuf[i + c->vLumBufSize];",
          "1735:     }",
          "1739:     for (i = 0; i < c->vChrBufSize; i++) {",
          "1740:         FF_ALLOC_OR_GOTO(c, c->chrUPixBuf[i + c->vChrBufSize],",
          "1741:                          dst_stride * 2 + 32, fail);",
          "1742:         c->chrUPixBuf[i] = c->chrUPixBuf[i + c->vChrBufSize];",
          "1743:         c->chrVPixBuf[i] = c->chrVPixBuf[i + c->vChrBufSize]",
          "1744:                          = c->chrUPixBuf[i] + (dst_stride >> 1) + 8;",
          "1745:     }",
          "1746:     if (CONFIG_SWSCALE_ALPHA && c->alpPixBuf)",
          "1747:         for (i = 0; i < c->vLumBufSize; i++) {",
          "1748:             FF_ALLOCZ_OR_GOTO(c, c->alpPixBuf[i + c->vLumBufSize],",
          "1749:                               dst_stride + 16, fail);",
          "1750:             c->alpPixBuf[i] = c->alpPixBuf[i + c->vLumBufSize];",
          "1751:         }",
          "1754:     for (i = 0; i < c->vChrBufSize; i++)",
          "1755:         if(desc_dst->comp[0].depth == 16){",
          "1756:             av_assert0(c->dstBpc > 14);",
          "1757:             for(j=0; j<dst_stride/2+1; j++)",
          "1758:                 ((int32_t*)(c->chrUPixBuf[i]))[j] = 1<<18;",
          "1759:         } else",
          "1760:             for(j=0; j<dst_stride+1; j++)",
          "1761:                 ((int16_t*)(c->chrUPixBuf[i]))[j] = 1<<14;",
          "",
          "[Added Lines]",
          "1702:     c->needAlpha = (CONFIG_SWSCALE_ALPHA && isALPHA(c->srcFormat) && isALPHA(c->dstFormat)) ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2325:     if (!c)",
          "2326:         return;",
          "2347:     for (i = 0; i < 4; i++)",
          "2348:         av_freep(&c->dither_error[i]);",
          "",
          "[Removed Lines]",
          "2328:     if (c->lumPixBuf) {",
          "2329:         for (i = 0; i < c->vLumBufSize; i++)",
          "2330:             av_freep(&c->lumPixBuf[i]);",
          "2331:         av_freep(&c->lumPixBuf);",
          "2332:     }",
          "2334:     if (c->chrUPixBuf) {",
          "2335:         for (i = 0; i < c->vChrBufSize; i++)",
          "2336:             av_freep(&c->chrUPixBuf[i]);",
          "2337:         av_freep(&c->chrUPixBuf);",
          "2338:         av_freep(&c->chrVPixBuf);",
          "2339:     }",
          "2341:     if (CONFIG_SWSCALE_ALPHA && c->alpPixBuf) {",
          "2342:         for (i = 0; i < c->vLumBufSize; i++)",
          "2343:             av_freep(&c->alpPixBuf[i]);",
          "2344:         av_freep(&c->alpPixBuf);",
          "2345:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libswscale/vscale.c||libswscale/vscale.c": [
          "File: libswscale/vscale.c -> libswscale/vscale.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:         desc[0].instance = lumCtx;",
          "219:         desc[0].src = src;",
          "220:         desc[0].dst = dst;",
          "223:         if (!isGray(c->dstFormat)) {",
          "224:             chrCtx = av_mallocz(sizeof(VScalerContext));",
          "",
          "[Removed Lines]",
          "221:         desc[0].alpha = c->alpPixBuf != 0;",
          "",
          "[Added Lines]",
          "221:         desc[0].alpha = c->needAlpha;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:         desc[0].instance = lumCtx;",
          "240:         desc[0].src = src;",
          "241:         desc[0].dst = dst;",
          "243:     }",
          "245:     ff_init_vscale_pfn(c, c->yuv2plane1, c->yuv2planeX, c->yuv2nv12cX,",
          "",
          "[Removed Lines]",
          "242:         desc[0].alpha = c->alpPixBuf != 0;",
          "",
          "[Added Lines]",
          "242:         desc[0].alpha = c->needAlpha;",
          "",
          "---------------"
        ],
        "libswscale/x86/swscale.c||libswscale/x86/swscale.c": [
          "File: libswscale/x86/swscale.c -> libswscale/x86/swscale.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: {",
          "86:     const int dstH= c->dstH;",
          "87:     const int flags= c->flags;",
          "89:     SwsPlane *lumPlane = &c->slice[c->numSlice-2].plane[0];",
          "90:     SwsPlane *chrUPlane = &c->slice[c->numSlice-2].plane[1];",
          "91:     SwsPlane *alpPlane = &c->slice[c->numSlice-2].plane[3];",
          "100:     int32_t *vLumFilterPos= c->vLumFilterPos;",
          "101:     int32_t *vChrFilterPos= c->vChrFilterPos;",
          "102:     int16_t *vLumFilter= c->vLumFilter;",
          "",
          "[Removed Lines]",
          "88: #ifdef NEW_FILTER",
          "92: #else",
          "93:     int16_t **lumPixBuf= c->lumPixBuf;",
          "94:     int16_t **chrUPixBuf= c->chrUPixBuf;",
          "95:     int16_t **alpPixBuf= c->alpPixBuf;",
          "96:     const int vLumBufSize= c->vLumBufSize;",
          "97:     const int vChrBufSize= c->vChrBufSize;",
          "98: #endif",
          "99:     int hasAlpha = c->alpPixBuf != NULL;",
          "",
          "[Added Lines]",
          "93:     int hasAlpha = c->needAlpha;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:         c->greenDither= ff_dither4[dstY&1];",
          "118:     c->redDither= ff_dither8[(dstY+1)&1];",
          "119:     if (dstY < dstH - 2) {",
          "121:         const int16_t **lumSrcPtr  = (const int16_t **)(void*) lumPlane->line + firstLumSrcY - lumPlane->sliceY;",
          "122:         const int16_t **chrUSrcPtr = (const int16_t **)(void*) chrUPlane->line + firstChrSrcY - chrUPlane->sliceY;",
          "129:         int i;",
          "130:         if (firstLumSrcY < 0 || firstLumSrcY + vLumFilterSize > c->srcH) {",
          "132:             const int16_t **tmpY = (const int16_t **) lumPlane->tmp;",
          "136:             int neg = -firstLumSrcY, i, end = FFMIN(c->srcH - firstLumSrcY, vLumFilterSize);",
          "137:             for (i = 0; i < neg;            i++)",
          "138:                 tmpY[i] = lumSrcPtr[neg];",
          "",
          "[Removed Lines]",
          "120: #ifdef NEW_FILTER",
          "123:         const int16_t **alpSrcPtr  = (CONFIG_SWSCALE_ALPHA && c->alpPixBuf) ? (const int16_t **)(void*) alpPlane->line + firstLumSrcY - alpPlane->sliceY : NULL;",
          "124: #else",
          "125:         const int16_t **lumSrcPtr= (const int16_t **)(void*) lumPixBuf + lumBufIndex + firstLumSrcY - lastInLumBuf + vLumBufSize;",
          "126:         const int16_t **chrUSrcPtr= (const int16_t **)(void*) chrUPixBuf + chrBufIndex + firstChrSrcY - lastInChrBuf + vChrBufSize;",
          "127:         const int16_t **alpSrcPtr= (CONFIG_SWSCALE_ALPHA && alpPixBuf) ? (const int16_t **)(void*) alpPixBuf + lumBufIndex + firstLumSrcY - lastInLumBuf + vLumBufSize : NULL;",
          "128: #endif",
          "131: #ifdef NEW_FILTER",
          "133: #else",
          "134:             const int16_t **tmpY = (const int16_t **) lumPixBuf + 2 * vLumBufSize;",
          "135: #endif",
          "",
          "[Added Lines]",
          "116:         const int16_t **alpSrcPtr  = (CONFIG_SWSCALE_ALPHA && hasAlpha) ? (const int16_t **)(void*) alpPlane->line + firstLumSrcY - alpPlane->sliceY : NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:             lumSrcPtr = tmpY;",
          "145:             if (alpSrcPtr) {",
          "147:                 const int16_t **tmpA = (const int16_t **) alpPlane->tmp;",
          "151:                 for (i = 0; i < neg;            i++)",
          "152:                     tmpA[i] = alpSrcPtr[neg];",
          "153:                 for (     ; i < end;            i++)",
          "",
          "[Removed Lines]",
          "146: #ifdef NEW_FILTER",
          "148: #else",
          "149:                 const int16_t **tmpA = (const int16_t **) alpPixBuf + 2 * vLumBufSize;",
          "150: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:             }",
          "159:         }",
          "160:         if (firstChrSrcY < 0 || firstChrSrcY + vChrFilterSize > c->chrSrcH) {",
          "162:             const int16_t **tmpU = (const int16_t **) chrUPlane->tmp;",
          "166:             int neg = -firstChrSrcY, i, end = FFMIN(c->chrSrcH - firstChrSrcY, vChrFilterSize);",
          "167:             for (i = 0; i < neg;            i++) {",
          "168:                 tmpU[i] = chrUSrcPtr[neg];",
          "",
          "[Removed Lines]",
          "161: #ifdef NEW_FILTER",
          "163: #else",
          "164:             const int16_t **tmpU = (const int16_t **) chrUPixBuf + 2 * vChrBufSize;",
          "165: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "479:         switch (c->srcFormat) {",
          "480:         case AV_PIX_FMT_YA8:",
          "481:             c->lumToYV12 = ff_yuyvToY_mmx;",
          "483:                 c->alpToYV12 = ff_uyvyToY_mmx;",
          "484:             break;",
          "485:         case AV_PIX_FMT_YUYV422:",
          "",
          "[Removed Lines]",
          "482:             if (c->alpPixBuf)",
          "",
          "[Added Lines]",
          "460:             if (c->needAlpha)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "528:         switch (c->srcFormat) {",
          "529:         case AV_PIX_FMT_YA8:",
          "530:             c->lumToYV12 = ff_yuyvToY_sse2;",
          "532:                 c->alpToYV12 = ff_uyvyToY_sse2;",
          "533:             break;",
          "534:         case AV_PIX_FMT_YUYV422:",
          "",
          "[Removed Lines]",
          "531:             if (c->alpPixBuf)",
          "",
          "[Added Lines]",
          "509:             if (c->needAlpha)",
          "",
          "---------------"
        ],
        "libswscale/x86/swscale_template.c||libswscale/x86/swscale_template.c": [
          "File: libswscale/x86/swscale_template.c -> libswscale/x86/swscale_template.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:     x86_reg dstW_reg = dstW;",
          "349:     x86_reg uv_off = c->uv_offx2;",
          "352:         YSCALEYUV2PACKEDX_ACCURATE",
          "353:         YSCALEYUV2RGBX",
          "354:         \"movq                      %%mm2, \"U_TEMP\"(%0)  \\n\\t\"",
          "",
          "[Removed Lines]",
          "351:     if (CONFIG_SWSCALE_ALPHA && c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "351:     if (CONFIG_SWSCALE_ALPHA && c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:     x86_reg dstW_reg = dstW;",
          "382:     x86_reg uv_off = c->uv_offx2;",
          "385:         YSCALEYUV2PACKEDX",
          "386:         YSCALEYUV2RGBX",
          "387:         YSCALEYUV2PACKEDX_YA(ALP_MMX_FILTER_OFFSET, %%mm0, %%mm3, %%mm6, %%mm1, %%mm7)",
          "",
          "[Removed Lines]",
          "384:     if (CONFIG_SWSCALE_ALPHA && c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "384:     if (CONFIG_SWSCALE_ALPHA && c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "410:     x86_reg dstW_reg = dstW;",
          "411:     x86_reg uv_off = c->uv_offx2;",
          "414:         YSCALEYUV2PACKEDX",
          "415:         YSCALEYUV2RGBX",
          "416:         YSCALEYUV2PACKEDX_YA(ALP_MMX_FILTER_OFFSET, %%mm0, %%mm3, %%mm6, %%mm1, %%mm7)",
          "",
          "[Removed Lines]",
          "413:     if (CONFIG_SWSCALE_ALPHA && c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "413:     if (CONFIG_SWSCALE_ALPHA && c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "889:     const int16_t *buf0  = buf[0],  *buf1  = buf[1],",
          "893:         const int16_t *abuf0 = abuf[0], *abuf1 = abuf[1];",
          "894: #if ARCH_X86_64",
          "895:         __asm__ volatile(",
          "",
          "[Removed Lines]",
          "892:     if (CONFIG_SWSCALE_ALPHA && c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "892:     if (CONFIG_SWSCALE_ALPHA && c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1216:     if (uvalpha < 2048) { // note this is not correct (shifts chrominance by 0.5 pixels) but it is a bit faster",
          "1217:         const int16_t *ubuf1 = ubuf[0];",
          "1219:             __asm__ volatile(",
          "1220:                 \"mov %%\"REG_b\", \"ESP_OFFSET\"(%5)        \\n\\t\"",
          "1221:                 \"mov        %4, %%\"REG_b\"               \\n\\t\"",
          "",
          "[Removed Lines]",
          "1218:         if (CONFIG_SWSCALE_ALPHA && c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "1218:         if (CONFIG_SWSCALE_ALPHA && c->needAlpha) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1244:         }",
          "1245:     } else {",
          "1246:         const int16_t *ubuf1 = ubuf[1];",
          "1248:             __asm__ volatile(",
          "1249:                 \"mov %%\"REG_b\", \"ESP_OFFSET\"(%5)        \\n\\t\"",
          "1250:                 \"mov        %4, %%\"REG_b\"               \\n\\t\"",
          "",
          "[Removed Lines]",
          "1247:         if (CONFIG_SWSCALE_ALPHA && c->alpPixBuf) {",
          "",
          "[Added Lines]",
          "1247:         if (CONFIG_SWSCALE_ALPHA && c->needAlpha) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}