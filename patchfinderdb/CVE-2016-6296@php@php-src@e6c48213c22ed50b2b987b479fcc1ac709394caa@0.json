{
  "cve_id": "CVE-2016-6296",
  "cve_desc": "Integer signedness error in the simplestring_addn function in simplestring.c in xmlrpc-epi through 0.54.2, as used in PHP before 5.5.38, 5.6.x before 5.6.24, and 7.x before 7.0.9, allows remote attackers to cause a denial of service (heap-based buffer overflow) or possibly have unspecified other impact via a long first argument to the PHP xmlrpc_encode_request function.",
  "repo": "php/php-src",
  "patch_hash": "e6c48213c22ed50b2b987b479fcc1ac709394caa",
  "patch_info": {
    "commit_hash": "e6c48213c22ed50b2b987b479fcc1ac709394caa",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/e6c48213c22ed50b2b987b479fcc1ac709394caa",
    "files": [
      "ext/xmlrpc/libxmlrpc/simplestring.c",
      "ext/xmlrpc/libxmlrpc/simplestring.h"
    ],
    "message": "Fix bug #72606: heap-buffer-overflow (write) simplestring_addn simplestring.c",
    "before_after_code_files": [
      "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
      "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h"
    ]
  },
  "patch_diff": {
    "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c": [
      "File: ext/xmlrpc/libxmlrpc/simplestring.c -> ext/xmlrpc/libxmlrpc/simplestring.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5:   Epinions.com may be contacted at feedback@epinions-inc.com",
      "",
      "[Removed Lines]",
      "9:   Copyright 2000 Epinions, Inc.",
      "11:   Subject to the following 3 conditions, Epinions, Inc.  permits you, free",
      "12:   of charge, to (a) use, copy, distribute, modify, perform and display this",
      "13:   software and associated documentation files (the \"Software\"), and (b)",
      "14:   permit others to whom the Software is furnished to do so as well.",
      "16:   1) The above copyright notice and this permission notice shall be included",
      "17:   without modification in all copies or substantial portions of the",
      "18:   Software.",
      "20:   2) THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT ANY WARRANTY OR CONDITION OF",
      "21:   ANY KIND, EXPRESS, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION ANY",
      "22:   IMPLIED WARRANTIES OF ACCURACY, MERCHANTABILITY, FITNESS FOR A PARTICULAR",
      "23:   PURPOSE OR NONINFRINGEMENT.",
      "25:   3) IN NO EVENT SHALL EPINIONS, INC. BE LIABLE FOR ANY DIRECT, INDIRECT,",
      "26:   SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES OR LOST PROFITS ARISING OUT",
      "27:   OF OR IN CONNECTION WITH THE SOFTWARE (HOWEVER ARISING, INCLUDING",
      "28:   NEGLIGENCE), EVEN IF EPINIONS, INC.  IS AWARE OF THE POSSIBILITY OF SUCH",
      "29:   DAMAGES.",
      "",
      "[Added Lines]",
      "9:   Copyright 2000 Epinions, Inc.",
      "11:   Subject to the following 3 conditions, Epinions, Inc.  permits you, free",
      "12:   of charge, to (a) use, copy, distribute, modify, perform and display this",
      "13:   software and associated documentation files (the \"Software\"), and (b)",
      "14:   permit others to whom the Software is furnished to do so as well.",
      "16:   1) The above copyright notice and this permission notice shall be included",
      "17:   without modification in all copies or substantial portions of the",
      "18:   Software.",
      "20:   2) THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT ANY WARRANTY OR CONDITION OF",
      "21:   ANY KIND, EXPRESS, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION ANY",
      "22:   IMPLIED WARRANTIES OF ACCURACY, MERCHANTABILITY, FITNESS FOR A PARTICULAR",
      "23:   PURPOSE OR NONINFRINGEMENT.",
      "25:   3) IN NO EVENT SHALL EPINIONS, INC. BE LIABLE FOR ANY DIRECT, INDIRECT,",
      "26:   SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES OR LOST PROFITS ARISING OUT",
      "27:   OF OR IN CONNECTION WITH THE SOFTWARE (HOWEVER ARISING, INCLUDING",
      "28:   NEGLIGENCE), EVEN IF EPINIONS, INC.  IS AWARE OF THE POSSIBILITY OF SUCH",
      "29:   DAMAGES.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "194:    if(target && source) {",
      "195:       if(!target->str) {",
      "196:          simplestring_init_str(target);",
      "197:       }",
      "198:       if(target->len + add_len + 1 > target->size) {",
      "205:          target->str = (char*)realloc(target->str, newsize);",
      "207:          target->size = target->str ? newsize : 0;",
      "",
      "[Removed Lines]",
      "193: void simplestring_addn(simplestring* target, const char* source, int add_len) {",
      "200:          int newsize = target->len + add_len + 1;",
      "201:          int incr = target->size * 2;",
      "204:          newsize = newsize - (newsize % incr) + incr;",
      "",
      "[Added Lines]",
      "193: void simplestring_addn(simplestring* target, const char* source, size_t add_len) {",
      "194:    size_t newsize = target->size, incr = 0;",
      "200:       if((SIZE_MAX - add_len) < target->len || (SIZE_MAX - add_len - 1) < target->len) {",
      "202:        return;",
      "203:       }",
      "207:          newsize = target->len + add_len + 1;",
      "208:          incr = target->size * 2;",
      "211:          if (incr) {",
      "212:             newsize = newsize - (newsize % incr) + incr;",
      "213:          }",
      "214:          if(newsize < (target->len + add_len + 1)) {",
      "216:           return;",
      "217:          }",
      "",
      "---------------"
    ],
    "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h": [
      "File: ext/xmlrpc/libxmlrpc/simplestring.h -> ext/xmlrpc/libxmlrpc/simplestring.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "63: void simplestring_clear(simplestring* string);",
      "64: void simplestring_free(simplestring* string);",
      "65: void simplestring_add(simplestring* string, const char* add);",
      "68: #ifdef __cplusplus",
      "69: }",
      "",
      "[Removed Lines]",
      "66: void simplestring_addn(simplestring* string, const char* add, int add_len);",
      "",
      "[Added Lines]",
      "66: void simplestring_addn(simplestring* string, const char* add, size_t add_len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18fef10644d865f9d25e49ed501f4f739efe44fc",
      "candidate_info": {
        "commit_hash": "18fef10644d865f9d25e49ed501f4f739efe44fc",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/18fef10644d865f9d25e49ed501f4f739efe44fc",
        "files": [
          "ext/bz2/bz2.c",
          "ext/iconv/iconv.c",
          "ext/imap/php_imap.c",
          "ext/intl/breakiterator/breakiterator_iterators.cpp",
          "ext/intl/intl_convert.c",
          "ext/intl/locale/locale_methods.c",
          "ext/intl/msgformat/msgformat_data.c",
          "ext/standard/exec.c",
          "ext/standard/php_smart_str.h",
          "ext/xmlrpc/libxmlrpc/base64.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/zip/php_zip.c",
          "ext/zlib/zlib.c"
        ],
        "message": "More string length checks & fixes",
        "before_after_code_files": [
          "ext/bz2/bz2.c||ext/bz2/bz2.c",
          "ext/iconv/iconv.c||ext/iconv/iconv.c",
          "ext/imap/php_imap.c||ext/imap/php_imap.c",
          "ext/intl/breakiterator/breakiterator_iterators.cpp||ext/intl/breakiterator/breakiterator_iterators.cpp",
          "ext/intl/intl_convert.c||ext/intl/intl_convert.c",
          "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
          "ext/intl/msgformat/msgformat_data.c||ext/intl/msgformat/msgformat_data.c",
          "ext/standard/exec.c||ext/standard/exec.c",
          "ext/standard/php_smart_str.h||ext/standard/php_smart_str.h",
          "ext/xmlrpc/libxmlrpc/base64.c||ext/xmlrpc/libxmlrpc/base64.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/zip/php_zip.c||ext/zip/php_zip.c",
          "ext/zlib/zlib.c||ext/zlizlib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c"
          ],
          "candidate": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/bz2/bz2.c||ext/bz2/bz2.c": [
          "File: ext/bz2/bz2.c -> ext/bz2/bz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:  dest_len   = (unsigned int) (source_len + (0.01 * source_len) + 600);",
          "519:  if (argc > 1) {",
          "",
          "[Removed Lines]",
          "516:  dest = emalloc(dest_len + 1);",
          "",
          "[Added Lines]",
          "516:  dest = safe_emalloc(dest_len, 1, 1);",
          "",
          "---------------"
        ],
        "ext/iconv/iconv.c||ext/iconv/iconv.c": [
          "File: ext/iconv/iconv.c -> ext/iconv/iconv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2491:   &out_buffer, &out_len, out_charset, in_charset);",
          "2492:  _php_iconv_show_error(err, out_charset, in_charset TSRMLS_CC);",
          "2493:  if (err == PHP_ICONV_ERR_SUCCESS && out_buffer != NULL) {",
          "2495:  } else {",
          "2496:   if (out_buffer != NULL) {",
          "2497:    efree(out_buffer);",
          "",
          "[Removed Lines]",
          "2494:   RETVAL_STRINGL(out_buffer, out_len, 0);",
          "",
          "[Added Lines]",
          "2494:   RETVAL_STRINGL_CHECK(out_buffer, out_len, 0);",
          "",
          "---------------"
        ],
        "ext/imap/php_imap.c||ext/imap/php_imap.c": [
          "File: ext/imap/php_imap.c -> ext/imap/php_imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3916: #define PHP_IMAP_CLEAN if (bufferTo) efree(bufferTo); if (bufferCc) efree(bufferCc); if (bufferBcc) efree(bufferBcc); if (bufferHeader) efree(bufferHeader);",
          "3917: #define PHP_IMAP_BAD_DEST PHP_IMAP_CLEAN; efree(tempMailTo); return (BAD_MSG_DESTINATION);",
          "3920:  memset(bufferHeader, 0, bufferLen);",
          "3921:  if (to && *to) {",
          "3922:   strlcat(bufferHeader, \"To: \", bufferLen + 1);",
          "",
          "[Removed Lines]",
          "3919:  bufferHeader = (char *)emalloc(bufferLen + 1);",
          "",
          "[Added Lines]",
          "3919:  bufferHeader = (char *)safe_emalloc(bufferLen, 1, 1);",
          "",
          "---------------"
        ],
        "ext/intl/breakiterator/breakiterator_iterators.cpp||ext/intl/breakiterator/breakiterator_iterators.cpp": [
          "File: ext/intl/breakiterator/breakiterator_iterators.cpp -> ext/intl/breakiterator/breakiterator_iterators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:  }",
          "183:  assert(next <= slen && next >= cur);",
          "184:  len = next - cur;",
          "187:  memcpy(res, &s[cur], len);",
          "188:  res[len] = '\\0';",
          "",
          "[Removed Lines]",
          "185:  res = static_cast<char*>(emalloc(len + 1));",
          "",
          "[Added Lines]",
          "185:  res = static_cast<char*>(safe_emalloc(len, 1, 1));",
          "",
          "---------------"
        ],
        "ext/intl/intl_convert.c||ext/intl/intl_convert.c": [
          "File: ext/intl/intl_convert.c -> ext/intl/intl_convert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  UErrorCode* status )",
          "50: {",
          "51:  UChar*      dst_buf = NULL;",
          "",
          "[Removed Lines]",
          "52:  int32_t     dst_len = 0;",
          "",
          "[Added Lines]",
          "52:  uint32_t    dst_len = 0;",
          "",
          "---------------"
        ],
        "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c": [
          "File: ext/intl/locale/locale_methods.c -> ext/intl/locale/locale_methods.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  int32_t      buflen          = 512;",
          "264:  UErrorCode   status          = U_ZERO_ERROR;",
          "267:  if( strcmp(tag_name, LOC_CANONICALIZE_TAG) != 0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:  if (strlen(loc_name) > INTL_MAX_LOCALE_LEN) {",
          "267:   return NULL;",
          "268:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "702:         RETURN_FALSE;",
          "703:     }",
          "705:     if(loc_name_len == 0) {",
          "706:         loc_name = intl_locale_get_default(TSRMLS_C);",
          "707:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:  INTL_CHECK_LOCALE_LEN(strlen(loc_name));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1109:         RETURN_FALSE;",
          "1110:     }",
          "1112:     if(loc_name_len == 0) {",
          "1113:         loc_name = intl_locale_get_default(TSRMLS_C);",
          "1114:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1117:     INTL_CHECK_LOCALE_LEN(strlen(loc_name));",
          "",
          "---------------"
        ],
        "ext/intl/msgformat/msgformat_data.c||ext/intl/msgformat/msgformat_data.c": [
          "File: ext/intl/msgformat/msgformat_data.c -> ext/intl/msgformat/msgformat_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #ifdef MSG_FORMAT_QUOTE_APOS",
          "84: {",
          "85:  if(*spattern && *spattern_len && u_strchr(*spattern, (UChar)'\\'')) {",
          "87:   uint32_t npattern_len;",
          "88:   npattern_len = umsg_autoQuoteApostrophe(*spattern, *spattern_len, npattern, 2*(*spattern_len)+1, ec);",
          "89:   efree(*spattern);",
          "",
          "[Removed Lines]",
          "83: int msgformat_fix_quotes(UChar **spattern, uint32_t *spattern_len, UErrorCode *ec)",
          "86:   UChar *npattern = emalloc(sizeof(UChar)*(2*(*spattern_len)+1));",
          "",
          "[Added Lines]",
          "83: int msgformat_fix_quotes(UChar **spattern, uint32_t *spattern_len, UErrorCode *ec)",
          "86:   UChar *npattern = safe_emalloc(sizeof(UChar)*2, *spattern_len, sizeof(UChar));",
          "",
          "---------------"
        ],
        "ext/standard/exec.c||ext/standard/exec.c": [
          "File: ext/standard/exec.c -> ext/standard/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:    return;",
          "493:   }",
          "494:   cmd = php_escape_shell_cmd(command);",
          "496:  } else {",
          "497:   RETVAL_EMPTY_STRING();",
          "498:  }",
          "",
          "[Removed Lines]",
          "495:   RETVAL_STRING(cmd, 0);",
          "",
          "[Added Lines]",
          "495:   RETVAL_STRINGL_CHECK(cmd, strlen(cmd), 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:    return;",
          "518:   }",
          "519:   cmd = php_escape_shell_arg(argument);",
          "521:  }",
          "522: }",
          "",
          "[Removed Lines]",
          "520:   RETVAL_STRING(cmd, 0);",
          "",
          "[Added Lines]",
          "520:   RETVAL_STRINGL_CHECK(cmd, strlen(cmd), 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:  php_stream_close(stream);",
          "553:  if (total_readbytes > 0) {",
          "555:  }",
          "556: }",
          "",
          "[Removed Lines]",
          "554:   RETVAL_STRINGL(ret, total_readbytes, 0);",
          "",
          "[Added Lines]",
          "554:   RETVAL_STRINGL_CHECK(ret, total_readbytes, 0);",
          "",
          "---------------"
        ],
        "ext/standard/php_smart_str.h||ext/standard/php_smart_str.h": [
          "File: ext/standard/php_smart_str.h -> ext/standard/php_smart_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   newlen = (n);            \\",
          "58:   (d)->a = newlen < SMART_STR_START_SIZE       \\",
          "59:     ? SMART_STR_START_SIZE         \\",
          "61:   SMART_STR_DO_REALLOC(d, what);        \\",
          "62:  } else {              \\",
          "63:   newlen = (d)->len + (n);         \\",
          "",
          "[Removed Lines]",
          "60:     : newlen + SMART_STR_PREALLOC;      \\",
          "",
          "[Added Lines]",
          "60:     : (newlen >= (INT_MAX - SMART_STR_PREALLOC)? newlen \\",
          "61:        : (newlen + SMART_STR_PREALLOC));  \\",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/base64.c||ext/xmlrpc/libxmlrpc/base64.c": [
          "File: ext/xmlrpc/libxmlrpc/base64.c -> ext/xmlrpc/libxmlrpc/base64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <stdlib.h>",
          "17: #include <ctype.h>",
          "19: #include \"base64.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: void buffer_add(struct buffer_st *b, char c)",
          "33: {",
          "35:   b->offset++;",
          "36:   if (b->offset == b->length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:   if ((INT_MAX - b->length) <= 512) {",
          "36:   return;",
          "37:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   }",
          "71:   dtable[62] = '+';",
          "72:   dtable[63] = '/';",
          "74:   while (!hiteof) {",
          "75:     unsigned char igroup[3], ogroup[4];",
          "76:     int c, n;",
          "78:     igroup[0] = igroup[1] = igroup[2] = 0;",
          "79:     for (n = 0; n < 3; n++) {",
          "80:       c = *(source++);",
          "81:       offset++;",
          "83:  hiteof = 1;",
          "84:  break;",
          "85:       }",
          "",
          "[Removed Lines]",
          "82:       if (offset > length) {",
          "",
          "[Added Lines]",
          "86:       if (offset > length || offset <= 0) {",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.c -> ext/xmlrpc/libxmlrpc/simplestring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: #include <stdlib.h>",
          "82: #include <string.h>",
          "83: #include \"simplestring.h\"",
          "85: #define my_free(thing)  if(thing) {free(thing); thing = 0;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:          simplestring_init_str(target);",
          "201:       }",
          "205:        return;",
          "206:       }",
          "",
          "[Removed Lines]",
          "203:       if((SIZE_MAX - add_len) < target->len || (SIZE_MAX - add_len - 1) < target->len) {",
          "",
          "[Added Lines]",
          "204:       if((INT_MAX - add_len) < target->len || (INT_MAX - add_len - 1) < target->len) {",
          "",
          "---------------"
        ],
        "ext/zip/php_zip.c||ext/zip/php_zip.c": [
          "File: ext/zip/php_zip.c -> ext/zip/php_zip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:  }",
          "1703:  if (dirname[dirname_len-1] != '/') {",
          "1705:   strcpy(s, dirname);",
          "1706:   s[dirname_len] = '/';",
          "1707:   s[dirname_len+1] = '\\0';",
          "",
          "[Removed Lines]",
          "1704:   s=(char *)emalloc(dirname_len+2);",
          "",
          "[Added Lines]",
          "1704:   s=(char *)safe_emalloc(dirname_len, 1, 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1916:  ze_obj = (ze_zip_object*) zend_object_store_get_object(this TSRMLS_CC);",
          "1917:  if (ze_obj->buffers_cnt) {",
          "1919:   pos = ze_obj->buffers_cnt++;",
          "1920:  } else {",
          "1921:   ze_obj->buffers = (char **)emalloc(sizeof(char *));",
          "1922:   ze_obj->buffers_cnt++;",
          "1923:   pos = 0;",
          "1924:  }",
          "1926:  memcpy(ze_obj->buffers[pos], buffer, buffer_len + 1);",
          "1928:  zs = zip_source_buffer(intern, ze_obj->buffers[pos], buffer_len, 0);",
          "",
          "[Removed Lines]",
          "1918:   ze_obj->buffers = (char **)erealloc(ze_obj->buffers, sizeof(char *) * (ze_obj->buffers_cnt+1));",
          "1925:  ze_obj->buffers[pos] = (char *)emalloc(buffer_len + 1);",
          "",
          "[Added Lines]",
          "1918:   ze_obj->buffers = (char **)safe_erealloc(ze_obj->buffers, sizeof(char *), (ze_obj->buffers_cnt+1), 0);",
          "1925:  ze_obj->buffers[pos] = (char *)safe_emalloc(buffer_len, 1, 1);",
          "",
          "---------------"
        ],
        "ext/zlib/zlib.c||ext/zlizlib.c": [
          "File: ext/zlib/zlib.c -> ext/zlizlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:  if (SUCCESS != php_zlib_encode(in_buf, in_len, &out_buf, &out_len, encoding, level TSRMLS_CC)) { \\",
          "674:   RETURN_FALSE; \\",
          "675:  } \\",
          "677: }",
          "679: #define PHP_ZLIB_DECODE_FUNC(name, encoding) \\",
          "",
          "[Removed Lines]",
          "676:  RETURN_STRINGL(out_buf, out_len, 0); \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "669763d88a8bb9707a45f0937a129b63a161d2f0",
      "candidate_info": {
        "commit_hash": "669763d88a8bb9707a45f0937a129b63a161d2f0",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/669763d88a8bb9707a45f0937a129b63a161d2f0",
        "files": [
          "Zend/zend_multiply.h",
          "Zend/zend_strtod.c",
          "ext/bz2/bz2.c",
          "ext/pgsql/pgsql.c",
          "ext/spl/spl_directory.c",
          "ext/standard/html.c",
          "ext/standard/math.c",
          "ext/standard/user_filters.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/xmlrpc/libxmlrpc/simplestring.h"
        ],
        "message": "More int->size_t and string overflow fixes",
        "before_after_code_files": [
          "Zend/zend_multiply.h||Zend/zend_multiply.h",
          "Zend/zend_strtod.c||Zend/zend_strtod.c",
          "ext/bz2/bz2.c||ext/bz2/bz2.c",
          "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c",
          "ext/spl/spl_directory.c||ext/spl/spl_directory.c",
          "ext/standard/html.c||ext/standard/html.c",
          "ext/standard/math.c||ext/standard/math.c",
          "ext/standard/user_filters.c||ext/standard/user_filters.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
            "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h"
          ],
          "candidate": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
            "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_multiply.h||Zend/zend_multiply.h": [
          "File: Zend/zend_multiply.h -> Zend/zend_multiply.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:  return ret;",
          "279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282: static zend_always_inline size_t zend_safe_addmult(size_t nmemb, size_t size, size_t offset, const char *message)",
          "283: {",
          "284:  int overflow;",
          "285:  size_t ret = zend_safe_address(nmemb, size, offset, &overflow);",
          "287:  if (UNEXPECTED(overflow)) {",
          "288:   zend_error_noreturn(E_ERROR, \"Possible integer overflow in %s (%zu * %zu + %zu)\", message, nmemb, size, offset);",
          "289:   return 0;",
          "290:  }",
          "291:  return ret;",
          "292: }",
          "",
          "---------------"
        ],
        "Zend/zend_strtod.c||Zend/zend_strtod.c": [
          "File: Zend/zend_strtod.c -> Zend/zend_strtod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2677:    }",
          "2678:   }",
          "2679:  dig_done:",
          "2680:  e = 0;",
          "2681:  if (c == 'e' || c == 'E') {",
          "2682:   if (!nd && !nz && !nz0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2680:   if (nd < 0) {",
          "2682:    nd = DBL_DIG + 2;",
          "2683:   }",
          "2684:   if (nf < 0) {",
          "2686:    nf = DBL_DIG + 2;",
          "2687:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4543:   }",
          "4544:   freelist[i] = NULL;",
          "4545:  }",
          "4547: }",
          "4549: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "4546:  FREE_DTOA_LOCK(0)",
          "",
          "[Added Lines]",
          "4554:  FREE_DTOA_LOCK(0)",
          "",
          "---------------"
        ],
        "ext/bz2/bz2.c||ext/bz2/bz2.c": [
          "File: ext/bz2/bz2.c -> ext/bz2/bz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:  bzs.avail_in = source_len;",
          "591:  bzs.avail_out = source_len * 2;",
          "593:  bzs.next_out = ZSTR_VAL(dest);",
          "595:  while ((error = BZ2_bzDecompress(&bzs)) == BZ_OK && bzs.avail_in > 0) {",
          "",
          "[Removed Lines]",
          "592:  dest = zend_string_alloc(bzs.avail_out + 1, 0);",
          "",
          "[Added Lines]",
          "591:  dest = zend_string_safe_alloc(source_len, 2, 1, 0);",
          "",
          "---------------"
        ],
        "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c": [
          "File: ext/pgsql/pgsql.c -> ext/pgsql/pgsql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4356:    break;",
          "4357:  }",
          "4360: #ifdef HAVE_PQESCAPE_CONN",
          "4361:  if (link) {",
          "4362:   if ((pgsql = (PGconn *)zend_fetch_resource2(link, \"PostgreSQL link\", le_link, le_plink)) == NULL) {",
          "",
          "[Removed Lines]",
          "4359:  to = zend_string_alloc(ZSTR_LEN(from) * 2, 0);",
          "",
          "[Added Lines]",
          "4359:  to = zend_string_safe_alloc(ZSTR_LEN(from), 2, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4408:    RETURN_FALSE;",
          "4409:   }",
          "4410:   to = (char *)PQescapeByteaConn(pgsql, (unsigned char *)from, (size_t)from_len, &to_len);",
          "4412: #endif",
          "4413:   to = (char *)PQescapeBytea((unsigned char*)from, from_len, &to_len);",
          "",
          "[Removed Lines]",
          "4411:  } else",
          "",
          "[Added Lines]",
          "4411:  } else",
          "",
          "---------------"
        ],
        "ext/spl/spl_directory.c||ext/spl/spl_directory.c": [
          "File: ext/spl/spl_directory.c -> ext/spl/spl_directory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:    if (intern->file_name) {",
          "200:     efree(intern->file_name);",
          "201:    }",
          "203:                                     spl_filesystem_object_get_path(intern, NULL),",
          "204:                                     slash, intern->u.dir.entry.d_name);",
          "205:    break;",
          "",
          "[Removed Lines]",
          "202:    intern->file_name_len = (int)spprintf(&intern->file_name, 0, \"%s%c%s\",",
          "",
          "[Added Lines]",
          "202:    intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:  int skip_dots = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_SKIPDOTS);",
          "234:  intern->type = SPL_FS_DIR;",
          "236:  intern->u.dir.dirp = php_stream_opendir(path, REPORT_ERRORS, FG(default_context));",
          "238:  if (intern->_path_len > 1 && IS_SLASH_AT(path, intern->_path_len-1)) {",
          "",
          "[Removed Lines]",
          "235:  intern->_path_len = (int)strlen(path);",
          "",
          "[Added Lines]",
          "235:  intern->_path_len = strlen(path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:  }",
          "385:  intern->file_name = use_copy ? estrndup(path, len) : path;",
          "388:  while (intern->file_name_len > 1 && IS_SLASH_AT(intern->file_name, intern->file_name_len-1)) {",
          "389:   intern->file_name[intern->file_name_len-1] = 0;",
          "",
          "[Removed Lines]",
          "386:  intern->file_name_len = (int)len;",
          "",
          "[Added Lines]",
          "386:  intern->file_name_len = len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "397:  p2 = 0;",
          "398: #endif",
          "399:  if (p1 || p2) {",
          "401:  } else {",
          "402:   intern->_path_len = 0;",
          "403:  }",
          "",
          "[Removed Lines]",
          "400:   intern->_path_len = (int)((p1 > p2 ? p1 : p2) - intern->file_name);",
          "",
          "[Added Lines]",
          "400:   intern->_path_len = ((p1 > p2 ? p1 : p2) - intern->file_name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "916:  const char *p;",
          "917:  size_t flen;",
          "918:  size_t path_len;",
          "920:  zend_string *ret;",
          "922:  if (zend_parse_parameters_none() == FAILURE) {",
          "",
          "[Removed Lines]",
          "919:  int idx;",
          "",
          "[Added Lines]",
          "919:  size_t idx;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "938:  p = zend_memrchr(ZSTR_VAL(ret), '.', ZSTR_LEN(ret));",
          "939:  if (p) {",
          "941:   RETVAL_STRINGL(ZSTR_VAL(ret) + idx + 1, ZSTR_LEN(ret) - idx - 1);",
          "942:   zend_string_release(ret);",
          "943:   return;",
          "",
          "[Removed Lines]",
          "940:   idx = (int)(p - ZSTR_VAL(ret));",
          "",
          "[Added Lines]",
          "940:   idx = p - ZSTR_VAL(ret);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "954: {",
          "955:  spl_filesystem_object *intern = Z_SPLFILESYSTEM_P(getThis());",
          "956:  const char *p;",
          "958:  zend_string *fname;",
          "960:  if (zend_parse_parameters_none() == FAILURE) {",
          "",
          "[Removed Lines]",
          "957:  int idx;",
          "",
          "[Added Lines]",
          "957:  size_t idx;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "966:  p = zend_memrchr(ZSTR_VAL(fname), '.', ZSTR_LEN(fname));",
          "967:  if (p) {",
          "969:   RETVAL_STRINGL(ZSTR_VAL(fname) + idx + 1, ZSTR_LEN(fname) - idx - 1);",
          "970:   zend_string_release(fname);",
          "971:  } else {",
          "",
          "[Removed Lines]",
          "968:   idx = (int)(p - ZSTR_VAL(fname));",
          "",
          "[Added Lines]",
          "968:   idx = p - ZSTR_VAL(fname);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1383:   if (path) {",
          "1384:    char *dpath = estrndup(path, path_len);",
          "1385:    path_len = php_dirname(dpath, path_len);",
          "1387:    efree(dpath);",
          "1388:   }",
          "1389:  }",
          "",
          "[Removed Lines]",
          "1386:    spl_filesystem_object_create_info(intern, dpath, (int)path_len, 1, ce, return_value);",
          "",
          "[Added Lines]",
          "1386:    spl_filesystem_object_create_info(intern, dpath, path_len, 1, ce, return_value);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1507:  subdir = Z_SPLFILESYSTEM_P(return_value);",
          "1508:  if (subdir) {",
          "1509:   if (intern->u.dir.sub_path && intern->u.dir.sub_path[0]) {",
          "1511:   } else {",
          "1513:    subdir->u.dir.sub_path = estrndup(intern->u.dir.entry.d_name, subdir->u.dir.sub_path_len);",
          "1514:   }",
          "1515:   subdir->info_class = intern->info_class;",
          "",
          "[Removed Lines]",
          "1510:    subdir->u.dir.sub_path_len = (int)spprintf(&subdir->u.dir.sub_path, 0, \"%s%c%s\", intern->u.dir.sub_path, slash, intern->u.dir.entry.d_name);",
          "1512:    subdir->u.dir.sub_path_len = (int)strlen(intern->u.dir.entry.d_name);",
          "",
          "[Added Lines]",
          "1510:    subdir->u.dir.sub_path_len = spprintf(&subdir->u.dir.sub_path, 0, \"%s%c%s\", intern->u.dir.sub_path, slash, intern->u.dir.entry.d_name);",
          "1512:    subdir->u.dir.sub_path_len = strlen(intern->u.dir.entry.d_name);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2293:   p2 = 0;",
          "2294: #endif",
          "2295:   if (p1 || p2) {",
          "2297:   } else {",
          "2298:    intern->_path_len = 0;",
          "2299:   }",
          "",
          "[Removed Lines]",
          "2296:    intern->_path_len = (int)((p1 > p2 ? p1 : p2) - tmp_path);",
          "",
          "[Added Lines]",
          "2296:    intern->_path_len = ((p1 > p2 ? p1 : p2) - tmp_path);",
          "",
          "---------------"
        ],
        "ext/standard/html.c||ext/standard/html.c": [
          "File: ext/standard/html.c -> ext/standard/html.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1269:  if (oldlen < 64) {",
          "1270:   maxlen = 128;",
          "1271:  } else {",
          "1277:  }",
          "1279:  replaced = zend_string_alloc(maxlen, 0);",
          "",
          "[Removed Lines]",
          "1272:   maxlen = 2 * oldlen;",
          "1273:   if (maxlen < oldlen) {",
          "1274:    zend_error_noreturn(E_ERROR, \"Input string is too long\");",
          "1275:    return NULL;",
          "1276:   }",
          "",
          "[Added Lines]",
          "1272:   maxlen = zend_safe_addmult(oldlen, 2, 0, \"html_entities\");",
          "",
          "---------------"
        ],
        "ext/standard/math.c||ext/standard/math.c": [
          "File: ext/standard/math.c -> ext/standard/math.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1153:  if (dp) {",
          "1155:  } else {",
          "1158:  }",
          "1161:  if (thousand_sep) {",
          "1167:  }",
          "1169:  reslen = integral;",
          "",
          "[Removed Lines]",
          "1154:   integral = (int)(dp - ZSTR_VAL(tmpbuf));",
          "1157:   integral = (int)ZSTR_LEN(tmpbuf);",
          "1162:   if (integral + thousand_sep_len * ((integral-1) / 3) < integral) {",
          "1164:    php_error_docref(NULL, E_ERROR, \"String overflow\");",
          "1165:   }",
          "1166:   integral += thousand_sep_len * ((integral-1) / 3);",
          "",
          "[Added Lines]",
          "1154:   integral = (dp - ZSTR_VAL(tmpbuf));",
          "1157:   integral = ZSTR_LEN(tmpbuf);",
          "1162:   integral = zend_safe_addmult((integral-1)/3, thousand_sep_len, integral, \"number formatting\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1172:   reslen += dec;",
          "1174:   if (dec_point) {",
          "1180:   }",
          "1181:  }",
          "",
          "[Removed Lines]",
          "1175:    if (reslen + dec_point_len < dec_point_len) {",
          "1177:     php_error_docref(NULL, E_ERROR, \"String overflow\");",
          "1178:    }",
          "1179:    reslen += dec_point_len;",
          "",
          "[Added Lines]",
          "1171:    reslen = zend_safe_addmult(reslen, 1, dec_point_len, \"number formatting\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1196:  if (dec) {",
          "1201:   while (topad--) {",
          "",
          "[Removed Lines]",
          "1197:   int declen = (int)(dp ? s - dp : 0);",
          "1198:   int topad = dec > declen ? dec - declen : 0;",
          "",
          "[Added Lines]",
          "1189:   size_t declen = (dp ? s - dp : 0);",
          "1190:   size_t topad = dec > declen ? dec - declen : 0;",
          "",
          "---------------"
        ],
        "ext/standard/user_filters.c||ext/standard/user_filters.c": [
          "File: ext/standard/user_filters.c -> ext/standard/user_filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:  zval obj, zfilter;",
          "269:  zval func_name;",
          "270:  zval retval;",
          "274:  if (persistent) {",
          "",
          "[Removed Lines]",
          "271:  int len;",
          "",
          "[Added Lines]",
          "271:  size_t len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:   return NULL;",
          "278:  }",
          "283:  if (NULL == (fdat = zend_hash_str_find_ptr(BG(user_filter_map), (char*)filtername, len))) {",
          "",
          "[Removed Lines]",
          "280:  len = (int)strlen(filtername);",
          "",
          "[Added Lines]",
          "280:  len = strlen(filtername);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:            TODO: Allow failed userfilter creations to continue",
          "291:   if ((period = strrchr(filtername, '.'))) {",
          "",
          "[Removed Lines]",
          "292:    char *wildcard = emalloc(len + 3);",
          "",
          "[Added Lines]",
          "292:    char *wildcard = safe_emalloc(len, 1, 3);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:   if (!bucket->own_buf) {",
          "453:    bucket = php_stream_bucket_make_writeable(bucket);",
          "454:   }",
          "456:    bucket->buf = perealloc(bucket->buf, Z_STRLEN_P(pzdata), bucket->is_persistent);",
          "457:    bucket->buflen = Z_STRLEN_P(pzdata);",
          "458:   }",
          "",
          "[Removed Lines]",
          "455:   if ((int)bucket->buflen != Z_STRLEN_P(pzdata)) {",
          "",
          "[Added Lines]",
          "455:   if (bucket->buflen != Z_STRLEN_P(pzdata)) {",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.c -> ext/xmlrpc/libxmlrpc/simplestring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:          simplestring_init_str(target);",
          "202:       }",
          "206:        return;",
          "207:       }",
          "",
          "[Removed Lines]",
          "204:       if((INT_MAX - add_len) < target->len || (INT_MAX - add_len - 1) < target->len) {",
          "",
          "[Added Lines]",
          "204:       if((SIZE_MAX - add_len) < target->len || (SIZE_MAX - add_len - 1) < target->len) {",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.h -> ext/xmlrpc/libxmlrpc/simplestring.h"
        ]
      }
    },
    {
      "candidate_hash": "1fd18821e08c72e026de30ab915b73ec32dcf0ad",
      "candidate_info": {
        "commit_hash": "1fd18821e08c72e026de30ab915b73ec32dcf0ad",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/1fd18821e08c72e026de30ab915b73ec32dcf0ad",
        "files": [
          "ext/bz2/bz2.c",
          "ext/iconv/iconv.c",
          "ext/imap/php_imap.c",
          "ext/intl/breakiterator/breakiterator_iterators.cpp",
          "ext/intl/intl_convert.c",
          "ext/intl/locale/locale_methods.c",
          "ext/intl/msgformat/msgformat_data.c",
          "ext/standard/exec.c",
          "ext/standard/php_smart_str.h",
          "ext/xmlrpc/libxmlrpc/base64.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/zip/php_zip.c",
          "ext/zlib/zlib.c"
        ],
        "message": "More string length checks & fixes",
        "before_after_code_files": [
          "ext/bz2/bz2.c||ext/bz2/bz2.c",
          "ext/iconv/iconv.c||ext/iconv/iconv.c",
          "ext/imap/php_imap.c||ext/imap/php_imap.c",
          "ext/intl/breakiterator/breakiterator_iterators.cpp||ext/intl/breakiterator/breakiterator_iterators.cpp",
          "ext/intl/intl_convert.c||ext/intl/intl_convert.c",
          "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
          "ext/intl/msgformat/msgformat_data.c||ext/intl/msgformat/msgformat_data.c",
          "ext/standard/exec.c||ext/standard/exec.c",
          "ext/standard/php_smart_str.h||ext/standard/php_smart_str.h",
          "ext/xmlrpc/libxmlrpc/base64.c||ext/xmlrpc/libxmlrpc/base64.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/zip/php_zip.c||ext/zip/php_zip.c",
          "ext/zlib/zlib.c||ext/zlizlib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c"
          ],
          "candidate": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/bz2/bz2.c||ext/bz2/bz2.c": [
          "File: ext/bz2/bz2.c -> ext/bz2/bz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:  dest_len   = (unsigned int) (source_len + (0.01 * source_len) + 600);",
          "519:  if (argc > 1) {",
          "",
          "[Removed Lines]",
          "516:  dest = emalloc(dest_len + 1);",
          "",
          "[Added Lines]",
          "516:  dest = safe_emalloc(dest_len, 1, 1);",
          "",
          "---------------"
        ],
        "ext/iconv/iconv.c||ext/iconv/iconv.c": [
          "File: ext/iconv/iconv.c -> ext/iconv/iconv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2491:   &out_buffer, &out_len, out_charset, in_charset);",
          "2492:  _php_iconv_show_error(err, out_charset, in_charset TSRMLS_CC);",
          "2493:  if (err == PHP_ICONV_ERR_SUCCESS && out_buffer != NULL) {",
          "2495:  } else {",
          "2496:   if (out_buffer != NULL) {",
          "2497:    efree(out_buffer);",
          "",
          "[Removed Lines]",
          "2494:   RETVAL_STRINGL(out_buffer, out_len, 0);",
          "",
          "[Added Lines]",
          "2494:   RETVAL_STRINGL_CHECK(out_buffer, out_len, 0);",
          "",
          "---------------"
        ],
        "ext/imap/php_imap.c||ext/imap/php_imap.c": [
          "File: ext/imap/php_imap.c -> ext/imap/php_imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3916: #define PHP_IMAP_CLEAN if (bufferTo) efree(bufferTo); if (bufferCc) efree(bufferCc); if (bufferBcc) efree(bufferBcc); if (bufferHeader) efree(bufferHeader);",
          "3917: #define PHP_IMAP_BAD_DEST PHP_IMAP_CLEAN; efree(tempMailTo); return (BAD_MSG_DESTINATION);",
          "3920:  memset(bufferHeader, 0, bufferLen);",
          "3921:  if (to && *to) {",
          "3922:   strlcat(bufferHeader, \"To: \", bufferLen + 1);",
          "",
          "[Removed Lines]",
          "3919:  bufferHeader = (char *)emalloc(bufferLen + 1);",
          "",
          "[Added Lines]",
          "3919:  bufferHeader = (char *)safe_emalloc(bufferLen, 1, 1);",
          "",
          "---------------"
        ],
        "ext/intl/breakiterator/breakiterator_iterators.cpp||ext/intl/breakiterator/breakiterator_iterators.cpp": [
          "File: ext/intl/breakiterator/breakiterator_iterators.cpp -> ext/intl/breakiterator/breakiterator_iterators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:  }",
          "183:  assert(next <= slen && next >= cur);",
          "184:  len = next - cur;",
          "187:  memcpy(res, &s[cur], len);",
          "188:  res[len] = '\\0';",
          "",
          "[Removed Lines]",
          "185:  res = static_cast<char*>(emalloc(len + 1));",
          "",
          "[Added Lines]",
          "185:  res = static_cast<char*>(safe_emalloc(len, 1, 1));",
          "",
          "---------------"
        ],
        "ext/intl/intl_convert.c||ext/intl/intl_convert.c": [
          "File: ext/intl/intl_convert.c -> ext/intl/intl_convert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  UErrorCode* status )",
          "50: {",
          "51:  UChar*      dst_buf = NULL;",
          "",
          "[Removed Lines]",
          "52:  int32_t     dst_len = 0;",
          "",
          "[Added Lines]",
          "52:  uint32_t    dst_len = 0;",
          "",
          "---------------"
        ],
        "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c": [
          "File: ext/intl/locale/locale_methods.c -> ext/intl/locale/locale_methods.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  int32_t      buflen          = 512;",
          "264:  UErrorCode   status          = U_ZERO_ERROR;",
          "267:  if( strcmp(tag_name, LOC_CANONICALIZE_TAG) != 0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:  if (strlen(loc_name) > INTL_MAX_LOCALE_LEN) {",
          "267:   return NULL;",
          "268:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "702:         RETURN_FALSE;",
          "703:     }",
          "705:     if(loc_name_len == 0) {",
          "706:         loc_name = intl_locale_get_default(TSRMLS_C);",
          "707:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:  INTL_CHECK_LOCALE_LEN(strlen(loc_name));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1109:         RETURN_FALSE;",
          "1110:     }",
          "1112:     if(loc_name_len == 0) {",
          "1113:         loc_name = intl_locale_get_default(TSRMLS_C);",
          "1114:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1117:     INTL_CHECK_LOCALE_LEN(strlen(loc_name));",
          "",
          "---------------"
        ],
        "ext/intl/msgformat/msgformat_data.c||ext/intl/msgformat/msgformat_data.c": [
          "File: ext/intl/msgformat/msgformat_data.c -> ext/intl/msgformat/msgformat_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #ifdef MSG_FORMAT_QUOTE_APOS",
          "84: {",
          "85:  if(*spattern && *spattern_len && u_strchr(*spattern, (UChar)'\\'')) {",
          "87:   uint32_t npattern_len;",
          "88:   npattern_len = umsg_autoQuoteApostrophe(*spattern, *spattern_len, npattern, 2*(*spattern_len)+1, ec);",
          "89:   efree(*spattern);",
          "",
          "[Removed Lines]",
          "83: int msgformat_fix_quotes(UChar **spattern, uint32_t *spattern_len, UErrorCode *ec)",
          "86:   UChar *npattern = emalloc(sizeof(UChar)*(2*(*spattern_len)+1));",
          "",
          "[Added Lines]",
          "83: int msgformat_fix_quotes(UChar **spattern, uint32_t *spattern_len, UErrorCode *ec)",
          "86:   UChar *npattern = safe_emalloc(sizeof(UChar)*2, *spattern_len, sizeof(UChar));",
          "",
          "---------------"
        ],
        "ext/standard/exec.c||ext/standard/exec.c": [
          "File: ext/standard/exec.c -> ext/standard/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:    return;",
          "493:   }",
          "494:   cmd = php_escape_shell_cmd(command);",
          "496:  } else {",
          "497:   RETVAL_EMPTY_STRING();",
          "498:  }",
          "",
          "[Removed Lines]",
          "495:   RETVAL_STRING(cmd, 0);",
          "",
          "[Added Lines]",
          "495:   RETVAL_STRINGL_CHECK(cmd, strlen(cmd), 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:    return;",
          "518:   }",
          "519:   cmd = php_escape_shell_arg(argument);",
          "521:  }",
          "522: }",
          "",
          "[Removed Lines]",
          "520:   RETVAL_STRING(cmd, 0);",
          "",
          "[Added Lines]",
          "520:   RETVAL_STRINGL_CHECK(cmd, strlen(cmd), 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:  php_stream_close(stream);",
          "553:  if (total_readbytes > 0) {",
          "555:  }",
          "556: }",
          "",
          "[Removed Lines]",
          "554:   RETVAL_STRINGL(ret, total_readbytes, 0);",
          "",
          "[Added Lines]",
          "554:   RETVAL_STRINGL_CHECK(ret, total_readbytes, 0);",
          "",
          "---------------"
        ],
        "ext/standard/php_smart_str.h||ext/standard/php_smart_str.h": [
          "File: ext/standard/php_smart_str.h -> ext/standard/php_smart_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   newlen = (n);            \\",
          "58:   (d)->a = newlen < SMART_STR_START_SIZE       \\",
          "59:     ? SMART_STR_START_SIZE         \\",
          "61:   SMART_STR_DO_REALLOC(d, what);        \\",
          "62:  } else {              \\",
          "63:   newlen = (d)->len + (n);         \\",
          "",
          "[Removed Lines]",
          "60:     : newlen + SMART_STR_PREALLOC;      \\",
          "",
          "[Added Lines]",
          "60:     : (newlen >= (INT_MAX - SMART_STR_PREALLOC)? newlen \\",
          "61:        : (newlen + SMART_STR_PREALLOC));  \\",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/base64.c||ext/xmlrpc/libxmlrpc/base64.c": [
          "File: ext/xmlrpc/libxmlrpc/base64.c -> ext/xmlrpc/libxmlrpc/base64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <stdlib.h>",
          "17: #include <ctype.h>",
          "19: #include \"base64.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: void buffer_add(struct buffer_st *b, char c)",
          "33: {",
          "35:   b->offset++;",
          "36:   if (b->offset == b->length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:   if ((INT_MAX - b->length) <= 512) {",
          "36:   return;",
          "37:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   }",
          "71:   dtable[62] = '+';",
          "72:   dtable[63] = '/';",
          "74:   while (!hiteof) {",
          "75:     unsigned char igroup[3], ogroup[4];",
          "76:     int c, n;",
          "78:     igroup[0] = igroup[1] = igroup[2] = 0;",
          "79:     for (n = 0; n < 3; n++) {",
          "80:       c = *(source++);",
          "81:       offset++;",
          "83:  hiteof = 1;",
          "84:  break;",
          "85:       }",
          "",
          "[Removed Lines]",
          "82:       if (offset > length) {",
          "",
          "[Added Lines]",
          "86:       if (offset > length || offset <= 0) {",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.c -> ext/xmlrpc/libxmlrpc/simplestring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: #include <stdlib.h>",
          "82: #include <string.h>",
          "83: #include \"simplestring.h\"",
          "85: #define my_free(thing)  if(thing) {free(thing); thing = 0;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:          simplestring_init_str(target);",
          "201:       }",
          "205:        return;",
          "206:       }",
          "",
          "[Removed Lines]",
          "203:       if((SIZE_MAX - add_len) < target->len || (SIZE_MAX - add_len - 1) < target->len) {",
          "",
          "[Added Lines]",
          "204:       if((INT_MAX - add_len) < target->len || (INT_MAX - add_len - 1) < target->len) {",
          "",
          "---------------"
        ],
        "ext/zip/php_zip.c||ext/zip/php_zip.c": [
          "File: ext/zip/php_zip.c -> ext/zip/php_zip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:  }",
          "1703:  if (dirname[dirname_len-1] != '/') {",
          "1705:   strcpy(s, dirname);",
          "1706:   s[dirname_len] = '/';",
          "1707:   s[dirname_len+1] = '\\0';",
          "",
          "[Removed Lines]",
          "1704:   s=(char *)emalloc(dirname_len+2);",
          "",
          "[Added Lines]",
          "1704:   s=(char *)safe_emalloc(dirname_len, 1, 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1916:  ze_obj = (ze_zip_object*) zend_object_store_get_object(this TSRMLS_CC);",
          "1917:  if (ze_obj->buffers_cnt) {",
          "1919:   pos = ze_obj->buffers_cnt++;",
          "1920:  } else {",
          "1921:   ze_obj->buffers = (char **)emalloc(sizeof(char *));",
          "1922:   ze_obj->buffers_cnt++;",
          "1923:   pos = 0;",
          "1924:  }",
          "1926:  memcpy(ze_obj->buffers[pos], buffer, buffer_len + 1);",
          "1928:  zs = zip_source_buffer(intern, ze_obj->buffers[pos], buffer_len, 0);",
          "",
          "[Removed Lines]",
          "1918:   ze_obj->buffers = (char **)erealloc(ze_obj->buffers, sizeof(char *) * (ze_obj->buffers_cnt+1));",
          "1925:  ze_obj->buffers[pos] = (char *)emalloc(buffer_len + 1);",
          "",
          "[Added Lines]",
          "1918:   ze_obj->buffers = (char **)safe_erealloc(ze_obj->buffers, sizeof(char *), (ze_obj->buffers_cnt+1), 0);",
          "1925:  ze_obj->buffers[pos] = (char *)safe_emalloc(buffer_len, 1, 1);",
          "",
          "---------------"
        ],
        "ext/zlib/zlib.c||ext/zlizlib.c": [
          "File: ext/zlib/zlib.c -> ext/zlizlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:  if (SUCCESS != php_zlib_encode(in_buf, in_len, &out_buf, &out_len, encoding, level TSRMLS_CC)) { \\",
          "674:   RETURN_FALSE; \\",
          "675:  } \\",
          "677: }",
          "679: #define PHP_ZLIB_DECODE_FUNC(name, encoding) \\",
          "",
          "[Removed Lines]",
          "676:  RETURN_STRINGL(out_buf, out_len, 0); \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea9fac94bbae150a81fde0e6542e6b45965772cd",
      "candidate_info": {
        "commit_hash": "ea9fac94bbae150a81fde0e6542e6b45965772cd",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/ea9fac94bbae150a81fde0e6542e6b45965772cd",
        "files": [
          "ext/bz2/bz2.c",
          "ext/iconv/iconv.c",
          "ext/imap/php_imap.c",
          "ext/intl/breakiterator/breakiterator_iterators.cpp",
          "ext/intl/intl_convert.c",
          "ext/intl/locale/locale_methods.c",
          "ext/intl/msgformat/msgformat_data.c",
          "ext/standard/exec.c",
          "ext/standard/php_smart_str.h",
          "ext/standard/string.c",
          "ext/xmlrpc/libxmlrpc/base64.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/zip/php_zip.c",
          "ext/zlib/zlib.c",
          "main/php_version.h"
        ],
        "message": "More string length checks & fixes",
        "before_after_code_files": [
          "ext/bz2/bz2.c||ext/bz2/bz2.c",
          "ext/iconv/iconv.c||ext/iconv/iconv.c",
          "ext/imap/php_imap.c||ext/imap/php_imap.c",
          "ext/intl/breakiterator/breakiterator_iterators.cpp||ext/intl/breakiterator/breakiterator_iterators.cpp",
          "ext/intl/intl_convert.c||ext/intl/intl_convert.c",
          "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c",
          "ext/intl/msgformat/msgformat_data.c||ext/intl/msgformat/msgformat_data.c",
          "ext/standard/exec.c||ext/standard/exec.c",
          "ext/standard/php_smart_str.h||ext/standard/php_smart_str.h",
          "ext/standard/string.c||ext/standard/string.c",
          "ext/xmlrpc/libxmlrpc/base64.c||ext/xmlrpc/libxmlrpc/base64.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/zip/php_zip.c||ext/zip/php_zip.c",
          "ext/zlib/zlib.c||ext/zlizlib.c",
          "main/php_version.h||main/php_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c"
          ],
          "candidate": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/bz2/bz2.c||ext/bz2/bz2.c": [
          "File: ext/bz2/bz2.c -> ext/bz2/bz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:  dest_len   = (unsigned int) (source_len + (0.01 * source_len) + 600);",
          "519:  if (argc > 1) {",
          "",
          "[Removed Lines]",
          "516:  dest = emalloc(dest_len + 1);",
          "",
          "[Added Lines]",
          "516:  dest = safe_emalloc(dest_len, 1, 1);",
          "",
          "---------------"
        ],
        "ext/iconv/iconv.c||ext/iconv/iconv.c": [
          "File: ext/iconv/iconv.c -> ext/iconv/iconv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2491:   &out_buffer, &out_len, out_charset, in_charset);",
          "2492:  _php_iconv_show_error(err, out_charset, in_charset TSRMLS_CC);",
          "2493:  if (err == PHP_ICONV_ERR_SUCCESS && out_buffer != NULL) {",
          "2495:  } else {",
          "2496:   if (out_buffer != NULL) {",
          "2497:    efree(out_buffer);",
          "",
          "[Removed Lines]",
          "2494:   RETVAL_STRINGL(out_buffer, out_len, 0);",
          "",
          "[Added Lines]",
          "2494:   RETVAL_STRINGL_CHECK(out_buffer, out_len, 0);",
          "",
          "---------------"
        ],
        "ext/imap/php_imap.c||ext/imap/php_imap.c": [
          "File: ext/imap/php_imap.c -> ext/imap/php_imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3916: #define PHP_IMAP_CLEAN if (bufferTo) efree(bufferTo); if (bufferCc) efree(bufferCc); if (bufferBcc) efree(bufferBcc); if (bufferHeader) efree(bufferHeader);",
          "3917: #define PHP_IMAP_BAD_DEST PHP_IMAP_CLEAN; efree(tempMailTo); return (BAD_MSG_DESTINATION);",
          "3920:  memset(bufferHeader, 0, bufferLen);",
          "3921:  if (to && *to) {",
          "3922:   strlcat(bufferHeader, \"To: \", bufferLen + 1);",
          "",
          "[Removed Lines]",
          "3919:  bufferHeader = (char *)emalloc(bufferLen + 1);",
          "",
          "[Added Lines]",
          "3919:  bufferHeader = (char *)safe_emalloc(bufferLen, 1, 1);",
          "",
          "---------------"
        ],
        "ext/intl/breakiterator/breakiterator_iterators.cpp||ext/intl/breakiterator/breakiterator_iterators.cpp": [
          "File: ext/intl/breakiterator/breakiterator_iterators.cpp -> ext/intl/breakiterator/breakiterator_iterators.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:  }",
          "183:  assert(next <= slen && next >= cur);",
          "184:  len = next - cur;",
          "187:  memcpy(res, &s[cur], len);",
          "188:  res[len] = '\\0';",
          "",
          "[Removed Lines]",
          "185:  res = static_cast<char*>(emalloc(len + 1));",
          "",
          "[Added Lines]",
          "185:  res = static_cast<char*>(safe_emalloc(len, 1, 1));",
          "",
          "---------------"
        ],
        "ext/intl/intl_convert.c||ext/intl/intl_convert.c": [
          "File: ext/intl/intl_convert.c -> ext/intl/intl_convert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  UErrorCode* status )",
          "50: {",
          "51:  UChar*      dst_buf = NULL;",
          "",
          "[Removed Lines]",
          "52:  int32_t     dst_len = 0;",
          "",
          "[Added Lines]",
          "52:  uint32_t    dst_len = 0;",
          "",
          "---------------"
        ],
        "ext/intl/locale/locale_methods.c||ext/intl/locale/locale_methods.c": [
          "File: ext/intl/locale/locale_methods.c -> ext/intl/locale/locale_methods.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:  int32_t      buflen          = 512;",
          "264:  UErrorCode   status          = U_ZERO_ERROR;",
          "267:  if( strcmp(tag_name, LOC_CANONICALIZE_TAG) != 0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:  if (strlen(loc_name) > INTL_MAX_LOCALE_LEN) {",
          "267:   return NULL;",
          "268:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "702:         RETURN_FALSE;",
          "703:     }",
          "705:     if(loc_name_len == 0) {",
          "706:         loc_name = intl_locale_get_default(TSRMLS_C);",
          "707:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:  INTL_CHECK_LOCALE_LEN(strlen(loc_name));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1109:         RETURN_FALSE;",
          "1110:     }",
          "1112:     if(loc_name_len == 0) {",
          "1113:         loc_name = intl_locale_get_default(TSRMLS_C);",
          "1114:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1117:     INTL_CHECK_LOCALE_LEN(strlen(loc_name));",
          "",
          "---------------"
        ],
        "ext/intl/msgformat/msgformat_data.c||ext/intl/msgformat/msgformat_data.c": [
          "File: ext/intl/msgformat/msgformat_data.c -> ext/intl/msgformat/msgformat_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #ifdef MSG_FORMAT_QUOTE_APOS",
          "84: {",
          "85:  if(*spattern && *spattern_len && u_strchr(*spattern, (UChar)'\\'')) {",
          "87:   uint32_t npattern_len;",
          "88:   npattern_len = umsg_autoQuoteApostrophe(*spattern, *spattern_len, npattern, 2*(*spattern_len)+1, ec);",
          "89:   efree(*spattern);",
          "",
          "[Removed Lines]",
          "83: int msgformat_fix_quotes(UChar **spattern, uint32_t *spattern_len, UErrorCode *ec)",
          "86:   UChar *npattern = emalloc(sizeof(UChar)*(2*(*spattern_len)+1));",
          "",
          "[Added Lines]",
          "83: int msgformat_fix_quotes(UChar **spattern, uint32_t *spattern_len, UErrorCode *ec)",
          "86:   UChar *npattern = safe_emalloc(sizeof(UChar)*2, *spattern_len, sizeof(UChar));",
          "",
          "---------------"
        ],
        "ext/standard/exec.c||ext/standard/exec.c": [
          "File: ext/standard/exec.c -> ext/standard/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "492:    return;",
          "493:   }",
          "494:   cmd = php_escape_shell_cmd(command);",
          "496:  } else {",
          "497:   RETVAL_EMPTY_STRING();",
          "498:  }",
          "",
          "[Removed Lines]",
          "495:   RETVAL_STRING(cmd, 0);",
          "",
          "[Added Lines]",
          "495:   RETVAL_STRINGL_CHECK(cmd, strlen(cmd), 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:    return;",
          "518:   }",
          "519:   cmd = php_escape_shell_arg(argument);",
          "521:  }",
          "522: }",
          "",
          "[Removed Lines]",
          "520:   RETVAL_STRING(cmd, 0);",
          "",
          "[Added Lines]",
          "520:   RETVAL_STRINGL_CHECK(cmd, strlen(cmd), 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:  php_stream_close(stream);",
          "553:  if (total_readbytes > 0) {",
          "555:  }",
          "556: }",
          "",
          "[Removed Lines]",
          "554:   RETVAL_STRINGL(ret, total_readbytes, 0);",
          "",
          "[Added Lines]",
          "554:   RETVAL_STRINGL_CHECK(ret, total_readbytes, 0);",
          "",
          "---------------"
        ],
        "ext/standard/php_smart_str.h||ext/standard/php_smart_str.h": [
          "File: ext/standard/php_smart_str.h -> ext/standard/php_smart_str.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   newlen = (n);            \\",
          "58:   (d)->a = newlen < SMART_STR_START_SIZE       \\",
          "59:     ? SMART_STR_START_SIZE         \\",
          "61:   SMART_STR_DO_REALLOC(d, what);        \\",
          "62:  } else {              \\",
          "63:   newlen = (d)->len + (n);         \\",
          "",
          "[Removed Lines]",
          "60:     : newlen + SMART_STR_PREALLOC;      \\",
          "",
          "[Added Lines]",
          "60:     : (newlen >= (INT_MAX - SMART_STR_PREALLOC)? newlen \\",
          "61:        : (newlen + INT_MAX));     \\",
          "",
          "---------------"
        ],
        "ext/standard/string.c||ext/standard/string.c": [
          "File: ext/standard/string.c -> ext/standard/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "908:   RETURN_FALSE;",
          "909:  }",
          "916:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Length should be between 0 and %d\", INT_MAX);",
          "917:   RETURN_FALSE;",
          "918:  }",
          "",
          "[Removed Lines]",
          "911:  if (linelength < 0) {",
          "913:   linelength = 0;",
          "914:  }",
          "915:  if (linelength > INT_MAX) {",
          "",
          "[Added Lines]",
          "911:  if (linelength < 0 || linelength > INT_MAX) {",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/base64.c||ext/xmlrpc/libxmlrpc/base64.c": [
          "File: ext/xmlrpc/libxmlrpc/base64.c -> ext/xmlrpc/libxmlrpc/base64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <stdlib.h>",
          "17: #include <ctype.h>",
          "19: #include \"base64.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: void buffer_add(struct buffer_st *b, char c)",
          "33: {",
          "35:   b->offset++;",
          "36:   if (b->offset == b->length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:   if ((INT_MAX - b->length) <= 512) {",
          "36:   return;",
          "37:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   }",
          "71:   dtable[62] = '+';",
          "72:   dtable[63] = '/';",
          "74:   while (!hiteof) {",
          "75:     unsigned char igroup[3], ogroup[4];",
          "76:     int c, n;",
          "78:     igroup[0] = igroup[1] = igroup[2] = 0;",
          "79:     for (n = 0; n < 3; n++) {",
          "80:       c = *(source++);",
          "81:       offset++;",
          "83:  hiteof = 1;",
          "84:  break;",
          "85:       }",
          "",
          "[Removed Lines]",
          "82:       if (offset > length) {",
          "",
          "[Added Lines]",
          "86:       if (offset > length || offset <= 0) {",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.c -> ext/xmlrpc/libxmlrpc/simplestring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: #include <stdlib.h>",
          "82: #include <string.h>",
          "83: #include \"simplestring.h\"",
          "85: #define my_free(thing)  if(thing) {free(thing); thing = 0;}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:          simplestring_init_str(target);",
          "201:       }",
          "205:        return;",
          "206:       }",
          "",
          "[Removed Lines]",
          "203:       if((SIZE_MAX - add_len) < target->len || (SIZE_MAX - add_len - 1) < target->len) {",
          "",
          "[Added Lines]",
          "204:       if((INT_MAX - add_len) < target->len || (INT_MAX - add_len - 1) < target->len) {",
          "",
          "---------------"
        ],
        "ext/zip/php_zip.c||ext/zip/php_zip.c": [
          "File: ext/zip/php_zip.c -> ext/zip/php_zip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1701:  }",
          "1703:  if (dirname[dirname_len-1] != '/') {",
          "1705:   strcpy(s, dirname);",
          "1706:   s[dirname_len] = '/';",
          "1707:   s[dirname_len+1] = '\\0';",
          "",
          "[Removed Lines]",
          "1704:   s=(char *)emalloc(dirname_len+2);",
          "",
          "[Added Lines]",
          "1704:   s=(char *)safe_emalloc(dirname_len, 1, 2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1916:  ze_obj = (ze_zip_object*) zend_object_store_get_object(this TSRMLS_CC);",
          "1917:  if (ze_obj->buffers_cnt) {",
          "1919:   pos = ze_obj->buffers_cnt++;",
          "1920:  } else {",
          "1921:   ze_obj->buffers = (char **)emalloc(sizeof(char *));",
          "1922:   ze_obj->buffers_cnt++;",
          "1923:   pos = 0;",
          "1924:  }",
          "1926:  memcpy(ze_obj->buffers[pos], buffer, buffer_len + 1);",
          "1928:  zs = zip_source_buffer(intern, ze_obj->buffers[pos], buffer_len, 0);",
          "",
          "[Removed Lines]",
          "1918:   ze_obj->buffers = (char **)erealloc(ze_obj->buffers, sizeof(char *) * (ze_obj->buffers_cnt+1));",
          "1925:  ze_obj->buffers[pos] = (char *)emalloc(buffer_len + 1);",
          "",
          "[Added Lines]",
          "1918:   ze_obj->buffers = (char **)safe_erealloc(ze_obj->buffers, sizeof(char *), (ze_obj->buffers_cnt+1), 0);",
          "1925:  ze_obj->buffers[pos] = (char *)safe_emalloc(buffer_len, 1, 1);",
          "",
          "---------------"
        ],
        "ext/zlib/zlib.c||ext/zlizlib.c": [
          "File: ext/zlib/zlib.c -> ext/zlizlib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:  if (SUCCESS != php_zlib_encode(in_buf, in_len, &out_buf, &out_len, encoding, level TSRMLS_CC)) { \\",
          "674:   RETURN_FALSE; \\",
          "675:  } \\",
          "677: }",
          "679: #define PHP_ZLIB_DECODE_FUNC(name, encoding) \\",
          "",
          "[Removed Lines]",
          "676:  RETURN_STRINGL(out_buf, out_len, 0); \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main/php_version.h||main/php_version.h": [
          "File: main/php_version.h -> main/php_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define PHP_MAJOR_VERSION 5",
          "4: #define PHP_MINOR_VERSION 6",
          "6: #define PHP_EXTRA_VERSION \"-dev\"",
          "",
          "[Removed Lines]",
          "5: #define PHP_RELEASE_VERSION 28",
          "7: #define PHP_VERSION \"5.6.28-dev\"",
          "8: #define PHP_VERSION_ID 50628",
          "",
          "[Added Lines]",
          "5: #define PHP_RELEASE_VERSION 26",
          "7: #define PHP_VERSION \"5.6.26-dev\"",
          "8: #define PHP_VERSION_ID 50626",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b78cabc881108a0c3e87037abd540e070c5a85b",
      "candidate_info": {
        "commit_hash": "3b78cabc881108a0c3e87037abd540e070c5a85b",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3b78cabc881108a0c3e87037abd540e070c5a85b",
        "files": [
          "Zend/zend_multiply.h",
          "Zend/zend_strtod.c",
          "ext/bz2/bz2.c",
          "ext/pgsql/pgsql.c",
          "ext/spl/spl_directory.c",
          "ext/standard/html.c",
          "ext/standard/math.c",
          "ext/standard/user_filters.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/xmlrpc/libxmlrpc/simplestring.h"
        ],
        "message": "More int->size_t and string overflow fixes",
        "before_after_code_files": [
          "Zend/zend_multiply.h||Zend/zend_multiply.h",
          "Zend/zend_strtod.c||Zend/zend_strtod.c",
          "ext/bz2/bz2.c||ext/bz2/bz2.c",
          "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c",
          "ext/spl/spl_directory.c||ext/spl/spl_directory.c",
          "ext/standard/html.c||ext/standard/html.c",
          "ext/standard/math.c||ext/standard/math.c",
          "ext/standard/user_filters.c||ext/standard/user_filters.c",
          "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
          "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
            "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h"
          ],
          "candidate": [
            "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c",
            "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_multiply.h||Zend/zend_multiply.h": [
          "File: Zend/zend_multiply.h -> Zend/zend_multiply.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:  return ret;",
          "279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282: static zend_always_inline size_t zend_safe_addmult(size_t nmemb, size_t size, size_t offset, const char *message)",
          "283: {",
          "284:  int overflow;",
          "285:  size_t ret = zend_safe_address(nmemb, size, offset, &overflow);",
          "287:  if (UNEXPECTED(overflow)) {",
          "288:   zend_error_noreturn(E_ERROR, \"Possible integer overflow in %s (%zu * %zu + %zu)\", message, nmemb, size, offset);",
          "289:   return 0;",
          "290:  }",
          "291:  return ret;",
          "292: }",
          "",
          "---------------"
        ],
        "Zend/zend_strtod.c||Zend/zend_strtod.c": [
          "File: Zend/zend_strtod.c -> Zend/zend_strtod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2677:    }",
          "2678:   }",
          "2679:  dig_done:",
          "2680:  e = 0;",
          "2681:  if (c == 'e' || c == 'E') {",
          "2682:   if (!nd && !nz && !nz0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2680:   if (nd < 0) {",
          "2682:    nd = DBL_DIG + 2;",
          "2683:   }",
          "2684:   if (nf < 0) {",
          "2686:    nf = DBL_DIG + 2;",
          "2687:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4543:   }",
          "4544:   freelist[i] = NULL;",
          "4545:  }",
          "4547: }",
          "4549: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "4546:  FREE_DTOA_LOCK(0)",
          "",
          "[Added Lines]",
          "4554:  FREE_DTOA_LOCK(0)",
          "",
          "---------------"
        ],
        "ext/bz2/bz2.c||ext/bz2/bz2.c": [
          "File: ext/bz2/bz2.c -> ext/bz2/bz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:  bzs.avail_in = source_len;",
          "591:  bzs.avail_out = source_len * 2;",
          "593:  bzs.next_out = ZSTR_VAL(dest);",
          "595:  while ((error = BZ2_bzDecompress(&bzs)) == BZ_OK && bzs.avail_in > 0) {",
          "",
          "[Removed Lines]",
          "592:  dest = zend_string_alloc(bzs.avail_out + 1, 0);",
          "",
          "[Added Lines]",
          "591:  dest = zend_string_safe_alloc(source_len, 2, 1, 0);",
          "",
          "---------------"
        ],
        "ext/pgsql/pgsql.c||ext/pgsql/pgsql.c": [
          "File: ext/pgsql/pgsql.c -> ext/pgsql/pgsql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4356:    break;",
          "4357:  }",
          "4360: #ifdef HAVE_PQESCAPE_CONN",
          "4361:  if (link) {",
          "4362:   if ((pgsql = (PGconn *)zend_fetch_resource2(link, \"PostgreSQL link\", le_link, le_plink)) == NULL) {",
          "",
          "[Removed Lines]",
          "4359:  to = zend_string_alloc(ZSTR_LEN(from) * 2, 0);",
          "",
          "[Added Lines]",
          "4359:  to = zend_string_safe_alloc(ZSTR_LEN(from), 2, 0, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4408:    RETURN_FALSE;",
          "4409:   }",
          "4410:   to = (char *)PQescapeByteaConn(pgsql, (unsigned char *)from, (size_t)from_len, &to_len);",
          "4412: #endif",
          "4413:   to = (char *)PQescapeBytea((unsigned char*)from, from_len, &to_len);",
          "",
          "[Removed Lines]",
          "4411:  } else",
          "",
          "[Added Lines]",
          "4411:  } else",
          "",
          "---------------"
        ],
        "ext/spl/spl_directory.c||ext/spl/spl_directory.c": [
          "File: ext/spl/spl_directory.c -> ext/spl/spl_directory.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:    if (intern->file_name) {",
          "200:     efree(intern->file_name);",
          "201:    }",
          "203:                                     spl_filesystem_object_get_path(intern, NULL),",
          "204:                                     slash, intern->u.dir.entry.d_name);",
          "205:    break;",
          "",
          "[Removed Lines]",
          "202:    intern->file_name_len = (int)spprintf(&intern->file_name, 0, \"%s%c%s\",",
          "",
          "[Added Lines]",
          "202:    intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:  int skip_dots = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_SKIPDOTS);",
          "234:  intern->type = SPL_FS_DIR;",
          "236:  intern->u.dir.dirp = php_stream_opendir(path, REPORT_ERRORS, FG(default_context));",
          "238:  if (intern->_path_len > 1 && IS_SLASH_AT(path, intern->_path_len-1)) {",
          "",
          "[Removed Lines]",
          "235:  intern->_path_len = (int)strlen(path);",
          "",
          "[Added Lines]",
          "235:  intern->_path_len = strlen(path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:  }",
          "385:  intern->file_name = use_copy ? estrndup(path, len) : path;",
          "388:  while (intern->file_name_len > 1 && IS_SLASH_AT(intern->file_name, intern->file_name_len-1)) {",
          "389:   intern->file_name[intern->file_name_len-1] = 0;",
          "",
          "[Removed Lines]",
          "386:  intern->file_name_len = (int)len;",
          "",
          "[Added Lines]",
          "386:  intern->file_name_len = len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "397:  p2 = 0;",
          "398: #endif",
          "399:  if (p1 || p2) {",
          "401:  } else {",
          "402:   intern->_path_len = 0;",
          "403:  }",
          "",
          "[Removed Lines]",
          "400:   intern->_path_len = (int)((p1 > p2 ? p1 : p2) - intern->file_name);",
          "",
          "[Added Lines]",
          "400:   intern->_path_len = ((p1 > p2 ? p1 : p2) - intern->file_name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "916:  const char *p;",
          "917:  size_t flen;",
          "918:  size_t path_len;",
          "920:  zend_string *ret;",
          "922:  if (zend_parse_parameters_none() == FAILURE) {",
          "",
          "[Removed Lines]",
          "919:  int idx;",
          "",
          "[Added Lines]",
          "919:  size_t idx;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "938:  p = zend_memrchr(ZSTR_VAL(ret), '.', ZSTR_LEN(ret));",
          "939:  if (p) {",
          "941:   RETVAL_STRINGL(ZSTR_VAL(ret) + idx + 1, ZSTR_LEN(ret) - idx - 1);",
          "942:   zend_string_release(ret);",
          "943:   return;",
          "",
          "[Removed Lines]",
          "940:   idx = (int)(p - ZSTR_VAL(ret));",
          "",
          "[Added Lines]",
          "940:   idx = p - ZSTR_VAL(ret);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "954: {",
          "955:  spl_filesystem_object *intern = Z_SPLFILESYSTEM_P(getThis());",
          "956:  const char *p;",
          "958:  zend_string *fname;",
          "960:  if (zend_parse_parameters_none() == FAILURE) {",
          "",
          "[Removed Lines]",
          "957:  int idx;",
          "",
          "[Added Lines]",
          "957:  size_t idx;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "966:  p = zend_memrchr(ZSTR_VAL(fname), '.', ZSTR_LEN(fname));",
          "967:  if (p) {",
          "969:   RETVAL_STRINGL(ZSTR_VAL(fname) + idx + 1, ZSTR_LEN(fname) - idx - 1);",
          "970:   zend_string_release(fname);",
          "971:  } else {",
          "",
          "[Removed Lines]",
          "968:   idx = (int)(p - ZSTR_VAL(fname));",
          "",
          "[Added Lines]",
          "968:   idx = p - ZSTR_VAL(fname);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1383:   if (path) {",
          "1384:    char *dpath = estrndup(path, path_len);",
          "1385:    path_len = php_dirname(dpath, path_len);",
          "1387:    efree(dpath);",
          "1388:   }",
          "1389:  }",
          "",
          "[Removed Lines]",
          "1386:    spl_filesystem_object_create_info(intern, dpath, (int)path_len, 1, ce, return_value);",
          "",
          "[Added Lines]",
          "1386:    spl_filesystem_object_create_info(intern, dpath, path_len, 1, ce, return_value);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1507:  subdir = Z_SPLFILESYSTEM_P(return_value);",
          "1508:  if (subdir) {",
          "1509:   if (intern->u.dir.sub_path && intern->u.dir.sub_path[0]) {",
          "1511:   } else {",
          "1513:    subdir->u.dir.sub_path = estrndup(intern->u.dir.entry.d_name, subdir->u.dir.sub_path_len);",
          "1514:   }",
          "1515:   subdir->info_class = intern->info_class;",
          "",
          "[Removed Lines]",
          "1510:    subdir->u.dir.sub_path_len = (int)spprintf(&subdir->u.dir.sub_path, 0, \"%s%c%s\", intern->u.dir.sub_path, slash, intern->u.dir.entry.d_name);",
          "1512:    subdir->u.dir.sub_path_len = (int)strlen(intern->u.dir.entry.d_name);",
          "",
          "[Added Lines]",
          "1510:    subdir->u.dir.sub_path_len = spprintf(&subdir->u.dir.sub_path, 0, \"%s%c%s\", intern->u.dir.sub_path, slash, intern->u.dir.entry.d_name);",
          "1512:    subdir->u.dir.sub_path_len = strlen(intern->u.dir.entry.d_name);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2293:   p2 = 0;",
          "2294: #endif",
          "2295:   if (p1 || p2) {",
          "2297:   } else {",
          "2298:    intern->_path_len = 0;",
          "2299:   }",
          "",
          "[Removed Lines]",
          "2296:    intern->_path_len = (int)((p1 > p2 ? p1 : p2) - tmp_path);",
          "",
          "[Added Lines]",
          "2296:    intern->_path_len = ((p1 > p2 ? p1 : p2) - tmp_path);",
          "",
          "---------------"
        ],
        "ext/standard/html.c||ext/standard/html.c": [
          "File: ext/standard/html.c -> ext/standard/html.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1269:  if (oldlen < 64) {",
          "1270:   maxlen = 128;",
          "1271:  } else {",
          "1277:  }",
          "1279:  replaced = zend_string_alloc(maxlen, 0);",
          "",
          "[Removed Lines]",
          "1272:   maxlen = 2 * oldlen;",
          "1273:   if (maxlen < oldlen) {",
          "1274:    zend_error_noreturn(E_ERROR, \"Input string is too long\");",
          "1275:    return NULL;",
          "1276:   }",
          "",
          "[Added Lines]",
          "1272:   maxlen = zend_safe_addmult(oldlen, 2, 0, \"html_entities\");",
          "",
          "---------------"
        ],
        "ext/standard/math.c||ext/standard/math.c": [
          "File: ext/standard/math.c -> ext/standard/math.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1153:  if (dp) {",
          "1155:  } else {",
          "1158:  }",
          "1161:  if (thousand_sep) {",
          "1167:  }",
          "1169:  reslen = integral;",
          "",
          "[Removed Lines]",
          "1154:   integral = (int)(dp - ZSTR_VAL(tmpbuf));",
          "1157:   integral = (int)ZSTR_LEN(tmpbuf);",
          "1162:   if (integral + thousand_sep_len * ((integral-1) / 3) < integral) {",
          "1164:    php_error_docref(NULL, E_ERROR, \"String overflow\");",
          "1165:   }",
          "1166:   integral += thousand_sep_len * ((integral-1) / 3);",
          "",
          "[Added Lines]",
          "1154:   integral = (dp - ZSTR_VAL(tmpbuf));",
          "1157:   integral = ZSTR_LEN(tmpbuf);",
          "1162:   integral = zend_safe_addmult((integral-1)/3, thousand_sep_len, integral, \"number formatting\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1172:   reslen += dec;",
          "1174:   if (dec_point) {",
          "1180:   }",
          "1181:  }",
          "",
          "[Removed Lines]",
          "1175:    if (reslen + dec_point_len < dec_point_len) {",
          "1177:     php_error_docref(NULL, E_ERROR, \"String overflow\");",
          "1178:    }",
          "1179:    reslen += dec_point_len;",
          "",
          "[Added Lines]",
          "1171:    reslen = zend_safe_addmult(reslen, 1, dec_point_len, \"number formatting\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1196:  if (dec) {",
          "1201:   while (topad--) {",
          "",
          "[Removed Lines]",
          "1197:   int declen = (int)(dp ? s - dp : 0);",
          "1198:   int topad = dec > declen ? dec - declen : 0;",
          "",
          "[Added Lines]",
          "1189:   size_t declen = (dp ? s - dp : 0);",
          "1190:   size_t topad = dec > declen ? dec - declen : 0;",
          "",
          "---------------"
        ],
        "ext/standard/user_filters.c||ext/standard/user_filters.c": [
          "File: ext/standard/user_filters.c -> ext/standard/user_filters.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:  zval obj, zfilter;",
          "269:  zval func_name;",
          "270:  zval retval;",
          "274:  if (persistent) {",
          "",
          "[Removed Lines]",
          "271:  int len;",
          "",
          "[Added Lines]",
          "271:  size_t len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:   return NULL;",
          "278:  }",
          "283:  if (NULL == (fdat = zend_hash_str_find_ptr(BG(user_filter_map), (char*)filtername, len))) {",
          "",
          "[Removed Lines]",
          "280:  len = (int)strlen(filtername);",
          "",
          "[Added Lines]",
          "280:  len = strlen(filtername);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:            TODO: Allow failed userfilter creations to continue",
          "291:   if ((period = strrchr(filtername, '.'))) {",
          "",
          "[Removed Lines]",
          "292:    char *wildcard = emalloc(len + 3);",
          "",
          "[Added Lines]",
          "292:    char *wildcard = safe_emalloc(len, 1, 3);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:   if (!bucket->own_buf) {",
          "453:    bucket = php_stream_bucket_make_writeable(bucket);",
          "454:   }",
          "456:    bucket->buf = perealloc(bucket->buf, Z_STRLEN_P(pzdata), bucket->is_persistent);",
          "457:    bucket->buflen = Z_STRLEN_P(pzdata);",
          "458:   }",
          "",
          "[Removed Lines]",
          "455:   if ((int)bucket->buflen != Z_STRLEN_P(pzdata)) {",
          "",
          "[Added Lines]",
          "455:   if (bucket->buflen != Z_STRLEN_P(pzdata)) {",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.c||ext/xmlrpc/libxmlrpc/simplestring.c": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.c -> ext/xmlrpc/libxmlrpc/simplestring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:          simplestring_init_str(target);",
          "202:       }",
          "206:        return;",
          "207:       }",
          "",
          "[Removed Lines]",
          "204:       if((INT_MAX - add_len) < target->len || (INT_MAX - add_len - 1) < target->len) {",
          "",
          "[Added Lines]",
          "204:       if((SIZE_MAX - add_len) < target->len || (SIZE_MAX - add_len - 1) < target->len) {",
          "",
          "---------------"
        ],
        "ext/xmlrpc/libxmlrpc/simplestring.h||ext/xmlrpc/libxmlrpc/simplestring.h": [
          "File: ext/xmlrpc/libxmlrpc/simplestring.h -> ext/xmlrpc/libxmlrpc/simplestring.h"
        ]
      }
    }
  ]
}