{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b42d7daaf2685d967b47e56c155225756a8cfec",
      "candidate_info": {
        "commit_hash": "9b42d7daaf2685d967b47e56c155225756a8cfec",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9b42d7daaf2685d967b47e56c155225756a8cfec",
        "files": [
          "test/simple/test-https-pfx.js"
        ],
        "message": "test: add https + .pfx client/server test",
        "before_after_code_files": [
          "test/simple/test-https-pfx.js||test/simple/test-https-pfx.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-https-pfx.js||test/simple/test-https-pfx.js": [
          "File: test/simple/test-https-pfx.js -> test/simple/test-https-pfx.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var https = require('https');",
          "25: var fs = require('fs');",
          "27: var pfx = fs.readFileSync(common.fixturesDir + '/test_cert.pfx');",
          "29: var options = {",
          "30:   host: '127.0.0.1',",
          "31:   port: common.PORT,",
          "32:   path: '/',",
          "33:   pfx: pfx,",
          "34:   passphrase: 'sample',",
          "35:   requestCert: true",
          "36: };",
          "38: var server = https.createServer(options, function(req, res) {",
          "39:   assert.equal(req.socket.authorized, false); // not a client cert",
          "40:   assert.equal(req.socket.authorizationError, 'UNABLE_TO_GET_ISSUER_CERT');",
          "41:   res.writeHead(200);",
          "42:   res.end('OK');",
          "43: });",
          "45: server.listen(options.port, options.host, function() {",
          "46:   var data = '';",
          "48:   https.get(options, function(res) {",
          "49:     res.on('data', function(data_) { data += data_ });",
          "50:     res.on('end', function() { server.close() });",
          "51:   });",
          "53:   process.on('exit', function() {",
          "54:     assert.equal(data, 'OK');",
          "55:   });",
          "56: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56cfcea4b4050140e13bc25574766da17c8b5b02",
      "candidate_info": {
        "commit_hash": "56cfcea4b4050140e13bc25574766da17c8b5b02",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/56cfcea4b4050140e13bc25574766da17c8b5b02",
        "files": [
          "doc/api/child_process.markdown",
          "lib/child_process.js"
        ],
        "message": "child_process: remove dummy \"setsid\" option setting",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:     timeout: 0,",
          "249:     maxBuffer: 200 * 1024,",
          "250:     killSignal: 'SIGTERM',",
          "252:     cwd: null,",
          "253:     env: null",
          "254:   };",
          "",
          "[Removed Lines]",
          "251:     setsid: false,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "424bca15c8e227a9170cfe00f9ba7d9daae6fb03",
      "candidate_info": {
        "commit_hash": "424bca15c8e227a9170cfe00f9ba7d9daae6fb03",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/424bca15c8e227a9170cfe00f9ba7d9daae6fb03",
        "files": [
          "lib/fs.js"
        ],
        "message": "Fix fs.realpath to work on Windows\n\n1. Make the isRoot check valid\n2. Don't cache results based on dev/ino, since those are alwasy 0 on\nwindows.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "898: var nextPartRe = /(.*?)(?:[\\/]+|$)/g;",
          "900: fs.realpathSync = function realpathSync(p, cache) {",
          "902:   p = pathModule.resolve(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "931:     pos = nextPartRe.lastIndex;",
          "935:       continue;",
          "936:     }",
          "",
          "[Removed Lines]",
          "934:     if (!base || knownHard[base] || (cache && cache[base] === base)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "948:       }",
          "953:         fs.statSync(base);",
          "957:         if (cache) cache[base] = resolvedLink;",
          "958:       }",
          "959:     }",
          "",
          "[Removed Lines]",
          "951:       var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);",
          "952:       if (!seenLinks[id]) {",
          "954:         seenLinks[id] = fs.readlinkSync(base);",
          "955:         resolvedLink = pathModule.resolve(previous, seenLinks[id]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1014:     base = previous + result[1];",
          "1015:     pos = nextPartRe.lastIndex;",
          "1019:       return process.nextTick(LOOP);",
          "1020:     }",
          "",
          "[Removed Lines]",
          "1018:     if (!base || knownHard[base] || (cache && cache[base] === base)) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1045:     }",
          "1046:     fs.stat(base, function(err) {",
          "1047:       if (err) return cb(err);",
          "1049:       fs.readlink(base, function(err, target) {",
          "1051:       });",
          "1052:     });",
          "1053:   }",
          "",
          "[Removed Lines]",
          "1042:     var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);",
          "1043:     if (seenLinks[id]) {",
          "1044:       return gotTarget(null, seenLinks[id], base);",
          "1050:         gotTarget(err, seenLinks[id] = target);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f065c87bcf65c3ffa50980bba5562ed7159b86db",
      "candidate_info": {
        "commit_hash": "f065c87bcf65c3ffa50980bba5562ed7159b86db",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f065c87bcf65c3ffa50980bba5562ed7159b86db",
        "files": [
          "lib/events.js"
        ],
        "message": "events: remove misleading comment",
        "before_after_code_files": [
          "lib/events.js||lib/events.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lib/events.js": [
          "File: lib/events.js -> lib/events.js"
        ]
      }
    },
    {
      "candidate_hash": "54b74b8e85c8ca5827d4116a3943d95755a888bd",
      "candidate_info": {
        "commit_hash": "54b74b8e85c8ca5827d4116a3943d95755a888bd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/54b74b8e85c8ca5827d4116a3943d95755a888bd",
        "files": [
          "deps/v8/src/arm/full-codegen-arm.cc",
          "deps/v8/src/ia32/full-codegen-ia32.cc",
          "deps/v8/src/mips/full-codegen-mips.cc",
          "deps/v8/src/x64/full-codegen-x64.cc"
        ],
        "message": "Remove faster ticks for debug mode.\n\nThis solves the problem that code runs very slow when the debugger is enabled.\n\nBUG=v8:2179\nTEST=\n\nReview URL: https://chromiumcodereview.appspot.com/10544135\n\ngit-svn-id: https://v8.googlecode.com/svn/branches/bleeding_edge@11802 ce2b1a6d-e550-0410-aec6-3dcde31c8c00",
        "before_after_code_files": [
          "deps/v8/src/arm/full-codegen-arm.cc||deps/v8/src/arm/full-codegen-arm.cc",
          "deps/v8/src/ia32/full-codegen-ia32.cc||deps/v8/src/ia32/full-codegen-ia32.cc",
          "deps/v8/src/mips/full-codegen-mips.cc||deps/v8/src/mips/full-codegen-mips.cc",
          "deps/v8/src/x64/full-codegen-x64.cc||deps/v8/src/x64/full-codegen-x64.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/arm/full-codegen-arm.cc||deps/v8/src/arm/full-codegen-arm.cc": [
          "File: deps/v8/src/arm/full-codegen-arm.cc -> deps/v8/src/arm/full-codegen-arm.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:   }",
          "329:   if (isolate()->IsDebuggerActive()) {",
          "332:   }",
          "333:   __ mov(r2, Operand(profiling_counter_));",
          "334:   __ mov(r3, Operand(Smi::FromInt(reset_value)));",
          "",
          "[Removed Lines]",
          "331:     reset_value = 10;",
          "",
          "[Added Lines]",
          "331:     reset_value = FLAG_interrupt_budget >> 4;",
          "",
          "---------------"
        ],
        "deps/v8/src/ia32/full-codegen-ia32.cc||deps/v8/src/ia32/full-codegen-ia32.cc": [
          "File: deps/v8/src/ia32/full-codegen-ia32.cc -> deps/v8/src/ia32/full-codegen-ia32.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:     reset_value = Smi::kMaxValue;",
          "319:   }",
          "324:   __ mov(ebx, Immediate(profiling_counter_));",
          "325:   __ mov(FieldOperand(ebx, JSGlobalPropertyCell::kValueOffset),",
          "326:          Immediate(Smi::FromInt(reset_value)));",
          "",
          "[Removed Lines]",
          "320:   if (isolate()->IsDebuggerActive()) {",
          "322:     reset_value = 10;",
          "323:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/v8/src/mips/full-codegen-mips.cc||deps/v8/src/mips/full-codegen-mips.cc": [
          "File: deps/v8/src/mips/full-codegen-mips.cc -> deps/v8/src/mips/full-codegen-mips.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "332:   }",
          "333:   if (isolate()->IsDebuggerActive()) {",
          "336:   }",
          "337:   __ li(a2, Operand(profiling_counter_));",
          "338:   __ li(a3, Operand(Smi::FromInt(reset_value)));",
          "",
          "[Removed Lines]",
          "335:     reset_value = 10;",
          "",
          "[Added Lines]",
          "335:     reset_value = FLAG_interrupt_budget >> 4;",
          "",
          "---------------"
        ],
        "deps/v8/src/x64/full-codegen-x64.cc||deps/v8/src/x64/full-codegen-x64.cc": [
          "File: deps/v8/src/x64/full-codegen-x64.cc -> deps/v8/src/x64/full-codegen-x64.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:     reset_value = Smi::kMaxValue;",
          "312:   }",
          "317:   __ movq(rbx, profiling_counter_, RelocInfo::EMBEDDED_OBJECT);",
          "318:   __ movq(kScratchRegister,",
          "319:           reinterpret_cast<uint64_t>(Smi::FromInt(reset_value)),",
          "",
          "[Removed Lines]",
          "313:   if (isolate()->IsDebuggerActive()) {",
          "315:     reset_value = 10;",
          "316:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}