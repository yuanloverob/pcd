{
  "cve_id": "CVE-2013-0281",
  "cve_desc": "Pacemaker 1.1.10, when remote Cluster Information Base (CIB) configuration or resource management is enabled, does not limit the duration of connections to the blocking sockets, which allows remote attackers to cause a denial of service (connection blocking).",
  "repo": "ClusterLabs/pacemaker",
  "patch_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
  "patch_info": {
    "commit_hash": "564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "repo": "ClusterLabs/pacemaker",
    "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/564f7cc2a51dcd2f28ab12a13394f31be5aa3c93",
    "files": [
      "cib/callbacks.c",
      "cib/callbacks.h",
      "cib/notify.c",
      "cib/remote.c",
      "include/crm_internal.h",
      "lib/cib/cib_remote.c",
      "lib/common/mainloop.c",
      "lib/common/remote.c",
      "tools/crm_mon.c"
    ],
    "message": "High: core: Internal tls api improvements for reuse with future LRMD tls backend.",
    "before_after_code_files": [
      "cib/callbacks.c||cib/callbacks.c",
      "cib/callbacks.h||cib/callbacks.h",
      "cib/notify.c||cib/notify.c",
      "cib/remote.c||cib/remote.c",
      "include/crm_internal.h||include/crm_internal.h",
      "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
      "lib/common/mainloop.c||lib/common/mainloop.c",
      "lib/common/remote.c||lib/common/remote.c",
      "tools/crm_mon.c||tools/crm_mon.c"
    ]
  },
  "patch_diff": {
    "cib/callbacks.c||cib/callbacks.c": [
      "File: cib/callbacks.c -> cib/callbacks.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "347:         int rid = 0;",
      "349:         if(sync_reply) {",
      "356:                       rid, client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "358:         } else {",
      "359:             crm_trace(\"Sending an event to %s %s\",",
      "",
      "[Removed Lines]",
      "350:             CRM_LOG_ASSERT(client_obj->request_id);",
      "352:             rid = client_obj->request_id;",
      "353:             client_obj->request_id = 0;",
      "355:             crm_trace(\"Sending response %d to %s %s\",",
      "",
      "[Added Lines]",
      "350:             if (client_obj->ipc) {",
      "351:                 CRM_LOG_ASSERT(client_obj->request_id);",
      "353:                 rid = client_obj->request_id;",
      "354:                 client_obj->request_id = 0;",
      "356:                 crm_trace(\"Sending response %d to %s %s\",",
      "358:             } else {",
      "359:                 crm_trace(\"Sending response to %s %s\",",
      "360:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
      "361:             }",
      "",
      "---------------"
    ],
    "cib/callbacks.h||cib/callbacks.h": [
      "File: cib/callbacks.h -> cib/callbacks.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     char *name;",
      "42:     char *callback_id;",
      "43:     char *user;",
      "44:     int request_id;",
      "46:     qb_ipcs_connection_t *ipc;",
      "48: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "49:     gnutls_session *session;",
      "50: #else",
      "51:     void *session;",
      "52: #endif",
      "53:     gboolean encrypted;",
      "54:     mainloop_io_t *remote;",
      "56:     unsigned long num_calls;",
      "58:     int pre_notify;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     char *recv_buf;",
      "51:     gboolean handshake_complete;",
      "56:     gboolean remote_auth;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "60:     int confirmations;",
      "61:     int replace;",
      "62:     int diffs;",
      "64:     GList *delegated_calls;",
      "65: } cib_client_t;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     int remote_auth_timeout;",
      "",
      "---------------"
    ],
    "cib/notify.c||cib/notify.c": [
      "File: cib/notify.c -> cib/notify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83:     CRM_CHECK(client != NULL, return TRUE);",
      "84:     CRM_CHECK(update_msg != NULL, return TRUE);",
      "87:         crm_warn(\"Skipping client with NULL channel\");",
      "88:         return FALSE;",
      "89:     }",
      "",
      "[Removed Lines]",
      "86:     if (client->ipc == NULL) {",
      "",
      "[Added Lines]",
      "86:     if (client->ipc == NULL && client->session == NULL) {",
      "",
      "---------------"
    ],
    "cib/remote.c||cib/remote.c": [
      "File: cib/remote.c -> cib/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "60: #  endif",
      "61: #endif",
      "67: extern int remote_tls_fd;",
      "68: extern gboolean cib_shutdown_flag;",
      "",
      "[Removed Lines]",
      "63: #ifdef HAVE_DECL_NANOSLEEP",
      "64: #  include <time.h>",
      "65: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "74: #  define DH_BITS 1024",
      "75: gnutls_dh_params dh_params;",
      "77: static void",
      "78: debug_log(int level, const char *str)",
      "79: {",
      "80:     fputs(str, stderr);",
      "81: }",
      "85: #endif",
      "87: int num_clients;",
      "88: int authenticate_user(const char *user, const char *passwd);",
      "89: int cib_remote_listen(gpointer data);",
      "",
      "[Removed Lines]",
      "76: extern gnutls_anon_server_credentials anon_cred_s;",
      "83: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "72: gnutls_anon_server_credentials anon_cred_s;",
      "80: #define REMOTE_AUTH_TIMEOUT 10000",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "215:     return FALSE;",
      "216: }",
      "218: int",
      "219: cib_remote_listen(gpointer data)",
      "220: {",
      "222:     int csock = 0;",
      "223:     unsigned laddr;",
      "226:     struct sockaddr_in addr;",
      "227:     int ssock = *(int *)data;",
      "229: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "230:     gnutls_session *session = NULL;",
      "231: #endif",
      "232:     cib_client_t *new_client = NULL;",
      "243:     static struct mainloop_fd_callbacks remote_client_fd_callbacks =",
      "244:         {",
      "245:             .dispatch = cib_remote_msg,",
      "246:             .destroy = cib_remote_connection_destroy,",
      "250:     laddr = sizeof(addr);",
      "251:     csock = accept(ssock, (struct sockaddr *)&addr, &laddr);",
      "",
      "[Removed Lines]",
      "221:     int lpc = 0;",
      "224:     time_t now = 0;",
      "225:     time_t start = time(NULL);",
      "234:     xmlNode *login = NULL;",
      "235:     const char *user = NULL;",
      "236:     const char *pass = NULL;",
      "237:     const char *tmp = NULL;",
      "239: #ifdef HAVE_DECL_NANOSLEEP",
      "241: #endif",
      "247:         };",
      "",
      "[Added Lines]",
      "213: static gboolean",
      "214: cib_remote_auth(xmlNode *login)",
      "215: {",
      "216:     const char *user = NULL;",
      "217:     const char *pass = NULL;",
      "218:     const char *tmp = NULL;",
      "220:     crm_log_xml_info(login, \"Login: \");",
      "221:     if (login == NULL) {",
      "222:         return FALSE;",
      "223:     }",
      "225:     tmp = crm_element_name(login);",
      "226:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "227:         crm_err(\"Wrong tag: %s\", tmp);",
      "228:         return FALSE;",
      "229:     }",
      "231:     tmp = crm_element_value(login, \"op\");",
      "232:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "233:         crm_err(\"Wrong operation: %s\", tmp);",
      "234:         return FALSE;",
      "235:     }",
      "237:     user = crm_element_value(login, \"user\");",
      "238:     pass = crm_element_value(login, \"password\");",
      "240:     if (!user || !pass) {",
      "241:         crm_err(\"missing auth credentials\");",
      "242:         return FALSE;",
      "243:     }",
      "248:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "249:         crm_err(\"User is not a member of the required group\");",
      "250:         return FALSE;",
      "252:     } else if (authenticate_user(user, pass) == FALSE) {",
      "253:         crm_err(\"PAM auth failed\");",
      "254:         return FALSE;",
      "255:     }",
      "257:     return TRUE;",
      "258: }",
      "260: static gboolean",
      "261: remote_auth_timeout_cb(gpointer data)",
      "262: {",
      "263:     cib_client_t *client = data;",
      "265:     client->remote_auth_timeout = 0;",
      "267:     if (client->remote_auth == TRUE) {",
      "268:         return FALSE;",
      "269:     }",
      "271:     mainloop_del_fd(client->remote);",
      "272:     crm_err(\"Remote client authentication timed out\");",
      "274:     return FALSE;",
      "275: }",
      "283:     int flag;",
      "294:         };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "257:         return TRUE;",
      "258:     }",
      "260:     if (ssock == remote_tls_fd) {",
      "261: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "264:         if (session == NULL) {",
      "265:             crm_err(\"TLS session creation failed\");",
      "266:             close(csock);",
      "",
      "[Removed Lines]",
      "263:         session = create_tls_session(csock, GNUTLS_SERVER);",
      "",
      "[Added Lines]",
      "307:     if ((flag = fcntl(csock, F_GETFL)) >= 0) {",
      "308:         if (fcntl(csock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "309:             crm_err( \"fcntl() write failed\");",
      "310:             close(csock);",
      "311:             return TRUE;",
      "312:         }",
      "313:     } else {",
      "314:         crm_err( \"fcntl() read failed\");",
      "315:         close(csock);",
      "316:         return TRUE;",
      "317:     }",
      "322:         session = crm_create_anon_tls_session(csock, GNUTLS_SERVER, anon_cred_s);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "269: #endif",
      "270:     }",
      "327:     num_clients++;",
      "328:     new_client = calloc(1, sizeof(cib_client_t));",
      "332:     new_client->id = crm_generate_uuid();",
      "338:     new_client->callback_id = NULL;",
      "339:     if (ssock == remote_tls_fd) {",
      "340: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "341:         new_client->encrypted = TRUE;",
      "",
      "[Removed Lines]",
      "272:     do {",
      "273:         crm_trace(\"Iter: %d\", lpc++);",
      "274:         if (ssock == remote_tls_fd) {",
      "275: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "276:             login = crm_recv_remote_msg(session, TRUE);",
      "277: #endif",
      "278:         } else {",
      "279:             login = crm_recv_remote_msg(GINT_TO_POINTER(csock), FALSE);",
      "280:         }",
      "281:         if (login != NULL) {",
      "282:             break;",
      "283:         }",
      "284: #ifdef HAVE_DECL_NANOSLEEP",
      "285:         nanosleep(&sleepfast, NULL);",
      "286: #else",
      "287:         sleep(1);",
      "288: #endif",
      "289:         now = time(NULL);",
      "292:     } while (login == NULL && (start - now) < 4);",
      "294:     crm_log_xml_info(login, \"Login: \");",
      "295:     if (login == NULL) {",
      "296:         goto bail;",
      "297:     }",
      "299:     tmp = crm_element_name(login);",
      "300:     if (safe_str_neq(tmp, \"cib_command\")) {",
      "301:         crm_err(\"Wrong tag: %s\", tmp);",
      "302:         goto bail;",
      "303:     }",
      "305:     tmp = crm_element_value(login, \"op\");",
      "306:     if (safe_str_neq(tmp, \"authenticate\")) {",
      "307:         crm_err(\"Wrong operation: %s\", tmp);",
      "308:         goto bail;",
      "309:     }",
      "311:     user = crm_element_value(login, \"user\");",
      "312:     pass = crm_element_value(login, \"password\");",
      "317:     if (check_group_membership(user, CRM_DAEMON_GROUP) == FALSE) {",
      "318:         crm_err(\"User is not a member of the required group\");",
      "319:         goto bail;",
      "321:     } else if (authenticate_user(user, pass) == FALSE) {",
      "322:         crm_err(\"PAM auth failed\");",
      "323:         goto bail;",
      "324:     }",
      "329:     new_client->name = crm_element_value_copy(login, \"name\");",
      "331:     CRM_CHECK(new_client->id == NULL, free(new_client->id));",
      "334: #if ENABLE_ACL",
      "335:     new_client->user = strdup(user);",
      "336: #endif",
      "",
      "[Added Lines]",
      "336:     new_client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, new_client);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "345:         new_client->session = GINT_TO_POINTER(csock);",
      "346:     }",
      "355:     new_client->remote = mainloop_add_fd(",
      "356:         \"cib-remote-client\", G_PRIORITY_DEFAULT, csock, new_client, &remote_client_fd_callbacks);",
      "358:     g_hash_table_insert(client_list, new_client->id, new_client);",
      "360:     return TRUE;",
      "373: }",
      "375: void",
      "376: cib_remote_connection_destroy(gpointer user_data)",
      "377: {",
      "378:     cib_client_t *client = user_data;",
      "380:     if (client == NULL) {",
      "381:         return;",
      "",
      "[Removed Lines]",
      "348:     free_xml(login);",
      "349:     login = create_xml_node(NULL, \"cib_result\");",
      "350:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "351:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
      "352:     crm_send_remote_msg(new_client->session, login, new_client->encrypted);",
      "353:     free_xml(login);",
      "362:   bail:",
      "363:     if (ssock == remote_tls_fd) {",
      "364: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "365:         gnutls_bye(*session, GNUTLS_SHUT_RDWR);",
      "366:         gnutls_deinit(*session);",
      "367:         gnutls_free(session);",
      "368: #endif",
      "369:     }",
      "370:     close(csock);",
      "371:     free_xml(login);",
      "372:     return TRUE;",
      "",
      "[Added Lines]",
      "359:     int csock = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "393:     crm_trace(\"Destroying %s (%p)\", client->name, user_data);",
      "394:     num_clients--;",
      "395:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
      "396:     free(client->name);",
      "397:     free(client->callback_id);",
      "398:     free(client->id);",
      "399:     free(client->user);",
      "400:     free(client);",
      "401:     crm_trace(\"Freed the cib client\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:     if (client->remote_auth_timeout) {",
      "378:         g_source_remove(client->remote_auth_timeout);",
      "379:     }",
      "381:     if (client->encrypted) {",
      "382: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "383:         if (client->session) {",
      "384:             void *sock_ptr = gnutls_transport_get_ptr(*client->session);",
      "385:             csock = GPOINTER_TO_INT(sock_ptr);",
      "386:             if (client->handshake_complete) {",
      "387:                 gnutls_bye(*client->session, GNUTLS_SHUT_WR);",
      "388:             }",
      "389:             gnutls_deinit(*client->session);",
      "390:             gnutls_free(client->session);",
      "391:         }",
      "392: #endif",
      "393:     } else {",
      "394:         csock = GPOINTER_TO_INT(client->session);",
      "395:     }",
      "396:     client->session = NULL;",
      "398:     if (csock > 0) {",
      "399:         close(csock);",
      "400:     }",
      "406:     free(client->recv_buf);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "406:     return;",
      "407: }",
      "411: {",
      "412:     const char *value = NULL;",
      "423:     value = crm_element_name(command);",
      "424:     if (safe_str_neq(value, \"cib_command\")) {",
      "425:         crm_log_xml_trace(command, \"Bad command: \");",
      "427:     }",
      "429:     if (client->name == NULL) {",
      "",
      "[Removed Lines]",
      "409: int",
      "410: cib_remote_msg(gpointer data)",
      "413:     xmlNode *command = NULL;",
      "414:     cib_client_t *client = data;",
      "416:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "418:     command = crm_recv_remote_msg(client->session, client->encrypted);",
      "419:     if (command == NULL) {",
      "420:         return -1;",
      "421:     }",
      "426:         goto bail;",
      "",
      "[Added Lines]",
      "416: static void",
      "417: cib_handle_remote_msg(cib_client_t *client, xmlNode *command)",
      "424:         return;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "473:     crm_log_xml_trace(command, \"Remote command: \");",
      "474:     cib_common_callback_worker(0, 0, command, client, TRUE);",
      "478:     return 0;",
      "479: }",
      "",
      "[Removed Lines]",
      "475:   bail:",
      "476:     free_xml(command);",
      "477:     command = NULL;",
      "",
      "[Added Lines]",
      "473: }",
      "475: int",
      "476: cib_remote_msg(gpointer data)",
      "477: {",
      "478:     xmlNode *command = NULL;",
      "479:     cib_client_t *client = data;",
      "480:     int disconnected = 0;",
      "481:     int timeout = client->remote_auth ? -1 : 1000;",
      "483:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
      "485: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "486:     if (client->encrypted && (client->handshake_complete == FALSE)) {",
      "487:         int rc = 0;",
      "491:         do {",
      "492:             rc = gnutls_handshake(*client->session);",
      "494:             if (rc < 0 && rc != GNUTLS_E_AGAIN) {",
      "495:                 crm_err(\"Remote cib tls handshake failed\");",
      "496:                 return -1;",
      "497:             }",
      "498:         } while (rc == GNUTLS_E_INTERRUPTED);",
      "500:         if (rc == 0) {",
      "501:             crm_debug(\"Remote cib tls handshake completed\");",
      "502:             client->handshake_complete = TRUE;",
      "503:             if (client->remote_auth_timeout) {",
      "504:                 g_source_remove(client->remote_auth_timeout);",
      "505:             }",
      "507:             client->remote_auth_timeout = g_timeout_add(REMOTE_AUTH_TIMEOUT, remote_auth_timeout_cb, client);",
      "508:         }",
      "509:         return 0;",
      "510:     }",
      "511: #endif",
      "513:     crm_recv_remote_msg(client->session, &client->recv_buf, client->encrypted, timeout, &disconnected);",
      "516:     if (client->remote_auth == FALSE) {",
      "517:         xmlNode *reg;",
      "518: #if ENABLE_ACL",
      "519:         const char *user = NULL;",
      "520: #endif",
      "521:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "522:         if (cib_remote_auth(command) == FALSE) {",
      "523:             free_xml(command);",
      "524:             return -1;",
      "525:         }",
      "527:         crm_debug(\"remote connection authenticated successfully\");",
      "528:         client->remote_auth = TRUE;",
      "529:         g_source_remove(client->remote_auth_timeout);",
      "530:         client->remote_auth_timeout = 0;",
      "531:         client->name = crm_element_value_copy(command, \"name\");",
      "533: #if ENABLE_ACL",
      "534:         user = crm_element_value(command, \"user\");",
      "535:         if (user) {",
      "536:            new_client->user = strdup(user);",
      "537:         }",
      "538: #endif",
      "541:         reg = create_xml_node(NULL, \"cib_result\");",
      "542:         crm_xml_add(reg, F_CIB_OPERATION, CRM_OP_REGISTER);",
      "543:         crm_xml_add(reg, F_CIB_CLIENTID, client->id);",
      "544:         crm_send_remote_msg(client->session, reg, client->encrypted);",
      "545:         free_xml(reg);",
      "546:         free_xml(command);",
      "547:     }",
      "549:     command = crm_parse_remote_buffer(&client->recv_buf);",
      "550:     while (command) {",
      "551:         crm_trace(\"command received\");",
      "552:         cib_handle_remote_msg(client, command);",
      "553:         free_xml(command);",
      "554:         command = crm_parse_remote_buffer(&client->recv_buf);",
      "555:     }",
      "557:     if (disconnected) {",
      "558:         crm_trace(\"disconnected while receiving remote cib msg.\");",
      "559:         return -1;",
      "560:     }",
      "",
      "---------------"
    ],
    "include/crm_internal.h||include/crm_internal.h": [
      "File: include/crm_internal.h -> include/crm_internal.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "199: long long crm_int_helper(const char *text, char **end_text);",
      "200: char *crm_concat(const char *prefix, const char *suffix, char join);",
      "201: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
      "205: const char *daemon_option(const char *option);",
      "206: void set_daemon_option(const char *option, const char *value);",
      "",
      "[Removed Lines]",
      "202: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
      "203: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "",
      "[Added Lines]",
      "205: gboolean crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout_ms, int *disconnected);",
      "206: char *crm_recv_remote_raw(void *data, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected);",
      "207: int crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
      "208: int crm_recv_remote_ready(void *session, gboolean encrypted, int timeout_ms);",
      "209: xmlNode *crm_parse_remote_buffer(char **msg_buf);",
      "210: int crm_remote_tcp_connect(const char *host, int port);",
      "212: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "221: int crm_initiate_client_tls_handshake(void *session_data, int timeout_ms);",
      "232: void *crm_create_anon_tls_session(int sock, int type, void *credentials);",
      "233: #endif",
      "235: #define REMOTE_MSG_TERMINATOR \"\\r\\n\\r\\n\"",
      "",
      "---------------"
    ],
    "lib/cib/cib_remote.c||lib/cib/cib_remote.c": [
      "File: lib/cib/cib_remote.c -> lib/cib/cib_remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "39: #  undef KEYFILE",
      "40: #  include <gnutls/gnutls.h>",
      "44: const int kx_prio[] = {",
      "45:     GNUTLS_KX_ANON_DH,",
      "46:     0",
      "47: };",
      "49: #else",
      "50: typedef void gnutls_session;",
      "51: #endif",
      "",
      "[Removed Lines]",
      "41: extern gnutls_anon_client_credentials anon_cred_c;",
      "42: extern gnutls_session *create_tls_session(int csock, int type);",
      "",
      "[Added Lines]",
      "41: gnutls_anon_client_credentials anon_cred_c;",
      "49: static gboolean remote_gnutls_credentials_init = FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     gnutls_session *session;",
      "62:     mainloop_io_t *source;",
      "63:     char *token;",
      "64: };",
      "66: typedef struct cib_remote_opaque_s {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "65:     char *recv_buf;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76: } cib_remote_opaque_t;",
      "78: void cib_remote_connection_destroy(gpointer user_data);",
      "80: int cib_remote_signon(cib_t * cib, const char *name, enum cib_conn_type type);",
      "81: int cib_remote_signoff(cib_t * cib);",
      "82: int cib_remote_free(cib_t * cib);",
      "",
      "[Removed Lines]",
      "79: int cib_remote_dispatch(gpointer user_data);",
      "",
      "[Added Lines]",
      "81: int cib_remote_callback_dispatch(gpointer user_data);",
      "82: int cib_remote_command_dispatch(gpointer user_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158: {",
      "159:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "166: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "167:     if (private->command.encrypted) {",
      "178:     }",
      "179: #endif",
      "180:     return 0;",
      "181: }",
      "183: static int",
      "185: {",
      "186:     int sock;",
      "187:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "189:     int rc = 0;",
      "196:     xmlNode *answer = NULL;",
      "197:     xmlNode *login = NULL;",
      "205:     connection->socket = 0;",
      "206:     connection->session = NULL;",
      "259:     }",
      "261:     if (connection->encrypted) {",
      "263: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "272:             cib_tls_close(cib);",
      "273:             return -1;",
      "274:         }",
      "",
      "[Removed Lines]",
      "163:     close(private->command.socket);",
      "164:     close(private->callback.socket);",
      "168:         gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "169:         gnutls_deinit(*(private->command.session));",
      "170:         gnutls_free(private->command.session);",
      "172:         gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "173:         gnutls_deinit(*(private->callback.session));",
      "174:         gnutls_free(private->callback.session);",
      "176:         gnutls_anon_free_client_credentials(anon_cred_c);",
      "177:         gnutls_global_deinit();",
      "184: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection)",
      "188:     struct sockaddr_in addr;",
      "190:     char *server = private->server;",
      "192:     int ret_ga;",
      "193:     struct addrinfo *res;",
      "194:     struct addrinfo hints;",
      "199:     static struct mainloop_fd_callbacks cib_fd_callbacks =",
      "200:         {",
      "201:             .dispatch = cib_remote_dispatch,",
      "202:             .destroy = cib_remote_connection_destroy,",
      "203:         };",
      "209:     sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);",
      "210:     if (sock == -1) {",
      "211:         crm_perror(LOG_ERR, \"Socket creation failed\");",
      "212:         return -1;",
      "213:     }",
      "216:     bzero(&hints, sizeof(struct addrinfo));",
      "217:     hints.ai_flags = AI_CANONNAME;",
      "218:     hints.ai_family = AF_INET;",
      "219:     hints.ai_socktype = SOCK_RAW;",
      "221:     if (hints.ai_family == AF_INET6) {",
      "222:         hints.ai_protocol = IPPROTO_ICMPV6;",
      "223:     } else {",
      "224:         hints.ai_protocol = IPPROTO_ICMP;",
      "225:     }",
      "227:     crm_debug(\"Looking up %s\", server);",
      "228:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "229:     if (ret_ga) {",
      "230:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "231:         close(sock);",
      "232:         return -1;",
      "233:     }",
      "235:     if (res->ai_canonname) {",
      "236:         server = res->ai_canonname;",
      "237:     }",
      "239:     crm_debug(\"Got address %s for %s\", server, private->server);",
      "241:     if (!res->ai_addr) {",
      "242:         fprintf(stderr, \"getaddrinfo failed\");",
      "243:         crm_exit(1);",
      "244:     }",
      "245: #if 1",
      "246:     memcpy(&addr, res->ai_addr, res->ai_addrlen);",
      "247: #else",
      "249:     memset(&addr, 0, sizeof(addr));",
      "250:     addr.sin_family = AF_INET;",
      "251:     addr.sin_addr.s_addr = inet_addr(server);",
      "252: #endif",
      "253:     addr.sin_port = htons(private->port);",
      "255:     if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) {",
      "256:         crm_perror(LOG_ERR, \"Connection to %s:%d failed\", server, private->port);",
      "257:         close(sock);",
      "258:         return -1;",
      "264:         gnutls_global_init();",
      "265:         gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "268:         connection->session = create_tls_session(sock, GNUTLS_CLIENT);",
      "269:         if (connection->session == NULL) {",
      "270:             crm_perror(LOG_ERR, \"Session creation for %s:%d failed\", server, private->port);",
      "271:             close(sock);",
      "",
      "[Added Lines]",
      "166:         if (private->command.session) {",
      "167:             gnutls_bye(*(private->command.session), GNUTLS_SHUT_RDWR);",
      "168:             gnutls_deinit(*(private->command.session));",
      "169:             gnutls_free(private->command.session);",
      "170:         }",
      "172:         if (private->callback.session) {",
      "173:             gnutls_bye(*(private->callback.session), GNUTLS_SHUT_RDWR);",
      "174:             gnutls_deinit(*(private->callback.session));",
      "175:             gnutls_free(private->callback.session);",
      "176:         }",
      "177:         private->command.session = NULL;",
      "178:         private->callback.session = NULL;",
      "179:         if (remote_gnutls_credentials_init) {",
      "180:             gnutls_anon_free_client_credentials(anon_cred_c);",
      "181:             gnutls_global_deinit();",
      "182:             remote_gnutls_credentials_init = FALSE;",
      "183:         }",
      "187:     if (private->command.socket) {",
      "189:         close(private->command.socket);",
      "190:     }",
      "191:     if (private->callback.socket) {",
      "193:         close(private->callback.socket);",
      "194:     }",
      "195:     private->command.socket = 0;",
      "196:     private->callback.socket = 0;",
      "198:     free(private->command.recv_buf);",
      "199:     free(private->callback.recv_buf);",
      "200:     private->command.recv_buf = NULL;",
      "201:     private->callback.recv_buf = NULL;",
      "207: cib_tls_signon(cib_t * cib, struct remote_connection_s *connection, gboolean event_channel)",
      "212:     int disconnected = 0;",
      "217:     static struct mainloop_fd_callbacks cib_fd_callbacks = { 0, };",
      "219:     cib_fd_callbacks.dispatch = event_channel ? cib_remote_callback_dispatch : cib_remote_command_dispatch;",
      "220:     cib_fd_callbacks.destroy = cib_remote_connection_destroy;",
      "225:     sock = crm_remote_tcp_connect(private->server, private->port);",
      "226:     if (sock <= 0) {",
      "227:         crm_perror(LOG_ERR, \"remote tcp connection to %s:%d failed\", private->server, private->port);",
      "230:     connection->socket = sock;",
      "234:         if (remote_gnutls_credentials_init == FALSE) {",
      "235:             gnutls_global_init();",
      "236:             gnutls_anon_allocate_client_credentials(&anon_cred_c);",
      "237:             remote_gnutls_credentials_init = TRUE;",
      "238:         }",
      "241:         connection->session = crm_create_anon_tls_session(sock, GNUTLS_CLIENT, anon_cred_c);",
      "243:         if (crm_initiate_client_tls_handshake(connection->session, DEFAULT_CLIENT_HANDSHAKE_TIMEOUT) != 0) {",
      "244:             crm_err(\"Session creation for %s:%d failed\", private->server, private->port);",
      "246:             gnutls_deinit(*connection->session);",
      "247:             gnutls_free(connection->session);",
      "248:             connection->session = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "289:     crm_send_remote_msg(connection->session, login, connection->encrypted);",
      "290:     free_xml(login);",
      "293:     crm_log_xml_trace(answer, \"Reply\");",
      "294:     if (answer == NULL) {",
      "295:         rc = -EPROTO;",
      "",
      "[Removed Lines]",
      "292:     answer = crm_recv_remote_msg(connection->session, connection->encrypted);",
      "",
      "[Added Lines]",
      "269:     crm_recv_remote_msg(connection->session, &connection->recv_buf, connection->encrypted, -1, &disconnected);",
      "271:     if (disconnected) {",
      "272:         rc = -ENOTCONN;",
      "273:     }",
      "275:     answer = crm_parse_remote_buffer(&connection->recv_buf);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "310:             connection->token = strdup(tmp_ticket);",
      "311:         }",
      "312:     }",
      "314:     if (rc != 0) {",
      "315:         cib_tls_close(cib);",
      "316:     }",
      "319:     connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->socket, cib, &cib_fd_callbacks);",
      "320:     return rc;",
      "321: }",
      "",
      "[Removed Lines]",
      "318:     connection->socket = sock;",
      "",
      "[Added Lines]",
      "297:     free_xml(answer);",
      "298:     answer = NULL;",
      "302:         return rc;",
      "305:     crm_trace(\"remote client connection established\");",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "331: }",
      "333: int",
      "335: {",
      "336:     cib_t *cib = user_data;",
      "337:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "339:     xmlNode *msg = NULL;",
      "342:     crm_info(\"Message on callback channel\");",
      "359:         free_xml(msg);",
      "361:     }",
      "363: }",
      "365: int",
      "",
      "[Removed Lines]",
      "334: cib_remote_dispatch(gpointer user_data)",
      "340:     const char *type = NULL;",
      "343:     msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);",
      "345:     type = crm_element_value(msg, F_TYPE);",
      "346:     crm_trace(\"Activating %s callbacks...\", type);",
      "348:     if (safe_str_eq(type, T_CIB)) {",
      "349:         cib_native_callback(cib, msg, 0, 0);",
      "351:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "352:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "354:     } else {",
      "355:         crm_err(\"Unknown message type: %s\", type);",
      "356:     }",
      "358:     if (msg != NULL) {",
      "360:         return 0;",
      "362:     return -1;",
      "",
      "[Added Lines]",
      "321: cib_remote_command_dispatch(gpointer user_data)",
      "322: {",
      "323:     int disconnected = 0;",
      "324:     cib_t *cib = user_data;",
      "325:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "327:     crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, -1, &disconnected);",
      "329:     free(private->command.recv_buf);",
      "330:     private->command.recv_buf = NULL;",
      "331:     crm_err(\"received late reply for remote cib connection, discarding\");",
      "333:     if (disconnected) {",
      "334:         return -1;",
      "335:     }",
      "336:     return 0;",
      "337: }",
      "339: int",
      "340: cib_remote_callback_dispatch(gpointer user_data)",
      "346:     int disconnected = 0;",
      "350:     crm_recv_remote_msg(private->callback.session, &private->callback.recv_buf, private->callback.encrypted, -1, &disconnected);",
      "352:     msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "353:     while (msg) {",
      "354:         const char *type = crm_element_value(msg, F_TYPE);",
      "355:         crm_trace(\"Activating %s callbacks...\", type);",
      "357:         if (safe_str_eq(type, T_CIB)) {",
      "358:             cib_native_callback(cib, msg, 0, 0);",
      "360:         } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
      "361:             g_list_foreach(cib->notify_list, cib_native_notify, msg);",
      "363:         } else {",
      "364:             crm_err(\"Unknown message type: %s\", type);",
      "365:         }",
      "368:         msg = crm_parse_remote_buffer(&private->callback.recv_buf);",
      "369:     }",
      "371:     if (disconnected) {",
      "372:         return -1;",
      "375:     return 0;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "394:     }",
      "396:     if (rc == pcmk_ok) {",
      "398:     }",
      "400:     if (rc == pcmk_ok) {",
      "402:     }",
      "404:     if (rc == pcmk_ok) {",
      "",
      "[Removed Lines]",
      "397:         rc = cib_tls_signon(cib, &(private->command));",
      "401:         rc = cib_tls_signon(cib, &(private->callback));",
      "",
      "[Added Lines]",
      "410:         rc = cib_tls_signon(cib, &(private->command), FALSE);",
      "414:         rc = cib_tls_signon(cib, &(private->callback), TRUE);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "463:     return rc;",
      "464: }",
      "482: int",
      "483: cib_remote_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
      "484:                       xmlNode * data, xmlNode ** output_data, int call_options, const char *name)",
      "485: {",
      "486:     int rc = pcmk_ok;",
      "488:     xmlNode *op_msg = NULL;",
      "489:     xmlNode *op_reply = NULL;",
      "491:     cib_remote_opaque_t *private = cib->variant_opaque;",
      "497:     if (cib->state == cib_disconnected) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "",
      "[Removed Lines]",
      "466: static gboolean timer_expired = FALSE;",
      "467: static struct timer_rec_s *sync_timer = NULL;",
      "468: static gboolean",
      "469: cib_timeout_handler(gpointer data)",
      "470: {",
      "471:     struct timer_rec_s *timer = data;",
      "473:     timer_expired = TRUE;",
      "474:     crm_err(\"Call %d timed out after %ds\", timer->call_id, timer->timeout);",
      "479:     return TRUE;",
      "480: }",
      "493:     if (sync_timer == NULL) {",
      "494:         sync_timer = calloc(1, sizeof(struct timer_rec_s));",
      "495:     }",
      "",
      "[Added Lines]",
      "484:     int disconnected = 0;",
      "485:     int remaining_time = 0;",
      "486:     time_t start_time;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "524:     }",
      "526:     crm_trace(\"Sending %s message to CIB service\", op);",
      "528:     free_xml(op_msg);",
      "530:     if ((call_options & cib_discard_reply)) {",
      "",
      "[Removed Lines]",
      "527:     crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "",
      "[Added Lines]",
      "523:     if (!(call_options & cib_sync_call)) {",
      "524:         crm_send_remote_msg(private->callback.session, op_msg, private->command.encrypted);",
      "525:     } else {",
      "526:         crm_send_remote_msg(private->command.session, op_msg, private->command.encrypted);",
      "527:     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "538:     crm_trace(\"Waiting for a syncronous reply\");",
      "551:         int reply_id = -1;",
      "552:         int msg_id = cib->call_id;",
      "556:             break;",
      "557:         }",
      "559:         crm_element_value_int(op_reply, F_CIB_CALLID, &reply_id);",
      "565:         if (reply_id == msg_id) {",
      "566:             break;",
      "",
      "[Removed Lines]",
      "540:     if (cib->call_timeout > 0) {",
      "544:         timer_expired = FALSE;",
      "545:         sync_timer->call_id = cib->call_id;",
      "546:         sync_timer->timeout = cib->call_timeout * 1000;",
      "547:         sync_timer->ref = g_timeout_add(sync_timer->timeout, cib_timeout_handler, sync_timer);",
      "548:     }",
      "550:     while (timer_expired == FALSE) {",
      "554:         op_reply = crm_recv_remote_msg(private->command.session, private->command.encrypted);",
      "555:         if (op_reply == NULL) {",
      "560:         CRM_CHECK(reply_id > 0, free_xml(op_reply);",
      "561:                   if (sync_timer->ref > 0) {",
      "562:                   g_source_remove(sync_timer->ref); sync_timer->ref = 0;}",
      "563:                   return -ENOMSG) ;",
      "",
      "[Added Lines]",
      "540:     start_time = time(NULL);",
      "541:     remaining_time = cib->call_timeout ? cib->call_timeout : 60;",
      "543:     while (remaining_time > 0 && !disconnected) {",
      "547:         crm_recv_remote_msg(private->command.session, &private->command.recv_buf, private->command.encrypted, remaining_time * 1000, &disconnected);",
      "548:         op_reply = crm_parse_remote_buffer(&private->command.recv_buf);",
      "550:         if (!op_reply) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "580:         free_xml(op_reply);",
      "581:         op_reply = NULL;",
      "591:     }",
      "",
      "[Removed Lines]",
      "582:     }",
      "584:     if (sync_timer->ref > 0) {",
      "585:         g_source_remove(sync_timer->ref);",
      "586:         sync_timer->ref = 0;",
      "587:     }",
      "589:     if (timer_expired) {",
      "590:         return -ETIME;",
      "",
      "[Added Lines]",
      "575:         remaining_time = time(NULL) - start_time;",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "600:         crm_err(\"No reply message - empty\");",
      "601:         return -ENOMSG;",
      "602:     }",
      "",
      "[Removed Lines]",
      "599:     if (op_reply == NULL) {",
      "",
      "[Added Lines]",
      "584:     if (disconnected) {",
      "585:         crm_err(\"Disconnected while waiting for reply.\");",
      "586:         return -ENOTCONN;",
      "587:     } else if (op_reply == NULL) {",
      "",
      "---------------"
    ],
    "lib/common/mainloop.c||lib/common/mainloop.c": [
      "File: lib/common/mainloop.c -> lib/common/mainloop.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:     source->trigger = FALSE;",
      "179:     if (source->id > 0) {",
      "180:         g_source_remove(source->id);",
      "181:     }",
      "182:     return TRUE;",
      "183: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:         source->id = 0;",
      "",
      "---------------"
    ],
    "lib/common/remote.c||lib/common/remote.c": [
      "File: lib/common/remote.c -> lib/common/remote.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include <sys/stat.h>",
      "26: #include <unistd.h>",
      "27: #include <sys/socket.h>",
      "29: #include <netinet/ip.h>",
      "31: #include <stdlib.h>",
      "32: #include <errno.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include <arpa/inet.h>",
      "30: #include <netdb.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: #endif",
      "44: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "46:     GNUTLS_KX_ANON_DH,",
      "47:     GNUTLS_KX_DHE_RSA,",
      "48:     GNUTLS_KX_DHE_DSS,",
      "",
      "[Removed Lines]",
      "45: const int tls_kx_order[] = {",
      "",
      "[Added Lines]",
      "47: const int anon_tls_kx_order[] = {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     0",
      "51: };",
      "67: {",
      "69:     gnutls_session *session = gnutls_malloc(sizeof(gnutls_session));",
      "71:     gnutls_init(session, type);",
      "",
      "[Removed Lines]",
      "53: gnutls_anon_client_credentials anon_cred_c;",
      "54: gnutls_anon_server_credentials anon_cred_s;",
      "55: static char *cib_send_tls(gnutls_session * session, xmlNode * msg);",
      "56: static char *cib_recv_tls(gnutls_session * session);",
      "57: #endif",
      "59: char *cib_recv_plaintext(int sock);",
      "60: char *cib_send_plaintext(int sock, xmlNode * msg);",
      "62: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "63: gnutls_session *create_tls_session(int csock, int type);",
      "65: gnutls_session *",
      "66: create_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */ )",
      "68:     int rc = 0;",
      "",
      "[Added Lines]",
      "55: int",
      "56: crm_initiate_client_tls_handshake(void *session_data, int timeout_ms)",
      "57: {",
      "58:     int rc = 0;",
      "59:     int pollrc = 0;",
      "60:     time_t start = time(NULL);",
      "61:     gnutls_session *session = session_data;",
      "63:     do {",
      "64:         rc = gnutls_handshake(*session);",
      "65:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "66:             pollrc = crm_recv_remote_ready(session, TRUE, 1000);",
      "67:             if (pollrc < 0) {",
      "69:                 rc = -1;",
      "70:             }",
      "71:         }",
      "72:     } while (((time(NULL) - start) < (timeout_ms/1000)) &&",
      "73:             (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN));",
      "75:     return rc;",
      "76: }",
      "78: void *",
      "79: crm_create_anon_tls_session(int csock, int type /* GNUTLS_SERVER, GNUTLS_CLIENT */, void *credentials)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "76: #  else",
      "77:     gnutls_set_default_priority(*session);",
      "79: #  endif",
      "80:     gnutls_transport_set_ptr(*session, (gnutls_transport_ptr) GINT_TO_POINTER(csock));",
      "81:     switch (type) {",
      "88:     }",
      "100:     return session;",
      "101: }",
      "105: {",
      "113:     }",
      "142:         }",
      "144:     }",
      "148: }",
      "150: static char *",
      "152: {",
      "153:     char *buf = NULL;",
      "155:     int rc = 0;",
      "159:     if (session == NULL) {",
      "161:     }",
      "165:     while (TRUE) {",
      "182:             len += rc;",
      "198:         }",
      "199:     }",
      "204: }",
      "205: #endif",
      "209: {",
      "236:             goto retry;",
      "240:         }",
      "241:     }",
      "245: }",
      "249: {",
      "250:     char *buf = NULL;",
      "252:     ssize_t rc = 0;",
      "253:     ssize_t len = 0;",
      "280:             CRM_ASSERT(buf != NULL);",
      "285:             len += rc;",
      "291:         }",
      "292:     }",
      "297: }",
      "301: {",
      "302:     if (encrypted) {",
      "303: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "305: #else",
      "306:         CRM_ASSERT(encrypted == FALSE);",
      "307: #endif",
      "308:     } else {",
      "310:     }",
      "311: }",
      "313: xmlNode *",
      "315: {",
      "317:     xmlNode *xml = NULL;",
      "319:     if (encrypted) {",
      "320: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "322: #else",
      "323:         CRM_ASSERT(encrypted == FALSE);",
      "324: #endif",
      "325:     } else {",
      "327:     }",
      "328:     if (reply == NULL || strlen(reply) == 0) {",
      "329:         crm_trace(\"Empty reply\");",
      "335:         }",
      "336:     }",
      "340: }",
      "",
      "[Removed Lines]",
      "78:     gnutls_kx_set_priority(*session, tls_kx_order);",
      "82:         case GNUTLS_SERVER:",
      "83:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_s);",
      "84:             break;",
      "85:         case GNUTLS_CLIENT:",
      "86:             gnutls_credentials_set(*session, GNUTLS_CRD_ANON, anon_cred_c);",
      "87:             break;",
      "90:     do {",
      "91:         rc = gnutls_handshake(*session);",
      "92:     } while (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN);",
      "94:     if (rc < 0) {",
      "95:         crm_err(\"Handshake failed: %s\", gnutls_strerror(rc));",
      "96:         gnutls_deinit(*session);",
      "97:         gnutls_free(session);",
      "98:         return NULL;",
      "99:     }",
      "103: static char *",
      "104: cib_send_tls(gnutls_session * session, xmlNode * msg)",
      "106:     char *xml_text = NULL;",
      "108: #  if 0",
      "109:     const char *name = crm_element_name(msg);",
      "111:     if (safe_str_neq(name, \"cib_command\")) {",
      "112:         xmlNodeSetName(msg, \"cib_result\");",
      "114: #  endif",
      "115:     xml_text = dump_xml_unformatted(msg);",
      "116:     if (xml_text != NULL) {",
      "117:         char *unsent = xml_text;",
      "118:         int len = strlen(xml_text);",
      "119:         int rc = 0;",
      "122:         crm_trace(\"Message size: %d\", len);",
      "124:         while (TRUE) {",
      "125:             rc = gnutls_record_send(*session, unsent, len);",
      "126:             crm_debug(\"Sent %d bytes\", rc);",
      "128:             if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "129:                 crm_debug(\"Retry\");",
      "131:             } else if (rc < 0) {",
      "132:                 crm_debug(\"Connection terminated\");",
      "133:                 break;",
      "135:             } else if (rc < len) {",
      "136:                 crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "137:                 len -= rc;",
      "138:                 unsent += rc;",
      "139:             } else {",
      "140:                 break;",
      "141:             }",
      "145:     free(xml_text);",
      "146:     return NULL;",
      "151: cib_recv_tls(gnutls_session * session)",
      "156:     int len = 0;",
      "157:     int chunk_size = 1024;",
      "160:         return NULL;",
      "163:     buf = calloc(1, chunk_size);",
      "166:         errno = 0;",
      "167:         rc = gnutls_record_recv(*session, buf + len, chunk_size);",
      "168:         crm_trace(\"Got %d more bytes. errno=%d\", rc, errno);",
      "170:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "171:             crm_trace(\"Retry\");",
      "173:         } else if (rc == GNUTLS_E_UNEXPECTED_PACKET_LENGTH) {",
      "174:             crm_trace(\"Session disconnected\");",
      "175:             goto bail;",
      "177:         } else if (rc < 0) {",
      "178:             crm_err(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "179:             goto bail;",
      "181:         } else if (rc == chunk_size) {",
      "183:             chunk_size *= 2;",
      "184:             buf = realloc(buf, len + chunk_size);",
      "185:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "186:             CRM_ASSERT(buf != NULL);",
      "188:         } else if (buf[len + rc - 1] != 0) {",
      "189:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "190:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "191:             len += rc;",
      "192:             buf = realloc(buf, len + chunk_size);",
      "193:             CRM_ASSERT(buf != NULL);",
      "195:         } else {",
      "196:             crm_trace(\"Got %d more bytes\", (int)rc);",
      "197:             return buf;",
      "200:   bail:",
      "201:     free(buf);",
      "202:     return NULL;",
      "207: char *",
      "208: cib_send_plaintext(int sock, xmlNode * msg)",
      "210:     char *xml_text = dump_xml_unformatted(msg);",
      "212:     if (xml_text != NULL) {",
      "213:         int rc = 0;",
      "214:         char *unsent = xml_text;",
      "215:         int len = strlen(xml_text);",
      "218:         crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "219:   retry:",
      "220:         rc = write(sock, unsent, len);",
      "221:         if (rc < 0) {",
      "222:             switch (errno) {",
      "223:                 case EINTR:",
      "224:                 case EAGAIN:",
      "225:                     crm_trace(\"Retry\");",
      "226:                     goto retry;",
      "227:                 default:",
      "228:                     crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, len);",
      "229:                     break;",
      "230:             }",
      "232:         } else if (rc < len) {",
      "233:             crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "234:             len -= rc;",
      "235:             unsent += rc;",
      "238:         } else {",
      "239:             crm_trace(\"Sent %d bytes: %.100s\", rc, xml_text);",
      "242:     free(xml_text);",
      "243:     return NULL;",
      "247: char *",
      "248: cib_recv_plaintext(int sock)",
      "254:     ssize_t chunk_size = 512;",
      "256:     buf = calloc(1, chunk_size);",
      "258:     while (1) {",
      "259:         errno = 0;",
      "260:         rc = read(sock, buf + len, chunk_size);",
      "261:         crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "263:         if (errno == EINTR || errno == EAGAIN) {",
      "264:             crm_trace(\"Retry: %d\", (int)rc);",
      "265:             if (rc > 0) {",
      "266:                 len += rc;",
      "267:                 buf = realloc(buf, len + chunk_size);",
      "268:                 CRM_ASSERT(buf != NULL);",
      "269:             }",
      "271:         } else if (rc < 0) {",
      "272:             crm_perror(LOG_ERR, \"Error receiving message: %d\", (int)rc);",
      "273:             goto bail;",
      "275:         } else if (rc == chunk_size) {",
      "276:             len += rc;",
      "277:             chunk_size *= 2;",
      "278:             buf = realloc(buf, len + chunk_size);",
      "279:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "282:         } else if (buf[len + rc - 1] != 0) {",
      "283:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
      "284:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
      "286:             buf = realloc(buf, len + chunk_size);",
      "287:             CRM_ASSERT(buf != NULL);",
      "289:         } else {",
      "290:             return buf;",
      "293:   bail:",
      "294:     free(buf);",
      "295:     return NULL;",
      "299: void",
      "300: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "304:         cib_send_tls(session, msg);",
      "309:         cib_send_plaintext(GPOINTER_TO_INT(session), msg);",
      "314: crm_recv_remote_msg(void *session, gboolean encrypted)",
      "316:     char *reply = NULL;",
      "321:         reply = cib_recv_tls(session);",
      "326:         reply = cib_recv_plaintext(GPOINTER_TO_INT(session));",
      "331:     } else {",
      "332:         xml = string2xml(reply);",
      "333:         if (xml == NULL) {",
      "334:             crm_err(\"Couldn't parse: '%.120s'\", reply);",
      "338:     free(reply);",
      "339:     return xml;",
      "",
      "[Added Lines]",
      "90:     gnutls_kx_set_priority(*session, anon_tls_kx_order);",
      "94:     case GNUTLS_SERVER:",
      "95:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_server_credentials_t) credentials);",
      "96:         break;",
      "97:     case GNUTLS_CLIENT:",
      "98:         gnutls_credentials_set(*session, GNUTLS_CRD_ANON, (gnutls_anon_client_credentials_t) credentials);",
      "99:         break;",
      "105: static int",
      "106: crm_send_tls(gnutls_session * session, const char *buf, size_t len)",
      "108:     const char *unsent = buf;",
      "109:     int rc = 0;",
      "110:     int total_send;",
      "112:     if (buf == NULL) {",
      "113:         return -1;",
      "116:     total_send = len;",
      "117:     crm_trace(\"Message size: %d\", len);",
      "119:     while (TRUE) {",
      "120:         rc = gnutls_record_send(*session, unsent, len);",
      "122:         if (rc == GNUTLS_E_INTERRUPTED || rc == GNUTLS_E_AGAIN) {",
      "123:             crm_debug(\"Retry\");",
      "125:         } else if (rc < 0) {",
      "126:             crm_err(\"Connection terminated rc = %d\", rc);",
      "127:             break;",
      "129:         } else if (rc < len) {",
      "130:             crm_debug(\"Only sent %d of %d bytes\", rc, len);",
      "131:             len -= rc;",
      "132:             unsent += rc;",
      "133:         } else {",
      "134:             crm_debug(\"Sent %d bytes\", rc);",
      "135:             break;",
      "139:     return rc < 0 ? rc : total_send;",
      "157: crm_recv_tls(gnutls_session * session, size_t max_size, size_t *recv_len, int *disconnected)",
      "161:     size_t len = 0;",
      "162:     size_t chunk_size = max_size ? max_size : 1024;",
      "163:     size_t buf_size = 0;",
      "164:     size_t read_size = 0;",
      "167:         if (disconnected) {",
      "169:         }",
      "170:         goto done;",
      "173:     buf = calloc(1, chunk_size + 1);",
      "174:     buf_size = chunk_size;",
      "177:         read_size = buf_size - len;",
      "180:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "181:             buf_size += chunk_size;",
      "182:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "183:             buf = realloc(buf, buf_size + 1);",
      "184:             CRM_ASSERT(buf != NULL);",
      "186:             read_size = buf_size - len;",
      "187:         }",
      "189:         rc = gnutls_record_recv(*session, buf + len, read_size);",
      "191:         if (rc > 0) {",
      "192:             crm_trace(\"Got %d more bytes.\", rc);",
      "195:             buf[len] = '\\0';",
      "196:         }",
      "197:         if (max_size && (max_size == read_size)) {",
      "198:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "199:             goto done;",
      "200:         }",
      "203:         if (rc == GNUTLS_E_INTERRUPTED) {",
      "204:             crm_trace(\"EINTR encoutered, retry tls read\");",
      "205:         } else if (rc == GNUTLS_E_AGAIN) {",
      "206:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "207:             goto done;",
      "208:         } else if (rc <= 0) {",
      "209:             if (rc == 0) {",
      "210:                 crm_debug(\"EOF encoutered during TLS read\");",
      "211:             } else {",
      "212:                 crm_debug(\"Error receiving message: %s (%d)\", gnutls_strerror(rc), rc);",
      "213:             }",
      "214:             if (disconnected) {",
      "216:             }",
      "217:             goto done;",
      "221: done:",
      "222:     if (recv_len) {",
      "224:     }",
      "225:     if (!len) {",
      "226:         free(buf);",
      "227:         buf = NULL;",
      "228:     }",
      "229:     return buf;",
      "234: static int",
      "235: crm_send_plaintext(int sock, const char *buf, size_t len)",
      "238:     int rc = 0;",
      "239:     const char *unsent = buf;",
      "240:     int total_send;",
      "242:     if (buf == NULL) {",
      "243:         return -1;",
      "244:     }",
      "245:     total_send = len;",
      "247:     crm_trace(\"Message on socket %d: size=%d\", sock, len);",
      "248:   retry:",
      "249:     rc = write(sock, unsent, len);",
      "250:     if (rc < 0) {",
      "251:         switch (errno) {",
      "252:         case EINTR:",
      "253:         case EAGAIN:",
      "254:             crm_trace(\"Retry\");",
      "256:         default:",
      "257:             crm_perror(LOG_ERR, \"Could only write %d of the remaining %d bytes\", rc, (int) len);",
      "258:             break;",
      "261:     } else if (rc < len) {",
      "262:         crm_trace(\"Only sent %d of %d remaining bytes\", rc, len);",
      "263:         len -= rc;",
      "264:         unsent += rc;",
      "265:         goto retry;",
      "267:      } else {",
      "268:         crm_trace(\"Sent %d bytes: %.100s\", rc, buf);",
      "271:     return rc < 0 ? rc : total_send;",
      "288: static char *",
      "289: crm_recv_plaintext(int sock, size_t max_size, size_t *recv_len, int *disconnected)",
      "294:     ssize_t chunk_size = max_size ? max_size : 1024;",
      "295:     size_t buf_size = 0;",
      "296:     size_t read_size = 0;",
      "298:     if (sock <= 0) {",
      "299:         if (disconnected) {",
      "301:         }",
      "302:         goto done;",
      "303:     }",
      "305:     buf = calloc(1, chunk_size + 1);",
      "306:     buf_size = chunk_size;",
      "308:     while (TRUE) {",
      "309:         errno = 0;",
      "310:         read_size = buf_size - len;",
      "313:         if (!max_size && (read_size < (chunk_size / 2))) {",
      "314:             buf_size += chunk_size;",
      "315:             crm_trace(\"Grow buffer by %d more bytes. buf is now %d bytes\", (int)chunk_size, buf_size);",
      "316:             buf = realloc(buf, buf_size + 1);",
      "319:             read_size = buf_size - len;",
      "320:         }",
      "322:         rc = read(sock, buf + len, chunk_size);",
      "324:         if (rc > 0) {",
      "325:             crm_trace(\"Got %d more bytes. errno=%d\", (int)rc, errno);",
      "328:             buf[len] = '\\0';",
      "329:         }",
      "330:         if (max_size && (max_size == read_size)) {",
      "331:             crm_trace(\"Buffer max read size %d met\" , max_size);",
      "332:             goto done;",
      "333:         }",
      "335:         if (rc > 0) {",
      "336:             continue;",
      "337:         } else if (rc == 0) {",
      "338:             if (disconnected) {",
      "340:             }",
      "341:             crm_trace(\"EOF encoutered during read\");",
      "342:             goto done;",
      "343:         }",
      "346:         if (errno == EINTR) {",
      "347:             crm_trace(\"EINTER encoutered, retry socket read.\");",
      "348:         } else if (errno == EAGAIN) {",
      "349:             crm_trace(\"non-blocking, exiting read on rc = %d\", rc);",
      "350:             goto done;",
      "351:         } else if (errno <= 0) {",
      "352:             if (disconnected) {",
      "354:             }",
      "355:             crm_debug(\"Error receiving message: %d\", (int)rc);",
      "356:             goto done;",
      "360: done:",
      "361:     if (recv_len) {",
      "363:     }",
      "364:     if (!len) {",
      "365:         free(buf);",
      "366:         buf = NULL;",
      "367:     }",
      "368:     return buf;",
      "371: static int",
      "372: crm_send_remote_msg_raw(void *session, const char *buf, size_t len, gboolean encrypted)",
      "374:     int rc = -1;",
      "377:         rc = crm_send_tls(session, buf, len);",
      "382:         rc = crm_send_plaintext(GPOINTER_TO_INT(session), buf, len);",
      "384:     return rc;",
      "387: int",
      "388: crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted)",
      "389: {",
      "390:     int rc = -1;",
      "391:     char *xml_text = NULL;",
      "392:     int len = 0;",
      "394:     xml_text = dump_xml_unformatted(msg);",
      "395:     if (xml_text) {",
      "396:         len = strlen(xml_text);",
      "397:     } else {",
      "398:         crm_err(\"Invalid XML, can not send msg\");",
      "399:         return -1;",
      "400:     }",
      "402:     rc = crm_send_remote_msg_raw(session, xml_text, len, encrypted);",
      "403:     if (rc < 0) {",
      "404:         goto done;",
      "405:     }",
      "406:     rc = crm_send_remote_msg_raw(session, REMOTE_MSG_TERMINATOR, strlen(REMOTE_MSG_TERMINATOR), encrypted);",
      "408: done:",
      "409:     if (rc < 0) {",
      "410:         crm_err(\"Failed to send remote msg, rc = %d\", rc);",
      "411:     }",
      "413:     free(xml_text);",
      "414:     return rc;",
      "415: }",
      "423: crm_parse_remote_buffer(char **msg_buf)",
      "425:     char *buf = NULL;",
      "426:     char *start = NULL;",
      "427:     char *end = NULL;",
      "430:     if (*msg_buf == NULL) {",
      "431:         return NULL;",
      "432:     }",
      "435:     buf = *msg_buf;",
      "439:     start = buf;",
      "440:     end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "442:     while (!xml && end) {",
      "445:         end[0] = '\\0';",
      "446:         end += strlen(REMOTE_MSG_TERMINATOR);",
      "448:         xml = string2xml(start);",
      "449:         if (xml == NULL) {",
      "450:             crm_err(\"Couldn't parse: '%.120s'\", start);",
      "451:         }",
      "452:         start = end;",
      "453:         end = strstr(start, REMOTE_MSG_TERMINATOR);",
      "454:     }",
      "456:     if (xml && start) {",
      "459:         free(buf);",
      "460:     } else if (!xml) {",
      "463:     }",
      "465:     return xml;",
      "466: }",
      "476: int",
      "477: crm_recv_remote_ready(void *session, gboolean encrypted, int timeout /* ms */)",
      "478: {",
      "479:     struct pollfd fds = { 0, };",
      "480:     int sock = 0;",
      "481:     void *sock_ptr = NULL;",
      "482:     int rc = 0;",
      "483:     time_t start;",
      "485:     if (encrypted) {",
      "486: #ifdef HAVE_GNUTLS_GNUTLS_H",
      "487:         gnutls_session *tls_session = session;",
      "488:         sock_ptr = gnutls_transport_get_ptr(*tls_session);",
      "489: #else",
      "490:         CRM_ASSERT(encrypted == FALSE);",
      "491: #endif",
      "492:     } else {",
      "493:         sock_ptr = session;",
      "494:     }",
      "496:     sock = GPOINTER_TO_INT(sock_ptr);",
      "497:     if (sock <= 0) {",
      "498:         return -ENOTCONN;",
      "499:     }",
      "501:     start = time(NULL);",
      "502:     errno = 0;",
      "503:     do {",
      "504:         fds.fd = sock;",
      "505:         fds.events = POLLIN;",
      "510:         if (errno == EINTR && (timeout > 0)) {",
      "511:             timeout = timeout - ((time(NULL) - start) * 1000);",
      "512:             if (timeout < 1000) {",
      "513:                 timeout = 1000;",
      "514:             }",
      "515:         }",
      "517:         rc = poll(&fds, 1, timeout);",
      "518:     } while (rc < 0 && errno == EINTR);",
      "520:     return rc;",
      "521: }",
      "523: char *",
      "524: crm_recv_remote_raw(void *session, gboolean encrypted, size_t max_recv, size_t *recv_len, int *disconnected)",
      "525: {",
      "526:     char *reply = NULL;",
      "527:     if (recv_len) {",
      "529:     }",
      "531:     if (disconnected) {",
      "533:     }",
      "537:         reply = crm_recv_tls(session, max_recv, recv_len, disconnected);",
      "542:         reply = crm_recv_plaintext(GPOINTER_TO_INT(session), max_recv, recv_len, disconnected);",
      "546:     }",
      "548:     return reply;",
      "549: }",
      "558: gboolean",
      "559: crm_recv_remote_msg(void *session, char **recv_buf, gboolean encrypted, int total_timeout /*ms */, int *disconnected)",
      "560: {",
      "561:     int ret;",
      "562:     size_t request_len = 0;",
      "563:     time_t start = time(NULL);",
      "564:     char *raw_request = NULL;",
      "565:     int remaining_timeout = 0;",
      "567:     if (total_timeout == 0) {",
      "568:         total_timeout = 10000;",
      "569:     } else if (total_timeout < 0) {",
      "570:         total_timeout = 60000;",
      "571:     }",
      "574:     remaining_timeout = total_timeout;",
      "575:     while ((remaining_timeout > 0) && !(*disconnected)) {",
      "578:         crm_trace(\"waiting to receive remote msg, starting timeout %d, remaining_timeout %d\", total_timeout, remaining_timeout);",
      "579:         ret = crm_recv_remote_ready(session, encrypted, remaining_timeout);",
      "580:         raw_request = NULL;",
      "582:         if (ret == 0) {",
      "583:             crm_err(\"poll timed out (%d ms) while waiting to receive msg\", remaining_timeout);",
      "584:             return FALSE;",
      "586:         } else if (ret < 0) {",
      "587:             if (errno != EINTR) {",
      "588:                 crm_debug(\"poll returned error while waiting for msg, rc: %d, errno: %d\", ret, errno);",
      "590:                 return FALSE;",
      "591:             }",
      "592:             crm_debug(\"poll EINTR encountered during poll, retrying\");",
      "593:         } else {",
      "594:             raw_request = crm_recv_remote_raw(session, encrypted, 0, &request_len, disconnected);",
      "595:         }",
      "597:         remaining_timeout = remaining_timeout - ((time(NULL) - start) * 1000);",
      "599:         if (!raw_request) {",
      "600:             crm_debug(\"Empty msg received after poll\");",
      "601:             continue;",
      "602:         }",
      "604:         if (*recv_buf) {",
      "605:             int old_len = strlen(*recv_buf);",
      "607:             crm_trace(\"Expanding recv buffer from %d to %d\", old_len, old_len+request_len);",
      "610:             memcpy(*recv_buf + old_len, raw_request, request_len);",
      "612:             free(raw_request);",
      "613:         } else {",
      "615:         }",
      "617:         if (strstr(*recv_buf, REMOTE_MSG_TERMINATOR)) {",
      "618:             return TRUE;",
      "622:     return FALSE;",
      "631: int",
      "632: crm_remote_tcp_connect(const char *host, int port)",
      "633: {",
      "634:     struct addrinfo *res;",
      "635:     struct addrinfo *rp;",
      "636:     struct addrinfo hints;",
      "637:     const char *server = host;",
      "638:     int ret_ga;",
      "639:     int sock;",
      "642:     memset(&hints, 0, sizeof(struct addrinfo));",
      "644:     hints.ai_socktype = SOCK_STREAM;",
      "645:     hints.ai_flags = AI_CANONNAME;",
      "647:     crm_debug(\"Looking up %s\", server);",
      "648:     ret_ga = getaddrinfo(server, NULL, &hints, &res);",
      "649:     if (ret_ga) {",
      "650:         crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));",
      "651:         return -1;",
      "652:     }",
      "654:     if (!res || !res->ai_addr) {",
      "655:         crm_err(\"getaddrinfo failed\");",
      "656:         return -1;",
      "657:     }",
      "659:     for (rp = res; rp != NULL; rp = rp->ai_next) {",
      "660:         struct sockaddr *addr = rp->ai_addr;",
      "661:         int flag = 0;",
      "662:         if (!addr) {",
      "663:             continue;",
      "664:         }",
      "666:         if (rp->ai_canonname) {",
      "667:             server = res->ai_canonname;",
      "668:         }",
      "669:         crm_debug(\"Got address %s for %s\", server, host);",
      "672:         sock = socket(rp->ai_family, SOCK_STREAM, IPPROTO_TCP);",
      "673:         if (sock == -1) {",
      "674:             crm_err(\"Socket creation failed for remote client connection.\");",
      "675:             continue;",
      "676:         }",
      "677:         if (addr->sa_family == AF_INET6) {",
      "678:             struct sockaddr_in6 *addr_in = (struct sockaddr_in6 *) addr;",
      "679:             addr_in->sin6_port = htons(port);",
      "680:         } else {",
      "681:             struct sockaddr_in *addr_in = (struct sockaddr_in *) addr;",
      "682:             addr_in->sin_port = htons(port);",
      "683:             crm_info(\"Attempting to connect to remote server at %s:%d\", inet_ntoa(addr_in->sin_addr), port);",
      "684:         }",
      "686:         if (connect(sock, rp->ai_addr, rp->ai_addrlen) == 0) {",
      "687:             if ((flag = fcntl(sock, F_GETFL)) >= 0) {",
      "688:                 if (fcntl(sock, F_SETFL, flag | O_NONBLOCK) < 0) {",
      "689:                     crm_err( \"fcntl() write failed\");",
      "690:                     close(sock);",
      "691:                     sock = -1;",
      "692:                     continue;",
      "693:                 }",
      "694:             }",
      "696:         }",
      "698:         close(sock);",
      "699:         sock = -1;",
      "700:     }",
      "701:     freeaddrinfo(res);",
      "703:     return sock;",
      "704: }",
      "",
      "---------------"
    ],
    "tools/crm_mon.c||tools/crm_mon.c": [
      "File: tools/crm_mon.c -> tools/crm_mon.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "275:             if (rc == pcmk_ok) {",
      "276:                 rc = cib->cmds->set_connection_dnotify(cib, mon_cib_connection_destroy);",
      "277:                 if (rc == -EPROTONOSUPPORT) {",
      "279:                     if (as_console) {",
      "280:                         sleep(2);",
      "281:                     }",
      "",
      "[Removed Lines]",
      "278:                     print_as(\"Notification setup failed, won't be able to reconnect after failure\");",
      "",
      "[Added Lines]",
      "278:                     print_as(\"Notification setup not supported, won't be able to reconnect after failure\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13e8e218f2c12fea226a41a895aea4de7955f7ec",
      "candidate_info": {
        "commit_hash": "13e8e218f2c12fea226a41a895aea4de7955f7ec",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/13e8e218f2c12fea226a41a895aea4de7955f7ec",
        "files": [
          "cib/callbacks.c",
          "cib/callbacks.h",
          "cib/notify.c",
          "cib/remote.c",
          "crmd/control.c",
          "crmd/messages.c",
          "crmd/pengine.c",
          "fencing/commands.c",
          "fencing/internal.h",
          "fencing/main.c",
          "include/crm/common/ipc.h",
          "lib/cib/cib_native.c",
          "lib/cluster/legacy.c",
          "lib/common/ipc.c",
          "lib/common/utils.c",
          "lib/fencing/st_client.c",
          "lib/lrmd/lrmd_client.c",
          "lrmd/lrmd.c",
          "lrmd/lrmd_private.h",
          "lrmd/main.c",
          "mcp/pacemaker.c",
          "pengine/main.c",
          "pengine/pengine.c",
          "tools/attrd.c",
          "tools/crm_node.c",
          "tools/crm_resource.c",
          "tools/crmadmin.c"
        ],
        "message": "High: ipc: Re-allow truely asynchronous requests by no longer requiring a Response for every Request\n\nAlso require Response.id to match Request.id",
        "before_after_code_files": [
          "cib/callbacks.c||cicallbacks.c",
          "cib/callbacks.h||cicallbacks.h",
          "cib/notify.c||cinotify.c",
          "cib/remote.c||ciremote.c",
          "crmd/control.c||crmd/control.c",
          "crmd/messages.c||crmd/messages.c",
          "crmd/pengine.c||crmd/pengine.c",
          "fencing/commands.c||fencing/commands.c",
          "fencing/internal.h||fencing/internal.h",
          "fencing/main.c||fencing/main.c",
          "include/crm/common/ipc.h||include/crm/common/ipc.h",
          "lib/cib/cib_native.c||licicib_native.c",
          "lib/cluster/legacy.c||licluster/legacy.c",
          "lib/common/ipc.c||licommon/ipc.c",
          "lib/common/utils.c||licommon/utils.c",
          "lib/fencing/st_client.c||lifencing/st_client.c",
          "lib/lrmd/lrmd_client.c||lilrmd/lrmd_client.c",
          "lrmd/lrmd.c||lrmd/lrmd.c",
          "lrmd/lrmd_private.h||lrmd/lrmd_private.h",
          "lrmd/main.c||lrmd/main.c",
          "mcp/pacemaker.c||mcp/pacemaker.c",
          "pengine/main.c||pengine/main.c",
          "pengine/pengine.c||pengine/pengine.c",
          "tools/attrd.c||tools/attrd.c",
          "tools/crm_node.c||tools/crm_node.c",
          "tools/crm_resource.c||tools/crm_resource.c",
          "tools/crmadmin.c||tools/crmadmin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/callbacks.h||cib/callbacks.h",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c"
          ],
          "candidate": [
            "cib/callbacks.c||cicallbacks.c",
            "cib/callbacks.h||cicallbacks.h",
            "cib/notify.c||cinotify.c",
            "cib/remote.c||ciremote.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cicallbacks.c": [
          "File: cib/callbacks.c -> cicallbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: };",
          "214: void",
          "216: {",
          "217:     const char *op = crm_element_value(op_request, F_CIB_OPERATION);",
          "219:     if (crm_str_eq(op, CRM_OP_REGISTER, TRUE)) {",
          "226:         return;",
          "228:     } else if (crm_str_eq(op, T_CIB_NOTIFY, TRUE)) {",
          "",
          "[Removed Lines]",
          "215: cib_common_callback_worker(xmlNode * op_request, cib_client_t * cib_client, gboolean privileged)",
          "220:         xmlNode *ack = create_xml_node(NULL, __FUNCTION__);",
          "222:         crm_xml_add(ack, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "223:         crm_xml_add(ack, F_CIB_CLIENTID, cib_client->id);",
          "224:  crm_ipcs_send(cib_client->ipc, ack, FALSE);",
          "225:         free_xml(ack);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:         } else {",
          "253:             rc = -ENXIO;",
          "254:         }",
          "256:         return;",
          "257:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "263: int32_t",
          "264: cib_common_callback(qb_ipcs_connection_t *c, void *data, size_t size, gboolean privileged)",
          "265: {",
          "266:     int call_options = 0;",
          "267:     const char *op = NULL;",
          "268:     const char *call = NULL;",
          "270:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "272:     if(op_request) {",
          "",
          "[Removed Lines]",
          "269:     xmlNode *op_request = crm_ipcs_recv(c, data, size);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:     crm_trace(\"Inbound: %.200s\", data);",
          "279:     if (op_request == NULL || cib_client == NULL) {",
          "288:         return 0;",
          "299:     }",
          "301:     if (cib_client->name == NULL) {",
          "302:         const char *value = crm_element_value(op_request, F_CIB_CLIENTNAME);",
          "303:         if (value == NULL) {",
          "",
          "[Removed Lines]",
          "280:         xmlNode *ack = create_xml_node(NULL, \"nack\");",
          "282:         crm_trace(\"Sending nack to %p\", cib_client);",
          "283:         crm_xml_add(ack, F_CIB_CALLID, call);",
          "284:         crm_xml_add(ack, F_CIB_OPERATION, op);",
          "285:         crm_xml_add(ack, XML_ATTR_ORIGIN, __FUNCTION__);",
          "286:         crm_ipcs_send(c, ack, FALSE);",
          "287:         free_xml(ack);",
          "290:     } else if((call_options & cib_sync_call) == 0) {",
          "291:         xmlNode *ack = create_xml_node(NULL, \"ack\");",
          "293:         crm_trace(\"Sending a-sync ack to %p\", cib_client);",
          "294:         crm_xml_add(ack, F_CIB_CALLID, call);",
          "295:         crm_xml_add(ack, F_CIB_OPERATION, op);",
          "296:         crm_xml_add(ack, XML_ATTR_ORIGIN, __FUNCTION__);",
          "297:         crm_ipcs_send(c, ack, FALSE);",
          "298:         free_xml(ack);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:     crm_log_xml_trace(op_request, \"Client[inbound]\");",
          "330:     free_xml(op_request);",
          "332:     return 0;",
          "",
          "[Removed Lines]",
          "329:     cib_common_callback_worker(op_request, cib_client, privileged);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "350:         local_rc = -ECONNRESET;",
          "352:     } else {",
          "358:             local_rc = -ENOMSG;",
          "360: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "",
          "[Removed Lines]",
          "353:         crm_trace(\"Sending %ssync response to %s %s\",",
          "354:                   sync_reply ? \"\" : \"an a-\", client_obj->name,",
          "355:                   from_peer ? \"(originator of delegated request)\" : \"\");",
          "357:         if (client_obj->ipc && crm_ipcs_send(client_obj->ipc, notify_src, !sync_reply) < 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cib/callbacks.h||cicallbacks.h": [
          "File: cib/callbacks.h -> cicallbacks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     char *name;",
          "42:     char *callback_id;",
          "43:     char *user;",
          "45:     qb_ipcs_connection_t *ipc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: extern void cib_peer_callback(xmlNode * msg, void *private_data);",
          "84: extern void cib_client_status_callback(const char *node, const char *client,",
          "85:                                        const char *status, void *private);",
          "88: void cib_shutdown(int nsig);",
          "89: void initiate_exit(void);",
          "",
          "[Removed Lines]",
          "86: extern void cib_common_callback_worker(xmlNode * op_request, cib_client_t * cib_client, gboolean privileged);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cib/notify.c||cinotify.c": [
          "File: cib/notify.c -> cinotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     if (do_send) {",
          "111:         if (client->ipc) {",
          "113:                 crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "114:             }",
          "",
          "[Removed Lines]",
          "112:             if(crm_ipcs_send(client->ipc, update_msg, TRUE) == FALSE) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cib/remote.c||ciremote.c": [
          "File: cib/remote.c -> ciremote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:     }",
          "465:     crm_log_xml_trace(command, \"Remote command: \");",
          "467:   bail:",
          "468:     free_xml(command);",
          "469:     command = NULL;",
          "",
          "[Removed Lines]",
          "466:     cib_common_callback_worker(command, client, TRUE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crmd/control.c||crmd/control.c": [
          "File: crmd/control.c -> crmd/control.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: {",
          "215:     GListPtr gIter = NULL;",
          "219:     if(crmd_mainloop) {",
          "220:         g_main_loop_quit(crmd_mainloop);",
          "221:         g_main_loop_unref(crmd_mainloop);",
          "",
          "[Removed Lines]",
          "217:     crm_ipc_close(attrd_ipc);",
          "218:     crm_ipc_destroy(attrd_ipc);",
          "",
          "[Added Lines]",
          "217:     if(attrd_ipc) {",
          "218:         crm_ipc_close(attrd_ipc);",
          "219:         crm_ipc_destroy(attrd_ipc);",
          "220:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "572: static int32_t",
          "573: crmd_ipc_dispatch(qb_ipcs_connection_t *c, void *data, size_t size)",
          "574: {",
          "575:     crmd_client_t *client = qb_ipcs_context_get(c);",
          "580:     crm_trace(\"Invoked: %s\", client->table_key);",
          "585:     if (msg == NULL) {",
          "586:         return 0;",
          "587:     }",
          "",
          "[Removed Lines]",
          "577:     xmlNode *msg = crm_ipcs_recv(c, data, size);",
          "578:     xmlNode *ack = create_xml_node(NULL, \"ack\");",
          "583:     free_xml(ack);",
          "",
          "[Added Lines]",
          "577:     uint32_t id = 0;",
          "578:     uint32_t flags = 0;",
          "581:     xmlNode *msg = crm_ipcs_recv(c, data, size, &id, &flags);",
          "584:     if(flags & crm_ipc_client_response) {",
          "585:         crm_ipcs_send_ack(c, id, \"ack\", __FUNCTION__, __LINE__);",
          "586:     }",
          "",
          "---------------"
        ],
        "crmd/messages.c||crmd/messages.c": [
          "File: crmd/messages.c -> crmd/messages.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "588:     table_key = (gpointer) generate_hash_key(client_name, uuid);",
          "590:     if (auth_result == TRUE) {",
          "592:         crm_trace(\"Accepted client %s\", crm_str(table_key));",
          "594:         curr_client->table_key = table_key;",
          "",
          "[Removed Lines]",
          "591:         xmlNode *xml = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596:         curr_client->uuid = strdup(uuid);",
          "598:         g_hash_table_insert(ipc_clients, table_key, curr_client->ipc);",
          "604:         crm_trace(\"Updated client list with %s\", crm_str(table_key));",
          "606:         crm_trace(\"Triggering FSA: %s\", __FUNCTION__);",
          "",
          "[Removed Lines]",
          "600:         xml = create_hello_message(\"n/a\", CRM_SYSTEM_CRMD, \"0\", \"1\");",
          "601:         crm_ipcs_send(curr_client->ipc, xml, FALSE);",
          "602:         free_xml(xml);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "918:     if (client_channel != NULL) {",
          "922:     } else if (sys != NULL && strcmp(sys, CRM_SYSTEM_TENGINE) == 0) {",
          "923:         xmlNode *data = get_message_xml(msg, F_CRM_DATA);",
          "",
          "[Removed Lines]",
          "920:         send_ok = crm_ipcs_send(client_channel, msg, TRUE);",
          "",
          "[Added Lines]",
          "914:         send_ok = crm_ipcs_send(client_channel, 0, msg, TRUE);",
          "",
          "---------------"
        ],
        "crmd/pengine.c||crmd/pengine.c": [
          "File: crmd/pengine.c -> crmd/pengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     free(fsa_pe_ref);",
          "280:     fsa_pe_ref = crm_element_value_copy(cmd, XML_ATTR_REFERENCE);",
          "283:     if (sent <= 0) {",
          "284:         crm_err(\"Could not contact the pengine: %d\", sent);",
          "285:         register_fsa_error_adv(C_FSA_INTERNAL, I_ERROR, NULL, NULL, __FUNCTION__);",
          "",
          "[Removed Lines]",
          "282:     sent = crm_ipc_send(mainloop_get_ipc_client(pe_subsystem->source), cmd, NULL, 0);",
          "",
          "[Added Lines]",
          "282:     sent = crm_ipc_send(mainloop_get_ipc_client(pe_subsystem->source), cmd, 0, 0, NULL);",
          "",
          "---------------"
        ],
        "fencing/commands.c||fencing/commands.c": [
          "File: fencing/commands.c -> fencing/commands.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1087: }",
          "1089: void",
          "1091: {",
          "1092:     int call_options = 0;",
          "1093:     int rc = -EOPNOTSUPP;",
          "",
          "[Removed Lines]",
          "1090: stonith_command(stonith_client_t *client, xmlNode *request, const char *remote)",
          "",
          "[Added Lines]",
          "1090: stonith_command(stonith_client_t *client, uint32_t id, uint32_t flags, xmlNode *request, const char *remote)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1110:     crm_debug(\"Processing %s%s from %s (%16x)\", op, is_reply?\" reply\":\"\",",
          "1111:               client?client->name:remote, call_options);",
          "1113:     if(crm_str_eq(op, CRM_OP_REGISTER, TRUE)) {",
          "1114:         xmlNode *reply = create_xml_node(NULL, \"reply\");",
          "1115:         crm_xml_add(reply, F_STONITH_OPERATION, CRM_OP_REGISTER);",
          "1116:         crm_xml_add(reply, F_STONITH_CLIENTID,  client->id);",
          "1118:         free_xml(reply);",
          "1119:         return;",
          "",
          "[Removed Lines]",
          "1117:         crm_ipcs_send(client->channel, reply, FALSE);",
          "",
          "[Added Lines]",
          "1113:     if(is_set(call_options, st_opt_sync_call)) {",
          "1114:         CRM_ASSERT(client->request_id == id);",
          "1115:     }",
          "1121:         crm_ipcs_send(client->channel, id, reply, FALSE);",
          "1122:         client->request_id = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1159:             client->flags |= get_stonith_flag(flag_name);",
          "1160:         }",
          "1163:         return;",
          "",
          "[Removed Lines]",
          "1162:         crm_ipcs_send_ack(client->channel, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "[Added Lines]",
          "1167:         if(flags & crm_ipc_client_response) {",
          "1168:             crm_ipcs_send_ack(client->channel, id, \"ack\", __FUNCTION__, __LINE__);",
          "1169:             client->request_id = 0;",
          "1170:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1185:             xmlNode *dev = get_xpath_object(\"//@\"F_STONITH_TARGET, request, LOG_TRACE);",
          "1186:             const char *target = crm_element_value_copy(dev, F_STONITH_TARGET);",
          "1190:             }",
          "1192:             if(g_hash_table_lookup(topology, target) && safe_str_eq(target, stonith_our_uname)) {",
          "",
          "[Removed Lines]",
          "1188:             if((call_options & st_opt_sync_call) == 0) {",
          "1189:                 crm_ipcs_send_ack(client->channel, \"ack\", __FUNCTION__, __LINE__);",
          "",
          "[Added Lines]",
          "1196:             if(flags & crm_ipc_client_response) {",
          "1197:                 crm_ipcs_send_ack(client->channel, id, \"ack\", __FUNCTION__, __LINE__);",
          "1198:                 client->request_id = 0;",
          "",
          "---------------"
        ],
        "fencing/internal.h||fencing/internal.h": [
          "File: fencing/internal.h -> fencing/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: typedef struct stonith_client_s {",
          "22:     char *id;",
          "23:     char *name;",
          "25:     char *channel_name;",
          "26:     qb_ipcs_connection_t *channel;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     int request_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: extern long long get_stonith_flag(const char *name);",
          "67: extern int stonith_device_register(xmlNode * msg, const char **desc);",
          "",
          "[Removed Lines]",
          "65: extern void stonith_command(stonith_client_t * client, xmlNode * op_request, const char *remote);",
          "",
          "[Added Lines]",
          "66: extern void stonith_command(stonith_client_t * client, uint32_t id, uint32_t flags, xmlNode * op_request, const char *remote);",
          "",
          "---------------"
        ],
        "fencing/main.c||fencing/main.c": [
          "File: fencing/main.c -> fencing/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: static int32_t",
          "110: st_ipc_dispatch(qb_ipcs_connection_t *c, void *data, size_t size)",
          "111: {",
          "112:     xmlNode *request = NULL;",
          "113:     stonith_client_t *client = (stonith_client_t*)qb_ipcs_context_get(c);",
          "116:     if (request == NULL) {",
          "117:         return 0;",
          "118:     }",
          "120:     CRM_CHECK(client != NULL, goto cleanup);",
          "122:     if(client->name == NULL) {",
          "",
          "[Removed Lines]",
          "115:     request = crm_ipcs_recv(c, data, size);",
          "",
          "[Added Lines]",
          "112:     uint32_t id = 0;",
          "113:     uint32_t flags = 0;",
          "117:     request = crm_ipcs_recv(c, data, size, &id, &flags);",
          "119:         crm_ipcs_send_ack(c, id, \"nack\", __FUNCTION__, __LINE__);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     CRM_CHECK(client->id != NULL, crm_err(\"Invalid client: %p/%s\", client, client->name); goto cleanup);",
          "133:     crm_xml_add(request, F_STONITH_CLIENTID, client->id);",
          "134:     crm_xml_add(request, F_STONITH_CLIENTNAME, client->name);",
          "136:     crm_log_xml_trace(request, \"Client[inbound]\");",
          "139:   cleanup:",
          "140:     if(client == NULL || client->id == NULL) {",
          "",
          "[Removed Lines]",
          "137:     stonith_command(client, request, NULL);",
          "",
          "[Added Lines]",
          "136:     if(flags & crm_ipc_client_response) {",
          "139:     }",
          "145:     stonith_command(client, id, flags, request, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "210: {",
          "211:     const char *remote = crm_element_value(msg, F_ORIG);",
          "212:     crm_log_xml_trace(msg, \"Peer[inbound]\");",
          "214: }",
          "216: #if SUPPORT_HEARTBEAT",
          "",
          "[Removed Lines]",
          "213:     stonith_command(NULL, msg, remote);",
          "",
          "[Added Lines]",
          "221:     stonith_command(NULL, 0, 0, msg, remote);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "288:         local_rc = -1;",
          "290:     } else {",
          "297:     }",
          "299:     if(local_rc < pcmk_ok && client_obj != NULL) {",
          "",
          "[Removed Lines]",
          "291:         crm_trace(\"Sending %ssync response to %s %s\",",
          "292:                     sync_reply?\"\":\"an a-\",",
          "293:                     client_obj->name,",
          "294:                     from_peer?\"(originator of delegated request)\":\"\");",
          "296:         local_rc = crm_ipcs_send(client_obj->channel, notify_src, !sync_reply);",
          "",
          "[Added Lines]",
          "299:         int rid = 0;",
          "301:         if(sync_reply) {",
          "302:             CRM_LOG_ASSERT(client_obj->request_id);",
          "304:             rid = client_obj->request_id;",
          "305:             client_obj->request_id = 0;",
          "307:             crm_trace(\"Sending response %d to %s %s\",",
          "308:                       rid, client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
          "310:         } else {",
          "311:             crm_trace(\"Sending an event to %s %s\",",
          "312:                       client_obj->name, from_peer?\"(originator of delegated request)\":\"\");",
          "313:         }",
          "315:         local_rc = crm_ipcs_send(client_obj->channel, rid, notify_src, !sync_reply);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343:     if(client->flags & get_stonith_flag(type)) {",
          "344:         crm_trace(\"Sending %s-notification to client %s/%s\", type, client->name, client->id);",
          "346:             crm_warn(\"%s-Notification of client %s/%s failed\",",
          "347:                      type, client->name, client->id);",
          "348:         }",
          "",
          "[Removed Lines]",
          "345:         if(crm_ipcs_send(client->channel, update_msg, ipcs_send_event|ipcs_send_error) <= 0) {",
          "",
          "[Added Lines]",
          "364:         if(crm_ipcs_send(client->channel, 0, update_msg, crm_ipc_server_event|crm_ipc_server_error) <= 0) {",
          "",
          "---------------"
        ],
        "include/crm/common/ipc.h||include/crm/common/ipc.h": [
          "File: include/crm/common/ipc.h -> include/crm/common/ipc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <qb/qbipcs.h>",
          "40: {",
          "46: };",
          "50: int crm_ipcs_client_pid(qb_ipcs_connection_t *c);",
          "53: #include <qb/qbipcc.h>",
          "54: typedef struct crm_ipc_s crm_ipc_t;",
          "",
          "[Removed Lines]",
          "39: enum ipcs_send_flags",
          "41:     ipcs_send_none  = 0x0000,",
          "42:     ipcs_send_event = 0x0001,",
          "44:     ipcs_send_info  = 0x0010,",
          "45:     ipcs_send_error = 0x0020,",
          "48: ssize_t crm_ipcs_send(qb_ipcs_connection_t *c, xmlNode *msg, enum ipcs_send_flags flags);",
          "49: xmlNode *crm_ipcs_recv(qb_ipcs_connection_t *c, void *data, size_t size);",
          "51: void crm_ipcs_send_ack(qb_ipcs_connection_t *c, const char *tag, const char *function, int line);",
          "",
          "[Added Lines]",
          "39: enum crm_ipc_server_flags",
          "41:     crm_ipc_server_none  = 0x0000,",
          "48: enum crm_ipc_flags",
          "49: {",
          "50:     crm_ipc_client_none     = 0x0000,",
          "52: };",
          "54: void crm_ipcs_send_ack(qb_ipcs_connection_t *c, uint32_t request, const char *tag, const char *function, int line);",
          "55: ssize_t crm_ipcs_send(qb_ipcs_connection_t *c, uint32_t request, xmlNode *message, enum crm_ipc_server_flags flags);",
          "56: xmlNode *crm_ipcs_recv(qb_ipcs_connection_t *c, void *data, size_t size, uint32_t *id, uint32_t *flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: void crm_ipc_close(crm_ipc_t *client);",
          "59: void crm_ipc_destroy(crm_ipc_t *client);",
          "63: int crm_ipc_get_fd(crm_ipc_t *client);",
          "64: bool crm_ipc_connected(crm_ipc_t *client);",
          "",
          "[Removed Lines]",
          "61: int crm_ipc_send(crm_ipc_t *client, xmlNode *message, xmlNode **reply, int32_t ms_timeout);",
          "",
          "[Added Lines]",
          "67: int crm_ipc_send(crm_ipc_t *client, xmlNode *message, enum crm_ipc_flags flags, int32_t ms_timeout, xmlNode **reply);",
          "",
          "---------------"
        ],
        "lib/cib/cib_native.c||licicib_native.c": [
          "File: lib/cib/cib_native.c -> licicib_native.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:     if (rc == pcmk_ok) {",
          "234:         xmlNode *reply = NULL;",
          "237:         crm_xml_add(hello, F_TYPE, T_CIB);",
          "238:         crm_xml_add(hello, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "239:         crm_xml_add(hello, F_CIB_CLIENTNAME, name);",
          "240:         crm_xml_add_int(hello, F_CIB_CALLOPTS, cib_sync_call);",
          "243:             const char *msg_type = crm_element_value(reply, F_CIB_OPERATION);",
          "245:             rc = pcmk_ok;",
          "",
          "[Removed Lines]",
          "235:         xmlNode *hello = create_xml_node(NULL, \"stonith_command\");",
          "242:         if (crm_ipc_send(native->ipc, hello, &reply, -1) > 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334: {",
          "335:     int rc = pcmk_ok;",
          "336:     int reply_id = 0;",
          "338:     xmlNode *op_msg = NULL;",
          "339:     xmlNode *op_reply = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:         return -EINVAL;",
          "354:     }",
          "356:     cib->call_id++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "371:     }",
          "373:     crm_trace(\"Sending %s message to CIB service (timeout=%ds)\", op, cib->call_timeout);",
          "375:     free_xml(op_msg);",
          "377:     if(rc < 0) {",
          "",
          "[Removed Lines]",
          "374:     rc = crm_ipc_send(native->ipc, op_msg, &op_reply, cib->call_timeout * 1000);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "488:         crm_xml_add(notify_msg, F_CIB_OPERATION, T_CIB_NOTIFY);",
          "489:         crm_xml_add(notify_msg, F_CIB_NOTIFY_TYPE, callback);",
          "490:         crm_xml_add_int(notify_msg, F_CIB_NOTIFY_ACTIVATE, enabled);",
          "492:         if(rc <= 0) {",
          "493:             crm_trace(\"Notification not registered: %d\", rc);",
          "494:             rc = -ECOMM;",
          "",
          "[Removed Lines]",
          "491:         rc = crm_ipc_send(native->ipc, notify_msg, NULL, 1000 * cib->call_timeout);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster/legacy.c||licluster/legacy.c": [
          "File: lib/cluster/legacy.c -> licluster/legacy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1043:                 if (getenv(\"HA_mcp\")) {",
          "1044:                     xmlNode *poke = create_xml_node(NULL, \"poke\");",
          "1045:                     mainloop_io_t *ipc = mainloop_add_ipc_client(CRM_SYSTEM_MCP, G_PRIORITY_MEDIUM, 0, destroy, &mcp_callbacks);",
          "1047:                     free_xml(poke);",
          "1048:                 }",
          "1049:                 return TRUE;",
          "",
          "[Removed Lines]",
          "1046:                     crm_ipc_send(mainloop_get_ipc_client(ipc), poke, NULL, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/common/ipc.c||licommon/ipc.c": [
          "File: lib/common/ipc.c -> licommon/ipc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <crm/msg_xml.h>",
          "33: #include <crm/common/ipc.h>",
          "35: static char *",
          "36: generateReference(const char *custom1, const char *custom2)",
          "37: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170: }",
          "172: xmlNode *",
          "174: {",
          "176:     crm_trace(\"Received %.200s\", text);",
          "177:     return string2xml(text);",
          "178: }",
          "180: ssize_t",
          "182: {",
          "183:     int rc;",
          "184:     int lpc = 0;",
          "185:     int retries = 40;",
          "186:     int level = LOG_CRIT;",
          "187:     struct iovec iov[2];",
          "189:     const char *type = \"Response\";",
          "190:     struct qb_ipc_response_header header;",
          "191:     char *buffer = dump_xml_unformatted(message);",
          "",
          "[Removed Lines]",
          "173: crm_ipcs_recv(qb_ipcs_connection_t *c, void *data, size_t size)",
          "175:     char *text = ((char*)data) + sizeof(struct qb_ipc_request_header);",
          "181: crm_ipcs_send(qb_ipcs_connection_t *c, xmlNode *message, enum ipcs_send_flags flags)",
          "188:     static uint32_t id = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "197:     iov[1].iov_len = 1 + strlen(buffer);",
          "198:     iov[1].iov_base = buffer;",
          "202:     header.size = iov[0].iov_len + iov[1].iov_len;",
          "205:         retries = 20;",
          "206:         level = LOG_ERR;",
          "209:         retries = 10;",
          "210:         level = LOG_INFO;",
          "211:     }",
          "213:     while(lpc < retries) {",
          "215:             type = \"Event\";",
          "216:             rc = qb_ipcs_event_sendv(c, iov, 2);",
          "217:             if(rc == -EPIPE || rc == -ENOTCONN) {",
          "",
          "[Removed Lines]",
          "204:     if(flags & ipcs_send_error) {",
          "208:     } else if(flags & ipcs_send_info) {",
          "214:         if(flags & ipcs_send_event) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251: void",
          "252: crm_ipcs_send_ack(",
          "254: {",
          "255:     xmlNode *ack = create_xml_node(NULL, tag);",
          "256:     crm_xml_add(ack, \"function\", function);",
          "257:     crm_xml_add_int(ack, \"line\", line);",
          "259:     free_xml(ack);",
          "260: }",
          "",
          "[Removed Lines]",
          "253:     qb_ipcs_connection_t *c, const char *tag, const char *function, int line)",
          "258:     crm_ipcs_send(c, ack, FALSE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "459: }",
          "461: int",
          "463: {",
          "464:     long rc = 0;",
          "465:     struct iovec iov[2];",
          "466:     static uint32_t id = 0;",
          "468:     char *buffer = NULL;",
          "470:     if(crm_ipc_connected(client) == FALSE) {",
          "",
          "[Removed Lines]",
          "462: crm_ipc_send(crm_ipc_t *client, xmlNode *message, xmlNode **reply, int32_t ms_timeout)",
          "467:     struct qb_ipc_request_header header;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "488:     }",
          "490:     buffer = dump_xml_unformatted(message);",
          "492:     iov[0].iov_base = &header;",
          "493:     iov[1].iov_len = 1 + strlen(buffer);",
          "494:     iov[1].iov_base = buffer;",
          "499:     if(ms_timeout == 0) {",
          "500:         ms_timeout = 5000;",
          "",
          "[Removed Lines]",
          "491:     iov[0].iov_len = sizeof(struct qb_ipc_request_header);",
          "497:     header.size = iov[0].iov_len + iov[1].iov_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "503:     if(ms_timeout > 0) {",
          "504:         time_t timeout = time(NULL) + 1 + (ms_timeout / 1000);",
          "505:         crm_trace(\"Sending request %d of %u bytes to %s (timeout=%dms): %.200s...\",",
          "507:         do {",
          "508:             rc = qb_ipcc_sendv(client->ipc, iov, 2);",
          "510:         } while(rc == -EAGAIN && time(NULL) < timeout && crm_ipc_connected(client));",
          "513:             crm_trace(\"Waiting for reply %d from %s to %u bytes: %.200s...\",",
          "516:             do {",
          "517:                 rc = qb_ipcc_recv(client->ipc, client->buffer, client->buf_size, 500);",
          "518:                 if(rc > 0 || crm_ipc_connected(client) == FALSE) {",
          "520:                 }",
          "522:             } while(time(NULL) < timeout);",
          "",
          "[Removed Lines]",
          "506:                   header.id, header.size, client->name, ms_timeout, buffer);",
          "512:         if(rc > 0) {",
          "514:                       header.id, client->name, header.size, buffer);",
          "519:                     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "533:             }",
          "535:         } else {",
          "537:         }",
          "539:     } else {",
          "541:         do {",
          "542:             rc = qb_ipcc_sendv_recv(client->ipc, iov, 2, client->buffer, client->buf_size, ms_timeout);",
          "",
          "[Removed Lines]",
          "536:             crm_trace(\"Could not send %u bytes to %s: %.200s...\", header.size, client->name, buffer);",
          "540:         crm_trace(\"Waiting for reply to %u bytes: %.200s...\", header.size, buffer);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "560:         crm_notice(\"Connection to %s closed: %s (%ld)\", client->name, pcmk_strerror(rc), rc);",
          "562:     } else if(rc <= 0) {",
          "564:         crm_info(\"Request was %.120s\", buffer);",
          "565:     }",
          "",
          "[Removed Lines]",
          "563:         crm_warn(\"Request %d to %s failed: %s (%ld)\", header.id, client->name, pcmk_strerror(rc), rc);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/common/utils.c||licommon/utils.c": [
          "File: lib/common/utils.c -> licommon/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1810:         }",
          "1812:         if(connected) {",
          "1814:         }",
          "1816:         if(ipc != local_ipc) {",
          "",
          "[Removed Lines]",
          "1813:             rc = crm_ipc_send(ipc, update, NULL, 0);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/fencing/st_client.c||lifencing/st_client.c": [
          "File: lib/fencing/st_client.c -> lifencing/st_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1241:         crm_xml_add(hello, F_TYPE, T_STONITH_NG);",
          "1242:         crm_xml_add(hello, F_STONITH_OPERATION, CRM_OP_REGISTER);",
          "1243:         crm_xml_add(hello, F_STONITH_CLIENTNAME, name);",
          "1246:         if(rc < 0) {",
          "1247:             crm_perror(LOG_DEBUG, \"Couldn't complete registration with the fencing API: %d\", rc);",
          "",
          "[Removed Lines]",
          "1244:         rc = crm_ipc_send(native->ipc, hello, &reply, -1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1304:         } else {",
          "1305:             crm_xml_add(notify_msg, F_STONITH_NOTIFY_DEACTIVATE, callback);",
          "1306:         }",
          "1308:         if(rc < 0) {",
          "1309:             crm_perror(LOG_DEBUG, \"Couldn't register for fencing notifications: %d\", rc);",
          "1310:             rc = -ECOMM;",
          "",
          "[Removed Lines]",
          "1307:         rc = crm_ipc_send(native->ipc, notify_msg, NULL, -1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1636: {",
          "1637:     int rc = 0;",
          "1638:     int reply_id = -1;",
          "1640:     xmlNode *op_msg = NULL;",
          "1641:     xmlNode *op_reply = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1655:         return -EINVAL;",
          "1656:     }",
          "1658:     stonith->call_id++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1673:     crm_xml_add_int(op_msg, F_STONITH_TIMEOUT, timeout);",
          "1674:     crm_trace(\"Sending %s message to STONITH service, Timeout: %ds\", op, timeout);",
          "1677:     free_xml(op_msg);",
          "1679:     if(rc < 0) {",
          "",
          "[Removed Lines]",
          "1676:     rc = crm_ipc_send(native->ipc, op_msg, &op_reply, 1000*(timeout + 60));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/lrmd/lrmd_client.c||lilrmd/lrmd_client.c": [
          "File: lib/lrmd/lrmd_client.c -> lilrmd/lrmd_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:     crm_xml_add_int(op_msg, F_LRMD_TIMEOUT, timeout);",
          "341:     free_xml(op_msg);",
          "343:     if (rc < 0) {",
          "",
          "[Removed Lines]",
          "340:     rc = crm_ipc_send(native->ipc, op_msg, &op_reply, timeout);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "420:         crm_xml_add(hello, F_LRMD_OPERATION, CRM_OP_REGISTER);",
          "421:         crm_xml_add(hello, F_LRMD_CLIENTNAME, name);",
          "425:         if (rc < 0) {",
          "426:             crm_perror(LOG_DEBUG, \"Couldn't complete registration with the lrmd API: %d\", rc);",
          "",
          "[Removed Lines]",
          "423:         rc = crm_ipc_send(native->ipc, hello, &reply, -1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lrmd/lrmd.c||lrmd/lrmd.c": [
          "File: lrmd/lrmd.c -> lrmd/lrmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203: }",
          "205: static void",
          "207: {",
          "208:     int send_rc = 0;",
          "209:     xmlNode *reply = NULL;",
          "",
          "[Removed Lines]",
          "206: send_reply(lrmd_client_t * client, int rc, int call_id)",
          "",
          "[Added Lines]",
          "206: send_reply(lrmd_client_t * client, int rc, uint32_t id, int call_id)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:     crm_xml_add_int(reply, F_LRMD_RC, rc);",
          "214:     crm_xml_add_int(reply, F_LRMD_CALLID, call_id);",
          "218:     free_xml(reply);",
          "219:     if (send_rc < 0) {",
          "",
          "[Removed Lines]",
          "216:     send_rc = crm_ipcs_send(client->channel, reply, FALSE);",
          "",
          "[Added Lines]",
          "216:     send_rc = crm_ipcs_send(client->channel, id, reply, FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:         return;",
          "239:     }",
          "242:         crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "243:     }",
          "244: }",
          "",
          "[Removed Lines]",
          "241:     if (crm_ipcs_send(client->channel, update_msg, TRUE) <= 0) {",
          "",
          "[Added Lines]",
          "241:     if (crm_ipcs_send(client->channel, 0, update_msg, TRUE) <= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "722: }",
          "724: static int",
          "726: {",
          "727:     xmlNode *reply = create_xml_node(NULL, \"reply\");",
          "729:     crm_xml_add(reply, F_LRMD_OPERATION, CRM_OP_REGISTER);",
          "730:     crm_xml_add(reply, F_LRMD_CLIENTID, client->id);",
          "733:     free_xml(reply);",
          "734:     return pcmk_ok;",
          "735: }",
          "737: static int",
          "739: {",
          "740:     int rc = pcmk_ok;",
          "741:     lrmd_rsc_t *rsc = build_rsc_from_xml(request);",
          "",
          "[Removed Lines]",
          "725: process_lrmd_signon(lrmd_client_t * client, xmlNode * request)",
          "731:     crm_ipcs_send(client->channel, reply, FALSE);",
          "738: process_lrmd_rsc_register(lrmd_client_t * client, xmlNode * request)",
          "",
          "[Added Lines]",
          "725: process_lrmd_signon(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "731:     crm_ipcs_send(client->channel, id, reply, FALSE);",
          "738: process_lrmd_rsc_register(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "760: }",
          "762: static void",
          "764: {",
          "765:     int rc = pcmk_ok;",
          "766:     int send_rc = 0;",
          "",
          "[Removed Lines]",
          "763: process_lrmd_get_rsc_info(lrmd_client_t * client, xmlNode * request)",
          "",
          "[Added Lines]",
          "763: process_lrmd_get_rsc_info(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "798:         crm_xml_add(reply, F_LRMD_TYPE, rsc->type);",
          "799:     }",
          "803:     if (send_rc < 0) {",
          "804:         crm_warn(\"LRMD reply to %s failed: %d\", client->name, send_rc);",
          "",
          "[Removed Lines]",
          "801:     send_rc = crm_ipcs_send(client->channel, reply, FALSE);",
          "",
          "[Added Lines]",
          "801:     send_rc = crm_ipcs_send(client->channel, id, reply, FALSE);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "808: }",
          "810: static int",
          "812: {",
          "813:     int rc = pcmk_ok;",
          "814:     lrmd_rsc_t *rsc = NULL;",
          "",
          "[Removed Lines]",
          "811: process_lrmd_rsc_unregister(lrmd_client_t * client, xmlNode * request)",
          "",
          "[Added Lines]",
          "811: process_lrmd_rsc_unregister(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "837: }",
          "839: static int",
          "841: {",
          "842:     lrmd_rsc_t *rsc = NULL;",
          "843:     lrmd_cmd_t *cmd = NULL;",
          "",
          "[Removed Lines]",
          "840: process_lrmd_rsc_exec(lrmd_client_t * client, xmlNode * request)",
          "",
          "[Added Lines]",
          "840: process_lrmd_rsc_exec(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "914: }",
          "916: static int",
          "918: {",
          "919:     xmlNode *rsc_xml = get_xpath_object(\"//\" F_LRMD_RSC, request, LOG_ERR);",
          "920:     const char *rsc_id = crm_element_value(rsc_xml, F_LRMD_RSC_ID);",
          "",
          "[Removed Lines]",
          "917: process_lrmd_rsc_cancel(lrmd_client_t * client, xmlNode * request)",
          "",
          "[Added Lines]",
          "917: process_lrmd_rsc_cancel(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "931: }",
          "933: void",
          "935: {",
          "936:     int rc = pcmk_ok;",
          "937:     int call_id = 0;",
          "",
          "[Removed Lines]",
          "934: process_lrmd_message(lrmd_client_t * client, xmlNode * request)",
          "",
          "[Added Lines]",
          "934: process_lrmd_message(lrmd_client_t * client, uint32_t id, xmlNode * request)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "944:     crm_element_value_int(request, F_LRMD_CALLID, &call_id);",
          "946:     if (crm_str_eq(op, CRM_OP_REGISTER, TRUE)) {",
          "948:     } else if (crm_str_eq(op, LRMD_OP_RSC_REG, TRUE)) {",
          "950:         do_notify = 1;",
          "951:         do_reply = 1;",
          "952:     } else if (crm_str_eq(op, LRMD_OP_RSC_INFO, TRUE)) {",
          "954:     } else if (crm_str_eq(op, LRMD_OP_RSC_UNREG, TRUE)) {",
          "957:         if (rc == pcmk_ok || rc == -EINPROGRESS) {",
          "958:             do_notify = 1;",
          "959:         }",
          "960:         do_reply = 1;",
          "961:     } else if (crm_str_eq(op, LRMD_OP_RSC_EXEC, TRUE)) {",
          "963:         do_reply = 1;",
          "964:     } else if (crm_str_eq(op, LRMD_OP_RSC_CANCEL, TRUE)) {",
          "966:         do_reply = 1;",
          "967:     } else if (crm_str_eq(op, CRM_OP_QUIT, TRUE)) {",
          "968:         do_reply = 1;",
          "",
          "[Removed Lines]",
          "947:         rc = process_lrmd_signon(client, request);",
          "949:         rc = process_lrmd_rsc_register(client, request);",
          "953:         process_lrmd_get_rsc_info(client, request);",
          "955:         rc = process_lrmd_rsc_unregister(client, request);",
          "962:         rc = process_lrmd_rsc_exec(client, request);",
          "965:         rc = process_lrmd_rsc_cancel(client, request);",
          "",
          "[Added Lines]",
          "947:         rc = process_lrmd_signon(client, id, request);",
          "949:         rc = process_lrmd_rsc_register(client, id, request);",
          "953:         process_lrmd_get_rsc_info(client, id, request);",
          "955:         rc = process_lrmd_rsc_unregister(client, id, request);",
          "962:         rc = process_lrmd_rsc_exec(client, id, request);",
          "965:         rc = process_lrmd_rsc_cancel(client, id, request);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "978:               op, client->id, rc, do_reply, do_notify, exit);",
          "980:     if (do_reply) {",
          "982:     }",
          "984:     if (do_notify) {",
          "",
          "[Removed Lines]",
          "981:         send_reply(client, rc, call_id);",
          "",
          "[Added Lines]",
          "981:         send_reply(client, rc, id, call_id);",
          "",
          "---------------"
        ],
        "lrmd/lrmd_private.h||lrmd/lrmd_private.h": [
          "File: lrmd/lrmd_private.h -> lrmd/lrmd_private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: } lrmd_client_t;",
          "64: void free_rsc(gpointer data);",
          "",
          "[Removed Lines]",
          "62: void process_lrmd_message(lrmd_client_t * client, xmlNode * request);",
          "",
          "[Added Lines]",
          "62: void process_lrmd_message(lrmd_client_t * client, uint32_t id, xmlNode * request);",
          "",
          "---------------"
        ],
        "lrmd/main.c||lrmd/main.c": [
          "File: lrmd/main.c -> lrmd/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: static int32_t",
          "96: lrmd_ipc_dispatch(qb_ipcs_connection_t * c, void *data, size_t size)",
          "97: {",
          "99:     lrmd_client_t *client = (lrmd_client_t *) qb_ipcs_context_get(c);",
          "101:     CRM_CHECK(client != NULL, crm_err(\"Invalid client\");",
          "",
          "[Removed Lines]",
          "98:     xmlNode *request = crm_ipcs_recv(c, data, size);",
          "",
          "[Added Lines]",
          "98:     uint32_t id = 0;",
          "99:     uint32_t flags = 0;",
          "100:     xmlNode *request = crm_ipcs_recv(c, data, size, &id, &flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     CRM_CHECK(client->id != NULL, crm_err(\"Invalid client: %p\", client);",
          "104:               return FALSE);",
          "106:     if (!request) {",
          "107:         return 0;",
          "108:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     CRM_CHECK(flags & crm_ipc_client_response, crm_err(\"Invalid client request: %p\", client);",
          "109:               return FALSE);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     crm_xml_add(request, F_LRMD_CLIENTID, client->id);",
          "121:     crm_xml_add(request, F_LRMD_CLIENTNAME, client->name);",
          "125:     free_xml(request);",
          "126:     return 0;",
          "",
          "[Removed Lines]",
          "123:     process_lrmd_message(client, request);",
          "",
          "[Added Lines]",
          "128:     process_lrmd_message(client, id, request);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "209:                 crm_xml_add(hello, F_LRMD_OPERATION, CRM_OP_QUIT);",
          "210:                 crm_xml_add(hello, F_LRMD_CLIENTNAME, \"new_lrmd\");",
          "214:                 crm_ipc_close(ipc);",
          "215:                 crm_ipc_destroy(ipc);",
          "",
          "[Removed Lines]",
          "212:                 crm_ipc_send(ipc, hello, &reply, -1);",
          "",
          "[Added Lines]",
          "217:                 crm_ipc_send(ipc, hello, 0, 0, &reply);",
          "",
          "---------------"
        ],
        "mcp/pacemaker.c||mcp/pacemaker.c": [
          "File: mcp/pacemaker.c -> mcp/pacemaker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "447: static int32_t",
          "448: pcmk_ipc_dispatch(qb_ipcs_connection_t *c, void *data, size_t size)",
          "449: {",
          "450:     const char *task = NULL;",
          "454:     crm_trace(\"Message from %p\", c);",
          "458:     if (msg == NULL) {",
          "459:         return 0;",
          "460:     }",
          "",
          "[Removed Lines]",
          "451:     xmlNode *msg = crm_ipcs_recv(c, data, size);",
          "452:     xmlNode *ack = create_xml_node(NULL, \"ack\");",
          "455:     crm_ipcs_send(c, ack, FALSE);",
          "456:     free_xml(ack);",
          "",
          "[Added Lines]",
          "450:     uint32_t id = 0;",
          "451:     uint32_t flags = 0;",
          "453:     xmlNode *msg = crm_ipcs_recv(c, data, size, &id, &flags);",
          "456:     if(flags & crm_ipc_client_response) {",
          "457:         crm_ipcs_send_ack(c, id, \"ack\", __FUNCTION__, __LINE__);",
          "458:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "504: static gboolean",
          "505: ghash_send_proc_details(gpointer key, gpointer value, gpointer data)",
          "506: {",
          "509:         return TRUE;",
          "510:     }",
          "",
          "[Removed Lines]",
          "507:     if (crm_ipcs_send(key, data, TRUE) <= 0) {",
          "",
          "[Added Lines]",
          "509:     if (crm_ipcs_send(key, 0, data, TRUE) <= 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "710:             xmlNode *cmd = create_request(CRM_OP_QUIT, NULL, NULL, CRM_SYSTEM_MCP, CRM_SYSTEM_MCP, NULL);",
          "712:             crm_debug(\".\");",
          "714:             free_xml(cmd);",
          "716:             sleep(2);",
          "",
          "[Removed Lines]",
          "713:             crm_ipc_send(old_instance, cmd, NULL, 0);",
          "",
          "[Added Lines]",
          "715:             crm_ipc_send(old_instance, cmd, 0, 0, NULL);",
          "",
          "---------------"
        ],
        "pengine/main.c||pengine/main.c": [
          "File: pengine/main.c -> pengine/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: static int32_t",
          "62: pe_ipc_dispatch(qb_ipcs_connection_t *c, void *data, size_t size)",
          "63: {",
          "70:     if (msg != NULL) {",
          "71:         xmlNode *data = get_message_xml(msg, F_CRM_DATA);",
          "",
          "[Removed Lines]",
          "64:     xmlNode *msg = crm_ipcs_recv(c, data, size);",
          "65:     xmlNode *ack = create_xml_node(NULL, \"ack\");",
          "67:     crm_ipcs_send(c, ack, FALSE);",
          "68:     free_xml(ack);",
          "",
          "[Added Lines]",
          "64:     uint32_t id = 0;",
          "65:     uint32_t flags = 0;",
          "66:     xmlNode *msg = crm_ipcs_recv(c, data, size, &id, &flags);",
          "68:     if(flags & crm_ipc_client_response) {",
          "69:         crm_ipcs_send_ack(c, id, \"ack\", __FUNCTION__, __LINE__);",
          "70:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:     while (crm_ipc_connected(old_instance)) {",
          "158:         xmlNode *cmd = create_request(CRM_OP_QUIT, NULL, NULL, CRM_SYSTEM_PENGINE, CRM_SYSTEM_PENGINE, NULL);",
          "159:         crm_debug(\".\");",
          "161:         free_xml(cmd);",
          "163:         sleep(2);",
          "",
          "[Removed Lines]",
          "160:         crm_ipc_send(old_instance, cmd, NULL, 0);",
          "",
          "[Added Lines]",
          "162:         crm_ipc_send(old_instance, cmd, 0, 0, NULL);",
          "",
          "---------------"
        ],
        "pengine/pengine.c||pengine/pengine.c": [
          "File: pengine/pengine.c -> pengine/pengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:         crm_xml_add_int(reply, \"config-errors\", crm_config_error);",
          "169:         crm_xml_add_int(reply, \"config-warnings\", crm_config_warning);",
          "172:             crm_err(\"Couldn't send transition graph to peer, discarding\");",
          "173:         }",
          "",
          "[Removed Lines]",
          "171:         if (crm_ipcs_send(sender, reply, TRUE) == FALSE) {",
          "",
          "[Added Lines]",
          "171:         if (crm_ipcs_send(sender, 0, reply, TRUE) == FALSE) {",
          "",
          "---------------"
        ],
        "tools/attrd.c||tools/attrd.c": [
          "File: tools/attrd.c -> tools/attrd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: static int32_t",
          "139: attrd_ipc_dispatch(qb_ipcs_connection_t *c, void *data, size_t size)",
          "140: {",
          "141: #if ENABLE_ACL",
          "142:     attrd_client_t *client = qb_ipcs_context_get(c);",
          "143: #endif",
          "150:     if (msg == NULL) {",
          "151:         return 0;",
          "152:     }",
          "",
          "[Removed Lines]",
          "144:     xmlNode *msg = crm_ipcs_recv(c, data, size);",
          "145:     xmlNode *ack = create_xml_node(NULL, \"ack\");",
          "147:     crm_ipcs_send(c, ack, FALSE);",
          "148:     free_xml(ack);",
          "",
          "[Added Lines]",
          "141:     uint32_t id = 0;",
          "142:     uint32_t flags = 0;",
          "146:     xmlNode *msg = crm_ipcs_recv(c, data, size, &id, &flags);",
          "148:     if(flags & crm_ipc_client_response) {",
          "149:         crm_ipcs_send_ack(c, id, \"ack\", __FUNCTION__, __LINE__);",
          "150:     }",
          "",
          "---------------"
        ],
        "tools/crm_node.c||tools/crm_node.c": [
          "File: tools/crm_node.c -> tools/crm_node.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:     admin_uuid[10] = '\\0';",
          "509:     hello = create_hello_message(admin_uuid, \"crm_node\", \"0\", \"1\");",
          "511:     if (rc < 0) {",
          "512:         goto rm_node_cleanup;",
          "513:     }",
          "",
          "[Removed Lines]",
          "510:     rc = crm_ipc_send(conn, hello, NULL, 0);",
          "",
          "[Added Lines]",
          "510:     rc = crm_ipc_send(conn, hello, 0, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521:         \"crm_node\",",
          "522:         admin_uuid);",
          "526: rm_node_cleanup:",
          "527:     if (conn) {",
          "",
          "[Removed Lines]",
          "524:     rc = crm_ipc_send(conn, cmd, NULL, 0);",
          "",
          "[Added Lines]",
          "524:     rc = crm_ipc_send(conn, cmd, 0, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "610:             ipc = mainloop_add_ipc_client(CRM_SYSTEM_MCP, G_PRIORITY_DEFAULT, 0, NULL, &node_callbacks);",
          "611:             if(ipc != NULL) {",
          "612:                 xmlNode *poke = create_xml_node(NULL, \"poke\");",
          "614:                 free_xml(poke);",
          "615:                 g_main_run(amainloop);",
          "616:             }",
          "",
          "[Removed Lines]",
          "613:                 crm_ipc_send(mainloop_get_ipc_client(ipc), poke, NULL, 0);",
          "",
          "[Added Lines]",
          "613:                 crm_ipc_send(mainloop_get_ipc_client(ipc), poke, 0, 0, NULL);",
          "",
          "---------------"
        ],
        "tools/crm_resource.c||tools/crm_resource.c": [
          "File: tools/crm_resource.c -> tools/crm_resource.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:     free_xml(msg_data);",
          "705:         rc = 0;",
          "707:     } else {",
          "",
          "[Removed Lines]",
          "704:     if (crm_ipc_send(crmd_channel, cmd, NULL, 0) > 0) {",
          "",
          "[Added Lines]",
          "704:     if (crm_ipc_send(crmd_channel, cmd, 0, 0, NULL) > 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "780:     cmd = create_request(CRM_OP_LRM_REFRESH, NULL, host_uname,",
          "781:                          CRM_SYSTEM_CRMD, crm_system_name, our_pid);",
          "784:         rc = 0;",
          "785:     }",
          "786:     free_xml(cmd);",
          "",
          "[Removed Lines]",
          "783:     if (crm_ipc_send(crmd_channel, cmd, NULL, 0) > 0) {",
          "",
          "[Added Lines]",
          "783:     if (crm_ipc_send(crmd_channel, cmd, 0, 0, NULL) > 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1543:         }",
          "1545:         xml = create_hello_message(our_pid, crm_system_name, \"0\", \"1\");",
          "1547:         free_xml(xml);",
          "1548:     }",
          "",
          "[Removed Lines]",
          "1546:         crm_ipc_send(crmd_channel, xml, NULL, 0);",
          "",
          "[Added Lines]",
          "1546:         crm_ipc_send(crmd_channel, xml, 0, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1863:         xmlNode *cmd = create_request(CRM_OP_REPROBE, NULL, host_uname,",
          "1864:                                       CRM_SYSTEM_CRMD, crm_system_name, our_pid);",
          "1867:             start_mainloop();",
          "1868:         }",
          "",
          "[Removed Lines]",
          "1866:         if (crm_ipc_send(crmd_channel, cmd, NULL, 0) > 0) {",
          "",
          "[Added Lines]",
          "1866:         if (crm_ipc_send(crmd_channel, cmd, 0, 0, NULL) > 0) {",
          "",
          "---------------"
        ],
        "tools/crmadmin.c||tools/crmadmin.c": [
          "File: tools/crmadmin.c -> tools/crmadmin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:         xmlNode *cmd = create_request(crmd_operation, msg_data, dest_node, sys_to,",
          "379:                                       crm_system_name, admin_uuid);",
          "382:         free_xml(cmd);",
          "383:     }",
          "",
          "[Removed Lines]",
          "381:         crm_ipc_send(crmd_channel, cmd, NULL, 0);",
          "",
          "[Added Lines]",
          "381:         crm_ipc_send(crmd_channel, cmd, 0, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:     } else if (crmd_channel != NULL) {",
          "422:         xmlNode *xml = create_hello_message(admin_uuid, crm_system_name, \"0\", \"1\");",
          "424:         return TRUE;",
          "425:     }",
          "426:     return FALSE;",
          "",
          "[Removed Lines]",
          "423:         crm_ipc_send(crmd_channel, xml, NULL, 0);",
          "",
          "[Added Lines]",
          "423:         crm_ipc_send(crmd_channel, xml, 0, 0, NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61fa54d399676de9121b67adfba7476cfdaa6c4e",
      "candidate_info": {
        "commit_hash": "61fa54d399676de9121b67adfba7476cfdaa6c4e",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/61fa54d399676de9121b67adfba7476cfdaa6c4e",
        "files": [
          "include/crm_internal.h"
        ],
        "message": "Low: Build: Mark private functions as internal",
        "before_after_code_files": [
          "include/crm_internal.h||include/crm_internal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/crm_internal.h||include/crm_internal.h"
          ],
          "candidate": [
            "include/crm_internal.h||include/crm_internal.h"
          ]
        }
      },
      "candidate_diff": {
        "include/crm_internal.h||include/crm_internal.h": [
          "File: include/crm_internal.h -> include/crm_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #  include <crm/lrmd.h>",
          "42: #  if ENABLE_ACL",
          "43: static inline gboolean",
          "",
          "[Removed Lines]",
          "35: void *find_library_function(void **handle, const char *lib, const char *fn, int fatal);",
          "36: void *convert_const_pointer(const void *ptr);",
          "39: char *uid2username(uid_t uid);",
          "40: void determine_request_user(char *user, xmlNode * request, const char *field);",
          "",
          "[Added Lines]",
          "35: G_GNUC_INTERNAL void *find_library_function(void **handle, const char *lib, const char *fn, int fatal);",
          "36: G_GNUC_INTERNAL void *convert_const_pointer(const void *ptr);",
          "39: G_GNUC_INTERNAL char *uid2username(uid_t uid);",
          "40: G_GNUC_INTERNAL void determine_request_user(char *user, xmlNode * request, const char *field);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     long flags;",
          "87: };",
          "95: typedef struct pe_cluster_option_s {",
          "",
          "[Removed Lines]",
          "89: void crm_set_options(const char *short_options, const char *usage, struct crm_option *long_options, const char *app_desc);",
          "90: int crm_get_option(int argc, char **argv, int *index);",
          "91: int crm_get_option_long(int argc, char **argv, int *index, const char **longname);",
          "92: void crm_help(char cmd, int exit_code);",
          "",
          "[Added Lines]",
          "89: G_GNUC_INTERNAL void crm_set_options(const char *short_options, const char *usage, struct crm_option *long_options, const char *app_desc);",
          "90: G_GNUC_INTERNAL int crm_get_option(int argc, char **argv, int *index);",
          "91: G_GNUC_INTERNAL int crm_get_option_long(int argc, char **argv, int *index, const char **longname);",
          "92: G_GNUC_INTERNAL void crm_help(char cmd, int exit_code);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107: } pe_cluster_option;",
          "115:                      const char *desc_long, pe_cluster_option * option_list, int len);",
          "132: extern int node_score_red;",
          "",
          "[Removed Lines]",
          "109: const char *cluster_option(GHashTable * options, gboolean(*validate) (const char *),",
          "110:                            const char *name, const char *old_name, const char *def_value);",
          "112: const char *get_cluster_pref(GHashTable * options, pe_cluster_option * option_list, int len, const char *name);",
          "114: void config_metadata(const char *name, const char *version, const char *desc_short,",
          "117: void verify_all_options(GHashTable * options, pe_cluster_option * option_list, int len);",
          "118: gboolean check_time(const char *value);",
          "119: gboolean check_timer(const char *value);",
          "120: gboolean check_boolean(const char *value);",
          "121: gboolean check_number(const char *value);",
          "124: void filter_action_parameters(xmlNode * param_set, const char *version);",
          "125: void filter_reload_parameters(xmlNode * param_set, const char *restart_string);",
          "128: xmlNode *create_operation_update(xmlNode * parent, lrmd_event_data_t *event, const char *caller_version,",
          "129:                                  int target_rc, const char *origin, int level);",
          "",
          "[Added Lines]",
          "109: G_GNUC_INTERNAL const char *cluster_option(",
          "110:     GHashTable * options, gboolean(*validate) (const char *),",
          "111:     const char *name, const char *old_name, const char *def_value);",
          "113: G_GNUC_INTERNAL const char *get_cluster_pref(GHashTable * options, pe_cluster_option * option_list, int len, const char *name);",
          "115: G_GNUC_INTERNAL void config_metadata(const char *name, const char *version, const char *desc_short,",
          "118: G_GNUC_INTERNAL void verify_all_options(GHashTable * options, pe_cluster_option * option_list, int len);",
          "119: G_GNUC_INTERNAL gboolean check_time(const char *value);",
          "120: G_GNUC_INTERNAL gboolean check_timer(const char *value);",
          "121: G_GNUC_INTERNAL gboolean check_boolean(const char *value);",
          "122: G_GNUC_INTERNAL gboolean check_number(const char *value);",
          "125: G_GNUC_INTERNAL void filter_action_parameters(xmlNode * param_set, const char *version);",
          "126: G_GNUC_INTERNAL void filter_reload_parameters(xmlNode * param_set, const char *restart_string);",
          "129: G_GNUC_INTERNAL xmlNode *create_operation_update(",
          "130:     xmlNode * parent, lrmd_event_data_t *event, const char *caller_version,",
          "131:     int target_rc, const char *origin, int level);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:     return !s || *s == '\\0';",
          "143: }",
          "158: #  define crm_config_err(fmt...) { crm_config_error = TRUE; crm_err(fmt); }",
          "159: #  define crm_config_warn(fmt...) { crm_config_warning = TRUE; crm_warn(fmt); }",
          "",
          "[Removed Lines]",
          "145: char *generate_series_filename(const char *directory, const char *series, int sequence, gboolean bzip);",
          "146: int get_last_sequence(const char *directory, const char *series);",
          "147: void write_last_sequence(const char *directory, const char *series, int sequence, int max);",
          "149: void crm_make_daemon(const char *name, gboolean daemonize, const char *pidfile);",
          "150: gboolean crm_is_writable(const char *dir, const char *file, const char *user, const char *group, gboolean need_both);",
          "152: long long crm_int_helper(const char *text, char **end_text);",
          "153: char *crm_concat(const char *prefix, const char *suffix, char join);",
          "154: char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
          "155: xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
          "156: void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "",
          "[Added Lines]",
          "147: G_GNUC_INTERNAL char *generate_series_filename(const char *directory, const char *series, int sequence, gboolean bzip);",
          "148: G_GNUC_INTERNAL int get_last_sequence(const char *directory, const char *series);",
          "149: G_GNUC_INTERNAL void write_last_sequence(const char *directory, const char *series, int sequence, int max);",
          "151: G_GNUC_INTERNAL void crm_make_daemon(const char *name, gboolean daemonize, const char *pidfile);",
          "152: G_GNUC_INTERNAL gboolean crm_is_writable(const char *dir, const char *file, const char *user, const char *group, gboolean need_both);",
          "154: G_GNUC_INTERNAL long long crm_int_helper(const char *text, char **end_text);",
          "155: G_GNUC_INTERNAL char *crm_concat(const char *prefix, const char *suffix, char join);",
          "156: G_GNUC_INTERNAL char *generate_hash_key(const char *crm_msg_reference, const char *sys);",
          "157: G_GNUC_INTERNAL xmlNode *crm_recv_remote_msg(void *session, gboolean encrypted);",
          "158: G_GNUC_INTERNAL void crm_send_remote_msg(void *session, xmlNode * msg, gboolean encrypted);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2eb0554b033ded1a64492d61ba075950304797d6",
      "candidate_info": {
        "commit_hash": "2eb0554b033ded1a64492d61ba075950304797d6",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/2eb0554b033ded1a64492d61ba075950304797d6",
        "files": [
          "cib/main.c",
          "cib/remote.c",
          "crmd/heartbeat.c",
          "crmd/pengine.c",
          "include/crm/common/mainloop.h",
          "lib/cib/cib_native.c",
          "lib/cib/cib_remote.c",
          "lib/cluster/corosync.c",
          "lib/cluster/legacy.c",
          "lib/common/mainloop.c",
          "lib/fencing/st_client.c",
          "lib/lrmd/lrmd_client.c",
          "lib/services/services_linux.c",
          "mcp/corosync.c",
          "tools/crm_node.c",
          "tools/crm_resource.c",
          "tools/crmadmin.c"
        ],
        "message": "High: ipc: Expose mainloop priority when adding ipc/fd sources",
        "before_after_code_files": [
          "cib/main.c||cimain.c",
          "cib/remote.c||ciremote.c",
          "crmd/heartbeat.c||crmd/heartbeat.c",
          "crmd/pengine.c||crmd/pengine.c",
          "include/crm/common/mainloop.h||include/crm/common/mainloop.h",
          "lib/cib/cib_native.c||licicib_native.c",
          "lib/cib/cib_remote.c||licicib_remote.c",
          "lib/cluster/corosync.c||licluster/corosync.c",
          "lib/cluster/legacy.c||licluster/legacy.c",
          "lib/common/mainloop.c||licommon/mainloop.c",
          "lib/fencing/st_client.c||lifencing/st_client.c",
          "lib/lrmd/lrmd_client.c||lilrmd/lrmd_client.c",
          "lib/services/services_linux.c||liservices/services_linux.c",
          "mcp/corosync.c||mcp/corosync.c",
          "tools/crm_node.c||tools/crm_node.c",
          "tools/crm_resource.c||tools/crm_resource.c",
          "tools/crmadmin.c||tools/crmadmin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/remote.c||cib/remote.c",
            "lib/cib/cib_remote.c||lib/cib/cib_remote.c",
            "lib/common/mainloop.c||lib/common/mainloop.c"
          ],
          "candidate": [
            "cib/remote.c||ciremote.c",
            "lib/cib/cib_remote.c||licicib_remote.c",
            "lib/common/mainloop.c||licommon/mainloop.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/main.c||cimain.c": [
          "File: cib/main.c -> cimain.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:     }",
          "353:     crm_debug(\"CCM Activation passed... all set to go!\");",
          "356:     return TRUE;",
          "357: }",
          "",
          "[Removed Lines]",
          "354:     mainloop_add_fd(\"heartbeat-ccm\", cib_ev_fd, cib_ev_token, &ccm_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cib/remote.c||ciremote.c": [
          "File: cib/remote.c -> ciremote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:         return -3;",
          "162:     }",
          "166:     return ssock;",
          "167: }",
          "",
          "[Removed Lines]",
          "164:     mainloop_add_fd(\"cib-remote\", ssock, &ssock, &remote_listen_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:     free_xml(login);",
          "347:     new_client->remote = mainloop_add_fd(",
          "350:     g_hash_table_insert(client_list, new_client->id, new_client);",
          "",
          "[Removed Lines]",
          "348:         \"cib-remote-client\", csock, new_client, &remote_client_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crmd/heartbeat.c||crmd/heartbeat.c": [
          "File: crmd/heartbeat.c -> crmd/heartbeat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:             }",
          "150:             crm_info(\"CCM connection established... waiting for first callback\");",
          "153:         }",
          "154:     }",
          "",
          "[Removed Lines]",
          "151:             mainloop_add_fd(\"heartbeat-ccm\", fsa_ev_fd, fsa_ev_token, &ccm_fd_callbacks);",
          "",
          "[Added Lines]",
          "151:             mainloop_add_fd(\"heartbeat-ccm\", G_PRIORITY_HIGH, fsa_ev_fd, fsa_ev_token, &ccm_fd_callbacks);",
          "",
          "---------------"
        ],
        "crmd/pengine.c||crmd/pengine.c": [
          "File: crmd/pengine.c -> crmd/pengine.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:         if (cur_state != S_STOPPING) {",
          "163:             set_bit(fsa_input_register, pe_subsystem->flag_required);",
          "167:             if (pe_subsystem->source == NULL) {",
          "168:                 crm_warn(\"Setup of client connection failed, not adding channel to mainloop\");",
          "",
          "[Removed Lines]",
          "165:             pe_subsystem->source = mainloop_add_ipc_client(CRM_SYSTEM_PENGINE, 5*1024*1024/* 5Mb */, NULL, &pe_callbacks);",
          "",
          "[Added Lines]",
          "165:             pe_subsystem->source = mainloop_add_ipc_client(CRM_SYSTEM_PENGINE, G_PRIORITY_DEFAULT, 5*1024*1024/* 5Mb */, NULL, &pe_callbacks);",
          "",
          "---------------"
        ],
        "include/crm/common/mainloop.h||include/crm/common/mainloop.h": [
          "File: include/crm/common/mainloop.h -> include/crm/common/mainloop.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: typedef struct mainloop_io_s mainloop_io_t;",
          "55: mainloop_io_t *mainloop_add_ipc_client(",
          "58: void mainloop_del_ipc_client(mainloop_io_t *client);",
          "",
          "[Removed Lines]",
          "56:     const char *name, size_t max_size, void *userdata, struct ipc_client_callbacks *callbacks);",
          "",
          "[Added Lines]",
          "56:     const char *name, int priority, size_t max_size, void *userdata, struct ipc_client_callbacks *callbacks);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: };",
          "69: mainloop_io_t *mainloop_add_fd(",
          "72: void mainloop_del_fd(mainloop_io_t *client);",
          "",
          "[Removed Lines]",
          "70:     const char *name, int fd, void *userdata, struct mainloop_fd_callbacks *callbacks);",
          "",
          "[Added Lines]",
          "70:     const char *name, int priority, int fd, void *userdata, struct mainloop_fd_callbacks *callbacks);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: void",
          "96: mainloop_clear_child_userdata(mainloop_child_t *child);",
          "98: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: #define G_PRIORITY_MEDIUM (G_PRIORITY_HIGH/2)",
          "",
          "---------------"
        ],
        "lib/cib/cib_native.c||licicib_native.c": [
          "File: lib/cib/cib_native.c -> licicib_native.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:         }",
          "223:     } else {",
          "225:         native->ipc = mainloop_get_ipc_client(native->source);",
          "226:     }",
          "",
          "[Removed Lines]",
          "224:         native->source = mainloop_add_ipc_client(channel, 512*1024 /* 512k */, cib, &cib_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cib/cib_remote.c||licicib_remote.c": [
          "File: lib/cib/cib_remote.c -> licicib_remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316:     }",
          "318:     connection->socket = sock;",
          "320:     return rc;",
          "321: }",
          "",
          "[Removed Lines]",
          "319:     connection->source = mainloop_add_fd(\"cib-remote\", connection->socket, cib, &cib_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster/corosync.c||licluster/corosync.c": [
          "File: lib/cluster/corosync.c -> licluster/corosync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "694:         goto bail;",
          "695:     }",
          "699:   bail:",
          "700:     if (rc != CS_OK) {",
          "",
          "[Removed Lines]",
          "697:     mainloop_add_fd(\"corosync-cpg\", fd, dispatch, &cpg_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "842:         goto bail;",
          "843:     }",
          "847:     corosync_initialize_nodelist(NULL, FALSE, NULL);",
          "",
          "[Removed Lines]",
          "845:     mainloop_add_fd(\"quorum\", fd, dispatch, &quorum_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/cluster/legacy.c||licluster/legacy.c": [
          "File: lib/cluster/legacy.c -> licluster/legacy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "754:     fd = cman_get_fd(pcmk_cman_handle);",
          "758:   cman_bail:",
          "759:     if (rc < 0) {",
          "",
          "[Removed Lines]",
          "756:     mainloop_add_fd(\"cman\", fd, dispatch, &cman_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "892:         goto bail;",
          "893:     }",
          "897:   bail:",
          "898:     if (rc != CS_OK) {",
          "",
          "[Removed Lines]",
          "895:     mainloop_add_fd(\"corosync-cpg\", fd, dispatch, &cpg_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "961:         destroy = ais_destroy;",
          "962:     }",
          "965:     crm_info(\"AIS connection established\");",
          "967:     pid = getpid();",
          "",
          "[Removed Lines]",
          "964:     mainloop_add_fd(\"corosync-plugin\", ais_fd_async, dispatch, &ais_fd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/common/mainloop.c||licommon/mainloop.c": [
          "File: lib/common/mainloop.c -> licommon/mainloop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "573: mainloop_io_t *",
          "574: mainloop_add_ipc_client(",
          "576: {",
          "577:     mainloop_io_t *client = NULL;",
          "578:     crm_ipc_t *conn = crm_ipc_new(name, max_size);",
          "580:     if(conn && crm_ipc_connect(conn)) {",
          "581:         int32_t fd = crm_ipc_get_fd(conn);",
          "583:         client->ipc = conn;",
          "584:         client->destroy_fn = callbacks->destroy;",
          "585:         client->dispatch_fn_ipc = callbacks->dispatch;",
          "",
          "[Removed Lines]",
          "575:     const char *name, size_t max_size, void *userdata, struct ipc_client_callbacks *callbacks)",
          "582:         client = mainloop_add_fd(name, fd, userdata, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612: mainloop_io_t *",
          "613: mainloop_add_fd(",
          "615: {",
          "616:     mainloop_io_t *client = NULL;",
          "617:     if(fd > 0) {",
          "",
          "[Removed Lines]",
          "614:     const char *name, int fd, void *userdata, struct mainloop_fd_callbacks *callbacks)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "627:         client->channel = g_io_channel_unix_new(fd);",
          "628:         client->source = g_io_add_watch_full(",
          "630:             mainloop_gio_callback, client, mainloop_gio_destroy);",
          "631:         crm_trace(\"Added connection %d for %s[%p].%d\", client->source, client->name, client, fd);",
          "632:     }",
          "",
          "[Removed Lines]",
          "629:             client->channel, G_PRIORITY_DEFAULT, (G_IO_IN|G_IO_HUP|G_IO_NVAL|G_IO_ERR),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/fencing/st_client.c||lifencing/st_client.c": [
          "File: lib/fencing/st_client.c -> lifencing/st_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1226:     } else {",
          "1229:         native->ipc = mainloop_get_ipc_client(native->source);",
          "1230:     }",
          "",
          "[Removed Lines]",
          "1228:         native->source = mainloop_add_ipc_client(\"stonith-ng\", 0, stonith, &st_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/lrmd/lrmd_client.c||lilrmd/lrmd_client.c": [
          "File: lib/lrmd/lrmd_client.c -> lilrmd/lrmd_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:             rc = -ENOTCONN;",
          "399:         }",
          "400:     } else {",
          "402:         native->ipc = mainloop_get_ipc_client(native->source);",
          "403:     }",
          "",
          "[Removed Lines]",
          "401:         native->source = mainloop_add_ipc_client(\"lrmd\", 0, lrmd, &lrmd_callbacks);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/services/services_linux.c||liservices/services_linux.c": [
          "File: lib/services/services_linux.c -> liservices/services_linux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:                            operation_finished);",
          "450:         op->opaque->stdout_gsource = mainloop_add_fd(op->id,",
          "451:             op->opaque->stdout_fd,",
          "452:             op,",
          "453:             &stdout_callbacks);",
          "455:         op->opaque->stderr_gsource = mainloop_add_fd(op->id,",
          "456:             op->opaque->stderr_fd,",
          "457:             op,",
          "458:             &stderr_callbacks);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mcp/corosync.c||mcp/corosync.c": [
          "File: mcp/corosync.c -> mcp/corosync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     }",
          "148:     crm_debug(\"Our nodeid: %d\", *nodeid);",
          "151:     return TRUE;",
          "",
          "[Removed Lines]",
          "149:     mainloop_add_fd(\"corosync-cfg\", fd, &cfg_handle, &cfg_fd_callbacks);",
          "",
          "[Added Lines]",
          "149:     mainloop_add_fd(\"corosync-cfg\", G_PRIORITY_DEFAULT, fd, &cfg_handle, &cfg_fd_callbacks);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:         goto bail;",
          "267:     }",
          "270:     return TRUE;",
          "272:   bail:",
          "",
          "[Removed Lines]",
          "269:     mainloop_add_fd(\"corosync-cpg\", fd, &cpg_handle, &cpg_fd_callbacks);",
          "",
          "[Added Lines]",
          "269:     mainloop_add_fd(\"corosync-cpg\", G_PRIORITY_DEFAULT, fd, &cpg_handle, &cpg_fd_callbacks);",
          "",
          "---------------"
        ],
        "tools/crm_node.c||tools/crm_node.c": [
          "File: tools/crm_node.c -> tools/crm_node.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:         case 'p':",
          "609:             amainloop = g_main_new(FALSE);",
          "611:             if(ipc != NULL) {",
          "612:                 xmlNode *poke = create_xml_node(NULL, \"poke\");",
          "613:                 crm_ipc_send(mainloop_get_ipc_client(ipc), poke, NULL, 0);",
          "",
          "[Removed Lines]",
          "610:             ipc = mainloop_add_ipc_client(CRM_SYSTEM_MCP, 0, NULL, &node_callbacks);",
          "",
          "[Added Lines]",
          "610:             ipc = mainloop_add_ipc_client(CRM_SYSTEM_MCP, G_PRIORITY_DEFAULT, 0, NULL, &node_callbacks);",
          "",
          "---------------"
        ],
        "tools/crm_resource.c||tools/crm_resource.c": [
          "File: tools/crm_resource.c -> tools/crm_resource.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534:     if (rsc_cmd == 'R' || rsc_cmd == 'C' || rsc_cmd == 'F' || rsc_cmd == 'P') {",
          "1535:         xmlNode *xml = NULL;",
          "1537:         crmd_channel = mainloop_get_ipc_client(source);",
          "1539:         if (crmd_channel == NULL) {",
          "",
          "[Removed Lines]",
          "1536:         mainloop_io_t *source = mainloop_add_ipc_client(CRM_SYSTEM_CRMD, 0, NULL, &crm_callbacks);",
          "",
          "[Added Lines]",
          "1536:         mainloop_io_t *source = mainloop_add_ipc_client(CRM_SYSTEM_CRMD, G_PRIORITY_DEFAULT, 0, NULL, &crm_callbacks);",
          "",
          "---------------"
        ],
        "tools/crmadmin.c||tools/crmadmin.c": [
          "File: tools/crmadmin.c -> tools/crmadmin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "405: gboolean",
          "406: do_init(void)",
          "407: {",
          "410:     admin_uuid = calloc(1, 11);",
          "411:     if (admin_uuid != NULL) {",
          "",
          "[Removed Lines]",
          "408:     mainloop_io_t *source = mainloop_add_ipc_client(CRM_SYSTEM_CRMD, 0, NULL, &crm_callbacks);",
          "",
          "[Added Lines]",
          "408:     mainloop_io_t *source = mainloop_add_ipc_client(CRM_SYSTEM_CRMD, G_PRIORITY_DEFAULT, 0, NULL, &crm_callbacks);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a1b47e1f05adf8834f6483b65e6d960e7fb1270",
      "candidate_info": {
        "commit_hash": "7a1b47e1f05adf8834f6483b65e6d960e7fb1270",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/7a1b47e1f05adf8834f6483b65e6d960e7fb1270",
        "files": [
          "crmd/lrm.c",
          "fencing/commands.c",
          "fencing/standalone_config.c",
          "include/crm/crm.h",
          "include/crm/logging.h",
          "lib/cluster/corosync.c",
          "lib/cluster/heartbeat.c",
          "lib/cluster/legacy.c",
          "lib/common/remote.c",
          "lib/common/utils.c",
          "lib/common/xml.c",
          "lib/fencing/st_client.c",
          "lib/pengine/clone.c",
          "lib/services/services_linux.c",
          "pengine/allocate.c",
          "tools/cib_shadow.c",
          "tools/crm_inject.c",
          "tools/crm_mon.c"
        ],
        "message": "Low: Don't bother wrapping realloc",
        "before_after_code_files": [
          "crmd/lrm.c||crmd/lrm.c",
          "fencing/commands.c||fencing/commands.c",
          "fencing/standalone_config.c||fencing/standalone_config.c",
          "include/crm/crm.h||include/crm/crm.h",
          "include/crm/logging.h||include/crm/logging.h",
          "lib/cluster/corosync.c||lib/cluster/corosync.c",
          "lib/cluster/heartbeat.c||lib/cluster/heartbeat.c",
          "lib/cluster/legacy.c||lib/cluster/legacy.c",
          "lib/common/remote.c||lib/common/remote.c",
          "lib/common/utils.c||lib/common/utils.c",
          "lib/common/xml.c||lib/common/xml.c",
          "lib/fencing/st_client.c||lib/fencing/st_client.c",
          "lib/pengine/clone.c||lib/pengine/clone.c",
          "lib/services/services_linux.c||lib/services/services_linux.c",
          "pengine/allocate.c||pengine/allocate.c",
          "tools/cib_shadow.c||tools/cib_shadow.c",
          "tools/crm_inject.c||tools/crm_inject.c",
          "tools/crm_mon.c||tools/crm_mon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/common/remote.c||lib/common/remote.c",
            "tools/crm_mon.c||tools/crm_mon.c"
          ],
          "candidate": [
            "lib/common/remote.c||lib/common/remote.c",
            "tools/crm_mon.c||tools/crm_mon.c"
          ]
        }
      },
      "candidate_diff": {
        "crmd/lrm.c||crmd/lrm.c": [
          "File: crmd/lrm.c -> crmd/lrm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:             crm_xml_add(restart, param, value);",
          "654:         }",
          "655:         len += strlen(param) + 2;",
          "657:         sprintf(list + start, \" %s \", param);",
          "658:     }",
          "",
          "[Removed Lines]",
          "656:         crm_realloc(list, len + 1);",
          "",
          "[Added Lines]",
          "656:         list = realloc(list, len + 1);",
          "",
          "---------------"
        ],
        "fencing/commands.c||fencing/commands.c": [
          "File: fencing/commands.c -> fencing/commands.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:  }",
          "847:  if(more > 0) {",
          "849:      sprintf(output+len, \"%s\", buffer);",
          "850:      len += more;",
          "851:  }",
          "",
          "[Removed Lines]",
          "848:      crm_realloc(output, len + more + 1);",
          "",
          "[Added Lines]",
          "848:      output = realloc(output, len + more + 1);",
          "",
          "---------------"
        ],
        "fencing/standalone_config.c||fencing/standalone_config.c": [
          "File: fencing/standalone_config.c -> fencing/standalone_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:  if (tmp) {",
          "173:   offset = strlen(tmp);",
          "175:  } else {",
          "176:   tmp = malloc( len);",
          "177:  }",
          "",
          "[Removed Lines]",
          "174:   crm_realloc(tmp, len + offset + 1);",
          "",
          "[Added Lines]",
          "174:   tmp = realloc(tmp, len + offset + 1);",
          "",
          "---------------"
        ],
        "include/crm/crm.h||include/crm/crm.h": [
          "File: include/crm/crm.h -> include/crm/crm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: #  define crm_strdup strdup",
          "189: #  define crm_str_hash g_str_hash_traditional",
          "197: guint g_str_hash_traditional(gconstpointer v);",
          "",
          "[Removed Lines]",
          "191: #  define crm_realloc(realloc_obj, length) do {    \\",
          "192:  realloc_obj = realloc(realloc_obj, length);   \\",
          "193:  CRM_ASSERT(realloc_obj != NULL);    \\",
          "194:     } while(0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/crm/logging.h||include/crm/logging.h": [
          "File: include/crm/logging.h -> include/crm/logging.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #ifndef CRM_LOGGING__H",
          "19: #  define CRM_LOGGING__H",
          "20: #  include <qb/qblog.h>",
          "21: #  ifndef LOG_TRACE",
          "22: #    define LOG_TRACE    LOG_DEBUG+1",
          "23: #  endif",
          "24: #  define LOG_DEBUG_2  LOG_TRACE",
          "25: #  define LOG_DEBUG_3  LOG_TRACE",
          "26: #  define LOG_DEBUG_4  LOG_TRACE",
          "27: #  define LOG_DEBUG_5  LOG_TRACE",
          "28: #  define LOG_DEBUG_6  LOG_TRACE",
          "30: extern unsigned int crm_log_level;",
          "31: extern gboolean crm_config_error;",
          "32: extern gboolean crm_config_warning;",
          "34: void crm_enable_blackbox(int nsig);",
          "35: void crm_enable_blackbox_tracing(int nsig);",
          "36: void crm_write_blackbox(int nsig);",
          "38: void crm_update_callsites(void);",
          "40: void crm_log_deinit(void);",
          "42: gboolean crm_log_cli_init(const char *entity);",
          "44: gboolean crm_log_init(const char *entity, int level, gboolean daemon,",
          "45:                       gboolean to_stderr, int argc, char **argv, gboolean quiet);",
          "47: void crm_log_args(int argc, char **argv);",
          "49: gboolean crm_add_logfile(const char *filename);",
          "51: void crm_bump_log_level(void);",
          "53: void crm_enable_stderr(int enable);",
          "56: unsigned int set_crm_log_level(unsigned int level);",
          "58: unsigned int get_crm_log_level(void);",
          "65: #    define CRM_TRACE_INIT_DATA(name) QB_LOG_INIT_DATA(name)",
          "67: #    define do_crm_log(level, fmt, args...) do {                        \\",
          "68:         qb_log_from_external_source( __func__, __FILE__, fmt, level, __LINE__, 0, ##args); \\",
          "69:         if((level) < LOG_WARNING) {                                     \\",
          "70:             crm_write_blackbox(0);                                      \\",
          "71:         }                                                               \\",
          "72:     } while(0)",
          "75: #    define do_crm_log_unlikely(level, fmt, args...) do {               \\",
          "76:         static struct qb_log_callsite *trace_cs = NULL;                 \\",
          "77:         if(trace_cs == NULL) {                                          \\",
          "78:             trace_cs = qb_log_callsite_get(__func__, __FILE__, fmt, level, __LINE__, 0); \\",
          "79:         }                                                               \\",
          "80:         if (trace_cs && trace_cs->targets) {                            \\",
          "81:             qb_log_from_external_source(                                \\",
          "82:                 __func__, __FILE__, fmt, level, __LINE__, 0,  ##args);  \\",
          "83:         }                                                               \\",
          "84:     } while(0)",
          "86: #    define CRM_LOG_ASSERT(expr) do {     \\",
          "87:         if(__unlikely((expr) == FALSE)) {    \\",
          "88:             static struct qb_log_callsite *core_cs = NULL;              \\",
          "89:             if(core_cs == NULL) {                                       \\",
          "90:                 core_cs = qb_log_callsite_get(__func__, __FILE__, \"log-assert\", LOG_TRACE, __LINE__, 0); \\",
          "91:             }                                                           \\",
          "92:             crm_abort(__FILE__, __PRETTY_FUNCTION__, __LINE__, #expr,   \\",
          "93:                       core_cs?core_cs->targets:FALSE, TRUE);            \\",
          "94:         }                                                               \\",
          "95:     } while(0)",
          "97: #    define CRM_CHECK(expr, failure_action) do {    \\",
          "98:  if(__unlikely((expr) == FALSE)) {    \\",
          "99:             static struct qb_log_callsite *core_cs = NULL;              \\",
          "100:             if(core_cs == NULL) {                                       \\",
          "101:                 core_cs = qb_log_callsite_get(__func__, __FILE__, \"check-assert\", LOG_TRACE, __LINE__, 0); \\",
          "102:             }                                                           \\",
          "103:      crm_abort(__FILE__, __PRETTY_FUNCTION__, __LINE__, #expr, \\",
          "104:         core_cs?core_cs->targets:FALSE, TRUE);            \\",
          "105:      failure_action;      \\",
          "106:  }        \\",
          "107:     } while(0)",
          "109: #    define do_crm_log_xml(level, text, xml) do {                       \\",
          "110:         static struct qb_log_callsite *xml_cs = NULL;                   \\",
          "111:         if(xml_cs == NULL) {                                            \\",
          "112:             xml_cs = qb_log_callsite_get(__func__, __FILE__, \"xml-blog\", level, __LINE__, 0); \\",
          "113:         }                                                               \\",
          "114:         if (xml_cs && xml_cs->targets) {                              \\",
          "115:             log_data_element(level, __FILE__, __PRETTY_FUNCTION__, __LINE__, text, xml, 0, TRUE); \\",
          "116:         }                                                               \\",
          "117:         if((level) < LOG_WARNING) {                                     \\",
          "118:             crm_write_blackbox(0);                                      \\",
          "119:         }                                                               \\",
          "120:     } while(0)",
          "122: #    define do_crm_log_alias(level, file, function, line, fmt, args...) do { \\",
          "123:  qb_log_from_external_source(function, file, fmt, level, line, 0,  ##args); \\",
          "124:     } while(0)",
          "126: #    define do_crm_log_always(level, fmt, args...) qb_log(level, \"%s: \" fmt, __PRETTY_FUNCTION__ , ##args)",
          "128: #  define crm_perror(level, fmt, args...) do {    \\",
          "129:  const char *err = strerror(errno);    \\",
          "130:  fprintf(stderr, fmt \": %s (%d)\\n\", ##args, err, errno);  \\",
          "131:  do_crm_log(level, fmt \": %s (%d)\", ##args, err, errno);  \\",
          "132:         if((level) < LOG_WARNING) {                                     \\",
          "133:             crm_write_blackbox(0);                                      \\",
          "134:         }                                                               \\",
          "135:     } while(0)",
          "137: #    define crm_log_tag(level, tag, fmt, args...)    do {               \\",
          "138:         qb_log_from_external_source( __func__, __FILE__, fmt, level, __LINE__, g_quark_try_string(tag), ##args); \\",
          "139:     } while(0)",
          "142: #    define crm_crit(fmt, args...)    do {      \\",
          "143:         qb_logt(LOG_CRIT,    0, fmt , ##args);  \\",
          "144:         crm_write_blackbox(0);                  \\",
          "145:     } while(0)",
          "147: #    define crm_err(fmt, args...)    do {      \\",
          "148:         qb_logt(LOG_ERR,    0, fmt , ##args);  \\",
          "149:         crm_write_blackbox(0);                  \\",
          "150:     } while(0)",
          "152: #    define crm_warn(fmt, args...)    qb_logt(LOG_WARNING, 0, fmt , ##args)",
          "153: #    define crm_notice(fmt, args...)  qb_logt(LOG_NOTICE,  0, fmt , ##args)",
          "154: #    define crm_info(fmt, args...)    qb_logt(LOG_INFO,    0, fmt , ##args)",
          "156: #    define crm_debug(fmt, args...)   do_crm_log_unlikely(LOG_DEBUG, fmt , ##args)",
          "157: #    define crm_trace(fmt, args...)   do_crm_log_unlikely(LOG_TRACE, fmt , ##args)",
          "159: #  define crm_log_xml_crit(xml, text)    do_crm_log_xml(LOG_CRIT,    text, xml)",
          "160: #  define crm_log_xml_err(xml, text)     do_crm_log_xml(LOG_ERR,     text, xml)",
          "161: #  define crm_log_xml_warn(xml, text)    do_crm_log_xml(LOG_WARNING, text, xml)",
          "162: #  define crm_log_xml_notice(xml, text)  do_crm_log_xml(LOG_NOTICE,  text, xml)",
          "163: #  define crm_log_xml_info(xml, text)    do_crm_log_xml(LOG_INFO,    text, xml)",
          "164: #  define crm_log_xml_debug(xml, text)   do_crm_log_xml(LOG_DEBUG,   text, xml)",
          "165: #  define crm_log_xml_trace(xml, text)   do_crm_log_xml(LOG_TRACE,   text, xml)",
          "167: #  define crm_str(x)    (const char*)(x?x:\"<null>\")",
          "169: #endif",
          "",
          "---------------"
        ],
        "lib/cluster/corosync.c||lib/cluster/corosync.c": [
          "File: lib/cluster/corosync.c -> lib/cluster/corosync.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:     if (ais_msg->size < CRM_BZ2_THRESHOLD) {",
          "185:   failback:",
          "187:         memcpy(ais_msg->data, data, ais_msg->size);",
          "189:     } else {",
          "",
          "[Removed Lines]",
          "186:         crm_realloc(ais_msg, sizeof(AIS_Message) + ais_msg->size);",
          "",
          "[Added Lines]",
          "186:         ais_msg = realloc(ais_msg, sizeof(AIS_Message) + ais_msg->size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:             goto failback;",
          "206:         }",
          "209:         memcpy(ais_msg->data, compressed, len);",
          "210:         ais_msg->data[len] = 0;",
          "211:         free(compressed);",
          "",
          "[Removed Lines]",
          "208:         crm_realloc(ais_msg, sizeof(AIS_Message) + len + 1);",
          "",
          "[Added Lines]",
          "208:         ais_msg = realloc(ais_msg, sizeof(AIS_Message) + len + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "226:     iov.iov_base = ais_msg;",
          "227:     iov.iov_len = ais_msg->header.size;",
          "230:     do {",
          "231:         if (rc == CS_ERR_TRY_AGAIN || rc == CS_ERR_QUEUE_FULL) {",
          "",
          "[Removed Lines]",
          "228:     crm_realloc(buf, buf_len);",
          "",
          "[Added Lines]",
          "228:     buf = realloc(buf, buf_len);",
          "",
          "---------------"
        ],
        "lib/cluster/heartbeat.c||lib/cluster/heartbeat.c": [
          "File: lib/cluster/heartbeat.c -> lib/cluster/heartbeat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:      crm_trace(\"Trying to decompress %d bytes\", (int)orig_len);",
          "112:  retry:",
          "114:      memset(uncompressed, 0, size);",
          "115:      used = size - 1; /* always leave room for a trailing '\\0'",
          "",
          "[Removed Lines]",
          "113:      crm_realloc(uncompressed, size);",
          "",
          "[Added Lines]",
          "113:      uncompressed = realloc(uncompressed, size);",
          "",
          "---------------"
        ],
        "lib/cluster/legacy.c||lib/cluster/legacy.c": [
          "File: lib/cluster/legacy.c -> lib/cluster/legacy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:     if (ais_msg->size < CRM_BZ2_THRESHOLD) {",
          "272:   failback:",
          "274:         memcpy(ais_msg->data, data, ais_msg->size);",
          "276:     } else {",
          "",
          "[Removed Lines]",
          "273:         crm_realloc(ais_msg, sizeof(AIS_Message) + ais_msg->size);",
          "",
          "[Added Lines]",
          "273:         ais_msg = realloc(ais_msg, sizeof(AIS_Message) + ais_msg->size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:             goto failback;",
          "293:         }",
          "296:         memcpy(ais_msg->data, compressed, len);",
          "297:         ais_msg->data[len] = 0;",
          "298:         free(compressed);",
          "",
          "[Removed Lines]",
          "295:         crm_realloc(ais_msg, sizeof(AIS_Message) + len + 1);",
          "",
          "[Added Lines]",
          "295:         ais_msg = realloc(ais_msg, sizeof(AIS_Message) + len + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:     iov.iov_base = ais_msg;",
          "314:     iov.iov_len = ais_msg->header.size;",
          "317:     do {",
          "318:         if (rc == CS_ERR_TRY_AGAIN || rc == CS_ERR_QUEUE_FULL) {",
          "",
          "[Removed Lines]",
          "315:     crm_realloc(buf, buf_len);",
          "",
          "[Added Lines]",
          "315:     buf = realloc(buf, buf_len);",
          "",
          "---------------"
        ],
        "lib/common/remote.c||lib/common/remote.c": [
          "File: lib/common/remote.c -> lib/common/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:         } else if (rc == chunk_size) {",
          "182:             len += rc;",
          "183:             chunk_size *= 2;",
          "185:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
          "186:             CRM_ASSERT(buf != NULL);",
          "",
          "[Removed Lines]",
          "184:             crm_realloc(buf, len + chunk_size);",
          "",
          "[Added Lines]",
          "184:             buf = realloc(buf, len + chunk_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
          "190:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
          "191:             len += rc;",
          "193:             CRM_ASSERT(buf != NULL);",
          "195:         } else {",
          "",
          "[Removed Lines]",
          "192:             crm_realloc(buf, len + chunk_size);",
          "",
          "[Added Lines]",
          "192:             buf = realloc(buf, len + chunk_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264:             crm_trace(\"Retry: %d\", (int)rc);",
          "265:             if (rc > 0) {",
          "266:                 len += rc;",
          "268:                 CRM_ASSERT(buf != NULL);",
          "269:             }",
          "",
          "[Removed Lines]",
          "267:                 crm_realloc(buf, len + chunk_size);",
          "",
          "[Added Lines]",
          "267:                 buf = realloc(buf, len + chunk_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275:         } else if (rc == chunk_size) {",
          "276:             len += rc;",
          "277:             chunk_size *= 2;",
          "279:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
          "280:             CRM_ASSERT(buf != NULL);",
          "",
          "[Removed Lines]",
          "278:             crm_realloc(buf, len + chunk_size);",
          "",
          "[Added Lines]",
          "278:             buf = realloc(buf, len + chunk_size);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "283:             crm_trace(\"Last char is %d '%c'\", buf[len + rc - 1], buf[len + rc - 1]);",
          "284:             crm_trace(\"Retry with %d more bytes\", (int)chunk_size);",
          "285:             len += rc;",
          "287:             CRM_ASSERT(buf != NULL);",
          "289:         } else {",
          "",
          "[Removed Lines]",
          "286:             crm_realloc(buf, len + chunk_size);",
          "",
          "[Added Lines]",
          "286:             buf = realloc(buf, len + chunk_size);",
          "",
          "---------------"
        ],
        "lib/common/utils.c||lib/common/utils.c": [
          "File: lib/common/utils.c -> lib/common/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1654:     long_opts[index].name = \"__dummmy__\";",
          "1655:     long_opts[index].has_arg = 0;",
          "1656:     long_opts[index].flag = 0;",
          "",
          "[Removed Lines]",
          "1653:     crm_realloc(long_opts, (index + 1) * sizeof(struct option));",
          "",
          "[Added Lines]",
          "1653:     long_opts = realloc(long_opts, (index + 1) * sizeof(struct option));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1662:             continue;",
          "1663:         }",
          "1668:         long_opts[index].name = long_options[lpc].name;",
          "",
          "[Removed Lines]",
          "1665:         crm_realloc(long_opts, (index + 1) * sizeof(struct option));",
          "",
          "[Added Lines]",
          "1665:         long_opts = realloc(long_opts, (index + 1) * sizeof(struct option));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1673:     }",
          "1677:     long_opts[index].name = NULL;",
          "1678:     long_opts[index].has_arg = 0;",
          "1679:     long_opts[index].flag = 0;",
          "",
          "[Removed Lines]",
          "1676:     crm_realloc(long_opts, (index + 1) * sizeof(struct option));",
          "",
          "[Added Lines]",
          "1676:     long_opts = realloc(long_opts, (index + 1) * sizeof(struct option));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1698:         for (lpc = 0; long_options[lpc].name != NULL; lpc++) {",
          "1699:             if (long_options[lpc].val) {",
          "1701:                 local_short_options[opt_string_len++] = long_options[lpc].val;",
          "1702:                 if (long_options[lpc].has_arg == required_argument) {",
          "1703:                     local_short_options[opt_string_len++] = ':';",
          "",
          "[Removed Lines]",
          "1700:                 crm_realloc(local_short_options, opt_string_len + 3);",
          "",
          "[Added Lines]",
          "1700:                 local_short_options = realloc(local_short_options, opt_string_len + 3);",
          "",
          "---------------"
        ],
        "lib/common/xml.c||lib/common/xml.c": [
          "File: lib/common/xml.c -> lib/common/xml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:     xmlNode *xml_obj = NULL;",
          "576:     do {",
          "578:  read_chars = fread(xml_buffer + data_length, 1, XML_BUFFER_SIZE, stdin);",
          "579:  data_length += read_chars;",
          "580:     } while (read_chars > 0);",
          "",
          "[Removed Lines]",
          "577:  crm_realloc(xml_buffer, XML_BUFFER_SIZE + data_length + 1);",
          "",
          "[Added Lines]",
          "577:  xml_buffer = realloc(xml_buffer, XML_BUFFER_SIZE + data_length + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "620:     rc = BZ_OK;",
          "621:     while ( rc == BZ_OK ) {",
          "623:  read_len = BZ2_bzRead (",
          "624:      &rc, bz_file, buffer + length, XML_BUFFER_SIZE);",
          "",
          "[Removed Lines]",
          "622:  crm_realloc(buffer, XML_BUFFER_SIZE + length + 1);",
          "",
          "[Added Lines]",
          "622:  buffer = realloc(buffer, XML_BUFFER_SIZE + length + 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2790:     len += strlen(xpath);",
          "2792:     xpath_full = crm_strdup(xpath_prefix);",
          "2794:     strncat(xpath_full, xpath, len);",
          "2796:     result = get_xpath_object(xpath_full, xml_obj, error_level);",
          "",
          "[Removed Lines]",
          "2793:     crm_realloc(xpath_full, len+1);",
          "",
          "[Added Lines]",
          "2793:     xpath_full = realloc(xpath_full, len+1);",
          "",
          "---------------"
        ],
        "lib/fencing/st_client.c||lib/fencing/st_client.c": [
          "File: lib/fencing/st_client.c -> lib/fencing/st_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         last = strlen(*args);",
          "266:     }",
          "269:     crm_trace(\"Appending: %s=%s\", (char *)key, (char *)value);",
          "270:     sprintf((*args) + last, \"%s=%s\\n\", (char *)key, (char *)value);",
          "271: }",
          "",
          "[Removed Lines]",
          "268:     crm_realloc(*args, last + len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:                     ret = read(p_read_fd, buf, 500);",
          "565:                     if (ret > 0) {",
          "566:                         buf[ret] = 0;",
          "568:                         sprintf((*output) + len, \"%s\", buf);",
          "569:                         crm_trace(\"%d: %s\", ret, (*output) + len);",
          "570:                         len += ret;",
          "",
          "[Removed Lines]",
          "567:                         crm_realloc(*output, len + ret + 1);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/pengine/clone.c||lib/pengine/clone.c": [
          "File: lib/pengine/clone.c -> lib/pengine/clone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:     }",
          "332:     len += strlen(value);",
          "334:     sprintf(list + last, \" %s\", value);",
          "335:     return list;",
          "336: }",
          "",
          "[Removed Lines]",
          "333:     crm_realloc(list, len);",
          "",
          "[Added Lines]",
          "333:     list = realloc(list, len);",
          "",
          "---------------"
        ],
        "lib/services/services_linux.c||lib/services/services_linux.c": [
          "File: lib/services/services_linux.c -> lib/services/services_linux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         rc = read(fd, buf, buf_read_len);",
          "81:         if (rc > 0) {",
          "82:             buf[rc] = 0;",
          "84:             sprintf(data + len, \"%s\", buf);",
          "85:             len += rc;",
          "86:         } else if (errno != EINTR) {",
          "",
          "[Removed Lines]",
          "83:             crm_realloc(data, len + rc + 1);",
          "",
          "[Added Lines]",
          "83:             data = realloc(data, len + rc + 1);",
          "",
          "---------------"
        ],
        "pengine/allocate.c||pengine/allocate.c": [
          "File: pengine/allocate.c -> pengine/allocate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1663:             }",
          "1665:             crm_trace(\"Adding %s (%dc) at offset %d\", rsc_id, len - 2, existing_len);",
          "1667:             sprintf(*rsc_list + existing_len, \"%s \", rsc_id);",
          "1668:         }",
          "",
          "[Removed Lines]",
          "1666:             crm_realloc(*rsc_list, len + existing_len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1680:             }",
          "1682:             crm_trace(\"Adding %s (%dc) at offset %d\", uname, len - 2, existing_len);",
          "1684:             sprintf(*node_list + existing_len, \"%s \", uname);",
          "1685:         }",
          "1686:     }",
          "",
          "[Removed Lines]",
          "1683:             crm_realloc(*node_list, len + existing_len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/cib_shadow.c||tools/cib_shadow.c": [
          "File: tools/cib_shadow.c -> tools/cib_shadow.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "476:      (*buffer) = EOS; return -1;  \\",
          "477:  } else if(((*max) - total) < 256) { \\",
          "478:      (*max) *= 10;   \\",
          "480:  }     \\",
          "481:  (*offset) += len;   \\",
          "482:     } while(0)",
          "",
          "[Removed Lines]",
          "479:      crm_realloc(*buffer, (*max)); \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/crm_inject.c||tools/crm_inject.c": [
          "File: tools/crm_inject.c -> tools/crm_inject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "498:     }",
          "500:     len += strlen(value);",
          "502:     sprintf(list + last, \" %s\", value);",
          "503:     return list;",
          "504: }",
          "",
          "[Removed Lines]",
          "501:     crm_realloc(list, len);",
          "",
          "[Added Lines]",
          "501:     list = realloc(list, len);",
          "",
          "---------------"
        ],
        "tools/crm_mon.c||tools/crm_mon.c": [
          "File: tools/crm_mon.c -> tools/crm_mon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1003:     }",
          "1005:     len += strlen(value);",
          "1007:     sprintf(list + last, \" %s\", value);",
          "1008:     return list;",
          "1009: }",
          "",
          "[Removed Lines]",
          "1006:     crm_realloc(list, len);",
          "",
          "[Added Lines]",
          "1006:     list = realloc(list, len);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03f80c4ff82194784ab798279e5678427cb7adb3",
      "candidate_info": {
        "commit_hash": "03f80c4ff82194784ab798279e5678427cb7adb3",
        "repo": "ClusterLabs/pacemaker",
        "commit_url": "https://github.com/ClusterLabs/pacemaker/commit/03f80c4ff82194784ab798279e5678427cb7adb3",
        "files": [
          "cib/callbacks.c",
          "cib/callbacks.h",
          "cib/main.c",
          "cib/notify.c",
          "cib/remote.c",
          "include/crm/cib.h",
          "lib/cib/cib_client.c",
          "lib/cib/cib_native.c",
          "lib/cib/cib_utils.c"
        ],
        "message": "Medium: cib: Convert to libqb ipc",
        "before_after_code_files": [
          "cib/callbacks.c||cib/callbacks.c",
          "cib/callbacks.h||cib/callbacks.h",
          "cib/main.c||cib/main.c",
          "cib/notify.c||cib/notify.c",
          "cib/remote.c||cib/remote.c",
          "include/crm/cib.h||include/crm/cib.h",
          "lib/cib/cib_client.c||lib/cib/cib_client.c",
          "lib/cib/cib_native.c||lib/cib/cib_native.c",
          "lib/cib/cib_utils.c||lib/cib/cib_utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/callbacks.h||cib/callbacks.h",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c"
          ],
          "candidate": [
            "cib/callbacks.c||cib/callbacks.c",
            "cib/callbacks.h||cib/callbacks.h",
            "cib/notify.c||cib/notify.c",
            "cib/remote.c||cib/remote.c"
          ]
        }
      },
      "candidate_diff": {
        "cib/callbacks.c||cib/callbacks.c": [
          "File: cib/callbacks.c -> cib/callbacks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: extern gboolean stand_alone;",
          "48: extern const char *cib_root;",
          "50: #if SUPPORT_HEARTBEAT",
          "51: extern ll_cluster_t *hb_conn;",
          "52: #endif",
          "56: extern enum cib_errors cib_update_counter(xmlNode * xml_obj, const char *field, gboolean reset);",
          "58: extern void GHFunc_count_peers(gpointer key, gpointer value, gpointer user_data);",
          "61: void terminate_cib(const char *caller, gboolean fast);",
          "62: gint cib_GCompareFunc(gconstpointer a, gconstpointer b);",
          "63: gboolean can_write(int flags);",
          "64: void send_cib_replace(const xmlNode * sync_request, const char *host);",
          "65: void cib_process_request(xmlNode * request, gboolean privileged, gboolean force_synchronous,",
          "66:                          gboolean from_peer, cib_client_t * cib_client);",
          "70: extern GHashTable *client_list;",
          "",
          "[Removed Lines]",
          "54: extern void cib_ha_connection_destroy(gpointer user_data);",
          "60: void initiate_exit(void);",
          "67: void cib_common_callback_worker(xmlNode * op_request, cib_client_t * cib_client,",
          "68:                                 gboolean force_synchronous, gboolean privileged);",
          "",
          "[Added Lines]",
          "50: qb_ipcs_service_t *ipcs_ro = NULL;",
          "51: qb_ipcs_service_t *ipcs_rw = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: extern longclock_t cib_call_time;",
          "77: extern enum cib_errors cib_status;",
          "81: enum cib_errors cib_process_command(xmlNode * request, xmlNode ** reply,",
          "82:                                     xmlNode ** cib_diff, gboolean privileged);",
          "92: {",
          "107:     }",
          "120: }",
          "124: {",
          "125:     cl_uuid_t client_id;",
          "127:     cib_client_t *new_client = NULL;",
          "128:     char uuid_str[UU_UNPARSE_SIZEOF];",
          "160:     crm_malloc0(new_client, sizeof(cib_client_t));",
          "175:     cl_uuid_generate(&client_id);",
          "176:     cl_uuid_unparse(&client_id, uuid_str);",
          "",
          "[Removed Lines]",
          "79: int send_via_callback_channel(xmlNode * msg, const char *token);",
          "84: gboolean cib_common_callback(IPC_Channel * channel, cib_client_t * cib_client,",
          "85:                              gboolean force_synchronous, gboolean privileged);",
          "87: gboolean cib_process_disconnect(IPC_Channel * channel, cib_client_t * cib_client);",
          "88: int num_clients = 0;",
          "90: static void",
          "91: cib_ipc_connection_destroy(gpointer user_data)",
          "93:     cib_client_t *cib_client = user_data;",
          "97:     if (cib_client == NULL) {",
          "98:         crm_trace(\"Destroying %p\", user_data);",
          "99:         return;",
          "100:     }",
          "102:     if (cib_client->source != NULL) {",
          "104:         crm_trace(\"Deleting %s (%p) from mainloop\", cib_client->name, cib_client->source);",
          "105:         G_main_del_IPC_Channel(cib_client->source);",
          "106:         cib_client->source = NULL;",
          "109:     crm_trace(\"Destroying %s (%p)\", cib_client->name, user_data);",
          "110:     num_clients--;",
          "111:     crm_trace(\"Num unfree'd clients: %d\", num_clients);",
          "112:     crm_free(cib_client->name);",
          "113:     crm_free(cib_client->callback_id);",
          "114:     crm_free(cib_client->id);",
          "115:     crm_free(cib_client->user);",
          "116:     crm_free(cib_client);",
          "117:     crm_trace(\"Freed the cib client\");",
          "119:     return;",
          "122: gboolean",
          "123: cib_client_connect(IPC_Channel * channel, gpointer user_data)",
          "126:     xmlNode *reg_msg = NULL;",
          "129:     const char *channel_name = user_data;",
          "131:     gboolean(*callback) (IPC_Channel * channel, gpointer user_data);",
          "133:     crm_trace(\"Connecting channel\");",
          "135:     if (channel == NULL) {",
          "136:         crm_err(\"Channel was NULL\");",
          "137:         cib_bad_connects++;",
          "138:         return FALSE;",
          "140:     } else if (channel->ch_status != IPC_CONNECT) {",
          "141:         crm_err(\"Channel was disconnected\");",
          "142:         cib_bad_connects++;",
          "143:         return FALSE;",
          "145:     } else if (channel_name == NULL) {",
          "146:         crm_err(\"user_data must contain channel name\");",
          "147:         cib_bad_connects++;",
          "148:         return FALSE;",
          "150:     } else if (cib_shutdown_flag) {",
          "151:         crm_info(\"Ignoring new client [%d] during shutdown\", channel->farside_pid);",
          "152:         return FALSE;",
          "153:     }",
          "155:     callback = cib_ro_callback;",
          "156:     if (safe_str_eq(channel_name, cib_channel_rw)) {",
          "157:         callback = cib_rw_callback;",
          "158:     }",
          "161:     num_clients++;",
          "162:     new_client->channel = channel;",
          "163:     new_client->channel_name = channel_name;",
          "165:     crm_trace(\"Created channel %p for channel %s\", new_client, new_client->channel_name);",
          "167:     channel->ops->set_recv_qlen(channel, 1024);",
          "168:     channel->ops->set_send_qlen(channel, 1024);",
          "170:     new_client->source = G_main_add_IPC_Channel(G_PRIORITY_DEFAULT, channel, FALSE, callback,",
          "171:                                                 new_client, cib_ipc_connection_destroy);",
          "173:     crm_trace(\"Channel %s connected for client %s\", new_client->channel_name, new_client->id);",
          "",
          "[Added Lines]",
          "80: gboolean cib_common_callback(qb_ipcs_connection_t *c, void *data, size_t size, gboolean privileged);",
          "82: static int32_t",
          "83: cib_ipc_accept(qb_ipcs_connection_t *c, uid_t uid, gid_t gid)",
          "85:     crm_trace(\"Connecting %p for uid=%d gid=%d pid=%d\", c, uid, gid, crm_ipcs_client_pid(c));",
          "86:     if (cib_shutdown_flag) {",
          "87:         crm_info(\"Ignoring new client [%d] during shutdown\", crm_ipcs_client_pid(c));",
          "88:         return -EPERM;",
          "90:     return 0;",
          "93: static void",
          "94: cib_ipc_created(qb_ipcs_connection_t *c)",
          "101:     new_client->ipc = c;",
          "103:     crm_trace(\"%p connected for client %s\", c, new_client->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:     g_hash_table_insert(client_list, new_client->id, new_client);",
          "194: }",
          "198: {",
          "203: }",
          "207: {",
          "212: }",
          "214: void",
          "217: {",
          "218:     longclock_t call_stop = 0;",
          "219:     longclock_t call_start = 0;",
          "",
          "[Removed Lines]",
          "186:     reg_msg = create_xml_node(NULL, \"callback\");",
          "187:     crm_xml_add(reg_msg, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "188:     crm_xml_add(reg_msg, F_CIB_CLIENTID, new_client->id);",
          "190:     send_ipc_message(channel, reg_msg);",
          "191:     free_xml(reg_msg);",
          "193:     return TRUE;",
          "196: gboolean",
          "197: cib_rw_callback(IPC_Channel * channel, gpointer user_data)",
          "199:     gboolean result = FALSE;",
          "201:     result = cib_common_callback(channel, user_data, FALSE, TRUE);",
          "202:     return result;",
          "205: gboolean",
          "206: cib_ro_callback(IPC_Channel * channel, gpointer user_data)",
          "208:     gboolean result = FALSE;",
          "210:     result = cib_common_callback(channel, user_data, FALSE, FALSE);",
          "211:     return result;",
          "215: cib_common_callback_worker(xmlNode * op_request, cib_client_t * cib_client,",
          "216:                            gboolean force_synchronous, gboolean privileged)",
          "",
          "[Added Lines]",
          "116:     qb_ipcs_context_set(c, new_client);",
          "117: }",
          "119: static int32_t",
          "120: cib_ipc_dispatch_rw(qb_ipcs_connection_t *c, void *data, size_t size)",
          "121: {",
          "122:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "123:     crm_trace(\"%p message from %s\", c, cib_client->id);",
          "124:     return cib_common_callback(c, data, size, TRUE);",
          "125: }",
          "127: static int32_t",
          "128: cib_ipc_dispatch_ro(qb_ipcs_connection_t *c, void *data, size_t size)",
          "129: {",
          "130:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "131:     crm_trace(\"%p message from %s\", c, cib_client->id);",
          "132:     return cib_common_callback(c, data, size, FALSE);",
          "136: static int32_t",
          "137: cib_ipc_closed(qb_ipcs_connection_t *c)",
          "139:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "140:     crm_trace(\"Connection %p closed\", c);",
          "142:     CRM_ASSERT(cib_client != NULL);",
          "143:     CRM_ASSERT(cib_client->id != NULL);",
          "145:     if (!g_hash_table_remove(client_list, cib_client->id)) {",
          "146:         crm_err(\"Client %s not found in the hashtable\", cib_client->name);",
          "147:     }",
          "149:     return 0;",
          "152: static void",
          "153: cib_ipc_destroy(qb_ipcs_connection_t *c)",
          "155:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "157:     CRM_ASSERT(cib_client != NULL);",
          "158:     CRM_ASSERT(cib_client->id != NULL);",
          "161:     g_hash_table_remove(client_list, cib_client->id);",
          "163:     crm_trace(\"Destroying %s (%p)\", cib_client->name, c);",
          "164:     crm_free(cib_client->name);",
          "165:     crm_free(cib_client->callback_id);",
          "166:     crm_free(cib_client->id);",
          "167:     crm_free(cib_client->user);",
          "168:     crm_free(cib_client);",
          "169:     crm_trace(\"Freed the cib client\");",
          "171:     if (cib_shutdown_flag) {",
          "172:         cib_shutdown(0);",
          "173:     }",
          "176: struct qb_ipcs_service_handlers ipc_ro_callbacks =",
          "177: {",
          "178:     .connection_accept = cib_ipc_accept,",
          "179:     .connection_created = cib_ipc_created,",
          "180:     .msg_process = cib_ipc_dispatch_ro,",
          "181:     .connection_closed = cib_ipc_closed,",
          "182:     .connection_destroyed = cib_ipc_destroy",
          "183: };",
          "185: struct qb_ipcs_service_handlers ipc_rw_callbacks =",
          "186: {",
          "187:     .connection_accept = cib_ipc_accept,",
          "188:     .connection_created = cib_ipc_created,",
          "189:     .msg_process = cib_ipc_dispatch_rw,",
          "190:     .connection_closed = cib_ipc_closed,",
          "191:     .connection_destroyed = cib_ipc_destroy",
          "192: };",
          "195: cib_common_callback_worker(xmlNode * op_request, cib_client_t * cib_client, gboolean privileged)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:     const char *op = crm_element_value(op_request, F_CIB_OPERATION);",
          "223:     if (crm_str_eq(op, CRM_OP_REGISTER, TRUE)) {",
          "224:         return;",
          "226:     } else if (crm_str_eq(op, T_CIB_NOTIFY, TRUE)) {",
          "228:         int on_off = 0;",
          "230:         crm_element_value_int(op_request, F_CIB_NOTIFY_ACTIVATE, &on_off);",
          "232:         crm_debug(\"Setting %s callbacks for %s (%s): %s\",",
          "",
          "[Removed Lines]",
          "229:         const char *type = crm_element_value(op_request, F_CIB_NOTIFY_TYPE);;",
          "",
          "[Added Lines]",
          "203:         xmlNode *ack = create_xml_node(NULL, __FUNCTION__);",
          "205:         crm_xml_add(ack, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "206:         crm_xml_add(ack, F_CIB_CLIENTID, cib_client->id);",
          "207:  crm_ipcs_send(cib_client->ipc, ack, FALSE);",
          "208:         free_xml(ack);",
          "214:         int rc = cib_ok;",
          "215:         const char *type = crm_element_value(op_request, F_CIB_NOTIFY_TYPE);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "247:         } else if (safe_str_eq(type, T_CIB_REPLACE_NOTIFY)) {",
          "248:             cib_client->replace = on_off;",
          "249:         }",
          "250:         return;",
          "251:     }",
          "253:     cib_client->num_calls++;",
          "254:     call_start = time_longclock();",
          "257:     call_stop = time_longclock();",
          "258:     cib_call_time += (call_stop - call_start);",
          "259: }",
          "264: {",
          "293:         }",
          "298: #if ENABLE_ACL",
          "300: #endif",
          "325: }",
          "327: static void",
          "",
          "[Removed Lines]",
          "255:     cib_process_request(op_request, force_synchronous, privileged, FALSE, cib_client);",
          "261: gboolean",
          "262: cib_common_callback(IPC_Channel * channel, cib_client_t * cib_client,",
          "263:                     gboolean force_synchronous, gboolean privileged)",
          "265:     int lpc = 0;",
          "266:     const char *value = NULL;",
          "267:     xmlNode *op_request = NULL;",
          "268:     gboolean keep_channel = TRUE;",
          "270:     CRM_CHECK(cib_client != NULL, crm_err(\"Invalid client\"); return FALSE);",
          "271:     CRM_CHECK(cib_client->id != NULL, crm_err(\"Invalid client: %p\", cib_client); return FALSE);",
          "277:     while (lpc < 5 && IPC_ISRCONN(channel)",
          "278:            && channel->ops->is_message_pending(channel)) {",
          "280:         lpc++;",
          "281:         op_request = xmlfromIPC(channel, MAX_IPC_DELAY);",
          "282:         if (op_request == NULL) {",
          "283:             break;",
          "284:         }",
          "286:         if (cib_client->name == NULL) {",
          "287:             value = crm_element_value(op_request, F_CIB_CLIENTNAME);",
          "288:             if (value == NULL) {",
          "289:                 cib_client->name = crm_itoa(channel->farside_pid);",
          "290:             } else {",
          "291:                 cib_client->name = crm_strdup(value);",
          "292:             }",
          "295:         crm_xml_add(op_request, F_CIB_CLIENTID, cib_client->id);",
          "296:         crm_xml_add(op_request, F_CIB_CLIENTNAME, cib_client->name);",
          "299:         determine_request_user(&cib_client->user, channel, op_request, F_CIB_USER);",
          "304:         if (cib_client->callback_id == NULL) {",
          "305:             value = crm_element_value(op_request, F_CIB_CALLBACK_TOKEN);",
          "306:             if (value != NULL) {",
          "307:                 cib_client->callback_id = crm_strdup(value);",
          "309:             } else {",
          "310:                 cib_client->callback_id = crm_strdup(cib_client->id);",
          "311:             }",
          "312:         }",
          "314:         cib_common_callback_worker(op_request, cib_client, force_synchronous, privileged);",
          "316:         free_xml(op_request);",
          "317:     }",
          "319:     if (channel->ch_status != IPC_CONNECT) {",
          "320:         crm_trace(\"Client disconnected\");",
          "321:         keep_channel = cib_process_disconnect(channel, cib_client);",
          "322:     }",
          "324:     return keep_channel;",
          "",
          "[Added Lines]",
          "235:         } else {",
          "236:             rc = cib_NOTEXISTS;",
          "244:     cib_process_request(op_request, FALSE, privileged, FALSE, cib_client);",
          "250: int32_t",
          "251: cib_common_callback(qb_ipcs_connection_t *c, void *data, size_t size, gboolean privileged)",
          "253:     int call_options = 0;",
          "254:     xmlNode *op_request = crm_ipcs_recv(c, data, size);",
          "255:     cib_client_t *cib_client = qb_ipcs_context_get(c);",
          "257:     if(op_request) {",
          "258:         crm_element_value_int(op_request, F_CIB_CALLOPTS, &call_options);",
          "259:     }",
          "261:     if (op_request == NULL || cib_client == NULL) {",
          "262:         xmlNode *ack = create_xml_node(NULL, \"nack\");",
          "264:         crm_trace(\"Sending nack to %p\", cib_client);",
          "265:         crm_ipcs_send(c, ack, FALSE);",
          "266:         free_xml(ack);",
          "267:         return 0;",
          "269:     } else if((call_options & cib_sync_call) == 0) {",
          "270:         xmlNode *ack = create_xml_node(NULL, \"ack\");",
          "272:         crm_trace(\"Sending a-sync ack\");",
          "273:         crm_ipcs_send(c, ack, FALSE);",
          "274:         free_xml(ack);",
          "275:     }",
          "277:     if (cib_client->name == NULL) {",
          "278:         const char *value = crm_element_value(op_request, F_CIB_CLIENTNAME);",
          "279:         if (value == NULL) {",
          "280:             cib_client->name = crm_itoa(crm_ipcs_client_pid(c));",
          "281:         } else {",
          "282:             cib_client->name = crm_strdup(value);",
          "284:     }",
          "286:     if (cib_client->callback_id == NULL) {",
          "287:         const char *value = crm_element_value(op_request, F_CIB_CALLBACK_TOKEN);",
          "288:         if (value != NULL) {",
          "289:             cib_client->callback_id = crm_strdup(value);",
          "291:         } else {",
          "292:             cib_client->callback_id = crm_strdup(cib_client->id);",
          "293:         }",
          "294:     }",
          "296:     crm_xml_add(op_request, F_CIB_CLIENTID, cib_client->id);",
          "297:     crm_xml_add(op_request, F_CIB_CLIENTNAME, cib_client->name);",
          "300:     determine_request_user(&cib_client->user, channel, op_request, F_CIB_USER);",
          "303:     crm_log_xml_trace(op_request, \"Client[inbound]\");",
          "305:     cib_common_callback_worker(op_request, cib_client, privileged);",
          "307:     return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "339:     }",
          "341:     if (client_obj == NULL) {",
          "344:     } else {",
          "347:         crm_trace(\"Sending %ssync response to %s %s\",",
          "348:                   sync_reply ? \"\" : \"an a-\", client_obj->name,",
          "349:                   from_peer ? \"(originator of delegated request)\" : \"\");",
          "353:         }",
          "355:     }",
          "357:     if (local_rc != cib_ok && client_obj != NULL) {",
          "",
          "[Removed Lines]",
          "342:         local_rc = cib_reply_failed;",
          "345:         const char *client_id = client_obj->callback_id;",
          "351:         if (sync_reply) {",
          "352:             client_id = client_obj->id;",
          "354:         local_rc = send_via_callback_channel(notify_src, client_id);",
          "",
          "[Added Lines]",
          "325:         local_rc = cib_client_gone;",
          "332:         if (client_obj->ipc && crm_ipcs_send(client_obj->ipc, notify_src, !sync_reply) < 0) {",
          "333:             local_rc = cib_reply_failed;",
          "335: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "336:         } else if (client_obj->session) {",
          "337:             cib_send_remote_msg(client_obj->session, notify_src, client_obj->encrypted);",
          "338: #endif",
          "339:         } else if(client_obj->ipc == NULL) {",
          "340:             crm_err(\"Unknown transport for %s\", client_obj->name);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "699:             local_notify = FALSE;",
          "700:         }",
          "701:     }",
          "704:     if (local_notify) {",
          "705:         const char *client_id = crm_element_value(request, F_CIB_CLIENTID);",
          "",
          "[Removed Lines]",
          "702:     crm_trace(\"processing response cases\");",
          "",
          "[Added Lines]",
          "689:     crm_trace(\"processing response cases %.16x %.16x\", call_options, cib_sync_call);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1042:     return rc;",
          "1043: }",
          "1095: gint",
          "1096: cib_GCompareFunc(gconstpointer a, gconstpointer b)",
          "1097: {",
          "",
          "[Removed Lines]",
          "1045: int",
          "1046: send_via_callback_channel(xmlNode * msg, const char *token)",
          "1047: {",
          "1048:     cib_client_t *hash_client = NULL;",
          "1049:     enum cib_errors rc = cib_ok;",
          "1051:     crm_trace(\"Delivering msg %p to client %s\", msg, token);",
          "1053:     if (token == NULL) {",
          "1054:         crm_err(\"No client id token, cant send message\");",
          "1055:         if (rc == cib_ok) {",
          "1056:             rc = cib_missing;",
          "1057:         }",
          "1059:     } else if (msg == NULL) {",
          "1060:         crm_err(\"No message to send\");",
          "1061:         rc = cib_reply_failed;",
          "1063:     } else {",
          "1067:         hash_client = g_hash_table_lookup(client_list, token);",
          "1068:         if (hash_client == NULL) {",
          "1069:             crm_warn(\"Cannot find client for token %s\", token);",
          "1070:             rc = cib_client_gone;",
          "1072:         } else if (crm_str_eq(hash_client->channel_name, \"remote\", FALSE)) {",
          "1075:         } else if (hash_client->channel == NULL) {",
          "1076:             crm_err(\"Cannot find channel for client %s\", token);",
          "1077:             rc = cib_client_corrupt;",
          "1078:         }",
          "1079:     }",
          "1081:     if (rc == cib_ok) {",
          "1082:         crm_trace(\"Delivering reply to client %s (%s)\", token, hash_client->channel_name);",
          "1083:         if (crm_str_eq(hash_client->channel_name, \"remote\", FALSE)) {",
          "1084:             cib_send_remote_msg(hash_client->channel, msg, hash_client->encrypted);",
          "1086:         } else if (send_ipc_message(hash_client->channel, msg) == FALSE) {",
          "1087:             crm_warn(\"Delivery of reply to client %s/%s failed\", hash_client->name, token);",
          "1088:             rc = cib_reply_failed;",
          "1089:         }",
          "1090:     }",
          "1092:     return rc;",
          "1093: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1116:     return 1;",
          "1117: }",
          "1149: void",
          "1150: cib_ha_peer_callback(HA_Message * msg, void *private_data)",
          "1151: {",
          "",
          "[Removed Lines]",
          "1119: gboolean",
          "1120: cib_process_disconnect(IPC_Channel * channel, cib_client_t * cib_client)",
          "1121: {",
          "1123:     if (channel == NULL) {",
          "1124:         CRM_LOG_ASSERT(cib_client == NULL);",
          "1126:     } else if (cib_client == NULL) {",
          "1127:         crm_err(\"No client\");",
          "1129:     } else {",
          "1130:         CRM_LOG_ASSERT(channel->ch_status != IPC_CONNECT);",
          "1131:         crm_trace(\"Cleaning up after client disconnect: %s/%s/%s\",",
          "1132:                     crm_str(cib_client->name), cib_client->channel_name, cib_client->id);",
          "1134:         if (cib_client->id != NULL) {",
          "1135:             if (!g_hash_table_remove(client_list, cib_client->id)) {",
          "1136:                 crm_err(\"Client %s not found in the hashtable\", cib_client->name);",
          "1137:             }",
          "1138:         }",
          "1139:     }",
          "1141:     if (cib_shutdown_flag && g_hash_table_size(client_list) == 0) {",
          "1142:         crm_info(\"All clients disconnected...\");",
          "1143:         initiate_exit();",
          "1144:     }",
          "1146:     return FALSE;",
          "1147: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1317:     return FALSE;",
          "1318: }",
          "1320: void",
          "1321: initiate_exit(void)",
          "1322: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1227: static void",
          "1228: disconnect_remote_client(gpointer key, gpointer value, gpointer user_data)",
          "1229: {",
          "1230:     cib_client_t *a_client = value;",
          "1231:     crm_err(\"Disconnecting %s... Not implemented\", crm_str(a_client->name));",
          "1232: }",
          "1234: void",
          "1235: cib_shutdown(int nsig)",
          "1236: {",
          "1237:     struct qb_ipcs_stats srv_stats;",
          "1238:     if (cib_shutdown_flag == FALSE) {",
          "1239:         int disconnects = 0;",
          "1240:         qb_ipcs_connection_t *c = NULL;",
          "1242:         cib_shutdown_flag = TRUE;",
          "1244:         for(c = qb_ipcs_connection_first_get(ipcs_rw); c != NULL; c = qb_ipcs_connection_next_get(ipcs_rw, c)) {",
          "1245:             crm_debug(\"Disconnecting r/w client %p...\", c);",
          "1246:             qb_ipcs_disconnect(c);",
          "1247:             disconnects++;",
          "1248:         }",
          "1250:         for(c = qb_ipcs_connection_first_get(ipcs_ro); c != NULL; c = qb_ipcs_connection_next_get(ipcs_ro, c)) {",
          "1251:             crm_debug(\"Disconnecting r/o client %p...\", c);",
          "1252:             qb_ipcs_disconnect(c);",
          "1253:             disconnects++;",
          "1254:         }",
          "1256:         disconnects += g_hash_table_size(client_list);",
          "1258:         crm_debug(\"Disconnecting %d remote clients\", g_hash_table_size(client_list));",
          "1259:         g_hash_table_foreach(client_list, disconnect_remote_client, NULL);",
          "1260:         crm_info(\"Disconnected %d clients\", disconnects);",
          "1261:     }",
          "1263:     qb_ipcs_stats_get(ipcs_rw, &srv_stats, QB_FALSE);",
          "1265:     if(g_hash_table_size(client_list) == 0) {",
          "1266:         crm_info(\"All clients disconnected (%d)\", srv_stats.active_connections);",
          "1267:         initiate_exit();",
          "1269:     } else {",
          "1270:         crm_info(\"Waiting on %d clients to disconnect (%d)\", g_hash_table_size(client_list), srv_stats.active_connections);",
          "1271:     }",
          "1272: }",
          "",
          "---------------"
        ],
        "cib/callbacks.h||cib/callbacks.h": [
          "File: cib/callbacks.h -> cib/callbacks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <crm/common/xml.h>",
          "26: #include <crm/common/cluster.h>",
          "28: extern gboolean cib_is_master;",
          "29: extern GHashTable *client_list;",
          "30: extern GHashTable *peer_hash;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "29: #  undef KEYFILE",
          "30: #  include <gnutls/gnutls.h>",
          "31: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     char *callback_id;",
          "37:     char *user;",
          "43:     gboolean encrypted;",
          "44:     unsigned long num_calls;",
          "46:     int pre_notify;",
          "",
          "[Removed Lines]",
          "39:     const char *channel_name;",
          "41:     IPC_Channel *channel;",
          "42:     GCHSource *source;",
          "",
          "[Added Lines]",
          "45:     qb_ipcs_connection_t *ipc;",
          "47: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "48:     gnutls_session *session;",
          "49: #else",
          "50:     void *session;",
          "51: #endif",
          "53:     GFDSource *remote;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:                            xmlNode *, xmlNode *, xmlNode **, xmlNode **);",
          "64: } cib_operation_t;",
          "71: extern void cib_ha_peer_callback(HA_Message * msg, void *private_data);",
          "72: extern void cib_peer_callback(xmlNode * msg, void *private_data);",
          "73: extern void cib_client_status_callback(const char *node, const char *client,",
          "74:                                        const char *status, void *private);",
          "76: #if SUPPORT_HEARTBEAT",
          "77: extern gboolean cib_ccm_dispatch(int fd, gpointer user_data);",
          "",
          "[Removed Lines]",
          "66: extern gboolean cib_client_connect(IPC_Channel * channel, gpointer user_data);",
          "67: extern gboolean cib_null_callback(IPC_Channel * channel, gpointer user_data);",
          "68: extern gboolean cib_rw_callback(IPC_Channel * channel, gpointer user_data);",
          "69: extern gboolean cib_ro_callback(IPC_Channel * channel, gpointer user_data);",
          "",
          "[Added Lines]",
          "77: extern struct qb_ipcs_service_handlers ipc_ro_callbacks;",
          "78: extern struct qb_ipcs_service_handlers ipc_rw_callbacks;",
          "79: extern qb_ipcs_service_t *ipcs_ro;",
          "80: extern qb_ipcs_service_t *ipcs_rw;",
          "86: extern void cib_common_callback_worker(xmlNode * op_request, cib_client_t * cib_client, gboolean privileged);",
          "88: void cib_shutdown(int nsig);",
          "89: void initiate_exit(void);",
          "",
          "---------------"
        ],
        "cib/main.c||cib/main.c": [
          "File: cib/main.c -> cib/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: void usage(const char *cmd, int exit_status);",
          "82: int cib_init(void);",
          "83: void cib_shutdown(int nsig);",
          "85: gboolean startCib(const char *filename);",
          "86: extern int write_cib_contents(gpointer p);",
          "",
          "[Removed Lines]",
          "84: void cib_ha_connection_destroy(gpointer user_data);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126: {",
          "127:     cib_client_t *a_client = value;",
          "131: }",
          "133: int",
          "",
          "[Removed Lines]",
          "129:     crm_info(\"Client %s/%s\", crm_str(a_client->name),",
          "130:     crm_str(a_client->channel_name));",
          "",
          "[Added Lines]",
          "128:     crm_info(\"Client %s\", crm_str(a_client->name));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486:     }",
          "487: }",
          "489: int",
          "490: cib_init(void)",
          "491: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487: static void",
          "488: cib_ha_connection_destroy(gpointer user_data)",
          "489: {",
          "490:     if (cib_shutdown_flag) {",
          "491:         crm_info(\"Heartbeat disconnection complete... exiting\");",
          "492:         terminate_cib(__FUNCTION__, FALSE);",
          "493:     } else {",
          "494:         crm_err(\"Heartbeat connection lost!  Exiting.\");",
          "495:         terminate_cib(__FUNCTION__, TRUE);",
          "496:     }",
          "497: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "552:         cib_our_uname = crm_strdup(\"localhost\");",
          "553:     }",
          "566:     if (stand_alone) {",
          "567:         if (was_error) {",
          "",
          "[Removed Lines]",
          "555:     channel1 = crm_strdup(cib_channel_callback);",
          "556:     was_error = init_server_ipc_comms(channel1, cib_client_connect, default_ipc_connection_destroy);",
          "558:     channel2 = crm_strdup(cib_channel_ro);",
          "559:     was_error = was_error || init_server_ipc_comms(channel2, cib_client_connect,",
          "560:                                                    default_ipc_connection_destroy);",
          "562:     channel3 = crm_strdup(cib_channel_rw);",
          "563:     was_error = was_error || init_server_ipc_comms(channel3, cib_client_connect,",
          "564:                                                    default_ipc_connection_destroy);",
          "",
          "[Added Lines]",
          "565:     ipcs_ro = mainloop_add_ipc_server(cib_channel_ro, QB_IPC_SOCKET, &ipc_ro_callbacks);",
          "566:     ipcs_rw = mainloop_add_ipc_server(cib_channel_rw, QB_IPC_SOCKET, &ipc_rw_callbacks);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "615:     exit(exit_status);",
          "616: }",
          "676: gboolean",
          "677: startCib(const char *filename)",
          "678: {",
          "",
          "[Removed Lines]",
          "618: void",
          "619: cib_ha_connection_destroy(gpointer user_data)",
          "620: {",
          "621:     if (cib_shutdown_flag) {",
          "622:         crm_info(\"Heartbeat disconnection complete... exiting\");",
          "623:         terminate_cib(__FUNCTION__, FALSE);",
          "624:     } else {",
          "625:         crm_err(\"Heartbeat connection lost!  Exiting.\");",
          "626:         terminate_cib(__FUNCTION__, TRUE);",
          "627:     }",
          "628: }",
          "630: static void",
          "631: disconnect_cib_client(gpointer key, gpointer value, gpointer user_data)",
          "632: {",
          "633:     cib_client_t *a_client = value;",
          "635:     crm_trace(\"Processing client %s/%s... send=%d, recv=%d\",",
          "636:                 crm_str(a_client->name), crm_str(a_client->channel_name),",
          "637:                 (int)a_client->channel->send_queue->current_qlen,",
          "638:                 (int)a_client->channel->recv_queue->current_qlen);",
          "640:     if (a_client->channel->ch_status == IPC_CONNECT) {",
          "641:         a_client->channel->ops->resume_io(a_client->channel);",
          "642:         if (a_client->channel->send_queue->current_qlen != 0",
          "643:             || a_client->channel->recv_queue->current_qlen != 0) {",
          "644:             crm_info(\"Flushed messages to/from %s/%s... send=%d, recv=%d\",",
          "645:                      crm_str(a_client->name),",
          "646:                      crm_str(a_client->channel_name),",
          "647:                      (int)a_client->channel->send_queue->current_qlen,",
          "648:                      (int)a_client->channel->recv_queue->current_qlen);",
          "649:         }",
          "650:     }",
          "652:     if (a_client->channel->ch_status == IPC_CONNECT) {",
          "653:         crm_warn(\"Disconnecting %s/%s...\",",
          "654:                  crm_str(a_client->name), crm_str(a_client->channel_name));",
          "655:         a_client->channel->ops->disconnect(a_client->channel);",
          "656:     }",
          "657: }",
          "659: extern gboolean cib_process_disconnect(IPC_Channel * channel, cib_client_t * cib_client);",
          "661: void",
          "662: cib_shutdown(int nsig)",
          "663: {",
          "664:     if (cib_shutdown_flag == FALSE) {",
          "665:         cib_shutdown_flag = TRUE;",
          "666:         crm_debug(\"Disconnecting %d clients\", g_hash_table_size(client_list));",
          "667:         g_hash_table_foreach(client_list, disconnect_cib_client, NULL);",
          "668:         crm_info(\"Disconnected %d clients\", g_hash_table_size(client_list));",
          "669:         cib_process_disconnect(NULL, NULL);",
          "671:     } else {",
          "672:         crm_info(\"Waiting for %d clients to disconnect...\", g_hash_table_size(client_list));",
          "673:     }",
          "674: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cib/notify.c||cib/notify.c": [
          "File: cib/notify.c -> cib/notify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: gboolean",
          "75: cib_notify_client(gpointer key, gpointer value, gpointer user_data)",
          "76: {",
          "79:     const char *type = NULL;",
          "80:     gboolean do_send = FALSE;",
          "84:     cib_client_t *client = value;",
          "85:     xmlNode *update_msg = user_data;",
          "",
          "[Removed Lines]",
          "77:     int qlen = 0;",
          "78:     int max_qlen = 500;",
          "81:     gboolean do_remote = FALSE;",
          "82:     IPC_Channel *ipc_client = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         crm_warn(\"Skipping NULL client\");",
          "92:         return TRUE;",
          "95:         crm_warn(\"Skipping client with NULL channel\");",
          "96:         return FALSE;",
          "101:     }",
          "103:     type = crm_element_value(update_msg, F_SUBTYPE);",
          "113:     CRM_LOG_ASSERT(type != NULL);",
          "114:     if (client->diffs && safe_str_eq(type, T_CIB_DIFF_NOTIFY)) {",
          "115:         do_send = TRUE;",
          "",
          "[Removed Lines]",
          "94:     } else if (client->channel == NULL) {",
          "98:     } else if (client->name == NULL) {",
          "99:         crm_trace(\"Skipping unnammed client / comamnd channel\");",
          "100:         return FALSE;",
          "105:     ipc_client = client->channel;",
          "106:     do_remote = crm_str_eq(client->channel_name, \"remote\", FALSE);",
          "108:     if (do_remote == FALSE) {",
          "109:         qlen = ipc_client->send_queue->current_qlen;",
          "110:         max_qlen = ipc_client->send_queue->max_qlen;",
          "111:     }",
          "",
          "[Added Lines]",
          "90:     } else if (client->ipc == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:         do_send = TRUE;",
          "123:     } else if (client->pre_notify && safe_str_eq(type, T_CIB_PRE_NOTIFY)) {",
          "131:     } else if (client->post_notify && safe_str_eq(type, T_CIB_POST_NOTIFY)) {",
          "138:     }",
          "140:     if (do_send) {",
          "153:         }",
          "154:     }",
          "155:     return FALSE;",
          "",
          "[Removed Lines]",
          "124:         if (qlen < (int)(0.4 * max_qlen)) {",
          "125:             do_send = TRUE;",
          "126:         } else {",
          "127:             crm_warn(\"Throttling pre-notifications due to\"",
          "128:                      \" high load: queue=%d (max=%d)\", qlen, max_qlen);",
          "129:         }",
          "132:         if (qlen < (int)(0.7 * max_qlen)) {",
          "133:             do_send = TRUE;",
          "134:         } else {",
          "135:             crm_warn(\"Throttling post-notifications due to\"",
          "136:                      \" extreme load: queue=%d (max=%d)\", qlen, max_qlen);",
          "137:         }",
          "141:         if (do_remote) {",
          "142:             crm_debug(\"Sent %s notification to client %s/%s\", type, client->name, client->id);",
          "143:             cib_send_remote_msg(client->channel, update_msg, client->encrypted);",
          "145:         } else if (ipc_client->send_queue->current_qlen >= ipc_client->send_queue->max_qlen) {",
          "147:             crm_crit(\"%s-notification of client %s/%s failed - queue saturated\",",
          "148:                      type, client->name, client->id);",
          "150:         } else if (send_ipc_message(ipc_client, update_msg) == FALSE) {",
          "151:             crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "152:             return FALSE;",
          "",
          "[Added Lines]",
          "108:         do_send = TRUE;",
          "111:         do_send = TRUE;",
          "115:         if (client->ipc) {",
          "116:             if(crm_ipcs_send(client->ipc, update_msg, TRUE) == FALSE) {",
          "117:                 crm_warn(\"Notification of client %s/%s failed\", client->name, client->id);",
          "118:             }",
          "120: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "121:         } else if (client->session) {",
          "122:             crm_debug(\"Sent %s notification to client %s/%s\", type, client->name, client->id);",
          "123:             cib_send_remote_msg(client->session, update_msg, client->encrypted);",
          "125: #endif",
          "126:         } else {",
          "127:             crm_err(\"Unknown transport for %s\", client->name);",
          "",
          "---------------"
        ],
        "cib/remote.c||cib/remote.c": [
          "File: cib/remote.c -> cib/remote.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: extern int remote_tls_fd;",
          "65: extern gboolean cib_shutdown_flag;",
          "68: int init_remote_listener(int port, gboolean encrypted);",
          "69: void cib_remote_connection_destroy(gpointer user_data);",
          "",
          "[Removed Lines]",
          "66: extern void initiate_exit(void);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: #endif",
          "86: int authenticate_user(const char *user, const char *passwd);",
          "87: gboolean cib_remote_listen(int ssock, gpointer data);",
          "88: gboolean cib_remote_msg(int csock, gpointer data);",
          "93: #define ERROR_SUFFIX \"  Shutting down remote listener\"",
          "94: int",
          "",
          "[Removed Lines]",
          "85: extern int num_clients;",
          "90: extern void cib_common_callback_worker(xmlNode * op_request, cib_client_t * cib_client,",
          "91:                                        gboolean force_synchronous, gboolean privileged);",
          "",
          "[Added Lines]",
          "84: int num_clients;",
          "89: static void",
          "90: remote_connection_destroy(gpointer user_data)",
          "91: {",
          "92:     return;",
          "93: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:     }",
          "154:     G_main_add_fd(G_PRIORITY_HIGH, ssock, FALSE,",
          "157:     return ssock;",
          "158: }",
          "",
          "[Removed Lines]",
          "155:                   cib_remote_listen, NULL, default_ipc_connection_destroy);",
          "",
          "[Added Lines]",
          "157:                   cib_remote_listen, NULL, remote_connection_destroy);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:     }",
          "307:     num_clients++;",
          "309:     new_client->name = crm_element_value_copy(login, \"name\");",
          "311:     cl_uuid_generate(&client_id);",
          "",
          "[Removed Lines]",
          "306:     crm_malloc0(new_client, sizeof(cib_client_t));",
          "308:     new_client->channel_name = \"remote\";",
          "",
          "[Added Lines]",
          "309:     crm_malloc0(new_client, sizeof(cib_client_t));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322:     if (ssock == remote_tls_fd) {",
          "323: #ifdef HAVE_GNUTLS_GNUTLS_H",
          "324:         new_client->encrypted = TRUE;",
          "326: #endif",
          "327:     } else {",
          "329:     }",
          "331:     free_xml(login);",
          "332:     login = create_xml_node(NULL, \"cib_result\");",
          "333:     crm_xml_add(login, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "334:     crm_xml_add(login, F_CIB_CLIENTID, new_client->id);",
          "336:     free_xml(login);",
          "342:     g_hash_table_insert(client_list, new_client->id, new_client);",
          "",
          "[Removed Lines]",
          "325:         new_client->channel = (void *)session;",
          "328:         new_client->channel = GINT_TO_POINTER(csock);",
          "335:     cib_send_remote_msg(new_client->channel, login, new_client->encrypted);",
          "338:     new_client->source =",
          "339:         (void *)G_main_add_fd(G_PRIORITY_DEFAULT, csock, FALSE, cib_remote_msg, new_client,",
          "340:                               cib_remote_connection_destroy);",
          "",
          "[Added Lines]",
          "326:         new_client->session = session;",
          "329:         new_client->session = GINT_TO_POINTER(csock);",
          "336:     cib_send_remote_msg(new_client->session, login, new_client->encrypted);",
          "339:     new_client->remote =",
          "340:         G_main_add_fd(G_PRIORITY_DEFAULT, csock, FALSE, cib_remote_msg, new_client,",
          "341:                       cib_remote_connection_destroy);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:         return;",
          "366:     }",
          "371:     if (client->id != NULL) {",
          "372:         if (!g_hash_table_remove(client_list, client->id)) {",
          "",
          "[Removed Lines]",
          "368:     crm_trace(\"Cleaning up after client disconnect: %s/%s/%s\",",
          "369:               crm_str(client->name), client->channel_name, client->id);",
          "",
          "[Added Lines]",
          "369:     crm_trace(\"Cleaning up after client disconnect: %s/%s\",",
          "370:               crm_str(client->name), client->id);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "374:         }",
          "375:     }",
          "382:     }",
          "384:     crm_trace(\"Destroying %s (%p)\", client->name, user_data);",
          "",
          "[Removed Lines]",
          "377:     if (client->source != NULL) {",
          "379:         crm_trace(\"Deleting %s (%p) from mainloop\", client->name, client->source);",
          "380:         G_main_del_fd((GFDSource *) client->source);",
          "381:         client->source = NULL;",
          "",
          "[Added Lines]",
          "378:     if (client->remote != NULL) {",
          "380:         crm_trace(\"Deleting %s (%p) from mainloop\", client->name, client->remote);",
          "381:         G_main_del_fd(client->remote);",
          "382:         client->remote = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "391:     crm_free(client);",
          "392:     crm_trace(\"Freed the cib client\");",
          "397:     }",
          "399:     return;",
          "400: }",
          "",
          "[Removed Lines]",
          "394:     if (cib_shutdown_flag && g_hash_table_size(client_list) == 0) {",
          "395:         crm_info(\"All clients disconnected...\");",
          "396:         initiate_exit();",
          "",
          "[Added Lines]",
          "395:     if (cib_shutdown_flag) {",
          "396:         cib_shutdown(0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "409:     crm_trace(\"%s callback\", client->encrypted ? \"secure\" : \"clear-text\");",
          "412:     if (command == NULL) {",
          "413:         return FALSE;",
          "414:     }",
          "",
          "[Removed Lines]",
          "411:     command = cib_recv_remote_msg(client->channel, client->encrypted);",
          "",
          "[Added Lines]",
          "410:     command = cib_recv_remote_msg(client->session, client->encrypted);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "466:     }",
          "468:     crm_log_xml_trace(command, \"Remote command: \");",
          "470:   bail:",
          "471:     free_xml(command);",
          "472:     command = NULL;",
          "",
          "[Removed Lines]",
          "469:     cib_common_callback_worker(command, client, FALSE, TRUE);",
          "",
          "[Added Lines]",
          "468:     cib_common_callback_worker(command, client, TRUE);",
          "",
          "---------------"
        ],
        "include/crm/cib.h||include/crm/cib.h": [
          "File: include/crm/cib.h -> include/crm/cib.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:     int (*signon) (cib_t * cib, const char *name, enum cib_conn_type type);",
          "214:     int (*signon_raw) (cib_t * cib, const char *name, enum cib_conn_type type, int *async_fd,",
          "216:     int (*signoff) (cib_t * cib);",
          "217:     int (*free) (cib_t * cib);",
          "",
          "[Removed Lines]",
          "215:                        int *sync_fd);",
          "",
          "[Added Lines]",
          "215:                        int *unused);",
          "",
          "---------------"
        ],
        "lib/cib/cib_client.c||lib/cib/cib_client.c": [
          "File: lib/cib/cib_client.c -> lib/cib/cib_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:             g_timeout_add(async_timer->timeout, cib_async_timeout_handler, async_timer);",
          "575:     }",
          "577:     g_hash_table_insert(cib_op_callback_table, GINT_TO_POINTER(call_id), blob);",
          "579:     return TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577:     crm_trace(\"Adding callback %s for call %d\", callback_name, call_id);",
          "",
          "---------------"
        ],
        "lib/cib/cib_native.c||lib/cib/cib_native.c": [
          "File: lib/cib/cib_native.c -> lib/cib/cib_native.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <crm/crm.h>",
          "29: #include <crm/cib.h>",
          "30: #include <crm/msg_xml.h>",
          "32: #include <cib_private.h>",
          "34: typedef struct cib_native_opaque_s {",
          "38:     char *token;",
          "40: } cib_native_opaque_t;",
          "",
          "[Removed Lines]",
          "31: #include <crm/common/ipc.h>",
          "35:     IPC_Channel *command_channel;",
          "36:     IPC_Channel *callback_channel;",
          "37:     GCHSource *callback_source;",
          "",
          "[Added Lines]",
          "31: #include <crm/common/mainloop.h>",
          "36:     crm_ipc_t *ipc;",
          "37:     void (*dnotify_fn) (gpointer user_data);",
          "38:     mainloop_ipc_t *source;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: int cib_native_free(cib_t * cib);",
          "50: int cib_native_signoff(cib_t * cib);",
          "51: int cib_native_signon(cib_t * cib, const char *name, enum cib_conn_type type);",
          "61: int cib_native_set_connection_dnotify(cib_t * cib, void (*dnotify) (gpointer user_data));",
          "63: cib_t *",
          "",
          "[Removed Lines]",
          "52: int cib_native_signon_raw(cib_t * cib, const char *name, enum cib_conn_type type, int *async_fd,",
          "53:                           int *sync_fd);",
          "55: IPC_Channel *cib_native_channel(cib_t * cib);",
          "56: gboolean cib_native_msgready(cib_t * cib);",
          "57: gboolean cib_native_dispatch(IPC_Channel * channel, gpointer user_data);",
          "59: int cib_native_inputfd(cib_t * cib);",
          "60: int cib_native_rcvmsg(cib_t * cib, int blocking);",
          "",
          "[Added Lines]",
          "52: int cib_native_signon_raw(cib_t * cib, const char *name, enum cib_conn_type type, int *async_fd, int *unused);",
          "54: bool cib_native_dispatch(cib_t * cib);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     cib->variant = cib_native;",
          "72:     cib->variant_opaque = native;",
          "78:     cib->cmds->variant_op = cib_native_perform_op;",
          "",
          "[Removed Lines]",
          "74:     native->command_channel = NULL;",
          "75:     native->callback_channel = NULL;",
          "",
          "[Added Lines]",
          "69:     native->ipc = NULL;",
          "70:     native->source = NULL;",
          "71:     native->dnotify_fn = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81:     cib->cmds->signon_raw = cib_native_signon_raw;",
          "82:     cib->cmds->signoff = cib_native_signoff;",
          "83:     cib->cmds->free = cib_native_free;",
          "86:     cib->cmds->register_notification = cib_native_register_notification;",
          "87:     cib->cmds->set_connection_dnotify = cib_native_set_connection_dnotify;",
          "",
          "[Removed Lines]",
          "84:     cib->cmds->inputfd = cib_native_inputfd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:     return cib_native_signon_raw(cib, name, type, NULL, NULL);",
          "96: }",
          "98: int",
          "101: {",
          "102:     int rc = cib_ok;",
          "105:     cib_native_opaque_t *native = cib->variant_opaque;",
          "107:     crm_trace(\"Connecting command channel\");",
          "109:     if (type == cib_command) {",
          "110:         cib->state = cib_connected_command;",
          "113:     } else if (type == cib_query) {",
          "114:         cib->state = cib_connected_query;",
          "117:     } else {",
          "118:         return cib_not_connected;",
          "119:     }",
          "135:         }",
          "136:     }",
          "141:         rc = cib_connection;",
          "146:     }",
          "148:     if (rc == cib_ok) {",
          "160:         crm_xml_add(hello, F_CIB_CLIENTNAME, name);",
          "180:         }",
          "193:     }",
          "195:     if (rc == cib_ok) {",
          "199:         crm_debug(\"Connection to CIB successful\");",
          "200:         return cib_ok;",
          "201:     }",
          "",
          "[Removed Lines]",
          "99: cib_native_signon_raw(cib_t * cib, const char *name, enum cib_conn_type type, int *async_fd,",
          "100:                       int *sync_fd)",
          "103:     xmlNode *hello = NULL;",
          "104:     char *uuid_ticket = NULL;",
          "111:         native->command_channel = init_client_ipc_comms_nodispatch(cib_channel_rw);",
          "115:         native->command_channel = init_client_ipc_comms_nodispatch(cib_channel_ro);",
          "121:     if (native->command_channel == NULL) {",
          "122:         crm_debug(\"Connection to command channel failed\");",
          "123:         rc = cib_connection;",
          "125:     } else if (native->command_channel->ch_status != IPC_CONNECT) {",
          "126:         crm_err(\"Connection may have succeeded,\" \" but authentication to command channel failed\");",
          "127:         rc = cib_authentication;",
          "128:     }",
          "130:     if (rc == cib_ok) {",
          "131:         rc = get_channel_token(native->command_channel, &uuid_ticket);",
          "132:         if (rc == cib_ok) {",
          "133:             native->token = uuid_ticket;",
          "134:             uuid_ticket = NULL;",
          "138:     native->callback_channel = init_client_ipc_comms_nodispatch(cib_channel_callback);",
          "139:     if (native->callback_channel == NULL) {",
          "140:         crm_debug(\"Connection to callback channel failed\");",
          "143:     } else if (native->callback_channel->ch_status != IPC_CONNECT) {",
          "144:         crm_err(\"Connection may have succeeded,\" \" but authentication to command channel failed\");",
          "145:         rc = cib_authentication;",
          "149:         native->callback_channel->send_queue->max_qlen = 500;",
          "150:         rc = get_channel_token(native->callback_channel, &uuid_ticket);",
          "151:         if (rc == cib_ok) {",
          "152:             crm_free(native->token);",
          "153:             native->token = uuid_ticket;",
          "154:         }",
          "155:     }",
          "157:     if (rc == cib_ok) {",
          "158:         CRM_CHECK(native->token != NULL,;);",
          "159:         hello = cib_create_op(0, native->token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL);",
          "162:         if (send_ipc_message(native->command_channel, hello) == FALSE) {",
          "163:             rc = cib_callback_register;",
          "164:         }",
          "166:         free_xml(hello);",
          "167:     }",
          "169:     if (rc == cib_ok) {",
          "170:         gboolean do_mainloop = TRUE;",
          "172:         if (async_fd != NULL) {",
          "173:             do_mainloop = FALSE;",
          "175:         }",
          "177:         if (sync_fd != NULL) {",
          "178:             do_mainloop = FALSE;",
          "182:         if (do_mainloop) {",
          "183:             crm_trace(\"Connecting callback channel\");",
          "184:             native->callback_source =",
          "185:                 G_main_add_IPC_Channel(G_PRIORITY_HIGH, native->callback_channel, FALSE,",
          "186:                                        cib_native_dispatch, cib, default_ipc_connection_destroy);",
          "188:             if (native->callback_source == NULL) {",
          "189:                 crm_err(\"Callback source not recorded\");",
          "190:                 rc = cib_connection;",
          "191:             }",
          "192:         }",
          "196: #if HAVE_MSGFROMIPC_TIMEOUT",
          "197:         cib->call_timeout = MAX_IPC_DELAY;",
          "198: #endif",
          "",
          "[Added Lines]",
          "93: static int",
          "94: cib_native_dispatch_internal(const char *buffer, ssize_t length, gpointer userdata)",
          "95: {",
          "96:     const char *type = NULL;",
          "97:     xmlNode *msg = NULL;",
          "99:     cib_t * cib = userdata;",
          "100:     cib_native_opaque_t *native;",
          "102:     crm_trace(\"dispatching %p\", userdata);",
          "104:     if (cib == NULL) {",
          "105:         crm_err(\"No CIB!\");",
          "106:         return 0;",
          "107:     }",
          "109:     native = cib->variant_opaque;",
          "110:     msg = string2xml(buffer);",
          "112:     if (msg == NULL) {",
          "113:         crm_warn(\"Received a NULL msg from CIB service.\");",
          "114:         return 0;",
          "115:     }",
          "118:     type = crm_element_value(msg, F_TYPE);",
          "119:     crm_trace(\"Activating %s callbacks...\", type);",
          "120:     crm_log_xml_trace(msg, \"cib-reply\");",
          "122:     if (safe_str_eq(type, T_CIB)) {",
          "123:         cib_native_callback(cib, msg, 0, 0);",
          "125:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
          "126:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
          "128:     } else {",
          "129:         crm_err(\"Unknown message type: %s\", type);",
          "130:     }",
          "132:     free_xml(msg);",
          "133:     return 0;",
          "134: }",
          "136: bool",
          "137: cib_native_dispatch(cib_t * cib)",
          "138: {",
          "139:     gboolean stay_connected = TRUE;",
          "140:     cib_native_opaque_t *native;",
          "142:     if (cib == NULL) {",
          "143:         crm_err(\"No CIB!\");",
          "144:         return FALSE;",
          "145:     }",
          "147:     crm_trace(\"dispatching %p\", cib);",
          "148:     native = cib->variant_opaque;",
          "149:     while(crm_ipc_ready(native->ipc)) {",
          "151:         if(crm_ipc_read(native->ipc) > 0) {",
          "152:             const char *msg = crm_ipc_buffer(native->ipc);",
          "153:             cib_native_dispatch_internal(msg, strlen(msg), cib);",
          "154:         }",
          "156:         if(crm_ipc_connected(native->ipc) == FALSE) {",
          "157:             crm_err(\"Connection closed\");",
          "158:             stay_connected = FALSE;",
          "159:         }",
          "160:     }",
          "162:     return stay_connected;",
          "163: }",
          "165: static void",
          "166: cib_native_destroy(void *userdata)",
          "167: {",
          "168:     cib_t *cib = userdata;",
          "169:     cib_native_opaque_t *native = cib->variant_opaque;",
          "171:     crm_trace(\"destroying %p\", userdata);",
          "172:     cib->state = cib_disconnected;",
          "174:     if(native->dnotify_fn) {",
          "175:         native->dnotify_fn(userdata);",
          "176:     }",
          "177: }",
          "180: cib_native_signon_raw(cib_t * cib, const char *name, enum cib_conn_type type, int *async_fd, int *unused)",
          "183:     const char *channel = NULL;",
          "186:     static struct ipc_client_callbacks ipc_callbacks =",
          "187:         {",
          "188:             .dispatch = cib_native_dispatch_internal,",
          "189:             .destroy = cib_native_destroy",
          "190:         };",
          "193:     cib->call_timeout = MAX_IPC_DELAY;",
          "197:         channel = cib_channel_rw;",
          "201:         channel = cib_channel_ro;",
          "207:     if (async_fd != NULL) {",
          "208:         native->ipc = crm_ipc_new(channel, 0);",
          "210:         if(native->ipc && crm_ipc_connect(native->ipc)) {",
          "213:         } else if(native->ipc) {",
          "214:             rc = cib_connection;",
          "217:     } else  {",
          "218:         native->source = mainloop_add_ipc_client(channel, 0, cib, &ipc_callbacks);",
          "219:         native->ipc = mainloop_get_ipc_client(native->source);",
          "222:     if (rc != cib_ok || native->ipc == NULL || crm_ipc_connected(native->ipc) == FALSE) {",
          "223:         crm_debug(\"Connection unsuccessful (%d %p)\", rc, native->ipc);",
          "228:         xmlNode *reply = NULL;",
          "229:         xmlNode *hello = create_xml_node(NULL, \"stonith_command\");",
          "231:         crm_xml_add(hello, F_TYPE, T_CIB);",
          "232:         crm_xml_add(hello, F_CIB_OPERATION, CRM_OP_REGISTER);",
          "234:         crm_xml_add_int(hello, F_CIB_CALLOPTS, cib_sync_call);",
          "236:         if (crm_ipc_send(native->ipc, hello, &reply, -1) > 0) {",
          "237:             const char *msg_type = crm_element_value(reply, F_CIB_OPERATION);",
          "239:             rc = cib_ok;",
          "240:             crm_log_xml_trace(reply, \"reg-reply\");",
          "242:             if (safe_str_neq(msg_type, CRM_OP_REGISTER)) {",
          "243:                 crm_err(\"Invalid registration message: %s\", msg_type);",
          "244:                 rc = cib_registration_msg;",
          "246:             } else {",
          "247:                 native->token = crm_element_value_copy(reply, F_CIB_CLIENTID);",
          "248:                 if (native->token == NULL) {",
          "249:                     rc = cib_callback_token;",
          "250:                 }",
          "251:             }",
          "253:         } else {",
          "254:             rc = cib_callback_register;",
          "257:         free_xml(hello);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "213:     crm_debug(\"Signing out of the CIB Service\");",
          "231:     }",
          "233:     cib->state = cib_disconnected;",
          "",
          "[Removed Lines]",
          "216:     if (native->command_channel != NULL) {",
          "217:         native->command_channel->ops->destroy(native->command_channel);",
          "218:         native->command_channel = NULL;",
          "219:     }",
          "221:     if (native->callback_source != NULL) {",
          "222:         G_main_del_IPC_Channel(native->callback_source);",
          "223:         native->callback_source = NULL;",
          "224:     }",
          "226:     if (native->callback_channel != NULL) {",
          "227: #ifdef BUG",
          "228:         native->callback_channel->ops->destroy(native->callback_channel);",
          "229: #endif",
          "230:         native->callback_channel = NULL;",
          "",
          "[Added Lines]",
          "277:     if(native->source) {",
          "278:         mainloop_del_ipc_client(native->source);",
          "279:         native->source = NULL;",
          "280:         native->ipc = NULL;",
          "282:     } else if (native->ipc != NULL) {",
          "283:         crm_ipc_close(native->ipc);",
          "284:         crm_ipc_destroy(native->ipc);",
          "285:         native->ipc = NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:     return rc;",
          "258: }",
          "307: int",
          "308: cib_native_perform_op(cib_t * cib, const char *op, const char *host, const char *section,",
          "309:                       xmlNode * data, xmlNode ** output_data, int call_options)",
          "",
          "[Removed Lines]",
          "260: IPC_Channel *",
          "261: cib_native_channel(cib_t * cib)",
          "262: {",
          "263:     cib_native_opaque_t *native = NULL;",
          "265:     if (cib == NULL) {",
          "266:         crm_err(\"Missing cib object\");",
          "267:         return NULL;",
          "268:     }",
          "270:     native = cib->variant_opaque;",
          "272:     if (native != NULL) {",
          "273:         return native->callback_channel;",
          "274:     }",
          "276:     crm_err(\"couldnt find variant specific data in %p\", cib);",
          "277:     return NULL;",
          "278: }",
          "280: int",
          "281: cib_native_inputfd(cib_t * cib)",
          "282: {",
          "283:     IPC_Channel *ch = cib_native_channel(cib);",
          "285:     return ch->ops->get_recv_select_fd(ch);",
          "286: }",
          "288: static gboolean timer_expired = FALSE;",
          "290: #ifndef HAVE_MSGFROMIPC_TIMEOUT",
          "291: static struct timer_rec_s sync_timer;",
          "292: static gboolean",
          "293: cib_timeout_handler(gpointer data)",
          "294: {",
          "295:     struct timer_rec_s *timer = data;",
          "297:     timer_expired = TRUE;",
          "298:     crm_err(\"Call %d timed out after %ds\", timer->call_id, timer->timeout);",
          "303:     return TRUE;",
          "304: }",
          "305: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "317:                                xmlNode * data, xmlNode ** output_data, int call_options,",
          "318:                                const char *user_name)",
          "319: {",
          "322:     xmlNode *op_msg = NULL;",
          "323:     xmlNode *op_reply = NULL;",
          "",
          "[Removed Lines]",
          "320:     int rc = HA_OK;",
          "",
          "[Added Lines]",
          "328:     int rc = cib_ok;",
          "329:     int reply_id = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "354:         return cib_create_msg;",
          "355:     }",
          "367:     free_xml(op_msg);",
          "375:         CRM_CHECK(cib->call_id != 0, return cib_reply_failed);",
          "377:         return cib->call_id;",
          "378:     }",
          "392:     rc = cib_ok;",
          "401:         }",
          "435:         }",
          "443:     }",
          "445:     if (op_reply == NULL && cib->state == cib_disconnected) {",
          "446:         rc = cib_not_connected;",
          "",
          "[Removed Lines]",
          "357:     crm_trace(\"Sending %s message to CIB service\", op);",
          "358:     if (send_ipc_message(native->command_channel, op_msg) == FALSE) {",
          "359:         crm_err(\"Sending message to CIB service FAILED\");",
          "360:         free_xml(op_msg);",
          "361:         return cib_send_failed;",
          "363:     } else {",
          "364:         crm_trace(\"Message sent\");",
          "365:     }",
          "369:     if ((call_options & cib_discard_reply)) {",
          "370:         crm_trace(\"Discarding reply\");",
          "371:         return cib_ok;",
          "373:     } else if (!(call_options & cib_sync_call)) {",
          "374:         crm_trace(\"Async call, returning\");",
          "380:     rc = IPC_OK;",
          "381:     crm_trace(\"Waiting for a syncronous reply\");",
          "383: #ifndef HAVE_MSGFROMIPC_TIMEOUT",
          "384:     sync_timer.ref = 0;",
          "385:     if (cib->call_timeout > 0) {",
          "386:         timer_expired = FALSE;",
          "387:         sync_timer.call_id = cib->call_id;",
          "388:         sync_timer.timeout = cib->call_timeout * 1000;",
          "389:         sync_timer.ref = g_timeout_add(sync_timer.timeout, cib_timeout_handler, &sync_timer);",
          "390:     }",
          "391: #endif",
          "393:     while (timer_expired == FALSE && IPC_ISRCONN(native->command_channel)) {",
          "394:         int reply_id = -1;",
          "395:         int msg_id = cib->call_id;",
          "397:         op_reply = xmlfromIPC(native->command_channel, cib->call_timeout);",
          "398:         if (op_reply == NULL) {",
          "399:             rc = cib_remote_timeout;",
          "400:             break;",
          "403:         crm_element_value_int(op_reply, F_CIB_CALLID, &reply_id);",
          "404:         if (reply_id <= 0) {",
          "405:             rc = cib_reply_failed;",
          "406:             break;",
          "408:         } else if (reply_id == msg_id) {",
          "409:             crm_trace(\"Syncronous reply received\");",
          "410:             if (crm_element_value_int(op_reply, F_CIB_RC, &rc) != 0) {",
          "411:                 rc = cib_return_code;",
          "412:             }",
          "414:             if (output_data != NULL && is_not_set(call_options, cib_discard_reply)) {",
          "415:                 xmlNode *tmp = get_message_xml(op_reply, F_CIB_CALLDATA);",
          "417:                 if (tmp != NULL) {",
          "419:                 }",
          "420:             }",
          "422:             break;",
          "424:         } else if (reply_id < msg_id) {",
          "425:             crm_debug(\"Received old reply: %d (wanted %d)\", reply_id, msg_id);",
          "426:             crm_log_xml_trace(op_reply, \"Old reply\");",
          "428:         } else if ((reply_id - 10000) > msg_id) {",
          "430:             crm_debug(\"Received old reply: %d (wanted %d)\", reply_id, msg_id);",
          "431:             crm_log_xml_trace(op_reply, \"Old reply\");",
          "433:         } else {",
          "434:             crm_err(\"Received a __future__ reply:\" \" %d (wanted %d)\", reply_id, msg_id);",
          "436:         free_xml(op_reply);",
          "437:         op_reply = NULL;",
          "438:     }",
          "440:     if (IPC_ISRCONN(native->command_channel) == FALSE) {",
          "441:         crm_err(\"CIB disconnected: %d\", native->command_channel->ch_status);",
          "442:         cib->state = cib_disconnected;",
          "",
          "[Added Lines]",
          "366:     crm_trace(\"Sending %s message to CIB service (timeout=%ds)\", op, cib->call_timeout);",
          "367:     rc = crm_ipc_send(native->ipc, op_msg, &op_reply, cib->call_timeout * 1000);",
          "370:     if(rc < 0) {",
          "371:         crm_perror(LOG_ERR, \"Couldn't perform %s operation (timeout=%ds): %d\", op, cib->call_timeout, rc);",
          "372:         rc = cib_send_failed;",
          "373:         goto done;",
          "374:     }",
          "376:     crm_log_xml_trace(op_reply, \"Reply\");",
          "378:     if (!(call_options & cib_sync_call)) {",
          "379:         crm_trace(\"Async call, returning %d\", cib->call_id);",
          "381:         free_xml(op_reply);",
          "386:     crm_element_value_int(op_reply, F_CIB_CALLID, &reply_id);",
          "387:     if (reply_id == cib->call_id) {",
          "388:         xmlNode *tmp = get_message_xml(op_reply, F_CIB_CALLDATA);",
          "390:         crm_trace(\"Syncronous reply %d received\", reply_id);",
          "391:         if (crm_element_value_int(op_reply, F_CIB_RC, &rc) != 0) {",
          "392:             rc = cib_return_code;",
          "395:         if (output_data == NULL || (call_options & cib_discard_reply)) {",
          "396:             crm_trace(\"Discarding reply\");",
          "398:         } else if (tmp != NULL) {",
          "402:     } else if (reply_id <= 0) {",
          "403:         crm_err(\"Recieved bad reply: No id set\");",
          "404:         crm_log_xml_err(op_reply, \"Bad reply\");",
          "405:         rc = cib_reply_failed;",
          "406:         goto done;",
          "408:     } else {",
          "409:         crm_err(\"Recieved bad reply: %d (wanted %d)\", reply_id, cib->call_id);",
          "410:         crm_log_xml_err(op_reply, \"Old reply\");",
          "411:         rc = cib_reply_failed;",
          "412:         goto done;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "475:             }",
          "476:     }",
          "482:     }",
          "485:     free_xml(op_reply);",
          "486:     return rc;",
          "487: }",
          "640: int",
          "641: cib_native_set_connection_dnotify(cib_t * cib, void (*dnotify) (gpointer user_data))",
          "642: {",
          "",
          "[Removed Lines]",
          "478: #ifndef HAVE_MSGFROMIPC_TIMEOUT",
          "479:     if (sync_timer.ref > 0) {",
          "480:         g_source_remove(sync_timer.ref);",
          "481:         sync_timer.ref = 0;",
          "483: #endif",
          "489: gboolean",
          "490: cib_native_msgready(cib_t * cib)",
          "491: {",
          "492:     cib_native_opaque_t *native = NULL;",
          "494:     if (cib == NULL) {",
          "495:         crm_err(\"No CIB!\");",
          "496:         return FALSE;",
          "497:     }",
          "499:     native = cib->variant_opaque;",
          "501:     if (native->command_channel != NULL) {",
          "503:         IPC_Channel *cmd_ch = native->command_channel;",
          "504:         xmlNode *cmd_msg = NULL;",
          "506:         while (cmd_ch->ch_status != IPC_DISCONNECT && cmd_ch->ops->is_message_pending(cmd_ch)) {",
          "508:             cmd_msg = xmlfromIPC(cmd_ch, MAX_IPC_DELAY);",
          "509:             free_xml(cmd_msg);",
          "510:         }",
          "512:     } else {",
          "513:         crm_err(\"No command channel\");",
          "514:     }",
          "516:     if (native->callback_channel == NULL) {",
          "517:         crm_err(\"No callback channel\");",
          "518:         return FALSE;",
          "520:     } else if (native->callback_channel->ch_status == IPC_DISCONNECT) {",
          "521:         crm_info(\"Lost connection to the CIB service [%d].\", native->callback_channel->farside_pid);",
          "522:         return FALSE;",
          "524:     } else if (native->callback_channel->ops->is_message_pending(native->callback_channel)) {",
          "525:         crm_trace(\"Message pending on command channel [%d]\", native->callback_channel->farside_pid);",
          "526:         return TRUE;",
          "527:     }",
          "529:     crm_trace(\"No message pending\");",
          "530:     return FALSE;",
          "531: }",
          "533: int",
          "534: cib_native_rcvmsg(cib_t * cib, int blocking)",
          "535: {",
          "536:     const char *type = NULL;",
          "537:     xmlNode *msg = NULL;",
          "538:     cib_native_opaque_t *native = NULL;",
          "540:     if (cib == NULL) {",
          "541:         crm_err(\"No CIB!\");",
          "542:         return FALSE;",
          "543:     }",
          "545:     native = cib->variant_opaque;",
          "548:     if (blocking == 0 && cib_native_msgready(cib) == FALSE) {",
          "549:         crm_trace(\"No message ready and non-blocking...\");",
          "550:         return 0;",
          "552:     } else if (cib_native_msgready(cib) == FALSE) {",
          "553:         crm_debug(\"Waiting for message from CIB service...\");",
          "554:         if (native->callback_channel == NULL) {",
          "555:             return -1;",
          "557:         } else if (native->callback_channel->ch_status != IPC_CONNECT) {",
          "558:             return -2;",
          "560:         } else if (native->command_channel && native->command_channel->ch_status != IPC_CONNECT) {",
          "561:             return -3;",
          "562:         }",
          "563:         native->callback_channel->ops->waitin(native->callback_channel);",
          "564:     }",
          "567:     msg = xmlfromIPC(native->callback_channel, MAX_IPC_DELAY);",
          "568:     if (msg == NULL) {",
          "569:         crm_warn(\"Received a NULL msg from CIB service.\");",
          "570:         return 0;",
          "571:     }",
          "574:     type = crm_element_value(msg, F_TYPE);",
          "575:     crm_trace(\"Activating %s callbacks...\", type);",
          "577:     if (safe_str_eq(type, T_CIB)) {",
          "578:         cib_native_callback(cib, msg, 0, 0);",
          "580:     } else if (safe_str_eq(type, T_CIB_NOTIFY)) {",
          "581:         g_list_foreach(cib->notify_list, cib_native_notify, msg);",
          "583:     } else {",
          "584:         crm_err(\"Unknown message type: %s\", type);",
          "585:     }",
          "587:     free_xml(msg);",
          "589:     return 1;",
          "590: }",
          "592: gboolean",
          "593: cib_native_dispatch(IPC_Channel * channel, gpointer user_data)",
          "594: {",
          "595:     cib_t *cib = user_data;",
          "596:     cib_native_opaque_t *native = NULL;",
          "597:     gboolean stay_connected = TRUE;",
          "599:     CRM_CHECK(cib != NULL, return FALSE);",
          "601:     native = cib->variant_opaque;",
          "602:     CRM_CHECK(native->callback_channel == channel, return FALSE);",
          "604:     while (cib_native_msgready(cib)) {",
          "606:         int rc = cib_native_rcvmsg(cib, 0);",
          "608:         if (rc < 0) {",
          "609:             crm_err(\"Message acquisition failed: %d\", rc);",
          "610:             break;",
          "612:         } else if (rc == 0) {",
          "613:             break;",
          "614:         }",
          "615:     }",
          "617:     if (native->callback_channel && native->callback_channel->ch_status != IPC_CONNECT) {",
          "618:         crm_crit(\"Lost connection to the CIB service [%d/callback].\", channel->farside_pid);",
          "619:         native->callback_source = NULL;",
          "620:         stay_connected = FALSE;",
          "621:     }",
          "623:     if (native->command_channel && native->command_channel->ch_status != IPC_CONNECT) {",
          "624:         crm_crit(\"Lost connection to the CIB service [%d/command].\", channel->farside_pid);",
          "625:         native->callback_source = NULL;",
          "626:         stay_connected = FALSE;",
          "627:     }",
          "629:     return stay_connected;",
          "630: }",
          "632: static void",
          "633: default_cib_connection_destroy(gpointer user_data)",
          "634: {",
          "635:     cib_t *cib = user_data;",
          "637:     cib->state = cib_disconnected;",
          "638: }",
          "",
          "[Added Lines]",
          "448:   done:",
          "449:     if (crm_ipc_connected(native->ipc) == FALSE) {",
          "450:         crm_err(\"CIB disconnected\");",
          "451:         cib->state = cib_disconnected;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "648:     }",
          "650:     native = cib->variant_opaque;",
          "660:     return cib_ok;",
          "661: }",
          "663: int",
          "664: cib_native_register_notification(cib_t * cib, const char *callback, int enabled)",
          "665: {",
          "666:     xmlNode *notify_msg = create_xml_node(NULL, \"cib-callback\");",
          "667:     cib_native_opaque_t *native = cib->variant_opaque;",
          "",
          "[Removed Lines]",
          "652:     if (dnotify == NULL) {",
          "653:         crm_warn(\"Setting dnotify back to default value\");",
          "654:         set_IPC_Channel_dnotify(native->callback_source, default_cib_connection_destroy);",
          "656:     } else {",
          "657:         crm_trace(\"Setting dnotify\");",
          "658:         set_IPC_Channel_dnotify(native->callback_source, dnotify);",
          "659:     }",
          "",
          "[Added Lines]",
          "469:     native->dnotify_fn = dnotify;",
          "477:     int rc = cib_ok;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "670:         crm_xml_add(notify_msg, F_CIB_OPERATION, T_CIB_NOTIFY);",
          "671:         crm_xml_add(notify_msg, F_CIB_NOTIFY_TYPE, callback);",
          "672:         crm_xml_add_int(notify_msg, F_CIB_NOTIFY_ACTIVATE, enabled);",
          "674:     }",
          "676:     free_xml(notify_msg);",
          "678: }",
          "",
          "[Removed Lines]",
          "673:         send_ipc_message(native->callback_channel, notify_msg);",
          "677:     return cib_ok;",
          "",
          "[Added Lines]",
          "485:         rc = crm_ipc_send(native->ipc, notify_msg, NULL, 1000 * cib->call_timeout);",
          "486:         if(rc <= 0) {",
          "487:             crm_trace(\"Notification not registered: %d\", rc);",
          "488:             rc = cib_send_failed;",
          "489:         }",
          "493:     return rc;",
          "",
          "---------------"
        ],
        "lib/cib/cib_utils.c||lib/cib/cib_utils.c": [
          "File: lib/cib/cib_utils.c -> lib/cib/cib_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:     return rc;",
          "752: }",
          "797: xmlNode *",
          "798: cib_create_op(int call_id, const char *token, const char *op, const char *host, const char *section,",
          "799:               xmlNode * data, int call_options, const char *user_name)",
          "",
          "[Removed Lines]",
          "754: int",
          "755: get_channel_token(IPC_Channel * ch, char **token)",
          "756: {",
          "757:     int rc = cib_ok;",
          "758:     xmlNode *reg_msg = NULL;",
          "759:     const char *msg_type = NULL;",
          "760:     const char *tmp_ticket = NULL;",
          "762:     CRM_CHECK(ch != NULL, return cib_missing);",
          "763:     CRM_CHECK(token != NULL, return cib_output_ptr);",
          "765:     crm_trace(\"Waiting for msg on command channel\");",
          "767:     reg_msg = xmlfromIPC(ch, MAX_IPC_DELAY);",
          "769:     if (ch->ops->get_chan_status(ch) != IPC_CONNECT) {",
          "770:         crm_err(\"No reply message - disconnected\");",
          "771:         free_xml(reg_msg);",
          "772:         return cib_not_connected;",
          "774:     } else if (reg_msg == NULL) {",
          "775:         crm_err(\"No reply message - empty\");",
          "776:         return cib_reply_failed;",
          "777:     }",
          "779:     msg_type = crm_element_value(reg_msg, F_CIB_OPERATION);",
          "780:     tmp_ticket = crm_element_value(reg_msg, F_CIB_CLIENTID);",
          "782:     if (safe_str_neq(msg_type, CRM_OP_REGISTER)) {",
          "783:         crm_err(\"Invalid registration message: %s\", msg_type);",
          "784:         rc = cib_registration_msg;",
          "786:     } else if (tmp_ticket == NULL) {",
          "787:         rc = cib_callback_token;",
          "789:     } else {",
          "791:     }",
          "793:     free_xml(reg_msg);",
          "794:     return rc;",
          "795: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}