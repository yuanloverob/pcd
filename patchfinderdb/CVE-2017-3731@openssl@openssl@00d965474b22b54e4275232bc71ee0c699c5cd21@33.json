{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5c75e43d84ca6a56adba5bab37b868576ff8b209",
      "candidate_info": {
        "commit_hash": "5c75e43d84ca6a56adba5bab37b868576ff8b209",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5c75e43d84ca6a56adba5bab37b868576ff8b209",
        "files": [
          "doc/crypto/ERR_GET_LIB.pod",
          "include/openssl/err.h"
        ],
        "message": "Restore the ERR_FATAL_ERROR() macro\n\nCommit 0cd0a820abc6124cf8e176fa92d620a2abf9e419 removed this macro\nalong with many unused function and reason codes; ERR_FATAL_ERROR()\nwas not used in the tree, but did have external consumers.\n\nAdd it back to restore the API compatibility and avoid breaking\napplications for no internal benefit.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2049)\n(cherry picked from commit 036ba500f7886ca2e7231549fa574ec2cdd45cef)",
        "before_after_code_files": [
          "include/openssl/err.h||include/openssl/err.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/err.h||include/openssl/err.h": [
          "File: include/openssl/err.h -> include/openssl/err.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: # define ERR_GET_LIB(l)          (int)(((l) >> 24L) & 0x0FFL)",
          "141: # define ERR_GET_FUNC(l)         (int)(((l) >> 12L) & 0xFFFL)",
          "142: # define ERR_GET_REASON(l)       (int)( (l)         & 0xFFFL)",
          "145: # define SYS_F_FOPEN             1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: # define ERR_FATAL_ERROR(l)      (int)( (l)         & ERR_R_FATAL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8641c9c693179fe7461608c51aaa8700dca6da2",
      "candidate_info": {
        "commit_hash": "f8641c9c693179fe7461608c51aaa8700dca6da2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f8641c9c693179fe7461608c51aaa8700dca6da2",
        "files": [
          "test/handshake_helper.c"
        ],
        "message": "test/ssl_test: give up if both client and server wait on read\n\nIn some cases, both client and server end of the test can end up in\nSSL_ERROR_WANT_READ and never get out of it, making the test spin.\nDetect it and give up instead of waiting endlessly.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2096)\n(cherry picked from commit ceb6d746941063eccf7655c7709ba56ca117044b)",
        "before_after_code_files": [
          "test/handshake_helper.c||test/handshake_helper.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/handshake_helper.c||test/handshake_helper.c": [
          "File: test/handshake_helper.c -> test/handshake_helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "867:     HANDSHAKE_EX_DATA server_ex_data, client_ex_data;",
          "868:     CTX_DATA client_ctx_data, server_ctx_data, server2_ctx_data;",
          "869:     HANDSHAKE_RESULT *ret = HANDSHAKE_RESULT_new();",
          "871:     connect_phase_t phase = HANDSHAKE;",
          "872:     handshake_status_t status = HANDSHAKE_RETRY;",
          "873:     const unsigned char* tick = NULL;",
          "",
          "[Removed Lines]",
          "870:     int client_turn = 1;",
          "",
          "[Added Lines]",
          "870:     int client_turn = 1, client_turn_count = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "957:         switch (status) {",
          "958:         case HANDSHAKE_SUCCESS:",
          "959:             phase = next_phase(test_ctx, phase);",
          "960:             if (phase == CONNECTION_DONE) {",
          "961:                 ret->result = SSL_TEST_SUCCESS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959:             client_turn_count = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "981:             ret->result = SSL_TEST_INTERNAL_ERROR;",
          "982:             goto err;",
          "983:         case HANDSHAKE_RETRY:",
          "985:             client_turn ^= 1;",
          "986:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "985:             if (client_turn_count++ >= 2000) {",
          "991:                 ret->result = SSL_TEST_INTERNAL_ERROR;",
          "992:                 goto err;",
          "993:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d67fe76786587bc6995337d2a9cb525fb60bf998",
      "candidate_info": {
        "commit_hash": "d67fe76786587bc6995337d2a9cb525fb60bf998",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d67fe76786587bc6995337d2a9cb525fb60bf998",
        "files": [
          "apps/s_client.c",
          "apps/s_server.c",
          "doc/apps/s_client.pod",
          "doc/apps/s_server.pod"
        ],
        "message": "Update s_client and s_server documentation about some missing arguments\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1837)\n(cherry picked from commit a22f9c84b468eed83c651cb5f2c68c7ad4103ffd)",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:     {\"proxy\", OPT_PROXY, 's',",
          "568:      \"Connect to via specified proxy to the real server\"},",
          "569: #ifdef AF_UNIX",
          "571: #endif",
          "572:     {\"4\", OPT_4, '-', \"Use IPv4 only\"},",
          "573: #ifdef AF_INET6",
          "",
          "[Removed Lines]",
          "570:     {\"unix\", OPT_UNIX, 's', \"Connect over unix domain sockets\"},",
          "",
          "[Added Lines]",
          "570:     {\"unix\", OPT_UNIX, 's', \"Connect over the specified Unix-domain socket\"},",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:     {\"port\", OPT_PORT, 'p',",
          "685:      \"TCP/IP port to listen on for connections (default is \" PORT \")\"},",
          "686:     {\"accept\", OPT_ACCEPT, 's',",
          "688: #ifdef AF_UNIX",
          "689:     {\"unix\", OPT_UNIX, 's', \"Unix domain socket to accept on\"},",
          "690: #endif",
          "",
          "[Removed Lines]",
          "687:      \"TCP/IP optional host and port to accept on (default is \" PORT \")\"},",
          "",
          "[Added Lines]",
          "687:      \"TCP/IP optional host and port to listen on for connections (default is *:\" PORT \")\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56518d82372048825f068de32dfca77c32be1bc0",
      "candidate_info": {
        "commit_hash": "56518d82372048825f068de32dfca77c32be1bc0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/56518d82372048825f068de32dfca77c32be1bc0",
        "files": [
          "crypto/ct/ct_oct.c",
          "crypto/ct/ct_sct.c"
        ],
        "message": "Move SCT_LIST_free definition into a more logical place\n\nThis reflects its position in include/openssl/ct.h.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1548)\n(cherry picked from commit e1940e9f7a73bf3a560fbe3550a9b69a612118ec)",
        "before_after_code_files": [
          "crypto/ct/ct_oct.c||crypto/ct/ct_oct.c",
          "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_oct.c||crypto/ct/ct_oct.c": [
          "File: crypto/ct/ct_oct.c -> crypto/ct/ct_oct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     return -1;",
          "255: }",
          "262: STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,",
          "263:                             size_t len)",
          "264: {",
          "",
          "[Removed Lines]",
          "257: void SCT_LIST_free(STACK_OF(SCT) *a)",
          "258: {",
          "259:     sk_SCT_pop_free(a, SCT_free);",
          "260: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c": [
          "File: crypto/ct/ct_sct.c -> crypto/ct/ct_sct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     OPENSSL_free(sct);",
          "46: }",
          "48: int SCT_set_version(SCT *sct, sct_version_t version)",
          "49: {",
          "50:     if (version != SCT_VERSION_V1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: void SCT_LIST_free(STACK_OF(SCT) *a)",
          "49: {",
          "50:     sk_SCT_pop_free(a, SCT_free);",
          "51: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6720f816f4c9373890939d6ec63a7dc29835fdd",
      "candidate_info": {
        "commit_hash": "c6720f816f4c9373890939d6ec63a7dc29835fdd",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c6720f816f4c9373890939d6ec63a7dc29835fdd",
        "files": [
          "test/evp_test.c",
          "test/evptests.txt"
        ],
        "message": "Additional error tests in evp_test.c\n\nSupport checking for errors during test initialisation and parsing.\n\nAdd errors and tests for key operation initalisation and ctrl errors.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit cce65266299e2e89303a90c131e8171225a1bf88)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:             t->nskip++;",
          "355:         } else {",
          "359:                 fprintf(stderr, \"%s test error line %d\\n\",",
          "360:                         t->meth->name, t->start_line);",
          "361:                 return 0;",
          "",
          "[Removed Lines]",
          "357:             t->err = NULL;",
          "358:             if (t->meth->run_test(t) != 1) {",
          "",
          "[Added Lines]",
          "357:             if (t->err == NULL && t->meth->run_test(t) != 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:         return 1;",
          "568:     }",
          "569:     t.in = in;",
          "570:     while (BIO_gets(in, buf, sizeof(buf))) {",
          "571:         t.line++;",
          "572:         if (!process_test(&t, buf, 0))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:     t.err = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1234:     if (!kdata->ctx)",
          "1235:         return 0;",
          "1236:     if (keyopinit(kdata->ctx) <= 0)",
          "1238:     return 1;",
          "1239: }",
          "",
          "[Removed Lines]",
          "1237:         return 0;",
          "",
          "[Added Lines]",
          "1237:         t->err = \"KEYOP_INIT_ERROR\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1260:     if (p != NULL)",
          "1262:     rv = EVP_PKEY_CTX_ctrl_str(pctx, tmpval, p);",
          "1266:             t->skip = 1;",
          "1267:             rv = 1;",
          "1268:         }",
          "1269:     }",
          "1270:     OPENSSL_free(tmpval);",
          "",
          "[Removed Lines]",
          "1263:     if (p != NULL && rv <= 0 && rv != -2) {",
          "1265:         if (OBJ_sn2nid(p) != NID_undef || OBJ_ln2nid(p) != NID_undef) {",
          "",
          "[Added Lines]",
          "1263:     if (rv == -2) {",
          "1264:         t->err = \"PKEY_CTRL_INVALID\";",
          "1265:         rv = 1;",
          "1266:     } else if (p != NULL && rv <= 0) {",
          "1268:         int nid = OBJ_sn2nid(p);",
          "1269:         if (nid == NID_undef)",
          "1270:              nid = OBJ_ln2nid(p);",
          "1271:         if ((nid != NID_undef) && EVP_get_digestbynid(nid) == NULL &&",
          "1272:             EVP_get_cipherbynid(nid) == NULL) {",
          "1275:         } else {",
          "1276:             t->err = \"PKEY_CTRL_ERROR\";",
          "1277:             rv = 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}