{
  "cve_id": "CVE-2019-11810",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.7. A NULL pointer dereference can occur when megasas_create_frame_pool() fails in megasas_alloc_cmds() in drivers/scsi/megaraid/megaraid_sas_base.c. This causes a Denial of Service, related to a use-after-free.",
  "repo": "torvalds/linux",
  "patch_hash": "bcf3b67d16a4c8ffae0aa79de5853435e683945c",
  "patch_info": {
    "commit_hash": "bcf3b67d16a4c8ffae0aa79de5853435e683945c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bcf3b67d16a4c8ffae0aa79de5853435e683945c",
    "files": [
      "drivers/scsi/megaraid/megaraid_sas_base.c"
    ],
    "message": "scsi: megaraid_sas: return error when create DMA pool failed\n\nwhen create DMA pool for cmd frames failed, we should return -ENOMEM,\ninstead of 0.\nIn some case in:\n\n    megasas_init_adapter_fusion()\n\n    -->megasas_alloc_cmds()\n       -->megasas_create_frame_pool\n          create DMA pool failed,\n        --> megasas_free_cmds() [1]\n\n    -->megasas_alloc_cmds_fusion()\n       failed, then goto fail_alloc_cmds.\n    -->megasas_free_cmds() [2]\n\nwe will call megasas_free_cmds twice, [1] will kfree cmd_list,\n[2] will use cmd_list.it will cause a problem:\n\nUnable to handle kernel NULL pointer dereference at virtual address\n00000000\npgd = ffffffc000f70000\n[00000000] *pgd=0000001fbf893003, *pud=0000001fbf893003,\n*pmd=0000001fbf894003, *pte=006000006d000707\nInternal error: Oops: 96000005 [#1] SMP\n Modules linked in:\n CPU: 18 PID: 1 Comm: swapper/0 Not tainted\n task: ffffffdfb9290000 ti: ffffffdfb923c000 task.ti: ffffffdfb923c000\n PC is at megasas_free_cmds+0x30/0x70\n LR is at megasas_free_cmds+0x24/0x70\n ...\n Call trace:\n [<ffffffc0005b779c>] megasas_free_cmds+0x30/0x70\n [<ffffffc0005bca74>] megasas_init_adapter_fusion+0x2f4/0x4d8\n [<ffffffc0005b926c>] megasas_init_fw+0x2dc/0x760\n [<ffffffc0005b9ab0>] megasas_probe_one+0x3c0/0xcd8\n [<ffffffc0004a5abc>] local_pci_probe+0x4c/0xb4\n [<ffffffc0004a5c40>] pci_device_probe+0x11c/0x14c\n [<ffffffc00053a5e4>] driver_probe_device+0x1ec/0x430\n [<ffffffc00053a92c>] __driver_attach+0xa8/0xb0\n [<ffffffc000538178>] bus_for_each_dev+0x74/0xc8\n  [<ffffffc000539e88>] driver_attach+0x28/0x34\n [<ffffffc000539a18>] bus_add_driver+0x16c/0x248\n [<ffffffc00053b234>] driver_register+0x6c/0x138\n [<ffffffc0004a5350>] __pci_register_driver+0x5c/0x6c\n [<ffffffc000ce3868>] megasas_init+0xc0/0x1a8\n [<ffffffc000082a58>] do_one_initcall+0xe8/0x1ec\n [<ffffffc000ca7be8>] kernel_init_freeable+0x1c8/0x284\n [<ffffffc0008d90b8>] kernel_init+0x1c/0xe4\n\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nAcked-by: Sumit Saxena <sumit.saxena@broadcom.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/megaraid/megaraid_sas_base.c||drivers/scsi/megaraid/megaraid_sas_base.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/megaraid/megaraid_sas_base.c||drivers/scsi/megaraid/megaraid_sas_base.c": [
      "File: drivers/scsi/megaraid/megaraid_sas_base.c -> drivers/scsi/megaraid/megaraid_sas_base.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4188:  if (megasas_create_frame_pool(instance)) {",
      "4189:   dev_printk(KERN_DEBUG, &instance->pdev->dev, \"Error creating frame DMA pool\\n\");",
      "4190:   megasas_free_cmds(instance);",
      "4191:  }",
      "4193:  return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4191:   return -ENOMEM;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1d988ed46543ca36c010634c97ac32114362ddb1",
      "candidate_info": {
        "commit_hash": "1d988ed46543ca36c010634c97ac32114362ddb1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1d988ed46543ca36c010634c97ac32114362ddb1",
        "files": [
          "arch/x86/xen/setup.c",
          "drivers/xen/xen-balloon.c",
          "include/xen/xen.h"
        ],
        "message": "x86/xen: dont add memory above max allowed allocation\n\nDon't allow memory to be added above the allowed maximum allocation\nlimit set by Xen.\n\nTrying to do so would result in cases like the following:\n\n[  584.559652] ------------[ cut here ]------------\n[  584.564897] WARNING: CPU: 2 PID: 1 at ../arch/x86/xen/multicalls.c:129 xen_alloc_pte+0x1c7/0x390()\n[  584.575151] Modules linked in:\n[  584.578643] Supported: Yes\n[  584.581750] CPU: 2 PID: 1 Comm: swapper/0 Not tainted 4.4.120-92.70-default #1\n[  584.590000] Hardware name: Cisco Systems Inc UCSC-C460-M4/UCSC-C460-M4, BIOS C460M4.4.0.1b.0.0629181419 06/29/2018\n[  584.601862]  0000000000000000 ffffffff813175a0 0000000000000000 ffffffff8184777c\n[  584.610200]  ffffffff8107f4e1 ffff880487eb7000 ffff8801862b79c0 ffff88048608d290\n[  584.618537]  0000000000487eb7 ffffea0000000201 ffffffff81009de7 ffffffff81068561\n[  584.626876] Call Trace:\n[  584.629699]  [<ffffffff81019ad9>] dump_trace+0x59/0x340\n[  584.635645]  [<ffffffff81019eaa>] show_stack_log_lvl+0xea/0x170\n[  584.642391]  [<ffffffff8101ac51>] show_stack+0x21/0x40\n[  584.648238]  [<ffffffff813175a0>] dump_stack+0x5c/0x7c\n[  584.654085]  [<ffffffff8107f4e1>] warn_slowpath_common+0x81/0xb0\n[  584.660932]  [<ffffffff81009de7>] xen_alloc_pte+0x1c7/0x390\n[  584.667289]  [<ffffffff810647f0>] pmd_populate_kernel.constprop.6+0x40/0x80\n[  584.675241]  [<ffffffff815ecfe8>] phys_pmd_init+0x210/0x255\n[  584.681587]  [<ffffffff815ed207>] phys_pud_init+0x1da/0x247\n[  584.687931]  [<ffffffff815edb3b>] kernel_physical_mapping_init+0xf5/0x1d4\n[  584.695682]  [<ffffffff815e9bdd>] init_memory_mapping+0x18d/0x380\n[  584.702631]  [<ffffffff81064699>] arch_add_memory+0x59/0xf0\n\nSigned-off-by: Juergen Gross <jgross@suse.com>\nReviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nSigned-off-by: Juergen Gross <jgross@suse.com>",
        "before_after_code_files": [
          "arch/x86/xen/setup.c||arch/x86/xen/setup.c",
          "drivers/xen/xen-balloon.c||drivers/xen/xen-balloon.c",
          "include/xen/xen.h||include/xen/xen.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/x86/xen/setup.c||arch/x86/xen/setup.c": [
          "File: arch/x86/xen/setup.c -> arch/x86/xen/setup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <linux/memblock.h>",
          "13: #include <linux/cpuidle.h>",
          "14: #include <linux/cpufreq.h>",
          "16: #include <asm/elf.h>",
          "17: #include <asm/vdso.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <linux/memory_hotplug.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "589:  if (type == E820_TYPE_RAM) {",
          "590:   start = PAGE_ALIGN(start);",
          "591:   end &= ~((phys_addr_t)PAGE_SIZE - 1);",
          "592:  }",
          "594:  e820__range_add(start, end - start, type);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593: #ifdef CONFIG_MEMORY_HOTPLUG",
          "599:   max_mem_size = end;",
          "600: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "748:  memmap.nr_entries = ARRAY_SIZE(xen_e820_table.entries);",
          "749:  set_xen_guest_handle(memmap.buffer, xen_e820_table.entries);",
          "751:  op = xen_initial_domain() ?",
          "752:   XENMEM_machine_memory_map :",
          "753:   XENMEM_memory_map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760: #if defined(CONFIG_MEMORY_HOTPLUG) && defined(CONFIG_XEN_BALLOON)",
          "761:  xen_saved_max_mem_size = max_mem_size;",
          "762: #endif",
          "",
          "---------------"
        ],
        "drivers/xen/xen-balloon.c||drivers/xen/xen-balloon.c": [
          "File: drivers/xen/xen-balloon.c -> drivers/xen/xen-balloon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <linux/mm_types.h>",
          "38: #include <linux/init.h>",
          "39: #include <linux/capability.h>",
          "41: #include <xen/xen.h>",
          "42: #include <xen/interface/xen.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #include <linux/memory_hotplug.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: #define BALLOON_CLASS_NAME \"xen_memory\"",
          "53: static struct device balloon_dev;",
          "55: static int register_balloon(struct device *dev);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: #ifdef CONFIG_MEMORY_HOTPLUG",
          "55: u64 xen_saved_max_mem_size = 0;",
          "56: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:  static bool watch_fired;",
          "64:  static long target_diff;",
          "66:  err = xenbus_scanf(XBT_NIL, \"memory\", \"target\", \"%llu\", &new_target);",
          "67:  if (err != 1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: #ifdef CONFIG_MEMORY_HOTPLUG",
          "73:  if (xen_saved_max_mem_size)",
          "74:   max_mem_size = xen_saved_max_mem_size;",
          "75: #endif",
          "",
          "---------------"
        ],
        "include/xen/xen.h||include/xen/xen.h": [
          "File: include/xen/xen.h -> include/xen/xen.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: bool xen_biovec_phys_mergeable(const struct bio_vec *vec1,",
          "47:   const struct bio_vec *vec2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #if defined(CONFIG_MEMORY_HOTPLUG) && defined(CONFIG_XEN_BALLOON)",
          "50: extern u64 xen_saved_max_mem_size;",
          "51: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e37504d1c49eec6434d0cc97278d2b51c9e8763",
      "candidate_info": {
        "commit_hash": "4e37504d1c49eec6434d0cc97278d2b51c9e8763",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4e37504d1c49eec6434d0cc97278d2b51c9e8763",
        "files": [
          "kernel/sched/psi.c"
        ],
        "message": "psi: avoid divide-by-zero crash inside virtual machines\n\nWe've been seeing hard-to-trigger psi crashes when running inside VM\ninstances:\n\n    divide error: 0000 [#1] SMP PTI\n    Modules linked in: [...]\n    CPU: 0 PID: 212 Comm: kworker/0:2 Not tainted 4.16.18-119_fbk9_3817_gfe944c98d695 #119\n    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 0.0.0 02/06/2015\n    Workqueue: events psi_clock\n    RIP: 0010:psi_update_stats+0x270/0x490\n    RSP: 0018:ffffc90001117e10 EFLAGS: 00010246\n    RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff8800a35a13f8\n    RDX: 0000000000000000 RSI: ffff8800a35a1340 RDI: 0000000000000000\n    RBP: 0000000000000658 R08: ffff8800a35a1470 R09: 0000000000000000\n    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000\n    R13: 0000000000000000 R14: 0000000000000000 R15: 00000000000f8502\n    FS:  0000000000000000(0000) GS:ffff88023fc00000(0000) knlGS:0000000000000000\n    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n    CR2: 00007fbe370fa000 CR3: 00000000b1e3a000 CR4: 00000000000006f0\n    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n    Call Trace:\n     psi_clock+0x12/0x50\n     process_one_work+0x1e0/0x390\n     worker_thread+0x2b/0x3c0\n     ? rescuer_thread+0x330/0x330\n     kthread+0x113/0x130\n     ? kthread_create_worker_on_cpu+0x40/0x40\n     ? SyS_exit_group+0x10/0x10\n     ret_from_fork+0x35/0x40\n    Code: 48 0f 47 c7 48 01 c2 45 85 e4 48 89 16 0f 85 e6 00 00 00 4c 8b 49 10 4c 8b 51 08 49 69 d9 f2 07 00 00 48 6b c0 64 4c 8b 29 31 d2 <48> f7 f7 49 69 d5 8d 06 00 00 48 89 c5 4c 69 f0 00 98 0b 00 48\n\nThe Code-line points to `period` being 0 inside update_stats(), and we\ndivide by that when calculating that period's pressure percentage.\n\nThe elapsed period should never be 0.  The reason this can happen is due\nto an off-by-one in the idle time / missing period calculation combined\nwith a coarse sched_clock() in the virtual machine.\n\nThe target time for aggregation is advanced into the future on a fixed\ngrid to prevent clock drift.  So when an aggregation runs after some idle\nperiod, we can not just set it to \"now + psi_period\", but have to\ncalculate the downtime and advance the target time relative to itself.\n\nHowever, if the aggregator was disabled exactly one psi_period (ns), we\ndrop one idle period in the calculation due to a > when we should do >=.\nIn that case, next_update will be advanced from 'now - psi_period' to\n'now' when it should be moved to 'now + psi_period'.  The run finishes\nwith last_update == next_update == sched_clock().\n\nWith hardware clocks, this exact nanosecond match isn't likely in the\nfirst place; but if it does happen, the clock will still have moved on and\nthe period non-zero by the time the worker runs.  A pointlessly short\nperiod, but besides the extra work, no harm no foul.  However, a slow\nsched_clock() like we have on VMs might not have advanced either by the\ntime the worker runs again.  And when we calculate the elapsed period, the\nresult, our pressure divisor, will be 0.  Ouch.\n\nFix this by correctly handling the situation when the elapsed time between\naggregation runs is precisely two periods, and advance the expiration\ntimestamp correctly to period into the future.\n\nLink: http://lkml.kernel.org/r/20190214193157.15788-1-hannes@cmpxchg.org\nSigned-off-by: Johannes Weiner <hannes@cmpxchg.org>\nReported-by: \u0141ukasz Siudut <lsiudut@fb.com\nReviewed-by: Andrew Morton <akpm@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "kernel/sched/psi.c||kernel/sched/psi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kernel/sched/psi.c||kernel/sched/psi.c": [
          "File: kernel/sched/psi.c -> kernel/sched/psi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:  expires = group->next_update;",
          "323:  if (now < expires)",
          "324:   goto out;",
          "326:   missed_periods = div_u64(now - expires, psi_period);",
          "",
          "[Removed Lines]",
          "325:  if (now - expires > psi_period)",
          "",
          "[Added Lines]",
          "325:  if (now - expires >= psi_period)",
          "",
          "---------------"
        ]
      }
    }
  ]
}