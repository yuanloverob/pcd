{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "95fd517431c46e2083dd16d031eb79371b67da79",
      "candidate_info": {
        "commit_hash": "95fd517431c46e2083dd16d031eb79371b67da79",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/95fd517431c46e2083dd16d031eb79371b67da79",
        "files": [
          "node.gyp"
        ],
        "message": "node.gyp: include the config.gypi file in the js2c inputs list",
        "before_after_code_files": [
          "node.gyp||node.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "node.gyp||node.gyp": [
          "File: node.gyp -> node.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:           'action_name': 'node_js2c',",
          "221:           'inputs': [",
          "223:             '<@(library_files)',",
          "224:           ],",
          "226:           'outputs': [",
          "",
          "[Removed Lines]",
          "222:             './tools/js2c.py',",
          "",
          "[Added Lines]",
          "223:             './config.gypi',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:                 'python',",
          "238:                 'tools/js2c.py',",
          "239:                 '<@(_outputs)',",
          "241:               ],",
          "242:             }, { # No Dtrace",
          "243:               'action': [",
          "244:                 'python',",
          "245:                 'tools/js2c.py',",
          "246:                 '<@(_outputs)',",
          "248:                 'src/macros.py'",
          "249:               ],",
          "250:             }]",
          "",
          "[Removed Lines]",
          "240:                 '<@(library_files)'",
          "247:                 '<@(library_files)',",
          "",
          "[Added Lines]",
          "240:                 '<@(_inputs)',",
          "247:                 '<@(_inputs)',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86f4846c2166ce91b17674d066f8fb3a5a278a8c",
      "candidate_info": {
        "commit_hash": "86f4846c2166ce91b17674d066f8fb3a5a278a8c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/86f4846c2166ce91b17674d066f8fb3a5a278a8c",
        "files": [
          "lib/url.js",
          "test/simple/test-url.js"
        ],
        "message": "url: decode url entities in auth section\n\nFixes #2736.",
        "before_after_code_files": [
          "lib/url.js||liurl.js",
          "test/simple/test-url.js||test/simple/test-url.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/url.js||liurl.js": [
          "File: lib/url.js -> liurl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     var atSign = rest.indexOf('@');",
          "137:     if (atSign !== -1) {",
          "139:       var hasAuth = true;",
          "140:       for (var i = 0, l = nonAuthChars.length; i < l; i++) {",
          "144:           hasAuth = false;",
          "145:           break;",
          "146:         }",
          "147:       }",
          "148:       if (hasAuth) {",
          "151:         rest = rest.substr(atSign + 1);",
          "152:       }",
          "153:     }",
          "",
          "[Removed Lines]",
          "141:         var index = rest.indexOf(nonAuthChars[i]);",
          "142:         if (index !== -1 && index < atSign) {",
          "150:         out.auth = rest.substr(0, atSign);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:   var auth = obj.auth || '';",
          "331:   if (auth) {",
          "337:     auth += '@';",
          "338:   }",
          "",
          "[Removed Lines]",
          "332:     auth = auth.split('@').join('%40');",
          "333:     for (var i = 0, l = nonAuthChars.length; i < l; i++) {",
          "334:       var nAC = nonAuthChars[i];",
          "335:       auth = auth.split(nAC).join(encodeURIComponent(nAC));",
          "336:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-url.js||test/simple/test-url.js": [
          "File: test/simple/test-url.js -> test/simple/test-url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     'pathname': '/',",
          "72:     'path': '/'",
          "73:   },",
          "74:   'http://x.com/path?that\\'s#all, folks' : {",
          "75:     'href': 'http://x.com/path?that%27s#all,',",
          "76:     'protocol': 'http:',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   'http://user@www.example.com/' : {",
          "75:     'href': 'http://user@www.example.com/',",
          "76:     'protocol': 'http:',",
          "77:     'slashes': true,",
          "78:     'auth': 'user',",
          "79:     'host': 'www.example.com',",
          "80:     'hostname': 'www.example.com',",
          "81:     'pathname': '/',",
          "82:     'path': '/'",
          "83:   },",
          "84:   'http://user%3Apw@www.example.com/' : {",
          "85:     'href': 'http://user:pw@www.example.com/',",
          "86:     'protocol': 'http:',",
          "87:     'slashes': true,",
          "88:     'auth': 'user:pw',",
          "89:     'host': 'www.example.com',",
          "90:     'hostname': 'www.example.com',",
          "91:     'pathname': '/',",
          "92:     'path': '/'",
          "93:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "324:     'protocol' : 'http:',",
          "325:     'slashes': true,",
          "326:     'host' : '127.0.0.1:8080',",
          "328:     'hostname' : '127.0.0.1',",
          "329:     'port' : '8080',",
          "330:     'pathname': '/path',",
          "",
          "[Removed Lines]",
          "327:     'auth' : 'atpass:foo%40bar',",
          "",
          "[Added Lines]",
          "347:     'auth' : 'atpass:foo@bar',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e97b961815b8804e17d6793101960db53e4c32a2",
      "candidate_info": {
        "commit_hash": "e97b961815b8804e17d6793101960db53e4c32a2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e97b961815b8804e17d6793101960db53e4c32a2",
        "files": [
          "src/node.h"
        ],
        "message": "add node::SetMethod and node::SetPrototypeMethod\n\ndefines cannot be used if the callback is a templated and has\nmultiple template arguments. The comma separating the arguments\nbreaks the preprocessor argument handling. Using a templated function\nis clearer and more idiomatic in c++.",
        "before_after_code_files": [
          "src/node.h||src/node.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:                 static_cast<v8::PropertyAttribute>(                       \\",
          "102:                     v8::ReadOnly|v8::DontDelete))",
          "118: enum encoding {ASCII, UTF8, BASE64, UCS2, BINARY, HEX};",
          "119: enum encoding ParseEncoding(v8::Handle<v8::Value> encoding_v,",
          "",
          "[Removed Lines]",
          "104: #define NODE_SET_METHOD(obj, name, callback)                              \\",
          "105:   obj->Set(v8::String::NewSymbol(name),                                   \\",
          "106:            v8::FunctionTemplate::New(callback)->GetFunction())",
          "108: #define NODE_SET_PROTOTYPE_METHOD(templ, name, callback)                  \\",
          "109: do {                                                                      \\",
          "110:   v8::Local<v8::Signature> __callback##_SIG = v8::Signature::New(templ);  \\",
          "111:   v8::Local<v8::FunctionTemplate> __callback##_TEM =                      \\",
          "112:     v8::FunctionTemplate::New(callback, v8::Handle<v8::Value>(),          \\",
          "113:                           __callback##_SIG);                              \\",
          "114:   templ->PrototypeTemplate()->Set(v8::String::NewSymbol(name),            \\",
          "115:                                   __callback##_TEM);                      \\",
          "116: } while (0)",
          "",
          "[Added Lines]",
          "104: template <typename target_t>",
          "105: void SetMethod(target_t obj, const char* name,",
          "106:         v8::InvocationCallback callback)",
          "107: {",
          "108:     obj->Set(v8::String::NewSymbol(name),",
          "109:         v8::FunctionTemplate::New(callback)->GetFunction());",
          "110: }",
          "112: template <typename target_t>",
          "113: void SetPrototypeMethod(target_t target,",
          "114:         const char* name, v8::InvocationCallback callback)",
          "115: {",
          "116:     v8::Local<v8::FunctionTemplate> templ = v8::FunctionTemplate::New(callback);",
          "117:     target->PrototypeTemplate()->Set(v8::String::NewSymbol(name), templ);",
          "118: }",
          "121: #define NODE_SET_METHOD node::SetMethod",
          "122: #define NODE_SET_PROTOTYPE_METHOD node::SetPrototypeMethod",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10ce3d129d4e466842a03545fdfdfc011e0b9fba",
      "candidate_info": {
        "commit_hash": "10ce3d129d4e466842a03545fdfdfc011e0b9fba",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/10ce3d129d4e466842a03545fdfdfc011e0b9fba",
        "files": [
          "src/node.cc",
          "src/node.js",
          "src/req_wrap.h"
        ],
        "message": "Domain hooks in ReqWrap<T> and MakeCallback",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node.js||src/node.js",
          "src/req_wrap.h||src/req_wrap.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: static Persistent<String> uncaught_exception_symbol;",
          "110: static Persistent<String> emit_symbol;",
          "113: static bool print_eval = false;",
          "114: static bool force_repl = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: static Persistent<String> domain_symbol;",
          "113: static Persistent<String> enter_symbol;",
          "114: static Persistent<String> exit_symbol;",
          "115: static Persistent<String> disposed_symbol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1018:   TryCatch try_catch;",
          "1020:   Local<Value> ret = callback->Call(object, argc, argv);",
          "1022:   if (try_catch.HasCaught()) {",
          "1023:     FatalException(try_catch);",
          "1024:   }",
          "1026:   return scope.Close(ret);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:   if (domain_symbol.IsEmpty()) {",
          "1026:     domain_symbol = NODE_PSYMBOL(\"domain\");",
          "1027:     enter_symbol = NODE_PSYMBOL(\"enter\");",
          "1028:     exit_symbol = NODE_PSYMBOL(\"exit\");",
          "1029:     disposed_symbol = NODE_PSYMBOL(\"_disposed\");",
          "1030:   }",
          "1032:   Local<Value> domain_v = object->Get(domain_symbol);",
          "1033:   Local<Object> domain;",
          "1034:   Local<Function> enter;",
          "1035:   Local<Function> exit;",
          "1036:   if (!domain_v->IsUndefined()) {",
          "1037:     domain = domain_v->ToObject();",
          "1038:     if (domain->Get(disposed_symbol)->BooleanValue()) {",
          "1040:       return Undefined();",
          "1041:     }",
          "1042:     enter = Local<Function>::Cast(domain->Get(enter_symbol));",
          "1043:     enter->Call(domain, 0, NULL);",
          "1044:   }",
          "1046:   if (try_catch.HasCaught()) {",
          "1047:     FatalException(try_catch);",
          "1048:     return Undefined();",
          "1049:   }",
          "1055:     return Undefined();",
          "1056:   }",
          "1058:   if (!domain_v->IsUndefined()) {",
          "1059:     exit = Local<Function>::Cast(domain->Get(exit_symbol));",
          "1060:     exit->Call(domain, 0, NULL);",
          "1061:   }",
          "1063:   if (try_catch.HasCaught()) {",
          "1064:     FatalException(try_catch);",
          "1065:     return Undefined();",
          "",
          "---------------"
        ],
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:         for (var i = 0; i < l; i++) {",
          "239:           var tock = q[i];",
          "240:           var callback = tock.callback;",
          "242:           callback();",
          "243:           if (tock.domain) tock.domain.exit();",
          "244:         }",
          "",
          "[Removed Lines]",
          "241:           if (tock.domain) tock.domain.enter();",
          "",
          "[Added Lines]",
          "241:           if (tock.domain) {",
          "242:             if (tock.domain._disposed) continue;",
          "243:             tock.domain.enter();",
          "244:           }",
          "",
          "---------------"
        ],
        "src/req_wrap.h||src/req_wrap.h": [
          "File: src/req_wrap.h -> src/req_wrap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: namespace node {",
          "27: template <typename T>",
          "28: class ReqWrap {",
          "29:  public:",
          "30:   ReqWrap() {",
          "31:     v8::HandleScope scope;",
          "32:     object_ = v8::Persistent<v8::Object>::New(v8::Object::New());",
          "33:   }",
          "35:   ~ReqWrap() {",
          "37:     assert(req_.data == this);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: static v8::Persistent<v8::String> process_symbol;",
          "28: static v8::Persistent<v8::String> domain_symbol;",
          "38:     if (process_symbol.IsEmpty()) {",
          "39:       process_symbol = NODE_PSYMBOL(\"process\");",
          "40:       domain_symbol = NODE_PSYMBOL(\"domain\");",
          "41:     }",
          "43:     v8::Local<v8::Value> domain = v8::Context::GetCurrent()",
          "44:                                   ->Global()",
          "45:                                   ->Get(process_symbol)",
          "46:                                   ->ToObject()",
          "47:                                   ->Get(domain_symbol);",
          "49:     if (!domain->IsUndefined()) {",
          "51:       object_->Set(domain_symbol, domain);",
          "52:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ff2ae8389c8e4ea37709d02340f1b60c32f0737",
      "candidate_info": {
        "commit_hash": "5ff2ae8389c8e4ea37709d02340f1b60c32f0737",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/5ff2ae8389c8e4ea37709d02340f1b60c32f0737",
        "files": [
          "benchmark/http_simple_cluster.js"
        ],
        "message": "bench: start a worker for each CPU",
        "before_after_code_files": [
          "benchmark/http_simple_cluster.js||benchmark/http_simple_cluster.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "benchmark/http_simple_cluster.js||benchmark/http_simple_cluster.js": [
          "File: benchmark/http_simple_cluster.js -> benchmark/http_simple_cluster.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: if (cluster.isMaster) {",
          "5:   console.log('master running on pid %d', process.pid);",
          "7: } else {",
          "8:   require(__dirname + '/http_simple.js');",
          "9: }",
          "",
          "[Removed Lines]",
          "6:   for (var i = 1, n = os.cpus().length; i < n; ++i) cluster.fork();",
          "",
          "[Added Lines]",
          "6:   for (var i = 0, n = os.cpus().length; i < n; ++i) cluster.fork();",
          "",
          "---------------"
        ]
      }
    }
  ]
}