{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c285ded26c1a8b368777691cf40ad7385f27919b",
      "candidate_info": {
        "commit_hash": "c285ded26c1a8b368777691cf40ad7385f27919b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c285ded26c1a8b368777691cf40ad7385f27919b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c",
          "test/cast.test",
          "test/e_expr.test"
        ],
        "message": "Make sure a CAST to \"NUMERIC\" results in an integer if the value can be losslessly expressed as an integer, as the documentation requires. Ticket [dd6bffbfb6e61db9].\n\nFossilOrigin-Name: c0c90961b4fa1c1185772d04fe1915bc1a1af27ed8ddb8db1c524bf90d68ccbf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test",
          "test/e_expr.test||test/e_expr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: static int alsoAnInt(Mem *pRec, double rValue, i64 *piValue){",
          "286:   i64 iValue = (double)rValue;",
          "287:   if( sqlite3RealSameAsInt(rValue,iValue) ){",
          "299:   }",
          "300:   return 0==sqlite3Atoi64(pRec->z, piValue, pRec->n, pRec->enc);",
          "301: }",
          "",
          "[Removed Lines]",
          "288:     testcase( iValue<-2251799813685248 );",
          "289:     testcase( iValue==-2251799813685248 );",
          "290:     testcase( iValue==-2251799813685247 );",
          "291:     testcase( iValue>-2251799813685247 && iValue<+2251799813685247 );",
          "292:     testcase( iValue==+2251799813685247 );",
          "293:     testcase( iValue==+2251799813685248 );",
          "294:     testcase( iValue>+2251799813685248 );",
          "295:     if( iValue > -2251799813685248 && iValue < 2251799813685248 ){",
          "297:       return 1;",
          "298:     }",
          "",
          "[Added Lines]",
          "289:     return 1;",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "703: }",
          "",
          "[Removed Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0;",
          "",
          "[Added Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "703:       && i > -2251799813685248 && i < 2251799813685248;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "721:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "722:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "723:     rc = sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc);",
          "732:       pMem->u.i = ix;",
          "733:       MemSetTypeFlag(pMem, MEM_Int);",
          "734:     }else{",
          "",
          "[Removed Lines]",
          "724:     if( rc<=0 ){",
          "725:       if( rc==0 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1 ){",
          "726:         pMem->u.i = ix;",
          "727:         MemSetTypeFlag(pMem, MEM_Int);",
          "728:       }else{",
          "729:         MemSetTypeFlag(pMem, MEM_Real);",
          "730:       }",
          "731:     }else if( rc==1 && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)==0 ){",
          "",
          "[Added Lines]",
          "725:     if( ((rc==0 || rc==1) && sqlite3Atoi64(pMem->z, &ix, pMem->n, pMem->enc)<=1)",
          "726:      || sqlite3RealSameAsInt(pMem->u.r, (ix = (i64)pMem->u.r))",
          "727:     ){",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "371: do_execsql_test case-5.3 {",
          "372:   SELECT CAST('123e+5' AS INTEGER);",
          "373:   SELECT CAST('123e+5' AS NUMERIC);",
          "377: # The following does not have anything to do with the CAST operator,",
          "",
          "[Removed Lines]",
          "374: } {123 12300000.0}",
          "",
          "[Added Lines]",
          "374:   SELECT CAST('123e+5' AS REAL);",
          "375: } {123 12300000 12300000.0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:   SELECT '' - 1;",
          "416: } {-1}",
          "418: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419: # 2019-06-10",
          "420: # https://www.sqlite.org/src/info/dd6bffbfb6e61db9",
          "421: #",
          "422: # EVIDENCE-OF: R-09295-61337 Casting a TEXT or BLOB value into NUMERIC",
          "423: # first does a forced conversion into REAL but then further converts the",
          "424: # result into INTEGER if and only if the conversion from REAL to INTEGER",
          "425: # is lossless and reversible.",
          "426: #",
          "427: do_execsql_test cast-7.20 {",
          "428:   DROP TABLE IF EXISTS t0;",
          "429:   CREATE TABLE t0 (c0 TEXT);",
          "430:   INSERT INTO t0(c0) VALUES ('1.0');",
          "431:   SELECT CAST(c0 AS NUMERIC) FROM t0;",
          "432: } {1}",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1650: # is lossless and reversible.",
          "1651: #",
          "1652: do_expr_test e_expr-32.1.1 { CAST('45'   AS NUMERIC)  } integer 45",
          "1654: do_expr_test e_expr-32.1.3 { CAST('45.2' AS NUMERIC)  } real 45.2",
          "1655: do_expr_test e_expr-32.1.4 { CAST('11abc' AS NUMERIC) } integer 11",
          "1656: do_expr_test e_expr-32.1.5 { CAST('11.1abc' AS NUMERIC) } real 11.1",
          "",
          "[Removed Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } real 45.0",
          "",
          "[Added Lines]",
          "1653: do_expr_test e_expr-32.1.2 { CAST('45.0' AS NUMERIC)  } integer 45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1709:  real 9.22337203685478e+18 \\",
          "1710:  real 9.22337203685478e+18 \\",
          "1711:  real 9.22337203685478e+18 \\",
          "1714: ]",
          "1716: # EVIDENCE-OF: R-64550-29191 Note that the result from casting any",
          "",
          "[Removed Lines]",
          "1712:  real -5.0 \\",
          "1713:  real -5.0 \\",
          "",
          "[Added Lines]",
          "1712:  integer -5 \\",
          "1713:  integer -5 \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c425484a7385abe9aca4951ad092fb035167780",
      "candidate_info": {
        "commit_hash": "3c425484a7385abe9aca4951ad092fb035167780",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c425484a7385abe9aca4951ad092fb035167780",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "test/pragma4.test"
        ],
        "message": "Fix problems in pragma.c causing some PRAGMA statements to test the wrong schema-cookie before proceeding, or to try to open cursors on the wrong database (\"PRAGMA foreign_key_check\" only).\n\nFossilOrigin-Name: 6982f52f579d20b8a2965373731d41622bda7f09fbf82cc005bb378321829f4c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1740025307531a52e4f0641e2e74dc14715130858f2e9236be13b66924f00220",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1086:     Table *pTab;",
          "1087:     pTab = sqlite3LocateTable(pParse, LOCATE_NOERR, zRight, zDb);",
          "1088:     if( pTab ){",
          "1089:       int i, k;",
          "1090:       int nHidden = 0;",
          "1091:       Column *pCol;",
          "1092:       Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1093:       pParse->nMem = 7;",
          "1095:       sqlite3ViewGetColumnNames(pParse, pTab);",
          "1096:       for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){",
          "1097:         int isHidden = IsHiddenColumn(pCol);",
          "",
          "[Removed Lines]",
          "1094:       sqlite3CodeVerifySchema(pParse, iDb);",
          "",
          "[Added Lines]",
          "1089:       int iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "1095:       sqlite3CodeVerifySchema(pParse, iTabDb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1152:     Table *pTab;",
          "1153:     pIdx = sqlite3FindIndex(db, zRight, zDb);",
          "1154:     if( pIdx ){",
          "1155:       int i;",
          "1156:       int mx;",
          "1157:       if( pPragma->iArg ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1156:       int iIdxDb = sqlite3SchemaToIndex(db, pIdx->pSchema);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1164:         pParse->nMem = 3;",
          "1165:       }",
          "1166:       pTab = pIdx->pTable;",
          "1168:       assert( pParse->nMem<=pPragma->nPragCName );",
          "1169:       for(i=0; i<mx; i++){",
          "1170:         i16 cnum = pIdx->aiColumn[i];",
          "",
          "[Removed Lines]",
          "1167:       sqlite3CodeVerifySchema(pParse, iDb);",
          "",
          "[Added Lines]",
          "1169:       sqlite3CodeVerifySchema(pParse, iIdxDb);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1188:     int i;",
          "1189:     pTab = sqlite3FindTable(db, zRight, zDb);",
          "1190:     if( pTab ){",
          "1191:       pParse->nMem = 5;",
          "1193:       for(pIdx=pTab->pIndex, i=0; pIdx; pIdx=pIdx->pNext, i++){",
          "1194:         const char *azOrigin[] = { \"c\", \"u\", \"pk\" };",
          "1195:         sqlite3VdbeMultiLoad(v, 1, \"isisi\",",
          "",
          "[Removed Lines]",
          "1192:       sqlite3CodeVerifySchema(pParse, iDb);",
          "",
          "[Added Lines]",
          "1193:       int iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "1195:       sqlite3CodeVerifySchema(pParse, iTabDb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1277:     if( pTab ){",
          "1278:       pFK = pTab->pFKey;",
          "1279:       if( pFK ){",
          "1280:         int i = 0;",
          "1281:         pParse->nMem = 8;",
          "1283:         while(pFK){",
          "1284:           int j;",
          "1285:           for(j=0; j<pFK->nCol; j++){",
          "",
          "[Removed Lines]",
          "1282:         sqlite3CodeVerifySchema(pParse, iDb);",
          "",
          "[Added Lines]",
          "1283:         int iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "1286:         sqlite3CodeVerifySchema(pParse, iTabDb);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1324:     pParse->nMem += 4;",
          "1325:     regKey = ++pParse->nMem;",
          "1326:     regRow = ++pParse->nMem;",
          "1328:     k = sqliteHashFirst(&db->aDb[iDb].pSchema->tblHash);",
          "1329:     while( k ){",
          "1330:       if( zRight ){",
          "1331:         pTab = sqlite3LocateTable(pParse, 0, zRight, zDb);",
          "1332:         k = 0;",
          "",
          "[Removed Lines]",
          "1327:     sqlite3CodeVerifySchema(pParse, iDb);",
          "",
          "[Added Lines]",
          "1333:       int iTabDb;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1335:         k = sqliteHashNext(k);",
          "1336:       }",
          "1337:       if( pTab==0 || pTab->pFKey==0 ) continue;",
          "1339:       if( pTab->nCol+regRow>pParse->nMem ) pParse->nMem = pTab->nCol + regRow;",
          "1341:       sqlite3VdbeLoadString(v, regResult, pTab->zName);",
          "1342:       for(i=1, pFK=pTab->pFKey; pFK; i++, pFK=pFK->pNextFrom){",
          "1343:         pParent = sqlite3FindTable(db, pFK->zTo, zDb);",
          "1344:         if( pParent==0 ) continue;",
          "1345:         pIdx = 0;",
          "1347:         x = sqlite3FkLocateIndex(pParse, pParent, pFK, &pIdx, 0);",
          "1348:         if( x==0 ){",
          "1349:           if( pIdx==0 ){",
          "1351:           }else{",
          "1353:             sqlite3VdbeSetP4KeyInfo(pParse, pIdx);",
          "1354:           }",
          "1355:         }else{",
          "",
          "[Removed Lines]",
          "1338:       sqlite3TableLock(pParse, iDb, pTab->tnum, 0, pTab->zName);",
          "1340:       sqlite3OpenTable(pParse, 0, iDb, pTab, OP_OpenRead);",
          "1346:         sqlite3TableLock(pParse, iDb, pParent->tnum, 0, pParent->zName);",
          "1350:             sqlite3OpenTable(pParse, i, iDb, pParent, OP_OpenRead);",
          "1352:             sqlite3VdbeAddOp3(v, OP_OpenRead, i, pIdx->tnum, iDb);",
          "",
          "[Added Lines]",
          "1342:       iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "1343:       sqlite3CodeVerifySchema(pParse, iTabDb);",
          "1344:       sqlite3TableLock(pParse, iTabDb, pTab->tnum, 0, pTab->zName);",
          "1346:       sqlite3OpenTable(pParse, 0, iTabDb, pTab, OP_OpenRead);",
          "1352:         sqlite3TableLock(pParse, iTabDb, pParent->tnum, 0, pParent->zName);",
          "1356:             sqlite3OpenTable(pParse, i, iTabDb, pParent, OP_OpenRead);",
          "1358:             sqlite3VdbeAddOp3(v, OP_OpenRead, i, pIdx->tnum, iTabDb);",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     [db eval {EXPLAIN PRAGMA integrity_check}]",
          "101: } {/ IntegrityCk 2 2 1 x[0-9]+,1x /}",
          "103: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #--------------------------------------------------------------------------",
          "105: #",
          "106: reset_db",
          "107: forcedelete test.db2",
          "108: do_execsql_test 4.1.1 {",
          "109:   CREATE TABLE t1(a, b, c);",
          "110:   ATTACH 'test.db2' AS aux;",
          "111:   CREATE TABLE aux.t2(d, e, f);",
          "112: }",
          "113: do_execsql_test 4.1.2 { PRAGMA table_info = t1 } {",
          "114:   0 a {} 0 {} 0 1 b {} 0 {} 0 2 c {} 0 {} 0",
          "115: }",
          "116: do_execsql_test 4.1.3 { PRAGMA table_info = t2 } {",
          "117:   0 d {} 0 {} 0 1 e {} 0 {} 0 2 f {} 0 {} 0",
          "118: }",
          "119: do_test 4.1.4 {",
          "120:   sqlite3 db3 test.db",
          "121:   sqlite3 db2 test.db2",
          "122:   execsql { DROP TABLE t1 } db3",
          "123:   execsql { DROP TABLE t2 } db2",
          "124: } {}",
          "125: do_execsql_test 4.1.5 { PRAGMA table_info = t1 }",
          "126: do_execsql_test 4.1.6 { PRAGMA table_info = t2 }",
          "128: db2 close",
          "129: db3 close",
          "130: reset_db",
          "131: forcedelete test.db2",
          "132: do_execsql_test 4.2.1 {",
          "133:   CREATE TABLE t1(a, b, c);",
          "134:   ATTACH 'test.db2' AS aux;",
          "135:   CREATE TABLE aux.t2(d, e, f);",
          "136: }",
          "137: do_execsql_test 4.2.2 { SELECT * FROM pragma_table_info('t1') } {",
          "138:   0 a {} 0 {} 0 1 b {} 0 {} 0 2 c {} 0 {} 0",
          "139: }",
          "140: do_execsql_test 4.2.3 { SELECT * FROM pragma_table_info('t2') } {",
          "141:   0 d {} 0 {} 0 1 e {} 0 {} 0 2 f {} 0 {} 0",
          "142: }",
          "143: do_test 4.2.4 {",
          "144:   sqlite3 db3 test.db",
          "145:   sqlite3 db2 test.db2",
          "146:   execsql { DROP TABLE t1 } db3",
          "147:   execsql { DROP TABLE t2 } db2",
          "148: } {}",
          "149: do_execsql_test 4.2.5 { SELECT * FROM pragma_table_info('t1') }",
          "150: do_execsql_test 4.2.6 { SELECT * FROM pragma_table_info('t2') }",
          "152: db2 close",
          "153: db3 close",
          "154: reset_db",
          "155: forcedelete test.db2",
          "156: do_execsql_test 4.3.1 {",
          "157:   CREATE TABLE t1(a, b, c);",
          "158:   CREATE INDEX i1 ON t1(b);",
          "159:   ATTACH 'test.db2' AS aux;",
          "160:   CREATE TABLE aux.t2(d, e, f);",
          "161:   CREATE INDEX aux.i2 ON t2(e);",
          "162: }",
          "163: do_execsql_test 4.3.2 { SELECT * FROM pragma_index_info('i1') } {0 1 b}",
          "164: do_execsql_test 4.3.3 { SELECT * FROM pragma_index_info('i2') } {0 1 e}",
          "165: do_test 4.3.4 {",
          "166:   sqlite3 db3 test.db",
          "167:   sqlite3 db2 test.db2",
          "168:   execsql { DROP INDEX i1 } db3",
          "169:   execsql { DROP INDEX i2 } db2",
          "170: } {}",
          "171: do_execsql_test 4.3.5 { SELECT * FROM pragma_index_info('i1') }",
          "172: do_execsql_test 4.3.6 { SELECT * FROM pragma_index_info('i2') }",
          "174: do_execsql_test 4.4.0 {",
          "175:   CREATE INDEX main.i1 ON t1(b, c);",
          "176:   CREATE INDEX aux.i2 ON t2(e, f);",
          "177: }",
          "178: do_execsql_test 4.4.1 { SELECT * FROM pragma_index_list('t1') } {0 i1 0 c 0}",
          "179: do_execsql_test 4.4.2 { SELECT * FROM pragma_index_list('t2') } {0 i2 0 c 0}",
          "180: do_test 4.4.3 {",
          "181:   execsql { DROP INDEX i1 } db3",
          "182:   execsql { DROP INDEX i2 } db2",
          "183: } {}",
          "184: do_execsql_test 4.4.5 { SELECT * FROM pragma_index_list('t1') } {}",
          "185: do_execsql_test 4.4.6 { SELECT * FROM pragma_index_list('t2') } {}",
          "187: do_execsql_test 4.5.0 {",
          "188:   CREATE UNIQUE INDEX main.i1 ON t1(a);",
          "189:   CREATE UNIQUE INDEX aux.i2 ON t2(d);",
          "190:   CREATE TABLE main.c1 (a, b, c REFERENCES t1(a));",
          "191:   CREATE TABLE aux.c2 (d, e, r REFERENCES t2(d));",
          "192: }",
          "193: do_execsql_test 4.5.1 { SELECT * FROM pragma_foreign_key_list('c1') } {",
          "194:   0 0 t1 c a {NO ACTION} {NO ACTION} NONE",
          "195: }",
          "196: do_execsql_test 4.5.2 { SELECT * FROM pragma_foreign_key_list('c2') } {",
          "197:   0 0 t2 r d {NO ACTION} {NO ACTION} NONE",
          "198: }",
          "199: do_test 4.5.3 {",
          "200:   execsql { DROP TABLE c1 } db3",
          "201:   execsql { DROP TABLE c2 } db2",
          "202: } {}",
          "203: do_execsql_test 4.5.1 { SELECT * FROM pragma_foreign_key_list('c1') }",
          "204: do_execsql_test 4.5.2 { SELECT * FROM pragma_foreign_key_list('c2') }",
          "206: do_execsql_test 4.6.0 {",
          "207:   CREATE TABLE main.c1 (a, b, c REFERENCES t1(a));",
          "208:   CREATE TABLE aux.c2 (d, e, r REFERENCES t2(d));",
          "209:   INSERT INTO main.c1 VALUES(1, 2, 3);",
          "210:   INSERT INTO aux.c2 VALUES(4, 5, 6);",
          "211: }",
          "212: do_execsql_test 4.6.1 { pragma foreign_key_check('c1') } {",
          "213:   c1 1 t1 0",
          "214: }",
          "215: do_execsql_test 4.6.2 { pragma foreign_key_check('c2') } {",
          "216:   c2 1 t2 0",
          "217: }",
          "218: do_test 4.6.3 {",
          "219:   execsql { DROP TABLE c2 } db2",
          "220: } {}",
          "221: do_execsql_test 4.6.4 { pragma foreign_key_check('c1') } {c1 1 t1 0}",
          "222: do_catchsql_test 4.6.5 {",
          "223:   pragma foreign_key_check('c2')",
          "224: } {1 {no such table: c2}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b28c4e564ab4ac8603f28e662a3a591a40a069b2",
      "candidate_info": {
        "commit_hash": "b28c4e564ab4ac8603f28e662a3a591a40a069b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b28c4e564ab4ac8603f28e662a3a591a40a069b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Minor tweak to patch on this branch to reclaim some cycles.\n\nFossilOrigin-Name: 81eed055de856068109a7e332cca0c3ff1120ebe2bfa5ed6383b165c726e0a7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28aa1702f7f0334abd1b30e7aa48ea3679539b11bfbba32bc9f0d6049cf18a7b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6240:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6241: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6244: #endif",
          "6245:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6246:     }",
          "",
          "[Removed Lines]",
          "6243:       sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "",
          "[Added Lines]",
          "6243:       if( pExpr->y.pFilter ){",
          "6244:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "6245:       }",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   WINDOW win AS (ORDER BY 1);",
          "425: }",
          "429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: execsql_test 4.10 {",
          "428:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "429: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:   set {} {}",
          "894: } {}",
          "896: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "896: do_execsql_test 4.10 {",
          "897:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "898: } {3   3   3   6   6   6}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25050f26206456c62f400bdd95215701095b00a0",
      "candidate_info": {
        "commit_hash": "25050f26206456c62f400bdd95215701095b00a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25050f26206456c62f400bdd95215701095b00a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Use an unsigned integer to count free pages in btree.c:freePage2().\n\nFossilOrigin-Name: 8820408597341344b308277ce6ef41b47c7514d6c613520789b05ee52cbedae8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80704a16f6dbbeacc65fa36a3623df10292a28aeacf9e2c1d2891258479e3b89",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    },
    {
      "candidate_hash": "10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
      "candidate_info": {
        "commit_hash": "10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/malloc.c",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqlite.h.in",
          "src/sqlite3ext.h",
          "src/test1.c",
          "src/treeview.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Add the sqlite3_hard_heap_limit64() interface and the corresponding \"PRAGMA hard_heap_limit=N\" command.\n\nFossilOrigin-Name: b0ccef61a7f92d20228becbf4f997bf0f4e46dad2deaf0896dc63b976ad1dd11",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/malloc.c||src/malloc.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h",
          "src/test1.c||src/test1.c",
          "src/treeview.c||src/treeview.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: #endif",
          "463:   sqlite3_stmt_isexplain,",
          "465: };",
          "",
          "[Removed Lines]",
          "464:   sqlite3_value_frombind",
          "",
          "[Added Lines]",
          "464:   sqlite3_value_frombind,",
          "466:   sqlite3_hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     sqlite3_mutex_leave(mem0.mutex);",
          "92:     return priorLimit;",
          "93:   }",
          "94:   mem0.alarmThreshold = n;",
          "95:   nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "96:   mem0.nearlyFull = (n>0 && n<=nUsed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if( mem0.hardLimit>0 && (n>mem0.hardLimit || n==0) ){",
          "103:     n = mem0.hardLimit;",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   sqlite3_soft_heap_limit64(n);",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){",
          "131:   sqlite3_int64 priorLimit;",
          "132: #ifndef SQLITE_OMIT_AUTOINIT",
          "133:   int rc = sqlite3_initialize();",
          "134:   if( rc ) return -1;",
          "135: #endif",
          "136:   sqlite3_mutex_enter(mem0.mutex);",
          "137:   priorLimit = mem0.hardLimit;",
          "138:   if( n>=0 ){",
          "139:     mem0.hardLimit = n;",
          "140:     if( n<mem0.alarmThreshold || mem0.alarmThreshold==0 ){",
          "141:       mem0.alarmThreshold = n;",
          "142:     }",
          "143:   }",
          "144:   sqlite3_mutex_leave(mem0.mutex);",
          "145:   return priorLimit;",
          "146: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:     if( nUsed >= mem0.alarmThreshold - nFull ){",
          "204:       mem0.nearlyFull = 1;",
          "205:       sqlite3MallocAlarm(nFull);",
          "206:     }else{",
          "207:       mem0.nearlyFull = 0;",
          "208:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:       if( mem0.hardLimit ){",
          "249:         nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "250:         if( nUsed >= mem0.hardLimit - nFull ){",
          "252:           return;",
          "253:         }",
          "254:       }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2064:     break;",
          "2065:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2078:   case PragTyp_HARD_HEAP_LIMIT: {",
          "2079:     sqlite3_int64 N;",
          "2080:     if( zRight && sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK ){",
          "2081:       sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);",
          "2082:       if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);",
          "2083:     }",
          "2084:     returnSingleInt(v, sqlite3_soft_heap_limit64(-1));",
          "2085:     break;",
          "2086:   }",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define PragTyp_FOREIGN_KEY_CHECK             13",
          "22: #define PragTyp_FOREIGN_KEY_LIST              14",
          "23: #define PragTyp_FUNCTION_LIST                 15",
          "",
          "[Removed Lines]",
          "24: #define PragTyp_INCREMENTAL_VACUUM            16",
          "25: #define PragTyp_INDEX_INFO                    17",
          "26: #define PragTyp_INDEX_LIST                    18",
          "27: #define PragTyp_INTEGRITY_CHECK               19",
          "28: #define PragTyp_JOURNAL_MODE                  20",
          "29: #define PragTyp_JOURNAL_SIZE_LIMIT            21",
          "30: #define PragTyp_LOCK_PROXY_FILE               22",
          "31: #define PragTyp_LOCKING_MODE                  23",
          "32: #define PragTyp_PAGE_COUNT                    24",
          "33: #define PragTyp_MMAP_SIZE                     25",
          "34: #define PragTyp_MODULE_LIST                   26",
          "35: #define PragTyp_OPTIMIZE                      27",
          "36: #define PragTyp_PAGE_SIZE                     28",
          "37: #define PragTyp_PRAGMA_LIST                   29",
          "38: #define PragTyp_SECURE_DELETE                 30",
          "39: #define PragTyp_SHRINK_MEMORY                 31",
          "40: #define PragTyp_SOFT_HEAP_LIMIT               32",
          "41: #define PragTyp_SYNCHRONOUS                   33",
          "42: #define PragTyp_TABLE_INFO                    34",
          "43: #define PragTyp_TEMP_STORE                    35",
          "44: #define PragTyp_TEMP_STORE_DIRECTORY          36",
          "45: #define PragTyp_THREADS                       37",
          "46: #define PragTyp_WAL_AUTOCHECKPOINT            38",
          "47: #define PragTyp_WAL_CHECKPOINT                39",
          "48: #define PragTyp_ACTIVATE_EXTENSIONS           40",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "52: #define PragTyp_STATS                         44",
          "",
          "[Added Lines]",
          "24: #define PragTyp_HARD_HEAP_LIMIT               16",
          "25: #define PragTyp_INCREMENTAL_VACUUM            17",
          "26: #define PragTyp_INDEX_INFO                    18",
          "27: #define PragTyp_INDEX_LIST                    19",
          "28: #define PragTyp_INTEGRITY_CHECK               20",
          "29: #define PragTyp_JOURNAL_MODE                  21",
          "30: #define PragTyp_JOURNAL_SIZE_LIMIT            22",
          "31: #define PragTyp_LOCK_PROXY_FILE               23",
          "32: #define PragTyp_LOCKING_MODE                  24",
          "33: #define PragTyp_PAGE_COUNT                    25",
          "34: #define PragTyp_MMAP_SIZE                     26",
          "35: #define PragTyp_MODULE_LIST                   27",
          "36: #define PragTyp_OPTIMIZE                      28",
          "37: #define PragTyp_PAGE_SIZE                     29",
          "38: #define PragTyp_PRAGMA_LIST                   30",
          "39: #define PragTyp_SECURE_DELETE                 31",
          "40: #define PragTyp_SHRINK_MEMORY                 32",
          "41: #define PragTyp_SOFT_HEAP_LIMIT               33",
          "42: #define PragTyp_SYNCHRONOUS                   34",
          "43: #define PragTyp_TABLE_INFO                    35",
          "44: #define PragTyp_TEMP_STORE                    36",
          "45: #define PragTyp_TEMP_STORE_DIRECTORY          37",
          "46: #define PragTyp_THREADS                       38",
          "47: #define PragTyp_WAL_AUTOCHECKPOINT            39",
          "48: #define PragTyp_WAL_CHECKPOINT                40",
          "49: #define PragTyp_ACTIVATE_EXTENSIONS           41",
          "50: #define PragTyp_HEXKEY                        42",
          "51: #define PragTyp_KEY                           43",
          "52: #define PragTyp_LOCK_STATUS                   44",
          "53: #define PragTyp_STATS                         45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319: #endif",
          "320: #endif",
          "321: #if defined(SQLITE_HAS_CODEC)",
          "322:  {/* zName:     */ \"hexkey\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:  {/* zName:     */ \"hard_heap_limit\",",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6089: sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6103: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:   int (*stmt_isexplain)(sqlite3_stmt*);",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "325: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   sqlite3_int64 (*hard_heap_limit64)(sqlite3_int64);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "616: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "619: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define sqlite3_hard_heap_limit64      sqlite3_api->hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5477:   return TCL_OK;",
          "5478: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5487: static int SQLITE_TCLAPI test_hard_heap_limit(",
          "5488:   void * clientData,",
          "5489:   Tcl_Interp *interp,",
          "5490:   int objc,",
          "5491:   Tcl_Obj *CONST objv[]",
          "5492: ){",
          "5493:   sqlite3_int64 amt;",
          "5494:   Tcl_WideInt N = -1;",
          "5495:   if( objc!=1 && objc!=2 ){",
          "5496:     Tcl_WrongNumArgs(interp, 1, objv, \"?N?\");",
          "5497:     return TCL_ERROR;",
          "5498:   }",
          "5499:   if( objc==2 ){",
          "5500:     if( Tcl_GetWideIntFromObj(interp, objv[1], &N) ) return TCL_ERROR;",
          "5501:   }",
          "5502:   amt = sqlite3_hard_heap_limit64(N);",
          "5503:   Tcl_SetObjResult(interp, Tcl_NewWideIntObj(amt));",
          "5504:   return TCL_OK;",
          "5505: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7880:      { \"sqlite3_db_filename\",           test_db_filename,        0},",
          "7881:      { \"sqlite3_db_readonly\",           test_db_readonly,        0},",
          "7882:      { \"sqlite3_soft_heap_limit\",       test_soft_heap_limit,    0},",
          "7883:      { \"sqlite3_thread_cleanup\",        test_thread_cleanup,     0},",
          "7884:      { \"sqlite3_pager_refcounts\",       test_pager_refcounts,    0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7910:      { \"sqlite3_soft_heap_limit64\",     test_soft_heap_limit,    0},",
          "7911:      { \"sqlite3_hard_heap_limit64\",     test_hard_heap_limit,    0},",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     va_start(ap, zFormat);",
          "67:     sqlite3_str_vappendf(&acc, zFormat, ap);",
          "68:     va_end(ap);",
          "70:     sqlite3_str_append(&acc, \"\\n\", 1);",
          "71:   }",
          "72:   sqlite3StrAccumFinish(&acc);",
          "",
          "[Removed Lines]",
          "69:     assert( acc.nChar>0 );",
          "",
          "[Added Lines]",
          "69:     assert( acc.nChar>0 || acc.accError );",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:   NAME: soft_heap_limit",
          "406:   FLAG: Result0",
          "408:   NAME: threads",
          "409:   FLAG: Result0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:   NAME: hard_heap_limit",
          "409:   FLAG: Result0",
          "",
          "---------------"
        ]
      }
    }
  ]
}