{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a31d3554c5daaff3c9e8d411879c6185b75073a0",
      "candidate_info": {
        "commit_hash": "a31d3554c5daaff3c9e8d411879c6185b75073a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a31d3554c5daaff3c9e8d411879c6185b75073a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Revise the VDBE comments for NULL-scan so that they also work make sense when reading a NULLS FIRST plan.\n\nFossilOrigin-Name: bfe793780fa6fc7a1e7d0ee60606dda272985de9573887dca118e9510fc609f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1383680d927d7d703933be7653c0019199845e7f7e82bcc76d9ca3808093e9d8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1691:       }",
          "1692:       if( regBignull ){",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 1, regBignull);",
          "1695:       }",
          "1697:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "",
          "[Removed Lines]",
          "1694:         VdbeComment((v, \"NULL-scan needed flag\"));",
          "",
          "[Added Lines]",
          "1694:         VdbeComment((v, \"NULL-scan pass ctr\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1769:       if( regBignull ){",
          "1771:         sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1773:         VdbeCoverage(v);",
          "1774:       }",
          "1775:       op = aEndOp[bRev*2 + endEq];",
          "",
          "[Removed Lines]",
          "1772:         VdbeComment((v, \"If NULL-scan active\"));",
          "",
          "[Added Lines]",
          "1772:         VdbeComment((v, \"If NULL-scan 2nd pass\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1786:       assert( bSeekPastNull+bStopAtNull==1 );",
          "1787:       assert( nConstraint+bSeekPastNull>0 );",
          "1788:       sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1790:       VdbeCoverage(v);",
          "1791:       op = aEndOp[bRev*2 + bSeekPastNull];",
          "1792:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "",
          "[Removed Lines]",
          "1789:       VdbeComment((v, \"If NULL-scan pending\"));",
          "",
          "[Added Lines]",
          "1789:       VdbeComment((v, \"If NULL-scan 1st pass\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e385d33a296bd9cfbb2fbb97a31420dfe6017ef1",
      "candidate_info": {
        "commit_hash": "e385d33a296bd9cfbb2fbb97a31420dfe6017ef1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e385d33a296bd9cfbb2fbb97a31420dfe6017ef1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pcache1.c"
        ],
        "message": "Ensure all bytes of the PgHdr1 structure are initialized. This avoids a valgrind error when running corruptI.test.\n\nFossilOrigin-Name: a505e34d4ec31159a4508ec827fcffed0cf3bd5ea5ef0ac293016da02367a53a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0e6249cb958a40ead0edf6e75a2c46e8657db3d358c5fe78a9dc0fa5ed7ad929",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c"
        ]
      }
    },
    {
      "candidate_hash": "244edd01d32b4081086982d5f3c5a93b7a2b6f18",
      "candidate_info": {
        "commit_hash": "244edd01d32b4081086982d5f3c5a93b7a2b6f18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/244edd01d32b4081086982d5f3c5a93b7a2b6f18",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fkey8.test"
        ],
        "message": "Add test cases for the fix on this branch.\n\nFossilOrigin-Name: 2e31abe0ae5937a8ce10179e0ae045ee4c5ed8b7e2622ab41243226c6d3f5425",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fkey8.test||test/fkey8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3f1c8051648a341db4dffad66d3b1f9980d8a2b314cb0ce879cb2a10d1779b84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fkey8.test||test/fkey8.test": [
          "File: test/fkey8.test -> test/fkey8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   INSERT OR REPLACE INTO t1 VALUES(20000, 20000);",
          "198: }",
          "200: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: #-------------------------------------------------------------------------",
          "201: reset_db",
          "202: do_execsql_test 5.0 {",
          "203:   PRAGMA foreign_keys = true;",
          "204:   CREATE TABLE parent(",
          "205:     p TEXT PRIMARY KEY",
          "206:   );",
          "207:   CREATE TABLE child(",
          "208:     c INTEGER UNIQUE,",
          "209:     FOREIGN KEY(c) REFERENCES parent(p) DEFERRABLE INITIALLY DEFERRED",
          "210:   );",
          "211:   BEGIN;",
          "212:     INSERT INTO child VALUES(123);",
          "213:     INSERT INTO parent VALUES('123');",
          "214:   COMMIT;",
          "215: }",
          "216: do_execsql_test 5.1 {",
          "217:   PRAGMA integrity_check;",
          "218: } {ok}",
          "220: do_execsql_test 5.2 {",
          "221:   INSERT INTO parent VALUES(1200);",
          "222:   BEGIN;",
          "223:     INSERT INTO child VALUES(456);",
          "224:     UPDATE parent SET p = '456' WHERE p=1200;",
          "225:   COMMIT;",
          "226: }",
          "227: do_execsql_test 5.3 {",
          "228:   PRAGMA integrity_check;",
          "229: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "346f4e264a13b9bf27d4692d8a84224274ee47b3",
      "candidate_info": {
        "commit_hash": "346f4e264a13b9bf27d4692d8a84224274ee47b3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/346f4e264a13b9bf27d4692d8a84224274ee47b3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in"
        ],
        "message": "Change the name of the parameter table in the CLI to \"sqlite_parameters\". Doing so involves adding SQLITE_DBCONFIG_WRITABLE_SCHEMA and allowing the creation of tables whose names begin with \"sqlite_\" and that are indexed while writable_schema is on.\n\nFossilOrigin-Name: 24ef3844692debc2db7b1d427f5dcf4050481a8c7f71c3b516766b819ecab587",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c80b004cae71aaf820a31dba80c100ed162ef5bae845fb4535ff4d3be407500",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3154:   assert( pParse->nErr==0 );",
          "3155:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "3156:        && db->init.busy==0",
          "3157: #if SQLITE_USER_AUTHENTICATION",
          "3158:        && sqlite3UserAuthTable(pTab->zName)==0",
          "3159: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3157:        && pTblName!=0",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:         { SQLITE_DBCONFIG_TRIGGER_EQP,           SQLITE_TriggerEQP     },",
          "844:         { SQLITE_DBCONFIG_RESET_DATABASE,        SQLITE_ResetDatabase  },",
          "845:         { SQLITE_DBCONFIG_DEFENSIVE,             SQLITE_Defensive      },",
          "846:       };",
          "847:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2748: }",
          "2754: static void bind_table_init(ShellState *p){",
          "2755:   sqlite3_exec(p->db,",
          "2757:     \"  key TEXT PRIMARY KEY,\\n\"",
          "2758:     \"  value ANY\\n\"",
          "2759:     \") WITHOUT ROWID;\",",
          "2760:     0, 0, 0);",
          "2761: }",
          "",
          "[Removed Lines]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "2756:     \"CREATE TABLE IF NOT EXISTS temp.[\" BIND_PARAM_TABLE \"](\\n\"",
          "",
          "[Added Lines]",
          "2751: #define BIND_PARAM_TABLE \"sqlite_parameters\"",
          "2755:   int wrSchema = 0;",
          "2756:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "2757:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "2759:     \"CREATE TABLE IF NOT EXISTS temp.\" BIND_PARAM_TABLE \"(\\n\"",
          "2764:   sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2786:   }",
          "2787:   rc = sqlite3_prepare_v2(pArg->db,",
          "2789:           \" WHERE key=?1\", -1, &pQ, 0);",
          "2790:   if( rc || pQ==0 ) return;",
          "2791:   for(i=1; i<=nVar; i++){",
          "",
          "[Removed Lines]",
          "2788:           \"SELECT value FROM temp.\\\"\" BIND_PARAM_TABLE \"\\\"\"",
          "",
          "[Added Lines]",
          "2792:           \"SELECT value FROM temp.\" BIND_PARAM_TABLE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7144:     if( nArg==2 && strcmp(azArg[1],\"clear\")==0 ){",
          "7146:                    0, 0, 0);",
          "7147:     }else",
          "",
          "[Removed Lines]",
          "7145:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.[\" BIND_PARAM_TABLE \"];\",",
          "",
          "[Added Lines]",
          "7149:       int wrSchema = 0;",
          "7150:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, -1, &wrSchema);",
          "7151:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, 1, 0);",
          "7152:       sqlite3_exec(p->db, \"DROP TABLE IF EXISTS temp.\" BIND_PARAM_TABLE \";\",",
          "7154:       sqlite3_db_config(p->db, SQLITE_DBCONFIG_WRITABLE_SCHEMA, wrSchema, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7155:       int len = 0;",
          "7156:       rx = sqlite3_prepare_v2(p->db,",
          "7157:              \"SELECT max(length(key)) \"",
          "7159:       if( rx==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7160:         len = sqlite3_column_int(pStmt, 0);",
          "7161:         if( len>40 ) len = 40;",
          "",
          "[Removed Lines]",
          "7158:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "7166:              \"FROM temp.\" BIND_PARAM_TABLE \";\", -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7165:       if( len ){",
          "7166:         rx = sqlite3_prepare_v2(p->db,",
          "7167:              \"SELECT key, quote(value) \"",
          "7169:         while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7170:           utf8_printf(p->out, \"%-*s %s\\n\", len, sqlite3_column_text(pStmt,0),",
          "7171:                       sqlite3_column_text(pStmt,1));",
          "",
          "[Removed Lines]",
          "7168:              \"FROM temp.[\" BIND_PARAM_TABLE \"];\", -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "7176:              \"FROM temp.\" BIND_PARAM_TABLE \";\", -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7196:       const char *zValue = azArg[3];",
          "7197:       bind_table_init(p);",
          "7198:       zSql = sqlite3_mprintf(",
          "7200:                   \"VALUES(%Q,%s);\", zKey, zValue);",
          "7201:       if( zSql==0 ) shell_out_of_memory();",
          "7202:       pStmt = 0;",
          "",
          "[Removed Lines]",
          "7199:                   \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "",
          "[Added Lines]",
          "7207:                   \"REPLACE INTO temp.\" BIND_PARAM_TABLE \"(key,value)\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7206:         sqlite3_finalize(pStmt);",
          "7207:         pStmt = 0;",
          "7208:         zSql = sqlite3_mprintf(",
          "7210:                    \"VALUES(%Q,%Q);\", zKey, zValue);",
          "7211:         if( zSql==0 ) shell_out_of_memory();",
          "7212:         rx = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "",
          "[Removed Lines]",
          "7209:                    \"REPLACE INTO temp.[\" BIND_PARAM_TABLE \"](key,value)\"",
          "",
          "[Added Lines]",
          "7217:                    \"REPLACE INTO temp.\" BIND_PARAM_TABLE \"(key,value)\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7229:     if( nArg==3 && strcmp(azArg[1],\"unset\")==0 ){",
          "7230:       char *zSql = sqlite3_mprintf(",
          "7232:       if( zSql==0 ) shell_out_of_memory();",
          "7233:       sqlite3_exec(p->db, zSql, 0, 0, 0);",
          "7234:       sqlite3_free(zSql);",
          "",
          "[Removed Lines]",
          "7231:           \"DELETE FROM temp.[\" BIND_PARAM_TABLE \"] WHERE key=%Q\", azArg[2]);",
          "",
          "[Added Lines]",
          "7239:           \"DELETE FROM temp.\" BIND_PARAM_TABLE \" WHERE key=%Q\", azArg[2]);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "04ab586bf3959da012113b399f09013afe553503",
      "candidate_info": {
        "commit_hash": "04ab586bf3959da012113b399f09013afe553503",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04ab586bf3959da012113b399f09013afe553503",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Very slightly smaller and faster.\n\nFossilOrigin-Name: 27798f17f567ad065f8a99effcb287bc241df7b450330ef890d192c70528e62b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bf8c1b2b7a5960c282e543b9c293686dccff272512d08865f4600fb58238b4f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:   if( v && pParse->nErr==0 && !db->mallocFailed ){",
          "231:     sqlite3VdbeMakeReady(v, pParse);",
          "232:     pParse->rc = SQLITE_DONE;",
          "233:   }else{",
          "",
          "[Removed Lines]",
          "230:     if( pParse->pAinc!=0 && pParse->nTab==0 ) pParse->nTab = 1;",
          "",
          "[Added Lines]",
          "230:     assert( pParse->pAinc==0 || pParse->nTab>0 );",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:     aOp[7].p2 = memId+2;",
          "320:     aOp[7].p1 = memId;",
          "321:     aOp[10].p2 = memId;",
          "322:   }",
          "323: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     if( pParse->nTab==0 ) pParse->nTab = 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}