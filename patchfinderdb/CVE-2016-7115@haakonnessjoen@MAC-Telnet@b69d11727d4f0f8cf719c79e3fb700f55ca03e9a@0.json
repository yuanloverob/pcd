{
  "cve_id": "CVE-2016-7115",
  "cve_desc": "Buffer overflow in the handle_packet function in mactelnet.c in the client in MAC-Telnet 0.4.3 and earlier allows remote TELNET servers to execute arbitrary code via a long string in an MT_CPTYPE_PASSSALT control packet.",
  "repo": "haakonnessjoen/MAC-Telnet",
  "patch_hash": "b69d11727d4f0f8cf719c79e3fb700f55ca03e9a",
  "patch_info": {
    "commit_hash": "b69d11727d4f0f8cf719c79e3fb700f55ca03e9a",
    "repo": "haakonnessjoen/MAC-Telnet",
    "commit_url": "https://github.com/haakonnessjoen/MAC-Telnet/commit/b69d11727d4f0f8cf719c79e3fb700f55ca03e9a",
    "files": [
      "mactelnet.c",
      "mactelnetd.c",
      "protocol.c"
    ],
    "message": "Merge pull request #20 from eyalitki/master\n\n2nd round security fixes from eyalitki",
    "before_after_code_files": [
      "mactelnet.c||mactelnet.c",
      "mactelnetd.c||mactelnetd.c",
      "protocol.c||protocol.c"
    ]
  },
  "patch_diff": {
    "mactelnet.c||mactelnet.c": [
      "File: mactelnet.c -> mactelnet.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "97: static int keepalive_counter = 0;",
      "100: static char username[MT_MNDP_MAX_STRING_SIZE];",
      "101: static char password[MT_MNDP_MAX_STRING_SIZE];",
      "102: static char nonpriv_username[MT_MNDP_MAX_STRING_SIZE];",
      "",
      "[Removed Lines]",
      "99: static unsigned char pass_salt[17];",
      "",
      "[Added Lines]",
      "99: static unsigned char pass_salt[16];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:  char *terminal = getenv(\"TERM\");",
      "213:  char md5data[100];",
      "214:  unsigned char md5sum[17];",
      "216:  md5_state_t state;",
      "218: #if defined(__linux__) && defined(_POSIX_MEMLOCK_RANGE)",
      "",
      "[Removed Lines]",
      "215:  int plen;",
      "",
      "[Added Lines]",
      "215:  int plen, act_pass_len;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "220:  mlock(md5sum, sizeof(md5data));",
      "221: #endif",
      "224:  md5data[0] = 0;",
      "230:  md5_init(&state);",
      "232:  md5_finish(&state, (md5_byte_t *)md5sum + 1);",
      "233:  md5sum[0] = 0;",
      "",
      "[Removed Lines]",
      "225:  strncpy(md5data + 1, password, 82);",
      "226:  md5data[83] = '\\0';",
      "227:  memcpy(md5data + 1 + strlen(password), pass_salt, 16);",
      "231:  md5_append(&state, (const md5_byte_t *)md5data, strlen(password) + 17);",
      "",
      "[Added Lines]",
      "224:  act_pass_len = strnlen(password, 82);",
      "228:  memcpy(md5data + 1, password, act_pass_len);",
      "230:  memcpy(md5data + 1 + act_pass_len, pass_salt, 16);",
      "234:  md5_append(&state, (const md5_byte_t *)md5data, 1 + act_pass_len + 16);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "314:    if (cpkt.cptype == MT_CPTYPE_PASSSALT) {",
      "316:     send_auth(username, password);",
      "317:    }",
      "",
      "[Removed Lines]",
      "315:     memcpy(pass_salt, cpkt.data, cpkt.length);",
      "",
      "[Added Lines]",
      "319:     if (cpkt.length != 16) {",
      "320:      fprintf(stderr, _(\"Invalid salt length: %d (instead of 16) received from server %s\\n\"), cpkt.length, ether_ntoa((struct ether_addr *)dstmac));",
      "321:     }",
      "322:     memcpy(pass_salt, cpkt.data, 16);",
      "",
      "---------------"
    ],
    "mactelnetd.c||mactelnetd.c": [
      "File: mactelnetd.c -> mactelnetd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "407:  char md5data[100];",
      "408:  struct mt_credentials *user;",
      "409:  char *slavename;",
      "412:  read_userfile();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "410:  int act_pass_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:   }",
      "422: #endif",
      "425:   md5data[0] = 0;",
      "430:   md5_init(&state);",
      "432:   md5_finish(&state, (md5_byte_t *)md5sum + 1);",
      "433:   md5sum[0] = 0;",
      "",
      "[Removed Lines]",
      "426:   strncpy(md5data + 1, user->password, 82);",
      "427:   memcpy(md5data + 1 + strlen(user->password), curconn->pass_salt, 16);",
      "431:   md5_append(&state, (const md5_byte_t *)md5data, strlen(user->password) + 17);",
      "",
      "[Added Lines]",
      "426:   act_pass_len = strlen(user->password);",
      "427:   act_pass_len = act_pass_len <= 82 ? act_pass_len : 82;",
      "431:   memcpy(md5data + 1, user->password, act_pass_len);",
      "432:   memcpy(md5data + 1 + act_pass_len, curconn->pass_salt, 16);",
      "436:   md5_append(&state, (const md5_byte_t *)md5data, 1 + act_pass_len + 16);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "635:    memcpy(curconn->terminal_type, cpkt.data, act_size = (cpkt.length > 30 - 1 ? 30 - 1 : cpkt.length));",
      "636:    curconn->terminal_type[act_size] = 0;",
      "640: #if defined(__linux__) && defined(_POSIX_MEMLOCK_RANGE)",
      "641:    mlock(curconn->trypassword, 17);",
      "",
      "[Removed Lines]",
      "638:   } else if (cpkt.cptype == MT_CPTYPE_PASSWORD) {",
      "",
      "[Added Lines]",
      "643:   } else if (cpkt.cptype == MT_CPTYPE_PASSWORD && cpkt.length == 17) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "651:    }",
      "653:   } else {",
      "655:   }",
      "",
      "[Removed Lines]",
      "654:    syslog(LOG_WARNING, _(\"(%d) Unhandeled control packet type: %d\"), curconn->seskey, cpkt.cptype);",
      "",
      "[Added Lines]",
      "659:    syslog(LOG_WARNING, _(\"(%d) Unhandeled control packet type: %d, length: %d\"), curconn->seskey, cpkt.cptype, cpkt.length);",
      "",
      "---------------"
    ],
    "protocol.c||protocol.c": [
      "File: protocol.c -> protocol.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:  unsigned char *data = packet->data + packet->size;",
      "85:  unsigned int act_size = data_len + (cptype == MT_CPTYPE_PLAINDATA ? 0 : MT_CPHEADER_LEN);",
      "89:   fprintf(stderr, _(\"add_control_packet: ERROR, too large packet. Exceeds %d bytes\\n\"), MT_PACKET_LEN);",
      "90:   return -1;",
      "",
      "[Removed Lines]",
      "88:  if (packet->size + act_size > MT_PACKET_LEN) {",
      "",
      "[Added Lines]",
      "89:  if (act_size > MT_PACKET_LEN - packet->size) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "149: }",
      "151: int add_packetdata(struct mt_packet *packet, unsigned char *data, unsigned short length) {",
      "153:   fprintf(stderr, _(\"add_control_packet: ERROR, too large packet. Exceeds %d bytes\\n\"), MT_PACKET_LEN);",
      "154:   return -1;",
      "155:  }",
      "",
      "[Removed Lines]",
      "152:  if (packet->size + length > MT_PACKET_LEN) {",
      "",
      "[Added Lines]",
      "154:  if (length > MT_PACKET_LEN - packet->size) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "272:  unsigned short len = data_len;",
      "276:   fprintf(stderr, _(\"mndp_add_attribute: ERROR, too large packet. Exceeds %d bytes\\n\"), MT_PACKET_LEN);",
      "277:   return -1;",
      "278:  }",
      "",
      "[Removed Lines]",
      "275:  if (packet->size + 4 + data_len > MT_PACKET_LEN) {",
      "",
      "[Added Lines]",
      "277:  if (data_len > MT_PACKET_LEN - 4 - packet->size) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9d946fa173acadcff7c80171d9b1186fab2e8daf",
      "candidate_info": {
        "commit_hash": "9d946fa173acadcff7c80171d9b1186fab2e8daf",
        "repo": "haakonnessjoen/MAC-Telnet",
        "commit_url": "https://github.com/haakonnessjoen/MAC-Telnet/commit/9d946fa173acadcff7c80171d9b1186fab2e8daf",
        "files": [
          "mactelnet.c",
          "mactelnetd.c",
          "protocol.c"
        ],
        "message": "2nd round security fixes\n\nSome more security fixes after a second round of examination.",
        "before_after_code_files": [
          "mactelnet.c||mactelnet.c",
          "mactelnetd.c||mactelnetd.c",
          "protocol.c||protocol.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/haakonnessjoen/MAC-Telnet/pull/20"
        ],
        "olp_code_files": {
          "patch": [
            "mactelnet.c||mactelnet.c",
            "mactelnetd.c||mactelnetd.c",
            "protocol.c||protocol.c"
          ],
          "candidate": [
            "mactelnet.c||mactelnet.c",
            "mactelnetd.c||mactelnetd.c",
            "protocol.c||protocol.c"
          ]
        }
      },
      "candidate_diff": {
        "mactelnet.c||mactelnet.c": [
          "File: mactelnet.c -> mactelnet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97: static int keepalive_counter = 0;",
          "100: static char username[MT_MNDP_MAX_STRING_SIZE];",
          "101: static char password[MT_MNDP_MAX_STRING_SIZE];",
          "102: static char nonpriv_username[MT_MNDP_MAX_STRING_SIZE];",
          "",
          "[Removed Lines]",
          "99: static unsigned char pass_salt[17];",
          "",
          "[Added Lines]",
          "99: static unsigned char pass_salt[16];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:  char *terminal = getenv(\"TERM\");",
          "213:  char md5data[100];",
          "214:  unsigned char md5sum[17];",
          "216:  md5_state_t state;",
          "218: #if defined(__linux__) && defined(_POSIX_MEMLOCK_RANGE)",
          "",
          "[Removed Lines]",
          "215:  int plen;",
          "",
          "[Added Lines]",
          "215:  int plen, act_pass_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  mlock(md5sum, sizeof(md5data));",
          "221: #endif",
          "224:  md5data[0] = 0;",
          "230:  md5_init(&state);",
          "232:  md5_finish(&state, (md5_byte_t *)md5sum + 1);",
          "233:  md5sum[0] = 0;",
          "",
          "[Removed Lines]",
          "225:  strncpy(md5data + 1, password, 82);",
          "226:  md5data[83] = '\\0';",
          "227:  memcpy(md5data + 1 + strlen(password), pass_salt, 16);",
          "231:  md5_append(&state, (const md5_byte_t *)md5data, strlen(password) + 17);",
          "",
          "[Added Lines]",
          "224:  act_pass_len = strnlen(password, 82);",
          "228:  memcpy(md5data + 1, password, act_pass_len);",
          "230:  memcpy(md5data + 1 + act_pass_len, pass_salt, 16);",
          "234:  md5_append(&state, (const md5_byte_t *)md5data, 1 + act_pass_len + 16);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "314:    if (cpkt.cptype == MT_CPTYPE_PASSSALT) {",
          "316:     send_auth(username, password);",
          "317:    }",
          "",
          "[Removed Lines]",
          "315:     memcpy(pass_salt, cpkt.data, cpkt.length);",
          "",
          "[Added Lines]",
          "319:     if (cpkt.length != 16) {",
          "320:      fprintf(stderr, _(\"Invalid salt length: %d (instead of 16) received from server %s\\n\"), cpkt.length, ether_ntoa((struct ether_addr *)dstmac));",
          "321:     }",
          "322:     memcpy(pass_salt, cpkt.data, 16);",
          "",
          "---------------"
        ],
        "mactelnetd.c||mactelnetd.c": [
          "File: mactelnetd.c -> mactelnetd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:  char md5data[100];",
          "408:  struct mt_credentials *user;",
          "409:  char *slavename;",
          "412:  read_userfile();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:  int act_pass_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:   }",
          "422: #endif",
          "425:   md5data[0] = 0;",
          "430:   md5_init(&state);",
          "432:   md5_finish(&state, (md5_byte_t *)md5sum + 1);",
          "433:   md5sum[0] = 0;",
          "",
          "[Removed Lines]",
          "426:   strncpy(md5data + 1, user->password, 82);",
          "427:   memcpy(md5data + 1 + strlen(user->password), curconn->pass_salt, 16);",
          "431:   md5_append(&state, (const md5_byte_t *)md5data, strlen(user->password) + 17);",
          "",
          "[Added Lines]",
          "426:   act_pass_len = strlen(user->password);",
          "427:   act_pass_len = act_pass_len <= 82 ? act_pass_len : 82;",
          "431:   memcpy(md5data + 1, user->password, act_pass_len);",
          "432:   memcpy(md5data + 1 + act_pass_len, curconn->pass_salt, 16);",
          "436:   md5_append(&state, (const md5_byte_t *)md5data, 1 + act_pass_len + 16);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "635:    memcpy(curconn->terminal_type, cpkt.data, act_size = (cpkt.length > 30 - 1 ? 30 - 1 : cpkt.length));",
          "636:    curconn->terminal_type[act_size] = 0;",
          "640: #if defined(__linux__) && defined(_POSIX_MEMLOCK_RANGE)",
          "641:    mlock(curconn->trypassword, 17);",
          "",
          "[Removed Lines]",
          "638:   } else if (cpkt.cptype == MT_CPTYPE_PASSWORD) {",
          "",
          "[Added Lines]",
          "643:   } else if (cpkt.cptype == MT_CPTYPE_PASSWORD && cpkt.length == 17) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "651:    }",
          "653:   } else {",
          "655:   }",
          "",
          "[Removed Lines]",
          "654:    syslog(LOG_WARNING, _(\"(%d) Unhandeled control packet type: %d\"), curconn->seskey, cpkt.cptype);",
          "",
          "[Added Lines]",
          "659:    syslog(LOG_WARNING, _(\"(%d) Unhandeled control packet type: %d, length: %d\"), curconn->seskey, cpkt.cptype, cpkt.length);",
          "",
          "---------------"
        ],
        "protocol.c||protocol.c": [
          "File: protocol.c -> protocol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:  unsigned char *data = packet->data + packet->size;",
          "85:  unsigned int act_size = data_len + (cptype == MT_CPTYPE_PLAINDATA ? 0 : MT_CPHEADER_LEN);",
          "89:   fprintf(stderr, _(\"add_control_packet: ERROR, too large packet. Exceeds %d bytes\\n\"), MT_PACKET_LEN);",
          "90:   return -1;",
          "",
          "[Removed Lines]",
          "88:  if (packet->size + act_size > MT_PACKET_LEN) {",
          "",
          "[Added Lines]",
          "89:  if (act_size > MT_PACKET_LEN - packet->size) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: }",
          "151: int add_packetdata(struct mt_packet *packet, unsigned char *data, unsigned short length) {",
          "153:   fprintf(stderr, _(\"add_control_packet: ERROR, too large packet. Exceeds %d bytes\\n\"), MT_PACKET_LEN);",
          "154:   return -1;",
          "155:  }",
          "",
          "[Removed Lines]",
          "152:  if (packet->size + length > MT_PACKET_LEN) {",
          "",
          "[Added Lines]",
          "154:  if (length > MT_PACKET_LEN - packet->size) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "272:  unsigned short len = data_len;",
          "276:   fprintf(stderr, _(\"mndp_add_attribute: ERROR, too large packet. Exceeds %d bytes\\n\"), MT_PACKET_LEN);",
          "277:   return -1;",
          "278:  }",
          "",
          "[Removed Lines]",
          "275:  if (packet->size + 4 + data_len > MT_PACKET_LEN) {",
          "",
          "[Added Lines]",
          "277:  if (data_len > MT_PACKET_LEN - 4 - packet->size) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}