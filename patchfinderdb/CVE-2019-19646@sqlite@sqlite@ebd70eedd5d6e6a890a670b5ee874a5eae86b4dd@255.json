{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
      "candidate_info": {
        "commit_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Fix a problem with processing CTEs that use a WINDOW clause.\n\nFossilOrigin-Name: ca564d4b5b19fe56842a04f31bb61352e6ae9d72a7e7634eb27ebcf5f670545a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01d71b947a7422081d5c7d6ac2c91b9c936dc41926ab58c92f4a088a64e8c051",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2215:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "2216:     if( pNew ){",
          "2217:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "2218:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "2219:       pNew->pFunc = p->pFunc;",
          "2220:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2218:       pNew->zBase = sqlite3DbStrDup(db, p->zBase);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2227:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2228:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2229:       pNew->pOwner = pOwner;",
          "2230:     }",
          "2231:   }",
          "2232:   return pNew;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2231:       pNew->bImplicitFrame = p->bImplicitFrame;",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   }",
          "203: }",
          "205: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #-------------------------------------------------------------------------",
          "206: reset_db",
          "207: do_execsql_test 4.0 {",
          "208:   CREATE TABLE x(a);",
          "209:   INSERT INTO x VALUES(1);",
          "210:   INSERT INTO x VALUES(2);",
          "211: }",
          "213: do_execsql_test 4.1 {",
          "214:   WITH y AS (",
          "215:       SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION BY a)",
          "216:   )",
          "217:   SELECT * FROM y;",
          "218: } {",
          "219:   1 1",
          "220: }",
          "222: do_catchsql_test 4.2 {",
          "223:   WITH y AS (",
          "224:     SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION",
          "225:   BY fake_column))",
          "226:   SELECT * FROM y;",
          "227: } {1 {no such column: fake_column}}",
          "229: do_catchsql_test 4.3 {",
          "230:   SELECT 1 WINDOW win AS (PARTITION BY fake_column);",
          "231: } {0 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdf4cf0b900792a0565e743f98707a493f490961",
      "candidate_info": {
        "commit_hash": "bdf4cf0b900792a0565e743f98707a493f490961",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bdf4cf0b900792a0565e743f98707a493f490961",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/fuzzdata8.db"
        ],
        "message": "Ensure that sqlite3RenameExprUnmap() does an unmap of the result set alias names in subqueries when ALTER TABLE fails because of a syntax error in a trigger.\n\nFossilOrigin-Name: d3b6f1665f6fb5fc5cf1c0864d779d0b24746ada530f755c7b6ff34766bd2188",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23e49f9984f74f242602c6e56bfc645585c7c86bcdd585c322ab0d8e20958d86",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "739:     }",
          "740:   }",
          "741:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "735:     Parse *pParse = pWalker->pParse;",
          "736:     int i;",
          "737:     for(i=0; i<p->pSrc->nSrc; i++){",
          "738:       sqlite3RenameTokenRemap(pParse, 0, (void*)p->pSrc->a[0].zName);",
          "",
          "[Added Lines]",
          "734:   Parse *pParse = pWalker->pParse;",
          "735:   int i;",
          "736:   if( ALWAYS(p->pEList) ){",
          "737:     ExprList *pList = p->pEList;",
          "738:     for(i=0; i<pList->nExpr; i++){",
          "739:       if( pList->a[i].zName ){",
          "740:         sqlite3RenameTokenRemap(pParse, 0, (void*)pList->a[i].zName);",
          "741:       }",
          "742:     }",
          "743:   }",
          "745:     SrcList *pSrc = p->pSrc;",
          "746:     for(i=0; i<pSrc->nSrc; i++){",
          "747:       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1641f11f4c365aa17e2415d1f8018e3b66df0628",
      "candidate_info": {
        "commit_hash": "1641f11f4c365aa17e2415d1f8018e3b66df0628",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1641f11f4c365aa17e2415d1f8018e3b66df0628",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/dbfuzz001.test"
        ],
        "message": "Fix a problem in sqlite3BtreeDelete() in which deleting an entry from a corrupt database can leave a btree page with zero cells.\n\nFossilOrigin-Name: 682053d1e603c21b8085c39db618a39b23ec8d2c4d822fd19634db0e03038ea2",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1190: TESTFIXTURE_FLAGS += -DSQLITE_DEFAULT_PAGE_SIZE=1024",
          "1191: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_STMTVTAB",
          "1192: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "1194: TESTFIXTURE_SRC0 = $(TESTSRC2) libsqlite3.la",
          "1195: TESTFIXTURE_SRC1 = sqlite3.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1193: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DESERIALIZE",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2298: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "2299: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "2300: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_JSON1=1",
          "2301: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) $(TEST_CCONV_OPTS)",
          "2303: TESTFIXTURE_SRC0 = $(TESTEXT) $(TESTSRC2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2301: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f583c53f3b7318c69f6e235934d97ef9493278feeab0837217076d7d071c35b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   return",
          "20: }",
          "22: do_test dbfuzz001-100 {",
          "23:   sqlite3 db {}",
          "24:   db deserialize [decode_hexdb {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: # In the following database file, there is 384 bytes of free space",
          "23: # on page 8 that does not appear on the freeblock list.",
          "24: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:   db eval {PRAGMA integrity_check}",
          "168: } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "170: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: # The DELETE query below deletes the very last cell from page 8.",
          "174: # Prior to a certain fix to sqlite3BtreeDelete() and because of the",
          "175: # corruption to the freeblock list on page 8, this would fail to",
          "176: # cause a rebalance operation, which would leave the btree in a weird",
          "177: # state that would lead to segfaults and or assertion faults.",
          "178: #",
          "179: do_execsql_test dbfuzz001-110 {",
          "180:   DELETE FROM t3 WHERE x IS NOT NULL AND +rowid=6;",
          "181: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bedf84c17bb5b5a811cd395892c1f89f5f458b70",
      "candidate_info": {
        "commit_hash": "bedf84c17bb5b5a811cd395892c1f89f5f458b70",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bedf84c17bb5b5a811cd395892c1f89f5f458b70",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Fix an assert() that [28196d89] caused to fail.\n\nFossilOrigin-Name: 8fb0c6d5a38e77aa4c5f394fb8af1b0c7c6a4790e932aabc213a3078ee9acaf6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 28196d894ac9fad9d8f877c7bf17ec9d299d12acdcc942f9ea0783777b14fdc5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: #ifdef SQLITE_DEBUG",
          "623:   int nLookaside = 0;",
          "625:     nLookaside = sqlite3LookasideUsed(db, 0);",
          "626:   }",
          "627: #endif",
          "",
          "[Removed Lines]",
          "624:   if( db && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "[Added Lines]",
          "628:   if( db && !db->mallocFailed && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "660107f35eb9f8e74ea26f6a66c6c05d2cb1f83e",
      "candidate_info": {
        "commit_hash": "660107f35eb9f8e74ea26f6a66c6c05d2cb1f83e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/660107f35eb9f8e74ea26f6a66c6c05d2cb1f83e",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/symbols.sh"
        ],
        "message": "Update tool/symbols.sh to ignore symbols from sessions and rebaser and to not try to compile with ICU which is not available on all platforms.\n\nFossilOrigin-Name: 0bab4ece6e81916d0f7255a8e553b8ca040cb8a96ab21e294212e232119f8ddc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/symbols.sh||tool/symbols.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0ada58e9303d53aba8bdc37abe5904aa40e91f80e247eb51cb1192387b0d661c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/symbols.sh||tool/symbols.sh": [
          "File: tool/symbols.sh -> tool/symbols.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #",
          "6: make sqlite3.c",
          "9: gcc -c -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_RTREE \\",
          "10:   -DSQLITE_ENABLE_MEMORY_MANAGEMENT -DSQLITE_ENABLE_STAT3 \\",
          "11:   -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_ENABLE_UNLOCK_NOTIFY \\",
          "12:   -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_ENABLE_ATOMIC_WRITE \\",
          "14:   sqlite3.c",
          "15: nm sqlite3.o | grep ' [TD] ' | sort -k 3",
          "20: echo '****** Dependencies of the core. No extensions. No OS interface *******'",
          "21: gcc -c -DSQLITE_ENABLE_MEMORY_MANAGEMENT -DSQLITE_ENABLE_STAT3 \\",
          "",
          "[Removed Lines]",
          "8: echo '****** Exported symbols from a build including RTREE, FTS4 & ICU ******'",
          "13:   -DSQLITE_ENABLE_ICU -DSQLITE_ENABLE_PREUPDATE_HOOK -DSQLITE_ENABLE_SESSION \\",
          "17: echo '****** Surplus symbols from a build including RTREE, FTS4 & ICU ******'",
          "18: nm sqlite3.o | grep ' [TD] ' | grep -v ' .*sqlite3_'",
          "",
          "[Added Lines]",
          "8: echo '****** Exported symbols from a build including RTREE, FTS4 & FTS5 ******'",
          "13:   -DSQLITE_ENABLE_PREUPDATE_HOOK -DSQLITE_ENABLE_SESSION \\",
          "14:   -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_GEOPOLY \\",
          "18: echo '****** Surplus symbols from a build including RTREE, FTS4 & FTS5 ******'",
          "19: nm sqlite3.o | grep ' [TD] ' |",
          "20:    egrep -v ' .*sqlite3(session|rebaser|changeset|changegroup)?_'",
          "",
          "---------------"
        ]
      }
    }
  ]
}