{
  "cve_id": "CVE-2014-3572",
  "cve_desc": "The ssl3_get_key_exchange function in s3_clnt.c in OpenSSL before 0.9.8zd, 1.0.0 before 1.0.0p, and 1.0.1 before 1.0.1k allows remote SSL servers to conduct ECDHE-to-ECDH downgrade attacks and trigger a loss of forward secrecy by omitting the ServerKeyExchange message.",
  "repo": "openssl/openssl",
  "patch_hash": "b15f8769644b00ef7283521593360b7b2135cb63",
  "patch_info": {
    "commit_hash": "b15f8769644b00ef7283521593360b7b2135cb63",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/b15f8769644b00ef7283521593360b7b2135cb63",
    "files": [
      "CHANGES",
      "ssl/s3_clnt.c"
    ],
    "message": "ECDH downgrade bug fix.\n\nFix bug where an OpenSSL client would accept a handshake using an\nephemeral ECDH ciphersuites with the server key exchange message omitted.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\n\nCVE-2014-3572\nReviewed-by: Matt Caswell <matt@openssl.org>",
    "before_after_code_files": [
      "ssl/s3_clnt.c||ssl/s3_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1376:  int encoded_pt_len = 0;",
      "1377: #endif",
      "1381:  n=s->method->ssl_get_message(s,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1379:  EVP_MD_CTX_init(&md_ctx);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1386:   &ok);",
      "1387:  if (!ok) return((int)n);",
      "1389:  if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)",
      "1390:   {",
      "1391: #ifndef OPENSSL_NO_PSK",
      "1393:      omitted if no identity hint is sent. Set",
      "1394:      session->sess_cert anyway to avoid problems",
      "1397:    {",
      "1398:    s->session->sess_cert=ssl_sess_cert_new();",
      "1399:    if (s->ctx->psk_identity_hint)",
      "",
      "[Removed Lines]",
      "1396:   if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)",
      "",
      "[Added Lines]",
      "1391:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
      "1399:   if (alg_k & (SSL_kDHE|SSL_kECDHE))",
      "1400:    {",
      "1401:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
      "1402:    al = SSL_AD_UNEXPECTED_MESSAGE;",
      "1403:    goto f_err;",
      "1404:    }",
      "1410:   if (alg_k & SSL_kPSK)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1439:  param_len=0;",
      "1442:  alg_a=s->s3->tmp.new_cipher->algorithm_auth;",
      "1445:  al=SSL_AD_DECODE_ERROR;",
      "",
      "[Removed Lines]",
      "1441:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
      "1443:  EVP_MD_CTX_init(&md_ctx);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ef28c6d6767a6a30df5add36171894c96628fe98",
      "candidate_info": {
        "commit_hash": "ef28c6d6767a6a30df5add36171894c96628fe98",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ef28c6d6767a6a30df5add36171894c96628fe98",
        "files": [
          "CHANGES",
          "ssl/s3_clnt.c"
        ],
        "message": "ECDH downgrade bug fix.\n\nFix bug where an OpenSSL client would accept a handshake using an\nephemeral ECDH ciphersuites with the server key exchange message omitted.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\n\nCVE-2014-3572\nReviewed-by: Matt Caswell <matt@openssl.org>\n\n(cherry picked from commit b15f8769644b00ef7283521593360b7b2135cb63)",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1277:  int encoded_pt_len = 0;",
          "1278: #endif",
          "1282:  n=s->method->ssl_get_message(s,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1280:  EVP_MD_CTX_init(&md_ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1287:   &ok);",
          "1288:  if (!ok) return((int)n);",
          "1290:  if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)",
          "1291:   {",
          "1292: #ifndef OPENSSL_NO_PSK",
          "1294:      omitted if no identity hint is sent. Set",
          "1295:      session->sess_cert anyway to avoid problems",
          "1298:    {",
          "1299:    s->session->sess_cert=ssl_sess_cert_new();",
          "1300:    if (s->ctx->psk_identity_hint)",
          "",
          "[Removed Lines]",
          "1297:   if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)",
          "",
          "[Added Lines]",
          "1292:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
          "1300:   if (alg_k & (SSL_kEDH|SSL_kEECDH))",
          "1301:    {",
          "1302:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1303:    al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1304:    goto f_err;",
          "1305:    }",
          "1311:   if (alg_k & SSL_kPSK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1340:  param_len=0;",
          "1343:  alg_a=s->s3->tmp.new_cipher->algorithm_auth;",
          "1346:  al=SSL_AD_DECODE_ERROR;",
          "",
          "[Removed Lines]",
          "1342:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
          "1344:  EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e42a2abadc90664e2615dc63ba7f79cf163f780a",
      "candidate_info": {
        "commit_hash": "e42a2abadc90664e2615dc63ba7f79cf163f780a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e42a2abadc90664e2615dc63ba7f79cf163f780a",
        "files": [
          "CHANGES",
          "ssl/s3_clnt.c"
        ],
        "message": "ECDH downgrade bug fix.\n\nFix bug where an OpenSSL client would accept a handshake using an\nephemeral ECDH ciphersuites with the server key exchange message omitted.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\n\nCVE-2014-3572\nReviewed-by: Matt Caswell <matt@openssl.org>\n\n(cherry picked from commit b15f8769644b00ef7283521593360b7b2135cb63)\n\nConflicts:\n\tCHANGES\n\tssl/s3_clnt.c",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1124:  if (!ok) return((int)n);",
          "1126:  if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)",
          "1127:   {",
          "1128:   s->s3->tmp.reuse_message=1;",
          "1129:   return(1);",
          "1130:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1126:  alg=s->s3->tmp.new_cipher->algorithms;",
          "1127:  EVP_MD_CTX_init(&md_ctx);",
          "1135:   if (alg & (SSL_kEDH|SSL_kECDHE))",
          "1136:    {",
          "1137:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1138:    al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1139:    goto f_err;",
          "1140:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1164:  param_len=0;",
          "1168:  al=SSL_AD_DECODE_ERROR;",
          "1169: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "1165:  alg=s->s3->tmp.new_cipher->algorithms;",
          "1166:  EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4aaf1e493cb86efa64f6a486a27d38da6bce23af",
      "candidate_info": {
        "commit_hash": "4aaf1e493cb86efa64f6a486a27d38da6bce23af",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4aaf1e493cb86efa64f6a486a27d38da6bce23af",
        "files": [
          "CHANGES",
          "ssl/s3_clnt.c"
        ],
        "message": "ECDH downgrade bug fix.\n\nFix bug where an OpenSSL client would accept a handshake using an\nephemeral ECDH ciphersuites with the server key exchange message omitted.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\n\nCVE-2014-3572\nReviewed-by: Matt Caswell <matt@openssl.org>\n\n(cherry picked from commit b15f8769644b00ef7283521593360b7b2135cb63)",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1363:  int encoded_pt_len = 0;",
          "1364: #endif",
          "1368:  n=s->method->ssl_get_message(s,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1366:  EVP_MD_CTX_init(&md_ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1373:   &ok);",
          "1374:  if (!ok) return((int)n);",
          "1376:  if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)",
          "1377:   {",
          "1378: #ifndef OPENSSL_NO_PSK",
          "1380:      omitted if no identity hint is sent. Set",
          "1381:      session->sess_cert anyway to avoid problems",
          "1384:    {",
          "1385:    s->session->sess_cert=ssl_sess_cert_new();",
          "1386:    if (s->ctx->psk_identity_hint)",
          "",
          "[Removed Lines]",
          "1383:   if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)",
          "",
          "[Added Lines]",
          "1378:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
          "1386:   if (alg_k & (SSL_kDHE|SSL_kECDHE))",
          "1387:    {",
          "1388:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1389:    al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1390:    goto f_err;",
          "1391:    }",
          "1397:   if (alg_k & SSL_kPSK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1426:  param_len=0;",
          "1429:  alg_a=s->s3->tmp.new_cipher->algorithm_auth;",
          "1432:  al=SSL_AD_DECODE_ERROR;",
          "",
          "[Removed Lines]",
          "1428:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
          "1430:  EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "802a070bb6452dd9df49e550e0f3b16777e5232b",
      "candidate_info": {
        "commit_hash": "802a070bb6452dd9df49e550e0f3b16777e5232b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/802a070bb6452dd9df49e550e0f3b16777e5232b",
        "files": [
          "CHANGES",
          "ssl/s3_clnt.c"
        ],
        "message": "ECDH downgrade bug fix.\n\nFix bug where an OpenSSL client would accept a handshake using an\nephemeral ECDH ciphersuites with the server key exchange message omitted.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\n\nCVE-2014-3572\nReviewed-by: Matt Caswell <matt@openssl.org>\n\n(cherry picked from commit b15f8769644b00ef7283521593360b7b2135cb63)\n\nConflicts:\n\tCHANGES",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1191:  int encoded_pt_len = 0;",
          "1192: #endif",
          "1196:  n=s->method->ssl_get_message(s,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:  EVP_MD_CTX_init(&md_ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1201:   &ok);",
          "1202:  if (!ok) return((int)n);",
          "1204:  if (s->s3->tmp.message_type != SSL3_MT_SERVER_KEY_EXCHANGE)",
          "1205:   {",
          "1206: #ifndef OPENSSL_NO_PSK",
          "1208:      omitted if no identity hint is sent. Set",
          "1209:      session->sess_cert anyway to avoid problems",
          "1212:    {",
          "1213:    s->session->sess_cert=ssl_sess_cert_new();",
          "1214:    if (s->ctx->psk_identity_hint)",
          "",
          "[Removed Lines]",
          "1211:   if (s->s3->tmp.new_cipher->algorithm_mkey & SSL_kPSK)",
          "",
          "[Added Lines]",
          "1206:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
          "1214:   if (alg_k & (SSL_kEDH|SSL_kEECDH))",
          "1215:    {",
          "1216:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE);",
          "1217:    al = SSL_AD_UNEXPECTED_MESSAGE;",
          "1218:    goto f_err;",
          "1219:    }",
          "1225:   if (alg_k & SSL_kPSK)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1254:  param_len=0;",
          "1257:  alg_a=s->s3->tmp.new_cipher->algorithm_auth;",
          "1260:  al=SSL_AD_DECODE_ERROR;",
          "",
          "[Removed Lines]",
          "1256:  alg_k=s->s3->tmp.new_cipher->algorithm_mkey;",
          "1258:  EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
      "candidate_info": {
        "commit_hash": "8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "PACKETise ServerKeyExchange\n\nProcess the ServerKeyExchange message using the PACKET API\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444:     unsigned char *q, md_buf[EVP_MAX_MD_SIZE * 2];",
          "1445: #endif",
          "1446:     EVP_MD_CTX md_ctx;",
          "1450:     EVP_PKEY *pkey = NULL;",
          "1451:     const EVP_MD *md = NULL;",
          "1452: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "1447:     unsigned char *param, *p;",
          "1448:     int al, j, ok;",
          "1449:     long i, param_len, n, alg_k, alg_a;",
          "",
          "[Added Lines]",
          "1447:     int al, j, verify_ret, ok;",
          "1448:     unsigned int i;",
          "1449:     long n, alg_k, alg_a;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1460:     BN_CTX *bn_ctx = NULL;",
          "1461:     EC_POINT *srvr_ecpoint = NULL;",
          "1462:     int curve_nid = 0;",
          "1464: #endif",
          "1466:     EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Removed Lines]",
          "1463:     int encoded_pt_len = 0;",
          "",
          "[Added Lines]",
          "1463:     unsigned int encoded_pt_len = 0;",
          "1465:     PACKET pkt;",
          "1466:     unsigned char *data, *param;",
          "1467:     size_t startparam, endparam;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1493:         return (1);",
          "1494:     }",
          "1498: #ifndef OPENSSL_NO_RSA",
          "1499:     RSA_free(s->s3->peer_rsa_tmp);",
          "",
          "[Removed Lines]",
          "1496:     param = p = (unsigned char *)s->init_msg;",
          "",
          "[Added Lines]",
          "1499:     if (!PACKET_buf_init(&pkt, s->init_msg, n)",
          "1500:             || !PACKET_get_bookmark(&pkt, &startparam)) {",
          "1501:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1502:             al = SSL_AD_INTERNAL_ERROR;",
          "1503:             goto f_err;",
          "1504:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1508:     s->s3->peer_ecdh_tmp = NULL;",
          "1509: #endif",
          "1514:     alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "1516:     al = SSL_AD_DECODE_ERROR;",
          "",
          "[Removed Lines]",
          "1512:     param_len = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1520:     if (alg_k & SSL_PSK) {",
          "1524:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1525:             goto f_err;",
          "1526:         }",
          "",
          "[Removed Lines]",
          "1522:         param_len = 2;",
          "1523:         if (param_len > n) {",
          "1527:         n2s(p, i);",
          "",
          "[Added Lines]",
          "1527:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1537:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_DATA_LENGTH_TOO_LONG);",
          "1538:             goto f_err;",
          "1539:         }",
          "1541:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1542:                    SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH);",
          "1543:             goto f_err;",
          "1544:         }",
          "1547:         OPENSSL_free(s->session->psk_identity_hint);",
          "1548:         if (i != 0) {",
          "1550:             if (s->session->psk_identity_hint == NULL) {",
          "1551:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1552:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "1540:         if (i > n - param_len) {",
          "1545:         param_len += i;",
          "1549:             s->session->psk_identity_hint = BUF_strndup((char *)p, i);",
          "",
          "[Added Lines]",
          "1543:         if (PACKET_remaining(&pkt) < i) {",
          "1551:             unsigned char *hint = NULL;",
          "1553:             if (!PACKET_get_bytes(&pkt, &hint, i)) {",
          "1554:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1555:                 goto f_err;",
          "1556:             }",
          "1557:             s->session->psk_identity_hint = BUF_strndup((char *)hint, i);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1555:         } else {",
          "1556:             s->session->psk_identity_hint = NULL;",
          "1557:         }",
          "1561:     }",
          "",
          "[Removed Lines]",
          "1559:         p += i;",
          "1560:         n -= param_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1567: #ifndef OPENSSL_NO_SRP",
          "1568:     if (alg_k & SSL_kSRP) {",
          "1571:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1572:             goto f_err;",
          "1573:         }",
          "1577:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_N_LENGTH);",
          "1578:             goto f_err;",
          "1579:         }",
          "1583:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1584:             goto err;",
          "1585:         }",
          "1589:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1590:             goto f_err;",
          "1591:         }",
          "1597:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_G_LENGTH);",
          "1598:             goto f_err;",
          "1599:         }",
          "1603:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1604:             goto err;",
          "1605:         }",
          "1609:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1610:             goto f_err;",
          "1611:         }",
          "1618:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_S_LENGTH);",
          "1619:             goto f_err;",
          "1620:         }",
          "1624:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1625:             goto err;",
          "1626:         }",
          "1630:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1631:             goto f_err;",
          "1632:         }",
          "1638:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_B_LENGTH);",
          "1639:             goto f_err;",
          "1640:         }",
          "1644:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1645:             goto err;",
          "1646:         }",
          "1650:         if (!srp_verify_server_param(s, &al)) {",
          "1651:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_PARAMETERS);",
          "",
          "[Removed Lines]",
          "1569:         param_len = 2;",
          "1570:         if (param_len > n) {",
          "1574:         n2s(p, i);",
          "1576:         if (i > n - param_len) {",
          "1580:         param_len += i;",
          "1582:         if ((s->srp_ctx.N = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1586:         p += i;",
          "1588:         if (2 > n - param_len) {",
          "1592:         param_len += 2;",
          "1594:         n2s(p, i);",
          "1596:         if (i > n - param_len) {",
          "1600:         param_len += i;",
          "1602:         if ((s->srp_ctx.g = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1606:         p += i;",
          "1608:         if (1 > n - param_len) {",
          "1612:         param_len += 1;",
          "1614:         i = (unsigned int)(p[0]);",
          "1615:         p++;",
          "1617:         if (i > n - param_len) {",
          "1621:         param_len += i;",
          "1623:         if ((s->srp_ctx.s = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1627:         p += i;",
          "1629:         if (2 > n - param_len) {",
          "1633:         param_len += 2;",
          "1635:         n2s(p, i);",
          "1637:         if (i > n - param_len) {",
          "1641:         param_len += i;",
          "1643:         if ((s->srp_ctx.B = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1647:         p += i;",
          "1648:         n -= param_len;",
          "",
          "[Added Lines]",
          "1574:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1579:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1584:         if ((s->srp_ctx.N = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1589:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1594:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1599:         if ((s->srp_ctx.g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1604:         if (!PACKET_get_1(&pkt, &i)) {",
          "1609:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1614:         if ((s->srp_ctx.s = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1619:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1624:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1629:         if ((s->srp_ctx.B = BN_bin2bn(data, i, NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1670:             goto err;",
          "1671:         }",
          "1675:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1676:             goto f_err;",
          "1677:         }",
          "1681:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_MODULUS_LENGTH);",
          "1682:             goto f_err;",
          "1683:         }",
          "1687:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1688:             goto err;",
          "1689:         }",
          "1693:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1694:             goto f_err;",
          "1695:         }",
          "1701:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_E_LENGTH);",
          "1702:             goto f_err;",
          "1703:         }",
          "1707:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1708:             goto err;",
          "1709:         }",
          "1714:         if (alg_a & SSL_aRSA)",
          "",
          "[Removed Lines]",
          "1673:         param_len = 2;",
          "1674:         if (param_len > n) {",
          "1678:         n2s(p, i);",
          "1680:         if (i > n - param_len) {",
          "1684:         param_len += i;",
          "1686:         if ((rsa->n = BN_bin2bn(p, i, rsa->n)) == NULL) {",
          "1690:         p += i;",
          "1692:         if (2 > n - param_len) {",
          "1696:         param_len += 2;",
          "1698:         n2s(p, i);",
          "1700:         if (i > n - param_len) {",
          "1704:         param_len += i;",
          "1706:         if ((rsa->e = BN_bin2bn(p, i, rsa->e)) == NULL) {",
          "1710:         p += i;",
          "1711:         n -= param_len;",
          "",
          "[Added Lines]",
          "1657:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1662:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1667:         if ((rsa->n = BN_bin2bn(data, i, rsa->n)) == NULL) {",
          "1672:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1677:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1682:         if ((rsa->e = BN_bin2bn(data, i, rsa->e)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1737:             goto err;",
          "1738:         }",
          "1742:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1743:             goto f_err;",
          "1744:         }",
          "1748:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_LENGTH);",
          "1749:             goto f_err;",
          "1750:         }",
          "1754:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1755:             goto err;",
          "1756:         }",
          "1759:         if (BN_is_zero(dh->p)) {",
          "1760:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_VALUE);",
          "1761:             goto f_err;",
          "1762:         }",
          "1766:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1767:             goto f_err;",
          "1768:         }",
          "1774:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_LENGTH);",
          "1775:             goto f_err;",
          "1776:         }",
          "1780:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1781:             goto err;",
          "1782:         }",
          "1785:         if (BN_is_zero(dh->g)) {",
          "1786:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_VALUE);",
          "1787:             goto f_err;",
          "1788:         }",
          "1791:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1792:             goto f_err;",
          "1793:         }",
          "1799:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_LENGTH);",
          "1800:             goto f_err;",
          "1801:         }",
          "1805:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1806:             goto err;",
          "1807:         }",
          "1811:         if (BN_is_zero(dh->pub_key)) {",
          "1812:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_VALUE);",
          "",
          "[Removed Lines]",
          "1740:         param_len = 2;",
          "1741:         if (param_len > n) {",
          "1745:         n2s(p, i);",
          "1747:         if (i > n - param_len) {",
          "1751:         param_len += i;",
          "1753:         if ((dh->p = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1757:         p += i;",
          "1765:         if (2 > n - param_len) {",
          "1769:         param_len += 2;",
          "1771:         n2s(p, i);",
          "1773:         if (i > n - param_len) {",
          "1777:         param_len += i;",
          "1779:         if ((dh->g = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1783:         p += i;",
          "1790:         if (2 > n - param_len) {",
          "1794:         param_len += 2;",
          "1796:         n2s(p, i);",
          "1798:         if (i > n - param_len) {",
          "1802:         param_len += i;",
          "1804:         if ((dh->pub_key = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1808:         p += i;",
          "1809:         n -= param_len;",
          "",
          "[Added Lines]",
          "1714:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1719:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1724:         if ((dh->p = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1734:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1739:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1744:         if ((dh->g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1754:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1759:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1764:         if ((dh->pub_key = BN_bin2bn(data, i, NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1853:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1854:             goto f_err;",
          "1855:         }",
          "",
          "[Removed Lines]",
          "1851:         param_len = 4;",
          "1852:         if (param_len > n) {",
          "",
          "[Added Lines]",
          "1808:         if (!PACKET_get_bytes(&pkt, &data, 3)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1861:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_CURVE);",
          "1862:             goto f_err;",
          "1863:         }",
          "1866:             al = SSL_AD_INTERNAL_ERROR;",
          "1867:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1868:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "",
          "[Removed Lines]",
          "1860:         if (!tls1_check_curve(s, p, 3)) {",
          "1865:         if ((curve_nid = tls1_ec_curve_id2nid(*(p + 2))) == 0) {",
          "",
          "[Added Lines]",
          "1816:         if (!tls1_check_curve(s, data, 3)) {",
          "1821:         if ((curve_nid = tls1_ec_curve_id2nid(*(data + 2))) == 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1890:             goto f_err;",
          "1891:         }",
          "1896:         if (((srvr_ecpoint = EC_POINT_new(group)) == NULL) ||",
          "1897:             ((bn_ctx = BN_CTX_new()) == NULL)) {",
          "",
          "[Removed Lines]",
          "1893:         p += 3;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1899:             goto err;",
          "1900:         }",
          "1906:             (EC_POINT_oct2point(group, srvr_ecpoint,",
          "1908:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_ECPOINT);",
          "1909:             goto f_err;",
          "1910:         }",
          "",
          "[Removed Lines]",
          "1903:         p += 1;",
          "1905:         if ((encoded_pt_len > n - param_len) ||",
          "1907:                                 p, encoded_pt_len, bn_ctx) == 0)) {",
          "1911:         param_len += encoded_pt_len;",
          "1913:         n -= param_len;",
          "1914:         p += encoded_pt_len;",
          "",
          "[Added Lines]",
          "1856:         if (!PACKET_get_1(&pkt, &encoded_pt_len)) {",
          "1857:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1858:             goto f_err;",
          "1859:         }",
          "1861:         if (!PACKET_get_bytes(&pkt, &data, encoded_pt_len) ||",
          "1863:                                 data, encoded_pt_len, bn_ctx) == 0)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1942:     }",
          "1948:     if (pkey != NULL) {",
          "1949:         if (SSL_USE_SIGALGS(s)) {",
          "1950:             int rv;",
          "1952:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1953:                 goto f_err;",
          "1954:             }",
          "1956:             if (rv == -1)",
          "1957:                 goto err;",
          "1958:             else if (rv == 0) {",
          "",
          "[Removed Lines]",
          "1951:             if (2 > n) {",
          "1955:             rv = tls12_check_peer_sigalg(&md, s, p, pkey);",
          "",
          "[Added Lines]",
          "1897:     if (!PACKET_get_bookmark(&pkt, &endparam)) {",
          "1898:         SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1899:         goto f_err;",
          "1900:     }",
          "1906:             if (!PACKET_get_bytes(&pkt, &data, 2)) {",
          "1910:             rv = tls12_check_peer_sigalg(&md, s, data, pkey);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1961: #ifdef SSL_DEBUG",
          "1962:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "1963: #endif",
          "1966:         } else",
          "1967:             md = EVP_sha1();",
          "1970:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1971:             goto f_err;",
          "1972:         }",
          "1975:         j = EVP_PKEY_size(pkey);",
          "1982:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_SIGNATURE_LENGTH);",
          "1983:             goto f_err;",
          "1984:         }",
          "1985: #ifndef OPENSSL_NO_RSA",
          "1986:         if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s)) {",
          "1987:             int num;",
          "",
          "[Removed Lines]",
          "1964:             p += 2;",
          "1965:             n -= 2;",
          "1969:         if (2 > n) {",
          "1973:         n2s(p, i);",
          "1974:         n -= 2;",
          "1980:         if ((i != n) || (n > j) || (n <= 0)) {",
          "",
          "[Added Lines]",
          "1922:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1927:         if (j < 0) {",
          "1928:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1929:             goto f_err;",
          "1930:         }",
          "1935:         if (i > (unsigned int)j",
          "1936:                 || !PACKET_get_bytes(&pkt, &data, i)",
          "1937:                 || PACKET_remaining(&pkt) != 0) {",
          "1942:         if (!PACKET_goto_bookmark(&pkt, startparam)",
          "1943:                 || !PACKET_get_bytes(&pkt, &param, endparam - startparam)) {",
          "1944:             al = SSL_AD_INTERNAL_ERROR;",
          "1945:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1946:             goto f_err;",
          "1947:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1997:                                  SSL3_RANDOM_SIZE);",
          "1998:                 EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1999:                                  SSL3_RANDOM_SIZE);",
          "2001:                 EVP_DigestFinal_ex(&md_ctx, q, &size);",
          "2002:                 q += size;",
          "2003:                 j += size;",
          "2004:             }",
          "2007:                 al = SSL_AD_DECRYPT_ERROR;",
          "2008:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_DECRYPT);",
          "2009:                 goto f_err;",
          "2010:             }",
          "2013:                 al = SSL_AD_DECRYPT_ERROR;",
          "2014:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Removed Lines]",
          "2000:                 EVP_DigestUpdate(&md_ctx, param, param_len);",
          "2005:             i = RSA_verify(NID_md5_sha1, md_buf, j, p, n, pkey->pkey.rsa);",
          "2006:             if (i < 0) {",
          "2011:             if (i == 0) {",
          "",
          "[Added Lines]",
          "1963:                 EVP_DigestUpdate(&md_ctx, param, endparam - startparam);",
          "1968:             verify_ret =",
          "1969:                 RSA_verify(NID_md5_sha1, md_buf, j, data, i, pkey->pkey.rsa);",
          "1970:             if (verify_ret < 0) {",
          "1975:             if (verify_ret == 0) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2022:                              SSL3_RANDOM_SIZE);",
          "2023:             EVP_VerifyUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "2024:                              SSL3_RANDOM_SIZE);",
          "2028:                 al = SSL_AD_DECRYPT_ERROR;",
          "2029:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Removed Lines]",
          "2025:             EVP_VerifyUpdate(&md_ctx, param, param_len);",
          "2026:             if (EVP_VerifyFinal(&md_ctx, p, (int)n, pkey) <= 0) {",
          "",
          "[Added Lines]",
          "1989:             EVP_VerifyUpdate(&md_ctx, param, endparam - startparam);",
          "1990:             if (EVP_VerifyFinal(&md_ctx, data, (int)i, pkey) <= 0) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2040:             goto err;",
          "2041:         }",
          "2044:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);",
          "2045:             goto f_err;",
          "2046:         }",
          "",
          "[Removed Lines]",
          "2043:         if (n != 0) {",
          "",
          "[Added Lines]",
          "2007:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}