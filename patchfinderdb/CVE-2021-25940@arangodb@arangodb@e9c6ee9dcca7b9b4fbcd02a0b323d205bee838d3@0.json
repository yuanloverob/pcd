{
  "cve_id": "CVE-2021-25940",
  "cve_desc": "In ArangoDB, versions v3.7.6 through v3.8.3 are vulnerable to Insufficient Session Expiration. When a user\u2019s password is changed by the administrator, the session isn\u2019t invalidated, allowing a malicious user to still be logged in and perform arbitrary actions within the system.",
  "repo": "arangodb/arangodb",
  "patch_hash": "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
  "patch_info": {
    "commit_hash": "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
    "repo": "arangodb/arangodb",
    "commit_url": "https://github.com/arangodb/arangodb/commit/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
    "files": [
      "CHANGELOG",
      "arangod/GeneralServer/AuthenticationFeature.cpp",
      "arangod/GeneralServer/AuthenticationFeature.h",
      "arangod/RestHandler/RestAuthHandler.cpp",
      "arangod/RestHandler/RestAuthHandler.h",
      "arangod/RestServer/ServerFeature.cpp",
      "tests/js/client/server_parameters/test-server-session-timeout.js"
    ],
    "message": "Revive startup parameter `--server.session-timeout` (#14118)\n\nCo-authored-by: Tobias G\u00f6dderz <tobias@arangodb.com>",
    "before_after_code_files": [
      "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp",
      "arangod/GeneralServer/AuthenticationFeature.h||arangod/GeneralServer/AuthenticationFeature.h",
      "arangod/RestHandler/RestAuthHandler.cpp||arangod/RestHandler/RestAuthHandler.cpp",
      "arangod/RestHandler/RestAuthHandler.h||arangod/RestHandler/RestAuthHandler.h",
      "arangod/RestServer/ServerFeature.cpp||arangod/RestServer/ServerFeature.cpp",
      "tests/js/client/server_parameters/test-server-session-timeout.js||tests/js/client/server_parameters/test-server-session-timeout.js"
    ]
  },
  "patch_diff": {
    "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp": [
      "File: arangod/GeneralServer/AuthenticationFeature.cpp -> arangod/GeneralServer/AuthenticationFeature.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:       _authenticationSystemOnly(true),",
      "58:       _localAuthentication(true),",
      "59:       _active(true),",
      "61:   setOptional(false);",
      "62:   startsAfter<application_features::BasicFeaturePhaseServer>();",
      "",
      "[Removed Lines]",
      "60:       _authenticationTimeout(0.0) {",
      "",
      "[Added Lines]",
      "60:       _authenticationTimeout(0.0),",
      "61:       _sessionTimeout(static_cast<double>(1 * std::chrono::hours(1) / std::chrono::seconds(1))) { // 1 hour",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89:       \"--server.authentication-timeout\",",
      "90:       \"timeout for the authentication cache in seconds (0 = indefinitely)\",",
      "91:       new DoubleParameter(&_authenticationTimeout));",
      "93:   options->addOption(\"--server.local-authentication\",",
      "94:                      \"enable authentication using the local user database\",",
      "97:   options->addOption(",
      "98:       \"--server.authentication-system-only\",",
      "",
      "[Removed Lines]",
      "95:                      new BooleanParameter(&_localAuthentication));",
      "",
      "[Added Lines]",
      "94:   options->addOption(\"--server.session-timeout\",",
      "95:                      \"timeout in seconds for web interface JWT sessions\",",
      "96:                      new DoubleParameter(&_sessionTimeout),",
      "97:                      arangodb::options::makeFlags(",
      "98:                        arangodb::options::Flags::DefaultNoComponents,",
      "99:                        arangodb::options::Flags::OnCoordinator,",
      "100:                        arangodb::options::Flags::OnSingle))",
      "101:                      .setIntroducedIn(30900);",
      "105:                      new BooleanParameter(&_localAuthentication),",
      "106:                      arangodb::options::makeFlags(",
      "107:                        arangodb::options::Flags::DefaultNoComponents,",
      "108:                        arangodb::options::Flags::OnCoordinator,",
      "109:                        arangodb::options::Flags::OnSingle));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "102: #ifdef ARANGODB_HAVE_DOMAIN_SOCKETS",
      "103:   options->addOption(\"--server.authentication-unix-sockets\",",
      "104:                      \"authentication for requests via UNIX domain sockets\",",
      "106: #endif",
      "109:   options",
      "110:       ->addOption(\"--server.jwt-secret\",",
      "111:                   \"secret to use when doing jwt authentication\",",
      "",
      "[Removed Lines]",
      "105:                      new BooleanParameter(&_authenticationUnixSockets));",
      "",
      "[Added Lines]",
      "119:                      new BooleanParameter(&_authenticationUnixSockets),",
      "120:                      arangodb::options::makeFlags(",
      "121:                        arangodb::options::Flags::DefaultNoOs,",
      "122:                        arangodb::options::Flags::OsLinux,",
      "123:                        arangodb::options::Flags::OsMac));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "151:       FATAL_ERROR_EXIT();",
      "152:     }",
      "153:   }",
      "155:   if (options->processingResult().touched(\"server.jwt-secret\")) {",
      "156:     LOG_TOPIC(\"1aaae\", WARN, arangodb::Logger::AUTHENTICATION)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:   if (_sessionTimeout <= 1.0) {",
      "173:     LOG_TOPIC(\"85046\", FATAL, arangodb::Logger::AUTHENTICATION)",
      "174:         << \"--server.session-timeout has an invalid value: \" << _sessionTimeout;",
      "175:     FATAL_ERROR_EXIT();",
      "176:   }",
      "",
      "---------------"
    ],
    "arangod/GeneralServer/AuthenticationFeature.h||arangod/GeneralServer/AuthenticationFeature.h": [
      "File: arangod/GeneralServer/AuthenticationFeature.h -> arangod/GeneralServer/AuthenticationFeature.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "73:   std::pair<std::string, std::vector<std::string>> jwtSecrets() const;",
      "74: #endif",
      "77:   [[nodiscard]] Result loadJwtSecretsFromFile();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:   double sessionTimeout() const { return _sessionTimeout; }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:   bool _localAuthentication;",
      "92:   bool _active;",
      "93:   double _authenticationTimeout;",
      "95:   mutable std::mutex _jwtSecretsLock;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96:   double _sessionTimeout;",
      "",
      "---------------"
    ],
    "arangod/RestHandler/RestAuthHandler.cpp||arangod/RestHandler/RestAuthHandler.cpp": [
      "File: arangod/RestHandler/RestAuthHandler.cpp -> arangod/RestHandler/RestAuthHandler.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include <velocypack/Builder.h>",
      "28: #include <velocypack/velocypack-aliases.h>",
      "30: #include \"Basics/StringUtils.h\"",
      "31: #include \"GeneralServer/AuthenticationFeature.h\"",
      "32: #include \"Logger/LogMacros.h\"",
      "33: #include \"Logger/Logger.h\"",
      "34: #include \"Logger/LoggerStream.h\"",
      "36: #include \"Utils/Events.h\"",
      "38: using namespace arangodb;",
      "",
      "[Removed Lines]",
      "35: #include \"Ssl/SslInterface.h\"",
      "",
      "[Added Lines]",
      "30: #include \"Basics/ScopeGuard.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: RestAuthHandler::RestAuthHandler(application_features::ApplicationServer& server,",
      "43:                                  GeneralRequest* request, GeneralResponse* response)",
      "54: RestStatus RestAuthHandler::execute() {",
      "55:   auto const type = _request->requestType();",
      "",
      "[Removed Lines]",
      "44:     : RestVocbaseBaseHandler(server, request, response),",
      "45:       _validFor(60 * 60 * 24 * 30) {}",
      "47: std::string RestAuthHandler::generateJwt(std::string const& username,",
      "48:                                          std::string const& password) {",
      "49:   AuthenticationFeature* af = AuthenticationFeature::instance();",
      "50:   TRI_ASSERT(af != nullptr);",
      "51:   return fuerte::jwt::generateUserToken(af->tokenCache().jwtSecret(), username, _validFor);",
      "52: }",
      "",
      "[Added Lines]",
      "44:     : RestVocbaseBaseHandler(server, request, response) {}",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75:     return badRequest();",
      "76:   }",
      "79:   std::string const password = passwordSlice.copyString();",
      "81:   auth::UserManager* um = AuthenticationFeature::instance()->userManager();",
      "82:   if (um == nullptr) {",
      "83:     std::string msg = \"This server does not support users\";",
      "84:     LOG_TOPIC(\"2e7d4\", ERR, Logger::AUTHENTICATION) << msg;",
      "85:     generateError(rest::ResponseCode::UNAUTHORIZED, TRI_ERROR_HTTP_UNAUTHORIZED, msg);",
      "87:     VPackBuilder resultBuilder;",
      "88:     {",
      "89:       VPackObjectBuilder b(&resultBuilder);",
      "92:     }",
      "95:     generateDocument(resultBuilder.slice(), true, &VPackOptions::Defaults);",
      "96:   } else {",
      "",
      "[Removed Lines]",
      "78:   _username = usernameSlice.copyString();",
      "86:   } else if (um->checkPassword(_username, password)) {",
      "90:       std::string jwt = generateJwt(_username, password);",
      "91:       resultBuilder.add(\"jwt\", VPackValue(jwt));",
      "94:     _isValid = true;",
      "",
      "[Added Lines]",
      "70:   std::string const username = usernameSlice.copyString();",
      "73:   bool isValid = false;",
      "75:   auto guard = scopeGuard([&]() {",
      "76:     try {",
      "77:       if (isValid) {",
      "78:         events::LoggedIn(*_request, username);",
      "79:       } else {",
      "80:         events::CredentialsBad(*_request, username);",
      "81:       }",
      "82:     } catch (...) {",
      "84:     }",
      "85:   });",
      "92:   } else if (um->checkPassword(username, password)) {",
      "96:       resultBuilder.add(\"jwt\", VPackValue(generateJwt(username)));",
      "99:     isValid = true;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "101:   return RestStatus::DONE;",
      "102: }",
      "104: RestStatus RestAuthHandler::badRequest() {",
      "105:   generateError(rest::ResponseCode::BAD, TRI_ERROR_HTTP_BAD_PARAMETER,",
      "106:                 \"invalid JSON\");",
      "107:   return RestStatus::DONE;",
      "108: }",
      "",
      "[Removed Lines]",
      "110: void RestAuthHandler::shutdownExecute(bool isFinalized) noexcept {",
      "111:   try {",
      "112:     if (_isValid) {",
      "113:       events::LoggedIn(*_request, _username);",
      "114:     } else {",
      "115:       events::CredentialsBad(*_request, _username);",
      "116:     }",
      "117:   } catch (...) {",
      "118:   }",
      "119:   RestVocbaseBaseHandler::shutdownExecute(isFinalized);",
      "120: }",
      "",
      "[Added Lines]",
      "109: std::string RestAuthHandler::generateJwt(std::string const& username) const {",
      "110:   AuthenticationFeature* af = AuthenticationFeature::instance();",
      "111:   TRI_ASSERT(af != nullptr);",
      "112:   return fuerte::jwt::generateUserToken(",
      "113:       af->tokenCache().jwtSecret(),",
      "114:       username,",
      "115:       std::chrono::seconds(uint64_t(af->sessionTimeout())));",
      "116: }",
      "",
      "---------------"
    ],
    "arangod/RestHandler/RestAuthHandler.h||arangod/RestHandler/RestAuthHandler.h": [
      "File: arangod/RestHandler/RestAuthHandler.h -> arangod/RestHandler/RestAuthHandler.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:  public:",
      "34:   RestAuthHandler(application_features::ApplicationServer&, GeneralRequest*, GeneralResponse*);",
      "38:  public:",
      "39:   char const* name() const override final { return \"RestAuthHandler\"; }",
      "40:   RequestLane lane() const override final { return RequestLane::CLIENT_SLOW; }",
      "41:   RestStatus execute() override;",
      "44:  private:",
      "45:   RestStatus badRequest();",
      "51: };",
      "52: }  // namespace arangodb",
      "",
      "[Removed Lines]",
      "36:   std::string generateJwt(std::string const&, std::string const&);",
      "42:   void shutdownExecute(bool isFinalized) noexcept override;",
      "47:  private:",
      "48:   std::string _username;",
      "49:   bool _isValid = false;",
      "50:   std::chrono::seconds _validFor;",
      "",
      "[Added Lines]",
      "42:   std::string generateJwt(std::string const& username) const;",
      "",
      "---------------"
    ],
    "arangod/RestServer/ServerFeature.cpp||arangod/RestServer/ServerFeature.cpp": [
      "File: arangod/RestServer/ServerFeature.cpp -> arangod/RestServer/ServerFeature.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:   options->addObsoleteOption(\"--vst.maxsize\", \"maximal size (in bytes) \"",
      "104:                              \"for a VelocyPack chunk\", true);",
      "111:   options->addSection(\"wal\", \"WAL of the MMFiles engine\", \"\", true, true);",
      "112:   options->addObsoleteOption(\"--wal.allow-oversize-entries\",",
      "",
      "[Removed Lines]",
      "106:   options->addObsoleteOption(",
      "107:       \"--server.session-timeout\",",
      "108:       \"timeout of web interface server sessions (in seconds)\", true);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/js/client/server_parameters/test-server-session-timeout.js||tests/js/client/server_parameters/test-server-session-timeout.js": [
      "File: tests/js/client/server_parameters/test-server-session-timeout.js -> tests/js/client/server_parameters/test-server-session-timeout.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: if (getOptions === true) {",
      "30:   return {",
      "31:     'server.session-timeout': '5',",
      "32:     'server.authentication': 'true',",
      "33:     'server.jwt-secret': 'haxxmann',",
      "34:   };",
      "35: }",
      "36: const jsunity = require('jsunity');",
      "37: const request = require('@arangodb/request');",
      "39: function testSuite() {",
      "40:   let baseUrl = function () {",
      "41:     return arango.getEndpoint().replace(/^tcp:/, 'http:').replace(/^ssl:/, 'https:');",
      "42:   };",
      "44:   return {",
      "45:     testSessionTimeout: function() {",
      "46:       let result = request.get(baseUrl() + \"/_api/version\");",
      "48:       assertEqual(401, result.statusCode);",
      "50:       result = request.post({",
      "51:         url: baseUrl() + \"/_open/auth\",",
      "52:         body: {",
      "53:           username: \"root\",",
      "54:           password: \"\"",
      "55:         },",
      "56:         json: true",
      "57:       });",
      "59:       assertEqual(200, result.statusCode);",
      "60:       const jwt = result.json.jwt;",
      "62:       result = request.get({",
      "63:         url: baseUrl() + \"/_api/version\",",
      "64:         auth: {",
      "65:           bearer: jwt,",
      "66:         }",
      "67:       });",
      "70:       assertEqual(200, result.statusCode);",
      "72:       require(\"internal\").sleep(7);",
      "74:       result = request.get({",
      "75:         url: baseUrl() + \"/_api/version\",",
      "76:         auth: {",
      "77:           bearer: jwt,",
      "78:         }",
      "79:       });",
      "82:       assertEqual(401, result.statusCode);",
      "83:     },",
      "84:   };",
      "85: }",
      "87: jsunity.run(testSuite);",
      "88: return jsunity.done();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "50c0da71a6a5284130cba07bb99c4b95d2778c08",
      "candidate_info": {
        "commit_hash": "50c0da71a6a5284130cba07bb99c4b95d2778c08",
        "repo": "arangodb/arangodb",
        "commit_url": "https://github.com/arangodb/arangodb/commit/50c0da71a6a5284130cba07bb99c4b95d2778c08",
        "files": [
          "CHANGELOG",
          "arangod/Auth/TokenCache.h",
          "arangod/Auth/UserManager.cpp",
          "arangod/Auth/UserManager.h",
          "arangod/GeneralServer/AuthenticationFeature.cpp",
          "arangod/GeneralServer/CommTask.cpp",
          "arangod/RestHandler/RestAuthHandler.cpp",
          "arangod/V8Server/v8-vocbase.cpp",
          "js/apps/system/_admin/aardvark/APP/aardvark.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/models/arangoUsers.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/routers/startApp.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/views/footerView.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/views/navigationView.js",
          "js/server/bootstrap/modules/internal.js",
          "lib/Logger/LogMacros.h",
          "lib/Rest/GeneralRequest.h"
        ],
        "message": "Follow-up for APM-79 (#14584)",
        "before_after_code_files": [
          "arangod/Auth/TokenCache.h||arangod/Auth/TokenCache.h",
          "arangod/Auth/UserManager.cpp||arangod/Auth/UserManager.cpp",
          "arangod/Auth/UserManager.h||arangod/Auth/UserManager.h",
          "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp",
          "arangod/GeneralServer/CommTask.cpp||arangod/GeneralServer/CommTask.cpp",
          "arangod/RestHandler/RestAuthHandler.cpp||arangod/RestHandler/RestAuthHandler.cpp",
          "arangod/V8Server/v8-vocbase.cpp||arangod/V8Server/v8-vocbase.cpp",
          "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/models/arangoUsers.js||js/apps/system/_admin/aardvark/APP/frontend/js/models/arangoUsers.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/routers/startApp.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/startApp.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/views/footerView.js||js/apps/system/_admin/aardvark/APP/frontend/js/views/footerView.js",
          "js/apps/system/_admin/aardvark/APP/frontend/js/views/navigationView.js||js/apps/system/_admin/aardvark/APP/frontend/js/views/navigationView.js",
          "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js",
          "lib/Logger/LogMacros.h||liLogger/LogMacros.h",
          "lib/Rest/GeneralRequest.h||liRest/GeneralRequest.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp",
            "arangod/RestHandler/RestAuthHandler.cpp||arangod/RestHandler/RestAuthHandler.cpp"
          ],
          "candidate": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp",
            "arangod/RestHandler/RestAuthHandler.cpp||arangod/RestHandler/RestAuthHandler.cpp"
          ]
        }
      },
      "candidate_diff": {
        "arangod/Auth/TokenCache.h||arangod/Auth/TokenCache.h": [
          "File: arangod/Auth/TokenCache.h -> arangod/Auth/TokenCache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     bool authenticated() const { return _authenticated; }",
          "64:     void authenticated(bool value) { _authenticated = value; }",
          "65:     void setExpiry(double expiry) { _expiry = expiry; }",
          "66:     bool expired() const { return _expiry != 0 && _expiry < TRI_microtime(); }",
          "67:     std::vector<std::string> const& allowedPaths() const { return _allowedPaths; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     double expiry() const noexcept { return _expiry; }",
          "",
          "---------------"
        ],
        "arangod/Auth/UserManager.cpp||arangod/Auth/UserManager.cpp": [
          "File: arangod/Auth/UserManager.cpp -> arangod/Auth/UserManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: #ifndef USE_ENTERPRISE",
          "87: auth::UserManager::UserManager(application_features::ApplicationServer& server)",
          "89: #else",
          "90: auth::UserManager::UserManager(application_features::ApplicationServer& server)",
          "91:     : _server(server),",
          "",
          "[Removed Lines]",
          "88:     : _server(server), _globalVersion(1), _internalVersion(0) {}",
          "",
          "[Added Lines]",
          "88:     : _server(server),",
          "89:       _globalVersion(1),",
          "90:       _internalVersion(0) {}",
          "",
          "---------------"
        ],
        "arangod/Auth/UserManager.h||arangod/Auth/UserManager.h": [
          "File: arangod/Auth/UserManager.h -> arangod/Auth/UserManager.h"
        ],
        "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp": [
          "File: arangod/GeneralServer/AuthenticationFeature.cpp -> arangod/GeneralServer/AuthenticationFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   if (ServerState::isSingleServer(role) || ServerState::isCoordinator(role)) {",
          "192: #if USE_ENTERPRISE",
          "193:     if (server().getFeature<LdapFeature>().isEnabled()) {",
          "199:     }",
          "202: #endif",
          "203:   } else {",
          "204:     LOG_TOPIC(\"713c0\", DEBUG, Logger::AUTHENTICATION)",
          "205:         << \"Not creating user manager\";",
          "206:   }",
          "208:   TRI_ASSERT(_authCache == nullptr);",
          "211:   if (_jwtSecretProgramOption.empty()) {",
          "212:     LOG_TOPIC(\"43396\", INFO, Logger::AUTHENTICATION)",
          "",
          "[Removed Lines]",
          "194:       _userManager.reset(",
          "195:           new auth::UserManager(server(), std::make_unique<LdapAuthenticationHandler>(",
          "196:                                               server().getFeature<LdapFeature>())));",
          "197:     } else {",
          "198:       _userManager.reset(new auth::UserManager(server()));",
          "200: #else",
          "201:     _userManager.reset(new auth::UserManager(server()));",
          "209:   _authCache.reset(new auth::TokenCache(_userManager.get(), _authenticationTimeout));",
          "",
          "[Added Lines]",
          "194:       _userManager = std::make_unique<auth::UserManager>(",
          "195:           server(), std::make_unique<LdapAuthenticationHandler>(server().getFeature<LdapFeature>()));",
          "198:     if (_userManager == nullptr) {",
          "199:       _userManager = std::make_unique<auth::UserManager>(server());",
          "200:     }",
          "202:     TRI_ASSERT(_userManager != nullptr);",
          "209:   _authCache = std::make_unique<auth::TokenCache>(_userManager.get(), _authenticationTimeout);",
          "",
          "---------------"
        ],
        "arangod/GeneralServer/CommTask.cpp||arangod/GeneralServer/CommTask.cpp": [
          "File: arangod/GeneralServer/CommTask.cpp -> arangod/GeneralServer/CommTask.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:     return auth::TokenCache::Entry::Superuser();",
          "738:   }",
          "741:   if (methodPos == std::string::npos) {",
          "742:     events::UnknownAuthenticationMethod(req);",
          "743:     return auth::TokenCache::Entry::Unauthenticated();",
          "744:   }",
          "747:   char const* auth = authStr.c_str() + methodPos;",
          "748:   while (*auth == ' ') {",
          "749:     ++auth;",
          "",
          "[Removed Lines]",
          "740:   std::string::size_type methodPos = authStr.find_first_of(' ');",
          "",
          "[Added Lines]",
          "740:   std::string::size_type methodPos = authStr.find(' ');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "771:   auto authToken = this->_auth->tokenCache().checkAuthentication(authMethod, auth);",
          "772:   req.setAuthenticated(authToken.authenticated());",
          "773:   req.setUser(authToken.username());  // do copy here, so that we do not invalidate the member",
          "774:   if (authToken.authenticated()) {",
          "775:     events::Authenticated(req, authMethod);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "773:   req.setTokenExpiry(authToken.expiry());",
          "",
          "---------------"
        ],
        "arangod/RestHandler/RestAuthHandler.cpp||arangod/RestHandler/RestAuthHandler.cpp": [
          "File: arangod/RestHandler/RestAuthHandler.cpp -> arangod/RestHandler/RestAuthHandler.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     generateError(rest::ResponseCode::METHOD_NOT_ALLOWED, TRI_ERROR_HTTP_METHOD_NOT_ALLOWED);",
          "50:     return RestStatus::DONE;",
          "51:   }",
          "53:   bool parseSuccess = false;",
          "54:   VPackSlice slice = this->parseVPackBody(parseSuccess);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   auth::UserManager* um = AuthenticationFeature::instance()->userManager();",
          "54:   if (um == nullptr) {",
          "55:     std::string msg = \"This server does not support users\";",
          "56:     LOG_TOPIC(\"2e7d4\", WARN, Logger::AUTHENTICATION) << msg;",
          "57:     generateError(rest::ResponseCode::UNAUTHORIZED, TRI_ERROR_HTTP_UNAUTHORIZED, msg);",
          "58:     return RestStatus::DONE;",
          "59:   }",
          "61:   auto const& suffixes = _request->suffixes();",
          "63:   if (suffixes.size() == 1 && suffixes[0] == \"renew\") {",
          "65:     if (!_request->authenticated() ||",
          "66:         _request->user().empty() ||",
          "67:         _request->authenticationMethod() != arangodb::rest::AuthenticationMethod::JWT) {",
          "68:       generateError(rest::ResponseCode::NOT_FOUND, TRI_ERROR_USER_NOT_FOUND);",
          "69:     } else {",
          "70:       VPackBuilder resultBuilder;",
          "71:       {",
          "72:         VPackObjectBuilder b(&resultBuilder);",
          "74:         if (_request->tokenExpiry() > 0.0 &&",
          "75:             _request->tokenExpiry() - TRI_microtime() < 150.0) {",
          "76:           resultBuilder.add(\"jwt\", VPackValue(generateJwt(_request->user())));",
          "77:         }",
          "80:       }",
          "82:       generateDocument(resultBuilder.slice(), true, &VPackOptions::Defaults);",
          "83:     }",
          "84:     return RestStatus::DONE;",
          "85:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     }",
          "85:   });",
          "93:     VPackBuilder resultBuilder;",
          "94:     {",
          "95:       VPackObjectBuilder b(&resultBuilder);",
          "",
          "[Removed Lines]",
          "87:   auth::UserManager* um = AuthenticationFeature::instance()->userManager();",
          "88:   if (um == nullptr) {",
          "89:     std::string msg = \"This server does not support users\";",
          "90:     LOG_TOPIC(\"2e7d4\", ERR, Logger::AUTHENTICATION) << msg;",
          "91:     generateError(rest::ResponseCode::UNAUTHORIZED, TRI_ERROR_HTTP_UNAUTHORIZED, msg);",
          "92:   } else if (um->checkPassword(username, password)) {",
          "",
          "[Added Lines]",
          "121:   if (um->checkPassword(username, password)) {",
          "",
          "---------------"
        ],
        "arangod/V8Server/v8-vocbase.cpp||arangod/V8Server/v8-vocbase.cpp": [
          "File: arangod/V8Server/v8-vocbase.cpp -> arangod/V8Server/v8-vocbase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2272:                                           vocbase.server().getFeature<ClusterFeature>().maxNumberOfShards()), v8::PropertyAttribute(v8::ReadOnly | v8::DontEnum))",
          "2273:       .FromMaybe(false);  // ignore result",
          "2276:   context->Global()",
          "2277:       ->DefineOwnProperty(TRI_IGETC,",
          "2278:                           TRI_V8_ASCII_STRING(isolate, \"FORCE_ONE_SHARD\"),",
          "2279:                           v8::Boolean::New(isolate,",
          "2280:                                           vocbase.server().getFeature<ClusterFeature>().forceOneShard()), v8::PropertyAttribute(v8::ReadOnly | v8::DontEnum))",
          "2281:       .FromMaybe(false);  // ignore result",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2284:   context->Global()",
          "2285:       ->DefineOwnProperty(TRI_IGETC,",
          "2286:                           TRI_V8_ASCII_STRING(isolate, \"SESSION_TIMEOUT\"),",
          "2287:                           v8::Number::New(isolate, static_cast<double>(AuthenticationFeature::instance()->sessionTimeout())), v8::PropertyAttribute(v8::ReadOnly | v8::DontEnum))",
          "2288:       .FromMaybe(false);  // ignore result",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/aardvark.js||js/apps/system/_admin/aardvark/APP/aardvark.js": [
          "File: js/apps/system/_admin/aardvark/APP/aardvark.js -> js/apps/system/_admin/aardvark/APP/aardvark.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:       defaultReplicationFactor: internal.defaultReplicationFactor,",
          "97:       maxNumberOfShards: internal.maxNumberOfShards,",
          "98:       forceOneShard: internal.forceOneShard,",
          "99:       showMaintenanceStatus: true",
          "100:     })}`",
          "101:   );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:       sessionTimeout: internal.sessionTimeout,",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js||js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js -> js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:       });",
          "125:     },",
          "127:     getCoordinatorShortName: function (id) {",
          "128:       var shortName;",
          "129:       if (window.clusterHealth) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     lastActivity: function () {",
          "129:       return sessionStorage.getItem('lastActivity') || 0;",
          "130:     },",
          "132:     noteActivity: function () {",
          "134:       sessionStorage.setItem('lastActivity', Date.now() / 1000);",
          "135:     },",
          "137:     renewJwt: function (callback) {",
          "138:       if (!window.atob) {",
          "139:         return;",
          "140:       }",
          "141:       var self = this;",
          "142:       var currentUser = self.getCurrentJwtUsername();",
          "143:       if (currentUser === undefined || currentUser === \"\") {",
          "144:         return;",
          "145:       }",
          "147:       $.ajax({",
          "148:         cache: false,",
          "149:         type: 'POST',",
          "150:         url: self.databaseUrl('/_open/auth/renew'),",
          "151:         data: JSON.stringify({ username: currentUser }),",
          "152:         contentType: 'application/json',",
          "153:         processData: false,",
          "154:         success: function (data) {",
          "155:           var updated = false;",
          "156:           if (data.jwt) {",
          "157:             try {",
          "158:               var jwtParts = data.jwt.split('.');",
          "159:               if (!jwtParts[1]) {",
          "160:                 throw \"invalid token!\";",
          "161:               }",
          "162:               var payload = JSON.parse(atob(jwtParts[1]));",
          "163:               if (payload.preferred_username === currentUser) {",
          "164:                 self.setCurrentJwt(data.jwt, currentUser);",
          "165:                 updated = true;",
          "166:               }",
          "167:             } catch (err) {",
          "168:             }",
          "169:           }",
          "170:           if (updated) {",
          "172:             callback();",
          "173:           }",
          "174:         },",
          "175:         error: function (data) {",
          "182:         }",
          "183:       });",
          "184:     },",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/models/arangoUsers.js||js/apps/system/_admin/aardvark/APP/frontend/js/models/arangoUsers.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/models/arangoUsers.js -> js/apps/system/_admin/aardvark/APP/frontend/js/models/arangoUsers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   },",
          "21:   url: function () {",
          "26:       return arangoHelper.databaseUrl('/_api/user/' + encodeURIComponent(this.get('user')));",
          "27:     }",
          "28:     return arangoHelper.databaseUrl('/_api/user');",
          "29:   },",
          "48:   setPassword: function (passwd) {",
          "49:     $.ajax({",
          "50:       cache: false,",
          "",
          "[Removed Lines]",
          "22:     if (this.isNew()) {",
          "23:       return arangoHelper.databaseUrl('/_api/user');",
          "24:     }",
          "25:     if (this.get('user') !== '') {",
          "31:   checkPassword: function (passwd, callback) {",
          "32:     $.ajax({",
          "33:       cache: false,",
          "34:       type: 'POST',",
          "35:       url: arangoHelper.databaseUrl('/_api/user/' + encodeURIComponent(this.get('user'))),",
          "36:       data: JSON.stringify({ passwd: passwd }),",
          "37:       contentType: 'application/json',",
          "38:       processData: false,",
          "39:       success: function (data) {",
          "40:         callback(false, data);",
          "41:       },",
          "42:       error: function (data) {",
          "43:         callback(true, data);",
          "44:       }",
          "45:     });",
          "46:   },",
          "",
          "[Added Lines]",
          "22:     if (!this.isNew() && this.get('user') !== '') {",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/routers/startApp.js||js/apps/system/_admin/aardvark/APP/frontend/js/routers/startApp.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/routers/startApp.js -> js/apps/system/_admin/aardvark/APP/frontend/js/routers/startApp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:           $('.subBarDropdown').hide();",
          "42:         }",
          "43:       }",
          "44:     });",
          "46:     $('body').on('keyup', function (e) {",
          "47:       if (e.keyCode === 27) {",
          "48:         if (window.modalView) {",
          "49:           window.modalView.hide();",
          "50:         }",
          "51:       }",
          "52:     });",
          "53:   }",
          "54: }());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:       arangoHelper.noteActivity();",
          "58:       arangoHelper.noteActivity();",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/views/footerView.js||js/apps/system/_admin/aardvark/APP/frontend/js/views/footerView.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/views/footerView.js -> js/apps/system/_admin/aardvark/APP/frontend/js/views/footerView.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     timer: 15000,",
          "14:     lap: 0,",
          "15:     timerFunction: null,",
          "17:     events: {",
          "18:       'click .footer-center p': 'showShortcutModal'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:     lastTokenRenewal: Date.now() / 1000,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:           });",
          "44:         }",
          "45:       }, 1000);",
          "46:     },",
          "48:     template: templateEngine.createTemplate('footerView.ejs'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:       arangoHelper.noteActivity();",
          "54:       window.setInterval(function () {",
          "55:         if (self.isOffline) {",
          "57:           return;",
          "58:         }",
          "60:         var now = Date.now() / 1000;",
          "61:         var lastActivity = arangoHelper.lastActivity();",
          "63:         if (lastActivity > 0 && (now - lastActivity) > 90 * 60) {",
          "66:           return;",
          "67:         }",
          "71:         var frac = (frontendConfig.sessionTimeout >= 1800) ? 0.95 : 0.8;",
          "72:         if (now - self.lastTokenRenewal < frontendConfig.sessionTimeout * frac) {",
          "73:           return;",
          "74:         }",
          "76:         arangoHelper.renewJwt(function() {",
          "80:           self.lastTokenRenewal = now;",
          "81:         });",
          "82:       }, 15 * 1000);",
          "",
          "---------------"
        ],
        "js/apps/system/_admin/aardvark/APP/frontend/js/views/navigationView.js||js/apps/system/_admin/aardvark/APP/frontend/js/views/navigationView.js": [
          "File: js/apps/system/_admin/aardvark/APP/frontend/js/views/navigationView.js -> js/apps/system/_admin/aardvark/APP/frontend/js/views/navigationView.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:       }",
          "297:     },",
          "311:     selectMenuItem: function (menuItem, noMenuEntry) {",
          "312:       if (menuItem === undefined) {",
          "313:         menuItem = window.location.hash.split('/')[0];",
          "",
          "[Removed Lines]",
          "300:     breadcrumb: function (name) {",
          "302:       if (window.location.hash.split('/')[0] !== '#collection') {",
          "303:         $('#subNavigationBar .breadcrumb').html(",
          "304:           '<a class=\"activeBread\" href=\"#' + name + '\">' + name + '</a>'",
          "305:         )",
          "306:       }",
          "308:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "js/server/bootstrap/modules/internal.js||js/server/bootstrap/modules/internal.js": [
          "File: js/server/bootstrap/modules/internal.js -> js/server/bootstrap/modules/internal.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:     delete global.FORCE_ONE_SHARD;",
          "543:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "546:   if (global.SESSION_TIMEOUT) {",
          "547:     exports.sessionTimeout = global.SESSION_TIMEOUT;",
          "548:     delete global.SESSION_TIMEOUT;",
          "549:   }",
          "",
          "---------------"
        ],
        "lib/Logger/LogMacros.h||liLogger/LogMacros.h": [
          "File: lib/Logger/LogMacros.h -> liLogger/LogMacros.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   << ::arangodb::Logger::LOGID((id))",
          "",
          "[Removed Lines]",
          "67: #if ARANGODB_ENABLE_MAINTAINER_MODE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Rest/GeneralRequest.h||liRest/GeneralRequest.h": [
          "File: lib/Rest/GeneralRequest.h -> liRest/GeneralRequest.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:       : _connectionInfo(connectionInfo),",
          "93:         _messageId(mid),",
          "94:         _requestContext(nullptr),",
          "95:         _authenticationMethod(rest::AuthenticationMethod::NONE),",
          "96:         _type(RequestType::ILLEGAL),",
          "97:         _contentType(ContentType::UNSET),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:   bool authenticated() const { return _authenticated; }",
          "118:   void setAuthenticated(bool a) { _authenticated = a; }",
          "121:   std::string const& user() const { return _user; }",
          "122:   void setUser(std::string const& user) { _user = user; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:   RequestContext* _requestContext;",
          "256:   rest::AuthenticationMethod _authenticationMethod;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04c12651904cf67f011ef2192b44b94ffcf442d5",
      "candidate_info": {
        "commit_hash": "04c12651904cf67f011ef2192b44b94ffcf442d5",
        "repo": "arangodb/arangodb",
        "commit_url": "https://github.com/arangodb/arangodb/commit/04c12651904cf67f011ef2192b44b94ffcf442d5",
        "files": [
          "arangod/GeneralServer/AuthenticationFeature.cpp"
        ],
        "message": "BTS-820 | Clarify effect of --server.session-timeout (#15883)",
        "before_after_code_files": [
          "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
          ],
          "candidate": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
          ]
        }
      },
      "candidate_diff": {
        "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp": [
          "File: arangod/GeneralServer/AuthenticationFeature.cpp -> arangod/GeneralServer/AuthenticationFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   options",
          "89:       ->addOption(\"--server.session-timeout\",",
          "91:                   new DoubleParameter(&_sessionTimeout),",
          "92:                   arangodb::options::makeFlags(",
          "93:                       arangodb::options::Flags::DefaultNoComponents,",
          "",
          "[Removed Lines]",
          "90:                   \"timeout in seconds for web interface JWT sessions\",",
          "",
          "[Added Lines]",
          "90:                   \"lifetime for tokens in seconds that can be obtained from \"",
          "91:                   \"the POST /_open/auth endpoint. Used by the web interface \"",
          "92:                   \"for JWT-based sessions\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfc3de021431492802206fd840cd6d623dae02b1",
      "candidate_info": {
        "commit_hash": "bfc3de021431492802206fd840cd6d623dae02b1",
        "repo": "arangodb/arangodb",
        "commit_url": "https://github.com/arangodb/arangodb/commit/bfc3de021431492802206fd840cd6d623dae02b1",
        "files": [
          "arangod/GeneralServer/AuthenticationFeature.cpp"
        ],
        "message": "BTS-820 | Clarify effect of --server.session-timeout (#15883)",
        "before_after_code_files": [
          "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
          ],
          "candidate": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
          ]
        }
      },
      "candidate_diff": {
        "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp": [
          "File: arangod/GeneralServer/AuthenticationFeature.cpp -> arangod/GeneralServer/AuthenticationFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   options",
          "89:       ->addOption(\"--server.session-timeout\",",
          "91:                   new DoubleParameter(&_sessionTimeout),",
          "92:                   arangodb::options::makeFlags(",
          "93:                       arangodb::options::Flags::DefaultNoComponents,",
          "",
          "[Removed Lines]",
          "90:                   \"timeout in seconds for web interface JWT sessions\",",
          "",
          "[Added Lines]",
          "90:                   \"lifetime for tokens in seconds that can be obtained from \"",
          "91:                   \"the POST /_open/auth endpoint. Used by the web interface \"",
          "92:                   \"for JWT-based sessions\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "051583eb5181f3f21e60e1f3b44e7f24bd0abd03",
      "candidate_info": {
        "commit_hash": "051583eb5181f3f21e60e1f3b44e7f24bd0abd03",
        "repo": "arangodb/arangodb",
        "commit_url": "https://github.com/arangodb/arangodb/commit/051583eb5181f3f21e60e1f3b44e7f24bd0abd03",
        "files": [
          "arangod/GeneralServer/AuthenticationFeature.cpp"
        ],
        "message": "Reword (#15913)",
        "before_after_code_files": [
          "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
          ],
          "candidate": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
          ]
        }
      },
      "candidate_diff": {
        "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp": [
          "File: arangod/GeneralServer/AuthenticationFeature.cpp -> arangod/GeneralServer/AuthenticationFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   options",
          "98:       ->addOption(\"--server.session-timeout\",",
          "100:                   new DoubleParameter(&_sessionTimeout),",
          "101:                   arangodb::options::makeFlags(",
          "102:                       arangodb::options::Flags::DefaultNoComponents,",
          "",
          "[Removed Lines]",
          "99:                   \"timeout in seconds for web interface JWT sessions\",",
          "",
          "[Added Lines]",
          "99:                   \"lifetime for tokens in seconds that can be obtained from \"",
          "100:                   \"the POST /_open/auth endpoint. Used by the web interface \"",
          "101:                   \"for JWT-based sessions\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "632d15849932d8dbb46d04f04faf31028b4d2e83",
      "candidate_info": {
        "commit_hash": "632d15849932d8dbb46d04f04faf31028b4d2e83",
        "repo": "arangodb/arangodb",
        "commit_url": "https://github.com/arangodb/arangodb/commit/632d15849932d8dbb46d04f04faf31028b4d2e83",
        "files": [
          "arangod/Agency/AgencyFeature.cpp",
          "arangod/Agency/AgencyFeature.h",
          "arangod/Agency/AgentConfiguration.cpp",
          "arangod/Agency/AgentConfiguration.h",
          "arangod/Cache/CacheManagerFeature.cpp",
          "arangod/Cluster/ClusterFeature.cpp",
          "arangod/GeneralServer/AuthenticationFeature.cpp",
          "arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.cpp",
          "arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.h",
          "arangod/RestServer/QueryRegistryFeature.cpp",
          "arangod/RestServer/TtlFeature.cpp",
          "arangod/RocksDBEngine/RocksDBEngine.cpp",
          "arangod/RocksDBEngine/RocksDBOptionFeature.cpp",
          "arangod/Scheduler/SchedulerFeature.cpp",
          "arangod/Transaction/ManagerFeature.cpp",
          "arangod/Transaction/ManagerFeature.h",
          "lib/ApplicationFeatures/ApplicationServer.cpp",
          "lib/ProgramOptions/Option.cpp",
          "lib/ProgramOptions/Option.h",
          "lib/ProgramOptions/Parameters.h",
          "lib/ProgramOptions/ProgramOptions.cpp",
          "lib/ProgramOptions/ProgramOptions.h",
          "tests/Basics/InifileParserTest.cpp",
          "tests/Basics/ParametersTest.cpp",
          "tests/CMakeLists.txt",
          "tests/ProgramOptions/InifileParserTest.cpp",
          "tests/ProgramOptions/ParametersTest.cpp"
        ],
        "message": "add optional parameter range validation to numeric options (#16133)",
        "before_after_code_files": [
          "arangod/Agency/AgencyFeature.cpp||arangod/Agency/AgencyFeature.cpp",
          "arangod/Agency/AgencyFeature.h||arangod/Agency/AgencyFeature.h",
          "arangod/Agency/AgentConfiguration.cpp||arangod/Agency/AgentConfiguration.cpp",
          "arangod/Agency/AgentConfiguration.h||arangod/Agency/AgentConfiguration.h",
          "arangod/Cache/CacheManagerFeature.cpp||arangod/Cache/CacheManagerFeature.cpp",
          "arangod/Cluster/ClusterFeature.cpp||arangod/Cluster/ClusterFeature.cpp",
          "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp",
          "arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.cpp||arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.cpp",
          "arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.h||arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.h",
          "arangod/RestServer/QueryRegistryFeature.cpp||arangod/RestServer/QueryRegistryFeature.cpp",
          "arangod/RestServer/TtlFeature.cpp||arangod/RestServer/TtlFeature.cpp",
          "arangod/RocksDBEngine/RocksDBEngine.cpp||arangod/RocksDBEngine/RocksDBEngine.cpp",
          "arangod/RocksDBEngine/RocksDBOptionFeature.cpp||arangod/RocksDBEngine/RocksDBOptionFeature.cpp",
          "arangod/Scheduler/SchedulerFeature.cpp||arangod/Scheduler/SchedulerFeature.cpp",
          "arangod/Transaction/ManagerFeature.cpp||arangod/Transaction/ManagerFeature.cpp",
          "arangod/Transaction/ManagerFeature.h||arangod/Transaction/ManagerFeature.h",
          "lib/ApplicationFeatures/ApplicationServer.cpp||liApplicationFeatures/ApplicationServer.cpp",
          "lib/ProgramOptions/Option.cpp||liProgramOptions/Option.cpp",
          "lib/ProgramOptions/Option.h||liProgramOptions/Option.h",
          "lib/ProgramOptions/Parameters.h||liProgramOptions/Parameters.h",
          "lib/ProgramOptions/ProgramOptions.cpp||liProgramOptions/ProgramOptions.cpp",
          "lib/ProgramOptions/ProgramOptions.h||liProgramOptions/ProgramOptions.h",
          "tests/Basics/ParametersTest.cpp||tests/ProgramOptions/ParametersTest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
          ],
          "candidate": [
            "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp"
          ]
        }
      },
      "candidate_diff": {
        "arangod/Agency/AgencyFeature.cpp||arangod/Agency/AgencyFeature.cpp": [
          "File: arangod/Agency/AgencyFeature.cpp -> arangod/Agency/AgencyFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include \"V8Server/FoxxFeature.h\"",
          "44: #include \"V8Server/V8DealerFeature.h\"",
          "46: using namespace arangodb::application_features;",
          "47: using namespace arangodb::basics;",
          "48: using namespace arangodb::options;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:       _compactionKeepSize(50000),",
          "66:       _maxAppendSize(250),",
          "67:       _supervisionGracePeriod(10.0),",
          "70:   setOptional(true);",
          "71:   startsAfter<application_features::FoxxFeaturePhase>();",
          "72: }",
          "",
          "[Removed Lines]",
          "68:       _supervisionOkThreshold(5.0),",
          "69:       _cmdLineTimings(false) {",
          "",
          "[Added Lines]",
          "70:       _supervisionOkThreshold(5.0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:   options->addOption(",
          "96:       \"--agency.election-timeout-min\",",
          "97:       \"minimum timeout before an agent calls for new election (in seconds)\",",
          "99:       arangodb::options::makeFlags(",
          "100:           arangodb::options::Flags::DefaultNoComponents,",
          "101:           arangodb::options::Flags::OnAgent));",
          "",
          "[Removed Lines]",
          "98:       new DoubleParameter(&_minElectionTimeout),",
          "",
          "[Added Lines]",
          "99:       new DoubleParameter(&_minElectionTimeout, /*base*/ 1.0, /*minValue*/ 0.0,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:     return;",
          "202:   }",
          "208:   ServerState::instance()->setRole(ServerState::ROLE_AGENT);",
          "",
          "[Removed Lines]",
          "204:   if (result.touched(\"agency.election-timeout-min\")) {",
          "205:     _cmdLineTimings = true;",
          "206:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:   }",
          "245:     LOG_TOPIC(\"0cce9\", WARN, Logger::AGENCY)",
          "246:         << \"very short agency.election-timeout-min!\";",
          "247:   }",
          "",
          "[Removed Lines]",
          "240:   if (_minElectionTimeout <= 0.) {",
          "241:     LOG_TOPIC(\"facb6\", FATAL, Logger::AGENCY)",
          "242:         << \"agency.election-timeout-min must not be negative!\";",
          "243:     FATAL_ERROR_EXIT();",
          "244:   } else if (_minElectionTimeout < 0.15) {",
          "",
          "[Added Lines]",
          "239:   if (_minElectionTimeout < 0.15) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "356:     _maxAppendSize /= 10;",
          "357:   }",
          "360:       server(),",
          "367: }",
          "369: void AgencyFeature::start() {",
          "",
          "[Removed Lines]",
          "359:   _agent.reset(new consensus::Agent(",
          "361:       consensus::config_t(",
          "362:           _recoveryId, _size, _poolSize, _minElectionTimeout,",
          "363:           _maxElectionTimeout, endpoint, _agencyEndpoints, _supervision,",
          "364:           _supervisionTouched, _waitForSync, _supervisionFrequency,",
          "365:           _compactionStepSize, _compactionKeepSize, _supervisionGracePeriod,",
          "366:           _supervisionOkThreshold, _cmdLineTimings, _maxAppendSize)));",
          "",
          "[Added Lines]",
          "354:   _agent = std::make_unique<consensus::Agent>(",
          "356:       consensus::config_t(_recoveryId, _size, _poolSize, _minElectionTimeout,",
          "357:                           _maxElectionTimeout, endpoint, _agencyEndpoints,",
          "358:                           _supervision, _supervisionTouched, _waitForSync,",
          "359:                           _supervisionFrequency, _compactionStepSize,",
          "360:                           _compactionKeepSize, _supervisionGracePeriod,",
          "361:                           _supervisionOkThreshold, _maxAppendSize));",
          "",
          "---------------"
        ],
        "arangod/Agency/AgencyFeature.h||arangod/Agency/AgencyFeature.h": [
          "File: arangod/Agency/AgencyFeature.h -> arangod/Agency/AgencyFeature.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   double _supervisionOkThreshold;",
          "67:   std::string _agencyMyAddress;",
          "68:   std::vector<std::string> _agencyEndpoints;",
          "70:   std::string _recoveryId;",
          "72:   std::unique_ptr<consensus::Agent> _agent;",
          "",
          "[Removed Lines]",
          "69:   bool _cmdLineTimings;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/Agency/AgentConfiguration.cpp||arangod/Agency/AgentConfiguration.cpp": [
          "File: arangod/Agency/AgentConfiguration.cpp -> arangod/Agency/AgentConfiguration.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:       _compactionKeepSize(50000),",
          "71:       _supervisionGracePeriod(15.0),",
          "72:       _supervisionOkThreshold(5.0),",
          "74:       _version(0),",
          "75:       _startup(\"origin\"),",
          "76:       _maxAppendSize(250),",
          "",
          "[Removed Lines]",
          "73:       _cmdLineTimings(false),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: config_t::config_t(std::string const& rid, size_t as, size_t ps, double minp,",
          "80:                    double maxp, std::string const& e,",
          "81:                    std::vector<std::string> const& g, bool s, bool st, bool w,",
          "83:                    size_t a)",
          "84:     : _recoveryId(rid),",
          "85:       _agencySize(as),",
          "",
          "[Removed Lines]",
          "82:                    double f, uint64_t c, uint64_t k, double p, double o, bool t,",
          "",
          "[Added Lines]",
          "81:                    double f, uint64_t c, uint64_t k, double p, double o,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:       _compactionKeepSize(k),",
          "98:       _supervisionGracePeriod(p),",
          "99:       _supervisionOkThreshold(o),",
          "101:       _version(0),",
          "102:       _startup(\"origin\"),",
          "103:       _maxAppendSize(a),",
          "",
          "[Removed Lines]",
          "100:       _cmdLineTimings(t),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:   _compactionKeepSize = other._compactionKeepSize;",
          "131:   _supervisionGracePeriod = other._supervisionGracePeriod;",
          "132:   _supervisionOkThreshold = other._supervisionOkThreshold;",
          "134:   _version = other._version;",
          "135:   _startup = other._startup;",
          "136:   _maxAppendSize = other._maxAppendSize;",
          "",
          "[Removed Lines]",
          "133:   _cmdLineTimings = other._cmdLineTimings;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:   _compactionKeepSize = std::move(other._compactionKeepSize);",
          "159:   _supervisionGracePeriod = std::move(other._supervisionGracePeriod);",
          "160:   _supervisionOkThreshold = std::move(other._supervisionOkThreshold);",
          "162:   _version = std::move(other._version);",
          "163:   _startup = std::move(other._startup);",
          "164:   _maxAppendSize = std::move(other._maxAppendSize);",
          "",
          "[Removed Lines]",
          "161:   _cmdLineTimings = std::move(other._cmdLineTimings);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "170:   return _version;",
          "171: }",
          "178: double config_t::supervisionGracePeriod() const {",
          "179:   READ_LOCKER(readLocker, _lock);",
          "180:   return _supervisionGracePeriod;",
          "",
          "[Removed Lines]",
          "173: bool config_t::cmdLineTimings() const {",
          "174:   READ_LOCKER(readLocker, _lock);",
          "175:   return _cmdLineTimings;",
          "176: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/Agency/AgentConfiguration.h||arangod/Agency/AgentConfiguration.h": [
          "File: arangod/Agency/AgentConfiguration.h -> arangod/Agency/AgentConfiguration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   uint64_t _compactionKeepSize;",
          "56:   double _supervisionGracePeriod;",
          "57:   double _supervisionOkThreshold;",
          "59:   size_t _version;",
          "60:   std::string _startup;",
          "61:   size_t _maxAppendSize;",
          "",
          "[Removed Lines]",
          "58:   bool _cmdLineTimings;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:   config_t(std::string const& rid, size_t as, size_t ps, double minp,",
          "95:            double maxp, std::string const& e, std::vector<std::string> const& g,",
          "96:            bool s, bool st, bool w, double f, uint64_t c, uint64_t k, double p,",
          "100:   config_t(config_t const&);",
          "",
          "[Removed Lines]",
          "97:            double o, bool t, size_t a);",
          "",
          "[Added Lines]",
          "96:            double o, size_t a);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:   void setTimeoutMult(int64_t);",
          "233:   double supervisionGracePeriod() const;",
          "",
          "[Removed Lines]",
          "230:   bool cmdLineTimings() const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/Cache/CacheManagerFeature.cpp||arangod/Cache/CacheManagerFeature.cpp": [
          "File: arangod/Cache/CacheManagerFeature.cpp -> arangod/Cache/CacheManagerFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:       new UInt64Parameter(&_cacheSize),",
          "76:       arangodb::options::makeDefaultFlags(arangodb::options::Flags::Dynamic));",
          "81: }",
          "83: void CacheManagerFeature::validateOptions(",
          "",
          "[Removed Lines]",
          "78:   options->addOption(\"--cache.rebalancing-interval\",",
          "79:                      \"microseconds between rebalancing attempts\",",
          "80:                      new UInt64Parameter(&_rebalancingInterval));",
          "",
          "[Added Lines]",
          "78:   options->addOption(",
          "79:       \"--cache.rebalancing-interval\",",
          "80:       \"microseconds between rebalancing attempts\",",
          "81:       new UInt64Parameter(",
          "82:           &_rebalancingInterval, /*base*/ 1,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         << Manager::kMinSize;",
          "89:     FATAL_ERROR_EXIT();",
          "90:   }",
          "98: }",
          "100: void CacheManagerFeature::start() {",
          "",
          "[Removed Lines]",
          "92:   if (_rebalancingInterval < (CacheManagerFeature::minRebalancingInterval)) {",
          "93:     LOG_TOPIC(\"8bb45\", FATAL, arangodb::Logger::FIXME)",
          "94:         << \"invalid value for `--cache.rebalancing-interval', need at least \"",
          "95:         << (CacheManagerFeature::minRebalancingInterval);",
          "96:     FATAL_ERROR_EXIT();",
          "97:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/Cluster/ClusterFeature.cpp||arangod/Cluster/ClusterFeature.cpp": [
          "File: arangod/Cluster/ClusterFeature.cpp -> arangod/Cluster/ClusterFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:   options",
          "197:       ->addOption(\"--cluster.min-replication-factor\",",
          "198:                   \"minimum replication factor for new collections\",",
          "200:                   arangodb::options::makeFlags(",
          "201:                       arangodb::options::Flags::DefaultNoComponents,",
          "202:                       arangodb::options::Flags::OnCoordinator))",
          "",
          "[Removed Lines]",
          "199:                   new UInt32Parameter(&_minReplicationFactor),",
          "",
          "[Added Lines]",
          "199:                   new UInt32Parameter(&_minReplicationFactor, /*base*/ 1,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:       ->addOption(",
          "207:           \"--cluster.max-replication-factor\",",
          "208:           \"maximum replication factor for new collections (0 = unrestricted)\",",
          "210:           arangodb::options::makeFlags(",
          "211:               arangodb::options::Flags::DefaultNoComponents,",
          "212:               arangodb::options::Flags::OnCoordinator))",
          "213:       .setIntroducedIn(30600);",
          "215:   options",
          "223:       .setIntroducedIn(30501);",
          "225:   options",
          "",
          "[Removed Lines]",
          "209:           new UInt32Parameter(&_maxReplicationFactor),",
          "216:       ->addOption(\"--cluster.max-number-of-shards\",",
          "217:                   \"maximum number of shards when creating new collections (0 = \"",
          "218:                   \"unrestricted)\",",
          "219:                   new UInt32Parameter(&_maxNumberOfShards),",
          "220:                   arangodb::options::makeFlags(",
          "221:                       arangodb::options::Flags::DefaultNoComponents,",
          "222:                       arangodb::options::Flags::OnCoordinator))",
          "",
          "[Added Lines]",
          "211:           new UInt32Parameter(&_maxReplicationFactor, /*base*/ 1,",
          "219:       ->addOption(",
          "220:           \"--cluster.max-number-of-shards\",",
          "221:           \"maximum number of shards when creating new collections (0 = \"",
          "222:           \"unrestricted)\",",
          "223:           new UInt32Parameter(&_maxNumberOfShards, /*base*/ 1, /*minValue*/ 1),",
          "224:           arangodb::options::makeFlags(",
          "225:               arangodb::options::Flags::DefaultNoComponents,",
          "226:               arangodb::options::Flags::OnCoordinator))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294:   if (_forceOneShard) {",
          "295:     _maxNumberOfShards = 1;",
          "317:   }",
          "319:   TRI_ASSERT(_minReplicationFactor > 0);",
          "",
          "[Removed Lines]",
          "296:   } else if (_maxNumberOfShards == 0) {",
          "297:     LOG_TOPIC(\"e83c2\", FATAL, arangodb::Logger::CLUSTER)",
          "298:         << \"Invalid value for `--max-number-of-shards`. The value must be at \"",
          "299:            \"least 1\";",
          "300:     FATAL_ERROR_EXIT();",
          "301:   }",
          "303:   if (_minReplicationFactor == 0) {",
          "305:     LOG_TOPIC(\"2fbdd\", FATAL, arangodb::Logger::CLUSTER)",
          "306:         << \"Invalid value for `--cluster.min-replication-factor`. The value \"",
          "307:            \"must be at least 1\";",
          "308:     FATAL_ERROR_EXIT();",
          "309:   }",
          "311:   if (_maxReplicationFactor > 10) {",
          "313:     LOG_TOPIC(\"886c6\", FATAL, arangodb::Logger::CLUSTER)",
          "314:         << \"Invalid value for `--cluster.max-replication-factor`. The value \"",
          "315:            \"must not exceed 10\";",
          "316:     FATAL_ERROR_EXIT();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/GeneralServer/AuthenticationFeature.cpp||arangod/GeneralServer/AuthenticationFeature.cpp": [
          "File: arangod/GeneralServer/AuthenticationFeature.cpp -> arangod/GeneralServer/AuthenticationFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"Enterprise/Ldap/LdapFeature.h\"",
          "43: #endif",
          "45: using namespace arangodb::options;",
          "47: namespace arangodb {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:       new DoubleParameter(&_authenticationTimeout));",
          "88:   options",
          "98:       .setIntroducedIn(30900);",
          "100:   options->addOption(\"--server.local-authentication\",",
          "",
          "[Removed Lines]",
          "89:       ->addOption(\"--server.session-timeout\",",
          "90:                   \"lifetime for tokens in seconds that can be obtained from \"",
          "91:                   \"the POST /_open/auth endpoint. Used by the web interface \"",
          "92:                   \"for JWT-based sessions\",",
          "93:                   new DoubleParameter(&_sessionTimeout),",
          "94:                   arangodb::options::makeFlags(",
          "95:                       arangodb::options::Flags::DefaultNoComponents,",
          "96:                       arangodb::options::Flags::OnCoordinator,",
          "97:                       arangodb::options::Flags::OnSingle))",
          "",
          "[Added Lines]",
          "91:       ->addOption(",
          "92:           \"--server.session-timeout\",",
          "93:           \"lifetime for tokens in seconds that can be obtained from \"",
          "94:           \"the POST /_open/auth endpoint. Used by the web interface \"",
          "95:           \"for JWT-based sessions\",",
          "96:           new DoubleParameter(&_sessionTimeout, /*base*/ 1.0, /*minValue*/ 1.0,",
          "99:           arangodb::options::makeFlags(",
          "100:               arangodb::options::Flags::DefaultNoComponents,",
          "101:               arangodb::options::Flags::OnCoordinator,",
          "102:               arangodb::options::Flags::OnSingle))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     }",
          "172:   }",
          "180:   if (options->processingResult().touched(\"server.jwt-secret\")) {",
          "181:     LOG_TOPIC(\"1aaae\", WARN, arangodb::Logger::AUTHENTICATION)",
          "182:         << \"--server.jwt-secret is insecure. Use --server.jwt-secret-keyfile \"",
          "",
          "[Removed Lines]",
          "174:   if (_sessionTimeout <= 1.0) {",
          "175:     LOG_TOPIC(\"85046\", FATAL, arangodb::Logger::AUTHENTICATION)",
          "176:         << \"--server.session-timeout has an invalid value: \" << _sessionTimeout;",
          "177:     FATAL_ERROR_EXIT();",
          "178:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.cpp||arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.cpp": [
          "File: arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.cpp -> arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #if defined(ARANGODB_ENABLE_MAINTAINER_MODE)",
          "77:   options->addSection(\"replicatedlog\", \"Options for replicated logs\");",
          "83:   options->addOption(",
          "84:       \"--replicatedlog.threshold-rocksdb-write-batch-size\",",
          "85:       \"write a batch of log updates to RocksDB early \"",
          "86:       \"when threshold (in bytes) is exceeded\",",
          "88: #endif",
          "89: }",
          "113: ReplicatedLogFeature::~ReplicatedLogFeature() = default;",
          "",
          "[Removed Lines]",
          "79:   options->addOption(\"--replicatedlog.threshold-network-batch-size\",",
          "80:                      \"send a batch of log updates early when threshold \"",
          "81:                      \"(in bytes) is exceeded\",",
          "82:                      new SizeTParameter(&_options->_thresholdNetworkBatchSize));",
          "87:       new SizeTParameter(&_options->_thresholdRocksDBWriteBatchSize));",
          "91: void ReplicatedLogFeature::validateOptions(",
          "92:     std::shared_ptr<ProgramOptions> options) {",
          "93:   if (_options->_thresholdNetworkBatchSize <",
          "94:       ReplicatedLogGlobalSettings::minThresholdNetworkBatchSize) {",
          "95:     LOG_TOPIC(\"e83c3\", FATAL, arangodb::Logger::REPLICATION2)",
          "96:         << \"Invalid value for `--threshold-network-batch-size`. The value must \"",
          "97:            \"be at \"",
          "98:            \"least \"",
          "99:         << ReplicatedLogGlobalSettings::minThresholdNetworkBatchSize;",
          "100:     FATAL_ERROR_EXIT();",
          "101:   }",
          "102:   if (_options->_thresholdRocksDBWriteBatchSize <",
          "103:       ReplicatedLogGlobalSettings::minThresholdRocksDBWriteBatchSize) {",
          "104:     LOG_TOPIC(\"e83c4\", FATAL, arangodb::Logger::REPLICATION2)",
          "105:         << \"Invalid value for `--threshold-rocksdb-write-batch-size`. The \"",
          "106:            \"value must be at \"",
          "107:            \"least \"",
          "108:         << ReplicatedLogGlobalSettings::minThresholdRocksDBWriteBatchSize;",
          "109:     FATAL_ERROR_EXIT();",
          "110:   }",
          "111: }",
          "",
          "[Added Lines]",
          "79:   options->addOption(",
          "80:       \"--replicatedlog.threshold-network-batch-size\",",
          "81:       \"send a batch of log updates early when threshold \"",
          "82:       \"(in bytes) is exceeded\",",
          "83:       new SizeTParameter(",
          "85:           ReplicatedLogGlobalSettings::minThresholdNetworkBatchSize));",
          "90:       new SizeTParameter(",
          "92:           ReplicatedLogGlobalSettings::minThresholdRocksDBWriteBatchSize));",
          "",
          "---------------"
        ],
        "arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.h||arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.h": [
          "File: arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.h -> arangod/Replication2/ReplicatedLog/ReplicatedLogFeature.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:       -> std::shared_ptr<replication2::ReplicatedLogGlobalSettings const>;",
          "48:   void collectOptions(std::shared_ptr<options::ProgramOptions>) override final;",
          "50:   void prepare() override;",
          "52:  private:",
          "",
          "[Removed Lines]",
          "49:   void validateOptions(std::shared_ptr<options::ProgramOptions>) override final;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/RestServer/QueryRegistryFeature.cpp||arangod/RestServer/QueryRegistryFeature.cpp": [
          "File: arangod/RestServer/QueryRegistryFeature.cpp -> arangod/RestServer/QueryRegistryFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:       ->addOption(",
          "264:           \"--query.max-runtime\",",
          "265:           \"runtime threshold for AQL queries (in seconds, 0 = no limit)\",",
          "267:       .setIntroducedIn(30607)",
          "268:       .setIntroducedIn(30703);",
          "",
          "[Removed Lines]",
          "266:           new DoubleParameter(&_queryMaxRuntime))",
          "",
          "[Added Lines]",
          "266:           new DoubleParameter(&_queryMaxRuntime, /*base*/ 1.0,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:                      \"the query result cache\",",
          "339:                      new BooleanParameter(&_queryCacheIncludeSystem));",
          "345:   options",
          "346:       ->addOption(\"--query.max-nodes-per-callstack\",",
          "",
          "[Removed Lines]",
          "341:   options->addOption(\"--query.optimizer-max-plans\",",
          "342:                      \"maximum number of query plans to create for a query\",",
          "343:                      new UInt64Parameter(&_maxQueryPlans));",
          "",
          "[Added Lines]",
          "342:   options->addOption(",
          "343:       \"--query.optimizer-max-plans\",",
          "344:       \"maximum number of query plans to create for a query\",",
          "345:       new UInt64Parameter(&_maxQueryPlans, /*base*/ 1, /*minValue*/ 1));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "412:     FATAL_ERROR_EXIT();",
          "413:   }",
          "430:   _maxQueryPlans = std::min(_maxQueryPlans, decltype(_maxQueryPlans)(1024));",
          "",
          "[Removed Lines]",
          "415:   if (_queryMaxRuntime < 0.0) {",
          "416:     LOG_TOPIC(\"46572\", FATAL, Logger::AQL)",
          "417:         << \"invalid value for `--query.max-runtime`. expecting 0 or a positive \"",
          "418:            \"value\";",
          "419:     FATAL_ERROR_EXIT();",
          "420:   }",
          "422:   if (_maxQueryPlans == 0) {",
          "423:     LOG_TOPIC(\"4006f\", FATAL, Logger::AQL)",
          "424:         << \"invalid value for `--query.optimizer-max-plans`. expecting at \"",
          "425:            \"least 1\";",
          "426:     FATAL_ERROR_EXIT();",
          "427:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/RestServer/TtlFeature.cpp||arangod/RestServer/TtlFeature.cpp": [
          "File: arangod/RestServer/TtlFeature.cpp -> arangod/RestServer/TtlFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:   options->addOption(",
          "447:       \"ttl.max-total-removes\",",
          "448:       \"maximum number of documents to remove per invocation of the TTL thread\",",
          "456:   options->addObsoleteOption(",
          "",
          "[Removed Lines]",
          "449:       new UInt64Parameter(&_properties.maxTotalRemoves));",
          "451:   options->addOption(\"ttl.max-collection-removes\",",
          "452:                      \"maximum number of documents to remove per collection\",",
          "453:                      new UInt64Parameter(&_properties.maxCollectionRemoves));",
          "",
          "[Added Lines]",
          "449:       new UInt64Parameter(&_properties.maxTotalRemoves, /*base*/ 1,",
          "452:   options->addOption(",
          "453:       \"ttl.max-collection-removes\",",
          "454:       \"maximum number of documents to remove per collection\",",
          "455:       new UInt64Parameter(&_properties.maxCollectionRemoves, /*base*/ 1,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459: }",
          "461: void TtlFeature::validateOptions(std::shared_ptr<ProgramOptions> options) {",
          "468:   if (_properties.maxCollectionRemoves == 0) {",
          "469:     LOG_TOPIC(\"2ab82\", FATAL, arangodb::Logger::STARTUP)",
          "470:         << \"invalid value for '--ttl.max-collection-removes'.\";",
          "",
          "[Removed Lines]",
          "462:   if (_properties.maxTotalRemoves == 0) {",
          "463:     LOG_TOPIC(\"1e299\", FATAL, arangodb::Logger::STARTUP)",
          "464:         << \"invalid value for '--ttl.max-total-removes'.\";",
          "465:     FATAL_ERROR_EXIT();",
          "466:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/RocksDBEngine/RocksDBEngine.cpp||arangod/RocksDBEngine/RocksDBEngine.cpp": [
          "File: arangod/RocksDBEngine/RocksDBEngine.cpp -> arangod/RocksDBEngine/RocksDBEngine.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:   options",
          "345:       .setIntroducedIn(30800);",
          "",
          "[Removed Lines]",
          "336:       ->addOption(\"--rocksdb.minimum-disk-free-percent\",",
          "337:                   \"minimum percentage of free disk space for considering the \"",
          "338:                   \"server healthy in \"",
          "339:                   \"health checks (set to 0 to disable the check)\",",
          "340:                   new DoubleParameter(&_requiredDiskFreePercentage),",
          "341:                   arangodb::options::makeFlags(",
          "342:                       arangodb::options::Flags::DefaultNoComponents,",
          "343:                       arangodb::options::Flags::OnDBServer,",
          "344:                       arangodb::options::Flags::OnSingle))",
          "",
          "[Added Lines]",
          "336:       ->addOption(",
          "337:           \"--rocksdb.minimum-disk-free-percent\",",
          "338:           \"minimum percentage of free disk space for considering the \"",
          "339:           \"server healthy in \"",
          "340:           \"health checks (set to 0 to disable the check)\",",
          "341:           new DoubleParameter(&_requiredDiskFreePercentage, /*base*/ 1.0,",
          "343:           arangodb::options::makeFlags(",
          "344:               arangodb::options::Flags::DefaultNoComponents,",
          "345:               arangodb::options::Flags::OnDBServer,",
          "346:               arangodb::options::Flags::OnSingle))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:       ->addOption(",
          "437:           \"--rocksdb.throttle-slots\",",
          "438:           \"number of historic metrics to use for throttle value calculation\",",
          "440:           arangodb::options::makeFlags(",
          "441:               arangodb::options::Flags::DefaultNoComponents,",
          "442:               arangodb::options::Flags::OnDBServer,",
          "",
          "[Removed Lines]",
          "439:           new UInt64Parameter(&_throttleSlots),",
          "",
          "[Added Lines]",
          "441:           new UInt64Parameter(&_throttleSlots, /*base*/ 1, /*minValue*/ 1),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "569:   validateEnterpriseOptions(options);",
          "570: #endif",
          "578:   if (_throttleScalingFactor == 0) {",
          "579:     _throttleScalingFactor = 1;",
          "580:   }",
          "",
          "[Removed Lines]",
          "572:   if (_throttleSlots == 0) {",
          "573:     LOG_TOPIC(\"76e1b\", FATAL, arangodb::Logger::CONFIG)",
          "574:         << \"invalid value for --rocksdb.throttle-slots\";",
          "575:     FATAL_ERROR_EXIT();",
          "576:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "583:     _throttleSlots = 8;",
          "584:   }",
          "594:   if (_syncInterval > 0) {",
          "595:     if (_syncInterval < minSyncInterval) {",
          "",
          "[Removed Lines]",
          "586:   if (_requiredDiskFreePercentage < 0.0 || _requiredDiskFreePercentage > 1.0) {",
          "587:     LOG_TOPIC(\"e4697\", FATAL, arangodb::Logger::CONFIG)",
          "588:         << \"invalid value for --rocksdb.minimum-disk-free-percent. Please use \"",
          "589:            \"a value \"",
          "590:         << \"between 0 (0%) and 1 (100%)\";",
          "591:     FATAL_ERROR_EXIT();",
          "592:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/RocksDBEngine/RocksDBOptionFeature.cpp||arangod/RocksDBEngine/RocksDBOptionFeature.cpp": [
          "File: arangod/RocksDBEngine/RocksDBOptionFeature.cpp -> arangod/RocksDBEngine/RocksDBOptionFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <algorithm>",
          "26: #include <ios>",
          "28: #include \"RocksDBOptionFeature.h\"",
          "",
          "[Removed Lines]",
          "24: #include <stddef.h>",
          "",
          "[Added Lines]",
          "25: #include <cstddef>",
          "27: #include <limits>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:           \"--rocksdb.target-file-size-multiplier\",",
          "228:           \"multiplier for `--rocksdb.target-file-size`, a value of 1 means \"",
          "229:           \"that files in different levels will have the same size\",",
          "231:       .setIntroducedIn(30701);",
          "233:   options",
          "",
          "[Removed Lines]",
          "230:           new UInt64Parameter(&_targetFileSizeMultiplier))",
          "",
          "[Added Lines]",
          "231:           new UInt64Parameter(&_targetFileSizeMultiplier, /*base*/ 1,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:   options->addOption(\"--rocksdb.num-levels\",",
          "302:                      \"number of levels for the database\",",
          "305:   options->addOption(\"--rocksdb.num-uncompressed-levels\",",
          "306:                      \"number of uncompressed levels for the database\",",
          "",
          "[Removed Lines]",
          "303:                      new UInt64Parameter(&_numLevels));",
          "",
          "[Added Lines]",
          "305:                      new UInt64Parameter(&_numLevels, /*base*/ 1,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "316:                      \"maximum total data size for level-1\",",
          "317:                      new UInt64Parameter(&_maxBytesForLevelBase));",
          "326:   options->addOption(",
          "327:       \"--rocksdb.block-align-data-blocks\",",
          "",
          "[Removed Lines]",
          "319:   options->addOption(\"--rocksdb.max-bytes-for-level-multiplier\",",
          "320:                      \"if not using dynamic level sizes, the maximum number of \"",
          "321:                      \"bytes for level L can be calculated as \"",
          "322:                      \" max-bytes-for-level-base * \"",
          "323:                      \"(max-bytes-for-level-multiplier ^ (L-1))\",",
          "324:                      new DoubleParameter(&_maxBytesForLevelMultiplier));",
          "",
          "[Added Lines]",
          "322:   options->addOption(",
          "323:       \"--rocksdb.max-bytes-for-level-multiplier\",",
          "324:       \"if not using dynamic level sizes, the maximum number of \"",
          "325:       \"bytes for level L can be calculated as \"",
          "326:       \" max-bytes-for-level-base * \"",
          "327:       \"(max-bytes-for-level-multiplier ^ (L-1))\",",
          "328:       new DoubleParameter(&_maxBytesForLevelMultiplier, /*base*/ 1.0,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "418:   options->addOption(",
          "419:       \"--rocksdb.num-threads-priority-high\",",
          "420:       \"number of threads for high priority operations (e.g. flush)\",",
          "423:   options->addOption(",
          "424:       \"--rocksdb.num-threads-priority-low\",",
          "425:       \"number of threads for low priority operations (e.g. compaction)\",",
          "428:   options->addOption(",
          "429:       \"--rocksdb.block-cache-size\", \"size of block cache in bytes\",",
          "",
          "[Removed Lines]",
          "421:       new UInt32Parameter(&_numThreadsHigh));",
          "426:       new UInt32Parameter(&_numThreadsLow));",
          "",
          "[Added Lines]",
          "428:       new UInt32Parameter(&_numThreadsHigh, /*base*/ 1, /*minValue*/ 0,",
          "434:       new UInt32Parameter(&_numThreadsLow, /*base*/ 1, /*minValue*/ 0,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "433:   options->addOption(",
          "434:       \"--rocksdb.block-cache-shard-bits\",",
          "435:       \"number of shard bits to use for block cache (use -1 for default value)\",",
          "438:   options->addOption(\"--rocksdb.enforce-block-cache-size-limit\",",
          "439:                      \"if true, strictly enforces the block cache size limit\",",
          "",
          "[Removed Lines]",
          "436:       new Int64Parameter(&_blockCacheShardBits));",
          "",
          "[Added Lines]",
          "445:       new Int64Parameter(&_blockCacheShardBits, /*base*/ 1, /*minValue*/ -1,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "583: void RocksDBOptionFeature::validateOptions(",
          "584:     std::shared_ptr<ProgramOptions> options) {",
          "589:   if (_writeBufferSize > 0 && _writeBufferSize < 1024 * 1024) {",
          "590:     LOG_TOPIC(\"4ce44\", FATAL, arangodb::Logger::FIXME)",
          "591:         << \"invalid value for '--rocksdb.write-buffer-size'\";",
          "",
          "[Removed Lines]",
          "585:   if (_targetFileSizeMultiplier < 1) {",
          "586:     LOG_TOPIC(\"664be\", FATAL, arangodb::Logger::FIXME)",
          "587:         << \"invalid value for '--rocksdb.target-file-size-multiplier'\";",
          "588:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "596:         << \"invalid value for '--rocksdb.total-write-buffer-size'\";",
          "597:     FATAL_ERROR_EXIT();",
          "598:   }",
          "610:   if (_maxBackgroundJobs != -1 &&",
          "611:       (_maxBackgroundJobs < 1 || _maxBackgroundJobs > 128)) {",
          "612:     LOG_TOPIC(\"cfc5a\", FATAL, arangodb::Logger::FIXME)",
          "",
          "[Removed Lines]",
          "599:   if (_maxBytesForLevelMultiplier <= 0.0) {",
          "600:     LOG_TOPIC(\"f6f8a\", FATAL, arangodb::Logger::FIXME)",
          "601:         << \"invalid value for '--rocksdb.max-bytes-for-level-multiplier'\";",
          "602:     FATAL_ERROR_EXIT();",
          "603:   }",
          "604:   if (_numLevels < 1 || _numLevels > 20) {",
          "605:     LOG_TOPIC(\"70938\", FATAL, arangodb::Logger::FIXME)",
          "606:         << \"invalid value for '--rocksdb.num-levels'\";",
          "607:     FATAL_ERROR_EXIT();",
          "608:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "614:     FATAL_ERROR_EXIT();",
          "615:   }",
          "627:   if (_maxSubcompactions > _numThreadsLow) {",
          "628:     _maxSubcompactions = _numThreadsLow;",
          "629:   }",
          "637:   _minWriteBufferNumberToMergeTouched = options->processingResult().touched(",
          "638:       \"--rocksdb.min-write-buffer-number-to-merge\");",
          "",
          "[Removed Lines]",
          "617:   if (_numThreadsHigh > 64) {",
          "618:     LOG_TOPIC(\"d3105\", FATAL, arangodb::Logger::FIXME)",
          "619:         << \"invalid value for '--rocksdb.num-threads-priority-high'\";",
          "620:     FATAL_ERROR_EXIT();",
          "621:   }",
          "622:   if (_numThreadsLow > 256) {",
          "623:     LOG_TOPIC(\"30c65\", FATAL, arangodb::Logger::FIXME)",
          "624:         << \"invalid value for '--rocksdb.num-threads-priority-low'\";",
          "625:     FATAL_ERROR_EXIT();",
          "626:   }",
          "630:   if (_blockCacheShardBits >= 20 || _blockCacheShardBits < -1) {",
          "632:     LOG_TOPIC(\"327a3\", FATAL, arangodb::Logger::FIXME)",
          "633:         << \"invalid value for '--rocksdb.block-cache-shard-bits'\";",
          "634:     FATAL_ERROR_EXIT();",
          "635:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/Scheduler/SchedulerFeature.cpp||arangod/Scheduler/SchedulerFeature.cpp": [
          "File: arangod/Scheduler/SchedulerFeature.cpp -> arangod/Scheduler/SchedulerFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:                      new UInt64Parameter(&_fifo3Size));",
          "140:   options",
          "146:       .setIntroducedIn(30610)",
          "147:       .setIntroducedIn(30706);",
          "",
          "[Removed Lines]",
          "141:       ->addOption(\"--server.unavailability-queue-fill-grade\",",
          "142:                   \"queue fill grade from which onwards the server is \"",
          "143:                   \"considered unavailable because of overload (ratio, use a \"",
          "144:                   \"value of 0 to disable it)\",",
          "145:                   new DoubleParameter(&_unavailabilityQueueFillGrade))",
          "",
          "[Added Lines]",
          "141:       ->addOption(",
          "142:           \"--server.unavailability-queue-fill-grade\",",
          "143:           \"queue fill grade from which onwards the server is \"",
          "144:           \"considered unavailable because of overload (ratio, use a \"",
          "145:           \"value of 0 to disable it)\",",
          "146:           new DoubleParameter(&_unavailabilityQueueFillGrade, /*base*/ 1.0,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:     _nrMaximalThreads = _nrMinimalThreads;",
          "212:   }",
          "221:   if (_queueSize == 0) {",
          "223:     TRI_ASSERT(_nrMaximalThreads > 0);",
          "",
          "[Removed Lines]",
          "214:   if (_unavailabilityQueueFillGrade < 0.0 ||",
          "215:       _unavailabilityQueueFillGrade > 1.0) {",
          "216:     LOG_TOPIC(\"055a1\", FATAL, arangodb::Logger::THREADS)",
          "217:         << \"invalid value for --server.unavailability-queue-fill-grade\";",
          "218:     FATAL_ERROR_EXIT();",
          "219:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/Transaction/ManagerFeature.cpp||arangod/Transaction/ManagerFeature.cpp": [
          "File: arangod/Transaction/ManagerFeature.cpp -> arangod/Transaction/ManagerFeature.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:       ->addOption(\"--transaction.streaming-idle-timeout\",",
          "96:                   \"idle timeout for streaming \"",
          "97:                   \"transactions in seconds\",",
          "99:                   arangodb::options::makeFlags(",
          "100:                       arangodb::options::Flags::DefaultNoComponents,",
          "101:                       arangodb::options::Flags::OnCoordinator,",
          "",
          "[Removed Lines]",
          "98:                   new DoubleParameter(&_streamingIdleTimeout),",
          "",
          "[Added Lines]",
          "98:                   new DoubleParameter(&_streamingIdleTimeout, /*base*/ 1.0,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:       .setIntroducedIn(30800);",
          "104: }",
          "115: void ManagerFeature::prepare() {",
          "116:   TRI_ASSERT(MANAGER.get() == nullptr);",
          "117:   TRI_ASSERT(server().getFeature<EngineSelectorFeature>().selected());",
          "",
          "[Removed Lines]",
          "106: void ManagerFeature::validateOptions(std::shared_ptr<ProgramOptions> options) {",
          "107:   if (_streamingIdleTimeout > maxStreamingIdleTimeout) {",
          "108:     LOG_TOPIC(\"7fb2d\", FATAL, Logger::TRANSACTIONS)",
          "109:         << \"invalid value for --transaction.streaming-idle-timeout. \"",
          "110:         << \"value should be at most \" << maxStreamingIdleTimeout;",
          "111:     FATAL_ERROR_EXIT();",
          "112:   }",
          "113: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arangod/Transaction/ManagerFeature.h||arangod/Transaction/ManagerFeature.h": [
          "File: arangod/Transaction/ManagerFeature.h -> arangod/Transaction/ManagerFeature.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   void collectOptions(",
          "47:       std::shared_ptr<arangodb::options::ProgramOptions> options) override;",
          "50:   void prepare() override;",
          "51:   void start() override;",
          "52:   void stop() override;",
          "",
          "[Removed Lines]",
          "48:   void validateOptions(",
          "49:       std::shared_ptr<arangodb::options::ProgramOptions> options) override;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/ApplicationFeatures/ApplicationServer.cpp||liApplicationFeatures/ApplicationServer.cpp": [
          "File: lib/ApplicationFeatures/ApplicationServer.cpp -> liApplicationFeatures/ApplicationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "300: VPackBuilder ApplicationServer::options(",
          "301:     std::function<bool(std::string const&)> const& filter) const {",
          "303: }",
          "",
          "[Removed Lines]",
          "302:   return _options->toVPack(false, false, filter);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392:   }",
          "394:   if (_dumpOptions) {",
          "397:     arangodb::velocypack::Options options;",
          "398:     options.prettyPrint = true;",
          "399:     std::cout << builder.slice().toJson(&options) << std::endl;",
          "",
          "[Removed Lines]",
          "395:     auto builder =",
          "396:         _options->toVPack(false, true, [](std::string const&) { return true; });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/ProgramOptions/Option.cpp||liProgramOptions/Option.cpp": [
          "File: lib/ProgramOptions/Option.cpp -> liProgramOptions/Option.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: Option::Option(std::string const& value, std::string const& description,",
          "39:     : section(),",
          "40:       name(),",
          "41:       description(description),",
          "42:       shorthand(),",
          "44:       flags(flags) {",
          "45:   auto parts = splitName(value);",
          "46:   section = parts.first;",
          "",
          "[Removed Lines]",
          "38:                Parameter* parameter, std::underlying_type<Flags>::type flags)",
          "43:       parameter(parameter),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: #endif",
          "65: }",
          "69: }",
          "",
          "[Removed Lines]",
          "67: void Option::toVPack(VPackBuilder& builder) const {",
          "68:   parameter->toVPack(builder);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/ProgramOptions/Option.h||liProgramOptions/Option.h": [
          "File: lib/ProgramOptions/Option.h -> liProgramOptions/Option.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"Basics/Common.h\"",
          "27: #include \"ProgramOptions/Parameters.h\"",
          "29: namespace arangodb {",
          "30: namespace velocypack {",
          "31: class Builder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:   Option(std::string const& value, std::string const& description,",
          "117:   bool hasFlag(Flags flag) const {",
          "118:     return (static_cast<std::underlying_type<Flags>::type>(flag) & flags) ==",
          "",
          "[Removed Lines]",
          "113:          Parameter* parameter, std::underlying_type<Flags>::type flags);",
          "115:   void toVPack(arangodb::velocypack::Builder& builder) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:   std::string name;",
          "200:   std::string description;",
          "201:   std::string shorthand;",
          "207:   std::vector<uint32_t> introducedInVersions;",
          "208:   std::vector<uint32_t> deprecatedInVersions;",
          "",
          "[Removed Lines]",
          "202:   std::shared_ptr<Parameter> parameter;",
          "205:   std::underlying_type<Flags>::type const flags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/ProgramOptions/Parameters.h||liProgramOptions/Parameters.h": [
          "File: lib/ProgramOptions/Parameters.h -> liProgramOptions/Parameters.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <velocypack/Builder.h>",
          "33: #include <atomic>",
          "34: #include <limits>",
          "35: #include <numeric>",
          "36: #include <type_traits>",
          "37: #include <unordered_set>",
          "38: #include <stdexcept>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:     return std::string(\"<\") + name() + std::string(\">\");",
          "187:   }",
          "190: };",
          "",
          "[Removed Lines]",
          "189:   virtual void toVPack(VPackBuilder&) const = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:     return Parameter::typeDescription();",
          "223:   }",
          "226:     builder.add(VPackValue(*ptr));",
          "227:   }",
          "229:   ValueType* ptr;",
          "",
          "[Removed Lines]",
          "225:   void toVPack(VPackBuilder& builder) const override {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:     return Parameter::typeDescription();",
          "264:   }",
          "267:     builder.add(VPackValue(ptr->load()));",
          "268:   }",
          "270:   ValueType* ptr;",
          "",
          "[Removed Lines]",
          "266:   void toVPack(VPackBuilder& builder) const override {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277: struct NumericParameter : public Parameter {",
          "278:   typedef T ValueType;",
          "283:   std::string valueString() const override { return stringifyValue(*ptr); }",
          "285:   std::string set(std::string const& value) override {",
          "286:     try {",
          "287:       ValueType v = toNumber<ValueType>(value, base);",
          "290:     } catch (...) {",
          "291:       return \"invalid numeric value '\" + value + \"' for type \" + this->name();",
          "292:     }",
          "293:   }",
          "296:     builder.add(VPackValue(*ptr));",
          "297:   }",
          "299:   ValueType* ptr;",
          "301: };",
          "415: struct StringParameter : public Parameter {",
          "",
          "[Removed Lines]",
          "280:   explicit NumericParameter(ValueType* ptr) : ptr(ptr), base(1) {}",
          "281:   NumericParameter(ValueType* ptr, ValueType base) : ptr(ptr), base(base) {}",
          "289:       return \"\";",
          "295:   void toVPack(VPackBuilder& builder) const override {",
          "300:   ValueType base;",
          "304: struct Int16Parameter : public NumericParameter<int16_t> {",
          "305:   typedef int16_t ValueType;",
          "307:   explicit Int16Parameter(ValueType* ptr) : NumericParameter<ValueType>(ptr) {}",
          "308:   Int16Parameter(ValueType* ptr, ValueType base)",
          "309:       : NumericParameter<ValueType>(ptr, base) {}",
          "311:   std::string name() const override { return \"int16\"; }",
          "312: };",
          "315: struct UInt16Parameter : public NumericParameter<uint16_t> {",
          "316:   typedef uint16_t ValueType;",
          "318:   explicit UInt16Parameter(ValueType* ptr) : NumericParameter<ValueType>(ptr) {}",
          "319:   UInt16Parameter(ValueType* ptr, ValueType base)",
          "320:       : NumericParameter<ValueType>(ptr, base) {}",
          "322:   std::string name() const override { return \"uint16\"; }",
          "323: };",
          "326: struct Int32Parameter : public NumericParameter<int32_t> {",
          "327:   typedef int32_t ValueType;",
          "329:   explicit Int32Parameter(ValueType* ptr) : NumericParameter<ValueType>(ptr) {}",
          "330:   Int32Parameter(ValueType* ptr, ValueType base)",
          "331:       : NumericParameter<ValueType>(ptr, base) {}",
          "333:   std::string name() const override { return \"int32\"; }",
          "334: };",
          "337: struct UInt32Parameter : public NumericParameter<uint32_t> {",
          "338:   typedef uint32_t ValueType;",
          "340:   explicit UInt32Parameter(ValueType* ptr) : NumericParameter<ValueType>(ptr) {}",
          "341:   UInt32Parameter(ValueType* ptr, ValueType base)",
          "342:       : NumericParameter<ValueType>(ptr, base) {}",
          "344:   std::string name() const override { return \"uint32\"; }",
          "345: };",
          "348: struct Int64Parameter : public NumericParameter<int64_t> {",
          "349:   typedef int64_t ValueType;",
          "351:   explicit Int64Parameter(ValueType* ptr) : NumericParameter<ValueType>(ptr) {}",
          "352:   Int64Parameter(ValueType* ptr, ValueType base)",
          "353:       : NumericParameter<ValueType>(ptr, base) {}",
          "355:   std::string name() const override { return \"int64\"; }",
          "356: };",
          "359: struct UInt64Parameter : public NumericParameter<uint64_t> {",
          "360:   typedef uint64_t ValueType;",
          "362:   explicit UInt64Parameter(ValueType* ptr) : NumericParameter<ValueType>(ptr) {}",
          "363:   UInt64Parameter(ValueType* ptr, ValueType base)",
          "364:       : NumericParameter<ValueType>(ptr, base) {}",
          "366:   std::string name() const override { return \"uint64\"; }",
          "367: };",
          "370: struct SizeTParameter : public NumericParameter<std::size_t> {",
          "371:   typedef std::size_t ValueType;",
          "373:   explicit SizeTParameter(ValueType* ptr) : NumericParameter<ValueType>(ptr) {}",
          "374:   SizeTParameter(ValueType* ptr, ValueType base)",
          "375:       : NumericParameter<ValueType>(ptr, base) {}",
          "377:   std::string name() const override { return \"size\"; }",
          "378: };",
          "380: template<typename T>",
          "381: struct BoundedParameter : public T {",
          "382:   BoundedParameter(typename T::ValueType* ptr, typename T::ValueType minValue,",
          "383:                    typename T::ValueType maxValue)",
          "384:       : T(ptr), minValue(minValue), maxValue(maxValue) {}",
          "386:   std::string set(std::string const& value) override {",
          "387:     try {",
          "388:       typename T::ValueType v = toNumber<typename T::ValueType>(",
          "389:           value, static_cast<typename T::ValueType>(1));",
          "390:       if (v >= minValue && v <= maxValue) {",
          "392:         return \"\";",
          "393:       }",
          "394:     } catch (...) {",
          "395:       return \"invalid numeric value '\" + value + \"' for type \" + this->name();",
          "396:     }",
          "397:     return \"number '\" + value + \"' out of allowed range (\" +",
          "398:            std::to_string(minValue) + \" - \" + std::to_string(maxValue) + \")\";",
          "399:   }",
          "401:   typename T::ValueType minValue;",
          "402:   typename T::ValueType maxValue;",
          "403: };",
          "406: struct DoubleParameter : public NumericParameter<double> {",
          "407:   typedef double ValueType;",
          "409:   explicit DoubleParameter(ValueType* ptr) : NumericParameter<double>(ptr) {}",
          "411:   std::string name() const override { return \"double\"; }",
          "412: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "425:     return \"\";",
          "426:   }",
          "429:     builder.add(VPackValue(*ptr));",
          "430:   }",
          "",
          "[Removed Lines]",
          "428:   void toVPack(VPackBuilder& builder) const override {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "523:   void flushValue() override { ptr->clear(); }",
          "526:     builder.openArray();",
          "527:     for (size_t i = 0; i < ptr->size(); ++i) {",
          "528:       builder.add(VPackValue(ptr->at(i)));",
          "",
          "[Removed Lines]",
          "525:   void toVPack(VPackBuilder& builder) const override {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "594:     return result;",
          "595:   }",
          "598:     builder.openArray();",
          "599:     for (size_t i = 0; i < ptr->size(); ++i) {",
          "600:       builder.add(VPackValue(ptr->at(i)));",
          "",
          "[Removed Lines]",
          "597:   void toVPack(VPackBuilder& builder) const override {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "632:   std::string name() const override { return \"obsolete\"; }",
          "633:   std::string valueString() const override { return \"-\"; }",
          "634:   std::string set(std::string const&) override { return \"\"; }",
          "636:     builder.add(VPackValue(VPackValueType::Null));",
          "637:   }",
          "",
          "[Removed Lines]",
          "635:   void toVPack(VPackBuilder& builder) const override {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/ProgramOptions/ProgramOptions.cpp||liProgramOptions/ProgramOptions.cpp": [
          "File: lib/ProgramOptions/ProgramOptions.cpp -> liProgramOptions/ProgramOptions.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     bool onlyTouched, bool detailed,",
          "177:     std::function<bool(std::string const&)> const& filter) const {",
          "178:   VPackBuilder builder;",
          "",
          "[Removed Lines]",
          "175: VPackBuilder ProgramOptions::toVPack(",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:           builder.close();",
          "241:             builder.add(\"component\", VPackValue(VPackValueType::Array));",
          "242:             if (option.hasFlag(arangodb::options::Flags::OnCoordinator)) {",
          "243:               builder.add(VPackValue(\"coordinator\"));",
          "",
          "[Removed Lines]",
          "237:           char const* arangod = \"arangod\";",
          "238:           if (_progname.size() >= strlen(arangod) &&",
          "239:               _progname.compare(_progname.size() - strlen(arangod),",
          "240:                                 strlen(arangod), arangod) == 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291:             builder.add(VPackValue(\"default\"));",
          "293:           }",
          "294:           builder.add(",
          "295:               \"dynamic\",",
          "296:               VPackValue(option.hasFlag(arangodb::options::Flags::Dynamic)));",
          "297:           builder.close();",
          "298:         } else {",
          "300:         }",
          "301:       },",
          "302:       onlyTouched, false);",
          "",
          "[Removed Lines]",
          "292:             option.toVPack(builder);",
          "299:           option.toVPack(builder);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "602: }",
          "606:   checkIfSealed();",
          "607:   std::map<std::string, Section>::iterator sectionIt =",
          "608:       addSection(option.section, \"\");",
          "",
          "[Removed Lines]",
          "605: void ProgramOptions::addOption(Option const& option) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "616:   }",
          "618:   Section& section = (*sectionIt).second;",
          "620: }",
          "",
          "[Removed Lines]",
          "619:   section.options.try_emplace(option.name, option);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/ProgramOptions/ProgramOptions.h||liProgramOptions/ProgramOptions.h": [
          "File: lib/ProgramOptions/ProgramOptions.h -> liProgramOptions/ProgramOptions.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"ProgramOptions/Option.h\"",
          "29: #include \"ProgramOptions/Section.h\"",
          "31: namespace arangodb {",
          "32: namespace velocypack {",
          "33: class Builder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   void addOldOption(std::string const& old, std::string const& replacement);",
          "131:     checkIfSealed();",
          "134:     if (!emplaced) {",
          "136:       Section& sec = it->second;",
          "",
          "[Removed Lines]",
          "130:   auto addSection(Section const& section) {",
          "133:     auto [it, emplaced] = _sections.try_emplace(section.name, section);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:         EnterpriseSection(name, description, link, \"\", hidden, obsolete));",
          "159:   }",
          "162:   Option& addOption(",
          "163:       std::string const& name, std::string const& description,",
          "164:       Parameter* parameter,",
          "165:       std::underlying_type<Flags>::type flags = makeFlags(Flags::Default)) {",
          "167:     return getOption(name);",
          "168:   }",
          "",
          "[Removed Lines]",
          "166:     addOption(Option(name, description, parameter, flags));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:   Option& addObsoleteOption(std::string const& name,",
          "174:                             std::string const& description,",
          "175:                             bool requiresValue) {",
          "177:                      makeFlags(Flags::Uncommon, Flags::Obsolete)));",
          "178:     return getOption(name);",
          "179:   }",
          "",
          "[Removed Lines]",
          "176:     addOption(Option(name, description, new ObsoleteParameter(requiresValue),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "201:       bool onlyTouched, bool detailed,",
          "202:       std::function<bool(std::string const&)> const& filter) const;",
          "",
          "[Removed Lines]",
          "200:   arangodb::velocypack::Builder toVPack(",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "265:  private:",
          "270:   std::string const& modernize(std::string const& name);",
          "",
          "[Removed Lines]",
          "267:   void addOption(Option const& option);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/Basics/ParametersTest.cpp||tests/ProgramOptions/ParametersTest.cpp": [
          "File: tests/Basics/ParametersTest.cpp -> tests/ProgramOptions/ParametersTest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "481:     }",
          "482:   }",
          "483: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485: TEST(ParametersTest, Int16DefaultRange) {",
          "486:   int16_t value = 0;",
          "487:   ASSERT_EQ(\"\", arangodb::options::Int16Parameter(&value, 1).set(\"0\"));",
          "488:   ASSERT_EQ(\"\", arangodb::options::Int16Parameter(&value, 1).set(\"1\"));",
          "489:   ASSERT_EQ(\"\", arangodb::options::Int16Parameter(&value, 1).set(\"32767\"));",
          "490:   ASSERT_EQ(\"\", arangodb::options::Int16Parameter(&value, 1).set(\"-32768\"));",
          "493:   ASSERT_NE(\"\", arangodb::options::Int16Parameter(&value, 1).set(\"-32769\"));",
          "494:   ASSERT_NE(\"\", arangodb::options::Int16Parameter(&value, 1).set(\"32768\"));",
          "496:   ASSERT_NE(\"\", arangodb::options::Int16Parameter(&value, 1).set(\"\"));",
          "497:   ASSERT_NE(\"\", arangodb::options::Int16Parameter(&value, 1).set(\"abc\"));",
          "498: }",
          "500: TEST(ParametersTest, UInt16DefaultRange) {",
          "501:   uint16_t value = 0;",
          "502:   ASSERT_EQ(\"\", arangodb::options::UInt16Parameter(&value, 1).set(\"0\"));",
          "503:   ASSERT_EQ(\"\", arangodb::options::UInt16Parameter(&value, 1).set(\"1\"));",
          "504:   ASSERT_EQ(\"\", arangodb::options::UInt16Parameter(&value, 1).set(\"32767\"));",
          "505:   ASSERT_EQ(\"\", arangodb::options::UInt16Parameter(&value, 1).set(\"65535\"));",
          "508:   ASSERT_NE(\"\", arangodb::options::UInt16Parameter(&value, 1).set(\"-1\"));",
          "509:   ASSERT_NE(\"\", arangodb::options::UInt16Parameter(&value, 1).set(\"65536\"));",
          "511:   ASSERT_NE(\"\", arangodb::options::UInt16Parameter(&value, 1).set(\"\"));",
          "512:   ASSERT_NE(\"\", arangodb::options::UInt16Parameter(&value, 1).set(\"abc\"));",
          "513: }",
          "515: TEST(ParametersTest, Int32DefaultRange) {",
          "516:   int32_t value = 0;",
          "517:   ASSERT_EQ(\"\", arangodb::options::Int32Parameter(&value, 1).set(\"0\"));",
          "518:   ASSERT_EQ(\"\", arangodb::options::Int32Parameter(&value, 1).set(\"1\"));",
          "519:   ASSERT_EQ(\"\", arangodb::options::Int32Parameter(&value, 1).set(\"32767\"));",
          "520:   ASSERT_EQ(\"\", arangodb::options::Int32Parameter(&value, 1).set(\"65535\"));",
          "521:   ASSERT_EQ(\"\", arangodb::options::Int32Parameter(&value, 1).set(\"2147483647\"));",
          "522:   ASSERT_EQ(\"\",",
          "523:             arangodb::options::Int32Parameter(&value, 1).set(\"-2147483647\"));",
          "524:   ASSERT_EQ(\"\",",
          "525:             arangodb::options::Int32Parameter(&value, 1).set(\"-2147483648\"));",
          "528:   ASSERT_NE(\"\",",
          "529:             arangodb::options::Int32Parameter(&value, 1).set(\"-2147483649\"));",
          "530:   ASSERT_NE(\"\", arangodb::options::Int32Parameter(&value, 1).set(\"2147483648\"));",
          "532:   ASSERT_NE(\"\", arangodb::options::Int32Parameter(&value, 1).set(\"\"));",
          "533:   ASSERT_NE(\"\", arangodb::options::Int32Parameter(&value, 1).set(\"abc\"));",
          "534: }",
          "536: TEST(ParametersTest, UInt32DefaultRange) {",
          "537:   uint32_t value = 0;",
          "538:   ASSERT_EQ(\"\", arangodb::options::UInt32Parameter(&value, 1).set(\"0\"));",
          "539:   ASSERT_EQ(\"\", arangodb::options::UInt32Parameter(&value, 1).set(\"1\"));",
          "540:   ASSERT_EQ(\"\", arangodb::options::UInt32Parameter(&value, 1).set(\"32767\"));",
          "541:   ASSERT_EQ(\"\", arangodb::options::UInt32Parameter(&value, 1).set(\"65535\"));",
          "542:   ASSERT_EQ(\"\",",
          "543:             arangodb::options::UInt32Parameter(&value, 1).set(\"4294967295\"));",
          "546:   ASSERT_NE(\"\", arangodb::options::UInt32Parameter(&value, 1).set(\"-1\"));",
          "547:   ASSERT_NE(\"\",",
          "548:             arangodb::options::UInt32Parameter(&value, 1).set(\"4294967296\"));",
          "550:   ASSERT_NE(\"\", arangodb::options::UInt32Parameter(&value, 1).set(\"\"));",
          "551:   ASSERT_NE(\"\", arangodb::options::UInt32Parameter(&value, 1).set(\"abc\"));",
          "552: }",
          "554: TEST(ParametersTest, Int64DefaultRange) {",
          "555:   int64_t value = 0;",
          "556:   ASSERT_EQ(\"\", arangodb::options::Int64Parameter(&value, 1).set(\"0\"));",
          "557:   ASSERT_EQ(\"\", arangodb::options::Int64Parameter(&value, 1).set(\"1\"));",
          "558:   ASSERT_EQ(\"\", arangodb::options::Int64Parameter(&value, 1).set(\"65535\"));",
          "559:   ASSERT_EQ(\"\", arangodb::options::Int64Parameter(&value, 1).set(\"4294967296\"));",
          "560:   ASSERT_EQ(\"\", arangodb::options::Int64Parameter(&value, 1).set(",
          "561:                     \"9223372036854775807\"));",
          "562:   ASSERT_EQ(\"\", arangodb::options::Int64Parameter(&value, 1).set(",
          "563:                     \"-9223372036854775808\"));",
          "566:   ASSERT_NE(\"\", arangodb::options::Int64Parameter(&value, 1).set(",
          "567:                     \"9223372036854775808\"));",
          "568:   ASSERT_NE(\"\", arangodb::options::Int64Parameter(&value, 1).set(",
          "569:                     \"-9223372036854775809\"));",
          "571:   ASSERT_NE(\"\", arangodb::options::Int64Parameter(&value, 1).set(\"\"));",
          "572:   ASSERT_NE(\"\", arangodb::options::Int64Parameter(&value, 1).set(\"abc\"));",
          "573: }",
          "575: TEST(ParametersTest, UInt64DefaultRange) {",
          "576:   uint64_t value = 0;",
          "577:   ASSERT_EQ(\"\", arangodb::options::UInt64Parameter(&value, 1).set(\"0\"));",
          "578:   ASSERT_EQ(\"\", arangodb::options::UInt64Parameter(&value, 1).set(\"1\"));",
          "579:   ASSERT_EQ(\"\", arangodb::options::UInt64Parameter(&value, 1).set(\"65535\"));",
          "580:   ASSERT_EQ(\"\",",
          "581:             arangodb::options::UInt64Parameter(&value, 1).set(\"4294967296\"));",
          "582:   ASSERT_EQ(\"\", arangodb::options::UInt64Parameter(&value, 1).set(",
          "583:                     \"18446744073709551615\"));",
          "586:   ASSERT_NE(\"\", arangodb::options::UInt64Parameter(&value, 1).set(\"-1\"));",
          "587:   ASSERT_NE(\"\", arangodb::options::UInt64Parameter(&value, 1).set(",
          "588:                     \"18446744073709551616\"));",
          "590:   ASSERT_NE(\"\", arangodb::options::UInt64Parameter(&value, 1).set(\"\"));",
          "591:   ASSERT_NE(\"\", arangodb::options::UInt64Parameter(&value, 1).set(\"abc\"));",
          "592: }",
          "594: TEST(ParametersTest, Int16Validation) {",
          "595:   int16_t value = 0;",
          "596:   {",
          "597:     arangodb::options::Int16Parameter param(&value, 1, -10, 10, true, true);",
          "598:     ASSERT_EQ(\"\", param.set(\"-10\"));",
          "599:     ASSERT_EQ(\"\", param.set(\"-9\"));",
          "600:     ASSERT_EQ(\"\", param.set(\"-0\"));",
          "601:     ASSERT_EQ(\"\", param.set(\"1\"));",
          "602:     ASSERT_EQ(\"\", param.set(\"2\"));",
          "603:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "604:     ASSERT_NE(\"\", param.set(\"-12\"));",
          "605:     ASSERT_NE(\"\", param.set(\"-11\"));",
          "606:     ASSERT_NE(\"\", param.set(\"11\"));",
          "607:     ASSERT_NE(\"\", param.set(\"22\"));",
          "608:   }",
          "610:   {",
          "611:     arangodb::options::Int16Parameter param(&value, 1, -10, 35, true, true);",
          "612:     ASSERT_EQ(\"\", param.set(\"-10\"));",
          "613:     ASSERT_EQ(\"\", param.set(\"-9\"));",
          "614:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "615:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "616:     ASSERT_EQ(\"\", param.set(\"11\"));",
          "617:     ASSERT_EQ(\"\", param.set(\"34\"));",
          "618:     ASSERT_EQ(\"\", param.set(\"35\"));",
          "619:     ASSERT_NE(\"\", param.set(\"-12\"));",
          "620:     ASSERT_NE(\"\", param.set(\"-11\"));",
          "621:     ASSERT_NE(\"\", param.set(\"36\"));",
          "622:     ASSERT_NE(\"\", param.set(\"100\"));",
          "623:   }",
          "625:   {",
          "626:     arangodb::options::Int16Parameter param(&value, 1, -100, 135, false, true);",
          "627:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "628:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "629:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "630:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "631:     ASSERT_EQ(\"\", param.set(\"135\"));",
          "632:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "633:     ASSERT_NE(\"\", param.set(\"-100\"));",
          "634:     ASSERT_NE(\"\", param.set(\"136\"));",
          "635:   }",
          "637:   {",
          "638:     arangodb::options::Int16Parameter param(&value, 1, -100, 135, false, false);",
          "639:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "640:     ASSERT_EQ(\"\", param.set(\"-98\"));",
          "641:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "642:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "643:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "644:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "645:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "646:     ASSERT_NE(\"\", param.set(\"135\"));",
          "647:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "648:     ASSERT_NE(\"\", param.set(\"-100\"));",
          "649:     ASSERT_NE(\"\", param.set(\"136\"));",
          "650:   }",
          "652:   {",
          "653:     arangodb::options::Int16Parameter param(&value, 1, -100, 135, true, false);",
          "654:     ASSERT_EQ(\"\", param.set(\"-100\"));",
          "655:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "656:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "657:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "658:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "659:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "660:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "661:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "662:     ASSERT_NE(\"\", param.set(\"135\"));",
          "663:     ASSERT_NE(\"\", param.set(\"136\"));",
          "664:   }",
          "665: }",
          "667: TEST(ParametersTest, UInt16Validation) {",
          "668:   uint16_t value = 0;",
          "669:   {",
          "670:     arangodb::options::UInt16Parameter param(&value, 1, 0, 10, true, true);",
          "671:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "672:     ASSERT_EQ(\"\", param.set(\"1\"));",
          "673:     ASSERT_EQ(\"\", param.set(\"2\"));",
          "674:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "675:     ASSERT_NE(\"\", param.set(\"11\"));",
          "676:     ASSERT_NE(\"\", param.set(\"22\"));",
          "677:   }",
          "679:   {",
          "680:     arangodb::options::UInt16Parameter param(&value, 1, 10, 35, true, true);",
          "681:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "682:     ASSERT_EQ(\"\", param.set(\"11\"));",
          "683:     ASSERT_EQ(\"\", param.set(\"34\"));",
          "684:     ASSERT_EQ(\"\", param.set(\"35\"));",
          "685:     ASSERT_NE(\"\", param.set(\"0\"));",
          "686:     ASSERT_NE(\"\", param.set(\"1\"));",
          "687:     ASSERT_NE(\"\", param.set(\"9\"));",
          "688:     ASSERT_NE(\"\", param.set(\"36\"));",
          "689:     ASSERT_NE(\"\", param.set(\"100\"));",
          "690:   }",
          "692:   {",
          "693:     arangodb::options::UInt16Parameter param(&value, 1, 100, 135, false, true);",
          "694:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "695:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "696:     ASSERT_EQ(\"\", param.set(\"135\"));",
          "697:     ASSERT_NE(\"\", param.set(\"99\"));",
          "698:     ASSERT_NE(\"\", param.set(\"100\"));",
          "699:     ASSERT_NE(\"\", param.set(\"136\"));",
          "700:   }",
          "702:   {",
          "703:     arangodb::options::UInt16Parameter param(&value, 1, 100, 135, false, false);",
          "704:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "705:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "706:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "707:     ASSERT_NE(\"\", param.set(\"135\"));",
          "708:     ASSERT_NE(\"\", param.set(\"99\"));",
          "709:     ASSERT_NE(\"\", param.set(\"100\"));",
          "710:     ASSERT_NE(\"\", param.set(\"136\"));",
          "711:   }",
          "713:   {",
          "714:     arangodb::options::UInt16Parameter param(&value, 1, 100, 135, true, false);",
          "715:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "716:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "717:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "718:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "719:     ASSERT_NE(\"\", param.set(\"99\"));",
          "720:     ASSERT_NE(\"\", param.set(\"135\"));",
          "721:     ASSERT_NE(\"\", param.set(\"136\"));",
          "722:   }",
          "723: }",
          "725: TEST(ParametersTest, Int32Validation) {",
          "726:   int32_t value = 0;",
          "727:   {",
          "728:     arangodb::options::Int32Parameter param(&value, 1, -10, 10, true, true);",
          "729:     ASSERT_EQ(\"\", param.set(\"-10\"));",
          "730:     ASSERT_EQ(\"\", param.set(\"-9\"));",
          "731:     ASSERT_EQ(\"\", param.set(\"-0\"));",
          "732:     ASSERT_EQ(\"\", param.set(\"1\"));",
          "733:     ASSERT_EQ(\"\", param.set(\"2\"));",
          "734:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "735:     ASSERT_NE(\"\", param.set(\"-12\"));",
          "736:     ASSERT_NE(\"\", param.set(\"-11\"));",
          "737:     ASSERT_NE(\"\", param.set(\"11\"));",
          "738:     ASSERT_NE(\"\", param.set(\"22\"));",
          "739:   }",
          "741:   {",
          "742:     arangodb::options::Int32Parameter param(&value, 1, -10, 35, true, true);",
          "743:     ASSERT_EQ(\"\", param.set(\"-10\"));",
          "744:     ASSERT_EQ(\"\", param.set(\"-9\"));",
          "745:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "746:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "747:     ASSERT_EQ(\"\", param.set(\"11\"));",
          "748:     ASSERT_EQ(\"\", param.set(\"34\"));",
          "749:     ASSERT_EQ(\"\", param.set(\"35\"));",
          "750:     ASSERT_NE(\"\", param.set(\"-12\"));",
          "751:     ASSERT_NE(\"\", param.set(\"-11\"));",
          "752:     ASSERT_NE(\"\", param.set(\"36\"));",
          "753:     ASSERT_NE(\"\", param.set(\"100\"));",
          "754:   }",
          "756:   {",
          "757:     arangodb::options::Int32Parameter param(&value, 1, -100, 135, false, true);",
          "758:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "759:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "760:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "761:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "762:     ASSERT_EQ(\"\", param.set(\"135\"));",
          "763:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "764:     ASSERT_NE(\"\", param.set(\"-100\"));",
          "765:     ASSERT_NE(\"\", param.set(\"136\"));",
          "766:   }",
          "768:   {",
          "769:     arangodb::options::Int32Parameter param(&value, 1, -100, 135, false, false);",
          "770:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "771:     ASSERT_EQ(\"\", param.set(\"-98\"));",
          "772:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "773:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "774:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "775:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "776:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "777:     ASSERT_NE(\"\", param.set(\"135\"));",
          "778:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "779:     ASSERT_NE(\"\", param.set(\"-100\"));",
          "780:     ASSERT_NE(\"\", param.set(\"136\"));",
          "781:   }",
          "783:   {",
          "784:     arangodb::options::Int32Parameter param(&value, 1, -100, 135, true, false);",
          "785:     ASSERT_EQ(\"\", param.set(\"-100\"));",
          "786:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "787:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "788:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "789:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "790:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "791:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "792:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "793:     ASSERT_NE(\"\", param.set(\"135\"));",
          "794:     ASSERT_NE(\"\", param.set(\"136\"));",
          "795:   }",
          "796: }",
          "798: TEST(ParametersTest, UInt32Validation) {",
          "799:   uint32_t value = 0;",
          "800:   {",
          "801:     arangodb::options::UInt32Parameter param(&value, 1, 0, 10, true, true);",
          "802:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "803:     ASSERT_EQ(\"\", param.set(\"1\"));",
          "804:     ASSERT_EQ(\"\", param.set(\"2\"));",
          "805:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "806:     ASSERT_NE(\"\", param.set(\"11\"));",
          "807:     ASSERT_NE(\"\", param.set(\"22\"));",
          "808:   }",
          "810:   {",
          "811:     arangodb::options::UInt32Parameter param(&value, 1, 10, 35, true, true);",
          "812:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "813:     ASSERT_EQ(\"\", param.set(\"11\"));",
          "814:     ASSERT_EQ(\"\", param.set(\"34\"));",
          "815:     ASSERT_EQ(\"\", param.set(\"35\"));",
          "816:     ASSERT_NE(\"\", param.set(\"0\"));",
          "817:     ASSERT_NE(\"\", param.set(\"1\"));",
          "818:     ASSERT_NE(\"\", param.set(\"9\"));",
          "819:     ASSERT_NE(\"\", param.set(\"36\"));",
          "820:     ASSERT_NE(\"\", param.set(\"100\"));",
          "821:   }",
          "823:   {",
          "824:     arangodb::options::UInt32Parameter param(&value, 1, 100, 135, false, true);",
          "825:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "826:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "827:     ASSERT_EQ(\"\", param.set(\"135\"));",
          "828:     ASSERT_NE(\"\", param.set(\"99\"));",
          "829:     ASSERT_NE(\"\", param.set(\"100\"));",
          "830:     ASSERT_NE(\"\", param.set(\"136\"));",
          "831:   }",
          "833:   {",
          "834:     arangodb::options::UInt32Parameter param(&value, 1, 100, 135, false, false);",
          "835:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "836:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "837:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "838:     ASSERT_NE(\"\", param.set(\"135\"));",
          "839:     ASSERT_NE(\"\", param.set(\"99\"));",
          "840:     ASSERT_NE(\"\", param.set(\"100\"));",
          "841:     ASSERT_NE(\"\", param.set(\"136\"));",
          "842:   }",
          "844:   {",
          "845:     arangodb::options::UInt32Parameter param(&value, 1, 100, 135, true, false);",
          "846:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "847:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "848:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "849:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "850:     ASSERT_NE(\"\", param.set(\"99\"));",
          "851:     ASSERT_NE(\"\", param.set(\"135\"));",
          "852:     ASSERT_NE(\"\", param.set(\"136\"));",
          "853:   }",
          "854: }",
          "856: TEST(ParametersTest, Int64Validation) {",
          "857:   int64_t value = 0;",
          "858:   {",
          "859:     arangodb::options::Int64Parameter param(&value, 1, -10, 10, true, true);",
          "860:     ASSERT_EQ(\"\", param.set(\"-10\"));",
          "861:     ASSERT_EQ(\"\", param.set(\"-9\"));",
          "862:     ASSERT_EQ(\"\", param.set(\"-0\"));",
          "863:     ASSERT_EQ(\"\", param.set(\"1\"));",
          "864:     ASSERT_EQ(\"\", param.set(\"2\"));",
          "865:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "866:     ASSERT_NE(\"\", param.set(\"-12\"));",
          "867:     ASSERT_NE(\"\", param.set(\"-11\"));",
          "868:     ASSERT_NE(\"\", param.set(\"11\"));",
          "869:     ASSERT_NE(\"\", param.set(\"22\"));",
          "870:   }",
          "872:   {",
          "873:     arangodb::options::Int64Parameter param(&value, 1, -10, 35, true, true);",
          "874:     ASSERT_EQ(\"\", param.set(\"-10\"));",
          "875:     ASSERT_EQ(\"\", param.set(\"-9\"));",
          "876:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "877:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "878:     ASSERT_EQ(\"\", param.set(\"11\"));",
          "879:     ASSERT_EQ(\"\", param.set(\"34\"));",
          "880:     ASSERT_EQ(\"\", param.set(\"35\"));",
          "881:     ASSERT_NE(\"\", param.set(\"-12\"));",
          "882:     ASSERT_NE(\"\", param.set(\"-11\"));",
          "883:     ASSERT_NE(\"\", param.set(\"36\"));",
          "884:     ASSERT_NE(\"\", param.set(\"100\"));",
          "885:   }",
          "887:   {",
          "888:     arangodb::options::Int64Parameter param(&value, 1, -100, 135, false, true);",
          "889:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "890:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "891:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "892:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "893:     ASSERT_EQ(\"\", param.set(\"135\"));",
          "894:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "895:     ASSERT_NE(\"\", param.set(\"-100\"));",
          "896:     ASSERT_NE(\"\", param.set(\"136\"));",
          "897:   }",
          "899:   {",
          "900:     arangodb::options::Int64Parameter param(&value, 1, -100, 135, false, false);",
          "901:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "902:     ASSERT_EQ(\"\", param.set(\"-98\"));",
          "903:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "904:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "905:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "906:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "907:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "908:     ASSERT_NE(\"\", param.set(\"135\"));",
          "909:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "910:     ASSERT_NE(\"\", param.set(\"-100\"));",
          "911:     ASSERT_NE(\"\", param.set(\"136\"));",
          "912:   }",
          "914:   {",
          "915:     arangodb::options::Int64Parameter param(&value, 1, -100, 135, true, false);",
          "916:     ASSERT_EQ(\"\", param.set(\"-100\"));",
          "917:     ASSERT_EQ(\"\", param.set(\"-99\"));",
          "918:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "919:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "920:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "921:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "922:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "923:     ASSERT_NE(\"\", param.set(\"-101\"));",
          "924:     ASSERT_NE(\"\", param.set(\"135\"));",
          "925:     ASSERT_NE(\"\", param.set(\"136\"));",
          "926:   }",
          "927: }",
          "929: TEST(ParametersTest, UInt64Validation) {",
          "930:   uint64_t value = 0;",
          "931:   {",
          "932:     arangodb::options::UInt64Parameter param(&value, 1, 0, 10, true, true);",
          "933:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "934:     ASSERT_EQ(\"\", param.set(\"1\"));",
          "935:     ASSERT_EQ(\"\", param.set(\"2\"));",
          "936:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "937:     ASSERT_NE(\"\", param.set(\"11\"));",
          "938:     ASSERT_NE(\"\", param.set(\"22\"));",
          "939:   }",
          "941:   {",
          "942:     arangodb::options::UInt64Parameter param(&value, 1, 10, 35, true, true);",
          "943:     ASSERT_EQ(\"\", param.set(\"10\"));",
          "944:     ASSERT_EQ(\"\", param.set(\"11\"));",
          "945:     ASSERT_EQ(\"\", param.set(\"34\"));",
          "946:     ASSERT_EQ(\"\", param.set(\"35\"));",
          "947:     ASSERT_NE(\"\", param.set(\"0\"));",
          "948:     ASSERT_NE(\"\", param.set(\"1\"));",
          "949:     ASSERT_NE(\"\", param.set(\"9\"));",
          "950:     ASSERT_NE(\"\", param.set(\"36\"));",
          "951:     ASSERT_NE(\"\", param.set(\"100\"));",
          "952:   }",
          "954:   {",
          "955:     arangodb::options::UInt64Parameter param(&value, 1, 100, 135, false, true);",
          "956:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "957:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "958:     ASSERT_EQ(\"\", param.set(\"135\"));",
          "959:     ASSERT_NE(\"\", param.set(\"99\"));",
          "960:     ASSERT_NE(\"\", param.set(\"100\"));",
          "961:     ASSERT_NE(\"\", param.set(\"136\"));",
          "962:   }",
          "964:   {",
          "965:     arangodb::options::UInt64Parameter param(&value, 1, 100, 135, false, false);",
          "966:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "967:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "968:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "969:     ASSERT_NE(\"\", param.set(\"135\"));",
          "970:     ASSERT_NE(\"\", param.set(\"99\"));",
          "971:     ASSERT_NE(\"\", param.set(\"100\"));",
          "972:     ASSERT_NE(\"\", param.set(\"136\"));",
          "973:   }",
          "975:   {",
          "976:     arangodb::options::UInt64Parameter param(&value, 1, 100, 135, true, false);",
          "977:     ASSERT_EQ(\"\", param.set(\"100\"));",
          "978:     ASSERT_EQ(\"\", param.set(\"101\"));",
          "979:     ASSERT_EQ(\"\", param.set(\"102\"));",
          "980:     ASSERT_EQ(\"\", param.set(\"134\"));",
          "981:     ASSERT_NE(\"\", param.set(\"99\"));",
          "982:     ASSERT_NE(\"\", param.set(\"135\"));",
          "983:     ASSERT_NE(\"\", param.set(\"136\"));",
          "984:   }",
          "985: }",
          "987: TEST(ParametersTest, DoubleValidation) {",
          "988:   double value = 0.0;",
          "989:   {",
          "990:     arangodb::options::DoubleParameter param(&value, 1.0, 0.0, 10.0, true,",
          "991:                                              true);",
          "992:     ASSERT_EQ(\"\", param.set(\"0\"));",
          "993:     ASSERT_EQ(\"\", param.set(\"0.0\"));",
          "994:     ASSERT_EQ(\"\", param.set(\"0.01\"));",
          "995:     ASSERT_EQ(\"\", param.set(\"0.1\"));",
          "996:     ASSERT_EQ(\"\", param.set(\"1\"));",
          "997:     ASSERT_EQ(\"\", param.set(\"1.5\"));",
          "998:     ASSERT_EQ(\"\", param.set(\"2\"));",
          "999:     ASSERT_EQ(\"\", param.set(\"9.9\"));",
          "1000:     ASSERT_EQ(\"\", param.set(\"9.99999\"));",
          "1001:     ASSERT_EQ(\"\", param.set(\"10.0\"));",
          "1002:     ASSERT_NE(\"\", param.set(\"-1.0\"));",
          "1003:     ASSERT_NE(\"\", param.set(\"-0.01\"));",
          "1004:     ASSERT_NE(\"\", param.set(\"-0.1\"));",
          "1005:     ASSERT_NE(\"\", param.set(\"-0.000001\"));",
          "1006:     ASSERT_NE(\"\", param.set(\"10.00001\"));",
          "1007:     ASSERT_NE(\"\", param.set(\"11\"));",
          "1008:     ASSERT_NE(\"\", param.set(\"22\"));",
          "1009:   }",
          "1011:   {",
          "1012:     arangodb::options::DoubleParameter param(&value, 1.0, 10.2, 35.5, true,",
          "1013:                                              true);",
          "1014:     ASSERT_EQ(\"\", param.set(\"10.2\"));",
          "1015:     ASSERT_EQ(\"\", param.set(\"10.205\"));",
          "1016:     ASSERT_EQ(\"\", param.set(\"11.0\"));",
          "1017:     ASSERT_EQ(\"\", param.set(\"34.0\"));",
          "1018:     ASSERT_EQ(\"\", param.set(\"35.0\"));",
          "1019:     ASSERT_EQ(\"\", param.set(\"35.4999\"));",
          "1020:     ASSERT_EQ(\"\", param.set(\"35.5\"));",
          "1021:     ASSERT_NE(\"\", param.set(\"10.1999\"));",
          "1022:     ASSERT_NE(\"\", param.set(\"35.50001\"));",
          "1023:   }",
          "1025:   {",
          "1026:     arangodb::options::DoubleParameter param(&value, 1.0, 10.2, 35.5, false,",
          "1027:                                              true);",
          "1028:     ASSERT_EQ(\"\", param.set(\"10.201\"));",
          "1029:     ASSERT_EQ(\"\", param.set(\"10.205\"));",
          "1030:     ASSERT_EQ(\"\", param.set(\"11.0\"));",
          "1031:     ASSERT_EQ(\"\", param.set(\"34.0\"));",
          "1032:     ASSERT_EQ(\"\", param.set(\"35.0\"));",
          "1033:     ASSERT_EQ(\"\", param.set(\"35.4999\"));",
          "1034:     ASSERT_EQ(\"\", param.set(\"35.5\"));",
          "1035:     ASSERT_NE(\"\", param.set(\"10.1999\"));",
          "1036:     ASSERT_NE(\"\", param.set(\"10.2\"));",
          "1037:     ASSERT_NE(\"\", param.set(\"35.50001\"));",
          "1038:   }",
          "1040:   {",
          "1041:     arangodb::options::DoubleParameter param(&value, 1.0, 10.2, 35.5, false,",
          "1042:                                              false);",
          "1043:     ASSERT_EQ(\"\", param.set(\"10.201\"));",
          "1044:     ASSERT_EQ(\"\", param.set(\"10.205\"));",
          "1045:     ASSERT_EQ(\"\", param.set(\"11.0\"));",
          "1046:     ASSERT_EQ(\"\", param.set(\"34.0\"));",
          "1047:     ASSERT_EQ(\"\", param.set(\"35.0\"));",
          "1048:     ASSERT_EQ(\"\", param.set(\"35.4999\"));",
          "1049:     ASSERT_NE(\"\", param.set(\"10.1999\"));",
          "1050:     ASSERT_NE(\"\", param.set(\"10.2\"));",
          "1051:     ASSERT_NE(\"\", param.set(\"35.5\"));",
          "1052:     ASSERT_NE(\"\", param.set(\"35.50001\"));",
          "1053:   }",
          "1055:   {",
          "1056:     arangodb::options::DoubleParameter param(&value, 1.0, 10.2, 35.5, true,",
          "1057:                                              false);",
          "1058:     ASSERT_EQ(\"\", param.set(\"10.2\"));",
          "1059:     ASSERT_EQ(\"\", param.set(\"10.201\"));",
          "1060:     ASSERT_EQ(\"\", param.set(\"10.205\"));",
          "1061:     ASSERT_EQ(\"\", param.set(\"11.0\"));",
          "1062:     ASSERT_EQ(\"\", param.set(\"34.0\"));",
          "1063:     ASSERT_EQ(\"\", param.set(\"35.0\"));",
          "1064:     ASSERT_EQ(\"\", param.set(\"35.4999\"));",
          "1065:     ASSERT_NE(\"\", param.set(\"10.1999\"));",
          "1066:     ASSERT_NE(\"\", param.set(\"35.5\"));",
          "1067:     ASSERT_NE(\"\", param.set(\"35.50001\"));",
          "1068:   }",
          "1069: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}