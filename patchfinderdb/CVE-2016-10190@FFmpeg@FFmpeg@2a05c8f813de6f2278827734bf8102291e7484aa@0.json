{
  "cve_id": "CVE-2016-10190",
  "cve_desc": "Heap-based buffer overflow in libavformat/http.c in FFmpeg before 2.8.10, 3.0.x before 3.0.5, 3.1.x before 3.1.6, and 3.2.x before 3.2.2 allows remote web servers to execute arbitrary code via a negative chunk size in an HTTP response.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "2a05c8f813de6f2278827734bf8102291e7484aa",
  "patch_info": {
    "commit_hash": "2a05c8f813de6f2278827734bf8102291e7484aa",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/2a05c8f813de6f2278827734bf8102291e7484aa",
    "files": [
      "libavformat/http.c"
    ],
    "message": "http: make length/offset-related variables unsigned.\n\nFixes #5992, reported and found by Paul Cher <paulcher@icloud.com>.",
    "before_after_code_files": [
      "libavformat/http.c||libavformat/http.c"
    ]
  },
  "patch_diff": {
    "libavformat/http.c||libavformat/http.c": [
      "File: libavformat/http.c -> libavformat/http.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:     int line_count;",
      "63:     int http_code;",
      "67:     char *location;",
      "68:     HTTPAuthState auth_state;",
      "69:     HTTPAuthState proxy_auth_state;",
      "",
      "[Removed Lines]",
      "65:     int64_t chunksize;",
      "66:     int64_t off, end_off, filesize;",
      "",
      "[Added Lines]",
      "65:     uint64_t chunksize;",
      "66:     uint64_t off, end_off, filesize;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95:     AVDictionary *cookie_dict;",
      "96:     int icy;",
      "101:     char *icy_metadata_headers;",
      "102:     char *icy_metadata_packet;",
      "103:     AVDictionary *metadata;",
      "",
      "[Removed Lines]",
      "98:     int icy_data_read;",
      "100:     int icy_metaint;",
      "",
      "[Added Lines]",
      "98:     uint64_t icy_data_read;",
      "100:     uint64_t icy_metaint;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "489:     else",
      "490:         h->is_streamed = 1;",
      "493:     s->location = av_strdup(uri);",
      "494:     if (!s->location)",
      "495:         return AVERROR(ENOMEM);",
      "",
      "[Removed Lines]",
      "492:     s->filesize = -1;",
      "",
      "[Added Lines]",
      "492:     s->filesize = UINT64_MAX;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "617:     if (!strncmp(p, \"bytes \", 6)) {",
      "618:         p     += 6;",
      "620:         if ((slash = strchr(p, '/')) && strlen(slash) > 0)",
      "622:     }",
      "623:     if (s->seekable == -1 && (!s->is_akamai || s->filesize != 2147483647))",
      "",
      "[Removed Lines]",
      "619:         s->off = strtoll(p, NULL, 10);",
      "621:             s->filesize = strtoll(slash + 1, NULL, 10);",
      "",
      "[Added Lines]",
      "619:         s->off = strtoull(p, NULL, 10);",
      "621:             s->filesize = strtoull(slash + 1, NULL, 10);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "808:             if ((ret = parse_location(s, p)) < 0)",
      "809:                 return ret;",
      "813:         } else if (!av_strcasecmp(tag, \"Content-Range\")) {",
      "814:             parse_content_range(h, p);",
      "815:         } else if (!av_strcasecmp(tag, \"Accept-Ranges\") &&",
      "",
      "[Removed Lines]",
      "811:         } else if (!av_strcasecmp(tag, \"Content-Length\") && s->filesize == -1) {",
      "812:             s->filesize = strtoll(p, NULL, 10);",
      "",
      "[Added Lines]",
      "811:         } else if (!av_strcasecmp(tag, \"Content-Length\") &&",
      "812:                    s->filesize == UINT64_MAX) {",
      "813:             s->filesize = strtoull(p, NULL, 10);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "818:             h->is_streamed = 0;",
      "819:         } else if (!av_strcasecmp(tag, \"Transfer-Encoding\") &&",
      "820:                    !av_strncasecmp(p, \"chunked\", 7)) {",
      "822:             s->chunksize = 0;",
      "823:         } else if (!av_strcasecmp(tag, \"WWW-Authenticate\")) {",
      "824:             ff_http_auth_handle_header(&s->auth_state, tag, p);",
      "",
      "[Removed Lines]",
      "821:             s->filesize  = -1;",
      "",
      "[Added Lines]",
      "822:             s->filesize  = UINT64_MAX;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "842:             if (parse_cookie(s, p, &s->cookie_dict))",
      "843:                 av_log(h, AV_LOG_WARNING, \"Unable to parse '%s'\\n\", p);",
      "844:         } else if (!av_strcasecmp(tag, \"Icy-MetaInt\")) {",
      "846:         } else if (!av_strncasecmp(tag, \"Icy-\", 4)) {",
      "847:             if ((ret = parse_icy(s, tag, p)) < 0)",
      "848:                 return ret;",
      "",
      "[Removed Lines]",
      "845:             s->icy_metaint = strtoll(p, NULL, 10);",
      "",
      "[Added Lines]",
      "846:             s->icy_metaint = strtoull(p, NULL, 10);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "972:     char line[MAX_URL_SIZE];",
      "973:     int err = 0;",
      "977:     for (;;) {",
      "978:         if ((err = http_get_line(s, line, sizeof(line))) < 0)",
      "",
      "[Removed Lines]",
      "975:     s->chunksize = -1;",
      "",
      "[Added Lines]",
      "976:     s->chunksize = UINT64_MAX;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1006:     int post, err;",
      "1007:     char headers[HTTP_HEADERS_SIZE] = \"\";",
      "1008:     char *authstr = NULL, *proxyauthstr = NULL;",
      "1010:     int len = 0;",
      "1011:     const char *method;",
      "1012:     int send_expect_100 = 0;",
      "",
      "[Removed Lines]",
      "1009:     int64_t off = s->off;",
      "",
      "[Added Lines]",
      "1010:     uint64_t off = s->off;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1061:     if (!has_header(s->headers, \"\\r\\nRange: \") && !post && (s->off > 0 || s->end_off || s->seekable == -1)) {",
      "1062:         len += av_strlcatf(headers + len, sizeof(headers) - len,",
      "1064:         if (s->end_off)",
      "1065:             len += av_strlcatf(headers + len, sizeof(headers) - len,",
      "1066:                                \"%\"PRId64, s->end_off - 1);",
      "",
      "[Removed Lines]",
      "1063:                            \"Range: bytes=%\"PRId64\"-\", s->off);",
      "",
      "[Added Lines]",
      "1064:                            \"Range: bytes=%\"PRIu64\"-\", s->off);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1135:     s->line_count       = 0;",
      "1136:     s->off              = 0;",
      "1137:     s->icy_data_read    = 0;",
      "1139:     s->willclose        = 0;",
      "1140:     s->end_chunked_post = 0;",
      "1141:     s->end_header       = 0;",
      "",
      "[Removed Lines]",
      "1138:     s->filesize         = -1;",
      "",
      "[Added Lines]",
      "1139:     s->filesize         = UINT64_MAX;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "1175:         memcpy(buf, s->buf_ptr, len);",
      "1176:         s->buf_ptr += len;",
      "1177:     } else {",
      "1181:             return AVERROR_EOF;",
      "1182:         len = ffurl_read(s->hd, buf, size);",
      "1185:             av_log(h, AV_LOG_ERROR,",
      "1187:                    s->off, target_end",
      "1188:                   );",
      "1189:             return AVERROR(EIO);",
      "",
      "[Removed Lines]",
      "1178:         int64_t target_end = s->end_off ? s->end_off : s->filesize;",
      "1179:         if ((!s->willclose || s->chunksize < 0) &&",
      "1180:             target_end >= 0 && s->off >= target_end)",
      "1183:         if (!len && (!s->willclose || s->chunksize < 0) &&",
      "1184:             target_end >= 0 && s->off < target_end) {",
      "1186:                    \"Stream ends prematurely at %\"PRId64\", should be %\"PRId64\"\\n\",",
      "",
      "[Added Lines]",
      "1179:         uint64_t target_end = s->end_off ? s->end_off : s->filesize;",
      "1180:         if ((!s->willclose || s->chunksize == UINT64_MAX) && s->off >= target_end)",
      "1183:         if (!len && (!s->willclose || s->chunksize == UINT64_MAX) && s->off < target_end) {",
      "1185:                    \"Stream ends prematurely at %\"PRIu64\", should be %\"PRIu64\"\\n\",",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1247:             return err;",
      "1248:     }",
      "1251:         if (!s->chunksize) {",
      "1252:             char line[32];",
      "",
      "[Removed Lines]",
      "1250:     if (s->chunksize >= 0) {",
      "",
      "[Added Lines]",
      "1249:     if (s->chunksize != UINT64_MAX) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1256:                         return err;",
      "1262:                         s->chunksize);",
      "1264:                 if (!s->chunksize)",
      "1265:                     return 0;",
      "1266:         }",
      "1267:         size = FFMIN(size, s->chunksize);",
      "1268:     }",
      "",
      "[Removed Lines]",
      "1259:                 s->chunksize = strtoll(line, NULL, 16);",
      "1261:                 av_log(NULL, AV_LOG_TRACE, \"Chunked encoding data size: %\"PRId64\"'\\n\",",
      "",
      "[Added Lines]",
      "1258:                 s->chunksize = strtoull(line, NULL, 16);",
      "1260:                 av_log(h, AV_LOG_TRACE,",
      "1261:                        \"Chunked encoding data size: %\"PRIu64\"'\\n\",",
      "1266:                 else if (s->chunksize == UINT64_MAX) {",
      "1267:                     av_log(h, AV_LOG_ERROR, \"Invalid chunk size %\"PRIu64\"\\n\",",
      "1268:                            s->chunksize);",
      "1269:                     return AVERROR(EINVAL);",
      "1270:                 }",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1273:     read_ret = http_buf_read(h, buf, size);",
      "1274:     if (   (read_ret  < 0 && s->reconnect        && (!h->is_streamed || s->reconnect_streamed) && s->filesize > 0 && s->off < s->filesize)",
      "1275:         || (read_ret == 0 && s->reconnect_at_eof && (!h->is_streamed || s->reconnect_streamed))) {",
      "1278:         if (s->reconnect_delay > s->reconnect_delay_max)",
      "1279:             return AVERROR(EIO);",
      "1282:         av_usleep(1000U*1000*s->reconnect_delay);",
      "1283:         s->reconnect_delay = 1 + 2*s->reconnect_delay;",
      "1284:         seek_ret = http_seek_internal(h, target, SEEK_SET, 1);",
      "1285:         if (seek_ret != target) {",
      "1287:             return read_ret;",
      "1288:         }",
      "",
      "[Removed Lines]",
      "1276:         int64_t target = h->is_streamed ? 0 : s->off;",
      "1281:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRId64\" error=%s.\\n\", s->off, av_err2str(read_ret));",
      "1286:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRId64\".\\n\", target);",
      "",
      "[Added Lines]",
      "1281:         uint64_t target = h->is_streamed ? 0 : s->off;",
      "1286:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRIu64\" error=%s.\\n\", s->off, av_err2str(read_ret));",
      "1291:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRIu64\".\\n\", target);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "1338: {",
      "1339:     HTTPContext *s = h->priv_data;",
      "1344:         return AVERROR_INVALIDDATA;",
      "1346:     if (!remaining) {",
      "",
      "[Removed Lines]",
      "1341:     int remaining = s->icy_metaint - s->icy_data_read;",
      "1343:     if (remaining < 0)",
      "",
      "[Added Lines]",
      "1346:     uint64_t remaining;",
      "1348:     if (s->icy_metaint < s->icy_data_read)",
      "1350:     remaining = s->icy_metaint - s->icy_data_read;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "1455: {",
      "1456:     HTTPContext *s = h->priv_data;",
      "1457:     URLContext *old_hd = s->hd;",
      "1459:     uint8_t old_buf[BUFFER_SIZE];",
      "1460:     int old_buf_size, ret;",
      "1461:     AVDictionary *options = NULL;",
      "",
      "[Removed Lines]",
      "1458:     int64_t old_off = s->off;",
      "",
      "[Added Lines]",
      "1464:     uint64_t old_off = s->off;",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "1466:              ((whence == SEEK_CUR && off == 0) ||",
      "1467:               (whence == SEEK_SET && off == s->off)))",
      "1468:         return s->off;",
      "1470:         return AVERROR(ENOSYS);",
      "1472:     if (whence == SEEK_CUR)",
      "",
      "[Removed Lines]",
      "1469:     else if ((s->filesize == -1 && whence == SEEK_END))",
      "",
      "[Added Lines]",
      "1475:     else if ((s->filesize == UINT64_MAX && whence == SEEK_END))",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "1621:     s->buf_ptr    = s->buffer;",
      "1622:     s->buf_end    = s->buffer;",
      "1623:     s->line_count = 0;",
      "1625:     cur_auth_type = s->proxy_auth_state.auth_type;",
      "",
      "[Removed Lines]",
      "1624:     s->filesize   = -1;",
      "",
      "[Added Lines]",
      "1630:     s->filesize   = UINT64_MAX;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "606b21353df7d08ea203193f3026281737c696a2",
      "candidate_info": {
        "commit_hash": "606b21353df7d08ea203193f3026281737c696a2",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/606b21353df7d08ea203193f3026281737c696a2",
        "files": [
          "libavformat/http.c"
        ],
        "message": "http: make length/offset-related variables unsigned.\n\nFixes #5992, reported and found by Paul Cher <paulcher@icloud.com>.\n\n(cherry picked from commit 2a05c8f813de6f2278827734bf8102291e7484aa)",
        "before_after_code_files": [
          "libavformat/http.c||libavformat/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/http.c||libavformat/http.c"
          ],
          "candidate": [
            "libavformat/http.c||libavformat/http.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/http.c||libavformat/http.c": [
          "File: libavformat/http.c -> libavformat/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     int line_count;",
          "62:     int http_code;",
          "66:     char *location;",
          "67:     HTTPAuthState auth_state;",
          "68:     HTTPAuthState proxy_auth_state;",
          "",
          "[Removed Lines]",
          "64:     int64_t chunksize;",
          "65:     int64_t off, end_off, filesize;",
          "",
          "[Added Lines]",
          "64:     uint64_t chunksize;",
          "65:     uint64_t off, end_off, filesize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:     AVDictionary *cookie_dict;",
          "91:     int icy;",
          "96:     char *icy_metadata_headers;",
          "97:     char *icy_metadata_packet;",
          "98:     AVDictionary *metadata;",
          "",
          "[Removed Lines]",
          "93:     int icy_data_read;",
          "95:     int icy_metaint;",
          "",
          "[Added Lines]",
          "93:     uint64_t icy_data_read;",
          "95:     uint64_t icy_metaint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467:     else",
          "468:         h->is_streamed = 1;",
          "471:     s->location = av_strdup(uri);",
          "472:     if (!s->location)",
          "473:         return AVERROR(ENOMEM);",
          "",
          "[Removed Lines]",
          "470:     s->filesize = -1;",
          "",
          "[Added Lines]",
          "470:     s->filesize = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595:     if (!strncmp(p, \"bytes \", 6)) {",
          "596:         p     += 6;",
          "598:         if ((slash = strchr(p, '/')) && strlen(slash) > 0)",
          "600:     }",
          "601:     if (s->seekable == -1 && (!s->is_akamai || s->filesize != 2147483647))",
          "",
          "[Removed Lines]",
          "597:         s->off = strtoll(p, NULL, 10);",
          "599:             s->filesize = strtoll(slash + 1, NULL, 10);",
          "",
          "[Added Lines]",
          "597:         s->off = strtoull(p, NULL, 10);",
          "599:             s->filesize = strtoull(slash + 1, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "786:             if ((ret = parse_location(s, p)) < 0)",
          "787:                 return ret;",
          "791:         } else if (!av_strcasecmp(tag, \"Content-Range\")) {",
          "792:             parse_content_range(h, p);",
          "793:         } else if (!av_strcasecmp(tag, \"Accept-Ranges\") &&",
          "",
          "[Removed Lines]",
          "789:         } else if (!av_strcasecmp(tag, \"Content-Length\") && s->filesize == -1) {",
          "790:             s->filesize = strtoll(p, NULL, 10);",
          "",
          "[Added Lines]",
          "789:         } else if (!av_strcasecmp(tag, \"Content-Length\") &&",
          "790:                    s->filesize == UINT64_MAX) {",
          "791:             s->filesize = strtoull(p, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "796:             h->is_streamed = 0;",
          "797:         } else if (!av_strcasecmp(tag, \"Transfer-Encoding\") &&",
          "798:                    !av_strncasecmp(p, \"chunked\", 7)) {",
          "800:             s->chunksize = 0;",
          "801:         } else if (!av_strcasecmp(tag, \"WWW-Authenticate\")) {",
          "802:             ff_http_auth_handle_header(&s->auth_state, tag, p);",
          "",
          "[Removed Lines]",
          "799:             s->filesize  = -1;",
          "",
          "[Added Lines]",
          "800:             s->filesize  = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "820:             if (parse_cookie(s, p, &s->cookie_dict))",
          "821:                 av_log(h, AV_LOG_WARNING, \"Unable to parse '%s'\\n\", p);",
          "822:         } else if (!av_strcasecmp(tag, \"Icy-MetaInt\")) {",
          "824:         } else if (!av_strncasecmp(tag, \"Icy-\", 4)) {",
          "825:             if ((ret = parse_icy(s, tag, p)) < 0)",
          "826:                 return ret;",
          "",
          "[Removed Lines]",
          "823:             s->icy_metaint = strtoll(p, NULL, 10);",
          "",
          "[Added Lines]",
          "824:             s->icy_metaint = strtoull(p, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "950:     char line[MAX_URL_SIZE];",
          "951:     int err = 0;",
          "955:     for (;;) {",
          "956:         if ((err = http_get_line(s, line, sizeof(line))) < 0)",
          "",
          "[Removed Lines]",
          "953:     s->chunksize = -1;",
          "",
          "[Added Lines]",
          "954:     s->chunksize = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "984:     int post, err;",
          "985:     char headers[HTTP_HEADERS_SIZE] = \"\";",
          "986:     char *authstr = NULL, *proxyauthstr = NULL;",
          "988:     int len = 0;",
          "989:     const char *method;",
          "990:     int send_expect_100 = 0;",
          "",
          "[Removed Lines]",
          "987:     int64_t off = s->off;",
          "",
          "[Added Lines]",
          "988:     uint64_t off = s->off;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1033:     if (!has_header(s->headers, \"\\r\\nRange: \") && !post && (s->off > 0 || s->end_off || s->seekable == -1)) {",
          "1034:         len += av_strlcatf(headers + len, sizeof(headers) - len,",
          "1036:         if (s->end_off)",
          "1037:             len += av_strlcatf(headers + len, sizeof(headers) - len,",
          "1038:                                \"%\"PRId64, s->end_off - 1);",
          "",
          "[Removed Lines]",
          "1035:                            \"Range: bytes=%\"PRId64\"-\", s->off);",
          "",
          "[Added Lines]",
          "1036:                            \"Range: bytes=%\"PRIu64\"-\", s->off);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1107:     s->line_count       = 0;",
          "1108:     s->off              = 0;",
          "1109:     s->icy_data_read    = 0;",
          "1111:     s->willclose        = 0;",
          "1112:     s->end_chunked_post = 0;",
          "1113:     s->end_header       = 0;",
          "",
          "[Removed Lines]",
          "1110:     s->filesize         = -1;",
          "",
          "[Added Lines]",
          "1111:     s->filesize         = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1147:         memcpy(buf, s->buf_ptr, len);",
          "1148:         s->buf_ptr += len;",
          "1149:     } else {",
          "1152:             return AVERROR_EOF;",
          "1153:         len = ffurl_read(s->hd, buf, size);",
          "1156:             av_log(h, AV_LOG_ERROR,",
          "1158:                    s->off, s->filesize",
          "1159:                   );",
          "1160:             return AVERROR(EIO);",
          "",
          "[Removed Lines]",
          "1150:         if ((!s->willclose || s->chunksize < 0) &&",
          "1151:             s->filesize >= 0 && s->off >= s->filesize)",
          "1154:         if (!len && (!s->willclose || s->chunksize < 0) &&",
          "1155:             s->filesize >= 0 && s->off < s->filesize) {",
          "1157:                    \"Stream ends prematurely at %\"PRId64\", should be %\"PRId64\"\\n\",",
          "",
          "[Added Lines]",
          "1151:         if ((!s->willclose || s->chunksize < 0) && s->off >= s->filesize)",
          "1154:         if (!len && (!s->willclose || s->chunksize < 0) && s->off < s->filesize) {",
          "1156:                    \"Stream ends prematurely at %\"PRIu64\", should be %\"PRIu64\"\\n\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1217:             return err;",
          "1218:     }",
          "1221:         if (!s->chunksize) {",
          "1222:             char line[32];",
          "",
          "[Removed Lines]",
          "1220:     if (s->chunksize >= 0) {",
          "",
          "[Added Lines]",
          "1219:     if (s->chunksize != UINT64_MAX) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1226:                         return err;",
          "1232:                         s->chunksize);",
          "1234:                 if (!s->chunksize)",
          "1235:                     return 0;",
          "1236:         }",
          "1237:         size = FFMIN(size, s->chunksize);",
          "1238:     }",
          "",
          "[Removed Lines]",
          "1229:                 s->chunksize = strtoll(line, NULL, 16);",
          "1231:                 av_log(NULL, AV_LOG_TRACE, \"Chunked encoding data size: %\"PRId64\"'\\n\",",
          "",
          "[Added Lines]",
          "1228:                 s->chunksize = strtoull(line, NULL, 16);",
          "1230:                 av_log(h, AV_LOG_TRACE,",
          "1231:                        \"Chunked encoding data size: %\"PRIu64\"'\\n\",",
          "1236:                 else if (s->chunksize == UINT64_MAX) {",
          "1237:                     av_log(h, AV_LOG_ERROR, \"Invalid chunk size %\"PRIu64\"\\n\",",
          "1238:                            s->chunksize);",
          "1239:                     return AVERROR(EINVAL);",
          "1240:                 }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1243:     read_ret = http_buf_read(h, buf, size);",
          "1244:     if (read_ret < 0 && s->reconnect && !h->is_streamed && s->filesize > 0 && s->off < s->filesize) {",
          "1246:         seek_ret = http_seek_internal(h, s->off, SEEK_SET, 1);",
          "1247:         if (seek_ret != s->off) {",
          "1249:             return read_ret;",
          "1250:         }",
          "",
          "[Removed Lines]",
          "1245:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRId64\".\\n\", s->off);",
          "1248:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRId64\".\\n\", s->off);",
          "",
          "[Added Lines]",
          "1250:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRIu64\".\\n\", s->off);",
          "1253:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRIu64\".\\n\", s->off);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1299: {",
          "1300:     HTTPContext *s = h->priv_data;",
          "1305:         return AVERROR_INVALIDDATA;",
          "1307:     if (!remaining) {",
          "",
          "[Removed Lines]",
          "1302:     int remaining = s->icy_metaint - s->icy_data_read;",
          "1304:     if (remaining < 0)",
          "",
          "[Added Lines]",
          "1307:     uint64_t remaining;",
          "1309:     if (s->icy_metaint < s->icy_data_read)",
          "1311:     remaining = s->icy_metaint - s->icy_data_read;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1416: {",
          "1417:     HTTPContext *s = h->priv_data;",
          "1418:     URLContext *old_hd = s->hd;",
          "1420:     uint8_t old_buf[BUFFER_SIZE];",
          "1421:     int old_buf_size, ret;",
          "1422:     AVDictionary *options = NULL;",
          "",
          "[Removed Lines]",
          "1419:     int64_t old_off = s->off;",
          "",
          "[Added Lines]",
          "1425:     uint64_t old_off = s->off;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1427:              ((whence == SEEK_CUR && off == 0) ||",
          "1428:               (whence == SEEK_SET && off == s->off)))",
          "1429:         return s->off;",
          "1431:         return AVERROR(ENOSYS);",
          "1433:     if (whence == SEEK_CUR)",
          "",
          "[Removed Lines]",
          "1430:     else if ((s->filesize == -1 && whence == SEEK_END) || h->is_streamed)",
          "",
          "[Added Lines]",
          "1436:     else if ((s->filesize == UINT64_MAX && whence == SEEK_END) || h->is_streamed)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1576:     s->buf_ptr    = s->buffer;",
          "1577:     s->buf_end    = s->buffer;",
          "1578:     s->line_count = 0;",
          "1580:     cur_auth_type = s->proxy_auth_state.auth_type;",
          "",
          "[Removed Lines]",
          "1579:     s->filesize   = -1;",
          "",
          "[Added Lines]",
          "1585:     s->filesize   = UINT64_MAX;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e3f0a1c6f39cf2a35bdda85e43970ffc6db797b",
      "candidate_info": {
        "commit_hash": "2e3f0a1c6f39cf2a35bdda85e43970ffc6db797b",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/2e3f0a1c6f39cf2a35bdda85e43970ffc6db797b",
        "files": [
          "libavformat/http.c"
        ],
        "message": "http: make length/offset-related variables unsigned.\n\nFixes #5992, reported and found by Paul Cher <paulcher@icloud.com>.\n\n(cherry picked from commit 2a05c8f813de6f2278827734bf8102291e7484aa)",
        "before_after_code_files": [
          "libavformat/http.c||libavformat/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/http.c||libavformat/http.c"
          ],
          "candidate": [
            "libavformat/http.c||libavformat/http.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/http.c||libavformat/http.c": [
          "File: libavformat/http.c -> libavformat/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     int line_count;",
          "63:     int http_code;",
          "67:     char *location;",
          "68:     HTTPAuthState auth_state;",
          "69:     HTTPAuthState proxy_auth_state;",
          "",
          "[Removed Lines]",
          "65:     int64_t chunksize;",
          "66:     int64_t off, end_off, filesize;",
          "",
          "[Added Lines]",
          "65:     uint64_t chunksize;",
          "66:     uint64_t off, end_off, filesize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     AVDictionary *cookie_dict;",
          "93:     int icy;",
          "98:     char *icy_metadata_headers;",
          "99:     char *icy_metadata_packet;",
          "100:     AVDictionary *metadata;",
          "",
          "[Removed Lines]",
          "95:     int icy_data_read;",
          "97:     int icy_metaint;",
          "",
          "[Added Lines]",
          "95:     uint64_t icy_data_read;",
          "97:     uint64_t icy_metaint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480:     else",
          "481:         h->is_streamed = 1;",
          "484:     s->location = av_strdup(uri);",
          "485:     if (!s->location)",
          "486:         return AVERROR(ENOMEM);",
          "",
          "[Removed Lines]",
          "483:     s->filesize = -1;",
          "",
          "[Added Lines]",
          "483:     s->filesize = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "608:     if (!strncmp(p, \"bytes \", 6)) {",
          "609:         p     += 6;",
          "611:         if ((slash = strchr(p, '/')) && strlen(slash) > 0)",
          "613:     }",
          "614:     if (s->seekable == -1 && (!s->is_akamai || s->filesize != 2147483647))",
          "",
          "[Removed Lines]",
          "610:         s->off = strtoll(p, NULL, 10);",
          "612:             s->filesize = strtoll(slash + 1, NULL, 10);",
          "",
          "[Added Lines]",
          "610:         s->off = strtoull(p, NULL, 10);",
          "612:             s->filesize = strtoull(slash + 1, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "799:             if ((ret = parse_location(s, p)) < 0)",
          "800:                 return ret;",
          "804:         } else if (!av_strcasecmp(tag, \"Content-Range\")) {",
          "805:             parse_content_range(h, p);",
          "806:         } else if (!av_strcasecmp(tag, \"Accept-Ranges\") &&",
          "",
          "[Removed Lines]",
          "802:         } else if (!av_strcasecmp(tag, \"Content-Length\") && s->filesize == -1) {",
          "803:             s->filesize = strtoll(p, NULL, 10);",
          "",
          "[Added Lines]",
          "802:         } else if (!av_strcasecmp(tag, \"Content-Length\") &&",
          "803:                    s->filesize == UINT64_MAX) {",
          "804:             s->filesize = strtoull(p, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809:             h->is_streamed = 0;",
          "810:         } else if (!av_strcasecmp(tag, \"Transfer-Encoding\") &&",
          "811:                    !av_strncasecmp(p, \"chunked\", 7)) {",
          "813:             s->chunksize = 0;",
          "814:         } else if (!av_strcasecmp(tag, \"WWW-Authenticate\")) {",
          "815:             ff_http_auth_handle_header(&s->auth_state, tag, p);",
          "",
          "[Removed Lines]",
          "812:             s->filesize  = -1;",
          "",
          "[Added Lines]",
          "813:             s->filesize  = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "833:             if (parse_cookie(s, p, &s->cookie_dict))",
          "834:                 av_log(h, AV_LOG_WARNING, \"Unable to parse '%s'\\n\", p);",
          "835:         } else if (!av_strcasecmp(tag, \"Icy-MetaInt\")) {",
          "837:         } else if (!av_strncasecmp(tag, \"Icy-\", 4)) {",
          "838:             if ((ret = parse_icy(s, tag, p)) < 0)",
          "839:                 return ret;",
          "",
          "[Removed Lines]",
          "836:             s->icy_metaint = strtoll(p, NULL, 10);",
          "",
          "[Added Lines]",
          "837:             s->icy_metaint = strtoull(p, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "963:     char line[MAX_URL_SIZE];",
          "964:     int err = 0;",
          "968:     for (;;) {",
          "969:         if ((err = http_get_line(s, line, sizeof(line))) < 0)",
          "",
          "[Removed Lines]",
          "966:     s->chunksize = -1;",
          "",
          "[Added Lines]",
          "967:     s->chunksize = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "997:     int post, err;",
          "998:     char headers[HTTP_HEADERS_SIZE] = \"\";",
          "999:     char *authstr = NULL, *proxyauthstr = NULL;",
          "1001:     int len = 0;",
          "1002:     const char *method;",
          "1003:     int send_expect_100 = 0;",
          "",
          "[Removed Lines]",
          "1000:     int64_t off = s->off;",
          "",
          "[Added Lines]",
          "1001:     uint64_t off = s->off;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1046:     if (!has_header(s->headers, \"\\r\\nRange: \") && !post && (s->off > 0 || s->end_off || s->seekable == -1)) {",
          "1047:         len += av_strlcatf(headers + len, sizeof(headers) - len,",
          "1049:         if (s->end_off)",
          "1050:             len += av_strlcatf(headers + len, sizeof(headers) - len,",
          "1051:                                \"%\"PRId64, s->end_off - 1);",
          "",
          "[Removed Lines]",
          "1048:                            \"Range: bytes=%\"PRId64\"-\", s->off);",
          "",
          "[Added Lines]",
          "1049:                            \"Range: bytes=%\"PRIu64\"-\", s->off);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1120:     s->line_count       = 0;",
          "1121:     s->off              = 0;",
          "1122:     s->icy_data_read    = 0;",
          "1124:     s->willclose        = 0;",
          "1125:     s->end_chunked_post = 0;",
          "1126:     s->end_header       = 0;",
          "",
          "[Removed Lines]",
          "1123:     s->filesize         = -1;",
          "",
          "[Added Lines]",
          "1124:     s->filesize         = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1160:         memcpy(buf, s->buf_ptr, len);",
          "1161:         s->buf_ptr += len;",
          "1162:     } else {",
          "1166:             return AVERROR_EOF;",
          "1167:         len = ffurl_read(s->hd, buf, size);",
          "1170:             av_log(h, AV_LOG_ERROR,",
          "1172:                    s->off, target_end",
          "1173:                   );",
          "1174:             return AVERROR(EIO);",
          "",
          "[Removed Lines]",
          "1163:         int64_t target_end = s->end_off ? s->end_off : s->filesize;",
          "1164:         if ((!s->willclose || s->chunksize < 0) &&",
          "1165:             target_end >= 0 && s->off >= target_end)",
          "1168:         if (!len && (!s->willclose || s->chunksize < 0) &&",
          "1169:             target_end >= 0 && s->off < target_end) {",
          "1171:                    \"Stream ends prematurely at %\"PRId64\", should be %\"PRId64\"\\n\",",
          "",
          "[Added Lines]",
          "1164:         uint64_t target_end = s->end_off ? s->end_off : s->filesize;",
          "1165:         if ((!s->willclose || s->chunksize == UINT64_MAX) && s->off >= target_end)",
          "1168:         if (!len && (!s->willclose || s->chunksize == UINT64_MAX) && s->off < target_end) {",
          "1170:                    \"Stream ends prematurely at %\"PRIu64\", should be %\"PRIu64\"\\n\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1231:             return err;",
          "1232:     }",
          "1235:         if (!s->chunksize) {",
          "1236:             char line[32];",
          "",
          "[Removed Lines]",
          "1234:     if (s->chunksize >= 0) {",
          "",
          "[Added Lines]",
          "1233:     if (s->chunksize != UINT64_MAX) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1240:                         return err;",
          "1246:                         s->chunksize);",
          "1248:                 if (!s->chunksize)",
          "1249:                     return 0;",
          "1250:         }",
          "1251:         size = FFMIN(size, s->chunksize);",
          "1252:     }",
          "",
          "[Removed Lines]",
          "1243:                 s->chunksize = strtoll(line, NULL, 16);",
          "1245:                 av_log(NULL, AV_LOG_TRACE, \"Chunked encoding data size: %\"PRId64\"'\\n\",",
          "",
          "[Added Lines]",
          "1242:                 s->chunksize = strtoull(line, NULL, 16);",
          "1244:                 av_log(h, AV_LOG_TRACE,",
          "1245:                        \"Chunked encoding data size: %\"PRIu64\"'\\n\",",
          "1250:                 else if (s->chunksize == UINT64_MAX) {",
          "1251:                     av_log(h, AV_LOG_ERROR, \"Invalid chunk size %\"PRIu64\"\\n\",",
          "1252:                            s->chunksize);",
          "1253:                     return AVERROR(EINVAL);",
          "1254:                 }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1257:     read_ret = http_buf_read(h, buf, size);",
          "1258:     if (   (read_ret  < 0 && s->reconnect        && (!h->is_streamed || s->reconnect_streamed) && s->filesize > 0 && s->off < s->filesize)",
          "1259:         || (read_ret == 0 && s->reconnect_at_eof && (!h->is_streamed || s->reconnect_streamed))) {",
          "1262:         if (s->reconnect_delay > s->reconnect_delay_max)",
          "1263:             return AVERROR(EIO);",
          "1266:         av_usleep(1000U*1000*s->reconnect_delay);",
          "1267:         s->reconnect_delay = 1 + 2*s->reconnect_delay;",
          "1268:         seek_ret = http_seek_internal(h, target, SEEK_SET, 1);",
          "1269:         if (seek_ret != target) {",
          "1271:             return read_ret;",
          "1272:         }",
          "",
          "[Removed Lines]",
          "1260:         int64_t target = h->is_streamed ? 0 : s->off;",
          "1265:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRId64\" error=%s.\\n\", s->off, av_err2str(read_ret));",
          "1270:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRId64\".\\n\", target);",
          "",
          "[Added Lines]",
          "1265:         uint64_t target = h->is_streamed ? 0 : s->off;",
          "1270:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRIu64\" error=%s.\\n\", s->off, av_err2str(read_ret));",
          "1275:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRIu64\".\\n\", target);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1322: {",
          "1323:     HTTPContext *s = h->priv_data;",
          "1328:         return AVERROR_INVALIDDATA;",
          "1330:     if (!remaining) {",
          "",
          "[Removed Lines]",
          "1325:     int remaining = s->icy_metaint - s->icy_data_read;",
          "1327:     if (remaining < 0)",
          "",
          "[Added Lines]",
          "1330:     uint64_t remaining;",
          "1332:     if (s->icy_metaint < s->icy_data_read)",
          "1334:     remaining = s->icy_metaint - s->icy_data_read;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1439: {",
          "1440:     HTTPContext *s = h->priv_data;",
          "1441:     URLContext *old_hd = s->hd;",
          "1443:     uint8_t old_buf[BUFFER_SIZE];",
          "1444:     int old_buf_size, ret;",
          "1445:     AVDictionary *options = NULL;",
          "",
          "[Removed Lines]",
          "1442:     int64_t old_off = s->off;",
          "",
          "[Added Lines]",
          "1448:     uint64_t old_off = s->off;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1450:              ((whence == SEEK_CUR && off == 0) ||",
          "1451:               (whence == SEEK_SET && off == s->off)))",
          "1452:         return s->off;",
          "1454:         return AVERROR(ENOSYS);",
          "1456:     if (whence == SEEK_CUR)",
          "",
          "[Removed Lines]",
          "1453:     else if ((s->filesize == -1 && whence == SEEK_END))",
          "",
          "[Added Lines]",
          "1459:     else if ((s->filesize == UINT64_MAX && whence == SEEK_END))",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1605:     s->buf_ptr    = s->buffer;",
          "1606:     s->buf_end    = s->buffer;",
          "1607:     s->line_count = 0;",
          "1609:     cur_auth_type = s->proxy_auth_state.auth_type;",
          "",
          "[Removed Lines]",
          "1608:     s->filesize   = -1;",
          "",
          "[Added Lines]",
          "1614:     s->filesize   = UINT64_MAX;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e0a413725e0221e1a9d0b7595e22bf57e23a09c",
      "candidate_info": {
        "commit_hash": "0e0a413725e0221e1a9d0b7595e22bf57e23a09c",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/0e0a413725e0221e1a9d0b7595e22bf57e23a09c",
        "files": [
          "libavformat/http.c"
        ],
        "message": "http: make length/offset-related variables unsigned.\n\nFixes #5992, reported and found by Paul Cher <paulcher@icloud.com>.\n\n(cherry picked from commit 2a05c8f813de6f2278827734bf8102291e7484aa)",
        "before_after_code_files": [
          "libavformat/http.c||libavformat/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/http.c||libavformat/http.c"
          ],
          "candidate": [
            "libavformat/http.c||libavformat/http.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/http.c||libavformat/http.c": [
          "File: libavformat/http.c -> libavformat/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     int line_count;",
          "63:     int http_code;",
          "67:     char *location;",
          "68:     HTTPAuthState auth_state;",
          "69:     HTTPAuthState proxy_auth_state;",
          "",
          "[Removed Lines]",
          "65:     int64_t chunksize;",
          "66:     int64_t off, end_off, filesize;",
          "",
          "[Added Lines]",
          "65:     uint64_t chunksize;",
          "66:     uint64_t off, end_off, filesize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     AVDictionary *cookie_dict;",
          "96:     int icy;",
          "101:     char *icy_metadata_headers;",
          "102:     char *icy_metadata_packet;",
          "103:     AVDictionary *metadata;",
          "",
          "[Removed Lines]",
          "98:     int icy_data_read;",
          "100:     int icy_metaint;",
          "",
          "[Added Lines]",
          "98:     uint64_t icy_data_read;",
          "100:     uint64_t icy_metaint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "489:     else",
          "490:         h->is_streamed = 1;",
          "493:     s->location = av_strdup(uri);",
          "494:     if (!s->location)",
          "495:         return AVERROR(ENOMEM);",
          "",
          "[Removed Lines]",
          "492:     s->filesize = -1;",
          "",
          "[Added Lines]",
          "492:     s->filesize = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "617:     if (!strncmp(p, \"bytes \", 6)) {",
          "618:         p     += 6;",
          "620:         if ((slash = strchr(p, '/')) && strlen(slash) > 0)",
          "622:     }",
          "623:     if (s->seekable == -1 && (!s->is_akamai || s->filesize != 2147483647))",
          "",
          "[Removed Lines]",
          "619:         s->off = strtoll(p, NULL, 10);",
          "621:             s->filesize = strtoll(slash + 1, NULL, 10);",
          "",
          "[Added Lines]",
          "619:         s->off = strtoull(p, NULL, 10);",
          "621:             s->filesize = strtoull(slash + 1, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "808:             if ((ret = parse_location(s, p)) < 0)",
          "809:                 return ret;",
          "813:         } else if (!av_strcasecmp(tag, \"Content-Range\")) {",
          "814:             parse_content_range(h, p);",
          "815:         } else if (!av_strcasecmp(tag, \"Accept-Ranges\") &&",
          "",
          "[Removed Lines]",
          "811:         } else if (!av_strcasecmp(tag, \"Content-Length\") && s->filesize == -1) {",
          "812:             s->filesize = strtoll(p, NULL, 10);",
          "",
          "[Added Lines]",
          "811:         } else if (!av_strcasecmp(tag, \"Content-Length\") &&",
          "812:                    s->filesize == UINT64_MAX) {",
          "813:             s->filesize = strtoull(p, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "818:             h->is_streamed = 0;",
          "819:         } else if (!av_strcasecmp(tag, \"Transfer-Encoding\") &&",
          "820:                    !av_strncasecmp(p, \"chunked\", 7)) {",
          "822:             s->chunksize = 0;",
          "823:         } else if (!av_strcasecmp(tag, \"WWW-Authenticate\")) {",
          "824:             ff_http_auth_handle_header(&s->auth_state, tag, p);",
          "",
          "[Removed Lines]",
          "821:             s->filesize  = -1;",
          "",
          "[Added Lines]",
          "822:             s->filesize  = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "842:             if (parse_cookie(s, p, &s->cookie_dict))",
          "843:                 av_log(h, AV_LOG_WARNING, \"Unable to parse '%s'\\n\", p);",
          "844:         } else if (!av_strcasecmp(tag, \"Icy-MetaInt\")) {",
          "846:         } else if (!av_strncasecmp(tag, \"Icy-\", 4)) {",
          "847:             if ((ret = parse_icy(s, tag, p)) < 0)",
          "848:                 return ret;",
          "",
          "[Removed Lines]",
          "845:             s->icy_metaint = strtoll(p, NULL, 10);",
          "",
          "[Added Lines]",
          "846:             s->icy_metaint = strtoull(p, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "972:     char line[MAX_URL_SIZE];",
          "973:     int err = 0;",
          "977:     for (;;) {",
          "978:         if ((err = http_get_line(s, line, sizeof(line))) < 0)",
          "",
          "[Removed Lines]",
          "975:     s->chunksize = -1;",
          "",
          "[Added Lines]",
          "976:     s->chunksize = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1006:     int post, err;",
          "1007:     char headers[HTTP_HEADERS_SIZE] = \"\";",
          "1008:     char *authstr = NULL, *proxyauthstr = NULL;",
          "1010:     int len = 0;",
          "1011:     const char *method;",
          "1012:     int send_expect_100 = 0;",
          "",
          "[Removed Lines]",
          "1009:     int64_t off = s->off;",
          "",
          "[Added Lines]",
          "1010:     uint64_t off = s->off;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1061:     if (!has_header(s->headers, \"\\r\\nRange: \") && !post && (s->off > 0 || s->end_off || s->seekable == -1)) {",
          "1062:         len += av_strlcatf(headers + len, sizeof(headers) - len,",
          "1064:         if (s->end_off)",
          "1065:             len += av_strlcatf(headers + len, sizeof(headers) - len,",
          "1066:                                \"%\"PRId64, s->end_off - 1);",
          "",
          "[Removed Lines]",
          "1063:                            \"Range: bytes=%\"PRId64\"-\", s->off);",
          "",
          "[Added Lines]",
          "1064:                            \"Range: bytes=%\"PRIu64\"-\", s->off);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1135:     s->line_count       = 0;",
          "1136:     s->off              = 0;",
          "1137:     s->icy_data_read    = 0;",
          "1139:     s->willclose        = 0;",
          "1140:     s->end_chunked_post = 0;",
          "1141:     s->end_header       = 0;",
          "",
          "[Removed Lines]",
          "1138:     s->filesize         = -1;",
          "",
          "[Added Lines]",
          "1139:     s->filesize         = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1175:         memcpy(buf, s->buf_ptr, len);",
          "1176:         s->buf_ptr += len;",
          "1177:     } else {",
          "1181:             return AVERROR_EOF;",
          "1182:         len = ffurl_read(s->hd, buf, size);",
          "1185:             av_log(h, AV_LOG_ERROR,",
          "1187:                    s->off, target_end",
          "1188:                   );",
          "1189:             return AVERROR(EIO);",
          "",
          "[Removed Lines]",
          "1178:         int64_t target_end = s->end_off ? s->end_off : s->filesize;",
          "1179:         if ((!s->willclose || s->chunksize < 0) &&",
          "1180:             target_end >= 0 && s->off >= target_end)",
          "1183:         if (!len && (!s->willclose || s->chunksize < 0) &&",
          "1184:             target_end >= 0 && s->off < target_end) {",
          "1186:                    \"Stream ends prematurely at %\"PRId64\", should be %\"PRId64\"\\n\",",
          "",
          "[Added Lines]",
          "1179:         uint64_t target_end = s->end_off ? s->end_off : s->filesize;",
          "1180:         if ((!s->willclose || s->chunksize == UINT64_MAX) && s->off >= target_end)",
          "1183:         if (!len && (!s->willclose || s->chunksize == UINT64_MAX) && s->off < target_end) {",
          "1185:                    \"Stream ends prematurely at %\"PRIu64\", should be %\"PRIu64\"\\n\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1247:             return err;",
          "1248:     }",
          "1251:         if (!s->chunksize) {",
          "1252:             char line[32];",
          "",
          "[Removed Lines]",
          "1250:     if (s->chunksize >= 0) {",
          "",
          "[Added Lines]",
          "1249:     if (s->chunksize != UINT64_MAX) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1256:                         return err;",
          "1262:                         s->chunksize);",
          "1264:                 if (!s->chunksize)",
          "1265:                     return 0;",
          "1266:         }",
          "1267:         size = FFMIN(size, s->chunksize);",
          "1268:     }",
          "",
          "[Removed Lines]",
          "1259:                 s->chunksize = strtoll(line, NULL, 16);",
          "1261:                 av_log(NULL, AV_LOG_TRACE, \"Chunked encoding data size: %\"PRId64\"'\\n\",",
          "",
          "[Added Lines]",
          "1258:                 s->chunksize = strtoull(line, NULL, 16);",
          "1260:                 av_log(h, AV_LOG_TRACE,",
          "1261:                        \"Chunked encoding data size: %\"PRIu64\"'\\n\",",
          "1266:                 else if (s->chunksize == UINT64_MAX) {",
          "1267:                     av_log(h, AV_LOG_ERROR, \"Invalid chunk size %\"PRIu64\"\\n\",",
          "1268:                            s->chunksize);",
          "1269:                     return AVERROR(EINVAL);",
          "1270:                 }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1273:     read_ret = http_buf_read(h, buf, size);",
          "1274:     if (   (read_ret  < 0 && s->reconnect        && (!h->is_streamed || s->reconnect_streamed) && s->filesize > 0 && s->off < s->filesize)",
          "1275:         || (read_ret == 0 && s->reconnect_at_eof && (!h->is_streamed || s->reconnect_streamed))) {",
          "1278:         if (s->reconnect_delay > s->reconnect_delay_max)",
          "1279:             return AVERROR(EIO);",
          "1282:         av_usleep(1000U*1000*s->reconnect_delay);",
          "1283:         s->reconnect_delay = 1 + 2*s->reconnect_delay;",
          "1284:         seek_ret = http_seek_internal(h, target, SEEK_SET, 1);",
          "1285:         if (seek_ret != target) {",
          "1287:             return read_ret;",
          "1288:         }",
          "",
          "[Removed Lines]",
          "1276:         int64_t target = h->is_streamed ? 0 : s->off;",
          "1281:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRId64\" error=%s.\\n\", s->off, av_err2str(read_ret));",
          "1286:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRId64\".\\n\", target);",
          "",
          "[Added Lines]",
          "1281:         uint64_t target = h->is_streamed ? 0 : s->off;",
          "1286:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRIu64\" error=%s.\\n\", s->off, av_err2str(read_ret));",
          "1291:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRIu64\".\\n\", target);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1338: {",
          "1339:     HTTPContext *s = h->priv_data;",
          "1344:         return AVERROR_INVALIDDATA;",
          "1346:     if (!remaining) {",
          "",
          "[Removed Lines]",
          "1341:     int remaining = s->icy_metaint - s->icy_data_read;",
          "1343:     if (remaining < 0)",
          "",
          "[Added Lines]",
          "1346:     uint64_t remaining;",
          "1348:     if (s->icy_metaint < s->icy_data_read)",
          "1350:     remaining = s->icy_metaint - s->icy_data_read;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1455: {",
          "1456:     HTTPContext *s = h->priv_data;",
          "1457:     URLContext *old_hd = s->hd;",
          "1459:     uint8_t old_buf[BUFFER_SIZE];",
          "1460:     int old_buf_size, ret;",
          "1461:     AVDictionary *options = NULL;",
          "",
          "[Removed Lines]",
          "1458:     int64_t old_off = s->off;",
          "",
          "[Added Lines]",
          "1464:     uint64_t old_off = s->off;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1466:              ((whence == SEEK_CUR && off == 0) ||",
          "1467:               (whence == SEEK_SET && off == s->off)))",
          "1468:         return s->off;",
          "1470:         return AVERROR(ENOSYS);",
          "1472:     if (whence == SEEK_CUR)",
          "",
          "[Removed Lines]",
          "1469:     else if ((s->filesize == -1 && whence == SEEK_END))",
          "",
          "[Added Lines]",
          "1475:     else if ((s->filesize == UINT64_MAX && whence == SEEK_END))",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1621:     s->buf_ptr    = s->buffer;",
          "1622:     s->buf_end    = s->buffer;",
          "1623:     s->line_count = 0;",
          "1625:     cur_auth_type = s->proxy_auth_state.auth_type;",
          "",
          "[Removed Lines]",
          "1624:     s->filesize   = -1;",
          "",
          "[Added Lines]",
          "1630:     s->filesize   = UINT64_MAX;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18e3e322b36a85b6f69662e1d5fa7c245638ab86",
      "candidate_info": {
        "commit_hash": "18e3e322b36a85b6f69662e1d5fa7c245638ab86",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/18e3e322b36a85b6f69662e1d5fa7c245638ab86",
        "files": [
          "libavformat/http.c"
        ],
        "message": "http: make length/offset-related variables unsigned.\n\nFixes #5992, reported and found by Paul Cher <paulcher@icloud.com>.\n\n(cherry picked from commit 2a05c8f813de6f2278827734bf8102291e7484aa)",
        "before_after_code_files": [
          "libavformat/http.c||libavformat/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavformat/http.c||libavformat/http.c"
          ],
          "candidate": [
            "libavformat/http.c||libavformat/http.c"
          ]
        }
      },
      "candidate_diff": {
        "libavformat/http.c||libavformat/http.c": [
          "File: libavformat/http.c -> libavformat/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     int line_count;",
          "63:     int http_code;",
          "67:     char *location;",
          "68:     HTTPAuthState auth_state;",
          "69:     HTTPAuthState proxy_auth_state;",
          "",
          "[Removed Lines]",
          "65:     int64_t chunksize;",
          "66:     int64_t off, end_off, filesize;",
          "",
          "[Added Lines]",
          "65:     uint64_t chunksize;",
          "66:     uint64_t off, end_off, filesize;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:     AVDictionary *cookie_dict;",
          "93:     int icy;",
          "98:     char *icy_metadata_headers;",
          "99:     char *icy_metadata_packet;",
          "100:     AVDictionary *metadata;",
          "",
          "[Removed Lines]",
          "95:     int icy_data_read;",
          "97:     int icy_metaint;",
          "",
          "[Added Lines]",
          "95:     uint64_t icy_data_read;",
          "97:     uint64_t icy_metaint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480:     else",
          "481:         h->is_streamed = 1;",
          "484:     s->location = av_strdup(uri);",
          "485:     if (!s->location)",
          "486:         return AVERROR(ENOMEM);",
          "",
          "[Removed Lines]",
          "483:     s->filesize = -1;",
          "",
          "[Added Lines]",
          "483:     s->filesize = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "608:     if (!strncmp(p, \"bytes \", 6)) {",
          "609:         p     += 6;",
          "611:         if ((slash = strchr(p, '/')) && strlen(slash) > 0)",
          "613:     }",
          "614:     if (s->seekable == -1 && (!s->is_akamai || s->filesize != 2147483647))",
          "",
          "[Removed Lines]",
          "610:         s->off = strtoll(p, NULL, 10);",
          "612:             s->filesize = strtoll(slash + 1, NULL, 10);",
          "",
          "[Added Lines]",
          "610:         s->off = strtoull(p, NULL, 10);",
          "612:             s->filesize = strtoull(slash + 1, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "799:             if ((ret = parse_location(s, p)) < 0)",
          "800:                 return ret;",
          "804:         } else if (!av_strcasecmp(tag, \"Content-Range\")) {",
          "805:             parse_content_range(h, p);",
          "806:         } else if (!av_strcasecmp(tag, \"Accept-Ranges\") &&",
          "",
          "[Removed Lines]",
          "802:         } else if (!av_strcasecmp(tag, \"Content-Length\") && s->filesize == -1) {",
          "803:             s->filesize = strtoll(p, NULL, 10);",
          "",
          "[Added Lines]",
          "802:         } else if (!av_strcasecmp(tag, \"Content-Length\") &&",
          "803:                    s->filesize == UINT64_MAX) {",
          "804:             s->filesize = strtoull(p, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "809:             h->is_streamed = 0;",
          "810:         } else if (!av_strcasecmp(tag, \"Transfer-Encoding\") &&",
          "811:                    !av_strncasecmp(p, \"chunked\", 7)) {",
          "813:             s->chunksize = 0;",
          "814:         } else if (!av_strcasecmp(tag, \"WWW-Authenticate\")) {",
          "815:             ff_http_auth_handle_header(&s->auth_state, tag, p);",
          "",
          "[Removed Lines]",
          "812:             s->filesize  = -1;",
          "",
          "[Added Lines]",
          "813:             s->filesize  = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "833:             if (parse_cookie(s, p, &s->cookie_dict))",
          "834:                 av_log(h, AV_LOG_WARNING, \"Unable to parse '%s'\\n\", p);",
          "835:         } else if (!av_strcasecmp(tag, \"Icy-MetaInt\")) {",
          "837:         } else if (!av_strncasecmp(tag, \"Icy-\", 4)) {",
          "838:             if ((ret = parse_icy(s, tag, p)) < 0)",
          "839:                 return ret;",
          "",
          "[Removed Lines]",
          "836:             s->icy_metaint = strtoll(p, NULL, 10);",
          "",
          "[Added Lines]",
          "837:             s->icy_metaint = strtoull(p, NULL, 10);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "963:     char line[MAX_URL_SIZE];",
          "964:     int err = 0;",
          "968:     for (;;) {",
          "969:         if ((err = http_get_line(s, line, sizeof(line))) < 0)",
          "",
          "[Removed Lines]",
          "966:     s->chunksize = -1;",
          "",
          "[Added Lines]",
          "967:     s->chunksize = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "997:     int post, err;",
          "998:     char headers[HTTP_HEADERS_SIZE] = \"\";",
          "999:     char *authstr = NULL, *proxyauthstr = NULL;",
          "1001:     int len = 0;",
          "1002:     const char *method;",
          "1003:     int send_expect_100 = 0;",
          "",
          "[Removed Lines]",
          "1000:     int64_t off = s->off;",
          "",
          "[Added Lines]",
          "1001:     uint64_t off = s->off;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1046:     if (!has_header(s->headers, \"\\r\\nRange: \") && !post && (s->off > 0 || s->end_off || s->seekable == -1)) {",
          "1047:         len += av_strlcatf(headers + len, sizeof(headers) - len,",
          "1049:         if (s->end_off)",
          "1050:             len += av_strlcatf(headers + len, sizeof(headers) - len,",
          "1051:                                \"%\"PRId64, s->end_off - 1);",
          "",
          "[Removed Lines]",
          "1048:                            \"Range: bytes=%\"PRId64\"-\", s->off);",
          "",
          "[Added Lines]",
          "1049:                            \"Range: bytes=%\"PRIu64\"-\", s->off);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1120:     s->line_count       = 0;",
          "1121:     s->off              = 0;",
          "1122:     s->icy_data_read    = 0;",
          "1124:     s->willclose        = 0;",
          "1125:     s->end_chunked_post = 0;",
          "1126:     s->end_header       = 0;",
          "",
          "[Removed Lines]",
          "1123:     s->filesize         = -1;",
          "",
          "[Added Lines]",
          "1124:     s->filesize         = UINT64_MAX;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1160:         memcpy(buf, s->buf_ptr, len);",
          "1161:         s->buf_ptr += len;",
          "1162:     } else {",
          "1166:             return AVERROR_EOF;",
          "1167:         len = ffurl_read(s->hd, buf, size);",
          "1170:             av_log(h, AV_LOG_ERROR,",
          "1172:                    s->off, target_end",
          "1173:                   );",
          "1174:             return AVERROR(EIO);",
          "",
          "[Removed Lines]",
          "1163:         int64_t target_end = s->end_off ? s->end_off : s->filesize;",
          "1164:         if ((!s->willclose || s->chunksize < 0) &&",
          "1165:             target_end >= 0 && s->off >= target_end)",
          "1168:         if (!len && (!s->willclose || s->chunksize < 0) &&",
          "1169:             target_end >= 0 && s->off < target_end) {",
          "1171:                    \"Stream ends prematurely at %\"PRId64\", should be %\"PRId64\"\\n\",",
          "",
          "[Added Lines]",
          "1164:         uint64_t target_end = s->end_off ? s->end_off : s->filesize;",
          "1165:         if ((!s->willclose || s->chunksize == UINT64_MAX) && s->off >= target_end)",
          "1168:         if (!len && (!s->willclose || s->chunksize == UINT64_MAX) && s->off < target_end) {",
          "1170:                    \"Stream ends prematurely at %\"PRIu64\", should be %\"PRIu64\"\\n\",",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1232:             return err;",
          "1233:     }",
          "1236:         if (!s->chunksize) {",
          "1237:             char line[32];",
          "",
          "[Removed Lines]",
          "1235:     if (s->chunksize >= 0) {",
          "",
          "[Added Lines]",
          "1234:     if (s->chunksize != UINT64_MAX) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1241:                         return err;",
          "1247:                         s->chunksize);",
          "1249:                 if (!s->chunksize)",
          "1250:                     return 0;",
          "1251:         }",
          "1252:         size = FFMIN(size, s->chunksize);",
          "1253:     }",
          "",
          "[Removed Lines]",
          "1244:                 s->chunksize = strtoll(line, NULL, 16);",
          "1246:                 av_log(NULL, AV_LOG_TRACE, \"Chunked encoding data size: %\"PRId64\"'\\n\",",
          "",
          "[Added Lines]",
          "1243:                 s->chunksize = strtoull(line, NULL, 16);",
          "1245:                 av_log(h, AV_LOG_TRACE,",
          "1246:                        \"Chunked encoding data size: %\"PRIu64\"'\\n\",",
          "1251:                 else if (s->chunksize == UINT64_MAX) {",
          "1252:                     av_log(h, AV_LOG_ERROR, \"Invalid chunk size %\"PRIu64\"\\n\",",
          "1253:                            s->chunksize);",
          "1254:                     return AVERROR(EINVAL);",
          "1255:                 }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1258:     read_ret = http_buf_read(h, buf, size);",
          "1259:     if (   (read_ret  < 0 && s->reconnect        && (!h->is_streamed || s->reconnect_streamed) && s->filesize > 0 && s->off < s->filesize)",
          "1260:         || (read_ret == 0 && s->reconnect_at_eof && (!h->is_streamed || s->reconnect_streamed))) {",
          "1263:         if (s->reconnect_delay > s->reconnect_delay_max)",
          "1264:             return AVERROR(EIO);",
          "1267:         av_usleep(1000U*1000*s->reconnect_delay);",
          "1268:         s->reconnect_delay = 1 + 2*s->reconnect_delay;",
          "1269:         seek_ret = http_seek_internal(h, target, SEEK_SET, 1);",
          "1270:         if (seek_ret != target) {",
          "1272:             return read_ret;",
          "1273:         }",
          "",
          "[Removed Lines]",
          "1261:         int64_t target = h->is_streamed ? 0 : s->off;",
          "1266:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRId64\" error=%s.\\n\", s->off, av_err2str(read_ret));",
          "1271:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRId64\".\\n\", target);",
          "",
          "[Added Lines]",
          "1266:         uint64_t target = h->is_streamed ? 0 : s->off;",
          "1271:         av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRIu64\" error=%s.\\n\", s->off, av_err2str(read_ret));",
          "1276:             av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRIu64\".\\n\", target);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1323: {",
          "1324:     HTTPContext *s = h->priv_data;",
          "1329:         return AVERROR_INVALIDDATA;",
          "1331:     if (!remaining) {",
          "",
          "[Removed Lines]",
          "1326:     int remaining = s->icy_metaint - s->icy_data_read;",
          "1328:     if (remaining < 0)",
          "",
          "[Added Lines]",
          "1331:     uint64_t remaining;",
          "1333:     if (s->icy_metaint < s->icy_data_read)",
          "1335:     remaining = s->icy_metaint - s->icy_data_read;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1440: {",
          "1441:     HTTPContext *s = h->priv_data;",
          "1442:     URLContext *old_hd = s->hd;",
          "1444:     uint8_t old_buf[BUFFER_SIZE];",
          "1445:     int old_buf_size, ret;",
          "1446:     AVDictionary *options = NULL;",
          "",
          "[Removed Lines]",
          "1443:     int64_t old_off = s->off;",
          "",
          "[Added Lines]",
          "1449:     uint64_t old_off = s->off;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1451:              ((whence == SEEK_CUR && off == 0) ||",
          "1452:               (whence == SEEK_SET && off == s->off)))",
          "1453:         return s->off;",
          "1455:         return AVERROR(ENOSYS);",
          "1457:     if (whence == SEEK_CUR)",
          "",
          "[Removed Lines]",
          "1454:     else if ((s->filesize == -1 && whence == SEEK_END))",
          "",
          "[Added Lines]",
          "1460:     else if ((s->filesize == UINT64_MAX && whence == SEEK_END))",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1606:     s->buf_ptr    = s->buffer;",
          "1607:     s->buf_end    = s->buffer;",
          "1608:     s->line_count = 0;",
          "1610:     cur_auth_type = s->proxy_auth_state.auth_type;",
          "",
          "[Removed Lines]",
          "1609:     s->filesize   = -1;",
          "",
          "[Added Lines]",
          "1615:     s->filesize   = UINT64_MAX;",
          "",
          "---------------"
        ]
      }
    }
  ]
}