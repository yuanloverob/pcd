{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7dcf9c9a00a220555d3211b58afd8d49d4dfb71",
      "candidate_info": {
        "commit_hash": "c7dcf9c9a00a220555d3211b58afd8d49d4dfb71",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c7dcf9c9a00a220555d3211b58afd8d49d4dfb71",
        "files": [
          "arch/ARM/ARMMapping.c"
        ],
        "message": "Fix classification of ARM jump instructions\n\nAll jump instructions have been classified based on the direct\nand indirect_branch flags instead of explicitly stating ARM_GRP_JUMP.",
        "before_after_code_files": [
          "arch/ARM/ARMMapping.c||arch/ARM/ARMMapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMMapping.c||arch/ARM/ARMMapping.c": [
          "File: arch/ARM/ARMMapping.c -> arch/ARM/ARMMapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "422:  {",
          "423:   ARM_BL, ARM_INS_BL,",
          "424: #ifndef CAPSTONE_DIET",
          "426: #endif",
          "427:  },",
          "428:  {",
          "429:   ARM_BLX, ARM_INS_BLX,",
          "430: #ifndef CAPSTONE_DIET",
          "432: #endif",
          "433:  },",
          "434:  {",
          "435:   ARM_BLX_pred, ARM_INS_BLX,",
          "436: #ifndef CAPSTONE_DIET",
          "438: #endif",
          "439:  },",
          "440:  {",
          "441:   ARM_BLXi, ARM_INS_BLX,",
          "442: #ifndef CAPSTONE_DIET",
          "444: #endif",
          "445:  },",
          "446:  {",
          "447:   ARM_BL_pred, ARM_INS_BL,",
          "448: #ifndef CAPSTONE_DIET",
          "450: #endif",
          "451:  },",
          "452:  {",
          "453:   ARM_BX, ARM_INS_BX,",
          "454: #ifndef CAPSTONE_DIET",
          "456: #endif",
          "457:  },",
          "458:  {",
          "459:   ARM_BXJ, ARM_INS_BXJ,",
          "460: #ifndef CAPSTONE_DIET",
          "462: #endif",
          "463:  },",
          "464:  {",
          "465:   ARM_BX_RET, ARM_INS_BX,",
          "466: #ifndef CAPSTONE_DIET",
          "468: #endif",
          "469:  },",
          "470:  {",
          "471:   ARM_BX_pred, ARM_INS_BX,",
          "472: #ifndef CAPSTONE_DIET",
          "474: #endif",
          "475:  },",
          "476:  {",
          "477:   ARM_Bcc, ARM_INS_B,",
          "478: #ifndef CAPSTONE_DIET",
          "480: #endif",
          "481:  },",
          "482:  {",
          "",
          "[Removed Lines]",
          "425:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, 0 }, 0, 0",
          "431:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, ARM_GRP_V5T, 0 }, 0, 0",
          "437:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, ARM_GRP_V5T, 0 }, 0, 0",
          "443:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, ARM_GRP_V5T, 0 }, 0, 0",
          "449:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, 0 }, 0, 0",
          "455:   { 0 }, { 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, ARM_GRP_V4T, 0 }, 1, 1",
          "461:   { 0 }, { 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, 0 }, 0, 0",
          "467:   { 0 }, { 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, ARM_GRP_V4T, 0 }, 0, 0",
          "473:   { 0 }, { 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, ARM_GRP_V4T, 0 }, 1, 1",
          "479:   { 0 }, { 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, 0 }, 1, 0",
          "",
          "[Added Lines]",
          "425:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_ARM, 0 }, 1, 0",
          "431:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_ARM, ARM_GRP_V5T, 0 }, 0, 1",
          "437:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_ARM, ARM_GRP_V5T, 0 }, 0, 1",
          "443:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_ARM, ARM_GRP_V5T, 0 }, 1, 0",
          "449:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_ARM, 0 }, 1, 0",
          "455:   { 0 }, { 0 }, { ARM_GRP_JUMP, ARM_GRP_ARM, ARM_GRP_V4T, 0 }, 0, 1",
          "461:   { 0 }, { 0 }, { ARM_GRP_ARM, 0 }, 0, 1",
          "467:   { 0 }, { 0 }, { ARM_GRP_ARM, ARM_GRP_V4T, 0 }, 0, 1",
          "473:   { 0 }, { 0 }, { ARM_GRP_ARM, ARM_GRP_V4T, 0 }, 0, 1",
          "479:   { 0 }, { 0 }, { ARM_GRP_ARM, 0 }, 1, 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10982:  {",
          "10983:   ARM_t2B, ARM_INS_B,",
          "10984: #ifndef CAPSTONE_DIET",
          "10986: #endif",
          "10987:  },",
          "10988:  {",
          "",
          "[Removed Lines]",
          "10985:   { 0 }, { 0 }, { ARM_GRP_JUMP, ARM_GRP_THUMB2, 0 }, 1, 0",
          "",
          "[Added Lines]",
          "10985:   { 0 }, { 0 }, { ARM_GRP_THUMB2, 0 }, 1, 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11018:  {",
          "11019:   ARM_t2BXJ, ARM_INS_BXJ,",
          "11020: #ifndef CAPSTONE_DIET",
          "11022: #endif",
          "11023:  },",
          "11024:  {",
          "",
          "[Removed Lines]",
          "11021:   { 0 }, { 0 }, { ARM_GRP_THUMB2, ARM_GRP_NOTMCLASS, ARM_GRP_PREV8, 0 }, 0, 0",
          "",
          "[Added Lines]",
          "11021:   { 0 }, { 0 }, { ARM_GRP_THUMB2, ARM_GRP_NOTMCLASS, ARM_GRP_PREV8, 0 }, 0, 1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12806:  {",
          "12807:   ARM_t2TBB, ARM_INS_TBB,",
          "12808: #ifndef CAPSTONE_DIET",
          "12810: #endif",
          "12811:  },",
          "12812:  {",
          "12813:   ARM_t2TBH, ARM_INS_TBH,",
          "12814: #ifndef CAPSTONE_DIET",
          "12816: #endif",
          "12817:  },",
          "12818:  {",
          "",
          "[Removed Lines]",
          "12809:   { 0 }, { 0 }, { ARM_GRP_THUMB2, 0 }, 1, 1",
          "12815:   { 0 }, { 0 }, { ARM_GRP_THUMB2, 0 }, 1, 1",
          "",
          "[Added Lines]",
          "12809:   { 0 }, { 0 }, { ARM_GRP_THUMB2, 0 }, 0, 1",
          "12815:   { 0 }, { 0 }, { ARM_GRP_THUMB2, 0 }, 0, 1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "13154:  {",
          "13155:   ARM_tBL, ARM_INS_BL,",
          "13156: #ifndef CAPSTONE_DIET",
          "13158: #endif",
          "13159:  },",
          "13160:  {",
          "13161:   ARM_tBLXi, ARM_INS_BLX,",
          "13162: #ifndef CAPSTONE_DIET",
          "13164: #endif",
          "13165:  },",
          "13166:  {",
          "13167:   ARM_tBLXr, ARM_INS_BLX,",
          "13168: #ifndef CAPSTONE_DIET",
          "13170: #endif",
          "13171:  },",
          "13172:  {",
          "13173:   ARM_tBX, ARM_INS_BX,",
          "13174: #ifndef CAPSTONE_DIET",
          "13176: #endif",
          "13177:  },",
          "13178:  {",
          "",
          "[Removed Lines]",
          "13157:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_THUMB, 0 }, 0, 0",
          "13163:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_THUMB, ARM_GRP_V5T, ARM_GRP_NOTMCLASS, 0 }, 0, 0",
          "13169:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_THUMB, ARM_GRP_V5T, 0 }, 0, 0",
          "13175:   { 0 }, { 0 }, { ARM_GRP_THUMB, 0 }, 1, 1",
          "",
          "[Added Lines]",
          "13157:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_THUMB, 0 }, 1, 0",
          "13163:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_THUMB, ARM_GRP_V5T, ARM_GRP_NOTMCLASS, 0 }, 1, 0",
          "13169:   { ARM_REG_PC, 0 }, { ARM_REG_LR, 0 }, { ARM_GRP_THUMB, ARM_GRP_V5T, 0 }, 0, 1",
          "13175:   { 0 }, { 0 }, { ARM_GRP_THUMB, 0 }, 0, 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69f4206413c23ae0604310745ce6aac3845c2ee1",
      "candidate_info": {
        "commit_hash": "69f4206413c23ae0604310745ce6aac3845c2ee1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/69f4206413c23ae0604310745ce6aac3845c2ee1",
        "files": [
          "tests/test_x86.c"
        ],
        "message": "tests: cleanup",
        "before_after_code_files": [
          "tests/test_x86.c||tests/test_x86.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_x86.c||tests/test_x86.c": [
          "File: tests/test_x86.c -> tests/test_x86.c"
        ]
      }
    },
    {
      "candidate_hash": "08da0c053368b00c61728aad54b395c1d6a4e6ef",
      "candidate_info": {
        "commit_hash": "08da0c053368b00c61728aad54b395c1d6a4e6ef",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/08da0c053368b00c61728aad54b395c1d6a4e6ef",
        "files": [
          "cstool/cstool.c",
          "cstool/cstool_arm.c",
          "cstool/cstool_arm64.c",
          "cstool/cstool_mips.c",
          "cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c",
          "cstool/cstool_xcore.c"
        ],
        "message": "cstool : print all debug information for all arch.",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c",
          "cstool/cstool_arm.c||cstool/cstool_arm.c",
          "cstool/cstool_arm64.c||cstool/cstool_arm64.c",
          "cstool/cstool_mips.c||cstool/cstool_mips.c",
          "cstool/cstool_ppc.c||cstool/cstool_ppc.c",
          "cstool/cstool_sparc.c||cstool/cstool_sparc.c",
          "cstool/cstool_systemz.c||cstool/cstool_systemz.c",
          "cstool/cstool_xcore.c||cstool/cstool_xcore.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #define VERSION \"1.0\"",
          "12: void print_insn_detail_x86(csh ud, cs_mode mode, cs_insn *ins);",
          "15: static uint8_t char_to_hexnum(char c)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: void print_insn_detail_arm(csh handle, cs_insn *ins);",
          "14: void print_insn_detail_arm64(csh handle, cs_insn *ins);",
          "15: void print_insn_detail_mips(csh handle, cs_insn *ins);",
          "16: void print_insn_detail_ppc(csh handle, cs_insn *ins);",
          "17: void print_insn_detail_sparc(csh handle, cs_insn *ins);",
          "18: void print_insn_detail_sysz(csh handle, cs_insn *ins);",
          "19: void print_insn_detail_xcore(csh handle, cs_insn *ins);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:  cs_insn *insn;",
          "118:  cs_err err;",
          "119:     cs_mode md;",
          "123:  if (argc != 3 && argc != 4 && argc != 5) {",
          "124:   usage(argv[0]);",
          "",
          "[Removed Lines]",
          "120:     char *platform;",
          "121:     bool x86_arch = false, debug_flag = false;",
          "",
          "[Added Lines]",
          "127:     char *arch;",
          "128:     bool debug_flag = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:     }",
          "168:  if (!strcmp(mode, \"arm\")) {",
          "169:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "170:  }",
          "172:  if (!strcmp(mode, \"armb\")) {",
          "173:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "174:  }",
          "176:  if (!strcmp(mode, \"arml\")) {",
          "177:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "178:  }",
          "180:  if (!strcmp(mode, \"thumb\")) {",
          "182:  }",
          "184:  if (!strcmp(mode, \"thumbbe\")) {",
          "185:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "186:  }",
          "188:  if (!strcmp(mode, \"thumble\")) {",
          "189:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "190:  }",
          "192:  if (!strcmp(mode, \"arm64\")) {",
          "193:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "194:  }",
          "196:  if (!strcmp(mode, \"mips\")) {",
          "197:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "198:  }",
          "200:  if (!strcmp(mode, \"mipsbe\")) {",
          "201:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "202:  }",
          "204:  if (!strcmp(mode, \"mips64\")) {",
          "205:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "206:  }",
          "208:  if (!strcmp(mode, \"mips64be\")) {",
          "209:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "210:  }",
          "212:  if (!strcmp(mode, \"x16\")) {",
          "214:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "215:  }",
          "217:  if (!strcmp(mode, \"x32\")) {",
          "218:         md = CS_MODE_32;",
          "221:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "222:  }",
          "224:  if (!strcmp(mode, \"x64\")) {",
          "226:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "227:  }",
          "229:  if (!strcmp(mode, \"x16att\")) {",
          "231:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "232:   if (!err) {",
          "233:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "181:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "213:   x86_arch = true;",
          "219:         platform = \"x32\";",
          "220:   x86_arch = true;",
          "225:   x86_arch = true;",
          "230:   x86_arch = true;",
          "",
          "[Added Lines]",
          "176:         arch = \"arm\";",
          "181:         arch = \"arm\";",
          "186:         arch = \"arm\";",
          "191:         arch = \"arm\";",
          "192:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "196:         arch = \"arm\";",
          "201:         arch = \"arm\";",
          "206:         arch = \"arm64\";",
          "211:         arch = \"mips\";",
          "216:         arch = \"mips\";",
          "221:         arch = \"mips\";",
          "226:         arch = \"mips\";",
          "231:   arch = \"x86\";",
          "237:   arch = \"x86\";",
          "242:         md = CS_MODE_64;",
          "243:         arch = \"x86\";",
          "248:         md = CS_MODE_16;",
          "249:         arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:  }",
          "237:  if (!strcmp(mode,\"x32att\")) {",
          "239:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "240:   if (!err) {",
          "241:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "238:   x86_arch = true;",
          "",
          "[Added Lines]",
          "257:         md = CS_MODE_32;",
          "258:         arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "243:  }",
          "245:  if (!strcmp(mode,\"x64att\")) {",
          "247:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "248:   if (!err) {",
          "249:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "246:   x86_arch = true;",
          "",
          "[Added Lines]",
          "266:         md = CS_MODE_64;",
          "267:         arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "251:  }",
          "253:  if (!strcmp(mode,\"ppc64\")) {",
          "254:   err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "255:  }",
          "257:  if (!strcmp(mode,\"ppc64be\")) {",
          "258:   err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "259:  }",
          "261:  if (!strcmp(mode,\"sparc\")) {",
          "262:   err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "263:  }",
          "265:  if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "266:   err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "267:  }",
          "269:  if (!strcmp(mode,\"xcore\")) {",
          "270:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "271:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:         arch = \"ppc\";",
          "280:          arch = \"ppc\";",
          "285:         arch = \"sparc\";",
          "290:         arch = \"sysz\";",
          "295:         arch = \"xcore\";",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "292:    }",
          "296:     for (; j < 16; j++) {",
          "297:      printf(\"  \");",
          "298:     }",
          "299:    }",
          "300:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "303:                     print_insn_detail_x86(handle, md, &insn[i]);",
          "304:                 }",
          "305:             }",
          "306:   }",
          "307:   cs_free(insn, count);",
          "",
          "[Removed Lines]",
          "295:    if (x86_arch) {",
          "301:             if (debug_flag) {",
          "302:                 if (x86_arch) {",
          "",
          "[Added Lines]",
          "321:    if (!strcmp(arch, \"x86\")) {",
          "327:             if (debug_flag) {//different mode should call different print functions",
          "328:                 if (!strcmp(arch, \"x86\")) {",
          "332:                 if (!strcmp(arch, \"arm\")) {",
          "333:                     print_insn_detail_arm(handle, &insn[i]);",
          "334:                 }",
          "336:                 if (!strcmp(arch,\"arm64\")) {",
          "337:                     print_insn_detail_arm64(handle,&insn[i]);",
          "338:                 }",
          "340:                 if (!strcmp(arch, \"mips\")) {",
          "341:                     print_insn_detail_mips(handle, &insn[i]);",
          "342:                 }",
          "344:                 if (!strcmp(arch, \"ppc\")) {",
          "345:                     print_insn_detail_ppc(handle, &insn[i]);",
          "346:                 }",
          "348:                 if (!strcmp(arch, \"sparc\")) {",
          "349:                     print_insn_detail_sparc(handle, &insn[i]);",
          "350:                 }",
          "352:                 if (!strcmp(arch, \"sysz\")) {",
          "353:                     print_insn_detail_sysz(handle, &insn[i]);",
          "354:                 }",
          "356:                 if (!strcmp(arch, \"xcore\")) {",
          "357:                     print_insn_detail_xcore(handle, &insn[i]);",
          "358:                 }",
          "",
          "---------------"
        ],
        "cstool/cstool_arm.c||cstool/cstool_arm.c": [
          "File: cstool/cstool_arm.c -> cstool/cstool_arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <stdio.h>",
          "2: #include <stdlib.h>",
          "4: #include <platform.h>",
          "5: #include <capstone.h>",
          "8: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "9: {",
          "10:     unsigned char *c;",
          "12:     printf(\"%s\", comment);",
          "13:     for (c = str; c < str + len; c++) {",
          "14:         printf(\"0x%02x \", *c & 0xff);",
          "15:     }",
          "17:     printf(\"\\n\");",
          "18: }",
          "20: void print_insn_detail_arm(csh handle, cs_insn *ins)",
          "21: {",
          "22:     cs_arm *arm;",
          "23:     int i;",
          "26:     if (ins->detail == NULL)",
          "27:         return;",
          "29:     arm = &(ins->detail->arm);",
          "31:     if (arm->op_count)",
          "32:         printf(\"\\top_count: %u\\n\", arm->op_count);",
          "34:     for (i = 0; i < arm->op_count; i++) {",
          "35:         cs_arm_op *op = &(arm->operands[i]);",
          "36:         switch((int)op->type) {",
          "37:             default:",
          "38:                 break;",
          "39:             case ARM_OP_REG:",
          "40:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "41:                 break;",
          "42:             case ARM_OP_IMM:",
          "43:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "44:                 break;",
          "45:             case ARM_OP_FP:",
          "46: #if defined(_KERNEL_MODE)",
          "48:                 printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "49: #else",
          "50:                 printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "51: #endif",
          "52:                 break;",
          "53:             case ARM_OP_MEM:",
          "54:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "55:                 if (op->mem.base != X86_REG_INVALID)",
          "56:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "57:                            i, cs_reg_name(handle, op->mem.base));",
          "58:                 if (op->mem.index != X86_REG_INVALID)",
          "59:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "60:                            i, cs_reg_name(handle, op->mem.index));",
          "61:                 if (op->mem.scale != 1)",
          "62:                     printf(\"\\t\\t\\toperands[%u].mem.scale: %u\\n\", i, op->mem.scale);",
          "63:                 if (op->mem.disp != 0)",
          "64:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "66:                 break;",
          "67:             case ARM_OP_PIMM:",
          "68:                 printf(\"\\t\\toperands[%u].type: P-IMM = %u\\n\", i, op->imm);",
          "69:                 break;",
          "70:             case ARM_OP_CIMM:",
          "71:                 printf(\"\\t\\toperands[%u].type: C-IMM = %u\\n\", i, op->imm);",
          "72:                 break;",
          "73:             case ARM_OP_SETEND:",
          "74:                 printf(\"\\t\\toperands[%u].type: SETEND = %s\\n\", i, op->setend == ARM_SETEND_BE? \"be\" : \"le\");",
          "75:                 break;",
          "76:             case ARM_OP_SYSREG:",
          "77:                 printf(\"\\t\\toperands[%u].type: SYSREG = %u\\n\", i, op->reg);",
          "78:                 break;",
          "79:         }",
          "81:         if (op->shift.type != ARM_SFT_INVALID && op->shift.value) {",
          "82:             if (op->shift.type < ARM_SFT_ASR_REG)",
          "84:                 printf(\"\\t\\t\\tShift: %u = %u\\n\", op->shift.type, op->shift.value);",
          "85:             else",
          "87:                 printf(\"\\t\\t\\tShift: %u = %s\\n\", op->shift.type,",
          "88:                        cs_reg_name(handle, op->shift.value));",
          "89:         }",
          "91:         if (op->vector_index != -1) {",
          "92:             printf(\"\\t\\toperands[%u].vector_index = %u\\n\", i, op->vector_index);",
          "93:         }",
          "95:         if (op->subtracted)",
          "96:             printf(\"\\t\\tSubtracted: True\\n\");",
          "97:     }",
          "99:     if (arm->cc != ARM_CC_AL && arm->cc != ARM_CC_INVALID)",
          "100:         printf(\"\\tCode condition: %u\\n\", arm->cc);",
          "102:     if (arm->update_flags)",
          "103:         printf(\"\\tUpdate-flags: True\\n\");",
          "105:     if (arm->writeback)",
          "106:         printf(\"\\tWrite-back: True\\n\");",
          "108:     if (arm->cps_mode)",
          "109:         printf(\"\\tCPSI-mode: %u\\n\", arm->cps_mode);",
          "111:     if (arm->cps_flag)",
          "112:         printf(\"\\tCPSI-flag: %u\\n\", arm->cps_flag);",
          "114:     if (arm->vector_data)",
          "115:         printf(\"\\tVector-data: %u\\n\", arm->vector_data);",
          "117:     if (arm->vector_size)",
          "118:         printf(\"\\tVector-size: %u\\n\", arm->vector_size);",
          "120:     if (arm->usermode)",
          "121:         printf(\"\\tUser-mode: True\\n\");",
          "123:     if (arm->mem_barrier)",
          "124:         printf(\"\\tMemory-barrier: %u\\n\", arm->mem_barrier);",
          "126:     printf(\"\\n\");",
          "127: }",
          "",
          "---------------"
        ],
        "cstool/cstool_arm64.c||cstool/cstool_arm64.c": [
          "File: cstool/cstool_arm64.c -> cstool/cstool_arm64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "7: #include <platform.h>",
          "8: #include <capstone.h>",
          "11: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "12: {",
          "13:     unsigned char *c;",
          "15:     printf(\"%s\", comment);",
          "16:     for (c = str; c < str + len; c++) {",
          "17:         printf(\"0x%02x \", *c & 0xff);",
          "18:     }",
          "20:     printf(\"\\n\");",
          "21: }",
          "23: void print_insn_detail_arm64(csh handle, cs_insn *ins)",
          "24: {",
          "25:     cs_arm64 *arm64;",
          "26:     int i;",
          "29:     if (ins->detail == NULL)",
          "30:         return;",
          "32:     arm64 = &(ins->detail->arm64);",
          "33:     if (arm64->op_count)",
          "34:         printf(\"\\top_count: %u\\n\", arm64->op_count);",
          "36:     for (i = 0; i < arm64->op_count; i++) {",
          "37:         cs_arm64_op *op = &(arm64->operands[i]);",
          "38:         switch(op->type) {",
          "39:             default:",
          "40:                 break;",
          "41:             case ARM64_OP_REG:",
          "42:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "43:                 break;",
          "44:             case ARM64_OP_IMM:",
          "45:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "46:                 break;",
          "47:             case ARM64_OP_FP:",
          "48: #if defined(_KERNEL_MODE)",
          "50:                 printf(\"\\t\\toperands[%u].type: FP = <float_point_unsupported>\\n\", i);",
          "51: #else",
          "52:                 printf(\"\\t\\toperands[%u].type: FP = %f\\n\", i, op->fp);",
          "53: #endif",
          "54:                 break;",
          "55:             case ARM64_OP_MEM:",
          "56:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "57:                 if (op->mem.base != ARM64_REG_INVALID)",
          "58:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\", i, cs_reg_name(handle, op->mem.base));",
          "59:                 if (op->mem.index != ARM64_REG_INVALID)",
          "60:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\", i, cs_reg_name(handle, op->mem.index));",
          "61:                 if (op->mem.disp != 0)",
          "62:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "64:                 break;",
          "65:             case ARM64_OP_CIMM:",
          "66:                 printf(\"\\t\\toperands[%u].type: C-IMM = %u\\n\", i, (int)op->imm);",
          "67:                 break;",
          "68:             case ARM64_OP_REG_MRS:",
          "69:                 printf(\"\\t\\toperands[%u].type: REG_MRS = 0x%x\\n\", i, op->reg);",
          "70:                 break;",
          "71:             case ARM64_OP_REG_MSR:",
          "72:                 printf(\"\\t\\toperands[%u].type: REG_MSR = 0x%x\\n\", i, op->reg);",
          "73:                 break;",
          "74:             case ARM64_OP_PSTATE:",
          "75:                 printf(\"\\t\\toperands[%u].type: PSTATE = 0x%x\\n\", i, op->pstate);",
          "76:                 break;",
          "77:             case ARM64_OP_SYS:",
          "78:                 printf(\"\\t\\toperands[%u].type: SYS = 0x%x\\n\", i, op->sys);",
          "79:                 break;",
          "80:             case ARM64_OP_PREFETCH:",
          "81:                 printf(\"\\t\\toperands[%u].type: PREFETCH = 0x%x\\n\", i, op->prefetch);",
          "82:                 break;",
          "83:             case ARM64_OP_BARRIER:",
          "84:                 printf(\"\\t\\toperands[%u].type: BARRIER = 0x%x\\n\", i, op->barrier);",
          "85:                 break;",
          "86:         }",
          "88:         if (op->shift.type != ARM64_SFT_INVALID &&",
          "89:             op->shift.value)",
          "90:             printf(\"\\t\\t\\tShift: type = %u, value = %u\\n\",",
          "91:                    op->shift.type, op->shift.value);",
          "93:         if (op->ext != ARM64_EXT_INVALID)",
          "94:             printf(\"\\t\\t\\tExt: %u\\n\", op->ext);",
          "96:         if (op->vas != ARM64_VAS_INVALID)",
          "97:             printf(\"\\t\\t\\tVector Arrangement Specifier: 0x%x\\n\", op->vas);",
          "99:         if (op->vess != ARM64_VESS_INVALID)",
          "100:             printf(\"\\t\\t\\tVector Element Size Specifier: %u\\n\", op->vess);",
          "102:         if (op->vector_index != -1)",
          "103:             printf(\"\\t\\t\\tVector Index: %u\\n\", op->vector_index);",
          "104:     }",
          "106:     if (arm64->update_flags)",
          "107:         printf(\"\\tUpdate-flags: True\\n\");",
          "109:     if (arm64->writeback)",
          "110:         printf(\"\\tWrite-back: True\\n\");",
          "112:     if (arm64->cc)",
          "113:         printf(\"\\tCode-condition: %u\\n\", arm64->cc);",
          "115:     printf(\"\\n\");",
          "116: }",
          "",
          "---------------"
        ],
        "cstool/cstool_mips.c||cstool/cstool_mips.c": [
          "File: cstool/cstool_mips.c -> cstool/cstool_mips.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "5: #include <stdlib.h>",
          "7: #include <platform.h>",
          "8: #include <capstone.h>",
          "11: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "12: {",
          "13:     unsigned char *c;",
          "15:     printf(\"%s\", comment);",
          "16:     for (c = str; c < str + len; c++) {",
          "17:         printf(\"0x%02x \", *c & 0xff);",
          "18:     }",
          "20:     printf(\"\\n\");",
          "21: }",
          "23: void print_insn_detail_mips(csh handle, cs_insn *ins)",
          "24: {",
          "25:     int i;",
          "26:     cs_mips *mips;",
          "29:     if (ins->detail == NULL)",
          "30:         return;",
          "32:     mips = &(ins->detail->mips);",
          "33:     if (mips->op_count)",
          "34:         printf(\"\\top_count: %u\\n\", mips->op_count);",
          "36:     for (i = 0; i < mips->op_count; i++) {",
          "37:         cs_mips_op *op = &(mips->operands[i]);",
          "38:         switch((int)op->type) {",
          "39:             default:",
          "40:                 break;",
          "41:             case MIPS_OP_REG:",
          "42:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "43:                 break;",
          "44:             case MIPS_OP_IMM:",
          "45:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "46:                 break;",
          "47:             case MIPS_OP_MEM:",
          "48:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "49:                 if (op->mem.base != X86_REG_INVALID)",
          "50:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "51:                            i, cs_reg_name(handle, op->mem.base));",
          "52:                 if (op->mem.disp != 0)",
          "53:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "55:                 break;",
          "56:         }",
          "58:     }",
          "60:     printf(\"\\n\");",
          "61: }",
          "",
          "---------------"
        ],
        "cstool/cstool_ppc.c||cstool/cstool_ppc.c": [
          "File: cstool/cstool_ppc.c -> cstool/cstool_ppc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "6: #include <platform.h>",
          "7: #include <capstone.h>",
          "9: static csh handle;",
          "11: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "12: {",
          "13:     unsigned char *c;",
          "15:     printf(\"%s\", comment);",
          "16:     for (c = str; c < str + len; c++) {",
          "17:         printf(\"0x%02x \", *c & 0xff);",
          "18:     }",
          "20:     printf(\"\\n\");",
          "21: }",
          "23: static const char* get_bc_name(int bc)",
          "24: {",
          "25:     switch(bc) {",
          "26:         default:",
          "27:         case PPC_BC_INVALID:",
          "28:             return (\"invalid\");",
          "29:         case PPC_BC_LT:",
          "30:             return (\"lt\");",
          "31:         case PPC_BC_LE:",
          "32:             return (\"le\");",
          "33:         case PPC_BC_EQ:",
          "34:             return (\"eq\");",
          "35:         case PPC_BC_GE:",
          "36:             return (\"ge\");",
          "37:         case PPC_BC_GT:",
          "38:             return (\"gt\");",
          "39:         case PPC_BC_NE:",
          "40:             return (\"ne\");",
          "41:         case PPC_BC_UN:",
          "42:             return (\"un\");",
          "43:         case PPC_BC_NU:",
          "44:             return (\"nu\");",
          "45:         case PPC_BC_SO:",
          "46:             return (\"so\");",
          "47:         case PPC_BC_NS:",
          "48:             return (\"ns\");",
          "49:     }",
          "50: }",
          "52: void print_insn_detail_ppc(csh handle, cs_insn *ins)",
          "53: {",
          "54:     cs_ppc *ppc;",
          "55:     int i;",
          "58:     if (ins->detail == NULL)",
          "59:         return;",
          "61:     ppc = &(ins->detail->ppc);",
          "62:     if (ppc->op_count)",
          "63:         printf(\"\\top_count: %u\\n\", ppc->op_count);",
          "65:     for (i = 0; i < ppc->op_count; i++) {",
          "66:         cs_ppc_op *op = &(ppc->operands[i]);",
          "67:         switch((int)op->type) {",
          "68:             default:",
          "69:                 break;",
          "70:             case PPC_OP_REG:",
          "71:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "72:                 break;",
          "73:             case PPC_OP_IMM:",
          "74:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "75:                 break;",
          "76:             case PPC_OP_MEM:",
          "77:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "78:                 if (op->mem.base != PPC_REG_INVALID)",
          "79:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "80:                            i, cs_reg_name(handle, op->mem.base));",
          "81:                 if (op->mem.disp != 0)",
          "82:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "84:                 break;",
          "85:             case PPC_OP_CRX:",
          "86:                 printf(\"\\t\\toperands[%u].type: CRX\\n\", i);",
          "87:                 printf(\"\\t\\t\\toperands[%u].crx.scale: %d\\n\", i, op->crx.scale);",
          "88:                 printf(\"\\t\\t\\toperands[%u].crx.reg: %s\\n\", i, cs_reg_name(handle, op->crx.reg));",
          "89:                 printf(\"\\t\\t\\toperands[%u].crx.cond: %s\\n\", i, get_bc_name(op->crx.cond));",
          "90:                 break;",
          "91:         }",
          "92:     }",
          "94:     if (ppc->bc != 0)",
          "95:         printf(\"\\tBranch code: %u\\n\", ppc->bc);",
          "97:     if (ppc->bh != 0)",
          "98:         printf(\"\\tBranch hint: %u\\n\", ppc->bh);",
          "100:     if (ppc->update_cr0)",
          "101:         printf(\"\\tUpdate-CR0: True\\n\");",
          "103:     printf(\"\\n\");",
          "104: }",
          "",
          "---------------"
        ],
        "cstool/cstool_sparc.c||cstool/cstool_sparc.c": [
          "File: cstool/cstool_sparc.c -> cstool/cstool_sparc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "6: #include <platform.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "14:     printf(\"%s\", comment);",
          "15:     for (c = str; c < str + len; c++) {",
          "16:         printf(\"0x%02x \", *c & 0xff);",
          "17:     }",
          "19:     printf(\"\\n\");",
          "20: }",
          "22: void print_insn_detail_sparc(csh handle, cs_insn *ins)",
          "23: {",
          "24:     cs_sparc *sparc;",
          "25:     int i;",
          "28:     if (ins->detail == NULL)",
          "29:         return;",
          "31:     sparc = &(ins->detail->sparc);",
          "32:     if (sparc->op_count)",
          "33:         printf(\"\\top_count: %u\\n\", sparc->op_count);",
          "35:     for (i = 0; i < sparc->op_count; i++) {",
          "36:         cs_sparc_op *op = &(sparc->operands[i]);",
          "37:         switch((int)op->type) {",
          "38:             default:",
          "39:                 break;",
          "40:             case SPARC_OP_REG:",
          "41:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "42:                 break;",
          "43:             case SPARC_OP_IMM:",
          "44:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "45:                 break;",
          "46:             case SPARC_OP_MEM:",
          "47:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "48:                 if (op->mem.base != X86_REG_INVALID)",
          "49:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "50:                            i, cs_reg_name(handle, op->mem.base));",
          "51:                 if (op->mem.index != X86_REG_INVALID)",
          "52:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "53:                            i, cs_reg_name(handle, op->mem.index));",
          "54:                 if (op->mem.disp != 0)",
          "55:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "57:                 break;",
          "58:         }",
          "59:     }",
          "61:     if (sparc->cc != 0)",
          "62:         printf(\"\\tCode condition: %u\\n\", sparc->cc);",
          "64:     if (sparc->hint != 0)",
          "65:         printf(\"\\tHint code: %u\\n\", sparc->hint);",
          "67:     printf(\"\\n\");",
          "68: }",
          "",
          "---------------"
        ],
        "cstool/cstool_systemz.c||cstool/cstool_systemz.c": [
          "File: cstool/cstool_systemz.c -> cstool/cstool_systemz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "6: #include <platform.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "14:     printf(\"%s\", comment);",
          "15:     for (c = str; c < str + len; c++) {",
          "16:         printf(\"0x%02x \", *c & 0xff);",
          "17:     }",
          "19:     printf(\"\\n\");",
          "20: }",
          "22: void print_insn_detail_sysz(csh handle, cs_insn *ins)",
          "23: {",
          "24:     cs_sysz *sysz;",
          "25:     int i;",
          "28:     if (ins->detail == NULL)",
          "29:         return;",
          "31:     sysz = &(ins->detail->sysz);",
          "32:     if (sysz->op_count)",
          "33:         printf(\"\\top_count: %u\\n\", sysz->op_count);",
          "35:     for (i = 0; i < sysz->op_count; i++) {",
          "36:         cs_sysz_op *op = &(sysz->operands[i]);",
          "37:         switch((int)op->type) {",
          "38:             default:",
          "39:                 break;",
          "40:             case SYSZ_OP_REG:",
          "41:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "42:                 break;",
          "43:             case SYSZ_OP_ACREG:",
          "44:                 printf(\"\\t\\toperands[%u].type: ACREG = %u\\n\", i, op->reg);",
          "45:                 break;",
          "46:             case SYSZ_OP_IMM:",
          "47:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%\" PRIx64 \"\\n\", i, op->imm);",
          "48:                 break;",
          "49:             case SYSZ_OP_MEM:",
          "50:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "51:                 if (op->mem.base != SYSZ_REG_INVALID)",
          "52:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "53:                            i, cs_reg_name(handle, op->mem.base));",
          "54:                 if (op->mem.index != SYSZ_REG_INVALID)",
          "55:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "56:                            i, cs_reg_name(handle, op->mem.index));",
          "57:                 if (op->mem.length != 0)",
          "58:                     printf(\"\\t\\t\\toperands[%u].mem.length: 0x%\" PRIx64 \"\\n\", i, op->mem.length);",
          "59:                 if (op->mem.disp != 0)",
          "60:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%\" PRIx64 \"\\n\", i, op->mem.disp);",
          "62:                 break;",
          "63:         }",
          "64:     }",
          "66:     if (sysz->cc != 0)",
          "67:         printf(\"\\tCode condition: %u\\n\", sysz->cc);",
          "69:     printf(\"\\n\");",
          "70: }",
          "",
          "---------------"
        ],
        "cstool/cstool_xcore.c||cstool/cstool_xcore.c": [
          "File: cstool/cstool_xcore.c -> cstool/cstool_xcore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include <stdio.h>",
          "6: #include <platform.h>",
          "7: #include <capstone.h>",
          "10: static void print_string_hex(char *comment, unsigned char *str, size_t len)",
          "11: {",
          "12:     unsigned char *c;",
          "14:     printf(\"%s\", comment);",
          "15:     for (c = str; c < str + len; c++) {",
          "16:         printf(\"0x%02x \", *c & 0xff);",
          "17:     }",
          "19:     printf(\"\\n\");",
          "20: }",
          "22: void print_insn_detail_xcore(csh handle, cs_insn *ins)",
          "23: {",
          "24:     cs_xcore *xcore;",
          "25:     int i;",
          "28:     if (ins->detail == NULL)",
          "29:         return;",
          "31:     xcore = &(ins->detail->xcore);",
          "32:     if (xcore->op_count)",
          "33:         printf(\"\\top_count: %u\\n\", xcore->op_count);",
          "35:     for (i = 0; i < xcore->op_count; i++) {",
          "36:         cs_xcore_op *op = &(xcore->operands[i]);",
          "37:         switch((int)op->type) {",
          "38:             default:",
          "39:                 break;",
          "40:             case XCORE_OP_REG:",
          "41:                 printf(\"\\t\\toperands[%u].type: REG = %s\\n\", i, cs_reg_name(handle, op->reg));",
          "42:                 break;",
          "43:             case XCORE_OP_IMM:",
          "44:                 printf(\"\\t\\toperands[%u].type: IMM = 0x%x\\n\", i, op->imm);",
          "45:                 break;",
          "46:             case XCORE_OP_MEM:",
          "47:                 printf(\"\\t\\toperands[%u].type: MEM\\n\", i);",
          "48:                 if (op->mem.base != XCORE_REG_INVALID)",
          "49:                     printf(\"\\t\\t\\toperands[%u].mem.base: REG = %s\\n\",",
          "50:                            i, cs_reg_name(handle, op->mem.base));",
          "51:                 if (op->mem.index != XCORE_REG_INVALID)",
          "52:                     printf(\"\\t\\t\\toperands[%u].mem.index: REG = %s\\n\",",
          "53:                            i, cs_reg_name(handle, op->mem.index));",
          "54:                 if (op->mem.disp != 0)",
          "55:                     printf(\"\\t\\t\\toperands[%u].mem.disp: 0x%x\\n\", i, op->mem.disp);",
          "56:                 if (op->mem.direct != 1)",
          "57:                     printf(\"\\t\\t\\toperands[%u].mem.direct: -1\\n\", i);",
          "60:                 break;",
          "61:         }",
          "62:     }",
          "64:     printf(\"\\n\");",
          "65: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "edc8ef0faa44640849ca5b44555f35040e16f356",
      "candidate_info": {
        "commit_hash": "edc8ef0faa44640849ca5b44555f35040e16f356",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/edc8ef0faa44640849ca5b44555f35040e16f356",
        "files": [
          "bindings/vb6/CDisassembler.cls",
          "bindings/vb6/CInstDetails.cls",
          "bindings/vb6/CInstruction.cls",
          "bindings/vb6/CX86Inst.cls",
          "bindings/vb6/CX86OpMem.cls",
          "bindings/vb6/CX86Operand.cls",
          "bindings/vb6/Form1.frm",
          "bindings/vb6/Form1.frx",
          "bindings/vb6/Module1.bas",
          "bindings/vb6/Project1.vbp",
          "bindings/vb6/Project1.vbw",
          "bindings/vb6/README.txt",
          "bindings/vb6/mMisc.bas",
          "bindings/vb6/mx86.bas",
          "bindings/vb6/screenshot.png",
          "bindings/vb6/vbCapstone.cpp",
          "bindings/vb6/vbCapstone.sln",
          "bindings/vb6/vbCapstone.vcproj"
        ],
        "message": "+vb6 bindings (#889)",
        "before_after_code_files": [
          "bindings/vb6/CDisassembler.cls||bindings/vb6/CDisassembler.cls",
          "bindings/vb6/CInstDetails.cls||bindings/vb6/CInstDetails.cls",
          "bindings/vb6/CInstruction.cls||bindings/vb6/CInstruction.cls",
          "bindings/vb6/CX86Inst.cls||bindings/vb6/CX86Inst.cls",
          "bindings/vb6/CX86OpMem.cls||bindings/vb6/CX86OpMem.cls",
          "bindings/vb6/CX86Operand.cls||bindings/vb6/CX86Operand.cls",
          "bindings/vb6/Form1.frm||bindings/vb6/Form1.frm",
          "bindings/vb6/Form1.frx||bindings/vb6/Form1.frx",
          "bindings/vb6/Module1.bas||bindings/vb6/Module1.bas",
          "bindings/vb6/Project1.vbp||bindings/vb6/Project1.vbp",
          "bindings/vb6/Project1.vbw||bindings/vb6/Project1.vbw",
          "bindings/vb6/mMisc.bas||bindings/vb6/mMisc.bas",
          "bindings/vb6/mx86.bas||bindings/vb6/mx86.bas",
          "bindings/vb6/vbCapstone.cpp||bindings/vb6/vbCapstone.cpp",
          "bindings/vb6/vbCapstone.sln||bindings/vb6/vbCapstone.sln",
          "bindings/vb6/vbCapstone.vcproj||bindings/vb6/vbCapstone.vcproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/vb6/CDisassembler.cls||bindings/vb6/CDisassembler.cls": [
          "File: bindings/vb6/CDisassembler.cls -> bindings/vb6/CDisassembler.cls",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: VERSION 1.0 CLASS",
          "2: BEGIN",
          "3:   MultiUse = -1  'True",
          "4:   Persistable = 0  'NotPersistable",
          "5:   DataBindingBehavior = 0  'vbNone",
          "6:   DataSourceBehavior  = 0  'vbNone",
          "7:   MTSTransactionMode  = 0  'NotAnMTSObject",
          "8: END",
          "9: Attribute VB_Name = \"CDisassembler\"",
          "10: Attribute VB_GlobalNameSpace = False",
          "11: Attribute VB_Creatable = True",
          "12: Attribute VB_PredeclaredId = False",
          "13: Attribute VB_Exposed = False",
          "14: Option Explicit",
          "16: 'Capstone Disassembly Engine bindings for VB6",
          "17: 'Contributed by FireEye FLARE Team",
          "18: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "19: 'License: Apache",
          "20: 'Copyright: FireEye 2017",
          "23: 'NOTE: the VB code was built and tested against Capstone v3.0 rc4",
          "24: '      if the capstone C structures change, the VB code will have to",
          "25: '      be adjusted to match!",
          "26: '",
          "27: '      instructions details are currently only implemented for x86",
          "29: Public arch As cs_arch",
          "30: Public mode As cs_mode",
          "31: Public hCapstone As Long",
          "32: Public hLib As Long",
          "34: Public version As String",
          "35: Public vMajor As Long",
          "36: Public vMinor As Long",
          "38: Public errMsg As String",
          "39: Public lastErr As cs_err",
          "41: Private Function CheckPath(pth As String) As Long",
          "43:     Dim hCap As Long, capPth As String, shimPth As String",
          "45:     shimPth = pth & \"\\vbCapstone.dll\"",
          "46:     capPth = pth & \"\\capstone.dll\"",
          "48:     If Not FileExists(shimPth) Then Exit Function",
          "50:     hCap = LoadLibrary(capPth)",
          "51:     If hCap = 0 Then hCap = LoadLibrary(\"capstone.dll\")",
          "52:     If hCap = 0 Then errMsg = \"Could not find capstone.dll\"",
          "54:     CheckPath = LoadLibrary(shimPth)",
          "55:     'If CheckPath = 0 Then MsgBox Err.LastDllError",
          "57: End Function",
          "59: Public Function init(arch As cs_arch, mode As cs_mode, Optional enableDetails As Boolean = False) As Boolean",
          "61:     errMsg = Empty",
          "62:     hLib = GetModuleHandle(\"vbCapstone.dll\")",
          "64:     If hLib = 0 Then hLib = CheckPath(App.path & \"\\bin\\\")",
          "65:     If hLib = 0 Then hLib = CheckPath(App.path & \"\\\")",
          "66:     If hLib = 0 Then hLib = CheckPath(App.path & \"\\..\\\")",
          "67:     If hLib = 0 Then hLib = LoadLibrary(\"vbCapstone.dll\")",
          "69:     If hLib = 0 Then",
          "70:         errMsg = errMsg & \" Could not load vbCapstone.dll\"",
          "71:         Exit Function",
          "72:     End If",
          "74:     Me.arch = arch",
          "75:     Me.mode = mode",
          "77:     cs_version vMajor, vMinor",
          "78:     version = vMajor & \".\" & vMinor",
          "80:     If cs_support(arch) = 0 Then",
          "81:         errMsg = \"specified architecture not supported\"",
          "82:         Exit Function",
          "83:     End If",
          "85:     Dim handle As Long 'in vb class a public var is actually a property get/set can not use as byref to api..",
          "86:     lastErr = cs_open(arch, mode, handle)",
          "87:     If lastErr <> CS_ERR_OK Then",
          "88:         errMsg = err2str(lastErr)",
          "89:         Exit Function",
          "90:     End If",
          "92:     hCapstone = handle",
          "93:     If enableDetails Then          'vb bindings currently only support details for x86",
          "94:         If arch = CS_ARCH_X86 Then",
          "95:             cs_option handle, CS_OPT_DETAIL, CS_OPT_ON",
          "96:         End If",
          "97:     End If",
          "99:     init = True",
          "101: End Function",
          "103: 'base is a variant and currently accepts the following input types:",
          "104: '  x64 number held as currency type (ex.  makeCur(&haabbccdd, &h11223344) )",
          "105: '  int/long value (ex. &h1000 or 12345)",
          "106: '  numeric string or 0x/&h prefixed hex string (ex. \"12345\", \"0x1200\", \"&haabbccdd\")",
          "107: Function disasm(ByVal base, code() As Byte, Optional count As Long = 0) As Collection",
          "109:     Dim c As Long",
          "110:     Dim instAry As Long",
          "111:     Dim ret As New Collection",
          "112:     Dim ci As CInstruction",
          "113:     Dim i As Long",
          "114:     Dim address As Currency",
          "116:     On Error Resume Next",
          "118:     Set disasm = ret",
          "120:     If TypeName(base) = \"Currency\" Then",
          "121:         address = base",
          "122:     Else",
          "123:         If TypeName(base) = \"String\" Then base = Replace(Trim(base), \"0x\", \"&h\")",
          "124:         address = lng2Cur(CLng(base))",
          "125:         If Err.Number <> 0 Then",
          "126:             errMsg = \"Could not convert base address to long\"",
          "127:             Exit Function",
          "128:         End If",
          "129:     End If",
          "131:     c = cs_disasm(Me.hCapstone, code(0), UBound(code) + 1, address, count, instAry)",
          "132:     If c = 0 Then Exit Function",
          "134:     For i = 0 To c - 1",
          "135:         Set ci = New CInstruction",
          "136:         ci.LoadInstruction instAry, i, Me",
          "137:         ret.Add ci",
          "138:     Next",
          "140:     cs_free instAry, c",
          "142: End Function",
          "145: Private Sub Class_Terminate()",
          "146:     Dim msg As String",
          "147:     If DEBUG_DUMP Then",
          "148:         msg = \"CDissembler.Terminate \" & Hex(hCapstone)",
          "149:         If hCapstone <> 0 Then lastErr = cs_close(hCapstone)",
          "150:         Debug.Print msg & \" : \" & lastErr",
          "151:     End If",
          "152: End Sub",
          "",
          "---------------"
        ],
        "bindings/vb6/CInstDetails.cls||bindings/vb6/CInstDetails.cls": [
          "File: bindings/vb6/CInstDetails.cls -> bindings/vb6/CInstDetails.cls",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: VERSION 1.0 CLASS",
          "2: BEGIN",
          "3:   MultiUse = -1  'True",
          "4:   Persistable = 0  'NotPersistable",
          "5:   DataBindingBehavior = 0  'vbNone",
          "6:   DataSourceBehavior  = 0  'vbNone",
          "7:   MTSTransactionMode  = 0  'NotAnMTSObject",
          "8: END",
          "9: Attribute VB_Name = \"CInstDetails\"",
          "10: Attribute VB_GlobalNameSpace = False",
          "11: Attribute VB_Creatable = True",
          "12: Attribute VB_PredeclaredId = False",
          "13: Attribute VB_Exposed = False",
          "14: Option Explicit",
          "15: 'Capstone Disassembly Engine bindings for VB6",
          "16: 'Contributed by FireEye FLARE Team",
          "17: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "18: 'License: Apache",
          "19: 'Copyright: FireEye 2017",
          "21: 'Public Type cs_detail",
          "22: '    regs_read(0 To 11) As      Byte ' list of implicit registers read by this insn UNSIGNED",
          "23: '    regs_read_count As         Byte ' number of implicit registers read by this insn UNSIGNED",
          "24: '    regs_write(0 To 19) As     Byte ' list of implicit registers modified by this insn UNSIGNED",
          "25: '    regs_write_count As        Byte ' number of implicit registers modified by this insn UNSIGNED",
          "26: '    groups(0 To 7) As          Byte ' list of group this instruction belong to UNSIGNED",
          "27: '    groups_count As            Byte ' number of groups this insn belongs to UNSIGNED",
          "28: '",
          "29: '    // Architecture-specific instruction info",
          "30: '    union {",
          "31: '        cs_x86 x86; // X86 architecture, including 16-bit, 32-bit & 64-bit mode",
          "32: '        cs_arm64 arm64; // ARM64 architecture (aka AArch64)",
          "33: '        cs_arm arm;     // ARM architecture (including Thumb/Thumb2)",
          "34: '        cs_mips mips;   // MIPS architecture",
          "35: '        cs_ppc ppc; // PowerPC architecture",
          "36: '        cs_sparc sparc; // Sparc architecture",
          "37: '        cs_sysz sysz;   // SystemZ architecture",
          "38: '        cs_xcore xcore; // XCore architecture",
          "39: '    };",
          "40: '} cs_detail;",
          "42: Public regRead As New Collection",
          "43: Public regWritten As New Collection",
          "44: Public groups As New Collection",
          "45: Public parent As CDisassembler",
          "47: 'this will be set to a class of the specific instruction info type by architecture..",
          "48: Public info As Object",
          "50: Private m_raw() As Byte",
          "52: Function toString() As String",
          "54:     On Error Resume Next",
          "56:     Dim ret() As String",
          "57:     Dim v, tmp",
          "59:     push ret, \"Instruction details: \"",
          "60:     push ret, String(40, \"-\")",
          "62:     If DEBUG_DUMP Then",
          "63:         push ret, \"Raw: \"",
          "64:         push ret, HexDump(m_raw)",
          "65:     End If",
          "67:     push ret, \"Registers Read: \" & regRead.count & IIf(regRead.count > 0, \"  Values: \" & col2Str(regRead), Empty)",
          "68:     push ret, \"Registers Written: \" & regWritten.count & IIf(regWritten.count > 0, \"  Values: \" & col2Str(regWritten), Empty)",
          "69:     push ret, \"Groups: \" & groups.count & IIf(groups.count > 0, \"  Values: \" & col2Str(groups), Empty)",
          "71:     'it is expected that each CXXInst class implements a toString() method..if not we catch the error anyway..",
          "72:     If Not info Is Nothing Then",
          "73:         push ret, info.toString()",
          "74:     End If",
          "76:     toString = Join(ret, vbCrLf)",
          "78: End Function",
          "80: Friend Sub LoadDetails(lpDetails As Long, parent As CDisassembler)",
          "82:     Dim cd As cs_detail",
          "83:     Dim i As Long",
          "84:     Dim x86 As CX86Inst",
          "86:     Set Me.parent = parent",
          "88:     'vbdef only contains up to the groups_count field..",
          "89:     CopyMemory ByVal VarPtr(cd), ByVal lpDetails, LenB(cd)",
          "91:     If DEBUG_DUMP Then",
          "92:         ReDim m_raw(LenB(cd))",
          "93:         CopyMemory ByVal VarPtr(m_raw(0)), ByVal lpDetails, LenB(cd)",
          "94:     End If",
          "96:     For i = 1 To cd.regs_read_count",
          "97:         regRead.Add cd.regs_read(i - 1)",
          "98:     Next",
          "100:     For i = 1 To cd.regs_write_count",
          "101:         regWritten.Add cd.regs_write(i - 1)",
          "102:     Next",
          "104:     For i = 1 To cd.groups_count",
          "105:         groups.Add cd.groups(i - 1)",
          "106:     Next",
          "108:     Const align = 5",
          "110:     'each arch needs its own CxxInstr class implemented here...",
          "111:     If parent.arch = CS_ARCH_X86 Then",
          "112:         Set x86 = New CX86Inst",
          "113:         x86.LoadDetails lpDetails + LenB(cd) + align, parent",
          "114:         Set info = x86",
          "115:     End If",
          "119: End Sub",
          "",
          "---------------"
        ],
        "bindings/vb6/CInstruction.cls||bindings/vb6/CInstruction.cls": [
          "File: bindings/vb6/CInstruction.cls -> bindings/vb6/CInstruction.cls",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: VERSION 1.0 CLASS",
          "2: BEGIN",
          "3:   MultiUse = -1  'True",
          "4:   Persistable = 0  'NotPersistable",
          "5:   DataBindingBehavior = 0  'vbNone",
          "6:   DataSourceBehavior  = 0  'vbNone",
          "7:   MTSTransactionMode  = 0  'NotAnMTSObject",
          "8: END",
          "9: Attribute VB_Name = \"CInstruction\"",
          "10: Attribute VB_GlobalNameSpace = False",
          "11: Attribute VB_Creatable = True",
          "12: Attribute VB_PredeclaredId = False",
          "13: Attribute VB_Exposed = False",
          "14: Option Explicit",
          "16: 'Capstone Disassembly Engine bindings for VB6",
          "17: 'Contributed by FireEye FLARE Team",
          "18: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "19: 'License: Apache",
          "20: 'Copyright: FireEye 2017",
          "23: 'Public Type cs_insn",
          "24: '                              ' Instruction ID (basically a numeric ID for the instruction mnemonic)",
          "25: '                              ' Find the instruction id in the '[ARCH]_insn' enum in the header file",
          "26: '                              ' of corresponding architecture, such as 'arm_insn' in arm.h for ARM,",
          "27: '                              ' 'x86_insn' in x86.h for X86, etc...",
          "28: '                              ' available even when CS_OPT_DETAIL = CS_OPT_OFF",
          "29: '                              ' NOTE: in Skipdata mode, \"data\" instruction has 0 for this id field. UNSIGNED",
          "30: '    id As Long                '",
          "31: '    align As Long             'not sure why it needs this..but it does..",
          "32: '    address As Currency       ' Address (EIP) of this instruction available even when CS_OPT_DETAIL = CS_OPT_OFF UNSIGNED",
          "33: '    size As Integer           ' Size of this instruction available even when CS_OPT_DETAIL = CS_OPT_OFF UNSIGNED",
          "34: '    bytes(0 To 15) As Byte    ' Machine bytes of this instruction, with number of bytes indicated by @size above available even when CS_OPT_DETAIL = CS_OPT_OFF",
          "35: '    mnemonic(0 To 31) As Byte ' Ascii text of instruction mnemonic available even when CS_OPT_DETAIL = CS_OPT_OFF",
          "36: '    op_str(0 To 159) As Byte  ' Ascii text of instruction operands available even when CS_OPT_DETAIL = CS_OPT_OFF",
          "37: '",
          "38: '                              ' Pointer to cs_detail.",
          "39: '                              ' NOTE: detail pointer is only valid when both requirements below are met:",
          "40: '                              ' (1) CS_OP_DETAIL = CS_OPT_ON",
          "41: '                              ' (2) Engine is not in Skipdata mode (CS_OP_SKIPDATA option set to CS_OPT_ON)",
          "42: '                              ' NOTE 2: when in Skipdata mode, or when detail mode is OFF, even if this pointer",
          "43: '                              '  is not NULL, its content is still irrelevant.",
          "44: '    lpDetail As Long          '  points to a cs_detail structure NOTE: only available when CS_OPT_DETAIL = CS_OPT_ON",
          "45: '",
          "46: 'End Type",
          "48: Public ID As Long",
          "49: Public address As Currency",
          "50: Public size As Long",
          "51: Private m_bytes() As Byte",
          "52: Public instruction As String",
          "53: Public operand As String",
          "54: Public lpDetails As Long",
          "55: Public parent As CDisassembler",
          "57: Public details As CInstDetails 'may be null",
          "59: Property Get bytes() As Byte()",
          "60:     bytes = Me.bytes()",
          "61: End Property",
          "63: Property Get byteDump(Optional padding = 15) As String",
          "64:     Dim b As String, i As Long",
          "65:     For i = 0 To UBound(m_bytes)",
          "66:         b = b & hhex(m_bytes(i)) & \" \"",
          "67:     Next",
          "68:     byteDump = rpad(b, padding)",
          "69: End Property",
          "71: Property Get text() As String",
          "73:     text = cur2str(address) & \"    \" & byteDump & \"    \" & instruction & \" \" & operand",
          "75: End Property",
          "77: Function toString() As String",
          "79:     Dim r() As String",
          "81:     push r, \"CInstruction: \"",
          "82:     push r, String(40, \"-\")",
          "83:     push r, \"Id: \" & Hex(ID)",
          "84:     push r, \"address: \" & cur2str(address)",
          "85:     push r, \"size: \" & Hex(size)",
          "86:     push r, \"bytes: \" & byteDump()",
          "87:     push r, \"instruction: \" & instruction",
          "88:     push r, \"operand: \" & operand",
          "89:     push r, \"lpDetails: \" & Hex(lpDetails)",
          "91:     If Not details Is Nothing Then",
          "92:         push r, details.toString()",
          "93:     End If",
          "95:     toString = Join(r, vbCrLf)",
          "97: End Function",
          "99: Friend Sub LoadInstruction(instAry As Long, index As Long, parent As CDisassembler)",
          "101:     Dim inst As cs_insn",
          "102:     Dim i As Long",
          "104:     getInstruction instAry, index, VarPtr(inst), LenB(inst)",
          "106:     ID = inst.ID",
          "107:     address = inst.address",
          "108:     size = inst.size",
          "109:     lpDetails = inst.lpDetail",
          "110:     Set Me.parent = parent",
          "112:     m_bytes() = inst.bytes",
          "113:     ReDim Preserve m_bytes(size - 1)",
          "115:     For i = 0 To UBound(inst.mnemonic)",
          "116:         If inst.mnemonic(i) = 0 Then Exit For",
          "117:         instruction = instruction & Chr(inst.mnemonic(i))",
          "118:     Next",
          "120:     For i = 0 To UBound(inst.op_str)",
          "121:         If inst.op_str(i) = 0 Then Exit For",
          "122:         operand = operand & Chr(inst.op_str(i))",
          "123:     Next",
          "125:     If lpDetails = 0 Then Exit Sub",
          "126:     Set details = New CInstDetails",
          "127:     details.LoadDetails lpDetails, parent",
          "129: End Sub",
          "",
          "---------------"
        ],
        "bindings/vb6/CX86Inst.cls||bindings/vb6/CX86Inst.cls": [
          "File: bindings/vb6/CX86Inst.cls -> bindings/vb6/CX86Inst.cls",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: VERSION 1.0 CLASS",
          "2: BEGIN",
          "3:   MultiUse = -1  'True",
          "4:   Persistable = 0  'NotPersistable",
          "5:   DataBindingBehavior = 0  'vbNone",
          "6:   DataSourceBehavior  = 0  'vbNone",
          "7:   MTSTransactionMode  = 0  'NotAnMTSObject",
          "8: END",
          "9: Attribute VB_Name = \"CX86Inst\"",
          "10: Attribute VB_GlobalNameSpace = False",
          "11: Attribute VB_Creatable = True",
          "12: Attribute VB_PredeclaredId = False",
          "13: Attribute VB_Exposed = False",
          "14: Option Explicit",
          "16: 'Capstone Disassembly Engine bindings for VB6",
          "17: 'Contributed by FireEye FLARE Team",
          "18: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "19: 'License: Apache",
          "20: 'Copyright: FireEye 2017",
          "23: '// Instruction structure  sizeof() = 432 bytes",
          "24: 'typedef struct cs_x86 {",
          "25: '    // Instruction prefix, which can be up to 4 bytes.",
          "26: '    // A prefix byte gets value 0 when irrelevant.",
          "27: '    // prefix[0] indicates REP/REPNE/LOCK prefix (See X86_PREFIX_REP/REPNE/LOCK above)",
          "28: '    // prefix[1] indicates segment override (irrelevant for x86_64):",
          "29: '    // See X86_PREFIX_CS/SS/DS/ES/FS/GS above.",
          "30: '    // prefix[2] indicates operand-size override (X86_PREFIX_OPSIZE)",
          "31: '    // prefix[3] indicates address-size override (X86_PREFIX_ADDRSIZE)",
          "32: '    uint8_t prefix[4];",
          "33: '",
          "34: '    // Instruction opcode, wich can be from 1 to 4 bytes in size.",
          "35: '    // This contains VEX opcode as well.",
          "36: '    // An trailing opcode byte gets value 0 when irrelevant.",
          "37: '    uint8_t opcode[4];",
          "38: '",
          "39: '    // REX prefix: only a non-zero value is relavant for x86_64",
          "40: '    uint8_t rex;",
          "41: '",
          "42: '    // Address size, which can be overrided with above prefix[5].",
          "43: '    uint8_t addr_size;",
          "44: '",
          "45: '    // ModR/M byte",
          "46: '    uint8_t modrm;",
          "47: '",
          "48: '    // SIB value, or 0 when irrelevant.",
          "49: '    uint8_t sib;",
          "50: '",
          "51: '    // Displacement value, or 0 when irrelevant.",
          "52: '    int32_t disp;",
          "53: '",
          "55: '    // SIB index register, or X86_REG_INVALID when irrelevant.",
          "56: '    x86_reg sib_index;",
          "57: '    // SIB scale. only applicable if sib_index is relavant.",
          "58: '    int8_t sib_scale;",
          "59: '    // SIB base register, or X86_REG_INVALID when irrelevant.",
          "60: '    x86_reg sib_base;",
          "61: '",
          "62: '    // SSE Code Condition",
          "63: '    x86_sse_cc sse_cc;",
          "64: '",
          "65: '    // AVX Code Condition",
          "66: '    x86_avx_cc avx_cc;",
          "67: '",
          "68: '    // AVX Suppress all Exception",
          "69: '    bool avx_sae;",
          "70: '",
          "71: '    // AVX static rounding mode",
          "72: '    x86_avx_rm avx_rm;",
          "73: '",
          "74: '    // Number of operands of this instruction,",
          "75: '    // or 0 when instruction has no operand.",
          "76: '    uint8_t op_count;",
          "77: '",
          "78: '    cs_x86_op operands[8];  // operands for this instruction.",
          "79: '} cs_x86;",
          "81: Private m_prefix() As Byte",
          "82: Private m_opcode() As Byte",
          "83: Public rex As Byte",
          "84: Public addr_size As Byte",
          "85: Public modrm As Byte",
          "86: Public sib As Byte",
          "87: Public disp As Long",
          "88: Public sib_index As x86_reg",
          "89: Public sib_scale As Byte",
          "90: Public sib_base As x86_reg",
          "91: Public sse_cc As x86_sse_cc",
          "92: Public avx_cc As x86_avx_cc",
          "93: Public avx_sae As Boolean",
          "94: Public avx_rm As x86_avx_rm",
          "95: Public operands As New Collection",
          "97: Public parent As CDisassembler",
          "98: Private hEngine As Long",
          "99: Private m_raw() As Byte",
          "101: Property Get prefix() As Byte()",
          "102:     prefix = m_prefix",
          "103: End Property",
          "105: Property Get opcode() As Byte()",
          "106:     opcode = m_opcode",
          "107: End Property",
          "109: Function toString() As String",
          "111:     Dim r() As String",
          "112:     Dim o As CX86Operand",
          "114:     push r, \"X86 Instruction Details:\"",
          "115:     push r, String(40, \"-\")",
          "117:     If DEBUG_DUMP Then",
          "118:         push r, \"Raw: \"",
          "119:         push r, HexDump(m_raw)",
          "120:     End If",
          "122:     push r, \"Prefix: \" & b2Str(m_prefix)",
          "123:     push r, \"OpCode: \" & b2Str(m_opcode)",
          "124:     push r, \"Rex: \" & rex",
          "125:     push r, \"addr_size: \" & addr_size",
          "126:     push r, \"modrm: \" & Hex(modrm)",
          "127:     push r, \"disp: \" & Hex(disp)",
          "129:     If parent.mode <> CS_MODE_16 Then",
          "130:         push r, \"sib: \" & Hex(sib)",
          "131:         push r, \"sib_index: \" & regName(hEngine, sib_index)",
          "132:         push r, \"sib_scale: \" & Hex(sib_scale)",
          "133:         push r, \"sib_base: \" & regName(hEngine, sib_base)",
          "134:     End If",
          "136:     If sse_cc <> 0 Then push r, \"sse_cc: \" & x86_sse_cc2str(sse_cc)",
          "137:     If avx_cc <> 0 Then push r, \"avx_cc: \" & x86_avx_cc2str(avx_cc)",
          "138:     If avx_sae <> 0 Then push r, \"avx_sae: \" & avx_sae",
          "139:     If avx_rm <> 0 Then push r, \"avx_rm: \" & x86_avx_rm2str(avx_rm)",
          "141:     push r, \"Operands: \" & operands.count",
          "143:     For Each o In operands",
          "144:         push r, String(40, \"-\")",
          "145:         push r, o.toString",
          "146:     Next",
          "148:     toString = Join(r, vbCrLf)",
          "150: End Function",
          "152: Friend Sub LoadDetails(lpStruct As Long, parent As CDisassembler)",
          "154:     Dim cs As cs_x86",
          "155:     Dim o As CX86Operand",
          "156:     Dim ptr As Long",
          "157:     Dim i As Long",
          "159:     Const sizeOfx86Operand = 48",
          "161:     Set Me.parent = parent",
          "162:     hEngine = parent.hCapstone",
          "164:     CopyMemory ByVal VarPtr(cs), ByVal lpStruct, LenB(cs)",
          "166:     If DEBUG_DUMP Then",
          "167:         ReDim m_raw(LenB(cs))",
          "168:         CopyMemory ByVal VarPtr(m_raw(0)), ByVal lpStruct, LenB(cs)",
          "169:     End If",
          "171:     Me.rex = cs.rex",
          "172:     Me.addr_size = cs.addr_size",
          "173:     Me.modrm = cs.modrm",
          "174:     Me.sib = cs.sib",
          "175:     Me.disp = cs.disp",
          "176:     Me.sib_index = cs.sib_index",
          "177:     Me.sib_scale = cs.sib_scale",
          "178:     Me.sib_base = cs.sib_base",
          "179:     Me.sse_cc = cs.sse_cc",
          "180:     Me.avx_cc = cs.avx_cc",
          "181:     Me.avx_sae = cs.avx_sae",
          "182:     Me.avx_rm = cs.avx_rm",
          "183:     m_prefix = cs.prefix",
          "184:     m_opcode = cs.opcode",
          "186:     ptr = lpStruct + LenB(cs) 'we dont include the operands in our vb struct..",
          "187:     For i = 1 To cs.op_count",
          "188:         Set o = New CX86Operand",
          "189:         o.LoadDetails ptr, hEngine",
          "190:         operands.Add o",
          "191:         ptr = ptr + sizeOfx86Operand",
          "192:     Next",
          "196: End Sub",
          "",
          "---------------"
        ],
        "bindings/vb6/CX86OpMem.cls||bindings/vb6/CX86OpMem.cls": [
          "File: bindings/vb6/CX86OpMem.cls -> bindings/vb6/CX86OpMem.cls",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: VERSION 1.0 CLASS",
          "2: BEGIN",
          "3:   MultiUse = -1  'True",
          "4:   Persistable = 0  'NotPersistable",
          "5:   DataBindingBehavior = 0  'vbNone",
          "6:   DataSourceBehavior  = 0  'vbNone",
          "7:   MTSTransactionMode  = 0  'NotAnMTSObject",
          "8: END",
          "9: Attribute VB_Name = \"CX86OpMem\"",
          "10: Attribute VB_GlobalNameSpace = False",
          "11: Attribute VB_Creatable = True",
          "12: Attribute VB_PredeclaredId = False",
          "13: Attribute VB_Exposed = False",
          "14: Option Explicit",
          "16: 'Capstone Disassembly Engine bindings for VB6",
          "17: 'Contributed by FireEye FLARE Team",
          "18: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "19: 'License: Apache",
          "20: 'Copyright: FireEye 2017",
          "23: Public segment As Long     ' segment register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "24: Public base As Long        ' base register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "25: Public index As Long       ' index register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "26: Public scale_ As Long      ' scale for index register",
          "27: Public disp As Currency    ' displacement value",
          "",
          "---------------"
        ],
        "bindings/vb6/CX86Operand.cls||bindings/vb6/CX86Operand.cls": [
          "File: bindings/vb6/CX86Operand.cls -> bindings/vb6/CX86Operand.cls",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: VERSION 1.0 CLASS",
          "2: BEGIN",
          "3:   MultiUse = -1  'True",
          "4:   Persistable = 0  'NotPersistable",
          "5:   DataBindingBehavior = 0  'vbNone",
          "6:   DataSourceBehavior  = 0  'vbNone",
          "7:   MTSTransactionMode  = 0  'NotAnMTSObject",
          "8: END",
          "9: Attribute VB_Name = \"CX86Operand\"",
          "10: Attribute VB_GlobalNameSpace = False",
          "11: Attribute VB_Creatable = True",
          "12: Attribute VB_PredeclaredId = False",
          "13: Attribute VB_Exposed = False",
          "14: Option Explicit",
          "16: 'Capstone Disassembly Engine bindings for VB6",
          "17: 'Contributed by FireEye FLARE Team",
          "18: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "19: 'License: Apache",
          "20: 'Copyright: FireEye 2017",
          "23: '// Instruction operand sizeof() reports 48 bytes",
          "24: 'typedef struct cs_x86_op {",
          "25: '        x86_op_type type;   // operand type",
          "26: '",
          "27: '        union {",
          "28: '            x86_reg reg;    // register value for REG operand",
          "29: '            int64_t imm;    // immediate value for IMM operand",
          "30: '            double fp;      // floating point value for FP operand",
          "31: '            x86_op_mem mem; // base/index/scale/disp value for MEM operand (24bytes max)",
          "32: '        };",
          "33: '",
          "34: '        // size of this operand (in bytes).",
          "35: '        uint8_t size;",
          "36: '",
          "37: '        // AVX broadcast type, or 0 if irrelevant",
          "38: '        x86_avx_bcast avx_bcast;",
          "39: '",
          "40: '        // AVX zero opmask {z}",
          "41: '        bool avx_zero_opmask;",
          "42: '} cs_x86_op;",
          "44: 'Instruction's operand referring to memory",
          "45: 'This is associated with X86_OP_MEM operand type above",
          "46: 'Public Type x86_op_mem",
          "47: '    segment As Long  ' segment register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "48: '    base As Long     ' base register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "49: '    index As Long    ' index register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "50: '    scale As Long    ' scale for index register",
          "51: '    disp As Currency ' displacement value",
          "52: 'End Type",
          "54: 'this shows the alignment padding used by compiler..",
          "55: '    cs_x86_op op;",
          "56: '    op.type = (x86_op_type)1;",
          "57: '    op.reg = (x86_reg)2;",
          "58: '    op.avx_bcast = (x86_avx_bcast)3;",
          "59: '    op.avx_zero_opmask = 4;",
          "60: '    op.size = 0xaa;",
          "61: '    printf(\"&cs_x86_op = %x\", &op);",
          "62: '    _asm int 3",
          "63: '",
          "64: '",
          "65: '0x0012FF34  01 00 00 00 cc cc cc cc 02 00 00 00 cc cc cc cc  ....\ufffd\ufffd\ufffd\ufffd....\ufffd\ufffd\ufffd\ufffd",
          "66: '0x0012FF44  cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd",
          "67: '0x0012FF54  aa cc cc cc 03 00 00 00 01 cc cc cc cc cc cc cc  \ufffd\ufffd\ufffd\ufffd.....\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd",
          "69: Public optype As x86_op_type",
          "70: Public size As Byte",
          "71: Public avx_bcast As x86_avx_bcast",
          "72: Public avx_zero_opmask As Boolean",
          "74: 'only one of the following will be set based on type",
          "75: Public reg As x86_reg",
          "76: Public fp As Currency",
          "77: Public imm As Currency",
          "78: Public mem As CX86OpMem",
          "80: Private hEngine As Long",
          "81: Private m_raw() As Byte",
          "83: Function toString() As String",
          "85:     Dim ret() As String",
          "87:     push ret, \"X86 Operand:\"",
          "88:     push ret, String(45, \"-\")",
          "90:     If DEBUG_DUMP Then",
          "91:         push ret, \"Raw: \"",
          "92:         push ret, HexDump(m_raw)",
          "93:     End If",
          "95:     push ret, \"Type: \" & opStr()",
          "96:     push ret, \"Size: \" & size",
          "97:     If avx_bcast <> 0 Then push ret, \"BCast: \" & bcastStr()",
          "98:     If avx_zero_opmask Then push ret, \"AvxOpMask: \" & avx_zero_opmask",
          "100:     If optype = X86_OP_FP Then",
          "101:          push ret, \"FP: \" & cur2str(fp)",
          "102:     ElseIf optype = X86_OP_IMM Then",
          "103:          push ret, \"IMM: \" & cur2str(imm)",
          "104:     ElseIf optype = x86_op_mem Then",
          "105:         If mem.base <> 0 Then push ret, \"Base: \" & regName(hEngine, mem.base)",
          "106:         If mem.index <> 0 Then push ret, \"Index: \" & regName(hEngine, mem.index)",
          "107:         If mem.scale_ <> 1 Then push ret, \"Scale: \" & Hex(mem.scale_)",
          "108:         If mem.segment <> 0 Then push ret, \"Seg: \" & regName(hEngine, mem.segment)",
          "109:         If mem.disp <> 0 Then push ret, \"Disp: \" & cur2str(mem.disp)",
          "110:     ElseIf optype = X86_OP_REG Then",
          "111:          push ret, \"Reg: \" & regName(hEngine, reg)",
          "112:     End If",
          "114:     toString = Join(ret, vbCrLf)",
          "116: End Function",
          "118: Function opStr() As String",
          "120:     If optype = X86_OP_FP Then opStr = \"X86_OP_FP\"",
          "121:     If optype = x86_op_mem Then opStr = \"x86_op_mem\"",
          "122:     If optype = X86_OP_IMM Then opStr = \"X86_OP_IMM\"",
          "123:     If optype = X86_OP_REG Then opStr = \"X86_OP_REG\"",
          "124:     If optype = X86_OP_INVALID Then opStr = \"X86_OP_INVALID\"",
          "126:     If Len(opStr) = 0 Then",
          "127:         opStr = \"Error: \" & Hex(optype)",
          "128:     ElseIf DEBUG_DUMP Then",
          "129:         opStr = opStr & \" (\" & Hex(optype) & \")\"",
          "130:     End If",
          "132: End Function",
          "134: Function bcastStr() As String",
          "135:     Dim r As String",
          "137:     If avx_bcast = X86_AVX_BCAST_INVALID Then r = \"X86_AVX_BCAST_INVALID\"",
          "138:     If avx_bcast = X86_AVX_BCAST_2 Then r = \"X86_AVX_BCAST_2\"",
          "139:     If avx_bcast = X86_AVX_BCAST_4 Then r = \"X86_AVX_BCAST_4\"",
          "140:     If avx_bcast = X86_AVX_BCAST_8 Then r = \"X86_AVX_BCAST_8\"",
          "141:     If avx_bcast = X86_AVX_BCAST_16 Then r = \"X86_AVX_BCAST_16\"",
          "143:     If Len(r) = 0 Then",
          "144:         r = \"Unknown: \" & Hex(avx_bcast)",
          "145:     ElseIf DEBUG_DUMP Then",
          "146:         r = r & \" (\" & Hex(avx_bcast) & \")\"",
          "147:     End If",
          "149:     bcastStr = r",
          "150: End Function",
          "153: Friend Sub LoadDetails(lpStruct As Long, hCapstone As Long)",
          "155:     Dim opMem As x86_op_mem",
          "156:     Dim ptr As Long",
          "158:     Const align4 = 4",
          "159:     Const align3 = 3",
          "161:     hEngine = hCapstone",
          "163:     If DEBUG_DUMP Then",
          "164:         ReDim m_raw(48)",
          "165:         CopyMemory ByVal VarPtr(m_raw(0)), ByVal lpStruct, 48",
          "166:     End If",
          "168:     optype = readLng(lpStruct)",
          "169:     ptr = lpStruct + 4 + align4",
          "171:     If optype = X86_OP_FP Then",
          "172:         fp = readCur(ptr)",
          "173:     ElseIf optype = X86_OP_IMM Then",
          "174:         imm = readCur(ptr)",
          "175:     ElseIf optype = x86_op_mem Then",
          "176:         CopyMemory ByVal VarPtr(opMem), ByVal ptr, LenB(opMem)",
          "177:         Set mem = New CX86OpMem",
          "178:         mem.base = opMem.base",
          "179:         mem.disp = opMem.disp",
          "180:         mem.index = opMem.index",
          "181:         mem.scale_ = opMem.scale",
          "182:         mem.segment = opMem.segment",
          "183:     ElseIf optype = X86_OP_REG Then",
          "184:         reg = readLng(ptr)",
          "185:     End If",
          "187:     ptr = ptr + LenB(opMem)",
          "189:     size = readByte(ptr)",
          "190:     ptr = ptr + 1 + align3",
          "192:     avx_bcast = readLng(ptr)",
          "193:     ptr = ptr + 4",
          "195:     avx_zero_opmask = (readByte(ptr) = 1)",
          "197: End Sub",
          "199: Private Sub Class_Terminate()",
          "200:     'looks like everything is freeing up ok",
          "201:     'Debug.Print \"Cx86Operand.Terminate\"",
          "202: End Sub",
          "",
          "---------------"
        ],
        "bindings/vb6/Form1.frm||bindings/vb6/Form1.frm": [
          "File: bindings/vb6/Form1.frm -> bindings/vb6/Form1.frm",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: VERSION 5.00",
          "2: Object = \"{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0\"; \"mscomctl.ocx\"",
          "3: Begin VB.Form Form1",
          "4:    Caption         =   \"VB6 Bindings for Capstone Disassembly Engine - Contributed by FireEye FLARE  Team\"",
          "5:    ClientHeight    =   7290",
          "6:    ClientLeft      =   60",
          "7:    ClientTop       =   345",
          "8:    ClientWidth     =   10275",
          "9:    LinkTopic       =   \"Form1\"",
          "10:    ScaleHeight     =   7290",
          "11:    ScaleWidth      =   10275",
          "12:    StartUpPosition =   2  'CenterScreen",
          "13:    Begin VB.CommandButton Command2",
          "14:       Caption         =   \"Save\"",
          "15:       Height          =   375",
          "16:       Left            =   8760",
          "17:       TabIndex        =   8",
          "18:       Top             =   120",
          "19:       Width           =   1455",
          "20:    End",
          "21:    Begin VB.CommandButton Command1",
          "22:       Caption         =   \" Arm 64\"",
          "23:       Height          =   375",
          "24:       Index           =   4",
          "25:       Left            =   6840",
          "26:       TabIndex        =   7",
          "27:       Top             =   120",
          "28:       Width           =   1455",
          "29:    End",
          "30:    Begin VB.CommandButton Command1",
          "31:       Caption         =   \"Arm\"",
          "32:       Height          =   375",
          "33:       Index           =   3",
          "34:       Left            =   5160",
          "35:       TabIndex        =   6",
          "36:       Top             =   120",
          "37:       Width           =   1455",
          "38:    End",
          "39:    Begin VB.CommandButton Command1",
          "40:       Caption         =   \"x86 64bit\"",
          "41:       Height          =   375",
          "42:       Index           =   2",
          "43:       Left            =   3480",
          "44:       TabIndex        =   5",
          "45:       Top             =   120",
          "46:       Width           =   1455",
          "47:    End",
          "48:    Begin VB.CommandButton Command1",
          "49:       Caption         =   \"x86 16bit\"",
          "50:       Height          =   375",
          "51:       Index           =   0",
          "52:       Left            =   120",
          "53:       TabIndex        =   4",
          "54:       Top             =   120",
          "55:       Width           =   1455",
          "56:    End",
          "57:    Begin VB.CommandButton Command1",
          "58:       Caption         =   \"x86 32bit\"",
          "59:       Height          =   375",
          "60:       Index           =   1",
          "61:       Left            =   1800",
          "62:       TabIndex        =   3",
          "63:       Top             =   120",
          "64:       Width           =   1455",
          "65:    End",
          "66:    Begin MSComctlLib.ListView lv",
          "67:       Height          =   2415",
          "68:       Left            =   120",
          "69:       TabIndex        =   2",
          "70:       Top             =   1440",
          "71:       Width           =   10095",
          "72:       _ExtentX        =   17806",
          "73:       _ExtentY        =   4260",
          "74:       View            =   3",
          "75:       LabelEdit       =   1",
          "76:       LabelWrap       =   -1  'True",
          "77:       HideSelection   =   0   'False",
          "78:       FullRowSelect   =   -1  'True",
          "79:       _Version        =   393217",
          "80:       ForeColor       =   -2147483640",
          "81:       BackColor       =   -2147483643",
          "82:       BorderStyle     =   1",
          "83:       Appearance      =   1",
          "84:       BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851}",
          "85:          Name            =   \"Courier\"",
          "86:          Size            =   9.75",
          "87:          Charset         =   0",
          "88:          Weight          =   400",
          "89:          Underline       =   0   'False",
          "90:          Italic          =   0   'False",
          "91:          Strikethrough   =   0   'False",
          "92:       EndProperty",
          "93:       NumItems        =   1",
          "94:       BeginProperty ColumnHeader(1) {BDD1F052-858B-11D1-B16A-00C0F0283628}",
          "95:          Object.Width           =   2540",
          "96:       EndProperty",
          "97:    End",
          "98:    Begin VB.ListBox List1",
          "99:       BeginProperty Font",
          "100:          Name            =   \"Courier\"",
          "101:          Size            =   9.75",
          "102:          Charset         =   0",
          "103:          Weight          =   400",
          "104:          Underline       =   0   'False",
          "105:          Italic          =   0   'False",
          "106:          Strikethrough   =   0   'False",
          "107:       EndProperty",
          "108:       Height          =   840",
          "109:       Left            =   120",
          "110:       TabIndex        =   1",
          "111:       Top             =   600",
          "112:       Width           =   10095",
          "113:    End",
          "114:    Begin VB.TextBox Text1",
          "115:       BeginProperty Font",
          "116:          Name            =   \"Courier\"",
          "117:          Size            =   9.75",
          "118:          Charset         =   0",
          "119:          Weight          =   400",
          "120:          Underline       =   0   'False",
          "121:          Italic          =   0   'False",
          "122:          Strikethrough   =   0   'False",
          "123:       EndProperty",
          "124:       Height          =   3375",
          "125:       Left            =   120",
          "126:       MultiLine       =   -1  'True",
          "127:       ScrollBars      =   3  'Both",
          "128:       TabIndex        =   0",
          "129:       Text            =   \"Form1.frx\":0000",
          "130:       Top             =   3840",
          "131:       Width           =   10095",
          "132:    End",
          "133: End",
          "134: Attribute VB_Name = \"Form1\"",
          "135: Attribute VB_GlobalNameSpace = False",
          "136: Attribute VB_Creatable = False",
          "137: Attribute VB_PredeclaredId = True",
          "138: Attribute VB_Exposed = False",
          "139: Option Explicit",
          "141: 'Capstone Disassembly Engine bindings for VB6",
          "142: 'Contributed by FireEye FLARE Team",
          "143: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "144: 'License: Apache",
          "145: 'Copyright: FireEye 2017",
          "147: Dim cap As CDisassembler",
          "148: Dim lastSample As Long",
          "150: Private Sub Command1_Click(index As Integer)",
          "152:     Dim code() As Byte, arch As cs_arch, mode As cs_mode",
          "153:     lastSample = index",
          "155:     Const x86_code32 As String = \"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\\x05\\x23\\x01\\x00\\x00\\x36\\x8b\\x84\\x91\\x23\\x01\\x00\\x00\\x41\\x8d\\x84\\x39\\x89\\x67\\x00\\x00\\x8d\\x87\\x89\\x67\\x00\\x00\\xb4\\xc6\"",
          "156:     Const X86_CODE16 As String = \"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\\x05\\x23\\x01\\x00\\x00\\x36\\x8b\\x84\\x91\\x23\\x01\\x00\\x00\\x41\\x8d\\x84\\x39\\x89\\x67\\x00\\x00\\x8d\\x87\\x89\\x67\\x00\\x00\\xb4\\xc6\"",
          "157:     Const X86_CODE64 As String = \"\\x55\\x48\\x8b\\x05\\xb8\\x13\\x00\\x00\"",
          "158:     Const ARM_CODE As String = \"\\xED\\xFF\\xFF\\xEB\\x04\\xe0\\x2d\\xe5\\x00\\x00\\x00\\x00\\xe0\\x83\\x22\\xe5\\xf1\\x02\\x03\\x0e\\x00\\x00\\xa0\\xe3\\x02\\x30\\xc1\\xe7\\x00\\x00\\x53\\xe3\\x00\\x02\\x01\\xf1\\x05\\x40\\xd0\\xe8\\xf4\\x80\\x00\\x00\"",
          "159:     Const ARM64_CODE As String = \"\\x09\\x00\\x38\\xd5\\xbf\\x40\\x00\\xd5\\x0c\\x05\\x13\\xd5\\x20\\x50\\x02\\x0e\\x20\\xe4\\x3d\\x0f\\x00\\x18\\xa0\\x5f\\xa2\\x00\\xae\\x9e\\x9f\\x37\\x03\\xd5\\xbf\\x33\\x03\\xd5\\xdf\\x3f\\x03\\xd5\\x21\\x7c\\x02\\x9b\\x21\\x7c\\x00\\x53\\x00\\x40\\x21\\x4b\\xe1\\x0b\\x40\\xb9\\x20\\x04\\x81\\xda\\x20\\x08\\x02\\x8b\\x10\\x5b\\xe8\\x3c\"",
          "161:     Select Case index",
          "162:         Case 0:",
          "163:                 arch = CS_ARCH_X86",
          "164:                 mode = CS_MODE_16",
          "165:                 code = toBytes(X86_CODE16)",
          "166:         Case 1:",
          "167:                 arch = CS_ARCH_X86",
          "168:                 mode = CS_MODE_32",
          "169:                 code = toBytes(x86_code32)",
          "170:         Case 2:",
          "171:                 arch = CS_ARCH_X86",
          "172:                 mode = CS_MODE_64",
          "173:                 code = toBytes(X86_CODE64)",
          "175:         Case 3:",
          "176:                 arch = CS_ARCH_ARM",
          "177:                 mode = CS_MODE_ARM",
          "178:                 code = toBytes(ARM_CODE)",
          "180:         Case 4:",
          "181:                 arch = CS_ARCH_ARM64",
          "182:                 mode = CS_MODE_ARM",
          "183:                 code = toBytes(ARM64_CODE)",
          "184:     End Select",
          "187:     test code, arch, mode",
          "189: End Sub",
          "191: Private Sub test(code() As Byte, arch As cs_arch, mode As cs_mode)",
          "194:     Dim ret As Collection",
          "195:     Dim ci As CInstruction",
          "196:     Dim li As ListItem",
          "198:     clearForm",
          "199:     If Not cap Is Nothing Then Set cap = Nothing",
          "201:     Set cap = New CDisassembler",
          "203:     If Not cap.init(arch, mode, True) Then",
          "204:         List1.AddItem \"Failed to init engine: \" & cap.errMsg",
          "205:         Exit Sub",
          "206:     End If",
          "208:     List1.AddItem \"Capstone loaded @ 0x\" & Hex(cap.hLib)",
          "209:     List1.AddItem \"hEngine: 0x\" & Hex(cap.hCapstone)",
          "210:     List1.AddItem \"Version: \" & cap.version",
          "212:     If cap.vMajor < 3 Then",
          "213:         List1.AddItem \"Sample requires Capstone v3+\"",
          "214:         Exit Sub",
          "215:     End If",
          "217:     Set ret = cap.disasm(&H1000, code)",
          "219:     For Each ci In ret",
          "220:         Set li = lv.ListItems.Add(, , ci.text)",
          "221:         Set li.Tag = ci",
          "222:     Next",
          "224: End Sub",
          "226: Private Sub Command2_Click()",
          "228:     Dim fName() As String",
          "229:     Dim fPath As String",
          "230:     Dim t() As String",
          "231:     Dim li As ListItem",
          "232:     Dim ci As CInstruction",
          "234:     On Error Resume Next",
          "236:     If lastSample = -1 Then",
          "237:         MsgBox \"Run a test first...\"",
          "238:         Exit Sub",
          "239:     End If",
          "241:     fName = Split(\"16b,32b,64b,Arm,Arm64\", \",\")",
          "243:     fPath = App.path & \"\\vb\" & fName(lastSample) & \"Test.txt\"",
          "244:     If FileExists(fPath) Then Kill fPath",
          "246:     For Each li In lv.ListItems",
          "247:         push t, li.text",
          "248:         Set ci = li.Tag",
          "249:         push t, ci.toString()",
          "250:         push t, String(60, \"-\")",
          "251:     Next",
          "253:     WriteFile fPath, Join(t, vbCrLf)",
          "255:     MsgBox FileLen(fPath) & \" bytes saved to: \" & vbCrLf & vbCrLf & fPath",
          "257: End Sub",
          "259: Private Sub lv_ItemClick(ByVal Item As MSComctlLib.ListItem)",
          "260:     Dim ci As CInstruction",
          "261:     Set ci = Item.Tag",
          "262:     Text1 = ci.toString()",
          "263: End Sub",
          "265: Function clearForm()",
          "266:     List1.Clear",
          "267:     lv.ListItems.Clear",
          "268:     Text1 = Empty",
          "269: End Function",
          "271: Private Sub Form_Load()",
          "272:     lv.ColumnHeaders(1).Width = lv.Width",
          "273:     clearForm",
          "274:     lastSample = -1",
          "275: End Sub",
          "",
          "---------------"
        ],
        "bindings/vb6/Form1.frx||bindings/vb6/Form1.frx": [
          "File: bindings/vb6/Form1.frx -> bindings/vb6/Form1.frx",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \u0005Text1",
          "",
          "---------------"
        ],
        "bindings/vb6/Module1.bas||bindings/vb6/Module1.bas": [
          "File: bindings/vb6/Module1.bas -> bindings/vb6/Module1.bas",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Attribute VB_Name = \"mCapStone\"",
          "2: Option Explicit",
          "4: 'Capstone Disassembly Engine bindings for VB6",
          "5: 'Contributed by FireEye FLARE Team",
          "6: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "7: 'License: Apache",
          "8: 'Copyright: FireEye 2017",
          "10: 'todo: cs_disasm_iter / skipdata",
          "12: 'this is for my vb code and how much info it spits out in tostring methods..",
          "13: Global Const DEBUG_DUMP = 0",
          "15: 'Architecture type",
          "16: Public Enum cs_arch",
          "17:     CS_ARCH_ARM = 0      ' ARM architecture (including Thumb, Thumb-2)",
          "18:     CS_ARCH_ARM64        ' ARM-64, also called AArch64",
          "19:     CS_ARCH_MIPS         ' Mips architecture",
          "20:     CS_ARCH_X86          ' X86 architecture (including x86 & x86-64)",
          "21:     CS_ARCH_PPC          ' PowerPC architecture",
          "22:     CS_ARCH_SPARC        ' Sparc architecture",
          "23:     CS_ARCH_SYSZ         ' SystemZ architecture",
          "24:     CS_ARCH_XCORE        ' XCore architecture",
          "25:     CS_ARCH_MAX",
          "26:     CS_ARCH_ALL = &HFFFF ' All architectures - for cs_support()",
          "27: End Enum",
          "29: Public Enum cs_mode",
          "30:     CS_MODE_LITTLE_ENDIAN = 0       ' little-endian mode (default mode)",
          "31:     CS_MODE_ARM = 0                 ' 32-bit ARM",
          "32:     CS_MODE_16 = 2                  ' 16-bit mode (X86)",
          "33:     CS_MODE_32 = 4                  ' 32-bit mode (X86)",
          "34:     CS_MODE_64 = 8                  ' 64-bit mode (X86, PPC)",
          "35:     CS_MODE_THUMB = 16              ' ARM's Thumb mode, including Thumb-2",
          "36:     CS_MODE_MCLASS = 32             ' ARM's Cortex-M series",
          "37:     CS_MODE_V8 = 64                 ' ARMv8 A32 encodings for ARM",
          "38:     CS_MODE_MICRO = 16              ' MicroMips mode (MIPS)",
          "39:     CS_MODE_MIPS3 = 32              ' Mips III ISA",
          "40:     CS_MODE_MIPS32R6 = 64           ' Mips32r6 ISA",
          "41:     CS_MODE_MIPSGP64 = 128          ' General Purpose Registers are 64-bit wide (MIPS)",
          "42:     CS_MODE_V9 = 16                 ' SparcV9 mode (Sparc)",
          "43:     CS_MODE_BIG_ENDIAN = &H80000000 ' big-endian mode",
          "44:     CS_MODE_MIPS32 = CS_MODE_32     ' Mips32 ISA (Mips)",
          "45:     CS_MODE_MIPS64 = CS_MODE_64     ' Mips64 ISA (Mips)",
          "46: End Enum",
          "48: 'Runtime option for the disassembled engine",
          "49: Public Enum cs_opt_type",
          "50:     CS_OPT_SYNTAX = 1     ' Assembly output syntax",
          "51:     CS_OPT_DETAIL         ' Break down instruction structure into details",
          "52:     CS_OPT_MODE           ' Change engine's mode at run-time",
          "53:     CS_OPT_MEM            ' User-defined dynamic memory related functions",
          "54:     CS_OPT_SKIPDATA       ' Skip data when disassembling. Then engine is in SKIPDATA mode.",
          "55:     CS_OPT_SKIPDATA_SETUP ' Setup user-defined function for SKIPDATA option",
          "56: End Enum",
          "59: 'Runtime option value (associated with option type above)",
          "60: Public Enum cs_opt_value",
          "61:     CS_OPT_OFF = 0          ' Turn OFF an option - default option of CS_OPT_DETAIL, CS_OPT_SKIPDATA.",
          "62:     CS_OPT_ON = 3           ' Turn ON an option (CS_OPT_DETAIL, CS_OPT_SKIPDATA).",
          "63:     CS_OPT_SYNTAX_DEFAULT = 0 ' Default asm syntax (CS_OPT_SYNTAX).",
          "64:     CS_OPT_SYNTAX_INTEL     ' X86 Intel asm syntax - default on X86 (CS_OPT_SYNTAX).",
          "65:     CS_OPT_SYNTAX_ATT       ' X86 ATT asm syntax (CS_OPT_SYNTAX).",
          "66:     CS_OPT_SYNTAX_NOREGNAME ' Prints register name with only number (CS_OPT_SYNTAX)",
          "67: End Enum",
          "69: 'Common instruction operand types - to be consistent across all architectures.",
          "70: Public Enum cs_op_type",
          "71:     CS_OP_INVALID = 0 ' uninitialized/invalid operand.",
          "72:     CS_OP_REG       ' Register operand.",
          "73:     CS_OP_IMM       ' Immediate operand.",
          "74:     CS_OP_MEM       ' Memory operand.",
          "75:     CS_OP_FP        ' Floating-Point operand.",
          "76: End Enum",
          "78: 'Common instruction groups - to be consistent across all architectures.",
          "79: Public Enum cs_group_type",
          "80:     CS_GRP_INVALID = 0 ' uninitialized/invalid group.",
          "81:     CS_GRP_JUMP      ' all jump instructions (conditional+direct+indirect jumps)",
          "82:     CS_GRP_CALL      ' all call instructions",
          "83:     CS_GRP_RET       ' all return instructions",
          "84:     CS_GRP_INT       ' all interrupt instructions (int+syscall)",
          "85:     CS_GRP_IRET      ' all interrupt return instructions",
          "86: End Enum",
          "89: 'NOTE: All information in cs_detail is only available when CS_OPT_DETAIL = CS_OPT_ON",
          "90: Public Type cs_detail",
          "91:     regs_read(0 To 11) As Byte      ' list of implicit registers read by this insn UNSIGNED",
          "92:     regs_read_count As Byte         ' number of implicit registers read by this insn UNSIGNED",
          "93:     regs_write(0 To 19) As Byte     ' list of implicit registers modified by this insn UNSIGNED",
          "94:     regs_write_count As Byte        ' number of implicit registers modified by this insn UNSIGNED",
          "95:     groups(0 To 7) As Byte          ' list of group this instruction belong to UNSIGNED",
          "96:     groups_count As Byte            ' number of groups this insn belongs to UNSIGNED",
          "97: End Type",
          "99: 'typedef struct cs_detail {",
          "100: '    uint8_t regs_read[12]; // list of implicit registers read by this insn",
          "101: '    uint8_t regs_read_count; // number of implicit registers read by this insn",
          "102: '",
          "103: '    uint8_t regs_write[20]; // list of implicit registers modified by this insn",
          "104: '    uint8_t regs_write_count; // number of implicit registers modified by this insn",
          "105: '",
          "106: '    uint8_t groups[8]; // list of group this instruction belong to",
          "107: '    uint8_t groups_count; // number of groups this insn belongs to",
          "108: '",
          "109: '    // Architecture-specific instruction info",
          "110: '    union {",
          "111: '        cs_x86 x86; // X86 architecture, including 16-bit, 32-bit & 64-bit mode",
          "112: '        cs_arm64 arm64; // ARM64 architecture (aka AArch64)",
          "113: '        cs_arm arm;     // ARM architecture (including Thumb/Thumb2)",
          "114: '        cs_mips mips;   // MIPS architecture",
          "115: '        cs_ppc ppc; // PowerPC architecture",
          "116: '        cs_sparc sparc; // Sparc architecture",
          "117: '        cs_sysz sysz;   // SystemZ architecture",
          "118: '        cs_xcore xcore; // XCore architecture",
          "119: '    };",
          "120: '} cs_detail;",
          "122: 'Detail information of disassembled instruction",
          "123: Public Type cs_insn",
          "124:                               ' Instruction ID (basically a numeric ID for the instruction mnemonic)",
          "125:                               ' Find the instruction id in the '[ARCH]_insn' enum in the header file",
          "126:                               ' of corresponding architecture, such as 'arm_insn' in arm.h for ARM,",
          "127:                               ' 'x86_insn' in x86.h for X86, etc...",
          "128:                               ' available even when CS_OPT_DETAIL = CS_OPT_OFF",
          "129:                               ' NOTE: in Skipdata mode, \"data\" instruction has 0 for this id field. UNSIGNED",
          "130:     ID As Long                '",
          "131:     align As Long             'not sure why it needs this..but it does..",
          "132:     address As Currency       ' Address (EIP) of this instruction available even when CS_OPT_DETAIL = CS_OPT_OFF UNSIGNED",
          "133:     size As Integer           ' Size of this instruction available even when CS_OPT_DETAIL = CS_OPT_OFF UNSIGNED",
          "134:     bytes(0 To 15) As Byte    ' Machine bytes of this instruction, with number of bytes indicated by @size above available even when CS_OPT_DETAIL = CS_OPT_OFF",
          "135:     mnemonic(0 To 31) As Byte ' Ascii text of instruction mnemonic available even when CS_OPT_DETAIL = CS_OPT_OFF",
          "136:     op_str(0 To 159) As Byte  ' Ascii text of instruction operands available even when CS_OPT_DETAIL = CS_OPT_OFF",
          "138:                               ' Pointer to cs_detail.",
          "139:                               ' NOTE: detail pointer is only valid when both requirements below are met:",
          "140:                               ' (1) CS_OP_DETAIL = CS_OPT_ON",
          "141:                               ' (2) Engine is not in Skipdata mode (CS_OP_SKIPDATA option set to CS_OPT_ON)",
          "142:                               ' NOTE 2: when in Skipdata mode, or when detail mode is OFF, even if this pointer",
          "143:                               '  is not NULL, its content is still irrelevant.",
          "144:     lpDetail As Long          '  points to a cs_detail structure NOTE: only available when CS_OPT_DETAIL = CS_OPT_ON",
          "146: End Type",
          "148: 'All type of errors encountered by Capstone API.",
          "149: 'These are values returned by cs_errno()",
          "150: Public Enum cs_err",
          "151:     CS_ERR_OK = 0    ' No error: everything was fine",
          "152:     CS_ERR_MEM       ' Out-Of-Memory error: cs_open(), cs_disasm(), cs_disasm_iter()",
          "153:     CS_ERR_ARCH      ' Unsupported architecture: cs_open()",
          "154:     CS_ERR_HANDLE    ' Invalid handle: cs_op_count(), cs_op_index()",
          "155:     CS_ERR_CSH       ' Invalid csh argument: cs_close(), cs_errno(), cs_option()",
          "156:     CS_ERR_MODE      ' Invalid/unsupported mode: cs_open()",
          "157:     CS_ERR_OPTION    ' Invalid/unsupported option: cs_option()",
          "158:     CS_ERR_DETAIL    ' Information is unavailable because detail option is OFF",
          "159:     CS_ERR_MEMSETUP  ' Dynamic memory management uninitialized (see CS_OPT_MEM)",
          "160:     CS_ERR_VERSION   ' Unsupported version (bindings)",
          "161:     CS_ERR_DIET      ' Access irrelevant data in \"diet\" engine",
          "162:     CS_ERR_SKIPDATA  ' Access irrelevant data for \"data\" instruction in SKIPDATA mode",
          "163:     CS_ERR_X86_ATT   ' X86 AT&T syntax is unsupported (opt-out at compile time)",
          "164:     CS_ERR_X86_INTEL ' X86 Intel syntax is unsupported (opt-out at compile time)",
          "165: End Enum",
          "168: '/*",
          "169: ' Return combined API version & major and minor version numbers.",
          "170: '",
          "171: ' @major: major number of API version",
          "172: ' @minor: minor number of API version",
          "173: '",
          "174: ' @return hexical number as (major << 8 | minor), which encodes both",
          "175: '     major & minor versions.",
          "176: '     NOTE: This returned value can be compared with version number made",
          "177: '     with macro CS_MAKE_VERSION",
          "178: '",
          "179: ' For example, second API version would return 1 in @major, and 1 in @minor",
          "180: ' The return value would be 0x0101",
          "181: '",
          "182: ' NOTE: if you only care about returned value, but not major and minor values,",
          "183: ' set both @major & @minor arguments to NULL.",
          "185: 'CAPSTONE_EXPORT",
          "186: 'unsigned int cs_version(int *major, int *minor);",
          "187: Public Declare Function cs_version Lib \"vbCapstone.dll\" Alias \"bs_version\" (ByRef major As Long, ByRef minor As Long) As Long",
          "191: '",
          "192: '/*",
          "193: ' This API can be used to either ask for archs supported by this library,",
          "194: ' or check to see if the library was compile with 'diet' option (or called",
          "195: ' in 'diet' mode).",
          "196: '",
          "197: ' To check if a particular arch is supported by this library, set @query to",
          "198: ' arch mode (CS_ARCH_* value).",
          "199: ' To verify if this library supports all the archs, use CS_ARCH_ALL.",
          "200: '",
          "201: ' To check if this library is in 'diet' mode, set @query to CS_SUPPORT_DIET.",
          "202: '",
          "203: ' @return True if this library supports the given arch, or in 'diet' mode.",
          "205: 'CAPSTONE_EXPORT",
          "206: 'bool cs_support(int query);",
          "207: Public Declare Function cs_support Lib \"vbCapstone.dll\" Alias \"bs_support\" (ByVal query As Long) As Long",
          "211: '/*",
          "212: ' Initialize CS handle: this must be done before any usage of CS.",
          "213: '",
          "214: ' @arch: architecture type (CS_ARCH_*)",
          "215: ' @mode: hardware mode. This is combined of CS_MODE_*",
          "216: ' @handle: pointer to handle, which will be updated at return time",
          "217: '",
          "218: ' @return CS_ERR_OK on success, or other value on failure (refer to cs_err enum",
          "219: ' for detailed error).",
          "221: 'CAPSTONE_EXPORT",
          "222: 'cs_err cs_open(cs_arch arch, cs_mode mode, csh *handle);",
          "223: Public Declare Function cs_open Lib \"vbCapstone.dll\" Alias \"bs_open\" (ByVal arch As cs_arch, ByVal mode As cs_mode, ByRef hEngine As Long) As cs_err",
          "226: '/*",
          "227: ' Close CS handle: MUST do to release the handle when it is not used anymore.",
          "228: ' NOTE: this must be only called when there is no longer usage of Capstone,",
          "229: ' not even access to cs_insn array. The reason is the this API releases some",
          "230: ' cached memory, thus access to any Capstone API after cs_close() might crash",
          "231: ' your application.",
          "232: '",
          "233: ' In fact,this API invalidate @handle by ZERO out its value (i.e *handle = 0).",
          "234: '",
          "235: ' @handle: pointer to a handle returned by cs_open()",
          "236: '",
          "237: ' @return CS_ERR_OK on success, or other value on failure (refer to cs_err enum",
          "238: ' for detailed error).",
          "240: 'CAPSTONE_EXPORT",
          "241: 'cs_err cs_close(csh *handle);",
          "242: Public Declare Function cs_close Lib \"vbCapstone.dll\" Alias \"bs_close\" (ByRef hEngine As Long) As cs_err",
          "246: '/*",
          "247: ' Set option for disassembling engine at runtime",
          "248: '",
          "249: ' @handle: handle returned by cs_open()",
          "250: ' @type: type of option to be set",
          "251: ' @value: option value corresponding with @type",
          "252: '",
          "253: ' @return: CS_ERR_OK on success, or other value on failure.",
          "254: ' Refer to cs_err enum for detailed error.",
          "255: '",
          "256: ' NOTE: in the case of CS_OPT_MEM, handle's value can be anything,",
          "257: ' so that cs_option(handle, CS_OPT_MEM, value) can (i.e must) be called",
          "258: ' even before cs_open()",
          "260: 'CAPSTONE_EXPORT",
          "261: 'cs_err cs_option(csh handle, cs_opt_type type, size_t value);",
          "262: Public Declare Function cs_option Lib \"vbCapstone.dll\" Alias \"bs_option\" (ByVal hEngine As Long, ByVal typ As cs_opt_type, ByVal size As Long) As cs_err",
          "266: '/*",
          "267: ' Report the last error number when some API function fail.",
          "268: ' Like glibc's errno, cs_errno might not retain its old value once accessed.",
          "269: '",
          "270: ' @handle: handle returned by cs_open()",
          "271: '",
          "272: ' @return: error code of cs_err enum type (CS_ERR_*, see above)",
          "274: 'CAPSTONE_EXPORT",
          "275: 'cs_err cs_errno(csh handle);",
          "276: Public Declare Function cs_errno Lib \"vbCapstone.dll\" Alias \"bs_errno\" (ByVal hEngine As Long) As cs_err",
          "278: '",
          "279: '/*",
          "280: ' Return a string describing given error code.",
          "281: '",
          "282: ' @code: error code (see CS_ERR_* above)",
          "283: '",
          "284: ' @return: returns a pointer to a string that describes the error code",
          "285: '    passed in the argument @code",
          "287: 'CAPSTONE_EXPORT",
          "288: 'const char *cs_strerror(cs_err code);",
          "289: Public Declare Function cs_strerror Lib \"vbCapstone.dll\" Alias \"bs_strerror\" (ByVal errCode As cs_err) As Long",
          "292: '/*",
          "293: ' Disassemble binary code, given the code buffer, size, address and number",
          "294: ' of instructions to be decoded.",
          "295: ' This API dynamically allocate memory to contain disassembled instruction.",
          "296: ' Resulted instructions will be put into @*insn",
          "297: '",
          "298: ' NOTE 1: this API will automatically determine memory needed to contain",
          "299: ' output disassembled instructions in @insn.",
          "300: '",
          "301: ' NOTE 2: caller must free the allocated memory itself to avoid memory leaking.",
          "302: '",
          "303: ' NOTE 3: for system with scarce memory to be dynamically allocated such as",
          "304: ' OS kernel or firmware, the API cs_disasm_iter() might be a better choice than",
          "305: ' cs_disasm(). The reason is that with cs_disasm(), based on limited available",
          "306: ' memory, we have to calculate in advance how many instructions to be disassembled,",
          "307: ' which complicates things. This is especially troublesome for the case @count=0,",
          "308: ' when cs_disasm() runs uncontrollably (until either end of input buffer, or",
          "309: ' when it encounters an invalid instruction).",
          "310: '",
          "311: ' @handle: handle returned by cs_open()",
          "312: ' @code: buffer containing raw binary code to be disassembled.",
          "313: ' @code_size: size of the above code buffer.",
          "314: ' @address: address of the first instruction in given raw code buffer.",
          "315: ' @insn: array of instructions filled in by this API.",
          "316: '       NOTE: @insn will be allocated by this function, and should be freed",
          "317: '       with cs_free() API.",
          "318: ' @count: number of instructions to be disassembled, or 0 to get all of them",
          "319: '",
          "320: ' @return: the number of successfully disassembled instructions,",
          "321: ' or 0 if this function failed to disassemble the given code",
          "322: '",
          "323: ' On failure, call cs_errno() for error code.",
          "325: 'CAPSTONE_EXPORT",
          "326: 'size_t cs_disasm(",
          "327: '        csh handle,",
          "328: '        const uint8_t *code,",
          "329: '        size_t code_size,",
          "330: '        uint64_t address,",
          "331: '        size_t count,",
          "332: '        cs_insn **insn",
          "333: ');",
          "334: Public Declare Function cs_disasm Lib \"vbCapstone.dll\" Alias \"bs_disasm\" ( _",
          "335:     ByVal hEngine As Long, _",
          "336:     ByRef code As Byte, _",
          "337:     ByVal size As Long, _",
          "338:     ByVal address As Currency, _",
          "339:     ByVal count As Long, _",
          "340:     ByRef instAryPtr As Long _",
          "341: ) As Long",
          "343: 'this proto also lets use byte() to get a dump easily..",
          "344: Public Declare Sub getInstruction Lib \"vbCapstone.dll\" (ByVal hInstrAry As Long, ByVal index As Long, ByVal insPtr As Long, ByVal size As Long)",
          "347: '/*",
          "348: '  Deprecated function - to be retired in the next version!",
          "349: '  Use cs_disasm() instead of cs_disasm_ex()",
          "351: 'CAPSTONE_EXPORT",
          "352: 'CAPSTONE_DEPRECATED",
          "353: 'size_t cs_disasm_ex(csh handle,",
          "354: '        const uint8_t *code, size_t code_size,",
          "355: '        uint64_t address,",
          "356: '        size_t count,",
          "357: '        cs_insn **insn);",
          "361: '/*",
          "362: ' Free memory allocated by cs_malloc() or cs_disasm() (argument @insn)",
          "363: '",
          "364: ' @insn: pointer returned by @insn argument in cs_disasm() or cs_malloc()",
          "365: ' @count: number of cs_insn structures returned by cs_disasm(), or 1",
          "366: '     to free memory allocated by cs_malloc().",
          "368: 'CAPSTONE_EXPORT",
          "369: 'void cs_free(cs_insn *insn, size_t count);",
          "370: Public Declare Sub cs_free Lib \"vbCapstone.dll\" Alias \"bs_free\" (ByVal instr As Long, ByVal count As Long)",
          "373: '",
          "374: '/*",
          "375: ' Allocate memory for 1 instruction to be used by cs_disasm_iter().",
          "376: '",
          "377: ' @handle: handle returned by cs_open()",
          "378: '",
          "379: ' NOTE: when no longer in use, you can reclaim the memory allocated for",
          "380: ' this instruction with cs_free(insn, 1)",
          "382: 'CAPSTONE_EXPORT",
          "383: 'cs_insn *cs_malloc(csh handle);",
          "384: Public Declare Function cs_malloc Lib \"vbCapstone.dll\" Alias \"bs_malloc\" (ByVal handle As Long) As Long",
          "388: '/*",
          "389: ' Fast API to disassemble binary code, given the code buffer, size, address",
          "390: ' and number of instructions to be decoded.",
          "391: ' This API put the resulted instruction into a given cache in @insn.",
          "392: ' See tests/test_iter.c for sample code demonstrating this API.",
          "393: '",
          "394: ' NOTE 1: this API will update @code, @size & @address to point to the next",
          "395: ' instruction in the input buffer. Therefore, it is convenient to use",
          "396: ' cs_disasm_iter() inside a loop to quickly iterate all the instructions.",
          "397: ' While decoding one instruction at a time can also be achieved with",
          "398: ' cs_disasm(count=1), some benchmarks shown that cs_disasm_iter() can be 30%",
          "399: ' faster on random input.",
          "400: '",
          "401: ' NOTE 2: the cache in @insn can be created with cs_malloc() API.",
          "402: '",
          "403: ' NOTE 3: for system with scarce memory to be dynamically allocated such as",
          "404: ' OS kernel or firmware, this API is recommended over cs_disasm(), which",
          "405: ' allocates memory based on the number of instructions to be disassembled.",
          "406: ' The reason is that with cs_disasm(), based on limited available memory,",
          "407: ' we have to calculate in advance how many instructions to be disassembled,",
          "408: ' which complicates things. This is especially troublesome for the case",
          "409: ' @count=0, when cs_disasm() runs uncontrollably (until either end of input",
          "410: ' buffer, or when it encounters an invalid instruction).",
          "411: '",
          "412: ' @handle: handle returned by cs_open()",
          "413: ' @code: buffer containing raw binary code to be disassembled",
          "414: ' @code_size: size of above code",
          "415: ' @address: address of the first insn in given raw code buffer",
          "416: ' @insn: pointer to instruction to be filled in by this API.",
          "417: '",
          "418: ' @return: true if this API successfully decode 1 instruction,",
          "419: ' or false otherwise.",
          "420: '",
          "421: ' On failure, call cs_errno() for error code.",
          "423: 'CAPSTONE_EXPORT",
          "424: 'bool cs_disasm_iter(csh handle, const uint8_t **code, size_t *size, uint64_t *address, cs_insn *insn);",
          "428: '/*",
          "429: ' Return friendly name of register in a string.",
          "430: ' Find the instruction id from header file of corresponding architecture (arm.h for ARM,",
          "431: ' x86.h for X86, ...)",
          "432: '",
          "433: ' WARN: when in 'diet' mode, this API is irrelevant because engine does not",
          "434: ' store register name.",
          "435: '",
          "436: ' @handle: handle returned by cs_open()",
          "437: ' @reg_id: register id",
          "438: '",
          "439: ' @return: string name of the register, or NULL if @reg_id is invalid.",
          "441: 'CAPSTONE_EXPORT",
          "442: 'const char *cs_reg_name(csh handle, unsigned int reg_id);",
          "443: Public Declare Function cs_reg_name Lib \"vbCapstone.dll\" Alias \"bs_reg_name\" (ByVal handle As Long, ByVal regID As Long) As Long",
          "448: '/*",
          "449: ' Return friendly name of an instruction in a string.",
          "450: ' Find the instruction id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)",
          "451: '",
          "452: ' WARN: when in 'diet' mode, this API is irrelevant because the engine does not",
          "453: ' store instruction name.",
          "454: '",
          "455: ' @handle: handle returned by cs_open()",
          "456: ' @insn_id: instruction id",
          "457: '",
          "458: ' @return: string name of the instruction, or NULL if @insn_id is invalid.",
          "460: 'CAPSTONE_EXPORT",
          "461: 'const char *cs_insn_name(csh handle, unsigned int insn_id);",
          "462: Public Declare Function cs_insn_name Lib \"vbCapstone.dll\" Alias \"bs_insn_name\" (ByVal handle As Long, ByVal insn_id As Long) As Long",
          "467: '/*",
          "468: ' Return friendly name of a group id (that an instruction can belong to)",
          "469: ' Find the group id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)",
          "470: '",
          "471: ' WARN: when in 'diet' mode, this API is irrelevant because the engine does not",
          "472: ' store group name.",
          "473: '",
          "474: ' @handle: handle returned by cs_open()",
          "475: ' @group_id: group id",
          "476: '",
          "477: ' @return: string name of the group, or NULL if @group_id is invalid.",
          "479: 'CAPSTONE_EXPORT",
          "480: 'const char *cs_group_name(csh handle, unsigned int group_id);",
          "481: Public Declare Function cs_group_name Lib \"vbCapstone.dll\" Alias \"bs_group_name\" (ByVal handle As Long, ByVal group_id As Long) As Long",
          "485: '/*",
          "486: ' Check if a disassembled instruction belong to a particular group.",
          "487: ' Find the group id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)",
          "488: ' Internally, this simply verifies if @group_id matches any member of insn->groups array.",
          "489: '",
          "490: ' NOTE: this API is only valid when detail option is ON (which is OFF by default).",
          "491: '",
          "492: ' WARN: when in 'diet' mode, this API is irrelevant because the engine does not",
          "493: ' update @groups array.",
          "494: '",
          "495: ' @handle: handle returned by cs_open()",
          "496: ' @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()",
          "497: ' @group_id: group that you want to check if this instruction belong to.",
          "498: '",
          "499: ' @return: true if this instruction indeed belongs to aboved group, or false otherwise.",
          "501: 'CAPSTONE_EXPORT",
          "502: 'bool cs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id);",
          "503: Public Declare Function cs_insn_group Lib \"vbCapstone.dll\" Alias \"bs_insn_group\" (ByVal handle As Long, ByVal instruction As Long, ByVal group_id As Long) As Long",
          "507: '/*",
          "508: ' Check if a disassembled instruction IMPLICITLY used a particular register.",
          "509: ' Find the register id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)",
          "510: ' Internally, this simply verifies if @reg_id matches any member of insn->regs_read array.",
          "511: '",
          "512: ' NOTE: this API is only valid when detail option is ON (which is OFF by default)",
          "513: '",
          "514: ' WARN: when in 'diet' mode, this API is irrelevant because the engine does not",
          "515: ' update @regs_read array.",
          "516: '",
          "517: ' @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()",
          "518: ' @reg_id: register that you want to check if this instruction used it.",
          "519: '",
          "520: ' @return: true if this instruction indeed implicitly used aboved register, or false otherwise.",
          "522: 'CAPSTONE_EXPORT",
          "523: 'bool cs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id);",
          "524: Public Declare Function cs_reg_read Lib \"vbCapstone.dll\" Alias \"bs_reg_read\" (ByVal handle As Long, ByVal instruction As Long, ByVal reg_id As Long) As Long",
          "528: '/*",
          "529: ' Check if a disassembled instruction IMPLICITLY modified a particular register.",
          "530: ' Find the register id from header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)",
          "531: ' Internally, this simply verifies if @reg_id matches any member of insn->regs_write array.",
          "532: '",
          "533: ' NOTE: this API is only valid when detail option is ON (which is OFF by default)",
          "534: '",
          "535: ' WARN: when in 'diet' mode, this API is irrelevant because the engine does not",
          "536: ' update @regs_write array.",
          "537: '",
          "538: ' @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()",
          "539: ' @reg_id: register that you want to check if this instruction modified it.",
          "540: '",
          "541: ' @return: true if this instruction indeed implicitly modified aboved register, or false otherwise.",
          "543: 'CAPSTONE_EXPORT",
          "544: 'bool cs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id);",
          "545: Public Declare Function cs_reg_write Lib \"vbCapstone.dll\" Alias \"bs_reg_write\" (ByVal handle As Long, ByVal instruction As Long, ByVal reg_id As Long) As Long",
          "549: '/*",
          "550: ' Count the number of operands of a given type.",
          "551: ' Find the operand type in header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)",
          "552: '",
          "553: ' NOTE: this API is only valid when detail option is ON (which is OFF by default)",
          "554: '",
          "555: ' @handle: handle returned by cs_open()",
          "556: ' @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()",
          "557: ' @op_type: Operand type to be found.",
          "558: '",
          "559: ' @return: number of operands of given type @op_type in instruction @insn,",
          "560: ' or -1 on failure.",
          "562: 'CAPSTONE_EXPORT",
          "563: 'int cs_op_count(csh handle, const cs_insn *insn, unsigned int op_type);",
          "564: Public Declare Function cs_op_count Lib \"vbCapstone.dll\" Alias \"bs_op_count\" (ByVal handle As Long, ByVal instruction As Long, ByVal op_type As Long) As Long",
          "568: '/*",
          "569: ' Retrieve the position of operand of given type in <arch>.operands[] array.",
          "570: ' Later, the operand can be accessed using the returned position.",
          "571: ' Find the operand type in header file of corresponding architecture (arm.h for ARM, x86.h for X86, ...)",
          "572: '",
          "573: ' NOTE: this API is only valid when detail option is ON (which is OFF by default)",
          "574: '",
          "575: ' @handle: handle returned by cs_open()",
          "576: ' @insn: disassembled instruction structure received from cs_disasm() or cs_disasm_iter()",
          "577: ' @op_type: Operand type to be found.",
          "578: ' @position: position of the operand to be found. This must be in the range",
          "579: '            [1, cs_op_count(handle, insn, op_type)]",
          "580: '",
          "581: ' @return: index of operand of given type @op_type in <arch>.operands[] array",
          "582: ' in instruction @insn, or -1 on failure.",
          "584: 'CAPSTONE_EXPORT",
          "585: 'int cs_op_index(csh handle, const cs_insn *insn, unsigned int op_type, unsigned int position);",
          "586: Public Declare Function cs_op_index Lib \"vbCapstone.dll\" Alias \"bs_op_index\" (ByVal handle As Long, ByVal instruction As Long, ByVal op_type As Long, ByVal position As Long) As Long",
          "590: Private Declare Function lstrcpy Lib \"kernel32\" Alias \"lstrcpyA\" (ByVal lpString1 As String, ByVal lpString2 As String) As Long",
          "591: Private Declare Function lstrlen Lib \"kernel32\" Alias \"lstrlenA\" (ByVal lpString As Long) As Long",
          "593: Function cstr2vb(lpStr As Long) As String",
          "595:     Dim length As Long",
          "596:     Dim buf() As Byte",
          "598:     If lpStr = 0 Then Exit Function",
          "600:     length = lstrlen(lpStr)",
          "601:     If length < 1 Then Exit Function",
          "603:     ReDim buf(1 To length)",
          "604:     CopyMemory buf(1), ByVal lpStr, length",
          "606:     cstr2vb = StrConv(buf, vbUnicode, &H409)",
          "608: End Function",
          "610: Function err2str(e As cs_err) As String",
          "611:     Dim lpStr As Long",
          "612:     lpStr = cs_strerror(e)",
          "613:     err2str = cstr2vb(lpStr)",
          "614: End Function",
          "616: Function regName(hEngine As Long, regID As Long) As String",
          "617:     Dim lpStr As Long",
          "618:     lpStr = cs_reg_name(hEngine, regID)",
          "619:     regName = cstr2vb(lpStr)",
          "620:     If Len(regName) = 0 Or DEBUG_DUMP Then regName = regName & \" (\" & Hex(regID) & \")\"",
          "621: End Function",
          "623: Function insnName(hEngine As Long, insnID As Long) As String",
          "624:     Dim lpStr As Long",
          "625:     lpStr = cs_insn_name(hEngine, insnID)",
          "626:     insnName = cstr2vb(lpStr)",
          "627:     If Len(insnName) = 0 Or DEBUG_DUMP Then insnName = insnName & \" (\" & Hex(insnID) & \")\"",
          "628: End Function",
          "630: Function groupName(hEngine As Long, groupID As Long) As String",
          "631:     Dim lpStr As Long",
          "632:     lpStr = cs_group_name(hEngine, groupID)",
          "633:     groupName = cstr2vb(lpStr)",
          "634:     If Len(groupName) = 0 Or DEBUG_DUMP Then groupName = groupName & \" (\" & Hex(groupID) & \")\"",
          "635: End Function",
          "",
          "---------------"
        ],
        "bindings/vb6/Project1.vbp||bindings/vb6/Project1.vbp": [
          "File: bindings/vb6/Project1.vbp -> bindings/vb6/Project1.vbp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Type=Exe",
          "2: Reference=*\\G{00020430-0000-0000-C000-000000000046}#2.0#0#C:\\WINDOWS\\system32\\stdole2.tlb#OLE Automation",
          "3: Form=Form1.frm",
          "4: Module=mCapStone; Module1.bas",
          "5: Module=mx86; mx86.bas",
          "6: Module=mMisc; mMisc.bas",
          "7: Class=CInstruction; CInstruction.cls",
          "8: Class=CInstDetails; CInstDetails.cls",
          "9: Class=CDisassembler; CDisassembler.cls",
          "10: Object={831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0; mscomctl.ocx",
          "11: Class=CX86Inst; CX86Inst.cls",
          "12: Class=CX86Operand; CX86Operand.cls",
          "13: Class=CX86OpMem; CX86OpMem.cls",
          "14: Startup=\"Form1\"",
          "15: ExeName32=\"Project1.exe\"",
          "16: Command32=\"\"",
          "17: Name=\"Project1\"",
          "18: HelpContextID=\"0\"",
          "19: CompatibleMode=\"0\"",
          "20: MajorVer=1",
          "21: MinorVer=0",
          "22: RevisionVer=0",
          "23: AutoIncrementVer=0",
          "24: ServerSupportFiles=0",
          "25: VersionCompanyName=\"sandsprite\"",
          "26: CompilationType=0",
          "27: OptimizationType=0",
          "28: FavorPentiumPro(tm)=0",
          "29: CodeViewDebugInfo=0",
          "30: NoAliasing=0",
          "31: BoundsCheck=0",
          "32: OverflowCheck=0",
          "33: FlPointCheck=0",
          "34: FDIVCheck=0",
          "35: UnroundedFP=0",
          "36: StartMode=0",
          "37: Unattended=0",
          "38: Retained=0",
          "39: ThreadPerObject=0",
          "40: MaxNumberOfThreads=1",
          "42: [MS Transaction Server]",
          "43: AutoRefresh=1",
          "45: [fastBuild]",
          "46: fullPath=%ap%\\bin\\demo.exe",
          "",
          "---------------"
        ],
        "bindings/vb6/Project1.vbw||bindings/vb6/Project1.vbw": [
          "File: bindings/vb6/Project1.vbw -> bindings/vb6/Project1.vbw",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Form1 = 110, 110, 1233, 906, , 88, 88, 1116, 749, C",
          "2: mCapStone = 22, 22, 1050, 683,",
          "3: mx86 = 88, 88, 1040, 757,",
          "4: mMisc = 66, 66, 1094, 727,",
          "5: CInstruction = 0, 0, 0, 0, C",
          "6: CInstDetails = 132, 132, 1084, 801, C",
          "7: CDisassembler = 44, 44, 1229, 809,",
          "8: CX86Inst = 154, 154, 1106, 823, C",
          "9: CX86Operand = 176, 176, 1128, 845, C",
          "10: CX86OpMem = 198, 198, 1150, 867, C",
          "",
          "---------------"
        ],
        "bindings/vb6/mMisc.bas||bindings/vb6/mMisc.bas": [
          "File: bindings/vb6/mMisc.bas -> bindings/vb6/mMisc.bas",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Attribute VB_Name = \"mMisc\"",
          "2: Option Explicit",
          "4: 'These are old library functions",
          "6: Private Type Bit64Currency",
          "7:   value As Currency",
          "8: End Type",
          "10: Private Type Bit64Integer",
          "11:   LowValue As Long",
          "12:   HighValue As Long",
          "13: End Type",
          "15: Global Const LANG_US = &H409",
          "17: Public Declare Function LoadLibrary Lib \"kernel32\" Alias \"LoadLibraryA\" (ByVal lpLibFileName As String) As Long",
          "18: Public Declare Function FreeLibrary Lib \"kernel32\" (ByVal hLibModule As Long) As Long",
          "19: Public Declare Sub CopyMemory Lib \"kernel32\" Alias \"RtlMoveMemory\" (Destination As Any, Source As Any, ByVal length As Long)",
          "20: Public Declare Function GetProcAddress Lib \"kernel32\" (ByVal hModule As Long, ByVal lpProcName As String) As Long",
          "21: Public Declare Function GetModuleHandle Lib \"kernel32\" Alias \"GetModuleHandleA\" (ByVal lpModuleName As String) As Long",
          "22: Public Declare Function SetDllDirectory Lib \"kernel32\" Alias \"SetDllDirectoryA\" (ByVal lpPathName As String) As Long",
          "24: Function makeCur(high As Long, low As Long) As Currency",
          "25:   Dim c As Bit64Currency",
          "26:   Dim dl As Bit64Integer",
          "27:   dl.LowValue = low",
          "28:   dl.HighValue = high",
          "29:   LSet c = dl",
          "30:   makeCur = c.value",
          "31: End Function",
          "33: Function lng2Cur(v As Long) As Currency",
          "34:   Dim c As Bit64Currency",
          "35:   Dim dl As Bit64Integer",
          "36:   dl.LowValue = v",
          "37:   dl.HighValue = 0",
          "38:   LSet c = dl",
          "39:   lng2Cur = c.value",
          "40: End Function",
          "42: Function cur2str(v As Currency) As String",
          "43:     Dim c As Bit64Currency",
          "44:     Dim dl As Bit64Integer",
          "45:     c.value = v",
          "46:     LSet dl = c",
          "47:     If dl.HighValue = 0 Then",
          "48:         cur2str = Right(\"00000000\" & Hex(dl.LowValue), 8)",
          "49:     Else",
          "50:         cur2str = Right(\"00000000\" & Hex(dl.HighValue), 8) & \"`\" & Right(\"00000000\" & Hex(dl.LowValue), 8)",
          "51:     End If",
          "52: End Function",
          "54: Function x64StrToCur(ByVal str As String) As Currency",
          "56:     str = Replace(Trim(str), \"0x\", \"\")",
          "57:     str = Replace(str, \" \", \"\")",
          "58:     str = Replace(str, \"`\", \"\")",
          "60:     Dim low As String, high As String",
          "61:     Dim c As Bit64Currency",
          "62:     Dim dl As Bit64Integer",
          "64:     low = VBA.Right(str, 8)",
          "65:     dl.LowValue = CLng(\"&h\" & low)",
          "67:     If Len(str) > 8 Then",
          "68:         high = Mid(str, 1, Len(str) - 8)",
          "69:         dl.HighValue = CLng(\"&h\" & high)",
          "70:     End If",
          "72:     LSet c = dl",
          "73:     x64StrToCur = c.value",
          "75: End Function",
          "77: Function cur2lng(v As Currency) As Long",
          "78:   Dim c As Bit64Currency",
          "79:   Dim dl As Bit64Integer",
          "80:   c.value = v",
          "81:   LSet dl = c",
          "82:   cur2lng = dl.LowValue",
          "83: End Function",
          "85: Function readLng(offset As Long) As Long",
          "86:     Dim tmp As Long",
          "87:     CopyMemory ByVal VarPtr(tmp), ByVal offset, 4",
          "88:     readLng = tmp",
          "89: End Function",
          "91: Function readByte(offset As Long) As Byte",
          "92:     Dim tmp As Byte",
          "93:     CopyMemory ByVal VarPtr(tmp), ByVal offset, 1",
          "94:     readByte = tmp",
          "95: End Function",
          "97: Function readCur(offset As Long) As Currency",
          "98:     Dim tmp As Currency",
          "99:     CopyMemory ByVal VarPtr(tmp), ByVal offset, 8",
          "100:     readCur = tmp",
          "101: End Function",
          "103: Function col2Str(c As Collection, Optional emptyVal = \"\") As String",
          "104:     Dim v, tmp As String",
          "106:     If c.count = 0 Then",
          "107:         col2Str = emptyVal",
          "108:     Else",
          "109:         For Each v In c",
          "110:             col2Str = col2Str & hhex(v) & \", \"",
          "111:         Next",
          "112:         col2Str = Mid(col2Str, 1, Len(col2Str) - 2)",
          "113:     End If",
          "115: End Function",
          "117: Function regCol2Str(hEngine As Long, c As Collection) As String",
          "118:     Dim v, tmp As String",
          "120:     If c.count = 0 Then Exit Function",
          "122:     For Each v In c",
          "123:         regCol2Str = regCol2Str & regName(hEngine, CLng(v)) & \", \"",
          "124:     Next",
          "125:     regCol2Str = Mid(regCol2Str, 1, Len(regCol2Str) - 2)",
          "127: End Function",
          "131: Function b2Str(b() As Byte) As String",
          "132:     Dim i As Long",
          "134:     If AryIsEmpty(b) Then",
          "135:          b2Str = \"Empty\"",
          "136:     Else",
          "137:         For i = 0 To UBound(b)",
          "138:              b2Str = b2Str & hhex(b(i)) & \" \"",
          "139:         Next",
          "140:         b2Str = Trim(b2Str)",
          "141:     End If",
          "143: End Function",
          "147: Function AryIsEmpty(ary) As Boolean",
          "148:   Dim i As Long",
          "150:   On Error GoTo oops",
          "151:     i = UBound(ary)  '<- throws error if not initalized",
          "152:     AryIsEmpty = False",
          "153:   Exit Function",
          "154: oops: AryIsEmpty = True",
          "155: End Function",
          "157: Public Function toBytes(ByVal hexstr, Optional strRet As Boolean = False)",
          "159: 'supports:",
          "160: '11 22 33 44   spaced hex chars",
          "161: '11223344      run together hex strings",
          "162: '11,22,33,44   csv hex",
          "163: '\\x11,0x22     misc C source rips",
          "164: '",
          "165: 'ignores common C source prefixes, operators, delimiters, and whitespace",
          "166: '",
          "167: 'not supported",
          "168: '1,2,3,4        all hex chars are must have two chars even if delimited",
          "169: '",
          "170: 'a version which supports more formats is here:",
          "171: '  https://github.com/dzzie/libs/blob/master/dzrt/globals.cls",
          "173:     Dim ret As String, x As String, str As String",
          "174:     Dim r() As Byte, b As Byte, b1 As Byte",
          "175:     Dim foundDecimal As Boolean, tmp, i, a, a2",
          "176:     Dim pos As Long, marker As String",
          "178:     On Error GoTo nope",
          "180:     str = Replace(hexstr, vbCr, Empty)",
          "181:     str = Replace(str, vbLf, Empty)",
          "182:     str = Replace(str, vbTab, Empty)",
          "183:     str = Replace(str, Chr(0), Empty)",
          "184:     str = Replace(str, \"{\", Empty)",
          "185:     str = Replace(str, \"}\", Empty)",
          "186:     str = Replace(str, \";\", Empty)",
          "187:     str = Replace(str, \"+\", Empty)",
          "188:     str = Replace(str, \"\"\"\"\"\", Empty)",
          "189:     str = Replace(str, \"'\", Empty)",
          "190:     str = Replace(str, \" \", Empty)",
          "191:     str = Replace(str, \"0x\", Empty)",
          "192:     str = Replace(str, \"\\x\", Empty)",
          "193:     str = Replace(str, \",\", Empty)",
          "195:     For i = 1 To Len(str) Step 2",
          "196:         x = Mid(str, i, 2)",
          "197:         If Not isHexChar(x, b) Then Exit Function",
          "198:         bpush r(), b",
          "199:     Next",
          "201:     If strRet Then",
          "202:         toBytes = StrConv(r, vbUnicode, LANG_US)",
          "203:     Else",
          "204:         toBytes = r",
          "205:     End If",
          "207: nope:",
          "208: End Function",
          "210: Private Sub bpush(bAry() As Byte, b As Byte) 'this modifies parent ary object",
          "211:     On Error GoTo init",
          "212:     Dim x As Long",
          "214:     x = UBound(bAry) '<-throws Error If Not initalized",
          "215:     ReDim Preserve bAry(UBound(bAry) + 1)",
          "216:     bAry(UBound(bAry)) = b",
          "218:     Exit Sub",
          "220: init:",
          "221:     ReDim bAry(0)",
          "222:     bAry(0) = b",
          "224: End Sub",
          "226: Sub push(ary, value) 'this modifies parent ary object",
          "227:     On Error GoTo init",
          "228:     Dim x",
          "230:     x = UBound(ary)",
          "231:     ReDim Preserve ary(x + 1)",
          "233:     If IsObject(value) Then",
          "234:         Set ary(x + 1) = value",
          "235:     Else",
          "236:         ary(x + 1) = value",
          "237:     End If",
          "239:     Exit Sub",
          "240: init:",
          "241:     ReDim ary(0)",
          "242:     If IsObject(value) Then",
          "243:         Set ary(0) = value",
          "244:     Else",
          "245:         ary(0) = value",
          "246:     End If",
          "247: End Sub",
          "250: Public Function isHexChar(hexValue As String, Optional b As Byte) As Boolean",
          "251:     On Error Resume Next",
          "252:     Dim v As Long",
          "254:     If Len(hexValue) = 0 Then GoTo nope",
          "255:     If Len(hexValue) > 2 Then GoTo nope 'expecting hex char code like FF or 90",
          "257:     v = CLng(\"&h\" & hexValue)",
          "258:     If Err.Number <> 0 Then GoTo nope 'invalid hex code",
          "260:     b = CByte(v)",
          "261:     If Err.Number <> 0 Then GoTo nope  'shouldnt happen.. > 255 cant be with len() <=2 ?",
          "263:     isHexChar = True",
          "265:     Exit Function",
          "266: nope:",
          "267:     Err.Clear",
          "268:     isHexChar = False",
          "269: End Function",
          "271: Function hhex(b) As String",
          "272:     hhex = Right(\"00\" & Hex(b), 2)",
          "273: End Function",
          "275: Function rpad(x, i, Optional c = \" \")",
          "276:     rpad = Left(x & String(i, c), i)",
          "277: End Function",
          "279: Function HexDump(bAryOrStrData, Optional hexOnly = 0, Optional ByVal startAt As Long = 1, Optional ByVal length As Long = -1) As String",
          "280:     Dim s() As String, chars As String, tmp As String",
          "281:     On Error Resume Next",
          "282:     Dim ary() As Byte",
          "283:     Dim offset As Long",
          "284:     Const LANG_US = &H409",
          "285:     Dim i As Long, tt, h, x",
          "287:     offset = 0",
          "289:     If TypeName(bAryOrStrData) = \"Byte()\" Then",
          "290:         ary() = bAryOrStrData",
          "291:     Else",
          "292:         ary = StrConv(CStr(bAryOrStrData), vbFromUnicode, LANG_US)",
          "293:     End If",
          "295:     If startAt < 1 Then startAt = 1",
          "296:     If length < 1 Then length = -1",
          "298:     While startAt Mod 16 <> 0",
          "299:         startAt = startAt - 1",
          "300:     Wend",
          "302:     startAt = startAt + 1",
          "304:     chars = \"   \"",
          "305:     For i = startAt To UBound(ary) + 1",
          "306:         tt = Hex(ary(i - 1))",
          "307:         If Len(tt) = 1 Then tt = \"0\" & tt",
          "308:         tmp = tmp & tt & \" \"",
          "309:         x = ary(i - 1)",
          "310:         'chars = chars & IIf((x > 32 And x < 127) Or x > 191, Chr(x), \".\") 'x > 191 causes \\x0 problems on non us systems... asc(chr(x)) = 0",
          "311:         chars = chars & IIf((x > 32 And x < 127), Chr(x), \".\")",
          "312:         If i > 1 And i Mod 16 = 0 Then",
          "313:             h = Hex(offset)",
          "314:             While Len(h) < 6: h = \"0\" & h: Wend",
          "315:             If hexOnly = 0 Then",
          "316:                 push s, h & \"   \" & tmp & chars",
          "317:             Else",
          "318:                 push s, tmp",
          "319:             End If",
          "320:             offset = offset + 16",
          "321:             tmp = Empty",
          "322:             chars = \"   \"",
          "323:         End If",
          "324:         If length <> -1 Then",
          "325:             length = length - 1",
          "326:             If length = 0 Then Exit For",
          "327:         End If",
          "328:     Next",
          "330:     'if read length was not mod 16=0 then",
          "331:     'we have part of line to account for",
          "332:     If tmp <> Empty Then",
          "333:         If hexOnly = 0 Then",
          "334:             h = Hex(offset)",
          "335:             While Len(h) < 6: h = \"0\" & h: Wend",
          "336:             h = h & \"   \" & tmp",
          "337:             While Len(h) <= 56: h = h & \" \": Wend",
          "338:             push s, h & chars",
          "339:         Else",
          "340:             push s, tmp",
          "341:         End If",
          "342:     End If",
          "344:     HexDump = Join(s, vbCrLf)",
          "346:     If hexOnly <> 0 Then",
          "347:         HexDump = Replace(HexDump, \" \", \"\")",
          "348:         HexDump = Replace(HexDump, vbCrLf, \"\")",
          "349:     End If",
          "351: End Function",
          "355: Function FileExists(path As String) As Boolean",
          "356:   On Error GoTo hell",
          "358:   If Len(path) = 0 Then Exit Function",
          "359:   If Right(path, 1) = \"\\\" Then Exit Function",
          "360:   If Dir(path, vbHidden Or vbNormal Or vbReadOnly Or vbSystem) <> \"\" Then FileExists = True",
          "362:   Exit Function",
          "363: hell: FileExists = False",
          "364: End Function",
          "366: Sub WriteFile(path, it)",
          "367:     Dim f",
          "368:     f = FreeFile",
          "369:     Open path For Output As #f",
          "370:     Print #f, it",
          "371:     Close f",
          "372: End Sub",
          "374: Function GetParentFolder(path) As String",
          "375:     Dim tmp() As String, ub As Long",
          "376:     On Error Resume Next",
          "377:     tmp = Split(path, \"\\\")",
          "378:     ub = tmp(UBound(tmp))",
          "379:     If Err.Number = 0 Then",
          "380:         GetParentFolder = Replace(Join(tmp, \"\\\"), \"\\\" & ub, \"\")",
          "381:     Else",
          "382:         GetParentFolder = path",
          "383:     End If",
          "384: End Function",
          "",
          "---------------"
        ],
        "bindings/vb6/mx86.bas||bindings/vb6/mx86.bas": [
          "File: bindings/vb6/mx86.bas -> bindings/vb6/mx86.bas",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Attribute VB_Name = \"mx86\"",
          "2: Option Explicit",
          "4: 'Capstone Disassembly Engine bindings for VB6",
          "5: 'Contributed by FireEye FLARE Team",
          "6: 'Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "7: 'License: Apache",
          "8: 'Copyright: FireEye 2017",
          "11: Enum x86_reg",
          "12:     X86_REG_INVALID = 0",
          "13:     X86_REG_AH",
          "14:     X86_REG_AL",
          "15:     X86_REG_AX",
          "16:     X86_REG_BH",
          "17:     X86_REG_BL",
          "18:     X86_REG_BP",
          "19:     X86_REG_BPL",
          "20:     X86_REG_BX",
          "21:     X86_REG_CH",
          "22:     X86_REG_CL",
          "23:     X86_REG_CS",
          "24:     X86_REG_CX",
          "25:     X86_REG_DH",
          "26:     X86_REG_DI",
          "27:     X86_REG_DIL",
          "28:     X86_REG_DL",
          "29:     X86_REG_DS",
          "30:     X86_REG_DX",
          "31:     X86_REG_EAX",
          "32:     X86_REG_EBP",
          "33:     X86_REG_EBX",
          "34:     X86_REG_ECX",
          "35:     X86_REG_EDI",
          "36:     X86_REG_EDX",
          "37:     X86_REG_EFLAGS",
          "38:     X86_REG_EIP",
          "39:     X86_REG_EIZ",
          "40:     X86_REG_ES",
          "41:     X86_REG_ESI",
          "42:     X86_REG_ESP",
          "43:     X86_REG_FPSW",
          "44:     X86_REG_FS",
          "45:     X86_REG_GS",
          "46:     X86_REG_IP",
          "47:     X86_REG_RAX",
          "48:     X86_REG_RBP",
          "49:     X86_REG_RBX",
          "50:     X86_REG_RCX",
          "51:     X86_REG_RDI",
          "52:     X86_REG_RDX",
          "53:     X86_REG_RIP",
          "54:     X86_REG_RIZ",
          "55:     X86_REG_RSI",
          "56:     X86_REG_RSP",
          "57:     X86_REG_SI",
          "58:     X86_REG_SIL",
          "59:     X86_REG_SP",
          "60:     X86_REG_SPL",
          "61:     X86_REG_SS",
          "62:     X86_REG_CR0",
          "63:     X86_REG_CR1",
          "64:     X86_REG_CR2",
          "65:     X86_REG_CR3",
          "66:     X86_REG_CR4",
          "67:     X86_REG_CR5",
          "68:     X86_REG_CR6",
          "69:     X86_REG_CR7",
          "70:     X86_REG_CR8",
          "71:     X86_REG_CR9",
          "72:     X86_REG_CR10",
          "73:     X86_REG_CR11",
          "74:     X86_REG_CR12",
          "75:     X86_REG_CR13",
          "76:     X86_REG_CR14",
          "77:     X86_REG_CR15",
          "78:     X86_REG_DR0",
          "79:     X86_REG_DR1",
          "80:     X86_REG_DR2",
          "81:     X86_REG_DR3",
          "82:     X86_REG_DR4",
          "83:     X86_REG_DR5",
          "84:     X86_REG_DR6",
          "85:     X86_REG_DR7",
          "86:     X86_REG_FP0",
          "87:     X86_REG_FP1",
          "88:     X86_REG_FP2",
          "89:     X86_REG_FP3",
          "90:     X86_REG_FP4",
          "91:     X86_REG_FP5",
          "92:     X86_REG_FP6",
          "93:     X86_REG_FP7",
          "94:     X86_REG_K0",
          "95:     X86_REG_K1",
          "96:     X86_REG_K2",
          "97:     X86_REG_K3",
          "98:     X86_REG_K4",
          "99:     X86_REG_K5",
          "100:     X86_REG_K6",
          "101:     X86_REG_K7",
          "102:     X86_REG_MM0",
          "103:     X86_REG_MM1",
          "104:     X86_REG_MM2",
          "105:     X86_REG_MM3",
          "106:     X86_REG_MM4",
          "107:     X86_REG_MM5",
          "108:     X86_REG_MM6",
          "109:     X86_REG_MM7",
          "110:     X86_REG_R8",
          "111:     X86_REG_R9",
          "112:     X86_REG_R10",
          "113:     X86_REG_R11",
          "114:     X86_REG_R12",
          "115:     X86_REG_R13",
          "116:     X86_REG_R14",
          "117:     X86_REG_R15",
          "118:     X86_REG_ST0",
          "119:     X86_REG_ST1",
          "120:     X86_REG_ST2",
          "121:     X86_REG_ST3",
          "122:     X86_REG_ST4",
          "123:     X86_REG_ST5",
          "124:     X86_REG_ST6",
          "125:     X86_REG_ST7",
          "126:     X86_REG_XMM0",
          "127:     X86_REG_XMM1",
          "128:     X86_REG_XMM2",
          "129:     X86_REG_XMM3",
          "130:     X86_REG_XMM4",
          "131:     X86_REG_XMM5",
          "132:     X86_REG_XMM6",
          "133:     X86_REG_XMM7",
          "134:     X86_REG_XMM8",
          "135:     X86_REG_XMM9",
          "136:     X86_REG_XMM10",
          "137:     X86_REG_XMM11",
          "138:     X86_REG_XMM12",
          "139:     X86_REG_XMM13",
          "140:     X86_REG_XMM14",
          "141:     X86_REG_XMM15",
          "142:     X86_REG_XMM16",
          "143:     X86_REG_XMM17",
          "144:     X86_REG_XMM18",
          "145:     X86_REG_XMM19",
          "146:     X86_REG_XMM20",
          "147:     X86_REG_XMM21",
          "148:     X86_REG_XMM22",
          "149:     X86_REG_XMM23",
          "150:     X86_REG_XMM24",
          "151:     X86_REG_XMM25",
          "152:     X86_REG_XMM26",
          "153:     X86_REG_XMM27",
          "154:     X86_REG_XMM28",
          "155:     X86_REG_XMM29",
          "156:     X86_REG_XMM30",
          "157:     X86_REG_XMM31",
          "158:     X86_REG_YMM0",
          "159:     X86_REG_YMM1",
          "160:     X86_REG_YMM2",
          "161:     X86_REG_YMM3",
          "162:     X86_REG_YMM4",
          "163:     X86_REG_YMM5",
          "164:     X86_REG_YMM6",
          "165:     X86_REG_YMM7",
          "166:     X86_REG_YMM8",
          "167:     X86_REG_YMM9",
          "168:     X86_REG_YMM10",
          "169:     X86_REG_YMM11",
          "170:     X86_REG_YMM12",
          "171:     X86_REG_YMM13",
          "172:     X86_REG_YMM14",
          "173:     X86_REG_YMM15",
          "174:     X86_REG_YMM16",
          "175:     X86_REG_YMM17",
          "176:     X86_REG_YMM18",
          "177:     X86_REG_YMM19",
          "178:     X86_REG_YMM20",
          "179:     X86_REG_YMM21",
          "180:     X86_REG_YMM22",
          "181:     X86_REG_YMM23",
          "182:     X86_REG_YMM24",
          "183:     X86_REG_YMM25",
          "184:     X86_REG_YMM26",
          "185:     X86_REG_YMM27",
          "186:     X86_REG_YMM28",
          "187:     X86_REG_YMM29",
          "188:     X86_REG_YMM30",
          "189:     X86_REG_YMM31",
          "190:     X86_REG_ZMM0",
          "191:     X86_REG_ZMM1",
          "192:     X86_REG_ZMM2",
          "193:     X86_REG_ZMM3",
          "194:     X86_REG_ZMM4",
          "195:     X86_REG_ZMM5",
          "196:     X86_REG_ZMM6",
          "197:     X86_REG_ZMM7",
          "198:     X86_REG_ZMM8",
          "199:     X86_REG_ZMM9",
          "200:     X86_REG_ZMM10",
          "201:     X86_REG_ZMM11",
          "202:     X86_REG_ZMM12",
          "203:     X86_REG_ZMM13",
          "204:     X86_REG_ZMM14",
          "205:     X86_REG_ZMM15",
          "206:     X86_REG_ZMM16",
          "207:     X86_REG_ZMM17",
          "208:     X86_REG_ZMM18",
          "209:     X86_REG_ZMM19",
          "210:     X86_REG_ZMM20",
          "211:     X86_REG_ZMM21",
          "212:     X86_REG_ZMM22",
          "213:     X86_REG_ZMM23",
          "214:     X86_REG_ZMM24",
          "215:     X86_REG_ZMM25",
          "216:     X86_REG_ZMM26",
          "217:     X86_REG_ZMM27",
          "218:     X86_REG_ZMM28",
          "219:     X86_REG_ZMM29",
          "220:     X86_REG_ZMM30",
          "221:     X86_REG_ZMM31",
          "222:     X86_REG_R8B",
          "223:     X86_REG_R9B",
          "224:     X86_REG_R10B",
          "225:     X86_REG_R11B",
          "226:     X86_REG_R12B",
          "227:     X86_REG_R13B",
          "228:     X86_REG_R14B",
          "229:     X86_REG_R15B",
          "230:     X86_REG_R8D",
          "231:     X86_REG_R9D",
          "232:     X86_REG_R10D",
          "233:     X86_REG_R11D",
          "234:     X86_REG_R12D",
          "235:     X86_REG_R13D",
          "236:     X86_REG_R14D",
          "237:     X86_REG_R15D",
          "238:     X86_REG_R8W",
          "239:     X86_REG_R9W",
          "240:     X86_REG_R10W",
          "241:     X86_REG_R11W",
          "242:     X86_REG_R12W",
          "243:     X86_REG_R13W",
          "244:     X86_REG_R14W",
          "245:     X86_REG_R15W",
          "246:     X86_REG_ENDING          '  <-- mark    the end of  the list    of  registers",
          "247: End Enum",
          "249: 'Operand type for instruction's operands",
          "250: Enum x86_op_type",
          "251:     X86_OP_INVALID = 0   'CS_OP_INVALID (Uninitialized).",
          "252:     X86_OP_REG           'CS_OP_REG (Register operand).",
          "253:     X86_OP_IMM           'CS_OP_IMM (Immediate operand).",
          "254:     x86_op_mem           'CS_OP_MEM (Memory operand).",
          "255:     X86_OP_FP            'CS_OP_FP  (Floating-Point operand).",
          "256: End Enum",
          "258: 'AVX broadcast type",
          "259: Public Enum x86_avx_bcast",
          "260:     X86_AVX_BCAST_INVALID = 0 ' Uninitialized.",
          "261:     X86_AVX_BCAST_2         ' AVX512 broadcast type {1to2}",
          "262:     X86_AVX_BCAST_4         ' AVX512 broadcast type {1to4}",
          "263:     X86_AVX_BCAST_8         ' AVX512 broadcast type {1to8}",
          "264:     X86_AVX_BCAST_16        ' AVX512 broadcast type {1to16}",
          "265: End Enum",
          "268: 'SSE Code Condition type",
          "269: Public Enum x86_sse_cc",
          "270:     X86_SSE_CC_INVALID = 0 ' Uninitialized.",
          "271:     X86_SSE_CC_EQ",
          "272:     X86_SSE_CC_LT",
          "273:     X86_SSE_CC_LE",
          "274:     X86_SSE_CC_UNORD",
          "275:     X86_SSE_CC_NEQ",
          "276:     X86_SSE_CC_NLT",
          "277:     X86_SSE_CC_NLE",
          "278:     X86_SSE_CC_ORD",
          "279:     X86_SSE_CC_EQ_UQ",
          "280:     X86_SSE_CC_NGE",
          "281:     X86_SSE_CC_NGT",
          "282:     X86_SSE_CC_FALSE",
          "283:     X86_SSE_CC_NEQ_OQ",
          "284:     X86_SSE_CC_GE",
          "285:     X86_SSE_CC_GT",
          "286:     X86_SSE_CC_TRUE",
          "287: End Enum",
          "289: 'AVX Code Condition type",
          "290: Public Enum x86_avx_cc",
          "291:     X86_AVX_CC_INVALID = 0 ' Uninitialized.",
          "292:     X86_AVX_CC_EQ",
          "293:     X86_AVX_CC_LT",
          "294:     X86_AVX_CC_LE",
          "295:     X86_AVX_CC_UNORD",
          "296:     X86_AVX_CC_NEQ",
          "297:     X86_AVX_CC_NLT",
          "298:     X86_AVX_CC_NLE",
          "299:     X86_AVX_CC_ORD",
          "300:     X86_AVX_CC_EQ_UQ",
          "301:     X86_AVX_CC_NGE",
          "302:     X86_AVX_CC_NGT",
          "303:     X86_AVX_CC_FALSE",
          "304:     X86_AVX_CC_NEQ_OQ",
          "305:     X86_AVX_CC_GE",
          "306:     X86_AVX_CC_GT",
          "307:     X86_AVX_CC_TRUE",
          "308:     X86_AVX_CC_EQ_OS",
          "309:     X86_AVX_CC_LT_OQ",
          "310:     X86_AVX_CC_LE_OQ",
          "311:     X86_AVX_CC_UNORD_S",
          "312:     X86_AVX_CC_NEQ_US",
          "313:     X86_AVX_CC_NLT_UQ",
          "314:     X86_AVX_CC_NLE_UQ",
          "315:     X86_AVX_CC_ORD_S",
          "316:     X86_AVX_CC_EQ_US",
          "317:     X86_AVX_CC_NGE_UQ",
          "318:     X86_AVX_CC_NGT_UQ",
          "319:     X86_AVX_CC_FALSE_OS",
          "320:     X86_AVX_CC_NEQ_OS",
          "321:     X86_AVX_CC_GE_OQ",
          "322:     X86_AVX_CC_GT_OQ",
          "323:     X86_AVX_CC_TRUE_US",
          "324: End Enum",
          "326: 'AVX static rounding mode type",
          "327: Public Enum x86_avx_rm",
          "328:     X86_AVX_RM_INVALID = 0 ' Uninitialized.",
          "329:     X86_AVX_RM_RN        ' Round to nearest",
          "330:     X86_AVX_RM_RD        ' Round down",
          "331:     X86_AVX_RM_RU        ' Round up",
          "332:     X86_AVX_RM_RZ        ' Round toward zero",
          "333: End Enum",
          "335: 'Instruction prefixes - to be used in cs_x86.prefix[]",
          "336: Public Enum x86_prefix",
          "337:     X86_PREFIX_LOCK = &HF0     ' lock (cs_x86.prefix[0]",
          "338:     X86_PREFIX_REP = &HF3      ' rep (cs_x86.prefix[0]",
          "339:     X86_PREFIX_REPNE = &HF2    ' repne (cs_x86.prefix[0]",
          "340:     X86_PREFIX_CS = &H2E       ' segment override CS (cs_x86.prefix[1]",
          "341:     X86_PREFIX_SS = &H36       ' segment override SS (cs_x86.prefix[1]",
          "342:     X86_PREFIX_DS = &H3E       ' segment override DS (cs_x86.prefix[1]",
          "343:     X86_PREFIX_ES = &H26       ' segment override ES (cs_x86.prefix[1]",
          "344:     X86_PREFIX_FS = &H64       ' segment override FS (cs_x86.prefix[1]",
          "345:     X86_PREFIX_GS = &H65       ' segment override GS (cs_x86.prefix[1]",
          "346:     X86_PREFIX_OPSIZE = &H66   ' operand-size override (cs_x86.prefix[2]",
          "347:     X86_PREFIX_ADDRSIZE = &H67 ' address-size override (cs_x86.prefix[3]",
          "348: End Enum",
          "350: 'Instruction's operand referring to memory",
          "351: 'This is associated with X86_OP_MEM operand type above",
          "352: Public Type x86_op_mem",
          "353:     segment As Long  ' segment register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "354:     base As Long     ' base register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "355:     index As Long    ' index register (or X86_REG_INVALID if irrelevant) UNSIGNED",
          "356:     scale As Long    ' scale for index register",
          "357:     disp As Currency ' displacement value",
          "358: End Type",
          "360: 'Instruction operand 48 bytes",
          "361: 'typedef struct cs_x86_op {",
          "362: '        x86_op_type type;   // operand type",
          "363: '        union {",
          "364: '            x86_reg reg;    // register value for REG operand",
          "365: '            int64_t imm;        // immediate value for IMM operand",
          "366: '            double fp;      // floating point value for FP operand",
          "367: '            x86_op_mem mem;     // base/index/scale/disp value for MEM operand",
          "368: '        };",
          "369: '",
          "370: '        // size of this operand (in bytes).",
          "371: '        uint8_t size;",
          "372: '",
          "373: '        // AVX broadcast type, or 0 if irrelevant",
          "374: '        x86_avx_bcast avx_bcast;",
          "375: '",
          "376: '        // AVX zero opmask {z}",
          "377: '        bool avx_zero_opmask;",
          "378: '} cs_x86_op;",
          "380: 'Instruction structure",
          "381: Public Type cs_x86",
          "382:     ' Instruction prefix, which can be up to 4 bytes.",
          "383:     ' A prefix byte gets value 0 when irrelevant.",
          "384:     ' prefix[0] indicates REP/REPNE/LOCK prefix (See X86_PREFIX_REP/REPNE/LOCK above)",
          "385:     ' prefix[1] indicates segment override (irrelevant for x86_64):",
          "386:     ' See X86_PREFIX_CS/SS/DS/ES/FS/GS above.",
          "387:     ' prefix[2] indicates operand-size override (X86_PREFIX_OPSIZE)",
          "388:     ' prefix[3] indicates address-size override (X86_PREFIX_ADDRSIZE)",
          "389:     prefix(0 To 3) As Byte        ' UNSIGNED",
          "391:     ' Instruction opcode, wich can be from 1 to 4 bytes in size.",
          "392:     ' This contains VEX opcode as well.",
          "393:     ' An trailing opcode byte gets value 0 when irrelevant.",
          "394:     opcode(0 To 3) As Byte        ' UNSIGNED",
          "396:     rex As Byte                   ' REX prefix: only a non-zero value is relavant for x86_64  UNSIGNED",
          "397:     addr_size As Byte             ' Address size, which can be overrided with above prefix[5].  UNSIGNED",
          "398:     modrm As Byte                 ' ModR/M byte  UNSIGNED",
          "399:     sib As Byte                   ' SIB value, or 0 when irrelevant.  UNSIGNED",
          "400:     disp As Long                  ' Displacement value, or 0 when irrelevant.",
          "401:     sib_index As x86_reg          ' SIB index register, or X86_REG_INVALID when irrelevant.",
          "402:     sib_scale As Byte             ' SIB scale. only applicable if sib_index is relavant.",
          "403:     sib_base As x86_reg           ' SIB base register, or X86_REG_INVALID when irrelevant.",
          "404:     sse_cc As x86_sse_cc          ' SSE Code Condition",
          "405:     avx_cc As x86_avx_cc          ' AVX Code Condition",
          "406:     avx_sae As Byte               ' AVX Suppress all Exception",
          "407:     avx_rm As x86_avx_rm          ' AVX static rounding mode",
          "408:     op_count As Byte              ' Number of operands of this instruction, or 0 when instruction has no operand.UNSIGNED",
          "410:     'operands(0 To 7) As cs_x86_op ' operands for this instruction.",
          "411:     'opBuf(0 To 383) As Byte",
          "413: End Type",
          "415: 'X86 instructions",
          "416: Public Enum x86_insn",
          "417:     X86_INS_INVALID = 0",
          "418:     X86_INS_AAA",
          "419:     X86_INS_AAD",
          "420:     X86_INS_AAM",
          "421:     X86_INS_AAS",
          "422:     X86_INS_FABS",
          "423:     X86_INS_ADC",
          "424:     X86_INS_ADCX",
          "425:     X86_INS_ADD",
          "426:     X86_INS_ADDPD",
          "427:     X86_INS_ADDPS",
          "428:     X86_INS_ADDSD",
          "429:     X86_INS_ADDSS",
          "430:     X86_INS_ADDSUBPD",
          "431:     X86_INS_ADDSUBPS",
          "432:     X86_INS_FADD",
          "433:     X86_INS_FIADD",
          "434:     X86_INS_FADDP",
          "435:     X86_INS_ADOX",
          "436:     X86_INS_AESDECLAST",
          "437:     X86_INS_AESDEC",
          "438:     X86_INS_AESENCLAST",
          "439:     X86_INS_AESENC",
          "440:     X86_INS_AESIMC",
          "441:     X86_INS_AESKEYGENASSIST",
          "442:     X86_INS_AND",
          "443:     X86_INS_ANDN",
          "444:     X86_INS_ANDNPD",
          "445:     X86_INS_ANDNPS",
          "446:     X86_INS_ANDPD",
          "447:     X86_INS_ANDPS",
          "448:     X86_INS_ARPL",
          "449:     X86_INS_BEXTR",
          "450:     X86_INS_BLCFILL",
          "451:     X86_INS_BLCI",
          "452:     X86_INS_BLCIC",
          "453:     X86_INS_BLCMSK",
          "454:     X86_INS_BLCS",
          "455:     X86_INS_BLENDPD",
          "456:     X86_INS_BLENDPS",
          "457:     X86_INS_BLENDVPD",
          "458:     X86_INS_BLENDVPS",
          "459:     X86_INS_BLSFILL",
          "460:     X86_INS_BLSI",
          "461:     X86_INS_BLSIC",
          "462:     X86_INS_BLSMSK",
          "463:     X86_INS_BLSR",
          "464:     X86_INS_BOUND",
          "465:     X86_INS_BSF",
          "466:     X86_INS_BSR",
          "467:     X86_INS_BSWAP",
          "468:     X86_INS_BT",
          "469:     X86_INS_BTC",
          "470:     X86_INS_BTR",
          "471:     X86_INS_BTS",
          "472:     X86_INS_BZHI",
          "473:     X86_INS_CALL",
          "474:     X86_INS_CBW",
          "475:     X86_INS_CDQ",
          "476:     X86_INS_CDQE",
          "477:     X86_INS_FCHS",
          "478:     X86_INS_CLAC",
          "479:     X86_INS_CLC",
          "480:     X86_INS_CLD",
          "481:     X86_INS_CLFLUSH",
          "482:     X86_INS_CLGI",
          "483:     X86_INS_CLI",
          "484:     X86_INS_CLTS",
          "485:     X86_INS_CMC",
          "486:     X86_INS_CMOVA",
          "487:     X86_INS_CMOVAE",
          "488:     X86_INS_CMOVB",
          "489:     X86_INS_CMOVBE",
          "490:     X86_INS_FCMOVBE",
          "491:     X86_INS_FCMOVB",
          "492:     X86_INS_CMOVE",
          "493:     X86_INS_FCMOVE",
          "494:     X86_INS_CMOVG",
          "495:     X86_INS_CMOVGE",
          "496:     X86_INS_CMOVL",
          "497:     X86_INS_CMOVLE",
          "498:     X86_INS_FCMOVNBE",
          "499:     X86_INS_FCMOVNB",
          "500:     X86_INS_CMOVNE",
          "501:     X86_INS_FCMOVNE",
          "502:     X86_INS_CMOVNO",
          "503:     X86_INS_CMOVNP",
          "504:     X86_INS_FCMOVNU",
          "505:     X86_INS_CMOVNS",
          "506:     X86_INS_CMOVO",
          "507:     X86_INS_CMOVP",
          "508:     X86_INS_FCMOVU",
          "509:     X86_INS_CMOVS",
          "510:     X86_INS_CMP",
          "511:     X86_INS_CMPPD",
          "512:     X86_INS_CMPPS",
          "513:     X86_INS_CMPSB",
          "514:     X86_INS_CMPSD",
          "515:     X86_INS_CMPSQ",
          "516:     X86_INS_CMPSS",
          "517:     X86_INS_CMPSW",
          "518:     X86_INS_CMPXCHG16B",
          "519:     X86_INS_CMPXCHG",
          "520:     X86_INS_CMPXCHG8B",
          "521:     X86_INS_COMISD",
          "522:     X86_INS_COMISS",
          "523:     X86_INS_FCOMP",
          "524:     X86_INS_FCOMPI",
          "525:     X86_INS_FCOMI",
          "526:     X86_INS_FCOM",
          "527:     X86_INS_FCOS",
          "528:     X86_INS_CPUID",
          "529:     X86_INS_CQO",
          "530:     X86_INS_CRC32",
          "531:     X86_INS_CVTDQ2PD",
          "532:     X86_INS_CVTDQ2PS",
          "533:     X86_INS_CVTPD2DQ",
          "534:     X86_INS_CVTPD2PS",
          "535:     X86_INS_CVTPS2DQ",
          "536:     X86_INS_CVTPS2PD",
          "537:     X86_INS_CVTSD2SI",
          "538:     X86_INS_CVTSD2SS",
          "539:     X86_INS_CVTSI2SD",
          "540:     X86_INS_CVTSI2SS",
          "541:     X86_INS_CVTSS2SD",
          "542:     X86_INS_CVTSS2SI",
          "543:     X86_INS_CVTTPD2DQ",
          "544:     X86_INS_CVTTPS2DQ",
          "545:     X86_INS_CVTTSD2SI",
          "546:     X86_INS_CVTTSS2SI",
          "547:     X86_INS_CWD",
          "548:     X86_INS_CWDE",
          "549:     X86_INS_DAA",
          "550:     X86_INS_DAS",
          "551:     X86_INS_DATA16",
          "552:     X86_INS_DEC",
          "553:     X86_INS_DIV",
          "554:     X86_INS_DIVPD",
          "555:     X86_INS_DIVPS",
          "556:     X86_INS_FDIVR",
          "557:     X86_INS_FIDIVR",
          "558:     X86_INS_FDIVRP",
          "559:     X86_INS_DIVSD",
          "560:     X86_INS_DIVSS",
          "561:     X86_INS_FDIV",
          "562:     X86_INS_FIDIV",
          "563:     X86_INS_FDIVP",
          "564:     X86_INS_DPPD",
          "565:     X86_INS_DPPS",
          "566:     X86_INS_RET",
          "567:     X86_INS_ENCLS",
          "568:     X86_INS_ENCLU",
          "569:     X86_INS_ENTER",
          "570:     X86_INS_EXTRACTPS",
          "571:     X86_INS_EXTRQ",
          "572:     X86_INS_F2XM1",
          "573:     X86_INS_LCALL",
          "574:     X86_INS_LJMP",
          "575:     X86_INS_FBLD",
          "576:     X86_INS_FBSTP",
          "577:     X86_INS_FCOMPP",
          "578:     X86_INS_FDECSTP",
          "579:     X86_INS_FEMMS",
          "580:     X86_INS_FFREE",
          "581:     X86_INS_FICOM",
          "582:     X86_INS_FICOMP",
          "583:     X86_INS_FINCSTP",
          "584:     X86_INS_FLDCW",
          "585:     X86_INS_FLDENV",
          "586:     X86_INS_FLDL2E",
          "587:     X86_INS_FLDL2T",
          "588:     X86_INS_FLDLG2",
          "589:     X86_INS_FLDLN2",
          "590:     X86_INS_FLDPI",
          "591:     X86_INS_FNCLEX",
          "592:     X86_INS_FNINIT",
          "593:     X86_INS_FNOP",
          "594:     X86_INS_FNSTCW",
          "595:     X86_INS_FNSTSW",
          "596:     X86_INS_FPATAN",
          "597:     X86_INS_FPREM",
          "598:     X86_INS_FPREM1",
          "599:     X86_INS_FPTAN",
          "600:     X86_INS_FRNDINT",
          "601:     X86_INS_FRSTOR",
          "602:     X86_INS_FNSAVE",
          "603:     X86_INS_FSCALE",
          "604:     X86_INS_FSETPM",
          "605:     X86_INS_FSINCOS",
          "606:     X86_INS_FNSTENV",
          "607:     X86_INS_FXAM",
          "608:     X86_INS_FXRSTOR",
          "609:     X86_INS_FXRSTOR64",
          "610:     X86_INS_FXSAVE",
          "611:     X86_INS_FXSAVE64",
          "612:     X86_INS_FXTRACT",
          "613:     X86_INS_FYL2X",
          "614:     X86_INS_FYL2XP1",
          "615:     X86_INS_MOVAPD",
          "616:     X86_INS_MOVAPS",
          "617:     X86_INS_ORPD",
          "618:     X86_INS_ORPS",
          "619:     X86_INS_VMOVAPD",
          "620:     X86_INS_VMOVAPS",
          "621:     X86_INS_XORPD",
          "622:     X86_INS_XORPS",
          "623:     X86_INS_GETSEC",
          "624:     X86_INS_HADDPD",
          "625:     X86_INS_HADDPS",
          "626:     X86_INS_HLT",
          "627:     X86_INS_HSUBPD",
          "628:     X86_INS_HSUBPS",
          "629:     X86_INS_IDIV",
          "630:     X86_INS_FILD",
          "631:     X86_INS_IMUL",
          "632:     X86_INS_IN",
          "633:     X86_INS_INC",
          "634:     X86_INS_INSB",
          "635:     X86_INS_INSERTPS",
          "636:     X86_INS_INSERTQ",
          "637:     X86_INS_INSD",
          "638:     X86_INS_INSW",
          "639:     X86_INS_INT",
          "640:     X86_INS_INT1",
          "641:     X86_INS_INT3",
          "642:     X86_INS_INTO",
          "643:     X86_INS_INVD",
          "644:     X86_INS_INVEPT",
          "645:     X86_INS_INVLPG",
          "646:     X86_INS_INVLPGA",
          "647:     X86_INS_INVPCID",
          "648:     X86_INS_INVVPID",
          "649:     X86_INS_IRET",
          "650:     X86_INS_IRETD",
          "651:     X86_INS_IRETQ",
          "652:     X86_INS_FISTTP",
          "653:     X86_INS_FIST",
          "654:     X86_INS_FISTP",
          "655:     X86_INS_UCOMISD",
          "656:     X86_INS_UCOMISS",
          "657:     X86_INS_VCMP",
          "658:     X86_INS_VCOMISD",
          "659:     X86_INS_VCOMISS",
          "660:     X86_INS_VCVTSD2SS",
          "661:     X86_INS_VCVTSI2SD",
          "662:     X86_INS_VCVTSI2SS",
          "663:     X86_INS_VCVTSS2SD",
          "664:     X86_INS_VCVTTSD2SI",
          "665:     X86_INS_VCVTTSD2USI",
          "666:     X86_INS_VCVTTSS2SI",
          "667:     X86_INS_VCVTTSS2USI",
          "668:     X86_INS_VCVTUSI2SD",
          "669:     X86_INS_VCVTUSI2SS",
          "670:     X86_INS_VUCOMISD",
          "671:     X86_INS_VUCOMISS",
          "672:     X86_INS_JAE",
          "673:     X86_INS_JA",
          "674:     X86_INS_JBE",
          "675:     X86_INS_JB",
          "676:     X86_INS_JCXZ",
          "677:     X86_INS_JECXZ",
          "678:     X86_INS_JE",
          "679:     X86_INS_JGE",
          "680:     X86_INS_JG",
          "681:     X86_INS_JLE",
          "682:     X86_INS_JL",
          "683:     X86_INS_JMP",
          "684:     X86_INS_JNE",
          "685:     X86_INS_JNO",
          "686:     X86_INS_JNP",
          "687:     X86_INS_JNS",
          "688:     X86_INS_JO",
          "689:     X86_INS_JP",
          "690:     X86_INS_JRCXZ",
          "691:     X86_INS_JS",
          "692:     X86_INS_KANDB",
          "693:     X86_INS_KANDD",
          "694:     X86_INS_KANDNB",
          "695:     X86_INS_KANDND",
          "696:     X86_INS_KANDNQ",
          "697:     X86_INS_KANDNW",
          "698:     X86_INS_KANDQ",
          "699:     X86_INS_KANDW",
          "700:     X86_INS_KMOVB",
          "701:     X86_INS_KMOVD",
          "702:     X86_INS_KMOVQ",
          "703:     X86_INS_KMOVW",
          "704:     X86_INS_KNOTB",
          "705:     X86_INS_KNOTD",
          "706:     X86_INS_KNOTQ",
          "707:     X86_INS_KNOTW",
          "708:     X86_INS_KORB",
          "709:     X86_INS_KORD",
          "710:     X86_INS_KORQ",
          "711:     X86_INS_KORTESTW",
          "712:     X86_INS_KORW",
          "713:     X86_INS_KSHIFTLW",
          "714:     X86_INS_KSHIFTRW",
          "715:     X86_INS_KUNPCKBW",
          "716:     X86_INS_KXNORB",
          "717:     X86_INS_KXNORD",
          "718:     X86_INS_KXNORQ",
          "719:     X86_INS_KXNORW",
          "720:     X86_INS_KXORB",
          "721:     X86_INS_KXORD",
          "722:     X86_INS_KXORQ",
          "723:     X86_INS_KXORW",
          "724:     X86_INS_LAHF",
          "725:     X86_INS_LAR",
          "726:     X86_INS_LDDQU",
          "727:     X86_INS_LDMXCSR",
          "728:     X86_INS_LDS",
          "729:     X86_INS_FLDZ",
          "730:     X86_INS_FLD1",
          "731:     X86_INS_FLD",
          "732:     X86_INS_LEA",
          "733:     X86_INS_LEAVE",
          "734:     X86_INS_LES",
          "735:     X86_INS_LFENCE",
          "736:     X86_INS_LFS",
          "737:     X86_INS_LGDT",
          "738:     X86_INS_LGS",
          "739:     X86_INS_LIDT",
          "740:     X86_INS_LLDT",
          "741:     X86_INS_LMSW",
          "742:     X86_INS_OR",
          "743:     X86_INS_SUB",
          "744:     X86_INS_XOR",
          "745:     X86_INS_LODSB",
          "746:     X86_INS_LODSD",
          "747:     X86_INS_LODSQ",
          "748:     X86_INS_LODSW",
          "749:     X86_INS_LOOP",
          "750:     X86_INS_LOOPE",
          "751:     X86_INS_LOOPNE",
          "752:     X86_INS_RETF",
          "753:     X86_INS_RETFQ",
          "754:     X86_INS_LSL",
          "755:     X86_INS_LSS",
          "756:     X86_INS_LTR",
          "757:     X86_INS_XADD",
          "758:     X86_INS_LZCNT",
          "759:     X86_INS_MASKMOVDQU",
          "760:     X86_INS_MAXPD",
          "761:     X86_INS_MAXPS",
          "762:     X86_INS_MAXSD",
          "763:     X86_INS_MAXSS",
          "764:     X86_INS_MFENCE",
          "765:     X86_INS_MINPD",
          "766:     X86_INS_MINPS",
          "767:     X86_INS_MINSD",
          "768:     X86_INS_MINSS",
          "769:     X86_INS_CVTPD2PI",
          "770:     X86_INS_CVTPI2PD",
          "771:     X86_INS_CVTPI2PS",
          "772:     X86_INS_CVTPS2PI",
          "773:     X86_INS_CVTTPD2PI",
          "774:     X86_INS_CVTTPS2PI",
          "775:     X86_INS_EMMS",
          "776:     X86_INS_MASKMOVQ",
          "777:     X86_INS_MOVD",
          "778:     X86_INS_MOVDQ2Q",
          "779:     X86_INS_MOVNTQ",
          "780:     X86_INS_MOVQ2DQ",
          "781:     X86_INS_MOVQ",
          "782:     X86_INS_PABSB",
          "783:     X86_INS_PABSD",
          "784:     X86_INS_PABSW",
          "785:     X86_INS_PACKSSDW",
          "786:     X86_INS_PACKSSWB",
          "787:     X86_INS_PACKUSWB",
          "788:     X86_INS_PADDB",
          "789:     X86_INS_PADDD",
          "790:     X86_INS_PADDQ",
          "791:     X86_INS_PADDSB",
          "792:     X86_INS_PADDSW",
          "793:     X86_INS_PADDUSB",
          "794:     X86_INS_PADDUSW",
          "795:     X86_INS_PADDW",
          "796:     X86_INS_PALIGNR",
          "797:     X86_INS_PANDN",
          "798:     X86_INS_PAND",
          "799:     X86_INS_PAVGB",
          "800:     X86_INS_PAVGW",
          "801:     X86_INS_PCMPEQB",
          "802:     X86_INS_PCMPEQD",
          "803:     X86_INS_PCMPEQW",
          "804:     X86_INS_PCMPGTB",
          "805:     X86_INS_PCMPGTD",
          "806:     X86_INS_PCMPGTW",
          "807:     X86_INS_PEXTRW",
          "808:     X86_INS_PHADDSW",
          "809:     X86_INS_PHADDW",
          "810:     X86_INS_PHADDD",
          "811:     X86_INS_PHSUBD",
          "812:     X86_INS_PHSUBSW",
          "813:     X86_INS_PHSUBW",
          "814:     X86_INS_PINSRW",
          "815:     X86_INS_PMADDUBSW",
          "816:     X86_INS_PMADDWD",
          "817:     X86_INS_PMAXSW",
          "818:     X86_INS_PMAXUB",
          "819:     X86_INS_PMINSW",
          "820:     X86_INS_PMINUB",
          "821:     X86_INS_PMOVMSKB",
          "822:     X86_INS_PMULHRSW",
          "823:     X86_INS_PMULHUW",
          "824:     X86_INS_PMULHW",
          "825:     X86_INS_PMULLW",
          "826:     X86_INS_PMULUDQ",
          "827:     X86_INS_POR",
          "828:     X86_INS_PSADBW",
          "829:     X86_INS_PSHUFB",
          "830:     X86_INS_PSHUFW",
          "831:     X86_INS_PSIGNB",
          "832:     X86_INS_PSIGND",
          "833:     X86_INS_PSIGNW",
          "834:     X86_INS_PSLLD",
          "835:     X86_INS_PSLLQ",
          "836:     X86_INS_PSLLW",
          "837:     X86_INS_PSRAD",
          "838:     X86_INS_PSRAW",
          "839:     X86_INS_PSRLD",
          "840:     X86_INS_PSRLQ",
          "841:     X86_INS_PSRLW",
          "842:     X86_INS_PSUBB",
          "843:     X86_INS_PSUBD",
          "844:     X86_INS_PSUBQ",
          "845:     X86_INS_PSUBSB",
          "846:     X86_INS_PSUBSW",
          "847:     X86_INS_PSUBUSB",
          "848:     X86_INS_PSUBUSW",
          "849:     X86_INS_PSUBW",
          "850:     X86_INS_PUNPCKHBW",
          "851:     X86_INS_PUNPCKHDQ",
          "852:     X86_INS_PUNPCKHWD",
          "853:     X86_INS_PUNPCKLBW",
          "854:     X86_INS_PUNPCKLDQ",
          "855:     X86_INS_PUNPCKLWD",
          "856:     X86_INS_PXOR",
          "857:     X86_INS_MONITOR",
          "858:     X86_INS_MONTMUL",
          "859:     X86_INS_MOV",
          "860:     X86_INS_MOVABS",
          "861:     X86_INS_MOVBE",
          "862:     X86_INS_MOVDDUP",
          "863:     X86_INS_MOVDQA",
          "864:     X86_INS_MOVDQU",
          "865:     X86_INS_MOVHLPS",
          "866:     X86_INS_MOVHPD",
          "867:     X86_INS_MOVHPS",
          "868:     X86_INS_MOVLHPS",
          "869:     X86_INS_MOVLPD",
          "870:     X86_INS_MOVLPS",
          "871:     X86_INS_MOVMSKPD",
          "872:     X86_INS_MOVMSKPS",
          "873:     X86_INS_MOVNTDQA",
          "874:     X86_INS_MOVNTDQ",
          "875:     X86_INS_MOVNTI",
          "876:     X86_INS_MOVNTPD",
          "877:     X86_INS_MOVNTPS",
          "878:     X86_INS_MOVNTSD",
          "879:     X86_INS_MOVNTSS",
          "880:     X86_INS_MOVSB",
          "881:     X86_INS_MOVSD",
          "882:     X86_INS_MOVSHDUP",
          "883:     X86_INS_MOVSLDUP",
          "884:     X86_INS_MOVSQ",
          "885:     X86_INS_MOVSS",
          "886:     X86_INS_MOVSW",
          "887:     X86_INS_MOVSX",
          "888:     X86_INS_MOVSXD",
          "889:     X86_INS_MOVUPD",
          "890:     X86_INS_MOVUPS",
          "891:     X86_INS_MOVZX",
          "892:     X86_INS_MPSADBW",
          "893:     X86_INS_MUL",
          "894:     X86_INS_MULPD",
          "895:     X86_INS_MULPS",
          "896:     X86_INS_MULSD",
          "897:     X86_INS_MULSS",
          "898:     X86_INS_MULX",
          "899:     X86_INS_FMUL",
          "900:     X86_INS_FIMUL",
          "901:     X86_INS_FMULP",
          "902:     X86_INS_MWAIT",
          "903:     X86_INS_NEG",
          "904:     X86_INS_NOP",
          "905:     X86_INS_NOT",
          "906:     X86_INS_OUT",
          "907:     X86_INS_OUTSB",
          "908:     X86_INS_OUTSD",
          "909:     X86_INS_OUTSW",
          "910:     X86_INS_PACKUSDW",
          "911:     X86_INS_PAUSE",
          "912:     X86_INS_PAVGUSB",
          "913:     X86_INS_PBLENDVB",
          "914:     X86_INS_PBLENDW",
          "915:     X86_INS_PCLMULQDQ",
          "916:     X86_INS_PCMPEQQ",
          "917:     X86_INS_PCMPESTRI",
          "918:     X86_INS_PCMPESTRM",
          "919:     X86_INS_PCMPGTQ",
          "920:     X86_INS_PCMPISTRI",
          "921:     X86_INS_PCMPISTRM",
          "922:     X86_INS_PDEP",
          "923:     X86_INS_PEXT",
          "924:     X86_INS_PEXTRB",
          "925:     X86_INS_PEXTRD",
          "926:     X86_INS_PEXTRQ",
          "927:     X86_INS_PF2ID",
          "928:     X86_INS_PF2IW",
          "929:     X86_INS_PFACC",
          "930:     X86_INS_PFADD",
          "931:     X86_INS_PFCMPEQ",
          "932:     X86_INS_PFCMPGE",
          "933:     X86_INS_PFCMPGT",
          "934:     X86_INS_PFMAX",
          "935:     X86_INS_PFMIN",
          "936:     X86_INS_PFMUL",
          "937:     X86_INS_PFNACC",
          "938:     X86_INS_PFPNACC",
          "939:     X86_INS_PFRCPIT1",
          "940:     X86_INS_PFRCPIT2",
          "941:     X86_INS_PFRCP",
          "942:     X86_INS_PFRSQIT1",
          "943:     X86_INS_PFRSQRT",
          "944:     X86_INS_PFSUBR",
          "945:     X86_INS_PFSUB",
          "946:     X86_INS_PHMINPOSUW",
          "947:     X86_INS_PI2FD",
          "948:     X86_INS_PI2FW",
          "949:     X86_INS_PINSRB",
          "950:     X86_INS_PINSRD",
          "951:     X86_INS_PINSRQ",
          "952:     X86_INS_PMAXSB",
          "953:     X86_INS_PMAXSD",
          "954:     X86_INS_PMAXUD",
          "955:     X86_INS_PMAXUW",
          "956:     X86_INS_PMINSB",
          "957:     X86_INS_PMINSD",
          "958:     X86_INS_PMINUD",
          "959:     X86_INS_PMINUW",
          "960:     X86_INS_PMOVSXBD",
          "961:     X86_INS_PMOVSXBQ",
          "962:     X86_INS_PMOVSXBW",
          "963:     X86_INS_PMOVSXDQ",
          "964:     X86_INS_PMOVSXWD",
          "965:     X86_INS_PMOVSXWQ",
          "966:     X86_INS_PMOVZXBD",
          "967:     X86_INS_PMOVZXBQ",
          "968:     X86_INS_PMOVZXBW",
          "969:     X86_INS_PMOVZXDQ",
          "970:     X86_INS_PMOVZXWD",
          "971:     X86_INS_PMOVZXWQ",
          "972:     X86_INS_PMULDQ",
          "973:     X86_INS_PMULHRW",
          "974:     X86_INS_PMULLD",
          "975:     X86_INS_POP",
          "976:     X86_INS_POPAW",
          "977:     X86_INS_POPAL",
          "978:     X86_INS_POPCNT",
          "979:     X86_INS_POPF",
          "980:     X86_INS_POPFD",
          "981:     X86_INS_POPFQ",
          "982:     X86_INS_PREFETCH",
          "983:     X86_INS_PREFETCHNTA",
          "984:     X86_INS_PREFETCHT0",
          "985:     X86_INS_PREFETCHT1",
          "986:     X86_INS_PREFETCHT2",
          "987:     X86_INS_PREFETCHW",
          "988:     X86_INS_PSHUFD",
          "989:     X86_INS_PSHUFHW",
          "990:     X86_INS_PSHUFLW",
          "991:     X86_INS_PSLLDQ",
          "992:     X86_INS_PSRLDQ",
          "993:     X86_INS_PSWAPD",
          "994:     X86_INS_PTEST",
          "995:     X86_INS_PUNPCKHQDQ",
          "996:     X86_INS_PUNPCKLQDQ",
          "997:     X86_INS_PUSH",
          "998:     X86_INS_PUSHAW",
          "999:     X86_INS_PUSHAL",
          "1000:     X86_INS_PUSHF",
          "1001:     X86_INS_PUSHFD",
          "1002:     X86_INS_PUSHFQ",
          "1003:     X86_INS_RCL",
          "1004:     X86_INS_RCPPS",
          "1005:     X86_INS_RCPSS",
          "1006:     X86_INS_RCR",
          "1007:     X86_INS_RDFSBASE",
          "1008:     X86_INS_RDGSBASE",
          "1009:     X86_INS_RDMSR",
          "1010:     X86_INS_RDPMC",
          "1011:     X86_INS_RDRAND",
          "1012:     X86_INS_RDSEED",
          "1013:     X86_INS_RDTSC",
          "1014:     X86_INS_RDTSCP",
          "1015:     X86_INS_ROL",
          "1016:     X86_INS_ROR",
          "1017:     X86_INS_RORX",
          "1018:     X86_INS_ROUNDPD",
          "1019:     X86_INS_ROUNDPS",
          "1020:     X86_INS_ROUNDSD",
          "1021:     X86_INS_ROUNDSS",
          "1022:     X86_INS_RSM",
          "1023:     X86_INS_RSQRTPS",
          "1024:     X86_INS_RSQRTSS",
          "1025:     X86_INS_SAHF",
          "1026:     X86_INS_SAL",
          "1027:     X86_INS_SALC",
          "1028:     X86_INS_SAR",
          "1029:     X86_INS_SARX",
          "1030:     X86_INS_SBB",
          "1031:     X86_INS_SCASB",
          "1032:     X86_INS_SCASD",
          "1033:     X86_INS_SCASQ",
          "1034:     X86_INS_SCASW",
          "1035:     X86_INS_SETAE",
          "1036:     X86_INS_SETA",
          "1037:     X86_INS_SETBE",
          "1038:     X86_INS_SETB",
          "1039:     X86_INS_SETE",
          "1040:     X86_INS_SETGE",
          "1041:     X86_INS_SETG",
          "1042:     X86_INS_SETLE",
          "1043:     X86_INS_SETL",
          "1044:     X86_INS_SETNE",
          "1045:     X86_INS_SETNO",
          "1046:     X86_INS_SETNP",
          "1047:     X86_INS_SETNS",
          "1048:     X86_INS_SETO",
          "1049:     X86_INS_SETP",
          "1050:     X86_INS_SETS",
          "1051:     X86_INS_SFENCE",
          "1052:     X86_INS_SGDT",
          "1053:     X86_INS_SHA1MSG1",
          "1054:     X86_INS_SHA1MSG2",
          "1055:     X86_INS_SHA1NEXTE",
          "1056:     X86_INS_SHA1RNDS4",
          "1057:     X86_INS_SHA256MSG1",
          "1058:     X86_INS_SHA256MSG2",
          "1059:     X86_INS_SHA256RNDS2",
          "1060:     X86_INS_SHL",
          "1061:     X86_INS_SHLD",
          "1062:     X86_INS_SHLX",
          "1063:     X86_INS_SHR",
          "1064:     X86_INS_SHRD",
          "1065:     X86_INS_SHRX",
          "1066:     X86_INS_SHUFPD",
          "1067:     X86_INS_SHUFPS",
          "1068:     X86_INS_SIDT",
          "1069:     X86_INS_FSIN",
          "1070:     X86_INS_SKINIT",
          "1071:     X86_INS_SLDT",
          "1072:     X86_INS_SMSW",
          "1073:     X86_INS_SQRTPD",
          "1074:     X86_INS_SQRTPS",
          "1075:     X86_INS_SQRTSD",
          "1076:     X86_INS_SQRTSS",
          "1077:     X86_INS_FSQRT",
          "1078:     X86_INS_STAC",
          "1079:     X86_INS_STC",
          "1080:     X86_INS_STD",
          "1081:     X86_INS_STGI",
          "1082:     X86_INS_STI",
          "1083:     X86_INS_STMXCSR",
          "1084:     X86_INS_STOSB",
          "1085:     X86_INS_STOSD",
          "1086:     X86_INS_STOSQ",
          "1087:     X86_INS_STOSW",
          "1088:     X86_INS_STR",
          "1089:     X86_INS_FST",
          "1090:     X86_INS_FSTP",
          "1091:     X86_INS_FSTPNCE",
          "1092:     X86_INS_SUBPD",
          "1093:     X86_INS_SUBPS",
          "1094:     X86_INS_FSUBR",
          "1095:     X86_INS_FISUBR",
          "1096:     X86_INS_FSUBRP",
          "1097:     X86_INS_SUBSD",
          "1098:     X86_INS_SUBSS",
          "1099:     X86_INS_FSUB",
          "1100:     X86_INS_FISUB",
          "1101:     X86_INS_FSUBP",
          "1102:     X86_INS_SWAPGS",
          "1103:     X86_INS_SYSCALL",
          "1104:     X86_INS_SYSENTER",
          "1105:     X86_INS_SYSEXIT",
          "1106:     X86_INS_SYSRET",
          "1107:     X86_INS_T1MSKC",
          "1108:     X86_INS_TEST",
          "1109:     X86_INS_UD2",
          "1110:     X86_INS_FTST",
          "1111:     X86_INS_TZCNT",
          "1112:     X86_INS_TZMSK",
          "1113:     X86_INS_FUCOMPI",
          "1114:     X86_INS_FUCOMI",
          "1115:     X86_INS_FUCOMPP",
          "1116:     X86_INS_FUCOMP",
          "1117:     X86_INS_FUCOM",
          "1118:     X86_INS_UD2B",
          "1119:     X86_INS_UNPCKHPD",
          "1120:     X86_INS_UNPCKHPS",
          "1121:     X86_INS_UNPCKLPD",
          "1122:     X86_INS_UNPCKLPS",
          "1123:     X86_INS_VADDPD",
          "1124:     X86_INS_VADDPS",
          "1125:     X86_INS_VADDSD",
          "1126:     X86_INS_VADDSS",
          "1127:     X86_INS_VADDSUBPD",
          "1128:     X86_INS_VADDSUBPS",
          "1129:     X86_INS_VAESDECLAST",
          "1130:     X86_INS_VAESDEC",
          "1131:     X86_INS_VAESENCLAST",
          "1132:     X86_INS_VAESENC",
          "1133:     X86_INS_VAESIMC",
          "1134:     X86_INS_VAESKEYGENASSIST",
          "1135:     X86_INS_VALIGND",
          "1136:     X86_INS_VALIGNQ",
          "1137:     X86_INS_VANDNPD",
          "1138:     X86_INS_VANDNPS",
          "1139:     X86_INS_VANDPD",
          "1140:     X86_INS_VANDPS",
          "1141:     X86_INS_VBLENDMPD",
          "1142:     X86_INS_VBLENDMPS",
          "1143:     X86_INS_VBLENDPD",
          "1144:     X86_INS_VBLENDPS",
          "1145:     X86_INS_VBLENDVPD",
          "1146:     X86_INS_VBLENDVPS",
          "1147:     X86_INS_VBROADCASTF128",
          "1148:     X86_INS_VBROADCASTI128",
          "1149:     X86_INS_VBROADCASTI32X4",
          "1150:     X86_INS_VBROADCASTI64X4",
          "1151:     X86_INS_VBROADCASTSD",
          "1152:     X86_INS_VBROADCASTSS",
          "1153:     X86_INS_VCMPPD",
          "1154:     X86_INS_VCMPPS",
          "1155:     X86_INS_VCMPSD",
          "1156:     X86_INS_VCMPSS",
          "1157:     X86_INS_VCVTDQ2PD",
          "1158:     X86_INS_VCVTDQ2PS",
          "1159:     X86_INS_VCVTPD2DQX",
          "1160:     X86_INS_VCVTPD2DQ",
          "1161:     X86_INS_VCVTPD2PSX",
          "1162:     X86_INS_VCVTPD2PS",
          "1163:     X86_INS_VCVTPD2UDQ",
          "1164:     X86_INS_VCVTPH2PS",
          "1165:     X86_INS_VCVTPS2DQ",
          "1166:     X86_INS_VCVTPS2PD",
          "1167:     X86_INS_VCVTPS2PH",
          "1168:     X86_INS_VCVTPS2UDQ",
          "1169:     X86_INS_VCVTSD2SI",
          "1170:     X86_INS_VCVTSD2USI",
          "1171:     X86_INS_VCVTSS2SI",
          "1172:     X86_INS_VCVTSS2USI",
          "1173:     X86_INS_VCVTTPD2DQX",
          "1174:     X86_INS_VCVTTPD2DQ",
          "1175:     X86_INS_VCVTTPD2UDQ",
          "1176:     X86_INS_VCVTTPS2DQ",
          "1177:     X86_INS_VCVTTPS2UDQ",
          "1178:     X86_INS_VCVTUDQ2PD",
          "1179:     X86_INS_VCVTUDQ2PS",
          "1180:     X86_INS_VDIVPD",
          "1181:     X86_INS_VDIVPS",
          "1182:     X86_INS_VDIVSD",
          "1183:     X86_INS_VDIVSS",
          "1184:     X86_INS_VDPPD",
          "1185:     X86_INS_VDPPS",
          "1186:     X86_INS_VERR",
          "1187:     X86_INS_VERW",
          "1188:     X86_INS_VEXTRACTF128",
          "1189:     X86_INS_VEXTRACTF32X4",
          "1190:     X86_INS_VEXTRACTF64X4",
          "1191:     X86_INS_VEXTRACTI128",
          "1192:     X86_INS_VEXTRACTI32X4",
          "1193:     X86_INS_VEXTRACTI64X4",
          "1194:     X86_INS_VEXTRACTPS",
          "1195:     X86_INS_VFMADD132PD",
          "1196:     X86_INS_VFMADD132PS",
          "1197:     X86_INS_VFMADD213PD",
          "1198:     X86_INS_VFMADD213PS",
          "1199:     X86_INS_VFMADDPD",
          "1200:     X86_INS_VFMADD231PD",
          "1201:     X86_INS_VFMADDPS",
          "1202:     X86_INS_VFMADD231PS",
          "1203:     X86_INS_VFMADDSD",
          "1204:     X86_INS_VFMADD213SD",
          "1205:     X86_INS_VFMADD132SD",
          "1206:     X86_INS_VFMADD231SD",
          "1207:     X86_INS_VFMADDSS",
          "1208:     X86_INS_VFMADD213SS",
          "1209:     X86_INS_VFMADD132SS",
          "1210:     X86_INS_VFMADD231SS",
          "1211:     X86_INS_VFMADDSUB132PD",
          "1212:     X86_INS_VFMADDSUB132PS",
          "1213:     X86_INS_VFMADDSUB213PD",
          "1214:     X86_INS_VFMADDSUB213PS",
          "1215:     X86_INS_VFMADDSUBPD",
          "1216:     X86_INS_VFMADDSUB231PD",
          "1217:     X86_INS_VFMADDSUBPS",
          "1218:     X86_INS_VFMADDSUB231PS",
          "1219:     X86_INS_VFMSUB132PD",
          "1220:     X86_INS_VFMSUB132PS",
          "1221:     X86_INS_VFMSUB213PD",
          "1222:     X86_INS_VFMSUB213PS",
          "1223:     X86_INS_VFMSUBADD132PD",
          "1224:     X86_INS_VFMSUBADD132PS",
          "1225:     X86_INS_VFMSUBADD213PD",
          "1226:     X86_INS_VFMSUBADD213PS",
          "1227:     X86_INS_VFMSUBADDPD",
          "1228:     X86_INS_VFMSUBADD231PD",
          "1229:     X86_INS_VFMSUBADDPS",
          "1230:     X86_INS_VFMSUBADD231PS",
          "1231:     X86_INS_VFMSUBPD",
          "1232:     X86_INS_VFMSUB231PD",
          "1233:     X86_INS_VFMSUBPS",
          "1234:     X86_INS_VFMSUB231PS",
          "1235:     X86_INS_VFMSUBSD",
          "1236:     X86_INS_VFMSUB213SD",
          "1237:     X86_INS_VFMSUB132SD",
          "1238:     X86_INS_VFMSUB231SD",
          "1239:     X86_INS_VFMSUBSS",
          "1240:     X86_INS_VFMSUB213SS",
          "1241:     X86_INS_VFMSUB132SS",
          "1242:     X86_INS_VFMSUB231SS",
          "1243:     X86_INS_VFNMADD132PD",
          "1244:     X86_INS_VFNMADD132PS",
          "1245:     X86_INS_VFNMADD213PD",
          "1246:     X86_INS_VFNMADD213PS",
          "1247:     X86_INS_VFNMADDPD",
          "1248:     X86_INS_VFNMADD231PD",
          "1249:     X86_INS_VFNMADDPS",
          "1250:     X86_INS_VFNMADD231PS",
          "1251:     X86_INS_VFNMADDSD",
          "1252:     X86_INS_VFNMADD213SD",
          "1253:     X86_INS_VFNMADD132SD",
          "1254:     X86_INS_VFNMADD231SD",
          "1255:     X86_INS_VFNMADDSS",
          "1256:     X86_INS_VFNMADD213SS",
          "1257:     X86_INS_VFNMADD132SS",
          "1258:     X86_INS_VFNMADD231SS",
          "1259:     X86_INS_VFNMSUB132PD",
          "1260:     X86_INS_VFNMSUB132PS",
          "1261:     X86_INS_VFNMSUB213PD",
          "1262:     X86_INS_VFNMSUB213PS",
          "1263:     X86_INS_VFNMSUBPD",
          "1264:     X86_INS_VFNMSUB231PD",
          "1265:     X86_INS_VFNMSUBPS",
          "1266:     X86_INS_VFNMSUB231PS",
          "1267:     X86_INS_VFNMSUBSD",
          "1268:     X86_INS_VFNMSUB213SD",
          "1269:     X86_INS_VFNMSUB132SD",
          "1270:     X86_INS_VFNMSUB231SD",
          "1271:     X86_INS_VFNMSUBSS",
          "1272:     X86_INS_VFNMSUB213SS",
          "1273:     X86_INS_VFNMSUB132SS",
          "1274:     X86_INS_VFNMSUB231SS",
          "1275:     X86_INS_VFRCZPD",
          "1276:     X86_INS_VFRCZPS",
          "1277:     X86_INS_VFRCZSD",
          "1278:     X86_INS_VFRCZSS",
          "1279:     X86_INS_VORPD",
          "1280:     X86_INS_VORPS",
          "1281:     X86_INS_VXORPD",
          "1282:     X86_INS_VXORPS",
          "1283:     X86_INS_VGATHERDPD",
          "1284:     X86_INS_VGATHERDPS",
          "1285:     X86_INS_VGATHERPF0DPD",
          "1286:     X86_INS_VGATHERPF0DPS",
          "1287:     X86_INS_VGATHERPF0QPD",
          "1288:     X86_INS_VGATHERPF0QPS",
          "1289:     X86_INS_VGATHERPF1DPD",
          "1290:     X86_INS_VGATHERPF1DPS",
          "1291:     X86_INS_VGATHERPF1QPD",
          "1292:     X86_INS_VGATHERPF1QPS",
          "1293:     X86_INS_VGATHERQPD",
          "1294:     X86_INS_VGATHERQPS",
          "1295:     X86_INS_VHADDPD",
          "1296:     X86_INS_VHADDPS",
          "1297:     X86_INS_VHSUBPD",
          "1298:     X86_INS_VHSUBPS",
          "1299:     X86_INS_VINSERTF128",
          "1300:     X86_INS_VINSERTF32X4",
          "1301:     X86_INS_VINSERTF64X4",
          "1302:     X86_INS_VINSERTI128",
          "1303:     X86_INS_VINSERTI32X4",
          "1304:     X86_INS_VINSERTI64X4",
          "1305:     X86_INS_VINSERTPS",
          "1306:     X86_INS_VLDDQU",
          "1307:     X86_INS_VLDMXCSR",
          "1308:     X86_INS_VMASKMOVDQU",
          "1309:     X86_INS_VMASKMOVPD",
          "1310:     X86_INS_VMASKMOVPS",
          "1311:     X86_INS_VMAXPD",
          "1312:     X86_INS_VMAXPS",
          "1313:     X86_INS_VMAXSD",
          "1314:     X86_INS_VMAXSS",
          "1315:     X86_INS_VMCALL",
          "1316:     X86_INS_VMCLEAR",
          "1317:     X86_INS_VMFUNC",
          "1318:     X86_INS_VMINPD",
          "1319:     X86_INS_VMINPS",
          "1320:     X86_INS_VMINSD",
          "1321:     X86_INS_VMINSS",
          "1322:     X86_INS_VMLAUNCH",
          "1323:     X86_INS_VMLOAD",
          "1324:     X86_INS_VMMCALL",
          "1325:     X86_INS_VMOVQ",
          "1326:     X86_INS_VMOVDDUP",
          "1327:     X86_INS_VMOVD",
          "1328:     X86_INS_VMOVDQA32",
          "1329:     X86_INS_VMOVDQA64",
          "1330:     X86_INS_VMOVDQA",
          "1331:     X86_INS_VMOVDQU16",
          "1332:     X86_INS_VMOVDQU32",
          "1333:     X86_INS_VMOVDQU64",
          "1334:     X86_INS_VMOVDQU8",
          "1335:     X86_INS_VMOVDQU",
          "1336:     X86_INS_VMOVHLPS",
          "1337:     X86_INS_VMOVHPD",
          "1338:     X86_INS_VMOVHPS",
          "1339:     X86_INS_VMOVLHPS",
          "1340:     X86_INS_VMOVLPD",
          "1341:     X86_INS_VMOVLPS",
          "1342:     X86_INS_VMOVMSKPD",
          "1343:     X86_INS_VMOVMSKPS",
          "1344:     X86_INS_VMOVNTDQA",
          "1345:     X86_INS_VMOVNTDQ",
          "1346:     X86_INS_VMOVNTPD",
          "1347:     X86_INS_VMOVNTPS",
          "1348:     X86_INS_VMOVSD",
          "1349:     X86_INS_VMOVSHDUP",
          "1350:     X86_INS_VMOVSLDUP",
          "1351:     X86_INS_VMOVSS",
          "1352:     X86_INS_VMOVUPD",
          "1353:     X86_INS_VMOVUPS",
          "1354:     X86_INS_VMPSADBW",
          "1355:     X86_INS_VMPTRLD",
          "1356:     X86_INS_VMPTRST",
          "1357:     X86_INS_VMREAD",
          "1358:     X86_INS_VMRESUME",
          "1359:     X86_INS_VMRUN",
          "1360:     X86_INS_VMSAVE",
          "1361:     X86_INS_VMULPD",
          "1362:     X86_INS_VMULPS",
          "1363:     X86_INS_VMULSD",
          "1364:     X86_INS_VMULSS",
          "1365:     X86_INS_VMWRITE",
          "1366:     X86_INS_VMXOFF",
          "1367:     X86_INS_VMXON",
          "1368:     X86_INS_VPABSB",
          "1369:     X86_INS_VPABSD",
          "1370:     X86_INS_VPABSQ",
          "1371:     X86_INS_VPABSW",
          "1372:     X86_INS_VPACKSSDW",
          "1373:     X86_INS_VPACKSSWB",
          "1374:     X86_INS_VPACKUSDW",
          "1375:     X86_INS_VPACKUSWB",
          "1376:     X86_INS_VPADDB",
          "1377:     X86_INS_VPADDD",
          "1378:     X86_INS_VPADDQ",
          "1379:     X86_INS_VPADDSB",
          "1380:     X86_INS_VPADDSW",
          "1381:     X86_INS_VPADDUSB",
          "1382:     X86_INS_VPADDUSW",
          "1383:     X86_INS_VPADDW",
          "1384:     X86_INS_VPALIGNR",
          "1385:     X86_INS_VPANDD",
          "1386:     X86_INS_VPANDND",
          "1387:     X86_INS_VPANDNQ",
          "1388:     X86_INS_VPANDN",
          "1389:     X86_INS_VPANDQ",
          "1390:     X86_INS_VPAND",
          "1391:     X86_INS_VPAVGB",
          "1392:     X86_INS_VPAVGW",
          "1393:     X86_INS_VPBLENDD",
          "1394:     X86_INS_VPBLENDMD",
          "1395:     X86_INS_VPBLENDMQ",
          "1396:     X86_INS_VPBLENDVB",
          "1397:     X86_INS_VPBLENDW",
          "1398:     X86_INS_VPBROADCASTB",
          "1399:     X86_INS_VPBROADCASTD",
          "1400:     X86_INS_VPBROADCASTMB2Q",
          "1401:     X86_INS_VPBROADCASTMW2D",
          "1402:     X86_INS_VPBROADCASTQ",
          "1403:     X86_INS_VPBROADCASTW",
          "1404:     X86_INS_VPCLMULQDQ",
          "1405:     X86_INS_VPCMOV",
          "1406:     X86_INS_VPCMP",
          "1407:     X86_INS_VPCMPD",
          "1408:     X86_INS_VPCMPEQB",
          "1409:     X86_INS_VPCMPEQD",
          "1410:     X86_INS_VPCMPEQQ",
          "1411:     X86_INS_VPCMPEQW",
          "1412:     X86_INS_VPCMPESTRI",
          "1413:     X86_INS_VPCMPESTRM",
          "1414:     X86_INS_VPCMPGTB",
          "1415:     X86_INS_VPCMPGTD",
          "1416:     X86_INS_VPCMPGTQ",
          "1417:     X86_INS_VPCMPGTW",
          "1418:     X86_INS_VPCMPISTRI",
          "1419:     X86_INS_VPCMPISTRM",
          "1420:     X86_INS_VPCMPQ",
          "1421:     X86_INS_VPCMPUD",
          "1422:     X86_INS_VPCMPUQ",
          "1423:     X86_INS_VPCOMB",
          "1424:     X86_INS_VPCOMD",
          "1425:     X86_INS_VPCOMQ",
          "1426:     X86_INS_VPCOMUB",
          "1427:     X86_INS_VPCOMUD",
          "1428:     X86_INS_VPCOMUQ",
          "1429:     X86_INS_VPCOMUW",
          "1430:     X86_INS_VPCOMW",
          "1431:     X86_INS_VPCONFLICTD",
          "1432:     X86_INS_VPCONFLICTQ",
          "1433:     X86_INS_VPERM2F128",
          "1434:     X86_INS_VPERM2I128",
          "1435:     X86_INS_VPERMD",
          "1436:     X86_INS_VPERMI2D",
          "1437:     X86_INS_VPERMI2PD",
          "1438:     X86_INS_VPERMI2PS",
          "1439:     X86_INS_VPERMI2Q",
          "1440:     X86_INS_VPERMIL2PD",
          "1441:     X86_INS_VPERMIL2PS",
          "1442:     X86_INS_VPERMILPD",
          "1443:     X86_INS_VPERMILPS",
          "1444:     X86_INS_VPERMPD",
          "1445:     X86_INS_VPERMPS",
          "1446:     X86_INS_VPERMQ",
          "1447:     X86_INS_VPERMT2D",
          "1448:     X86_INS_VPERMT2PD",
          "1449:     X86_INS_VPERMT2PS",
          "1450:     X86_INS_VPERMT2Q",
          "1451:     X86_INS_VPEXTRB",
          "1452:     X86_INS_VPEXTRD",
          "1453:     X86_INS_VPEXTRQ",
          "1454:     X86_INS_VPEXTRW",
          "1455:     X86_INS_VPGATHERDD",
          "1456:     X86_INS_VPGATHERDQ",
          "1457:     X86_INS_VPGATHERQD",
          "1458:     X86_INS_VPGATHERQQ",
          "1459:     X86_INS_VPHADDBD",
          "1460:     X86_INS_VPHADDBQ",
          "1461:     X86_INS_VPHADDBW",
          "1462:     X86_INS_VPHADDDQ",
          "1463:     X86_INS_VPHADDD",
          "1464:     X86_INS_VPHADDSW",
          "1465:     X86_INS_VPHADDUBD",
          "1466:     X86_INS_VPHADDUBQ",
          "1467:     X86_INS_VPHADDUBW",
          "1468:     X86_INS_VPHADDUDQ",
          "1469:     X86_INS_VPHADDUWD",
          "1470:     X86_INS_VPHADDUWQ",
          "1471:     X86_INS_VPHADDWD",
          "1472:     X86_INS_VPHADDWQ",
          "1473:     X86_INS_VPHADDW",
          "1474:     X86_INS_VPHMINPOSUW",
          "1475:     X86_INS_VPHSUBBW",
          "1476:     X86_INS_VPHSUBDQ",
          "1477:     X86_INS_VPHSUBD",
          "1478:     X86_INS_VPHSUBSW",
          "1479:     X86_INS_VPHSUBWD",
          "1480:     X86_INS_VPHSUBW",
          "1481:     X86_INS_VPINSRB",
          "1482:     X86_INS_VPINSRD",
          "1483:     X86_INS_VPINSRQ",
          "1484:     X86_INS_VPINSRW",
          "1485:     X86_INS_VPLZCNTD",
          "1486:     X86_INS_VPLZCNTQ",
          "1487:     X86_INS_VPMACSDD",
          "1488:     X86_INS_VPMACSDQH",
          "1489:     X86_INS_VPMACSDQL",
          "1490:     X86_INS_VPMACSSDD",
          "1491:     X86_INS_VPMACSSDQH",
          "1492:     X86_INS_VPMACSSDQL",
          "1493:     X86_INS_VPMACSSWD",
          "1494:     X86_INS_VPMACSSWW",
          "1495:     X86_INS_VPMACSWD",
          "1496:     X86_INS_VPMACSWW",
          "1497:     X86_INS_VPMADCSSWD",
          "1498:     X86_INS_VPMADCSWD",
          "1499:     X86_INS_VPMADDUBSW",
          "1500:     X86_INS_VPMADDWD",
          "1501:     X86_INS_VPMASKMOVD",
          "1502:     X86_INS_VPMASKMOVQ",
          "1503:     X86_INS_VPMAXSB",
          "1504:     X86_INS_VPMAXSD",
          "1505:     X86_INS_VPMAXSQ",
          "1506:     X86_INS_VPMAXSW",
          "1507:     X86_INS_VPMAXUB",
          "1508:     X86_INS_VPMAXUD",
          "1509:     X86_INS_VPMAXUQ",
          "1510:     X86_INS_VPMAXUW",
          "1511:     X86_INS_VPMINSB",
          "1512:     X86_INS_VPMINSD",
          "1513:     X86_INS_VPMINSQ",
          "1514:     X86_INS_VPMINSW",
          "1515:     X86_INS_VPMINUB",
          "1516:     X86_INS_VPMINUD",
          "1517:     X86_INS_VPMINUQ",
          "1518:     X86_INS_VPMINUW",
          "1519:     X86_INS_VPMOVDB",
          "1520:     X86_INS_VPMOVDW",
          "1521:     X86_INS_VPMOVMSKB",
          "1522:     X86_INS_VPMOVQB",
          "1523:     X86_INS_VPMOVQD",
          "1524:     X86_INS_VPMOVQW",
          "1525:     X86_INS_VPMOVSDB",
          "1526:     X86_INS_VPMOVSDW",
          "1527:     X86_INS_VPMOVSQB",
          "1528:     X86_INS_VPMOVSQD",
          "1529:     X86_INS_VPMOVSQW",
          "1530:     X86_INS_VPMOVSXBD",
          "1531:     X86_INS_VPMOVSXBQ",
          "1532:     X86_INS_VPMOVSXBW",
          "1533:     X86_INS_VPMOVSXDQ",
          "1534:     X86_INS_VPMOVSXWD",
          "1535:     X86_INS_VPMOVSXWQ",
          "1536:     X86_INS_VPMOVUSDB",
          "1537:     X86_INS_VPMOVUSDW",
          "1538:     X86_INS_VPMOVUSQB",
          "1539:     X86_INS_VPMOVUSQD",
          "1540:     X86_INS_VPMOVUSQW",
          "1541:     X86_INS_VPMOVZXBD",
          "1542:     X86_INS_VPMOVZXBQ",
          "1543:     X86_INS_VPMOVZXBW",
          "1544:     X86_INS_VPMOVZXDQ",
          "1545:     X86_INS_VPMOVZXWD",
          "1546:     X86_INS_VPMOVZXWQ",
          "1547:     X86_INS_VPMULDQ",
          "1548:     X86_INS_VPMULHRSW",
          "1549:     X86_INS_VPMULHUW",
          "1550:     X86_INS_VPMULHW",
          "1551:     X86_INS_VPMULLD",
          "1552:     X86_INS_VPMULLW",
          "1553:     X86_INS_VPMULUDQ",
          "1554:     X86_INS_VPORD",
          "1555:     X86_INS_VPORQ",
          "1556:     X86_INS_VPOR",
          "1557:     X86_INS_VPPERM",
          "1558:     X86_INS_VPROTB",
          "1559:     X86_INS_VPROTD",
          "1560:     X86_INS_VPROTQ",
          "1561:     X86_INS_VPROTW",
          "1562:     X86_INS_VPSADBW",
          "1563:     X86_INS_VPSCATTERDD",
          "1564:     X86_INS_VPSCATTERDQ",
          "1565:     X86_INS_VPSCATTERQD",
          "1566:     X86_INS_VPSCATTERQQ",
          "1567:     X86_INS_VPSHAB",
          "1568:     X86_INS_VPSHAD",
          "1569:     X86_INS_VPSHAQ",
          "1570:     X86_INS_VPSHAW",
          "1571:     X86_INS_VPSHLB",
          "1572:     X86_INS_VPSHLD",
          "1573:     X86_INS_VPSHLQ",
          "1574:     X86_INS_VPSHLW",
          "1575:     X86_INS_VPSHUFB",
          "1576:     X86_INS_VPSHUFD",
          "1577:     X86_INS_VPSHUFHW",
          "1578:     X86_INS_VPSHUFLW",
          "1579:     X86_INS_VPSIGNB",
          "1580:     X86_INS_VPSIGND",
          "1581:     X86_INS_VPSIGNW",
          "1582:     X86_INS_VPSLLDQ",
          "1583:     X86_INS_VPSLLD",
          "1584:     X86_INS_VPSLLQ",
          "1585:     X86_INS_VPSLLVD",
          "1586:     X86_INS_VPSLLVQ",
          "1587:     X86_INS_VPSLLW",
          "1588:     X86_INS_VPSRAD",
          "1589:     X86_INS_VPSRAQ",
          "1590:     X86_INS_VPSRAVD",
          "1591:     X86_INS_VPSRAVQ",
          "1592:     X86_INS_VPSRAW",
          "1593:     X86_INS_VPSRLDQ",
          "1594:     X86_INS_VPSRLD",
          "1595:     X86_INS_VPSRLQ",
          "1596:     X86_INS_VPSRLVD",
          "1597:     X86_INS_VPSRLVQ",
          "1598:     X86_INS_VPSRLW",
          "1599:     X86_INS_VPSUBB",
          "1600:     X86_INS_VPSUBD",
          "1601:     X86_INS_VPSUBQ",
          "1602:     X86_INS_VPSUBSB",
          "1603:     X86_INS_VPSUBSW",
          "1604:     X86_INS_VPSUBUSB",
          "1605:     X86_INS_VPSUBUSW",
          "1606:     X86_INS_VPSUBW",
          "1607:     X86_INS_VPTESTMD",
          "1608:     X86_INS_VPTESTMQ",
          "1609:     X86_INS_VPTESTNMD",
          "1610:     X86_INS_VPTESTNMQ",
          "1611:     X86_INS_VPTEST",
          "1612:     X86_INS_VPUNPCKHBW",
          "1613:     X86_INS_VPUNPCKHDQ",
          "1614:     X86_INS_VPUNPCKHQDQ",
          "1615:     X86_INS_VPUNPCKHWD",
          "1616:     X86_INS_VPUNPCKLBW",
          "1617:     X86_INS_VPUNPCKLDQ",
          "1618:     X86_INS_VPUNPCKLQDQ",
          "1619:     X86_INS_VPUNPCKLWD",
          "1620:     X86_INS_VPXORD",
          "1621:     X86_INS_VPXORQ",
          "1622:     X86_INS_VPXOR",
          "1623:     X86_INS_VRCP14PD",
          "1624:     X86_INS_VRCP14PS",
          "1625:     X86_INS_VRCP14SD",
          "1626:     X86_INS_VRCP14SS",
          "1627:     X86_INS_VRCP28PD",
          "1628:     X86_INS_VRCP28PS",
          "1629:     X86_INS_VRCP28SD",
          "1630:     X86_INS_VRCP28SS",
          "1631:     X86_INS_VRCPPS",
          "1632:     X86_INS_VRCPSS",
          "1633:     X86_INS_VRNDSCALEPD",
          "1634:     X86_INS_VRNDSCALEPS",
          "1635:     X86_INS_VRNDSCALESD",
          "1636:     X86_INS_VRNDSCALESS",
          "1637:     X86_INS_VROUNDPD",
          "1638:     X86_INS_VROUNDPS",
          "1639:     X86_INS_VROUNDSD",
          "1640:     X86_INS_VROUNDSS",
          "1641:     X86_INS_VRSQRT14PD",
          "1642:     X86_INS_VRSQRT14PS",
          "1643:     X86_INS_VRSQRT14SD",
          "1644:     X86_INS_VRSQRT14SS",
          "1645:     X86_INS_VRSQRT28PD",
          "1646:     X86_INS_VRSQRT28PS",
          "1647:     X86_INS_VRSQRT28SD",
          "1648:     X86_INS_VRSQRT28SS",
          "1649:     X86_INS_VRSQRTPS",
          "1650:     X86_INS_VRSQRTSS",
          "1651:     X86_INS_VSCATTERDPD",
          "1652:     X86_INS_VSCATTERDPS",
          "1653:     X86_INS_VSCATTERPF0DPD",
          "1654:     X86_INS_VSCATTERPF0DPS",
          "1655:     X86_INS_VSCATTERPF0QPD",
          "1656:     X86_INS_VSCATTERPF0QPS",
          "1657:     X86_INS_VSCATTERPF1DPD",
          "1658:     X86_INS_VSCATTERPF1DPS",
          "1659:     X86_INS_VSCATTERPF1QPD",
          "1660:     X86_INS_VSCATTERPF1QPS",
          "1661:     X86_INS_VSCATTERQPD",
          "1662:     X86_INS_VSCATTERQPS",
          "1663:     X86_INS_VSHUFPD",
          "1664:     X86_INS_VSHUFPS",
          "1665:     X86_INS_VSQRTPD",
          "1666:     X86_INS_VSQRTPS",
          "1667:     X86_INS_VSQRTSD",
          "1668:     X86_INS_VSQRTSS",
          "1669:     X86_INS_VSTMXCSR",
          "1670:     X86_INS_VSUBPD",
          "1671:     X86_INS_VSUBPS",
          "1672:     X86_INS_VSUBSD",
          "1673:     X86_INS_VSUBSS",
          "1674:     X86_INS_VTESTPD",
          "1675:     X86_INS_VTESTPS",
          "1676:     X86_INS_VUNPCKHPD",
          "1677:     X86_INS_VUNPCKHPS",
          "1678:     X86_INS_VUNPCKLPD",
          "1679:     X86_INS_VUNPCKLPS",
          "1680:     X86_INS_VZEROALL",
          "1681:     X86_INS_VZEROUPPER",
          "1682:     X86_INS_WAIT",
          "1683:     X86_INS_WBINVD",
          "1684:     X86_INS_WRFSBASE",
          "1685:     X86_INS_WRGSBASE",
          "1686:     X86_INS_WRMSR",
          "1687:     X86_INS_XABORT",
          "1688:     X86_INS_XACQUIRE",
          "1689:     X86_INS_XBEGIN",
          "1690:     X86_INS_XCHG",
          "1691:     X86_INS_FXCH",
          "1692:     X86_INS_XCRYPTCBC",
          "1693:     X86_INS_XCRYPTCFB",
          "1694:     X86_INS_XCRYPTCTR",
          "1695:     X86_INS_XCRYPTECB",
          "1696:     X86_INS_XCRYPTOFB",
          "1697:     X86_INS_XEND",
          "1698:     X86_INS_XGETBV",
          "1699:     X86_INS_XLATB",
          "1700:     X86_INS_XRELEASE",
          "1701:     X86_INS_XRSTOR",
          "1702:     X86_INS_XRSTOR64",
          "1703:     X86_INS_XSAVE",
          "1704:     X86_INS_XSAVE64",
          "1705:     X86_INS_XSAVEOPT",
          "1706:     X86_INS_XSAVEOPT64",
          "1707:     X86_INS_XSETBV",
          "1708:     X86_INS_XSHA1",
          "1709:     X86_INS_XSHA256",
          "1710:     X86_INS_XSTORE",
          "1711:     X86_INS_XTEST",
          "1712:     X86_INS_ENDING ' mark the end of the list of insn",
          "1713: End Enum",
          "1715: 'Group of X86 instructions",
          "1716: Public Enum x86_insn_group",
          "1717:     X86_GRP_INVALID = 0 ' = CS_GRP_INVALID",
          "1719:     ' > Generic groups                      '",
          "1720:     X86_GRP_JUMP      'all jump instructions (conditional+direct+indirect jumps) = CS_GRP_JUMP",
          "1721:     X86_GRP_CALL      'all call instructions = CS_GRP_CALL",
          "1722:     X86_GRP_RET       ' all return instructions = CS_GRP_RET",
          "1723:     X86_GRP_INT       'all interrupt instructions (int+syscall) = CS_GRP_INT",
          "1724:     X86_GRP_IRET      'all interrupt return instructions = CS_GRP_IRET",
          "1726:     ' > Architecture-specific groups",
          "1727:     X86_GRP_VM = 128  ' all virtualization instructions (VT-x + AMD-V)",
          "1728:     X86_GRP_3DNOW",
          "1729:     X86_GRP_AES",
          "1730:     X86_GRP_ADX",
          "1731:     X86_GRP_AVX",
          "1732:     X86_GRP_AVX2",
          "1733:     X86_GRP_AVX512",
          "1734:     X86_GRP_BMI",
          "1735:     X86_GRP_BMI2",
          "1736:     X86_GRP_CMOV",
          "1737:     X86_GRP_F16C",
          "1738:     X86_GRP_FMA",
          "1739:     X86_GRP_FMA4",
          "1740:     X86_GRP_FSGSBASE",
          "1741:     X86_GRP_HLE",
          "1742:     X86_GRP_MMX",
          "1743:     X86_GRP_MODE32",
          "1744:     X86_GRP_MODE64",
          "1745:     X86_GRP_RTM",
          "1746:     X86_GRP_SHA",
          "1747:     X86_GRP_SSE1",
          "1748:     X86_GRP_SSE2",
          "1749:     X86_GRP_SSE3",
          "1750:     X86_GRP_SSE41",
          "1751:     X86_GRP_SSE42",
          "1752:     X86_GRP_SSE4A",
          "1753:     X86_GRP_SSSE3",
          "1754:     X86_GRP_PCLMUL",
          "1755:     X86_GRP_XOP",
          "1756:     X86_GRP_CDI",
          "1757:     X86_GRP_ERI",
          "1758:     X86_GRP_TBM",
          "1759:     X86_GRP_16BITMODE",
          "1760:     X86_GRP_NOT64BITMODE",
          "1761:     X86_GRP_SGX",
          "1762:     X86_GRP_DQI",
          "1763:     X86_GRP_BWI",
          "1764:     X86_GRP_PFI",
          "1765:     X86_GRP_VLX",
          "1766:     X86_GRP_SMAP",
          "1767:     X86_GRP_NOVLX",
          "1768:     X86_GRP_ENDING",
          "1769: End Enum",
          "1773: Function x86_sse_cc2str(v As x86_sse_cc) As String",
          "1774:      Dim r As String",
          "1775:     If v = X86_SSE_CC_INVALID Then r = \"X86_SSE_CC_INVALID\"",
          "1776:     If v = X86_SSE_CC_EQ Then r = \"X86_SSE_CC_EQ\"",
          "1777:     If v = X86_SSE_CC_LT Then r = \"X86_SSE_CC_LT\"",
          "1778:     If v = X86_SSE_CC_LE Then r = \"X86_SSE_CC_LE\"",
          "1779:     If v = X86_SSE_CC_UNORD Then r = \"X86_SSE_CC_UNORD\"",
          "1780:     If v = X86_SSE_CC_NEQ Then r = \"X86_SSE_CC_NEQ\"",
          "1781:     If v = X86_SSE_CC_NLT Then r = \"X86_SSE_CC_NLT\"",
          "1782:     If v = X86_SSE_CC_NLE Then r = \"X86_SSE_CC_NLE\"",
          "1783:     If v = X86_SSE_CC_ORD Then r = \"X86_SSE_CC_ORD\"",
          "1784:     If v = X86_SSE_CC_EQ_UQ Then r = \"X86_SSE_CC_EQ_UQ\"",
          "1785:     If v = X86_SSE_CC_NGE Then r = \"X86_SSE_CC_NGE\"",
          "1786:     If v = X86_SSE_CC_NGT Then r = \"X86_SSE_CC_NGT\"",
          "1787:     If v = X86_SSE_CC_FALSE Then r = \"X86_SSE_CC_FALSE\"",
          "1788:     If v = X86_SSE_CC_NEQ_OQ Then r = \"X86_SSE_CC_NEQ_OQ\"",
          "1789:     If v = X86_SSE_CC_GE Then r = \"X86_SSE_CC_GE\"",
          "1790:     If v = X86_SSE_CC_GT Then r = \"X86_SSE_CC_GT\"",
          "1791:     If v = X86_SSE_CC_TRUE Then r = \"X86_SSE_CC_TRUE\"",
          "1793:     If Len(r) = 0 Then",
          "1794:         r = \"Unknown: \" & Hex(v)",
          "1795:     ElseIf DEBUG_DUMP Then",
          "1796:         r = r & \" (\" & Hex(v) & \")\"",
          "1797:     End If",
          "1799:     x86_sse_cc2str = r",
          "1801: End Function",
          "1803: Function x86_avx_cc2str(v As x86_avx_cc) As String",
          "1804:      Dim r As String",
          "1805:     If v = X86_AVX_CC_INVALID Then r = \"X86_AVX_CC_INVALID\"",
          "1806:     If v = X86_AVX_CC_EQ Then r = \"X86_AVX_CC_EQ\"",
          "1807:     If v = X86_AVX_CC_LT Then r = \"X86_AVX_CC_LT\"",
          "1808:     If v = X86_AVX_CC_LE Then r = \"X86_AVX_CC_LE\"",
          "1809:     If v = X86_AVX_CC_UNORD Then r = \"X86_AVX_CC_UNORD\"",
          "1810:     If v = X86_AVX_CC_NEQ Then r = \"X86_AVX_CC_NEQ\"",
          "1811:     If v = X86_AVX_CC_NLT Then r = \"X86_AVX_CC_NLT\"",
          "1812:     If v = X86_AVX_CC_NLE Then r = \"X86_AVX_CC_NLE\"",
          "1813:     If v = X86_AVX_CC_ORD Then r = \"X86_AVX_CC_ORD\"",
          "1814:     If v = X86_AVX_CC_EQ_UQ Then r = \"X86_AVX_CC_EQ_UQ\"",
          "1815:     If v = X86_AVX_CC_NGE Then r = \"X86_AVX_CC_NGE\"",
          "1816:     If v = X86_AVX_CC_NGT Then r = \"X86_AVX_CC_NGT\"",
          "1817:     If v = X86_AVX_CC_FALSE Then r = \"X86_AVX_CC_FALSE\"",
          "1818:     If v = X86_AVX_CC_NEQ_OQ Then r = \"X86_AVX_CC_NEQ_OQ\"",
          "1819:     If v = X86_AVX_CC_GE Then r = \"X86_AVX_CC_GE\"",
          "1820:     If v = X86_AVX_CC_GT Then r = \"X86_AVX_CC_GT\"",
          "1821:     If v = X86_AVX_CC_TRUE Then r = \"X86_AVX_CC_TRUE\"",
          "1822:     If v = X86_AVX_CC_EQ_OS Then r = \"X86_AVX_CC_EQ_OS\"",
          "1823:     If v = X86_AVX_CC_LT_OQ Then r = \"X86_AVX_CC_LT_OQ\"",
          "1824:     If v = X86_AVX_CC_LE_OQ Then r = \"X86_AVX_CC_LE_OQ\"",
          "1825:     If v = X86_AVX_CC_UNORD_S Then r = \"X86_AVX_CC_UNORD_S\"",
          "1826:     If v = X86_AVX_CC_NEQ_US Then r = \"X86_AVX_CC_NEQ_US\"",
          "1827:     If v = X86_AVX_CC_NLT_UQ Then r = \"X86_AVX_CC_NLT_UQ\"",
          "1828:     If v = X86_AVX_CC_NLE_UQ Then r = \"X86_AVX_CC_NLE_UQ\"",
          "1829:     If v = X86_AVX_CC_ORD_S Then r = \"X86_AVX_CC_ORD_S\"",
          "1830:     If v = X86_AVX_CC_EQ_US Then r = \"X86_AVX_CC_EQ_US\"",
          "1831:     If v = X86_AVX_CC_NGE_UQ Then r = \"X86_AVX_CC_NGE_UQ\"",
          "1832:     If v = X86_AVX_CC_NGT_UQ Then r = \"X86_AVX_CC_NGT_UQ\"",
          "1833:     If v = X86_AVX_CC_FALSE_OS Then r = \"X86_AVX_CC_FALSE_OS\"",
          "1834:     If v = X86_AVX_CC_NEQ_OS Then r = \"X86_AVX_CC_NEQ_OS\"",
          "1835:     If v = X86_AVX_CC_GE_OQ Then r = \"X86_AVX_CC_GE_OQ\"",
          "1836:     If v = X86_AVX_CC_GT_OQ Then r = \"X86_AVX_CC_GT_OQ\"",
          "1837:     If v = X86_AVX_CC_TRUE_US Then r = \"X86_AVX_CC_TRUE_US\"",
          "1839:     If Len(r) = 0 Then",
          "1840:         r = \"Unknown: \" & Hex(v)",
          "1841:     ElseIf DEBUG_DUMP Then",
          "1842:         r = r & \" (\" & Hex(v) & \")\"",
          "1843:     End If",
          "1845:     x86_avx_cc2str = r",
          "1847: End Function",
          "1850: Function x86_avx_rm2str(v As x86_avx_rm) As String",
          "1851:     Dim r As String",
          "1853:     If v = X86_AVX_RM_INVALID Then r = \"X86_AVX_RM_INVALID\"",
          "1854:     If v = X86_AVX_RM_RN Then r = \"X86_AVX_RM_RN\"",
          "1855:     If v = X86_AVX_RM_RD Then r = \"X86_AVX_RM_RD\"",
          "1856:     If v = X86_AVX_RM_RU Then r = \"X86_AVX_RM_RU\"",
          "1857:     If v = X86_AVX_RM_RZ Then r = \"X86_AVX_RM_RZ\"",
          "1859:     If Len(r) = 0 Then",
          "1860:         r = \"Unknown: \" & Hex(v)",
          "1861:     ElseIf DEBUG_DUMP Then",
          "1862:         r = r & \" (\" & Hex(v) & \")\"",
          "1863:     End If",
          "1865:     x86_avx_rm2str = r",
          "1866: End Function",
          "",
          "---------------"
        ],
        "bindings/vb6/vbCapstone.cpp||bindings/vb6/vbCapstone.cpp": [
          "File: bindings/vb6/vbCapstone.cpp -> bindings/vb6/vbCapstone.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:  Capstone Disassembly Engine bindings for VB6",
          "3:  Contributed by FireEye FLARE Team",
          "4:  Author:  David Zimmer <david.zimmer@fireeye.com>, <dzzie@yahoo.com>",
          "5:  License: Apache",
          "6:  Copyright: FireEye 2017",
          "8:  This dll is a small stdcall shim so VB6 can access the capstone API",
          "11: #include <stdio.h>",
          "12: #include <conio.h>",
          "13: #include <string.h>",
          "15: #include <capstone.h>",
          "16: #pragma comment(lib, \"capstone.lib\")",
          "18: #define EXPORT comment(linker, \"/EXPORT:\"__FUNCTION__\"=\"__FUNCDNAME__)",
          "20: unsigned int __stdcall bs_version(int *major, int *minor){",
          "21: #pragma EXPORT",
          "22:  return cs_version(major,minor);",
          "23: }",
          "25: bool __stdcall bs_support(int query){",
          "26: #pragma EXPORT",
          "27:  return cs_support(query);",
          "28: }",
          "30: cs_err __stdcall bs_open(cs_arch arch, cs_mode mode, csh *handle){",
          "31: #pragma EXPORT",
          "32:  return cs_open(arch, mode, handle);",
          "33: }",
          "35: cs_err __stdcall bs_close(csh *handle){",
          "36: #pragma EXPORT",
          "37:  return cs_close(handle);",
          "38: }",
          "40: cs_err __stdcall bs_option(csh handle, cs_opt_type type, size_t value){",
          "41: #pragma EXPORT",
          "42:  return cs_option(handle, type, value);",
          "43: }",
          "45: cs_err __stdcall bs_errno(csh handle){",
          "46: #pragma EXPORT",
          "47:  return cs_errno(handle);",
          "48: }",
          "50: const char* __stdcall bs_strerror(cs_err code){",
          "51: #pragma EXPORT",
          "52:  return cs_strerror(code);",
          "53: }",
          "55: size_t __stdcall bs_disasm(csh handle, const uint8_t *code, size_t code_size, uint64_t address, size_t count, cs_insn **insn){",
          "56: #pragma EXPORT",
          "57:  return cs_disasm(handle, code, code_size, address, count, insn);",
          "58: }",
          "60: void __stdcall getInstruction(cs_insn *insn, uint32_t index, void* curInst, uint32_t bufSize){",
          "61: #pragma EXPORT",
          "62:  memcpy(curInst, (void*)&insn[index], bufSize); //size lets us get a partial version of whatever we have implemented in the vbstruct...",
          "63: }",
          "65: const char* __stdcall bs_reg_name(csh handle, unsigned int reg_id){",
          "66: #pragma EXPORT",
          "67:  return cs_reg_name(handle, reg_id);",
          "68: }",
          "70: void __stdcall bs_free(cs_insn *insn, size_t count){",
          "71: #pragma EXPORT",
          "72:  return cs_free(insn, count);",
          "73: }",
          "75: cs_insn* __stdcall bs_malloc(csh handle){",
          "76: #pragma EXPORT",
          "77:  return cs_malloc(handle);",
          "78: }",
          "81: int __stdcall bs_op_index(csh handle, const cs_insn *insn, unsigned int op_type, unsigned int position){",
          "82: #pragma EXPORT",
          "83:  return cs_op_index(handle,insn,op_type,position);",
          "84: }",
          "86: int __stdcall bs_op_count(csh handle, const cs_insn *insn, unsigned int op_type){",
          "87: #pragma EXPORT",
          "88:  return cs_op_count(handle,insn,op_type);",
          "89: }",
          "91: bool __stdcall bs_reg_write(csh handle, const cs_insn *insn, unsigned int reg_id){",
          "92: #pragma EXPORT",
          "93:  return cs_reg_write(handle,insn,reg_id);",
          "94: }",
          "96: bool __stdcall bs_reg_read(csh handle, const cs_insn *insn, unsigned int reg_id){",
          "97: #pragma EXPORT",
          "98:  return cs_reg_read(handle,insn,reg_id);",
          "99: }",
          "101: bool __stdcall bs_insn_group(csh handle, const cs_insn *insn, unsigned int group_id){",
          "102: #pragma EXPORT",
          "103:  return cs_insn_group(handle,insn,group_id);",
          "104: }",
          "106: const char* __stdcall bcs_group_name(csh handle, unsigned int group_id){",
          "107: #pragma EXPORT",
          "108:  return cs_group_name(handle,group_id);",
          "109: }",
          "111: const char* __stdcall bs_insn_name(csh handle, unsigned int insn_id){",
          "112: #pragma EXPORT",
          "113:  return cs_insn_name(handle,insn_id);",
          "114: }",
          "116: bool __stdcall bs_disasm_iter(csh handle, const uint8_t **code, size_t *size, uint64_t *address, cs_insn *insn){",
          "117: #pragma EXPORT",
          "118:  return cs_disasm_iter(handle, code, size, address, insn);",
          "119: }",
          "",
          "---------------"
        ],
        "bindings/vb6/vbCapstone.sln||bindings/vb6/vbCapstone.sln": [
          "File: bindings/vb6/vbCapstone.sln -> bindings/vb6/vbCapstone.sln",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeff",
          "2: Microsoft Visual Studio Solution File, Format Version 10.00",
          "3: # Visual Studio 2008",
          "4: Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"vbCapstone\", \"vbCapstone.vcproj\", \"{B693CA7B-8B91-4413-AAED-14F1947F012A}\"",
          "5: EndProject",
          "6: Global",
          "7:  GlobalSection(SolutionConfigurationPlatforms) = preSolution",
          "8:   Debug|Win32 = Debug|Win32",
          "9:   Release|Win32 = Release|Win32",
          "10:  EndGlobalSection",
          "11:  GlobalSection(ProjectConfigurationPlatforms) = postSolution",
          "12:   {B693CA7B-8B91-4413-AAED-14F1947F012A}.Debug|Win32.ActiveCfg = Debug|Win32",
          "13:   {B693CA7B-8B91-4413-AAED-14F1947F012A}.Debug|Win32.Build.0 = Debug|Win32",
          "14:   {B693CA7B-8B91-4413-AAED-14F1947F012A}.Release|Win32.ActiveCfg = Release|Win32",
          "15:   {B693CA7B-8B91-4413-AAED-14F1947F012A}.Release|Win32.Build.0 = Release|Win32",
          "16:  EndGlobalSection",
          "17:  GlobalSection(SolutionProperties) = preSolution",
          "18:   HideSolutionNode = FALSE",
          "19:  EndGlobalSection",
          "20: EndGlobal",
          "",
          "---------------"
        ],
        "bindings/vb6/vbCapstone.vcproj||bindings/vb6/vbCapstone.vcproj": [
          "File: bindings/vb6/vbCapstone.vcproj -> bindings/vb6/vbCapstone.vcproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?xml version=\"1.0\" encoding=\"Windows-1252\"?>",
          "2: <VisualStudioProject",
          "3:  ProjectType=\"Visual C++\"",
          "4:  Version=\"9.00\"",
          "5:  Name=\"vbCapstone\"",
          "6:  ProjectGUID=\"{B693CA7B-8B91-4413-AAED-14F1947F012A}\"",
          "7:  RootNamespace=\"yy\"",
          "8:  Keyword=\"Win32Proj\"",
          "9:  TargetFrameworkVersion=\"196613\"",
          "10:  >",
          "11:  <Platforms>",
          "12:   <Platform",
          "13:    Name=\"Win32\"",
          "14:   />",
          "15:  </Platforms>",
          "16:  <ToolFiles>",
          "17:  </ToolFiles>",
          "18:  <Configurations>",
          "19:   <Configuration",
          "20:    Name=\"Debug|Win32\"",
          "21:    OutputDirectory=\"$(SolutionDir)$(ConfigurationName)\"",
          "22:    IntermediateDirectory=\"$(ConfigurationName)\"",
          "23:    ConfigurationType=\"2\"",
          "24:    CharacterSet=\"2\"",
          "25:    >",
          "26:    <Tool",
          "27:     Name=\"VCPreBuildEventTool\"",
          "28:    />",
          "29:    <Tool",
          "30:     Name=\"VCCustomBuildTool\"",
          "31:    />",
          "32:    <Tool",
          "33:     Name=\"VCXMLDataGeneratorTool\"",
          "34:    />",
          "35:    <Tool",
          "36:     Name=\"VCWebServiceProxyGeneratorTool\"",
          "37:    />",
          "38:    <Tool",
          "39:     Name=\"VCMIDLTool\"",
          "40:    />",
          "41:    <Tool",
          "42:     Name=\"VCCLCompilerTool\"",
          "43:     Optimization=\"0\"",
          "44:     AdditionalIncludeDirectories=\"./../../include/\"",
          "45:     PreprocessorDefinitions=\"WIN32;_DEBUG;_CONSOLE\"",
          "46:     MinimalRebuild=\"true\"",
          "47:     BasicRuntimeChecks=\"3\"",
          "48:     RuntimeLibrary=\"1\"",
          "49:     UsePrecompiledHeader=\"0\"",
          "50:     WarningLevel=\"3\"",
          "51:     DebugInformationFormat=\"4\"",
          "52:    />",
          "53:    <Tool",
          "54:     Name=\"VCManagedResourceCompilerTool\"",
          "55:    />",
          "56:    <Tool",
          "57:     Name=\"VCResourceCompilerTool\"",
          "58:    />",
          "59:    <Tool",
          "60:     Name=\"VCPreLinkEventTool\"",
          "61:    />",
          "62:    <Tool",
          "63:     Name=\"VCLinkerTool\"",
          "64:     OutputFile=\"./vbCapstone.dll\"",
          "65:     LinkIncremental=\"2\"",
          "66:     GenerateManifest=\"false\"",
          "67:     GenerateDebugInformation=\"true\"",
          "68:     SubSystem=\"1\"",
          "69:     TargetMachine=\"1\"",
          "70:    />",
          "71:    <Tool",
          "72:     Name=\"VCALinkTool\"",
          "73:    />",
          "74:    <Tool",
          "75:     Name=\"VCManifestTool\"",
          "76:     EmbedManifest=\"false\"",
          "77:    />",
          "78:    <Tool",
          "79:     Name=\"VCXDCMakeTool\"",
          "80:    />",
          "81:    <Tool",
          "82:     Name=\"VCBscMakeTool\"",
          "83:    />",
          "84:    <Tool",
          "85:     Name=\"VCFxCopTool\"",
          "86:    />",
          "87:    <Tool",
          "88:     Name=\"VCAppVerifierTool\"",
          "89:    />",
          "90:    <Tool",
          "91:     Name=\"VCPostBuildEventTool\"",
          "92:    />",
          "93:   </Configuration>",
          "94:   <Configuration",
          "95:    Name=\"Release|Win32\"",
          "96:    OutputDirectory=\"$(SolutionDir)$(ConfigurationName)\"",
          "97:    IntermediateDirectory=\"$(ConfigurationName)\"",
          "98:    ConfigurationType=\"2\"",
          "99:    CharacterSet=\"2\"",
          "100:    WholeProgramOptimization=\"1\"",
          "101:    >",
          "102:    <Tool",
          "103:     Name=\"VCPreBuildEventTool\"",
          "104:    />",
          "105:    <Tool",
          "106:     Name=\"VCCustomBuildTool\"",
          "107:    />",
          "108:    <Tool",
          "109:     Name=\"VCXMLDataGeneratorTool\"",
          "110:    />",
          "111:    <Tool",
          "112:     Name=\"VCWebServiceProxyGeneratorTool\"",
          "113:    />",
          "114:    <Tool",
          "115:     Name=\"VCMIDLTool\"",
          "116:    />",
          "117:    <Tool",
          "118:     Name=\"VCCLCompilerTool\"",
          "119:     Optimization=\"2\"",
          "120:     EnableIntrinsicFunctions=\"true\"",
          "121:     AdditionalIncludeDirectories=\"./../../include/\"",
          "122:     PreprocessorDefinitions=\"WIN32;NDEBUG;_CONSOLE\"",
          "123:     RuntimeLibrary=\"0\"",
          "124:     EnableFunctionLevelLinking=\"true\"",
          "125:     UsePrecompiledHeader=\"0\"",
          "126:     WarningLevel=\"3\"",
          "127:     DebugInformationFormat=\"3\"",
          "128:    />",
          "129:    <Tool",
          "130:     Name=\"VCManagedResourceCompilerTool\"",
          "131:    />",
          "132:    <Tool",
          "133:     Name=\"VCResourceCompilerTool\"",
          "134:    />",
          "135:    <Tool",
          "136:     Name=\"VCPreLinkEventTool\"",
          "137:    />",
          "138:    <Tool",
          "139:     Name=\"VCLinkerTool\"",
          "140:     OutputFile=\"./vbCapstone.dll\"",
          "141:     LinkIncremental=\"1\"",
          "142:     GenerateManifest=\"false\"",
          "143:     GenerateDebugInformation=\"true\"",
          "144:     SubSystem=\"1\"",
          "145:     OptimizeReferences=\"2\"",
          "146:     EnableCOMDATFolding=\"2\"",
          "147:     TargetMachine=\"1\"",
          "148:    />",
          "149:    <Tool",
          "150:     Name=\"VCALinkTool\"",
          "151:    />",
          "152:    <Tool",
          "153:     Name=\"VCManifestTool\"",
          "154:    />",
          "155:    <Tool",
          "156:     Name=\"VCXDCMakeTool\"",
          "157:    />",
          "158:    <Tool",
          "159:     Name=\"VCBscMakeTool\"",
          "160:    />",
          "161:    <Tool",
          "162:     Name=\"VCFxCopTool\"",
          "163:    />",
          "164:    <Tool",
          "165:     Name=\"VCAppVerifierTool\"",
          "166:    />",
          "167:    <Tool",
          "168:     Name=\"VCPostBuildEventTool\"",
          "169:    />",
          "170:   </Configuration>",
          "171:  </Configurations>",
          "172:  <References>",
          "173:  </References>",
          "174:  <Files>",
          "175:   <File",
          "176:    RelativePath=\".\\vbCapstone.cpp\"",
          "177:    >",
          "178:   </File>",
          "179:  </Files>",
          "180:  <Globals>",
          "181:  </Globals>",
          "182: </VisualStudioProject>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bde12aed4024342fc812ddbc756477a5716ffb94",
      "candidate_info": {
        "commit_hash": "bde12aed4024342fc812ddbc756477a5716ffb94",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/bde12aed4024342fc812ddbc756477a5716ffb94",
        "files": [
          "cstool/cstool.c"
        ],
        "message": "cstool: convert space to tab",
        "before_after_code_files": [
          "cstool/cstool.c||cstool/cstool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cstool/cstool.c||cstool/cstool.c": [
          "File: cstool/cstool.c -> cstool/cstool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static uint8_t char_to_hexnum(char c)",
          "23: {",
          "24:  if (c >= '0' && c <= '9') {",
          "26:  }",
          "28:  if (c >= 'a' && c <= 'f') {",
          "",
          "[Removed Lines]",
          "25:         return (uint8_t)(c - '0');",
          "",
          "[Added Lines]",
          "25:   return (uint8_t)(c - '0');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: static uint8_t *preprocess(char *code, size_t *size)",
          "39: {",
          "41:  uint8_t high, low;",
          "42:  uint8_t *result;",
          "",
          "[Removed Lines]",
          "40:     size_t i = 0, j = 0;",
          "",
          "[Added Lines]",
          "40:  size_t i = 0, j = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:  uint64_t address = 0;",
          "124:  cs_insn *insn;",
          "125:  cs_err err;",
          "130:  if (argc != 3 && argc != 4 && argc != 5) {",
          "131:   usage(argv[0]);",
          "132:   return -1;",
          "133:  }",
          "175:  if (!strcmp(mode, \"arm\")) {",
          "178:  }",
          "180:  if (!strcmp(mode, \"armb\")) {",
          "183:  }",
          "185:  if (!strcmp(mode, \"arml\")) {",
          "188:  }",
          "190:  if (!strcmp(mode, \"thumb\")) {",
          "193:  }",
          "195:  if (!strcmp(mode, \"thumbbe\")) {",
          "198:  }",
          "200:  if (!strcmp(mode, \"thumble\")) {",
          "203:  }",
          "205:  if (!strcmp(mode, \"arm64\")) {",
          "208:  }",
          "210:  if (!strcmp(mode, \"mips\")) {",
          "213:  }",
          "215:  if (!strcmp(mode, \"mipsbe\")) {",
          "218:  }",
          "220:  if (!strcmp(mode, \"mips64\")) {",
          "223:  }",
          "225:  if (!strcmp(mode, \"mips64be\")) {",
          "228:  }",
          "230:  if (!strcmp(mode, \"x16\")) {",
          "234:  }",
          "236:  if (!strcmp(mode, \"x32\")) {",
          "240:  }",
          "242:  if (!strcmp(mode, \"x64\")) {",
          "245:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "246:  }",
          "248:  if (!strcmp(mode, \"x16att\")) {",
          "254:   }",
          "255:  }",
          "257:  if (!strcmp(mode,\"x32att\")) {",
          "260:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "261:   if (!err) {",
          "262:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "126:     cs_mode md;",
          "127:     char *arch;",
          "128:     bool debug_flag = false;",
          "135:     if (!strcmp(argv[1], \"-d\")) {",
          "136:         if (argc == 3) {",
          "137:             usage(argv[0]);",
          "138:             return -1;",
          "139:         }",
          "140:         debug_flag = true;",
          "141:         mode = argv[2];",
          "142:         assembly = preprocess(argv[3], &size);",
          "143:         if (argc == 5) {",
          "144:             char *temp;",
          "145:             address = strtoull(argv[4], &temp, 16);",
          "146:             if (temp == argv[4] || *temp != '\\0' || errno == ERANGE) {",
          "147:                 printf(\"ERROR: invalid address argument, quit!\\n\");",
          "148:                 return -2;",
          "149:             }",
          "150:         }",
          "151:     } else {",
          "152:         if (argc == 5) {",
          "153:             usage(argv[0]);",
          "154:             return -1;",
          "155:         }",
          "157:         mode = argv[1];",
          "158:         assembly = preprocess(argv[2], &size);",
          "159:         if (assembly == NULL) {",
          "160:             printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "161:             return -3;",
          "162:         }",
          "164:         if (argc == 4) {",
          "166:             char *temp;",
          "167:             address = strtoull(argv[3], &temp, 16);",
          "168:             if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "169:                 printf(\"ERROR: invalid address argument, quit!\\n\");",
          "170:                 return -2;",
          "171:             }",
          "172:         }",
          "173:     }",
          "176:         arch = \"arm\";",
          "177:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "181:         arch = \"arm\";",
          "182:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "186:         arch = \"arm\";",
          "187:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "191:         arch = \"arm\";",
          "192:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "196:         arch = \"arm\";",
          "197:         err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "201:         arch = \"arm\";",
          "202:         err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "206:         arch = \"arm64\";",
          "207:         err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "211:         arch = \"mips\";",
          "212:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:         arch = \"mips\";",
          "217:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "221:         arch = \"mips\";",
          "222:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "226:         arch = \"mips\";",
          "227:         err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "231:         md = CS_MODE_16;",
          "232:         arch = \"x86\";",
          "233:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "237:         md = CS_MODE_32;",
          "238:         arch = \"x86\";",
          "239:         err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "243:         md = CS_MODE_64;",
          "244:         arch = \"x86\";",
          "249:         md = CS_MODE_16;",
          "250:         arch = \"x86\";",
          "251:         err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:         if (!err) {",
          "253:             cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "258:         md = CS_MODE_32;",
          "259:         arch = \"x86\";",
          "",
          "[Added Lines]",
          "126:  cs_mode md;",
          "127:  char *arch;",
          "128:  bool debug_flag = false;",
          "135:  if (!strcmp(argv[1], \"-d\")) {",
          "136:    if (argc == 3) {",
          "137:     usage(argv[0]);",
          "138:     return -1;",
          "139:  }",
          "140:   debug_flag = true;",
          "141:   mode = argv[2];",
          "142:   assembly = preprocess(argv[3], &size);",
          "143:   if (argc == 5) {",
          "144:    char *temp;",
          "145:    address = strtoull(argv[4], &temp, 16);",
          "146:    if (temp == argv[4] || *temp != '\\0' || errno == ERANGE) {",
          "147:     printf(\"ERROR: invalid address argument, quit!\\n\");",
          "148:     return -2;",
          "149:    }",
          "150:   }",
          "151:  } else {",
          "152:   if (argc == 5) {",
          "153:    usage(argv[0]);",
          "154:    return -1;",
          "155:   }",
          "157:   mode = argv[1];",
          "158:   assembly = preprocess(argv[2], &size);",
          "159:   if (assembly == NULL) {",
          "160:    printf(\"ERROR: invalid assembler-string argument, quit!\\n\");",
          "161:    return -3;",
          "162:   }",
          "164:   if (argc == 4) {",
          "166:    char *temp;",
          "167:    address = strtoull(argv[3], &temp, 16);",
          "168:    if (temp == argv[3] || *temp != '\\0' || errno == ERANGE) {",
          "169:     printf(\"ERROR: invalid address argument, quit!\\n\");",
          "170:     return -2;",
          "171:    }",
          "172:   }",
          "173:  }",
          "176:   arch = \"arm\";",
          "177:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM, &handle);",
          "181:   arch = \"arm\";",
          "182:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_BIG_ENDIAN, &handle);",
          "186:   arch = \"arm\";",
          "187:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "191:   arch = \"arm\";",
          "192:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_LITTLE_ENDIAN, &handle);",
          "196:   arch = \"arm\";",
          "197:   err = cs_open(CS_ARCH_ARM, CS_MODE_THUMB + CS_MODE_BIG_ENDIAN, &handle);",
          "201:   arch = \"arm\";",
          "202:   err = cs_open(CS_ARCH_ARM, CS_MODE_ARM + CS_MODE_LITTLE_ENDIAN, &handle);",
          "206:   arch = \"arm64\";",
          "207:   err = cs_open(CS_ARCH_ARM64, CS_MODE_LITTLE_ENDIAN, &handle);",
          "211:   arch = \"mips\";",
          "212:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_LITTLE_ENDIAN, &handle);",
          "216:   arch = \"mips\";",
          "217:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS32 + CS_MODE_BIG_ENDIAN, &handle);",
          "221:   arch = \"mips\";",
          "222:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "226:   arch = \"mips\";",
          "227:   err = cs_open(CS_ARCH_MIPS, CS_MODE_MIPS64 + CS_MODE_BIG_ENDIAN, &handle);",
          "231:   md = CS_MODE_16;",
          "232:   arch = \"x86\";",
          "233:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "237:   md = CS_MODE_32;",
          "238:   arch = \"x86\";",
          "239:   err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "243:   md = CS_MODE_64;",
          "244:   arch = \"x86\";",
          "249:   md = CS_MODE_16;",
          "250:   arch = \"x86\";",
          "251:   err = cs_open(CS_ARCH_X86, CS_MODE_16, &handle);",
          "252:   if (!err) {",
          "253:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "258:   md = CS_MODE_32;",
          "259:   arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:  }",
          "266:  if (!strcmp(mode,\"x64att\")) {",
          "269:   err = cs_open(CS_ARCH_X86, CS_MODE_64, &handle);",
          "270:   if (!err) {",
          "271:    cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_ATT);",
          "",
          "[Removed Lines]",
          "267:         md = CS_MODE_64;",
          "268:         arch = \"x86\";",
          "",
          "[Added Lines]",
          "267:   md = CS_MODE_64;",
          "268:   arch = \"x86\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:  }",
          "275:  if (!strcmp(mode,\"ppc64\")) {",
          "277:   err = cs_open(CS_ARCH_PPC, CS_MODE_64+CS_MODE_LITTLE_ENDIAN, &handle);",
          "278:  }",
          "280:  if (!strcmp(mode,\"ppc64be\")) {",
          "283:  }",
          "285:  if (!strcmp(mode,\"sparc\")) {",
          "287:   err = cs_open(CS_ARCH_SPARC, CS_MODE_BIG_ENDIAN, &handle);",
          "288:  }",
          "290:  if (!strcmp(mode, \"systemz\") || !strcmp(mode, \"sysz\") || !strcmp(mode, \"s390x\")) {",
          "292:   err = cs_open(CS_ARCH_SYSZ, CS_MODE_BIG_ENDIAN, &handle);",
          "293:  }",
          "295:  if (!strcmp(mode,\"xcore\")) {",
          "297:   err = cs_open(CS_ARCH_XCORE, CS_MODE_BIG_ENDIAN, &handle);",
          "298:  }",
          "",
          "[Removed Lines]",
          "276:         arch = \"ppc\";",
          "281:         arch = \"ppc\";",
          "282:         err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "286:         arch = \"sparc\";",
          "291:         arch = \"sysz\";",
          "296:         arch = \"xcore\";",
          "",
          "[Added Lines]",
          "276:   arch = \"ppc\";",
          "281:   arch = \"ppc\";",
          "282:   err = cs_open(CS_ARCH_PPC,CS_MODE_64+CS_MODE_BIG_ENDIAN, &handle);",
          "286:   arch = \"sparc\";",
          "291:   arch = \"sysz\";",
          "296:   arch = \"xcore\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "303:   return -1;",
          "304:  }",
          "311:  if (count > 0) {",
          "312:   size_t i;",
          "",
          "[Removed Lines]",
          "306:     if (debug_flag) {",
          "307:         cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "308:     }",
          "310:     count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "",
          "[Added Lines]",
          "306:  if (debug_flag) {",
          "307:   cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "308:  }",
          "310:  count = cs_disasm(handle, assembly, size, address, 0, &insn);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "325:     }",
          "326:    }",
          "327:    printf(\"  %s\\t%s\\n\", insn[i].mnemonic, insn[i].op_str);",
          "361:   }",
          "362:   cs_free(insn, count);",
          "363:  } else {",
          "",
          "[Removed Lines]",
          "328:             if (debug_flag) {",
          "329:                 if (!strcmp(arch, \"x86\")) {",
          "330:                     print_insn_detail_x86(handle, md, &insn[i]);",
          "331:                 }",
          "333:                 if (!strcmp(arch, \"arm\")) {",
          "334:                     print_insn_detail_arm(handle, &insn[i]);",
          "335:                 }",
          "337:                 if (!strcmp(arch,\"arm64\")) {",
          "338:                     print_insn_detail_arm64(handle,&insn[i]);",
          "339:                 }",
          "341:                 if (!strcmp(arch, \"mips\")) {",
          "342:                     print_insn_detail_mips(handle, &insn[i]);",
          "343:                 }",
          "345:                 if (!strcmp(arch, \"ppc\")) {",
          "346:                     print_insn_detail_ppc(handle, &insn[i]);",
          "347:                 }",
          "349:                 if (!strcmp(arch, \"sparc\")) {",
          "350:                     print_insn_detail_sparc(handle, &insn[i]);",
          "351:                 }",
          "353:                 if (!strcmp(arch, \"sysz\")) {",
          "354:                     print_insn_detail_sysz(handle, &insn[i]);",
          "355:                 }",
          "357:                 if (!strcmp(arch, \"xcore\")) {",
          "358:                     print_insn_detail_xcore(handle, &insn[i]);",
          "359:                 }",
          "360:             }",
          "",
          "[Added Lines]",
          "328:    if (debug_flag) {",
          "329:     if (!strcmp(arch, \"x86\")) {",
          "330:      print_insn_detail_x86(handle, md, &insn[i]);",
          "331:     }",
          "333:     if (!strcmp(arch, \"arm\")) {",
          "334:      print_insn_detail_arm(handle, &insn[i]);",
          "335:     }",
          "337:     if (!strcmp(arch,\"arm64\")) {",
          "338:      print_insn_detail_arm64(handle,&insn[i]);",
          "339:     }",
          "341:     if (!strcmp(arch, \"mips\")) {",
          "342:      print_insn_detail_mips(handle, &insn[i]);",
          "343:     }",
          "345:     if (!strcmp(arch, \"ppc\")) {",
          "346:      print_insn_detail_ppc(handle, &insn[i]);",
          "347:     }",
          "349:     if (!strcmp(arch, \"sparc\")) {",
          "350:      print_insn_detail_sparc(handle, &insn[i]);",
          "351:     }",
          "353:     if (!strcmp(arch, \"sysz\")) {",
          "354:      print_insn_detail_sysz(handle, &insn[i]);",
          "355:     }",
          "357:     if (!strcmp(arch, \"xcore\")) {",
          "358:      print_insn_detail_xcore(handle, &insn[i]);",
          "359:     }",
          "360:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}