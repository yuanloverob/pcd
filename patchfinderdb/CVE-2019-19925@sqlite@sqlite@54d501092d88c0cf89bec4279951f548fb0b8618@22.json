{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "10cc16c95418f3c178637026fbc9206a063ec841",
      "candidate_info": {
        "commit_hash": "10cc16c95418f3c178637026fbc9206a063ec841",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/10cc16c95418f3c178637026fbc9206a063ec841",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix a minor comment typo.  No code changes.\n\nFossilOrigin-Name: 9a0a93c89d3fdd0f9000a9226388e2e53f299165e043913f40b83bf597bfea04",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b2879629c34fc0a8e99d94648903eb93aabbc7a3682c80cb7382f9a9ca5ffb7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c"
        ]
      }
    },
    {
      "candidate_hash": "8e0f794d17e110e145466d99fb8b106ac7ca30fe",
      "candidate_info": {
        "commit_hash": "8e0f794d17e110e145466d99fb8b106ac7ca30fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e0f794d17e110e145466d99fb8b106ac7ca30fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "test/like3.test"
        ],
        "message": "Enable the LIKE optimization when the ESCAPE keyword is present and the PRAGMA case_sensitive_like pragma is ON.\n\nFossilOrigin-Name: 6ae4b8c525f446ddb0e0bdd5e4e01e06e2ab975e3effa42fce6a1102b3a39830",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0edad5339e36d69aed9289bb3e60d35f9930386d76a62bb0194c4fdf420d16fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1806:   if( ALWAYS(pDef) ){",
          "1807:     pDef->funcFlags |= flagVal;",
          "1808:   }",
          "1809: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1809:   pDef = sqlite3FindFunction(db, zName, 3, SQLITE_UTF8, 0);",
          "1810:   if( pDef ){",
          "1811:     pDef->funcFlags |= flagVal;",
          "1812:   }",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   `--SEARCH TABLE t5b USING COVERING INDEX sqlite_autoindex_t5b_1 (x>? AND x<?)",
          "179: }",
          "181: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: # 2019-02-27",
          "182: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "183: # using PRAGMA case_sensitive_like=ON.",
          "184: #",
          "185: do_execsql_test like3-6.100 {",
          "186:   DROP TABLE IF EXISTS t1;",
          "187:   CREATE TABLE t1(path TEXT COLLATE nocase PRIMARY KEY,a,b,c) WITHOUT ROWID;",
          "188: }",
          "189: do_eqp_test like3-6.110 {",
          "190:   SELECT * FROM t1 WHERE path LIKE 'a%';",
          "191: } {",
          "192:   QUERY PLAN",
          "193:   `--SEARCH TABLE t1 USING PRIMARY KEY (path>? AND path<?)",
          "194: }",
          "195: do_eqp_test like3-6.120 {",
          "196:   SELECT * FROM t1 WHERE path LIKE 'a%' ESCAPE '_';",
          "197: } {",
          "198:   QUERY PLAN",
          "199:   `--SEARCH TABLE t1 USING PRIMARY KEY (path>? AND path<?)",
          "200: }",
          "201: do_execsql_test like3-6.200 {",
          "202:   DROP TABLE IF EXISTS t2;",
          "203:   CREATE TABLE t2(path TEXT,x,y,z);",
          "204:   CREATE INDEX t2path ON t2(path COLLATE nocase);",
          "205:   CREATE INDEX t2path2 ON t2(path);",
          "206: }",
          "207: do_eqp_test like3-6.210 {",
          "208:   SELECT * FROM t2 WHERE path LIKE 'a%';",
          "209: } {",
          "210:   QUERY PLAN",
          "211:   `--SEARCH TABLE t2 USING INDEX t2path (path>? AND path<?)",
          "212: }",
          "213: do_eqp_test like3-6.220 {",
          "214:   SELECT * FROM t2 WHERE path LIKE 'a%' ESCAPE '_';",
          "215: } {",
          "216:   QUERY PLAN",
          "217:   `--SEARCH TABLE t2 USING INDEX t2path (path>? AND path<?)",
          "218: }",
          "219: db eval {PRAGMA case_sensitive_like=ON}",
          "220: do_eqp_test like3-6.230 {",
          "221:   SELECT * FROM t2 WHERE path LIKE 'a%';",
          "222: } {",
          "223:   QUERY PLAN",
          "224:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "225: }",
          "226: do_eqp_test like3-6.240 {",
          "227:   SELECT * FROM t2 WHERE path LIKE 'a%' ESCAPE '_';",
          "228: } {",
          "229:   QUERY PLAN",
          "230:   `--SEARCH TABLE t2 USING INDEX t2path2 (path>? AND path<?)",
          "231: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e65b9c6a5e2ff7a1de7bed378fe09157ce8e8525",
      "candidate_info": {
        "commit_hash": "e65b9c6a5e2ff7a1de7bed378fe09157ce8e8525",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e65b9c6a5e2ff7a1de7bed378fe09157ce8e8525",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Separate makefile targets for \"dbfuzz2\", \"dbfuzz2-asan\", and \"dbfuzz2-msan\".\n\nFossilOrigin-Name: ea119641a7edcd0e1ec14371d93e35f860971888bd98cb0019253358a2ef123b",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "682:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "683:   -DSQLITE_ENABLE_RTREE \\",
          "684:   -DSQLITE_ENABLE_FTS4 \\",
          "688:  clang-6.0 $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "691:  mkdir -p dbfuzz2-dir",
          "692:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "",
          "[Removed Lines]",
          "685:   -DSQLITE_EANBLE_FTS5",
          "687: dbfuzz2: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "689:   -fsanitize=fuzzer,undefined,address -o dbfuzz2 \\",
          "690:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c",
          "",
          "[Added Lines]",
          "685:   -DSQLITE_ENABLE_FTS5",
          "687: dbfuzz2$(TEXE): $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "688:  $(CC) $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "689:   -DSTANDALONE -o dbfuzz2 \\",
          "690:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c $(TLIBS)",
          "691:  mkdir -p dbfuzz2-dir",
          "692:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "694: dbfuzz2-asan: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "695:  clang-6.0 $(OPT_FEATURE_FLAGS) $(OPTS) -I. -g -O0 \\",
          "696:   -fsanitize=fuzzer,undefined,address -o dbfuzz2-asan \\",
          "697:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c $(TLIBS)",
          "698:  mkdir -p dbfuzz2-dir",
          "699:  cp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir",
          "701: dbfuzz2-msan: $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "703:   -fsanitize=fuzzer,undefined,memory -o dbfuzz2-msan \\",
          "704:   $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c $(TLIBS)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 240f1c0c92cad8a1c19438b38489aedb831f62a4603c53f22367e876d8f644ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   return 0;",
          "139: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141: #ifdef STANDALONE",
          "146: static unsigned char *readFile(const char *zName, int *pnByte){",
          "147:   FILE *in = fopen(zName, \"rb\");",
          "148:   long nIn;",
          "149:   size_t nRead;",
          "150:   unsigned char *pBuf;",
          "151:   if( in==0 ) return 0;",
          "152:   fseek(in, 0, SEEK_END);",
          "153:   nIn = ftell(in);",
          "154:   rewind(in);",
          "155:   pBuf = malloc( nIn+1 );",
          "156:   if( pBuf==0 ){ fclose(in); return 0; }",
          "157:   nRead = fread(pBuf, nIn, 1, in);",
          "158:   fclose(in);",
          "159:   if( nRead!=1 ){",
          "160:     free(pBuf);",
          "161:     return 0;",
          "162:   }",
          "163:   pBuf[nIn] = 0;",
          "164:   if( pnByte ) *pnByte = nIn;",
          "165:   return pBuf;",
          "166: }",
          "169: #ifdef STANDALONE",
          "170: int main(int argc, char **argv){",
          "171:   int i;",
          "172:   int prevAmt = -1;",
          "173:   LLVMFuzzerInitialize(&argc, &argv);",
          "174:   for(i=1; i<argc; i++){",
          "175:     unsigned char *pIn;",
          "176:     int nIn;",
          "177:     pIn = readFile(argv[i], &nIn);",
          "178:     if( pIn ){",
          "179:       LLVMFuzzerTestOneInput((const uint8_t*)pIn, (size_t)nIn);",
          "180:       free(pIn);",
          "181:     }",
          "182:   }",
          "183:   return 0;",
          "184: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "150dfbd2c87b115095e850fe01c2aed9612e0246",
      "candidate_info": {
        "commit_hash": "150dfbd2c87b115095e850fe01c2aed9612e0246",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/150dfbd2c87b115095e850fe01c2aed9612e0246",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/altertab3.test",
          "test/corruptC.test",
          "test/memdb1.test",
          "test/pragma4.test"
        ],
        "message": "Fix minor problems in tcl test scripts.\n\nFossilOrigin-Name: 56b664185e3e56ad22e0c16a5b946fc8204d4d33221b6b4269d6d650dfd9969c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/altertab3.test||test/altertab3.test",
          "test/corruptC.test||test/corruptC.test",
          "test/memdb1.test||test/memdb1.test",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: edd87cd606ce264f181c16bbe889adeb8b27e90914f914c0f5d7b68c2dc2d7bd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   COMMIT;",
          "100: }",
          "101: do_execsql_test 4.1.3 {",
          "106: do_catchsql_test 4.2.1 {",
          "",
          "[Removed Lines]",
          "102:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "103: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "",
          "[Added Lines]",
          "102:   SELECT type, name, tbl_name, sql",
          "103:   FROM sqlite_master WHERE type='table' AND name!='t1';",
          "104: } {table t3 t3 {CREATE TABLE t3(e, f)}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:   COMMIT;",
          "112: }",
          "113: do_execsql_test 4.2.3 {",
          "117: #-------------------------------------------------------------------------",
          "118: reset_db",
          "",
          "[Removed Lines]",
          "114:   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';",
          "115: } {table t3 t3 3 {CREATE TABLE t3(e, f)}}",
          "",
          "[Added Lines]",
          "115:   SELECT type, name, tbl_name, sql",
          "116:   FROM sqlite_master WHERE type='table' AND name!='t1';",
          "117: } {table t3 t3 {CREATE TABLE t3(e, f)}}",
          "",
          "---------------"
        ],
        "test/corruptC.test||test/corruptC.test": [
          "File: test/corruptC.test -> test/corruptC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   sqlite3 db test.db",
          "99:   catchsql {PRAGMA integrity_check}",
          "102: # test that a corrupt content offset size is handled (seed 5649)",
          "103: #",
          "",
          "[Removed Lines]",
          "100: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "100: } {0 {{*** in database main ***",
          "101: Page 3: free space corruption}}}",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: } {1 {wrong # args: should be \"db serialize ?DATABASE?\"}}",
          "188: #-------------------------------------------------------------------------",
          "201:   }",
          "204: finish_test",
          "",
          "[Removed Lines]",
          "189: reset_db",
          "190: do_execsql_test 700 {",
          "191:   CREATE TABLE t1(a, b);",
          "192:   PRAGMA schema_version = 0;",
          "193: }",
          "194: do_test 710 {",
          "195:   set ser [db serialize main]",
          "196:   db close",
          "197:   sqlite3 db",
          "198:   db deserialize main $ser",
          "199:   catchsql {",
          "200:     CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "202: } {1 {table t1 already exists}}",
          "",
          "[Added Lines]",
          "189: ifcapable vtab {",
          "190:   reset_db",
          "191:   do_execsql_test 700 {",
          "192:     CREATE TABLE t1(a, b);",
          "193:     PRAGMA schema_version = 0;",
          "195:   do_test 710 {",
          "196:     set ser [db serialize main]",
          "197:     db close",
          "198:     sqlite3 db",
          "199:     db deserialize main $ser",
          "200:     catchsql {",
          "201:       CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "202:     }",
          "203:   } {1 {table t1 already exists}}",
          "204: }",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   execsql { DROP INDEX i1 } db3",
          "175:   execsql { DROP INDEX i2 } db2",
          "176: } {}",
          "177: ifcapable vtab {",
          "178:   do_execsql_test 4.3.5 { SELECT * FROM pragma_index_info('i1') }",
          "179:   do_execsql_test 4.3.6 { SELECT * FROM pragma_index_info('i2') }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: if {[permutation]==\"prepare\"} { catchsql { SELECT * FROM sqlite_master } }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:   execsql { DROP INDEX i1 } db3",
          "193:   execsql { DROP INDEX i2 } db2",
          "194: } {}",
          "195: ifcapable vtab {",
          "196:   do_execsql_test 4.4.5 { SELECT * FROM pragma_index_list('t1') } {}",
          "197:   do_execsql_test 4.4.6 { SELECT * FROM pragma_index_list('t2') } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: if {[permutation]==\"prepare\"} {",
          "197:   catchsql { SELECT * FROM sqlite_master, aux.sqlite_master }",
          "198: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:   execsql { DROP TABLE c1 } db3",
          "217:   execsql { DROP TABLE c2 } db2",
          "218: } {}",
          "219: ifcapable vtab {",
          "220:   do_execsql_test 4.5.4 { SELECT * FROM pragma_foreign_key_list('c1') }",
          "221:   do_execsql_test 4.5.5 { SELECT * FROM pragma_foreign_key_list('c2') }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: if {[permutation]==\"prepare\"} {",
          "224:   catchsql { SELECT * FROM sqlite_master, aux.sqlite_master }",
          "225: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73f940c89eba2daede2e4fba4ee84b2f1922cb52",
      "candidate_info": {
        "commit_hash": "73f940c89eba2daede2e4fba4ee84b2f1922cb52",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/73f940c89eba2daede2e4fba4ee84b2f1922cb52",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix additional compiler warnings introduced by the previous check-in and found by MSVC.\n\nFossilOrigin-Name: 6fc0deffa4eed902fd13eefe6d2765f338f3dadc5b29f7cae5064e135417746b",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   MatchinfoBuffer *pRet;",
          "133:   sqlite3_int64 nByte = sizeof(u32) * (2*(sqlite3_int64)nElem + 1)",
          "134:                            + sizeof(MatchinfoBuffer);",
          "",
          "[Removed Lines]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){",
          "",
          "[Added Lines]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(size_t nElem, const char *zMatchinfo){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   if( pRet ){",
          "139:     memset(pRet, 0, nByte);",
          "140:     pRet->aMatchinfo[0] = (u8*)(&pRet->aMatchinfo[1]) - (u8*)pRet;",
          "143:     pRet->zMatchinfo = ((char*)pRet) + nByte;",
          "144:     memcpy(pRet->zMatchinfo, zMatchinfo, nStr+1);",
          "145:     pRet->aRef[0] = 1;",
          "",
          "[Removed Lines]",
          "141:     pRet->aMatchinfo[1+nElem] = pRet->aMatchinfo[0] + sizeof(u32)*(nElem+1);",
          "142:     pRet->nElem = nElem;",
          "",
          "[Added Lines]",
          "141:     pRet->aMatchinfo[1+nElem] = pRet->aMatchinfo[0]",
          "142:                                       + sizeof(u32)*((int)nElem+1);",
          "143:     pRet->nElem = (int)nElem;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c28c973ad6debd63f13e5d4d3da036f680baaec9d863eda039f2747db9f1cfd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}