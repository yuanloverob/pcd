{
  "cve_id": "CVE-2016-2315",
  "cve_desc": "revision.c in git before 2.7.4 uses an incorrect integer data type, which allows remote attackers to execute arbitrary code via a (1) long filename or (2) many nested trees, leading to a heap-based buffer overflow.",
  "repo": "git/git",
  "patch_hash": "de1e67d0703894cb6ea782e36abb63976ab07e60",
  "patch_info": {
    "commit_hash": "de1e67d0703894cb6ea782e36abb63976ab07e60",
    "repo": "git/git",
    "commit_url": "https://github.com/git/git/commit/de1e67d0703894cb6ea782e36abb63976ab07e60",
    "files": [
      "builtin/pack-objects.c",
      "builtin/rev-list.c",
      "list-objects.c",
      "list-objects.h",
      "pack-bitmap-write.c",
      "pack-bitmap.c",
      "reachable.c",
      "revision.c",
      "revision.h"
    ],
    "message": "list-objects: pass full pathname to callbacks\n\nWhen we find a blob at \"a/b/c\", we currently pass this to\nour show_object_fn callbacks as two components: \"a/b/\" and\n\"c\". Callbacks which want the full value then call\npath_name(), which concatenates the two. But this is an\ninefficient interface; the path is a strbuf, and we could\nsimply append \"c\" to it temporarily, then roll back the\nlength, without creating a new copy.\n\nSo we could improve this by teaching the callsites of\npath_name() this trick (and there are only 3). But we can\nalso notice that no callback actually cares about the\nbroken-down representation, and simply pass each callback\nthe full path \"a/b/c\" as a string. The callback code becomes\neven simpler, then, as we do not have to worry about freeing\nan allocated buffer, nor rolling back our modification to\nthe strbuf.\n\nThis is theoretically less efficient, as some callbacks\nwould not bother to format the final path component. But in\npractice this is not measurable. Since we use the same\nstrbuf over and over, our work to grow it is amortized, and\nwe really only pay to memcpy a few bytes.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
    "before_after_code_files": [
      "builtin/pack-objects.c||builtin/pack-objects.c",
      "builtin/rev-list.c||builtin/rev-list.c",
      "list-objects.c||list-objects.c",
      "list-objects.h||list-objects.h",
      "pack-bitmap-write.c||pack-bitmap-write.c",
      "pack-bitmap.c||pack-bitmap.c",
      "reachable.c||reachable.c",
      "revision.c||revision.c",
      "revision.h||revision.h"
    ]
  },
  "patch_diff": {
    "builtin/pack-objects.c||builtin/pack-objects.c": [
      "File: builtin/pack-objects.c -> builtin/pack-objects.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2284:   index_commit_for_bitmap(commit);",
      "2285: }",
      "2290: {",
      "2293:  add_preferred_base_object(name);",
      "2294:  add_object_entry(obj->oid.hash, obj->type, name, 0);",
      "2295:  obj->flags |= OBJECT_ADDED;",
      "2302: }",
      "2304: static void show_edge(struct commit *commit)",
      "",
      "[Removed Lines]",
      "2287: static void show_object(struct object *obj,",
      "2288:    struct strbuf *path, const char *last,",
      "2289:    void *data)",
      "2291:  char *name = path_name(path, last);",
      "2301:  free((char *)name);",
      "",
      "[Added Lines]",
      "2287: static void show_object(struct object *obj, const char *name, void *data)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2480: }",
      "2482: static void record_recent_object(struct object *obj,",
      "2485:      void *data)",
      "2486: {",
      "2487:  sha1_array_append(&recent_objects, obj->oid.hash);",
      "",
      "[Removed Lines]",
      "2483:      struct strbuf *path,",
      "2484:      const char *last,",
      "",
      "[Added Lines]",
      "2473:      const char *name,",
      "",
      "---------------"
    ],
    "builtin/rev-list.c||builtin/rev-list.c": [
      "File: builtin/rev-list.c -> builtin/rev-list.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:  free_commit_buffer(commit);",
      "178: }",
      "183: {",
      "184:  struct rev_list_info *info = cb_data;",
      "185:  if (obj->type == OBJ_BLOB && !has_object_file(&obj->oid))",
      "",
      "[Removed Lines]",
      "180: static void finish_object(struct object *obj,",
      "181:      struct strbuf *path, const char *name,",
      "182:      void *cb_data)",
      "",
      "[Added Lines]",
      "180: static void finish_object(struct object *obj, const char *name, void *cb_data)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:   parse_object(obj->oid.hash);",
      "189: }",
      "194: {",
      "195:  struct rev_list_info *info = cb_data;",
      "197:  if (info->flags & REV_LIST_QUIET)",
      "198:   return;",
      "200: }",
      "202: static void show_edge(struct commit *commit)",
      "",
      "[Removed Lines]",
      "191: static void show_object(struct object *obj,",
      "192:    struct strbuf *path, const char *component,",
      "193:    void *cb_data)",
      "196:  finish_object(obj, path, component, cb_data);",
      "199:  show_object_with_name(stdout, obj, path, component);",
      "",
      "[Added Lines]",
      "189: static void show_object(struct object *obj, const char *name, void *cb_data)",
      "192:  finish_object(obj, name, cb_data);",
      "195:  show_object_with_name(stdout, obj, name);",
      "",
      "---------------"
    ],
    "list-objects.c||list-objects.c": [
      "File: list-objects.c -> list-objects.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:     void *cb_data)",
      "17: {",
      "18:  struct object *obj = &blob->object;",
      "20:  if (!revs->blob_objects)",
      "21:   return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:  size_t pathlen;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:  if (obj->flags & (UNINTERESTING | SEEN))",
      "25:   return;",
      "26:  obj->flags |= SEEN;",
      "28: }",
      "",
      "[Removed Lines]",
      "27:  show(obj, path, name, cb_data);",
      "",
      "[Added Lines]",
      "29:  pathlen = path->len;",
      "30:  strbuf_addstr(path, name);",
      "31:  show(obj, path->buf, cb_data);",
      "32:  strbuf_setlen(path, pathlen);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "86:  }",
      "88:  obj->flags |= SEEN;",
      "91:  strbuf_addstr(base, name);",
      "92:  if (base->len)",
      "93:   strbuf_addch(base, '/');",
      "",
      "[Removed Lines]",
      "89:  show(obj, base, name, cb_data);",
      "",
      "[Added Lines]",
      "95:  show(obj, base->buf, cb_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "207:    continue;",
      "208:   if (obj->type == OBJ_TAG) {",
      "209:    obj->flags |= SEEN;",
      "211:    continue;",
      "212:   }",
      "213:   if (!path)",
      "",
      "[Removed Lines]",
      "210:    show_object(obj, NULL, name, data);",
      "",
      "[Added Lines]",
      "214:    show_object(obj, name, data);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "219:   }",
      "220:   if (obj->type == OBJ_BLOB) {",
      "221:    process_blob(revs, (struct blob *)obj, show_object,",
      "223:    continue;",
      "224:   }",
      "225:   die(\"unknown pending object %s (%s)\",",
      "",
      "[Removed Lines]",
      "222:          NULL, path, data);",
      "",
      "[Added Lines]",
      "226:          &base, path, data);",
      "",
      "---------------"
    ],
    "list-objects.h||list-objects.h": [
      "File: list-objects.h -> list-objects.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: #define LIST_OBJECTS_H",
      "4: typedef void (*show_commit_fn)(struct commit *, void *);",
      "6: void traverse_commit_list(struct rev_info *, show_commit_fn, show_object_fn, void *);",
      "8: typedef void (*show_edge_fn)(struct commit *);",
      "",
      "[Removed Lines]",
      "5: typedef void (*show_object_fn)(struct object *, struct strbuf *, const char *, void *);",
      "",
      "[Added Lines]",
      "5: typedef void (*show_object_fn)(struct object *, const char *, void *);",
      "",
      "---------------"
    ],
    "pack-bitmap-write.c||pack-bitmap-write.c": [
      "File: pack-bitmap-write.c -> pack-bitmap-write.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "148:  return entry->in_pack_pos;",
      "149: }",
      "153: {",
      "154:  struct bitmap *base = data;",
      "155:  bitmap_set(base, find_object_pos(object->oid.hash));",
      "",
      "[Removed Lines]",
      "151: static void show_object(struct object *object, struct strbuf *path,",
      "152:    const char *last, void *data)",
      "",
      "[Added Lines]",
      "151: static void show_object(struct object *object, const char *name, void *data)",
      "",
      "---------------"
    ],
    "pack-bitmap.c||pack-bitmap.c": [
      "File: pack-bitmap.c -> pack-bitmap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "414:  return bitmap_pos + bitmap_git.pack->num_objects;",
      "415: }",
      "419: {",
      "420:  struct bitmap *base = data;",
      "421:  int bitmap_pos;",
      "423:  bitmap_pos = bitmap_position(object->oid.hash);",
      "427:   bitmap_pos = ext_index_add_object(object, name);",
      "431:  bitmap_set(base, bitmap_pos);",
      "432: }",
      "",
      "[Removed Lines]",
      "417: static void show_object(struct object *object, struct strbuf *path,",
      "418:    const char *last, void *data)",
      "425:  if (bitmap_pos < 0) {",
      "426:   char *name = path_name(path, last);",
      "428:   free(name);",
      "429:  }",
      "",
      "[Added Lines]",
      "417: static void show_object(struct object *object, const char *name, void *data)",
      "424:  if (bitmap_pos < 0)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "894:  size_t seen;",
      "895: };",
      "900: {",
      "901:  struct bitmap_test_data *tdata = data;",
      "902:  int bitmap_pos;",
      "",
      "[Removed Lines]",
      "897: static void test_show_object(struct object *object,",
      "898:         struct strbuf *path,",
      "899:         const char *last, void *data)",
      "",
      "[Added Lines]",
      "893: static void test_show_object(struct object *object, const char *name,",
      "894:         void *data)",
      "",
      "---------------"
    ],
    "reachable.c||reachable.c": [
      "File: reachable.c -> reachable.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: {",
      "49:  update_progress(data);",
      "50: }",
      "52: static void mark_commit(struct commit *c, void *data)",
      "53: {",
      "55: }",
      "57: struct recent_data {",
      "",
      "[Removed Lines]",
      "46: static void mark_object(struct object *obj, struct strbuf *path,",
      "47:    const char *name, void *data)",
      "54:  mark_object(&c->object, NULL, NULL, data);",
      "",
      "[Added Lines]",
      "46: static void mark_object(struct object *obj, const char *name, void *data)",
      "53:  mark_object(&c->object, NULL, data);",
      "",
      "---------------"
    ],
    "revision.c||revision.c": [
      "File: revision.c -> revision.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: static const char *term_bad;",
      "26: static const char *term_good;",
      "29: {",
      "43:  fprintf(out, \"%s \", oid_to_hex(&obj->oid));",
      "44:  for (p = name; *p && *p != '\\n'; p++)",
      "45:   fputc(*p, out);",
      "46:  fputc('\\n', out);",
      "49: }",
      "51: static void mark_blob_uninteresting(struct blob *blob)",
      "",
      "[Removed Lines]",
      "28: char *path_name(struct strbuf *path, const char *name)",
      "30:  struct strbuf ret = STRBUF_INIT;",
      "31:  if (path)",
      "32:   strbuf_addbuf(&ret, path);",
      "33:  strbuf_addstr(&ret, name);",
      "34:  return strbuf_detach(&ret, NULL);",
      "35: }",
      "37: void show_object_with_name(FILE *out, struct object *obj,",
      "38:       struct strbuf *path, const char *component)",
      "39: {",
      "40:  char *name = path_name(path, component);",
      "41:  char *p;",
      "48:  free(name);",
      "",
      "[Added Lines]",
      "28: void show_object_with_name(FILE *out, struct object *obj, const char *name)",
      "30:  const char *p;",
      "",
      "---------------"
    ],
    "revision.h||revision.h": [
      "File: revision.h -> revision.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "260: char *path_name(struct strbuf *path, const char *name);",
      "265: extern void add_pending_object(struct rev_info *revs,",
      "266:           struct object *obj, const char *name);",
      "",
      "[Removed Lines]",
      "262: extern void show_object_with_name(FILE *, struct object *,",
      "263:       struct strbuf *, const char *);",
      "",
      "[Added Lines]",
      "262: extern void show_object_with_name(FILE *, struct object *, const char *);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13528ab37cadb4d4f7384d0449489760912904b8",
      "candidate_info": {
        "commit_hash": "13528ab37cadb4d4f7384d0449489760912904b8",
        "repo": "git/git",
        "commit_url": "https://github.com/git/git/commit/13528ab37cadb4d4f7384d0449489760912904b8",
        "files": [
          "list-objects.c",
          "revision.c",
          "revision.h"
        ],
        "message": "list-objects: convert name_path to a strbuf\n\nThe \"struct name_path\" data is examined in only two places:\nwe generate it in process_tree(), and we convert it to a\nsingle string in path_name(). Everyone else just passes it\nthrough to those functions.\n\nWe can further note that process_tree() already keeps a\nsingle strbuf with the leading tree path, for use with\ntree_entry_interesting().\n\nInstead of building a separate name_path linked list, let's\njust use the one we already build in \"base\". This reduces\nthe amount of code (especially tricky code in path_name()\nwhich did not check for integer overflows caused by deep\nor large pathnames).\n\nIt is also more efficient in some instances.  Any time we\nwere using tree_entry_interesting, we were building up the\nstrbuf anyway, so this is an immediate and obvious win\nthere. In cases where we were not, we trade off storing\n\"pathname/\" in a strbuf on the heap for each level of the\npath, instead of two pointers and an int on the stack (with\none pointer into the tree object). On a 64-bit system, the\nlatter is 20 bytes; so if path components are less than that\non average, this has lower peak memory usage.  In practice\nit probably doesn't matter either way; we are already\nholding in memory all of the tree objects leading up to each\npathname, and for normal-depth pathnames, we are only\ntalking about hundreds of bytes.\n\nThis patch leaves \"struct name_path\" as a thin wrapper\naround the strbuf, to avoid disrupting callbacks. We should\nfix them, but leaving it out makes this diff easier to view.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
        "before_after_code_files": [
          "list-objects.c||list-objects.c",
          "revision.c||revision.c",
          "revision.h||revision.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "list-objects.c||list-objects.c",
            "revision.c||revision.c",
            "revision.h||revision.h"
          ],
          "candidate": [
            "list-objects.c||list-objects.c",
            "revision.c||revision.c",
            "revision.h||revision.h"
          ]
        }
      },
      "candidate_diff": {
        "list-objects.c||list-objects.c": [
          "File: list-objects.c -> list-objects.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: static void process_tree(struct rev_info *revs,",
          "63:     struct tree *tree,",
          "64:     show_object_fn show,",
          "66:     struct strbuf *base,",
          "67:     const char *name,",
          "68:     void *cb_data)",
          "",
          "[Removed Lines]",
          "65:     struct name_path *path,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:    return;",
          "87:   die(\"bad tree object %s\", oid_to_hex(&obj->oid));",
          "88:  }",
          "89:  obj->flags |= SEEN;",
          "101:  init_tree_desc(&desc, tree->buffer, tree->size);",
          "",
          "[Removed Lines]",
          "90:  show(obj, path, name, cb_data);",
          "91:  me.up = path;",
          "92:  me.elem = name;",
          "93:  me.elem_len = strlen(name);",
          "95:  if (!match) {",
          "96:   strbuf_addstr(base, name);",
          "97:   if (base->len)",
          "98:    strbuf_addch(base, '/');",
          "99:  }",
          "",
          "[Added Lines]",
          "90:  me.base = base;",
          "91:  show(obj, &me, name, cb_data);",
          "93:  strbuf_addstr(base, name);",
          "94:  if (base->len)",
          "95:   strbuf_addch(base, '/');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:   if (S_ISDIR(entry.mode))",
          "114:    process_tree(revs,",
          "115:          lookup_tree(entry.sha1),",
          "117:          cb_data);",
          "118:   else if (S_ISGITLINK(entry.mode))",
          "119:    process_gitlink(revs, entry.sha1,",
          "",
          "[Removed Lines]",
          "116:          show, &me, base, entry.path,",
          "",
          "[Added Lines]",
          "112:          show, base, entry.path,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:    path = \"\";",
          "221:   if (obj->type == OBJ_TREE) {",
          "222:    process_tree(revs, (struct tree *)obj, show_object,",
          "224:    continue;",
          "225:   }",
          "226:   if (obj->type == OBJ_BLOB) {",
          "",
          "[Removed Lines]",
          "223:          NULL, &base, path, data);",
          "",
          "[Added Lines]",
          "219:          &base, path, data);",
          "",
          "---------------"
        ],
        "revision.c||revision.c": [
          "File: revision.c -> revision.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: char *path_name(const struct name_path *path, const char *name)",
          "29: {",
          "50: }",
          "52: void show_object_with_name(FILE *out, struct object *obj,",
          "",
          "[Removed Lines]",
          "30:  const struct name_path *p;",
          "31:  char *n, *m;",
          "32:  int nlen = strlen(name);",
          "33:  int len = nlen + 1;",
          "35:  for (p = path; p; p = p->up) {",
          "36:   if (p->elem_len)",
          "37:    len += p->elem_len + 1;",
          "38:  }",
          "39:  n = xmalloc(len);",
          "40:  m = n + len - (nlen + 1);",
          "41:  memcpy(m, name, nlen + 1);",
          "42:  for (p = path; p; p = p->up) {",
          "43:   if (p->elem_len) {",
          "44:    m -= p->elem_len + 1;",
          "45:    memcpy(m, p->elem, p->elem_len);",
          "46:    m[p->elem_len] = '/';",
          "47:   }",
          "48:  }",
          "49:  return n;",
          "",
          "[Added Lines]",
          "30:  struct strbuf ret = STRBUF_INIT;",
          "31:  if (path)",
          "32:   strbuf_addbuf(&ret, path->base);",
          "33:  strbuf_addstr(&ret, name);",
          "34:  return strbuf_detach(&ret, NULL);",
          "",
          "---------------"
        ],
        "revision.h||revision.h": [
          "File: revision.h -> revision.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: extern void mark_tree_uninteresting(struct tree *tree);",
          "260: struct name_path {",
          "264: };",
          "266: char *path_name(const struct name_path *path, const char *name);",
          "",
          "[Removed Lines]",
          "261:  struct name_path *up;",
          "262:  int elem_len;",
          "263:  const char *elem;",
          "",
          "[Added Lines]",
          "261:  struct strbuf *base;",
          "",
          "---------------"
        ]
      }
    }
  ]
}