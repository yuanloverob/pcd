{
  "cve_id": "CVE-2015-0204",
  "cve_desc": "The ssl3_get_key_exchange function in s3_clnt.c in OpenSSL before 0.9.8zd, 1.0.0 before 1.0.0p, and 1.0.1 before 1.0.1k allows remote SSL servers to conduct RSA-to-EXPORT_RSA downgrade attacks and facilitate brute-force decryption by offering a weak ephemeral RSA key in a noncompliant role, related to the \"FREAK\" issue.  NOTE: the scope of this CVE is only client code based on OpenSSL, not EXPORT_RSA issues associated with servers or other TLS implementations.",
  "repo": "openssl/openssl",
  "patch_hash": "ce325c60c74b0fa784f5872404b722e120e5cab0",
  "patch_info": {
    "commit_hash": "ce325c60c74b0fa784f5872404b722e120e5cab0",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/ce325c60c74b0fa784f5872404b722e120e5cab0",
    "files": [
      "CHANGES",
      "doc/ssl/SSL_CTX_set_options.pod",
      "doc/ssl/SSL_CTX_set_tmp_rsa_callback.pod",
      "ssl/d1_srvr.c",
      "ssl/s3_clnt.c",
      "ssl/s3_srvr.c",
      "ssl/ssl.h"
    ],
    "message": "Only allow ephemeral RSA keys in export ciphersuites.\n\nOpenSSL clients would tolerate temporary RSA keys in non-export\nciphersuites. It also had an option SSL_OP_EPHEMERAL_RSA which\nenabled this server side. Remove both options as they are a\nprotocol violation.\n\nThanks to Karthikeyan Bhargavan for reporting this issue.\n(CVE-2015-0204)\nReviewed-by: Matt Caswell <matt@openssl.org>",
    "before_after_code_files": [
      "ssl/d1_srvr.c||ssl/d1_srvr.c",
      "ssl/s3_clnt.c||ssl/s3_clnt.c",
      "ssl/s3_srvr.c||ssl/s3_srvr.c",
      "ssl/ssl.h||ssl/ssl.h"
    ]
  },
  "patch_diff": {
    "ssl/d1_srvr.c||ssl/d1_srvr.c": [
      "File: ssl/d1_srvr.c -> ssl/d1_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "472:   case SSL3_ST_SW_KEY_EXCH_B:",
      "473:    alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
      "495: #ifndef OPENSSL_NO_PSK",
      "",
      "[Removed Lines]",
      "477:    if ((s->options & SSL_OP_EPHEMERAL_RSA)",
      "478: #ifndef OPENSSL_NO_KRB5",
      "479:     && !(alg_k & SSL_kKRB5)",
      "481:     )",
      "486:     s->s3->tmp.use_rsa_tmp=1;",
      "487:    else",
      "488:     s->s3->tmp.use_rsa_tmp=0;",
      "492:    if (s->s3->tmp.use_rsa_tmp",
      "",
      "[Added Lines]",
      "479:    s->s3->tmp.use_rsa_tmp=0;",
      "483:    if (",
      "",
      "---------------"
    ],
    "ssl/s3_clnt.c||ssl/s3_clnt.c": [
      "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1636: #ifndef OPENSSL_NO_RSA",
      "1637:  if (alg_k & SSL_kRSA)",
      "1638:   {",
      "1639:   if ((rsa=RSA_new()) == NULL)",
      "1640:    {",
      "1641:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,ERR_R_MALLOC_FAILURE);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1640:   if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher))",
      "1641:    {",
      "1642:    al=SSL_AD_UNEXPECTED_MESSAGE;",
      "1643:    SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE,SSL_R_UNEXPECTED_MESSAGE);",
      "1644:    goto f_err;",
      "1645:    }",
      "",
      "---------------"
    ],
    "ssl/s3_srvr.c||ssl/s3_srvr.c": [
      "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "453:   case SSL3_ST_SW_KEY_EXCH_B:",
      "454:    alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
      "",
      "[Removed Lines]",
      "458:    if ((s->options & SSL_OP_EPHEMERAL_RSA)",
      "459: #ifndef OPENSSL_NO_KRB5",
      "460:     && !(alg_k & SSL_kKRB5)",
      "462:     )",
      "467:     s->s3->tmp.use_rsa_tmp=1;",
      "468:    else",
      "469:     s->s3->tmp.use_rsa_tmp=0;",
      "",
      "[Added Lines]",
      "460:    s->s3->tmp.use_rsa_tmp=0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "486: #ifndef OPENSSL_NO_PSK",
      "",
      "[Removed Lines]",
      "483:    if (s->s3->tmp.use_rsa_tmp",
      "",
      "[Added Lines]",
      "474:    if (",
      "",
      "---------------"
    ],
    "ssl/ssl.h||ssl/ssl.h": [
      "File: ssl/ssl.h -> ssl/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "606: #define SSL_OP_SINGLE_ECDH_USE    0x00080000L",
      "608: #define SSL_OP_SINGLE_DH_USE    0x00100000L",
      "614: #define SSL_OP_CIPHER_SERVER_PREFERENCE   0x00400000L",
      "",
      "[Removed Lines]",
      "611: #define SSL_OP_EPHEMERAL_RSA    0x00200000L",
      "",
      "[Added Lines]",
      "610: #define SSL_OP_EPHEMERAL_RSA    0x0",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb76ad8d43e37b399f22932c8ccc85578fcdf7b5",
      "candidate_info": {
        "commit_hash": "fb76ad8d43e37b399f22932c8ccc85578fcdf7b5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fb76ad8d43e37b399f22932c8ccc85578fcdf7b5",
        "files": [
          "ssl/d1_srvr.c",
          "ssl/s3_srvr.c"
        ],
        "message": "fix compilation error\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_srvr.c||ssl/d1_srvr.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_srvr.c||ssl/d1_srvr.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/d1_srvr.c||ssl/d1_srvr.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_srvr.c||ssl/d1_srvr.c": [
          "File: ssl/d1_srvr.c -> ssl/d1_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "483:    if (",
          "",
          "[Added Lines]",
          "483:    if (0",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "474:    if (",
          "",
          "[Added Lines]",
          "474:    if (0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a4d4158572fd8b3dc641851b8378e791df7972d",
      "candidate_info": {
        "commit_hash": "4a4d4158572fd8b3dc641851b8378e791df7972d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4a4d4158572fd8b3dc641851b8378e791df7972d",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "fix error discrepancy\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1640:   if (!SSL_C_IS_EXPORT(s->s3->tmp.new_cipher))",
          "1641:    {",
          "1642:    al=SSL_AD_UNEXPECTED_MESSAGE;",
          "1644:    goto f_err;",
          "1645:    }",
          "1646:   if ((rsa=RSA_new()) == NULL)",
          "",
          "[Removed Lines]",
          "1643:    SSLerr(SSL_F_SSL3_GET_SERVER_CERTIFICATE,SSL_R_UNEXPECTED_MESSAGE);",
          "",
          "[Added Lines]",
          "1643:    SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,SSL_R_UNEXPECTED_MESSAGE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
      "candidate_info": {
        "commit_hash": "8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8098fc566351cb76a2c5ad4f465df51f5e7e8c12",
        "files": [
          "ssl/s3_clnt.c"
        ],
        "message": "PACKETise ServerKeyExchange\n\nProcess the ServerKeyExchange message using the PACKET API\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1444:     unsigned char *q, md_buf[EVP_MAX_MD_SIZE * 2];",
          "1445: #endif",
          "1446:     EVP_MD_CTX md_ctx;",
          "1450:     EVP_PKEY *pkey = NULL;",
          "1451:     const EVP_MD *md = NULL;",
          "1452: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "1447:     unsigned char *param, *p;",
          "1448:     int al, j, ok;",
          "1449:     long i, param_len, n, alg_k, alg_a;",
          "",
          "[Added Lines]",
          "1447:     int al, j, verify_ret, ok;",
          "1448:     unsigned int i;",
          "1449:     long n, alg_k, alg_a;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1460:     BN_CTX *bn_ctx = NULL;",
          "1461:     EC_POINT *srvr_ecpoint = NULL;",
          "1462:     int curve_nid = 0;",
          "1464: #endif",
          "1466:     EVP_MD_CTX_init(&md_ctx);",
          "",
          "[Removed Lines]",
          "1463:     int encoded_pt_len = 0;",
          "",
          "[Added Lines]",
          "1463:     unsigned int encoded_pt_len = 0;",
          "1465:     PACKET pkt;",
          "1466:     unsigned char *data, *param;",
          "1467:     size_t startparam, endparam;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1493:         return (1);",
          "1494:     }",
          "1498: #ifndef OPENSSL_NO_RSA",
          "1499:     RSA_free(s->s3->peer_rsa_tmp);",
          "",
          "[Removed Lines]",
          "1496:     param = p = (unsigned char *)s->init_msg;",
          "",
          "[Added Lines]",
          "1499:     if (!PACKET_buf_init(&pkt, s->init_msg, n)",
          "1500:             || !PACKET_get_bookmark(&pkt, &startparam)) {",
          "1501:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1502:             al = SSL_AD_INTERNAL_ERROR;",
          "1503:             goto f_err;",
          "1504:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1508:     s->s3->peer_ecdh_tmp = NULL;",
          "1509: #endif",
          "1514:     alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "1516:     al = SSL_AD_DECODE_ERROR;",
          "",
          "[Removed Lines]",
          "1512:     param_len = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1520:     if (alg_k & SSL_PSK) {",
          "1524:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1525:             goto f_err;",
          "1526:         }",
          "",
          "[Removed Lines]",
          "1522:         param_len = 2;",
          "1523:         if (param_len > n) {",
          "1527:         n2s(p, i);",
          "",
          "[Added Lines]",
          "1527:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1537:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_DATA_LENGTH_TOO_LONG);",
          "1538:             goto f_err;",
          "1539:         }",
          "1541:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1542:                    SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH);",
          "1543:             goto f_err;",
          "1544:         }",
          "1547:         OPENSSL_free(s->session->psk_identity_hint);",
          "1548:         if (i != 0) {",
          "1550:             if (s->session->psk_identity_hint == NULL) {",
          "1551:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1552:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "1540:         if (i > n - param_len) {",
          "1545:         param_len += i;",
          "1549:             s->session->psk_identity_hint = BUF_strndup((char *)p, i);",
          "",
          "[Added Lines]",
          "1543:         if (PACKET_remaining(&pkt) < i) {",
          "1551:             unsigned char *hint = NULL;",
          "1553:             if (!PACKET_get_bytes(&pkt, &hint, i)) {",
          "1554:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1555:                 goto f_err;",
          "1556:             }",
          "1557:             s->session->psk_identity_hint = BUF_strndup((char *)hint, i);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1555:         } else {",
          "1556:             s->session->psk_identity_hint = NULL;",
          "1557:         }",
          "1561:     }",
          "",
          "[Removed Lines]",
          "1559:         p += i;",
          "1560:         n -= param_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1567: #ifndef OPENSSL_NO_SRP",
          "1568:     if (alg_k & SSL_kSRP) {",
          "1571:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1572:             goto f_err;",
          "1573:         }",
          "1577:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_N_LENGTH);",
          "1578:             goto f_err;",
          "1579:         }",
          "1583:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1584:             goto err;",
          "1585:         }",
          "1589:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1590:             goto f_err;",
          "1591:         }",
          "1597:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_G_LENGTH);",
          "1598:             goto f_err;",
          "1599:         }",
          "1603:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1604:             goto err;",
          "1605:         }",
          "1609:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1610:             goto f_err;",
          "1611:         }",
          "1618:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_S_LENGTH);",
          "1619:             goto f_err;",
          "1620:         }",
          "1624:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1625:             goto err;",
          "1626:         }",
          "1630:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1631:             goto f_err;",
          "1632:         }",
          "1638:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_B_LENGTH);",
          "1639:             goto f_err;",
          "1640:         }",
          "1644:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1645:             goto err;",
          "1646:         }",
          "1650:         if (!srp_verify_server_param(s, &al)) {",
          "1651:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SRP_PARAMETERS);",
          "",
          "[Removed Lines]",
          "1569:         param_len = 2;",
          "1570:         if (param_len > n) {",
          "1574:         n2s(p, i);",
          "1576:         if (i > n - param_len) {",
          "1580:         param_len += i;",
          "1582:         if ((s->srp_ctx.N = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1586:         p += i;",
          "1588:         if (2 > n - param_len) {",
          "1592:         param_len += 2;",
          "1594:         n2s(p, i);",
          "1596:         if (i > n - param_len) {",
          "1600:         param_len += i;",
          "1602:         if ((s->srp_ctx.g = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1606:         p += i;",
          "1608:         if (1 > n - param_len) {",
          "1612:         param_len += 1;",
          "1614:         i = (unsigned int)(p[0]);",
          "1615:         p++;",
          "1617:         if (i > n - param_len) {",
          "1621:         param_len += i;",
          "1623:         if ((s->srp_ctx.s = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1627:         p += i;",
          "1629:         if (2 > n - param_len) {",
          "1633:         param_len += 2;",
          "1635:         n2s(p, i);",
          "1637:         if (i > n - param_len) {",
          "1641:         param_len += i;",
          "1643:         if ((s->srp_ctx.B = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1647:         p += i;",
          "1648:         n -= param_len;",
          "",
          "[Added Lines]",
          "1574:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1579:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1584:         if ((s->srp_ctx.N = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1589:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1594:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1599:         if ((s->srp_ctx.g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1604:         if (!PACKET_get_1(&pkt, &i)) {",
          "1609:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1614:         if ((s->srp_ctx.s = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1619:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1624:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1629:         if ((s->srp_ctx.B = BN_bin2bn(data, i, NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1670:             goto err;",
          "1671:         }",
          "1675:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1676:             goto f_err;",
          "1677:         }",
          "1681:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_MODULUS_LENGTH);",
          "1682:             goto f_err;",
          "1683:         }",
          "1687:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1688:             goto err;",
          "1689:         }",
          "1693:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1694:             goto f_err;",
          "1695:         }",
          "1701:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_E_LENGTH);",
          "1702:             goto f_err;",
          "1703:         }",
          "1707:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1708:             goto err;",
          "1709:         }",
          "1714:         if (alg_a & SSL_aRSA)",
          "",
          "[Removed Lines]",
          "1673:         param_len = 2;",
          "1674:         if (param_len > n) {",
          "1678:         n2s(p, i);",
          "1680:         if (i > n - param_len) {",
          "1684:         param_len += i;",
          "1686:         if ((rsa->n = BN_bin2bn(p, i, rsa->n)) == NULL) {",
          "1690:         p += i;",
          "1692:         if (2 > n - param_len) {",
          "1696:         param_len += 2;",
          "1698:         n2s(p, i);",
          "1700:         if (i > n - param_len) {",
          "1704:         param_len += i;",
          "1706:         if ((rsa->e = BN_bin2bn(p, i, rsa->e)) == NULL) {",
          "1710:         p += i;",
          "1711:         n -= param_len;",
          "",
          "[Added Lines]",
          "1657:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1662:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1667:         if ((rsa->n = BN_bin2bn(data, i, rsa->n)) == NULL) {",
          "1672:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1677:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1682:         if ((rsa->e = BN_bin2bn(data, i, rsa->e)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1737:             goto err;",
          "1738:         }",
          "1742:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1743:             goto f_err;",
          "1744:         }",
          "1748:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_LENGTH);",
          "1749:             goto f_err;",
          "1750:         }",
          "1754:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1755:             goto err;",
          "1756:         }",
          "1759:         if (BN_is_zero(dh->p)) {",
          "1760:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_P_VALUE);",
          "1761:             goto f_err;",
          "1762:         }",
          "1766:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1767:             goto f_err;",
          "1768:         }",
          "1774:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_LENGTH);",
          "1775:             goto f_err;",
          "1776:         }",
          "1780:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1781:             goto err;",
          "1782:         }",
          "1785:         if (BN_is_zero(dh->g)) {",
          "1786:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_G_VALUE);",
          "1787:             goto f_err;",
          "1788:         }",
          "1791:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1792:             goto f_err;",
          "1793:         }",
          "1799:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_LENGTH);",
          "1800:             goto f_err;",
          "1801:         }",
          "1805:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_BN_LIB);",
          "1806:             goto err;",
          "1807:         }",
          "1811:         if (BN_is_zero(dh->pub_key)) {",
          "1812:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_DH_PUB_KEY_VALUE);",
          "",
          "[Removed Lines]",
          "1740:         param_len = 2;",
          "1741:         if (param_len > n) {",
          "1745:         n2s(p, i);",
          "1747:         if (i > n - param_len) {",
          "1751:         param_len += i;",
          "1753:         if ((dh->p = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1757:         p += i;",
          "1765:         if (2 > n - param_len) {",
          "1769:         param_len += 2;",
          "1771:         n2s(p, i);",
          "1773:         if (i > n - param_len) {",
          "1777:         param_len += i;",
          "1779:         if ((dh->g = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1783:         p += i;",
          "1790:         if (2 > n - param_len) {",
          "1794:         param_len += 2;",
          "1796:         n2s(p, i);",
          "1798:         if (i > n - param_len) {",
          "1802:         param_len += i;",
          "1804:         if ((dh->pub_key = BN_bin2bn(p, i, NULL)) == NULL) {",
          "1808:         p += i;",
          "1809:         n -= param_len;",
          "",
          "[Added Lines]",
          "1714:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1719:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1724:         if ((dh->p = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1734:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1739:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1744:         if ((dh->g = BN_bin2bn(data, i, NULL)) == NULL) {",
          "1754:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1759:         if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "1764:         if ((dh->pub_key = BN_bin2bn(data, i, NULL)) == NULL) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1853:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1854:             goto f_err;",
          "1855:         }",
          "",
          "[Removed Lines]",
          "1851:         param_len = 4;",
          "1852:         if (param_len > n) {",
          "",
          "[Added Lines]",
          "1808:         if (!PACKET_get_bytes(&pkt, &data, 3)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1861:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_CURVE);",
          "1862:             goto f_err;",
          "1863:         }",
          "1866:             al = SSL_AD_INTERNAL_ERROR;",
          "1867:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,",
          "1868:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "",
          "[Removed Lines]",
          "1860:         if (!tls1_check_curve(s, p, 3)) {",
          "1865:         if ((curve_nid = tls1_ec_curve_id2nid(*(p + 2))) == 0) {",
          "",
          "[Added Lines]",
          "1816:         if (!tls1_check_curve(s, data, 3)) {",
          "1821:         if ((curve_nid = tls1_ec_curve_id2nid(*(data + 2))) == 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1890:             goto f_err;",
          "1891:         }",
          "1896:         if (((srvr_ecpoint = EC_POINT_new(group)) == NULL) ||",
          "1897:             ((bn_ctx = BN_CTX_new()) == NULL)) {",
          "",
          "[Removed Lines]",
          "1893:         p += 3;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1899:             goto err;",
          "1900:         }",
          "1906:             (EC_POINT_oct2point(group, srvr_ecpoint,",
          "1908:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_ECPOINT);",
          "1909:             goto f_err;",
          "1910:         }",
          "",
          "[Removed Lines]",
          "1903:         p += 1;",
          "1905:         if ((encoded_pt_len > n - param_len) ||",
          "1907:                                 p, encoded_pt_len, bn_ctx) == 0)) {",
          "1911:         param_len += encoded_pt_len;",
          "1913:         n -= param_len;",
          "1914:         p += encoded_pt_len;",
          "",
          "[Added Lines]",
          "1856:         if (!PACKET_get_1(&pkt, &encoded_pt_len)) {",
          "1857:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1858:             goto f_err;",
          "1859:         }",
          "1861:         if (!PACKET_get_bytes(&pkt, &data, encoded_pt_len) ||",
          "1863:                                 data, encoded_pt_len, bn_ctx) == 0)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1942:     }",
          "1948:     if (pkey != NULL) {",
          "1949:         if (SSL_USE_SIGALGS(s)) {",
          "1950:             int rv;",
          "1952:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1953:                 goto f_err;",
          "1954:             }",
          "1956:             if (rv == -1)",
          "1957:                 goto err;",
          "1958:             else if (rv == 0) {",
          "",
          "[Removed Lines]",
          "1951:             if (2 > n) {",
          "1955:             rv = tls12_check_peer_sigalg(&md, s, p, pkey);",
          "",
          "[Added Lines]",
          "1897:     if (!PACKET_get_bookmark(&pkt, &endparam)) {",
          "1898:         SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1899:         goto f_err;",
          "1900:     }",
          "1906:             if (!PACKET_get_bytes(&pkt, &data, 2)) {",
          "1910:             rv = tls12_check_peer_sigalg(&md, s, data, pkey);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1961: #ifdef SSL_DEBUG",
          "1962:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "1963: #endif",
          "1966:         } else",
          "1967:             md = EVP_sha1();",
          "1970:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1971:             goto f_err;",
          "1972:         }",
          "1975:         j = EVP_PKEY_size(pkey);",
          "1982:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_WRONG_SIGNATURE_LENGTH);",
          "1983:             goto f_err;",
          "1984:         }",
          "1985: #ifndef OPENSSL_NO_RSA",
          "1986:         if (pkey->type == EVP_PKEY_RSA && !SSL_USE_SIGALGS(s)) {",
          "1987:             int num;",
          "",
          "[Removed Lines]",
          "1964:             p += 2;",
          "1965:             n -= 2;",
          "1969:         if (2 > n) {",
          "1973:         n2s(p, i);",
          "1974:         n -= 2;",
          "1980:         if ((i != n) || (n > j) || (n <= 0)) {",
          "",
          "[Added Lines]",
          "1922:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "1927:         if (j < 0) {",
          "1928:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1929:             goto f_err;",
          "1930:         }",
          "1935:         if (i > (unsigned int)j",
          "1936:                 || !PACKET_get_bytes(&pkt, &data, i)",
          "1937:                 || PACKET_remaining(&pkt) != 0) {",
          "1942:         if (!PACKET_goto_bookmark(&pkt, startparam)",
          "1943:                 || !PACKET_get_bytes(&pkt, &param, endparam - startparam)) {",
          "1944:             al = SSL_AD_INTERNAL_ERROR;",
          "1945:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1946:             goto f_err;",
          "1947:         }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1997:                                  SSL3_RANDOM_SIZE);",
          "1998:                 EVP_DigestUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "1999:                                  SSL3_RANDOM_SIZE);",
          "2001:                 EVP_DigestFinal_ex(&md_ctx, q, &size);",
          "2002:                 q += size;",
          "2003:                 j += size;",
          "2004:             }",
          "2007:                 al = SSL_AD_DECRYPT_ERROR;",
          "2008:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_RSA_DECRYPT);",
          "2009:                 goto f_err;",
          "2010:             }",
          "2013:                 al = SSL_AD_DECRYPT_ERROR;",
          "2014:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Removed Lines]",
          "2000:                 EVP_DigestUpdate(&md_ctx, param, param_len);",
          "2005:             i = RSA_verify(NID_md5_sha1, md_buf, j, p, n, pkey->pkey.rsa);",
          "2006:             if (i < 0) {",
          "2011:             if (i == 0) {",
          "",
          "[Added Lines]",
          "1963:                 EVP_DigestUpdate(&md_ctx, param, endparam - startparam);",
          "1968:             verify_ret =",
          "1969:                 RSA_verify(NID_md5_sha1, md_buf, j, data, i, pkey->pkey.rsa);",
          "1970:             if (verify_ret < 0) {",
          "1975:             if (verify_ret == 0) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2022:                              SSL3_RANDOM_SIZE);",
          "2023:             EVP_VerifyUpdate(&md_ctx, &(s->s3->server_random[0]),",
          "2024:                              SSL3_RANDOM_SIZE);",
          "2028:                 al = SSL_AD_DECRYPT_ERROR;",
          "2029:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_BAD_SIGNATURE);",
          "",
          "[Removed Lines]",
          "2025:             EVP_VerifyUpdate(&md_ctx, param, param_len);",
          "2026:             if (EVP_VerifyFinal(&md_ctx, p, (int)n, pkey) <= 0) {",
          "",
          "[Added Lines]",
          "1989:             EVP_VerifyUpdate(&md_ctx, param, endparam - startparam);",
          "1990:             if (EVP_VerifyFinal(&md_ctx, data, (int)i, pkey) <= 0) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2040:             goto err;",
          "2041:         }",
          "2044:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);",
          "2045:             goto f_err;",
          "2046:         }",
          "",
          "[Removed Lines]",
          "2043:         if (n != 0) {",
          "",
          "[Added Lines]",
          "2007:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a273c6eeee6690d7061d3e647a5e648bbd3a997a",
      "candidate_info": {
        "commit_hash": "a273c6eeee6690d7061d3e647a5e648bbd3a997a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a273c6eeee6690d7061d3e647a5e648bbd3a997a",
        "files": [
          "ssl/s3_clnt.c",
          "ssl/ssl_cert.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Remove certificates from sess_cert\n\nAs numerous comments indicate the certificate and key array is not an\nappopriate structure to store the peers certificate: so remove it and\njust the s->session->peer instead.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/ssl_cert.c||ssl/ssl_cert.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1367:                SSL_R_WRONG_CERTIFICATE_TYPE);",
          "1368:         goto f_err;",
          "1369:     }",
          "1380:     X509_free(s->session->peer);",
          "1381:     CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "",
          "[Removed Lines]",
          "1370:     sc->peer_cert_type = i;",
          "1371:     CRYPTO_add(&x->references, 1, CRYPTO_LOCK_X509);",
          "1376:     X509_free(sc->peer_pkeys[i].x509);",
          "1377:     sc->peer_pkeys[i].x509 = x;",
          "1378:     sc->peer_key = &(sc->peer_pkeys[i]);",
          "",
          "[Added Lines]",
          "1370:     s->session->peer_type = i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1628: # ifndef OPENSSL_NO_RSA",
          "1629:         if (alg_a & SSL_aRSA)",
          "1633: # else",
          "1634:         if (0) ;",
          "1635: # endif",
          "1636: # ifndef OPENSSL_NO_DSA",
          "1637:         else if (alg_a & SSL_aDSS)",
          "1642: # endif",
          "1643:     } else",
          "",
          "[Removed Lines]",
          "1630:             pkey =",
          "1631:                 X509_get_pubkey(s->session->",
          "1632:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "1638:             pkey =",
          "1639:                 X509_get_pubkey(s->session->",
          "1640:                                 sess_cert->peer_pkeys[SSL_PKEY_DSA_SIGN].",
          "1641:                                 x509);",
          "",
          "[Added Lines]",
          "1622:             pkey = X509_get_pubkey(s->session->peer);",
          "1628:             pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1699:         if (alg_a & SSL_aRSA)",
          "1703:         else {",
          "1704:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1705:             goto err;",
          "",
          "[Removed Lines]",
          "1700:             pkey =",
          "1701:                 X509_get_pubkey(s->session->",
          "1702:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "",
          "[Added Lines]",
          "1687:             pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1791:         }",
          "1792: # ifndef OPENSSL_NO_RSA",
          "1793:         if (alg_a & SSL_aRSA)",
          "1797: # else",
          "1798:         if (0) ;",
          "1799: # endif",
          "1800: # ifndef OPENSSL_NO_DSA",
          "1801:         else if (alg_a & SSL_aDSS)",
          "1806: # endif",
          "",
          "[Removed Lines]",
          "1794:             pkey =",
          "1795:                 X509_get_pubkey(s->session->",
          "1796:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "1802:             pkey =",
          "1803:                 X509_get_pubkey(s->session->",
          "1804:                                 sess_cert->peer_pkeys[SSL_PKEY_DSA_SIGN].",
          "1805:                                 x509);",
          "",
          "[Added Lines]",
          "1779:             pkey = X509_get_pubkey(s->session->peer);",
          "1785:             pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1905:         if (0) ;",
          "1906: # ifndef OPENSSL_NO_RSA",
          "1907:         else if (alg_a & SSL_aRSA)",
          "1911: # endif",
          "1912: # ifndef OPENSSL_NO_EC",
          "1913:         else if (alg_a & SSL_aECDSA)",
          "1917: # endif",
          "1919:         EC_KEY_set_public_key(ecdh, srvr_ecpoint);",
          "",
          "[Removed Lines]",
          "1908:             pkey =",
          "1909:                 X509_get_pubkey(s->session->",
          "1910:                                 sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].x509);",
          "1914:             pkey =",
          "1915:                 X509_get_pubkey(s->session->",
          "1916:                                 sess_cert->peer_pkeys[SSL_PKEY_ECC].x509);",
          "",
          "[Added Lines]",
          "1888:             pkey = X509_get_pubkey(s->session->peer);",
          "1892:             pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2449:             if (s->s3->peer_rsa_tmp != NULL)",
          "2450:                 rsa = s->s3->peer_rsa_tmp;",
          "2451:             else {",
          "2456:                 if ((pkey == NULL) || (pkey->type != EVP_PKEY_RSA)",
          "2457:                     || (pkey->pkey.rsa == NULL)) {",
          "2458:                     SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "",
          "[Removed Lines]",
          "2452:                 pkey =",
          "2453:                     X509_get_pubkey(s->session->",
          "2454:                                     sess_cert->peer_pkeys[SSL_PKEY_RSA_ENC].",
          "2455:                                     x509);",
          "",
          "[Added Lines]",
          "2428:                 pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2508:                 dh_srvr = s->s3->peer_dh_tmp;",
          "2509:             else {",
          "2512:                 EVP_PKEY *spkey = NULL;",
          "2513:                 dh_srvr = NULL;",
          "2516:                 if (spkey) {",
          "2517:                     dh_srvr = EVP_PKEY_get1_DH(spkey);",
          "2518:                     EVP_PKEY_free(spkey);",
          "",
          "[Removed Lines]",
          "2511:                 int idx = scert->peer_cert_type;",
          "2514:                 if (idx >= 0)",
          "2515:                     spkey = X509_get_pubkey(scert->peer_pkeys[idx].x509);",
          "",
          "[Added Lines]",
          "2486:                 spkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2628:                 tkey = s->s3->peer_ecdh_tmp;",
          "2629:             } else {",
          "2634:                 if ((srvr_pub_pkey == NULL)",
          "2635:                     || (srvr_pub_pkey->type != EVP_PKEY_EC)",
          "2636:                     || (srvr_pub_pkey->pkey.ec == NULL)) {",
          "",
          "[Removed Lines]",
          "2631:                 srvr_pub_pkey =",
          "2632:                     X509_get_pubkey(s->session->",
          "2633:                                     sess_cert->peer_pkeys[SSL_PKEY_ECC].x509);",
          "",
          "[Added Lines]",
          "2602:                 srvr_pub_pkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2758:             X509 *peer_cert;",
          "2759:             size_t msglen;",
          "2760:             unsigned int md_len;",
          "2762:             unsigned char shared_ukm[32], tmp[256];",
          "2763:             EVP_MD_CTX *ukm_hash;",
          "2764:             EVP_PKEY *pub_key;",
          "",
          "[Removed Lines]",
          "2761:             int keytype;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2781:             if (!peer_cert) {",
          "2782:                 SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,",
          "2783:                        SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER);",
          "",
          "[Removed Lines]",
          "2774:             peer_cert =",
          "2775:                 s->session->",
          "2776:                 sess_cert->peer_pkeys[(keytype = SSL_PKEY_GOST01)].x509;",
          "2777:             if (!peer_cert)",
          "2778:                 peer_cert =",
          "2779:                     s->session->",
          "2780:                     sess_cert->peer_pkeys[(keytype = SSL_PKEY_GOST94)].x509;",
          "",
          "[Added Lines]",
          "2742:             peer_cert = s->session->peer;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3218:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "3220:     if (alg_k & (SSL_kDHr | SSL_kDHd)) {",
          "3223:         EVP_PKEY *clkey = NULL, *spkey = NULL;",
          "3224:         clkey = s->cert->key->privatekey;",
          "3226:         if (EVP_PKEY_id(clkey) != EVP_PKEY_DH)",
          "3227:             return 1;",
          "3228:         if (i >= 0)",
          "3230:         if (spkey) {",
          "3232:             i = EVP_PKEY_cmp_parameters(clkey, spkey);",
          "",
          "[Removed Lines]",
          "3221:         SESS_CERT *scert = s->session->sess_cert;",
          "3222:         int i = scert->peer_cert_type;",
          "3229:             spkey = X509_get_pubkey(scert->peer_pkeys[i].x509);",
          "",
          "[Added Lines]",
          "3183:         int i = s->session->peer_type;",
          "3190:             spkey = X509_get_pubkey(s->session->peer);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3369: #ifndef OPENSSL_NO_EC",
          "3370:     if (idx == SSL_PKEY_ECC) {",
          "3373:             SSLerr(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM, SSL_R_BAD_ECC_CERT);",
          "3374:             goto f_err;",
          "",
          "[Removed Lines]",
          "3368:     idx = sc->peer_cert_type;",
          "3371:         if (ssl_check_srvr_ecc_cert_and_alg(sc->peer_pkeys[idx].x509, s) == 0) {",
          "",
          "[Added Lines]",
          "3329:     idx = s->session->peer_type;",
          "3332:         if (ssl_check_srvr_ecc_cert_and_alg(s->session->peer, s) == 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3384:         goto f_err;",
          "3385:     }",
          "3386: #endif",
          "3388:     pkey_bits = EVP_PKEY_bits(pkey);",
          "3390:     EVP_PKEY_free(pkey);",
          "",
          "[Removed Lines]",
          "3387:     pkey = X509_get_pubkey(sc->peer_pkeys[idx].x509);",
          "3389:     i = X509_certificate_type(sc->peer_pkeys[idx].x509, pkey);",
          "",
          "[Added Lines]",
          "3348:     pkey = X509_get_pubkey(s->session->peer);",
          "3350:     i = X509_certificate_type(s->session->peer, pkey);",
          "",
          "---------------"
        ],
        "ssl/ssl_cert.c||ssl/ssl_cert.c": [
          "File: ssl/ssl_cert.c -> ssl/ssl_cert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:     }",
          "532:     memset(ret, 0, sizeof(*ret));",
          "534:     ret->references = 1;",
          "536:     return ret;",
          "",
          "[Removed Lines]",
          "533:     ret->peer_key = &(ret->peer_pkeys[SSL_PKEY_RSA_ENC]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "560:     sk_X509_pop_free(sc->cert_chain, X509_free);",
          "573:     OPENSSL_free(sc);",
          "574: }",
          "582: int ssl_verify_cert_chain(SSL *s, STACK_OF(X509) *sk)",
          "583: {",
          "584:     X509 *x;",
          "",
          "[Removed Lines]",
          "561:     for (i = 0; i < SSL_PKEY_NUM; i++) {",
          "562:         X509_free(sc->peer_pkeys[i].x509);",
          "563: #if 0",
          "569:         EVP_PKEY_free(sc->peer_pkeys[i].privatekey);",
          "570: #endif",
          "571:     }",
          "576: int ssl_set_peer_cert_type(SESS_CERT *sc, int type)",
          "577: {",
          "578:     sc->peer_cert_type = type;",
          "579:     return (1);",
          "580: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "626:     int not_resumable;",
          "628:     struct sess_cert_st /* SESS_CERT */ *sess_cert;",
          "635:     X509 *peer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "631:     int peer_type;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1593: typedef struct sess_cert_st {",
          "1605: } SESS_CERT;",
          "",
          "[Removed Lines]",
          "1596:     int peer_cert_type;",
          "1597:     CERT_PKEY *peer_key;        /* points to an element of peer_pkeys (never",
          "1599:     CERT_PKEY peer_pkeys[SSL_PKEY_NUM];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1859: void ssl_cert_free(CERT *c);",
          "1860: __owur SESS_CERT *ssl_sess_cert_new(void);",
          "1861: void ssl_sess_cert_free(SESS_CERT *sc);",
          "1863: __owur int ssl_get_new_session(SSL *s, int session);",
          "1864: __owur int ssl_get_prev_session(SSL *s, unsigned char *session, int len,",
          "1865:                          const unsigned char *limit);",
          "",
          "[Removed Lines]",
          "1862: __owur int ssl_set_peer_cert_type(SESS_CERT *c, int type);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73999b62a27d9ac7c10ff27d79fd2bab97f97670",
      "candidate_info": {
        "commit_hash": "73999b62a27d9ac7c10ff27d79fd2bab97f97670",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/73999b62a27d9ac7c10ff27d79fd2bab97f97670",
        "files": [
          "include/openssl/ssl.h",
          "ssl/d1_clnt.c",
          "ssl/s3_both.c",
          "ssl/s3_clnt.c",
          "ssl/s3_srvr.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem.c"
        ],
        "message": "Move PACKET creation into the state machine\n\nPreviously each message specific process function would create its own\nPACKET structure. Rather than duplicate all of this code lots of times we\nshould create it in the state machine itself.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/d1_clnt.c||ssl/d1_clnt.c",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_clnt.c||ssl/s3_clnt.c",
          "ssl/s3_srvr.c||ssl/s3_srvr.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem.c||ssl/statem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ],
          "candidate": [
            "ssl/s3_clnt.c||ssl/s3_clnt.c",
            "ssl/s3_srvr.c||ssl/s3_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1985: # define SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC          371",
          "1986: # define SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST        385",
          "1987: # define SSL_F_DTLS_GET_REASSEMBLED_MESSAGE               370",
          "1988: # define SSL_F_READ_STATE_MACHINE                         352",
          "1989: # define SSL_F_SSL3_ACCEPT                                128",
          "1990: # define SSL_F_SSL3_ADD_CERT_TO_BUF                       296",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1988: # define SSL_F_DTLS_PROCESS_HELLO_VERIFY                  386",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2300: # define SSL_R_INVALID_TICKET_KEYS_LENGTH                 325",
          "2301: # define SSL_R_INVALID_TRUST                              279",
          "2302: # define SSL_R_LENGTH_MISMATCH                            159",
          "2303: # define SSL_R_LENGTH_TOO_SHORT                           160",
          "2304: # define SSL_R_LIBRARY_BUG                                274",
          "2305: # define SSL_R_LIBRARY_HAS_NO_CIPHERS                     161",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2304: # define SSL_R_LENGTH_TOO_LONG                            102",
          "",
          "---------------"
        ],
        "ssl/d1_clnt.c||ssl/d1_clnt.c": [
          "File: ssl/d1_clnt.c -> ssl/d1_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:                           dtls1_get_client_method, DTLSv1_2_enc_data)",
          "160: {",
          "161:     int al;",
          "163:     unsigned int cookie_len;",
          "169:     if (cookie_len > sizeof(s->d1->cookie)) {",
          "170:         al = SSL_AD_ILLEGAL_PARAMETER;",
          "171:         goto f_err;",
          "172:     }",
          "175:     s->d1->cookie_len = cookie_len;",
          "177:     return MSG_PROCESS_FINISHED_READING;",
          "",
          "[Removed Lines]",
          "159: enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, unsigned long n)",
          "162:     unsigned char *data;",
          "165:     data = (unsigned char *)s->init_msg;",
          "166:     data += 2;",
          "168:     cookie_len = *(data++);",
          "174:     memcpy(s->d1->cookie, data, cookie_len);",
          "",
          "[Added Lines]",
          "159: enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, PACKET *pkt)",
          "163:     PACKET cookiepkt;",
          "165:     if (!PACKET_forward(pkt, 2)",
          "166:             || !PACKET_get_length_prefixed_1(pkt, &cookiepkt)) {",
          "167:         al = SSL_AD_DECODE_ERROR;",
          "168:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "169:         goto f_err;",
          "170:     }",
          "172:     cookie_len = PACKET_remaining(&cookiepkt);",
          "175:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_TOO_LONG);",
          "179:     if (!PACKET_copy_bytes(&cookiepkt, s->d1->cookie, cookie_len)) {",
          "180:         al = SSL_AD_DECODE_ERROR;",
          "181:         SSLerr(SSL_F_DTLS_PROCESS_HELLO_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "182:         goto f_err;",
          "183:     }",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: }",
          "225: #endif",
          "228: {",
          "229:     int al;",
          "236:     if (SSL_IS_DTLS(s)) {",
          "238:                     || (s->version != DTLS1_BAD_VER",
          "240:                 al = SSL_AD_ILLEGAL_PARAMETER;",
          "241:                 SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC,",
          "242:                        SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "243:                 goto f_err;",
          "244:         }",
          "245:     } else {",
          "247:             al = SSL_AD_ILLEGAL_PARAMETER;",
          "248:             SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC,",
          "249:                    SSL_R_BAD_CHANGE_CIPHER_SPEC);",
          "",
          "[Removed Lines]",
          "227: enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, long n)",
          "237:         if ((s->version == DTLS1_BAD_VER && n != DTLS1_CCS_HEADER_LENGTH + 1)",
          "239:                         && n != DTLS1_CCS_HEADER_LENGTH - 1)) {",
          "246:         if (n != 0) {",
          "",
          "[Added Lines]",
          "227: enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, PACKET *pkt)",
          "230:     long remain;",
          "232:     remain = PACKET_remaining(pkt);",
          "239:         if ((s->version == DTLS1_BAD_VER",
          "240:                         && remain != DTLS1_CCS_HEADER_LENGTH + 1)",
          "242:                         && remain != DTLS1_CCS_HEADER_LENGTH - 1)) {",
          "249:         if (remain != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:     return MSG_PROCESS_ERROR;",
          "289: }",
          "292: {",
          "293:     int al, i;",
          "297:     if (!s->s3->change_cipher_spec) {",
          "",
          "[Removed Lines]",
          "291: enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, unsigned long n)",
          "294:     unsigned char *p;",
          "",
          "[Added Lines]",
          "294: enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:     }",
          "302:     s->s3->change_cipher_spec = 0;",
          "305:     i = s->s3->tmp.peer_finish_md_len;",
          "308:         al = SSL_AD_DECODE_ERROR;",
          "309:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_BAD_DIGEST_LENGTH);",
          "310:         goto f_err;",
          "311:     }",
          "314:         al = SSL_AD_DECRYPT_ERROR;",
          "315:         SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_DIGEST_CHECK_FAILED);",
          "316:         goto f_err;",
          "",
          "[Removed Lines]",
          "304:     p = (unsigned char *)s->init_msg;",
          "307:     if (i < 0 || (unsigned long)i != n) {",
          "313:     if (CRYPTO_memcmp(p, s->s3->tmp.peer_finish_md, i) != 0) {",
          "",
          "[Added Lines]",
          "308:     if (i < 0 || (unsigned long)i != PACKET_remaining(pkt)) {",
          "314:     if (CRYPTO_memcmp(PACKET_data(pkt), s->s3->tmp.peer_finish_md, i) != 0) {",
          "",
          "---------------"
        ],
        "ssl/s3_clnt.c||ssl/s3_clnt.c": [
          "File: ssl/s3_clnt.c -> ssl/s3_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:     return 0;",
          "449: }",
          "452: {",
          "453:     STACK_OF(SSL_CIPHER) *sk;",
          "454:     const SSL_CIPHER *c;",
          "456:     size_t session_id_len;",
          "457:     unsigned char *cipherchars;",
          "458:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "451: enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s, unsigned long n)",
          "455:     PACKET pkt, session_id;",
          "",
          "[Added Lines]",
          "451: enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s, PACKET *pkt)",
          "455:     PACKET session_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:     SSL_COMP *comp;",
          "462: #endif",
          "470:     if (s->method->version == TLS_ANY_VERSION) {",
          "471:         unsigned int sversion;",
          "474:             al = SSL_AD_DECODE_ERROR;",
          "475:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "476:             goto f_err;",
          "",
          "[Removed Lines]",
          "464:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "465:         al = SSL_AD_INTERNAL_ERROR;",
          "466:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, ERR_R_INTERNAL_ERROR);",
          "467:         goto f_err;",
          "468:     }",
          "473:         if (!PACKET_get_net_2(&pkt, &sversion)) {",
          "",
          "[Added Lines]",
          "467:         if (!PACKET_get_net_2(pkt, &sversion)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:         unsigned int hversion;",
          "516:         int options;",
          "519:             al = SSL_AD_DECODE_ERROR;",
          "520:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "521:             goto f_err;",
          "",
          "[Removed Lines]",
          "518:         if (!PACKET_get_net_2(&pkt, &hversion)) {",
          "",
          "[Added Lines]",
          "512:         if (!PACKET_get_net_2(pkt, &hversion)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "542:     } else {",
          "543:         unsigned char *vers;",
          "546:             al = SSL_AD_DECODE_ERROR;",
          "547:             SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "548:             goto f_err;",
          "",
          "[Removed Lines]",
          "545:         if (!PACKET_get_bytes(&pkt, &vers, 2)) {",
          "",
          "[Added Lines]",
          "539:         if (!PACKET_get_bytes(pkt, &vers, 2)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "562:         al = SSL_AD_DECODE_ERROR;",
          "563:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "564:         goto f_err;",
          "",
          "[Removed Lines]",
          "561:     if (!PACKET_copy_bytes(&pkt, s->s3->server_random, SSL3_RANDOM_SIZE)) {",
          "",
          "[Added Lines]",
          "555:     if (!PACKET_copy_bytes(pkt, s->s3->server_random, SSL3_RANDOM_SIZE)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "567:     s->hit = 0;",
          "571:         al = SSL_AD_DECODE_ERROR;",
          "572:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "573:         goto f_err;",
          "",
          "[Removed Lines]",
          "570:     if (!PACKET_get_length_prefixed_1(&pkt, &session_id)) {",
          "",
          "[Added Lines]",
          "564:     if (!PACKET_get_length_prefixed_1(pkt, &session_id)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "580:         goto f_err;",
          "581:     }",
          "584:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "585:         al = SSL_AD_DECODE_ERROR;",
          "586:         goto f_err;",
          "",
          "[Removed Lines]",
          "583:     if (!PACKET_get_bytes(&pkt, &cipherchars, TLS_CIPHER_LEN)) {",
          "",
          "[Added Lines]",
          "577:     if (!PACKET_get_bytes(pkt, &cipherchars, TLS_CIPHER_LEN)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "700:         goto f_err;",
          "704:         SSLerr(SSL_F_SSL3_GET_SERVER_HELLO, SSL_R_LENGTH_MISMATCH);",
          "705:         al = SSL_AD_DECODE_ERROR;",
          "706:         goto f_err;",
          "",
          "[Removed Lines]",
          "703:     if (!PACKET_get_1(&pkt, &compression)) {",
          "",
          "[Added Lines]",
          "697:     if (!PACKET_get_1(pkt, &compression)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "748: #endif",
          "752:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_PARSE_TLSEXT);",
          "753:         goto err;",
          "754:     }",
          "758:         al = SSL_AD_DECODE_ERROR;",
          "759:         SSLerr(SSL_F_TLS_PROCESS_SERVER_HELLO, SSL_R_BAD_PACKET_LENGTH);",
          "",
          "[Removed Lines]",
          "751:     if (!ssl_parse_serverhello_tlsext(s, &pkt)) {",
          "756:     if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "745:     if (!ssl_parse_serverhello_tlsext(s, pkt)) {",
          "750:     if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "794:     return MSG_PROCESS_ERROR;",
          "795: }",
          "798: {",
          "799:     int al, i, ret = MSG_PROCESS_ERROR, exp_idx;",
          "800:     unsigned long cert_list_len, cert_len;",
          "",
          "[Removed Lines]",
          "797: enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "791: enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "802:     unsigned char *certstart, *certbytes;",
          "803:     STACK_OF(X509) *sk = NULL;",
          "804:     EVP_PKEY *pkey = NULL;",
          "813:     if ((sk = sk_X509_new_null()) == NULL) {",
          "814:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "815:         goto err;",
          "816:     }",
          "820:         al = SSL_AD_DECODE_ERROR;",
          "821:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "822:         goto f_err;",
          "823:     }",
          "827:             al = SSL_AD_DECODE_ERROR;",
          "828:             SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE,",
          "829:                    SSL_R_CERT_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "805:     PACKET pkt;",
          "807:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "808:         al = SSL_AD_INTERNAL_ERROR;",
          "809:         SSLerr(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "810:         goto f_err;",
          "811:     }",
          "818:     if (!PACKET_get_net_3(&pkt, &cert_list_len)",
          "819:             || PACKET_remaining(&pkt) != cert_list_len) {",
          "824:     while (PACKET_remaining(&pkt)) {",
          "825:         if (!PACKET_get_net_3(&pkt, &cert_len)",
          "826:                 || !PACKET_get_bytes(&pkt, &certbytes, cert_len)) {",
          "",
          "[Added Lines]",
          "805:     if (!PACKET_get_net_3(pkt, &cert_list_len)",
          "806:             || PACKET_remaining(pkt) != cert_list_len) {",
          "811:     while (PACKET_remaining(pkt)) {",
          "812:         if (!PACKET_get_net_3(pkt, &cert_len)",
          "813:                 || !PACKET_get_bytes(pkt, &certbytes, cert_len)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "924:     return ret;",
          "925: }",
          "928: {",
          "929: #ifndef OPENSSL_NO_RSA",
          "930:     unsigned char *q, md_buf[EVP_MAX_MD_SIZE * 2];",
          "",
          "[Removed Lines]",
          "927: enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "914: enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "946:     EC_POINT *srvr_ecpoint = NULL;",
          "947:     int curve_nid = 0;",
          "948: #endif",
          "951:     EVP_MD_CTX_init(&md_ctx);",
          "953:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "962: #ifndef OPENSSL_NO_RSA",
          "963:     RSA_free(s->s3->peer_rsa_tmp);",
          "",
          "[Removed Lines]",
          "949:     PACKET pkt, save_param_start, signature;",
          "955:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "956:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "957:             al = SSL_AD_INTERNAL_ERROR;",
          "958:             goto f_err;",
          "959:     }",
          "960:     save_param_start = pkt;",
          "",
          "[Added Lines]",
          "936:     PACKET save_param_start, signature;",
          "942:     save_param_start = *pkt;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "981:     if (alg_k & SSL_PSK) {",
          "982:         PACKET psk_identity_hint;",
          "984:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "985:             goto f_err;",
          "986:         }",
          "",
          "[Removed Lines]",
          "983:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity_hint)) {",
          "",
          "[Added Lines]",
          "965:         if (!PACKET_get_length_prefixed_2(pkt, &psk_identity_hint)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1011: #ifndef OPENSSL_NO_SRP",
          "1012:     if (alg_k & SSL_kSRP) {",
          "1013:         PACKET prime, generator, salt, server_pub;",
          "1018:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1019:             goto f_err;",
          "1020:         }",
          "",
          "[Removed Lines]",
          "1014:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1015:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1016:             || !PACKET_get_length_prefixed_1(&pkt, &salt)",
          "1017:             || !PACKET_get_length_prefixed_2(&pkt, &server_pub)) {",
          "",
          "[Added Lines]",
          "996:         if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "997:             || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "998:             || !PACKET_get_length_prefixed_1(pkt, &salt)",
          "999:             || !PACKET_get_length_prefixed_2(pkt, &server_pub)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1055:             goto f_err;",
          "1056:         }",
          "1060:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1061:             goto f_err;",
          "1062:         }",
          "",
          "[Removed Lines]",
          "1058:         if (!PACKET_get_length_prefixed_2(&pkt, &mod)",
          "1059:             || !PACKET_get_length_prefixed_2(&pkt, &exp)) {",
          "",
          "[Added Lines]",
          "1040:         if (!PACKET_get_length_prefixed_2(pkt, &mod)",
          "1041:             || !PACKET_get_length_prefixed_2(pkt, &exp)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1098:     else if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1099:         PACKET prime, generator, pub_key;",
          "1104:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1105:             goto f_err;",
          "1106:         }",
          "",
          "[Removed Lines]",
          "1101:         if (!PACKET_get_length_prefixed_2(&pkt, &prime)",
          "1102:             || !PACKET_get_length_prefixed_2(&pkt, &generator)",
          "1103:             || !PACKET_get_length_prefixed_2(&pkt, &pub_key)) {",
          "",
          "[Added Lines]",
          "1083:         if (!PACKET_get_length_prefixed_2(pkt, &prime)",
          "1084:             || !PACKET_get_length_prefixed_2(pkt, &generator)",
          "1085:             || !PACKET_get_length_prefixed_2(pkt, &pub_key)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1161:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1162:             goto f_err;",
          "1163:         }",
          "",
          "[Removed Lines]",
          "1160:         if (!PACKET_get_bytes(&pkt, &ecparams, 3)) {",
          "",
          "[Added Lines]",
          "1142:         if (!PACKET_get_bytes(pkt, &ecparams, 3)) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1205:             goto err;",
          "1206:         }",
          "1209:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1210:             goto f_err;",
          "1211:         }",
          "",
          "[Removed Lines]",
          "1208:         if (!PACKET_get_length_prefixed_1(&pkt, &encoded_pt)) {",
          "",
          "[Added Lines]",
          "1190:         if (!PACKET_get_length_prefixed_1(pkt, &encoded_pt)) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1255:         if (!PACKET_get_sub_packet(&save_param_start, &params,",
          "1256:                                    PACKET_remaining(&save_param_start) -",
          "1258:             al = SSL_AD_INTERNAL_ERROR;",
          "1259:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1260:             goto f_err;",
          "",
          "[Removed Lines]",
          "1257:                                    PACKET_remaining(&pkt))) {",
          "",
          "[Added Lines]",
          "1239:                                    PACKET_remaining(pkt))) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1263:         if (SSL_USE_SIGALGS(s)) {",
          "1264:             unsigned char *sigalgs;",
          "1265:             int rv;",
          "1267:                 SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_TOO_SHORT);",
          "1268:                 goto f_err;",
          "1269:             }",
          "",
          "[Removed Lines]",
          "1266:             if (!PACKET_get_bytes(&pkt, &sigalgs, 2)) {",
          "",
          "[Added Lines]",
          "1248:             if (!PACKET_get_bytes(pkt, &sigalgs, 2)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1280:             md = EVP_sha1();",
          "1281:         }",
          "1285:             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1286:             goto f_err;",
          "1287:         }",
          "",
          "[Removed Lines]",
          "1283:         if (!PACKET_get_length_prefixed_2(&pkt, &signature)",
          "1284:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1265:         if (!PACKET_get_length_prefixed_2(pkt, &signature)",
          "1266:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1362:             goto err;",
          "1363:         }",
          "1366:             SSLerr(SSL_F_TLS_PROCESS_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);",
          "1367:             goto f_err;",
          "1368:         }",
          "",
          "[Removed Lines]",
          "1365:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1347:         if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1390:     return MSG_PROCESS_ERROR;",
          "1391: }",
          "1394: {",
          "1395:     int ret = MSG_PROCESS_ERROR;",
          "1396:     unsigned int list_len, ctype_num, i, name_len;",
          "",
          "[Removed Lines]",
          "1393: enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s, unsigned long n)",
          "",
          "[Added Lines]",
          "1375: enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1398:     unsigned char *data;",
          "1399:     unsigned char *namestart, *namebytes;",
          "1400:     STACK_OF(X509_NAME) *ca_sk = NULL;",
          "1409:     if ((ca_sk = sk_X509_NAME_new(ca_dn_cmp)) == NULL) {",
          "1410:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "1401:     PACKET pkt;",
          "1403:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1404:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "1405:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);",
          "1406:         goto err;",
          "1407:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1412:     }",
          "1417:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1418:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "1419:         goto err;",
          "",
          "[Removed Lines]",
          "1415:     if (!PACKET_get_1(&pkt, &ctype_num)",
          "1416:             || !PACKET_get_bytes(&pkt, &data, ctype_num)) {",
          "",
          "[Added Lines]",
          "1390:     if (!PACKET_get_1(pkt, &ctype_num)",
          "1391:             || !PACKET_get_bytes(pkt, &data, ctype_num)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1435:         s->s3->tmp.ctype[i] = data[i];",
          "1437:     if (SSL_USE_SIGALGS(s)) {",
          "1440:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1441:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "1442:                    SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1438:         if (!PACKET_get_net_2(&pkt, &list_len)",
          "1439:                 || !PACKET_get_bytes(&pkt, &data, list_len)) {",
          "",
          "[Added Lines]",
          "1413:         if (!PACKET_get_net_2(pkt, &list_len)",
          "1414:                 || !PACKET_get_bytes(pkt, &data, list_len)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1462:     }",
          "1467:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1468:         SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST, SSL_R_LENGTH_MISMATCH);",
          "1469:         goto err;",
          "1470:     }",
          "1475:             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1476:             SSLerr(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST,",
          "1477:                    SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1465:     if (!PACKET_get_net_2(&pkt, &list_len)",
          "1466:             || PACKET_remaining(&pkt) != list_len) {",
          "1472:     while (PACKET_remaining(&pkt)) {",
          "1473:         if (!PACKET_get_net_2(&pkt, &name_len)",
          "1474:                 || !PACKET_get_bytes(&pkt, &namebytes, name_len)) {",
          "",
          "[Added Lines]",
          "1440:     if (!PACKET_get_net_2(pkt, &list_len)",
          "1441:             || PACKET_remaining(pkt) != list_len) {",
          "1447:     while (PACKET_remaining(pkt)) {",
          "1448:         if (!PACKET_get_net_2(pkt, &name_len)",
          "1449:                 || !PACKET_get_bytes(pkt, &namebytes, name_len)) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1520:     return (X509_NAME_cmp(*a, *b));",
          "1521: }",
          "1524: {",
          "1525:     int al;",
          "1526:     unsigned int ticklen;",
          "1527:     unsigned long ticket_lifetime_hint;",
          "1539:         al = SSL_AD_DECODE_ERROR;",
          "1540:         SSLerr(SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH);",
          "1541:         goto f_err;",
          "",
          "[Removed Lines]",
          "1523: enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s, unsigned long n)",
          "1528:     PACKET pkt;",
          "1530:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1531:         al = SSL_AD_INTERNAL_ERROR;",
          "1532:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_INTERNAL_ERROR);",
          "1533:         goto f_err;",
          "1534:     }",
          "1536:     if (!PACKET_get_net_4(&pkt, &ticket_lifetime_hint)",
          "1537:             || !PACKET_get_net_2(&pkt, &ticklen)",
          "1538:             || PACKET_remaining(&pkt) != ticklen) {",
          "",
          "[Added Lines]",
          "1498: enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s, PACKET *pkt)",
          "1504:     if (!PACKET_get_net_4(pkt, &ticket_lifetime_hint)",
          "1505:             || !PACKET_get_net_2(pkt, &ticklen)",
          "1506:             || PACKET_remaining(pkt) != ticklen) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1584:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, ERR_R_MALLOC_FAILURE);",
          "1585:         goto err;",
          "1586:     }",
          "1588:         al = SSL_AD_DECODE_ERROR;",
          "1589:         SSLerr(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH);",
          "1590:         goto f_err;",
          "",
          "[Removed Lines]",
          "1587:     if (!PACKET_copy_bytes(&pkt, s->session->tlsext_tick, ticklen)) {",
          "",
          "[Added Lines]",
          "1555:     if (!PACKET_copy_bytes(pkt, s->session->tlsext_tick, ticklen)) {",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1614:     return MSG_PROCESS_ERROR;",
          "1615: }",
          "1618: {",
          "1619:     int al;",
          "1620:     unsigned long resplen;",
          "1621:     unsigned int type;",
          "1630:             || type != TLSEXT_STATUSTYPE_ocsp) {",
          "1631:         al = SSL_AD_DECODE_ERROR;",
          "1632:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_UNSUPPORTED_STATUS_TYPE);",
          "1633:         goto f_err;",
          "1634:     }",
          "1637:         al = SSL_AD_DECODE_ERROR;",
          "1638:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "1639:         goto f_err;",
          "",
          "[Removed Lines]",
          "1617: enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, unsigned long n)",
          "1622:     PACKET pkt;",
          "1624:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1625:         al = SSL_AD_INTERNAL_ERROR;",
          "1626:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_INTERNAL_ERROR);",
          "1627:         goto f_err;",
          "1628:     }",
          "1629:     if (!PACKET_get_1(&pkt, &type)",
          "1635:     if (!PACKET_get_net_3(&pkt, &resplen)",
          "1636:             || PACKET_remaining(&pkt) != resplen) {",
          "",
          "[Added Lines]",
          "1585: enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, PACKET *pkt)",
          "1591:     if (!PACKET_get_1(pkt, &type)",
          "1597:     if (!PACKET_get_net_3(pkt, &resplen)",
          "1598:             || PACKET_remaining(pkt) != resplen) {",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1645:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, ERR_R_MALLOC_FAILURE);",
          "1646:         goto f_err;",
          "1647:     }",
          "1649:         al = SSL_AD_DECODE_ERROR;",
          "1650:         SSLerr(SSL_F_TLS_PROCESS_CERT_STATUS, SSL_R_LENGTH_MISMATCH);",
          "1651:         goto f_err;",
          "",
          "[Removed Lines]",
          "1648:     if (!PACKET_copy_bytes(&pkt, s->tlsext_ocsp_resp, resplen)) {",
          "",
          "[Added Lines]",
          "1610:     if (!PACKET_copy_bytes(pkt, s->tlsext_ocsp_resp, resplen)) {",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1672:     return MSG_PROCESS_ERROR;",
          "1673: }",
          "1676: {",
          "1679:         ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_DECODE_ERROR);",
          "1680:         SSLerr(SSL_F_TLS_PROCESS_SERVER_DONE, SSL_R_LENGTH_MISMATCH);",
          "",
          "[Removed Lines]",
          "1675: enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, unsigned long n)",
          "1677:     if (n > 0) {",
          "",
          "[Added Lines]",
          "1637: enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, PACKET *pkt)",
          "1639:     if (PACKET_remaining(pkt) > 0) {",
          "",
          "---------------"
        ],
        "ssl/s3_srvr.c||ssl/s3_srvr.c": [
          "File: ssl/s3_srvr.c -> ssl/s3_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     return 1;",
          "205: }",
          "208: {",
          "209:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "210:     unsigned int j, complen = 0;",
          "",
          "[Removed Lines]",
          "207: enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, long n)",
          "",
          "[Added Lines]",
          "207: enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:     STACK_OF(SSL_CIPHER) *ciphers = NULL;",
          "217:     int protverr = 1;",
          "220:     int is_v2_record;",
          "228:     is_v2_record = RECORD_LAYER_is_sslv2_record(&s->rlayer);",
          "230:     PACKET_null_init(&cookie);",
          "",
          "[Removed Lines]",
          "219:     PACKET pkt, session_id, cipher_suites, compression, extensions, cookie;",
          "222:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "223:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, ERR_R_INTERNAL_ERROR);",
          "224:         al = SSL_AD_INTERNAL_ERROR;",
          "225:         goto f_err;",
          "226:     }",
          "",
          "[Added Lines]",
          "219:     PACKET session_id, cipher_suites, compression, extensions, cookie;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "251:                 || mt != SSL2_MT_CLIENT_HELLO) {",
          "",
          "[Removed Lines]",
          "250:         if (!PACKET_get_1(&pkt, &mt)",
          "",
          "[Added Lines]",
          "244:         if (!PACKET_get_1(pkt, &mt)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258:             goto err;",
          "259:         }",
          "263:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_UNKNOWN_PROTOCOL);",
          "264:             goto err;",
          "",
          "[Removed Lines]",
          "261:         if (!PACKET_get_net_2(&pkt, &version)) {",
          "",
          "[Added Lines]",
          "255:         if (!PACKET_get_net_2(pkt, &version)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "284:             al = SSL_AD_DECODE_ERROR;",
          "285:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);",
          "286:             goto f_err;",
          "",
          "[Removed Lines]",
          "283:         if(!PACKET_get_net_2(&pkt, (unsigned int *)&s->client_version)) {",
          "",
          "[Added Lines]",
          "277:         if(!PACKET_get_net_2(pkt, (unsigned int *)&s->client_version)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:         unsigned int cipher_len, session_id_len, challenge_len;",
          "366:         PACKET challenge;",
          "371:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO,",
          "372:                    SSL_R_RECORD_LENGTH_MISMATCH);",
          "373:             al = SSL_AD_DECODE_ERROR;",
          "374:             goto f_err;",
          "375:         }",
          "382:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_RECORD_LENGTH_MISMATCH);",
          "383:             al = SSL_AD_DECODE_ERROR;",
          "384:             goto f_err;",
          "",
          "[Removed Lines]",
          "368:         if (!PACKET_get_net_2(&pkt, &cipher_len)",
          "369:                 || !PACKET_get_net_2(&pkt, &session_id_len)",
          "370:                 || !PACKET_get_net_2(&pkt, &challenge_len)) {",
          "377:         if (!PACKET_get_sub_packet(&pkt, &cipher_suites, cipher_len)",
          "378:             || !PACKET_get_sub_packet(&pkt, &session_id, session_id_len)",
          "379:             || !PACKET_get_sub_packet(&pkt, &challenge, challenge_len)",
          "381:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "362:         if (!PACKET_get_net_2(pkt, &cipher_len)",
          "363:                 || !PACKET_get_net_2(pkt, &session_id_len)",
          "364:                 || !PACKET_get_net_2(pkt, &challenge_len)) {",
          "371:         if (!PACKET_get_sub_packet(pkt, &cipher_suites, cipher_len)",
          "372:             || !PACKET_get_sub_packet(pkt, &session_id, session_id_len)",
          "373:             || !PACKET_get_sub_packet(pkt, &challenge, challenge_len)",
          "375:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "400:         PACKET_null_init(&extensions);",
          "401:     } else {",
          "405:             al = SSL_AD_DECODE_ERROR;",
          "406:             SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "407:             goto f_err;",
          "408:         }",
          "410:         if (SSL_IS_DTLS(s)) {",
          "412:                 al = SSL_AD_DECODE_ERROR;",
          "413:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "414:                 goto f_err;",
          "",
          "[Removed Lines]",
          "403:         if (!PACKET_copy_bytes(&pkt, s->s3->client_random, SSL3_RANDOM_SIZE)",
          "404:             || !PACKET_get_length_prefixed_1(&pkt, &session_id)) {",
          "411:             if (!PACKET_get_length_prefixed_1(&pkt, &cookie)) {",
          "",
          "[Added Lines]",
          "397:         if (!PACKET_copy_bytes(pkt, s->s3->client_random, SSL3_RANDOM_SIZE)",
          "398:             || !PACKET_get_length_prefixed_1(pkt, &session_id)) {",
          "405:             if (!PACKET_get_length_prefixed_1(pkt, &cookie)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "424:             }",
          "425:         }",
          "429:                 al = SSL_AD_DECODE_ERROR;",
          "430:                 SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);",
          "431:                 goto f_err;",
          "432:         }",
          "435:     }",
          "437:     s->hit = 0;",
          "",
          "[Removed Lines]",
          "427:         if (!PACKET_get_length_prefixed_2(&pkt, &cipher_suites)",
          "428:             || !PACKET_get_length_prefixed_1(&pkt, &compression)) {",
          "434:         extensions = pkt;",
          "",
          "[Added Lines]",
          "421:         if (!PACKET_get_length_prefixed_2(pkt, &cipher_suites)",
          "422:             || !PACKET_get_length_prefixed_1(pkt, &compression)) {",
          "428:         extensions = *pkt;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1497:     return 0;",
          "1498: }",
          "1501: {",
          "1502:     int al;",
          "1503:     unsigned int i;",
          "",
          "[Removed Lines]",
          "1500: enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, long n)",
          "",
          "[Added Lines]",
          "1494: enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1516:     EC_POINT *clnt_ecpoint = NULL;",
          "1517:     BN_CTX *bn_ctx = NULL;",
          "1518: #endif",
          "1520:     unsigned char *data, *rsa_decrypt = NULL;",
          "1528:     alg_k = s->s3->tmp.new_cipher->algorithm_mkey;",
          "1530: #ifndef OPENSSL_NO_PSK",
          "",
          "[Removed Lines]",
          "1519:     PACKET pkt, enc_premaster;",
          "1522:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "1523:         al = SSL_AD_INTERNAL_ERROR;",
          "1524:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "1525:         goto f_err;",
          "1526:     }",
          "",
          "[Added Lines]",
          "1513:     PACKET enc_premaster;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1532:     if (alg_k & SSL_PSK) {",
          "1533:         unsigned char psk[PSK_MAX_PSK_LEN];",
          "1534:         size_t psklen;",
          "1538:             al = SSL_AD_DECODE_ERROR;",
          "1539:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1540:             goto f_err;",
          "",
          "[Removed Lines]",
          "1535:  PACKET psk_identity;",
          "1537:         if (!PACKET_get_length_prefixed_2(&pkt, &psk_identity)) {",
          "",
          "[Added Lines]",
          "1523:         PACKET psk_identity;",
          "1525:         if (!PACKET_get_length_prefixed_2(pkt, &psk_identity)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1589:     }",
          "1590:     if (alg_k & SSL_kPSK) {",
          "1593:             al = SSL_AD_HANDSHAKE_FAILURE;",
          "1594:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);",
          "1595:             goto f_err;",
          "",
          "[Removed Lines]",
          "1592:         if (PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1580:         if (PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1639:         if (s->version == SSL3_VERSION || s->version == DTLS1_BAD_VER) {",
          "1641:         } else {",
          "1646:                 if (s->options & SSL_OP_TLS_D5_BUG) {",
          "1647:                     enc_premaster = orig;",
          "",
          "[Removed Lines]",
          "1640:             enc_premaster = pkt;",
          "1642:             PACKET orig = pkt;",
          "1643:             if (!PACKET_get_length_prefixed_2(&pkt, &enc_premaster)",
          "1644:                 || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1628:             enc_premaster = *pkt;",
          "1630:             PACKET orig = *pkt;",
          "1631:             if (!PACKET_get_length_prefixed_2(pkt, &enc_premaster)",
          "1632:                 || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1764:     if (alg_k & (SSL_kDHE | SSL_kDHr | SSL_kDHd | SSL_kDHEPSK)) {",
          "1765:         int idx = -1;",
          "1766:         EVP_PKEY *skey = NULL;",
          "1768:         unsigned char shared[(OPENSSL_DH_MAX_MODULUS_BITS + 7) / 8];",
          "1771:             if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {",
          "1772:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1773:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "[Removed Lines]",
          "1767:         PACKET bookmark = pkt;",
          "1770:         if (!PACKET_get_net_2(&pkt, &i)) {",
          "",
          "[Added Lines]",
          "1755:         PACKET bookmark = *pkt;",
          "1758:         if (!PACKET_get_net_2(pkt, &i)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1776:             }",
          "1777:             i = 0;",
          "1778:         }",
          "1780:             if (!(s->options & SSL_OP_SSLEAY_080_CLIENT_DH_BUG)) {",
          "1781:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "1782:                        SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG);",
          "1783:                 goto err;",
          "1784:             } else {",
          "1787:             }",
          "1788:         }",
          "1789:         if (alg_k & SSL_kDHr)",
          "",
          "[Removed Lines]",
          "1779:         if (PACKET_remaining(&pkt) != i) {",
          "1785:                 pkt = bookmark;",
          "1786:                 i = PACKET_remaining(&pkt);",
          "",
          "[Added Lines]",
          "1767:         if (PACKET_remaining(pkt) != i) {",
          "1774:                 i = PACKET_remaining(pkt);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1808:         } else",
          "1809:             dh_srvr = s->s3->tmp.dh;",
          "1813:             EVP_PKEY *clkey = X509_get_pubkey(s->session->peer);",
          "1814:             if (clkey) {",
          "",
          "[Removed Lines]",
          "1811:         if (n == 0L) {",
          "",
          "[Added Lines]",
          "1799:         if (PACKET_remaining(pkt) == 0L) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1824:             EVP_PKEY_free(clkey);",
          "1825:             pub = dh_clnt->pub_key;",
          "1826:         } else {",
          "1829:                 al = SSL_AD_INTERNAL_ERROR;",
          "1830:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "",
          "[Removed Lines]",
          "1827:             if (!PACKET_get_bytes(&pkt, &data, i)) {",
          "",
          "[Added Lines]",
          "1815:             if (!PACKET_get_bytes(pkt, &data, i)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1906:             goto err;",
          "1907:         }",
          "1912:             if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {",
          "",
          "[Removed Lines]",
          "1909:         if (n == 0L) {",
          "",
          "[Added Lines]",
          "1897:         if (PACKET_remaining(pkt) == 0L) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1950:             }",
          "1954:                 al = SSL_AD_DECODE_ERROR;",
          "1955:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "1956:                        SSL_R_LENGTH_MISMATCH);",
          "1957:                 goto f_err;",
          "1958:             }",
          "1961:                 SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_EC_LIB);",
          "1962:                 goto err;",
          "1963:             }",
          "",
          "[Removed Lines]",
          "1953:             if (!PACKET_get_1(&pkt, &i)) {",
          "1959:             if (!PACKET_get_bytes(&pkt, &data, i)",
          "1960:                     || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "1941:             if (!PACKET_get_1(pkt, &i)) {",
          "1947:             if (!PACKET_get_bytes(pkt, &data, i)",
          "1948:                     || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2003: #endif",
          "2004: #ifndef OPENSSL_NO_SRP",
          "2005:     if (alg_k & SSL_kSRP) {",
          "2008:             al = SSL_AD_DECODE_ERROR;",
          "2009:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_BAD_SRP_A_LENGTH);",
          "2010:             goto f_err;",
          "",
          "[Removed Lines]",
          "2006:         if (!PACKET_get_net_2(&pkt, &i)",
          "2007:                 || !PACKET_get_bytes(&pkt, &data, i)) {",
          "",
          "[Added Lines]",
          "1994:         if (!PACKET_get_net_2(pkt, &i)",
          "1995:                 || !PACKET_get_bytes(pkt, &data, i)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2041:         unsigned long alg_a;",
          "2042:         int Ttag, Tclass;",
          "2043:         long Tlen;",
          "2046:         alg_a = s->s3->tmp.new_cipher->algorithm_auth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2032:         long sess_key_len;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2061:                 ERR_clear_error();",
          "2062:         }",
          "2065:             al = SSL_AD_INTERNAL_ERROR;",
          "2066:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);",
          "2067:             goto f_err;",
          "2068:         }",
          "2072:             || Tclass != V_ASN1_UNIVERSAL) {",
          "2073:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE,",
          "2074:                    SSL_R_DECRYPTION_FAILED);",
          "",
          "[Removed Lines]",
          "2064:         if (!PACKET_get_bytes(&pkt, &data, n)) {",
          "2069:         if (ASN1_get_object",
          "2070:             ((const unsigned char **)&data, &Tlen, &Ttag, &Tclass,",
          "2071:              n) != V_ASN1_CONSTRUCTED || Ttag != V_ASN1_SEQUENCE",
          "",
          "[Added Lines]",
          "2053:         sess_key_len = PACKET_remaining(pkt);",
          "2054:         if (!PACKET_get_bytes(pkt, &data, sess_key_len)) {",
          "2059:         if (ASN1_get_object ((const unsigned char **)&data, &Tlen, &Ttag,",
          "2060:                              &Tclass, sess_key_len) != V_ASN1_CONSTRUCTED",
          "2061:             || Ttag != V_ASN1_SEQUENCE",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2239:     return WORK_FINISHED_CONTINUE;",
          "2240: }",
          "2243: {",
          "2244:     EVP_PKEY *pkey = NULL;",
          "2245:     unsigned char *sig, *data;",
          "",
          "[Removed Lines]",
          "2242: enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, long n)",
          "",
          "[Added Lines]",
          "2232: enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2249:     X509 *peer;",
          "2250:     const EVP_MD *md = NULL;",
          "2251:     EVP_MD_CTX mctx;",
          "2253:     EVP_MD_CTX_init(&mctx);",
          "2255:     peer = s->session->peer;",
          "",
          "[Removed Lines]",
          "2252:     PACKET pkt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2263:         goto f_err;",
          "2264:     }",
          "2278:         len = 64;",
          "2279:     } else {",
          "2280:         if (SSL_USE_SIGALGS(s)) {",
          "2281:             int rv;",
          "2284:                 al = SSL_AD_DECODE_ERROR;",
          "2285:                 goto f_err;",
          "2286:             }",
          "",
          "[Removed Lines]",
          "2267:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2268:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, ERR_R_INTERNAL_ERROR);",
          "2269:         al = SSL_AD_INTERNAL_ERROR;",
          "2270:         goto f_err;",
          "2271:     }",
          "2277:     if (n == 64 && pkey->type == NID_id_GostR3410_2001) {",
          "2283:             if (!PACKET_get_bytes(&pkt, &sig, 2)) {",
          "",
          "[Added Lines]",
          "2260:     if (PACKET_remaining(pkt) == 64 && pkey->type == NID_id_GostR3410_2001) {",
          "2266:             if (!PACKET_get_bytes(pkt, &sig, 2)) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2296:             fprintf(stderr, \"USING TLSv1.2 HASH %s\\n\", EVP_MD_name(md));",
          "2297: #endif",
          "2298:         }",
          "2300:             SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2301:             al = SSL_AD_DECODE_ERROR;",
          "2302:             goto f_err;",
          "2303:         }",
          "2304:     }",
          "2305:     j = EVP_PKEY_size(pkey);",
          "2307:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_WRONG_SIGNATURE_SIZE);",
          "2308:         al = SSL_AD_DECODE_ERROR;",
          "2309:         goto f_err;",
          "2310:     }",
          "2312:         SSLerr(SSL_F_TLS_PROCESS_CERT_VERIFY, SSL_R_LENGTH_MISMATCH);",
          "2313:         al = SSL_AD_DECODE_ERROR;",
          "2314:         goto f_err;",
          "",
          "[Removed Lines]",
          "2299:         if (!PACKET_get_net_2(&pkt, &len)) {",
          "2306:     if (((int)len > j) || ((int)PACKET_remaining(&pkt) > j) || (n <= 0)) {",
          "2311:     if (!PACKET_get_bytes(&pkt, &data, len)) {",
          "",
          "[Added Lines]",
          "2282:         if (!PACKET_get_net_2(pkt, &len)) {",
          "2289:     if (((int)len > j) || ((int)PACKET_remaining(pkt) > j)",
          "2290:             || (PACKET_remaining(pkt) == 0)) {",
          "2295:     if (!PACKET_get_bytes(pkt, &data, len)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2421:     return ret;",
          "2422: }",
          "2425: {",
          "2426:     int i, al, ret = MSG_PROCESS_ERROR;",
          "2427:     X509 *x = NULL;",
          "",
          "[Removed Lines]",
          "2424: enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, long n)",
          "",
          "[Added Lines]",
          "2408: enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, PACKET *pkt)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2429:     const unsigned char *certstart;",
          "2430:     unsigned char *certbytes;",
          "2431:     STACK_OF(X509) *sk = NULL;",
          "2440:     if ((sk = sk_X509_new_null()) == NULL) {",
          "2441:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_MALLOC_FAILURE);",
          "2442:         goto f_err;",
          "2443:     }",
          "2448:         al = SSL_AD_DECODE_ERROR;",
          "2449:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, SSL_R_LENGTH_MISMATCH);",
          "2450:         goto f_err;",
          "",
          "[Removed Lines]",
          "2432:     PACKET pkt, spkt;",
          "2434:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2435:         al = SSL_AD_INTERNAL_ERROR;",
          "2436:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE, ERR_R_INTERNAL_ERROR);",
          "2437:         goto f_err;",
          "2438:     }",
          "2445:     if (!PACKET_get_net_3(&pkt, &llen)",
          "2446:             || !PACKET_get_sub_packet(&pkt, &spkt, llen)",
          "2447:             || PACKET_remaining(&pkt) != 0) {",
          "",
          "[Added Lines]",
          "2416:     PACKET spkt;",
          "2423:     if (!PACKET_get_net_3(pkt, &llen)",
          "2424:             || !PACKET_get_sub_packet(pkt, &spkt, llen)",
          "2425:             || PACKET_remaining(pkt) != 0) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2752: {",
          "2754:     size_t next_proto_len;",
          "",
          "[Removed Lines]",
          "2751: enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, long n)",
          "2753:     PACKET pkt, next_proto, padding;",
          "2756:     if (n < 2) {",
          "2758:     }",
          "2760:     if (!PACKET_buf_init(&pkt, s->init_msg, n)) {",
          "2761:         SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, ERR_R_INTERNAL_ERROR);",
          "2762:         goto err;",
          "2763:     }",
          "",
          "[Added Lines]",
          "2729: enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt)",
          "2731:     PACKET next_proto, padding;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2775:         SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, SSL_R_LENGTH_MISMATCH);",
          "2776:         goto err;",
          "2777:     }",
          "",
          "[Removed Lines]",
          "2772:     if (!PACKET_get_length_prefixed_1(&pkt, &next_proto)",
          "2773:         || !PACKET_get_length_prefixed_1(&pkt, &padding)",
          "2774:         || PACKET_remaining(&pkt) > 0) {",
          "",
          "[Added Lines]",
          "2741:     if (!PACKET_get_length_prefixed_1(pkt, &next_proto)",
          "2742:         || !PACKET_get_length_prefixed_1(pkt, &padding)",
          "2743:         || PACKET_remaining(pkt) > 0) {",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:      \"dtls_construct_hello_verify_request\"},",
          "119:     {ERR_FUNC(SSL_F_DTLS_GET_REASSEMBLED_MESSAGE),",
          "120:      \"DTLS_GET_REASSEMBLED_MESSAGE\"},",
          "121:     {ERR_FUNC(SSL_F_READ_STATE_MACHINE), \"READ_STATE_MACHINE\"},",
          "122:     {ERR_FUNC(SSL_F_SSL3_ACCEPT), \"ssl3_accept\"},",
          "123:     {ERR_FUNC(SSL_F_SSL3_ADD_CERT_TO_BUF), \"SSL3_ADD_CERT_TO_BUF\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     {ERR_FUNC(SSL_F_DTLS_PROCESS_HELLO_VERIFY), \"dtls_process_hello_verify\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "524:      \"invalid ticket keys length\"},",
          "525:     {ERR_REASON(SSL_R_INVALID_TRUST), \"invalid trust\"},",
          "526:     {ERR_REASON(SSL_R_LENGTH_MISMATCH), \"length mismatch\"},",
          "527:     {ERR_REASON(SSL_R_LENGTH_TOO_SHORT), \"length too short\"},",
          "528:     {ERR_REASON(SSL_R_LIBRARY_BUG), \"library bug\"},",
          "529:     {ERR_REASON(SSL_R_LIBRARY_HAS_NO_CIPHERS), \"library has no ciphers\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:     {ERR_REASON(SSL_R_LENGTH_TOO_LONG), \"length too long\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2003: __owur int tls_construct_server_certificate(SSL *s);",
          "2004: __owur int tls_construct_new_session_ticket(SSL *s);",
          "2005: __owur int tls_construct_cert_status(SSL *s);",
          "2008: __owur int ssl3_setup_key_block(SSL *s);",
          "2009: __owur int tls_construct_change_cipher_spec(SSL *s);",
          "2010: __owur int dtls_construct_change_cipher_spec(SSL *s);",
          "",
          "[Removed Lines]",
          "2006: __owur enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, long n);",
          "2007: __owur enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "2006: __owur enum MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s,",
          "2007:                                                               PACKET *pkt);",
          "2008: __owur enum MSG_PROCESS_RETURN tls_process_finished(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2107: __owur int tls_construct_client_hello(SSL *s);",
          "2108: __owur enum MSG_PROCESS_RETURN tls_process_server_hello(SSL *s,",
          "2110: __owur enum MSG_PROCESS_RETURN tls_process_certificate_request(SSL *s,",
          "2112: __owur enum MSG_PROCESS_RETURN tls_process_new_session_ticket(SSL *s,",
          "2116: __owur int tls_construct_client_verify(SSL *s);",
          "2117: __owur enum WORK_STATE tls_prepare_client_certificate(SSL *s,",
          "2118:                                                       enum WORK_STATE wst);",
          "",
          "[Removed Lines]",
          "2109:                                                         unsigned long n);",
          "2111:                                                                unsigned long n);",
          "2113:                                                               unsigned long n);",
          "2114: __owur enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, unsigned long n);",
          "2115: __owur enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "2110:                                                         PACKET *pkt);",
          "2112:                                                                PACKET *pkt);",
          "2114:                                                               PACKET *pkt);",
          "2115: __owur enum MSG_PROCESS_RETURN tls_process_cert_status(SSL *s, PACKET *pkt);",
          "2116: __owur enum MSG_PROCESS_RETURN tls_process_server_done(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2121: __owur int tls_construct_client_key_exchange(SSL *s);",
          "2122: __owur int tls_client_key_exchange_post_work(SSL *s);",
          "2123: __owur enum MSG_PROCESS_RETURN tls_process_key_exchange(SSL *s,",
          "2125: __owur enum MSG_PROCESS_RETURN tls_process_server_certificate(SSL *s,",
          "2127: __owur int ssl3_check_cert_and_algorithm(SSL *s);",
          "2128: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "2129: __owur int tls_construct_next_proto(SSL *s);",
          "2130: #  endif",
          "2136: __owur enum WORK_STATE tls_post_process_client_hello(SSL *s,",
          "2137:                                                      enum WORK_STATE wst);",
          "2138: __owur int tls_construct_server_hello(SSL *s);",
          "",
          "[Removed Lines]",
          "2124:                                                         unsigned long n);",
          "2126:                                                               unsigned long n);",
          "2131: __owur enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s,",
          "2132:                                                          unsigned long n);",
          "2135: __owur enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, long n);",
          "",
          "[Added Lines]",
          "2125:                                                         PACKET *pkt);",
          "2127:                                                               PACKET *pkt);",
          "2132: __owur enum MSG_PROCESS_RETURN dtls_process_hello_verify(SSL *s, PACKET *pkt);",
          "2135: __owur enum MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2141: __owur int tls_construct_server_key_exchange(SSL *s);",
          "2142: __owur int tls_construct_certificate_request(SSL *s);",
          "2143: __owur int tls_construct_server_done(SSL *s);",
          "2146: __owur enum WORK_STATE tls_post_process_client_key_exchange(SSL *s,",
          "2147:     enum WORK_STATE wst);",
          "2149: #  ifndef OPENSSL_NO_NEXTPROTONEG",
          "2151: #  endif",
          "2153: __owur int tls1_new(SSL *s);",
          "",
          "[Removed Lines]",
          "2144: __owur enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s, long n);",
          "2145: __owur enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, long n);",
          "2148: __owur enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, long n);",
          "2150: __owur enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, long n);",
          "",
          "[Added Lines]",
          "2144: __owur enum MSG_PROCESS_RETURN tls_process_client_certificate(SSL *s,",
          "2145:                                                               PACKET *pkt);",
          "2146: __owur enum MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s,",
          "2147:                                                                PACKET *pkt);",
          "2150: __owur enum MSG_PROCESS_RETURN tls_process_cert_verify(SSL *s, PACKET *pkt);",
          "2152: __owur enum MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt);",
          "",
          "---------------"
        ],
        "ssl/statem.c||ssl/statem.c": [
          "File: ssl/statem.c -> ssl/statem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: static enum WORK_STATE client_post_work(SSL *s, enum WORK_STATE wst);",
          "117: static int client_construct_message(SSL *s);",
          "118: static unsigned long client_max_message_size(SSL *s);",
          "121: static enum WORK_STATE client_post_process_message(SSL *s, enum WORK_STATE wst);",
          "122: static int server_read_transition(SSL *s, int mt);",
          "123: static inline int send_server_key_exchange(SSL *s);",
          "",
          "[Removed Lines]",
          "119: static enum MSG_PROCESS_RETURN client_process_message(SSL *s,",
          "120:                                                       unsigned long len);",
          "",
          "[Added Lines]",
          "119: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127: static enum WORK_STATE server_post_work(SSL *s, enum WORK_STATE wst);",
          "128: static int server_construct_message(SSL *s);",
          "129: static unsigned long server_max_message_size(SSL *s);",
          "131: static enum WORK_STATE server_post_process_message(SSL *s, enum WORK_STATE wst);",
          "",
          "[Removed Lines]",
          "130: static enum MSG_PROCESS_RETURN server_process_message(SSL *s, unsigned long len);",
          "",
          "[Added Lines]",
          "129: static enum MSG_PROCESS_RETURN server_process_message(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "529:     int ret, mt;",
          "530:     unsigned long len;",
          "531:     int (*transition)(SSL *s, int mt);",
          "533:     enum WORK_STATE (*post_process_message)(SSL *s, enum WORK_STATE wst);",
          "534:     unsigned long (*max_message_size)(SSL *s);",
          "535:     void (*cb) (const SSL *ssl, int type, int val) = NULL;",
          "",
          "[Removed Lines]",
          "532:     enum MSG_PROCESS_RETURN (*process_message)(SSL *s, unsigned long n);",
          "",
          "[Added Lines]",
          "531:     PACKET pkt;",
          "532:     enum MSG_PROCESS_RETURN (*process_message)(SSL *s, PACKET *pkt);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "612:             }",
          "614:             s->first_packet = 0;",
          "616:             if (ret == MSG_PROCESS_ERROR) {",
          "617:                 return SUB_STATE_ERROR;",
          "618:             }",
          "",
          "[Removed Lines]",
          "615:             ret = process_message(s, len);",
          "",
          "[Added Lines]",
          "615:             if (!PACKET_buf_init(&pkt, s->init_msg, len)) {",
          "616:                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);",
          "617:                 SSLerr(SSL_F_READ_STATE_MACHINE, ERR_R_INTERNAL_ERROR);",
          "618:                 return SUB_STATE_ERROR;",
          "619:             }",
          "620:             ret = process_message(s, &pkt);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1448: {",
          "1449:     STATEM *st = &s->statem;",
          "1451:     switch(st->hand_state) {",
          "1452:         case TLS_ST_CR_SRVR_HELLO:",
          "1455:         case DTLS_ST_CR_HELLO_VERIFY_REQUEST:",
          "1458:         case TLS_ST_CR_CERT:",
          "1461:         case TLS_ST_CR_CERT_STATUS:",
          "1464:         case TLS_ST_CR_KEY_EXCH:",
          "1467:         case TLS_ST_CR_CERT_REQ:",
          "1470:         case TLS_ST_CR_SRVR_DONE:",
          "1473:         case TLS_ST_CR_CHANGE:",
          "1476:         case TLS_ST_CR_SESSION_TICKET:",
          "1479:         case TLS_ST_CR_FINISHED:",
          "1482:         default:",
          "",
          "[Removed Lines]",
          "1447: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, unsigned long len)",
          "1453:             return tls_process_server_hello(s, len);",
          "1456:             return dtls_process_hello_verify(s, len);",
          "1459:             return tls_process_server_certificate(s, len);",
          "1462:             return tls_process_cert_status(s, len);",
          "1465:             return tls_process_key_exchange(s, len);",
          "1468:             return tls_process_certificate_request(s, len);",
          "1471:             return tls_process_server_done(s, len);",
          "1474:             return tls_process_change_cipher_spec(s, len);",
          "1477:             return tls_process_new_session_ticket(s, len);",
          "1480:             return tls_process_finished(s, len);",
          "",
          "[Added Lines]",
          "1452: static enum MSG_PROCESS_RETURN client_process_message(SSL *s, PACKET *pkt)",
          "1458:             return tls_process_server_hello(s, pkt);",
          "1461:             return dtls_process_hello_verify(s, pkt);",
          "1464:             return tls_process_server_certificate(s, pkt);",
          "1467:             return tls_process_cert_status(s, pkt);",
          "1470:             return tls_process_key_exchange(s, pkt);",
          "1473:             return tls_process_certificate_request(s, pkt);",
          "1476:             return tls_process_server_done(s, pkt);",
          "1479:             return tls_process_change_cipher_spec(s, pkt);",
          "1482:             return tls_process_new_session_ticket(s, pkt);",
          "1485:             return tls_process_finished(s, pkt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2166: {",
          "2167:     STATEM *st = &s->statem;",
          "2169:     switch(st->hand_state) {",
          "2170:     case TLS_ST_SR_CLNT_HELLO:",
          "2173:     case TLS_ST_SR_CERT:",
          "2176:     case TLS_ST_SR_KEY_EXCH:",
          "2179:     case TLS_ST_SR_CERT_VRFY:",
          "2182: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "2183:     case TLS_ST_SR_NEXT_PROTO:",
          "2185: #endif",
          "2187:     case TLS_ST_SR_CHANGE:",
          "2190:     case TLS_ST_SR_FINISHED:",
          "2193:     default:",
          "",
          "[Removed Lines]",
          "2164: static enum MSG_PROCESS_RETURN  server_process_message(SSL *s,",
          "2165:                                                        unsigned long len)",
          "2171:         return tls_process_client_hello(s, len);",
          "2174:         return tls_process_client_certificate(s, len);",
          "2177:         return tls_process_client_key_exchange(s, len);",
          "2180:         return tls_process_cert_verify(s, len);",
          "2184:         return tls_process_next_proto(s, len);",
          "2188:         return tls_process_change_cipher_spec(s, len);",
          "2191:         return tls_process_finished(s, len);",
          "",
          "[Added Lines]",
          "2169: static enum MSG_PROCESS_RETURN  server_process_message(SSL *s, PACKET *pkt)",
          "2175:         return tls_process_client_hello(s, pkt);",
          "2178:         return tls_process_client_certificate(s, pkt);",
          "2181:         return tls_process_client_key_exchange(s, pkt);",
          "2184:         return tls_process_cert_verify(s, pkt);",
          "2188:         return tls_process_next_proto(s, pkt);",
          "2192:         return tls_process_change_cipher_spec(s, pkt);",
          "2195:         return tls_process_finished(s, pkt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}