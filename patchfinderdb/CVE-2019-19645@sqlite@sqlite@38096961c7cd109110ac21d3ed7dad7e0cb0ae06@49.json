{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ab3c5f26ab72222c4ab0fdcee559b3e3a7c0d53b",
      "candidate_info": {
        "commit_hash": "ab3c5f26ab72222c4ab0fdcee559b3e3a7c0d53b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ab3c5f26ab72222c4ab0fdcee559b3e3a7c0d53b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c"
        ],
        "message": "Fix the table_info and table_xinfo pragmas so that they work with virtual columns.  Table_info omits virtual columns.  Table_xinfo gives them a \"hidden\" flag of 2, and 3 for STORED columns.\n\nFossilOrigin-Name: 069351b85f9a706f60d3e98fbc8aaf40c374356b967c0464aede30ead3d9d18b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 64db39f92d68d1b9f23e48af35e16b969c38b58041fbe900066eeb3ddb291cef",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1100:       sqlite3CodeVerifySchema(pParse, iTabDb);",
          "1101:       sqlite3ViewGetColumnNames(pParse, pTab);",
          "1102:       for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){",
          "1105:           nHidden++;",
          "1107:         }",
          "1108:         if( (pCol->colFlags & COLFLAG_PRIMKEY)==0 ){",
          "1109:           k = 0;",
          "",
          "[Removed Lines]",
          "1103:         int isHidden = IsHiddenColumn(pCol);",
          "1104:         if( isHidden && pPragma->iArg==0 ){",
          "1106:           continue;",
          "",
          "[Added Lines]",
          "1103:         int isHidden = 0;",
          "1104:         if( pCol->colFlags & COLFLAG_NOINSERT ){",
          "1106:           if( pPragma->iArg==0 ) continue;",
          "1107:           if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1109:           }else if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1111:           }else{",
          "1113:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1112:         }else{",
          "1113:           for(k=1; k<=pTab->nCol && pPk->aiColumn[k-1]!=i; k++){}",
          "1114:         }",
          "1116:         sqlite3VdbeMultiLoad(v, 1, pPragma->iArg ? \"issisii\" : \"issisi\",",
          "1117:                i-nHidden,",
          "1118:                pCol->zName,",
          "1119:                sqlite3ColumnType(pCol,\"\"),",
          "1120:                pCol->notNull ? 1 : 0,",
          "1122:                k,",
          "1123:                isHidden);",
          "1124:       }",
          "",
          "[Removed Lines]",
          "1115:         assert( pCol->pDflt==0 || pCol->pDflt->op==TK_SPAN );",
          "1121:                pCol->pDflt ? pCol->pDflt->u.zToken : 0,",
          "",
          "[Added Lines]",
          "1122:         assert( pCol->pDflt==0 || pCol->pDflt->op==TK_SPAN || isHidden>=2 );",
          "1128:                pCol->pDflt && isHidden<2 ? pCol->pDflt->u.zToken : 0,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b747068bad531f0300891e6f569f67d55abb93b",
      "candidate_info": {
        "commit_hash": "9b747068bad531f0300891e6f569f67d55abb93b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b747068bad531f0300891e6f569f67d55abb93b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqliteInt.h",
          "src/tokenize.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Improvements to \"PRAGMA parser_trace=ON\": Make it a flag pragma, and then use the flag to show the complete SQL text at the beginning of the parse.\n\nFossilOrigin-Name: 507c43537f00d089efb3c3020fb6e826e8f89f3efa2caaa12c5309d35dd0c22e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tokenize.c||src/tokenize.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 916c52dad414b224695d455a42af36f85dff216504c2aa67d1d2c5818cdca8d6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1424: #ifndef NDEBUG",
          "1425:   case PragTyp_PARSER_TRACE: {",
          "1426:     if( zRight ){",
          "1427:       if( sqlite3GetBoolean(zRight, 0) ){",
          "1428:         sqlite3ParserTrace(stdout, \"parser: \");",
          "1429:       }else{",
          "1430:         sqlite3ParserTrace(0, 0);",
          "1431:       }",
          "1432:     }",
          "1433:   }",
          "1434:   break;",
          "1435: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "",
          "[Removed Lines]",
          "52: #define PragTyp_PARSER_TRACE                  44",
          "53: #define PragTyp_STATS                         45",
          "",
          "[Added Lines]",
          "52: #define PragTyp_STATS                         44",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475: #endif",
          "477:  {/* zName:     */ \"parser_trace\",",
          "482: #endif",
          "483: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "484:  {/* zName:     */ \"pragma_list\",",
          "",
          "[Removed Lines]",
          "476: #if defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_PARSER_TRACE)",
          "",
          "[Added Lines]",
          "475: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "476: #if defined(SQLITE_DEBUG)",
          "482: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "572:   pParse->rc = SQLITE_OK;",
          "573:   pParse->zTail = zSql;",
          "574:   assert( pzErrMsg!=0 );",
          "576: #ifdef sqlite3Parser_ENGINEALWAYSONSTACK",
          "577:   pEngine = &sEngine;",
          "578:   sqlite3ParserInit(pEngine, pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575: #ifdef SQLITE_DEBUG",
          "576:   if( db->flags & SQLITE_ParserTrace ){",
          "577:     printf(\"parser: [[[%s]]]\\n\", zSql);",
          "578:     sqlite3ParserTrace(stdout, \"parser: \");",
          "579:   }else{",
          "580:     sqlite3ParserTrace(0, 0);",
          "581:   }",
          "582: #endif",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:   IF:   !defined(SQLITE_OMIT_FOREIGN_KEY) && !defined(SQLITE_OMIT_TRIGGER)",
          "304:   NAME: parser_trace",
          "307:   NAME: case_sensitive_like",
          "308:   FLAG: NoColumns",
          "",
          "[Removed Lines]",
          "305:   IF:   defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_PARSER_TRACE)",
          "",
          "[Added Lines]",
          "305:   TYPE: FLAG",
          "306:   ARG:  SQLITE_ParserTrace",
          "307:   IF:   !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "308:   IF:   defined(SQLITE_DEBUG)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc8b231098ae2cbc7528370ab722579f5d3b23fc",
      "candidate_info": {
        "commit_hash": "bc8b231098ae2cbc7528370ab722579f5d3b23fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc8b231098ae2cbc7528370ab722579f5d3b23fc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/backup.c"
        ],
        "message": "Fix harmless compiler warning seen with MSVC.\n\nFossilOrigin-Name: 5862b83eb36b93016d37e5b86ebb183d891bb553901facab1e5d83e114a38ec3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/backup.c||src/backup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5a8a23ee5f60a31dbd167a0966d1ab3d0f1c07df2251906cb73f23d1f5466b46",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   if( nSrcReserve!=nDestReserve ){",
          "275:     u32 newPgsz = nSrcPgsz;",
          "276:     rc = sqlite3PagerSetPagesize(pDestPager, &newPgsz, nSrcReserve);",
          "278:   }",
          "279: #endif",
          "",
          "[Removed Lines]",
          "277:     if( rc==SQLITE_OK && newPgsz!=nSrcPgsz ) rc = SQLITE_READONLY;",
          "",
          "[Added Lines]",
          "277:     if( rc==SQLITE_OK && newPgsz!=(u32)nSrcPgsz ) rc = SQLITE_READONLY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
      "candidate_info": {
        "commit_hash": "a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a51ddb1ed7ae699d6fc2c49e3dbc3b3c15d49f00",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/filter1.test",
          "test/window2.tcl",
          "test/window2.test",
          "test/window9.test"
        ],
        "message": "Fix a window-functions problem that could occur if an ORDER BY clause contains an alias for a window-function that is not a top-level expression.\n\nFossilOrigin-Name: 1cc6cf6407c6e25aeafeca379a93d0ad2614839c07fb3644e46926fce5f1cfab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/filter1.test||test/filter1.test",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36d35dbd5a80dc4a149ed7409cc4b43712622fc4c6a8915b4fbb62fd1d6b7763",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:       pExpr->u.zToken = sqlite3DbStrDup(db, pExpr->u.zToken);",
          "97:       pExpr->flags |= EP_MemToken;",
          "98:     }",
          "99:     sqlite3DbFree(db, pDup);",
          "100:   }",
          "101:   ExprSetProperty(pExpr, EP_Alias);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "100:       pExpr->y.pWin->pOwner = pExpr;",
          "101:     }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   SELECT a, c, max(b) FILTER (WHERE c='x') FROM t2 GROUP BY a;",
          "135: } {1 x 5 2 6 {}}",
          "137: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #-------------------------------------------------------------------------",
          "138: reset_db",
          "139: do_execsql_test 4.0 {",
          "140:   CREATE TABLE t1(a, b, c);",
          "141:   INSERT INTO t1 VALUES('a', 0, 5);",
          "142:   INSERT INTO t1 VALUES('a', 1, 10);",
          "143:   INSERT INTO t1 VALUES('a', 0, 15);",
          "145:   INSERT INTO t1 VALUES('b', 0, 5);",
          "146:   INSERT INTO t1 VALUES('b', 1, 1000);",
          "147:   INSERT INTO t1 VALUES('b', 0, 5);",
          "149:   INSERT INTO t1 VALUES('c', 0, 1);",
          "150:   INSERT INTO t1 VALUES('c', 1, 2);",
          "151:   INSERT INTO t1 VALUES('c', 0, 3);",
          "152: }",
          "154: do_execsql_test 4.1 {",
          "155:   SELECT avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY h;",
          "156: } {2.0 5.0 10.0}",
          "157: do_execsql_test 4.2 {",
          "158:   SELECT avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY (h+1.0);",
          "159: } {2.0 5.0 10.0}",
          "160: do_execsql_test 4.3 {",
          "161:   SELECT a, avg(c) FILTER (WHERE b!=1) AS h FROM t1 GROUP BY a ORDER BY avg(c);",
          "162: } {c 2.0 a 10.0 b 5.0}",
          "163: do_execsql_test 4.4 {",
          "164:   SELECT a, avg(c) FILTER (WHERE b!=1) FROM t1 GROUP BY a ORDER BY 2",
          "165: } {c 2.0 b 5.0 a 10.0}",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "433: }",
          "436: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435: ==========",
          "437: execsql_test 5.0 {",
          "438:   DROP TABLE IF EXISTS t1;",
          "439:   CREATE TABLE t1(x INTEGER, y INTEGER);",
          "440:   INSERT INTO t1 VALUES(10, 1);",
          "441:   INSERT INTO t1 VALUES(20, 2);",
          "442:   INSERT INTO t1 VALUES(3, 3);",
          "443:   INSERT INTO t1 VALUES(2, 4);",
          "444:   INSERT INTO t1 VALUES(1, 5);",
          "445: }",
          "447: execsql_float_test 5.1 {",
          "448:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;",
          "449: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "902: } {3}",
          "904: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904: #==========================================================================",
          "906: do_execsql_test 5.0 {",
          "907:   DROP TABLE IF EXISTS t1;",
          "908:   CREATE TABLE t1(x INTEGER, y INTEGER);",
          "909:   INSERT INTO t1 VALUES(10, 1);",
          "910:   INSERT INTO t1 VALUES(20, 2);",
          "911:   INSERT INTO t1 VALUES(3, 3);",
          "912:   INSERT INTO t1 VALUES(2, 4);",
          "913:   INSERT INTO t1 VALUES(1, 5);",
          "914: } {}",
          "917: do_test 5.1 {",
          "918:   set myres {}",
          "919:   foreach r [db eval {SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;}] {",
          "920:     lappend myres [format %.4f [set r]]",
          "921:   }",
          "922:   set res2 {7.2000 8.7500 10.0000 11.0000 15.0000}",
          "923:   set i 0",
          "924:   foreach r [set myres] r2 [set res2] {",
          "925:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "926:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "927:     }",
          "928:     incr i",
          "929:   }",
          "930:   set {} {}",
          "931: } {}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   BETWEEN 1 AND 1;",
          "196: } {0}",
          "199: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: #-------------------------------------------------------------------------",
          "199: reset_db",
          "200: do_execsql_test 7.0 {",
          "201:   DROP TABLE IF EXISTS t1;",
          "202:   CREATE TABLE t1(x, y);",
          "203:   INSERT INTO t1 VALUES(10, 1);",
          "204:   INSERT INTO t1 VALUES(20, 2);",
          "205:   INSERT INTO t1 VALUES(3, 3);",
          "206:   INSERT INTO t1 VALUES(2, 4);",
          "207:   INSERT INTO t1 VALUES(1, 5);",
          "208: } {}",
          "211: do_execsql_test 7.1 {",
          "212:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z",
          "213: } {",
          "214:   7.2 8.75 10.0 11.0 15.0",
          "215: }",
          "217: do_execsql_test 7.2 {",
          "218:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY (z IS y);",
          "219: } {",
          "220:   10.0 15.0 11.0 8.75 7.2",
          "221: }",
          "223: do_execsql_test 7.3 {",
          "224:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY (y IS z);",
          "225: } {",
          "226:   10.0 15.0 11.0 8.75 7.2",
          "227: }",
          "229: do_execsql_test 7.4 {",
          "230:   SELECT avg(x) OVER (ORDER BY y) z FROM t1 ORDER BY z + 0.0;",
          "231: } {",
          "232:   7.2 8.75 10.0 11.0 15.0",
          "233: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eefc72d12fa7b76393e9a1092dfc8278260da1d9",
      "candidate_info": {
        "commit_hash": "eefc72d12fa7b76393e9a1092dfc8278260da1d9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eefc72d12fa7b76393e9a1092dfc8278260da1d9",
        "files": [
          "ext/fts5/fts5_tokenize.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid an undefined left-shift operation in fts5 caused by malformed utf-8 text.\n\nFossilOrigin-Name: c3a3a11194586bef80a9d7ca54caae8af30d4e7b464b8bb3d257ba2d2ec4791f",
        "before_after_code_files": [
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:       const unsigned char *zCsr = (const unsigned char*)z;",
          "263:       const unsigned char *zTerm = (const unsigned char*)&z[n];",
          "264:       while( zCsr<zTerm ){",
          "266:         int bToken;",
          "267:         READ_UTF8(zCsr, zTerm, iCode);",
          "268:         if( iCode<128 ){",
          "269:           p->aTokenChar[iCode] = (unsigned char)bTokenChars;",
          "270:         }else{",
          "272:           assert( (bToken==0 || bToken==1) );",
          "273:           assert( (bTokenChars==0 || bTokenChars==1) );",
          "274:           if( bToken!=bTokenChars && sqlite3Fts5UnicodeIsdiacritic(iCode)==0 ){",
          "",
          "[Removed Lines]",
          "265:         int iCode;",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory((u32)iCode)];",
          "",
          "[Added Lines]",
          "265:         u32 iCode;",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory(iCode)];",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a385298df264dbfa6765f63ad8708f74bc8e8a1404239c1049890b39a1bda888",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}