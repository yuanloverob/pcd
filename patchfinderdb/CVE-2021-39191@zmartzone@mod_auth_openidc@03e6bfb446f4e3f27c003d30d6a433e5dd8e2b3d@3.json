{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "953a6f133c2086c35a60c77e29aef16ec351b11b",
      "candidate_info": {
        "commit_hash": "953a6f133c2086c35a60c77e29aef16ec351b11b",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/953a6f133c2086c35a60c77e29aef16ec351b11b",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c"
        ],
        "message": "allow Apache expressions in OIDCPathAuthRequestParams and OIDCPathScope\n\nsee #594; bump to 2.4.11.2rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "702: # Define the OpenID Connect scope(s) that is requested from the OP (eg. \"admin edit\")",
          "703: # on a per-path basis in addition to the per-provider configured scopes (OIDCScope).",
          "705: #OIDCPathScope \"<scope(s)-separated-by-spaces-and-enclosed-in-double-quotes>\"",
          "707: # Extra parameters that will be sent along with the Authorization Request.",
          "708: # These must be URL-query-encoded as in: \"display=popup&prompt=consent\".",
          "709: #",
          "712: # Since version 2.3.11rc1 one can pass on query parameters from the request to the authorization",
          "713: # request by adding e.g. \"foo=#\" which which will dynamically pull in the query parameter value",
          "714: # from the request query parameter and add it to the authentication request to the OP.",
          "715: #",
          "716: # The default is to not add extra parameters.",
          "717: #OIDCPathAuthRequestParams <query-encoded-string>",
          "",
          "[Removed Lines]",
          "704: # NB: multiple scope values must be enclosed in a single pair of double quotes",
          "710: # NB: since version 2.3.0 this can be configured on a per-path basis across all configured Providers.",
          "711: #",
          "",
          "[Added Lines]",
          "704: # Multiple scope values must be enclosed in a single pair of double quotes.",
          "705: # Since version 2.4.11.2 one can use Apache expressions to pass dynamic runtime determined values.",
          "706: # The default is to not add extra scopes.",
          "712: # Since version 2.3.0 this can be configured on a per-path basis across all configured Providers.",
          "716: # Since version 2.4.11.2 one can use Apache expressions to pass dynamic runtime determined values.",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.2rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.2rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:  int pass_refresh_token;",
          "297:  char *path_auth_request_params;",
          "298:  char *path_scope;",
          "299:  int refresh_access_token_before_expiry;",
          "300:  int logout_on_error_refresh;",
          "301:  char *state_cookie_prefix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "300:  ap_expr_info_t *path_auth_request_expr;",
          "301:  ap_expr_info_t *path_scope_expr;",
          "302: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1029: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1035: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1036: static const char* oidc_set_path_expr(cmd_parms *cmd, const char *arg, ap_expr_info_t **expression) {",
          "1037:  const char *rv = NULL;",
          "1038:  const char *expr_err = NULL;",
          "1040:  if (expr_err != NULL) {",
          "1041:   oidc_swarn(cmd->server, \"cannot parse expression: %s\", expr_err);",
          "1043:  }",
          "1044:  return rv;",
          "1045: }",
          "1046: #endif",
          "1048: static const char* oidc_set_path_auth_request_params(cmd_parms *cmd, void *m, const char *arg) {",
          "1049:  oidc_dir_cfg *dir_cfg = (oidc_dir_cfg*) m;",
          "1050:  const char *rv = NULL;",
          "1051:  dir_cfg->path_auth_request_params = apr_pstrdup(cmd->pool, arg);",
          "1052: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1053:  rv = oidc_set_path_expr(cmd, arg, &dir_cfg->path_auth_request_expr);",
          "1054: #endif",
          "1055:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1056: }",
          "1058: static const char* oidc_set_path_scope(cmd_parms *cmd, void *m, const char *arg) {",
          "1059:  oidc_dir_cfg *dir_cfg = (oidc_dir_cfg*) m;",
          "1060:  const char *rv = NULL;",
          "1061:  dir_cfg->path_auth_request_params = apr_pstrdup(cmd->pool, arg);",
          "1062: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1063:  rv = oidc_set_path_expr(cmd, arg, &dir_cfg->path_scope_expr);",
          "1064: #endif",
          "1065:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1066: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2012:  c->pass_refresh_token = OIDC_CONFIG_POS_INT_UNSET;",
          "2013:  c->path_auth_request_params = NULL;",
          "2014:  c->path_scope = NULL;",
          "2015:  c->refresh_access_token_before_expiry = OIDC_CONFIG_POS_INT_UNSET;",
          "2016:  c->logout_on_error_refresh = OIDC_CONFIG_POS_INT_UNSET;",
          "2017:  c->state_cookie_prefix = OIDC_CONFIG_STRING_UNSET;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2052: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2053:  c->path_auth_request_expr = NULL;",
          "2054:  c->path_scope_expr = NULL;",
          "2055: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2185:  return dir_cfg->unauthz_arg;",
          "2186: }",
          "2188: char* oidc_dir_cfg_path_auth_request_params(request_rec *r) {",
          "2192: }",
          "2194: char* oidc_dir_cfg_path_scope(request_rec *r) {",
          "2198: }",
          "",
          "[Removed Lines]",
          "2189:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "2190:    &auth_openidc_module);",
          "2191:  return dir_cfg->path_auth_request_params;",
          "2195:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "2196:    &auth_openidc_module);",
          "2197:  return dir_cfg->path_scope;",
          "",
          "[Added Lines]",
          "2229: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2230: static char *oidc_dir_cfg_path_expr(request_rec *r, const ap_expr_info_t *expression ) {",
          "2231:  const char *expr_result = NULL, *expr_err = NULL;",
          "2232:  if (expression == NULL)",
          "2233:   return NULL;",
          "2234:  expr_result = ap_expr_str_exec(r, expression, &expr_err);",
          "2235:  if (expr_err) {",
          "2236:   oidc_error(r, \"executing expression failed: %s\", expr_err);",
          "2237:   expr_result = NULL;",
          "2238:  }",
          "2239:  return expr_result ? apr_pstrdup(r->pool, expr_result) : NULL;",
          "2240: }",
          "2241: #endif",
          "2244:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config, &auth_openidc_module);",
          "2245:  char *rv = NULL;",
          "2246: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2247:  rv = oidc_dir_cfg_path_expr(r, dir_cfg->path_auth_request_expr);",
          "2248: #endif",
          "2249:  return rv ? rv : dir_cfg->path_auth_request_params;",
          "2253:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config, &auth_openidc_module);",
          "2254:  char *rv = NULL;",
          "2255: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2256:  rv = oidc_dir_cfg_path_expr(r, dir_cfg->path_scope_expr);",
          "2257: #endif",
          "2258:  return rv ? rv : dir_cfg->path_scope;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2269:      base->path_auth_request_params;",
          "2270:  c->path_scope =",
          "2271:    add->path_scope != NULL ? add->path_scope : base->path_scope;",
          "2273:  c->refresh_access_token_before_expiry =",
          "2274:    add->refresh_access_token_before_expiry != OIDC_CONFIG_POS_INT_UNSET ?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2333: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2334:  c->path_auth_request_expr =",
          "2335:    add->path_auth_request_expr != NULL ?",
          "2336:      add->path_auth_request_expr : base->path_auth_request_expr;",
          "2337:  c->path_scope_expr =",
          "2338:    add->path_scope_expr != NULL ?",
          "2339:      add->path_scope_expr : base->path_scope_expr;",
          "2340: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2993:     RSRC_CONF,",
          "2994:     \"Define the OpenID Connect scope that is requested from the OP.\"),",
          "2995:   AP_INIT_TAKE1(OIDCPathScope,",
          "2997:     (void*)APR_OFFSETOF(oidc_dir_cfg, path_scope),",
          "2998:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "2999:     \"Define the OpenID Connect scope that is requested from all providers for a specific path/context.\"),",
          "",
          "[Removed Lines]",
          "2996:     ap_set_string_slot,",
          "",
          "[Added Lines]",
          "3065:     oidc_set_path_scope,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3018:     RSRC_CONF,",
          "3019:     \"Extra parameters that need to be sent in the Authorization Request (must be query-encoded like \\\"display=popup&prompt=consent\\\".\"),",
          "3020:   AP_INIT_TAKE1(OIDCPathAuthRequestParams,",
          "3022:     (void*)APR_OFFSETOF(oidc_dir_cfg, path_auth_request_params),",
          "3023:     RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,",
          "3024:     \"Extra parameters that need to be sent in the Authorization Request (must be query-encoded like \\\"display=popup&prompt=consent\\\".\"),",
          "",
          "[Removed Lines]",
          "3021:     ap_set_string_slot,",
          "",
          "[Added Lines]",
          "3090:     oidc_set_path_auth_request_params,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f082c156da2c410c4024d1c81bac26948d5816a",
      "candidate_info": {
        "commit_hash": "3f082c156da2c410c4024d1c81bac26948d5816a",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/3f082c156da2c410c4024d1c81bac26948d5816a",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "fix OIDCUnAuthAction pass, see #790\n\nbump to 2.4.11.1rc5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.1rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4089:  oidc_debug(r, \"enter: (r->user=%s) require_args=\\\"%s\\\"\", r->user, require_args);",
          "4093:   r->user = NULL;",
          "4103:  json_t *claims = NULL, *id_token = NULL;",
          "",
          "[Removed Lines]",
          "4092:  if ((r->user != NULL) && (strlen(r->user) == 0))",
          "4095:  if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4096:   return AUTHZ_GRANTED;",
          "4097:  if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4098:   return AUTHZ_GRANTED;",
          "4099:  if (r->method_number == M_OPTIONS)",
          "4100:   return AUTHZ_GRANTED;",
          "",
          "[Added Lines]",
          "4092:  if ((r->user != NULL) && (strlen(r->user) == 0)) {",
          "4094:   if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4095:    return AUTHZ_GRANTED;",
          "4096:   if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4097:    return AUTHZ_GRANTED;",
          "4098:   if (r->method_number == M_OPTIONS)",
          "4099:    return AUTHZ_GRANTED;",
          "4100:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4186: int oidc_auth_checker(request_rec *r) {",
          "4190:   r->user = NULL;",
          "4200:  json_t *claims = NULL, *id_token = NULL;",
          "",
          "[Removed Lines]",
          "4189:  if ((r->user != NULL) && (strlen(r->user) == 0))",
          "4192:  if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4193:   return OK;",
          "4194:  if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4195:   return OK;",
          "4196:  if (r->method_number == M_OPTIONS)",
          "4197:   return OK;",
          "",
          "[Added Lines]",
          "4189:  if ((r->user != NULL) && (strlen(r->user) == 0)) {",
          "4191:   if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4192:    return OK;",
          "4193:   if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4194:    return OK;",
          "4195:   if (r->method_number == M_OPTIONS)",
          "4196:    return OK;",
          "4197:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e77cf943f7dd7aa1466a119bde8dfa3e7df1ae30",
      "candidate_info": {
        "commit_hash": "e77cf943f7dd7aa1466a119bde8dfa3e7df1ae30",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/e77cf943f7dd7aa1466a119bde8dfa3e7df1ae30",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/pcre_subst.c",
          "test/test.c"
        ],
        "message": "fix regexp substition crash using OIDCRemoteUserClaim\n\nthanks @nneul; closes #720; bump to 2.4.9.5rc5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/pcre_subst.c||src/pcre_subst.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/pcre_subst.c||src/pcre_subst.c": [
          "File: src/pcre_subst.c -> src/pcre_subst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  int nmat;",
          "150:  int ovec[OIDC_PCRE_MAXCAPTURE * 3];",
          "151:  nmat = pcre_exec(ppat, extra, str, len, offset, options,",
          "153: #ifdef DEBUG_PCRE_SUBST",
          "154:  dumpmatch(str, len, rep, nmat, ovec);",
          "155: #endif",
          "",
          "[Removed Lines]",
          "152:   ovec, sizeof(ovec));",
          "",
          "[Added Lines]",
          "152:   ovec, OIDC_PCRE_MAXCAPTURE * 3);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1495:  return 0;",
          "1496: }",
          "1498: static char * all_tests(apr_pool_t *pool, request_rec *r) {",
          "1499:  char *message;",
          "1500:  TST_RUN(test_public_key_parse, pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1498: static char* test_remote_user(request_rec *r) {",
          "1499:  apr_byte_t rc = FALSE;",
          "1500:  char *remote_user = NULL;",
          "1501:  char *s = NULL;",
          "1502:  json_t *json = NULL;",
          "1504:  s = \"{\\\"upn\\\":\\\"nneul@umsystem.edu\\\"}\";",
          "1505:  rc = oidc_util_decode_json_object(r, s, &json);",
          "1506:  TST_ASSERT(\"test remote user (1) valid JSON\", rc == TRUE);",
          "1507:  rc = oidc_get_remote_user(r, \"upn\", \"^(.*)@umsystem\\\\.edu\", \"$1\", json, &remote_user);",
          "1508:  TST_ASSERT(\"test remote user (1) function result\", rc == TRUE);",
          "1509:  TST_ASSERT_STR(\"remote_user (1) string\", remote_user, \"nneul\");",
          "1510:  json_decref(json);",
          "1512:  s = \"{\\\"email\\\":\\\"nneul@umsystem.edu\\\"}\";",
          "1513:  rc = oidc_util_decode_json_object(r, s, &json);",
          "1514:  TST_ASSERT(\"test remote user (2) valid JSON\", rc == TRUE);",
          "1515:  rc = oidc_get_remote_user(r, \"email\", \"^(.*)@([^.]+)\\\\..+$\", \"$2\\\\$1\", json, &remote_user);",
          "1516:  TST_ASSERT(\"test remote user (2) function result\", rc == TRUE);",
          "1517:  TST_ASSERT_STR(\"remote_user (2) string\", remote_user, \"umsystem\\\\nneul\");",
          "1518:  json_decref(json);",
          "1520:  return 0;",
          "1521: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1531:  TST_RUN(test_decode_json_object, r);",
          "1533: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1534:  TST_RUN(test_authz_worker, r);",
          "1535: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1558:  TST_RUN(test_remote_user, r);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48ad854033e272e8aafb9ff71beb2d49e379a5d9",
      "candidate_info": {
        "commit_hash": "48ad854033e272e8aafb9ff71beb2d49e379a5d9",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/48ad854033e272e8aafb9ff71beb2d49e379a5d9",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "don't apply authz to the redirect URI; bump to 2.4.9.3\n\nfixes ac5686495a51bc93e257e42bfdc9c9c46252feb1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4031:  oidc_debug(r, \"enter: require_args=\\\"%s\\\"\", require_args);",
          "4034:  if (r->user != NULL && strlen(r->user) == 0) {",
          "4035:   r->user = NULL;",
          "4036:   if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4037:    return AUTHZ_GRANTED;",
          "4038:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4033:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "4034:    &auth_openidc_module);",
          "4041:   if (oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c)) == TRUE)",
          "4042:    return AUTHZ_GRANTED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4115: int oidc_auth_checker(request_rec *r) {",
          "4118:  if (r->user != NULL && strlen(r->user) == 0) {",
          "4119:   r->user = NULL;",
          "4120:   if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4121:    return OK;",
          "4122:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4122:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "4123:    &auth_openidc_module);",
          "4130:   if (oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c)) == TRUE)",
          "4131:    return OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0eeec6925fe07a0a841e7c1d37998e742c110c95",
      "candidate_info": {
        "commit_hash": "0eeec6925fe07a0a841e7c1d37998e742c110c95",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/0eeec6925fe07a0a841e7c1d37998e742c110c95",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/oauth.c"
        ],
        "message": "allow for disabling of caching of token introspection results\n\nby setting OIDCOAuthTokenIntrospectionInterval to -1\nthanks @wadahiro\nbump to 2.4.5rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/oauth.c||src/oauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "385: # (can be configured on a per-path basis)",
          "386: # When not defined the value is 0, which means it only expires after the `exp` (or alternative,",
          "387: # see OIDCOAuthTokenExpiryClaim) hint as returned by the Authorization Server.",
          "389: #OIDCOAuthTokenIntrospectionInterval <seconds>",
          "391: # Require a valid SSL server certificate when communicating with the Authorization Server",
          "",
          "[Removed Lines]",
          "388: # When -1 is set, which means it disables caching entirely for highly sensitive environments.",
          "",
          "[Added Lines]",
          "388: # When set to -1, caching of the introspection results is disabled and the token will be introspected",
          "389: # on each request presenting it.",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:  int token_introspection_interval = oidc_cfg_token_introspection_interval(r);",
          "394:  if (token_introspection_interval == -1) {",
          "396:   return TRUE;",
          "397:  }",
          "",
          "[Removed Lines]",
          "395:   oidc_debug(r, \"no caching introspection result\");",
          "",
          "[Added Lines]",
          "395:   oidc_debug(r, \"not caching introspection result\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}