{
  "cve_id": "CVE-2016-10211",
  "cve_desc": "libyara/grammar.y in YARA 3.5.0 allows remote attackers to cause a denial of service (use-after-free and application crash) via a crafted rule that is mishandled in the yr_parser_lookup_loop_variable function.",
  "repo": "VirusTotal/yara",
  "patch_hash": "890c3f850293176c0e996a602ffa88b315f4e98f",
  "patch_info": {
    "commit_hash": "890c3f850293176c0e996a602ffa88b315f4e98f",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/890c3f850293176c0e996a602ffa88b315f4e98f",
    "files": [
      "libyara/grammar.c",
      "libyara/grammar.y"
    ],
    "message": "Fix issue #575",
    "before_after_code_files": [
      "libyara/grammar.c||libyara/grammar.c",
      "libyara/grammar.y||libyara/grammar.y"
    ]
  },
  "patch_diff": {
    "libyara/grammar.c||libyara/grammar.c": [
      "File: libyara/grammar.c -> libyara/grammar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "547: #define YYFINAL  2",
      "552: #define YYNTOKENS  72",
      "554: #define YYNNTS  41",
      "",
      "[Removed Lines]",
      "549: #define YYLAST   408",
      "556: #define YYNRULES  121",
      "558: #define YYNSTATES  209",
      "",
      "[Added Lines]",
      "549: #define YYLAST   406",
      "556: #define YYNRULES  122",
      "558: #define YYNSTATES  210",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "612:      472,   485,   502,   503,   509,   508,   524,   523,   539,   553,",
      "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
      "614:      802,   806,   831,   867,   913,   935,   944,   953,   968,   980,",
      "622: };",
      "623: #endif",
      "",
      "[Removed Lines]",
      "615:      994,  1007,  1019,  1049,  1018,  1163,  1162,  1241,  1247,  1254,",
      "616:     1253,  1316,  1315,  1376,  1385,  1394,  1403,  1412,  1421,  1430,",
      "617:     1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,  1514,",
      "618:     1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,  1579,",
      "619:     1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,  1752,",
      "620:     1771,  1789,  1807,  1825,  1851,  1869,  1879,  1889,  1899,  1909,",
      "621:     1919,  1929",
      "",
      "[Added Lines]",
      "615:      994,  1007,  1018,  1024,  1054,  1023,  1168,  1167,  1246,  1252,",
      "616:     1259,  1258,  1321,  1320,  1381,  1390,  1399,  1408,  1417,  1426,",
      "617:     1435,  1439,  1447,  1448,  1453,  1475,  1487,  1503,  1502,  1508,",
      "618:     1519,  1520,  1525,  1532,  1543,  1544,  1548,  1556,  1560,  1570,",
      "619:     1584,  1600,  1610,  1619,  1644,  1656,  1668,  1684,  1696,  1712,",
      "620:     1757,  1776,  1794,  1812,  1830,  1856,  1874,  1884,  1894,  1904,",
      "621:     1914,  1924,  1934",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "672: #define yypact_value_is_default(Yystate) \\",
      "673:   (!!((Yystate) == (-73)))",
      "677: #define yytable_value_is_error(Yytable_value) \\",
      "678:   0",
      "",
      "[Removed Lines]",
      "675: #define YYTABLE_NINF -94",
      "",
      "[Added Lines]",
      "675: #define YYTABLE_NINF -95",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "682: static const yytype_int16 yypact[] =",
      "683: {",
      "705: };",
      "",
      "[Removed Lines]",
      "684:      -73,    79,   -73,   -32,    -4,   -73,   -73,    94,   -73,   -73,",
      "685:      -73,   -73,    13,   -73,   -73,   -73,   -73,    -8,    72,     6,",
      "686:      -73,    78,   111,   -73,    61,   122,   123,    82,   -73,    90,",
      "687:      123,   -73,   147,   150,    16,   -73,    96,   147,   -73,   101,",
      "688:       97,   -73,   -73,   -73,   -73,   151,    53,   -73,    48,   -73,",
      "689:      -73,   -73,   149,   145,   -73,    -9,   -73,   103,   107,   -73,",
      "690:      -73,   106,   -73,   -73,   -73,   -73,   -73,   -73,   110,   -73,",
      "691:      -73,   135,    48,   135,    48,   -33,   -73,    64,   -73,   144,",
      "692:      306,   -73,   -73,   135,   108,   135,   135,   135,   135,    -7,",
      "693:      322,   -73,   -73,   -73,    64,   117,   163,   168,   135,    48,",
      "694:      -73,   -73,    -6,   167,   135,   135,   135,   135,   135,   135,",
      "695:      135,   135,   135,   135,   135,   135,   135,   135,   135,   135,",
      "696:      135,    86,    86,   322,   135,   -73,   243,   261,   183,   203,",
      "697:      159,    -6,   -73,   -73,   -73,   279,   121,   125,    95,    48,",
      "698:       48,   -73,   -73,   -73,   -73,   322,   337,   351,   -43,   322,",
      "699:      322,   322,   322,   322,   322,    40,    40,    58,    58,   -73,",
      "700:      -73,   -73,   -73,   -73,   -73,   -73,   -73,   129,   -73,   -73,",
      "701:      -73,   -73,   128,   -73,   -73,    48,   152,   -73,    15,   135,",
      "702:      131,   -73,    95,   -73,   -73,    71,   -73,   223,   135,   133,",
      "703:      -73,   132,   -73,    15,   -73,    73,   129,   -73,    48,   -73,",
      "704:      -73,   135,   134,    31,   322,    48,   -73,    49,   -73",
      "",
      "[Added Lines]",
      "684:      -73,    90,   -73,   -32,   -10,   -73,   -73,    93,   -73,   -73,",
      "685:      -73,   -73,     1,   -73,   -73,   -73,   -73,   -49,     7,   -36,",
      "686:      -73,    20,    26,   -73,   -28,    92,    46,     4,   -73,    40,",
      "687:       46,   -73,   100,   119,    16,   -73,    72,   100,   -73,    77,",
      "688:       83,   -73,   -73,   -73,   -73,   134,    59,   -73,    48,   -73,",
      "689:      -73,   -73,   133,   136,   -73,   -18,   -73,    88,    95,   -73,",
      "690:      -73,    91,   -73,   -73,   -73,   -73,   -73,   -73,   102,   -73,",
      "691:      -73,   126,    48,   126,    48,   -44,   -73,    85,   -73,   127,",
      "692:      297,   -73,   -73,   126,   110,   126,   126,   126,   126,     2,",
      "693:      313,   -73,   -73,   -73,    85,   111,   154,   172,   126,    48,",
      "694:      -73,   -73,    -6,   162,   126,   126,   126,   126,   126,   126,",
      "695:      126,   126,   126,   126,   126,   126,   126,   126,   126,   126,",
      "696:      126,    60,    60,   313,   126,   -73,   234,   252,   174,   194,",
      "697:      -73,   153,    -6,   -73,   -73,   -73,   270,   117,   120,   108,",
      "698:       48,    48,   -73,   -73,   -73,   -73,   313,   328,   342,   349,",
      "699:      313,   313,   313,   313,   313,   313,   113,   113,    53,    53,",
      "700:      -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   121,   -73,",
      "701:      -73,   -73,   -73,   124,   -73,   -73,    48,   151,   -73,    -1,",
      "702:      126,   125,   -73,   108,   -73,   -73,    18,   -73,   214,   126,",
      "703:      129,   -73,   143,   -73,    -1,   -73,    63,   121,   -73,    48,",
      "704:      -73,   -73,   126,   144,    31,   313,    48,   -73,    33,   -73",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "714:       23,    22,    12,    24,     0,    14,     0,     0,    10,     0,",
      "715:       13,    25,     0,     0,     0,    26,     0,    15,    32,     0,",
      "716:        0,    28,    27,    30,    31,     0,    34,    33,     0,    11,",
      "723:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,",
      "724:        0,    35,    37,    60,     0,    61,     0,     0,     0,     0,",
      "733: };",
      "736: static const yytype_int16 yypgoto[] =",
      "737: {",
      "742:      -67",
      "743: };",
      "",
      "[Removed Lines]",
      "717:       29,    38,     0,     0,    45,    59,   103,   105,   107,   100,",
      "718:      101,     0,   102,    53,    97,    98,    94,    95,     0,    55,",
      "719:       56,     0,     0,     0,     0,   108,   121,    16,    54,     0,",
      "720:       79,    39,    39,     0,     0,     0,     0,     0,     0,     0,",
      "721:       93,   109,    68,   118,     0,    54,    79,     0,     0,    49,",
      "722:       71,    69,     0,     0,     0,     0,     0,     0,     0,     0,",
      "725:        0,     0,    80,    96,    46,     0,     0,    50,    51,     0,",
      "726:        0,    88,    86,    67,    57,    58,   117,   115,   116,    77,",
      "727:       78,    73,    75,    74,    76,   119,   120,   110,   111,   112,",
      "728:      113,   114,    42,    41,    43,    44,    40,     0,   104,   106,",
      "729:       99,    62,     0,    47,    48,     0,    72,    70,     0,     0,",
      "730:        0,    65,    52,    91,    92,     0,    89,     0,     0,     0,",
      "731:       82,     0,    87,     0,    83,     0,    84,    63,     0,    90,",
      "732:       81,     0,     0,     0,    85,     0,    66,     0,    64",
      "738:      -73,   -73,   199,   218,   -73,   -73,   -73,   -73,   -73,   -73,",
      "739:      -73,   -73,   -73,   -73,   192,   -73,   186,   -73,   -73,   142,",
      "740:      -73,   -73,   -73,   -73,   126,   -48,   -72,   -73,   -73,   -73,",
      "741:      -73,   -73,   -73,    50,   -73,   100,   -73,   -73,    35,   164,",
      "",
      "[Added Lines]",
      "717:       29,    38,     0,     0,    45,    59,   104,   106,   108,   101,",
      "718:      102,     0,   103,    53,    98,    99,    95,    96,     0,    55,",
      "719:       56,     0,     0,     0,     0,   109,   122,    16,    54,     0,",
      "720:       80,    39,    39,     0,     0,     0,     0,     0,     0,     0,",
      "721:       94,   110,    69,   119,     0,    54,    80,     0,     0,    49,",
      "722:       72,    70,     0,     0,     0,     0,     0,     0,     0,     0,",
      "725:       62,     0,     0,    81,    97,    46,     0,     0,    50,    51,",
      "726:        0,     0,    89,    87,    68,    57,    58,   118,   116,   117,",
      "727:       78,    79,    74,    76,    75,    77,   120,   121,   111,   112,",
      "728:      113,   114,   115,    42,    41,    43,    44,    40,     0,   105,",
      "729:      107,   100,    63,     0,    47,    48,     0,    73,    71,     0,",
      "730:        0,     0,    66,    52,    92,    93,     0,    90,     0,     0,",
      "731:        0,    83,     0,    88,     0,    84,     0,    85,    64,     0,",
      "732:       91,    82,     0,     0,     0,    86,     0,    67,     0,    65",
      "738:      -73,   -73,   211,   212,   -73,   -73,   -73,   -73,   -73,   -73,",
      "739:      -73,   -73,   -73,   -73,   189,   -73,   183,   -73,   -73,   139,",
      "740:      -73,   -73,   -73,   -73,   130,   -48,   -72,   -73,   -73,   -73,",
      "741:      -73,   -73,   -73,    41,   -73,   103,   -73,   -73,    29,   164,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "747: {",
      "748:       -1,     1,     5,     6,    17,    33,    25,    28,    40,     7,",
      "749:       15,    19,    21,    30,    31,    37,    38,    52,    53,   121,",
      "752:       80",
      "753: };",
      "",
      "[Removed Lines]",
      "750:      166,    75,   136,   137,    76,    94,    78,   180,   202,   191,",
      "751:      140,   139,   189,   125,   195,   143,   178,   185,   186,    79,",
      "",
      "[Added Lines]",
      "750:      167,    75,   137,   138,    76,    94,    78,   181,   203,   192,",
      "751:      141,   140,   190,   125,   196,   144,   179,   186,   187,    79,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "758: static const yytype_int16 yytable[] =",
      "759: {",
      "797:        0,     0,     0,   114,   115,   116,   117,   118,   119,   120,",
      "801: };",
      "803: static const yytype_int16 yycheck[] =",
      "804: {",
      "809:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,",
      "842:       -1,    -1,    -1,    51,    52,    53,    54,    55,    56,    57,",
      "846: };",
      "",
      "[Removed Lines]",
      "760:       77,    90,    95,   130,    91,     4,    93,    96,   114,   115,",
      "761:      116,   117,   118,   119,   120,    11,   123,    83,   126,   127,",
      "762:      128,   129,    84,    16,    92,   131,   183,   138,   141,     8,",
      "763:      184,   135,    41,    97,    98,    42,    99,   145,   146,   147,",
      "764:      148,   149,   150,   151,   152,   153,   154,   155,   156,   157,",
      "765:      158,   159,   160,   161,    43,    44,    18,   167,    54,    55,",
      "766:       56,    57,    58,   142,    59,    60,    61,    62,    22,    63,",
      "767:       45,   100,   101,    51,   -36,    64,    65,    66,    67,     2,",
      "768:        3,    68,    20,   -17,   -17,   -17,    69,    70,    23,   100,",
      "769:      101,   176,   177,   116,   117,   118,   119,   120,    12,    13,",
      "770:       14,   206,    71,   182,   100,   101,    72,    73,   162,   163,",
      "771:      164,   165,   187,   118,   119,   120,     4,    74,    24,   208,",
      "772:       54,   196,    56,    57,    58,    26,    59,    60,    61,    62,",
      "773:       27,    63,   179,    29,   204,   -54,   -54,    64,    65,    66,",
      "774:       67,   192,   193,   200,   201,    54,    32,    56,    57,    58,",
      "775:      203,    59,    60,    61,    62,    34,    63,   207,    36,    39,",
      "776:       49,    46,    64,    65,    71,    48,    82,    50,    81,    73,",
      "777:       85,   105,   106,   107,    86,    87,   102,   124,   134,    88,",
      "778:      114,   115,   116,   117,   118,   119,   120,   132,    63,    71,",
      "779:      171,   174,   181,   101,    73,   -93,   175,   197,   103,   104,",
      "780:      188,   198,     9,   205,    88,   105,   106,   107,   108,   109,",
      "781:      110,   111,   112,   113,   114,   115,   116,   117,   118,   119,",
      "782:      120,    10,    35,    47,   122,   105,   106,   107,   199,   144,",
      "783:      190,   172,    89,   133,   114,   115,   116,   117,   118,   119,",
      "784:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "785:        0,     0,     0,   170,   114,   115,   116,   117,   118,   119,",
      "786:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "787:        0,     0,     0,   133,   114,   115,   116,   117,   118,   119,",
      "788:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
      "789:        0,     0,     0,   194,   114,   115,   116,   117,   118,   119,",
      "790:      120,     0,     0,   105,   106,   107,     0,     0,     0,     0,",
      "791:        0,   168,   114,   115,   116,   117,   118,   119,   120,     0,",
      "792:        0,   105,   106,   107,     0,     0,     0,     0,     0,   169,",
      "793:      114,   115,   116,   117,   118,   119,   120,     0,   -93,     0,",
      "794:        0,   103,   104,     0,     0,     0,     0,   173,   105,   106,",
      "795:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,",
      "796:      117,   118,   119,   120,   105,   106,   107,     0,     0,     0,",
      "798:      106,   107,     0,     0,     0,     0,     0,     0,   114,   115,",
      "799:      116,   117,   118,   119,   120,   107,     0,     0,     0,     0,",
      "800:        0,     0,   114,   115,   116,   117,   118,   119,   120",
      "805:       48,    68,    74,    10,    71,    37,    73,    74,    51,    52,",
      "806:       53,    54,    55,    56,    57,    19,    83,    26,    85,    86,",
      "807:       87,    88,    31,    10,    72,    32,    11,    99,    34,    61,",
      "808:       15,    98,    16,    66,    67,    19,    69,   104,   105,   106,",
      "810:      117,   118,   119,   120,    38,    39,    64,   124,    10,    11,",
      "811:       12,    13,    14,    69,    16,    17,    18,    19,    62,    21,",
      "812:       54,    40,    41,    20,    21,    27,    28,    29,    30,     0,",
      "813:        1,    33,    10,     4,     5,     6,    38,    39,    10,    40,",
      "814:       41,   139,   140,    53,    54,    55,    56,    57,     4,     5,",
      "815:        6,    70,    54,   175,    40,    41,    58,    59,    22,    23,",
      "816:       24,    25,   179,    55,    56,    57,    37,    69,     7,    70,",
      "817:       10,   188,    12,    13,    14,    64,    16,    17,    18,    19,",
      "818:        8,    21,     3,    10,   201,    40,    41,    27,    28,    29,",
      "819:       30,    70,    71,    70,    71,    10,    64,    12,    13,    14,",
      "820:      198,    16,    17,    18,    19,    65,    21,   205,    11,     9,",
      "821:       63,    65,    27,    28,    54,    64,    21,    16,    19,    59,",
      "822:       67,    42,    43,    44,    67,    69,    32,    69,    10,    69,",
      "823:       51,    52,    53,    54,    55,    56,    57,    70,    21,    54,",
      "824:       31,    70,    64,    41,    59,    32,    71,    64,    35,    36,",
      "825:       69,    69,     3,    69,    69,    42,    43,    44,    45,    46,",
      "826:       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,",
      "827:       57,     3,    30,    37,    82,    42,    43,    44,   193,   103,",
      "828:      180,   131,    68,    70,    51,    52,    53,    54,    55,    56,",
      "829:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "830:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "831:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "832:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "833:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
      "834:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
      "835:       57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,",
      "836:       -1,    68,    51,    52,    53,    54,    55,    56,    57,    -1,",
      "837:       -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    68,",
      "838:       51,    52,    53,    54,    55,    56,    57,    -1,    32,    -1,",
      "839:       -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,    43,",
      "840:       44,    45,    46,    47,    48,    49,    50,    51,    52,    53,",
      "841:       54,    55,    56,    57,    42,    43,    44,    -1,    -1,    -1,",
      "843:       43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,",
      "844:       53,    54,    55,    56,    57,    44,    -1,    -1,    -1,    -1,",
      "845:       -1,    -1,    51,    52,    53,    54,    55,    56,    57",
      "",
      "[Added Lines]",
      "760:       77,    90,    95,   130,    91,     4,    93,    96,    83,    11,",
      "761:      184,    16,   131,    84,   185,    18,   123,    20,   126,   127,",
      "762:      128,   129,    97,    98,    92,    99,    22,   139,   142,     8,",
      "763:       23,   136,    41,    24,   132,    42,    26,   146,   147,   148,",
      "764:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,",
      "765:      159,   160,   161,   162,    43,    44,    29,   168,    54,    55,",
      "766:       56,    57,    58,   143,    59,    60,    61,    62,    32,    63,",
      "767:       45,   100,   101,   100,   101,    64,    65,    66,    67,    51,",
      "768:      -36,    68,   163,   164,   165,   166,    69,    70,   193,   194,",
      "769:        2,     3,   177,   178,   -17,   -17,   -17,    12,    13,    14,",
      "770:       27,   207,    71,   209,   183,    34,    72,    73,   118,   119,",
      "771:      120,    36,    54,   188,    56,    57,    58,    74,    59,    60,",
      "772:       61,    62,   197,    63,   180,   100,   101,     4,    39,    64,",
      "773:       65,    66,    67,   201,   202,   205,    54,    46,    56,    57,",
      "774:       58,    48,    59,    60,    61,    62,    49,    63,   -54,   -54,",
      "775:       50,   204,    81,    64,    65,    85,    71,    82,   208,   102,",
      "776:       87,    73,    86,   105,   106,   107,   116,   117,   118,   119,",
      "777:      120,    88,   114,   115,   116,   117,   118,   119,   120,   124,",
      "778:       71,   133,   135,    63,   172,    73,   -94,   175,   182,   103,",
      "779:      104,   176,   101,   198,   189,    88,   105,   106,   107,   108,",
      "780:      109,   110,   111,   112,   113,   114,   115,   116,   117,   118,",
      "781:      119,   120,   199,   206,     9,    10,   105,   106,   107,    35,",
      "782:       47,   122,   191,   200,   134,   114,   115,   116,   117,   118,",
      "783:      119,   120,    89,   145,     0,   173,   105,   106,   107,     0,",
      "784:        0,     0,     0,     0,   171,   114,   115,   116,   117,   118,",
      "785:      119,   120,     0,     0,     0,     0,   105,   106,   107,     0,",
      "786:        0,     0,     0,     0,   134,   114,   115,   116,   117,   118,",
      "787:      119,   120,     0,     0,     0,     0,   105,   106,   107,     0,",
      "788:        0,     0,     0,     0,   195,   114,   115,   116,   117,   118,",
      "789:      119,   120,     0,     0,   105,   106,   107,     0,     0,     0,",
      "790:        0,     0,   169,   114,   115,   116,   117,   118,   119,   120,",
      "791:        0,     0,   105,   106,   107,     0,     0,     0,     0,     0,",
      "792:      170,   114,   115,   116,   117,   118,   119,   120,     0,   -94,",
      "793:        0,     0,   103,   104,     0,     0,     0,     0,   174,   105,",
      "794:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,",
      "795:      116,   117,   118,   119,   120,   105,   106,   107,     0,     0,",
      "796:        0,     0,     0,     0,   114,   115,   116,   117,   118,   119,",
      "797:      120,   106,   107,     0,     0,     0,     0,     0,     0,   114,",
      "798:      115,   116,   117,   118,   119,   120,   107,     0,     0,     0,",
      "800:      114,   115,   116,   117,   118,   119,   120",
      "805:       48,    68,    74,     1,    71,    37,    73,    74,    26,    19,",
      "806:       11,    10,    10,    31,    15,    64,    83,    10,    85,    86,",
      "807:       87,    88,    66,    67,    72,    69,    62,    99,    34,    61,",
      "808:       10,    98,    16,     7,    32,    19,    64,   104,   105,   106,",
      "810:      117,   118,   119,   120,    38,    39,    10,   124,    10,    11,",
      "811:       12,    13,    14,    69,    16,    17,    18,    19,    64,    21,",
      "812:       54,    40,    41,    40,    41,    27,    28,    29,    30,    20,",
      "813:       21,    33,    22,    23,    24,    25,    38,    39,    70,    71,",
      "814:        0,     1,   140,   141,     4,     5,     6,     4,     5,     6,",
      "815:        8,    70,    54,    70,   176,    65,    58,    59,    55,    56,",
      "816:       57,    11,    10,   180,    12,    13,    14,    69,    16,    17,",
      "817:       18,    19,   189,    21,     3,    40,    41,    37,     9,    27,",
      "818:       28,    29,    30,    70,    71,   202,    10,    65,    12,    13,",
      "819:       14,    64,    16,    17,    18,    19,    63,    21,    40,    41,",
      "820:       16,   199,    19,    27,    28,    67,    54,    21,   206,    32,",
      "821:       69,    59,    67,    42,    43,    44,    53,    54,    55,    56,",
      "822:       57,    69,    51,    52,    53,    54,    55,    56,    57,    69,",
      "823:       54,    70,    10,    21,    31,    59,    32,    70,    64,    35,",
      "824:       36,    71,    41,    64,    69,    69,    42,    43,    44,    45,",
      "825:       46,    47,    48,    49,    50,    51,    52,    53,    54,    55,",
      "826:       56,    57,    69,    69,     3,     3,    42,    43,    44,    30,",
      "827:       37,    82,   181,   194,    70,    51,    52,    53,    54,    55,",
      "828:       56,    57,    68,   103,    -1,   132,    42,    43,    44,    -1,",
      "829:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "830:       56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,",
      "831:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "832:       56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,",
      "833:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
      "834:       56,    57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,",
      "835:       -1,    -1,    68,    51,    52,    53,    54,    55,    56,    57,",
      "836:       -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,",
      "837:       68,    51,    52,    53,    54,    55,    56,    57,    -1,    32,",
      "838:       -1,    -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,",
      "839:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,",
      "840:       53,    54,    55,    56,    57,    42,    43,    44,    -1,    -1,",
      "841:       -1,    -1,    -1,    -1,    51,    52,    53,    54,    55,    56,",
      "842:       57,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,",
      "843:       52,    53,    54,    55,    56,    57,    44,    -1,    -1,    -1,",
      "845:       51,    52,    53,    54,    55,    56,    57",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "862:       40,    41,    32,    35,    36,    42,    43,    44,    45,    46,",
      "863:       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,",
      "864:       57,    91,    91,   112,    69,   105,   112,   112,   112,   112,",
      "867:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "873: };",
      "",
      "[Removed Lines]",
      "865:       10,    32,    70,    70,    10,   112,    94,    95,    98,   103,",
      "866:      102,    34,    69,   107,    96,   112,   112,   112,   112,   112,",
      "868:      112,   112,    22,    23,    24,    25,    92,   112,    68,    68,",
      "869:       70,    31,   107,    68,    70,    71,    97,    97,   108,     3,",
      "870:       99,    64,    98,    11,    15,   109,   110,   112,    69,   104,",
      "871:      105,   101,    70,    71,    70,   106,   112,    64,    69,   110,",
      "872:       70,    71,   100,    97,   112,    69,    70,    97,    70",
      "",
      "[Added Lines]",
      "865:        1,    10,    32,    70,    70,    10,   112,    94,    95,    98,",
      "866:      103,   102,    34,    69,   107,    96,   112,   112,   112,   112,",
      "868:      112,   112,   112,    22,    23,    24,    25,    92,   112,    68,",
      "869:       68,    70,    31,   107,    68,    70,    71,    97,    97,   108,",
      "870:        3,    99,    64,    98,    11,    15,   109,   110,   112,    69,",
      "871:      104,   105,   101,    70,    71,    70,   106,   112,    64,    69,",
      "872:      110,    70,    71,   100,    97,   112,    69,    70,    97,    70",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "881:       86,    86,    87,    87,    89,    88,    90,    88,    88,    91,",
      "882:       91,    92,    92,    92,    92,    93,    93,    93,    93,    94,",
      "883:       94,    95,    95,    96,    97,    98,    98,    98,    98,    98,",
      "888:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "889:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
      "891: };",
      "",
      "[Removed Lines]",
      "884:       98,    98,    99,   100,    98,   101,    98,    98,    98,   102,",
      "885:       98,   103,    98,    98,    98,    98,    98,    98,    98,    98,",
      "886:       98,   104,   104,   105,   106,   106,   108,   107,   107,   109,",
      "887:      109,   110,   110,   111,   111,   111,   112,   112,   112,   112,",
      "890:      112,   112",
      "",
      "[Added Lines]",
      "884:       98,    98,    98,    99,   100,    98,   101,    98,    98,    98,",
      "885:      102,    98,   103,    98,    98,    98,    98,    98,    98,    98,",
      "886:       98,    98,   104,   104,   105,   106,   106,   108,   107,   107,",
      "887:      109,   109,   110,   110,   111,   111,   111,   112,   112,   112,",
      "890:      112,   112,   112",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "899:        3,     3,     1,     2,     0,     5,     0,     5,     3,     0,",
      "900:        2,     1,     1,     1,     1,     1,     3,     4,     4,     0,",
      "901:        1,     1,     3,     1,     1,     1,     1,     3,     3,     1,",
      "909: };",
      "",
      "[Removed Lines]",
      "902:        3,     3,     0,     0,    11,     0,     9,     3,     2,     0,",
      "903:        4,     0,     4,     3,     3,     3,     3,     3,     3,     1,",
      "904:        3,     3,     1,     5,     1,     3,     0,     4,     1,     1,",
      "905:        3,     1,     1,     1,     1,     1,     3,     1,     1,     4,",
      "906:        1,     1,     1,     1,     4,     1,     4,     1,     1,     2,",
      "907:        3,     3,     3,     3,     3,     3,     3,     3,     2,     3,",
      "908:        3,     1",
      "",
      "[Added Lines]",
      "902:        3,     3,     3,     0,     0,    11,     0,     9,     3,     2,",
      "903:        0,     4,     0,     4,     3,     3,     3,     3,     3,     3,",
      "904:        1,     3,     3,     1,     5,     1,     3,     0,     4,     1,",
      "905:        1,     3,     1,     1,     1,     1,     1,     3,     1,     1,",
      "906:        4,     1,     1,     1,     1,     4,     1,     4,     1,     1,",
      "907:        2,     3,     3,     3,     3,     3,     3,     3,     3,     2,",
      "908:        3,     3,     1",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2587:   case 62:",
      "2589:     {",
      "2590:         int var_index;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2589:     {",
      "2590:         compiler->loop_depth--;",
      "2591:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "2592:       }",
      "2594:     break;",
      "2596:   case 63:",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2616:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "2617:       }",
      "2619:     break;",
      "2623:     {",
      "2624:         int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;",
      "2625:         uint8_t* addr;",
      "",
      "[Removed Lines]",
      "2621:   case 63:",
      "",
      "[Added Lines]",
      "2630:   case 64:",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2654:         compiler->loop_identifier[compiler->loop_depth] = (yyvsp[-4].c_string);",
      "2655:         compiler->loop_depth++;",
      "2656:       }",
      "2658:     break;",
      "2662:     {",
      "2663:         int mem_offset;",
      "",
      "[Removed Lines]",
      "2660:   case 64:",
      "",
      "[Added Lines]",
      "2669:   case 65:",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "2738:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2739:       }",
      "2741:     break;",
      "2745:     {",
      "2746:         int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;",
      "2747:         uint8_t* addr;",
      "",
      "[Removed Lines]",
      "2743:   case 65:",
      "",
      "[Added Lines]",
      "2752:   case 66:",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "2771:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "2772:         compiler->loop_depth++;",
      "2773:       }",
      "2775:     break;",
      "2779:     {",
      "2780:         int mem_offset;",
      "",
      "[Removed Lines]",
      "2777:   case 66:",
      "",
      "[Added Lines]",
      "2786:   case 67:",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "2824:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2826:       }",
      "2828:     break;",
      "2832:     {",
      "2833:         yr_parser_emit(yyscanner, OP_OF, NULL);",
      "2835:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2836:       }",
      "2838:     break;",
      "2842:     {",
      "2843:         yr_parser_emit(yyscanner, OP_NOT, NULL);",
      "2845:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2846:       }",
      "2848:     break;",
      "2852:     {",
      "2853:         YR_FIXUP* fixup;",
      "2854:         void* jmp_destination_addr;",
      "",
      "[Removed Lines]",
      "2830:   case 67:",
      "2840:   case 68:",
      "2850:   case 69:",
      "",
      "[Added Lines]",
      "2839:   case 68:",
      "2849:   case 69:",
      "2859:   case 70:",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "2874:         fixup->next = compiler->fixup_stack_head;",
      "2875:         compiler->fixup_stack_head = fixup;",
      "2876:       }",
      "2878:     break;",
      "2882:     {",
      "2883:         YR_FIXUP* fixup;",
      "2884:         uint8_t* and_addr;",
      "",
      "[Removed Lines]",
      "2880:   case 70:",
      "",
      "[Added Lines]",
      "2889:   case 71:",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "2915:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2916:       }",
      "2918:     break;",
      "2922:     {",
      "2923:         YR_FIXUP* fixup;",
      "2924:         void* jmp_destination_addr;",
      "",
      "[Removed Lines]",
      "2920:   case 71:",
      "",
      "[Added Lines]",
      "2929:   case 72:",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "2943:         fixup->next = compiler->fixup_stack_head;",
      "2944:         compiler->fixup_stack_head = fixup;",
      "2945:       }",
      "2947:     break;",
      "2951:     {",
      "2952:         YR_FIXUP* fixup;",
      "2953:         uint8_t* or_addr;",
      "",
      "[Removed Lines]",
      "2949:   case 72:",
      "",
      "[Added Lines]",
      "2958:   case 73:",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "2984:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2985:       }",
      "2987:     break;",
      "2991:     {",
      "2992:         compiler->last_result = yr_parser_reduce_operation(",
      "2993:             yyscanner, \"<\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "2989:   case 73:",
      "",
      "[Added Lines]",
      "2998:   case 74:",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "2997:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "2998:       }",
      "3000:     break;",
      "3004:     {",
      "3005:         compiler->last_result = yr_parser_reduce_operation(",
      "3006:             yyscanner, \">\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3002:   case 74:",
      "",
      "[Added Lines]",
      "3011:   case 75:",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "3010:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3011:       }",
      "3013:     break;",
      "3017:     {",
      "3018:         compiler->last_result = yr_parser_reduce_operation(",
      "3019:             yyscanner, \"<=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3015:   case 75:",
      "",
      "[Added Lines]",
      "3024:   case 76:",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "3023:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3024:       }",
      "3026:     break;",
      "3030:     {",
      "3031:         compiler->last_result = yr_parser_reduce_operation(",
      "3032:             yyscanner, \">=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3028:   case 76:",
      "",
      "[Added Lines]",
      "3037:   case 77:",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "3036:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3037:       }",
      "3039:     break;",
      "3043:     {",
      "3044:         compiler->last_result = yr_parser_reduce_operation(",
      "3045:             yyscanner, \"==\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3041:   case 77:",
      "",
      "[Added Lines]",
      "3050:   case 78:",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "3049:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3050:       }",
      "3052:     break;",
      "3056:     {",
      "3057:         compiler->last_result = yr_parser_reduce_operation(",
      "3058:             yyscanner, \"!=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3054:   case 78:",
      "",
      "[Added Lines]",
      "3063:   case 79:",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "3062:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
      "3063:       }",
      "3065:     break;",
      "3069:     {",
      "3070:         (yyval.expression) = (yyvsp[0].expression);",
      "3071:       }",
      "3073:     break;",
      "3077:     {",
      "3078:         (yyval.expression) = (yyvsp[-1].expression);",
      "3079:       }",
      "3081:     break;",
      "3085:     { (yyval.integer) = INTEGER_SET_ENUMERATION; }",
      "3087:     break;",
      "3091:     { (yyval.integer) = INTEGER_SET_RANGE; }",
      "3093:     break;",
      "3097:     {",
      "3098:         if ((yyvsp[-3].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3099:         {",
      "",
      "[Removed Lines]",
      "3067:   case 79:",
      "3075:   case 80:",
      "3083:   case 81:",
      "3089:   case 82:",
      "3095:   case 83:",
      "",
      "[Added Lines]",
      "3076:   case 80:",
      "3084:   case 81:",
      "3092:   case 82:",
      "3098:   case 83:",
      "3104:   case 84:",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "3112:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3113:       }",
      "3115:     break;",
      "3119:     {",
      "3120:         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3121:         {",
      "",
      "[Removed Lines]",
      "3117:   case 84:",
      "",
      "[Added Lines]",
      "3126:   case 85:",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "3128:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3129:       }",
      "3131:     break;",
      "3135:     {",
      "3136:         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)",
      "3137:         {",
      "",
      "[Removed Lines]",
      "3133:   case 85:",
      "",
      "[Added Lines]",
      "3142:   case 86:",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "3143:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3144:       }",
      "3146:     break;",
      "3150:     {",
      "3152:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3153:       }",
      "3155:     break;",
      "3159:     {",
      "3160:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3161:         yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");",
      "3163:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3164:       }",
      "3166:     break;",
      "3170:     {",
      "3171:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));",
      "3172:         yr_free((yyvsp[0].c_string));",
      "3174:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3175:       }",
      "3177:     break;",
      "3181:     {",
      "3182:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));",
      "3183:         yr_free((yyvsp[0].c_string));",
      "3185:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3186:       }",
      "3188:     break;",
      "3192:     {",
      "3193:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
      "3194:       }",
      "3196:     break;",
      "3200:     {",
      "3201:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);",
      "3202:       }",
      "3204:     break;",
      "3208:     {",
      "3209:         (yyval.expression) = (yyvsp[-1].expression);",
      "3210:       }",
      "3212:     break;",
      "3216:     {",
      "3217:         compiler->last_result = yr_parser_emit(",
      "3218:             yyscanner, OP_FILESIZE, NULL);",
      "",
      "[Removed Lines]",
      "3148:   case 86:",
      "3157:   case 88:",
      "3168:   case 91:",
      "3179:   case 92:",
      "3190:   case 94:",
      "3198:   case 95:",
      "3206:   case 96:",
      "3214:   case 97:",
      "",
      "[Added Lines]",
      "3157:   case 87:",
      "3166:   case 89:",
      "3177:   case 92:",
      "3188:   case 93:",
      "3199:   case 95:",
      "3207:   case 96:",
      "3215:   case 97:",
      "3223:   case 98:",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "3222:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3223:         (yyval.expression).value.integer = UNDEFINED;",
      "3224:       }",
      "3226:     break;",
      "3230:     {",
      "3231:         yywarning(yyscanner,",
      "3232:             \"Using deprecated \\\"entrypoint\\\" keyword. Use the \\\"entry_point\\\" \"",
      "",
      "[Removed Lines]",
      "3228:   case 98:",
      "",
      "[Added Lines]",
      "3237:   case 99:",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "3240:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3241:         (yyval.expression).value.integer = UNDEFINED;",
      "3242:       }",
      "3244:     break;",
      "3248:     {",
      "3249:         CHECK_TYPE((yyvsp[-1].expression), EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");",
      "",
      "[Removed Lines]",
      "3246:   case 99:",
      "",
      "[Added Lines]",
      "3255:   case 100:",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "3260:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3261:         (yyval.expression).value.integer = UNDEFINED;",
      "3262:       }",
      "3264:     break;",
      "3268:     {",
      "3269:         compiler->last_result = yr_parser_emit_with_arg(",
      "3270:             yyscanner, OP_PUSH, (yyvsp[0].integer), NULL, NULL);",
      "",
      "[Removed Lines]",
      "3266:   case 100:",
      "",
      "[Added Lines]",
      "3275:   case 101:",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "3274:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3275:         (yyval.expression).value.integer = (yyvsp[0].integer);",
      "3276:       }",
      "3278:     break;",
      "3282:     {",
      "3283:         compiler->last_result = yr_parser_emit_with_arg_double(",
      "3284:             yyscanner, OP_PUSH, (yyvsp[0].double_), NULL, NULL);",
      "",
      "[Removed Lines]",
      "3280:   case 101:",
      "",
      "[Added Lines]",
      "3289:   case 102:",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "3288:         (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3289:       }",
      "3291:     break;",
      "3295:     {",
      "3296:         SIZED_STRING* sized_string;",
      "",
      "[Removed Lines]",
      "3293:   case 102:",
      "",
      "[Added Lines]",
      "3302:   case 103:",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "3316:         (yyval.expression).type = EXPRESSION_TYPE_STRING;",
      "3317:         (yyval.expression).value.sized_string = sized_string;",
      "3318:       }",
      "3320:     break;",
      "3324:     {",
      "3325:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3326:             yyscanner, (yyvsp[0].c_string), OP_COUNT, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3322:   case 103:",
      "",
      "[Added Lines]",
      "3331:   case 104:",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "3332:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3333:         (yyval.expression).value.integer = UNDEFINED;",
      "3334:       }",
      "3336:     break;",
      "3340:     {",
      "3341:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3342:             yyscanner, (yyvsp[-3].c_string), OP_OFFSET, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3338:   case 104:",
      "",
      "[Added Lines]",
      "3347:   case 105:",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "3348:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3349:         (yyval.expression).value.integer = UNDEFINED;",
      "3350:       }",
      "3352:     break;",
      "3356:     {",
      "3357:         compiler->last_result = yr_parser_emit_with_arg(",
      "3358:             yyscanner, OP_PUSH, 1, NULL, NULL);",
      "",
      "[Removed Lines]",
      "3354:   case 105:",
      "",
      "[Added Lines]",
      "3363:   case 106:",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "3368:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3369:         (yyval.expression).value.integer = UNDEFINED;",
      "3370:       }",
      "3372:     break;",
      "3376:     {",
      "3377:         compiler->last_result = yr_parser_reduce_string_identifier(",
      "3378:             yyscanner, (yyvsp[-3].c_string), OP_LENGTH, UNDEFINED);",
      "",
      "[Removed Lines]",
      "3374:   case 106:",
      "",
      "[Added Lines]",
      "3383:   case 107:",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "3384:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3385:         (yyval.expression).value.integer = UNDEFINED;",
      "3386:       }",
      "3388:     break;",
      "3392:     {",
      "3393:         compiler->last_result = yr_parser_emit_with_arg(",
      "3394:             yyscanner, OP_PUSH, 1, NULL, NULL);",
      "",
      "[Removed Lines]",
      "3390:   case 107:",
      "",
      "[Added Lines]",
      "3399:   case 108:",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "3404:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3405:         (yyval.expression).value.integer = UNDEFINED;",
      "3406:       }",
      "3408:     break;",
      "3412:     {",
      "3413:         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)  // loop identifier",
      "3414:         {",
      "",
      "[Removed Lines]",
      "3410:   case 108:",
      "",
      "[Added Lines]",
      "3419:   case 109:",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "3454:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3455:       }",
      "3457:     break;",
      "3461:     {",
      "3462:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");",
      "",
      "[Removed Lines]",
      "3459:   case 109:",
      "",
      "[Added Lines]",
      "3468:   case 110:",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "3477:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3478:       }",
      "3480:     break;",
      "3484:     {",
      "3485:         compiler->last_result = yr_parser_reduce_operation(",
      "3486:             yyscanner, \"+\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3482:   case 110:",
      "",
      "[Added Lines]",
      "3491:   case 111:",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "3498:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3499:         }",
      "3500:       }",
      "3502:     break;",
      "3506:     {",
      "3507:         compiler->last_result = yr_parser_reduce_operation(",
      "3508:             yyscanner, \"-\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3504:   case 111:",
      "",
      "[Added Lines]",
      "3513:   case 112:",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "3520:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3521:         }",
      "3522:       }",
      "3524:     break;",
      "3528:     {",
      "3529:         compiler->last_result = yr_parser_reduce_operation(",
      "3530:             yyscanner, \"*\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3526:   case 112:",
      "",
      "[Added Lines]",
      "3535:   case 113:",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "3542:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3543:         }",
      "3544:       }",
      "3546:     break;",
      "3550:     {",
      "3551:         compiler->last_result = yr_parser_reduce_operation(",
      "3552:             yyscanner, \"\\\\\", (yyvsp[-2].expression), (yyvsp[0].expression));",
      "",
      "[Removed Lines]",
      "3548:   case 113:",
      "",
      "[Added Lines]",
      "3557:   case 114:",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "3572:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
      "3573:         }",
      "3574:       }",
      "3576:     break;",
      "3580:     {",
      "3581:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
      "3582:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
      "",
      "[Removed Lines]",
      "3578:   case 114:",
      "",
      "[Added Lines]",
      "3587:   case 115:",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "3594:           ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
      "3595:         }",
      "3596:       }",
      "3598:     break;",
      "3602:     {",
      "3603:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "3604:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "",
      "[Removed Lines]",
      "3600:   case 115:",
      "",
      "[Added Lines]",
      "3609:   case 116:",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "3608:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3609:         (yyval.expression).value.integer = OPERATION(^, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3610:       }",
      "3612:     break;",
      "3616:     {",
      "3617:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "3618:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
      "",
      "[Removed Lines]",
      "3614:   case 116:",
      "",
      "[Added Lines]",
      "3623:   case 117:",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "3622:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3623:         (yyval.expression).value.integer = OPERATION(&, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3624:       }",
      "3626:     break;",
      "3630:     {",
      "3631:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
      "3632:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
      "",
      "[Removed Lines]",
      "3628:   case 117:",
      "",
      "[Added Lines]",
      "3637:   case 118:",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "3636:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3637:         (yyval.expression).value.integer = OPERATION(|, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3638:       }",
      "3640:     break;",
      "3644:     {",
      "3645:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"~\");",
      "",
      "[Removed Lines]",
      "3642:   case 118:",
      "",
      "[Added Lines]",
      "3651:   case 119:",
      "",
      "---------------",
      "--- Hunk 51 ---",
      "[Context before]",
      "3650:         (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?",
      "3651:             UNDEFINED : ~((yyvsp[0].expression).value.integer);",
      "3652:       }",
      "3654:     break;",
      "3658:     {",
      "3659:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
      "3660:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
      "",
      "[Removed Lines]",
      "3656:   case 119:",
      "",
      "[Added Lines]",
      "3665:   case 120:",
      "",
      "---------------",
      "--- Hunk 52 ---",
      "[Context before]",
      "3664:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3665:         (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3666:       }",
      "3668:     break;",
      "3672:     {",
      "3673:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
      "3674:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
      "",
      "[Removed Lines]",
      "3670:   case 120:",
      "",
      "[Added Lines]",
      "3679:   case 121:",
      "",
      "---------------",
      "--- Hunk 53 ---",
      "[Context before]",
      "3678:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
      "3679:         (yyval.expression).value.integer = OPERATION(>>, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
      "3680:       }",
      "3682:     break;",
      "3686:     {",
      "3687:         (yyval.expression) = (yyvsp[0].expression);",
      "3688:       }",
      "3690:     break;",
      "3694:       default: break;",
      "3695:     }",
      "",
      "[Removed Lines]",
      "3684:   case 121:",
      "",
      "[Added Lines]",
      "3693:   case 122:",
      "",
      "---------------"
    ],
    "libyara/grammar.y||libyara/grammar.y": [
      "File: libyara/grammar.y -> libyara/grammar.y",
      "--- Hunk 1 ---",
      "[Context before]",
      "1016:         $$.type = EXPRESSION_TYPE_BOOLEAN;",
      "1017:       }",
      "1018:     | _FOR_ for_expression _IDENTIFIER_ _IN_",
      "1019:       {",
      "1020:         int var_index;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1018:     | _FOR_ for_expression error",
      "1019:       {",
      "1020:         compiler->loop_depth--;",
      "1021:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
      "1022:       }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e085a86b4cf0137b31f700d7411aeba8fa99316b",
      "candidate_info": {
        "commit_hash": "e085a86b4cf0137b31f700d7411aeba8fa99316b",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/e085a86b4cf0137b31f700d7411aeba8fa99316b",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y",
          "libyara/hex_grammar.c",
          "libyara/hex_grammar.h",
          "libyara/hex_grammar.y",
          "libyara/lexer.c",
          "libyara/lexer.l",
          "libyara/re_grammar.c",
          "libyara/re_grammar.h",
          "libyara/re_grammar.y"
        ],
        "message": "Facilitate debugging of YARA's grammar\n\nParsing details are printed just by uncommenting a line in grammar.y.",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/hex_grammar.c||libyara/hex_grammar.c",
          "libyara/hex_grammar.h||libyara/hex_grammar.h",
          "libyara/hex_grammar.y||libyara/hex_grammar.y",
          "libyara/lexer.c||libyara/lexer.c",
          "libyara/lexer.l||libyara/lexer.l",
          "libyara/re_grammar.c||libyara/re_grammar.c",
          "libyara/re_grammar.h||libyara/re_grammar.h",
          "libyara/re_grammar.y||libyara/re_grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:    it under the terms of the GNU General Public License as published by",
          "13:    This program is distributed in the hope that it will be useful,",
          "14:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "",
          "[Removed Lines]",
          "5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006",
          "6:    Free Software Foundation, Inc.",
          "8:    This program is free software; you can redistribute it and/or modify",
          "10:    the Free Software Foundation; either version 2, or (at your option)",
          "11:    any later version.",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:    GNU General Public License for more details.",
          "18:    You should have received a copy of the GNU General Public License",
          "24:    part or all of the Bison parser skeleton and distribute that work",
          "",
          "[Removed Lines]",
          "19:    along with this program; if not, write to the Free Software",
          "20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: #define YYBISON 1",
          "53: #define YYSKELETON_NAME \"yacc.c\"",
          "",
          "[Removed Lines]",
          "50: #define YYBISON_VERSION \"2.3\"",
          "",
          "[Added Lines]",
          "47: #define YYBISON_VERSION \"3.0.4\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56: #define YYPURE 1",
          "186: #include <assert.h>",
          "",
          "[Removed Lines]",
          "59: #define YYLSP_NEEDED 0",
          "62: #define yyparse yara_yyparse",
          "63: #define yylex   yara_yylex",
          "64: #define yyerror yara_yyerror",
          "65: #define yylval  yara_yylval",
          "66: #define yychar  yara_yychar",
          "67: #define yydebug yara_yydebug",
          "68: #define yynerrs yara_yynerrs",
          "72: #ifndef YYTOKENTYPE",
          "73: # define YYTOKENTYPE",
          "76:    enum yytokentype {",
          "77:      _DOT_DOT_ = 258,",
          "78:      _RULE_ = 259,",
          "79:      _PRIVATE_ = 260,",
          "80:      _GLOBAL_ = 261,",
          "81:      _META_ = 262,",
          "82:      _STRINGS_ = 263,",
          "83:      _CONDITION_ = 264,",
          "84:      _IDENTIFIER_ = 265,",
          "85:      _STRING_IDENTIFIER_ = 266,",
          "86:      _STRING_COUNT_ = 267,",
          "87:      _STRING_OFFSET_ = 268,",
          "88:      _STRING_LENGTH_ = 269,",
          "89:      _STRING_IDENTIFIER_WITH_WILDCARD_ = 270,",
          "90:      _NUMBER_ = 271,",
          "91:      _DOUBLE_ = 272,",
          "92:      _INTEGER_FUNCTION_ = 273,",
          "93:      _TEXT_STRING_ = 274,",
          "94:      _HEX_STRING_ = 275,",
          "95:      _REGEXP_ = 276,",
          "96:      _ASCII_ = 277,",
          "97:      _WIDE_ = 278,",
          "98:      _NOCASE_ = 279,",
          "99:      _FULLWORD_ = 280,",
          "100:      _AT_ = 281,",
          "101:      _FILESIZE_ = 282,",
          "102:      _ENTRYPOINT_ = 283,",
          "103:      _ALL_ = 284,",
          "104:      _ANY_ = 285,",
          "105:      _IN_ = 286,",
          "106:      _OF_ = 287,",
          "107:      _FOR_ = 288,",
          "108:      _THEM_ = 289,",
          "109:      _MATCHES_ = 290,",
          "110:      _CONTAINS_ = 291,",
          "111:      _IMPORT_ = 292,",
          "112:      _TRUE_ = 293,",
          "113:      _FALSE_ = 294,",
          "114:      _OR_ = 295,",
          "115:      _AND_ = 296,",
          "116:      _NEQ_ = 297,",
          "117:      _EQ_ = 298,",
          "118:      _GE_ = 299,",
          "119:      _GT_ = 300,",
          "120:      _LE_ = 301,",
          "121:      _LT_ = 302,",
          "122:      _SHIFT_RIGHT_ = 303,",
          "123:      _SHIFT_LEFT_ = 304,",
          "124:      UNARY_MINUS = 305,",
          "125:      _NOT_ = 306",
          "126:    };",
          "127: #endif",
          "129: #define _DOT_DOT_ 258",
          "130: #define _RULE_ 259",
          "131: #define _PRIVATE_ 260",
          "132: #define _GLOBAL_ 261",
          "133: #define _META_ 262",
          "134: #define _STRINGS_ 263",
          "135: #define _CONDITION_ 264",
          "136: #define _IDENTIFIER_ 265",
          "137: #define _STRING_IDENTIFIER_ 266",
          "138: #define _STRING_COUNT_ 267",
          "139: #define _STRING_OFFSET_ 268",
          "140: #define _STRING_LENGTH_ 269",
          "141: #define _STRING_IDENTIFIER_WITH_WILDCARD_ 270",
          "142: #define _NUMBER_ 271",
          "143: #define _DOUBLE_ 272",
          "144: #define _INTEGER_FUNCTION_ 273",
          "145: #define _TEXT_STRING_ 274",
          "146: #define _HEX_STRING_ 275",
          "147: #define _REGEXP_ 276",
          "148: #define _ASCII_ 277",
          "149: #define _WIDE_ 278",
          "150: #define _NOCASE_ 279",
          "151: #define _FULLWORD_ 280",
          "152: #define _AT_ 281",
          "153: #define _FILESIZE_ 282",
          "154: #define _ENTRYPOINT_ 283",
          "155: #define _ALL_ 284",
          "156: #define _ANY_ 285",
          "157: #define _IN_ 286",
          "158: #define _OF_ 287",
          "159: #define _FOR_ 288",
          "160: #define _THEM_ 289",
          "161: #define _MATCHES_ 290",
          "162: #define _CONTAINS_ 291",
          "163: #define _IMPORT_ 292",
          "164: #define _TRUE_ 293",
          "165: #define _FALSE_ 294",
          "166: #define _OR_ 295",
          "167: #define _AND_ 296",
          "168: #define _NEQ_ 297",
          "169: #define _EQ_ 298",
          "170: #define _GE_ 299",
          "171: #define _GT_ 300",
          "172: #define _LE_ 301",
          "173: #define _LT_ 302",
          "174: #define _SHIFT_RIGHT_ 303",
          "175: #define _SHIFT_LEFT_ 304",
          "176: #define UNARY_MINUS 305",
          "177: #define _NOT_ 306",
          "183: #line 17 \"grammar.y\"",
          "",
          "[Added Lines]",
          "56: #define YYPUSH 0",
          "59: #define YYPULL 1",
          "63: #define yyparse         yara_yyparse",
          "64: #define yylex           yara_yylex",
          "65: #define yyerror         yara_yyerror",
          "66: #define yydebug         yara_yydebug",
          "67: #define yynerrs         yara_yynerrs",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:       YYERROR; \\",
          "247:     }",
          "256: #ifdef YYERROR_VERBOSE",
          "",
          "[Removed Lines]",
          "251: #ifndef YYDEBUG",
          "252: # define YYDEBUG 1",
          "253: #endif",
          "",
          "[Added Lines]",
          "140: # ifndef YY_NULLPTR",
          "141: #  if defined __cplusplus && 201103L <= __cplusplus",
          "142: #   define YY_NULLPTR nullptr",
          "143: #  else",
          "144: #   define YY_NULLPTR 0",
          "145: #  endif",
          "146: # endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260: # define YYERROR_VERBOSE 0",
          "261: #endif",
          "266: #endif",
          "268: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "271: {",
          "272:   EXPRESSION      expression;",
          "273:   SIZED_STRING*   sized_string;",
          "274:   char*           c_string;",
          "",
          "[Removed Lines]",
          "264: #ifndef YYTOKEN_TABLE",
          "265: # define YYTOKEN_TABLE 0",
          "269: typedef union YYSTYPE",
          "270: #line 186 \"grammar.y\"",
          "",
          "[Added Lines]",
          "158: #ifndef YY_YARA_YY_GRAMMAR_H_INCLUDED",
          "159: # define YY_YARA_YY_GRAMMAR_H_INCLUDED",
          "161: #ifndef YYDEBUG",
          "162: # define YYDEBUG 0",
          "163: #endif",
          "164: #if YYDEBUG",
          "165: extern int yara_yydebug;",
          "169: #ifndef YYTOKENTYPE",
          "170: # define YYTOKENTYPE",
          "171:   enum yytokentype",
          "172:   {",
          "173:     _DOT_DOT_ = 258,",
          "174:     _RULE_ = 259,",
          "175:     _PRIVATE_ = 260,",
          "176:     _GLOBAL_ = 261,",
          "177:     _META_ = 262,",
          "178:     _STRINGS_ = 263,",
          "179:     _CONDITION_ = 264,",
          "180:     _IDENTIFIER_ = 265,",
          "181:     _STRING_IDENTIFIER_ = 266,",
          "182:     _STRING_COUNT_ = 267,",
          "183:     _STRING_OFFSET_ = 268,",
          "184:     _STRING_LENGTH_ = 269,",
          "185:     _STRING_IDENTIFIER_WITH_WILDCARD_ = 270,",
          "186:     _NUMBER_ = 271,",
          "187:     _DOUBLE_ = 272,",
          "188:     _INTEGER_FUNCTION_ = 273,",
          "189:     _TEXT_STRING_ = 274,",
          "190:     _HEX_STRING_ = 275,",
          "191:     _REGEXP_ = 276,",
          "192:     _ASCII_ = 277,",
          "193:     _WIDE_ = 278,",
          "194:     _NOCASE_ = 279,",
          "195:     _FULLWORD_ = 280,",
          "196:     _AT_ = 281,",
          "197:     _FILESIZE_ = 282,",
          "198:     _ENTRYPOINT_ = 283,",
          "199:     _ALL_ = 284,",
          "200:     _ANY_ = 285,",
          "201:     _IN_ = 286,",
          "202:     _OF_ = 287,",
          "203:     _FOR_ = 288,",
          "204:     _THEM_ = 289,",
          "205:     _MATCHES_ = 290,",
          "206:     _CONTAINS_ = 291,",
          "207:     _IMPORT_ = 292,",
          "208:     _TRUE_ = 293,",
          "209:     _FALSE_ = 294,",
          "210:     _OR_ = 295,",
          "211:     _AND_ = 296,",
          "212:     _EQ_ = 297,",
          "213:     _NEQ_ = 298,",
          "214:     _LT_ = 299,",
          "215:     _LE_ = 300,",
          "216:     _GT_ = 301,",
          "217:     _GE_ = 302,",
          "218:     _SHIFT_LEFT_ = 303,",
          "219:     _SHIFT_RIGHT_ = 304,",
          "220:     _NOT_ = 305,",
          "221:     UNARY_MINUS = 306",
          "222:   };",
          "223: #endif",
          "225: #define _DOT_DOT_ 258",
          "226: #define _RULE_ 259",
          "227: #define _PRIVATE_ 260",
          "228: #define _GLOBAL_ 261",
          "229: #define _META_ 262",
          "230: #define _STRINGS_ 263",
          "231: #define _CONDITION_ 264",
          "232: #define _IDENTIFIER_ 265",
          "233: #define _STRING_IDENTIFIER_ 266",
          "234: #define _STRING_COUNT_ 267",
          "235: #define _STRING_OFFSET_ 268",
          "236: #define _STRING_LENGTH_ 269",
          "237: #define _STRING_IDENTIFIER_WITH_WILDCARD_ 270",
          "238: #define _NUMBER_ 271",
          "239: #define _DOUBLE_ 272",
          "240: #define _INTEGER_FUNCTION_ 273",
          "241: #define _TEXT_STRING_ 274",
          "242: #define _HEX_STRING_ 275",
          "243: #define _REGEXP_ 276",
          "244: #define _ASCII_ 277",
          "245: #define _WIDE_ 278",
          "246: #define _NOCASE_ 279",
          "247: #define _FULLWORD_ 280",
          "248: #define _AT_ 281",
          "249: #define _FILESIZE_ 282",
          "250: #define _ENTRYPOINT_ 283",
          "251: #define _ALL_ 284",
          "252: #define _ANY_ 285",
          "253: #define _IN_ 286",
          "254: #define _OF_ 287",
          "255: #define _FOR_ 288",
          "256: #define _THEM_ 289",
          "257: #define _MATCHES_ 290",
          "258: #define _CONTAINS_ 291",
          "259: #define _IMPORT_ 292",
          "260: #define _TRUE_ 293",
          "261: #define _FALSE_ 294",
          "262: #define _OR_ 295",
          "263: #define _AND_ 296",
          "264: #define _EQ_ 297",
          "265: #define _NEQ_ 298",
          "266: #define _LT_ 299",
          "267: #define _LE_ 300",
          "268: #define _GT_ 301",
          "269: #define _GE_ 302",
          "270: #define _SHIFT_LEFT_ 303",
          "271: #define _SHIFT_RIGHT_ 304",
          "272: #define _NOT_ 305",
          "273: #define UNARY_MINUS 306",
          "278: union YYSTYPE",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "277:   YR_STRING*      string;",
          "278:   YR_META*        meta;",
          "279:   YR_RULE*        rule;",
          "286: # define YYSTYPE_IS_TRIVIAL 1",
          "287: #endif",
          "297: #ifdef short",
          "298: # undef short",
          "",
          "[Removed Lines]",
          "280: }",
          "282: #line 283 \"grammar.c\"",
          "283:  YYSTYPE;",
          "285: # define YYSTYPE_IS_DECLARED 1",
          "295: #line 296 \"grammar.c\"",
          "",
          "[Added Lines]",
          "292: };",
          "294: typedef union YYSTYPE YYSTYPE;",
          "296: # define YYSTYPE_IS_DECLARED 1",
          "301: int yara_yyparse (void *yyscanner, YR_COMPILER* compiler);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "307: #ifdef YYTYPE_INT8",
          "308: typedef YYTYPE_INT8 yytype_int8;",
          "312: #else",
          "314: #endif",
          "316: #ifdef YYTYPE_UINT16",
          "",
          "[Removed Lines]",
          "309: #elif (defined __STDC__ || defined __C99__FUNC__ \\",
          "310:      || defined __cplusplus || defined _MSC_VER)",
          "311: typedef signed char yytype_int8;",
          "313: typedef short int yytype_int8;",
          "",
          "[Added Lines]",
          "322: typedef signed char yytype_int8;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "330: #  define YYSIZE_T __SIZE_TYPE__",
          "331: # elif defined size_t",
          "332: #  define YYSIZE_T size_t",
          "336: #  define YYSIZE_T size_t",
          "337: # else",
          "",
          "[Removed Lines]",
          "333: # elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \\",
          "334:      || defined __cplusplus || defined _MSC_VER)",
          "",
          "[Added Lines]",
          "342: # elif ! defined YYSIZE_T",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "345: # if defined YYENABLE_NLS && YYENABLE_NLS",
          "346: #  if ENABLE_NLS",
          "349: #  endif",
          "350: # endif",
          "351: # ifndef YY_",
          "353: # endif",
          "354: #endif",
          "357: #if ! defined lint || defined __GNUC__",
          "359: #else",
          "361: #endif",
          "371: #else",
          "375: #endif",
          "379: #endif",
          "381: #if ! defined yyoverflow || YYERROR_VERBOSE",
          "",
          "[Removed Lines]",
          "348: #   define YY_(msgid) dgettext (\"bison-runtime\", msgid)",
          "352: #  define YY_(msgid) msgid",
          "358: # define YYUSE(e) ((void) (e))",
          "364: #ifndef lint",
          "365: # define YYID(n) (n)",
          "366: #else",
          "367: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "368:      || defined __cplusplus || defined _MSC_VER)",
          "369: static int",
          "370: YYID (int i)",
          "372: static int",
          "373: YYID (i)",
          "374:     int i;",
          "376: {",
          "377:   return i;",
          "378: }",
          "",
          "[Added Lines]",
          "356: #   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)",
          "360: #  define YY_(Msgid) Msgid",
          "361: # endif",
          "362: #endif",
          "364: #ifndef YY_ATTRIBUTE",
          "365: # if (defined __GNUC__                                               \\",
          "366:       && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\",
          "367:      || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C",
          "368: #  define YY_ATTRIBUTE(Spec) __attribute__(Spec)",
          "369: # else",
          "371: # endif",
          "372: #endif",
          "374: #ifndef YY_ATTRIBUTE_PURE",
          "375: # define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))",
          "376: #endif",
          "378: #ifndef YY_ATTRIBUTE_UNUSED",
          "379: # define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))",
          "380: #endif",
          "382: #if !defined _Noreturn \\",
          "383:      && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)",
          "384: # if defined _MSC_VER && 1200 <= _MSC_VER",
          "385: #  define _Noreturn __declspec (noreturn)",
          "386: # else",
          "387: #  define _Noreturn YY_ATTRIBUTE ((__noreturn__))",
          "393: # define YYUSE(E) ((void) (E))",
          "398: #if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__",
          "400: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\",
          "401:     _Pragma (\"GCC diagnostic push\") \\",
          "402:     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\",
          "403:     _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")",
          "404: # define YY_IGNORE_MAYBE_UNINITIALIZED_END \\",
          "405:     _Pragma (\"GCC diagnostic pop\")",
          "407: # define YY_INITIAL_VALUE(Value) Value",
          "409: #ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "410: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "411: # define YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "412: #endif",
          "413: #ifndef YY_INITIAL_VALUE",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "395: #    define alloca _alloca",
          "396: #   else",
          "397: #    define YYSTACK_ALLOC alloca",
          "403: #     endif",
          "404: #    endif",
          "405: #   endif",
          "",
          "[Removed Lines]",
          "398: #    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "399:      || defined __cplusplus || defined _MSC_VER)",
          "401: #     ifndef _STDLIB_H",
          "402: #      define _STDLIB_H 1",
          "",
          "[Added Lines]",
          "435: #    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS",
          "438: #     ifndef EXIT_SUCCESS",
          "439: #      define EXIT_SUCCESS 0",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "407: # endif",
          "409: # ifdef YYSTACK_ALLOC",
          "412: #  ifndef YYSTACK_ALLOC_MAXIMUM",
          "414:        and a page size can be as small as 4096 bytes.  So we cannot safely",
          "",
          "[Removed Lines]",
          "411: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))",
          "",
          "[Added Lines]",
          "448: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "422: #  ifndef YYSTACK_ALLOC_MAXIMUM",
          "423: #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM",
          "424: #  endif",
          "426:        && ! ((defined YYMALLOC || defined malloc) \\",
          "431: #   endif",
          "432: #  endif",
          "433: #  ifndef YYMALLOC",
          "434: #   define YYMALLOC malloc",
          "438: #   endif",
          "439: #  endif",
          "440: #  ifndef YYFREE",
          "441: #   define YYFREE free",
          "445: #   endif",
          "446: #  endif",
          "",
          "[Removed Lines]",
          "425: #  if (defined __cplusplus && ! defined _STDLIB_H \\",
          "427:       && (defined YYFREE || defined free)))",
          "429: #   ifndef _STDLIB_H",
          "430: #    define _STDLIB_H 1",
          "435: #   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "436:      || defined __cplusplus || defined _MSC_VER)",
          "442: #   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "443:      || defined __cplusplus || defined _MSC_VER)",
          "",
          "[Added Lines]",
          "462: #  if (defined __cplusplus && ! defined EXIT_SUCCESS \\",
          "464:              && (defined YYFREE || defined free)))",
          "466: #   ifndef EXIT_SUCCESS",
          "467: #    define EXIT_SUCCESS 0",
          "472: #   if ! defined malloc && ! defined EXIT_SUCCESS",
          "478: #   if ! defined free && ! defined EXIT_SUCCESS",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "451: #if (! defined yyoverflow \\",
          "452:      && (! defined __cplusplus \\",
          "456: union yyalloc",
          "457: {",
          "463: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)",
          "",
          "[Removed Lines]",
          "453:   || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))",
          "458:   yytype_int16 yyss;",
          "459:   YYSTYPE yyvs;",
          "460:   };",
          "",
          "[Added Lines]",
          "488:          || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))",
          "493:   yytype_int16 yyss_alloc;",
          "494:   YYSTYPE yyvs_alloc;",
          "495: };",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "468:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\",
          "469:       + YYSTACK_GAP_MAXIMUM)",
          "490:    local variables YYSIZE and YYSTACKSIZE give the old and new number of",
          "491:    elements in the stack, and YYPTR gives the new location of the",
          "492:    stack.  Advance YYPTR to a properly aligned location for the next",
          "505: #endif",
          "508: #define YYFINAL  2",
          "513: #define YYNTOKENS  72",
          "",
          "[Removed Lines]",
          "473: # ifndef YYCOPY",
          "474: #  if defined __GNUC__ && 1 < __GNUC__",
          "475: #   define YYCOPY(To, From, Count) \\",
          "476:       __builtin_memcpy (To, From, (Count) * sizeof (*(From)))",
          "477: #  else",
          "478: #   define YYCOPY(To, From, Count)  \\",
          "479:       do     \\",
          "480:  {     \\",
          "481:    YYSIZE_T yyi;    \\",
          "482:    for (yyi = 0; yyi < (Count); yyi++) \\",
          "483:      (To)[yyi] = (From)[yyi];  \\",
          "484:  }     \\",
          "485:       while (YYID (0))",
          "486: #  endif",
          "487: # endif",
          "494: # define YYSTACK_RELOCATE(Stack)     \\",
          "495:     do         \\",
          "496:       {         \\",
          "497:  YYSIZE_T yynewbytes;      \\",
          "498:  YYCOPY (&yyptr->Stack, Stack, yysize);    \\",
          "499:  Stack = &yyptr->Stack;      \\",
          "500:  yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "501:  yyptr += yynewbytes / sizeof (*yyptr);    \\",
          "502:       }         \\",
          "503:     while (YYID (0))",
          "510: #define YYLAST   399",
          "",
          "[Added Lines]",
          "506: # define YYCOPY_NEEDED 1",
          "513: # define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\",
          "514:     do                                                                  \\",
          "515:       {                                                                 \\",
          "516:         YYSIZE_T yynewbytes;                                            \\",
          "517:         YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\",
          "518:         Stack = &yyptr->Stack_alloc;                                    \\",
          "519:         yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "520:         yyptr += yynewbytes / sizeof (*yyptr);                          \\",
          "521:       }                                                                 \\",
          "522:     while (0)",
          "526: #if defined YYCOPY_NEEDED && YYCOPY_NEEDED",
          "529: # ifndef YYCOPY",
          "530: #  if defined __GNUC__ && 1 < __GNUC__",
          "531: #   define YYCOPY(Dst, Src, Count) \\",
          "532:       __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))",
          "533: #  else",
          "534: #   define YYCOPY(Dst, Src, Count)              \\",
          "535:       do                                        \\",
          "536:         {                                       \\",
          "537:           YYSIZE_T yyi;                         \\",
          "538:           for (yyi = 0; yyi < (Count); yyi++)   \\",
          "539:             (Dst)[yyi] = (Src)[yyi];            \\",
          "540:         }                                       \\",
          "541:       while (0)",
          "542: #  endif",
          "543: # endif",
          "549: #define YYLAST   408",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "515: #define YYNNTS  41",
          "517: #define YYNRULES  121",
          "519: #define YYNSTATES  209",
          "522: #define YYUNDEFTOK  2",
          "523: #define YYMAXUTOK   307",
          "526:   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)",
          "529: static const yytype_uint8 yytranslate[] =",
          "530: {",
          "531:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "",
          "[Removed Lines]",
          "525: #define YYTRANSLATE(YYX)      \\",
          "",
          "[Added Lines]",
          "565: #define YYTRANSLATE(YYX)                                                \\",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "540:        2,    67,    56,    68,    43,     2,     2,     2,     2,     2,",
          "541:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "542:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "544:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "545:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "546:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "",
          "[Removed Lines]",
          "543:        2,     2,     2,    62,    42,    63,    58,     2,     2,     2,",
          "",
          "[Added Lines]",
          "584:        2,     2,     2,    62,    42,    63,    59,     2,     2,     2,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "558:       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,",
          "559:       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,",
          "560:       35,    36,    37,    38,    39,    40,    41,    45,    46,    47,",
          "562: };",
          "564: #if YYDEBUG",
          "629: static const yytype_uint16 yyrline[] =",
          "630: {",
          "644: };",
          "645: #endif",
          "650: static const char *const yytname[] =",
          "",
          "[Removed Lines]",
          "561:       48,    49,    50,    51,    52,    59,    60,    61",
          "567: static const yytype_uint16 yyprhs[] =",
          "568: {",
          "569:        0,     0,     3,     4,     7,    10,    14,    18,    22,    25,",
          "570:       26,    27,    39,    40,    44,    45,    49,    53,    54,    57,",
          "571:       59,    61,    62,    65,    67,    70,    72,    75,    79,    83,",
          "572:       88,    92,    96,    98,   101,   102,   108,   109,   115,   119,",
          "573:      120,   123,   125,   127,   129,   131,   133,   137,   142,   147,",
          "574:      148,   150,   152,   156,   158,   160,   162,   164,   168,   172,",
          "575:      174,   178,   182,   183,   184,   196,   197,   207,   211,   214,",
          "576:      215,   220,   221,   226,   230,   234,   238,   242,   246,   250,",
          "577:      252,   256,   260,   262,   268,   270,   274,   275,   280,   282,",
          "578:      284,   288,   290,   292,   294,   296,   298,   302,   304,   306,",
          "579:      311,   313,   315,   317,   319,   324,   326,   331,   333,   335,",
          "580:      338,   342,   346,   350,   354,   358,   362,   366,   370,   373,",
          "581:      377,   381",
          "582: };",
          "585: static const yytype_int8 yyrhs[] =",
          "586: {",
          "587:       73,     0,    -1,    -1,    73,    75,    -1,    73,    74,    -1,",
          "588:       73,     1,    75,    -1,    73,     1,    74,    -1,    73,     1,",
          "589:       61,    -1,    37,    19,    -1,    -1,    -1,    81,     4,    10,",
          "590:       76,    83,    62,    78,    79,    77,    80,    63,    -1,    -1,",
          "591:        7,    64,    85,    -1,    -1,     8,    64,    87,    -1,     9,",
          "592:       64,    97,    -1,    -1,    81,    82,    -1,     5,    -1,     6,",
          "593:       -1,    -1,    64,    84,    -1,    10,    -1,    84,    10,    -1,",
          "594:       86,    -1,    85,    86,    -1,    10,    65,    19,    -1,    10,",
          "595:       65,    16,    -1,    10,    65,    54,    16,    -1,    10,    65,",
          "596:       38,    -1,    10,    65,    39,    -1,    88,    -1,    87,    88,",
          "597:       -1,    -1,    11,    65,    89,    19,    91,    -1,    -1,    11,",
          "598:       65,    90,    21,    91,    -1,    11,    65,    20,    -1,    -1,",
          "599:       91,    92,    -1,    23,    -1,    22,    -1,    24,    -1,    25,",
          "600:       -1,    10,    -1,    93,    66,    10,    -1,    93,    67,   112,",
          "601:       68,    -1,    93,    69,    94,    70,    -1,    -1,    95,    -1,",
          "602:       98,    -1,    95,    71,    98,    -1,    21,    -1,    98,    -1,",
          "603:       38,    -1,    39,    -1,   112,    35,    96,    -1,   112,    36,",
          "604:      112,    -1,    11,    -1,    11,    26,   112,    -1,    11,    31,",
          "605:      105,    -1,    -1,    -1,    33,   111,    10,    31,    99,   104,",
          "606:       64,   100,    69,    97,    70,    -1,    -1,    33,   111,    32,",
          "607:      107,    64,   101,    69,    97,    70,    -1,   111,    32,   107,",
          "608:       -1,    60,    97,    -1,    -1,    97,    41,   102,    97,    -1,",
          "609:       -1,    97,    40,   103,    97,    -1,   112,    50,   112,    -1,",
          "610:      112,    48,   112,    -1,   112,    49,   112,    -1,   112,    47,",
          "611:      112,    -1,   112,    46,   112,    -1,   112,    45,   112,    -1,",
          "612:      112,    -1,    69,    98,    70,    -1,    69,   106,    70,    -1,",
          "613:      105,    -1,    69,   112,     3,   112,    70,    -1,   112,    -1,",
          "614:      106,    71,   112,    -1,    -1,    69,   108,   109,    70,    -1,",
          "615:       34,    -1,   110,    -1,   109,    71,   110,    -1,    11,    -1,",
          "616:       15,    -1,   112,    -1,    29,    -1,    30,    -1,    69,   112,",
          "617:       70,    -1,    27,    -1,    28,    -1,    18,    69,   112,    70,",
          "618:       -1,    16,    -1,    17,    -1,    19,    -1,    12,    -1,    13,",
          "619:       67,   112,    68,    -1,    13,    -1,    14,    67,   112,    68,",
          "620:       -1,    14,    -1,    93,    -1,    54,   112,    -1,   112,    53,",
          "621:      112,    -1,   112,    54,   112,    -1,   112,    55,   112,    -1,",
          "622:      112,    56,   112,    -1,   112,    57,   112,    -1,   112,    43,",
          "623:      112,    -1,   112,    44,   112,    -1,   112,    42,   112,    -1,",
          "624:       58,   112,    -1,   112,    52,   112,    -1,   112,    51,   112,",
          "625:       -1,    96,    -1",
          "626: };",
          "631:        0,   200,   200,   202,   203,   204,   205,   206,   211,   224,",
          "632:      233,   223,   256,   259,   287,   290,   317,   322,   323,   328,",
          "633:      329,   335,   338,   356,   369,   406,   407,   412,   428,   441,",
          "634:      454,   467,   484,   485,   491,   490,   506,   505,   521,   535,",
          "635:      536,   541,   542,   543,   544,   549,   634,   680,   738,   783,",
          "636:      784,   788,   813,   849,   895,   917,   926,   935,   950,   962,",
          "637:      976,   989,  1001,  1031,  1000,  1147,  1146,  1226,  1232,  1239,",
          "638:     1238,  1301,  1300,  1361,  1370,  1379,  1388,  1397,  1406,  1415,",
          "639:     1419,  1427,  1428,  1433,  1455,  1467,  1483,  1482,  1488,  1499,",
          "640:     1500,  1505,  1512,  1523,  1524,  1528,  1536,  1540,  1550,  1564,",
          "641:     1580,  1590,  1599,  1624,  1636,  1648,  1664,  1676,  1692,  1737,",
          "642:     1756,  1774,  1792,  1810,  1836,  1854,  1864,  1874,  1884,  1894,",
          "643:     1904,  1914",
          "647: #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE",
          "",
          "[Added Lines]",
          "602:       48,    49,    50,    51,    52,    58,    60,    61",
          "609:        0,   205,   205,   207,   208,   209,   210,   211,   216,   229,",
          "610:      238,   228,   261,   264,   292,   295,   322,   327,   328,   333,",
          "611:      334,   340,   343,   361,   374,   411,   412,   417,   433,   446,",
          "612:      459,   472,   489,   490,   496,   495,   511,   510,   526,   540,",
          "613:      541,   546,   547,   548,   549,   554,   639,   685,   743,   788,",
          "614:      789,   793,   818,   854,   900,   922,   931,   940,   955,   967,",
          "615:      981,   994,  1006,  1036,  1005,  1152,  1151,  1231,  1237,  1244,",
          "616:     1243,  1306,  1305,  1366,  1375,  1384,  1393,  1402,  1411,  1420,",
          "617:     1424,  1432,  1433,  1438,  1460,  1472,  1488,  1487,  1493,  1504,",
          "618:     1505,  1510,  1517,  1528,  1529,  1533,  1541,  1545,  1555,  1569,",
          "619:     1585,  1595,  1604,  1629,  1641,  1653,  1669,  1681,  1697,  1742,",
          "620:     1761,  1779,  1797,  1815,  1841,  1859,  1869,  1879,  1889,  1899,",
          "621:     1909,  1919",
          "625: #if YYDEBUG || YYERROR_VERBOSE || 0",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "657:   \"_REGEXP_\", \"_ASCII_\", \"_WIDE_\", \"_NOCASE_\", \"_FULLWORD_\", \"_AT_\",",
          "658:   \"_FILESIZE_\", \"_ENTRYPOINT_\", \"_ALL_\", \"_ANY_\", \"_IN_\", \"_OF_\", \"_FOR_\",",
          "659:   \"_THEM_\", \"_MATCHES_\", \"_CONTAINS_\", \"_IMPORT_\", \"_TRUE_\", \"_FALSE_\",",
          "663:   \"'}'\", \"':'\", \"'='\", \"'.'\", \"'['\", \"']'\", \"'('\", \"')'\", \"','\", \"$accept\",",
          "665:   \"rule_modifiers\", \"rule_modifier\", \"tags\", \"tag_list\",",
          "666:   \"meta_declarations\", \"meta_declaration\", \"string_declarations\",",
          "671:   \"string_enumeration\", \"string_enumeration_item\", \"for_expression\",",
          "673: };",
          "674: #endif",
          "676: # ifdef YYPRINT",
          "679: static const yytype_uint16 yytoknum[] =",
          "680: {",
          "681:        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,",
          "",
          "[Removed Lines]",
          "660:   \"_OR_\", \"_AND_\", \"'|'\", \"'^'\", \"'&'\", \"_NEQ_\", \"_EQ_\", \"_GE_\", \"_GT_\",",
          "661:   \"_LE_\", \"_LT_\", \"_SHIFT_RIGHT_\", \"_SHIFT_LEFT_\", \"'+'\", \"'-'\", \"'*'\",",
          "662:   \"'\\\\\\\\'\", \"'%'\", \"'~'\", \"UNARY_MINUS\", \"_NOT_\", \"\\\"include\\\"\", \"'{'\",",
          "664:   \"rules\", \"import\", \"rule\", \"@1\", \"@2\", \"meta\", \"strings\", \"condition\",",
          "667:   \"string_declaration\", \"@3\", \"@4\", \"string_modifiers\", \"string_modifier\",",
          "668:   \"identifier\", \"arguments\", \"arguments_list\", \"regexp\",",
          "669:   \"boolean_expression\", \"expression\", \"@5\", \"@6\", \"@7\", \"@8\", \"@9\",",
          "670:   \"integer_set\", \"range\", \"integer_enumeration\", \"string_set\", \"@10\",",
          "672:   \"primary_expression\", 0",
          "",
          "[Added Lines]",
          "638:   \"_OR_\", \"_AND_\", \"'|'\", \"'^'\", \"'&'\", \"_EQ_\", \"_NEQ_\", \"_LT_\", \"_LE_\",",
          "639:   \"_GT_\", \"_GE_\", \"_SHIFT_LEFT_\", \"_SHIFT_RIGHT_\", \"'+'\", \"'-'\", \"'*'\",",
          "640:   \"'\\\\\\\\'\", \"'%'\", \"_NOT_\", \"'~'\", \"UNARY_MINUS\", \"\\\"include\\\"\", \"'{'\",",
          "642:   \"rules\", \"import\", \"rule\", \"@1\", \"$@2\", \"meta\", \"strings\", \"condition\",",
          "645:   \"string_declaration\", \"$@3\", \"$@4\", \"string_modifiers\",",
          "646:   \"string_modifier\", \"identifier\", \"arguments\", \"arguments_list\", \"regexp\",",
          "647:   \"boolean_expression\", \"expression\", \"$@5\", \"$@6\", \"$@7\", \"$@8\", \"$@9\",",
          "648:   \"integer_set\", \"range\", \"integer_enumeration\", \"string_set\", \"$@10\",",
          "650:   \"primary_expression\", YY_NULLPTR",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "683:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,",
          "684:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,",
          "685:      295,   296,   124,    94,    38,   297,   298,   299,   300,   301,",
          "687:      306,   307,   123,   125,    58,    61,    46,    91,    93,    40,",
          "688:       41,    44",
          "689: };",
          "690: # endif",
          "712: {",
          "726: };",
          "731: static const yytype_uint8 yydefact[] =",
          "732: {",
          "733:        2,     0,     1,    17,     0,     4,     3,     0,     7,     6,",
          "",
          "[Removed Lines]",
          "686:      302,   303,   304,    43,    45,    42,    92,    37,   126,   305,",
          "693: static const yytype_uint8 yyr1[] =",
          "694: {",
          "695:        0,    72,    73,    73,    73,    73,    73,    73,    74,    76,",
          "696:       77,    75,    78,    78,    79,    79,    80,    81,    81,    82,",
          "697:       82,    83,    83,    84,    84,    85,    85,    86,    86,    86,",
          "698:       86,    86,    87,    87,    89,    88,    90,    88,    88,    91,",
          "699:       91,    92,    92,    92,    92,    93,    93,    93,    93,    94,",
          "700:       94,    95,    95,    96,    97,    98,    98,    98,    98,    98,",
          "701:       98,    98,    99,   100,    98,   101,    98,    98,    98,   102,",
          "702:       98,   103,    98,    98,    98,    98,    98,    98,    98,    98,",
          "703:       98,   104,   104,   105,   106,   106,   108,   107,   107,   109,",
          "704:      109,   110,   110,   111,   111,   111,   112,   112,   112,   112,",
          "705:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
          "706:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
          "707:      112,   112",
          "708: };",
          "711: static const yytype_uint8 yyr2[] =",
          "713:        0,     2,     0,     2,     2,     3,     3,     3,     2,     0,",
          "714:        0,    11,     0,     3,     0,     3,     3,     0,     2,     1,",
          "715:        1,     0,     2,     1,     2,     1,     2,     3,     3,     4,",
          "716:        3,     3,     1,     2,     0,     5,     0,     5,     3,     0,",
          "717:        2,     1,     1,     1,     1,     1,     3,     4,     4,     0,",
          "718:        1,     1,     3,     1,     1,     1,     1,     3,     3,     1,",
          "719:        3,     3,     0,     0,    11,     0,     9,     3,     2,     0,",
          "720:        4,     0,     4,     3,     3,     3,     3,     3,     3,     1,",
          "721:        3,     3,     1,     5,     1,     3,     0,     4,     1,     1,",
          "722:        3,     1,     1,     1,     1,     1,     3,     1,     1,     4,",
          "723:        1,     1,     1,     1,     4,     1,     4,     1,     1,     2,",
          "724:        3,     3,     3,     3,     3,     3,     3,     3,     2,     3,",
          "725:        3,     1",
          "729:    STATE-NUM when YYTABLE doesn't specify something else to do.  Zero",
          "",
          "[Added Lines]",
          "664:      302,   303,   304,    43,    45,    42,    92,    37,   305,   126,",
          "670: #define YYPACT_NINF -73",
          "672: #define yypact_value_is_default(Yystate) \\",
          "673:   (!!((Yystate) == (-73)))",
          "675: #define YYTABLE_NINF -94",
          "677: #define yytable_value_is_error(Yytable_value) \\",
          "678:   0",
          "682: static const yytype_int16 yypact[] =",
          "684:      -73,    79,   -73,   -32,    -4,   -73,   -73,    94,   -73,   -73,",
          "685:      -73,   -73,    13,   -73,   -73,   -73,   -73,    -8,    72,     6,",
          "686:      -73,    78,   111,   -73,    61,   122,   123,    82,   -73,    90,",
          "687:      123,   -73,   147,   150,    16,   -73,    96,   147,   -73,   101,",
          "688:       97,   -73,   -73,   -73,   -73,   151,    53,   -73,    48,   -73,",
          "689:      -73,   -73,   149,   145,   -73,    -9,   -73,   103,   107,   -73,",
          "690:      -73,   106,   -73,   -73,   -73,   -73,   -73,   -73,   110,   -73,",
          "691:      -73,   135,    48,   135,    48,   -33,   -73,    64,   -73,   144,",
          "692:      306,   -73,   -73,   135,   108,   135,   135,   135,   135,    -7,",
          "693:      322,   -73,   -73,   -73,    64,   117,   163,   168,   135,    48,",
          "694:      -73,   -73,    -6,   167,   135,   135,   135,   135,   135,   135,",
          "695:      135,   135,   135,   135,   135,   135,   135,   135,   135,   135,",
          "696:      135,    86,    86,   322,   135,   -73,   243,   261,   183,   203,",
          "697:      159,    -6,   -73,   -73,   -73,   279,   121,   125,    95,    48,",
          "698:       48,   -73,   -73,   -73,   -73,   322,   337,   351,   -43,   322,",
          "699:      322,   322,   322,   322,   322,    40,    40,    58,    58,   -73,",
          "700:      -73,   -73,   -73,   -73,   -73,   -73,   -73,   129,   -73,   -73,",
          "701:      -73,   -73,   128,   -73,   -73,    48,   152,   -73,    15,   135,",
          "702:      131,   -73,    95,   -73,   -73,    71,   -73,   223,   135,   133,",
          "703:      -73,   132,   -73,    15,   -73,    73,   129,   -73,    48,   -73,",
          "704:      -73,   135,   134,    31,   322,    48,   -73,    49,   -73",
          "708:      Performed when YYTABLE does not specify something else to do.  Zero",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "739:      101,     0,   102,    53,    97,    98,    94,    95,     0,    55,",
          "740:       56,     0,     0,     0,     0,   108,   121,    16,    54,     0,",
          "741:       79,    39,    39,     0,     0,     0,     0,     0,     0,     0,",
          "743:       71,    69,     0,     0,     0,     0,     0,     0,     0,     0,",
          "744:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,",
          "745:        0,    35,    37,    60,     0,    61,     0,     0,     0,     0,",
          "746:        0,     0,    80,    96,    46,     0,     0,    50,    51,     0,",
          "749:      113,   114,    42,    41,    43,    44,    40,     0,   104,   106,",
          "750:       99,    62,     0,    47,    48,     0,    72,    70,     0,     0,",
          "751:        0,    65,    52,    91,    92,     0,    89,     0,     0,     0,",
          "",
          "[Removed Lines]",
          "742:       93,   109,   118,    68,     0,    54,    79,     0,     0,    49,",
          "747:        0,    88,    86,    67,    57,    58,   117,   115,   116,    78,",
          "748:       77,    76,    74,    75,    73,   120,   119,   110,   111,   112,",
          "",
          "[Added Lines]",
          "721:       93,   109,    68,   118,     0,    54,    79,     0,     0,    49,",
          "726:        0,    88,    86,    67,    57,    58,   117,   115,   116,    77,",
          "727:       78,    73,    75,    74,    76,   119,   120,   110,   111,   112,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "753:       81,     0,     0,     0,    85,     0,    66,     0,    64",
          "754: };",
          "757: static const yytype_int16 yydefgoto[] =",
          "758: {",
          "759:       -1,     1,     5,     6,    17,    33,    25,    28,    40,     7,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "736: static const yytype_int16 yypgoto[] =",
          "737: {",
          "738:      -73,   -73,   199,   218,   -73,   -73,   -73,   -73,   -73,   -73,",
          "739:      -73,   -73,   -73,   -73,   192,   -73,   186,   -73,   -73,   142,",
          "740:      -73,   -73,   -73,   -73,   126,   -48,   -72,   -73,   -73,   -73,",
          "741:      -73,   -73,   -73,    50,   -73,   100,   -73,   -73,    35,   164,",
          "742:      -67",
          "743: };",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "763:       80",
          "764: };",
          "809: static const yytype_int16 yytable[] =",
          "810: {",
          "815:      148,   149,   150,   151,   152,   153,   154,   155,   156,   157,",
          "851: };",
          "853: static const yytype_int16 yycheck[] =",
          "854: {",
          "859:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,",
          "860:      117,   118,   119,   120,    38,    39,    64,   124,    10,    11,",
          "895: };",
          "899: static const yytype_uint8 yystos[] =",
          "900: {",
          "901:        0,    73,     0,     1,    37,    74,    75,    81,    61,    74,",
          "",
          "[Removed Lines]",
          "768: #define YYPACT_NINF -73",
          "769: static const yytype_int16 yypact[] =",
          "770: {",
          "771:      -73,   148,   -73,   -31,    -9,   -73,   -73,    18,   -73,   -73,",
          "772:      -73,   -73,     2,   -73,   -73,   -73,   -73,   -38,    19,   -28,",
          "773:      -73,    26,    61,   -73,    -8,    80,    90,    56,   -73,    63,",
          "774:       90,   -73,   128,   147,    16,   -73,    98,   128,   -73,   100,",
          "775:      102,   -73,   -73,   -73,   -73,   151,    53,   -73,    48,   -73,",
          "776:      -73,   -73,   149,   153,   -73,   -23,   -73,   105,   108,   -73,",
          "777:      -73,   107,   -73,   -73,   -73,   -73,   -73,   -73,    97,   -73,",
          "778:      -73,   119,   119,    48,    48,   -52,   -73,    39,   -73,   155,",
          "779:      297,   -73,   -73,   119,   122,   119,   119,   119,   119,     1,",
          "780:      313,   -73,   -73,   -73,    39,   123,   154,   182,   119,    48,",
          "781:      -73,   -73,    -6,   173,   119,   119,   119,   119,   119,   119,",
          "782:      119,   119,   119,   119,   119,   119,   119,   119,   119,   119,",
          "783:      119,    60,    60,   313,   119,   -73,   234,   252,   174,   194,",
          "784:      164,    -6,   -73,   -73,   -73,   270,   142,   143,    64,    48,",
          "785:       48,   -73,   -73,   -73,   -73,   313,   328,   342,    42,   313,",
          "786:      313,   313,   313,   313,   313,    88,    88,   103,   103,   -73,",
          "787:      -73,   -73,   -73,   -73,   -73,   -73,   -73,   127,   -73,   -73,",
          "788:      -73,   -73,   156,   -73,   -73,    48,   172,   -73,    -2,   119,",
          "789:      146,   -73,    64,   -73,   -73,    52,   -73,   214,   119,   157,",
          "790:      -73,   150,   -73,    -2,   -73,    91,   127,   -73,    48,   -73,",
          "791:      -73,   119,   163,    31,   313,    48,   -73,    49,   -73",
          "792: };",
          "795: static const yytype_int16 yypgoto[] =",
          "796: {",
          "797:      -73,   -73,   219,   220,   -73,   -73,   -73,   -73,   -73,   -73,",
          "798:      -73,   -73,   -73,   -73,   203,   -73,   197,   -73,   -73,   158,",
          "799:      -73,   -73,   -73,   -73,   132,   -48,   -72,   -73,   -73,   -73,",
          "800:      -73,   -73,   -73,    59,   -73,   110,   -73,   -73,    50,   184,",
          "801:      -67",
          "802: };",
          "805:    positive, shift that token.  If negative, reduce the rule which",
          "806:    number is the opposite.  If zero, do what YYDEFACT says.",
          "808: #define YYTABLE_NINF -94",
          "811:       77,    90,    95,    83,    91,    92,     4,    96,    84,   183,",
          "812:       11,   130,    16,   184,    97,    98,   123,    99,   126,   127,",
          "813:      128,   129,    12,    13,    14,    93,    18,   138,   141,    20,",
          "814:        8,   135,    41,   131,    22,    42,    23,   145,   146,   147,",
          "816:      158,   159,   160,   161,    43,    44,    26,   167,    54,    55,",
          "817:       56,    57,    58,   142,    59,    60,    61,    62,    24,    63,",
          "818:       45,   100,   101,    51,   -36,    64,    65,    66,    67,   100,",
          "819:      101,    68,   162,   163,   164,   165,    69,    70,    27,   100,",
          "820:      101,   176,   177,   114,   115,   116,   117,   118,   119,   120,",
          "821:       29,   206,    71,   182,   -54,   -54,    72,    54,    73,    56,",
          "822:       57,    58,   187,    59,    60,    61,    62,    74,    63,   208,",
          "823:       32,   196,   192,   193,    64,    65,    66,    67,    34,    54,",
          "824:      179,    56,    57,    58,   204,    59,    60,    61,    62,    36,",
          "825:       63,   116,   117,   118,   119,   120,    64,    65,     2,     3,",
          "826:      203,    71,   -17,   -17,   -17,    72,    39,   207,   118,   119,",
          "827:      120,   200,   201,    46,    48,    49,    88,    50,    81,   105,",
          "828:      106,   107,    85,    71,    82,    86,    87,    72,   114,   115,",
          "829:      116,   117,   118,   119,   120,     4,   -93,   102,    88,   103,",
          "830:      104,   124,   134,   132,    63,   171,   105,   106,   107,   108,",
          "831:      109,   110,   111,   112,   113,   114,   115,   116,   117,   118,",
          "832:      119,   120,   174,   101,   175,   188,   105,   106,   107,   198,",
          "833:      181,   197,     9,    10,   133,   114,   115,   116,   117,   118,",
          "834:      119,   120,   205,    35,    47,   144,   105,   106,   107,   190,",
          "835:      122,   172,     0,   199,   170,   114,   115,   116,   117,   118,",
          "836:      119,   120,    89,     0,     0,     0,   105,   106,   107,     0,",
          "837:        0,     0,     0,     0,   133,   114,   115,   116,   117,   118,",
          "838:      119,   120,     0,     0,     0,     0,   105,   106,   107,     0,",
          "839:        0,     0,     0,     0,   194,   114,   115,   116,   117,   118,",
          "840:      119,   120,     0,     0,   105,   106,   107,     0,     0,     0,",
          "841:        0,     0,   168,   114,   115,   116,   117,   118,   119,   120,",
          "842:        0,     0,   105,   106,   107,     0,     0,     0,     0,     0,",
          "843:      169,   114,   115,   116,   117,   118,   119,   120,     0,   -93,",
          "844:        0,     0,   103,   104,     0,     0,     0,     0,   173,   105,",
          "845:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,",
          "846:      116,   117,   118,   119,   120,   105,   106,   107,     0,     0,",
          "847:        0,     0,     0,     0,   114,   115,   116,   117,   118,   119,",
          "848:      120,   106,   107,     0,     0,     0,     0,     0,     0,   114,",
          "849:      115,   116,   117,   118,   119,   120,   107,     0,     0,     0,",
          "850:        0,     0,     0,   114,   115,   116,   117,   118,   119,   120",
          "855:       48,    68,    74,    26,    71,    72,    37,    74,    31,    11,",
          "856:       19,    10,    10,    15,    66,    67,    83,    69,    85,    86,",
          "857:       87,    88,     4,     5,     6,    73,    64,    99,    34,    10,",
          "858:       61,    98,    16,    32,    62,    19,    10,   104,   105,   106,",
          "861:       12,    13,    14,    69,    16,    17,    18,    19,     7,    21,",
          "862:       54,    40,    41,    20,    21,    27,    28,    29,    30,    40,",
          "863:       41,    33,    22,    23,    24,    25,    38,    39,     8,    40,",
          "864:       41,   139,   140,    51,    52,    53,    54,    55,    56,    57,",
          "865:       10,    70,    54,   175,    40,    41,    58,    10,    60,    12,",
          "866:       13,    14,   179,    16,    17,    18,    19,    69,    21,    70,",
          "867:       64,   188,    70,    71,    27,    28,    29,    30,    65,    10,",
          "868:        3,    12,    13,    14,   201,    16,    17,    18,    19,    11,",
          "869:       21,    53,    54,    55,    56,    57,    27,    28,     0,     1,",
          "870:      198,    54,     4,     5,     6,    58,     9,   205,    55,    56,",
          "871:       57,    70,    71,    65,    64,    63,    69,    16,    19,    42,",
          "872:       43,    44,    67,    54,    21,    67,    69,    58,    51,    52,",
          "873:       53,    54,    55,    56,    57,    37,    32,    32,    69,    35,",
          "874:       36,    69,    10,    70,    21,    31,    42,    43,    44,    45,",
          "875:       46,    47,    48,    49,    50,    51,    52,    53,    54,    55,",
          "876:       56,    57,    70,    41,    71,    69,    42,    43,    44,    69,",
          "877:       64,    64,     3,     3,    70,    51,    52,    53,    54,    55,",
          "878:       56,    57,    69,    30,    37,   103,    42,    43,    44,   180,",
          "879:       82,   131,    -1,   193,    70,    51,    52,    53,    54,    55,",
          "880:       56,    57,    68,    -1,    -1,    -1,    42,    43,    44,    -1,",
          "881:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
          "882:       56,    57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,",
          "883:       -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,",
          "884:       56,    57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,",
          "885:       -1,    -1,    68,    51,    52,    53,    54,    55,    56,    57,",
          "886:       -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,",
          "887:       68,    51,    52,    53,    54,    55,    56,    57,    -1,    32,",
          "888:       -1,    -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,",
          "889:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,",
          "890:       53,    54,    55,    56,    57,    42,    43,    44,    -1,    -1,",
          "891:       -1,    -1,    -1,    -1,    51,    52,    53,    54,    55,    56,",
          "892:       57,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,",
          "893:       52,    53,    54,    55,    56,    57,    44,    -1,    -1,    -1,",
          "894:       -1,    -1,    -1,    51,    52,    53,    54,    55,    56,    57",
          "",
          "[Added Lines]",
          "756:      positive, shift that token.  If negative, reduce the rule whose",
          "760:       77,    90,    95,   130,    91,     4,    93,    96,   114,   115,",
          "761:      116,   117,   118,   119,   120,    11,   123,    83,   126,   127,",
          "762:      128,   129,    84,    16,    92,   131,   183,   138,   141,     8,",
          "763:      184,   135,    41,    97,    98,    42,    99,   145,   146,   147,",
          "765:      158,   159,   160,   161,    43,    44,    18,   167,    54,    55,",
          "766:       56,    57,    58,   142,    59,    60,    61,    62,    22,    63,",
          "767:       45,   100,   101,    51,   -36,    64,    65,    66,    67,     2,",
          "768:        3,    68,    20,   -17,   -17,   -17,    69,    70,    23,   100,",
          "769:      101,   176,   177,   116,   117,   118,   119,   120,    12,    13,",
          "770:       14,   206,    71,   182,   100,   101,    72,    73,   162,   163,",
          "771:      164,   165,   187,   118,   119,   120,     4,    74,    24,   208,",
          "772:       54,   196,    56,    57,    58,    26,    59,    60,    61,    62,",
          "773:       27,    63,   179,    29,   204,   -54,   -54,    64,    65,    66,",
          "774:       67,   192,   193,   200,   201,    54,    32,    56,    57,    58,",
          "775:      203,    59,    60,    61,    62,    34,    63,   207,    36,    39,",
          "776:       49,    46,    64,    65,    71,    48,    82,    50,    81,    73,",
          "777:       85,   105,   106,   107,    86,    87,   102,   124,   134,    88,",
          "778:      114,   115,   116,   117,   118,   119,   120,   132,    63,    71,",
          "779:      171,   174,   181,   101,    73,   -93,   175,   197,   103,   104,",
          "780:      188,   198,     9,   205,    88,   105,   106,   107,   108,   109,",
          "781:      110,   111,   112,   113,   114,   115,   116,   117,   118,   119,",
          "782:      120,    10,    35,    47,   122,   105,   106,   107,   199,   144,",
          "783:      190,   172,    89,   133,   114,   115,   116,   117,   118,   119,",
          "784:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
          "785:        0,     0,     0,   170,   114,   115,   116,   117,   118,   119,",
          "786:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
          "787:        0,     0,     0,   133,   114,   115,   116,   117,   118,   119,",
          "788:      120,     0,     0,     0,     0,   105,   106,   107,     0,     0,",
          "789:        0,     0,     0,   194,   114,   115,   116,   117,   118,   119,",
          "790:      120,     0,     0,   105,   106,   107,     0,     0,     0,     0,",
          "791:        0,   168,   114,   115,   116,   117,   118,   119,   120,     0,",
          "792:        0,   105,   106,   107,     0,     0,     0,     0,     0,   169,",
          "793:      114,   115,   116,   117,   118,   119,   120,     0,   -93,     0,",
          "794:        0,   103,   104,     0,     0,     0,     0,   173,   105,   106,",
          "795:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,",
          "796:      117,   118,   119,   120,   105,   106,   107,     0,     0,     0,",
          "797:        0,     0,     0,   114,   115,   116,   117,   118,   119,   120,",
          "798:      106,   107,     0,     0,     0,     0,     0,     0,   114,   115,",
          "799:      116,   117,   118,   119,   120,   107,     0,     0,     0,     0,",
          "800:        0,     0,   114,   115,   116,   117,   118,   119,   120",
          "805:       48,    68,    74,    10,    71,    37,    73,    74,    51,    52,",
          "806:       53,    54,    55,    56,    57,    19,    83,    26,    85,    86,",
          "807:       87,    88,    31,    10,    72,    32,    11,    99,    34,    61,",
          "808:       15,    98,    16,    66,    67,    19,    69,   104,   105,   106,",
          "811:       12,    13,    14,    69,    16,    17,    18,    19,    62,    21,",
          "812:       54,    40,    41,    20,    21,    27,    28,    29,    30,     0,",
          "813:        1,    33,    10,     4,     5,     6,    38,    39,    10,    40,",
          "814:       41,   139,   140,    53,    54,    55,    56,    57,     4,     5,",
          "815:        6,    70,    54,   175,    40,    41,    58,    59,    22,    23,",
          "816:       24,    25,   179,    55,    56,    57,    37,    69,     7,    70,",
          "817:       10,   188,    12,    13,    14,    64,    16,    17,    18,    19,",
          "818:        8,    21,     3,    10,   201,    40,    41,    27,    28,    29,",
          "819:       30,    70,    71,    70,    71,    10,    64,    12,    13,    14,",
          "820:      198,    16,    17,    18,    19,    65,    21,   205,    11,     9,",
          "821:       63,    65,    27,    28,    54,    64,    21,    16,    19,    59,",
          "822:       67,    42,    43,    44,    67,    69,    32,    69,    10,    69,",
          "823:       51,    52,    53,    54,    55,    56,    57,    70,    21,    54,",
          "824:       31,    70,    64,    41,    59,    32,    71,    64,    35,    36,",
          "825:       69,    69,     3,    69,    69,    42,    43,    44,    45,    46,",
          "826:       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,",
          "827:       57,     3,    30,    37,    82,    42,    43,    44,   193,   103,",
          "828:      180,   131,    68,    70,    51,    52,    53,    54,    55,    56,",
          "829:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
          "830:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
          "831:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
          "832:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
          "833:       57,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,",
          "834:       -1,    -1,    -1,    70,    51,    52,    53,    54,    55,    56,",
          "835:       57,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,    -1,",
          "836:       -1,    68,    51,    52,    53,    54,    55,    56,    57,    -1,",
          "837:       -1,    42,    43,    44,    -1,    -1,    -1,    -1,    -1,    68,",
          "838:       51,    52,    53,    54,    55,    56,    57,    -1,    32,    -1,",
          "839:       -1,    35,    36,    -1,    -1,    -1,    -1,    68,    42,    43,",
          "840:       44,    45,    46,    47,    48,    49,    50,    51,    52,    53,",
          "841:       54,    55,    56,    57,    42,    43,    44,    -1,    -1,    -1,",
          "842:       -1,    -1,    -1,    51,    52,    53,    54,    55,    56,    57,",
          "843:       43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,",
          "844:       53,    54,    55,    56,    57,    44,    -1,    -1,    -1,    -1,",
          "845:       -1,    -1,    51,    52,    53,    54,    55,    56,    57",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "905:       80,    16,    19,    38,    39,    54,    65,    88,    64,    63,",
          "906:       16,    20,    89,    90,    10,    11,    12,    13,    14,    16,",
          "907:       17,    18,    19,    21,    27,    28,    29,    30,    33,    38,",
          "909:      112,    19,    21,    26,    31,    67,    67,    69,    69,   111,",
          "911:       40,    41,    32,    35,    36,    42,    43,    44,    45,    46,",
          "912:       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,",
          "913:       57,    91,    91,   112,    69,   105,   112,   112,   112,   112,",
          "",
          "[Removed Lines]",
          "908:       39,    54,    58,    60,    69,    93,    96,    97,    98,   111,",
          "910:      112,   112,   112,    97,    97,    98,   112,    66,    67,    69,",
          "",
          "[Added Lines]",
          "859:       39,    54,    58,    59,    69,    93,    96,    97,    98,   111,",
          "861:      112,   112,    97,   112,    97,    98,   112,    66,    67,    69,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "921:       70,    71,   100,    97,   112,    69,    70,    97,    70",
          "922: };",
          "940: #define YYRECOVERING()  (!!yyerrstatus)",
          "954:       yyerror (yyscanner, compiler, YY_(\"syntax error: cannot back up\")); \\",
          "1015: #if YYDEBUG",
          "",
          "[Removed Lines]",
          "924: #define yyerrok  (yyerrstatus = 0)",
          "925: #define yyclearin (yychar = YYEMPTY)",
          "926: #define YYEMPTY  (-2)",
          "927: #define YYEOF  0",
          "929: #define YYACCEPT goto yyacceptlab",
          "930: #define YYABORT  goto yyabortlab",
          "931: #define YYERROR  goto yyerrorlab",
          "935:    to ease the transition to the new meaning of YYERROR, for GCC.",
          "938: #define YYFAIL  goto yyerrlab",
          "942: #define YYBACKUP(Token, Value)     \\",
          "943: do        \\",
          "944:   if (yychar == YYEMPTY && yylen == 1)    \\",
          "945:     {        \\",
          "946:       yychar = (Token);      \\",
          "947:       yylval = (Value);      \\",
          "948:       yytoken = YYTRANSLATE (yychar);    \\",
          "949:       YYPOPSTACK (1);      \\",
          "950:       goto yybackup;      \\",
          "951:     }        \\",
          "952:   else        \\",
          "953:     {        \\",
          "955:       YYERROR;       \\",
          "956:     }        \\",
          "957: while (YYID (0))",
          "960: #define YYTERROR 1",
          "961: #define YYERRCODE 256",
          "965:    If N is 0, then set CURRENT to the empty location which ends",
          "968: #define YYRHSLOC(Rhs, K) ((Rhs)[K])",
          "969: #ifndef YYLLOC_DEFAULT",
          "970: # define YYLLOC_DEFAULT(Current, Rhs, N)    \\",
          "971:     do         \\",
          "972:       if (YYID (N))                                                    \\",
          "973:  {        \\",
          "974:    (Current).first_line   = YYRHSLOC (Rhs, 1).first_line; \\",
          "975:    (Current).first_column = YYRHSLOC (Rhs, 1).first_column; \\",
          "976:    (Current).last_line    = YYRHSLOC (Rhs, N).last_line;  \\",
          "977:    (Current).last_column  = YYRHSLOC (Rhs, N).last_column; \\",
          "978:  }        \\",
          "979:       else        \\",
          "980:  {        \\",
          "981:    (Current).first_line   = (Current).last_line   =  \\",
          "982:      YYRHSLOC (Rhs, 0).last_line;    \\",
          "983:    (Current).first_column = (Current).last_column =  \\",
          "984:      YYRHSLOC (Rhs, 0).last_column;    \\",
          "985:  }        \\",
          "986:     while (YYID (0))",
          "987: #endif",
          "991:    This macro was not mandated originally: define only if we know",
          "994: #ifndef YY_LOCATION_PRINT",
          "995: # if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL",
          "996: #  define YY_LOCATION_PRINT(File, Loc)   \\",
          "997:      fprintf (File, \"%d.%d-%d.%d\",   \\",
          "998:        (Loc).first_line, (Loc).first_column, \\",
          "999:        (Loc).last_line,  (Loc).last_column)",
          "1000: # else",
          "1001: #  define YY_LOCATION_PRINT(File, Loc) ((void) 0)",
          "1002: # endif",
          "1003: #endif",
          "1008: #ifdef YYLEX_PARAM",
          "1009: # define YYLEX yylex (&yylval, YYLEX_PARAM)",
          "1010: #else",
          "1011: # define YYLEX yylex (&yylval, yyscanner, compiler)",
          "1012: #endif",
          "",
          "[Added Lines]",
          "876: static const yytype_uint8 yyr1[] =",
          "877: {",
          "878:        0,    72,    73,    73,    73,    73,    73,    73,    74,    76,",
          "879:       77,    75,    78,    78,    79,    79,    80,    81,    81,    82,",
          "880:       82,    83,    83,    84,    84,    85,    85,    86,    86,    86,",
          "881:       86,    86,    87,    87,    89,    88,    90,    88,    88,    91,",
          "882:       91,    92,    92,    92,    92,    93,    93,    93,    93,    94,",
          "883:       94,    95,    95,    96,    97,    98,    98,    98,    98,    98,",
          "884:       98,    98,    99,   100,    98,   101,    98,    98,    98,   102,",
          "885:       98,   103,    98,    98,    98,    98,    98,    98,    98,    98,",
          "886:       98,   104,   104,   105,   106,   106,   108,   107,   107,   109,",
          "887:      109,   110,   110,   111,   111,   111,   112,   112,   112,   112,",
          "888:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
          "889:      112,   112,   112,   112,   112,   112,   112,   112,   112,   112,",
          "890:      112,   112",
          "891: };",
          "894: static const yytype_uint8 yyr2[] =",
          "895: {",
          "896:        0,     2,     0,     2,     2,     3,     3,     3,     2,     0,",
          "897:        0,    11,     0,     3,     0,     3,     3,     0,     2,     1,",
          "898:        1,     0,     2,     1,     2,     1,     2,     3,     3,     4,",
          "899:        3,     3,     1,     2,     0,     5,     0,     5,     3,     0,",
          "900:        2,     1,     1,     1,     1,     1,     3,     4,     4,     0,",
          "901:        1,     1,     3,     1,     1,     1,     1,     3,     3,     1,",
          "902:        3,     3,     0,     0,    11,     0,     9,     3,     2,     0,",
          "903:        4,     0,     4,     3,     3,     3,     3,     3,     3,     1,",
          "904:        3,     3,     1,     5,     1,     3,     0,     4,     1,     1,",
          "905:        3,     1,     1,     1,     1,     1,     3,     1,     1,     4,",
          "906:        1,     1,     1,     1,     4,     1,     4,     1,     1,     2,",
          "907:        3,     3,     3,     3,     3,     3,     3,     3,     2,     3,",
          "908:        3,     1",
          "909: };",
          "912: #define yyerrok         (yyerrstatus = 0)",
          "913: #define yyclearin       (yychar = YYEMPTY)",
          "914: #define YYEMPTY         (-2)",
          "915: #define YYEOF           0",
          "917: #define YYACCEPT        goto yyacceptlab",
          "918: #define YYABORT         goto yyabortlab",
          "919: #define YYERROR         goto yyerrorlab",
          "924: #define YYBACKUP(Token, Value)                                  \\",
          "925: do                                                              \\",
          "926:   if (yychar == YYEMPTY)                                        \\",
          "927:     {                                                           \\",
          "928:       yychar = (Token);                                         \\",
          "929:       yylval = (Value);                                         \\",
          "930:       YYPOPSTACK (yylen);                                       \\",
          "931:       yystate = *yyssp;                                         \\",
          "932:       goto yybackup;                                            \\",
          "933:     }                                                           \\",
          "934:   else                                                          \\",
          "935:     {                                                           \\",
          "937:       YYERROR;                                                  \\",
          "938:     }                                                           \\",
          "939: while (0)",
          "942: #define YYTERROR        1",
          "943: #define YYERRCODE       256",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1019: #  define YYFPRINTF fprintf",
          "1020: # endif",
          "1047: static void",
          "1048: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, YR_COMPILER* compiler)",
          "1058: {",
          "1061:   YYUSE (yyscanner);",
          "1062:   YYUSE (compiler);",
          "1063: # ifdef YYPRINT",
          "1064:   if (yytype < YYNTOKENS)",
          "1065:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);",
          "1068: # endif",
          "1074: }",
          "",
          "[Removed Lines]",
          "1022: # define YYDPRINTF(Args)   \\",
          "1023: do {      \\",
          "1024:   if (yydebug)     \\",
          "1025:     YYFPRINTF Args;    \\",
          "1026: } while (YYID (0))",
          "1028: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)     \\",
          "1029: do {           \\",
          "1030:   if (yydebug)          \\",
          "1031:     {           \\",
          "1032:       YYFPRINTF (stderr, \"%s \", Title);       \\",
          "1033:       yy_symbol_print (stderr,        \\",
          "1034:     Type, Value, yyscanner, compiler); \\",
          "1035:       YYFPRINTF (stderr, \"\\n\");        \\",
          "1036:     }           \\",
          "1037: } while (YYID (0))",
          "1041: | Print this symbol on YYOUTPUT.  |",
          "1045: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1046:      || defined __cplusplus || defined _MSC_VER)",
          "1049: #else",
          "1050: static void",
          "1051: yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, compiler)",
          "1052:     FILE *yyoutput;",
          "1053:     int yytype;",
          "1054:     YYSTYPE const * const yyvaluep;",
          "1055:     void *yyscanner;",
          "1056:     YR_COMPILER* compiler;",
          "1057: #endif",
          "1059:   if (!yyvaluep)",
          "1060:     return;",
          "1066: # else",
          "1067:   YYUSE (yyoutput);",
          "1069:   switch (yytype)",
          "1070:     {",
          "1071:       default:",
          "1072:  break;",
          "1073:     }",
          "",
          "[Added Lines]",
          "955: # define YYDPRINTF(Args)                        \\",
          "956: do {                                            \\",
          "957:   if (yydebug)                                  \\",
          "958:     YYFPRINTF Args;                             \\",
          "959: } while (0)",
          "962: #ifndef YY_LOCATION_PRINT",
          "963: # define YY_LOCATION_PRINT(File, Loc) ((void) 0)",
          "964: #endif",
          "967: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\",
          "968: do {                                                                      \\",
          "969:   if (yydebug)                                                            \\",
          "970:     {                                                                     \\",
          "971:       YYFPRINTF (stderr, \"%s \", Title);                                   \\",
          "972:       yy_symbol_print (stderr,                                            \\",
          "973:                   Type, Value, yyscanner, compiler); \\",
          "974:       YYFPRINTF (stderr, \"\\n\");                                           \\",
          "975:     }                                                                     \\",
          "976: } while (0)",
          "980: | Print this symbol's value on YYOUTPUT.  |",
          "986:   FILE *yyo = yyoutput;",
          "987:   YYUSE (yyo);",
          "990:   if (!yyvaluep)",
          "991:     return;",
          "996:   YYUSE (yytype);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1078: | Print this symbol on YYOUTPUT.  |",
          "1083: static void",
          "1084: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, YR_COMPILER* compiler)",
          "1094: {",
          "1100:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, compiler);",
          "1101:   YYFPRINTF (yyoutput, \")\");",
          "",
          "[Removed Lines]",
          "1081: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1082:      || defined __cplusplus || defined _MSC_VER)",
          "1085: #else",
          "1086: static void",
          "1087: yy_symbol_print (yyoutput, yytype, yyvaluep, yyscanner, compiler)",
          "1088:     FILE *yyoutput;",
          "1089:     int yytype;",
          "1090:     YYSTYPE const * const yyvaluep;",
          "1091:     void *yyscanner;",
          "1092:     YR_COMPILER* compiler;",
          "1093: #endif",
          "1095:   if (yytype < YYNTOKENS)",
          "1096:     YYFPRINTF (yyoutput, \"token %s (\", yytname[yytype]);",
          "1097:   else",
          "1098:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);",
          "",
          "[Added Lines]",
          "1007:   YYFPRINTF (yyoutput, \"%s %s (\",",
          "1008:              yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1106: | TOP (included).                                                   |",
          "1111: static void",
          "1119: {",
          "1120:   YYFPRINTF (stderr, \"Stack now\");",
          "1123:   YYFPRINTF (stderr, \"\\n\");",
          "1124: }",
          "1134: | Report that the YYRULE is going to be reduced.  |",
          "1142: static void",
          "1149: {",
          "1150:   int yynrhs = yyr2[yyrule];",
          "1151:   int yyi;",
          "1153:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",",
          "1156:   for (yyi = 0; yyi < yynrhs; yyi++)",
          "1157:     {",
          "1163:     }",
          "1164: }",
          "",
          "[Removed Lines]",
          "1109: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1110:      || defined __cplusplus || defined _MSC_VER)",
          "1112: yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)",
          "1113: #else",
          "1114: static void",
          "1115: yy_stack_print (bottom, top)",
          "1116:     yytype_int16 *bottom;",
          "1117:     yytype_int16 *top;",
          "1118: #endif",
          "1121:   for (; bottom <= top; ++bottom)",
          "1122:     YYFPRINTF (stderr, \" %d\", *bottom);",
          "1126: # define YY_STACK_PRINT(Bottom, Top)    \\",
          "1127: do {        \\",
          "1128:   if (yydebug)       \\",
          "1129:     yy_stack_print ((Bottom), (Top));    \\",
          "1130: } while (YYID (0))",
          "1137: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1138:      || defined __cplusplus || defined _MSC_VER)",
          "1139: static void",
          "1140: yy_reduce_print (YYSTYPE *yyvsp, int yyrule, void *yyscanner, YR_COMPILER* compiler)",
          "1141: #else",
          "1143: yy_reduce_print (yyvsp, yyrule, yyscanner, compiler)",
          "1144:     YYSTYPE *yyvsp;",
          "1145:     int yyrule;",
          "1146:     void *yyscanner;",
          "1147:     YR_COMPILER* compiler;",
          "1148: #endif",
          "1152:   unsigned long int yylno = yyrline[yyrule];",
          "1154:       yyrule - 1, yylno);",
          "1158:       fprintf (stderr, \"   $%d = \", yyi + 1);",
          "1159:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],",
          "1160:          &(yyvsp[(yyi + 1) - (yynrhs)])",
          "1161:                   , yyscanner, compiler);",
          "1162:       fprintf (stderr, \"\\n\");",
          "1166: # define YY_REDUCE_PRINT(Rule)  \\",
          "1167: do {     \\",
          "1168:   if (yydebug)    \\",
          "1169:     yy_reduce_print (yyvsp, Rule, yyscanner, compiler); \\",
          "1170: } while (YYID (0))",
          "",
          "[Added Lines]",
          "1020: yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)",
          "1023:   for (; yybottom <= yytop; yybottom++)",
          "1024:     {",
          "1025:       int yybot = *yybottom;",
          "1026:       YYFPRINTF (stderr, \" %d\", yybot);",
          "1027:     }",
          "1031: # define YY_STACK_PRINT(Bottom, Top)                            \\",
          "1032: do {                                                            \\",
          "1033:   if (yydebug)                                                  \\",
          "1034:     yy_stack_print ((Bottom), (Top));                           \\",
          "1035: } while (0)",
          "1043: yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, YR_COMPILER* compiler)",
          "1045:   unsigned long int yylno = yyrline[yyrule];",
          "1049:              yyrule - 1, yylno);",
          "1053:       YYFPRINTF (stderr, \"   $%d = \", yyi + 1);",
          "1054:       yy_symbol_print (stderr,",
          "1055:                        yystos[yyssp[yyi + 1 - yynrhs]],",
          "1056:                        &(yyvsp[(yyi + 1) - (yynrhs)])",
          "1057:                                               , yyscanner, compiler);",
          "1058:       YYFPRINTF (stderr, \"\\n\");",
          "1062: # define YY_REDUCE_PRINT(Rule)          \\",
          "1063: do {                                    \\",
          "1064:   if (yydebug)                          \\",
          "1065:     yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, compiler); \\",
          "1066: } while (0)",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1185: # define YYINITDEPTH 200",
          "1186: #endif",
          "",
          "[Removed Lines]",
          "1184: #ifndef YYINITDEPTH",
          "",
          "[Added Lines]",
          "1080: #ifndef YYINITDEPTH",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1205: #  if defined __GLIBC__ && defined _STRING_H",
          "1206: #   define yystrlen strlen",
          "1207: #  else",
          "1210:      || defined __cplusplus || defined _MSC_VER)",
          "1211: static YYSIZE_T",
          "1217: #endif",
          "1218: {",
          "1219:   YYSIZE_T yylen;",
          "",
          "[Removed Lines]",
          "1209: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1212: yystrlen (const char *yystr)",
          "1213: #else",
          "1214: static YYSIZE_T",
          "1215: yystrlen (yystr)",
          "1216:     const char *yystr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1229: #   define yystpcpy stpcpy",
          "1230: #  else",
          "1234:      || defined __cplusplus || defined _MSC_VER)",
          "1235: static char *",
          "1242: #endif",
          "1243: {",
          "1244:   char *yyd = yydest;",
          "",
          "[Removed Lines]",
          "1233: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1236: yystpcpy (char *yydest, const char *yysrc)",
          "1237: #else",
          "1238: static char *",
          "1239: yystpcpy (yydest, yysrc)",
          "1240:     char *yydest;",
          "1241:     const char *yysrc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1268:       YYSIZE_T yyn = 0;",
          "1269:       char const *yyp = yystr;",
          "1292:    }",
          "1293:     do_not_strip_quotes: ;",
          "1294:     }",
          "",
          "[Removed Lines]",
          "1271:       for (;;)",
          "1272:  switch (*++yyp)",
          "1273:    {",
          "1274:    case '\\'':",
          "1275:    case ',':",
          "1276:      goto do_not_strip_quotes;",
          "1278:    case '\\\\':",
          "1279:      if (*++yyp != '\\\\')",
          "1280:        goto do_not_strip_quotes;",
          "1282:    default:",
          "1283:      if (yyres)",
          "1284:        yyres[yyn] = *yyp;",
          "1285:      yyn++;",
          "1286:      break;",
          "1288:    case '\"':",
          "1289:      if (yyres)",
          "1290:        yyres[yyn] = '\\0';",
          "1291:      return yyn;",
          "",
          "[Added Lines]",
          "1151:         switch (*++yyp)",
          "1152:           {",
          "1153:           case '\\'':",
          "1154:           case ',':",
          "1155:             goto do_not_strip_quotes;",
          "1157:           case '\\\\':",
          "1158:             if (*++yyp != '\\\\')",
          "1159:               goto do_not_strip_quotes;",
          "1161:           default:",
          "1162:             if (yyres)",
          "1163:               yyres[yyn] = *yyp;",
          "1164:             yyn++;",
          "1165:             break;",
          "1167:           case '\"':",
          "1168:             if (yyres)",
          "1169:               yyres[yyn] = '\\0';",
          "1170:             return yyn;",
          "1171:           }",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1299:   return yystpcpy (yyres, yystr) - yyres;",
          "1300: }",
          "1301: # endif",
          "1311: yysyntax_error (char *yyresult, int yystate, int yychar)",
          "1313:   int yyn = yypact[yystate];",
          "1317:   else",
          "1407:       return yysize;",
          "1408:     }",
          "1409: }",
          "1415: | Release the memory associated to this symbol.  |",
          "1419: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1420:      || defined __cplusplus || defined _MSC_VER)",
          "1430:     YR_COMPILER* compiler;",
          "1431: #endif",
          "1432: {",
          "1433:   YYUSE (yyvaluep);",
          "1434:   YYUSE (yyscanner);",
          "1435:   YYUSE (compiler);",
          "1437:   if (!yymsg)",
          "1438:     yymsg = \"Deleting\";",
          "1439:   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);",
          "1441:   switch (yytype)",
          "1486: #line 1485 \"grammar.c\"",
          "1487:  break;",
          "1489:       default:",
          "1490:  break;",
          "1491:     }",
          "1492: }",
          "",
          "[Removed Lines]",
          "1304:    YYCHAR while in state YYSTATE.  Return the number of bytes copied,",
          "1305:    including the terminating null byte.  If YYRESULT is null, do not",
          "1306:    copy anything; just return the number of bytes that would be",
          "1307:    copied.  As a special case, return 0 if an ordinary \"syntax error\"",
          "1308:    message will do.  Return YYSIZE_MAXIMUM if overflow occurs during",
          "1310: static YYSIZE_T",
          "1312: {",
          "1315:   if (! (YYPACT_NINF < yyn && yyn <= YYLAST))",
          "1316:     return 0;",
          "1318:     {",
          "1319:       int yytype = YYTRANSLATE (yychar);",
          "1320:       YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);",
          "1321:       YYSIZE_T yysize = yysize0;",
          "1322:       YYSIZE_T yysize1;",
          "1323:       int yysize_overflow = 0;",
          "1324:       enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "1325:       char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "1326:       int yyx;",
          "1328: # if 0",
          "1331:       YY_(\"syntax error, unexpected %s\");",
          "1332:       YY_(\"syntax error, unexpected %s, expecting %s\");",
          "1333:       YY_(\"syntax error, unexpected %s, expecting %s or %s\");",
          "1334:       YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\");",
          "1335:       YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\");",
          "1336: # endif",
          "1337:       char *yyfmt;",
          "1338:       char const *yyf;",
          "1339:       static char const yyunexpected[] = \"syntax error, unexpected %s\";",
          "1340:       static char const yyexpecting[] = \", expecting %s\";",
          "1341:       static char const yyor[] = \" or %s\";",
          "1342:       char yyformat[sizeof yyunexpected",
          "1343:       + sizeof yyexpecting - 1",
          "1344:       + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)",
          "1346:       char const *yyprefix = yyexpecting;",
          "1350:       int yyxbegin = yyn < 0 ? -yyn : 0;",
          "1353:       int yychecklim = YYLAST - yyn + 1;",
          "1354:       int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;",
          "1355:       int yycount = 1;",
          "1357:       yyarg[0] = yytname[yytype];",
          "1358:       yyfmt = yystpcpy (yyformat, yyunexpected);",
          "1360:       for (yyx = yyxbegin; yyx < yyxend; ++yyx)",
          "1361:  if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)",
          "1362:    {",
          "1363:      if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)",
          "1364:        {",
          "1365:   yycount = 1;",
          "1366:   yysize = yysize0;",
          "1367:   yyformat[sizeof yyunexpected - 1] = '\\0';",
          "1368:   break;",
          "1369:        }",
          "1370:      yyarg[yycount++] = yytname[yyx];",
          "1371:      yysize1 = yysize + yytnamerr (0, yytname[yyx]);",
          "1372:      yysize_overflow |= (yysize1 < yysize);",
          "1373:      yysize = yysize1;",
          "1374:      yyfmt = yystpcpy (yyfmt, yyprefix);",
          "1375:      yyprefix = yyor;",
          "1376:    }",
          "1378:       yyf = YY_(yyformat);",
          "1379:       yysize1 = yysize + yystrlen (yyf);",
          "1380:       yysize_overflow |= (yysize1 < yysize);",
          "1381:       yysize = yysize1;",
          "1383:       if (yysize_overflow)",
          "1384:  return YYSIZE_MAXIMUM;",
          "1386:       if (yyresult)",
          "1387:  {",
          "1389:       Don't have undefined behavior even if the translation",
          "1391:    char *yyp = yyresult;",
          "1392:    int yyi = 0;",
          "1393:    while ((*yyp = *yyf) != '\\0')",
          "1394:      {",
          "1395:        if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)",
          "1396:   {",
          "1397:     yyp += yytnamerr (yyp, yyarg[yyi++]);",
          "1398:     yyf += 2;",
          "1399:   }",
          "1400:        else",
          "1401:   {",
          "1402:     yyp++;",
          "1403:     yyf++;",
          "1404:   }",
          "1405:      }",
          "1406:  }",
          "1421: static void",
          "1422: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, YR_COMPILER* compiler)",
          "1423: #else",
          "1424: static void",
          "1425: yydestruct (yymsg, yytype, yyvaluep, yyscanner, compiler)",
          "1426:     const char *yymsg;",
          "1427:     int yytype;",
          "1428:     YYSTYPE *yyvaluep;",
          "1429:     void *yyscanner;",
          "1442:     {",
          "1444: #line 176 \"grammar.y\"",
          "1445:  { yr_free((yyvaluep->c_string)); };",
          "1446: #line 1445 \"grammar.c\"",
          "1447:  break;",
          "1449: #line 180 \"grammar.y\"",
          "1450:  { yr_free((yyvaluep->c_string)); };",
          "1451: #line 1450 \"grammar.c\"",
          "1452:  break;",
          "1454: #line 177 \"grammar.y\"",
          "1455:  { yr_free((yyvaluep->c_string)); };",
          "1456: #line 1455 \"grammar.c\"",
          "1457:  break;",
          "1459: #line 178 \"grammar.y\"",
          "1460:  { yr_free((yyvaluep->c_string)); };",
          "1461: #line 1460 \"grammar.c\"",
          "1462:  break;",
          "1464: #line 179 \"grammar.y\"",
          "1465:  { yr_free((yyvaluep->c_string)); };",
          "1466: #line 1465 \"grammar.c\"",
          "1467:  break;",
          "1469: #line 181 \"grammar.y\"",
          "1470:  { yr_free((yyvaluep->c_string)); };",
          "1471: #line 1470 \"grammar.c\"",
          "1472:  break;",
          "1474: #line 182 \"grammar.y\"",
          "1475:  { yr_free((yyvaluep->sized_string)); };",
          "1476: #line 1475 \"grammar.c\"",
          "1477:  break;",
          "1479: #line 183 \"grammar.y\"",
          "1480:  { yr_free((yyvaluep->sized_string)); };",
          "1481: #line 1480 \"grammar.c\"",
          "1482:  break;",
          "1484: #line 184 \"grammar.y\"",
          "1485:  { yr_free((yyvaluep->sized_string)); };",
          "1498: #ifdef YYPARSE_PARAM",
          "1499: #if defined __STDC__ || defined __cplusplus",
          "1500: int yyparse (void *YYPARSE_PARAM);",
          "1501: #else",
          "1502: int yyparse ();",
          "1503: #endif",
          "1505: #if defined __STDC__ || defined __cplusplus",
          "1506: int yyparse (void *yyscanner, YR_COMPILER* compiler);",
          "1507: #else",
          "1508: int yyparse ();",
          "1509: #endif",
          "",
          "[Added Lines]",
          "1183:    about the unexpected token YYTOKEN for the state stack whose top is",
          "1184:    YYSSP.",
          "1186:    Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is",
          "1187:    not large enough to hold the message.  In that case, also set",
          "1190: static int",
          "1191: yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,",
          "1192:                 yytype_int16 *yyssp, int yytoken)",
          "1194:   YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);",
          "1195:   YYSIZE_T yysize = yysize0;",
          "1196:   enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "1198:   const char *yyformat = YY_NULLPTR;",
          "1200:   char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "1203:   int yycount = 0;",
          "1206:      - If this state is a consistent state with a default action, then",
          "1207:        the only way this function was invoked is if the default action",
          "1208:        is an error action.  In that case, don't check for expected",
          "1209:        tokens because there are none.",
          "1210:      - The only way there can be no lookahead present (in yychar) is if",
          "1211:        this state is a consistent state with a default action.  Thus,",
          "1212:        detecting the absence of a lookahead is sufficient to determine",
          "1213:        that there is no unexpected or expected token to report.  In that",
          "1214:        case, just report a simple \"syntax error\".",
          "1215:      - Don't assume there isn't a lookahead just because this state is a",
          "1216:        consistent state with a default action.  There might have been a",
          "1217:        previous inconsistent state, consistent state with a non-default",
          "1218:        action, or user semantic action that manipulated yychar.",
          "1219:      - Of course, the expected token list depends on states to have",
          "1220:        correct lookahead information, and it depends on the parser not",
          "1221:        to perform extra reductions after fetching a lookahead from the",
          "1222:        scanner and before detecting a syntax error.  Thus, state merging",
          "1223:        (from LALR or IELR) and default reductions corrupt the expected",
          "1224:        token list.  However, the list is correct for canonical LR with",
          "1225:        one exception: it will still contain any token that will not be",
          "1226:        accepted due to an error action in a later state.",
          "1228:   if (yytoken != YYEMPTY)",
          "1229:     {",
          "1230:       int yyn = yypact[*yyssp];",
          "1231:       yyarg[yycount++] = yytname[yytoken];",
          "1232:       if (!yypact_value_is_default (yyn))",
          "1233:         {",
          "1235:              YYCHECK.  In other words, skip the first -YYN actions for",
          "1237:           int yyxbegin = yyn < 0 ? -yyn : 0;",
          "1239:           int yychecklim = YYLAST - yyn + 1;",
          "1240:           int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;",
          "1241:           int yyx;",
          "1243:           for (yyx = yyxbegin; yyx < yyxend; ++yyx)",
          "1244:             if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR",
          "1245:                 && !yytable_value_is_error (yytable[yyx + yyn]))",
          "1246:               {",
          "1247:                 if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)",
          "1248:                   {",
          "1249:                     yycount = 1;",
          "1250:                     yysize = yysize0;",
          "1251:                     break;",
          "1252:                   }",
          "1253:                 yyarg[yycount++] = yytname[yyx];",
          "1254:                 {",
          "1255:                   YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);",
          "1256:                   if (! (yysize <= yysize1",
          "1257:                          && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "1258:                     return 2;",
          "1259:                   yysize = yysize1;",
          "1260:                 }",
          "1261:               }",
          "1262:         }",
          "1263:     }",
          "1265:   switch (yycount)",
          "1266:     {",
          "1267: # define YYCASE_(N, S)                      \\",
          "1268:       case N:                               \\",
          "1269:         yyformat = S;                       \\",
          "1270:       break",
          "1271:       YYCASE_(0, YY_(\"syntax error\"));",
          "1272:       YYCASE_(1, YY_(\"syntax error, unexpected %s\"));",
          "1273:       YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));",
          "1274:       YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));",
          "1275:       YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));",
          "1276:       YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));",
          "1277: # undef YYCASE_",
          "1278:     }",
          "1280:   {",
          "1281:     YYSIZE_T yysize1 = yysize + yystrlen (yyformat);",
          "1282:     if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "1283:       return 2;",
          "1284:     yysize = yysize1;",
          "1285:   }",
          "1287:   if (*yymsg_alloc < yysize)",
          "1290:       if (! (yysize <= *yymsg_alloc",
          "1291:              && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))",
          "1293:       return 1;",
          "1297:      Don't have undefined behavior even if the translation",
          "1299:   {",
          "1300:     char *yyp = *yymsg;",
          "1301:     int yyi = 0;",
          "1302:     while ((*yyp = *yyformat) != '\\0')",
          "1303:       if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)",
          "1304:         {",
          "1305:           yyp += yytnamerr (yyp, yyarg[yyi++]);",
          "1306:           yyformat += 2;",
          "1307:         }",
          "1308:       else",
          "1309:         {",
          "1310:           yyp++;",
          "1311:           yyformat++;",
          "1312:         }",
          "1313:   }",
          "1314:   return 0;",
          "1332:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1337:       { yr_free(((*yyvaluep).c_string)); }",
          "1339:         break;",
          "1343:       { yr_free(((*yyvaluep).c_string)); }",
          "1345:         break;",
          "1349:       { yr_free(((*yyvaluep).c_string)); }",
          "1351:         break;",
          "1355:       { yr_free(((*yyvaluep).c_string)); }",
          "1357:         break;",
          "1361:       { yr_free(((*yyvaluep).c_string)); }",
          "1363:         break;",
          "1367:       { yr_free(((*yyvaluep).c_string)); }",
          "1369:         break;",
          "1373:       { yr_free(((*yyvaluep).sized_string)); }",
          "1375:         break;",
          "1379:       { yr_free(((*yyvaluep).sized_string)); }",
          "1381:         break;",
          "1385:       { yr_free(((*yyvaluep).sized_string)); }",
          "1387:         break;",
          "1391:         break;",
          "1393:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1532: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1540:     YR_COMPILER* compiler;",
          "1541: #endif",
          "1542: #endif",
          "1543: {",
          "1563:   char *yymsg = yymsgbuf;",
          "1564:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;",
          "1568:      `yyss': related to states,",
          "1572:      Refer to the stacks thru separate pointers, to allow yyoverflow",
          "1576:   yytype_int16 yyssa[YYINITDEPTH];",
          "1577:   yytype_int16 *yyss = yyssa;",
          "1581:   YYSTYPE yyvsa[YYINITDEPTH];",
          "1582:   YYSTYPE *yyvs = yyvsa;",
          "1583:   YYSTYPE *yyvsp;",
          "1587: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))",
          "1589:   YYSIZE_T yystacksize = YYINITDEPTH;",
          "1593:   YYSTYPE yyval;",
          "1598:   int yylen = 0;",
          "1600:   YYDPRINTF ((stderr, \"Starting parse\\n\"));",
          "1602:   yystate = 0;",
          "1603:   yyerrstatus = 0;",
          "1604:   yynerrs = 0;",
          "1612:   yyssp = yyss;",
          "1613:   yyvsp = yyvs;",
          "",
          "[Removed Lines]",
          "1518: | yyparse.  |",
          "1521: #ifdef YYPARSE_PARAM",
          "1522: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1523:      || defined __cplusplus || defined _MSC_VER)",
          "1524: int",
          "1525: yyparse (void *YYPARSE_PARAM)",
          "1526: #else",
          "1527: int",
          "1528: yyparse (YYPARSE_PARAM)",
          "1529:     void *YYPARSE_PARAM;",
          "1530: #endif",
          "1533:      || defined __cplusplus || defined _MSC_VER)",
          "1534: int",
          "1535: yyparse (void *yyscanner, YR_COMPILER* compiler)",
          "1536: #else",
          "1537: int",
          "1538: yyparse (yyscanner, compiler)",
          "1539:     void *yyscanner;",
          "1545: int yychar;",
          "1548: YYSTYPE yylval;",
          "1551: int yynerrs;",
          "1553:   int yystate;",
          "1554:   int yyn;",
          "1555:   int yyresult;",
          "1557:   int yyerrstatus;",
          "1559:   int yytoken = 0;",
          "1560: #if YYERROR_VERBOSE",
          "1562:   char yymsgbuf[128];",
          "1565: #endif",
          "1569:      `yyvs': related to semantic values,",
          "1570:      `yyls': related to locations.",
          "1578:   yytype_int16 *yyssp;",
          "1608:      Waste one element of value and location stack",
          "1609:      so that they stay on the same level as the state stack.",
          "",
          "[Added Lines]",
          "1413: YY_INITIAL_VALUE (static YYSTYPE yyval_default;)",
          "1414: YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);",
          "1417:     int yynerrs;",
          "1419:     int yystate;",
          "1421:     int yyerrstatus;",
          "1424:        'yyss': related to states.",
          "1425:        'yyvs': related to semantic values.",
          "1427:        Refer to the stacks through separate pointers, to allow yyoverflow",
          "1431:     yytype_int16 yyssa[YYINITDEPTH];",
          "1432:     yytype_int16 *yyss;",
          "1433:     yytype_int16 *yyssp;",
          "1436:     YYSTYPE yyvsa[YYINITDEPTH];",
          "1437:     YYSTYPE *yyvs;",
          "1438:     YYSTYPE *yyvsp;",
          "1440:     YYSIZE_T yystacksize;",
          "1442:   int yyn;",
          "1443:   int yyresult;",
          "1445:   int yytoken = 0;",
          "1450: #if YYERROR_VERBOSE",
          "1452:   char yymsgbuf[128];",
          "1453:   char *yymsg = yymsgbuf;",
          "1454:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;",
          "1455: #endif",
          "1457: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))",
          "1463:   yyssp = yyss = yyssa;",
          "1464:   yyvsp = yyvs = yyvsa;",
          "1465:   yystacksize = YYINITDEPTH;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1629:     {",
          "1631:       YYSIZE_T yysize = yyssp - yyss + 1;",
          "1652:  yyss = yyss1;",
          "1653:  yyvs = yyvs1;",
          "",
          "[Removed Lines]",
          "1633: #ifdef yyoverflow",
          "1634:       {",
          "1636:     these so that the &'s don't force the real ones into",
          "1638:  YYSTYPE *yyvs1 = yyvs;",
          "1639:  yytype_int16 *yyss1 = yyss;",
          "1643:     data in use in that stack, in bytes.  This used to be a",
          "1644:     conditional around just the two extra args, but that might",
          "1646:  yyoverflow (YY_(\"memory exhausted\"),",
          "1647:       &yyss1, yysize * sizeof (*yyssp),",
          "1648:       &yyvs1, yysize * sizeof (*yyvsp),",
          "1650:       &yystacksize);",
          "",
          "[Added Lines]",
          "1494:            these so that the &'s don't force the real ones into",
          "1496:         YYSTYPE *yyvs1 = yyvs;",
          "1497:         yytype_int16 *yyss1 = yyss;",
          "1500:            data in use in that stack, in bytes.  This used to be a",
          "1501:            conditional around just the two extra args, but that might",
          "1503:         yyoverflow (YY_(\"memory exhausted\"),",
          "1504:                     &yyss1, yysize * sizeof (*yyssp),",
          "1505:                     &yyvs1, yysize * sizeof (*yyvsp),",
          "1506:                     &yystacksize);",
          "1508:         yyss = yyss1;",
          "1509:         yyvs = yyvs1;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1656: # ifndef YYSTACK_RELOCATE",
          "1657:       goto yyexhaustedlab;",
          "1660:       if (YYMAXDEPTH <= yystacksize)",
          "1662:       yystacksize *= 2;",
          "1663:       if (YYMAXDEPTH < yystacksize)",
          "1672:  YYSTACK_RELOCATE (yyss);",
          "1675: #  undef YYSTACK_RELOCATE",
          "1676:  if (yyss1 != yyssa)",
          "1677:    YYSTACK_FREE (yyss1);",
          "",
          "[Removed Lines]",
          "1658: # else",
          "1661:  goto yyexhaustedlab;",
          "1664:  yystacksize = YYMAXDEPTH;",
          "1666:       {",
          "1667:  yytype_int16 *yyss1 = yyss;",
          "1668:  union yyalloc *yyptr =",
          "1669:    (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));",
          "1670:  if (! yyptr)",
          "1671:    goto yyexhaustedlab;",
          "1673:  YYSTACK_RELOCATE (yyvs);",
          "",
          "[Added Lines]",
          "1517:         goto yyexhaustedlab;",
          "1520:         yystacksize = YYMAXDEPTH;",
          "1523:         yytype_int16 *yyss1 = yyss;",
          "1524:         union yyalloc *yyptr =",
          "1525:           (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));",
          "1526:         if (! yyptr)",
          "1527:           goto yyexhaustedlab;",
          "1528:         YYSTACK_RELOCATE (yyss_alloc, yyss);",
          "1529:         YYSTACK_RELOCATE (yyvs_alloc, yyvs);",
          "1531:         if (yyss1 != yyssa)",
          "1532:           YYSTACK_FREE (yyss1);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1679: # endif",
          "1682:       yyssp = yyss + yysize - 1;",
          "1683:       yyvsp = yyvs + yysize - 1;",
          "1686:       YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",",
          "1689:       if (yyss + yystacksize - 1 <= yyssp)",
          "1690:  YYABORT;",
          "1691:     }",
          "1693:   YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));",
          "",
          "[Removed Lines]",
          "1687:     (unsigned long int) yystacksize));",
          "",
          "[Added Lines]",
          "1541:                   (unsigned long int) yystacksize));",
          "1544:         YYABORT;",
          "1549:   if (yystate == YYFINAL)",
          "1550:     YYACCEPT;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1698: | yybackup.  |",
          "1700: yybackup:",
          "1706:   yyn = yypact[yystate];",
          "1707:   if (yyn == YYPACT_NINF)",
          "1708:     goto yydefault;",
          "1714:     {",
          "1715:       YYDPRINTF ((stderr, \"Reading a token: \"));",
          "1716:       yychar = YYLEX;",
          "",
          "[Removed Lines]",
          "1713:   if (yychar == YYEMPTY)",
          "",
          "[Added Lines]",
          "1564:   if (yypact_value_is_default (yyn))",
          "1573:       yychar = yylex (&yylval, yyscanner, compiler);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1732:   yyn += yytoken;",
          "1733:   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)",
          "1734:     goto yydefault;",
          "1737:     {",
          "1738:       if (yyn == 0 || yyn == YYTABLE_NINF)",
          "1739:  goto yyerrlab;",
          "1740:       yyn = -yyn;",
          "1744:   if (yyn == YYFINAL)",
          "1745:     YYACCEPT;",
          "1749:   if (yyerrstatus)",
          "1750:     yyerrstatus--;",
          "1756:   if (yychar != YYEOF)",
          "1757:     yychar = YYEMPTY;",
          "1759:   yystate = yyn;",
          "",
          "[Removed Lines]",
          "1735:   yyn = yytable[yyn];",
          "1736:   if (yyn <= 0)",
          "1741:       goto yyreduce;",
          "1742:     }",
          "1753:   YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);",
          "",
          "[Added Lines]",
          "1595:       if (yytable_value_is_error (yyn))",
          "1596:         goto yyerrlab;",
          "1610:   yychar = YYEMPTY;",
          "1613:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1615:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1778: yyreduce:",
          "1783:      `$$ = $1'.",
          "",
          "[Removed Lines]",
          "1780:   yylen = yyr2[yyn];",
          "",
          "[Added Lines]",
          "1638:      '$$ = $1'.",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1793:   YY_REDUCE_PRINT (yyn);",
          "1795:     {",
          "1797: #line 212 \"grammar.y\"",
          "1799:         int result = yr_parser_reduce_import(yyscanner, (yyvsp[(2) - (2)].sized_string));",
          "1801:         yr_free((yyvsp[(2) - (2)].sized_string));",
          "1803:         ERROR_IF(result != ERROR_SUCCESS);",
          "1804:       }",
          "1807:   case 9:",
          "1809:     {",
          "1810:         YR_RULE* rule = yr_parser_reduce_rule_declaration_phase_1(",
          "1811:             yyscanner, (int32_t) (yyvsp[(1) - (3)].integer), (yyvsp[(3) - (3)].c_string));",
          "1813:         ERROR_IF(rule == NULL);",
          "1815:         (yyval.rule) = rule;",
          "1816:       }",
          "1820: #line 233 \"grammar.y\"",
          "1824:         rule->tags = (yyvsp[(5) - (8)].c_string);",
          "1825:         rule->metas = (yyvsp[(7) - (8)].meta);",
          "1826:         rule->strings = (yyvsp[(8) - (8)].string);",
          "1827:       }",
          "1831: #line 241 \"grammar.y\"",
          "1832:     {",
          "1833:         YR_RULE* rule = (yyvsp[(4) - (11)].rule); // rule created in phase 1",
          "1836:             yyscanner, rule);",
          "1838:         yr_free((yyvsp[(3) - (11)].c_string));",
          "1840:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1841:       }",
          "1844:   case 12:",
          "1845: #line 256 \"grammar.y\"",
          "1846:     {",
          "1847:         (yyval.meta) = NULL;",
          "1848:       }",
          "1851:   case 13:",
          "1852: #line 260 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1794:   switch (yyn)",
          "1796:         case 8:",
          "1798:     {",
          "1805:     break;",
          "1808: #line 224 \"grammar.y\"",
          "1817:     break;",
          "1819:   case 10:",
          "1821:     {",
          "1822:         YR_RULE* rule = (yyvsp[(4) - (8)].rule); // rule created in phase 1",
          "1828:     break;",
          "1830:   case 11:",
          "1835:         compiler->last_result = yr_parser_reduce_rule_declaration_phase_2(",
          "1842:     break;",
          "1849:     break;",
          "",
          "[Added Lines]",
          "1654:         int result = yr_parser_reduce_import(yyscanner, (yyvsp[0].sized_string));",
          "1656:         yr_free((yyvsp[0].sized_string));",
          "1667:             yyscanner, (int32_t) (yyvsp[-2].integer), (yyvsp[0].c_string));",
          "1679:         YR_RULE* rule = (yyvsp[-4].rule); // rule created in phase 1",
          "1681:         rule->tags = (yyvsp[-3].c_string);",
          "1682:         rule->metas = (yyvsp[-1].meta);",
          "1683:         rule->strings = (yyvsp[0].string);",
          "1691:         YR_RULE* rule = (yyvsp[-7].rule); // rule created in phase 1",
          "1696:         yr_free((yyvsp[-8].c_string));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1865:         compiler->last_result = yr_arena_write_data(",
          "1866:             compiler->metas_arena,",
          "1867:             &null_meta,",
          "1869:             NULL);",
          "1871:         (yyval.meta) = (yyvsp[(3) - (3)].meta);",
          "1873:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1874:       }",
          "1877:   case 14:",
          "1878: #line 287 \"grammar.y\"",
          "1879:     {",
          "1880:         (yyval.string) = NULL;",
          "1881:       }",
          "1884:   case 15:",
          "1885: #line 291 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1868:             sizeof(YR_META),",
          "1875:     break;",
          "1882:     break;",
          "",
          "[Added Lines]",
          "1731:         (yyval.meta) = (yyvsp[0].meta);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1900:             &null_string,",
          "1901:             sizeof(YR_STRING),",
          "1902:             NULL);",
          "1904:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1906:         (yyval.string) = (yyvsp[(3) - (3)].string);",
          "1907:       }",
          "1910:   case 17:",
          "1911: #line 322 \"grammar.y\"",
          "1912:     { (yyval.integer) = 0;  }",
          "1915:   case 18:",
          "1916: #line 323 \"grammar.y\"",
          "1917:     { (yyval.integer) = (yyvsp[(1) - (2)].integer) | (yyvsp[(2) - (2)].integer); }",
          "1920:   case 19:",
          "1921: #line 328 \"grammar.y\"",
          "1922:     { (yyval.integer) = RULE_GFLAGS_PRIVATE; }",
          "1925:   case 20:",
          "1926: #line 329 \"grammar.y\"",
          "1927:     { (yyval.integer) = RULE_GFLAGS_GLOBAL; }",
          "1930:   case 21:",
          "1931: #line 335 \"grammar.y\"",
          "1932:     {",
          "1933:         (yyval.c_string) = NULL;",
          "1934:       }",
          "1937:   case 22:",
          "1938: #line 339 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "1908:     break;",
          "1913:     break;",
          "1918:     break;",
          "1923:     break;",
          "1928:     break;",
          "1935:     break;",
          "",
          "[Added Lines]",
          "1768:         (yyval.string) = (yyvsp[0].string);",
          "1781:     { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1945:         compiler->last_result = yr_arena_write_string(",
          "1946:             yyget_extra(yyscanner)->sz_arena, \"\", NULL);",
          "1948:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1950:         (yyval.c_string) = (yyvsp[(2) - (2)].c_string);",
          "1951:       }",
          "1954:   case 23:",
          "1955: #line 357 \"grammar.y\"",
          "1956:     {",
          "1960:             yyget_extra(yyscanner)->sz_arena, (yyvsp[(1) - (1)].c_string), &identifier);",
          "1962:         yr_free((yyvsp[(1) - (1)].c_string));",
          "1964:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1966:         (yyval.c_string) = identifier;",
          "1967:       }",
          "1971: #line 370 \"grammar.y\"",
          "1972:     {",
          "1973:         char* tag_name = (yyvsp[(1) - (2)].c_string);",
          "1974:         size_t tag_length = tag_name != NULL ? strlen(tag_name) : 0;",
          "1976:         while (tag_length > 0)",
          "1977:         {",
          "1978:           if (strcmp(tag_name, (yyvsp[(2) - (2)].c_string)) == 0)",
          "",
          "[Removed Lines]",
          "1952:     break;",
          "1957:         char* identifier;",
          "1959:         compiler->last_result = yr_arena_write_string(",
          "1968:     break;",
          "1970:   case 24:",
          "",
          "[Added Lines]",
          "1818:         (yyval.c_string) = (yyvsp[0].c_string);",
          "1829:             yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), &identifier);",
          "1831:         yr_free((yyvsp[0].c_string));",
          "1843:         char* tag_name = (yyvsp[-1].c_string);",
          "1848:           if (strcmp(tag_name, (yyvsp[0].c_string)) == 0)",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1990:           tag_length = tag_name != NULL ? strlen(tag_name) : 0;",
          "1991:         }",
          "1993:         if (compiler->last_result == ERROR_SUCCESS)",
          "1995:               yyget_extra(yyscanner)->sz_arena, (yyvsp[(2) - (2)].c_string), NULL);",
          "1997:         yr_free((yyvsp[(2) - (2)].c_string));",
          "1999:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2001:         (yyval.c_string) = (yyvsp[(1) - (2)].c_string);",
          "2002:       }",
          "2005:   case 25:",
          "2006: #line 406 \"grammar.y\"",
          "2007:     {  (yyval.meta) = (yyvsp[(1) - (1)].meta); }",
          "2010:   case 26:",
          "2011: #line 407 \"grammar.y\"",
          "2012:     {  (yyval.meta) = (yyvsp[(1) - (2)].meta); }",
          "2016: #line 413 \"grammar.y\"",
          "2017:     {",
          "2018:         SIZED_STRING* sized_string = (yyvsp[(3) - (3)].sized_string);",
          "2021:             yyscanner,",
          "2022:             META_TYPE_STRING,",
          "2023:             (yyvsp[(1) - (3)].c_string),",
          "2027:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2028:         yr_free((yyvsp[(3) - (3)].sized_string));",
          "2030:         ERROR_IF((yyval.meta) == NULL);",
          "2031:       }",
          "2034:   case 28:",
          "2035: #line 429 \"grammar.y\"",
          "2036:     {",
          "2038:             yyscanner,",
          "2040:             (yyvsp[(1) - (3)].c_string),",
          "2042:             (yyvsp[(3) - (3)].integer));",
          "2044:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2046:         ERROR_IF((yyval.meta) == NULL);",
          "2047:       }",
          "2050:   case 29:",
          "2051: #line 442 \"grammar.y\"",
          "2052:     {",
          "2054:             yyscanner,",
          "2056:             (yyvsp[(1) - (4)].c_string),",
          "2058:             -(yyvsp[(4) - (4)].integer));",
          "2060:         yr_free((yyvsp[(1) - (4)].c_string));",
          "2062:         ERROR_IF((yyval.meta) == NULL);",
          "2063:       }",
          "2066:   case 30:",
          "2067: #line 455 \"grammar.y\"",
          "2068:     {",
          "2070:             yyscanner,",
          "2071:             META_TYPE_BOOLEAN,",
          "2072:             (yyvsp[(1) - (3)].c_string),",
          "2074:             TRUE);",
          "2076:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2078:         ERROR_IF((yyval.meta) == NULL);",
          "2079:       }",
          "2082:   case 31:",
          "2083: #line 468 \"grammar.y\"",
          "2084:     {",
          "2086:             yyscanner,",
          "2087:             META_TYPE_BOOLEAN,",
          "2088:             (yyvsp[(1) - (3)].c_string),",
          "2090:             FALSE);",
          "2092:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2094:         ERROR_IF((yyval.meta) == NULL);",
          "2095:       }",
          "2098:   case 32:",
          "2099: #line 484 \"grammar.y\"",
          "2100:     { (yyval.string) = (yyvsp[(1) - (1)].string); }",
          "2103:   case 33:",
          "2104: #line 485 \"grammar.y\"",
          "2105:     { (yyval.string) = (yyvsp[(1) - (2)].string); }",
          "2108:   case 34:",
          "2109: #line 491 \"grammar.y\"",
          "2110:     {",
          "2111:         compiler->error_line = yyget_lineno(yyscanner);",
          "2112:       }",
          "2115:   case 35:",
          "2117:     {",
          "2121:         yr_free((yyvsp[(1) - (5)].c_string));",
          "2122:         yr_free((yyvsp[(4) - (5)].sized_string));",
          "2124:         ERROR_IF((yyval.string) == NULL);",
          "2125:         compiler->error_line = 0;",
          "2126:       }",
          "2129:   case 36:",
          "2130: #line 506 \"grammar.y\"",
          "2131:     {",
          "2132:         compiler->error_line = yyget_lineno(yyscanner);",
          "2133:       }",
          "2136:   case 37:",
          "2138:     {",
          "2142:         yr_free((yyvsp[(1) - (5)].c_string));",
          "2143:         yr_free((yyvsp[(4) - (5)].sized_string));",
          "2145:         ERROR_IF((yyval.string) == NULL);",
          "2147:         compiler->error_line = 0;",
          "2148:       }",
          "2151:   case 38:",
          "2153:     {",
          "2157:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2158:         yr_free((yyvsp[(3) - (3)].sized_string));",
          "2160:         ERROR_IF((yyval.string) == NULL);",
          "2161:       }",
          "2164:   case 39:",
          "2165: #line 535 \"grammar.y\"",
          "2166:     { (yyval.integer) = 0; }",
          "2169:   case 40:",
          "2170: #line 536 \"grammar.y\"",
          "2171:     { (yyval.integer) = (yyvsp[(1) - (2)].integer) | (yyvsp[(2) - (2)].integer); }",
          "2174:   case 41:",
          "2175: #line 541 \"grammar.y\"",
          "2176:     { (yyval.integer) = STRING_GFLAGS_WIDE; }",
          "2179:   case 42:",
          "2180: #line 542 \"grammar.y\"",
          "2181:     { (yyval.integer) = STRING_GFLAGS_ASCII; }",
          "2184:   case 43:",
          "2185: #line 543 \"grammar.y\"",
          "2186:     { (yyval.integer) = STRING_GFLAGS_NO_CASE; }",
          "2189:   case 44:",
          "2190: #line 544 \"grammar.y\"",
          "2191:     { (yyval.integer) = STRING_GFLAGS_FULL_WORD; }",
          "2195: #line 550 \"grammar.y\"",
          "2196:     {",
          "2197:         int var_index = yr_parser_lookup_loop_variable(yyscanner, (yyvsp[(1) - (1)].c_string));",
          "",
          "[Removed Lines]",
          "1994:           compiler->last_result = yr_arena_write_string(",
          "2003:     break;",
          "2008:     break;",
          "2013:     break;",
          "2015:   case 27:",
          "2020:         (yyval.meta) = yr_parser_reduce_meta_declaration(",
          "2024:             sized_string->c_string,",
          "2025:             0);",
          "2032:     break;",
          "2037:         (yyval.meta) = yr_parser_reduce_meta_declaration(",
          "2039:             META_TYPE_INTEGER,",
          "2041:             NULL,",
          "2048:     break;",
          "2053:         (yyval.meta) = yr_parser_reduce_meta_declaration(",
          "2055:             META_TYPE_INTEGER,",
          "2057:             NULL,",
          "2064:     break;",
          "2069:         (yyval.meta) = yr_parser_reduce_meta_declaration(",
          "2073:             NULL,",
          "2080:     break;",
          "2085:         (yyval.meta) = yr_parser_reduce_meta_declaration(",
          "2089:             NULL,",
          "2096:     break;",
          "2101:     break;",
          "2106:     break;",
          "2113:     break;",
          "2116: #line 495 \"grammar.y\"",
          "2118:         (yyval.string) = yr_parser_reduce_string_declaration(",
          "2119:             yyscanner, (int32_t) (yyvsp[(5) - (5)].integer), (yyvsp[(1) - (5)].c_string), (yyvsp[(4) - (5)].sized_string));",
          "2127:     break;",
          "2134:     break;",
          "2137: #line 510 \"grammar.y\"",
          "2139:         (yyval.string) = yr_parser_reduce_string_declaration(",
          "2140:             yyscanner, (int32_t) (yyvsp[(5) - (5)].integer) | STRING_GFLAGS_REGEXP, (yyvsp[(1) - (5)].c_string), (yyvsp[(4) - (5)].sized_string));",
          "2149:     break;",
          "2152: #line 522 \"grammar.y\"",
          "2154:         (yyval.string) = yr_parser_reduce_string_declaration(",
          "2155:             yyscanner, STRING_GFLAGS_HEXADECIMAL, (yyvsp[(1) - (3)].c_string), (yyvsp[(3) - (3)].sized_string));",
          "2162:     break;",
          "2167:     break;",
          "2172:     break;",
          "2177:     break;",
          "2182:     break;",
          "2187:     break;",
          "2192:     break;",
          "2194:   case 45:",
          "",
          "[Added Lines]",
          "1865:               yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), NULL);",
          "1867:         yr_free((yyvsp[0].c_string));",
          "1871:         (yyval.c_string) = (yyvsp[-1].c_string);",
          "1878:     {  (yyval.meta) = (yyvsp[0].meta); }",
          "1884:     {  (yyval.meta) = (yyvsp[-1].meta); }",
          "1891:         SIZED_STRING* sized_string = (yyvsp[0].sized_string);",
          "1896:             (yyvsp[-2].c_string),",
          "1900:         yr_free((yyvsp[-2].c_string));",
          "1901:         yr_free((yyvsp[0].sized_string));",
          "1914:             (yyvsp[-2].c_string),",
          "1916:             (yyvsp[0].integer));",
          "1918:         yr_free((yyvsp[-2].c_string));",
          "1931:             (yyvsp[-3].c_string),",
          "1933:             -(yyvsp[0].integer));",
          "1935:         yr_free((yyvsp[-3].c_string));",
          "1948:             (yyvsp[-2].c_string),",
          "1952:         yr_free((yyvsp[-2].c_string));",
          "1965:             (yyvsp[-2].c_string),",
          "1969:         yr_free((yyvsp[-2].c_string));",
          "1978:     { (yyval.string) = (yyvsp[0].string); }",
          "1984:     { (yyval.string) = (yyvsp[-1].string); }",
          "2000:             yyscanner, (int32_t) (yyvsp[0].integer), (yyvsp[-4].c_string), (yyvsp[-1].sized_string));",
          "2002:         yr_free((yyvsp[-4].c_string));",
          "2003:         yr_free((yyvsp[-1].sized_string));",
          "2023:             yyscanner, (int32_t) (yyvsp[0].integer) | STRING_GFLAGS_REGEXP, (yyvsp[-4].c_string), (yyvsp[-1].sized_string));",
          "2025:         yr_free((yyvsp[-4].c_string));",
          "2026:         yr_free((yyvsp[-1].sized_string));",
          "2039:             yyscanner, STRING_GFLAGS_HEXADECIMAL, (yyvsp[-2].c_string), (yyvsp[0].sized_string));",
          "2041:         yr_free((yyvsp[-2].c_string));",
          "2042:         yr_free((yyvsp[0].sized_string));",
          "2057:     { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }",
          "2088:         int var_index = yr_parser_lookup_loop_variable(yyscanner, (yyvsp[0].c_string));",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2212:         else",
          "2213:         {",
          "2217:           YR_OBJECT* object = (YR_OBJECT*) yr_hash_table_lookup(",
          "2218:               compiler->objects_table, (yyvsp[(1) - (1)].c_string), NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2109:               compiler->objects_table, (yyvsp[0].c_string), NULL);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2220:           if (object == NULL)",
          "2221:           {",
          "2225:             object = (YR_OBJECT*) yr_hash_table_lookup(",
          "2226:                 compiler->objects_table, (yyvsp[(1) - (1)].c_string), ns);",
          "",
          "[Removed Lines]",
          "2223:             char* ns = compiler->current_namespace->name;",
          "",
          "[Added Lines]",
          "2117:                 compiler->objects_table, (yyvsp[0].c_string), ns);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2229:           if (object != NULL)",
          "2230:           {",
          "2233:             compiler->last_result = yr_arena_write_string(",
          "2234:                 compiler->sz_arena, (yyvsp[(1) - (1)].c_string), &id);",
          "",
          "[Removed Lines]",
          "2231:             char* id;",
          "",
          "[Added Lines]",
          "2125:                 compiler->sz_arena, (yyvsp[0].c_string), &id);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2246:             (yyval.expression).identifier = object->identifier;",
          "2247:           }",
          "2248:           else",
          "2250:             YR_RULE* rule = (YR_RULE*) yr_hash_table_lookup(",
          "2251:                 compiler->rules_table,",
          "2252:                 (yyvsp[(1) - (1)].c_string),",
          "",
          "[Removed Lines]",
          "2249:           {",
          "",
          "[Added Lines]",
          "2143:                 (yyvsp[0].c_string),",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2264:               (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2265:               (yyval.expression).value.integer = UNDEFINED;",
          "2266:               (yyval.expression).identifier = rule->identifier;",
          "2268:             else",
          "2269:             {",
          "2270:               yr_compiler_set_error_extra_info(compiler, (yyvsp[(1) - (1)].c_string));",
          "2271:               compiler->last_result = ERROR_UNDEFINED_IDENTIFIER;",
          "2272:             }",
          "2274:         }",
          "2276:         yr_free((yyvsp[(1) - (1)].c_string));",
          "2278:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2279:       }",
          "2282:   case 46:",
          "2283: #line 635 \"grammar.y\"",
          "2288:             (yyvsp[(1) - (3)].expression).value.object->type == OBJECT_TYPE_STRUCTURE)",
          "2289:         {",
          "2290:           field = yr_object_lookup_field((yyvsp[(1) - (3)].expression).value.object, (yyvsp[(3) - (3)].c_string));",
          "2292:           if (field != NULL)",
          "2293:           {",
          "2296:             compiler->last_result = yr_arena_write_string(",
          "2297:               compiler->sz_arena, (yyvsp[(3) - (3)].c_string), &ident);",
          "",
          "[Removed Lines]",
          "2267:             }",
          "2273:           }",
          "2280:     break;",
          "2284:     {",
          "2285:         YR_OBJECT* field = NULL;",
          "2287:         if ((yyvsp[(1) - (3)].expression).type == EXPRESSION_TYPE_OBJECT &&",
          "2294:             char* ident;",
          "",
          "[Added Lines]",
          "2161:               yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));",
          "2167:         yr_free((yyvsp[0].c_string));",
          "2179:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_OBJECT &&",
          "2180:             (yyvsp[-2].expression).value.object->type == OBJECT_TYPE_STRUCTURE)",
          "2182:           field = yr_object_lookup_field((yyvsp[-2].expression).value.object, (yyvsp[0].c_string));",
          "2189:               compiler->sz_arena, (yyvsp[0].c_string), &ident);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2307:             (yyval.expression).type = EXPRESSION_TYPE_OBJECT;",
          "2308:             (yyval.expression).value.object = field;",
          "2309:             (yyval.expression).identifier = field->identifier;",
          "2311:           else",
          "2312:           {",
          "2313:             yr_compiler_set_error_extra_info(compiler, (yyvsp[(3) - (3)].c_string));",
          "2314:             compiler->last_result = ERROR_INVALID_FIELD_NAME;",
          "2315:           }",
          "2316:         }",
          "2318:         {",
          "2319:           yr_compiler_set_error_extra_info(",
          "2320:               compiler, (yyvsp[(1) - (3)].expression).identifier);",
          "2323:         }",
          "2325:         yr_free((yyvsp[(3) - (3)].c_string));",
          "2327:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2328:       }",
          "2331:   case 47:",
          "2332: #line 681 \"grammar.y\"",
          "2333:     {",
          "2338:             (yyvsp[(1) - (4)].expression).value.object->type == OBJECT_TYPE_ARRAY)",
          "2339:         {",
          "2340:           if ((yyvsp[(3) - (4)].expression).type != EXPRESSION_TYPE_INTEGER)",
          "",
          "[Removed Lines]",
          "2310:           }",
          "2317:         else",
          "2322:           compiler->last_result = ERROR_NOT_A_STRUCTURE;",
          "2329:     break;",
          "2334:         YR_OBJECT_ARRAY* array;",
          "2335:         YR_OBJECT_DICTIONARY* dict;",
          "2337:         if ((yyvsp[(1) - (4)].expression).type == EXPRESSION_TYPE_OBJECT &&",
          "",
          "[Added Lines]",
          "2205:             yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));",
          "2212:               compiler, (yyvsp[-2].expression).identifier);",
          "2217:         yr_free((yyvsp[0].c_string));",
          "2230:         if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&",
          "2231:             (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_ARRAY)",
          "2233:           if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2347:           ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2350:               yyscanner, OP_INDEX_ARRAY, NULL);",
          "2352:           array = (YR_OBJECT_ARRAY*) (yyvsp[(1) - (4)].expression).value.object;",
          "2354:           (yyval.expression).type = EXPRESSION_TYPE_OBJECT;",
          "2357:         }",
          "2359:                  (yyvsp[(1) - (4)].expression).value.object->type == OBJECT_TYPE_DICTIONARY)",
          "2360:         {",
          "2361:           if ((yyvsp[(3) - (4)].expression).type != EXPRESSION_TYPE_STRING)",
          "",
          "[Removed Lines]",
          "2349:           compiler->last_result = yr_parser_emit(",
          "2355:           (yyval.expression).value.object = array->prototype_item;",
          "2356:           (yyval.expression).identifier = array->identifier;",
          "2358:         else if ((yyvsp[(1) - (4)].expression).type == EXPRESSION_TYPE_OBJECT &&",
          "",
          "[Added Lines]",
          "2245:           array = (YR_OBJECT_ARRAY*) (yyvsp[-3].expression).value.object;",
          "2251:         else if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&",
          "2252:                  (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_DICTIONARY)",
          "2254:           if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_STRING)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2368:           ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2371:               yyscanner, OP_LOOKUP_DICT, NULL);",
          "2373:           dict = (YR_OBJECT_DICTIONARY*) (yyvsp[(1) - (4)].expression).value.object;",
          "",
          "[Removed Lines]",
          "2370:           compiler->last_result = yr_parser_emit(",
          "",
          "[Added Lines]",
          "2266:           dict = (YR_OBJECT_DICTIONARY*) (yyvsp[-3].expression).value.object;",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2376:           (yyval.expression).value.object = dict->prototype_item;",
          "2377:           (yyval.expression).identifier = dict->identifier;",
          "2378:         }",
          "2380:         {",
          "2381:           yr_compiler_set_error_extra_info(",
          "2382:               compiler, (yyvsp[(1) - (4)].expression).identifier);",
          "2384:           compiler->last_result = ERROR_NOT_INDEXABLE;",
          "2385:         }",
          "2387:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2388:       }",
          "2391:   case 48:",
          "2392: #line 739 \"grammar.y\"",
          "2393:     {",
          "2397:         if ((yyvsp[(1) - (4)].expression).type == EXPRESSION_TYPE_OBJECT &&",
          "2399:         {",
          "2400:           compiler->last_result = yr_parser_check_types(",
          "2401:               compiler, (YR_OBJECT_FUNCTION*) (yyvsp[(1) - (4)].expression).value.object, (yyvsp[(3) - (4)].c_string));",
          "2403:           if (compiler->last_result == ERROR_SUCCESS)",
          "2404:             compiler->last_result = yr_arena_write_string(",
          "2405:               compiler->sz_arena, (yyvsp[(3) - (4)].c_string), &args_fmt);",
          "",
          "[Removed Lines]",
          "2379:         else",
          "2389:     break;",
          "2394:         YR_OBJECT_FUNCTION* function;",
          "2395:         char* args_fmt;",
          "2398:             (yyvsp[(1) - (4)].expression).value.object->type == OBJECT_TYPE_FUNCTION)",
          "",
          "[Added Lines]",
          "2275:               compiler, (yyvsp[-3].expression).identifier);",
          "2291:         if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&",
          "2292:             (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_FUNCTION)",
          "2295:               compiler, (YR_OBJECT_FUNCTION*) (yyvsp[-3].expression).value.object, (yyvsp[-1].c_string));",
          "2299:               compiler->sz_arena, (yyvsp[-1].c_string), &args_fmt);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2409:                 yyscanner,",
          "2410:                 OP_CALL,",
          "2411:                 PTR_TO_INT64(args_fmt),",
          "2413:                 NULL);",
          "2415:           function = (YR_OBJECT_FUNCTION*) (yyvsp[(1) - (4)].expression).value.object;",
          "",
          "[Removed Lines]",
          "2412:                 NULL,",
          "",
          "[Added Lines]",
          "2309:           function = (YR_OBJECT_FUNCTION*) (yyvsp[-3].expression).value.object;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2418:           (yyval.expression).value.object = function->return_obj;",
          "2419:           (yyval.expression).identifier = function->identifier;",
          "2420:         }",
          "2422:         {",
          "2423:           yr_compiler_set_error_extra_info(",
          "2424:               compiler, (yyvsp[(1) - (4)].expression).identifier);",
          "2427:         }",
          "2429:         yr_free((yyvsp[(3) - (4)].c_string));",
          "2431:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2432:       }",
          "2435:   case 49:",
          "2436: #line 783 \"grammar.y\"",
          "2437:     { (yyval.c_string) = yr_strdup(\"\"); }",
          "2440:   case 50:",
          "2441: #line 784 \"grammar.y\"",
          "2442:     { (yyval.c_string) = (yyvsp[(1) - (1)].c_string); }",
          "2445:   case 51:",
          "2446: #line 789 \"grammar.y\"",
          "2448:         (yyval.c_string) = (char*) yr_malloc(MAX_FUNCTION_ARGS + 1);",
          "2450:         switch((yyvsp[(1) - (1)].expression).type)",
          "",
          "[Removed Lines]",
          "2421:         else",
          "2426:           compiler->last_result = ERROR_NOT_A_FUNCTION;",
          "2433:     break;",
          "2438:     break;",
          "2443:     break;",
          "2447:     {",
          "",
          "[Added Lines]",
          "2318:               compiler, (yyvsp[-3].expression).identifier);",
          "2323:         yr_free((yyvsp[-1].c_string));",
          "2338:     { (yyval.c_string) = (yyvsp[0].c_string); }",
          "2347:         switch((yyvsp[0].expression).type)",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2465:             strlcpy((yyval.c_string), \"r\", MAX_FUNCTION_ARGS);",
          "2466:             break;",
          "2467:         }",
          "2469:         ERROR_IF((yyval.c_string) == NULL);",
          "2470:       }",
          "2474: #line 814 \"grammar.y\"",
          "2475:     {",
          "2476:         if (strlen((yyvsp[(1) - (3)].c_string)) == MAX_FUNCTION_ARGS)",
          "2477:         {",
          "2478:           compiler->last_result = ERROR_TOO_MANY_ARGUMENTS;",
          "2480:         else",
          "2481:         {",
          "2483:           {",
          "2484:             case EXPRESSION_TYPE_INTEGER:",
          "2486:               break;",
          "2487:             case EXPRESSION_TYPE_FLOAT:",
          "2489:               break;",
          "2490:             case EXPRESSION_TYPE_BOOLEAN:",
          "2492:               break;",
          "2493:             case EXPRESSION_TYPE_STRING:",
          "2495:               break;",
          "2496:             case EXPRESSION_TYPE_REGEXP:",
          "2497:               strlcat((yyvsp[(1) - (3)].c_string), \"r\", MAX_FUNCTION_ARGS);",
          "2498:               break;",
          "2499:           }",
          "2500:         }",
          "2502:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2504:         (yyval.c_string) = (yyvsp[(1) - (3)].c_string);",
          "2505:       }",
          "2509: #line 850 \"grammar.y\"",
          "2510:     {",
          "2511:         SIZED_STRING* sized_string = (yyvsp[(1) - (1)].sized_string);",
          "",
          "[Removed Lines]",
          "2471:     break;",
          "2473:   case 52:",
          "2479:         }",
          "2482:           switch((yyvsp[(3) - (3)].expression).type)",
          "2485:               strlcat((yyvsp[(1) - (3)].c_string), \"i\", MAX_FUNCTION_ARGS);",
          "2488:               strlcat((yyvsp[(1) - (3)].c_string), \"f\", MAX_FUNCTION_ARGS);",
          "2491:               strlcat((yyvsp[(1) - (3)].c_string), \"b\", MAX_FUNCTION_ARGS);",
          "2494:               strlcat((yyvsp[(1) - (3)].c_string), \"s\", MAX_FUNCTION_ARGS);",
          "2506:     break;",
          "2508:   case 53:",
          "",
          "[Added Lines]",
          "2374:         if (strlen((yyvsp[-2].c_string)) == MAX_FUNCTION_ARGS)",
          "2380:           switch((yyvsp[0].expression).type)",
          "2383:               strlcat((yyvsp[-2].c_string), \"i\", MAX_FUNCTION_ARGS);",
          "2386:               strlcat((yyvsp[-2].c_string), \"f\", MAX_FUNCTION_ARGS);",
          "2389:               strlcat((yyvsp[-2].c_string), \"b\", MAX_FUNCTION_ARGS);",
          "2392:               strlcat((yyvsp[-2].c_string), \"s\", MAX_FUNCTION_ARGS);",
          "2395:               strlcat((yyvsp[-2].c_string), \"r\", MAX_FUNCTION_ARGS);",
          "2402:         (yyval.c_string) = (yyvsp[-2].c_string);",
          "2410:         SIZED_STRING* sized_string = (yyvsp[0].sized_string);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2524:             sized_string->c_string,",
          "2525:             re_flags,",
          "2526:             compiler->re_code_arena,",
          "2528:             &error);",
          "2530:         yr_free((yyvsp[(1) - (1)].sized_string));",
          "",
          "[Removed Lines]",
          "2527:             &re,",
          "",
          "[Added Lines]",
          "2429:         yr_free((yyvsp[0].sized_string));",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2545:         yr_re_destroy(re);",
          "2547:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2549:         (yyval.expression).type = EXPRESSION_TYPE_REGEXP;",
          "2550:       }",
          "2554: #line 896 \"grammar.y\"",
          "2556:         if ((yyvsp[(1) - (1)].expression).type == EXPRESSION_TYPE_STRING)",
          "2557:         {",
          "2558:           if ((yyvsp[(1) - (1)].expression).value.sized_string != NULL)",
          "2560:             yywarning(yyscanner,",
          "2561:               \"Using literal string \\\"%s\\\" in a boolean operation.\",",
          "2562:               (yyvsp[(1) - (1)].expression).value.sized_string->c_string);",
          "",
          "[Removed Lines]",
          "2551:     break;",
          "2553:   case 54:",
          "2555:     {",
          "2559:           {",
          "",
          "[Added Lines]",
          "2456:         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_STRING)",
          "2458:           if ((yyvsp[0].expression).value.sized_string != NULL)",
          "2462:               (yyvsp[0].expression).value.sized_string->c_string);",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2568:           ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2569:         }",
          "2571:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2572:       }",
          "2575:   case 55:",
          "2576: #line 918 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2573:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2579:             yyscanner, OP_PUSH, 1, NULL, NULL);",
          "2581:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2583:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2584:       }",
          "2587:   case 56:",
          "2588: #line 927 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2585:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2591:             yyscanner, OP_PUSH, 0, NULL, NULL);",
          "2593:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2595:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2596:       }",
          "2601:     {",
          "2602:         CHECK_TYPE((yyvsp[(1) - (3)].expression), EXPRESSION_TYPE_STRING, \"matches\");",
          "2603:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_REGEXP, \"matches\");",
          "",
          "[Removed Lines]",
          "2597:     break;",
          "2599:   case 57:",
          "2600: #line 936 \"grammar.y\"",
          "",
          "[Added Lines]",
          "2505:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, \"matches\");",
          "2506:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_REGEXP, \"matches\");",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2609:               NULL);",
          "2611:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2613:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2614:       }",
          "2619:     {",
          "2620:         CHECK_TYPE((yyvsp[(1) - (3)].expression), EXPRESSION_TYPE_STRING, \"contains\");",
          "2621:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_STRING, \"contains\");",
          "",
          "[Removed Lines]",
          "2615:     break;",
          "2617:   case 58:",
          "2618: #line 951 \"grammar.y\"",
          "",
          "[Added Lines]",
          "2524:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, \"contains\");",
          "2525:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_STRING, \"contains\");",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2624:             yyscanner, OP_CONTAINS, NULL);",
          "2626:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2628:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2629:       }",
          "2632:   case 59:",
          "2633: #line 963 \"grammar.y\"",
          "2635:         int result = yr_parser_reduce_string_identifier(",
          "2636:             yyscanner,",
          "2637:             (yyvsp[(1) - (1)].c_string),",
          "2639:             UNDEFINED);",
          "2641:         yr_free((yyvsp[(1) - (1)].c_string));",
          "2643:         ERROR_IF(result != ERROR_SUCCESS);",
          "2645:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2646:       }",
          "2650: #line 977 \"grammar.y\"",
          "2651:     {",
          "2655:             yyscanner, (yyvsp[(1) - (3)].c_string), OP_FOUND_AT, (yyvsp[(3) - (3)].expression).value.integer);",
          "2657:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2659:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2661:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2662:       }",
          "2665:   case 61:",
          "2667:     {",
          "2669:             yyscanner, (yyvsp[(1) - (3)].c_string), OP_FOUND_IN, UNDEFINED);",
          "2671:         yr_free((yyvsp[(1) - (3)].c_string));",
          "2673:         ERROR_IF(compiler->last_result!= ERROR_SUCCESS);",
          "2675:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2676:       }",
          "2679:   case 62:",
          "2680: #line 1001 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2630:     break;",
          "2634:     {",
          "2638:             OP_FOUND,",
          "2647:     break;",
          "2649:   case 60:",
          "2652:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"at\");",
          "2654:         compiler->last_result = yr_parser_reduce_string_identifier(",
          "2663:     break;",
          "2666: #line 990 \"grammar.y\"",
          "2668:         compiler->last_result = yr_parser_reduce_string_identifier(",
          "2677:     break;",
          "",
          "[Added Lines]",
          "2542:             (yyvsp[0].c_string),",
          "2546:         yr_free((yyvsp[0].c_string));",
          "2558:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"at\");",
          "2561:             yyscanner, (yyvsp[-2].c_string), OP_FOUND_AT, (yyvsp[0].expression).value.integer);",
          "2563:         yr_free((yyvsp[-2].c_string));",
          "2576:             yyscanner, (yyvsp[-2].c_string), OP_FOUND_IN, UNDEFINED);",
          "2578:         yr_free((yyvsp[-2].c_string));",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2685:           compiler->last_result = \\",
          "2686:               ERROR_LOOP_NESTING_LIMIT_EXCEEDED;",
          "2690:         var_index = yr_parser_lookup_loop_variable(",
          "2691:             yyscanner, (yyvsp[(3) - (4)].c_string));",
          "2694:         {",
          "2695:           yr_compiler_set_error_extra_info(",
          "2696:               compiler, (yyvsp[(3) - (4)].c_string));",
          "",
          "[Removed Lines]",
          "2688:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2693:         if (var_index >= 0)",
          "",
          "[Added Lines]",
          "2599:             yyscanner, (yyvsp[-1].c_string));",
          "2604:               compiler, (yyvsp[-1].c_string));",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2705:         compiler->last_result = yr_parser_emit_with_arg(",
          "2706:             yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
          "2708:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2709:       }",
          "2712:   case 63:",
          "2713: #line 1031 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2710:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2721:             yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);",
          "2725:             yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);",
          "2727:         if ((yyvsp[(6) - (7)].integer) == INTEGER_SET_ENUMERATION)",
          "",
          "[Removed Lines]",
          "2724:         yr_parser_emit_with_arg(",
          "",
          "[Added Lines]",
          "2636:         if ((yyvsp[-1].integer) == INTEGER_SET_ENUMERATION)",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2740:           yr_parser_emit_with_arg(",
          "2741:               yyscanner, OP_POP_M, mem_offset, NULL, NULL);",
          "2744:         compiler->loop_address[compiler->loop_depth] = addr;",
          "2745:         compiler->loop_identifier[compiler->loop_depth] = (yyvsp[(3) - (7)].c_string);",
          "2746:         compiler->loop_depth++;",
          "2747:       }",
          "2750:   case 64:",
          "2751: #line 1066 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2742:         }",
          "2748:     break;",
          "",
          "[Added Lines]",
          "2654:         compiler->loop_identifier[compiler->loop_depth] = (yyvsp[-4].c_string);",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2766:             yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);",
          "2770:             yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);",
          "2772:         if ((yyvsp[(6) - (11)].integer) == INTEGER_SET_ENUMERATION)",
          "",
          "[Removed Lines]",
          "2769:         yr_parser_emit_with_arg(",
          "",
          "[Added Lines]",
          "2682:         if ((yyvsp[-5].integer) == INTEGER_SET_ENUMERATION)",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2822:         yr_parser_emit_with_arg(",
          "2823:             yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);",
          "2827:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
          "2828:         yr_free((yyvsp[(3) - (11)].c_string));",
          "2830:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2831:       }",
          "2834:   case 65:",
          "2835: #line 1147 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2825:         yr_parser_emit(yyscanner, OP_INT_LE, NULL);",
          "2832:     break;",
          "",
          "[Added Lines]",
          "2738:         yr_free((yyvsp[-8].c_string));",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2860:         compiler->loop_for_of_mem_offset = mem_offset;",
          "2861:         compiler->loop_address[compiler->loop_depth] = addr;",
          "2862:         compiler->loop_identifier[compiler->loop_depth] = NULL;",
          "2863:         compiler->loop_depth++;",
          "2864:       }",
          "2867:   case 66:",
          "2868: #line 1177 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2865:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2913:         yr_parser_emit(yyscanner, OP_INT_LE, NULL);",
          "2915:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2917:       }",
          "2920:   case 67:",
          "2921: #line 1227 \"grammar.y\"",
          "2922:     {",
          "2923:         yr_parser_emit(yyscanner, OP_OF, NULL);",
          "2925:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2926:       }",
          "2929:   case 68:",
          "2930: #line 1233 \"grammar.y\"",
          "2931:     {",
          "2932:         yr_parser_emit(yyscanner, OP_NOT, NULL);",
          "2934:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2935:       }",
          "2938:   case 69:",
          "2939: #line 1239 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2918:     break;",
          "2927:     break;",
          "2936:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2959:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2961:         fixup->address = jmp_destination_addr;",
          "2962:         fixup->next = compiler->fixup_stack_head;",
          "2963:         compiler->fixup_stack_head = fixup;",
          "2964:       }",
          "2967:   case 70:",
          "2968: #line 1265 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "2965:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2999:         compiler->fixup_stack_head = fixup->next;",
          "3000:         yr_free(fixup);",
          "3002:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3003:       }",
          "3006:   case 71:",
          "3007: #line 1301 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3004:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3026:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3028:         fixup->address = jmp_destination_addr;",
          "3029:         fixup->next = compiler->fixup_stack_head;",
          "3030:         compiler->fixup_stack_head = fixup;",
          "3031:       }",
          "3034:   case 72:",
          "3035: #line 1326 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3032:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3066:         compiler->fixup_stack_head = fixup->next;",
          "3067:         yr_free(fixup);",
          "3069:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3070:       }",
          "3073:   case 73:",
          "3075:     {",
          "3076:         compiler->last_result = yr_parser_reduce_operation(",
          "3077:             yyscanner, \"<\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3079:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3081:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3082:       }",
          "3085:   case 74:",
          "3087:     {",
          "3088:         compiler->last_result = yr_parser_reduce_operation(",
          "3089:             yyscanner, \">\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3091:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3093:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3094:       }",
          "3097:   case 75:",
          "3099:     {",
          "3100:         compiler->last_result = yr_parser_reduce_operation(",
          "3101:             yyscanner, \"<=\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3103:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3105:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3106:       }",
          "3109:   case 76:",
          "3111:     {",
          "3112:         compiler->last_result = yr_parser_reduce_operation(",
          "3113:             yyscanner, \">=\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3115:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3117:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3118:       }",
          "3121:   case 77:",
          "3123:     {",
          "3124:         compiler->last_result = yr_parser_reduce_operation(",
          "3125:             yyscanner, \"==\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3127:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3129:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3130:       }",
          "3133:   case 78:",
          "3135:     {",
          "3136:         compiler->last_result = yr_parser_reduce_operation(",
          "3137:             yyscanner, \"!=\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3139:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3141:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3142:       }",
          "3146: #line 1416 \"grammar.y\"",
          "3147:     {",
          "3148:         (yyval.expression) = (yyvsp[(1) - (1)].expression);",
          "3149:       }",
          "3153: #line 1420 \"grammar.y\"",
          "3154:     {",
          "3155:         (yyval.expression) = (yyvsp[(2) - (3)].expression);",
          "3156:       }",
          "3159:   case 81:",
          "3160: #line 1427 \"grammar.y\"",
          "3161:     { (yyval.integer) = INTEGER_SET_ENUMERATION; }",
          "3164:   case 82:",
          "3165: #line 1428 \"grammar.y\"",
          "3166:     { (yyval.integer) = INTEGER_SET_RANGE; }",
          "3170: #line 1434 \"grammar.y\"",
          "3171:     {",
          "3172:         if ((yyvsp[(2) - (5)].expression).type != EXPRESSION_TYPE_INTEGER)",
          "3173:         {",
          "3174:           yr_compiler_set_error_extra_info(",
          "3175:               compiler, \"wrong type for range's lower bound\");",
          "3177:         }",
          "3179:         if ((yyvsp[(4) - (5)].expression).type != EXPRESSION_TYPE_INTEGER)",
          "",
          "[Removed Lines]",
          "3071:     break;",
          "3074: #line 1362 \"grammar.y\"",
          "3083:     break;",
          "3086: #line 1371 \"grammar.y\"",
          "3095:     break;",
          "3098: #line 1380 \"grammar.y\"",
          "3107:     break;",
          "3110: #line 1389 \"grammar.y\"",
          "3119:     break;",
          "3122: #line 1398 \"grammar.y\"",
          "3131:     break;",
          "3134: #line 1407 \"grammar.y\"",
          "3143:     break;",
          "3145:   case 79:",
          "3150:     break;",
          "3152:   case 80:",
          "3157:     break;",
          "3162:     break;",
          "3167:     break;",
          "3169:   case 83:",
          "3176:           compiler->last_result = ERROR_WRONG_TYPE;",
          "",
          "[Added Lines]",
          "2996:             yyscanner, \"<\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3009:             yyscanner, \">\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3022:             yyscanner, \"<=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3035:             yyscanner, \">=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3048:             yyscanner, \"==\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3061:             yyscanner, \"!=\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3073:         (yyval.expression) = (yyvsp[0].expression);",
          "3081:         (yyval.expression) = (yyvsp[-1].expression);",
          "3101:         if ((yyvsp[-3].expression).type != EXPRESSION_TYPE_INTEGER)",
          "3108:         if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3182:               compiler, \"wrong type for range's upper bound\");",
          "3183:           compiler->last_result = ERROR_WRONG_TYPE;",
          "3184:         }",
          "3186:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3187:       }",
          "3191: #line 1456 \"grammar.y\"",
          "3192:     {",
          "3193:         if ((yyvsp[(1) - (1)].expression).type != EXPRESSION_TYPE_INTEGER)",
          "",
          "[Removed Lines]",
          "3188:     break;",
          "3190:   case 84:",
          "",
          "[Added Lines]",
          "3123:         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3197:           compiler->last_result = ERROR_WRONG_TYPE;",
          "3199:         }",
          "3201:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3202:       }",
          "3206: #line 1468 \"grammar.y\"",
          "3207:     {",
          "3208:         if ((yyvsp[(3) - (3)].expression).type != EXPRESSION_TYPE_INTEGER)",
          "",
          "[Removed Lines]",
          "3203:     break;",
          "3205:   case 85:",
          "",
          "[Added Lines]",
          "3139:         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3211:               compiler, \"wrong type for enumeration item\");",
          "3212:           compiler->last_result = ERROR_WRONG_TYPE;",
          "3213:         }",
          "3215:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3216:       }",
          "3219:   case 86:",
          "3220: #line 1483 \"grammar.y\"",
          "3221:     {",
          "3223:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
          "3224:       }",
          "3227:   case 88:",
          "3228: #line 1489 \"grammar.y\"",
          "3229:     {",
          "3230:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
          "3231:         yr_parser_emit_pushes_for_strings(yyscanner, \"$*\");",
          "3233:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3234:       }",
          "3239:     {",
          "3240:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[(1) - (1)].c_string));",
          "3241:         yr_free((yyvsp[(1) - (1)].c_string));",
          "3243:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3244:       }",
          "3249:     {",
          "3250:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[(1) - (1)].c_string));",
          "3251:         yr_free((yyvsp[(1) - (1)].c_string));",
          "3253:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3254:       }",
          "3257:   case 94:",
          "3258: #line 1525 \"grammar.y\"",
          "3259:     {",
          "3260:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);",
          "3261:       }",
          "3264:   case 95:",
          "3265: #line 1529 \"grammar.y\"",
          "3266:     {",
          "3267:         yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);",
          "3268:       }",
          "3272: #line 1537 \"grammar.y\"",
          "3273:     {",
          "3274:         (yyval.expression) = (yyvsp[(2) - (3)].expression);",
          "3275:       }",
          "3278:   case 97:",
          "3279: #line 1541 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3217:     break;",
          "3225:     break;",
          "3235:     break;",
          "3237:   case 91:",
          "3238: #line 1506 \"grammar.y\"",
          "3245:     break;",
          "3247:   case 92:",
          "3248: #line 1513 \"grammar.y\"",
          "3255:     break;",
          "3262:     break;",
          "3269:     break;",
          "3271:   case 96:",
          "3276:     break;",
          "",
          "[Added Lines]",
          "3174:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));",
          "3175:         yr_free((yyvsp[0].c_string));",
          "3185:         yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));",
          "3186:         yr_free((yyvsp[0].c_string));",
          "3212:         (yyval.expression) = (yyvsp[-1].expression);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3284:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3286:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3287:         (yyval.expression).value.integer = UNDEFINED;",
          "3288:       }",
          "3291:   case 98:",
          "3292: #line 1551 \"grammar.y\"",
          "",
          "[Removed Lines]",
          "3289:     break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3301:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3303:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3304:         (yyval.expression).value.integer = UNDEFINED;",
          "3305:       }",
          "3309: #line 1565 \"grammar.y\"",
          "3310:     {",
          "3311:         CHECK_TYPE((yyvsp[(3) - (4)].expression), EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");",
          "3317:         compiler->last_result = yr_parser_emit(",
          "3318:             yyscanner, (uint8_t) (OP_READ_INT + (yyvsp[(1) - (4)].integer)), NULL);",
          "3320:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3322:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3323:         (yyval.expression).value.integer = UNDEFINED;",
          "3324:       }",
          "3327:   case 100:",
          "3329:     {",
          "3330:         compiler->last_result = yr_parser_emit_with_arg(",
          "3331:             yyscanner, OP_PUSH, (yyvsp[(1) - (1)].integer), NULL, NULL);",
          "3335:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3336:         (yyval.expression).value.integer = (yyvsp[(1) - (1)].integer);",
          "3337:       }",
          "3340:   case 101:",
          "3342:     {",
          "3343:         compiler->last_result = yr_parser_emit_with_arg_double(",
          "3344:             yyscanner, OP_PUSH, (yyvsp[(1) - (1)].double_), NULL, NULL);",
          "3346:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3348:         (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3349:       }",
          "3352:   case 102:",
          "3353: #line 1600 \"grammar.y\"",
          "3354:     {",
          "3355:         SIZED_STRING* sized_string;",
          "3358:             compiler->sz_arena,",
          "3359:             (yyvsp[(1) - (1)].sized_string),",
          "3361:             (void**) &sized_string);",
          "3363:         yr_free((yyvsp[(1) - (1)].sized_string));",
          "",
          "[Removed Lines]",
          "3306:     break;",
          "3308:   case 99:",
          "3325:     break;",
          "3328: #line 1581 \"grammar.y\"",
          "3333:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3338:     break;",
          "3341: #line 1591 \"grammar.y\"",
          "3350:     break;",
          "3357:         compiler->last_result = yr_arena_write_data(",
          "3360:             (yyvsp[(1) - (1)].sized_string)->length + sizeof(SIZED_STRING),",
          "",
          "[Added Lines]",
          "3252:         CHECK_TYPE((yyvsp[-1].expression), EXPRESSION_TYPE_INTEGER, \"intXXXX or uintXXXX\");",
          "3259:             yyscanner, (uint8_t) (OP_READ_INT + (yyvsp[-3].integer)), NULL);",
          "3273:             yyscanner, OP_PUSH, (yyvsp[0].integer), NULL, NULL);",
          "3278:         (yyval.expression).value.integer = (yyvsp[0].integer);",
          "3287:             yyscanner, OP_PUSH, (yyvsp[0].double_), NULL, NULL);",
          "3303:             (yyvsp[0].sized_string),",
          "3304:             (yyvsp[0].sized_string)->length + sizeof(SIZED_STRING),",
          "3307:         yr_free((yyvsp[0].sized_string));",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3373:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3375:         (yyval.expression).type = EXPRESSION_TYPE_STRING;",
          "3376:         (yyval.expression).value.sized_string = sized_string;",
          "3377:       }",
          "3380:   case 103:",
          "3382:     {",
          "3384:             yyscanner, (yyvsp[(1) - (1)].c_string), OP_COUNT, UNDEFINED);",
          "3386:         yr_free((yyvsp[(1) - (1)].c_string));",
          "3388:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3390:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3391:         (yyval.expression).value.integer = UNDEFINED;",
          "3392:       }",
          "3395:   case 104:",
          "3397:     {",
          "3399:             yyscanner, (yyvsp[(1) - (4)].c_string), OP_OFFSET, UNDEFINED);",
          "3401:         yr_free((yyvsp[(1) - (4)].c_string));",
          "3403:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3405:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3406:         (yyval.expression).value.integer = UNDEFINED;",
          "3407:       }",
          "3410:   case 105:",
          "3411: #line 1649 \"grammar.y\"",
          "3412:     {",
          "3413:         compiler->last_result = yr_parser_emit_with_arg(",
          "3414:             yyscanner, OP_PUSH, 1, NULL, NULL);",
          "3416:         if (compiler->last_result == ERROR_SUCCESS)",
          "3418:               yyscanner, (yyvsp[(1) - (1)].c_string), OP_OFFSET, UNDEFINED);",
          "3420:         yr_free((yyvsp[(1) - (1)].c_string));",
          "3422:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3424:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3425:         (yyval.expression).value.integer = UNDEFINED;",
          "3426:       }",
          "3429:   case 106:",
          "3431:     {",
          "3433:             yyscanner, (yyvsp[(1) - (4)].c_string), OP_LENGTH, UNDEFINED);",
          "3435:         yr_free((yyvsp[(1) - (4)].c_string));",
          "3437:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3439:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3440:         (yyval.expression).value.integer = UNDEFINED;",
          "3441:       }",
          "3444:   case 107:",
          "3445: #line 1677 \"grammar.y\"",
          "3446:     {",
          "3447:         compiler->last_result = yr_parser_emit_with_arg(",
          "3448:             yyscanner, OP_PUSH, 1, NULL, NULL);",
          "3450:         if (compiler->last_result == ERROR_SUCCESS)",
          "3452:               yyscanner, (yyvsp[(1) - (1)].c_string), OP_LENGTH, UNDEFINED);",
          "3454:         yr_free((yyvsp[(1) - (1)].c_string));",
          "3456:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3458:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3459:         (yyval.expression).value.integer = UNDEFINED;",
          "3460:       }",
          "3464: #line 1693 \"grammar.y\"",
          "3465:     {",
          "3466:         if ((yyvsp[(1) - (1)].expression).type == EXPRESSION_TYPE_INTEGER)  // loop identifier",
          "3467:         {",
          "3469:           (yyval.expression).value.integer = UNDEFINED;",
          "3470:         }",
          "3471:         else if ((yyvsp[(1) - (1)].expression).type == EXPRESSION_TYPE_BOOLEAN)  // rule identifier",
          "3472:         {",
          "3474:           (yyval.expression).value.integer = UNDEFINED;",
          "3475:         }",
          "3476:         else if ((yyvsp[(1) - (1)].expression).type == EXPRESSION_TYPE_OBJECT)",
          "3477:         {",
          "3479:               yyscanner, OP_OBJ_VALUE, NULL);",
          "3481:           switch((yyvsp[(1) - (1)].expression).value.object->type)",
          "",
          "[Removed Lines]",
          "3378:     break;",
          "3381: #line 1625 \"grammar.y\"",
          "3383:         compiler->last_result = yr_parser_reduce_string_identifier(",
          "3393:     break;",
          "3396: #line 1637 \"grammar.y\"",
          "3398:         compiler->last_result = yr_parser_reduce_string_identifier(",
          "3408:     break;",
          "3417:           compiler->last_result = yr_parser_reduce_string_identifier(",
          "3427:     break;",
          "3430: #line 1665 \"grammar.y\"",
          "3432:         compiler->last_result = yr_parser_reduce_string_identifier(",
          "3442:     break;",
          "3451:           compiler->last_result = yr_parser_reduce_string_identifier(",
          "3461:     break;",
          "3463:   case 108:",
          "3468:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3473:           (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "3478:           compiler->last_result = yr_parser_emit(",
          "",
          "[Added Lines]",
          "3329:             yyscanner, (yyvsp[0].c_string), OP_COUNT, UNDEFINED);",
          "3331:         yr_free((yyvsp[0].c_string));",
          "3345:             yyscanner, (yyvsp[-3].c_string), OP_OFFSET, UNDEFINED);",
          "3347:         yr_free((yyvsp[-3].c_string));",
          "3365:               yyscanner, (yyvsp[0].c_string), OP_OFFSET, UNDEFINED);",
          "3367:         yr_free((yyvsp[0].c_string));",
          "3381:             yyscanner, (yyvsp[-3].c_string), OP_LENGTH, UNDEFINED);",
          "3383:         yr_free((yyvsp[-3].c_string));",
          "3401:               yyscanner, (yyvsp[0].c_string), OP_LENGTH, UNDEFINED);",
          "3403:         yr_free((yyvsp[0].c_string));",
          "3416:         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)  // loop identifier",
          "3421:         else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_BOOLEAN)  // rule identifier",
          "3426:         else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_OBJECT)",
          "3431:           switch((yyvsp[0].expression).value.object->type)",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3492:               (yyval.expression).value.sized_string = NULL;",
          "3493:               break;",
          "3494:             default:",
          "3496:                   compiler,",
          "3497:                   \"wrong usage of identifier \\\"%s\\\"\",",
          "3498:                   (yyvsp[(1) - (1)].expression).identifier);",
          "",
          "[Removed Lines]",
          "3495:               yr_compiler_set_error_extra_info_fmt(",
          "",
          "[Added Lines]",
          "3448:                   (yyvsp[0].expression).identifier);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3503:         {",
          "3504:           assert(FALSE);",
          "3505:         }",
          "3507:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3508:       }",
          "3512: #line 1738 \"grammar.y\"",
          "3514:         CHECK_TYPE((yyvsp[(2) - (2)].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");",
          "3518:           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3519:           (yyval.expression).value.integer = ((yyvsp[(2) - (2)].expression).value.integer == UNDEFINED) ?",
          "3521:           compiler->last_result = yr_parser_emit(yyscanner, OP_INT_MINUS, NULL);",
          "3522:         }",
          "3523:         else if ((yyvsp[(2) - (2)].expression).type == EXPRESSION_TYPE_FLOAT)",
          "",
          "[Removed Lines]",
          "3509:     break;",
          "3511:   case 109:",
          "3513:     {",
          "3516:         if ((yyvsp[(2) - (2)].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3517:         {",
          "3520:               UNDEFINED : -((yyvsp[(2) - (2)].expression).value.integer);",
          "",
          "[Added Lines]",
          "3465:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, \"-\");",
          "3467:         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3470:           (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?",
          "3471:               UNDEFINED : -((yyvsp[0].expression).value.integer);",
          "3474:         else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_FLOAT)",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3525:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3526:           compiler->last_result = yr_parser_emit(yyscanner, OP_DBL_MINUS, NULL);",
          "3527:         }",
          "3529:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3530:       }",
          "3533:   case 110:",
          "3535:     {",
          "3536:         compiler->last_result = yr_parser_reduce_operation(",
          "3537:             yyscanner, \"+\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3542:             (yyvsp[(3) - (3)].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3543:         {",
          "3544:           (yyval.expression).value.integer = OPERATION(+, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "",
          "[Removed Lines]",
          "3531:     break;",
          "3534: #line 1757 \"grammar.y\"",
          "3539:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3541:         if ((yyvsp[(1) - (3)].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "",
          "[Added Lines]",
          "3489:             yyscanner, \"+\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3493:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3494:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3496:           (yyval.expression).value.integer = OPERATION(+, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3546:         }",
          "3547:         else",
          "3548:         {",
          "3549:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3550:         }",
          "3551:       }",
          "3554:   case 111:",
          "3556:     {",
          "3557:         compiler->last_result = yr_parser_reduce_operation(",
          "3558:             yyscanner, \"-\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3563:             (yyvsp[(3) - (3)].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3564:         {",
          "3565:           (yyval.expression).value.integer = OPERATION(-, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "",
          "[Removed Lines]",
          "3552:     break;",
          "3555: #line 1775 \"grammar.y\"",
          "3560:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3562:         if ((yyvsp[(1) - (3)].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "",
          "[Added Lines]",
          "3511:             yyscanner, \"-\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3515:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3516:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3518:           (yyval.expression).value.integer = OPERATION(-, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3567:         }",
          "3568:         else",
          "3569:         {",
          "3570:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3571:         }",
          "3572:       }",
          "3575:   case 112:",
          "3577:     {",
          "3578:         compiler->last_result = yr_parser_reduce_operation(",
          "3579:             yyscanner, \"*\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3584:             (yyvsp[(3) - (3)].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3585:         {",
          "3586:           (yyval.expression).value.integer = OPERATION(*, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "",
          "[Removed Lines]",
          "3573:     break;",
          "3576: #line 1793 \"grammar.y\"",
          "3581:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3583:         if ((yyvsp[(1) - (3)].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "",
          "[Added Lines]",
          "3533:             yyscanner, \"*\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3537:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3538:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3540:           (yyval.expression).value.integer = OPERATION(*, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3588:         }",
          "3589:         else",
          "3590:         {",
          "3591:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3592:         }",
          "3593:       }",
          "3596:   case 113:",
          "3598:     {",
          "3599:         compiler->last_result = yr_parser_reduce_operation(",
          "3600:             yyscanner, \"\\\\\", (yyvsp[(1) - (3)].expression), (yyvsp[(3) - (3)].expression));",
          "3605:             (yyvsp[(3) - (3)].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3607:           if ((yyvsp[(3) - (3)].expression).value.integer != 0)",
          "3608:           {",
          "3609:             (yyval.expression).value.integer = OPERATION(/, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "",
          "[Removed Lines]",
          "3594:     break;",
          "3597: #line 1811 \"grammar.y\"",
          "3602:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3604:         if ((yyvsp[(1) - (3)].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3606:         {",
          "",
          "[Added Lines]",
          "3555:             yyscanner, \"\\\\\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "3559:         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&",
          "3560:             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)",
          "3562:           if ((yyvsp[0].expression).value.integer != 0)",
          "3564:             (yyval.expression).value.integer = OPERATION(/, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3617:         }",
          "3618:         else",
          "3619:         {",
          "3620:           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;",
          "3621:         }",
          "3622:       }",
          "3627:     {",
          "3628:         CHECK_TYPE((yyvsp[(1) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
          "3629:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
          "3631:         yr_parser_emit(yyscanner, OP_MOD, NULL);",
          "3633:         if ((yyvsp[(3) - (3)].expression).value.integer != 0)",
          "3634:         {",
          "3635:           (yyval.expression).value.integer = OPERATION(%, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "",
          "[Removed Lines]",
          "3623:     break;",
          "3625:   case 114:",
          "3626: #line 1837 \"grammar.y\"",
          "",
          "[Added Lines]",
          "3584:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
          "3585:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"%\");",
          "3589:         if ((yyvsp[0].expression).value.integer != 0)",
          "3591:           (yyval.expression).value.integer = OPERATION(%, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3638:         else",
          "3639:         {",
          "3640:           compiler->last_result = ERROR_DIVISION_BY_ZERO;",
          "3641:           ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "3642:         }",
          "3643:       }",
          "3648:     {",
          "3649:         CHECK_TYPE((yyvsp[(1) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
          "3650:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
          "3654:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3655:         (yyval.expression).value.integer = OPERATION(^, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3656:       }",
          "3661:     {",
          "3662:         CHECK_TYPE((yyvsp[(1) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
          "3663:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
          "3667:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3668:         (yyval.expression).value.integer = OPERATION(&, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3669:       }",
          "3674:     {",
          "3675:         CHECK_TYPE((yyvsp[(1) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
          "3676:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
          "3680:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3681:         (yyval.expression).value.integer = OPERATION(|, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3682:       }",
          "3686: #line 1885 \"grammar.y\"",
          "3687:     {",
          "3688:         CHECK_TYPE((yyvsp[(2) - (2)].expression), EXPRESSION_TYPE_INTEGER, \"~\");",
          "3692:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3693:         (yyval.expression).value.integer = ((yyvsp[(2) - (2)].expression).value.integer == UNDEFINED) ?",
          "3694:             UNDEFINED : ~((yyvsp[(2) - (2)].expression).value.integer);",
          "3695:       }",
          "3700:     {",
          "3701:         CHECK_TYPE((yyvsp[(1) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
          "3702:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
          "3706:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3707:         (yyval.expression).value.integer = OPERATION(<<, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3708:       }",
          "3713:     {",
          "3714:         CHECK_TYPE((yyvsp[(1) - (3)].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
          "3715:         CHECK_TYPE((yyvsp[(3) - (3)].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
          "3719:         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;",
          "3720:         (yyval.expression).value.integer = OPERATION(>>, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);",
          "3721:       }",
          "3725: #line 1915 \"grammar.y\"",
          "3726:     {",
          "3727:         (yyval.expression) = (yyvsp[(1) - (1)].expression);",
          "3728:       }",
          "3729:     break;",
          "3733: #line 3731 \"grammar.c\"",
          "3734:       default: break;",
          "3735:     }",
          "",
          "[Removed Lines]",
          "3644:     break;",
          "3646:   case 115:",
          "3647: #line 1855 \"grammar.y\"",
          "3652:         yr_parser_emit(yyscanner, OP_BITWISE_XOR, NULL);",
          "3657:     break;",
          "3659:   case 116:",
          "3660: #line 1865 \"grammar.y\"",
          "3665:         yr_parser_emit(yyscanner, OP_BITWISE_AND, NULL);",
          "3670:     break;",
          "3672:   case 117:",
          "3673: #line 1875 \"grammar.y\"",
          "3678:         yr_parser_emit(yyscanner, OP_BITWISE_OR, NULL);",
          "3683:     break;",
          "3685:   case 118:",
          "3690:         yr_parser_emit(yyscanner, OP_BITWISE_NOT, NULL);",
          "3696:     break;",
          "3698:   case 119:",
          "3699: #line 1895 \"grammar.y\"",
          "3704:         yr_parser_emit(yyscanner, OP_SHL, NULL);",
          "3709:     break;",
          "3711:   case 120:",
          "3712: #line 1905 \"grammar.y\"",
          "3717:         yr_parser_emit(yyscanner, OP_SHR, NULL);",
          "3722:     break;",
          "3724:   case 121:",
          "",
          "[Added Lines]",
          "3606:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
          "3607:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
          "3612:         (yyval.expression).value.integer = OPERATION(^, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3620:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
          "3621:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"^\");",
          "3626:         (yyval.expression).value.integer = OPERATION(&, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3634:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
          "3635:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"|\");",
          "3640:         (yyval.expression).value.integer = OPERATION(|, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3648:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"~\");",
          "3653:         (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?",
          "3654:             UNDEFINED : ~((yyvsp[0].expression).value.integer);",
          "3662:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
          "3663:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"<<\");",
          "3668:         (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3676:         CHECK_TYPE((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
          "3677:         CHECK_TYPE((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \">>\");",
          "3682:         (yyval.expression).value.integer = OPERATION(>>, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);",
          "3690:         (yyval.expression) = (yyvsp[0].expression);",
          "3700:      that yytoken be updated with the new translation.  We take the",
          "3701:      approach of translating immediately before every use of yytoken.",
          "3702:      One alternative is translating here after every semantic action,",
          "3703:      but that translation would be missed if the semantic action invokes",
          "3704:      YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or",
          "3705:      if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an",
          "3706:      incorrect destructor might then be invoked immediately.  In the",
          "3707:      case of YYERROR or YYBACKUP, subsequent parser actions might lead",
          "3708:      to an incorrect destructor call or verbose syntax error message",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3754:   else",
          "3755:     yystate = yydefgoto[yyn - YYNTOKENS];",
          "3757:   goto yynewstate;",
          "3761: | yyerrlab -- here on detecting error |",
          "3763: yyerrlab:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3734: | yyerrlab -- here on detecting error.  |",
          "3739:   yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3765:   if (!yyerrstatus)",
          "3766:     {",
          "3767:       ++yynerrs;",
          "3768: #if ! YYERROR_VERBOSE",
          "3798:      if (yysize != 0)",
          "3799:        goto yyexhaustedlab;",
          "3800:    }",
          "3801:       }",
          "",
          "[Removed Lines]",
          "3769:       yyerror (yyscanner, compiler, YY_(\"syntax error\"));",
          "3770: #else",
          "3771:       {",
          "3772:  YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);",
          "3773:  if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)",
          "3774:    {",
          "3775:      YYSIZE_T yyalloc = 2 * yysize;",
          "3776:      if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))",
          "3777:        yyalloc = YYSTACK_ALLOC_MAXIMUM;",
          "3778:      if (yymsg != yymsgbuf)",
          "3779:        YYSTACK_FREE (yymsg);",
          "3780:      yymsg = (char *) YYSTACK_ALLOC (yyalloc);",
          "3781:      if (yymsg)",
          "3782:        yymsg_alloc = yyalloc;",
          "3783:      else",
          "3784:        {",
          "3785:   yymsg = yymsgbuf;",
          "3786:   yymsg_alloc = sizeof yymsgbuf;",
          "3787:        }",
          "3788:    }",
          "3790:  if (0 < yysize && yysize <= yymsg_alloc)",
          "3791:    {",
          "3792:      (void) yysyntax_error (yymsg, yystate, yychar);",
          "3793:      yyerror (yyscanner, compiler, yymsg);",
          "3794:    }",
          "3795:  else",
          "3796:    {",
          "3797:      yyerror (yyscanner, compiler, YY_(\"syntax error\"));",
          "",
          "[Added Lines]",
          "3748: # define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\",
          "3749:                                         yyssp, yytoken)",
          "3751:         char const *yymsgp = YY_(\"syntax error\");",
          "3752:         int yysyntax_error_status;",
          "3753:         yysyntax_error_status = YYSYNTAX_ERROR;",
          "3754:         if (yysyntax_error_status == 0)",
          "3755:           yymsgp = yymsg;",
          "3756:         else if (yysyntax_error_status == 1)",
          "3757:           {",
          "3758:             if (yymsg != yymsgbuf)",
          "3759:               YYSTACK_FREE (yymsg);",
          "3760:             yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);",
          "3761:             if (!yymsg)",
          "3762:               {",
          "3763:                 yymsg = yymsgbuf;",
          "3764:                 yymsg_alloc = sizeof yymsgbuf;",
          "3765:                 yysyntax_error_status = 2;",
          "3766:               }",
          "3767:             else",
          "3768:               {",
          "3769:                 yysyntax_error_status = YYSYNTAX_ERROR;",
          "3770:                 yymsgp = yymsg;",
          "3771:               }",
          "3772:           }",
          "3773:         yyerror (yyscanner, compiler, yymsgp);",
          "3774:         if (yysyntax_error_status == 2)",
          "3775:           goto yyexhaustedlab;",
          "3777: # undef YYSYNTAX_ERROR",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3803:     }",
          "3807:   if (yyerrstatus == 3)",
          "3808:     {",
          "3815:    if (yychar == YYEOF)",
          "3821:         yytoken, &yylval, yyscanner, compiler);",
          "3822:    yychar = YYEMPTY;",
          "3823:  }",
          "3824:     }",
          "",
          "[Removed Lines]",
          "3812:       if (yychar <= YYEOF)",
          "3813:  {",
          "3816:      YYABORT;",
          "3817:  }",
          "3818:       else",
          "3819:  {",
          "3820:    yydestruct (\"Error: discarding\",",
          "",
          "[Added Lines]",
          "3789:         {",
          "3791:           if (yychar == YYEOF)",
          "3792:             YYABORT;",
          "3793:         }",
          "3795:         {",
          "3796:           yydestruct (\"Error: discarding\",",
          "3797:                       yytoken, &yylval, yyscanner, compiler);",
          "3798:           yychar = YYEMPTY;",
          "3799:         }",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3852: | yyerrlab1 -- common code for both syntax error and YYERROR.  |",
          "3854: yyerrlab1:",
          "3867:   break;",
          "3868:      }",
          "3869:  }",
          "3872:       if (yyssp == yyss)",
          "3873:  YYABORT;",
          "3876:       yydestruct (\"Error: popping\",",
          "3877:     yystos[yystate], yyvsp, yyscanner, compiler);",
          "3878:       YYPOPSTACK (1);",
          "3879:       yystate = *yyssp;",
          "3883:   if (yyn == YYFINAL)",
          "3884:     YYACCEPT;",
          "",
          "[Removed Lines]",
          "3857:   for (;;)",
          "3858:     {",
          "3859:       yyn = yypact[yystate];",
          "3860:       if (yyn != YYPACT_NINF)",
          "3861:  {",
          "3862:    yyn += YYTERROR;",
          "3863:    if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)",
          "3864:      {",
          "3865:        yyn = yytable[yyn];",
          "3866:        if (0 < yyn)",
          "3880:       YY_STACK_PRINT (yyss, yyssp);",
          "3881:     }",
          "",
          "[Added Lines]",
          "3836:       if (!yypact_value_is_default (yyn))",
          "3837:         {",
          "3838:           yyn += YYTERROR;",
          "3839:           if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)",
          "3840:             {",
          "3841:               yyn = yytable[yyn];",
          "3842:               if (0 < yyn)",
          "3843:                 break;",
          "3844:             }",
          "3845:         }",
          "3849:         YYABORT;",
          "3853:                   yystos[yystate], yyvsp, yyscanner, compiler);",
          "3859:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "3861:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3904: | yyabortlab -- YYABORT comes here.  |",
          "3906: yyabortlab:",
          "3908:   goto yyreturn;",
          "3910: #ifndef yyoverflow",
          "",
          "[Removed Lines]",
          "3907:   yyresult = 1;",
          "",
          "[Added Lines]",
          "3885: #if !defined yyoverflow || YYERROR_VERBOSE",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3915:   yyerror (yyscanner, compiler, YY_(\"memory exhausted\"));",
          "3916:   yyresult = 2;",
          "3922:      yydestruct (\"Cleanup: discarding lookahead\",",
          "3923:    yytoken, &yylval, yyscanner, compiler);",
          "3926:   YYPOPSTACK (yylen);",
          "3927:   YY_STACK_PRINT (yyss, yyssp);",
          "3929:     {",
          "3930:       yydestruct (\"Cleanup: popping\",",
          "3931:     yystos[*yyssp], yyvsp, yyscanner, compiler);",
          "",
          "[Removed Lines]",
          "3918: #endif",
          "3920: yyreturn:",
          "3921:   if (yychar != YYEOF && yychar != YYEMPTY)",
          "3928:   while (yyssp != yyss)",
          "",
          "[Added Lines]",
          "3896:   if (yychar != YYEMPTY)",
          "3897:     {",
          "3900:       yytoken = YYTRANSLATE (yychar);",
          "3901:       yydestruct (\"Cleanup: discarding lookahead\",",
          "3902:                   yytoken, &yylval, yyscanner, compiler);",
          "3903:     }",
          "3911:                   yystos[*yyssp], yyvsp, yyscanner, compiler);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3936:     YYSTACK_FREE (yyss);",
          "3937: #endif",
          "3938: #if YYERROR_VERBOSE",
          "3939:   if (yymsg != yymsgbuf)",
          "3941: #endif",
          "3943:   return YYID (yyresult);",
          "",
          "[Removed Lines]",
          "3940:     YYSTACK_FREE (yymsg);",
          "3944: }",
          "",
          "[Added Lines]",
          "3922:   return yyresult;",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:    it under the terms of the GNU General Public License as published by",
          "13:    This program is distributed in the hope that it will be useful,",
          "14:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "",
          "[Removed Lines]",
          "5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006",
          "6:    Free Software Foundation, Inc.",
          "8:    This program is free software; you can redistribute it and/or modify",
          "10:    the Free Software Foundation; either version 2, or (at your option)",
          "11:    any later version.",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:    GNU General Public License for more details.",
          "18:    You should have received a copy of the GNU General Public License",
          "24:    part or all of the Bison parser skeleton and distribute that work",
          "",
          "[Removed Lines]",
          "19:    along with this program; if not, write to the Free Software",
          "20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:    This special exception was added by the Free Software Foundation in",
          "37: #ifndef YYTOKENTYPE",
          "38: # define YYTOKENTYPE",
          "92: #endif",
          "94: #define _DOT_DOT_ 258",
          "",
          "[Removed Lines]",
          "41:    enum yytokentype {",
          "42:      _DOT_DOT_ = 258,",
          "43:      _RULE_ = 259,",
          "44:      _PRIVATE_ = 260,",
          "45:      _GLOBAL_ = 261,",
          "46:      _META_ = 262,",
          "47:      _STRINGS_ = 263,",
          "48:      _CONDITION_ = 264,",
          "49:      _IDENTIFIER_ = 265,",
          "50:      _STRING_IDENTIFIER_ = 266,",
          "51:      _STRING_COUNT_ = 267,",
          "52:      _STRING_OFFSET_ = 268,",
          "53:      _STRING_LENGTH_ = 269,",
          "54:      _STRING_IDENTIFIER_WITH_WILDCARD_ = 270,",
          "55:      _NUMBER_ = 271,",
          "56:      _DOUBLE_ = 272,",
          "57:      _INTEGER_FUNCTION_ = 273,",
          "58:      _TEXT_STRING_ = 274,",
          "59:      _HEX_STRING_ = 275,",
          "60:      _REGEXP_ = 276,",
          "61:      _ASCII_ = 277,",
          "62:      _WIDE_ = 278,",
          "63:      _NOCASE_ = 279,",
          "64:      _FULLWORD_ = 280,",
          "65:      _AT_ = 281,",
          "66:      _FILESIZE_ = 282,",
          "67:      _ENTRYPOINT_ = 283,",
          "68:      _ALL_ = 284,",
          "69:      _ANY_ = 285,",
          "70:      _IN_ = 286,",
          "71:      _OF_ = 287,",
          "72:      _FOR_ = 288,",
          "73:      _THEM_ = 289,",
          "74:      _MATCHES_ = 290,",
          "75:      _CONTAINS_ = 291,",
          "76:      _IMPORT_ = 292,",
          "77:      _TRUE_ = 293,",
          "78:      _FALSE_ = 294,",
          "79:      _OR_ = 295,",
          "80:      _AND_ = 296,",
          "81:      _NEQ_ = 297,",
          "82:      _EQ_ = 298,",
          "83:      _GE_ = 299,",
          "84:      _GT_ = 300,",
          "85:      _LE_ = 301,",
          "86:      _LT_ = 302,",
          "87:      _SHIFT_RIGHT_ = 303,",
          "88:      _SHIFT_LEFT_ = 304,",
          "89:      UNARY_MINUS = 305,",
          "90:      _NOT_ = 306",
          "91:    };",
          "",
          "[Added Lines]",
          "33: #ifndef YY_YARA_YY_GRAMMAR_H_INCLUDED",
          "34: # define YY_YARA_YY_GRAMMAR_H_INCLUDED",
          "36: #ifndef YYDEBUG",
          "37: # define YYDEBUG 0",
          "38: #endif",
          "39: #if YYDEBUG",
          "40: extern int yara_yydebug;",
          "41: #endif",
          "46:   enum yytokentype",
          "47:   {",
          "48:     _DOT_DOT_ = 258,",
          "49:     _RULE_ = 259,",
          "50:     _PRIVATE_ = 260,",
          "51:     _GLOBAL_ = 261,",
          "52:     _META_ = 262,",
          "53:     _STRINGS_ = 263,",
          "54:     _CONDITION_ = 264,",
          "55:     _IDENTIFIER_ = 265,",
          "56:     _STRING_IDENTIFIER_ = 266,",
          "57:     _STRING_COUNT_ = 267,",
          "58:     _STRING_OFFSET_ = 268,",
          "59:     _STRING_LENGTH_ = 269,",
          "60:     _STRING_IDENTIFIER_WITH_WILDCARD_ = 270,",
          "61:     _NUMBER_ = 271,",
          "62:     _DOUBLE_ = 272,",
          "63:     _INTEGER_FUNCTION_ = 273,",
          "64:     _TEXT_STRING_ = 274,",
          "65:     _HEX_STRING_ = 275,",
          "66:     _REGEXP_ = 276,",
          "67:     _ASCII_ = 277,",
          "68:     _WIDE_ = 278,",
          "69:     _NOCASE_ = 279,",
          "70:     _FULLWORD_ = 280,",
          "71:     _AT_ = 281,",
          "72:     _FILESIZE_ = 282,",
          "73:     _ENTRYPOINT_ = 283,",
          "74:     _ALL_ = 284,",
          "75:     _ANY_ = 285,",
          "76:     _IN_ = 286,",
          "77:     _OF_ = 287,",
          "78:     _FOR_ = 288,",
          "79:     _THEM_ = 289,",
          "80:     _MATCHES_ = 290,",
          "81:     _CONTAINS_ = 291,",
          "82:     _IMPORT_ = 292,",
          "83:     _TRUE_ = 293,",
          "84:     _FALSE_ = 294,",
          "85:     _OR_ = 295,",
          "86:     _AND_ = 296,",
          "87:     _EQ_ = 297,",
          "88:     _NEQ_ = 298,",
          "89:     _LT_ = 299,",
          "90:     _LE_ = 300,",
          "91:     _GT_ = 301,",
          "92:     _GE_ = 302,",
          "93:     _SHIFT_LEFT_ = 303,",
          "94:     _SHIFT_RIGHT_ = 304,",
          "95:     _NOT_ = 305,",
          "96:     UNARY_MINUS = 306",
          "97:   };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130: #define _FALSE_ 294",
          "131: #define _OR_ 295",
          "132: #define _AND_ 296",
          "147: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "150: {",
          "151:   EXPRESSION      expression;",
          "152:   SIZED_STRING*   sized_string;",
          "153:   char*           c_string;",
          "",
          "[Removed Lines]",
          "133: #define _NEQ_ 297",
          "134: #define _EQ_ 298",
          "135: #define _GE_ 299",
          "136: #define _GT_ 300",
          "137: #define _LE_ 301",
          "138: #define _LT_ 302",
          "139: #define _SHIFT_RIGHT_ 303",
          "140: #define _SHIFT_LEFT_ 304",
          "141: #define UNARY_MINUS 305",
          "142: #define _NOT_ 306",
          "148: typedef union YYSTYPE",
          "149: #line 186 \"grammar.y\"",
          "",
          "[Added Lines]",
          "139: #define _EQ_ 297",
          "140: #define _NEQ_ 298",
          "141: #define _LT_ 299",
          "142: #define _LE_ 300",
          "143: #define _GT_ 301",
          "144: #define _GE_ 302",
          "145: #define _SHIFT_LEFT_ 303",
          "146: #define _SHIFT_RIGHT_ 304",
          "147: #define _NOT_ 305",
          "148: #define UNARY_MINUS 306",
          "153: union YYSTYPE",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:   YR_STRING*      string;",
          "157:   YR_META*        meta;",
          "158:   YR_RULE*        rule;",
          "165: # define YYSTYPE_IS_TRIVIAL 1",
          "166: #endif",
          "",
          "[Removed Lines]",
          "159: }",
          "161: #line 162 \"grammar.h\"",
          "162:  YYSTYPE;",
          "164: # define YYSTYPE_IS_DECLARED 1",
          "",
          "[Added Lines]",
          "167: };",
          "169: typedef union YYSTYPE YYSTYPE;",
          "171: # define YYSTYPE_IS_DECLARED 1",
          "176: int yara_yyparse (void *yyscanner, YR_COMPILER* compiler);",
          "",
          "---------------"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: %expect 1   // expect 1 shift/reduce conflicts",
          "87: %name-prefix=\"yara_yy\"",
          "88: %pure-parser",
          "89: %parse-param {void *yyscanner}",
          "",
          "[Removed Lines]",
          "86: %debug",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.c||libyara/hex_grammar.c": [
          "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:    it under the terms of the GNU General Public License as published by",
          "13:    This program is distributed in the hope that it will be useful,",
          "14:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "",
          "[Removed Lines]",
          "5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006",
          "6:    Free Software Foundation, Inc.",
          "8:    This program is free software; you can redistribute it and/or modify",
          "10:    the Free Software Foundation; either version 2, or (at your option)",
          "11:    any later version.",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:    GNU General Public License for more details.",
          "18:    You should have received a copy of the GNU General Public License",
          "24:    part or all of the Bison parser skeleton and distribute that work",
          "",
          "[Removed Lines]",
          "19:    along with this program; if not, write to the Free Software",
          "20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: #define YYBISON 1",
          "53: #define YYSKELETON_NAME \"yacc.c\"",
          "",
          "[Removed Lines]",
          "50: #define YYBISON_VERSION \"2.3\"",
          "",
          "[Added Lines]",
          "47: #define YYBISON_VERSION \"3.0.4\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56: #define YYPURE 1",
          "94: #include <string.h>",
          "",
          "[Removed Lines]",
          "59: #define YYLSP_NEEDED 0",
          "62: #define yyparse hex_yyparse",
          "63: #define yylex   hex_yylex",
          "64: #define yyerror hex_yyerror",
          "65: #define yylval  hex_yylval",
          "66: #define yychar  hex_yychar",
          "67: #define yydebug hex_yydebug",
          "68: #define yynerrs hex_yynerrs",
          "72: #ifndef YYTOKENTYPE",
          "73: # define YYTOKENTYPE",
          "76:    enum yytokentype {",
          "77:      _BYTE_ = 258,",
          "78:      _MASKED_BYTE_ = 259,",
          "79:      _NUMBER_ = 260",
          "80:    };",
          "81: #endif",
          "83: #define _BYTE_ 258",
          "84: #define _MASKED_BYTE_ 259",
          "85: #define _NUMBER_ 260",
          "91: #line 17 \"hex_grammar.y\"",
          "",
          "[Added Lines]",
          "56: #define YYPUSH 0",
          "59: #define YYPULL 1",
          "63: #define yyparse         hex_yyparse",
          "64: #define yylex           hex_yylex",
          "65: #define yyerror         hex_yyerror",
          "66: #define yydebug         hex_yydebug",
          "67: #define yynerrs         hex_yynerrs",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:     } \\",
          "137: #ifdef YYERROR_VERBOSE",
          "",
          "[Removed Lines]",
          "132: #ifndef YYDEBUG",
          "133: # define YYDEBUG 1",
          "134: #endif",
          "",
          "[Added Lines]",
          "112: # ifndef YY_NULLPTR",
          "113: #  if defined __cplusplus && 201103L <= __cplusplus",
          "114: #   define YY_NULLPTR nullptr",
          "115: #  else",
          "116: #   define YY_NULLPTR 0",
          "117: #  endif",
          "118: # endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141: # define YYERROR_VERBOSE 0",
          "142: #endif",
          "147: #endif",
          "149: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "152: {",
          "153:   int64_t integer;",
          "154:   RE_NODE *re_node;",
          "161: # define YYSTYPE_IS_TRIVIAL 1",
          "162: #endif",
          "172: #ifdef short",
          "173: # undef short",
          "",
          "[Removed Lines]",
          "145: #ifndef YYTOKEN_TABLE",
          "146: # define YYTOKEN_TABLE 0",
          "150: typedef union YYSTYPE",
          "151: #line 67 \"hex_grammar.y\"",
          "155: }",
          "157: #line 158 \"hex_grammar.c\"",
          "158:  YYSTYPE;",
          "160: # define YYSTYPE_IS_DECLARED 1",
          "170: #line 171 \"hex_grammar.c\"",
          "",
          "[Added Lines]",
          "130: #ifndef YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED",
          "131: # define YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED",
          "133: #ifndef YYDEBUG",
          "134: # define YYDEBUG 0",
          "135: #endif",
          "136: #if YYDEBUG",
          "137: extern int hex_yydebug;",
          "138: #endif",
          "141: #ifndef YYTOKENTYPE",
          "142: # define YYTOKENTYPE",
          "143:   enum yytokentype",
          "144:   {",
          "145:     _BYTE_ = 258,",
          "146:     _MASKED_BYTE_ = 259,",
          "147:     _NUMBER_ = 260",
          "148:   };",
          "151: #define _BYTE_ 258",
          "152: #define _MASKED_BYTE_ 259",
          "153: #define _NUMBER_ 260",
          "158: union YYSTYPE",
          "166: };",
          "168: typedef union YYSTYPE YYSTYPE;",
          "170: # define YYSTYPE_IS_DECLARED 1",
          "175: int hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "182: #ifdef YYTYPE_INT8",
          "183: typedef YYTYPE_INT8 yytype_int8;",
          "187: #else",
          "189: #endif",
          "191: #ifdef YYTYPE_UINT16",
          "",
          "[Removed Lines]",
          "184: #elif (defined __STDC__ || defined __C99__FUNC__ \\",
          "185:      || defined __cplusplus || defined _MSC_VER)",
          "186: typedef signed char yytype_int8;",
          "188: typedef short int yytype_int8;",
          "",
          "[Added Lines]",
          "196: typedef signed char yytype_int8;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "205: #  define YYSIZE_T __SIZE_TYPE__",
          "206: # elif defined size_t",
          "207: #  define YYSIZE_T size_t",
          "211: #  define YYSIZE_T size_t",
          "212: # else",
          "",
          "[Removed Lines]",
          "208: # elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \\",
          "209:      || defined __cplusplus || defined _MSC_VER)",
          "",
          "[Added Lines]",
          "216: # elif ! defined YYSIZE_T",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "220: # if defined YYENABLE_NLS && YYENABLE_NLS",
          "221: #  if ENABLE_NLS",
          "224: #  endif",
          "225: # endif",
          "226: # ifndef YY_",
          "228: # endif",
          "229: #endif",
          "232: #if ! defined lint || defined __GNUC__",
          "234: #else",
          "236: #endif",
          "241: #else",
          "250: #endif",
          "254: #endif",
          "256: #if ! defined yyoverflow || YYERROR_VERBOSE",
          "",
          "[Removed Lines]",
          "223: #   define YY_(msgid) dgettext (\"bison-runtime\", msgid)",
          "227: #  define YY_(msgid) msgid",
          "233: # define YYUSE(e) ((void) (e))",
          "239: #ifndef lint",
          "240: # define YYID(n) (n)",
          "242: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "243:      || defined __cplusplus || defined _MSC_VER)",
          "244: static int",
          "245: YYID (int i)",
          "246: #else",
          "247: static int",
          "248: YYID (i)",
          "249:     int i;",
          "251: {",
          "252:   return i;",
          "253: }",
          "",
          "[Added Lines]",
          "230: #   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)",
          "234: #  define YY_(Msgid) Msgid",
          "235: # endif",
          "236: #endif",
          "238: #ifndef YY_ATTRIBUTE",
          "239: # if (defined __GNUC__                                               \\",
          "240:       && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\",
          "241:      || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C",
          "242: #  define YY_ATTRIBUTE(Spec) __attribute__(Spec)",
          "243: # else",
          "245: # endif",
          "246: #endif",
          "248: #ifndef YY_ATTRIBUTE_PURE",
          "249: # define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))",
          "250: #endif",
          "252: #ifndef YY_ATTRIBUTE_UNUSED",
          "253: # define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))",
          "254: #endif",
          "256: #if !defined _Noreturn \\",
          "257:      && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)",
          "258: # if defined _MSC_VER && 1200 <= _MSC_VER",
          "259: #  define _Noreturn __declspec (noreturn)",
          "260: # else",
          "261: #  define _Noreturn YY_ATTRIBUTE ((__noreturn__))",
          "267: # define YYUSE(E) ((void) (E))",
          "272: #if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__",
          "274: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\",
          "275:     _Pragma (\"GCC diagnostic push\") \\",
          "276:     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\",
          "277:     _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")",
          "278: # define YY_IGNORE_MAYBE_UNINITIALIZED_END \\",
          "279:     _Pragma (\"GCC diagnostic pop\")",
          "281: # define YY_INITIAL_VALUE(Value) Value",
          "283: #ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "284: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "285: # define YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "287: #ifndef YY_INITIAL_VALUE",
          "289: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "270: #    define alloca _alloca",
          "271: #   else",
          "272: #    define YYSTACK_ALLOC alloca",
          "278: #     endif",
          "279: #    endif",
          "280: #   endif",
          "",
          "[Removed Lines]",
          "273: #    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "274:      || defined __cplusplus || defined _MSC_VER)",
          "276: #     ifndef _STDLIB_H",
          "277: #      define _STDLIB_H 1",
          "",
          "[Added Lines]",
          "309: #    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS",
          "312: #     ifndef EXIT_SUCCESS",
          "313: #      define EXIT_SUCCESS 0",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "282: # endif",
          "284: # ifdef YYSTACK_ALLOC",
          "287: #  ifndef YYSTACK_ALLOC_MAXIMUM",
          "289:        and a page size can be as small as 4096 bytes.  So we cannot safely",
          "",
          "[Removed Lines]",
          "286: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))",
          "",
          "[Added Lines]",
          "322: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "297: #  ifndef YYSTACK_ALLOC_MAXIMUM",
          "298: #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM",
          "299: #  endif",
          "301:        && ! ((defined YYMALLOC || defined malloc) \\",
          "306: #   endif",
          "307: #  endif",
          "308: #  ifndef YYMALLOC",
          "309: #   define YYMALLOC malloc",
          "313: #   endif",
          "314: #  endif",
          "315: #  ifndef YYFREE",
          "316: #   define YYFREE free",
          "320: #   endif",
          "321: #  endif",
          "",
          "[Removed Lines]",
          "300: #  if (defined __cplusplus && ! defined _STDLIB_H \\",
          "302:       && (defined YYFREE || defined free)))",
          "304: #   ifndef _STDLIB_H",
          "305: #    define _STDLIB_H 1",
          "310: #   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "311:      || defined __cplusplus || defined _MSC_VER)",
          "317: #   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "318:      || defined __cplusplus || defined _MSC_VER)",
          "",
          "[Added Lines]",
          "336: #  if (defined __cplusplus && ! defined EXIT_SUCCESS \\",
          "338:              && (defined YYFREE || defined free)))",
          "340: #   ifndef EXIT_SUCCESS",
          "341: #    define EXIT_SUCCESS 0",
          "346: #   if ! defined malloc && ! defined EXIT_SUCCESS",
          "352: #   if ! defined free && ! defined EXIT_SUCCESS",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "326: #if (! defined yyoverflow \\",
          "327:      && (! defined __cplusplus \\",
          "331: union yyalloc",
          "332: {",
          "338: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)",
          "",
          "[Removed Lines]",
          "328:   || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))",
          "333:   yytype_int16 yyss;",
          "334:   YYSTYPE yyvs;",
          "335:   };",
          "",
          "[Added Lines]",
          "362:          || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))",
          "367:   yytype_int16 yyss_alloc;",
          "368:   YYSTYPE yyvs_alloc;",
          "369: };",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "343:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\",
          "344:       + YYSTACK_GAP_MAXIMUM)",
          "365:    local variables YYSIZE and YYSTACKSIZE give the old and new number of",
          "366:    elements in the stack, and YYPTR gives the new location of the",
          "367:    stack.  Advance YYPTR to a properly aligned location for the next",
          "380: #endif",
          "383: #define YYFINAL  9",
          "",
          "[Removed Lines]",
          "348: # ifndef YYCOPY",
          "349: #  if defined __GNUC__ && 1 < __GNUC__",
          "350: #   define YYCOPY(To, From, Count) \\",
          "351:       __builtin_memcpy (To, From, (Count) * sizeof (*(From)))",
          "352: #  else",
          "353: #   define YYCOPY(To, From, Count)  \\",
          "354:       do     \\",
          "355:  {     \\",
          "356:    YYSIZE_T yyi;    \\",
          "357:    for (yyi = 0; yyi < (Count); yyi++) \\",
          "358:      (To)[yyi] = (From)[yyi];  \\",
          "359:  }     \\",
          "360:       while (YYID (0))",
          "361: #  endif",
          "362: # endif",
          "369: # define YYSTACK_RELOCATE(Stack)     \\",
          "370:     do         \\",
          "371:       {         \\",
          "372:  YYSIZE_T yynewbytes;      \\",
          "373:  YYCOPY (&yyptr->Stack, Stack, yysize);    \\",
          "374:  Stack = &yyptr->Stack;      \\",
          "375:  yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "376:  yyptr += yynewbytes / sizeof (*yyptr);    \\",
          "377:       }         \\",
          "378:     while (YYID (0))",
          "",
          "[Added Lines]",
          "380: # define YYCOPY_NEEDED 1",
          "387: # define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\",
          "388:     do                                                                  \\",
          "389:       {                                                                 \\",
          "390:         YYSIZE_T yynewbytes;                                            \\",
          "391:         YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\",
          "392:         Stack = &yyptr->Stack_alloc;                                    \\",
          "393:         yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "394:         yyptr += yynewbytes / sizeof (*yyptr);                          \\",
          "395:       }                                                                 \\",
          "396:     while (0)",
          "400: #if defined YYCOPY_NEEDED && YYCOPY_NEEDED",
          "403: # ifndef YYCOPY",
          "404: #  if defined __GNUC__ && 1 < __GNUC__",
          "405: #   define YYCOPY(Dst, Src, Count) \\",
          "406:       __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))",
          "407: #  else",
          "408: #   define YYCOPY(Dst, Src, Count)              \\",
          "409:       do                                        \\",
          "410:         {                                       \\",
          "411:           YYSIZE_T yyi;                         \\",
          "412:           for (yyi = 0; yyi < (Count); yyi++)   \\",
          "413:             (Dst)[yyi] = (Src)[yyi];            \\",
          "414:         }                                       \\",
          "415:       while (0)",
          "416: #  endif",
          "417: # endif",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "390: #define YYNNTS  10",
          "392: #define YYNRULES  20",
          "394: #define YYNSTATES  32",
          "397: #define YYUNDEFTOK  2",
          "398: #define YYMAXUTOK   260",
          "401:   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)",
          "404: static const yytype_uint8 yytranslate[] =",
          "405: {",
          "406:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "",
          "[Removed Lines]",
          "400: #define YYTRANSLATE(YYX)      \\",
          "",
          "[Added Lines]",
          "439: #define YYTRANSLATE(YYX)                                                \\",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "433: };",
          "435: #if YYDEBUG",
          "458: static const yytype_uint16 yyrline[] =",
          "459: {",
          "463: };",
          "464: #endif",
          "469: static const char *const yytname[] =",
          "",
          "[Removed Lines]",
          "438: static const yytype_uint8 yyprhs[] =",
          "439: {",
          "440:        0,     0,     3,     7,     9,    12,    16,    18,    21,    23,",
          "441:       25,    27,    28,    33,    37,    43,    48,    52,    54,    58,",
          "442:       60",
          "443: };",
          "446: static const yytype_int8 yyrhs[] =",
          "447: {",
          "448:       15,     0,    -1,     6,    16,     7,    -1,    19,    -1,    19,",
          "449:       19,    -1,    19,    17,    19,    -1,    18,    -1,    17,    18,",
          "450:       -1,    19,    -1,    21,    -1,    23,    -1,    -1,     8,    20,",
          "451:       22,     9,    -1,    10,     5,    11,    -1,    10,     5,    12,",
          "452:        5,    11,    -1,    10,     5,    12,    11,    -1,    10,    12,",
          "453:       11,    -1,    16,    -1,    22,    13,    16,    -1,     3,    -1,",
          "454:        4,    -1",
          "455: };",
          "460:        0,    94,    94,   103,   107,   116,   178,   182,   195,   199,",
          "461:      208,   222,   221,   234,   263,   301,   329,   355,   359,   373,",
          "462:      381",
          "466: #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE",
          "",
          "[Added Lines]",
          "479:        0,    92,    92,   101,   105,   114,   176,   180,   193,   197,",
          "480:      206,   220,   219,   232,   261,   299,   327,   353,   357,   371,",
          "481:      379",
          "485: #if YYDEBUG || YYERROR_VERBOSE || 0",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "471:   \"$end\", \"error\", \"$undefined\", \"_BYTE_\", \"_MASKED_BYTE_\", \"_NUMBER_\",",
          "472:   \"'{'\", \"'}'\", \"'('\", \"')'\", \"'['\", \"']'\", \"'-'\", \"'|'\", \"$accept\",",
          "473:   \"hex_string\", \"tokens\", \"token_sequence\", \"token_or_range\", \"token\",",
          "475: };",
          "476: #endif",
          "478: # ifdef YYPRINT",
          "481: static const yytype_uint16 yytoknum[] =",
          "482: {",
          "483:        0,   256,   257,   258,   259,   260,   123,   125,    40,    41,",
          "",
          "[Removed Lines]",
          "474:   \"@1\", \"range\", \"alternatives\", \"byte\", 0",
          "",
          "[Added Lines]",
          "493:   \"$@1\", \"range\", \"alternatives\", \"byte\", YY_NULLPTR",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "485: };",
          "486: # endif",
          "498: {",
          "502: };",
          "507: static const yytype_uint8 yydefact[] =",
          "508: {",
          "509:        0,     0,     0,    19,    20,    11,     0,     3,    10,     1,",
          "",
          "[Removed Lines]",
          "489: static const yytype_uint8 yyr1[] =",
          "490: {",
          "491:        0,    14,    15,    16,    16,    16,    17,    17,    18,    18,",
          "492:       19,    20,    19,    21,    21,    21,    21,    22,    22,    23,",
          "493:       23",
          "494: };",
          "497: static const yytype_uint8 yyr2[] =",
          "499:        0,     2,     3,     1,     2,     3,     1,     2,     1,     1,",
          "500:        1,     0,     4,     3,     5,     4,     3,     1,     3,     1,",
          "501:        1",
          "505:    STATE-NUM when YYTABLE doesn't specify something else to do.  Zero",
          "",
          "[Added Lines]",
          "507: #define YYPACT_NINF -11",
          "509: #define yypact_value_is_default(Yystate) \\",
          "510:   (!!((Yystate) == (-11)))",
          "512: #define YYTABLE_NINF -6",
          "514: #define yytable_value_is_error(Yytable_value) \\",
          "515:   0",
          "519: static const yytype_int8 yypact[] =",
          "521:       20,    14,    27,   -11,   -11,   -11,    21,    -2,   -11,   -11,",
          "522:       14,   -11,    -1,    -2,   -11,    -4,   -11,   -11,    10,    13,",
          "523:        9,   -11,     3,   -11,    14,   -11,     2,   -11,   -11,    18,",
          "524:      -11,   -11",
          "528:      Performed when YYTABLE does not specify something else to do.  Zero",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "512:       15,    14",
          "513: };",
          "525: {",
          "530: };",
          "534: {",
          "536: };",
          "543: static const yytype_int8 yytable[] =",
          "544: {",
          "545:       17,     3,     4,    -4,    19,    -4,     5,    29,    12,    -4,",
          "",
          "[Removed Lines]",
          "516: static const yytype_int8 yydefgoto[] =",
          "517: {",
          "518:       -1,     2,     6,    13,    14,     7,    10,    16,    18,     8",
          "519: };",
          "523: #define YYPACT_NINF -11",
          "524: static const yytype_int8 yypact[] =",
          "526:       20,    14,    27,   -11,   -11,   -11,    21,    -2,   -11,   -11,",
          "527:       14,   -11,    -1,    -2,   -11,    -4,   -11,   -11,    10,    13,",
          "528:        9,   -11,     3,   -11,    14,   -11,     2,   -11,   -11,    18,",
          "529:      -11,   -11",
          "533: static const yytype_int8 yypgoto[] =",
          "535:      -11,   -11,   -10,   -11,    17,     8,   -11,   -11,   -11,   -11",
          "539:    positive, shift that token.  If negative, reduce the rule which",
          "540:    number is the opposite.  If zero, do what YYDEFACT says.",
          "542: #define YYTABLE_NINF -6",
          "",
          "[Added Lines]",
          "539: static const yytype_int8 yypgoto[] =",
          "541:      -11,   -11,   -10,   -11,    17,     8,   -11,   -11,   -11,   -11",
          "545: static const yytype_int8 yydefgoto[] =",
          "547:       -1,     2,     6,    13,    14,     7,    10,    16,    18,     8",
          "551:      positive, shift that token.  If negative, reduce the rule whose",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "566:       11,    11",
          "567: };",
          "585: #define YYRECOVERING()  (!!yyerrstatus)",
          "599:       yyerror (yyscanner, lex_env, YY_(\"syntax error: cannot back up\")); \\",
          "660: #if YYDEBUG",
          "",
          "[Removed Lines]",
          "569: #define yyerrok  (yyerrstatus = 0)",
          "570: #define yyclearin (yychar = YYEMPTY)",
          "571: #define YYEMPTY  (-2)",
          "572: #define YYEOF  0",
          "574: #define YYACCEPT goto yyacceptlab",
          "575: #define YYABORT  goto yyabortlab",
          "576: #define YYERROR  goto yyerrorlab",
          "580:    to ease the transition to the new meaning of YYERROR, for GCC.",
          "583: #define YYFAIL  goto yyerrlab",
          "587: #define YYBACKUP(Token, Value)     \\",
          "588: do        \\",
          "589:   if (yychar == YYEMPTY && yylen == 1)    \\",
          "590:     {        \\",
          "591:       yychar = (Token);      \\",
          "592:       yylval = (Value);      \\",
          "593:       yytoken = YYTRANSLATE (yychar);    \\",
          "594:       YYPOPSTACK (1);      \\",
          "595:       goto yybackup;      \\",
          "596:     }        \\",
          "597:   else        \\",
          "598:     {        \\",
          "600:       YYERROR;       \\",
          "601:     }        \\",
          "602: while (YYID (0))",
          "605: #define YYTERROR 1",
          "606: #define YYERRCODE 256",
          "610:    If N is 0, then set CURRENT to the empty location which ends",
          "613: #define YYRHSLOC(Rhs, K) ((Rhs)[K])",
          "614: #ifndef YYLLOC_DEFAULT",
          "615: # define YYLLOC_DEFAULT(Current, Rhs, N)    \\",
          "616:     do         \\",
          "617:       if (YYID (N))                                                    \\",
          "618:  {        \\",
          "619:    (Current).first_line   = YYRHSLOC (Rhs, 1).first_line; \\",
          "620:    (Current).first_column = YYRHSLOC (Rhs, 1).first_column; \\",
          "621:    (Current).last_line    = YYRHSLOC (Rhs, N).last_line;  \\",
          "622:    (Current).last_column  = YYRHSLOC (Rhs, N).last_column; \\",
          "623:  }        \\",
          "624:       else        \\",
          "625:  {        \\",
          "626:    (Current).first_line   = (Current).last_line   =  \\",
          "627:      YYRHSLOC (Rhs, 0).last_line;    \\",
          "628:    (Current).first_column = (Current).last_column =  \\",
          "629:      YYRHSLOC (Rhs, 0).last_column;    \\",
          "630:  }        \\",
          "631:     while (YYID (0))",
          "632: #endif",
          "636:    This macro was not mandated originally: define only if we know",
          "639: #ifndef YY_LOCATION_PRINT",
          "640: # if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL",
          "641: #  define YY_LOCATION_PRINT(File, Loc)   \\",
          "642:      fprintf (File, \"%d.%d-%d.%d\",   \\",
          "643:        (Loc).first_line, (Loc).first_column, \\",
          "644:        (Loc).last_line,  (Loc).last_column)",
          "645: # else",
          "646: #  define YY_LOCATION_PRINT(File, Loc) ((void) 0)",
          "647: # endif",
          "648: #endif",
          "653: #ifdef YYLEX_PARAM",
          "654: # define YYLEX yylex (&yylval, YYLEX_PARAM)",
          "655: #else",
          "656: # define YYLEX yylex (&yylval, yyscanner, lex_env)",
          "657: #endif",
          "",
          "[Added Lines]",
          "580: static const yytype_uint8 yyr1[] =",
          "581: {",
          "582:        0,    14,    15,    16,    16,    16,    17,    17,    18,    18,",
          "583:       19,    20,    19,    21,    21,    21,    21,    22,    22,    23,",
          "584:       23",
          "585: };",
          "588: static const yytype_uint8 yyr2[] =",
          "589: {",
          "590:        0,     2,     3,     1,     2,     3,     1,     2,     1,     1,",
          "591:        1,     0,     4,     3,     5,     4,     3,     1,     3,     1,",
          "592:        1",
          "593: };",
          "596: #define yyerrok         (yyerrstatus = 0)",
          "597: #define yyclearin       (yychar = YYEMPTY)",
          "598: #define YYEMPTY         (-2)",
          "599: #define YYEOF           0",
          "601: #define YYACCEPT        goto yyacceptlab",
          "602: #define YYABORT         goto yyabortlab",
          "603: #define YYERROR         goto yyerrorlab",
          "608: #define YYBACKUP(Token, Value)                                  \\",
          "609: do                                                              \\",
          "610:   if (yychar == YYEMPTY)                                        \\",
          "611:     {                                                           \\",
          "612:       yychar = (Token);                                         \\",
          "613:       yylval = (Value);                                         \\",
          "614:       YYPOPSTACK (yylen);                                       \\",
          "615:       yystate = *yyssp;                                         \\",
          "616:       goto yybackup;                                            \\",
          "617:     }                                                           \\",
          "618:   else                                                          \\",
          "619:     {                                                           \\",
          "621:       YYERROR;                                                  \\",
          "622:     }                                                           \\",
          "623: while (0)",
          "626: #define YYTERROR        1",
          "627: #define YYERRCODE       256",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "664: #  define YYFPRINTF fprintf",
          "665: # endif",
          "692: static void",
          "693: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)",
          "703: {",
          "706:   YYUSE (yyscanner);",
          "707:   YYUSE (lex_env);",
          "708: # ifdef YYPRINT",
          "709:   if (yytype < YYNTOKENS)",
          "710:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);",
          "713: # endif",
          "719: }",
          "",
          "[Removed Lines]",
          "667: # define YYDPRINTF(Args)   \\",
          "668: do {      \\",
          "669:   if (yydebug)     \\",
          "670:     YYFPRINTF Args;    \\",
          "671: } while (YYID (0))",
          "673: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)     \\",
          "674: do {           \\",
          "675:   if (yydebug)          \\",
          "676:     {           \\",
          "677:       YYFPRINTF (stderr, \"%s \", Title);       \\",
          "678:       yy_symbol_print (stderr,        \\",
          "679:     Type, Value, yyscanner, lex_env); \\",
          "680:       YYFPRINTF (stderr, \"\\n\");        \\",
          "681:     }           \\",
          "682: } while (YYID (0))",
          "686: | Print this symbol on YYOUTPUT.  |",
          "690: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "691:      || defined __cplusplus || defined _MSC_VER)",
          "694: #else",
          "695: static void",
          "696: yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env)",
          "697:     FILE *yyoutput;",
          "698:     int yytype;",
          "699:     YYSTYPE const * const yyvaluep;",
          "700:     void *yyscanner;",
          "701:     HEX_LEX_ENVIRONMENT *lex_env;",
          "702: #endif",
          "704:   if (!yyvaluep)",
          "705:     return;",
          "711: # else",
          "712:   YYUSE (yyoutput);",
          "714:   switch (yytype)",
          "715:     {",
          "716:       default:",
          "717:  break;",
          "718:     }",
          "",
          "[Added Lines]",
          "639: # define YYDPRINTF(Args)                        \\",
          "640: do {                                            \\",
          "641:   if (yydebug)                                  \\",
          "642:     YYFPRINTF Args;                             \\",
          "643: } while (0)",
          "646: #ifndef YY_LOCATION_PRINT",
          "647: # define YY_LOCATION_PRINT(File, Loc) ((void) 0)",
          "648: #endif",
          "651: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\",
          "652: do {                                                                      \\",
          "653:   if (yydebug)                                                            \\",
          "654:     {                                                                     \\",
          "655:       YYFPRINTF (stderr, \"%s \", Title);                                   \\",
          "656:       yy_symbol_print (stderr,                                            \\",
          "657:                   Type, Value, yyscanner, lex_env); \\",
          "658:       YYFPRINTF (stderr, \"\\n\");                                           \\",
          "659:     }                                                                     \\",
          "660: } while (0)",
          "664: | Print this symbol's value on YYOUTPUT.  |",
          "670:   FILE *yyo = yyoutput;",
          "671:   YYUSE (yyo);",
          "674:   if (!yyvaluep)",
          "675:     return;",
          "680:   YYUSE (yytype);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "723: | Print this symbol on YYOUTPUT.  |",
          "728: static void",
          "729: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)",
          "739: {",
          "745:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env);",
          "746:   YYFPRINTF (yyoutput, \")\");",
          "",
          "[Removed Lines]",
          "726: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "727:      || defined __cplusplus || defined _MSC_VER)",
          "730: #else",
          "731: static void",
          "732: yy_symbol_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env)",
          "733:     FILE *yyoutput;",
          "734:     int yytype;",
          "735:     YYSTYPE const * const yyvaluep;",
          "736:     void *yyscanner;",
          "737:     HEX_LEX_ENVIRONMENT *lex_env;",
          "738: #endif",
          "740:   if (yytype < YYNTOKENS)",
          "741:     YYFPRINTF (yyoutput, \"token %s (\", yytname[yytype]);",
          "742:   else",
          "743:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);",
          "",
          "[Added Lines]",
          "691:   YYFPRINTF (yyoutput, \"%s %s (\",",
          "692:              yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "751: | TOP (included).                                                   |",
          "759: static void",
          "764: {",
          "765:   YYFPRINTF (stderr, \"Stack now\");",
          "768:   YYFPRINTF (stderr, \"\\n\");",
          "769: }",
          "779: | Report that the YYRULE is going to be reduced.  |",
          "787: static void",
          "794: {",
          "795:   int yynrhs = yyr2[yyrule];",
          "796:   int yyi;",
          "798:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",",
          "801:   for (yyi = 0; yyi < yynrhs; yyi++)",
          "802:     {",
          "808:     }",
          "809: }",
          "",
          "[Removed Lines]",
          "754: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "755:      || defined __cplusplus || defined _MSC_VER)",
          "756: static void",
          "757: yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)",
          "758: #else",
          "760: yy_stack_print (bottom, top)",
          "761:     yytype_int16 *bottom;",
          "762:     yytype_int16 *top;",
          "763: #endif",
          "766:   for (; bottom <= top; ++bottom)",
          "767:     YYFPRINTF (stderr, \" %d\", *bottom);",
          "771: # define YY_STACK_PRINT(Bottom, Top)    \\",
          "772: do {        \\",
          "773:   if (yydebug)       \\",
          "774:     yy_stack_print ((Bottom), (Top));    \\",
          "775: } while (YYID (0))",
          "782: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "783:      || defined __cplusplus || defined _MSC_VER)",
          "784: static void",
          "785: yy_reduce_print (YYSTYPE *yyvsp, int yyrule, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)",
          "786: #else",
          "788: yy_reduce_print (yyvsp, yyrule, yyscanner, lex_env)",
          "789:     YYSTYPE *yyvsp;",
          "790:     int yyrule;",
          "791:     void *yyscanner;",
          "792:     HEX_LEX_ENVIRONMENT *lex_env;",
          "793: #endif",
          "797:   unsigned long int yylno = yyrline[yyrule];",
          "799:       yyrule - 1, yylno);",
          "803:       fprintf (stderr, \"   $%d = \", yyi + 1);",
          "804:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],",
          "805:          &(yyvsp[(yyi + 1) - (yynrhs)])",
          "806:                   , yyscanner, lex_env);",
          "807:       fprintf (stderr, \"\\n\");",
          "811: # define YY_REDUCE_PRINT(Rule)  \\",
          "812: do {     \\",
          "813:   if (yydebug)    \\",
          "814:     yy_reduce_print (yyvsp, Rule, yyscanner, lex_env); \\",
          "815: } while (YYID (0))",
          "",
          "[Added Lines]",
          "704: yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)",
          "707:   for (; yybottom <= yytop; yybottom++)",
          "708:     {",
          "709:       int yybot = *yybottom;",
          "710:       YYFPRINTF (stderr, \" %d\", yybot);",
          "711:     }",
          "715: # define YY_STACK_PRINT(Bottom, Top)                            \\",
          "716: do {                                                            \\",
          "717:   if (yydebug)                                                  \\",
          "718:     yy_stack_print ((Bottom), (Top));                           \\",
          "719: } while (0)",
          "727: yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)",
          "729:   unsigned long int yylno = yyrline[yyrule];",
          "733:              yyrule - 1, yylno);",
          "737:       YYFPRINTF (stderr, \"   $%d = \", yyi + 1);",
          "738:       yy_symbol_print (stderr,",
          "739:                        yystos[yyssp[yyi + 1 - yynrhs]],",
          "740:                        &(yyvsp[(yyi + 1) - (yynrhs)])",
          "741:                                               , yyscanner, lex_env);",
          "742:       YYFPRINTF (stderr, \"\\n\");",
          "746: # define YY_REDUCE_PRINT(Rule)          \\",
          "747: do {                                    \\",
          "748:   if (yydebug)                          \\",
          "749:     yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, lex_env); \\",
          "750: } while (0)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "830: # define YYINITDEPTH 200",
          "831: #endif",
          "",
          "[Removed Lines]",
          "829: #ifndef YYINITDEPTH",
          "",
          "[Added Lines]",
          "764: #ifndef YYINITDEPTH",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "850: #  if defined __GLIBC__ && defined _STRING_H",
          "851: #   define yystrlen strlen",
          "852: #  else",
          "855:      || defined __cplusplus || defined _MSC_VER)",
          "856: static YYSIZE_T",
          "862: #endif",
          "863: {",
          "864:   YYSIZE_T yylen;",
          "",
          "[Removed Lines]",
          "854: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "857: yystrlen (const char *yystr)",
          "858: #else",
          "859: static YYSIZE_T",
          "860: yystrlen (yystr)",
          "861:     const char *yystr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "874: #   define yystpcpy stpcpy",
          "875: #  else",
          "879:      || defined __cplusplus || defined _MSC_VER)",
          "880: static char *",
          "887: #endif",
          "888: {",
          "889:   char *yyd = yydest;",
          "",
          "[Removed Lines]",
          "878: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "881: yystpcpy (char *yydest, const char *yysrc)",
          "882: #else",
          "883: static char *",
          "884: yystpcpy (yydest, yysrc)",
          "885:     char *yydest;",
          "886:     const char *yysrc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "913:       YYSIZE_T yyn = 0;",
          "914:       char const *yyp = yystr;",
          "937:    }",
          "938:     do_not_strip_quotes: ;",
          "939:     }",
          "",
          "[Removed Lines]",
          "916:       for (;;)",
          "917:  switch (*++yyp)",
          "918:    {",
          "919:    case '\\'':",
          "920:    case ',':",
          "921:      goto do_not_strip_quotes;",
          "923:    case '\\\\':",
          "924:      if (*++yyp != '\\\\')",
          "925:        goto do_not_strip_quotes;",
          "927:    default:",
          "928:      if (yyres)",
          "929:        yyres[yyn] = *yyp;",
          "930:      yyn++;",
          "931:      break;",
          "933:    case '\"':",
          "934:      if (yyres)",
          "935:        yyres[yyn] = '\\0';",
          "936:      return yyn;",
          "",
          "[Added Lines]",
          "835:         switch (*++yyp)",
          "836:           {",
          "837:           case '\\'':",
          "838:           case ',':",
          "839:             goto do_not_strip_quotes;",
          "841:           case '\\\\':",
          "842:             if (*++yyp != '\\\\')",
          "843:               goto do_not_strip_quotes;",
          "845:           default:",
          "846:             if (yyres)",
          "847:               yyres[yyn] = *yyp;",
          "848:             yyn++;",
          "849:             break;",
          "851:           case '\"':",
          "852:             if (yyres)",
          "853:               yyres[yyn] = '\\0';",
          "854:             return yyn;",
          "855:           }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "944:   return yystpcpy (yyres, yystr) - yyres;",
          "945: }",
          "946: # endif",
          "956: yysyntax_error (char *yyresult, int yystate, int yychar)",
          "958:   int yyn = yypact[yystate];",
          "962:   else",
          "1052:       return yysize;",
          "1053:     }",
          "1054: }",
          "1060: | Release the memory associated to this symbol.  |",
          "1064: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1065:      || defined __cplusplus || defined _MSC_VER)",
          "1075:     HEX_LEX_ENVIRONMENT *lex_env;",
          "1076: #endif",
          "1077: {",
          "1078:   YYUSE (yyvaluep);",
          "1079:   YYUSE (yyscanner);",
          "1080:   YYUSE (lex_env);",
          "1082:   if (!yymsg)",
          "1083:     yymsg = \"Deleting\";",
          "1084:   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);",
          "1086:   switch (yytype)",
          "1121: #line 1120 \"hex_grammar.c\"",
          "1122:  break;",
          "1124:       default:",
          "1125:  break;",
          "1126:     }",
          "1127: }",
          "",
          "[Removed Lines]",
          "949:    YYCHAR while in state YYSTATE.  Return the number of bytes copied,",
          "950:    including the terminating null byte.  If YYRESULT is null, do not",
          "951:    copy anything; just return the number of bytes that would be",
          "952:    copied.  As a special case, return 0 if an ordinary \"syntax error\"",
          "953:    message will do.  Return YYSIZE_MAXIMUM if overflow occurs during",
          "955: static YYSIZE_T",
          "957: {",
          "960:   if (! (YYPACT_NINF < yyn && yyn <= YYLAST))",
          "961:     return 0;",
          "963:     {",
          "964:       int yytype = YYTRANSLATE (yychar);",
          "965:       YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);",
          "966:       YYSIZE_T yysize = yysize0;",
          "967:       YYSIZE_T yysize1;",
          "968:       int yysize_overflow = 0;",
          "969:       enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "970:       char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "971:       int yyx;",
          "973: # if 0",
          "976:       YY_(\"syntax error, unexpected %s\");",
          "977:       YY_(\"syntax error, unexpected %s, expecting %s\");",
          "978:       YY_(\"syntax error, unexpected %s, expecting %s or %s\");",
          "979:       YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\");",
          "980:       YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\");",
          "981: # endif",
          "982:       char *yyfmt;",
          "983:       char const *yyf;",
          "984:       static char const yyunexpected[] = \"syntax error, unexpected %s\";",
          "985:       static char const yyexpecting[] = \", expecting %s\";",
          "986:       static char const yyor[] = \" or %s\";",
          "987:       char yyformat[sizeof yyunexpected",
          "988:       + sizeof yyexpecting - 1",
          "989:       + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)",
          "991:       char const *yyprefix = yyexpecting;",
          "995:       int yyxbegin = yyn < 0 ? -yyn : 0;",
          "998:       int yychecklim = YYLAST - yyn + 1;",
          "999:       int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;",
          "1000:       int yycount = 1;",
          "1002:       yyarg[0] = yytname[yytype];",
          "1003:       yyfmt = yystpcpy (yyformat, yyunexpected);",
          "1005:       for (yyx = yyxbegin; yyx < yyxend; ++yyx)",
          "1006:  if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)",
          "1007:    {",
          "1008:      if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)",
          "1009:        {",
          "1010:   yycount = 1;",
          "1011:   yysize = yysize0;",
          "1012:   yyformat[sizeof yyunexpected - 1] = '\\0';",
          "1013:   break;",
          "1014:        }",
          "1015:      yyarg[yycount++] = yytname[yyx];",
          "1016:      yysize1 = yysize + yytnamerr (0, yytname[yyx]);",
          "1017:      yysize_overflow |= (yysize1 < yysize);",
          "1018:      yysize = yysize1;",
          "1019:      yyfmt = yystpcpy (yyfmt, yyprefix);",
          "1020:      yyprefix = yyor;",
          "1021:    }",
          "1023:       yyf = YY_(yyformat);",
          "1024:       yysize1 = yysize + yystrlen (yyf);",
          "1025:       yysize_overflow |= (yysize1 < yysize);",
          "1026:       yysize = yysize1;",
          "1028:       if (yysize_overflow)",
          "1029:  return YYSIZE_MAXIMUM;",
          "1031:       if (yyresult)",
          "1032:  {",
          "1034:       Don't have undefined behavior even if the translation",
          "1036:    char *yyp = yyresult;",
          "1037:    int yyi = 0;",
          "1038:    while ((*yyp = *yyf) != '\\0')",
          "1039:      {",
          "1040:        if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)",
          "1041:   {",
          "1042:     yyp += yytnamerr (yyp, yyarg[yyi++]);",
          "1043:     yyf += 2;",
          "1044:   }",
          "1045:        else",
          "1046:   {",
          "1047:     yyp++;",
          "1048:     yyf++;",
          "1049:   }",
          "1050:      }",
          "1051:  }",
          "1066: static void",
          "1067: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)",
          "1068: #else",
          "1069: static void",
          "1070: yydestruct (yymsg, yytype, yyvaluep, yyscanner, lex_env)",
          "1071:     const char *yymsg;",
          "1072:     int yytype;",
          "1073:     YYSTYPE *yyvaluep;",
          "1074:     void *yyscanner;",
          "1087:     {",
          "1089: #line 83 \"hex_grammar.y\"",
          "1090:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1091: #line 1090 \"hex_grammar.c\"",
          "1092:  break;",
          "1094: #line 84 \"hex_grammar.y\"",
          "1095:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1096: #line 1095 \"hex_grammar.c\"",
          "1097:  break;",
          "1099: #line 85 \"hex_grammar.y\"",
          "1100:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1101: #line 1100 \"hex_grammar.c\"",
          "1102:  break;",
          "1104: #line 86 \"hex_grammar.y\"",
          "1105:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1106: #line 1105 \"hex_grammar.c\"",
          "1107:  break;",
          "1109: #line 89 \"hex_grammar.y\"",
          "1110:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1111: #line 1110 \"hex_grammar.c\"",
          "1112:  break;",
          "1114: #line 88 \"hex_grammar.y\"",
          "1115:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1116: #line 1115 \"hex_grammar.c\"",
          "1117:  break;",
          "1119: #line 87 \"hex_grammar.y\"",
          "1120:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1133: #ifdef YYPARSE_PARAM",
          "1134: #if defined __STDC__ || defined __cplusplus",
          "1135: int yyparse (void *YYPARSE_PARAM);",
          "1136: #else",
          "1137: int yyparse ();",
          "1138: #endif",
          "1140: #if defined __STDC__ || defined __cplusplus",
          "1141: int yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);",
          "1142: #else",
          "1143: int yyparse ();",
          "1144: #endif",
          "",
          "[Added Lines]",
          "867:    about the unexpected token YYTOKEN for the state stack whose top is",
          "868:    YYSSP.",
          "870:    Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is",
          "871:    not large enough to hold the message.  In that case, also set",
          "874: static int",
          "875: yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,",
          "876:                 yytype_int16 *yyssp, int yytoken)",
          "878:   YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);",
          "879:   YYSIZE_T yysize = yysize0;",
          "880:   enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "882:   const char *yyformat = YY_NULLPTR;",
          "884:   char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "887:   int yycount = 0;",
          "890:      - If this state is a consistent state with a default action, then",
          "891:        the only way this function was invoked is if the default action",
          "892:        is an error action.  In that case, don't check for expected",
          "893:        tokens because there are none.",
          "894:      - The only way there can be no lookahead present (in yychar) is if",
          "895:        this state is a consistent state with a default action.  Thus,",
          "896:        detecting the absence of a lookahead is sufficient to determine",
          "897:        that there is no unexpected or expected token to report.  In that",
          "898:        case, just report a simple \"syntax error\".",
          "899:      - Don't assume there isn't a lookahead just because this state is a",
          "900:        consistent state with a default action.  There might have been a",
          "901:        previous inconsistent state, consistent state with a non-default",
          "902:        action, or user semantic action that manipulated yychar.",
          "903:      - Of course, the expected token list depends on states to have",
          "904:        correct lookahead information, and it depends on the parser not",
          "905:        to perform extra reductions after fetching a lookahead from the",
          "906:        scanner and before detecting a syntax error.  Thus, state merging",
          "907:        (from LALR or IELR) and default reductions corrupt the expected",
          "908:        token list.  However, the list is correct for canonical LR with",
          "909:        one exception: it will still contain any token that will not be",
          "910:        accepted due to an error action in a later state.",
          "912:   if (yytoken != YYEMPTY)",
          "913:     {",
          "914:       int yyn = yypact[*yyssp];",
          "915:       yyarg[yycount++] = yytname[yytoken];",
          "916:       if (!yypact_value_is_default (yyn))",
          "917:         {",
          "919:              YYCHECK.  In other words, skip the first -YYN actions for",
          "921:           int yyxbegin = yyn < 0 ? -yyn : 0;",
          "923:           int yychecklim = YYLAST - yyn + 1;",
          "924:           int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;",
          "925:           int yyx;",
          "927:           for (yyx = yyxbegin; yyx < yyxend; ++yyx)",
          "928:             if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR",
          "929:                 && !yytable_value_is_error (yytable[yyx + yyn]))",
          "930:               {",
          "931:                 if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)",
          "932:                   {",
          "933:                     yycount = 1;",
          "934:                     yysize = yysize0;",
          "935:                     break;",
          "936:                   }",
          "937:                 yyarg[yycount++] = yytname[yyx];",
          "938:                 {",
          "939:                   YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);",
          "940:                   if (! (yysize <= yysize1",
          "941:                          && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "942:                     return 2;",
          "943:                   yysize = yysize1;",
          "944:                 }",
          "945:               }",
          "946:         }",
          "947:     }",
          "949:   switch (yycount)",
          "951: # define YYCASE_(N, S)                      \\",
          "952:       case N:                               \\",
          "953:         yyformat = S;                       \\",
          "954:       break",
          "955:       YYCASE_(0, YY_(\"syntax error\"));",
          "956:       YYCASE_(1, YY_(\"syntax error, unexpected %s\"));",
          "957:       YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));",
          "958:       YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));",
          "959:       YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));",
          "960:       YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));",
          "961: # undef YYCASE_",
          "964:   {",
          "965:     YYSIZE_T yysize1 = yysize + yystrlen (yyformat);",
          "966:     if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "967:       return 2;",
          "968:     yysize = yysize1;",
          "969:   }",
          "971:   if (*yymsg_alloc < yysize)",
          "972:     {",
          "974:       if (! (yysize <= *yymsg_alloc",
          "975:              && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))",
          "977:       return 1;",
          "978:     }",
          "981:      Don't have undefined behavior even if the translation",
          "983:   {",
          "984:     char *yyp = *yymsg;",
          "985:     int yyi = 0;",
          "986:     while ((*yyp = *yyformat) != '\\0')",
          "987:       if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)",
          "988:         {",
          "989:           yyp += yytnamerr (yyp, yyarg[yyi++]);",
          "990:           yyformat += 2;",
          "991:         }",
          "992:       else",
          "993:         {",
          "994:           yyp++;",
          "995:           yyformat++;",
          "996:         }",
          "997:   }",
          "998:   return 0;",
          "1016:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1021:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1023:         break;",
          "1027:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1029:         break;",
          "1033:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1035:         break;",
          "1039:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1041:         break;",
          "1045:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1047:         break;",
          "1051:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1053:         break;",
          "1057:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1059:         break;",
          "1063:         break;",
          "1065:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1167: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1175:     HEX_LEX_ENVIRONMENT *lex_env;",
          "1176: #endif",
          "1177: #endif",
          "1178: {",
          "1203:      `yyss': related to states,",
          "1207:      Refer to the stacks thru separate pointers, to allow yyoverflow",
          "1211:   yytype_int16 yyssa[YYINITDEPTH];",
          "1212:   yytype_int16 *yyss = yyssa;",
          "1216:   YYSTYPE yyvsa[YYINITDEPTH];",
          "1217:   YYSTYPE *yyvs = yyvsa;",
          "1218:   YYSTYPE *yyvsp;",
          "1222: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))",
          "1224:   YYSIZE_T yystacksize = YYINITDEPTH;",
          "1228:   YYSTYPE yyval;",
          "1233:   int yylen = 0;",
          "1235:   YYDPRINTF ((stderr, \"Starting parse\\n\"));",
          "1237:   yystate = 0;",
          "1238:   yyerrstatus = 0;",
          "1239:   yynerrs = 0;",
          "1247:   yyssp = yyss;",
          "1248:   yyvsp = yyvs;",
          "",
          "[Removed Lines]",
          "1153: | yyparse.  |",
          "1156: #ifdef YYPARSE_PARAM",
          "1157: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1158:      || defined __cplusplus || defined _MSC_VER)",
          "1159: int",
          "1160: yyparse (void *YYPARSE_PARAM)",
          "1161: #else",
          "1162: int",
          "1163: yyparse (YYPARSE_PARAM)",
          "1164:     void *YYPARSE_PARAM;",
          "1165: #endif",
          "1168:      || defined __cplusplus || defined _MSC_VER)",
          "1169: int",
          "1170: yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)",
          "1171: #else",
          "1172: int",
          "1173: yyparse (yyscanner, lex_env)",
          "1174:     void *yyscanner;",
          "1180: int yychar;",
          "1183: YYSTYPE yylval;",
          "1186: int yynerrs;",
          "1188:   int yystate;",
          "1189:   int yyn;",
          "1190:   int yyresult;",
          "1192:   int yyerrstatus;",
          "1194:   int yytoken = 0;",
          "1195: #if YYERROR_VERBOSE",
          "1197:   char yymsgbuf[128];",
          "1198:   char *yymsg = yymsgbuf;",
          "1199:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;",
          "1200: #endif",
          "1204:      `yyvs': related to semantic values,",
          "1205:      `yyls': related to locations.",
          "1213:   yytype_int16 *yyssp;",
          "1243:      Waste one element of value and location stack",
          "1244:      so that they stay on the same level as the state stack.",
          "",
          "[Added Lines]",
          "1085: YY_INITIAL_VALUE (static YYSTYPE yyval_default;)",
          "1086: YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);",
          "1089:     int yynerrs;",
          "1091:     int yystate;",
          "1093:     int yyerrstatus;",
          "1096:        'yyss': related to states.",
          "1097:        'yyvs': related to semantic values.",
          "1099:        Refer to the stacks through separate pointers, to allow yyoverflow",
          "1103:     yytype_int16 yyssa[YYINITDEPTH];",
          "1104:     yytype_int16 *yyss;",
          "1105:     yytype_int16 *yyssp;",
          "1108:     YYSTYPE yyvsa[YYINITDEPTH];",
          "1109:     YYSTYPE *yyvs;",
          "1110:     YYSTYPE *yyvsp;",
          "1112:     YYSIZE_T yystacksize;",
          "1114:   int yyn;",
          "1115:   int yyresult;",
          "1117:   int yytoken = 0;",
          "1122: #if YYERROR_VERBOSE",
          "1124:   char yymsgbuf[128];",
          "1125:   char *yymsg = yymsgbuf;",
          "1126:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;",
          "1127: #endif",
          "1129: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))",
          "1135:   yyssp = yyss = yyssa;",
          "1136:   yyvsp = yyvs = yyvsa;",
          "1137:   yystacksize = YYINITDEPTH;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1264:     {",
          "1266:       YYSIZE_T yysize = yyssp - yyss + 1;",
          "1287:  yyss = yyss1;",
          "1288:  yyvs = yyvs1;",
          "",
          "[Removed Lines]",
          "1268: #ifdef yyoverflow",
          "1269:       {",
          "1271:     these so that the &'s don't force the real ones into",
          "1273:  YYSTYPE *yyvs1 = yyvs;",
          "1274:  yytype_int16 *yyss1 = yyss;",
          "1278:     data in use in that stack, in bytes.  This used to be a",
          "1279:     conditional around just the two extra args, but that might",
          "1281:  yyoverflow (YY_(\"memory exhausted\"),",
          "1282:       &yyss1, yysize * sizeof (*yyssp),",
          "1283:       &yyvs1, yysize * sizeof (*yyvsp),",
          "1285:       &yystacksize);",
          "",
          "[Added Lines]",
          "1166:            these so that the &'s don't force the real ones into",
          "1168:         YYSTYPE *yyvs1 = yyvs;",
          "1169:         yytype_int16 *yyss1 = yyss;",
          "1172:            data in use in that stack, in bytes.  This used to be a",
          "1173:            conditional around just the two extra args, but that might",
          "1175:         yyoverflow (YY_(\"memory exhausted\"),",
          "1176:                     &yyss1, yysize * sizeof (*yyssp),",
          "1177:                     &yyvs1, yysize * sizeof (*yyvsp),",
          "1178:                     &yystacksize);",
          "1180:         yyss = yyss1;",
          "1181:         yyvs = yyvs1;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1291: # ifndef YYSTACK_RELOCATE",
          "1292:       goto yyexhaustedlab;",
          "1295:       if (YYMAXDEPTH <= yystacksize)",
          "1297:       yystacksize *= 2;",
          "1298:       if (YYMAXDEPTH < yystacksize)",
          "1307:  YYSTACK_RELOCATE (yyss);",
          "1310: #  undef YYSTACK_RELOCATE",
          "1311:  if (yyss1 != yyssa)",
          "1312:    YYSTACK_FREE (yyss1);",
          "",
          "[Removed Lines]",
          "1293: # else",
          "1296:  goto yyexhaustedlab;",
          "1299:  yystacksize = YYMAXDEPTH;",
          "1301:       {",
          "1302:  yytype_int16 *yyss1 = yyss;",
          "1303:  union yyalloc *yyptr =",
          "1304:    (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));",
          "1305:  if (! yyptr)",
          "1306:    goto yyexhaustedlab;",
          "1308:  YYSTACK_RELOCATE (yyvs);",
          "",
          "[Added Lines]",
          "1189:         goto yyexhaustedlab;",
          "1192:         yystacksize = YYMAXDEPTH;",
          "1195:         yytype_int16 *yyss1 = yyss;",
          "1196:         union yyalloc *yyptr =",
          "1197:           (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));",
          "1198:         if (! yyptr)",
          "1199:           goto yyexhaustedlab;",
          "1200:         YYSTACK_RELOCATE (yyss_alloc, yyss);",
          "1201:         YYSTACK_RELOCATE (yyvs_alloc, yyvs);",
          "1203:         if (yyss1 != yyssa)",
          "1204:           YYSTACK_FREE (yyss1);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1314: # endif",
          "1317:       yyssp = yyss + yysize - 1;",
          "1318:       yyvsp = yyvs + yysize - 1;",
          "1321:       YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",",
          "1324:       if (yyss + yystacksize - 1 <= yyssp)",
          "1325:  YYABORT;",
          "1326:     }",
          "1328:   YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));",
          "",
          "[Removed Lines]",
          "1322:     (unsigned long int) yystacksize));",
          "",
          "[Added Lines]",
          "1213:                   (unsigned long int) yystacksize));",
          "1216:         YYABORT;",
          "1221:   if (yystate == YYFINAL)",
          "1222:     YYACCEPT;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1333: | yybackup.  |",
          "1335: yybackup:",
          "1341:   yyn = yypact[yystate];",
          "1342:   if (yyn == YYPACT_NINF)",
          "1343:     goto yydefault;",
          "1349:     {",
          "1350:       YYDPRINTF ((stderr, \"Reading a token: \"));",
          "1351:       yychar = YYLEX;",
          "",
          "[Removed Lines]",
          "1348:   if (yychar == YYEMPTY)",
          "",
          "[Added Lines]",
          "1236:   if (yypact_value_is_default (yyn))",
          "1245:       yychar = yylex (&yylval, yyscanner, lex_env);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1367:   yyn += yytoken;",
          "1368:   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)",
          "1369:     goto yydefault;",
          "1372:     {",
          "1373:       if (yyn == 0 || yyn == YYTABLE_NINF)",
          "1374:  goto yyerrlab;",
          "1375:       yyn = -yyn;",
          "1379:   if (yyn == YYFINAL)",
          "1380:     YYACCEPT;",
          "1384:   if (yyerrstatus)",
          "1385:     yyerrstatus--;",
          "1391:   if (yychar != YYEOF)",
          "1392:     yychar = YYEMPTY;",
          "1394:   yystate = yyn;",
          "",
          "[Removed Lines]",
          "1370:   yyn = yytable[yyn];",
          "1371:   if (yyn <= 0)",
          "1376:       goto yyreduce;",
          "1377:     }",
          "1388:   YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);",
          "",
          "[Added Lines]",
          "1267:       if (yytable_value_is_error (yyn))",
          "1268:         goto yyerrlab;",
          "1282:   yychar = YYEMPTY;",
          "1285:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1287:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1413: yyreduce:",
          "1418:      `$$ = $1'.",
          "",
          "[Removed Lines]",
          "1415:   yylen = yyr2[yyn];",
          "",
          "[Added Lines]",
          "1310:      '$$ = $1'.",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1428:   YY_REDUCE_PRINT (yyn);",
          "1430:     {",
          "1431:         case 2:",
          "1433:     {",
          "1434:         RE* re = yyget_extra(yyscanner);",
          "1435:         re->root_node = (yyvsp[(2) - (3)].re_node);",
          "1436:       }",
          "1440: #line 104 \"hex_grammar.y\"",
          "1441:     {",
          "1442:         (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1443:       }",
          "1447: #line 108 \"hex_grammar.y\"",
          "1451:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (2)].re_node));",
          "1452:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(2) - (2)].re_node));",
          "1454:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1455:       }",
          "1458:   case 5:",
          "1459: #line 117 \"hex_grammar.y\"",
          "1461:         RE_NODE* new_concat;",
          "1462:         RE_NODE* leftmost_concat = NULL;",
          "1463:         RE_NODE* leftmost_node = (yyvsp[(2) - (3)].re_node);",
          "",
          "[Removed Lines]",
          "1429:   switch (yyn)",
          "1432: #line 95 \"hex_grammar.y\"",
          "1437:     break;",
          "1439:   case 3:",
          "1444:     break;",
          "1446:   case 4:",
          "1448:     {",
          "1449:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[(1) - (2)].re_node), (yyvsp[(2) - (2)].re_node));",
          "1456:     break;",
          "1460:     {",
          "",
          "[Added Lines]",
          "1327:         re->root_node = (yyvsp[-1].re_node);",
          "1335:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1343:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1345:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1346:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1358:         RE_NODE* leftmost_node = (yyvsp[-1].re_node);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1490:         {",
          "1491:           leftmost_concat = leftmost_node;",
          "1492:           leftmost_node = leftmost_node->left;",
          "1495:         new_concat = yr_re_node_create(",
          "1496:             RE_NODE_CONCAT, (yyvsp[(1) - (3)].re_node), leftmost_node);",
          "1498:         if (new_concat != NULL)",
          "1499:         {",
          "1501:           {",
          "1502:             leftmost_concat->left = new_concat;",
          "1503:             (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[(2) - (3)].re_node), (yyvsp[(3) - (3)].re_node));",
          "1505:           else",
          "1506:           {",
          "1507:             (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, new_concat, (yyvsp[(3) - (3)].re_node));",
          "1511:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (3)].re_node));",
          "1512:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(2) - (3)].re_node));",
          "1513:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(3) - (3)].re_node));",
          "1515:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1516:       }",
          "1520: #line 179 \"hex_grammar.y\"",
          "1521:     {",
          "1522:         (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1523:       }",
          "1527: #line 183 \"hex_grammar.y\"",
          "1531:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (2)].re_node));",
          "1532:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(2) - (2)].re_node));",
          "1534:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1535:       }",
          "1539: #line 196 \"hex_grammar.y\"",
          "1540:     {",
          "1541:         (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1542:       }",
          "1546: #line 200 \"hex_grammar.y\"",
          "1547:     {",
          "1548:         (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1549:         (yyval.re_node)->greedy = FALSE;",
          "1550:       }",
          "1553:   case 10:",
          "1554: #line 209 \"hex_grammar.y\"",
          "1555:     {",
          "1556:         lex_env->token_count++;",
          "1558:         if (lex_env->token_count > MAX_HEX_STRING_TOKENS)",
          "1559:         {",
          "1560:           yr_re_node_destroy((yyvsp[(1) - (1)].re_node));",
          "1561:           yyerror(yyscanner, lex_env, \"string too long\");",
          "1563:         }",
          "1565:         (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1566:       }",
          "1569:   case 11:",
          "1570: #line 222 \"hex_grammar.y\"",
          "1571:     {",
          "1572:         lex_env->inside_or++;",
          "1573:       }",
          "1577: #line 226 \"hex_grammar.y\"",
          "1578:     {",
          "1579:         (yyval.re_node) = (yyvsp[(3) - (4)].re_node);",
          "1580:         lex_env->inside_or--;",
          "1581:       }",
          "1584:   case 13:",
          "1585: #line 235 \"hex_grammar.y\"",
          "1587:         RE_NODE* re_any;",
          "1589:         if ((yyvsp[(2) - (3)].integer) <= 0)",
          "1590:         {",
          "1591:           yyerror(yyscanner, lex_env, \"invalid jump length\");",
          "1593:         }",
          "1595:         if (lex_env->inside_or && (yyvsp[(2) - (3)].integer) > STRING_CHAINING_THRESHOLD)",
          "",
          "[Removed Lines]",
          "1493:         }",
          "1500:           if (leftmost_concat != NULL)",
          "1504:           }",
          "1508:           }",
          "1509:         }",
          "1517:     break;",
          "1519:   case 6:",
          "1524:     break;",
          "1526:   case 7:",
          "1528:     {",
          "1529:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[(1) - (2)].re_node), (yyvsp[(2) - (2)].re_node));",
          "1536:     break;",
          "1538:   case 8:",
          "1543:     break;",
          "1545:   case 9:",
          "1551:     break;",
          "1562:           YYABORT;",
          "1567:     break;",
          "1574:     break;",
          "1576:   case 12:",
          "1582:     break;",
          "1586:     {",
          "1592:           YYABORT;",
          "",
          "[Added Lines]",
          "1391:             RE_NODE_CONCAT, (yyvsp[-2].re_node), leftmost_node);",
          "1398:             (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1402:             (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, new_concat, (yyvsp[0].re_node));",
          "1406:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1407:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1408:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1418:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1426:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1428:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1429:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1439:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1447:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1460:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1465:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1481:         (yyval.re_node) = (yyvsp[-1].re_node);",
          "1492:         if ((yyvsp[-1].integer) <= 0)",
          "1498:         if (lex_env->inside_or && (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1605:         ERROR_IF(re_any == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1607:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, re_any, NULL);",
          "1611:         (yyval.re_node)->start = (int) (yyvsp[(2) - (3)].integer);",
          "1612:         (yyval.re_node)->end = (int) (yyvsp[(2) - (3)].integer);",
          "1613:       }",
          "1616:   case 14:",
          "1617: #line 264 \"hex_grammar.y\"",
          "1618:     {",
          "1621:         if (lex_env->inside_or &&",
          "1622:             ((yyvsp[(2) - (5)].integer) > STRING_CHAINING_THRESHOLD ||",
          "1623:              (yyvsp[(4) - (5)].integer) > STRING_CHAINING_THRESHOLD) )",
          "",
          "[Removed Lines]",
          "1609:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1614:     break;",
          "1619:         RE_NODE* re_any;",
          "",
          "[Added Lines]",
          "1514:         (yyval.re_node)->start = (int) (yyvsp[-1].integer);",
          "1515:         (yyval.re_node)->end = (int) (yyvsp[-1].integer);",
          "1526:             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||",
          "1527:              (yyvsp[-1].integer) > STRING_CHAINING_THRESHOLD) )",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1626:               STR(STRING_CHAINING_THRESHOLD)",
          "1627:               \" now allowed inside alternation (|)\");",
          "1630:         }",
          "1632:         if ((yyvsp[(2) - (5)].integer) < 0 || (yyvsp[(4) - (5)].integer) < 0)",
          "1633:         {",
          "1634:           yyerror(yyscanner, lex_env, \"invalid negative jump length\");",
          "1636:         }",
          "1638:         if ((yyvsp[(2) - (5)].integer) > (yyvsp[(4) - (5)].integer))",
          "",
          "[Removed Lines]",
          "1629:           YYABORT;",
          "1635:           YYABORT;",
          "",
          "[Added Lines]",
          "1536:         if ((yyvsp[-3].integer) < 0 || (yyvsp[-1].integer) < 0)",
          "1542:         if ((yyvsp[-3].integer) > (yyvsp[-1].integer))",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1646:         ERROR_IF(re_any == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1648:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, re_any, NULL);",
          "1652:         (yyval.re_node)->start = (int) (yyvsp[(2) - (5)].integer);",
          "1653:         (yyval.re_node)->end = (int) (yyvsp[(4) - (5)].integer);",
          "1654:       }",
          "1657:   case 15:",
          "1658: #line 302 \"hex_grammar.y\"",
          "",
          "[Removed Lines]",
          "1650:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1655:     break;",
          "",
          "[Added Lines]",
          "1556:         (yyval.re_node)->start = (int) (yyvsp[-3].integer);",
          "1557:         (yyval.re_node)->end = (int) (yyvsp[-1].integer);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1663:         {",
          "1664:           yyerror(yyscanner, lex_env,",
          "1665:               \"unbounded jumps not allowed inside alternation (|)\");",
          "1667:         }",
          "1669:         if ((yyvsp[(2) - (4)].integer) < 0)",
          "",
          "[Removed Lines]",
          "1666:           YYABORT;",
          "",
          "[Added Lines]",
          "1574:         if ((yyvsp[-2].integer) < 0)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1677:         ERROR_IF(re_any == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1679:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, re_any, NULL);",
          "1681:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1683:         (yyval.re_node)->start = (int) (yyvsp[(2) - (4)].integer);",
          "1684:         (yyval.re_node)->end = INT_MAX;",
          "1685:       }",
          "1688:   case 16:",
          "1689: #line 330 \"hex_grammar.y\"",
          "",
          "[Removed Lines]",
          "1686:     break;",
          "",
          "[Added Lines]",
          "1588:         (yyval.re_node)->start = (int) (yyvsp[-2].integer);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1706:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1708:         (yyval.re_node)->start = 0;",
          "1709:         (yyval.re_node)->end = INT_MAX;",
          "1710:       }",
          "1714: #line 356 \"hex_grammar.y\"",
          "1715:     {",
          "1716:           (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1717:       }",
          "1720:   case 18:",
          "1721: #line 360 \"hex_grammar.y\"",
          "1723:         mark_as_not_fast_hex_regexp();",
          "1727:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (3)].re_node));",
          "1728:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(3) - (3)].re_node));",
          "1730:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1731:       }",
          "1734:   case 19:",
          "1735: #line 374 \"hex_grammar.y\"",
          "1736:     {",
          "1737:         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);",
          "1739:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1741:         (yyval.re_node)->value = (int) (yyvsp[(1) - (1)].integer);",
          "1742:       }",
          "1746: #line 382 \"hex_grammar.y\"",
          "1747:     {",
          "1748:         uint8_t mask = (uint8_t) ((yyvsp[(1) - (1)].integer) >> 8);",
          "",
          "[Removed Lines]",
          "1711:     break;",
          "1713:   case 17:",
          "1718:     break;",
          "1722:     {",
          "1725:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[(1) - (3)].re_node), (yyvsp[(3) - (3)].re_node));",
          "1732:     break;",
          "1743:     break;",
          "1745:   case 20:",
          "",
          "[Added Lines]",
          "1623:           (yyval.re_node) = (yyvsp[0].re_node);",
          "1633:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
          "1635:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1636:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1650:         (yyval.re_node)->value = (int) (yyvsp[0].integer);",
          "1658:         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1756:         else",
          "1757:         {",
          "1758:           (yyval.re_node) = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);",
          "1760:           ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1762:           (yyval.re_node)->value = (yyvsp[(1) - (1)].integer) & 0xFF;",
          "1763:           (yyval.re_node)->mask = mask;",
          "1764:         }",
          "1765:       }",
          "1766:     break;",
          "1770: #line 1768 \"hex_grammar.c\"",
          "1771:       default: break;",
          "1772:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1672:           (yyval.re_node)->value = (yyvsp[0].integer) & 0xFF;",
          "1684:      that yytoken be updated with the new translation.  We take the",
          "1685:      approach of translating immediately before every use of yytoken.",
          "1686:      One alternative is translating here after every semantic action,",
          "1687:      but that translation would be missed if the semantic action invokes",
          "1688:      YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or",
          "1689:      if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an",
          "1690:      incorrect destructor might then be invoked immediately.  In the",
          "1691:      case of YYERROR or YYBACKUP, subsequent parser actions might lead",
          "1692:      to an incorrect destructor call or verbose syntax error message",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1791:   else",
          "1792:     yystate = yydefgoto[yyn - YYNTOKENS];",
          "1794:   goto yynewstate;",
          "1798: | yyerrlab -- here on detecting error |",
          "1800: yyerrlab:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1718: | yyerrlab -- here on detecting error.  |",
          "1723:   yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1802:   if (!yyerrstatus)",
          "1803:     {",
          "1804:       ++yynerrs;",
          "1805: #if ! YYERROR_VERBOSE",
          "1835:      if (yysize != 0)",
          "1836:        goto yyexhaustedlab;",
          "1837:    }",
          "1838:       }",
          "",
          "[Removed Lines]",
          "1806:       yyerror (yyscanner, lex_env, YY_(\"syntax error\"));",
          "1807: #else",
          "1808:       {",
          "1809:  YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);",
          "1810:  if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)",
          "1811:    {",
          "1812:      YYSIZE_T yyalloc = 2 * yysize;",
          "1813:      if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))",
          "1814:        yyalloc = YYSTACK_ALLOC_MAXIMUM;",
          "1815:      if (yymsg != yymsgbuf)",
          "1816:        YYSTACK_FREE (yymsg);",
          "1817:      yymsg = (char *) YYSTACK_ALLOC (yyalloc);",
          "1818:      if (yymsg)",
          "1819:        yymsg_alloc = yyalloc;",
          "1820:      else",
          "1821:        {",
          "1822:   yymsg = yymsgbuf;",
          "1823:   yymsg_alloc = sizeof yymsgbuf;",
          "1824:        }",
          "1825:    }",
          "1827:  if (0 < yysize && yysize <= yymsg_alloc)",
          "1828:    {",
          "1829:      (void) yysyntax_error (yymsg, yystate, yychar);",
          "1830:      yyerror (yyscanner, lex_env, yymsg);",
          "1831:    }",
          "1832:  else",
          "1833:    {",
          "1834:      yyerror (yyscanner, lex_env, YY_(\"syntax error\"));",
          "",
          "[Added Lines]",
          "1732: # define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\",
          "1733:                                         yyssp, yytoken)",
          "1735:         char const *yymsgp = YY_(\"syntax error\");",
          "1736:         int yysyntax_error_status;",
          "1737:         yysyntax_error_status = YYSYNTAX_ERROR;",
          "1738:         if (yysyntax_error_status == 0)",
          "1739:           yymsgp = yymsg;",
          "1740:         else if (yysyntax_error_status == 1)",
          "1741:           {",
          "1742:             if (yymsg != yymsgbuf)",
          "1743:               YYSTACK_FREE (yymsg);",
          "1744:             yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);",
          "1745:             if (!yymsg)",
          "1746:               {",
          "1747:                 yymsg = yymsgbuf;",
          "1748:                 yymsg_alloc = sizeof yymsgbuf;",
          "1749:                 yysyntax_error_status = 2;",
          "1750:               }",
          "1751:             else",
          "1752:               {",
          "1753:                 yysyntax_error_status = YYSYNTAX_ERROR;",
          "1754:                 yymsgp = yymsg;",
          "1755:               }",
          "1756:           }",
          "1757:         yyerror (yyscanner, lex_env, yymsgp);",
          "1758:         if (yysyntax_error_status == 2)",
          "1759:           goto yyexhaustedlab;",
          "1761: # undef YYSYNTAX_ERROR",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1840:     }",
          "1844:   if (yyerrstatus == 3)",
          "1845:     {",
          "1852:    if (yychar == YYEOF)",
          "1858:         yytoken, &yylval, yyscanner, lex_env);",
          "1859:    yychar = YYEMPTY;",
          "1860:  }",
          "1861:     }",
          "",
          "[Removed Lines]",
          "1849:       if (yychar <= YYEOF)",
          "1850:  {",
          "1853:      YYABORT;",
          "1854:  }",
          "1855:       else",
          "1856:  {",
          "1857:    yydestruct (\"Error: discarding\",",
          "",
          "[Added Lines]",
          "1773:         {",
          "1775:           if (yychar == YYEOF)",
          "1776:             YYABORT;",
          "1777:         }",
          "1779:         {",
          "1780:           yydestruct (\"Error: discarding\",",
          "1781:                       yytoken, &yylval, yyscanner, lex_env);",
          "1782:           yychar = YYEMPTY;",
          "1783:         }",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1889: | yyerrlab1 -- common code for both syntax error and YYERROR.  |",
          "1891: yyerrlab1:",
          "1904:   break;",
          "1905:      }",
          "1906:  }",
          "1909:       if (yyssp == yyss)",
          "1910:  YYABORT;",
          "1913:       yydestruct (\"Error: popping\",",
          "1914:     yystos[yystate], yyvsp, yyscanner, lex_env);",
          "1915:       YYPOPSTACK (1);",
          "1916:       yystate = *yyssp;",
          "1920:   if (yyn == YYFINAL)",
          "1921:     YYACCEPT;",
          "",
          "[Removed Lines]",
          "1894:   for (;;)",
          "1895:     {",
          "1896:       yyn = yypact[yystate];",
          "1897:       if (yyn != YYPACT_NINF)",
          "1898:  {",
          "1899:    yyn += YYTERROR;",
          "1900:    if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)",
          "1901:      {",
          "1902:        yyn = yytable[yyn];",
          "1903:        if (0 < yyn)",
          "1917:       YY_STACK_PRINT (yyss, yyssp);",
          "1918:     }",
          "",
          "[Added Lines]",
          "1820:       if (!yypact_value_is_default (yyn))",
          "1821:         {",
          "1822:           yyn += YYTERROR;",
          "1823:           if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)",
          "1824:             {",
          "1825:               yyn = yytable[yyn];",
          "1826:               if (0 < yyn)",
          "1827:                 break;",
          "1828:             }",
          "1829:         }",
          "1833:         YYABORT;",
          "1837:                   yystos[yystate], yyvsp, yyscanner, lex_env);",
          "1843:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1845:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1941: | yyabortlab -- YYABORT comes here.  |",
          "1943: yyabortlab:",
          "1945:   goto yyreturn;",
          "1947: #ifndef yyoverflow",
          "",
          "[Removed Lines]",
          "1944:   yyresult = 1;",
          "",
          "[Added Lines]",
          "1869: #if !defined yyoverflow || YYERROR_VERBOSE",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1952:   yyerror (yyscanner, lex_env, YY_(\"memory exhausted\"));",
          "1953:   yyresult = 2;",
          "1959:      yydestruct (\"Cleanup: discarding lookahead\",",
          "1960:    yytoken, &yylval, yyscanner, lex_env);",
          "1963:   YYPOPSTACK (yylen);",
          "1964:   YY_STACK_PRINT (yyss, yyssp);",
          "1966:     {",
          "1967:       yydestruct (\"Cleanup: popping\",",
          "1968:     yystos[*yyssp], yyvsp, yyscanner, lex_env);",
          "",
          "[Removed Lines]",
          "1955: #endif",
          "1957: yyreturn:",
          "1958:   if (yychar != YYEOF && yychar != YYEMPTY)",
          "1965:   while (yyssp != yyss)",
          "",
          "[Added Lines]",
          "1880:   if (yychar != YYEMPTY)",
          "1881:     {",
          "1884:       yytoken = YYTRANSLATE (yychar);",
          "1885:       yydestruct (\"Cleanup: discarding lookahead\",",
          "1886:                   yytoken, &yylval, yyscanner, lex_env);",
          "1887:     }",
          "1895:                   yystos[*yyssp], yyvsp, yyscanner, lex_env);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1973:     YYSTACK_FREE (yyss);",
          "1974: #endif",
          "1975: #if YYERROR_VERBOSE",
          "1976:   if (yymsg != yymsgbuf)",
          "1978: #endif",
          "1980:   return YYID (yyresult);",
          "",
          "[Removed Lines]",
          "1977:     YYSTACK_FREE (yymsg);",
          "1981: }",
          "",
          "[Added Lines]",
          "1906:   return yyresult;",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.h||libyara/hex_grammar.h": [
          "File: libyara/hex_grammar.h -> libyara/hex_grammar.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:    it under the terms of the GNU General Public License as published by",
          "13:    This program is distributed in the hope that it will be useful,",
          "14:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "",
          "[Removed Lines]",
          "5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006",
          "6:    Free Software Foundation, Inc.",
          "8:    This program is free software; you can redistribute it and/or modify",
          "10:    the Free Software Foundation; either version 2, or (at your option)",
          "11:    any later version.",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:    GNU General Public License for more details.",
          "18:    You should have received a copy of the GNU General Public License",
          "24:    part or all of the Bison parser skeleton and distribute that work",
          "",
          "[Removed Lines]",
          "19:    along with this program; if not, write to the Free Software",
          "20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:    This special exception was added by the Free Software Foundation in",
          "37: #ifndef YYTOKENTYPE",
          "38: # define YYTOKENTYPE",
          "46: #endif",
          "48: #define _BYTE_ 258",
          "49: #define _MASKED_BYTE_ 259",
          "50: #define _NUMBER_ 260",
          "55: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "58: {",
          "59:   int64_t integer;",
          "60:   RE_NODE *re_node;",
          "67: # define YYSTYPE_IS_TRIVIAL 1",
          "68: #endif",
          "",
          "[Removed Lines]",
          "41:    enum yytokentype {",
          "42:      _BYTE_ = 258,",
          "43:      _MASKED_BYTE_ = 259,",
          "44:      _NUMBER_ = 260",
          "45:    };",
          "56: typedef union YYSTYPE",
          "57: #line 67 \"hex_grammar.y\"",
          "61: }",
          "63: #line 64 \"hex_grammar.h\"",
          "64:  YYSTYPE;",
          "66: # define YYSTYPE_IS_DECLARED 1",
          "",
          "[Added Lines]",
          "33: #ifndef YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED",
          "34: # define YY_HEX_YY_HEX_GRAMMAR_H_INCLUDED",
          "36: #ifndef YYDEBUG",
          "37: # define YYDEBUG 0",
          "38: #endif",
          "39: #if YYDEBUG",
          "40: extern int hex_yydebug;",
          "41: #endif",
          "46:   enum yytokentype",
          "47:   {",
          "48:     _BYTE_ = 258,",
          "49:     _MASKED_BYTE_ = 259,",
          "50:     _NUMBER_ = 260",
          "51:   };",
          "61: union YYSTYPE",
          "69: };",
          "71: typedef union YYSTYPE YYSTYPE;",
          "73: # define YYSTYPE_IS_DECLARED 1",
          "78: int hex_yyparse (void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env);",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.y||libyara/hex_grammar.y": [
          "File: libyara/hex_grammar.y -> libyara/hex_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: %}",
          "58: %name-prefix=\"hex_yy\"",
          "59: %pure-parser",
          "",
          "[Removed Lines]",
          "56: %debug",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/lexer.c||libyara/lexer.c": [
          "File: libyara/lexer.c -> libyara/lexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1476: case YY_STATE_EOF(regexp):",
          "1477: case YY_STATE_EOF(include):",
          "1478: case YY_STATE_EOF(comment):",
          "1480: {",
          "1482:   YR_COMPILER* compiler = yara_yyget_extra(yyscanner);",
          "",
          "[Removed Lines]",
          "1479: #line 271 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1479: #line 281 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1498:  YY_BREAK",
          "1499: case 44:",
          "1500: YY_RULE_SETUP",
          "1502: {",
          "1504:   yylval->c_string = yr_strdup(yytext);",
          "",
          "[Removed Lines]",
          "1501: #line 291 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1501: #line 301 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1514:  YY_BREAK",
          "1515: case 45:",
          "1516: YY_RULE_SETUP",
          "1518: {",
          "1520:   yylval->c_string = yr_strdup(yytext);",
          "",
          "[Removed Lines]",
          "1517: #line 305 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1517: #line 315 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1530:  YY_BREAK",
          "1531: case 46:",
          "1532: YY_RULE_SETUP",
          "1534: {",
          "1536:   yylval->c_string = yr_strdup(yytext);",
          "",
          "[Removed Lines]",
          "1533: #line 319 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1533: #line 329 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1547:  YY_BREAK",
          "1548: case 47:",
          "1549: YY_RULE_SETUP",
          "1551: {",
          "1553:   yylval->c_string = yr_strdup(yytext);",
          "",
          "[Removed Lines]",
          "1550: #line 334 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1550: #line 344 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1564:  YY_BREAK",
          "1565: case 48:",
          "1566: YY_RULE_SETUP",
          "1568: {",
          "1570:   yylval->c_string = yr_strdup(yytext);",
          "",
          "[Removed Lines]",
          "1567: #line 349 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1567: #line 359 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1581:  YY_BREAK",
          "1582: case 49:",
          "1583: YY_RULE_SETUP",
          "1585: {",
          "1587:   char* text = yytext;",
          "",
          "[Removed Lines]",
          "1584: #line 364 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1584: #line 374 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1622:  YY_BREAK",
          "1623: case 50:",
          "1624: YY_RULE_SETUP",
          "1626: {",
          "1628:   if (strlen(yytext) > 128)",
          "",
          "[Removed Lines]",
          "1625: #line 403 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1625: #line 413 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1643:  YY_BREAK",
          "1644: case 51:",
          "1645: YY_RULE_SETUP",
          "1647: {",
          "1649:   #ifdef _MSC_VER",
          "",
          "[Removed Lines]",
          "1646: #line 422 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1646: #line 432 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1665:  YY_BREAK",
          "1666: case 52:",
          "1667: YY_RULE_SETUP",
          "1669: {",
          "1670:   yylval->double_ = atof(yytext);",
          "1671:   return _DOUBLE_;",
          "",
          "[Removed Lines]",
          "1668: #line 441 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1668: #line 451 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1673:  YY_BREAK",
          "1674: case 53:",
          "1675: YY_RULE_SETUP",
          "1677: {",
          "1679:   yylval->integer = xtoi(yytext + 2);",
          "",
          "[Removed Lines]",
          "1676: #line 446 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1676: #line 456 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1682:  YY_BREAK",
          "1683: case 54:",
          "1684: YY_RULE_SETUP",
          "1688:   ALLOC_SIZED_STRING(s, yyextra->lex_buf_len);",
          "",
          "[Removed Lines]",
          "1685: #line 453 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1685: #line 463 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1698:  YY_BREAK",
          "1699: case 55:",
          "1700: YY_RULE_SETUP",
          "1702: {",
          "1704:   LEX_CHECK_SPACE_OK(\"\\t\", yyextra->lex_buf_len, LEX_BUF_SIZE);",
          "",
          "[Removed Lines]",
          "1701: #line 467 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1701: #line 477 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1708:  YY_BREAK",
          "1709: case 56:",
          "1710: YY_RULE_SETUP",
          "1712: {",
          "1714:   LEX_CHECK_SPACE_OK(\"\\n\", yyextra->lex_buf_len, LEX_BUF_SIZE);",
          "",
          "[Removed Lines]",
          "1711: #line 475 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1711: #line 485 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1718:  YY_BREAK",
          "1719: case 57:",
          "1720: YY_RULE_SETUP",
          "1722: {",
          "1724:   LEX_CHECK_SPACE_OK(\"\\\"\", yyextra->lex_buf_len, LEX_BUF_SIZE);",
          "",
          "[Removed Lines]",
          "1721: #line 483 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1721: #line 493 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1728:  YY_BREAK",
          "1729: case 58:",
          "1730: YY_RULE_SETUP",
          "1732: {",
          "1734:   LEX_CHECK_SPACE_OK(\"\\\\\", yyextra->lex_buf_len, LEX_BUF_SIZE);",
          "",
          "[Removed Lines]",
          "1731: #line 491 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1731: #line 501 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1738:  YY_BREAK",
          "1739: case 59:",
          "1740: YY_RULE_SETUP",
          "1742: {",
          "1744:    int result;",
          "",
          "[Removed Lines]",
          "1741: #line 499 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1741: #line 509 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1751:  YY_BREAK",
          "1752: case 60:",
          "1753: YY_RULE_SETUP",
          "1755: { YYTEXT_TO_BUFFER; }",
          "1756:  YY_BREAK",
          "1757: case 61:",
          "1759: YY_RULE_SETUP",
          "1761: {",
          "1763:   yyerror(yyscanner, compiler, \"unterminated string\");",
          "",
          "[Removed Lines]",
          "1754: #line 510 \"lexer.l\"",
          "1760: #line 513 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1754: #line 520 \"lexer.l\"",
          "1760: #line 523 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1767: case 62:",
          "1769: YY_RULE_SETUP",
          "1771: {",
          "1773:   yyerror(yyscanner, compiler, \"illegal escape sequence\");",
          "",
          "[Removed Lines]",
          "1770: #line 519 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1770: #line 529 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1775:  YY_BREAK",
          "1776: case 63:",
          "1777: YY_RULE_SETUP",
          "1779: {",
          "1781:   if (yyextra->lex_buf_len > 0)",
          "",
          "[Removed Lines]",
          "1778: #line 525 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1778: #line 535 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1803:  YY_BREAK",
          "1804: case 64:",
          "1805: YY_RULE_SETUP",
          "1807: {",
          "1809:   LEX_CHECK_SPACE_OK(\"/\", yyextra->lex_buf_len, LEX_BUF_SIZE);",
          "",
          "[Removed Lines]",
          "1806: #line 551 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1806: #line 561 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1813:  YY_BREAK",
          "1814: case 65:",
          "1815: YY_RULE_SETUP",
          "1817: {",
          "1819:   LEX_CHECK_SPACE_OK(\"\\\\.\", yyextra->lex_buf_len, LEX_BUF_SIZE);",
          "",
          "[Removed Lines]",
          "1816: #line 559 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1816: #line 569 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1824:  YY_BREAK",
          "1825: case 66:",
          "1826: YY_RULE_SETUP",
          "1828: { YYTEXT_TO_BUFFER; }",
          "1829:  YY_BREAK",
          "1830: case 67:",
          "1832: YY_RULE_SETUP",
          "1834: {",
          "1836:   yyerror(yyscanner, compiler, \"unterminated regular expression\");",
          "",
          "[Removed Lines]",
          "1827: #line 568 \"lexer.l\"",
          "1833: #line 571 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1827: #line 578 \"lexer.l\"",
          "1833: #line 581 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1839:  YY_BREAK",
          "1840: case 68:",
          "1841: YY_RULE_SETUP",
          "1843: {",
          "1845:   yyextra->lex_buf_ptr = yyextra->lex_buf;",
          "",
          "[Removed Lines]",
          "1842: #line 578 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1842: #line 588 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1849:  YY_BREAK",
          "1850: case 69:",
          "1851: YY_RULE_SETUP",
          "1853: {",
          "1855:   yyextra->lex_buf_ptr = yyextra->lex_buf;",
          "",
          "[Removed Lines]",
          "1852: #line 586 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1852: #line 596 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1860: case 70:",
          "1862: YY_RULE_SETUP",
          "1864: {",
          "",
          "[Removed Lines]",
          "1863: #line 594 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1863: #line 604 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1876: case 71:",
          "1878: YY_RULE_SETUP",
          "1881:  YY_BREAK",
          "1882: case 72:",
          "1883: YY_RULE_SETUP",
          "1885: {",
          "1887:   if (yytext[0] >= 32 && yytext[0] < 127)",
          "",
          "[Removed Lines]",
          "1879: #line 607 \"lexer.l\"",
          "1884: #line 609 \"lexer.l\"",
          "",
          "[Added Lines]",
          "1879: #line 617 \"lexer.l\"",
          "1884: #line 619 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1897:  YY_BREAK",
          "1898: case 73:",
          "1899: YY_RULE_SETUP",
          "1901: ECHO;",
          "1902:  YY_BREAK",
          "1905:  case YY_END_OF_BUFFER:",
          "1906:   {",
          "",
          "[Removed Lines]",
          "1900: #line 622 \"lexer.l\"",
          "1903: #line 1894 \"lexer.c\"",
          "",
          "[Added Lines]",
          "1900: #line 632 \"lexer.l\"",
          "1903: #line 1904 \"lexer.c\"",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "3050: #define YYTABLES_NAME \"yytables\"",
          "",
          "[Removed Lines]",
          "3052: #line 622 \"lexer.l\"",
          "",
          "[Added Lines]",
          "3052: #line 632 \"lexer.l\"",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "3181:   yara_yylex_init(&yyscanner);",
          "3185:   yara_yyset_extra(compiler,yyscanner);",
          "3187:   yara_yy_scan_string(rules_string,yyscanner);",
          "3189:   yara_yyset_lineno(1,yyscanner);",
          "3190:   yyparse(yyscanner, compiler);",
          "3191:   yara_yylex_destroy(yyscanner);",
          "",
          "[Removed Lines]",
          "3183:   yara_yyset_debug(1,yyscanner);",
          "",
          "[Added Lines]",
          "3183:   #if YYDEBUG",
          "3184:   yydebug = 1;",
          "3185:   #endif",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "3208:   yara_yylex_init(&yyscanner);",
          "3210:   #if YYDEBUG",
          "3212:   #endif",
          "3216:   yara_yyset_in(rules_file,yyscanner);",
          "3217:   yara_yyset_extra(compiler,yyscanner);",
          "3218:   yyparse(yyscanner, compiler);",
          "",
          "[Removed Lines]",
          "3211:   printf(\"debug enabled\");",
          "3214:   yara_yyset_debug(1,yyscanner);",
          "",
          "[Added Lines]",
          "3211:   yydebug = 1;",
          "",
          "---------------"
        ],
        "libyara/lexer.l||libyara/lexer.l": [
          "File: libyara/lexer.l -> libyara/lexer.l",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:   yylex_init(&yyscanner);",
          "763:   yyset_extra(compiler, yyscanner);",
          "765:   yy_scan_string(rules_string, yyscanner);",
          "767:   yyset_lineno(1, yyscanner);",
          "768:   yyparse(yyscanner, compiler);",
          "769:   yylex_destroy(yyscanner);",
          "",
          "[Removed Lines]",
          "761:   yyset_debug(1, yyscanner);",
          "",
          "[Added Lines]",
          "761:   #if YYDEBUG",
          "762:   yydebug = 1;",
          "763:   #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "786:   yylex_init(&yyscanner);",
          "788:   #if YYDEBUG",
          "790:   #endif",
          "794:   yyset_in(rules_file, yyscanner);",
          "795:   yyset_extra(compiler, yyscanner);",
          "796:   yyparse(yyscanner, compiler);",
          "",
          "[Removed Lines]",
          "789:   printf(\"debug enabled\");",
          "792:   yyset_debug(1, yyscanner);",
          "",
          "[Added Lines]",
          "789:   yydebug = 1;",
          "",
          "---------------"
        ],
        "libyara/re_grammar.c||libyara/re_grammar.c": [
          "File: libyara/re_grammar.c -> libyara/re_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:    it under the terms of the GNU General Public License as published by",
          "13:    This program is distributed in the hope that it will be useful,",
          "14:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "",
          "[Removed Lines]",
          "5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006",
          "6:    Free Software Foundation, Inc.",
          "8:    This program is free software; you can redistribute it and/or modify",
          "10:    the Free Software Foundation; either version 2, or (at your option)",
          "11:    any later version.",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:    GNU General Public License for more details.",
          "18:    You should have received a copy of the GNU General Public License",
          "24:    part or all of the Bison parser skeleton and distribute that work",
          "",
          "[Removed Lines]",
          "19:    along with this program; if not, write to the Free Software",
          "20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: #define YYBISON 1",
          "53: #define YYSKELETON_NAME \"yacc.c\"",
          "",
          "[Removed Lines]",
          "50: #define YYBISON_VERSION \"2.3\"",
          "",
          "[Added Lines]",
          "47: #define YYBISON_VERSION \"3.0.4\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56: #define YYPURE 1",
          "112: #include <stdint.h>",
          "",
          "[Removed Lines]",
          "59: #define YYLSP_NEEDED 0",
          "62: #define yyparse re_yyparse",
          "63: #define yylex   re_yylex",
          "64: #define yyerror re_yyerror",
          "65: #define yylval  re_yylval",
          "66: #define yychar  re_yychar",
          "67: #define yydebug re_yydebug",
          "68: #define yynerrs re_yynerrs",
          "72: #ifndef YYTOKENTYPE",
          "73: # define YYTOKENTYPE",
          "76:    enum yytokentype {",
          "77:      _CHAR_ = 258,",
          "78:      _ANY_ = 259,",
          "79:      _RANGE_ = 260,",
          "80:      _CLASS_ = 261,",
          "81:      _WORD_CHAR_ = 262,",
          "82:      _NON_WORD_CHAR_ = 263,",
          "83:      _SPACE_ = 264,",
          "84:      _NON_SPACE_ = 265,",
          "85:      _DIGIT_ = 266,",
          "86:      _NON_DIGIT_ = 267,",
          "87:      _WORD_BOUNDARY_ = 268,",
          "88:      _NON_WORD_BOUNDARY_ = 269",
          "89:    };",
          "90: #endif",
          "92: #define _CHAR_ 258",
          "93: #define _ANY_ 259",
          "94: #define _RANGE_ 260",
          "95: #define _CLASS_ 261",
          "96: #define _WORD_CHAR_ 262",
          "97: #define _NON_WORD_CHAR_ 263",
          "98: #define _SPACE_ 264",
          "99: #define _NON_SPACE_ 265",
          "100: #define _DIGIT_ 266",
          "101: #define _NON_DIGIT_ 267",
          "102: #define _WORD_BOUNDARY_ 268",
          "103: #define _NON_WORD_BOUNDARY_ 269",
          "109: #line 17 \"re_grammar.y\"",
          "",
          "[Added Lines]",
          "56: #define YYPUSH 0",
          "59: #define YYPULL 1",
          "63: #define yyparse         re_yyparse",
          "64: #define yylex           re_yylex",
          "65: #define yyerror         re_yyerror",
          "66: #define yydebug         re_yydebug",
          "67: #define yynerrs         re_yynerrs",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:     } \\",
          "148: #ifdef YYERROR_VERBOSE",
          "",
          "[Removed Lines]",
          "143: #ifndef YYDEBUG",
          "144: # define YYDEBUG 1",
          "145: #endif",
          "",
          "[Added Lines]",
          "105: # ifndef YY_NULLPTR",
          "106: #  if defined __cplusplus && 201103L <= __cplusplus",
          "107: #   define YY_NULLPTR nullptr",
          "108: #  else",
          "109: #   define YY_NULLPTR 0",
          "110: #  endif",
          "111: # endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152: # define YYERROR_VERBOSE 0",
          "153: #endif",
          "158: #endif",
          "160: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "163: {",
          "164:   int integer;",
          "165:   uint32_t range;",
          "166:   RE_NODE* re_node;",
          "167:   uint8_t* class_vector;",
          "174: # define YYSTYPE_IS_TRIVIAL 1",
          "175: #endif",
          "185: #ifdef short",
          "186: # undef short",
          "",
          "[Removed Lines]",
          "156: #ifndef YYTOKEN_TABLE",
          "157: # define YYTOKEN_TABLE 0",
          "161: typedef union YYSTYPE",
          "162: #line 60 \"re_grammar.y\"",
          "168: }",
          "170: #line 171 \"re_grammar.c\"",
          "171:  YYSTYPE;",
          "173: # define YYSTYPE_IS_DECLARED 1",
          "183: #line 184 \"re_grammar.c\"",
          "",
          "[Added Lines]",
          "123: #ifndef YY_RE_YY_RE_GRAMMAR_H_INCLUDED",
          "124: # define YY_RE_YY_RE_GRAMMAR_H_INCLUDED",
          "126: #ifndef YYDEBUG",
          "127: # define YYDEBUG 0",
          "128: #endif",
          "129: #if YYDEBUG",
          "130: extern int re_yydebug;",
          "134: #ifndef YYTOKENTYPE",
          "135: # define YYTOKENTYPE",
          "136:   enum yytokentype",
          "137:   {",
          "138:     _CHAR_ = 258,",
          "139:     _ANY_ = 259,",
          "140:     _RANGE_ = 260,",
          "141:     _CLASS_ = 261,",
          "142:     _WORD_CHAR_ = 262,",
          "143:     _NON_WORD_CHAR_ = 263,",
          "144:     _SPACE_ = 264,",
          "145:     _NON_SPACE_ = 265,",
          "146:     _DIGIT_ = 266,",
          "147:     _NON_DIGIT_ = 267,",
          "148:     _WORD_BOUNDARY_ = 268,",
          "149:     _NON_WORD_BOUNDARY_ = 269",
          "150:   };",
          "151: #endif",
          "153: #define _CHAR_ 258",
          "154: #define _ANY_ 259",
          "155: #define _RANGE_ 260",
          "156: #define _CLASS_ 261",
          "157: #define _WORD_CHAR_ 262",
          "158: #define _NON_WORD_CHAR_ 263",
          "159: #define _SPACE_ 264",
          "160: #define _NON_SPACE_ 265",
          "161: #define _DIGIT_ 266",
          "162: #define _NON_DIGIT_ 267",
          "163: #define _WORD_BOUNDARY_ 268",
          "164: #define _NON_WORD_BOUNDARY_ 269",
          "169: union YYSTYPE",
          "179: };",
          "181: typedef union YYSTYPE YYSTYPE;",
          "183: # define YYSTYPE_IS_DECLARED 1",
          "188: int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "195: #ifdef YYTYPE_INT8",
          "196: typedef YYTYPE_INT8 yytype_int8;",
          "200: #else",
          "202: #endif",
          "204: #ifdef YYTYPE_UINT16",
          "",
          "[Removed Lines]",
          "197: #elif (defined __STDC__ || defined __C99__FUNC__ \\",
          "198:      || defined __cplusplus || defined _MSC_VER)",
          "199: typedef signed char yytype_int8;",
          "201: typedef short int yytype_int8;",
          "",
          "[Added Lines]",
          "209: typedef signed char yytype_int8;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "218: #  define YYSIZE_T __SIZE_TYPE__",
          "219: # elif defined size_t",
          "220: #  define YYSIZE_T size_t",
          "224: #  define YYSIZE_T size_t",
          "225: # else",
          "",
          "[Removed Lines]",
          "221: # elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \\",
          "222:      || defined __cplusplus || defined _MSC_VER)",
          "",
          "[Added Lines]",
          "229: # elif ! defined YYSIZE_T",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "233: # if defined YYENABLE_NLS && YYENABLE_NLS",
          "234: #  if ENABLE_NLS",
          "237: #  endif",
          "238: # endif",
          "239: # ifndef YY_",
          "241: # endif",
          "242: #endif",
          "245: #if ! defined lint || defined __GNUC__",
          "247: #else",
          "249: #endif",
          "254: #else",
          "263: #endif",
          "267: #endif",
          "269: #if ! defined yyoverflow || YYERROR_VERBOSE",
          "",
          "[Removed Lines]",
          "236: #   define YY_(msgid) dgettext (\"bison-runtime\", msgid)",
          "240: #  define YY_(msgid) msgid",
          "246: # define YYUSE(e) ((void) (e))",
          "252: #ifndef lint",
          "253: # define YYID(n) (n)",
          "255: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "256:      || defined __cplusplus || defined _MSC_VER)",
          "257: static int",
          "258: YYID (int i)",
          "259: #else",
          "260: static int",
          "261: YYID (i)",
          "262:     int i;",
          "264: {",
          "265:   return i;",
          "266: }",
          "",
          "[Added Lines]",
          "243: #   define YY_(Msgid) dgettext (\"bison-runtime\", Msgid)",
          "247: #  define YY_(Msgid) Msgid",
          "248: # endif",
          "249: #endif",
          "251: #ifndef YY_ATTRIBUTE",
          "252: # if (defined __GNUC__                                               \\",
          "253:       && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \\",
          "254:      || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C",
          "255: #  define YY_ATTRIBUTE(Spec) __attribute__(Spec)",
          "256: # else",
          "258: # endif",
          "259: #endif",
          "261: #ifndef YY_ATTRIBUTE_PURE",
          "262: # define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))",
          "263: #endif",
          "265: #ifndef YY_ATTRIBUTE_UNUSED",
          "266: # define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))",
          "267: #endif",
          "269: #if !defined _Noreturn \\",
          "270:      && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)",
          "271: # if defined _MSC_VER && 1200 <= _MSC_VER",
          "272: #  define _Noreturn __declspec (noreturn)",
          "273: # else",
          "274: #  define _Noreturn YY_ATTRIBUTE ((__noreturn__))",
          "280: # define YYUSE(E) ((void) (E))",
          "285: #if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__",
          "287: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \\",
          "288:     _Pragma (\"GCC diagnostic push\") \\",
          "289:     _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\",
          "290:     _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")",
          "291: # define YY_IGNORE_MAYBE_UNINITIALIZED_END \\",
          "292:     _Pragma (\"GCC diagnostic pop\")",
          "294: # define YY_INITIAL_VALUE(Value) Value",
          "296: #ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "297: # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "298: # define YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "299: #endif",
          "300: #ifndef YY_INITIAL_VALUE",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "283: #    define alloca _alloca",
          "284: #   else",
          "285: #    define YYSTACK_ALLOC alloca",
          "291: #     endif",
          "292: #    endif",
          "293: #   endif",
          "",
          "[Removed Lines]",
          "286: #    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "287:      || defined __cplusplus || defined _MSC_VER)",
          "289: #     ifndef _STDLIB_H",
          "290: #      define _STDLIB_H 1",
          "",
          "[Added Lines]",
          "322: #    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS",
          "325: #     ifndef EXIT_SUCCESS",
          "326: #      define EXIT_SUCCESS 0",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "295: # endif",
          "297: # ifdef YYSTACK_ALLOC",
          "300: #  ifndef YYSTACK_ALLOC_MAXIMUM",
          "302:        and a page size can be as small as 4096 bytes.  So we cannot safely",
          "",
          "[Removed Lines]",
          "299: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))",
          "",
          "[Added Lines]",
          "335: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "310: #  ifndef YYSTACK_ALLOC_MAXIMUM",
          "311: #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM",
          "312: #  endif",
          "314:        && ! ((defined YYMALLOC || defined malloc) \\",
          "319: #   endif",
          "320: #  endif",
          "321: #  ifndef YYMALLOC",
          "322: #   define YYMALLOC malloc",
          "326: #   endif",
          "327: #  endif",
          "328: #  ifndef YYFREE",
          "329: #   define YYFREE free",
          "333: #   endif",
          "334: #  endif",
          "",
          "[Removed Lines]",
          "313: #  if (defined __cplusplus && ! defined _STDLIB_H \\",
          "315:       && (defined YYFREE || defined free)))",
          "317: #   ifndef _STDLIB_H",
          "318: #    define _STDLIB_H 1",
          "323: #   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "324:      || defined __cplusplus || defined _MSC_VER)",
          "330: #   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \\",
          "331:      || defined __cplusplus || defined _MSC_VER)",
          "",
          "[Added Lines]",
          "349: #  if (defined __cplusplus && ! defined EXIT_SUCCESS \\",
          "351:              && (defined YYFREE || defined free)))",
          "353: #   ifndef EXIT_SUCCESS",
          "354: #    define EXIT_SUCCESS 0",
          "359: #   if ! defined malloc && ! defined EXIT_SUCCESS",
          "365: #   if ! defined free && ! defined EXIT_SUCCESS",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "339: #if (! defined yyoverflow \\",
          "340:      && (! defined __cplusplus \\",
          "344: union yyalloc",
          "345: {",
          "351: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)",
          "",
          "[Removed Lines]",
          "341:   || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))",
          "346:   yytype_int16 yyss;",
          "347:   YYSTYPE yyvs;",
          "348:   };",
          "",
          "[Added Lines]",
          "375:          || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))",
          "380:   yytype_int16 yyss_alloc;",
          "381:   YYSTYPE yyvs_alloc;",
          "382: };",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "356:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \\",
          "357:       + YYSTACK_GAP_MAXIMUM)",
          "378:    local variables YYSIZE and YYSTACKSIZE give the old and new number of",
          "379:    elements in the stack, and YYPTR gives the new location of the",
          "380:    stack.  Advance YYPTR to a properly aligned location for the next",
          "393: #endif",
          "396: #define YYFINAL  22",
          "",
          "[Removed Lines]",
          "361: # ifndef YYCOPY",
          "362: #  if defined __GNUC__ && 1 < __GNUC__",
          "363: #   define YYCOPY(To, From, Count) \\",
          "364:       __builtin_memcpy (To, From, (Count) * sizeof (*(From)))",
          "365: #  else",
          "366: #   define YYCOPY(To, From, Count)  \\",
          "367:       do     \\",
          "368:  {     \\",
          "369:    YYSIZE_T yyi;    \\",
          "370:    for (yyi = 0; yyi < (Count); yyi++) \\",
          "371:      (To)[yyi] = (From)[yyi];  \\",
          "372:  }     \\",
          "373:       while (YYID (0))",
          "374: #  endif",
          "375: # endif",
          "382: # define YYSTACK_RELOCATE(Stack)     \\",
          "383:     do         \\",
          "384:       {         \\",
          "385:  YYSIZE_T yynewbytes;      \\",
          "386:  YYCOPY (&yyptr->Stack, Stack, yysize);    \\",
          "387:  Stack = &yyptr->Stack;      \\",
          "388:  yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "389:  yyptr += yynewbytes / sizeof (*yyptr);    \\",
          "390:       }         \\",
          "391:     while (YYID (0))",
          "",
          "[Added Lines]",
          "393: # define YYCOPY_NEEDED 1",
          "400: # define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \\",
          "401:     do                                                                  \\",
          "402:       {                                                                 \\",
          "403:         YYSIZE_T yynewbytes;                                            \\",
          "404:         YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \\",
          "405:         Stack = &yyptr->Stack_alloc;                                    \\",
          "406:         yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \\",
          "407:         yyptr += yynewbytes / sizeof (*yyptr);                          \\",
          "408:       }                                                                 \\",
          "409:     while (0)",
          "413: #if defined YYCOPY_NEEDED && YYCOPY_NEEDED",
          "416: # ifndef YYCOPY",
          "417: #  if defined __GNUC__ && 1 < __GNUC__",
          "418: #   define YYCOPY(Dst, Src, Count) \\",
          "419:       __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))",
          "420: #  else",
          "421: #   define YYCOPY(Dst, Src, Count)              \\",
          "422:       do                                        \\",
          "423:         {                                       \\",
          "424:           YYSIZE_T yyi;                         \\",
          "425:           for (yyi = 0; yyi < (Count); yyi++)   \\",
          "426:             (Dst)[yyi] = (Src)[yyi];            \\",
          "427:         }                                       \\",
          "428:       while (0)",
          "429: #  endif",
          "430: # endif",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "403: #define YYNNTS  6",
          "405: #define YYNRULES  31",
          "407: #define YYNSTATES  35",
          "410: #define YYUNDEFTOK  2",
          "411: #define YYMAXUTOK   269",
          "414:   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)",
          "417: static const yytype_uint8 yytranslate[] =",
          "418: {",
          "419:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,",
          "",
          "[Removed Lines]",
          "413: #define YYTRANSLATE(YYX)      \\",
          "",
          "[Added Lines]",
          "452: #define YYTRANSLATE(YYX)                                                \\",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "446: };",
          "448: #if YYDEBUG",
          "474: static const yytype_uint16 yyrline[] =",
          "475: {",
          "480: };",
          "481: #endif",
          "486: static const char *const yytname[] =",
          "",
          "[Removed Lines]",
          "451: static const yytype_uint8 yyprhs[] =",
          "452: {",
          "453:        0,     0,     3,     5,     7,     9,    13,    16,    18,    21,",
          "454:       24,    28,    31,    35,    38,    42,    45,    49,    51,    53,",
          "455:       55,    57,    59,    63,    65,    67,    69,    71,    73,    75,",
          "456:       77,    79",
          "457: };",
          "460: static const yytype_int8 yyrhs[] =",
          "461: {",
          "462:       25,     0,    -1,    26,    -1,     1,    -1,    27,    -1,    26,",
          "463:       15,    27,    -1,    26,    15,    -1,    28,    -1,    27,    28,",
          "464:       -1,    29,    16,    -1,    29,    16,    17,    -1,    29,    18,",
          "465:       -1,    29,    18,    17,    -1,    29,    17,    -1,    29,    17,",
          "466:       17,    -1,    29,     5,    -1,    29,     5,    17,    -1,    29,",
          "467:       -1,    13,    -1,    14,    -1,    19,    -1,    20,    -1,    21,",
          "468:       26,    22,    -1,    23,    -1,     3,    -1,     7,    -1,     8,",
          "469:       -1,     9,    -1,    10,    -1,    11,    -1,    12,    -1,     6,",
          "470:       -1",
          "471: };",
          "476:        0,    91,    91,    96,   100,   104,   113,   127,   131,   142,",
          "477:      152,   164,   174,   186,   199,   213,   226,   240,   244,   250,",
          "478:      256,   262,   271,   275,   281,   289,   295,   301,   307,   313,",
          "479:      319,   325",
          "483: #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE",
          "",
          "[Added Lines]",
          "492:        0,    89,    89,    94,    98,   102,   111,   125,   129,   140,",
          "493:      150,   162,   172,   184,   197,   211,   224,   238,   242,   248,",
          "494:      254,   260,   269,   273,   279,   287,   293,   299,   305,   311,",
          "495:      317,   323",
          "499: #if YYDEBUG || YYERROR_VERBOSE || 0",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "489:   \"_WORD_CHAR_\", \"_NON_WORD_CHAR_\", \"_SPACE_\", \"_NON_SPACE_\", \"_DIGIT_\",",
          "490:   \"_NON_DIGIT_\", \"_WORD_BOUNDARY_\", \"_NON_WORD_BOUNDARY_\", \"'|'\", \"'*'\",",
          "491:   \"'?'\", \"'+'\", \"'^'\", \"'$'\", \"'('\", \"')'\", \"'.'\", \"$accept\", \"re\",",
          "493: };",
          "494: #endif",
          "496: # ifdef YYPRINT",
          "499: static const yytype_uint16 yytoknum[] =",
          "500: {",
          "501:        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,",
          "",
          "[Removed Lines]",
          "492:   \"alternative\", \"concatenation\", \"repeat\", \"single\", 0",
          "",
          "[Added Lines]",
          "508:   \"alternative\", \"concatenation\", \"repeat\", \"single\", YY_NULLPTR",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "504: };",
          "505: # endif",
          "518: {",
          "523: };",
          "528: static const yytype_uint8 yydefact[] =",
          "529: {",
          "530:        0,     3,    24,    31,    25,    26,    27,    28,    29,    30,",
          "",
          "[Removed Lines]",
          "508: static const yytype_uint8 yyr1[] =",
          "509: {",
          "510:        0,    24,    25,    25,    26,    26,    26,    27,    27,    28,",
          "511:       28,    28,    28,    28,    28,    28,    28,    28,    28,    28,",
          "512:       28,    28,    29,    29,    29,    29,    29,    29,    29,    29,",
          "513:       29,    29",
          "514: };",
          "517: static const yytype_uint8 yyr2[] =",
          "519:        0,     2,     1,     1,     1,     3,     2,     1,     2,     2,",
          "520:        3,     2,     3,     2,     3,     2,     3,     1,     1,     1,",
          "521:        1,     1,     3,     1,     1,     1,     1,     1,     1,     1,",
          "522:        1,     1",
          "526:    STATE-NUM when YYTABLE doesn't specify something else to do.  Zero",
          "",
          "[Added Lines]",
          "523: #define YYPACT_NINF -12",
          "525: #define yypact_value_is_default(Yystate) \\",
          "526:   (!!((Yystate) == (-12)))",
          "528: #define YYTABLE_NINF -1",
          "530: #define yytable_value_is_error(Yytable_value) \\",
          "531:   0",
          "535: static const yytype_int8 yypact[] =",
          "537:       -1,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,",
          "538:      -12,   -12,   -12,   -12,    18,   -12,     1,   -11,    18,   -12,",
          "539:       -2,    21,   -12,    18,   -12,     0,    16,    17,    23,   -12,",
          "540:       18,   -12,   -12,   -12,   -12",
          "544:      Performed when YYTABLE does not specify something else to do.  Zero",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "533:        5,    16,    10,    14,    12",
          "534: };",
          "546: {",
          "551: };",
          "555: {",
          "557: };",
          "564: static const yytype_uint8 yytable[] =",
          "565: {",
          "566:        1,    22,     2,    25,    23,     3,     4,     5,     6,     7,",
          "",
          "[Removed Lines]",
          "537: static const yytype_int8 yydefgoto[] =",
          "538: {",
          "539:       -1,    16,    17,    18,    19,    20",
          "540: };",
          "544: #define YYPACT_NINF -12",
          "545: static const yytype_int8 yypact[] =",
          "547:       -1,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,",
          "548:      -12,   -12,   -12,   -12,    18,   -12,     1,   -11,    18,   -12,",
          "549:       -2,    21,   -12,    18,   -12,     0,    16,    17,    23,   -12,",
          "550:       18,   -12,   -12,   -12,   -12",
          "554: static const yytype_int8 yypgoto[] =",
          "556:      -12,   -12,    28,    22,     5,   -12",
          "560:    positive, shift that token.  If negative, reduce the rule which",
          "561:    number is the opposite.  If zero, do what YYDEFACT says.",
          "563: #define YYTABLE_NINF -1",
          "",
          "[Added Lines]",
          "555: static const yytype_int8 yypgoto[] =",
          "557:      -12,   -12,    28,    22,     5,   -12",
          "561: static const yytype_int8 yydefgoto[] =",
          "563:       -1,    16,    17,    18,    19,    20",
          "567:      positive, shift that token.  If negative, reduce the rule whose",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "589:       27,    17,    17,    17,    17",
          "590: };",
          "608: #define YYRECOVERING()  (!!yyerrstatus)",
          "622:       yyerror (yyscanner, lex_env, YY_(\"syntax error: cannot back up\")); \\",
          "683: #if YYDEBUG",
          "",
          "[Removed Lines]",
          "592: #define yyerrok  (yyerrstatus = 0)",
          "593: #define yyclearin (yychar = YYEMPTY)",
          "594: #define YYEMPTY  (-2)",
          "595: #define YYEOF  0",
          "597: #define YYACCEPT goto yyacceptlab",
          "598: #define YYABORT  goto yyabortlab",
          "599: #define YYERROR  goto yyerrorlab",
          "603:    to ease the transition to the new meaning of YYERROR, for GCC.",
          "606: #define YYFAIL  goto yyerrlab",
          "610: #define YYBACKUP(Token, Value)     \\",
          "611: do        \\",
          "612:   if (yychar == YYEMPTY && yylen == 1)    \\",
          "613:     {        \\",
          "614:       yychar = (Token);      \\",
          "615:       yylval = (Value);      \\",
          "616:       yytoken = YYTRANSLATE (yychar);    \\",
          "617:       YYPOPSTACK (1);      \\",
          "618:       goto yybackup;      \\",
          "619:     }        \\",
          "620:   else        \\",
          "621:     {        \\",
          "623:       YYERROR;       \\",
          "624:     }        \\",
          "625: while (YYID (0))",
          "628: #define YYTERROR 1",
          "629: #define YYERRCODE 256",
          "633:    If N is 0, then set CURRENT to the empty location which ends",
          "636: #define YYRHSLOC(Rhs, K) ((Rhs)[K])",
          "637: #ifndef YYLLOC_DEFAULT",
          "638: # define YYLLOC_DEFAULT(Current, Rhs, N)    \\",
          "639:     do         \\",
          "640:       if (YYID (N))                                                    \\",
          "641:  {        \\",
          "642:    (Current).first_line   = YYRHSLOC (Rhs, 1).first_line; \\",
          "643:    (Current).first_column = YYRHSLOC (Rhs, 1).first_column; \\",
          "644:    (Current).last_line    = YYRHSLOC (Rhs, N).last_line;  \\",
          "645:    (Current).last_column  = YYRHSLOC (Rhs, N).last_column; \\",
          "646:  }        \\",
          "647:       else        \\",
          "648:  {        \\",
          "649:    (Current).first_line   = (Current).last_line   =  \\",
          "650:      YYRHSLOC (Rhs, 0).last_line;    \\",
          "651:    (Current).first_column = (Current).last_column =  \\",
          "652:      YYRHSLOC (Rhs, 0).last_column;    \\",
          "653:  }        \\",
          "654:     while (YYID (0))",
          "655: #endif",
          "659:    This macro was not mandated originally: define only if we know",
          "662: #ifndef YY_LOCATION_PRINT",
          "663: # if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL",
          "664: #  define YY_LOCATION_PRINT(File, Loc)   \\",
          "665:      fprintf (File, \"%d.%d-%d.%d\",   \\",
          "666:        (Loc).first_line, (Loc).first_column, \\",
          "667:        (Loc).last_line,  (Loc).last_column)",
          "668: # else",
          "669: #  define YY_LOCATION_PRINT(File, Loc) ((void) 0)",
          "670: # endif",
          "671: #endif",
          "676: #ifdef YYLEX_PARAM",
          "677: # define YYLEX yylex (&yylval, YYLEX_PARAM)",
          "678: #else",
          "679: # define YYLEX yylex (&yylval, yyscanner, lex_env)",
          "680: #endif",
          "",
          "[Added Lines]",
          "598: static const yytype_uint8 yyr1[] =",
          "599: {",
          "600:        0,    24,    25,    25,    26,    26,    26,    27,    27,    28,",
          "601:       28,    28,    28,    28,    28,    28,    28,    28,    28,    28,",
          "602:       28,    28,    29,    29,    29,    29,    29,    29,    29,    29,",
          "603:       29,    29",
          "604: };",
          "607: static const yytype_uint8 yyr2[] =",
          "608: {",
          "609:        0,     2,     1,     1,     1,     3,     2,     1,     2,     2,",
          "610:        3,     2,     3,     2,     3,     2,     3,     1,     1,     1,",
          "611:        1,     1,     3,     1,     1,     1,     1,     1,     1,     1,",
          "612:        1,     1",
          "613: };",
          "616: #define yyerrok         (yyerrstatus = 0)",
          "617: #define yyclearin       (yychar = YYEMPTY)",
          "618: #define YYEMPTY         (-2)",
          "619: #define YYEOF           0",
          "621: #define YYACCEPT        goto yyacceptlab",
          "622: #define YYABORT         goto yyabortlab",
          "623: #define YYERROR         goto yyerrorlab",
          "628: #define YYBACKUP(Token, Value)                                  \\",
          "629: do                                                              \\",
          "630:   if (yychar == YYEMPTY)                                        \\",
          "631:     {                                                           \\",
          "632:       yychar = (Token);                                         \\",
          "633:       yylval = (Value);                                         \\",
          "634:       YYPOPSTACK (yylen);                                       \\",
          "635:       yystate = *yyssp;                                         \\",
          "636:       goto yybackup;                                            \\",
          "637:     }                                                           \\",
          "638:   else                                                          \\",
          "639:     {                                                           \\",
          "641:       YYERROR;                                                  \\",
          "642:     }                                                           \\",
          "643: while (0)",
          "646: #define YYTERROR        1",
          "647: #define YYERRCODE       256",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "687: #  define YYFPRINTF fprintf",
          "688: # endif",
          "715: static void",
          "716: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)",
          "726: {",
          "729:   YYUSE (yyscanner);",
          "730:   YYUSE (lex_env);",
          "731: # ifdef YYPRINT",
          "732:   if (yytype < YYNTOKENS)",
          "733:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);",
          "736: # endif",
          "742: }",
          "",
          "[Removed Lines]",
          "690: # define YYDPRINTF(Args)   \\",
          "691: do {      \\",
          "692:   if (yydebug)     \\",
          "693:     YYFPRINTF Args;    \\",
          "694: } while (YYID (0))",
          "696: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)     \\",
          "697: do {           \\",
          "698:   if (yydebug)          \\",
          "699:     {           \\",
          "700:       YYFPRINTF (stderr, \"%s \", Title);       \\",
          "701:       yy_symbol_print (stderr,        \\",
          "702:     Type, Value, yyscanner, lex_env); \\",
          "703:       YYFPRINTF (stderr, \"\\n\");        \\",
          "704:     }           \\",
          "705: } while (YYID (0))",
          "709: | Print this symbol on YYOUTPUT.  |",
          "713: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "714:      || defined __cplusplus || defined _MSC_VER)",
          "717: #else",
          "718: static void",
          "719: yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env)",
          "720:     FILE *yyoutput;",
          "721:     int yytype;",
          "722:     YYSTYPE const * const yyvaluep;",
          "723:     void *yyscanner;",
          "724:     RE_LEX_ENVIRONMENT *lex_env;",
          "725: #endif",
          "727:   if (!yyvaluep)",
          "728:     return;",
          "734: # else",
          "735:   YYUSE (yyoutput);",
          "737:   switch (yytype)",
          "738:     {",
          "739:       default:",
          "740:  break;",
          "741:     }",
          "",
          "[Added Lines]",
          "659: # define YYDPRINTF(Args)                        \\",
          "660: do {                                            \\",
          "661:   if (yydebug)                                  \\",
          "662:     YYFPRINTF Args;                             \\",
          "663: } while (0)",
          "666: #ifndef YY_LOCATION_PRINT",
          "667: # define YY_LOCATION_PRINT(File, Loc) ((void) 0)",
          "668: #endif",
          "671: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \\",
          "672: do {                                                                      \\",
          "673:   if (yydebug)                                                            \\",
          "674:     {                                                                     \\",
          "675:       YYFPRINTF (stderr, \"%s \", Title);                                   \\",
          "676:       yy_symbol_print (stderr,                                            \\",
          "677:                   Type, Value, yyscanner, lex_env); \\",
          "678:       YYFPRINTF (stderr, \"\\n\");                                           \\",
          "679:     }                                                                     \\",
          "680: } while (0)",
          "684: | Print this symbol's value on YYOUTPUT.  |",
          "690:   FILE *yyo = yyoutput;",
          "691:   YYUSE (yyo);",
          "694:   if (!yyvaluep)",
          "695:     return;",
          "700:   YYUSE (yytype);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "746: | Print this symbol on YYOUTPUT.  |",
          "751: static void",
          "752: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)",
          "762: {",
          "768:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env);",
          "769:   YYFPRINTF (yyoutput, \")\");",
          "",
          "[Removed Lines]",
          "749: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "750:      || defined __cplusplus || defined _MSC_VER)",
          "753: #else",
          "754: static void",
          "755: yy_symbol_print (yyoutput, yytype, yyvaluep, yyscanner, lex_env)",
          "756:     FILE *yyoutput;",
          "757:     int yytype;",
          "758:     YYSTYPE const * const yyvaluep;",
          "759:     void *yyscanner;",
          "760:     RE_LEX_ENVIRONMENT *lex_env;",
          "761: #endif",
          "763:   if (yytype < YYNTOKENS)",
          "764:     YYFPRINTF (yyoutput, \"token %s (\", yytname[yytype]);",
          "765:   else",
          "766:     YYFPRINTF (yyoutput, \"nterm %s (\", yytname[yytype]);",
          "",
          "[Added Lines]",
          "711:   YYFPRINTF (yyoutput, \"%s %s (\",",
          "712:              yytype < YYNTOKENS ? \"token\" : \"nterm\", yytname[yytype]);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "774: | TOP (included).                                                   |",
          "782: static void",
          "787: {",
          "788:   YYFPRINTF (stderr, \"Stack now\");",
          "791:   YYFPRINTF (stderr, \"\\n\");",
          "792: }",
          "802: | Report that the YYRULE is going to be reduced.  |",
          "807: static void",
          "817: {",
          "818:   int yynrhs = yyr2[yyrule];",
          "819:   int yyi;",
          "821:   YYFPRINTF (stderr, \"Reducing stack by rule %d (line %lu):\\n\",",
          "824:   for (yyi = 0; yyi < yynrhs; yyi++)",
          "825:     {",
          "831:     }",
          "832: }",
          "",
          "[Removed Lines]",
          "777: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "778:      || defined __cplusplus || defined _MSC_VER)",
          "779: static void",
          "780: yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)",
          "781: #else",
          "783: yy_stack_print (bottom, top)",
          "784:     yytype_int16 *bottom;",
          "785:     yytype_int16 *top;",
          "786: #endif",
          "789:   for (; bottom <= top; ++bottom)",
          "790:     YYFPRINTF (stderr, \" %d\", *bottom);",
          "794: # define YY_STACK_PRINT(Bottom, Top)    \\",
          "795: do {        \\",
          "796:   if (yydebug)       \\",
          "797:     yy_stack_print ((Bottom), (Top));    \\",
          "798: } while (YYID (0))",
          "805: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "806:      || defined __cplusplus || defined _MSC_VER)",
          "808: yy_reduce_print (YYSTYPE *yyvsp, int yyrule, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)",
          "809: #else",
          "810: static void",
          "811: yy_reduce_print (yyvsp, yyrule, yyscanner, lex_env)",
          "812:     YYSTYPE *yyvsp;",
          "813:     int yyrule;",
          "814:     void *yyscanner;",
          "815:     RE_LEX_ENVIRONMENT *lex_env;",
          "816: #endif",
          "820:   unsigned long int yylno = yyrline[yyrule];",
          "822:       yyrule - 1, yylno);",
          "826:       fprintf (stderr, \"   $%d = \", yyi + 1);",
          "827:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],",
          "828:          &(yyvsp[(yyi + 1) - (yynrhs)])",
          "829:                   , yyscanner, lex_env);",
          "830:       fprintf (stderr, \"\\n\");",
          "834: # define YY_REDUCE_PRINT(Rule)  \\",
          "835: do {     \\",
          "836:   if (yydebug)    \\",
          "837:     yy_reduce_print (yyvsp, Rule, yyscanner, lex_env); \\",
          "838: } while (YYID (0))",
          "",
          "[Added Lines]",
          "724: yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)",
          "727:   for (; yybottom <= yytop; yybottom++)",
          "728:     {",
          "729:       int yybot = *yybottom;",
          "730:       YYFPRINTF (stderr, \" %d\", yybot);",
          "731:     }",
          "735: # define YY_STACK_PRINT(Bottom, Top)                            \\",
          "736: do {                                                            \\",
          "737:   if (yydebug)                                                  \\",
          "738:     yy_stack_print ((Bottom), (Top));                           \\",
          "739: } while (0)",
          "747: yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)",
          "749:   unsigned long int yylno = yyrline[yyrule];",
          "753:              yyrule - 1, yylno);",
          "757:       YYFPRINTF (stderr, \"   $%d = \", yyi + 1);",
          "758:       yy_symbol_print (stderr,",
          "759:                        yystos[yyssp[yyi + 1 - yynrhs]],",
          "760:                        &(yyvsp[(yyi + 1) - (yynrhs)])",
          "761:                                               , yyscanner, lex_env);",
          "762:       YYFPRINTF (stderr, \"\\n\");",
          "766: # define YY_REDUCE_PRINT(Rule)          \\",
          "767: do {                                    \\",
          "768:   if (yydebug)                          \\",
          "769:     yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, lex_env); \\",
          "770: } while (0)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "853: # define YYINITDEPTH 200",
          "854: #endif",
          "",
          "[Removed Lines]",
          "852: #ifndef YYINITDEPTH",
          "",
          "[Added Lines]",
          "784: #ifndef YYINITDEPTH",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "873: #  if defined __GLIBC__ && defined _STRING_H",
          "874: #   define yystrlen strlen",
          "875: #  else",
          "878:      || defined __cplusplus || defined _MSC_VER)",
          "879: static YYSIZE_T",
          "885: #endif",
          "886: {",
          "887:   YYSIZE_T yylen;",
          "",
          "[Removed Lines]",
          "877: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "880: yystrlen (const char *yystr)",
          "881: #else",
          "882: static YYSIZE_T",
          "883: yystrlen (yystr)",
          "884:     const char *yystr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "897: #   define yystpcpy stpcpy",
          "898: #  else",
          "902:      || defined __cplusplus || defined _MSC_VER)",
          "903: static char *",
          "910: #endif",
          "911: {",
          "912:   char *yyd = yydest;",
          "",
          "[Removed Lines]",
          "901: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "904: yystpcpy (char *yydest, const char *yysrc)",
          "905: #else",
          "906: static char *",
          "907: yystpcpy (yydest, yysrc)",
          "908:     char *yydest;",
          "909:     const char *yysrc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "936:       YYSIZE_T yyn = 0;",
          "937:       char const *yyp = yystr;",
          "960:    }",
          "961:     do_not_strip_quotes: ;",
          "962:     }",
          "",
          "[Removed Lines]",
          "939:       for (;;)",
          "940:  switch (*++yyp)",
          "941:    {",
          "942:    case '\\'':",
          "943:    case ',':",
          "944:      goto do_not_strip_quotes;",
          "946:    case '\\\\':",
          "947:      if (*++yyp != '\\\\')",
          "948:        goto do_not_strip_quotes;",
          "950:    default:",
          "951:      if (yyres)",
          "952:        yyres[yyn] = *yyp;",
          "953:      yyn++;",
          "954:      break;",
          "956:    case '\"':",
          "957:      if (yyres)",
          "958:        yyres[yyn] = '\\0';",
          "959:      return yyn;",
          "",
          "[Added Lines]",
          "855:         switch (*++yyp)",
          "856:           {",
          "857:           case '\\'':",
          "858:           case ',':",
          "859:             goto do_not_strip_quotes;",
          "861:           case '\\\\':",
          "862:             if (*++yyp != '\\\\')",
          "863:               goto do_not_strip_quotes;",
          "865:           default:",
          "866:             if (yyres)",
          "867:               yyres[yyn] = *yyp;",
          "868:             yyn++;",
          "869:             break;",
          "871:           case '\"':",
          "872:             if (yyres)",
          "873:               yyres[yyn] = '\\0';",
          "874:             return yyn;",
          "875:           }",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "967:   return yystpcpy (yyres, yystr) - yyres;",
          "968: }",
          "969: # endif",
          "979: yysyntax_error (char *yyresult, int yystate, int yychar)",
          "981:   int yyn = yypact[yystate];",
          "985:   else",
          "1075:       return yysize;",
          "1076:     }",
          "1077: }",
          "1083: | Release the memory associated to this symbol.  |",
          "1087: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1088:      || defined __cplusplus || defined _MSC_VER)",
          "1098:     RE_LEX_ENVIRONMENT *lex_env;",
          "1099: #endif",
          "1100: {",
          "1101:   YYUSE (yyvaluep);",
          "1102:   YYUSE (yyscanner);",
          "1103:   YYUSE (lex_env);",
          "1105:   if (!yymsg)",
          "1106:     yymsg = \"Deleting\";",
          "1107:   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);",
          "1109:   switch (yytype)",
          "1134: #line 1133 \"re_grammar.c\"",
          "1135:  break;",
          "1137:       default:",
          "1138:  break;",
          "1139:     }",
          "1140: }",
          "",
          "[Removed Lines]",
          "972:    YYCHAR while in state YYSTATE.  Return the number of bytes copied,",
          "973:    including the terminating null byte.  If YYRESULT is null, do not",
          "974:    copy anything; just return the number of bytes that would be",
          "975:    copied.  As a special case, return 0 if an ordinary \"syntax error\"",
          "976:    message will do.  Return YYSIZE_MAXIMUM if overflow occurs during",
          "978: static YYSIZE_T",
          "980: {",
          "983:   if (! (YYPACT_NINF < yyn && yyn <= YYLAST))",
          "984:     return 0;",
          "986:     {",
          "987:       int yytype = YYTRANSLATE (yychar);",
          "988:       YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);",
          "989:       YYSIZE_T yysize = yysize0;",
          "990:       YYSIZE_T yysize1;",
          "991:       int yysize_overflow = 0;",
          "992:       enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "993:       char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "994:       int yyx;",
          "996: # if 0",
          "999:       YY_(\"syntax error, unexpected %s\");",
          "1000:       YY_(\"syntax error, unexpected %s, expecting %s\");",
          "1001:       YY_(\"syntax error, unexpected %s, expecting %s or %s\");",
          "1002:       YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\");",
          "1003:       YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\");",
          "1004: # endif",
          "1005:       char *yyfmt;",
          "1006:       char const *yyf;",
          "1007:       static char const yyunexpected[] = \"syntax error, unexpected %s\";",
          "1008:       static char const yyexpecting[] = \", expecting %s\";",
          "1009:       static char const yyor[] = \" or %s\";",
          "1010:       char yyformat[sizeof yyunexpected",
          "1011:       + sizeof yyexpecting - 1",
          "1012:       + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)",
          "1014:       char const *yyprefix = yyexpecting;",
          "1018:       int yyxbegin = yyn < 0 ? -yyn : 0;",
          "1021:       int yychecklim = YYLAST - yyn + 1;",
          "1022:       int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;",
          "1023:       int yycount = 1;",
          "1025:       yyarg[0] = yytname[yytype];",
          "1026:       yyfmt = yystpcpy (yyformat, yyunexpected);",
          "1028:       for (yyx = yyxbegin; yyx < yyxend; ++yyx)",
          "1029:  if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)",
          "1030:    {",
          "1031:      if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)",
          "1032:        {",
          "1033:   yycount = 1;",
          "1034:   yysize = yysize0;",
          "1035:   yyformat[sizeof yyunexpected - 1] = '\\0';",
          "1036:   break;",
          "1037:        }",
          "1038:      yyarg[yycount++] = yytname[yyx];",
          "1039:      yysize1 = yysize + yytnamerr (0, yytname[yyx]);",
          "1040:      yysize_overflow |= (yysize1 < yysize);",
          "1041:      yysize = yysize1;",
          "1042:      yyfmt = yystpcpy (yyfmt, yyprefix);",
          "1043:      yyprefix = yyor;",
          "1044:    }",
          "1046:       yyf = YY_(yyformat);",
          "1047:       yysize1 = yysize + yystrlen (yyf);",
          "1048:       yysize_overflow |= (yysize1 < yysize);",
          "1049:       yysize = yysize1;",
          "1051:       if (yysize_overflow)",
          "1052:  return YYSIZE_MAXIMUM;",
          "1054:       if (yyresult)",
          "1055:  {",
          "1057:       Don't have undefined behavior even if the translation",
          "1059:    char *yyp = yyresult;",
          "1060:    int yyi = 0;",
          "1061:    while ((*yyp = *yyf) != '\\0')",
          "1062:      {",
          "1063:        if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)",
          "1064:   {",
          "1065:     yyp += yytnamerr (yyp, yyarg[yyi++]);",
          "1066:     yyf += 2;",
          "1067:   }",
          "1068:        else",
          "1069:   {",
          "1070:     yyp++;",
          "1071:     yyf++;",
          "1072:   }",
          "1073:      }",
          "1074:  }",
          "1089: static void",
          "1090: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)",
          "1091: #else",
          "1092: static void",
          "1093: yydestruct (yymsg, yytype, yyvaluep, yyscanner, lex_env)",
          "1094:     const char *yymsg;",
          "1095:     int yytype;",
          "1096:     YYSTYPE *yyvaluep;",
          "1097:     void *yyscanner;",
          "1110:     {",
          "1112: #line 83 \"re_grammar.y\"",
          "1113:  { yr_free((yyvaluep->class_vector)); };",
          "1114: #line 1113 \"re_grammar.c\"",
          "1115:  break;",
          "1117: #line 84 \"re_grammar.y\"",
          "1118:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1119: #line 1118 \"re_grammar.c\"",
          "1120:  break;",
          "1122: #line 85 \"re_grammar.y\"",
          "1123:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1124: #line 1123 \"re_grammar.c\"",
          "1125:  break;",
          "1127: #line 86 \"re_grammar.y\"",
          "1128:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1129: #line 1128 \"re_grammar.c\"",
          "1130:  break;",
          "1132: #line 87 \"re_grammar.y\"",
          "1133:  { yr_re_node_destroy((yyvaluep->re_node)); };",
          "1146: #ifdef YYPARSE_PARAM",
          "1147: #if defined __STDC__ || defined __cplusplus",
          "1148: int yyparse (void *YYPARSE_PARAM);",
          "1149: #else",
          "1150: int yyparse ();",
          "1151: #endif",
          "1153: #if defined __STDC__ || defined __cplusplus",
          "1154: int yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);",
          "1155: #else",
          "1156: int yyparse ();",
          "1157: #endif",
          "",
          "[Added Lines]",
          "887:    about the unexpected token YYTOKEN for the state stack whose top is",
          "888:    YYSSP.",
          "890:    Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is",
          "891:    not large enough to hold the message.  In that case, also set",
          "894: static int",
          "895: yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,",
          "896:                 yytype_int16 *yyssp, int yytoken)",
          "898:   YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);",
          "899:   YYSIZE_T yysize = yysize0;",
          "900:   enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };",
          "902:   const char *yyformat = YY_NULLPTR;",
          "904:   char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];",
          "907:   int yycount = 0;",
          "910:      - If this state is a consistent state with a default action, then",
          "911:        the only way this function was invoked is if the default action",
          "912:        is an error action.  In that case, don't check for expected",
          "913:        tokens because there are none.",
          "914:      - The only way there can be no lookahead present (in yychar) is if",
          "915:        this state is a consistent state with a default action.  Thus,",
          "916:        detecting the absence of a lookahead is sufficient to determine",
          "917:        that there is no unexpected or expected token to report.  In that",
          "918:        case, just report a simple \"syntax error\".",
          "919:      - Don't assume there isn't a lookahead just because this state is a",
          "920:        consistent state with a default action.  There might have been a",
          "921:        previous inconsistent state, consistent state with a non-default",
          "922:        action, or user semantic action that manipulated yychar.",
          "923:      - Of course, the expected token list depends on states to have",
          "924:        correct lookahead information, and it depends on the parser not",
          "925:        to perform extra reductions after fetching a lookahead from the",
          "926:        scanner and before detecting a syntax error.  Thus, state merging",
          "927:        (from LALR or IELR) and default reductions corrupt the expected",
          "928:        token list.  However, the list is correct for canonical LR with",
          "929:        one exception: it will still contain any token that will not be",
          "930:        accepted due to an error action in a later state.",
          "932:   if (yytoken != YYEMPTY)",
          "933:     {",
          "934:       int yyn = yypact[*yyssp];",
          "935:       yyarg[yycount++] = yytname[yytoken];",
          "936:       if (!yypact_value_is_default (yyn))",
          "937:         {",
          "939:              YYCHECK.  In other words, skip the first -YYN actions for",
          "941:           int yyxbegin = yyn < 0 ? -yyn : 0;",
          "943:           int yychecklim = YYLAST - yyn + 1;",
          "944:           int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;",
          "945:           int yyx;",
          "947:           for (yyx = yyxbegin; yyx < yyxend; ++yyx)",
          "948:             if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR",
          "949:                 && !yytable_value_is_error (yytable[yyx + yyn]))",
          "950:               {",
          "951:                 if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)",
          "952:                   {",
          "953:                     yycount = 1;",
          "954:                     yysize = yysize0;",
          "955:                     break;",
          "956:                   }",
          "957:                 yyarg[yycount++] = yytname[yyx];",
          "958:                 {",
          "959:                   YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);",
          "960:                   if (! (yysize <= yysize1",
          "961:                          && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "962:                     return 2;",
          "963:                   yysize = yysize1;",
          "964:                 }",
          "965:               }",
          "966:         }",
          "967:     }",
          "969:   switch (yycount)",
          "971: # define YYCASE_(N, S)                      \\",
          "972:       case N:                               \\",
          "973:         yyformat = S;                       \\",
          "974:       break",
          "975:       YYCASE_(0, YY_(\"syntax error\"));",
          "976:       YYCASE_(1, YY_(\"syntax error, unexpected %s\"));",
          "977:       YYCASE_(2, YY_(\"syntax error, unexpected %s, expecting %s\"));",
          "978:       YYCASE_(3, YY_(\"syntax error, unexpected %s, expecting %s or %s\"));",
          "979:       YYCASE_(4, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s\"));",
          "980:       YYCASE_(5, YY_(\"syntax error, unexpected %s, expecting %s or %s or %s or %s\"));",
          "981: # undef YYCASE_",
          "982:     }",
          "984:   {",
          "985:     YYSIZE_T yysize1 = yysize + yystrlen (yyformat);",
          "986:     if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))",
          "987:       return 2;",
          "988:     yysize = yysize1;",
          "989:   }",
          "991:   if (*yymsg_alloc < yysize)",
          "992:     {",
          "994:       if (! (yysize <= *yymsg_alloc",
          "995:              && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))",
          "997:       return 1;",
          "1001:      Don't have undefined behavior even if the translation",
          "1003:   {",
          "1004:     char *yyp = *yymsg;",
          "1005:     int yyi = 0;",
          "1006:     while ((*yyp = *yyformat) != '\\0')",
          "1007:       if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)",
          "1008:         {",
          "1009:           yyp += yytnamerr (yyp, yyarg[yyi++]);",
          "1010:           yyformat += 2;",
          "1011:         }",
          "1012:       else",
          "1013:         {",
          "1014:           yyp++;",
          "1015:           yyformat++;",
          "1016:         }",
          "1017:   }",
          "1018:   return 0;",
          "1036:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1041:       { yr_free(((*yyvaluep).class_vector)); }",
          "1043:         break;",
          "1047:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1049:         break;",
          "1053:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1055:         break;",
          "1059:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1061:         break;",
          "1065:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1067:         break;",
          "1071:         break;",
          "1073:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1180: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1188:     RE_LEX_ENVIRONMENT *lex_env;",
          "1189: #endif",
          "1190: #endif",
          "1191: {",
          "1211:   char *yymsg = yymsgbuf;",
          "1212:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;",
          "1216:      `yyss': related to states,",
          "1220:      Refer to the stacks thru separate pointers, to allow yyoverflow",
          "1224:   yytype_int16 yyssa[YYINITDEPTH];",
          "1225:   yytype_int16 *yyss = yyssa;",
          "1229:   YYSTYPE yyvsa[YYINITDEPTH];",
          "1230:   YYSTYPE *yyvs = yyvsa;",
          "1231:   YYSTYPE *yyvsp;",
          "1235: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))",
          "1237:   YYSIZE_T yystacksize = YYINITDEPTH;",
          "1241:   YYSTYPE yyval;",
          "1246:   int yylen = 0;",
          "1248:   YYDPRINTF ((stderr, \"Starting parse\\n\"));",
          "1250:   yystate = 0;",
          "1251:   yyerrstatus = 0;",
          "1252:   yynerrs = 0;",
          "1260:   yyssp = yyss;",
          "1261:   yyvsp = yyvs;",
          "",
          "[Removed Lines]",
          "1166: | yyparse.  |",
          "1169: #ifdef YYPARSE_PARAM",
          "1170: #if (defined __STDC__ || defined __C99__FUNC__ \\",
          "1171:      || defined __cplusplus || defined _MSC_VER)",
          "1172: int",
          "1173: yyparse (void *YYPARSE_PARAM)",
          "1174: #else",
          "1175: int",
          "1176: yyparse (YYPARSE_PARAM)",
          "1177:     void *YYPARSE_PARAM;",
          "1178: #endif",
          "1181:      || defined __cplusplus || defined _MSC_VER)",
          "1182: int",
          "1183: yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)",
          "1184: #else",
          "1185: int",
          "1186: yyparse (yyscanner, lex_env)",
          "1187:     void *yyscanner;",
          "1193: int yychar;",
          "1196: YYSTYPE yylval;",
          "1199: int yynerrs;",
          "1201:   int yystate;",
          "1202:   int yyn;",
          "1203:   int yyresult;",
          "1205:   int yyerrstatus;",
          "1207:   int yytoken = 0;",
          "1208: #if YYERROR_VERBOSE",
          "1210:   char yymsgbuf[128];",
          "1213: #endif",
          "1217:      `yyvs': related to semantic values,",
          "1218:      `yyls': related to locations.",
          "1226:   yytype_int16 *yyssp;",
          "1256:      Waste one element of value and location stack",
          "1257:      so that they stay on the same level as the state stack.",
          "",
          "[Added Lines]",
          "1093: YY_INITIAL_VALUE (static YYSTYPE yyval_default;)",
          "1094: YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);",
          "1097:     int yynerrs;",
          "1099:     int yystate;",
          "1101:     int yyerrstatus;",
          "1104:        'yyss': related to states.",
          "1105:        'yyvs': related to semantic values.",
          "1107:        Refer to the stacks through separate pointers, to allow yyoverflow",
          "1111:     yytype_int16 yyssa[YYINITDEPTH];",
          "1112:     yytype_int16 *yyss;",
          "1113:     yytype_int16 *yyssp;",
          "1116:     YYSTYPE yyvsa[YYINITDEPTH];",
          "1117:     YYSTYPE *yyvs;",
          "1118:     YYSTYPE *yyvsp;",
          "1120:     YYSIZE_T yystacksize;",
          "1122:   int yyn;",
          "1123:   int yyresult;",
          "1125:   int yytoken = 0;",
          "1130: #if YYERROR_VERBOSE",
          "1132:   char yymsgbuf[128];",
          "1133:   char *yymsg = yymsgbuf;",
          "1134:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;",
          "1135: #endif",
          "1137: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))",
          "1143:   yyssp = yyss = yyssa;",
          "1144:   yyvsp = yyvs = yyvsa;",
          "1145:   yystacksize = YYINITDEPTH;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1277:     {",
          "1279:       YYSIZE_T yysize = yyssp - yyss + 1;",
          "1300:  yyss = yyss1;",
          "1301:  yyvs = yyvs1;",
          "",
          "[Removed Lines]",
          "1281: #ifdef yyoverflow",
          "1282:       {",
          "1284:     these so that the &'s don't force the real ones into",
          "1286:  YYSTYPE *yyvs1 = yyvs;",
          "1287:  yytype_int16 *yyss1 = yyss;",
          "1291:     data in use in that stack, in bytes.  This used to be a",
          "1292:     conditional around just the two extra args, but that might",
          "1294:  yyoverflow (YY_(\"memory exhausted\"),",
          "1295:       &yyss1, yysize * sizeof (*yyssp),",
          "1296:       &yyvs1, yysize * sizeof (*yyvsp),",
          "1298:       &yystacksize);",
          "",
          "[Added Lines]",
          "1174:            these so that the &'s don't force the real ones into",
          "1176:         YYSTYPE *yyvs1 = yyvs;",
          "1177:         yytype_int16 *yyss1 = yyss;",
          "1180:            data in use in that stack, in bytes.  This used to be a",
          "1181:            conditional around just the two extra args, but that might",
          "1183:         yyoverflow (YY_(\"memory exhausted\"),",
          "1184:                     &yyss1, yysize * sizeof (*yyssp),",
          "1185:                     &yyvs1, yysize * sizeof (*yyvsp),",
          "1186:                     &yystacksize);",
          "1188:         yyss = yyss1;",
          "1189:         yyvs = yyvs1;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1304: # ifndef YYSTACK_RELOCATE",
          "1305:       goto yyexhaustedlab;",
          "1308:       if (YYMAXDEPTH <= yystacksize)",
          "1310:       yystacksize *= 2;",
          "1311:       if (YYMAXDEPTH < yystacksize)",
          "1320:  YYSTACK_RELOCATE (yyss);",
          "1323: #  undef YYSTACK_RELOCATE",
          "1324:  if (yyss1 != yyssa)",
          "1325:    YYSTACK_FREE (yyss1);",
          "",
          "[Removed Lines]",
          "1306: # else",
          "1309:  goto yyexhaustedlab;",
          "1312:  yystacksize = YYMAXDEPTH;",
          "1314:       {",
          "1315:  yytype_int16 *yyss1 = yyss;",
          "1316:  union yyalloc *yyptr =",
          "1317:    (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));",
          "1318:  if (! yyptr)",
          "1319:    goto yyexhaustedlab;",
          "1321:  YYSTACK_RELOCATE (yyvs);",
          "",
          "[Added Lines]",
          "1197:         goto yyexhaustedlab;",
          "1200:         yystacksize = YYMAXDEPTH;",
          "1203:         yytype_int16 *yyss1 = yyss;",
          "1204:         union yyalloc *yyptr =",
          "1205:           (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));",
          "1206:         if (! yyptr)",
          "1207:           goto yyexhaustedlab;",
          "1208:         YYSTACK_RELOCATE (yyss_alloc, yyss);",
          "1209:         YYSTACK_RELOCATE (yyvs_alloc, yyvs);",
          "1211:         if (yyss1 != yyssa)",
          "1212:           YYSTACK_FREE (yyss1);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1327: # endif",
          "1330:       yyssp = yyss + yysize - 1;",
          "1331:       yyvsp = yyvs + yysize - 1;",
          "1334:       YYDPRINTF ((stderr, \"Stack size increased to %lu\\n\",",
          "1337:       if (yyss + yystacksize - 1 <= yyssp)",
          "1338:  YYABORT;",
          "1339:     }",
          "1341:   YYDPRINTF ((stderr, \"Entering state %d\\n\", yystate));",
          "",
          "[Removed Lines]",
          "1335:     (unsigned long int) yystacksize));",
          "",
          "[Added Lines]",
          "1221:                   (unsigned long int) yystacksize));",
          "1224:         YYABORT;",
          "1229:   if (yystate == YYFINAL)",
          "1230:     YYACCEPT;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1346: | yybackup.  |",
          "1348: yybackup:",
          "1354:   yyn = yypact[yystate];",
          "1355:   if (yyn == YYPACT_NINF)",
          "1356:     goto yydefault;",
          "1362:     {",
          "1363:       YYDPRINTF ((stderr, \"Reading a token: \"));",
          "1364:       yychar = YYLEX;",
          "",
          "[Removed Lines]",
          "1361:   if (yychar == YYEMPTY)",
          "",
          "[Added Lines]",
          "1244:   if (yypact_value_is_default (yyn))",
          "1253:       yychar = yylex (&yylval, yyscanner, lex_env);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1380:   yyn += yytoken;",
          "1381:   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)",
          "1382:     goto yydefault;",
          "1385:     {",
          "1386:       if (yyn == 0 || yyn == YYTABLE_NINF)",
          "1387:  goto yyerrlab;",
          "1388:       yyn = -yyn;",
          "1392:   if (yyn == YYFINAL)",
          "1393:     YYACCEPT;",
          "1397:   if (yyerrstatus)",
          "1398:     yyerrstatus--;",
          "1404:   if (yychar != YYEOF)",
          "1405:     yychar = YYEMPTY;",
          "1407:   yystate = yyn;",
          "",
          "[Removed Lines]",
          "1383:   yyn = yytable[yyn];",
          "1384:   if (yyn <= 0)",
          "1389:       goto yyreduce;",
          "1390:     }",
          "1401:   YY_SYMBOL_PRINT (\"Shifting\", yytoken, &yylval, &yylloc);",
          "",
          "[Added Lines]",
          "1275:       if (yytable_value_is_error (yyn))",
          "1276:         goto yyerrlab;",
          "1290:   yychar = YYEMPTY;",
          "1293:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1295:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1426: yyreduce:",
          "1431:      `$$ = $1'.",
          "",
          "[Removed Lines]",
          "1428:   yylen = yyr2[yyn];",
          "",
          "[Added Lines]",
          "1318:      '$$ = $1'.",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1441:   YY_REDUCE_PRINT (yyn);",
          "1443:     {",
          "1444:         case 2:",
          "1446:     {",
          "1447:         RE* re = yyget_extra(yyscanner);",
          "1448:         re->root_node = (yyvsp[(1) - (1)].re_node);",
          "1449:       }",
          "1453: #line 101 \"re_grammar.y\"",
          "1454:     {",
          "1455:         (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1456:       }",
          "1460: #line 105 \"re_grammar.y\"",
          "1464:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (3)].re_node));",
          "1465:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(3) - (3)].re_node));",
          "1467:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1468:       }",
          "1471:   case 6:",
          "1472: #line 114 \"re_grammar.y\"",
          "1474:         RE_NODE* node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);",
          "1477:         ERROR_IF(node == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1479:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[(1) - (2)].re_node), node);",
          "1481:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1482:       }",
          "1486: #line 128 \"re_grammar.y\"",
          "1487:     {",
          "1488:         (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1489:       }",
          "1493: #line 132 \"re_grammar.y\"",
          "1497:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (2)].re_node));",
          "1498:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(2) - (2)].re_node));",
          "1499:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1500:       }",
          "1503:   case 9:",
          "1504: #line 143 \"re_grammar.y\"",
          "1505:     {",
          "1507:         re->flags |= RE_FLAGS_GREEDY;",
          "1509:         (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[(1) - (2)].re_node), NULL);",
          "1511:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (2)].re_node));",
          "1512:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1513:       }",
          "1516:   case 10:",
          "1517: #line 153 \"re_grammar.y\"",
          "1518:     {",
          "1520:         re->flags |= RE_FLAGS_UNGREEDY;",
          "1522:         (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[(1) - (3)].re_node), NULL);",
          "1524:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (3)].re_node));",
          "1525:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1527:         (yyval.re_node)->greedy = FALSE;",
          "1528:       }",
          "1531:   case 11:",
          "1532: #line 165 \"re_grammar.y\"",
          "1533:     {",
          "1535:         re->flags |= RE_FLAGS_GREEDY;",
          "1537:         (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[(1) - (2)].re_node), NULL);",
          "1539:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (2)].re_node));",
          "1540:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1541:       }",
          "1544:   case 12:",
          "1545: #line 175 \"re_grammar.y\"",
          "1546:     {",
          "1548:         re->flags |= RE_FLAGS_UNGREEDY;",
          "1550:         (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[(1) - (3)].re_node), NULL);",
          "1552:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (3)].re_node));",
          "1553:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1555:         (yyval.re_node)->greedy = FALSE;",
          "1556:       }",
          "1559:   case 13:",
          "1560: #line 187 \"re_grammar.y\"",
          "1561:     {",
          "1563:         re->flags |= RE_FLAGS_GREEDY;",
          "1565:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[(1) - (2)].re_node), NULL);",
          "1567:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (2)].re_node));",
          "1568:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1570:         (yyval.re_node)->start = 0;",
          "1571:         (yyval.re_node)->end = 1;",
          "1572:       }",
          "1575:   case 14:",
          "1576: #line 200 \"re_grammar.y\"",
          "1577:     {",
          "1579:         re->flags |= RE_FLAGS_UNGREEDY;",
          "1581:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[(1) - (3)].re_node), NULL);",
          "1583:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (3)].re_node));",
          "1584:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1586:         (yyval.re_node)->start = 0;",
          "1587:         (yyval.re_node)->end = 1;",
          "1588:         (yyval.re_node)->greedy = FALSE;",
          "1589:       }",
          "1592:   case 15:",
          "1593: #line 214 \"re_grammar.y\"",
          "1594:     {",
          "1596:         re->flags |= RE_FLAGS_GREEDY;",
          "1598:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[(1) - (2)].re_node), NULL);",
          "1603:         (yyval.re_node)->start = (yyvsp[(2) - (2)].range) & 0xFFFF;;",
          "1604:         (yyval.re_node)->end = (yyvsp[(2) - (2)].range) >> 16;;",
          "1605:       }",
          "1608:   case 16:",
          "1609: #line 227 \"re_grammar.y\"",
          "1610:     {",
          "1612:         re->flags |= RE_FLAGS_UNGREEDY;",
          "1614:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[(1) - (3)].re_node), NULL);",
          "1619:         (yyval.re_node)->start = (yyvsp[(2) - (3)].range) & 0xFFFF;;",
          "1620:         (yyval.re_node)->end = (yyvsp[(2) - (3)].range) >> 16;;",
          "1621:         (yyval.re_node)->greedy = FALSE;",
          "1622:       }",
          "1626: #line 241 \"re_grammar.y\"",
          "1627:     {",
          "1628:         (yyval.re_node) = (yyvsp[(1) - (1)].re_node);",
          "1629:       }",
          "1632:   case 18:",
          "1633: #line 245 \"re_grammar.y\"",
          "1634:     {",
          "1635:         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);",
          "1637:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1638:       }",
          "1641:   case 19:",
          "1642: #line 251 \"re_grammar.y\"",
          "1643:     {",
          "1644:         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);",
          "1646:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1647:       }",
          "1650:   case 20:",
          "1651: #line 257 \"re_grammar.y\"",
          "1652:     {",
          "1653:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);",
          "1655:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1656:       }",
          "1659:   case 21:",
          "1660: #line 263 \"re_grammar.y\"",
          "1661:     {",
          "1662:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);",
          "1664:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1665:       }",
          "1669: #line 272 \"re_grammar.y\"",
          "1670:     {",
          "1671:         (yyval.re_node) = (yyvsp[(2) - (3)].re_node);",
          "1672:       }",
          "1675:   case 23:",
          "1676: #line 276 \"re_grammar.y\"",
          "1677:     {",
          "1678:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);",
          "1680:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1681:       }",
          "1684:   case 24:",
          "1685: #line 282 \"re_grammar.y\"",
          "1686:     {",
          "1687:         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);",
          "1689:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1691:         (yyval.re_node)->value = (yyvsp[(1) - (1)].integer);",
          "1692:       }",
          "1695:   case 25:",
          "1696: #line 290 \"re_grammar.y\"",
          "1697:     {",
          "1698:         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR, NULL, NULL);",
          "1700:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1701:       }",
          "1704:   case 26:",
          "1705: #line 296 \"re_grammar.y\"",
          "1706:     {",
          "1707:         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR, NULL, NULL);",
          "1709:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1710:       }",
          "1713:   case 27:",
          "1714: #line 302 \"re_grammar.y\"",
          "1715:     {",
          "1716:         (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE, NULL, NULL);",
          "1718:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1719:       }",
          "1722:   case 28:",
          "1723: #line 308 \"re_grammar.y\"",
          "1724:     {",
          "1725:          (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE, NULL, NULL);",
          "1727:          ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1728:       }",
          "1731:   case 29:",
          "1732: #line 314 \"re_grammar.y\"",
          "1733:     {",
          "1734:         (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT, NULL, NULL);",
          "1736:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1737:       }",
          "1740:   case 30:",
          "1741: #line 320 \"re_grammar.y\"",
          "1742:     {",
          "1743:         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT, NULL, NULL);",
          "1745:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1746:       }",
          "1749:   case 31:",
          "1750: #line 326 \"re_grammar.y\"",
          "1751:     {",
          "1752:         (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS, NULL, NULL);",
          "1754:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1756:         (yyval.re_node)->class_vector = (yyvsp[(1) - (1)].class_vector);",
          "1757:       }",
          "1758:     break;",
          "1762: #line 1760 \"re_grammar.c\"",
          "1763:       default: break;",
          "1764:     }",
          "",
          "[Removed Lines]",
          "1442:   switch (yyn)",
          "1445: #line 92 \"re_grammar.y\"",
          "1450:     break;",
          "1452:   case 4:",
          "1457:     break;",
          "1459:   case 5:",
          "1461:     {",
          "1462:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[(1) - (3)].re_node), (yyvsp[(3) - (3)].re_node));",
          "1469:     break;",
          "1473:     {",
          "1476:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (2)].re_node));",
          "1483:     break;",
          "1485:   case 7:",
          "1490:     break;",
          "1492:   case 8:",
          "1494:     {",
          "1495:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[(1) - (2)].re_node), (yyvsp[(2) - (2)].re_node));",
          "1501:     break;",
          "1506:         RE* re = yyget_extra(yyscanner);",
          "1514:     break;",
          "1519:         RE* re = yyget_extra(yyscanner);",
          "1529:     break;",
          "1534:         RE* re = yyget_extra(yyscanner);",
          "1542:     break;",
          "1547:         RE* re = yyget_extra(yyscanner);",
          "1557:     break;",
          "1562:         RE* re = yyget_extra(yyscanner);",
          "1573:     break;",
          "1578:         RE* re = yyget_extra(yyscanner);",
          "1590:     break;",
          "1595:         RE* re = yyget_extra(yyscanner);",
          "1600:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (2)].re_node));",
          "1601:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1606:     break;",
          "1611:         RE* re = yyget_extra(yyscanner);",
          "1616:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[(1) - (3)].re_node));",
          "1617:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFICIENT_MEMORY);",
          "1623:     break;",
          "1625:   case 17:",
          "1630:     break;",
          "1639:     break;",
          "1648:     break;",
          "1657:     break;",
          "1666:     break;",
          "1668:   case 22:",
          "1673:     break;",
          "1682:     break;",
          "1693:     break;",
          "1702:     break;",
          "1711:     break;",
          "1720:     break;",
          "1729:     break;",
          "1738:     break;",
          "1747:     break;",
          "",
          "[Added Lines]",
          "1335:         re->root_node = (yyvsp[0].re_node);",
          "1343:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1351:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
          "1353:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1354:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1366:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1369:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-1].re_node), node);",
          "1379:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1387:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1389:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1390:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1402:         (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-1].re_node), NULL);",
          "1404:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1416:         (yyval.re_node) = yr_re_node_create(RE_NODE_STAR, (yyvsp[-2].re_node), NULL);",
          "1418:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1432:         (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-1].re_node), NULL);",
          "1434:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1446:         (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS, (yyvsp[-2].re_node), NULL);",
          "1448:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1462:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);",
          "1464:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1479:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);",
          "1481:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1497:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-1].re_node), NULL);",
          "1499:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1502:         (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;",
          "1503:         (yyval.re_node)->end = (yyvsp[0].range) >> 16;;",
          "1514:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE, (yyvsp[-2].re_node), NULL);",
          "1516:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1519:         (yyval.re_node)->start = (yyvsp[-1].range) & 0xFFFF;;",
          "1520:         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;",
          "1529:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1577:         (yyval.re_node) = (yyvsp[-1].re_node);",
          "1599:         (yyval.re_node)->value = (yyvsp[0].integer);",
          "1671:         (yyval.re_node)->class_vector = (yyvsp[0].class_vector);",
          "1681:      that yytoken be updated with the new translation.  We take the",
          "1682:      approach of translating immediately before every use of yytoken.",
          "1683:      One alternative is translating here after every semantic action,",
          "1684:      but that translation would be missed if the semantic action invokes",
          "1685:      YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or",
          "1686:      if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an",
          "1687:      incorrect destructor might then be invoked immediately.  In the",
          "1688:      case of YYERROR or YYBACKUP, subsequent parser actions might lead",
          "1689:      to an incorrect destructor call or verbose syntax error message",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1783:   else",
          "1784:     yystate = yydefgoto[yyn - YYNTOKENS];",
          "1786:   goto yynewstate;",
          "1790: | yyerrlab -- here on detecting error |",
          "1792: yyerrlab:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1715: | yyerrlab -- here on detecting error.  |",
          "1720:   yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1794:   if (!yyerrstatus)",
          "1795:     {",
          "1796:       ++yynerrs;",
          "1797: #if ! YYERROR_VERBOSE",
          "1827:      if (yysize != 0)",
          "1828:        goto yyexhaustedlab;",
          "1829:    }",
          "1830:       }",
          "",
          "[Removed Lines]",
          "1798:       yyerror (yyscanner, lex_env, YY_(\"syntax error\"));",
          "1799: #else",
          "1800:       {",
          "1801:  YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);",
          "1802:  if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)",
          "1803:    {",
          "1804:      YYSIZE_T yyalloc = 2 * yysize;",
          "1805:      if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))",
          "1806:        yyalloc = YYSTACK_ALLOC_MAXIMUM;",
          "1807:      if (yymsg != yymsgbuf)",
          "1808:        YYSTACK_FREE (yymsg);",
          "1809:      yymsg = (char *) YYSTACK_ALLOC (yyalloc);",
          "1810:      if (yymsg)",
          "1811:        yymsg_alloc = yyalloc;",
          "1812:      else",
          "1813:        {",
          "1814:   yymsg = yymsgbuf;",
          "1815:   yymsg_alloc = sizeof yymsgbuf;",
          "1816:        }",
          "1817:    }",
          "1819:  if (0 < yysize && yysize <= yymsg_alloc)",
          "1820:    {",
          "1821:      (void) yysyntax_error (yymsg, yystate, yychar);",
          "1822:      yyerror (yyscanner, lex_env, yymsg);",
          "1823:    }",
          "1824:  else",
          "1825:    {",
          "1826:      yyerror (yyscanner, lex_env, YY_(\"syntax error\"));",
          "",
          "[Added Lines]",
          "1729: # define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \\",
          "1730:                                         yyssp, yytoken)",
          "1732:         char const *yymsgp = YY_(\"syntax error\");",
          "1733:         int yysyntax_error_status;",
          "1734:         yysyntax_error_status = YYSYNTAX_ERROR;",
          "1735:         if (yysyntax_error_status == 0)",
          "1736:           yymsgp = yymsg;",
          "1737:         else if (yysyntax_error_status == 1)",
          "1738:           {",
          "1739:             if (yymsg != yymsgbuf)",
          "1740:               YYSTACK_FREE (yymsg);",
          "1741:             yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);",
          "1742:             if (!yymsg)",
          "1743:               {",
          "1744:                 yymsg = yymsgbuf;",
          "1745:                 yymsg_alloc = sizeof yymsgbuf;",
          "1746:                 yysyntax_error_status = 2;",
          "1747:               }",
          "1748:             else",
          "1749:               {",
          "1750:                 yysyntax_error_status = YYSYNTAX_ERROR;",
          "1751:                 yymsgp = yymsg;",
          "1752:               }",
          "1753:           }",
          "1754:         yyerror (yyscanner, lex_env, yymsgp);",
          "1755:         if (yysyntax_error_status == 2)",
          "1756:           goto yyexhaustedlab;",
          "1758: # undef YYSYNTAX_ERROR",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1832:     }",
          "1836:   if (yyerrstatus == 3)",
          "1837:     {",
          "1844:    if (yychar == YYEOF)",
          "1850:         yytoken, &yylval, yyscanner, lex_env);",
          "1851:    yychar = YYEMPTY;",
          "1852:  }",
          "1853:     }",
          "",
          "[Removed Lines]",
          "1841:       if (yychar <= YYEOF)",
          "1842:  {",
          "1845:      YYABORT;",
          "1846:  }",
          "1847:       else",
          "1848:  {",
          "1849:    yydestruct (\"Error: discarding\",",
          "",
          "[Added Lines]",
          "1770:         {",
          "1772:           if (yychar == YYEOF)",
          "1773:             YYABORT;",
          "1774:         }",
          "1776:         {",
          "1777:           yydestruct (\"Error: discarding\",",
          "1778:                       yytoken, &yylval, yyscanner, lex_env);",
          "1779:           yychar = YYEMPTY;",
          "1780:         }",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1881: | yyerrlab1 -- common code for both syntax error and YYERROR.  |",
          "1883: yyerrlab1:",
          "1896:   break;",
          "1897:      }",
          "1898:  }",
          "1901:       if (yyssp == yyss)",
          "1902:  YYABORT;",
          "1905:       yydestruct (\"Error: popping\",",
          "1906:     yystos[yystate], yyvsp, yyscanner, lex_env);",
          "1907:       YYPOPSTACK (1);",
          "1908:       yystate = *yyssp;",
          "1912:   if (yyn == YYFINAL)",
          "1913:     YYACCEPT;",
          "",
          "[Removed Lines]",
          "1886:   for (;;)",
          "1887:     {",
          "1888:       yyn = yypact[yystate];",
          "1889:       if (yyn != YYPACT_NINF)",
          "1890:  {",
          "1891:    yyn += YYTERROR;",
          "1892:    if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)",
          "1893:      {",
          "1894:        yyn = yytable[yyn];",
          "1895:        if (0 < yyn)",
          "1909:       YY_STACK_PRINT (yyss, yyssp);",
          "1910:     }",
          "",
          "[Added Lines]",
          "1817:       if (!yypact_value_is_default (yyn))",
          "1818:         {",
          "1819:           yyn += YYTERROR;",
          "1820:           if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)",
          "1821:             {",
          "1822:               yyn = yytable[yyn];",
          "1823:               if (0 < yyn)",
          "1824:                 break;",
          "1825:             }",
          "1826:         }",
          "1830:         YYABORT;",
          "1834:                   yystos[yystate], yyvsp, yyscanner, lex_env);",
          "1840:   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN",
          "1842:   YY_IGNORE_MAYBE_UNINITIALIZED_END",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1933: | yyabortlab -- YYABORT comes here.  |",
          "1935: yyabortlab:",
          "1937:   goto yyreturn;",
          "1939: #ifndef yyoverflow",
          "",
          "[Removed Lines]",
          "1936:   yyresult = 1;",
          "",
          "[Added Lines]",
          "1866: #if !defined yyoverflow || YYERROR_VERBOSE",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1944:   yyerror (yyscanner, lex_env, YY_(\"memory exhausted\"));",
          "1945:   yyresult = 2;",
          "1951:      yydestruct (\"Cleanup: discarding lookahead\",",
          "1952:    yytoken, &yylval, yyscanner, lex_env);",
          "1955:   YYPOPSTACK (yylen);",
          "1956:   YY_STACK_PRINT (yyss, yyssp);",
          "1958:     {",
          "1959:       yydestruct (\"Cleanup: popping\",",
          "1960:     yystos[*yyssp], yyvsp, yyscanner, lex_env);",
          "",
          "[Removed Lines]",
          "1947: #endif",
          "1949: yyreturn:",
          "1950:   if (yychar != YYEOF && yychar != YYEMPTY)",
          "1957:   while (yyssp != yyss)",
          "",
          "[Added Lines]",
          "1877:   if (yychar != YYEMPTY)",
          "1878:     {",
          "1881:       yytoken = YYTRANSLATE (yychar);",
          "1882:       yydestruct (\"Cleanup: discarding lookahead\",",
          "1883:                   yytoken, &yylval, yyscanner, lex_env);",
          "1884:     }",
          "1892:                   yystos[*yyssp], yyvsp, yyscanner, lex_env);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1965:     YYSTACK_FREE (yyss);",
          "1966: #endif",
          "1967: #if YYERROR_VERBOSE",
          "1968:   if (yymsg != yymsgbuf)",
          "1970: #endif",
          "1972:   return YYID (yyresult);",
          "",
          "[Removed Lines]",
          "1969:     YYSTACK_FREE (yymsg);",
          "1973: }",
          "",
          "[Added Lines]",
          "1903:   return yyresult;",
          "",
          "---------------"
        ],
        "libyara/re_grammar.h||libyara/re_grammar.h": [
          "File: libyara/re_grammar.h -> libyara/re_grammar.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:    it under the terms of the GNU General Public License as published by",
          "13:    This program is distributed in the hope that it will be useful,",
          "14:    but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "",
          "[Removed Lines]",
          "5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006",
          "6:    Free Software Foundation, Inc.",
          "8:    This program is free software; you can redistribute it and/or modify",
          "10:    the Free Software Foundation; either version 2, or (at your option)",
          "11:    any later version.",
          "",
          "[Added Lines]",
          "5:    Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.",
          "7:    This program is free software: you can redistribute it and/or modify",
          "9:    the Free Software Foundation, either version 3 of the License, or",
          "10:    (at your option) any later version.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:    GNU General Public License for more details.",
          "18:    You should have received a copy of the GNU General Public License",
          "24:    part or all of the Bison parser skeleton and distribute that work",
          "",
          "[Removed Lines]",
          "19:    along with this program; if not, write to the Free Software",
          "20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:    This special exception was added by the Free Software Foundation in",
          "37: #ifndef YYTOKENTYPE",
          "38: # define YYTOKENTYPE",
          "55: #endif",
          "57: #define _CHAR_ 258",
          "",
          "[Removed Lines]",
          "41:    enum yytokentype {",
          "42:      _CHAR_ = 258,",
          "43:      _ANY_ = 259,",
          "44:      _RANGE_ = 260,",
          "45:      _CLASS_ = 261,",
          "46:      _WORD_CHAR_ = 262,",
          "47:      _NON_WORD_CHAR_ = 263,",
          "48:      _SPACE_ = 264,",
          "49:      _NON_SPACE_ = 265,",
          "50:      _DIGIT_ = 266,",
          "51:      _NON_DIGIT_ = 267,",
          "52:      _WORD_BOUNDARY_ = 268,",
          "53:      _NON_WORD_BOUNDARY_ = 269",
          "54:    };",
          "",
          "[Added Lines]",
          "33: #ifndef YY_RE_YY_RE_GRAMMAR_H_INCLUDED",
          "34: # define YY_RE_YY_RE_GRAMMAR_H_INCLUDED",
          "36: #ifndef YYDEBUG",
          "37: # define YYDEBUG 0",
          "38: #endif",
          "39: #if YYDEBUG",
          "40: extern int re_yydebug;",
          "41: #endif",
          "46:   enum yytokentype",
          "47:   {",
          "48:     _CHAR_ = 258,",
          "49:     _ANY_ = 259,",
          "50:     _RANGE_ = 260,",
          "51:     _CLASS_ = 261,",
          "52:     _WORD_CHAR_ = 262,",
          "53:     _NON_WORD_CHAR_ = 263,",
          "54:     _SPACE_ = 264,",
          "55:     _NON_SPACE_ = 265,",
          "56:     _DIGIT_ = 266,",
          "57:     _NON_DIGIT_ = 267,",
          "58:     _WORD_BOUNDARY_ = 268,",
          "59:     _NON_WORD_BOUNDARY_ = 269",
          "60:   };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67: #define _WORD_BOUNDARY_ 268",
          "68: #define _NON_WORD_BOUNDARY_ 269",
          "73: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED",
          "76: {",
          "77:   int integer;",
          "78:   uint32_t range;",
          "79:   RE_NODE* re_node;",
          "80:   uint8_t* class_vector;",
          "87: # define YYSTYPE_IS_TRIVIAL 1",
          "88: #endif",
          "",
          "[Removed Lines]",
          "74: typedef union YYSTYPE",
          "75: #line 60 \"re_grammar.y\"",
          "81: }",
          "83: #line 84 \"re_grammar.h\"",
          "84:  YYSTYPE;",
          "86: # define YYSTYPE_IS_DECLARED 1",
          "",
          "[Added Lines]",
          "79: union YYSTYPE",
          "89: };",
          "91: typedef union YYSTYPE YYSTYPE;",
          "93: # define YYSTYPE_IS_DECLARED 1",
          "98: int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);",
          "",
          "---------------"
        ],
        "libyara/re_grammar.y||libyara/re_grammar.y": [
          "File: libyara/re_grammar.y -> libyara/re_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: %}",
          "51: %name-prefix=\"re_yy\"",
          "52: %pure-parser",
          "",
          "[Removed Lines]",
          "49: %debug",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2ed7a46618f93a0dfe011dc608f2b604f365251",
      "candidate_info": {
        "commit_hash": "c2ed7a46618f93a0dfe011dc608f2b604f365251",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/c2ed7a46618f93a0dfe011dc608f2b604f365251",
        "files": [
          "libyara/exec.c",
          "libyara/grammar.c",
          "libyara/grammar.y",
          "libyara/include/yara/exec.h"
        ],
        "message": "Fix issue #654",
        "before_after_code_files": [
          "libyara/exec.c||libyara/exec.c",
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/include/yara/exec.h||libyara/include/yara/exec.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/exec.c||libyara/exec.c": [
          "File: libyara/exec.c -> libyara/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   {",
          "206:     switch(*ip)",
          "207:     {",
          "208:       case OP_HALT:",
          "209:         assert(sp == 0); // When HALT is reached the stack should be empty.",
          "210:         stop = TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:       case OP_NOP:",
          "209:         break;",
          "",
          "---------------"
        ],
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
          "614:      802,   806,   833,   871,   913,   935,   944,   953,   968,   980,",
          "615:      994,  1007,  1018,  1029,  1059,  1028,  1173,  1172,  1251,  1257,",
          "622: };",
          "623: #endif",
          "",
          "[Removed Lines]",
          "616:     1264,  1263,  1326,  1325,  1386,  1395,  1404,  1413,  1422,  1431,",
          "617:     1440,  1444,  1452,  1453,  1458,  1480,  1492,  1508,  1507,  1513,",
          "618:     1524,  1525,  1530,  1537,  1548,  1549,  1553,  1561,  1565,  1575,",
          "619:     1589,  1605,  1615,  1624,  1649,  1661,  1673,  1689,  1701,  1717,",
          "620:     1762,  1781,  1799,  1817,  1835,  1861,  1879,  1889,  1899,  1909,",
          "621:     1919,  1929,  1939",
          "",
          "[Added Lines]",
          "616:     1264,  1263,  1317,  1316,  1368,  1377,  1386,  1395,  1404,  1413,",
          "617:     1422,  1426,  1434,  1435,  1440,  1462,  1474,  1490,  1489,  1495,",
          "618:     1506,  1507,  1512,  1519,  1530,  1531,  1535,  1543,  1547,  1557,",
          "619:     1571,  1587,  1597,  1606,  1631,  1643,  1655,  1671,  1683,  1699,",
          "620:     1744,  1763,  1781,  1799,  1817,  1843,  1861,  1871,  1881,  1891,",
          "621:     1901,  1911,  1921",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2896:     {",
          "2897:         YR_FIXUP* fixup;",
          "2909:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2918:         fixup = compiler->fixup_stack_head;",
          "2926:         compiler->fixup_stack_head = fixup->next;",
          "2927:         yr_free(fixup);",
          "2929:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2930:       }",
          "2932:     break;",
          "2934:   case 72:",
          "2936:     {",
          "2937:         YR_FIXUP* fixup;",
          "2938:         void* jmp_destination_addr;",
          "",
          "[Removed Lines]",
          "2898:         uint8_t* and_addr;",
          "2906:         compiler->last_result = yr_arena_reserve_memory(",
          "2907:             compiler->code_arena, 2);",
          "2911:         compiler->last_result = yr_parser_emit(yyscanner, OP_AND, &and_addr);",
          "2913:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "2898:         uint8_t* nop_addr;",
          "2900:         compiler->last_result = yr_parser_emit(yyscanner, OP_AND, NULL);",
          "2911:         compiler->last_result = yr_parser_emit(yyscanner, OP_NOP, &nop_addr);",
          "2913:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2957:         fixup->next = compiler->fixup_stack_head;",
          "2958:         compiler->fixup_stack_head = fixup;",
          "2959:       }",
          "2961:     break;",
          "2963:   case 73:",
          "2965:     {",
          "2966:         YR_FIXUP* fixup;",
          "2978:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "2987:         fixup = compiler->fixup_stack_head;",
          "2995:         compiler->fixup_stack_head = fixup->next;",
          "2996:         yr_free(fixup);",
          "2998:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2999:       }",
          "3001:     break;",
          "3003:   case 74:",
          "3005:     {",
          "3006:         compiler->last_result = yr_parser_reduce_operation(",
          "3007:             yyscanner, \"<\", (yyvsp[-2].expression), (yyvsp[0].expression));",
          "",
          "[Removed Lines]",
          "2967:         uint8_t* or_addr;",
          "2975:         compiler->last_result = yr_arena_reserve_memory(",
          "2976:             compiler->code_arena, 2);",
          "2980:         compiler->last_result = yr_parser_emit(yyscanner, OP_OR, &or_addr);",
          "2982:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "2958:         uint8_t* nop_addr;",
          "2960:         compiler->last_result = yr_parser_emit(yyscanner, OP_OR, NULL);",
          "2971:         compiler->last_result = yr_parser_emit(yyscanner, OP_NOP, &nop_addr);",
          "2973:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1289:       boolean_expression",
          "1290:       {",
          "1291:         YR_FIXUP* fixup;",
          "1303:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1312:         fixup = compiler->fixup_stack_head;",
          "1320:         compiler->fixup_stack_head = fixup->next;",
          "1321:         yr_free(fixup);",
          "",
          "[Removed Lines]",
          "1292:         uint8_t* and_addr;",
          "1300:         compiler->last_result = yr_arena_reserve_memory(",
          "1301:             compiler->code_arena, 2);",
          "1305:         compiler->last_result = yr_parser_emit(yyscanner, OP_AND, &and_addr);",
          "1307:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1292:         uint8_t* nop_addr;",
          "1294:         compiler->last_result = yr_parser_emit(yyscanner, OP_AND, NULL);",
          "1305:         compiler->last_result = yr_parser_emit(yyscanner, OP_NOP, &nop_addr);",
          "1307:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1350:       boolean_expression",
          "1351:       {",
          "1352:         YR_FIXUP* fixup;",
          "1364:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "1373:         fixup = compiler->fixup_stack_head;",
          "1381:         compiler->fixup_stack_head = fixup->next;",
          "1382:         yr_free(fixup);",
          "",
          "[Removed Lines]",
          "1353:         uint8_t* or_addr;",
          "1361:         compiler->last_result = yr_arena_reserve_memory(",
          "1362:             compiler->code_arena, 2);",
          "1366:         compiler->last_result = yr_parser_emit(yyscanner, OP_OR, &or_addr);",
          "1368:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "",
          "[Added Lines]",
          "1344:         uint8_t* nop_addr;",
          "1346:         compiler->last_result = yr_parser_emit(yyscanner, OP_OR, NULL);",
          "1357:         compiler->last_result = yr_parser_emit(yyscanner, OP_NOP, &nop_addr);",
          "1359:         ERROR_IF(compiler->last_result != ERROR_SUCCESS);",
          "",
          "---------------"
        ],
        "libyara/include/yara/exec.h||libyara/include/yara/exec.h": [
          "File: libyara/include/yara/exec.h -> libyara/include/yara/exec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #define OP_ERROR          0",
          "43: #define OP_HALT           255",
          "45: #define OP_AND            1",
          "46: #define OP_OR             2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #define OP_NOP            254",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0e796caee6672a48ac7af781cf62009c73c6c21",
      "candidate_info": {
        "commit_hash": "f0e796caee6672a48ac7af781cf62009c73c6c21",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/f0e796caee6672a48ac7af781cf62009c73c6c21",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y"
        ],
        "message": "Add missing include.",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: #include <string.h>",
          "78: #include <limits.h>",
          "79: #include <stddef.h>",
          "81: #include <yara/integers.h>",
          "82: #include <yara/utils.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: #include <stdint.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "612: static const yytype_uint16 yyrline[] =",
          "613: {",
          "627: };",
          "628: #endif",
          "",
          "[Removed Lines]",
          "614:        0,   227,   227,   229,   230,   231,   232,   233,   238,   251,",
          "615:      260,   250,   283,   286,   314,   317,   344,   349,   350,   355,",
          "616:      356,   362,   365,   383,   396,   433,   434,   439,   455,   468,",
          "617:      481,   494,   511,   512,   518,   517,   533,   532,   548,   562,",
          "618:      563,   568,   569,   570,   571,   576,   661,   707,   765,   810,",
          "619:      811,   815,   842,   880,   922,   944,   953,   962,   977,   989,",
          "620:     1003,  1016,  1027,  1038,  1068,  1037,  1182,  1181,  1260,  1266,",
          "621:     1273,  1272,  1326,  1325,  1377,  1386,  1395,  1404,  1413,  1422,",
          "622:     1431,  1435,  1443,  1444,  1449,  1471,  1483,  1499,  1498,  1504,",
          "623:     1515,  1516,  1521,  1528,  1539,  1540,  1544,  1552,  1556,  1566,",
          "624:     1580,  1596,  1606,  1615,  1640,  1652,  1664,  1680,  1692,  1708,",
          "625:     1753,  1772,  1806,  1841,  1875,  1900,  1918,  1928,  1938,  1948,",
          "626:     1958,  1968,  1978",
          "",
          "[Added Lines]",
          "615:        0,   226,   226,   228,   229,   230,   231,   232,   237,   250,",
          "616:      259,   249,   282,   285,   313,   316,   343,   348,   349,   354,",
          "617:      355,   361,   364,   382,   395,   432,   433,   438,   454,   467,",
          "618:      480,   493,   510,   511,   517,   516,   532,   531,   547,   561,",
          "619:      562,   567,   568,   569,   570,   575,   660,   706,   764,   809,",
          "620:      810,   814,   841,   879,   921,   943,   952,   961,   976,   988,",
          "621:     1002,  1015,  1026,  1037,  1067,  1036,  1181,  1180,  1259,  1265,",
          "622:     1272,  1271,  1325,  1324,  1376,  1385,  1394,  1403,  1412,  1421,",
          "623:     1430,  1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,",
          "624:     1514,  1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,",
          "625:     1579,  1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,",
          "626:     1752,  1771,  1805,  1840,  1874,  1899,  1917,  1927,  1937,  1947,",
          "627:     1957,  1967,  1977",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <string.h>",
          "36: #include <limits.h>",
          "37: #include <stddef.h>",
          "39: #include <yara/integers.h>",
          "40: #include <yara/utils.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <stdint.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "181afe6ffa80edc37754d28fa28af508f06a1b4a",
      "candidate_info": {
        "commit_hash": "181afe6ffa80edc37754d28fa28af508f06a1b4a",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/181afe6ffa80edc37754d28fa28af508f06a1b4a",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y"
        ],
        "message": "Fix memory leak while parsing certain invalid \"<identifier> at <offset>\" expressions.\n\nExample: rule test {condition:$a at test}\n\nCredit to OSS-Fuzz for finding this bug.",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     } \\",
          "112:     if (((expression.type) & (expected_type)) == 0) \\",
          "113:     { \\",
          "114:       switch(expression.type) \\",
          "",
          "[Removed Lines]",
          "111: #define check_type(expression, expected_type, op) \\",
          "",
          "[Added Lines]",
          "111: #define check_type_with_cleanup(expression, expected_type, op, cleanup) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:               compiler, \"wrong type \\\"boolean\\\" for \" op \" operator\"); \\",
          "131:           break; \\",
          "132:       } \\",
          "133:       compiler->last_result = ERROR_WRONG_TYPE; \\",
          "134:       yyerror(yyscanner, compiler, NULL); \\",
          "135:       YYERROR; \\",
          "136:     }",
          "140: # ifndef YY_NULLPTR",
          "141: #  if defined __cplusplus && 201103L <= __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:       cleanup; \\",
          "140: #define check_type(expression, expected_type, op) \\",
          "141:     check_type_with_cleanup(expression, expected_type, op, )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "607: static const yytype_uint16 yyrline[] =",
          "608: {",
          "622: };",
          "623: #endif",
          "",
          "[Removed Lines]",
          "609:        0,   220,   220,   222,   223,   224,   225,   226,   231,   244,",
          "610:      253,   243,   276,   279,   307,   310,   337,   342,   343,   348,",
          "611:      349,   355,   358,   376,   389,   426,   427,   432,   448,   461,",
          "612:      474,   487,   504,   505,   511,   510,   526,   525,   541,   555,",
          "613:      556,   561,   562,   563,   564,   569,   654,   700,   758,   803,",
          "614:      804,   808,   835,   873,   915,   937,   946,   955,   970,   982,",
          "615:      996,  1009,  1020,  1031,  1061,  1030,  1175,  1174,  1253,  1259,",
          "616:     1266,  1265,  1319,  1318,  1370,  1379,  1388,  1397,  1406,  1415,",
          "617:     1424,  1428,  1436,  1437,  1442,  1464,  1476,  1492,  1491,  1497,",
          "618:     1508,  1509,  1514,  1521,  1532,  1533,  1537,  1545,  1549,  1559,",
          "619:     1573,  1589,  1599,  1608,  1633,  1645,  1657,  1673,  1685,  1701,",
          "620:     1746,  1765,  1783,  1801,  1819,  1845,  1863,  1873,  1883,  1893,",
          "621:     1903,  1913,  1923",
          "",
          "[Added Lines]",
          "615:        0,   226,   226,   228,   229,   230,   231,   232,   237,   250,",
          "616:      259,   249,   282,   285,   313,   316,   343,   348,   349,   354,",
          "617:      355,   361,   364,   382,   395,   432,   433,   438,   454,   467,",
          "618:      480,   493,   510,   511,   517,   516,   532,   531,   547,   561,",
          "619:      562,   567,   568,   569,   570,   575,   660,   706,   764,   809,",
          "620:      810,   814,   841,   879,   921,   943,   952,   961,   976,   988,",
          "621:     1002,  1015,  1026,  1037,  1067,  1036,  1181,  1180,  1259,  1265,",
          "622:     1272,  1271,  1325,  1324,  1376,  1385,  1394,  1403,  1412,  1421,",
          "623:     1430,  1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,",
          "624:     1514,  1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,",
          "625:     1579,  1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,",
          "626:     1752,  1771,  1789,  1807,  1825,  1851,  1869,  1879,  1889,  1899,",
          "627:     1909,  1919,  1929",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2562:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2563:       }",
          "2565:     break;",
          "2567:   case 60:",
          "2569:     {",
          "2572:         compiler->last_result = yr_parser_reduce_string_identifier(",
          "2573:             yyscanner, (yyvsp[-2].c_string), OP_FOUND_AT, (yyvsp[0].expression).value.integer);",
          "",
          "[Removed Lines]",
          "2570:         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"at\");",
          "",
          "[Added Lines]",
          "2576:         check_type_with_cleanup((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, \"at\", yr_free((yyvsp[-2].c_string)));",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     } \\",
          "70:     if (((expression.type) & (expected_type)) == 0) \\",
          "71:     { \\",
          "72:       switch(expression.type) \\",
          "",
          "[Removed Lines]",
          "69: #define check_type(expression, expected_type, op) \\",
          "",
          "[Added Lines]",
          "69: #define check_type_with_cleanup(expression, expected_type, op, cleanup) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:               compiler, \"wrong type \\\"boolean\\\" for \" op \" operator\"); \\",
          "89:           break; \\",
          "90:       } \\",
          "91:       compiler->last_result = ERROR_WRONG_TYPE; \\",
          "92:       yyerror(yyscanner, compiler, NULL); \\",
          "93:       YYERROR; \\",
          "94:     }",
          "95: %}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:       cleanup; \\",
          "98: #define check_type(expression, expected_type, op) \\",
          "99:     check_type_with_cleanup(expression, expected_type, op, )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "995:       }",
          "996:     | _STRING_IDENTIFIER_ _AT_ primary_expression",
          "997:       {",
          "1000:         compiler->last_result = yr_parser_reduce_string_identifier(",
          "1001:             yyscanner, $1, OP_FOUND_AT, $3.value.integer);",
          "",
          "[Removed Lines]",
          "998:         check_type($3, EXPRESSION_TYPE_INTEGER, \"at\");",
          "",
          "[Added Lines]",
          "1004:         check_type_with_cleanup($3, EXPRESSION_TYPE_INTEGER, \"at\", yr_free($1));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9a1105d923912a27546e5a8940ec1ddc19cd1be",
      "candidate_info": {
        "commit_hash": "a9a1105d923912a27546e5a8940ec1ddc19cd1be",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/a9a1105d923912a27546e5a8940ec1ddc19cd1be",
        "files": [
          "configure.ac",
          "libyara/exec.c",
          "libyara/exefiles.c",
          "libyara/grammar.c",
          "libyara/grammar.h",
          "libyara/grammar.y",
          "libyara/hex_grammar.c",
          "libyara/hex_grammar.h",
          "libyara/hex_lexer.c",
          "libyara/include/yara/compiler.h",
          "libyara/include/yara/modules.h",
          "libyara/include/yara/parser.h",
          "libyara/include/yara/pe.h",
          "libyara/include/yara/utils.h",
          "libyara/lexer.c",
          "libyara/parser.c",
          "libyara/re_grammar.c",
          "libyara/re_grammar.h",
          "libyara/re_lexer.c",
          "tests/test-pe.c",
          "tests/test-rules.c"
        ],
        "message": "Big endian fixes (#535)\n\n* Use union instead of PTR_TO_INT64 when emitting bytecode\n\nOn big-endian architectures, this fixes pointer dereference problems\n\n* Fix interpretation of SIZED_STRING in module function argument list\n\n* Add macros for mapping BE/LE encoded integers to host byte order\n\nChaange int16, uint32be etc. and legacy entrypoint operations to use\nthose macros -- this fixes YARA's behavior on big-endian architectures.\n\n* Change tests related to PE files\n\nThe pe module is not suitable for big-endian architectures yet.\n\n* Rebuild lexer, parser",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "libyara/exec.c||libyara/exec.c",
          "libyara/exefiles.c||libyara/exefiles.c",
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.h||libyara/grammar.h",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/hex_grammar.c||libyara/hex_grammar.c",
          "libyara/hex_grammar.h||libyara/hex_grammar.h",
          "libyara/hex_lexer.c||libyara/hex_lexer.c",
          "libyara/include/yara/compiler.h||libyara/include/yara/compiler.h",
          "libyara/include/yara/modules.h||libyara/include/yara/modules.h",
          "libyara/include/yara/parser.h||libyara/include/yara/parser.h",
          "libyara/include/yara/pe.h||libyara/include/yara/pe.h",
          "libyara/include/yara/utils.h||libyara/include/yara/utils.h",
          "libyara/lexer.c||libyara/lexer.c",
          "libyara/parser.c||libyara/parser.c",
          "libyara/re_grammar.c||libyara/re_grammar.c",
          "libyara/re_grammar.h||libyara/re_grammar.h",
          "libyara/re_lexer.c||libyara/re_lexer.c",
          "tests/test-pe.c||tests/test-pe.c",
          "tests/test-rules.c||tests/test-rules.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ],
          "candidate": [
            "libyara/grammar.c||libyara/grammar.c",
            "libyara/grammar.y||libyara/grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     darwin*) CFLAGS=\"$CFLAGS -I/opt/local/include\" ;;",
          "33: esac",
          "35: ACX_PTHREAD(",
          "36:     [LIBS=\"$PTHREAD_LIBS $LIBS\"",
          "37:      CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: AC_C_BIGENDIAN",
          "",
          "---------------"
        ],
        "libyara/exec.c||libyara/exec.c": [
          "File: libyara/exec.c -> libyara/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: #define little_endian_uint8_t(x)     (x)",
          "93: #define little_endian_int8_t(x)      (x)",
          "114: #define function_read(type, endianess) \\",
          "",
          "[Removed Lines]",
          "91: #define little_endian_uint16_t(x)    (x)",
          "92: #define little_endian_uint32_t(x)    (x)",
          "94: #define little_endian_int16_t(x)     (x)",
          "95: #define little_endian_int32_t(x)     (x)",
          "97: #define big_endian_uint8_t(x)         (x)",
          "99: #define big_endian_uint16_t(x) \\",
          "100:     (((((uint16_t)(x) & 0xFF)) << 8) | \\",
          "101:      ((((uint16_t)(x) & 0xFF00)) >> 8))",
          "103: #define big_endian_uint32_t(x) \\",
          "104:     (((((uint32_t)(x) & 0xFF)) << 24) | \\",
          "105:      ((((uint32_t)(x) & 0xFF00)) << 8) | \\",
          "106:      ((((uint32_t)(x) & 0xFF0000)) >> 8) | \\",
          "107:      ((((uint32_t)(x) & 0xFF000000)) >> 24))",
          "109: #define big_endian_int8_t(x)   big_endian_uint8_t(x)",
          "110: #define big_endian_int16_t(x)  big_endian_uint16_t(x)",
          "111: #define big_endian_int32_t(x)  big_endian_uint32_t(x)",
          "",
          "[Added Lines]",
          "92: #define little_endian_uint16_t(x)    yr_le16toh(x)",
          "93: #define little_endian_int16_t(x)     yr_le16toh(x)",
          "94: #define little_endian_uint32_t(x)    yr_le32toh(x)",
          "95: #define little_endian_int32_t(x)     yr_le32toh(x)",
          "97: #define big_endian_uint8_t(x)        (x)",
          "98: #define big_endian_int8_t(x)         (x)",
          "99: #define big_endian_uint16_t(x)       yr_be16toh(x)",
          "100: #define big_endian_int16_t(x)        yr_be16toh(x)",
          "101: #define big_endian_uint32_t(x)       yr_be32toh(x)",
          "102: #define big_endian_int32_t(x)        yr_be32toh(x)",
          "",
          "---------------"
        ],
        "libyara/exefiles.c||libyara/exefiles.c": [
          "File: libyara/exefiles.c -> libyara/exefiles.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <yara/pe.h>",
          "33: #include <yara/elf.h>",
          "34: #include <yara/exec.h>",
          "36: #ifndef NULL",
          "37: #define NULL 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <yara/utils.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   mz_header = (PIMAGE_DOS_HEADER) buffer;",
          "60:     return NULL;",
          "63:     return NULL;",
          "66:                  sizeof(pe_header->Signature) + \\",
          "67:                  sizeof(IMAGE_FILE_HEADER);",
          "69:   if (buffer_length < headers_size)",
          "70:     return NULL;",
          "79:       buffer_length > headers_size)",
          "80:   {",
          "81:     return pe_header;",
          "",
          "[Removed Lines]",
          "59:   if (mz_header->e_magic != IMAGE_DOS_SIGNATURE)",
          "62:   if (mz_header->e_lfanew < 0)",
          "65:   headers_size = mz_header->e_lfanew + \\",
          "72:   pe_header = (PIMAGE_NT_HEADERS32) (buffer + mz_header->e_lfanew);",
          "74:   headers_size += pe_header->FileHeader.SizeOfOptionalHeader;",
          "76:   if (pe_header->Signature == IMAGE_NT_SIGNATURE &&",
          "77:       (pe_header->FileHeader.Machine == IMAGE_FILE_MACHINE_I386 ||",
          "78:        pe_header->FileHeader.Machine == IMAGE_FILE_MACHINE_AMD64) &&",
          "",
          "[Added Lines]",
          "60:   if (yr_le16toh(mz_header->e_magic) != IMAGE_DOS_SIGNATURE)",
          "63:   if ((int32_t)yr_le32toh(mz_header->e_lfanew) < 0)",
          "66:   headers_size = yr_le32toh(mz_header->e_lfanew) +  \\",
          "73:   pe_header = (PIMAGE_NT_HEADERS32) (buffer + yr_le32toh(mz_header->e_lfanew));",
          "75:   headers_size += yr_le16toh(pe_header->FileHeader.SizeOfOptionalHeader);",
          "77:   if (yr_le32toh(pe_header->Signature) == IMAGE_NT_SIGNATURE &&",
          "78:       (yr_le16toh(pe_header->FileHeader.Machine) == IMAGE_FILE_MACHINE_I386 ||",
          "79:        yr_le16toh(pe_header->FileHeader.Machine) == IMAGE_FILE_MACHINE_AMD64) &&",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   section_rva = 0;",
          "102:   section_offset = 0;",
          "105:   {",
          "106:     if ((uint8_t*) section - \\",
          "107:         (uint8_t*) pe_header + sizeof(IMAGE_SECTION_HEADER) < buffer_length)",
          "108:     {",
          "109:       if (rva >= section->VirtualAddress &&",
          "111:       {",
          "114:       }",
          "116:       section++;",
          "",
          "[Removed Lines]",
          "104:   while(i < MIN(pe_header->FileHeader.NumberOfSections, 60))",
          "110:           section_rva <= section->VirtualAddress)",
          "112:         section_rva = section->VirtualAddress;",
          "113:         section_offset = section->PointerToRawData;",
          "",
          "[Added Lines]",
          "105:   while(i < MIN(yr_le16toh(pe_header->FileHeader.NumberOfSections), 60))",
          "111:           section_rva <= yr_le32toh(section->VirtualAddress))",
          "113:         section_rva = yr_le32toh(section->VirtualAddress);",
          "114:         section_offset = yr_le32toh(section->PointerToRawData);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:   elf_ident = (elf_ident_t*) buffer;",
          "141:   {",
          "142:     return elf_ident->_class;",
          "143:   }",
          "",
          "[Removed Lines]",
          "140:   if (elf_ident->magic == ELF_MAGIC)",
          "",
          "[Added Lines]",
          "141:   if (yr_le32toh(elf_ident->magic) == ELF_MAGIC)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:     return 0;",
          "173:     return 0;",
          "176:       sizeof(elf32_section_header_t) * \\",
          "178:     return 0;",
          "180:   section = (elf32_section_header_t*) \\",
          "184:   {",
          "189:     {",
          "193:         return 0;",
          "194:       else",
          "196:     }",
          "198:     section++;",
          "",
          "[Removed Lines]",
          "164:   if (ULONG_MAX - elf_header->sh_entry_count <",
          "165:       sizeof(elf32_section_header_t) * elf_header->sh_entry_count)",
          "171:   if (ULONG_MAX - elf_header->sh_offset <",
          "172:       sizeof(elf32_section_header_t) * elf_header->sh_entry_count)",
          "175:   if (elf_header->sh_offset + \\",
          "177:       elf_header->sh_entry_count > buffer_length)",
          "181:       ((unsigned char*) elf_header + elf_header->sh_offset);",
          "183:   for (i = 0; i < elf_header->sh_entry_count; i++)",
          "185:     if (section->type != ELF_SHT_NULL &&",
          "186:         section->type != ELF_SHT_NOBITS &&",
          "187:         rva >= section->addr &&",
          "188:         rva <  section->addr + section->size)",
          "192:       if (ULONG_MAX - section->offset < (rva - section->addr))",
          "195:         return section->offset + (rva - section->addr);",
          "",
          "[Added Lines]",
          "165:   if (ULONG_MAX - yr_le16toh(elf_header->sh_entry_count) <",
          "166:       sizeof(elf32_section_header_t) * yr_le16toh(elf_header->sh_entry_count))",
          "172:   if (ULONG_MAX - yr_le32toh(elf_header->sh_offset) <",
          "173:       sizeof(elf32_section_header_t) * yr_le16toh(elf_header->sh_entry_count))",
          "176:   if (yr_le32toh(elf_header->sh_offset) + \\",
          "178:       yr_le16toh(elf_header->sh_entry_count) > buffer_length)",
          "182:       ((unsigned char*) elf_header + yr_le32toh(elf_header->sh_offset));",
          "184:   for (i = 0; i < yr_le16toh(elf_header->sh_entry_count); i++)",
          "186:     if (yr_le32toh(section->type) != ELF_SHT_NULL &&",
          "187:         yr_le32toh(section->type) != ELF_SHT_NOBITS &&",
          "188:         rva >= yr_le32toh(section->addr) &&",
          "189:         rva <  yr_le32toh(section->addr) + yr_le32toh(section->size))",
          "193:       if (ULONG_MAX - yr_le32toh(section->offset) < (rva - yr_le32toh(section->addr)))",
          "196:         return yr_le32toh(section->offset) + (rva - yr_le32toh(section->addr));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:     return 0;",
          "224:       sizeof(elf64_section_header_t) * \\",
          "226:     return 0;",
          "228:   section = (elf64_section_header_t*) \\",
          "232:   {",
          "237:     {",
          "239:     }",
          "241:     section++;",
          "",
          "[Removed Lines]",
          "219:   if(ULONG_MAX - elf_header->sh_offset <",
          "220:      sizeof(elf64_section_header_t) * elf_header->sh_entry_count)",
          "223:   if (elf_header->sh_offset + \\",
          "225:       elf_header->sh_entry_count > buffer_length)",
          "229:       ((uint8_t*) elf_header + elf_header->sh_offset);",
          "231:   for (i = 0; i < elf_header->sh_entry_count; i++)",
          "233:     if (section->type != ELF_SHT_NULL &&",
          "234:         section->type != ELF_SHT_NOBITS &&",
          "235:         rva >= section->addr &&",
          "236:         rva <  section->addr + section->size)",
          "238:       return section->offset + (rva - section->addr);",
          "",
          "[Added Lines]",
          "220:   if(ULONG_MAX - yr_le64toh(elf_header->sh_offset) <",
          "221:      sizeof(elf64_section_header_t) * yr_le16toh(elf_header->sh_entry_count))",
          "224:   if (yr_le64toh(elf_header->sh_offset) + \\",
          "226:       yr_le16toh(elf_header->sh_entry_count) > buffer_length)",
          "230:     ((uint8_t*) elf_header + yr_le64toh(elf_header->sh_offset));",
          "232:   for (i = 0; i < yr_le16toh(elf_header->sh_entry_count); i++)",
          "234:     if (yr_le32toh(section->type) != ELF_SHT_NULL &&",
          "235:         yr_le32toh(section->type) != ELF_SHT_NOBITS &&",
          "236:         rva >= yr_le64toh(section->addr) &&",
          "237:         rva <  yr_le64toh(section->addr) + yr_le64toh(section->size))",
          "239:       return yr_le64toh(section->offset) + (rva - yr_le64toh(section->addr));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "259:   {",
          "260:     return yr_pe_rva_to_offset(",
          "261:         pe_header,",
          "263:         buffer_length - ((uint8_t*) pe_header - buffer));",
          "264:   }",
          "",
          "[Removed Lines]",
          "262:         pe_header->OptionalHeader.AddressOfEntryPoint,",
          "",
          "[Added Lines]",
          "263:         yr_le32toh(pe_header->OptionalHeader.AddressOfEntryPoint),",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "269:       elf_header32 = (elf32_header_t*) buffer;",
          "270:       return yr_elf_rva_to_offset_32(",
          "271:           elf_header32,",
          "273:           buffer_length);",
          "275:     case ELF_CLASS_64:",
          "276:       elf_header64 = (elf64_header_t*) buffer;",
          "277:       return yr_elf_rva_to_offset_64(",
          "278:           elf_header64,",
          "280:           buffer_length);",
          "281:   }",
          "",
          "[Removed Lines]",
          "272:           elf_header32->entry,",
          "279:           elf_header64->entry,",
          "",
          "[Added Lines]",
          "273:           yr_le32toh(elf_header32->entry),",
          "280:           yr_le64toh(elf_header64->entry),",
          "",
          "---------------"
        ],
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #include <assert.h>",
          "76: #include <stdio.h>",
          "78: #include <string.h>",
          "79: #include <limits.h>",
          "80: #include <stddef.h>",
          "83: #include <yara/utils.h>",
          "84: #include <yara/strutils.h>",
          "85: #include <yara/compiler.h>",
          "",
          "[Removed Lines]",
          "77: #include <stdint.h>",
          "",
          "[Added Lines]",
          "82: #include <yara/integers.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607: static const yytype_uint16 yyrline[] =",
          "608: {",
          "622: };",
          "623: #endif",
          "",
          "[Removed Lines]",
          "609:        0,   205,   205,   207,   208,   209,   210,   211,   216,   229,",
          "610:      238,   228,   261,   264,   292,   295,   322,   327,   328,   333,",
          "611:      334,   340,   343,   361,   374,   411,   412,   417,   433,   446,",
          "612:      459,   472,   489,   490,   496,   495,   511,   510,   526,   540,",
          "613:      541,   546,   547,   548,   549,   554,   639,   685,   743,   788,",
          "614:      789,   793,   818,   854,   900,   922,   931,   940,   955,   967,",
          "615:      981,   994,  1006,  1036,  1005,  1152,  1151,  1231,  1237,  1244,",
          "616:     1243,  1306,  1305,  1366,  1375,  1384,  1393,  1402,  1411,  1420,",
          "617:     1424,  1432,  1433,  1438,  1460,  1472,  1488,  1487,  1493,  1504,",
          "618:     1505,  1510,  1517,  1528,  1529,  1533,  1541,  1545,  1555,  1569,",
          "619:     1585,  1595,  1604,  1629,  1641,  1653,  1669,  1681,  1697,  1742,",
          "620:     1761,  1779,  1797,  1815,  1841,  1859,  1869,  1879,  1889,  1899,",
          "621:     1909,  1919",
          "",
          "[Added Lines]",
          "609:        0,   218,   218,   220,   221,   222,   223,   224,   229,   242,",
          "610:      251,   241,   274,   277,   305,   308,   335,   340,   341,   346,",
          "611:      347,   353,   356,   374,   387,   424,   425,   430,   446,   459,",
          "612:      472,   485,   502,   503,   509,   508,   524,   523,   539,   553,",
          "613:      554,   559,   560,   561,   562,   567,   652,   698,   756,   801,",
          "614:      802,   806,   831,   867,   913,   935,   944,   953,   968,   980,",
          "615:      994,  1007,  1019,  1049,  1018,  1163,  1162,  1241,  1247,  1254,",
          "616:     1253,  1316,  1315,  1376,  1385,  1394,  1403,  1412,  1421,  1430,",
          "617:     1434,  1442,  1443,  1448,  1470,  1482,  1498,  1497,  1503,  1514,",
          "618:     1515,  1520,  1527,  1538,  1539,  1543,  1551,  1555,  1565,  1579,",
          "619:     1595,  1605,  1614,  1639,  1651,  1663,  1679,  1691,  1707,  1752,",
          "620:     1771,  1789,  1807,  1825,  1851,  1869,  1879,  1889,  1899,  1909,",
          "621:     1919,  1929",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2128:               compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "2129:                   yyscanner,",
          "2130:                   OP_OBJ_LOAD,",
          "2132:                   NULL,",
          "2133:                   NULL);",
          "",
          "[Removed Lines]",
          "2131:                   PTR_TO_INT64(id),",
          "",
          "[Added Lines]",
          "2131:                   id,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2148:               compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "2149:                   yyscanner,",
          "2150:                   OP_PUSH_RULE,",
          "2152:                   NULL,",
          "2153:                   NULL);",
          "",
          "[Removed Lines]",
          "2151:                   PTR_TO_INT64(rule),",
          "",
          "[Added Lines]",
          "2151:                   rule,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2192:               compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "2193:                   yyscanner,",
          "2194:                   OP_OBJ_FIELD,",
          "2196:                   NULL,",
          "2197:                   NULL);",
          "",
          "[Removed Lines]",
          "2195:                   PTR_TO_INT64(ident),",
          "",
          "[Added Lines]",
          "2195:                   ident,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2302:             compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "2303:                 yyscanner,",
          "2304:                 OP_CALL,",
          "2306:                 NULL,",
          "2307:                 NULL);",
          "",
          "[Removed Lines]",
          "2305:                 PTR_TO_INT64(args_fmt),",
          "",
          "[Added Lines]",
          "2305:                 args_fmt,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2437:           compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "2438:               yyscanner,",
          "2439:               OP_PUSH,",
          "2441:               NULL,",
          "2442:               NULL);",
          "",
          "[Removed Lines]",
          "2440:               PTR_TO_INT64(re->root_node->forward_code),",
          "",
          "[Added Lines]",
          "2440:               re->root_node->forward_code,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2684:           yr_parser_emit_with_arg_reloc(",
          "2685:               yyscanner,",
          "2686:               OP_JNUNDEF,",
          "2689:               NULL,",
          "2690:               NULL);",
          "2691:         }",
          "",
          "[Removed Lines]",
          "2687:               PTR_TO_INT64(",
          "2688:                   compiler->loop_address[compiler->loop_depth]),",
          "",
          "[Added Lines]",
          "2687:               compiler->loop_address[compiler->loop_depth],",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2708:           yr_parser_emit_with_arg_reloc(",
          "2709:               yyscanner,",
          "2710:               OP_JLE,",
          "2713:               NULL,",
          "2714:               NULL);",
          "",
          "[Removed Lines]",
          "2711:               PTR_TO_INT64(",
          "2712:                 compiler->loop_address[compiler->loop_depth]),",
          "",
          "[Added Lines]",
          "2710:               compiler->loop_address[compiler->loop_depth],",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2802:         yr_parser_emit_with_arg_reloc(",
          "2803:             yyscanner,",
          "2804:             OP_JNUNDEF,",
          "2807:             NULL,",
          "2808:             NULL);",
          "",
          "[Removed Lines]",
          "2805:             PTR_TO_INT64(",
          "2806:                 compiler->loop_address[compiler->loop_depth]),",
          "",
          "[Added Lines]",
          "2803:             compiler->loop_address[compiler->loop_depth],",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2827:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2829:       }",
          "2831:     break;",
          "2833:   case 67:",
          "2835:     {",
          "2836:         yr_parser_emit(yyscanner, OP_OF, NULL);",
          "2838:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2839:       }",
          "2841:     break;",
          "2843:   case 68:",
          "2845:     {",
          "2846:         yr_parser_emit(yyscanner, OP_NOT, NULL);",
          "2848:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2849:       }",
          "2851:     break;",
          "2853:   case 69:",
          "2855:     {",
          "2856:         YR_FIXUP* fixup;",
          "2859:         compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "2860:             yyscanner,",
          "",
          "[Removed Lines]",
          "2857:         int64_t* jmp_destination_addr;",
          "",
          "[Added Lines]",
          "2854:         void* jmp_destination_addr;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2915:         compiler->fixup_stack_head = fixup->next;",
          "2916:         yr_free(fixup);",
          "2918:         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;",
          "2919:       }",
          "2921:     break;",
          "2923:   case 71:",
          "2925:     {",
          "2926:         YR_FIXUP* fixup;",
          "2929:         compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "2930:             yyscanner,",
          "",
          "[Removed Lines]",
          "2927:         int64_t* jmp_destination_addr;",
          "",
          "[Added Lines]",
          "2924:         void* jmp_destination_addr;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3310:           compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "3311:               yyscanner,",
          "3312:               OP_PUSH,",
          "3314:               NULL,",
          "3315:               NULL);",
          "",
          "[Removed Lines]",
          "3313:               PTR_TO_INT64(sized_string),",
          "",
          "[Added Lines]",
          "3310:               sized_string,",
          "",
          "---------------"
        ],
        "libyara/grammar.h||libyara/grammar.h": [
          "File: libyara/grammar.h -> libyara/grammar.h"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:               compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "610:                   yyscanner,",
          "611:                   OP_OBJ_LOAD,",
          "613:                   NULL,",
          "614:                   NULL);",
          "",
          "[Removed Lines]",
          "612:                   PTR_TO_INT64(id),",
          "",
          "[Added Lines]",
          "612:                   id,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "629:               compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "630:                   yyscanner,",
          "631:                   OP_PUSH_RULE,",
          "633:                   NULL,",
          "634:                   NULL);",
          "",
          "[Removed Lines]",
          "632:                   PTR_TO_INT64(rule),",
          "",
          "[Added Lines]",
          "632:                   rule,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "669:               compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "670:                   yyscanner,",
          "671:                   OP_OBJ_FIELD,",
          "673:                   NULL,",
          "674:                   NULL);",
          "",
          "[Removed Lines]",
          "672:                   PTR_TO_INT64(ident),",
          "",
          "[Added Lines]",
          "672:                   ident,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "772:             compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "773:                 yyscanner,",
          "774:                 OP_CALL,",
          "776:                 NULL,",
          "777:                 NULL);",
          "",
          "[Removed Lines]",
          "775:                 PTR_TO_INT64(args_fmt),",
          "",
          "[Added Lines]",
          "775:                 args_fmt,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "896:           compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "897:               yyscanner,",
          "898:               OP_PUSH,",
          "900:               NULL,",
          "901:               NULL);",
          "",
          "[Removed Lines]",
          "899:               PTR_TO_INT64(re->root_node->forward_code),",
          "",
          "[Added Lines]",
          "899:               re->root_node->forward_code,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1106:           yr_parser_emit_with_arg_reloc(",
          "1107:               yyscanner,",
          "1108:               OP_JNUNDEF,",
          "1111:               NULL,",
          "1112:               NULL);",
          "1113:         }",
          "",
          "[Removed Lines]",
          "1109:               PTR_TO_INT64(",
          "1110:                   compiler->loop_address[compiler->loop_depth]),",
          "",
          "[Added Lines]",
          "1109:               compiler->loop_address[compiler->loop_depth],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1130:           yr_parser_emit_with_arg_reloc(",
          "1131:               yyscanner,",
          "1132:               OP_JLE,",
          "1135:               NULL,",
          "1136:               NULL);",
          "",
          "[Removed Lines]",
          "1133:               PTR_TO_INT64(",
          "1134:                 compiler->loop_address[compiler->loop_depth]),",
          "",
          "[Added Lines]",
          "1132:               compiler->loop_address[compiler->loop_depth],",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1216:         yr_parser_emit_with_arg_reloc(",
          "1217:             yyscanner,",
          "1218:             OP_JNUNDEF,",
          "1221:             NULL,",
          "1222:             NULL);",
          "",
          "[Removed Lines]",
          "1219:             PTR_TO_INT64(",
          "1220:                 compiler->loop_address[compiler->loop_depth]),",
          "",
          "[Added Lines]",
          "1217:             compiler->loop_address[compiler->loop_depth],",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1256:     | boolean_expression _AND_",
          "1257:       {",
          "1258:         YR_FIXUP* fixup;",
          "1261:         compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "1262:             yyscanner,",
          "",
          "[Removed Lines]",
          "1259:         int64_t* jmp_destination_addr;",
          "",
          "[Added Lines]",
          "1256:         void* jmp_destination_addr;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1318:     | boolean_expression _OR_",
          "1319:       {",
          "1320:         YR_FIXUP* fixup;",
          "1323:         compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "1324:             yyscanner,",
          "",
          "[Removed Lines]",
          "1321:         int64_t* jmp_destination_addr;",
          "",
          "[Added Lines]",
          "1318:         void* jmp_destination_addr;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1630:           compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "1631:               yyscanner,",
          "1632:               OP_PUSH,",
          "1634:               NULL,",
          "1635:               NULL);",
          "",
          "[Removed Lines]",
          "1633:               PTR_TO_INT64(sized_string),",
          "",
          "[Added Lines]",
          "1630:               sized_string,",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.c||libyara/hex_grammar.c": [
          "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: #include <string.h>",
          "76: #include <limits.h>",
          "78: #include <yara/utils.h>",
          "79: #include <yara/hex_lexer.h>",
          "80: #include <yara/limits.h>",
          "",
          "[Removed Lines]",
          "75: #include <stdint.h>",
          "",
          "[Added Lines]",
          "77: #include <yara/integers.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477: static const yytype_uint16 yyrline[] =",
          "478: {",
          "482: };",
          "483: #endif",
          "",
          "[Removed Lines]",
          "479:        0,    92,    92,   101,   105,   114,   176,   180,   193,   197,",
          "480:      206,   220,   219,   232,   261,   299,   327,   353,   357,   371,",
          "481:      379",
          "",
          "[Added Lines]",
          "479:        0,   105,   105,   114,   118,   127,   189,   193,   206,   210,",
          "480:      219,   233,   232,   245,   274,   312,   340,   366,   370,   384,",
          "481:      392",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.h||libyara/hex_grammar.h": [
          "File: libyara/hex_grammar.h -> libyara/hex_grammar.h"
        ],
        "libyara/hex_lexer.c||libyara/hex_lexer.c": [
          "File: libyara/hex_lexer.c -> libyara/hex_lexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #define FLEX_SCANNER",
          "10: #define YY_FLEX_MAJOR_VERSION 2",
          "11: #define YY_FLEX_MINOR_VERSION 6",
          "13: #if YY_FLEX_SUBMINOR_VERSION > 0",
          "14: #define FLEX_BETA",
          "15: #endif",
          "",
          "[Removed Lines]",
          "12: #define YY_FLEX_SUBMINOR_VERSION 0",
          "",
          "[Added Lines]",
          "12: #define YY_FLEX_SUBMINOR_VERSION 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: #define yyconst const",
          "108: #else",
          "110: #endif",
          "",
          "[Removed Lines]",
          "91: #ifdef __cplusplus",
          "94: #define YY_USE_CONST",
          "99: #if defined (__STDC__)",
          "101: #define YY_USE_CONST",
          "106: #ifdef YY_USE_CONST",
          "109: #define yyconst",
          "",
          "[Added Lines]",
          "94: #if defined(__GNUC__) && __GNUC__ >= 3",
          "95: #define yynoreturn __attribute__((__noreturn__))",
          "97: #define yynoreturn",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "241:  yy_size_t yy_buf_size;",
          "246:  yy_size_t yy_n_chars;",
          "",
          "[Added Lines]",
          "229:  int yy_buf_size;",
          "234:  int yy_n_chars;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323: YY_BUFFER_STATE hex_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );",
          "324: YY_BUFFER_STATE hex_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );",
          "327: void *hex_yyalloc (yy_size_t ,yyscan_t yyscanner );",
          "328: void *hex_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );",
          "",
          "[Removed Lines]",
          "325: YY_BUFFER_STATE hex_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );",
          "",
          "[Added Lines]",
          "313: YY_BUFFER_STATE hex_yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "366: static yy_state_type yy_get_previous_state (yyscan_t yyscanner );",
          "367: static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);",
          "368: static int yy_get_next_buffer (yyscan_t yyscanner );",
          "377: #define YY_DO_BEFORE_ACTION \\",
          "378:  yyg->yytext_ptr = yy_bp; \\",
          "380:  yyg->yy_hold_char = *yy_cp; \\",
          "382:  yyg->yy_c_buf_p = yy_cp;",
          "",
          "[Removed Lines]",
          "369: #if defined(__GNUC__) && __GNUC__ >= 3",
          "370: __attribute__((__noreturn__))",
          "371: #endif",
          "372: static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );",
          "379:  yyleng = (size_t) (yy_cp - yy_bp); \\",
          "",
          "[Added Lines]",
          "357: static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );",
          "364:  yyleng = (int) (yy_cp - yy_bp); \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "514: SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "",
          "[Removed Lines]",
          "517: #line 20 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "502: #line 33 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557: #define YY_NO_INPUT 1",
          "562: #define INITIAL 0",
          "563: #define comment 1",
          "",
          "[Removed Lines]",
          "560: #line 548 \"hex_lexer.c\"",
          "",
          "[Added Lines]",
          "545: #line 546 \"hex_lexer.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "590:     char yy_hold_char;",
          "593:     char *yy_c_buf_p;",
          "594:     int yy_init;",
          "595:     int yy_start;",
          "",
          "[Removed Lines]",
          "591:     yy_size_t yy_n_chars;",
          "592:     yy_size_t yyleng_r;",
          "",
          "[Added Lines]",
          "576:     int yy_n_chars;",
          "577:     int yyleng_r;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "643: void hex_yyset_out  (FILE * _out_str ,yyscan_t yyscanner );",
          "647: char *hex_yyget_text (yyscan_t yyscanner );",
          "",
          "[Removed Lines]",
          "645: yy_size_t hex_yyget_leng (yyscan_t yyscanner );",
          "",
          "[Added Lines]",
          "630:    int hex_yyget_leng (yyscan_t yyscanner );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "711: #endif",
          "",
          "[Removed Lines]",
          "710: #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)",
          "",
          "[Added Lines]",
          "695: #define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "731:  else \\",
          "732:   { \\",
          "733:   errno=0; \\",
          "735:    { \\",
          "736:    if( errno != EINTR) \\",
          "737:     { \\",
          "",
          "[Removed Lines]",
          "734:   while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\",
          "",
          "[Added Lines]",
          "719:   while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "832:   }",
          "834:  {",
          "842:   {",
          "",
          "[Removed Lines]",
          "835: #line 81 \"hex_lexer.l\"",
          "839: #line 827 \"hex_lexer.c\"",
          "",
          "[Added Lines]",
          "820: #line 94 \"hex_lexer.l\"",
          "824: #line 825 \"hex_lexer.c\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "866:     if ( yy_current_state >= 35 )",
          "867:      yy_c = yy_meta[(unsigned int) yy_c];",
          "868:     }",
          "870:    ++yy_cp;",
          "871:    }",
          "872:   while ( yy_current_state != 34 );",
          "",
          "[Removed Lines]",
          "869:    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "854:    yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "904: case 1:",
          "905: YY_RULE_SETUP",
          "907: {",
          "909:   yylval->integer = xtoi(yytext);",
          "",
          "[Removed Lines]",
          "906: #line 84 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "891: #line 97 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "912:  YY_BREAK",
          "913: case 2:",
          "914: YY_RULE_SETUP",
          "916: {",
          "918:   yytext[1] = '0'; // replace ? by 0",
          "",
          "[Removed Lines]",
          "915: #line 90 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "900: #line 103 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "922:  YY_BREAK",
          "923: case 3:",
          "924: YY_RULE_SETUP",
          "926: {",
          "928:   yytext[0] = '0'; // replace ? by 0",
          "",
          "[Removed Lines]",
          "925: #line 97 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "910: #line 110 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "932:  YY_BREAK",
          "933: case 4:",
          "934: YY_RULE_SETUP",
          "936: {",
          "938:   yylval->integer = 0x0000;",
          "",
          "[Removed Lines]",
          "935: #line 104 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "920: #line 117 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "941:  YY_BREAK",
          "942: case 5:",
          "943: YY_RULE_SETUP",
          "945: {",
          "947:   BEGIN(range);",
          "",
          "[Removed Lines]",
          "944: #line 110 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "929: #line 123 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "951: case 6:",
          "953: YY_RULE_SETUP",
          "956:  YY_BREAK",
          "957: case 7:",
          "958: YY_RULE_SETUP",
          "961:  YY_BREAK",
          "962: case 8:",
          "963: YY_RULE_SETUP",
          "965: {",
          "966:   return yytext[0];",
          "967: }",
          "968:  YY_BREAK",
          "969: case 9:",
          "970: YY_RULE_SETUP",
          "972: {",
          "974:   yylval->integer = atoi(yytext);",
          "",
          "[Removed Lines]",
          "954: #line 116 \"hex_lexer.l\"",
          "959: #line 118 \"hex_lexer.l\"",
          "964: #line 120 \"hex_lexer.l\"",
          "971: #line 124 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "939: #line 129 \"hex_lexer.l\"",
          "944: #line 131 \"hex_lexer.l\"",
          "949: #line 133 \"hex_lexer.l\"",
          "956: #line 137 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "977:  YY_BREAK",
          "978: case 10:",
          "979: YY_RULE_SETUP",
          "981: {",
          "983:   BEGIN(INITIAL);",
          "",
          "[Removed Lines]",
          "980: #line 130 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "965: #line 143 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "987: case 11:",
          "989: YY_RULE_SETUP",
          "992:  YY_BREAK",
          "993: case 12:",
          "994: YY_RULE_SETUP",
          "996: {",
          "998:   yyerror(yyscanner, lex_env, \"invalid character in hex string jump\");",
          "",
          "[Removed Lines]",
          "990: #line 136 \"hex_lexer.l\"",
          "995: #line 138 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "975: #line 149 \"hex_lexer.l\"",
          "980: #line 151 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1002: case 13:",
          "1004: YY_RULE_SETUP",
          "1007:  YY_BREAK",
          "1008: case 14:",
          "1009: YY_RULE_SETUP",
          "1011: {        // pass valid characters to the parser",
          "1013:   return yytext[0];",
          "",
          "[Removed Lines]",
          "1005: #line 144 \"hex_lexer.l\"",
          "1010: #line 146 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "990: #line 157 \"hex_lexer.l\"",
          "995: #line 159 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1015:  YY_BREAK",
          "1016: case 15:",
          "1017: YY_RULE_SETUP",
          "1019: {               // reject all other characters",
          "1021:   yyerror(yyscanner, lex_env, \"invalid character in hex string\");",
          "",
          "[Removed Lines]",
          "1018: #line 151 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "1003: #line 164 \"hex_lexer.l\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1024:  YY_BREAK",
          "1025: case 16:",
          "1026: YY_RULE_SETUP",
          "1028: ECHO;",
          "1029:  YY_BREAK",
          "1031: case YY_STATE_EOF(INITIAL):",
          "1032: case YY_STATE_EOF(comment):",
          "1033: case YY_STATE_EOF(range):",
          "",
          "[Removed Lines]",
          "1027: #line 157 \"hex_lexer.l\"",
          "1030: #line 1018 \"hex_lexer.c\"",
          "",
          "[Added Lines]",
          "1012: #line 170 \"hex_lexer.l\"",
          "1015: #line 1016 \"hex_lexer.c\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1219:  else",
          "1220:   {",
          "1222:    YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;",
          "1224:   while ( num_to_read <= 0 )",
          "",
          "[Removed Lines]",
          "1221:    yy_size_t num_to_read =",
          "",
          "[Added Lines]",
          "1206:    int num_to_read =",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1233:    if ( b->yy_is_our_buffer )",
          "1234:     {",
          "1237:     if ( new_size <= 0 )",
          "1238:      b->yy_buf_size += b->yy_buf_size / 8;",
          "",
          "[Removed Lines]",
          "1235:     yy_size_t new_size = b->yy_buf_size * 2;",
          "",
          "[Added Lines]",
          "1220:     int new_size = b->yy_buf_size * 2;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1245:     }",
          "1246:    else",
          "1250:    if ( ! b->yy_ch_buf )",
          "1251:     YY_FATAL_ERROR(",
          "",
          "[Removed Lines]",
          "1248:     b->yy_ch_buf = 0;",
          "",
          "[Added Lines]",
          "1233:     b->yy_ch_buf = NULL;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1287:  else",
          "1288:   ret_val = EOB_ACT_CONTINUE_SCAN;",
          "1293:   YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hex_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );",
          "1294:   if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )",
          "1295:    YY_FATAL_ERROR( \"out of dynamic memory in yy_get_next_buffer()\" );",
          "",
          "[Removed Lines]",
          "1290:  if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {",
          "1292:   yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);",
          "",
          "[Added Lines]",
          "1275:  if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {",
          "1277:   int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1328:    if ( yy_current_state >= 35 )",
          "1329:     yy_c = yy_meta[(unsigned int) yy_c];",
          "1330:    }",
          "1332:   }",
          "1334:  return yy_current_state;",
          "",
          "[Removed Lines]",
          "1331:   yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "1316:   yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1357:   if ( yy_current_state >= 35 )",
          "1358:    yy_c = yy_meta[(unsigned int) yy_c];",
          "1359:   }",
          "1361:  yy_is_jam = (yy_current_state == 34);",
          "1363:  (void)yyg;",
          "",
          "[Removed Lines]",
          "1360:  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "1345:  yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1394:   else",
          "1397:    ++yyg->yy_c_buf_p;",
          "1399:    switch ( yy_get_next_buffer( yyscanner ) )",
          "",
          "[Removed Lines]",
          "1396:    yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;",
          "",
          "[Added Lines]",
          "1381:    int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1417:     case EOB_ACT_END_OF_FILE:",
          "1418:      {",
          "1419:      if ( hex_yywrap(yyscanner ) )",
          "1422:      if ( ! yyg->yy_did_buffer_switch_on_eof )",
          "1423:       YY_NEW_FILE;",
          "",
          "[Removed Lines]",
          "1420:       return EOF;",
          "",
          "[Added Lines]",
          "1405:       return 0;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1681: static void hex_yyensure_buffer_stack (yyscan_t yyscanner)",
          "1682: {",
          "1684:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1686:  if (!yyg->yy_buffer_stack) {",
          "",
          "[Removed Lines]",
          "1683:  yy_size_t num_to_alloc;",
          "",
          "[Added Lines]",
          "1668:  int num_to_alloc;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1693:   yyg->yy_buffer_stack = (struct yy_buffer_state**)hex_yyalloc",
          "1694:         (num_to_alloc * sizeof(struct yy_buffer_state*)",
          "1695:         , yyscanner);",
          "",
          "[Removed Lines]",
          "1692:   num_to_alloc = 1; // After all that talk, this was set to 1 anyways...",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1736:       base[size-2] != YY_END_OF_BUFFER_CHAR ||",
          "1737:       base[size-1] != YY_END_OF_BUFFER_CHAR )",
          "1741:  b = (YY_BUFFER_STATE) hex_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );",
          "1742:  if ( ! b )",
          "",
          "[Removed Lines]",
          "1739:   return 0;",
          "",
          "[Added Lines]",
          "1724:   return NULL;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1746:  b->yy_buf_pos = b->yy_ch_buf = base;",
          "1747:  b->yy_is_our_buffer = 0;",
          "1749:  b->yy_n_chars = b->yy_buf_size;",
          "1750:  b->yy_is_interactive = 0;",
          "1751:  b->yy_at_bol = 1;",
          "",
          "[Removed Lines]",
          "1748:  b->yy_input_file = 0;",
          "",
          "[Added Lines]",
          "1733:  b->yy_input_file = NULL;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1768: YY_BUFFER_STATE hex_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)",
          "1769: {",
          "1772: }",
          "",
          "[Removed Lines]",
          "1771:  return hex_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);",
          "",
          "[Added Lines]",
          "1756:  return hex_yy_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1782: {",
          "1783:  YY_BUFFER_STATE b;",
          "1784:  char *buf;",
          "",
          "[Removed Lines]",
          "1781: YY_BUFFER_STATE hex_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "1766: YY_BUFFER_STATE hex_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1786:  yy_size_t i;",
          "1790:  buf = (char *) hex_yyalloc(n ,yyscanner );",
          "1791:  if ( ! buf )",
          "1792:   YY_FATAL_ERROR( \"out of dynamic memory in hex_yy_scan_bytes()\" );",
          "",
          "[Removed Lines]",
          "1789:  n = _yybytes_len + 2;",
          "",
          "[Added Lines]",
          "1774:  n = (yy_size_t) _yybytes_len + 2;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1812: #define YY_EXIT_FAILURE 2",
          "1813: #endif",
          "1816: {",
          "1817:  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1818:  (void)yyg;",
          "",
          "[Removed Lines]",
          "1815: static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "1800: static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1899: {",
          "1900:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "1901:     return yyleng;",
          "",
          "[Removed Lines]",
          "1898: yy_size_t hex_yyget_leng  (yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "1883: int hex_yyget_leng  (yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2070:     yyg->yy_buffer_stack_top = 0;",
          "2071:     yyg->yy_buffer_stack_max = 0;",
          "2073:     yyg->yy_init = 0;",
          "2074:     yyg->yy_start = 0;",
          "",
          "[Removed Lines]",
          "2069:     yyg->yy_buffer_stack = 0;",
          "2072:     yyg->yy_c_buf_p = (char *) 0;",
          "",
          "[Added Lines]",
          "2054:     yyg->yy_buffer_stack = NULL;",
          "2057:     yyg->yy_c_buf_p = NULL;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2082:     yyin = stdin;",
          "2083:     yyout = stdout;",
          "2084: #else",
          "2087: #endif",
          "",
          "[Removed Lines]",
          "2085:     yyin = (FILE *) 0;",
          "2086:     yyout = (FILE *) 0;",
          "",
          "[Added Lines]",
          "2070:     yyin = NULL;",
          "2071:     yyout = NULL;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2153: {",
          "2154:  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2155:  (void)yyg;",
          "2157: }",
          "2159: void *hex_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)",
          "",
          "[Removed Lines]",
          "2156:  return (void *) malloc( size );",
          "",
          "[Added Lines]",
          "2141:  return malloc(size);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2172: }",
          "2174: void hex_yyfree (void * ptr , yyscan_t yyscanner)",
          "",
          "[Removed Lines]",
          "2171:  return (void *) realloc( (char *) ptr, size );",
          "",
          "[Added Lines]",
          "2156:  return realloc(ptr, size);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2181: #define YYTABLES_NAME \"yytables\"",
          "",
          "[Removed Lines]",
          "2183: #line 157 \"hex_lexer.l\"",
          "",
          "[Added Lines]",
          "2168: #line 170 \"hex_lexer.l\"",
          "",
          "---------------"
        ],
        "libyara/include/yara/compiler.h||libyara/include/yara/compiler.h": [
          "File: libyara/include/yara/compiler.h -> libyara/include/yara/compiler.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: typedef struct _YR_FIXUP",
          "56: {",
          "58:   struct _YR_FIXUP* next;",
          "60: } YR_FIXUP;",
          "",
          "[Removed Lines]",
          "57:   int64_t* address;",
          "",
          "[Added Lines]",
          "57:   void* address;",
          "",
          "---------------"
        ],
        "libyara/include/yara/modules.h||libyara/include/yara/modules.h": [
          "File: libyara/include/yara/modules.h -> libyara/include/yara/modules.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: #define sized_string_argument(n) \\",
          "277: #define string_argument(n) \\",
          "278:     (sized_string_argument(n)->c_string)",
          "",
          "[Removed Lines]",
          "275:     ((SIZED_STRING*)(size_t)((int64_t*) __args)[n-1])",
          "",
          "[Added Lines]",
          "275:     (*(SIZED_STRING**) &(((int64_t*) __args)[n-1]))",
          "",
          "---------------"
        ],
        "libyara/include/yara/parser.h||libyara/include/yara/parser.h": [
          "File: libyara/include/yara/parser.h -> libyara/include/yara/parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: int yr_parser_emit_with_arg_reloc(",
          "60:     yyscan_t yyscanner,",
          "61:     uint8_t instruction,",
          "63:     uint8_t** instruction_address,",
          "67: int yr_parser_check_types(",
          "",
          "[Removed Lines]",
          "62:     int64_t argument,",
          "64:     int64_t** argument_address);",
          "",
          "[Added Lines]",
          "62:     void* argument,",
          "64:     void** argument_address);",
          "",
          "---------------"
        ],
        "libyara/include/yara/pe.h||libyara/include/yara/pe.h": [
          "File: libyara/include/yara/pe.h -> libyara/include/yara/pe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #define YR_PE_H",
          "33: #include <yara/types.h>",
          "35: #pragma pack(push, 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <yara/utils.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312: #define IMAGE_FIRST_SECTION( ntheader ) ((PIMAGE_SECTION_HEADER) \\",
          "313:     ((BYTE*)ntheader + \\",
          "314:      FIELD_OFFSET( IMAGE_NT_HEADERS32, OptionalHeader ) + \\",
          "316:     ))",
          "",
          "[Removed Lines]",
          "315:      ((PIMAGE_NT_HEADERS32)(ntheader))->FileHeader.SizeOfOptionalHeader \\",
          "",
          "[Added Lines]",
          "316:      yr_le16toh(((PIMAGE_NT_HEADERS32)(ntheader))->FileHeader.SizeOfOptionalHeader) \\",
          "",
          "---------------"
        ],
        "libyara/include/yara/utils.h||libyara/include/yara/utils.h": [
          "File: libyara/include/yara/utils.h -> libyara/include/yara/utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #ifndef YR_UTILS_H",
          "32: #define YR_UTILS_H",
          "34: #ifndef TRUE",
          "35: #define TRUE 1",
          "36: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <config.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: #define yr_min(x, y) ((x < y) ? (x) : (y))",
          "69: #define yr_max(x, y) ((x > y) ? (x) : (y))",
          "74: #ifdef NDEBUG",
          "",
          "[Removed Lines]",
          "71: #define PTR_TO_INT64(x)  ((int64_t) (size_t) x)",
          "",
          "[Added Lines]",
          "73: #if defined(__GNUC__)",
          "74: #define yr_bswap16(x) __builtin_bswap16(x)",
          "75: #define yr_bswap32(x) __builtin_bswap32(x)",
          "76: #define yr_bswap64(x) __builtin_bswap64(x)",
          "77: #elif defined(_MSC_VER)",
          "78: #define yr_bswap16(x) _byteswap_ushort(x)",
          "79: #define yr_bswap32(x) _byteswap_ulong(x)",
          "80: #define yr_bswap64(x) _byteswap_uint64(x)",
          "81: #else",
          "82: #error Unknown compiler: Add yr_bswap* definitions",
          "83: #endif",
          "85: #if defined(WORDS_BIGENDIAN)",
          "86: #define yr_le16toh(x) yr_bswap16(x)",
          "87: #define yr_le32toh(x) yr_bswap32(x)",
          "88: #define yr_le64toh(x) yr_bswap64(x)",
          "89: #define yr_be16toh(x) (x)",
          "90: #define yr_be32toh(x) (x)",
          "91: #define yr_be64toh(x) (x)",
          "92: #else",
          "93: #define yr_le16toh(x) (x)",
          "94: #define yr_le32toh(x) (x)",
          "95: #define yr_le64toh(x) (x)",
          "96: #define yr_be16toh(x) yr_bswap16(x)",
          "97: #define yr_be32toh(x) yr_bswap32(x)",
          "98: #define yr_be64toh(x) yr_bswap64(x)",
          "99: #endif",
          "",
          "---------------"
        ],
        "libyara/lexer.c||libyara/lexer.c": [
          "File: libyara/lexer.c -> libyara/lexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #define FLEX_SCANNER",
          "10: #define YY_FLEX_MAJOR_VERSION 2",
          "11: #define YY_FLEX_MINOR_VERSION 6",
          "13: #if YY_FLEX_SUBMINOR_VERSION > 0",
          "14: #define FLEX_BETA",
          "15: #endif",
          "",
          "[Removed Lines]",
          "12: #define YY_FLEX_SUBMINOR_VERSION 0",
          "",
          "[Added Lines]",
          "12: #define YY_FLEX_SUBMINOR_VERSION 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: #define yyconst const",
          "108: #else",
          "110: #endif",
          "",
          "[Removed Lines]",
          "91: #ifdef __cplusplus",
          "94: #define YY_USE_CONST",
          "99: #if defined (__STDC__)",
          "101: #define YY_USE_CONST",
          "106: #ifdef YY_USE_CONST",
          "109: #define yyconst",
          "",
          "[Added Lines]",
          "94: #if defined(__GNUC__) && __GNUC__ >= 3",
          "95: #define yynoreturn __attribute__((__noreturn__))",
          "97: #define yynoreturn",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "241:  yy_size_t yy_buf_size;",
          "246:  yy_size_t yy_n_chars;",
          "",
          "[Added Lines]",
          "229:  int yy_buf_size;",
          "234:  int yy_n_chars;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323: YY_BUFFER_STATE yara_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );",
          "324: YY_BUFFER_STATE yara_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );",
          "327: void *yara_yyalloc (yy_size_t ,yyscan_t yyscanner );",
          "328: void *yara_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );",
          "",
          "[Removed Lines]",
          "325: YY_BUFFER_STATE yara_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );",
          "",
          "[Added Lines]",
          "313: YY_BUFFER_STATE yara_yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "366: static yy_state_type yy_get_previous_state (yyscan_t yyscanner );",
          "367: static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);",
          "368: static int yy_get_next_buffer (yyscan_t yyscanner );",
          "377: #define YY_DO_BEFORE_ACTION \\",
          "378:  yyg->yytext_ptr = yy_bp; \\",
          "380:  yyg->yy_hold_char = *yy_cp; \\",
          "382:  yyg->yy_c_buf_p = yy_cp;",
          "",
          "[Removed Lines]",
          "369: #if defined(__GNUC__) && __GNUC__ >= 3",
          "370: __attribute__((__noreturn__))",
          "371: #endif",
          "372: static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );",
          "379:  yyleng = (size_t) (yy_cp - yy_bp); \\",
          "",
          "[Added Lines]",
          "357: static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );",
          "364:  yyleng = (int) (yy_cp - yy_bp); \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "820: #define INITIAL 0",
          "821: #define str 1",
          "",
          "[Removed Lines]",
          "818: #line 819 \"lexer.c\"",
          "",
          "[Added Lines]",
          "803: #line 804 \"lexer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "850:     char yy_hold_char;",
          "853:     char *yy_c_buf_p;",
          "854:     int yy_init;",
          "855:     int yy_start;",
          "",
          "[Removed Lines]",
          "851:     yy_size_t yy_n_chars;",
          "852:     yy_size_t yyleng_r;",
          "",
          "[Added Lines]",
          "836:     int yy_n_chars;",
          "837:     int yyleng_r;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "903: void yara_yyset_out  (FILE * _out_str ,yyscan_t yyscanner );",
          "907: char *yara_yyget_text (yyscan_t yyscanner );",
          "",
          "[Removed Lines]",
          "905: yy_size_t yara_yyget_leng (yyscan_t yyscanner );",
          "",
          "[Added Lines]",
          "890:    int yara_yyget_leng (yyscan_t yyscanner );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "971: #endif",
          "",
          "[Removed Lines]",
          "970: #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)",
          "",
          "[Added Lines]",
          "955: #define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "991:  else \\",
          "992:   { \\",
          "993:   errno=0; \\",
          "995:    { \\",
          "996:    if( errno != EINTR) \\",
          "997:     { \\",
          "",
          "[Removed Lines]",
          "994:   while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\",
          "",
          "[Added Lines]",
          "979:   while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1095: #line 129 \"lexer.l\"",
          "1101:   {",
          "",
          "[Removed Lines]",
          "1098: #line 1099 \"lexer.c\"",
          "",
          "[Added Lines]",
          "1083: #line 1084 \"lexer.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1125:     if ( yy_current_state >= 243 )",
          "1126:      yy_c = yy_meta[(unsigned int) yy_c];",
          "1127:     }",
          "1129:    ++yy_cp;",
          "1130:    }",
          "1131:   while ( yy_current_state != 242 );",
          "",
          "[Removed Lines]",
          "1128:    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "1113:    yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1920: #line 652 \"lexer.l\"",
          "1921: ECHO;",
          "1922:  YY_BREAK",
          "1925:  case YY_END_OF_BUFFER:",
          "1926:   {",
          "",
          "[Removed Lines]",
          "1923: #line 1924 \"lexer.c\"",
          "",
          "[Added Lines]",
          "1908: #line 1909 \"lexer.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2108:  else",
          "2109:   {",
          "2111:    YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;",
          "2113:   while ( num_to_read <= 0 )",
          "",
          "[Removed Lines]",
          "2110:    yy_size_t num_to_read =",
          "",
          "[Added Lines]",
          "2095:    int num_to_read =",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2122:    if ( b->yy_is_our_buffer )",
          "2123:     {",
          "2126:     if ( new_size <= 0 )",
          "2127:      b->yy_buf_size += b->yy_buf_size / 8;",
          "",
          "[Removed Lines]",
          "2124:     yy_size_t new_size = b->yy_buf_size * 2;",
          "",
          "[Added Lines]",
          "2109:     int new_size = b->yy_buf_size * 2;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2134:     }",
          "2135:    else",
          "2139:    if ( ! b->yy_ch_buf )",
          "2140:     YY_FATAL_ERROR(",
          "",
          "[Removed Lines]",
          "2137:     b->yy_ch_buf = 0;",
          "",
          "[Added Lines]",
          "2122:     b->yy_ch_buf = NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2176:  else",
          "2177:   ret_val = EOB_ACT_CONTINUE_SCAN;",
          "2182:   YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yara_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );",
          "2183:   if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )",
          "2184:    YY_FATAL_ERROR( \"out of dynamic memory in yy_get_next_buffer()\" );",
          "",
          "[Removed Lines]",
          "2179:  if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {",
          "2181:   yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);",
          "",
          "[Added Lines]",
          "2164:  if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {",
          "2166:   int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2217:    if ( yy_current_state >= 243 )",
          "2218:     yy_c = yy_meta[(unsigned int) yy_c];",
          "2219:    }",
          "2221:   }",
          "2223:  return yy_current_state;",
          "",
          "[Removed Lines]",
          "2220:   yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "2205:   yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2246:   if ( yy_current_state >= 243 )",
          "2247:    yy_c = yy_meta[(unsigned int) yy_c];",
          "2248:   }",
          "2250:  yy_is_jam = (yy_current_state == 242);",
          "2252:  (void)yyg;",
          "",
          "[Removed Lines]",
          "2249:  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "2234:  yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2283:   else",
          "2286:    ++yyg->yy_c_buf_p;",
          "2288:    switch ( yy_get_next_buffer( yyscanner ) )",
          "",
          "[Removed Lines]",
          "2285:    yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;",
          "",
          "[Added Lines]",
          "2270:    int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2306:     case EOB_ACT_END_OF_FILE:",
          "2307:      {",
          "2308:      if ( yara_yywrap(yyscanner ) )",
          "2311:      if ( ! yyg->yy_did_buffer_switch_on_eof )",
          "2312:       YY_NEW_FILE;",
          "",
          "[Removed Lines]",
          "2309:       return EOF;",
          "",
          "[Added Lines]",
          "2294:       return 0;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2570: static void yara_yyensure_buffer_stack (yyscan_t yyscanner)",
          "2571: {",
          "2573:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2575:  if (!yyg->yy_buffer_stack) {",
          "",
          "[Removed Lines]",
          "2572:  yy_size_t num_to_alloc;",
          "",
          "[Added Lines]",
          "2557:  int num_to_alloc;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2582:   yyg->yy_buffer_stack = (struct yy_buffer_state**)yara_yyalloc",
          "2583:         (num_to_alloc * sizeof(struct yy_buffer_state*)",
          "2584:         , yyscanner);",
          "",
          "[Removed Lines]",
          "2581:   num_to_alloc = 1; // After all that talk, this was set to 1 anyways...",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2625:       base[size-2] != YY_END_OF_BUFFER_CHAR ||",
          "2626:       base[size-1] != YY_END_OF_BUFFER_CHAR )",
          "2630:  b = (YY_BUFFER_STATE) yara_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );",
          "2631:  if ( ! b )",
          "",
          "[Removed Lines]",
          "2628:   return 0;",
          "",
          "[Added Lines]",
          "2613:   return NULL;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2635:  b->yy_buf_pos = b->yy_ch_buf = base;",
          "2636:  b->yy_is_our_buffer = 0;",
          "2638:  b->yy_n_chars = b->yy_buf_size;",
          "2639:  b->yy_is_interactive = 0;",
          "2640:  b->yy_at_bol = 1;",
          "",
          "[Removed Lines]",
          "2637:  b->yy_input_file = 0;",
          "",
          "[Added Lines]",
          "2622:  b->yy_input_file = NULL;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2657: YY_BUFFER_STATE yara_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)",
          "2658: {",
          "2661: }",
          "",
          "[Removed Lines]",
          "2660:  return yara_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);",
          "",
          "[Added Lines]",
          "2645:  return yara_yy_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2671: {",
          "2672:  YY_BUFFER_STATE b;",
          "2673:  char *buf;",
          "",
          "[Removed Lines]",
          "2670: YY_BUFFER_STATE yara_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "2655: YY_BUFFER_STATE yara_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2675:  yy_size_t i;",
          "2679:  buf = (char *) yara_yyalloc(n ,yyscanner );",
          "2680:  if ( ! buf )",
          "2681:   YY_FATAL_ERROR( \"out of dynamic memory in yara_yy_scan_bytes()\" );",
          "",
          "[Removed Lines]",
          "2678:  n = _yybytes_len + 2;",
          "",
          "[Added Lines]",
          "2663:  n = (yy_size_t) _yybytes_len + 2;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2701: #define YY_EXIT_FAILURE 2",
          "2702: #endif",
          "2705: {",
          "2706:  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2707:  (void)yyg;",
          "",
          "[Removed Lines]",
          "2704: static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "2689: static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2788: {",
          "2789:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2790:     return yyleng;",
          "",
          "[Removed Lines]",
          "2787: yy_size_t yara_yyget_leng  (yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "2772: int yara_yyget_leng  (yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2959:     yyg->yy_buffer_stack_top = 0;",
          "2960:     yyg->yy_buffer_stack_max = 0;",
          "2962:     yyg->yy_init = 0;",
          "2963:     yyg->yy_start = 0;",
          "",
          "[Removed Lines]",
          "2958:     yyg->yy_buffer_stack = 0;",
          "2961:     yyg->yy_c_buf_p = (char *) 0;",
          "",
          "[Added Lines]",
          "2943:     yyg->yy_buffer_stack = NULL;",
          "2946:     yyg->yy_c_buf_p = NULL;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2971:     yyin = stdin;",
          "2972:     yyout = stdout;",
          "2973: #else",
          "2976: #endif",
          "",
          "[Removed Lines]",
          "2974:     yyin = (FILE *) 0;",
          "2975:     yyout = (FILE *) 0;",
          "",
          "[Added Lines]",
          "2959:     yyin = NULL;",
          "2960:     yyout = NULL;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "3042: {",
          "3043:  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "3044:  (void)yyg;",
          "3046: }",
          "3048: void *yara_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)",
          "",
          "[Removed Lines]",
          "3045:  return (void *) malloc( size );",
          "",
          "[Added Lines]",
          "3030:  return malloc(size);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "3061: }",
          "3063: void yara_yyfree (void * ptr , yyscan_t yyscanner)",
          "",
          "[Removed Lines]",
          "3060:  return (void *) realloc( (char *) ptr, size );",
          "",
          "[Added Lines]",
          "3045:  return realloc(ptr, size);",
          "",
          "---------------"
        ],
        "libyara/parser.c||libyara/parser.c": [
          "File: libyara/parser.c -> libyara/parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: int yr_parser_emit_with_arg_reloc(",
          "112:     yyscan_t yyscanner,",
          "113:     uint8_t instruction,",
          "115:     uint8_t** instruction_address,",
          "117: {",
          "118:   int64_t* ptr = NULL;",
          "120:   int result = yr_arena_write_data(",
          "121:       yyget_extra(yyscanner)->code_arena,",
          "",
          "[Removed Lines]",
          "114:     int64_t argument,",
          "116:     int64_t** argument_address)",
          "",
          "[Added Lines]",
          "114:     void* argument,",
          "116:     void** argument_address)",
          "119:   DECLARE_REFERENCE(void*, argument) a;",
          "120:   a.argument = argument;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:   if (result == ERROR_SUCCESS)",
          "127:     result = yr_arena_write_data(",
          "128:         yyget_extra(yyscanner)->code_arena,",
          "130:         sizeof(int64_t),",
          "131:         (void**) &ptr);",
          "",
          "[Removed Lines]",
          "129:         &argument,",
          "",
          "[Added Lines]",
          "131:         &a,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:         yr_parser_emit_with_arg_reloc(",
          "181:             yyscanner,",
          "182:             OP_PUSH,",
          "184:             NULL,",
          "185:             NULL);",
          "",
          "[Removed Lines]",
          "183:             PTR_TO_INT64(string),",
          "",
          "[Added Lines]",
          "185:             string,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "747:   compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "748:       yyscanner,",
          "749:       OP_INIT_RULE,",
          "751:       NULL,",
          "752:       NULL);",
          "",
          "[Removed Lines]",
          "750:       PTR_TO_INT64(rule),",
          "",
          "[Added Lines]",
          "752:       rule,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "798:   compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "799:       yyscanner,",
          "800:       OP_MATCH_RULE,",
          "802:       NULL,",
          "803:       NULL);",
          "",
          "[Removed Lines]",
          "801:       PTR_TO_INT64(rule),",
          "",
          "[Added Lines]",
          "803:       rule,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "875:       yr_parser_emit_with_arg_reloc(",
          "876:           yyscanner,",
          "877:           OP_PUSH,",
          "879:           NULL,",
          "880:           NULL);",
          "",
          "[Removed Lines]",
          "878:           PTR_TO_INT64(string),",
          "",
          "[Added Lines]",
          "880:           string,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1021:     compiler->last_result = yr_parser_emit_with_arg_reloc(",
          "1022:         yyscanner,",
          "1023:         OP_IMPORT,",
          "1025:         NULL,",
          "1026:         NULL);",
          "",
          "[Removed Lines]",
          "1024:         PTR_TO_INT64(name),",
          "",
          "[Added Lines]",
          "1026:         name,",
          "",
          "---------------"
        ],
        "libyara/re_grammar.c||libyara/re_grammar.c": [
          "File: libyara/re_grammar.c -> libyara/re_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: #include <yara/utils.h>",
          "77: #include <yara/error.h>",
          "78: #include <yara/limits.h>",
          "",
          "[Removed Lines]",
          "74: #include <stdint.h>",
          "",
          "[Added Lines]",
          "74: #include <yara/integers.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "490: static const yytype_uint16 yyrline[] =",
          "491: {",
          "496: };",
          "497: #endif",
          "",
          "[Removed Lines]",
          "492:        0,    89,    89,    94,    98,   102,   111,   125,   129,   140,",
          "493:      150,   162,   172,   184,   197,   211,   224,   238,   242,   248,",
          "494:      254,   260,   269,   273,   279,   287,   293,   299,   305,   311,",
          "495:      317,   323",
          "",
          "[Added Lines]",
          "491:        0,   101,   101,   106,   110,   114,   123,   137,   141,   152,",
          "492:      162,   174,   184,   196,   209,   223,   236,   250,   254,   260,",
          "493:      266,   272,   281,   285,   291,   299,   305,   311,   317,   323,",
          "494:      329,   335",
          "",
          "---------------"
        ],
        "libyara/re_grammar.h||libyara/re_grammar.h": [
          "File: libyara/re_grammar.h -> libyara/re_grammar.h"
        ],
        "libyara/re_lexer.c||libyara/re_lexer.c": [
          "File: libyara/re_lexer.c -> libyara/re_lexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #define FLEX_SCANNER",
          "10: #define YY_FLEX_MAJOR_VERSION 2",
          "11: #define YY_FLEX_MINOR_VERSION 6",
          "13: #if YY_FLEX_SUBMINOR_VERSION > 0",
          "14: #define FLEX_BETA",
          "15: #endif",
          "",
          "[Removed Lines]",
          "12: #define YY_FLEX_SUBMINOR_VERSION 0",
          "",
          "[Added Lines]",
          "12: #define YY_FLEX_SUBMINOR_VERSION 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107: #define yyconst const",
          "108: #else",
          "110: #endif",
          "",
          "[Removed Lines]",
          "91: #ifdef __cplusplus",
          "94: #define YY_USE_CONST",
          "99: #if defined (__STDC__)",
          "101: #define YY_USE_CONST",
          "106: #ifdef YY_USE_CONST",
          "109: #define yyconst",
          "",
          "[Added Lines]",
          "94: #if defined(__GNUC__) && __GNUC__ >= 3",
          "95: #define yynoreturn __attribute__((__noreturn__))",
          "97: #define yynoreturn",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "241:  yy_size_t yy_buf_size;",
          "246:  yy_size_t yy_n_chars;",
          "",
          "[Added Lines]",
          "229:  int yy_buf_size;",
          "234:  int yy_n_chars;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323: YY_BUFFER_STATE re_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );",
          "324: YY_BUFFER_STATE re_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );",
          "327: void *re_yyalloc (yy_size_t ,yyscan_t yyscanner );",
          "328: void *re_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );",
          "",
          "[Removed Lines]",
          "325: YY_BUFFER_STATE re_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );",
          "",
          "[Added Lines]",
          "313: YY_BUFFER_STATE re_yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "366: static yy_state_type yy_get_previous_state (yyscan_t yyscanner );",
          "367: static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);",
          "368: static int yy_get_next_buffer (yyscan_t yyscanner );",
          "377: #define YY_DO_BEFORE_ACTION \\",
          "378:  yyg->yytext_ptr = yy_bp; \\",
          "380:  yyg->yy_hold_char = *yy_cp; \\",
          "382:  yyg->yy_c_buf_p = yy_cp;",
          "",
          "[Removed Lines]",
          "369: #if defined(__GNUC__) && __GNUC__ >= 3",
          "370: __attribute__((__noreturn__))",
          "371: #endif",
          "372: static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );",
          "379:  yyleng = (size_t) (yy_cp - yy_bp); \\",
          "",
          "[Added Lines]",
          "357: static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );",
          "364:  yyleng = (int) (yy_cp - yy_bp); \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "583: #define YY_NO_UNISTD_H 1",
          "587: #define INITIAL 0",
          "588: #define char_class 1",
          "",
          "[Removed Lines]",
          "585: #line 586 \"re_lexer.c\"",
          "",
          "[Added Lines]",
          "570: #line 571 \"re_lexer.c\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "614:     char yy_hold_char;",
          "617:     char *yy_c_buf_p;",
          "618:     int yy_init;",
          "619:     int yy_start;",
          "",
          "[Removed Lines]",
          "615:     yy_size_t yy_n_chars;",
          "616:     yy_size_t yyleng_r;",
          "",
          "[Added Lines]",
          "600:     int yy_n_chars;",
          "601:     int yyleng_r;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "667: void re_yyset_out  (FILE * _out_str ,yyscan_t yyscanner );",
          "671: char *re_yyget_text (yyscan_t yyscanner );",
          "",
          "[Removed Lines]",
          "669: yy_size_t re_yyget_leng (yyscan_t yyscanner );",
          "",
          "[Added Lines]",
          "654:    int re_yyget_leng (yyscan_t yyscanner );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "735: #endif",
          "",
          "[Removed Lines]",
          "734: #define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)",
          "",
          "[Added Lines]",
          "719: #define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "755:  else \\",
          "756:   { \\",
          "757:   errno=0; \\",
          "759:    { \\",
          "760:    if( errno != EINTR) \\",
          "761:     { \\",
          "",
          "[Removed Lines]",
          "758:   while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\",
          "",
          "[Added Lines]",
          "743:   while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "859: #line 99 \"re_lexer.l\"",
          "865:   {",
          "",
          "[Removed Lines]",
          "862: #line 863 \"re_lexer.c\"",
          "",
          "[Added Lines]",
          "847: #line 848 \"re_lexer.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "889:     if ( yy_current_state >= 45 )",
          "890:      yy_c = yy_meta[(unsigned int) yy_c];",
          "891:     }",
          "893:    ++yy_cp;",
          "894:    }",
          "895:   while ( yy_current_state != 44 );",
          "",
          "[Removed Lines]",
          "892:    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "877:    yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1354: #line 464 \"re_lexer.l\"",
          "1355: ECHO;",
          "1356:  YY_BREAK",
          "1359:  case YY_END_OF_BUFFER:",
          "1360:   {",
          "",
          "[Removed Lines]",
          "1357: #line 1358 \"re_lexer.c\"",
          "",
          "[Added Lines]",
          "1342: #line 1343 \"re_lexer.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1542:  else",
          "1543:   {",
          "1545:    YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;",
          "1547:   while ( num_to_read <= 0 )",
          "",
          "[Removed Lines]",
          "1544:    yy_size_t num_to_read =",
          "",
          "[Added Lines]",
          "1529:    int num_to_read =",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1556:    if ( b->yy_is_our_buffer )",
          "1557:     {",
          "1560:     if ( new_size <= 0 )",
          "1561:      b->yy_buf_size += b->yy_buf_size / 8;",
          "",
          "[Removed Lines]",
          "1558:     yy_size_t new_size = b->yy_buf_size * 2;",
          "",
          "[Added Lines]",
          "1543:     int new_size = b->yy_buf_size * 2;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1568:     }",
          "1569:    else",
          "1573:    if ( ! b->yy_ch_buf )",
          "1574:     YY_FATAL_ERROR(",
          "",
          "[Removed Lines]",
          "1571:     b->yy_ch_buf = 0;",
          "",
          "[Added Lines]",
          "1556:     b->yy_ch_buf = NULL;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1610:  else",
          "1611:   ret_val = EOB_ACT_CONTINUE_SCAN;",
          "1616:   YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) re_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );",
          "1617:   if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )",
          "1618:    YY_FATAL_ERROR( \"out of dynamic memory in yy_get_next_buffer()\" );",
          "",
          "[Removed Lines]",
          "1613:  if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {",
          "1615:   yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);",
          "",
          "[Added Lines]",
          "1598:  if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {",
          "1600:   int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1651:    if ( yy_current_state >= 45 )",
          "1652:     yy_c = yy_meta[(unsigned int) yy_c];",
          "1653:    }",
          "1655:   }",
          "1657:  return yy_current_state;",
          "",
          "[Removed Lines]",
          "1654:   yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "1639:   yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1680:   if ( yy_current_state >= 45 )",
          "1681:    yy_c = yy_meta[(unsigned int) yy_c];",
          "1682:   }",
          "1684:  yy_is_jam = (yy_current_state == 44);",
          "1686:  (void)yyg;",
          "",
          "[Removed Lines]",
          "1683:  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];",
          "",
          "[Added Lines]",
          "1668:  yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1717:   else",
          "1720:    ++yyg->yy_c_buf_p;",
          "1722:    switch ( yy_get_next_buffer( yyscanner ) )",
          "",
          "[Removed Lines]",
          "1719:    yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;",
          "",
          "[Added Lines]",
          "1704:    int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1740:     case EOB_ACT_END_OF_FILE:",
          "1741:      {",
          "1742:      if ( re_yywrap(yyscanner ) )",
          "1745:      if ( ! yyg->yy_did_buffer_switch_on_eof )",
          "1746:       YY_NEW_FILE;",
          "",
          "[Removed Lines]",
          "1743:       return EOF;",
          "",
          "[Added Lines]",
          "1728:       return 0;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2004: static void re_yyensure_buffer_stack (yyscan_t yyscanner)",
          "2005: {",
          "2007:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2009:  if (!yyg->yy_buffer_stack) {",
          "",
          "[Removed Lines]",
          "2006:  yy_size_t num_to_alloc;",
          "",
          "[Added Lines]",
          "1991:  int num_to_alloc;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2016:   yyg->yy_buffer_stack = (struct yy_buffer_state**)re_yyalloc",
          "2017:         (num_to_alloc * sizeof(struct yy_buffer_state*)",
          "2018:         , yyscanner);",
          "",
          "[Removed Lines]",
          "2015:   num_to_alloc = 1; // After all that talk, this was set to 1 anyways...",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2059:       base[size-2] != YY_END_OF_BUFFER_CHAR ||",
          "2060:       base[size-1] != YY_END_OF_BUFFER_CHAR )",
          "2064:  b = (YY_BUFFER_STATE) re_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );",
          "2065:  if ( ! b )",
          "",
          "[Removed Lines]",
          "2062:   return 0;",
          "",
          "[Added Lines]",
          "2047:   return NULL;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2069:  b->yy_buf_pos = b->yy_ch_buf = base;",
          "2070:  b->yy_is_our_buffer = 0;",
          "2072:  b->yy_n_chars = b->yy_buf_size;",
          "2073:  b->yy_is_interactive = 0;",
          "2074:  b->yy_at_bol = 1;",
          "",
          "[Removed Lines]",
          "2071:  b->yy_input_file = 0;",
          "",
          "[Added Lines]",
          "2056:  b->yy_input_file = NULL;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2091: YY_BUFFER_STATE re_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)",
          "2092: {",
          "2095: }",
          "",
          "[Removed Lines]",
          "2094:  return re_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);",
          "",
          "[Added Lines]",
          "2079:  return re_yy_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2105: {",
          "2106:  YY_BUFFER_STATE b;",
          "2107:  char *buf;",
          "",
          "[Removed Lines]",
          "2104: YY_BUFFER_STATE re_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "2089: YY_BUFFER_STATE re_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2109:  yy_size_t i;",
          "2113:  buf = (char *) re_yyalloc(n ,yyscanner );",
          "2114:  if ( ! buf )",
          "2115:   YY_FATAL_ERROR( \"out of dynamic memory in re_yy_scan_bytes()\" );",
          "",
          "[Removed Lines]",
          "2112:  n = _yybytes_len + 2;",
          "",
          "[Added Lines]",
          "2097:  n = (yy_size_t) _yybytes_len + 2;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2135: #define YY_EXIT_FAILURE 2",
          "2136: #endif",
          "2139: {",
          "2140:  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2141:  (void)yyg;",
          "",
          "[Removed Lines]",
          "2138: static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "2123: static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2222: {",
          "2223:     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2224:     return yyleng;",
          "",
          "[Removed Lines]",
          "2221: yy_size_t re_yyget_leng  (yyscan_t yyscanner)",
          "",
          "[Added Lines]",
          "2206: int re_yyget_leng  (yyscan_t yyscanner)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2393:     yyg->yy_buffer_stack_top = 0;",
          "2394:     yyg->yy_buffer_stack_max = 0;",
          "2396:     yyg->yy_init = 0;",
          "2397:     yyg->yy_start = 0;",
          "",
          "[Removed Lines]",
          "2392:     yyg->yy_buffer_stack = 0;",
          "2395:     yyg->yy_c_buf_p = (char *) 0;",
          "",
          "[Added Lines]",
          "2377:     yyg->yy_buffer_stack = NULL;",
          "2380:     yyg->yy_c_buf_p = NULL;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2405:     yyin = stdin;",
          "2406:     yyout = stdout;",
          "2407: #else",
          "2410: #endif",
          "",
          "[Removed Lines]",
          "2408:     yyin = (FILE *) 0;",
          "2409:     yyout = (FILE *) 0;",
          "",
          "[Added Lines]",
          "2393:     yyin = NULL;",
          "2394:     yyout = NULL;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2476: {",
          "2477:  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;",
          "2478:  (void)yyg;",
          "2480: }",
          "2482: void *re_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)",
          "",
          "[Removed Lines]",
          "2479:  return (void *) malloc( size );",
          "",
          "[Added Lines]",
          "2464:  return malloc(size);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2495: }",
          "2497: void re_yyfree (void * ptr , yyscan_t yyscanner)",
          "",
          "[Removed Lines]",
          "2494:  return (void *) realloc( (char *) ptr, size );",
          "",
          "[Added Lines]",
          "2479:  return realloc(ptr, size);",
          "",
          "---------------"
        ],
        "tests/test-pe.c||tests/test-pe.c": [
          "File: tests/test-pe.c -> tests/test-pe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <yara.h>",
          "2: #include \"util.h\"",
          "4: int main(int argc, char** argv)",
          "5: {",
          "6:   yr_initialize();",
          "8:   assert_true_rule_file(\"import \\\"pe\\\" rule test { condition: pe.imports(\\\"KERNEL32.dll\\\", \\\"DeleteCriticalSection\\\") }\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #include <config.h>",
          "3: #include <stdio.h>",
          "8: #if (defined(HAVE_ENDIAN_H) && BYTE_ORDER == LITTLE_ENDIAN) || defined(_MSC)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:       \"tests/data/tiny-idata-51ff\");",
          "26:   yr_finalize();",
          "27:   return 0;",
          "28: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #else",
          "31:   puts(\"Not testing pe module on big-endian architectures ... yet\");",
          "32:   exit(77);",
          "33: #endif",
          "",
          "---------------"
        ],
        "tests/test-rules.c||tests/test-rules.c": [
          "File: tests/test-rules.c -> tests/test-rules.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: static void test_in()",
          "620: {",
          "621:   assert_true_rule_blob(",
          "624:         strings: $a = { 6a 2a 58 c3 } \\",
          "626:       PE32_FILE);",
          "627: }",
          "",
          "[Removed Lines]",
          "622:       \"import \\\"pe\\\" \\",
          "623:        rule test { \\",
          "625:         condition: $a in (pe.entry_point .. pe.entry_point + 1) }\",",
          "",
          "[Added Lines]",
          "622:       \"rule test { \\",
          "624:         condition: $a in (entrypoint .. entrypoint + 1) }\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}