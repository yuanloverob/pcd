{
  "cve_id": "CVE-2012-1146",
  "cve_desc": "The mem_cgroup_usage_unregister_event function in mm/memcontrol.c in the Linux kernel before 3.2.10 does not properly handle multiple events that are attached to the same eventfd, which allows local users to cause a denial of service (NULL pointer dereference and system crash) or possibly have unspecified other impact by registering memory threshold events.",
  "repo": "torvalds/linux",
  "patch_hash": "371528caec553785c37f73fa3926ea0de84f986f",
  "patch_info": {
    "commit_hash": "371528caec553785c37f73fa3926ea0de84f986f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/371528caec553785c37f73fa3926ea0de84f986f",
    "files": [
      "mm/memcontrol.c"
    ],
    "message": "mm: memcg: Correct unregistring of events attached to the same eventfd\n\nThere is an issue when memcg unregisters events that were attached to\nthe same eventfd:\n\n- On the first call mem_cgroup_usage_unregister_event() removes all\n  events attached to a given eventfd, and if there were no events left,\n  thresholds->primary would become NULL;\n\n- Since there were several events registered, cgroups core will call\n  mem_cgroup_usage_unregister_event() again, but now kernel will oops,\n  as the function doesn't expect that threshold->primary may be NULL.\n\nThat's a good question whether mem_cgroup_usage_unregister_event()\nshould actually remove all events in one go, but nowadays it can't\ndo any better as cftype->unregister_event callback doesn't pass\nany private event-associated cookie. So, let's fix the issue by\nsimply checking for threshold->primary.\n\nFWIW, w/o the patch the following oops may be observed:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000004\n IP: [<ffffffff810be32c>] mem_cgroup_usage_unregister_event+0x9c/0x1f0\n Pid: 574, comm: kworker/0:2 Not tainted 3.3.0-rc4+ #9 Bochs Bochs\n RIP: 0010:[<ffffffff810be32c>]  [<ffffffff810be32c>] mem_cgroup_usage_unregister_event+0x9c/0x1f0\n RSP: 0018:ffff88001d0b9d60  EFLAGS: 00010246\n Process kworker/0:2 (pid: 574, threadinfo ffff88001d0b8000, task ffff88001de91cc0)\n Call Trace:\n  [<ffffffff8107092b>] cgroup_event_remove+0x2b/0x60\n  [<ffffffff8103db94>] process_one_work+0x174/0x450\n  [<ffffffff8103e413>] worker_thread+0x123/0x2d0\n\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>\nAcked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>\nCc: Kirill A. Shutemov <kirill@shutemov.name>\nCc: Michal Hocko <mhocko@suse.cz>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "mm/memcontrol.c||mm/memcontrol.c"
    ]
  },
  "patch_diff": {
    "mm/memcontrol.c||mm/memcontrol.c": [
      "File: mm/memcontrol.c -> mm/memcontrol.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4415:  BUG_ON(!thresholds);",
      "4417:  usage = mem_cgroup_usage(memcg, type == _MEMSWAP);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4417:  if (!thresholds->primary)",
      "4418:   goto unlock;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4464:  synchronize_rcu();",
      "4466:  mutex_unlock(&memcg->thresholds_lock);",
      "4467: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4468: unlock:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "910ba598c818243cf3de2f97e03c49948bbb0511",
      "candidate_info": {
        "commit_hash": "910ba598c818243cf3de2f97e03c49948bbb0511",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/910ba598c818243cf3de2f97e03c49948bbb0511",
        "files": [
          "arch/arm/kernel/smp_twd.c"
        ],
        "message": "ARM: 7336/1: smp_twd: Don't register CPUFREQ notifiers if local timers are not initialised\n\nCurrent ARM local timer code registers CPUFREQ notifiers even in case\nthe twd_timer_setup() isn't called. That seems to be wrong and\nwould eventually lead to kernel crash on the CPU frequency transitions\non the SOCs where the local timer doesn't exist or broken because of\nhardware BUG. Fix it by testing twd_evt and *__this_cpu_ptr(twd_evt).\n\nThe issue was observed with v3.3-rc3 and building an OMAP2+ kernel\non OMAP3 SOC which doesn't have TWD.\n\nBelow is the dump for reference :\n\n Unable to handle kernel paging request at virtual address 007e900\n pgd = cdc20000\n [007e9000] *pgd=00000000\n Internal error: Oops: 5 [#1] SMP\n Modules linked in:\n CPU: 0    Not tainted  (3.3.0-rc3-pm+debug+initramfs #9)\n PC is at twd_update_frequency+0x34/0x48\n LR is at twd_update_frequency+0x10/0x48\n pc : [<c001382c>]    lr : [<c0013808>]    psr: 60000093\n sp : ce311dd8  ip : 00000000  fp : 00000000\n r10: 00000000  r9 : 00000001  r8 : ce310000\n r7 : c0440458  r6 : c00137f8  r5 : 00000000  r4 : c0947a74\n r3 : 00000000  r2 : 007e9000  r1 : 00000000  r0 : 00000000\n Flags: nZCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment usr\n Control: 10c5387d  Table: 8dc20019  DAC: 00000015\n Process sh (pid: 599, stack limit = 0xce3102f8)\n Stack: (0xce311dd8 to 0xce312000)\n 1dc0:                                                       6000c\n 1de0: 00000001 00000002 00000000 00000000 00000000 00000000 00000\n 1e00: ffffffff c093d8f0 00000000 ce311ebc 00000001 00000001 ce310\n 1e20: c001386c c0437c4c c0e95b60 c0e95ba8 00000001 c0e95bf8 ffff4\n 1e40: 00000000 00000000 c005ef74 ce310000 c0435cf0 ce311ebc 00000\n 1e60: ce352b40 0007a120 c08d5108 c08ba040 c08ba040 c005f030 00000\n 1e80: c08bc554 c032fe2c 0007a120 c08d4b64 ce352b40 c08d8618 ffff8\n 1ea0: c08ba040 c033364c ce311ecc c0433b50 00000002 ffffffea c0330\n 1ec0: 0007a120 0007a120 22222201 00000000 22222222 00000000 ce357\n 1ee0: ce3d6000 cdc2aed8 ce352ba0 c0470164 00000002 c032f47c 00034\n 1f00: c0331cac ce352b40 00000007 c032f6d0 ce352bbc 0003d090 c0930\n 1f20: c093d8bc c03306a4 00000007 ce311f80 00000007 cdc2aec0 ce358\n 1f40: ce8d20c0 00000007 b6fe5000 ce311f80 00000007 ce310000 0000c\n 1f60: c000de74 ce987400 ce8d20c0 b6fe5000 00000000 00000000 0000c\n 1f80: 00000000 00000000 001fbac8 00000000 00000007 001fbac8 00004\n 1fa0: c000df04 c000dd60 00000007 001fbac8 00000001 b6fe5000 00000\n 1fc0: 00000007 001fbac8 00000007 00000004 b6fe5000 00000000 00202\n 1fe0: 00000000 beb565f8 00101ffc 00008e8c 60000010 00000001 00000\n [<c001382c>] (twd_update_frequency+0x34/0x48) from [<c008ac4c>] )\n [<c008ac4c>] (smp_call_function_single+0x17c/0x1c8) from [<c0013)\n [<c0013890>] (twd_cpufreq_transition+0x24/0x30) from [<c0437c4c>)\n [<c0437c4c>] (notifier_call_chain+0x44/0x84) from [<c005efe4>] ()\n [<c005efe4>] (__srcu_notifier_call_chain+0x70/0xa4) from [<c005f)\n [<c005f030>] (srcu_notifier_call_chain+0x18/0x20) from [<c032fe2)\n [<c032fe2c>] (cpufreq_notify_transition+0xc8/0x1b0) from [<c0333)\n [<c033364c>] (omap_target+0x1b4/0x28c) from [<c032f47c>] (__cpuf)\n [<c032f47c>] (__cpufreq_driver_target+0x50/0x64) from [<c0331d24)\n [<c0331d24>] (cpufreq_set+0x78/0x98) from [<c032f6d0>] (store_sc)\n [<c032f6d0>] (store_scaling_setspeed+0x5c/0x74) from [<c03306a4>)\n [<c03306a4>] (store+0x58/0x74) from [<c014d868>] (sysfs_write_fi)\n [<c014d868>] (sysfs_write_file+0x80/0xb4) from [<c00f2c2c>] (vfs)\n [<c00f2c2c>] (vfs_write+0xa8/0x138) from [<c00f2e9c>] (sys_write)\n [<c00f2e9c>] (sys_write+0x40/0x6c) from [<c000dd60>] (ret_fast_s)\n Code: e594300c e792210c e1a01000 e5840004 (e7930002)\n ---[ end trace 5da3b5167c1ecdda ]---\n\nReported-by: Kevin Hilman <khilman@ti.com>\nAcked-by: Marc Zyngier <marc.zyngier@arm.com>\nTested-by: Kevin Hilman <khilman@ti.com>\nSigned-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com>\nSigned-off-by: Russell King <rmk+kernel@arm.linux.org.uk>",
        "before_after_code_files": [
          "arch/arm/kernel/smp_twd.c||arch/arm/kernel/smp_twd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/arm/kernel/smp_twd.c||arch/arm/kernel/smp_twd.c": [
          "File: arch/arm/kernel/smp_twd.c -> arch/arm/kernel/smp_twd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130: static int twd_cpufreq_init(void)",
          "131: {",
          "133:   return cpufreq_register_notifier(&twd_cpufreq_nb,",
          "134:    CPUFREQ_TRANSITION_NOTIFIER);",
          "",
          "[Removed Lines]",
          "132:  if (!IS_ERR(twd_clk))",
          "",
          "[Added Lines]",
          "132:  if (twd_evt && *__this_cpu_ptr(twd_evt) && !IS_ERR(twd_clk))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "140f190bc3a3b6f200548d204befd998eadd63fd",
      "candidate_info": {
        "commit_hash": "140f190bc3a3b6f200548d204befd998eadd63fd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/140f190bc3a3b6f200548d204befd998eadd63fd",
        "files": [
          "arch/x86/kernel/smpboot.c"
        ],
        "message": "x86: Remove some noise from boot log when starting cpus\n\nPrinting the \"start_ip\" for every secondary cpu is very noisy on a large\nsystem - and doesn't add any value. Drop this message.\n\nConsole log before:\nBooting Node   0, Processors  #1\nsmpboot cpu 1: start_ip = 96000\n #2\nsmpboot cpu 2: start_ip = 96000\n #3\nsmpboot cpu 3: start_ip = 96000\n #4\nsmpboot cpu 4: start_ip = 96000\n       ...\n #31\nsmpboot cpu 31: start_ip = 96000\nBrought up 32 CPUs\n\nConsole log after:\nBooting Node   0, Processors  #1 #2 #3 #4 #5 #6 #7 Ok.\nBooting Node   1, Processors  #8 #9 #10 #11 #12 #13 #14 #15 Ok.\nBooting Node   0, Processors  #16 #17 #18 #19 #20 #21 #22 #23 Ok.\nBooting Node   1, Processors  #24 #25 #26 #27 #28 #29 #30 #31\nBrought up 32 CPUs\n\nAcked-by: Borislav Petkov <bp@amd64.org>\nSigned-off-by: Tony Luck <tony.luck@intel.com>\nLink: http://lkml.kernel.org/r/4f452eb42507460426@agluck-desktop.sc.intel.com\nSigned-off-by: H. Peter Anvin <hpa@zytor.com>",
        "before_after_code_files": [
          "arch/x86/kernel/smpboot.c||arch/x86/kernel/smpboot.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/smpboot.c||arch/x86/kernel/smpboot.c": [
          "File: arch/x86/kernel/smpboot.c -> arch/x86/kernel/smpboot.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "745:  atomic_set(&init_deasserted, 0);",
          "747:  if (get_uv_system_type() != UV_NON_UNIQUE_APIC) {",
          "",
          "[Removed Lines]",
          "743:  printk(KERN_DEBUG \"smpboot cpu %d: start_ip = %lx\\n\", cpu, start_ip);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dee00686da88cc32753e02e4e8efdd9e326e4d2",
      "candidate_info": {
        "commit_hash": "0dee00686da88cc32753e02e4e8efdd9e326e4d2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0dee00686da88cc32753e02e4e8efdd9e326e4d2",
        "files": [
          "net/mac80211/iface.c"
        ],
        "message": "mac80211: Fix a warning on changing to monitor mode from STA\n\nnothing needs to be done for monitor/AP_VLAN mode on calling\nieee80211_bss_info_change_notify -> drv_bss_info_changed with the change\nflag 'BSS_CHANGED_IDLE'. 'wl1271' seems to use BSS_CHANGED_IDLE only for\nSTA and IBSS mode. further the non-idle state of the monitor mode is\ntaken care by the 'count' variable which counts non-idle interfaces.\nieee80211_idle_off(local, \"in use\") will be called.\nthis fixes the following WARNING when we have initially STA mode\n(network manager running) and not associated, and change it to monitor\nmode with network manager disabled and bringing up the monitor mode.\nthis changes the idle state from 'true' (STA unassociated) to 'false'\n(MONITOR mode)\nexposed by the commit 405385f8ce7a2ed8f82e216d88b5282142e1288b\n\"mac80211: set bss_conf.idle when vif is connected\"\n\n\tWARNING: net/mac80211/main.c:212\n\tieee80211_bss_info_change_notify+0x1cf/0x330 [mac80211]()\n\tHardware name: 64756D6\n\tPid: 3835, comm: ifconfig Tainted: G           O\n\t3.3.0-rc3-wl #9\n\tCall Trace:\n\t  [<c0133b02>] warn_slowpath_common+0x72/0xa0\n\t  [<fc8e8c3f>] ?\n\t  ieee80211_bss_info_change_notify+0x1cf/0x330 [mac80211]\n\t  [<fc8e8c3f>] ?\n\t  ieee80211_bss_info_change_notify+0x1cf/0x330 [mac80211]\n\t  [<c0133b52>] warn_slowpath_null+0x22/0x30\n\t  [<fc8e8c3f>]\n\t  ieee80211_bss_info_change_notify+0x1cf/0x330 [mac80211]\n\t  [<fc8f9de3>] __ieee80211_recalc_idle+0x113/0x430\n\t  [mac80211]\n\t  [<fc8fabc6>] ieee80211_do_open+0x156/0x7e0 [mac80211]\n\t  [<fc8f8a25>] ?\n\t  ieee80211_check_concurrent_iface+0x25/0x180 [mac80211]\n\t  [<c015dd9f>] ? raw_notifier_call_chain+0x1f/0x30\n\t  [<fc8fb290>] ieee80211_open+0x40/0x80 [mac80211]\n\t  [<c05894f6>] __dev_open+0x96/0xe0\n\t  [<c068fba5>] ? _raw_spin_unlock_bh+0x35/0x40\n\t  [<c05881d9>] __dev_change_flags+0x109/0x170\n\t  [<c0589423>] dev_change_flags+0x23/0x60\n\t  [<c05f3770>] devinet_ioctl+0x6a0/0x770\n\n ieee80211 phy0: device no longer idle - in use\n\nCc: Eliad Peller <eliad@wizery.com>\nSigned-off-by: Mohammed Shafi Shajakhan <mohammed@qca.qualcomm.com>\nSigned-off-by: John W. Linville <linville@tuxdriver.com>",
        "before_after_code_files": [
          "net/mac80211/iface.c||net/mac80211/iface.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/mac80211/iface.c||net/mac80211/iface.c": [
          "File: net/mac80211/iface.c -> net/mac80211/iface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1332:   hw_roc = true;",
          "1334:  list_for_each_entry(sdata, &local->interfaces, list) {",
          "1335:   if (sdata->old_idle == sdata->vif.bss_conf.idle)",
          "1336:    continue;",
          "1337:   if (!ieee80211_sdata_running(sdata))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1335:   if (sdata->vif.type == NL80211_IFTYPE_MONITOR ||",
          "1336:       sdata->vif.type == NL80211_IFTYPE_AP_VLAN)",
          "1337:    continue;",
          "",
          "---------------"
        ]
      }
    }
  ]
}