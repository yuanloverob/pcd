{
  "cve_id": "CVE-2015-8957",
  "cve_desc": "Buffer overflow in ImageMagick before 6.9.0-4 Beta allows remote attackers to cause a denial of service (application crash) via a crafted SUN file.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "bd96074b254c6607a0f7731e59f923ad19d5a46d",
  "patch_info": {
    "commit_hash": "bd96074b254c6607a0f7731e59f923ad19d5a46d",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/bd96074b254c6607a0f7731e59f923ad19d5a46d",
    "files": [
      "coders/sun.c"
    ],
    "message": "http://www.imagemagick.org/discourse-server/viewtopic.php?f=3&t=26848",
    "before_after_code_files": [
      "coders/sun.c||coders/sun.c"
    ]
  },
  "patch_diff": {
    "coders/sun.c||coders/sun.c": [
      "File: coders/sun.c -> coders/sun.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "326:     image->rows=sun_info.height;",
      "327:     image->depth=sun_info.depth <= 8 ? sun_info.depth :",
      "328:       MAGICKCORE_QUANTUM_DEPTH;",
      "330:       {",
      "331:         size_t",
      "332:           one;",
      "334:         image->storage_class=PseudoClass;",
      "335:         image->colors=sun_info.maplength;",
      "336:         one=1;",
      "337:         if (sun_info.maptype == RMT_NONE)",
      "338:           image->colors=one << sun_info.depth;",
      "351:             if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)",
      "352:               ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
      "353:           }",
      "",
      "[Removed Lines]",
      "329:     if (sun_info.depth < 24)",
      "339:         if (sun_info.maptype == RMT_EQUAL_RGB)",
      "340:           image->colors=sun_info.maplength/3;",
      "341:       }",
      "342:     switch (sun_info.maptype)",
      "343:     {",
      "344:       case RMT_NONE:",
      "345:       {",
      "346:         if (sun_info.depth < 24)",
      "347:           {",
      "349:               Create linear color ramp.",
      "",
      "[Added Lines]",
      "335:         one=1;",
      "336:         if (sun_info.maptype == RMT_NONE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "356:       case RMT_EQUAL_RGB:",
      "357:       {",
      "358:         unsigned char",
      "362:           Read SUN raster colormap.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22a6f21a09bcd0a9a23ac917826173316f90ef6b",
      "candidate_info": {
        "commit_hash": "22a6f21a09bcd0a9a23ac917826173316f90ef6b",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/22a6f21a09bcd0a9a23ac917826173316f90ef6b",
        "files": [
          "coders/sun.c"
        ],
        "message": "",
        "before_after_code_files": [
          "coders/sun.c||coders/sun.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/sun.c||coders/sun.c"
          ],
          "candidate": [
            "coders/sun.c||coders/sun.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/sun.c||coders/sun.c": [
          "File: coders/sun.c -> coders/sun.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "306:     sun_info.width=ReadBlobMSBLong(image);",
          "307:     sun_info.height=ReadBlobMSBLong(image);",
          "310:     sun_info.type=ReadBlobMSBLong(image);",
          "311:     sun_info.maptype=ReadBlobMSBLong(image);",
          "312:     sun_info.maplength=ReadBlobMSBLong(image);",
          "313:     image->columns=sun_info.width;",
          "314:     image->rows=sun_info.height;",
          "",
          "[Removed Lines]",
          "308:     sun_info.depth=ReadBlobMSBLong(image);",
          "309:     sun_info.length=ReadBlobMSBLong(image);",
          "",
          "[Added Lines]",
          "308:     sun_info.depth=ReadBlobMSBLong(image);",
          "309:     sun_info.length=ReadBlobMSBLong(image);",
          "310:     sun_info.type=ReadBlobMSBLong(image);",
          "311:     sun_info.maptype=ReadBlobMSBLong(image);",
          "312:     sun_info.maplength=ReadBlobMSBLong(image);",
          "315:       ThrowReaderException(CoderError,\"ImproperImageHeader\");",
          "316:     if ((sun_info.maptype == RMT_NONE) && (sun_info.maplength != 0))",
          "317:       ThrowReaderException(CoderError,\"ImproperImageHeader\");",
          "318:     if ((sun_info.depth == 0) || (sun_info.depth > 32))",
          "319:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354:         if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)",
          "355:           ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "356:         sun_colormap=(unsigned char *) AcquireQuantumMemory(image->colors,",
          "358:         if (sun_colormap == (unsigned char *) NULL)",
          "359:           ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "361:         for (i=0; i < (ssize_t) image->colors; i++)",
          "362:           image->colormap[i].red=ScaleCharToQuantum(sun_colormap[i]);",
          "364:         for (i=0; i < (ssize_t) image->colors; i++)",
          "365:           image->colormap[i].green=ScaleCharToQuantum(sun_colormap[i]);",
          "366:         count=ReadBlob(image,image->colors,sun_colormap);",
          "",
          "[Removed Lines]",
          "357:           sizeof(*sun_colormap));",
          "360:         count=ReadBlob(image,image->colors,sun_colormap);",
          "363:         count=ReadBlob(image,image->colors,sun_colormap);",
          "",
          "[Added Lines]",
          "364:         sun_colormap=(unsigned char *) AcquireQuantumMemory(image->colors,",
          "365:           sizeof(*sun_colormap));",
          "367:           ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "368:         count=ReadBlob(image,image->colors,sun_colormap);",
          "370:           ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");",
          "371:         for (i=0; i < (ssize_t) image->colors; i++)",
          "373:             sun_colormap[i]);",
          "374:         count=ReadBlob(image,image->colors,sun_colormap);",
          "376:           ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");",
          "377:         for (i=0; i < (ssize_t) image->colors; i++)",
          "379:             sun_colormap[i]);",
          "380:         count=ReadBlob(image,image->colors,sun_colormap);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:           Read SUN raster colormap.",
          "380:         sun_colormap=(unsigned char *) AcquireQuantumMemory(sun_info.maplength,",
          "381:           sizeof(*sun_colormap));",
          "382:         if (sun_colormap == (unsigned char *) NULL)",
          "383:           ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "384:         count=ReadBlob(image,sun_info.maplength,sun_colormap);",
          "385:         sun_colormap=(unsigned char *) RelinquishMagickMemory(sun_colormap);",
          "387:       }",
          "388:       default:",
          "389:         ThrowReaderException(CoderError,\"ColormapTypeNotSupported\");",
          "",
          "[Removed Lines]",
          "386:         break;",
          "",
          "[Added Lines]",
          "397:         sun_colormap=(unsigned char *) AcquireQuantumMemory(sun_info.maplength,",
          "398:           sizeof(*sun_colormap));",
          "405:         break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "404:     if ((sun_info.type != RT_ENCODED) && (sun_info.depth >= 8) &&",
          "405:         ((number_pixels*((sun_info.depth+7)/8)) > sun_info.length))",
          "406:       ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");",
          "408:       sizeof(*sun_data));",
          "409:     if (sun_data == (unsigned char *) NULL)",
          "410:       ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "",
          "[Removed Lines]",
          "407:     sun_data=(unsigned char *) AcquireQuantumMemory((size_t) sun_info.length,",
          "",
          "[Added Lines]",
          "426:     sun_data=(unsigned char *) AcquireQuantumMemory((size_t) sun_info.length,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "430:         bytes_per_line<<=1;",
          "431:         if ((bytes_per_line >> 1) != (sun_info.width*sun_info.depth+15))",
          "432:           ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "435:           bytes_per_line*sizeof(*sun_pixels));",
          "436:         if (sun_pixels == (unsigned char *) NULL)",
          "437:           ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "",
          "[Removed Lines]",
          "433:         bytes_per_line>>=4;",
          "434:         sun_pixels=(unsigned char *) AcquireQuantumMemory(height,",
          "",
          "[Added Lines]",
          "452:         bytes_per_line>>=4;",
          "453:         sun_pixels=(unsigned char *) AcquireQuantumMemory(height,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "448:       {",
          "449:         q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);",
          "450:         if (q == (Quantum *) NULL)",
          "452:         for (x=0; x < ((ssize_t) image->columns-7); x+=8)",
          "453:         {",
          "454:           for (bit=7; bit >= 0; bit--)",
          "455:           {",
          "456:             SetPixelIndex(image,((*p) & (0x01 << bit) ? 0x00 : 0x01),q);",
          "457:             q+=GetPixelChannels(image);",
          "459:           p++;",
          "461:         if ((image->columns % 8) != 0)",
          "462:           {",
          "463:             for (bit=7; bit >= (ssize_t) (8-(image->columns % 8)); bit--)",
          "",
          "[Removed Lines]",
          "451:           break;",
          "458:           }",
          "460:         }",
          "",
          "[Added Lines]",
          "470:           break;",
          "471:         for (x=0; x < ((ssize_t) image->columns-7); x+=8)",
          "478:           }",
          "480:         }",
          "481:         if ((image->columns % 8) != 0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "542:               else",
          "543:                 {",
          "544:                   SetPixelRed(image,ScaleCharToQuantum(*p++),q);",
          "551:                     GetPixelRed(image,q)].red,q);",
          "552:                   SetPixelGreen(image,image->colormap[(ssize_t)",
          "553:                     GetPixelGreen(image,q)].green,q);",
          "",
          "[Removed Lines]",
          "545:                   SetPixelGreen(image,ScaleCharToQuantum(*p++),q);",
          "546:                   SetPixelBlue(image,ScaleCharToQuantum(*p++),q);",
          "547:                 }",
          "548:               if (image->colors != 0)",
          "549:                 {",
          "550:                   SetPixelRed(image,image->colormap[(ssize_t)",
          "",
          "[Added Lines]",
          "566:                   SetPixelGreen(image,ScaleCharToQuantum(*p++),q);",
          "567:                   SetPixelBlue(image,ScaleCharToQuantum(*p++),q);",
          "568:                 }",
          "569:               if (image->colors != 0)",
          "570:                 {",
          "571:                   SetPixelRed(image,ClampToQuantum(image->colormap[(ssize_t)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "769:   {",
          "771:       Initialize SUN raster file header.",
          "773:     (void) TransformImageColorspace(image,sRGBColorspace,exception);",
          "774:     sun_info.magic=0x59a66a95;",
          "775:     if ((image->columns != (unsigned int) image->columns) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "934:                   break;",
          "935:               }",
          "936:           }",
          "938:       else",
          "939:         {",
          "941:             Dump colormap to file.",
          "944:             (void) WriteBlobByte(image,ScaleQuantumToChar(",
          "945:               image->colormap[i].red));",
          "946:           for (i=0; i < (ssize_t) image->colors; i++)",
          "",
          "[Removed Lines]",
          "937:         }",
          "943:           for (i=0; i < (ssize_t) image->colors; i++)",
          "",
          "[Added Lines]",
          "958:         }",
          "964:           for (i=0; i < (ssize_t) image->colors; i++)",
          "",
          "---------------"
        ]
      }
    }
  ]
}