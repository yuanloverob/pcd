{
  "cve_id": "CVE-2014-7284",
  "cve_desc": "The net_get_random_once implementation in net/core/utils.c in the Linux kernel 3.13.x and 3.14.x before 3.14.5 on certain Intel processors does not perform the intended slow-path operation to initialize random seeds, which makes it easier for remote attackers to spoof or disrupt IP communication by leveraging the predictability of TCP sequence numbers, TCP and UDP port numbers, and IP ID values.",
  "repo": "torvalds/linux",
  "patch_hash": "3d4405226d27b3a215e4d03cfa51f536244e5de7",
  "patch_info": {
    "commit_hash": "3d4405226d27b3a215e4d03cfa51f536244e5de7",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3d4405226d27b3a215e4d03cfa51f536244e5de7",
    "files": [
      "include/linux/net.h",
      "net/core/utils.c"
    ],
    "message": "net: avoid dependency of net_get_random_once on nop patching\n\nnet_get_random_once depends on the static keys infrastructure to patch up\nthe branch to the slow path during boot. This was realized by abusing the\nstatic keys api and defining a new initializer to not enable the call\nsite while still indicating that the branch point should get patched\nup. This was needed to have the fast path considered likely by gcc.\n\nThe static key initialization during boot up normally walks through all\nthe registered keys and either patches in ideal nops or enables the jump\nsite but omitted that step on x86 if ideal nops where already placed at\nstatic_key branch points. Thus net_get_random_once branches not always\nbecame active.\n\nThis patch switches net_get_random_once to the ordinary static_key\napi and thus places the kernel fast path in the - by gcc considered -\nunlikely path.  Microbenchmarks on Intel and AMD x86-64 showed that\nthe unlikely path actually beats the likely path in terms of cycle cost\nand that different nop patterns did not make much difference, thus this\nswitch should not be noticeable.\n\nFixes: a48e42920ff38b (\"net: introduce new macro net_get_random_once\")\nReported-by: Tuomas R\u00e4s\u00e4nen <tuomasjjrasanen@tjjr.fi>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/linux/net.h||include/linux/net.h",
      "net/core/utils.c||net/core/utils.c"
    ]
  },
  "patch_diff": {
    "include/linux/net.h||include/linux/net.h": [
      "File: include/linux/net.h -> include/linux/net.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "248: bool __net_get_random_once(void *buf, int nbytes, bool *done,",
      "249:       struct static_key *done_key);",
      "258: #define net_get_random_once(buf, nbytes)    \\",
      "259:  ({        \\",
      "260:   bool ___ret = false;     \\",
      "261:   static bool ___done = false;    \\",
      "265:    ___ret = __net_get_random_once(buf,  \\",
      "266:              nbytes,  \\",
      "267:              &___done, \\",
      "269:   ___ret;       \\",
      "270:  })",
      "",
      "[Removed Lines]",
      "251: #ifdef HAVE_JUMP_LABEL",
      "252: #define ___NET_RANDOM_STATIC_KEY_INIT ((struct static_key) \\",
      "253:   { .enabled = ATOMIC_INIT(0), .entries = (void *)1 })",
      "255: #define ___NET_RANDOM_STATIC_KEY_INIT STATIC_KEY_INIT_FALSE",
      "262:   static struct static_key ___done_key =   \\",
      "263:    ___NET_RANDOM_STATIC_KEY_INIT;   \\",
      "264:   if (!static_key_true(&___done_key))   \\",
      "268:              &___done_key); \\",
      "",
      "[Added Lines]",
      "255:   static struct static_key ___once_key =   \\",
      "256:    STATIC_KEY_INIT_TRUE;    \\",
      "257:   if (static_key_true(&___once_key))   \\",
      "261:              &___once_key); \\",
      "",
      "---------------"
    ],
    "net/core/utils.c||net/core/utils.c": [
      "File: net/core/utils.c -> net/core/utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "348: {",
      "349:  struct __net_random_once_work *work =",
      "350:   container_of(w, struct __net_random_once_work, work);",
      "353:  kfree(work);",
      "354: }",
      "",
      "[Removed Lines]",
      "351:  if (!static_key_enabled(work->key))",
      "352:   static_key_slow_inc(work->key);",
      "",
      "[Added Lines]",
      "351:  BUG_ON(!static_key_enabled(work->key));",
      "352:  static_key_slow_dec(work->key);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "367: }",
      "369: bool __net_get_random_once(void *buf, int nbytes, bool *done,",
      "371: {",
      "372:  static DEFINE_SPINLOCK(lock);",
      "373:  unsigned long flags;",
      "",
      "[Removed Lines]",
      "370:       struct static_key *done_key)",
      "",
      "[Added Lines]",
      "370:       struct static_key *once_key)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "383:  spin_unlock_irqrestore(&lock, flags);",
      "387:  return true;",
      "388: }",
      "",
      "[Removed Lines]",
      "385:  __net_random_once_disable_jump(done_key);",
      "",
      "[Added Lines]",
      "385:  __net_random_once_disable_jump(once_key);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7965bd4d71ef7cf1db00afb9e406ddfc13443c13",
      "candidate_info": {
        "commit_hash": "7965bd4d71ef7cf1db00afb9e406ddfc13443c13",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7965bd4d71ef7cf1db00afb9e406ddfc13443c13",
        "files": [
          "include/linux/net.h",
          "include/linux/skbuff.h"
        ],
        "message": "net.h/skbuff.h: Remove extern from function prototypes\n\nThere are a mix of function prototypes with and without extern\nin the kernel sources.  Standardize on not using extern for\nfunction prototypes.\n\nFunction prototypes don't need to be written with extern.\nextern is assumed by the compiler.  Its use is as unnecessary as\nusing auto to declare automatic/local variables in a block.\n\nSigned-off-by: Joe Perches <joe@perches.com>",
        "before_after_code_files": [
          "include/linux/net.h||include/linux/net.h",
          "include/linux/skbuff.h||include/linux/skbuff.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/linux/net.h||include/linux/net.h"
          ],
          "candidate": [
            "include/linux/net.h||include/linux/net.h"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/net.h||include/linux/net.h": [
          "File: include/linux/net.h -> include/linux/net.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:  SOCK_WAKE_URG,",
          "196: };",
          "217: #define       sockfd_put(sock) fput(sock->file)",
          "220: #define net_ratelimited_function(function, ...)   \\",
          "221: do {        \\",
          "",
          "[Removed Lines]",
          "198: extern int      sock_wake_async(struct socket *sk, int how, int band);",
          "199: extern int      sock_register(const struct net_proto_family *fam);",
          "200: extern void      sock_unregister(int family);",
          "201: extern int      __sock_create(struct net *net, int family, int type, int proto,",
          "202:      struct socket **res, int kern);",
          "203: extern int      sock_create(int family, int type, int proto,",
          "204:      struct socket **res);",
          "205: extern int      sock_create_kern(int family, int type, int proto,",
          "206:           struct socket **res);",
          "207: extern int      sock_create_lite(int family, int type, int proto,",
          "208:           struct socket **res);",
          "209: extern void      sock_release(struct socket *sock);",
          "210: extern int         sock_sendmsg(struct socket *sock, struct msghdr *msg,",
          "211:       size_t len);",
          "212: extern int      sock_recvmsg(struct socket *sock, struct msghdr *msg,",
          "213:       size_t size, int flags);",
          "214: extern struct file  *sock_alloc_file(struct socket *sock, int flags, const char *dname);",
          "215: extern struct socket *sockfd_lookup(int fd, int *err);",
          "216: extern struct socket *sock_from_file(struct file *file, int *err);",
          "218: extern int      net_ratelimit(void);",
          "",
          "[Added Lines]",
          "198: int sock_wake_async(struct socket *sk, int how, int band);",
          "199: int sock_register(const struct net_proto_family *fam);",
          "200: void sock_unregister(int family);",
          "201: int __sock_create(struct net *net, int family, int type, int proto,",
          "202:     struct socket **res, int kern);",
          "203: int sock_create(int family, int type, int proto, struct socket **res);",
          "204: int sock_create_kern(int family, int type, int proto, struct socket **res);",
          "205: int sock_create_lite(int family, int type, int proto, struct socket **res);",
          "206: void sock_release(struct socket *sock);",
          "207: int sock_sendmsg(struct socket *sock, struct msghdr *msg, size_t len);",
          "208: int sock_recvmsg(struct socket *sock, struct msghdr *msg, size_t size,",
          "209:    int flags);",
          "210: struct file *sock_alloc_file(struct socket *sock, int flags, const char *dname);",
          "211: struct socket *sockfd_lookup(int fd, int *err);",
          "212: struct socket *sock_from_file(struct file *file, int *err);",
          "214: int net_ratelimit(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243: #define net_random()  prandom_u32()",
          "244: #define net_srandom(seed) prandom_seed((__force u32)(seed))",
          "273: #define MODULE_ALIAS_NETPROTO(proto) \\",
          "274:  MODULE_ALIAS(\"net-pf-\" __stringify(proto))",
          "",
          "[Removed Lines]",
          "246: extern int         kernel_sendmsg(struct socket *sock, struct msghdr *msg,",
          "247:         struct kvec *vec, size_t num, size_t len);",
          "248: extern int         kernel_recvmsg(struct socket *sock, struct msghdr *msg,",
          "249:         struct kvec *vec, size_t num,",
          "250:         size_t len, int flags);",
          "252: extern int kernel_bind(struct socket *sock, struct sockaddr *addr,",
          "253:          int addrlen);",
          "254: extern int kernel_listen(struct socket *sock, int backlog);",
          "255: extern int kernel_accept(struct socket *sock, struct socket **newsock,",
          "256:     int flags);",
          "257: extern int kernel_connect(struct socket *sock, struct sockaddr *addr,",
          "258:      int addrlen, int flags);",
          "259: extern int kernel_getsockname(struct socket *sock, struct sockaddr *addr,",
          "260:          int *addrlen);",
          "261: extern int kernel_getpeername(struct socket *sock, struct sockaddr *addr,",
          "262:          int *addrlen);",
          "263: extern int kernel_getsockopt(struct socket *sock, int level, int optname,",
          "264:         char *optval, int *optlen);",
          "265: extern int kernel_setsockopt(struct socket *sock, int level, int optname,",
          "266:         char *optval, unsigned int optlen);",
          "267: extern int kernel_sendpage(struct socket *sock, struct page *page, int offset,",
          "268:       size_t size, int flags);",
          "269: extern int kernel_sock_ioctl(struct socket *sock, int cmd, unsigned long arg);",
          "270: extern int kernel_sock_shutdown(struct socket *sock,",
          "271:     enum sock_shutdown_cmd how);",
          "",
          "[Added Lines]",
          "242: int kernel_sendmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,",
          "243:      size_t num, size_t len);",
          "244: int kernel_recvmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,",
          "245:      size_t num, size_t len, int flags);",
          "247: int kernel_bind(struct socket *sock, struct sockaddr *addr, int addrlen);",
          "248: int kernel_listen(struct socket *sock, int backlog);",
          "249: int kernel_accept(struct socket *sock, struct socket **newsock, int flags);",
          "250: int kernel_connect(struct socket *sock, struct sockaddr *addr, int addrlen,",
          "251:      int flags);",
          "252: int kernel_getsockname(struct socket *sock, struct sockaddr *addr,",
          "253:          int *addrlen);",
          "254: int kernel_getpeername(struct socket *sock, struct sockaddr *addr,",
          "255:          int *addrlen);",
          "256: int kernel_getsockopt(struct socket *sock, int level, int optname, char *optval,",
          "257:         int *optlen);",
          "258: int kernel_setsockopt(struct socket *sock, int level, int optname, char *optval,",
          "259:         unsigned int optlen);",
          "260: int kernel_sendpage(struct socket *sock, struct page *page, int offset,",
          "261:       size_t size, int flags);",
          "262: int kernel_sock_ioctl(struct socket *sock, int cmd, unsigned long arg);",
          "263: int kernel_sock_shutdown(struct socket *sock, enum sock_shutdown_cmd how);",
          "",
          "---------------"
        ],
        "include/linux/skbuff.h||include/linux/skbuff.h": [
          "File: include/linux/skbuff.h -> include/linux/skbuff.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:  skb->_skb_refdst = (unsigned long)dst;",
          "586: }",
          "",
          "[Removed Lines]",
          "588: extern void __skb_dst_set_noref(struct sk_buff *skb, struct dst_entry *dst,",
          "589:     bool force);",
          "",
          "[Added Lines]",
          "588: void __skb_dst_set_noref(struct sk_buff *skb, struct dst_entry *dst,",
          "589:     bool force);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634:  return (struct rtable *)skb_dst(skb);",
          "635: }",
          "642: extern struct kmem_cache *skbuff_head_cache;",
          "651: static inline struct sk_buff *alloc_skb(unsigned int size,",
          "652:      gfp_t priority)",
          "653: {",
          "",
          "[Removed Lines]",
          "637: extern void kfree_skb(struct sk_buff *skb);",
          "638: extern void kfree_skb_list(struct sk_buff *segs);",
          "639: extern void skb_tx_error(struct sk_buff *skb);",
          "640: extern void consume_skb(struct sk_buff *skb);",
          "641: extern void        __kfree_skb(struct sk_buff *skb);",
          "644: extern void kfree_skb_partial(struct sk_buff *skb, bool head_stolen);",
          "645: extern bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,",
          "646:         bool *fragstolen, int *delta_truesize);",
          "648: extern struct sk_buff *__alloc_skb(unsigned int size,",
          "649:        gfp_t priority, int flags, int node);",
          "650: extern struct sk_buff *build_skb(void *data, unsigned int frag_size);",
          "",
          "[Added Lines]",
          "637: void kfree_skb(struct sk_buff *skb);",
          "638: void kfree_skb_list(struct sk_buff *segs);",
          "639: void skb_tx_error(struct sk_buff *skb);",
          "640: void consume_skb(struct sk_buff *skb);",
          "641: void  __kfree_skb(struct sk_buff *skb);",
          "644: void kfree_skb_partial(struct sk_buff *skb, bool head_stolen);",
          "645: bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,",
          "646:         bool *fragstolen, int *delta_truesize);",
          "648: struct sk_buff *__alloc_skb(unsigned int size, gfp_t priority, int flags,",
          "649:        int node);",
          "650: struct sk_buff *build_skb(void *data, unsigned int frag_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "660:  return __alloc_skb(size, priority, SKB_ALLOC_FCLONE, NUMA_NO_NODE);",
          "661: }",
          "664: static inline struct sk_buff *alloc_skb_head(gfp_t priority)",
          "665: {",
          "666:  return __alloc_skb_head(priority, -1);",
          "667: }",
          "692: #define dev_kfree_skb(a) consume_skb(a)",
          "699: struct skb_seq_state {",
          "700:  __u32  lower_offset;",
          "",
          "[Removed Lines]",
          "663: extern struct sk_buff *__alloc_skb_head(gfp_t priority, int node);",
          "669: extern struct sk_buff *skb_morph(struct sk_buff *dst, struct sk_buff *src);",
          "670: extern int skb_copy_ubufs(struct sk_buff *skb, gfp_t gfp_mask);",
          "671: extern struct sk_buff *skb_clone(struct sk_buff *skb,",
          "672:      gfp_t priority);",
          "673: extern struct sk_buff *skb_copy(const struct sk_buff *skb,",
          "674:     gfp_t priority);",
          "675: extern struct sk_buff *__pskb_copy(struct sk_buff *skb,",
          "676:      int headroom, gfp_t gfp_mask);",
          "678: extern int        pskb_expand_head(struct sk_buff *skb,",
          "679:      int nhead, int ntail,",
          "680:      gfp_t gfp_mask);",
          "681: extern struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,",
          "682:          unsigned int headroom);",
          "683: extern struct sk_buff *skb_copy_expand(const struct sk_buff *skb,",
          "684:            int newheadroom, int newtailroom,",
          "685:            gfp_t priority);",
          "686: extern int        skb_to_sgvec(struct sk_buff *skb,",
          "687:         struct scatterlist *sg, int offset,",
          "688:         int len);",
          "689: extern int        skb_cow_data(struct sk_buff *skb, int tailbits,",
          "690:         struct sk_buff **trailer);",
          "691: extern int        skb_pad(struct sk_buff *skb, int pad);",
          "694: extern int skb_append_datato_frags(struct sock *sk, struct sk_buff *skb,",
          "695:    int getfrag(void *from, char *to, int offset,",
          "696:    int len,int odd, struct sk_buff *skb),",
          "697:    void *from, int length);",
          "",
          "[Added Lines]",
          "663: struct sk_buff *__alloc_skb_head(gfp_t priority, int node);",
          "669: struct sk_buff *skb_morph(struct sk_buff *dst, struct sk_buff *src);",
          "670: int skb_copy_ubufs(struct sk_buff *skb, gfp_t gfp_mask);",
          "671: struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t priority);",
          "672: struct sk_buff *skb_copy(const struct sk_buff *skb, gfp_t priority);",
          "673: struct sk_buff *__pskb_copy(struct sk_buff *skb, int headroom, gfp_t gfp_mask);",
          "675: int pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask);",
          "676: struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,",
          "677:          unsigned int headroom);",
          "678: struct sk_buff *skb_copy_expand(const struct sk_buff *skb, int newheadroom,",
          "679:     int newtailroom, gfp_t priority);",
          "680: int skb_to_sgvec(struct sk_buff *skb, struct scatterlist *sg, int offset,",
          "681:    int len);",
          "682: int skb_cow_data(struct sk_buff *skb, int tailbits, struct sk_buff **trailer);",
          "683: int skb_pad(struct sk_buff *skb, int pad);",
          "686: int skb_append_datato_frags(struct sock *sk, struct sk_buff *skb,",
          "687:        int getfrag(void *from, char *to, int offset,",
          "688:      int len, int odd, struct sk_buff *skb),",
          "689:        void *from, int length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "706:  __u8  *frag_data;",
          "707: };",
          "721: static inline __u32 skb_get_rxhash(struct sk_buff *skb)",
          "722: {",
          "723:  if (!skb->l4_rxhash)",
          "",
          "[Removed Lines]",
          "709: extern void       skb_prepare_seq_read(struct sk_buff *skb,",
          "710:         unsigned int from, unsigned int to,",
          "711:         struct skb_seq_state *st);",
          "712: extern unsigned int   skb_seq_read(unsigned int consumed, const u8 **data,",
          "713:        struct skb_seq_state *st);",
          "714: extern void       skb_abort_seq_read(struct skb_seq_state *st);",
          "716: extern unsigned int   skb_find_text(struct sk_buff *skb, unsigned int from,",
          "717:         unsigned int to, struct ts_config *config,",
          "718:         struct ts_state *state);",
          "720: extern void __skb_get_rxhash(struct sk_buff *skb);",
          "",
          "[Added Lines]",
          "701: void skb_prepare_seq_read(struct sk_buff *skb, unsigned int from,",
          "702:      unsigned int to, struct skb_seq_state *st);",
          "703: unsigned int skb_seq_read(unsigned int consumed, const u8 **data,",
          "704:      struct skb_seq_state *st);",
          "705: void skb_abort_seq_read(struct skb_seq_state *st);",
          "707: unsigned int skb_find_text(struct sk_buff *skb, unsigned int from,",
          "708:       unsigned int to, struct ts_config *config,",
          "709:       struct ts_state *state);",
          "711: void __skb_get_rxhash(struct sk_buff *skb);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1099: static inline void __skb_insert(struct sk_buff *newsk,",
          "1100:     struct sk_buff *prev, struct sk_buff *next,",
          "1101:     struct sk_buff_head *list)",
          "",
          "[Removed Lines]",
          "1098: extern void        skb_insert(struct sk_buff *old, struct sk_buff *newsk, struct sk_buff_head *list);",
          "",
          "[Added Lines]",
          "1089: void skb_insert(struct sk_buff *old, struct sk_buff *newsk,",
          "1090:   struct sk_buff_head *list);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1201:  __skb_insert(newsk, prev, prev->next, list);",
          "1202: }",
          "1207: static inline void __skb_queue_before(struct sk_buff_head *list,",
          "1208:           struct sk_buff *next,",
          "",
          "[Removed Lines]",
          "1204: extern void skb_append(struct sk_buff *old, struct sk_buff *newsk,",
          "1205:          struct sk_buff_head *list);",
          "",
          "[Added Lines]",
          "1196: void skb_append(struct sk_buff *old, struct sk_buff *newsk,",
          "1197:   struct sk_buff_head *list);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1225: static inline void __skb_queue_head(struct sk_buff_head *list,",
          "1226:         struct sk_buff *newsk)",
          "1227: {",
          "",
          "[Removed Lines]",
          "1224: extern void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk);",
          "",
          "[Added Lines]",
          "1216: void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1242: static inline void __skb_queue_tail(struct sk_buff_head *list,",
          "1243:        struct sk_buff *newsk)",
          "1244: {",
          "",
          "[Removed Lines]",
          "1241: extern void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk);",
          "",
          "[Added Lines]",
          "1233: void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1253: static inline void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)",
          "1254: {",
          "1255:  struct sk_buff *next, *prev;",
          "",
          "[Removed Lines]",
          "1252: extern void    skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);",
          "",
          "[Added Lines]",
          "1244: void skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1274: static inline struct sk_buff *__skb_dequeue(struct sk_buff_head *list)",
          "1275: {",
          "1276:  struct sk_buff *skb = skb_peek(list);",
          "",
          "[Removed Lines]",
          "1273: extern struct sk_buff *skb_dequeue(struct sk_buff_head *list);",
          "",
          "[Added Lines]",
          "1265: struct sk_buff *skb_dequeue(struct sk_buff_head *list);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1291: static inline struct sk_buff *__skb_dequeue_tail(struct sk_buff_head *list)",
          "1292: {",
          "1293:  struct sk_buff *skb = skb_peek_tail(list);",
          "",
          "[Removed Lines]",
          "1290: extern struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);",
          "",
          "[Added Lines]",
          "1282: struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1373:  skb_shinfo(skb)->nr_frags = i + 1;",
          "1374: }",
          "1379: #define SKB_PAGE_ASSERT(skb)  BUG_ON(skb_shinfo(skb)->nr_frags)",
          "1380: #define SKB_FRAG_ASSERT(skb)  BUG_ON(skb_has_frag_list(skb))",
          "",
          "[Removed Lines]",
          "1376: extern void skb_add_rx_frag(struct sk_buff *skb, int i, struct page *page,",
          "1377:        int off, int size, unsigned int truesize);",
          "",
          "[Added Lines]",
          "1368: void skb_add_rx_frag(struct sk_buff *skb, int i, struct page *page, int off,",
          "1369:        int size, unsigned int truesize);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1422: static inline unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)",
          "1423: {",
          "1424:  unsigned char *tmp = skb_tail_pointer(skb);",
          "",
          "[Removed Lines]",
          "1421: extern unsigned char *skb_put(struct sk_buff *skb, unsigned int len);",
          "",
          "[Added Lines]",
          "1413: unsigned char *skb_put(struct sk_buff *skb, unsigned int len);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1428:  return tmp;",
          "1429: }",
          "1432: static inline unsigned char *__skb_push(struct sk_buff *skb, unsigned int len)",
          "1433: {",
          "1434:  skb->data -= len;",
          "",
          "[Removed Lines]",
          "1431: extern unsigned char *skb_push(struct sk_buff *skb, unsigned int len);",
          "",
          "[Added Lines]",
          "1423: unsigned char *skb_push(struct sk_buff *skb, unsigned int len);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1436:  return skb->data;",
          "1437: }",
          "1440: static inline unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)",
          "1441: {",
          "1442:  skb->len -= len;",
          "",
          "[Removed Lines]",
          "1439: extern unsigned char *skb_pull(struct sk_buff *skb, unsigned int len);",
          "",
          "[Added Lines]",
          "1431: unsigned char *skb_pull(struct sk_buff *skb, unsigned int len);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1449:  return unlikely(len > skb->len) ? NULL : __skb_pull(skb, len);",
          "1450: }",
          "1454: static inline unsigned char *__pskb_pull(struct sk_buff *skb, unsigned int len)",
          "1455: {",
          "",
          "[Removed Lines]",
          "1452: extern unsigned char *__pskb_pull_tail(struct sk_buff *skb, int delta);",
          "",
          "[Added Lines]",
          "1444: unsigned char *__pskb_pull_tail(struct sk_buff *skb, int delta);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1753: #define NET_SKB_PAD max(32, L1_CACHE_BYTES)",
          "1754: #endif",
          "1758: static inline void __skb_trim(struct sk_buff *skb, unsigned int len)",
          "1759: {",
          "",
          "[Removed Lines]",
          "1756: extern int ___pskb_trim(struct sk_buff *skb, unsigned int len);",
          "",
          "[Added Lines]",
          "1748: int ___pskb_trim(struct sk_buff *skb, unsigned int len);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1765:  skb_set_tail_pointer(skb, len);",
          "1766: }",
          "1770: static inline int __pskb_trim(struct sk_buff *skb, unsigned int len)",
          "1771: {",
          "",
          "[Removed Lines]",
          "1768: extern void skb_trim(struct sk_buff *skb, unsigned int len);",
          "",
          "[Added Lines]",
          "1760: void skb_trim(struct sk_buff *skb, unsigned int len);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1842: static inline void __skb_queue_purge(struct sk_buff_head *list)",
          "1843: {",
          "1844:  struct sk_buff *skb;",
          "",
          "[Removed Lines]",
          "1841: extern void skb_queue_purge(struct sk_buff_head *list);",
          "",
          "[Added Lines]",
          "1833: void skb_queue_purge(struct sk_buff_head *list);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1850: #define NETDEV_FRAG_PAGE_MAX_SIZE  (PAGE_SIZE << NETDEV_FRAG_PAGE_MAX_ORDER)",
          "1851: #define NETDEV_PAGECNT_MAX_BIAS    NETDEV_FRAG_PAGE_MAX_SIZE",
          "",
          "[Removed Lines]",
          "1853: extern void *netdev_alloc_frag(unsigned int fragsz);",
          "1855: extern struct sk_buff *__netdev_alloc_skb(struct net_device *dev,",
          "1856:        unsigned int length,",
          "1857:        gfp_t gfp_mask);",
          "",
          "[Added Lines]",
          "1845: void *netdev_alloc_frag(unsigned int fragsz);",
          "1847: struct sk_buff *__netdev_alloc_skb(struct net_device *dev, unsigned int length,",
          "1848:        gfp_t gfp_mask);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2342: #define skb_walk_frags(skb, iter) \\",
          "2343:  for (iter = skb_shinfo(skb)->frag_list; iter; iter = iter->next)",
          "2400: static inline void *skb_header_pointer(const struct sk_buff *skb, int offset,",
          "2401:            int len, void *buffer)",
          "",
          "[Removed Lines]",
          "2345: extern struct sk_buff *__skb_recv_datagram(struct sock *sk, unsigned flags,",
          "2346:         int *peeked, int *off, int *err);",
          "2347: extern struct sk_buff *skb_recv_datagram(struct sock *sk, unsigned flags,",
          "2348:       int noblock, int *err);",
          "2349: extern unsigned int    datagram_poll(struct file *file, struct socket *sock,",
          "2350:          struct poll_table_struct *wait);",
          "2351: extern int        skb_copy_datagram_iovec(const struct sk_buff *from,",
          "2352:             int offset, struct iovec *to,",
          "2353:             int size);",
          "2354: extern int        skb_copy_and_csum_datagram_iovec(struct sk_buff *skb,",
          "2355:        int hlen,",
          "2356:        struct iovec *iov);",
          "2357: extern int        skb_copy_datagram_from_iovec(struct sk_buff *skb,",
          "2358:           int offset,",
          "2359:           const struct iovec *from,",
          "2360:           int from_offset,",
          "2361:           int len);",
          "2362: extern int        zerocopy_sg_from_iovec(struct sk_buff *skb,",
          "2363:            const struct iovec *frm,",
          "2364:            int offset,",
          "2365:            size_t count);",
          "2366: extern int        skb_copy_datagram_const_iovec(const struct sk_buff *from,",
          "2367:            int offset,",
          "2368:            const struct iovec *to,",
          "2369:            int to_offset,",
          "2370:            int size);",
          "2371: extern void        skb_free_datagram(struct sock *sk, struct sk_buff *skb);",
          "2372: extern void        skb_free_datagram_locked(struct sock *sk,",
          "2373:       struct sk_buff *skb);",
          "2374: extern int        skb_kill_datagram(struct sock *sk, struct sk_buff *skb,",
          "2375:       unsigned int flags);",
          "2376: extern __wsum        skb_checksum(const struct sk_buff *skb, int offset,",
          "2377:         int len, __wsum csum);",
          "2378: extern int        skb_copy_bits(const struct sk_buff *skb, int offset,",
          "2379:          void *to, int len);",
          "2380: extern int        skb_store_bits(struct sk_buff *skb, int offset,",
          "2381:           const void *from, int len);",
          "2382: extern __wsum        skb_copy_and_csum_bits(const struct sk_buff *skb,",
          "2383:            int offset, u8 *to, int len,",
          "2384:            __wsum csum);",
          "2385: extern int             skb_splice_bits(struct sk_buff *skb,",
          "2386:       unsigned int offset,",
          "2387:       struct pipe_inode_info *pipe,",
          "2388:       unsigned int len,",
          "2389:       unsigned int flags);",
          "2390: extern void        skb_copy_and_csum_dev(const struct sk_buff *skb, u8 *to);",
          "2391: extern void        skb_split(struct sk_buff *skb,",
          "2392:      struct sk_buff *skb1, const u32 len);",
          "2393: extern int        skb_shift(struct sk_buff *tgt, struct sk_buff *skb,",
          "2394:      int shiftlen);",
          "2395: extern void        skb_scrub_packet(struct sk_buff *skb, bool xnet);",
          "2397: extern struct sk_buff *skb_segment(struct sk_buff *skb,",
          "2398:        netdev_features_t features);",
          "",
          "[Added Lines]",
          "2336: struct sk_buff *__skb_recv_datagram(struct sock *sk, unsigned flags,",
          "2337:         int *peeked, int *off, int *err);",
          "2338: struct sk_buff *skb_recv_datagram(struct sock *sk, unsigned flags, int noblock,",
          "2339:       int *err);",
          "2340: unsigned int datagram_poll(struct file *file, struct socket *sock,",
          "2341:       struct poll_table_struct *wait);",
          "2342: int skb_copy_datagram_iovec(const struct sk_buff *from, int offset,",
          "2343:        struct iovec *to, int size);",
          "2344: int skb_copy_and_csum_datagram_iovec(struct sk_buff *skb, int hlen,",
          "2345:          struct iovec *iov);",
          "2346: int skb_copy_datagram_from_iovec(struct sk_buff *skb, int offset,",
          "2347:      const struct iovec *from, int from_offset,",
          "2348:      int len);",
          "2349: int zerocopy_sg_from_iovec(struct sk_buff *skb, const struct iovec *frm,",
          "2350:       int offset, size_t count);",
          "2351: int skb_copy_datagram_const_iovec(const struct sk_buff *from, int offset,",
          "2352:       const struct iovec *to, int to_offset,",
          "2353:       int size);",
          "2354: void skb_free_datagram(struct sock *sk, struct sk_buff *skb);",
          "2355: void skb_free_datagram_locked(struct sock *sk, struct sk_buff *skb);",
          "2356: int skb_kill_datagram(struct sock *sk, struct sk_buff *skb, unsigned int flags);",
          "2357: __wsum skb_checksum(const struct sk_buff *skb, int offset, int len,",
          "2358:       __wsum csum);",
          "2359: int skb_copy_bits(const struct sk_buff *skb, int offset, void *to, int len);",
          "2360: int skb_store_bits(struct sk_buff *skb, int offset, const void *from, int len);",
          "2361: __wsum skb_copy_and_csum_bits(const struct sk_buff *skb, int offset, u8 *to,",
          "2362:          int len, __wsum csum);",
          "2363: int skb_splice_bits(struct sk_buff *skb, unsigned int offset,",
          "2364:       struct pipe_inode_info *pipe, unsigned int len,",
          "2365:       unsigned int flags);",
          "2366: void skb_copy_and_csum_dev(const struct sk_buff *skb, u8 *to);",
          "2367: void skb_split(struct sk_buff *skb, struct sk_buff *skb1, const u32 len);",
          "2368: int skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen);",
          "2369: void skb_scrub_packet(struct sk_buff *skb, bool xnet);",
          "2371: struct sk_buff *skb_segment(struct sk_buff *skb, netdev_features_t features);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2440:  memcpy(skb->data + offset, from, len);",
          "2441: }",
          "2445: static inline ktime_t skb_get_ktime(const struct sk_buff *skb)",
          "2446: {",
          "",
          "[Removed Lines]",
          "2443: extern void skb_init(void);",
          "",
          "[Added Lines]",
          "2416: void skb_init(void);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2483:  return ktime_set(0, 0);",
          "2484: }",
          "2488: #ifdef CONFIG_NETWORK_PHY_TIMESTAMPING",
          "",
          "[Removed Lines]",
          "2486: extern void skb_timestamping_init(void);",
          "2490: extern void skb_clone_tx_timestamp(struct sk_buff *skb);",
          "2491: extern bool skb_defer_rx_timestamp(struct sk_buff *skb);",
          "",
          "[Added Lines]",
          "2459: void skb_timestamping_init(void);",
          "2463: void skb_clone_tx_timestamp(struct sk_buff *skb);",
          "2464: bool skb_defer_rx_timestamp(struct sk_buff *skb);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2535: static inline void sw_tx_timestamp(struct sk_buff *skb)",
          "2536: {",
          "",
          "[Removed Lines]",
          "2532: extern void skb_tstamp_tx(struct sk_buff *orig_skb,",
          "2533:    struct skb_shared_hwtstamps *hwtstamps);",
          "",
          "[Added Lines]",
          "2505: void skb_tstamp_tx(struct sk_buff *orig_skb,",
          "2506:      struct skb_shared_hwtstamps *hwtstamps);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2563: void skb_complete_wifi_ack(struct sk_buff *skb, bool acked);",
          "2568: static inline int skb_csum_unnecessary(const struct sk_buff *skb)",
          "2569: {",
          "",
          "[Removed Lines]",
          "2565: extern __sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len);",
          "2566: extern __sum16 __skb_checksum_complete(struct sk_buff *skb);",
          "",
          "[Added Lines]",
          "2538: __sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len);",
          "2539: __sum16 __skb_checksum_complete(struct sk_buff *skb);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2593: }",
          "2595: #if defined(CONFIG_NF_CONNTRACK) || defined(CONFIG_NF_CONNTRACK_MODULE)",
          "2597: static inline void nf_conntrack_put(struct nf_conntrack *nfct)",
          "2598: {",
          "2599:  if (nfct && atomic_dec_and_test(&nfct->use))",
          "",
          "[Removed Lines]",
          "2596: extern void nf_conntrack_destroy(struct nf_conntrack *nfct);",
          "",
          "[Added Lines]",
          "2569: void nf_conntrack_destroy(struct nf_conntrack *nfct);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2732:  return skb->queue_mapping != 0;",
          "2733: }",
          "2739: #ifdef CONFIG_XFRM",
          "2740: static inline struct sec_path *skb_sec_path(struct sk_buff *skb)",
          "",
          "[Removed Lines]",
          "2735: extern u16 __skb_tx_hash(const struct net_device *dev,",
          "2736:     const struct sk_buff *skb,",
          "2737:     unsigned int num_tx_queues);",
          "",
          "[Added Lines]",
          "2708: u16 __skb_tx_hash(const struct net_device *dev, const struct sk_buff *skb,",
          "2709:     unsigned int num_tx_queues);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2788:  return skb_shinfo(skb)->gso_type & SKB_GSO_TCPV6;",
          "2789: }",
          "2793: static inline bool skb_warn_if_lro(const struct sk_buff *skb)",
          "2794: {",
          "",
          "[Removed Lines]",
          "2791: extern void __skb_warn_lro_forwarding(const struct sk_buff *skb);",
          "",
          "[Added Lines]",
          "2763: void __skb_warn_lro_forwarding(const struct sk_buff *skb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a48e42920ff38bc90bbf75143fff4555723d4540",
      "candidate_info": {
        "commit_hash": "a48e42920ff38bc90bbf75143fff4555723d4540",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a48e42920ff38bc90bbf75143fff4555723d4540",
        "files": [
          "include/linux/net.h",
          "net/core/utils.c"
        ],
        "message": "net: introduce new macro net_get_random_once\n\nnet_get_random_once is a new macro which handles the initialization\nof secret keys. It is possible to call it in the fast path. Only the\ninitialization depends on the spinlock and is rather slow. Otherwise\nit should get used just before the key is used to delay the entropy\nextration as late as possible to get better randomness. It returns true\nif the key got initialized.\n\nThe usage of static_keys for net_get_random_once is a bit uncommon so\nit needs some further explanation why this actually works:\n\n=== In the simple non-HAVE_JUMP_LABEL case we actually have ===\nno constrains to use static_key_(true|false) on keys initialized with\nSTATIC_KEY_INIT_(FALSE|TRUE). So this path just expands in favor of\nthe likely case that the initialization is already done. The key is\ninitialized like this:\n\n___done_key = { .enabled = ATOMIC_INIT(0) }\n\nThe check\n\n                if (!static_key_true(&___done_key))                     \\\n\nexpands into (pseudo code)\n\n                if (!likely(___done_key > 0))\n\n, so we take the fast path as soon as ___done_key is increased from the\nhelper function.\n\n=== If HAVE_JUMP_LABELs are available this depends ===\non patching of jumps into the prepared NOPs, which is done in\njump_label_init at boot-up time (from start_kernel). It is forbidden\nand dangerous to use net_get_random_once in functions which are called\nbefore that!\n\nAt compilation time NOPs are generated at the call sites of\nnet_get_random_once. E.g. net/ipv6/inet6_hashtable.c:inet6_ehashfn (we\nneed to call net_get_random_once two times in inet6_ehashfn, so two NOPs):\n\n      71:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n      76:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\nBoth will be patched to the actual jumps to the end of the function to\ncall __net_get_random_once at boot time as explained above.\n\narch_static_branch is optimized and inlined for false as return value and\nactually also returns false in case the NOP is placed in the instruction\nstream. So in the fast case we get a \"return false\". But because we\ninitialize ___done_key with (enabled != (entries & 1)) this call-site\nwill get patched up at boot thus returning true. The final check looks\nlike this:\n\n                if (!static_key_true(&___done_key))                     \\\n                        ___ret = __net_get_random_once(buf,             \\\n\nexpands to\n\n                if (!!static_key_false(&___done_key))                     \\\n                        ___ret = __net_get_random_once(buf,             \\\n\nSo we get true at boot time and as soon as static_key_slow_inc is called\non the key it will invert the logic and return false for the fast path.\nstatic_key_slow_inc will change the branch because it got initialized\nwith .enabled == 0. After static_key_slow_inc is called on the key the\nbranch is replaced with a nop again.\n\n=== Misc: ===\nThe helper defers the increment into a workqueue so we don't\nhave problems calling this code from atomic sections. A seperate boolean\n(___done) guards the case where we enter net_get_random_once again before\nthe increment happend.\n\nCc: Ingo Molnar <mingo@redhat.com>\nCc: Steven Rostedt <rostedt@goodmis.org>\nCc: Jason Baron <jbaron@redhat.com>\nCc: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: Eric Dumazet <edumazet@google.com>\nCc: \"David S. Miller\" <davem@davemloft.net>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/linux/net.h||include/linux/net.h",
          "net/core/utils.c||net/core/utils.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/linux/net.h||include/linux/net.h",
            "net/core/utils.c||net/core/utils.c"
          ],
          "candidate": [
            "include/linux/net.h||include/linux/net.h",
            "net/core/utils.c||net/core/utils.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/net.h||include/linux/net.h": [
          "File: include/linux/net.h -> include/linux/net.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: #define net_random()  prandom_u32()",
          "240: #define net_srandom(seed) prandom_seed((__force u32)(seed))",
          "242: int kernel_sendmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,",
          "243:      size_t num, size_t len);",
          "244: int kernel_recvmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242: bool __net_get_random_once(void *buf, int nbytes, bool *done,",
          "243:       struct static_key *done_key);",
          "245: #ifdef HAVE_JUMP_LABEL",
          "246: #define ___NET_RANDOM_STATIC_KEY_INIT ((struct static_key) \\",
          "247:   { .enabled = ATOMIC_INIT(0), .entries = (void *)1 })",
          "249: #define ___NET_RANDOM_STATIC_KEY_INIT STATIC_KEY_INIT_FALSE",
          "253: #define net_get_random_once(buf, nbytes)    \\",
          "254:  ({        \\",
          "255:   bool ___ret = false;     \\",
          "256:   static bool ___done = false;    \\",
          "257:   static struct static_key ___done_key =   \\",
          "258:    ___NET_RANDOM_STATIC_KEY_INIT;   \\",
          "259:   if (!static_key_true(&___done_key))   \\",
          "260:    ___ret = __net_get_random_once(buf,  \\",
          "261:              nbytes,  \\",
          "262:              &___done, \\",
          "263:              &___done_key); \\",
          "264:   ___ret;       \\",
          "265:  })",
          "",
          "---------------"
        ],
        "net/core/utils.c||net/core/utils.c": [
          "File: net/core/utils.c -> net/core/utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:       csum_unfold(*sum)));",
          "339: }",
          "340: EXPORT_SYMBOL(inet_proto_csum_replace16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342: struct __net_random_once_work {",
          "343:  struct work_struct work;",
          "344:  struct static_key *key;",
          "345: };",
          "347: static void __net_random_once_deferred(struct work_struct *w)",
          "348: {",
          "349:  struct __net_random_once_work *work =",
          "350:   container_of(w, struct __net_random_once_work, work);",
          "351:  if (!static_key_enabled(work->key))",
          "352:   static_key_slow_inc(work->key);",
          "353:  kfree(work);",
          "354: }",
          "356: static void __net_random_once_disable_jump(struct static_key *key)",
          "357: {",
          "358:  struct __net_random_once_work *w;",
          "360:  w = kmalloc(sizeof(*w), GFP_ATOMIC);",
          "361:  if (!w)",
          "362:   return;",
          "364:  INIT_WORK(&w->work, __net_random_once_deferred);",
          "365:  w->key = key;",
          "366:  schedule_work(&w->work);",
          "367: }",
          "369: bool __net_get_random_once(void *buf, int nbytes, bool *done,",
          "370:       struct static_key *done_key)",
          "371: {",
          "372:  static DEFINE_SPINLOCK(lock);",
          "374:  spin_lock_bh(&lock);",
          "375:  if (*done) {",
          "376:   spin_unlock_bh(&lock);",
          "377:   return false;",
          "378:  }",
          "380:  get_random_bytes(buf, nbytes);",
          "382:  spin_unlock_bh(&lock);",
          "384:  __net_random_once_disable_jump(done_key);",
          "386:  return true;",
          "387: }",
          "388: EXPORT_SYMBOL(__net_get_random_once);",
          "",
          "---------------"
        ]
      }
    }
  ]
}