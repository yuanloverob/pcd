{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55220a6c7016750ad316a985d2b887ed58b017ad",
      "candidate_info": {
        "commit_hash": "55220a6c7016750ad316a985d2b887ed58b017ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55220a6c7016750ad316a985d2b887ed58b017ad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Improved reuse of file descriptors for which close() is delayed to prevent clearly of posix advisory locks.\n\nFossilOrigin-Name: 509c1ba26a4c12c63ecf04ddfa2f175eaf4dd9b96ab7be15faebd36deb0a0a31",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 846d2d2d2f7fd2e4178c70bc2b92f18941a7972fe88c0129035b7a253ed21785",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5770:       UnixUnusedFd **pp;",
          "5771:       assert( sqlite3_mutex_notheld(pInode->pLockMutex) );",
          "5772:       sqlite3_mutex_enter(pInode->pLockMutex);",
          "5773:       for(pp=&pInode->pUnused; *pp && (*pp)->flags!=flags; pp=&((*pp)->pNext));",
          "5774:       pUnused = *pp;",
          "5775:       if( pUnused ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5773:       flags &= (SQLITE_OPEN_READONLY|SQLITE_OPEN_READWRITE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6074:   if( p->pPreallocatedUnused ){",
          "6075:     p->pPreallocatedUnused->fd = fd;",
          "6077:   }",
          "6079:   if( isDelete ){",
          "",
          "[Removed Lines]",
          "6076:     p->pPreallocatedUnused->flags = flags;",
          "",
          "[Added Lines]",
          "6077:     p->pPreallocatedUnused->flags =",
          "6078:                           flags & (SQLITE_OPEN_READONLY|SQLITE_OPEN_READWRITE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1116b1785c018911c33c4148aee1987810b5670b",
      "candidate_info": {
        "commit_hash": "1116b1785c018911c33c4148aee1987810b5670b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1116b1785c018911c33c4148aee1987810b5670b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "In the unix VFS layer, do not attempt to chown() the journal to be the same as the database if running in 8+3 filename mode.  Also, update the comments on the chown() attempt to be more precise.\n\nFossilOrigin-Name: ab853724a7e01ca32167d294c3c80d6632e805bdf39b6d56db82226a00ad72dc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 489a1eb3aa2f1225b97b50a5f8688cf1a4ab0371973da1badc29616d70386c03",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6059:       goto open_finished;",
          "6060:     }",
          "6067:       robustFchown(fd, uid, gid);",
          "6068:     }",
          "6069:   }",
          "",
          "[Removed Lines]",
          "6066:     if( flags & (SQLITE_OPEN_WAL|SQLITE_OPEN_MAIN_JOURNAL) ){",
          "",
          "[Added Lines]",
          "6074:     if( openFlags && (flags & (SQLITE_OPEN_WAL|SQLITE_OPEN_MAIN_JOURNAL))!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd668c26b5d7a7526638e39239844e01a1d251e0",
      "candidate_info": {
        "commit_hash": "dd668c26b5d7a7526638e39239844e01a1d251e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd668c26b5d7a7526638e39239844e01a1d251e0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/in.test"
        ],
        "message": "When applying the IN_INDEX_NOOP optimization and the LHS has REAL affinity, also apply REAL affinity to each element of the RHS. Ticket [2841e99d104c6436].\n\nFossilOrigin-Name: 88833a9c2849c959a37a80e0e4d2b211ce3c83a48319724c89b172b060c876b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0c946f0846b2835f8facca806a4d4ecc2b2e97343de245a0d91716d998b2a829",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3124:     int r2, regToFree;",
          "3125:     int regCkNull = 0;",
          "3126:     int ii;",
          "3127:     assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "3128:     if( destIfNull!=destIfFalse ){",
          "3129:       regCkNull = sqlite3GetTempReg(pParse);",
          "3130:       sqlite3VdbeAddOp3(v, OP_BitAnd, rLhs, rLhs, regCkNull);",
          "3131:     }",
          "3132:     for(ii=0; ii<pList->nExpr; ii++){",
          "3133:       r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "3134:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3135:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3136:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3133:     bLhsReal = sqlite3ExprAffinity(pExpr->pLeft)==SQLITE_AFF_REAL;",
          "3136:       if( bLhsReal ){",
          "3137:         sqlite3VdbeAddOp4(v, OP_Affinity, r2, 1, 0, \"E\", P4_STATIC);",
          "3138:       }",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "759:   SELECT * FROM t0 WHERE '1' IN (t0.c0);",
          "760: } {}",
          "763: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "762: # 2019-09-02 ticket https://www.sqlite.org/src/info/2841e99d104c6436",
          "763: # For the IN_INDEX_NOOP optimization, apply REAL affinity to the LHS",
          "764: # values prior to comparison if the RHS has REAL affinity.",
          "765: #",
          "766: do_execsql_test in-19.1 {",
          "767:   DROP TABLE IF EXISTS t0;",
          "768:   CREATE TABLE t0(c0 REAL UNIQUE);",
          "769:   INSERT INTO t0(c0) VALUES(2.07093491255203046E18);",
          "770:   SELECT 1 FROM t0 WHERE c0 IN ('2070934912552030444');",
          "771: } {1}",
          "772: do_execsql_test in-19.2 {",
          "773:   SELECT c0 IN ('2070934912552030444') FROM t0;",
          "774: } {1}",
          "775: do_execsql_test in-19.3 {",
          "776:   SELECT c0 IN ('2070934912552030444',2,3) FROM t0;",
          "777: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "042666e4fa379ddd29eb049d77319e32dc94126f",
      "candidate_info": {
        "commit_hash": "042666e4fa379ddd29eb049d77319e32dc94126f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/042666e4fa379ddd29eb049d77319e32dc94126f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/in.test"
        ],
        "message": "When an IN operator drives a query loop, mark it as \"CODED\" so that it will not be used afterwards for a (pointless) membership test.  This is a better fix for ticket [df46dfb631f75694] than the previous fix that is now on a branch as it preserves the full optimization of check-in [e130319317e76119].\n\nFossilOrigin-Name: fa792714ae62fa980f1767acc6d622a6727ceb677870243c88548423795dcb5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/in.test||test/in.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f16d127c3b4a735afae1fc236bcf90f31adff079c7d3a896f901d908ff8b8532",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1344:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iCur, addrNxt, iRowidReg);",
          "1345:     VdbeCoverage(v);",
          "1346:     pLevel->op = OP_Noop;",
          "1347:   }else if( (pLoop->wsFlags & WHERE_IPK)!=0",
          "1348:          && (pLoop->wsFlags & WHERE_COLUMN_RANGE)!=0",
          "1349:   ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1347:     pTerm->wtFlags |= TERM_CODED;",
          "",
          "---------------"
        ],
        "test/in.test||test/in.test": [
          "File: test/in.test -> test/in.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "651:   SELECT * FROM c1 WHERE a IN (SELECT a FROM c1) ORDER BY 1",
          "652: } {1 2 3 4}",
          "654: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "654: # 2019-02-20 Ticket https://www.sqlite.org/src/tktview/df46dfb631f75694fbb97033b69",
          "655: #",
          "656: do_execsql_test in-15.0 {",
          "657:   DROP TABLE IF EXISTS t1;",
          "658:   CREATE TABLE IF NOT EXISTS t1(id INTEGER PRIMARY KEY);",
          "659:   INSERT INTO t1 VALUES(1);",
          "660:   SELECT a.id FROM t1 AS a JOIN t1 AS b ON a.id=b.id WHERE a.id IN (1,2,3);",
          "661: } {1}",
          "662: do_execsql_test in-15.1 {",
          "663:   DROP TABLE IF EXISTS t2;",
          "664:   CREATE TABLE t2(a INTEGER PRIMARY KEY,b);",
          "665:   INSERT INTO t2 VALUES(1,11);",
          "666:   INSERT INTO t2 VALUES(2,22);",
          "667:   INSERT INTO t2 VALUES(3,33);",
          "668:   SELECT b, a IN (3,4,5) FROM t2 ORDER BY b;",
          "669: } {11 0 22 0 33 1}",
          "670: do_execsql_test in-15.2 {",
          "671:   DROP TABLE IF EXISTS t3;",
          "672:   CREATE TABLE t3(x INTEGER PRIMARY KEY);",
          "673:   INSERT INTO t3 VALUES(8);",
          "674:   SELECT CASE WHEN x NOT IN (5,6,7) THEN 'yes' ELSE 'no' END FROM t3;",
          "675:   SELECT CASE WHEN x NOT IN (NULL,6,7) THEN 'yes' ELSE 'no' END FROM t3;",
          "676: } {yes no}",
          "677: do_execsql_test in-15.3 {",
          "678:   SELECT CASE WHEN x NOT IN (5,6,7) OR x=0 THEN 'yes' ELSE 'no' END FROM t3;",
          "679:   SELECT CASE WHEN x NOT IN (NULL,6,7) OR x=0 THEN 'yes' ELSE 'no' END FROM t3;",
          "680: } {yes no}",
          "681: do_execsql_test in-15.4 {",
          "682:   DROP TABLE IF EXISTS t4;",
          "683:   CREATE TABLE t4(a INTEGER PRIMARY KEY, b INT);",
          "684:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<20)",
          "685:     INSERT INTO t4(a,b) SELECT x, x+100 FROM c;",
          "686:   SELECT b FROM t4 WHERE a IN (3,null,8) ORDER BY +b;",
          "687: } {103 108}",
          "688: do_execsql_test in-15.5 {",
          "689:   SELECT b FROM t4 WHERE a NOT IN (3,null,8);",
          "690: } {}",
          "691: do_execsql_test in-15.6 {",
          "692:   DROP TABLE IF EXISTS t5;",
          "693:   DROP TABLE IF EXISTS t6;",
          "694:   CREATE TABLE t5(id INTEGER PRIMARY KEY, name TEXT);",
          "695:   CREATE TABLE t6(id INTEGER PRIMARY KEY, name TEXT, t5_id INT);",
          "696:   INSERT INTO t5 VALUES(1,'Alice'),(2,'Emma');",
          "697:   INSERT INTO t6 VALUES(1,'Bob',1),(2,'Cindy',1),(3,'Dave',2);",
          "698:   SELECT a.*",
          "699:     FROM t5 AS 'a' JOIN t5 AS 'b' ON b.id=a.id",
          "700:    WHERE b.id IN (",
          "701:           SELECT t6.t5_id",
          "702:             FROM t6",
          "703:            WHERE name='Bob'",
          "704:              AND t6.t5_id IS NOT NULL",
          "705:              AND t6.id IN (",
          "706:                   SELECT id",
          "707:                     FROM (SELECT t6.id, count(*) AS x",
          "708:                             FROM t6",
          "709:                            WHERE name='Bob'",
          "710:                          ) AS 't'",
          "711:                    WHERE x=1",
          "712:                  )",
          "713:              AND t6.id IN (1,id)",
          "714:          );",
          "715: } {1 Alice}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
      "candidate_info": {
        "commit_hash": "676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/676fa25a0f7737d7e233a840a5c2d7dffdccb75a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/pragma.c"
        ],
        "message": "Bug fixes so that \"make test\" once against runs with no errors.\n\nFossilOrigin-Name: 7bfe0f679d8951b3e925bdf549efa0f8d6b514eddeaca69cbfddbd9476cfff5f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 069351b85f9a706f60d3e98fbc8aaf40c374356b967c0464aede30ead3d9d18b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1009:     iRegStore = regRowid+1;",
          "1010:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "1011:       int k;",
          "1012:       assert( i>=nHidden );",
          "1013:       assert( iRegStore==sqlite3ColumnOfTable(pTab,i)+regRowid+1 );",
          "1014:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012:       u32 colFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1020:         sqlite3VdbeAddOp1(v, OP_SoftNull, iRegStore);",
          "1021:         continue;",
          "1022:       }",
          "1024:         nHidden++;",
          "1027:           iRegStore--;",
          "1030:           sqlite3ExprCodeFactorable(pParse, pTab->aCol[i].pDflt, iRegStore);",
          "1031:         }",
          "1033:       }",
          "1034:       if( pColumn ){",
          "1035:         for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}",
          "",
          "[Removed Lines]",
          "1023:       if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1025:         if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1028:         }else{",
          "1032:         continue;",
          "",
          "[Added Lines]",
          "1024:       if( ((colFlags = pTab->aCol[i].colFlags) & COLFLAG_NOINSERT)!=0 ){",
          "1026:         if( (colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "1029:           continue;",
          "1030:         }else if( (colFlags & COLFLAG_STORED)!=0 || pColumn==0 ){",
          "1034:           continue;",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102:       for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){",
          "1103:         int isHidden = 0;",
          "1104:         if( pCol->colFlags & COLFLAG_NOINSERT ){",
          "1107:           if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "1109:           }else if( pCol->colFlags & COLFLAG_VIRTUAL ){",
          "",
          "[Removed Lines]",
          "1105:           nHidden++;",
          "1106:           if( pPragma->iArg==0 ) continue;",
          "",
          "[Added Lines]",
          "1105:           if( pPragma->iArg==0 ){",
          "1106:             nHidden++;",
          "1107:             continue;",
          "1108:           }",
          "",
          "---------------"
        ]
      }
    }
  ]
}