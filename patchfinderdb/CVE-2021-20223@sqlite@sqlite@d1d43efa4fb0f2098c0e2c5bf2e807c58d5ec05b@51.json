{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e732787dadf6a950efd25e66374825d15ed758e",
      "candidate_info": {
        "commit_hash": "1e732787dadf6a950efd25e66374825d15ed758e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1e732787dadf6a950efd25e66374825d15ed758e",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3atoken.test"
        ],
        "message": "Set the SQLITE_DIRECTONLY flag on the fts3_tokenizer() function of FTS3, thus preventing that function from being called from within a trigger or view.\n\nFossilOrigin-Name: f3171dc22e4d3a40ca17fe609391d92fc6a997b775bfefa5947aec69c889aa73",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "481: ){",
          "482:   int rc = SQLITE_OK;",
          "483:   void *p = (void *)pHash;",
          "486: #ifdef SQLITE_TEST",
          "487:   char *zTest = 0;",
          "",
          "[Removed Lines]",
          "484:   const int any = SQLITE_ANY;",
          "",
          "[Added Lines]",
          "484:   const int any = SQLITE_ANY|SQLITE_DIRECTONLY;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1dc83c5d54ca2890112e735e336c209adb8d067d2f647e9f8ae5d58f84a52461",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   }",
          "130: } {1 blob blob blob blob}",
          "132: #--------------------------------------------------------------------------",
          "133: # Test cases fts3atoken-2.* test error cases in the scalar function based",
          "134: # API for getting and setting tokenizers.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: # 2019-12-31:  The fts3_tokenizer() function can never be invoked from",
          "133: # within a trigger or view.",
          "134: #",
          "135: do_catchsql_test fts3atoken-1.10 {",
          "136:   CREATE VIEW v110(x) AS",
          "137:       SELECT fts3_tokenizer('tok110', fts3_tokenizer('simple')) IS NULL;",
          "138: } {0 {}}",
          "139: do_catchsql_test fts3atoken-1.11 {",
          "140:   SELECT * FROM v110;",
          "141: } {1 {fts3_tokenizer() prohibited in triggers and views}}",
          "142: do_catchsql_test fts3atoken-1.12 {",
          "143:   CREATE TABLE t110(a,b);",
          "144:   CREATE TRIGGER r110 AFTER INSERT ON t110 BEGIN",
          "145:       SELECT fts3_tokenizer('tok110', fts3_tokenizer('simple')) IS NULL;",
          "146:   END;",
          "147: } {0 {}}",
          "148: do_catchsql_test fts3atoken-1.13 {",
          "149:   INSERT INTO t110(a,b) VALUES(1,2);",
          "150: } {1 {fts3_tokenizer() prohibited in triggers and views}}",
          "151: do_catchsql_test fts3atoken-1.14 {",
          "152:   SELECT * FROM t110;",
          "153: } {0 {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4938ea2ba17cdba4bd03a23b2f3cfd783f79c0a",
      "candidate_info": {
        "commit_hash": "c4938ea2ba17cdba4bd03a23b2f3cfd783f79c0a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c4938ea2ba17cdba4bd03a23b2f3cfd783f79c0a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h"
        ],
        "message": "Tie up the loose ends in the ExprList size reduction.\n\nFossilOrigin-Name: 59d0f3afe5249a2a6453fe7bc810c2c7beb896d3800174c7c90f9304c0b1ad88",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fdda76cfb01bf2b19522ac4558b443634d28a69b0828677c42682b645eae1f3b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:   if( ALWAYS(p->pEList) ){",
          "765:     ExprList *pList = p->pEList;",
          "766:     for(i=0; i<pList->nExpr; i++){",
          "768:         sqlite3RenameTokenRemap(pParse, 0, (void*)pList->a[i].zEName);",
          "769:       }",
          "770:     }",
          "",
          "[Removed Lines]",
          "767:       if( pList->a[i].zEName ){",
          "",
          "[Added Lines]",
          "767:       if( pList->a[i].zEName && pList->a[i].eEName==ENAME_NAME ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808:     sWalker.xExprCallback = renameUnmapExprCb;",
          "809:     sqlite3WalkExprList(&sWalker, pEList);",
          "810:     for(i=0; i<pEList->nExpr; i++){",
          "812:     }",
          "813:   }",
          "814: }",
          "",
          "[Removed Lines]",
          "811:       sqlite3RenameTokenRemap(pParse, 0, (void*)pEList->a[i].zEName);",
          "",
          "[Added Lines]",
          "811:       if( pEList->a[i].eEName==ENAME_NAME ){",
          "812:         sqlite3RenameTokenRemap(pParse, 0, (void*)pEList->a[i].zEName);",
          "813:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "947:     int i;",
          "948:     for(i=0; i<pEList->nExpr; i++){",
          "949:       char *zName = pEList->a[i].zEName;",
          "951:         renameTokenFind(pParse, pCtx, (void*)zName);",
          "952:       }",
          "953:     }",
          "",
          "[Removed Lines]",
          "950:       if( 0==sqlite3_stricmp(zName, zOld) ){",
          "",
          "[Added Lines]",
          "952:       if( pEList->a[i].eEName==ENAME_NAME",
          "953:        && 0==sqlite3_stricmp(zName, zOld)",
          "954:       ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1745:     assert( pList->nExpr>0 );",
          "1746:     pItem = &pList->a[pList->nExpr-1];",
          "1747:     assert( pItem->zEName==0 );",
          "1748:     pItem->zEName = sqlite3DbStrNDup(pParse->db, pName->z, pName->n);",
          "1749:     if( dequote ) sqlite3Dequote(pItem->zEName);",
          "1750:     if( IN_RENAME_OBJECT ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1748:     assert( pItem->eEName==ENAME_NAME );",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:   const char *zCol,",
          "138:   const char *zTab,",
          "139:   const char *zDb",
          "140: ){",
          "141:   int n;",
          "142:   for(n=0; ALWAYS(zSpan[n]) && zSpan[n]!='.'; n++){}",
          "143:   if( zDb && (sqlite3StrNICmp(zSpan, zDb, n)!=0 || zDb[n]!=0) ){",
          "144:     return 0;",
          "",
          "[Removed Lines]",
          "135: int sqlite3MatchSpanName(",
          "136:   const char *zSpan,",
          "",
          "[Added Lines]",
          "135: int sqlite3MatchEName(",
          "136:   const struct ExprList_item *pItem,",
          "142:   const char *zSpan;",
          "143:   if( pItem->eEName!=ENAME_TAB ) return 0;",
          "144:   zSpan = pItem->zEName;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:           int hit = 0;",
          "268:           pEList = pItem->pSelect->pEList;",
          "269:           for(j=0; j<pEList->nExpr; j++){",
          "271:               cnt++;",
          "272:               cntTab = 2;",
          "273:               pMatch = pItem;",
          "",
          "[Removed Lines]",
          "270:             if( sqlite3MatchSpanName(pEList->a[j].zEName, zCol, zTab, zDb) ){",
          "",
          "[Added Lines]",
          "273:             if( sqlite3MatchEName(&pEList->a[j], zCol, zTab, zDb) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448:       pEList = pNC->uNC.pEList;",
          "449:       assert( pEList!=0 );",
          "450:       for(j=0; j<pEList->nExpr; j++){",
          "453:           Expr *pOrig;",
          "454:           assert( pExpr->pLeft==0 && pExpr->pRight==0 );",
          "455:           assert( pExpr->x.pList==0 );",
          "",
          "[Removed Lines]",
          "451:         char *zAs = pEList->a[j].zEName;",
          "452:         if( zAs!=0 && sqlite3StrICmp(zAs, zCol)==0 ){",
          "",
          "[Added Lines]",
          "454:         char *zAs;",
          "455:         if( pEList->a[j].eEName==ENAME_NAME",
          "456:          && (zAs = pEList->a[j].zEName)!=0",
          "457:          && sqlite3StrICmp(zAs, zCol)==0",
          "458:         ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1116:     char *zCol = pE->u.zToken;",
          "1117:     for(i=0; i<pEList->nExpr; i++){",
          "1118:       char *zAs = pEList->a[i].zEName;",
          "1120:         return i+1;",
          "1121:       }",
          "1122:     }",
          "",
          "[Removed Lines]",
          "1119:       if( zAs!=0 && sqlite3StrICmp(zAs, zCol)==0 ){",
          "",
          "[Added Lines]",
          "1125:       if( pEList->a[i].eEName==ENAME_NAME",
          "1126:        && (zAs = pEList->a[i].zEName)!=0",
          "1127:        && sqlite3StrICmp(zAs, zCol)==0",
          "1128:       ){",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5045:             assert( zName );",
          "5046:             if( zTName && pSub",
          "5048:             ){",
          "5049:               continue;",
          "5050:             }",
          "",
          "[Removed Lines]",
          "5047:              && sqlite3MatchSpanName(pSub->pEList->a[j].zEName, 0, zTName, 0)==0",
          "",
          "[Added Lines]",
          "5047:              && sqlite3MatchEName(&pSub->pEList->a[j], 0, zTName, 0)==0",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4430: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4431: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4432: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "4434: int sqlite3ResolveExprNames(NameContext*, Expr*);",
          "4435: int sqlite3ResolveExprListNames(NameContext*, ExprList*);",
          "4436: void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);",
          "",
          "[Removed Lines]",
          "4433: int sqlite3MatchSpanName(const char*, const char*, const char*, const char*);",
          "",
          "[Added Lines]",
          "4433: int sqlite3MatchEName(",
          "4434:   const struct ExprList_item*,",
          "4435:   const char*,",
          "4436:   const char*,",
          "4437:   const char*",
          "4438: );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfbaae7572b76e48eab50819aafb13b0cef8a98b",
      "candidate_info": {
        "commit_hash": "dfbaae7572b76e48eab50819aafb13b0cef8a98b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfbaae7572b76e48eab50819aafb13b0cef8a98b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments on the new OP_SeekScan opcode.\n\nFossilOrigin-Name: 6110fdd5bb7b4ae5c065404c802ae726362ef084966b73cffe58c4bfb98689d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2206a2c848a122ee220c89427f9be0460cba0706f58852139d7b37184ce29a29",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ]
      }
    },
    {
      "candidate_hash": "395a60dad467819ba520aa528dd4983e908c50ec",
      "candidate_info": {
        "commit_hash": "395a60dad467819ba520aa528dd4983e908c50ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/395a60dad467819ba520aa528dd4983e908c50ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/null.test"
        ],
        "message": "Back out the incorrect optimization of check-in [e51ecadcbdef5ce6] as ticket [5c4e7aa793943803] reports a case where the optimization does not work.\n\nFossilOrigin-Name: 7395e96b8cc370c8ac2657fb805915b0992a15d80f8bf256d277b423fec64675",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/null.test||test/null.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69f9eb7343a416c5ab426c8e1b9f0ae576544b4ccc5d87f5481c8ff884f696e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1763:       Expr *pRight = pRangeStart->pExpr->pRight;",
          "1764:       codeExprOrVector(pParse, pRight, regBase+nEq, nBtm);",
          "1765:       whereLikeOptimizationStringFixup(v, pLevel, pRangeStart);",
          "1768:        && sqlite3ExprCanBeNull(pRight)",
          "1769:       ){",
          "1770:         sqlite3VdbeAddOp2(v, OP_IsNull, regBase+nEq, addrNxt);",
          "",
          "[Removed Lines]",
          "1766:       if( !bRev",
          "1767:        && (pRangeStart->wtFlags & TERM_VNULL)==0",
          "",
          "[Added Lines]",
          "1766:       if( (pRangeStart->wtFlags & TERM_VNULL)==0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1839:       Expr *pRight = pRangeEnd->pExpr->pRight;",
          "1840:       codeExprOrVector(pParse, pRight, regBase+nEq, nTop);",
          "1841:       whereLikeOptimizationStringFixup(v, pLevel, pRangeEnd);",
          "1844:        && sqlite3ExprCanBeNull(pRight)",
          "1845:       ){",
          "1846:         sqlite3VdbeAddOp2(v, OP_IsNull, regBase+nEq, addrNxt);",
          "",
          "[Removed Lines]",
          "1842:       if( bRev",
          "1843:        && (pRangeEnd->wtFlags & TERM_VNULL)==0",
          "",
          "[Added Lines]",
          "1841:       if( (pRangeEnd->wtFlags & TERM_VNULL)==0",
          "",
          "---------------"
        ],
        "test/null.test||test/null.test": [
          "File: test/null.test -> test/null.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:   SELECT * FROM t5 WHERE a IS NULL AND b = 'x';",
          "297: } {{} x two {} x ii}",
          "300: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299: # 2020-09-30 ticket 5c4e7aa793943803",
          "300: reset_db",
          "301: do_execsql_test null-10.1 {",
          "302:   CREATE TABLE t0(c0 PRIMARY KEY DESC);",
          "303:   INSERT INTO t0(c0) VALUES (0);",
          "304:   SELECT * FROM t0 WHERE t0.c0 > NULL;",
          "305: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad1b3284a241336fee692fc555b2ca5567e043b",
      "candidate_info": {
        "commit_hash": "0ad1b3284a241336fee692fc555b2ca5567e043b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ad1b3284a241336fee692fc555b2ca5567e043b",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an assert() in fts3 that could fail when processing a corrupt record.\n\nFossilOrigin-Name: 4adc0a1b0d84c2df6d6bf0d5d9d3fa9f7d048af8d232c4beb77518727890f212",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2339:   assert( isSaveLeft==0 || isExact==0 );",
          "2342:   if( *p1==POS_COLUMN ){",
          "2343:     p1++;",
          "2344:     p1 += fts3GetVarint32(p1, &iCol1);",
          "",
          "[Removed Lines]",
          "2341:   assert( p!=0 && *p1!=0 && *p2!=0 );",
          "",
          "[Added Lines]",
          "2341:   assert_fts3_nc( p!=0 && *p1!=0 && *p2!=0 );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d73e857b833dfc29400049ca7f01ca465f980466e3aa67214c3c5e5573181419",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "6113: set sqlite_fts3_enable_parentheses $saved",
          "6115: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6115: #-------------------------------------------------------------------------",
          "6116: reset_db",
          "6117: do_execsql_test 41.1 {",
          "6118:   CREATE VIRTUAL TABLE t1 USING fts3(a,b,c);",
          "6119:   INSERT INTO t1_segdir VALUES(0,0,0,0,'0 835',X'000130120106000106000106001f030001030001030000083230313630363039090107000107000107000001340901050001050001050000013509010400010400010400010730303030303030091c0400010400010400000662696e6172793c0301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000008636f3870696c657209010200010200010200000664627374617409070300010300010300010465627567090402000102000102000006656e61626c653f07020001020001020001020001020001020001020001020001020001030001010002020001020001020001020001120001020001020001020001020001020001087874656e73696f6e091f0400010400010400000466747334090a0300010300010400030135090d03000103000103000003676363090103000103000103000106656f706f6c790910030001030001030000056a736f6e310913030001030001030000046c6f6164091f030001030001030000036d6178091c02000102000102000105656d6f7279091c03000103000103000304737973350916030001030001030000066e6f636173653c02010202000301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000301020200030102020000046f6d6974091f020001020001020000057274726565091903000103000103000302696d3c010102020003010202000301020200030102020003010202000301020200030102020003010202000301020200030102020003010202000301020200000a746872656164736166650922020001020001020000047674616209070400010400010400000178b401010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200010101020001010102000101010200');",
          "6120: }",
          "6122: do_execsql_test 41.2 {",
          "6123:   SELECT offsets(t1) FROM t1 WHERE t1 MATCH 'rtree ner \"json1^enable\"';",
          "6124: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}