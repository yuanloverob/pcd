{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "973bbecf1a6a75cae0fcbe7a152d2e0640ebc60b",
      "candidate_info": {
        "commit_hash": "973bbecf1a6a75cae0fcbe7a152d2e0640ebc60b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/973bbecf1a6a75cae0fcbe7a152d2e0640ebc60b",
        "files": [
          "src/v8_typed_array.cc",
          "test/simple/test-typed-arrays.js"
        ],
        "message": "typed arrays: prevent unaligned typed array views on top of buffers",
        "before_after_code_files": [
          "src/v8_typed_array.cc||src/v8_typed_array.cc",
          "test/simple/test-typed-arrays.js||test/simple/test-typed-arrays.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/v8_typed_array.cc||src/v8_typed_array.cc": [
          "File: src/v8_typed_array.cc -> src/v8_typed_array.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   }",
          "123: };",
          "126:   return (val & (bytes - 1)) == 0;  // Handles bytes == 0.",
          "127: }",
          "",
          "[Removed Lines]",
          "125: static bool checkAlignment(unsigned int val, unsigned int bytes) {",
          "",
          "[Added Lines]",
          "125: static bool checkAlignment(size_t val, unsigned int bytes) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:     if (node::Buffer::HasInstance(args[0])",
          "187:         || ArrayBuffer::HasInstance(args[0])) {  // ArrayBuffer constructor.",
          "188:       buffer = v8::Local<v8::Object>::Cast(args[0]);",
          "190:           buffer->GetIndexedPropertiesExternalArrayDataLength();",
          "192:       if (!args[1]->IsUndefined() && args[1]->Int32Value() < 0)",
          "193:         return ThrowRangeError(\"Byte offset out of range.\");",
          "194:       byte_offset = args[1]->IsUndefined() ? 0 : args[1]->Uint32Value();",
          "199:       if (args.Length() > 2) {",
          "200:         if (args[2]->Int32Value() < 0)",
          "201:           return ThrowRangeError(\"Length out of range.\");",
          "",
          "[Removed Lines]",
          "189:       unsigned int buflen =",
          "196:       if (!checkAlignment(byte_offset, TBytes))",
          "197:         return ThrowRangeError(\"Byte offset is not aligned.\");",
          "",
          "[Added Lines]",
          "189:       size_t buflen =",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:         return ThrowRangeError(\"Length is out of range.\");",
          "215:       }",
          "218:       void* buf = buffer->GetIndexedPropertiesExternalArrayData();",
          "219:       args.This()->SetIndexedPropertiesToExternalArrayData(",
          "221:     }",
          "222:     else if (args[0]->IsObject()) {  // TypedArray / type[] constructor.",
          "223:       v8::Local<v8::Object> obj = v8::Local<v8::Object>::Cast(args[0]);",
          "",
          "[Removed Lines]",
          "220:           reinterpret_cast<char*>(buf) + byte_offset, TEAType, length);",
          "",
          "[Added Lines]",
          "215:       char* begin = reinterpret_cast<char*>(buf) + byte_offset;",
          "217:       if (!checkAlignment(reinterpret_cast<uintptr_t>(begin), TBytes))",
          "218:         return ThrowRangeError(\"Byte offset is not aligned.\");",
          "221:         begin, TEAType, length);",
          "",
          "---------------"
        ],
        "test/simple/test-typed-arrays.js||test/simple/test-typed-arrays.js": [
          "File: test/simple/test-typed-arrays.js -> test/simple/test-typed-arrays.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: });",
          "57: buffer.fill(0);",
          "64: assert.equal(uint8.BYTES_PER_ELEMENT, 1);",
          "65: assert.equal(uint16.BYTES_PER_ELEMENT, 2);",
          "",
          "[Removed Lines]",
          "56: var buffer = new Buffer(8);",
          "59: var uint8 = new Uint8Array(buffer);",
          "60: var uint16 = new Uint16Array(buffer);",
          "61: var uint16slice = new Uint16Array(buffer, 2, 2);",
          "62: var uint32 = new Uint32Array(buffer);",
          "",
          "[Added Lines]",
          "56: var buffer = new Buffer(16);",
          "61: var errors = 0;",
          "62: var offset;",
          "63: for (var i = 0; i < 8; i++) {",
          "64:   try {",
          "65:     new Float64Array(buffer, i);",
          "66:     offset = i;",
          "67:   } catch (e) {",
          "68:     errors += 1;",
          "69:   }",
          "70: }",
          "72: assert.equal(errors, 7);",
          "74: var uint8 = new Uint8Array(buffer, offset);",
          "75: var uint16 = new Uint16Array(buffer, offset);",
          "76: var uint16slice = new Uint16Array(buffer, offset + 2, 2);",
          "77: var uint32 = new Uint32Array(buffer, offset);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: assert.equal(uint32.BYTES_PER_ELEMENT, 4);",
          "80:   This is what we expect the variables to look like at this point (on",
          "81:   little-endian machines):",
          "84:   uint8       | 0x08 | 0x09 | 0x0a | 0x0b | 0x0c | 0x0d | 0x0e | 0x0f\u00a0|",
          "85:   uint16      |    0x0908   |    0x0b0a   |    0x0d0c   |    0x0f0e   |",
          "86:   uint16slice --------------|    0x0b0a   |    0x0d0c   |--------------",
          "",
          "[Removed Lines]",
          "70: buffer[0] = 0x08;",
          "71: buffer[1] = 0x09;",
          "72: buffer[2] = 0x0a;",
          "73: buffer[3] = 0x0b;",
          "74: buffer[4] = 0x0c;",
          "75: buffer[5] = 0x0d;",
          "76: buffer[6] = 0x0e;",
          "77: buffer[7] = 0x0f;",
          "83:   buffer      | 0x08 | 0x09 | 0x0a | 0x0b | 0x0c | 0x0d | 0x0e | 0x0f |",
          "",
          "[Added Lines]",
          "85: buffer[offset    ] = 0x08;",
          "86: buffer[offset + 1] = 0x09;",
          "87: buffer[offset + 2] = 0x0a;",
          "88: buffer[offset + 3] = 0x0b;",
          "89: buffer[offset + 4] = 0x0c;",
          "90: buffer[offset + 5] = 0x0d;",
          "91: buffer[offset + 6] = 0x0e;",
          "92: buffer[offset + 7] = 0x0f;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40b7302af84be97993c0b17432b331466e99f67c",
      "candidate_info": {
        "commit_hash": "40b7302af84be97993c0b17432b331466e99f67c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/40b7302af84be97993c0b17432b331466e99f67c",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-readfile-unlink.js"
        ],
        "message": "fs.readFile: don't make the callback before the fd is closed\n\nOn Windows it is not possible to unlink() the read file in the callback.\nThis fixes #3051. A test is included.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-readfile-unlink.js||test/simple/test-fs-readfile-unlink.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   var readStream = fs.createReadStream(path);",
          "79:   var buffers = [];",
          "80:   var nread = 0;",
          "82:   readStream.on('data', function(chunk) {",
          "83:     buffers.push(chunk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   });",
          "87:   readStream.on('error', function(er) {",
          "89:     readStream.destroy();",
          "90:   });",
          "94:     var buffer;",
          "95:     switch (buffers.length) {",
          "",
          "[Removed Lines]",
          "88:     callback(er);",
          "92:   readStream.on('end', function() {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-readfile-unlink.js||test/simple/test-fs-readfile-unlink.js": [
          "File: test/simple/test-fs-readfile-unlink.js -> test/simple/test-fs-readfile-unlink.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var assert = require('assert'),",
          "23:     common = require('../common'),",
          "24:     fs = require('fs'),",
          "25:     path = require('path'),",
          "26:     dirName = path.resolve(common.fixturesDir, 'test-readfile-unlink'),",
          "27:     fileName = path.resolve(dirName, 'test.bin');",
          "29: var buf = new Buffer(512 * 1024);",
          "30: buf.fill(42);",
          "32: try {",
          "33:   fs.mkdirSync(dirName);",
          "34: } catch (e) {",
          "36:   if (e.code != 'EEXIST') throw e;",
          "37: }",
          "39: fs.writeFileSync(fileName, buf);",
          "41: fs.readFile(fileName, function(err, data) {",
          "42:   assert.ifError(err);",
          "43:   assert(data.length == buf.length);",
          "44:   assert.strictEqual(buf[0], 42);",
          "46:   fs.unlinkSync(fileName);",
          "47:   fs.rmdirSync(dirName);",
          "48: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88f94fa28c4bc7f8a0cd080943a8169098bb33b2",
      "candidate_info": {
        "commit_hash": "88f94fa28c4bc7f8a0cd080943a8169098bb33b2",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/88f94fa28c4bc7f8a0cd080943a8169098bb33b2",
        "files": [
          "src/node.cc"
        ],
        "message": "MakeCallback: abort() if not a function",
        "before_after_code_files": [
          "src/node.cc||src/node.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "991:   Local<Value> callback_v = object->Get(symbol);",
          "992:   if (!callback_v->IsFunction()) {",
          "993:     String::Utf8Value method(symbol);",
          "995:   }",
          "997:   Local<Function> callback = Local<Function>::Cast(callback_v);",
          "999:   return scope.Close(MakeCallback(object, callback, argc, argv));",
          "",
          "[Removed Lines]",
          "994:     fprintf(stderr, \"method = %s\", *method);",
          "996:   assert(callback_v->IsFunction());",
          "",
          "[Added Lines]",
          "997:     fprintf(stderr, \"Non-function in MakeCallback. method = %s\\n\", *method);",
          "998:     abort();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bec26122d6de0b230f74731c1d09da267c95add",
      "candidate_info": {
        "commit_hash": "8bec26122d6de0b230f74731c1d09da267c95add",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8bec26122d6de0b230f74731c1d09da267c95add",
        "files": [
          "lib/tls.js",
          "test/simple/test-tls-junk-closes-server.js",
          "test/simple/test-tls-server-missing-options.js"
        ],
        "message": "tls, https: throw exception on missing key/cert\n\nThrow an exception in the tls.Server constructor when the options object\ndoesn't contain either a PFX or a key/certificate combo.\n\nSaid change exposed a bug in simple/test-tls-junk-closes-server. Addressed.\n\nFixes #3941.",
        "before_after_code_files": [
          "lib/tls.js||litls.js",
          "test/simple/test-tls-junk-closes-server.js||test/simple/test-tls-junk-closes-server.js",
          "test/simple/test-tls-server-missing-options.js||test/simple/test-tls-server-missing-options.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1059:   this.setOptions(options);",
          "1061:   var sharedCreds = crypto.createCredentials({",
          "1062:     pfx: self.pfx,",
          "1063:     key: self.key,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-tls-junk-closes-server.js||test/simple/test-tls-junk-closes-server.js": [
          "File: test/simple/test-tls-junk-closes-server.js -> test/simple/test-tls-junk-closes-server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   cert: fs.readFileSync(common.fixturesDir + '/keys/agent2-cert.pem')",
          "35: };",
          "38:   s.write('welcome!\\n');",
          "39:   s.pipe(s);",
          "40: });",
          "",
          "[Removed Lines]",
          "37: var server = tls.createServer(function(s) {",
          "",
          "[Added Lines]",
          "37: var server = tls.createServer(options, function(s) {",
          "",
          "---------------"
        ],
        "test/simple/test-tls-server-missing-options.js||test/simple/test-tls-server-missing-options.js": [
          "File: test/simple/test-tls-server-missing-options.js -> test/simple/test-tls-server-missing-options.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: if (!process.versions.openssl) {",
          "23:   console.error('Skipping because node compiled without OpenSSL.');",
          "24:   process.exit(0);",
          "25: }",
          "27: var common = require('../common');",
          "28: var assert = require('assert');",
          "29: var https = require('https');",
          "30: var tls = require('tls');",
          "32: assert.throws(function() {",
          "33:   tls.createServer({ /* empty */}).listen(0);",
          "34: }, /missing.+certificate/i);",
          "36: assert.throws(function() {",
          "37:   https.createServer({ /* empty */}).listen(0);",
          "38: }, /missing.+certificate/i);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ab4a77d6fdb2b98b3c34fda9d001ed9d91297c7",
      "candidate_info": {
        "commit_hash": "7ab4a77d6fdb2b98b3c34fda9d001ed9d91297c7",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7ab4a77d6fdb2b98b3c34fda9d001ed9d91297c7",
        "files": [
          "src/node_buffer.cc",
          "src/node_buffer.h"
        ],
        "message": "buffer: update constructor prototype\n\nChange Buffer::New(char*, size_t) to Buffer::New(const char*, size_t).",
        "before_after_code_files": [
          "src/node_buffer.cc||src/node_buffer.cc",
          "src/node_buffer.h||src/node_buffer.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_buffer.cc||src/node_buffer.cc": [
          "File: src/node_buffer.cc -> src/node_buffer.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: }",
          "141:   HandleScope scope;",
          "143:   Local<Value> arg = Integer::NewFromUnsigned(0);",
          "144:   Local<Object> obj = constructor_template->GetFunction()->NewInstance(1, &arg);",
          "146:   Buffer *buffer = ObjectWrap::Unwrap<Buffer>(obj);",
          "149:   return buffer;",
          "150: }",
          "",
          "[Removed Lines]",
          "140: Buffer* Buffer::New(char* data, size_t length) {",
          "147:   buffer->Replace(data, length, NULL, NULL);",
          "",
          "[Added Lines]",
          "140: Buffer* Buffer::New(const char* data, size_t length) {",
          "147:   buffer->Replace(const_cast<char*>(data), length, NULL, NULL);",
          "",
          "---------------"
        ],
        "src/node_buffer.h||src/node_buffer.h": [
          "File: src/node_buffer.h -> src/node_buffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   static v8::Handle<v8::Object> New(v8::Handle<v8::String> string);",
          "104:   static void Initialize(v8::Handle<v8::Object> target);",
          "107:   static Buffer* New(char *data, size_t length,",
          "110:   private:",
          "111:   static v8::Handle<v8::Value> New(const v8::Arguments &args);",
          "",
          "[Removed Lines]",
          "105:   static Buffer* New(size_t length); // public constructor",
          "106:   static Buffer* New(char *data, size_t len); // public constructor",
          "108:                      free_callback callback, void *hint); // public constructor",
          "",
          "[Added Lines]",
          "107:   static Buffer* New(size_t length);",
          "109:   static Buffer* New(const char *data, size_t len);",
          "112:                      free_callback callback, void *hint);",
          "",
          "---------------"
        ]
      }
    }
  ]
}