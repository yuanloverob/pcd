{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0cbec59c8bbaa2e2ddf13928441d68b28a9aa3d0",
      "candidate_info": {
        "commit_hash": "0cbec59c8bbaa2e2ddf13928441d68b28a9aa3d0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0cbec59c8bbaa2e2ddf13928441d68b28a9aa3d0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "test/with1.test"
        ],
        "message": "When generating the name of a view (or common table expression) because the SQL does not specify a name, avoid the names \"true\" and \"false\" which might be confused for the boolean literals of the same name, leading to an inconsistent abstract syntax tree.\n\nFossilOrigin-Name: ff9492d3ff733c222ea67f23d478df1547641b5e2e6dd870b0b29e25c13f3739",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cd56872afbb4edeff2e8c1cb1c8d47c7a9b333b3fc416c20183250807291fae8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1848:   return WRC_Abort;",
          "1849: }",
          "1856: int sqlite3ExprIdToTrueFalse(Expr *pExpr){",
          "1857:   assert( pExpr->op==TK_ID || pExpr->op==TK_STRING );",
          "1858:   if( !ExprHasProperty(pExpr, EP_Quoted)",
          "1861:   ){",
          "1862:     pExpr->op = TK_TRUEFALSE;",
          "1864:     return 1;",
          "1865:   }",
          "1866:   return 0;",
          "",
          "[Removed Lines]",
          "1859:    && (sqlite3StrICmp(pExpr->u.zToken, \"true\")==0",
          "1860:        || sqlite3StrICmp(pExpr->u.zToken, \"false\")==0)",
          "1863:     ExprSetProperty(pExpr, pExpr->u.zToken[4]==0 ? EP_IsTrue : EP_IsFalse);",
          "",
          "[Added Lines]",
          "1859: u32 sqlite3IsTrueOrFalse(const char *zIn){",
          "1860:   if( sqlite3StrICmp(zIn, \"true\")==0  ) return EP_IsTrue;",
          "1861:   if( sqlite3StrICmp(zIn, \"false\")==0 ) return EP_IsFalse;",
          "1862:   return 0;",
          "1863: }",
          "1872:   u32 v;",
          "1875:    && (v = sqlite3IsTrueOrFalse(pExpr->u.zToken))!=0",
          "1878:     ExprSetProperty(pExpr, v);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2003:         zName = pEList->a[i].zEName;",
          "2004:       }",
          "2005:     }",
          "2007:       zName = sqlite3DbStrDup(db, zName);",
          "2008:     }else{",
          "2009:       zName = sqlite3MPrintf(db,\"column%d\",i+1);",
          "",
          "[Removed Lines]",
          "2006:     if( zName ){",
          "",
          "[Added Lines]",
          "2006:     if( zName && !sqlite3IsTrueOrFalse(zName) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4249: void sqlite3Savepoint(Parse*, int, Token*);",
          "4250: void sqlite3CloseSavepoints(sqlite3 *);",
          "4251: void sqlite3LeaveMutexAndCloseZombie(sqlite3*);",
          "4252: int sqlite3ExprIdToTrueFalse(Expr*);",
          "4253: int sqlite3ExprTruthValue(const Expr*);",
          "4254: int sqlite3ExprIsConstant(Expr*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4252: u32 sqlite3IsTrueOrFalse(const char*);",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1140:   3 1 1 3",
          "1141: }",
          "1143: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1143: # 2020-01-02 chromium ticket 1033461",
          "1144: # Do not allow the generated name of a CTE be \"true\" or \"false\" as",
          "1145: # such a label might be later confused for the boolean literals of",
          "1146: # the same name, causing inconsistencies in the abstract syntax",
          "1147: # tree.  This problem first arose in version 3.23.0 when SQLite",
          "1148: # began recognizing \"true\" and \"false\" as boolean literals, but also",
          "1149: # had to continue to recognize \"true\" and \"false\" as identifiers for",
          "1150: # backwards compatibility.",
          "1151: #",
          "1152: reset_db",
          "1153: do_execsql_test 25.1 {",
          "1154:   CREATE TABLE dual(dummy);",
          "1155:   INSERT INTO dual(dummy) VALUES('X');",
          "1156:   WITH cte1 AS (",
          "1157:     SELECT TRUE, (",
          "1158:       WITH cte2 AS (SELECT avg(DISTINCT TRUE) FROM dual)",
          "1159:       SELECT 2571 FROM cte2",
          "1160:     ) AS subquery1",
          "1161:     FROM dual",
          "1162:     GROUP BY 1",
          "1163:   )",
          "1164:   SELECT (SELECT 1324 FROM cte1) FROM cte1;",
          "1165: } {1324}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21b473de781e05c32cf609d3e7472730bca0aa08",
      "candidate_info": {
        "commit_hash": "21b473de781e05c32cf609d3e7472730bca0aa08",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/21b473de781e05c32cf609d3e7472730bca0aa08",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/utf.c"
        ],
        "message": "Work around a bug in clang-11.0.0.\n\nFossilOrigin-Name: 3c2bf8042ec46195c67dfd91df084f5bc19162fd26389920e716b310c80deea6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/utf.c||src/utf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 89af93d77fa7959a4ee7364bae6c02c40963a3cdf80b0a4a8af9c9764d5c7bb5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/utf.c||src/utf.c": [
          "File: src/utf.c -> src/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:   assert( (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len );",
          "346:   sqlite3VdbeMemRelease(pMem);",
          "348:   pMem->enc = desiredEnc;",
          "349:   pMem->z = (char*)zOut;",
          "350:   pMem->zMalloc = pMem->z;",
          "",
          "[Removed Lines]",
          "345:   c = pMem->flags;",
          "347:   pMem->flags = MEM_Str|MEM_Term|(c&(MEM_AffMask|MEM_Subtype));",
          "",
          "[Added Lines]",
          "345:   c = MEM_Str|MEM_Term|(pMem->flags&(MEM_AffMask|MEM_Subtype));",
          "347:   pMem->flags = c;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e5ecdc1727bbf5a38a4fcdcd482813ddce7334d",
      "candidate_info": {
        "commit_hash": "9e5ecdc1727bbf5a38a4fcdcd482813ddce7334d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e5ecdc1727bbf5a38a4fcdcd482813ddce7334d",
        "files": [
          "ext/session/sessionH.test",
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In sqlite3changeset_apply(), ensure that DELETE and UPDATE changes are always executed on main database tables, not similarly named temp tables, as documented. INSERT statements are already being handled correctly.\n\nFossilOrigin-Name: f71a13d072398c9fc3556f42d75159cc2d0edc2c42f6c47f64503a7fbbca6e37",
        "before_after_code_files": [
          "ext/session/sessionH.test||ext/session/sessionH.test",
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sessionH.test||ext/session/sessionH.test": [
          "File: ext/session/sessionH.test -> ext/session/sessionH.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   compare_db db db2",
          "35: } {}",
          "38: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #------------------------------------------------------------------------",
          "38: db2 close",
          "39: reset_db",
          "41: do_execsql_test 2.0 {",
          "42:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "43:   INSERT INTO main.t1 VALUES(1, 2, 3), (4, 5, 6), (7, 8, 9);",
          "44: }",
          "46: do_test 2.1 {",
          "47:   sqlite3session S db main",
          "48:   S attach *",
          "49:   db eval {",
          "50:     BEGIN;",
          "51:       INSERT INTO t1 VALUES(10, 11, 12);",
          "52:       DELETE FROM t1 WHERE a=1;",
          "53:       UPDATE t1 SET b='five', c='six' WHERE a=4;",
          "54:   }",
          "56:   set C [S changeset]",
          "57:   db eval ROLLBACK",
          "58:   S delete",
          "59:   set {} {}",
          "60: } {}",
          "62: do_execsql_test 2.2 {",
          "63:   CREATE TEMP TABLE t1(a INTEGER PRIMARY KEY, b, c);",
          "64:   INSERT INTO temp.t1 VALUES(1, 2, 3), (4, 5, 6), (7, 8, 9);",
          "65: }",
          "67: set ::conflict [list]",
          "68: proc xConflict {args} { lappend ::conflict $args ; return \"\" }",
          "69: do_test 2.3 {",
          "70:   sqlite3changeset_apply db $C xConflict",
          "71:   set ::conflict",
          "72: } {}",
          "73: do_execsql_test 2.4 {",
          "74:   SELECT * FROM main.t1;",
          "75:   SELECT '****';",
          "76:   SELECT * FROM temp.t1;",
          "77: } {",
          "78:   4 five six 7 8 9 10 11 12",
          "80:   1 2 3 4 5 6 7 8 9",
          "81: }",
          "",
          "---------------"
        ],
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3513:   SessionBuffer buf = {0, 0, 0};",
          "3514:   int nPk = 0;",
          "3517:   sessionAppendIdent(&buf, zTab, &rc);",
          "3518:   sessionAppendStr(&buf, \" WHERE \", &rc);",
          "",
          "[Removed Lines]",
          "3516:   sessionAppendStr(&buf, \"DELETE FROM \", &rc);",
          "",
          "[Added Lines]",
          "3516:   sessionAppendStr(&buf, \"DELETE FROM main.\", &rc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3596:   SessionBuffer buf = {0, 0, 0};",
          "3600:   sessionAppendIdent(&buf, zTab, &rc);",
          "3601:   sessionAppendStr(&buf, \" SET \", &rc);",
          "",
          "[Removed Lines]",
          "3599:   sessionAppendStr(&buf, \"UPDATE \", &rc);",
          "",
          "[Added Lines]",
          "3599:   sessionAppendStr(&buf, \"UPDATE main.\", &rc);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 951b39ca74c9bd933139e099d5555283278db475f410f202c162e5d1e6aef933",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67306cb3b4fa9019bf812d46f538044f5d354c14",
      "candidate_info": {
        "commit_hash": "67306cb3b4fa9019bf812d46f538044f5d354c14",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/67306cb3b4fa9019bf812d46f538044f5d354c14",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "The IN-early-out optimization does not work for virtual tables.  Do not try to use it there.  Fix for ticket [2d5a3163563d559f].  Test cases in TH3.\n\nFossilOrigin-Name: dbec6910d9648f4907373c818a5cb347a2e487784208751ccecfacca752ff99d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a43430fd23f88352c33b29c4c105b72f6dc821f94bf362040c41a1648c402e5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:           pIn++;",
          "609:         }",
          "610:       }",
          "612:         sqlite3VdbeAddOp3(v, OP_SeekHit, pLevel->iIdxCur, 0, iEq);",
          "613:       }",
          "614:     }else{",
          "",
          "[Removed Lines]",
          "611:       if( iEq>0 && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0 ){",
          "",
          "[Added Lines]",
          "611: printf(\"iEq=%d wsFlags=0x%08x\\n\", iEq, pLoop->wsFlags); fflush(stdout);",
          "612:       testcase( iEq>0",
          "613:                 && (pLoop->wsFlags & WHERE_IN_SEEKSCAN)==0",
          "614:                 && (pLoop->wsFlags & WHERE_VIRTUALTABLE)!=0 );",
          "615:       if( iEq>0",
          "616:        && (pLoop->wsFlags & (WHERE_IN_SEEKSCAN|WHERE_VIRTUALTABLE))==0",
          "617:       ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c99dbb18bdd46548c61cee1114bb011bdb4bbfb",
      "candidate_info": {
        "commit_hash": "3c99dbb18bdd46548c61cee1114bb011bdb4bbfb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c99dbb18bdd46548c61cee1114bb011bdb4bbfb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c",
          "tool/speed-check.sh"
        ],
        "message": "Add --verify to speed-check.sh and add --memdb and --output to speedtest1.c. Other improvements to speedtest1.c.\n\nFossilOrigin-Name: 89a11120ab2ce13f8a539cb05a9d0628a1f83b4790910b2023c21d60aabc43ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c",
          "tool/speed-check.sh||tool/speed-check.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 60d1e46c8c8a3c853034fd79f204bcb5d50d1c366eb246849c333a2d0abc2648",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   \"Usage: %s [--options] DATABASE\\n\"",
          "8:   \"Options:\\n\"",
          "9:   \"  --autovacuum        Enable AUTOVACUUM mode\\n\"",
          "11:   \"  --exclusive         Enable locking_mode=EXCLUSIVE\\n\"",
          "12:   \"  --explain           Like --sqlonly but with added EXPLAIN keywords\\n\"",
          "13:   \"  --heap SZ MIN       Memory allocator uses SZ bytes & min allocation MIN\\n\"",
          "",
          "[Removed Lines]",
          "10:   \"  --cachesize N       Set the cache size to N\\n\"",
          "",
          "[Added Lines]",
          "10:   \"  --cachesize N       Set the cache size to N\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:   \"  --journal M         Set the journal_mode to M\\n\"",
          "16:   \"  --key KEY           Set the encryption key to KEY\\n\"",
          "17:   \"  --lookaside N SZ    Configure lookaside for N slots of SZ bytes each\\n\"",
          "18:   \"  --mmap SZ           MMAP the first SZ bytes of the database file\\n\"",
          "19:   \"  --multithread       Set multithreaded mode\\n\"",
          "20:   \"  --nomemstat         Disable memory statistics\\n\"",
          "21:   \"  --nosync            Set PRAGMA synchronous=OFF\\n\"",
          "22:   \"  --notnull           Add NOT NULL constraints to table columns\\n\"",
          "23:   \"  --pagesize N        Set the page size to N\\n\"",
          "24:   \"  --pcache N SZ       Configure N pages of pagecache each of size SZ bytes\\n\"",
          "25:   \"  --primarykey        Use PRIMARY KEY instead of UNIQUE where appropriate\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   \"  --memdb             Use an in-memory database\\n\"",
          "24:   \"  --output FILE       Store SQL output in FILE\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: typedef sqlite3_uint64 u64;",
          "",
          "[Removed Lines]",
          "65: #ifndef SPEEDTEST_OMIT_HASH",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79: };",
          "145: static struct Global {",
          "",
          "[Removed Lines]",
          "86: static void HashInit(HashContext *p){",
          "87:   unsigned int k;",
          "88:   p->i = 0;",
          "89:   p->j = 0;",
          "90:   for(k=0; k<256; k++) p->s[k] = k;",
          "91: }",
          "97: static void HashUpdate(",
          "98:   HashContext *p,",
          "99:   const unsigned char *aData,",
          "100:   unsigned int nData",
          "101: ){",
          "102:   unsigned char t;",
          "103:   unsigned char i = p->i;",
          "104:   unsigned char j = p->j;",
          "105:   unsigned int k;",
          "106:   for(k=0; k<nData; k++){",
          "107:     j += p->s[i] + aData[k];",
          "108:     t = p->s[j];",
          "109:     p->s[j] = p->s[i];",
          "110:     p->s[i] = t;",
          "111:     i++;",
          "112:   }",
          "113:   p->i = i;",
          "114:   p->j = j;",
          "115: }",
          "122: static unsigned char *HashFinal(HashContext *p){",
          "123:   unsigned int k;",
          "124:   unsigned char t, i, j;",
          "125:   i = p->i;",
          "126:   j = p->j;",
          "127:   for(k=0; k<32; k++){",
          "128:     i++;",
          "129:     t = p->s[i];",
          "130:     j += t;",
          "131:     p->s[i] = p->s[j];",
          "132:     p->s[j] = t;",
          "133:     t += p->s[i];",
          "134:     p->r[k] = p->s[t];",
          "135:   }",
          "136:   return p->r;",
          "137: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "186:   exit(1);",
          "187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #ifndef SPEEDTEST_OMIT_HASH",
          "133: static void HashInit(void){",
          "134:   unsigned int k;",
          "135:   g.hash.i = 0;",
          "136:   g.hash.j = 0;",
          "137:   for(k=0; k<256; k++) g.hash.s[k] = k;",
          "138: }",
          "144: static void HashUpdate(",
          "145:   const unsigned char *aData,",
          "146:   unsigned int nData",
          "147: ){",
          "148:   unsigned char t;",
          "149:   unsigned char i = g.hash.i;",
          "150:   unsigned char j = g.hash.j;",
          "151:   unsigned int k;",
          "152:   if( g.hashFile ) fwrite(aData, 1, nData, g.hashFile);",
          "153:   for(k=0; k<nData; k++){",
          "154:     j += g.hash.s[i] + aData[k];",
          "155:     t = g.hash.s[j];",
          "156:     g.hash.s[j] = g.hash.s[i];",
          "157:     g.hash.s[i] = t;",
          "158:     i++;",
          "159:   }",
          "160:   g.hash.i = i;",
          "161:   g.hash.j = j;",
          "162: }",
          "168: static void HashFinal(void){",
          "169:   unsigned int k;",
          "170:   unsigned char t, i, j;",
          "171:   i = g.hash.i;",
          "172:   j = g.hash.j;",
          "173:   for(k=0; k<32; k++){",
          "174:     i++;",
          "175:     t = g.hash.s[i];",
          "176:     j += t;",
          "177:     g.hash.s[i] = g.hash.s[j];",
          "178:     g.hash.s[j] = t;",
          "179:     t += g.hash.s[i];",
          "180:     g.hash.r[k] = g.hash.s[t];",
          "181:   }",
          "182: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "413:   if( g.bVerify ){",
          "414: #ifndef SPEEDTEST_OMIT_HASH",
          "415:     int i;",
          "417: #endif",
          "420: #ifndef SPEEDTEST_OMIT_HASH",
          "424:     }",
          "426: #endif",
          "427:   }",
          "428: }",
          "",
          "[Removed Lines]",
          "416:     unsigned char *aHash = HashFinal(&g.hash);",
          "418:     printf(\"SQL Output Verification:\\n\");",
          "419:     printf(\"  size: %llu\\n\", g.nResByte);",
          "421:     printf(\"  hash: \");",
          "422:     for(i=0; i<32; i++){",
          "423:       printf(\"%02x\", aHash[i]);",
          "425:     printf(\"\\n\");",
          "",
          "[Added Lines]",
          "416:     printf(\"Verification Hash: %llu \", g.nResByte);",
          "418:     HashUpdate((const unsigned char*)\"\\n\", 1);",
          "419:     HashFinal();",
          "420:     for(i=0; i<24; i++){",
          "421:       printf(\"%02x\", g.hash.r[i]);",
          "423:     if( g.hashFile && g.hashFile!=stdout ) fclose(g.hashFile);",
          "425:     printf(\"\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "537:       len = (int)strlen(z);",
          "538: #ifndef SPEEDTEST_OMIT_HASH",
          "539:       if( g.bVerify ){",
          "542:       }",
          "543: #endif",
          "544:       if( g.nResult+len<sizeof(g.zResult)-2 ){",
          "",
          "[Removed Lines]",
          "540:         HashUpdate(&g.hash, (unsigned char*)z, len);",
          "541:         g.nResByte += len;",
          "",
          "[Added Lines]",
          "539:         int eType = sqlite3_column_type(g.pStmt, i);",
          "540:         unsigned char zPrefix[2];",
          "541:         zPrefix[0] = '\\n';",
          "542:         zPrefix[1] = \"-IFTBN\"[eType];",
          "543:         if( g.nResByte ){",
          "544:           HashUpdate(zPrefix, 2);",
          "545:         }else{",
          "546:           HashUpdate(zPrefix+1, 1);",
          "547:         }",
          "548:         if( eType==SQLITE_BLOB ){",
          "549:           int nBlob = sqlite3_column_bytes(g.pStmt, i);",
          "550:           const unsigned char *aBlob = sqlite3_column_blob(g.pStmt, i);",
          "551:           HashUpdate(aBlob, nBlob);",
          "552:           g.nResByte += nBlob + 2;",
          "553:         }else{",
          "554:           HashUpdate((unsigned char*)z, len);",
          "555:           g.nResByte += len + 2;",
          "556:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2141:          sqlite3_libversion(), sqlite3_sourceid());",
          "",
          "[Removed Lines]",
          "2140:   printf(\"-- Speedtest1 for SQLite %s %.50s\\n\",",
          "",
          "[Added Lines]",
          "2156:   printf(\"-- Speedtest1 for SQLite %s %.48s\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2179:         nLook = integerValue(argv[i+1]);",
          "2180:         szLook = integerValue(argv[i+2]);",
          "2181:         i += 2;",
          "2182: #if SQLITE_VERSION_NUMBER>=3006000",
          "2183:       }else if( strcmp(z,\"multithread\")==0 ){",
          "2184:         sqlite3_config(SQLITE_CONFIG_MULTITHREAD);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2198:       }else if( strcmp(z,\"memdb\")==0 ){",
          "2199:         memDb = 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2194:         noSync = 1;",
          "2195:       }else if( strcmp(z,\"notnull\")==0 ){",
          "2196:         g.zNN = \"NOT NULL\";",
          "2197:       }else if( strcmp(z,\"pagesize\")==0 ){",
          "2198:         if( i>=argc-1 ) fatal_error(\"missing argument on %s\\n\", argv[i]);",
          "2199:         pageSize = integerValue(argv[++i]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2215:       }else if( strcmp(z,\"output\")==0 ){",
          "2216: #ifdef SPEEDTEST_OMIT_HASH",
          "2217:         fatal_error(\"The --output option is not supported with\"",
          "2218:                     \" -DSPEEDTEST_OMIT_HASH\\n\");",
          "2219: #else",
          "2220:         if( i>=argc-1 ) fatal_error(\"missing argument on %s\\n\", argv[i]);",
          "2221:         i++;",
          "2222:         if( strcmp(argv[i],\"-\")==0 ){",
          "2223:           g.hashFile = stdout;",
          "2224:         }else{",
          "2225:           g.hashFile = fopen(argv[i], \"wb\");",
          "2226:           if( g.hashFile==0 ){",
          "2227:             fatal_error(\"cannot open \\\"%s\\\" for writing\\n\", argv[i]);",
          "2228:           }",
          "2229:         }",
          "2230: #endif",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2248:       }else if( strcmp(z,\"verify\")==0 ){",
          "2249:         g.bVerify = 1;",
          "2250: #ifndef SPEEDTEST_OMIT_HASH",
          "2252: #endif",
          "2253:       }else if( strcmp(z,\"without-rowid\")==0 ){",
          "2254:         g.zWR = \"WITHOUT ROWID\";",
          "",
          "[Removed Lines]",
          "2251:         HashInit(&g.hash);",
          "",
          "[Added Lines]",
          "2285:         HashInit();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2291:   sqlite3_initialize();",
          "2295:     fatal_error(\"Cannot open database file: %s\\n\", zDbName);",
          "2296:   }",
          "2297: #if SQLITE_VERSION_NUMBER>=3006001",
          "2298:   if( nLook>0 && szLook>0 ){",
          "2299:     pLook = malloc( nLook*szLook );",
          "2301:     if( rc ) fatal_error(\"lookaside configuration failed: %d\\n\", rc);",
          "2302:   }",
          "2303: #endif",
          "",
          "[Removed Lines]",
          "2294:   if( sqlite3_open(zDbName, &g.db) ){",
          "2300:     rc = sqlite3_db_config(g.db, SQLITE_DBCONFIG_LOOKASIDE, pLook, szLook,nLook);",
          "",
          "[Added Lines]",
          "2328:   if( sqlite3_open(memDb ? \":memory:\" : zDbName, &g.db) ){",
          "2334:     rc = sqlite3_db_config(g.db, SQLITE_DBCONFIG_LOOKASIDE,pLook,szLook,nLook);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2307: #ifndef SQLITE_OMIT_DEPRECATED",
          "2308:   if( doTrace ) sqlite3_trace(g.db, traceCallback, 0);",
          "2309: #endif",
          "2310:   if( mmapSize>0 ){",
          "2311:     speedtest1_exec(\"PRAGMA mmap_size=%d\", mmapSize);",
          "2312:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2344:   if( memDb>0 ){",
          "2345:     speedtest1_exec(\"PRAGMA temp_store=memory\");",
          "2346:   }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2346:     }else{",
          "2347:       zTSet = \"\";",
          "2348:     }",
          "2349:     if( strcmp(zThisTest,\"main\")==0 ){",
          "2350:       testset_main();",
          "2351:     }else if( strcmp(zThisTest,\"debug1\")==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2386:     if( g.iTotal>0 || zComma!=0 ){",
          "2387:       printf(\"       Begin testset \\\"%s\\\"\\n\", zThisTest);",
          "2388:     }",
          "",
          "---------------"
        ],
        "tool/speed-check.sh||tool/speed-check.sh": [
          "File: tool/speed-check.sh -> tool/speed-check.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         ;;",
          "80:     --legacy)",
          "81:  doWal=0",
          "82:         ;;",
          "83:     --wal)",
          "84:         doWal=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         CC_OPTS=\"$CC_OPTS -DSPEEDTEST_OMIT_HASH\"",
          "83:         ;;",
          "84:     --verify)",
          "85:         SPEEDTEST_OPTS=\"$SPEEDTEST_OPTS --verify\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}