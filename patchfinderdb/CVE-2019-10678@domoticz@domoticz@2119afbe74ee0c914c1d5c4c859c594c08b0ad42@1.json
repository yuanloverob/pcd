{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42ff507e4e07dbefadbd76bd0e2f12dd801f9a27",
      "candidate_info": {
        "commit_hash": "42ff507e4e07dbefadbd76bd0e2f12dd801f9a27",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/42ff507e4e07dbefadbd76bd0e2f12dd801f9a27",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Alecto WS5500 corrected (pTypeWeather)",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2745:      WriteMessage(\"Undec             off\");",
          "2747:     if (pResponse->IRESPONSE868.ALECTOenabled)",
          "2752:     if (pResponse->IRESPONSE868.DAVISEUenabled)",
          "2753:      WriteMessage(\"Davis EU          enabled\");",
          "2757:     if (pResponse->IRESPONSE868.DAVISUSenabled)",
          "2758:      WriteMessage(\"Davis US          enabled\");",
          "2762:     if (pResponse->IRESPONSE868.DAVISAUenabled)",
          "2763:      WriteMessage(\"Davis AU          enabled\");",
          "2772:     if (pResponse->IRESPONSE868.FS20enabled)",
          "2773:      WriteMessage(\"FS20              enabled\");",
          "2777:     if (pResponse->IRESPONSE868.EDISIOenabled)",
          "2778:      WriteMessage(\"Edisio            enabled\");",
          "2782:     if (pResponse->IRESPONSE868.VISONICenabled)",
          "2783:      WriteMessage(\"Visonic           enabled\");",
          "2787:     if (pResponse->IRESPONSE868.KEELOQenabled)",
          "2788:      WriteMessage(\"Keeloq            enabled\");",
          "2791:    }",
          "2792:   }",
          "2793:   break;",
          "",
          "[Removed Lines]",
          "2748:      WriteMessage(\"Alecto            enabled\");",
          "2749:     else",
          "2750:      WriteMessage(\"Alecto            disabled\");",
          "2754:     else",
          "2755:      WriteMessage(\"Davis EU          disabled\");",
          "2759:     else",
          "2760:      WriteMessage(\"Davis US          disabled\");",
          "2764:     else",
          "2765:      WriteMessage(\"Davis AU          disabled\");",
          "2767:     if (pResponse->IRESPONSE868.PROGUARDenabled)",
          "2768:      WriteMessage(\"Proguard          enabled\");",
          "2769:     else",
          "2770:      WriteMessage(\"Proguard          disabled\");",
          "2774:     else",
          "2775:      WriteMessage(\"FS20              disabled\");",
          "2779:     else",
          "2780:      WriteMessage(\"Edisio            disabled\");",
          "2784:     else",
          "2785:      WriteMessage(\"Visonic           disabled\");",
          "2789:     else",
          "2790:      WriteMessage(\"Keeloq            disabled\");",
          "",
          "[Added Lines]",
          "2748:      WriteMessage(\"Alecto ACH2010    enabled\");",
          "2750:     if (pResponse->IRESPONSE868.ALECTO5500enabled)",
          "2751:      WriteMessage(\"Alecto WS5500     enabled\");",
          "2753:     if (pResponse->IRESPONSE868.LACROSSEenabled)",
          "2754:      WriteMessage(\"LA Crosse         enabled\");",
          "2768:     if (pResponse->IRESPONSE868.LWRFenabled)",
          "2769:      WriteMessage(\"LightwaveRF       enabled\");",
          "2777:     if (pResponse->IRESPONSE868.MEIANTECHenabled)",
          "2778:      WriteMessage(\"Meiantech         enabled\");",
          "2783:     if (pResponse->IRESPONSE868.PROGUARDenabled)",
          "2784:      WriteMessage(\"Proguard          enabled\");",
          "2786:     if (pResponse->IRESPONSE868.ITHOenabled)",
          "2787:      WriteMessage(\"Itho CVE RFT      enabled\");",
          "2789:     if (pResponse->IRESPONSE868.ITHOecoenabled)",
          "2790:      WriteMessage(\"Itho CVE ECO RFT  enabled\");",
          "2792:     if (pResponse->IRESPONSE868.HONEYWELLenabled)",
          "2793:      WriteMessage(\"Honeywell Chime   enabled\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10872:  unsigned char SignalLevel = pResponse->WEATHER.rssi;",
          "10873:  unsigned char BatteryLevel = get_BateryLevel(HwdType, false, pResponse->WEATHER.battery_level & 0x0F);",
          "10963:  CDomoticzHardwareBase* pHardware = GetHardware(HwdID);",
          "10964:  if (pHardware)",
          "10965:  {",
          "10966:   CRFXBase *pRFXDevice = reinterpret_cast<CRFXBase *>(pHardware);",
          "10968:   if (subType = sTypeWEATHER2)",
          "10969:   {",
          "10970:    int Humidity = (int)pResponse->WEATHER.humidity;",
          "",
          "[Removed Lines]",
          "10875:  double dDirection;",
          "10876:  dDirection = (double)(pResponse->WEATHER.directionhigh * 256) + pResponse->WEATHER.directionlow;",
          "10877:  dDirection = m_wind_calculator[windID].AddValueAndReturnAvarage(dDirection);",
          "10879:  std::string strDirection;",
          "10880:  if (dDirection > 348.75 || dDirection < 11.26)",
          "10881:   strDirection = \"N\";",
          "10882:  else if (dDirection < 33.76)",
          "10883:   strDirection = \"NNE\";",
          "10884:  else if (dDirection < 56.26)",
          "10885:   strDirection = \"NE\";",
          "10886:  else if (dDirection < 78.76)",
          "10887:   strDirection = \"ENE\";",
          "10888:  else if (dDirection < 101.26)",
          "10889:   strDirection = \"E\";",
          "10890:  else if (dDirection < 123.76)",
          "10891:   strDirection = \"ESE\";",
          "10892:  else if (dDirection < 146.26)",
          "10893:   strDirection = \"SE\";",
          "10894:  else if (dDirection < 168.76)",
          "10895:   strDirection = \"SSE\";",
          "10896:  else if (dDirection < 191.26)",
          "10897:   strDirection = \"S\";",
          "10898:  else if (dDirection < 213.76)",
          "10899:   strDirection = \"SSW\";",
          "10900:  else if (dDirection < 236.26)",
          "10901:   strDirection = \"SW\";",
          "10902:  else if (dDirection < 258.76)",
          "10903:   strDirection = \"WSW\";",
          "10904:  else if (dDirection < 281.26)",
          "10905:   strDirection = \"W\";",
          "10906:  else if (dDirection < 303.76)",
          "10907:   strDirection = \"WNW\";",
          "10908:  else if (dDirection < 326.26)",
          "10909:   strDirection = \"NW\";",
          "10910:  else if (dDirection < 348.76)",
          "10911:   strDirection = \"NNW\";",
          "10912:  else",
          "10913:   strDirection = \"---\";",
          "10915:  dDirection = round(dDirection);",
          "10917:  int intSpeed = (pResponse->WEATHER.av_speedhigh * 256) + pResponse->WEATHER.av_speedlow;",
          "10918:  int intGust = (pResponse->WEATHER.gusthigh * 256) + pResponse->WEATHER.gustlow;",
          "10920:  m_wind_calculator[windID].SetSpeedGust(intSpeed, intGust);",
          "10922:  float temp = 0, chill = 0;",
          "10923:  if (!pResponse->WEATHER.temperaturesign)",
          "10924:  {",
          "10925:   temp = float((pResponse->WEATHER.temperaturehigh * 256) + pResponse->WEATHER.temperaturelow) / 10.0f;",
          "10926:  }",
          "10927:  else",
          "10928:  {",
          "10929:   temp = -(float(((pResponse->WEATHER.temperaturehigh & 0x7F) * 256) + pResponse->WEATHER.temperaturelow) / 10.0f);",
          "10930:  }",
          "10931:  if ((temp < -200) || (temp > 380))",
          "10932:  {",
          "10933:   WriteMessage(\" Invalid Temperature\");",
          "10934:   return;",
          "10935:  }",
          "10937:  float AddjValue = 0.0f;",
          "10938:  float AddjMulti = 1.0f;",
          "10939:  m_sql.GetAddjustment(HwdID, ID.c_str(), Unit, devType, subType, AddjValue, AddjMulti);",
          "10940:  temp += AddjValue;",
          "10942:  if (!pResponse->WEATHER.chillsign)",
          "10943:  {",
          "10944:   chill = float((pResponse->WEATHER.chillhigh * 256) + pResponse->WEATHER.chilllow) / 10.0f;",
          "10945:  }",
          "10946:  else",
          "10947:  {",
          "10948:   chill = -(float(((pResponse->WEATHER.chillhigh) & 0x7F) * 256 + pResponse->WEATHER.chilllow) / 10.0f);",
          "10949:  }",
          "10950:  chill += AddjValue;",
          "10952:  sprintf(szTmp, \"%.2f;%s;%d;%d;%.1f;%.1f\", dDirection, strDirection.c_str(), intSpeed, intGust, temp, chill);",
          "10953:  uint64_t DevRowIdx = m_sql.UpdateValue(HwdID, ID.c_str(), Unit, devType, subType, SignalLevel, BatteryLevel, cmnd, szTmp, procResult.DeviceName);",
          "10954:  if (DevRowIdx == -1)",
          "10955:   return;",
          "10956:  procResult.DeviceRowIdx = DevRowIdx;",
          "10958:  m_notifications.CheckAndHandleNotification(DevRowIdx, HwdID, ID, procResult.DeviceName, Unit, devType, subType, cmnd, szTmp);",
          "10960:  uint64_t tID = ((uint64_t)(HwdID & 0x7FFFFFFF) << 32) | (DevRowIdx & 0x7FFFFFFF);",
          "10961:  m_trend_calculator[tID].AddValueAndReturnTendency(static_cast<double>(chill), _tTrendCalculator::TAVERAGE_TEMP);",
          "",
          "[Added Lines]",
          "10877:  procResult.DeviceRowIdx = -1;",
          "10885:   int intDirection = (pResponse->WEATHER.directionhigh * 256) + pResponse->WEATHER.directionlow;",
          "10886:   int intSpeed = (pResponse->WEATHER.av_speedhigh * 256) + pResponse->WEATHER.av_speedlow;",
          "10887:   int intGust = (pResponse->WEATHER.gusthigh * 256) + pResponse->WEATHER.gustlow;",
          "10889:   float temp = 0, chill = 0;",
          "10890:   if (!pResponse->WEATHER.temperaturesign)",
          "10891:   {",
          "10892:    temp = float((pResponse->WEATHER.temperaturehigh * 256) + pResponse->WEATHER.temperaturelow) / 10.0f;",
          "10893:   }",
          "10894:   else",
          "10895:   {",
          "10896:    temp = -(float(((pResponse->WEATHER.temperaturehigh & 0x7F) * 256) + pResponse->WEATHER.temperaturelow) / 10.0f);",
          "10897:   }",
          "10898:   if ((temp < -200) || (temp > 380))",
          "10899:   {",
          "10900:    WriteMessage(\" Invalid Temperature\");",
          "10901:    return;",
          "10902:   }",
          "10903:   if (!pResponse->WEATHER.chillsign)",
          "10904:   {",
          "10905:    chill = float((pResponse->WEATHER.chillhigh * 256) + pResponse->WEATHER.chilllow) / 10.0f;",
          "10906:   }",
          "10907:   else",
          "10908:   {",
          "10909:    chill = -(float(((pResponse->WEATHER.chillhigh) & 0x7F) * 256 + pResponse->WEATHER.chilllow) / 10.0f);",
          "10910:   }",
          "10911:   pRFXDevice->SendWind(windID, BatteryLevel, intDirection, (float)intSpeed, (float)intGust, temp, chill, true, true, procResult.DeviceName, SignalLevel);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "11002:   if (subType = sTypeWEATHER2)",
          "11003:   {",
          "11004:    float radiation = (float)((pResponse->WEATHER.solarhigh * 256) + pResponse->WEATHER.solarlow);",
          "11010:   }",
          "11011:  }",
          "11012: }",
          "",
          "[Removed Lines]",
          "11005:    _tGeneralDevice gdevice;",
          "11006:    gdevice.subtype = sTypeSolarRadiation;",
          "11007:    gdevice.intval1 = windID;",
          "11008:    gdevice.floatval1 = radiation;",
          "11009:    decode_General(HwdID, HwdType, pResponse, procResult, SignalLevel, BatteryLevel);",
          "",
          "[Added Lines]",
          "10950:    pRFXDevice->SendSolarRadiationSensor(windID, BatteryLevel, radiation, procResult.DeviceName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e8ea729cbbd1bd697929ec417b57639d08c4413",
      "candidate_info": {
        "commit_hash": "9e8ea729cbbd1bd697929ec417b57639d08c4413",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9e8ea729cbbd1bd697929ec417b57639d08c4413",
        "files": [
          "main/SQLHelper.cpp"
        ],
        "message": "correcting indent issue",
        "before_after_code_files": [
          "main/SQLHelper.cpp||main/SQLHelper.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.cpp||main/SQLHelper.cpp": [
          "File: main/SQLHelper.cpp -> main/SQLHelper.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2350:       szQuery2 << \"SELECT Value1, Value2, Value3, Date FROM MultiMeter_Calendar WHERE ([DeviceRowID]=\" << sd[0] << \")\";",
          "2351:       result3 = query(szQuery2.str());",
          "2354:       {",
          "2355:        std::vector<std::string> sd3 = itt3;",
          "2356:        szQuery2.clear();",
          "",
          "[Removed Lines]",
          "2353:       for (const auto & itt3 :result3)",
          "",
          "[Added Lines]",
          "2353:       for (const auto & itt3 : result3)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2557:      if (EnergyMeterMode == \"1\")",
          "2558:      {",
          "2559:       uint64_t ullidx = std::strtoull(idx.c_str(), nullptr, 10);",
          "2561:      }",
          "2562:     }",
          "2563:    }",
          "",
          "[Removed Lines]",
          "2560:       m_sql.SetDeviceOptions(ullidx, m_sql.BuildDeviceOptions(\"EnergyMeterMode:\"+EnergyMeterMode, false));",
          "",
          "[Added Lines]",
          "2560:       m_sql.SetDeviceOptions(ullidx, m_sql.BuildDeviceOptions(\"EnergyMeterMode:\" + EnergyMeterMode, false));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2607:    query(sqlCreateHardware);",
          "2608:    query(\"INSERT INTO Hardware(ID, Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout) SELECT ID, Name, Enabled, Type, Address, Port, SerialPort, Username, Password, Extra, Mode1, Mode2, Mode3, Mode4, Mode5, Mode6, DataTimeout FROM tmp_Hardware;\");",
          "2609:    query(\"DROP TABLE tmp_Hardware;\");",
          "2611:  }",
          "2612:  else if (bNewInstall)",
          "2613:  {",
          "",
          "[Removed Lines]",
          "2610:     }",
          "",
          "[Added Lines]",
          "2610:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3620: uint64_t CSQLHelper::CreateDevice(const int HardwareID, const int SensorType, const int SensorSubType, std::string &devname, const unsigned long nid, const std::string &soptions)",
          "3621: {",
          "3623:  char ID[20];",
          "3624:  sprintf(ID, \"%lu\", nid);",
          "",
          "[Removed Lines]",
          "3622:  uint64_t DeviceRowIdx = (uint64_t )-1;",
          "",
          "[Added Lines]",
          "3622:  uint64_t DeviceRowIdx = (uint64_t)-1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f666c117e4b1941d1e7282c6a1f58cb941cbde7",
      "candidate_info": {
        "commit_hash": "5f666c117e4b1941d1e7282c6a1f58cb941cbde7",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/5f666c117e4b1941d1e7282c6a1f58cb941cbde7",
        "files": [
          "www/app/events/blockly_xml_parser.js"
        ],
        "message": "Now supporting partly disabling blockly blocks (fixes #2920)",
        "before_after_code_files": [
          "www/app/events/blockly_xml_parser.js||www/app/events/blockly_xml_parser.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/events/blockly_xml_parser.js||www/app/events/blockly_xml_parser.js": [
          "File: www/app/events/blockly_xml_parser.js -> www/app/events/blockly_xml_parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:             throw new Error('Please start with a control block');",
          "16:         }",
          "18:         var elseIfCount = 0;",
          "19:         if (firstBlockType == 'domoticzcontrols_ifelseif') {",
          "20:             var elseIfString = $(xml).find('mutation:first').attr('elseif');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:         var json = {",
          "19:             eventlogic: []",
          "20:         };",
          "22:   if ($(xml).find('block').first().attr('disabled') !== undefined) {",
          "23:    alert($(xml).find('block').first().attr('disabled'));",
          "24:    alert(\"disabled!!\");",
          "25:    return json;",
          "26:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:         }",
          "23:         elseIfCount++;",
          "29:         for (var i = 0; i < elseIfCount; i++) {",
          "30:             var conditionActionPair = parseXmlBlocks(xml, i);",
          "31:             var oneevent = {};",
          "32:             oneevent.conditions = conditionActionPair[0].toString();",
          "33:             oneevent.actions = conditionActionPair[1].toString();",
          "35:         }",
          "37:         return json;",
          "",
          "[Removed Lines]",
          "25:         var json = {",
          "26:             eventlogic: []",
          "27:         };",
          "34:             json.eventlogic.push(oneevent);",
          "",
          "[Added Lines]",
          "42:             if (oneevent.actions.length>0) {",
          "43:     json.eventlogic.push(oneevent);",
          "44:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:         var setArray = [];",
          "215:         var doBlock = $($(xml).find('statement[name=\\'DO' + pairId + '\\']')[0]);",
          "216:         $(doBlock).find('block').each(function () {",
          "217:             if ($(this).attr('type') == 'logic_set') {",
          "218:                 var valueA = $(this).find('value[name=\\'A\\']')[0];",
          "219:                 var fieldA = $(valueA).find('field')[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:    if (typeof $(this).attr('disabled') != 'undefined') {",
          "227:     return;",
          "228:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90c9599839669e46513c8ea5ddb70c13431894ca",
      "candidate_info": {
        "commit_hash": "90c9599839669e46513c8ea5ddb70c13431894ca",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/90c9599839669e46513c8ea5ddb70c13431894ca",
        "files": [
          "hardware/P1MeterBase.cpp"
        ],
        "message": "Corrected ID for P1 Current sensor",
        "before_after_code_files": [
          "hardware/P1MeterBase.cpp||hardware/P1MeterBase.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/P1MeterBase.cpp||hardware/P1MeterBase.cpp": [
          "File: hardware/P1MeterBase.cpp -> hardware/P1MeterBase.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:       SendVoltageSensor(0, 3, 255, m_voltagel3, \"Voltage L3\");",
          "256:     }",
          "257:     if (m_amperagel1 || m_amperagel2 || m_amperagel3 ) {",
          "259:     }",
          "260:     if ((m_gas.gasusage > 0) && ((m_gas.gasusage != m_lastgasusage) || (difftime(atime, m_lastSharedSendGas) >= 300)))",
          "261:     {",
          "",
          "[Removed Lines]",
          "258:      SendCurrentSensor(0, 255, m_amperagel1, m_amperagel2, m_amperagel3, \"Amperage\" );",
          "",
          "[Added Lines]",
          "258:      SendCurrentSensor(1, 255, m_amperagel1, m_amperagel2, m_amperagel3, \"Amperage\" );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5be3f09cfe1e900d9c5da19dba916482c97a2186",
      "candidate_info": {
        "commit_hash": "5be3f09cfe1e900d9c5da19dba916482c97a2186",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/5be3f09cfe1e900d9c5da19dba916482c97a2186",
        "files": [
          "www/app/log/DeviceLog.js"
        ],
        "message": "Fix for #2612",
        "before_after_code_files": [
          "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/log/DeviceLog.js||www/app/log/DeviceLog.js": [
          "File: www/app/log/DeviceLog.js -> www/app/log/DeviceLog.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:             if (!vm.device) {",
          "49:                 return undefined;",
          "50:             }",
          "53:         }",
          "55:         function isGraphLog() {",
          "",
          "[Removed Lines]",
          "52:             return ['Temp', 'Thermostat', 'Humidity', 'Radiator 1'].includes(vm.device.Type)",
          "",
          "[Added Lines]",
          "52:             return (/Temp|Thermostat|Humidity|Radiator/i).test(vm.device.Type)",
          "",
          "---------------"
        ]
      }
    }
  ]
}