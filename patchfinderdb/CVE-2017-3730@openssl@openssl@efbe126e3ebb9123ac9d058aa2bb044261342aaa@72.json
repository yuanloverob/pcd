{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea6e2d543653196cb6d095f72b35073404c8ae33",
      "candidate_info": {
        "commit_hash": "ea6e2d543653196cb6d095f72b35073404c8ae33",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ea6e2d543653196cb6d095f72b35073404c8ae33",
        "files": [
          "ssl/record/rec_layer_s3.c"
        ],
        "message": "Revert \"Abort on unrecognised warning alerts\"\n\nThis reverts commit 77a6be4dfc2ecf406c2559a99bea51317ce0f533.\n\nThere were some unexpected side effects to this commit, e.g. in SSLv3 a\nwarning alert gets sent \"no_certificate\" if a client does not send a\nCertificate during Client Auth. With the above commit this causes the\nconnection to abort, which is incorrect. There may be some other edge cases\nlike this so we need to have a rethink on this.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1351:                 goto f_err;",
          "1352:             }",
          "1353: #ifdef SSL_AD_MISSING_SRP_USERNAME",
          "1357: #endif",
          "1363:         } else if (alert_level == SSL3_AL_FATAL) {",
          "1364:             char tmp[16];",
          "",
          "[Removed Lines]",
          "1354:             else if (alert_descr == SSL_AD_MISSING_SRP_USERNAME) {",
          "1355:                 return 0;",
          "1356:             }",
          "1358:             else {",
          "1359:                 al = SSL_AD_HANDSHAKE_FAILURE;",
          "1360:                 SSLerr(SSL_F_SSL3_READ_BYTES, SSL_R_UNKNOWN_ALERT_TYPE);",
          "1361:                 goto f_err;",
          "1362:             }",
          "",
          "[Added Lines]",
          "1354:             else if (alert_descr == SSL_AD_MISSING_SRP_USERNAME)",
          "1355:                 return (0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2cefab06a9e1b8d9a21d030754f62dfbb199950",
      "candidate_info": {
        "commit_hash": "e2cefab06a9e1b8d9a21d030754f62dfbb199950",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e2cefab06a9e1b8d9a21d030754f62dfbb199950",
        "files": [
          "test/bad_dtls_test.c"
        ],
        "message": "Solution proposal for issue #1647.\n\nAvoid a memory alignment issue.\n\nSigned-off-by: Matthias Kraft <Matthias.Kraft@softwareag.com>\nCLA: trivial\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1650)\n\n(cherry picked from commit af5883fec95eb8c79c379b09885440a0d88b2d38)",
        "before_after_code_files": [
          "test/bad_dtls_test.c||test/bad_dtls_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/bad_dtls_test.c||test/bad_dtls_test.c": [
          "File: test/bad_dtls_test.c -> test/bad_dtls_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     BIO *rbio;",
          "452:     BIO *wbio;",
          "453:     BIO *err;",
          "454:     int testresult = 0;",
          "455:     int ret;",
          "456:     int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     time_t now = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:     RAND_bytes(master_secret, sizeof(master_secret));",
          "465:     RAND_bytes(cookie, sizeof(cookie));",
          "466:     RAND_bytes(server_random + 4, sizeof(server_random) - 4);",
          "469:     sess = client_session();",
          "470:     if (sess == NULL) {",
          "",
          "[Removed Lines]",
          "467:     time((void *)server_random);",
          "",
          "[Added Lines]",
          "469:     now = time(NULL);",
          "470:     memcpy(server_random, &now, sizeof(now));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88a3b5322170444d8d4003f6d8af82c3976c570b",
      "candidate_info": {
        "commit_hash": "88a3b5322170444d8d4003f6d8af82c3976c570b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/88a3b5322170444d8d4003f6d8af82c3976c570b",
        "files": [
          "crypto/seed/seed.c"
        ],
        "message": "Use _WIN32 over WIN32 for preprocessor conditional\n\nThe intent seems to be that the WIN32 symbol is for things that are a direct\nbyproduct of being a windows-variant configuration and should be used for\nfeature en/disablement on windows systems.  Use of the _WIN32 symbol is more\nwidespread, being used to implement platform portability of more generic code.\n\nWe do define WIN32 in some situations in e_os.h, but that is not included\nuniversally.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2642)\n(cherry picked from commit ac879ed62a19f3c878f7be3020a1b93cc77f4b38)",
        "before_after_code_files": [
          "crypto/seed/seed.c||crypto/seed/seed.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/seed/seed.c||crypto/seed/seed.c": [
          "File: crypto/seed/seed.c -> crypto/seed/seed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: # include <stdio.h>",
          "38: # include <stdlib.h>",
          "39: # include <string.h>",
          "41: #  include <memory.h>",
          "42: # endif",
          "",
          "[Removed Lines]",
          "40: # ifdef WIN32",
          "",
          "[Added Lines]",
          "40: # ifdef _WIN32",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c5a691d578a4debfd6ecacc030a85900906bf0d",
      "candidate_info": {
        "commit_hash": "9c5a691d578a4debfd6ecacc030a85900906bf0d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9c5a691d578a4debfd6ecacc030a85900906bf0d",
        "files": [
          "test/handshake_helper.c",
          "test/ssl-tests/17-renegotiate.conf",
          "test/ssl-tests/17-renegotiate.conf.in",
          "test/ssl-tests/18-dtls-renegotiate.conf",
          "test/ssl-tests/18-dtls-renegotiate.conf.in",
          "test/ssl_test_ctx.c",
          "test/ssl_test_ctx.h"
        ],
        "message": "Provide a test for the Encrypt-Then-Mac renegotiation crash\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThis commit provides a test for the issue.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "test/handshake_helper.c||test/handshake_helper.c",
          "test/ssl-tests/17-renegotiate.conf||test/ssl-tests/17-renegotiate.conf",
          "test/ssl-tests/17-renegotiate.conf.in||test/ssl-tests/17-renegotiate.conf.in",
          "test/ssl-tests/18-dtls-renegotiate.conf||test/ssl-tests/18-dtls-renegotiate.conf",
          "test/ssl-tests/18-dtls-renegotiate.conf.in||test/ssl-tests/18-dtls-renegotiate.conf.in",
          "test/ssl_test_ctx.c||test/ssl_test_ctx.c",
          "test/ssl_test_ctx.h||test/ssl_test_ctx.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/handshake_helper.c||test/handshake_helper.c": [
          "File: test/handshake_helper.c -> test/handshake_helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "611:                 ret = SSL_renegotiate(peer->ssl);",
          "614:             if (!ret) {",
          "615:                 peer->status = PEER_ERROR;",
          "616:                 return;",
          "",
          "[Removed Lines]",
          "610:             if (SSL_is_server(peer->ssl))",
          "612:             else",
          "613:                 ret = SSL_renegotiate_abbreviated(peer->ssl);",
          "",
          "[Added Lines]",
          "610:             if (SSL_is_server(peer->ssl)) {",
          "612:             } else {",
          "613:                 if (test_ctx->extra.client.reneg_ciphers != NULL) {",
          "614:                     if (!SSL_set_cipher_list(peer->ssl,",
          "615:                                 test_ctx->extra.client.reneg_ciphers)) {",
          "616:                         peer->status = PEER_ERROR;",
          "617:                         return;",
          "618:                     }",
          "619:                     ret = SSL_renegotiate(peer->ssl);",
          "620:                 } else {",
          "621:                     ret = SSL_renegotiate_abbreviated(peer->ssl);",
          "622:                 }",
          "623:             }",
          "",
          "---------------"
        ],
        "test/ssl-tests/17-renegotiate.conf||test/ssl-tests/17-renegotiate.conf": [
          "File: test/ssl-tests/17-renegotiate.conf -> test/ssl-tests/17-renegotiate.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Generated with generate_ssl_tests.pl",
          "5: test-0 = 0-renegotiate-client-no-resume",
          "6: test-1 = 1-renegotiate-client-resume",
          "",
          "[Removed Lines]",
          "3: num_tests = 6",
          "",
          "[Added Lines]",
          "3: num_tests = 10",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: test-3 = 3-renegotiate-server-resume",
          "9: test-4 = 4-renegotiate-client-auth-require",
          "10: test-5 = 5-renegotiate-client-auth-once",
          "11: # ===========================================================",
          "13: [0-renegotiate-client-no-resume]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: test-6 = 6-renegotiate-aead-to-non-aead",
          "12: test-7 = 7-renegotiate-non-aead-to-aead",
          "13: test-8 = 8-renegotiate-non-aead-to-non-aead",
          "14: test-9 = 9-renegotiate-aead-to-aead",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178: ResumptionExpected = No",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: # ===========================================================",
          "187: [6-renegotiate-aead-to-non-aead]",
          "188: ssl_conf = 6-renegotiate-aead-to-non-aead-ssl",
          "190: [6-renegotiate-aead-to-non-aead-ssl]",
          "191: server = 6-renegotiate-aead-to-non-aead-server",
          "192: client = 6-renegotiate-aead-to-non-aead-client",
          "194: [6-renegotiate-aead-to-non-aead-server]",
          "195: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "196: CipherString = DEFAULT",
          "197: MaxProtocol = TLSv1.2",
          "198: Options = NoResumptionOnRenegotiation",
          "199: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "201: [6-renegotiate-aead-to-non-aead-client]",
          "202: CipherString = AES128-GCM-SHA256",
          "203: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "204: VerifyMode = Peer",
          "206: [test-6]",
          "207: ExpectedResult = Success",
          "208: HandshakeMode = RenegotiateClient",
          "209: Method = TLS",
          "210: ResumptionExpected = No",
          "211: client = 6-renegotiate-aead-to-non-aead-client-extra",
          "213: [6-renegotiate-aead-to-non-aead-client-extra]",
          "214: RenegotiateCiphers = AES128-SHA",
          "217: # ===========================================================",
          "219: [7-renegotiate-non-aead-to-aead]",
          "220: ssl_conf = 7-renegotiate-non-aead-to-aead-ssl",
          "222: [7-renegotiate-non-aead-to-aead-ssl]",
          "223: server = 7-renegotiate-non-aead-to-aead-server",
          "224: client = 7-renegotiate-non-aead-to-aead-client",
          "226: [7-renegotiate-non-aead-to-aead-server]",
          "227: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "228: CipherString = DEFAULT",
          "229: MaxProtocol = TLSv1.2",
          "230: Options = NoResumptionOnRenegotiation",
          "231: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "233: [7-renegotiate-non-aead-to-aead-client]",
          "234: CipherString = AES128-SHA",
          "235: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "236: VerifyMode = Peer",
          "238: [test-7]",
          "239: ExpectedResult = Success",
          "240: HandshakeMode = RenegotiateClient",
          "241: Method = TLS",
          "242: ResumptionExpected = No",
          "243: client = 7-renegotiate-non-aead-to-aead-client-extra",
          "245: [7-renegotiate-non-aead-to-aead-client-extra]",
          "246: RenegotiateCiphers = AES128-GCM-SHA256",
          "249: # ===========================================================",
          "251: [8-renegotiate-non-aead-to-non-aead]",
          "252: ssl_conf = 8-renegotiate-non-aead-to-non-aead-ssl",
          "254: [8-renegotiate-non-aead-to-non-aead-ssl]",
          "255: server = 8-renegotiate-non-aead-to-non-aead-server",
          "256: client = 8-renegotiate-non-aead-to-non-aead-client",
          "258: [8-renegotiate-non-aead-to-non-aead-server]",
          "259: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "260: CipherString = DEFAULT",
          "261: MaxProtocol = TLSv1.2",
          "262: Options = NoResumptionOnRenegotiation",
          "263: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "265: [8-renegotiate-non-aead-to-non-aead-client]",
          "266: CipherString = AES128-SHA",
          "267: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "268: VerifyMode = Peer",
          "270: [test-8]",
          "271: ExpectedResult = Success",
          "272: HandshakeMode = RenegotiateClient",
          "273: Method = TLS",
          "274: ResumptionExpected = No",
          "275: client = 8-renegotiate-non-aead-to-non-aead-client-extra",
          "277: [8-renegotiate-non-aead-to-non-aead-client-extra]",
          "278: RenegotiateCiphers = AES256-SHA",
          "281: # ===========================================================",
          "283: [9-renegotiate-aead-to-aead]",
          "284: ssl_conf = 9-renegotiate-aead-to-aead-ssl",
          "286: [9-renegotiate-aead-to-aead-ssl]",
          "287: server = 9-renegotiate-aead-to-aead-server",
          "288: client = 9-renegotiate-aead-to-aead-client",
          "290: [9-renegotiate-aead-to-aead-server]",
          "291: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "292: CipherString = DEFAULT",
          "293: MaxProtocol = TLSv1.2",
          "294: Options = NoResumptionOnRenegotiation",
          "295: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "297: [9-renegotiate-aead-to-aead-client]",
          "298: CipherString = AES128-GCM-SHA256",
          "299: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "300: VerifyMode = Peer",
          "302: [test-9]",
          "303: ExpectedResult = Success",
          "304: HandshakeMode = RenegotiateClient",
          "305: Method = TLS",
          "306: ResumptionExpected = No",
          "307: client = 9-renegotiate-aead-to-aead-client-extra",
          "309: [9-renegotiate-aead-to-aead-client-extra]",
          "310: RenegotiateCiphers = AES256-GCM-SHA384",
          "",
          "---------------"
        ],
        "test/ssl-tests/17-renegotiate.conf.in||test/ssl-tests/17-renegotiate.conf.in": [
          "File: test/ssl-tests/17-renegotiate.conf.in -> test/ssl-tests/17-renegotiate.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:             \"ResumptionExpected\" => \"No\",",
          "103:             \"ExpectedResult\" => \"Success\"",
          "104:         }",
          "106: );",
          "",
          "[Removed Lines]",
          "105:     }",
          "",
          "[Added Lines]",
          "105:     },",
          "106:     {",
          "107:         name => \"renegotiate-aead-to-non-aead\",",
          "108:         server => {",
          "109:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "110:             \"MaxProtocol\" => \"TLSv1.2\"",
          "111:         },",
          "112:         client => {",
          "113:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "114:             extra => {",
          "115:                 \"RenegotiateCiphers\" => \"AES128-SHA\"",
          "116:             }",
          "117:         },",
          "118:         test => {",
          "119:             \"Method\" => \"TLS\",",
          "120:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "121:             \"ResumptionExpected\" => \"No\",",
          "122:             \"ExpectedResult\" => \"Success\"",
          "123:         }",
          "124:     },",
          "125:     {",
          "126:         name => \"renegotiate-non-aead-to-aead\",",
          "127:         server => {",
          "128:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "129:             \"MaxProtocol\" => \"TLSv1.2\"",
          "130:         },",
          "131:         client => {",
          "132:             \"CipherString\" => \"AES128-SHA\",",
          "133:             extra => {",
          "134:                 \"RenegotiateCiphers\" => \"AES128-GCM-SHA256\"",
          "135:             }",
          "136:         },",
          "137:         test => {",
          "138:             \"Method\" => \"TLS\",",
          "139:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "140:             \"ResumptionExpected\" => \"No\",",
          "141:             \"ExpectedResult\" => \"Success\"",
          "142:         }",
          "143:     },",
          "144:     {",
          "145:         name => \"renegotiate-non-aead-to-non-aead\",",
          "146:         server => {",
          "147:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "148:             \"MaxProtocol\" => \"TLSv1.2\"",
          "149:         },",
          "150:         client => {",
          "151:             \"CipherString\" => \"AES128-SHA\",",
          "152:             extra => {",
          "153:                 \"RenegotiateCiphers\" => \"AES256-SHA\"",
          "154:             }",
          "155:         },",
          "156:         test => {",
          "157:             \"Method\" => \"TLS\",",
          "158:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "159:             \"ResumptionExpected\" => \"No\",",
          "160:             \"ExpectedResult\" => \"Success\"",
          "161:         }",
          "162:     },",
          "163:     {",
          "164:         name => \"renegotiate-aead-to-aead\",",
          "165:         server => {",
          "166:             \"Options\" => \"NoResumptionOnRenegotiation\",",
          "167:             \"MaxProtocol\" => \"TLSv1.2\"",
          "168:         },",
          "169:         client => {",
          "170:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "171:             extra => {",
          "172:                 \"RenegotiateCiphers\" => \"AES256-GCM-SHA384\"",
          "173:             }",
          "174:         },",
          "175:         test => {",
          "176:             \"Method\" => \"TLS\",",
          "177:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "178:             \"ResumptionExpected\" => \"No\",",
          "179:             \"ExpectedResult\" => \"Success\"",
          "180:         }",
          "181:     },",
          "",
          "---------------"
        ],
        "test/ssl-tests/18-dtls-renegotiate.conf||test/ssl-tests/18-dtls-renegotiate.conf": [
          "File: test/ssl-tests/18-dtls-renegotiate.conf -> test/ssl-tests/18-dtls-renegotiate.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Generated with generate_ssl_tests.pl",
          "5: test-0 = 0-renegotiate-client-no-resume",
          "6: test-1 = 1-renegotiate-client-resume",
          "7: test-2 = 2-renegotiate-server-resume",
          "8: test-3 = 3-renegotiate-client-auth-require",
          "9: test-4 = 4-renegotiate-client-auth-once",
          "10: # ===========================================================",
          "12: [0-renegotiate-client-no-resume]",
          "",
          "[Removed Lines]",
          "3: num_tests = 5",
          "",
          "[Added Lines]",
          "3: num_tests = 9",
          "10: test-5 = 5-renegotiate-aead-to-non-aead",
          "11: test-6 = 6-renegotiate-non-aead-to-aead",
          "12: test-7 = 7-renegotiate-non-aead-to-non-aead",
          "13: test-8 = 8-renegotiate-aead-to-aead",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146: ResumptionExpected = No",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153: # ===========================================================",
          "155: [5-renegotiate-aead-to-non-aead]",
          "156: ssl_conf = 5-renegotiate-aead-to-non-aead-ssl",
          "158: [5-renegotiate-aead-to-non-aead-ssl]",
          "159: server = 5-renegotiate-aead-to-non-aead-server",
          "160: client = 5-renegotiate-aead-to-non-aead-client",
          "162: [5-renegotiate-aead-to-non-aead-server]",
          "163: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "164: CipherString = DEFAULT",
          "165: Options = NoResumptionOnRenegotiation",
          "166: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "168: [5-renegotiate-aead-to-non-aead-client]",
          "169: CipherString = AES128-GCM-SHA256",
          "170: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "171: VerifyMode = Peer",
          "173: [test-5]",
          "174: ExpectedResult = Success",
          "175: HandshakeMode = RenegotiateClient",
          "176: Method = DTLS",
          "177: ResumptionExpected = No",
          "178: client = 5-renegotiate-aead-to-non-aead-client-extra",
          "180: [5-renegotiate-aead-to-non-aead-client-extra]",
          "181: RenegotiateCiphers = AES128-SHA",
          "184: # ===========================================================",
          "186: [6-renegotiate-non-aead-to-aead]",
          "187: ssl_conf = 6-renegotiate-non-aead-to-aead-ssl",
          "189: [6-renegotiate-non-aead-to-aead-ssl]",
          "190: server = 6-renegotiate-non-aead-to-aead-server",
          "191: client = 6-renegotiate-non-aead-to-aead-client",
          "193: [6-renegotiate-non-aead-to-aead-server]",
          "194: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "195: CipherString = DEFAULT",
          "196: Options = NoResumptionOnRenegotiation",
          "197: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "199: [6-renegotiate-non-aead-to-aead-client]",
          "200: CipherString = AES128-SHA",
          "201: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "202: VerifyMode = Peer",
          "204: [test-6]",
          "205: ExpectedResult = Success",
          "206: HandshakeMode = RenegotiateClient",
          "207: Method = DTLS",
          "208: ResumptionExpected = No",
          "209: client = 6-renegotiate-non-aead-to-aead-client-extra",
          "211: [6-renegotiate-non-aead-to-aead-client-extra]",
          "212: RenegotiateCiphers = AES128-GCM-SHA256",
          "215: # ===========================================================",
          "217: [7-renegotiate-non-aead-to-non-aead]",
          "218: ssl_conf = 7-renegotiate-non-aead-to-non-aead-ssl",
          "220: [7-renegotiate-non-aead-to-non-aead-ssl]",
          "221: server = 7-renegotiate-non-aead-to-non-aead-server",
          "222: client = 7-renegotiate-non-aead-to-non-aead-client",
          "224: [7-renegotiate-non-aead-to-non-aead-server]",
          "225: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "226: CipherString = DEFAULT",
          "227: Options = NoResumptionOnRenegotiation",
          "228: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "230: [7-renegotiate-non-aead-to-non-aead-client]",
          "231: CipherString = AES128-SHA",
          "232: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "233: VerifyMode = Peer",
          "235: [test-7]",
          "236: ExpectedResult = Success",
          "237: HandshakeMode = RenegotiateClient",
          "238: Method = DTLS",
          "239: ResumptionExpected = No",
          "240: client = 7-renegotiate-non-aead-to-non-aead-client-extra",
          "242: [7-renegotiate-non-aead-to-non-aead-client-extra]",
          "243: RenegotiateCiphers = AES256-SHA",
          "246: # ===========================================================",
          "248: [8-renegotiate-aead-to-aead]",
          "249: ssl_conf = 8-renegotiate-aead-to-aead-ssl",
          "251: [8-renegotiate-aead-to-aead-ssl]",
          "252: server = 8-renegotiate-aead-to-aead-server",
          "253: client = 8-renegotiate-aead-to-aead-client",
          "255: [8-renegotiate-aead-to-aead-server]",
          "256: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "257: CipherString = DEFAULT",
          "258: Options = NoResumptionOnRenegotiation",
          "259: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "261: [8-renegotiate-aead-to-aead-client]",
          "262: CipherString = AES128-GCM-SHA256",
          "263: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "264: VerifyMode = Peer",
          "266: [test-8]",
          "267: ExpectedResult = Success",
          "268: HandshakeMode = RenegotiateClient",
          "269: Method = DTLS",
          "270: ResumptionExpected = No",
          "271: client = 8-renegotiate-aead-to-aead-client-extra",
          "273: [8-renegotiate-aead-to-aead-client-extra]",
          "274: RenegotiateCiphers = AES256-GCM-SHA384",
          "",
          "---------------"
        ],
        "test/ssl-tests/18-dtls-renegotiate.conf.in||test/ssl-tests/18-dtls-renegotiate.conf.in": [
          "File: test/ssl-tests/18-dtls-renegotiate.conf.in -> test/ssl-tests/18-dtls-renegotiate.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:             \"ResumptionExpected\" => \"No\",",
          "95:             \"ExpectedResult\" => \"Success\"",
          "96:         }",
          "98: );",
          "",
          "[Removed Lines]",
          "97:     }",
          "",
          "[Added Lines]",
          "97:     },",
          "98:     {",
          "99:         name => \"renegotiate-aead-to-non-aead\",",
          "100:         server => {",
          "101:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "102:         },",
          "103:         client => {",
          "104:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "105:             extra => {",
          "106:                 \"RenegotiateCiphers\" => \"AES128-SHA\"",
          "107:             }",
          "108:         },",
          "109:         test => {",
          "110:             \"Method\" => \"DTLS\",",
          "111:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "112:             \"ResumptionExpected\" => \"No\",",
          "113:             \"ExpectedResult\" => \"Success\"",
          "114:         }",
          "115:     },",
          "116:     {",
          "117:         name => \"renegotiate-non-aead-to-aead\",",
          "118:         server => {",
          "119:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "120:         },",
          "121:         client => {",
          "122:             \"CipherString\" => \"AES128-SHA\",",
          "123:             extra => {",
          "124:                 \"RenegotiateCiphers\" => \"AES128-GCM-SHA256\"",
          "125:             }",
          "126:         },",
          "127:         test => {",
          "128:             \"Method\" => \"DTLS\",",
          "129:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "130:             \"ResumptionExpected\" => \"No\",",
          "131:             \"ExpectedResult\" => \"Success\"",
          "132:         }",
          "133:     },",
          "134:     {",
          "135:         name => \"renegotiate-non-aead-to-non-aead\",",
          "136:         server => {",
          "137:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "138:         },",
          "139:         client => {",
          "140:             \"CipherString\" => \"AES128-SHA\",",
          "141:             extra => {",
          "142:                 \"RenegotiateCiphers\" => \"AES256-SHA\"",
          "143:             }",
          "144:         },",
          "145:         test => {",
          "146:             \"Method\" => \"DTLS\",",
          "147:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "148:             \"ResumptionExpected\" => \"No\",",
          "149:             \"ExpectedResult\" => \"Success\"",
          "150:         }",
          "151:     },",
          "152:     {",
          "153:         name => \"renegotiate-aead-to-aead\",",
          "154:         server => {",
          "155:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "156:         },",
          "157:         client => {",
          "158:             \"CipherString\" => \"AES128-GCM-SHA256\",",
          "159:             extra => {",
          "160:                 \"RenegotiateCiphers\" => \"AES256-GCM-SHA384\"",
          "161:             }",
          "162:         },",
          "163:         test => {",
          "164:             \"Method\" => \"DTLS\",",
          "165:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "166:             \"ResumptionExpected\" => \"No\",",
          "167:             \"ExpectedResult\" => \"Success\"",
          "168:         }",
          "169:     },",
          "",
          "---------------"
        ],
        "test/ssl_test_ctx.c||test/ssl_test_ctx.c": [
          "File: test/ssl_test_ctx.c -> test/ssl_test_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:                      mode);",
          "361: }",
          "367: static const test_enum ssl_ct_validation_modes[] = {",
          "368:     {\"None\", SSL_TEST_CT_VALIDATION_NONE},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: IMPLEMENT_SSL_TEST_STRING_OPTION(SSL_TEST_CLIENT_CONF, client, reneg_ciphers)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "494:     { \"NPNProtocols\", &parse_client_npn_protocols },",
          "495:     { \"ALPNProtocols\", &parse_client_alpn_protocols },",
          "496:     { \"CTValidation\", &parse_ct_validation },",
          "497: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "471:     { \"RenegotiateCiphers\", &parse_client_reneg_ciphers},",
          "",
          "---------------"
        ],
        "test/ssl_test_ctx.h||test/ssl_test_ctx.h": [
          "File: test/ssl_test_ctx.h -> test/ssl_test_ctx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     char *npn_protocols;",
          "85:     char *alpn_protocols;",
          "86:     ssl_ct_validation_t ct_validation;",
          "87: } SSL_TEST_CLIENT_CONF;",
          "89: typedef struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     char *reneg_ciphers;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae6e317e322451c7ecc4aacc75f9fb43fd73f764",
      "candidate_info": {
        "commit_hash": "ae6e317e322451c7ecc4aacc75f9fb43fd73f764",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/ae6e317e322451c7ecc4aacc75f9fb43fd73f764",
        "files": [
          "apps/s_client.c",
          "apps/s_server.c",
          "apps/vms_term_sock.c",
          "apps/vms_term_sock.h"
        ],
        "message": "VSI submission: redirect terminal input through socket\n\nThis is needed, because on VMS, select() can only be used on sockets.  being\nable to use select() on all kinds of file descriptors is unique to Unix.\n\nSo, the solution for VMS is to create a layer that translates input from\nstandard input to socket communication.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 0d3b65832c6fa94c1d1cfa2f99335f323e3227c1)",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c",
          "apps/vms_term_sock.c||apps/vms_term_sock.c",
          "apps/vms_term_sock.h||apps/vms_term_sock.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #ifndef OPENSSL_NO_SOCK",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #ifdef OPENSSL_SYS_VMS",
          "47: # include \"vms_term_sock.h\"",
          "48: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "858:     int c_nbio = 0, c_msg = 0, c_ign_eof = 0, c_brief = 0;",
          "859:     int c_tlsextdebug = 0, c_status_req = 0;",
          "860:     BIO *bio_c_msg = NULL;",
          "862:     FD_ZERO(&readfds);",
          "863:     FD_ZERO(&writefds);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "864: #if defined(OPENSSL_SYS_VMS)",
          "865:     int stdin_sock;",
          "866:     TerminalSocket(TERM_SOCK_CREATE, &stdin_sock);",
          "867: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1821:     SSL_set_connect_state(con);",
          "1824:     width = SSL_get_fd(con) + 1;",
          "1826:     read_tty = 1;",
          "1827:     write_tty = 0;",
          "1828:     tty_on = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1831: #if defined(OPENSSL_SYS_VMS)",
          "1832:     if (stdin_sock > SSL_get_fd(con))",
          "1833:         width = stdin_sock + 1;",
          "1834:     else",
          "1835:         width = SSL_get_fd(con) + 1;",
          "1836: #else",
          "1838: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2152:                 if (read_tty && !at_eof)",
          "2153:                     openssl_fdset(fileno(stdin), &readfds);",
          "2154:                 if (write_tty)",
          "2155:                     openssl_fdset(fileno(stdout), &writefds);",
          "2156:             }",
          "2157:             if (read_ssl)",
          "2158:                 openssl_fdset(SSL_get_fd(con), &readfds);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2165: #if defined(OPENSSL_SYS_VMS)",
          "2166:                 if (read_tty && !at_eof)",
          "2167:                     openssl_fdset(stdin_sock, &readfds);",
          "2168: #else",
          "2173: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2278:                 goto shut;",
          "2279:             }",
          "2280:         }",
          "2283:         else if (!ssl_pending && write_tty)",
          "2284: #else",
          "",
          "[Removed Lines]",
          "2281: #if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_MSDOS)",
          "",
          "[Added Lines]",
          "2299: #if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_VMS)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2371: #if defined(OPENSSL_SYS_MSDOS)",
          "2372:         else if (has_stdin_waiting())",
          "2373: #else",
          "2375: #endif",
          "2376:         {",
          "2377:             if (crlf) {",
          "2378:                 int j, lf_num;",
          "2380:                 i = raw_read_stdin(cbuf, BUFSIZZ / 2);",
          "2381:                 lf_num = 0;",
          "2383:                 for (j = 0; j < i; j++)",
          "",
          "[Removed Lines]",
          "2374:         else if (FD_ISSET(fileno(stdin), &readfds))",
          "",
          "[Added Lines]",
          "2393: #if defined(OPENSSL_SYS_VMS)",
          "2394:     else if (FD_ISSET(stdin_sock,&readfds))",
          "2395: #else",
          "2396:      else if (FD_ISSET(fileno(stdin),&readfds))",
          "2397: #endif",
          "2405:   #if defined(OPENSSL_SYS_VMS)",
          "2406:                     i = recv(stdin_sock, cbuf, BUFSIZZ/2, 0);",
          "2407:                 #else",
          "2408:                     i = raw_read_stdin(cbuf, BUFSIZZ/2);",
          "2409:                 #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2393:                 }",
          "2394:                 assert(lf_num == 0);",
          "2395:             } else",
          "2398: #if !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_MSDOS)",
          "2399:             if (i == 0)",
          "2400:                 at_eof = 1;",
          "",
          "[Removed Lines]",
          "2396:                 i = raw_read_stdin(cbuf, BUFSIZZ);",
          "",
          "[Added Lines]",
          "2426:   {",
          "2427:    #if defined(OPENSSL_SYS_VMS)",
          "2428:                  i = recv(stdin_sock, cbuf, BUFSIZZ, 0);",
          "2429:    #else",
          "2430:                  i = raw_read_stdin(cbuf, BUFSIZZ);",
          "2431:    #endif",
          "2432:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2479:     bio_c_out = NULL;",
          "2480:     BIO_free(bio_c_msg);",
          "2481:     bio_c_msg = NULL;",
          "2482:     return (ret);",
          "2483: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2517: #if defined(OPENSSL_SYS_VMS)",
          "2518:     TerminalSocket(TERM_SOCK_DELETE, &stdin_sock);",
          "2519: #endif",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: #include <openssl/ebcdic.h>",
          "91: #endif",
          "93: static int not_resumable_sess_cb(SSL *s, int is_forward_secure);",
          "94: static int sv_body(int s, int stype, unsigned char *context);",
          "95: static int www_body(int s, int stype, unsigned char *context);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: #ifdef OPENSSL_SYS_VMS",
          "94: # include \"vms_term_sock.h\"",
          "95: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2007: #else",
          "2008:     struct timeval *timeoutp;",
          "2009: #endif",
          "2011:     buf = app_malloc(bufsize, \"server buffer\");",
          "2012:     if (s_nbio) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2015: #if defined(OPENSSL_SYS_VMS)",
          "2016:         int stdin_sock;",
          "2017:         TerminalSocket (TERM_SOCK_CREATE, &stdin_sock);",
          "2018: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2107:         SSL_set_tlsext_debug_arg(con, bio_s_out);",
          "2108:     }",
          "2111:     for (;;) {",
          "2112:         int read_from_terminal;",
          "2113:         int read_from_sslcon;",
          "",
          "[Removed Lines]",
          "2110:     width = s + 1;",
          "",
          "[Added Lines]",
          "2120: #if defined(OPENSSL_SYS_VMS)",
          "2121:         if (stdin_sock > s)",
          "2122:             width = stdin_sock + 1;",
          "2123:     else",
          "2124:         width=s+1;",
          "2125: #else",
          "2126:     width=s+1;",
          "2127: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2119:         if (!read_from_sslcon) {",
          "2120:             FD_ZERO(&readfds);",
          "2121: #if !defined(OPENSSL_SYS_WINDOWS) && !defined(OPENSSL_SYS_MSDOS)",
          "2123: #endif",
          "2124:             openssl_fdset(s, &readfds);",
          "",
          "[Removed Lines]",
          "2122:             openssl_fdset(fileno(stdin), &readfds);",
          "",
          "[Added Lines]",
          "2139:     #  if defined(OPENSSL_SYS_VMS)",
          "2140:                         openssl_fdset(stdin_sock,&readfds);",
          "2141:     #  else",
          "2142:                         openssl_fdset(stdin),&readfds);",
          "2143:     #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2160:             if (i <= 0)",
          "2161:                 continue;",
          "2163:                 read_from_terminal = 1;",
          "2164: #endif",
          "2165:             if (FD_ISSET(s, &readfds))",
          "",
          "[Removed Lines]",
          "2162:             if (FD_ISSET(fileno(stdin), &readfds))",
          "",
          "[Added Lines]",
          "2183: #if defined(OPENSSL_SYS_VMS)",
          "2184:                         if (FD_ISSET(stdin_sock,&readfds))",
          "2185: #else",
          "2186:    if (FD_ISSET(fileno(stdin),&readfds))",
          "2187: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2169:             if (s_crlf) {",
          "2170:                 int j, lf_num;",
          "2175:                 for (j = 0; j < i; j++)",
          "2176:                     if (buf[j] == '\\n')",
          "",
          "[Removed Lines]",
          "2172:                 i = raw_read_stdin(buf, bufsize / 2);",
          "2173:                 lf_num = 0;",
          "",
          "[Added Lines]",
          "2197:      #if defined(OPENSSL_SYS_VMS)",
          "2198:                 i=recv(stdin_sock, buf, bufsize/2, 0);",
          "2199:  #else",
          "2200:   i = raw_read_stdin(buf, bufsize / 2)",
          "2201:  #endif",
          "2202:                lf_num = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2185:                 }",
          "2186:                 assert(lf_num == 0);",
          "2187:             } else",
          "2189:             if (!s_quiet && !s_brief) {",
          "2190:                 if ((i <= 0) || (buf[0] == 'Q')) {",
          "2191:                     BIO_printf(bio_s_out, \"DONE\\n\");",
          "",
          "[Removed Lines]",
          "2188:                 i = raw_read_stdin(buf, bufsize);",
          "",
          "[Added Lines]",
          "2217: #if defined(OPENSSL_SYS_VMS)",
          "2218:                                 i=recv(stdin_sock,buf,bufsize, 0);",
          "2219: #else",
          "2220:     i = raw_read_stdin(buf, bufsize);",
          "2221: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2266:                     srp_callback_parm.user =",
          "2267:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
          "2268:                                                srp_callback_parm.login);",
          "2270:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
          "2271:                                    srp_callback_parm.user->info);",
          "2272:                     else",
          "",
          "[Removed Lines]",
          "2269:                     if (srp_callback_parm.user)",
          "",
          "[Added Lines]",
          "2302:                      if (srp_callback_parm.user)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2399:     OPENSSL_clear_free(buf, bufsize);",
          "2400:     if (ret >= 0)",
          "2401:         BIO_printf(bio_s_out, \"ACCEPT\\n\");",
          "2402:     (void)BIO_flush(bio_s_out);",
          "2403:     return (ret);",
          "2404: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2435: #if defined(OPENSSL_SYS_VMS)",
          "2436:         TerminalSocket (TERM_SOCK_DELETE, &stdin_sock);",
          "2437: #endif",
          "",
          "---------------"
        ],
        "apps/vms_term_sock.c||apps/vms_term_sock.c": [
          "File: apps/vms_term_sock.c -> apps/vms_term_sock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifdef __VMS",
          "2: #define OPENSSL_SYS_VMS",
          "3: #pragma message disable DOLLARID",
          "6: #include <openssl/OPENSSLCONF.H>",
          "8: #if !defined(_POSIX_C_SOURCE) && defined(OPENSSL_SYS_VMS)",
          "13: # define _POSIX_C_SOURCE 2",
          "14: #endif",
          "16: #include <stdio.h>",
          "18: #undef _POSIX_C_SOURCE",
          "20: #include <sys/types.h>",
          "21: #include <sys/socket.h>",
          "22: #include <netinet/in.h>",
          "23: #include <inet.h>",
          "24: #include <unistd.h>",
          "25: #include <string.h>",
          "26: #include <errno.h>",
          "27: #include <starlet.h>",
          "28: #include <iodef.h>",
          "29: #ifdef __alpha",
          "30: #include <iosbdef.h>",
          "31: #else",
          "33: #pragma __nomember_alignment",
          "34:     __union  {",
          "35:         __struct  {",
          "37:             __union  {",
          "40:                     __union  {",
          "43:                         } iosb$r_l;",
          "44:                     } iosb$r_bcnt_16;",
          "48:                     } iosb$r_bcnt_32;",
          "49:                 } iosb$r_devdepend;",
          "50:             } iosb$r_io_64;",
          "51:         __struct  {",
          "52:             __union  {",
          "55:                 } iosb$r_l_status;",
          "57:             } iosb$r_get_64;",
          "58:         } iosb$r_io_get;",
          "59:     } IOSB;",
          "61: #if !defined(__VAXC)",
          "62: #define iosb$w_status iosb$r_io_get.iosb$r_io_64.iosb$w_status",
          "63: #define iosb$w_bcnt iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_16.iosb$w_bcnt",
          "64: #define iosb$r_l        iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_16.iosb$r_l",
          "65: #define iosb$l_dev_depend iosb$r_l.iosb$l_dev_depend",
          "66: #define iosb$l_pid iosb$r_l.iosb$l_pid",
          "67: #define iosb$l_bcnt iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_32.iosb$l_bcnt",
          "68: #define iosb$w_dev_depend_high iosb$r_io_get.iosb$r_io_64.iosb$r_devdepend.iosb$r_bcnt_32.iosb$w_dev_depend_high",
          "69: #define iosb$l_getxxi_status iosb$r_io_get.iosb$r_get_64.iosb$r_l_status.iosb$l_getxxi_status",
          "70: #define iosb$l_reg_status iosb$r_io_get.iosb$r_get_64.iosb$r_l_status.iosb$l_reg_status",
          "75: #include <efndef.h>",
          "76: #include <stdlib.h>",
          "77: #include <ssdef.h>",
          "78: #include <time.h>",
          "79: #include <stdarg.h>",
          "80: #include <descrip.h>",
          "82: #include \"vms_term_sock.h\"",
          "84: #ifdef __alpha",
          "85: static struct _iosb TerminalDeviceIosb;",
          "86: #else",
          "87: IOSB TerminalDeviceIosb;",
          "88: #endif",
          "90: static char TerminalDeviceBuff[255 + 2];",
          "91: static int TerminalSocketPair[2] = {0, 0};",
          "92: static unsigned short TerminalDeviceChan = 0;",
          "94: static int CreateSocketPair (int, int, int, int *);",
          "95: static void SocketPairTimeoutAst (int);",
          "96: static int TerminalDeviceAst (int);",
          "97: static void LogMessage (char *, ...);",
          "102: #define SOCKET_PAIR_TIMEOUT_VALUE 20",
          "107: typedef struct _SocketPairTimeoutBlock {",
          "108:     unsigned short SockChan1;",
          "109:     unsigned short SockChan2;",
          "110:     } SPTB;",
          "112: #ifdef TERM_SOCK_TEST",
          "118: int main (int argc, char *argv[], char *envp[])",
          "119: {",
          "120: char TermBuff[80];",
          "121: int TermSock,",
          "122:     status,",
          "123:     len;",
          "125: LogMessage (\"Enter 'q' or 'Q' to quit ...\");",
          "126: while (strcasecmp (TermBuff, \"Q\"))",
          "127:     {",
          "131:     status = TerminalSocket (TERM_SOCK_CREATE, &TermSock);",
          "132:     if (status != TERM_SOCK_SUCCESS)",
          "133:  exit (1);",
          "138:     LogMessage (\"Waiting on terminal I/O ...\\n\");",
          "139:     len = recv (TermSock, TermBuff, sizeof (TermBuff), 0) ;",
          "140:     TermBuff[len] = '\\0';",
          "141:     LogMessage (\"Received terminal I/O [%s]\", TermBuff);",
          "146:     status = TerminalSocket (TERM_SOCK_DELETE, &TermSock);",
          "147:     if (status != TERM_SOCK_SUCCESS)",
          "148:  exit (1);",
          "149:     }",
          "151: return 1;",
          "153: }",
          "154: #endif",
          "160: int TerminalSocket (int FunctionCode, int *ReturnSocket)",
          "161: {",
          "162: int status;",
          "163: $DESCRIPTOR (TerminalDeviceDesc, \"SYS$COMMAND\");",
          "168: switch (FunctionCode)",
          "169:    {",
          "170:    case TERM_SOCK_CREATE:",
          "174:  status = CreateSocketPair (AF_INET, SOCK_STREAM, 0, TerminalSocketPair);",
          "175:  if (status == -1)",
          "176:      {",
          "177:      LogMessage (\"TerminalSocket: CreateSocketPair () - %08X\", status);",
          "178:      if (TerminalSocketPair[0])",
          "179:   close (TerminalSocketPair[0]);",
          "180:      if (TerminalSocketPair[1])",
          "181:   close (TerminalSocketPair[1]);",
          "182:      return (TERM_SOCK_FAILURE);",
          "183:      }",
          "188:  status = sys$assign (&TerminalDeviceDesc,",
          "189:         &TerminalDeviceChan,",
          "190:         0, 0, 0);",
          "191:  if (! (status & 1))",
          "192:      {",
          "193:      LogMessage (\"TerminalSocket: SYS$ASSIGN () - %08X\", status);",
          "194:      close (TerminalSocketPair[0]);",
          "195:      close (TerminalSocketPair[1]);",
          "196:      return (TERM_SOCK_FAILURE);",
          "197:      }",
          "202:  status = sys$qio (EFN$C_ENF,",
          "203:      TerminalDeviceChan,",
          "204:                    IO$_READVBLK,",
          "205:                    &TerminalDeviceIosb,",
          "206:      TerminalDeviceAst,",
          "207:      0,",
          "208:                    TerminalDeviceBuff,",
          "209:                    sizeof (TerminalDeviceBuff) - 2,",
          "210:                    0, 0, 0, 0);",
          "211:  if (! (status & 1))",
          "212:      {",
          "213:      LogMessage (\"TerminalSocket: SYS$QIO () - %08X\", status);",
          "214:      close (TerminalSocketPair[0]);",
          "215:      close (TerminalSocketPair[1]);",
          "216:      return (TERM_SOCK_FAILURE);",
          "217:      }",
          "223:         break;",
          "225:    case TERM_SOCK_DELETE:",
          "229:  status = sys$cancel (TerminalDeviceChan);",
          "230:  if (! (status & 1))",
          "231:      {",
          "232:      LogMessage (\"TerminalSocket: SYS$CANCEL () - %08X\", status);",
          "233:      close (TerminalSocketPair[0]);",
          "234:      close (TerminalSocketPair[1]);",
          "235:      return (TERM_SOCK_FAILURE);",
          "236:      }",
          "241:  status = sys$dassgn (TerminalDeviceChan);",
          "242:  if (! (status & 1))",
          "243:      {",
          "244:      LogMessage (\"TerminalSocket: SYS$DASSGN () - %08X\", status);",
          "245:      close (TerminalSocketPair[0]);",
          "246:      close (TerminalSocketPair[1]);",
          "247:      return (TERM_SOCK_FAILURE);",
          "248:      }",
          "253:  close (TerminalSocketPair[0]);",
          "254:  close (TerminalSocketPair[1]);",
          "260:  break;",
          "262:     default:",
          "266:  LogMessage (\"TerminalSocket: Invalid Function Code - %d\", FunctionCode);",
          "267:  return (TERM_SOCK_FAILURE);",
          "268:  break;",
          "269:     }",
          "274: return (TERM_SOCK_SUCCESS);",
          "276: }",
          "282: static int CreateSocketPair (",
          "283:     int  SocketFamily,",
          "284:     int  SocketType,",
          "285:     int  SocketProtocol,",
          "286:     int  *SocketPair)",
          "287: {",
          "288: struct dsc$descriptor AscTimeDesc = {0, DSC$K_DTYPE_T, DSC$K_CLASS_S, NULL};",
          "289: static const char* LocalHostAddr = {\"127.0.0.1\"};",
          "290: unsigned short TcpAcceptChan = 0,",
          "291:         TcpDeviceChan = 0;",
          "292: unsigned long BinTimeBuff[2];",
          "293: struct sockaddr_in sin;",
          "294: char AscTimeBuff[32];",
          "295: short LocalHostPort;",
          "296: int status;",
          "297: unsigned int slen;",
          "299: #ifdef __alpha",
          "300: struct _iosb iosb;",
          "301: #else",
          "302: IOSB iosb;",
          "303: #endif",
          "305: int SockDesc1 = 0,",
          "306:     SockDesc2 = 0;",
          "307: SPTB sptb;",
          "308: $DESCRIPTOR (TcpDeviceDesc, \"TCPIP$DEVICE\");",
          "313: SockDesc1 = socket (SocketFamily, SocketType, 0);",
          "314: if (SockDesc1 < 0)",
          "315:     {",
          "316:     LogMessage (\"CreateSocketPair: socket () - %d\", errno);",
          "317:     return (-1);",
          "318:     }",
          "323: slen = sizeof (sin);",
          "324: memset ((char *) &sin, 0, slen);",
          "325: sin.sin_family = SocketFamily;",
          "326: sin.sin_addr.s_addr = inet_addr (LocalHostAddr);",
          "327: sin.sin_port = 0;",
          "332: status = bind (SockDesc1, (struct sockaddr *) &sin, slen);",
          "333: if (status < 0)",
          "334:     {",
          "335:     LogMessage (\"CreateSocketPair: bind () - %d\", errno);",
          "336:     close (SockDesc1);",
          "337:     return (-1);",
          "338:     }",
          "343: status = getsockname (SockDesc1, (struct sockaddr *) &sin, &slen);",
          "344: if (status < 0)",
          "345:     {",
          "346:     LogMessage (\"CreateSocketPair: getsockname () - %d\", errno);",
          "347:     close (SockDesc1);",
          "348:     return (-1);",
          "349:     }",
          "350: else",
          "351:     LocalHostPort = sin.sin_port;",
          "356: listen (SockDesc1, 5);",
          "361: sprintf (AscTimeBuff, \"0 0:0:%02d.00\", SOCKET_PAIR_TIMEOUT_VALUE);",
          "362: AscTimeDesc.dsc$w_length = strlen (AscTimeBuff);",
          "363: AscTimeDesc.dsc$a_pointer = AscTimeBuff;",
          "364: status = sys$bintim (&AscTimeDesc, BinTimeBuff);",
          "365: if (! (status & 1))",
          "366:     {",
          "367:     LogMessage (\"CreateSocketPair: SYS$BINTIM () - %08X\", status);",
          "368:     close (SockDesc1);",
          "369:     return (-1);",
          "370:     }",
          "376: status = sys$assign (&TcpDeviceDesc, &TcpDeviceChan, 0, 0, 0);",
          "377: if (! (status & 1))",
          "378:     {",
          "379:     LogMessage (\"CreateSocketPair: SYS$ASSIGN () - %08X\", status);",
          "380:     close (SockDesc1);",
          "381:     return (-1);",
          "382:     }",
          "387: TcpAcceptChan = decc$get_sdc (SockDesc1);",
          "392: status = sys$qio (EFN$C_ENF,",
          "393:     TcpAcceptChan,",
          "394:                   IO$_ACCESS | IO$M_ACCEPT,",
          "395:                   &iosb,",
          "396:     0, 0, 0, 0, 0,",
          "397:                   &TcpDeviceChan,",
          "398:                   0, 0);",
          "399: if (! (status & 1))",
          "400:     {",
          "401:     LogMessage (\"CreateSocketPair: SYS$QIO () - %08X\", status);",
          "402:     close (SockDesc1);",
          "403:     sys$dassgn (TcpDeviceChan);",
          "404:     return (-1);",
          "405:     }",
          "410: SockDesc2 = socket (SocketFamily, SocketType, 0);",
          "411: if (SockDesc2 < 0)",
          "412:     {",
          "413:     LogMessage (\"CreateSocketPair: socket () - %d\", errno);",
          "414:     sys$cancel (TcpAcceptChan);",
          "415:     close (SockDesc1);",
          "416:     sys$dassgn (TcpDeviceChan);",
          "417:     return (-1) ;",
          "418:     }",
          "423: sptb.SockChan1 = TcpAcceptChan;",
          "424: sptb.SockChan2 = decc$get_sdc (SockDesc2);",
          "430: status = sys$setimr (EFN$C_ENF,",
          "431:        BinTimeBuff,",
          "432:        SocketPairTimeoutAst,",
          "433:        &sptb,",
          "434:        0);",
          "435: if (! (status & 1))",
          "436:     {",
          "437:     LogMessage (\"CreateSocketPair: SYS$SETIMR () - %08X\", status);",
          "438:     sys$cancel (TcpAcceptChan);",
          "439:     close (SockDesc1);",
          "440:     close (SockDesc2);",
          "441:     sys$dassgn (TcpDeviceChan);",
          "442:     return (-1);",
          "443:     }",
          "448: memset ((char *) &sin, 0, sizeof (sin)) ;",
          "449: sin.sin_family = SocketFamily;",
          "450: sin.sin_addr.s_addr = inet_addr (LocalHostAddr) ;",
          "451: sin.sin_port = LocalHostPort ;",
          "453: status = connect (SockDesc2, (struct sockaddr *) &sin, sizeof (sin));",
          "454: if (status < 0 )",
          "455:     {",
          "456:     LogMessage (\"CreateSocketPair: connect () - %d\", errno);",
          "457:     sys$cantim (&sptb, 0);",
          "458:     sys$cancel (TcpAcceptChan);",
          "459:     close (SockDesc1);",
          "460:     close (SockDesc2);",
          "461:     sys$dassgn (TcpDeviceChan);",
          "462:     return (-1);",
          "463:     }",
          "470: status = sys$synch (EFN$C_ENF, &iosb);",
          "471: if (! (iosb.iosb$w_status & 1))",
          "472:     {",
          "473:     if (iosb.iosb$w_status == SS$_ABORT)",
          "474:  LogMessage (\"CreateSocketPair: SYS$QIO(iosb) timeout\");",
          "475:     else",
          "476:  {",
          "477:         LogMessage (\"CreateSocketPair: SYS$QIO(iosb) - %d\", iosb.iosb$w_status);",
          "478:         sys$cantim (&sptb, 0);",
          "479:         }",
          "480:     close (SockDesc1);",
          "481:     close (SockDesc2);",
          "482:     sys$dassgn (TcpDeviceChan);",
          "483:     return (-1);",
          "484:     }",
          "491: sys$cantim (&sptb, 0);",
          "493: close (SockDesc1) ;",
          "494: SocketPair[0] = SockDesc2 ;",
          "495: SocketPair[1] = socket_fd (TcpDeviceChan);",
          "497: return (0) ;",
          "499: }",
          "505: static void SocketPairTimeoutAst (int astparm)",
          "506: {",
          "507: SPTB *sptb = (SPTB *) astparm;",
          "512: return;",
          "514: }",
          "520: static int TerminalDeviceAst (int astparm)",
          "521: {",
          "522: int status;",
          "527: TerminalDeviceBuff[TerminalDeviceIosb.iosb$w_bcnt] = '\\0';",
          "528: strcat (TerminalDeviceBuff, \"\\n\");",
          "533: send (TerminalSocketPair[0], TerminalDeviceBuff, TerminalDeviceIosb.iosb$w_bcnt + 1, 0);",
          "538: status = sys$qio (EFN$C_ENF,",
          "539:             TerminalDeviceChan,",
          "540:             IO$_READVBLK,",
          "541:             &TerminalDeviceIosb,",
          "542:      TerminalDeviceAst,",
          "543:      0,",
          "544:             TerminalDeviceBuff,",
          "545:             sizeof (TerminalDeviceBuff) - 1,",
          "546:             0, 0, 0, 0);",
          "551: return status;",
          "553: }",
          "559: static void LogMessage (char *msg, ...)",
          "560: {",
          "561: char *Month[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",",
          "562:                  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};",
          "563: static unsigned int pid = 0;",
          "564: va_list args;",
          "565: time_t CurTime;",
          "566: struct tm *LocTime;",
          "567: char MsgBuff[256];",
          "572: if (pid == 0)",
          "573:     pid = getpid ();",
          "578: CurTime = time (NULL);",
          "579: LocTime = localtime (&CurTime);",
          "584: sprintf (MsgBuff, \"%02d-%s-%04d %02d:%02d:%02d [%08X] %s\\n\",",
          "585:          LocTime->tm_mday, Month[LocTime->tm_mon], (LocTime->tm_year + 1900),",
          "586:          LocTime->tm_hour, LocTime->tm_min, LocTime->tm_sec, pid, msg);",
          "591: va_start (args, msg);",
          "592: vfprintf (stderr, MsgBuff, args);",
          "593: va_end (args);",
          "598: fsync (fileno (stderr));",
          "600: return;",
          "602: }",
          "603: #endif",
          "",
          "---------------"
        ],
        "apps/vms_term_sock.h||apps/vms_term_sock.h": [
          "File: apps/vms_term_sock.h -> apps/vms_term_sock.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef TERM_SOCK_H",
          "2: #define TERM_SOCK_H",
          "7: #define TERM_SOCK_CREATE 1",
          "8: #define TERM_SOCK_DELETE 2",
          "13: #define TERM_SOCK_FAILURE 0",
          "14: #define TERM_SOCK_SUCCESS 1",
          "19: int TerminalSocket (int FunctionCode, int *ReturnSocket);",
          "21: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}