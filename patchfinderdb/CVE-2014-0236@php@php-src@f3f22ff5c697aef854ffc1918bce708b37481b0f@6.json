{
  "cve_id": "CVE-2014-0236",
  "cve_desc": "file before 5.18, as used in the Fileinfo component in PHP before 5.6.0, allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a zero root_storage value in a CDF file, related to cdf.c and readcdf.c.",
  "repo": "php/php-src",
  "patch_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
  "patch_info": {
    "commit_hash": "f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/f3f22ff5c697aef854ffc1918bce708b37481b0f",
    "files": [
      "NEWS",
      "ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c"
    ],
    "message": "Fixed bug #67329 fileinfo: NULL pointer deference flaw by processing certain CDF files",
    "before_after_code_files": [
      "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c",
      "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h",
      "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c"
    ]
  },
  "patch_diff": {
    "ext/fileinfo/libmagic/cdf.c||ext/fileinfo/libmagic/cdf.c": [
      "File: ext/fileinfo/libmagic/cdf.c -> ext/fileinfo/libmagic/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "689: int",
      "690: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
      "692: {",
      "693:  size_t i;",
      "694:  const cdf_directory_t *d;",
      "696:  for (i = 0; i < dir->dir_len; i++)",
      "697:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
      "698:    break;",
      "",
      "[Removed Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
      "",
      "[Added Lines]",
      "691:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
      "692:     const cdf_directory_t **root)",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/cdf.h||ext/fileinfo/libmagic/cdf.h": [
      "File: ext/fileinfo/libmagic/cdf.h -> ext/fileinfo/libmagic/cdf.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "300: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
      "301:     cdf_sat_t *);",
      "302: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
      "304: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
      "305:     cdf_property_info_t **, size_t *, size_t *);",
      "306: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
      "",
      "[Removed Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
      "",
      "[Added Lines]",
      "303:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
      "304:     const cdf_directory_t **);",
      "",
      "---------------"
    ],
    "ext/fileinfo/libmagic/readcdf.c||ext/fileinfo/libmagic/readcdf.c": [
      "File: ext/fileinfo/libmagic/readcdf.c -> ext/fileinfo/libmagic/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <stdlib.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77: # define strcasestr strstr",
      "78: #endif",
      "80: private const char *",
      "81: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
      "82: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "80: static const struct cv {",
      "81:  uint64_t clsid[2];",
      "82:  const char *mime;",
      "83: } clsid2mime[] = {",
      "84:  {",
      "85: #ifdef PHP_WIN32",
      "86:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "87: #else",
      "88:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "89: #endif",
      "90:   \"x-msi\",",
      "91:  }",
      "92: }, clsid2desc[] = {",
      "93:  {",
      "94: #ifdef PHP_WIN32",
      "95:   { 0x00000000000c1084ui64, 0x46000000000000c0ui64 },",
      "96: #else",
      "97:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
      "98: #endif",
      "99:   \"MSI Installer\",",
      "100:  },",
      "101: };",
      "103: private const char *",
      "104: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
      "105: {",
      "106:  size_t i;",
      "107:  for (i = 0; cv[i].mime != NULL; i++) {",
      "108:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
      "109:    return cv[i].mime;",
      "110:  }",
      "111:  return NULL;",
      "112: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96: private int",
      "97: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "99: {",
      "100:         size_t i;",
      "101:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "98:     size_t count)",
      "",
      "[Added Lines]",
      "132:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:  memset(&ts, 0, sizeof(ts));",
      "110:         for (i = 0; i < count; i++) {",
      "111:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "112:                 switch (info[i].pi_type) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:         if (!NOTMIME(ms) && root_storage)",
      "145:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "163:                                                     buf, vbuf) == -1)",
      "164:                                                         return -1;",
      "165:                                         }",
      "167:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
      "168:      str = cdf_app_to_mime(vbuf, app2mime);",
      "169:     }",
      "",
      "[Removed Lines]",
      "166:                                 } else if (info[i].pi_id ==",
      "",
      "[Added Lines]",
      "203:                                 } else if (str == NULL && info[i].pi_id ==",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "218: private int",
      "219: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "221: {",
      "222:         cdf_summary_info_header_t si;",
      "223:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "220:     const cdf_stream_t *sst)",
      "",
      "[Added Lines]",
      "257:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "228:                 return -1;",
      "230:         if (NOTMIME(ms)) {",
      "231:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
      "232:       == -1)",
      "233:                         return -1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "268:   const char *str;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "255:                                 return -2;",
      "256:                         break;",
      "257:                 }",
      "261:         free(info);",
      "263:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "258:         }",
      "260:         m = cdf_file_property_info(ms, info, count);",
      "",
      "[Added Lines]",
      "297:   if (root_storage) {",
      "298:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "299:    if (str)",
      "300:     if (file_printf(ms, \", %s\", str) == -1)",
      "301:      return -2;",
      "302:    }",
      "303:   }",
      "305:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "275:         int i;",
      "276:         const char *expn = \"\";",
      "277:         const char *corrupt = \"corrupt: \";",
      "279:         info.i_fd = fd;",
      "280:         info.i_buf = buf;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:         const cdf_directory_t *root_storage;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "308:                 goto out2;",
      "309:         }",
      "312:                 expn = \"Cannot read short stream\";",
      "313:                 goto out3;",
      "314:         }",
      "",
      "[Removed Lines]",
      "311:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
      "",
      "[Added Lines]",
      "357:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
      "358:      &root_storage)) == -1) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "329: #ifdef CDF_DEBUG",
      "330:         cdf_dump_summary_info(&h, &scn);",
      "331: #endif",
      "334:  if (i == 0) {",
      "335:   const char *str = NULL;",
      "336:   cdf_directory_t *d;",
      "337:   char name[__arraycount(d->d_name)];",
      "338:   size_t j, k;",
      "340:    d = &dir.dir_tab[j];",
      "341:    for (k = 0; k < sizeof(name); k++)",
      "342:     name[k] = (char)cdf_tole2(d->d_name[k]);",
      "349:   }",
      "350:   if (NOTMIME(ms)) {",
      "351:    if (str != NULL) {",
      "",
      "[Removed Lines]",
      "332:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
      "333:                 expn = \"Can't expand summary_info\";",
      "339:   for (j = 0; j < dir.dir_len; j++) {",
      "343:    if (NOTMIME(ms))",
      "344:     str = cdf_app_to_mime(name, name2desc);",
      "345:    else",
      "346:     str = cdf_app_to_mime(name, name2mime);",
      "347:    if (str != NULL)",
      "348:     break;",
      "",
      "[Added Lines]",
      "379:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "380:             expn = \"Can't expand summary_info\";",
      "388:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
      "392:    str = cdf_app_to_mime(name,",
      "393:        NOTMIME(ms) ? name2desc : name2mime);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3bf887e6d84619fd03efc244756f68fa857b346",
      "candidate_info": {
        "commit_hash": "f3bf887e6d84619fd03efc244756f68fa857b346",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/f3bf887e6d84619fd03efc244756f68fa857b346",
        "files": [
          "NEWS",
          "ext/standard/http_fopen_wrapper.c"
        ],
        "message": "Bug #67609: TLS connections fail behind HTTP proxy",
        "before_after_code_files": [
          "ext/standard/http_fopen_wrapper.c||ext/standard/http_fopen_wrapper.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/standard/http_fopen_wrapper.c||ext/standard/http_fopen_wrapper.c": [
          "File: ext/standard/http_fopen_wrapper.c -> ext/standard/http_fopen_wrapper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:  char *scratch = NULL;",
          "121:  char *tmp = NULL;",
          "122:  char *ua_str = NULL;",
          "124:  int scratch_len = 0;",
          "125:  int body = 0;",
          "126:  char location[HTTP_HEADER_BLOCK_SIZE];",
          "",
          "[Removed Lines]",
          "123:  zval **ua_zval = NULL, **tmpzval = NULL;",
          "",
          "[Added Lines]",
          "123:  zval **ua_zval = NULL, **tmpzval = NULL, *ssl_proxy_peer_name = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:  efree(transport_string);",
          "226:  if (stream && use_proxy && use_ssl) {",
          "227:   smart_str header = {0};",
          "229:   smart_str_appendl(&header, \"CONNECT \", sizeof(\"CONNECT \")-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:   if (!context || php_stream_context_get_option(context, \"ssl\", \"peer_name\", &tmpzval) == FAILURE) {",
          "229:    MAKE_STD_ZVAL(ssl_proxy_peer_name);",
          "230:    ZVAL_STRING(ssl_proxy_peer_name, resource->host, 1);",
          "231:    php_stream_context_set_option(stream->context, \"ssl\", \"peer_name\", ssl_proxy_peer_name);",
          "232:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:   if (stream) {",
          "320:        php_stream_xport_crypto_enable(stream, 1 TSRMLS_CC) < 0) {",
          "321:     php_stream_wrapper_log_error(wrapper, options TSRMLS_CC, \"Cannot connect to HTTPS server through proxy\");",
          "322:     php_stream_close(stream);",
          "",
          "[Removed Lines]",
          "319:    if (php_stream_xport_crypto_setup(stream, STREAM_CRYPTO_METHOD_SSLv23_CLIENT, NULL TSRMLS_CC) < 0 ||",
          "",
          "[Added Lines]",
          "326:    if (php_stream_xport_crypto_setup(stream, STREAM_CRYPTO_METHOD_ANY_CLIENT, NULL TSRMLS_CC) < 0 ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d29842532397233a0a9419962426965063ad376d",
      "candidate_info": {
        "commit_hash": "d29842532397233a0a9419962426965063ad376d",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/d29842532397233a0a9419962426965063ad376d",
        "files": [
          "phpdbg_help.c"
        ],
        "message": "Inform about back command existence in help - Fixes krakjoe/phpdbg#100 No way to list the current stack/frames",
        "before_after_code_files": [
          "phpdbg_help.c||phpdbg_help.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg_help.c||phpdbg_help.c": [
          "File: phpdbg_help.c -> phpdbg_help.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318: \"**Information**\" CR",
          "319: \"  **list**     list PHP source\" CR",
          "320: \"  **info**     displays information on the debug session\" CR",
          "322: \"  **frame**    select a stack frame and print a stack frame summary\" CR",
          "323: \"  **help**     provide help on a topic\" CR CR",
          "325: \"**Starting and Stopping Execution**\" CR",
          "",
          "[Removed Lines]",
          "321: \"  **print**    show opcodes \" CR",
          "",
          "[Added Lines]",
          "321: \"  **print**    show opcodes\" CR",
          "323: \"  **back**     shows the current backtrace\" CR",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1e12316f1126ae3b3867a38d6930cf66cfb0675",
      "candidate_info": {
        "commit_hash": "c1e12316f1126ae3b3867a38d6930cf66cfb0675",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/c1e12316f1126ae3b3867a38d6930cf66cfb0675",
        "files": [
          "phpdbg_help.c",
          "phpdbg_prompt.c"
        ],
        "message": "fixup help, behaviour of step command when not executing",
        "before_after_code_files": [
          "phpdbg_help.c||phpdbg_help.c",
          "phpdbg_prompt.c||phpdbg_prompt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpdbg_help.c||phpdbg_help.c": [
          "File: phpdbg_help.c -> phpdbg_help.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "711: \"populate these tables for a given execution context.\"",
          "712: },",
          "715: {\"continue\",",
          "720: \"Note **continue** will trigger a \\\"not running\\\" error if not executing.\"",
          "721: },",
          "",
          "[Removed Lines]",
          "716: \"The **continue** command causes control to be passed back to the vm, continuing execution.  The next \"",
          "717: \"opline will be executed if **step** is set **on**.  Otherwise execution will continue to the next \"",
          "718: \"breakpoint or script completion\" CR CR",
          "",
          "[Added Lines]",
          "715: \"Continue with execution after hitting a break or watchpoint\" CR CR",
          "717: \"**Examples**\" CR CR",
          "718: \"    $P continue\" CR",
          "719: \"    $P c\" CR",
          "720: \"    Continue executing until the next break or watchpoint\" CR CR",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "863: },",
          "865: {\"step\",",
          "868: \"**Examples**\" CR CR",
          "",
          "[Removed Lines]",
          "866: \"Execute opcodes until beginning on next line\" CR CR",
          "",
          "[Added Lines]",
          "868: \"Execute opcodes until next line\" CR CR",
          "",
          "---------------"
        ],
        "phpdbg_prompt.c||phpdbg_prompt.c": [
          "File: phpdbg_prompt.c -> phpdbg_prompt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "426: {",
          "429:  return PHPDBG_NEXT;",
          "",
          "[Removed Lines]",
          "427:  PHPDBG_G(flags) |= PHPDBG_IS_STEPPING;",
          "",
          "[Added Lines]",
          "427:  if (EG(in_execution)) {",
          "428:   PHPDBG_G(flags) |= PHPDBG_IS_STEPPING;",
          "429:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f105e1589df4f6e072a4596762639cd8b032ec5c",
      "candidate_info": {
        "commit_hash": "f105e1589df4f6e072a4596762639cd8b032ec5c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/f105e1589df4f6e072a4596762639cd8b032ec5c",
        "files": [
          "Makefile.gcov"
        ],
        "message": "fix my last commit with some locales",
        "before_after_code_files": [
          "Makefile.gcov||Makefile.gcov"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.gcov||Makefile.gcov": [
          "File: Makefile.gcov -> Makefile.gcov",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:  @rm -rf lcov_data/",
          "15:  @$(mkinstalldirs) lcov_data/",
          "16:  @echo",
          "18:  for x in $$files; do \\",
          "19:   echo -n . ;\\",
          "20:   y=`echo $$x | sed -e 's!\\.libs/!!'`; \\",
          "",
          "[Removed Lines]",
          "17:  -@files=`find . -name \\*.gcda -o -name \\*.gcno -o -name \\*.da -o -name \\*.c -o -name \\*.h | sed -e 's/^\\.\\///' | sed -e 's/\\.gcda//g' -e 's/\\.gcno//g' -e 's/\\.da//g' | $(EGREP) $(LCOV_INCLUDE) | sed -e 's/.libs/ZZZZ/g' | sort | sed -e 's/ZZZZ/.libs/g' | uniq` ;\\",
          "",
          "[Added Lines]",
          "17:  -@files=`find . -name \\*.gcda -o -name \\*.gcno -o -name \\*.da -o -name \\*.c -o -name \\*.h | sed -e 's/^\\.\\///' | sed -e 's/\\.gcda//g' -e 's/\\.gcno//g' -e 's/\\.da//g' | $(EGREP) $(LCOV_INCLUDE) | sed -e 's/.libs/ZZZZ/g' | sort -h | sed -e 's/ZZZZ/.libs/g' | uniq` ;\\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58598ead2ceef2e6b889da61d9b984914bd58f5b",
      "candidate_info": {
        "commit_hash": "58598ead2ceef2e6b889da61d9b984914bd58f5b",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/58598ead2ceef2e6b889da61d9b984914bd58f5b",
        "files": [
          "ext/standard/credits.c"
        ],
        "message": "add Stas and Julient to the QA credits",
        "before_after_code_files": [
          "ext/standard/credits.c||ext/standard/credits.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/php/php-src/pull/745"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ext/standard/credits.c||ext/standard/credits.c": [
          "File: ext/standard/credits.c -> ext/standard/credits.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  if (flag & PHP_CREDITS_QA) {",
          "106:   php_info_print_table_start();",
          "107:   php_info_print_table_header(1, \"PHP Quality Assurance Team\");",
          "109:   php_info_print_table_end();",
          "110:  }",
          "",
          "[Removed Lines]",
          "108:   php_info_print_table_row(1, \"Ilia Alshanetsky, Joerg Behrens, Antony Dovgal, Stefan Esser, Moriyoshi Koizumi, Magnus Maatta, Sebastian Nohn, Derick Rethans, Melvyn Sopacua, Jani Taskinen, Pierre-Alain Joye, Dmitry Stogov, Felipe Pena, David Soria Parra, Stephen Zarkos, Anatol Belski, Ferenc Kovacs\");",
          "",
          "[Added Lines]",
          "108:   php_info_print_table_row(1, \"Ilia Alshanetsky, Joerg Behrens, Antony Dovgal, Stefan Esser, Moriyoshi Koizumi, Magnus Maatta, Sebastian Nohn, Derick Rethans, Melvyn Sopacua, Jani Taskinen, Pierre-Alain Joye, Dmitry Stogov, Felipe Pena, David Soria Parra, Stanislav Malyshev, Julien Pauli, Stephen Zarkos, Anatol Belski, Ferenc Kovacs\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}