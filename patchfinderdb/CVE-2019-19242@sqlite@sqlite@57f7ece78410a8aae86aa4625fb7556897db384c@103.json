{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
      "candidate_info": {
        "commit_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "files": [
          "ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "test/fts3atoken.test"
        ],
        "message": "The fts3_tokenizer() function returns NULL if the SQLITE_DBCONFIG_ENABLE_FTS_TOKENIZER setting is disabled, which is is by default.\n\nFossilOrigin-Name: f5732f4caf7a37a6445c61ae0d0ac14cc9deb897376e73aa36a1ead025b92c69",
        "before_after_code_files": [
          "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers": [
          "File: ext/fts3/README.tokenizers -> ext/fts3/README.tokenizers",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   SECURITY: If the fts3 extension is used in an environment where potentially",
          "54:     malicious users may execute arbitrary SQL (i.e. gears), they should be",
          "58:   See \"Sample code\" below for an example of calling the fts3_tokenizer()",
          "59:   function from C code.",
          "",
          "[Removed Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function, possibly using the",
          "56:     authorisation callback.",
          "",
          "[Added Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function.  The",
          "56:     fts3_tokenizer() function is disabled by default. It is only enabled",
          "57:     by SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER. Do not enable it in",
          "58:     security sensitive environments.",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:       return;",
          "107:     }",
          "108:   }",
          "110: }",
          "112: int sqlite3Fts3IsIdChar(char c){",
          "",
          "[Removed Lines]",
          "109:   sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "109:   if( fts3TokenizerEnabled(context) ){",
          "110:     sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "111:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a0a93c89d3fdd0f9000a9226388e2e53f299165e043913f40b83bf597bfea04",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: # simple input string via the built-in test function. This is as much",
          "108: # to test the test function as the tokenizer implementations.",
          "109: #",
          "110: do_test fts3atoken-3.1 {",
          "111:   execsql {",
          "112:     SELECT fts3_tokenizer_test('simple', 'I don''t see how');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
      "candidate_info": {
        "commit_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Always use the symbolic name SQLITE_IDXTYPE_PRIMARYKEY rather than a hard-coded magic number 2.\n\nFossilOrigin-Name: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a6509ca3dc2602c7d0376230ee63c1bb4c4066f007e77e9ac20d8eee966e5e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "1670:     VdbeComment((v, \"for %s\", pIdx->zName));",
          "1671: #ifdef SQLITE_ENABLE_NULL_TRIM",
          "1673: #endif",
          "",
          "[Removed Lines]",
          "1672:     if( pIdx->idxType==2 ) sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "",
          "[Added Lines]",
          "1672:     if( pIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "1673:       sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "1674:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2410:         sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2411:       }",
          "2412:     }",
          "2414:       idxInsFlags |= OPFLAG_NCHANGE;",
          "2415:     }",
          "2416:     sqlite3VdbeAddOp2(v, OP_IdxInsert, iDest, regData);",
          "",
          "[Removed Lines]",
          "2413:     if( !HasRowid(pSrc) && pDestIdx->idxType==2 ){",
          "",
          "[Added Lines]",
          "2415:     if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
      "candidate_info": {
        "commit_hash": "fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb11bf8c910e85ec7a4bfb518b78c47409e5b890",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a left-shift of a negative value (undefined behaviour) when dealing with a corrupt database in fts3.\n\nFossilOrigin-Name: b851d12474035328df8354c7da8d81bc78833c8c704153f9f573c19b47a8487e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: }",
          "340: #define GETVARINT_STEP(v, ptr, shift, mask1, mask2, var, ret) \\",
          "342:   if( (v & mask2)==0 ){ var = v; return ret; }",
          "343: #define GETVARINT_INIT(v, ptr, shift, mask1, mask2, var, ret) \\",
          "344:   v = (*ptr++);                                               \\",
          "",
          "[Removed Lines]",
          "341:   v = (v & mask1) | ( (*ptr++) << shift );                    \\",
          "",
          "[Added Lines]",
          "341:   v = (v & mask1) | ( (*(ptr++)) << shift );  \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378: int sqlite3Fts3GetVarint32(const char *p, int *pi){",
          "379:   u32 a;",
          "381: #ifndef fts3GetVarint32",
          "383: #else",
          "385:   assert( a & 0x80 );",
          "386: #endif",
          "391:   a = (a & 0x0FFFFFFF );",
          "393:   assert( 0==(a & 0x80000000) );",
          "394:   assert( *pi>=0 );",
          "395:   return 5;",
          "",
          "[Removed Lines]",
          "382:   GETVARINT_INIT(a, p, 0,  0x00,     0x80, *pi, 1);",
          "384:   a = (*p++);",
          "388:   GETVARINT_STEP(a, p, 7,  0x7F,     0x4000, *pi, 2);",
          "389:   GETVARINT_STEP(a, p, 14, 0x3FFF,   0x200000, *pi, 3);",
          "390:   GETVARINT_STEP(a, p, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "[Added Lines]",
          "379:   const unsigned char *ptr = (const unsigned char*)p;",
          "383:   GETVARINT_INIT(a, ptr, 0,  0x00,     0x80, *pi, 1);",
          "385:   a = (*ptr++);",
          "389:   GETVARINT_STEP(a, ptr, 7,  0x7F,     0x4000, *pi, 2);",
          "390:   GETVARINT_STEP(a, ptr, 14, 0x3FFF,   0x200000, *pi, 3);",
          "391:   GETVARINT_STEP(a, ptr, 21, 0x1FFFFF, 0x10000000, *pi, 4);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cad5da1bf5f65ad87d97b72e9a84081fde455ba4085e79943fdf6c0144b1ef83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1dd3db537e98720fc840422f066e6a121983565",
      "candidate_info": {
        "commit_hash": "b1dd3db537e98720fc840422f066e6a121983565",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1dd3db537e98720fc840422f066e6a121983565",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/cg_anno.tcl"
        ],
        "message": "Tweak the tool/cg_anno.tcl script so that it can run on systems without /usr/bin/tclsh.\n\nFossilOrigin-Name: a026189aa46114d2de4f1da5882aeef9cf446a5aa6ea068d51c27df0d7302ddb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/cg_anno.tcl||tool/cg_anno.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbb7e60272cda518fa1bd8d3e3cd02e031b657fef92a9d4d7ed8c2bfb97be7c8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/cg_anno.tcl||tool/cg_anno.tcl": [
          "File: tool/cg_anno.tcl -> tool/cg_anno.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # A wrapper around cg_annotate that sets appropriate command-line options",
          "4: # and rearranges the output so that annotated files occur in a consistent",
          "",
          "[Removed Lines]",
          "1: #!/usr/bin/tclsh",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "2: # \\",
          "3: exec tclsh \"$0\" ${1+\"$@\"}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb8ac325d769248e45eaa056adf4da9960bdd9c3",
      "candidate_info": {
        "commit_hash": "fb8ac325d769248e45eaa056adf4da9960bdd9c3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb8ac325d769248e45eaa056adf4da9960bdd9c3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/altertab2.test"
        ],
        "message": "Avoid a dangling pointer comparison when renaming a table that has a trigger that itself contains a window function with an (illegal) column reference in a FOLLOWING expression.\n\nFossilOrigin-Name: d45bee36f2c1091a2d32c16ca8921bf4e7c9e40c46d0a36fbcb179ecfafcfbf0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65cebb06a0afcbcb4157c3d518a62ed188b1e90d9e9b69d88fece484bcb6e380",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882: static Expr *sqlite3WindowOffsetExpr(Parse *pParse, Expr *pExpr){",
          "883:   if( 0==sqlite3ExprIsConstant(pExpr) ){",
          "884:     sqlite3ExprDelete(pParse->db, pExpr);",
          "885:     pExpr = sqlite3ExprAlloc(pParse->db, TK_NULL, 0, 0);",
          "886:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884:     if( IN_RENAME_OBJECT ) sqlite3RenameExprUnmap(pParse, pExpr);",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   END}",
          "179: }",
          "181: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #-------------------------------------------------------------------------",
          "182: do_execsql_test 5.0 {",
          "183:   CREATE TABLE t2(a);",
          "184:   CREATE TRIGGER r2 AFTER INSERT ON t2 WHEN new.a NOT NULL BEGIN",
          "185:     SELECT a, rank() OVER w1 FROM t2",
          "186:       WINDOW w1 AS (",
          "187:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "188:       ),",
          "189:       w2 AS (",
          "190:         PARTITION BY b",
          "191:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "192:       );",
          "193:   END;",
          "194: } {}",
          "196: do_catchsql_test 5.0.1 {",
          "197:   INSERT INTO t2 VALUES(1);",
          "198: } {1 {no such column: b}}",
          "200: do_execsql_test 5.1 {",
          "201:   ALTER TABLE t2 RENAME TO t2x;",
          "202:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "203: } {",
          "204:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.a NOT NULL BEGIN",
          "205:     SELECT a, rank() OVER w1 FROM \"t2x\"",
          "206:       WINDOW w1 AS (",
          "207:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "208:       ),",
          "209:       w2 AS (",
          "210:         PARTITION BY b",
          "211:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "212:       );",
          "213:   END}",
          "214: }",
          "216: do_execsql_test 5.2 {",
          "217:   ALTER TABLE t2x RENAME a TO aaaa;",
          "218:   SELECT sql FROM sqlite_master WHERE name = 'r2';",
          "219: } {",
          "220:   {CREATE TRIGGER r2 AFTER INSERT ON \"t2x\" WHEN new.aaaa NOT NULL BEGIN",
          "221:     SELECT aaaa, rank() OVER w1 FROM \"t2x\"",
          "222:       WINDOW w1 AS (",
          "223:         PARTITION BY b ORDER BY d ROWS BETWEEN 2 PRECEDING AND a FOLLOWING",
          "224:       ),",
          "225:       w2 AS (",
          "226:         PARTITION BY b",
          "227:         ORDER BY d ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "228:       );",
          "229:   END}",
          "230: }",
          "232: do_catchsql_test 5.3 {",
          "233:   INSERT INTO t2x VALUES(1);",
          "234: } {1 {no such column: b}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}