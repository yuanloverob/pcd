{
  "cve_id": "CVE-2016-0797",
  "cve_desc": "Multiple integer overflows in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allow remote attackers to cause a denial of service (heap memory corruption or NULL pointer dereference) or possibly have unspecified other impact via a long digit string that is mishandled by the (1) BN_dec2bn or (2) BN_hex2bn function, related to crypto/bn/bn.h and crypto/bn/bn_print.c.",
  "repo": "openssl/openssl",
  "patch_hash": "99ba9fd02fd481eb971023a3a0a251a37eb87e4c",
  "patch_info": {
    "commit_hash": "99ba9fd02fd481eb971023a3a0a251a37eb87e4c",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/99ba9fd02fd481eb971023a3a0a251a37eb87e4c",
    "files": [
      "crypto/bn/bn_lcl.h",
      "crypto/bn/bn_print.c",
      "crypto/include/internal/bn_int.h"
    ],
    "message": "Fix BN_hex2bn/BN_dec2bn NULL ptr/heap corruption\n\nIn the BN_hex2bn function the number of hex digits is calculated using\nan int value |i|. Later |bn_expand| is called with a value of |i * 4|.\nFor large values of |i| this can result in |bn_expand| not allocating any\nmemory because |i * 4| is negative. This leaves ret->d as NULL leading\nto a subsequent NULL ptr deref. For very large values of |i|, the\ncalculation |i * 4| could be a positive value smaller than |i|. In this\ncase memory is allocated to ret->d, but it is insufficiently sized\nleading to heap corruption. A similar issue exists in BN_dec2bn.\n\nThis could have security consequences if BN_hex2bn/BN_dec2bn is ever\ncalled by user applications with very large untrusted hex/dec data. This is\nanticipated to be a rare occurrence.\n\nAll OpenSSL internal usage of this function uses data that is not expected\nto be untrusted, e.g. config file data or application command line\narguments. If user developed applications generate config file data based\non untrusted data then it is possible that this could also lead to security\nconsequences. This is also anticipated to be a rare.\n\nIssue reported by Guido Vranken.\n\nCVE-2016-0797\n\nReviewed-by: Andy Polyakov <appro@openssl.org>",
    "before_after_code_files": [
      "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h",
      "crypto/bn/bn_print.c||crypto/bn/bn_print.c",
      "crypto/include/internal/bn_int.h||crypto/include/internal/bn_int.h"
    ]
  },
  "patch_diff": {
    "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h": [
      "File: crypto/bn/bn_lcl.h -> crypto/bn/bn_lcl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "774: int bn_probable_prime_dh_retry(BIGNUM *rnd, int bits, BN_CTX *ctx);",
      "775: int bn_probable_prime_dh_coprime(BIGNUM *rnd, int bits, BN_CTX *ctx);",
      "777: #ifdef  __cplusplus",
      "778: }",
      "779: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "777: static ossl_inline BIGNUM *bn_expand(BIGNUM *a, int bits)",
      "778: {",
      "779:     if (bits > (INT_MAX - BN_BITS2 + 1))",
      "780:         return NULL;",
      "782:     if(((bits+BN_BITS2-1)/BN_BITS2) <= (a)->dmax)",
      "783:         return a;",
      "785:     return bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2);",
      "786: }",
      "",
      "---------------"
    ],
    "crypto/bn/bn_print.c||crypto/bn/bn_print.c": [
      "File: crypto/bn/bn_print.c -> crypto/bn/bn_print.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "58: #include <stdio.h>",
      "59: #include <ctype.h>",
      "60: #include \"internal/cryptlib.h\"",
      "61: #include <openssl/buffer.h>",
      "62: #include \"bn_lcl.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60: #include <limits.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "183:         a++;",
      "184:     }",
      "188:     num = i + neg;",
      "189:     if (bn == NULL)",
      "",
      "[Removed Lines]",
      "186:     for (i = 0; isxdigit((unsigned char)a[i]); i++) ;",
      "",
      "[Added Lines]",
      "187:     for (i = 0; i <= (INT_MAX/4) && isxdigit((unsigned char)a[i]); i++)",
      "188:         continue;",
      "190:     if (i > INT_MAX/4)",
      "191:         goto err;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "254:         a++;",
      "255:     }",
      "259:     num = i + neg;",
      "260:     if (bn == NULL)",
      "",
      "[Removed Lines]",
      "257:     for (i = 0; isdigit((unsigned char)a[i]); i++) ;",
      "",
      "[Added Lines]",
      "262:     for (i = 0; i <= (INT_MAX/4) && isdigit((unsigned char)a[i]); i++)",
      "263:         continue;",
      "265:     if (i > INT_MAX/4)",
      "266:         goto err;",
      "",
      "---------------"
    ],
    "crypto/include/internal/bn_int.h||crypto/include/internal/bn_int.h": [
      "File: crypto/include/internal/bn_int.h -> crypto/include/internal/bn_int.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: # define HEADER_BN_INT_H",
      "58: # include <openssl/bn.h>",
      "60: #ifdef  __cplusplus",
      "61: extern \"C\" {",
      "62: #endif",
      "66: BIGNUM *bn_wexpand(BIGNUM *a, int words);",
      "67: BIGNUM *bn_expand2(BIGNUM *a, int words);",
      "",
      "[Removed Lines]",
      "64: # define bn_expand(a,bits) ((((((bits+BN_BITS2-1))/BN_BITS2)) <= (a)->dmax)?\\",
      "65:         (a):bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2))",
      "",
      "[Added Lines]",
      "59: # include <limits.h>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "58c03e3b9225fe1a8e3f6b8c23c45b33e26fedb5",
      "candidate_info": {
        "commit_hash": "58c03e3b9225fe1a8e3f6b8c23c45b33e26fedb5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/58c03e3b9225fe1a8e3f6b8c23c45b33e26fedb5",
        "files": [
          "crypto/bn/bn_print.c"
        ],
        "message": "fix BN_hex2bn()/BN_dec2bn() memory leak\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
          ],
          "candidate": [
            "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_print.c||crypto/bn/bn_print.c": [
          "File: crypto/bn/bn_print.c -> crypto/bn/bn_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     for (i = 0; i <= (INT_MAX/4) && isxdigit((unsigned char)a[i]); i++)",
          "140:         continue;",
          "143:         goto err;",
          "145:     num = i + neg;",
          "",
          "[Removed Lines]",
          "142:     if (i > INT_MAX/4)",
          "",
          "[Added Lines]",
          "142:     if (i == 0 || i > INT_MAX/4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:     for (i = 0; i <= (INT_MAX/4) && isdigit((unsigned char)a[i]); i++)",
          "210:         continue;",
          "213:         goto err;",
          "215:     num = i + neg;",
          "",
          "[Removed Lines]",
          "212:     if (i > INT_MAX/4)",
          "",
          "[Added Lines]",
          "212:     if (i == 0 || i > INT_MAX/4)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8aa8b6c8f6d4e2b2bbd5e5721d977b0a6aa3cee",
      "candidate_info": {
        "commit_hash": "e8aa8b6c8f6d4e2b2bbd5e5721d977b0a6aa3cee",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e8aa8b6c8f6d4e2b2bbd5e5721d977b0a6aa3cee",
        "files": [
          "apps/apps.c",
          "apps/s_server.c",
          "crypto/aes/aes_core.c",
          "crypto/async/arch/async_win.c",
          "crypto/async/async.c",
          "crypto/bio/bss_mem.c",
          "crypto/bn/bn_lcl.h",
          "crypto/include/internal/evp_int.h",
          "crypto/o_fopen.c",
          "crypto/x509/x_x509a.c",
          "include/openssl/engine.h",
          "ssl/d1_lib.c",
          "ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_sess.c",
          "ssl/statem/statem.c",
          "ssl/statem/statem_dtls.c",
          "ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c",
          "test/asynctest.c",
          "test/verify_extra_test.c"
        ],
        "message": "Fix a few if(, for(, while( inside code.\n\nFix some indentation at the same time\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1292)",
        "before_after_code_files": [
          "apps/apps.c||apps/apps.c",
          "apps/s_server.c||apps/s_server.c",
          "crypto/aes/aes_core.c||crypto/aes/aes_core.c",
          "crypto/async/arch/async_win.c||crypto/async/arch/async_win.c",
          "crypto/async/async.c||crypto/async/async.c",
          "crypto/bio/bss_mem.c||crypto/bio/bss_mem.c",
          "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h",
          "crypto/include/internal/evp_int.h||crypto/include/internal/evp_int.h",
          "crypto/o_fopen.c||crypto/o_fopen.c",
          "crypto/x509/x_x509a.c||crypto/x509/x_x509a.c",
          "include/openssl/engine.h||include/openssl/engine.h",
          "ssl/d1_lib.c||ssl/d1_lib.c",
          "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_sess.c||ssl/ssl_sess.c",
          "ssl/statem/statem.c||ssl/statem/statem.c",
          "ssl/statem/statem_dtls.c||ssl/statem/statem_dtls.c",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "test/asynctest.c||test/asynctest.c",
          "test/verify_extra_test.c||test/verify_extra_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h"
          ],
          "candidate": [
            "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h"
          ]
        }
      },
      "candidate_diff": {
        "apps/apps.c||apps/apps.c": [
          "File: apps/apps.c -> apps/apps.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1193:     if (store == NULL)",
          "1194:         goto end;",
          "1197:         lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());",
          "1198:         if (lookup == NULL)",
          "1199:             goto end;",
          "",
          "[Removed Lines]",
          "1196:     if(CAfile != NULL || !noCAfile) {",
          "",
          "[Added Lines]",
          "1196:     if (CAfile != NULL || !noCAfile) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1206:             X509_LOOKUP_load_file(lookup, NULL, X509_FILETYPE_DEFAULT);",
          "1207:     }",
          "1210:         lookup = X509_STORE_add_lookup(store, X509_LOOKUP_hash_dir());",
          "1211:         if (lookup == NULL)",
          "1212:             goto end;",
          "",
          "[Removed Lines]",
          "1209:     if(CApath != NULL || !noCApath) {",
          "",
          "[Added Lines]",
          "1209:     if (CApath != NULL || !noCApath) {",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2465:     int retry = 0;",
          "2467: #ifndef OPENSSL_NO_DTLS",
          "2469:         BIO_ADDR *client = NULL;",
          "2471:         if ((client = BIO_ADDR_new()) == NULL) {",
          "",
          "[Removed Lines]",
          "2468:     if(dtlslisten) {",
          "",
          "[Added Lines]",
          "2468:     if (dtlslisten) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2478:             int fd = -1;",
          "2480:             wbio = SSL_get_wbio(con);",
          "2482:                 BIO_get_fd(wbio, &fd);",
          "2483:             }",
          "2486:                 BIO_printf(bio_err, \"ERROR - unable to connect\\n\");",
          "2487:                 BIO_ADDR_free(client);",
          "2488:                 return 0;",
          "",
          "[Removed Lines]",
          "2481:             if(wbio) {",
          "2485:             if(!wbio || BIO_connect(fd, client, 0) == 0) {",
          "",
          "[Added Lines]",
          "2481:             if (wbio) {",
          "2485:             if (!wbio || BIO_connect(fd, client, 0) == 0) {",
          "",
          "---------------"
        ],
        "crypto/aes/aes_core.c||crypto/aes/aes_core.c": [
          "File: crypto/aes/aes_core.c -> crypto/aes/aes_core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:     rk = key->rd_key;",
          "648:         key->rounds = 10;",
          "650:         key->rounds = 12;",
          "651:     else",
          "652:         key->rounds = 14;",
          "",
          "[Removed Lines]",
          "647:     if (bits==128)",
          "649:     else if (bits==192)",
          "",
          "[Added Lines]",
          "647:     if (bits == 128)",
          "649:     else if (bits == 192)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1223:     rk = key->rd_key;",
          "1226:         key->rounds = 10;",
          "1228:         key->rounds = 12;",
          "1229:     else",
          "1230:         key->rounds = 14;",
          "",
          "[Removed Lines]",
          "1225:     if (bits==128)",
          "1227:     else if (bits==192)",
          "",
          "[Added Lines]",
          "1225:     if (bits == 128)",
          "1227:     else if (bits == 192)",
          "",
          "---------------"
        ],
        "crypto/async/arch/async_win.c||crypto/async/arch/async_win.c": [
          "File: crypto/async/arch/async_win.c -> crypto/async/arch/async_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     async_ctx *ctx = async_get_ctx();",
          "26:     if (ctx != NULL) {",
          "27:         async_fibre *fibre = &ctx->dispatcher;",
          "29:             ConvertFiberToThread();",
          "30:             fibre->fibre = NULL;",
          "31:         }",
          "",
          "[Removed Lines]",
          "28:         if(fibre != NULL && fibre->fibre != NULL && fibre->converted) {",
          "",
          "[Added Lines]",
          "28:         if (fibre != NULL && fibre->fibre != NULL && fibre->converted) {",
          "",
          "---------------"
        ],
        "crypto/async/async.c||crypto/async/async.c": [
          "File: crypto/async/async.c -> crypto/async/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "396:     async_ctx *ctx;",
          "398:     ctx = async_get_ctx();",
          "400:         return NULL;",
          "402:     return ctx->currjob;",
          "",
          "[Removed Lines]",
          "399:     if(ctx == NULL)",
          "",
          "[Added Lines]",
          "399:     if (ctx == NULL)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:         return;",
          "430:     }",
          "432:         ctx->blocked--;",
          "433: }",
          "",
          "[Removed Lines]",
          "431:     if(ctx->blocked > 0)",
          "",
          "[Added Lines]",
          "431:     if (ctx->blocked > 0)",
          "",
          "---------------"
        ],
        "crypto/bio/bss_mem.c||crypto/bio/bss_mem.c": [
          "File: crypto/bio/bss_mem.c -> crypto/bio/bss_mem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:             BUF_MEM *b;",
          "145:             BIO_BUF_MEM *bb = (BIO_BUF_MEM *)a->ptr;",
          "148:                 b = bb->buf;",
          "149:                 if (a->flags & BIO_FLAGS_MEM_RDONLY)",
          "150:                     b->data = NULL;",
          "151:                 BUF_MEM_free(b);",
          "153:                     OPENSSL_free(bb->readp);",
          "154:                     OPENSSL_free(bb);",
          "155:                 }",
          "",
          "[Removed Lines]",
          "147:             if(bb != NULL) {",
          "152:                 if(free_all) {",
          "",
          "[Added Lines]",
          "147:             if (bb != NULL) {",
          "152:                 if (free_all) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166: static int mem_buf_sync(BIO *b)",
          "167: {",
          "169:         BIO_BUF_MEM *bbm = (BIO_BUF_MEM *)b->ptr;",
          "172:             memmove(bbm->buf->data, bbm->readp->data, bbm->readp->length);",
          "173:             bbm->buf->length = bbm->readp->length;",
          "174:             bbm->readp->data = bbm->buf->data;",
          "",
          "[Removed Lines]",
          "168:     if((b != NULL) && (b->init) && (b->ptr != NULL)) {",
          "171:         if(bbm->readp->data != bbm->buf->data) {",
          "",
          "[Added Lines]",
          "168:     if (b != NULL && b->init != 0 && b->ptr != NULL) {",
          "171:         if (bbm->readp->data != bbm->buf->data) {",
          "",
          "---------------"
        ],
        "crypto/bn/bn_lcl.h||crypto/bn/bn_lcl.h": [
          "File: crypto/bn/bn_lcl.h -> crypto/bn/bn_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: #   endif",
          "158: #   define bn_pollute(a) \\",
          "159:         do { \\",
          "172:         } while(0)",
          "173: #   ifdef BN_DEBUG_TRIX",
          "174: #    undef RAND_pseudo_bytes",
          "",
          "[Removed Lines]",
          "160:                 const BIGNUM *_bnum1 = (a); \\",
          "161:                 if(_bnum1->top < _bnum1->dmax) { \\",
          "162:                         unsigned char _tmp_char; \\",
          "166:                         BN_ULONG *_not_const; \\",
          "167:                         memcpy(&_not_const, &_bnum1->d, sizeof(_not_const)); \\",
          "168:                         RAND_bytes(&_tmp_char, 1); /* Debug only - safe to ignore error return */\\",
          "169:                         memset(_not_const + _bnum1->top, _tmp_char, \\",
          "170:                                 sizeof(*_not_const) * (_bnum1->dmax - _bnum1->top)); \\",
          "171:                 } \\",
          "",
          "[Added Lines]",
          "160:             const BIGNUM *_bnum1 = (a); \\",
          "161:             if (_bnum1->top < _bnum1->dmax) { \\",
          "162:                 unsigned char _tmp_char; \\",
          "166:                 BN_ULONG *_not_const; \\",
          "167:                 memcpy(&_not_const, &_bnum1->d, sizeof(_not_const)); \\",
          "168:                 RAND_bytes(&_tmp_char, 1); /* Debug only - safe to ignore error return */\\",
          "169:                 memset(_not_const + _bnum1->top, _tmp_char, \\",
          "170:                        sizeof(*_not_const) * (_bnum1->dmax - _bnum1->top)); \\",
          "171:             } \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "678:     if (bits > (INT_MAX - BN_BITS2 + 1))",
          "679:         return NULL;",
          "682:         return a;",
          "684:     return bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2);",
          "",
          "[Removed Lines]",
          "681:     if(((bits+BN_BITS2-1)/BN_BITS2) <= (a)->dmax)",
          "",
          "[Added Lines]",
          "681:     if (((bits+BN_BITS2-1)/BN_BITS2) <= (a)->dmax)",
          "",
          "---------------"
        ],
        "crypto/include/internal/evp_int.h||crypto/include/internal/evp_int.h": [
          "File: crypto/include/internal/evp_int.h -> crypto/include/internal/evp_int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: #define BLOCK_CIPHER_ecb_loop() \\",
          "139:         size_t i, bl; \\",
          "140:         bl = EVP_CIPHER_CTX_cipher(ctx)->block_size;    \\",
          "142:         inl -= bl; \\",
          "145: #define BLOCK_CIPHER_func_ecb(cname, cprefix, kstruct, ksched) \\",
          "146: static int cname##_ecb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl) \\",
          "",
          "[Removed Lines]",
          "141:         if(inl < bl) return 1;\\",
          "143:         for(i=0; i <= inl; i+=bl)",
          "",
          "[Added Lines]",
          "141:         if (inl < bl) return 1;\\",
          "143:         for (i=0; i <= inl; i+=bl)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189: #define BLOCK_CIPHER_func_cfb(cname, cprefix, cbits, kstruct, ksched)  \\",
          "190: static int cname##_cfb##cbits##_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out, const unsigned char *in, size_t inl) \\",
          "191: {\\",
          "206: }",
          "208: #define BLOCK_CIPHER_all_funcs(cname, cprefix, cbits, kstruct, ksched) \\",
          "",
          "[Removed Lines]",
          "192:         size_t chunk=EVP_MAXCHUNK;\\",
          "193:         if (cbits==1)  chunk>>=3;\\",
          "194:         if (inl<chunk) chunk=inl;\\",
          "195:         while(inl && inl>=chunk)\\",
          "196:             {\\",
          "197:             int num = EVP_CIPHER_CTX_num(ctx);\\",
          "198:             cprefix##_cfb##cbits##_encrypt(in, out, (long)((cbits==1) && !EVP_CIPHER_CTX_test_flags(ctx, EVP_CIPH_FLAG_LENGTH_BITS) ?inl*8:inl), &EVP_C_DATA(kstruct,ctx)->ksched, EVP_CIPHER_CTX_iv_noconst(ctx), &num, EVP_CIPHER_CTX_encrypting(ctx)); \\",
          "199:             EVP_CIPHER_CTX_set_num(ctx, num);\\",
          "200:             inl-=chunk;\\",
          "201:             in +=chunk;\\",
          "202:             out+=chunk;\\",
          "203:             if(inl<chunk) chunk=inl;\\",
          "204:             }\\",
          "205:         return 1;\\",
          "",
          "[Added Lines]",
          "192:     size_t chunk = EVP_MAXCHUNK;\\",
          "193:     if (cbits == 1)  chunk >>= 3;\\",
          "194:     if (inl < chunk) chunk = inl;\\",
          "195:     while (inl && inl >= chunk)\\",
          "196:     {\\",
          "197:         int num = EVP_CIPHER_CTX_num(ctx);\\",
          "198:         cprefix##_cfb##cbits##_encrypt(in, out, (long) \\",
          "199:             ((cbits == 1) \\",
          "200:                 && !EVP_CIPHER_CTX_test_flags(ctx, EVP_CIPH_FLAG_LENGTH_BITS) \\",
          "201:                 ? inl*8 : inl), \\",
          "202:             &EVP_C_DATA(kstruct, ctx)->ksched, EVP_CIPHER_CTX_iv_noconst(ctx),\\",
          "203:             &num, EVP_CIPHER_CTX_encrypting(ctx));\\",
          "204:         EVP_CIPHER_CTX_set_num(ctx, num);\\",
          "205:         inl -= chunk;\\",
          "206:         in += chunk;\\",
          "207:         out += chunk;\\",
          "208:         if (inl < chunk) chunk = inl;\\",
          "209:     }\\",
          "210:     return 1;\\",
          "",
          "---------------"
        ],
        "crypto/o_fopen.c||crypto/o_fopen.c": [
          "File: crypto/o_fopen.c -> crypto/o_fopen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:             if (newname == NULL)",
          "70:                 return NULL;",
          "74:                 if (lastchar == '/' && filename[0] == '.'",
          "75:                     && filename[1] != '.' && filename[1] != '/') {",
          "",
          "[Removed Lines]",
          "72:             for(iterator = newname, lastchar = '\\0';",
          "",
          "[Added Lines]",
          "72:             for (iterator = newname, lastchar = '\\0';",
          "",
          "---------------"
        ],
        "crypto/x509/x_x509a.c||crypto/x509/x_x509a.c": [
          "File: crypto/x509/x_x509a.c -> crypto/x509/x_x509a.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     }",
          "77:     if ((aux = aux_get(x)) == NULL)",
          "78:         return 0;",
          "80:         && (aux->keyid = ASN1_OCTET_STRING_new()) == NULL)",
          "81:         return 0;",
          "82:     return ASN1_STRING_set(aux->keyid, id, len);",
          "",
          "[Removed Lines]",
          "79:     if (aux->keyid ==NULL",
          "",
          "[Added Lines]",
          "79:     if (aux->keyid == NULL",
          "",
          "---------------"
        ],
        "include/openssl/engine.h||include/openssl/engine.h": [
          "File: include/openssl/engine.h -> include/openssl/engine.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: # define IMPLEMENT_DYNAMIC_CHECK_FN() \\",
          "697:         OPENSSL_EXPORT unsigned long v_check(unsigned long v); \\",
          "698:         OPENSSL_EXPORT unsigned long v_check(unsigned long v) { \\",
          "700:                 return 0; }",
          "",
          "[Removed Lines]",
          "699:                 if(v >= OSSL_DYNAMIC_OLDEST) return OSSL_DYNAMIC_VERSION; \\",
          "",
          "[Added Lines]",
          "699:                 if (v >= OSSL_DYNAMIC_OLDEST) return OSSL_DYNAMIC_VERSION; \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:         int bind_engine(ENGINE *e, const char *id, const dynamic_fns *fns); \\",
          "725:         OPENSSL_EXPORT \\",
          "726:         int bind_engine(ENGINE *e, const char *id, const dynamic_fns *fns) { \\",
          "731:         skip_cbs: \\",
          "",
          "[Removed Lines]",
          "727:                 if(ENGINE_get_static_state() == fns->static_state) goto skip_cbs; \\",
          "728:                 CRYPTO_set_mem_functions(fns->mem_fns.malloc_fn, \\",
          "729:                                          fns->mem_fns.realloc_fn, \\",
          "730:                                          fns->mem_fns.free_fn); \\",
          "732:                 if(!fn(e,id)) return 0; \\",
          "733:                 return 1; }",
          "",
          "[Added Lines]",
          "727:             if (ENGINE_get_static_state() == fns->static_state) goto skip_cbs; \\",
          "728:             CRYPTO_set_mem_functions(fns->mem_fns.malloc_fn, \\",
          "729:                                      fns->mem_fns.realloc_fn, \\",
          "730:                                      fns->mem_fns.free_fn); \\",
          "732:             if (!fn(e, id)) return 0; \\",
          "733:             return 1; }",
          "",
          "---------------"
        ],
        "ssl/d1_lib.c||ssl/d1_lib.c": [
          "File: ssl/d1_lib.c -> ssl/d1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:     rbio = SSL_get_rbio(s);",
          "434:     wbio = SSL_get_wbio(s);",
          "437:         SSLerr(SSL_F_DTLSV1_LISTEN, SSL_R_BIO_NOT_SET);",
          "438:         return -1;",
          "439:     }",
          "",
          "[Removed Lines]",
          "436:     if(!rbio || !wbio) {",
          "",
          "[Added Lines]",
          "436:     if (!rbio || !wbio) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:         n = BIO_read(rbio, buf, SSL3_RT_MAX_PLAIN_LENGTH);",
          "489:         if (n <= 0) {",
          "492:                 goto end;",
          "493:             }",
          "",
          "[Removed Lines]",
          "490:             if(BIO_should_retry(rbio)) {",
          "",
          "[Added Lines]",
          "490:             if (BIO_should_retry(rbio)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "581:         }",
          "585:             SSLerr(SSL_F_DTLSV1_LISTEN, SSL_R_INVALID_SEQUENCE_NUMBER);",
          "586:             goto end;",
          "587:         }",
          "",
          "[Removed Lines]",
          "584:         if(msgseq > 2) {",
          "",
          "[Added Lines]",
          "584:         if (msgseq > 2) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "756:                 (void)BIO_dgram_set_peer(wbio, tmpclient);",
          "757:             }",
          "758:             BIO_ADDR_free(tmpclient);",
          "759:             tmpclient = NULL;",
          "761:             if (BIO_write(wbio, buf, reclen) < (int)reclen) {",
          "",
          "[Removed Lines]",
          "755:             if(BIO_dgram_get_peer(rbio, tmpclient) > 0) {",
          "762:                 if(BIO_should_retry(wbio)) {",
          "",
          "[Added Lines]",
          "755:             if (BIO_dgram_get_peer(rbio, tmpclient) > 0) {",
          "762:                 if (BIO_should_retry(wbio)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "770:             }",
          "772:             if (BIO_flush(wbio) <= 0) {",
          "",
          "[Removed Lines]",
          "773:                 if(BIO_should_retry(wbio)) {",
          "",
          "[Added Lines]",
          "773:                 if (BIO_should_retry(wbio)) {",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
          "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     rl->wpend_buf = NULL;",
          "62:     SSL3_BUFFER_clear(&rl->rbuf);",
          "64:         SSL3_BUFFER_clear(&rl->wbuf[pipes]);",
          "65:     rl->numwpipes = 0;",
          "66:     rl->numrpipes = 0;",
          "",
          "[Removed Lines]",
          "63:     for(pipes = 0; pipes < rl->numwpipes; pipes++)",
          "",
          "[Added Lines]",
          "63:     for (pipes = 0; pipes < rl->numwpipes; pipes++)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1186:         goto f_err;",
          "1187:     }",
          "1190:             && (s->server || rr->type != SSL3_RT_ALERT)) {",
          "",
          "[Removed Lines]",
          "1189:     if(s->method->version == TLS_ANY_VERSION",
          "",
          "[Added Lines]",
          "1189:     if (s->method->version == TLS_ANY_VERSION",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:             rr[num_recs].input =",
          "296:                 &(RECORD_LAYER_get_packet(&s->rlayer)[SSL2_RT_HEADER_LENGTH]);",
          "297:         } else {",
          "",
          "[Removed Lines]",
          "294:         if(rr[num_recs].rec_version == SSL2_VERSION) {",
          "",
          "[Added Lines]",
          "294:         if (rr[num_recs].rec_version == SSL2_VERSION) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "703:         bs = EVP_CIPHER_block_size(EVP_CIPHER_CTX_cipher(ds));",
          "705:         if (n_recs > 1) {",
          "",
          "[Removed Lines]",
          "706:             if(!(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "707:                                   & EVP_CIPH_FLAG_PIPELINE)) {",
          "",
          "[Added Lines]",
          "706:             if (!(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "707:                                     & EVP_CIPH_FLAG_PIPELINE)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "777:             unsigned char *data[SSL_MAX_PIPELINES];",
          "781:                 data[ctr] = recs[ctr].data;",
          "782:             }",
          "783:             if (EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS,",
          "",
          "[Removed Lines]",
          "780:             for(ctr = 0; ctr < n_recs; ctr++) {",
          "",
          "[Added Lines]",
          "780:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "785:                 SSLerr(SSL_F_TLS1_ENC, SSL_R_PIPELINE_FAILURE);",
          "786:             }",
          "789:                 data[ctr] = recs[ctr].input;",
          "790:             }",
          "791:             if (EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_INPUT_BUFS,",
          "",
          "[Removed Lines]",
          "788:             for(ctr = 0; ctr < n_recs; ctr++) {",
          "",
          "[Added Lines]",
          "788:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1394: int SSL_waiting_for_async(SSL *s)",
          "1395: {",
          "1397:         return 1;",
          "1399:     return 0;",
          "",
          "[Removed Lines]",
          "1396:     if(s->job)",
          "",
          "[Added Lines]",
          "1396:     if (s->job)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1452:         if (s->waitctx == NULL)",
          "1453:             return -1;",
          "1454:     }",
          "1456:         sizeof(struct ssl_async_args))) {",
          "1457:     case ASYNC_ERR:",
          "1458:         s->rwstate = SSL_NOTHING;",
          "",
          "[Removed Lines]",
          "1455:     switch(ASYNC_start_job(&s->job, s->waitctx, &ret, func, args,",
          "",
          "[Added Lines]",
          "1455:     switch (ASYNC_start_job(&s->job, s->waitctx, &ret, func, args,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1509:         return (0);",
          "1510:     }",
          "1513:         struct ssl_async_args args;",
          "1515:         args.s = s;",
          "",
          "[Removed Lines]",
          "1512:     if((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "[Added Lines]",
          "1512:     if ((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1534:     if (s->shutdown & SSL_RECEIVED_SHUTDOWN) {",
          "1535:         return (0);",
          "1536:     }",
          "1538:         struct ssl_async_args args;",
          "1540:         args.s = s;",
          "",
          "[Removed Lines]",
          "1537:     if((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "[Added Lines]",
          "1537:     if ((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1562:         return (-1);",
          "1563:     }",
          "1566:         struct ssl_async_args args;",
          "1568:         args.s = s;",
          "",
          "[Removed Lines]",
          "1565:     if((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "[Added Lines]",
          "1565:     if ((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1592:     }",
          "1594:     if (!SSL_in_init(s)) {",
          "1596:             struct ssl_async_args args;",
          "1598:             args.s = s;",
          "",
          "[Removed Lines]",
          "1595:         if((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "[Added Lines]",
          "1595:         if ((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2983:     s->method->ssl_renegotiate_check(s);",
          "2985:     if (SSL_in_init(s) || SSL_in_before(s)) {",
          "2987:             struct ssl_async_args args;",
          "2989:             args.s = s;",
          "",
          "[Removed Lines]",
          "2986:         if((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "[Added Lines]",
          "2986:         if ((s->mode & SSL_MODE_ASYNC) && ASYNC_get_current_job() == NULL) {",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     }",
          "175: #endif",
          "178:         dest->ciphers = sk_SSL_CIPHER_dup(src->ciphers);",
          "179:         if (dest->ciphers == NULL)",
          "180:             goto err;",
          "",
          "[Removed Lines]",
          "177:     if(src->ciphers != NULL) {",
          "",
          "[Added Lines]",
          "177:     if (src->ciphers != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:     if (ticket != 0) {",
          "212:         dest->tlsext_tick = OPENSSL_memdup(src->tlsext_tick, src->tlsext_ticklen);",
          "214:             goto err;",
          "215:     } else {",
          "216:         dest->tlsext_tick_lifetime_hint = 0;",
          "",
          "[Removed Lines]",
          "213:         if(dest->tlsext_tick == NULL)",
          "",
          "[Added Lines]",
          "213:         if (dest->tlsext_tick == NULL)",
          "",
          "---------------"
        ],
        "ssl/statem/statem.c||ssl/statem/statem.c": [
          "File: ssl/statem/statem.c -> ssl/statem/statem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:         st->read_state_first_init = 1;",
          "381:     }",
          "385:             ssret = read_state_machine(s);",
          "386:             if (ssret == SUB_STATE_FINISHED) {",
          "387:                 st->state = MSG_FLOW_WRITING;",
          "",
          "[Removed Lines]",
          "383:     while(st->state != MSG_FLOW_FINISHED) {",
          "384:         if(st->state == MSG_FLOW_READING) {",
          "",
          "[Added Lines]",
          "383:     while (st->state != MSG_FLOW_FINISHED) {",
          "384:         if (st->state == MSG_FLOW_READING) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485:     cb = get_callback(s);",
          "488:         transition = ossl_statem_server_read_transition;",
          "489:         process_message = ossl_statem_server_process_message;",
          "490:         max_message_size = ossl_statem_server_max_message_size;",
          "",
          "[Removed Lines]",
          "487:     if(s->server) {",
          "",
          "[Added Lines]",
          "487:     if (s->server) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "501:         st->read_state_first_init = 0;",
          "502:     }",
          "506:         case READ_STATE_HEADER:",
          "508:             if (SSL_IS_DTLS(s)) {",
          "",
          "[Removed Lines]",
          "504:     while(1) {",
          "505:         switch(st->read_state) {",
          "",
          "[Added Lines]",
          "504:     while (1) {",
          "505:         switch (st->read_state) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "534:                 ossl_statem_set_error(s);",
          "535:                 return SUB_STATE_ERROR;",
          "536:             }",
          "",
          "[Removed Lines]",
          "533:             if(!transition(s, mt)) {",
          "",
          "[Added Lines]",
          "533:             if (!transition(s, mt)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "587:         case READ_STATE_POST_PROCESS:",
          "588:             st->read_state_work = post_process_message(s, st->read_state_work);",
          "590:             default:",
          "591:                 return SUB_STATE_ERROR;",
          "",
          "[Removed Lines]",
          "589:             switch(st->read_state_work) {",
          "",
          "[Added Lines]",
          "589:             switch (st->read_state_work) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "684:     cb = get_callback(s);",
          "687:         transition = ossl_statem_server_write_transition;",
          "688:         pre_work = ossl_statem_server_pre_work;",
          "689:         post_work = ossl_statem_server_post_work;",
          "",
          "[Removed Lines]",
          "686:     if(s->server) {",
          "",
          "[Added Lines]",
          "686:     if (s->server) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "695:         construct_message = ossl_statem_client_construct_message;",
          "696:     }",
          "700:         case WRITE_STATE_TRANSITION:",
          "701:             if (cb != NULL) {",
          "",
          "[Removed Lines]",
          "698:     while(1) {",
          "699:         switch(st->write_state) {",
          "",
          "[Added Lines]",
          "698:     while (1) {",
          "699:         switch (st->write_state) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "705:                 else",
          "706:                     cb(s, SSL_CB_CONNECT_LOOP, 1);",
          "707:             }",
          "709:             case WRITE_TRAN_CONTINUE:",
          "710:                 st->write_state = WRITE_STATE_PRE_WORK;",
          "711:                 st->write_state_work = WORK_MORE_A;",
          "",
          "[Removed Lines]",
          "708:             switch(transition(s)) {",
          "",
          "[Added Lines]",
          "708:             switch (transition(s)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "721:             break;",
          "723:         case WRITE_STATE_PRE_WORK:",
          "725:             default:",
          "726:                 return SUB_STATE_ERROR;",
          "",
          "[Removed Lines]",
          "724:             switch(st->write_state_work = pre_work(s, st->write_state_work)) {",
          "",
          "[Added Lines]",
          "724:             switch (st->write_state_work = pre_work(s, st->write_state_work)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "732:             case WORK_FINISHED_STOP:",
          "733:                 return SUB_STATE_END_HANDSHAKE;",
          "734:             }",
          "736:                 return SUB_STATE_ERROR;",
          "",
          "[Removed Lines]",
          "735:             if(construct_message(s) == 0)",
          "",
          "[Added Lines]",
          "735:             if (construct_message(s) == 0)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "752:         case WRITE_STATE_POST_WORK:",
          "754:             default:",
          "755:                 return SUB_STATE_ERROR;",
          "",
          "[Removed Lines]",
          "753:             switch(st->write_state_work = post_work(s, st->write_state_work)) {",
          "",
          "[Added Lines]",
          "753:             switch (st->write_state_work = post_work(s, st->write_state_work)) {",
          "",
          "---------------"
        ],
        "ssl/statem/statem_dtls.c||ssl/statem/statem_dtls.c": [
          "File: ssl/statem/statem_dtls.c -> ssl/statem/statem_dtls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:         return 0;",
          "730:     }",
          "732:         if (wire[0] != SSL3_MT_CCS) {",
          "733:             al = SSL_AD_UNEXPECTED_MESSAGE;",
          "734:             SSLerr(SSL_F_DTLS_GET_REASSEMBLED_MESSAGE,",
          "",
          "[Removed Lines]",
          "731:     if(recvd_type == SSL3_RT_CHANGE_CIPHER_SPEC) {",
          "",
          "[Added Lines]",
          "731:     if (recvd_type == SSL3_RT_CHANGE_CIPHER_SPEC) {",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:     s->s3->tmp.message_type = *(p++);",
          "413:         l = RECORD_LAYER_get_rrec_length(&s->rlayer)",
          "414:             + SSL3_HM_HEADER_LENGTH;",
          "415:         if (l && !BUF_MEM_grow_clean(s->init_buf, (int)l)) {",
          "",
          "[Removed Lines]",
          "404:     if(RECORD_LAYER_is_sslv2_record(&s->rlayer)) {",
          "",
          "[Added Lines]",
          "404:     if (RECORD_LAYER_is_sslv2_record(&s->rlayer)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482: #endif",
          "486:         if (!ssl3_finish_mac(s, (unsigned char *)s->init_buf->data,",
          "487:                              s->init_num)) {",
          "488:             SSLerr(SSL_F_TLS_GET_MESSAGE_BODY, ERR_R_EVP_LIB);",
          "",
          "[Removed Lines]",
          "485:     if(RECORD_LAYER_is_sslv2_record(&s->rlayer)) {",
          "",
          "[Added Lines]",
          "484:     if (RECORD_LAYER_is_sslv2_record(&s->rlayer)) {",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: {",
          "82:     OSSL_STATEM *st = &s->statem;",
          "85:     case TLS_ST_BEFORE:",
          "86:     case DTLS_ST_SW_HELLO_VERIFY_REQUEST:",
          "87:         if (mt == SSL3_MT_CLIENT_HELLO) {",
          "",
          "[Removed Lines]",
          "84:     switch(st->hand_state) {",
          "",
          "[Added Lines]",
          "84:     switch (st->hand_state) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311: {",
          "312:     OSSL_STATEM *st = &s->statem;",
          "371:                 st->hand_state = TLS_ST_SW_KEY_EXCH;",
          "378:                 st->hand_state = TLS_ST_SW_CERT_REQ;",
          "380:             }",
          "385:             return WRITE_TRAN_CONTINUE;",
          "400:             return WRITE_TRAN_CONTINUE;",
          "404:             return WRITE_TRAN_CONTINUE;",
          "414:             st->hand_state = TLS_ST_OK;",
          "415:             ossl_statem_set_in_init(s, 0);",
          "416:             return WRITE_TRAN_CONTINUE;",
          "421:     }",
          "422: }",
          "",
          "[Removed Lines]",
          "314:     switch(st->hand_state) {",
          "315:         case TLS_ST_BEFORE:",
          "317:             return WRITE_TRAN_FINISHED;",
          "319:         case TLS_ST_OK:",
          "321:             st->hand_state = TLS_ST_SW_HELLO_REQ;",
          "322:             return WRITE_TRAN_CONTINUE;",
          "324:         case TLS_ST_SW_HELLO_REQ:",
          "325:             st->hand_state = TLS_ST_OK;",
          "326:             ossl_statem_set_in_init(s, 0);",
          "327:             return WRITE_TRAN_CONTINUE;",
          "329:         case TLS_ST_SR_CLNT_HELLO:",
          "330:             if (SSL_IS_DTLS(s) && !s->d1->cookie_verified",
          "331:                     && (SSL_get_options(s) & SSL_OP_COOKIE_EXCHANGE))",
          "332:                 st->hand_state = DTLS_ST_SW_HELLO_VERIFY_REQUEST;",
          "333:             else",
          "334:                 st->hand_state = TLS_ST_SW_SRVR_HELLO;",
          "335:             return WRITE_TRAN_CONTINUE;",
          "337:         case DTLS_ST_SW_HELLO_VERIFY_REQUEST:",
          "338:             return WRITE_TRAN_FINISHED;",
          "340:         case TLS_ST_SW_SRVR_HELLO:",
          "341:             if (s->hit) {",
          "342:                 if (s->tlsext_ticket_expected)",
          "343:                     st->hand_state = TLS_ST_SW_SESSION_TICKET;",
          "344:                 else",
          "345:                     st->hand_state = TLS_ST_SW_CHANGE;",
          "346:             } else {",
          "349:                 if (!(s->s3->tmp.new_cipher->algorithm_auth &",
          "350:                      (SSL_aNULL | SSL_aSRP | SSL_aPSK))) {",
          "351:                     st->hand_state = TLS_ST_SW_CERT;",
          "352:                 } else if (send_server_key_exchange(s)) {",
          "353:                     st->hand_state = TLS_ST_SW_KEY_EXCH;",
          "354:                 } else if (send_certificate_request(s)) {",
          "355:                     st->hand_state = TLS_ST_SW_CERT_REQ;",
          "356:                 } else {",
          "357:                     st->hand_state = TLS_ST_SW_SRVR_DONE;",
          "358:                 }",
          "359:             }",
          "360:             return WRITE_TRAN_CONTINUE;",
          "362:         case TLS_ST_SW_CERT:",
          "363:             if (s->tlsext_status_expected) {",
          "364:                 st->hand_state = TLS_ST_SW_CERT_STATUS;",
          "365:                 return WRITE_TRAN_CONTINUE;",
          "366:             }",
          "369:         case TLS_ST_SW_CERT_STATUS:",
          "370:             if (send_server_key_exchange(s)) {",
          "372:                 return WRITE_TRAN_CONTINUE;",
          "373:             }",
          "376:         case TLS_ST_SW_KEY_EXCH:",
          "377:             if (send_certificate_request(s)) {",
          "379:                 return WRITE_TRAN_CONTINUE;",
          "383:         case TLS_ST_SW_CERT_REQ:",
          "384:             st->hand_state = TLS_ST_SW_SRVR_DONE;",
          "387:         case TLS_ST_SW_SRVR_DONE:",
          "388:             return WRITE_TRAN_FINISHED;",
          "390:         case TLS_ST_SR_FINISHED:",
          "391:             if (s->hit) {",
          "392:                 st->hand_state = TLS_ST_OK;",
          "393:                 ossl_statem_set_in_init(s, 0);",
          "394:                 return WRITE_TRAN_CONTINUE;",
          "395:             } else if (s->tlsext_ticket_expected) {",
          "396:                 st->hand_state = TLS_ST_SW_SESSION_TICKET;",
          "397:             } else {",
          "398:                 st->hand_state = TLS_ST_SW_CHANGE;",
          "399:             }",
          "402:         case TLS_ST_SW_SESSION_TICKET:",
          "403:             st->hand_state = TLS_ST_SW_CHANGE;",
          "406:         case TLS_ST_SW_CHANGE:",
          "407:             st->hand_state = TLS_ST_SW_FINISHED;",
          "408:             return WRITE_TRAN_CONTINUE;",
          "410:         case TLS_ST_SW_FINISHED:",
          "411:             if (s->hit) {",
          "412:                 return WRITE_TRAN_FINISHED;",
          "413:             }",
          "418:         default:",
          "420:             return WRITE_TRAN_ERROR;",
          "",
          "[Added Lines]",
          "314:     switch (st->hand_state) {",
          "315:     case TLS_ST_BEFORE:",
          "317:         return WRITE_TRAN_FINISHED;",
          "319:     case TLS_ST_OK:",
          "321:         st->hand_state = TLS_ST_SW_HELLO_REQ;",
          "322:         return WRITE_TRAN_CONTINUE;",
          "324:     case TLS_ST_SW_HELLO_REQ:",
          "325:         st->hand_state = TLS_ST_OK;",
          "326:         ossl_statem_set_in_init(s, 0);",
          "327:         return WRITE_TRAN_CONTINUE;",
          "329:     case TLS_ST_SR_CLNT_HELLO:",
          "330:         if (SSL_IS_DTLS(s) && !s->d1->cookie_verified",
          "331:                 && (SSL_get_options(s) & SSL_OP_COOKIE_EXCHANGE))",
          "332:             st->hand_state = DTLS_ST_SW_HELLO_VERIFY_REQUEST;",
          "333:         else",
          "334:             st->hand_state = TLS_ST_SW_SRVR_HELLO;",
          "335:         return WRITE_TRAN_CONTINUE;",
          "337:     case DTLS_ST_SW_HELLO_VERIFY_REQUEST:",
          "338:         return WRITE_TRAN_FINISHED;",
          "340:     case TLS_ST_SW_SRVR_HELLO:",
          "341:         if (s->hit) {",
          "342:             if (s->tlsext_ticket_expected)",
          "343:                 st->hand_state = TLS_ST_SW_SESSION_TICKET;",
          "344:             else",
          "345:                 st->hand_state = TLS_ST_SW_CHANGE;",
          "346:         } else {",
          "349:             if (!(s->s3->tmp.new_cipher->algorithm_auth &",
          "350:                  (SSL_aNULL | SSL_aSRP | SSL_aPSK))) {",
          "351:                 st->hand_state = TLS_ST_SW_CERT;",
          "352:             } else if (send_server_key_exchange(s)) {",
          "354:             } else if (send_certificate_request(s)) {",
          "356:             } else {",
          "357:                 st->hand_state = TLS_ST_SW_SRVR_DONE;",
          "359:         }",
          "360:         return WRITE_TRAN_CONTINUE;",
          "362:     case TLS_ST_SW_CERT:",
          "363:         if (s->tlsext_status_expected) {",
          "364:             st->hand_state = TLS_ST_SW_CERT_STATUS;",
          "366:         }",
          "369:     case TLS_ST_SW_CERT_STATUS:",
          "370:         if (send_server_key_exchange(s)) {",
          "371:             st->hand_state = TLS_ST_SW_KEY_EXCH;",
          "373:         }",
          "376:     case TLS_ST_SW_KEY_EXCH:",
          "377:         if (send_certificate_request(s)) {",
          "378:             st->hand_state = TLS_ST_SW_CERT_REQ;",
          "380:         }",
          "383:     case TLS_ST_SW_CERT_REQ:",
          "384:         st->hand_state = TLS_ST_SW_SRVR_DONE;",
          "385:         return WRITE_TRAN_CONTINUE;",
          "387:     case TLS_ST_SW_SRVR_DONE:",
          "388:         return WRITE_TRAN_FINISHED;",
          "390:     case TLS_ST_SR_FINISHED:",
          "391:         if (s->hit) {",
          "395:         } else if (s->tlsext_ticket_expected) {",
          "396:             st->hand_state = TLS_ST_SW_SESSION_TICKET;",
          "397:         } else {",
          "398:             st->hand_state = TLS_ST_SW_CHANGE;",
          "399:         }",
          "400:         return WRITE_TRAN_CONTINUE;",
          "402:     case TLS_ST_SW_SESSION_TICKET:",
          "403:         st->hand_state = TLS_ST_SW_CHANGE;",
          "404:         return WRITE_TRAN_CONTINUE;",
          "406:     case TLS_ST_SW_CHANGE:",
          "407:         st->hand_state = TLS_ST_SW_FINISHED;",
          "408:         return WRITE_TRAN_CONTINUE;",
          "410:     case TLS_ST_SW_FINISHED:",
          "411:         if (s->hit) {",
          "412:             return WRITE_TRAN_FINISHED;",
          "413:         }",
          "414:         st->hand_state = TLS_ST_OK;",
          "415:         ossl_statem_set_in_init(s, 0);",
          "416:         return WRITE_TRAN_CONTINUE;",
          "418:     default:",
          "420:         return WRITE_TRAN_ERROR;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429: {",
          "430:     OSSL_STATEM *st = &s->statem;",
          "433:     case TLS_ST_SW_HELLO_REQ:",
          "434:         s->shutdown = 0;",
          "435:         if (SSL_IS_DTLS(s))",
          "",
          "[Removed Lines]",
          "432:     switch(st->hand_state) {",
          "",
          "[Added Lines]",
          "432:     switch (st->hand_state) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "511:     s->init_num = 0;",
          "514:     case TLS_ST_SW_HELLO_REQ:",
          "515:         if (statem_flush(s) != 1)",
          "516:             return WORK_MORE_A;",
          "",
          "[Removed Lines]",
          "513:     switch(st->hand_state) {",
          "",
          "[Added Lines]",
          "513:     switch (st->hand_state) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "621: {",
          "622:     OSSL_STATEM *st = &s->statem;",
          "625:     case DTLS_ST_SW_HELLO_VERIFY_REQUEST:",
          "626:         return dtls_construct_hello_verify_request(s);",
          "",
          "[Removed Lines]",
          "624:     switch(st->hand_state) {",
          "",
          "[Added Lines]",
          "624:     switch (st->hand_state) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "698: {",
          "699:     OSSL_STATEM *st = &s->statem;",
          "702:     case TLS_ST_SR_CLNT_HELLO:",
          "703:         return CLIENT_HELLO_MAX_LENGTH;",
          "",
          "[Removed Lines]",
          "701:     switch(st->hand_state) {",
          "",
          "[Added Lines]",
          "701:     switch (st->hand_state) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "737: {",
          "738:     OSSL_STATEM *st = &s->statem;",
          "741:     case TLS_ST_SR_CLNT_HELLO:",
          "742:         return tls_process_client_hello(s, pkt);",
          "",
          "[Removed Lines]",
          "740:     switch(st->hand_state) {",
          "",
          "[Added Lines]",
          "740:     switch (st->hand_state) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "777: {",
          "778:     OSSL_STATEM *st = &s->statem;",
          "781:     case TLS_ST_SR_CLNT_HELLO:",
          "782:         return tls_post_process_client_hello(s, wst);",
          "",
          "[Removed Lines]",
          "780:     switch(st->hand_state) {",
          "",
          "[Added Lines]",
          "780:     switch (st->hand_state) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "972:             al = SSL_AD_DECODE_ERROR;",
          "973:             SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);",
          "974:             goto f_err;",
          "",
          "[Removed Lines]",
          "971:         if(!PACKET_get_net_2(pkt, (unsigned int *)&s->client_version)) {",
          "",
          "[Added Lines]",
          "971:         if (!PACKET_get_net_2(pkt, (unsigned int *)&s->client_version)) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3237:     if ((skp == NULL) || (*skp == NULL)) {",
          "3240:             SSLerr(SSL_F_SSL_BYTES_TO_CIPHER_LIST, ERR_R_MALLOC_FAILURE);",
          "3242:             return NULL;",
          "",
          "[Removed Lines]",
          "3239:         if(sk == NULL) {",
          "",
          "[Added Lines]",
          "3239:         if (sk == NULL) {",
          "",
          "---------------"
        ],
        "test/asynctest.c||test/asynctest.c": [
          "File: test/asynctest.c -> test/asynctest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     waitctx = ASYNC_get_wait_ctx(job);",
          "57:     if (waitctx == NULL)",
          "58:         return 0;",
          "60:         return 0;",
          "61:     ASYNC_pause_job();",
          "",
          "[Removed Lines]",
          "59:     if(!ASYNC_WAIT_CTX_set_wait_fd(waitctx, waitctx, MAGIC_WAIT_FD, NULL, NULL))",
          "",
          "[Added Lines]",
          "59:     if (!ASYNC_WAIT_CTX_set_wait_fd(waitctx, waitctx, MAGIC_WAIT_FD, NULL, NULL))",
          "",
          "---------------"
        ],
        "test/verify_extra_test.c||test/verify_extra_test.c": [
          "File: test/verify_extra_test.c -> test/verify_extra_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     i = X509_verify_cert(sctx);",
          "127:         ret = 1;",
          "128:     }",
          "",
          "[Removed Lines]",
          "125:     if(i == 0 && X509_STORE_CTX_get_error(sctx) == X509_V_ERR_INVALID_CA) {",
          "",
          "[Added Lines]",
          "125:     if (i == 0 && X509_STORE_CTX_get_error(sctx) == X509_V_ERR_INVALID_CA) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c175308407858afff3fc8c2e5e085d94d12edc7d",
      "candidate_info": {
        "commit_hash": "c175308407858afff3fc8c2e5e085d94d12edc7d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c175308407858afff3fc8c2e5e085d94d12edc7d",
        "files": [
          "crypto/bn/bn.h",
          "crypto/bn/bn_print.c"
        ],
        "message": "Fix BN_hex2bn/BN_dec2bn NULL ptr/heap corruption\n\nIn the BN_hex2bn function the number of hex digits is calculated using\nan int value |i|. Later |bn_expand| is called with a value of |i * 4|.\nFor large values of |i| this can result in |bn_expand| not allocating any\nmemory because |i * 4| is negative. This leaves ret->d as NULL leading\nto a subsequent NULL ptr deref. For very large values of |i|, the\ncalculation |i * 4| could be a positive value smaller than |i|. In this\ncase memory is allocated to ret->d, but it is insufficiently sized\nleading to heap corruption. A similar issue exists in BN_dec2bn.\n\nThis could have security consequences if BN_hex2bn/BN_dec2bn is ever\ncalled by user applications with very large untrusted hex/dec data. This is\nanticipated to be a rare occurrence.\n\nAll OpenSSL internal usage of this function uses data that is not expected\nto be untrusted, e.g. config file data or application command line\narguments. If user developed applications generate config file data based\non untrusted data then it is possible that this could also lead to security\nconsequences. This is also anticipated to be a rare.\n\nIssue reported by Guido Vranken.\n\nCVE-2016-0797\n\nReviewed-by: Andy Polyakov <appro@openssl.org>",
        "before_after_code_files": [
          "crypto/bn/bn.h||crypto/bn/bn.h",
          "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
          ],
          "candidate": [
            "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/bn.h||crypto/bn/bn.h": [
          "File: crypto/bn/bn.h -> crypto/bn/bn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: #ifndef HEADER_BN_H",
          "126: # define HEADER_BN_H",
          "128: # include <openssl/e_os2.h>",
          "129: # ifndef OPENSSL_NO_FP_API",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: # include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "726: # define bn_wexpand(a,words) (((words) <= (a)->dmax)?(a):bn_expand2((a),(words)))",
          "727: BIGNUM *bn_expand2(BIGNUM *a, int words);",
          "728: # ifndef OPENSSL_NO_DEPRECATED",
          "",
          "[Removed Lines]",
          "724: # define bn_expand(a,bits) ((((((bits+BN_BITS2-1))/BN_BITS2)) <= (a)->dmax)?\\",
          "725:         (a):bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2))",
          "",
          "[Added Lines]",
          "725: # define bn_expand(a,bits) \\",
          "726:     ( \\",
          "727:         bits > (INT_MAX - BN_BITS2 + 1) ? \\",
          "728:             NULL \\",
          "729:         : \\",
          "730:             (((bits+BN_BITS2-1)/BN_BITS2) <= (a)->dmax) ? \\",
          "731:                 (a) \\",
          "732:             : \\",
          "733:                 bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2) \\",
          "734:     )",
          "",
          "---------------"
        ],
        "crypto/bn/bn_print.c||crypto/bn/bn_print.c": [
          "File: crypto/bn/bn_print.c -> crypto/bn/bn_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include <stdio.h>",
          "60: #include <ctype.h>",
          "61: #include \"cryptlib.h\"",
          "62: #include <openssl/buffer.h>",
          "63: #include \"bn_lcl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         a++;",
          "190:     }",
          "194:     num = i + neg;",
          "195:     if (bn == NULL)",
          "",
          "[Removed Lines]",
          "192:     for (i = 0; isxdigit((unsigned char)a[i]); i++) ;",
          "",
          "[Added Lines]",
          "193:     for (i = 0; i <= (INT_MAX/4) && isxdigit((unsigned char)a[i]); i++)",
          "194:         continue;",
          "196:     if (i > INT_MAX/4)",
          "197:         goto err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:         a++;",
          "261:     }",
          "265:     num = i + neg;",
          "266:     if (bn == NULL)",
          "",
          "[Removed Lines]",
          "263:     for (i = 0; isdigit((unsigned char)a[i]); i++) ;",
          "",
          "[Added Lines]",
          "268:     for (i = 0; i <= (INT_MAX/4) && isdigit((unsigned char)a[i]); i++)",
          "269:         continue;",
          "271:     if (i > INT_MAX/4)",
          "272:         goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f651326a5cbec5ca7cf0bad0205d4c87dc8c2d0",
      "candidate_info": {
        "commit_hash": "8f651326a5cbec5ca7cf0bad0205d4c87dc8c2d0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8f651326a5cbec5ca7cf0bad0205d4c87dc8c2d0",
        "files": [
          "crypto/bn/bn.h",
          "crypto/bn/bn_print.c"
        ],
        "message": "Fix BN_hex2bn/BN_dec2bn NULL ptr/heap corruption\n\nIn the BN_hex2bn function the number of hex digits is calculated using\nan int value |i|. Later |bn_expand| is called with a value of |i * 4|.\nFor large values of |i| this can result in |bn_expand| not allocating any\nmemory because |i * 4| is negative. This leaves ret->d as NULL leading\nto a subsequent NULL ptr deref. For very large values of |i|, the\ncalculation |i * 4| could be a positive value smaller than |i|. In this\ncase memory is allocated to ret->d, but it is insufficiently sized\nleading to heap corruption. A similar issue exists in BN_dec2bn.\n\nThis could have security consequences if BN_hex2bn/BN_dec2bn is ever\ncalled by user applications with very large untrusted hex/dec data. This is\nanticipated to be a rare occurrence.\n\nAll OpenSSL internal usage of this function uses data that is not expected\nto be untrusted, e.g. config file data or application command line\narguments. If user developed applications generate config file data based\non untrusted data then it is possible that this could also lead to security\nconsequences. This is also anticipated to be a rare.\n\nIssue reported by Guido Vranken.\n\nCVE-2016-0797\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(cherry picked from commit c175308407858afff3fc8c2e5e085d94d12edc7d)",
        "before_after_code_files": [
          "crypto/bn/bn.h||crypto/bn/bn.h",
          "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
          ],
          "candidate": [
            "crypto/bn/bn_print.c||crypto/bn/bn_print.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/bn.h||crypto/bn/bn.h": [
          "File: crypto/bn/bn.h -> crypto/bn/bn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: #ifndef HEADER_BN_H",
          "126: # define HEADER_BN_H",
          "128: # include <openssl/e_os2.h>",
          "129: # ifndef OPENSSL_NO_FP_API",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: # include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744: # define bn_wexpand(a,words) (((words) <= (a)->dmax)?(a):bn_expand2((a),(words)))",
          "745: BIGNUM *bn_expand2(BIGNUM *a, int words);",
          "746: # ifndef OPENSSL_NO_DEPRECATED",
          "",
          "[Removed Lines]",
          "742: # define bn_expand(a,bits) ((((((bits+BN_BITS2-1))/BN_BITS2)) <= (a)->dmax)?\\",
          "743:         (a):bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2))",
          "",
          "[Added Lines]",
          "743: # define bn_expand(a,bits) \\",
          "744:     ( \\",
          "745:         bits > (INT_MAX - BN_BITS2 + 1) ? \\",
          "746:             NULL \\",
          "747:         : \\",
          "748:             (((bits+BN_BITS2-1)/BN_BITS2) <= (a)->dmax) ? \\",
          "749:                 (a) \\",
          "750:             : \\",
          "751:                 bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2) \\",
          "752:     )",
          "",
          "---------------"
        ],
        "crypto/bn/bn_print.c||crypto/bn/bn_print.c": [
          "File: crypto/bn/bn_print.c -> crypto/bn/bn_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include <stdio.h>",
          "60: #include <ctype.h>",
          "61: #include \"cryptlib.h\"",
          "62: #include <openssl/buffer.h>",
          "63: #include \"bn_lcl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:         a++;",
          "190:     }",
          "194:     num = i + neg;",
          "195:     if (bn == NULL)",
          "",
          "[Removed Lines]",
          "192:     for (i = 0; isxdigit((unsigned char)a[i]); i++) ;",
          "",
          "[Added Lines]",
          "193:     for (i = 0; i <= (INT_MAX/4) && isxdigit((unsigned char)a[i]); i++)",
          "194:         continue;",
          "196:     if (i > INT_MAX/4)",
          "197:         goto err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "260:         a++;",
          "261:     }",
          "265:     num = i + neg;",
          "266:     if (bn == NULL)",
          "",
          "[Removed Lines]",
          "263:     for (i = 0; isdigit((unsigned char)a[i]); i++) ;",
          "",
          "[Added Lines]",
          "268:     for (i = 0; i <= (INT_MAX/4) && isdigit((unsigned char)a[i]); i++)",
          "269:         continue;",
          "271:     if (i > INT_MAX/4)",
          "272:         goto err;",
          "",
          "---------------"
        ]
      }
    }
  ]
}