{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5e7798a89411a732e31b436731e17dbc94505d3",
      "candidate_info": {
        "commit_hash": "b5e7798a89411a732e31b436731e17dbc94505d3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b5e7798a89411a732e31b436731e17dbc94505d3",
        "files": [
          "Makefile.am",
          "include/uv.h",
          "src/unix/stream.c",
          "src/win/stream.c",
          "test/test-list.h",
          "test/test-tcp-try-write.c",
          "uv.gyp"
        ],
        "message": "stream: introduce uv_try_write(...)\n\n`uv_try_write(stream, buf, size)` acts like `uv_write()`,\nbut without queueing actual write until UV_POLLOUT (or IOCP completion).\nThis is useful for doing writes using on-stack `uv_write_t` requests.\n\nfix #1025",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv.h||include/uv.h",
          "src/unix/stream.c||src/unix/stream.c",
          "src/win/stream.c||src/win/stream.c",
          "test/test-list.h||test/test-list.h",
          "test/test-tcp-try-write.c||test/test-tcp-try-write.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:                          test/test-tcp-unexpected-read.c \\",
          "185:                          test/test-tcp-write-to-half-open-connection.c \\",
          "186:                          test/test-tcp-writealot.c \\",
          "187:                          test/test-thread.c \\",
          "188:                          test/test-threadpool-cancel.c \\",
          "189:                          test/test-threadpool.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:                          test/test-tcp-try-write.c \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:                         uv_stream_t* send_handle,",
          "674:                         uv_write_cb cb);",
          "677: struct uv_write_s {",
          "678:   UV_REQ_FIELDS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "684: UV_EXTERN int uv_try_write(uv_stream_t* handle, const char* buf, size_t length);",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299: }",
          "1302: static int uv__read_start_common(uv_stream_t* stream,",
          "1303:                                  uv_alloc_cb alloc_cb,",
          "1304:                                  uv_read_cb read_cb,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1302: void uv_try_write_cb(uv_write_t* req, int status) {",
          "1304:   abort();",
          "1305: }",
          "1308: int uv_try_write(uv_stream_t* stream, const char* buf, size_t size) {",
          "1309:   int r;",
          "1310:   int has_pollout;",
          "1311:   size_t written;",
          "1312:   size_t req_size;",
          "1313:   uv_write_t req;",
          "1314:   uv_buf_t bufstruct;",
          "1317:   if (stream->connect_req != NULL || stream->write_queue_size != 0)",
          "1318:     return 0;",
          "1320:   has_pollout = uv__io_active(&stream->io_watcher, UV__POLLOUT);",
          "1322:   bufstruct = uv_buf_init((char*) buf, size);",
          "1323:   r = uv_write(&req, stream, &bufstruct, 1, uv_try_write_cb);",
          "1324:   if (r != 0)",
          "1325:     return r;",
          "1328:   written = size;",
          "1329:   if (req.bufs != NULL)",
          "1330:     req_size = uv__write_req_size(&req);",
          "1331:   else",
          "1332:     req_size = 0;",
          "1333:   written -= req_size;",
          "1334:   stream->write_queue_size -= req_size;",
          "1337:   QUEUE_REMOVE(&req.queue);",
          "1338:   uv__req_unregister(stream->loop, &req);",
          "1339:   if (req.bufs != req.bufsml)",
          "1340:     free(req.bufs);",
          "1341:   req.bufs = NULL;",
          "1344:   if (!has_pollout)",
          "1345:     uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "1347:   return (int) written;",
          "1348: }",
          "",
          "---------------"
        ],
        "src/win/stream.c||src/win/stream.c": [
          "File: src/win/stream.c -> src/win/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "202: }",
          "205: int uv_shutdown(uv_shutdown_t* req, uv_stream_t* handle, uv_shutdown_cb cb) {",
          "206:   uv_loop_t* loop = handle->loop;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: int uv_try_write(uv_stream_t* handle, const char* buf, size_t length) {",
          "207:   return UV_ENOSYS;",
          "208: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: TEST_DECLARE   (delayed_accept)",
          "53: TEST_DECLARE   (multiple_listen)",
          "54: TEST_DECLARE   (tcp_writealot)",
          "55: TEST_DECLARE   (tcp_open)",
          "56: TEST_DECLARE   (tcp_connect_error_after_write)",
          "57: TEST_DECLARE   (tcp_shutdown_after_write)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: TEST_DECLARE   (tcp_try_write)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:   TEST_ENTRY  (tcp_writealot)",
          "295:   TEST_HELPER (tcp_writealot, tcp4_echo_server)",
          "297:   TEST_ENTRY  (tcp_open)",
          "298:   TEST_HELPER (tcp_open, tcp4_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:   TEST_ENTRY  (tcp_try_write)",
          "",
          "---------------"
        ],
        "test/test-tcp-try-write.c||test/test-tcp-try-write.c": [
          "File: test/test-tcp-try-write.c -> test/test-tcp-try-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "29: #define MAX_BYTES 1024 * 1024",
          "31: #ifdef _WIN32",
          "33: TEST_IMPL(tcp_try_write) {",
          "35:   MAKE_VALGRIND_HAPPY();",
          "36:   return 0;",
          "37: }",
          "41: static uv_tcp_t server;",
          "42: static uv_tcp_t client;",
          "43: static uv_tcp_t incoming;",
          "44: static int connect_cb_called;",
          "45: static int close_cb_called;",
          "46: static int connection_cb_called;",
          "47: static int bytes_read;",
          "48: static int bytes_written;",
          "51: static void close_cb(uv_handle_t* handle) {",
          "52:   close_cb_called++;",
          "53: }",
          "56: static void connect_cb(uv_connect_t* req, int status) {",
          "57:   static char zeroes[1024];",
          "58:   int r;",
          "59:   uv_buf_t buf;",
          "60:   ASSERT(status == 0);",
          "61:   connect_cb_called++;",
          "63:   do {",
          "64:     r = uv_try_write((uv_stream_t*) &client, zeroes, sizeof(zeroes));",
          "65:     ASSERT(r >= 0);",
          "66:     bytes_written += r;",
          "69:     if (r != (int) sizeof(zeroes))",
          "70:       break;",
          "71:   } while (1);",
          "72:   uv_close((uv_handle_t*) &client, close_cb);",
          "73: }",
          "76: static void alloc_cb(uv_handle_t* handle, size_t size, uv_buf_t* buf) {",
          "77:   static char base[1024];",
          "79:   buf->base = base;",
          "80:   buf->len = sizeof(base);",
          "81: }",
          "84: static void read_cb(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "85:   if (nread < 0) {",
          "86:     uv_close((uv_handle_t*) tcp, close_cb);",
          "87:     uv_close((uv_handle_t*) &server, close_cb);",
          "88:     return;",
          "89:   }",
          "91:   bytes_read += nread;",
          "92: }",
          "95: static void connection_cb(uv_stream_t* tcp, int status) {",
          "96:   ASSERT(status == 0);",
          "98:   ASSERT(0 == uv_tcp_init(tcp->loop, &incoming));",
          "99:   ASSERT(0 == uv_accept(tcp, (uv_stream_t*) &incoming));",
          "101:   connection_cb_called++;",
          "102:   ASSERT(0 == uv_read_start((uv_stream_t*) &incoming, alloc_cb, read_cb));",
          "103: }",
          "106: static void start_server(void) {",
          "107:   struct sockaddr_in addr;",
          "109:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", TEST_PORT, &addr));",
          "111:   ASSERT(0 == uv_tcp_init(uv_default_loop(), &server));",
          "112:   ASSERT(0 == uv_tcp_bind(&server, (struct sockaddr*) &addr));",
          "113:   ASSERT(0 == uv_listen((uv_stream_t*) &server, 128, connection_cb));",
          "114: }",
          "117: TEST_IMPL(tcp_try_write) {",
          "118:   uv_connect_t connect_req;",
          "119:   struct sockaddr_in addr;",
          "121:   start_server();",
          "123:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "125:   ASSERT(0 == uv_tcp_init(uv_default_loop(), &client));",
          "126:   ASSERT(0 == uv_tcp_connect(&connect_req,",
          "127:                              &client,",
          "128:                              (struct sockaddr*) &addr,",
          "129:                              connect_cb));",
          "131:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_DEFAULT));",
          "133:   ASSERT(connect_cb_called == 1);",
          "134:   ASSERT(close_cb_called == 3);",
          "135:   ASSERT(connection_cb_called == 1);",
          "136:   ASSERT(bytes_read == bytes_written);",
          "137:   ASSERT(bytes_written > 0);",
          "139:   MAKE_VALGRIND_HAPPY();",
          "140:   return 0;",
          "141: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:         'test/test-tcp-open.c',",
          "363:         'test/test-tcp-write-to-half-open-connection.c',",
          "364:         'test/test-tcp-writealot.c',",
          "365:         'test/test-tcp-unexpected-read.c',",
          "366:         'test/test-tcp-read-stop.c',",
          "367:         'test/test-threadpool.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:         'test/test-tcp-try-write.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f277e80707e3c5a818e4c6cfae04dc17438b20b4",
      "candidate_info": {
        "commit_hash": "f277e80707e3c5a818e4c6cfae04dc17438b20b4",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f277e80707e3c5a818e4c6cfae04dc17438b20b4",
        "files": [
          "configure.ac",
          "include/uv-version.h"
        ],
        "message": "version: now working on 1.0.0-rc3",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: m4_include([m4/as_case.m4])",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [1.0.0-rc2], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [1.0.0-rc3], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ],
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 1",
          "34: #define UV_VERSION_MINOR 0",
          "35: #define UV_VERSION_PATCH 0",
          "",
          "[Removed Lines]",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "37: #define UV_VERSION_SUFFIX \"rc2\"",
          "",
          "[Added Lines]",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "37: #define UV_VERSION_SUFFIX \"rc3\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c283a9ef84a404200c6b1b9007dc4f477479f95a",
      "candidate_info": {
        "commit_hash": "c283a9ef84a404200c6b1b9007dc4f477479f95a",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c283a9ef84a404200c6b1b9007dc4f477479f95a",
        "files": [
          "src/win/winapi.h"
        ],
        "message": "windows: add DDK definitions for more file information classes\n\nCopy some more structs from the NT DDK to winapi.h, so people can\ncompile libuv without installing the DDK.",
        "before_after_code_files": [
          "src/win/winapi.h||src/win/winapi.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/winapi.h||src/win/winapi.h": [
          "File: src/win/winapi.h -> src/win/winapi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4142:   ULONG_PTR Information;",
          "4143: } IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;",
          "4181: typedef enum _FILE_INFORMATION_CLASS {",
          "4182:   FileDirectoryInformation = 1,",
          "4183:   FileFullDirectoryInformation,",
          "",
          "[Removed Lines]",
          "4145: typedef struct _FILE_PIPE_LOCAL_INFORMATION {",
          "4146:   ULONG NamedPipeType;",
          "4147:   ULONG NamedPipeConfiguration;",
          "4148:   ULONG MaximumInstances;",
          "4149:   ULONG CurrentInstances;",
          "4150:   ULONG InboundQuota;",
          "4151:   ULONG ReadDataAvailable;",
          "4152:   ULONG OutboundQuota;",
          "4153:   ULONG WriteQuotaAvailable;",
          "4154:   ULONG NamedPipeState;",
          "4155:   ULONG NamedPipeEnd;",
          "4156: } FILE_PIPE_LOCAL_INFORMATION, *PFILE_PIPE_LOCAL_INFORMATION;",
          "4158: typedef struct _FILE_BASIC_INFORMATION {",
          "4159:   LARGE_INTEGER CreationTime;",
          "4160:   LARGE_INTEGER LastAccessTime;",
          "4161:   LARGE_INTEGER LastWriteTime;",
          "4162:   LARGE_INTEGER ChangeTime;",
          "4163:   DWORD FileAttributes;",
          "4164: } FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;",
          "4166: typedef struct _FILE_DISPOSITION_INFORMATION {",
          "4167:   BOOLEAN DeleteFile;",
          "4168: } FILE_DISPOSITION_INFORMATION, *PFILE_DISPOSITION_INFORMATION;",
          "4170: typedef struct _FILE_MODE_INFORMATION {",
          "4171:   ULONG Mode;",
          "4172: } FILE_MODE_INFORMATION, *PFILE_MODE_INFORMATION;",
          "4174: typedef struct _FILE_END_OF_FILE_INFORMATION {",
          "4175:   LARGE_INTEGER  EndOfFile;",
          "4176: } FILE_END_OF_FILE_INFORMATION, *PFILE_END_OF_FILE_INFORMATION;",
          "4178: #define FILE_SYNCHRONOUS_IO_ALERT               0x00000010",
          "4179: #define FILE_SYNCHRONOUS_IO_NONALERT            0x00000020",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4237:   FileMaximumInformation",
          "4238: } FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;",
          "4240: typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {",
          "4241:     LARGE_INTEGER IdleTime;",
          "4242:     LARGE_INTEGER KernelTime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4204: typedef struct _FILE_BASIC_INFORMATION {",
          "4205:   LARGE_INTEGER CreationTime;",
          "4206:   LARGE_INTEGER LastAccessTime;",
          "4207:   LARGE_INTEGER LastWriteTime;",
          "4208:   LARGE_INTEGER ChangeTime;",
          "4209:   DWORD FileAttributes;",
          "4210: } FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;",
          "4212: typedef struct _FILE_STANDARD_INFORMATION {",
          "4213:   LARGE_INTEGER AllocationSize;",
          "4214:   LARGE_INTEGER EndOfFile;",
          "4215:   ULONG         NumberOfLinks;",
          "4216:   BOOLEAN       DeletePending;",
          "4217:   BOOLEAN       Directory;",
          "4218: } FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;",
          "4220: typedef struct _FILE_INTERNAL_INFORMATION {",
          "4221:   LARGE_INTEGER IndexNumber;",
          "4222: } FILE_INTERNAL_INFORMATION, *PFILE_INTERNAL_INFORMATION;",
          "4224: typedef struct _FILE_EA_INFORMATION {",
          "4225:   ULONG EaSize;",
          "4226: } FILE_EA_INFORMATION, *PFILE_EA_INFORMATION;",
          "4228: typedef struct _FILE_ACCESS_INFORMATION {",
          "4229:   ACCESS_MASK AccessFlags;",
          "4230: } FILE_ACCESS_INFORMATION, *PFILE_ACCESS_INFORMATION;",
          "4232: typedef struct _FILE_POSITION_INFORMATION {",
          "4233:   LARGE_INTEGER CurrentByteOffset;",
          "4234: } FILE_POSITION_INFORMATION, *PFILE_POSITION_INFORMATION;",
          "4236: typedef struct _FILE_MODE_INFORMATION {",
          "4237:   ULONG Mode;",
          "4238: } FILE_MODE_INFORMATION, *PFILE_MODE_INFORMATION;",
          "4240: typedef struct _FILE_ALIGNMENT_INFORMATION {",
          "4241:   ULONG AlignmentRequirement;",
          "4242: } FILE_ALIGNMENT_INFORMATION, *PFILE_ALIGNMENT_INFORMATION;",
          "4244: typedef struct _FILE_NAME_INFORMATION {",
          "4245:   ULONG FileNameLength;",
          "4246:   WCHAR FileName[1];",
          "4247: } FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION;",
          "4249: typedef struct _FILE_END_OF_FILE_INFORMATION {",
          "4250:   LARGE_INTEGER  EndOfFile;",
          "4251: } FILE_END_OF_FILE_INFORMATION, *PFILE_END_OF_FILE_INFORMATION;",
          "4253: typedef struct _FILE_ALL_INFORMATION {",
          "4254:   FILE_BASIC_INFORMATION     BasicInformation;",
          "4255:   FILE_STANDARD_INFORMATION  StandardInformation;",
          "4256:   FILE_INTERNAL_INFORMATION  InternalInformation;",
          "4257:   FILE_EA_INFORMATION        EaInformation;",
          "4258:   FILE_ACCESS_INFORMATION    AccessInformation;",
          "4259:   FILE_POSITION_INFORMATION  PositionInformation;",
          "4260:   FILE_MODE_INFORMATION      ModeInformation;",
          "4261:   FILE_ALIGNMENT_INFORMATION AlignmentInformation;",
          "4262:   FILE_NAME_INFORMATION      NameInformation;",
          "4263: } FILE_ALL_INFORMATION, *PFILE_ALL_INFORMATION;",
          "4265: typedef struct _FILE_DISPOSITION_INFORMATION {",
          "4266:   BOOLEAN DeleteFile;",
          "4267: } FILE_DISPOSITION_INFORMATION, *PFILE_DISPOSITION_INFORMATION;",
          "4269: typedef struct _FILE_PIPE_LOCAL_INFORMATION {",
          "4270:   ULONG NamedPipeType;",
          "4271:   ULONG NamedPipeConfiguration;",
          "4272:   ULONG MaximumInstances;",
          "4273:   ULONG CurrentInstances;",
          "4274:   ULONG InboundQuota;",
          "4275:   ULONG ReadDataAvailable;",
          "4276:   ULONG OutboundQuota;",
          "4277:   ULONG WriteQuotaAvailable;",
          "4278:   ULONG NamedPipeState;",
          "4279:   ULONG NamedPipeEnd;",
          "4280: } FILE_PIPE_LOCAL_INFORMATION, *PFILE_PIPE_LOCAL_INFORMATION;",
          "4282: #define FILE_SYNCHRONOUS_IO_ALERT               0x00000010",
          "4283: #define FILE_SYNCHRONOUS_IO_NONALERT            0x00000020",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a098ac66dde7b12136c0cf51ae4caf7ca73e02d5",
      "candidate_info": {
        "commit_hash": "a098ac66dde7b12136c0cf51ae4caf7ca73e02d5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a098ac66dde7b12136c0cf51ae4caf7ca73e02d5",
        "files": [
          "include/uv-errno.h",
          "include/uv.h",
          "src/uv-common.c",
          "src/win/getaddrinfo.c"
        ],
        "message": "unix, windows: return system error on EAI_SYSTEM",
        "before_after_code_files": [
          "include/uv-errno.h||include/uv-errno.h",
          "include/uv.h||include/uv.h",
          "src/uv-common.c||src/uv-common.c",
          "src/win/getaddrinfo.c||src/win/getaddrinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-errno.h||include/uv-errno.h": [
          "File: include/uv-errno.h -> include/uv-errno.h"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   XX(EAI_PROTOCOL, \"resolved protocol is unknown\")                            \\",
          "84:   XX(EAI_SERVICE, \"service not available for socket type\")                    \\",
          "85:   XX(EAI_SOCKTYPE, \"socket type not supported\")                               \\",
          "87:   XX(EALREADY, \"connection already in progress\")                              \\",
          "88:   XX(EBADF, \"bad file descriptor\")                                            \\",
          "89:   XX(EBUSY, \"resource busy or locked\")                                        \\",
          "",
          "[Removed Lines]",
          "86:   XX(EAI_SYSTEM, \"system error\")                                              \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   case EAI_SOCKTYPE: return UV_EAI_SOCKTYPE;",
          "434: #endif",
          "435: #if defined(EAI_SYSTEM)",
          "437: #endif",
          "438:   }",
          "439:   assert(!\"unknown EAI_* error code\");",
          "",
          "[Removed Lines]",
          "436:   case EAI_SYSTEM: return UV_EAI_SYSTEM;",
          "",
          "[Added Lines]",
          "436:   case EAI_SYSTEM: return -errno;",
          "",
          "---------------"
        ],
        "src/win/getaddrinfo.c||src/win/getaddrinfo.c": [
          "File: src/win/getaddrinfo.c -> src/win/getaddrinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:       if (addrinfow_ptr->ai_canonname != NULL) {",
          "114:         name_len = uv_utf16_to_utf8(addrinfow_ptr->ai_canonname, -1, NULL, 0);",
          "115:         if (name_len == 0) {",
          "118:           goto complete;",
          "119:         }",
          "120:         addrinfo_len += ALIGNED_SIZE(name_len);",
          "",
          "[Removed Lines]",
          "117:           err = UV_EAI_SYSTEM;",
          "",
          "[Added Lines]",
          "116:           err = uv_translate_sys_error(GetLastError());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "907b55e4bfe404377cbca0080b012c550a1be9ed",
      "candidate_info": {
        "commit_hash": "907b55e4bfe404377cbca0080b012c550a1be9ed",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/907b55e4bfe404377cbca0080b012c550a1be9ed",
        "files": [
          "src/win/process.c",
          "test/test-spawn.c"
        ],
        "message": "process: adjust quote_cmd_arg for empty arguments\n\nadjust quote_cmd_arg so that empty command line\narguments are double quoted instead of skipped",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c",
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "809: TEST_IMPL(argument_escaping) {",
          "810:   const WCHAR* test_str[] = {",
          "811:     L\"HelloWorld\",",
          "812:     L\"Hello World\",",
          "813:     L\"Hello\\\"World\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:     L\"\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}