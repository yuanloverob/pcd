{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "842c70c5c58266c9673fcc9061cb1da943a63d3b",
      "candidate_info": {
        "commit_hash": "842c70c5c58266c9673fcc9061cb1da943a63d3b",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/842c70c5c58266c9673fcc9061cb1da943a63d3b",
        "files": [
          "include/uv-version.h"
        ],
        "message": "Now working on v0.11.24\n\nSigned-off-by: Fedor Indutny <fedor@indutny.com>",
        "before_after_code_files": [
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 0",
          "34: #define UV_VERSION_MINOR 11",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_PATCH 23",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_PATCH 24",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e591368237396106e9a1cd149e03de9d2d9f5b9",
      "candidate_info": {
        "commit_hash": "0e591368237396106e9a1cd149e03de9d2d9f5b9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0e591368237396106e9a1cd149e03de9d2d9f5b9",
        "files": [
          "test/task.h"
        ],
        "message": "test: fix compiation warning\n\n-Wunused-function would kick in because of the close_loop function,\nbut there tests and benchmarks which actually don't use any loop.",
        "before_after_code_files": [
          "test/task.h||test/task.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/task.h||test/task.h": [
          "File: test/task.h -> test/task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "210: #endif",
          "213: static void close_walk_cb(uv_handle_t* handle, void* arg) {",
          "214:   if (!uv_is_closing(handle))",
          "215:     uv_close(handle, NULL);",
          "216: }",
          "219:   uv_walk(loop, close_walk_cb, NULL);",
          "220:   uv_run(loop, UV_RUN_DEFAULT);",
          "221: }",
          "",
          "[Removed Lines]",
          "218: static void close_loop(uv_loop_t* loop) {",
          "",
          "[Added Lines]",
          "212: #if defined(__clang__) ||                                \\",
          "213:     defined(__GNUC__) ||                                 \\",
          "214:     defined(__INTEL_COMPILER) ||                         \\",
          "215:     defined(__SUNPRO_C)",
          "216: # define UNUSED __attribute__((unused))",
          "217: #else",
          "218: # define UNUSED",
          "219: #endif",
          "227: UNUSED static void close_loop(uv_loop_t* loop) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c87c44fff3f28040159db6ad08134a647e85aacf",
      "candidate_info": {
        "commit_hash": "c87c44fff3f28040159db6ad08134a647e85aacf",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c87c44fff3f28040159db6ad08134a647e85aacf",
        "files": [
          "src/unix/getaddrinfo.c",
          "src/uv-common.c",
          "src/win/getaddrinfo.c",
          "src/win/getnameinfo.c"
        ],
        "message": "windows: fix uv__getaddrinfo_translate_error\n\nUse Windows socket error codes, as recommended by MSDN, like we already\ndo with GetNameInfoW.",
        "before_after_code_files": [
          "src/unix/getaddrinfo.c||src/unix/getaddrinfo.c",
          "src/uv-common.c||src/uv-common.c",
          "src/win/getaddrinfo.c||src/win/getaddrinfo.c",
          "src/win/getnameinfo.c||src/win/getnameinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/getaddrinfo.c||src/unix/getaddrinfo.c": [
          "File: src/unix/getaddrinfo.c -> src/unix/getaddrinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <string.h>",
          "30: static void uv__getaddrinfo_work(struct uv__work* w) {",
          "31:   uv_getaddrinfo_t* req;",
          "32:   int err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: int uv__getaddrinfo_translate_error(int sys_err) {",
          "31:   switch (sys_err) {",
          "32:   case 0: return 0;",
          "33: #if defined(EAI_ADDRFAMILY)",
          "34:   case EAI_ADDRFAMILY: return UV_EAI_ADDRFAMILY;",
          "35: #endif",
          "36: #if defined(EAI_AGAIN)",
          "37:   case EAI_AGAIN: return UV_EAI_AGAIN;",
          "38: #endif",
          "39: #if defined(EAI_BADFLAGS)",
          "40:   case EAI_BADFLAGS: return UV_EAI_BADFLAGS;",
          "41: #endif",
          "42: #if defined(EAI_BADHINTS)",
          "43:   case EAI_BADHINTS: return UV_EAI_BADHINTS;",
          "44: #endif",
          "45: #if defined(EAI_CANCELED)",
          "46:   case EAI_CANCELED: return UV_EAI_CANCELED;",
          "47: #endif",
          "48: #if defined(EAI_FAIL)",
          "49:   case EAI_FAIL: return UV_EAI_FAIL;",
          "50: #endif",
          "51: #if defined(EAI_FAMILY)",
          "52:   case EAI_FAMILY: return UV_EAI_FAMILY;",
          "53: #endif",
          "54: #if defined(EAI_MEMORY)",
          "55:   case EAI_MEMORY: return UV_EAI_MEMORY;",
          "56: #endif",
          "57: #if defined(EAI_NODATA)",
          "58:   case EAI_NODATA: return UV_EAI_NODATA;",
          "59: #endif",
          "60: #if defined(EAI_NONAME)",
          "61: # if !defined(EAI_NODATA) || EAI_NODATA != EAI_NONAME",
          "62:   case EAI_NONAME: return UV_EAI_NONAME;",
          "63: # endif",
          "64: #endif",
          "65: #if defined(EAI_OVERFLOW)",
          "66:   case EAI_OVERFLOW: return UV_EAI_OVERFLOW;",
          "67: #endif",
          "68: #if defined(EAI_PROTOCOL)",
          "69:   case EAI_PROTOCOL: return UV_EAI_PROTOCOL;",
          "70: #endif",
          "71: #if defined(EAI_SERVICE)",
          "72:   case EAI_SERVICE: return UV_EAI_SERVICE;",
          "73: #endif",
          "74: #if defined(EAI_SOCKTYPE)",
          "75:   case EAI_SOCKTYPE: return UV_EAI_SOCKTYPE;",
          "76: #endif",
          "77: #if defined(EAI_SYSTEM)",
          "78:   case EAI_SYSTEM: return -errno;",
          "79: #endif",
          "80:   }",
          "81:   assert(!\"unknown EAI_* error code\");",
          "82:   abort();",
          "84: }",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "410: }",
          "470: size_t uv__count_bufs(const uv_buf_t bufs[], unsigned int nbufs) {",
          "471:   unsigned int i;",
          "",
          "[Removed Lines]",
          "413: int uv__getaddrinfo_translate_error(int sys_err) {",
          "414:   switch (sys_err) {",
          "415:   case 0: return 0;",
          "416: #if defined(EAI_ADDRFAMILY)",
          "417:   case EAI_ADDRFAMILY: return UV_EAI_ADDRFAMILY;",
          "418: #endif",
          "419: #if defined(EAI_AGAIN)",
          "420:   case EAI_AGAIN: return UV_EAI_AGAIN;",
          "421: #endif",
          "422: #if defined(EAI_BADFLAGS)",
          "423:   case EAI_BADFLAGS: return UV_EAI_BADFLAGS;",
          "424: #endif",
          "425: #if defined(EAI_BADHINTS)",
          "426:   case EAI_BADHINTS: return UV_EAI_BADHINTS;",
          "427: #endif",
          "428: #if defined(EAI_CANCELED)",
          "429:   case EAI_CANCELED: return UV_EAI_CANCELED;",
          "430: #endif",
          "431: #if defined(EAI_FAIL)",
          "432:   case EAI_FAIL: return UV_EAI_FAIL;",
          "433: #endif",
          "434: #if defined(EAI_FAMILY)",
          "435:   case EAI_FAMILY: return UV_EAI_FAMILY;",
          "436: #endif",
          "437: #if defined(EAI_MEMORY)",
          "438:   case EAI_MEMORY: return UV_EAI_MEMORY;",
          "439: #endif",
          "440: #if defined(EAI_NODATA)",
          "441:   case EAI_NODATA: return UV_EAI_NODATA;",
          "442: #endif",
          "443: #if defined(EAI_NONAME)",
          "444: # if !defined(EAI_NODATA) || EAI_NODATA != EAI_NONAME",
          "445:   case EAI_NONAME: return UV_EAI_NONAME;",
          "446: # endif",
          "447: #endif",
          "448: #if defined(EAI_OVERFLOW)",
          "449:   case EAI_OVERFLOW: return UV_EAI_OVERFLOW;",
          "450: #endif",
          "451: #if defined(EAI_PROTOCOL)",
          "452:   case EAI_PROTOCOL: return UV_EAI_PROTOCOL;",
          "453: #endif",
          "454: #if defined(EAI_SERVICE)",
          "455:   case EAI_SERVICE: return UV_EAI_SERVICE;",
          "456: #endif",
          "457: #if defined(EAI_SOCKTYPE)",
          "458:   case EAI_SOCKTYPE: return UV_EAI_SOCKTYPE;",
          "459: #endif",
          "460: #if defined(EAI_SYSTEM)",
          "461:   case EAI_SYSTEM: return -errno;",
          "462: #endif",
          "463:   }",
          "464:   assert(!\"unknown EAI_* error code\");",
          "465:   abort();",
          "467: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/getaddrinfo.c||src/win/getaddrinfo.c": [
          "File: src/win/getaddrinfo.c -> src/win/getaddrinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"req-inl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: int uv__getaddrinfo_translate_error(int sys_err) {",
          "31:   switch (sys_err) {",
          "32:     case 0:                       return 0;",
          "33:     case WSATRY_AGAIN:            return UV_EAI_AGAIN;",
          "34:     case WSAEINVAL:               return UV_EAI_BADFLAGS;",
          "35:     case WSANO_RECOVERY:          return UV_EAI_FAIL;",
          "36:     case WSAEAFNOSUPPORT:         return UV_EAI_FAMILY;",
          "37:     case WSA_NOT_ENOUGH_MEMORY:   return UV_EAI_MEMORY;",
          "38:     case WSAHOST_NOT_FOUND:       return UV_EAI_NONAME;",
          "39:     case WSATYPE_NOT_FOUND:       return UV_EAI_SERVICE;",
          "40:     case WSAESOCKTNOSUPPORT:      return UV_EAI_SOCKTYPE;",
          "41:     default:                      return uv_translate_sys_error(sys_err);",
          "42:   }",
          "43: }",
          "",
          "---------------"
        ],
        "src/win/getnameinfo.c||src/win/getnameinfo.c": [
          "File: src/win/getnameinfo.c -> src/win/getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   int ret = 0;",
          "48:   req = container_of(w, uv_getnameinfo_t, work_req);",
          "50:                      sizeof(req->storage),",
          "51:                      host,",
          "52:                      ARRAY_SIZE(host),",
          "53:                      service,",
          "54:                      ARRAY_SIZE(service),",
          "56:   req->retcode = uv__getaddrinfo_translate_error(ret);",
          "",
          "[Removed Lines]",
          "49:   ret = GetNameInfoW((struct sockaddr*)&req->storage,",
          "55:                      req->flags);",
          "",
          "[Added Lines]",
          "49:   if (!GetNameInfoW((struct sockaddr*)&req->storage,",
          "55:                      req->flags)) {",
          "56:     ret = WSAGetLastError();",
          "57:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12933f43c984dde44192c8439cc8971029fb619d",
      "candidate_info": {
        "commit_hash": "12933f43c984dde44192c8439cc8971029fb619d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/12933f43c984dde44192c8439cc8971029fb619d",
        "files": [
          "src/unix/core.c",
          "src/unix/internal.h",
          "src/unix/loop.c"
        ],
        "message": "unix: move loop functions from core.c to loop.c\n\nMove uv_default_loop(), uv_loop_new() and uv_loop_delete() to loop.c.",
        "before_after_code_files": [
          "src/unix/core.c||src/unix/core.c",
          "src/unix/internal.h||src/unix/internal.h",
          "src/unix/loop.c||src/unix/loop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static void uv__run_pending(uv_loop_t* loop);",
          "69: STATIC_ASSERT(sizeof(uv_buf_t) == sizeof(struct iovec));",
          "70: STATIC_ASSERT(sizeof(&((uv_buf_t*) 0)->base) ==",
          "",
          "[Removed Lines]",
          "65: static uv_loop_t default_loop_struct;",
          "66: static uv_loop_t* default_loop_ptr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229: }",
          "270: int uv_backend_fd(const uv_loop_t* loop) {",
          "271:   return loop->backend_fd;",
          "272: }",
          "",
          "[Removed Lines]",
          "232: uv_loop_t* uv_default_loop(void) {",
          "233:   if (default_loop_ptr)",
          "234:     return default_loop_ptr;",
          "236:   if (uv__loop_init(&default_loop_struct, /* default_loop? */ 1))",
          "237:     return NULL;",
          "239:   return (default_loop_ptr = &default_loop_struct);",
          "240: }",
          "243: uv_loop_t* uv_loop_new(void) {",
          "244:   uv_loop_t* loop;",
          "246:   if ((loop = malloc(sizeof(*loop))) == NULL)",
          "247:     return NULL;",
          "249:   if (uv__loop_init(loop, /* default_loop? */ 0)) {",
          "250:     free(loop);",
          "251:     return NULL;",
          "252:   }",
          "254:   return loop;",
          "255: }",
          "258: void uv_loop_delete(uv_loop_t* loop) {",
          "259:   uv__loop_delete(loop);",
          "260: #ifndef NDEBUG",
          "261:   memset(loop, -1, sizeof *loop);",
          "262: #endif",
          "263:   if (loop == default_loop_ptr)",
          "264:     default_loop_ptr = NULL;",
          "265:   else",
          "266:     free(loop);",
          "267: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "150: void uv__async_stop(uv_loop_t* loop, struct uv__async* wa);",
          "155: void uv__run_idle(uv_loop_t* loop);",
          "156: void uv__run_check(uv_loop_t* loop);",
          "157: void uv__run_prepare(uv_loop_t* loop);",
          "",
          "[Removed Lines]",
          "153: int uv__loop_init(uv_loop_t* loop, int default_loop);",
          "154: void uv__loop_delete(uv_loop_t* loop);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/loop.c||src/unix/loop.c": [
          "File: src/unix/loop.c -> src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <string.h>",
          "27: #include <unistd.h>",
          "31:   unsigned int i;",
          "32:   int err;",
          "",
          "[Removed Lines]",
          "30: int uv__loop_init(uv_loop_t* loop, int default_loop) {",
          "",
          "[Added Lines]",
          "29: static int uv__loop_init(uv_loop_t* loop, int default_loop);",
          "30: static void uv__loop_delete(uv_loop_t* loop);",
          "32: static uv_loop_t default_loop_struct;",
          "33: static uv_loop_t* default_loop_ptr;",
          "36: uv_loop_t* uv_default_loop(void) {",
          "37:   if (default_loop_ptr != NULL)",
          "38:     return default_loop_ptr;",
          "40:   if (uv__loop_init(&default_loop_struct, /* default_loop? */ 1))",
          "41:     return NULL;",
          "43:   default_loop_ptr = &default_loop_struct;",
          "44:   return default_loop_ptr;",
          "45: }",
          "48: uv_loop_t* uv_loop_new(void) {",
          "49:   uv_loop_t* loop;",
          "51:   loop = malloc(sizeof(*loop));",
          "52:   if (loop == NULL)",
          "53:     return NULL;",
          "55:   if (uv__loop_init(loop, /* default_loop? */ 0)) {",
          "56:     free(loop);",
          "57:     return NULL;",
          "58:   }",
          "60:   return loop;",
          "61: }",
          "64: void uv_loop_delete(uv_loop_t* loop) {",
          "65:   uv__loop_delete(loop);",
          "66: #ifndef NDEBUG",
          "67:   memset(loop, -1, sizeof(*loop));",
          "68: #endif",
          "69:   if (loop == default_loop_ptr)",
          "70:     default_loop_ptr = NULL;",
          "71:   else",
          "72:     free(loop);",
          "73: }",
          "76: static int uv__loop_init(uv_loop_t* loop, int default_loop) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: }",
          "88:   uv__signal_loop_cleanup(loop);",
          "89:   uv__platform_loop_delete(loop);",
          "90:   uv__async_stop(loop, &loop->async_watcher);",
          "",
          "[Removed Lines]",
          "87: void uv__loop_delete(uv_loop_t* loop) {",
          "",
          "[Added Lines]",
          "133: static void uv__loop_delete(uv_loop_t* loop) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d5e6f4372f553b97f58ed5bc8b1efad8b0546bba",
      "candidate_info": {
        "commit_hash": "d5e6f4372f553b97f58ed5bc8b1efad8b0546bba",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d5e6f4372f553b97f58ed5bc8b1efad8b0546bba",
        "files": [
          "Makefile.am",
          "src/unix/stream.c",
          "test/test-list.h",
          "test/test-tcp-write-after-connect.c",
          "uv.gyp"
        ],
        "message": "unix: fix tcp write after bad connect freezing\n\nIf the connect wouldn't go off (no such tcp remote or any other failure),\nthe subsequent writes made would not be called. Now we call the writes\nin the queue with ECANCELED if the connect fails.\n\nFix #1432",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/stream.c||src/unix/stream.c",
          "test/test-list.h||test/test-list.h",
          "test/test-tcp-write-after-connect.c||test/test-tcp-write-after-connect.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:                          test/test-tcp-shutdown-after-write.c \\",
          "197:                          test/test-tcp-unexpected-read.c \\",
          "198:                          test/test-tcp-write-to-half-open-connection.c \\",
          "199:                          test/test-tcp-writealot.c \\",
          "200:                          test/test-tcp-try-write.c \\",
          "201:                          test/test-tcp-write-queue-order.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:                          test/test-tcp-write-after-connect.c \\",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "361: }",
          "365:   uv_write_t* req;",
          "366:   QUEUE* q;",
          "368:   assert(!uv__io_active(&stream->io_watcher, UV__POLLIN | UV__POLLOUT));",
          "369:   assert(stream->flags & UV_CLOSED);",
          "",
          "[Removed Lines]",
          "364: void uv__stream_destroy(uv_stream_t* stream) {",
          "",
          "[Added Lines]",
          "364: void uv__stream_flush_write_queue(uv_stream_t* stream, int error) {",
          "367:   while (!QUEUE_EMPTY(&stream->write_queue)) {",
          "368:     q = QUEUE_HEAD(&stream->write_queue);",
          "369:     QUEUE_REMOVE(q);",
          "371:     req = QUEUE_DATA(q, uv_write_t, queue);",
          "372:     req->error = error;",
          "374:     QUEUE_INSERT_TAIL(&stream->write_completed_queue, &req->queue);",
          "375:   }",
          "376: }",
          "379: void uv__stream_destroy(uv_stream_t* stream) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:     stream->connect_req = NULL;",
          "375:   }",
          "387:   uv__write_callbacks(stream);",
          "389:   if (stream->shutdown_req) {",
          "",
          "[Removed Lines]",
          "377:   while (!QUEUE_EMPTY(&stream->write_queue)) {",
          "378:     q = QUEUE_HEAD(&stream->write_queue);",
          "379:     QUEUE_REMOVE(q);",
          "381:     req = QUEUE_DATA(q, uv_write_t, queue);",
          "382:     req->error = -ECANCELED;",
          "384:     QUEUE_INSERT_TAIL(&stream->write_completed_queue, &req->queue);",
          "385:   }",
          "",
          "[Added Lines]",
          "389:   uv__stream_flush_write_queue(stream, -ECANCELED);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1233:   stream->connect_req = NULL;",
          "1234:   uv__req_unregister(stream->loop, req);",
          "1237:   if (req->cb)",
          "1238:     req->cb(req, error);",
          "1239: }",
          "",
          "[Removed Lines]",
          "1235:   uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "",
          "[Added Lines]",
          "1239:   if (error < 0 || QUEUE_EMPTY(&stream->write_queue)) {",
          "1240:     uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "1241:   }",
          "1246:   if (uv__stream_fd(stream) == -1)",
          "1247:     return;",
          "1249:   if (error < 0) {",
          "1250:     uv__stream_flush_write_queue(stream, -ECANCELED);",
          "1251:     uv__write_callbacks(stream);",
          "1252:   }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: TEST_DECLARE   (pipe_ping_pong)",
          "56: TEST_DECLARE   (delayed_accept)",
          "57: TEST_DECLARE   (multiple_listen)",
          "58: TEST_DECLARE   (tcp_writealot)",
          "59: TEST_DECLARE   (tcp_try_write)",
          "60: TEST_DECLARE   (tcp_write_queue_order)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #ifndef _WIN32",
          "59: TEST_DECLARE   (tcp_write_after_connect)",
          "60: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343:   TEST_ENTRY  (delayed_accept)",
          "344:   TEST_ENTRY  (multiple_listen)",
          "346:   TEST_ENTRY  (tcp_writealot)",
          "347:   TEST_HELPER (tcp_writealot, tcp4_echo_server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349: #ifndef _WIN32",
          "350:   TEST_ENTRY  (tcp_write_after_connect)",
          "351: #endif",
          "",
          "---------------"
        ],
        "test/test-tcp-write-after-connect.c||test/test-tcp-write-after-connect.c": [
          "File: test/test-tcp-write-after-connect.c -> test/test-tcp-write-after-connect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #ifndef _WIN32",
          "24: #include \"uv.h\"",
          "25: #include \"task.h\"",
          "27: uv_loop_t loop;",
          "28: uv_tcp_t tcp_client;",
          "29: uv_connect_t connection_request;",
          "30: uv_write_t write_request;",
          "31: uv_buf_t buf = { \"HELLO\", 4 };",
          "34: static void write_cb(uv_write_t *req, int status) {",
          "35:   ASSERT(status == UV_ECANCELED);",
          "36:   uv_close((uv_handle_t*) req->handle, NULL);",
          "37: }",
          "40: static void connect_cb(uv_connect_t *req, int status) {",
          "41:   ASSERT(status == UV_ECONNREFUSED);",
          "42: }",
          "45: TEST_IMPL(tcp_write_after_connect) {",
          "46:   struct sockaddr_in sa;",
          "47:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &sa));",
          "48:   ASSERT(0 == uv_loop_init(&loop));",
          "49:   ASSERT(0 == uv_tcp_init(&loop, &tcp_client));",
          "51:   ASSERT(0 == uv_tcp_connect(&connection_request,",
          "52:                              &tcp_client,",
          "53:                              (const struct sockaddr *)",
          "54:                              &sa,",
          "55:                              connect_cb));",
          "57:   ASSERT(0 == uv_write(&write_request,",
          "58:                        (uv_stream_t *)&tcp_client,",
          "59:                        &buf, 1,",
          "60:                        write_cb));",
          "62:   uv_run(&loop, UV_RUN_DEFAULT);",
          "64:   MAKE_VALGRIND_HAPPY();",
          "65:   return 0;",
          "66: }",
          "68: #endif",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:         'test/test-tcp-connect6-error.c',",
          "379:         'test/test-tcp-open.c',",
          "380:         'test/test-tcp-write-to-half-open-connection.c',",
          "381:         'test/test-tcp-writealot.c',",
          "382:         'test/test-tcp-try-write.c',",
          "383:         'test/test-tcp-unexpected-read.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:         'test/test-tcp-write-after-connect.c',",
          "",
          "---------------"
        ]
      }
    }
  ]
}