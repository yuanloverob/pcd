{
  "cve_id": "CVE-2015-7551",
  "cve_desc": "The Fiddle::Handle implementation in ext/fiddle/handle.c in Ruby before 2.0.0-p648, 2.1 before 2.1.8, and 2.2 before 2.2.4, as distributed in Apple OS X before 10.11.4 and other products, mishandles tainting, which allows context-dependent attackers to execute arbitrary code or cause a denial of service (application crash) via a crafted string, related to the DL module and the libffi library.  NOTE: this vulnerability exists because of a CVE-2009-5147 regression.",
  "repo": "ruby/ruby",
  "patch_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
  "patch_info": {
    "commit_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
    "repo": "ruby/ruby",
    "commit_url": "https://github.com/ruby/ruby/commit/339e11a7f178312d937b7c95dd3115ce7236597a",
    "files": [
      "ChangeLog",
      "ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb",
      "version.h"
    ],
    "message": "merge revision(s): 53153 and 23405@ruby_1_9_1\n\n\t* ext/fiddle/handle.c: check tainted string arguments.\n\t  Patch provided by tenderlove and nobu.\n\n\t* test/fiddle/test_handle.rb (class TestHandle): add test for above.\n\n\t* ext/dl/handle.c (rb_dlhandle_initialize): prohibits DL::dlopen\n\t  with a tainted name of library.\n\t  Patch by sheepman <sheepman AT sheepman.sakura.ne.jp>.\n\n\t* ext/dl/handle.c (rb_dlhandle_sym): ditto\n\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@53156 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
    "before_after_code_files": [
      "ext/fiddle/handle.c||ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
      "version.h||version.h"
    ]
  },
  "patch_diff": {
    "ext/fiddle/handle.c||ext/fiddle/handle.c": [
      "File: ext/fiddle/handle.c -> ext/fiddle/handle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include <ruby.h>",
      "2: #include <fiddle.h>",
      "4: VALUE rb_cHandle;",
      "6: struct dl_handle {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #define SafeStringValueCStr(v) (rb_check_safe_obj(rb_string_value(&v)), StringValueCStr(v))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "144:  break;",
      "145:       case 1:",
      "147:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "148:  break;",
      "149:       case 2:",
      "151:  cflag = NUM2INT(flag);",
      "152:  break;",
      "153:       default:",
      "",
      "[Removed Lines]",
      "146:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "150:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "",
      "[Added Lines]",
      "148:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "152:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:     return PTR2NUM(fiddle_handle);",
      "264: }",
      "",
      "[Removed Lines]",
      "266: static VALUE fiddle_handle_sym(void *handle, const char *symbol);",
      "",
      "[Added Lines]",
      "268: static VALUE fiddle_handle_sym(void *handle, VALUE symbol);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "282:  rb_raise(rb_eFiddleError, \"closed handle\");",
      "283:     }",
      "286: }",
      "288: #ifndef RTLD_NEXT",
      "",
      "[Removed Lines]",
      "285:     return fiddle_handle_sym(fiddle_handle->ptr, StringValueCStr(sym));",
      "",
      "[Added Lines]",
      "287:     return fiddle_handle_sym(fiddle_handle->ptr, sym);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "305: static VALUE",
      "306: rb_fiddle_handle_s_sym(VALUE self, VALUE sym)",
      "307: {",
      "309: }",
      "311: static VALUE",
      "313: {",
      "314: #if defined(HAVE_DLERROR)",
      "315:     const char *err;",
      "",
      "[Removed Lines]",
      "308:     return fiddle_handle_sym(RTLD_NEXT, StringValueCStr(sym));",
      "312: fiddle_handle_sym(void *handle, const char *name)",
      "",
      "[Added Lines]",
      "310:     return fiddle_handle_sym(RTLD_NEXT, sym);",
      "314: fiddle_handle_sym(void *handle, VALUE symbol)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "318: # define CHECK_DLERROR",
      "319: #endif",
      "320:     void (*func)();",
      "322:     rb_secure(2);",
      "323: #ifdef HAVE_DLERROR",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:     const char *name = SafeStringValueCStr(symbol);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "367:     }",
      "368: #endif",
      "369:     if( !func ){",
      "371:     }",
      "373:     return PTR2NUM(func);",
      "",
      "[Removed Lines]",
      "370:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%s\\\"\", name);",
      "",
      "[Added Lines]",
      "373:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%\"PRIsVALUE\"\\\"\", symbol);",
      "",
      "---------------"
    ],
    "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb": [
      "File: test/fiddle/test_handle.rb -> test/fiddle/test_handle.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:     include Test::Unit::Assertions",
      "13:     def test_to_i",
      "14:       handle = Fiddle::Handle.new(LIBC_SO)",
      "15:       assert_kind_of Integer, handle.to_i",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:     def test_safe_handle_open",
      "14:       t = Thread.new do",
      "15:         $SAFE = 1",
      "16:         Fiddle::Handle.new(LIBC_SO.taint)",
      "17:       end",
      "18:       assert_raise(SecurityError) { t.value }",
      "19:     end",
      "21:     def test_safe_function_lookup",
      "22:       t = Thread.new do",
      "23:         h = Fiddle::Handle.new(LIBC_SO)",
      "24:         $SAFE = 1",
      "25:         h[\"qsort\".taint]",
      "26:       end",
      "27:       assert_raise(SecurityError) { t.value }",
      "28:     end",
      "",
      "---------------"
    ],
    "version.h||version.h": [
      "File: version.h -> version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #define RUBY_VERSION \"2.1.8\"",
      "2: #define RUBY_RELEASE_DATE \"2015-12-16\"",
      "5: #define RUBY_RELEASE_YEAR 2015",
      "6: #define RUBY_RELEASE_MONTH 12",
      "",
      "[Removed Lines]",
      "3: #define RUBY_PATCHLEVEL 438",
      "",
      "[Added Lines]",
      "3: #define RUBY_PATCHLEVEL 439",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "510bdd1502aae4f154af20a390c83578b866fd20",
      "candidate_info": {
        "commit_hash": "510bdd1502aae4f154af20a390c83578b866fd20",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/510bdd1502aae4f154af20a390c83578b866fd20",
        "files": [
          "ChangeLog",
          "parse.y",
          "test/ruby/test_syntax.rb",
          "version.h"
        ],
        "message": "merge revision(s) 51350: [Backport #11380]\n\n\t* parse.y (lambda_body): pop cmdarg stack for lookahead\n\t  token.  [ruby-core:70067] [Bug #11380]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@51605 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "parse.y||parse.y",
          "test/ruby/test_syntax.rb||test/ruby/test_syntax.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "parse.y||parse.y": [
          "File: parse.y -> parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "3475:       {",
          "3476:    lpar_beg = $<num>2;",
          "3477:    cmdarg_stack = $<val>5;",
          "3479:    $$ = NEW_LAMBDA($3, $6);",
          "3480:    nd_set_line($$, $<num>4);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3478:    CMDARG_LEXPOP();",
          "",
          "---------------"
        ],
        "test/ruby/test_syntax.rb||test/ruby/test_syntax.rb": [
          "File: test/ruby/test_syntax.rb -> test/ruby/test_syntax.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:     assert_valid_syntax('p ->() do a() do end end', bug11107)",
          "272:   end",
          "274:   def test_reserved_method_no_args",
          "275:     bug6403 = '[ruby-dev:45626]'",
          "276:     assert_valid_syntax(\"def self; :foo; end\", __FILE__, bug6403)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:   def test_do_block_after_lambda",
          "275:     bug11380 = '[ruby-core:70067] [Bug #11380]'",
          "276:     assert_valid_syntax('p -> { :hello }, a: 1 do end', bug11380)",
          "277:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "2: #define RUBY_RELEASE_DATE \"2015-08-17\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 8",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 388",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 389",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf571987ecdb9faf350ee3bcd772fca5a3e79f85",
      "candidate_info": {
        "commit_hash": "bf571987ecdb9faf350ee3bcd772fca5a3e79f85",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/bf571987ecdb9faf350ee3bcd772fca5a3e79f85",
        "files": [
          "ChangeLog",
          "compile.c",
          "internal.h",
          "parse.y",
          "test/ruby/test_syntax.rb",
          "util.c",
          "version.h"
        ],
        "message": "merge revision(s) 50671: [Backport #11192]\n\n\t* compile.c (iseq_compile_each): out of range NTH_REF is always\n\t  nil.\n\n\t* parse.y (parse_numvar): check overflow of NTH_REF and range.\n\t  [ruby-core:69393] [Bug #11192]\n\n\t* util.c (ruby_scan_digits): make public and add length parameter.\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@51122 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "compile.c||compile.c",
          "internal.h||internal.h",
          "parse.y||parse.y",
          "test/ruby/test_syntax.rb||test/ruby/test_syntax.rb",
          "util.c||util.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "compile.c||compile.c": [
          "File: compile.c -> compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4795:       }",
          "4796:       case NODE_NTH_REF:{",
          "4797:         if (!poped) {",
          "4798:      ADD_INSN2(ret, line, getspecial, INT2FIX(1) /* '~'  */,",
          "4799:         INT2FIX(node->nd_nth << 1));",
          "4800:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4798:      if (!node->nd_nth) {",
          "4799:   ADD_INSN(ret, line, putnil);",
          "4800:   break;",
          "4801:      }",
          "",
          "---------------"
        ],
        "internal.h||internal.h": [
          "File: internal.h -> internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "869: extern const signed char ruby_digit36_to_number_table[];",
          "872: void rb_gc_mark_global_tbl(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "870: extern unsigned long ruby_scan_digits(const char *str, ssize_t len, int base, size_t *retlen, int *overflow);",
          "",
          "---------------"
        ],
        "parse.y||parse.y": [
          "File: parse.y -> parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "6957:      space_seen && !ISSPACE(c) && \\",
          "6958:      (ambiguous_operator(op, syn), 0)))",
          "6960: static int",
          "6961: parser_yylex(struct parser_params *parser)",
          "6962: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6960: static int",
          "6961: parse_numvar(struct parser_params *parser)",
          "6962: {",
          "6963:     size_t len;",
          "6964:     int overflow;",
          "6965:     unsigned long n = ruby_scan_digits(tok()+1, toklen()-1, 10, &len, &overflow);",
          "6966:     const unsigned long nth_ref_max =",
          "6967:  (FIXNUM_MAX / 2 < INT_MAX) ? FIXNUM_MAX / 2 : INT_MAX;",
          "6971:     if (overflow || n > nth_ref_max) {",
          "6973:  rb_warnS(\"`%s' is too big for a number variable, always nil\", tok());",
          "6975:     }",
          "6976:     else {",
          "6977:  return (int)n;",
          "6978:     }",
          "6979: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8053:      pushback(c);",
          "8054:      if (IS_lex_state_for(last_state, EXPR_FNAME)) goto gvar;",
          "8055:      tokfix();",
          "8057:      return tNTH_REF;",
          "8059:    default:",
          "",
          "[Removed Lines]",
          "8056:      set_yylval_node(NEW_NTH_REF(atoi(tok()+1)));",
          "",
          "[Added Lines]",
          "8077:      set_yylval_node(NEW_NTH_REF(parse_numvar(parser)));",
          "",
          "---------------"
        ],
        "test/ruby/test_syntax.rb||test/ruby/test_syntax.rb": [
          "File: test/ruby/test_syntax.rb -> test/ruby/test_syntax.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:     assert_syntax_error('0...%w.', /unterminated string/, bug10957)",
          "422:   end",
          "424:   private",
          "426:   def not_label(x) @result = x; @not_label ||= nil end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "424:   def test_too_big_nth_ref",
          "425:     bug11192 = '[ruby-core:69393] [Bug #11192]'",
          "426:     assert_warn(/too big/, bug11192) do",
          "427:       eval('$99999999999999999')",
          "428:     end",
          "429:   end",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: };",
          "80: {",
          "82:     const char *start = str;",
          "83:     unsigned long ret = 0, x;",
          "84:     unsigned long mul_overflow = (~(unsigned long)0) / base;",
          "90:         if (d == -1 || base <= d) {",
          "93:         }",
          "94:         if (mul_overflow < ret)",
          "",
          "[Removed Lines]",
          "78: static unsigned long",
          "79: scan_digits(const char *str, int base, size_t *retlen, int *overflow)",
          "85:     int c;",
          "88:     while ((c = (unsigned char)*str++) != '\\0') {",
          "89:         int d = ruby_digit36_to_number_table[c];",
          "92:             return ret;",
          "",
          "[Added Lines]",
          "78: unsigned long",
          "79: ruby_scan_digits(const char *str, ssize_t len, int base, size_t *retlen, int *overflow)",
          "88:     if (!len) {",
          "90:  return 0;",
          "91:     }",
          "93:     do {",
          "94:  int d = ruby_digit36_to_number_table[(unsigned char)*str++];",
          "96:      break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         ret += d;",
          "99:         if (ret < x)",
          "103:     return ret;",
          "104: }",
          "",
          "[Removed Lines]",
          "101:     }",
          "",
          "[Added Lines]",
          "105:     } while (len < 0 || --len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:         b = base == 0 ? 10 : base;",
          "151:     }",
          "155:     if (0 < len)",
          "156:         subject_found = str+len;",
          "",
          "[Removed Lines]",
          "153:     ret = scan_digits(str, b, &len, &overflow);",
          "",
          "[Added Lines]",
          "157:     ret = ruby_scan_digits(str, -1, b, &len, &overflow);",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "2: #define RUBY_RELEASE_DATE \"2015-07-03\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 7",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 372",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 373",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38117a85b32bdfd8fc96687254fd0b759edaadbf",
      "candidate_info": {
        "commit_hash": "38117a85b32bdfd8fc96687254fd0b759edaadbf",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/38117a85b32bdfd8fc96687254fd0b759edaadbf",
        "files": [
          "lib/test/unit.rb",
          "version.h"
        ],
        "message": "merge revision(s) r48854: [Backport #10494]\n\n\t* test/lib/test/unit.rb: Also rescue EINVAL for older Linux that\n  raises it in popen. [Bug #10494]\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@49910 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "lib/test/unit.rb||lib/test/unit.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "lib/test/unit.rb||lib/test/unit.rb": [
          "File: lib/test/unit.rb -> lib/test/unit.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:           begin",
          "395:             require 'io/console'",
          "396:             width = $stdout.winsize[1]",
          "398:             width = ENV[\"COLUMNS\"].to_i.nonzero? || 80",
          "399:           end",
          "400:           width -= 1 if /mswin|mingw/ =~ RUBY_PLATFORM",
          "",
          "[Removed Lines]",
          "397:           rescue LoadError, NoMethodError, Errno::ENOTTY, Errno::EBADF",
          "",
          "[Added Lines]",
          "397:           rescue LoadError, NoMethodError, Errno::ENOTTY, Errno::EBADF, Errno::EINVAL",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.5\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 3",
          "9: #include \"ruby/version.h\"",
          "",
          "[Removed Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-03-09\"",
          "3: #define RUBY_PATCHLEVEL 309",
          "7: #define RUBY_RELEASE_DAY 9",
          "",
          "[Added Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-03-10\"",
          "3: #define RUBY_PATCHLEVEL 310",
          "7: #define RUBY_RELEASE_DAY 10",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3252606afe73a7085ce8b92bd0c0a5eccd918d4",
      "candidate_info": {
        "commit_hash": "e3252606afe73a7085ce8b92bd0c0a5eccd918d4",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/e3252606afe73a7085ce8b92bd0c0a5eccd918d4",
        "files": [
          "ChangeLog",
          "ext/openssl/lib/openssl/ssl.rb",
          "test/openssl/test_ssl.rb",
          "version.h"
        ],
        "message": "merge revision(s) 50292: [Backport #9644]\n\n\t* ext/openssl/lib/openssl/ssl.rb: stricter hostname verification\n\t  following RFC 6125. with the patch provided by Tony Arcieri and\n\t  Hiroshi Nakamura [ruby-core:61545] [Bug #9644]\n\n\t* test/openssl/test_ssl.rb: add tests for above.\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@50296 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "ext/openssl/lib/openssl/ssl.rb||ext/openssl/lib/openssl/ssl.rb",
          "test/openssl/test_ssl.rb||test/openssl/test_ssl.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/openssl/lib/openssl/ssl.rb||ext/openssl/lib/openssl/ssl.rb": [
          "File: ext/openssl/lib/openssl/ssl.rb -> ext/openssl/lib/openssl/ssl.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:           case san.tag",
          "144:           when 2 # dNSName in GeneralName (RFC5280)",
          "145:             should_verify_common_name = false",
          "148:           when 7 # iPAddress in GeneralName (RFC5280)",
          "149:             should_verify_common_name = false",
          "150:             # follows GENERAL_NAME_print() in x509v3/v3_alt.c",
          "",
          "[Removed Lines]",
          "146:             reg = Regexp.escape(san.value).gsub(/\\\\\\*/, \"[^.]+\")",
          "147:             return true if /\\A#{reg}\\z/i =~ hostname",
          "",
          "[Added Lines]",
          "146:             return true if verify_hostname(hostname, san.value)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:       if should_verify_common_name",
          "160:         cert.subject.to_a.each{|oid, value|",
          "161:           if oid == \"CN\"",
          "164:           end",
          "165:         }",
          "166:       end",
          "",
          "[Removed Lines]",
          "162:             reg = Regexp.escape(value).gsub(/\\\\\\*/, \"[^.]+\")",
          "163:             return true if /\\A#{reg}\\z/i =~ hostname",
          "",
          "[Added Lines]",
          "161:             return true if verify_hostname(hostname, value)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:     end",
          "169:     module_function :verify_certificate_identity",
          "171:     class SSLSocket",
          "172:       include Buffering",
          "173:       include SocketForwarder",
          "174:       include Nonblock",
          "176:       def post_connection_check(hostname)",
          "177:         unless OpenSSL::SSL.verify_certificate_identity(peer_cert, hostname)",
          "178:           raise SSLError, \"hostname \\\"#{hostname}\\\" does not match the server certificate\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:     def verify_hostname(hostname, san) # :nodoc:",
          "170:       # RFC 5280, IA5String is limited to the set of ASCII characters",
          "171:       return false unless san.ascii_only?",
          "172:       return false unless hostname.ascii_only?",
          "174:       # See RFC 6125, section 6.4.1",
          "175:       # Matching is case-insensitive.",
          "176:       san_parts = san.downcase.split(\".\")",
          "178:       # TODO: this behavior should probably be more strict",
          "179:       return san == hostname if san_parts.size < 2",
          "181:       # Matching is case-insensitive.",
          "182:       host_parts = hostname.downcase.split(\".\")",
          "184:       # RFC 6125, section 6.4.3, subitem 2.",
          "185:       # If the wildcard character is the only character of the left-most",
          "186:       # label in the presented identifier, the client SHOULD NOT compare",
          "187:       # against anything but the left-most label of the reference",
          "188:       # identifier (e.g., *.example.com would match foo.example.com but",
          "189:       # not bar.foo.example.com or example.com).",
          "190:       return false unless san_parts.size == host_parts.size",
          "192:       # RFC 6125, section 6.4.3, subitem 1.",
          "193:       # The client SHOULD NOT attempt to match a presented identifier in",
          "194:       # which the wildcard character comprises a label other than the",
          "195:       # left-most label (e.g., do not match bar.*.example.net).",
          "196:       return false unless verify_wildcard(host_parts.shift, san_parts.shift)",
          "198:       san_parts.join(\".\") == host_parts.join(\".\")",
          "199:     end",
          "200:     module_function :verify_hostname",
          "202:     def verify_wildcard(domain_component, san_component) # :nodoc:",
          "203:       parts = san_component.split(\"*\", -1)",
          "205:       return false if parts.size > 2",
          "206:       return san_component == domain_component if parts.size == 1",
          "208:       # RFC 6125, section 6.4.3, subitem 3.",
          "209:       # The client SHOULD NOT attempt to match a presented identifier",
          "210:       # where the wildcard character is embedded within an A-label or",
          "211:       # U-label of an internationalized domain name.",
          "212:       return false if domain_component.start_with?(\"xn--\") && san_component != \"*\"",
          "214:       parts[0].length + parts[1].length < domain_component.length &&",
          "215:       domain_component.start_with?(parts[0]) &&",
          "216:       domain_component.end_with?(parts[1])",
          "217:     end",
          "218:     module_function :verify_wildcard",
          "225:       ##",
          "226:       # Perform hostname verification after an SSL connection is established",
          "227:       #",
          "228:       # This method MUST be called after calling #connect to ensure that the",
          "229:       # hostname of a remote peer has been verified.",
          "",
          "---------------"
        ],
        "test/openssl/test_ssl.rb||test/openssl/test_ssl.rb": [
          "File: test/openssl/test_ssl.rb -> test/openssl/test_ssl.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:     end",
          "360:   end",
          "362:   # Create NULL byte SAN certificate",
          "363:   def create_null_byte_SAN_certificate(critical = false)",
          "364:     ef = OpenSSL::X509::ExtensionFactory.new",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:   def test_verify_hostname",
          "363:     assert_equal(true,  OpenSSL::SSL.verify_hostname(\"www.example.com\", \"*.example.com\"))",
          "364:     assert_equal(false, OpenSSL::SSL.verify_hostname(\"www.subdomain.example.com\", \"*.example.com\"))",
          "365:   end",
          "367:   def test_verify_wildcard",
          "368:     assert_equal(false, OpenSSL::SSL.verify_wildcard(\"foo\", \"x*\"))",
          "369:     assert_equal(true,  OpenSSL::SSL.verify_wildcard(\"foo\", \"foo\"))",
          "370:     assert_equal(true,  OpenSSL::SSL.verify_wildcard(\"foo\", \"f*\"))",
          "371:     assert_equal(true,  OpenSSL::SSL.verify_wildcard(\"foo\", \"*\"))",
          "372:     assert_equal(false, OpenSSL::SSL.verify_wildcard(\"abc*bcd\", \"abcd\"))",
          "373:     assert_equal(false, OpenSSL::SSL.verify_wildcard(\"xn--qdk4b9b\", \"x*\"))",
          "374:     assert_equal(false, OpenSSL::SSL.verify_wildcard(\"xn--qdk4b9b\", \"*--qdk4b9b\"))",
          "375:     assert_equal(true,  OpenSSL::SSL.verify_wildcard(\"xn--qdk4b9b\", \"xn--qdk4b9b\"))",
          "376:   end",
          "378:   # Comments in this test is excerpted from http://tools.ietf.org/html/rfc6125#page-27",
          "379:   def test_post_connection_check_wildcard_san",
          "380:     # case-insensitive ASCII comparison",
          "381:     # RFC 6125, section 6.4.1",
          "382:     #",
          "383:     # \"..matching of the reference identifier against the presented identifier",
          "384:     # is performed by comparing the set of domain name labels using a",
          "385:     # case-insensitive ASCII comparison, as clarified by [DNS-CASE] (e.g.,",
          "386:     # \"WWW.Example.Com\" would be lower-cased to \"www.example.com\" for",
          "387:     # comparison purposes)",
          "388:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "389:       create_cert_with_san('DNS:*.example.com'), 'www.example.com'))",
          "390:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "391:       create_cert_with_san('DNS:*.Example.COM'), 'www.example.com'))",
          "392:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "393:       create_cert_with_san('DNS:*.example.com'), 'WWW.Example.COM'))",
          "394:     # 1.  The client SHOULD NOT attempt to match a presented identifier in",
          "395:     #     which the wildcard character comprises a label other than the",
          "396:     #     left-most label (e.g., do not match bar.*.example.net).",
          "397:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "398:       create_cert_with_san('DNS:www.*.com'), 'www.example.com'))",
          "399:     # 2.  If the wildcard character is the only character of the left-most",
          "400:     #     label in the presented identifier, the client SHOULD NOT compare",
          "401:     #     against anything but the left-most label of the reference",
          "402:     #     identifier (e.g., *.example.com would match foo.example.com but",
          "403:     #     not bar.foo.example.com or example.com).",
          "404:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "405:       create_cert_with_san('DNS:*.example.com'), 'foo.example.com'))",
          "406:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "407:       create_cert_with_san('DNS:*.example.com'), 'bar.foo.example.com'))",
          "408:     # 3.  The client MAY match a presented identifier in which the wildcard",
          "409:     #     character is not the only character of the label (e.g.,",
          "410:     #     baz*.example.net and *baz.example.net and b*z.example.net would",
          "411:     #     be taken to match baz1.example.net and foobaz.example.net and",
          "412:     #     buzz.example.net, respectively).  ...",
          "413:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "414:       create_cert_with_san('DNS:baz*.example.com'), 'baz1.example.com'))",
          "415:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "416:       create_cert_with_san('DNS:*baz.example.com'), 'foobaz.example.com'))",
          "417:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "418:       create_cert_with_san('DNS:b*z.example.com'), 'buzz.example.com'))",
          "419:     # Section 6.4.3 of RFC6125 states that client should NOT match identifier",
          "420:     # where wildcard is other than left-most label.",
          "421:     #",
          "422:     # Also implicitly mentions the wildcard character only in singular form,",
          "423:     # and discourages matching against more than one wildcard.",
          "424:     #",
          "425:     # See RFC 6125, section 7.2, subitem 2.",
          "426:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "427:       create_cert_with_san('DNS:*b*.example.com'), 'abc.example.com'))",
          "428:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "429:       create_cert_with_san('DNS:*b*.example.com'), 'ab.example.com'))",
          "430:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "431:       create_cert_with_san('DNS:*b*.example.com'), 'bc.example.com'))",
          "432:     #                                ...  However, the client SHOULD NOT",
          "433:     #   attempt to match a presented identifier where the wildcard",
          "434:     #   character is embedded within an A-label or U-label [IDNA-DEFS] of",
          "435:     #   an internationalized domain name [IDNA-PROTO].",
          "436:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "437:       create_cert_with_san('DNS:xn*.example.com'), 'xn1ca.example.com'))",
          "438:     # part of A-label",
          "439:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "440:       create_cert_with_san('DNS:xn--*.example.com'), 'xn--1ca.example.com'))",
          "441:     # part of U-label",
          "442:     # dNSName in RFC5280 is an IA5String so U-label should NOT be allowed",
          "443:     # regardless of wildcard.",
          "444:     #",
          "445:     # See Section 7.2 of RFC 5280:",
          "446:     #   IA5String is limited to the set of ASCII characters.",
          "447:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "448:       create_cert_with_san('DNS:\u00e1*.example.com'), '\u00e11.example.com'))",
          "449:   end",
          "451:   def test_post_connection_check_wildcard_cn",
          "452:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "453:       create_cert_with_name('*.example.com'), 'www.example.com'))",
          "454:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "455:       create_cert_with_name('*.Example.COM'), 'www.example.com'))",
          "456:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "457:       create_cert_with_name('*.example.com'), 'WWW.Example.COM'))",
          "458:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "459:       create_cert_with_name('www.*.com'), 'www.example.com'))",
          "460:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "461:       create_cert_with_name('*.example.com'), 'foo.example.com'))",
          "462:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "463:       create_cert_with_name('*.example.com'), 'bar.foo.example.com'))",
          "464:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "465:       create_cert_with_name('baz*.example.com'), 'baz1.example.com'))",
          "466:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "467:       create_cert_with_name('*baz.example.com'), 'foobaz.example.com'))",
          "468:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "469:       create_cert_with_name('b*z.example.com'), 'buzz.example.com'))",
          "470:     # Section 6.4.3 of RFC6125 states that client should NOT match identifier",
          "471:     # where wildcard is other than left-most label.",
          "472:     #",
          "473:     # Also implicitly mentions the wildcard character only in singular form,",
          "474:     # and discourages matching against more than one wildcard.",
          "475:     #",
          "476:     # See RFC 6125, section 7.2, subitem 2.",
          "477:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "478:       create_cert_with_name('*b*.example.com'), 'abc.example.com'))",
          "479:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "480:       create_cert_with_name('*b*.example.com'), 'ab.example.com'))",
          "481:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "482:       create_cert_with_name('*b*.example.com'), 'bc.example.com'))",
          "483:     assert_equal(true, OpenSSL::SSL.verify_certificate_identity(",
          "484:       create_cert_with_name('xn*.example.com'), 'xn1ca.example.com'))",
          "485:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "486:       create_cert_with_name('xn--*.example.com'), 'xn--1ca.example.com'))",
          "487:     # part of U-label",
          "488:     # Subject in RFC5280 states case-insensitive ASCII comparison.",
          "489:     #",
          "490:     # See Section 7.2 of RFC 5280:",
          "491:     #   IA5String is limited to the set of ASCII characters.",
          "492:     assert_equal(false, OpenSSL::SSL.verify_certificate_identity(",
          "493:       create_cert_with_name('\u00e1*.example.com'), '\u00e11.example.com'))",
          "494:   end",
          "496:   def create_cert_with_san(san)",
          "497:     ef = OpenSSL::X509::ExtensionFactory.new",
          "498:     cert = OpenSSL::X509::Certificate.new",
          "499:     cert.subject = OpenSSL::X509::Name.parse(\"/DC=some/DC=site/CN=Some Site\")",
          "500:     ext = ef.create_ext('subjectAltName', san)",
          "501:     cert.add_extension(ext)",
          "502:     cert",
          "503:   end",
          "505:   def create_cert_with_name(name)",
          "506:     cert = OpenSSL::X509::Certificate.new",
          "507:     cert.subject = OpenSSL::X509::Name.new([['DC', 'some'], ['DC', 'site'], ['CN', name]])",
          "508:     cert",
          "509:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.5\"",
          "2: #define RUBY_RELEASE_DATE \"2015-04-13\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 4",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 334",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 335",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0ed276516f30ea92adc101e051991bf007fa47f",
      "candidate_info": {
        "commit_hash": "b0ed276516f30ea92adc101e051991bf007fa47f",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/b0ed276516f30ea92adc101e051991bf007fa47f",
        "files": [
          "ChangeLog",
          "test/ruby/test_require.rb",
          "version.h"
        ],
        "message": "* test/ruby/test_require.rb (TestRequire#test_loading_fifo_threading):   ignore Errno::ENOENT on unlinking.  [Bug #11060]\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@51125 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "test/ruby/test_require.rb||test/ruby/test_require.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "test/ruby/test_require.rb||test/ruby/test_require.rb": [
          "File: test/ruby/test_require.rb -> test/ruby/test_require.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "691:   def test_loading_fifo_threading",
          "692:     Tempfile.create(%w'fifo .rb') {|f|",
          "693:       f.close",
          "695:       File.mkfifo(f.path)",
          "696:       assert_separately([\"-\", f.path], <<-END, timeout: 3)",
          "697:       th = Thread.current",
          "",
          "[Removed Lines]",
          "694:       File.unlink(f.path)",
          "",
          "[Added Lines]",
          "694:       File.unlink(f.path) rescue nil",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "2: #define RUBY_RELEASE_DATE \"2015-07-03\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 7",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 375",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 376",
          "",
          "---------------"
        ]
      }
    }
  ]
}