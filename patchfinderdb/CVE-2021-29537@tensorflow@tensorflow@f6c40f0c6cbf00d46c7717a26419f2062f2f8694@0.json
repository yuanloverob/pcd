{
  "cve_id": "CVE-2021-29537",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a heap buffer overflow in `QuantizedResizeBilinear` by passing in invalid thresholds for the quantization. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/50711818d2e61ccce012591eeb4fdf93a8496726/tensorflow/core/kernels/quantized_resize_bilinear_op.cc#L705-L706) assumes that the 2 arguments are always valid scalars and tries to access the numeric value directly. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "f6c40f0c6cbf00d46c7717a26419f2062f2f8694",
  "patch_info": {
    "commit_hash": "f6c40f0c6cbf00d46c7717a26419f2062f2f8694",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/f6c40f0c6cbf00d46c7717a26419f2062f2f8694",
    "files": [
      "tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
    ],
    "message": "Validate min and max arguments to `QuantizedResizeBilinear`.\n\nPiperOrigin-RevId: 369765091\nChange-Id: I33be8b78273ab7d08b97541692fe05cb7f94963a",
    "before_after_code_files": [
      "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc": [
      "File: tensorflow/core/kernels/quantized_resize_bilinear_op.cc -> tensorflow/core/kernels/quantized_resize_bilinear_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "702:   }",
      "704:   void Compute(OpKernelContext* context) override {",
      "708:     ImageResizerState st(align_corners_, false);",
      "709:     st.ValidateAndCreateOutput(context);",
      "",
      "[Removed Lines]",
      "705:     const float in_min = context->input(2).flat<float>()(0);",
      "706:     const float in_max = context->input(3).flat<float>()(0);",
      "",
      "[Added Lines]",
      "705:     const auto& in_min_tensor = context->input(2);",
      "706:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),",
      "707:                 errors::InvalidArgument(\"min must be a scalar\"));",
      "708:     const float in_min = in_min_tensor.flat<float>()(0);",
      "709:     const auto& in_max_tensor = context->input(3);",
      "710:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()),",
      "711:                 errors::InvalidArgument(\"max must be a scalar\"));",
      "712:     const float in_max = in_max_tensor.flat<float>()(0);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2261a3ec3c70bd774789370b7d40f84d9e95e008",
      "candidate_info": {
        "commit_hash": "2261a3ec3c70bd774789370b7d40f84d9e95e008",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2261a3ec3c70bd774789370b7d40f84d9e95e008",
        "files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ],
        "message": "Cherrypick:Validate min and max arguments to .",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc": [
          "File: tensorflow/core/kernels/quantized_resize_bilinear_op.cc -> tensorflow/core/kernels/quantized_resize_bilinear_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:   void Compute(OpKernelContext* context) override {",
          "703:     const Tensor& input = context->input(0);",
          "707:     ImageResizerState st(align_corners_, false);",
          "708:     st.ValidateAndCreateOutput(context, input);",
          "",
          "[Removed Lines]",
          "704:     const float in_min = context->input(2).flat<float>()(0);",
          "705:     const float in_max = context->input(3).flat<float>()(0);",
          "",
          "[Added Lines]",
          "704:     const auto& in_min_tensor = context->input(2);",
          "705:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),",
          "706:                 errors::InvalidArgument(\"min must be a scalar\"));",
          "707:     const float in_min = in_min_tensor.flat<float>()(0);",
          "708:     const auto& in_max_tensor = context->input(3);",
          "709:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()),",
          "710:                 errors::InvalidArgument(\"max must be a scalar\"));",
          "711:     const float in_max = in_max_tensor.flat<float>()(0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e6b6ef241130629b057edcb679ee523a9561721",
      "candidate_info": {
        "commit_hash": "3e6b6ef241130629b057edcb679ee523a9561721",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3e6b6ef241130629b057edcb679ee523a9561721",
        "files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ],
        "message": "Cherrypick:Validate min and max arguments to .",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc": [
          "File: tensorflow/core/kernels/quantized_resize_bilinear_op.cc -> tensorflow/core/kernels/quantized_resize_bilinear_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:   void Compute(OpKernelContext* context) override {",
          "703:     const Tensor& input = context->input(0);",
          "707:     ImageResizerState st(align_corners_, false);",
          "708:     st.ValidateAndCreateOutput(context, input);",
          "",
          "[Removed Lines]",
          "704:     const float in_min = context->input(2).flat<float>()(0);",
          "705:     const float in_max = context->input(3).flat<float>()(0);",
          "",
          "[Added Lines]",
          "704:     const auto& in_min_tensor = context->input(2);",
          "705:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),",
          "706:                 errors::InvalidArgument(\"min must be a scalar\"));",
          "707:     const float in_min = in_min_tensor.flat<float>()(0);",
          "708:     const auto& in_max_tensor = context->input(3);",
          "709:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()),",
          "710:                 errors::InvalidArgument(\"max must be a scalar\"));",
          "711:     const float in_max = in_max_tensor.flat<float>()(0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd0073e2935a4e6ed9460922e2c38408340f1212",
      "candidate_info": {
        "commit_hash": "bd0073e2935a4e6ed9460922e2c38408340f1212",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/bd0073e2935a4e6ed9460922e2c38408340f1212",
        "files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ],
        "message": "CherryPick:2.5",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc": [
          "File: tensorflow/core/kernels/quantized_resize_bilinear_op.cc -> tensorflow/core/kernels/quantized_resize_bilinear_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:   void Compute(OpKernelContext* context) override {",
          "705:     const Tensor& input = context->input(0);",
          "709:     ImageResizerState st(align_corners_, false);",
          "710:     st.ValidateAndCreateOutput(context, input);",
          "",
          "[Removed Lines]",
          "706:     const float in_min = context->input(2).flat<float>()(0);",
          "707:     const float in_max = context->input(3).flat<float>()(0);",
          "",
          "[Added Lines]",
          "706:     const auto& in_min_tensor = context->input(2);",
          "707:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),",
          "708:                 errors::InvalidArgument(\"min must be a scalar\"));",
          "709:     const float in_min = in_min_tensor.flat<float>()(0);",
          "710:     const auto& in_max_tensor = context->input(3);",
          "711:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()),",
          "712:                 errors::InvalidArgument(\"max must be a scalar\"));",
          "713:     const float in_max = in_max_tensor.flat<float>()(0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15abb89a1babaf00710ea7d92913fafd5d893dc5",
      "candidate_info": {
        "commit_hash": "15abb89a1babaf00710ea7d92913fafd5d893dc5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/15abb89a1babaf00710ea7d92913fafd5d893dc5",
        "files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ],
        "message": "Cherrypick:Validate min and max arguments to .",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc": [
          "File: tensorflow/core/kernels/quantized_resize_bilinear_op.cc -> tensorflow/core/kernels/quantized_resize_bilinear_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:   void Compute(OpKernelContext* context) override {",
          "703:     const Tensor& input = context->input(0);",
          "707:     ImageResizerState st(align_corners_, false);",
          "708:     st.ValidateAndCreateOutput(context, input);",
          "",
          "[Removed Lines]",
          "704:     const float in_min = context->input(2).flat<float>()(0);",
          "705:     const float in_max = context->input(3).flat<float>()(0);",
          "",
          "[Added Lines]",
          "704:     const auto& in_min_tensor = context->input(2);",
          "705:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),",
          "706:                 errors::InvalidArgument(\"min must be a scalar\"));",
          "707:     const float in_min = in_min_tensor.flat<float>()(0);",
          "708:     const auto& in_max_tensor = context->input(3);",
          "709:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()),",
          "710:                 errors::InvalidArgument(\"max must be a scalar\"));",
          "711:     const float in_max = in_max_tensor.flat<float>()(0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "877d5fc1b2306af6202473b2ad62932b9ea953b7",
      "candidate_info": {
        "commit_hash": "877d5fc1b2306af6202473b2ad62932b9ea953b7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/877d5fc1b2306af6202473b2ad62932b9ea953b7",
        "files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ],
        "message": "Cherrypick:Validate min and max arguments to .",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_resize_bilinear_op.cc||tensorflow/core/kernels/quantized_resize_bilinear_op.cc": [
          "File: tensorflow/core/kernels/quantized_resize_bilinear_op.cc -> tensorflow/core/kernels/quantized_resize_bilinear_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:   void Compute(OpKernelContext* context) override {",
          "703:     const Tensor& input = context->input(0);",
          "707:     ImageResizerState st(align_corners_, false);",
          "708:     st.ValidateAndCreateOutput(context, input);",
          "",
          "[Removed Lines]",
          "704:     const float in_min = context->input(2).flat<float>()(0);",
          "705:     const float in_max = context->input(3).flat<float>()(0);",
          "",
          "[Added Lines]",
          "704:     const auto& in_min_tensor = context->input(2);",
          "705:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()),",
          "706:                 errors::InvalidArgument(\"min must be a scalar\"));",
          "707:     const float in_min = in_min_tensor.flat<float>()(0);",
          "708:     const auto& in_max_tensor = context->input(3);",
          "709:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()),",
          "710:                 errors::InvalidArgument(\"max must be a scalar\"));",
          "711:     const float in_max = in_max_tensor.flat<float>()(0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}