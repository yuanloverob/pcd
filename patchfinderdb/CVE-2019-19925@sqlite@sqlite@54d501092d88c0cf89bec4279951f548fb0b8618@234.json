{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "df9d32441a3d2abf62ecfec60f2605dc1630b76b",
      "candidate_info": {
        "commit_hash": "df9d32441a3d2abf62ecfec60f2605dc1630b76b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/df9d32441a3d2abf62ecfec60f2605dc1630b76b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/expr.c",
          "src/parse.y",
          "src/prepare.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbeaux.c",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test",
          "test/filter2.tcl",
          "test/filter2.test",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Add support for attaching a FILTER clause to an aggregate function.\n\nFossilOrigin-Name: ee293e5aeac0b05a8b809095610fd8b4fdaf8e68cd368de90ec0d45e3582ffe5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/prepare.c||src/prepare.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test",
          "test/filter2.tcl||test/filter2.tcl",
          "test/filter2.test||test/filter2.test",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d7287e1bfdd5a392bf2fb17699e7cfd0b08bf61fab6cbf4b4bb347b3c4b4610",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8307:   VVA_ONLY( int balance_deeper_called = 0 );",
          "8309:   do {",
          "8311:     MemPage *pPage = pCur->pPage;",
          "8313:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "8315:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8310:     int iPage = pCur->iPage;",
          "8314:     if( iPage==0 ){",
          "",
          "[Added Lines]",
          "8310:     int iPage;",
          "8314:     if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8315:       break;",
          "8316:     }else if( (iPage = pCur->iPage)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8332:       }else{",
          "8333:         break;",
          "8334:       }",
          "8337:     }else{",
          "8338:       MemPage * const pParent = pCur->apPage[iPage-1];",
          "8339:       int const iIdx = pCur->aiIdx[iPage-1];",
          "",
          "[Removed Lines]",
          "8335:     }else if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8336:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1040:     assert( p->x.pList==0 || p->pRight==0 );",
          "1041:     if( p->pLeft && p->op!=TK_SELECT_COLUMN ) sqlite3ExprDeleteNN(db, p->pLeft);",
          "1042:     if( p->pRight ){",
          "1043:       sqlite3ExprDeleteNN(db, p->pRight);",
          "1044:     }else if( ExprHasProperty(p, EP_xIsSelect) ){",
          "1045:       sqlite3SelectDelete(db, p->x.pSelect);",
          "1046:     }else{",
          "1047:       sqlite3ExprListDelete(db, p->x.pList);",
          "1052:     }",
          "1053:   }",
          "1054:   if( ExprHasProperty(p, EP_MemToken) ) sqlite3DbFree(db, p->u.zToken);",
          "",
          "[Removed Lines]",
          "1048:     }",
          "1049:     if( ExprHasProperty(p, EP_WinFunc) ){",
          "1050:       assert( p->op==TK_FUNCTION );",
          "1051:       sqlite3WindowDelete(db, p->y.pWin);",
          "",
          "[Added Lines]",
          "1043:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1046:       assert( !ExprHasProperty(p, EP_WinFunc) );",
          "1050: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1051:       if( ExprHasProperty(p, EP_WinFunc) ){",
          "1052:         sqlite3WindowDelete(db, p->y.pWin);",
          "1053:       }",
          "1054: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1334: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1337:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1338:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1339:   }",
          "",
          "[Removed Lines]",
          "1335:   if( pExpr->op==TK_FUNCTION && pExpr->y.pWin!=0 ){",
          "1336:     assert( ExprHasProperty(pExpr, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1338:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1339:     assert( pExpr->y.pWin );",
          "1340:     assert( IsWindowFunc(pExpr) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4839:     return 2;",
          "4840:   }",
          "4841:   if( pA->op!=TK_COLUMN && pA->op!=TK_AGG_COLUMN && pA->u.zToken ){",
          "4843:       if( sqlite3StrICmp(pA->u.zToken,pB->u.zToken)!=0 ) return 2;",
          "4844: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4854:       if( ExprHasProperty(pA,EP_WinFunc) ){",
          "4856:       }",
          "4857: #endif",
          "4858:     }else if( pA->op==TK_NULL ){",
          "",
          "[Removed Lines]",
          "4842:     if( pA->op==TK_FUNCTION ){",
          "4853:       assert( ExprHasProperty(pA,EP_WinFunc)==ExprHasProperty(pB,EP_WinFunc) );",
          "4855:         if( sqlite3WindowCompare(pParse,pA->y.pWin,pB->y.pWin)!=0 ) return 2;",
          "",
          "[Added Lines]",
          "4846:     if( pA->op==TK_FUNCTION || pA->op==TK_AGG_FUNCTION ){",
          "4849:       assert( pA->op==pB->op );",
          "4850:       if( ExprHasProperty(pA,EP_WinFunc)!=ExprHasProperty(pB,EP_WinFunc) ){",
          "4851:         return 2;",
          "4852:       }",
          "4854:         if( sqlite3WindowCompare(pParse, pA->y.pWin, pB->y.pWin, 1)!=0 ){",
          "4855:           return 2;",
          "4856:         }",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1048:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1050: }",
          "1052:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "1054: }",
          "",
          "[Removed Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP over_clause(Z). {",
          "1051: expr(A) ::= id(X) LP STAR RP over_clause(Z). {",
          "",
          "[Added Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_over(Z). {",
          "1051: expr(A) ::= id(X) LP STAR RP filter_over(Z). {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657: %type part_opt {ExprList*}",
          "1658: %destructor part_opt {sqlite3ExprListDelete(pParse->db, $$);}",
          "1663: %type range_or_rows {int}",
          "",
          "[Removed Lines]",
          "1660: %type filter_opt {Expr*}",
          "1661: %destructor filter_opt {sqlite3ExprDelete(pParse->db, $$);}",
          "",
          "[Added Lines]",
          "1660: %type filter_clause {Expr*}",
          "1661: %destructor filter_clause {sqlite3ExprDelete(pParse->db, $$);}",
          "1663: %type over_clause {Window*}",
          "1664: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1666: %type filter_over {Window*}",
          "1667: %destructor filter_over {sqlite3WindowDelete(pParse->db, $$);}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1724: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1725: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1730:   A = Z;",
          "1731:   assert( A!=0 );",
          "1733: }",
          "1735:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1736:   if( A ){",
          "1737:     A->zName = sqlite3DbStrNDup(pParse->db, Z.z, Z.n);",
          "1741:   }",
          "1742: }",
          "",
          "[Removed Lines]",
          "1727: %type over_clause {Window*}",
          "1728: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1729: over_clause(A) ::= filter_opt(W) OVER LP window(Z) RP. {",
          "1732:   A->pFilter = W;",
          "1734: over_clause(A) ::= filter_opt(W) OVER nm(Z). {",
          "1738:     A->pFilter = W;",
          "1739:   }else{",
          "1740:     sqlite3ExprDelete(pParse->db, W);",
          "1744: filter_opt(A) ::= .                            { A = 0; }",
          "1745: filter_opt(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "[Added Lines]",
          "1733: filter_over(A) ::= filter_clause(F) over_clause(O). {",
          "1734:   O->pFilter = F;",
          "1735:   A = O;",
          "1736: }",
          "1737: filter_over(A) ::= over_clause(O). {",
          "1738:   A = O;",
          "1739: }",
          "1740: filter_over(A) ::= filter_clause(F). {",
          "1741:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1742:   if( A ){",
          "1743:     A->eFrmType = TK_FILTER;",
          "1744:     A->pFilter = F;",
          "1745:   }",
          "1746: }",
          "1748: over_clause(A) ::= OVER LP window(Z) RP. {",
          "1752: over_clause(A) ::= OVER nm(Z). {",
          "1759: filter_clause(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "635:   rc = sParse.rc;",
          "637: #ifndef SQLITE_OMIT_EXPLAIN",
          "639:     static const char * const azColName[] = {",
          "640:        \"addr\", \"opcode\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"comment\",",
          "641:        \"id\", \"parent\", \"notused\", \"detail\"",
          "",
          "[Removed Lines]",
          "638:   if( rc==SQLITE_OK && sParse.pVdbe && sParse.explain ){",
          "",
          "[Added Lines]",
          "638:   if( sParse.explain && rc==SQLITE_OK && sParse.pVdbe ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:   if( db->init.busy==0 ){",
          "661:     sqlite3VdbeSetSql(sParse.pVdbe, zSql, (int)(sParse.zTail-zSql), prepFlags);",
          "662:   }",
          "665:     assert(!(*ppStmt));",
          "666:   }else{",
          "",
          "[Removed Lines]",
          "663:   if( sParse.pVdbe && (rc!=SQLITE_OK || db->mallocFailed) ){",
          "664:     sqlite3VdbeFinalize(sParse.pVdbe);",
          "",
          "[Added Lines]",
          "663:   if( rc!=SQLITE_OK || db->mallocFailed ){",
          "664:     if( sParse.pVdbe ) sqlite3VdbeFinalize(sParse.pVdbe);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:       int savedAllowFlags = (pNC->ncFlags & (NC_AllowAgg | NC_AllowWin));",
          "753:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "754:       zId = pExpr->u.zToken;",
          "755:       nId = sqlite3Strlen30(zId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "753:       Window *pWin = (IsWindowFunc(pExpr) ? pExpr->y.pWin : 0);",
          "754: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "830:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "831:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "832:         );",
          "834:           sqlite3ErrorMsg(pParse,",
          "835:               \"%.*s() may not be used as a window function\", nId, zId",
          "836:           );",
          "837:           pNC->nErr++;",
          "838:         }else if(",
          "839:               (is_agg && (pNC->ncFlags & NC_AllowAgg)==0)",
          "842:         ){",
          "843:           const char *zType;",
          "845:             zType = \"window\";",
          "846:           }else{",
          "847:             zType = \"aggregate\";",
          "",
          "[Removed Lines]",
          "833:         if( pDef && pDef->xValue==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "840:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pExpr->y.pWin)",
          "841:            || (is_agg && pExpr->y.pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "844:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pExpr->y.pWin ){",
          "",
          "[Added Lines]",
          "835:         if( pDef && pDef->xValue==0 && pWin ){",
          "842:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pWin)",
          "843:            || (is_agg && pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "846:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pWin ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "850:           pNC->nErr++;",
          "851:           is_agg = 0;",
          "852:         }",
          "853: #else",
          "854:         if( (is_agg && (pNC->ncFlags & NC_AllowAgg)==0) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "855:           assert( !IsWindowFunc(pExpr) );",
          "856:           sqlite3ErrorMsg(pParse,",
          "857:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "858:               nId, zId",
          "859:           );",
          "860:           pNC->nErr++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "876: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "878: #else",
          "879:           pNC->ncFlags &= ~NC_AllowAgg;",
          "880: #endif",
          "",
          "[Removed Lines]",
          "877:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "[Added Lines]",
          "886:           pNC->ncFlags &= ~(NC_AllowWin | (!pWin ? NC_AllowAgg : 0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "883:       sqlite3WalkExprList(pWalker, pList);",
          "884:       if( is_agg ){",
          "885: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "887:           Select *pSel = pNC->pWinSelect;",
          "888:           if( IN_RENAME_OBJECT==0 ){",
          "890:           }",
          "894:           if( 0==pSel->pWin",
          "896:           ){",
          "897:             pExpr->y.pWin->pNextWin = pSel->pWin;",
          "898:             pSel->pWin = pExpr->y.pWin;",
          "",
          "[Removed Lines]",
          "886:         if( pExpr->y.pWin ){",
          "889:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "891:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "892:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "893:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "895:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pExpr->y.pWin)",
          "",
          "[Added Lines]",
          "895:         if( pWin ){",
          "898:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "900:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "901:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "902:           sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "904:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "904:           NameContext *pNC2 = pNC;",
          "905:           pExpr->op = TK_AGG_FUNCTION;",
          "906:           pExpr->op2 = 0;",
          "907:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "908:             pExpr->op2++;",
          "909:             pNC2 = pNC2->pNext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "917:           if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "918:             sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "919:           }",
          "920: #endif",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4404:   assert( *ppMinMax==0 );",
          "4405:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4407:   zFunc = pFunc->u.zToken;",
          "4408:   if( sqlite3StrICmp(zFunc, \"min\")==0 ){",
          "4409:     eRet = WHERE_ORDERBY_MIN;",
          "",
          "[Removed Lines]",
          "4406:   if( pEList==0 || pEList->nExpr!=1 ) return eRet;",
          "",
          "[Added Lines]",
          "4406:   assert( !IsWindowFunc(pFunc) );",
          "4407:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_WinFunc) ){",
          "4408:     return eRet;",
          "4409:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4450:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4451:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4452:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4455:   return pTab;",
          "4456: }",
          "",
          "[Removed Lines]",
          "4453:   if( pExpr->flags&EP_Distinct ) return 0;",
          "",
          "[Added Lines]",
          "4456:   if( ExprHasProperty(pExpr, EP_Distinct|EP_WinFunc) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5330:     int regAgg;",
          "5331:     ExprList *pList = pF->pExpr->x.pList;",
          "5332:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5333:     if( pList ){",
          "5334:       nArg = pList->nExpr;",
          "5335:       regAgg = sqlite3GetTempRange(pParse, nArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5336:     assert( !IsWindowFunc(pF->pExpr) );",
          "5337:     if( ExprHasProperty(pF->pExpr, EP_WinFunc) ){",
          "5338:       Expr *pFilter = pF->pExpr->y.pWin->pFilter;",
          "5339:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5340:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5341:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5339:       regAgg = 0;",
          "5340:     }",
          "5341:     if( pF->iDistinct>=0 ){",
          "5345:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5342:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Added Lines]",
          "5351:       if( addrNext==0 ){",
          "5352:         addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5353:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6222:       minMaxFlag = WHERE_ORDERBY_NORMAL;",
          "6223:     }",
          "6224:     for(i=0; i<sAggInfo.nFunc; i++){",
          "6226:       sNC.ncFlags |= NC_InAggFunc;",
          "6228:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6229:     }",
          "6230:     sAggInfo.mxReg = pParse->nMem;",
          "",
          "[Removed Lines]",
          "6225:       assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );",
          "6227:       sqlite3ExprAnalyzeAggList(&sNC, sAggInfo.aFunc[i].pExpr->x.pList);",
          "",
          "[Added Lines]",
          "6236:       Expr *pExpr = sAggInfo.aFunc[i].pExpr;",
          "6237:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "6239:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6240: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6241:       assert( !IsWindowFunc(pExpr) );",
          "6242:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "6243:         sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pWin->pFilter);",
          "6244:       }",
          "6245: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2586: #define IsWindowFunc(p) ( \\",
          "2587:     ExprHasProperty((p), EP_WinFunc) && p->y.pWin->eFrmType!=TK_FILTER \\",
          "2588: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3603: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3604: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3605: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3607: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3608: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "3609: int sqlite3WindowRewrite(Parse*, Select*);",
          "",
          "[Removed Lines]",
          "3606: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "",
          "[Added Lines]",
          "3619: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4607:     nCmp = MIN( pPKey2->aMem[0].n, nStr );",
          "4608:     res = memcmp(&aKey1[szHdr], pPKey2->aMem[0].z, nCmp);",
          "4611:       res = nStr - pPKey2->aMem[0].n;",
          "4612:       if( res==0 ){",
          "4613:         if( pPKey2->nField>1 ){",
          "",
          "[Removed Lines]",
          "4610:     if( res==0 ){",
          "",
          "[Added Lines]",
          "4610:     if( res>0 ){",
          "4611:       res = pPKey2->r2;",
          "4612:     }else if( res<0 ){",
          "4613:       res = pPKey2->r1;",
          "4614:     }else{",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4621:       }else{",
          "4622:         res = pPKey2->r1;",
          "4623:       }",
          "4628:     }",
          "4629:   }",
          "",
          "[Removed Lines]",
          "4624:     }else if( res>0 ){",
          "4625:       res = pPKey2->r2;",
          "4626:     }else{",
          "4627:       res = pPKey2->r1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:       if( pExpr->pLeft && walkExpr(pWalker, pExpr->pLeft) ) return WRC_Abort;",
          "64:        assert( pExpr->x.pList==0 || pExpr->pRight==0 );",
          "65:       if( pExpr->pRight ){",
          "66:         pExpr = pExpr->pRight;",
          "67:         continue;",
          "68:       }else if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "69:         if( sqlite3WalkSelect(pWalker, pExpr->x.pSelect) ) return WRC_Abort;",
          "73: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "77: #endif",
          "78:     }",
          "79:     break;",
          "80:   }",
          "",
          "[Removed Lines]",
          "70:       }else if( pExpr->x.pList ){",
          "71:         if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "72:       }",
          "74:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "76:       }",
          "",
          "[Added Lines]",
          "66:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "70:         assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "72:       }else{",
          "73:         if( pExpr->x.pList ){",
          "74:           if( sqlite3WalkExprList(pWalker, pExpr->x.pList) ) return WRC_Abort;",
          "75:         }",
          "77:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "78:           if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "79:         }",
          "81:       }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1196: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1197:   if( p ){",
          "1198:     assert( p->op==TK_FUNCTION );",
          "1210:     }",
          "1211:   }else{",
          "1212:     sqlite3WindowDelete(pParse->db, pWin);",
          "",
          "[Removed Lines]",
          "1202:     if( ALWAYS(pWin) ){",
          "1203:       p->y.pWin = pWin;",
          "1204:       ExprSetProperty(p, EP_WinFunc);",
          "1205:       pWin->pOwner = p;",
          "1206:       if( p->flags & EP_Distinct ){",
          "1207:         sqlite3ErrorMsg(pParse,",
          "1208:            \"DISTINCT is not supported for window functions\");",
          "1209:       }",
          "",
          "[Added Lines]",
          "1199:     assert( pWin );",
          "1200:     p->y.pWin = pWin;",
          "1201:     ExprSetProperty(p, EP_WinFunc);",
          "1202:     pWin->pOwner = p;",
          "1203:     if( (p->flags & EP_Distinct) && pWin->eFrmType!=TK_FILTER ){",
          "1204:       sqlite3ErrorMsg(pParse,",
          "1205:           \"DISTINCT is not supported for window functions\"",
          "1206:       );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1221:   if( p1->eFrmType!=p2->eFrmType ) return 1;",
          "1222:   if( p1->eStart!=p2->eStart ) return 1;",
          "1223:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "",
          "[Removed Lines]",
          "1220: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2){",
          "",
          "[Added Lines]",
          "1217: int sqlite3WindowCompare(Parse *pParse, Window *p1, Window *p2, int bFilter){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1226:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1227:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "1228:   if( sqlite3ExprListCompare(p1->pOrderBy, p2->pOrderBy, -1) ) return 1;",
          "1229:   return 0;",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1226:   if( bFilter ){",
          "1227:     if( sqlite3ExprCompare(pParse, p1->pFilter, p2->pFilter, -1) ) return 1;",
          "1228:   }",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix filter1",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a);",
          "25:   CREATE INDEX i1 ON t1(a);",
          "26:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "27: }",
          "29: do_execsql_test 1.1 { SELECT sum(a) FROM t1; } 45",
          "30: do_execsql_test 1.2 { SELECT sum(a) FILTER( WHERE a<5 ) FROM t1; } 10",
          "32: do_execsql_test 1.3 {",
          "33:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "34:          sum(a) FILTER( WHERE a>8 ),",
          "35:          sum(a) FILTER( WHERE a>7 ),",
          "36:          sum(a) FILTER( WHERE a>6 ),",
          "37:          sum(a) FILTER( WHERE a>5 ),",
          "38:          sum(a) FILTER( WHERE a>4 ),",
          "39:          sum(a) FILTER( WHERE a>3 ),",
          "40:          sum(a) FILTER( WHERE a>2 ),",
          "41:          sum(a) FILTER( WHERE a>1 ),",
          "42:          sum(a) FILTER( WHERE a>0 )",
          "43:   FROM t1;",
          "44: } {{} 9 17 24 30 35 39 42 44 45}",
          "46: do_execsql_test 1.4 {",
          "47:   SELECT max(a) FILTER (WHERE (a % 2)==0) FROM t1",
          "48: } {8}",
          "50: do_execsql_test 1.5 {",
          "51:   SELECT min(a) FILTER (WHERE a>4) FROM t1",
          "52: } {5}",
          "54: do_execsql_test 1.6 {",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "58: do_execsql_test 1.7 {",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "62: do_execsql_test 1.8 {",
          "63:   CREATE VIEW vv AS",
          "64:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "65:          sum(a) FILTER( WHERE a>8 ),",
          "66:          sum(a) FILTER( WHERE a>7 ),",
          "67:          sum(a) FILTER( WHERE a>6 ),",
          "68:          sum(a) FILTER( WHERE a>5 ),",
          "69:          sum(a) FILTER( WHERE a>4 ),",
          "70:          sum(a) FILTER( WHERE a>3 ),",
          "71:          sum(a) FILTER( WHERE a>2 ),",
          "72:          sum(a) FILTER( WHERE a>1 ),",
          "73:          sum(a) FILTER( WHERE a>0 )",
          "74:   FROM t1;",
          "75:   SELECT * FROM vv;",
          "76: } {{} 9 17 24 30 35 39 42 44 45}",
          "79: #-------------------------------------------------------------------------",
          "80: # Test some errors:",
          "81: #",
          "82: #   .1 FILTER on a non-aggregate function,",
          "83: #   .2 Window function in FILTER clause,",
          "84: #   .3 Aggregate function in FILTER clause,",
          "85: #",
          "86: reset_db",
          "87: do_execsql_test 2.0 {",
          "88:   CREATE TABLE t1(a);",
          "89:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "90: }",
          "92: do_catchsql_test 2.1 {",
          "93:   SELECT upper(a) FILTER (WHERE a=1) FROM t1",
          "94: } {1 {filter clause may not be used with non-aggregate upper()}}",
          "96: do_catchsql_test 2.2 {",
          "97:   SELECT sum(a) FILTER (WHERE 1 - max(a) OVER () > 0) FROM t1",
          "98: } {1 {misuse of window function max()}}",
          "100: do_catchsql_test 2.3 {",
          "101:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "102: } {1 {misuse of aggregate function count()}}",
          "104: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.tcl||test/filter2.tcl": [
          "File: test/filter2.tcl -> test/filter2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "18: start_test filter2 \"2019 July 2\"",
          "20: ifcapable !windowfunc",
          "22: execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t1;",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "27:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "28:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "29:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "30:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "31:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "32:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "33: }",
          "35: execsql_test 1.1 { SELECT sum(b) FROM t1 }",
          "37: execsql_test 1.2 { SELECT sum(b) FILTER (WHERE a<10) FROM t1 }",
          "39: execsql_test 1.3 { SELECT count(DISTINCT b) FROM t1 }",
          "41: execsql_test 1.4 { SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1 }",
          "43: execsql_test 1.5 {",
          "44:   SELECT min(b) FILTER (WHERE a>19),",
          "45:          min(b) FILTER (WHERE a>0),",
          "46:          max(a+b) FILTER (WHERE a>19),",
          "47:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "48:   FROM t1;",
          "49: }",
          "51: execsql_test 1.6 {",
          "52:   SELECT min(b),",
          "53:          min(b),",
          "54:          max(a+b),",
          "55:          max(b+a)",
          "56:   FROM t1",
          "57:   GROUP BY (a%10)",
          "58:   ORDER BY 1, 2, 3, 4;",
          "59: }",
          "61: execsql_test 1.7 {",
          "62:   SELECT min(b) FILTER (WHERE a>19),",
          "63:          min(b) FILTER (WHERE a>0),",
          "64:          max(a+b) FILTER (WHERE a>19),",
          "65:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "66:   FROM t1",
          "67:   GROUP BY (a%10)",
          "68:   ORDER BY 1, 2, 3, 4;",
          "69: }",
          "71: execsql_test 1.8 {",
          "72:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "73: }",
          "75: execsql_test 1.9 {",
          "76:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "77:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "78:   ORDER BY 1",
          "79: }",
          "81: execsql_test 1.10 {",
          "82:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "83:   FROM t1",
          "84:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "85:   ORDER BY 1",
          "86: }",
          "88: execsql_test 1.11 {",
          "89:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "90:   FROM t1",
          "91:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "92:   ORDER BY 2",
          "93: }",
          "95: execsql_test 1.12 {",
          "96:   SELECT (a%5),",
          "97:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "98:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "99:   FROM t1 GROUP BY (a%5)",
          "100:   ORDER BY 2",
          "101: }",
          "103: execsql_test 1.13 {",
          "104:   SELECT",
          "105:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "106:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "107:     count(*) FILTER (WHERE b%2!=0),",
          "108:     count(*) FILTER (WHERE b%2!=1)",
          "109:   FROM t1;",
          "110: }",
          "112: execsql_float_test 1.14 {",
          "113:   SELECT",
          "114:     avg(b) FILTER (WHERE b>a),",
          "115:     avg(b) FILTER (WHERE b<a)",
          "116:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;",
          "117: }",
          "119: execsql_test 1.15 {",
          "120:   SELECT",
          "121:     a/5,",
          "122:     sum(b) FILTER (WHERE a%5=0),",
          "123:     sum(b) FILTER (WHERE a%5=1),",
          "124:     sum(b) FILTER (WHERE a%5=2),",
          "125:     sum(b) FILTER (WHERE a%5=3),",
          "126:     sum(b) FILTER (WHERE a%5=4)",
          "127:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "128: }",
          "130: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.test||test/filter2.test": [
          "File: test/filter2.test -> test/filter2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 2",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix filter2",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "26:   INSERT INTO t1 VALUES",
          "27:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "28:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "29:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "30:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "31:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "32:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "33:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "34: } {}",
          "36: do_execsql_test 1.1 {",
          "37:   SELECT sum(b) FROM t1",
          "38: } {1041}",
          "40: do_execsql_test 1.2 {",
          "41:   SELECT sum(b) FILTER (WHERE a<10) FROM t1",
          "42: } {141}",
          "44: do_execsql_test 1.3 {",
          "45:   SELECT count(DISTINCT b) FROM t1",
          "46: } {31}",
          "48: do_execsql_test 1.4 {",
          "49:   SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1",
          "50: } {31}",
          "52: do_execsql_test 1.5 {",
          "53:   SELECT min(b) FILTER (WHERE a>19),",
          "54:          min(b) FILTER (WHERE a>0),",
          "55:          max(a+b) FILTER (WHERE a>19),",
          "56:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "57:   FROM t1;",
          "58: } {3 3 88 85}",
          "60: do_execsql_test 1.6 {",
          "61:   SELECT min(b),",
          "62:          min(b),",
          "63:          max(a+b),",
          "64:          max(b+a)",
          "65:   FROM t1",
          "66:   GROUP BY (a%10)",
          "67:   ORDER BY 1, 2, 3, 4;",
          "68: } {3 3 58 58   3 3 66 66   3 3 71 71   3 3 88 88   4 4 61 61   5 5 54 54",
          "69:   7 7 85 85   11 11 79 79   16 16 81 81   24 24 68 68}",
          "71: do_execsql_test 1.7 {",
          "72:   SELECT min(b) FILTER (WHERE a>19),",
          "73:          min(b) FILTER (WHERE a>0),",
          "74:          max(a+b) FILTER (WHERE a>19),",
          "75:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "76:   FROM t1",
          "77:   GROUP BY (a%10)",
          "78:   ORDER BY 1, 2, 3, 4;",
          "79: } {3 3 58 58   3 3 71 39   4 4 38 61   7 7 85 85   11 5 54 45   16 16 81 81",
          "80:   18 3 66 61   21 3 88 68   23 11 79 79   24 24 68 68}",
          "82: do_execsql_test 1.8 {",
          "83:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "84: } {{}}",
          "86: do_execsql_test 1.9 {",
          "87:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "88:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "89:   ORDER BY 1",
          "90: } {3   4}",
          "92: do_execsql_test 1.10 {",
          "93:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "94:   FROM t1",
          "95:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "96:   ORDER BY 1",
          "97: } {3 49   4 46}",
          "99: do_execsql_test 1.11 {",
          "100:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "101:   FROM t1",
          "102:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "103:   ORDER BY 2",
          "104: } {4 46   3 49}",
          "106: do_execsql_test 1.12 {",
          "107:   SELECT (a%5),",
          "108:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "109:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "110:   FROM t1 GROUP BY (a%5)",
          "111:   ORDER BY 2",
          "112: } {2 25 3   0 34 2   1 34 4   4 46 4   3 49 5}",
          "114: do_execsql_test 1.13 {",
          "115:   SELECT",
          "116:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "117:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "118:     count(*) FILTER (WHERE b%2!=0),",
          "119:     count(*) FILTER (WHERE b%2!=1)",
          "120:   FROM t1;",
          "121: } {7_3_5_23_27_3_17_33_25_47_13_45_31_11_37_21_3_7_29_3_3_23_5_11_25_15_23 30_26_26_36_36_22_14_16_50_38_36_12_4_46_48_24_46_18_18 27 19}",
          "124: do_test 1.14 {",
          "125:   set myres {}",
          "126:   foreach r [db eval {SELECT",
          "127:     avg(b) FILTER (WHERE b>a),",
          "128:     avg(b) FILTER (WHERE b<a)",
          "129:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;}] {",
          "130:     lappend myres [format %.4f [set r]]",
          "131:   }",
          "132:   set res2 {30.8333 13.7273 31.4167 13.0000}",
          "133:   set i 0",
          "134:   foreach r [set myres] r2 [set res2] {",
          "135:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "136:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "137:     }",
          "138:     incr i",
          "139:   }",
          "140:   set {} {}",
          "141: } {}",
          "143: do_execsql_test 1.15 {",
          "144:   SELECT",
          "145:     a/5,",
          "146:     sum(b) FILTER (WHERE a%5=0),",
          "147:     sum(b) FILTER (WHERE a%5=1),",
          "148:     sum(b) FILTER (WHERE a%5=2),",
          "149:     sum(b) FILTER (WHERE a%5=3),",
          "150:     sum(b) FILTER (WHERE a%5=4)",
          "151:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "152: } {0 {} 7 3 5 30   1 26 23 27 3 17   2 26 33 25 {} 47   3 36 13 45 31 11",
          "153:   4 36 37 21 22 14   5 16 3 7 29 50   6 38 3 36 12 4   7 46 3 48 23 {}",
          "154:   8 24 5 46 11 {}   9 18 25 15 18 23}",
          "156: finish_test",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:   WINDOW win AS (ORDER BY 1);",
          "425: }",
          "429: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: execsql_test 4.10 {",
          "428:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "429: }",
          "431: execsql_test 4.11 {",
          "432:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "433: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "893:   set {} {}",
          "894: } {}",
          "896: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "896: do_execsql_test 4.10 {",
          "897:   SELECT count(*) OVER (ORDER BY b) FROM t1",
          "898: } {3   3   3   6   6   6}",
          "900: do_execsql_test 4.11 {",
          "901:   SELECT count(distinct a) FILTER (WHERE b='odd') FROM t1",
          "902: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
      "candidate_info": {
        "commit_hash": "6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f7f5d95f84e7f3fc4196e25736bd9659b1fdf21",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c"
        ],
        "message": "This is part of the previous check-in that didn't get committed for some reason - probably because I failed to press the \"Save\" button on the text editor.\n\nFossilOrigin-Name: 51d32173ff1f610b5d75a50f20fa1e0e4e22046299869e3b82e0bb446dba890c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30392985612c51d4583a905f8fe766f08cd31b86d0e30a977adc6a6705649e00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:           zNew[iTo++] = zNew[iFrom];",
          "263:         }",
          "264:         zNew[iTo] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:         assert( iTo>0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || zNew[0]=='+'",
          "282:         ){",
          "283:           if( pLeft->op!=TK_COLUMN",
          "284:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "",
          "[Removed Lines]",
          "281:          || (iTo>0 && zNew[iTo-1]=='0'-1)",
          "",
          "[Added Lines]",
          "282:          || zNew[iTo-1]=='0'-1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c904885b1ab038346a6a47752c3b88deefba2b4",
      "candidate_info": {
        "commit_hash": "3c904885b1ab038346a6a47752c3b88deefba2b4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c904885b1ab038346a6a47752c3b88deefba2b4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "In the SQLITE_OPEN_NOFOLLOW processing, distinguish between an I/O error on the xAccess() call and an actual symlink encounter.\n\nFossilOrigin-Name: 2e98b42fcb7bc38e22808a9dc1d7a4231ed08ffa97c9f08f33e6e8cd8726856c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb79c828496a703f1410f61458ebc1e15a92a63412b36f51945b2b5a32ec6e88",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4790:     const char *z;",
          "4791:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4792:       int isLink = 0;",
          "4798:     }",
          "4799:     nPathname = pVfs->mxPathname+1;",
          "4800:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "",
          "[Removed Lines]",
          "4793:       if( sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink)==0",
          "4794:        && isLink",
          "4795:       ){",
          "4796:         return SQLITE_CANTOPEN_SYMLINK;",
          "4797:       }",
          "",
          "[Added Lines]",
          "4793:       int rc = sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink);",
          "4794:       if( rc==SQLITE_OK && isLink ) rc = SQLITE_CANTOPEN_SYMLINK;",
          "4795:       if( rc ) return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ad1251a60ae792b58de473a0bd22e67224ea3ec",
      "candidate_info": {
        "commit_hash": "5ad1251a60ae792b58de473a0bd22e67224ea3ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5ad1251a60ae792b58de473a0bd22e67224ea3ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved debugging output from the OP_MakeRecord opcode.\n\nFossilOrigin-Name: ac790729d9c8f8612936bab56dca6061408007bc2150ac8c7089132403d7f885",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5cd728fb6b3a70f795306d4d6e12151a4de327f801733a8558139e3cd76fe66a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2882:   if( zAffinity ){",
          "2883:     pRec = pData0;",
          "2884:     do{",
          "2886:       assert( zAffinity[0]==0 || pRec<=pLast );",
          "2887:     }while( zAffinity[0] );",
          "2888:   }",
          "",
          "[Removed Lines]",
          "2885:       applyAffinity(pRec++, *(zAffinity++), encoding);",
          "",
          "[Added Lines]",
          "2885:       applyAffinity(pRec, zAffinity[0], encoding);",
          "2886:       REGISTER_TRACE((int)(pRec-aMem), pRec);",
          "2887:       zAffinity++;",
          "2888:       pRec++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe9a832e806ea2796a8f362f21168725c610687b",
      "candidate_info": {
        "commit_hash": "fe9a832e806ea2796a8f362f21168725c610687b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe9a832e806ea2796a8f362f21168725c610687b",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json104.test"
        ],
        "message": "Fix a problem with handling with handling quoted path elements in extension functions json_set() and json_insert() reported on the mailing list.\n\nFossilOrigin-Name: 45bfcb88e71451a656982e217375e257fc8e68374349c2984be1266bf86fb8cf",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json104.test||test/json104.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123:       u32 iStart, iLabel;",
          "1124:       JsonNode *pNode;",
          "1125:       iStart = jsonParseAddNode(pParse, JSON_OBJECT, 2, 0);",
          "1127:       zPath += i;",
          "1128:       pNode = jsonLookupAppend(pParse, zPath, pApnd, pzErr);",
          "1129:       if( pParse->oom ) return 0;",
          "",
          "[Removed Lines]",
          "1126:       iLabel = jsonParseAddNode(pParse, JSON_STRING, i, zPath);",
          "",
          "[Added Lines]",
          "1126:       iLabel = jsonParseAddNode(pParse, JSON_STRING, nKey, zKey);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a61db8ff6713d66778a0500ca4049229c081a3ae95991f05eba09729434444b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json104.test||test/json104.test": [
          "File: test/json104.test -> test/json104.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: ifcapable !json1 {",
          "18:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: set testprefix json104",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   SELECT json_patch('{}','{\"a\":{\"bb\":{\"ccc\":null}}}');",
          "126: } {{{\"a\":{\"bb\":{}}}}}",
          "130: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: #-------------------------------------------------------------------------",
          "131: do_execsql_test 401 {",
          "132:   CREATE TABLE obj(x);",
          "133:   INSERT INTO obj VALUES('{\"a\":1,\"b\":2}');",
          "134:   SELECT * FROM obj;",
          "135: } {{{\"a\":1,\"b\":2}}}",
          "136: do_execsql_test 402 {",
          "137:   UPDATE obj SET x = json_insert(x, '$.c', 3);",
          "138:   SELECT * FROM obj;",
          "139: } {{{\"a\":1,\"b\":2,\"c\":3}}}",
          "140: do_execsql_test 403 {",
          "141:   SELECT json_extract(x, '$.b') FROM obj;",
          "142:   SELECT json_extract(x, '$.\"b\"') FROM obj;",
          "143: } {2 2}",
          "144: do_execsql_test 404 {",
          "145:   UPDATE obj SET x = json_set(x, '$.\"b\"', 555);",
          "146:   SELECT json_extract(x, '$.b') FROM obj;",
          "147:   SELECT json_extract(x, '$.\"b\"') FROM obj;",
          "148: } {555 555}",
          "149: do_execsql_test 405 {",
          "150:   UPDATE obj SET x = json_set(x, '$.\"d\"', 4);",
          "151:   SELECT json_extract(x, '$.\"d\"') FROM obj;",
          "152: } {4}",
          "",
          "---------------"
        ]
      }
    }
  ]
}