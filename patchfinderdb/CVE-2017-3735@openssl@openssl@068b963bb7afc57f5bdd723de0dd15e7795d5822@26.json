{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "634c1a6b752830d6631a9a8e7884b2f600aca696",
      "candidate_info": {
        "commit_hash": "634c1a6b752830d6631a9a8e7884b2f600aca696",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/634c1a6b752830d6631a9a8e7884b2f600aca696",
        "files": [
          "util/perl/TLSProxy/Proxy.pm"
        ],
        "message": "TLSProxy::Proxy: don't waste time redirecting STDOUT and STDERR\n\nOn Windows, it seems that doing so in a forked (pseudo-)process\nsometimes affects the parent, and thereby hides all the results that\nare supposed to be seen by the running test framework (the \"ok\" and\n\"not ok\" lines).\n\nIt turns out that our redirection isn't necessary, as the test\nframework seems to swallow it all in non-verbose mode anyway.\nIt's possible that we did need this at some point, but the framework\nhas undergone some refinement since then...\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/5100)\n\n(cherry picked from commit 825038d8c36075488922617e48fc4782afe871d1)",
        "before_after_code_files": [
          "util/perl/TLSProxy/Proxy.pm||util/perl/TLSProxy/Proxy.pm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "util/perl/TLSProxy/Proxy.pm||util/perl/TLSProxy/Proxy.pm": [
          "File: util/perl/TLSProxy/Proxy.pm -> util/perl/TLSProxy/Proxy.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     $pid = fork();",
          "149:     if ($pid == 0) {",
          "155:         my $execcmd = $self->execute",
          "156:             .\" s_server -no_comp -rev -engine ossltest -accept \"",
          "157:             .($self->server_port)",
          "",
          "[Removed Lines]",
          "150:         if (!$self->debug) {",
          "151:             open(STDOUT, \">\", File::Spec->devnull())",
          "152:                 or die \"Failed to redirect stdout: $!\";",
          "153:             open(STDERR, \">&STDOUT\");",
          "154:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:     my ($self) = shift;",
          "181:     my $oldstdout;",
          "188:     # Create the Proxy socket",
          "189:     my $proxaddr = $self->proxy_addr;",
          "190:     $proxaddr =~ s/[\\[\\]]//g; # Remove [ and ]",
          "",
          "[Removed Lines]",
          "183:     if(!$self->debug) {",
          "184:         open DEVNULL, \">\", File::Spec->devnull();",
          "185:         $oldstdout = select(DEVNULL);",
          "186:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:     if ($self->execute) {",
          "207:         my $pid = fork();",
          "208:         if ($pid == 0) {",
          "214:             my $echostr;",
          "215:             if ($self->reneg()) {",
          "216:                 $echostr = \"R\";",
          "",
          "[Removed Lines]",
          "209:             if (!$self->debug) {",
          "210:                 open(STDOUT, \">\", File::Spec->devnull())",
          "211:                     or die \"Failed to redirect stdout: $!\";",
          "212:                 open(STDERR, \">&STDOUT\");",
          "213:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d32bf5494098b4a4bca075640c4c96d2cee1b4f0",
      "candidate_info": {
        "commit_hash": "d32bf5494098b4a4bca075640c4c96d2cee1b4f0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d32bf5494098b4a4bca075640c4c96d2cee1b4f0",
        "files": [
          "crypto/bn/bn_mont.c"
        ],
        "message": "Fixed error in propagating BN_FLG_CONSTTIME flag through BN_MONT_CTX_set, which could lead to information disclosure on RSA primes p and q.\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4377)\n\n(cherry picked from commit 3de81a5912041a70884cf4e52e7213f3b5dfa747)",
        "before_after_code_files": [
          "crypto/bn/bn_mont.c||crypto/bn/bn_mont.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_mont.c||crypto/bn/bn_mont.c": [
          "File: crypto/bn/bn_mont.c -> crypto/bn/bn_mont.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     if (!BN_copy(&(mont->N), mod))",
          "261:     mont->N.neg = 0;",
          "263: #ifdef MONT_WORD",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:     if (BN_get_flags(mod, BN_FLG_CONSTTIME) != 0)",
          "262:         BN_set_flags(&(mont->N), BN_FLG_CONSTTIME);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:         tmod.dmax = 2;",
          "271:         tmod.neg = 0;",
          "273:         mont->ri = (BN_num_bits(mod) + (BN_BITS2 - 1)) / BN_BITS2 * BN_BITS2;",
          "275: # if defined(OPENSSL_BN_ASM_MONT) && (BN_BITS2<=32)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:         if (BN_get_flags(mod, BN_FLG_CONSTTIME) != 0)",
          "276:             BN_set_flags(&tmod, BN_FLG_CONSTTIME);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f042e93d82a71c6d996eb765263cda5199a67084",
      "candidate_info": {
        "commit_hash": "f042e93d82a71c6d996eb765263cda5199a67084",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f042e93d82a71c6d996eb765263cda5199a67084",
        "files": [
          "crypto/evp/pmeth_lib.c"
        ],
        "message": "Fix memory leak on lookup failure\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4503)\n\n(cherry picked from commit 918a27facd3558444c69b1edbedb49478e82dff5)",
        "before_after_code_files": [
          "crypto/evp/pmeth_lib.c||crypto/evp/pmeth_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/pmeth_lib.c||crypto/evp/pmeth_lib.c": [
          "File: crypto/evp/pmeth_lib.c -> crypto/evp/pmeth_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:         pmeth = EVP_PKEY_meth_find(id);",
          "115:     if (pmeth == NULL) {",
          "116:         EVPerr(EVP_F_INT_CTX_NEW, EVP_R_UNSUPPORTED_ALGORITHM);",
          "117:         return NULL;",
          "118:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: #ifndef OPENSSL_NO_ENGINE",
          "117:         ENGINE_finish(e);",
          "118: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b272c48f5669da6b01bdf079bc24e9ef30ea09b3",
      "candidate_info": {
        "commit_hash": "b272c48f5669da6b01bdf079bc24e9ef30ea09b3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b272c48f5669da6b01bdf079bc24e9ef30ea09b3",
        "files": [
          "crypto/lhash/lhash.c"
        ],
        "message": "Don't make any changes to the lhash structure if we are going to fail\n\nThe lhash expand() function can fail if realloc fails. The previous\nimplementation made changes to the structure and then attempted to do a\nrealloc. If the realloc failed then it attempted to undo the changes it\nhad just made. Unfortunately changes to lh->p were not undone correctly,\nultimately causing subsequent expand() calls to increment num_nodes to a\nvalue higher than num_alloc_nodes, which can cause out-of-bounds reads/\nwrites. This is not considered a security issue because an attacker cannot\ncause realloc to fail.\n\nThis commit moves the realloc call to near the beginning of the function\nbefore any other changes are made to the lhash structure. That way if a\nfailure occurs we can immediately fail without having to undo anything.\n\nThanks to Pavel Kopyl (Samsung) for reporting this issue.\n\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4550)\n\n(cherry picked from commit 4ce8bebcca90a1f8a3347be29df7a501043d4464)",
        "before_after_code_files": [
          "crypto/lhash/lhash.c||crypto/lhash/lhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/lhash/lhash.c||crypto/lhash/lhash.c": [
          "File: crypto/lhash/lhash.c -> crypto/lhash/lhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191: static int expand(OPENSSL_LHASH *lh)",
          "192: {",
          "193:     OPENSSL_LH_NODE **n, **n1, **n2, *np;",
          "197:     lh->num_nodes++;",
          "198:     lh->num_expands++;",
          "200:     n1 = &(lh->b[p]);",
          "205:     for (np = *n1; np != NULL;) {",
          "206:         hash = np->hash;",
          "",
          "[Removed Lines]",
          "194:     unsigned int p, i, j;",
          "195:     unsigned long hash, nni;",
          "199:     p = (int)lh->p++;",
          "201:     n2 = &(lh->b[p + (int)lh->pmax]);",
          "203:     nni = lh->num_alloc_nodes;",
          "",
          "[Added Lines]",
          "211:     unsigned int p, pmax, nni, j;",
          "212:     unsigned long hash;",
          "214:     nni = lh->num_alloc_nodes;",
          "215:     p = lh->p;",
          "216:     pmax = lh->pmax;",
          "217:     if (p + 1 >= pmax) {",
          "218:         j = nni * 2;",
          "219:         n = OPENSSL_realloc(lh->b, sizeof(OPENSSL_LH_NODE *) * j);",
          "220:         if (n == NULL) {",
          "221:             lh->error++;",
          "222:             return 0;",
          "223:         }",
          "224:         lh->b = n;",
          "225:         memset(n + nni, 0, sizeof(*n) * (j - nni));",
          "226:         lh->pmax = nni;",
          "227:         lh->num_alloc_nodes = j;",
          "228:         lh->num_expand_reallocs++;",
          "229:         lh->p = 0;",
          "230:     } else {",
          "231:         lh->p++;",
          "232:     }",
          "237:     n2 = &(lh->b[p + pmax]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:         np = *n1;",
          "214:     }",
          "233:     return 1;",
          "234: }",
          "",
          "[Removed Lines]",
          "216:     if ((lh->p) >= lh->pmax) {",
          "217:         j = (int)lh->num_alloc_nodes * 2;",
          "218:         n = OPENSSL_realloc(lh->b, (int)(sizeof(OPENSSL_LH_NODE *) * j));",
          "219:         if (n == NULL) {",
          "220:             lh->error++;",
          "221:             lh->num_nodes--;",
          "222:             lh->p = 0;",
          "223:             return 0;",
          "224:         }",
          "227:         lh->pmax = lh->num_alloc_nodes;",
          "228:         lh->num_alloc_nodes = j;",
          "229:         lh->num_expand_reallocs++;",
          "230:         lh->p = 0;",
          "231:         lh->b = n;",
          "232:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94225cf59ec50e356e2c090bcbe76e1635e6d565",
      "candidate_info": {
        "commit_hash": "94225cf59ec50e356e2c090bcbe76e1635e6d565",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/94225cf59ec50e356e2c090bcbe76e1635e6d565",
        "files": [
          "crypto/ec/ecp_nistp521.c",
          "include/openssl/bio.h"
        ],
        "message": "Cleanup - use e_os2.h rather than stdint.h\n\nNot exactly everywhere, but in those source files where stdint.h is\nincluded conditionally, or where it will be eventually\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3447)\n(cherry picked from commit 74a011ebb5e9028ef18982d737a434a8ff926a95)",
        "before_after_code_files": [
          "crypto/ec/ecp_nistp521.c||crypto/ec/ecp_nistp521.c",
          "include/openssl/bio.h||include/openssl/bio.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ec/ecp_nistp521.c||crypto/ec/ecp_nistp521.c": [
          "File: crypto/ec/ecp_nistp521.c -> crypto/ec/ecp_nistp521.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifdef OPENSSL_NO_EC_NISTP_64_GCC_128",
          "36: NON_EMPTY_TRANSLATION_UNIT",
          "37: #else",
          "45: # include <string.h>",
          "46: # include <openssl/err.h>",
          "47: # include \"ec_lcl.h\"",
          "",
          "[Removed Lines]",
          "34: #include <openssl/opensslconf.h>",
          "39: # ifndef OPENSSL_SYS_VMS",
          "40: #  include <stdint.h>",
          "41: # else",
          "42: #  include <inttypes.h>",
          "43: # endif",
          "",
          "[Added Lines]",
          "34: #include <openssl/e_os2.h>",
          "",
          "---------------"
        ],
        "include/openssl/bio.h||include/openssl/bio.h": [
          "File: include/openssl/bio.h -> include/openssl/bio.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: # include <openssl/crypto.h>",
          "22: # ifndef OPENSSL_NO_SCTP",
          "28: # endif",
          "30: #ifdef  __cplusplus",
          "",
          "[Removed Lines]",
          "23: #  ifndef OPENSSL_SYS_VMS",
          "24: #   include <stdint.h>",
          "25: #  else",
          "26: #   include <inttypes.h>",
          "27: #  endif",
          "",
          "[Added Lines]",
          "23: #  include <openssl/e_os2.h>",
          "",
          "---------------"
        ]
      }
    }
  ]
}