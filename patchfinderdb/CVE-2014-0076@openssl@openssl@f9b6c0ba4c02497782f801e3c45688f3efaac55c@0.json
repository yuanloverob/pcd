{
  "cve_id": "CVE-2014-0076",
  "cve_desc": "The Montgomery ladder implementation in OpenSSL through 1.0.0l does not ensure that certain swap operations have a constant-time behavior, which makes it easier for local users to obtain ECDSA nonces via a FLUSH+RELOAD cache side-channel attack.",
  "repo": "openssl/openssl",
  "patch_hash": "f9b6c0ba4c02497782f801e3c45688f3efaac55c",
  "patch_info": {
    "commit_hash": "f9b6c0ba4c02497782f801e3c45688f3efaac55c",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/f9b6c0ba4c02497782f801e3c45688f3efaac55c",
    "files": [
      "CHANGES",
      "crypto/bn/bn.h",
      "crypto/bn/bn_lib.c",
      "crypto/ec/ec2_mult.c"
    ],
    "message": "Fix for CVE-2014-0076\n\nFix for the attack described in the paper \"Recovering OpenSSL\nECDSA Nonces Using the FLUSH+RELOAD Cache Side-channel Attack\"\nby Yuval Yarom and Naomi Benger. Details can be obtained from:\nhttp://eprint.iacr.org/2014/140\n\nThanks to Yuval Yarom and Naomi Benger for discovering this\nflaw and to Yuval Yarom for supplying a fix.\n(cherry picked from commit 2198be3483259de374f91e57d247d0fc667aef29)\n\nConflicts:\n\n\tCHANGES",
    "before_after_code_files": [
      "crypto/bn/bn.h||crypto/bn/bn.h",
      "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
      "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
    ]
  },
  "patch_diff": {
    "crypto/bn/bn.h||crypto/bn/bn.h": [
      "File: crypto/bn/bn.h -> crypto/bn/bn.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "520: BIGNUM *BN_mod_sqrt(BIGNUM *ret,",
      "521:  const BIGNUM *a, const BIGNUM *n,BN_CTX *ctx);",
      "524: #ifndef OPENSSL_NO_DEPRECATED",
      "525: BIGNUM *BN_generate_prime(BIGNUM *ret,int bits,int safe,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "523: void BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "763: #define bn_fix_top(a)  bn_check_top(a)",
      "767: #define bn_pollute(a)",
      "768: #define bn_check_top(a)",
      "769: #define bn_fix_top(a)  bn_correct_top(a)",
      "771: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "767: #define bn_check_size(bn, bits) bn_wcheck_size(bn, ((bits+BN_BITS2-1))/BN_BITS2)",
      "768: #define bn_wcheck_size(bn, words) \\",
      "769:  do { \\",
      "770:   const BIGNUM *_bnum2 = (bn); \\",
      "771:   assert(words <= (_bnum2)->dmax && words >= (_bnum2)->top); \\",
      "772:  } while(0)",
      "779: #define bn_check_size(bn, bits)",
      "780: #define bn_wcheck_size(bn, words)",
      "",
      "---------------"
    ],
    "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c": [
      "File: crypto/bn/bn_lib.c -> crypto/bn/bn_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "828:   }",
      "829:  return bn_cmp_words(a,b,cl);",
      "830:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "839: void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)",
      "840:  {",
      "841:  BN_ULONG t;",
      "842:  int i;",
      "844:  bn_wcheck_size(a, nwords);",
      "845:  bn_wcheck_size(b, nwords);",
      "847:  assert(a != b);",
      "848:  assert((condition & (condition - 1)) == 0);",
      "849:  assert(sizeof(BN_ULONG) >= sizeof(int));",
      "851:  condition = ((condition - 1) >> (BN_BITS2 - 1)) - 1;",
      "853:  t = (a->top^b->top) & condition;",
      "854:  a->top ^= t;",
      "855:  b->top ^= t;",
      "857: #define BN_CONSTTIME_SWAP(ind) \\",
      "858:  do { \\",
      "859:   t = (a->d[ind] ^ b->d[ind]) & condition; \\",
      "860:   a->d[ind] ^= t; \\",
      "861:   b->d[ind] ^= t; \\",
      "862:  } while (0)",
      "865:  switch (nwords) {",
      "866:  default:",
      "867:   for (i = 10; i < nwords; i++)",
      "868:    BN_CONSTTIME_SWAP(i);",
      "879:  case 1: BN_CONSTTIME_SWAP(0);",
      "880:  }",
      "881: #undef BN_CONSTTIME_SWAP",
      "882: }",
      "",
      "---------------"
    ],
    "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c": [
      "File: crypto/ec/ec2_mult.c -> crypto/ec/ec2_mult.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "248:  x2 = &r->X;",
      "249:  z2 = &r->Y;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "255:  bn_wexpand(x1, group->field.top);",
      "256:  bn_wexpand(z1, group->field.top);",
      "257:  bn_wexpand(x2, group->field.top);",
      "258:  bn_wexpand(z2, group->field.top);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "272:   word = scalar->d[i];",
      "273:   while (mask)",
      "274:    {",
      "285:    mask >>= 1;",
      "286:    }",
      "287:   mask = BN_TBIT;",
      "",
      "[Removed Lines]",
      "275:    if (word & mask)",
      "276:     {",
      "277:     if (!gf2m_Madd(group, &point->X, x1, z1, x2, z2, ctx)) goto err;",
      "278:     if (!gf2m_Mdouble(group, x2, z2, ctx)) goto err;",
      "279:     }",
      "280:    else",
      "281:     {",
      "282:     if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
      "283:     if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
      "284:     }",
      "",
      "[Added Lines]",
      "284:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
      "285:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
      "286:    if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
      "287:    if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
      "288:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
      "289:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2198be3483259de374f91e57d247d0fc667aef29",
      "candidate_info": {
        "commit_hash": "2198be3483259de374f91e57d247d0fc667aef29",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2198be3483259de374f91e57d247d0fc667aef29",
        "files": [
          "CHANGES",
          "crypto/bn/bn.h",
          "crypto/bn/bn_lib.c",
          "crypto/ec/ec2_mult.c"
        ],
        "message": "Fix for CVE-2014-0076\n\nFix for the attack described in the paper \"Recovering OpenSSL\nECDSA Nonces Using the FLUSH+RELOAD Cache Side-channel Attack\"\nby Yuval Yarom and Naomi Benger. Details can be obtained from:\nhttp://eprint.iacr.org/2014/140\n\nThanks to Yuval Yarom and Naomi Benger for discovering this\nflaw and to Yuval Yarom for supplying a fix.",
        "before_after_code_files": [
          "crypto/bn/bn.h||crypto/bn/bn.h",
          "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
          "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/bn.h||crypto/bn/bn.h",
            "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ],
          "candidate": [
            "crypto/bn/bn.h||crypto/bn/bn.h",
            "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/bn.h||crypto/bn/bn.h": [
          "File: crypto/bn/bn.h -> crypto/bn/bn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "538: BIGNUM *BN_mod_sqrt(BIGNUM *ret,",
          "539:  const BIGNUM *a, const BIGNUM *n,BN_CTX *ctx);",
          "542: #ifndef OPENSSL_NO_DEPRECATED",
          "543: BIGNUM *BN_generate_prime(BIGNUM *ret,int bits,int safe,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "541: void BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "760: #define bn_fix_top(a)  bn_check_top(a)",
          "764: #define bn_pollute(a)",
          "765: #define bn_check_top(a)",
          "766: #define bn_fix_top(a)  bn_correct_top(a)",
          "768: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764: #define bn_check_size(bn, bits) bn_wcheck_size(bn, ((bits+BN_BITS2-1))/BN_BITS2)",
          "765: #define bn_wcheck_size(bn, words) \\",
          "766:  do { \\",
          "767:   const BIGNUM *_bnum2 = (bn); \\",
          "768:   assert(words <= (_bnum2)->dmax && words >= (_bnum2)->top); \\",
          "769:  } while(0)",
          "776: #define bn_check_size(bn, bits)",
          "777: #define bn_wcheck_size(bn, words)",
          "",
          "---------------"
        ],
        "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c": [
          "File: crypto/bn/bn_lib.c -> crypto/bn/bn_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:   }",
          "844:  return bn_cmp_words(a,b,cl);",
          "845:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854: void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)",
          "855:  {",
          "856:  BN_ULONG t;",
          "857:  int i;",
          "859:  bn_wcheck_size(a, nwords);",
          "860:  bn_wcheck_size(b, nwords);",
          "862:  assert(a != b);",
          "863:  assert((condition & (condition - 1)) == 0);",
          "864:  assert(sizeof(BN_ULONG) >= sizeof(int));",
          "866:  condition = ((condition - 1) >> (BN_BITS2 - 1)) - 1;",
          "868:  t = (a->top^b->top) & condition;",
          "869:  a->top ^= t;",
          "870:  b->top ^= t;",
          "872: #define BN_CONSTTIME_SWAP(ind) \\",
          "873:  do { \\",
          "874:   t = (a->d[ind] ^ b->d[ind]) & condition; \\",
          "875:   a->d[ind] ^= t; \\",
          "876:   b->d[ind] ^= t; \\",
          "877:  } while (0)",
          "880:  switch (nwords) {",
          "881:  default:",
          "882:   for (i = 10; i < nwords; i++)",
          "883:    BN_CONSTTIME_SWAP(i);",
          "894:  case 1: BN_CONSTTIME_SWAP(0);",
          "895:  }",
          "896: #undef BN_CONSTTIME_SWAP",
          "897: }",
          "",
          "---------------"
        ],
        "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c": [
          "File: crypto/ec/ec2_mult.c -> crypto/ec/ec2_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:  x2 = &r->X;",
          "245:  z2 = &r->Y;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:  bn_wexpand(x1, group->field.top);",
          "252:  bn_wexpand(z1, group->field.top);",
          "253:  bn_wexpand(x2, group->field.top);",
          "254:  bn_wexpand(z2, group->field.top);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:   word = scalar->d[i];",
          "269:   while (mask)",
          "270:    {",
          "281:    mask >>= 1;",
          "282:    }",
          "283:   mask = BN_TBIT;",
          "",
          "[Removed Lines]",
          "271:    if (word & mask)",
          "272:     {",
          "273:     if (!gf2m_Madd(group, &point->X, x1, z1, x2, z2, ctx)) goto err;",
          "274:     if (!gf2m_Mdouble(group, x2, z2, ctx)) goto err;",
          "275:     }",
          "276:    else",
          "277:     {",
          "278:     if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "279:     if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "280:     }",
          "",
          "[Added Lines]",
          "280:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
          "281:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
          "282:    if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "283:    if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "284:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
          "285:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b7a4ba29cafa432fc4266fe6e59e60bc1c96332",
      "candidate_info": {
        "commit_hash": "4b7a4ba29cafa432fc4266fe6e59e60bc1c96332",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4b7a4ba29cafa432fc4266fe6e59e60bc1c96332",
        "files": [
          "CHANGES",
          "crypto/bn/bn.h",
          "crypto/bn/bn_lib.c",
          "crypto/ec/ec2_mult.c"
        ],
        "message": "Fix for CVE-2014-0076\n\nFix for the attack described in the paper \"Recovering OpenSSL\nECDSA Nonces Using the FLUSH+RELOAD Cache Side-channel Attack\"\nby Yuval Yarom and Naomi Benger. Details can be obtained from:\nhttp://eprint.iacr.org/2014/140\n\nThanks to Yuval Yarom and Naomi Benger for discovering this\nflaw and to Yuval Yarom for supplying a fix.\n(cherry picked from commit 2198be3483259de374f91e57d247d0fc667aef29)\n\nConflicts:\n\n\tCHANGES",
        "before_after_code_files": [
          "crypto/bn/bn.h||crypto/bn/bn.h",
          "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
          "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/bn.h||crypto/bn/bn.h",
            "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ],
          "candidate": [
            "crypto/bn/bn.h||crypto/bn/bn.h",
            "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/bn.h||crypto/bn/bn.h": [
          "File: crypto/bn/bn.h -> crypto/bn/bn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "538: BIGNUM *BN_mod_sqrt(BIGNUM *ret,",
          "539:  const BIGNUM *a, const BIGNUM *n,BN_CTX *ctx);",
          "542: #ifndef OPENSSL_NO_DEPRECATED",
          "543: BIGNUM *BN_generate_prime(BIGNUM *ret,int bits,int safe,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "541: void BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "775: #define bn_fix_top(a)  bn_check_top(a)",
          "779: #define bn_pollute(a)",
          "780: #define bn_check_top(a)",
          "781: #define bn_fix_top(a)  bn_correct_top(a)",
          "783: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "779: #define bn_check_size(bn, bits) bn_wcheck_size(bn, ((bits+BN_BITS2-1))/BN_BITS2)",
          "780: #define bn_wcheck_size(bn, words) \\",
          "781:  do { \\",
          "782:   const BIGNUM *_bnum2 = (bn); \\",
          "783:   assert(words <= (_bnum2)->dmax && words >= (_bnum2)->top); \\",
          "784:  } while(0)",
          "791: #define bn_check_size(bn, bits)",
          "792: #define bn_wcheck_size(bn, words)",
          "",
          "---------------"
        ],
        "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c": [
          "File: crypto/bn/bn_lib.c -> crypto/bn/bn_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:   }",
          "825:  return bn_cmp_words(a,b,cl);",
          "826:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)",
          "836:  {",
          "837:  BN_ULONG t;",
          "838:  int i;",
          "840:  bn_wcheck_size(a, nwords);",
          "841:  bn_wcheck_size(b, nwords);",
          "843:  assert(a != b);",
          "844:  assert((condition & (condition - 1)) == 0);",
          "845:  assert(sizeof(BN_ULONG) >= sizeof(int));",
          "847:  condition = ((condition - 1) >> (BN_BITS2 - 1)) - 1;",
          "849:  t = (a->top^b->top) & condition;",
          "850:  a->top ^= t;",
          "851:  b->top ^= t;",
          "853: #define BN_CONSTTIME_SWAP(ind) \\",
          "854:  do { \\",
          "855:   t = (a->d[ind] ^ b->d[ind]) & condition; \\",
          "856:   a->d[ind] ^= t; \\",
          "857:   b->d[ind] ^= t; \\",
          "858:  } while (0)",
          "861:  switch (nwords) {",
          "862:  default:",
          "863:   for (i = 10; i < nwords; i++)",
          "864:    BN_CONSTTIME_SWAP(i);",
          "875:  case 1: BN_CONSTTIME_SWAP(0);",
          "876:  }",
          "877: #undef BN_CONSTTIME_SWAP",
          "878: }",
          "",
          "---------------"
        ],
        "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c": [
          "File: crypto/ec/ec2_mult.c -> crypto/ec/ec2_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:  x2 = &r->X;",
          "247:  z2 = &r->Y;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:  bn_wexpand(x1, group->field.top);",
          "254:  bn_wexpand(z1, group->field.top);",
          "255:  bn_wexpand(x2, group->field.top);",
          "256:  bn_wexpand(z2, group->field.top);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:   word = scalar->d[i];",
          "271:   while (mask)",
          "272:    {",
          "283:    mask >>= 1;",
          "284:    }",
          "285:   mask = BN_TBIT;",
          "",
          "[Removed Lines]",
          "273:    if (word & mask)",
          "274:     {",
          "275:     if (!gf2m_Madd(group, &point->X, x1, z1, x2, z2, ctx)) goto err;",
          "276:     if (!gf2m_Mdouble(group, x2, z2, ctx)) goto err;",
          "277:     }",
          "278:    else",
          "279:     {",
          "280:     if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "281:     if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "282:     }",
          "",
          "[Added Lines]",
          "282:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
          "283:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
          "284:    if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "285:    if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "286:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
          "287:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a9f7780e51b2bed69f4d9347da618fc069b9900",
      "candidate_info": {
        "commit_hash": "0a9f7780e51b2bed69f4d9347da618fc069b9900",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0a9f7780e51b2bed69f4d9347da618fc069b9900",
        "files": [
          "CHANGES",
          "crypto/bn/bn.h",
          "crypto/bn/bn_lib.c",
          "crypto/ec/ec2_mult.c"
        ],
        "message": "Fix for CVE-2014-0076\n\nFix for the attack described in the paper \"Recovering OpenSSL\nECDSA Nonces Using the FLUSH+RELOAD Cache Side-channel Attack\"\nby Yuval Yarom and Naomi Benger. Details can be obtained from:\nhttp://eprint.iacr.org/2014/140\n\nThanks to Yuval Yarom and Naomi Benger for discovering this\nflaw and to Yuval Yarom for supplying a fix.\n(cherry picked from commit 2198be3483259de374f91e57d247d0fc667aef29)\n\nConflicts:\n\n\tCHANGES",
        "before_after_code_files": [
          "crypto/bn/bn.h||crypto/bn/bn.h",
          "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
          "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/bn.h||crypto/bn/bn.h",
            "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ],
          "candidate": [
            "crypto/bn/bn.h||crypto/bn/bn.h",
            "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/bn.h||crypto/bn/bn.h": [
          "File: crypto/bn/bn.h -> crypto/bn/bn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "520: BIGNUM *BN_mod_sqrt(BIGNUM *ret,",
          "521:  const BIGNUM *a, const BIGNUM *n,BN_CTX *ctx);",
          "524: #ifndef OPENSSL_NO_DEPRECATED",
          "525: BIGNUM *BN_generate_prime(BIGNUM *ret,int bits,int safe,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523: void BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "757: #define bn_fix_top(a)  bn_check_top(a)",
          "761: #define bn_pollute(a)",
          "762: #define bn_check_top(a)",
          "763: #define bn_fix_top(a)  bn_correct_top(a)",
          "765: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761: #define bn_check_size(bn, bits) bn_wcheck_size(bn, ((bits+BN_BITS2-1))/BN_BITS2)",
          "762: #define bn_wcheck_size(bn, words) \\",
          "763:  do { \\",
          "764:   const BIGNUM *_bnum2 = (bn); \\",
          "765:   assert(words <= (_bnum2)->dmax && words >= (_bnum2)->top); \\",
          "766:  } while(0)",
          "773: #define bn_check_size(bn, bits)",
          "774: #define bn_wcheck_size(bn, words)",
          "",
          "---------------"
        ],
        "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c": [
          "File: crypto/bn/bn_lib.c -> crypto/bn/bn_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:   }",
          "825:  return bn_cmp_words(a,b,cl);",
          "826:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)",
          "836:  {",
          "837:  BN_ULONG t;",
          "838:  int i;",
          "840:  bn_wcheck_size(a, nwords);",
          "841:  bn_wcheck_size(b, nwords);",
          "843:  assert(a != b);",
          "844:  assert((condition & (condition - 1)) == 0);",
          "845:  assert(sizeof(BN_ULONG) >= sizeof(int));",
          "847:  condition = ((condition - 1) >> (BN_BITS2 - 1)) - 1;",
          "849:  t = (a->top^b->top) & condition;",
          "850:  a->top ^= t;",
          "851:  b->top ^= t;",
          "853: #define BN_CONSTTIME_SWAP(ind) \\",
          "854:  do { \\",
          "855:   t = (a->d[ind] ^ b->d[ind]) & condition; \\",
          "856:   a->d[ind] ^= t; \\",
          "857:   b->d[ind] ^= t; \\",
          "858:  } while (0)",
          "861:  switch (nwords) {",
          "862:  default:",
          "863:   for (i = 10; i < nwords; i++)",
          "864:    BN_CONSTTIME_SWAP(i);",
          "875:  case 1: BN_CONSTTIME_SWAP(0);",
          "876:  }",
          "877: #undef BN_CONSTTIME_SWAP",
          "878: }",
          "",
          "---------------"
        ],
        "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c": [
          "File: crypto/ec/ec2_mult.c -> crypto/ec/ec2_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:  x2 = &r->X;",
          "247:  z2 = &r->Y;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:  bn_wexpand(x1, group->field.top);",
          "254:  bn_wexpand(z1, group->field.top);",
          "255:  bn_wexpand(x2, group->field.top);",
          "256:  bn_wexpand(z2, group->field.top);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270:   word = scalar->d[i];",
          "271:   while (mask)",
          "272:    {",
          "283:    mask >>= 1;",
          "284:    }",
          "285:   mask = BN_TBIT;",
          "",
          "[Removed Lines]",
          "273:    if (word & mask)",
          "274:     {",
          "275:     if (!gf2m_Madd(group, &point->X, x1, z1, x2, z2, ctx)) goto err;",
          "276:     if (!gf2m_Mdouble(group, x2, z2, ctx)) goto err;",
          "277:     }",
          "278:    else",
          "279:     {",
          "280:     if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "281:     if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "282:     }",
          "",
          "[Added Lines]",
          "282:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
          "283:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
          "284:    if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "285:    if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "286:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
          "287:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5784a52145d0062d42724d4d0fab3b4c82de35ee",
      "candidate_info": {
        "commit_hash": "5784a52145d0062d42724d4d0fab3b4c82de35ee",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5784a52145d0062d42724d4d0fab3b4c82de35ee",
        "files": [
          "crypto/ec/Makefile",
          "crypto/ec/ec2_mult.c",
          "crypto/ec/ec2_oct.c",
          "crypto/ec/ec2_smpl.c",
          "crypto/ec/ec_key.c",
          "crypto/ec/ec_lcl.h",
          "crypto/ec/ec_lib.c",
          "crypto/ec/ec_mult.c",
          "crypto/ec/ec_pmeth.c",
          "crypto/ec/ecp_nist.c",
          "crypto/ec/ecp_nistz256.c",
          "crypto/ec/ecp_oct.c",
          "crypto/ec/ecp_smpl.c",
          "crypto/ec/ectest.c"
        ],
        "message": "Implement internally opaque bn access from ec\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c",
          "crypto/ec/ec2_oct.c||crypto/ec/ec2_oct.c",
          "crypto/ec/ec2_smpl.c||crypto/ec/ec2_smpl.c",
          "crypto/ec/ec_key.c||crypto/ec/ec_key.c",
          "crypto/ec/ec_lcl.h||crypto/ec/ec_lcl.h",
          "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c",
          "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c",
          "crypto/ec/ec_pmeth.c||crypto/ec/ec_pmeth.c",
          "crypto/ec/ecp_nist.c||crypto/ec/ecp_nist.c",
          "crypto/ec/ecp_nistz256.c||crypto/ec/ecp_nistz256.c",
          "crypto/ec/ecp_oct.c||crypto/ec/ecp_oct.c",
          "crypto/ec/ecp_smpl.c||crypto/ec/ecp_smpl.c",
          "crypto/ec/ectest.c||crypto/ec/ectest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ],
          "candidate": [
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c": [
          "File: crypto/ec/ec2_mult.c -> crypto/ec/ec2_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #include <openssl/err.h>",
          "74: #include \"ec_lcl.h\"",
          "76: #ifndef OPENSSL_NO_EC2M",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #include \"internal/bn_int.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:  if (!group->meth->field_mul(group, z, x, t1, ctx)) goto err;",
          "99:  if (!group->meth->field_sqr(group, x, x, ctx)) goto err;",
          "100:  if (!group->meth->field_sqr(group, t1, t1, ctx)) goto err;",
          "102:  if (!BN_GF2m_add(x, x, t1)) goto err;",
          "104:  ret = 1;",
          "",
          "[Removed Lines]",
          "101:  if (!group->meth->field_mul(group, t1, &group->b, t1, ctx)) goto err;",
          "",
          "[Added Lines]",
          "102:  if (!group->meth->field_mul(group, t1, group->b, t1, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:  z1 = BN_CTX_get(ctx);",
          "250:  if (z1 == NULL) goto err;",
          "263:  if (!group->meth->field_sqr(group, x2, z2, ctx)) goto err;",
          "268:  mask = BN_TBIT;",
          "270:  while (!(word & mask)) mask >>= 1;",
          "271:  mask >>= 1;",
          "",
          "[Removed Lines]",
          "252:  x2 = &r->X;",
          "253:  z2 = &r->Y;",
          "255:  bn_wexpand(x1, group->field.top);",
          "256:  bn_wexpand(z1, group->field.top);",
          "257:  bn_wexpand(x2, group->field.top);",
          "258:  bn_wexpand(z2, group->field.top);",
          "267:  i = scalar->top - 1;",
          "269:  word = scalar->d[i];",
          "",
          "[Added Lines]",
          "253:  x2 = r->X;",
          "254:  z2 = r->Y;",
          "256:  bn_wexpand(x1, bn_get_top(group->field));",
          "257:  bn_wexpand(z1, bn_get_top(group->field));",
          "258:  bn_wexpand(x2, bn_get_top(group->field));",
          "259:  bn_wexpand(z2, bn_get_top(group->field));",
          "268:  i = bn_get_top(scalar) - 1;",
          "270:  word = bn_get_words(scalar)[i];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:  for (; i >= 0; i--)",
          "280:   {",
          "282:   while (mask)",
          "283:    {",
          "287:    if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "290:    mask >>= 1;",
          "291:    }",
          "292:   mask = BN_TBIT;",
          "293:   }",
          "297:  if (i == 0) goto err;",
          "298:  else if (i == 1)",
          "299:   {",
          "",
          "[Removed Lines]",
          "281:   word = scalar->d[i];",
          "284:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
          "285:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
          "286:    if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "288:    BN_consttime_swap(word & mask, x1, x2, group->field.top);",
          "289:    BN_consttime_swap(word & mask, z1, z2, group->field.top);",
          "296:  i = gf2m_Mxy(group, &point->X, &point->Y, x1, z1, x2, z2, ctx);",
          "",
          "[Added Lines]",
          "282:   word = bn_get_words(scalar)[i];",
          "285:    BN_consttime_swap(word & mask, x1, x2, bn_get_top(group->field));",
          "286:    BN_consttime_swap(word & mask, z1, z2, bn_get_top(group->field));",
          "287:    if (!gf2m_Madd(group, point->X, x2, z2, x1, z1, ctx)) goto err;",
          "289:    BN_consttime_swap(word & mask, x1, x2, bn_get_top(group->field));",
          "290:    BN_consttime_swap(word & mask, z1, z2, bn_get_top(group->field));",
          "297:  i = gf2m_Mxy(group, point->X, point->Y, x1, z1, x2, z2, ctx);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "301:   }",
          "302:  else",
          "303:   {",
          "305:   r->Z_is_one = 1;",
          "306:   }",
          "312:  ret = 1;",
          "",
          "[Removed Lines]",
          "304:   if (!BN_one(&r->Z)) goto err;",
          "309:  BN_set_negative(&r->X, 0);",
          "310:  BN_set_negative(&r->Y, 0);",
          "",
          "[Added Lines]",
          "305:   if (!BN_one(r->Z)) goto err;",
          "310:  BN_set_negative(r->X, 0);",
          "311:  BN_set_negative(r->Y, 0);",
          "",
          "---------------"
        ],
        "crypto/ec/ec2_oct.c||crypto/ec/ec2_oct.c": [
          "File: crypto/ec/ec2_oct.c -> crypto/ec/ec2_oct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:  if (!BN_GF2m_mod_arr(x, x_, group->poly)) goto err;",
          "118:  if (BN_is_zero(x))",
          "119:   {",
          "121:   }",
          "122:  else",
          "123:   {",
          "124:   if (!group->meth->field_sqr(group, tmp, x, ctx)) goto err;",
          "127:   if (!BN_GF2m_add(tmp, x, tmp)) goto err;",
          "128:   if (!BN_GF2m_mod_solve_quad_arr(z, tmp, group->poly, ctx))",
          "129:    {",
          "",
          "[Removed Lines]",
          "120:   if (!BN_GF2m_mod_sqrt_arr(y, &group->b, group->poly, ctx)) goto err;",
          "125:   if (!group->meth->field_div(group, tmp, &group->b, tmp, ctx)) goto err;",
          "126:   if (!BN_GF2m_add(tmp, &group->a, tmp)) goto err;",
          "",
          "[Added Lines]",
          "120:   if (!BN_GF2m_mod_sqrt_arr(y, group->b, group->poly, ctx)) goto err;",
          "125:   if (!group->meth->field_div(group, tmp, group->b, tmp, ctx)) goto err;",
          "126:   if (!BN_GF2m_add(tmp, group->a, tmp)) goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:  if (yxi == NULL) goto err;",
          "361:  if (!BN_bin2bn(buf + 1, field_len, x)) goto err;",
          "363:   {",
          "364:   ECerr(EC_F_EC_GF2M_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);",
          "365:   goto err;",
          "",
          "[Removed Lines]",
          "362:  if (BN_ucmp(x, &group->field) >= 0)",
          "",
          "[Added Lines]",
          "362:  if (BN_ucmp(x, group->field) >= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:  else",
          "373:   {",
          "374:   if (!BN_bin2bn(buf + 1 + field_len, field_len, y)) goto err;",
          "376:    {",
          "377:    ECerr(EC_F_EC_GF2M_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);",
          "378:    goto err;",
          "",
          "[Removed Lines]",
          "375:   if (BN_ucmp(y, &group->field) >= 0)",
          "",
          "[Added Lines]",
          "375:   if (BN_ucmp(y, group->field) >= 0)",
          "",
          "---------------"
        ],
        "crypto/ec/ec2_smpl.c||crypto/ec/ec2_smpl.c": [
          "File: crypto/ec/ec2_smpl.c -> crypto/ec/ec2_smpl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: #include <openssl/err.h>",
          "74: #include \"ec_lcl.h\"",
          "76: #ifndef OPENSSL_NO_EC2M",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #include \"internal/bn_int.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130: int ec_GF2m_simple_group_init(EC_GROUP *group)",
          "131:  {",
          "135:  return 1;",
          "136:  }",
          "",
          "[Removed Lines]",
          "132:  BN_init(&group->field);",
          "133:  BN_init(&group->a);",
          "134:  BN_init(&group->b);",
          "",
          "[Added Lines]",
          "133:  group->field = BN_new();",
          "134:  group->a = BN_new();",
          "135:  group->b = BN_new();",
          "137:  if(!group->field || !group->a || !group->b)",
          "138:   {",
          "139:   if(group->field) BN_free(group->field);",
          "140:   if(group->a) BN_free(group->a);",
          "141:   if(group->b) BN_free(group->b);",
          "142:   return 0;",
          "143:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142: void ec_GF2m_simple_group_finish(EC_GROUP *group)",
          "143:  {",
          "147:  }",
          "",
          "[Removed Lines]",
          "144:  BN_free(&group->field);",
          "145:  BN_free(&group->a);",
          "146:  BN_free(&group->b);",
          "",
          "[Added Lines]",
          "153:  BN_free(group->field);",
          "154:  BN_free(group->a);",
          "155:  BN_free(group->b);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153: void ec_GF2m_simple_group_clear_finish(EC_GROUP *group)",
          "154:  {",
          "158:  group->poly[0] = 0;",
          "159:  group->poly[1] = 0;",
          "160:  group->poly[2] = 0;",
          "",
          "[Removed Lines]",
          "155:  BN_clear_free(&group->field);",
          "156:  BN_clear_free(&group->a);",
          "157:  BN_clear_free(&group->b);",
          "",
          "[Added Lines]",
          "164:  BN_clear_free(group->field);",
          "165:  BN_clear_free(group->a);",
          "166:  BN_clear_free(group->b);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170: int ec_GF2m_simple_group_copy(EC_GROUP *dest, const EC_GROUP *src)",
          "171:  {",
          "176:  dest->poly[0] = src->poly[0];",
          "177:  dest->poly[1] = src->poly[1];",
          "178:  dest->poly[2] = src->poly[2];",
          "179:  dest->poly[3] = src->poly[3];",
          "180:  dest->poly[4] = src->poly[4];",
          "181:  dest->poly[5] = src->poly[5];",
          "186:  return 1;",
          "187:  }",
          "",
          "[Removed Lines]",
          "172:  int i;",
          "173:  if (!BN_copy(&dest->field, &src->field)) return 0;",
          "174:  if (!BN_copy(&dest->a, &src->a)) return 0;",
          "175:  if (!BN_copy(&dest->b, &src->b)) return 0;",
          "182:  if (bn_wexpand(&dest->a, (int)(dest->poly[0] + BN_BITS2 - 1) / BN_BITS2) == NULL) return 0;",
          "183:  if (bn_wexpand(&dest->b, (int)(dest->poly[0] + BN_BITS2 - 1) / BN_BITS2) == NULL) return 0;",
          "184:  for (i = dest->a.top; i < dest->a.dmax; i++) dest->a.d[i] = 0;",
          "185:  for (i = dest->b.top; i < dest->b.dmax; i++) dest->b.d[i] = 0;",
          "",
          "[Added Lines]",
          "181:  if (!BN_copy(dest->field, src->field)) return 0;",
          "182:  if (!BN_copy(dest->a, src->a)) return 0;",
          "183:  if (!BN_copy(dest->b, src->b)) return 0;",
          "190:  if (bn_wexpand(dest->a, (int)(dest->poly[0] + BN_BITS2 - 1) / BN_BITS2) == NULL) return 0;",
          "191:  if (bn_wexpand(dest->b, (int)(dest->poly[0] + BN_BITS2 - 1) / BN_BITS2) == NULL) return 0;",
          "192:  bn_set_all_zero(dest->a);",
          "193:  bn_set_all_zero(dest->b);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "194:  int ret = 0, i;",
          "199:  if ((i != 5) && (i != 3))",
          "200:   {",
          "201:   ECerr(EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE, EC_R_UNSUPPORTED_FIELD);",
          "",
          "[Removed Lines]",
          "197:  if (!BN_copy(&group->field, p)) goto err;",
          "198:  i = BN_GF2m_poly2arr(&group->field, group->poly, 6) - 1;",
          "",
          "[Added Lines]",
          "205:  if (!BN_copy(group->field, p)) goto err;",
          "206:  i = BN_GF2m_poly2arr(group->field, group->poly, 6) - 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "203:   }",
          "215:  ret = 1;",
          "216:   err:",
          "",
          "[Removed Lines]",
          "206:  if (!BN_GF2m_mod_arr(&group->a, a, group->poly)) goto err;",
          "207:  if(bn_wexpand(&group->a, (int)(group->poly[0] + BN_BITS2 - 1) / BN_BITS2) == NULL) goto err;",
          "208:  for (i = group->a.top; i < group->a.dmax; i++) group->a.d[i] = 0;",
          "211:  if (!BN_GF2m_mod_arr(&group->b, b, group->poly)) goto err;",
          "212:  if(bn_wexpand(&group->b, (int)(group->poly[0] + BN_BITS2 - 1) / BN_BITS2) == NULL) goto err;",
          "213:  for (i = group->b.top; i < group->b.dmax; i++) group->b.d[i] = 0;",
          "",
          "[Added Lines]",
          "214:  if (!BN_GF2m_mod_arr(group->a, a, group->poly)) goto err;",
          "215:  if(bn_wexpand(group->a, (int)(group->poly[0] + BN_BITS2 - 1) / BN_BITS2) == NULL) goto err;",
          "216:  bn_set_all_zero(group->a);",
          "219:  if (!BN_GF2m_mod_arr(group->b, b, group->poly)) goto err;",
          "220:  if(bn_wexpand(group->b, (int)(group->poly[0] + BN_BITS2 - 1) / BN_BITS2) == NULL) goto err;",
          "221:  bn_set_all_zero(group->b);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "228:  if (p != NULL)",
          "229:   {",
          "231:   }",
          "233:  if (a != NULL)",
          "234:   {",
          "236:   }",
          "238:  if (b != NULL)",
          "239:   {",
          "241:   }",
          "243:  ret = 1;",
          "",
          "[Removed Lines]",
          "230:   if (!BN_copy(p, &group->field)) return 0;",
          "235:   if (!BN_copy(a, &group->a)) goto err;",
          "240:   if (!BN_copy(b, &group->b)) goto err;",
          "",
          "[Added Lines]",
          "238:   if (!BN_copy(p, group->field)) return 0;",
          "243:   if (!BN_copy(a, group->a)) goto err;",
          "248:   if (!BN_copy(b, group->b)) goto err;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "251: int ec_GF2m_simple_group_get_degree(const EC_GROUP *group)",
          "252:  {",
          "254:  }",
          "",
          "[Removed Lines]",
          "253:  return BN_num_bits(&group->field)-1;",
          "",
          "[Added Lines]",
          "261:  return BN_num_bits(group->field)-1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "276:  b = BN_CTX_get(ctx);",
          "277:  if (b == NULL) goto err;",
          "",
          "[Removed Lines]",
          "279:  if (!BN_GF2m_mod_arr(b, &group->b, group->poly)) goto err;",
          "",
          "[Added Lines]",
          "287:  if (!BN_GF2m_mod_arr(b, group->b, group->poly)) goto err;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "298: int ec_GF2m_simple_point_init(EC_POINT *point)",
          "299:  {",
          "303:  return 1;",
          "304:  }",
          "",
          "[Removed Lines]",
          "300:  BN_init(&point->X);",
          "301:  BN_init(&point->Y);",
          "302:  BN_init(&point->Z);",
          "",
          "[Added Lines]",
          "308:  point->X = BN_new();",
          "309:  point->Y = BN_new();",
          "310:  point->Z = BN_new();",
          "312:  if(!point->X || !point->Y || !point->Z)",
          "313:   {",
          "314:   if(point->X) BN_free(point->X);",
          "315:   if(point->Y) BN_free(point->Y);",
          "316:   if(point->Z) BN_free(point->Z);",
          "317:   return 0;",
          "318:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "308: void ec_GF2m_simple_point_finish(EC_POINT *point)",
          "309:  {",
          "313:  }",
          "317: void ec_GF2m_simple_point_clear_finish(EC_POINT *point)",
          "318:  {",
          "322:  point->Z_is_one = 0;",
          "323:  }",
          "",
          "[Removed Lines]",
          "310:  BN_free(&point->X);",
          "311:  BN_free(&point->Y);",
          "312:  BN_free(&point->Z);",
          "319:  BN_clear_free(&point->X);",
          "320:  BN_clear_free(&point->Y);",
          "321:  BN_clear_free(&point->Z);",
          "",
          "[Added Lines]",
          "326:  BN_free(point->X);",
          "327:  BN_free(point->Y);",
          "328:  BN_free(point->Z);",
          "335:  BN_clear_free(point->X);",
          "336:  BN_clear_free(point->Y);",
          "337:  BN_clear_free(point->Z);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "327: int ec_GF2m_simple_point_copy(EC_POINT *dest, const EC_POINT *src)",
          "328:  {",
          "332:  dest->Z_is_one = src->Z_is_one;",
          "334:  return 1;",
          "",
          "[Removed Lines]",
          "329:  if (!BN_copy(&dest->X, &src->X)) return 0;",
          "330:  if (!BN_copy(&dest->Y, &src->Y)) return 0;",
          "331:  if (!BN_copy(&dest->Z, &src->Z)) return 0;",
          "",
          "[Added Lines]",
          "345:  if (!BN_copy(dest->X, src->X)) return 0;",
          "346:  if (!BN_copy(dest->Y, src->Y)) return 0;",
          "347:  if (!BN_copy(dest->Z, src->Z)) return 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "341: int ec_GF2m_simple_point_set_to_infinity(const EC_GROUP *group, EC_POINT *point)",
          "342:  {",
          "343:  point->Z_is_one = 0;",
          "345:  return 1;",
          "346:  }",
          "",
          "[Removed Lines]",
          "344:  BN_zero(&point->Z);",
          "",
          "[Added Lines]",
          "360:  BN_zero(point->Z);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "359:   return 0;",
          "360:   }",
          "368:  point->Z_is_one = 1;",
          "369:  ret = 1;",
          "",
          "[Removed Lines]",
          "362:  if (!BN_copy(&point->X, x)) goto err;",
          "363:  BN_set_negative(&point->X, 0);",
          "364:  if (!BN_copy(&point->Y, y)) goto err;",
          "365:  BN_set_negative(&point->Y, 0);",
          "366:  if (!BN_copy(&point->Z, BN_value_one())) goto err;",
          "367:  BN_set_negative(&point->Z, 0);",
          "",
          "[Added Lines]",
          "378:  if (!BN_copy(point->X, x)) goto err;",
          "379:  BN_set_negative(point->X, 0);",
          "380:  if (!BN_copy(point->Y, y)) goto err;",
          "381:  BN_set_negative(point->Y, 0);",
          "382:  if (!BN_copy(point->Z, BN_value_one())) goto err;",
          "383:  BN_set_negative(point->Z, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "387:   return 0;",
          "388:   }",
          "391:   {",
          "392:   ECerr(EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);",
          "393:   return 0;",
          "394:   }",
          "395:  if (x != NULL)",
          "396:   {",
          "398:   BN_set_negative(x, 0);",
          "399:   }",
          "400:  if (y != NULL)",
          "401:   {",
          "403:   BN_set_negative(y, 0);",
          "404:   }",
          "405:  ret = 1;",
          "",
          "[Removed Lines]",
          "390:  if (BN_cmp(&point->Z, BN_value_one()))",
          "397:   if (!BN_copy(x, &point->X)) goto err;",
          "402:   if (!BN_copy(y, &point->Y)) goto err;",
          "",
          "[Added Lines]",
          "406:  if (BN_cmp(point->Z, BN_value_one()))",
          "413:   if (!BN_copy(x, point->X)) goto err;",
          "418:   if (!BN_copy(y, point->Y)) goto err;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "450:  if (a->Z_is_one)",
          "451:   {",
          "454:   }",
          "455:  else",
          "456:   {",
          "",
          "[Removed Lines]",
          "452:   if (!BN_copy(x0, &a->X)) goto err;",
          "453:   if (!BN_copy(y0, &a->Y)) goto err;",
          "",
          "[Added Lines]",
          "468:   if (!BN_copy(x0, a->X)) goto err;",
          "469:   if (!BN_copy(y0, a->Y)) goto err;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "458:   }",
          "459:  if (b->Z_is_one)",
          "460:   {",
          "463:   }",
          "464:  else",
          "465:   {",
          "",
          "[Removed Lines]",
          "461:   if (!BN_copy(x1, &b->X)) goto err;",
          "462:   if (!BN_copy(y1, &b->Y)) goto err;",
          "",
          "[Added Lines]",
          "477:   if (!BN_copy(x1, b->X)) goto err;",
          "478:   if (!BN_copy(y1, b->Y)) goto err;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "473:   if (!BN_GF2m_add(s, y0, y1)) goto err;",
          "474:   if (!group->meth->field_div(group, s, s, t, ctx)) goto err;",
          "475:   if (!group->meth->field_sqr(group, x2, s, ctx)) goto err;",
          "477:   if (!BN_GF2m_add(x2, x2, s)) goto err;",
          "478:   if (!BN_GF2m_add(x2, x2, t)) goto err;",
          "479:   }",
          "",
          "[Removed Lines]",
          "476:   if (!BN_GF2m_add(x2, x2, &group->a)) goto err;",
          "",
          "[Added Lines]",
          "492:   if (!BN_GF2m_add(x2, x2, group->a)) goto err;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "491:   if (!group->meth->field_sqr(group, x2, s, ctx)) goto err;",
          "492:   if (!BN_GF2m_add(x2, x2, s)) goto err;",
          "494:   }",
          "496:  if (!BN_GF2m_add(y2, x1, x2)) goto err;",
          "",
          "[Removed Lines]",
          "493:   if (!BN_GF2m_add(x2, x2, &group->a)) goto err;",
          "",
          "[Added Lines]",
          "509:   if (!BN_GF2m_add(x2, x2, group->a)) goto err;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "522: int ec_GF2m_simple_invert(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)",
          "523:  {",
          "526:   return 1;",
          "528:  if (!EC_POINT_make_affine(group, point, ctx)) return 0;",
          "530:  }",
          "534: int ec_GF2m_simple_is_at_infinity(const EC_GROUP *group, const EC_POINT *point)",
          "535:  {",
          "537:  }",
          "",
          "[Removed Lines]",
          "524:  if (EC_POINT_is_at_infinity(group, point) || BN_is_zero(&point->Y))",
          "529:  return BN_GF2m_add(&point->Y, &point->X, &point->Y);",
          "536:  return BN_is_zero(&point->Z);",
          "",
          "[Added Lines]",
          "540:  if (EC_POINT_is_at_infinity(group, point) || BN_is_zero(point->Y))",
          "545:  return BN_GF2m_add(point->Y, point->X, point->Y);",
          "552:  return BN_is_zero(point->Z);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "584:  if (!BN_GF2m_add(lh, lh, y2)) goto err;",
          "585:  ret = BN_is_zero(lh);",
          "586:  err:",
          "",
          "[Removed Lines]",
          "578:  if (!BN_GF2m_add(lh, &point->X, &group->a)) goto err;",
          "579:  if (!field_mul(group, lh, lh, &point->X, ctx)) goto err;",
          "580:  if (!BN_GF2m_add(lh, lh, &point->Y)) goto err;",
          "581:  if (!field_mul(group, lh, lh, &point->X, ctx)) goto err;",
          "582:  if (!BN_GF2m_add(lh, lh, &group->b)) goto err;",
          "583:  if (!field_sqr(group, y2, &point->Y, ctx)) goto err;",
          "",
          "[Added Lines]",
          "594:  if (!BN_GF2m_add(lh, point->X, group->a)) goto err;",
          "595:  if (!field_mul(group, lh, lh, point->X, ctx)) goto err;",
          "596:  if (!BN_GF2m_add(lh, lh, point->Y)) goto err;",
          "597:  if (!field_mul(group, lh, lh, point->X, ctx)) goto err;",
          "598:  if (!BN_GF2m_add(lh, lh, group->b)) goto err;",
          "599:  if (!field_sqr(group, y2, point->Y, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "613:  if (a->Z_is_one && b->Z_is_one)",
          "614:   {",
          "616:   }",
          "618:  if (ctx == NULL)",
          "",
          "[Removed Lines]",
          "615:   return ((BN_cmp(&a->X, &b->X) == 0) && BN_cmp(&a->Y, &b->Y) == 0) ? 0 : 1;",
          "",
          "[Added Lines]",
          "631:   return ((BN_cmp(a->X, b->X) == 0) && BN_cmp(a->Y, b->Y) == 0) ? 0 : 1;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "663:  if (y == NULL) goto err;",
          "665:  if (!EC_POINT_get_affine_coordinates_GF2m(group, point, x, y, ctx)) goto err;",
          "670:  ret = 1;",
          "",
          "[Removed Lines]",
          "666:  if (!BN_copy(&point->X, x)) goto err;",
          "667:  if (!BN_copy(&point->Y, y)) goto err;",
          "668:  if (!BN_one(&point->Z)) goto err;",
          "",
          "[Added Lines]",
          "682:  if (!BN_copy(point->X, x)) goto err;",
          "683:  if (!BN_copy(point->Y, y)) goto err;",
          "684:  if (!BN_one(point->Z)) goto err;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "708: int ec_GF2m_simple_field_div(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)",
          "709:  {",
          "711:  }",
          "713: #endif",
          "",
          "[Removed Lines]",
          "710:  return BN_GF2m_mod_div(r, a, b, &group->field, ctx);",
          "",
          "[Added Lines]",
          "726:  return BN_GF2m_mod_div(r, a, b, group->field, ctx);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_key.c||crypto/ec/ec_key.c": [
          "File: crypto/ec/ec_key.c -> crypto/ec/ec_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:   goto err;",
          "327:   }",
          "330:  if (BN_is_zero(order))",
          "331:   {",
          "332:   ECerr(EC_F_EC_KEY_CHECK_KEY, EC_R_INVALID_GROUP_ORDER);",
          "",
          "[Removed Lines]",
          "329:  order = &eckey->group->order;",
          "",
          "[Added Lines]",
          "329:  order = eckey->group->order;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:  if (BN_cmp(x, tx) || BN_cmp(y, ty)",
          "432:   {",
          "433:   ECerr(EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES,",
          "434:    EC_R_COORDINATES_OUT_OF_RANGE);",
          "",
          "[Removed Lines]",
          "430:   || (BN_cmp(x, &key->group->field) >= 0)",
          "431:   || (BN_cmp(y, &key->group->field) >= 0))",
          "",
          "[Added Lines]",
          "430:   || (BN_cmp(x, key->group->field) >= 0)",
          "431:   || (BN_cmp(y, key->group->field) >= 0))",
          "",
          "---------------"
        ],
        "crypto/ec/ec_lcl.h||crypto/ec/ec_lcl.h": [
          "File: crypto/ec/ec_lcl.h -> crypto/ec/ec_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:  const EC_METHOD *meth;",
          "",
          "[Removed Lines]",
          "193:  BIGNUM order, cofactor;",
          "",
          "[Added Lines]",
          "193:  BIGNUM *order, *cofactor;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "207:  BIGNUM field; /* Field specification.",
          "",
          "[Added Lines]",
          "207:  BIGNUM *field; /* Field specification.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "222:  BIGNUM a, b; /* Curve coefficients.",
          "",
          "[Added Lines]",
          "222:  BIGNUM *a, *b; /* Curve coefficients.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "288: } /* EC_POINT */;",
          "",
          "[Removed Lines]",
          "283:  BIGNUM X;",
          "284:  BIGNUM Y;",
          "285:  BIGNUM Z; /* Jacobian projective coordinates:",
          "",
          "[Added Lines]",
          "283:  BIGNUM *X;",
          "284:  BIGNUM *Y;",
          "285:  BIGNUM *Z; /* Jacobian projective coordinates:",
          "",
          "---------------"
        ],
        "crypto/ec/ec_lib.c||crypto/ec/ec_lib.c": [
          "File: crypto/ec/ec_lib.c -> crypto/ec/ec_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  ret->mont_data = NULL;",
          "105:  ret->generator = NULL;",
          "109:  ret->curve_name = 0;",
          "110:  ret->asn1_flag  = 0;",
          "",
          "[Removed Lines]",
          "106:  BN_init(&ret->order);",
          "107:  BN_init(&ret->cofactor);",
          "",
          "[Added Lines]",
          "106:  ret->order = BN_new();",
          "107:  ret->cofactor = NULL;",
          "108:  if(!ret->order) goto err;",
          "109:  ret->cofactor = BN_new();",
          "110:  if(!ret->cofactor) goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:  ret->seed = NULL;",
          "114:  ret->seed_len = 0;",
          "122:  return ret;",
          "123:  }",
          "",
          "[Removed Lines]",
          "116:  if (!meth->group_init(ret))",
          "117:   {",
          "118:   OPENSSL_free(ret);",
          "119:   return NULL;",
          "120:   }",
          "",
          "[Added Lines]",
          "119:  if (!meth->group_init(ret)) goto err;",
          "122: err:",
          "123:  if(ret->order) BN_free(ret->order);",
          "124:  if(ret->cofactor) BN_free(ret->cofactor);",
          "125:  OPENSSL_free(ret);",
          "126:  return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:  if (group->generator != NULL)",
          "139:   EC_POINT_free(group->generator);",
          "143:  if (group->seed)",
          "144:   OPENSSL_free(group->seed);",
          "",
          "[Removed Lines]",
          "140:  BN_free(&group->order);",
          "141:  BN_free(&group->cofactor);",
          "",
          "[Added Lines]",
          "144:  BN_free(group->order);",
          "145:  BN_free(group->cofactor);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "164:  if (group->generator != NULL)",
          "165:   EC_POINT_clear_free(group->generator);",
          "169:  if (group->seed)",
          "170:   {",
          "",
          "[Removed Lines]",
          "166:  BN_clear_free(&group->order);",
          "167:  BN_clear_free(&group->cofactor);",
          "",
          "[Added Lines]",
          "170:  BN_clear_free(group->order);",
          "171:  BN_clear_free(group->cofactor);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "244:    }",
          "245:   }",
          "250:  dest->curve_name = src->curve_name;",
          "251:  dest->asn1_flag  = src->asn1_flag;",
          "",
          "[Removed Lines]",
          "247:  if (!BN_copy(&dest->order, &src->order)) return 0;",
          "248:  if (!BN_copy(&dest->cofactor, &src->cofactor)) return 0;",
          "",
          "[Added Lines]",
          "251:  if (!BN_copy(dest->order, src->order)) return 0;",
          "252:  if (!BN_copy(dest->cofactor, src->cofactor)) return 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "325:  if (!EC_POINT_copy(group->generator, generator)) return 0;",
          "327:  if (order != NULL)",
          "329:  else",
          "332:  if (cofactor != NULL)",
          "334:  else",
          "",
          "[Removed Lines]",
          "328:   { if (!BN_copy(&group->order, order)) return 0; }",
          "330:   BN_zero(&group->order);",
          "333:   { if (!BN_copy(&group->cofactor, cofactor)) return 0; }",
          "335:   BN_zero(&group->cofactor);",
          "",
          "[Added Lines]",
          "332:   { if (!BN_copy(group->order, order)) return 0; }",
          "334:   BN_zero(group->order);",
          "337:   { if (!BN_copy(group->cofactor, cofactor)) return 0; }",
          "339:   BN_zero(group->cofactor);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356: int EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx)",
          "357:  {",
          "359:   return 0;",
          "361:  return !BN_is_zero(order);",
          "",
          "[Removed Lines]",
          "358:  if (!BN_copy(order, &group->order))",
          "",
          "[Added Lines]",
          "362:  if (!BN_copy(order, group->order))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "365: int EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx)",
          "366:  {",
          "368:   return 0;",
          "371:  }",
          "",
          "[Removed Lines]",
          "367:  if (!BN_copy(cofactor, &group->cofactor))",
          "370:  return !BN_is_zero(&group->cofactor);",
          "",
          "[Added Lines]",
          "371:  if (!BN_copy(cofactor, group->cofactor))",
          "374:  return !BN_is_zero(group->cofactor);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1152:  if (!group->mont_data)",
          "1153:   goto err;",
          "1156:   {",
          "1157:   BN_MONT_CTX_free(group->mont_data);",
          "1158:   group->mont_data = NULL;",
          "",
          "[Removed Lines]",
          "1155:  if (!BN_MONT_CTX_set(group->mont_data, &group->order, ctx))",
          "",
          "[Added Lines]",
          "1159:  if (!BN_MONT_CTX_set(group->mont_data, group->order, ctx))",
          "",
          "---------------"
        ],
        "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c": [
          "File: crypto/ec/ec_mult.c -> crypto/ec/ec_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: #include <string.h>",
          "68: #include <openssl/err.h>",
          "70: #include \"ec_lcl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: #include \"internal/bn_int.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "195: static signed char *compute_wNAF(const BIGNUM *scalar, int w, size_t *ret_len)",
          "196:  {",
          "197:  int window_val;",
          "198:  int ok = 0;",
          "199:  signed char *r = NULL;",
          "200:  int sign = 1;",
          "201:  int bit, next_bit, mask;",
          "202:  size_t len = 0, j;",
          "204:  if (BN_is_zero(scalar))",
          "205:   {",
          "206:   r = OPENSSL_malloc(1);",
          "207:   if (!r)",
          "208:    {",
          "209:    ECerr(EC_F_COMPUTE_WNAF, ERR_R_MALLOC_FAILURE);",
          "210:    goto err;",
          "211:    }",
          "212:   r[0] = 0;",
          "214:   return r;",
          "215:   }",
          "218:   {",
          "219:   ECerr(EC_F_COMPUTE_WNAF, ERR_R_INTERNAL_ERROR);",
          "220:   goto err;",
          "221:   }",
          "226:  if (BN_is_negative(scalar))",
          "227:   {",
          "228:   sign = -1;",
          "229:   }",
          "231:  if (scalar->d == NULL || scalar->top == 0)",
          "232:   {",
          "233:   ECerr(EC_F_COMPUTE_WNAF, ERR_R_INTERNAL_ERROR);",
          "234:   goto err;",
          "235:   }",
          "237:  len = BN_num_bits(scalar);",
          "238:  r = OPENSSL_malloc(len + 1); /* modified wNAF may be one digit longer than binary representation",
          "241:  if (r == NULL)",
          "242:   {",
          "243:   ECerr(EC_F_COMPUTE_WNAF, ERR_R_MALLOC_FAILURE);",
          "244:   goto err;",
          "245:   }",
          "246:  window_val = scalar->d[0] & mask;",
          "247:  j = 0;",
          "249:   {",
          "250:   int digit = 0;",
          "254:   if (window_val & 1)",
          "255:    {",
          "258:    if (window_val & bit)",
          "259:     {",
          "263:     if (j + w + 1 >= len)",
          "264:      {",
          "271:      }",
          "272: #endif",
          "273:     }",
          "274:    else",
          "275:     {",
          "277:     }",
          "279:    if (digit <= -bit || digit >= bit || !(digit & 1))",
          "280:     {",
          "281:     ECerr(EC_F_COMPUTE_WNAF, ERR_R_INTERNAL_ERROR);",
          "282:     goto err;",
          "283:     }",
          "285:    window_val -= digit;",
          "290:    if (window_val != 0 && window_val != next_bit && window_val != bit)",
          "291:     {",
          "292:     ECerr(EC_F_COMPUTE_WNAF, ERR_R_INTERNAL_ERROR);",
          "293:     goto err;",
          "294:     }",
          "295:    }",
          "297:   r[j++] = sign * digit;",
          "299:   window_val >>= 1;",
          "300:   window_val += bit * BN_is_bit_set(scalar, j + w);",
          "302:   if (window_val > next_bit)",
          "303:    {",
          "304:    ECerr(EC_F_COMPUTE_WNAF, ERR_R_INTERNAL_ERROR);",
          "305:    goto err;",
          "306:    }",
          "307:   }",
          "309:  if (j > len + 1)",
          "310:   {",
          "311:   ECerr(EC_F_COMPUTE_WNAF, ERR_R_INTERNAL_ERROR);",
          "312:   goto err;",
          "313:   }",
          "314:  len = j;",
          "315:  ok = 1;",
          "317:  err:",
          "318:  if (!ok)",
          "319:   {",
          "320:   OPENSSL_free(r);",
          "321:   r = NULL;",
          "322:   }",
          "323:  if (ok)",
          "325:  return r;",
          "326:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "468:   wsize[i] = EC_window_bits_for_scalar_size(bits);",
          "469:   num_val += (size_t)1 << (wsize[i] - 1);",
          "472:   if (wNAF[i] == NULL)",
          "473:    goto err;",
          "474:   if (wNAF_len[i] > max_len)",
          "",
          "[Removed Lines]",
          "471:   wNAF[i] = compute_wNAF((i < num ? scalars[i] : scalar), wsize[i], &wNAF_len[i]);",
          "",
          "[Added Lines]",
          "332:   wNAF[i] = bn_compute_wNAF((i < num ? scalars[i] : scalar), wsize[i], &wNAF_len[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "503:    wsize[num] = pre_comp->w;",
          "505:    if (!tmp_wNAF)",
          "506:     goto err;",
          "",
          "[Removed Lines]",
          "504:    tmp_wNAF = compute_wNAF(scalar, wsize[num], &tmp_len);",
          "",
          "[Added Lines]",
          "365:    tmp_wNAF = bn_compute_wNAF(scalar, wsize[num], &tmp_len);",
          "",
          "---------------"
        ],
        "crypto/ec/ec_pmeth.c||crypto/ec/ec_pmeth.c": [
          "File: crypto/ec/ec_pmeth.c -> crypto/ec/ec_pmeth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:    if (!ec_key->group)",
          "337:     return -2;",
          "340:     return 1;",
          "341:    if (!dctx->co_key)",
          "342:     {",
          "",
          "[Removed Lines]",
          "339:    if (BN_is_one(&ec_key->group->cofactor))",
          "",
          "[Added Lines]",
          "339:    if (BN_is_one(ec_key->group->cofactor))",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nist.c||crypto/ec/ecp_nist.c": [
          "File: crypto/ec/ecp_nist.c -> crypto/ec/ecp_nist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   if ((ctx_new = ctx = BN_CTX_new()) == NULL) goto err;",
          "174:  if (!BN_mul(r, a, b, ctx)) goto err;",
          "176:   goto err;",
          "178:  ret=1;",
          "",
          "[Removed Lines]",
          "175:  if (!group->field_mod_func(r, r, &group->field, ctx))",
          "",
          "[Added Lines]",
          "175:  if (!group->field_mod_func(r, r, group->field, ctx))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:   if ((ctx_new = ctx = BN_CTX_new()) == NULL) goto err;",
          "200:  if (!BN_sqr(r, a, ctx)) goto err;",
          "202:   goto err;",
          "204:  ret=1;",
          "",
          "[Removed Lines]",
          "201:  if (!group->field_mod_func(r, r, &group->field, ctx))",
          "",
          "[Added Lines]",
          "201:  if (!group->field_mod_func(r, r, group->field, ctx))",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nistz256.c||crypto/ec/ecp_nistz256.c": [
          "File: crypto/ec/ecp_nistz256.c -> crypto/ec/ecp_nistz256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <string.h>",
          "32: #include <openssl/err.h>",
          "33: #include <openssl/ec.h>",
          "34: #include \"cryptlib.h\"",
          "",
          "[Removed Lines]",
          "31: #include <openssl/bn.h>",
          "",
          "[Added Lines]",
          "31: #include \"internal/bn_int.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "543: static int ecp_nistz256_bignum_to_field_elem(BN_ULONG out[P256_LIMBS],",
          "544:                                              const BIGNUM * in)",
          "545: {",
          "552: }",
          "",
          "[Removed Lines]",
          "546:     if (in->top > P256_LIMBS)",
          "547:         return 0;",
          "549:     memset(out, 0, sizeof(BN_ULONG) * P256_LIMBS);",
          "550:     memcpy(out, in->d, sizeof(BN_ULONG) * in->top);",
          "551:     return 1;",
          "",
          "[Added Lines]",
          "546:     return bn_copy_words(out, in, P256_LIMBS);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:             if ((mod = BN_CTX_get(ctx)) == NULL)",
          "591:                 goto err;",
          "593:                 ECerr(EC_F_ECP_NISTZ256_WINDOWED_MUL, ERR_R_BN_LIB);",
          "594:                 goto err;",
          "595:             }",
          "",
          "[Removed Lines]",
          "592:             if (!BN_nnmod(mod, scalar[i], &group->order, ctx)) {",
          "",
          "[Added Lines]",
          "587:             if (!BN_nnmod(mod, scalar[i], group->order, ctx)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "597:         } else",
          "598:             scalars[i] = scalar[i];",
          "603:             p_str[i][j + 0] = d & 0xff;",
          "604:             p_str[i][j + 1] = (d >> 8) & 0xff;",
          "",
          "[Removed Lines]",
          "600:         for (j = 0; j < scalars[i]->top * BN_BYTES; j += BN_BYTES) {",
          "601:             BN_ULONG d = scalars[i]->d[j / BN_BYTES];",
          "",
          "[Added Lines]",
          "595:         for (j = 0; j < bn_get_top(scalars[i]) * BN_BYTES; j += BN_BYTES) {",
          "596:             BN_ULONG d = bn_get_words(scalars[i])[j / BN_BYTES];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "615:         for (; j < 33; j++)",
          "616:             p_str[i][j] = 0;",
          "621:             ECerr(EC_F_ECP_NISTZ256_WINDOWED_MUL, EC_R_COORDINATES_OUT_OF_RANGE);",
          "622:             goto err;",
          "623:         }",
          "",
          "[Removed Lines]",
          "618:         if (!ecp_nistz256_bignum_to_field_elem(temp[0].X, &point[i]->X)",
          "619:             || !ecp_nistz256_bignum_to_field_elem(temp[0].Y, &point[i]->Y)",
          "620:             || !ecp_nistz256_bignum_to_field_elem(temp[0].Z, &point[i]->Z)) {",
          "",
          "[Added Lines]",
          "613:         if (!ecp_nistz256_bignum_to_field_elem(temp[0].X, point[i]->X)",
          "614:             || !ecp_nistz256_bignum_to_field_elem(temp[0].Y, point[i]->Y)",
          "615:             || !ecp_nistz256_bignum_to_field_elem(temp[0].Z, point[i]->Z)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "738: static int ecp_nistz256_is_affine_G(const EC_POINT * generator)",
          "739: {",
          "745: }",
          "747: static int ecp_nistz256_mult_precompute(EC_GROUP * group, BN_CTX * ctx)",
          "",
          "[Removed Lines]",
          "740:     return (generator->X.top == P256_LIMBS) &&",
          "741:         (generator->Y.top == P256_LIMBS) &&",
          "742:         (generator->Z.top == (P256_LIMBS - P256_LIMBS / 8)) &&",
          "743:         is_equal(generator->X.d, def_xG) &&",
          "744:         is_equal(generator->Y.d, def_yG) && is_one(generator->Z.d);",
          "",
          "[Added Lines]",
          "735:     return (bn_get_top(generator->X) == P256_LIMBS) &&",
          "736:         (bn_get_top(generator->Y) == P256_LIMBS) &&",
          "737:         (bn_get_top(generator->Z) == (P256_LIMBS - P256_LIMBS / 8)) &&",
          "738:         is_equal(bn_get_words(generator->X), def_xG) &&",
          "739:         is_equal(bn_get_words(generator->Y), def_yG) &&",
          "740:         is_one(bn_get_words(generator->Z));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "827:             ec_GFp_simple_make_affine(group, P, ctx);",
          "830:             ecp_nistz256_scatter_w7(preComputedTable[j], &temp, k);",
          "831:             for (i = 0; i < 7; i++)",
          "832:                 ec_GFp_simple_dbl(group, P, P, ctx);",
          "",
          "[Removed Lines]",
          "828:             ecp_nistz256_bignum_to_field_elem(temp.X, &P->X);",
          "829:             ecp_nistz256_bignum_to_field_elem(temp.Y, &P->Y);",
          "",
          "[Added Lines]",
          "824:             ecp_nistz256_bignum_to_field_elem(temp.X, P->X);",
          "825:             ecp_nistz256_bignum_to_field_elem(temp.Y, P->Y);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1069:                                         const P256_POINT_AFFINE * in,",
          "1070:                                         BN_CTX * ctx)",
          "1071: {",
          "1073:     BN_ULONG d_x[P256_LIMBS], d_y[P256_LIMBS];",
          "1074:     int ret = 0;",
          "1076:     memcpy(d_x, in->X, sizeof(d_x));",
          "1082:     memcpy(d_y, in->Y, sizeof(d_y));",
          "1090:     return ret;",
          "1091: }",
          "",
          "[Removed Lines]",
          "1072:     BIGNUM x, y;",
          "1077:     x.d = d_x;",
          "1078:     x.dmax = x.top = P256_LIMBS;",
          "1079:     x.neg = 0;",
          "1080:     x.flags = BN_FLG_STATIC_DATA;",
          "1083:     y.d = d_y;",
          "1084:     y.dmax = y.top = P256_LIMBS;",
          "1085:     y.neg = 0;",
          "1086:     y.flags = BN_FLG_STATIC_DATA;",
          "1088:     ret = EC_POINT_set_affine_coordinates_GFp(group, out, &x, &y, ctx);",
          "",
          "[Added Lines]",
          "1068:     BIGNUM *x, *y;",
          "1072:     x = BN_new();",
          "1073:     if(!x)",
          "1074:         return 0;",
          "1075:     y = BN_new();",
          "1076:     if(!y) {",
          "1077:         BN_free(x);",
          "1078:         return 0;",
          "1079:     }",
          "1081:     bn_set_static_words(x, d_x, P256_LIMBS);",
          "1084:     bn_set_static_words(y, d_y, P256_LIMBS);",
          "1086:     ret = EC_POINT_set_affine_coordinates_GFp(group, out, x, y, ctx);",
          "1088:     if(x) BN_free(x);",
          "1089:     if(y) BN_free(y);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1134:     }",
          "1144:     if (scalar) {",
          "1145:         generator = EC_GROUP_get0_generator(group);",
          "",
          "[Removed Lines]",
          "1137:     bn_wexpand(&r->X, P256_LIMBS);",
          "1138:     bn_wexpand(&r->Y, P256_LIMBS);",
          "1139:     bn_wexpand(&r->Z, P256_LIMBS);",
          "1140:     r->X.top = P256_LIMBS;",
          "1141:     r->Y.top = P256_LIMBS;",
          "1142:     r->Z.top = P256_LIMBS;",
          "",
          "[Added Lines]",
          "1138:     bn_wexpand(r->X, P256_LIMBS);",
          "1139:     bn_wexpand(r->Y, P256_LIMBS);",
          "1140:     bn_wexpand(r->Z, P256_LIMBS);",
          "1141:     bn_set_top(r->X, P256_LIMBS);",
          "1142:     bn_set_top(r->Y, P256_LIMBS);",
          "1143:     bn_set_top(r->Z, P256_LIMBS);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1187:                 if ((tmp_scalar = BN_CTX_get(ctx)) == NULL)",
          "1188:                     goto err;",
          "1191:                     ECerr(EC_F_ECP_NISTZ256_POINTS_MUL, ERR_R_BN_LIB);",
          "1192:                     goto err;",
          "1193:                 }",
          "1194:                 scalar = tmp_scalar;",
          "1195:             }",
          "1200:                 p_str[i + 0] = d & 0xff;",
          "1201:                 p_str[i + 1] = (d >> 8) & 0xff;",
          "",
          "[Removed Lines]",
          "1190:                 if (!BN_nnmod(tmp_scalar, scalar, &group->order, ctx)) {",
          "1197:             for (i = 0; i < scalar->top * BN_BYTES; i += BN_BYTES) {",
          "1198:                 BN_ULONG d = scalar->d[i / BN_BYTES];",
          "",
          "[Added Lines]",
          "1191:                 if (!BN_nnmod(tmp_scalar, scalar, group->order, ctx)) {",
          "1198:             for (i = 0; i < bn_get_top(scalar) * BN_BYTES; i += BN_BYTES) {",
          "1199:                 BN_ULONG d = bn_get_words(scalar)[i / BN_BYTES];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1301:         OPENSSL_free(scalars);",
          "1302:     }",
          "1311:     ret = 1;",
          "",
          "[Removed Lines]",
          "1304:     memcpy(r->X.d, p.p.X, sizeof(p.p.X));",
          "1305:     memcpy(r->Y.d, p.p.Y, sizeof(p.p.Y));",
          "1306:     memcpy(r->Z.d, p.p.Z, sizeof(p.p.Z));",
          "1307:     bn_correct_top(&r->X);",
          "1308:     bn_correct_top(&r->Y);",
          "1309:     bn_correct_top(&r->Z);",
          "",
          "[Added Lines]",
          "1305:     bn_set_data(r->X, p.p.X, sizeof(p.p.X));",
          "1306:     bn_set_data(r->Y, p.p.Y, sizeof(p.p.Y));",
          "1307:     bn_set_data(r->Z, p.p.Z, sizeof(p.p.Z));",
          "1308:     bn_correct_top(r->X);",
          "1309:     bn_correct_top(r->Y);",
          "1310:     bn_correct_top(r->Z);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1329:         return 0;",
          "1330:     }",
          "1335:         ECerr(EC_F_ECP_NISTZ256_GET_AFFINE, EC_R_COORDINATES_OUT_OF_RANGE);",
          "1336:         return 0;",
          "1337:     }",
          "",
          "[Removed Lines]",
          "1332:     if (!ecp_nistz256_bignum_to_field_elem(point_x, &point->X) ||",
          "1333:         !ecp_nistz256_bignum_to_field_elem(point_y, &point->Y) ||",
          "1334:         !ecp_nistz256_bignum_to_field_elem(point_z, &point->Z)) {",
          "",
          "[Added Lines]",
          "1333:     if (!ecp_nistz256_bignum_to_field_elem(point_x, point->X) ||",
          "1334:         !ecp_nistz256_bignum_to_field_elem(point_y, point->Y) ||",
          "1335:         !ecp_nistz256_bignum_to_field_elem(point_z, point->Z)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1343:     if (x != NULL) {",
          "1344:         bn_wexpand(x, P256_LIMBS);",
          "1347:         bn_correct_top(x);",
          "1348:     }",
          "",
          "[Removed Lines]",
          "1345:         x->top = P256_LIMBS;",
          "1346:         ecp_nistz256_from_mont(x->d, x_aff);",
          "",
          "[Added Lines]",
          "1346:         bn_set_top(x, P256_LIMBS);",
          "1347:         ecp_nistz256_from_mont(bn_get_words(x), x_aff);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1351:         ecp_nistz256_mul_mont(z_inv3, z_inv3, z_inv2);",
          "1352:         ecp_nistz256_mul_mont(y_aff, z_inv3, point_y);",
          "1353:         bn_wexpand(y, P256_LIMBS);",
          "1356:         bn_correct_top(y);",
          "1357:     }",
          "",
          "[Removed Lines]",
          "1354:         y->top = P256_LIMBS;",
          "1355:         ecp_nistz256_from_mont(y->d, y_aff);",
          "",
          "[Added Lines]",
          "1355:         bn_set_top(y, P256_LIMBS);",
          "1356:         ecp_nistz256_from_mont(bn_get_words(y), y_aff);",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_oct.c||crypto/ec/ecp_oct.c": [
          "File: crypto/ec/ecp_oct.c -> crypto/ec/ecp_oct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  if (group->meth->field_decode == 0)",
          "104:   {",
          "",
          "[Removed Lines]",
          "102:  if (!BN_nnmod(x, x_, &group->field,ctx)) goto err;",
          "",
          "[Added Lines]",
          "102:  if (!BN_nnmod(x, x_, group->field,ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   }",
          "109:  else",
          "110:   {",
          "113:   }",
          "116:  if (group->a_is_minus3)",
          "117:   {",
          "121:   }",
          "122:  else",
          "123:   {",
          "124:   if (group->meth->field_decode)",
          "125:    {",
          "128:    }",
          "129:   else",
          "130:    {",
          "133:    }",
          "136:   }",
          "139:  if (group->meth->field_decode)",
          "140:   {",
          "143:   }",
          "144:  else",
          "145:   {",
          "147:   }",
          "150:   {",
          "151:   unsigned long err = ERR_peek_last_error();",
          "",
          "[Removed Lines]",
          "111:   if (!BN_mod_sqr(tmp2, x_, &group->field, ctx)) goto err;",
          "112:   if (!BN_mod_mul(tmp1, tmp2, x_, &group->field, ctx)) goto err;",
          "118:   if (!BN_mod_lshift1_quick(tmp2, x, &group->field)) goto err;",
          "119:   if (!BN_mod_add_quick(tmp2, tmp2, x, &group->field)) goto err;",
          "120:   if (!BN_mod_sub_quick(tmp1, tmp1, tmp2, &group->field)) goto err;",
          "126:    if (!group->meth->field_decode(group, tmp2, &group->a, ctx)) goto err;",
          "127:    if (!BN_mod_mul(tmp2, tmp2, x, &group->field, ctx)) goto err;",
          "132:    if (!group->meth->field_mul(group, tmp2, &group->a, x, ctx)) goto err;",
          "135:   if (!BN_mod_add_quick(tmp1, tmp1, tmp2, &group->field)) goto err;",
          "141:   if (!group->meth->field_decode(group, tmp2, &group->b, ctx)) goto err;",
          "142:   if (!BN_mod_add_quick(tmp1, tmp1, tmp2, &group->field)) goto err;",
          "146:   if (!BN_mod_add_quick(tmp1, tmp1, &group->b, &group->field)) goto err;",
          "149:  if (!BN_mod_sqrt(y, tmp1, &group->field, ctx))",
          "",
          "[Added Lines]",
          "111:   if (!BN_mod_sqr(tmp2, x_, group->field, ctx)) goto err;",
          "112:   if (!BN_mod_mul(tmp1, tmp2, x_, group->field, ctx)) goto err;",
          "118:   if (!BN_mod_lshift1_quick(tmp2, x, group->field)) goto err;",
          "119:   if (!BN_mod_add_quick(tmp2, tmp2, x, group->field)) goto err;",
          "120:   if (!BN_mod_sub_quick(tmp1, tmp1, tmp2, group->field)) goto err;",
          "126:    if (!group->meth->field_decode(group, tmp2, group->a, ctx)) goto err;",
          "127:    if (!BN_mod_mul(tmp2, tmp2, x, group->field, ctx)) goto err;",
          "132:    if (!group->meth->field_mul(group, tmp2, group->a, x, ctx)) goto err;",
          "135:   if (!BN_mod_add_quick(tmp1, tmp1, tmp2, group->field)) goto err;",
          "141:   if (!group->meth->field_decode(group, tmp2, group->b, ctx)) goto err;",
          "142:   if (!BN_mod_add_quick(tmp1, tmp1, tmp2, group->field)) goto err;",
          "146:   if (!BN_mod_add_quick(tmp1, tmp1, group->b, group->field)) goto err;",
          "149:  if (!BN_mod_sqrt(y, tmp1, group->field, ctx))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:    {",
          "167:    int kron;",
          "170:    if (kron == -2) goto err;",
          "172:    if (kron == 1)",
          "",
          "[Removed Lines]",
          "169:    kron = BN_kronecker(x, &group->field, ctx);",
          "",
          "[Added Lines]",
          "169:    kron = BN_kronecker(x, group->field, ctx);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "176:     ECerr(EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES, EC_R_INVALID_COMPRESSED_POINT);",
          "177:    goto err;",
          "178:    }",
          "180:   }",
          "181:  if (y_bit != BN_is_odd(y))",
          "182:   {",
          "",
          "[Removed Lines]",
          "179:   if (!BN_usub(y, &group->field, y)) goto err;",
          "",
          "[Added Lines]",
          "179:   if (!BN_usub(y, group->field, y)) goto err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "234:  ret = (form == POINT_CONVERSION_COMPRESSED) ? 1 + field_len : 1 + 2*field_len;",
          "",
          "[Removed Lines]",
          "233:  field_len = BN_num_bytes(&group->field);",
          "",
          "[Added Lines]",
          "233:  field_len = BN_num_bytes(group->field);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "364:   return EC_POINT_set_to_infinity(group, point);",
          "365:   }",
          "368:  enc_len = (form == POINT_CONVERSION_COMPRESSED) ? 1 + field_len : 1 + 2*field_len;",
          "370:  if (len != enc_len)",
          "",
          "[Removed Lines]",
          "367:  field_len = BN_num_bytes(&group->field);",
          "",
          "[Added Lines]",
          "367:  field_len = BN_num_bytes(group->field);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "386:  if (y == NULL) goto err;",
          "388:  if (!BN_bin2bn(buf + 1, field_len, x)) goto err;",
          "390:   {",
          "391:   ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);",
          "392:   goto err;",
          "",
          "[Removed Lines]",
          "389:  if (BN_ucmp(x, &group->field) >= 0)",
          "",
          "[Added Lines]",
          "389:  if (BN_ucmp(x, group->field) >= 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "399:  else",
          "400:   {",
          "401:   if (!BN_bin2bn(buf + 1 + field_len, field_len, y)) goto err;",
          "403:    {",
          "404:    ECerr(EC_F_EC_GFP_SIMPLE_OCT2POINT, EC_R_INVALID_ENCODING);",
          "405:    goto err;",
          "",
          "[Removed Lines]",
          "402:   if (BN_ucmp(y, &group->field) >= 0)",
          "",
          "[Added Lines]",
          "402:   if (BN_ucmp(y, group->field) >= 0)",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_smpl.c||crypto/ec/ecp_smpl.c": [
          "File: crypto/ec/ecp_smpl.c -> crypto/ec/ecp_smpl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: int ec_GFp_simple_group_init(EC_GROUP *group)",
          "132:  {",
          "136:  group->a_is_minus3 = 0;",
          "137:  return 1;",
          "138:  }",
          "",
          "[Removed Lines]",
          "133:  BN_init(&group->field);",
          "134:  BN_init(&group->a);",
          "135:  BN_init(&group->b);",
          "",
          "[Added Lines]",
          "133:  group->field = BN_new();",
          "134:  group->a = BN_new();",
          "135:  group->b = BN_new();",
          "136:  if(!group->field || !group->a || !group->b)",
          "137:   {",
          "138:   if(!group->field) BN_free(group->field);",
          "139:   if(!group->a) BN_free(group->a);",
          "140:   if(!group->b) BN_free(group->b);",
          "141:   return 0;",
          "142:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: void ec_GFp_simple_group_finish(EC_GROUP *group)",
          "142:  {",
          "146:  }",
          "149: void ec_GFp_simple_group_clear_finish(EC_GROUP *group)",
          "150:  {",
          "154:  }",
          "157: int ec_GFp_simple_group_copy(EC_GROUP *dest, const EC_GROUP *src)",
          "158:  {",
          "163:  dest->a_is_minus3 = src->a_is_minus3;",
          "",
          "[Removed Lines]",
          "143:  BN_free(&group->field);",
          "144:  BN_free(&group->a);",
          "145:  BN_free(&group->b);",
          "151:  BN_clear_free(&group->field);",
          "152:  BN_clear_free(&group->a);",
          "153:  BN_clear_free(&group->b);",
          "159:  if (!BN_copy(&dest->field, &src->field)) return 0;",
          "160:  if (!BN_copy(&dest->a, &src->a)) return 0;",
          "161:  if (!BN_copy(&dest->b, &src->b)) return 0;",
          "",
          "[Added Lines]",
          "150:  BN_free(group->field);",
          "151:  BN_free(group->a);",
          "152:  BN_free(group->b);",
          "158:  BN_clear_free(group->field);",
          "159:  BN_clear_free(group->a);",
          "160:  BN_clear_free(group->b);",
          "166:  if (!BN_copy(dest->field, src->field)) return 0;",
          "167:  if (!BN_copy(dest->a, src->a)) return 0;",
          "168:  if (!BN_copy(dest->b, src->b)) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:  if (tmp_a == NULL) goto err;",
          "199:  if (!BN_nnmod(tmp_a, a, p, ctx)) goto err;",
          "200:  if (group->meth->field_encode)",
          "202:  else",
          "207:  if (group->meth->field_encode)",
          "211:  if (!BN_add_word(tmp_a, 3)) goto err;",
          "214:  ret = 1;",
          "",
          "[Removed Lines]",
          "195:  if (!BN_copy(&group->field, p)) goto err;",
          "196:  BN_set_negative(&group->field, 0);",
          "201:   { if (!group->meth->field_encode(group, &group->a, tmp_a, ctx)) goto err; }",
          "203:   if (!BN_copy(&group->a, tmp_a)) goto err;",
          "206:  if (!BN_nnmod(&group->b, b, p, ctx)) goto err;",
          "208:   if (!group->meth->field_encode(group, &group->b, &group->b, ctx)) goto err;",
          "212:  group->a_is_minus3 = (0 == BN_cmp(tmp_a, &group->field));",
          "",
          "[Added Lines]",
          "202:  if (!BN_copy(group->field, p)) goto err;",
          "203:  BN_set_negative(group->field, 0);",
          "208:   { if (!group->meth->field_encode(group, group->a, tmp_a, ctx)) goto err; }",
          "210:   if (!BN_copy(group->a, tmp_a)) goto err;",
          "213:  if (!BN_nnmod(group->b, b, p, ctx)) goto err;",
          "215:   if (!group->meth->field_encode(group, group->b, group->b, ctx)) goto err;",
          "219:  group->a_is_minus3 = (0 == BN_cmp(tmp_a, group->field));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "229:  if (p != NULL)",
          "230:   {",
          "232:   }",
          "234:  if (a != NULL || b != NULL)",
          "",
          "[Removed Lines]",
          "231:   if (!BN_copy(p, &group->field)) return 0;",
          "",
          "[Added Lines]",
          "238:   if (!BN_copy(p, group->field)) return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "243:     }",
          "244:    if (a != NULL)",
          "245:     {",
          "247:     }",
          "248:    if (b != NULL)",
          "249:     {",
          "251:     }",
          "252:    }",
          "253:   else",
          "254:    {",
          "255:    if (a != NULL)",
          "256:     {",
          "258:     }",
          "259:    if (b != NULL)",
          "260:     {",
          "262:     }",
          "263:    }",
          "264:   }",
          "",
          "[Removed Lines]",
          "246:     if (!group->meth->field_decode(group, a, &group->a, ctx)) goto err;",
          "250:     if (!group->meth->field_decode(group, b, &group->b, ctx)) goto err;",
          "257:     if (!BN_copy(a, &group->a)) goto err;",
          "261:     if (!BN_copy(b, &group->b)) goto err;",
          "",
          "[Added Lines]",
          "253:     if (!group->meth->field_decode(group, a, group->a, ctx)) goto err;",
          "257:     if (!group->meth->field_decode(group, b, group->b, ctx)) goto err;",
          "264:     if (!BN_copy(a, group->a)) goto err;",
          "268:     if (!BN_copy(b, group->b)) goto err;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "275: int ec_GFp_simple_group_get_degree(const EC_GROUP *group)",
          "276:  {",
          "278:  }",
          "",
          "[Removed Lines]",
          "277:  return BN_num_bits(&group->field);",
          "",
          "[Added Lines]",
          "284:  return BN_num_bits(group->field);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "282:  {",
          "283:  int ret = 0;",
          "284:  BIGNUM *a,*b,*order,*tmp_1,*tmp_2;",
          "286:  BN_CTX *new_ctx = NULL;",
          "288:  if (ctx == NULL)",
          "",
          "[Removed Lines]",
          "285:  const BIGNUM *p = &group->field;",
          "",
          "[Added Lines]",
          "292:  const BIGNUM *p = group->field;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "305:  if (group->meth->field_decode)",
          "306:   {",
          "309:   }",
          "310:  else",
          "311:   {",
          "314:   }",
          "",
          "[Removed Lines]",
          "307:   if (!group->meth->field_decode(group, a, &group->a, ctx)) goto err;",
          "308:   if (!group->meth->field_decode(group, b, &group->b, ctx)) goto err;",
          "312:   if (!BN_copy(a, &group->a)) goto err;",
          "313:   if (!BN_copy(b, &group->b)) goto err;",
          "",
          "[Added Lines]",
          "314:   if (!group->meth->field_decode(group, a, group->a, ctx)) goto err;",
          "315:   if (!group->meth->field_decode(group, b, group->b, ctx)) goto err;",
          "319:   if (!BN_copy(a, group->a)) goto err;",
          "320:   if (!BN_copy(b, group->b)) goto err;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "348: int ec_GFp_simple_point_init(EC_POINT *point)",
          "349:  {",
          "353:  point->Z_is_one = 0;",
          "355:  return 1;",
          "356:  }",
          "359: void ec_GFp_simple_point_finish(EC_POINT *point)",
          "360:  {",
          "364:  }",
          "367: void ec_GFp_simple_point_clear_finish(EC_POINT *point)",
          "368:  {",
          "372:  point->Z_is_one = 0;",
          "373:  }",
          "376: int ec_GFp_simple_point_copy(EC_POINT *dest, const EC_POINT *src)",
          "377:  {",
          "381:  dest->Z_is_one = src->Z_is_one;",
          "383:  return 1;",
          "",
          "[Removed Lines]",
          "350:  BN_init(&point->X);",
          "351:  BN_init(&point->Y);",
          "352:  BN_init(&point->Z);",
          "361:  BN_free(&point->X);",
          "362:  BN_free(&point->Y);",
          "363:  BN_free(&point->Z);",
          "369:  BN_clear_free(&point->X);",
          "370:  BN_clear_free(&point->Y);",
          "371:  BN_clear_free(&point->Z);",
          "378:  if (!BN_copy(&dest->X, &src->X)) return 0;",
          "379:  if (!BN_copy(&dest->Y, &src->Y)) return 0;",
          "380:  if (!BN_copy(&dest->Z, &src->Z)) return 0;",
          "",
          "[Added Lines]",
          "357:  point->X = BN_new();",
          "358:  point->Y = BN_new();",
          "359:  point->Z = BN_new();",
          "362:  if(!point->X || !point->Y || !point->Z)",
          "363:   {",
          "364:   if(point->X) BN_free(point->X);",
          "365:   if(point->Y) BN_free(point->Y);",
          "366:   if(point->Z) BN_free(point->Z);",
          "367:   return 0;",
          "368:   }",
          "375:  BN_free(point->X);",
          "376:  BN_free(point->Y);",
          "377:  BN_free(point->Z);",
          "383:  BN_clear_free(point->X);",
          "384:  BN_clear_free(point->Y);",
          "385:  BN_clear_free(point->Z);",
          "392:  if (!BN_copy(dest->X, src->X)) return 0;",
          "393:  if (!BN_copy(dest->Y, src->Y)) return 0;",
          "394:  if (!BN_copy(dest->Z, src->Z)) return 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "387: int ec_GFp_simple_point_set_to_infinity(const EC_GROUP *group, EC_POINT *point)",
          "388:  {",
          "389:  point->Z_is_one = 0;",
          "391:  return 1;",
          "392:  }",
          "",
          "[Removed Lines]",
          "390:  BN_zero(&point->Z);",
          "",
          "[Added Lines]",
          "404:  BN_zero(point->Z);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "408:  if (x != NULL)",
          "409:   {",
          "411:   if (group->meth->field_encode)",
          "412:    {",
          "414:    }",
          "415:   }",
          "417:  if (y != NULL)",
          "418:   {",
          "420:   if (group->meth->field_encode)",
          "421:    {",
          "423:    }",
          "424:   }",
          "",
          "[Removed Lines]",
          "410:   if (!BN_nnmod(&point->X, x, &group->field, ctx)) goto err;",
          "413:    if (!group->meth->field_encode(group, &point->X, &point->X, ctx)) goto err;",
          "419:   if (!BN_nnmod(&point->Y, y, &group->field, ctx)) goto err;",
          "422:    if (!group->meth->field_encode(group, &point->Y, &point->Y, ctx)) goto err;",
          "",
          "[Added Lines]",
          "424:   if (!BN_nnmod(point->X, x, group->field, ctx)) goto err;",
          "427:    if (!group->meth->field_encode(group, point->X, point->X, ctx)) goto err;",
          "433:   if (!BN_nnmod(point->Y, y, group->field, ctx)) goto err;",
          "436:    if (!group->meth->field_encode(group, point->Y, point->Y, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "427:   {",
          "428:   int Z_is_one;",
          "432:   if (group->meth->field_encode)",
          "433:    {",
          "434:    if (Z_is_one && (group->meth->field_set_to_one != 0))",
          "435:     {",
          "437:     }",
          "438:    else",
          "439:     {",
          "441:     }",
          "442:    }",
          "443:   point->Z_is_one = Z_is_one;",
          "",
          "[Removed Lines]",
          "430:   if (!BN_nnmod(&point->Z, z, &group->field, ctx)) goto err;",
          "431:   Z_is_one = BN_is_one(&point->Z);",
          "436:     if (!group->meth->field_set_to_one(group, &point->Z, ctx)) goto err;",
          "440:     if (!group->meth->field_encode(group, &point->Z, &point->Z, ctx)) goto err;",
          "",
          "[Added Lines]",
          "444:   if (!BN_nnmod(point->Z, z, group->field, ctx)) goto err;",
          "445:   Z_is_one = BN_is_one(point->Z);",
          "450:     if (!group->meth->field_set_to_one(group, point->Z, ctx)) goto err;",
          "454:     if (!group->meth->field_encode(group, point->Z, point->Z, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "470:   if (x != NULL)",
          "471:    {",
          "473:    }",
          "474:   if (y != NULL)",
          "475:    {",
          "477:    }",
          "478:   if (z != NULL)",
          "479:    {",
          "481:    }",
          "482:   }",
          "483:  else",
          "484:   {",
          "485:   if (x != NULL)",
          "486:    {",
          "488:    }",
          "489:   if (y != NULL)",
          "490:    {",
          "492:    }",
          "493:   if (z != NULL)",
          "494:    {",
          "496:    }",
          "497:   }",
          "",
          "[Removed Lines]",
          "472:    if (!group->meth->field_decode(group, x, &point->X, ctx)) goto err;",
          "476:    if (!group->meth->field_decode(group, y, &point->Y, ctx)) goto err;",
          "480:    if (!group->meth->field_decode(group, z, &point->Z, ctx)) goto err;",
          "487:    if (!BN_copy(x, &point->X)) goto err;",
          "491:    if (!BN_copy(y, &point->Y)) goto err;",
          "495:    if (!BN_copy(z, &point->Z)) goto err;",
          "",
          "[Added Lines]",
          "486:    if (!group->meth->field_decode(group, x, point->X, ctx)) goto err;",
          "490:    if (!group->meth->field_decode(group, y, point->Y, ctx)) goto err;",
          "494:    if (!group->meth->field_decode(group, z, point->Z, ctx)) goto err;",
          "501:    if (!BN_copy(x, point->X)) goto err;",
          "505:    if (!BN_copy(y, point->Y)) goto err;",
          "509:    if (!BN_copy(z, point->Z)) goto err;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "552:  if (group->meth->field_decode)",
          "553:   {",
          "555:   Z_ = Z;",
          "556:   }",
          "557:  else",
          "558:   {",
          "560:   }",
          "562:  if (BN_is_one(Z_))",
          "",
          "[Removed Lines]",
          "554:   if (!group->meth->field_decode(group, Z, &point->Z, ctx)) goto err;",
          "559:   Z_ = &point->Z;",
          "",
          "[Added Lines]",
          "568:   if (!group->meth->field_decode(group, Z, point->Z, ctx)) goto err;",
          "573:   Z_ = point->Z;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "565:    {",
          "566:    if (x != NULL)",
          "567:     {",
          "569:     }",
          "570:    if (y != NULL)",
          "571:     {",
          "573:     }",
          "574:    }",
          "575:   else",
          "576:    {",
          "577:    if (x != NULL)",
          "578:     {",
          "580:     }",
          "581:    if (y != NULL)",
          "582:     {",
          "584:     }",
          "585:    }",
          "586:   }",
          "587:  else",
          "588:   {",
          "590:    {",
          "591:    ECerr(EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES, ERR_R_BN_LIB);",
          "592:    goto err;",
          "",
          "[Removed Lines]",
          "568:     if (!group->meth->field_decode(group, x, &point->X, ctx)) goto err;",
          "572:     if (!group->meth->field_decode(group, y, &point->Y, ctx)) goto err;",
          "579:     if (!BN_copy(x, &point->X)) goto err;",
          "583:     if (!BN_copy(y, &point->Y)) goto err;",
          "589:   if (!BN_mod_inverse(Z_1, Z_, &group->field, ctx))",
          "",
          "[Added Lines]",
          "582:     if (!group->meth->field_decode(group, x, point->X, ctx)) goto err;",
          "586:     if (!group->meth->field_decode(group, y, point->Y, ctx)) goto err;",
          "593:     if (!BN_copy(x, point->X)) goto err;",
          "597:     if (!BN_copy(y, point->Y)) goto err;",
          "603:   if (!BN_mod_inverse(Z_1, Z_, group->field, ctx))",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "599:    }",
          "600:   else",
          "601:    {",
          "603:    }",
          "605:   if (x != NULL)",
          "606:    {",
          "609:    }",
          "611:   if (y != NULL)",
          "",
          "[Removed Lines]",
          "602:    if (!BN_mod_sqr(Z_2, Z_1, &group->field, ctx)) goto err;",
          "608:    if (!group->meth->field_mul(group, x, &point->X, Z_2, ctx)) goto err;",
          "",
          "[Added Lines]",
          "616:    if (!BN_mod_sqr(Z_2, Z_1, group->field, ctx)) goto err;",
          "622:    if (!group->meth->field_mul(group, x, point->X, Z_2, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "617:     }",
          "618:    else",
          "619:     {",
          "621:     }",
          "625:    }",
          "626:   }",
          "",
          "[Removed Lines]",
          "620:     if (!BN_mod_mul(Z_3, Z_2, Z_1, &group->field, ctx)) goto err;",
          "624:    if (!group->meth->field_mul(group, y, &point->Y, Z_3, ctx)) goto err;",
          "",
          "[Added Lines]",
          "634:     if (!BN_mod_mul(Z_3, Z_2, Z_1, group->field, ctx)) goto err;",
          "638:    if (!group->meth->field_mul(group, y, point->Y, Z_3, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "653:  field_mul = group->meth->field_mul;",
          "654:  field_sqr = group->meth->field_sqr;",
          "657:  if (ctx == NULL)",
          "658:   {",
          "",
          "[Removed Lines]",
          "655:  p = &group->field;",
          "",
          "[Added Lines]",
          "669:  p = group->field;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "680:  if (b->Z_is_one)",
          "681:   {",
          "686:   }",
          "687:  else",
          "688:   {",
          "696:   }",
          "699:  if (a->Z_is_one)",
          "700:   {",
          "705:   }",
          "706:  else",
          "707:   {",
          "715:   }",
          "",
          "[Removed Lines]",
          "682:   if (!BN_copy(n1, &a->X)) goto end;",
          "683:   if (!BN_copy(n2, &a->Y)) goto end;",
          "689:   if (!field_sqr(group, n0, &b->Z, ctx)) goto end;",
          "690:   if (!field_mul(group, n1, &a->X, n0, ctx)) goto end;",
          "693:   if (!field_mul(group, n0, n0, &b->Z, ctx)) goto end;",
          "694:   if (!field_mul(group, n2, &a->Y, n0, ctx)) goto end;",
          "701:   if (!BN_copy(n3, &b->X)) goto end;",
          "702:   if (!BN_copy(n4, &b->Y)) goto end;",
          "708:   if (!field_sqr(group, n0, &a->Z, ctx)) goto end;",
          "709:   if (!field_mul(group, n3, &b->X, n0, ctx)) goto end;",
          "712:   if (!field_mul(group, n0, n0, &a->Z, ctx)) goto end;",
          "713:   if (!field_mul(group, n4, &b->Y, n0, ctx)) goto end;",
          "",
          "[Added Lines]",
          "696:   if (!BN_copy(n1, a->X)) goto end;",
          "697:   if (!BN_copy(n2, a->Y)) goto end;",
          "703:   if (!field_sqr(group, n0, b->Z, ctx)) goto end;",
          "704:   if (!field_mul(group, n1, a->X, n0, ctx)) goto end;",
          "707:   if (!field_mul(group, n0, n0, b->Z, ctx)) goto end;",
          "708:   if (!field_mul(group, n2, a->Y, n0, ctx)) goto end;",
          "715:   if (!BN_copy(n3, b->X)) goto end;",
          "716:   if (!BN_copy(n4, b->Y)) goto end;",
          "722:   if (!field_sqr(group, n0, a->Z, ctx)) goto end;",
          "723:   if (!field_mul(group, n3, b->X, n0, ctx)) goto end;",
          "726:   if (!field_mul(group, n0, n0, a->Z, ctx)) goto end;",
          "727:   if (!field_mul(group, n4, b->Y, n0, ctx)) goto end;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "733:   else",
          "734:    {",
          "737:    r->Z_is_one = 0;",
          "738:    ret = 1;",
          "739:    goto end;",
          "",
          "[Removed Lines]",
          "736:    BN_zero(&r->Z);",
          "",
          "[Added Lines]",
          "750:    BN_zero(r->Z);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "750:  if (a->Z_is_one && b->Z_is_one)",
          "751:   {",
          "753:   }",
          "754:  else",
          "755:   {",
          "756:   if (a->Z_is_one)",
          "758:   else if (b->Z_is_one)",
          "760:   else",
          "763:   }",
          "764:  r->Z_is_one = 0;",
          "",
          "[Removed Lines]",
          "752:   if (!BN_copy(&r->Z, n5)) goto end;",
          "757:    { if (!BN_copy(n0, &b->Z)) goto end; }",
          "759:    { if (!BN_copy(n0, &a->Z)) goto end; }",
          "761:    { if (!field_mul(group, n0, &a->Z, &b->Z, ctx)) goto end; }",
          "762:   if (!field_mul(group, &r->Z, n0, n5, ctx)) goto end;",
          "",
          "[Added Lines]",
          "766:   if (!BN_copy(r->Z, n5)) goto end;",
          "771:    { if (!BN_copy(n0, b->Z)) goto end; }",
          "773:    { if (!BN_copy(n0, a->Z)) goto end; }",
          "775:    { if (!field_mul(group, n0, a->Z, b->Z, ctx)) goto end; }",
          "776:   if (!field_mul(group, r->Z, n0, n5, ctx)) goto end;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "768:  if (!field_sqr(group, n0, n6, ctx)) goto end;",
          "769:  if (!field_sqr(group, n4, n5, ctx)) goto end;",
          "770:  if (!field_mul(group, n3, n1, n4, ctx)) goto end;",
          "776:  if (!BN_mod_sub_quick(n0, n3, n0, p)) goto end;",
          "",
          "[Removed Lines]",
          "771:  if (!BN_mod_sub_quick(&r->X, n0, n3, p)) goto end;",
          "775:  if (!BN_mod_lshift1_quick(n0, &r->X, p)) goto end;",
          "",
          "[Added Lines]",
          "785:  if (!BN_mod_sub_quick(r->X, n0, n3, p)) goto end;",
          "789:  if (!BN_mod_lshift1_quick(n0, r->X, p)) goto end;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "784:  if (BN_is_odd(n0))",
          "785:   if (!BN_add(n0, n0, p)) goto end;",
          "790:  ret = 1;",
          "",
          "[Removed Lines]",
          "787:  if (!BN_rshift1(&r->Y, n0)) goto end;",
          "",
          "[Added Lines]",
          "801:  if (!BN_rshift1(r->Y, n0)) goto end;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "810:  if (EC_POINT_is_at_infinity(group, a))",
          "811:   {",
          "813:   r->Z_is_one = 0;",
          "814:   return 1;",
          "815:   }",
          "817:  field_mul = group->meth->field_mul;",
          "818:  field_sqr = group->meth->field_sqr;",
          "821:  if (ctx == NULL)",
          "822:   {",
          "",
          "[Removed Lines]",
          "812:   BN_zero(&r->Z);",
          "819:  p = &group->field;",
          "",
          "[Added Lines]",
          "826:   BN_zero(r->Z);",
          "833:  p = group->field;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "841:  if (a->Z_is_one)",
          "842:   {",
          "844:   if (!BN_mod_lshift1_quick(n1, n0, p)) goto err;",
          "845:   if (!BN_mod_add_quick(n0, n0, n1, p)) goto err;",
          "848:   }",
          "849:  else if (group->a_is_minus3)",
          "850:   {",
          "854:   if (!field_mul(group, n1, n0, n2, ctx)) goto err;",
          "855:   if (!BN_mod_lshift1_quick(n0, n1, p)) goto err;",
          "856:   if (!BN_mod_add_quick(n1, n0, n1, p)) goto err;",
          "",
          "[Removed Lines]",
          "843:   if (!field_sqr(group, n0, &a->X, ctx)) goto err;",
          "846:   if (!BN_mod_add_quick(n1, n0, &group->a, p)) goto err;",
          "851:   if (!field_sqr(group, n1, &a->Z, ctx)) goto err;",
          "852:   if (!BN_mod_add_quick(n0, &a->X, n1, p)) goto err;",
          "853:   if (!BN_mod_sub_quick(n2, &a->X, n1, p)) goto err;",
          "",
          "[Added Lines]",
          "857:   if (!field_sqr(group, n0, a->X, ctx)) goto err;",
          "860:   if (!BN_mod_add_quick(n1, n0, group->a, p)) goto err;",
          "865:   if (!field_sqr(group, n1, a->Z, ctx)) goto err;",
          "866:   if (!BN_mod_add_quick(n0, a->X, n1, p)) goto err;",
          "867:   if (!BN_mod_sub_quick(n2, a->X, n1, p)) goto err;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "859:   }",
          "860:  else",
          "861:   {",
          "863:   if (!BN_mod_lshift1_quick(n1, n0, p)) goto err;",
          "864:   if (!BN_mod_add_quick(n0, n0, n1, p)) goto err;",
          "866:   if (!field_sqr(group, n1, n1, ctx)) goto err;",
          "868:   if (!BN_mod_add_quick(n1, n1, n0, p)) goto err;",
          "870:   }",
          "",
          "[Removed Lines]",
          "862:   if (!field_sqr(group, n0, &a->X, ctx)) goto err;",
          "865:   if (!field_sqr(group, n1, &a->Z, ctx)) goto err;",
          "867:   if (!field_mul(group, n1, n1, &group->a, ctx)) goto err;",
          "",
          "[Added Lines]",
          "876:   if (!field_sqr(group, n0, a->X, ctx)) goto err;",
          "879:   if (!field_sqr(group, n1, a->Z, ctx)) goto err;",
          "881:   if (!field_mul(group, n1, n1, group->a, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "873:  if (a->Z_is_one)",
          "874:   {",
          "876:   }",
          "877:  else",
          "878:   {",
          "880:   }",
          "882:  r->Z_is_one = 0;",
          "888:  if (!BN_mod_lshift_quick(n2, n2, 2, p)) goto err;",
          "892:  if (!BN_mod_lshift1_quick(n0, n2, p)) goto err;",
          "",
          "[Removed Lines]",
          "875:   if (!BN_copy(n0, &a->Y)) goto err;",
          "879:   if (!field_mul(group, n0, &a->Y, &a->Z, ctx)) goto err;",
          "881:  if (!BN_mod_lshift1_quick(&r->Z, n0, p)) goto err;",
          "886:  if (!field_sqr(group, n3, &a->Y, ctx)) goto err;",
          "887:  if (!field_mul(group, n2, &a->X, n3, ctx)) goto err;",
          "893:  if (!field_sqr(group, &r->X, n1, ctx)) goto err;",
          "894:  if (!BN_mod_sub_quick(&r->X, &r->X, n0, p)) goto err;",
          "",
          "[Added Lines]",
          "889:   if (!BN_copy(n0, a->Y)) goto err;",
          "893:   if (!field_mul(group, n0, a->Y, a->Z, ctx)) goto err;",
          "895:  if (!BN_mod_lshift1_quick(r->Z, n0, p)) goto err;",
          "900:  if (!field_sqr(group, n3, a->Y, ctx)) goto err;",
          "901:  if (!field_mul(group, n2, a->X, n3, ctx)) goto err;",
          "907:  if (!field_sqr(group, r->X, n1, ctx)) goto err;",
          "908:  if (!BN_mod_sub_quick(r->X, r->X, n0, p)) goto err;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "904:  if (!field_mul(group, n0, n1, n0, ctx)) goto err;",
          "908:  ret = 1;",
          "",
          "[Removed Lines]",
          "903:  if (!BN_mod_sub_quick(n0, n2, &r->X, p)) goto err;",
          "905:  if (!BN_mod_sub_quick(&r->Y, n0, n3, p)) goto err;",
          "",
          "[Added Lines]",
          "917:  if (!BN_mod_sub_quick(n0, n2, r->X, p)) goto err;",
          "919:  if (!BN_mod_sub_quick(r->Y, n0, n3, p)) goto err;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "918: int ec_GFp_simple_invert(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)",
          "919:  {",
          "922:   return 1;",
          "925:  }",
          "928: int ec_GFp_simple_is_at_infinity(const EC_GROUP *group, const EC_POINT *point)",
          "929:  {",
          "931:  }",
          "",
          "[Removed Lines]",
          "920:  if (EC_POINT_is_at_infinity(group, point) || BN_is_zero(&point->Y))",
          "924:  return BN_usub(&point->Y, &group->field, &point->Y);",
          "930:  return BN_is_zero(&point->Z);",
          "",
          "[Added Lines]",
          "934:  if (EC_POINT_is_at_infinity(group, point) || BN_is_zero(point->Y))",
          "938:  return BN_usub(point->Y, group->field, point->Y);",
          "944:  return BN_is_zero(point->Z);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "946:  field_mul = group->meth->field_mul;",
          "947:  field_sqr = group->meth->field_sqr;",
          "950:  if (ctx == NULL)",
          "951:   {",
          "",
          "[Removed Lines]",
          "948:  p = &group->field;",
          "",
          "[Added Lines]",
          "962:  p = group->field;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "976:  if (!point->Z_is_one)",
          "977:   {",
          "979:   if (!field_sqr(group, Z4, tmp, ctx)) goto err;",
          "980:   if (!field_mul(group, Z6, Z4, tmp, ctx)) goto err;",
          "",
          "[Removed Lines]",
          "974:  if (!field_sqr(group, rh, &point->X, ctx)) goto err;",
          "978:   if (!field_sqr(group, tmp, &point->Z, ctx)) goto err;",
          "",
          "[Added Lines]",
          "988:  if (!field_sqr(group, rh, point->X, ctx)) goto err;",
          "992:   if (!field_sqr(group, tmp, point->Z, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "985:    if (!BN_mod_lshift1_quick(tmp, Z4, p)) goto err;",
          "986:    if (!BN_mod_add_quick(tmp, tmp, Z4, p)) goto err;",
          "987:    if (!BN_mod_sub_quick(rh, rh, tmp, p)) goto err;",
          "989:    }",
          "990:   else",
          "991:    {",
          "993:    if (!BN_mod_add_quick(rh, rh, tmp, p)) goto err;",
          "995:    }",
          "999:   if (!BN_mod_add_quick(rh, rh, tmp, p)) goto err;",
          "1000:   }",
          "1001:  else",
          "",
          "[Removed Lines]",
          "988:    if (!field_mul(group, rh, rh, &point->X, ctx)) goto err;",
          "992:    if (!field_mul(group, tmp, Z4, &group->a, ctx)) goto err;",
          "994:    if (!field_mul(group, rh, rh, &point->X, ctx)) goto err;",
          "998:   if (!field_mul(group, tmp, &group->b, Z6, ctx)) goto err;",
          "",
          "[Added Lines]",
          "1002:    if (!field_mul(group, rh, rh, point->X, ctx)) goto err;",
          "1006:    if (!field_mul(group, tmp, Z4, group->a, ctx)) goto err;",
          "1008:    if (!field_mul(group, rh, rh, point->X, ctx)) goto err;",
          "1012:   if (!field_mul(group, tmp, group->b, Z6, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1010:   }",
          "1015:  ret = (0 == BN_ucmp(tmp, rh));",
          "",
          "[Removed Lines]",
          "1006:   if (!BN_mod_add_quick(rh, rh, &group->a, p)) goto err;",
          "1007:   if (!field_mul(group, rh, rh, &point->X, ctx)) goto err;",
          "1009:   if (!BN_mod_add_quick(rh, rh, &group->b, p)) goto err;",
          "1013:  if (!field_sqr(group, tmp, &point->Y, ctx)) goto err;",
          "",
          "[Added Lines]",
          "1020:   if (!BN_mod_add_quick(rh, rh, group->a, p)) goto err;",
          "1021:   if (!field_mul(group, rh, rh, point->X, ctx)) goto err;",
          "1023:   if (!BN_mod_add_quick(rh, rh, group->b, p)) goto err;",
          "1027:  if (!field_sqr(group, tmp, point->Y, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1048:  if (a->Z_is_one && b->Z_is_one)",
          "1049:   {",
          "1051:   }",
          "1053:  field_mul = group->meth->field_mul;",
          "",
          "[Removed Lines]",
          "1050:   return ((BN_cmp(&a->X, &b->X) == 0) && BN_cmp(&a->Y, &b->Y) == 0) ? 0 : 1;",
          "",
          "[Added Lines]",
          "1064:   return ((BN_cmp(a->X, b->X) == 0) && BN_cmp(a->Y, b->Y) == 0) ? 0 : 1;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1076:  if (!b->Z_is_one)",
          "1077:   {",
          "1080:   tmp1_ = tmp1;",
          "1081:   }",
          "1082:  else",
          "1084:  if (!a->Z_is_one)",
          "1085:   {",
          "1088:   tmp2_ = tmp2;",
          "1089:   }",
          "1090:  else",
          "1094:  if (BN_cmp(tmp1_, tmp2_) != 0)",
          "",
          "[Removed Lines]",
          "1078:   if (!field_sqr(group, Zb23, &b->Z, ctx)) goto end;",
          "1079:   if (!field_mul(group, tmp1, &a->X, Zb23, ctx)) goto end;",
          "1083:   tmp1_ = &a->X;",
          "1086:   if (!field_sqr(group, Za23, &a->Z, ctx)) goto end;",
          "1087:   if (!field_mul(group, tmp2, &b->X, Za23, ctx)) goto end;",
          "1091:   tmp2_ = &b->X;",
          "",
          "[Added Lines]",
          "1092:   if (!field_sqr(group, Zb23, b->Z, ctx)) goto end;",
          "1093:   if (!field_mul(group, tmp1, a->X, Zb23, ctx)) goto end;",
          "1097:   tmp1_ = a->X;",
          "1100:   if (!field_sqr(group, Za23, a->Z, ctx)) goto end;",
          "1101:   if (!field_mul(group, tmp2, b->X, Za23, ctx)) goto end;",
          "1105:   tmp2_ = b->X;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1101:  if (!b->Z_is_one)",
          "1102:   {",
          "1106:   }",
          "1107:  else",
          "1109:  if (!a->Z_is_one)",
          "1110:   {",
          "1114:   }",
          "1115:  else",
          "1119:  if (BN_cmp(tmp1_, tmp2_) != 0)",
          "",
          "[Removed Lines]",
          "1103:   if (!field_mul(group, Zb23, Zb23, &b->Z, ctx)) goto end;",
          "1104:   if (!field_mul(group, tmp1, &a->Y, Zb23, ctx)) goto end;",
          "1108:   tmp1_ = &a->Y;",
          "1111:   if (!field_mul(group, Za23, Za23, &a->Z, ctx)) goto end;",
          "1112:   if (!field_mul(group, tmp2, &b->Y, Za23, ctx)) goto end;",
          "1116:   tmp2_ = &b->Y;",
          "",
          "[Added Lines]",
          "1117:   if (!field_mul(group, Zb23, Zb23, b->Z, ctx)) goto end;",
          "1118:   if (!field_mul(group, tmp1, a->Y, Zb23, ctx)) goto end;",
          "1122:   tmp1_ = a->Y;",
          "1125:   if (!field_mul(group, Za23, Za23, a->Z, ctx)) goto end;",
          "1126:   if (!field_mul(group, tmp2, b->Y, Za23, ctx)) goto end;",
          "1130:   tmp2_ = b->Y;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1210:   {",
          "1212:   }",
          "1213:  else",
          "1214:   {",
          "",
          "[Removed Lines]",
          "1209:  if (!BN_is_zero(&points[0]->Z))",
          "1211:   if (!BN_copy(prod_Z[0], &points[0]->Z)) goto err;",
          "",
          "[Added Lines]",
          "1223:  if (!BN_is_zero(points[0]->Z))",
          "1225:   if (!BN_copy(prod_Z[0], points[0]->Z)) goto err;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1225:  for (i = 1; i < num; i++)",
          "1226:   {",
          "1228:    {",
          "1230:    }",
          "1231:   else",
          "1232:    {",
          "",
          "[Removed Lines]",
          "1227:   if (!BN_is_zero(&points[i]->Z))",
          "1229:    if (!group->meth->field_mul(group, prod_Z[i], prod_Z[i - 1], &points[i]->Z, ctx)) goto err;",
          "",
          "[Added Lines]",
          "1241:   if (!BN_is_zero(points[i]->Z))",
          "1243:    if (!group->meth->field_mul(group, prod_Z[i], prod_Z[i - 1], points[i]->Z, ctx)) goto err;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1241:   {",
          "1242:   ECerr(EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE, ERR_R_BN_LIB);",
          "1243:   goto err;",
          "",
          "[Removed Lines]",
          "1240:  if (!BN_mod_inverse(tmp, prod_Z[num - 1], &group->field, ctx))",
          "",
          "[Added Lines]",
          "1254:  if (!BN_mod_inverse(tmp, prod_Z[num - 1], group->field, ctx))",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1255:   {",
          "1259:    {",
          "1262:    if (!group->meth->field_mul(group, tmp_Z, prod_Z[i - 1], tmp, ctx)) goto err;",
          "1267:    }",
          "1268:   }",
          "1271:   {",
          "1274:   }",
          "",
          "[Removed Lines]",
          "1258:   if (!BN_is_zero(&points[i]->Z))",
          "1264:    if (!group->meth->field_mul(group, tmp, tmp, &points[i]->Z, ctx)) goto err;",
          "1266:    if (!BN_copy(&points[i]->Z, tmp_Z)) goto err;",
          "1270:  if (!BN_is_zero(&points[0]->Z))",
          "1273:   if (!BN_copy(&points[0]->Z, tmp)) goto err;",
          "",
          "[Added Lines]",
          "1272:   if (!BN_is_zero(points[i]->Z))",
          "1278:    if (!group->meth->field_mul(group, tmp, tmp, points[i]->Z, ctx)) goto err;",
          "1280:    if (!BN_copy(points[i]->Z, tmp_Z)) goto err;",
          "1284:  if (!BN_is_zero(points[0]->Z))",
          "1287:   if (!BN_copy(points[0]->Z, tmp)) goto err;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1279:   {",
          "1280:   EC_POINT *p = points[i];",
          "1283:    {",
          "1292:    if (group->meth->field_set_to_one != 0)",
          "1293:     {",
          "1295:     }",
          "1296:    else",
          "1297:     {",
          "1299:     }",
          "1300:    p->Z_is_one = 1;",
          "1301:    }",
          "",
          "[Removed Lines]",
          "1282:   if (!BN_is_zero(&p->Z))",
          "1286:    if (!group->meth->field_sqr(group, tmp, &p->Z, ctx)) goto err;",
          "1287:    if (!group->meth->field_mul(group, &p->X, &p->X, tmp, ctx)) goto err;",
          "1289:    if (!group->meth->field_mul(group, tmp, tmp, &p->Z, ctx)) goto err;",
          "1290:    if (!group->meth->field_mul(group, &p->Y, &p->Y, tmp, ctx)) goto err;",
          "1294:     if (!group->meth->field_set_to_one(group, &p->Z, ctx)) goto err;",
          "1298:     if (!BN_one(&p->Z)) goto err;",
          "",
          "[Added Lines]",
          "1296:   if (!BN_is_zero(p->Z))",
          "1300:    if (!group->meth->field_sqr(group, tmp, p->Z, ctx)) goto err;",
          "1301:    if (!group->meth->field_mul(group, p->X, p->X, tmp, ctx)) goto err;",
          "1303:    if (!group->meth->field_mul(group, tmp, tmp, p->Z, ctx)) goto err;",
          "1304:    if (!group->meth->field_mul(group, p->Y, p->Y, tmp, ctx)) goto err;",
          "1308:     if (!group->meth->field_set_to_one(group, p->Z, ctx)) goto err;",
          "1312:     if (!BN_one(p->Z)) goto err;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1323: int ec_GFp_simple_field_mul(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)",
          "1324:  {",
          "1326:  }",
          "1329: int ec_GFp_simple_field_sqr(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)",
          "1330:  {",
          "1332:  }",
          "",
          "[Removed Lines]",
          "1325:  return BN_mod_mul(r, a, b, &group->field, ctx);",
          "1331:  return BN_mod_sqr(r, a, &group->field, ctx);",
          "",
          "[Added Lines]",
          "1339:  return BN_mod_mul(r, a, b, group->field, ctx);",
          "1345:  return BN_mod_sqr(r, a, group->field, ctx);",
          "",
          "---------------"
        ],
        "crypto/ec/ectest.c||crypto/ec/ectest.c": [
          "File: crypto/ec/ectest.c -> crypto/ec/ectest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:  {",
          "668:   const EC_POINT *points[4];",
          "669:   const BIGNUM *scalars[4];",
          "672:   if (EC_POINT_is_at_infinity(group, Q)) ABORT;",
          "673:   points[0] = Q;",
          "",
          "[Removed Lines]",
          "670:   BIGNUM scalar3;",
          "",
          "[Added Lines]",
          "670:   BIGNUM *scalar3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713:   scalars[1] = y;",
          "720:   if (!EC_POINTs_mul(group, P, NULL, 4, points, scalars, ctx)) ABORT;",
          "721:   if (!EC_POINT_is_at_infinity(group, P)) ABORT;",
          "723:   fprintf(stdout, \" ok\\n\\n\");",
          "726:  }",
          "",
          "[Removed Lines]",
          "716:   BN_init(&scalar3);",
          "717:   BN_zero(&scalar3);",
          "718:   scalars[3] = &scalar3;",
          "725:   BN_free(&scalar3);",
          "",
          "[Added Lines]",
          "716:   scalar3 = BN_new();",
          "717:   if(!scalar3) ABORT;",
          "718:   BN_zero(scalar3);",
          "719:   scalars[3] = scalar3;",
          "726:   BN_free(scalar3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fff69a7d8c38b5a391e7d71b0b51999003dd1e8f",
      "candidate_info": {
        "commit_hash": "fff69a7d8c38b5a391e7d71b0b51999003dd1e8f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/fff69a7d8c38b5a391e7d71b0b51999003dd1e8f",
        "files": [
          "CHANGES",
          "crypto/bn/bn.h",
          "crypto/bn/bn_lib.c",
          "crypto/ec/ec2_mult.c"
        ],
        "message": "Fix for CVE-2014-0076 backported to 0.9.8 branch\n\nFix for the attack described in the paper \"Recovering OpenSSL\nECDSA Nonces Using the FLUSH+RELOAD Cache Side-channel Attack\"\nby Yuval Yarom and Naomi Benger. Details can be obtained from:\nhttp://eprint.iacr.org/2014/140\n\nThanks to Yuval Yarom and Naomi Benger for discovering this\nflaw and to Yuval Yarom for supplying a fix.\n\nThanks for mancha for backporting the fix to OpenSSL 0.9.8 branch.",
        "before_after_code_files": [
          "crypto/bn/bn.h||crypto/bn/bn.h",
          "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
          "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "crypto/bn/bn.h||crypto/bn/bn.h",
            "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ],
          "candidate": [
            "crypto/bn/bn.h||crypto/bn/bn.h",
            "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
            "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/bn.h||crypto/bn/bn.h": [
          "File: crypto/bn/bn.h -> crypto/bn/bn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "511: BIGNUM *BN_mod_sqrt(BIGNUM *ret,",
          "512:  const BIGNUM *a, const BIGNUM *n,BN_CTX *ctx);",
          "515: #ifndef OPENSSL_NO_DEPRECATED",
          "516: BIGNUM *BN_generate_prime(BIGNUM *ret,int bits,int safe,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514: void BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "741: #define bn_fix_top(a)  bn_check_top(a)",
          "745: #define bn_pollute(a)",
          "746: #define bn_check_top(a)",
          "747: #define bn_fix_top(a)  bn_correct_top(a)",
          "749: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "745: #define bn_check_size(bn, bits) bn_wcheck_size(bn, ((bits+BN_BITS2-1))/BN_BITS2)",
          "746: #define bn_wcheck_size(bn, words) \\",
          "747:  do { \\",
          "748:   const BIGNUM *_bnum2 = (bn); \\",
          "749:   assert(words <= (_bnum2)->dmax && words >= (_bnum2)->top); \\",
          "750:  } while(0)",
          "757: #define bn_check_size(bn, bits)",
          "758: #define bn_wcheck_size(bn, words)",
          "",
          "---------------"
        ],
        "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c": [
          "File: crypto/bn/bn_lib.c -> crypto/bn/bn_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:   }",
          "825:  return bn_cmp_words(a,b,cl);",
          "826:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)",
          "836:  {",
          "837:  BN_ULONG t;",
          "838:  int i;",
          "840:  bn_wcheck_size(a, nwords);",
          "841:  bn_wcheck_size(b, nwords);",
          "843:  assert(a != b);",
          "844:  assert((condition & (condition - 1)) == 0);",
          "845:  assert(sizeof(BN_ULONG) >= sizeof(int));",
          "847:  condition = ((condition - 1) >> (BN_BITS2 - 1)) - 1;",
          "849:  t = (a->top^b->top) & condition;",
          "850:  a->top ^= t;",
          "851:  b->top ^= t;",
          "853: #define BN_CONSTTIME_SWAP(ind) \\",
          "854:  do { \\",
          "855:   t = (a->d[ind] ^ b->d[ind]) & condition; \\",
          "856:   a->d[ind] ^= t; \\",
          "857:   b->d[ind] ^= t; \\",
          "858:  } while (0)",
          "861:  switch (nwords) {",
          "862:  default:",
          "863:   for (i = 10; i < nwords; i++)",
          "864:    BN_CONSTTIME_SWAP(i);",
          "875:  case 1: BN_CONSTTIME_SWAP(0);",
          "876:  }",
          "877: #undef BN_CONSTTIME_SWAP",
          "878: }",
          "",
          "---------------"
        ],
        "crypto/ec/ec2_mult.c||crypto/ec/ec2_mult.c": [
          "File: crypto/ec/ec2_mult.c -> crypto/ec/ec2_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "244:  x2 = &r->X;",
          "245:  z2 = &r->Y;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:  bn_wexpand(x1, group->field.top);",
          "251:  bn_wexpand(z1, group->field.top);",
          "252:  bn_wexpand(x2, group->field.top);",
          "253:  bn_wexpand(z2, group->field.top);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266:   {",
          "267:   for (; j >= 0; j--)",
          "268:    {",
          "279:    mask >>= 1;",
          "280:    }",
          "281:   j = BN_BITS2 - 1;",
          "",
          "[Removed Lines]",
          "269:    if (scalar->d[i] & mask)",
          "270:     {",
          "271:     if (!gf2m_Madd(group, &point->X, x1, z1, x2, z2, ctx)) goto err;",
          "272:     if (!gf2m_Mdouble(group, x2, z2, ctx)) goto err;",
          "273:     }",
          "274:    else",
          "275:     {",
          "276:     if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "277:     if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "278:     }",
          "",
          "[Added Lines]",
          "277:    BN_consttime_swap(scalar->d[i] & mask, x1, x2, group->field.top);",
          "278:    BN_consttime_swap(scalar->d[i] & mask, z1, z2, group->field.top);",
          "279:    if (!gf2m_Madd(group, &point->X, x2, z2, x1, z1, ctx)) goto err;",
          "280:    if (!gf2m_Mdouble(group, x1, z1, ctx)) goto err;",
          "281:    BN_consttime_swap(scalar->d[i] & mask, x1, x2, group->field.top);",
          "282:    BN_consttime_swap(scalar->d[i] & mask, z1, z2, group->field.top);",
          "",
          "---------------"
        ]
      }
    }
  ]
}