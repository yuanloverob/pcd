{
  "cve_id": "CVE-2015-0289",
  "cve_desc": "The PKCS#7 implementation in OpenSSL before 0.9.8zf, 1.0.0 before 1.0.0r, 1.0.1 before 1.0.1m, and 1.0.2 before 1.0.2a does not properly handle a lack of outer ContentInfo, which allows attackers to cause a denial of service (NULL pointer dereference and application crash) by leveraging an application that processes arbitrary PKCS#7 data and providing malformed data with ASN.1 encoding, related to crypto/pkcs7/pk7_doit.c and crypto/pkcs7/pk7_lib.c.",
  "repo": "openssl/openssl",
  "patch_hash": "c225c3cf9bd67297fb0c297768d69cbc03fbdab7",
  "patch_info": {
    "commit_hash": "c225c3cf9bd67297fb0c297768d69cbc03fbdab7",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/c225c3cf9bd67297fb0c297768d69cbc03fbdab7",
    "files": [
      "crypto/pkcs7/pk7_doit.c",
      "crypto/pkcs7/pk7_lib.c"
    ],
    "message": "PKCS#7: avoid NULL pointer dereferences with missing content\n\nIn PKCS#7, the ASN.1 content component is optional.\nThis typically applies to inner content (detached signatures),\nhowever we must also handle unexpected missing outer content\ncorrectly.\n\nThis patch only addresses functions reachable from parsing,\ndecryption and verification, and functions otherwise associated\nwith reading potentially untrusted data.\n\nCorrecting all low-level API calls requires further work.\n\nCVE-2015-0289\n\nThanks to Michal Zalewski (Google) for reporting this issue.\n\nReviewed-by: Steve Henson <steve@openssl.org>",
    "before_after_code_files": [
      "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
      "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
    ]
  },
  "patch_diff": {
    "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
      "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "261:     PKCS7_RECIP_INFO *ri = NULL;",
      "262:     ASN1_OCTET_STRING *os = NULL;",
      "264:     i = OBJ_obj2nid(p7->type);",
      "265:     p7->state = PKCS7_S_HEADER;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "264:     if (p7 == NULL) {",
      "265:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_INVALID_NULL_POINTER);",
      "266:         return NULL;",
      "267:     }",
      "278:     if (p7->d.ptr == NULL) {",
      "279:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_NO_CONTENT);",
      "280:         return NULL;",
      "281:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "411:     unsigned char *ek = NULL, *tkey = NULL;",
      "412:     int eklen = 0, tkeylen = 0;",
      "414:     i = OBJ_obj2nid(p7->type);",
      "415:     p7->state = PKCS7_S_HEADER;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "433:     if (p7 == NULL) {",
      "434:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_NULL_POINTER);",
      "435:         return NULL;",
      "436:     }",
      "438:     if (p7->d.ptr == NULL) {",
      "439:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT);",
      "440:         return NULL;",
      "441:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "683:     STACK_OF(PKCS7_SIGNER_INFO) *si_sk = NULL;",
      "684:     ASN1_OCTET_STRING *os = NULL;",
      "686:     EVP_MD_CTX_init(&ctx_tmp);",
      "687:     i = OBJ_obj2nid(p7->type);",
      "688:     p7->state = PKCS7_S_HEADER;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "715:     if (p7 == NULL) {",
      "716:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_INVALID_NULL_POINTER);",
      "717:         return 0;",
      "718:     }",
      "720:     if (p7->d.ptr == NULL) {",
      "721:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_NO_CONTENT);",
      "722:         return 0;",
      "723:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "723:         if (PKCS7_type_is_data(p7->d.sign->contents) && p7->detached) {",
      "724:             M_ASN1_OCTET_STRING_free(os);",
      "725:             p7->d.sign->contents->d.data = NULL;",
      "726:         }",
      "727:         break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "764:             os = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "732:         if (PKCS7_type_is_data(p7->d.digest->contents) && p7->detached) {",
      "733:             M_ASN1_OCTET_STRING_free(os);",
      "734:             p7->d.digest->contents->d.data = NULL;",
      "735:         }",
      "736:         break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "774:             os = NULL;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "796:         M_ASN1_OCTET_STRING_set(p7->d.digest->digest, md_data, md_len);",
      "797:     }",
      "815:     }",
      "816:     ret = 1;",
      "817:  err:",
      "",
      "[Removed Lines]",
      "799:     if (!PKCS7_is_detached(p7) && !(os->flags & ASN1_STRING_FLAG_NDEF)) {",
      "800:         char *cont;",
      "801:         long contlen;",
      "802:         btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
      "803:         if (btmp == NULL) {",
      "804:             PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
      "805:             goto err;",
      "806:         }",
      "807:         contlen = BIO_get_mem_data(btmp, &cont);",
      "812:         BIO_set_flags(btmp, BIO_FLAGS_MEM_RDONLY);",
      "813:         BIO_set_mem_eof_return(btmp, 0);",
      "814:         ASN1_STRING_set0(os, (unsigned char *)cont, contlen);",
      "",
      "[Added Lines]",
      "840:     if (!PKCS7_is_detached(p7)) {",
      "845:         if (os == NULL)",
      "846:             goto err;",
      "847:         if (!(os->flags & ASN1_STRING_FLAG_NDEF)) {",
      "848:             char *cont;",
      "849:             long contlen;",
      "850:             btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
      "851:             if (btmp == NULL) {",
      "852:                 PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
      "853:                 goto err;",
      "854:             }",
      "855:             contlen = BIO_get_mem_data(btmp, &cont);",
      "860:             BIO_set_flags(btmp, BIO_FLAGS_MEM_RDONLY);",
      "861:             BIO_set_mem_eof_return(btmp, 0);",
      "862:             ASN1_STRING_set0(os, (unsigned char *)cont, contlen);",
      "863:         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "886:     STACK_OF(X509) *cert;",
      "887:     X509 *x509;",
      "889:     if (PKCS7_type_is_signed(p7)) {",
      "890:         cert = p7->d.sign->cert;",
      "891:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "938:     if (p7 == NULL) {",
      "939:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_INVALID_NULL_POINTER);",
      "940:         return 0;",
      "941:     }",
      "943:     if (p7->d.ptr == NULL) {",
      "944:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_NO_CONTENT);",
      "945:         return 0;",
      "946:     }",
      "",
      "---------------"
    ],
    "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c": [
      "File: crypto/pkcs7/pk7_lib.c -> crypto/pkcs7/pk7_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "445: STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7)",
      "446: {",
      "447:     if (PKCS7_type_is_signed(p7)) {",
      "448:         return (p7->d.sign->signer_info);",
      "449:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "448:     if (p7 == NULL || p7->d.ptr == NULL)",
      "449:         return NULL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59302b600e8d5b77ef144e447bb046fd7ab72686",
      "candidate_info": {
        "commit_hash": "59302b600e8d5b77ef144e447bb046fd7ab72686",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/59302b600e8d5b77ef144e447bb046fd7ab72686",
        "files": [
          "crypto/pkcs7/pk7_doit.c"
        ],
        "message": "PKCS#7: Fix NULL dereference with missing EncryptedContent.\n\nCVE-2015-1790\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ],
          "candidate": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:         goto err;",
          "469:     }",
          "472:     if (md_sk != NULL) {",
          "473:         for (i = 0; i < sk_X509_ALGOR_num(md_sk); i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:     if (data_body == NULL && in_bio == NULL) {",
          "481:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT);",
          "482:         goto err;",
          "483:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "593:             BIO_push(out, etmp);",
          "594:         etmp = NULL;",
          "595:     }",
          "597:         bio = in_bio;",
          "598:     } else {",
          "599:         if (data_body->length > 0)",
          "",
          "[Removed Lines]",
          "596:     if (PKCS7_is_detached(p7) || (in_bio != NULL)) {",
          "",
          "[Added Lines]",
          "610:     if (in_bio != NULL) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9104dc42558665e851e240e4e12030bef459787c",
      "candidate_info": {
        "commit_hash": "9104dc42558665e851e240e4e12030bef459787c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9104dc42558665e851e240e4e12030bef459787c",
        "files": [
          "crypto/pkcs7/pk7_doit.c",
          "crypto/pkcs7/pk7_lib.c"
        ],
        "message": "PKCS#7: avoid NULL pointer dereferences with missing content\n\nIn PKCS#7, the ASN.1 content component is optional.\nThis typically applies to inner content (detached signatures),\nhowever we must also handle unexpected missing outer content\ncorrectly.\n\nThis patch only addresses functions reachable from parsing,\ndecryption and verification, and functions otherwise associated\nwith reading potentially untrusted data.\n\nCorrecting all low-level API calls requires further work.\n\nCVE-2015-0289\n\nThanks to Michal Zalewski (Google) for reporting this issue.\n\nReviewed-by: Steve Henson <steve@openssl.org>",
        "before_after_code_files": [
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
          "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
            "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
          ],
          "candidate": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
            "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:     PKCS7_RECIP_INFO *ri = NULL;",
          "262:     ASN1_OCTET_STRING *os = NULL;",
          "264:     i = OBJ_obj2nid(p7->type);",
          "265:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:     if (p7 == NULL) {",
          "265:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_INVALID_NULL_POINTER);",
          "266:         return NULL;",
          "267:     }",
          "278:     if (p7->d.ptr == NULL) {",
          "279:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_NO_CONTENT);",
          "280:         return NULL;",
          "281:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:     unsigned char *ek = NULL, *tkey = NULL;",
          "412:     int eklen = 0, tkeylen = 0;",
          "414:     i = OBJ_obj2nid(p7->type);",
          "415:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:     if (p7 == NULL) {",
          "434:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_NULL_POINTER);",
          "435:         return NULL;",
          "436:     }",
          "438:     if (p7->d.ptr == NULL) {",
          "439:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT);",
          "440:         return NULL;",
          "441:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "704:     STACK_OF(PKCS7_SIGNER_INFO) *si_sk = NULL;",
          "705:     ASN1_OCTET_STRING *os = NULL;",
          "707:     EVP_MD_CTX_init(&ctx_tmp);",
          "708:     i = OBJ_obj2nid(p7->type);",
          "709:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "736:     if (p7 == NULL) {",
          "737:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_INVALID_NULL_POINTER);",
          "738:         return 0;",
          "739:     }",
          "741:     if (p7->d.ptr == NULL) {",
          "742:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_NO_CONTENT);",
          "743:         return 0;",
          "744:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "744:         if (PKCS7_type_is_data(p7->d.sign->contents) && p7->detached) {",
          "745:             M_ASN1_OCTET_STRING_free(os);",
          "746:             p7->d.sign->contents->d.data = NULL;",
          "747:         }",
          "748:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785:             os = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "753:         if (PKCS7_type_is_data(p7->d.digest->contents) && p7->detached) {",
          "754:             M_ASN1_OCTET_STRING_free(os);",
          "755:             p7->d.digest->contents->d.data = NULL;",
          "756:         }",
          "757:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795:             os = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "815:         M_ASN1_OCTET_STRING_set(p7->d.digest->digest, md_data, md_len);",
          "816:     }",
          "834:     }",
          "835:     ret = 1;",
          "836:  err:",
          "",
          "[Removed Lines]",
          "818:     if (!PKCS7_is_detached(p7) && !(os->flags & ASN1_STRING_FLAG_NDEF)) {",
          "819:         char *cont;",
          "820:         long contlen;",
          "821:         btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
          "822:         if (btmp == NULL) {",
          "823:             PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
          "824:             goto err;",
          "825:         }",
          "826:         contlen = BIO_get_mem_data(btmp, &cont);",
          "831:         BIO_set_flags(btmp, BIO_FLAGS_MEM_RDONLY);",
          "832:         BIO_set_mem_eof_return(btmp, 0);",
          "833:         ASN1_STRING_set0(os, (unsigned char *)cont, contlen);",
          "",
          "[Added Lines]",
          "859:     if (!PKCS7_is_detached(p7)) {",
          "864:         if (os == NULL)",
          "865:             goto err;",
          "866:         if (!(os->flags & ASN1_STRING_FLAG_NDEF)) {",
          "867:             char *cont;",
          "868:             long contlen;",
          "869:             btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
          "870:             if (btmp == NULL) {",
          "871:                 PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
          "872:                 goto err;",
          "873:             }",
          "874:             contlen = BIO_get_mem_data(btmp, &cont);",
          "879:             BIO_set_flags(btmp, BIO_FLAGS_MEM_RDONLY);",
          "880:             BIO_set_mem_eof_return(btmp, 0);",
          "881:             ASN1_STRING_set0(os, (unsigned char *)cont, contlen);",
          "882:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "905:     STACK_OF(X509) *cert;",
          "906:     X509 *x509;",
          "908:     if (PKCS7_type_is_signed(p7)) {",
          "909:         cert = p7->d.sign->cert;",
          "910:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957:     if (p7 == NULL) {",
          "958:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_INVALID_NULL_POINTER);",
          "959:         return 0;",
          "960:     }",
          "962:     if (p7->d.ptr == NULL) {",
          "963:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_NO_CONTENT);",
          "964:         return 0;",
          "965:     }",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c": [
          "File: crypto/pkcs7/pk7_lib.c -> crypto/pkcs7/pk7_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445: STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7)",
          "446: {",
          "447:     if (PKCS7_type_is_signed(p7)) {",
          "448:         return (p7->d.sign->signer_info);",
          "449:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:     if (p7 == NULL || p7->d.ptr == NULL)",
          "449:         return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "544e3e3b69d080ee87721bd03c37b4d450384fb9",
      "candidate_info": {
        "commit_hash": "544e3e3b69d080ee87721bd03c37b4d450384fb9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/544e3e3b69d080ee87721bd03c37b4d450384fb9",
        "files": [
          "crypto/pkcs7/pk7_doit.c",
          "crypto/pkcs7/pk7_lib.c"
        ],
        "message": "PKCS#7: avoid NULL pointer dereferences with missing content\n\nIn PKCS#7, the ASN.1 content component is optional.\nThis typically applies to inner content (detached signatures),\nhowever we must also handle unexpected missing outer content\ncorrectly.\n\nThis patch only addresses functions reachable from parsing,\ndecryption and verification, and functions otherwise associated\nwith reading potentially untrusted data.\n\nCorrecting all low-level API calls requires further work.\n\nCVE-2015-0289\n\nThanks to Michal Zalewski (Google) for reporting this issue.\n\nReviewed-by: Steve Henson <steve@openssl.org>\n\nConflicts:\n\tcrypto/pkcs7/pk7_doit.c",
        "before_after_code_files": [
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
          "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
            "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
          ],
          "candidate": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
            "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:     EVP_PKEY *pkey;",
          "148:     ASN1_OCTET_STRING *os = NULL;",
          "150:     i = OBJ_obj2nid(p7->type);",
          "151:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     if (p7 == NULL) {",
          "151:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_INVALID_NULL_POINTER);",
          "152:         return NULL;",
          "153:     }",
          "164:     if (p7->d.ptr == NULL) {",
          "165:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_NO_CONTENT);",
          "166:         return NULL;",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:     STACK_OF(PKCS7_RECIP_INFO) *rsk = NULL;",
          "326:     PKCS7_RECIP_INFO *ri = NULL;",
          "328:     i = OBJ_obj2nid(p7->type);",
          "329:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:     if (p7 == NULL) {",
          "348:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_NULL_POINTER);",
          "349:         return NULL;",
          "350:     }",
          "352:     if (p7->d.ptr == NULL) {",
          "353:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT);",
          "354:         return NULL;",
          "355:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "607:     STACK_OF(PKCS7_SIGNER_INFO) *si_sk = NULL;",
          "608:     ASN1_OCTET_STRING *os = NULL;",
          "610:     EVP_MD_CTX_init(&ctx_tmp);",
          "611:     i = OBJ_obj2nid(p7->type);",
          "612:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639:     if (p7 == NULL) {",
          "640:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_INVALID_NULL_POINTER);",
          "641:         return 0;",
          "642:     }",
          "644:     if (p7->d.ptr == NULL) {",
          "645:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_NO_CONTENT);",
          "646:         return 0;",
          "647:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "636:         if (PKCS7_type_is_data(p7->d.sign->contents) && p7->detached) {",
          "637:             M_ASN1_OCTET_STRING_free(os);",
          "638:             p7->d.sign->contents->d.data = NULL;",
          "639:         }",
          "640:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677:             os = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "645:         if (PKCS7_type_is_data(p7->d.digest->contents) && p7->detached) {",
          "646:             M_ASN1_OCTET_STRING_free(os);",
          "647:             p7->d.digest->contents->d.data = NULL;",
          "648:         }",
          "649:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687:             os = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "767:     }",
          "769:     if (!PKCS7_is_detached(p7)) {",
          "770:         btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
          "771:         if (btmp == NULL) {",
          "772:             PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "815:         if (os == NULL)",
          "816:             goto err;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "803:     STACK_OF(X509) *cert;",
          "804:     X509 *x509;",
          "806:     if (PKCS7_type_is_signed(p7)) {",
          "807:         cert = p7->d.sign->cert;",
          "808:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "853:     if (p7 == NULL) {",
          "854:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_INVALID_NULL_POINTER);",
          "855:         return 0;",
          "856:     }",
          "858:     if (p7->d.ptr == NULL) {",
          "859:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_NO_CONTENT);",
          "860:         return 0;",
          "861:     }",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c": [
          "File: crypto/pkcs7/pk7_lib.c -> crypto/pkcs7/pk7_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465: STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7)",
          "466: {",
          "467:     if (PKCS7_type_is_signed(p7)) {",
          "468:         return (p7->d.sign->signer_info);",
          "469:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:     if (p7 == NULL || p7->d.ptr == NULL)",
          "469:         return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0334c2c92dd1bc3ad8138ba6e74006c3631b0f9",
      "candidate_info": {
        "commit_hash": "c0334c2c92dd1bc3ad8138ba6e74006c3631b0f9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c0334c2c92dd1bc3ad8138ba6e74006c3631b0f9",
        "files": [
          "crypto/pkcs7/pk7_doit.c",
          "crypto/pkcs7/pk7_lib.c"
        ],
        "message": "PKCS#7: avoid NULL pointer dereferences with missing content\n\nIn PKCS#7, the ASN.1 content component is optional.\nThis typically applies to inner content (detached signatures),\nhowever we must also handle unexpected missing outer content\ncorrectly.\n\nThis patch only addresses functions reachable from parsing,\ndecryption and verification, and functions otherwise associated\nwith reading potentially untrusted data.\n\nCorrecting all low-level API calls requires further work.\n\nCVE-2015-0289\n\nThanks to Michal Zalewski (Google) for reporting this issue.\n\nReviewed-by: Steve Henson <steve@openssl.org>",
        "before_after_code_files": [
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
          "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
            "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
          ],
          "candidate": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
            "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:     PKCS7_RECIP_INFO *ri = NULL;",
          "262:     ASN1_OCTET_STRING *os = NULL;",
          "264:     i = OBJ_obj2nid(p7->type);",
          "265:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:     if (p7 == NULL) {",
          "265:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_INVALID_NULL_POINTER);",
          "266:         return NULL;",
          "267:     }",
          "278:     if (p7->d.ptr == NULL) {",
          "279:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_NO_CONTENT);",
          "280:         return NULL;",
          "281:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:     unsigned char *ek = NULL, *tkey = NULL;",
          "412:     int eklen = 0, tkeylen = 0;",
          "414:     i = OBJ_obj2nid(p7->type);",
          "415:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:     if (p7 == NULL) {",
          "434:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_NULL_POINTER);",
          "435:         return NULL;",
          "436:     }",
          "438:     if (p7->d.ptr == NULL) {",
          "439:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT);",
          "440:         return NULL;",
          "441:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "707:     STACK_OF(PKCS7_SIGNER_INFO) *si_sk = NULL;",
          "708:     ASN1_OCTET_STRING *os = NULL;",
          "710:     EVP_MD_CTX_init(&ctx_tmp);",
          "711:     i = OBJ_obj2nid(p7->type);",
          "712:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     if (p7 == NULL) {",
          "740:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_INVALID_NULL_POINTER);",
          "741:         return 0;",
          "742:     }",
          "744:     if (p7->d.ptr == NULL) {",
          "745:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_NO_CONTENT);",
          "746:         return 0;",
          "747:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "747:         if (PKCS7_type_is_data(p7->d.sign->contents) && p7->detached) {",
          "748:             M_ASN1_OCTET_STRING_free(os);",
          "749:             p7->d.sign->contents->d.data = NULL;",
          "750:         }",
          "751:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "788:             os = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "756:         if (PKCS7_type_is_data(p7->d.digest->contents) && p7->detached) {",
          "757:             M_ASN1_OCTET_STRING_free(os);",
          "758:             p7->d.digest->contents->d.data = NULL;",
          "759:         }",
          "760:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:             os = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "820:         M_ASN1_OCTET_STRING_set(p7->d.digest->digest, md_data, md_len);",
          "821:     }",
          "839:     }",
          "840:     ret = 1;",
          "841:  err:",
          "",
          "[Removed Lines]",
          "823:     if (!PKCS7_is_detached(p7) && !(os->flags & ASN1_STRING_FLAG_NDEF)) {",
          "824:         char *cont;",
          "825:         long contlen;",
          "826:         btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
          "827:         if (btmp == NULL) {",
          "828:             PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
          "829:             goto err;",
          "830:         }",
          "831:         contlen = BIO_get_mem_data(btmp, &cont);",
          "836:         BIO_set_flags(btmp, BIO_FLAGS_MEM_RDONLY);",
          "837:         BIO_set_mem_eof_return(btmp, 0);",
          "838:         ASN1_STRING_set0(os, (unsigned char *)cont, contlen);",
          "",
          "[Added Lines]",
          "864:     if (!PKCS7_is_detached(p7)) {",
          "869:         if (os == NULL)",
          "870:             goto err;",
          "871:         if (!(os->flags & ASN1_STRING_FLAG_NDEF)) {",
          "872:             char *cont;",
          "873:             long contlen;",
          "874:             btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
          "875:             if (btmp == NULL) {",
          "876:                 PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
          "877:                 goto err;",
          "878:             }",
          "879:             contlen = BIO_get_mem_data(btmp, &cont);",
          "884:             BIO_set_flags(btmp, BIO_FLAGS_MEM_RDONLY);",
          "885:             BIO_set_mem_eof_return(btmp, 0);",
          "886:             ASN1_STRING_set0(os, (unsigned char *)cont, contlen);",
          "887:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "910:     STACK_OF(X509) *cert;",
          "911:     X509 *x509;",
          "913:     if (PKCS7_type_is_signed(p7)) {",
          "914:         cert = p7->d.sign->cert;",
          "915:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "962:     if (p7 == NULL) {",
          "963:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_INVALID_NULL_POINTER);",
          "964:         return 0;",
          "965:     }",
          "967:     if (p7->d.ptr == NULL) {",
          "968:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_NO_CONTENT);",
          "969:         return 0;",
          "970:     }",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c": [
          "File: crypto/pkcs7/pk7_lib.c -> crypto/pkcs7/pk7_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445: STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7)",
          "446: {",
          "447:     if (PKCS7_type_is_signed(p7)) {",
          "448:         return (p7->d.sign->signer_info);",
          "449:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:     if (p7 == NULL || p7->d.ptr == NULL)",
          "449:         return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2acb69c760f681b070a20defe5510272492a7e8",
      "candidate_info": {
        "commit_hash": "e2acb69c760f681b070a20defe5510272492a7e8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e2acb69c760f681b070a20defe5510272492a7e8",
        "files": [
          "crypto/pkcs7/pk7_doit.c",
          "crypto/pkcs7/pk7_lib.c"
        ],
        "message": "PKCS#7: avoid NULL pointer dereferences with missing content\n\nIn PKCS#7, the ASN.1 content component is optional.\nThis typically applies to inner content (detached signatures),\nhowever we must also handle unexpected missing outer content\ncorrectly.\n\nThis patch only addresses functions reachable from parsing,\ndecryption and verification, and functions otherwise associated\nwith reading potentially untrusted data.\n\nCorrecting all low-level API calls requires further work.\n\nCVE-2015-0289\n\nThanks to Michal Zalewski (Google) for reporting this issue.\n\nReviewed-by: Steve Henson <steve@openssl.org>",
        "before_after_code_files": [
          "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
          "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
            "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
          ],
          "candidate": [
            "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c",
            "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/pkcs7/pk7_doit.c||crypto/pkcs7/pk7_doit.c": [
          "File: crypto/pkcs7/pk7_doit.c -> crypto/pkcs7/pk7_doit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:     PKCS7_RECIP_INFO *ri = NULL;",
          "262:     ASN1_OCTET_STRING *os = NULL;",
          "264:     i = OBJ_obj2nid(p7->type);",
          "265:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264:     if (p7 == NULL) {",
          "265:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_INVALID_NULL_POINTER);",
          "266:         return NULL;",
          "267:     }",
          "278:     if (p7->d.ptr == NULL) {",
          "279:         PKCS7err(PKCS7_F_PKCS7_DATAINIT, PKCS7_R_NO_CONTENT);",
          "280:         return NULL;",
          "281:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:     unsigned char *ek = NULL, *tkey = NULL;",
          "412:     int eklen = 0, tkeylen = 0;",
          "414:     i = OBJ_obj2nid(p7->type);",
          "415:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:     if (p7 == NULL) {",
          "434:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_NULL_POINTER);",
          "435:         return NULL;",
          "436:     }",
          "438:     if (p7->d.ptr == NULL) {",
          "439:         PKCS7err(PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_CONTENT);",
          "440:         return NULL;",
          "441:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "707:     STACK_OF(PKCS7_SIGNER_INFO) *si_sk = NULL;",
          "708:     ASN1_OCTET_STRING *os = NULL;",
          "710:     EVP_MD_CTX_init(&ctx_tmp);",
          "711:     i = OBJ_obj2nid(p7->type);",
          "712:     p7->state = PKCS7_S_HEADER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:     if (p7 == NULL) {",
          "740:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_INVALID_NULL_POINTER);",
          "741:         return 0;",
          "742:     }",
          "744:     if (p7->d.ptr == NULL) {",
          "745:         PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_NO_CONTENT);",
          "746:         return 0;",
          "747:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "747:         if (PKCS7_type_is_data(p7->d.sign->contents) && p7->detached) {",
          "748:             M_ASN1_OCTET_STRING_free(os);",
          "749:             p7->d.sign->contents->d.data = NULL;",
          "750:         }",
          "751:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "788:             os = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "756:         if (PKCS7_type_is_data(p7->d.digest->contents) && p7->detached) {",
          "757:             M_ASN1_OCTET_STRING_free(os);",
          "758:             p7->d.digest->contents->d.data = NULL;",
          "759:         }",
          "760:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:             os = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "820:         M_ASN1_OCTET_STRING_set(p7->d.digest->digest, md_data, md_len);",
          "821:     }",
          "839:     }",
          "840:     ret = 1;",
          "841:  err:",
          "",
          "[Removed Lines]",
          "823:     if (!PKCS7_is_detached(p7) && !(os->flags & ASN1_STRING_FLAG_NDEF)) {",
          "824:         char *cont;",
          "825:         long contlen;",
          "826:         btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
          "827:         if (btmp == NULL) {",
          "828:             PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
          "829:             goto err;",
          "830:         }",
          "831:         contlen = BIO_get_mem_data(btmp, &cont);",
          "836:         BIO_set_flags(btmp, BIO_FLAGS_MEM_RDONLY);",
          "837:         BIO_set_mem_eof_return(btmp, 0);",
          "838:         ASN1_STRING_set0(os, (unsigned char *)cont, contlen);",
          "",
          "[Added Lines]",
          "864:     if (!PKCS7_is_detached(p7)) {",
          "869:         if (os == NULL)",
          "870:             goto err;",
          "871:         if (!(os->flags & ASN1_STRING_FLAG_NDEF)) {",
          "872:             char *cont;",
          "873:             long contlen;",
          "874:             btmp = BIO_find_type(bio, BIO_TYPE_MEM);",
          "875:             if (btmp == NULL) {",
          "876:                 PKCS7err(PKCS7_F_PKCS7_DATAFINAL, PKCS7_R_UNABLE_TO_FIND_MEM_BIO);",
          "877:                 goto err;",
          "878:             }",
          "879:             contlen = BIO_get_mem_data(btmp, &cont);",
          "884:             BIO_set_flags(btmp, BIO_FLAGS_MEM_RDONLY);",
          "885:             BIO_set_mem_eof_return(btmp, 0);",
          "886:             ASN1_STRING_set0(os, (unsigned char *)cont, contlen);",
          "887:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "910:     STACK_OF(X509) *cert;",
          "911:     X509 *x509;",
          "913:     if (PKCS7_type_is_signed(p7)) {",
          "914:         cert = p7->d.sign->cert;",
          "915:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "962:     if (p7 == NULL) {",
          "963:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_INVALID_NULL_POINTER);",
          "964:         return 0;",
          "965:     }",
          "967:     if (p7->d.ptr == NULL) {",
          "968:         PKCS7err(PKCS7_F_PKCS7_DATAVERIFY, PKCS7_R_NO_CONTENT);",
          "969:         return 0;",
          "970:     }",
          "",
          "---------------"
        ],
        "crypto/pkcs7/pk7_lib.c||crypto/pkcs7/pk7_lib.c": [
          "File: crypto/pkcs7/pk7_lib.c -> crypto/pkcs7/pk7_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445: STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7)",
          "446: {",
          "447:     if (PKCS7_type_is_signed(p7)) {",
          "448:         return (p7->d.sign->signer_info);",
          "449:     } else if (PKCS7_type_is_signedAndEnveloped(p7)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:     if (p7 == NULL || p7->d.ptr == NULL)",
          "449:         return NULL;",
          "",
          "---------------"
        ]
      }
    }
  ]
}