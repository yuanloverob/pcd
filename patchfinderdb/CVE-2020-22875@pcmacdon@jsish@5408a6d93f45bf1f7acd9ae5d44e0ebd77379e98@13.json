{
  "cve_id": "CVE-2020-22875",
  "cve_desc": "Integer overflow vulnerability in function Jsi_ObjSetLength in jsish before 3.0.6, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
  "patch_info": {
    "commit_hash": "5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/5408a6d93f45bf1f7acd9ae5d44e0ebd77379e98",
    "files": [
      "md/Reference.md",
      "src/jsi.h",
      "src/jsiArray.c",
      "src/jsiCmds.c",
      "tests/locals.jsi",
      "tools/protos.jsi",
      "www/reference.wiki"
    ],
    "message": "Release \"3.0.6\": Fix crashes in Array for \"integer overflow #10\"\n\nFossilOrigin-Name: 50642d64b8f0a4e62df68e59fcb2ef0923c3dbec8fc8a15d38b1ddbe655c38d6",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiArray.c||src/jsiArray.c",
      "src/jsiCmds.c||src/jsiCmds.c",
      "tests/locals.jsi||tests/locals.jsi",
      "tools/protos.jsi||tools/protos.jsi",
      "www/reference.wiki||www/reference.wiki"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 4",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "---------------"
    ],
    "src/jsiArray.c||src/jsiArray.c": [
      "File: src/jsiArray.c -> src/jsiArray.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: #define NO_QSORT_R 1",
      "8: #endif",
      "10: static Jsi_RC jsi_ArrayPushCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "11:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "12: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10: static uint jsi_SizeOfArray(Jsi_Interp *interp, Jsi_Obj *obj) {",
      "11:     if (!obj || !obj->arr)",
      "12:         return 0;",
      "13:     return obj->arrCnt;",
      "14: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:     obj = _this->d.obj;",
      "21:     int argc = Jsi_ValueGetLength(interp, args);",
      "27:     int i;",
      "28:     for (i = 0; i < argc; ++i) {",
      "29:         Jsi_Value *ov = Jsi_ValueArrayIndex(interp, args, i);",
      "",
      "[Removed Lines]",
      "22:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "23:     if (curlen < 0) {",
      "24:         Jsi_ObjSetLength(interp, obj, 0);",
      "25:     }",
      "",
      "[Added Lines]",
      "28:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "31:         Jsi_ValueInsertArray(interp, _this, curlen + i, ov, 0);",
      "32:     }",
      "35:     return JSI_OK;",
      "36: }",
      "",
      "[Removed Lines]",
      "34:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "36:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "45:     Jsi_Value *v;",
      "46:     Jsi_Obj *obj;",
      "47:     obj = _this->d.obj;",
      "50:     if (i < 0) {",
      "51:         Jsi_ValueMakeUndef(interp, ret);",
      "",
      "[Removed Lines]",
      "48:     int i = Jsi_ObjGetLength(interp, obj) - 1;",
      "",
      "[Added Lines]",
      "50:     int i = jsi_SizeOfArray(interp, obj) - 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "78:     int argc, curlen;",
      "79:     Jsi_DString dStr = {};",
      "82:     if (curlen == 0) {",
      "83:         goto bail;",
      "84:     }",
      "",
      "[Removed Lines]",
      "81:     curlen = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "83:     curlen = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "89:             jstr = Jsi_ValueToString(interp, sc, NULL);",
      "90:     }",
      "93:         goto bail;",
      "94:     }",
      "95:     int i;",
      "",
      "[Removed Lines]",
      "92:     if (0 == (argc=Jsi_ObjGetLength(interp, _this->d.obj))) {",
      "",
      "[Added Lines]",
      "94:     if (0 == (argc=jsi_SizeOfArray(interp, _this->d.obj))) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "233:         return;",
      "234:     }",
      "237:     if (len <= 0) return;",
      "239:     Jsi_Value *v0 = Jsi_ValueArrayIndex(interp, v, 0);",
      "",
      "[Removed Lines]",
      "236:     int len = Jsi_ObjGetLength(interp, v->d.obj);",
      "",
      "[Added Lines]",
      "238:     int len = jsi_SizeOfArray(interp, v->d.obj);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "256: static Jsi_RC jsi_ArrayFlatSub(Jsi_Interp *interp, Jsi_Obj* nobj, Jsi_Value *arr, int depth) {",
      "259:     if (len <= 0) return JSI_OK;",
      "260:     Jsi_RC rc = JSI_OK;",
      "262:     for (i = 0; i < len && rc == JSI_OK; i++) {",
      "263:         Jsi_Value *t = Jsi_ValueArrayIndex(interp, arr, i);",
      "264:         if (t && depth>0 && Jsi_ValueIsArray(interp, t))",
      "",
      "[Removed Lines]",
      "258:     int i, n = 0, len = Jsi_ObjGetLength(interp, arr->d.obj);",
      "261:     int clen = Jsi_ObjGetLength(interp, nobj);",
      "",
      "[Added Lines]",
      "260:     int i, n = 0, len = jsi_SizeOfArray(interp, arr->d.obj);",
      "263:     int clen = jsi_SizeOfArray(interp, nobj);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "302:     obj = _this->d.obj;",
      "304:     argc = Jsi_ValueGetLength(interp, args);",
      "309:     Jsi_ObjListifyArray(interp, obj);",
      "311:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "",
      "[Removed Lines]",
      "305:     curlen = Jsi_ObjGetLength(interp, obj);",
      "306:     if (curlen < 0) {",
      "307:         Jsi_ObjSetLength(interp, obj, 0);",
      "308:     }",
      "",
      "[Added Lines]",
      "307:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "377:     if (!sthis)",
      "378:         sthis = nthis = Jsi_ValueNew1(interp);",
      "379:     obj = _this->d.obj;",
      "384:     Jsi_ObjListifyArray(interp, obj);",
      "385:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "386:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "380:     curlen = Jsi_ObjGetLength(interp, obj);",
      "381:     if (curlen < 0) {",
      "382:         Jsi_ObjSetLength(interp, obj, 0);",
      "383:     }",
      "",
      "[Added Lines]",
      "379:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "439:     if (!sthis)",
      "440:         sthis = nthis = Jsi_ValueNew1(interp);",
      "441:     obj = _this->d.obj;",
      "446:     Jsi_ObjListifyArray(interp, obj);",
      "447:     nobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
      "448:     nsiz = obj->arrCnt;",
      "",
      "[Removed Lines]",
      "442:     curlen = Jsi_ObjGetLength(interp, obj);",
      "443:     if (curlen < 0) {",
      "444:         Jsi_ObjSetLength(interp, obj, 0);",
      "445:     }",
      "",
      "[Added Lines]",
      "438:     curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "522:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "523:         return Jsi_LogError(\"expected array object\");",
      "524:     Jsi_Obj *obj;",
      "526:     uint i;",
      "527:     Jsi_Value *func, *vpargs;",
      "",
      "[Removed Lines]",
      "525:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "535:         sthis = nthis = Jsi_ValueNew1(interp);",
      "537:     obj = _this->d.obj;",
      "542:     Jsi_ObjListifyArray(interp, obj);",
      "543:     Jsi_RC rc = JSI_OK;",
      "",
      "[Removed Lines]",
      "538:     curlen = Jsi_ObjGetLength(interp, obj);",
      "539:     if (curlen < 0) {",
      "540:         Jsi_ObjSetLength(interp, obj, 0);",
      "541:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "566:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "567:         return Jsi_LogError(\"expected array\");",
      "568:     Jsi_Obj *obj;",
      "570:     uint i;",
      "571:     Jsi_RC rc = JSI_OK;",
      "572:     Jsi_Value *func, *vpargs, *sthis = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "569:     int curlen;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "579:         sthis = nthis = Jsi_ValueNew1(interp);",
      "581:     obj = _this->d.obj;",
      "586:     Jsi_ObjListifyArray(interp, obj);",
      "587:     int fval = 0;",
      "588:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "",
      "[Removed Lines]",
      "582:     curlen = Jsi_ObjGetLength(interp, obj);",
      "583:     if (curlen < 0) {",
      "584:         Jsi_ObjSetLength(interp, obj, 0);",
      "585:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "628:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "629:         return Jsi_LogError(\"expected array\");",
      "630:     Jsi_RC rc = JSI_OK;",
      "632:     Jsi_Obj *obj;",
      "633:     Jsi_Value *func, *vpargs, *ini = Jsi_ValueArrayIndex(interp, args, 1);",
      "",
      "[Removed Lines]",
      "631:     int curlen, i;",
      "",
      "[Added Lines]",
      "614:     int i;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "639:     Jsi_Value *nrPtr = Jsi_ValueNew1(interp);",
      "640:     obj = _this->d.obj;",
      "644:     Jsi_ObjListifyArray(interp, obj);",
      "645:     Jsi_Value *vobjs[4];",
      "646:     int n, rev = (op==2);",
      "",
      "[Removed Lines]",
      "641:     curlen = Jsi_ObjGetLength(interp, obj);",
      "642:     if (curlen < 0)",
      "643:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "717:         goto bail;",
      "718:     }",
      "721:     if (n == 0) {",
      "722:         goto bail;",
      "723:     }",
      "",
      "[Removed Lines]",
      "720:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "700:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "769: static Jsi_RC jsi_ArraySizeOfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,Jsi_Value **ret, Jsi_Func *funcPtr) {",
      "770:     if (_this->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, _this->d.obj))",
      "771:         return Jsi_LogError(\"expected array object\");",
      "773:     Jsi_ValueMakeNumber(interp, ret, i);",
      "774:     return JSI_OK;",
      "775: }",
      "",
      "[Removed Lines]",
      "772:     int i = Jsi_ObjGetLength(interp, _this->d.obj);",
      "",
      "[Added Lines]",
      "752:     int i = jsi_SizeOfArray(interp, _this->d.obj);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "780:     Jsi_Value *v;",
      "781:     Jsi_Obj *obj = _this->d.obj;",
      "782:     Jsi_ObjListifyArray(interp, obj);",
      "785:     if (n<=0) {",
      "786:         Jsi_ValueMakeUndef(interp, ret);",
      "787:     } else {",
      "",
      "[Removed Lines]",
      "783:     uint n = Jsi_ObjGetLength(interp, obj);",
      "784:     assert(n <= obj->arrCnt);",
      "",
      "[Added Lines]",
      "763:     uint n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "803:     Jsi_Obj *obj = _this->d.obj;",
      "804:     int argc = Jsi_ValueGetLength(interp, args);",
      "809:     if (argc <= 0) {",
      "810:         Jsi_ValueMakeNumber(interp, ret, 0);",
      "811:         return JSI_OK;",
      "",
      "[Removed Lines]",
      "805:     int curlen = Jsi_ObjGetLength(interp, obj);",
      "806:     if (curlen < 0) {",
      "807:         Jsi_ObjSetLength(interp, obj, 0);",
      "808:     }",
      "",
      "[Added Lines]",
      "784:     int curlen = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "825:     }",
      "826:     Jsi_ObjSetLength(interp, obj, curlen+argc);",
      "829:     return JSI_OK;",
      "830: }",
      "",
      "[Removed Lines]",
      "828:     Jsi_ValueMakeNumber(interp, ret, Jsi_ObjGetLength(interp, obj));",
      "",
      "[Added Lines]",
      "804:     Jsi_ValueMakeNumber(interp, ret, jsi_SizeOfArray(interp, obj));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "841:     Jsi_Obj *obj = _this->d.obj;",
      "844:     if (start && Jsi_GetNumberFromValue(interp, start, &nstart) == JSI_OK) {",
      "845:         istart = (int)nstart;",
      "",
      "[Removed Lines]",
      "842:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "818:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "902:         goto bail;",
      "903:     }",
      "904:     obj = _this->d.obj;",
      "906:     if (Jsi_GetNumberFromValue(interp,start, &nstart) == JSI_OK) {",
      "907:         istart = (int)nstart;",
      "908:         if (istart > n)",
      "",
      "[Removed Lines]",
      "905:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "881:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1166:     argc = Jsi_ValueGetLength(interp, args);",
      "1167:     istart = 0;",
      "1168:     ilen = (argc>=2 ? argc - 2 : 0);",
      "1170:     curlen = n;",
      "1172:     if (!start) {",
      "",
      "[Removed Lines]",
      "1169:     n = Jsi_ObjGetLength(interp, obj);",
      "",
      "[Added Lines]",
      "1145:     n = jsi_SizeOfArray(interp, obj);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1202:     }",
      "1204:     if (curlen < 0) {",
      "1206:     }",
      "1207:     Jsi_ObjListifyArray(interp, obj);",
      "",
      "[Removed Lines]",
      "1205:         Jsi_ObjSetLength(interp, obj, 0);",
      "",
      "[Added Lines]",
      "1181:         Jsi_ObjSetLength(interp, obj, curlen=0);",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4509:     return rc;",
      "4510: }",
      "4512: static const char *jsi_FindHelpStr(const char *fstr, const char *key, Jsi_DString *dPtr) {",
      "4513:     if (!fstr) return \"\";",
      "4514:     Jsi_DSSetLength(dPtr, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4512: static Jsi_RC SysRunMainCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "4513:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "4514: {",
      "4515:     if (jsi_isMain(interp))",
      "4516:         return SysRunModuleCmd(interp, args, _this, ret, funcPtr);",
      "4517:     return JSI_OK;",
      "4518: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4762:     { \"execZip\",    InfoExecZipCmd,     0,  0, \"\", .help=\"If executing a .zip file, return file name\", .retType=(uint)JSI_TT_STRING|JSI_TT_VOID },",
      "4763:     { \"files\",      InfoFilesCmd,       0,  0, \"\", .help=\"Return list of all sourced files\", .retType=(uint)JSI_TT_ARRAY },",
      "4764:     { \"funcs\",      InfoFuncsCmd,       0,  1, \"string|regexp|object=void\", .help=\"Return details or list of matching functions\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_OBJECT },",
      "4766:     { \"interp\",     jsi_InterpInfo,     0,  1, \"interp:userobj=void\", .help=\"Return info on given or current interp\", .retType=(uint)JSI_TT_OBJECT },",
      "4767:     { \"isMain\",     InfoIsMainCmd,      0,  0, \"\", .help=\"Return true if current script was the main script invoked from command-line\", .retType=(uint)JSI_TT_BOOLEAN },",
      "4768:     { \"keywords\",   InfoKeywordsCmd,    0,  2, \"isSql=false, name:string=void\", .help=\"Return/lookup reserved keyword\", .retType=(uint)JSI_TT_ARRAY|JSI_TT_BOOLEAN },",
      "",
      "[Removed Lines]",
      "4765:     { \"locals\",     InfoLocalsCmd,      0,  1, \"varsOnly:boolean=void\", .help=\"Return functions/vars inside local function\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "[Added Lines]",
      "4773:     { \"locals\",     InfoLocalsCmd,      0,  1, \"filter:boolean=void\", .help=\"Return locals; use filter=true/false just vars/functions\", .retType=(uint)JSI_TT_OBJECT },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4863:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
      "4864:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
      "4865:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
      "4866:     { \"runModule\",  SysRunModuleCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "4867:     { \"sleep\",      SysSleepCmd,     0,  1, \"secs:number=1.0\",  .help=\"sleep for N milliseconds, minimum .001\", .retType=(uint)JSI_TT_VOID },",
      "4868: #ifndef JSI_OMIT_EVENT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4874:     { \"runMain\",    SysRunMainCmd,   0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"If isMain invokes runModule\", .retType=(uint)JSI_TT_ANY, .flags=0},",
      "",
      "---------------"
    ],
    "tests/locals.jsi||tests/locals.jsi": [
      "File: tests/locals.jsi -> tests/locals.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: function foo() {",
      "4:   function bar() { }",
      "5:   var x = 1;",
      "6: ;  Info.locals();",
      "7: ;  Info.locals(false);",
      "8: ;  Info.locals(true);",
      "9: }",
      "11: foo();",
      "14: =!EXPECTSTART!=",
      "15: Info.locals() ==> { bar:\"function bar() {...}\", x:1 }",
      "16: Info.locals(false) ==> { bar:\"function bar() {...}\" }",
      "17: Info.locals(true) ==> { x:1 }",
      "18: =!EXPECTEND!=",
      "",
      "---------------"
    ],
    "tools/protos.jsi||tools/protos.jsi": [
      "File: tools/protos.jsi -> tools/protos.jsi",
      "--- Hunk 1 ---",
      "[Context before]",
      "140: Info.prototype.isMain = function():boolean {};",
      "141: Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};",
      "142: Info.prototype.level = function(level:number=void):number|array|object {};",
      "144: Info.prototype.lookup = function(name:string):any {};",
      "145: Info.prototype.methods = function(val:string|regexp):array|object {};",
      "146: Info.prototype.named = function(name:string=void):array|userobj {};",
      "",
      "[Removed Lines]",
      "143: Info.prototype.locals = function(varsOnly:boolean=void):object {};",
      "",
      "[Added Lines]",
      "143: Info.prototype.locals = function(filter:boolean=void):object {};",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "303: System.prototype.puts = function(val, ...):void {};",
      "304: System.prototype.quote = function(val:string):string {};",
      "305: System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "306: System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "307: System.prototype.setInterval = function(callback:function, ms:number):number {};",
      "308: System.prototype.setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "306: System.prototype.runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "394: var puts = function(val, ...):void {};",
      "395: var quote = function(val:string):string {};",
      "396: var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};",
      "397: var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "398: var setInterval = function(callback:function, ms:number):number {};",
      "399: var setTimeout = function(callback:function, ms:number):number {};",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398: var runMain = function(cmd:string|null|function=void, conf:array=undefined):any {};",
      "",
      "---------------"
    ],
    "www/reference.wiki||www/reference.wiki": [
      "File: www/reference.wiki -> www/reference.wiki",
      "--- Hunk 1 ---",
      "[Context before]",
      "552: <tr><td>level</td><td>level(level:number=void):number|array|object </td><td>Return current level or details of a call-stack frame. With no arg, returns the number of the current stack frame level.",
      "553: Otherwise returns details on the specified level.",
      "554: The topmost level is 1, and 0 is the current level, and a negative level translates as relative to the current level.</td></tr>",
      "556: <tr><td>lookup</td><td>lookup(name:string) </td><td>Given string name, lookup and return value, eg: function.</td></tr>",
      "557: <tr><td>methods</td><td>methods(val:string|regexp):array|object </td><td>Return functions and commands.</td></tr>",
      "558: <tr><td>named</td><td>named(name:string=void):array|userobj </td><td>Returns command names for builtin Objects, eg: 'File', 'Interp', sub-Object names, or the named object.</td></tr>",
      "",
      "[Removed Lines]",
      "555: <tr><td>locals</td><td>locals(varsOnly:boolean=void):object </td><td>Return functions/vars inside local function.</td></tr>",
      "",
      "[Added Lines]",
      "555: <tr><td>locals</td><td>locals(filter:boolean=void):object </td><td>Return locals; use filter=true/false just vars/functions.</td></tr>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1361: With two arguments, returns object containing: version, loadFile, func.",
      "1362: A third argument sets options for package or module.",
      "1363: Note an error is thrown if requested version is greater than actual version.</td></tr>",
      "1364: <tr><td>runModule</td><td>runModule(cmd:string|null|function=void, conf:array=undefined) </td><td>Invoke named module. If name is empty, uses file basename. If isMain and no args givine parses console.args.</td></tr>",
      "1365: <tr><td>setInterval</td><td>setInterval(callback:function, ms:number):number </td><td>Setup recurring function to run every given millisecs.</td></tr>",
      "1366: <tr><td>setTimeout</td><td>setTimeout(callback:function, ms:number):number </td><td>Setup function to run after given millisecs.</td></tr>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1364: <tr><td>runMain</td><td>runMain(cmd:string|null|function=void, conf:array=undefined) </td><td>If isMain invokes runModule.</td></tr>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "95b734ff7d172ad5645ca9e7a4af06eb4875f731",
      "candidate_info": {
        "commit_hash": "95b734ff7d172ad5645ca9e7a4af06eb4875f731",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/95b734ff7d172ad5645ca9e7a4af06eb4875f731",
        "files": [
          "lib/Module.jsi",
          "lib/Websrv.jsi",
          "lib/www/js/httpVueLoader.js",
          "lib/www/md/Misc.md",
          "lib/www/md/Reference.md",
          "lib/www/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiZvfs.c",
          "tests/json2.jsi",
          "tests/utf.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.7\": fix unzip hang, add jsonify/es5lint\n\nFossilOrigin-Name: af3732676198b6641b7fb06b41dfa73d922e1ab67db4a3a31232892554c4cbc2",
        "before_after_code_files": [
          "lib/Module.jsi||lib/Module.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/www/js/httpVueLoader.js||lib/www/js/httpVueLoader.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tests/json2.jsi||tests/json2.jsi",
          "tests/utf.jsi||tests/utf.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Module.jsi||lib/Module.jsi": [
          "File: lib/Module.jsi -> lib/Module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     const options = { // Run or create a Jsi module.",
          "8:         create  :'',        // Create a Jsi module template with this name.",
          "9:         force   :false,     // Remove output if exists.",
          "10:         output  :'',        // Override the output filename default of create + .jsi.",
          "11:         quiet   :false,     // No messages.",
          "12:         setup   :'',        // Download and setup fossil repos from jsish.org.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:         es5lint :'',        // For a .js file or dir of files recursively do parse-only with es6 features disabled.",
          "11:         json    :'',        // Json file to normalize",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         File.write('run_'+app+'.sh', \"#!\\njsish -a -update true \"+app+'.fossil $*\\n');",
          "28:     }",
          "30:     function main() {",
          "31:         LogTrace('Starting');",
          "32:         if (self.rootdir === '')",
          "33:             self.rootdir=Info.scriptDir();",
          "34:         debugger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     function jsonify(name) {",
          "33:         var d = File.read(name);",
          "34:         d = JSON.parse(d, false);",
          "35:         d = JSON.stringify(d, null, 4);",
          "36:         if (self.output == '-')",
          "37:             puts(d);",
          "38:         else if (self.output == '.')",
          "39:             File.write(name, d);",
          "40:         else if (self.output)",
          "41:             File.write(self.output, d);",
          "42:         else",
          "43:             return d;",
          "44:     }",
          "46:     function es5lint(d) {",
          "47:         var i, lst;",
          "48:         if (File.isdir(d))",
          "49:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "50:         else",
          "51:             lst = [d];",
          "52:         for (i of lst) {",
          "53:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "54:             delete int;",
          "55:         }",
          "56:     }",
          "60:         if (self.json)",
          "61:             return jsonify(self.json);",
          "62:         if (self.es5lint)",
          "63:             return es5lint(self.es5lint);",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5lint     :'',        // Parse-only a .js file or dir of files recursively disabling es6 features.",
          "",
          "[Added Lines]",
          "30:         es5lint     :'',        // For a .js file or dir of files recursively do parse-only with es6 features disabled.",
          "",
          "---------------"
        ],
        "lib/www/js/httpVueLoader.js||lib/www/js/httpVueLoader.js": [
          "File: lib/www/js/httpVueLoader.js -> lib/www/js/httpVueLoader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 6",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1172:   char *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) * 3 + 1), *pbuf = buf;",
          "1173:   while (*pstr) {",
          "1176:     else if (*pstr == ' ')",
          "",
          "[Removed Lines]",
          "1171: static char *url_encode(char *str) {",
          "1174:     if (isalnum(*pstr) || *pstr == '-' || *pstr == '_' || *pstr == '.' || *pstr == '~')",
          "",
          "[Added Lines]",
          "1171: static char *url_encode(char *str, bool comp) {",
          "1172:   const char *ncomps = \"-_.!~*'()\", *comps = \";,/?:@&=+$#\";",
          "1176:     if (isalnum(*pstr) || (!Jsi_Strchr(ncomps, *pstr) && (!comp || !Jsi_Strchr(comps, *pstr))))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1183:   return buf;",
          "1184: }",
          "1189:   char *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) + 1), *pbuf = buf;",
          "1190:   while (*pstr) {",
          "1191:     if (*pstr == '%') {",
          "1192:       if (pstr[1] && pstr[2]) {",
          "1195:       }",
          "1196:     } else if (*pstr == '+') {",
          "",
          "[Removed Lines]",
          "1188: static char *url_decode(char *str, int *len) {",
          "1194:         pstr += 2;",
          "",
          "[Added Lines]",
          "1190: static char *url_decode(char *str, int *len, bool comp) {",
          "1191:   char *comps = \";,/?:@&=+$#\", cc;",
          "1196:         cc = jsi_fromHexChar(pstr[1]) << 4 | jsi_fromHexChar(pstr[2]);",
          "1197:         if (!comp && Jsi_Strchr(comps, cc))",
          "1199:         else {",
          "1200:             pstr += 2;",
          "1202:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1209:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1210: {",
          "1211:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1213:     Jsi_ValueMakeString(interp, ret, cp);",
          "1214:     return JSI_OK;",
          "1215: }",
          "",
          "[Removed Lines]",
          "1212:     cp = url_encode(str);",
          "",
          "[Added Lines]",
          "1220:     cp = url_encode(str,0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1219: {",
          "1220:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1221:     int len;",
          "1223:     Jsi_ValueMakeBlob(interp, ret, (uchar*)cp, len);",
          "1224:     return JSI_OK;",
          "1225: }",
          "",
          "[Removed Lines]",
          "1222:     cp = url_decode(str, &len);",
          "",
          "[Added Lines]",
          "1230:     cp = url_decode(str, &len,0);",
          "1231:     Jsi_ValueMakeBlob(interp, ret, (uchar*)cp, len);",
          "1232:     return JSI_OK;",
          "1233: }",
          "1235: static Jsi_RC EncodeURIComponentCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1236:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1237: {",
          "1238:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1239:     cp = url_encode(str,1);",
          "1240:     Jsi_ValueMakeString(interp, ret, cp);",
          "1241:     return JSI_OK;",
          "1242: }",
          "1244: static Jsi_RC DecodeURIComponentCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1245:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1246: {",
          "1247:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1248:     int len;",
          "1249:     cp = url_decode(str, &len,1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5083:     { \"clearInterval\",clearIntervalCmd,1,1, \"id:number\", .help=\"Delete event id returned from setInterval/setTimeout/info.events()\", .retType=(uint)JSI_TT_VOID },",
          "5084: #endif",
          "5085:     { \"decodeURI\",  DecodeURICmd,    1,  1, \"val:string\", .help=\"Decode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5086:     { \"encodeURI\",  EncodeURICmd,    1,  1, \"val:string\", .help=\"Encode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5087:     { \"exec\",       SysExecCmd,      1,  2, \"val:string, options:string|object=void\", .help=\"Execute an OS command\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_exec, .opts=ExecOptions},",
          "5088:     { \"exit\",       SysExitCmd,      0,  1, \"code:number=0\", .help=\"Exit the current interpreter\", .retType=(uint)JSI_TT_VOID },",
          "5089:     { \"format\",     SysFormatCmd,    1, -1, \"format:string, ...\", .help=\"Printf style formatting: adds %q and %S\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5113:     { \"decodeURIComponent\",  DecodeURIComponentCmd,    1,  1, \"val:string\", .help=\"Decode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5115:     { \"encodeURIComponent\",  EncodeURIComponentCmd,    1,  1, \"val:string\", .help=\"Encode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:         pZvfs->hPtr = pEntry;",
          "624:         Jsi_HashValueSet(pEntry, (void*) pZvfs);",
          "626:         if (nFile < 0)",
          "627:             break;",
          "633:         Jsi_Seek(interp, chan, lenExtra, SEEK_CUR);",
          "634:     }",
          "635:     pArchive->chan = chan;",
          "",
          "[Removed Lines]",
          "632: skip:",
          "",
          "[Added Lines]",
          "626: skip:",
          "",
          "---------------"
        ],
        "tests/json2.jsi||tests/json2.jsi": [
          "File: tests/json2.jsi -> tests/json2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "5: ;JSON.check(x,false);",
          "6: ;JSON.check(x);",
          "7: ;JSON.check(x2,false);",
          "",
          "[Removed Lines]",
          "3: var x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}';",
          "4: var x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}';",
          "",
          "[Added Lines]",
          "3: var x, x2, o;",
          "4: ;x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}';",
          "5: ;x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: x = JSON.parse('{ \"Columns\": [ 1, 2, {\"ABC\":1, \"B\":[2,3]}, 2], \"A\" : 1 }');",
          "26: ;x.toString();",
          "29: =!EXPECTSTART!=",
          "30: JSON.check(x,false) ==> true",
          "31: JSON.check(x) ==> true",
          "32: JSON.check(x2,false) ==> true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: ;o = {a:1,b:2,c:{d:1,e:{a:1},g:[1,2]},d:9};",
          "30: ;JSON.stringify(o);",
          "31: ;JSON.stringify(o, null);",
          "32: ;JSON.stringify(o, false, 4);",
          "36: x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}' ==> {\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}",
          "37: x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}' ==> {\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: JSON.stringify(dat) ==> { \"able\":1 }",
          "39: x.toString() ==> [ \"ABC\", 1 ]",
          "40: x.toString() ==> { A:1, Columns:[ 1, 2, { ABC:1, B:[ 2, 3 ] }, 2 ] }",
          "41: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: o = {a:1,b:2,c:{d:1,e:{a:1},g:[1,2]},d:9} ==> { a:1, b:2, c:{ d:1, e:{ a:1 }, g:[ 1, 2 ] }, d:9 }",
          "50: JSON.stringify(o) ==> { \"a\":1, \"b\":2, \"c\":{ \"d\":1, \"e\":{ \"a\":1 }, \"g\":[ 1, 2 ] }, \"d\":9 }",
          "51: JSON.stringify(o, null) ==> {",
          "52:   \"a\":1,",
          "53:   \"b\":2,",
          "54:   \"c\":{",
          "55:     \"d\":1,",
          "56:     \"e\":{",
          "57:       \"a\":1",
          "58:     },",
          "59:     \"g\":[ 1, 2 ]",
          "60:   },",
          "61:   \"d\":9",
          "62: }",
          "63: JSON.stringify(o, false, 4) ==> {",
          "64:     a:1,",
          "65:     b:2,",
          "66:     c:{",
          "67:         d:1,",
          "68:         e:{",
          "69:             a:1",
          "70:         },",
          "71:         g:[ 1, 2 ]",
          "72:     },",
          "73:     d:9",
          "74: }",
          "",
          "---------------"
        ],
        "tests/utf.jsi||tests/utf.jsi": [
          "File: tests/utf.jsi -> tests/utf.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: ;d[9];",
          "31: b = '\u2665' ==> \u2665",
          "32: b.length ==> 1",
          "33: b+'a' ==> \u2665a",
          "35: c = '\u2764' ==> \u2764",
          "36: c.length ==> 1",
          "37: c+'a' ==> \u2764a",
          "",
          "[Removed Lines]",
          "30: =!EXPECTSTART!=",
          "34: encodeURI(b) ==> %e2%99%a5",
          "",
          "[Added Lines]",
          "30: =!EX=!EXPECTSTART!=",
          "34: encodeURI(b) ==> \u2665",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: d[2] ==> c",
          "49: d[3] ==> undefined",
          "50: d[9] ==> undefined",
          "",
          "[Removed Lines]",
          "51: =!EXPECTEND!=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: System.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};",
          "268: System.prototype.clearInterval = function(id:number):void {};",
          "269: System.prototype.decodeURI = function(val:string):string {};",
          "270: System.prototype.encodeURI = function(val:string):string {};",
          "271: System.prototype.exec = function(val:string, options:string|object=void):any {};",
          "272: System.prototype.exit = function(code:number=0):void {};",
          "273: System.prototype.format = function(format:string, ...):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: System.prototype.decodeURIComponent = function(val:string):string {};",
          "272: System.prototype.encodeURIComponent = function(val:string):string {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367: console.prototype.puts = function(val:any, ...):void {};",
          "368: console.prototype.warn = function(val, ...):void {};",
          "369: var decodeURI = function(val:string):string {};",
          "370: var encodeURI = function(val:string):string {};",
          "371: var exec = function(val:string, options:string|object=void):any {};",
          "372: var exit = function(code:number=0):void {};",
          "373: var format = function(format:string, ...):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: var decodeURIComponent = function(val:string):string {};",
          "374: var encodeURIComponent = function(val:string):string {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d93039cb3e592ddf8c49fa8279ae8a23da64743",
      "candidate_info": {
        "commit_hash": "4d93039cb3e592ddf8c49fa8279ae8a23da64743",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/4d93039cb3e592ddf8c49fa8279ae8a23da64743",
        "files": [
          "c-demos/cdata/Makefile",
          "c-demos/cdata/VarTest.jsc",
          "c-demos/cdata/Vimy.jsc",
          "c-demos/cdata/cdatatest.jsi",
          "c-demos/cdata/ext_test.jsi",
          "c-demos/cdata/new/Bee.jsi",
          "c-demos/cdata/vimytest.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCData.c",
          "src/jsiObj.c",
          "src/jsiProto.c",
          "src/jsiStubs.h",
          "src/jsiValue.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.1.3\": remove CData JS interface in favour of setters/getters\n\nFossilOrigin-Name: f7ae66de7197cd73af2b0336d96a83ee9bf84bbdc4b5244af2c68f2d8700fe7e",
        "before_after_code_files": [
          "c-demos/cdata/VarTest.jsc||c-demos/cdata/VarTest.jsc",
          "c-demos/cdata/Vimy.jsc||c-demos/cdata/Vimy.jsc",
          "c-demos/cdata/cdatatest.jsi||c-demos/cdata/cdatatest.jsi",
          "c-demos/cdata/ext_test.jsi||c-demos/cdata/ext_test.jsi",
          "c-demos/cdata/new/Bee.jsi||c-demos/cdata/new/Bee.jsi",
          "c-demos/cdata/vimytest.jsi||c-demos/cdata/vimytest.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCData.c||src/jsiCData.c",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiValue.c||src/jsiValue.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "c-demos/cdata/VarTest.jsc||c-demos/cdata/VarTest.jsc": [
          "File: c-demos/cdata/VarTest.jsc -> c-demos/cdata/VarTest.jsc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c-demos/cdata/Vimy.jsc||c-demos/cdata/Vimy.jsc": [
          "File: c-demos/cdata/Vimy.jsc -> c-demos/cdata/Vimy.jsc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c-demos/cdata/cdatatest.jsi||c-demos/cdata/cdatatest.jsi": [
          "File: c-demos/cdata/cdatatest.jsi -> c-demos/cdata/cdatatest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c-demos/cdata/ext_test.jsi||c-demos/cdata/ext_test.jsi": [
          "File: c-demos/cdata/ext_test.jsi -> c-demos/cdata/ext_test.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: c.setSpeed('max', 3) ==> accel max 3 times",
          "112: c.fix('brakes', {Max:1, Cnt:2}) ==> undefined",
          "113: c.conf() ==> { callback:null, gear:3, maxSpeed:120, shiftCnt:2 }",
          "123: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "114: Car_fix_Data.conf() ==> { arrSize:0, flags:0, help:\"\", keyName:null, keyType:\"number\", mapType:\"none\", maxSize:0, name:\"Car_fix_Data\", noAuto:false, structName:\"Car_fix\", user:0, varParam:\"\" }",
          "115: Car_fix_Data.info() ==> { label:\"\", spec:[ { cName:\"double\", help:\"\", initOnly:false, name:\"Max\", noCase:false, readOnly:false, required:false, size:8, type:\"DOUBLE\" }, { cName:\"int\", help:\"\", initOnly:false, name:\"Cnt\", noCase:false, readOnly:false, required:false, size:4, type:\"INT\" } ], struct:\"Car_fix\" }",
          "116: Car_fix_Data.get() ==> { Cnt:0, Max:0 }",
          "117: Car_fix_Data.get(null) ==> { Cnt:0, Max:0 }",
          "118: Car_fix_Data.set(null,{Cnt:3}) ==> undefined",
          "119: Car_fix_Data.incr(null,'Cnt') ==> 4",
          "120: Car_fix_Data.incr(null,'Max') ==> 1",
          "121: Car_fix_Data.incr(null,'Max', 3.3) ==> 4.3",
          "122: Car_Data.get() ==> { activeCnt:0, loaded:true, newCnt:1 }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "c-demos/cdata/new/Bee.jsi||c-demos/cdata/new/Bee.jsi": [
          "File: c-demos/cdata/new/Bee.jsi -> c-demos/cdata/new/Bee.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:     return load('Bee.so');",
          "6: CEnum('BeeType', 'Drone, Worker, Queen');",
          "7: CStruct('Bee', ` int max; int buzzCnt; int stingCnt; int pollinateCnt; BeeType type; STRING flower; `);",
          "10: let Bee = { // Extension to create Bee commands.",
          "",
          "[Removed Lines]",
          "8: var Bee_Data = new CData('Bee');",
          "",
          "[Added Lines]",
          "10: var b = new CData('Bee'), Bee_Data = b;",
          "12: b.buzzCnt += b.stingCnt*2;",
          "",
          "---------------"
        ],
        "c-demos/cdata/vimytest.jsi||c-demos/cdata/vimytest.jsi": [
          "File: c-demos/cdata/vimytest.jsi -> c-demos/cdata/vimytest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCData.c||src/jsiCData.c": [
          "File: src/jsiCData.c -> src/jsiCData.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: } CDataObj;",
          "42: static Jsi_StructSpec*  jsi_csStructGet(Jsi_Interp *interp, const char *name);",
          "47: static Jsi_RC     jsi_csStructInit(Jsi_StructSpec* s, uchar* data);",
          "50: static Jsi_RC jsi_csBitGetSet(Jsi_Interp *interp, void *vrec, Jsi_Wide* valPtr, Jsi_OptionSpec *spec, int idx, bool isSet);",
          "56: static Jsi_OptionTypedef *jsi_csGetTypeSpec(void* p) { Jsi_OptionTypedef *s = (typeof(s))p; SIGASSERT(s, TYPEDEF); return s; }",
          "66: Jsi_HashEntry *jsi_csfindInHash(Jsi_Interp *interp, Jsi_Hash * tbl, const char *name)",
          "",
          "[Removed Lines]",
          "43: static Jsi_StructSpec*   jsi_csFieldGet(Jsi_Interp *interp, const char *name, Jsi_StructSpec* sl);",
          "45: static Jsi_EnumSpec*    jsi_csEnumGet(Jsi_Interp *interp, const char *name);",
          "46: static Jsi_EnumSpec*    jsi_csEnumGetItem(Jsi_Interp *interp, const char *name, Jsi_EnumSpec* sf);",
          "48: static Jsi_RC CDataOptionsConf(Jsi_Interp *interp, Jsi_OptionSpec *specs,  Jsi_Value *args,",
          "49:     void *rec, Jsi_Value **ret, int flags, int skipArgs);",
          "53: static Jsi_StructSpec *jsi_csGetStructSpec(void* p) { Jsi_StructSpec *s = (typeof(s))p; SIGASSERT(s, OPTS_STRUCT); return s; }",
          "54: static Jsi_FieldSpec *jsi_csGetFieldSpec(void* p) { Jsi_FieldSpec *s = (typeof(s))p; SIGASSERT(s, OPTS_FIELD); return s; }",
          "58: static Jsi_FieldSpec*  jsi_csStructFields(Jsi_Interp *interp, const char *name) {",
          "59:     Jsi_StructSpec* sp = jsi_csStructGet(interp, name);",
          "60:     if (!sp)",
          "61:         return NULL;",
          "62:     return jsi_csGetFieldSpec(sp->extData);",
          "63: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:     }",
          "245: }",
          "293: void jsi_csInitEnum(Jsi_Interp *interp)",
          "",
          "[Removed Lines]",
          "247: static int jsi_NumWideBytes(Jsi_Wide val) {",
          "248:     if (val < 0x10000)",
          "249:         return (val < 0x100 ? 1 : 2);",
          "250:     return(val < 0x100000000L ? 4 : 8);",
          "251: }",
          "253: static Jsi_RC jsi_csSetupEnum(Jsi_Interp *interp, Jsi_EnumSpec *sl, Jsi_FieldSpec *sf, Jsi_OptionTypedef* st) {",
          "254:     bool isNew;",
          "255:     int cnt = 0;",
          "256:     if (Jsi_HashEntryFind(interp->CTypeHash, sl->name))",
          "257:         return Jsi_LogError(\"enum is c-type: %s\", sl->name);",
          "258:     Jsi_HashEntry *entry = Jsi_HashEntryNew(interp->EnumHash, sl->name, &isNew);",
          "259:     if (!isNew)",
          "260:         return Jsi_LogError(\"duplicate enum: %s\", sl->name);",
          "261:     Jsi_HashValueSet(entry, sl);",
          "263:     sl->extData = (uchar*)sf;",
          "264:     Jsi_Wide maxVal = 0, aval;",
          "265:     while (sf && sf->id != JSI_OPTION_END) {",
          "266:         sf->idx = cnt;",
          "267:         Jsi_HashSet(interp->EnumItemHash, sf->name, sf);",
          "268:         sf->extData = (uchar*)sl;",
          "269:         aval =  sf->value;",
          "270:         if (aval<0) aval = -aval;",
          "271:         if (aval>maxVal) maxVal = aval;",
          "272:         sf++, cnt++;",
          "273:     }",
          "274:     Jsi_HashSet(interp->EnumHash, sl->name, sl);",
          "275:     sl->idx = cnt;",
          "276:     if (!sl->size)",
          "277:         sl->size = cnt;",
          "278:     if (!st) {",
          "279:         st = (typeof(st))Jsi_Calloc(1, sizeof(*st));",
          "280:         SIGINIT(st, TYPEDEF);",
          "281:     }",
          "282:     st->cName = sl->name;",
          "283:     st->idName = \"CUSTOM\";",
          "284:     st->id = JSI_OPTION_CUSTOM;",
          "285:     st->size = jsi_NumWideBytes(aval);",
          "286:     st->flags = jsi_CTYP_DYN_MEMORY|jsi_CTYP_ENUM;",
          "287:     st->extData = (uchar*)sl;",
          "288:     Jsi_HashSet(interp->CTypeHash, st->cName, st);",
          "289:     return JSI_OK;",
          "290: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328:     return (Jsi_StructSpec *)Jsi_HashGet(interp->StructHash, name, 0);",
          "329: }",
          "382: Jsi_StructSpec *jsi_csStructGet(Jsi_Interp *interp, const char *name)",
          "383: {",
          "384:     if (!name) return NULL;",
          "",
          "[Removed Lines]",
          "332: static Jsi_Value *jsi_csFmtKeyCmd(Jsi_MapEntry* hPtr, Jsi_MapOpts *opts, int flags)",
          "333: {",
          "334:     void *rec = (opts->mapType==JSI_MAP_HASH ? Jsi_HashKeyGet((Jsi_HashEntry*)hPtr): Jsi_TreeKeyGet((Jsi_TreeEntry*)hPtr));",
          "335:     if (!rec) return NULL;",
          "336:     CDataObj *cd = (typeof(cd))opts->user;",
          "337:     assert(cd);",
          "338:     Jsi_Interp *interp = cd->interp;",
          "339:     if (!cd->slKey || !cd->slKey)",
          "340:         return NULL;",
          "341:     Jsi_Value *v = Jsi_ValueNew1(interp);",
          "342:     if (Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->keysf, rec, NULL, &v, flags) == JSI_OK)",
          "343:         return v;",
          "344:     Jsi_DecrRefCount(interp, v);",
          "345:     return NULL;",
          "346: }",
          "348: static Jsi_RC jsi_csCDataNew(Jsi_Interp *interp, const char *name, const char *structName,",
          "349:     const char *help, const char *varParm, Jsi_VarSpec *data) {",
          "350:     Jsi_DString dStr;",
          "351:     Jsi_DSInit(&dStr);",
          "352:     Jsi_DSPrintf(&dStr, \"var %s = new CData({name:\\\"%s\\\", structName:\\\"%s\\\"\", name, name, structName);",
          "353:     if (help)",
          "354:         Jsi_DSPrintf(&dStr, \", help:\\\"%s\\\"\", help);",
          "355:     if (varParm)",
          "356:         Jsi_DSPrintf(&dStr, \", varParam:\\\"%s\\\"\", varParm);",
          "357:     Jsi_DSPrintf(&dStr, \"});\");",
          "358:     interp->cdataNewVal = data;",
          "359:     Jsi_RC rc = Jsi_EvalString(interp, Jsi_DSValue(&dStr), 0);",
          "360:     interp->cdataNewVal = NULL;",
          "361:     Jsi_DSFree(&dStr);",
          "362:     return rc;",
          "363: }",
          "365: Jsi_RC jsi_csInitVarDefs(Jsi_Interp *interp)",
          "366: {",
          "367:     Jsi_VarSpec *vd = interp->statics->vars;",
          "368:     int i;",
          "369:     for (i=0; vd[i].name; i++) {",
          "370:         SIGASSERT(vd+i, OPTS_VARDEF);",
          "371:         const char *name = vd[i].name;",
          "372:         const char *structName = vd[i].info;",
          "373:         const char *help = vd[i].help;",
          "374:         const char *varParm = (const char*)vd[i].userData;",
          "376:         if (JSI_OK != jsi_csCDataNew(interp, name, structName, help, varParm, vd+i))",
          "377:             return JSI_ERROR;",
          "378:     }",
          "379:     return JSI_OK;",
          "380: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "402: Jsi_EnumSpec *jsi_csGetEnum(Jsi_Interp *interp, const char *name) {",
          "403:     return (Jsi_EnumSpec *)Jsi_HashGet(interp->EnumHash, name, 0);",
          "404: }",
          "",
          "[Removed Lines]",
          "407: Jsi_EnumSpec *jsi_csEnumGet(Jsi_Interp *interp, const char *name)",
          "408: {",
          "409:     Jsi_EnumSpec *sl, *spec = jsi_csGetEnum(interp, name);",
          "410:     if (spec) return spec;",
          "412:     Jsi_CData_Static *CData_Strs = interp->statics;",
          "413:     while (CData_Strs) {",
          "414:         sl = CData_Strs->enums;",
          "415:         while (sl->name) {",
          "416:             if (!Jsi_Strcmp(name, sl->name))",
          "417:                 return sl;",
          "418:             sl++;",
          "419:         }",
          "420:         CData_Strs = CData_Strs->nextPtr;",
          "421:     }",
          "422:     return NULL;",
          "423: }",
          "428: Jsi_FieldSpec *jsi_csFieldGet(Jsi_Interp *interp, const char *name, Jsi_StructSpec * sl)",
          "429: {",
          "430:     SIGASSERT(sl, OPTS_STRUCT);",
          "431:     Jsi_FieldSpec *sf, *ff = 0, *f = jsi_csGetFieldSpec(sl->extData);",
          "432:     int cnt = 0;",
          "433:     uint len = Jsi_Strlen(name);",
          "434:     sf = f;",
          "435:     SIGASSERT(sf, OPTS_FIELD);",
          "436:     while (sf->id != JSI_OPTION_END) {",
          "437:         if (!Jsi_Strncmp(name, sf->name, len)) {",
          "438:             if (!sf->name[len])",
          "439:                 return sf;",
          "440:             ff = sf;",
          "441:             cnt++;",
          "442:         }",
          "443:         sf++;",
          "444:     }",
          "445:     if (cnt == 1)",
          "446:         return ff;",
          "447:     return 0;",
          "448: }",
          "451: Jsi_EnumSpec *jsi_csEnumGetItem(Jsi_Interp *interp, const char *name, Jsi_EnumSpec * el)",
          "452: {",
          "453:     SIGASSERT(el, OPTS_ENUM);",
          "454:     int cnt = 0;",
          "455:     uint len = Jsi_Strlen(name);",
          "456:     if (!el->extData)",
          "457:         return 0;",
          "458:     Jsi_FieldSpec *ff = NULL, *sf = jsi_csGetFieldSpec(el->extData);",
          "459:     while (sf->id != JSI_OPTION_END) {",
          "460:         if (!Jsi_Strncmp(name, sf->name, len)) {",
          "461:             if (!sf->name[len])",
          "462:                 return sf;",
          "463:             ff = sf;",
          "464:             cnt++;",
          "465:         }",
          "466:         sf++;",
          "467:     }",
          "468:     if (cnt == 1)",
          "469:         return ff;",
          "470:     return 0;",
          "471: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "494:     return JSI_OK;",
          "495: }",
          "899: static Jsi_RC jsi_csValueToFieldType(Jsi_Interp *interp, Jsi_OptionSpec* spec, Jsi_Value *inValue, const char *inStr, void *record, Jsi_Wide flags)",
          "900: {",
          "",
          "[Removed Lines]",
          "497: static Jsi_RC CDataEnumNamesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "498:                                Jsi_Value **ret, Jsi_Func *funcPtr)",
          "499: {",
          "501:     int argc = Jsi_ValueGetLength(interp, args);",
          "503:     if (argc == 0)",
          "504:         return Jsi_HashKeysDump(interp, interp->EnumHash, ret, 0);",
          "505:     char *arg1 = Jsi_ValueString(interp, Jsi_ValueArrayIndex(interp, args, 0), NULL);",
          "506:     Jsi_EnumSpec *s, *sf;",
          "507:     if (arg1 == NULL || !(s = (Jsi_EnumSpec*)Jsi_HashGet(interp->EnumHash, arg1, 0)))",
          "508:         return Jsi_LogError(\"Unknown enum: %s\", arg1);",
          "509:     Jsi_ValueMakeArrayObject(interp, ret, NULL);",
          "510:     sf = (typeof(sf))s->extData;",
          "511:     int m = 0;",
          "512:     while (sf && sf->id != JSI_OPTION_END)",
          "513:     {",
          "514:         Jsi_ValueArraySet(interp, *ret, Jsi_ValueNewBlobString(interp, sf->name), m++);",
          "515:         sf++;",
          "516:     }",
          "517:     return JSI_OK;",
          "518: }",
          "522: static Jsi_OptionSpec EnumOptions[] =",
          "523: {",
          "524:     JSI_OPT(INT64,      Jsi_EnumSpec, flags,  .help=\"Flags for enum\", jsi_IIOF),",
          "525:     JSI_OPT(STRKEY,     Jsi_EnumSpec, help,   .help=\"Description of enum\", jsi_IIOF ),",
          "526:     JSI_OPT(STRKEY,     Jsi_EnumSpec, name,   .help=\"Name of enum\", jsi_IIOF ),",
          "527:     JSI_OPT(UINT,       Jsi_EnumSpec, idx,    .help=\"Number of items in enum\", jsi_IIRO ),",
          "528:     JSI_OPT_END(Jsi_EnumSpec, .help=\"Options for CData enum\")",
          "529: };",
          "531: static Jsi_OptionSpec EnumFieldOptions[] =",
          "532: {",
          "533:     JSI_OPT(INT64,      Jsi_EnumSpec, flags,  .help=\"Flags for item\", jsi_IIOF),",
          "534:     JSI_OPT(STRKEY,     Jsi_EnumSpec, help,   .help=\"Desciption of item\", jsi_IIOF ),",
          "535:     JSI_OPT(STRKEY,     Jsi_EnumSpec, name,   .help=\"Name of item\", jsi_IIOF ),",
          "536:     JSI_OPT(INT64,      Jsi_EnumSpec, value,  .help=\"Value for item\", jsi_IIOF),",
          "537:     JSI_OPT(UINT,       Jsi_EnumSpec, idx,    .help=\"Index of item in enum\", jsi_IIRO ),",
          "538:     JSI_OPT_END(Jsi_EnumSpec, .help=\"Options for CData item\")",
          "539: };",
          "541: static Jsi_RC CDataEnumFieldConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "542:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "543: {",
          "545:     Jsi_EnumSpec *ei, *sf;",
          "546:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "547:     if (!(sf = jsi_csEnumGet(interp, arg1)))",
          "548:         return Jsi_LogError(\"unknown enum item: %s\", arg1);",
          "549:     ei = 0;",
          "550:     char *arg2 = Jsi_ValueArrayIndexToStr(interp, args, 1, NULL);",
          "551:     if (!(ei = jsi_csEnumGetItem(interp, arg2, sf)))",
          "552:         return JSI_OK;",
          "554:     return CDataOptionsConf(interp, EnumFieldOptions, args, ei, ret, 0, 2);",
          "555: }",
          "557: static Jsi_RC CDataEnumConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "558:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "559: {",
          "561:     Jsi_EnumSpec *sl;",
          "562:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "563:     if (!(sl = jsi_csEnumGet(interp, arg1)))",
          "564:         return Jsi_LogError(\"unknown enum: %s\", arg1);",
          "565:     return CDataOptionsConf(interp, EnumOptions, args, sl, ret, 0, 1);",
          "566: }",
          "569: static Jsi_RC CDataEnumUndefineCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "570:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "571: {",
          "573:     char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "574:     Jsi_HashEntry *entry = NULL;",
          "575:     Jsi_OptionTypedef *st = NULL;",
          "576:     if (name) {",
          "577:         entry = Jsi_HashEntryFind(interp->EnumHash, name);",
          "578:         st = Jsi_TypeLookup(interp, name);",
          "579:     }",
          "580:     if (!entry || !st)",
          "581:         return Jsi_LogError(\"Unknown enum: %s\", name);",
          "582:     Jsi_EnumSpec *sf, *sl = (typeof(sl))Jsi_HashValueGet(entry);",
          "583:     if (sl->value)",
          "584:         return Jsi_LogError(\"Enum in use\");",
          "585:     Jsi_HashEntryDelete(entry);",
          "586:     sf = (typeof(sf))sl->extData;",
          "587:     while (sf && sf->id != JSI_OPTION_END) {",
          "588:         entry = Jsi_HashEntryFind(interp->EnumItemHash, name);",
          "589:         if (entry)",
          "590:             Jsi_HashEntryDelete(entry);",
          "591:         sf++;",
          "592:     }",
          "593:     entry = Jsi_HashEntryFind(interp->CTypeHash, name);",
          "594:     if (entry)",
          "595:         Jsi_HashEntryDelete(entry);",
          "596:     else",
          "597:         Jsi_Free(st);",
          "598:     return JSI_OK;",
          "599: }",
          "602: static Jsi_RC CDataEnumDefineCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "603:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "604: {",
          "605:     Jsi_RC rc = JSI_OK;",
          "606:     char **argv = NULL, *cmt, *cp;",
          "607:     Jsi_OptionTypedef *st = NULL;",
          "608:     jsi_csInitType(interp);",
          "609:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "611:     int vlen, flen, i, argc;",
          "612:     Jsi_DString fStr = {};",
          "613:     const char **el, *vstr = Jsi_ValueString(interp, val, &vlen),",
          "615:     if (vstr) {",
          "616:         cmt = Jsi_Strstr(fstr, \"//\");",
          "617:         Jsi_DString tStr = {fstr};",
          "618:         fstr=jsi_TrimStr(Jsi_DSValue(&tStr));",
          "619:         Jsi_SplitStr(fstr, &argc, &argv, (cmt?\"\\n\":\",\"), &fStr);",
          "620:         Jsi_DSFree(&tStr);",
          "621:     } else if (!Jsi_ValueIsArray(interp,flds) || (argc=Jsi_ValueGetLength(interp, flds))<1)",
          "622:         return Jsi_LogError(\"arg 2 must be string or non-empty array\");",
          "624:     Jsi_EnumSpec *sl, *sf, recs[argc+1];",
          "625:     memset(recs, 0, sizeof(recs));",
          "626:     sl = recs+argc;",
          "627:     SIGINIT(sl, OPTS_ENUM);",
          "628:     if (vstr) {",
          "629:         sl->name = Jsi_KeyAdd(interp, vstr);",
          "630:     } else if (Jsi_OptionsProcess(interp, EnumOptions, sl, val, 0) < 0) {",
          "631:         rc = JSI_ERROR;",
          "632:         goto bail;",
          "633:     }",
          "634:     if (!Jsi_StrIsAlnum(sl->name)) {",
          "635:         rc = Jsi_LogError(\"invalid enum name: %s\", sl->name);",
          "636:         goto bail;",
          "637:     }",
          "638:     if (jsi_csEnumGet(interp, sl->name)) {",
          "639:         rc = Jsi_LogError(\"enum already exists: %s\", sl->name);",
          "640:         goto bail;",
          "641:     }",
          "642:     for (i = 0; i<argc; i++) {",
          "643:         sf = recs+i;",
          "644:         SIGINIT(sf, OPTS_FIELD);",
          "645:         sf->idx = i;",
          "646:         if (i)",
          "647:             sf->value = recs[i-1].value+1;",
          "648:         if (!argv)",
          "649:             val = Jsi_ValueArrayIndex(interp, flds, i);",
          "650:         else {",
          "651:             if (cmt) {",
          "652:                 cp = Jsi_Strstr(argv[i], \"//\");",
          "653:                 if (cp) {",
          "655:                     cp += 2;",
          "656:                     cp = jsi_TrimStr(cp);",
          "657:                     sf->help = Jsi_KeyAdd(interp, cp);",
          "658:                 }",
          "659:             }",
          "660:             cp = Jsi_Strchr(argv[i], ',');",
          "661:             if (cp) *cp = 0;",
          "662:             cp = Jsi_Strchr(argv[i], '=');",
          "663:             if (cp) {",
          "665:                 cp = jsi_TrimStr(cp);",
          "666:                 if (Jsi_GetWide(interp, cp, &sf->value, 0) != JSI_OK) {",
          "667:                     rc = Jsi_LogError(\"Bad value\");",
          "668:                     goto bail;",
          "669:                 }",
          "670:             }",
          "671:             cp = jsi_TrimStr(argv[i]);",
          "672:             sf->name = Jsi_KeyAdd(interp, cp);",
          "673:             val = NULL;",
          "674:         }",
          "675:         if (val && Jsi_OptionsProcess(interp, EnumFieldOptions, sf, val, 0) < 0) {",
          "676:             rc = JSI_ERROR;",
          "677:             goto bail;",
          "678:         }",
          "679:         if (Jsi_HashGet(interp->EnumItemHash, sf->name, 0)) {",
          "680:             rc = Jsi_LogError(\"duplicate enum item: %s\", sf->name);",
          "681:             goto bail;",
          "682:         }",
          "683:         if (!Jsi_StrIsAlnum(sf->name)) {",
          "684:             rc = Jsi_LogError(\"invalid enum item name: %s\", sf->name);",
          "685:             goto bail;",
          "686:         }",
          "687:     }",
          "688:     st = (typeof(st))Jsi_Calloc(1, sizeof(*st) + sizeof(char*)*(argc+1)+sizeof(recs));",
          "689:     SIGINIT(st, TYPEDEF);",
          "690:     sf = (typeof(sf))((uchar*)(st + 1));",
          "691:     sl = sf+argc;",
          "692:     el = (typeof(el))(sl + 1);",
          "693:     memcpy(sf, recs, sizeof(recs));",
          "694:     for (i = 0; i<argc; i++)",
          "695:         el[i] = sf[i].name;",
          "696:     sl->id = JSI_OPTION_END;",
          "697:     sl->extData = (uchar*)sf;",
          "698:     sl->data = el;",
          "699:     rc = jsi_csSetupEnum(interp, sl, sf, st);",
          "700: bail:",
          "701:     Jsi_DSFree(&fStr);",
          "702:     if (rc != JSI_OK && st)",
          "703:         Jsi_Free(st);",
          "704:     return rc;",
          "705: }",
          "707: static Jsi_RC CDataEnumValueCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "708:                                Jsi_Value **ret, Jsi_Func *funcPtr)",
          "709: {",
          "711:     const char *arg1, *arg2;",
          "712:     Jsi_EnumSpec *ei, *el = 0;",
          "713:     arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "714:     arg2 = Jsi_ValueArrayIndexToStr(interp, args, 1, NULL);",
          "715:     if (!(el = jsi_csEnumGet(interp, arg1))) {",
          "716:         return JSI_OK;",
          "717:     }",
          "718:     if (!(ei = jsi_csEnumGetItem(interp, arg2, el)))",
          "719:         return JSI_OK;",
          "720:     Jsi_ValueMakeNumber(interp, ret, ei->value);",
          "721:     return JSI_OK;",
          "722: }",
          "726: static Jsi_RC CDataEnumFindCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "727:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "728: {",
          "730:     Jsi_Value *arg2 = Jsi_ValueArrayIndex(interp, args, 1);",
          "731:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "732:     Jsi_EnumSpec *ei, *el;",
          "733:     if (!(el = jsi_csEnumGet(interp, arg1)))",
          "734:         return Jsi_LogError(\"Unknown enum: %s\", arg1);",
          "735:     Jsi_Wide wval;",
          "736:     if (Jsi_GetWideFromValue(interp, arg2, &wval) != JSI_OK)",
          "737:         return JSI_ERROR;",
          "739:     ei = (typeof(ei))el->extData;",
          "740:     uint i;",
          "741:     for (i=0; i<el->size; i++) {",
          "742:         if (wval == (Jsi_Wide)ei[i].value) {",
          "743:             Jsi_ValueMakeStringKey(interp, ret, ei[i].name);",
          "744:             return JSI_OK;",
          "745:         }",
          "746:     }",
          "747:     return JSI_OK;",
          "748: }",
          "750: static Jsi_RC CDataEnumGetDfn(Jsi_Interp *interp, Jsi_EnumSpec * sl, Jsi_DString *dsPtr)",
          "751: {",
          "753:     Jsi_EnumSpec *sf;",
          "754:     Jsi_DString eStr = {};",
          "756:     Jsi_DSAppend(dsPtr, \"{ name: \\\"\", sl->name, \"\\\"\", NULL);",
          "757:     if (sl->flags)",
          "758:         Jsi_DSPrintf(dsPtr, \", flags:%\" PRIx64, sl->flags);",
          "759:     if (sl->help && sl->help[0]) {",
          "760:         Jsi_DSAppend(dsPtr, \", help:\", Jsi_JSONQuote(interp, sl->help, -1, &eStr), NULL);",
          "761:         Jsi_DSFree(&eStr);",
          "762:     }",
          "763:     sf = jsi_csGetFieldSpec(sl->extData);",
          "764:     Jsi_DSAppend(dsPtr, \", fields:[\", NULL);",
          "765:     while (sf->id != JSI_OPTION_END) {",
          "766:         Jsi_DSPrintf(dsPtr, \" { name:\\\"%s\\\", value:%#\" PRIx64, sf->name, (int64_t)sf->value);",
          "767:         if (sf->help && sf->help[0]) {",
          "768:             Jsi_DSAppend(dsPtr, \", help:\", Jsi_JSONQuote(interp, sf->help, -1, &eStr), NULL);",
          "769:             Jsi_DSFree(&eStr);",
          "770:         }",
          "771:         Jsi_DSAppend(dsPtr, \"}\", NULL);",
          "772:         sf++;",
          "773:     }",
          "774:     Jsi_DSAppend(dsPtr, \"]}\", NULL);",
          "775:     return JSI_OK;",
          "776: }",
          "778: static Jsi_RC CDataEnumGetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "779:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "780: {",
          "782:     char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "783:     Jsi_EnumSpec *sl = jsi_csEnumGet(interp, name);",
          "784:     if (!sl)",
          "785:         return JSI_OK;",
          "786:     JSI_DSTRING_VAR(dsPtr, 400);",
          "787:     Jsi_RC rc = CDataEnumGetDfn(interp, sl, dsPtr);",
          "788:     if (JSI_OK == rc)",
          "789:         rc = Jsi_JSONParse(interp, Jsi_DSValue(dsPtr), ret, 0);",
          "790:     Jsi_DSFree(dsPtr);",
          "791:     return rc;",
          "792: }",
          "794: static Jsi_CmdSpec enumCmds[] = {",
          "795:     {\"add\",     CDataEnumDefineCmd,  2, 2, \"options:object|string, fields:array|string\", .help=\"Create a new enum: value of items same as in fieldconf\", .retType=0, .flags=0, .info=0, .opts=EnumOptions},",
          "796:     {\"conf\",    CDataEnumConfCmd,    1, 2, \"enum:string, options:object|string=void\",.help=\"Configure options for enum\", .retType=0, .flags=0, .info=0, .opts=EnumOptions},",
          "797:     {\"fieldconf\",CDataEnumFieldConfCmd,2, 3, \"enum:string, field:string, options:object|string=void\",.help=\"Configure options for fields\", .retType=0, .flags=0, .info=0, .opts=EnumFieldOptions},",
          "798:     {\"find\",    CDataEnumFindCmd,    2, 2, \"enum:string, intValue:number\", .help=\"Find item with given value in enum\", .retType=(uint)JSI_TT_STRING},",
          "799:     {\"get\",     CDataEnumGetCmd,     1, 1, \"enum:string\", .help=\"Return enum definition\", .retType=(uint)JSI_TT_OBJECT},",
          "800:     {\"names\",   CDataEnumNamesCmd,   0, 1, \"enum:string=void\", .help=\"Return name list of all enums, or items within one enum\", .retType=(uint)JSI_TT_ARRAY},",
          "801:     {\"remove\",  CDataEnumUndefineCmd,1, 1, \"enum:string\",.help=\"Remove an enum\", .retType=0, .flags=0, .info=0, .opts=0},",
          "802:     {\"value\",   CDataEnumValueCmd,   2, 2, \"enum:string, item:string\", .help=\"Return value for given enum item\", .retType=(uint)JSI_TT_NUMBER},",
          "803:     { NULL,   0,0,0,0, .help=\"Enum commands. Note: Enum() is a shortcut for Enum.add()\" }",
          "804: };",
          "808: static Jsi_RC CDataStructGetDfn(Jsi_Interp *interp, Jsi_StructSpec * sl, Jsi_DString *dsPtr)",
          "809: {",
          "811:     Jsi_StructSpec *sf;",
          "812:     Jsi_DString eStr = {};",
          "813:     sf = jsi_csGetFieldSpec(sl->extData);",
          "814:     Jsi_DSPrintf(dsPtr, \"{ \\\"name\\\": \\\"%s\\\", \\\"size\\\":%d\", sl->name, sl->size);",
          "815:     if (sl->flags)",
          "816:         Jsi_DSPrintf(dsPtr, \", \\\"flags\\\":0x%\" PRIx64, sl->flags);",
          "817:     if (sl->help && sl->help[0]) {",
          "818:         Jsi_DSAppend(dsPtr, \", \\\"label\\\":\", Jsi_JSONQuote(interp, sl->help, -1, &eStr), NULL);",
          "819:         Jsi_DSFree(&eStr);",
          "820:     }",
          "821:     if (sl->ssig)",
          "822:         Jsi_DSPrintf(dsPtr, \", \\\"sig\\\":0x%x\", sl->ssig);",
          "823:     Jsi_DSAppend(dsPtr, \", \\\"fields\\\":[\", NULL);",
          "824: #define SSIFNV(s) (s?\"\\\"\":\"\"), (s?s:\"null\"), (s?\"\\\"\":\"\")",
          "825:     while (sf->id != JSI_OPTION_END) {",
          "826:         Jsi_DSPrintf(dsPtr, \" { \\\"name\\\":\\\"%s\\\",  \\\"id\\\":%s%s%s, \\\"size\\\":%d, \\\"bitsize\\\":%d,\"",
          "827:             \"\\\"offset\\\":%d, , \\\"bitoffs\\\":%d, \\\"isbit\\\":%d, \\\"label\\\":\",",
          "828:              sf->name, SSIFNV(sf->tname), sf->size, sf->bits,",
          "829:              sf->offset, sf->boffset, sf->flags&JSI_OPT_IS_BITS?1:0 );",
          "830:         if (sf->help && sf->help[0]) {",
          "831:             Jsi_DSAppend(dsPtr, Jsi_JSONQuote(interp, sf->help, -1, &eStr), NULL);",
          "832:             Jsi_DSFree(&eStr);",
          "833:         } else",
          "834:             Jsi_DSAppend(dsPtr,\"\\\"\\\"\", NULL);",
          "835:         Jsi_DSAppend(dsPtr, \"}\", NULL);",
          "836:         sf++;",
          "837:     }",
          "838:     Jsi_DSAppend(dsPtr, \"]}\", NULL);",
          "839:     return JSI_OK;",
          "840: }",
          "843: static Jsi_RC CDataStructGetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "844:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "845: {",
          "847:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "848:     Jsi_StructSpec *sl = jsi_csStructGet(interp, arg1);",
          "850:     if (!sl)",
          "851:         return Jsi_LogError(\"unkown struct: %s\", arg1);",
          "852:     Jsi_DString dStr = {};",
          "853:     Jsi_RC rc = CDataStructGetDfn(interp, sl, &dStr);",
          "854:     if (JSI_OK == rc)",
          "855:         rc = Jsi_JSONParse(interp, Jsi_DSValue(&dStr), ret, 0);",
          "856:     Jsi_DSFree(&dStr);",
          "857:     return rc;",
          "858: }",
          "860: static Jsi_RC CDataStructNamesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "861:                                  Jsi_Value **ret, Jsi_Func *funcPtr)",
          "862: {",
          "864:     int argc = Jsi_ValueGetLength(interp, args);",
          "866:     if (argc == 0)",
          "867:         return Jsi_HashKeysDump(interp, interp->StructHash, ret, 0);",
          "868:     char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "869:     Jsi_StructSpec *sf, *sl;",
          "870:     if (name == NULL || !(sl = Jsi_CDataStruct(interp, name)))",
          "871:         return Jsi_LogError(\"Unknown struct: %s\", name);",
          "872:     Jsi_ValueMakeArrayObject(interp, ret, NULL);",
          "873:     sf = (typeof(sf))sl->data;",
          "874:     int m = 0;",
          "875:     while (sf && sf->id != JSI_OPTION_END)",
          "876:     {",
          "877:         Jsi_ValueArraySet(interp, *ret, Jsi_ValueNewBlobString(interp, sf->name), m++);",
          "878:         sf++;",
          "879:     }",
          "880:     return JSI_OK;",
          "881: }",
          "883: static Jsi_RC CDataStructSchemaCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "884:     Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "885:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "886:     Jsi_StructSpec *sf = jsi_csStructFields(interp, arg1);",
          "888:     if (!sf)",
          "889:         return Jsi_LogError(\"unkown struct: %s\", arg1);;",
          "891:     Jsi_DString dStr = {};",
          "892:     Jsi_OptionsData(interp, (Jsi_OptionSpec*)sf, &dStr, 1);",
          "893:     Jsi_ValueFromDS(interp, &dStr, ret);",
          "894:     Jsi_DSFree(&dStr);",
          "895:     return JSI_OK;",
          "896: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "935: };",
          "1566: static bool jsi_csBitSetGet(int isSet, uchar *tbuf, int bits, Jsi_UWide *valPtr) {",
          "1567:     union bitfield *bms = (union bitfield *)tbuf;",
          "1568:     Jsi_UWide val = *valPtr;",
          "",
          "[Removed Lines]",
          "939: static Jsi_RC jsi_ValueToIniVal(Jsi_Interp *interp, Jsi_OptionSpec* spec, Jsi_Value *inValue, const char *inStr, void *record, Jsi_Wide flags)",
          "940: {",
          "941:     if (inStr)",
          "942:         return JSI_ERROR;",
          "943:     uchar *data = (uchar*)record, *odata;",
          "945:     int idx = (intptr_t)spec->data;",
          "946:     if (idx<=0 || !inValue)",
          "947:         return Jsi_LogError(\"idx/value not set\");",
          "948:     Jsi_OptionSpec *typePtr = spec-idx;",
          "949:     if (typePtr->id != JSI_OPTION_CUSTOM || typePtr->custom != &jsi_OptSwitchFieldType)",
          "950:         return Jsi_LogError(\"Bad field type\");",
          "951:     const Jsi_OptionTypedef **tsp = (typeof(tsp))(data + typePtr->offset), *tsptr = *tsp, *ssp;",
          "952:     SIGASSERT(tsptr, TYPEDEF);",
          "953:     Jsi_FieldSpec *sf = jsi_csGetFieldSpec(data);",
          "954:     Jsi_StructSpec *sl = jsi_csGetStructSpec(sf->extData);",
          "955:     ssp = sl->type;",
          "956:     SIGASSERT(ssp, TYPEDEF);",
          "957:     odata = ssp->extra;",
          "958:     if (!tsptr->sfmt) {",
          "959:         if (tsptr->flags&jsi_CTYP_STRUCT && tsptr->extra) {",
          "960:             if (!Jsi_ValueIsBoolean(interp, inValue)) Jsi_LogWarn(\"init for struct must be boolean\");",
          "961:             if (!Jsi_ValueIsTrue(interp, inValue)) return JSI_OK;",
          "962:             Jsi_StructSpec *tsl = jsi_csGetStructSpec(tsptr->extData);",
          "963:             int i, n = (sf->arrSize?sf->arrSize:1);",
          "964:             for (i=0; i<n; i++)",
          "965:                 memcpy(odata+sf->offset+i*tsl->size, tsptr->extra, tsl->size);",
          "966:             return JSI_OK;",
          "967:         } else if (!(tsptr->flags&jsi_CTYP_ENUM))",
          "968:             return Jsi_LogError(\"init not supported for type: %s\", tsptr->cName);",
          "969:     }",
          "970:     return jsi_SetOption(interp, sf, \"init\", odata, inValue, flags, interp->isSafe);",
          "971: }",
          "974: static Jsi_RC jsi_IniValToValue(Jsi_Interp *interp, Jsi_OptionSpec* spec, Jsi_Value **outValue, Jsi_DString *outStr, void *record, Jsi_Wide flags)",
          "975: {",
          "976:     if (outStr)",
          "977:         return JSI_ERROR;",
          "978:     uchar *data = (uchar*)record, *odata;",
          "979:     int idx = (intptr_t)spec->data;",
          "980:     if (idx<=0 || !outValue)",
          "981:         return Jsi_LogError(\"idx/value not set\");",
          "982:     Jsi_OptionSpec *typePtr = spec-idx;",
          "983:     if (typePtr->id != JSI_OPTION_CUSTOM || typePtr->custom != &jsi_OptSwitchFieldType)",
          "984:         return Jsi_LogError(\"Bad field type\");",
          "985:     const Jsi_OptionTypedef **tsp = (typeof(tsp))(data + typePtr->offset), *tsptr = *tsp, *ssp;",
          "986:     SIGASSERT(tsptr, TYPEDEF);",
          "987:     Jsi_FieldSpec *sf = jsi_csGetFieldSpec(data);",
          "988:     Jsi_StructSpec *sl = jsi_csGetStructSpec(sf->extData);",
          "989:     ssp = sl->type;",
          "990:     SIGASSERT(ssp, TYPEDEF);",
          "991:     odata = ssp->extra;",
          "992:     if (odata && tsptr->sfmt)",
          "993:         return jsi_GetOption(interp, sf, odata, \"init\", outValue, flags);",
          "995:     Jsi_ValueMakeNull(interp, outValue);",
          "996:     return JSI_OK;",
          "1000: }",
          "1002: Jsi_OptionCustom jsi_OptSwitchIniVal = {",
          "1003:     .name=\"inival\", .parseProc=jsi_ValueToIniVal, .formatProc=jsi_IniValToValue",
          "1004: };",
          "1006: static Jsi_OptionSpec StructOptions[] =",
          "1007: {",
          "1008:     JSI_OPT(UINT32, Jsi_StructSpec, crc,     .help=\"Crc for struct\", jsi_IIOF ),",
          "1009:     JSI_OPT(INT64,  Jsi_StructSpec, flags,   .help=\"Flags for struct\", jsi_IIOF ),",
          "1010:     JSI_OPT(STRKEY, Jsi_StructSpec, help,    .help=\"Struct description\", jsi_IIOF ),",
          "1011:     JSI_OPT(UINT32, Jsi_StructSpec, idx,     .help=\"Number of fields in struct\", jsi_IIRO ),",
          "1012:     JSI_OPT(STRKEY, Jsi_StructSpec, name,    .help=\"Name of struct\", jsi_IIOF|JSI_OPT_REQUIRED ),",
          "1013:     JSI_OPT(UINT,   Jsi_StructSpec, size,    .help=\"Size of struct in bytes\", jsi_IIRO ),",
          "1014:     JSI_OPT(UINT32, Jsi_StructSpec, ssig,    .help=\"Signature for struct\", jsi_IIOF),",
          "1015:     JSI_OPT(INT64,  Jsi_StructSpec, value,   .help=\"Reference count\", jsi_IIRO ),",
          "1016:     JSI_OPT_END(Jsi_StructSpec, .help=\"Options for CData struct create\")",
          "1017: };",
          "1019: static Jsi_OptionSpec StructFieldOptions[] =",
          "1020: {",
          "1021:     JSI_OPT(UINT,   Jsi_StructSpec,   arrSize,.help=\"Size of field if an array\", jsi_IIOF ),",
          "1022:     JSI_OPT(UINT32, Jsi_StructSpec,   bits,   .help=\"Size of bitfield\", jsi_IIOF ),",
          "1023:     JSI_OPT(UINT32, Jsi_StructSpec,   boffset,.help=\"Bit offset of field within struct\", jsi_IIRO ),",
          "1024:     JSI_OPT(INT64,  Jsi_StructSpec,   flags,  .help=\"Flags for field\", jsi_IIOF ),",
          "1025:     JSI_OPT(UINT32, Jsi_StructSpec,   idx,    .help=\"Index of field in struct\", jsi_IIRO ),",
          "1026:     JSI_OPT(STRKEY, Jsi_StructSpec,   help,   .help=\"Field description\", jsi_IIOF ),",
          "1027:     JSI_OPT(STRKEY, Jsi_StructSpec,   info,   .help=\"Info for field\", jsi_IIOF ),",
          "1028:     JSI_OPT(STRKEY, Jsi_StructSpec,   name,   .help=\"Name of field\", jsi_IIOF|JSI_OPT_REQUIRED ),",
          "1029:     JSI_OPT(UINT,   Jsi_StructSpec,   offset, .help=\"Offset of field within struct\", jsi_IIRO ),",
          "1030:     JSI_OPT(UINT,   Jsi_StructSpec,   size,   .help=\"Size of field in struct\", jsi_IIRO ),",
          "1031:     JSI_OPT(CUSTOM, Jsi_StructSpec,   type,   .help=\"Type of field\", jsi_IIOF|JSI_OPT_REQUIRED, .custom=&jsi_OptSwitchFieldType,  .data=NULL ),",
          "1032:     JSI_OPT(CUSTOM, Jsi_StructSpec,   init,   .help=\"Initial value for field\", jsi_IIOF|JSI_OPT_PASS2, .custom=&jsi_OptSwitchIniVal, .data=(void*)1  ),",
          "1033:     JSI_OPT_END(Jsi_StructSpec, .help=\"Options for CData struct field\")",
          "1034: };",
          "1036: static Jsi_RC CDataOptionsConf(Jsi_Interp *interp, Jsi_OptionSpec *specs,  Jsi_Value *args,",
          "1037:     void *rec, Jsi_Value **ret, int flags, int skipArgs)",
          "1038: {",
          "1039:     int argc = Jsi_ValueGetLength(interp, args);",
          "1040:     Jsi_Value *val;",
          "1041:     flags |= JSI_OPTS_IS_UPDATE;",
          "1043:     if (argc == skipArgs)",
          "1044:         return Jsi_OptionsDump(interp, specs, rec, ret, flags);",
          "1045:     val = Jsi_ValueArrayIndex(interp, args, skipArgs);",
          "1046:     Jsi_vtype vtyp = Jsi_ValueTypeGet(val);",
          "1047:     if (vtyp == JSI_VT_STRING) {",
          "1048:         char *str = Jsi_ValueString(interp, val, NULL);",
          "1049:         return Jsi_OptionsGet(interp, specs, rec, str, ret, flags);",
          "1050:     }",
          "1051:     if (vtyp != JSI_VT_OBJECT && vtyp != JSI_VT_NULL)",
          "1052:         return Jsi_LogError(\"expected string, object, or null\");",
          "1053:     if (Jsi_OptionsProcess(interp, specs, rec, val, JSI_OPTS_IS_UPDATE) < 0)",
          "1054:         return JSI_ERROR;",
          "1055:     return JSI_OK;",
          "1056: }",
          "1060: static Jsi_RC CDataStructConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1061:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1062: {",
          "1064:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1065:     Jsi_StructSpec *sl = jsi_csStructGet(interp, arg1);",
          "1066:     if (!sl)",
          "1067:         return Jsi_LogError(\"unknown struct: %s\", arg1);",
          "1068:     return CDataOptionsConf(interp, StructOptions, args, sl, ret, 0, 1);",
          "1069: }",
          "1071: static Jsi_RC CDataStructUndefineCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1072:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1073: {",
          "1075:     char *name = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1076:     Jsi_HashEntry *entry = NULL;",
          "1077:     if (name)",
          "1078:         entry = Jsi_HashEntryFind(interp->StructHash, name);",
          "1079:     if (!entry)",
          "1080:         return Jsi_LogError(\"Unknown struct: %s\", name);",
          "1081:     Jsi_StructSpec *sl = (typeof(sl))Jsi_HashValueGet(entry);",
          "1082:     if (sl->value)",
          "1083:         return Jsi_LogError(\"Struct in use: %d\", (int)sl->value);",
          "1084:     Jsi_HashEntryDelete(entry);",
          "1085:     entry = Jsi_HashEntryFind(interp->CTypeHash, name);",
          "1086:     if (entry)",
          "1087:         Jsi_HashEntryDelete(entry);",
          "1088:     return JSI_OK;",
          "1089: }",
          "1092: static Jsi_RC CDataStructDefineCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1093:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1094: {",
          "1096:     Jsi_RC rc = JSI_OK;",
          "1097:     Jsi_OptionTypedef *st = NULL;",
          "1098:     jsi_csInitType(interp);",
          "1099:     Jsi_Value *eval = NULL, *val = Jsi_ValueArrayIndex(interp, args, 0),",
          "1101:     int vlen, flen, i, argc, clen = 0, arrCnt=0;",
          "1102:     Jsi_DString fStr = {};",
          "1103:     char **argv = NULL, *cmt, *eq, *cp, *ce, *cpval, ocp;",
          "1104:     const char *vstr = Jsi_ValueString(interp, val, &vlen),",
          "1106:     if (vstr) {",
          "1107:         cmt = Jsi_Strstr(fstr, \"//\");",
          "1108:         eq = Jsi_Strchr(fstr, '=');",
          "1109:         Jsi_DString tStr = {fstr};",
          "1110:         fstr=jsi_TrimStr(Jsi_DSValue(&tStr));",
          "1111:         Jsi_SplitStr(fstr, &argc, &argv, (cmt?\"\\n\":\";\"), &fStr);",
          "1112:         Jsi_DSFree(&tStr);",
          "1113:         if (!cmt && argc>0 && !argv[argc-1][0])",
          "1114:             argc--;",
          "1115:         if (eq) {",
          "1116:             eval = Jsi_ValueNewArray(interp, NULL, 0);",
          "1117:             Jsi_IncrRefCount(interp, eval);",
          "1118:         }",
          "1119:     } else if (!Jsi_ValueIsArray(interp,flds) || (argc=Jsi_ValueGetLength(interp, flds))<1)",
          "1120:         return Jsi_LogError(\"arg 2 must be string or non-empty array\");",
          "1121:     if (argc>200)",
          "1122:         return Jsi_LogError(\"too many fields: %d>200\", argc);",
          "1123:     Jsi_StructSpec *sl, *sf, recs[argc+2];",
          "1124:     memset(recs, 0, sizeof(recs));",
          "1125:     sl = recs+argc+1;",
          "1126:     sf = recs;",
          "1127:     SIGINIT(sl, OPTS_STRUCT);",
          "1128:     if (vstr) {",
          "1129:         sl->name = Jsi_KeyAdd(interp, vstr);",
          "1130:     } else if (Jsi_OptionsProcess(interp, StructOptions, sl, val, 0) < 0) {",
          "1131:         rc = JSI_ERROR;",
          "1132:         goto bail;",
          "1133:     }",
          "1134:     if (!Jsi_StrIsAlnum(sl->name)) {",
          "1135:         rc = Jsi_LogError(\"invalid struct name: %s\", sl->name);",
          "1136:         goto bail;",
          "1137:     }",
          "1138:     if (jsi_csStructGet(interp, sl->name)) {",
          "1139:         rc = Jsi_LogError(\"struct already exists: %s\", sl->name);",
          "1140:         goto bail;",
          "1141:     }",
          "1142:     for (i = 0; i<argc; i++) {",
          "1143:         Jsi_Number numVal = 0;",
          "1144:         bool bVal, isbitset = 0;",
          "1145:         Jsi_Value *inival = NULL;",
          "1146:         sf = recs+i;",
          "1147:         SIGINIT(sf, OPTS_FIELD);",
          "1148:         if (!argv) {",
          "1149:             val = Jsi_ValueArrayIndex(interp, flds, i);",
          "1150:             if (!val || Jsi_OptionsProcess(interp, StructFieldOptions, sf, val, 0) < 0) {",
          "1151:                 rc = JSI_ERROR;",
          "1152:                 goto bail;",
          "1153:             }",
          "1154:             if (!Jsi_StrIsAlnum(sf->name) || !sf->type) {",
          "1155:                 rc = Jsi_LogError(\"invalid struct field name: %s\", sf->name);",
          "1156:                 goto bail;",
          "1157:             }",
          "1158:             if (!Jsi_ValueObjLookup(interp, val, \"init\", 0) && (sf->type->flags&jsi_CTYP_STRUCT))",
          "1159:                 inival = Jsi_ValueNewBoolean(interp, true);",
          "1160:         } else {",
          "1161:             if (cmt) {",
          "1162:                 cp = Jsi_Strstr(argv[i], \"//\");",
          "1163:                 if (cp) {",
          "1165:                     cp += 2;",
          "1166:                     cp = jsi_TrimStr(cp);",
          "1167:                     sf->help = Jsi_KeyAdd(interp, cp);",
          "1168:                 }",
          "1169:                 cp = Jsi_Strchr(argv[i], ';');",
          "1170:                 if (cp) *cp = 0;",
          "1171:             }",
          "1172:             cp = Jsi_Strchr(argv[i], '=');",
          "1173:             if (cp) {",
          "1174:                 if (!eval)",
          "1175:                     goto bail;",
          "1177:                 cp = jsi_TrimStr(cp);",
          "1178:                 int cplen = Jsi_Strlen(cp);",
          "1179:                 if (cplen>1 && (cp[0] == '\\'' || cp[0] == '\"') && cp[0] == cp[cplen-1]) {",
          "1180:                     cpval = cp+1;",
          "1181:                     cp[cplen-1] = 0;",
          "1182:                     inival = Jsi_ValueNewStringDup(interp, cpval);",
          "1183:                 }",
          "1184:                 else if (Jsi_GetDouble(interp, cp, &numVal) == JSI_OK)",
          "1185:                     inival = Jsi_ValueNewNumber(interp, numVal);",
          "1186:                 else if (Jsi_GetBool(interp, cp, &bVal) == JSI_OK)",
          "1187:                     inival = Jsi_ValueNewBoolean(interp, bVal);",
          "1188:                 else",
          "1189:                     inival = Jsi_ValueNewStringDup(interp, cp);",
          "1190:             }",
          "1191:             cp = argv[i];",
          "1192:             while (*cp && isspace(*cp)) cp++;",
          "1193:             ce = cp;",
          "1194:             while (*ce && !isspace(*ce)) ce++;",
          "1195:             ocp = *ce;",
          "1196:             if (!ocp) {",
          "1197:                 rc = Jsi_LogError(\"bad field: %s\", cp);",
          "1198:                 goto bail;",
          "1199:             }",
          "1201:             sf->type = Jsi_TypeLookup(interp, cp);",
          "1203:             if (!sf->type) {",
          "1204:                 rc = Jsi_LogError(\"unknown type: %s\", argv[i]);",
          "1205:                 goto bail;",
          "1206:             }",
          "1207:             if (!inival && (sf->type->flags&jsi_CTYP_STRUCT))",
          "1208:                 inival = Jsi_ValueNewBoolean(interp, true);",
          "1210:             cp = ce+1;",
          "1211:             while (*cp && isspace(*cp)) cp++;",
          "1212:             ce = cp;",
          "1213:             while (*ce && (isalnum(*ce) || *ce == '_')) ce++;",
          "1214:             ocp = *ce;",
          "1216:             if (!*cp) {",
          "1217:                 rc = Jsi_LogError(\"missing or bad struct field name\");",
          "1218:                 goto bail;",
          "1219:             }",
          "1220:             sf->name = Jsi_KeyAdd(interp, cp);",
          "1221:             if (ocp) {",
          "1222:                 ce++;",
          "1223:                 clen = Jsi_Strlen(ce);",
          "1224:             }",
          "1225:             if (ocp == '@') {",
          "1226:                 isbitset = 1;",
          "1227:             } else",
          "1228:             if (ocp == ':') {",
          "1229:                 int bsiz = -1;",
          "1230:                 if (Jsi_GetInt(interp, ce, &bsiz,10) != JSI_OK || bsiz<=0 || bsiz>64) {",
          "1231:                     rc = Jsi_LogError(\"bad bit size: %s\", ce);",
          "1232:                     goto bail;",
          "1233:                 }",
          "1234:                 sf->bits = bsiz;",
          "1235:             } else if (ocp == '[' && clen>1 && ce[clen-1]==']') {",
          "1236:                 int asiz = -1;",
          "1237:                 ce[clen-1] = 0;",
          "1238:                 if (Jsi_GetInt(interp, ce, &asiz, 10) != JSI_OK || asiz<=0) {",
          "1239:                     rc = Jsi_LogError(\"bad size: %s\", cp);",
          "1240:                     goto bail;",
          "1241:                 }",
          "1242:                 sf->arrSize = asiz;",
          "1243:             } else if (ocp) {",
          "1244:                 rc = Jsi_LogError(\"bad field: %s\", cp);",
          "1245:                 goto bail;",
          "1246:             }",
          "1247:             val = NULL;",
          "1248:         }",
          "1249:         if (inival) {",
          "1250:             Jsi_Value *sval = Jsi_ValueNewObj(interp, NULL);",
          "1251:             Jsi_ValueInsert(interp, sval, \"init\", inival, 0);",
          "1252:             Jsi_ValueArraySet(interp, eval, sval, i);",
          "1253:         }",
          "1254:         bool isEnum = (sf->type && (sf->type->flags&jsi_CTYP_ENUM));",
          "1255:         if (isbitset) {",
          "1256:             if (!isEnum) {",
          "1257:                 rc = Jsi_LogError(\"bitset type is not an enum\");",
          "1258:                 goto bail;",
          "1259:             }",
          "1260:             sf->flags |= JSI_OPT_BITSET_ENUM;",
          "1261:         }",
          "1262:         if (sf->arrSize) {",
          "1263:             if (sf->arrSize>interp->maxArrayList) {",
          "1264:                 rc = Jsi_LogError(\"array size too big: %d >= %d\", sf->arrSize, interp->maxArrayList);",
          "1265:                 goto bail;",
          "1266:             }",
          "1267:             if (sf->bits || isEnum) {",
          "1268:                 rc = Jsi_LogError(\"array of %s unsupported\", (sf->bits?\"bits\":\"enums\"));",
          "1269:                 goto bail;",
          "1270:             }",
          "1271:             arrCnt++;",
          "1272:         }",
          "1273:     }",
          "1274:     recs[argc].id = JSI_OPTION_END;",
          "1275:     rc = jsi_csSetupStruct(interp, sl, recs, recs, argc, &st, arrCnt);",
          "1276:     if (rc != JSI_OK || !st) {",
          "1277:         rc = JSI_ERROR;",
          "1278:         goto bail;",
          "1279:     }",
          "1280:     sl = jsi_csGetStructSpec(st->extData);",
          "1281:     sf = jsi_csGetFieldSpec(sl->extData);",
          "1282:     if (vstr)",
          "1283:         flds = eval;",
          "1284:     for (i = 0; i<argc && flds; i++) {",
          "1285:         val = Jsi_ValueArrayIndex(interp, flds, i);",
          "1286:         if (val && Jsi_OptionsProcess(interp, StructFieldOptions, sf+i, val, JSI_OPT_PASS2) < 0) {",
          "1287:             rc = JSI_ERROR;",
          "1288:             goto bail;",
          "1289:         }",
          "1290:     }",
          "1291: bail:",
          "1292:     if (eval)",
          "1293:         Jsi_DecrRefCount(interp, eval);",
          "1294:     Jsi_DSFree(&fStr);",
          "1295:     if (rc != JSI_OK && st)",
          "1296:         Jsi_HashEntryDelete(st->hPtr);",
          "1297:     return rc;",
          "1298: }",
          "1301: static Jsi_RC CDataStructFieldConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1302:                                 Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1303: {",
          "1305:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1306:     Jsi_StructSpec *sf, *sl = jsi_csStructGet(interp, arg1);",
          "1307:     if (!sl)",
          "1308:         return Jsi_LogError(\"unknown struct: %s\", arg1);",
          "1309:     char *arg2 = Jsi_ValueArrayIndexToStr(interp, args, 1, NULL);",
          "1310:     if (!arg2 || !(sf = jsi_csFieldGet(interp, arg2, sl)))",
          "1311:         return Jsi_LogError(\"unknown field: %s\", arg2);",
          "1312:     return CDataOptionsConf(interp, StructFieldOptions, args, sf, ret, 0, 2);",
          "1313: }",
          "1315: static Jsi_CmdSpec structCmds[] =",
          "1316: {",
          "1317:     {\"add\",       CDataStructDefineCmd, 2, 2, \"options:object|string, fields:array|string\", .help=\"Create a struct: field values same as in fieldconf\", .retType=0, .flags=0, .info=0, .opts=StructOptions},",
          "1318:     {\"conf\",      CDataStructConfCmd,   1, 2, \"struct:string, options:object|string=void\", .help=\"Configure options for struct\", .retType=0, .flags=0, .info=0, .opts=StructOptions},",
          "1319:     {\"fieldconf\", CDataStructFieldConfCmd,2,3,\"struct:string, field:string, options:object|string=void\", .help=\"Configure options for fields\", .retType=0, .flags=0, .info=0, .opts=StructFieldOptions},",
          "1320:     {\"get\",       CDataStructGetCmd,    1, 2, \"struct, options:object=void\", .help=\"Return the struct definition\", .retType=(uint)JSI_TT_OBJECT},",
          "1321:     {\"names\",     CDataStructNamesCmd,  0, 1, \"struct:string=void\", .help=\"Return name list of all structs, or fields for one struct\", .retType=(uint)JSI_TT_ARRAY},",
          "1322:     {\"remove\",    CDataStructUndefineCmd,1, 1, \"name:string\",.help=\"Remove a struct\", .retType=0, .flags=0, .info=0, .opts=0},",
          "1323:     {\"schema\",    CDataStructSchemaCmd, 1, 1, \"\", .help=\"Return database schema for struct\", .retType=(uint)JSI_TT_STRING },",
          "1324:     { NULL,   0,0,0,0, .help=\"Struct commands. Note: Struct() is a shortcut for Struct.add()\" }",
          "1325: };",
          "1329: static Jsi_RC jsi_csGetKey(Jsi_Interp *interp, CDataObj *cd, Jsi_Value *arg, void **kPtr, size_t ksize, int anum)",
          "1330: {",
          "1331:     void *kBuf = *kPtr;",
          "1333:     if (!arg)",
          "1334:         return Jsi_LogError(\"missing key arg\");;",
          "1335:     Jsi_Number nval = 0;",
          "1336:     switch (cd->keyType) {",
          "1337:         case JSI_KEYS_STRING:",
          "1338:         case JSI_KEYS_STRINGKEY:",
          "1340:             if (!*kPtr)",
          "1341:                 return Jsi_LogError(\"arg %d: expected string key\", anum);",
          "1342:             break;",
          "1343:         case JSI_KEYS_ONEWORD:",
          "1344:             if (Jsi_ValueGetNumber(interp, arg, &nval) != JSI_OK)",
          "1345:                 return Jsi_LogError(\"arg %d: expected number key\", anum);",
          "1347:             break;",
          "1348:         default: {",
          "1349:             if (!cd->slKey) {",
          "1350: badkey:",
          "1351:                 return Jsi_LogError(\"arg %d: expected struct key\", anum);",
          "1352:             }",
          "1353:             if (arg->vt == JSI_VT_OBJECT && arg->d.obj->ot == JSI_OT_OBJECT) {",
          "1354:                 if (cd->slKey->size>ksize || !kBuf)",
          "1355:                     goto badkey;",
          "1356:                 memset(kBuf, 0, cd->slKey->size);",
          "1357:                 if (Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->keysf, kBuf, arg, NULL, 0) != JSI_OK)",
          "1358:                     return JSI_ERROR;",
          "1360:             } else",
          "1361:                 return Jsi_LogError(\"arg %d: expected object key\", anum);",
          "1362:         }",
          "1363:     }",
          "1364:     return JSI_OK;",
          "1365: }",
          "1367: #define FN_dataGetN JSI_INFO(\"If given a name argument, gets data for the named field. \\",
          "1368: Otherwise gets data for all fields in struct.\")",
          "1369: static Jsi_RC CDataGetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1370:                              Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1371: {",
          "1372:     UdcGet(cd, _this, funcPtr);",
          "1373:     uchar *dptr = NULL;",
          "1374:     Jsi_Value *karg = Jsi_ValueArrayIndex(interp, args, 0);",
          "1375:     char kbuf[BUFSIZ];",
          "1376:     void *key = kbuf;",
          "1377:     bool isNull = (!karg || Jsi_ValueIsNull(interp, karg));",
          "1378:     if (isNull) {",
          "1379:         if (cd->mapPtr || cd->arrSize>1)",
          "1380:             return Jsi_LogError(\"null key used with c-array/map\");",
          "1381:     } else {",
          "1382:         if (!cd->mapPtr && cd->arrSize<=0)",
          "1383:             return Jsi_LogError(\"must be array/map\");",
          "1384:         if (JSI_OK != jsi_csGetKey(interp, cd, karg, &key, sizeof(kbuf), 1))",
          "1385:         return JSI_ERROR;",
          "1386:     }",
          "1388:     dptr = (uchar*)cd->data;",
          "1389:     if (isNull) {",
          "1390:     } else if (cd->mapPtr) {",
          "1391:         Jsi_MapEntry *mPtr = Jsi_MapEntryFind(*cd->mapPtr, key);",
          "1392:         if (mPtr)",
          "1393:             dptr = (uchar*)Jsi_MapValueGet(mPtr);",
          "1394:         else",
          "1395:             return Jsi_LogError(\"arg 1: key not found [%s]\", Jsi_ValueToString(interp, karg, NULL));",
          "1396:     } /*else if (!cd->arrSize)",
          "1398:     else {",
          "1399:         uint kind = (intptr_t)key;",
          "1400:         if (kind>=cd->arrSize)",
          "1401:             return Jsi_LogError(\"array index out of bounds: %d not in 0,%d\", kind, cd->arrSize-1);",
          "1403:         dptr = ((uchar*)cd->data) + cd->sl->size*kind;",
          "1404:         if (cd->isPtrs)",
          "1405:             dptr = ((uchar*)cd->data) + sizeof(void*)*kind;",
          "1406:         else if (cd->isPtr2) {",
          "1407:             dptr = (uchar*)(*(void**)dptr);",
          "1408:             dptr += sizeof(void*)*kind;",
          "1409:         }",
          "1410:     }",
          "1411:     int argc = Jsi_ValueGetLength(interp, args);",
          "1412:     if (argc > 2)",
          "1413:         return Jsi_LogError(\"expected 0 - 2 args\");",
          "1414:     Jsi_Value *arg2 = Jsi_ValueArrayIndex(interp, args, 1);",
          "1415:     return Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->sf, dptr, arg2, ret, 0);",
          "1416: }",
          "1418: #define FN_dataSet JSI_INFO(\"Sets data value for given a name argument.\")",
          "1419: static Jsi_RC CDataSetCmd_(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1420:                              Jsi_Value **ret, Jsi_Func *funcPtr, int op)",
          "1421: {",
          "1422:     UdcGet(cd, _this, funcPtr);",
          "1423:     uchar *dptr = NULL;",
          "1424:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 0);",
          "1425:     char kbuf[BUFSIZ];",
          "1426:     void *key = kbuf;",
          "1427:     bool isNull = Jsi_ValueIsNull(interp, arg);",
          "1428:     if (isNull) {",
          "1429:         if (cd->mapPtr || cd->arrSize)",
          "1430:             return Jsi_LogError(\"null key used with c-array/map\");",
          "1431:     } else {",
          "1432:         if (!cd->mapPtr && cd->arrSize<=0)",
          "1433:             return Jsi_LogError(\"must be array/map\");",
          "1434:         if (JSI_OK != jsi_csGetKey(interp, cd, arg, &key, sizeof(kbuf), 1))",
          "1435:             return JSI_ERROR;",
          "1436:     }",
          "1438:     dptr = (uchar*)cd->data;",
          "1439:     if (isNull) {",
          "1440:     } else if (cd->mapPtr) {",
          "1441:         Jsi_MapEntry *mPtr = Jsi_MapEntryFind(*cd->mapPtr, key);",
          "1442:         if (mPtr)",
          "1443:             dptr = (uchar*)Jsi_MapValueGet(mPtr);",
          "1444:         else {",
          "1445:             bool isNew;",
          "1446:             if (cd->maxSize && Jsi_MapSize(*cd->mapPtr)>=cd->maxSize)",
          "1447:                 return Jsi_LogError(\"map would exceeded maxSize: %d\", cd->maxSize);",
          "1448:             if (!cd->noAuto)",
          "1449:                 mPtr = Jsi_MapEntryNew(*cd->mapPtr, key, &isNew);",
          "1450:             if (!mPtr)",
          "1451:                 return Jsi_LogError(\"arg 1: key not found [%s]\", Jsi_ValueToString(interp, arg, NULL));",
          "1452:             Jsi_StructSpec *sl = cd->sl;",
          "1453:             dptr = (uchar*)Jsi_Calloc(1, sl->size);",
          "1454:             Jsi_MapValueSet(mPtr, dptr);",
          "1455:             jsi_csStructInit(sl, dptr);",
          "1456:         }",
          "1457:     } else if (!cd->arrSize)",
          "1458:         return Jsi_LogError(\"expected a c-array or map\");",
          "1459:     else {",
          "1460:         uint kind = (uintptr_t)key;",
          "1461:         if (kind>=cd->arrSize)",
          "1462:             return Jsi_LogError(\"array index out of bounds: %d not in 0,%d\", kind, cd->arrSize-1);",
          "1463:         dptr = ((uchar*)cd->data) + cd->sl->size*kind;",
          "1464:         if (cd->isPtrs)",
          "1465:             dptr = ((uchar*)cd->data) + sizeof(void*)*kind;",
          "1466:         else if (cd->isPtr2)",
          "1467:             dptr = (uchar*)(*(void**)dptr) + sizeof(void*)*kind;",
          "1468:     }",
          "1469:     int argc = Jsi_ValueGetLength(interp, args);",
          "1470:     Jsi_Value *arg2 = Jsi_ValueArrayIndex(interp, args, 1);",
          "1471:     if (op == 2 && argc == 2) {",
          "1472:     } else if (argc == 2) {",
          "1473:         if (!Jsi_ValueIsObjType(interp, arg2, JSI_OT_OBJECT))",
          "1474:             return Jsi_LogError(\"arg 3: last must be an object with 3 args\");",
          "1475:         return Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->sf, dptr, arg2, ret, 0);",
          "1476:     } else if (argc != 3)",
          "1477:         return Jsi_LogError(\"expected 2 or 3 args\");",
          "1478:     const char *cp;",
          "1479:     if (!(cp = Jsi_ValueString(interp, arg2, NULL)))",
          "1480:         return Jsi_LogError(\"with 3 args, string expected for arg 2\");",
          "1481:     Jsi_Value *arg3 = Jsi_ValueArrayIndex(interp, args, 2);",
          "1482:     if (op == 2) {",
          "1483:         if (arg3) {",
          "1484:             if (!Jsi_ValueIsNumber(interp, arg3))",
          "1485:                 return Jsi_LogError(\"expected number\");",
          "1486:         } else {",
          "1487:             arg3 = Jsi_ValueNewNumber(interp, 1);",
          "1488:             Jsi_IncrRefCount(interp, arg3);",
          "1489:         }",
          "1490:     }",
          "1491:     Jsi_RC rc = Jsi_OptionsSet(interp, (Jsi_OptionSpec*)cd->sf, dptr, cp, arg3, (op==2?JSI_OPTS_INCR:0));",
          "1492:     if (op==2 && argc==2)",
          "1493:         Jsi_DecrRefCount(interp, arg3);",
          "1494:     if (op == 2 && rc == JSI_OK) {",
          "1495:         if (interp->typeCheck.strict && Jsi_NumberIsNaN(interp->cdataIncrVal))",
          "1496:             return Jsi_LogError(\"result is NaN\");",
          "1497:         Jsi_ValueMakeNumber(interp, ret, interp->cdataIncrVal);",
          "1498:     }",
          "1499:     return rc;",
          "1500: }",
          "1502: static Jsi_RC CDataSetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1503:                              Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1504:     return CDataSetCmd_(interp, args, _this, ret, funcPtr, 1);",
          "1505: }",
          "1507: static Jsi_RC CDataIncrCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1508:                              Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1509:     return CDataSetCmd_(interp, args, _this, ret, funcPtr, 2);",
          "1510: }",
          "1512: static Jsi_RC CDataInfoCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1513:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1514: {",
          "1515:     UdcGet(cd, _this, funcPtr);",
          "1516:     Jsi_StructSpec *sl = cd->sl;",
          "1517:     Jsi_DString dStr= {};",
          "1518:     const char *sptr = Jsi_DSPrintf(&dStr, \"{struct:\\\"%s\\\", label:\\\"%s\\\"}\", sl->name, cd->help?cd->help:\"\");",
          "1519:     Jsi_RC rc = JSI_ERROR;",
          "1520:     if (!sptr)",
          "1521:         return Jsi_LogError(\"format failed\");",
          "1522:     else",
          "1523:         rc = Jsi_JSONParse(interp, sptr, ret, 0);",
          "1524:     Jsi_DSFree(&dStr);",
          "1525:     if (rc != JSI_OK)",
          "1526:         return rc;",
          "1527:     Jsi_Obj *sobj;",
          "1528:     Jsi_Value *svalue;",
          "1529:     if (cd->sf) {",
          "1530:         sobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "1531:         svalue = Jsi_ValueMakeObject(interp, NULL, sobj);",
          "1532:         jsi_DumpOptionSpecs(interp, sobj,(Jsi_OptionSpec*) cd->sf);",
          "1533:         sobj = (*ret)->d.obj;",
          "1534:         Jsi_ObjInsert(interp, sobj, \"spec\", svalue, 0);",
          "1535:     }",
          "1536:     if (cd->slKey) {",
          "1537:         sobj = Jsi_ObjNewType(interp, JSI_OT_ARRAY);",
          "1538:         svalue = Jsi_ValueMakeObject(interp, NULL, sobj);",
          "1539:         jsi_DumpOptionSpecs(interp, sobj, (Jsi_OptionSpec*)cd->slKey);",
          "1540:         sobj = (*ret)->d.obj;",
          "1541:         Jsi_ObjInsert(interp, sobj, \"keySpec\", svalue, 0);",
          "1542:     }    return JSI_OK;",
          "1543: }",
          "1546: const char *csMapTypeStrs[] = { \"none\", \"hash\", \"tree\",  \"list\", NULL };",
          "1547: const char *csKeyTypeStrs[] = { \"string\", \"strkey\", \"number\",  NULL };",
          "1549: static Jsi_OptionSpec CDataOptions[] = {",
          "1550:     JSI_OPT(UINT,     CDataObj, arrSize, .help=\"If an array, its size in elements\", jsi_IIOF ),",
          "1551:     JSI_OPT(UINT,     CDataObj, flags,   .help=\"Flags\", jsi_IIOF|JSI_OPT_FMT_HEX ),",
          "1552:     JSI_OPT(STRKEY,   CDataObj, help,    .help=\"Description of data\", jsi_IIOF ),",
          "1553:     JSI_OPT(STRKEY,   CDataObj, keyName, .help=\"Key struct, for key struct maps\", jsi_IIOF ),",
          "1554:     JSI_OPT(CUSTOM,   CDataObj, keyType, .help=\"Key id\", jsi_IIOF|JSI_OPT_COERCE, .custom=Jsi_Opt_SwitchEnum, .data=csKeyTypeStrs),",
          "1555:     JSI_OPT(CUSTOM,   CDataObj, mapType, .help=\"If a map, its type\", jsi_IIOF, .custom=Jsi_Opt_SwitchEnum, .data=csMapTypeStrs),",
          "1556:     JSI_OPT(UINT,     CDataObj, maxSize, .help=\"Limit the array size or number of keys in a map\" ),",
          "1557:     JSI_OPT(STRKEY,   CDataObj, name,    .help=\"Name (eg. of var assigned to on create)\", jsi_IIOF ),",
          "1558:     JSI_OPT(BOOL,     CDataObj, noAuto,  .help=\"Disable auto-create of map keys in set/incr\"),",
          "1559:     JSI_OPT(STRKEY,   CDataObj, structName,  .help=\"Struct used for storing data\", jsi_IIOF|JSI_OPT_REQUIRED ),",
          "1560:     JSI_OPT(INT64,    CDataObj, user,    .help=\"User data\" ),",
          "1561:     JSI_OPT(STRKEY,   CDataObj, varParam,.help=\"Param for maps/array vars\", jsi_IIOF ),",
          "1562:     JSI_OPT_END(CDataObj, .help=\"Options for CData named\")",
          "1563: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1771:     return JSI_OK;",
          "1772: }",
          "1881: static Jsi_RC jsi_csTypeFree(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *ptr) {",
          "1882:     if (!ptr) return JSI_OK;",
          "",
          "[Removed Lines]",
          "1774: static Jsi_RC CDataConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1775:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1776: {",
          "1777:     UdcGet(cd, _this, funcPtr);",
          "1778:     return CDataOptionsConf(interp, CDataOptions, args, cd, ret, 0, 0);",
          "1779: }",
          "1781: static Jsi_RC CDataNamesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1782:     Jsi_Value **ret, Jsi_Func *funcPtr) {",
          "1783:     UdcGet(cd, _this, funcPtr);",
          "1784:     if (cd->mapType != JSI_MAP_NONE)",
          "1785:         return Jsi_MapKeysDump(interp, *cd->mapPtr, ret, 0);",
          "1786:     return Jsi_LogError(\"not a map\");;",
          "1787: }",
          "1789: static Jsi_RC CDataUnsetCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1790:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1791: {",
          "1792:     UdcGet(cd, _this, funcPtr);",
          "1793:     Jsi_Value *arg2 = Jsi_ValueArrayIndex(interp, args, 0);",
          "1794:     char kbuf[BUFSIZ];",
          "1795:     void *key = kbuf;",
          "1796:     if (!cd->mapPtr && cd->arrSize<=0)",
          "1797:         return Jsi_LogError(\"can not call unset on non map/array\");",
          "1798:     if (JSI_OK != jsi_csGetKey(interp, cd, arg2, &key, sizeof(kbuf), 2)) {",
          "1799:         return JSI_ERROR;",
          "1800:     }",
          "1801:     uchar *dptr = NULL;",
          "1802:     Jsi_MapEntry *mPtr = Jsi_MapEntryFind(*cd->mapPtr, key);",
          "1803:     if (mPtr)",
          "1804:         dptr = (uchar*)Jsi_MapValueGet(mPtr);",
          "1805:     if (!dptr) {",
          "1806:         if (cd->keyType != JSI_KEYS_ONEWORD)",
          "1807:             return Jsi_LogError(\"no data in map: %s\", (char*)key);",
          "1808:         else",
          "1809:             return Jsi_LogError(\"no data in map: %p\", key);",
          "1810:         return JSI_ERROR;",
          "1811:     }",
          "1812:     Jsi_Free(dptr);",
          "1813:     Jsi_MapEntryDelete(mPtr);",
          "1814:     return JSI_OK;",
          "1816: }",
          "1818: #define FN_cdataConstructor JSI_INFO(\"\\",
          "1819: The 2nd arg is used for function option parsing and will report errors at the callers file:line\")",
          "1820: static Jsi_RC CDataConstructor(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1821:     Jsi_Value **ret, Jsi_Func *funcPtr);",
          "1824: static Jsi_CmdSpec cdataCmds[] =",
          "1825: {",
          "1826:     {\"CData\",     CDataConstructor,1, 2, \"options:string|object=void, inits:object=undefined\",.help=\"Create a new struct or map/array of structs\", .retType=(uint)JSI_TT_USEROBJ, .flags=JSI_CMD_IS_CONSTRUCTOR, .info=FN_cdataConstructor, .opts=CDataOptions},",
          "1827:     {\"conf\",      CDataConfCmd,    0, 1, \"options:object|string=void\",.help=\"Configure options for c-data\", .retType=0, .flags=0, .info=0, .opts=CDataOptions},",
          "1828:     {\"get\"   ,    CDataGetCmd,     0, 2, \"key:string|number|object=null, field:string=void\", .help=\"Get struct/map/array value\", .retType=(uint)JSI_TT_ANY},",
          "1829:     {\"incr\",      CDataIncrCmd,    2, 3, \"key:string|number|object|null, field:object|string, value:number=1\", .help=\"Increment a numeric field: returns the new value\", .retType=(uint)JSI_TT_NUMBER},",
          "1830:     {\"info\",      CDataInfoCmd,    0, 0, \"\", .help=\"Return info for data\", .retType=(uint)JSI_TT_OBJECT},",
          "1831:     {\"names\",     CDataNamesCmd,   0, 0, \"\", .help=\"Return keys for map\", .retType=(uint)JSI_TT_ARRAY },",
          "1832:     {\"set\",       CDataSetCmd,     2, 3, \"key:string|number|object|null, field:object|string, value:any=void\", .help=\"Set a struct/map/array value\", .retType=(uint)JSI_TT_ANY},",
          "1833:     {\"unset\",     CDataUnsetCmd,   1, 1, \"key:string|number|object\", .help=\"Remove entry from map/array\", .retType=(uint)JSI_TT_ANY},",
          "1834:     {NULL}",
          "1835: };",
          "1838: static Jsi_OptionSpec TypeOptions[] = {",
          "1839:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, idName,  .help=\"The id name: usually upcased cName\", jsi_IIOF ),",
          "1840:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, cName,   .help=\"C type name\", jsi_IIOF ),",
          "1841:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, help,    .help=\"Description of id\", jsi_IIOF ),",
          "1842:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, fmt,     .help=\"Printf format for id\", jsi_IIOF ),",
          "1843:     JSI_OPT(STRKEY,   Jsi_OptionTypedef, xfmt,    .help=\"Hex printf format for id\", jsi_IIOF ),",
          "1844:     JSI_OPT(INT64,    Jsi_OptionTypedef, flags,   .help=\"Flags for id\", jsi_IIOF ),",
          "1845:     JSI_OPT(INT,      Jsi_OptionTypedef, size,    .help=\"Size for id\", jsi_IIOF ),",
          "1846:     JSI_OPT(INT64,    Jsi_OptionTypedef, user,    .help=\"User data\" ),",
          "1847:     JSI_OPT_END(Jsi_OptionTypedef, .help=\"Options for CData id\")",
          "1848: };",
          "1850: static Jsi_RC CDataTypeConfCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1851:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1852: {",
          "1854:     char *arg1 = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1855:     Jsi_OptionTypedef *nd = NULL;",
          "1856:     jsi_csInitType(interp);",
          "1857:     if (arg1)",
          "1858:         nd = (typeof(nd))Jsi_TypeLookup(interp, arg1);",
          "1859:     if (!nd)",
          "1860:         return Jsi_LogError(\"Unknown type: %s\", arg1);",
          "1861:     return CDataOptionsConf(interp, TypeOptions, args, nd, ret, 0, 1);",
          "1862: }",
          "1864: static Jsi_RC CDataTypeNamesCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1865:                               Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1866: {",
          "1868:     jsi_csInitType(interp);",
          "1869:     int argc = Jsi_ValueGetLength(interp, args);",
          "1870:     return Jsi_HashKeysDump(interp, (argc?interp->CTypeHash:interp->TYPEHash), ret, 0);",
          "1871: }",
          "1874: static Jsi_CmdSpec typeCmds[] =",
          "1875: {",
          "1876:     {\"conf\",      CDataTypeConfCmd,    1, 2, \"typ:string, options:object|string=void\",.help=\"Configure options for type\", .retType=0, .flags=0, .info=0, .opts=TypeOptions},",
          "1877:     {\"names\",     CDataTypeNamesCmd,   0, 1, \"ctype=false\", .help=\"Return type names\", .retType=(uint)JSI_TT_ARRAY},",
          "1878:     { NULL,   0,0,0,0, .help=\"Type commands. Note: Type() is a shortcut for Type.conf()\" }",
          "1879: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1888:     return JSI_OK;",
          "1889: }",
          "2128: static Jsi_RC jsi_DoneCData(Jsi_Interp *interp)",
          "2129: {",
          "2130:     if (!interp->SigHash) return JSI_OK;",
          "",
          "[Removed Lines]",
          "1891: static Jsi_RC jsi_csMapFree(Jsi_Interp *interp, Jsi_MapEntry *hPtr, void *ptr) {",
          "1892:     if (!ptr) return JSI_OK;",
          "1893:     Jsi_Free(ptr);",
          "1894:     return JSI_OK;",
          "1895: }",
          "1897: static Jsi_RC jsi_csObjFree(Jsi_Interp *interp, void *data)",
          "1898: {",
          "1899:     CDataObj *cd = (CDataObj *)data;",
          "1900:     cd->sl->value--;",
          "1901:     if (cd->slKey)",
          "1902:         cd->slKey->value--;",
          "1903:     if (cd->isAlloc) {",
          "1904:         if (cd->mapPtr && *cd->mapPtr) {",
          "1905:             Jsi_MapDelete(*cd->mapPtr);",
          "1907:         }",
          "1908:         else if (cd->data) Jsi_Free(cd->data);",
          "1909:     }",
          "1910:     Jsi_Free(cd);",
          "1911:     return JSI_OK;",
          "1912: }",
          "1914: static bool jsi_csObjIsTrue(void *data)",
          "1915: {",
          "1916:     CDataObj *fo = (CDataObj *)data;",
          "1917:     if (!fo->fobj) return JSI_OK;",
          "1918:     else return 1;",
          "1919: }",
          "1921: static bool jsi_csObjEqual(void *data1, void *data2)",
          "1922: {",
          "1923:     return (data1 == data2);",
          "1924: }",
          "1926: static Jsi_UserObjReg cdataobject = {",
          "1927:     \"CData\",",
          "1928:     cdataCmds,",
          "1929:     jsi_csObjFree,",
          "1930:     jsi_csObjIsTrue,",
          "1931:     jsi_csObjEqual",
          "1932: };",
          "1934: static Jsi_RC jsi_csNewCData(Jsi_Interp *interp, CDataObj *cd, int flags) {",
          "1936:     Jsi_StructSpec *slKey = NULL, *keySpec = NULL, *sf = cd->sf, *sl = cd->sl;",
          "1938:     if (!sf)",
          "1939:         cd->sf = sf = jsi_csStructFields(interp, cd->structName);",
          "1940:     if (!sl)",
          "1941:         sl = cd->sl = Jsi_CDataStruct(interp, cd->structName);",
          "1942:     if (!sf)",
          "1943:         return Jsi_LogError(\"missing struct/fields: %s\", cd->structName);",
          "1945:     if (cd->keyName) {",
          "1946:         slKey = keySpec = Jsi_CDataStruct(interp, cd->keyName);",
          "1947:         if (slKey == NULL)",
          "1948:             return Jsi_LogError(\"unknown key struct: %s\", cd->keyName);",
          "1949:     }",
          "1951:     const char *vparm = cd->varParam;",
          "1952:     if (vparm && vparm[0]) {",
          "1953:         char parm[200] = {}, *parms=parm, *ep;",
          "1954:         int plen = Jsi_Strlen(vparm);",
          "1955:         if (plen>=2 && vparm[0] == '[' && vparm[plen-1]==']') {",
          "1956:             snprintf(parm, sizeof(parm), \"%.*s\", plen-2, vparm+1);",
          "1957:             int sz = 0;",
          "1958:             if (parm[0] && isdigit(parm[0])) {",
          "1959:                 sz=strtoul(parm, &ep, 0);",
          "1960:                 if (*ep || sz<=0)",
          "1961:                     return Jsi_LogError(\"bad array size: %s\", vparm);",
          "1962:                 cd->arrSize = sz;",
          "1963:             } else {",
          "1964:                 Jsi_EnumSpec *ei = (typeof(ei))Jsi_HashGet(interp->EnumItemHash, parm, 0);",
          "1965:                 if (!ei || (sz=ei->value)<=0)",
          "1966:                     return Jsi_LogError(\"bad array enum: %s\", vparm);",
          "1967:             }",
          "1969:         } else if (plen>=2 && vparm[0] == '{' && vparm[plen-1]=='}') {",
          "1970:             snprintf(parm, sizeof(parm), \"%.*s\", plen-2, vparm+1);",
          "1971:             cd->mapType = JSI_MAP_TREE;",
          "1972:             if (parms[0]) {",
          "1973:                 const char *ktn = NULL;",
          "1974:                 if (*parms == '#') {",
          "1975:                      cd->mapType = JSI_MAP_HASH;",
          "1976:                      parms++;",
          "1977:                 }",
          "1978:                 if (*parms == '0') {",
          "1979:                     cd->keyType = JSI_KEYS_ONEWORD;",
          "1980:                     if (parms[1])",
          "1981:                         return Jsi_LogError(\"Trailing junk: %s\", vparm);",
          "1982:                 } else if (parms[0] == '@') {",
          "1983:                     slKey = Jsi_CDataStruct(interp, ktn=(parms+1));",
          "1984:                     if (!slKey)",
          "1985:                         return Jsi_LogError(\"unknown key struct: %s\", ktn);",
          "1986:                     cd->keyName = slKey->name;",
          "1987:                 } else if (parms[0])",
          "1988:                         return Jsi_LogError(\"Trailing junk: %s\", vparm);",
          "1989:             }",
          "1991:         } else",
          "1992:             return Jsi_LogError(\"expected either {} or []: %s\", vparm);",
          "1994:     }",
          "1995:     cd->sl->value++;",
          "1997:     if (cd->keyName) {",
          "1998:         cd->slKey = Jsi_CDataStruct(interp, cd->keyName);",
          "1999:         if (!cd->slKey)",
          "2000:             return Jsi_LogError(\"unknown key struct: %s\", cd->keyName);",
          "2001:         cd->keysf = jsi_csStructFields(interp, cd->keyName);",
          "2002:         cd->keyType = (Jsi_Key_Type)slKey->size;",
          "2003:         cd->slKey->value++;",
          "2004:     }",
          "2006:     if (cd->arrSize<=0 && cd->mapType != JSI_MAP_NONE) {",
          "2007:         if (interp->cdataNewVal && interp->cdataNewVal->data)",
          "2008:             cd->mapPtr = (Jsi_Map**)(interp->cdataNewVal->data);",
          "2009:         else",
          "2010:             cd->mapPtr = (Jsi_Map**)&cd->data;",
          "2011:         cd->isAlloc = 1;",
          "2013:         if (cd->slKey) {",
          "2014:             Jsi_MapOpts mo;",
          "2015:             Jsi_MapConf(*cd->mapPtr, &mo, 0);",
          "2016:             mo.fmtKeyProc = jsi_csFmtKeyCmd;",
          "2017:             mo.user = (void*)cd;",
          "2018:             Jsi_MapConf(*cd->mapPtr, &mo, 1);",
          "2019:         }",
          "2020:     } else {",
          "2021:         uint i, sz = (cd->arrSize<=0 ? 1 : cd->arrSize);",
          "2022:         cd->keyType = JSI_KEYS_ONEWORD;",
          "2023:         if (interp->cdataNewVal && interp->cdataNewVal->data)",
          "2024:             cd->data = interp->cdataNewVal->data;",
          "2025:         else {",
          "2026:             cd->isAlloc = 1;",
          "2027:             cd->data = (typeof(cd->data))Jsi_Calloc(sz, cd->sl->size);",
          "2028:         }",
          "2029:         for (i=0; i<sz; i++)",
          "2030:             jsi_csStructInit(sl, (((uchar*)cd->data) + i*cd->sl->size));",
          "2031:     }",
          "2033:     return JSI_OK;",
          "2034: }",
          "2036: static Jsi_RC CDataConstructor(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "2037:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "2038: {",
          "2039:     Jsi_Value *that = _this;",
          "2040:     Jsi_Obj *nobj;",
          "2042:     if (!Jsi_FunctionIsConstructor(funcPtr)) {",
          "2043:         Jsi_Obj *o = Jsi_ObjNew(interp);",
          "2044:         Jsi_PrototypeObjSet(interp, \"CData\", o);",
          "2045:         Jsi_ValueMakeObject(interp, ret, o);",
          "2046:         that = *ret;",
          "2047:     }",
          "2049:     CDataObj *cd = (typeof(cd))Jsi_Calloc(1,sizeof(*cd));",
          "2050:     cd->interp = interp;",
          "2051:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
          "2052:     Jsi_vtype vtyp = Jsi_ValueTypeGet(val);",
          "2053:     int vlen, isNew = 0;",
          "2054:     const char *vstr = Jsi_ValueString(interp, val, &vlen);",
          "2055:     Jsi_DString dStr = {};",
          "2056:     Jsi_Value *ival = Jsi_ValueArrayIndex(interp, args, 1);",
          "2057:     if (ival && Jsi_ValueIsUndef(interp, ival))",
          "2058:         ival = NULL;",
          "2059:     else if (ival && !Jsi_ValueIsObjType(interp, ival, JSI_OT_OBJECT))",
          "2060:         return Jsi_LogError(\"arg 2: expected object or undef\");",
          "2061:     if (vstr && vlen) {",
          "2062:         char ech = 0;",
          "2063:         const char *nstr = vstr, *cp = vstr;",
          "2064:         while (*cp && (isalnum(*cp) || *cp=='_')) cp++;",
          "2065:         if (*cp) {",
          "2066:             int slen = cp-vstr;",
          "2067:             Jsi_DString sStr = {};",
          "2068:             nstr = Jsi_DSAppendLen(&dStr, vstr, slen);",
          "2069:             if (*cp == '[')",
          "2070:                 ech = ']';",
          "2071:             else if (*cp == '{')",
          "2072:                 ech = '}';",
          "2073:             if (!ech || vstr[vlen-1] != ech) {",
          "2074:                 Jsi_LogError(\"malformed var form is not: STRUCT, STRUCT{...}, STRUCT[...]\");",
          "2075:                 goto errout;",
          "2076:             }",
          "2078:             cd->varParam = Jsi_KeyAdd(interp, Jsi_DSAppendLen(&sStr, cp, vlen-slen));",
          "2079:         }",
          "2080:         cd->structName = Jsi_KeyAdd(interp, nstr);",
          "2081:         val = NULL;",
          "2082:     } else if (vtyp != JSI_VT_OBJECT) {",
          "2083:         Jsi_LogError(\"expected string, object\");",
          "2084:         goto errout;",
          "2085:     }",
          "2086:     if (val && Jsi_OptionsProcess(interp, CDataOptions, cd, val, 0) < 0)",
          "2087:         goto errout;",
          "2089:     if (ival && (cd->mapPtr || cd->arrSize)) {",
          "2090:         Jsi_LogError(\"init can not be used with c-array/map\");",
          "2091:         goto errout;",
          "2092:      }",
          "2094:     if (JSI_OK != jsi_csNewCData(interp, cd, JSI_OPT_NO_SIG))",
          "2095:         goto errout;",
          "2097:     if (ival) {",
          "2098:         interp->callerErr = 1;",
          "2099:         Jsi_RC rc = Jsi_OptionsConf(interp, (Jsi_OptionSpec*)cd->sf, cd->data, ival, ret, 0);",
          "2100:         interp->callerErr = 0;",
          "2101:         if (rc != JSI_OK) {",
          "2102:             isNew = 1;",
          "2103:             goto errout;",
          "2104:         }",
          "2105:     }",
          "2107:     nobj = (Jsi_Obj*)Jsi_ValueGetObj(interp, that);",
          "2108:     cd->objId = Jsi_UserObjNew(interp, &cdataobject, nobj, cd);",
          "2109:     if (cd->objId<0) {",
          "2110:         goto errout;",
          "2111:     }",
          "2112:     cd->fobj = nobj;",
          "2113:     return JSI_OK;",
          "2115: errout:",
          "2116:     Jsi_DSFree(&dStr);",
          "2117:     Jsi_OptionsFree(interp, CDataOptions, cd, 0);",
          "2118:     if (isNew)",
          "2119:        jsi_csObjFree(interp, cd);",
          "2120:     else",
          "2121:         Jsi_Free(cd);",
          "2122:     return JSI_ERROR;",
          "2124: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2145:         return JSI_ERROR;",
          "2146: #endif",
          "2152:     interp->SigHash      = Jsi_HashNew(interp, JSI_KEYS_ONEWORD, NULL);",
          "2153:     interp->StructHash   = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "2154:     interp->EnumHash     = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "[Removed Lines]",
          "2148:     Jsi_Hash *fsys = Jsi_UserObjRegister(interp, &cdataobject);",
          "2149:     if (!fsys)",
          "2150:         return Jsi_LogBug(\"Can not init cdata\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2156:     interp->CTypeHash    = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_csTypeFree);",
          "2157:     interp->TYPEHash     = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "2165:         return JSI_ERROR;",
          "2166:     return JSI_OK;",
          "2167: }",
          "",
          "[Removed Lines]",
          "2159:     Jsi_CommandCreateSpecs(interp, cdataobject.name,  cdataCmds,  fsys, JSI_CMDSPEC_ISOBJ);",
          "2160:     Jsi_CommandCreateSpecs(interp, \"CEnum\",  enumCmds,   NULL, 0);",
          "2161:     Jsi_CommandCreateSpecs(interp, \"CStruct\",structCmds, NULL, 0);",
          "2162:     Jsi_CommandCreateSpecs(interp, \"CType\",  typeCmds,   NULL, 0);",
          "2164:     if (Jsi_PkgProvide(interp, cdataobject.name, 1, jsi_InitCData) != JSI_OK)",
          "",
          "[Added Lines]",
          "607:     if (Jsi_PkgProvide(interp, \"CData\", 1, jsi_InitCData) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2193:         jsi_csInitStructTables(interp);",
          "2194:         jsi_csInitEnum(interp);",
          "2195:         jsi_csInitEnumItem(interp);",
          "2197:     }",
          "2198:     return rc;",
          "2199: }",
          "",
          "[Removed Lines]",
          "2196:         rc = jsi_csInitVarDefs(interp);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     return Jsi_ObjInsert(interp, obj, key, nv, flags);",
          "520: }",
          "522: Jsi_Obj *Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count)",
          "523: {",
          "524:     Jsi_Obj *obj = Jsi_ObjNewType(interp, JSI_OT_OBJECT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522: Jsi_RC Jsi_ObjFreeze(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck) {",
          "523:     bool obnum = !obj->freezeNoModify;",
          "524:     obj->freeze = freeze;",
          "525:     obj->freezeNoModify = !modifyOk;",
          "526:     obj->freezeReadCheck = readCheck;",
          "527:     if (obnum != modifyOk)",
          "528:         jsi_ObjSetFlag(interp, obj, JSI_OM_ISFROZEN, !modifyOk);",
          "529:     return JSI_OK;",
          "530: }",
          "532: Jsi_Hash* Jsi_ObjAccessor(Jsi_Interp *interp, Jsi_Obj *obj, bool isSet, const char *name, Jsi_Value* callback) {",
          "533:     Jsi_Hash *h = NULL;",
          "534:     Jsi_HashEntry *hPtr;",
          "535:     if (isSet) {",
          "536:         if (!obj->setters && callback)",
          "537:             obj->setters = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_freeValueEntry);",
          "538:         h = obj->setters;",
          "539:     } else {",
          "540:         if (!obj->getters && callback)",
          "541:             obj->getters = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_freeValueEntry);",
          "542:         h = obj->getters;",
          "543:     }",
          "544:     if (callback) {",
          "545:         bool isNew;",
          "546:         hPtr = Jsi_HashEntryNew(h, name, &isNew);",
          "547:         if (!hPtr || !isNew)",
          "548:             Jsi_LogWarn(\"ignoring duplicate object %s for %s\", isSet?\"set\":\"get\", name);",
          "549:         else {",
          "550:             Jsi_HashValueSet(hPtr, callback);",
          "551:             Jsi_IncrRefCount(interp, callback);",
          "552:         }",
          "553:     } else if (h && name) {",
          "554:         hPtr = Jsi_HashEntryFind(h, name);",
          "555:         if (!hPtr)",
          "556:             Jsi_LogWarn(\"%s accessor not found for %s\", isSet?\"set\":\"get\", name);",
          "557:         else {",
          "558:             callback = Jsi_HashValueGet(hPtr);",
          "559:             if (callback)",
          "560:                 Jsi_DecrRefCount(interp, callback);",
          "561:             Jsi_HashEntryDelete(hPtr);",
          "562:         }",
          "563:     }",
          "564:     return h;",
          "565: }",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:     obj->freeze = fnum;",
          "399:     obj->freezeNoModify = !bnum;",
          "400:     obj->freezeReadCheck = rnum;",
          "402:         jsi_ObjSetFlag(interp, obj, JSI_OM_ISFROZEN, !bnum);",
          "404:     return JSI_OK;",
          "406: }",
          "",
          "[Removed Lines]",
          "401:     if (obnum != bnum) {",
          "403:     }",
          "",
          "[Added Lines]",
          "401:     if (obnum != bnum)",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"f021be68c79822a0a51be41bcdcd230e\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"620a82a5186f41bf96d7127b57b6d310\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:     Jsi_RC(*_Jsi_ObjGetValues)(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *val);",
          "452:     Jsi_PkgOpts*(*_Jsi_CommandPkgOpts)(Jsi_Interp *interp, Jsi_Func *func);",
          "453:     Jsi_Interp*(*_Jsi_InterpMain)(int argc, char **argv, Jsi_InitProc* initProc);",
          "454:     void *endPtr;",
          "455: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     Jsi_RC(*_Jsi_ObjFreeze)(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck);",
          "455:     Jsi_Hash*(*_Jsi_ObjAccessor)(Jsi_Interp *interp, Jsi_Obj *obj, bool isSet, const char *name, Jsi_Value* callback);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "881:     Jsi_ObjGetValues,\\",
          "882:     Jsi_CommandPkgOpts,\\",
          "883:     Jsi_InterpMain,\\",
          "884:     NULL",
          "886: #ifdef JSI_USE_STUBS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "886:     Jsi_ObjFreeze,\\",
          "887:     Jsi_ObjAccessor,\\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1307: #define Jsi_ObjGetValues(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjGetValues(n0,n1,n2))",
          "1308: #define Jsi_CommandPkgOpts(n0,n1) JSISTUBCALL(jsiStubsPtr, _Jsi_CommandPkgOpts(n0,n1))",
          "1309: #define Jsi_InterpMain(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_InterpMain(n0,n1,n2))",
          "1311: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1314: #define Jsi_ObjFreeze(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjFreeze(n0,n1,n2,n3,n4))",
          "1315: #define Jsi_ObjAccessor(n0,n1,n2,n3,n4) JSISTUBCALL(jsiStubsPtr, _Jsi_ObjAccessor(n0,n1,n2,n3,n4))",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1007:     }",
          "1010:     if (obj && value && target->d.obj->freeze) {",
          "1011:         Jsi_Obj *obj = target->d.obj;",
          "1012:         Jsi_Value *v;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:     if (!kstr)",
          "1011:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1012:     if (obj && obj->setters) {",
          "1013:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1014:         if (v) {",
          "1015:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1016:             vargs[0] = value;",
          "1017:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1018:             Jsi_IncrRefCount(interp, value);",
          "1019:             Jsi_IncrRefCount(interp, vpargs);",
          "1020:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1021:             Jsi_DecrRefCount(interp, vpargs);",
          "1022:             Jsi_DecrRefCount(interp, value);",
          "1023:             Jsi_DecrRefCount(interp, retStr);",
          "1024:             if (rc != JSI_OK || flag&JSI_OM_DONTENUM)",
          "1025:                 return NULL;",
          "1026:             return keyval;// TODO, should not return this!!!",
          "1027:         }",
          "1029:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028:         target->vt == JSI_VT_OBJECT && target->d.obj->arr) {",
          "1029:         return jsi_ObjArraySetDup(interp, target->d.obj, value, arrayindex);",
          "1030:     }",
          "1052: #if (defined(JSI_HAS___PROTO__) && JSI_HAS___PROTO__==2)",
          "1053:     if (Jsi_Strcmp(kstr, \"__proto__\")==0) {",
          "",
          "[Removed Lines]",
          "1031:     if (!kstr)",
          "1032:         kstr = Jsi_ValueToString(interp, keyval, NULL);",
          "1033:     if (obj && obj->setters) {",
          "1034:         Jsi_Value *v = (Jsi_Value*)Jsi_HashGet(obj->setters, kstr, 0);",
          "1035:         if (v) {",
          "1036:             Jsi_Value *vpargs, *vargs[2], *retStr = Jsi_ValueNew1(interp);",
          "1037:             vargs[0] = value;",
          "1038:             vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, 1, 0));",
          "1039:             Jsi_IncrRefCount(interp, value);",
          "1040:             Jsi_IncrRefCount(interp, vpargs);",
          "1041:             Jsi_RC rc = Jsi_FunctionInvoke(interp, v, vpargs, &retStr, NULL);",
          "1042:             Jsi_DecrRefCount(interp, vpargs);",
          "1043:             Jsi_DecrRefCount(interp, value);",
          "1044:             Jsi_DecrRefCount(interp, retStr);",
          "1045:             if (rc != JSI_OK || flag&JSI_OM_DONTENUM)",
          "1046:                 return NULL;",
          "1047:             return keyval;// TODO, should not return this!!!",
          "1048:         }",
          "1050:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: Array.prototype.splice = function(start:number, howmany:number=void, ...):array {};",
          "30: Array.prototype.unshift = function(...):number {};",
          "31: var Boolean = function(cmd,args) {};",
          "60: var Channel = function(cmd,args) {};",
          "61: Channel.prototype.close = function():boolean {};",
          "62: Channel.prototype.eof = function():boolean {};",
          "",
          "[Removed Lines]",
          "32: var CData = function(cmd,args) {};",
          "33: CData.prototype.conf = function(options:object|string=void):any {};",
          "34: CData.prototype.get = function(key:string|number|object=null, field:string=void):any {};",
          "35: CData.prototype.incr = function(key:string|number|object|null, field:object|string, value:number=1):number {};",
          "36: CData.prototype.info = function():object {};",
          "37: CData.prototype.names = function():array {};",
          "38: CData.prototype.set = function(key:string|number|object|null, field:object|string, value:any=void):any {};",
          "39: CData.prototype.unset = function(key:string|number|object):any {};",
          "40: var CEnum = function(cmd,args) {};",
          "41: CEnum.prototype.add = function(options:object|string, fields:array|string):any {};",
          "42: CEnum.prototype.conf = function(enum:string, options:object|string=void):any {};",
          "43: CEnum.prototype.fieldconf = function(enum:string, field:string, options:object|string=void):any {};",
          "44: CEnum.prototype.find = function(enum:string, intValue:number):string {};",
          "45: CEnum.prototype.get = function(enum:string):object {};",
          "46: CEnum.prototype.names = function(enum:string=void):array {};",
          "47: CEnum.prototype.remove = function(enum:string):any {};",
          "48: CEnum.prototype.value = function(enum:string, item:string):number {};",
          "49: var CStruct = function(cmd,args) {};",
          "50: CStruct.prototype.add = function(options:object|string, fields:array|string):any {};",
          "51: CStruct.prototype.conf = function(struct:string, options:object|string=void):any {};",
          "52: CStruct.prototype.fieldconf = function(struct:string, field:string, options:object|string=void):any {};",
          "53: CStruct.prototype.get = function(struct, options:object=void):object {};",
          "54: CStruct.prototype.names = function(struct:string=void):array {};",
          "55: CStruct.prototype.remove = function(name:string):any {};",
          "56: CStruct.prototype.schema = function():string {};",
          "57: var CType = function(cmd,args) {};",
          "58: CType.prototype.conf = function(typ:string, options:object|string=void):any {};",
          "59: CType.prototype.names = function(ctype=false):array {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: |Boolean|(bool:boolean=false):boolean |Boolean constructor.|",
          "220: ## Channel",
          "",
          "[Removed Lines]",
          "64: ## CData",
          "69: ### Methods",
          "70: |Method|Function Argument Types|Description|",
          "71: |---|---|---|",
          "72: |CData|([options](#options-newcdata):string&#124;object=void, inits:object=undefined):userobj |Create a new struct or map/array of structs.The 2nd arg is used for function option parsing and will report errors at the callers file:line|",
          "73: |conf|([options](#options-cdataconf):object&#124;string=void) |Configure options for c-data.|",
          "74: |get|(key:string&#124;number&#124;object=null, field:string=void) |Get struct/map/array value.|",
          "75: |incr|(key:string&#124;number&#124;object&#124;null, field:object&#124;string, value:number=1):number |Increment a numeric field: returns the new value.|",
          "76: |info|():object |Return info for data.|",
          "77: |names|():array |Return keys for map.|",
          "78: |set|(key:string&#124;number&#124;object&#124;null, field:object&#124;string, value:any=void) |Set a struct/map/array value.|",
          "79: |unset|(key:string&#124;number&#124;object) |Remove entry from map/array.|",
          "80: ### Options \"new\"",
          "81: |Option|Type|Description|Flags|",
          "82: |---|---|---|---|",
          "83: |arrSize|*UINT*|If an array, its size in elements.|initOnly|",
          "84: |flags|*UINT*|Flags.|initOnly|",
          "85: |help|*STRKEY*|Description of data.|initOnly|",
          "86: |keyName|*STRKEY*|Key struct, for key struct maps.|initOnly|",
          "87: |keyType|*STRKEY*|Key id. (one of: **string**, **strkey**, **number**)|initOnly|",
          "88: |mapType|*STRKEY*|If a map, its type. (one of: **none**, **hash**, **tree**, **list**)|initOnly|",
          "89: |maxSize|*UINT*|Limit the array size or number of keys in a map.||",
          "90: |name|*STRKEY*|Name (eg. of var assigned to on create).|initOnly|",
          "91: |noAuto|*BOOL*|Disable auto-create of map keys in set/incr.||",
          "92: |structName|*STRKEY*|Struct used for storing data.|initOnly&#124;required|",
          "93: |user|*INT64*|User data.||",
          "94: |varParam|*STRKEY*|Param for maps/array vars.|initOnly|",
          "97: ## CEnum",
          "101: Enum commands. Note: Enum() is a shortcut for Enum.add().",
          "104: ### Methods",
          "105: |Method|Function Argument Types|Description|",
          "106: |---|---|---|",
          "107: |add|([options](#options-cenumadd):object&#124;string, fields:array&#124;string) |Create a new enum: value of items same as in fieldconf.|",
          "108: |conf|([options](#options-cenumconf):object&#124;string=void) |Configure options for enum.|",
          "109: |fieldconf|([options](#options-cenumfieldconf):object&#124;string=void) |Configure options for fields.|",
          "110: |find|(enum:string, intValue:number):string |Find item with given value in enum.|",
          "111: |get|(enum:string):object |Return enum definition.|",
          "112: |names|(enum:string=void):array |Return name list of all enums, or items within one enum.|",
          "113: |remove|(enum:string) |Remove an enum.|",
          "114: |value|(enum:string, item:string):number |Return value for given enum item.|",
          "115: ### Options \"CEnum.add\"",
          "116: |Option|Type|Description|Flags|",
          "117: |---|---|---|---|",
          "118: |flags|*INT64*|Flags for enum.|initOnly|",
          "119: |help|*STRKEY*|Description of enum.|initOnly|",
          "120: |name|*STRKEY*|Name of enum.|initOnly|",
          "121: |idx|*UINT*|Number of items in enum.|readOnly|",
          "122: ### Options \"CEnum.conf\"",
          "123: |Option|Type|Description|Flags|",
          "124: |---|---|---|---|",
          "125: |flags|*INT64*|Flags for enum.|initOnly|",
          "126: |help|*STRKEY*|Description of enum.|initOnly|",
          "127: |name|*STRKEY*|Name of enum.|initOnly|",
          "128: |idx|*UINT*|Number of items in enum.|readOnly|",
          "129: ### Options \"CEnum.fieldconf\"",
          "130: |Option|Type|Description|Flags|",
          "131: |---|---|---|---|",
          "132: |flags|*INT64*|Flags for item.|initOnly|",
          "133: |help|*STRKEY*|Desciption of item.|initOnly|",
          "134: |name|*STRKEY*|Name of item.|initOnly|",
          "135: |value|*INT64*|Value for item.|initOnly|",
          "136: |idx|*UINT*|Index of item in enum.|readOnly|",
          "139: ## CStruct",
          "143: Struct commands. Note: Struct() is a shortcut for Struct.add().",
          "146: ### Methods",
          "147: |Method|Function Argument Types|Description|",
          "148: |---|---|---|",
          "149: |add|([options](#options-cstructadd):object&#124;string, fields:array&#124;string) |Create a struct: field values same as in fieldconf.|",
          "150: |conf|([options](#options-cstructconf):object&#124;string=void) |Configure options for struct.|",
          "151: |fieldconf|([options](#options-cstructfieldconf):object&#124;string=void) |Configure options for fields.|",
          "152: |get|(struct, options:object=void):object |Return the struct definition.|",
          "153: |names|(struct:string=void):array |Return name list of all structs, or fields for one struct.|",
          "154: |remove|(name:string) |Remove a struct.|",
          "155: |schema|():string |Return database schema for struct.|",
          "156: ### Options \"CStruct.add\"",
          "157: |Option|Type|Description|Flags|",
          "158: |---|---|---|---|",
          "159: |crc|*UINT32*|Crc for struct.|initOnly|",
          "160: |flags|*INT64*|Flags for struct.|initOnly|",
          "161: |help|*STRKEY*|Struct description.|initOnly|",
          "162: |idx|*UINT32*|Number of fields in struct.|readOnly|",
          "163: |name|*STRKEY*|Name of struct.|initOnly&#124;required|",
          "164: |size|*UINT*|Size of struct in bytes.|readOnly|",
          "165: |ssig|*UINT32*|Signature for struct.|initOnly|",
          "166: |value|*INT64*|Reference count.|readOnly|",
          "167: ### Options \"CStruct.conf\"",
          "168: |Option|Type|Description|Flags|",
          "169: |---|---|---|---|",
          "170: |crc|*UINT32*|Crc for struct.|initOnly|",
          "171: |flags|*INT64*|Flags for struct.|initOnly|",
          "172: |help|*STRKEY*|Struct description.|initOnly|",
          "173: |idx|*UINT32*|Number of fields in struct.|readOnly|",
          "174: |name|*STRKEY*|Name of struct.|initOnly&#124;required|",
          "175: |size|*UINT*|Size of struct in bytes.|readOnly|",
          "176: |ssig|*UINT32*|Signature for struct.|initOnly|",
          "177: |value|*INT64*|Reference count.|readOnly|",
          "178: ### Options \"CStruct.fieldconf\"",
          "179: |Option|Type|Description|Flags|",
          "180: |---|---|---|---|",
          "181: |arrSize|*UINT*|Size of field if an array.|initOnly|",
          "182: |bits|*UINT32*|Size of bitfield.|initOnly|",
          "183: |boffset|*UINT32*|Bit offset of field within struct.|readOnly|",
          "184: |flags|*INT64*|Flags for field.|initOnly|",
          "185: |idx|*UINT32*|Index of field in struct.|readOnly|",
          "186: |help|*STRKEY*|Field description.|initOnly|",
          "187: |info|*STRKEY*|Info for field.|initOnly|",
          "188: |name|*STRKEY*|Name of field.|initOnly&#124;required|",
          "189: |offset|*UINT*|Offset of field within struct.|readOnly|",
          "190: |size|*UINT*|Size of field in struct.|readOnly|",
          "191: |type|*CUSTOM*|Type of field.|initOnly&#124;required|",
          "192: |init|*CUSTOM*|Initial value for field.|initOnly|",
          "195: ## CType",
          "199: Type commands. Note: Type() is a shortcut for Type.conf().",
          "202: ### Methods",
          "203: |Method|Function Argument Types|Description|",
          "204: |---|---|---|",
          "205: |conf|([options](#options-ctypeconf):object&#124;string=void) |Configure options for type.|",
          "206: |names|(ctype=false):array |Return type names.|",
          "207: ### Options \"CType.conf\"",
          "208: |Option|Type|Description|Flags|",
          "209: |---|---|---|---|",
          "210: |idName|*STRKEY*|The id name: usually upcased cName.|initOnly|",
          "211: |cName|*STRKEY*|C type name.|initOnly|",
          "212: |help|*STRKEY*|Description of id.|initOnly|",
          "213: |fmt|*STRKEY*|Printf format for id.|initOnly|",
          "214: |xfmt|*STRKEY*|Hex printf format for id.|initOnly|",
          "215: |flags|*INT64*|Flags for id.|initOnly|",
          "216: |size|*INT*|Size for id.|initOnly|",
          "217: |user|*INT64*|User data.||",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56677efa0cba8467ff0082ee409e71dacf3fc13c",
      "candidate_info": {
        "commit_hash": "56677efa0cba8467ff0082ee409e71dacf3fc13c",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/56677efa0cba8467ff0082ee409e71dacf3fc13c",
        "files": [
          "lib/Htmlpp.jsi",
          "lib/Websrv.jsi",
          "lib/autoload.jsi",
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiSqlite.c",
          "src/jsiValue.c",
          "src/parser.y",
          "tools/protos.jsi",
          "tools/testsys.sh"
        ],
        "message": "Release \"3.4.3\": add check for duplicates in objects\n\nFossilOrigin-Name: 9e70b043b48f51f13e250b6285eb4cf979820040f07705ff6f89d0589bfaca4d",
        "before_after_code_files": [
          "lib/Htmlpp.jsi||lib/Htmlpp.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi",
          "tools/testsys.sh||tools/testsys.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "tools/protos.jsi||tools/protos.jsi"
          ]
        }
      },
      "candidate_diff": {
        "lib/Htmlpp.jsi||lib/Htmlpp.jsi": [
          "File: lib/Htmlpp.jsi -> lib/Htmlpp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     var self = {",
          "26:         package:\"Htmlpp\",",
          "27:         intOpts:{},",
          "29:         jsifiles:[], cssfiles:[], mdfiles:[],",
          "30:         Trace       :false,",
          "31:     };",
          "",
          "[Removed Lines]",
          "28:         rc:'', files:[], files:[], chpos:0, rootdir:'', curdir:'', data:'', errs:'', dir:'',",
          "",
          "[Added Lines]",
          "28:         rc:'', files:[], chpos:0, rootdir:'', curdir:'', data:'', errs:'', dir:'',",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 all .js scripts within dir and below, then exit.",
          "",
          "[Added Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 .js scripts in file or dir and below, then exit.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "408:         for (i of lst) {",
          "409:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "410:             delete int;",
          "",
          "[Removed Lines]",
          "405:         if (!File.isdir(d))",
          "406:             throw 'not a directory: '+d;",
          "407:         var i, lst = File.glob('*.js', {dir:d, recurse:true});",
          "",
          "[Added Lines]",
          "405:         var i, lst;",
          "406:         if (File.isdir(d))",
          "407:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "408:         else",
          "409:             lst = [d];",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: Jsi_Auto.MySql          = 'require(\"MySql\");';",
          "34: Jsi_Auto.WebSocket      = 'require(\"WebSocket\");';",
          "35: Jsi_Auto.Socket         = 'require(\"Socket\");';",
          "38: source(Info.scriptDir()+'/user/autoload.jsi', {exists:true, once:true});",
          "",
          "[Removed Lines]",
          "36: Jsi_Auto.DebugUI        = 'require(\"DebugUI\");';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:     },",
          "500:     htmladd: function(str) { output(str) },",
          "503:         var f=document.createElement('script');",
          "504:         f.setAttribute(\"type\",\"text/javascript\");",
          "505:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "502:     inc: function(fn, onload, onerror) { $jsig('fn:string, success:function, error:function', arguments)();",
          "",
          "[Added Lines]",
          "502:     inc: function(fn, onload, onerror) {",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4708:     return \"\";",
          "4709: }",
          "4711: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4712:     Jsi_Value **ret, Jsi_Func *funcPtr, bool parse)",
          "4713: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4711: bool jsi_isDebugKey(const char *key) {",
          "4712:     return (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"));",
          "4713: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4833:                 break;",
          "4834:             }",
          "4835:             Jsi_vtype oTyp, vTyp = jsi_getValType(val);",
          "4837:                 oTyp = JSI_VT_BOOL; // Accept these as builtin options.",
          "4838:                 oVal = NULL;",
          "4839:             } else if (!v2) {",
          "",
          "[Removed Lines]",
          "4836:             if (!parse && (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"))) {",
          "",
          "[Added Lines]",
          "4840:             if (!parse && jsi_isDebugKey(key)) {",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     jsiOpCodesCnt[2]-=2;",
          "187:     return ret;",
          "188: }",
          "190: static Jsi_OpCodes *codes_join3(Jsi_OpCodes *a, Jsi_OpCodes *b, Jsi_OpCodes *c)",
          "191: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: static Jsi_OpCodes *codes_join_item(Jsi_OpCodes *a, Jsi_OpCodes *b)",
          "190: {",
          "191:     if (a->code_len == 1 && a->codes[0].op == OP_PUSHSTR &&",
          "192:         b->code_len>1)",
          "193:         b->codes[0].itemLen = b->code_len;",
          "194:     return codes_join(a,b);",
          "195: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330: static Jsi_OpCodes *code_jfalse_np(int off) { JSI_NEW_CODES(0,OP_JFALSE_NP, off); }",
          "331: static Jsi_OpCodes *code_jtrue_np(int off) { JSI_NEW_CODES(0,OP_JTRUE_NP, off); }",
          "332: static Jsi_OpCodes *code_jmp(int off) { JSI_NEW_CODES(0,OP_JMP, off); }",
          "334: static Jsi_OpCodes *code_array(jsi_Pstate *p, jsi_Pline *line, int c) { JSI_NEW_CODESLN(0,OP_ARRAY, c); }",
          "335: static Jsi_OpCodes *code_key() { JSI_NEW_CODES(0,OP_KEY, 0); }",
          "336: static Jsi_OpCodes *code_next() { JSI_NEW_CODES(0,OP_NEXT, 0); }",
          "",
          "[Removed Lines]",
          "333: static Jsi_OpCodes *code_object(jsi_Pstate *p, jsi_Pline *line, int c) { JSI_NEW_CODESLN(0,OP_OBJECT, c); }",
          "",
          "[Added Lines]",
          "340: static Jsi_OpCodes *code_object(jsi_Pstate *p, jsi_Pline *line, Jsi_OpCodes* cv) {",
          "341:     int c = cv->expr_counter, nested = (c*2 != cv->code_len);",
          "342:     Jsi_Interp *interp = p->interp;",
          "343:     if (c>0 && interp->noEval) {",
          "344:         int i, n;",
          "345:         bool isNew;",
          "346:         const char *cp;",
          "347:         Jsi_Hash *h = Jsi_HashNew(interp, JSI_KEYS_STRINGKEY, NULL);",
          "348:         for (i=0, n=0; i<c; i++, n+=2) {",
          "349:             if (cv->codes[n].op == OP_PUSHSTR && !cv->codes[n].setget",
          "350:                 && Jsi_HashEntryNew(h, cp=(char*)cv->codes[n].data, &isNew) && !isNew) {",
          "351:                 Jsi_LogWarn(\"duplicate key: %s\", cp);",
          "352:             }",
          "353:             if (nested && cv->codes[n+1].itemLen)",
          "354:                 n += cv->codes[n+1].itemLen-1;",
          "355:         }",
          "356:         Jsi_HashDelete(h);",
          "357:     }",
          "358:     JSI_NEW_CODESLN(0, OP_OBJECT, c);",
          "359: }",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:         Jsi_ValueMakeUndef(interp, &src);",
          "993:         if (obj && obj->freeze && obj->freezeReadCheck) {",
          "994:             const char *keyStr = Jsi_ValueToString(interp, idx, NULL);",
          "996:         }",
          "997:     }",
          "998:     else {",
          "",
          "[Removed Lines]",
          "995:             rc = Jsi_LogError(\"object freeze: read undefined \\\"%s\\\"\", keyStr);",
          "",
          "[Added Lines]",
          "995:             if (!jsi_isDebugKey(keyStr))",
          "996:                 rc = Jsi_LogError(\"object freeze: read undefined \\\"%s\\\"\", keyStr);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "439: typedef struct jsi_OpCode {",
          "440:     jsi_Eopcode op;",
          "442:     unsigned int Line:16;",
          "443:     unsigned int Lofs:7;",
          "444:     unsigned int  readonly:1;",
          "",
          "[Removed Lines]",
          "441:     void *data;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448:     unsigned char isof:1;",
          "449:     unsigned char local:1;",
          "450:     unsigned char logidx:3;",
          "451:     jsi_FileInfo* filePtr;",
          "452: } jsi_OpCode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:     unsigned char setget:1;",
          "451:     unsigned int itemLen:24;",
          "452:     void *data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     bool full;    // Show full file path.",
          "1014:     bool ftail;   // Show tail of file only, even in LogWarn, etc.",
          "1015:     bool func;    // Ouput function at end.",
          "1022:     bool time;    // Prefix with time",
          "1023:     bool date;    // Prefix with date",
          "1024:     bool before;  // Print file:line before message instead of at end.",
          "",
          "[Removed Lines]",
          "1017:     bool Trace;",
          "1018:     bool Test;",
          "1019:     bool Info;",
          "1020:     bool Warn;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1506: extern Jsi_RC jsi_ObjSetFlag(Jsi_Interp *interp, Jsi_Obj *obj, int flag, int on);",
          "1507: extern Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, Jsi_Value *_this, int flags);",
          "1508: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags);",
          "1510: #if !defined(_JSI_MEMCLEAR) && defined(JSI_MEM_DEBUG)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1505: extern bool jsi_isDebugKey(const char *key);",
          "1506: extern Jsi_TreeEntry *jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey, bool unique);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     return v;",
          "21: }",
          "24:     Jsi_Tree *treePtr = obj->tree;",
          "25:     bool isNew;",
          "26:     Jsi_TreeEntry *hPtr;",
          "",
          "[Removed Lines]",
          "23: Jsi_TreeEntry *Jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey) {",
          "",
          "[Added Lines]",
          "23: Jsi_TreeEntry *jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey, bool unique) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     hPtr = Jsi_TreeEntryNew(treePtr, key, &isNew);",
          "39:     if (!hPtr)",
          "40:         return NULL;",
          "41:     if (val)",
          "42:         SIGASSERT(val,VALUE);",
          "43:     if (!isNew)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     if (unique && !isNew)",
          "42:         Jsi_LogWarn(\"add duplicate key: %s\", key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     return hPtr;",
          "63: }",
          "67: bool Jsi_ObjIsArray(Jsi_Interp *interp, Jsi_Obj *o)  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: Jsi_TreeEntry *Jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey) {",
          "68:     return jsi_TreeObjSetValue(obj, key, val, isstrkey, 0);",
          "69: }",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:     JSI_OPT(INT,    Jsi_Db, timeout,    .help=\"Amount of time to wait when file is locked, in ms\"),",
          "364:     JSI_OPT(OBJ,    Jsi_Db, udata,      .help=\"User data\" ),",
          "365:     JSI_OPT(OBJ,    Jsi_Db, version,    .help=\"Sqlite version info\", jsi_IIRO),",
          "367:     JSI_OPT(STRING, Jsi_Db, vfs,        .help=\"VFS to use\", jsi_IIOF),",
          "368:     JSI_OPT_END(Jsi_Db, .help=\"Options for source command\")",
          "369: };",
          "",
          "[Removed Lines]",
          "366:     JSI_OPT(INT,    Jsi_Db, timeout,    .help=\"Amount of time to wait when file is locked, in ms\"),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:     return rc;",
          "1400: }",
          "1403: {",
          "1404:     Jsi_TreeEntry *hPtr;",
          "1405:     SIGASSERT(val, VALUE);",
          "",
          "[Removed Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags)",
          "",
          "[Added Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1420:     if (val->vt == JSI_VT_OBJECT)",
          "1421:         jsi_ObjInsertObjCheck(interp, obj, val, 1);",
          "1423:     if ((flags&JSI_OM_DONTDEL))",
          "1424:         val->f.bits.dontdel = hPtr->f.bits.dontdel = 1;",
          "1425:     if ((flags&JSI_OM_READONLY))",
          "",
          "[Removed Lines]",
          "1422:     hPtr = Jsi_TreeObjSetValue(obj, key, val, 0);",
          "",
          "[Added Lines]",
          "1422:     hPtr = jsi_TreeObjSetValue(obj, key, val, 0, unique);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1435:     if (target->vt != JSI_VT_OBJECT)",
          "1436:         return Jsi_LogError(\"Target is not object\");",
          "1437:     target->f.flag |= flags;",
          "1439: }",
          "1441: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "1442: {",
          "1444: }",
          "1446: static Jsi_RC IterGetKeysCallback(Jsi_Tree* tree, Jsi_TreeEntry *hPtr, void *data)",
          "",
          "[Removed Lines]",
          "1438:     return jsi_ObjValInsert(interp, target->d.obj, key, val, target, flags);",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags);",
          "",
          "[Added Lines]",
          "1438:     return jsi_ObjValInsert(interp, target->d.obj, key, val, target, flags, 0);",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 1);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "839: ;",
          "841: object:",
          "843: ;",
          "845: itemfunc:",
          "",
          "[Removed Lines]",
          "842:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, ($2)->expr_counter)); }",
          "",
          "[Added Lines]",
          "842:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, $2)); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "848:         lval->lvalue_flag = 1;",
          "849:         lval->lvalue_name = $1;",
          "850:         code_es6(pstate, \"object shorthand func\");",
          "852:         jsi_PstatePop(pstate);",
          "853:     }",
          "854: ;",
          "",
          "[Removed Lines]",
          "851:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "",
          "[Added Lines]",
          "851:         $$ = codes_join_item(code_push_string(pstate,&@1, $1), lval);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "860:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "861:         lval->lvalue_flag = 1;",
          "862:         lval->lvalue_name = $1;",
          "864:     }",
          "865:     | item  { $$ = $1; }",
          "",
          "[Removed Lines]",
          "863:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "",
          "[Added Lines]",
          "863:         $$ = codes_join_item(code_push_string(pstate,&@1, $1), lval);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "914: ;",
          "916: item:",
          "925:     | OBJSET IDENTIFIER '(' IDENTIFIER ')' func_statement_block {",
          "926:         Jsi_ScopeStrs *args = jsi_argInsert(pstate, NULL, $4, NULL, &@4, 0 );",
          "928:             code_push_func(pstate,  &@3, jsi_FuncMake(pstate, args, $6, &@1, $2, 2)));",
          "929:     }",
          "930:     | OBJGET IDENTIFIER '(' ')' func_statement_block {",
          "931:         Jsi_ScopeStrs *args = jsi_ArgsOptAdd(pstate, jsi_ScopeStrsNew());",
          "933:             code_push_func(pstate,  &@3, jsi_FuncMake(pstate, args, $5, &@1, $2, 4)));",
          "934:     }",
          "935: ;",
          "",
          "[Removed Lines]",
          "917:     IDENTIFIER ':' expr { $$ = codes_join(code_push_string(pstate,&@1, $1), $3); }",
          "918:     | strlit ':' expr   { $$ = codes_join(code_push_vstring(pstate,&@1, $1), $3); }",
          "919:     | itemres':' expr   { $$ = codes_join($1, $3); }",
          "920:     | FNUMBER ':' expr { $$ = codes_join(code_push_num($1), $3);  }",
          "921:     | _TRUE ':' expr { $$ = codes_join(code_push_bool(1), $3);  }",
          "922:     | _FALSE ':' expr { $$ = codes_join(code_push_bool(0), $3);  }",
          "923:     | UNDEF ':' expr { $$ = codes_join(code_push_undef(), $3);  }",
          "924:     | TYPENULL ':' expr { $$ = codes_join(code_push_null(), $3);  }",
          "927:         $$ = codes_join(code_push_string(pstate,&@2, $2),",
          "932:         $$ = codes_join(code_push_string(pstate,&@2, $2),",
          "",
          "[Added Lines]",
          "917:     IDENTIFIER ':' expr { $$ = codes_join_item(code_push_string(pstate,&@1, $1), $3); }",
          "918:     | strlit ':' expr   { $$ = codes_join_item(code_push_vstring(pstate,&@1, $1), $3); }",
          "919:     | itemres':' expr   { $$ = codes_join_item($1, $3); }",
          "920:     | FNUMBER ':' expr { $$ = codes_join_item(code_push_num($1), $3);  }",
          "921:     | _TRUE ':' expr { $$ = codes_join_item(code_push_bool(1), $3);  }",
          "922:     | _FALSE ':' expr { $$ = codes_join_item(code_push_bool(0), $3);  }",
          "923:     | UNDEF ':' expr { $$ = codes_join_item(code_push_undef(), $3);  }",
          "924:     | TYPENULL ':' expr { $$ = codes_join_item(code_push_null(), $3);  }",
          "927:         $$ = codes_join_item(code_push_string(pstate,&@2, $2),",
          "932:         $$ = codes_join_item(code_push_string(pstate,&@2, $2),",
          "934:         $$->codes[0].setget = 1;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "tools/testsys.sh||tools/testsys.sh": [
          "File: tools/testsys.sh -> tools/testsys.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:         #echo $i",
          "14:         continue",
          "15:     fi",
          "16:     jsish --I noEval=true $i",
          "17: done",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     echo $i",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "189d132602896a66328cfa76e9ce03c27d283891",
      "candidate_info": {
        "commit_hash": "189d132602896a66328cfa76e9ce03c27d283891",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/189d132602896a66328cfa76e9ce03c27d283891",
        "files": [
          "Makefile",
          "lib/Websrv.jsi",
          "lib/Wget.jsi",
          "lws/Makefile",
          "md/Reference.md",
          "md/Web.md",
          "openssl/Makefile",
          "src/jsi.h",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.26\": Add openssl build support.\n\nFossilOrigin-Name: c8ccbffa4daad07d821be18b5374ffa52f7777e598bafafe15341c504dc71e65",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/Wget.jsi||lib/Wget.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "tools/protos.jsi||tools/protos.jsi",
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: {",
          "8:     var LogTrace = function(...) {}; // Comment out for debugging.",
          "9:     var self = {",
          "11:     };",
          "12:     var options = { // Run a standalone web server, opening browser to serve out url.",
          "13:         anchor      :'',        // Anchor after url.",
          "",
          "[Removed Lines]",
          "10:         chans   :{}",
          "",
          "[Added Lines]",
          "10:         chans   :{},",
          "11:         ssl     :false,",
          "12:         sslcert :null,",
          "13:         sslkey  :null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:         query       :'',        // Query to append to url.",
          "31:         rootdir     :null,      // Base directory.",
          "32:         server      :false,     // Server mode: same as noGui=true and closeTimout=0",
          "36:         srcFile     :'',        // File of code to source inside the Websrv function.",
          "37:         uploadDir   :'/tmp',    // Upload files go here",
          "38:         timeout     :60000,     // Set timeout (in ms) to shutdown. This is idle time, unless negative.",
          "",
          "[Removed Lines]",
          "33:         ssl         :false,     // Enable ssl",
          "34:         sslCert     :null,      // Used for https",
          "35:         sslKey      :null,      // Used for https",
          "",
          "[Added Lines]",
          "36:         sslDir      :null,      // Enable ssl and use certs in this dir.",
          "37:         sslFnCert   :'cert.pem',// File name in sslDir of cert.",
          "38:         sslFnKey    :'privkey.pem',// File name in sslDir of key.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:         wsdebug     :0,         // Debug option for websockets.",
          "45:         wsOpts      :{},        // Websocket options.",
          "46:         zip         :'',        // A .zip, .sqlar, or .fossil file to mount and use as rootdir.",
          "48:     };",
          "50:     parseOpts(self, options, conf);",
          "",
          "[Removed Lines]",
          "47:         zipVer      :''         // Version to mount in fossil.",
          "",
          "[Added Lines]",
          "50:         zipVer      :'',        // Version to mount in fossil.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:         var eurl = self.urlPrefix + '/'+url;",
          "264:         eurl = eurl.map(['//', '/']);",
          "266:         if (query)",
          "267:             surl += '?'+ query.replace(/&/g,'\\\\&');",
          "268:         if (anchor)",
          "",
          "[Removed Lines]",
          "265:         var surl = \" http://127.0.0.1:\"+self.wsopts.port+eurl;",
          "",
          "[Added Lines]",
          "268:         var surl = ' '+(self.ssl?'https':'http')+'://127.0.0.1:'+self.wsopts.port+eurl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "390:             if (self.url.substr(0, rlen) === self.rootdir)",
          "391:                 self.url = self.url.substr(rlen);",
          "392:         }",
          "393:         if (!self.rootdir)",
          "394:             self.rootdir = '.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:         if (self.sslDir) {",
          "397:             if (self.sslFnKey != '') self.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "398:             if (self.sslFnCert != '') self.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "399:             self.ssl = true;",
          "400:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "406:             port:self.port,",
          "407:             rootdir:self.rootdir,",
          "408:             urlPrefix:self.urlPrefix,",
          "411:             ssl:self.ssl,",
          "412:             mimeLookupFunc:mimeLookup,",
          "413:         };",
          "",
          "[Removed Lines]",
          "409:             sslCert:self.sslCert,",
          "410:             sslKey:self.sslKey,",
          "",
          "[Added Lines]",
          "417:             sslCert:self.sslcert,",
          "418:             sslKey:self.sslkey,",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||lib/Wget.jsi": [
          "File: lib/Wget.jsi -> lib/Wget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:         nowait      : false,        // Just return object: caller will call update.",
          "10:         onDone      : null,         // Callback when done.",
          "11:         O           : '',           // Output file name, or - for stdout, . for response: default is url tail.",
          "14:         wsOpts      : {},           // Websocket options.",
          "16:     };",
          "18:     var self = {",
          "",
          "[Removed Lines]",
          "12:         sslCert     : null,         // Used for https",
          "13:         sslKey      : null,         // Used for https",
          "15:         wsdebug     : 0             // WebSockets debug level.",
          "",
          "[Added Lines]",
          "12:         sslDir      :null,          // Enable ssl and use certs in this dir",
          "13:         sslFnCert   :'cert.pem',    // File name in sslDir of cert.",
          "14:         sslFnKey    :'privkey.pem', // File name in sslDir of key.",
          "16:         wsdebug     : 0,            // WebSockets debug level.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:         scheme      : 'http',       // Url scheme",
          "26:         protocol    : 'get',",
          "27:         response    : '',",
          "29:     };",
          "31:     parseOpts(self, options, conf);",
          "",
          "[Removed Lines]",
          "28:         url         : null",
          "",
          "[Added Lines]",
          "29:         url         : null,",
          "30:         ssl         :false,",
          "31:         sslcert     :null,",
          "32:         sslkey      :null,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:         }",
          "91:         if (self.post.length)",
          "92:             self.protocol = 'post';",
          "94:         var wsopts = {",
          "95:             client:true,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:         if (self.sslDir) {",
          "99:             if (self.sslFnKey != '') sself.sslkey = File.join(self.sslDir, self.sslFnKey);",
          "100:             if (self.sslFnCert != '') sself.sslcert = File.join(self.sslDir, self.sslFnCert);",
          "101:             self.ssl = true;",
          "102:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:             clientHost:self.address,",
          "104:             sslCert:self.sslCert,",
          "105:             sslKey:self.sslKey,",
          "106:         };",
          "107:         for (var i in self.wsOpts)",
          "108:             wsopts[i] = self.wsOpts[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:             ssl:self.ssl;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:             else {",
          "117:                 if (self.port === 80)",
          "118:                     wsopts.port = 443;",
          "120:             }",
          "121:         }",
          "122:         LogTrace(\"Starting:\", conf, wsopts);",
          "",
          "[Removed Lines]",
          "119:                 wsopts.ssl = true;",
          "",
          "[Added Lines]",
          "130:                 self.ssl = true;",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 25",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 26",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: #include <signal.h>",
          "58: static const int jsi_WsPkgVersion = 2;",
          "",
          "[Removed Lines]",
          "55: #include <liblws.h>",
          "",
          "[Added Lines]",
          "55: #include <lws.h>",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: Math.prototype.sqrt = function(num:number):number {};",
          "185: Math.prototype.srand = function(seed:number):number {};",
          "186: Math.prototype.tan = function(num:number):number {};",
          "187: var Number = function(cmd,args) {};",
          "188: Number.prototype.isFinite = function():boolean {};",
          "189: Number.prototype.isInteger = function():boolean {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: var MySql = function(cmd,args) {};",
          "188: MySql.prototype.affectedRows = function():number {};",
          "189: MySql.prototype.complete = function(sql:string):boolean {};",
          "190: MySql.prototype.conf = function(options:string|object=void):any {};",
          "191: MySql.prototype.errorNo = function():number {};",
          "192: MySql.prototype.errorState = function():string {};",
          "193: MySql.prototype.eval = function(sql:string):number {};",
          "194: MySql.prototype.exists = function(sql:string):boolean {};",
          "195: MySql.prototype.info = function():object {};",
          "196: MySql.prototype.lastQuery = function():string {};",
          "197: MySql.prototype.lastRowid = function():number {};",
          "198: MySql.prototype.onecolumn = function(sql:string):any {};",
          "199: MySql.prototype.ping = function(noError:boolean=false):number {};",
          "200: MySql.prototype.query = function(sql:string, options:function|string|array|object=void):any {};",
          "201: MySql.prototype.reconnect = function():void {};",
          "202: MySql.prototype.reset = function():number {};",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: <a href='#Interp'>Interp</a>",
          "20: <a href='#JSON'>JSON</a>",
          "21: <a href='#Math'>Math</a>",
          "22: <a href='#Number'>Number</a>",
          "23: <a href='#Object'>Object</a>",
          "24: <a href='#RegExp'>RegExp</a>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: <a href='#MySql'>MySql</a>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "795: </table>",
          "796: <a name=\"Mathend\"></a>",
          "797: <p><a href=\"#TOC\">Return to top</a>",
          "798: <a name=\"Number\"></a>",
          "800: <hr>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799: <a name=\"MySql\"></a>",
          "801: <hr>",
          "804: <h1>MySql</h1>",
          "806: <font color=red>Synopsis:new MySql(options:object=void):userobj",
          "808: </font><p>Commands for accessing mysql databases.",
          "811: <h2>Methods for \"MySql\"</h2>",
          "812: <table border=\"1\"class=\"cmdstbl table\">",
          "813: <tr><th>Method</th><th>Prototype</th><th>Description</th></tr>",
          "814: <tr><td>MySql</td><td>new MySql(<a href='#new MySqlOptions'>options</a>:object=void):userobj </td><td>Create a new db connection to a MySql database:.</td></tr>",
          "815: <tr><td>affectedRows</td><td>affectedRows():number </td><td>Return affected rows.</td></tr>",
          "816: <tr><td>complete</td><td>complete(sql:string):boolean </td><td>Return true if sql is complete.</td></tr>",
          "817: <tr><td>conf</td><td>conf(<a href='#MySql.confOptions'>options</a>:string|object=void) </td><td>Configure options.</td></tr>",
          "818: <tr><td>errorNo</td><td>errorNo():number </td><td>Return error code returned by most recent call to mysql3_exec().</td></tr>",
          "819: <tr><td>errorState</td><td>errorState():string </td><td>Return the mysql error state str.</td></tr>",
          "820: <tr><td>eval</td><td>eval(sql:string):number </td><td>Run sql commands without input/output.</td></tr>",
          "821: <tr><td>exists</td><td>exists(sql:string):boolean </td><td>Execute sql, and return true if there is at least one result value.</td></tr>",
          "822: <tr><td>info</td><td>info():object </td><td>Return info about last query.</td></tr>",
          "823: <tr><td>lastQuery</td><td>lastQuery():string </td><td>Return info string about most recently executed statement.</td></tr>",
          "824: <tr><td>lastRowid</td><td>lastRowid():number </td><td>Return rowid of last insert.</td></tr>",
          "825: <tr><td>onecolumn</td><td>onecolumn(sql:string) </td><td>Execute sql, and return a single value.</td></tr>",
          "826: <tr><td>ping</td><td>ping(noError:boolean=false):number </td><td>Ping connection.</td></tr>",
          "827: <tr><td>query</td><td>query(sql:string, <a href='#MySql.queryOptions'>options</a>:function|string|array|object=void) </td><td>Run sql query with input and/or outputs..</td></tr>",
          "828: <tr><td>reconnect</td><td>reconnect():void </td><td>Reconnect with current settings.</td></tr>",
          "829: <tr><td>reset</td><td>reset():number </td><td>Reset connection.</td></tr>",
          "830: </table>",
          "833: <a name=\"new MySqlOptions\"></a>",
          "834: <a name=\"MySql.confOptions\"></a>",
          "835: <h2>Options for \"new MySql\"</h2>",
          "836: <table border=\"1\" class=\"optstbl table\">",
          "837: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "838: <tr><td>bindWarn</td><td><i>BOOL</i></td><td>Treat failed variable binds as a warning.</td><td><i>initOnly</i></td></tr>",
          "839: <tr><td>database</td><td><i>STRKEY</i></td><td>Database to use.</td><td><i>initOnly</i></td></tr>",
          "840: <tr><td>debug</td><td><i>ARRAY</i></td><td>Enable debug trace for various operations. (zero or more of: <b>eval</b>, <b>delete</b>, <b>prepare</b>, <b>step</b>)</td><td><i></i></td></tr>",
          "841: <tr><td>enableMulti</td><td><i>BOOL</i></td><td>Accept muiltiple semi-colon separated statements in eval().</td><td><i>initOnly</i></td></tr>",
          "842: <tr><td>errorCnt</td><td><i>INT</i></td><td>Count of errors.</td><td><i>readOnly</i></td></tr>",
          "843: <tr><td>queryOpts</td><td><i><a href='#queryOptsOptions'>options</a></i></td><td>Default options for exec.</td><td><i></i></td></tr>",
          "844: <tr><td>forceInt</td><td><i>BOOL</i></td><td>Bind float as int if possible.</td><td><i></i></td></tr>",
          "845: <tr><td>host</td><td><i>STRING</i></td><td>IP address or host name for mysqld (default is 127.0.0.1).</td><td><i></i></td></tr>",
          "846: <tr><td>maxStmts</td><td><i>INT</i></td><td>Max cache size for compiled statements.</td><td><i></i></td></tr>",
          "847: <tr><td>name</td><td><i>DSTRING</i></td><td>Name for this db handle.</td><td><i></i></td></tr>",
          "848: <tr><td>numStmts</td><td><i>INT</i></td><td>Current size of compiled statement cache.</td><td><i>readOnly</i></td></tr>",
          "849: <tr><td>password</td><td><i>STRKEY</i></td><td>Database password..</td><td><i>initOnly</i></td></tr>",
          "850: <tr><td>port</td><td><i>INT</i></td><td>IP port for mysqld.</td><td><i>initOnly</i></td></tr>",
          "851: <tr><td>reconnect</td><td><i>BOOL</i></td><td>Reconnect.</td><td><i></i></td></tr>",
          "852: <tr><td>sslKey</td><td><i>STRING</i></td><td>SSL key.</td><td><i></i></td></tr>",
          "853: <tr><td>sslCert</td><td><i>STRING</i></td><td>SSL Cert.</td><td><i></i></td></tr>",
          "854: <tr><td>sslCA</td><td><i>STRING</i></td><td>SSL CA.</td><td><i></i></td></tr>",
          "855: <tr><td>sslCAPath</td><td><i>STRING</i></td><td>SSL CA path.</td><td><i></i></td></tr>",
          "856: <tr><td>sslCipher</td><td><i>STRING</i></td><td>SSL Cipher.</td><td><i></i></td></tr>",
          "857: <tr><td>udata</td><td><i>OBJ</i></td><td>User data..</td><td><i></i></td></tr>",
          "858: <tr><td>user</td><td><i>STRKEY</i></td><td>Database user name. Default is current user-name..</td><td><i>initOnly</i></td></tr>",
          "859: <tr><td>version</td><td><i>DOUBLE</i></td><td>Mysql version number.</td><td><i>readOnly</i></td></tr>",
          "860: </table>",
          "863: <a name=\"queryOptsOptions\"></a>",
          "864: <h2>Options for \"queryOpts\"</h2>",
          "865: <table border=\"1\" class=\"optstbl table\">",
          "866: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "867: <tr><td>callback</td><td><i>FUNC</i></td><td>Function to call with each row result. @function(values:object)</td><td><i></i></td></tr>",
          "868: <tr><td>headers</td><td><i>BOOL</i></td><td>First row returned contains column labels.</td><td><i></i></td></tr>",
          "869: <tr><td>limit</td><td><i>INT</i></td><td>Maximum number of returned values.</td><td><i></i></td></tr>",
          "870: <tr><td>mapundef</td><td><i>BOOL</i></td><td>In variable binds, map an 'undefined' var to null.</td><td><i></i></td></tr>",
          "871: <tr><td>maxString</td><td><i>INT</i></td><td>If not using prefetch, the maximum string value size (0=8K).</td><td><i></i></td></tr>",
          "872: <tr><td>mode</td><td><i>STRKEY</i></td><td>Set output mode of returned data. (one of: <b>rows</b>, <b>arrays</b>, <b>array1d</b>, <b>list</b>, <b>column</b>, <b>json</b>, <b>json2</b>, <b>html</b>, <b>csv</b>, <b>insert</b>, <b>line</b>, <b>tabs</b>, <b>none</b>)</td><td><i></i></td></tr>",
          "873: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "874: <tr><td>noNamedParams</td><td><i>BOOL</i></td><td>Disable translating sql to support named params.</td><td><i></i></td></tr>",
          "875: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non-json mode).</td><td><i></i></td></tr>",
          "876: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "877: <tr><td>paramVar</td><td><i>ARRAY</i></td><td>Array var to use for parameters.</td><td><i></i></td></tr>",
          "878: <tr><td>prefetch</td><td><i>BOOL</i></td><td>Let client library cache entire results.</td><td><i></i></td></tr>",
          "879: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "880: <tr><td>table</td><td><i>STRKEY</i></td><td>Table name for mode=insert.</td><td><i></i></td></tr>",
          "881: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (error). (one of: <b>convert</b>, <b>error</b>, <b>warn</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "882: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "883: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "884: </table>",
          "887: <a name=\"MySql.queryOptions\"></a>",
          "888: <a name=\"MySql.confOptions\"></a>",
          "889: <h2>Options for \"MySql.query\"</h2>",
          "890: <table border=\"1\" class=\"optstbl table\">",
          "891: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "892: <tr><td>callback</td><td><i>FUNC</i></td><td>Function to call with each row result. @function(values:object)</td><td><i></i></td></tr>",
          "893: <tr><td>headers</td><td><i>BOOL</i></td><td>First row returned contains column labels.</td><td><i></i></td></tr>",
          "894: <tr><td>limit</td><td><i>INT</i></td><td>Maximum number of returned values.</td><td><i></i></td></tr>",
          "895: <tr><td>mapundef</td><td><i>BOOL</i></td><td>In variable binds, map an 'undefined' var to null.</td><td><i></i></td></tr>",
          "896: <tr><td>maxString</td><td><i>INT</i></td><td>If not using prefetch, the maximum string value size (0=8K).</td><td><i></i></td></tr>",
          "897: <tr><td>mode</td><td><i>STRKEY</i></td><td>Set output mode of returned data. (one of: <b>rows</b>, <b>arrays</b>, <b>array1d</b>, <b>list</b>, <b>column</b>, <b>json</b>, <b>json2</b>, <b>html</b>, <b>csv</b>, <b>insert</b>, <b>line</b>, <b>tabs</b>, <b>none</b>)</td><td><i></i></td></tr>",
          "898: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "899: <tr><td>noNamedParams</td><td><i>BOOL</i></td><td>Disable translating sql to support named params.</td><td><i></i></td></tr>",
          "900: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non-json mode).</td><td><i></i></td></tr>",
          "901: <tr><td>obj</td><td><i><a href='#objOptions'>options</a></i></td><td>Options for object.</td><td><i></i></td></tr>",
          "902: <tr><td>paramVar</td><td><i>ARRAY</i></td><td>Array var to use for parameters.</td><td><i></i></td></tr>",
          "903: <tr><td>prefetch</td><td><i>BOOL</i></td><td>Let client library cache entire results.</td><td><i></i></td></tr>",
          "904: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "905: <tr><td>table</td><td><i>STRKEY</i></td><td>Table name for mode=insert.</td><td><i></i></td></tr>",
          "906: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (error). (one of: <b>convert</b>, <b>error</b>, <b>warn</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "907: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "908: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "909: </table>",
          "912: <a name=\"objOptions\"></a>",
          "913: <h2>Options for \"obj\"</h2>",
          "914: <table border=\"1\" class=\"optstbl table\">",
          "915: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "916: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var data source for %s.</td><td><i></i></td></tr>",
          "917: <tr><td>skip</td><td><i>ARRAY</i></td><td>Object members to ignore.</td><td><i></i></td></tr>",
          "918: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating.</td><td><i></i></td></tr>",
          "919: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "920: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "921: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "922: <tr><td>noTypes</td><td><i>BOOL</i></td><td>Create with no types.</td><td><i></i></td></tr>",
          "923: </table>",
          "924: <a name=\"MySqlend\"></a>",
          "925: <p><a href=\"#TOC\">Return to top</a>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1159: <tr><td>values</td><td><i>ARRAY</i></td><td>Values for ? bind parameters.</td><td><i></i></td></tr>",
          "1160: <tr><td>width</td><td><i>CUSTOM</i></td><td>In column mode, set column widths.</td><td><i></i></td></tr>",
          "1161: </table>",
          "1176: <a name=\"Sqliteend\"></a>",
          "1177: <p><a href=\"#TOC\">Return to top</a>",
          "1178: <a name=\"String\"></a>",
          "",
          "[Removed Lines]",
          "1164: <a name=\"objOptions\"></a>",
          "1165: <h2>Options for \"obj\"</h2>",
          "1166: <table border=\"1\" class=\"optstbl table\">",
          "1167: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "1168: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var data source for %s.</td><td><i></i></td></tr>",
          "1169: <tr><td>skip</td><td><i>ARRAY</i></td><td>Object members to ignore.</td><td><i></i></td></tr>",
          "1170: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating.</td><td><i></i></td></tr>",
          "1171: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "1172: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "1173: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "1174: <tr><td>noTypes</td><td><i>BOOL</i></td><td>Create with no types.</td><td><i></i></td></tr>",
          "1175: </table>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "658fb58e98c50be7cda071a7c823d608cbed7f61",
      "candidate_info": {
        "commit_hash": "658fb58e98c50be7cda071a7c823d608cbed7f61",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/658fb58e98c50be7cda071a7c823d608cbed7f61",
        "files": [
          "lib/Websrv.jsi",
          "md/Reference.md",
          "src/jsiWebSocket.c",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.22\": WebSocket mime typess. \"\n\nFossilOrigin-Name: 88bffd5611b69403c01a219fbc32a2c93fa2d759a5a45c8436643158581a7878",
        "before_after_code_files": [
          "lib/Websrv.jsi||liWebsrv.jsi",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "www/reference.wiki||www/reference.wiki"
          ],
          "candidate": [
            "www/reference.wiki||www/reference.wiki"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||liWebsrv.jsi": [
          "File: lib/Websrv.jsi -> liWebsrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:         return true;",
          "231:     }",
          "233:     function OpenBrowser(url:string, anchor:string, query:string) {",
          "234:         var prog = self.browser;",
          "235:         var browsers = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "387:             onFilter:WsFilter,",
          "388:             port:self.port,",
          "389:             rootdir:self.rootdir,",
          "391:         };",
          "392:         switch (self.mode) {",
          "393:             case 'admin':",
          "",
          "[Removed Lines]",
          "390:             urlPrefix:self.urlPrefix",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     Jsi_Hash *pssTable, *handlers, *fileHash;",
          "121:     Jsi_Value *onAuth, *onCloseLast, *onClose, *onFilter, *onOpen, *onRecv,",
          "124:     bool client, noUpdate, noWebsock, noWarn, use_ssl, local, extHandlers, handlersPkg, inUpdate, noCompress, noConfig, echo;",
          "125:     Jsi_Value* version;",
          "127:     int port;",
          "128:     uint modifySecs;",
          "129:     int maxUpload;",
          "",
          "[Removed Lines]",
          "126:     int idx, mimeFuncCalled;",
          "",
          "[Added Lines]",
          "126:     int idx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "318:     JSI_OPT(INT,    jsi_wsCmdObj, maxConnects,.help=\"In server mode, max number of client connections accepted\"),",
          "319:     JSI_OPT(INT,    jsi_wsCmdObj, maxDownload,.help=\"Max size of file download\"),",
          "320:     JSI_OPT(INT,    jsi_wsCmdObj, maxUpload,  .help=\"Max size of file upload will accept\"),",
          "323:     JSI_OPT(UINT,   jsi_wsCmdObj, modifySecs, .help=\"Seconds between checking for modified files with onModify (2)\"),",
          "324:     JSI_OPT(BOOL,   jsi_wsCmdObj, noConfig,   .help=\"Disable use of conf() to change options after options after create\", jsi_IIOF),",
          "325:     JSI_OPT(BOOL,   jsi_wsCmdObj, noCompress, .help=\"Disable per-message-deflate extension which can truncate large msgs\"),",
          "327:     JSI_OPT(BOOL,   jsi_wsCmdObj, noWebsock,  .help=\"Serve html, but disallow websocket upgrade\", jsi_IIOF),",
          "328:     JSI_OPT(BOOL,   jsi_wsCmdObj, noWarn,     .help=\"Quietly ignore file related errors\"),",
          "329:     JSI_OPT(FUNC,   jsi_wsCmdObj, onAuth,     .help=\"Function to call for http basic authentication\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, userpass:string\"),",
          "",
          "[Removed Lines]",
          "321:     JSI_OPT(OBJ,    jsi_wsCmdObj, mimeTypes,  .help=\"Object providing map of file extensions to mime types. eg. {txt:'text/plain', bb:'text/bb'}\"),",
          "322:     JSI_OPT(FUNC,   jsi_wsCmdObj, mimeLoadFunc,   .help=\"Function to call to load mimeTypes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj\"),",
          "326:     JSI_OPT(BOOL,   jsi_wsCmdObj, noUpdate,   .help=\"Disable update event-processing (eg. to exit)\"),",
          "",
          "[Added Lines]",
          "321:     JSI_OPT(OBJ,    jsi_wsCmdObj, mimeTypes,  .help=\"Object map of file-exts to mime types; initial and/or override of builtins\"),",
          "322:     JSI_OPT(FUNC,   jsi_wsCmdObj, mimeLookupFunc, .help=\"Function to call to lookup mime; returns and/or inserts into mimeTypes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, extension:string, url:string\"),",
          "326:     JSI_OPT(BOOL,   jsi_wsCmdObj, noUpdate,   .help=\"Disable update event-processing\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1415:             if (mVal)",
          "1416:                 mime = Jsi_ValueString(interp, mVal, NULL);",
          "1417:         }",
          "1420:             jsi_ws_loadMimeTypes(interp, cmdPtr, 0);",
          "1425:         }",
          "1426:         if (!mime)",
          "1427:             mime = \"text/html\";",
          "",
          "[Removed Lines]",
          "1418:         if (!mime && cmdPtr->mimeLoadFunc && !cmdPtr->mimeFuncCalled) {",
          "1419:             cmdPtr->mimeFuncCalled = 1;",
          "1421:             Jsi_FunctionInvokeBool(interp, cmdPtr->mimeLoadFunc, Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "1422:             Jsi_Value *mVal = Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, ext+1, 1);",
          "1423:             if (mVal)",
          "1424:                 mime = Jsi_ValueString(interp, mVal, NULL);",
          "",
          "[Added Lines]",
          "1418:         if (!mime && cmdPtr->mimeLookupFunc) {",
          "1421:             Jsi_Obj *oarg1;",
          "1422:             Jsi_Value *vpargs, *vargs[10];",
          "1423:             int n = 0;",
          "1424:             vargs[n++] = Jsi_ValueNewObj(interp, cmdPtr->fobj);",
          "1425:             vargs[n++] = Jsi_ValueNewNumber(interp, (Jsi_Number)(pss->wid));",
          "1426:             vargs[n++] = Jsi_ValueNewStringDup(interp, ext+1);",
          "1427:             vargs[n++] = Jsi_ValueNewStringDup(interp, inPtr);",
          "1428:             vpargs = Jsi_ValueMakeObject(interp, NULL, oarg1 = Jsi_ObjNewArray(interp, vargs, n, 0));",
          "1429:             Jsi_IncrRefCount(interp, vpargs);",
          "1430:             Jsi_Value *ret = Jsi_ValueNew1(interp);",
          "1431:             rc = Jsi_FunctionInvoke(interp, cmdPtr->mimeLookupFunc, vpargs, &ret, NULL);",
          "1432:             if (rc == JSI_OK && Jsi_ValueIsString(interp, ret))",
          "1433:                 Jsi_ValueInsert(interp, cmdPtr->mimeTypes, ext+1, ret, 0);",
          "1435:             Jsi_DecrRefCount(interp, vpargs);",
          "1436:             Jsi_DecrRefCount(interp, ret);",
          "1438:             if (rc != JSI_OK) {",
          "1439:                 Jsi_LogWarn(\"websock mimeLookupFunc bad eval\");",
          "1440:             } else {",
          "1441:                 Jsi_Value *mVal = Jsi_ValueObjLookup(interp, cmdPtr->mimeTypes, ext+1, 1);",
          "1442:                 if (mVal)",
          "1443:                     mime = Jsi_ValueString(interp, mVal, NULL);",
          "1444:             }",
          "",
          "---------------"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "913: <h2>Options for \"obj\"</h2>",
          "914: <table border=\"1\" class=\"optstbl table\">",
          "915: <tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>",
          "919: <tr><td>defaultNull</td><td><i>BOOL</i></td><td>Create with DEFAULT NULL.</td><td><i></i></td></tr>",
          "920: <tr><td>noChecks</td><td><i>BOOL</i></td><td>Create with no CHECK constraints.</td><td><i></i></td></tr>",
          "921: <tr><td>noDefaults</td><td><i>BOOL</i></td><td>Create with no defaults.</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "916: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var.</td><td><i></i></td></tr>",
          "917: <tr><td>omit</td><td><i>ARRAY</i></td><td>Members in object to disregard.</td><td><i></i></td></tr>",
          "918: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating it.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "916: <tr><td>name</td><td><i>STRKEY</i></td><td>Name of object var data source for %s.</td><td><i></i></td></tr>",
          "917: <tr><td>skip</td><td><i>ARRAY</i></td><td>Object members to ignore.</td><td><i></i></td></tr>",
          "918: <tr><td>getSql</td><td><i>BOOL</i></td><td>Return expanded SQL without evaluating.</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1222: <tr><td>stmtCacheMax</td><td><i>INT</i></td><td>Max cache size for compiled statements.</td><td><i></i></td></tr>",
          "1223: <tr><td>timeout</td><td><i>INT</i></td><td>Amount of time to wait when file is locked, in ms.</td><td><i></i></td></tr>",
          "1224: <tr><td>udata</td><td><i>OBJ</i></td><td>User data.</td><td><i></i></td></tr>",
          "1226: <tr><td>timeout</td><td><i>INT</i></td><td>Amount of time to wait when file is locked, in ms.</td><td><i></i></td></tr>",
          "1227: <tr><td>vfs</td><td><i>STRING</i></td><td>VFS to use.</td><td><i>initOnly</i></td></tr>",
          "1228: </table>",
          "",
          "[Removed Lines]",
          "1225: <tr><td>version</td><td><i>OBJ</i></td><td>Sqlite version info.</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1225: <tr><td>version</td><td><i>OBJ</i></td><td>Sqlite version info.</td><td><i>readOnly</i></td></tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1689: <tr><td>maxConnects</td><td><i>INT</i></td><td>In server mode, max number of client connections accepted.</td><td><i></i></td></tr>",
          "1690: <tr><td>maxDownload</td><td><i>INT</i></td><td>Max size of file download.</td><td><i></i></td></tr>",
          "1691: <tr><td>maxUpload</td><td><i>INT</i></td><td>Max size of file upload will accept.</td><td><i></i></td></tr>",
          "1693: <tr><td>modifySecs</td><td><i>UINT</i></td><td>Seconds between checking for modified files with onModify (2).</td><td><i></i></td></tr>",
          "1694: <tr><td>noConfig</td><td><i>BOOL</i></td><td>Disable use of conf() to change options after options after create.</td><td><i>initOnly</i></td></tr>",
          "1695: <tr><td>noCompress</td><td><i>BOOL</i></td><td>Disable per-message-deflate extension which can truncate large msgs.</td><td><i></i></td></tr>",
          "1697: <tr><td>noWebsock</td><td><i>BOOL</i></td><td>Serve html, but disallow websocket upgrade.</td><td><i>initOnly</i></td></tr>",
          "1698: <tr><td>noWarn</td><td><i>BOOL</i></td><td>Quietly ignore file related errors.</td><td><i></i></td></tr>",
          "1699: <tr><td>onAuth</td><td><i>FUNC</i></td><td>Function to call for http basic authentication. @function(ws:userobj, id:number, url:string, userpass:string)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1692: <tr><td>mimeTypes</td><td><i>OBJ</i></td><td>Object providing map of file extensions to mime types. eg. {txt:'text/plain', bb:'text/bb'}.</td><td><i>initOnly</i></td></tr>",
          "1696: <tr><td>noUpdate</td><td><i>BOOL</i></td><td>Disable update event-processing (eg. to exit).</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1692: <tr><td>mimeTypes</td><td><i>OBJ</i></td><td>Object map of file-exts to mime types; initial and/or override of builtins.</td><td><i></i></td></tr>",
          "1693: <tr><td>mimeLookupFunc</td><td><i>FUNC</i></td><td>Function to call to lookup mime; returns and/or inserts into mimeTypes. @function(ws:userobj, id:number, extension:string, url:string)</td><td><i></i></td></tr>",
          "1697: <tr><td>noUpdate</td><td><i>BOOL</i></td><td>Disable update event-processing.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    }
  ]
}