{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "61998ed50a524ac518300666a6c3d627bab7b5c9",
      "candidate_info": {
        "commit_hash": "61998ed50a524ac518300666a6c3d627bab7b5c9",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/61998ed50a524ac518300666a6c3d627bab7b5c9",
        "files": [
          "DKGCrypto.cpp",
          "SGXRegistrationServer.cpp",
          "SGXWalletServer.cpp",
          "SGXWalletServer.h",
          "ServerInit.cpp",
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h",
          "secure_enclave/secure_enclave.c",
          "sgxwallet.c",
          "sgxwallet_common.h",
          "testw.cpp"
        ],
        "message": "SKALE-1795 Add flag to run SGXWallet on http",
        "before_after_code_files": [
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp",
          "SGXWalletServer.cpp||SGXWalletServer.cpp",
          "SGXWalletServer.h||SGXWalletServer.h",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "sgxwallet.c||sgxwallet.c",
          "sgxwallet_common.h||sgxwallet_common.h",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "SGXWalletServer.cpp||SGXWalletServer.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:   create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "300:   if ( err_status != 0){",
          "301:      std::cerr << \"ERROR IN ENCLAVE\" << std::endl;",
          "304:   }",
          "305:   else {",
          "306:     char *hexBLSKey = (char *) calloc(2 * BUF_LEN, 1);",
          "309:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "311:     writeDataToDB(BLSKeyName, hexBLSKey);",
          "314:     free(hexBLSKey);",
          "315:     return true;",
          "316:   }",
          "",
          "[Removed Lines]",
          "302:      throw RPCException(ERROR_IN_ENCLAVE, \"Something failed in enclave\");",
          "303:      return false;",
          "307:     std::cerr << \"BEFORE carray2Hex\" << std::endl;",
          "310:     std::cerr << \"BEFORE WRITE BLS KEY TO DB\" << std::endl;",
          "312:     std::cerr << \"hexBLSKey length is \" << strlen(hexBLSKey) << std::endl;",
          "313:     std::cerr << \"bls key \" << BLSKeyName << \" is \" << hexBLSKey << std::endl;",
          "",
          "[Added Lines]",
          "301:      throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "310:     if (DEBUG_PRINT) {",
          "311:       std::cerr << \"hexBLSKey length is \" << strlen(hexBLSKey) << std::endl;",
          "312:       std::cerr << \"bls key \" << BLSKeyName << \" is \" << hexBLSKey << std::endl;",
          "313:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:     char pub_key[320];",
          "335:     get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "337:     std::vector<std::string> pub_key_vect = SplitString(pub_key, ':');",
          "341:     return pub_key_vect;",
          "342: }",
          "",
          "[Removed Lines]",
          "334:     std::cerr << \"dec_key_len is \" << dec_key_len << std::endl;",
          "336:     std::cerr << \"errMsg1 is \" << errMsg1 << std::endl;",
          "338:     std::cerr << \"pub key is\" << std::endl;",
          "339:     for ( int i = 0; i < 4; i++)",
          "340:       std::cerr << pub_key_vect.at(i) << std::endl;",
          "",
          "[Added Lines]",
          "334:     if (DEBUG_PRINT) {",
          "335:       std::cerr << \"dec_key_len is \" << dec_key_len << std::endl;",
          "336:     }",
          "338:     if ( err_status != 0){",
          "339:       throw RPCException(ERROR_IN_ENCLAVE, \"Failed to get BLS public key in enclave\");",
          "340:     }",
          "343:     if (DEBUG_PRINT) {",
          "344:       std::cerr << \"errMsg1 is \" << errMsg1 << std::endl;",
          "345:       std::cerr << \"pub key is\" << std::endl;",
          "346:       for (int i = 0; i < 4; i++)",
          "347:         std::cerr << pub_key_vect.at(i) << std::endl;",
          "348:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:   std::string DH_key_name = polyName + \"_\" + std::to_string(ind) + \":\";",
          "350:   std::shared_ptr<std::string> hexEncrKey_ptr = readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "353:   char *hexEncrKey = (char *) calloc(2 * BUF_LEN, 1);",
          "",
          "[Removed Lines]",
          "351:   std::cerr << \"encr DH key is \" << hexEncrKey_ptr << std::endl;",
          "",
          "[Added Lines]",
          "359:   if (DEBUG_PRINT) {",
          "360:     std::cerr << \"encr DH key is \" << hexEncrKey_ptr << std::endl;",
          "361:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "361:   char DHKey[ECDSA_SKEY_LEN];",
          "363:   decrypt_key(eid, &err_status, errMsg1, encrypted_DHkey, DH_enc_len, DHKey);",
          "366:   free(errMsg1);",
          "367:   free(hexEncrKey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:   if (err_status != 0){",
          "375:     throw RPCException(ERROR_IN_ENCLAVE, \"decrypt key failed in enclave\");",
          "376:   }",
          "",
          "---------------"
        ],
        "SGXRegistrationServer.cpp||SGXRegistrationServer.cpp": [
          "File: SGXRegistrationServer.cpp -> SGXRegistrationServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"LevelDB.h\"",
          "46: int DEBUG_PRINT = 0;",
          "48: SGXRegistrationServer *regs = nullptr;",
          "49: HttpServer *hs2 = nullptr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: int is_sgx_https = 1;",
          "",
          "---------------"
        ],
        "SGXWalletServer.cpp||SGXWalletServer.cpp": [
          "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   levelDb->visitKeys(&v, 100000000);",
          "79: }",
          "135:   hs = new HttpServer(BASE_PORT + 3);",
          "136:   s = new SGXWalletServer(*hs,",
          "",
          "[Removed Lines]",
          "133: int init_server(bool check_certs) { //without ssl",
          "",
          "[Added Lines]",
          "81: int init_https_server(bool check_certs) {",
          "82:   std::string rootCAPath = \"cert/rootCA.pem\";",
          "83:   std::string keyCAPath = \"cert/rootCA.key\";",
          "85:   if (access(rootCAPath.c_str(), F_OK) != 0 || access(keyCAPath.c_str(), F_OK) != 0){",
          "86:     std::cerr << \"YOU DO NOT HAVE ROOT CA CERTIFICATE\" << std::endl;",
          "87:     std::cerr << \"ROOT CA CERTIFICATE IS GOING TO BE CREATED\" << std::endl;",
          "89:     std::string genRootCACert = \"cd cert && ./create_CA\";",
          "91:     if (system(genRootCACert.c_str()) == 0){",
          "92:       std::cerr << \"ROOT CA CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "93:     }",
          "94:     else{",
          "95:       std::cerr << \"ROOT CA CERTIFICATE GENERATION FAILED\" << std::endl;",
          "96:       exit(-1);",
          "97:     }",
          "98:   }",
          "100:   std::string certPath = \"cert/SGXServerCert.crt\";",
          "101:   std::string keyPath = \"cert/SGXServerCert.key\";",
          "103:   if (access(certPath.c_str(), F_OK) != 0 || access(certPath.c_str(), F_OK) != 0){",
          "104:     std::cerr << \"YOU DO NOT HAVE SERVER CERTIFICATE \" << std::endl;",
          "105:     std::cerr << \"SERVER CERTIFICATE IS GOING TO BE CREATED\" << std::endl;",
          "107:     std::string genCert = \"cd cert && ./create_server_cert\";",
          "109:     if (system(genCert.c_str()) == 0){",
          "110:        std::cerr << \"SERVER CERTIFICATE IS SUCCESSFULLY GENERATED\" << std::endl;",
          "111:     }",
          "112:     else{",
          "113:       std::cerr << \"SERVER CERTIFICATE GENERATION FAILED\" << std::endl;",
          "114:       exit(-1);",
          "115:     }",
          "116:   }",
          "118:   hs = new HttpServer(BASE_PORT, certPath, keyPath, rootCAPath, check_certs, 10);",
          "119:   s = new SGXWalletServer(*hs,",
          "120:                       JSONRPC_SERVER_V2); // hybrid server (json-rpc 1.0 & 2.0)",
          "122:   if (!s->StartListening()) {",
          "123:     cerr << \"SGX Server could not start listening\" << endl;",
          "124:     exit(-1);",
          "125:   }",
          "126:   else{",
          "127:     cerr << \"SGX Server started on port \" << BASE_PORT << endl;",
          "128:   }",
          "129:   return 0;",
          "130: }",
          "133: int init_http_server() { //without ssl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193:       if ( !checkName(keyShareName, \"BLS_KEY\")){",
          "194:         throw RPCException(INVALID_POLY_NAME, \"Invalid BLSKey name\");",
          "195:       }",
          "197:       value = readFromDb(keyShareName);",
          "198:     } catch (RPCException _e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:       std::string cutHash = messageHash;",
          "197:       if (cutHash[0] == '0' && (cutHash[1] == 'x'||cutHash[1] == 'X')){",
          "198:         cutHash.erase(cutHash.begin(), cutHash.begin() + 2);",
          "199:       }",
          "200:       while (cutHash[0] == '0'){",
          "201:         cutHash.erase(cutHash.begin(), cutHash.begin() + 1);",
          "202:       }",
          "204:       if ( !checkHex(cutHash)){",
          "205:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "206:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "623:         throw RPCException(INVALID_POLY_NAME, \"Invalid BLSKey name\");",
          "624:       }",
          "625:       std::shared_ptr<std::string> encryptedKeyHex_ptr = readFromDb(BLSKeyName);",
          "628:       std::vector<std::string> public_key_vect = GetBLSPubKey(encryptedKeyHex_ptr->c_str());",
          "629:       for ( uint8_t i = 0; i < 4; i++) {",
          "630:         result[\"BLSPublicKeyShare\"][i] = public_key_vect.at(i);",
          "",
          "[Removed Lines]",
          "626:       std::cerr << \"encr_bls_key_share is \" << *encryptedKeyHex_ptr << std::endl;",
          "627:       std::cerr << \"length is \" << encryptedKeyHex_ptr->length()<< std::endl;",
          "",
          "[Added Lines]",
          "637:       if (DEBUG_PRINT) {",
          "638:         std::cerr << \"encr_bls_key_share is \" << *encryptedKeyHex_ptr << std::endl;",
          "639:         std::cerr << \"length is \" << encryptedKeyHex_ptr->length() << std::endl;",
          "640:       }",
          "",
          "---------------"
        ],
        "SGXWalletServer.h||SGXWalletServer.h": [
          "File: SGXWalletServer.h -> SGXWalletServer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #endif",
          "",
          "[Removed Lines]",
          "34: EXTERNC int init_server(bool check_certs );",
          "",
          "[Added Lines]",
          "34: EXTERNC int init_https_server(bool check_certs );",
          "35: EXTERNC int init_http_server();",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     sgxServerInited = 1;",
          "129:     init_enclave();",
          "130:     std::cerr << \"enclave inited\" << std::endl;",
          "131:     init_daemon();",
          "",
          "[Removed Lines]",
          "126:     init_server(check_cert);",
          "",
          "[Added Lines]",
          "126:     if (is_sgx_https) {",
          "127:       init_https_server(check_cert);",
          "128:       init_registration_server(sign_automatically);",
          "129:       init_csrmanager_server();",
          "130:     }",
          "131:     else {",
          "132:       init_http_server();",
          "133:     }",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "346: }",
          "349:   libff::init_alt_bn128_params();",
          "351:   mpz_t skey;",
          "352:   mpz_init(skey);",
          "355:   char skey_dec[mpz_sizeinbase (skey, 10) + 2];",
          "356:   char * skey_str = mpz_get_str(skey_dec, 10, skey);",
          "359:   libff::alt_bn128_Fr bls_skey(skey_dec);",
          "361:   libff::alt_bn128_G2 public_key = bls_skey * libff::alt_bn128_G2::one();",
          "",
          "[Removed Lines]",
          "348: void calc_bls_public_key(char* skey_hex, char* pub_key){",
          "353:   mpz_set_str(skey, skey_hex, 16);",
          "",
          "[Added Lines]",
          "348: int calc_bls_public_key(char* skey_hex, char* pub_key){",
          "353:   if (mpz_set_str(skey, skey_hex, 16) == -1){",
          "354:     return 1;",
          "355:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "364:   std::string result = ConvertG2ToString(public_key);",
          "366:   strncpy(pub_key, result.c_str(), result.length());",
          "367: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:   mpz_clear(skey);",
          "371:   return 0;",
          "",
          "---------------"
        ],
        "secure_enclave/DKGUtils.h||secure_enclave/DKGUtils.h": [
          "File: secure_enclave/DKGUtils.h -> secure_enclave/DKGUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: EXTERNC int Verification ( char * public_shares, mpz_t decr_secret_share, int _t, int ind);",
          "50: EXTERNC void calc_secret_shareG2_old(const char* public_shares, char * s_shareG2,",
          "51:                                  unsigned _t, unsigned ind);",
          "",
          "[Removed Lines]",
          "48: EXTERNC void calc_bls_public_key(char* skey, char* pub_key);",
          "",
          "[Added Lines]",
          "48: EXTERNC int calc_bls_public_key(char* skey, char* pub_key);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "797:     if (common_key == NULL){",
          "799:       snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "800:       return;",
          "801:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "801:       mpz_clear(sum);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809:     if (decr_sshare == NULL){",
          "811:         snprintf(err_string, BUF_LEN ,\"invalid common_key\");",
          "813:         return;",
          "814:     }",
          "",
          "[Removed Lines]",
          "812:         mpz_clear(decr_secret_share);",
          "",
          "[Added Lines]",
          "814:         mpz_clear(sum);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "885:     return;",
          "886:   }",
          "889: }",
          "",
          "[Removed Lines]",
          "888:   calc_bls_public_key(skey_hex, bls_pub_key);",
          "",
          "[Added Lines]",
          "890:   if (calc_bls_public_key(skey_hex, bls_pub_key) != 0){",
          "892:     snprintf(err_string, BUF_LEN,\"could not calculate bls public key\");",
          "893:     return;",
          "894:   }",
          "",
          "---------------"
        ],
        "sgxwallet.c||sgxwallet.c": [
          "File: sgxwallet.c -> sgxwallet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     exit(1);",
          "63:   }",
          "66:     switch (opt) {",
          "67:     case 'h':",
          "68:       if (strlen(argv[1]) == 2 ) {",
          "69:         fprintf(stderr, \"-c  client certificate will not be checked\\n\");",
          "70:         fprintf(stderr, \"-s  client certificate will be signed automatically\\n\");",
          "71:         printf(stderr, \"-d  turn on debug output\\n\");",
          "72:         exit(0);",
          "73:       } else {",
          "74:         fprintf(stderr, \"unknown flag %s\\n\", argv[1]);",
          "",
          "[Removed Lines]",
          "65:   while ((opt = getopt(argc, argv, \"cshd\")) != -1) {",
          "",
          "[Added Lines]",
          "65:   while ((opt = getopt(argc, argv, \"cshd0\")) != -1) {",
          "72:           printf(stderr, \"-0  SGXWalletServer will be launched on http (not https)\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     case 'd':",
          "84:       DEBUG_PRINT = 1;",
          "85:       break;",
          "86:     case '?': // fprintf(stderr, \"unknown flag\\n\");",
          "87:       exit(1);",
          "88:     default:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     case '0':",
          "88:       is_sgx_https = 0;",
          "89:      break;",
          "",
          "---------------"
        ],
        "sgxwallet_common.h||sgxwallet_common.h": [
          "File: sgxwallet_common.h -> sgxwallet_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <stdbool.h>",
          "36: extern int DEBUG_PRINT;",
          "38: #define BUF_LEN 1024",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: extern int is_sgx_https;",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "745: TEST_CASE(\"BLS_DKG test\", \"[bls_dkg]\") {",
          "746:   std::cerr<< \"test started\" << std::endl;",
          "747:   init_all(false, false);",
          "748:   cerr << \"Server inited\" << endl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748:   is_sgx_https = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "867: TEST_CASE(\"API test\", \"[api_test]\") {",
          "870:     cerr << \"API test started\" << endl;",
          "871:     init_all(false, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "872:     is_sgx_https = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "971: }",
          "973: TEST_CASE(\"getServerStatus test\", \"[getServerStatus_test]\") {",
          "974:   init_all( false, false );",
          "975:   HttpClient client(\"http://localhost:1029\");",
          "976:   StubClient c(client, JSONRPC_CLIENT_V2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "978:   is_sgx_https = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1044:  }",
          "1046: TEST_CASE(\"ManySimultaneousThreads\", \"[many_threads_test]\") {",
          "1047:   init_all( false, false );",
          "1049:   std::vector<std::thread> threads;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1052:   is_sgx_https = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1062: TEST_CASE(\"ecdsa API test\", \"[ecdsa_api_test]\") {",
          "1065:   cerr << \"ecdsa_api_test started\" << endl;",
          "1066:   init_all(false, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070:   is_sgx_https = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1105: TEST_CASE(\"dkg API test\", \"[dkg_api_test]\") {",
          "1108:   cerr << \"dkg_api_test started\" << endl;",
          "1109:   init_all(false, false);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1114:   is_sgx_https = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07538aefca12a4c71b1827dba1966ed44baadb04",
      "candidate_info": {
        "commit_hash": "07538aefca12a4c71b1827dba1966ed44baadb04",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/07538aefca12a4c71b1827dba1966ed44baadb04",
        "files": [
          "SEKManager.cpp",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-2002 fix few potential memory leaks",
        "before_after_code_files": [
          "SEKManager.cpp||SEKManager.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   vector<uint8_t> encr_SEK(1024, 0);",
          "130:   uint32_t enc_len = 0;",
          "133:   char SEK[65];",
          "134:   memset(SEK, 0, 65);",
          "136:   status = trustedGenerateSEK(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len, SEK);",
          "138:     throw SGXException(status, errMsg.data()) ;",
          "139:   }",
          "",
          "[Removed Lines]",
          "137:   if (status != SGX_SUCCESS ||  err_status != 0  ){",
          "",
          "[Added Lines]",
          "136:   if ( status != SGX_SUCCESS || err_status != 0  ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:   carray2Hex(encr_SEK.data(), enc_len, hexEncrKey.data());",
          "145:   cout << \"ATTENTION! THIS IS YOUR KEY FOR BACK UP. PLEASE COPY IT TO THE SAFE PLACE\" << endl;",
          "148:   if (!autoconfirm) {",
          "149:     std::string confirm_str = \"I confirm\";",
          "",
          "[Removed Lines]",
          "146:   cout << \"key is \" << SEK << endl;",
          "",
          "[Added Lines]",
          "145:   cout << \"YOUR KEY IS \" << SEK << endl;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1086:     int len = mpz_sizeinbase(Pkey->x, base) + 2;",
          "1088:     char arr_x[len];",
          "1091:     int n_zeroes = 64 - strlen(arr_x);",
          "1092:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "1089:     char *px = mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "[Added Lines]",
          "1048:     mpz_get_str(arr_x, base, Pkey->x);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1096:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "1098:     char arr_y[mpz_sizeinbase(Pkey->y, base) + 2];",
          "1100:     n_zeroes = 64 - strlen(arr_y);",
          "1101:     for (int i = 0; i < n_zeroes; i++) {",
          "1102:         pub_key_y[i] = '0';",
          "",
          "[Removed Lines]",
          "1099:     char *py = mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "[Added Lines]",
          "1058:     mpz_get_str(arr_y, base, Pkey->y);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1123:     if (status != 0) {",
          "1125:         snprintf(errString, BUF_LEN, \"aes decrypt failed with status %d\", status);",
          "1126:         return;",
          "1127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084:         domain_parameters_clear(curve);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1136:         snprintf(errString, BUF_LEN, \"invalid secret key\");",
          "1137:         mpz_clear(privateKeyMpz);",
          "1138:         return;",
          "1139:     }",
          "1142:     mpz_t msgMpz;",
          "1143:     mpz_init(msgMpz);",
          "1144:     if (mpz_set_str(msgMpz, hash, 16) == -1) {",
          "1146:         snprintf(errString, BUF_LEN, \"invalid message hash\");",
          "1147:         mpz_clear(msgMpz);",
          "1148:         return;",
          "1149:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1097:         domain_parameters_clear(curve);",
          "1106:         mpz_clear(privateKeyMpz);",
          "1108:         domain_parameters_clear(curve);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1159:     if (!signature_verify(msgMpz, sign, Pkey, curve)) {",
          "1161:         snprintf(errString, BUF_LEN, \"signature is not verified! \");",
          "1162:         return;",
          "1163:     }",
          "1166:     char arrM[mpz_sizeinbase(msgMpz, 16) + 2];",
          "1168:     snprintf(errString, BUF_LEN, \"message is %s \", arrM);",
          "1170:     char arrR[mpz_sizeinbase(sign->r, base) + 2];",
          "1172:     strncpy(sigR, arrR, 1024);",
          "1174:     char arrS[mpz_sizeinbase(sign->s, base) + 2];",
          "1176:     strncpy(sigS, arrS, 1024);",
          "",
          "[Removed Lines]",
          "1167:     char *msg = mpz_get_str(arrM, 16, msgMpz);",
          "1171:     char *r = mpz_get_str(arrR, base, sign->r);",
          "1175:     char *s = mpz_get_str(arrS, base, sign->s);",
          "",
          "[Added Lines]",
          "1123:         mpz_clear(privateKeyMpz);",
          "1124:         mpz_clear(msgMpz);",
          "1125:         domain_parameters_clear(curve);",
          "1126:         signature_free(sign);",
          "1127:         point_clear(Pkey);",
          "1133:     mpz_get_str(arrM, 16, msgMpz);",
          "1137:     mpz_get_str(arrR, base, sign->r);",
          "1141:     mpz_get_str(arrS, base, sign->s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09386fd27133811a940a54d44940a23acaa4e3a0",
      "candidate_info": {
        "commit_hash": "09386fd27133811a940a54d44940a23acaa4e3a0",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/09386fd27133811a940a54d44940a23acaa4e3a0",
        "files": [
          "SEKManager.cpp",
          "SEKManager.h",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "SEKManager.cpp||SEKManager.cpp",
          "SEKManager.h||SEKManager.h",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "SEKManager.cpp||SEKManager.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     uint32_t l = len;",
          "99:     std::cerr << \" l is \" << l << std::endl;",
          "102:     if (status != SGX_SUCCESS){",
          "103:       cerr << \"RPCException thrown with status \" << status << endl;",
          "104:       throw SGXException(status, errMsg.data());",
          "",
          "[Removed Lines]",
          "101:     status = set_SEK_backup(eid, &err_status, errMsg.data(), encr_SEK.data(), &l, SEK.c_str() );",
          "",
          "[Added Lines]",
          "101:     status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encr_SEK.data(), &l, SEK.c_str() );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   char SEK[65];",
          "134:   memset(SEK, 0, 65);",
          "137:   if (status != SGX_SUCCESS ||  err_status != 0  ){",
          "138:     throw SGXException(status, errMsg.data()) ;",
          "139:   }",
          "",
          "[Removed Lines]",
          "136:   status = generate_SEK(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len, SEK);",
          "",
          "[Added Lines]",
          "136:   status = trustedGenerateSEK(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len, SEK);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:   create_test_key();",
          "165: }",
          "168:   vector<char> errMsg(1024,0);",
          "169:   int err_status = 0;",
          "",
          "[Removed Lines]",
          "167: void set_SEK(std::shared_ptr<std::string> hex_encr_SEK){",
          "",
          "[Added Lines]",
          "167: void trustedSetSEK(std::shared_ptr<std::string> hex_encr_SEK){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:     throw SGXException(INVALID_HEX, \"Invalid encrypted SEK Hex\");",
          "179:   }",
          "182:   if ( status != SGX_SUCCESS || err_status != 0 ){",
          "183:     cerr << \"RPCException thrown\" << endl;",
          "184:     throw SGXException(status, errMsg.data()) ;",
          "",
          "[Removed Lines]",
          "181:   status = set_SEK(eid, &err_status, errMsg.data(), encr_SEK, len );",
          "",
          "[Added Lines]",
          "181:   status = trustedSetSEK(eid, &err_status, errMsg.data(), encr_SEK, len );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "214:   if (status != SGX_SUCCESS){",
          "215:     cerr << \"RPCException thrown with status \" << status << endl;",
          "216:     throw SGXException(status, errMsg.data());",
          "",
          "[Removed Lines]",
          "213:   status = set_SEK_backup(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len, SEK.c_str() );",
          "",
          "[Added Lines]",
          "213:   status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encr_SEK.data(), &enc_len, SEK.c_str() );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "231:     gen_SEK();",
          "232:   }",
          "233:   else{",
          "235:   }",
          "236: }",
          "",
          "[Removed Lines]",
          "234:     set_SEK(encr_SEK_ptr);",
          "",
          "[Added Lines]",
          "234:     trustedSetSEK(encr_SEK_ptr);",
          "",
          "---------------"
        ],
        "SEKManager.h||SEKManager.h": [
          "File: SEKManager.h -> SEKManager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: void gen_SEK();",
          "37: #ifdef __cplusplus",
          "39: #endif",
          "41: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "38: void set_SEK(std::shared_ptr<std::string> hex_encr_SEK);",
          "",
          "[Added Lines]",
          "38: void trustedSetSEK(std::shared_ptr<std::string> hex_encr_SEK);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "704: }",
          "707:                         uint32_t *dec_len,",
          "708:                         char *DH_key, char *s_shareG2, uint8_t _t, uint8_t _n, uint8_t ind1) {",
          "",
          "[Removed Lines]",
          "706: void complaint_response(int *err_status, char *err_string, uint8_t *encrypted_DHkey, uint8_t *encrypted_dkg_secret,",
          "",
          "[Added Lines]",
          "706: void trustedComplaintResponse(int *err_status, char *err_string, uint8_t *encrypted_DHkey, uint8_t *encrypted_dkg_secret,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "926:     }",
          "927: }",
          "930:                   uint8_t *encrypted_SEK, uint32_t *enc_len, char *SEK_hex) {",
          "931:     uint8_t SEK_raw[SGX_AESGCM_KEY_SIZE];",
          "",
          "[Removed Lines]",
          "929: void generate_SEK(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "929: void trustedGenerateSEK(int *err_status, char *err_string,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "957: }",
          "",
          "[Removed Lines]",
          "959: void set_SEK(int *err_status, char *err_string, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "",
          "[Added Lines]",
          "959: void trustedSetSEK(int *err_status, char *err_string, uint8_t *encrypted_SEK, uint64_t encr_len) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "977: }",
          "980:                     uint8_t *encrypted_SEK, uint32_t *enc_len, const char *SEK_hex) {",
          "982:     uint64_t len;",
          "",
          "[Removed Lines]",
          "979: void set_SEK_backup(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "979: void trustedSetSEK_backup(int *err_status, char *err_string,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:                                 uint64_t key_len,",
          "154:                                 [out, count = 320] char* bls_pub_key);",
          "157:                                 [user_check] int *err_status,",
          "158:                                 [out, count = 1024]  char* err_string,",
          "159:                                 [in, count = 1024] uint8_t *encrypted_DHkey,",
          "",
          "[Removed Lines]",
          "156:                 public void complaint_response(",
          "",
          "[Added Lines]",
          "156:                 public void trustedComplaintResponse(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:                                 uint8_t _n,",
          "166:                                 uint8_t ind1);",
          "169:                                 [user_check] int *err_status,",
          "170:                                 [out, count = 1024] char *err_string,",
          "171:                                 [out, count = 1024] uint8_t *encrypted_SEK,",
          "172:                                 [user_check] uint32_t *enc_len,",
          "173:                                 [out, count = 65] char* hex_SEK);",
          "176:                                 [user_check] int *err_status,",
          "177:                                 [out, count = 1024] char *err_string,",
          "178:                                 [in, count = 1024] uint8_t *encrypted_SEK,",
          "179:                                 uint64_t encr_len);",
          "182:                                 [user_check] int *err_status,",
          "183:                                 [out, count = 1024] char *err_string,",
          "184:                                 [out, count = 1024] uint8_t *encrypted_SEK,",
          "",
          "[Removed Lines]",
          "168:                 public void generate_SEK(",
          "175:                 public void set_SEK(",
          "181:                 public void set_SEK_backup(",
          "",
          "[Added Lines]",
          "168:                 public void trustedGenerateSEK(",
          "175:                 public void trustedSetSEK(",
          "181:                 public void trustedSetSEK_backup(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffc03aadc87f224acbf4d162b538c5fde43904cf",
      "candidate_info": {
        "commit_hash": "ffc03aadc87f224acbf4d162b538c5fde43904cf",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/ffc03aadc87f224acbf4d162b538c5fde43904cf",
        "files": [
          "secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-3067-finished-cleanup",
        "before_after_code_files": [
          "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/DKGUtils.cpp||secure_enclave/DKGUtils.cpp": [
          "File: secure_enclave/DKGUtils.cpp -> secure_enclave/DKGUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:     try {",
          "455:             libff::alt_bn128_G2 pub_share;",
          "457:             uint64_t pos0 = share_length * i;",
          "",
          "[Removed Lines]",
          "454:         for (size_t i = 0; i < _t; ++i) {",
          "",
          "[Added Lines]",
          "454:         for (int i = 0; i < _t; i++) {",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:     point Pkey = point_init();",
          "290:     mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);",
          "",
          "[Removed Lines]",
          "288:     get_global_random(rand_char, 32);",
          "",
          "[Added Lines]",
          "288:     get_global_random((unsigned char *)rand_char, 32);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294:     signature_extract_public_key(Pkey, skey, curve);",
          "297:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "298:     int n_zeroes = 64 - strlen(arr_x);",
          "299:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "296:     int len = mpz_sizeinbase(Pkey->x, ECDSA_SKEY_BASE) + 2;SAFE_CHAR_BUF(arr_x, BUF_LEN);",
          "",
          "[Added Lines]",
          "296:     SAFE_CHAR_BUF(arr_x, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     }",
          "319:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
          "320:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
          "324:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
          "",
          "[Removed Lines]",
          "321:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", strlen(skey_str));",
          "323:     int status = AES_encrypt(skey_str, encryptedPrivateKey, BUF_LEN);",
          "",
          "[Added Lines]",
          "321:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
          "323:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:     LOG_DEBUG(__FUNCTION__);",
          "342:     INIT_ERROR_STATE",
          "348:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
          "350:     mpz_t privateKeyMpz;",
          "351:     mpz_init(privateKeyMpz);",
          "354:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
          "355:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
          "",
          "[Removed Lines]",
          "344:     CHECK_STATE(encryptedPrivateKey);",
          "345:     CHECK_STATE(pub_key_x);",
          "346:     CHECK_STATE(pub_key_y);",
          "352:     point Pkey = point_init();",
          "",
          "[Added Lines]",
          "348:     point pKey = point_init();",
          "350:     point pKey_test = point_init();",
          "352:     CHECK_STATE(encryptedPrivateKey);",
          "353:     CHECK_STATE(pub_key_x);",
          "354:     CHECK_STATE(pub_key_y);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:     CHECK_STATUS(\"mpz_set_str failed for private key\");",
          "370:         snprintf(errString, BUF_LEN, \"Points are not equal\");",
          "371:         LOG_ERROR(errString);",
          "",
          "[Removed Lines]",
          "364:     signature_extract_public_key(Pkey, privateKeyMpz, curve);",
          "366:     point Pkey_test = point_init();",
          "367:     point_multiplication(Pkey_test, privateKeyMpz, curve->G, curve);",
          "369:     if (!point_cmp(Pkey, Pkey_test)) {",
          "",
          "[Added Lines]",
          "366:     signature_extract_public_key(pKey, privateKeyMpz, curve);",
          "369:     point_multiplication(pKey_test, privateKeyMpz, curve->G, curve);",
          "371:     if (!point_cmp(pKey, pKey_test)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "374:     }",
          "376:     SAFE_CHAR_BUF(arr_x, BUF_LEN);",
          "379:     int n_zeroes = 64 - strlen(arr_x);",
          "380:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "377:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);",
          "",
          "[Added Lines]",
          "379:     mpz_get_str(arr_x, ECDSA_SKEY_BASE, pKey->x);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "384:     strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);",
          "386:     SAFE_CHAR_BUF(arr_y, BUF_LEN);",
          "389:     n_zeroes = 64 - strlen(arr_y);",
          "390:     for (int i = 0; i < n_zeroes; i++) {",
          "",
          "[Removed Lines]",
          "387:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);",
          "",
          "[Added Lines]",
          "389:     mpz_get_str(arr_y, ECDSA_SKEY_BASE, pKey->y);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "395:     SET_SUCCESS",
          "396:     clean:",
          "397:     mpz_clear(privateKeyMpz);",
          "400: }",
          "402: static uint64_t sigCounter = 0;",
          "",
          "[Removed Lines]",
          "398:     point_clear(Pkey);",
          "399:     point_clear(Pkey_test);",
          "",
          "[Added Lines]",
          "400:     point_clear(pKey);",
          "401:     point_clear(pKey_test);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "499:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
          "",
          "[Removed Lines]",
          "497:     int status = AES_encrypt(key, encryptedPrivateKey, BUF_LEN);",
          "",
          "[Added Lines]",
          "499:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53fefaa7940e7be5e2f863194d94f8cf881b7292",
      "candidate_info": {
        "commit_hash": "53fefaa7940e7be5e2f863194d94f8cf881b7292",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/53fefaa7940e7be5e2f863194d94f8cf881b7292",
        "files": [
          "BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp",
          "ECDSACrypto.cpp",
          "ServerInit.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "secure_enclave/secure_enclave.i",
          "testw.cpp"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "ServerInit.cpp||ServerInit.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "secure_enclave/secure_enclave.i||secure_enclave/secure_enclave.i",
          "testw.cpp||testw.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
            "testw.cpp||testw.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     }",
          "269:     sgx_status_t status =",
          "271:                                  sz, xStrArg, yStrArg, signature);",
          "274:     if (status != SGX_SUCCESS) {",
          "277:     }",
          "",
          "[Removed Lines]",
          "270:             bls_sign_message_aes(eid, &errStatus, errMsg, encryptedKey,",
          "275:         cerr << \"SGX enclave call  to bls_sign_message failed:\" << status << std::endl;",
          "276:         BOOST_THROW_EXCEPTION(runtime_error(\"SGX enclave call  to bls_sign_message failed\"));",
          "",
          "[Added Lines]",
          "270:             trustedBlsSignMessage_aes(eid, &errStatus, errMsg, encryptedKey,",
          "275:         cerr << \"SGX enclave call  to trustedBlsSignMessage failed:\" << status << std::endl;",
          "276:         BOOST_THROW_EXCEPTION(runtime_error(\"SGX enclave call  to trustedBlsSignMessage failed\"));",
          "",
          "---------------"
        ],
        "BLSPrivateKeyShareSGX.cpp||BLSPrivateKeyShareSGX.cpp": [
          "File: BLSPrivateKeyShareSGX.cpp -> BLSPrivateKeyShareSGX.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   cerr << \"Key is \" + *encryptedKeyHex << endl;",
          "167:   sgx_status_t status =",
          "169:                        encryptedKeyHex->size() / 2, xStrArg, yStrArg, signature);",
          "",
          "[Removed Lines]",
          "168:       bls_sign_message(eid, &errStatus, errMsg, encryptedKey,",
          "",
          "[Added Lines]",
          "168:       trustedBlsSignMessage(eid, &errStatus, errMsg, encryptedKey,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:   if (status != SGX_SUCCESS) {",
          "179:   }",
          "182:   if (errStatus != 0) {",
          "184:     return nullptr;",
          "185:   }",
          "",
          "[Removed Lines]",
          "177:     gmp_printf(\"SGX enclave call  to bls_sign_message failed: 0x%04x\\n\", status);",
          "178:     BOOST_THROW_EXCEPTION(runtime_error(\"SGX enclave call  to bls_sign_message failed\"));",
          "183:     BOOST_THROW_EXCEPTION(runtime_error(\"Enclave bls_sign_message failed:\" + to_string(errStatus) + \":\" + errMsg ));",
          "",
          "[Added Lines]",
          "177:     gmp_printf(\"SGX enclave call  to trustedBlsSignMessage failed: 0x%04x\\n\", status);",
          "178:     BOOST_THROW_EXCEPTION(runtime_error(\"SGX enclave call  to trustedBlsSignMessage failed\"));",
          "183:     BOOST_THROW_EXCEPTION(runtime_error(\"Enclave trustedBlsSignMessage failed:\" + to_string(errStatus) + \":\" + errMsg ));",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     uint32_t enc_len = 0;",
          "54:     if (!encryptKeys)",
          "56:     else",
          "59:     if (status != SGX_SUCCESS || err_status != 0) {",
          "60:         spdlog::error(\"RPCException thrown with status {}\", status);",
          "",
          "[Removed Lines]",
          "55:         status = generate_ecdsa_key(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "57:         status = generate_ecdsa_key_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "55:         status = trustedGenerateEcdsaKey(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "57:         status = trustedGenerateEcdsaKey_aes(eid, &err_status, errMsg, encr_pr_key, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:     }",
          "116:     if (!encryptKeys)",
          "118:                 pubKeyY.data());",
          "120:             errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(), pubKeyY.data());",
          "121:     if (err_status != 0) {",
          "122:         throw SGXException(-666, errMsg.data());",
          "",
          "[Removed Lines]",
          "117:         status = get_public_ecdsa_key(eid, &err_status, errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(),",
          "119:     else status = get_public_ecdsa_key_aes(eid, &err_status,",
          "",
          "[Added Lines]",
          "117:         status = trustedGetPublicEcdsaKey(eid, &err_status, errMsg.data(), encrPrKey.data(), enc_len, pubKeyX.data(),",
          "119:     else status = trustedGetPublicEcdsaKey_aes(eid, &err_status,",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     spdlog::info(\"Enclave created and started successfully\");",
          "99:     if (status != SGX_SUCCESS) {",
          "101:         exit(1);",
          "102:     }",
          "",
          "[Removed Lines]",
          "98:     status = trusted_enclave_init(eid, 0);",
          "100:         spdlog::error(\"trusted_enclave_init failed: {}\", status);",
          "",
          "[Added Lines]",
          "98:     status = trustedEnclaveInit(eid, 0);",
          "100:         spdlog::error(\"trustedEnclaveInit failed: {}\", status);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: void free_function(void *, size_t);",
          "76:     oc_printf(\"Initing tgmp library\\n\");",
          "77:     oc_realloc_func = &reallocate_function;",
          "78:     oc_free_func = &free_function;",
          "",
          "[Removed Lines]",
          "75: void trusted_enclave_init(uint32_t _logLevel) {",
          "",
          "[Added Lines]",
          "75: void trustedEnclaveInit(uint32_t _logLevel) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     return (void *) nptr;",
          "118: }",
          "130:                         uint8_t *encrypted_key, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "132:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "120: void e_mpz_add(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "122: void e_mpz_mul(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "124: void e_mpz_div(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "126: void e_mpf_div(mpf_t *c_un, mpf_t *a_un, mpf_t *b_un) {}",
          "129: void generate_ecdsa_key(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "120: void trustedEMpzAdd(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "122: void trustedEMpzMul(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "124: void trustedEMpzDiv(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "126: void trustedEMpfDiv(mpf_t *c_un, mpf_t *a_un, mpf_t *b_un) {}",
          "129: void trustedGenerateEcdsaKey(int *err_status, char *err_string,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201: }",
          "205:                           uint8_t *encrypted_key, uint32_t dec_len, char *pub_key_x, char *pub_key_y) {",
          "",
          "[Removed Lines]",
          "204: void get_public_ecdsa_key(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "204: void trustedGetPublicEcdsaKey(int *err_status, char *err_string,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "490: }",
          "494:                       uint32_t enc_len, char *_hashX,",
          "495:                       char *_hashY, char *signature) {",
          "",
          "[Removed Lines]",
          "493: void bls_sign_message(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "493: void trustedBlsSignMessage(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "641:     uint32_t enc_len;",
          "644:     if (*err_status != 0) {",
          "645:         return;",
          "646:     }",
          "",
          "[Removed Lines]",
          "643:     generate_ecdsa_key(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "643:     trustedGenerateEcdsaKey(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "998: }",
          "1001:                             uint8_t *encrypted_key, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
          "1003:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "1000: void generate_ecdsa_key_aes(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "1000: void trustedGenerateEcdsaKey_aes(int *err_status, char *err_string,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1069:     point_clear(Pkey);",
          "1070: }",
          "1073:                               uint8_t *encrypted_key, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
          "1075:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "1072: void get_public_ecdsa_key_aes(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "1072: void trustedGetPublicEcdsaKey_aes(int *err_status, char *err_string,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1316: }",
          "1319:                           uint32_t enc_len, char *_hashX,",
          "1320:                           char *_hashY, char *signature) {",
          "",
          "[Removed Lines]",
          "1318: void bls_sign_message_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "1318: void trustedBlsSignMessage_aes(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1431:     uint32_t enc_len;",
          "1434:     if (*err_status != 0) {",
          "1435:         return;",
          "1436:     }",
          "",
          "[Removed Lines]",
          "1433:     generate_ecdsa_key_aes(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "[Added Lines]",
          "1433:     trustedGenerateEcdsaKey_aes(err_status, err_string, encrypted_skey, &enc_len, pub_key_x, pub_key_y);",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   include \"sgx_tgmp.h\"",
          "16:    [user_check] mpz_t *c, [user_check] mpz_t *a, [user_check] mpz_t *b",
          "17:   );",
          "20:    [user_check] mpz_t *c, [user_check] mpz_t *a, [user_check] mpz_t *b",
          "21:   );",
          "24:    [user_check] mpz_t *c, [user_check] mpz_t *a, [user_check] mpz_t *b",
          "25:   );",
          "28:    [user_check] mpf_t *c, [user_check] mpf_t *a, [user_check] mpf_t *b",
          "29:   );",
          "32:                                 [user_check] int *err_status,",
          "33:                                 [out, count = 1024] char* err_string,",
          "34:                                 [out, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "13:   public void trusted_enclave_init(uint32_t _logLevel);",
          "15:   public void e_mpz_add(",
          "19:   public void e_mpz_mul(",
          "23:   public void e_mpz_div(",
          "27:   public void e_mpf_div(",
          "31:   public void generate_ecdsa_key (",
          "",
          "[Added Lines]",
          "13:   public void trustedEnclaveInit(uint32_t _logLevel);",
          "15:   public void trustedEMpzAdd(",
          "19:   public void trustedEMpzMul(",
          "23:   public void trustedEMpzDiv(",
          "27:   public void trustedEMpfDiv(",
          "31:   public void trustedGenerateEcdsaKey (",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:                                 [out, count = 1024] char * pub_key_x,",
          "37:                                 [out, count = 1024] char * pub_key_y);",
          "40:                                 [user_check] int *err_status,",
          "41:                                 [out, count = 1024] char* err_string,",
          "42:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "39:   public void get_public_ecdsa_key (",
          "",
          "[Added Lines]",
          "39:   public void trustedGetPublicEcdsaKey (",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:                                 uint32_t enc_len,",
          "59:                                 [out, count = 1024] char* key );",
          "62:                                 [user_check] int *err_status,",
          "63:                                 [out, count = 1024] char* err_string,",
          "64:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "61:   public void bls_sign_message (",
          "",
          "[Added Lines]",
          "61:   public void trustedBlsSignMessage (",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:                                 [user_check] uint32_t *enc_len,",
          "186:                                 [in, count = 65] const char* SEK_hex);",
          "189:                                 [user_check] int *err_status,",
          "190:                                 [out, count = 1024] char* err_string,",
          "191:                                 [out, count = ECDSA_ENCR_LEN] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "188:                 public void generate_ecdsa_key_aes (",
          "",
          "[Added Lines]",
          "188:                 public void trustedGenerateEcdsaKey_aes (",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "193:                                 [out, count = 1024] char * pub_key_x,",
          "194:                                 [out, count = 1024] char * pub_key_y);",
          "197:                                 [user_check] int *err_status,",
          "198:                                 [out, count = 1024] char* err_string,",
          "199:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "196:                 public void get_public_ecdsa_key_aes(",
          "",
          "[Added Lines]",
          "196:                 public void trustedGetPublicEcdsaKey_aes(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "289:                         [out, count = 1024] uint8_t * encr_bls_key,",
          "290:                         [user_check] uint32_t *enc_bls_key_len);",
          "293:                         [user_check] int *err_status,",
          "294:                         [out, count = 1024] char* err_string,",
          "295:                         [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "292:                 public void bls_sign_message_aes (",
          "",
          "[Added Lines]",
          "292:                 public void trustedBlsSignMessage_aes (",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.i||secure_enclave/secure_enclave.i": [
          "File: secure_enclave/secure_enclave.i -> secure_enclave/secure_enclave.i",
          "--- Hunk 1 ---",
          "[Context before]",
          "5464: # 10 \"secure_enclave_t.h\" 2",
          "5465: # 19 \"secure_enclave_t.h\"",
          "5466: void tgmp_init(void);",
          "5472: void encrypt_key(int* err_status, char* err_string, char* key, uint8_t* encrypted_key, uint32_t* enc_len);",
          "5473: void decrypt_key(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t enc_len, char* key);",
          "5475: void gen_dkg_secret(int* err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint32_t* enc_len, size_t _t);",
          "5476: void decrypt_dkg_secret(int* err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t enc_len);",
          "5477: void get_secret_shares(int* err_status, char* err_string, uint8_t* decrypted_dkg_secret, uint32_t enc_len, char* secret_shares, unsigned int _t, unsigned int _n);",
          "",
          "[Removed Lines]",
          "5467: void e_mpz_add(mpz_t* c, mpz_t* a, mpz_t* b);",
          "5468: void e_mpz_mul(mpz_t* c, mpz_t* a, mpz_t* b);",
          "5469: void e_mpz_div(mpz_t* c, mpz_t* a, mpz_t* b);",
          "5470: void e_mpf_div(mpf_t* c, mpf_t* a, mpf_t* b);",
          "5471: void generate_ecdsa_key(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t* enc_len, char* pub_key_x, char* pub_key_y);",
          "5474: void bls_sign_message(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t enc_len, char* hashX, char* hashY, char* signature);",
          "",
          "[Added Lines]",
          "5467: void trustedEMpzAdd(mpz_t* c, mpz_t* a, mpz_t* b);",
          "5468: void trustedEMpzMul(mpz_t* c, mpz_t* a, mpz_t* b);",
          "5469: void trustedEMpzDiv(mpz_t* c, mpz_t* a, mpz_t* b);",
          "5470: void trustedEMpfDiv(mpf_t* c, mpf_t* a, mpf_t* b);",
          "5471: void trustedGenerateEcdsaKey(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t* enc_len, char* pub_key_x, char* pub_key_y);",
          "5474: void trustedBlsSignMessage(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t enc_len, char* hashX, char* hashY, char* signature);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6682:     return (void *) nptr;",
          "6683: }",
          "6695:                         uint8_t *encrypted_key, uint32_t *enc_len, char * pub_key_x, char * pub_key_y) {",
          "6697:   domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "6685: void e_mpz_add(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "6687: void e_mpz_mul(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "6689: void e_mpz_div(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "6691: void e_mpf_div(mpf_t *c_un, mpf_t *a_un, mpf_t *b_un) {}",
          "6694: void generate_ecdsa_key(int *err_status, char *err_string,",
          "",
          "[Added Lines]",
          "6685: void trustedEMpzAdd(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "6687: void trustedEMpzMul(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "6689: void trustedEMpzDiv(mpz_t *c_un, mpz_t *a_un, mpz_t *b_un) {}",
          "6691: void trustedEMpfDiv(mpf_t *c_un, mpf_t *a_un, mpf_t *b_un) {}",
          "6694: void trustedGenerateEcdsaKey(int *err_status, char *err_string,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6857: }",
          "6861:                       uint32_t enc_len, char *_hashX,",
          "6862:                       char *_hashY, char *signature) {",
          "",
          "[Removed Lines]",
          "6860: void bls_sign_message(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "6860: void trustedBlsSignMessage(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------"
        ],
        "testw.cpp||testw.cpp": [
          "File: testw.cpp -> testw.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:                                 pub_key_y.data());",
          "436:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "433:     status = generate_ecdsa_key(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "",
          "[Added Lines]",
          "433:     status = trustedGenerateEcdsaKey(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470:     vector<char> pub_key_y(BUF_LEN, 0);",
          "471:     uint32_t enc_len = 0;",
          "474:                                 pub_key_y.data());",
          "476:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "473:     status = generate_ecdsa_key(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "",
          "[Added Lines]",
          "473:     status = trustedGenerateEcdsaKey(eid, &err_status, errMsg.data(), encr_pr_key.data(), &enc_len, pub_key_x.data(),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "493:     uint32_t encLen = 0;",
          "497:                                 pubKeyY.data());",
          "499:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "496:     status = generate_ecdsa_key(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
          "",
          "[Added Lines]",
          "496:     status = trustedGenerateEcdsaKey(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:     vector<char> receivedPubKeyX(BUF_LEN, 0);",
          "502:     vector<char> receivedPubKeyY(BUF_LEN, 0);",
          "505:                                   receivedPubKeyY.data());",
          "506:     REQUIRE(status == SGX_SUCCESS);",
          "",
          "[Removed Lines]",
          "504:     status = get_public_ecdsa_key(eid, &errStatus, errMsg.data(), encPrivKey.data(), encLen, receivedPubKeyX.data(),",
          "",
          "[Added Lines]",
          "504:     status = trustedGetPublicEcdsaKey(eid, &errStatus, errMsg.data(), encPrivKey.data(), encLen, receivedPubKeyX.data(),",
          "",
          "---------------"
        ]
      }
    }
  ]
}