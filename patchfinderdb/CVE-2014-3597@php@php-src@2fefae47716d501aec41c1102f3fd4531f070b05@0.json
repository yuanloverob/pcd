{
  "cve_id": "CVE-2014-3597",
  "cve_desc": "Multiple buffer overflows in the php_parserr function in ext/standard/dns.c in PHP before 5.4.32 and 5.5.x before 5.5.16 allow remote DNS servers to cause a denial of service (application crash) or possibly execute arbitrary code via a crafted DNS record, related to the dns_get_record function and the dn_expand function.  NOTE: this issue exists because of an incomplete fix for CVE-2014-4049.",
  "repo": "php/php-src",
  "patch_hash": "2fefae47716d501aec41c1102f3fd4531f070b05",
  "patch_info": {
    "commit_hash": "2fefae47716d501aec41c1102f3fd4531f070b05",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/2fefae47716d501aec41c1102f3fd4531f070b05",
    "files": [
      "ext/standard/dns.c"
    ],
    "message": "Fixed Sec Bug #67717 segfault in dns_get_record CVE-2014-3597\n\nIncomplete fix for CVE-2014-4049\n\nCheck possible buffer overflow\n- pass real buffer end to dn_expand calls\n- check buffer len before each read",
    "before_after_code_files": [
      "ext/standard/dns.c||ext/standard/dns.c"
    ]
  },
  "patch_diff": {
    "ext/standard/dns.c||ext/standard/dns.c": [
      "File: ext/standard/dns.c -> ext/standard/dns.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "413: #if HAVE_FULL_DNS_FUNCS",
      "417: {",
      "418:  u_short type, class, dlen;",
      "419:  u_long ttl;",
      "",
      "[Removed Lines]",
      "416: static u_char *php_parserr(u_char *cp, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
      "",
      "[Added Lines]",
      "415: #define CHECKCP(n) do { \\",
      "416:  if (cp + n > end) { \\",
      "417:   return NULL; \\",
      "418:  } \\",
      "419: } while (0)",
      "422: static u_char *php_parserr(u_char *cp, u_char *end, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "429:  if (n < 0) {",
      "430:   return NULL;",
      "431:  }",
      "432:  cp += n;",
      "434:  GETSHORT(type, cp);",
      "435:  GETSHORT(class, cp);",
      "436:  GETLONG(ttl, cp);",
      "437:  GETSHORT(dlen, cp);",
      "438:  if (type_to_fetch != T_ANY && type != type_to_fetch) {",
      "439:   cp += dlen;",
      "440:   return cp;",
      "",
      "[Removed Lines]",
      "428:  n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);",
      "",
      "[Added Lines]",
      "434:  n = dn_expand(answer->qb2, end, cp, name, sizeof(name) - 2);",
      "440:  CHECKCP(10);",
      "445:  CHECKCP(dlen);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "462:  switch (type) {",
      "463:   case DNS_T_A:",
      "464:    add_assoc_string(*subarray, \"type\", \"A\", 1);",
      "465:    snprintf(name, sizeof(name), \"%d.%d.%d.%d\", cp[0], cp[1], cp[2], cp[3]);",
      "466:    add_assoc_string(*subarray, \"ip\", name, 1);",
      "467:    cp += dlen;",
      "468:    break;",
      "469:   case DNS_T_MX:",
      "470:    add_assoc_string(*subarray, \"type\", \"MX\", 1);",
      "471:    GETSHORT(n, cp);",
      "472:    add_assoc_long(*subarray, \"pri\", n);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "472:    CHECKCP(4);",
      "479:    CHECKCP(2);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "485:    if (type == DNS_T_PTR) {",
      "486:     add_assoc_string(*subarray, \"type\", \"PTR\", 1);",
      "487:    }",
      "489:    if (n < 0) {",
      "490:     return NULL;",
      "491:    }",
      "",
      "[Removed Lines]",
      "488:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
      "",
      "[Added Lines]",
      "498:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "495:   case DNS_T_HINFO:",
      "497:    add_assoc_string(*subarray, \"type\", \"HINFO\", 1);",
      "498:    n = *cp & 0xFF;",
      "499:    cp++;",
      "500:    add_assoc_stringl(*subarray, \"cpu\", (char*)cp, n, 1);",
      "501:    cp += n;",
      "502:    n = *cp & 0xFF;",
      "503:    cp++;",
      "504:    add_assoc_stringl(*subarray, \"os\", (char*)cp, n, 1);",
      "505:    cp += n;",
      "506:    break;",
      "507:   case DNS_T_TXT:",
      "508:    {",
      "510:     zval *entries = NULL;",
      "512:     add_assoc_string(*subarray, \"type\", \"TXT\", 1);",
      "",
      "[Removed Lines]",
      "509:     int ll = 0;",
      "",
      "[Added Lines]",
      "508:    CHECKCP(1);",
      "511:    CHECKCP(n);",
      "514:    CHECKCP(1);",
      "517:    CHECKCP(n);",
      "523:     int l1 = 0, l2 = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "515:     MAKE_STD_ZVAL(entries);",
      "516:     array_init(entries);",
      "523:      }",
      "527:     }",
      "529:     cp += dlen;",
      "532:     add_assoc_zval(*subarray, \"entries\", entries);",
      "533:    }",
      "534:    break;",
      "535:   case DNS_T_SOA:",
      "536:    add_assoc_string(*subarray, \"type\", \"SOA\", 1);",
      "538:    if (n < 0) {",
      "539:     return NULL;",
      "540:    }",
      "541:    cp += n;",
      "542:    add_assoc_string(*subarray, \"mname\", name, 1);",
      "544:    if (n < 0) {",
      "545:     return NULL;",
      "546:    }",
      "547:    cp += n;",
      "548:    add_assoc_string(*subarray, \"rname\", name, 1);",
      "549:    GETLONG(n, cp);",
      "550:    add_assoc_long(*subarray, \"serial\", n);",
      "551:    GETLONG(n, cp);",
      "",
      "[Removed Lines]",
      "518:     while (ll < dlen) {",
      "519:      n = cp[ll];",
      "520:      if ((ll + n) >= dlen) {",
      "522:       n = dlen - (ll + 1);",
      "524:      memcpy(tp + ll , cp + ll + 1, n);",
      "525:      add_next_index_stringl(entries, cp + ll + 1, n, 1);",
      "526:      ll = ll + n + 1;",
      "528:     tp[dlen] = '\\0';",
      "531:     add_assoc_stringl(*subarray, \"txt\", tp, (dlen>0)?dlen - 1:0, 0);",
      "537:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
      "543:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
      "",
      "[Added Lines]",
      "532:     while (l1 < dlen) {",
      "533:      n = cp[l1];",
      "534:      if ((l1 + n) >= dlen) {",
      "536:       n = dlen - (l1 + 1);",
      "537:      }",
      "538:      if (n) {",
      "539:       memcpy(tp + l2 , cp + l1 + 1, n);",
      "540:       add_next_index_stringl(entries, cp + l1 + 1, n, 1);",
      "542:      l1 = l1 + n + 1;",
      "543:      l2 = l2 + n;",
      "545:     tp[l2] = '\\0';",
      "548:     add_assoc_stringl(*subarray, \"txt\", tp, l2, 0);",
      "554:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
      "560:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
      "566:    CHECKCP(5*4);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "559:    break;",
      "560:   case DNS_T_AAAA:",
      "561:    tp = (u_char*)name;",
      "562:    for(i=0; i < 8; i++) {",
      "563:     GETSHORT(s, cp);",
      "564:     if (s != 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "580:    CHECKCP(8*2);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "593:   case DNS_T_A6:",
      "594:    p = cp;",
      "595:    add_assoc_string(*subarray, \"type\", \"A6\", 1);",
      "596:    n = ((int)cp[0]) & 0xFF;",
      "597:    cp++;",
      "598:    add_assoc_long(*subarray, \"masklen\", n);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "615:    CHECKCP(1);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "628:     cp++;",
      "629:    }",
      "630:    for (i = (n + 8) / 16; i < 8; i++) {",
      "631:     GETSHORT(s, cp);",
      "632:     if (s != 0) {",
      "633:      if (tp > (u_char *)name) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "651:     CHECKCP(2);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "657:    tp[0] = '\\0';",
      "658:    add_assoc_string(*subarray, \"ipv6\", name, 1);",
      "659:    if (cp < p + dlen) {",
      "661:     if (n < 0) {",
      "662:      return NULL;",
      "663:     }",
      "",
      "[Removed Lines]",
      "660:     n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
      "",
      "[Added Lines]",
      "681:     n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "666:    }",
      "667:    break;",
      "668:   case DNS_T_SRV:",
      "669:    add_assoc_string(*subarray, \"type\", \"SRV\", 1);",
      "670:    GETSHORT(n, cp);",
      "671:    add_assoc_long(*subarray, \"pri\", n);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "690:    CHECKCP(3*2);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "673:    add_assoc_long(*subarray, \"weight\", n);",
      "674:    GETSHORT(n, cp);",
      "675:    add_assoc_long(*subarray, \"port\", n);",
      "677:    if (n < 0) {",
      "678:     return NULL;",
      "679:    }",
      "",
      "[Removed Lines]",
      "676:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
      "",
      "[Added Lines]",
      "698:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "681:    add_assoc_string(*subarray, \"target\", name, 1);",
      "682:    break;",
      "683:   case DNS_T_NAPTR:",
      "684:    add_assoc_string(*subarray, \"type\", \"NAPTR\", 1);",
      "685:    GETSHORT(n, cp);",
      "686:    add_assoc_long(*subarray, \"order\", n);",
      "687:    GETSHORT(n, cp);",
      "688:    add_assoc_long(*subarray, \"pref\", n);",
      "689:    n = (cp[0] & 0xFF);",
      "691:    cp += n;",
      "692:    n = (cp[0] & 0xFF);",
      "694:    cp += n;",
      "695:    n = (cp[0] & 0xFF);",
      "697:    cp += n;",
      "699:    if (n < 0) {",
      "700:     return NULL;",
      "701:    }",
      "",
      "[Removed Lines]",
      "690:    add_assoc_stringl(*subarray, \"flags\", (char*)++cp, n, 1);",
      "693:    add_assoc_stringl(*subarray, \"services\", (char*)++cp, n, 1);",
      "696:    add_assoc_stringl(*subarray, \"regex\", (char*)++cp, n, 1);",
      "698:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
      "",
      "[Added Lines]",
      "706:    CHECKCP(2*2);",
      "713:    CHECKCP(1);",
      "715:    cp++;",
      "716:    CHECKCP(n);",
      "717:    add_assoc_stringl(*subarray, \"flags\", (char*)cp, n, 1);",
      "720:    CHECKCP(1);",
      "722:    cp++;",
      "723:    CHECKCP(n);",
      "724:    add_assoc_stringl(*subarray, \"services\", (char*)cp, n, 1);",
      "727:    CHECKCP(1);",
      "729:    cp++;",
      "730:    CHECKCP(n);",
      "731:    add_assoc_stringl(*subarray, \"regex\", (char*)cp, n, 1);",
      "734:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "888:    while (an-- && cp && cp < end) {",
      "889:     zval *retval;",
      "892:     if (retval != NULL && store_results) {",
      "893:      add_next_index_zval(return_value, retval);",
      "894:     }",
      "",
      "[Removed Lines]",
      "891:     cp = php_parserr(cp, &answer, type_to_fetch, store_results, raw, &retval);",
      "",
      "[Added Lines]",
      "927:     cp = php_parserr(cp, end, &answer, type_to_fetch, store_results, raw, &retval);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "901:     while (ns-- > 0 && cp && cp < end) {",
      "902:      zval *retval = NULL;",
      "905:      if (retval != NULL) {",
      "906:       add_next_index_zval(authns, retval);",
      "907:      }",
      "",
      "[Removed Lines]",
      "904:      cp = php_parserr(cp, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
      "",
      "[Added Lines]",
      "940:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "913:     while (ar-- > 0 && cp && cp < end) {",
      "914:      zval *retval = NULL;",
      "917:      if (retval != NULL) {",
      "918:       add_next_index_zval(addtl, retval);",
      "919:      }",
      "",
      "[Removed Lines]",
      "916:      cp = php_parserr(cp, &answer, DNS_T_ANY, 1, raw, &retval);",
      "",
      "[Added Lines]",
      "952:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, 1, raw, &retval);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "529da0f74c1a230d0656799efc73a387392dbc10",
      "candidate_info": {
        "commit_hash": "529da0f74c1a230d0656799efc73a387392dbc10",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/529da0f74c1a230d0656799efc73a387392dbc10",
        "files": [
          "NEWS",
          "ext/standard/dns.c"
        ],
        "message": "Fixed bug #67717 - segfault in dns_get_record",
        "before_after_code_files": [
          "ext/standard/dns.c||ext/standard/dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ],
          "candidate": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/dns.c||ext/standard/dns.c": [
          "File: ext/standard/dns.c -> ext/standard/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "413: #if HAVE_FULL_DNS_FUNCS",
          "417: {",
          "418:  u_short type, class, dlen;",
          "419:  u_long ttl;",
          "",
          "[Removed Lines]",
          "416: static u_char *php_parserr(u_char *cp, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
          "",
          "[Added Lines]",
          "415: #define CHECKCP(n) do { \\",
          "416:  if (cp + n > end) { \\",
          "417:   return NULL; \\",
          "418:  } \\",
          "419: } while (0)",
          "422: static u_char *php_parserr(u_char *cp, u_char *end, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:  if (n < 0) {",
          "430:   return NULL;",
          "431:  }",
          "432:  cp += n;",
          "434:  GETSHORT(type, cp);",
          "435:  GETSHORT(class, cp);",
          "436:  GETLONG(ttl, cp);",
          "437:  GETSHORT(dlen, cp);",
          "438:  if (type_to_fetch != T_ANY && type != type_to_fetch) {",
          "439:   cp += dlen;",
          "440:   return cp;",
          "",
          "[Removed Lines]",
          "428:  n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);",
          "",
          "[Added Lines]",
          "434:  n = dn_expand(answer->qb2, end, cp, name, sizeof(name) - 2);",
          "440:  CHECKCP(10);",
          "445:  CHECKCP(dlen);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:  switch (type) {",
          "463:   case DNS_T_A:",
          "464:    add_assoc_string(*subarray, \"type\", \"A\", 1);",
          "465:    snprintf(name, sizeof(name), \"%d.%d.%d.%d\", cp[0], cp[1], cp[2], cp[3]);",
          "466:    add_assoc_string(*subarray, \"ip\", name, 1);",
          "467:    cp += dlen;",
          "468:    break;",
          "469:   case DNS_T_MX:",
          "470:    add_assoc_string(*subarray, \"type\", \"MX\", 1);",
          "471:    GETSHORT(n, cp);",
          "472:    add_assoc_long(*subarray, \"pri\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472:    CHECKCP(4);",
          "479:    CHECKCP(2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "485:    if (type == DNS_T_PTR) {",
          "486:     add_assoc_string(*subarray, \"type\", \"PTR\", 1);",
          "487:    }",
          "489:    if (n < 0) {",
          "490:     return NULL;",
          "491:    }",
          "",
          "[Removed Lines]",
          "488:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "498:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:   case DNS_T_HINFO:",
          "497:    add_assoc_string(*subarray, \"type\", \"HINFO\", 1);",
          "498:    n = *cp & 0xFF;",
          "499:    cp++;",
          "500:    add_assoc_stringl(*subarray, \"cpu\", (char*)cp, n, 1);",
          "501:    cp += n;",
          "502:    n = *cp & 0xFF;",
          "503:    cp++;",
          "504:    add_assoc_stringl(*subarray, \"os\", (char*)cp, n, 1);",
          "505:    cp += n;",
          "506:    break;",
          "507:   case DNS_T_TXT:",
          "508:    {",
          "510:     zval *entries = NULL;",
          "512:     add_assoc_string(*subarray, \"type\", \"TXT\", 1);",
          "",
          "[Removed Lines]",
          "509:     int ll = 0;",
          "",
          "[Added Lines]",
          "508:    CHECKCP(1);",
          "511:    CHECKCP(n);",
          "514:    CHECKCP(1);",
          "517:    CHECKCP(n);",
          "523:     int l1 = 0, l2 = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "515:     MAKE_STD_ZVAL(entries);",
          "516:     array_init(entries);",
          "523:      }",
          "527:     }",
          "529:     cp += dlen;",
          "532:     add_assoc_zval(*subarray, \"entries\", entries);",
          "533:    }",
          "534:    break;",
          "535:   case DNS_T_SOA:",
          "536:    add_assoc_string(*subarray, \"type\", \"SOA\", 1);",
          "538:    if (n < 0) {",
          "539:     return NULL;",
          "540:    }",
          "541:    cp += n;",
          "542:    add_assoc_string(*subarray, \"mname\", name, 1);",
          "544:    if (n < 0) {",
          "545:     return NULL;",
          "546:    }",
          "547:    cp += n;",
          "548:    add_assoc_string(*subarray, \"rname\", name, 1);",
          "549:    GETLONG(n, cp);",
          "550:    add_assoc_long(*subarray, \"serial\", n);",
          "551:    GETLONG(n, cp);",
          "",
          "[Removed Lines]",
          "518:     while (ll < dlen) {",
          "519:      n = cp[ll];",
          "520:      if ((ll + n) >= dlen) {",
          "522:       n = dlen - (ll + 1);",
          "524:      memcpy(tp + ll , cp + ll + 1, n);",
          "525:      add_next_index_stringl(entries, cp + ll + 1, n, 1);",
          "526:      ll = ll + n + 1;",
          "528:     tp[dlen] = '\\0';",
          "531:     add_assoc_stringl(*subarray, \"txt\", tp, (dlen>0)?dlen - 1:0, 0);",
          "537:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
          "543:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);",
          "",
          "[Added Lines]",
          "532:     while (l1 < dlen) {",
          "533:      n = cp[l1];",
          "534:      if ((l1 + n) >= dlen) {",
          "536:       n = dlen - (l1 + 1);",
          "537:      }",
          "538:      if (n) {",
          "539:       memcpy(tp + l2 , cp + l1 + 1, n);",
          "540:       add_next_index_stringl(entries, cp + l1 + 1, n, 1);",
          "542:      l1 = l1 + n + 1;",
          "543:      l2 = l2 + n;",
          "545:     tp[l2] = '\\0';",
          "548:     add_assoc_stringl(*subarray, \"txt\", tp, l2, 0);",
          "554:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
          "560:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);",
          "566:    CHECKCP(5*4);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "559:    break;",
          "560:   case DNS_T_AAAA:",
          "561:    tp = (u_char*)name;",
          "562:    for(i=0; i < 8; i++) {",
          "563:     GETSHORT(s, cp);",
          "564:     if (s != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:    CHECKCP(8*2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "593:   case DNS_T_A6:",
          "594:    p = cp;",
          "595:    add_assoc_string(*subarray, \"type\", \"A6\", 1);",
          "596:    n = ((int)cp[0]) & 0xFF;",
          "597:    cp++;",
          "598:    add_assoc_long(*subarray, \"masklen\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615:    CHECKCP(1);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "628:     cp++;",
          "629:    }",
          "630:    for (i = (n + 8) / 16; i < 8; i++) {",
          "631:     GETSHORT(s, cp);",
          "632:     if (s != 0) {",
          "633:      if (tp > (u_char *)name) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651:     CHECKCP(2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "657:    tp[0] = '\\0';",
          "658:    add_assoc_string(*subarray, \"ipv6\", name, 1);",
          "659:    if (cp < p + dlen) {",
          "661:     if (n < 0) {",
          "662:      return NULL;",
          "663:     }",
          "",
          "[Removed Lines]",
          "660:     n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "681:     n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "666:    }",
          "667:    break;",
          "668:   case DNS_T_SRV:",
          "669:    add_assoc_string(*subarray, \"type\", \"SRV\", 1);",
          "670:    GETSHORT(n, cp);",
          "671:    add_assoc_long(*subarray, \"pri\", n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "690:    CHECKCP(3*2);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "673:    add_assoc_long(*subarray, \"weight\", n);",
          "674:    GETSHORT(n, cp);",
          "675:    add_assoc_long(*subarray, \"port\", n);",
          "677:    if (n < 0) {",
          "678:     return NULL;",
          "679:    }",
          "",
          "[Removed Lines]",
          "676:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "698:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "681:    add_assoc_string(*subarray, \"target\", name, 1);",
          "682:    break;",
          "683:   case DNS_T_NAPTR:",
          "684:    add_assoc_string(*subarray, \"type\", \"NAPTR\", 1);",
          "685:    GETSHORT(n, cp);",
          "686:    add_assoc_long(*subarray, \"order\", n);",
          "687:    GETSHORT(n, cp);",
          "688:    add_assoc_long(*subarray, \"pref\", n);",
          "689:    n = (cp[0] & 0xFF);",
          "691:    cp += n;",
          "692:    n = (cp[0] & 0xFF);",
          "694:    cp += n;",
          "695:    n = (cp[0] & 0xFF);",
          "697:    cp += n;",
          "699:    if (n < 0) {",
          "700:     return NULL;",
          "701:    }",
          "",
          "[Removed Lines]",
          "690:    add_assoc_stringl(*subarray, \"flags\", (char*)++cp, n, 1);",
          "693:    add_assoc_stringl(*subarray, \"services\", (char*)++cp, n, 1);",
          "696:    add_assoc_stringl(*subarray, \"regex\", (char*)++cp, n, 1);",
          "698:    n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);",
          "",
          "[Added Lines]",
          "706:    CHECKCP(2*2);",
          "713:    CHECKCP(1);",
          "715:    cp++;",
          "716:    CHECKCP(n);",
          "717:    add_assoc_stringl(*subarray, \"flags\", (char*)cp, n, 1);",
          "720:    CHECKCP(1);",
          "722:    cp++;",
          "723:    CHECKCP(n);",
          "724:    add_assoc_stringl(*subarray, \"services\", (char*)cp, n, 1);",
          "727:    CHECKCP(1);",
          "729:    cp++;",
          "730:    CHECKCP(n);",
          "731:    add_assoc_stringl(*subarray, \"regex\", (char*)cp, n, 1);",
          "734:    n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "888:    while (an-- && cp && cp < end) {",
          "889:     zval *retval;",
          "892:     if (retval != NULL && store_results) {",
          "893:      add_next_index_zval(return_value, retval);",
          "894:     }",
          "",
          "[Removed Lines]",
          "891:     cp = php_parserr(cp, &answer, type_to_fetch, store_results, raw, &retval);",
          "",
          "[Added Lines]",
          "927:     cp = php_parserr(cp, end, &answer, type_to_fetch, store_results, raw, &retval);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "901:     while (ns-- > 0 && cp && cp < end) {",
          "902:      zval *retval = NULL;",
          "905:      if (retval != NULL) {",
          "906:       add_next_index_zval(authns, retval);",
          "907:      }",
          "",
          "[Removed Lines]",
          "904:      cp = php_parserr(cp, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
          "",
          "[Added Lines]",
          "940:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, authns != NULL, raw, &retval);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "913:     while (ar-- > 0 && cp && cp < end) {",
          "914:      zval *retval = NULL;",
          "917:      if (retval != NULL) {",
          "918:       add_next_index_zval(addtl, retval);",
          "919:      }",
          "",
          "[Removed Lines]",
          "916:      cp = php_parserr(cp, &answer, DNS_T_ANY, 1, raw, &retval);",
          "",
          "[Added Lines]",
          "952:      cp = php_parserr(cp, end, &answer, DNS_T_ANY, 1, raw, &retval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "142a01db92100f65ab13995236b327e71eaa39b2",
      "candidate_info": {
        "commit_hash": "142a01db92100f65ab13995236b327e71eaa39b2",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/142a01db92100f65ab13995236b327e71eaa39b2",
        "files": [
          "Zend/zend_builtin_functions.c",
          "ext/standard/basic_functions.c",
          "ext/standard/browscap.c",
          "ext/standard/cyr_convert.c",
          "ext/standard/dns.c",
          "ext/standard/iptc.c",
          "ext/standard/md5.c",
          "ext/standard/sha1.c",
          "ext/standard/string.c"
        ],
        "message": "Fix a couple compile warnings",
        "before_after_code_files": [
          "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c",
          "ext/standard/basic_functions.c||ext/standard/basic_functions.c",
          "ext/standard/browscap.c||ext/standard/browscap.c",
          "ext/standard/cyr_convert.c||ext/standard/cyr_convert.c",
          "ext/standard/dns.c||ext/standard/dns.c",
          "ext/standard/iptc.c||ext/standard/iptc.c",
          "ext/standard/md5.c||ext/standard/md5.c",
          "ext/standard/sha1.c||ext/standard/sha1.c",
          "ext/standard/string.c||ext/standard/string.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ],
          "candidate": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c": [
          "File: Zend/zend_builtin_functions.c -> Zend/zend_builtin_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1762: ZEND_FUNCTION(get_defined_functions)",
          "1763: {",
          "1766:  if (zend_parse_parameters_none() == FAILURE) {",
          "1767:   return;",
          "",
          "[Removed Lines]",
          "1764:  zval internal, user, *ret;",
          "",
          "[Added Lines]",
          "1764:  zval internal, user;",
          "",
          "---------------"
        ],
        "ext/standard/basic_functions.c||ext/standard/basic_functions.c": [
          "File: ext/standard/basic_functions.c -> ext/standard/basic_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5126:  char *filename;",
          "5127:  size_t filename_len;",
          "5128:  zend_lex_state original_lex_state;",
          "5131:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &filename, &filename_len) == FAILURE) {",
          "5132:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "5129:  zend_file_handle file_handle = {0};",
          "",
          "[Added Lines]",
          "5129:  zend_file_handle file_handle = {{0}};",
          "",
          "---------------"
        ],
        "ext/standard/browscap.c||ext/standard/browscap.c": [
          "File: ext/standard/browscap.c -> ext/standard/browscap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: {",
          "226:  if (filename == NULL || filename[0] == '\\0') {",
          "227:   return FAILURE;",
          "",
          "[Removed Lines]",
          "224:  zend_file_handle fh = {0};",
          "",
          "[Added Lines]",
          "224:  zend_file_handle fh = {{0}};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:      number of characters changed in the user agent being checked versus",
          "381:   if (Z_TYPE_P(found_browser_entry) == IS_ARRAY) {",
          "386:     return 0;",
          "387:    }",
          "391:    for (i = 0; i < Z_STRLEN_P(previous_match); i++) {",
          "392:     switch (Z_STRVAL_P(previous_match)[i]) {",
          "393:      case '?':",
          "",
          "[Removed Lines]",
          "382:    int i, prev_len = 0, curr_len = 0, ua_len;",
          "383:    zval *current_match;",
          "385:    if ((current_match = zend_hash_str_find(Z_ARRVAL_P(browser), \"browser_name_pattern\", sizeof(\"browser_name_pattern\")-1)) == NULL) {",
          "389:    ua_len = lookup_browser_length;",
          "",
          "[Added Lines]",
          "382:    size_t i, prev_len = 0, curr_len = 0;",
          "383:    zval *current_match = zend_hash_str_find(Z_ARRVAL_P(browser), \"browser_name_pattern\", sizeof(\"browser_name_pattern\")-1);",
          "385:    if (!current_match) {",
          "",
          "---------------"
        ],
        "ext/standard/cyr_convert.c||ext/standard/cyr_convert.c": [
          "File: ext/standard/cyr_convert.c -> ext/standard/cyr_convert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205: {",
          "206:  const unsigned char *from_table, *to_table;",
          "207:  unsigned char tmp;",
          "210:  from_table = NULL;",
          "211:  to_table   = NULL;",
          "",
          "[Removed Lines]",
          "204: static char * php_convert_cyr_string(unsigned char *str, int length, char from, char to TSRMLS_DC)",
          "208:  int i;",
          "",
          "[Added Lines]",
          "204: static char * php_convert_cyr_string(unsigned char *str, size_t length, char from, char to TSRMLS_DC)",
          "208:  size_t i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:  if (!str)",
          "259:   return (char *)str;",
          "263:   tmp = (from_table == NULL)? str[i] : from_table[ str[i] ];",
          "264:   str[i] = (to_table == NULL) ? tmp : to_table[tmp + 256];",
          "265:  }",
          "",
          "[Removed Lines]",
          "261:  for( i = 0; i<length; i++)",
          "262:  {",
          "",
          "[Added Lines]",
          "261:  for (i = 0; i < length; i++) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "282:  str = zend_string_init(input, input_len, 0);",
          "285:  RETVAL_NEW_STR(str);",
          "286: }",
          "",
          "[Removed Lines]",
          "284:  php_convert_cyr_string(str->val, str->len, fr_cs[0], to_cs[0] TSRMLS_CC);",
          "",
          "[Added Lines]",
          "283:  php_convert_cyr_string((unsigned char *) str->val, str->len, fr_cs[0], to_cs[0] TSRMLS_CC);",
          "",
          "---------------"
        ],
        "ext/standard/dns.c||ext/standard/dns.c": [
          "File: ext/standard/dns.c -> ext/standard/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:      }",
          "536:      if (n) {",
          "537:       memcpy(tp->val + l2 , cp + l1 + 1, n);",
          "539:      }",
          "540:      l1 = l1 + n + 1;",
          "541:      l2 = l2 + n;",
          "",
          "[Removed Lines]",
          "538:       add_next_index_stringl(&entries, cp + l1 + 1, n);",
          "",
          "[Added Lines]",
          "538:       add_next_index_stringl(&entries, (char *) cp + l1 + 1, n);",
          "",
          "---------------"
        ],
        "ext/standard/iptc.c||ext/standard/iptc.c": [
          "File: ext/standard/iptc.c -> ext/standard/iptc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "300: {",
          "301:  int inx = 0, len;",
          "302:  unsigned int tagsfound = 0;",
          "305:  size_t str_len;",
          "306:  zval values, *element;",
          "",
          "[Removed Lines]",
          "303:  unsigned char *buffer, recnum, dataset, key[ 16 ];",
          "304:  char *str;",
          "",
          "[Added Lines]",
          "303:  unsigned char *buffer, recnum, dataset;",
          "304:  char *str, key[16];",
          "",
          "---------------"
        ],
        "ext/standard/md5.c||ext/standard/md5.c": [
          "File: ext/standard/md5.c -> ext/standard/md5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  PHP_MD5Update(&context, arg->val, arg->len);",
          "62:  PHP_MD5Final(digest, &context);",
          "63:  if (raw_output) {",
          "65:  } else {",
          "66:   make_digest_ex(md5str, digest, 16);",
          "67:   RETVAL_STRING(md5str);",
          "",
          "[Removed Lines]",
          "64:   RETURN_STRINGL(digest, 16);",
          "",
          "[Added Lines]",
          "64:   RETURN_STRINGL((char *) digest, 16);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:  PHP_MD5Final(digest, &context);",
          "114:  if (raw_output) {",
          "116:  } else {",
          "117:   make_digest_ex(md5str, digest, 16);",
          "118:   RETVAL_STRING(md5str);",
          "",
          "[Removed Lines]",
          "115:   RETURN_STRINGL(digest, 16);",
          "",
          "[Added Lines]",
          "115:   RETURN_STRINGL((char *) digest, 16);",
          "",
          "---------------"
        ],
        "ext/standard/sha1.c||ext/standard/sha1.c": [
          "File: ext/standard/sha1.c -> ext/standard/sha1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:  sha1str[0] = '\\0';",
          "48:  PHP_SHA1Init(&context);",
          "50:  PHP_SHA1Final(digest, &context);",
          "51:  if (raw_output) {",
          "53:  } else {",
          "54:   make_digest_ex(sha1str, digest, 20);",
          "55:   RETVAL_STRING(sha1str);",
          "",
          "[Removed Lines]",
          "49:  PHP_SHA1Update(&context, arg->val, arg->len);",
          "52:   RETURN_STRINGL(digest, 20);",
          "",
          "[Added Lines]",
          "49:  PHP_SHA1Update(&context, (unsigned char *) arg->val, arg->len);",
          "52:   RETURN_STRINGL((char *) digest, 20);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:  unsigned char buf[1024];",
          "72:  unsigned char digest[20];",
          "73:  PHP_SHA1_CTX   context;",
          "75:  php_stream    *stream;",
          "77:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|b\", &arg, &arg_len, &raw_output) == FAILURE) {",
          "",
          "[Removed Lines]",
          "74:  int           n;",
          "",
          "[Added Lines]",
          "74:  size_t         n;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:  PHP_SHA1Init(&context);",
          "89:   PHP_SHA1Update(&context, buf, n);",
          "90:  }",
          "",
          "[Removed Lines]",
          "88:  while ((n = php_stream_read(stream, buf, sizeof(buf))) > 0) {",
          "",
          "[Added Lines]",
          "88:  while ((n = php_stream_read(stream, (char *) buf, sizeof(buf))) > 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:  php_stream_close(stream);",
          "100:  if (raw_output) {",
          "102:  } else {",
          "103:   make_digest_ex(sha1str, digest, 20);",
          "104:   RETVAL_STRING(sha1str);",
          "",
          "[Removed Lines]",
          "96:  if (n<0) {",
          "97:   RETURN_FALSE;",
          "98:  }",
          "101:   RETURN_STRINGL(digest, 20);",
          "",
          "[Added Lines]",
          "97:   RETURN_STRINGL((char *) digest, 20);",
          "",
          "---------------"
        ],
        "ext/standard/string.c||ext/standard/string.c": [
          "File: ext/standard/string.c -> ext/standard/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3984:  while (1) {",
          "3985:   char_count=0;",
          "3987:    char_count++;",
          "3988:    begin--;",
          "3989:    if (begin <= 0 || _isnewline(heb_str[begin])) {",
          "",
          "[Removed Lines]",
          "3986:   while ((!max_chars || max_chars > 0 && char_count < max_chars) && begin > 0) {",
          "",
          "[Added Lines]",
          "3986:   while ((!max_chars || (max_chars > 0 && char_count < max_chars)) && begin > 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddd1e2a8b75f652d3a8932b8f3ede709bf30e3ce",
      "candidate_info": {
        "commit_hash": "ddd1e2a8b75f652d3a8932b8f3ede709bf30e3ce",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/ddd1e2a8b75f652d3a8932b8f3ede709bf30e3ce",
        "files": [
          "ext/standard/dns.c"
        ],
        "message": "fix merge issue in previous",
        "before_after_code_files": [
          "ext/standard/dns.c||ext/standard/dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ],
          "candidate": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/dns.c||ext/standard/dns.c": [
          "File: ext/standard/dns.c -> ext/standard/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:      }",
          "536:      if (n) {",
          "537:       memcpy(tp->val + l2 , cp + l1 + 1, n);",
          "539:      }",
          "540:      l1 = l1 + n + 1;",
          "541:      l2 = l2 + n;",
          "",
          "[Removed Lines]",
          "538:       add_next_index_stringl(entries, cp + l1 + 1, n, 1);",
          "",
          "[Added Lines]",
          "538:       add_next_index_stringl(&entries, cp + l1 + 1, n);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f73394fdd95d3165b4391e1b0dedd57fced8c3b",
      "candidate_info": {
        "commit_hash": "4f73394fdd95d3165b4391e1b0dedd57fced8c3b",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/4f73394fdd95d3165b4391e1b0dedd57fced8c3b",
        "files": [
          "ext/standard/dns.c"
        ],
        "message": "Fix potential segfault in dns_get_record()\n\nIf the remote sends us a packet with a malformed TXT record,\nwe could end up trying to over-consume the packet and wander\noff into overruns.",
        "before_after_code_files": [
          "ext/standard/dns.c||ext/standard/dns.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ],
          "candidate": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/standard/dns.c||ext/standard/dns.c": [
          "File: ext/standard/dns.c -> ext/standard/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "518:     while (ll < dlen) {",
          "519:      n = cp[ll];",
          "520:      memcpy(tp + ll , cp + ll + 1, n);",
          "521:      add_next_index_stringl(entries, cp + ll + 1, n, 1);",
          "522:      ll = ll + n + 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "520:      if ((ll + n) >= dlen) {",
          "522:       n = dlen - (ll + 1);",
          "523:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cf5e51f3eab233d8694a9b1344eecc62ca0e1c0",
      "candidate_info": {
        "commit_hash": "6cf5e51f3eab233d8694a9b1344eecc62ca0e1c0",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/6cf5e51f3eab233d8694a9b1344eecc62ca0e1c0",
        "files": [
          "ext/date/php_date.c",
          "ext/standard/basic_functions.c",
          "ext/standard/browscap.c",
          "ext/standard/dns.c",
          "ext/standard/dns_win32.c"
        ],
        "message": "Reduced memory realocations",
        "before_after_code_files": [
          "ext/date/php_date.c||ext/date/php_date.c",
          "ext/standard/basic_functions.c||ext/standard/basic_functions.c",
          "ext/standard/browscap.c||ext/standard/browscap.c",
          "ext/standard/dns.c||ext/standard/dns.c",
          "ext/standard/dns_win32.c||ext/standard/dns_win32.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ],
          "candidate": [
            "ext/standard/dns.c||ext/standard/dns.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/date/php_date.c||ext/date/php_date.c": [
          "File: ext/date/php_date.c -> ext/date/php_date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2204:     ZVAL_STRING(&zv, dateobj->time->tz_info->name);",
          "2205:     break;",
          "2206:    case TIMELIB_ZONETYPE_OFFSET: {",
          "2208:     timelib_sll utc_offset = dateobj->time->z;",
          "2211:      utc_offset > 0 ? '-' : '+',",
          "2212:      abs(utc_offset / 60),",
          "2213:      abs((utc_offset % 60)));",
          "2218:     }",
          "2219:     break;",
          "2220:    case TIMELIB_ZONETYPE_ABBR:",
          "",
          "[Removed Lines]",
          "2207:     char *tmpstr = emalloc(sizeof(\"UTC+05:00\"));",
          "2210:     snprintf(tmpstr, sizeof(\"+05:00\"), \"%c%02d:%02d\",",
          "2216:     ZVAL_STRING(&zv, tmpstr);",
          "2217:     efree(tmpstr);",
          "",
          "[Added Lines]",
          "2207:     zend_string *tmpstr = STR_ALLOC(sizeof(\"UTC+05:00\")-1, 0);",
          "2210:     tmpstr->len = snprintf(tmpstr->val, sizeof(\"+05:00\"), \"%c%02d:%02d\",",
          "2215:     ZVAL_STR(&zv, tmpstr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2299:    ZVAL_STRING(&zv, tzobj->tzi.tz->name);",
          "2300:    break;",
          "2301:   case TIMELIB_ZONETYPE_OFFSET: {",
          "2305:    tzobj->tzi.utc_offset > 0 ? '-' : '+',",
          "2306:    abs(tzobj->tzi.utc_offset / 60),",
          "2307:    abs((tzobj->tzi.utc_offset % 60)));",
          "2312:    }",
          "2313:    break;",
          "2314:   case TIMELIB_ZONETYPE_ABBR:",
          "",
          "[Removed Lines]",
          "2302:    char *tmpstr = emalloc(sizeof(\"UTC+05:00\"));",
          "2304:    snprintf(tmpstr, sizeof(\"+05:00\"), \"%c%02d:%02d\",",
          "2310:    ZVAL_STRING(&zv, tmpstr);",
          "2311:    efree(tmpstr);",
          "",
          "[Added Lines]",
          "2300:    zend_string *tmpstr = STR_ALLOC(sizeof(\"UTC+05:00\")-1, 0);",
          "2302:    tmpstr->len = snprintf(tmpstr->val, sizeof(\"+05:00\"), \"%c%02d:%02d\",",
          "2307:    ZVAL_STR(&zv, tmpstr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3736:    RETURN_STRING(tzobj->tzi.tz->name);",
          "3737:    break;",
          "3738:   case TIMELIB_ZONETYPE_OFFSET: {",
          "3740:    timelib_sll utc_offset = tzobj->tzi.utc_offset;",
          "3743:     utc_offset > 0 ? '-' : '+',",
          "3744:     abs(utc_offset / 60),",
          "3745:     abs((utc_offset % 60)));",
          "3751:    }",
          "3752:    break;",
          "3753:   case TIMELIB_ZONETYPE_ABBR:",
          "",
          "[Removed Lines]",
          "3739:    char *tmpstr = emalloc(sizeof(\"UTC+05:00\"));",
          "3742:    snprintf(tmpstr, sizeof(\"+05:00\"), \"%c%02d:%02d\",",
          "3748:    RETVAL_STRING(tmpstr);",
          "3749:    efree(tmpstr);",
          "3750:    return;",
          "",
          "[Added Lines]",
          "3735:    zend_string *tmpstr = STR_ALLOC(sizeof(\"UTC+05:00\")-1, 0);",
          "3738:    tmpstr->len = snprintf(tmpstr->val, sizeof(\"+05:00\"), \"%c%02d:%02d\",",
          "3743:    RETURN_STR(tmpstr);",
          "",
          "---------------"
        ],
        "ext/standard/basic_functions.c||ext/standard/basic_functions.c": [
          "File: ext/standard/basic_functions.c -> ext/standard/basic_functions.c"
        ],
        "ext/standard/browscap.c||ext/standard/browscap.c": [
          "File: ext/standard/browscap.c -> ext/standard/browscap.c"
        ],
        "ext/standard/dns.c||ext/standard/dns.c": [
          "File: ext/standard/dns.c -> ext/standard/dns.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:    {",
          "507:     int ll = 0;",
          "508:     zval entries;",
          "510:     add_assoc_string(subarray, \"type\", \"TXT\");",
          "513:     array_init(&entries);",
          "515:     while (ll < dlen) {",
          "516:      n = cp[ll];",
          "518:      add_next_index_stringl(&entries, (char*)cp + ll + 1, n);",
          "519:      ll = ll + n + 1;",
          "520:     }",
          "522:     cp += dlen;",
          "527:     add_assoc_zval(subarray, \"entries\", &entries);",
          "528:    }",
          "529:    break;",
          "",
          "[Removed Lines]",
          "511:     tp = emalloc(dlen + 1);",
          "517:      memcpy(tp + ll , cp + ll + 1, n);",
          "521:     tp[dlen] = '\\0';",
          "525:     add_assoc_stringl(subarray, \"txt\", (char*)tp, (dlen>0)?dlen - 1:0);",
          "526:     efree(tp);",
          "",
          "[Added Lines]",
          "509:     zend_string *tp;",
          "512:     tp = STR_ALLOC(dlen, 0);",
          "518:      memcpy(tp->val + ll , cp + ll + 1, n);",
          "522:     tp->val[dlen] = '\\0';",
          "523:     tp->len = dlen;",
          "526:     add_assoc_str(subarray, \"txt\", tp);",
          "",
          "---------------"
        ],
        "ext/standard/dns_win32.c||ext/standard/dns_win32.c": [
          "File: ext/standard/dns_win32.c -> ext/standard/dns_win32.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     DWORD i = 0;",
          "208:     DNS_TXT_DATA *data_txt = &pRec->Data.TXT;",
          "209:     DWORD count = data_txt->dwStringCount;",
          "211:     long txt_len = 0;",
          "212:     zval *entries;",
          "",
          "[Removed Lines]",
          "210:     char *txt, *txt_dst;",
          "",
          "[Added Lines]",
          "210:     zend_string *txt;",
          "211:     char *txt_dst;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:      txt_len += strlen(data_txt->pStringArray[i]) + 1;",
          "221:     }",
          "225:     for (i = 0; i < count; i++) {",
          "226:      int len = strlen(data_txt->pStringArray[i]);",
          "227:      memcpy(txt_dst, data_txt->pStringArray[i], len);",
          "228:      add_next_index_stringl(entries, data_txt->pStringArray[i], len);",
          "229:      txt_dst += len;",
          "230:     }",
          "235:     add_assoc_zval(*subarray, \"entries\", entries);",
          "236:    }",
          "237:    break;",
          "",
          "[Removed Lines]",
          "223:     txt = ecalloc(txt_len * 2, 1);",
          "224:     txt_dst = txt;",
          "233:     add_assoc_string(*subarray, \"txt\", txt);",
          "234:     efree(txt);",
          "",
          "[Added Lines]",
          "224:     txt = STR_SAFE_ALLOC(txt_len, 2, 0, 0);",
          "225:     txt_dst = txt->val;",
          "232:     tct->len = txt_dst - txt->val;",
          "233:     add_assoc_str(*subarray, \"txt\", txt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}