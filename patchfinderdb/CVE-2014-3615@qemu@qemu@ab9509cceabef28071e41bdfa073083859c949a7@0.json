{
  "cve_id": "CVE-2014-3615",
  "cve_desc": "The VGA emulator in QEMU allows local guest users to read host memory by setting the display to a high resolution.",
  "repo": "qemu/qemu",
  "patch_hash": "ab9509cceabef28071e41bdfa073083859c949a7",
  "patch_info": {
    "commit_hash": "ab9509cceabef28071e41bdfa073083859c949a7",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/ab9509cceabef28071e41bdfa073083859c949a7",
    "files": [
      "ui/spice-display.c"
    ],
    "message": "spice: make sure we don't overflow ssd->buf\n\nRelated spice-only bug.  We have a fixed 16 MB buffer here, being\npresented to the spice-server as qxl video memory in case spice is\nused with a non-qxl card.  It's also used with qxl in vga mode.\n\nWhen using display resolutions requiring more than 16 MB of memory we\nare going to overflow that buffer.  In theory the guest can write,\nindirectly via spice-server.  The spice-server clears the memory after\nsetting a new video mode though, triggering a segfault in the overflow\ncase, so qemu crashes before the guest has a chance to do something\nevil.\n\nFix that by switching to dynamic allocation for the buffer.\n\nCVE-2014-3615\n\nCc: qemu-stable@nongnu.org\nCc: secalert@redhat.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nReviewed-by: Laszlo Ersek <lersek@redhat.com>",
    "before_after_code_files": [
      "ui/spice-display.c||ui/spice-display.c"
    ]
  },
  "patch_diff": {
    "ui/spice-display.c||ui/spice-display.c": [
      "File: ui/spice-display.c -> ui/spice-display.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "334: void qemu_spice_create_host_primary(SimpleSpiceDisplay *ssd)",
      "335: {",
      "336:     QXLDevSurfaceCreate surface;",
      "338:     memset(&surface, 0, sizeof(surface));",
      "343:     surface.format     = SPICE_SURFACE_FMT_32_xRGB;",
      "344:     surface.width      = surface_width(ssd->ds);",
      "",
      "[Removed Lines]",
      "340:     dprint(1, \"%s/%d: %dx%d\\n\", __func__, ssd->qxl.id,",
      "341:            surface_width(ssd->ds), surface_height(ssd->ds));",
      "",
      "[Added Lines]",
      "337:     uint64_t surface_size;",
      "341:     surface_size = (uint64_t) surface_width(ssd->ds) *",
      "342:         surface_height(ssd->ds) * 4;",
      "343:     assert(surface_size > 0);",
      "344:     assert(surface_size < INT_MAX);",
      "345:     if (ssd->bufsize < surface_size) {",
      "346:         ssd->bufsize = surface_size;",
      "347:         g_free(ssd->buf);",
      "348:         ssd->buf = g_malloc(ssd->bufsize);",
      "349:     }",
      "351:     dprint(1, \"%s/%d: %ux%u (size %\" PRIu64 \"/%d)\\n\", __func__, ssd->qxl.id,",
      "352:            surface_width(ssd->ds), surface_height(ssd->ds),",
      "353:            surface_size, ssd->bufsize);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "369:     if (ssd->num_surfaces == 0) {",
      "370:         ssd->num_surfaces = 1024;",
      "371:     }",
      "374: }",
      "",
      "[Removed Lines]",
      "372:     ssd->bufsize = (16 * 1024 * 1024);",
      "373:     ssd->buf = g_malloc(ssd->bufsize);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "495:     info->num_memslots = NUM_MEMSLOTS;",
      "496:     info->num_memslots_groups = NUM_MEMSLOTS_GROUPS;",
      "497:     info->internal_groupslot_id = 0;",
      "499:     info->n_surfaces = ssd->num_surfaces;",
      "500: }",
      "",
      "[Removed Lines]",
      "498:     info->qxl_ram_size = ssd->bufsize;",
      "",
      "[Added Lines]",
      "508:     info->qxl_ram_size = 16 * 1024 * 1024;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1aa87d3689cc2388a74c9db1dd728c6f4673836e",
      "candidate_info": {
        "commit_hash": "1aa87d3689cc2388a74c9db1dd728c6f4673836e",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/1aa87d3689cc2388a74c9db1dd728c6f4673836e",
        "files": [
          "ui/spice-display.c"
        ],
        "message": "spice: make sure we don't overflow ssd->buf\n\nRelated spice-only bug.  We have a fixed 16 MB buffer here, being\npresented to the spice-server as qxl video memory in case spice is\nused with a non-qxl card.  It's also used with qxl in vga mode.\n\nWhen using display resolutions requiring more than 16 MB of memory we\nare going to overflow that buffer.  In theory the guest can write,\nindirectly via spice-server.  The spice-server clears the memory after\nsetting a new video mode though, triggering a segfault in the overflow\ncase, so qemu crashes before the guest has a chance to do something\nevil.\n\nFix that by switching to dynamic allocation for the buffer.\n\nCVE-2014-3615\n\nCc: qemu-stable@nongnu.org\nCc: secalert@redhat.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>\nReviewed-by: Laszlo Ersek <lersek@redhat.com>\n(cherry picked from commit ab9509cceabef28071e41bdfa073083859c949a7)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "ui/spice-display.c||ui/spice-display.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ui/spice-display.c||ui/spice-display.c"
          ],
          "candidate": [
            "ui/spice-display.c||ui/spice-display.c"
          ]
        }
      },
      "candidate_diff": {
        "ui/spice-display.c||ui/spice-display.c": [
          "File: ui/spice-display.c -> ui/spice-display.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "334: void qemu_spice_create_host_primary(SimpleSpiceDisplay *ssd)",
          "335: {",
          "336:     QXLDevSurfaceCreate surface;",
          "338:     memset(&surface, 0, sizeof(surface));",
          "343:     surface.format     = SPICE_SURFACE_FMT_32_xRGB;",
          "344:     surface.width      = surface_width(ssd->ds);",
          "",
          "[Removed Lines]",
          "340:     dprint(1, \"%s/%d: %dx%d\\n\", __func__, ssd->qxl.id,",
          "341:            surface_width(ssd->ds), surface_height(ssd->ds));",
          "",
          "[Added Lines]",
          "337:     uint64_t surface_size;",
          "341:     surface_size = (uint64_t) surface_width(ssd->ds) *",
          "342:         surface_height(ssd->ds) * 4;",
          "343:     assert(surface_size > 0);",
          "344:     assert(surface_size < INT_MAX);",
          "345:     if (ssd->bufsize < surface_size) {",
          "346:         ssd->bufsize = surface_size;",
          "347:         g_free(ssd->buf);",
          "348:         ssd->buf = g_malloc(ssd->bufsize);",
          "349:     }",
          "351:     dprint(1, \"%s/%d: %ux%u (size %\" PRIu64 \"/%d)\\n\", __func__, ssd->qxl.id,",
          "352:            surface_width(ssd->ds), surface_height(ssd->ds),",
          "353:            surface_size, ssd->bufsize);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:     if (ssd->num_surfaces == 0) {",
          "370:         ssd->num_surfaces = 1024;",
          "371:     }",
          "374: }",
          "",
          "[Removed Lines]",
          "372:     ssd->bufsize = (16 * 1024 * 1024);",
          "373:     ssd->buf = g_malloc(ssd->bufsize);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:     info->num_memslots = NUM_MEMSLOTS;",
          "496:     info->num_memslots_groups = NUM_MEMSLOTS_GROUPS;",
          "497:     info->internal_groupslot_id = 0;",
          "499:     info->n_surfaces = ssd->num_surfaces;",
          "500: }",
          "",
          "[Removed Lines]",
          "498:     info->qxl_ram_size = ssd->bufsize;",
          "",
          "[Added Lines]",
          "508:     info->qxl_ram_size = 16 * 1024 * 1024;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35b2122db446a03be9b88f540e865930efd01d6a",
      "candidate_info": {
        "commit_hash": "35b2122db446a03be9b88f540e865930efd01d6a",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/35b2122db446a03be9b88f540e865930efd01d6a",
        "files": [
          "ui/spice-display.c"
        ],
        "message": "spice-display: add display channel id to the debug messages.\n\nAnd s/__FUNCTION__/__func__/ while being at it.\n\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "ui/spice-display.c||ui/spice-display.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/spice-display.c||ui/spice-display.c"
          ],
          "candidate": [
            "ui/spice-display.c||ui/spice-display.c"
          ]
        }
      },
      "candidate_diff": {
        "ui/spice-display.c||ui/spice-display.c": [
          "File: ui/spice-display.c -> ui/spice-display.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "297: {",
          "298:     QXLDevMemSlot memslot;",
          "302:     memset(&memslot, 0, sizeof(memslot));",
          "303:     memslot.slot_group_id = MEMSLOT_GROUP_HOST;",
          "",
          "[Removed Lines]",
          "300:     dprint(1, \"%s:\\n\", __FUNCTION__);",
          "",
          "[Added Lines]",
          "300:     dprint(1, \"%s/%d:\\n\", __func__, ssd->qxl.id);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:     memset(&surface, 0, sizeof(surface));",
          "315:            surface_width(ssd->ds), surface_height(ssd->ds));",
          "317:     surface.format     = SPICE_SURFACE_FMT_32_xRGB;",
          "",
          "[Removed Lines]",
          "314:     dprint(1, \"%s: %dx%d\\n\", __FUNCTION__,",
          "",
          "[Added Lines]",
          "314:     dprint(1, \"%s/%d: %dx%d\\n\", __func__, ssd->qxl.id,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330: void qemu_spice_destroy_host_primary(SimpleSpiceDisplay *ssd)",
          "331: {",
          "334:     qemu_spice_destroy_primary_surface(ssd, 0, QXL_SYNC);",
          "335: }",
          "",
          "[Removed Lines]",
          "332:     dprint(1, \"%s:\\n\", __FUNCTION__);",
          "",
          "[Added Lines]",
          "332:     dprint(1, \"%s/%d:\\n\", __func__, ssd->qxl.id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "354: {",
          "355:     QXLRect update_area;",
          "358:     update_area.left = x,",
          "359:     update_area.right = x + w;",
          "360:     update_area.top = y;",
          "",
          "[Removed Lines]",
          "357:     dprint(2, \"%s: x %d y %d w %d h %d\\n\", __FUNCTION__, x, y, w, h);",
          "",
          "[Added Lines]",
          "357:     dprint(2, \"%s/%d: x %d y %d w %d h %d\\n\", __func__,",
          "358:            ssd->qxl.id, x, y, w, h);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "371: {",
          "372:     SimpleSpiceUpdate *update;",
          "376:     memset(&ssd->dirty, 0, sizeof(ssd->dirty));",
          "377:     if (ssd->surface) {",
          "",
          "[Removed Lines]",
          "374:     dprint(1, \"%s:\\n\", __FUNCTION__);",
          "",
          "[Added Lines]",
          "375:     dprint(1, \"%s/%d:\\n\", __func__, ssd->qxl.id);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "414: void qemu_spice_display_refresh(SimpleSpiceDisplay *ssd)",
          "415: {",
          "417:     graphic_hw_update(ssd->dcl.con);",
          "419:     qemu_mutex_lock(&ssd->lock);",
          "",
          "[Removed Lines]",
          "416:     dprint(3, \"%s:\\n\", __func__);",
          "",
          "[Added Lines]",
          "417:     dprint(3, \"%s/%d:\\n\", __func__, ssd->qxl.id);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "427:     if (ssd->notify) {",
          "428:         ssd->notify = 0;",
          "429:         qemu_spice_wakeup(ssd);",
          "431:     }",
          "432: }",
          "",
          "[Removed Lines]",
          "430:         dprint(2, \"%s: notify\\n\", __FUNCTION__);",
          "",
          "[Added Lines]",
          "431:         dprint(2, \"%s/%d: notify\\n\", __func__, ssd->qxl.id);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "437: {",
          "438:     SimpleSpiceDisplay *ssd = container_of(sin, SimpleSpiceDisplay, qxl);",
          "441:     ssd->worker = qxl_worker;",
          "442: }",
          "444: static void interface_set_compression_level(QXLInstance *sin, int level)",
          "445: {",
          "448: }",
          "450: static void interface_set_mm_time(QXLInstance *sin, uint32_t mm_time)",
          "451: {",
          "454: }",
          "",
          "[Removed Lines]",
          "440:     dprint(1, \"%s:\\n\", __FUNCTION__);",
          "446:     dprint(1, \"%s:\\n\", __FUNCTION__);",
          "452:     dprint(3, \"%s:\\n\", __FUNCTION__);",
          "",
          "[Added Lines]",
          "441:     dprint(1, \"%s/%d:\\n\", __func__, ssd->qxl.id);",
          "447:     dprint(1, \"%s/%d:\\n\", __func__, sin->id);",
          "453:     dprint(3, \"%s/%d:\\n\", __func__, sin->id);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "472:     SimpleSpiceUpdate *update;",
          "473:     int ret = false;",
          "477:     qemu_mutex_lock(&ssd->lock);",
          "478:     update = QTAILQ_FIRST(&ssd->updates);",
          "",
          "[Removed Lines]",
          "475:     dprint(3, \"%s:\\n\", __FUNCTION__);",
          "",
          "[Added Lines]",
          "476:     dprint(3, \"%s/%d:\\n\", __func__, ssd->qxl.id);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "489: static int interface_req_cmd_notification(QXLInstance *sin)",
          "490: {",
          "492:     return 1;",
          "493: }",
          "",
          "[Removed Lines]",
          "491:     dprint(1, \"%s:\\n\", __FUNCTION__);",
          "",
          "[Added Lines]",
          "492:     dprint(1, \"%s/%d:\\n\", __func__, sin->id);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "498:     SimpleSpiceDisplay *ssd = container_of(sin, SimpleSpiceDisplay, qxl);",
          "499:     uintptr_t id;",
          "502:     id = ext.info->id;",
          "503:     qemu_spice_destroy_update(ssd, (void*)id);",
          "504: }",
          "",
          "[Removed Lines]",
          "501:     dprint(2, \"%s:\\n\", __FUNCTION__);",
          "",
          "[Added Lines]",
          "502:     dprint(2, \"%s/%d:\\n\", __func__, ssd->qxl.id);",
          "",
          "---------------"
        ]
      }
    }
  ]
}