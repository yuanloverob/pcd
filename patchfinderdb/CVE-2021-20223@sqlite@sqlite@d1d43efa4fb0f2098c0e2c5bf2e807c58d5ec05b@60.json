{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7982eacd510b3dd45bd655386945ba68709ef2d",
      "candidate_info": {
        "commit_hash": "a7982eacd510b3dd45bd655386945ba68709ef2d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7982eacd510b3dd45bd655386945ba68709ef2d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/date.c",
          "src/select.c",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbemem.c",
          "test/upfrom1.test"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: d2aac001204621062e6cb3230ce2ac1b4545cb83b3ebb6bfebccee4d51162e97",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/date.c||src/date.c",
          "src/select.c||src/select.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbemem.c||src/vdbemem.c",
          "test/upfrom1.test||test/upfrom1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 66858d87507bfdd17bb76c0afb1108ad5dec752438a79bf57f0f51690232e943",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/date.c||src/date.c": [
          "File: src/date.c -> src/date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1112:         case 'm':  sqlite3_snprintf(3, &z[j],\"%02d\",x.M); j+=2; break;",
          "1113:         case 'M':  sqlite3_snprintf(3, &z[j],\"%02d\",x.m); j+=2; break;",
          "1114:         case 's': {",
          "1117:           j += sqlite3Strlen30(&z[j]);",
          "1118:           break;",
          "1119:         }",
          "",
          "[Removed Lines]",
          "1115:           sqlite3_snprintf(30,&z[j],\"%lld\",",
          "1116:                            (i64)(x.iJD/1000 - 21086676*(i64)10000));",
          "",
          "[Added Lines]",
          "1115:           i64 iS = (i64)(x.iJD/1000 - 21086676*(i64)10000);",
          "1116:           sqlite3Int64ToText(iS, &z[j]);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265: static int columnIndex(Table *pTab, const char *zCol){",
          "266:   int i;",
          "269:   }",
          "270:   return -1;",
          "271: }",
          "",
          "[Removed Lines]",
          "267:   for(i=0; i<pTab->nCol; i++){",
          "268:     if( sqlite3StrICmp(pTab->aCol[i].zName, zCol)==0 ) return i;",
          "",
          "[Added Lines]",
          "267:   u8 h = sqlite3StrIHash(zCol);",
          "268:   Column *pCol;",
          "269:   for(pCol=pTab->aCol, i=0; i<pTab->nCol; pCol++, i++){",
          "270:     if( pCol->hName==h && sqlite3StrICmp(pCol->zName, zCol)==0 ) return i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1136:       {",
          "1137:         int i2 = pDest->iSDParm2;",
          "1138:         int r1 = sqlite3GetTempReg(pParse);",
          "1140:         if( i2<0 ){",
          "1141:           sqlite3VdbeAddOp3(v, OP_Insert, iParm, r1, regResult);",
          "1142:         }else{",
          "",
          "[Removed Lines]",
          "1139:         sqlite3VdbeAddOp3(v, OP_MakeRecord,regResult+(i2<0),nResultCol-(i2<0),r1);",
          "",
          "[Added Lines]",
          "1145:         sqlite3VdbeAddOp2(v, OP_IsNull, regResult, iBreak); VdbeCoverage(v);",
          "1147:         sqlite3VdbeAddOp3(v, OP_MakeRecord,",
          "1148:                           regResult+(i2<0), nResultCol-(i2<0), r1);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:   return n;",
          "624: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: #ifdef _WIN32",
          "630: # define notNormalFile(X) 0",
          "631: #else",
          "632: static int notNormalFile(const char *zFile){",
          "633:   struct stat x;",
          "634:   int rc;",
          "635:   memset(&x, 0, sizeof(x));",
          "636:   rc = stat(zFile, &x);",
          "637:   return rc || !S_ISREG(x.st_mode);",
          "638: }",
          "639: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8932:       rc = 1;",
          "8933:       goto meta_command_exit;",
          "8934:     }",
          "8937:       utf8_printf(stderr,\"Error: cannot open \\\"%s\\\"\\n\", azArg[1]);",
          "8938:       rc = 1;",
          "8939:     }else{",
          "",
          "[Removed Lines]",
          "8935:     p->in = fopen(azArg[1], \"rb\");",
          "8936:     if( p->in==0 ){",
          "",
          "[Added Lines]",
          "8950:     if( notNormalFile(azArg[1])",
          "8951:      || (p->in = fopen(azArg[1], \"rb\"))==0",
          "8952:     ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4462: int sqlite3FixExprList(DbFixer*, ExprList*);",
          "4463: int sqlite3FixTriggerStep(DbFixer*, TriggerStep*);",
          "4464: int sqlite3RealSameAsInt(double,sqlite3_int64);",
          "4465: int sqlite3AtoF(const char *z, double*, int, u8);",
          "4466: int sqlite3GetInt32(const char *, int*);",
          "4467: int sqlite3Atoi(const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4465: void sqlite3Int64ToText(i64,char*);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "595: #pragma warning(default : 4756)",
          "596: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "603: void sqlite3Int64ToText(i64 v, char *zOut){",
          "604:   int i;",
          "605:   u64 x;",
          "606:   char zTemp[22];",
          "607:   if( v<0 ){",
          "608:     x = (v==SMALLEST_INT64) ? ((u64)1)<<63 : -v;",
          "609:   }else{",
          "610:     x = v;",
          "611:   }",
          "612:   i = sizeof(zTemp)-2;",
          "613:   zTemp[sizeof(zTemp)-1] = 0;",
          "614:   do{",
          "615:     zTemp[i--] = (x%10) + '0';",
          "616:     x = x/10;",
          "617:   }while( x );",
          "618:   if( v<0 ) zTemp[i--] = '-';",
          "619:   memcpy(zOut, &zTemp[i+1], sizeof(zTemp)-1-i);",
          "620: }",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: static void vdbeMemRenderNum(int sz, char *zBuf, Mem *p){",
          "105:   StrAccum acc;",
          "106:   assert( p->flags & (MEM_Int|MEM_Real|MEM_IntReal) );",
          "108:   if( p->flags & MEM_Int ){",
          "112:   }else{",
          "114:   }",
          "117: }",
          "119: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "107:   sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "109:     sqlite3_str_appendf(&acc, \"%lld\", p->u.i);",
          "110:   }else if( p->flags & MEM_IntReal ){",
          "111:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "113:     sqlite3_str_appendf(&acc, \"%!.15g\", p->u.r);",
          "115:   assert( acc.zText==zBuf && acc.mxAlloc<=0 );",
          "",
          "[Added Lines]",
          "107:   assert( sz>22 );",
          "109: #if GCC_VERSION>=7000000",
          "112:     i64 x;",
          "113:     assert( (p->flags&MEM_Int)*2==sizeof(x) );",
          "114:     memcpy(&x, (char*)&p->u, (p->flags&MEM_Int)*2);",
          "115:     sqlite3Int64ToText(x, zBuf);",
          "116: #else",
          "117:     sqlite3Int64ToText(p->u.i, zBuf);",
          "118: #endif",
          "120:     sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "121:     sqlite3_str_appendf(&acc, \"%!.15g\",",
          "122:          (p->flags & MEM_IntReal)!=0 ? (double)p->u.i : p->u.r);",
          "123:     assert( acc.zText==zBuf && acc.mxAlloc<=0 );",
          "",
          "---------------"
        ],
        "test/upfrom1.test||test/upfrom1.test": [
          "File: test/upfrom1.test -> test/upfrom1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   UPDATE t5 AS apples SET b=1 FROM t5 AS apples;",
          "165: } } } 1",
          "167: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: # Problem found by OSSFuzz on 2020-07-20",
          "168: # https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24282",
          "169: #",
          "170: reset_db",
          "171: do_execsql_test 3.1 {",
          "172:   CREATE TABLE t0(a);",
          "173:   CREATE TABLE t1(b);",
          "174:   UPDATE t1 SET b=sum(a) FROM t0;",
          "175:   SELECT * FROM t0, t1;",
          "176: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcbc673752b34da00b88d235338ddde25e244200",
      "candidate_info": {
        "commit_hash": "fcbc673752b34da00b88d235338ddde25e244200",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcbc673752b34da00b88d235338ddde25e244200",
        "files": [
          "ext/fts3/fts3_tokenize_vtab.c",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix some fts3 problems found by usan.\n\nFossilOrigin-Name: fb7ccf61bed8d862986eda7096bec3df5947f1d1c88f27e7d9c8acf420f40c50",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c": [
          "File: ext/fts3/fts3_tokenize_vtab.c -> ext/fts3/fts3_tokenize_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:     if( pCsr->zInput==0 ){",
          "351:       rc = SQLITE_NOMEM;",
          "352:     }else{",
          "354:       pCsr->zInput[nByte] = 0;",
          "355:       rc = pTab->pMod->xOpen(pTab->pTok, pCsr->zInput, nByte, &pCsr->pCsr);",
          "356:       if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "353:       memcpy(pCsr->zInput, zByte, nByte);",
          "",
          "[Added Lines]",
          "353:       if( nByte>0 ) memcpy(pCsr->zInput, zByte, nByte);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2502:   if( rc!=SQLITE_OK ) return rc;",
          "2503:   sqlite3_bind_int64(pStmt, 1, iAbsLevel+1);",
          "2504:   sqlite3_bind_int64(pStmt, 2,",
          "2506:   );",
          "",
          "[Removed Lines]",
          "2505:       ((iAbsLevel/FTS3_SEGDIR_MAXLEVEL)+1) * FTS3_SEGDIR_MAXLEVEL",
          "",
          "[Added Lines]",
          "2505:       (((u64)iAbsLevel/FTS3_SEGDIR_MAXLEVEL)+1) * FTS3_SEGDIR_MAXLEVEL",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ae6dd8d3e921670ee6450453b54245dd71bcfff3fd1bc7fdb7cf4cf9585c3375",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5821:   INSERT INTO f(f) VALUES ('merge=53,216');",
          "5822: } {0 {}}",
          "5824: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5824: #-------------------------------------------------------------------------",
          "5825: #",
          "5826: reset_db",
          "5827: do_execsql_test 36.0 {",
          "5828:   CREATE VIRTUAL TABLE f USING fts3(a,b);",
          "5829:   CREATE TABLE 'f_stat'(id INTEGER PRIMARY KEY, value BLOB);",
          "5830:   INSERT INTO f_stat VALUES (1,x'11014101000101c5c5014b010164c5014b010101c50101c5c5010201010101014101000101c5c5014b010101c5014b010101c50101c5c501010100c50101c5c5010101010101e40201010101014101000201010101014101000101010201010101014101000101c5c503b5fefefe3afeffffc5c5c5c50101010101010201010101014101adadadadadadadadadadadad91adadadadadadadad0101c50101c5c501f9ffffffffffffffff0001010102010101010140f5000101c5c5014b010101c50101c5c501010101e6010201010101014101000101c5c5014b010101c50101c5c5010101114b0101c5c50101010a0101020101e60101');",
          "5831: }",
          "5833: do_catchsql_test 36.1 {",
          "5834:   INSERT INTO f(f) VALUES ('merge=59,59');",
          "5835: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13a8f203d9a03e0f1dfe03225acecd93c8de3022",
      "candidate_info": {
        "commit_hash": "13a8f203d9a03e0f1dfe03225acecd93c8de3022",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13a8f203d9a03e0f1dfe03225acecd93c8de3022",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt.test"
        ],
        "message": "Further improvements to shadow table corruption detection in FTS3.\n\nFossilOrigin-Name: e35d8c76aae59f57cc5193f79b21b4298029bea78e1aab7af67432162ce63e00",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt.test||test/fts3corrupt.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4245:       pWriter->bNoLeafData = (pWriter->nLeafData==0);",
          "4246:       nRoot = sqlite3_column_bytes(pSelect, 4);",
          "4247:       aRoot = sqlite3_column_blob(pSelect, 4);",
          "4248:     }else{",
          "4249:       return sqlite3_reset(pSelect);",
          "4250:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4248:       if( aRoot==0 ){",
          "4249:         sqlite3_reset(pSelect);",
          "4250:         return nRoot ? SQLITE_NOMEM : FTS_CORRUPT_VTAB;",
          "4251:       }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dfcf081d842629a0b177be7eb2eb8ce719324068991040a581e33ea1d5db3d27",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt.test||test/fts3corrupt.test": [
          "File: test/fts3corrupt.test -> test/fts3corrupt.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: } {1 {database disk image is malformed}}",
          "166: do_test 5.3.1 { sqlite3_extended_errcode db } SQLITE_CORRUPT_VTAB",
          "169: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168: # 2019-11-18 https://bugs.chromium.org/p/chromium/issues/detail?id=1025467",
          "169: # bug1",
          "170: db close",
          "171: sqlite3 db :memory:",
          "172: do_catchsql_test 6.10 {",
          "173:   CREATE VIRTUAL TABLE f using fts3(a,b);",
          "174:   CREATE TABLE f_stat(id INTEGER PRIMARY KEY, value BLOB);",
          "175:   INSERT INTO f_segdir VALUES (2000, 0,0,0, '16', '');",
          "176:   INSERT INTO f_segdir VALUES (1999, 0,0,0, '0 18',",
          "177:                                x'000131030102000103323334050101010200');",
          "178:   INSERT INTO f_segments (blockid) values (16);",
          "179:   INSERT INTO f_segments values (0, x'');",
          "180:   INSERT INTO f_stat VALUES (1,x'cf0f01');",
          "181:   INSERT INTO f(f) VALUES (\"merge=1\");",
          "182: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b97f3532f55af5faa4d8e6256577437b4e50ec06",
      "candidate_info": {
        "commit_hash": "b97f3532f55af5faa4d8e6256577437b4e50ec06",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b97f3532f55af5faa4d8e6256577437b4e50ec06",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Convert an assert() back into a conditional.  The conditional was converted into an assert() by check-in [6ae4ad6ebee4db88] (2009-05-28) because we were unable to find a test case for it.  Yongheng's fuzzer just now found that test case.\n\nFossilOrigin-Name: 4d0b9109f7a5312d4e136395e08b11dad64d746bc106ad44d47675e5b1dcb4ef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6afadd3b3a40b0ef29fd14fb24c2a4b9479483e5f8b9125ce02d8daae662207f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "861fb1e9dc039f00ff4997254b956352f37d71ac",
      "candidate_info": {
        "commit_hash": "861fb1e9dc039f00ff4997254b956352f37d71ac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/861fb1e9dc039f00ff4997254b956352f37d71ac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/main.c",
          "src/pager.c",
          "src/pager.h",
          "src/wal.c",
          "src/wal.h"
        ],
        "message": "Block on the WRITER lock when attempting to run recovery.\n\nFossilOrigin-Name: 105d6c9bbcadc64faa2b24e315cb13227b17cfc6bf1b3512713f80ce56976a3d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/wal.c||src/wal.c",
          "src/wal.h||src/wal.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d096ea3fe20f8af90f9e3f798fd0a69527b32ac8e208ade58b9d0af0e831f41b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3442: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3445:     if( pBt->pPage1==0 && wrflag ){",
          "3446:       assert( pBt->inTransaction==TRANS_NONE );",
          "3448:       if( rc!=SQLITE_OK ) break;",
          "3449:     }",
          "3450: #endif",
          "",
          "[Removed Lines]",
          "3447:       rc = sqlite3PagerWalWriteLock(p->db, pPager, 1);",
          "",
          "[Added Lines]",
          "3445:     sqlite3PagerWalDb(pPager, p->db);",
          "3448:       rc = sqlite3PagerWalWriteLock(pPager, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3475:     }",
          "3477:     if( rc!=SQLITE_OK ){",
          "3479:       unlockBtreeIfUnused(pBt);",
          "3480:     }",
          "3481:   }while( (rc&0xFF)==SQLITE_BUSY && pBt->inTransaction==TRANS_NONE &&",
          "3482:           btreeInvokeBusyHandler(pBt) );",
          "",
          "[Removed Lines]",
          "3478:       sqlite3PagerWalWriteLock(p->db, pPager, 0);",
          "",
          "[Added Lines]",
          "3479:       sqlite3PagerWalWriteLock(pPager, 0);",
          "3482:     sqlite3PagerWalDb(pPager, 0);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4481:           rc = SQLITE_OK;",
          "4482:         }",
          "4483:         if( rc==SQLITE_OK ){",
          "4485:         }",
          "4486:         if( rc==SQLITE_OK ){",
          "4487:           rc = sqlite3BtreeBeginTrans(pBt, 0, 0);",
          "4489:         }",
          "4490:         if( bUnlock ){",
          "4491:           sqlite3PagerSnapshotUnlock(pPager);",
          "",
          "[Removed Lines]",
          "4484:           rc = sqlite3PagerSnapshotOpen(pPager, db, pSnapshot);",
          "4488:           sqlite3PagerSnapshotOpen(pPager, 0, 0);",
          "",
          "[Added Lines]",
          "4484:           rc = sqlite3PagerSnapshotOpen(pPager, pSnapshot);",
          "4488:           sqlite3PagerSnapshotOpen(pPager, 0);",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7585:   int rc = SQLITE_OK;",
          "7586:   if( pagerUseWal(pPager) && pPager->exclusiveMode==0 ){",
          "7588:   }",
          "7589:   return rc;",
          "7590: }",
          "7591: #endif",
          "7593: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "",
          "[Removed Lines]",
          "7584: int sqlite3PagerWalWriteLock(sqlite3 *db, Pager *pPager, int bLock){",
          "7587:     rc = sqlite3WalWriteLock(db, pPager->pWal, bLock);",
          "",
          "[Added Lines]",
          "7584: int sqlite3PagerWalWriteLock(Pager *pPager, int bLock){",
          "7587:     rc = sqlite3WalWriteLock(pPager->pWal, bLock);",
          "7596: void sqlite3PagerWalDb(Pager *pPager, sqlite3 *db){",
          "7597:   if( pagerUseWal(pPager) ){",
          "7598:     sqlite3WalDb(pPager->pWal, db);",
          "7599:   }",
          "7600: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7611: int sqlite3PagerSnapshotOpen(",
          "7612:   Pager *pPager,",
          "7614:   sqlite3_snapshot *pSnapshot",
          "7615: ){",
          "7616:   int rc = SQLITE_OK;",
          "7617:   if( pPager->pWal ){",
          "7619:   }else{",
          "7620:     rc = SQLITE_ERROR;",
          "7621:   }",
          "",
          "[Removed Lines]",
          "7613:   sqlite3 *db,",
          "7618:     sqlite3WalSnapshotOpen(pPager->pWal, db, pSnapshot);",
          "",
          "[Added Lines]",
          "7627:     sqlite3WalSnapshotOpen(pPager->pWal, pSnapshot);",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   int sqlite3PagerCloseWal(Pager *pPager, sqlite3*);",
          "179: # ifdef SQLITE_ENABLE_SNAPSHOT",
          "180:   int sqlite3PagerSnapshotGet(Pager*, sqlite3_snapshot **ppSnapshot);",
          "182:   int sqlite3PagerSnapshotRecover(Pager *pPager);",
          "183:   int sqlite3PagerSnapshotCheck(Pager *pPager, sqlite3_snapshot *pSnapshot);",
          "184:   void sqlite3PagerSnapshotUnlock(Pager *pPager);",
          "",
          "[Removed Lines]",
          "181:   int sqlite3PagerSnapshotOpen(Pager*, sqlite3*, sqlite3_snapshot *pSnapshot);",
          "",
          "[Added Lines]",
          "181:   int sqlite3PagerSnapshotOpen(Pager*, sqlite3_snapshot *pSnapshot);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186: #endif",
          "188: #if !defined(SQLITE_OMIT_WAL) && defined(SQLITE_ENABLE_SETLK_TIMEOUT)",
          "190: #else",
          "192: #endif",
          "194: #ifdef SQLITE_DIRECT_OVERFLOW_READ",
          "",
          "[Removed Lines]",
          "189:   int sqlite3PagerWalWriteLock(sqlite3*, Pager*, int);",
          "191: # define sqlite3PagerWalWriteLock(x,y,z) SQLITE_OK",
          "",
          "[Added Lines]",
          "189:   int sqlite3PagerWalWriteLock(Pager*, int);",
          "190:   void sqlite3PagerWalDb(Pager*, sqlite3*);",
          "192: # define sqlite3PagerWalWriteLock(y,z) SQLITE_OK",
          "193: # define sqlite3PagerWalDb(x,y)",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "466: #endif",
          "467: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "472: #endif",
          "473: };",
          "",
          "[Removed Lines]",
          "469: # ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "470:   sqlite3 *dbSnapshot;",
          "471: # endif",
          "",
          "[Added Lines]",
          "469: #endif",
          "470: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "471:   sqlite3 *db;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2119: #define WAL_RETRY  (-1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2121: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2128: static int walEnableBlocking(Wal *pWal){",
          "2129:   int res = 0;",
          "2130:   if( pWal->db ){",
          "2131:     int tmout = pWal->db->busyTimeout;",
          "2132:     if( tmout ){",
          "2133:       int rc;",
          "2134:       rc = sqlite3OsFileControl(",
          "2135:           pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout",
          "2136:           );",
          "2137:       res = (rc==SQLITE_OK);",
          "2138:     }",
          "2139:   }",
          "2140:   return res;",
          "2141: }",
          "2146: static void walDisableBlocking(Wal *pWal){",
          "2147:   int tmout = 0;",
          "2148:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2149: }",
          "2160: int sqlite3WalWriteLock(Wal *pWal, int bLock){",
          "2161:   int rc = SQLITE_OK;",
          "2162:   assert( pWal->readLock<0 || bLock==0 );",
          "2163:   if( bLock ){",
          "2164:     assert( pWal->db );",
          "2165:     if( walEnableBlocking(pWal) ){",
          "2166:       rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2167:       if( rc==SQLITE_OK ){",
          "2168:         pWal->writeLock = 1;",
          "2169:       }",
          "2170:       walDisableBlocking(pWal);",
          "2171:     }",
          "2172:   }else if( pWal->writeLock ){",
          "2173:     walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2174:     pWal->writeLock = 0;",
          "2175:   }",
          "2176:   return rc;",
          "2177: }",
          "2182: void sqlite3WalDb(Wal *pWal, sqlite3 *db){",
          "2183:   pWal->db = db;",
          "2184: }",
          "2189: static int walLockWriter(Wal *pWal){",
          "2190:   int rc;",
          "2191:   walEnableBlocking(pWal);",
          "2192:   rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2193:   walDisableBlocking(pWal);",
          "2194:   return rc;",
          "2195: }",
          "2196: #else",
          "2197: # define walEnableBlocking(x) 0",
          "2198: # define walDisableBlocking(x)",
          "2199: # define walLockWriter(pWal) walLockExclusive((pWal), WAL_WRITE_LOCK, 1)",
          "2200: # define sqlite3WalDb(pWal)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2183:       }",
          "2184:     }else{",
          "2185:       int bWriteLock = pWal->writeLock;",
          "2189:         pWal->writeLock = 1;",
          "2190:         if( SQLITE_OK==(rc = walIndexPage(pWal, 0, &page0)) ){",
          "2191:           badHdr = walIndexTryHdr(pWal, pChanged);",
          "",
          "[Removed Lines]",
          "2186:       if( bWriteLock",
          "2187:        || SQLITE_OK==(rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1))",
          "2188:       ){",
          "",
          "[Added Lines]",
          "2268:       if( bWriteLock || SQLITE_OK==(rc = walLockWriter(pWal)) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2737: }",
          "",
          "[Removed Lines]",
          "2740: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "2747: static int walEnableBlocking(sqlite3 *db, Wal *pWal){",
          "2748:   int res = 0;",
          "2749:   if( db->busyTimeout ){",
          "2750:     int rc;",
          "2751:     int tmout = db->busyTimeout;",
          "2752:     rc = sqlite3OsFileControl(",
          "2753:         pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout",
          "2754:     );",
          "2755:     res = (rc==SQLITE_OK);",
          "2756:   }",
          "2757:   return res;",
          "2758: }",
          "2763: static void walDisableBlocking(Wal *pWal){",
          "2764:   int tmout = 0;",
          "2765:   sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_LOCK_TIMEOUT, (void*)&tmout);",
          "2766: }",
          "2777: int sqlite3WalWriteLock(sqlite3 *db, Wal *pWal, int bLock){",
          "2778:   int rc = SQLITE_OK;",
          "2779:   assert( pWal->readLock<0 || bLock==0 );",
          "2780:   if( bLock ){",
          "2781:     if( walEnableBlocking(db, pWal) ){",
          "2782:       rc = walLockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2783:       if( rc==SQLITE_OK ){",
          "2784:         pWal->writeLock = 1;",
          "2785:       }",
          "2786:       walDisableBlocking(pWal);",
          "2787:     }",
          "2788:   }else if( pWal->writeLock ){",
          "2789:     walUnlockExclusive(pWal, WAL_WRITE_LOCK, 1);",
          "2790:     pWal->writeLock = 0;",
          "2791:   }",
          "2792:   return rc;",
          "2793: }",
          "2794: #else",
          "2795: # define walEnableBlocking(x,y) 0",
          "2796: # define walDisableBlocking(x)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2836:     rc = walLockShared(pWal, WAL_CKPT_LOCK);",
          "2837:     walDisableBlocking(pWal);",
          "",
          "[Removed Lines]",
          "2835:     walEnableBlocking(pWal->dbSnapshot, pWal);",
          "",
          "[Added Lines]",
          "2856:     walEnableBlocking(pWal);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3670:     xBusy2 = 0;",
          "3671:   }",
          "",
          "[Removed Lines]",
          "3669:   if( walEnableBlocking(db, pWal) ){",
          "",
          "[Added Lines]",
          "3690:   sqlite3WalDb(pWal, db);",
          "3691:   if( walEnableBlocking(pWal) ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3710:   if( rc==SQLITE_OK ){",
          "3711:     walDisableBlocking(pWal);",
          "3712:     rc = walIndexReadHdr(pWal, &isChanged);",
          "3714:     if( isChanged && pWal->pDbFd->pMethods->iVersion>=3 ){",
          "3715:       sqlite3OsUnfetch(pWal->pDbFd, 0, 0);",
          "3716:     }",
          "",
          "[Removed Lines]",
          "3713:     walEnableBlocking(db, pWal);",
          "",
          "[Added Lines]",
          "3735:     walEnableBlocking(pWal);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3743:   }",
          "3745:   walDisableBlocking(pWal);",
          "3748:   sqlite3WalEndWriteTransaction(pWal);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3768:   sqlite3WalDb(pWal, 0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3870: void sqlite3WalSnapshotOpen(",
          "3871:   Wal *pWal,",
          "3873:   sqlite3_snapshot *pSnapshot",
          "3874: ){",
          "3875:   pWal->pSnapshot = (WalIndexHdr*)pSnapshot;",
          "3879: }",
          "",
          "[Removed Lines]",
          "3872:   sqlite3 *db,",
          "3876: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "3877:   pWal->dbSnapshot = db;",
          "3878: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.h||src/wal.h": [
          "File: src/wal.h -> src/wal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: #ifdef SQLITE_ENABLE_SNAPSHOT",
          "132: int sqlite3WalSnapshotGet(Wal *pWal, sqlite3_snapshot **ppSnapshot);",
          "134: int sqlite3WalSnapshotRecover(Wal *pWal);",
          "135: int sqlite3WalSnapshotCheck(Wal *pWal, sqlite3_snapshot *pSnapshot);",
          "136: void sqlite3WalSnapshotUnlock(Wal *pWal);",
          "",
          "[Removed Lines]",
          "133: void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3*, sqlite3_snapshot *pSnapshot);",
          "",
          "[Added Lines]",
          "133: void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147: sqlite3_file *sqlite3WalFile(Wal *pWal);",
          "149: #ifdef SQLITE_ENABLE_SETLK_TIMEOUT",
          "151: #endif",
          "",
          "[Removed Lines]",
          "150: int sqlite3WalWriteLock(sqlite3 *db, Wal *pWal, int bLock);",
          "",
          "[Added Lines]",
          "150: int sqlite3WalWriteLock(Wal *pWal, int bLock);",
          "151: void sqlite3WalDb(Wal *pWal, sqlite3 *db);",
          "",
          "---------------"
        ]
      }
    }
  ]
}