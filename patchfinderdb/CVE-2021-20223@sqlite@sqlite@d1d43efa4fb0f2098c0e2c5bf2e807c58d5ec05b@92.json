{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b4c4d4a674efe176437e5586cb55839ba43d499",
      "candidate_info": {
        "commit_hash": "7b4c4d4a674efe176437e5586cb55839ba43d499",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b4c4d4a674efe176437e5586cb55839ba43d499",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Disable AggInfo consistency checks when unwinding after an OOM.\n\nFossilOrigin-Name: 65179814aa0ae5927bae97c10ef20f290535399b889d96d5b88931f62635f212",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c29a9e484e1dd245962afbbf511b183462af5e86c511261ccf018345e773f940",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6804: select_end:",
          "6805:   sqlite3ExprListDelete(db, pMinMaxOrderBy);",
          "6806: #ifdef SQLITE_DEBUG",
          "6808:     for(i=0; i<pAggInfo->nColumn; i++){",
          "6809:       Expr *pExpr = pAggInfo->aCol[i].pCExpr;",
          "6810:       assert( pExpr!=0 || db->mallocFailed );",
          "",
          "[Removed Lines]",
          "6807:   if( pAggInfo ){",
          "",
          "[Added Lines]",
          "6807:   if( pAggInfo && !db->mallocFailed ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3120fdf5be0ae665448f0e3d694a53f12a635bc",
      "candidate_info": {
        "commit_hash": "b3120fdf5be0ae665448f0e3d694a53f12a635bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b3120fdf5be0ae665448f0e3d694a53f12a635bc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove dead code that was added during initial development of RENAME COLUMN but never actually served a purpose.\n\nFossilOrigin-Name: c95c4cda4640f05d61b13b4e60494dec07d4483734fc41ffcce73fb5163cbb0d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7e170e67f24c7cdef7e7ceac4e0b81a75382618e4abe9e604f3d7f6db9dc6396",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3844:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
          "3845:           assert( SQLITE_AFF_BLOB=='A' );",
          "3846:           assert( SQLITE_AFF_TEXT=='B' );",
          "3851:           sqlite3VdbeAddOp4(v, OP_Affinity, iReg, 1, 0,",
          "3852:                             &zAff[(aff-'B')*2], P4_STATIC);",
          "3853:         }",
          "",
          "[Removed Lines]",
          "3847:           if( iReg!=target ){",
          "3848:             sqlite3VdbeAddOp2(v, OP_SCopy, iReg, target);",
          "3849:             iReg = target;",
          "3850:           }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "799443b14f571a0148f082d7a3ffa33c1b49c553",
      "candidate_info": {
        "commit_hash": "799443b14f571a0148f082d7a3ffa33c1b49c553",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/799443b14f571a0148f082d7a3ffa33c1b49c553",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "Do the oversize-WAL corruption test before the size hint is issued.\n\nFossilOrigin-Name: fdc5fb902d7f2d10f73e64fe30c67153b59b26c5d707fc9c354e90967dbcc214",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec2c340c39bc78e4bce0eb01ea408c95ba121103cc77f300f29f3001fc345c20",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2009:         sqlite3OsFileControl(pWal->pDbFd, SQLITE_FCNTL_CKPT_START, 0);",
          "2010:         rc = sqlite3OsFileSize(pWal->pDbFd, &nSize);",
          "2011:         if( rc==SQLITE_OK && nSize<nReq ){",
          "2013:         }",
          "2021:       }",
          "",
          "[Removed Lines]",
          "2012:           sqlite3OsFileControlHint(pWal->pDbFd, SQLITE_FCNTL_SIZE_HINT, &nReq);",
          "2018:         if( rc==SQLITE_OK && (nSize+(i64)pWal->hdr.mxFrame*szPage)<nReq ){",
          "2019:           rc = SQLITE_CORRUPT_BKPT;",
          "2020:         }",
          "",
          "[Added Lines]",
          "2012:           if( (nSize+(i64)pWal->hdr.mxFrame*szPage)<nReq ){",
          "2016:             rc = SQLITE_CORRUPT_BKPT;",
          "2017:           }else{",
          "2018:             sqlite3OsFileControlHint(pWal->pDbFd, SQLITE_FCNTL_SIZE_HINT,&nReq);",
          "2019:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec1650a239f2e54d8ddd1841838ab9ed0e6dc1fa",
      "candidate_info": {
        "commit_hash": "ec1650a239f2e54d8ddd1841838ab9ed0e6dc1fa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec1650a239f2e54d8ddd1841838ab9ed0e6dc1fa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "test/fkey5.test"
        ],
        "message": "Fix a problem with \"PRAGMA foreign_key_check\" where if a table in one schema appears to have foreign key constraints against another table in a different schema, the pragma will try to check the constraints even though they do not apply because they are in different schemas.\n\nFossilOrigin-Name: 81bc4b65ae2a68128b0be75a7a3d4f47f05cc588ff130ba56366ab9b16289228",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "test/fkey5.test||test/fkey5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6ffd17b668a8ad561c37e89063afb6e7f8425e557e93025b7527fe3656585d77",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1403:     regRow = ++pParse->nMem;",
          "1404:     k = sqliteHashFirst(&db->aDb[iDb].pSchema->tblHash);",
          "1405:     while( k ){",
          "1407:       if( zRight ){",
          "1408:         pTab = sqlite3LocateTable(pParse, 0, zRight, zDb);",
          "1409:         k = 0;",
          "",
          "[Removed Lines]",
          "1406:       int iTabDb;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1412:         k = sqliteHashNext(k);",
          "1413:       }",
          "1414:       if( pTab==0 || pTab->pFKey==0 ) continue;",
          "1418:       if( pTab->nCol+regRow>pParse->nMem ) pParse->nMem = pTab->nCol + regRow;",
          "1420:       sqlite3VdbeLoadString(v, regResult, pTab->zName);",
          "1421:       for(i=1, pFK=pTab->pFKey; pFK; i++, pFK=pFK->pNextFrom){",
          "1422:         pParent = sqlite3FindTable(db, pFK->zTo, zDb);",
          "1423:         if( pParent==0 ) continue;",
          "1424:         pIdx = 0;",
          "1426:         x = sqlite3FkLocateIndex(pParse, pParent, pFK, &pIdx, 0);",
          "1427:         if( x==0 ){",
          "1428:           if( pIdx==0 ){",
          "1430:           }else{",
          "1432:             sqlite3VdbeSetP4KeyInfo(pParse, pIdx);",
          "1433:           }",
          "1434:         }else{",
          "",
          "[Removed Lines]",
          "1415:       iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "1416:       sqlite3CodeVerifySchema(pParse, iTabDb);",
          "1417:       sqlite3TableLock(pParse, iTabDb, pTab->tnum, 0, pTab->zName);",
          "1419:       sqlite3OpenTable(pParse, 0, iTabDb, pTab, OP_OpenRead);",
          "1425:         sqlite3TableLock(pParse, iTabDb, pParent->tnum, 0, pParent->zName);",
          "1429:             sqlite3OpenTable(pParse, i, iTabDb, pParent, OP_OpenRead);",
          "1431:             sqlite3VdbeAddOp3(v, OP_OpenRead, i, pIdx->tnum, iTabDb);",
          "",
          "[Added Lines]",
          "1414:       iDb = sqlite3SchemaToIndex(db, pTab->pSchema);",
          "1415:       zDb = db->aDb[iDb].zDbSName;",
          "1416:       sqlite3CodeVerifySchema(pParse, iDb);",
          "1417:       sqlite3TableLock(pParse, iDb, pTab->tnum, 0, pTab->zName);",
          "1419:       sqlite3OpenTable(pParse, 0, iDb, pTab, OP_OpenRead);",
          "1425:         sqlite3TableLock(pParse, iDb, pParent->tnum, 0, pParent->zName);",
          "1429:             sqlite3OpenTable(pParse, i, iDb, pParent, OP_OpenRead);",
          "1431:             sqlite3VdbeAddOp3(v, OP_OpenRead, i, pIdx->tnum, iDb);",
          "",
          "---------------"
        ],
        "test/fkey5.test||test/fkey5.test": [
          "File: test/fkey5.test -> test/fkey5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:   PRAGMA foreign_key_check;",
          "431: } {1 {foreign key mismatch - \"c11\" referencing \"tt\"}}",
          "433: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433: # 2020-07-03 Bug in foreign_key_check discovered while working on the",
          "434: # forum reports that pragma_foreign_key_check does not accept an argument:",
          "435: # If two separate schemas seem to reference one another, that causes",
          "436: # problems for foreign_key_check.",
          "437: #",
          "438: reset_db",
          "439: do_execsql_test 12.0 {",
          "440:   ATTACH ':memory:' as aux;",
          "441:   CREATE TABLE aux.t1(a INTEGER PRIMARY KEY, b TEXT REFERENCES t2);",
          "442:   CREATE TABLE main.t2(x TEXT PRIMARY KEY, y INT);",
          "443:   INSERT INTO main.t2 VALUES('abc',11),('def',22),('xyz',99);",
          "444:   INSERT INTO aux.t1 VALUES(5,'abc'),(7,'xyz'),(9,'oops');",
          "445:   PRAGMA foreign_key_check=t1;",
          "446: } {t1 5 t2 0 t1 7 t2 0 t1 9 t2 0}",
          "447: do_execsql_test 12.1 {",
          "448:   CREATE TABLE aux.t2(x TEXT PRIMARY KEY, y INT);",
          "449:   INSERT INTO aux.t2 VALUES('abc',11),('def',22),('xyz',99);",
          "450:   PRAGMA foreign_key_check=t1;",
          "451: } {t1 9 t2 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
      "candidate_info": {
        "commit_hash": "1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix the parse.sql output file so that it is readable into a database where foreign keys are enforced.\n\nFossilOrigin-Name: 3a82c554c3bde4640df6865686f8f70e2c1e07c581fed4772b6b0a8ec1b10bb6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0fab65c79f675c825ed7e85c82b65ce6f990c9d0796ebb3886942d241df7b268",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4189:       return;",
          "4190:     }",
          "4191:     fprintf(sql,",
          "4192:        \"CREATE TABLE symbol(\\n\"",
          "4193:        \"  id INTEGER PRIMARY KEY,\\n\"",
          "4194:        \"  name TEXT NOT NULL,\\n\"",
          "4195:        \"  isTerminal BOOLEAN NOT NULL,\\n\"",
          "4197:        \");\\n\"",
          "4198:     );",
          "4199:     for(i=0; i<lemp->nsymbol; i++){",
          "",
          "[Removed Lines]",
          "4196:        \"  fallback INTEGER REFERENCES symbol\\n\"",
          "",
          "[Added Lines]",
          "4192:        \"BEGIN;\\n\"",
          "4197:        \"  fallback INTEGER REFERENCES symbol\"",
          "4198:                \" DEFERRABLE INITIALLY DEFERRED\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4244:         }",
          "4245:       }",
          "4246:     }",
          "4247:   }",
          "4248:   lineno = 1;",
          "4249:   tplt_xfer(lemp->name,in,out,&lineno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4249:     fprintf(sql, \"COMMIT;\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}