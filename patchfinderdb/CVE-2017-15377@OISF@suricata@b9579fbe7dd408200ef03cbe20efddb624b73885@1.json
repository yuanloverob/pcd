{
  "cve_id": "CVE-2017-15377",
  "cve_desc": "In Suricata before 4.x, it was possible to trigger lots of redundant checks on the content of crafted network traffic with a certain signature, because of DetectEngineContentInspection in detect-engine-content-inspection.c. The search engine doesn't stop when it should after no match is found; instead, it stops only upon reaching inspection-recursion-limit (3000 by default).",
  "repo": "OISF/suricata",
  "patch_hash": "b9579fbe7dd408200ef03cbe20efddb624b73885",
  "patch_info": {
    "commit_hash": "b9579fbe7dd408200ef03cbe20efddb624b73885",
    "repo": "OISF/suricata",
    "commit_url": "https://github.com/OISF/suricata/commit/b9579fbe7dd408200ef03cbe20efddb624b73885",
    "files": [
      "src/detect-engine-content-inspection.c"
    ],
    "message": "detect: avoid needless recursive scanning\n\nDon't recursively inspect a detect list if the recursion\ndoesn't increase chance of success.",
    "before_after_code_files": [
      "src/detect-engine-content-inspection.c||src/detect-engine-content-inspection.c"
    ]
  },
  "patch_diff": {
    "src/detect-engine-content-inspection.c||src/detect-engine-content-inspection.c": [
      "File: src/detect-engine-content-inspection.c -> src/detect-engine-content-inspection.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "286:             SCLogDebug(\"found %p cd negated %s\", found, cd->flags & DETECT_CONTENT_NEGATED ? \"true\" : \"false\");",
      "288:             if (found == NULL && !(cd->flags & DETECT_CONTENT_NEGATED)) {",
      "289:                 goto no_match;",
      "290:             } else if (found == NULL && (cd->flags & DETECT_CONTENT_NEGATED)) {",
      "291:                 goto match;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "289:                 if ((cd->flags & (DETECT_CONTENT_DISTANCE|DETECT_CONTENT_WITHIN)) == 0) {",
      "291:                     det_ctx->discontinue_matching = 1;",
      "292:                 }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "310:                         SCLogWarning(SC_ERR_INVALID_VALUE, \"Can't modify payload without packet\");",
      "311:                     }",
      "312:                 }",
      "321:                 if (smd->is_last) {",
      "323:                 }",
      "325:                 SCLogDebug(\"content %\"PRIu32, cd->id);",
      "",
      "[Removed Lines]",
      "313:                 if (!(cd->flags & DETECT_CONTENT_RELATIVE_NEXT)) {",
      "314:                     SCLogDebug(\"no relative match coming up, so this is a match\");",
      "315:                     goto match;",
      "316:                 }",
      "322:                     goto no_match;",
      "",
      "[Added Lines]",
      "321:                     goto match;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "333:                 if (r == 1) {",
      "334:                     SCReturnInt(1);",
      "335:                 }",
      "338:                     goto no_match;",
      "341:                 prev_offset = (match_offset - (cd->content_len - 1));",
      "",
      "[Removed Lines]",
      "337:                 if (det_ctx->discontinue_matching)",
      "",
      "[Added Lines]",
      "335:                 SCLogDebug(\"no match for 'next sm'\");",
      "337:                 if (det_ctx->discontinue_matching) {",
      "338:                     SCLogDebug(\"'next sm' said to discontinue this right now\");",
      "340:                 }",
      "343:                 if ((cd->flags & DETECT_CONTENT_RELATIVE_NEXT) == 0) {",
      "344:                     SCLogDebug(\"'next sm' does not depend on me, so we can give up\");",
      "345:                     det_ctx->discontinue_matching = 1;",
      "346:                     goto no_match;",
      "347:                 }",
      "349:                 SCLogDebug(\"'next sm' depends on me %p, lets see what we can do (flags %u)\", cd, cd->flags);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7419bb2bace4f6763095773f3c5ed72aa8d852b3",
      "candidate_info": {
        "commit_hash": "7419bb2bace4f6763095773f3c5ed72aa8d852b3",
        "repo": "OISF/suricata",
        "commit_url": "https://github.com/OISF/suricata/commit/7419bb2bace4f6763095773f3c5ed72aa8d852b3",
        "files": [
          "src/detect-engine-content-inspection.c"
        ],
        "message": "detect: avoid needless recursive scanning\n\nDon't recursively inspect a detect list if the recursion\ndoesn't increase chance of success.",
        "before_after_code_files": [
          "src/detect-engine-content-inspection.c||src/detect-engine-content-inspection.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/detect-engine-content-inspection.c||src/detect-engine-content-inspection.c"
          ],
          "candidate": [
            "src/detect-engine-content-inspection.c||src/detect-engine-content-inspection.c"
          ]
        }
      },
      "candidate_diff": {
        "src/detect-engine-content-inspection.c||src/detect-engine-content-inspection.c": [
          "File: src/detect-engine-content-inspection.c -> src/detect-engine-content-inspection.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:             SCLogDebug(\"found %p cd negated %s\", found, cd->flags & DETECT_CONTENT_NEGATED ? \"true\" : \"false\");",
          "288:             if (found == NULL && !(cd->flags & DETECT_CONTENT_NEGATED)) {",
          "289:                 goto no_match;",
          "290:             } else if (found == NULL && (cd->flags & DETECT_CONTENT_NEGATED)) {",
          "291:                 goto match;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:                 if ((cd->flags & (DETECT_CONTENT_DISTANCE|DETECT_CONTENT_WITHIN)) == 0) {",
          "291:                     det_ctx->discontinue_matching = 1;",
          "292:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310:                         SCLogWarning(SC_ERR_INVALID_VALUE, \"Can't modify payload without packet\");",
          "311:                     }",
          "312:                 }",
          "321:                 if (sm->next == NULL) {",
          "323:                 }",
          "325:                 SCLogDebug(\"content %\"PRIu32, cd->id);",
          "",
          "[Removed Lines]",
          "313:                 if (!(cd->flags & DETECT_CONTENT_RELATIVE_NEXT)) {",
          "314:                     SCLogDebug(\"no relative match coming up, so this is a match\");",
          "315:                     goto match;",
          "316:                 }",
          "322:                     goto no_match;",
          "",
          "[Added Lines]",
          "321:                     goto match;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "332:                 if (r == 1) {",
          "333:                     SCReturnInt(1);",
          "334:                 }",
          "337:                     goto no_match;",
          "340:                 prev_offset = (match_offset - (cd->content_len - 1));",
          "",
          "[Removed Lines]",
          "336:                 if (det_ctx->discontinue_matching)",
          "",
          "[Added Lines]",
          "334:                 SCLogDebug(\"no match for 'next sm'\");",
          "336:                 if (det_ctx->discontinue_matching) {",
          "337:                     SCLogDebug(\"'next sm' said to discontinue this right now\");",
          "339:                 }",
          "342:                 if ((cd->flags & DETECT_CONTENT_RELATIVE_NEXT) == 0) {",
          "343:                     SCLogDebug(\"'next sm' does not depend on me, so we can give up\");",
          "344:                     det_ctx->discontinue_matching = 1;",
          "345:                     goto no_match;",
          "346:                 }",
          "348:                 SCLogDebug(\"'next sm' depends on me %p, lets see what we can do (flags %u)\", cd, cd->flags);",
          "",
          "---------------"
        ]
      }
    }
  ]
}