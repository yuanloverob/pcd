{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e30a64fae76a3eea6e512eacd06aa5e487427fbc",
      "candidate_info": {
        "commit_hash": "e30a64fae76a3eea6e512eacd06aa5e487427fbc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e30a64fae76a3eea6e512eacd06aa5e487427fbc",
        "files": [
          "util/libeay.num"
        ],
        "message": "Update ordinals\n\nThanks to the change of mkdef.pl, a few more deprecated functions were\nproperly defined in util/libeay.num.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: BN_generate_prime                       132 EXIST::FUNCTION:DEPRECATED",
          "127: BN_get_word                             133 EXIST::FUNCTION:",
          "128: BN_is_bit_set                           134 EXIST::FUNCTION:",
          "130: BN_lshift                               136 EXIST::FUNCTION:",
          "131: BN_lshift1                              137 EXIST::FUNCTION:",
          "132: BN_mask_bits                            138 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "129: BN_is_prime                             135 NOEXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "129: BN_is_prime                             135 EXIST::FUNCTION:DEPRECATED",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1744: X509_ATTRIBUTE_create_by_txt            2218 EXIST::FUNCTION:",
          "1745: X509at_add1_attr_by_txt                 2219 EXIST::FUNCTION:",
          "1746: BN_pseudo_rand                          2239 EXIST::FUNCTION:",
          "1748: BN_CTX_end                              2241 EXIST::FUNCTION:",
          "1749: BN_CTX_start                            2242 EXIST::FUNCTION:",
          "1750: BN_CTX_get                              2243 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1747: BN_is_prime_fasttest                    2240 NOEXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1747: BN_is_prime_fasttest                    2240 EXIST::FUNCTION:DEPRECATED",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2900: BN_BLINDING_invert_ex                   3337 EXIST::FUNCTION:",
          "2901: NAME_CONSTRAINTS_free                   3338 EXIST::FUNCTION:",
          "2902: STORE_ATTR_INFO_set_number              3339 NOEXIST::FUNCTION:",
          "2904: X509_STORE_CTX_set0_param               3341 EXIST::FUNCTION:",
          "2905: POLICY_MAPPING_it                       3342 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "2906: POLICY_MAPPING_it                       3342 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "",
          "[Removed Lines]",
          "2903: BN_BLINDING_get_thread_id               3340 NOEXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "2903: BN_BLINDING_get_thread_id               3340 EXIST::FUNCTION:DEPRECATED",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3368: pitem_free                              3767 EXIST::FUNCTION:",
          "3369: BN_GF2m_mod_inv_arr                     3768 EXIST::FUNCTION:EC2M",
          "3370: ENGINE_unregister_ECDSA                 3769 EXIST::FUNCTION:ENGINE",
          "3372: get_rfc3526_prime_8192                  3771 EXIST::FUNCTION:",
          "3373: X509_VERIFY_PARAM_clear_flags           3772 EXIST::FUNCTION:",
          "3374: get_rfc2409_prime_1024                  3773 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3371: BN_BLINDING_set_thread_id               3770 NOEXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3371: BN_BLINDING_set_thread_id               3770 EXIST::FUNCTION:DEPRECATED",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47bbaa5b607f592009ed40f5678fde21c10a873c",
      "candidate_info": {
        "commit_hash": "47bbaa5b607f592009ed40f5678fde21c10a873c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/47bbaa5b607f592009ed40f5678fde21c10a873c",
        "files": [
          "Configure",
          "crypto/asn1/x_x509.c",
          "crypto/x509/x509_vfy.c",
          "crypto/x509v3/ext_dat.h",
          "crypto/x509v3/v3_addr.c",
          "crypto/x509v3/v3_asid.c",
          "crypto/x509v3/v3_purp.c",
          "include/openssl/x509.h",
          "include/openssl/x509v3.h",
          "makevms.com",
          "util/libeay.num",
          "util/mkdef.pl"
        ],
        "message": "Revert \"OPENSSL_NO_xxx cleanup: RFC3779\"\n\nThis reverts the non-cleanup parts of commit c73ad69017. We do actually\nhave a reasonable use case for OPENSSL_NO_RFC3779 in the EDK2 UEFI\nbuild, since we don't have a strspn() function in our runtime environment\nand we don't want the RFC3779 functionality anyway.\n\nIn addition, it changes the default behaviour of the Configure script so\nthat RFC3779 support isn't disabled by default. It was always disabled\nfrom when it was first added in 2006, right up until the point where\nOPENSSL_NO_RFC3779 was turned into a no-op, and the code in the\nConfigure script was left *trying* to disable it, but not actually\nworking.\n\nSigned-off-by: Rich Salz <rsalz@akamai.com>\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/x_x509.c||crypto/asn1/x_x509.c",
          "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c",
          "crypto/x509v3/ext_dat.h||crypto/x509v3/ext_dat.h",
          "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c",
          "crypto/x509v3/v3_asid.c||crypto/x509v3/v3_asid.c",
          "crypto/x509v3/v3_purp.c||crypto/x509v3/v3_purp.c",
          "include/openssl/x509.h||include/openssl/x509.h",
          "include/openssl/x509v3.h||include/openssl/x509v3.h",
          "makevms.com||makevms.com",
          "util/libeay.num||util/libeay.num",
          "util/mkdef.pl||util/mkdef.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/x_x509.c||crypto/asn1/x_x509.c": [
          "File: crypto/asn1/x_x509.c -> crypto/asn1/x_x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         ret->ex_pathlen = -1;",
          "96:         ret->skid = NULL;",
          "97:         ret->akid = NULL;",
          "98:         ret->rfc3779_addr = NULL;",
          "99:         ret->rfc3779_asid = NULL;",
          "100:         ret->aux = NULL;",
          "101:         ret->crldp = NULL;",
          "102:         CRYPTO_new_ex_data(CRYPTO_EX_INDEX_X509, ret, &ret->ex_data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: #ifndef OPENSSL_NO_RFC3779",
          "101: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:         policy_cache_free(ret->policy_cache);",
          "117:         GENERAL_NAMES_free(ret->altname);",
          "118:         NAME_CONSTRAINTS_free(ret->nc);",
          "119:         sk_IPAddressFamily_pop_free(ret->rfc3779_addr, IPAddressFamily_free);",
          "120:         ASIdentifiers_free(ret->rfc3779_asid);",
          "121:         OPENSSL_free(ret->name);",
          "122:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: #ifndef OPENSSL_NO_RFC3779",
          "124: #endif",
          "",
          "---------------"
        ],
        "crypto/x509/x509_vfy.c||crypto/x509/x509_vfy.c": [
          "File: crypto/x509/x509_vfy.c -> crypto/x509/x509_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:     if (!ok)",
          "486:         goto end;",
          "489:     ok = v3_asid_validate_path(ctx);",
          "490:     if (!ok)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488: #ifndef OPENSSL_NO_RFC3779",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "492:     ok = v3_addr_validate_path(ctx);",
          "493:     if (!ok)",
          "494:         goto end;",
          "497:     if (!bad_chain && (ctx->param->flags & X509_V_FLAG_POLICY_CHECK))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496: #endif",
          "",
          "---------------"
        ],
        "crypto/x509v3/ext_dat.h||crypto/x509v3/ext_dat.h": [
          "File: crypto/x509v3/ext_dat.h -> crypto/x509v3/ext_dat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: #endif",
          "104:     &v3_sxnet,",
          "105:     &v3_info,",
          "106:     &v3_addr,",
          "107:     &v3_asid,",
          "108: #ifndef OPENSSL_NO_OCSP",
          "109:     &v3_ocsp_nonce,",
          "110:     &v3_ocsp_crlid,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: #ifndef OPENSSL_NO_RFC3779",
          "109: #endif",
          "",
          "---------------"
        ],
        "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
          "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #include <openssl/buffer.h>",
          "70: #include <openssl/x509v3.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #ifndef OPENSSL_NO_RFC3779",
          "",
          "---------------"
        ],
        "crypto/x509v3/v3_asid.c||crypto/x509v3/v3_asid.c": [
          "File: crypto/x509v3/v3_asid.c -> crypto/x509v3/v3_asid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: #include <openssl/x509.h>",
          "70: #include <openssl/bn.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: #ifndef OPENSSL_NO_RFC3779",
          "",
          "---------------"
        ],
        "crypto/x509v3/v3_purp.c||crypto/x509v3/v3_purp.c": [
          "File: crypto/x509v3/v3_purp.c -> crypto/x509v3/v3_purp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325: #ifndef OPENSSL_NO_RFC3779",
          "328: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "503:         x->ex_flags |= EXFLAG_INVALID;",
          "504:     setup_crldp(x);",
          "506:     x->rfc3779_addr = X509_get_ext_d2i(x, NID_sbgp_ipAddrBlock, NULL, NULL);",
          "507:     x->rfc3779_asid = X509_get_ext_d2i(x, NID_sbgp_autonomousSysNum,",
          "508:                                        NULL, NULL);",
          "509:     for (i = 0; i < X509_get_ext_count(x); i++) {",
          "510:         ex = X509_get_ext(x, i);",
          "511:         if (OBJ_obj2nid(X509_EXTENSION_get_object(ex))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508: #ifndef OPENSSL_NO_RFC3779",
          "512: #endif",
          "",
          "---------------"
        ],
        "include/openssl/x509.h||include/openssl/x509.h": [
          "File: include/openssl/x509.h -> include/openssl/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     STACK_OF(DIST_POINT) *crldp;",
          "202:     STACK_OF(GENERAL_NAME) *altname;",
          "203:     NAME_CONSTRAINTS *nc;",
          "204:     STACK_OF(IPAddressFamily) *rfc3779_addr;",
          "205:     struct ASIdentifiers_st *rfc3779_asid;",
          "206:     unsigned char sha1_hash[SHA_DIGEST_LENGTH];",
          "207:     X509_CERT_AUX *aux;",
          "208: } /* X509 */ ;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: #ifndef OPENSSL_NO_RFC3779",
          "207: # endif",
          "",
          "---------------"
        ],
        "include/openssl/x509v3.h||include/openssl/x509v3.h": [
          "File: include/openssl/x509v3.h -> include/openssl/x509v3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "756: void X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent);",
          "757: DECLARE_STACK_OF(X509_POLICY_NODE)",
          "759: typedef struct ASRange_st {",
          "760:     ASN1_INTEGER *min, *max;",
          "761: } ASRange;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759: #ifndef OPENSSL_NO_RFC3779",
          "",
          "---------------"
        ],
        "makevms.com||makevms.com": [
          "File: makevms.com -> makevms.com",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:        RC2,-",
          "293:        RC4,-",
          "294:        RC5,-",
          "295:        RMD160,-",
          "296:        RSA,-",
          "297:        SCTP,-",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:        RFC3779,-",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "3412: EVP_camellia_256_ecb                    3811 EXIST::FUNCTION:CAMELLIA",
          "3413: EVP_camellia_256_ofb                    3812 EXIST::FUNCTION:CAMELLIA",
          "3414: a2i_ipadd                               3813 EXIST::FUNCTION:",
          "3417: EVP_CIPHER_block_size                   3816 EXIST::FUNCTION:",
          "3420: EVP_CIPHER_CTX_set_app_data             3819 EXIST::FUNCTION:",
          "3421: BIO_set_callback_arg                    3820 EXIST::FUNCTION:",
          "3425: BIO_set_flags                           3823 EXIST::FUNCTION:",
          "3429: BIO_method_type                         3826 EXIST::FUNCTION:",
          "3433: AES_ige_encrypt                         3829 EXIST::FUNCTION:AES",
          "3435: EVP_CIPHER_CTX_nid                      3831 EXIST::FUNCTION:",
          "3440: EVP_CIPHER_iv_length                    3836 EXIST::FUNCTION:",
          "3441: EVP_MD_type                             3837 EXIST::FUNCTION:",
          "3445: EVP_CIPHER_CTX_key_length               3841 EXIST::FUNCTION:",
          "3448: EVP_MD_size                             3844 EXIST::FUNCTION:",
          "3449: EVP_MD_CTX_test_flags                   3845 EXIST::FUNCTION:",
          "3450: BIO_clear_flags                         3846 EXIST::FUNCTION:",
          "3457: EVP_MD_pkey_type                        3852 EXIST::FUNCTION:",
          "3458: EVP_MD_CTX_clear_flags                  3853 EXIST::FUNCTION:",
          "3462: EVP_CIPHER_flags                        3857 EXIST::FUNCTION:",
          "3465: AES_bi_ige_encrypt                      3860 EXIST::FUNCTION:AES",
          "3466: BIO_get_callback                        3861 EXIST::FUNCTION:",
          "3471: BIO_test_flags                          3866 EXIST::FUNCTION:",
          "3479: EVP_CIPHER_key_length                   3873 EXIST::FUNCTION:",
          "3480: EVP_Cipher                              3874 EXIST::FUNCTION:",
          "3484: EVP_CIPHER_nid                          3877 EXIST::FUNCTION:",
          "3486: EVP_CIPHER_CTX_block_size               3879 EXIST::FUNCTION:",
          "3490: EVP_MD_CTX_set_flags                    3883 EXIST::FUNCTION:",
          "3496: EVP_CIPHER_CTX_cipher                   3888 EXIST::FUNCTION:",
          "3497: EVP_CIPHER_CTX_get_app_data             3889 EXIST::FUNCTION:",
          "3498: EVP_MD_block_size                       3890 EXIST::FUNCTION:",
          "3499: EVP_CIPHER_CTX_flags                    3891 EXIST::FUNCTION:",
          "3505: EVP_MD_CTX_md                           3896 EXIST::FUNCTION:",
          "3507: BIO_method_name                         3898 EXIST::FUNCTION:",
          "3508: EVP_CIPHER_CTX_iv_length                3899 EXIST::FUNCTION:",
          "3511: BIO_get_callback_arg                    3902 EXIST::FUNCTION:",
          "3512: BIO_set_callback                        3903 EXIST::FUNCTION:",
          "3515: CRYPTO_memcmp                           3906 EXIST::FUNCTION:",
          "3516: BN_consttime_swap                       3907 EXIST::FUNCTION:",
          "3517: SEED_decrypt                            3908 EXIST::FUNCTION:SEED",
          "",
          "[Removed Lines]",
          "3415: ASIdentifiers_free                      3814 EXIST::FUNCTION:",
          "3416: i2d_ASIdOrRange                         3815 EXIST::FUNCTION:",
          "3418: v3_asid_is_canonical                    3817 EXIST::FUNCTION:",
          "3419: IPAddressChoice_free                    3818 EXIST::FUNCTION:",
          "3422: v3_addr_add_prefix                      3821 EXIST::FUNCTION:",
          "3423: IPAddressOrRange_it                     3822 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3424: IPAddressOrRange_it                     3822 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3426: ASIdentifiers_it                        3824 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3427: ASIdentifiers_it                        3824 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3428: v3_addr_get_range                       3825 EXIST::FUNCTION:",
          "3430: v3_addr_inherits                        3827 EXIST::FUNCTION:",
          "3431: IPAddressChoice_it                      3828 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3432: IPAddressChoice_it                      3828 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3434: v3_addr_add_range                       3830 EXIST::FUNCTION:",
          "3436: d2i_ASRange                             3832 EXIST::FUNCTION:",
          "3437: v3_addr_add_inherit                     3833 EXIST::FUNCTION:",
          "3438: v3_asid_add_id_or_range                 3834 EXIST::FUNCTION:",
          "3439: v3_addr_validate_resource_set           3835 EXIST::FUNCTION:",
          "3442: v3_asid_canonize                        3838 EXIST::FUNCTION:",
          "3443: IPAddressRange_free                     3839 EXIST::FUNCTION:",
          "3444: v3_asid_add_inherit                     3840 EXIST::FUNCTION:",
          "3446: IPAddressRange_new                      3842 EXIST::FUNCTION:",
          "3447: ASIdOrRange_new                         3843 EXIST::FUNCTION:",
          "3451: i2d_ASRange                             3847 EXIST::FUNCTION:",
          "3452: IPAddressRange_it                       3848 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3453: IPAddressRange_it                       3848 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3454: IPAddressChoice_new                     3849 EXIST::FUNCTION:",
          "3455: ASIdentifierChoice_new                  3850 EXIST::FUNCTION:",
          "3456: ASRange_free                            3851 EXIST::FUNCTION:",
          "3459: IPAddressFamily_free                    3854 EXIST::FUNCTION:",
          "3460: i2d_IPAddressFamily                     3855 EXIST::FUNCTION:",
          "3461: IPAddressOrRange_new                    3856 EXIST::FUNCTION:",
          "3463: v3_asid_validate_resource_set           3858 EXIST::FUNCTION:",
          "3464: d2i_IPAddressRange                      3859 EXIST::FUNCTION:",
          "3467: IPAddressOrRange_free                   3862 EXIST::FUNCTION:",
          "3468: v3_addr_subset                          3863 EXIST::FUNCTION:",
          "3469: d2i_IPAddressFamily                     3864 EXIST::FUNCTION:",
          "3470: v3_asid_subset                          3865 EXIST::FUNCTION:",
          "3472: i2d_ASIdentifierChoice                  3867 EXIST::FUNCTION:",
          "3473: ASRange_it                              3868 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3474: ASRange_it                              3868 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3475: d2i_ASIdentifiers                       3869 EXIST::FUNCTION:",
          "3476: ASRange_new                             3870 EXIST::FUNCTION:",
          "3477: d2i_IPAddressChoice                     3871 EXIST::FUNCTION:",
          "3478: v3_addr_get_afi                         3872 EXIST::FUNCTION:",
          "3481: i2d_IPAddressOrRange                    3875 EXIST::FUNCTION:",
          "3482: ASIdOrRange_it                          3876 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3483: ASIdOrRange_it                          3876 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3485: i2d_IPAddressChoice                     3878 EXIST::FUNCTION:",
          "3487: ASIdentifiers_new                       3880 EXIST::FUNCTION:",
          "3488: v3_addr_validate_path                   3881 EXIST::FUNCTION:",
          "3489: IPAddressFamily_new                     3882 EXIST::FUNCTION:",
          "3491: v3_addr_is_canonical                    3884 EXIST::FUNCTION:",
          "3492: i2d_IPAddressRange                      3885 EXIST::FUNCTION:",
          "3493: IPAddressFamily_it                      3886 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3494: IPAddressFamily_it                      3886 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3495: v3_asid_inherits                        3887 EXIST::FUNCTION:",
          "3500: v3_asid_validate_path                   3892 EXIST::FUNCTION:",
          "3501: d2i_IPAddressOrRange                    3893 EXIST::FUNCTION:",
          "3502: v3_addr_canonize                        3894 EXIST::FUNCTION:",
          "3503: ASIdentifierChoice_it                   3895 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3504: ASIdentifierChoice_it                   3895 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3506: d2i_ASIdentifierChoice                  3897 EXIST::FUNCTION:",
          "3509: ASIdOrRange_free                        3900 EXIST::FUNCTION:",
          "3510: ASIdentifierChoice_free                 3901 EXIST::FUNCTION:",
          "3513: d2i_ASIdOrRange                         3904 EXIST::FUNCTION:",
          "3514: i2d_ASIdentifiers                       3905 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3415: ASIdentifiers_free                      3814 EXIST::FUNCTION:RFC3779",
          "3416: i2d_ASIdOrRange                         3815 EXIST::FUNCTION:RFC3779",
          "3418: v3_asid_is_canonical                    3817 EXIST::FUNCTION:RFC3779",
          "3419: IPAddressChoice_free                    3818 EXIST::FUNCTION:RFC3779",
          "3422: v3_addr_add_prefix                      3821 EXIST::FUNCTION:RFC3779",
          "3423: IPAddressOrRange_it                     3822 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:RFC3779",
          "3424: IPAddressOrRange_it                     3822 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:RFC3779",
          "3426: ASIdentifiers_it                        3824 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:RFC3779",
          "3427: ASIdentifiers_it                        3824 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:RFC3779",
          "3428: v3_addr_get_range                       3825 EXIST::FUNCTION:RFC3779",
          "3430: v3_addr_inherits                        3827 EXIST::FUNCTION:RFC3779",
          "3431: IPAddressChoice_it                      3828 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:RFC3779",
          "3432: IPAddressChoice_it                      3828 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:RFC3779",
          "3434: v3_addr_add_range                       3830 EXIST::FUNCTION:RFC3779",
          "3436: d2i_ASRange                             3832 EXIST::FUNCTION:RFC3779",
          "3437: v3_addr_add_inherit                     3833 EXIST::FUNCTION:RFC3779",
          "3438: v3_asid_add_id_or_range                 3834 EXIST::FUNCTION:RFC3779",
          "3439: v3_addr_validate_resource_set           3835 EXIST::FUNCTION:RFC3779",
          "3442: v3_asid_canonize                        3838 EXIST::FUNCTION:RFC3779",
          "3443: IPAddressRange_free                     3839 EXIST::FUNCTION:RFC3779",
          "3444: v3_asid_add_inherit                     3840 EXIST::FUNCTION:RFC3779",
          "3446: IPAddressRange_new                      3842 EXIST::FUNCTION:RFC3779",
          "3447: ASIdOrRange_new                         3843 EXIST::FUNCTION:RFC3779",
          "3451: i2d_ASRange                             3847 EXIST::FUNCTION:RFC3779",
          "3452: IPAddressRange_it                       3848 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:RFC3779",
          "3453: IPAddressRange_it                       3848 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:RFC3779",
          "3454: IPAddressChoice_new                     3849 EXIST::FUNCTION:RFC3779",
          "3455: ASIdentifierChoice_new                  3850 EXIST::FUNCTION:RFC3779",
          "3456: ASRange_free                            3851 EXIST::FUNCTION:RFC3779",
          "3459: IPAddressFamily_free                    3854 EXIST::FUNCTION:RFC3779",
          "3460: i2d_IPAddressFamily                     3855 EXIST::FUNCTION:RFC3779",
          "3461: IPAddressOrRange_new                    3856 EXIST::FUNCTION:RFC3779",
          "3463: v3_asid_validate_resource_set           3858 EXIST::FUNCTION:RFC3779",
          "3464: d2i_IPAddressRange                      3859 EXIST::FUNCTION:RFC3779",
          "3467: IPAddressOrRange_free                   3862 EXIST::FUNCTION:RFC3779",
          "3468: v3_addr_subset                          3863 EXIST::FUNCTION:RFC3779",
          "3469: d2i_IPAddressFamily                     3864 EXIST::FUNCTION:RFC3779",
          "3470: v3_asid_subset                          3865 EXIST::FUNCTION:RFC3779",
          "3472: i2d_ASIdentifierChoice                  3867 EXIST::FUNCTION:RFC3779",
          "3473: ASRange_it                              3868 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:RFC3779",
          "3474: ASRange_it                              3868 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:RFC3779",
          "3475: d2i_ASIdentifiers                       3869 EXIST::FUNCTION:RFC3779",
          "3476: ASRange_new                             3870 EXIST::FUNCTION:RFC3779",
          "3477: d2i_IPAddressChoice                     3871 EXIST::FUNCTION:RFC3779",
          "3478: v3_addr_get_afi                         3872 EXIST::FUNCTION:RFC3779",
          "3481: i2d_IPAddressOrRange                    3875 EXIST::FUNCTION:RFC3779",
          "3482: ASIdOrRange_it                          3876 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:RFC3779",
          "3483: ASIdOrRange_it                          3876 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:RFC3779",
          "3485: i2d_IPAddressChoice                     3878 EXIST::FUNCTION:RFC3779",
          "3487: ASIdentifiers_new                       3880 EXIST::FUNCTION:RFC3779",
          "3488: v3_addr_validate_path                   3881 EXIST::FUNCTION:RFC3779",
          "3489: IPAddressFamily_new                     3882 EXIST::FUNCTION:RFC3779",
          "3491: v3_addr_is_canonical                    3884 EXIST::FUNCTION:RFC3779",
          "3492: i2d_IPAddressRange                      3885 EXIST::FUNCTION:RFC3779",
          "3493: IPAddressFamily_it                      3886 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:RFC3779",
          "3494: IPAddressFamily_it                      3886 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:RFC3779",
          "3495: v3_asid_inherits                        3887 EXIST::FUNCTION:RFC3779",
          "3500: v3_asid_validate_path                   3892 EXIST::FUNCTION:RFC3779",
          "3501: d2i_IPAddressOrRange                    3893 EXIST::FUNCTION:RFC3779",
          "3502: v3_addr_canonize                        3894 EXIST::FUNCTION:RFC3779",
          "3503: ASIdentifierChoice_it                   3895 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:RFC3779",
          "3504: ASIdentifierChoice_it                   3895 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:RFC3779",
          "3506: d2i_ASIdentifierChoice                  3897 EXIST::FUNCTION:RFC3779",
          "3509: ASIdOrRange_free                        3900 EXIST::FUNCTION:RFC3779",
          "3510: ASIdentifierChoice_free                 3901 EXIST::FUNCTION:RFC3779",
          "3513: d2i_ASIdOrRange                         3904 EXIST::FUNCTION:RFC3779",
          "3514: i2d_ASIdentifiers                       3905 EXIST::FUNCTION:RFC3779",
          "",
          "---------------"
        ],
        "util/mkdef.pl||util/mkdef.pl": [
          "File: util/mkdef.pl -> util/mkdef.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     \"FP_API\", \"STDIO\", \"SOCK\", \"DGRAM\",",
          "81:     # Engines",
          "82:     \"STATIC_ENGINE\", \"ENGINE\", \"HW\", \"GMP\",",
          "83:     # TLS",
          "84:     \"PSK\", \"SRP\", \"HEARTBEATS\",",
          "85:     # CMS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     # RFC3779",
          "84:     \"RFC3779\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: my $no_rsa; my $no_dsa; my $no_dh; my $no_aes;",
          "125: my $no_ec; my $no_ecdsa; my $no_ecdh; my $no_engine; my $no_hw;",
          "126: my $no_fp_api; my $no_static_engine=1; my $no_gmp; my $no_deprecated;",
          "128: my $no_jpake; my $no_srp; my $no_ec2m; my $no_nistp_gcc;",
          "129: my $no_nextprotoneg; my $no_sctp; my $no_srtp; my $no_ssl_trace;",
          "130: my $no_unit_test; my $no_ssl3_method; my $no_ocb;",
          "",
          "[Removed Lines]",
          "127: my $no_psk; my $no_cms; my $no_capieng;",
          "",
          "[Added Lines]",
          "129: my $no_rfc3779; my $no_psk; my $no_cms; my $no_capieng;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:  elsif (/^no-engine$/) { $no_engine=1; }",
          "214:  elsif (/^no-hw$/) { $no_hw=1; }",
          "215:  elsif (/^no-gmp$/) { $no_gmp=1; }",
          "216:  elsif (/^no-cms$/) { $no_cms=1; }",
          "217:  elsif (/^no-ec2m$/) { $no_ec2m=1; }",
          "218:   elsif (/^no-ec-nistp224-64-gcc-128$/) { $no_nistp_gcc=1; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:  elsif (/^no-rfc3779$/) { $no_rfc3779=1; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1197:    if ($keyword eq \"FP_API\" && $no_fp_api) { return 0; }",
          "1198:    if ($keyword eq \"STATIC_ENGINE\" && $no_static_engine) { return 0; }",
          "1199:    if ($keyword eq \"GMP\" && $no_gmp) { return 0; }",
          "1200:    if ($keyword eq \"PSK\" && $no_psk) { return 0; }",
          "1201:    if ($keyword eq \"CMS\" && $no_cms) { return 0; }",
          "1202:    if ($keyword eq \"EC_NISTP_64_GCC_128\" && $no_nistp_gcc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1203:    if ($keyword eq \"RFC3779\" && $no_rfc3779) { return 0; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66e87a9f0990198079bf4d2b3ce87581ad5b6b10",
      "candidate_info": {
        "commit_hash": "66e87a9f0990198079bf4d2b3ce87581ad5b6b10",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/66e87a9f0990198079bf4d2b3ce87581ad5b6b10",
        "files": [
          "crypto/asn1/Makefile",
          "crypto/x509/Makefile",
          "crypto/x509v3/Makefile",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Tim Hudson <tjh@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4595: X509_get_extension_flags                4954 EXIST::FUNCTION:",
          "4596: X509_get_extended_key_usage             4955 EXIST::FUNCTION:",
          "4597: X509_get_key_usage                      4956 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4598: X509_CRL_get_issuer                     4957 EXIST::FUNCTION:",
          "4599: X509_CRL_get_nextUpdate                 4958 EXIST::FUNCTION:",
          "4600: X509_CRL_get0_signature                 4959 EXIST::FUNCTION:",
          "4601: X509_CRL_get_REVOKED                    4960 EXIST::FUNCTION:",
          "4602: X509_CRL_get_version                    4961 EXIST::FUNCTION:",
          "4603: X509_CRL_get_lastUpdate                 4962 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40cf45456602ae3d7e6c00fdbe0f5eeab24f8afc",
      "candidate_info": {
        "commit_hash": "40cf45456602ae3d7e6c00fdbe0f5eeab24f8afc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/40cf45456602ae3d7e6c00fdbe0f5eeab24f8afc",
        "files": [
          "util/libeay.num"
        ],
        "message": "update ordinals\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "692: a2d_ASN1_OBJECT                         699 EXIST::FUNCTION:",
          "693: a2i_ASN1_INTEGER                        700 EXIST::FUNCTION:",
          "694: a2i_ASN1_STRING                         701 EXIST::FUNCTION:",
          "697: bn_div_words                            704 NOEXIST::FUNCTION:",
          "698: bn_expand2                              705 NOEXIST::FUNCTION:",
          "699: bn_mul_add_words                        706 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "695: asn1_Finish                             702 EXIST::FUNCTION:",
          "696: asn1_GetSequence                        703 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "695: asn1_Finish                             702 NOEXIST::FUNCTION:",
          "696: asn1_GetSequence                        703 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1060: EVP_rc5_32_12_16_cfb64                  1088 EXIST::FUNCTION:RC5",
          "1061: EVP_rc5_32_12_16_ecb                    1089 EXIST::FUNCTION:RC5",
          "1062: EVP_rc5_32_12_16_ofb                    1090 EXIST::FUNCTION:RC5",
          "1064: d2i_ASN1_BMPSTRING                      1092 EXIST::FUNCTION:",
          "1065: i2d_ASN1_BMPSTRING                      1093 EXIST::FUNCTION:",
          "1066: BIO_f_ber                               1094 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1063: asn1_add_error                          1091 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1063: asn1_add_error                          1091 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3295: BIO_dump_indent_cb                      3697 EXIST::FUNCTION:",
          "3296: d2i_X509_CERT_PAIR                      3698 NOEXIST::FUNCTION:",
          "3297: STORE_list_private_key_endp             3699 NOEXIST::FUNCTION:",
          "3299: i2d_EC_PUBKEY_fp                        3701 EXIST::FUNCTION:EC,STDIO",
          "3300: BN_nist_mod_256                         3702 EXIST::FUNCTION:",
          "3301: X509_VERIFY_PARAM_add0_table            3703 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3298: asn1_const_Finish                       3700 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3298: asn1_const_Finish                       3700 NOEXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d62bc5d30f7d9519aeff9160f98b9ad9aa592c41",
      "candidate_info": {
        "commit_hash": "d62bc5d30f7d9519aeff9160f98b9ad9aa592c41",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d62bc5d30f7d9519aeff9160f98b9ad9aa592c41",
        "files": [
          "util/libeay.num"
        ],
        "message": "update ordinals\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "943: EVP_rc4_40                              960 EXIST::FUNCTION:RC4",
          "944: EVP_CIPHER_CTX_init                     961 EXIST::FUNCTION:",
          "945: HMAC                                    962 EXIST::FUNCTION:",
          "947: HMAC_Update                             964 EXIST::FUNCTION:",
          "948: HMAC_Final                              965 EXIST::FUNCTION:",
          "949: ERR_get_next_error_library              966 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "946: HMAC_Init                               963 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "946: HMAC_Init                               963 EXIST::FUNCTION:DEPRECATED",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3001: EC_GROUP_have_precompute_mult           3429 EXIST::FUNCTION:EC",
          "3002: EC_KEY_print_fp                         3430 EXIST::FUNCTION:EC,STDIO",
          "3003: BN_GF2m_mod_arr                         3431 EXIST::FUNCTION:EC2M",
          "3005: EVP_PKEY_cmp                            3433 EXIST::FUNCTION:",
          "3006: X509_policy_level_node_count            3434 EXIST::FUNCTION:",
          "3007: STORE_new_engine                        3435 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3004: PEM_write_bio_X509_CERT_PAIR            3432 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3004: PEM_write_bio_X509_CERT_PAIR            3432 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3081: STORE_revoke_public_key                 3504 NOEXIST::FUNCTION:",
          "3082: X509_STORE_CTX_get0_param               3505 EXIST::FUNCTION:",
          "3083: STORE_delete_arbitrary                  3506 NOEXIST::FUNCTION:",
          "3085: X509_STORE_set_depth                    3508 EXIST::FUNCTION:",
          "3086: ECDSA_get_ex_data                       3509 EXIST::FUNCTION:ECDSA",
          "3087: SHA224                                  3510 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3084: PEM_read_X509_CERT_PAIR                 3507 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3084: PEM_read_X509_CERT_PAIR                 3507 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3110: STORE_parse_attrs_next                  3531 NOEXIST::FUNCTION:",
          "3111: ENGINE_load_padlock                     3532 EXIST::FUNCTION:ENGINE,STATIC_ENGINE",
          "3112: EC_GROUP_set_curve_name                 3533 EXIST::FUNCTION:EC",
          "3115: STORE_meth_get_revoke_fn                3535 NOEXIST::FUNCTION:",
          "3116: STORE_method_get_revoke_function        3535 NOEXIST::FUNCTION:",
          "3117: STORE_method_set_get_function           3536 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3113: X509_CERT_PAIR_it                       3534 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3114: X509_CERT_PAIR_it                       3534 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "",
          "[Added Lines]",
          "3113: X509_CERT_PAIR_it                       3534 NOEXIST::FUNCTION:",
          "3114: X509_CERT_PAIR_it                       3534 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3159: EC_KEY_get0_group                       3575 EXIST::FUNCTION:EC",
          "3160: STORE_generate_crl                      3576 NOEXIST::FUNCTION:",
          "3161: STORE_store_public_key                  3577 NOEXIST::FUNCTION:",
          "3163: STORE_revoke_private_key                3579 NOEXIST::FUNCTION:",
          "3164: BN_nist_mod_224                         3580 EXIST::FUNCTION:",
          "3165: SHA512_Final                            3581 EXIST:!VMSVAX:FUNCTION:",
          "",
          "[Removed Lines]",
          "3162: X509_CERT_PAIR_free                     3578 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3162: X509_CERT_PAIR_free                     3578 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3230: i2v_ASN1_BIT_STRING                     3639 EXIST::FUNCTION:",
          "3231: STORE_OBJECT_free                       3640 NOEXIST::FUNCTION:",
          "3232: BN_nist_mod_384                         3641 EXIST::FUNCTION:",
          "3234: PEM_write_ECPKParameters                3643 EXIST::FUNCTION:EC",
          "3235: ECDH_compute_key                        3644 EXIST::FUNCTION:ECDH",
          "3236: STORE_ATTR_INFO_get0_sha1str            3645 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3233: i2d_X509_CERT_PAIR                      3642 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3233: i2d_X509_CERT_PAIR                      3642 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3276: STORE_get_ex_data                       3681 NOEXIST::FUNCTION:",
          "3277: EC_KEY_set_public_key                   3682 EXIST::FUNCTION:EC",
          "3278: PEM_read_ECPKParameters                 3683 EXIST::FUNCTION:EC",
          "3280: ENGINE_register_STORE                   3685 EXIST::FUNCTION:ENGINE",
          "3281: RSA_generate_key_ex                     3686 EXIST::FUNCTION:RSA",
          "3282: DSA_generate_parameters_ex              3687 EXIST::FUNCTION:DSA",
          "",
          "[Removed Lines]",
          "3279: X509_CERT_PAIR_new                      3684 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3279: X509_CERT_PAIR_new                      3684 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3290: GENERAL_SUBTREE_it                      3694 EXIST:!EXPORT_VAR_AS_FUNCTION:VARIABLE:",
          "3291: GENERAL_SUBTREE_it                      3694 EXIST:EXPORT_VAR_AS_FUNCTION:FUNCTION:",
          "3292: EC_GROUP_get_curve_name                 3695 EXIST::FUNCTION:EC",
          "3294: BIO_dump_indent_cb                      3697 EXIST::FUNCTION:",
          "3296: STORE_list_private_key_endp             3699 NOEXIST::FUNCTION:",
          "3297: asn1_const_Finish                       3700 EXIST::FUNCTION:",
          "3298: i2d_EC_PUBKEY_fp                        3701 EXIST::FUNCTION:EC,STDIO",
          "",
          "[Removed Lines]",
          "3293: PEM_write_X509_CERT_PAIR                3696 EXIST::FUNCTION:",
          "3295: d2i_X509_CERT_PAIR                      3698 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3293: PEM_write_X509_CERT_PAIR                3696 NOEXIST::FUNCTION:",
          "3295: d2i_X509_CERT_PAIR                      3698 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3349: EC_KEY_check_key                        3750 EXIST::FUNCTION:EC",
          "3350: d2i_EC_PUBKEY_fp                        3751 EXIST::FUNCTION:EC,STDIO",
          "3351: PKCS7_set0_type_other                   3752 EXIST::FUNCTION:",
          "3353: pqueue_next                             3754 EXIST::FUNCTION:",
          "3354: STORE_meth_get_list_end_fn              3755 NOEXIST::FUNCTION:",
          "3355: STORE_method_get_list_end_function      3755 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "3352: PEM_read_bio_X509_CERT_PAIR             3753 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "3352: PEM_read_bio_X509_CERT_PAIR             3753 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4545: BN_zero_ex                              4905 EXIST::FUNCTION:",
          "4546: BN_is_odd                               4906 EXIST::FUNCTION:",
          "4547: BN_set_flags                            4907 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4548: EVP_camellia_128_ctr                    4908 EXIST::FUNCTION:CAMELLIA",
          "4549: EVP_camellia_256_ctr                    4909 EXIST::FUNCTION:CAMELLIA",
          "4550: EVP_camellia_192_ctr                    4910 EXIST::FUNCTION:CAMELLIA",
          "4551: OCSP_resp_get0_signature                4911 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}