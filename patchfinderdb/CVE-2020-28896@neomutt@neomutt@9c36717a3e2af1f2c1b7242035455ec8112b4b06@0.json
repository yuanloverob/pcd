{
  "cve_id": "CVE-2020-28896",
  "cve_desc": "Mutt before 2.0.2 and NeoMutt before 2020-11-20 did not ensure that $ssl_force_tls was processed if an IMAP server's initial server response was invalid. The connection was not properly closed, and the code could continue attempting to authenticate. This could result in authentication credentials being exposed on an unencrypted connection, or to a machine-in-the-middle.",
  "repo": "neomutt/neomutt",
  "patch_hash": "9c36717a3e2af1f2c1b7242035455ec8112b4b06",
  "patch_info": {
    "commit_hash": "9c36717a3e2af1f2c1b7242035455ec8112b4b06",
    "repo": "neomutt/neomutt",
    "commit_url": "https://github.com/neomutt/neomutt/commit/9c36717a3e2af1f2c1b7242035455ec8112b4b06",
    "files": [
      "imap/imap.c"
    ],
    "message": "imap: close connection on all failures\n\nThanks to Gabriel Salles-Loustau for spotting the problem.\n\nCo-authored-by: Kevin McCarthy <kevin@8t8.us>",
    "before_after_code_files": [
      "imap/imap.c||imap/imap.c"
    ]
  },
  "patch_diff": {
    "imap/imap.c||imap/imap.c": [
      "File: imap/imap.c -> imap/imap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "761:       else if ((ans = query_quadoption(C_SslStarttls,",
      "762:                                        _(\"Secure connection with TLS?\"))) == MUTT_ABORT)",
      "763:       {",
      "765:       }",
      "766:       if (ans == MUTT_YES)",
      "767:       {",
      "",
      "[Removed Lines]",
      "764:         goto err_close_conn;",
      "",
      "[Added Lines]",
      "764:         goto bail;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "776:           if (mutt_ssl_starttls(adata->conn))",
      "777:           {",
      "778:             mutt_error(_(\"Could not negotiate TLS connection\"));",
      "780:           }",
      "781:           else",
      "782:           {",
      "",
      "[Removed Lines]",
      "779:             goto err_close_conn;",
      "",
      "[Added Lines]",
      "779:             goto bail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "791:     if (C_SslForceTls && (adata->conn->ssf == 0))",
      "792:     {",
      "793:       mutt_error(_(\"Encrypted connection unavailable\"));",
      "795:     }",
      "796: #endif",
      "797:   }",
      "",
      "[Removed Lines]",
      "794:       goto err_close_conn;",
      "",
      "[Added Lines]",
      "794:       goto bail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "807:     if ((adata->conn->ssf == 0) && C_SslForceTls)",
      "808:     {",
      "809:       mutt_error(_(\"Encrypted connection unavailable\"));",
      "811:     }",
      "812: #endif",
      "",
      "[Removed Lines]",
      "810:       goto err_close_conn;",
      "",
      "[Added Lines]",
      "810:       goto bail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "825:   return 0;",
      "831: bail:",
      "832:   FREE(&adata->capstr);",
      "833:   return -1;",
      "834: }",
      "",
      "[Removed Lines]",
      "827: #ifdef USE_SSL",
      "828: err_close_conn:",
      "829:   imap_close_connection(adata);",
      "830: #endif",
      "",
      "[Added Lines]",
      "828:   imap_close_connection(adata);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fccad614dfea8a7657fa5cd5b4ede23b0b167e1d",
      "candidate_info": {
        "commit_hash": "fccad614dfea8a7657fa5cd5b4ede23b0b167e1d",
        "repo": "neomutt/neomutt",
        "commit_url": "https://github.com/neomutt/neomutt/commit/fccad614dfea8a7657fa5cd5b4ede23b0b167e1d",
        "files": [
          "debug/graphviz.c",
          "imap/imap.c"
        ],
        "message": "graphviz: improvements",
        "before_after_code_files": [
          "debug/graphviz.c||debug/graphviz.c",
          "imap/imap.c||imap/imap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/imap.c||imap/imap.c"
          ],
          "candidate": [
            "imap/imap.c||imap/imap.c"
          ]
        }
      },
      "candidate_diff": {
        "debug/graphviz.c||debug/graphviz.c": [
          "File: debug/graphviz.c -> debug/graphviz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <string.h>",
          "32: #include <sys/stat.h>",
          "33: #include <time.h>",
          "34: #include \"email/lib.h\"",
          "35: #include \"core/lib.h\"",
          "36: #include \"conn/lib.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"mutt/lib.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:   }",
          "117: }",
          "120: {",
          "121:   char buf[1024] = \"[NULL]\";",
          "123:   if (str)",
          "",
          "[Removed Lines]",
          "119: static void dot_type_string(FILE *fp, const char *name, const char *str)",
          "",
          "[Added Lines]",
          "120: static void dot_type_string(FILE *fp, const char *name, const char *str, bool force)",
          "122:   if ((!str || (str[0] == '\\0')) && !force)",
          "123:     return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:   snprintf(buf, buflen, \"0%03o\", umask);",
          "144: }",
          "147: {",
          "148:   snprintf(buf, buflen, \"obj_%p\", ptr);",
          "149: }",
          "",
          "[Removed Lines]",
          "146: static void dot_ptr_name(char *buf, size_t buflen, void *ptr)",
          "",
          "[Added Lines]",
          "150: static void dot_ptr_name(char *buf, size_t buflen, const void *ptr)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:   fprintf(fp, \"\\t\\t</tr>\\n\");",
          "166: }",
          "170: {",
          "171:   if (!src || !dst)",
          "172:     return;",
          "174:   char obj1[16] = { 0 };",
          "175:   char obj2[16] = { 0 };",
          "",
          "[Removed Lines]",
          "168: static void dot_add_link(struct ListHead *links, void *src, void *dst,",
          "169:                          const char *label, bool back)",
          "",
          "[Added Lines]",
          "172: static void dot_add_link(struct ListHead *links, const void *src, const void *dst,",
          "173:                          const char *label, bool back, const char *colour)",
          "177:   if (!colour)",
          "178:     colour = \"#c0c0c0\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:   if (label)",
          "183:     snprintf(lstr, sizeof(lstr), \"edgetooltip=\\\"%s\\\"\", label);",
          "187:   mutt_list_insert_tail(links, mutt_str_strdup(text));",
          "188: }",
          "",
          "[Removed Lines]",
          "185:   snprintf(text, sizeof(text), \"%s -> %s [ %s %s ]\", obj1, obj2,",
          "186:            back ? \"dir=back\" : \"\", lstr);",
          "",
          "[Added Lines]",
          "191:   snprintf(text, sizeof(text), \"%s -> %s [ %s %s color=\\\"%s\\\" ]\", obj1, obj2,",
          "192:            back ? \"dir=back\" : \"\", lstr, colour);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "221:   fprintf(fp, \"\\n}\\n\");",
          "222: }",
          "225: {",
          "226:   char obj[16] = { 0 };",
          "227:   dot_ptr_name(obj, sizeof(obj), ptr);",
          "",
          "[Removed Lines]",
          "224: static void dot_object_header(FILE *fp, void *ptr, const char *name, const char *colour)",
          "",
          "[Added Lines]",
          "230: static void dot_object_header(FILE *fp, const void *ptr, const char *name, const char *colour)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "283: static void dot_path_fs(char *buf, size_t buflen, const char *path)",
          "284: {",
          "285:   const char *slash = strrchr(path, '/');",
          "286:   if (slash)",
          "287:     slash++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:   if (!path)",
          "292:   {",
          "293:     buf[0] = '\\0';",
          "294:     return;",
          "295:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "315:   struct Buffer value = mutt_buffer_make(256);",
          "316:   dot_object_header(fp, (void *) name, \"Config\", \"#ffff80\");",
          "319:   if (sub->name)",
          "320:   {",
          "",
          "[Removed Lines]",
          "317:   dot_type_string(fp, \"scope\", sub->name);",
          "",
          "[Added Lines]",
          "329:   dot_type_string(fp, \"scope\", sub->name, true);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "336:           continue;",
          "337:         if ((DTYPE(item->type) == DT_STRING) && (item->type & DT_SENSITIVE))",
          "338:         {",
          "340:         }",
          "341:         else",
          "342:         {",
          "343:           mutt_buffer_reset(&value);",
          "344:           cs_subset_he_string_get(sub, item, &value);",
          "346:         }",
          "347:       }",
          "348:     }",
          "",
          "[Removed Lines]",
          "339:           dot_type_string(fp, iname + slen, \"***\");",
          "345:           dot_type_string(fp, iname + slen, value.data);",
          "",
          "[Added Lines]",
          "351:           dot_type_string(fp, iname + slen, \"***\", true);",
          "357:           dot_type_string(fp, iname + slen, value.data, true);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "364: static void dot_comp(FILE *fp, struct CompressInfo *ci, struct ListHead *links)",
          "365: {",
          "366:   dot_object_header(fp, ci, \"CompressInfo\", \"#c0c060\");",
          "370:   dot_object_footer(fp);",
          "371: }",
          "",
          "[Removed Lines]",
          "367:   dot_type_string(fp, \"append\", ci->cmd_append);",
          "368:   dot_type_string(fp, \"close\", ci->cmd_close);",
          "369:   dot_type_string(fp, \"open\", ci->cmd_open);",
          "",
          "[Added Lines]",
          "379:   dot_type_string(fp, \"append\", ci->cmd_append, true);",
          "380:   dot_type_string(fp, \"close\", ci->cmd_close, true);",
          "381:   dot_type_string(fp, \"open\", ci->cmd_open, true);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "417: static void dot_mailbox_imap(FILE *fp, struct ImapMboxData *mdata, struct ListHead *links)",
          "418: {",
          "419:   dot_object_header(fp, mdata, \"ImapMboxData\", \"#60c060\");",
          "423:   dot_object_footer(fp);",
          "424: }",
          "",
          "[Removed Lines]",
          "420:   dot_type_string(fp, \"name\", mdata->name);",
          "421:   dot_type_string(fp, \"munge_name\", mdata->munge_name);",
          "422:   dot_type_string(fp, \"real_name\", mdata->real_name);",
          "",
          "[Added Lines]",
          "432:   dot_type_string(fp, \"name\", mdata->name, true);",
          "433:   dot_type_string(fp, \"munge_name\", mdata->munge_name, true);",
          "434:   dot_type_string(fp, \"real_name\", mdata->real_name, true);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "430:   dot_object_header(fp, mdata, \"MaildirMboxData\", \"#60c060\");",
          "432:   dot_type_date(buf, sizeof(buf), mdata->mtime_cur.tv_sec);",
          "435:   dot_type_umask(buf, sizeof(buf), mdata->mh_umask);",
          "437:   dot_object_footer(fp);",
          "438: }",
          "",
          "[Removed Lines]",
          "433:   dot_type_string(fp, \"mtime_cur\", buf);",
          "436:   dot_type_string(fp, \"mh_umask\", buf);",
          "",
          "[Added Lines]",
          "445:   dot_type_string(fp, \"mtime_cur\", buf, true);",
          "448:   dot_type_string(fp, \"mh_umask\", buf, true);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "445:   dot_ptr(fp, \"fp\", mdata->fp, NULL);",
          "447:   dot_type_date(buf, sizeof(buf), mdata->atime.tv_sec);",
          "450:   dot_object_footer(fp);",
          "451: }",
          "",
          "[Removed Lines]",
          "448:   dot_type_string(fp, \"atime\", buf);",
          "",
          "[Added Lines]",
          "460:   dot_type_string(fp, \"atime\", buf, true);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "453: static void dot_mailbox_nntp(FILE *fp, struct NntpMboxData *mdata, struct ListHead *links)",
          "454: {",
          "455:   dot_object_header(fp, mdata, \"NntpMboxData\", \"#60c060\");",
          "459:   dot_type_number(fp, \"first_message\", mdata->first_message);",
          "460:   dot_type_number(fp, \"last_message\", mdata->last_message);",
          "",
          "[Removed Lines]",
          "456:   dot_type_string(fp, \"group\", mdata->group);",
          "457:   dot_type_string(fp, \"desc\", mdata->desc);",
          "",
          "[Added Lines]",
          "468:   dot_type_string(fp, \"group\", mdata->group, true);",
          "469:   dot_type_string(fp, \"desc\", mdata->desc, true);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "491:   dot_object_header(fp, m, \"Mailbox\", \"#80ff80\");",
          "492:   dot_mailbox_type(fp, \"type\", m->type);",
          "496:   if ((m->type == MUTT_IMAP) || (m->type == MUTT_POP))",
          "497:   {",
          "498:     dot_path_imap(buf, sizeof(buf), mutt_b2s(&m->pathbuf));",
          "500:     dot_path_imap(buf, sizeof(buf), m->realpath);",
          "502:   }",
          "503:   else",
          "504:   {",
          "505:     dot_path_fs(buf, sizeof(buf), mutt_b2s(&m->pathbuf));",
          "507:     dot_path_fs(buf, sizeof(buf), m->realpath);",
          "509:   }",
          "511: #ifdef GV_HIDE_MDATA",
          "",
          "[Removed Lines]",
          "493:   if (m->name)",
          "494:     dot_type_string(fp, \"name\", m->name);",
          "499:     dot_type_string(fp, \"pathbuf\", buf);",
          "501:     dot_type_string(fp, \"realpath\", buf);",
          "506:     dot_type_string(fp, \"pathbuf\", buf);",
          "508:     dot_type_string(fp, \"realpath\", buf);",
          "",
          "[Added Lines]",
          "505:   dot_type_string(fp, \"name\", m->name, false);",
          "510:     dot_type_string(fp, \"pathbuf\", buf, true);",
          "512:     dot_type_string(fp, \"realpath\", buf, true);",
          "517:     dot_type_string(fp, \"pathbuf\", buf, true);",
          "519:     dot_type_string(fp, \"realpath\", buf, true);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "545:     else if (m->type == MUTT_NOTMUCH)",
          "546:       dot_mailbox_notmuch(fp, m->mdata, links);",
          "549:   }",
          "550: #endif",
          "552:   if (m->compress_info)",
          "553:   {",
          "554:     dot_comp(fp, m->compress_info, links);",
          "556:   }",
          "558: #ifndef GV_HIDE_CONFIG",
          "559:   if (m->name)",
          "560:   {",
          "561:     dot_config(fp, m->name, DT_INHERIT_MBOX, m->sub, links);",
          "563:   }",
          "564: #endif",
          "565: }",
          "",
          "[Removed Lines]",
          "548:     dot_add_link(links, m, m->mdata, \"Mailbox->mdata\", false);",
          "555:     dot_add_link(links, m, m->compress_info, \"Mailbox->compress_info\", false);",
          "562:     dot_add_link(links, m, m->name, \"Mailbox Config\", false);",
          "",
          "[Added Lines]",
          "559:     dot_add_link(links, m, m->mdata, \"Mailbox->mdata\", false, NULL);",
          "566:     dot_add_link(links, m, m->compress_info, \"Mailbox->compress_info\", false, NULL);",
          "573:     dot_add_link(links, m, m->name, \"Mailbox Config\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "571:   dot_mailbox(fp, mn->mailbox, links);",
          "575:   struct Buffer buf;",
          "576:   mutt_buffer_init(&buf);",
          "",
          "[Removed Lines]",
          "573:   dot_add_link(links, mn, mn->mailbox, \"MailboxNode->mailbox\", false);",
          "",
          "[Added Lines]",
          "584:   dot_add_link(links, mn, mn->mailbox, \"MailboxNode->mailbox\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "603:   mutt_buffer_addstr(&buf, \"}\");",
          "607: }",
          "609: static void dot_mailbox_list(FILE *fp, struct MailboxList *ml, struct ListHead *links, bool abbr)",
          "",
          "[Removed Lines]",
          "605:   mutt_list_insert_tail(links, buf.data);",
          "606:   buf.data = NULL;",
          "",
          "[Added Lines]",
          "616:   mutt_list_insert_tail(links, mutt_str_strdup(buf.data));",
          "617:   mutt_buffer_dealloc(&buf);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "617:     else",
          "618:       dot_mailbox_node(fp, np, links);",
          "619:     if (prev)",
          "621:     prev = np;",
          "622:   }",
          "623: }",
          "",
          "[Removed Lines]",
          "620:       dot_add_link(links, prev, np, \"MailboxNode->next\", false);",
          "",
          "[Added Lines]",
          "631:       dot_add_link(links, prev, np, \"MailboxNode->next\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "630:   dot_object_footer(fp);",
          "632:   dot_object_header(fp, c->inbuf, \"ConnAccount\", \"#ff8080\");",
          "635:   dot_type_number(fp, \"port\", c->account.port);",
          "636:   dot_object_footer(fp);",
          "639: }",
          "641: static void dot_account_imap(FILE *fp, struct ImapAccountData *adata, struct ListHead *links)",
          "642: {",
          "643:   dot_object_header(fp, adata, \"ImapAccountData\", \"#60c0c0\");",
          "648:   dot_type_number(fp, \"port\", adata->conn->account.port);",
          "650:   dot_type_bool(fp, \"unicode\", adata->unicode);",
          "",
          "[Removed Lines]",
          "633:   dot_type_string(fp, \"user\", c->account.user);",
          "634:   dot_type_string(fp, \"host\", c->account.host);",
          "638:   dot_add_link(links, c, c->inbuf, \"Connection.ConnAccount\", false);",
          "646:   dot_type_string(fp, \"user\", adata->conn->account.user);",
          "647:   dot_type_string(fp, \"pass\", adata->conn->account.pass[0] ? \"***\" : \"\");",
          "",
          "[Added Lines]",
          "644:   dot_type_string(fp, \"user\", c->account.user, true);",
          "645:   dot_type_string(fp, \"host\", c->account.host, true);",
          "649:   dot_add_link(links, c, c->inbuf, \"Connection.ConnAccount\", false, NULL);",
          "657:   dot_type_string(fp, \"user\", adata->conn->account.user, true);",
          "658:   dot_type_string(fp, \"pass\", adata->conn->account.pass[0] ? \"***\" : \"\", true);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "656:   if (adata->conn)",
          "657:   {",
          "658:     dot_connection(fp, adata->conn, links);",
          "660:   }",
          "661: }",
          "",
          "[Removed Lines]",
          "659:     dot_add_link(links, adata, adata->conn, \"ImapAccountData->conn\", false);",
          "",
          "[Added Lines]",
          "670:     dot_add_link(links, adata, adata->conn, \"ImapAccountData->conn\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "668:   dot_ptr(fp, \"fp\", adata->fp, NULL);",
          "670:   dot_type_date(buf, sizeof(buf), adata->atime.tv_sec);",
          "672:   dot_type_bool(fp, \"locked\", adata->locked);",
          "673:   dot_type_bool(fp, \"append\", adata->append);",
          "",
          "[Removed Lines]",
          "671:   dot_type_string(fp, \"atime\", buf);",
          "",
          "[Added Lines]",
          "682:   dot_type_string(fp, \"atime\", buf, true);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "692:   dot_type_bool(fp, \"cacheable\", adata->cacheable);",
          "693:   dot_type_bool(fp, \"newsrc_modified\", adata->newsrc_modified);",
          "698:   dot_type_file(fp, \"newsrc_fp\", adata->fp_newsrc);",
          "700:   dot_type_number(fp, \"groups_num\", adata->groups_num);",
          "",
          "[Removed Lines]",
          "695:   dot_type_string(fp, \"authenticators\", adata->authenticators);",
          "696:   dot_type_string(fp, \"overview_fmt\", adata->overview_fmt);",
          "697:   dot_type_string(fp, \"newsrc_file\", adata->newsrc_file);",
          "",
          "[Added Lines]",
          "706:   dot_type_string(fp, \"authenticators\", adata->authenticators, true);",
          "707:   dot_type_string(fp, \"overview_fmt\", adata->overview_fmt, true);",
          "708:   dot_type_string(fp, \"newsrc_file\", adata->newsrc_file, true);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "703:   char buf[128];",
          "704:   dot_type_date(buf, sizeof(buf), adata->mtime);",
          "706:   dot_type_date(buf, sizeof(buf), adata->newgroups_time);",
          "708:   dot_type_date(buf, sizeof(buf), adata->check_time);",
          "711:   dot_object_footer(fp);",
          "713:   if (adata->conn)",
          "714:   {",
          "715:     dot_connection(fp, adata->conn, links);",
          "717:   }",
          "718: }",
          "",
          "[Removed Lines]",
          "705:   dot_type_string(fp, \"mtime\", buf);",
          "707:   dot_type_string(fp, \"newgroups_time\", buf);",
          "709:   dot_type_string(fp, \"check_time\", buf);",
          "716:     dot_add_link(links, adata, adata->conn, \"NntpAccountData->conn\", false);",
          "",
          "[Added Lines]",
          "716:   dot_type_string(fp, \"mtime\", buf, true);",
          "718:   dot_type_string(fp, \"newgroups_time\", buf, true);",
          "720:   dot_type_string(fp, \"check_time\", buf, true);",
          "727:     dot_add_link(links, adata, adata->conn, \"NntpAccountData->conn\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "731:   dot_object_header(fp, adata, \"PopAccountData\", \"#60c0c0\");",
          "733:   dot_type_date(buf, sizeof(buf), adata->check_time);",
          "739:   dot_type_number(fp, \"port\", adata->conn->account.port);",
          "741:   dot_object_footer(fp);",
          "",
          "[Removed Lines]",
          "734:   dot_type_string(fp, \"check_time\", buf);",
          "736:   dot_type_string(fp, \"login\", adata->conn->account.login);",
          "737:   dot_type_string(fp, \"user\", adata->conn->account.user);",
          "738:   dot_type_string(fp, \"pass\", adata->conn->account.pass[0] ? \"***\" : \"\");",
          "",
          "[Added Lines]",
          "745:   dot_type_string(fp, \"check_time\", buf, true);",
          "747:   dot_type_string(fp, \"login\", adata->conn->account.login, true);",
          "748:   dot_type_string(fp, \"user\", adata->conn->account.user, true);",
          "749:   dot_type_string(fp, \"pass\", adata->conn->account.pass[0] ? \"***\" : \"\", true);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "743:   if (adata->conn)",
          "744:   {",
          "745:     dot_connection(fp, adata->conn, links);",
          "747:   }",
          "748: }",
          "",
          "[Removed Lines]",
          "746:     dot_add_link(links, adata, adata->conn, \"PopAccountData->conn\", false);",
          "",
          "[Added Lines]",
          "757:     dot_add_link(links, adata, adata->conn, \"PopAccountData->conn\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "751: {",
          "752:   dot_object_header(fp, a, \"Account\", \"#80ffff\");",
          "753:   dot_mailbox_type(fp, \"type\", a->type);",
          "756:   dot_object_footer(fp);",
          "",
          "[Removed Lines]",
          "754:   dot_type_string(fp, \"name\", a->name);",
          "",
          "[Added Lines]",
          "765:   dot_type_string(fp, \"name\", a->name, true);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "768:     else if (a->type == MUTT_NOTMUCH)",
          "769:       dot_account_notmuch(fp, a->adata, links);",
          "772:   }",
          "774: #ifndef GV_HIDE_CONFIG",
          "775:   if (a->name)",
          "776:   {",
          "777:     dot_config(fp, a->name, DT_INHERIT_ACC, a->sub, links);",
          "780:     char name[256] = { 0 };",
          "781:     struct Buffer buf;",
          "",
          "[Removed Lines]",
          "771:     dot_add_link(links, a, a->adata, \"Account->adata\", false);",
          "778:     dot_add_link(links, a, a->name, \"Config\", false);",
          "",
          "[Added Lines]",
          "782:     dot_add_link(links, a, a->adata, \"Account->adata\", false, NULL);",
          "789:     dot_add_link(links, a, a->name, \"Config\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "790:     mutt_buffer_add_printf(&buf, \"%s \", name);",
          "792:     mutt_buffer_addstr(&buf, \"}\");",
          "795:   }",
          "796: #endif",
          "798:   struct MailboxNode *first = STAILQ_FIRST(&a->mailboxes);",
          "800:   dot_mailbox_list(fp, &a->mailboxes, links, false);",
          "801: }",
          "",
          "[Removed Lines]",
          "793:     mutt_list_insert_tail(links, buf.data);",
          "794:     buf.data = NULL;",
          "799:   dot_add_link(links, a, first, \"Account->mailboxes\", false);",
          "",
          "[Added Lines]",
          "804:     mutt_list_insert_tail(links, mutt_str_strdup(buf.data));",
          "805:     mutt_buffer_dealloc(&buf);",
          "810:   dot_add_link(links, a, first, \"Account->mailboxes\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "812: #endif",
          "813:     dot_account(fp, np, links);",
          "814:     if (prev)",
          "817:     prev = np;",
          "818:   }",
          "",
          "[Removed Lines]",
          "815:       dot_add_link(links, prev, np, \"Account->next\", false);",
          "",
          "[Added Lines]",
          "826:       dot_add_link(links, prev, np, \"Account->next\", false, NULL);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "824:   dot_ptr(fp, \"mailbox\", ctx->mailbox, \"#80ff80\");",
          "825: #ifdef GV_HIDE_CONTEXT_CONTENTS",
          "826:   dot_type_number(fp, \"vsize\", ctx->vsize);",
          "828:   dot_type_bool(fp, \"collapsed\", ctx->collapsed);",
          "829: #endif",
          "830:   dot_object_footer(fp);",
          "",
          "[Removed Lines]",
          "827:   dot_type_string(fp, \"pattern\", ctx->pattern);",
          "",
          "[Added Lines]",
          "838:   dot_type_string(fp, \"pattern\", ctx->pattern, true);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "857: #ifndef GV_HIDE_NEOMUTT",
          "858:   dot_node(fp, NeoMutt, \"NeoMutt\", \"#ffa500\");",
          "860: #ifndef GV_HIDE_CONFIG",
          "861:   dot_config(fp, (const char *) NeoMutt->sub, 0, NeoMutt->sub, &links);",
          "863:   struct Buffer buf = mutt_buffer_make(256);",
          "864:   char obj1[16] = { 0 };",
          "865:   char obj2[16] = { 0 };",
          "",
          "[Removed Lines]",
          "859:   dot_add_link(&links, NeoMutt, TAILQ_FIRST(&NeoMutt->accounts), \"NeoMutt->accounts\", false);",
          "862:   dot_add_link(&links, NeoMutt, NeoMutt->sub, \"NeoMutt Config\", false);",
          "",
          "[Added Lines]",
          "870:   dot_add_link(&links, NeoMutt, TAILQ_FIRST(&NeoMutt->accounts),",
          "871:                \"NeoMutt->accounts\", false, NULL);",
          "874:   dot_add_link(&links, NeoMutt, NeoMutt->sub, \"NeoMutt Config\", false, NULL);",
          "",
          "---------------"
        ],
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:       }",
          "781:       else if (C_SslStarttls != MUTT_NO)",
          "782:       {",
          "784:       }",
          "785:       if (!proceed)",
          "786:       {",
          "",
          "[Removed Lines]",
          "783:         proceed = mutt_yesorno(_(\"Abort unencrypted PREAUTH connection?\"), C_SslStarttls) != MUTT_NO;",
          "",
          "[Added Lines]",
          "783:         proceed = mutt_yesorno(_(\"Abort unencrypted PREAUTH connection?\"),",
          "784:                                C_SslStarttls) != MUTT_NO;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d75ee5baffbd18bc9242f3f4c4183c6e0a433c5d",
      "candidate_info": {
        "commit_hash": "d75ee5baffbd18bc9242f3f4c4183c6e0a433c5d",
        "repo": "neomutt/neomutt",
        "commit_url": "https://github.com/neomutt/neomutt/commit/d75ee5baffbd18bc9242f3f4c4183c6e0a433c5d",
        "files": [
          "docs/manual.xml.head",
          "imap/imap.c"
        ],
        "message": "Remove $ssl_starttls check for IMAP PREAUTH\n\nChecking $ssl_starttls provides no real protection, because an\nattacker can just as easily spoof \"* OK\" and strip the STARTTLS\ncapability as it can spoof \"* PREAUTH\".  The only way to really\nprotect again the MITM is through $ssl_force_tls.\n\nAdd documentation about STARTTLS, $tunnel, and the current PREAUTH\nexception when using $tunnel.\n\nThe behavior of NeoMutt about $tunnel is somewhat inconsistent: is it\nconsidered secure or not?  For PREAUTH, to avoid breaking\nconfigurations, we assume it is secure.  But at the same time, NeoMutt is\nstill negotiating STARTTLS for other $tunnel connections.\n\nThis will be resolved in master for the next release; probably by\nadding a $tunnel_is_secure config variable defaulting \"yes\" and\nremoving the STARTTLS negotiation in that case.\n\nUpstream-commit: https://gitlab.com/muttmua/mutt/commit/e37516c3aeb11668bd8e262dfa39cb568c0702c0\nCo-authored-by: Pietro Cerutti <gahr@gahr.ch>",
        "before_after_code_files": [
          "imap/imap.c||imap/imap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/imap.c||imap/imap.c"
          ],
          "candidate": [
            "imap/imap.c||imap/imap.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "772:   else if (mutt_str_startswith(adata->buf, \"* PREAUTH\", CASE_IGNORE))",
          "773:   {",
          "774: #ifdef USE_SSL",
          "778:     {",
          "808:     }",
          "809: #endif",
          "",
          "[Removed Lines]",
          "777:     if ((adata->conn->ssf == 0) && !C_Tunnel)",
          "779:       bool proceed = true;",
          "780:       if (C_SslForceTls)",
          "781:       {",
          "782:         proceed = false;",
          "783:       }",
          "784:       else if (C_SslStarttls != MUTT_NO)",
          "785:       {",
          "786:         proceed = mutt_yesorno(",
          "788:                Gitlab ticket #246 identified a machine-in-the-middle attack",
          "789:                by sending a \"PREAUTH\" response instead of \"OK\".  STARTTLS",
          "790:                is not allowed once you are authenticated, so this would be",
          "791:                a clever way to prevent encryption, and talk to the MITM instead.",
          "793:                This prompt is based on the quadoption $ssl_starttls.  The",
          "794:                default is \"yes\" which will automatically abort unencrypted",
          "795:                PREAUTH.  But if the user changes to ask-yes or ask-no, this",
          "796:                prompt will occur instead to warn them that the connection is",
          "797:                an unusual \"PREAUTH\" and is unencrypted.  The warning is terse,",
          "798:                so translator feedback and suggestions most welcome.",
          "800:             _(\"Abort unencrypted PREAUTH connection?\"),",
          "801:             C_SslStarttls) != MUTT_NO;",
          "802:       }",
          "803:       if (!proceed)",
          "804:       {",
          "805:         mutt_error(_(\"Encrypted connection unavailable\"));",
          "806:         goto err_close_conn;",
          "807:       }",
          "",
          "[Added Lines]",
          "780:     if ((adata->conn->ssf == 0) && !C_Tunnel && !C_SslForceTls)",
          "782:       mutt_error(_(\"Encrypted connection unavailable\"));",
          "783:       goto err_close_conn;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf3483f485001b170d27299f76b3ffd4c89897a7",
      "candidate_info": {
        "commit_hash": "cf3483f485001b170d27299f76b3ffd4c89897a7",
        "repo": "neomutt/neomutt",
        "commit_url": "https://github.com/neomutt/neomutt/commit/cf3483f485001b170d27299f76b3ffd4c89897a7",
        "files": [
          "imap/imap.c"
        ],
        "message": "Add L10N comment for unencrypted PREAUTH warning\n\nI forgot to add one while trying to get the fix out.\n\nUpstream-commit: https://gitlab.com/muttmua/mutt/commit/a400fc3f50fbbd18e5cca5091645888416060d8b\nCo-authored-by: Pietro Cerutti <gahr@gahr.ch>",
        "before_after_code_files": [
          "imap/imap.c||imap/imap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/imap.c||imap/imap.c"
          ],
          "candidate": [
            "imap/imap.c||imap/imap.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:       }",
          "784:       else if (C_SslStarttls != MUTT_NO)",
          "785:       {",
          "788:       }",
          "789:       if (!proceed)",
          "790:       {",
          "",
          "[Removed Lines]",
          "786:         proceed = mutt_yesorno(_(\"Abort unencrypted PREAUTH connection?\"),",
          "787:                                C_SslStarttls) != MUTT_NO;",
          "",
          "[Added Lines]",
          "786:         proceed = mutt_yesorno(",
          "788:                Gitlab ticket #246 identified a machine-in-the-middle attack",
          "789:                by sending a \"PREAUTH\" response instead of \"OK\".  STARTTLS",
          "790:                is not allowed once you are authenticated, so this would be",
          "791:                a clever way to prevent encryption, and talk to the MITM instead.",
          "793:                This prompt is based on the quadoption $ssl_starttls.  The",
          "794:                default is \"yes\" which will automatically abort unencrypted",
          "795:                PREAUTH.  But if the user changes to ask-yes or ask-no, this",
          "796:                prompt will occur instead to warn them that the connection is",
          "797:                an unusual \"PREAUTH\" and is unencrypted.  The warning is terse,",
          "798:                so translator feedback and suggestions most welcome.",
          "800:             _(\"Abort unencrypted PREAUTH connection?\"),",
          "801:             C_SslStarttls) != MUTT_NO;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9909cde1f332d2f641c6aec0eb92adf0a150c7e5",
      "candidate_info": {
        "commit_hash": "9909cde1f332d2f641c6aec0eb92adf0a150c7e5",
        "repo": "neomutt/neomutt",
        "commit_url": "https://github.com/neomutt/neomutt/commit/9909cde1f332d2f641c6aec0eb92adf0a150c7e5",
        "files": [
          "imap/imap.c"
        ],
        "message": "Prevent possible IMAP MITM via PREAUTH response\n\nThis is similar to CVE-2014-2567 and CVE-2020-12398.  STARTTLS is not\nallowed in the Authenticated state, so previously Mutt would\nimplicitly mark the connection as authenticated and skip any\nencryption checking/enabling.\n\nNo credentials are exposed, but it does allow messages to be sent to\nan attacker, via postpone or fcc'ing for instance.\n\nReuse the $ssl_starttls quadoption \"in reverse\" to prompt to abort the\nconnection if it is unencrypted.\n\nThanks very much to Damian Poddebniak and Fabian Ising from the\nM\u00fcnster University of Applied Sciences for reporting this issue, and\ntheir help in testing the fix.",
        "before_after_code_files": [
          "imap/imap.c||imap/imap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "imap/imap.c||imap/imap.c"
          ],
          "candidate": [
            "imap/imap.c||imap/imap.c"
          ]
        }
      },
      "candidate_diff": {
        "imap/imap.c||imap/imap.c": [
          "File: imap/imap.c -> imap/imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:   }",
          "769:   else if (mutt_str_startswith(adata->buf, \"* PREAUTH\", CASE_IGNORE))",
          "770:   {",
          "771:     adata->state = IMAP_AUTHENTICATED;",
          "772:     if (check_capabilities(adata) != 0)",
          "773:       goto bail;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771: #ifdef USE_SSL",
          "774:     if (adata->conn->ssf == 0)",
          "775:     {",
          "776:       bool proceed = true;",
          "777:       if (C_SslForceTls)",
          "778:       {",
          "779:         proceed = false;",
          "780:       }",
          "781:       else if (C_SslStarttls != MUTT_NO)",
          "782:       {",
          "783:         proceed = mutt_yesorno(_(\"Abort unencrypted PREAUTH connection?\"), C_SslStarttls) != MUTT_NO;",
          "784:       }",
          "785:       if (!proceed)",
          "786:       {",
          "787:         mutt_error(_(\"Encrypted connection unavailable\"));",
          "788:         goto err_close_conn;",
          "789:       }",
          "790:     }",
          "791: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}