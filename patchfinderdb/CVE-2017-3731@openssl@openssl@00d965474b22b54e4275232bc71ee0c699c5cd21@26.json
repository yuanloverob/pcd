{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8aa38789332b49ef3d33965649a4595b1bc33ac9",
      "candidate_info": {
        "commit_hash": "8aa38789332b49ef3d33965649a4595b1bc33ac9",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8aa38789332b49ef3d33965649a4595b1bc33ac9",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Add some more consistency checks in tls_decrypt_ticket.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2704)\n(cherry picked from commit 79020b27beff060d02830870fdfd821fe8cbd439)",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3172:     sess = d2i_SSL_SESSION(NULL, &p, slen);",
          "3173:     OPENSSL_free(sdec);",
          "3174:     if (sess) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3176:         if (p != sdec + slen || sess->session_id_length != 0) {",
          "3177:             SSL_SESSION_free(sess);",
          "3178:             return 2;",
          "3179:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4cdf91ef7d6cd05706027c341d36db867276ea47",
      "candidate_info": {
        "commit_hash": "4cdf91ef7d6cd05706027c341d36db867276ea47",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4cdf91ef7d6cd05706027c341d36db867276ea47",
        "files": [
          "apps/speed.c"
        ],
        "message": "Check that async_jobs is not negative and not too high.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2693)\n(cherry picked from commit f8aa15728ba960137faf77b298fa60c1e63dc50f)",
        "before_after_code_files": [
          "apps/speed.c||apps/speed.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/speed.c||apps/speed.c": [
          "File: apps/speed.c -> apps/speed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1235: #ifndef NO_FORK",
          "1236:     int multi = 0;",
          "1237: #endif",
          "1239: #if !defined(OPENSSL_NO_RSA) || !defined(OPENSSL_NO_DSA) \\",
          "1240:     || !defined(OPENSSL_NO_EC)",
          "1241:     long rsa_count = 1;",
          "",
          "[Removed Lines]",
          "1238:     int async_jobs = 0;",
          "",
          "[Added Lines]",
          "1238:     unsigned int async_jobs = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1414:                            prog);",
          "1415:                 goto opterr;",
          "1416:             }",
          "1417: #endif",
          "1418:             break;",
          "1419:         case OPT_MISALIGN:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1417:             if (async_jobs > 99999) {",
          "1418:                 BIO_printf(bio_err,",
          "1419:                            \"%s: too many async_jobs\\n\",",
          "1420:                            prog);",
          "1421:                 goto opterr;",
          "1422:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b67a37b84674881226bb96709239a7e5945bc480",
      "candidate_info": {
        "commit_hash": "b67a37b84674881226bb96709239a7e5945bc480",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b67a37b84674881226bb96709239a7e5945bc480",
        "files": [
          "test/recipes/40-test_rehash.t"
        ],
        "message": "test_rehash does nothing, have it do something\n\ntest/recipes/40-test_rehash.t uses test files from certs/demo, which\ndoesn't exist any longer.  Have it use PEM files from test/ instead.\n\nBecause rehash wants only one certificate or CRL per file, we must\nalso filter those PEM files to produce test files with a single object\neach.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2594)\n(cherry picked from commit 4bbd8a5daaa810c487f684971c0339a1d7c15da9)",
        "before_after_code_files": [
          "test/recipes/40-test_rehash.t||test/recipes/40-test_rehash.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/40-test_rehash.t||test/recipes/40-test_rehash.t": [
          "File: test/recipes/40-test_rehash.t -> test/recipes/40-test_rehash.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: use File::Copy;",
          "15: use File::Basename;",
          "16: use if $^O ne \"VMS\", 'File::Glob' => qw/glob/;",
          "19: setup(\"test_rehash\");",
          "",
          "[Removed Lines]",
          "17: use OpenSSL::Test qw/:DEFAULT bldtop_file/;",
          "",
          "[Added Lines]",
          "17: use OpenSSL::Test qw/:DEFAULT srctop_file/;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: }, create => 1, cleanup => 1;",
          "60: sub prepare {",
          "66:     my @destfiles = ();",
          "70:     }",
          "71:     foreach (@_) {",
          "72:         die \"Internal error, argument is not CODE\"",
          "73:             unless (ref($_) eq 'CODE');",
          "",
          "[Removed Lines]",
          "61:     my @sourcefiles =",
          "62:         sort map { glob(bldtop_file('certs', 'demo', \"*.$_\")) } ('pem',",
          "63:                                                                  'crt',",
          "64:                                                                  'cer',",
          "65:                                                                  'crl');",
          "67:     foreach (@sourcefiles) {",
          "68:         copy($_, curdir());",
          "69:         push @destfiles, catfile(curdir(), basename($_));",
          "",
          "[Added Lines]",
          "61:     my @pemsourcefiles = sort glob(srctop_file('test', \"*.pem\"));",
          "64:     die \"There are no source files\\n\" if scalar @pemsourcefiles == 0;",
          "66:     my $cnt = 0;",
          "67:     foreach (@pemsourcefiles) {",
          "68:         my $basename = basename($_, \".pem\");",
          "69:         my $writing = 0;",
          "71:         open PEM, $_ or die \"Can't read $_: $!\\n\";",
          "72:         while (my $line = <PEM>) {",
          "73:             if ($line =~ m{^-----BEGIN (?:CERTIFICATE|X509 CRL)-----}) {",
          "74:                 die \"New start in a PEM blob?\\n\" if $writing;",
          "75:                 $cnt++;",
          "76:                 my $destfile =",
          "77:                     catfile(curdir(),",
          "78:                             $basename . sprintf(\"-%02d\", $cnt) . \".pem\");",
          "79:                 push @destfiles, $destfile;",
          "80:                 open OUT, '>', $destfile",
          "81:                     or die \"Can't write $destfile\\n\";",
          "82:                 $writing = 1;",
          "83:             }",
          "84:             print OUT $line if $writing;",
          "85:             if ($line =~ m|^-----END |) {",
          "86:                 close OUT if $writing;",
          "87:                 $writing = 0;",
          "88:             }",
          "89:         }",
          "90:         die \"No end marker in $basename\\n\" if $writing;",
          "92:     die \"No test PEM files produced\\n\" if $cnt == 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a08ae8fee9539ed1432f4169cea46f6e27990dd5",
      "candidate_info": {
        "commit_hash": "a08ae8fee9539ed1432f4169cea46f6e27990dd5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a08ae8fee9539ed1432f4169cea46f6e27990dd5",
        "files": [
          "crypto/dso/dso_lib.c"
        ],
        "message": "Avoid the call to OPENSSL_malloc with a negative value (then casted to unsigned)\n\nCLA: trivial\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2021)\n(cherry picked from commit 210fe4edee6514e4c1f0677adc9112c4459da02b)",
        "before_after_code_files": [
          "crypto/dso/dso_lib.c||crypto/dso/dso_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/dso/dso_lib.c||crypto/dso/dso_lib.c": [
          "File: crypto/dso/dso_lib.c -> crypto/dso/dso_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:     char *filename = NULL;",
          "325:     int len = DSO_pathbyaddr(addr, NULL, 0);",
          "327:     filename = OPENSSL_malloc(len);",
          "328:     if (filename != NULL",
          "329:             && DSO_pathbyaddr(addr, filename, len) == len)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:     if (len < 0)",
          "328:         return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f56c786769e13bb06e9855cd426e74a1c9eea3a1",
      "candidate_info": {
        "commit_hash": "f56c786769e13bb06e9855cd426e74a1c9eea3a1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f56c786769e13bb06e9855cd426e74a1c9eea3a1",
        "files": [
          "crypto/init.c"
        ],
        "message": "Stop init loops\n\nUnder certain circumstances, the libcrypto init code would loop,\ncausing a deadlock.  This would typically happen if something in\nossl_init_base() caused an OpenSSL error, and the error stack routines\nwould recurse into the init code before the flag that ossl_init_base()\nhad been run was checked.\n\nThis change makes sure ossl_init_base isn't run once more of the base\nis initiated.\n\nThanks to Dmitry Kostjuchenko for the idea.\n\nFixes Github issue #1899\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1922)\n(cherry picked from commit b7a7f39afeb4748b4c25dbccb8951711b8b70eaf)",
        "before_after_code_files": [
          "crypto/init.c||crypto/init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/init.c||crypto/init.c": [
          "File: crypto/init.c -> crypto/init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:         return 0;",
          "504:     }",
          "507:         return 0;",
          "509:     if ((opts & OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS)",
          "",
          "[Removed Lines]",
          "506:     if (!RUN_ONCE(&base, ossl_init_base))",
          "",
          "[Added Lines]",
          "506:     if (!base_inited && !RUN_ONCE(&base, ossl_init_base))",
          "",
          "---------------"
        ]
      }
    }
  ]
}