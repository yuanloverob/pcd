{
  "cve_id": "CVE-2021-36084",
  "cve_desc": "The CIL compiler in SELinux 3.2 has a use-after-free in __cil_verify_classperms (called from __cil_verify_classpermission and __cil_pre_verify_helper).",
  "repo": "SELinuxProject/selinux",
  "patch_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
  "patch_info": {
    "commit_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "repo": "SELinuxProject/selinux",
    "commit_url": "https://github.com/SELinuxProject/selinux/commit/f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "files": [
      "libsepol/cil/src/cil_reset_ast.c"
    ],
    "message": "libsepol/cil: Destroy classperms list when resetting classpermission\n\nNicolas Iooss reports:\n  A few months ago, OSS-Fuzz found a crash in the CIL compiler, which\n  got reported as\n  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28648 (the title\n  is misleading, or is caused by another issue that conflicts with the\n  one I report in this message). Here is a minimized CIL policy which\n  reproduces the issue:\n\n  (class CLASS (PERM))\n  (classorder (CLASS))\n  (sid SID)\n  (sidorder (SID))\n  (user USER)\n  (role ROLE)\n  (type TYPE)\n  (category CAT)\n  (categoryorder (CAT))\n  (sensitivity SENS)\n  (sensitivityorder (SENS))\n  (sensitivitycategory SENS (CAT))\n  (allow TYPE self (CLASS (PERM)))\n  (roletype ROLE TYPE)\n  (userrole USER ROLE)\n  (userlevel USER (SENS))\n  (userrange USER ((SENS)(SENS (CAT))))\n  (sidcontext SID (USER ROLE TYPE ((SENS)(SENS))))\n\n  (classpermission CLAPERM)\n\n  (optional OPT\n      (roletype nonexistingrole nonexistingtype)\n      (classpermissionset CLAPERM (CLASS (PERM)))\n  )\n\n  The CIL policy fuzzer (which mimics secilc built with clang Address\n  Sanitizer) reports:\n\n  ==36541==ERROR: AddressSanitizer: heap-use-after-free on address\n  0x603000004f98 at pc 0x56445134c842 bp 0x7ffe2a256590 sp\n  0x7ffe2a256588\n  READ of size 8 at 0x603000004f98 thread T0\n      #0 0x56445134c841 in __cil_verify_classperms\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1620:8\n      #1 0x56445134a43e in __cil_verify_classpermission\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1650:9\n      #2 0x56445134a43e in __cil_pre_verify_helper\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1715:8\n      #3 0x5644513225ac in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:272:9\n      #4 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #5 0x5644513226af in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:284:9\n      #6 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #7 0x5644512b88fd in cil_pre_verify\n  /selinux/libsepol/src/../cil/src/cil_post.c:2510:7\n      #8 0x5644512b88fd in cil_post_process\n  /selinux/libsepol/src/../cil/src/cil_post.c:2524:7\n      #9 0x5644511856ff in cil_compile\n  /selinux/libsepol/src/../cil/src/cil.c:564:7\n\nThe classperms list of a classpermission rule is created and filled\nin when classpermissionset rules are processed, so it doesn't own any\npart of the list and shouldn't retain any of it when it is reset.\n\nDestroy the classperms list (without destroying the data in it)  when\nresetting a classpermission rule.\n\nReported-by: Nicolas Iooss <nicolas.iooss@m4x.org>\nSigned-off-by: James Carter <jwcart2@gmail.com>",
    "before_after_code_files": [
      "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
    ]
  },
  "patch_diff": {
    "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c": [
      "File: libsepol/cil/src/cil_reset_ast.c -> libsepol/cil/src/cil_reset_ast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:   return;",
      "55:  }",
      "58: }",
      "60: static void cil_reset_classperms_set(struct cil_classperms_set *cp_set)",
      "",
      "[Removed Lines]",
      "57:  cil_reset_classperms_list(cp->classperms);",
      "",
      "[Added Lines]",
      "57:  cil_list_destroy(&cp->classperms, CIL_FALSE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42a8dc46a7a05b6e9fb62f081815d25e65df1817",
      "candidate_info": {
        "commit_hash": "42a8dc46a7a05b6e9fb62f081815d25e65df1817",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/42a8dc46a7a05b6e9fb62f081815d25e65df1817",
        "files": [
          "libsepol/src/kernel_to_cil.c",
          "libsepol/src/kernel_to_conf.c",
          "libsepol/src/optimize.c"
        ],
        "message": "libsepol: handle type gaps\n\nFor policy versions between 20 and 23 the type_val_to_struct array might\ncontain gaps. Skip those gaps to avoid NULL pointer dereferences:\n\n    ==1250==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x00000058560b bp 0x7ffdca60c110 sp 0x7ffdca60bfc0 T0)\n    ==1250==The signal is caused by a READ memory access.\n    ==1250==Hint: address points to the zero page.\n        #0 0x58560b in build_type_map selinux/libsepol/src/optimize.c:107:33\n        #1 0x58560b in policydb_optimize selinux/libsepol/src/optimize.c:441:13\n        #2 0x55e63e in LLVMFuzzerTestOneInput selinux/libsepol/fuzz/binpolicy-fuzzer.c:42:10\n        #3 0x455283 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) cxa_noexception.cpp:0\n        #4 0x440ec2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6\n        #5 0x44671c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) cxa_noexception.cpp:0\n        #6 0x46f522 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\n        #7 0x7f9c160d00b2 in __libc_start_main /build/glibc-eX1tMB/glibc-2.31/csu/libc-start.c:308:16\n        #8 0x41f67d in _start\n\nFound by oss-fuzz (#42697)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/kernel_to_cil.c||libsepol/src/kernel_to_cil.c",
          "libsepol/src/kernel_to_conf.c||libsepol/src/kernel_to_conf.c",
          "libsepol/src/optimize.c||libsepol/src/optimize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/kernel_to_cil.c||libsepol/src/kernel_to_cil.c": [
          "File: libsepol/src/kernel_to_cil.c -> libsepol/src/kernel_to_cil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1228:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "1229:   type = pdb->type_val_to_struct[i];",
          "1231:    rc = strs_add(strs, pdb->p_type_val_to_name[i]);",
          "1232:    if (rc != 0) {",
          "1233:     goto exit;",
          "",
          "[Removed Lines]",
          "1230:   if (type->flavor == TYPE_ATTRIB) {",
          "",
          "[Added Lines]",
          "1230:   if (type && type->flavor == TYPE_ATTRIB) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1358:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "1359:   type = pdb->type_val_to_struct[i];",
          "1361:    rc = strs_add(strs, pdb->p_type_val_to_name[i]);",
          "1362:    if (rc != 0) {",
          "1363:     goto exit;",
          "",
          "[Removed Lines]",
          "1360:   if (type->flavor == TYPE_TYPE && type->primary) {",
          "",
          "[Added Lines]",
          "1360:   if (type && type->flavor == TYPE_TYPE && type->primary) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1487:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "1488:   type = pdb->type_val_to_struct[i];",
          "1490:    if (type->bounds > 0) {",
          "1491:     rc = strs_add(strs, pdb->p_type_val_to_name[i]);",
          "1492:     if (rc != 0) {",
          "",
          "[Removed Lines]",
          "1489:   if (type->flavor == TYPE_TYPE) {",
          "",
          "[Added Lines]",
          "1489:   if (type && type->flavor == TYPE_TYPE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1541:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "1542:   attr = pdb->type_val_to_struct[i];",
          "1544:   name = pdb->p_type_val_to_name[i];",
          "1545:   typemap = &pdb->attr_type_map[i];",
          "1546:   if (ebitmap_is_empty(typemap)) continue;",
          "",
          "[Removed Lines]",
          "1543:   if (attr->flavor != TYPE_ATTRIB) continue;",
          "",
          "[Added Lines]",
          "1543:   if (!attr || attr->flavor != TYPE_ATTRIB) continue;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2274:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "2275:   type_datum = pdb->type_val_to_struct[i];",
          "2277:    rc = strs_add(strs, pdb->p_type_val_to_name[i]);",
          "2278:    if (rc != 0) {",
          "2279:     goto exit;",
          "",
          "[Removed Lines]",
          "2276:   if (type_datum->flavor == TYPE_TYPE && type_datum->primary) {",
          "",
          "[Added Lines]",
          "2276:   if (type_datum && type_datum->flavor == TYPE_TYPE && type_datum->primary) {",
          "",
          "---------------"
        ],
        "libsepol/src/kernel_to_conf.c||libsepol/src/kernel_to_conf.c": [
          "File: libsepol/src/kernel_to_conf.c -> libsepol/src/kernel_to_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1211:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "1212:   type = pdb->type_val_to_struct[i];",
          "1214:    rc = strs_add(strs, pdb->p_type_val_to_name[i]);",
          "1215:    if (rc != 0) {",
          "1216:     goto exit;",
          "",
          "[Removed Lines]",
          "1213:   if (type->flavor == TYPE_ATTRIB) {",
          "",
          "[Added Lines]",
          "1213:   if (type && type->flavor == TYPE_ATTRIB) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1341:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "1342:   type = pdb->type_val_to_struct[i];",
          "1344:    rc = strs_add(strs, pdb->p_type_val_to_name[i]);",
          "1345:    if (rc != 0) {",
          "1346:     goto exit;",
          "",
          "[Removed Lines]",
          "1343:   if (type->flavor == TYPE_TYPE && type->primary) {",
          "",
          "[Added Lines]",
          "1343:   if (type && type->flavor == TYPE_TYPE && type->primary) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1461:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "1462:   type = pdb->type_val_to_struct[i];",
          "1464:    if (type->bounds > 0) {",
          "1465:     rc = strs_add(strs, pdb->p_type_val_to_name[i]);",
          "1466:     if (rc != 0) {",
          "",
          "[Removed Lines]",
          "1463:   if (type->flavor == TYPE_TYPE) {",
          "",
          "[Added Lines]",
          "1463:   if (type && type->flavor == TYPE_TYPE) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1584:  for (i=0; i < pdb->p_types.nprim; i++) {",
          "1585:   type = pdb->type_val_to_struct[i];",
          "1587:   if (ebitmap_cardinality(&pdb->type_attr_map[i]) == 1) continue;",
          "1589:   rc = ebitmap_cpy(&attrmap, &pdb->type_attr_map[i]);",
          "",
          "[Removed Lines]",
          "1586:   if (type->flavor != TYPE_TYPE || !type->primary) continue;",
          "",
          "[Added Lines]",
          "1586:   if (!type || type->flavor != TYPE_TYPE || !type->primary) continue;",
          "",
          "---------------"
        ],
        "libsepol/src/optimize.c||libsepol/src/optimize.c": [
          "File: libsepol/src/optimize.c -> libsepol/src/optimize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <sepol/policydb/policydb.h>",
          "32: #include <sepol/policydb/conditional.h>",
          "34: #include \"private.h\"",
          "36: #define TYPE_VEC_INIT_SIZE 16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include \"debug.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   if (type_vec_init(&map[i]))",
          "105:    goto err;",
          "107:   if (p->type_val_to_struct[i]->flavor != TYPE_ATTRIB) {",
          "108:    ebitmap_for_each_positive_bit(&p->type_attr_map[i],",
          "109:             n, k) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   if (!p->type_val_to_struct[i])",
          "109:    continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:    ebitmap_t *types_i = &p->attr_type_map[i];",
          "116:    for (k = 0; k < p->p_types.nprim; k++) {",
          "120:      continue;",
          "122:     if (ebitmap_contains(types_k, types_i)) {",
          "123:      if (type_vec_append(&map[i], k))",
          "124:       goto err;",
          "",
          "[Removed Lines]",
          "117:     ebitmap_t *types_k = &p->attr_type_map[k];",
          "119:     if (p->type_val_to_struct[k]->flavor != TYPE_ATTRIB)",
          "",
          "[Added Lines]",
          "121:     const ebitmap_t *types_k;",
          "123:     if (!p->type_val_to_struct[k] || p->type_val_to_struct[k]->flavor != TYPE_ATTRIB)",
          "126:     types_k = &p->attr_type_map[k];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "438:  if (p->policy_type != POLICY_KERN)",
          "439:   return -1;",
          "441:  type_map = build_type_map(p);",
          "442:  if (!type_map)",
          "443:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447:  if (p->policyvers >= POLICYDB_VERSION_AVTAB && p->policyvers <= POLICYDB_VERSION_PERMISSIVE) {",
          "454:   ERR(NULL, \"Optimizing policy versions between 20 and 23 is not supported\");",
          "455:   return -1;",
          "456:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16d7dde41c24099a11247f8b18c07cefed6aa1aa",
      "candidate_info": {
        "commit_hash": "16d7dde41c24099a11247f8b18c07cefed6aa1aa",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/16d7dde41c24099a11247f8b18c07cefed6aa1aa",
        "files": [
          "checkpolicy/test/dismod.c"
        ],
        "message": "checkpolicy: resolve dismod memory leaks\n\nExample leak:\n\n    Indirect leak of 4 byte(s) in 1 object(s) allocated from:\n        #0 0x49bacd in __interceptor_malloc (./checkpolicy/test/dismod+0x49bacd)\n        #1 0x58ae54 in add_i_to_a ./libsepol/src/util.c:55:21\n        #2 0x53ea8e in symtab_insert ./libsepol/src/policydb.c:1729:6\n        #3 0x536252 in roles_init ./libsepol/src/policydb.c:772:7\n        #4 0x536252 in policydb_init ./libsepol/src/policydb.c:892:7\n        #5 0x562ff1 in sepol_policydb_create ./libsepol/src/policydb_public.c:69:6\n        #6 0x521a7c in module_package_init ./libsepol/src/module.c:96:6\n        #7 0x521a7c in sepol_module_package_create ./libsepol/src/module.c:126:7\n        #8 0x4cfb80 in read_policy ./checkpolicy/test/dismod.c:750:7\n        #9 0x4cda10 in main ./checkpolicy/test/dismod.c:878:6\n        #10 0x7f8538d01e49 in __libc_start_main csu/../csu/libc-start.c:314:16\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "checkpolicy/test/dismod.c||checkpolicy/test/dismod.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "checkpolicy/test/dismod.c||checkpolicy/test/dismod.c": [
          "File: checkpolicy/test/dismod.c -> checkpolicy/test/dismod.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751:    fprintf(stderr, \"%s:  Out of memory!\\n\", __FUNCTION__);",
          "752:    exit(1);",
          "753:   }",
          "754:   package->policy = (sepol_policydb_t *) policy;",
          "755:   package->file_contexts = NULL;",
          "756:   retval =",
          "757:       sepol_module_package_read(package,",
          "758:            (sepol_policy_file_t *) & f, 1);",
          "760:  } else {",
          "761:   if (policydb_init(policy)) {",
          "762:    fprintf(stderr, \"%s:  Out of memory!\\n\", __FUNCTION__);",
          "",
          "[Removed Lines]",
          "759:   free(package->file_contexts);",
          "",
          "[Added Lines]",
          "754:   sepol_policydb_free(package->policy);",
          "760:   package->policy = NULL;",
          "761:   sepol_module_package_free(package);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f571438ac026feef377618eb92537823e29ce8ab",
      "candidate_info": {
        "commit_hash": "f571438ac026feef377618eb92537823e29ce8ab",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/f571438ac026feef377618eb92537823e29ce8ab",
        "files": [
          "libsepol/src/conditional.c"
        ],
        "message": "libsepol: clean memory on conditional insertion failure\n\nFree the local access vector list on failure as it does not get moved\ninto the policy structure.\nDrop the now redundant, but non-exhaustive, resource cleanup in\ncond_insertf().\n\n    Direct leak of 16 byte(s) in 1 object(s) allocated from:\n        #0 0x52596d in malloc (./out/binpolicy-fuzzer+0x52596d)\n        #1 0x5b30d2 in cond_insertf ./libsepol/src/conditional.c:682:9\n        #2 0x5ac218 in avtab_read_item ./libsepol/src/avtab.c:583:10\n        #3 0x5b21f4 in cond_read_av_list ./libsepol/src/conditional.c:725:8\n        #4 0x5b21f4 in cond_read_node ./libsepol/src/conditional.c:798:7\n        #5 0x5b21f4 in cond_read_list ./libsepol/src/conditional.c:847:7\n        #6 0x576b6e in policydb_read ./libsepol/src/policydb.c:4436:8\n        #7 0x55a1fe in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:24:6\n        #8 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #9 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #10 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #11 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #12 0x7f47abeb87ec in __libc_start_main csu/../csu/libc-start.c:332:16\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/conditional.c||libsepol/src/conditional.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/conditional.c||libsepol/src/conditional.c": [
          "File: libsepol/src/conditional.c -> libsepol/src/conditional.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:  if (k->specified & AVTAB_TYPE) {",
          "635:   if (avtab_search(&p->te_avtab, k)) {",
          "636:    WARN(NULL, \"security: type rule already exists outside of a conditional.\");",
          "638:   }",
          "",
          "[Removed Lines]",
          "637:    goto err;",
          "",
          "[Added Lines]",
          "637:    return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "650:     if (avtab_search_node_next",
          "651:         (node_ptr, k->specified)) {",
          "652:      ERR(NULL, \"security: too many conflicting type rules.\");",
          "654:     }",
          "655:     found = 0;",
          "656:     for (cur = other; cur != NULL; cur = cur->next) {",
          "",
          "[Removed Lines]",
          "653:      goto err;",
          "",
          "[Added Lines]",
          "653:      return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "661:     }",
          "662:     if (!found) {",
          "663:      ERR(NULL, \"security: conflicting type rules.\\n\");",
          "665:     }",
          "666:    }",
          "667:   } else {",
          "668:    if (avtab_search(&p->te_cond_avtab, k)) {",
          "669:     ERR(NULL, \"security: conflicting type rules when adding type rule for true.\\n\");",
          "671:    }",
          "672:   }",
          "673:  }",
          "",
          "[Removed Lines]",
          "664:      goto err;",
          "670:     goto err;",
          "",
          "[Added Lines]",
          "664:      return -1;",
          "670:     return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "675:  node_ptr = avtab_insert_nonunique(&p->te_cond_avtab, k, d);",
          "676:  if (!node_ptr) {",
          "677:   ERR(NULL, \"security: could not insert rule.\");",
          "679:  }",
          "680:  node_ptr->parse_context = (void *)1;",
          "682:  list = malloc(sizeof(cond_av_list_t));",
          "683:  if (!list)",
          "685:  memset(list, 0, sizeof(cond_av_list_t));",
          "687:  list->node = node_ptr;",
          "",
          "[Removed Lines]",
          "678:   goto err;",
          "684:   goto err;",
          "",
          "[Added Lines]",
          "678:   return -1;",
          "684:   return -1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "691:   data->tail->next = list;",
          "692:  data->tail = list;",
          "693:  return 0;",
          "699: }",
          "701: static int cond_read_av_list(policydb_t * p, void *fp,",
          "",
          "[Removed Lines]",
          "695:       err:",
          "696:  cond_av_list_destroy(data->head);",
          "697:  data->head = NULL;",
          "698:  return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "724:  for (i = 0; i < len; i++) {",
          "725:   rc = avtab_read_item(fp, p->policyvers, &p->te_cond_avtab,",
          "726:          cond_insertf, &data);",
          "728:    return rc;",
          "730:  }",
          "",
          "[Removed Lines]",
          "727:   if (rc)",
          "",
          "[Added Lines]",
          "722:   if (rc) {",
          "723:    cond_av_list_destroy(data.head);",
          "725:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fffb16093c6eb4a316f530ac5813459277dfd40b",
      "candidate_info": {
        "commit_hash": "fffb16093c6eb4a316f530ac5813459277dfd40b",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/fffb16093c6eb4a316f530ac5813459277dfd40b",
        "files": [
          "libsepol/src/policydb_validate.c"
        ],
        "message": "libsepol: validate expanded user range and level\n\nCheck those contains valid values.\n\n    ==57532==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000001178 at pc 0x000000564c04 bp 0x7ffed7a5ad90 sp 0x7ffed7a5ad88\n    READ of size 8 at 0x603000001178 thread T0\n        #0 0x564c03 in level_to_str ./libsepol/src/kernel_to_conf.c:1901:19\n        #1 0x564c03 in range_to_str ./libsepol/src/kernel_to_conf.c:1926:9\n        #2 0x564c03 in write_user_decl_rules_to_conf ./libsepol/src/kernel_to_conf.c:2367:12\n        #3 0x55b137 in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3184:7\n        #4 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:38:9\n        #5 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #6 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #7 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #8 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #9 0x7f2c2e1a77ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #10 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c": [
          "File: libsepol/src/policydb_validate.c -> libsepol/src/policydb_validate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:  return validate_mls_level(level->level, &flavors[SYM_LEVELS], &flavors[SYM_CATS]);",
          "341: }",
          "344: {",
          "345:  if (validate_value(user->s.value, &flavors[SYM_USERS]))",
          "346:   goto bad;",
          "",
          "[Removed Lines]",
          "343: static int validate_user_datum(sepol_handle_t *handle, user_datum_t *user, validate_t flavors[])",
          "",
          "[Added Lines]",
          "343: static int validate_mls_range(mls_range_t *range, validate_t *sens, validate_t *cats)",
          "344: {",
          "345:  if (validate_mls_level(&range->level[0], sens, cats))",
          "346:   goto bad;",
          "347:  if (validate_mls_level(&range->level[1], sens, cats))",
          "348:   goto bad;",
          "350:  return 0;",
          "352:  bad:",
          "353:  return -1;",
          "354: }",
          "356: static int validate_user_datum(sepol_handle_t *handle, user_datum_t *user, validate_t flavors[], int mls)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:   goto bad;",
          "351:  if (validate_mls_semantic_level(&user->dfltlevel, &flavors[SYM_LEVELS], &flavors[SYM_CATS]))",
          "352:   goto bad;",
          "353:  if (user->bounds && validate_value(user->bounds, &flavors[SYM_USERS]))",
          "354:   goto bad;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:  if (mls && validate_mls_range(&user->exp_range, &flavors[SYM_LEVELS], &flavors[SYM_CATS]))",
          "367:   goto bad;",
          "368:  if (mls && validate_mls_level(&user->exp_dfltlevel, &flavors[SYM_LEVELS], &flavors[SYM_CATS]))",
          "369:   goto bad;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "364: {",
          "365:  map_arg_t *margs = args;",
          "368: }",
          "370: static int validate_datum_array_gaps(sepol_handle_t *handle, policydb_t *p, validate_t flavors[])",
          "",
          "[Removed Lines]",
          "367:  return validate_user_datum(margs->handle, d, margs->flavors);",
          "",
          "[Added Lines]",
          "384:  return validate_user_datum(margs->handle, d, margs->flavors, margs->mls);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "731540202a2a18436446d7fbe06fa0480f064c8b",
      "candidate_info": {
        "commit_hash": "731540202a2a18436446d7fbe06fa0480f064c8b",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/731540202a2a18436446d7fbe06fa0480f064c8b",
        "files": [
          "libsepol/src/kernel_to_cil.c",
          "libsepol/src/kernel_to_conf.c"
        ],
        "message": "libsepol: do not crash on user gaps\n\nHandle gaps in the user table while printing a policy configuration.\n\n    ==24424==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x0000004bdc55 bp 0x7ffc8790b810 sp 0x7ffc8790afb0 T0)\n    ==24424==The signal is caused by a READ memory access.\n    ==24424==Hint: address points to the zero page.\n        #0 0x4bdc55 in __interceptor_strcmp (./out/binpolicy-fuzzer+0x4bdc55)\n        #1 0x5ebdf6 in strs_cmp ./libsepol/src/kernel_to_common.c:253:9\n        #2 0x505669 in __interceptor_qsort (./out/binpolicy-fuzzer+0x505669)\n        #3 0x5ebd84 in strs_sort ./libsepol/src/kernel_to_common.c:261:2\n        #4 0x564550 in write_user_decl_rules_to_conf ./libsepol/src/kernel_to_conf.c:2333:2\n        #5 0x55b137 in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3190:7\n        #6 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:38:9\n        #7 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #8 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #9 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #10 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #11 0x7f530128d7ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #12 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/kernel_to_cil.c||libsepol/src/kernel_to_cil.c",
          "libsepol/src/kernel_to_conf.c||libsepol/src/kernel_to_conf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/kernel_to_cil.c||libsepol/src/kernel_to_cil.c": [
          "File: libsepol/src/kernel_to_cil.c -> libsepol/src/kernel_to_cil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2397:  }",
          "2399:  for (i=0; i < pdb->p_users.nprim; i++) {",
          "2400:   rc = strs_add(strs, pdb->p_user_val_to_name[i]);",
          "2401:   if (rc != 0) {",
          "2402:    goto exit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2400:   if (!pdb->p_user_val_to_name[i]) continue;",
          "",
          "---------------"
        ],
        "libsepol/src/kernel_to_conf.c||libsepol/src/kernel_to_conf.c": [
          "File: libsepol/src/kernel_to_conf.c -> libsepol/src/kernel_to_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2327:  }",
          "2329:  for (i=0; i < pdb->p_users.nprim; i++) {",
          "2330:   rc = strs_add(strs, pdb->p_user_val_to_name[i]);",
          "2331:   if (rc != 0) {",
          "2332:    goto exit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2330:   if (!pdb->p_user_val_to_name[i]) continue;",
          "",
          "---------------"
        ]
      }
    }
  ]
}