{
  "cve_id": "CVE-2017-15190",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.1, the RTSP dissector could crash. This was addressed in epan/dissectors/packet-rtsp.c by correcting the scope of a variable.",
  "repo": "wireshark/wireshark",
  "patch_hash": "e27870eaa6efa1c2dac08aa41a67fe9f0839e6e0",
  "patch_info": {
    "commit_hash": "e27870eaa6efa1c2dac08aa41a67fe9f0839e6e0",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/e27870eaa6efa1c2dac08aa41a67fe9f0839e6e0",
    "files": [
      "epan/dissectors/packet-rtsp.c"
    ],
    "message": "RTSP: fix stack use after scope error reported by ASan\n\nBug: 14077\nChange-Id: I9fa0e62fe354b1c18687ba9041029de97719343c\nReviewed-on: https://code.wireshark.org/review/23635\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c": [
      "File: epan/dissectors/packet-rtsp.c -> epan/dissectors/packet-rtsp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:     address   src_addr;",
      "532:     address   dst_addr;",
      "534:     if (rtsp_type_packet != RTSP_REPLY) {",
      "535:         return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "533:     guint32   ip4_addr;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "599:         else if (sscanf(tmp, \"\\\"%u.%u.%u.%u:%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4, &s_data_port) == 5) {",
      "600:             guchar *tmp2;",
      "601:             guchar *tmp3;",
      "605:             tmp++;",
      "",
      "[Removed Lines]",
      "602:             guint32 ip4_addr;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "616:         else if (sscanf(tmp, \"\\\"%u.%u.%u.%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4) == 4) {",
      "617:             guchar *tmp2;",
      "618:             guchar *tmp3;",
      "622:             tmp++;",
      "",
      "[Removed Lines]",
      "619:             guint32 ip4_addr;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "651:         if (sscanf(tmp, \"\\\"%u.%u.%u.%u:%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4, &c_data_port) == 5) {",
      "652:             guchar *tmp2;",
      "653:             guchar *tmp3;",
      "657:             tmp++;",
      "",
      "[Removed Lines]",
      "654:             guint32 ip4_addr;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c8589e9ad08334650a6d281c13edbe03f174b6a",
      "candidate_info": {
        "commit_hash": "8c8589e9ad08334650a6d281c13edbe03f174b6a",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/8c8589e9ad08334650a6d281c13edbe03f174b6a",
        "files": [
          "epan/dissectors/packet-rtsp.c"
        ],
        "message": "RTSP: fix stack use after scope error reported by ASan\n\nBug: 14077\nChange-Id: I9fa0e62fe354b1c18687ba9041029de97719343c\nReviewed-on: https://code.wireshark.org/review/23635\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\n(cherry picked from commit e27870eaa6efa1c2dac08aa41a67fe9f0839e6e0)\nReviewed-on: https://code.wireshark.org/review/23636",
        "before_after_code_files": [
          "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c": [
          "File: epan/dissectors/packet-rtsp.c -> epan/dissectors/packet-rtsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "531:     address   src_addr;",
          "532:     address   dst_addr;",
          "534:     if (rtsp_type_packet != RTSP_REPLY) {",
          "535:         return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "533:     guint32   ip4_addr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "599:         else if (sscanf(tmp, \"\\\"%u.%u.%u.%u:%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4, &s_data_port) == 5) {",
          "600:             guchar *tmp2;",
          "601:             guchar *tmp3;",
          "605:             tmp++;",
          "",
          "[Removed Lines]",
          "602:             guint32 ip4_addr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616:         else if (sscanf(tmp, \"\\\"%u.%u.%u.%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4) == 4) {",
          "617:             guchar *tmp2;",
          "618:             guchar *tmp3;",
          "622:             tmp++;",
          "",
          "[Removed Lines]",
          "619:             guint32 ip4_addr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "651:         if (sscanf(tmp, \"\\\"%u.%u.%u.%u:%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4, &c_data_port) == 5) {",
          "652:             guchar *tmp2;",
          "653:             guchar *tmp3;",
          "657:             tmp++;",
          "",
          "[Removed Lines]",
          "654:             guint32 ip4_addr;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a38cdeef7a8ae4435896606eeca85897d0d5829",
      "candidate_info": {
        "commit_hash": "1a38cdeef7a8ae4435896606eeca85897d0d5829",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/1a38cdeef7a8ae4435896606eeca85897d0d5829",
        "files": [
          "epan/dissectors/packet-rtsp.c"
        ],
        "message": "RTSP dissector: Decode RTP/AVP/TCP and configure RTP session for it\n\nrtsp_create_conversation was modified significantly:\n- ignore non response calls => process only the complete information\n- distinguish between UDP, TCP and RTSP interlaced media\n- supports ED137 recording with RTP/UDP or RTP/TCP\n\nIt was tested on many samples from bugzilla and from my library.\nTests noted in bug 13257\n\nBug: 13257\nChange-Id: I054505bcb9334c3abfff6d61c18c9cb6d2a6d56e\nReviewed-on: https://code.wireshark.org/review/19341\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtsp.c||epan/dissectors/packet-rtsp.c": [
          "File: epan/dissectors/packet-rtsp.c -> epan/dissectors/packet-rtsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <epan/packet.h>",
          "35: #include <epan/req_resp_hdrs.h>",
          "36: #include <epan/prefs.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <glib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: #include <epan/strutil.h>",
          "40: #include <epan/tap-voip.h>",
          "41: #include <epan/stats_tree.h>",
          "42: #include <wsutil/str_util.h>",
          "43: #include <wsutil/strtoi.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include <epan/addr_resolv.h>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142: static expert_field ei_rtsp_bad_interleaved_channel = EI_INIT;",
          "143: static expert_field ei_rtsp_content_length_invalid = EI_INIT;",
          "144: static expert_field ei_rtsp_rdtfeaturelevel_invalid = EI_INIT;",
          "146: static dissector_handle_t rtp_handle;",
          "147: static dissector_handle_t rtcp_handle;",
          "148: static dissector_handle_t rdt_handle;",
          "149: static dissector_table_t media_type_dissector_table;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147: static expert_field ei_rtsp_bad_server_ip_address = EI_INIT;",
          "148: static expert_field ei_rtsp_bad_client_ip_address = EI_INIT;",
          "151: static dissector_handle_t rtp_rfc4571_handle;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495: static const char rtsp_content_type[]      = \"Content-Type:\";",
          "496: static const char rtsp_transport[]         = \"Transport:\";",
          "500: static const char rtsp_rdt_feature_level[] = \"RDTFeatureLevel\";",
          "501: static const char rtsp_real_rdt[]          = \"x-real-rdt/\";",
          "",
          "[Removed Lines]",
          "497: static const char rtsp_sps[]               = \"server_port=\";",
          "498: static const char rtsp_cps[]               = \"client_port=\";",
          "499: static const char rtsp_rtp[]               = \"rtp/\";",
          "",
          "[Added Lines]",
          "502: static const char rtsp_sps_server_port[]   = \"server_port=\";",
          "503: static const char rtsp_cps_server_port[]   = \"client_port=\";",
          "504: static const char rtsp_sps_dest_addr[]     = \"dest_addr=\";",
          "505: static const char rtsp_cps_src_addr[]      = \"src_addr=\";",
          "506: static const char rtsp_rtp_udp_default[]   = \"rtp/avp\";",
          "507: static const char rtsp_rtp_udp[]           = \"rtp/avp/udp\";",
          "508: static const char rtsp_rtp_tcp[]           = \"rtp/avp/tcp\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "505: static void",
          "506: rtsp_create_conversation(packet_info *pinfo, proto_item *ti,",
          "507:                          const guchar *line_begin, size_t line_len,",
          "509: {",
          "510:     conversation_t  *conv;",
          "511:     guchar    buf[256];",
          "512:     guchar   *tmp;",
          "514:     gboolean  rdt_transport = FALSE;",
          "515:     guint     c_data_port, c_mon_port;",
          "516:     guint     s_data_port, s_mon_port;",
          "520:     if (line_len > sizeof(buf) - 1)",
          "",
          "[Removed Lines]",
          "508:                          gint rdt_feature_level)",
          "513:     gboolean  rtp_transport = FALSE;",
          "",
          "[Added Lines]",
          "517:                          gint rdt_feature_level,",
          "518:                          rtsp_type_t rtsp_type_packet)",
          "523:     gboolean  rtp_udp_transport = FALSE;",
          "524:     gboolean  rtp_tcp_transport = FALSE;",
          "528:     guint     ipv4_1, ipv4_2, ipv4_3, ipv4_4;",
          "530:     address   src_addr;",
          "531:     address   dst_addr;",
          "533:     if (rtsp_type_packet != RTSP_REPLY) {",
          "534:         return;",
          "535:     }",
          "537:     src_addr=pinfo->src;",
          "538:     dst_addr=pinfo->dst;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "531:         tmp++;",
          "539:         rdt_transport = TRUE;",
          "540:     else",
          "541:     {",
          "",
          "[Removed Lines]",
          "534:     if (g_ascii_strncasecmp(tmp, rtsp_rtp, strlen(rtsp_rtp)) == 0)",
          "535:         rtp_transport = TRUE;",
          "536:     else",
          "537:     if (g_ascii_strncasecmp(tmp, rtsp_real_rdt, strlen(rtsp_real_rdt)) == 0 ||",
          "538:         g_ascii_strncasecmp(tmp, rtsp_real_tng, strlen(rtsp_real_tng)) == 0)",
          "",
          "[Added Lines]",
          "555:     if (g_ascii_strncasecmp(tmp, rtsp_rtp_udp, strlen(rtsp_rtp_udp)) == 0)",
          "556:     {",
          "557:         rtp_udp_transport = TRUE;",
          "558:     }",
          "559:     else if (g_ascii_strncasecmp(tmp, rtsp_rtp_tcp, strlen(rtsp_rtp_tcp)) == 0)",
          "560:     {",
          "561:         rtp_tcp_transport = TRUE;",
          "562:     }",
          "563:     else if (g_ascii_strncasecmp(tmp, rtsp_rtp_udp_default, strlen(rtsp_rtp_udp_default)) == 0)",
          "564:     {",
          "565:         rtp_udp_transport = TRUE;",
          "566:     }",
          "567:     else if (g_ascii_strncasecmp(tmp, rtsp_real_rdt, strlen(rtsp_real_rdt)) == 0 ||",
          "568:                  g_ascii_strncasecmp(tmp, rtsp_real_tng, strlen(rtsp_real_tng)) == 0)",
          "569:     {",
          "571:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "548:     s_data_port = s_mon_port = 0;",
          "553:         if (sscanf(tmp, \"%u-%u\", &s_data_port, &s_mon_port) < 1) {",
          "554:             expert_add_info(pinfo, ti, &ei_rtsp_bad_server_port);",
          "555:             return;",
          "556:         }",
          "557:     }",
          "561:         if (sscanf(tmp, \"%u-%u\", &c_data_port, &c_mon_port) < 1) {",
          "562:             expert_add_info(pinfo, ti, &ei_rtsp_bad_client_port);",
          "563:             return;",
          "564:         }",
          "565:     }",
          "570:         rtsp_conversation_data_t    *data;",
          "571:         guint               s_data_chan, s_mon_chan;",
          "572:         int             i;",
          "584:         tmp += strlen(rtsp_inter);",
          "586:         i = sscanf(tmp, \"%u-%u\", &s_data_chan, &s_mon_chan);",
          "",
          "[Removed Lines]",
          "551:     if ((tmp = strstr(buf, rtsp_sps))) {",
          "552:         tmp += strlen(rtsp_sps);",
          "559:     if ((tmp = strstr(buf, rtsp_cps))) {",
          "560:         tmp += strlen(rtsp_cps);",
          "569:     if (!c_data_port) {",
          "575:         if ((tmp = strstr(buf, rtsp_inter)) == NULL) {",
          "580:             return;",
          "581:         }",
          "",
          "[Added Lines]",
          "583:     if ((tmp = strstr(buf, rtsp_sps_server_port))) {",
          "584:         tmp += strlen(rtsp_sps_server_port);",
          "590:     else if ((tmp = strstr(buf, rtsp_sps_dest_addr))) {",
          "591:         tmp += strlen(rtsp_sps_dest_addr);",
          "592:         if (sscanf(tmp, \"\\\":%u\\\"\", &s_data_port) == 1) {",
          "594:             if (s_data_port == 9) {",
          "595:                 s_data_port = 0;",
          "596:             }",
          "597:         }",
          "598:         else if (sscanf(tmp, \"\\\"%u.%u.%u.%u:%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4, &s_data_port) == 5) {",
          "599:             guchar *tmp2;",
          "600:             guchar *tmp3;",
          "601:             guint32 ip4_addr;",
          "604:             tmp++;",
          "605:             tmp2=strstr(tmp,\":\");",
          "606:             tmp3=g_strndup(tmp,tmp2-tmp);",
          "607:             if (!str_to_ip(tmp3, &ip4_addr)) {",
          "608:                 g_free(tmp3);",
          "609:                 expert_add_info(pinfo, ti, &ei_rtsp_bad_server_ip_address);",
          "610:                 return;",
          "611:             }",
          "612:             set_address(&dst_addr, AT_IPv4, 4, &ip4_addr);",
          "613:             g_free(tmp3);",
          "614:         }",
          "615:         else if (sscanf(tmp, \"\\\"%u.%u.%u.%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4) == 4) {",
          "616:             guchar *tmp2;",
          "617:             guchar *tmp3;",
          "618:             guint32 ip4_addr;",
          "621:             tmp++;",
          "622:             tmp2=strstr(tmp,\"\\\"\");",
          "623:             tmp3=g_strndup(tmp,tmp2-tmp);",
          "624:             if (!str_to_ip(tmp3, &ip4_addr)) {",
          "625:                 g_free(tmp3);",
          "626:                 expert_add_info(pinfo, ti, &ei_rtsp_bad_server_ip_address);",
          "627:                 return;",
          "628:             }",
          "629:             set_address(&dst_addr, AT_IPv4, 4, &ip4_addr);",
          "630:             g_free(tmp3);",
          "631:         }",
          "632:         else",
          "633:         {",
          "634:             expert_add_info(pinfo, ti, &ei_rtsp_bad_server_port);",
          "635:             return;",
          "636:         }",
          "637:     }",
          "641:     if ((tmp = strstr(buf, rtsp_cps_server_port))) {",
          "642:         tmp += strlen(rtsp_cps_server_port);",
          "648:     else if ((tmp = strstr(buf, rtsp_cps_src_addr))) {",
          "649:         tmp += strlen(rtsp_cps_src_addr);",
          "650:         if (sscanf(tmp, \"\\\"%u.%u.%u.%u:%u\\\"\", &ipv4_1, &ipv4_2, &ipv4_3, &ipv4_4, &c_data_port) == 5) {",
          "651:             guchar *tmp2;",
          "652:             guchar *tmp3;",
          "653:             guint32 ip4_addr;",
          "656:             tmp++;",
          "657:             tmp2=strstr(tmp,\":\");",
          "658:             tmp3=g_strndup(tmp,tmp2-tmp);",
          "659:             if (!str_to_ip(tmp3, &ip4_addr)) {",
          "660:                 g_free(tmp3);",
          "661:                 expert_add_info(pinfo, ti, &ei_rtsp_bad_client_ip_address);",
          "662:                 return;",
          "663:             }",
          "664:             set_address(&src_addr, AT_IPv4, 4, &ip4_addr);",
          "665:             g_free(tmp3);",
          "666:         }",
          "667:     }",
          "670:     if (strstr(buf, rtsp_inter) != NULL) {",
          "676:         tmp = strstr(buf, rtsp_inter);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "609:         {",
          "610:             if (s_data_chan < RTSP_MAX_INTERLEAVED) {",
          "611:                 data->interleaved[s_data_chan].dissector =",
          "",
          "[Removed Lines]",
          "608:         if (rtp_transport)",
          "",
          "[Added Lines]",
          "701:         if (rtp_tcp_transport)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "637:     {",
          "643:         if (c_mon_port)",
          "",
          "[Removed Lines]",
          "636:     if (rtp_transport)",
          "639:         rtp_add_address(pinfo, PT_UDP, &pinfo->dst, c_data_port, s_data_port,",
          "640:                         \"RTSP\", pinfo->num, is_video, NULL);",
          "",
          "[Added Lines]",
          "729:     else if (rtp_udp_transport)",
          "732:         if (c_data_port)",
          "733:         {",
          "734:             rtp_add_address(pinfo, PT_UDP, &dst_addr, c_data_port, s_data_port,",
          "735:                             \"RTSP\", pinfo->num, is_video, NULL);",
          "736:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "646:                              \"RTSP\", pinfo->num);",
          "647:         }",
          "648:     }",
          "651:     {",
          "653:         rdt_add_address(pinfo, &pinfo->dst, c_data_port, s_data_port,",
          "",
          "[Removed Lines]",
          "649:     else",
          "650:     if (rdt_transport)",
          "",
          "[Added Lines]",
          "745:     else if (rtp_tcp_transport)",
          "746:     {",
          "748:         rtp_add_address(pinfo, PT_TCP, &src_addr, c_data_port, s_data_port,",
          "749:                         \"RTSP\", pinfo->num, is_video, NULL);",
          "750:     }",
          "751:     else if (rdt_transport)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "707:     gboolean      body_requires_content_len;",
          "708:     gboolean      saw_req_resp_or_header;",
          "709:     guchar        c;",
          "711:     gboolean      is_header;",
          "712:     int           datalen;",
          "713:     int           content_length;",
          "",
          "[Removed Lines]",
          "710:     rtsp_type_t   rtsp_type;",
          "",
          "[Added Lines]",
          "811:     rtsp_type_t   rtsp_type_packet;",
          "812:     rtsp_type_t   rtsp_type_line;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "745:     line = tvb_get_ptr(tvb, offset, first_linelen);",
          "746:     is_request_or_reply = is_rtsp_request_or_reply(line, first_linelen,",
          "748:     if (is_request_or_reply) {",
          "",
          "[Removed Lines]",
          "747:         &rtsp_type);",
          "",
          "[Added Lines]",
          "849:         &rtsp_type_packet);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "786:         body_requires_content_len = TRUE;",
          "787:     else",
          "788:         body_requires_content_len = FALSE;",
          "790:     line = tvb_get_ptr(tvb, offset, first_linelen);",
          "791:     if (is_request_or_reply) {",
          "793:             frame_label = wmem_strdup_printf(wmem_packet_scope(),",
          "794:                   \"Reply: %s\", format_text(line, first_linelen));",
          "795:         }",
          "",
          "[Removed Lines]",
          "785:     if (rtsp_type == RTSP_REQUEST)",
          "792:         if ( rtsp_type == RTSP_REPLY ) {",
          "",
          "[Added Lines]",
          "887:     if (rtsp_type_packet == RTSP_REQUEST)",
          "894:         if ( rtsp_type_packet == RTSP_REPLY ) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "813:     if (is_request_or_reply)",
          "815:             col_set_str(pinfo->cinfo, COL_INFO, \"Reply: \");",
          "816:             col_append_str(pinfo->cinfo, COL_INFO,",
          "817:                 format_text(line, first_linelen));",
          "",
          "[Removed Lines]",
          "814:         if ( rtsp_type == RTSP_REPLY ) {",
          "",
          "[Added Lines]",
          "916:         if ( rtsp_type_packet == RTSP_REPLY ) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "872:         if (is_request_or_reply)",
          "873:             goto is_rtsp;",
          "",
          "[Removed Lines]",
          "871:         is_request_or_reply = is_rtsp_request_or_reply(line, linelen, &rtsp_type);",
          "",
          "[Added Lines]",
          "973:         is_request_or_reply = is_rtsp_request_or_reply(line, linelen, &rtsp_type_line);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "995:         saw_req_resp_or_header = TRUE;",
          "996:         if (rtsp_tree) {",
          "999:             {",
          "1000:                 case RTSP_REQUEST:",
          "1001:                     process_rtsp_request(tvb, offset, line, linelen, next_offset, rtsp_tree);",
          "",
          "[Removed Lines]",
          "998:             switch (rtsp_type)",
          "",
          "[Added Lines]",
          "1100:             switch (rtsp_type_line)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1049:             } else if (HDR_MATCHES(rtsp_content_type))",
          "1050:             {",
          "1051:                 proto_tree_add_string(rtsp_tree, hf_rtsp_content_type,",
          "",
          "[Removed Lines]",
          "1048:                 rtsp_create_conversation(pinfo, ti, line, linelen, rdt_feature_level);",
          "",
          "[Added Lines]",
          "1150:                 rtsp_create_conversation(pinfo, ti, line, linelen, rdt_feature_level, rtsp_type_packet);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1132:                 proto_tree_add_format_text(rtsp_tree, tvb, offset, next_offset - offset);",
          "1133:             }",
          "1134:         }",
          "1136:         {",
          "",
          "[Removed Lines]",
          "1135:         else if (rtsp_type == RTSP_NOT_FIRST_LINE)",
          "",
          "[Added Lines]",
          "1237:         else if (rtsp_type_line == RTSP_NOT_FIRST_LINE)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1459:         { &ei_rtsp_content_length_invalid,",
          "1460:           { \"rtsp.content-length.invalid\", PI_MALFORMED, PI_ERROR, \"Invalid content length\", EXPFILL }},",
          "1461:         { &ei_rtsp_rdtfeaturelevel_invalid,",
          "1463:     };",
          "1465:     module_t *rtsp_module;",
          "",
          "[Removed Lines]",
          "1462:           { \"rtsp.rdt-feature-level.invalid\", PI_MALFORMED, PI_ERROR, \"Invalid RDTFeatureLevel\", EXPFILL }}",
          "",
          "[Added Lines]",
          "1564:           { \"rtsp.rdt-feature-level.invalid\", PI_MALFORMED, PI_ERROR, \"Invalid RDTFeatureLevel\", EXPFILL }},",
          "1565:         { &ei_rtsp_bad_server_ip_address,",
          "1566:           { \"rtsp.bad_client_ip_address\", PI_MALFORMED, PI_ERROR, \"Bad server IP address\", EXPFILL }},",
          "1567:         { &ei_rtsp_bad_client_ip_address,",
          "1568:           { \"rtsp.bad_client_ip_address\", PI_MALFORMED, PI_ERROR, \"Bad client IP address\", EXPFILL }}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1516:     rtsp_handle = find_dissector(\"rtsp\");",
          "1517:     rtp_handle = find_dissector_add_dependency(\"rtp\", proto_rtsp);",
          "1518:     rtcp_handle = find_dissector_add_dependency(\"rtcp\", proto_rtsp);",
          "1519:     rdt_handle = find_dissector_add_dependency(\"rdt\", proto_rtsp);",
          "1520:     media_type_dissector_table = find_dissector_table(\"media_type\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1624:     rtp_rfc4571_handle = find_dissector_add_dependency(\"rtp.rfc4571\", proto_rtsp);",
          "",
          "---------------"
        ]
      }
    }
  ]
}