{
  "cve_id": "CVE-2018-15858",
  "cve_desc": "Unchecked NULL pointer usage when handling invalid aliases in CopyKeyAliasesToKeymap in xkbcomp/keycodes.c in xkbcommon before 0.8.1 could be used by local attackers to crash (NULL pointer dereference) the xkbcommon parser by supplying a crafted keymap file.",
  "repo": "xkbcommon/libxkbcommon",
  "patch_hash": "badb428e63387140720f22486b3acbd3d738859f",
  "patch_info": {
    "commit_hash": "badb428e63387140720f22486b3acbd3d738859f",
    "repo": "xkbcommon/libxkbcommon",
    "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/badb428e63387140720f22486b3acbd3d738859f",
    "files": [
      "src/xkbcomp/keycodes.c"
    ],
    "message": "keycodes: don't try to copy zero key aliases\n\nMove the aliases copy to within the (num_key_aliases > 0) block.\n\nPassing info->aliases into this fuction with invalid aliases will\ncause log messages but num_key_aliases stays on 0. The key_aliases array\nis never allocated and remains NULL. We then loop through the aliases, causing\na null-pointer dereference.\n\nSigned-off-by: Peter Hutterer <peter.hutterer@who-t.net>",
    "before_after_code_files": [
      "src/xkbcomp/keycodes.c||src/xkbcomp/keycodes.c"
    ]
  },
  "patch_diff": {
    "src/xkbcomp/keycodes.c||src/xkbcomp/keycodes.c": [
      "File: src/xkbcomp/keycodes.c -> src/xkbcomp/keycodes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "596:         key_aliases = calloc(num_key_aliases, sizeof(*key_aliases));",
      "597:         if (!key_aliases)",
      "598:             return false;",
      "607:         }",
      "608:     }",
      "",
      "[Removed Lines]",
      "599:     }",
      "601:     i = 0;",
      "602:     darray_foreach(alias, info->aliases) {",
      "603:         if (alias->real != XKB_ATOM_NONE) {",
      "604:             key_aliases[i].alias = alias->alias;",
      "605:             key_aliases[i].real = alias->real;",
      "606:             i++;",
      "",
      "[Added Lines]",
      "600:         i = 0;",
      "601:         darray_foreach(alias, info->aliases) {",
      "602:             if (alias->real != XKB_ATOM_NONE) {",
      "603:                 key_aliases[i].alias = alias->alias;",
      "604:                 key_aliases[i].real = alias->real;",
      "605:                 i++;",
      "606:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c1e5ac16e77a21f87bdf3bc4dea61b037a17dddb",
      "candidate_info": {
        "commit_hash": "c1e5ac16e77a21f87bdf3bc4dea61b037a17dddb",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/c1e5ac16e77a21f87bdf3bc4dea61b037a17dddb",
        "files": [
          "src/xkbcomp/ast-build.c"
        ],
        "message": "xkbcomp: fix pointer value for FreeStmt\n\nSigned-off-by: Peter Hutterer <peter.hutterer@who-t.net>",
        "before_after_code_files": [
          "src/xkbcomp/ast-build.c||src/xkbcomp/ast-build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/66"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/xkbcomp/ast-build.c||src/xkbcomp/ast-build.c": [
          "File: src/xkbcomp/ast-build.c -> src/xkbcomp/ast-build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:     darray_append(expr->keysym_list.symsNumEntries, numEntries);",
          "241:     darray_concat(expr->keysym_list.syms, append->keysym_list.syms);",
          "245:     return expr;",
          "246: }",
          "",
          "[Removed Lines]",
          "243:     FreeStmt((ParseCommon *) &append);",
          "",
          "[Added Lines]",
          "243:     FreeStmt((ParseCommon *) append);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c81682975d46030365da4e6c529f547a71014cee",
      "candidate_info": {
        "commit_hash": "c81682975d46030365da4e6c529f547a71014cee",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/c81682975d46030365da4e6c529f547a71014cee",
        "files": [
          "src/xkbcomp/action.c"
        ],
        "message": "action: make a note that we may not null-terminate private strings\n\nCoverity complains that a 7-byte string may not be null-terminated when copied\ninto act->data (size 7). This is fine, make a note of it.\n\nAll the strings in xkeyboard-config only use 6 bytes + null terminator so this\nwon't be an issue. The server (the only user of these) uses an 8-byte array\nand forcibly null-terminates the string, see XkbDDXPrivate().\n\nEverything else treats it as byte-array size 7 anyway so whether it's\nnull-terminated doesn't matter.\n\nSigned-off-by: Peter Hutterer <peter.hutterer@who-t.net>",
        "before_after_code_files": [
          "src/xkbcomp/action.c||src/xkbcomp/action.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/66"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/xkbcomp/action.c||src/xkbcomp/action.c": [
          "File: src/xkbcomp/action.c -> src/xkbcomp/action.c"
        ]
      }
    },
    {
      "candidate_hash": "9045b035981e4273ddbb64bfb31577bbf92d8597",
      "candidate_info": {
        "commit_hash": "9045b035981e4273ddbb64bfb31577bbf92d8597",
        "repo": "xkbcommon/libxkbcommon",
        "commit_url": "https://github.com/xkbcommon/libxkbcommon/commit/9045b035981e4273ddbb64bfb31577bbf92d8597",
        "files": [
          "src/text.c"
        ],
        "message": "text: init the target buffer to zero\n\nThere's a (theoretical?) path where we might end up strcpy() buf without ever\nwriting to it. This happens if the mask is nonzero but specifies a modifier\nlarger than the one in the xkb_mod_set.\n\nSigned-off-by: Peter Hutterer <peter.hutterer@who-t.net>",
        "before_after_code_files": [
          "src/text.c||src/text.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/xkbcommon/libxkbcommon/pull/66"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/text.c||src/text.c": [
          "File: src/text.c -> src/text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254: ModMaskText(struct xkb_context *ctx, const struct xkb_mod_set *mods,",
          "255:             xkb_mod_mask_t mask)",
          "256: {",
          "258:     size_t pos = 0;",
          "259:     xkb_mod_index_t i;",
          "260:     const struct xkb_mod *mod;",
          "",
          "[Removed Lines]",
          "257:     char buf[1024];",
          "",
          "[Added Lines]",
          "257:     char buf[1024] = {0};",
          "",
          "---------------"
        ]
      }
    }
  ]
}