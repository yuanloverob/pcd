{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "685b2ee0c3e4cfafe0e3e8d121fb302d673d011f",
      "candidate_info": {
        "commit_hash": "685b2ee0c3e4cfafe0e3e8d121fb302d673d011f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/685b2ee0c3e4cfafe0e3e8d121fb302d673d011f",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Allow fts5 to filter on multiple MATCH clauses in a single scan.\n\nFossilOrigin-Name: 9d418a7a491761eeb38a70898677a493e2631e5d62e75ee88431f52d3dfd2344",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test",
          "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test",
          "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "695: i64 sqlite3Fts5ExprRowid(Fts5Expr*);",
          "697: void sqlite3Fts5ExprFree(Fts5Expr*);",
          "700: int sqlite3Fts5ExprInit(Fts5Global*, sqlite3*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "698: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:   }",
          "310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: int sqlite3Fts5ExprAnd(Fts5Expr **pp1, Fts5Expr *p2){",
          "313:   Fts5Parse sParse;",
          "314:   memset(&sParse, 0, sizeof(sParse));",
          "316:   if( *pp1 ){",
          "317:     Fts5Expr *p1 = *pp1;",
          "318:     int nPhrase = p1->nPhrase + p2->nPhrase;",
          "320:     p1->pRoot = sqlite3Fts5ParseNode(&sParse, FTS5_AND, p1->pRoot, p2->pRoot,0);",
          "321:     p2->pRoot = 0;",
          "323:     if( sParse.rc==SQLITE_OK ){",
          "324:       Fts5ExprPhrase **ap = (Fts5ExprPhrase**)sqlite3_realloc(",
          "325:           p1->apExprPhrase, nPhrase * sizeof(Fts5ExprPhrase*)",
          "326:       );",
          "327:       if( ap==0 ){",
          "328:         sParse.rc = SQLITE_NOMEM;",
          "329:       }else{",
          "330:         int i;",
          "331:         memmove(&ap[p2->nPhrase], ap, p1->nPhrase*sizeof(Fts5ExprPhrase*));",
          "332:         for(i=0; i<p2->nPhrase; i++){",
          "333:           ap[i] = p2->apExprPhrase[i];",
          "334:         }",
          "335:         p1->nPhrase = nPhrase;",
          "336:         p1->apExprPhrase = ap;",
          "337:       }",
          "338:     }",
          "339:     sqlite3_free(p2->apExprPhrase);",
          "340:     sqlite3_free(p2);",
          "341:   }else{",
          "343:   }",
          "345:   return sParse.rc;",
          "346: }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:   Fts5Config *pConfig = pTab->pConfig;",
          "504:   const int nCol = pConfig->nCol;",
          "508:   int i;",
          "533:   assert( SQLITE_INDEX_CONSTRAINT_EQ<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "534:   assert( SQLITE_INDEX_CONSTRAINT_GT<SQLITE_INDEX_CONSTRAINT_MATCH );",
          "",
          "[Removed Lines]",
          "506:   int bHasMatch;",
          "507:   int iNext;",
          "510:   struct Constraint {",
          "516:   } aConstraint[] = {",
          "517:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "518:                                     FTS5_BI_MATCH,    1, 1, -1},",
          "519:     {SQLITE_INDEX_CONSTRAINT_MATCH|SQLITE_INDEX_CONSTRAINT_EQ,",
          "520:                                     FTS5_BI_RANK,     2, 1, -1},",
          "521:     {SQLITE_INDEX_CONSTRAINT_EQ,    FTS5_BI_ROWID_EQ, 0, 0, -1},",
          "522:     {SQLITE_INDEX_CONSTRAINT_LT|SQLITE_INDEX_CONSTRAINT_LE,",
          "523:                                     FTS5_BI_ROWID_LE, 0, 0, -1},",
          "524:     {SQLITE_INDEX_CONSTRAINT_GT|SQLITE_INDEX_CONSTRAINT_GE,",
          "525:                                     FTS5_BI_ROWID_GE, 0, 0, -1},",
          "526:   };",
          "528:   int aColMap[3];",
          "529:   aColMap[0] = -1;",
          "530:   aColMap[1] = nCol;",
          "531:   aColMap[2] = nCol+1;",
          "",
          "[Added Lines]",
          "530:   char *idxStr;",
          "531:   int iIdxStr = 0;",
          "532:   int iCons = 0;",
          "534:   int bSeenEq = 0;",
          "535:   int bSeenGt = 0;",
          "536:   int bSeenLt = 0;",
          "537:   int bSeenMatch = 0;",
          "538:   int bSeenRank = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "543:     return SQLITE_ERROR;",
          "544:   }",
          "547:   for(i=0; i<pInfo->nConstraint; i++){",
          "548:     struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "549:     int iCol = p->iColumn;",
          "553:     ){",
          "561:         pInfo->estimatedCost = 1e50;",
          "562:         return SQLITE_OK;",
          "563:       }",
          "571:         }",
          "572:       }",
          "573:     }",
          "574:   }",
          "577:   if( pInfo->nOrderBy==1 ){",
          "578:     int iSort = pInfo->aOrderBy[0].iColumn;",
          "580:       idxFlags |= FTS5_BI_ORDER_RANK;",
          "581:     }else if( iSort==-1 ){",
          "582:       idxFlags |= FTS5_BI_ORDER_ROWID;",
          "",
          "[Removed Lines]",
          "551:     if( (p->op==SQLITE_INDEX_CONSTRAINT_MATCH && iCol>=0 && iCol<=nCol)",
          "552:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol==nCol)",
          "555:       if( p->usable ){",
          "556:         idxFlags = (idxFlags & 0xFFFF) | FTS5_BI_MATCH | (iCol << 16);",
          "557:         aConstraint[0].iConsIndex = i;",
          "558:       }else{",
          "564:     }else if( p->op<=SQLITE_INDEX_CONSTRAINT_MATCH ){",
          "565:       int j;",
          "566:       for(j=1; j<ArraySize(aConstraint); j++){",
          "567:         struct Constraint *pC = &aConstraint[j];",
          "568:         if( iCol==aColMap[pC->iCol] && (p->op & pC->op) && p->usable ){",
          "569:           pC->iConsIndex = i;",
          "570:           idxFlags |= pC->fts5op;",
          "579:     if( iSort==(pConfig->nCol+1) && BitFlagTest(idxFlags, FTS5_BI_MATCH) ){",
          "",
          "[Added Lines]",
          "554:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 6 + 1);",
          "555:   if( idxStr==0 ) return SQLITE_NOMEM;",
          "556:   pInfo->idxStr = idxStr;",
          "557:   pInfo->needToFreeIdxStr = 1;",
          "562:     if( p->op==SQLITE_INDEX_CONSTRAINT_MATCH",
          "563:      || (p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol>=nCol)",
          "566:       if( p->usable==0 || iCol<0 ){",
          "571:       }else{",
          "572:         if( iCol==nCol+1 ){",
          "573:           if( bSeenRank ) continue;",
          "574:           idxStr[iIdxStr++] = 'r';",
          "575:           bSeenRank = 1;",
          "576:         }else{",
          "577:           bSeenMatch = 1;",
          "578:           idxStr[iIdxStr++] = 'm';",
          "579:           if( iCol<nCol ){",
          "580:             sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "581:             idxStr += strlen(&idxStr[iIdxStr]);",
          "582:             assert( idxStr[iIdxStr]=='\\0' );",
          "583:           }",
          "584:         }",
          "585:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "586:         pInfo->aConstraintUsage[i].omit = 1;",
          "588:     }",
          "589:     else if( p->usable && bSeenEq==0",
          "590:       && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0",
          "591:     ){",
          "592:       idxStr[iIdxStr++] = '=';",
          "593:       bSeenEq = 1;",
          "594:       pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "595:     }",
          "596:   }",
          "598:   if( bSeenEq==0 ){",
          "599:     for(i=0; i<pInfo->nConstraint; i++){",
          "600:       struct sqlite3_index_constraint *p = &pInfo->aConstraint[i];",
          "601:       if( p->iColumn<0 && p->usable ){",
          "602:         int op = p->op;",
          "603:         if( op==SQLITE_INDEX_CONSTRAINT_LT || op==SQLITE_INDEX_CONSTRAINT_LE ){",
          "604:           if( bSeenLt ) continue;",
          "605:           idxStr[iIdxStr++] = '<';",
          "606:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "607:           bSeenLt = 1;",
          "608:         }else",
          "609:         if( op==SQLITE_INDEX_CONSTRAINT_GT || op==SQLITE_INDEX_CONSTRAINT_GE ){",
          "610:           if( bSeenGt ) continue;",
          "611:           idxStr[iIdxStr++] = '>';",
          "612:           pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "613:           bSeenGt = 1;",
          "618:   idxStr[iIdxStr] = '\\0';",
          "623:     if( iSort==(pConfig->nCol+1) && bSeenMatch ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:   }",
          "601:   }else{",
          "613:   }",
          "615:   pInfo->idxNum = idxFlags;",
          "",
          "[Removed Lines]",
          "593:   bHasMatch = BitFlagTest(idxFlags, FTS5_BI_MATCH);",
          "594:   if( BitFlagTest(idxFlags, FTS5_BI_ROWID_EQ) ){",
          "595:     pInfo->estimatedCost = bHasMatch ? 100.0 : 10.0;",
          "596:     if( bHasMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "597:   }else if( BitFlagAllTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "598:     pInfo->estimatedCost = bHasMatch ? 500.0 : 250000.0;",
          "599:   }else if( BitFlagTest(idxFlags, FTS5_BI_ROWID_LE|FTS5_BI_ROWID_GE) ){",
          "600:     pInfo->estimatedCost = bHasMatch ? 750.0 : 750000.0;",
          "602:     pInfo->estimatedCost = bHasMatch ? 1000.0 : 1000000.0;",
          "603:   }",
          "606:   iNext = 1;",
          "607:   for(i=0; i<ArraySize(aConstraint); i++){",
          "608:     struct Constraint *pC = &aConstraint[i];",
          "609:     if( pC->iConsIndex>=0 ){",
          "610:       pInfo->aConstraintUsage[pC->iConsIndex].argvIndex = iNext++;",
          "611:       pInfo->aConstraintUsage[pC->iConsIndex].omit = (unsigned char)pC->omit;",
          "612:     }",
          "",
          "[Added Lines]",
          "637:   if( bSeenEq ){",
          "638:     pInfo->estimatedCost = bSeenMatch ? 100.0 : 10.0;",
          "639:     if( bSeenMatch==0 ) fts5SetUniqueFlag(pInfo);",
          "640:   }else if( bSeenLt && bSeenGt ){",
          "641:     pInfo->estimatedCost = bSeenMatch ? 500.0 : 250000.0;",
          "642:   }else if( bSeenLt || bSeenGt ){",
          "643:     pInfo->estimatedCost = bSeenMatch ? 750.0 : 750000.0;",
          "645:     pInfo->estimatedCost = bSeenMatch ? 1000.0 : 1000000.0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1152:   char **pzErrmsg = pConfig->pzErrmsg;",
          "1157:   if( pCsr->ePlan ){",
          "1158:     fts5FreeCursorComponents(pCsr);",
          "",
          "[Removed Lines]",
          "1154:   UNUSED_PARAM(zUnused);",
          "1155:   UNUSED_PARAM(nVal);",
          "",
          "[Added Lines]",
          "1185:   int i;",
          "1186:   int iIdxStr = 0;",
          "1187:   Fts5Expr *pExpr = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1165:   assert( pCsr->pRank==0 );",
          "1166:   assert( pCsr->zRank==0 );",
          "1167:   assert( pCsr->zRankArgs==0 );",
          "1169:   assert( pzErrmsg==0 || pzErrmsg==&pTab->p.base.zErrMsg );",
          "1170:   pConfig->pzErrmsg = &pTab->p.base.zErrMsg;",
          "1185:   bOrderByRank = ((idxNum & FTS5_BI_ORDER_RANK) ? 1 : 0);",
          "1186:   pCsr->bDesc = bDesc = ((idxNum & FTS5_BI_ORDER_DESC) ? 1 : 0);",
          "",
          "[Removed Lines]",
          "1177:   if( BitFlagTest(idxNum, FTS5_BI_MATCH) ) pMatch = apVal[iVal++];",
          "1178:   if( BitFlagTest(idxNum, FTS5_BI_RANK) ) pRank = apVal[iVal++];",
          "1179:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_EQ) ) pRowidEq = apVal[iVal++];",
          "1180:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_LE) ) pRowidLe = apVal[iVal++];",
          "1181:   if( BitFlagTest(idxNum, FTS5_BI_ROWID_GE) ) pRowidGe = apVal[iVal++];",
          "1182:   iCol = (idxNum>>16);",
          "1183:   assert( iCol>=0 && iCol<=pConfig->nCol );",
          "1184:   assert( iVal==nVal );",
          "",
          "[Added Lines]",
          "1200:   assert( pTab->pSortCsr==0 || nVal==0 );",
          "1206:   for(i=0; i<nVal; i++){",
          "1207:     switch( idxStr[iIdxStr++] ){",
          "1208:       case 'r':",
          "1209:         pRank = apVal[i];",
          "1210:         break;",
          "1211:       case 'm': {",
          "1212:         char *zText = sqlite3_value_text(apVal[i]);",
          "1213:         if( zText==0 ) zText = \"\";",
          "1215:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "1216:           iCol = 0;",
          "1217:           do{",
          "1218:             iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1219:             iIdxStr++;",
          "1220:           }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1221:         }else{",
          "1222:           iCol = pConfig->nCol;",
          "1223:         }",
          "1225:         if( zText[0]=='*' ){",
          "1229:           rc = fts5SpecialMatch(pTab, pCsr, &zText[1]);",
          "1230:           goto filter_out;",
          "1231:         }else{",
          "1232:           char **pzErr = &pTab->p.base.zErrMsg;",
          "1233:           rc = sqlite3Fts5ExprNew(pConfig, iCol, zText, &pExpr, pzErr);",
          "1234:           if( rc==SQLITE_OK ){",
          "1235:             rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1236:             pExpr = 0;",
          "1237:           }",
          "1238:           if( rc!=SQLITE_OK ) goto filter_out;",
          "1239:         }",
          "1241:         break;",
          "1242:       }",
          "1243:       case '=':",
          "1244:         pRowidEq = apVal[i];",
          "1245:         break;",
          "1246:       case '<':",
          "1247:         pRowidLe = apVal[i];",
          "1248:         break;",
          "1249:       default: assert( idxStr[iIdxStr-1]=='>' );",
          "1250:         pRowidGe = apVal[i];",
          "1251:         break;",
          "1252:     }",
          "1253:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1221:     pCsr->ePlan = FTS5_PLAN_SOURCE;",
          "1222:     pCsr->pExpr = pTab->pSortCsr->pExpr;",
          "1223:     rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1228:     rc = fts5CursorParseRank(pConfig, pCsr, pRank);",
          "1229:     if( rc==SQLITE_OK ){",
          "1235:       }else{",
          "1247:       }",
          "1248:     }",
          "1249:   }else if( pConfig->zContent==0 ){",
          "",
          "[Removed Lines]",
          "1224:   }else if( pMatch ){",
          "1225:     const char *zExpr = (const char*)sqlite3_value_text(apVal[0]);",
          "1226:     if( zExpr==0 ) zExpr = \"\";",
          "1230:       if( zExpr[0]=='*' ){",
          "1234:         rc = fts5SpecialMatch(pTab, pCsr, &zExpr[1]);",
          "1236:         char **pzErr = &pTab->p.base.zErrMsg;",
          "1237:         rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, &pCsr->pExpr, pzErr);",
          "1238:         if( rc==SQLITE_OK ){",
          "1239:           if( bOrderByRank ){",
          "1240:             pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1241:             rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1242:           }else{",
          "1243:             pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1244:             rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "1245:           }",
          "1246:         }",
          "",
          "[Added Lines]",
          "1293:   }else if( pCsr->pExpr ){",
          "1296:       if( bOrderByRank ){",
          "1297:         pCsr->ePlan = FTS5_PLAN_SORTED_MATCH;",
          "1298:         rc = fts5CursorFirstSorted(pTab, pCsr, bDesc);",
          "1300:         pCsr->ePlan = FTS5_PLAN_MATCH;",
          "1301:         rc = fts5CursorFirst(pTab, pCsr, bDesc);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1260:     );",
          "1261:     if( rc==SQLITE_OK ){",
          "1262:       if( pCsr->ePlan==FTS5_PLAN_ROWID ){",
          "1264:       }else{",
          "1265:         sqlite3_bind_int64(pCsr->pStmt, 1, pCsr->iFirstRowid);",
          "1266:         sqlite3_bind_int64(pCsr->pStmt, 2, pCsr->iLastRowid);",
          "",
          "[Removed Lines]",
          "1263:         sqlite3_bind_value(pCsr->pStmt, 1, apVal[0]);",
          "",
          "[Added Lines]",
          "1318:         sqlite3_bind_value(pCsr->pStmt, 1, pRowidEq);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1269:     }",
          "1270:   }",
          "1272:   pConfig->pzErrmsg = pzErrmsg;",
          "1273:   return rc;",
          "1274: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1327:  filter_out:",
          "1328:   sqlite3Fts5ExprFree(pExpr);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultB.test||ext/fts5/test/fts5faultB.test": [
          "File: ext/fts5/test/fts5faultB.test -> ext/fts5/test/fts5faultB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   faultsim_test_result {0 {1 4}}",
          "148: }",
          "151: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150: #-------------------------------------------------------------------------",
          "151: # Test OOM injection in a query with two MATCH expressions",
          "152: #",
          "153: reset_db",
          "154: do_execsql_test 6.0 {",
          "155:   CREATE VIRTUAL TABLE t1 USING fts5(a);",
          "156:   INSERT INTO t1 VALUES('a b c d');  -- 1",
          "157:   INSERT INTO t1 VALUES('d a b c');  -- 2",
          "158:   INSERT INTO t1 VALUES('c d a b');  -- 3",
          "159:   INSERT INTO t1 VALUES('b c d a');  -- 4",
          "160: }",
          "161: do_faultsim_test 6.1 -faults oom* -body {",
          "162:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a' AND t1 MATCH 'b' }",
          "163: } -test {",
          "164:   faultsim_test_result {0 {1 2 3 4}}",
          "165: }",
          "166: do_faultsim_test 6.2 -faults oom* -body {",
          "167:   execsql { SELECT rowid FROM t1 WHERE t1 MATCH 'a OR b' AND t1 MATCH 'c OR d' }",
          "168: } -test {",
          "169:   faultsim_test_result {0 {1 2 3 4}}",
          "170: }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5multi.test||ext/fts5/test/fts5multi.test": [
          "File: ext/fts5/test/fts5multi.test -> ext/fts5/test/fts5multi.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 September 13",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5multi",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: fts5_aux_test_functions db",
          "26: do_execsql_test 1.0 {",
          "27:   CREATE VIRTUAL TABLE t1 USING fts5(a, b, c);",
          "28:   INSERT INTO t1 VALUES('gg bb bb'   ,'gg ff gg'   ,'ii ii');",
          "29:   INSERT INTO t1 VALUES('dd dd hh kk','jj'         ,'aa');",
          "30:   INSERT INTO t1 VALUES('kk gg ee'   ,'hh cc'      ,'hh jj aa cc');",
          "31:   INSERT INTO t1 VALUES('hh'         ,'bb jj cc'   ,'kk ii');",
          "32:   INSERT INTO t1 VALUES('kk dd kk ii','aa ee aa'   ,'ee');",
          "33:   INSERT INTO t1 VALUES('ee'         ,'ff gg kk aa','ee ff ee');",
          "34:   INSERT INTO t1 VALUES('ff jj'      ,'gg ee'      ,'kk ee gg kk');",
          "35:   INSERT INTO t1 VALUES('ff ee dd hh','kk ee'      ,'gg dd');",
          "36:   INSERT INTO t1 VALUES('bb'         ,'aa'         ,'bb aa');",
          "37:   INSERT INTO t1 VALUES('hh cc bb'   ,'ff bb'      ,'cc');",
          "38:   INSERT INTO t1 VALUES('jj'         ,'ff dd bb aa','dd dd ff ff');",
          "39:   INSERT INTO t1 VALUES('ff dd gg dd','gg aa bb ff','cc');",
          "40:   INSERT INTO t1 VALUES('ff aa cc jj','kk'         ,'ii dd');",
          "41:   INSERT INTO t1 VALUES('jj dd'      ,'cc'         ,'ii hh ee aa');",
          "42:   INSERT INTO t1 VALUES('ff ii hh'   ,'dd'         ,'gg');",
          "43:   INSERT INTO t1 VALUES('ff dd gg hh','hh'         ,'ff dd');",
          "44:   INSERT INTO t1 VALUES('cc cc'      ,'ff dd ff'   ,'bb');",
          "45:   INSERT INTO t1 VALUES('ii'         ,'bb ii'      ,'jj kk');",
          "46:   INSERT INTO t1 VALUES('ff hh'      ,'hh bb'      ,'bb dd ee');",
          "47:   INSERT INTO t1 VALUES('jj kk'      ,'jj'         ,'gg ff cc');",
          "48:   INSERT INTO t1 VALUES('dd kk'      ,'ii gg'      ,'dd');",
          "49:   INSERT INTO t1 VALUES('cc'         ,'aa ff'      ,'ii');",
          "50:   INSERT INTO t1 VALUES('bb ff bb ii','bb kk bb aa','hh ff ii dd');",
          "51:   INSERT INTO t1 VALUES('aa'         ,'ee bb jj jj','dd');",
          "52:   INSERT INTO t1 VALUES('kk dd cc'   ,'aa jj'      ,'ee aa ff');",
          "53:   INSERT INTO t1 VALUES('aa gg aa'   ,'jj'         ,'ii kk hh gg');",
          "54:   INSERT INTO t1 VALUES('ff hh aa'   ,'jj ii'      ,'hh dd bb jj');",
          "55:   INSERT INTO t1 VALUES('hh'         ,'aa gg kk'   ,'bb ee');",
          "56:   INSERT INTO t1 VALUES('bb'         ,'ee'         ,'gg');",
          "57:   INSERT INTO t1 VALUES('dd kk'      ,'kk bb aa'   ,'ee');",
          "58: }",
          "60: foreach {tn c1 e1 c2 e2} {",
          "61:   1     t1 aa     t1 bb",
          "62:   2     a  aa     b  bb",
          "63:   3     a  \"aa OR bb OR cc\"    b  \"jj OR ii OR hh\"",
          "64:   4     t1  \"aa AND bb\"       t1  \"cc\"",
          "65:   5     c   \"kk\"               b  \"aa OR bb OR cc OR dd OR ee\"",
          "66: } {",
          "67:   if {$c1==\"t1\"} {",
          "68:     set lhs \"( $e1 )\"",
          "69:   } else {",
          "70:     set lhs \"$c1 : ( $e1 )\"",
          "71:   }",
          "72:   if {$c2==\"t1\"} {",
          "73:     set rhs \"( $e2 )\"",
          "74:   } else {",
          "75:     set rhs \"$c2 : ( $e2 )\"",
          "76:   }",
          "78:   set q1 \"t1 MATCH '($lhs) AND ($rhs)'\"",
          "79:   set q2 \"$c1 MATCH '$e1' AND $c2 MATCH '$e2'\"",
          "81:   set ret [execsql \"SELECT rowid FROM t1 WHERE $q1\"]",
          "82:   set N [llength $ret]",
          "83:   do_execsql_test 1.$tn.1.($N) \"SELECT rowid FROM t1 WHERE $q2\" $ret",
          "85:   set ret [execsql \"SELECT fts5_test_poslist(t1) FROM t1 WHERE $q1\"]",
          "86:   do_execsql_test 1.$tn.2.($N) \"",
          "87:     SELECT fts5_test_poslist(t1) FROM t1 WHERE $q2",
          "88:   \" $ret",
          "89: }",
          "91: do_catchsql_test 2.1.1 {",
          "92:   SELECT rowid FROM t1 WHERE t1 MATCH '(NOT' AND t1 MATCH 'aa bb';",
          "93: } {1 {fts5: syntax error near \"NOT\"}}",
          "94: do_catchsql_test 2.1.2 {",
          "95:   SELECT rowid FROM t1 WHERE t1 MATCH 'aa bb' AND t1 MATCH '(NOT';",
          "96: } {1 {fts5: syntax error near \"NOT\"}}",
          "98: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test": [
          "File: ext/fts5/test/fts5plan.test -> ext/fts5/test/fts5plan.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: } {",
          "32:   QUERY PLAN",
          "33:   |--SCAN TABLE t1",
          "35: }",
          "37: do_eqp_test 1.2 {",
          "",
          "[Removed Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   SELECT * FROM f1 WHERE f1 MATCH ? ORDER BY ff",
          "47: } {",
          "48:   QUERY PLAN",
          "50:   `--USE TEMP B-TREE FOR ORDER BY",
          "51: }",
          "",
          "[Removed Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 65537:",
          "",
          "[Added Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61: do_eqp_test 1.5 {",
          "62:   SELECT * FROM f1 WHERE rank MATCH ?",
          "65: finish_test",
          "",
          "[Removed Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 2:}",
          "",
          "[Added Lines]",
          "63: } {SCAN TABLE f1 VIRTUAL TABLE INDEX 0:r}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5simple.test||ext/fts5/test/fts5simple.test": [
          "File: ext/fts5/test/fts5simple.test -> ext/fts5/test/fts5simple.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:   SELECT rowid FROM x1($doc);",
          "468: } {11112}",
          "470: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470: #-------------------------------------------------------------------------",
          "471: reset_db",
          "472: do_execsql_test 22.0 {",
          "473:   CREATE VIRTUAL TABLE x1 USING fts5(x);",
          "474:   INSERT INTO x1(x) VALUES('a b c');",
          "475:   INSERT INTO x1(x) VALUES('x y z');",
          "476:   INSERT INTO x1(x) VALUES('c b a');",
          "477:   INSERT INTO x1(x) VALUES('z y x');",
          "478: }",
          "480: do_catchsql_test 22.1 {SELECT * FROM x1('')}   {1 {fts5: syntax error near \"\"}}",
          "481: do_catchsql_test 22.2 {SELECT * FROM x1(NULL)} {1 {fts5: syntax error near \"\"}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 980be1730dc1239c63a107923bf2e32b4ec7d4bc31b9190e711cc35f18cc2bb4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad63e5e0cc74c7fd20d0862d1cf457691db72de",
      "candidate_info": {
        "commit_hash": "0ad63e5e0cc74c7fd20d0862d1cf457691db72de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ad63e5e0cc74c7fd20d0862d1cf457691db72de",
        "files": [
          "ext/fts5/fts5_varint.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another problem with corrupt databases in fts5.\n\nFossilOrigin-Name: 9bf811ea89a133d481a86407683a7518e909eccb7aa3aa02f7932bdb33387572",
        "before_after_code_files": [
          "ext/fts5/fts5_varint.c||ext/fts5/fts5_varint.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_varint.c||ext/fts5/fts5_varint.c": [
          "File: ext/fts5/fts5_varint.c -> ext/fts5/fts5_varint.c"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3718:   SELECT fts5_decode(id, block) FROM t2_data;",
          "3719: } {1 {database disk image is malformed}}",
          "3721: sqlite3_fts5_may_be_corrupt 0",
          "3722: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3721: #-------------------------------------------------------------------------",
          "3722: reset_db",
          "3723: do_test 33.0 {",
          "3724:   sqlite3 db {}",
          "3725:   db deserialize [decode_hexdb {",
          "3726: | size 28672 pagesize 4096 filename crash-fed6e90021ba5d.db",
          "3727: | page 1 offset 0",
          "3728: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "3729: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "3730: |     32: 00 00 00 02 00 00 00 01 00 00 00 08 00 00 00 04   ................",
          "3731: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "3732: |     96: 00 00 00 00 0d 0f c7 00 06 0d b6 00 0f 8d 0f 36   ...............6",
          "3733: |    112: 0e cb 0e 6b 0e 0e 0d b6 0d b6 00 00 00 00 00 00   ...k............",
          "3734: |   3504: 00 00 00 00 00 00 56 07 06 17 1f 1f 01 7d 74 61   ......V.......ta",
          "3735: |   3520: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "3736: |   3536: 6f 6e 66 69 67 07 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "3737: |   3552: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "3738: |   3568: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "3739: |   3584: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 06    WITHOUT ROWID[.",
          "3740: |   3600: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "3741: |   3616: 6f 63 73 69 8a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsi.et1_docsize",
          "3742: |   3632: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "3743: |   3648: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "3744: |   3664: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "3745: |   3680: 59 2c 20 73 7a 20 42 4c 4f 42 29 5e 05 07 17 21   Y, sz BLOB)^...!",
          "3746: |   3696: 21 01 81 07 74 61 62 6c 65 74 31 5f 63 6f 6e 74   !...tablet1_cont",
          "3747: |   3712: 65 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 05 43 52   entt1_content.CR",
          "3748: |   3728: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63   EATE TABLE 't1_c",
          "3749: |   3744: 6f 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47   ontent'(id INTEG",
          "3750: |   3760: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "3751: |   3776: 63 30 2c 20 63 31 2c 20 63 32 29 69 04 07 17 19   c0, c1, c2)i....",
          "3752: |   3792: 19 01 81 2d 74 61 62 6c 65 74 31 5f 69 64 78 74   ...-tablet1_idxt",
          "3753: |   3808: 31 5f 69 64 78 04 43 52 45 41 54 45 20 54 41 42   1_idx.CREATE TAB",
          "3754: |   3824: 4c 45 20 27 74 31 5f 69 64 78 27 28 73 65 67 69   LE 't1_idx'(segi",
          "3755: |   3840: 64 2c 20 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50   d, term, pgno, P",
          "3756: |   3856: 52 49 4d 41 52 59 20 4b 45 59 28 73 65 67 69 64   RIMARY KEY(segid",
          "3757: |   3872: 2c 20 74 65 72 6d 29 29 20 57 49 54 48 4f 55 54   , term)) WITHOUT",
          "3758: |   3888: 20 52 4f 57 49 44 55 03 07 17 1b 1b 01 81 01 74    ROWIDU........t",
          "3759: |   3904: 61 62 6c 65 74 31 5f 64 61 74 61 74 31 5f 64 61   ablet1_datat1_da",
          "3760: |   3920: 74 61 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   ta.CREATE TABLE",
          "3761: |   3936: 27 74 31 5f 64 61 74 61 27 28 69 64 20 49 4e 54   't1_data'(id INT",
          "3762: |   3952: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "3763: |   3968: 2c 20 62 6c 6f 63 6b 20 42 4c 4f 42 29 38 02 06   , block BLOB)8..",
          "3764: |   3984: 17 11 11 08 5f 74 61 62 6c 65 74 31 74 31 43 52   ...._tablet1t1CR",
          "3765: |   4000: 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41 42   EATE VIRTUAL TAB",
          "3766: |   4016: 4c 45 20 74 31 20 55 53 49 4e 47 20 66 74 73 35   LE t1 USING fts5",
          "3767: |   4032: 28 61 2c 62 2c 63 29 00 00 00 39 00 00 00 00 00   (a,b,c)...9.....",
          "3768: | page 3 offset 8192",
          "3769: |      0: 0d 00 00 00 03 0c af 00 0f e6 0f ef 0c af 00 00   ................",
          "3770: |   3232: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 86   ................",
          "3771: |   3248: 2f 84 80 80 80 80 01 04 00 8c 62 00 00 03 12 02   /.........b.....",
          "3772: |   3264: 30 30 01 04 05 03 01 04 05 03 01 04 05 03 1f 02   00..............",
          "3773: |   3280: 03 01 02 03 01 02 03 01 08 35 30 30 30 30 30 30   .........5000000",
          "3774: |   3296: 30 1c 02 04 01 0e ee ca ec ea ea ab e4 f5 ca b1   0...............",
          "3775: |   3312: ac ee ec de ef 3e ee ca ee ec f2 f8 0f f0 0f e8   .....>..........",
          "3776: |   3328: 0f e0 0f d8 0f d0 0f c8 0f c0 0f b8 0f b0 0f a8   ................",
          "3777: |   3344: 0f a0 0f 98 0f 90 0f 88 0f 80 0f 78 0f 70 0f 68   ...........x.p.h",
          "3778: |   3360: 0f 60 0f 58 0f 50 0f 48 0f 40 0f 38 0f 30 0f 28   .`.X.P.H.@.8.0.(",
          "3779: |   3376: 0f 20 0f 18 0f 10 0f 08 0f 00 0e f8 0e f0 0e e8   . ..............",
          "3780: |   3392: 0e e0 02 03 01 02 03 01 02 03 02 07 6f 6d 70 69   ............ompi",
          "3781: |   3408: 6c 65 72 01 02 02 01 02 02 01 02 02 01 06 64 62   ler...........db",
          "3782: |   3424: 73 74 61 74 07 02 03 01 02 03 01 02 03 02 04 65   stat...........e",
          "3783: |   3440: 62 75 67 04 02 02 01 02 02 01 02 02 01 06 65 6e   bug...........en",
          "3784: |   3456: 61 62 6c 65 07 02 02 01 02 02 01 02 02 01 02 02   able............",
          "3785: |   3472: 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01   ................",
          "3786: |   3488: 02 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02   ................",
          "3787: |   3504: 02 01 02 02 01 02 02 01 02 02 01 02 02 01 02 02   ................",
          "3788: |   3520: 01 02 02 02 08 78 74 65 6e 73 69 6f 6e 1f 02 04   .....xtension...",
          "3789: |   3536: 01 02 04 01 02 04 01 04 66 74 73 34 0a 02 03 03   ........fts4....",
          "3790: |   3552: 01 02 01 02 03 04 01 35 0d 02 03 01 02 03 01 02   .......5........",
          "3791: |   3568: 03 01 07 67 65 6f 70 6f 6c 79 10 02 03 01 02 03   ...geopoly......",
          "3792: |   3584: 01 02 03 01 05 6a 73 6f 6e 31 13 02 03 01 02 03   .....json1......",
          "3793: |   3600: 01 02 03 01 04 6c 6f 61 64 1f 02 03 01 02 03 01   .....load.......",
          "3794: |   3616: 02 03 01 03 6d 61 78 1c 02 02 01 02 02 01 02 02   ....max.........",
          "3795: |   3632: 02 05 65 6d 6f 72 79 1c 02 03 01 02 03 01 02 03   ..emory.........",
          "3796: |   3648: 04 04 73 79 73 35 16 02 03 01 02 03 01 02 03 01   ..sys5..........",
          "3797: |   3664: 06 6e 6f 63 61 73 65 02 06 01 02 02 03 06 01 02   .nocase.........",
          "3798: |   3680: 02 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02   ................",
          "3799: |   3696: 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03   ................",
          "3800: |   3712: 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06   ................",
          "3801: |   3728: 01 02 02 01 04 6f 6d 69 74 1f 02 02 01 02 02 01   .....omit.......",
          "3802: |   3744: 02 02 01 05 72 74 72 65 65 19 02 03 01 02 03 01   ....rtree.......",
          "3803: |   3760: 02 03 04 02 69 6d 01 06 01 02 02 03 06 01 02 02   ....im..........",
          "3804: |   3776: 03 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03   ................",
          "3805: |   3792: 06 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06   ................",
          "3806: |   3808: 01 02 02 03 06 01 02 02 03 06 01 02 02 03 06 01   ................",
          "3807: |   3824: 02 02 01 0a 74 68 72 65 61 64 73 61 66 65 22 02   ....threadsafe..",
          "3808: |   3840: 02 01 02 02 01 02 02 01 04 76 74 61 62 07 02 04   .........vtab...",
          "3809: |   3856: 01 02 04 01 02 04 01 01 78 01 06 01 01 02 01 06   ........x.......",
          "3810: |   3872: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "3811: |   3888: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "3812: |   3904: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "3813: |   3920: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "3814: |   3936: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "3815: |   3952: 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01   ................",
          "3816: |   3968: 01 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01   ................",
          "3817: |   3984: 02 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02   ................",
          "3818: |   4000: 01 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01   ................",
          "3819: |   4016: 06 01 01 02 01 06 01 01 02 01 06 01 01 02 01 06   ................",
          "3820: |   4032: 01 01 02 01 06 01 01 02 01 06 01 01 02 04 18 13   ................",
          "3821: |   4048: 0c 44 10 12 11 0f 47 13 0f 0c 12 10 0f 0e 10 0f   .D....G.........",
          "3822: |   4064: 44 0f 10 40 15 0f 07 01 03 00 14 24 57 24 24 0f   D..@.......$W$$.",
          "3823: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "3824: | page 4 offset 12288",
          "3825: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "3826: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "3827: | page 5 offset 16384",
          "3828: |      0: 0d 00 00 00 24 0c 1f 00 0f df 0f bd 0f 9b 0f 89   ....$...........",
          "3829: |     16: 0f 76 0f 63 0f 44 0f 24 0f 04 0e ec 0e d3 0e ba   .v.c.D.$........",
          "3830: |     32: 0e a2 0e 89 0e 70 0e 55 0e 39 0e 1d 0e 04 0d ea   .....p.U.9......",
          "3831: |     48: 0d d0 0d b5 0d 99 0d 7d 0d 64 0d 4a 0d 30 0d 10   .........d.J.0..",
          "3832: |     64: 0c ef 0c ce 0c ae 54 d5 35 95 33 55 84 24 94 e4   ......T.5.3U.$..",
          "3833: |     80: 15 25 91 a1 70 50 02 90 f1 94 54 e4 14 24 c4 52   .%..pP....T..$.R",
          "3834: |     96: 04 d4 54 d5 35 95 33 55 84 e4 f4 34 15 34 51 91   ..T.5.3U...4.4Q.",
          "3835: |    112: 60 50 02 90 f1 74 54 e4 14 24 c4 52 04 d4 54 d5   `P...tT..$.R..T.",
          "3836: |    128: 35 95 33 55 85 25 45 24 94 d1 81 50 50 02 50 f1   5.3U.%E$...PP.P.",
          "3837: |    144: 94 54 e4 14 24 c4 52 04 a5 34 f4 e3 15 84 24 94   .T..$.R..4....$.",
          "3838: |    160: e4 15 25 91 81 40 50 02 50 f1 94 54 e4 14 24 c4   ..%..@P.P..T..$.",
          "3839: |    176: 52 04 a5 34 f4 e3 15 84 e4 f4 34 15 34 51 71 30   R..4......4.4Qq0",
          "3840: |    192: 50 02 50 f1 74 54 e4 14 24 c4 52 04 ae 4f 41 33   P.P.tT..$.R..OA3",
          "3841: |    208: 55 85 25 45 24 94 d1 a1 20 50 02 90 f1 94 54 e4   U.%E$... P....T.",
          "3842: |    224: 14 24 c4 52 04 74 54 f5 04 f4 c5 95 84 24 94 e4   .$.R.tT......$..",
          "3843: |    240: 15 25 91 a1 10 50 02 90 f1 94 54 e4 14 24 c4 52   .%...P....T..$.R",
          "3844: |    256: 04 74 54 f5 04 f4 c5 95 84 e4 f4 34 15 34 51 91   .tT........4.4Q.",
          "3845: |    272: 00 50 02 90 f1 74 54 e4 14 24 c4 52 04 74 54 f5   .P...tT..$.R.tT.",
          "3846: |    288: 04 f4 c5 95 85 25 45 24 94 d1 70 f0 50 02 30 f1   .....%E$..p.P.0.",
          "3847: |    304: 94 54 e4 14 24 c4 52 04 65 45 33 55 84 24 94 e4   .T..$.R.eE3U.$..",
          "3848: |    320: 15 25 91 70 e0 50 02 30 f1 94 54 e4 40 0f 38 0f   .%.p.P.0..T.@.8.",
          "3849: |    336: 30 0f 28 0f 20 0f 18 0f 10 0f 08 0f 00 0e f8 0e   0.(. ...........",
          "3850: |    352: f0 0e e8 0e e0 00 00 00 00 00 00 00 00 00 00 00   ................",
          "3851: | page 6 offset 20480",
          "3852: |   3808: 06 24 03 00 12 02 01 01 06 23 03 00 12 02 01 01   .$.......#......",
          "3853: |   3824: 06 22 03 00 12 02 01 01 06 21 03 00 12 03 01 01   .........!......",
          "3854: |   3840: 06 20 03 00 12 03 01 01 06 1f 03 00 12 03 01 01   . ..............",
          "3855: |   3856: 06 1e 03 00 12 03 01 01 06 1d 03 00 12 03 01 01   ................",
          "3856: |   3872: 06 1c 03 00 12 03 01 01 06 1b 03 00 12 02 01 01   ................",
          "3857: |   3888: 06 1a 03 00 12 02 01 01 06 19 03 00 12 02 01 01   ................",
          "3858: |   3904: 06 18 03 00 12 02 01 01 06 17 03 00 12 02 01 01   ................",
          "3859: |   3920: 06 16 03 00 12 02 01 01 06 15 03 00 12 02 01 01   ................",
          "3860: |   3936: 06 14 03 00 12 02 01 01 06 13 03 00 12 02 01 01   ................",
          "3861: |   3952: 06 12 03 00 12 02 01 01 06 11 03 00 12 02 01 01   ................",
          "3862: |   3968: 06 10 03 00 12 02 01 01 06 0f 03 00 12 02 01 01   ................",
          "3863: |   3984: 06 0e 03 00 12 02 01 01 06 0d 03 00 12 02 01 01   ................",
          "3864: |   4000: 06 0c 03 00 12 02 01 01 06 0b 03 00 12 02 01 01   ................",
          "3865: |   4016: 06 0a 03 00 12 02 01 01 06 09 03 00 12 03 01 01   ................",
          "3866: |   4032: 06 08 03 00 12 03 01 01 06 07 03 00 12 03 01 01   ................",
          "3867: |   4048: 06 06 03 00 12 01 01 01 06 05 03 00 12 01 01 01   ................",
          "3868: |   4064: 06 04 03 00 12 01 01 01 06 03 03 00 12 05 01 01   ................",
          "3869: |   4080: 06 02 03 00 12 05 01 01 06 01 03 00 12 05 01 01   ................",
          "3870: | page 7 offset 24576",
          "3871: |      0: 0a 00 00 00 01 0f f4 00 0f f4 52 59 11 05 05 00   ..........RY....",
          "3872: |     16: 17 0f 19 44 45 42 55 47 58 4e 4f 43 41 53 45 10   ...DEBUGXNOCASE.",
          "3873: |     32: 04 05 00 17 0f 17 44 45 42 55 47 58 52 54 52 49   ......DEBUGXRTRI",
          "3874: |     48: 4d 20 03 05 00 35 0f 19 43 4f 4d 50 49 4c 45 52   M ...5..COMPILER",
          "3875: |     64: 3d 63 6c 61 6e 67 2d 36 2e 30 2e 30 58 42 49 4e   =clang-6.0.0XBIN",
          "3876: |     80: 41 52 59 20 02 05 00 35 0f 19 43 4f 4d 50 49 4c   ARY ...5..COMPIL",
          "3877: |     96: 45 52 3d 63 6c 61 6e 67 2d 36 2e 30 2e 30 58 4e   ER=clang-6.0.0XN",
          "3878: |    112: 4f 43 41 53 45 1f 01 05 00 35 0f 17 43 4f 4d 50   OCASE....5..COMP",
          "3879: |    128: 49 4c 45 52 3d 63 6c 61 6e 67 2d 36 2e 30 2e 30   ILER=clang-6.0.0",
          "3880: |    144: 58 52 54 52 49 4d 0d 00 00 00 24 0e e0 00 0f 6f   XRTRIM....$....o",
          "3881: |    160: 6e 74 65 6e 74 05 43 52 45 41 54 45 20 54 41 42   ntent.CREATE TAB",
          "3882: |    176: 4c 45 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28   LE 't1_content'(",
          "3883: |    192: 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41   id INTEGER PRIMA",
          "3884: |    208: 52 59 20 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20   RY KEY, c0, c1,",
          "3885: |    224: 63 32 29 69 04 07 17 19 19 01 81 2d 74 61 62 6c   c2)i.......-tabl",
          "3886: |    240: 65 74 31 5f 69 64 78 74 31 5f 69 64 78 04 43 52   et1_idxt1_idx.CR",
          "3887: |    256: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69   EATE TABLE 't1_i",
          "3888: |    272: 64 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c   dx'(segid, term,",
          "3889: |    288: 20 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b    pgno, PRIMARY K",
          "3890: |    304: 45 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29   EY(segid, term))",
          "3891: |    320: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 03    WITHOUT ROWIDU.",
          "3892: |    336: 07 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64   .......tablet1_d",
          "3893: |    352: 61 74 61 74 31 5f 64 61 74 61 03 43 52 45 41 54   atat1_data.CREAT",
          "3894: |    368: 45 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61   E TABLE 't1_data",
          "3895: |    384: 27 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49   '(id INTEGER PRI",
          "3896: |    400: 4d 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20   MARY KEY, block",
          "3897: |    416: 42 4c 4f 42 29 38 02 06 17 11 11 08 5f 74 61 62   BLOB)8......_tab",
          "3898: |    432: 6c 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52   let1t1CREATE VIR",
          "3899: |    448: 54 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53   TUAL TABLE t1 US",
          "3900: |    464: 49 4e 47 20 66 74 73 35 28 61 2c 62 2c 63 29 00   ING fts5(a,b,c).",
          "3901: |    480: 00 00 39 00 00 00 00 00 00 00 00 00 00 00 00 00   ..9.............",
          "3902: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "3903: | end crash-fed6e90021ba5d.db",
          "3904: }]} {}",
          "3906: do_execsql_test 33.1 {",
          "3907:   CREATE VIRTUAL TABLE t2 USING fts5vocab('t1','row');",
          "3908:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1','col');",
          "3909:   CREATE VIRTUAL TABLE t4 USING fts5vocab('t1','instance');",
          "3910: }",
          "3912: do_catchsql_test 33.2 {",
          "3913:   SELECT * FROM t2;",
          "3914: } {1 {database disk image is malformed}}",
          "3916: do_catchsql_test 33.3 {",
          "3917:   SELECT * FROM t2, t3, t4 WHERE t2.term=t3.term AND t3.term=t4.term;",
          "3918: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 556dd8922f65af93084ee725c638b8dc696b611dd508c212a3b507d6ca474031",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92a2824cc61df5683337d61b5a9d190935039326",
      "candidate_info": {
        "commit_hash": "92a2824cc61df5683337d61b5a9d190935039326",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/92a2824cc61df5683337d61b5a9d190935039326",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/expr.c",
          "test/collate1.test"
        ],
        "message": "An improved fix for the dbsqlfuzz-discovered ALWAYS() failure following OOM in sqlite3ExprCollSeq().  This time with a test case (engineered by Dan).\n\nFossilOrigin-Name: 907f7965b335d8d5441f2e386bb190d1f93ffcd45ca98d2d1c621dede491fc5e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "test/collate1.test||test/collate1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75775c5ab44e497cb19be10397229637f1374f05c3244e8f92d6c54fcea94f5f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1416:   int i;",
          "1417:   RenameCtx *p = pWalker->u.pRename;",
          "1418:   SrcList *pSrc = pSelect->pSrc;",
          "1420:     return WRC_Abort;",
          "1421:   }",
          "1422:   for(i=0; i<pSrc->nSrc; i++){",
          "",
          "[Removed Lines]",
          "1419:   if( NEVER(pSrc==0) ){",
          "",
          "[Added Lines]",
          "1419:   if( pSrc==0 ){",
          "1420:     assert( pWalker->pParse->db->mallocFailed );",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4143: void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){",
          "4144:   int i;",
          "4145:   struct SrcList_item *pItem;",
          "4147:     for(i=0, pItem=pList->a; i<pList->nSrc; i++, pItem++){",
          "4148:       if( pItem->iCursor>=0 ) break;",
          "4149:       pItem->iCursor = pParse->nTab++;",
          "",
          "[Removed Lines]",
          "4146:   if( ALWAYS(pList) ){",
          "",
          "[Added Lines]",
          "4146:   assert(pList || pParse->db->mallocFailed );",
          "4147:   if( pList ){",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:           int i;",
          "191:           for(i=0; ALWAYS(i<p->x.pList->nExpr); i++){",
          "192:             if( ExprHasProperty(p->x.pList->a[i].pExpr, EP_Collate) ){",
          "",
          "[Removed Lines]",
          "189:         if( p->x.pList!=0 && ALWAYS(!ExprHasProperty(p, EP_xIsSelect)) ){",
          "",
          "[Added Lines]",
          "189:         if( p->x.pList!=0",
          "190:          && !db->mallocFailed",
          "191:          && ALWAYS(!ExprHasProperty(p, EP_xIsSelect))",
          "192:         ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1530:     pNext = pNew;",
          "1531:   }",
          "1537:   return pRet;",
          "1538: }",
          "1539: #else",
          "",
          "[Removed Lines]",
          "1533:   if( db->mallocFailed ){",
          "1534:     sqlite3SelectDelete(db, pRet);",
          "1535:     pRet = 0;",
          "1536:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/collate1.test||test/collate1.test": [
          "File: test/collate1.test -> test/collate1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "417:   SELECT * FROM t0 WHERE c1 = 1;",
          "418: } {{ } 1}",
          "420: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "420: # 2019-10-09",
          "421: # ALWAYS() macro fails following OOM",
          "422: # Problem detected by dbsqlfuzz.",
          "423: #",
          "424: do_execsql_test 9.0 {",
          "425:   CREATE TABLE t1(a, b);",
          "426:   CREATE TABLE t2(c, d);",
          "427: }",
          "429: do_faultsim_test 9.1 -faults oom* -body {",
          "430:   execsql {",
          "431:     SELECT * FROM (",
          "432:         SELECT b COLLATE nocase IN (SELECT c FROM t2) FROM t1",
          "433:     );",
          "434:   }",
          "435: } -test {",
          "436:   faultsim_test_result {0 {}}",
          "437: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b555b0806e5ded813f9a78c3f287fde1d12f5068",
      "candidate_info": {
        "commit_hash": "b555b0806e5ded813f9a78c3f287fde1d12f5068",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b555b0806e5ded813f9a78c3f287fde1d12f5068",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a new problem in the BETWEEN operator when applied to a window function. The problem was introduced yesterday by check-in [7ef7b23cbb1b9ace].\n\nFossilOrigin-Name: 47e23064ba0205148f89e12803a62d5a4d6d2054f593f60c031e815112170b9b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c0d932449db3deed42a99bd948aab61e56b2d8441d7de5243688695ff04e8177",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2022:       pNew->eEnd = p->eEnd;",
          "2023:       pNew->eStart = p->eStart;",
          "2024:       pNew->eExclude = p->eExclude;",
          "2025:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2026:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2027:       pNew->pOwner = pOwner;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2025:       pNew->regResult = p->regResult;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1170:   11 K cc 'xyz' K |",
          "1171: }",
          "",
          "[Removed Lines]",
          "1173: finish_test",
          "",
          "[Added Lines]",
          "1173: # 2019-07-18",
          "1174: # Check-in [7ef7b23cbb1b9ace] (which was itself a fix for ticket",
          "1175: # https://www.sqlite.org/src/info/1be72aab9) introduced a new problem",
          "1176: # if the LHS of a BETWEEN operator is a WINDOW function.  The problem",
          "1177: # was found by (the recently enhanced) dbsqlfuzz.",
          "1178: #",
          "1179: do_execsql_test 30.0 {",
          "1180:   DROP TABLE IF EXISTS t1;",
          "1181:   CREATE TABLE t1(a, b, c);",
          "1182:   INSERT INTO t1 VALUES('BB','aa',399);",
          "1183:   SELECT",
          "1184:     count () OVER win1 NOT BETWEEN 'a' AND 'mmm',",
          "1185:     count () OVER win3",
          "1186:   FROM t1",
          "1187:   WINDOW win1 AS (ORDER BY a GROUPS BETWEEN 4 PRECEDING AND 1 FOLLOWING",
          "1188:                   EXCLUDE CURRENT ROW),",
          "1189:          win2 AS (PARTITION BY b ORDER BY a),",
          "1190:          win3 AS (win2 RANGE BETWEEN 5.2 PRECEDING AND true PRECEDING );",
          "1191: } {1 1}",
          "1193: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
      "candidate_info": {
        "commit_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3atoken.test"
        ],
        "message": "The two-argument version of fts3_tokenizer() works regardless of the value of SQLITE_DBCONFIG_ENABLE_FT3_TOKENIZER as long as the second argument is a bind parameter.\n\nFossilOrigin-Name: ab76e3a90e56bd36a17ded9c7a77e88632ca12d3bd73f197df747a634c81e0cf",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   nName = sqlite3_value_bytes(argv[0])+1;",
          "81:   if( argc==2 ){",
          "83:       void *pOld;",
          "84:       int n = sqlite3_value_bytes(argv[1]);",
          "85:       if( zName==0 || n!=sizeof(pPtr) ){",
          "",
          "[Removed Lines]",
          "82:     if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "82:     if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[1]) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98da62dfdacc6b3c490c387d1f8a74cc5daa978776967e264ad4800c380b0ddf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: } {{There was movement at the station}}",
          "89: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 0",
          "90: do_catchsql_test 1.6 {",
          "91:   SELECT fts3_tokenizer('blah', fts3_tokenizer('simple')) IS NULL;",
          "92: } {1 {fts3tokenize disabled}}",
          "95: #--------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: unset -nocomplain simple",
          "90: set simple [db one {SELECT fts3_tokenizer('simple')}]",
          "95: do_test fts3atoken-1.7 {",
          "96:   execsql {",
          "97:     SELECT fts3_tokenizer('blah2', $simple) IS NULL;",
          "98:   }",
          "99: } {1}",
          "100: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "101: do_test fts3atoken-1.8 {",
          "102:   execsql {",
          "103:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple');",
          "104:   }",
          "105: } {1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}