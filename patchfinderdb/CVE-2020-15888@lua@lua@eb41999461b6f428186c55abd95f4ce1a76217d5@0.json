{
  "cve_id": "CVE-2020-15888",
  "cve_desc": "Lua through 5.4.0 mishandles the interaction between stack resizes and garbage collection, leading to a heap-based buffer overflow, heap-based buffer over-read, or use-after-free.",
  "repo": "lua/lua",
  "patch_hash": "eb41999461b6f428186c55abd95f4ce1a76217d5",
  "patch_info": {
    "commit_hash": "eb41999461b6f428186c55abd95f4ce1a76217d5",
    "repo": "lua/lua",
    "commit_url": "https://github.com/lua/lua/commit/eb41999461b6f428186c55abd95f4ce1a76217d5",
    "files": [
      "ldo.c",
      "ldo.h",
      "ltm.c",
      "lvm.c"
    ],
    "message": "Fixed bugs of stack reallocation x GC\n\nMacro 'checkstackGC' was doing a GC step after resizing the stack;\nthe GC could shrink the stack and undo the resize. Moreover, macro\n'checkstackp' also does a GC step, which could remove the preallocated\nCallInfo when calling a function. (Its name has been changed to\n'checkstackGCp' to emphasize that it calls the GC.)",
    "before_after_code_files": [
      "ldo.c||ldo.c",
      "ldo.h||ldo.h",
      "ltm.c||ltm.c",
      "lvm.c||lvm.c"
    ]
  },
  "patch_diff": {
    "ldo.c||ldo.c": [
      "File: ldo.c -> ldo.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "465:       f = fvalue(s2v(func));",
      "466:      Cfunc: {",
      "470:       ci->nresults = nresults;",
      "471:       ci->callstatus = CIST_C;",
      "472:       ci->top = L->top + LUA_MINSTACK;",
      "473:       ci->func = func;",
      "475:       lua_assert(ci->top <= L->stack_last);",
      "476:       if (L->hookmask & LUA_MASKCALL) {",
      "477:         int narg = cast_int(L->top - func) - 1;",
      "",
      "[Removed Lines]",
      "468:       CallInfo *ci = next_ci(L);",
      "474:       L->ci = ci;",
      "",
      "[Added Lines]",
      "468:       CallInfo *ci;",
      "470:       L->ci = ci = next_ci(L);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "485:       break;",
      "486:     }",
      "489:       Proto *p = clLvalue(s2v(func))->p;",
      "491:       int nfixparams = p->numparams;",
      "494:       ci->nresults = nresults;",
      "496:       ci->callstatus = 0;",
      "",
      "[Removed Lines]",
      "488:       CallInfo *ci = next_ci(L);",
      "493:       checkstackp(L, fsize, func);",
      "",
      "[Added Lines]",
      "488:       CallInfo *ci;",
      "493:       checkstackGCp(L, fsize, func);",
      "494:       L->ci = ci = next_ci(L);",
      "",
      "---------------"
    ],
    "ldo.h||ldo.h": [
      "File: ldo.h -> ldo.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:   luaD_checkstackaux(L, n, \\",
      "40:     ptrdiff_t t__ = savestack(L, p);  /* save 'p' */ \\",
      "41:     luaC_checkGC(L),  /* stack grow uses memory */ \\",
      "",
      "[Removed Lines]",
      "38: #define checkstackp(L,n,p)  \\",
      "",
      "[Added Lines]",
      "40: #define checkstackGCp(L,n,p)  \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46: #define checkstackGC(L,fsize)  \\",
      "",
      "[Removed Lines]",
      "47:  luaD_checkstackaux(L, (fsize), (void)0, luaC_checkGC(L))",
      "",
      "[Added Lines]",
      "49:  luaD_checkstackaux(L, (fsize), luaC_checkGC(L), (void)0)",
      "",
      "---------------"
    ],
    "ltm.c||ltm.c": [
      "File: ltm.c -> ltm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "242:   ci->u.l.nextraargs = nextra;",
      "245:   setobjs2s(L, L->top++, ci->func);",
      "",
      "[Removed Lines]",
      "243:   checkstackGC(L, p->maxstacksize + 1);",
      "",
      "[Added Lines]",
      "243:   luaD_checkstack(L, p->maxstacksize + 1);",
      "",
      "---------------"
    ],
    "lvm.c||lvm.c": [
      "File: lvm.c -> lvm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1638:         }",
      "",
      "[Removed Lines]",
      "1637:           checkstackp(L, 1, ra);",
      "",
      "[Added Lines]",
      "1637:           checkstackGCp(L, 1, ra);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "901d76009346d76996679c02deee708bf225e91e",
      "candidate_info": {
        "commit_hash": "901d76009346d76996679c02deee708bf225e91e",
        "repo": "lua/lua",
        "commit_url": "https://github.com/lua/lua/commit/901d76009346d76996679c02deee708bf225e91e",
        "files": [
          "ldo.c",
          "ldo.h",
          "lvm.c"
        ],
        "message": "Simpler implementation for tail calls\n\nTail calls handled by 'luaD_precall', like regular calls, to avoid\ncode duplication.",
        "before_after_code_files": [
          "ldo.c||ldo.c",
          "ldo.h||ldo.h",
          "lvm.c||lvm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ldo.c||ldo.c",
            "ldo.h||ldo.h",
            "lvm.c||lvm.c"
          ],
          "candidate": [
            "ldo.c||ldo.c",
            "ldo.h||ldo.h",
            "lvm.c||lvm.c"
          ]
        }
      },
      "candidate_diff": {
        "ldo.c||ldo.c": [
          "File: ldo.c -> ldo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485:   int i;",
          "497: }",
          "",
          "[Removed Lines]",
          "481: void luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func, int narg1) {",
          "482:   Proto *p = clLvalue(s2v(func))->p;",
          "484:   int nfixparams = p->numparams;",
          "487:     setobjs2s(L, ci->func + i, func + i);",
          "488:   checkstackGC(L, fsize);",
          "490:   for (; narg1 <= nfixparams; narg1++)",
          "493:   lua_assert(ci->top <= L->stack_last);",
          "495:   ci->callstatus |= CIST_TAIL;",
          "",
          "[Added Lines]",
          "481: static void moveparams (lua_State *L, StkId prevf, StkId func, int narg) {",
          "485:     setobjs2s(L, prevf + i, func + i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "509:   lua_CFunction f;",
          "510:  retry:",
          "511:   switch (ttypetag(s2v(func))) {",
          "",
          "[Removed Lines]",
          "508: CallInfo *luaD_precall (lua_State *L, StkId func, int nresults) {",
          "",
          "[Added Lines]",
          "502: CallInfo *luaD_precall (lua_State *L, StkId func, int nresults, int delta1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "542:       int nfixparams = p->numparams;",
          "544:       checkstackGCp(L, fsize, func);",
          "548:       ci->top = func + 1 + fsize;",
          "551:       for (; narg < nfixparams; narg++)",
          "553:       lua_assert(ci->top <= L->stack_last);",
          "",
          "[Removed Lines]",
          "545:       L->ci = ci = next_ci(L);",
          "546:       ci->nresults = nresults;",
          "549:       ci->func = func;",
          "550:       L->ci = ci;",
          "",
          "[Added Lines]",
          "542:         moveparams(L, ci->func, func, narg);",
          "543:       }",
          "546:         ci->func = func;",
          "547:         ci->nresults = nresults;",
          "548:       }",
          "",
          "---------------"
        ],
        "ldo.h||ldo.h": [
          "File: ldo.h -> ldo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: LUAI_FUNC void luaD_hook (lua_State *L, int event, int line,",
          "59:                                         int fTransfer, int nTransfer);",
          "60: LUAI_FUNC void luaD_hookcall (lua_State *L, CallInfo *ci);",
          "63: LUAI_FUNC void luaD_call (lua_State *L, StkId func, int nResults);",
          "64: LUAI_FUNC void luaD_callnoyield (lua_State *L, StkId func, int nResults);",
          "65: LUAI_FUNC void luaD_tryfuncTM (lua_State *L, StkId func);",
          "",
          "[Removed Lines]",
          "61: LUAI_FUNC void luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func, int n);",
          "62: LUAI_FUNC CallInfo *luaD_precall (lua_State *L, StkId func, int nResults);",
          "",
          "[Added Lines]",
          "61: LUAI_FUNC CallInfo *luaD_precall (lua_State *L, StkId func, int nresults,",
          "62:                                                             int delta1);",
          "",
          "---------------"
        ],
        "lvm.c||lvm.c": [
          "File: lvm.c -> lvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1638:           ci = newci;",
          "1640:           goto startfunc;",
          "1641:         }",
          "1642:         vmbreak;",
          "",
          "[Removed Lines]",
          "1635:         if ((newci = luaD_precall(L, ra, nresults)) == NULL)",
          "",
          "[Added Lines]",
          "1635:         if ((newci = luaD_precall(L, ra, nresults, 0)) == NULL)",
          "1639:           ci->callstatus = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1648:         int delta = (nparams1) ? ci->u.l.nextraargs + nparams1 : 0;",
          "1649:         if (b != 0)",
          "1650:           L->top = ra + b;",
          "1654:         if (TESTARG_k(i)) {",
          "1657:           lua_assert(base == ci->func + 1);",
          "1658:         }",
          "1663:         }",
          "1666:           updatetrap(ci);",
          "",
          "[Removed Lines]",
          "1652:           b = cast_int(L->top - ra);",
          "1662:           checkstackGCp(L, 1, ra);",
          "",
          "[Added Lines]",
          "1659:           ci->callstatus |= CIST_TAIL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbdc74dc5502c2e05e1c1e2ac894943f418c8431",
      "candidate_info": {
        "commit_hash": "dbdc74dc5502c2e05e1c1e2ac894943f418c8431",
        "repo": "lua/lua",
        "commit_url": "https://github.com/lua/lua/commit/dbdc74dc5502c2e05e1c1e2ac894943f418c8431",
        "files": [
          "ldo.c",
          "ldo.h",
          "lvm.c"
        ],
        "message": "Simplification in the parameters of 'luaD_precall'\n\nThe parameters 'nresults' and 'delta1', in 'luaD_precall', were never\nmeaningful simultaneously. So, they were combined in a single parameter\n'retdel'.",
        "before_after_code_files": [
          "ldo.c||ldo.c",
          "ldo.h||ldo.h",
          "lvm.c||lvm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ldo.c||ldo.c",
            "ldo.h||ldo.h",
            "lvm.c||lvm.c"
          ],
          "candidate": [
            "ldo.c||ldo.c",
            "ldo.h||ldo.h",
            "lvm.c||lvm.c"
          ]
        }
      },
      "candidate_diff": {
        "ldo.c||ldo.c": [
          "File: ldo.c -> ldo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: }",
          "491:   CallInfo *ci;",
          "496:     ci->callstatus |= mask | CIST_TAIL;",
          "497:     moveparams(L, ci->func, func);",
          "498:   }",
          "501:     ci->func = func;",
          "503:     ci->callstatus = mask;",
          "504:   }",
          "505:   return ci;",
          "",
          "[Removed Lines]",
          "489: static CallInfo *prepCallInfo (lua_State *L, StkId func, int nresults,",
          "490:                                              int delta1, int mask) {",
          "502:     ci->nresults = nresults;",
          "",
          "[Added Lines]",
          "489: static CallInfo *prepCallInfo (lua_State *L, StkId func, int retdel,",
          "490:                                              int mask) {",
          "501:     ci->nresults = retdel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:   lua_CFunction f;",
          "523:  retry:",
          "524:   switch (ttypetag(s2v(func))) {",
          "",
          "[Removed Lines]",
          "521: CallInfo *luaD_precall (lua_State *L, StkId func, int nresults, int delta1) {",
          "",
          "[Added Lines]",
          "520: CallInfo *luaD_precall (lua_State *L, StkId func, int retdel) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "532:       CallInfo *ci;",
          "535:       ci->top = L->top + LUA_MINSTACK;",
          "536:       lua_assert(ci->top <= L->stack_last);",
          "537:       if (l_unlikely(L->hookmask & LUA_MASKCALL)) {",
          "",
          "[Removed Lines]",
          "534:       ci = prepCallInfo(L, func, nresults, delta1, CIST_C);",
          "",
          "[Added Lines]",
          "533:       ci = prepCallInfo(L, func, retdel, CIST_C);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "552:       int nfixparams = p->numparams;",
          "554:       checkstackGCp(L, fsize, func);",
          "557:       ci->top = func + 1 + fsize;",
          "558:       for (; narg < nfixparams; narg++)",
          "",
          "[Removed Lines]",
          "555:       ci = prepCallInfo(L, func, nresults, delta1, 0);",
          "",
          "[Added Lines]",
          "554:       ci = prepCallInfo(L, func, retdel, 0);",
          "",
          "---------------"
        ],
        "ldo.h||ldo.h": [
          "File: ldo.h -> ldo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  luaD_checkstackaux(L, (fsize), luaC_checkGC(L), (void)0)",
          "53: typedef void (*Pfunc) (lua_State *L, void *ud);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #define delta2retdel(d)  (-(d) + LUA_MULTRET - 1)",
          "60: #define retdel2delta(d)  (-(d) + LUA_MULTRET - 1)",
          "61: #define isdelta(rd) ((rd) < LUA_MULTRET)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: LUAI_FUNC void luaD_hook (lua_State *L, int event, int line,",
          "59:                                         int fTransfer, int nTransfer);",
          "60: LUAI_FUNC void luaD_hookcall (lua_State *L, CallInfo *ci);",
          "63: LUAI_FUNC void luaD_call (lua_State *L, StkId func, int nResults);",
          "64: LUAI_FUNC void luaD_callnoyield (lua_State *L, StkId func, int nResults);",
          "65: LUAI_FUNC void luaD_tryfuncTM (lua_State *L, StkId func);",
          "",
          "[Removed Lines]",
          "61: LUAI_FUNC CallInfo *luaD_precall (lua_State *L, StkId func, int nresults,",
          "62:                                                             int delta1);",
          "",
          "[Added Lines]",
          "73: LUAI_FUNC CallInfo *luaD_precall (lua_State *L, StkId func, int retdel);",
          "",
          "---------------"
        ],
        "lvm.c||lvm.c": [
          "File: lvm.c -> lvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1638:           ci = newci;",
          "",
          "[Removed Lines]",
          "1635:         if ((newci = luaD_precall(L, ra, nresults, 0)) == NULL)",
          "",
          "[Added Lines]",
          "1635:         if ((newci = luaD_precall(L, ra, nresults)) == NULL)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d526e75a7f45a2593e874d97c7fdfa0e45cc013",
      "candidate_info": {
        "commit_hash": "7d526e75a7f45a2593e874d97c7fdfa0e45cc013",
        "repo": "lua/lua",
        "commit_url": "https://github.com/lua/lua/commit/7d526e75a7f45a2593e874d97c7fdfa0e45cc013",
        "files": [
          "lvm.c",
          "testes/calls.lua"
        ],
        "message": "Fixed bug in tail calls of __call chains\n\nA tail call of a __call chain (a __call metamethod that itself is\nalso not a function) was being perfomed as a regular call.",
        "before_after_code_files": [
          "lvm.c||lvm.c",
          "testes/calls.lua||testes/calls.lua"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lvm.c||lvm.c"
          ],
          "candidate": [
            "lvm.c||lvm.c"
          ]
        }
      },
      "candidate_diff": {
        "lvm.c||lvm.c": [
          "File: lvm.c -> lvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1549:           luaF_close(L, base, NOCLOSINGMETH);",
          "1550:           lua_assert(base == ci->func + 1);",
          "1551:         }",
          "1555:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1555:           checkstackp(L, 1, ra);",
          "",
          "---------------"
        ],
        "testes/calls.lua||testes/calls.lua": [
          "File: testes/calls.lua -> testes/calls.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: deep(10)",
          "108: deep(180)",
          "111: function deep (n) if n>0 then return deep(n-1) else return 101 end end",
          "112: assert(deep(30000) == 101)",
          "113: a = {}",
          "",
          "[Removed Lines]",
          "110: -- testing tail calls",
          "",
          "[Added Lines]",
          "111: print\"testing tail calls\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   assert(X == 10 and Y == 20 and #A == 1 and A[1] == 30)",
          "149: end",
          "151: print('+')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: do   -- tail calls x chain of __call",
          "156:   local n = 10000   -- depth",
          "158:   local function foo ()",
          "159:     if n == 0 then return 1023",
          "160:     else n = n - 1; return foo()",
          "161:     end",
          "162:   end",
          "164:   -- build a chain of __call metamethods ending in function 'foo'",
          "165:   for i = 1, 100 do",
          "166:     foo = setmetatable({}, {__call = foo})",
          "167:   end",
          "169:   -- call the first one as a tail call in a new coroutine",
          "170:   -- (to ensure stack is not preallocated)",
          "171:   assert(coroutine.wrap(function() return foo() end)() == 1023)",
          "172: end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17dbaa8639505c9ad1a9946591f5960123fbd741",
      "candidate_info": {
        "commit_hash": "17dbaa8639505c9ad1a9946591f5960123fbd741",
        "repo": "lua/lua",
        "commit_url": "https://github.com/lua/lua/commit/17dbaa8639505c9ad1a9946591f5960123fbd741",
        "files": [
          "ldebug.c",
          "ldo.c",
          "lstate.c",
          "lstate.h",
          "lua.c"
        ],
        "message": "Improvements in the handling of signals\n\nAdded 'volatile' to 'l_signalT' variables plus some minor changes.",
        "before_after_code_files": [
          "ldebug.c||ldebug.c",
          "ldo.c||ldo.c",
          "lstate.c||lstate.c",
          "lstate.h||lstate.h",
          "lua.c||lua.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ldo.c||ldo.c"
          ],
          "candidate": [
            "ldo.c||ldo.c"
          ]
        }
      },
      "candidate_diff": {
        "ldebug.c||ldebug.c": [
          "File: ldebug.c -> ldebug.c"
        ],
        "ldo.c||ldo.c": [
          "File: ldo.c -> ldo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "425: #define next_ci(L)  (L->ci = (L->ci->next ? L->ci->next : luaE_extendCI(L)))",
          "",
          "[Added Lines]",
          "425: #define next_ci(L)  (L->ci->next ? L->ci->next : luaE_extendCI(L))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:       f = fvalue(s2v(func));",
          "467:      Cfunc: {",
          "472:       ci->nresults = nresults;",
          "473:       ci->callstatus = CIST_C;",
          "474:       ci->top = L->top + LUA_MINSTACK;",
          "475:       ci->func = func;",
          "476:       lua_assert(ci->top <= L->stack_last);",
          "477:       if (L->hookmask & LUA_MASKCALL) {",
          "478:         int narg = cast_int(L->top - func) - 1;",
          "",
          "[Removed Lines]",
          "469:       CallInfo *ci;",
          "471:       ci = next_ci(L);",
          "",
          "[Added Lines]",
          "469:       CallInfo *ci = next_ci(L);",
          "475:       L->ci = ci;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486:       break;",
          "487:     }",
          "490:       Proto *p = clLvalue(s2v(func))->p;",
          "492:       int nfixparams = p->numparams;",
          "494:       checkstackp(L, fsize, func);",
          "496:       ci->nresults = nresults;",
          "498:       ci->callstatus = 0;",
          "499:       ci->top = func + 1 + fsize;",
          "500:       ci->func = func;",
          "501:       for (; narg < nfixparams; narg++)",
          "503:       lua_assert(ci->top <= L->stack_last);",
          "",
          "[Removed Lines]",
          "489:       CallInfo *ci;",
          "495:       ci = next_ci(L);",
          "",
          "[Added Lines]",
          "489:       CallInfo *ci = next_ci(L);",
          "500:       L->ci = ci;",
          "",
          "---------------"
        ],
        "lstate.c||lstate.c": [
          "File: lstate.c -> lstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191: void luaE_shrinkCI (lua_State *L) {",
          "192:   CallInfo *ci = L->ci;",
          "200:     next2->previous = ci;",
          "202:   }",
          "",
          "[Removed Lines]",
          "196:   while (ci->next != NULL && (next2 = ci->next->next) != NULL) {",
          "198:     L->nci--;",
          "",
          "[Added Lines]",
          "193:   CallInfo *next;",
          "197:   while ((next = ci->next) != NULL && (next2 = next->next) != NULL) {",
          "201:     L->nci--;",
          "",
          "---------------"
        ],
        "lstate.h||lstate.h": [
          "File: lstate.h -> lstate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:   union {",
          "175:       const Instruction *savedpc;",
          "178:     } l;",
          "",
          "[Removed Lines]",
          "176:       l_signalT trap;",
          "",
          "[Added Lines]",
          "176:       volatile l_signalT trap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:   int stacksize;",
          "301:   int basehookcount;",
          "302:   int hookcount;",
          "304: };",
          "",
          "[Removed Lines]",
          "303:   l_signalT hookmask;",
          "",
          "[Added Lines]",
          "303:   volatile l_signalT hookmask;",
          "",
          "---------------"
        ],
        "lua.c||lua.c": [
          "File: lua.c -> lua.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: static void laction (int i) {",
          "59: }",
          "",
          "[Removed Lines]",
          "58:   lua_sethook(globalL, lstop, LUA_MASKCALL | LUA_MASKRET | LUA_MASKCOUNT, 1);",
          "",
          "[Added Lines]",
          "57:   int flag = LUA_MASKCALL | LUA_MASKRET | LUA_MASKLINE | LUA_MASKCOUNT;",
          "59:   lua_sethook(globalL, lstop, flag, 1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04e19712a5d48b84869f9942836ff8314fb0be8e",
      "candidate_info": {
        "commit_hash": "04e19712a5d48b84869f9942836ff8314fb0be8e",
        "repo": "lua/lua",
        "commit_url": "https://github.com/lua/lua/commit/04e19712a5d48b84869f9942836ff8314fb0be8e",
        "files": [
          "ldo.c",
          "lvm.c",
          "testes/coroutine.lua",
          "testes/errors.lua"
        ],
        "message": "C functions can be tail called, too\n\nA tail call to a C function can have the behavior of a \"real\" tail\ncall, reusing the stack frame of the caller.",
        "before_after_code_files": [
          "ldo.c||ldo.c",
          "lvm.c||lvm.c",
          "testes/coroutine.lua||testes/coroutine.lua",
          "testes/errors.lua||testes/errors.lua"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ldo.c||ldo.c",
            "lvm.c||lvm.c"
          ],
          "candidate": [
            "ldo.c||ldo.c",
            "lvm.c||lvm.c"
          ]
        }
      },
      "candidate_diff": {
        "ldo.c||ldo.c": [
          "File: ldo.c -> ldo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482:   int i;",
          "485:     setobjs2s(L, prevf + i, func + i);",
          "487: }",
          "",
          "[Removed Lines]",
          "481: static void moveparams (lua_State *L, StkId prevf, StkId func, int narg) {",
          "",
          "[Added Lines]",
          "481: static void moveparams (lua_State *L, StkId prevf, StkId func) {",
          "486: }",
          "489: static CallInfo *prepCallInfo (lua_State *L, StkId func, int nresults,",
          "490:                                              int delta1, int mask) {",
          "491:   CallInfo *ci;",
          "496:     ci->callstatus |= mask | CIST_TAIL;",
          "497:     moveparams(L, ci->func, func);",
          "498:   }",
          "501:     ci->func = func;",
          "502:     ci->nresults = nresults;",
          "503:     ci->callstatus = mask;",
          "504:   }",
          "505:   return ci;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "513:       CallInfo *ci;",
          "518:       ci->top = L->top + LUA_MINSTACK;",
          "520:       lua_assert(ci->top <= L->stack_last);",
          "521:       if (l_unlikely(L->hookmask & LUA_MASKCALL)) {",
          "522:         int narg = cast_int(L->top - func) - 1;",
          "",
          "[Removed Lines]",
          "515:       L->ci = ci = next_ci(L);",
          "516:       ci->nresults = nresults;",
          "517:       ci->callstatus = CIST_C;",
          "519:       ci->func = func;",
          "",
          "[Added Lines]",
          "534:       ci = prepCallInfo(L, func, nresults, delta1, CIST_C);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:       int nfixparams = p->numparams;",
          "538:       checkstackGCp(L, fsize, func);",
          "550:       ci->top = func + 1 + fsize;",
          "551:       for (; narg < nfixparams; narg++)",
          "",
          "[Removed Lines]",
          "542:         moveparams(L, ci->func, func, narg);",
          "543:       }",
          "546:         ci->func = func;",
          "547:         ci->nresults = nresults;",
          "548:       }",
          "",
          "[Added Lines]",
          "555:       ci = prepCallInfo(L, func, nresults, delta1, 0);",
          "",
          "---------------"
        ],
        "lvm.c||lvm.c": [
          "File: lvm.c -> lvm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1638:           ci = newci;",
          "1640:           goto startfunc;",
          "1641:         }",
          "1642:         vmbreak;",
          "",
          "[Removed Lines]",
          "1639:           ci->callstatus = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1656:           lua_assert(base == ci->func + 1);",
          "1657:         }",
          "1663:           updatetrap(ci);",
          "1669:         }",
          "1670:       }",
          "",
          "[Removed Lines]",
          "1659:           ci->callstatus |= CIST_TAIL;",
          "1661:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "testes/coroutine.lua||testes/coroutine.lua": [
          "File: testes/coroutine.lua -> testes/coroutine.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   co = coroutine.create(function () return pcall(foo) end)",
          "206:   local st1, st2, err = coroutine.resume(co)",
          "207:   assert(st1 and not st2 and err == 43)",
          "210:   -- recovering from errors in __close metamethods",
          "211:   local track = {}",
          "",
          "[Removed Lines]",
          "208:   assert(X == 43 and Y.name == \"pcall\")",
          "",
          "[Added Lines]",
          "208:   assert(X == 43 and Y.what == \"C\")",
          "",
          "---------------"
        ],
        "testes/errors.lua||testes/errors.lua": [
          "File: testes/errors.lua -> testes/errors.lua",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: local function checkmessage (prog, msg, debug)",
          "28:   local m = doit(prog)",
          "30:   assert(string.find(m, msg, 1, true))",
          "31: end",
          "",
          "[Removed Lines]",
          "29:   if debug then print(m) end",
          "",
          "[Added Lines]",
          "29:   if debug then print(m, msg) end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290: checkmessage([[  -- tail call",
          "291:   return math.sin(\"a\")",
          "294: checkmessage([[collectgarbage(\"nooption\")]], \"invalid option\")",
          "",
          "[Removed Lines]",
          "292: ]], \"'sin'\")",
          "",
          "[Added Lines]",
          "292: ]], \"sin\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}