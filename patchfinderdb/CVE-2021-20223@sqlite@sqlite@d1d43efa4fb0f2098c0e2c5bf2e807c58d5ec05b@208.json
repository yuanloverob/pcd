{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b48c0d59faf3bfd3e1fc0c3bed5557816c36cb7e",
      "candidate_info": {
        "commit_hash": "b48c0d59faf3bfd3e1fc0c3bed5557816c36cb7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b48c0d59faf3bfd3e1fc0c3bed5557816c36cb7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/backup.c",
          "src/btree.c",
          "src/btreeInt.h",
          "src/ctime.c",
          "src/global.c",
          "src/main.c",
          "src/pager.c",
          "src/pager.h",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/tclsqlite.c",
          "src/test1.c",
          "src/test_config.c",
          "src/test_thread.c",
          "src/util.c",
          "src/vacuum.c",
          "src/wal.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Simplify the code by removing the unsupported and undocumented SQLITE_HAS_CODEC compile-time option\n\nFossilOrigin-Name: 5a877221ce90e7523059353a68650c5fdd28ed032807afc2f10afbfbf864bdfe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/backup.c||src/backup.c",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h",
          "src/ctime.c||src/ctime.c",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/tclsqlite.c||src/tclsqlite.c",
          "src/test1.c||src/test1.c",
          "src/test_config.c||src/test_config.c",
          "src/test_thread.c||src/test_thread.c",
          "src/util.c||src/util.c",
          "src/vacuum.c||src/vacuum.c",
          "src/wal.c||src/wal.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a8a7c05b16f6c73ac55c359fbf62cae4a76eb0d105a3c53e9f47cede9fd85916",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:   if( rc==SQLITE_OK && pNew->zDbSName==0 ){",
          "188:     rc = SQLITE_NOMEM_BKPT;",
          "189:   }",
          "226:   sqlite3_free( zPath );",
          "",
          "[Removed Lines]",
          "192: #ifdef SQLITE_HAS_CODEC",
          "193:   if( rc==SQLITE_OK ){",
          "194:     extern int sqlite3CodecAttach(sqlite3*, int, const void*, int);",
          "195:     extern void sqlite3CodecGetKey(sqlite3*, int, void**, int*);",
          "196:     int nKey;",
          "197:     char *zKey;",
          "198:     int t = sqlite3_value_type(argv[2]);",
          "199:     switch( t ){",
          "200:       case SQLITE_INTEGER:",
          "201:       case SQLITE_FLOAT:",
          "202:         zErrDyn = sqlite3DbStrDup(db, \"Invalid key value\");",
          "203:         rc = SQLITE_ERROR;",
          "204:         break;",
          "206:       case SQLITE_TEXT:",
          "207:       case SQLITE_BLOB:",
          "208:         nKey = sqlite3_value_bytes(argv[2]);",
          "209:         zKey = (char *)sqlite3_value_blob(argv[2]);",
          "210:         rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "211:         break;",
          "213:       case SQLITE_NULL:",
          "216:         if( sqlite3CodecQueryParameters(db, zName, zPath)==0 ){",
          "217:           sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);",
          "218:           if( nKey || sqlite3BtreeGetOptimalReserve(db->aDb[0].pBt)>0 ){",
          "219:             rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);",
          "220:           }",
          "221:         }",
          "222:         break;",
          "223:     }",
          "224:   }",
          "225: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:   int nDestPgsz = sqlite3BtreeGetPageSize(p->pDest);",
          "236:   const int nCopy = MIN(nSrcPgsz, nDestPgsz);",
          "237:   const i64 iEnd = (i64)iSrcPg*(i64)nSrcPgsz;",
          "245:   int rc = SQLITE_OK;",
          "246:   i64 iOff;",
          "",
          "[Removed Lines]",
          "238: #ifdef SQLITE_HAS_CODEC",
          "242:   int nSrcReserve = sqlite3BtreeGetReserveNoMutex(p->pSrc);",
          "243:   int nDestReserve = sqlite3BtreeGetOptimalReserve(p->pDest);",
          "244: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:     rc = SQLITE_READONLY;",
          "259:   }",
          "",
          "[Removed Lines]",
          "261: #ifdef SQLITE_HAS_CODEC",
          "265:   if( nSrcPgsz!=nDestPgsz && sqlite3PagerGetCodec(pDestPager)!=0 ){",
          "266:     rc = SQLITE_READONLY;",
          "267:   }",
          "274:   if( nSrcReserve!=nDestReserve ){",
          "275:     u32 newPgsz = nSrcPgsz;",
          "276:     rc = sqlite3PagerSetPagesize(pDestPager, &newPgsz, nSrcReserve);",
          "277:     if( rc==SQLITE_OK && newPgsz!=(u32)nSrcPgsz ) rc = SQLITE_READONLY;",
          "278:   }",
          "279: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "773:   b.pDest = pTo;",
          "774:   b.iNext = 1;",
          "",
          "[Removed Lines]",
          "776: #ifdef SQLITE_HAS_CODEC",
          "777:   sqlite3PagerAlignReserve(sqlite3BtreePager(pTo), sqlite3BtreePager(pFrom));",
          "778: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2859:   BtShared *pBt = p->pBt;",
          "2860:   assert( nReserve>=-1 && nReserve<=255 );",
          "2861:   sqlite3BtreeEnter(p);",
          "2865:   if( pBt->btsFlags & BTS_PAGESIZE_FIXED ){",
          "2866:     sqlite3BtreeLeave(p);",
          "2867:     return SQLITE_READONLY;",
          "",
          "[Removed Lines]",
          "2862: #if SQLITE_HAS_CODEC",
          "2863:   if( nReserve>pBt->optimalReserve ) pBt->optimalReserve = (u8)nReserve;",
          "2864: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2922:   int n;",
          "2923:   sqlite3BtreeEnter(p);",
          "2924:   n = sqlite3BtreeGetReserveNoMutex(p);",
          "2928:   sqlite3BtreeLeave(p);",
          "2929:   return n;",
          "2930: }",
          "",
          "[Removed Lines]",
          "2925: #ifdef SQLITE_HAS_CODEC",
          "2926:   if( n<p->pBt->optimalReserve ) n = p->pBt->optimalReserve;",
          "2927: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "417: #endif",
          "",
          "[Removed Lines]",
          "420: #ifdef SQLITE_HAS_CODEC",
          "422: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ctime.c||src/ctime.c": [
          "File: src/ctime.c -> src/ctime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355: #if SQLITE_FTS5_NO_WITHOUT_ROWID",
          "356:   \"FTS5_NO_WITHOUT_ROWID\",",
          "357: #endif",
          "361: #if HAVE_ISNAN || SQLITE_HAVE_ISNAN",
          "362:   \"HAVE_ISNAN\",",
          "363: #endif",
          "",
          "[Removed Lines]",
          "358: #if SQLITE_HAS_CODEC",
          "359:   \"HAS_CODEC\",",
          "360: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142: #ifndef SQLITE_USE_URI",
          "148: #endif",
          "",
          "[Removed Lines]",
          "143: # ifdef SQLITE_HAS_CODEC",
          "144: #  define SQLITE_USE_URI 1",
          "145: # else",
          "146: #  define SQLITE_USE_URI 0",
          "147: # endif",
          "",
          "[Added Lines]",
          "140: # define SQLITE_USE_URI 0",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3007:   return 0;",
          "3008: }",
          "",
          "[Removed Lines]",
          "3010: #if defined(SQLITE_HAS_CODEC)",
          "3016: int sqlite3CodecQueryParameters(",
          "3020: ){",
          "3021:   const char *zKey;",
          "3022:   if( zUri==0 ){",
          "3023:     return 0;",
          "3024:   }else if( (zKey = uriParameter(zUri, \"hexkey\"))!=0 && zKey[0] ){",
          "3025:     u8 iByte;",
          "3026:     int i;",
          "3027:     char zDecoded[40];",
          "3028:     for(i=0, iByte=0; i<sizeof(zDecoded)*2 && sqlite3Isxdigit(zKey[i]); i++){",
          "3029:       iByte = (iByte<<4) + sqlite3HexToInt(zKey[i]);",
          "3030:       if( (i&1)!=0 ) zDecoded[i/2] = iByte;",
          "3031:     }",
          "3032:     sqlite3_key_v2(db, zDb, zDecoded, i/2);",
          "3033:     return 1;",
          "3034:   }else if( (zKey = uriParameter(zUri, \"key\"))!=0 ){",
          "3035:     sqlite3_key_v2(db, zDb, zKey, sqlite3Strlen30(zKey));",
          "3036:     return 1;",
          "3037:   }else if( (zKey = uriParameter(zUri, \"textkey\"))!=0 ){",
          "3038:     sqlite3_key_v2(db, zDb, zKey, -1);",
          "3039:     return 1;",
          "3040:   }else{",
          "3041:     return 0;",
          "3042:   }",
          "3043: }",
          "3044: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3425:     void *pArg = sqlite3GlobalConfig.pSqllogArg;",
          "3426:     sqlite3GlobalConfig.xSqllog(pArg, db, zFilename, 0);",
          "3427:   }",
          "3431: #endif",
          "3432:   sqlite3_free(zOpen);",
          "3433:   return rc & 0xff;",
          "",
          "[Removed Lines]",
          "3428: #endif",
          "3429: #if defined(SQLITE_HAS_CODEC)",
          "3430:   if( rc==SQLITE_OK ) sqlite3CodecQueryParameters(db, 0, zOpen);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407: #define UNKNOWN_LOCK                (EXCLUSIVE_LOCK+1)",
          "",
          "[Removed Lines]",
          "412: #ifdef SQLITE_HAS_CODEC",
          "413: # define CODEC1(P,D,N,X,E) \\",
          "414:     if( P->xCodec && P->xCodec(P->pCodec,D,N,X)==0 ){ E; }",
          "415: # define CODEC2(P,D,N,X,E,O) \\",
          "416:     if( P->xCodec==0 ){ O=(char*)D; }else \\",
          "417:     if( (O=(char*)(P->xCodec(P->pCodec,D,N,X)))==0 ){ E; }",
          "418: #else",
          "420: # define CODEC2(P,D,N,X,E,O) O=(char*)D",
          "421: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "705: #endif",
          "716: #ifndef SQLITE_OMIT_WAL",
          "",
          "[Removed Lines]",
          "708: #ifdef SQLITE_HAS_CODEC",
          "713: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "837: int sqlite3PagerDirectReadOk(Pager *pPager, Pgno pgno){",
          "838:   if( pPager->fd->pMethods==0 ) return 0;",
          "839:   if( sqlite3PCacheIsDirty(pPager->pPCache) ) return 0;",
          "843: #ifndef SQLITE_OMIT_WAL",
          "844:   if( pPager->pWal ){",
          "845:     u32 iRead = 0;",
          "",
          "[Removed Lines]",
          "840: #ifdef SQLITE_HAS_CODEC",
          "841:   if( pPager->xCodec!=0 ) return 0;",
          "842: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1073:   if( pPager->errCode ){",
          "1074:     pPager->xGet = getPageError;",
          "1075: #if SQLITE_MAX_MMAP_SIZE>0",
          "1081:     pPager->xGet = getPageMMap;",
          "1083:   }else{",
          "",
          "[Removed Lines]",
          "1076:   }else if( USEFETCH(pPager)",
          "1077: #ifdef SQLITE_HAS_CODEC",
          "1078:    && pPager->xCodec==0",
          "1079: #endif",
          "1080:   ){",
          "",
          "[Added Lines]",
          "1053:   }else if( USEFETCH(pPager) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2225:   return cksum;",
          "2226: }",
          "",
          "[Removed Lines]",
          "2232: #ifdef SQLITE_HAS_CODEC",
          "2233: static void pagerReportSize(Pager *pPager){",
          "2234:   if( pPager->xCodecSizeChng ){",
          "2235:     pPager->xCodecSizeChng(pPager->pCodec, pPager->pageSize,",
          "2236:                            (int)pPager->nReserve);",
          "2237:   }",
          "2238: }",
          "2239: #else",
          "2241: #endif",
          "2243: #ifdef SQLITE_HAS_CODEC",
          "2249: void sqlite3PagerAlignReserve(Pager *pDest, Pager *pSrc){",
          "2250:   if( pDest->nReserve!=pSrc->nReserve ){",
          "2251:     pDest->nReserve = pSrc->nReserve;",
          "2252:     pagerReportSize(pDest);",
          "2253:   }",
          "2254: }",
          "2255: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2308: #ifdef SQLITE_HAS_CODEC",
          "2311:   const int jrnlEnc = (isMainJrnl || pPager->subjInMemory==0);",
          "2312: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2373:   if( pgno==1 && pPager->nReserve!=((u8*)aData)[20] ){",
          "2374:     pPager->nReserve = ((u8*)aData)[20];",
          "2376:   }",
          "",
          "[Removed Lines]",
          "2375:     pagerReportSize(pPager);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2450:     rc = sqlite3OsWrite(pPager->fd, (u8 *)aData, pPager->pageSize, ofst);",
          "2452:     if( pgno>pPager->dbFileSize ){",
          "2453:       pPager->dbFileSize = pgno;",
          "2454:     }",
          "2455:     if( pPager->pBackup ){",
          "2463:       sqlite3BackupUpdate(pPager->pBackup, pgno, (u8*)aData);",
          "2464:     }",
          "2465:   }else if( !isMainJrnl && pPg==0 ){",
          "",
          "[Removed Lines]",
          "2443: #ifdef SQLITE_HAS_CODEC",
          "2444:     if( !jrnlEnc ){",
          "2445:       CODEC2(pPager, aData, pgno, 7, rc=SQLITE_NOMEM_BKPT, aData);",
          "2446:       rc = sqlite3OsWrite(pPager->fd, (u8 *)aData, pPager->pageSize, ofst);",
          "2447:       CODEC1(pPager, aData, pgno, 3, rc=SQLITE_NOMEM_BKPT);",
          "2448:     }else",
          "2449: #endif",
          "2456: #ifdef SQLITE_HAS_CODEC",
          "2457:       if( jrnlEnc ){",
          "2458:         CODEC1(pPager, aData, pgno, 3, rc=SQLITE_NOMEM_BKPT);",
          "2459:         sqlite3BackupUpdate(pPager->pBackup, pgno, (u8*)aData);",
          "2460:         CODEC2(pPager, aData, pgno, 7, rc=SQLITE_NOMEM_BKPT,aData);",
          "2461:       }else",
          "2462: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2510:     if( pgno==1 ){",
          "2511:       memcpy(&pPager->dbFileVers, &((u8*)pData)[24],sizeof(pPager->dbFileVers));",
          "2512:     }",
          "2518:     sqlite3PcacheRelease(pPg);",
          "2519:   }",
          "2520:   return rc;",
          "",
          "[Removed Lines]",
          "2515: #if SQLITE_HAS_CODEC",
          "2516:     if( jrnlEnc ){ CODEC1(pPager, pData, pPg->pgno, 3, rc=SQLITE_NOMEM_BKPT); }",
          "2517: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3074:       memcpy(&pPager->dbFileVers, dbFileVers, sizeof(pPager->dbFileVers));",
          "3075:     }",
          "3076:   }",
          "3079:   PAGER_INCR(sqlite3_pager_readdb_count);",
          "3080:   PAGER_INCR(pPager->nRead);",
          "3081:   IOTRACE((\"PGIN %p %d\\n\", pPager, pPg->pgno));",
          "",
          "[Removed Lines]",
          "3077:   CODEC1(pPager, pPg->pData, pPg->pgno, 3, rc = SQLITE_NOMEM_BKPT);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3819:     if( nReserve<0 ) nReserve = pPager->nReserve;",
          "3820:     assert( nReserve>=0 && nReserve<1000 );",
          "3821:     pPager->nReserve = (i16)nReserve;",
          "3823:     pagerFixMaplimit(pPager);",
          "3824:   }",
          "3825:   return rc;",
          "",
          "[Removed Lines]",
          "3822:     pagerReportSize(pPager);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4215:   sqlite3OsClose(pPager->fd);",
          "4216:   sqlite3PageFree(pTmp);",
          "4217:   sqlite3PcacheClose(pPager->pPCache);",
          "4223:   assert( !pPager->aSavepoint && !pPager->pInJournal );",
          "4224:   assert( !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) );",
          "",
          "[Removed Lines]",
          "4219: #ifdef SQLITE_HAS_CODEC",
          "4220:   if( pPager->xCodecFree ) pPager->xCodecFree(pPager->pCodec);",
          "4221: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4470:       assert( (pList->flags&PGHDR_NEED_SYNC)==0 );",
          "4471:       if( pList->pgno==1 ) pager_write_changecounter(pList);",
          "4477:       rc = sqlite3OsWrite(pPager->fd, pData, pPager->pageSize, offset);",
          "",
          "[Removed Lines]",
          "4474:       CODEC2(pPager, pList->pData, pgno, 6, return SQLITE_NOMEM_BKPT, pData);",
          "",
          "[Added Lines]",
          "4384:       pData = pList->pData;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4560:       void *pData = pPg->pData;",
          "4561:       i64 offset = (i64)pPager->nSubRec*(4+pPager->pageSize);",
          "4562:       char *pData2;",
          "4569:       pData2 = pData;",
          "4570:       PAGERTRACE((\"STMT-JOURNAL %d page %d\\n\", PAGERID(pPager), pPg->pgno));",
          "4571:       rc = write32bits(pPager->sjfd, offset, pPg->pgno);",
          "",
          "[Removed Lines]",
          "4564: #if SQLITE_HAS_CODEC",
          "4565:       if( !pPager->subjInMemory ){",
          "4566:         CODEC2(pPager, pData, pPg->pgno, 7, return SQLITE_NOMEM_BKPT, pData2);",
          "4567:       }else",
          "4568: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5647:   );",
          "5649:   assert( USEFETCH(pPager) );",
          "",
          "[Removed Lines]",
          "5650: #ifdef SQLITE_HAS_CODEC",
          "5651:   assert( pPager->xCodec==0 );",
          "5652: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5978:   assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );",
          "5980:   assert( pPager->journalHdr<=pPager->journalOff );",
          "5982:   cksum = pager_cksum(pPager, (u8*)pData2);",
          "",
          "[Removed Lines]",
          "5981:   CODEC2(pPager, pPg->pData, pPg->pgno, 7, return SQLITE_NOMEM_BKPT, pData2);",
          "",
          "[Added Lines]",
          "5882:   pData2 = pPg->pData;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6343:       if( DIRECT_MODE ){",
          "6344:         const void *zBuf;",
          "6345:         assert( pPager->dbFileSize>0 );",
          "6347:         if( rc==SQLITE_OK ){",
          "6348:           rc = sqlite3OsWrite(pPager->fd, zBuf, pPager->pageSize, 0);",
          "6349:           pPager->aStat[PAGER_STAT_WRITE]++;",
          "",
          "[Removed Lines]",
          "6346:         CODEC2(pPager, pPgHdr->pData, 1, 6, rc=SQLITE_NOMEM_BKPT, zBuf);",
          "",
          "[Added Lines]",
          "6247:         zBuf = pPgHdr->pData;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "7102:   return pPager->zJournal;",
          "7103: }",
          "7153: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "",
          "[Removed Lines]",
          "7105: #ifdef SQLITE_HAS_CODEC",
          "7109: void sqlite3PagerSetCodec(",
          "7110:   Pager *pPager,",
          "7111:   void *(*xCodec)(void*,void*,Pgno,int),",
          "7112:   void (*xCodecSizeChng)(void*,int,int),",
          "7113:   void (*xCodecFree)(void*),",
          "7114:   void *pCodec",
          "7115: ){",
          "7116:   if( pPager->xCodecFree ){",
          "7117:     pPager->xCodecFree(pPager->pCodec);",
          "7118:   }else{",
          "7119:     pager_reset(pPager);",
          "7120:   }",
          "7121:   pPager->xCodec = pPager->memDb ? 0 : xCodec;",
          "7122:   pPager->xCodecSizeChng = xCodecSizeChng;",
          "7123:   pPager->xCodecFree = xCodecFree;",
          "7124:   pPager->pCodec = pCodec;",
          "7125:   setGetterMethod(pPager);",
          "7126:   pagerReportSize(pPager);",
          "7127: }",
          "7128: void *sqlite3PagerGetCodec(Pager *pPager){",
          "7129:   return pPager->pCodec;",
          "7130: }",
          "7139: void *sqlite3PagerCodec(PgHdr *pPg){",
          "7140:   void *aData = 0;",
          "7141:   CODEC2(pPg->pPager, pPg->pData, pPg->pgno, 6, return 0, aData);",
          "7142:   return aData;",
          "7143: }",
          "7148: int sqlite3PagerState(Pager *pPager){",
          "7149:   return pPager->eState;",
          "7150: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129: void sqlite3PagerSetBusyHandler(Pager*, int(*)(void *), void *);",
          "130: int sqlite3PagerSetPagesize(Pager*, u32*, int);",
          "134: int sqlite3PagerMaxPageCount(Pager*, int);",
          "135: void sqlite3PagerSetCachesize(Pager*, int);",
          "136: int sqlite3PagerSetSpillsize(Pager*, int);",
          "",
          "[Removed Lines]",
          "131: #ifdef SQLITE_HAS_CODEC",
          "132: void sqlite3PagerAlignReserve(Pager*,Pager*);",
          "133: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225: void sqlite3PagerRekey(DbPage*, Pgno, u16);",
          "232: #if !defined(NDEBUG) || defined(SQLITE_TEST)",
          "233:   Pgno sqlite3PagerPagenumber(DbPage*);",
          "",
          "[Removed Lines]",
          "227: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_WAL)",
          "228: void *sqlite3PagerCodec(DbPage *);",
          "229: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2215:   }",
          "2216: #endif",
          "2260:   case PragTyp_ACTIVATE_EXTENSIONS: if( zRight ){",
          "2267:     if( sqlite3StrNICmp(zRight, \"cerod-\", 6)==0 ){",
          "2268:       sqlite3_activate_cerod(&zRight[6]);",
          "2269:     }",
          "2271:   }",
          "2272:   break;",
          "2273: #endif",
          "",
          "[Removed Lines]",
          "2218: #ifdef SQLITE_HAS_CODEC",
          "2228:   case PragTyp_KEY: {",
          "2229:     if( zRight ){",
          "2230:       char zBuf[40];",
          "2231:       const char *zKey = zRight;",
          "2232:       int n;",
          "2233:       if( pPragma->iArg==2 || pPragma->iArg==3 ){",
          "2234:         u8 iByte;",
          "2235:         int i;",
          "2236:         for(i=0, iByte=0; i<sizeof(zBuf)*2 && sqlite3Isxdigit(zRight[i]); i++){",
          "2237:           iByte = (iByte<<4) + sqlite3HexToInt(zRight[i]);",
          "2238:           if( (i&1)!=0 ) zBuf[i/2] = iByte;",
          "2239:         }",
          "2240:         zKey = zBuf;",
          "2241:         n = i/2;",
          "2242:       }else{",
          "2243:         n = pPragma->iArg<4 ? sqlite3Strlen30(zRight) : -1;",
          "2244:       }",
          "2245:       if( (pPragma->iArg & 1)==0 ){",
          "2246:         rc = sqlite3_key_v2(db, zDb, zKey, n);",
          "2247:       }else{",
          "2248:         rc = sqlite3_rekey_v2(db, zDb, zKey, n);",
          "2249:       }",
          "2250:       if( rc==SQLITE_OK && n!=0 ){",
          "2251:         sqlite3VdbeSetNumCols(v, 1);",
          "2252:         sqlite3VdbeSetColName(v, 0, COLNAME_NAME, \"ok\", SQLITE_STATIC);",
          "2253:         returnSingleText(v, \"ok\");",
          "2254:       }",
          "2255:     }",
          "2256:     break;",
          "2257:   }",
          "2258: #endif",
          "2259: #if defined(SQLITE_HAS_CODEC) || defined(SQLITE_ENABLE_CEROD)",
          "2261: #ifdef SQLITE_HAS_CODEC",
          "2262:     if( sqlite3StrNICmp(zRight, \"see-\", 4)==0 ){",
          "2263:       sqlite3_activate_see(&zRight[4]);",
          "2264:     }",
          "2265: #endif",
          "2266: #ifdef SQLITE_ENABLE_CEROD",
          "2270: #endif",
          "",
          "[Added Lines]",
          "2218: #if defined(SQLITE_ENABLE_CEROD)",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "8: #define PragTyp_HEADER_VALUE                   0",
          "9: #define PragTyp_AUTO_VACUUM                    1",
          "10: #define PragTyp_FLAG                           2",
          "11: #define PragTyp_BUSY_TIMEOUT                   3",
          "12: #define PragTyp_CACHE_SIZE                     4",
          "13: #define PragTyp_CACHE_SPILL                    5",
          "14: #define PragTyp_CASE_SENSITIVE_LIKE            6",
          "15: #define PragTyp_COLLATION_LIST                 7",
          "16: #define PragTyp_COMPILE_OPTIONS                8",
          "17: #define PragTyp_DATA_STORE_DIRECTORY           9",
          "18: #define PragTyp_DATABASE_LIST                 10",
          "19: #define PragTyp_DEFAULT_CACHE_SIZE            11",
          "20: #define PragTyp_ENCODING                      12",
          "21: #define PragTyp_FOREIGN_KEY_CHECK             13",
          "22: #define PragTyp_FOREIGN_KEY_LIST              14",
          "23: #define PragTyp_FUNCTION_LIST                 15",
          "24: #define PragTyp_HARD_HEAP_LIMIT               16",
          "25: #define PragTyp_INCREMENTAL_VACUUM            17",
          "26: #define PragTyp_INDEX_INFO                    18",
          "27: #define PragTyp_INDEX_LIST                    19",
          "28: #define PragTyp_INTEGRITY_CHECK               20",
          "29: #define PragTyp_JOURNAL_MODE                  21",
          "30: #define PragTyp_JOURNAL_SIZE_LIMIT            22",
          "31: #define PragTyp_LOCK_PROXY_FILE               23",
          "32: #define PragTyp_LOCKING_MODE                  24",
          "33: #define PragTyp_PAGE_COUNT                    25",
          "34: #define PragTyp_MMAP_SIZE                     26",
          "35: #define PragTyp_MODULE_LIST                   27",
          "36: #define PragTyp_OPTIMIZE                      28",
          "37: #define PragTyp_PAGE_SIZE                     29",
          "38: #define PragTyp_PRAGMA_LIST                   30",
          "39: #define PragTyp_SECURE_DELETE                 31",
          "40: #define PragTyp_SHRINK_MEMORY                 32",
          "41: #define PragTyp_SOFT_HEAP_LIMIT               33",
          "42: #define PragTyp_SYNCHRONOUS                   34",
          "43: #define PragTyp_TABLE_INFO                    35",
          "44: #define PragTyp_TEMP_STORE                    36",
          "45: #define PragTyp_TEMP_STORE_DIRECTORY          37",
          "46: #define PragTyp_THREADS                       38",
          "47: #define PragTyp_WAL_AUTOCHECKPOINT            39",
          "48: #define PragTyp_WAL_CHECKPOINT                40",
          "49: #define PragTyp_ACTIVATE_EXTENSIONS           41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "52: #define PragTyp_STATS                         44",
          "",
          "[Added Lines]",
          "8: #define PragTyp_ACTIVATE_EXTENSIONS            0",
          "9: #define PragTyp_HEADER_VALUE                   1",
          "10: #define PragTyp_AUTO_VACUUM                    2",
          "11: #define PragTyp_FLAG                           3",
          "12: #define PragTyp_BUSY_TIMEOUT                   4",
          "13: #define PragTyp_CACHE_SIZE                     5",
          "14: #define PragTyp_CACHE_SPILL                    6",
          "15: #define PragTyp_CASE_SENSITIVE_LIKE            7",
          "16: #define PragTyp_COLLATION_LIST                 8",
          "17: #define PragTyp_COMPILE_OPTIONS                9",
          "18: #define PragTyp_DATA_STORE_DIRECTORY          10",
          "19: #define PragTyp_DATABASE_LIST                 11",
          "20: #define PragTyp_DEFAULT_CACHE_SIZE            12",
          "21: #define PragTyp_ENCODING                      13",
          "22: #define PragTyp_FOREIGN_KEY_CHECK             14",
          "23: #define PragTyp_FOREIGN_KEY_LIST              15",
          "24: #define PragTyp_FUNCTION_LIST                 16",
          "25: #define PragTyp_HARD_HEAP_LIMIT               17",
          "26: #define PragTyp_INCREMENTAL_VACUUM            18",
          "27: #define PragTyp_INDEX_INFO                    19",
          "28: #define PragTyp_INDEX_LIST                    20",
          "29: #define PragTyp_INTEGRITY_CHECK               21",
          "30: #define PragTyp_JOURNAL_MODE                  22",
          "31: #define PragTyp_JOURNAL_SIZE_LIMIT            23",
          "32: #define PragTyp_LOCK_PROXY_FILE               24",
          "33: #define PragTyp_LOCKING_MODE                  25",
          "34: #define PragTyp_PAGE_COUNT                    26",
          "35: #define PragTyp_MMAP_SIZE                     27",
          "36: #define PragTyp_MODULE_LIST                   28",
          "37: #define PragTyp_OPTIMIZE                      29",
          "38: #define PragTyp_PAGE_SIZE                     30",
          "39: #define PragTyp_PRAGMA_LIST                   31",
          "40: #define PragTyp_SECURE_DELETE                 32",
          "41: #define PragTyp_SHRINK_MEMORY                 33",
          "42: #define PragTyp_SOFT_HEAP_LIMIT               34",
          "43: #define PragTyp_SYNCHRONOUS                   35",
          "44: #define PragTyp_TABLE_INFO                    36",
          "45: #define PragTyp_TEMP_STORE                    37",
          "46: #define PragTyp_TEMP_STORE_DIRECTORY          38",
          "47: #define PragTyp_THREADS                       39",
          "48: #define PragTyp_WAL_AUTOCHECKPOINT            40",
          "49: #define PragTyp_WAL_CHECKPOINT                41",
          "50: #define PragTyp_LOCK_STATUS                   42",
          "51: #define PragTyp_STATS                         43",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134: } PragmaName;",
          "135: static const PragmaName aPragmaName[] = {",
          "137:  {/* zName:     */ \"activate_extensions\",",
          "",
          "[Removed Lines]",
          "136: #if defined(SQLITE_HAS_CODEC) || defined(SQLITE_ENABLE_CEROD)",
          "",
          "[Added Lines]",
          "135: #if defined(SQLITE_ENABLE_CEROD)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "344: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "345: #if !defined(SQLITE_OMIT_CHECK)",
          "346:  {/* zName:     */ \"ignore_check_constraints\",",
          "",
          "[Removed Lines]",
          "332: #if defined(SQLITE_HAS_CODEC)",
          "333:  {/* zName:     */ \"hexkey\",",
          "338:  {/* zName:     */ \"hexrekey\",",
          "343: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "395: #endif",
          "403: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "404:  {/* zName:     */ \"legacy_alter_table\",",
          "",
          "[Removed Lines]",
          "396: #if defined(SQLITE_HAS_CODEC)",
          "397:  {/* zName:     */ \"key\",",
          "402: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "519:  {/* zName:     */ \"reverse_unordered_selects\",",
          "",
          "[Removed Lines]",
          "510: #endif",
          "511: #if defined(SQLITE_HAS_CODEC)",
          "512:  {/* zName:     */ \"rekey\",",
          "517: #endif",
          "518: #if !defined(SQLITE_OMIT_FLAG_PRAGMAS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "614: #endif",
          "615:  {/* zName:     */ \"threads\",",
          "",
          "[Removed Lines]",
          "602: #endif",
          "603: #if defined(SQLITE_HAS_CODEC)",
          "604:  {/* zName:     */ \"textkey\",",
          "609:  {/* zName:     */ \"textrekey\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "5817:   void(*)(void*,sqlite3*,int eTextRep,const void*)",
          "5818: );",
          "5865: #ifdef SQLITE_ENABLE_CEROD",
          "",
          "[Removed Lines]",
          "5820: #ifdef SQLITE_HAS_CODEC",
          "5828: int sqlite3_key(",
          "5831: );",
          "5832: int sqlite3_key_v2(",
          "5836: );",
          "5846: int sqlite3_rekey(",
          "5849: );",
          "5850: int sqlite3_rekey_v2(",
          "5854: );",
          "5860: void sqlite3_activate_see(",
          "5862: );",
          "5863: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4113: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "4114: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "4115:                     sqlite3_vfs**,char**,char **);",
          "4121: Btree *sqlite3DbNameToBtree(sqlite3*,const char*);",
          "4123: #ifdef SQLITE_UNTESTABLE",
          "",
          "[Removed Lines]",
          "4116: #ifdef SQLITE_HAS_CODEC",
          "4117:   int sqlite3CodecQueryParameters(sqlite3*,const char*,const char*);",
          "4118: #else",
          "4119: # define sqlite3CodecQueryParameters(A,B,C) 0",
          "4120: #endif",
          "",
          "[Added Lines]",
          "4116: #define sqlite3CodecQueryParameters(A,B,C) 0",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3096:   case DB_REKEY: {",
          "3101:     if( objc!=3 ){",
          "3102:       Tcl_WrongNumArgs(interp, 2, objv, \"KEY\");",
          "3103:       return TCL_ERROR;",
          "3104:     }",
          "3113:     break;",
          "3114:   }",
          "",
          "[Removed Lines]",
          "3097: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3098:     int nKey;",
          "3099:     void *pKey;",
          "3100: #endif",
          "3105: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3106:     pKey = Tcl_GetByteArrayFromObj(objv[2], &nKey);",
          "3107:     rc = sqlite3_rekey(pDb->db, pKey, nKey);",
          "3108:     if( rc ){",
          "3109:       Tcl_AppendResult(interp, sqlite3_errstr(rc), (char*)0);",
          "3110:       rc = TCL_ERROR;",
          "3111:     }",
          "3112: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3678:     \"HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN?\"",
          "3679:     \" ?-nofollow BOOLEAN?\"",
          "3680:     \" ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "3684:   );",
          "3685:   return TCL_ERROR;",
          "3686: }",
          "",
          "[Removed Lines]",
          "3681: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3682:     \" ?-key CODECKEY?\"",
          "3683: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3715:   const char *zVfs = 0;",
          "3716:   int flags;",
          "3717:   Tcl_DString translatedFilename;",
          "3722:   int rc;",
          "",
          "[Removed Lines]",
          "3718: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3719:   void *pKey = 0;",
          "3720:   int nKey = 0;",
          "3721: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3745:       return TCL_OK;",
          "3746:     }",
          "3747:     if( strcmp(zArg,\"-has-codec\")==0 ){",
          "3751:       Tcl_AppendResult(interp,\"0\",(char*)0);",
          "3753:       return TCL_OK;",
          "3754:     }",
          "3755:     if( zArg[0]=='-' ) return sqliteCmdUsage(interp, objv);",
          "",
          "[Removed Lines]",
          "3748: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3749:       Tcl_AppendResult(interp,\"1\",(char*)0);",
          "3750: #else",
          "3752: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3764:     if( i==objc-1 ) return sqliteCmdUsage(interp, objv);",
          "3765:     i++;",
          "3766:     if( strcmp(zArg,\"-key\")==0 ){",
          "3770:     }else if( strcmp(zArg, \"-vfs\")==0 ){",
          "3771:       zVfs = Tcl_GetString(objv[i]);",
          "3772:     }else if( strcmp(zArg, \"-readonly\")==0 ){",
          "",
          "[Removed Lines]",
          "3767: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3768:       pKey = Tcl_GetByteArrayFromObj(objv[i], &nKey);",
          "3769: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3842:   }else{",
          "3843:     zErrMsg = sqlite3_mprintf(\"%s\", sqlite3_errstr(rc));",
          "3844:   }",
          "3850:   if( p->db==0 ){",
          "3851:     Tcl_SetResult(interp, zErrMsg, TCL_VOLATILE);",
          "3852:     Tcl_Free((char*)p);",
          "",
          "[Removed Lines]",
          "3845: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3846:   if( p->db ){",
          "3847:     sqlite3_key(p->db, pKey, nKey);",
          "3848:   }",
          "3849: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "657: ){",
          "672:   return TCL_OK;",
          "673: }",
          "",
          "[Removed Lines]",
          "658: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "659:   sqlite3 *db;",
          "660:   const char *zKey;",
          "661:   int nKey;",
          "662:   if( argc!=3 ){",
          "663:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\", argv[0],",
          "664:        \" FILENAME\\\"\", 0);",
          "665:     return TCL_ERROR;",
          "666:   }",
          "667:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "668:   zKey = argv[2];",
          "669:   nKey = strlen(zKey);",
          "670:   sqlite3_key(db, zKey, nKey);",
          "671: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "685: ){",
          "700:   return TCL_OK;",
          "701: }",
          "",
          "[Removed Lines]",
          "686: #ifdef SQLITE_HAS_CODEC",
          "687:   sqlite3 *db;",
          "688:   const char *zKey;",
          "689:   int nKey;",
          "690:   if( argc!=3 ){",
          "691:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\", argv[0],",
          "692:        \" FILENAME\\\"\", 0);",
          "693:     return TCL_ERROR;",
          "694:   }",
          "695:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "696:   zKey = argv[2];",
          "697:   nKey = strlen(zKey);",
          "698:   sqlite3_rekey(db, zKey, nKey);",
          "699: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_config.c||src/test_config.c": [
          "File: src/test_config.c -> src/test_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   Tcl_SetVar2(interp, \"sqlite_options\", \"json1\", \"0\", TCL_GLOBAL_ONLY);",
          "227: #endif",
          "232:   Tcl_SetVar2(interp, \"sqlite_options\", \"has_codec\", \"0\", TCL_GLOBAL_ONLY);",
          "235: #ifdef SQLITE_LIKE_DOESNT_MATCH_BLOBS",
          "236:   Tcl_SetVar2(interp, \"sqlite_options\", \"like_match_blobs\", \"0\", TCL_GLOBAL_ONLY);",
          "",
          "[Removed Lines]",
          "229: #ifdef SQLITE_HAS_CODEC",
          "230:   Tcl_SetVar2(interp, \"sqlite_options\", \"has_codec\", \"1\", TCL_GLOBAL_ONLY);",
          "231: #else",
          "233: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_thread.c||src/test_thread.c": [
          "File: src/test_thread.c -> src/test_thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:   zFilename = Tcl_GetString(objv[2]);",
          "289:   sqlite3_open(zFilename, &db);",
          "306:   Md5_Register(db, 0, 0);",
          "307:   sqlite3_busy_handler(db, xBusy, 0);",
          "",
          "[Removed Lines]",
          "290: #ifdef SQLITE_HAS_CODEC",
          "291:   if( db && objc>=4 ){",
          "292:     const char *zKey;",
          "293:     int nKey;",
          "294:     int rc;",
          "295:     zKey = Tcl_GetStringFromObj(objv[3], &nKey);",
          "296:     rc = sqlite3_key(db, zKey, nKey);",
          "297:     if( rc!=SQLITE_OK ){",
          "298:       char *zErrMsg = sqlite3_mprintf(\"error %d: %s\", rc, sqlite3_errmsg(db));",
          "299:       sqlite3_close(db);",
          "300:       Tcl_AppendResult(interp, zErrMsg, (char*)0);",
          "301:       sqlite3_free(zErrMsg);",
          "302:       return TCL_ERROR;",
          "303:     }",
          "304:   }",
          "305: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:   return (u8)(h & 0xf);",
          "1257: }",
          "",
          "[Removed Lines]",
          "1259: #if !defined(SQLITE_OMIT_BLOB_LITERAL) || defined(SQLITE_HAS_CODEC)",
          "",
          "[Added Lines]",
          "1259: #if !defined(SQLITE_OMIT_BLOB_LITERAL)",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:   }",
          "236:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "249:   sqlite3BtreeSetCacheSize(pTemp, db->aDb[iDb].pSchema->cache_size);",
          "250:   sqlite3BtreeSetSpillSize(pTemp, sqlite3BtreeSetSpillSize(pMain,0));",
          "251:   sqlite3BtreeSetPagerFlags(pTemp, PAGER_SYNCHRONOUS_OFF|PAGER_CACHESPILL);",
          "",
          "[Removed Lines]",
          "239: #ifdef SQLITE_HAS_CODEC",
          "240:   if( db->nextPagesize ){",
          "241:     extern void sqlite3CodecGetKey(sqlite3*, int, void**, int*);",
          "242:     int nKey;",
          "243:     char *zKey;",
          "244:     sqlite3CodecGetKey(db, iDb, (void**)&zKey, &nKey);",
          "245:     if( nKey ) db->nextPagesize = 0;",
          "246:   }",
          "247: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3259:   pData = pPage->pData;",
          "3261:   walEncodeFrame(p->pWal, pPage->pgno, nTruncate, pData, aFrame);",
          "3262:   rc = walWriteToLog(p, aFrame, sizeof(aFrame), iOffset);",
          "3263:   if( rc ) return rc;",
          "",
          "[Removed Lines]",
          "3256: #if defined(SQLITE_HAS_CODEC)",
          "3257:   if( (pData = sqlite3PagerCodec(pPage))==0 ) return SQLITE_NOMEM_BKPT;",
          "3258: #else",
          "3260: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3440:         if( pWal->iReCksum==0 || iWrite<pWal->iReCksum ){",
          "3441:           pWal->iReCksum = iWrite;",
          "3442:         }",
          "3446:         pData = p->pData;",
          "3448:         rc = sqlite3OsWrite(pWal->pWalFd, pData, szPage, iOff);",
          "3449:         if( rc ) return rc;",
          "3450:         p->flags &= ~PGHDR_WAL_APPEND;",
          "",
          "[Removed Lines]",
          "3443: #if defined(SQLITE_HAS_CODEC)",
          "3444:         if( (pData = sqlite3PagerCodec(p))==0 ) return SQLITE_NOMEM;",
          "3445: #else",
          "3447: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:   COLS: database status",
          "371:   IF:   defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "403:   NAME: activate_extensions",
          "406:   NAME: soft_heap_limit",
          "407:   FLAG: Result0",
          "",
          "[Removed Lines]",
          "373:   NAME: key",
          "374:   TYPE: KEY",
          "375:   ARG:  0",
          "376:   IF:   defined(SQLITE_HAS_CODEC)",
          "378:   NAME: rekey",
          "379:   TYPE: KEY",
          "380:   ARG:  1",
          "381:   IF:   defined(SQLITE_HAS_CODEC)",
          "383:   NAME: hexkey",
          "384:   TYPE: KEY",
          "385:   ARG:  2",
          "386:   IF:   defined(SQLITE_HAS_CODEC)",
          "388:   NAME: hexrekey",
          "389:   TYPE: KEY",
          "390:   ARG:  3",
          "391:   IF:   defined(SQLITE_HAS_CODEC)",
          "393:   NAME: textkey",
          "394:   TYPE: KEY",
          "395:   ARG:  4",
          "396:   IF:   defined(SQLITE_HAS_CODEC)",
          "398:   NAME: textrekey",
          "399:   TYPE: KEY",
          "400:   ARG:  5",
          "401:   IF:   defined(SQLITE_HAS_CODEC)",
          "404:   IF:   defined(SQLITE_HAS_CODEC) || defined(SQLITE_ENABLE_CEROD)",
          "",
          "[Added Lines]",
          "374:   IF:   defined(SQLITE_ENABLE_CEROD)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "496: set allnames [lsort [array names allbyname]]",
          "498: # Generate #defines for all pragma type names.  Group the pragmas that are",
          "500: # at the end.",
          "501: #",
          "502: puts $fd \"\\n/* The various pragma types */\"",
          "",
          "[Removed Lines]",
          "499: # omit in default builds (defined(SQLITE_DEBUG) and defined(SQLITE_HAS_CODEC))",
          "",
          "[Added Lines]",
          "469: # omit in default builds (ex: defined(SQLITE_DEBUG))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d9ad75a564986b06f1dc35fc745ebfed3e2fe45",
      "candidate_info": {
        "commit_hash": "7d9ad75a564986b06f1dc35fc745ebfed3e2fe45",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7d9ad75a564986b06f1dc35fc745ebfed3e2fe45",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c"
        ],
        "message": "Fix the sqlite3_load_extension() interface so that it tolerates backslashes in place of forward-slashes in pathnames on Windows.\n\nFossilOrigin-Name: bc3bf7c6681a96bc18a1ed02f0ccced4731d5dab45f60c347dd1841706e6b62a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac31edd3eeafcef46164a4506bbc32c711bb7cd78378aeaa4c9bb12524ac5ea1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581:       return SQLITE_NOMEM_BKPT;",
          "582:     }",
          "583:     memcpy(zAltEntry, \"sqlite3_\", 8);",
          "584:     for(iFile=ncFile-1; iFile>=0 && zFile[iFile]!='/'; iFile--){}",
          "585:     iFile++;",
          "586:     if( sqlite3_strnicmp(zFile+iFile, \"lib\", 3)==0 ) iFile += 3;",
          "587:     for(iEntry=8; (c = zFile[iFile])!=0 && c!='.'; iFile++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584: #if SQLITE_OS_WIN",
          "585:     for(iFile=ncFile-1; iFile>=0 && ((c=zFile[iFile]!='/')||c=='\\\\'); iFile--){}",
          "586: #else",
          "588: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a8764ad7ad7de39af698e88687266acf06442db",
      "candidate_info": {
        "commit_hash": "0a8764ad7ad7de39af698e88687266acf06442db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a8764ad7ad7de39af698e88687266acf06442db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Rename a local variable to avoid masking a function parameter and thus causing a harmless compiler warning.\n\nFossilOrigin-Name: f065cf003bd2a3a580cb5b9fa2eacd8be075fe8c2bbc5688e9a9406abbfb3804",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7309ed3c7588c7e51e09418bf5cfd4611539b44c39cef9ed4ae0e385bae7625",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "567:     int n = pExpr->iColumn;",
          "571:     assert( pMatch->iCursor==pExpr->iTable );",
          "574:     ){",
          "578:     }else{",
          "579:       testcase( n==BMS-1 );",
          "580:       testcase( n==BMS );",
          "",
          "[Removed Lines]",
          "568:     Table *pTab;",
          "569:     pTab = pExpr->y.pTab;",
          "570:     assert( pTab!=0 );",
          "572:     if( (pTab->tabFlags & TF_HasGenerated)!=0",
          "573:      && (pTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "575:       testcase( pTab->nCol==BMS-1 );",
          "576:       testcase( pTab->nCol==BMS );",
          "577:       pMatch->colUsed = pTab->nCol>=BMS ? ALLBITS : MASKBIT(pTab->nCol)-1;",
          "",
          "[Added Lines]",
          "568:     Table *pExTab = pExpr->y.pTab;",
          "569:     assert( pExTab!=0 );",
          "571:     if( (pExTab->tabFlags & TF_HasGenerated)!=0",
          "572:      && (pExTab->aCol[n].colFlags & COLFLAG_GENERATED)!=0",
          "574:       testcase( pExTab->nCol==BMS-1 );",
          "575:       testcase( pExTab->nCol==BMS );",
          "576:       pMatch->colUsed = pExTab->nCol>=BMS ? ALLBITS : MASKBIT(pExTab->nCol)-1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64185e31fcd74d253d117f17c043ca954a9b417c",
      "candidate_info": {
        "commit_hash": "64185e31fcd74d253d117f17c043ca954a9b417c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/64185e31fcd74d253d117f17c043ca954a9b417c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Do not run resetAccumulator() after a malloc failure.\n\nFossilOrigin-Name: 1b426603f05033bcee0331c6f664cd5ed2ebf8f5d4cde8c6673c7a699ff53bb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6e0ffa205312416830340ea6e621dfb1a529e5603d569941ed6263930dc28c45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5373:   struct AggInfo_func *pFunc;",
          "5374:   int nReg = pAggInfo->nFunc + pAggInfo->nColumn;",
          "5375:   if( nReg==0 ) return;",
          "5377: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "5376:   if( pParse->nErr ) return;",
          "",
          "[Added Lines]",
          "5376:   if( pParse->nErr || pParse->db->mallocFailed ) return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c601f1016c638abbc4763e9e227d17c7b82c1348",
      "candidate_info": {
        "commit_hash": "c601f1016c638abbc4763e9e227d17c7b82c1348",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c601f1016c638abbc4763e9e227d17c7b82c1348",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "If the amalgamation is built using OPT_FEATURE_FLAGS = -DSQLITE_UDL_CAPABLE_PARSER then it can be compiled with or without the -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT option and it works either way.\n\nFossilOrigin-Name: 1f96a29dd8654ee30d36982a8bcd3f17a4b9193d3879fdb38fa3f03eeeff3080",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 951d22b72f80de9e23df645abcc3d88ca1a275b46ea23b84152ef48716922b37",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   DisableLookaside;",
          "112: }",
          "114: } // end %include",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: #ifndef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "119: static void updateDeleteLimitError(",
          "120:   Parse *pParse,",
          "121:   ExprList *pOrderBy,",
          "122:   Expr *pLimit",
          "123: ){",
          "124:   if( pOrderBy ){",
          "125:     sqlite3ErrorMsg(pParse, \"syntax error near \\\"ORDER BY\\\"\");",
          "126:   }else{",
          "127:     sqlite3ErrorMsg(pParse, \"syntax error near \\\"LIMIT\\\"\");",
          "128:   }",
          "129:   sqlite3ExprListDelete(pParse->db, pOrderBy);",
          "130:   sqlite3ExprDelete(pParse->db, pLimit);",
          "131: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "844: cmd ::= with DELETE FROM xfullname(X) indexed_opt(I) where_opt(W)",
          "845:         orderby_opt(O) limit_opt(L). {",
          "846:   sqlite3SrcListIndexedBy(pParse, X, &I);",
          "847: #ifndef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "850: #endif",
          "851:   sqlite3DeleteFrom(pParse,X,W,O,L);",
          "852: }",
          "855: cmd ::= with DELETE FROM xfullname(X) indexed_opt(I) where_opt(W). {",
          "856:   sqlite3SrcListIndexedBy(pParse, X, &I);",
          "857:   sqlite3DeleteFrom(pParse,X,W,0,0);",
          "",
          "[Removed Lines]",
          "843: %ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "848:   sqlite3ExprListDelete(pParse->db, O); O = 0;",
          "849:   sqlite3ExprDelete(pParse->db, L); L = 0;",
          "853: %endif",
          "854: %ifndef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "",
          "[Added Lines]",
          "863: %if SQLITE_ENABLE_UPDATE_DELETE_LIMIT || SQLITE_UDL_CAPABLE_PARSER",
          "868:   if( O || L ){",
          "869:     updateDeleteLimitError(pParse,O,L);",
          "870:     O = 0;",
          "871:     L = 0;",
          "872:   }",
          "876: %else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "870: cmd ::= with UPDATE orconf(R) xfullname(X) indexed_opt(I) SET setlist(Y)",
          "871:         where_opt(W) orderby_opt(O) limit_opt(L).  {",
          "872:   sqlite3SrcListIndexedBy(pParse, X, &I);",
          "873:   sqlite3ExprListCheckLength(pParse,Y,\"set list\");",
          "874:   sqlite3Update(pParse,X,Y,W,R,O,L,0);",
          "875: }",
          "878: cmd ::= with UPDATE orconf(R) xfullname(X) indexed_opt(I) SET setlist(Y)",
          "880:   sqlite3SrcListIndexedBy(pParse, X, &I);",
          "881:   sqlite3ExprListCheckLength(pParse,Y,\"set list\");",
          "882:   sqlite3Update(pParse,X,Y,W,R,0,0,0);",
          "883: }",
          "884: %endif",
          "886: %type setlist {ExprList*}",
          "887: %destructor setlist {sqlite3ExprListDelete(pParse->db, $$);}",
          "",
          "[Removed Lines]",
          "869: %ifdef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "876: %endif",
          "877: %ifndef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "879:         where_opt(W).  {",
          "",
          "[Added Lines]",
          "891: %if SQLITE_ENABLE_UPDATE_DELETE_LIMIT || SQLITE_UDL_CAPABLE_PARSER",
          "896: #ifndef SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
          "897:   if( O || L ){",
          "898:     updateDeleteLimitError(pParse,O,L);",
          "899:     O = 0;",
          "900:     L = 0;",
          "901:   }",
          "902: #endif",
          "905: %else",
          "907:         where_opt(W). {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1375: %type vinto {Expr*}",
          "1376: %destructor vinto {sqlite3ExprDelete(pParse->db, $$);}",
          "1377: cmd ::= VACUUM vinto(Y).                {sqlite3Vacuum(pParse,0,Y);}",
          "1378: cmd ::= VACUUM nm(X) vinto(Y).          {sqlite3Vacuum(pParse,&X,Y);}",
          "1379: vinto(A) ::= INTO expr(X).              {A = X;}",
          "1380: vinto(A) ::= .                          {A = 0;}",
          "",
          "[Removed Lines]",
          "1373: %ifndef SQLITE_OMIT_VACUUM",
          "1374: %ifndef SQLITE_OMIT_ATTACH",
          "1381: %endif  SQLITE_OMIT_ATTACH",
          "1382: %endif  SQLITE_OMIT_VACUUM",
          "",
          "[Added Lines]",
          "1403: %if !SQLITE_OMIT_VACUUM && !SQLITE_OMIT_ATTACH",
          "1410: %endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}