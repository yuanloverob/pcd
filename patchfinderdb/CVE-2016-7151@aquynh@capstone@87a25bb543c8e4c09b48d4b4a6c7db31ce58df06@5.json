{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "82928447e771dbd27ae0ca592645860f22a002ba",
      "candidate_info": {
        "commit_hash": "82928447e771dbd27ae0ca592645860f22a002ba",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/82928447e771dbd27ae0ca592645860f22a002ba",
        "files": [
          "bindings/python/BUILDING.txt",
          "bindings/python/MANIFEST.in",
          "bindings/python/PKG-INFO.src",
          "bindings/python/PKG-INFO.win",
          "bindings/python/README.TXT",
          "bindings/python/README.pypi-src",
          "bindings/python/README.pypi-win",
          "bindings/python/README.txt",
          "bindings/python/prebuilt/win32/.gitignore",
          "bindings/python/prebuilt/win64/.gitignore",
          "bindings/python/setup.py"
        ],
        "message": "Python: Clean up the capstone-windows stuff with extreme prejudice",
        "before_after_code_files": [
          "bindings/python/MANIFEST.in||bindings/python/MANIFEST.in",
          "bindings/python/PKG-INFO.src||bindings/python/PKG-INFO.src",
          "bindings/python/PKG-INFO.win||bindings/python/PKG-INFO.win",
          "bindings/python/README.pypi-src||bindings/python/README.pypi-src",
          "bindings/python/setup.py||bindings/python/setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/MANIFEST.in||bindings/python/MANIFEST.in": [
          "File: bindings/python/MANIFEST.in -> bindings/python/MANIFEST.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: recursive-include src *",
          "2: include LICENSE.TXT",
          "",
          "[Removed Lines]",
          "3: include README",
          "",
          "[Added Lines]",
          "3: include README.txt",
          "4: include BUILDING.txt",
          "5: include Makefile",
          "",
          "---------------"
        ],
        "bindings/python/PKG-INFO.src||bindings/python/PKG-INFO.src": [
          "File: bindings/python/PKG-INFO.src -> bindings/python/PKG-INFO.src",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bindings/python/PKG-INFO.win||bindings/python/PKG-INFO.win": [
          "File: bindings/python/PKG-INFO.win -> bindings/python/PKG-INFO.win",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bindings/python/README.pypi-src||bindings/python/README.pypi-src": [
          "File: bindings/python/README.pypi-src -> bindings/python/README.pypi-src",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:     print \"Proper 'develop' support unavailable.\"",
          "158: if 'bdist_wheel' in sys.argv and '--plat-name' not in sys.argv:",
          "160:     name = get_platform()",
          "161:     if 'linux' in name:",
          "162:         # linux_* platform tags are disallowed because the python ecosystem is fubar",
          "163:         # linux builds should be built in the centos 5 vm for maximum compatibility",
          "164:         # see https://github.com/pypa/manylinux",
          "165:         # see also https://github.com/angr/angr-dev/blob/master/bdist.sh",
          "167:     else:",
          "168:         # https://www.python.org/dev/peps/pep-0425/",
          "171: setup(",
          "172:     provides=['capstone'],",
          "",
          "[Removed Lines]",
          "159:     sys.argv.append('--plat-name')",
          "166:         sys.argv.append('manylinux1_' + platform.machine())",
          "169:         sys.argv.append(name.replace('.', '_').replace('-', '_'))",
          "",
          "[Added Lines]",
          "159:     idx = sys.argv.index('bdist_wheel') + 1",
          "160:     sys.argv.insert(idx, '--plat-name')",
          "167:         sys.argv.insert(idx + 1, 'manylinux1_' + platform.machine())",
          "170:         sys.argv.insert(idx + 1, name.replace('.', '_').replace('-', '_'))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c6968f202dfa4eea9a0bcf05d6ab116d3d833cb",
      "candidate_info": {
        "commit_hash": "8c6968f202dfa4eea9a0bcf05d6ab116d3d833cb",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/8c6968f202dfa4eea9a0bcf05d6ab116d3d833cb",
        "files": [
          "bindings/python/capstone/arm64.py",
          "bindings/python/test_arm64.py"
        ],
        "message": "python: add access field for ARM64",
        "before_after_code_files": [
          "bindings/python/capstone/arm64.py||bindings/python/capstone/arm64.py",
          "bindings/python/test_arm64.py||bindings/python/test_arm64.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/arm64.py||bindings/python/capstone/arm64.py": [
          "File: bindings/python/capstone/arm64.py -> bindings/python/capstone/arm64.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:         ('ext', ctypes.c_uint),",
          "39:         ('type', ctypes.c_uint),",
          "40:         ('value', Arm64OpValue),",
          "41:     )",
          "43:     @property",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:         ('access', ctypes.c_uint8),",
          "",
          "---------------"
        ],
        "bindings/python/test_arm64.py||bindings/python/test_arm64.py": [
          "File: bindings/python/test_arm64.py -> bindings/python/test_arm64.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:             if i.vector_index != -1:",
          "76:                 print(\"\\t\\t\\tVector Index: %u\" % i.vector_index)",
          "78:     if insn.writeback:",
          "79:         print(\"\\tWrite-back: True\")",
          "80:     if not insn.cc in [ARM64_CC_AL, ARM64_CC_INVALID]:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:             if i.access == CS_AC_READ:",
          "79:                 print(\"\\t\\toperands[%u].access: READ\\n\" % (c))",
          "80:             elif i.access == CS_AC_WRITE:",
          "81:                 print(\"\\t\\toperands[%u].access: WRITE\\n\" % (c))",
          "82:             elif i.access == CS_AC_READ | CS_AC_WRITE:",
          "83:                 print(\"\\t\\toperands[%u].access: READ | WRITE\\n\" % (c))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     if insn.update_flags:",
          "83:         print(\"\\tUpdate-flags: True\")",
          "86: # ## Test class Cs",
          "87: def test_class():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     (regs_read, regs_write) = insn.regs_access()",
          "95:     if len(regs_read) > 0:",
          "96:         print(\"\\tRegisters read:\", end=\"\")",
          "97:         for r in regs_read:",
          "98:             print(\" %s\" %(insn.reg_name(r)), end=\"\")",
          "99:         print(\"\")",
          "101:     if len(regs_write) > 0:",
          "102:         print(\"\\tRegisters modified:\", end=\"\")",
          "103:         for r in regs_write:",
          "104:             print(\" %s\" %(insn.reg_name(r)), end=\"\")",
          "105:         print(\"\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ff79aabc9328fc1ea07313fecbfe5b7bf5af468",
      "candidate_info": {
        "commit_hash": "7ff79aabc9328fc1ea07313fecbfe5b7bf5af468",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7ff79aabc9328fc1ea07313fecbfe5b7bf5af468",
        "files": [
          "bindings/python/.gitignore",
          "bindings/python/MANIFEST.in",
          "bindings/python/Makefile",
          "bindings/python/capstone/__init__.py",
          "bindings/python/setup.py"
        ],
        "message": "Python: make setup work as expected",
        "before_after_code_files": [
          "bindings/python/MANIFEST.in||bindings/python/MANIFEST.in",
          "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py",
          "bindings/python/setup.py||bindings/python/setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/MANIFEST.in||bindings/python/MANIFEST.in": [
          "File: bindings/python/MANIFEST.in -> bindings/python/MANIFEST.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: include LICENSE.TXT",
          "4: include README",
          "",
          "[Removed Lines]",
          "1: recursive-include capstone *",
          "2: recursive-include prebuilt *",
          "",
          "[Added Lines]",
          "1: recursive-include src *",
          "",
          "---------------"
        ],
        "bindings/python/capstone/__init__.py||bindings/python/capstone/__init__.py": [
          "File: bindings/python/capstone/__init__.py -> bindings/python/capstone/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: CS_SUPPORT_X86_REDUCE = CS_ARCH_ALL+2",
          "190: from os.path import split, join, dirname",
          "191: import distutils.sysconfig",
          "194: import inspect",
          "195: if not hasattr(sys.modules[__name__], '__file__'):",
          "196:     __file__ = inspect.getfile(inspect.currentframe())",
          "199: _all_libs = ['capstone.dll', 'libcapstone.so.3', 'libcapstone.so', 'libcapstone.dylib']",
          "200: _found = False",
          "203:     try:",
          "209:     except OSError:",
          "249:     raise ImportError(\"ERROR: fail to load the dynamic library.\")",
          "",
          "[Removed Lines]",
          "189: import ctypes, ctypes.util, sys",
          "198: _lib_path = split(__file__)[0]",
          "202: for _lib in _all_libs:",
          "204:         _lib_file = join(_lib_path, _lib)",
          "205:         # print \"Trying to load:\", _lib_file",
          "206:         _cs = ctypes.cdll.LoadLibrary(_lib_file)",
          "207:         _found = True",
          "208:         break",
          "210:         pass",
          "211: if _found == False:",
          "212:     # try loading from default paths",
          "213:     for _lib in _all_libs:",
          "214:         try:",
          "215:             _cs = ctypes.cdll.LoadLibrary(_lib)",
          "216:             _found = True",
          "217:             break",
          "218:         except OSError:",
          "219:             pass",
          "221: if _found == False:",
          "222:     # last try: loading from python lib directory",
          "223:     _lib_path = distutils.sysconfig.get_python_lib()",
          "224:     for _lib in _all_libs:",
          "225:         try:",
          "226:             _lib_file = join(_lib_path, 'capstone', _lib)",
          "227:             # print \"Trying to load:\", _lib_file",
          "228:             _cs = ctypes.cdll.LoadLibrary(_lib_file)",
          "229:             _found = True",
          "230:             break",
          "231:         except OSError:",
          "232:             pass",
          "234: # Attempt Darwin specific load (10.11 specific),",
          "235: # since LD_LIBRARY_PATH is not guaranteed to exist",
          "236: if (_found == False) and (system() == 'Darwin'):",
          "237:     _lib_path = '/usr/local/lib/'",
          "238:     for _lib in _all_libs:",
          "239:         try:",
          "240:             _lib_file = join(_lib_path, _lib)",
          "241:             # print \"Trying to load:\", _lib_file",
          "242:             _cs = ctypes.cdll.LoadLibrary(_lib_file)",
          "243:             _found = True",
          "244:             break",
          "245:         except OSError:",
          "246:             pass",
          "248: if _found == False:",
          "",
          "[Added Lines]",
          "189: import ctypes, ctypes.util",
          "192: import pkg_resources",
          "198: if sys.platform == 'darwin':",
          "199:     _lib = \"libcapstone.dylib\"",
          "200: elif sys.platform in ('win32', 'cygwin'):",
          "201:     _lib = \"capstone.dll\"",
          "202: else:",
          "203:     _lib = \"libcapstone.so\"",
          "208: def _load_lib(path):",
          "209:     lib_file = join(path, _lib)",
          "211:         return ctypes.cdll.LoadLibrary(lib_file)",
          "213:         # if we're on linux, try again with .so.3 extension",
          "214:         if lib_file.endswith('.so'):",
          "215:             try:",
          "216:                 return ctypes.cdll.LoadLibrary(lib_file)",
          "217:             except OSError:",
          "218:                 return None",
          "219:         return None",
          "221: _cs = None",
          "223: # Loading attempts, in order",
          "224: # - pkg_resources can get us the path to the local libraries",
          "225: # - we can get the path to the local libraries by parsing our filename",
          "226: # - global load",
          "227: # - python's lib directory",
          "228: # - last-gasp attempt at some hardcoded paths on darwin and linux",
          "230: _path_list = [pkg_resources.resource_filename(__name__, 'lib'),",
          "231:               join(split(__file__)[0], 'lib'),",
          "232:               '',",
          "233:               distutils.sysconfig.get_python_lib(),",
          "234:               \"/usr/local/lib/\" if sys.platform == 'darwin' else '/usr/lib64']",
          "236: for _path in _path_list:",
          "237:     _cs = _load_lib(_path)",
          "238:     if _cs is not None: break",
          "239: else:",
          "",
          "---------------"
        ],
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env python",
          "2: import glob",
          "3: import os",
          "4: import shutil",
          "5: import stat",
          "6: import sys",
          "8: from distutils import log",
          "12: from setuptools import setup",
          "25: SYSTEM = sys.platform",
          "46: # adapted from commit e504b81 of Nguyen Tan Cong",
          "47: # Reference: https://docs.python.org/2/library/platform.html#cross-platform",
          "50: def copy_sources():",
          "51:     \"\"\"Copy the C sources into the source directory.",
          "",
          "[Removed Lines]",
          "9: from distutils import dir_util",
          "10: from distutils.command.build_clib import build_clib",
          "11: from setuptools.command.sdist import sdist",
          "13: from distutils.sysconfig import get_python_lib",
          "15: # prebuilt libraries for Windows - for sdist",
          "16: PATH_LIB64 = \"prebuilt/win64/capstone.dll\"",
          "17: PATH_LIB32 = \"prebuilt/win32/capstone.dll\"",
          "19: # package name can be 'capstone' or 'capstone-windows'",
          "20: PKG_NAME = 'capstone'",
          "21: if os.path.exists(PATH_LIB64) and os.path.exists(PATH_LIB32):",
          "22:     PKG_NAME = 'capstone-windows'",
          "24: VERSION = '3.0.4'",
          "27: # virtualenv breaks import, but get_python_lib() will work.",
          "28: SITE_PACKAGES = os.path.join(get_python_lib(), \"capstone\")",
          "29: if \"--user\" in sys.argv:",
          "30:     try:",
          "31:         from site import getusersitepackages",
          "32:         SITE_PACKAGES = os.path.join(getusersitepackages(), \"capstone\")",
          "33:     except ImportError:",
          "34:         pass",
          "36: # If building a wheel, the path listed in data_files is interpreted relative to",
          "37: # python's site-packages directory, even if it starts with a slash. So we need",
          "38: # to use only `/capstone` as path in this case.",
          "39: #",
          "40: # Note: using `capstone` does not work, since that for some reason is interpreted",
          "41: # relative to the the python installation prefix, not to the site-packages directory.",
          "42: if \"bdist_wheel\" in sys.argv:",
          "43:     SITE_PACKAGES = \"/capstone\"",
          "48: is_64bits = sys.maxsize > 2**32",
          "",
          "[Added Lines]",
          "8: import platform",
          "12: from distutils.util import get_platform",
          "13: from distutils.command.build import build",
          "14: from distutils.command.sdist import sdist",
          "15: from setuptools.command.bdist_egg import bdist_egg",
          "18: VERSION = '3.0.4'",
          "22: IS_64BITS = sys.maxsize > 2**32",
          "24: # are we building from the repository or from a source distribution?",
          "25: ROOT_DIR = os.path.dirname(os.path.realpath(__file__))",
          "26: LIBS_DIR = os.path.join(ROOT_DIR, 'capstone', 'lib')",
          "27: HEADERS_DIR = os.path.join(ROOT_DIR, 'capstone', 'include')",
          "28: SRC_DIR = os.path.join(ROOT_DIR, 'src')",
          "29: BUILD_DIR = SRC_DIR if os.path.exists(SRC_DIR) else os.path.join(ROOT_DIR, '../..')",
          "31: if SYSTEM == 'darwin':",
          "32:     LIBRARY_FILE = \"libcapstone.dylib\"",
          "33:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "34: elif SYSTEM in ('win32', 'cygwin'):",
          "35:     LIBRARY_FILE = \"capstone.dll\"",
          "36:     STATIC_LIBRARY_FILE = None",
          "37: else:",
          "38:     LIBRARY_FILE = \"libcapstone.so\"",
          "39:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "41: def clean_bins():",
          "42:     shutil.rmtree(LIBS_DIR, ignore_errors=True)",
          "43:     shutil.rmtree(HEADERS_DIR, ignore_errors=True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     src = []",
          "57:     try:",
          "59:     except (IOError, OSError):",
          "60:         pass",
          "77:     for filename in src:",
          "79:         log.info(\"%s -> %s\" % (filename, outpath))",
          "80:         shutil.copy(filename, outpath)",
          "86:     def run(self):",
          "98:         copy_sources()",
          "99:         return sdist.run(self)",
          "105:     def run(self):",
          "173: def dummy_src():",
          "174:     return []",
          "176: setup(",
          "177:     provides=['capstone'],",
          "178:     packages=['capstone'],",
          "180:     version=VERSION,",
          "181:     author='Nguyen Anh Quynh',",
          "182:     author_email='aquynh@gmail.com',",
          "",
          "[Removed Lines]",
          "58:         dir_util.remove_tree(\"src/\")",
          "62:     dir_util.copy_tree(\"../../arch\", \"src/arch/\")",
          "63:     dir_util.copy_tree(\"../../include\", \"src/include/\")",
          "64: #    dir_util.copy_tree(\"../../msvc/headers\", \"src/msvc/headers\")",
          "66:     src.extend(glob.glob(\"../../*.[ch]\"))",
          "67:     src.extend(glob.glob(\"../../*.mk\"))",
          "69:     src.extend(glob.glob(\"../../Makefile\"))",
          "70:     src.extend(glob.glob(\"../../LICENSE*\"))",
          "71:     src.extend(glob.glob(\"../../README\"))",
          "72:     src.extend(glob.glob(\"../../*.TXT\"))",
          "73:     src.extend(glob.glob(\"../../RELEASE_NOTES\"))",
          "74:     src.extend(glob.glob(\"../../make.sh\"))",
          "75:     src.extend(glob.glob(\"../../CMakeLists.txt\"))",
          "78:         outpath = os.path.join(\"./src/\", os.path.basename(filename))",
          "83: class custom_sdist(sdist):",
          "84:     \"\"\"Reshuffle files for distribution.\"\"\"",
          "87:         for filename in (glob.glob(\"capstone/*.dll\")",
          "88:                          + glob.glob(\"capstone/*.so\")",
          "89:                          + glob.glob(\"capstone/*.dylib\")):",
          "90:             try:",
          "91:                 os.unlink(filename)",
          "92:             except Exception:",
          "93:                 pass",
          "95:         # if prebuilt libraries are existent, then do not copy source",
          "96:         if os.path.exists(PATH_LIB64) and os.path.exists(PATH_LIB32):",
          "97:             return sdist.run(self)",
          "102: class custom_build_clib(build_clib):",
          "103:     \"\"\"Customized build_clib command.\"\"\"",
          "106:         log.info('running custom_build_clib')",
          "107:         build_clib.run(self)",
          "109:     def finalize_options(self):",
          "110:         # We want build-clib to default to build-lib as defined by the \"build\"",
          "111:         # command.  This is so the compiled library will be put in the right",
          "112:         # place along side the python code.",
          "113:         self.set_undefined_options('build',",
          "114:                                    ('build_lib', 'build_clib'),",
          "115:                                    ('build_temp', 'build_temp'),",
          "116:                                    ('compiler', 'compiler'),",
          "117:                                    ('debug', 'debug'),",
          "118:                                    ('force', 'force'))",
          "120:         build_clib.finalize_options(self)",
          "122:     def build_libraries(self, libraries):",
          "123:         if SYSTEM in (\"win32\", \"cygwin\"):",
          "124:             # if Windows prebuilt library is available, then include it",
          "125:             if is_64bits and os.path.exists(PATH_LIB64):",
          "126:                 shutil.copy(PATH_LIB64, \"capstone\")",
          "127:                 return",
          "128:             elif os.path.exists(PATH_LIB32):",
          "129:                 shutil.copy(PATH_LIB32, \"capstone\")",
          "130:                 return",
          "132:         # build library from source if src/ is existent",
          "133:         if not os.path.exists('src'):",
          "134:             return",
          "136:         for (lib_name, build_info) in libraries:",
          "137:             log.info(\"building '%s' library\", lib_name)",
          "139:             os.chdir(\"src\")",
          "141:             # platform description refers at https://docs.python.org/2/library/sys.html#sys.platform",
          "142:             if SYSTEM == \"win32\":",
          "143:                 # Windows build: this process requires few things:",
          "144:                 #    - CMake + MSVC installed",
          "145:                 #    - Run this command in an environment setup for MSVC",
          "146:                 os.mkdir(\"build\")",
          "147:                 os.chdir(\"build\")",
          "148:                 # Do not build tests & static library",
          "149:                 os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "150:                 os.system(\"nmake\")",
          "151:                 os.chdir(\"..\")",
          "152:                 so = \"src/build/capstone.dll\"",
          "153:             elif SYSTEM == \"cygwin\":",
          "154:                 os.chmod(\"make.sh\", stat.S_IREAD|stat.S_IEXEC)",
          "155:                 if is_64bits:",
          "156:                     os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw64\")",
          "157:                 else:",
          "158:                     os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw32\")",
          "160:                 so = \"src/capstone.dll\"",
          "161:             else:   # Unix",
          "162:                 os.chmod(\"make.sh\", stat.S_IREAD|stat.S_IEXEC)",
          "163:                 os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh\")",
          "164:                 if SYSTEM == \"darwin\":",
          "165:                     so = \"src/libcapstone.dylib\"",
          "166:                 else:   # Non-OSX",
          "167:                     so = \"src/libcapstone.so\"",
          "169:             os.chdir(\"..\")",
          "170:             shutil.copy(so, \"capstone\")",
          "179:     name=PKG_NAME,",
          "",
          "[Added Lines]",
          "53:         shutil.rmtree(\"src/\")",
          "57:     shutil.copytree(os.path.join(BUILD_DIR, \"arch\"), os.path.join(SRC_DIR, \"arch\"))",
          "58:  shutil.copytree(os.path.join(BUILD_DIR, \"include\"), os.path.join(SRC_DIR, \"include\"))",
          "60:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.[ch]\")))",
          "61:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.mk\"))",
          "63:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"Makefile\"))",
          "64:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"LICENSE*\"))",
          "65:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"README\"))",
          "66:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.TXT\"))",
          "67:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"RELEASE_NOTES\"))",
          "68:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"make.sh\"))",
          "69:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"CMakeLists.txt\"))",
          "72:         outpath = os.path.join(SRC_DIR, os.path.basename(filename))",
          "76: def build_libraries():",
          "77:     \"\"\"",
          "78:     Prepare the capstone directory for a binary distribution or installation.",
          "79:     Builds shared libraries and copies header files.",
          "81:     Will use a src/ dir if one exists in the current directory, otherwise assumes it's in the repo",
          "82:     \"\"\"",
          "83:     cwd = os.getcwd()",
          "84:     clean_bins()",
          "85:     os.mkdir(HEADERS_DIR)",
          "86:     os.mkdir(LIBS_DIR)",
          "88:     # copy public headers",
          "89:     shutil.copytree(os.path.join(BUILD_DIR, 'include'), os.path.join(HEADERS_DIR, 'capstone'))",
          "91:     os.chdir(BUILD_DIR)",
          "93:     # platform description refers at https://docs.python.org/2/library/sys.html#sys.platform",
          "94:     if SYSTEM == \"win32\":",
          "95:         # Windows build: this process requires few things:",
          "96:         #    - CMake + MSVC installed",
          "97:         #    - Run this command in an environment setup for MSVC",
          "98:         if not os.path.exists(\"build\"): os.mkdir(\"build\")",
          "99:         os.chdir(\"build\")",
          "100:         # Do not build tests & static library",
          "101:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "102:         os.system(\"nmake\")",
          "103:     elif SYSTEM == \"cygwin\":",
          "104:         os.chmod(\"make.sh\", stat.S_IREAD|stat.S_IEXEC)",
          "105:         if is_64bits:",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw64\")",
          "107:         else:",
          "108:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw32\")",
          "110:         so = \"capstone.dll\"",
          "111:     else:   # Unix",
          "112:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh\")",
          "114:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "115:     if STATIC_LIBRARY_FILE: shutil.copy(STATIC_LIBRARY_FILE, LIBS_DIR)",
          "116:     os.chdir(cwd)",
          "119: class custom_sdist(sdist):",
          "121:         clean_bins()",
          "126: class custom_build(build):",
          "128:         log.info('Building C extensions')",
          "129:         build_libraries()",
          "130:         return build.run(self)",
          "133: class custom_bdist_egg(bdist_egg):",
          "134:     def run(self):",
          "135:         self.run_command('build')",
          "136:         return bdist_egg.run(self)",
          "141: cmdclass = {}",
          "142: cmdclass['build'] = custom_build",
          "143: cmdclass['sdist'] = custom_sdist",
          "144: cmdclass['bdist_egg'] = custom_bdist_egg",
          "146: try:",
          "147:     from setuptools.command.develop import develop",
          "148:     class custom_develop(develop):",
          "149:         def run(self):",
          "150:             log.info(\"Building C extensions\")",
          "151:             build_libraries()",
          "152:             return develop.run(self)",
          "154:     cmdclass['develop'] = custom_develop",
          "155: except ImportError:",
          "156:     print \"Proper 'develop' support unavailable.\"",
          "158: if 'bdist_wheel' in sys.argv and '--plat-name' not in sys.argv:",
          "159:     sys.argv.append('--plat-name')",
          "160:     name = get_platform()",
          "161:     if 'linux' in name:",
          "162:         # linux_* platform tags are disallowed because the python ecosystem is fubar",
          "163:         # linux builds should be built in the centos 5 vm for maximum compatibility",
          "164:         # see https://github.com/pypa/manylinux",
          "165:         # see also https://github.com/angr/angr-dev/blob/master/bdist.sh",
          "166:         sys.argv.append('manylinux1_' + platform.machine())",
          "167:     else:",
          "168:         # https://www.python.org/dev/peps/pep-0425/",
          "169:         sys.argv.append(name.replace('.', '_').replace('-', '_'))",
          "174:     name='capstone',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:         'Programming Language :: Python :: 3',",
          "189:     ],",
          "190:     requires=['ctypes'],",
          "203:     include_package_data=True,",
          "204:     package_data={",
          "206:     }",
          "207: )",
          "",
          "[Removed Lines]",
          "191:     cmdclass=dict(",
          "192:         build_clib=custom_build_clib,",
          "193:         sdist=custom_sdist,",
          "194:     ),",
          "196:     libraries=[(",
          "197:         'capstone', dict(",
          "198:             package='capstone',",
          "199:             sources=dummy_src()",
          "200:         ),",
          "201:     )],",
          "202:     zip_safe=False,",
          "205:         \"capstone\": [\"*.so\", \"*.dll\", \"*.dylib\"],",
          "",
          "[Added Lines]",
          "186:     cmdclass=cmdclass,",
          "187:     zip_safe=True,",
          "190:         \"capstone\": [\"lib/*\", \"include/capstone/*\"],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f926e8019abf830c704f5830c950a91816dc0f09",
      "candidate_info": {
        "commit_hash": "f926e8019abf830c704f5830c950a91816dc0f09",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f926e8019abf830c704f5830c950a91816dc0f09",
        "files": [
          "bindings/python/capstone/m68k.py"
        ],
        "message": "Fixed ordering in files",
        "before_after_code_files": [
          "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/capstone/m68k.py||bindings/python/capstone/m68k.py": [
          "File: bindings/python/capstone/m68k.py -> bindings/python/capstone/m68k.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         ('index_size', ctypes.c_ubyte),",
          "20:     )",
          "22: class M68KOpValue(ctypes.Union):",
          "23:     _fields_ = (",
          "24:         ('imm', ctypes.c_int64),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: class M68KOpRegPair(ctypes.Structure):",
          "23:     _fields_ = (",
          "24:         ('reg_0', ctypes.c_uint),",
          "25:         ('reg_1', ctypes.c_uint),",
          "26:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:         ('register_bits', ctypes.c_uint),",
          "31:     )",
          "39: class M68KOp(ctypes.Structure):",
          "40:     _fields_ = (",
          "41:         ('value', M68KOpValue),",
          "",
          "[Removed Lines]",
          "33: class M68KOpRegPair(ctypes.Structure):",
          "34:     _fields_ = (",
          "35:         ('reg_0', ctypes.c_uint),",
          "36:         ('reg_1', ctypes.c_uint),",
          "37:     )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25626707135d708de93a6f8b959e5fe803d94366",
      "candidate_info": {
        "commit_hash": "25626707135d708de93a6f8b959e5fe803d94366",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/25626707135d708de93a6f8b959e5fe803d94366",
        "files": [
          "arch/X86/X86GenDisassemblerTables_reduce.inc"
        ],
        "message": "x86: Fix the operand encoding in the test instruction for reduce set, issue #702",
        "before_after_code_files": [
          "arch/X86/X86GenDisassemblerTables_reduce.inc||arch/X86/X86GenDisassemblerTables_reduce.inc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86GenDisassemblerTables_reduce.inc||arch/X86/X86GenDisassemblerTables_reduce.inc": [
          "File: arch/X86/X86GenDisassemblerTables_reduce.inc -> arch/X86/X86GenDisassemblerTables_reduce.inc",
          "--- Hunk 1 ---",
          "[Context before]",
          "8685:   },",
          "8689:   },",
          "",
          "[Removed Lines]",
          "8687:     53,",
          "",
          "[Added Lines]",
          "8687:     57,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8713:   },",
          "8717:   },",
          "",
          "[Removed Lines]",
          "8715:     53,",
          "",
          "[Added Lines]",
          "8715:     57,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8741:   },",
          "8745:   },",
          "",
          "[Removed Lines]",
          "8743:     33,",
          "",
          "[Added Lines]",
          "8743:     60,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8773:   },",
          "8777:   },",
          "",
          "[Removed Lines]",
          "8775:     72,",
          "",
          "[Added Lines]",
          "8775:     71,",
          "",
          "---------------"
        ]
      }
    }
  ]
}