{
  "cve_id": "CVE-2017-16357",
  "cve_desc": "In radare 2.0.1, a memory corruption vulnerability exists in store_versioninfo_gnu_verdef() and store_versioninfo_gnu_verneed() in libr/bin/format/elf/elf.c, as demonstrated by an invalid free. This error is due to improper sh_size validation when allocating memory.",
  "repo": "radare/radare2",
  "patch_hash": "0b973e28166636e0ff1fad80baa0385c9c09c53a",
  "patch_info": {
    "commit_hash": "0b973e28166636e0ff1fad80baa0385c9c09c53a",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/0b973e28166636e0ff1fad80baa0385c9c09c53a",
    "files": [
      "libr/bin/format/elf/elf.c"
    ],
    "message": "Fixed crash in elf.c with 32bit r2 when shdr->sh_size > max size_t",
    "before_after_code_files": [
      "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c"
    ]
  },
  "patch_diff": {
    "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c": [
      "File: libr/bin/format/elf/elf.c -> libr/bin/format/elf/elf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "705:   return false;",
      "706:  }",
      "707:  link_shdr = &bin->shdr[shdr->sh_link];",
      "709:   return false;",
      "710:  }",
      "711:  Elf_(Verdef) *defs = calloc (shdr->sh_size, sizeof (char));",
      "",
      "[Removed Lines]",
      "708:  if (shdr->sh_size < 1) {",
      "",
      "[Added Lines]",
      "708:  if (shdr->sh_size < 1 || shdr->sh_size > SIZE_MAX) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "837:  if (shdr->sh_link > bin->ehdr.e_shnum) {",
      "838:   return NULL;",
      "839:  }",
      "841:   return NULL;",
      "842:  }",
      "843:  sdb = sdb_new0 ();",
      "",
      "[Removed Lines]",
      "840:  if (shdr->sh_size < 1) {",
      "",
      "[Added Lines]",
      "840:  if (shdr->sh_size < 1 || shdr->sh_size > SIZE_MAX) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea5c83ce4eb9cd57f1c7a03b450ae0691bcb4cba",
      "candidate_info": {
        "commit_hash": "ea5c83ce4eb9cd57f1c7a03b450ae0691bcb4cba",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/ea5c83ce4eb9cd57f1c7a03b450ae0691bcb4cba",
        "files": [
          "libr/bin/format/dex/dex.c",
          "libr/bin/format/elf/elf.c",
          "libr/bin/p/bin_dex.c",
          "libr/crypto/crypto.c",
          "libr/util/debruijn.c",
          "shlr/gdb/src/packet.c",
          "shlr/java/class.c"
        ],
        "message": "Fix a bunch of malloc(0)",
        "before_after_code_files": [
          "libr/bin/format/dex/dex.c||libr/bin/format/dex/dex.c",
          "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c",
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c",
          "libr/crypto/crypto.c||libr/crypto/crypto.c",
          "libr/util/debruijn.c||libr/util/debruijn.c",
          "shlr/gdb/src/packet.c||shlr/gdsrc/packet.c",
          "shlr/javclass.c||shlr/java/class.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c"
          ],
          "candidate": [
            "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/dex/dex.c||libr/bin/format/dex/dex.c": [
          "File: libr/bin/format/dex/dex.c -> libr/bin/format/dex/dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:   protos_size = bin->size - dexhdr->prototypes_offset;",
          "218:  }",
          "219:  if (protos_size < 0) {",
          "221:  }",
          "222:  dexhdr->prototypes_size = protos_size / sizeof (struct dex_proto_t);",
          "223:  bin->protos = (struct dex_proto_t *) calloc (protos_size, 1);",
          "",
          "[Removed Lines]",
          "220:   protos_size = 0;",
          "",
          "[Added Lines]",
          "220:   dexhdr->prototypes_size = 0;",
          "221:   return bin;",
          "",
          "---------------"
        ],
        "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c": [
          "File: libr/bin/format/elf/elf.c -> libr/bin/format/elf/elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "690:   return false;",
          "691:  }",
          "692:  link_shdr = &bin->shdr[shdr->sh_link];",
          "693:  Elf_(Verdef) *defs = calloc (shdr->sh_size, sizeof (char));",
          "694:  if (bin->shstrtab && shdr->sh_name < bin->shstrtab_size) {",
          "695:   section_name = &bin->shstrtab[shdr->sh_name];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "693:  if (shdr->sh_size < 1) {",
          "694:   return false;",
          "695:  }",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:  }",
          "211:  bufptr = bin->b->buf;",
          "212:  list_size = r_read_le32 (bufptr + params_off); // size of the list, in entries",
          "214:  if (!signature) {",
          "215:   return NULL;",
          "216:  }",
          "",
          "[Removed Lines]",
          "213:  signature = calloc (0, sizeof(char));",
          "",
          "[Added Lines]",
          "213:  signature = calloc (0, sizeof (char));",
          "",
          "---------------"
        ],
        "libr/crypto/crypto.c||libr/crypto/crypto.c": [
          "File: libr/crypto/crypto.c -> libr/crypto/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: }",
          "149: R_API ut8 *r_crypto_get_output(RCrypto *cry, int *size) {",
          "150:  ut8 *buf = calloc (1, cry->output_size);",
          "152:  if (size) {",
          "154:   memcpy (buf, cry->output, *size);",
          "",
          "[Removed Lines]",
          "151:  if (!buf) return NULL;",
          "",
          "[Added Lines]",
          "150:  if (cry->output_size < 1) {",
          "151:   return NULL;",
          "152:  }",
          "154:  if (!buf) {",
          "155:   return NULL;",
          "156:  }",
          "",
          "---------------"
        ],
        "libr/util/debruijn.c||libr/util/debruijn.c": [
          "File: libr/util/debruijn.c -> libr/util/debruijn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: static char* de_bruijn(const char* charset, int order, int maxlen) {",
          "47:  int size = strlen (charset);",
          "51:  if (!sequence) {",
          "52:   free (prenecklace_a);",
          "53:   return NULL;",
          "",
          "[Removed Lines]",
          "48:  int* prenecklace_a = calloc (size * order, sizeof(int));",
          "49:  if (!prenecklace_a) return NULL;",
          "50:  char* sequence = calloc (maxlen + 1, sizeof(char));",
          "",
          "[Added Lines]",
          "47:  if (!charset) {",
          "48:   return NULL;",
          "49:  }",
          "51:  int* prenecklace_a = calloc (size * order, sizeof (int));",
          "52:  if (!prenecklace_a) {",
          "53:   return NULL;",
          "54:  }",
          "55:  char* sequence = calloc (maxlen + 1, sizeof (char));",
          "",
          "---------------"
        ],
        "shlr/gdb/src/packet.c||shlr/gdsrc/packet.c": [
          "File: shlr/gdb/src/packet.c -> shlr/gdsrc/packet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  int chksum_nibble;",
          "20: };",
          "23:  char *ptr;",
          "25:  if (g->data_len == g->data_max) {",
          "27:   if (!ptr) {",
          "28:    eprintf (\"%s: Failed to reallocate buffer\\n\",",
          "29:      __func__);",
          "31:   }",
          "32:   g->data = ptr;",
          "34:  }",
          "36:  g->data[g->data_len++] = ch;",
          "38: }",
          "40: static int unpack(libgdbr_t *g, struct parse_ctx *ctx, int len) {",
          "",
          "[Removed Lines]",
          "22: static int append(libgdbr_t *g, char ch) {",
          "26:   ptr = realloc (g->data, g->data_max * 2);",
          "30:    return -1;",
          "33:   g->data_max *= 2;",
          "37:  return 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   ctx->sum += cur;",
          "69:   if (ctx->flags & ESC) {",
          "71:     return -1;",
          "72:    }",
          "",
          "[Removed Lines]",
          "70:    if (append (g, cur ^ 0x20) < 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:    }",
          "85:    for (j = cur - 29; j > 0; j--) {",
          "87:      return -1;",
          "88:     }",
          "89:    }",
          "",
          "[Removed Lines]",
          "86:     if (append (g, ctx->last) < 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:    }",
          "133:   default:",
          "135:     return -1;",
          "136:    }",
          "137:    ctx->last = cur;",
          "",
          "[Removed Lines]",
          "134:    if (append (g, cur) < 0) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "shlr/javclass.c||shlr/java/class.c": [
          "File: shlr/javclass.c -> shlr/java/class.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8149:   if (length > 0) {",
          "8150:    result->value._str->str = malloc (length);",
          "8151:    memcpy (result->value._str->str, string_str, length);",
          "8152:   } else {",
          "8153:    result->value._str->str = strdup (\"\");",
          "8154:   }",
          "8155:   if (string_str != empty) {",
          "8157:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7040985edabc2081e8f707ef98bf1faeedb34fe6",
      "candidate_info": {
        "commit_hash": "7040985edabc2081e8f707ef98bf1faeedb34fe6",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/7040985edabc2081e8f707ef98bf1faeedb34fe6",
        "files": [
          "libr/bin/format/elf/elf.c",
          "libr/bin/p/bin_nro.c",
          "libr/bin/p/bin_sfc.c"
        ],
        "message": "Fix last covs in rbin",
        "before_after_code_files": [
          "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c",
          "libr/bin/p/bin_nro.c||libr/bin/p/bin_nro.c",
          "libr/bin/p/bin_sfc.c||libr/bin/p/bin_sfc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c"
          ],
          "candidate": [
            "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/elf/elf.c||libr/bin/format/elf/elf.c": [
          "File: libr/bin/format/elf/elf.c -> libr/bin/format/elf/elf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "705:   return false;",
          "706:  }",
          "707:  link_shdr = &bin->shdr[shdr->sh_link];",
          "709:   return false;",
          "710:  }",
          "711:  Elf_(Verdef) *defs = calloc (shdr->sh_size, sizeof (char));",
          "",
          "[Removed Lines]",
          "708:  if (shdr->sh_size < 1 || shdr->sh_size > SIZE_MAX) {",
          "",
          "[Added Lines]",
          "708:  if ((int)shdr->sh_size < 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "837:  if (shdr->sh_link > bin->ehdr.e_shnum) {",
          "838:   return NULL;",
          "839:  }",
          "841:   return NULL;",
          "842:  }",
          "843:  sdb = sdb_new0 ();",
          "",
          "[Removed Lines]",
          "840:  if (shdr->sh_size < 1 || shdr->sh_size > SIZE_MAX) {",
          "",
          "[Added Lines]",
          "840:  if ((int)shdr->sh_size < 1) {",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_nro.c||libr/bin/p/bin_nro.c": [
          "File: libr/bin/p/bin_nro.c -> libr/bin/p/bin_nro.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:  const ut64 sz = r_buf_size (bf->buf);",
          "153:  const ut64 la = bf->o->loadaddr;",
          "154:  const ut8 *bytes = r_buf_buffer (bf->buf);",
          "156:  return bf->o->bin_obj != NULL;",
          "157: }",
          "",
          "[Removed Lines]",
          "155:  bf->o->bin_obj = load_bytes (bf, bytes, sz, la, bf? bf->sdb: NULL);",
          "",
          "[Added Lines]",
          "155:  bf->o->bin_obj = load_bytes (bf, bytes, sz, la, bf->sdb);",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_sfc.c||libr/bin/p/bin_sfc.c": [
          "File: libr/bin/p/bin_sfc.c -> libr/bin/p/bin_sfc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  sfc_int_hdr sfchdr = {{0}};",
          "40:  RBinInfo *ret = NULL;",
          "41:  int hdroffset = 0;",
          "43:  if ((bf->size & 0x8000) == 0x200) {",
          "44:   hdroffset = 0x200;",
          "45:  }",
          "47:  int reat = r_buf_read_at (bf->buf, 0x7FC0 + hdroffset,",
          "48:   (ut8*)&sfchdr, SFC_HDR_SIZE);",
          "49:  if (reat != SFC_HDR_SIZE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: #if THIS_IS_ALWAYS_FALSE_WTF",
          "46: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:  int hdroffset = 0;",
          "120:  bool is_hirom = false;",
          "121:  int i = 0; //0x8000-long bank number for loops",
          "123:  if ((bf->size & 0x8000) == 0x200) {",
          "124:   hdroffset = 0x200;",
          "125:  }",
          "129:  int reat = r_buf_read_at (bf->buf, 0x7FC0 + hdroffset, (ut8*)&sfchdr, SFC_HDR_SIZE);",
          "130:  if (reat != SFC_HDR_SIZE) {",
          "",
          "[Removed Lines]",
          "126:  sfc_int_hdr sfchdr;",
          "127:  memset (&sfchdr, 0, SFC_HDR_SIZE);",
          "",
          "[Added Lines]",
          "122: #if THIS_IS_ALWAYS_FALSE_WTF",
          "126: #endif",
          "127:  sfc_int_hdr sfchdr = {0};",
          "",
          "---------------"
        ]
      }
    }
  ]
}