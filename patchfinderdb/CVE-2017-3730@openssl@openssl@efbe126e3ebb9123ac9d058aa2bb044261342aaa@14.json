{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "93558bf5190226494d3b549397fbf94214846d0d",
      "candidate_info": {
        "commit_hash": "93558bf5190226494d3b549397fbf94214846d0d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/93558bf5190226494d3b549397fbf94214846d0d",
        "files": [
          "crypto/dso/dso_dl.c",
          "crypto/dso/dso_dlfcn.c",
          "crypto/dso/dso_err.c",
          "crypto/dso/dso_lib.c",
          "crypto/dso/dso_locl.h",
          "crypto/dso/dso_vms.c",
          "crypto/dso/dso_win32.c",
          "include/internal/dso.h",
          "util/libcrypto.num"
        ],
        "message": "Partial revert of 3d8b2ec42 to add back DSO_pathbyaddr\n\nCommit 3d8b2ec42 removed various unused functions. However now we need to\nuse one of them! This commit resurrects DSO_pathbyaddr(). We're not going to\nresurrect the Windows version though because what we need to achieve can be\ndone a different way on Windows.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit cb6ea61c161e88aa0268c77f308469a67b2ec063)",
        "before_after_code_files": [
          "crypto/dso/dso_dl.c||crypto/dso/dso_dl.c",
          "crypto/dso/dso_dlfcn.c||crypto/dso/dso_dlfcn.c",
          "crypto/dso/dso_err.c||crypto/dso/dso_err.c",
          "crypto/dso/dso_lib.c||crypto/dso/dso_lib.c",
          "crypto/dso/dso_locl.h||crypto/dso/dso_locl.h",
          "crypto/dso/dso_vms.c||crypto/dso/dso_vms.c",
          "crypto/dso/dso_win32.c||crypto/dso/dso_win32.c",
          "include/internal/dso.h||include/internal/dso.h",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/dso/dso_dl.c||crypto/dso/dso_dl.c": [
          "File: crypto/dso/dso_dl.c -> crypto/dso/dso_dl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: static char *dl_name_converter(DSO *dso, const char *filename);",
          "23: static char *dl_merger(DSO *dso, const char *filespec1,",
          "24:                        const char *filespec2);",
          "25: static void *dl_globallookup(const char *name);",
          "27: static DSO_METHOD dso_meth_dl = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: static int dl_pathbyaddr(void *addr, char *path, int sz);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     dl_merger,",
          "37:     dl_globallookup",
          "38: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     dl_pathbyaddr,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:     return (translated);",
          "236: }",
          "238: static void *dl_globallookup(const char *name)",
          "239: {",
          "240:     void *ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: static int dl_pathbyaddr(void *addr, char *path, int sz)",
          "241: {",
          "242:     struct shl_descriptor inf;",
          "243:     int i, len;",
          "245:     if (addr == NULL) {",
          "246:         union {",
          "247:             int (*f) (void *, char *, int);",
          "248:             void *p;",
          "249:         } t = {",
          "250:             dl_pathbyaddr",
          "251:         };",
          "252:         addr = t.p;",
          "253:     }",
          "255:     for (i = -1; shl_get_r(i, &inf) == 0; i++) {",
          "256:         if (((size_t)addr >= inf.tstart && (size_t)addr < inf.tend) ||",
          "257:             ((size_t)addr >= inf.dstart && (size_t)addr < inf.dend)) {",
          "258:             len = (int)strlen(inf.filename);",
          "259:             if (sz <= 0)",
          "260:                 return len + 1;",
          "261:             if (len >= sz)",
          "262:                 len = sz - 1;",
          "263:             memcpy(path, inf.filename, len);",
          "264:             path[len++] = 0;",
          "265:             return len;",
          "266:         }",
          "267:     }",
          "269:     return -1;",
          "270: }",
          "",
          "---------------"
        ],
        "crypto/dso/dso_dlfcn.c||crypto/dso/dso_dlfcn.c": [
          "File: crypto/dso/dso_dlfcn.c -> crypto/dso/dso_dlfcn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: static char *dlfcn_name_converter(DSO *dso, const char *filename);",
          "45: static char *dlfcn_merger(DSO *dso, const char *filespec1,",
          "46:                           const char *filespec2);",
          "47: static void *dlfcn_globallookup(const char *name);",
          "49: static DSO_METHOD dso_meth_dlfcn = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: static int dlfcn_pathbyaddr(void *addr, char *path, int sz);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     dlfcn_merger,",
          "59:     dlfcn_globallookup",
          "60: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     dlfcn_pathbyaddr,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306: }",
          "309: static void *dlfcn_globallookup(const char *name)",
          "310: {",
          "311:     void *ret = NULL, *handle = dlopen(NULL, RTLD_LAZY);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311: static int dlfcn_pathbyaddr(void *addr, char *path, int sz)",
          "312: {",
          "313: # ifdef HAVE_DLINFO",
          "314:     Dl_info dli;",
          "315:     int len;",
          "317:     if (addr == NULL) {",
          "318:         union {",
          "319:             int (*f) (void *, char *, int);",
          "320:             void *p;",
          "321:         } t = {",
          "322:             dlfcn_pathbyaddr",
          "323:         };",
          "324:         addr = t.p;",
          "325:     }",
          "327:     if (dladdr(addr, &dli)) {",
          "328:         len = (int)strlen(dli.dli_fname);",
          "329:         if (sz <= 0)",
          "330:             return len + 1;",
          "331:         if (len >= sz)",
          "332:             len = sz - 1;",
          "333:         memcpy(path, dli.dli_fname, len);",
          "334:         path[len++] = 0;",
          "335:         return len;",
          "336:     }",
          "338:     ERR_add_error_data(2, \"dlfcn_pathbyaddr(): \", dlerror());",
          "339: # endif",
          "340:     return -1;",
          "341: }",
          "",
          "---------------"
        ],
        "crypto/dso/dso_err.c||crypto/dso/dso_err.c": [
          "File: crypto/dso/dso_err.c -> crypto/dso/dso_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     {ERR_FUNC(DSO_F_DSO_LOAD), \"DSO_load\"},",
          "39:     {ERR_FUNC(DSO_F_DSO_MERGE), \"DSO_merge\"},",
          "40:     {ERR_FUNC(DSO_F_DSO_NEW_METHOD), \"DSO_new_method\"},",
          "41:     {ERR_FUNC(DSO_F_DSO_SET_FILENAME), \"DSO_set_filename\"},",
          "42:     {ERR_FUNC(DSO_F_DSO_UP_REF), \"DSO_up_ref\"},",
          "43:     {ERR_FUNC(DSO_F_VMS_BIND_SYM), \"vms_bind_sym\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     {ERR_FUNC(DSO_F_DSO_PATHBYADDR), \"DSO_pathbyaddr\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     {ERR_FUNC(DSO_F_WIN32_LOAD), \"win32_load\"},",
          "51:     {ERR_FUNC(DSO_F_WIN32_MERGER), \"win32_merger\"},",
          "52:     {ERR_FUNC(DSO_F_WIN32_NAME_CONVERTER), \"win32_name_converter\"},",
          "53:     {ERR_FUNC(DSO_F_WIN32_SPLITTER), \"win32_splitter\"},",
          "54:     {ERR_FUNC(DSO_F_WIN32_UNLOAD), \"win32_unload\"},",
          "55:     {0, NULL}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     {ERR_FUNC(DSO_F_WIN32_PATHBYADDR), \"win32_pathbyaddr\"},",
          "",
          "---------------"
        ],
        "crypto/dso/dso_lib.c||crypto/dso/dso_lib.c": [
          "File: crypto/dso/dso_lib.c -> crypto/dso/dso_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     return (result);",
          "305: }",
          "307: void *DSO_global_lookup(const char *name)",
          "308: {",
          "309:     DSO_METHOD *meth = default_DSO_meth;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307: int DSO_pathbyaddr(void *addr, char *path, int sz)",
          "308: {",
          "309:     DSO_METHOD *meth = default_DSO_meth;",
          "310:     if (meth == NULL)",
          "311:         meth = DSO_METHOD_openssl();",
          "312:     if (meth->pathbyaddr == NULL) {",
          "313:         DSOerr(DSO_F_DSO_PATHBYADDR, DSO_R_UNSUPPORTED);",
          "314:         return -1;",
          "315:     }",
          "316:     return (*meth->pathbyaddr) (addr, path, sz);",
          "317: }",
          "",
          "---------------"
        ],
        "crypto/dso/dso_locl.h||crypto/dso/dso_locl.h": [
          "File: crypto/dso/dso_locl.h -> crypto/dso/dso_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     int (*init) (DSO *dso);",
          "101:     int (*finish) (DSO *dso);",
          "103:     void *(*globallookup) (const char *symname);",
          "104: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     int (*pathbyaddr) (void *addr, char *path, int sz);",
          "",
          "---------------"
        ],
        "crypto/dso/dso_vms.c||crypto/dso/dso_vms.c": [
          "File: crypto/dso/dso_vms.c -> crypto/dso/dso_vms.c"
        ],
        "crypto/dso/dso_win32.c||crypto/dso/dso_win32.c": [
          "File: crypto/dso/dso_win32.c -> crypto/dso/dso_win32.c"
        ],
        "include/internal/dso.h||include/internal/dso.h": [
          "File: include/internal/dso.h -> include/internal/dso.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: DSO_METHOD *DSO_METHOD_openssl(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: int DSO_pathbyaddr(void *addr, char *path, int sz);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177: # define DSO_F_DSO_LOAD                                   112",
          "178: # define DSO_F_DSO_MERGE                                  132",
          "179: # define DSO_F_DSO_NEW_METHOD                             113",
          "180: # define DSO_F_DSO_SET_FILENAME                           129",
          "181: # define DSO_F_DSO_UP_REF                                 114",
          "182: # define DSO_F_VMS_BIND_SYM                               115",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: # define DSO_F_DSO_PATHBYADDR                             105",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189: # define DSO_F_WIN32_LOAD                                 120",
          "190: # define DSO_F_WIN32_MERGER                               134",
          "191: # define DSO_F_WIN32_NAME_CONVERTER                       125",
          "192: # define DSO_F_WIN32_SPLITTER                             136",
          "193: # define DSO_F_WIN32_UNLOAD                               121",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: # define DSO_F_WIN32_PATHBYADDR                           109",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4206: OCSP_RESPID_set_by_name                 4157 1_1_0a EXIST::FUNCTION:OCSP",
          "4207: OCSP_RESPID_set_by_key                  4158 1_1_0a EXIST::FUNCTION:OCSP",
          "4208: OCSP_RESPID_match                       4159 1_1_0a EXIST::FUNCTION:OCSP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4209: DSO_pathbyaddr                          4170 1_1_0c EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f02ec65590ef38444e80f595ebdbd211a25b4738",
      "candidate_info": {
        "commit_hash": "f02ec65590ef38444e80f595ebdbd211a25b4738",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f02ec65590ef38444e80f595ebdbd211a25b4738",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Fix the LIBZ macro on VC config targets\n\nIf zlib-dynamic was given but not --with-zlib-lib, LIBZ was defined to\nthe empty string.  Instead, give it the default \"ZLIB1\".\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1772)\n(cherry picked from commit 111b234c8f80371e7e31d922946cbd546491d4e8)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1258:         cflags           => \"-W3 -wd4090 -Gs0 -GF -Gy -nologo -DOPENSSL_SYS_WIN32 -DWIN32_LEAN_AND_MEAN -DL_ENDIAN -D_CRT_SECURE_NO_DEPRECATE\",",
          "1259:         defines          => add(sub { my @defs = ();",
          "1260:                                       unless ($disabled{\"zlib-dynamic\"}) {",
          "1261:                                           push @defs,",
          "1262:                                               quotify(\"perl\",",
          "1264:                                       }",
          "1265:                                       return [ @defs ];",
          "1266:                                     }),",
          "",
          "[Removed Lines]",
          "1263:                                                       'LIBZ=\"' . $withargs{zlib_lib} . '\"');",
          "",
          "[Added Lines]",
          "1261:                                           my $zlib =",
          "1262:                                               $withargs{zlib_lib} // \"ZLIB1\";",
          "1265:                                                       'LIBZ=\"' . $zlib . '\"');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64e3965d63c452edb590a76b81b9bdf5118af623",
      "candidate_info": {
        "commit_hash": "64e3965d63c452edb590a76b81b9bdf5118af623",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/64e3965d63c452edb590a76b81b9bdf5118af623",
        "files": [
          "include/openssl/ssl.h"
        ],
        "message": "Fix the SSL_set1_sigalgs() macro\n\nThis macro has a typo in it which makes it unusable. This issue was already\nfixed in 1.0.2 in commit 75fdee04827, but the same fix was not applied to\nother branches.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2160)\n(cherry picked from commit fb3ae0e830097a3a2a41a0ea82c7ad725f05a451)",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1241: # define SSL_CTX_set1_sigalgs_list(ctx, s) \\",
          "1242:         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SIGALGS_LIST,0,(char *)s)",
          "1243: # define SSL_set1_sigalgs(ctx, slist, slistlen) \\",
          "1245: # define SSL_set1_sigalgs_list(ctx, s) \\",
          "1246:         SSL_ctrl(ctx,SSL_CTRL_SET_SIGALGS_LIST,0,(char *)s)",
          "1247: # define SSL_CTX_set1_client_sigalgs(ctx, slist, slistlen) \\",
          "",
          "[Removed Lines]",
          "1244:         SSL_ctrl(ctx,SSL_CTRL_SET_SIGALGS,clistlen,(int *)slist)",
          "",
          "[Added Lines]",
          "1244:         SSL_ctrl(ctx,SSL_CTRL_SET_SIGALGS,slistlen,(int *)slist)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7358595369fe08c26c95d37394f16be503524cf",
      "candidate_info": {
        "commit_hash": "f7358595369fe08c26c95d37394f16be503524cf",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f7358595369fe08c26c95d37394f16be503524cf",
        "files": [
          "test/README",
          "test/recipes/20-test_passwd.t"
        ],
        "message": "Add a test for 'openssl passwd'\n\nAlso, enlarge test group 20 to include openssl commands that aren't\ntested otherwise\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 497f3bf9a75a2917e50b16b7985e87c89b86a39b)",
        "before_after_code_files": [
          "test/recipes/20-test_passwd.t||test/recipes/20-test_passwd.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/20-test_passwd.t||test/recipes/20-test_passwd.t": [
          "File: test/recipes/20-test_passwd.t -> test/recipes/20-test_passwd.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #! /usr/bin/env perl",
          "2: # Copyright 2015-2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: use strict;",
          "11: use warnings;",
          "13: use OpenSSL::Test;",
          "15: setup(\"test_passwd\");",
          "17: plan tests => 6;",
          "19: ok(compare1stline([qw{openssl passwd password}], '^.{13}\\R$'),",
          "20:    'crypt password with random salt');",
          "21: ok(compare1stline([qw{openssl passwd -1 password}], '^\\$1\\$.{8}\\$.{22}\\R$'),",
          "22:    'BSD style MD5 password with random salt');",
          "23: ok(compare1stline([qw{openssl passwd -apr1 password}], '^\\$apr1\\$.{8}\\$.{22}\\R$'),",
          "24:    'Apache style MD5 password with random salt');",
          "25: ok(compare1stline([qw{openssl passwd -salt xx password}], '^xxj31ZMTZzkVA\\R$'),",
          "26:    'crypt password with salt xx');",
          "27: ok(compare1stline([qw{openssl passwd -salt xxxxxxxx -1 password}], '^\\$1\\$xxxxxxxx\\$UYCIxa628\\.9qXjpQCjM4a\\.\\R$'),",
          "28:    'BSD style MD5 password with salt xxxxxxxx');",
          "29: ok(compare1stline([qw{openssl passwd -salt xxxxxxxx -apr1 password}], '^\\$apr1\\$xxxxxxxx\\$dxHfLAsjHkDRmG83UXe8K0\\R$'),",
          "30:    'Apache style MD5 password with salt xxxxxxxx');",
          "33: sub compare1stline {",
          "34:     my ($cmdarray, $regexp) = @_;",
          "35:     my @lines = run(app($cmdarray), capture => 1);",
          "37:     return $lines[0] =~ m|$regexp|;",
          "38: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0de0fb887b464a9f0f20ddcf98e7980ae4b0fd9c",
      "candidate_info": {
        "commit_hash": "0de0fb887b464a9f0f20ddcf98e7980ae4b0fd9c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0de0fb887b464a9f0f20ddcf98e7980ae4b0fd9c",
        "files": [
          "crypto/evp/e_chacha20_poly1305.c"
        ],
        "message": "Add missing flags for EVP_chacha20()\n\nChaCha20 code uses its own custom cipher_data. Add EVP_CIPH_CUSTOM_IV\nand EVP_CIPH_ALWAYS_CALL_INIT so that the key and the iv can be set by\ndifferent calls of EVP_CipherInit_ex().\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2156)\n(cherry picked from commit c83680a04aac7a15e6ac48ed732b8322c4c9d49a)",
        "before_after_code_files": [
          "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
          "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     chacha_init_key,",
          "132:     chacha_cipher,",
          "133:     NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     EVP_CIPH_CUSTOM_IV | EVP_CIPH_ALWAYS_CALL_INIT,",
          "",
          "---------------"
        ]
      }
    }
  ]
}