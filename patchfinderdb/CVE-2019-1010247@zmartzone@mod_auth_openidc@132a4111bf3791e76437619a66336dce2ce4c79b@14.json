{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23897741117ba080c4dd0f8b1ea38339c3ad47f1",
      "candidate_info": {
        "commit_hash": "23897741117ba080c4dd0f8b1ea38339c3ad47f1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/23897741117ba080c4dd0f8b1ea38339c3ad47f1",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/proto.c"
        ],
        "message": "fix regression bug for private_key_jwt\n\navoid segmentation fault when no per-provider keys have been\nconfigured and private_key_jwt is used\n\nbump to 2.4.0rc15\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc14],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc15],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868:    && (apr_hash_count(client_signing_keys) > 0)) {",
          "1869:   signing_keys = client_signing_keys;",
          "1870:  } else if ((cfg->private_keys != NULL)",
          "1872:   signing_keys = cfg->private_keys;",
          "1873:  } else {",
          "1874:   oidc_error(r,",
          "",
          "[Removed Lines]",
          "1871:    && (apr_hash_count(client_signing_keys) > 0)) {",
          "",
          "[Added Lines]",
          "1871:    && (apr_hash_count(cfg->private_keys) > 0)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1881:  apr_hash_index_t *hi = apr_hash_first(r->pool, signing_keys);",
          "1882:  apr_hash_this(hi, (const void **) &jwt->header.kid, &klen, (void **) &jwk);",
          "1884:  jwt->header.alg = apr_pstrdup(r->pool, CJOSE_HDR_ALG_RS256);",
          "1886:  oidc_proto_jwt_sign_and_add(r, params, jwt, jwk);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1884:  oidc_debug(r, \"#6\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "804b32383786201661c71484cdc367621a1f5668",
      "candidate_info": {
        "commit_hash": "804b32383786201661c71484cdc367621a1f5668",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/804b32383786201661c71484cdc367621a1f5668",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.h",
          "src/util.c"
        ],
        "message": "no longer use the fixup handler for environment variables\n\n- do it as part of the authn handler so it works better in\n  combination with other modules that have their main\n  function in an authn/access handler\n  e.g. mod_oauth2 and mod_sts\n- bump to 2.4.0rc21\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc20],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc21],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2329:  apr_pool_cleanup_register(p, s, oidc_cleanup_child, apr_pool_cleanup_null);",
          "2330: }",
          "2349: static const char oidcFilterName[] = \"oidc_filter_in_filter\";",
          "2351: static void oidc_filter_in_insert_filter(request_rec *r) {",
          "",
          "[Removed Lines]",
          "2335: static int oidc_auth_fixups(request_rec *r) {",
          "2336:  apr_table_t *env = NULL;",
          "2337:  apr_pool_userdata_get((void **) &env, OIDC_USERDATA_ENV_KEY, r->pool);",
          "2338:  if ((env == NULL) || apr_is_empty_table(env))",
          "2339:   return DECLINED;",
          "2341:  oidc_debug(r, \"overlaying env with %d elements\",",
          "2342:    apr_table_elts(env)->nelts);",
          "2344:  r->subprocess_env = apr_table_overlay(r->pool, r->subprocess_env, env);",
          "2346:  return OK;",
          "2347: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2444:  ap_hook_post_config(oidc_post_config, NULL, NULL, APR_HOOK_LAST);",
          "2445:  ap_hook_child_init(oidc_child_init, NULL, NULL, APR_HOOK_MIDDLE);",
          "2446:  ap_hook_handler(oidc_content_handler, NULL, NULL, APR_HOOK_FIRST);",
          "2448:  ap_hook_insert_filter(oidc_filter_in_insert_filter, NULL, NULL,",
          "2449:    APR_HOOK_MIDDLE);",
          "2450:  ap_register_input_filter(oidcFilterName, oidc_filter_in_filter, NULL,",
          "",
          "[Removed Lines]",
          "2447:  ap_hook_fixups(oidc_auth_fixups, NULL, NULL, APR_HOOK_MIDDLE);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: #define OIDC_USERDATA_KEY \"mod_auth_openidc_state\"",
          "173: #define OIDC_USERDATA_POST_PARAMS_KEY \"oidc_userdata_post_params\"",
          "",
          "[Removed Lines]",
          "172: #define OIDC_USERDATA_ENV_KEY \"mod_auth_openidc_env\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1738:   const char *s_value, const char *claim_prefix, apr_byte_t as_header,",
          "1739:   apr_byte_t as_env_var) {",
          "1744:  const char *s_name = apr_psprintf(r->pool, \"%s%s\", claim_prefix,",
          "1745:    oidc_normalize_header_name(r, s_key));",
          "",
          "[Removed Lines]",
          "1741:  apr_table_t *env = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1753:   oidc_debug(r, \"setting environment variable \\\"%s: %s\\\"\", s_name,",
          "1754:     s_value);",
          "1761:  }",
          "1762: }",
          "",
          "[Removed Lines]",
          "1756:   apr_pool_userdata_get((void **) &env, OIDC_USERDATA_ENV_KEY, r->pool);",
          "1757:   if (env == NULL)",
          "1758:    env = apr_table_make(r->pool, 10);",
          "1759:   apr_table_set(env, s_name, s_value);",
          "1760:   apr_pool_userdata_set(env, OIDC_USERDATA_ENV_KEY, NULL, r->pool);",
          "",
          "[Added Lines]",
          "1754:   apr_table_set(r->subprocess_env, s_name, s_value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b683bc88a1845231d28ddc50fbeafbb6764e96c",
      "candidate_info": {
        "commit_hash": "1b683bc88a1845231d28ddc50fbeafbb6764e96c",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/1b683bc88a1845231d28ddc50fbeafbb6764e96c",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "release 2.3.9\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "510721e6b7ae31c05e2606ebae54764cdef56583",
      "candidate_info": {
        "commit_hash": "510721e6b7ae31c05e2606ebae54764cdef56583",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/510721e6b7ae31c05e2606ebae54764cdef56583",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/util.c",
          "test/test.c"
        ],
        "message": "deal with forwarding proxy setups; see #395 ; thanks @archzone\n\nbump to 2.3.9rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495: char *oidc_get_current_url(request_rec *r) {",
          "498:    (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args,",
          "499:    NULL);",
          "",
          "[Removed Lines]",
          "497:  char *url = apr_pstrcat(r->pool, oidc_get_current_url_base(r), r->uri,",
          "",
          "[Added Lines]",
          "496:  char *url = NULL, *path = NULL;",
          "497:  apr_uri_t uri;",
          "499:  path = r->uri;",
          "501:  if ((path) && (path[0] != '/')) {",
          "502:   memset(&uri, 0, sizeof(apr_uri_t));",
          "503:   if (apr_uri_parse(r->pool, r->uri, &uri) == APR_SUCCESS)",
          "504:    path = uri.path;",
          "505:   else",
          "506:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\", r->uri);",
          "507:  }",
          "509:  url = apr_pstrcat(r->pool, oidc_get_current_url_base(r), path,",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1193: static char * test_current_url(request_rec *r) {",
          "1198:  apr_table_set(r->headers_in, \"X-Forwarded-Host\", \"www.outer.com\");",
          "1199:  url = oidc_get_current_url(r);",
          "1202:  apr_table_set(r->headers_in, \"X-Forwarded-Host\", \"www.outer.com:654\");",
          "1203:  url = oidc_get_current_url(r);",
          "1206:  apr_table_set(r->headers_in, \"X-Forwarded-Port\", \"321\");",
          "1207:  url = oidc_get_current_url(r);",
          "1210:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"http\");",
          "1211:  url = oidc_get_current_url(r);",
          "1214:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"https , http\");",
          "1215:  url = oidc_get_current_url(r);",
          "1218:  apr_table_unset(r->headers_in, \"X-Forwarded-Host\");",
          "1219:  apr_table_unset(r->headers_in, \"X-Forwarded-Port\");",
          "1220:  url = oidc_get_current_url(r);",
          "1223:  return 0;",
          "1224: }",
          "",
          "[Removed Lines]",
          "1195:  char *url = oidc_get_current_url(r);",
          "1196:  TST_ASSERT_STR(\"test_headers (1)\", url, \"https://www.example.com\");",
          "1200:  TST_ASSERT_STR(\"test_headers (2)\", url, \"https://www.outer.com\");",
          "1204:  TST_ASSERT_STR(\"test_headers (3)\", url, \"https://www.outer.com:654\");",
          "1208:  TST_ASSERT_STR(\"test_headers (4)\", url, \"https://www.outer.com:321\");",
          "1212:  TST_ASSERT_STR(\"test_headers (5)\", url, \"http://www.outer.com:321\");",
          "1216:  TST_ASSERT_STR(\"test_headers (6)\", url, \"https://www.outer.com:321\");",
          "1221:  TST_ASSERT_STR(\"test_headers (7)\", url, \"https://www.example.com\");",
          "",
          "[Added Lines]",
          "1195:  char *url = NULL;",
          "1197:  r->uri = \"/test\";",
          "1199:  url = oidc_get_current_url(r);",
          "1200:  TST_ASSERT_STR(\"test_current_url (1)\", url, \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1204:  TST_ASSERT_STR(\"test_current_url (2)\", url, \"https://www.outer.com/test?foo=bar&param1=value1\");",
          "1208:  TST_ASSERT_STR(\"test_current_url (3)\", url, \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1212:  TST_ASSERT_STR(\"test_current_url (4)\", url, \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1216:  TST_ASSERT_STR(\"test_current_url (5)\", url, \"http://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1220:  TST_ASSERT_STR(\"test_current_url (6)\", url, \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1225:  TST_ASSERT_STR(\"test_current_url (7)\", url, \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1227:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"http \");",
          "1228:  apr_table_set(r->headers_in, \"Host\", \"remotehost:8380\");",
          "1229:  r->uri = \"http://remotehost:8380/private/\";",
          "1230:  url = oidc_get_current_url(r);",
          "1231:  TST_ASSERT_STR(\"test_current_url (8)\", url, \"http://remotehost:8380/private/?foo=bar&param1=value1\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa20bd982ab6661d647d9b6dda6b73d08db285ad",
      "candidate_info": {
        "commit_hash": "aa20bd982ab6661d647d9b6dda6b73d08db285ad",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/aa20bd982ab6661d647d9b6dda6b73d08db285ad",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/proto.c"
        ],
        "message": "url-encode credentials when using client_secret_basic\n\n- URL-encode client_id/client_secret when using client_secret_basic\naccording to: https://tools.ietf.org/html/rfc6749#section-2.3.1\n  see also: https://github.com/openid-certification/oidctest/issues/136\n- add debug logs in oidc_proto_generate_random_string\n- bump to 2.4.0rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/proto.c||src/proto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:  if (auth_request_params == NULL)",
          "556:   return;",
          "560:   ap_unescape_url(key);",
          "561:   ap_unescape_url(val);",
          "562:   if (apr_strnatcmp(val, OIDC_STR_HASH) != 0) {",
          "",
          "[Removed Lines]",
          "558:  while (*auth_request_params && (val = ap_getword(r->pool, &auth_request_params, OIDC_CHAR_AMP))) {",
          "559:   key = ap_getword(r->pool, (const char **)&val, OIDC_CHAR_EQUAL);",
          "",
          "[Added Lines]",
          "558:  while (*auth_request_params",
          "559:    && (val = ap_getword(r->pool, &auth_request_params, OIDC_CHAR_AMP))) {",
          "560:   key = ap_getword(r->pool, (const char **) &val, OIDC_CHAR_EQUAL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1636: }",
          "1642:   const char *client_id, const char *client_secret, char **basic_auth_str) {",
          "1643:  oidc_debug(r, \"enter\");",
          "1644:  if (client_secret == NULL) {",
          "1645:   oidc_error(r, \"no client secret is configured\");",
          "1646:   return FALSE;",
          "1647:  }",
          "1649:  return TRUE;",
          "1650: }",
          "1656:   const char *client_id, const char *client_secret, apr_table_t *params) {",
          "1657:  oidc_debug(r, \"enter\");",
          "1658:  if (client_secret == NULL) {",
          "",
          "[Removed Lines]",
          "1641: static apr_byte_t oidc_proto_endpoint_auth_basic(request_rec *r,",
          "1655: static apr_byte_t oidc_proto_endpoint_auth_post(request_rec *r,",
          "",
          "[Added Lines]",
          "1642: static apr_byte_t oidc_proto_endpoint_client_secret_basic(request_rec *r,",
          "1650:    oidc_util_escape_string(r, client_id),",
          "1651:    oidc_util_escape_string(r, client_secret));",
          "1659: static apr_byte_t oidc_proto_endpoint_client_secret_post(request_rec *r,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1838:  if (apr_strnatcmp(token_endpoint_auth,",
          "1839:    OIDC_PROTO_CLIENT_SECRET_BASIC) == 0)",
          "1843:  if (apr_strnatcmp(token_endpoint_auth,",
          "1844:    OIDC_PROTO_CLIENT_SECRET_POST) == 0)",
          "1848:  if (apr_strnatcmp(token_endpoint_auth,",
          "1849:    OIDC_PROTO_CLIENT_SECRET_JWT) == 0)",
          "",
          "[Removed Lines]",
          "1840:   return oidc_proto_endpoint_auth_basic(r, client_id, client_secret,",
          "1841:     basic_auth_str);",
          "1845:   return oidc_proto_endpoint_auth_post(r, client_id, client_secret,",
          "1846:     params);",
          "",
          "[Added Lines]",
          "1844:   return oidc_proto_endpoint_client_secret_basic(r, client_id,",
          "1845:     client_secret, basic_auth_str);",
          "1849:   return oidc_proto_endpoint_client_secret_post(r, client_id,",
          "1850:     client_secret, params);",
          "",
          "---------------"
        ]
      }
    }
  ]
}