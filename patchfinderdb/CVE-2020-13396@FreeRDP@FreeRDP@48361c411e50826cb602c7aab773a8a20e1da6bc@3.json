{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf4f6dbf3f57fb432e93773630ed5407ddec9147",
      "candidate_info": {
        "commit_hash": "cf4f6dbf3f57fb432e93773630ed5407ddec9147",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/cf4f6dbf3f57fb432e93773630ed5407ddec9147",
        "files": [
          "libfreerdp/codec/clear.c",
          "libfreerdp/codec/nsc.c",
          "libfreerdp/codec/progressive.c"
        ],
        "message": "Fixed multiple sanitizer errors in codecs\n\n(cherry picked from commit 2278d92a5d902692a7d1088629b2345c9b4e229c)",
        "before_after_code_files": [
          "libfreerdp/codec/clear.c||libfreerdp/codec/clear.c",
          "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
          "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/clear.c||libfreerdp/codec/clear.c": [
          "File: libfreerdp/codec/clear.c -> libfreerdp/codec/clear.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:    if (vBarUpdate)",
          "784:    {",
          "785:     UINT32 x;",
          "787:     BYTE* dstBuffer;",
          "789:     if (clear->VBarStorageCursor >= CLEARCODEC_VBAR_SIZE)",
          "",
          "[Removed Lines]",
          "786:     BYTE* pSrcPixel;",
          "",
          "[Added Lines]",
          "786:     BYTE* pSrcPixel = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "826:     if ((y + count) > vBarPixelCount)",
          "827:      count = (vBarPixelCount > y) ? (vBarPixelCount - y) : 0;",
          "832:     for (x = 0; x < count; x++)",
          "833:     {",
          "",
          "[Removed Lines]",
          "829:     pSrcPixel =",
          "830:         &vBarShortEntry->pixels[(y - vBarYOn) * GetBytesPerPixel(clear->format)];",
          "",
          "[Added Lines]",
          "829:     if (count > 0)",
          "830:      pSrcPixel =",
          "831:          &vBarShortEntry->pixels[(y - vBarYOn) * GetBytesPerPixel(clear->format)];",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
          "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: static BOOL nsc_rle_decode(BYTE* in, BYTE* out, UINT32 outSize, UINT32 originalSize)",
          "115: {",
          "121:  while (left > 4)",
          "122:  {",
          "125:   if (left == 5)",
          "126:   {",
          "",
          "[Removed Lines]",
          "116:  UINT32 len;",
          "117:  UINT32 left;",
          "118:  BYTE value;",
          "119:  left = originalSize;",
          "123:   value = *in++;",
          "",
          "[Added Lines]",
          "116:  UINT32 left = originalSize;",
          "120:   const BYTE value = *in++;",
          "121:   UINT32 len = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:    else",
          "144:    {",
          "145:     in++;",
          "148:    }",
          "150:    if (outSize < len)",
          "",
          "[Removed Lines]",
          "146:     len = *((UINT32*)in);",
          "147:     in += 4;",
          "",
          "[Added Lines]",
          "144:     len = ((UINT32)(*in++));",
          "145:     len |= ((UINT32)(*in++)) << 8U;",
          "146:     len |= ((UINT32)(*in++)) << 16U;",
          "147:     len |= ((UINT32)(*in++)) << 24U;",
          "",
          "---------------"
        ],
        "libfreerdp/codec/progressive.c||libfreerdp/codec/progressive.c": [
          "File: libfreerdp/codec/progressive.c -> libfreerdp/codec/progressive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1183:    sign[index] = input;",
          "1184:   }",
          "1187:  }",
          "1189:  return 1;",
          "",
          "[Removed Lines]",
          "1186:   buffer[index] += (input << shift);",
          "",
          "[Added Lines]",
          "1186:   buffer[index] += (INT16)((UINT32)input << shift);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0122ebfffde95f8949a36cd0b01ba64800063283",
      "candidate_info": {
        "commit_hash": "0122ebfffde95f8949a36cd0b01ba64800063283",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/0122ebfffde95f8949a36cd0b01ba64800063283",
        "files": [
          "winpr/libwinpr/crt/utf.c"
        ],
        "message": "utf8 behaviour fixes\n\n(cherry picked from commit bb78eb4fa6f8618a70995eaf17aba94cc47a1e74)",
        "before_after_code_files": [
          "winpr/libwinpr/crt/utf.c||winpr/libwinpr/crt/utf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/crt/utf.c||winpr/libwinpr/crt/utf.c": [
          "File: winpr/libwinpr/crt/utf.c -> winpr/libwinpr/crt/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259: ConversionResult ConvertUTF16toUTF8(const WCHAR** sourceStart, const WCHAR* sourceEnd,",
          "261: {",
          "263:  const WCHAR* source;",
          "267:  source = *sourceStart;",
          "271:  while (source < sourceEnd)",
          "272:  {",
          "",
          "[Removed Lines]",
          "260:                                     BYTE** targetStart, BYTE* targetEnd, ConversionFlags flags)",
          "262:  BYTE* target;",
          "264:  BOOL computeLength;",
          "265:  ConversionResult result;",
          "266:  computeLength = (!targetEnd) ? TRUE : FALSE;",
          "268:  target = *targetStart;",
          "269:  result = conversionOK;",
          "",
          "[Added Lines]",
          "260:                                     BYTE** targetStart, BYTE* te, ConversionFlags flags)",
          "262:  size_t pos = 0;",
          "263:  size_t end = 0;",
          "265:  const BOOL computeLength = (!te) ? TRUE : FALSE;",
          "266:  ConversionResult result = conversionOK;",
          "268:  if (targetStart && te)",
          "269:  {",
          "270:   const size_t s = (size_t)*targetStart;",
          "271:   const size_t e = (size_t)te;",
          "272:   if (s > e)",
          "273:    return sourceIllegal;",
          "274:   end = e - s;",
          "275:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345:    ch = UNI_REPLACEMENT_CHAR;",
          "346:   }",
          "351:   {",
          "354:    result = targetExhausted;",
          "355:    break;",
          "356:   }",
          "",
          "[Removed Lines]",
          "348:   target += bytesToWrite;",
          "350:   if ((target > targetEnd) && (!computeLength))",
          "353:    target -= bytesToWrite;",
          "",
          "[Added Lines]",
          "356:   pos += bytesToWrite;",
          "358:   if ((pos > end) && (!computeLength))",
          "361:    pos -= bytesToWrite;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:    {",
          "363:     case 4:",
          "365:      ch >>= 6;",
          "367:     case 3:",
          "369:      ch >>= 6;",
          "371:     case 2:",
          "373:      ch >>= 6;",
          "375:     case 1:",
          "377:    }",
          "378:   }",
          "379:   else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:      (*targetStart)[--pos] = (BYTE)((ch | byteMark) & byteMask);",
          "376:      (*targetStart)[--pos] = (BYTE)((ch | byteMark) & byteMask);",
          "380:      (*targetStart)[--pos] = (BYTE)((ch | byteMark) & byteMask);",
          "384:      (*targetStart)[--pos] = (BYTE)(ch | firstByteMark[bytesToWrite]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "382:    {",
          "384:     case 4:",
          "387:     case 3:",
          "390:     case 2:",
          "393:     case 1:",
          "395:    }",
          "396:   }",
          "399:  }",
          "403:  return result;",
          "404: }",
          "",
          "[Removed Lines]",
          "385:      --target;",
          "388:      --target;",
          "391:      --target;",
          "394:      --target;",
          "398:   target += bytesToWrite;",
          "",
          "[Added Lines]",
          "393:      --pos;",
          "396:      --pos;",
          "399:      --pos;",
          "402:      --pos;",
          "406:   pos += bytesToWrite;",
          "410:  if (targetStart && *targetStart)",
          "412:  else if (targetStart)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "503: ConversionResult ConvertUTF8toUTF16(const BYTE** sourceStart, const BYTE* sourceEnd,",
          "504:                                     WCHAR** targetStart, WCHAR* targetEnd, ConversionFlags flags)",
          "505: {",
          "507:  const BYTE* source;",
          "508:  BOOL computeLength;",
          "509:  ConversionResult result;",
          "510:  computeLength = (!targetEnd) ? TRUE : FALSE;",
          "511:  result = conversionOK;",
          "512:  source = *sourceStart;",
          "515:  while (source < sourceEnd)",
          "516:  {",
          "",
          "[Removed Lines]",
          "506:  WCHAR* target;",
          "513:  target = *targetStart;",
          "",
          "[Added Lines]",
          "517:  size_t target = 0;",
          "518:  size_t end = 0;",
          "526:  if (targetStart && targetEnd)",
          "527:  {",
          "528:   const size_t s = (size_t)*targetStart;",
          "529:   const size_t e = (size_t)targetEnd;",
          "530:   if (s > e)",
          "531:    return sourceIllegal;",
          "533:   end = ((size_t)(targetEnd)) - ((size_t)(*targetStart));",
          "534:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "562:   ch -= offsetsFromUTF8[extraBytesToRead];",
          "565:   {",
          "567:    result = targetExhausted;",
          "",
          "[Removed Lines]",
          "564:   if ((target >= targetEnd) && (!computeLength))",
          "",
          "[Added Lines]",
          "585:   if ((target >= end) && (!computeLength))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "583:     else",
          "584:     {",
          "585:      if (!computeLength)",
          "592:     }",
          "593:    }",
          "594:    else",
          "595:    {",
          "596:     if (!computeLength)",
          "603:    }",
          "604:   }",
          "605:   else if (ch > UNI_MAX_UTF16)",
          "",
          "[Removed Lines]",
          "586:      {",
          "587:       Data_Write_UINT16(target, UNI_REPLACEMENT_CHAR);",
          "588:       target++;",
          "589:      }",
          "590:      else",
          "591:       target++;",
          "597:     {",
          "599:      target++;",
          "600:     }",
          "601:     else",
          "602:      target++;",
          "",
          "[Added Lines]",
          "607:       Data_Write_UINT16(&(*targetStart)[target], UNI_REPLACEMENT_CHAR);",
          "608:      target++;",
          "615:     target++;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "613:    else",
          "614:    {",
          "615:     if (!computeLength)",
          "622:    }",
          "623:   }",
          "624:   else",
          "625:   {",
          "628:    {",
          "630:     result = targetExhausted;",
          "",
          "[Removed Lines]",
          "616:     {",
          "617:      Data_Write_UINT16(target, UNI_REPLACEMENT_CHAR);",
          "618:      target++;",
          "619:     }",
          "620:     else",
          "621:      target++;",
          "627:    if ((target + 1 >= targetEnd) && (!computeLength))",
          "",
          "[Added Lines]",
          "629:      Data_Write_UINT16(&(*targetStart)[target], UNI_REPLACEMENT_CHAR);",
          "630:     target++;",
          "636:    if ((target + 1 >= end) && (!computeLength))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "637:    {",
          "638:     WCHAR wchar;",
          "639:     wchar = (ch >> halfShift) + UNI_SUR_HIGH_START;",
          "642:     wchar = (ch & halfMask) + UNI_SUR_LOW_START;",
          "645:    }",
          "646:    else",
          "647:    {",
          "",
          "[Removed Lines]",
          "640:     Data_Write_UINT16(target, wchar);",
          "641:     target++;",
          "643:     Data_Write_UINT16(target, wchar);",
          "644:     target++;",
          "",
          "[Added Lines]",
          "649:     Data_Write_UINT16(&(*targetStart)[target++], wchar);",
          "651:     Data_Write_UINT16(&(*targetStart)[target++], wchar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "652:  }",
          "656:  return result;",
          "657: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:  if (targetStart && (*targetStart))",
          "664:  else if (targetStart)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c33c6e1a20601da2f47ac8546f5ab6223a66049",
      "candidate_info": {
        "commit_hash": "3c33c6e1a20601da2f47ac8546f5ab6223a66049",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3c33c6e1a20601da2f47ac8546f5ab6223a66049",
        "files": [
          "CMakeLists.txt",
          "client/Android/Studio/build.gradle",
          "client/Android/android_freerdp.c",
          "winpr/CMakeLists.txt"
        ],
        "message": "Prepared version for 2.1.1",
        "before_after_code_files": [
          "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle",
          "client/Android/android_freerdp.c||client/Android/android_freerdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Android/Studio/build.gradle||client/Android/Studio/build.gradle": [
          "File: client/Android/Studio/build.gradle -> client/Android/Studio/build.gradle",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: ext {",
          "31:     versionName = properties.get('VERSION_NAME', getVersionName())",
          "34:     println '----------------- Project configuration -------------------'",
          "35:     println 'VERSION_NAME:       ' + versionName",
          "",
          "[Removed Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 16)",
          "",
          "[Added Lines]",
          "32:     versionCode = properties.get('VERSION_CODE', 17)",
          "",
          "---------------"
        ],
        "client/Android/android_freerdp.c||client/Android/android_freerdp.c": [
          "File: client/Android/android_freerdp.c -> client/Android/android_freerdp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define TAG CLIENT_TAG(\"android\")",
          "61: static void android_OnChannelConnectedEventHandler(void* context, ChannelConnectedEventArgs* e)",
          "62: {",
          "",
          "[Removed Lines]",
          "59: #define FREERDP_JNI_VERSION \"2.1.0\"",
          "",
          "[Added Lines]",
          "59: #define FREERDP_JNI_VERSION \"2.1.1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efecbf41a921e11f409789e2892e29e30bb225d2",
      "candidate_info": {
        "commit_hash": "efecbf41a921e11f409789e2892e29e30bb225d2",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/efecbf41a921e11f409789e2892e29e30bb225d2",
        "files": [
          "libfreerdp/core/gateway/http.c",
          "libfreerdp/core/proxy.c",
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "change use of strtok to strtok_s\n\n(cherry picked from commit 6013a96bff20affbb4c0a1780d35a751eafa4903)",
        "before_after_code_files": [
          "libfreerdp/core/gateway/http.c||libfreerdp/core/gateway/http.c",
          "libfreerdp/core/proxy.c||libfreerdp/core/proxy.c",
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/gateway/http.c||libfreerdp/core/gateway/http.c": [
          "File: libfreerdp/core/gateway/http.c -> libfreerdp/core/gateway/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814:   size_t count = 0;",
          "815:   char* buffer = (char*)Stream_Buffer(response->data);",
          "816:   char* line = (char*)Stream_Buffer(response->data);",
          "818:   while ((line = string_strnstr(line, \"\\r\\n\", payloadOffset - (line - buffer) - 2UL)))",
          "819:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817:   char* context = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "834:   buffer[payloadOffset - 1] = '\\0';",
          "835:   buffer[payloadOffset - 2] = '\\0';",
          "836:   count = 0;",
          "839:   while (line && (response->count > count))",
          "840:   {",
          "841:    response->lines[count] = line;",
          "843:    count++;",
          "844:   }",
          "",
          "[Removed Lines]",
          "837:   line = strtok(buffer, \"\\r\\n\");",
          "842:    line = strtok(NULL, \"\\r\\n\");",
          "",
          "[Added Lines]",
          "838:   line = strtok_s(buffer, \"\\r\\n\", &context);",
          "843:    line = strtok_s(NULL, \"\\r\\n\", &context);",
          "",
          "---------------"
        ],
        "libfreerdp/core/proxy.c||libfreerdp/core/proxy.c": [
          "File: libfreerdp/core/proxy.c -> libfreerdp/core/proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:  BOOL result = FALSE;",
          "145:  char* current;",
          "146:  char* copy;",
          "147:  size_t host_len;",
          "148:  struct sockaddr_in sa4;",
          "149:  struct sockaddr_in6 sa6;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:  char* context = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:  if (!copy)",
          "165:   return FALSE;",
          "169:  while (current && !result)",
          "170:  {",
          "",
          "[Removed Lines]",
          "167:  current = strtok(copy, delimiter);",
          "",
          "[Added Lines]",
          "168:  current = strtok_s(copy, delimiter, &context);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:    }",
          "244:   }",
          "247:  }",
          "249:  free(copy);",
          "",
          "[Removed Lines]",
          "246:   current = strtok(NULL, delimiter);",
          "",
          "[Added Lines]",
          "247:   current = strtok_s(NULL, delimiter, &context);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248: {",
          "249:  char* p;",
          "250:  char* list_copy;",
          "251:  list_copy = _strdup(list);",
          "253:  if (!list_copy)",
          "254:   return FALSE;",
          "258:  while (p != NULL)",
          "259:  {",
          "",
          "[Removed Lines]",
          "256:  p = strtok(list_copy, \" \");",
          "",
          "[Added Lines]",
          "251:  char* context = NULL;",
          "258:  p = strtok_s(list_copy, \" \", &context);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:    return TRUE;",
          "264:   }",
          "267:  }",
          "269:  free(list_copy);",
          "",
          "[Removed Lines]",
          "266:   p = strtok(NULL, \" \");",
          "",
          "[Added Lines]",
          "268:   p = strtok_s(NULL, \" \", &context);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "538f82e91fac60594221c75cccb9c3f5e8cabcba",
      "candidate_info": {
        "commit_hash": "538f82e91fac60594221c75cccb9c3f5e8cabcba",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/538f82e91fac60594221c75cccb9c3f5e8cabcba",
        "files": [
          "winpr/libwinpr/utils/ini.c",
          "winpr/libwinpr/utils/test/TestIni.c"
        ],
        "message": "Fixed memory leak in ini parser and test functions.\n\n(cherry picked from commit 7f9997595918e8b6a2acec2ff40f5779fa183038)",
        "before_after_code_files": [
          "winpr/libwinpr/utils/ini.c||winpr/libwinpr/utils/ini.c",
          "winpr/libwinpr/utils/test/TestIni.c||winpr/libwinpr/utils/test/TestIni.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/ini.c||winpr/libwinpr/utils/ini.c": [
          "File: winpr/libwinpr/utils/ini.c -> winpr/libwinpr/utils/ini.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:  return ini->line;",
          "207: }",
          "209: static wIniFileKey* IniFile_Key_New(const char* name, const char* value)",
          "210: {",
          "211:  wIniFileKey* key;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: static void IniFile_Key_Free(wIniFileKey* key)",
          "210: {",
          "211:  if (!key)",
          "212:   return;",
          "214:  free(key->name);",
          "215:  free(key->value);",
          "216:  free(key);",
          "217: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "223:   if (!key->name || !key->value)",
          "224:   {",
          "228:    return NULL;",
          "229:   }",
          "230:  }",
          "",
          "[Removed Lines]",
          "225:    free(key->name);",
          "226:    free(key->value);",
          "227:    free(key);",
          "",
          "[Added Lines]",
          "235:    IniFile_Key_Free(key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "232:  return key;",
          "233: }",
          "245: static wIniFileSection* IniFile_Section_New(const char* name)",
          "246: {",
          "247:  wIniFileSection* section;",
          "",
          "[Removed Lines]",
          "235: static void IniFile_Key_Free(wIniFileKey* key)",
          "236: {",
          "237:  if (!key)",
          "238:   return;",
          "240:  free(key->name);",
          "241:  free(key->value);",
          "242:  free(key);",
          "243: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "821:   IniFile_Section_Free(ini->sections[index]);",
          "823:  free(ini->sections);",
          "824:  free(ini);",
          "825: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "822:  free(ini->buffer);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/test/TestIni.c||winpr/libwinpr/utils/test/TestIni.c": [
          "File: winpr/libwinpr/utils/test/TestIni.c -> winpr/libwinpr/utils/test/TestIni.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: int TestIni(int argc, char* argv[])",
          "40: {",
          "41:  int i, j;",
          "42:  int nKeys;",
          "43:  int nSections;",
          "44:  UINT32 iValue;",
          "46:  const char* sValue;",
          "50:  ini = IniFile_New();",
          "52:  sectionNames = IniFile_GetSectionNames(ini, &nSections);",
          "54:  for (i = 0; i < nSections; i++)",
          "55:  {",
          "56:   keyNames = IniFile_GetSectionKeyNames(ini, sectionNames[i], &nKeys);",
          "57:   printf(\"[%s]\\n\", sectionNames[i]);",
          "59:   for (j = 0; j < nKeys; j++)",
          "60:   {",
          "61:    sValue = IniFile_GetKeyValueString(ini, sectionNames[i], keyNames[j]);",
          "62:    printf(\"%s = %s\\n\", keyNames[j], sValue);",
          "63:   }",
          "66:  }",
          "69:  iValue = IniFile_GetKeyValueInt(ini, \"first_section\", \"one\");",
          "71:  if (iValue != 1)",
          "72:  {",
          "73:   printf(\"IniFile_GetKeyValueInt failure\\n\");",
          "75:  }",
          "77:  iValue = IniFile_GetKeyValueInt(ini, \"first_section\", \"five\");",
          "",
          "[Removed Lines]",
          "45:  wIniFile* ini;",
          "47:  char** keyNames;",
          "48:  char** sectionNames;",
          "51:  IniFile_ReadBuffer(ini, TEST_INI_01);",
          "65:   free(keyNames);",
          "68:  free(sectionNames);",
          "74:   return -1;",
          "",
          "[Added Lines]",
          "41:  int rc = -1;",
          "46:  wIniFile* ini = NULL;",
          "48:  char** keyNames = NULL;",
          "49:  char** sectionNames = NULL;",
          "52:  if (!ini)",
          "53:   goto fail;",
          "55:  if (IniFile_ReadBuffer(ini, TEST_INI_01) < 0)",
          "56:   goto fail;",
          "58:  free(sectionNames);",
          "60:  if (!sectionNames && (nSections > 0))",
          "61:   goto fail;",
          "65:   free(keyNames);",
          "68:   if (!keyNames && (nKeys > 0))",
          "69:    goto fail;",
          "82:   goto fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  if (iValue != 5)",
          "80:  {",
          "81:   printf(\"IniFile_GetKeyValueInt failure\\n\");",
          "83:  }",
          "85:  sValue = IniFile_GetKeyValueString(ini, \"first_section\", \"animal\");",
          "",
          "[Removed Lines]",
          "82:   return -1;",
          "",
          "[Added Lines]",
          "90:   goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:  if (strcmp(sValue, \"BIRD\") != 0)",
          "88:  {",
          "89:   printf(\"IniFile_GetKeyValueString failure\\n\");",
          "91:  }",
          "93:  sValue = IniFile_GetKeyValueString(ini, \"second_section\", \"path\");",
          "",
          "[Removed Lines]",
          "90:   return -1;",
          "",
          "[Added Lines]",
          "98:   goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:  if (strcmp(sValue, \"/usr/local/bin\") != 0)",
          "96:  {",
          "97:   printf(\"IniFile_GetKeyValueString failure\\n\");",
          "99:  }",
          "101:  sValue = IniFile_GetKeyValueString(ini, \"second_section\", \"URL\");",
          "",
          "[Removed Lines]",
          "98:   return -1;",
          "",
          "[Added Lines]",
          "106:   goto fail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "103:  if (strcmp(sValue, \"http://www.example.com/~username\") != 0)",
          "104:  {",
          "105:   printf(\"IniFile_GetKeyValueString failure\\n\");",
          "107:  }",
          "109:  IniFile_Free(ini);",
          "111:  ini = IniFile_New();",
          "113:  sectionNames = IniFile_GetSectionNames(ini, &nSections);",
          "115:  for (i = 0; i < nSections; i++)",
          "116:  {",
          "117:   keyNames = IniFile_GetSectionKeyNames(ini, sectionNames[i], &nKeys);",
          "118:   printf(\"[%s]\\n\", sectionNames[i]);",
          "120:   for (j = 0; j < nKeys; j++)",
          "121:   {",
          "122:    sValue = IniFile_GetKeyValueString(ini, sectionNames[i], keyNames[j]);",
          "123:    printf(\"%s = %s\\n\", keyNames[j], sValue);",
          "124:   }",
          "127:  }",
          "130:  IniFile_Free(ini);",
          "132:  ini = IniFile_New();",
          "134:  if (IniFile_ReadBuffer(ini, TEST_INI_03) != -1)",
          "140:  IniFile_Free(ini);",
          "141:  return 0;",
          "142: }",
          "",
          "[Removed Lines]",
          "106:   return -1;",
          "112:  IniFile_ReadBuffer(ini, TEST_INI_02);",
          "126:   free(keyNames);",
          "129:  free(sectionNames);",
          "135:  {",
          "136:   IniFile_Free(ini);",
          "137:   return -1;",
          "138:  }",
          "",
          "[Added Lines]",
          "114:   goto fail;",
          "120:  if (!ini)",
          "121:   goto fail;",
          "122:  if (IniFile_ReadBuffer(ini, TEST_INI_02) < 0)",
          "123:   goto fail;",
          "124:  free(sectionNames);",
          "126:  if (!sectionNames && (nSections > 0))",
          "127:   goto fail;",
          "131:   free(keyNames);",
          "135:   if (!keyNames && (nKeys > 0))",
          "136:    goto fail;",
          "149:   goto fail;",
          "151:  rc = 0;",
          "152: fail:",
          "153:  free(keyNames);",
          "154:  free(sectionNames);",
          "",
          "---------------"
        ]
      }
    }
  ]
}