{
  "cve_id": "CVE-2018-0735",
  "cve_desc": "The OpenSSL ECDSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key. Fixed in OpenSSL 1.1.0j (Affected 1.1.0-1.1.0i). Fixed in OpenSSL 1.1.1a (Affected 1.1.1).",
  "repo": "openssl/openssl",
  "patch_hash": "99540ec79491f59ed8b46b4edf130e17dc907f52",
  "patch_info": {
    "commit_hash": "99540ec79491f59ed8b46b4edf130e17dc907f52",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/99540ec79491f59ed8b46b4edf130e17dc907f52",
    "files": [
      "crypto/ec/ec_mult.c"
    ],
    "message": "Timing vulnerability in ECDSA signature generation (CVE-2018-0735)\n\nPreallocate an extra limb for some of the big numbers to avoid a reallocation\nthat can potentially provide a side channel.\n\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/7486)",
    "before_after_code_files": [
      "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
    ]
  },
  "patch_diff": {
    "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c": [
      "File: crypto/ec/ec_mult.c -> crypto/ec/ec_mult.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "207:     cardinality_bits = BN_num_bits(cardinality);",
      "208:     group_top = bn_get_top(cardinality);",
      "211:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
      "212:         goto err;",
      "213:     }",
      "",
      "[Removed Lines]",
      "209:     if ((bn_wexpand(k, group_top + 1) == NULL)",
      "210:         || (bn_wexpand(lambda, group_top + 1) == NULL)) {",
      "",
      "[Added Lines]",
      "209:     if ((bn_wexpand(k, group_top + 2) == NULL)",
      "210:         || (bn_wexpand(lambda, group_top + 2) == NULL)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     kbit = BN_is_bit_set(lambda, cardinality_bits);",
      "249:     group_top = bn_get_top(group->field);",
      "250:     if ((bn_wexpand(s->X, group_top) == NULL)",
      "",
      "[Removed Lines]",
      "247:     BN_consttime_swap(kbit, k, lambda, group_top + 1);",
      "",
      "[Added Lines]",
      "247:     BN_consttime_swap(kbit, k, lambda, group_top + 2);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "56fb454d281a023b3f950d969693553d3f3ceea1",
      "candidate_info": {
        "commit_hash": "56fb454d281a023b3f950d969693553d3f3ceea1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/56fb454d281a023b3f950d969693553d3f3ceea1",
        "files": [
          "crypto/ec/ec_mult.c"
        ],
        "message": "Timing vulnerability in ECDSA signature generation (CVE-2018-0735)\n\nPreallocate an extra limb for some of the big numbers to avoid a reallocation\nthat can potentially provide a side channel.\n\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/7486)\n\n(cherry picked from commit 99540ec79491f59ed8b46b4edf130e17dc907f52)",
        "before_after_code_files": [
          "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
          ],
          "candidate": [
            "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c": [
          "File: crypto/ec/ec_mult.c -> crypto/ec/ec_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     cardinality_bits = BN_num_bits(cardinality);",
          "179:     group_top = bn_get_top(cardinality);",
          "182:         goto err;",
          "184:     if (!BN_copy(k, scalar))",
          "",
          "[Removed Lines]",
          "180:     if ((bn_wexpand(k, group_top + 1) == NULL)",
          "181:         || (bn_wexpand(lambda, group_top + 1) == NULL))",
          "",
          "[Added Lines]",
          "180:     if ((bn_wexpand(k, group_top + 2) == NULL)",
          "181:         || (bn_wexpand(lambda, group_top + 2) == NULL)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:     kbit = BN_is_bit_set(lambda, cardinality_bits);",
          "210:     group_top = bn_get_top(group->field);",
          "211:     if ((bn_wexpand(s->X, group_top) == NULL)",
          "",
          "[Removed Lines]",
          "208:     BN_consttime_swap(kbit, k, lambda, group_top + 1);",
          "",
          "[Added Lines]",
          "208:     BN_consttime_swap(kbit, k, lambda, group_top + 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1d6d55ece1c26fa2829e2b819b038d7b6d692b4",
      "candidate_info": {
        "commit_hash": "b1d6d55ece1c26fa2829e2b819b038d7b6d692b4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b1d6d55ece1c26fa2829e2b819b038d7b6d692b4",
        "files": [
          "crypto/ec/ec_mult.c"
        ],
        "message": "Timing vulnerability in ECDSA signature generation (CVE-2018-0735)\n\nPreallocate an extra limb for some of the big numbers to avoid a reallocation\nthat can potentially provide a side channel.\n\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/7486)\n\n(cherry picked from commit 99540ec79491f59ed8b46b4edf130e17dc907f52)",
        "before_after_code_files": [
          "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
          ],
          "candidate": [
            "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c": [
          "File: crypto/ec/ec_mult.c -> crypto/ec/ec_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     cardinality_bits = BN_num_bits(cardinality);",
          "208:     group_top = bn_get_top(cardinality);",
          "211:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
          "212:         goto err;",
          "213:     }",
          "",
          "[Removed Lines]",
          "209:     if ((bn_wexpand(k, group_top + 1) == NULL)",
          "210:         || (bn_wexpand(lambda, group_top + 1) == NULL)) {",
          "",
          "[Added Lines]",
          "209:     if ((bn_wexpand(k, group_top + 2) == NULL)",
          "210:         || (bn_wexpand(lambda, group_top + 2) == NULL)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:     kbit = BN_is_bit_set(lambda, cardinality_bits);",
          "249:     group_top = bn_get_top(group->field);",
          "250:     if ((bn_wexpand(s->X, group_top) == NULL)",
          "",
          "[Removed Lines]",
          "247:     BN_consttime_swap(kbit, k, lambda, group_top + 1);",
          "",
          "[Added Lines]",
          "247:     BN_consttime_swap(kbit, k, lambda, group_top + 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40e48e54582e46c1a01e184ecf5bd31f4f7f8294",
      "candidate_info": {
        "commit_hash": "40e48e54582e46c1a01e184ecf5bd31f4f7f8294",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/40e48e54582e46c1a01e184ecf5bd31f4f7f8294",
        "files": [
          "crypto/bn/bn_lib.c",
          "crypto/ec/ec_mult.c"
        ],
        "message": "Elliptic curve scalar multiplication with timing attack defenses\n\nCo-authored-by: Nicola Tuveri <nic.tuv@gmail.com>\nCo-authored-by: Cesar Pereida Garcia <cesar.pereidagarcia@tut.fi>\nCo-authored-by: Sohaib ul Hassan <soh.19.hassan@gmail.com>\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/6009)",
        "before_after_code_files": [
          "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c",
          "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
          ],
          "candidate": [
            "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_lib.c||crypto/bn/bn_lib.c": [
          "File: crypto/bn/bn_lib.c -> crypto/bn/bn_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "739:     a->top ^= t;",
          "740:     b->top ^= t;",
          "742: #define BN_CONSTTIME_SWAP(ind) \\",
          "743:         do { \\",
          "744:                 t = (a->d[ind] ^ b->d[ind]) & condition; \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:     t = (a->neg ^ b->neg) & condition;",
          "743:     a->neg ^= t;",
          "744:     b->neg ^= t;",
          "751:     t = (a->flags ^ b->flags) & condition & BN_FLG_CONSTTIME;",
          "752:     a->flags ^= t;",
          "753:     b->flags ^= t;",
          "",
          "---------------"
        ],
        "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c": [
          "File: crypto/ec/ec_mult.c -> crypto/ec/ec_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     OPENSSL_free(pre);",
          "102: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: #define EC_POINT_set_flags(P, flags) do { \\",
          "105:     BN_set_flags((P)->X, (flags)); \\",
          "106:     BN_set_flags((P)->Y, (flags)); \\",
          "107:     BN_set_flags((P)->Z, (flags)); \\",
          "108: } while(0)",
          "129: static int ec_mul_consttime(const EC_GROUP *group, EC_POINT *r, const BIGNUM *scalar,",
          "130:                             const EC_POINT *point, BN_CTX *ctx)",
          "131: {",
          "132:     int i, order_bits, group_top, kbit, pbit, Z_is_one, ret;",
          "133:     ret = 0;",
          "134:     EC_POINT *s = NULL;",
          "135:     BIGNUM *k = NULL;",
          "136:     BIGNUM *lambda = NULL;",
          "137:     BN_CTX *new_ctx = NULL;",
          "139:     if (ctx == NULL)",
          "140:         if ((ctx = new_ctx = BN_CTX_secure_new()) == NULL)",
          "141:             return 0;",
          "143:     if ((group->order == NULL) || (group->field == NULL))",
          "144:         goto err;",
          "146:     order_bits = BN_num_bits(group->order);",
          "148:     s = EC_POINT_new(group);",
          "149:     if (s == NULL)",
          "150:         goto err;",
          "152:     if (point == NULL) {",
          "153:         if (group->generator == NULL)",
          "154:             goto err;",
          "155:         if (!EC_POINT_copy(s, group->generator))",
          "156:             goto err;",
          "157:     } else {",
          "158:         if (!EC_POINT_copy(s, point))",
          "159:             goto err;",
          "160:     }",
          "162:     EC_POINT_set_flags(s, BN_FLG_CONSTTIME);",
          "164:     BN_CTX_start(ctx);",
          "165:     lambda = BN_CTX_get(ctx);",
          "166:     k = BN_CTX_get(ctx);",
          "167:     if (k == NULL)",
          "168:         goto err;",
          "176:     group_top = bn_get_top(group->order);",
          "177:     if ((bn_wexpand(k, group_top + 1) == NULL)",
          "178:         || (bn_wexpand(lambda, group_top + 1) == NULL))",
          "179:         goto err;",
          "181:     if (!BN_copy(k, scalar))",
          "182:         goto err;",
          "184:     BN_set_flags(k, BN_FLG_CONSTTIME);",
          "186:     if ((BN_num_bits(k) > order_bits) || (BN_is_negative(k))) {",
          "191:         if(!BN_nnmod(k, k, group->order, ctx))",
          "192:             goto err;",
          "193:     }",
          "195:     if (!BN_add(lambda, k, group->order))",
          "196:         goto err;",
          "197:     BN_set_flags(lambda, BN_FLG_CONSTTIME);",
          "198:     if (!BN_add(k, lambda, group->order))",
          "199:         goto err;",
          "204:     kbit = BN_is_bit_set(lambda, order_bits);",
          "205:     BN_consttime_swap(kbit, k, lambda, group_top + 1);",
          "207:     group_top = bn_get_top(group->field);",
          "208:     if ((bn_wexpand(s->X, group_top) == NULL)",
          "209:         || (bn_wexpand(s->Y, group_top) == NULL)",
          "210:         || (bn_wexpand(s->Z, group_top) == NULL)",
          "211:         || (bn_wexpand(r->X, group_top) == NULL)",
          "212:         || (bn_wexpand(r->Y, group_top) == NULL)",
          "213:         || (bn_wexpand(r->Z, group_top) == NULL))",
          "214:         goto err;",
          "217:     if (!EC_POINT_copy(r, s))",
          "218:         goto err;",
          "220:     EC_POINT_set_flags(r, BN_FLG_CONSTTIME);",
          "222:     if (!EC_POINT_dbl(group, s, s, ctx))",
          "223:         goto err;",
          "225:     pbit = 0;",
          "227: #define EC_POINT_CSWAP(c, a, b, w, t) do {         \\",
          "228:         BN_consttime_swap(c, (a)->X, (b)->X, w);   \\",
          "229:         BN_consttime_swap(c, (a)->Y, (b)->Y, w);   \\",
          "230:         BN_consttime_swap(c, (a)->Z, (b)->Z, w);   \\",
          "231:         t = ((a)->Z_is_one ^ (b)->Z_is_one) & (c); \\",
          "232:         (a)->Z_is_one ^= (t);                      \\",
          "233:         (b)->Z_is_one ^= (t);                      \\",
          "234: } while(0)",
          "236:     for (i = order_bits - 1; i >= 0; i--) {",
          "237:         kbit = BN_is_bit_set(k, i) ^ pbit;",
          "238:         EC_POINT_CSWAP(kbit, r, s, group_top, Z_is_one);",
          "239:         if (!EC_POINT_add(group, s, r, s, ctx))",
          "240:             goto err;",
          "241:         if (!EC_POINT_dbl(group, r, r, ctx))",
          "242:             goto err;",
          "247:         pbit ^= kbit;",
          "248:     }",
          "250:     EC_POINT_CSWAP(pbit, r, s, group_top, Z_is_one);",
          "251: #undef EC_POINT_CSWAP",
          "253:     ret = 1;",
          "255: err:",
          "256:     EC_POINT_free(s);",
          "257:     BN_CTX_end(ctx);",
          "258:     BN_CTX_free(new_ctx);",
          "260:     return ret;",
          "261: }",
          "262: #undef EC_POINT_set_flags",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:                 size_t num, const EC_POINT *points[], const BIGNUM *scalars[],",
          "127:                 BN_CTX *ctx)",
          "128: {",
          "129:     BN_CTX *new_ctx = NULL;",
          "130:     const EC_POINT *generator = NULL;",
          "131:     EC_POINT *tmp = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:     if ((scalar != NULL) && (num == 0)) {",
          "297:         return ec_mul_consttime(group, r, scalar, NULL, ctx);",
          "298:     }",
          "300:     if ((scalar == NULL) && (num == 1)) {",
          "308:         return ec_mul_consttime(group, r, scalars[0], points[0], ctx);",
          "309:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3712436071c04ed831594cf47073788417d1506b",
      "candidate_info": {
        "commit_hash": "3712436071c04ed831594cf47073788417d1506b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3712436071c04ed831594cf47073788417d1506b",
        "files": [
          "CHANGES",
          "crypto/ec/ec2_smpl.c",
          "crypto/ec/ec_err.c",
          "crypto/ec/ec_lcl.h",
          "crypto/ec/ec_mult.c",
          "crypto/ec/ecp_mont.c",
          "crypto/ec/ecp_nist.c",
          "crypto/ec/ecp_nistp224.c",
          "crypto/ec/ecp_nistp256.c",
          "crypto/ec/ecp_nistp521.c",
          "crypto/ec/ecp_nistz256.c",
          "crypto/ec/ecp_smpl.c",
          "crypto/err/openssl.txt",
          "include/openssl/ecerr.h"
        ],
        "message": "EC point multiplication: add `ladder` scaffold for specialized Montgomery ladder implementations\n\nPR #6009 and #6070 replaced the default EC point multiplication path for\nprime and binary curves with a unified Montgomery ladder implementation\nwith various timing attack defenses (for the common paths when a secret\nscalar is feed to the point multiplication).\nThe newly introduced default implementation directly used\nEC_POINT_add/dbl in the main loop.\n\nThe scaffolding introduced by this commit allows EC_METHODs to define a\nspecialized `ladder_step` function to improve performances by taking\nadvantage of efficient formulas for differential addition-and-doubling\nand different coordinate systems.\n\n- `ladder_pre` is executed before the main loop of the ladder: by\n  default it copies the input point P into S, and doubles it into R.\n  Specialized implementations could, e.g., use this hook to transition\n  to different coordinate systems before copying and doubling;\n- `ladder_step` is the core of the Montgomery ladder loop: by default it\n  computes `S := R+S; R := 2R;`, but specific implementations could,\n  e.g., implement a more efficient formula for differential\n  addition-and-doubling;\n- `ladder_post` is executed after the Montgomery ladder loop: by default\n  it's a noop, but specialized implementations could, e.g., use this\n  hook to transition back from the coordinate system used for optimizing\n  the differential addition-and-doubling or recover the y coordinate of\n  the result point.\n\nThis commit also renames `ec_mul_consttime` to `ec_scalar_mul_ladder`,\nas it better corresponds to what this function does: nothing can be\ntruly said about the constant-timeness of the overall execution of this\nfunction, given that the underlying operations are not necessarily\nconstant-time themselves.\nWhat this implementation ensures is that the same fixed sequence of\noperations is executed for each scalar multiplication (for a given\nEC_GROUP), with no dependency on the value of the input scalar.\n\nCo-authored-by: Sohaib ul Hassan <soh.19.hassan@gmail.com>\nCo-authored-by: Billy Brumley <bbrumley@gmail.com>\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/6690)",
        "before_after_code_files": [
          "crypto/ec/ec2_smpl.c||crypto/ec/ec2_smpl.c",
          "crypto/ec/ec_err.c||crypto/ec/ec_err.c",
          "crypto/ec/ec_lcl.h||crypto/ec/ec_lcl.h",
          "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c",
          "crypto/ec/ecp_mont.c||crypto/ec/ecp_mont.c",
          "crypto/ec/ecp_nist.c||crypto/ec/ecp_nist.c",
          "crypto/ec/ecp_nistp224.c||crypto/ec/ecp_nistp224.c",
          "crypto/ec/ecp_nistp256.c||crypto/ec/ecp_nistp256.c",
          "crypto/ec/ecp_nistp521.c||crypto/ec/ecp_nistp521.c",
          "crypto/ec/ecp_nistz256.c||crypto/ec/ecp_nistz256.c",
          "crypto/ec/ecp_smpl.c||crypto/ec/ecp_smpl.c",
          "include/openssl/ecerr.h||include/openssl/ecerr.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
          ],
          "candidate": [
            "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/ec/ec2_smpl.c||crypto/ec/ec2_smpl.c": [
          "File: crypto/ec/ec2_smpl.c -> crypto/ec/ec2_smpl.c"
        ],
        "crypto/ec/ec_err.c||crypto/ec/ec_err.c": [
          "File: crypto/ec/ec_err.c -> crypto/ec/ec_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     {ERR_PACK(ERR_LIB_EC, EC_F_EC_POINT_SET_TO_INFINITY, 0),",
          "227:      \"EC_POINT_set_to_infinity\"},",
          "228:     {ERR_PACK(ERR_LIB_EC, EC_F_EC_PRE_COMP_NEW, 0), \"ec_pre_comp_new\"},",
          "229:     {ERR_PACK(ERR_LIB_EC, EC_F_EC_WNAF_MUL, 0), \"ec_wNAF_mul\"},",
          "230:     {ERR_PACK(ERR_LIB_EC, EC_F_EC_WNAF_PRECOMPUTE_MULT, 0),",
          "231:      \"ec_wNAF_precompute_mult\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:     {ERR_PACK(ERR_LIB_EC, EC_F_EC_SCALAR_MUL_LADDER, 0),",
          "230:      \"ec_scalar_mul_ladder\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314:     \"invalid trinomial basis\"},",
          "315:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_KDF_PARAMETER_ERROR), \"kdf parameter error\"},",
          "316:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_KEYS_NOT_SET), \"keys not set\"},",
          "317:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_MISSING_PARAMETERS), \"missing parameters\"},",
          "318:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_MISSING_PRIVATE_KEY), \"missing private key\"},",
          "319:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_NEED_NEW_SETUP_VALUES),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_LADDER_POST_FAILURE), \"ladder post failure\"},",
          "320:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_LADDER_PRE_FAILURE), \"ladder pre failure\"},",
          "321:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_LADDER_STEP_FAILURE), \"ladder step failure\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_POINT_ARITHMETIC_FAILURE),",
          "334:     \"point arithmetic failure\"},",
          "335:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_POINT_AT_INFINITY), \"point at infinity\"},",
          "336:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_POINT_IS_NOT_ON_CURVE),",
          "337:     \"point is not on curve\"},",
          "338:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_RANDOM_NUMBER_GENERATION_FAILED),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:     {ERR_PACK(ERR_LIB_EC, 0, EC_R_POINT_COORDINATES_BLIND_FAILURE),",
          "342:     \"point coordinates blind failure\"},",
          "",
          "---------------"
        ],
        "crypto/ec/ec_lcl.h||crypto/ec/ec_lcl.h": [
          "File: crypto/ec/ec_lcl.h -> crypto/ec/ec_lcl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     int (*field_inverse_mod_ord)(const EC_GROUP *, BIGNUM *r,",
          "179:                                  const BIGNUM *x, BN_CTX *);",
          "180:     int (*blind_coordinates)(const EC_GROUP *group, EC_POINT *p, BN_CTX *ctx);",
          "181: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:     int (*ladder_pre)(const EC_GROUP *group,",
          "182:                       EC_POINT *r, EC_POINT *s,",
          "183:                       EC_POINT *p, BN_CTX *ctx);",
          "184:     int (*ladder_step)(const EC_GROUP *group,",
          "185:                        EC_POINT *r, EC_POINT *s,",
          "186:                        EC_POINT *p, BN_CTX *ctx);",
          "187:     int (*ladder_post)(const EC_GROUP *group,",
          "188:                        EC_POINT *r, EC_POINT *s,",
          "189:                        EC_POINT *p, BN_CTX *ctx);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "638:                                 const uint8_t private_key[32]);",
          "640: int ec_point_blind_coordinates(const EC_GROUP *group, EC_POINT *p, BN_CTX *ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "651: static inline int ec_point_ladder_pre(const EC_GROUP *group,",
          "652:                                       EC_POINT *r, EC_POINT *s,",
          "653:                                       EC_POINT *p, BN_CTX *ctx)",
          "654: {",
          "655:     if (group->meth->ladder_pre != NULL)",
          "656:         return group->meth->ladder_pre(group, r, s, p, ctx);",
          "658:     if (!EC_POINT_copy(s, p)",
          "659:         || !EC_POINT_dbl(group, r, s, ctx))",
          "660:         return 0;",
          "662:     return 1;",
          "663: }",
          "665: static inline int ec_point_ladder_step(const EC_GROUP *group,",
          "666:                                        EC_POINT *r, EC_POINT *s,",
          "667:                                        EC_POINT *p, BN_CTX *ctx)",
          "668: {",
          "669:     if (group->meth->ladder_step != NULL)",
          "670:         return group->meth->ladder_step(group, r, s, p, ctx);",
          "672:     if (!EC_POINT_add(group, s, r, s, ctx)",
          "673:         || !EC_POINT_dbl(group, r, r, ctx))",
          "674:         return 0;",
          "676:     return 1;",
          "678: }",
          "680: static inline int ec_point_ladder_post(const EC_GROUP *group,",
          "681:                                        EC_POINT *r, EC_POINT *s,",
          "682:                                        EC_POINT *p, BN_CTX *ctx)",
          "683: {",
          "684:     if (group->meth->ladder_post != NULL)",
          "685:         return group->meth->ladder_post(group, r, s, p, ctx);",
          "687:     return 1;",
          "688: }",
          "",
          "---------------"
        ],
        "crypto/ec/ec_mult.c||crypto/ec/ec_mult.c": [
          "File: crypto/ec/ec_mult.c -> crypto/ec/ec_mult.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: {",
          "135:     int i, cardinality_bits, group_top, kbit, pbit, Z_is_one;",
          "136:     EC_POINT *s = NULL;",
          "137:     BIGNUM *k = NULL;",
          "138:     BIGNUM *lambda = NULL;",
          "",
          "[Removed Lines]",
          "131: static int ec_mul_consttime(const EC_GROUP *group, EC_POINT *r,",
          "132:                             const BIGNUM *scalar, const EC_POINT *point,",
          "133:                             BN_CTX *ctx)",
          "",
          "[Added Lines]",
          "133: static",
          "134: int ec_scalar_mul_ladder(const EC_GROUP *group, EC_POINT *r,",
          "135:                          const BIGNUM *scalar, const EC_POINT *point,",
          "136:                          BN_CTX *ctx)",
          "139:     EC_POINT *p = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     BN_CTX *new_ctx = NULL;",
          "141:     int ret = 0;",
          "143:     if (ctx == NULL && (ctx = new_ctx = BN_CTX_secure_new()) == NULL)",
          "144:         return 0;",
          "146:     BN_CTX_start(ctx);",
          "150:         goto err;",
          "152:     if (point == NULL) {",
          "154:             goto err;",
          "155:     } else {",
          "157:             goto err;",
          "158:     }",
          "160:     EC_POINT_BN_set_flags(s, BN_FLG_CONSTTIME);",
          "162:     cardinality = BN_CTX_get(ctx);",
          "163:     lambda = BN_CTX_get(ctx);",
          "164:     k = BN_CTX_get(ctx);",
          "166:         goto err;",
          "",
          "[Removed Lines]",
          "148:     s = EC_POINT_new(group);",
          "149:     if (s == NULL)",
          "153:         if (!EC_POINT_copy(s, group->generator))",
          "156:         if (!EC_POINT_copy(s, point))",
          "165:     if (k == NULL || !BN_mul(cardinality, group->order, group->cofactor, ctx))",
          "",
          "[Added Lines]",
          "148:     if (point != NULL && EC_POINT_is_at_infinity(group, point))",
          "149:         return EC_POINT_set_to_infinity(group, r);",
          "156:     if (((p = EC_POINT_new(group)) == NULL)",
          "157:         || ((s = EC_POINT_new(group)) == NULL)) {",
          "158:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_MALLOC_FAILURE);",
          "160:     }",
          "163:         if (!EC_POINT_copy(p, group->generator)) {",
          "164:             ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_EC_LIB);",
          "166:         }",
          "168:         if (!EC_POINT_copy(p, point)) {",
          "169:             ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_EC_LIB);",
          "171:         }",
          "174:     EC_POINT_BN_set_flags(p, BN_FLG_CONSTTIME);",
          "175:     EC_POINT_BN_set_flags(r, BN_FLG_CONSTTIME);",
          "181:     if (k == NULL) {",
          "182:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_MALLOC_FAILURE);",
          "183:         goto err;",
          "184:     }",
          "186:     if (!BN_mul(cardinality, group->order, group->cofactor, ctx)) {",
          "187:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
          "189:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     cardinality_bits = BN_num_bits(cardinality);",
          "175:     group_top = bn_get_top(cardinality);",
          "176:     if ((bn_wexpand(k, group_top + 1) == NULL)",
          "178:         goto err;",
          "181:         goto err;",
          "183:     BN_set_flags(k, BN_FLG_CONSTTIME);",
          "",
          "[Removed Lines]",
          "177:         || (bn_wexpand(lambda, group_top + 1) == NULL))",
          "180:     if (!BN_copy(k, scalar))",
          "",
          "[Added Lines]",
          "200:         || (bn_wexpand(lambda, group_top + 1) == NULL)) {",
          "201:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
          "203:     }",
          "205:     if (!BN_copy(k, scalar)) {",
          "206:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
          "208:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:             goto err;",
          "192:     }",
          "195:         goto err;",
          "196:     BN_set_flags(lambda, BN_FLG_CONSTTIME);",
          "198:         goto err;",
          "",
          "[Removed Lines]",
          "190:         if (!BN_nnmod(k, k, cardinality, ctx))",
          "194:     if (!BN_add(lambda, k, cardinality))",
          "197:     if (!BN_add(k, lambda, cardinality))",
          "",
          "[Added Lines]",
          "217:         if (!BN_nnmod(k, k, cardinality, ctx)) {",
          "218:             ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
          "220:         }",
          "223:     if (!BN_add(lambda, k, cardinality)) {",
          "224:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
          "226:     }",
          "228:     if (!BN_add(k, lambda, cardinality)) {",
          "229:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
          "231:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:         || (bn_wexpand(s->Z, group_top) == NULL)",
          "210:         || (bn_wexpand(r->X, group_top) == NULL)",
          "211:         || (bn_wexpand(r->Y, group_top) == NULL)",
          "213:         goto err;",
          "",
          "[Removed Lines]",
          "212:         || (bn_wexpand(r->Z, group_top) == NULL))",
          "",
          "[Added Lines]",
          "245:         || (bn_wexpand(r->Z, group_top) == NULL)",
          "246:         || (bn_wexpand(p->X, group_top) == NULL)",
          "247:         || (bn_wexpand(p->Y, group_top) == NULL)",
          "248:         || (bn_wexpand(p->Z, group_top) == NULL)) {",
          "249:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);",
          "251:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "228:         goto err;",
          "233:         goto err;",
          "237: #define EC_POINT_CSWAP(c, a, b, w, t) do {         \\",
          "238:         BN_consttime_swap(c, (a)->X, (b)->X, w);   \\",
          "",
          "[Removed Lines]",
          "223:     if (!ec_point_blind_coordinates(group, s, ctx))",
          "224:         goto err;",
          "227:     if (!EC_POINT_copy(r, s))",
          "230:     EC_POINT_BN_set_flags(r, BN_FLG_CONSTTIME);",
          "232:     if (!EC_POINT_dbl(group, s, s, ctx))",
          "235:     pbit = 0;",
          "",
          "[Added Lines]",
          "261:     if (!ec_point_blind_coordinates(group, p, ctx)) {",
          "262:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, EC_R_POINT_COORDINATES_BLIND_FAILURE);",
          "264:     }",
          "267:     if (!ec_point_ladder_pre(group, r, s, p, ctx)) {",
          "268:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, EC_R_LADDER_PRE_FAILURE);",
          "270:     }",
          "273:     pbit = 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "304:     for (i = cardinality_bits - 1; i >= 0; i--) {",
          "305:         kbit = BN_is_bit_set(k, i) ^ pbit;",
          "306:         EC_POINT_CSWAP(kbit, r, s, group_top, Z_is_one);",
          "310:             goto err;",
          "",
          "[Removed Lines]",
          "307:         if (!EC_POINT_add(group, s, r, s, ctx))",
          "308:             goto err;",
          "309:         if (!EC_POINT_dbl(group, r, r, ctx))",
          "",
          "[Added Lines]",
          "347:         if (!ec_point_ladder_step(group, r, s, p, ctx)) {",
          "348:             ECerr(EC_F_EC_SCALAR_MUL_LADDER, EC_R_LADDER_STEP_FAILURE);",
          "350:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "318:     EC_POINT_CSWAP(pbit, r, s, group_top, Z_is_one);",
          "319: #undef EC_POINT_CSWAP",
          "321:     ret = 1;",
          "323:  err:",
          "324:     EC_POINT_free(s);",
          "325:     BN_CTX_end(ctx);",
          "326:     BN_CTX_free(new_ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:     if (!ec_point_ladder_post(group, r, s, p, ctx)) {",
          "363:         ECerr(EC_F_EC_SCALAR_MUL_LADDER, EC_R_LADDER_POST_FAILURE);",
          "364:         goto err;",
          "365:     }",
          "370:     EC_POINT_free(p);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "392:     if (!BN_is_zero(group->order) && !BN_is_zero(group->cofactor)) {",
          "397:         if ((scalar != NULL) && (num == 0)) {",
          "407:         }",
          "408:         if ((scalar == NULL) && (num == 1)) {",
          "417:         }",
          "418:     }",
          "",
          "[Removed Lines]",
          "406:             return ec_mul_consttime(group, r, scalar, NULL, ctx);",
          "416:             return ec_mul_consttime(group, r, scalars[0], points[0], ctx);",
          "",
          "[Added Lines]",
          "454:             return ec_scalar_mul_ladder(group, r, scalar, NULL, ctx);",
          "464:             return ec_scalar_mul_ladder(group, r, scalars[0], points[0], ctx);",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_mont.c||crypto/ec/ecp_mont.c": [
          "File: crypto/ec/ecp_mont.c -> crypto/ec/ecp_mont.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         ecdh_simple_compute_key,",
          "67:     };",
          "69:     return &ret;",
          "",
          "[Removed Lines]",
          "66:         ec_GFp_simple_blind_coordinates",
          "",
          "[Added Lines]",
          "66:         ec_GFp_simple_blind_coordinates,",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nist.c||crypto/ec/ecp_nist.c": [
          "File: crypto/ec/ecp_nist.c -> crypto/ec/ecp_nist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         ecdh_simple_compute_key,",
          "69:     };",
          "71:     return &ret;",
          "",
          "[Removed Lines]",
          "68:         ec_GFp_simple_blind_coordinates",
          "",
          "[Added Lines]",
          "68:         ec_GFp_simple_blind_coordinates,",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nistp224.c||crypto/ec/ecp_nistp224.c": [
          "File: crypto/ec/ecp_nistp224.c -> crypto/ec/ecp_nistp224.c"
        ],
        "crypto/ec/ecp_nistp256.c||crypto/ec/ecp_nistp256.c": [
          "File: crypto/ec/ecp_nistp256.c -> crypto/ec/ecp_nistp256.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1821:         ec_key_simple_generate_public_key,",
          "1825:     };",
          "1827:     return &ret;",
          "",
          "[Removed Lines]",
          "1824:         ecdh_simple_compute_key",
          "",
          "[Added Lines]",
          "1824:         ecdh_simple_compute_key,",
          "",
          "---------------"
        ],
        "crypto/ec/ecp_nistp521.c||crypto/ec/ecp_nistp521.c": [
          "File: crypto/ec/ecp_nistp521.c -> crypto/ec/ecp_nistp521.c"
        ],
        "crypto/ec/ecp_nistz256.c||crypto/ec/ecp_nistz256.c": [
          "File: crypto/ec/ecp_nistz256.c -> crypto/ec/ecp_nistz256.c"
        ],
        "crypto/ec/ecp_smpl.c||crypto/ec/ecp_smpl.c": [
          "File: crypto/ec/ecp_smpl.c -> crypto/ec/ecp_smpl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:         ecdh_simple_compute_key,",
          "68:     };",
          "70:     return &ret;",
          "",
          "[Removed Lines]",
          "67:         ec_GFp_simple_blind_coordinates",
          "",
          "[Added Lines]",
          "67:         ec_GFp_simple_blind_coordinates,",
          "",
          "---------------"
        ],
        "include/openssl/ecerr.h||include/openssl/ecerr.h": [
          "File: include/openssl/ecerr.h -> include/openssl/ecerr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: #  define EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP    126",
          "157: #  define EC_F_EC_POINT_SET_TO_INFINITY                    127",
          "158: #  define EC_F_EC_PRE_COMP_NEW                             196",
          "159: #  define EC_F_EC_WNAF_MUL                                 187",
          "160: #  define EC_F_EC_WNAF_PRECOMPUTE_MULT                     188",
          "161: #  define EC_F_I2D_ECPARAMETERS                            190",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: #  define EC_F_EC_SCALAR_MUL_LADDER                        284",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222: #  define EC_R_INVALID_TRINOMIAL_BASIS                     137",
          "223: #  define EC_R_KDF_PARAMETER_ERROR                         148",
          "224: #  define EC_R_KEYS_NOT_SET                                140",
          "225: #  define EC_R_MISSING_PARAMETERS                          124",
          "226: #  define EC_R_MISSING_PRIVATE_KEY                         125",
          "227: #  define EC_R_NEED_NEW_SETUP_VALUES                       157",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226: #  define EC_R_LADDER_POST_FAILURE                         136",
          "227: #  define EC_R_LADDER_PRE_FAILURE                          153",
          "228: #  define EC_R_LADDER_STEP_FAILURE                         162",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "236: #  define EC_R_PKPARAMETERS2GROUP_FAILURE                  127",
          "237: #  define EC_R_POINT_ARITHMETIC_FAILURE                    155",
          "238: #  define EC_R_POINT_AT_INFINITY                           106",
          "239: #  define EC_R_POINT_IS_NOT_ON_CURVE                       107",
          "240: #  define EC_R_RANDOM_NUMBER_GENERATION_FAILED             158",
          "241: #  define EC_R_SHARED_INFO_ERROR                           150",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: #  define EC_R_POINT_COORDINATES_BLIND_FAILURE             163",
          "",
          "---------------"
        ]
      }
    }
  ]
}