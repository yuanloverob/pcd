{
  "cve_id": "CVE-2016-10154",
  "cve_desc": "The smbhash function in fs/cifs/smbencrypt.c in the Linux kernel 4.9.x before 4.9.1 interacts incorrectly with the CONFIG_VMAP_STACK option, which allows local users to cause a denial of service (system crash or memory corruption) or possibly have unspecified other impact by leveraging use of more than one virtual page for a scatterlist.",
  "repo": "torvalds/linux",
  "patch_hash": "06deeec77a5a689cc94b21a8a91a76e42176685d",
  "patch_info": {
    "commit_hash": "06deeec77a5a689cc94b21a8a91a76e42176685d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/06deeec77a5a689cc94b21a8a91a76e42176685d",
    "files": [
      "fs/cifs/smbencrypt.c"
    ],
    "message": "cifs: Fix smbencrypt() to stop pointing a scatterlist at the stack\n\nsmbencrypt() points a scatterlist to the stack, which is breaks if\nCONFIG_VMAP_STACK=y.\n\nFix it by switching to crypto_cipher_encrypt_one().  The new code\nshould be considerably faster as an added benefit.\n\nThis code is nearly identical to some code that Eric Biggers\nsuggested.\n\nCc: stable@vger.kernel.org # 4.9 only\nReported-by: Eric Biggers <ebiggers3@gmail.com>\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nAcked-by: Jeff Layton <jlayton@redhat.com>\nSigned-off-by: Steve French <smfrench@gmail.com>",
    "before_after_code_files": [
      "fs/cifs/smbencrypt.c||fs/cifs/smbencrypt.c"
    ]
  },
  "patch_diff": {
    "fs/cifs/smbencrypt.c||fs/cifs/smbencrypt.c": [
      "File: fs/cifs/smbencrypt.c -> fs/cifs/smbencrypt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",
      "27: #include <linux/module.h>",
      "28: #include <linux/slab.h>",
      "29: #include <linux/fs.h>",
      "",
      "[Removed Lines]",
      "26: #include <crypto/skcipher.h>",
      "",
      "[Added Lines]",
      "26: #include <linux/crypto.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "69: static int",
      "70: smbhash(unsigned char *out, const unsigned char *in, unsigned char *key)",
      "71: {",
      "73:  unsigned char key2[8];",
      "78:  str_to_key(key, key2);",
      "81:  if (IS_ERR(tfm_des)) {",
      "90:   cifs_dbg(VFS, \"could not allocate des crypto API\\n\");",
      "92:  }",
      "112: }",
      "114: static int",
      "",
      "[Removed Lines]",
      "72:  int rc;",
      "74:  struct crypto_skcipher *tfm_des;",
      "75:  struct scatterlist sgin, sgout;",
      "76:  struct skcipher_request *req;",
      "80:  tfm_des = crypto_alloc_skcipher(\"ecb(des)\", 0, CRYPTO_ALG_ASYNC);",
      "82:   rc = PTR_ERR(tfm_des);",
      "83:   cifs_dbg(VFS, \"could not allocate des crypto API\\n\");",
      "84:   goto smbhash_err;",
      "85:  }",
      "87:  req = skcipher_request_alloc(tfm_des, GFP_KERNEL);",
      "88:  if (!req) {",
      "89:   rc = -ENOMEM;",
      "91:   goto smbhash_free_skcipher;",
      "94:  crypto_skcipher_setkey(tfm_des, key2, 8);",
      "96:  sg_init_one(&sgin, in, 8);",
      "97:  sg_init_one(&sgout, out, 8);",
      "99:  skcipher_request_set_callback(req, 0, NULL, NULL);",
      "100:  skcipher_request_set_crypt(req, &sgin, &sgout, 8, NULL);",
      "102:  rc = crypto_skcipher_encrypt(req);",
      "103:  if (rc)",
      "104:   cifs_dbg(VFS, \"could not encrypt crypt key rc: %d\\n\", rc);",
      "106:  skcipher_request_free(req);",
      "108: smbhash_free_skcipher:",
      "109:  crypto_free_skcipher(tfm_des);",
      "110: smbhash_err:",
      "111:  return rc;",
      "",
      "[Added Lines]",
      "73:  struct crypto_cipher *tfm_des;",
      "77:  tfm_des = crypto_alloc_cipher(\"des\", 0, 0);",
      "80:   return PTR_ERR(tfm_des);",
      "83:  crypto_cipher_setkey(tfm_des, key2, 8);",
      "84:  crypto_cipher_encrypt_one(tfm_des, out, in);",
      "85:  crypto_free_cipher(tfm_des);",
      "87:  return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9651ddbac81f9c2676a963ce836d2f02ba2fe9c0",
      "candidate_info": {
        "commit_hash": "9651ddbac81f9c2676a963ce836d2f02ba2fe9c0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9651ddbac81f9c2676a963ce836d2f02ba2fe9c0",
        "files": [
          "fs/cifs/cifsencrypt.c",
          "fs/cifs/smbencrypt.c"
        ],
        "message": "cifs: Use skcipher\n\nThis patch replaces uses of blkcipher with skcipher.\n\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
        "before_after_code_files": [
          "fs/cifs/cifsencrypt.c||fs/cifs/cifsencrypt.c",
          "fs/cifs/smbencrypt.c||fs/cifs/smbencrypt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/cifs/smbencrypt.c||fs/cifs/smbencrypt.c"
          ],
          "candidate": [
            "fs/cifs/smbencrypt.c||fs/cifs/smbencrypt.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/cifs/cifsencrypt.c||fs/cifs/cifsencrypt.c": [
          "File: fs/cifs/cifsencrypt.c -> fs/cifs/cifsencrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include <linux/ctype.h>",
          "34: #include <linux/random.h>",
          "35: #include <linux/highmem.h>",
          "37: static int",
          "38: cifs_crypto_shash_md5_allocate(struct TCP_Server_Info *server)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include <crypto/skcipher.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "789: calc_seckey(struct cifs_ses *ses)",
          "790: {",
          "791:  int rc;",
          "793:  struct scatterlist sgin, sgout;",
          "797:  get_random_bytes(sec_key, CIFS_SESS_KEY_SIZE);",
          "800:  if (IS_ERR(tfm_arc4)) {",
          "801:   rc = PTR_ERR(tfm_arc4);",
          "802:   cifs_dbg(VFS, \"could not allocate crypto API arc4\\n\");",
          "803:   return rc;",
          "804:  }",
          "809:      CIFS_SESS_KEY_SIZE);",
          "810:  if (rc) {",
          "811:   cifs_dbg(VFS, \"%s: Could not set response as a key\\n\",",
          "812:     __func__);",
          "814:  }",
          "816:  sg_init_one(&sgin, sec_key, CIFS_SESS_KEY_SIZE);",
          "817:  sg_init_one(&sgout, ses->ntlmssp->ciphertext, CIFS_CPHTXT_SIZE);",
          "820:  if (rc) {",
          "821:   cifs_dbg(VFS, \"could not encrypt session key rc: %d\\n\", rc);",
          "824:  }",
          "",
          "[Removed Lines]",
          "792:  struct crypto_blkcipher *tfm_arc4;",
          "794:  struct blkcipher_desc desc;",
          "799:  tfm_arc4 = crypto_alloc_blkcipher(\"ecb(arc4)\", 0, CRYPTO_ALG_ASYNC);",
          "806:  desc.tfm = tfm_arc4;",
          "808:  rc = crypto_blkcipher_setkey(tfm_arc4, ses->auth_key.response,",
          "813:   return rc;",
          "819:  rc = crypto_blkcipher_encrypt(&desc, &sgout, &sgin, CIFS_CPHTXT_SIZE);",
          "822:   crypto_free_blkcipher(tfm_arc4);",
          "823:   return rc;",
          "",
          "[Added Lines]",
          "793:  struct crypto_skcipher *tfm_arc4;",
          "795:  struct skcipher_request *req;",
          "800:  tfm_arc4 = crypto_alloc_skcipher(\"ecb(arc4)\", 0, CRYPTO_ALG_ASYNC);",
          "807:  rc = crypto_skcipher_setkey(tfm_arc4, ses->auth_key.response,",
          "812:   goto out_free_cipher;",
          "813:  }",
          "815:  req = skcipher_request_alloc(tfm_arc4, GFP_KERNEL);",
          "816:  if (!req) {",
          "817:   rc = -ENOMEM;",
          "818:   cifs_dbg(VFS, \"could not allocate crypto API arc4 request\\n\");",
          "819:   goto out_free_cipher;",
          "825:  skcipher_request_set_callback(req, 0, NULL, NULL);",
          "826:  skcipher_request_set_crypt(req, &sgin, &sgout, CIFS_CPHTXT_SIZE, NULL);",
          "828:  rc = crypto_skcipher_encrypt(req);",
          "829:  skcipher_request_free(req);",
          "832:   goto out_free_cipher;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "829:  ses->auth_key.len = CIFS_SESS_KEY_SIZE;",
          "833:  return rc;",
          "834: }",
          "",
          "[Removed Lines]",
          "831:  crypto_free_blkcipher(tfm_arc4);",
          "",
          "[Added Lines]",
          "840: out_free_cipher:",
          "841:  crypto_free_skcipher(tfm_arc4);",
          "",
          "---------------"
        ],
        "fs/cifs/smbencrypt.c||fs/cifs/smbencrypt.c": [
          "File: fs/cifs/smbencrypt.c -> fs/cifs/smbencrypt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.",
          "26: #include <linux/module.h>",
          "27: #include <linux/slab.h>",
          "28: #include <linux/fs.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <crypto/skcipher.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: {",
          "71:  int rc;",
          "72:  unsigned char key2[8];",
          "74:  struct scatterlist sgin, sgout;",
          "77:  str_to_key(key, key2);",
          "80:  if (IS_ERR(tfm_des)) {",
          "81:   rc = PTR_ERR(tfm_des);",
          "82:   cifs_dbg(VFS, \"could not allocate des crypto API\\n\");",
          "83:   goto smbhash_err;",
          "84:  }",
          "90:  sg_init_one(&sgin, in, 8);",
          "91:  sg_init_one(&sgout, out, 8);",
          "94:  if (rc)",
          "95:   cifs_dbg(VFS, \"could not encrypt crypt key rc: %d\\n\", rc);",
          "98: smbhash_err:",
          "99:  return rc;",
          "100: }",
          "",
          "[Removed Lines]",
          "73:  struct crypto_blkcipher *tfm_des;",
          "75:  struct blkcipher_desc desc;",
          "79:  tfm_des = crypto_alloc_blkcipher(\"ecb(des)\", 0, CRYPTO_ALG_ASYNC);",
          "86:  desc.tfm = tfm_des;",
          "88:  crypto_blkcipher_setkey(tfm_des, key2, 8);",
          "93:  rc = crypto_blkcipher_encrypt(&desc, &sgout, &sgin, 8);",
          "97:  crypto_free_blkcipher(tfm_des);",
          "",
          "[Added Lines]",
          "74:  struct crypto_skcipher *tfm_des;",
          "76:  struct skcipher_request *req;",
          "80:  tfm_des = crypto_alloc_skcipher(\"ecb(des)\", 0, CRYPTO_ALG_ASYNC);",
          "87:  req = skcipher_request_alloc(tfm_des, GFP_KERNEL);",
          "88:  if (!req) {",
          "89:   rc = -ENOMEM;",
          "90:   cifs_dbg(VFS, \"could not allocate des crypto API\\n\");",
          "91:   goto smbhash_free_skcipher;",
          "92:  }",
          "94:  crypto_skcipher_setkey(tfm_des, key2, 8);",
          "99:  skcipher_request_set_callback(req, 0, NULL, NULL);",
          "100:  skcipher_request_set_crypt(req, &sgin, &sgout, 8, NULL);",
          "102:  rc = crypto_skcipher_encrypt(req);",
          "106:  skcipher_request_free(req);",
          "108: smbhash_free_skcipher:",
          "109:  crypto_free_skcipher(tfm_des);",
          "",
          "---------------"
        ]
      }
    }
  ]
}