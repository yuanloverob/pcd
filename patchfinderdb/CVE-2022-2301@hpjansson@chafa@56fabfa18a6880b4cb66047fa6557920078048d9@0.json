{
  "cve_id": "CVE-2022-2301",
  "cve_desc": "Buffer Over-read in GitHub repository hpjansson/chafa prior to 1.10.3.",
  "repo": "hpjansson/chafa",
  "patch_hash": "56fabfa18a6880b4cb66047fa6557920078048d9",
  "patch_info": {
    "commit_hash": "56fabfa18a6880b4cb66047fa6557920078048d9",
    "repo": "hpjansson/chafa",
    "commit_url": "https://github.com/hpjansson/chafa/commit/56fabfa18a6880b4cb66047fa6557920078048d9",
    "files": [
      "tools/chafa/xwd-loader.c"
    ],
    "message": "XwdLoader: Fix buffer over-read and improve general robustness\n\nThis commit fixes a buffer over-read that could occur due to g_ntohl()\nevaluating its argument more than once if at least one of the following\nis true:\n\n* Build target is not x86.\n* __OPTIMIZE__ is not set during compilation (e.g. -O0 was used).\n\nIt also improves robustness more generally and fixes an issue where the\nwrong field was being used to calculate the color map size, causing some\nimage files that were otherwise fine to be rejected.\n\nReported by @JieyongMa via huntr.dev.",
    "before_after_code_files": [
      "tools/chafa/xwd-loader.c||tools/chafa/xwd-loader.c"
    ]
  },
  "patch_diff": {
    "tools/chafa/xwd-loader.c||tools/chafa/xwd-loader.c": [
      "File: tools/chafa/xwd-loader.c -> tools/chafa/xwd-loader.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "165: }",
      "167: #define ASSERT_HEADER(x) if (!(x)) return FALSE",
      "169: static gboolean",
      "171: {",
      "172:     XwdHeader *h = &loader->header;",
      "173:     XwdHeader in;",
      "176:     if (!file_mapping_taste (loader->mapping, &in, 0, sizeof (in)))",
      "177:         return FALSE;",
      "208:     ASSERT_HEADER (h->header_size >= sizeof (XwdHeader));",
      "209:     ASSERT_HEADER (h->file_version == 7);",
      "210:     ASSERT_HEADER (h->pixmap_depth == 24);",
      "214:     ASSERT_HEADER (h->bits_per_rgb == 8 || h->bits_per_rgb == 24);",
      "216:     ASSERT_HEADER (h->bytes_per_line >= h->pixmap_width * (h->bits_per_pixel / 8));",
      "217:     ASSERT_HEADER (compute_pixel_type (loader) < CHAFA_PIXEL_MAX);",
      "219:     loader->file_data = file_mapping_get_data (loader->mapping, &loader->file_data_len);",
      "",
      "[Removed Lines]",
      "170: load_header (XwdLoader *loader) // gconstpointer in, gsize in_max_len, XwdHeader *header_out)",
      "174:     const guint32 *p = (const guint32 *) &in;",
      "179:     h->header_size = g_ntohl (*(p++));",
      "180:     h->file_version = g_ntohl (*(p++));",
      "181:     h->pixmap_format = g_ntohl (*(p++));",
      "182:     h->pixmap_depth = g_ntohl (*(p++));",
      "183:     h->pixmap_width = g_ntohl (*(p++));",
      "184:     h->pixmap_height = g_ntohl (*(p++));",
      "185:     h->x_offset = g_ntohl (*(p++));",
      "186:     h->byte_order = g_ntohl (*(p++));",
      "187:     h->bitmap_unit = g_ntohl (*(p++));",
      "188:     h->bitmap_bit_order = g_ntohl (*(p++));",
      "189:     h->bitmap_pad = g_ntohl (*(p++));",
      "190:     h->bits_per_pixel = g_ntohl (*(p++));",
      "191:     h->bytes_per_line = g_ntohl (*(p++));",
      "192:     h->visual_class = g_ntohl (*(p++));",
      "193:     h->red_mask = g_ntohl (*(p++));",
      "194:     h->green_mask = g_ntohl (*(p++));",
      "195:     h->blue_mask = g_ntohl (*(p++));",
      "196:     h->bits_per_rgb = g_ntohl (*(p++));",
      "197:     h->color_map_entries = g_ntohl (*(p++));",
      "198:     h->n_colors = g_ntohl (*(p++));",
      "199:     h->window_width = g_ntohl (*(p++));",
      "200:     h->window_height = g_ntohl (*(p++));",
      "201:     h->window_x = g_ntohl (*(p++));",
      "202:     h->window_y = g_ntohl (*(p++));",
      "203:     h->window_border_width = g_ntohl (*(p++));",
      "",
      "[Added Lines]",
      "168: #define UNPACK_FIELD_U32(dest, src, field) ((dest)->field = GUINT32_FROM_BE ((src)->field))",
      "169: #define UNPACK_FIELD_S32(dest, src, field) ((dest)->field = GINT32_FROM_BE ((src)->field))",
      "172: load_header (XwdLoader *loader)",
      "176:     const XwdHeader *inp;",
      "181:     inp = &in;",
      "183:     UNPACK_FIELD_U32 (h, inp, header_size);",
      "184:     UNPACK_FIELD_U32 (h, inp, file_version);",
      "185:     UNPACK_FIELD_U32 (h, inp, pixmap_format);",
      "186:     UNPACK_FIELD_U32 (h, inp, pixmap_depth);",
      "187:     UNPACK_FIELD_U32 (h, inp, pixmap_width);",
      "188:     UNPACK_FIELD_U32 (h, inp, pixmap_height);",
      "189:     UNPACK_FIELD_U32 (h, inp, x_offset);",
      "190:     UNPACK_FIELD_U32 (h, inp, byte_order);",
      "191:     UNPACK_FIELD_U32 (h, inp, bitmap_unit);",
      "192:     UNPACK_FIELD_U32 (h, inp, bitmap_bit_order);",
      "193:     UNPACK_FIELD_U32 (h, inp, bitmap_pad);",
      "194:     UNPACK_FIELD_U32 (h, inp, bits_per_pixel);",
      "195:     UNPACK_FIELD_U32 (h, inp, bytes_per_line);",
      "196:     UNPACK_FIELD_U32 (h, inp, visual_class);",
      "197:     UNPACK_FIELD_U32 (h, inp, red_mask);",
      "198:     UNPACK_FIELD_U32 (h, inp, green_mask);",
      "199:     UNPACK_FIELD_U32 (h, inp, blue_mask);",
      "200:     UNPACK_FIELD_U32 (h, inp, bits_per_rgb);",
      "201:     UNPACK_FIELD_U32 (h, inp, color_map_entries);",
      "202:     UNPACK_FIELD_U32 (h, inp, n_colors);",
      "203:     UNPACK_FIELD_U32 (h, inp, window_width);",
      "204:     UNPACK_FIELD_U32 (h, inp, window_height);",
      "205:     UNPACK_FIELD_S32 (h, inp, window_x);",
      "206:     UNPACK_FIELD_S32 (h, inp, window_y);",
      "207:     UNPACK_FIELD_U32 (h, inp, window_border_width);",
      "215:     ASSERT_HEADER (h->header_size <= 65535);",
      "220:     ASSERT_HEADER (h->color_map_entries <= 256);",
      "227:     ASSERT_HEADER (h->bits_per_pixel == 24 || h->bits_per_pixel == 32);",
      "230:     ASSERT_HEADER (h->pixmap_width >= 1 && h->pixmap_width <= 65535);",
      "231:     ASSERT_HEADER (h->pixmap_height >= 1 && h->pixmap_height <= 65535);",
      "236:     ASSERT_HEADER (h->bytes_per_line <= h->pixmap_width * (h->bits_per_pixel / 8) + 1024);",
      "239:     ASSERT_HEADER (h->bytes_per_line * h->pixmap_height < (1UL << 31) - 65536 - 256 * 32);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "221:         return FALSE;",
      "223:     ASSERT_HEADER (loader->file_data_len >= h->header_size",
      "227:     loader->image_data = (const guint8 *) loader->file_data",
      "230:     return TRUE;",
      "231: }",
      "",
      "[Removed Lines]",
      "224:                    + h->n_colors * sizeof (XwdColor)",
      "225:                    + h->pixmap_height * h->bytes_per_line);",
      "228:         + h->header_size + h->n_colors * sizeof (XwdColor);",
      "",
      "[Added Lines]",
      "248:                    + h->color_map_entries * sizeof (XwdColor)",
      "249:                    + h->pixmap_height * (gsize) h->bytes_per_line);",
      "252:         + h->header_size + h->color_map_entries * sizeof (XwdColor);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c21df094165459f302da64d00148fc998474547",
      "candidate_info": {
        "commit_hash": "6c21df094165459f302da64d00148fc998474547",
        "repo": "hpjansson/chafa",
        "commit_url": "https://github.com/hpjansson/chafa/commit/6c21df094165459f302da64d00148fc998474547",
        "files": [
          "tools/chafa/xwd-loader.c"
        ],
        "message": "XwdLoader: Support images generated by 'convert'",
        "before_after_code_files": [
          "tools/chafxwd-loader.c||tools/chafa/xwd-loader.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/chafxwd-loader.c||tools/chafa/xwd-loader.c": [
          "File: tools/chafxwd-loader.c -> tools/chafa/xwd-loader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214:     ASSERT_HEADER (h->bits_per_rgb == 8 || h->bits_per_rgb == 24);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a52325294cc018d4fa9a7f29668faea24362b94c",
      "candidate_info": {
        "commit_hash": "a52325294cc018d4fa9a7f29668faea24362b94c",
        "repo": "hpjansson/chafa",
        "commit_url": "https://github.com/hpjansson/chafa/commit/a52325294cc018d4fa9a7f29668faea24362b94c",
        "files": [
          "tools/chafa/xwd-loader.c"
        ],
        "message": "XwdLoader: Fix buffer over-read and improve general robustness\n\nThis commit fixes a buffer over-read that could occur due to g_ntohl()\nevaluating its argument more than once if at least one of the following\nis true:\n\n* Build target is not x86.\n* __OPTIMIZE__ is not set during compilation (e.g. -O0 was used).\n\nIt also improves robustness more generally and fixes an issue where the\nwrong field was being used to calculate the color map size, causing some\nimage files that were otherwise fine to be rejected.\n\nReported by @JieyongMa via huntr.dev.",
        "before_after_code_files": [
          "tools/chafa/xwd-loader.c||tools/chafa/xwd-loader.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tools/chafa/xwd-loader.c||tools/chafa/xwd-loader.c"
          ],
          "candidate": [
            "tools/chafa/xwd-loader.c||tools/chafa/xwd-loader.c"
          ]
        }
      },
      "candidate_diff": {
        "tools/chafa/xwd-loader.c||tools/chafa/xwd-loader.c": [
          "File: tools/chafa/xwd-loader.c -> tools/chafa/xwd-loader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: }",
          "167: #define ASSERT_HEADER(x) if (!(x)) return FALSE",
          "169: static gboolean",
          "171: {",
          "172:     XwdHeader *h = &loader->header;",
          "173:     XwdHeader in;",
          "176:     if (!file_mapping_taste (loader->mapping, &in, 0, sizeof (in)))",
          "177:         return FALSE;",
          "208:     ASSERT_HEADER (h->header_size >= sizeof (XwdHeader));",
          "209:     ASSERT_HEADER (h->file_version == 7);",
          "210:     ASSERT_HEADER (h->pixmap_depth == 24);",
          "214:     ASSERT_HEADER (h->bits_per_rgb == 8 || h->bits_per_rgb == 24);",
          "216:     ASSERT_HEADER (h->bytes_per_line >= h->pixmap_width * (h->bits_per_pixel / 8));",
          "217:     ASSERT_HEADER (compute_pixel_type (loader) < CHAFA_PIXEL_MAX);",
          "219:     loader->file_data = file_mapping_get_data (loader->mapping, &loader->file_data_len);",
          "",
          "[Removed Lines]",
          "170: load_header (XwdLoader *loader) // gconstpointer in, gsize in_max_len, XwdHeader *header_out)",
          "174:     const guint32 *p = (const guint32 *) &in;",
          "179:     h->header_size = g_ntohl (*(p++));",
          "180:     h->file_version = g_ntohl (*(p++));",
          "181:     h->pixmap_format = g_ntohl (*(p++));",
          "182:     h->pixmap_depth = g_ntohl (*(p++));",
          "183:     h->pixmap_width = g_ntohl (*(p++));",
          "184:     h->pixmap_height = g_ntohl (*(p++));",
          "185:     h->x_offset = g_ntohl (*(p++));",
          "186:     h->byte_order = g_ntohl (*(p++));",
          "187:     h->bitmap_unit = g_ntohl (*(p++));",
          "188:     h->bitmap_bit_order = g_ntohl (*(p++));",
          "189:     h->bitmap_pad = g_ntohl (*(p++));",
          "190:     h->bits_per_pixel = g_ntohl (*(p++));",
          "191:     h->bytes_per_line = g_ntohl (*(p++));",
          "192:     h->visual_class = g_ntohl (*(p++));",
          "193:     h->red_mask = g_ntohl (*(p++));",
          "194:     h->green_mask = g_ntohl (*(p++));",
          "195:     h->blue_mask = g_ntohl (*(p++));",
          "196:     h->bits_per_rgb = g_ntohl (*(p++));",
          "197:     h->color_map_entries = g_ntohl (*(p++));",
          "198:     h->n_colors = g_ntohl (*(p++));",
          "199:     h->window_width = g_ntohl (*(p++));",
          "200:     h->window_height = g_ntohl (*(p++));",
          "201:     h->window_x = g_ntohl (*(p++));",
          "202:     h->window_y = g_ntohl (*(p++));",
          "203:     h->window_border_width = g_ntohl (*(p++));",
          "",
          "[Added Lines]",
          "168: #define UNPACK_FIELD_U32(dest, src, field) ((dest)->field = GUINT32_FROM_BE ((src)->field))",
          "169: #define UNPACK_FIELD_S32(dest, src, field) ((dest)->field = GINT32_FROM_BE ((src)->field))",
          "172: load_header (XwdLoader *loader)",
          "176:     const XwdHeader *inp;",
          "181:     inp = &in;",
          "183:     UNPACK_FIELD_U32 (h, inp, header_size);",
          "184:     UNPACK_FIELD_U32 (h, inp, file_version);",
          "185:     UNPACK_FIELD_U32 (h, inp, pixmap_format);",
          "186:     UNPACK_FIELD_U32 (h, inp, pixmap_depth);",
          "187:     UNPACK_FIELD_U32 (h, inp, pixmap_width);",
          "188:     UNPACK_FIELD_U32 (h, inp, pixmap_height);",
          "189:     UNPACK_FIELD_U32 (h, inp, x_offset);",
          "190:     UNPACK_FIELD_U32 (h, inp, byte_order);",
          "191:     UNPACK_FIELD_U32 (h, inp, bitmap_unit);",
          "192:     UNPACK_FIELD_U32 (h, inp, bitmap_bit_order);",
          "193:     UNPACK_FIELD_U32 (h, inp, bitmap_pad);",
          "194:     UNPACK_FIELD_U32 (h, inp, bits_per_pixel);",
          "195:     UNPACK_FIELD_U32 (h, inp, bytes_per_line);",
          "196:     UNPACK_FIELD_U32 (h, inp, visual_class);",
          "197:     UNPACK_FIELD_U32 (h, inp, red_mask);",
          "198:     UNPACK_FIELD_U32 (h, inp, green_mask);",
          "199:     UNPACK_FIELD_U32 (h, inp, blue_mask);",
          "200:     UNPACK_FIELD_U32 (h, inp, bits_per_rgb);",
          "201:     UNPACK_FIELD_U32 (h, inp, color_map_entries);",
          "202:     UNPACK_FIELD_U32 (h, inp, n_colors);",
          "203:     UNPACK_FIELD_U32 (h, inp, window_width);",
          "204:     UNPACK_FIELD_U32 (h, inp, window_height);",
          "205:     UNPACK_FIELD_S32 (h, inp, window_x);",
          "206:     UNPACK_FIELD_S32 (h, inp, window_y);",
          "207:     UNPACK_FIELD_U32 (h, inp, window_border_width);",
          "215:     ASSERT_HEADER (h->header_size <= 65535);",
          "220:     ASSERT_HEADER (h->color_map_entries <= 256);",
          "227:     ASSERT_HEADER (h->bits_per_pixel == 24 || h->bits_per_pixel == 32);",
          "230:     ASSERT_HEADER (h->pixmap_width >= 1 && h->pixmap_width <= 65535);",
          "231:     ASSERT_HEADER (h->pixmap_height >= 1 && h->pixmap_height <= 65535);",
          "236:     ASSERT_HEADER (h->bytes_per_line <= h->pixmap_width * (h->bits_per_pixel / 8) + 1024);",
          "239:     ASSERT_HEADER (h->bytes_per_line * h->pixmap_height < (1UL << 31) - 65536 - 256 * 32);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:         return FALSE;",
          "223:     ASSERT_HEADER (loader->file_data_len >= h->header_size",
          "227:     loader->image_data = (const guint8 *) loader->file_data",
          "230:     return TRUE;",
          "231: }",
          "",
          "[Removed Lines]",
          "224:                    + h->n_colors * sizeof (XwdColor)",
          "225:                    + h->pixmap_height * h->bytes_per_line);",
          "228:         + h->header_size + h->n_colors * sizeof (XwdColor);",
          "",
          "[Added Lines]",
          "248:                    + h->color_map_entries * sizeof (XwdColor)",
          "249:                    + h->pixmap_height * (gsize) h->bytes_per_line);",
          "252:         + h->header_size + h->color_map_entries * sizeof (XwdColor);",
          "",
          "---------------"
        ]
      }
    }
  ]
}