{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51f5ffa1a429bfdfe177e417482f1fbbf6685e76",
      "candidate_info": {
        "commit_hash": "51f5ffa1a429bfdfe177e417482f1fbbf6685e76",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51f5ffa1a429bfdfe177e417482f1fbbf6685e76",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a buffer overwrite in shell.c.in (part of the new .recover code).\n\nFossilOrigin-Name: 92facbc73a940d2844ac88fafd2d2dadb10886fb0b7c53e23f346d18fa6d6327",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c621fc668c6538f9f5bdac204f012c64998679a61aa8e224d212503820224c09",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4010:     if( zNL || zCR ){",
          "4011:       int iOut = 0;",
          "4012:       i64 nMax = (nNL > nCR) ? nNL : nCR;",
          "4014:       char *zOut = (char*)sqlite3_malloc64(nAlloc);",
          "4015:       if( zOut==0 ){",
          "4016:         sqlite3_result_error_nomem(context);",
          "",
          "[Removed Lines]",
          "4013:       i64 nAlloc = nMax * nText + (nMax+12)*2;",
          "",
          "[Added Lines]",
          "4013:       i64 nAlloc = nMax * nText + (nMax+64)*2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
      "candidate_info": {
        "commit_hash": "39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39c5c4ae06b0c0397aa0013c1176192d7dd38d41",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vdbeapi.c",
          "test/capi3d.test"
        ],
        "message": "Add the sqlite3_stmt_isexplain() interface.\n\nFossilOrigin-Name: ee642d3e2775ba4c73627ac71d0abf7a0f7a4ab3151d88e0076e9992f4814983",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/capi3d.test||test/capi3d.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b0d5cf40bba34e459caa7480bc84a1d75496c2ab52029f4bb0a31f2d9369a8ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3058:       }",
          "3062:         sqlite3_stmt *pExplain;",
          "3063:         char *zEQP;",
          "3064:         int triggerEQP = 0;",
          "",
          "[Removed Lines]",
          "3061:       if( pArg && pArg->autoEQP && sqlite3_strlike(\"EXPLAIN%\",zStmtSql,0)!=0 ){",
          "",
          "[Added Lines]",
          "3061:       if( pArg && pArg->autoEQP && sqlite3_stmt_isexplain(pStmt)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3107:       if( pArg ){",
          "3108:         pArg->cMode = pArg->mode;",
          "3109:         if( pArg->autoExplain ){",
          "3113:             pArg->cMode = MODE_Explain;",
          "3114:           }",
          "3117:             pArg->cMode = MODE_EQP;",
          "3118:           }",
          "3119:         }",
          "",
          "[Removed Lines]",
          "3110:           if( sqlite3_column_count(pStmt)==8",
          "3111:            && sqlite3_strlike(\"EXPLAIN%\", zStmtSql,0)==0",
          "3112:           ){",
          "3115:           if( sqlite3_column_count(pStmt)==4",
          "3116:            && sqlite3_strlike(\"EXPLAIN QUERY PLAN%\", zStmtSql,0)==0 ){",
          "",
          "[Added Lines]",
          "3110:           if( sqlite3_stmt_isexplain(pStmt)==1 ){",
          "3113:           if( sqlite3_stmt_isexplain(pStmt)==2 ){",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3895: int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3907: int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt);",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2674:   return TCL_OK;",
          "2675: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2683: static int SQLITE_TCLAPI test_stmt_isexplain(",
          "2684:   void * clientData,",
          "2685:   Tcl_Interp *interp,",
          "2686:   int objc,",
          "2687:   Tcl_Obj *CONST objv[]",
          "2688: ){",
          "2689:   sqlite3_stmt *pStmt;",
          "2690:   int rc;",
          "2692:   if( objc!=2 ){",
          "2693:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\",",
          "2694:         Tcl_GetStringFromObj(objv[0], 0), \" STMT\", 0);",
          "2695:     return TCL_ERROR;",
          "2696:   }",
          "2698:   if( getStmtPointer(interp, Tcl_GetString(objv[1]), &pStmt) ) return TCL_ERROR;",
          "2699:   rc = sqlite3_stmt_isexplain(pStmt);",
          "2700:   Tcl_SetObjResult(interp, Tcl_NewIntObj(rc));",
          "2701:   return TCL_OK;",
          "2702: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7840: #endif",
          "7841:      { \"sqlite3_next_stmt\",             test_next_stmt     ,0 },",
          "7842:      { \"sqlite3_stmt_readonly\",         test_stmt_readonly ,0 },",
          "7843:      { \"sqlite3_stmt_busy\",             test_stmt_busy     ,0 },",
          "7844:      { \"uses_stmt_journal\",             uses_stmt_journal ,0 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7870:      { \"sqlite3_stmt_isexplain\",        test_stmt_isexplain,0 },",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1608:   return pStmt ? ((Vdbe*)pStmt)->readOnly : 1;",
          "1609: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1615: int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt){",
          "1616:   return pStmt ? ((Vdbe*)pStmt)->explain : 0;",
          "1617: }",
          "",
          "---------------"
        ],
        "test/capi3d.test||test/capi3d.test": [
          "File: test/capi3d.test -> test/capi3d.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: test_is_readonly capi3d-2.8 {PRAGMA application_id=1234} 0",
          "116: test_is_readonly capi3d-2.9 {VACUUM} 0",
          "117: test_is_readonly capi3d-2.10 {PRAGMA integrity_check} 1",
          "119:   sqlite3_stmt_readonly 0",
          "120: } 1",
          "122: # Tests for sqlite3_stmt_busy",
          "123: #",
          "124: do_test capi3d-3.1 {",
          "",
          "[Removed Lines]",
          "118: do_test capi3-2.99 {",
          "",
          "[Added Lines]",
          "118: do_test capi3-2.49 {",
          "123: # Tests for the is-explain interface.",
          "124: #",
          "125: proc test_is_explain {testname sql truth} {",
          "126:   do_test $testname [format {",
          "127:     set DB [sqlite3_connection_pointer db]",
          "128:     set STMT [sqlite3_prepare $DB {%s} -1 TAIL]",
          "129:     set rc [sqlite3_stmt_isexplain $STMT]",
          "130:     sqlite3_finalize $STMT",
          "131:     set rc",
          "132:   } $sql] $truth",
          "133: }",
          "135: test_is_explain capi3d-2.51 {SELECT * FROM sqlite_master} 0",
          "136: test_is_explain capi3d-2.52 { explain SELECT * FROM sqlite_master} 1",
          "137: test_is_explain capi3d-2.53 {  Explain Query Plan select * FROM sqlite_master} 2",
          "138: do_test capi3-2.99 {",
          "139:   sqlite3_stmt_isexplain 0",
          "140: } 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55469bbafb242b9b3c0b844e26a199d5c53b6f87",
      "candidate_info": {
        "commit_hash": "55469bbafb242b9b3c0b844e26a199d5c53b6f87",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55469bbafb242b9b3c0b844e26a199d5c53b6f87",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Use memmove() instead of memcpy() in a place where buffers might overlap if the database file is badly corrupted, to prevent warnings from ASAN and valgrind.\n\nFossilOrigin-Name: 65ad6c55f1ba9bc2f75afffa3adaf19f145fad7ac9a00ccce6372e9a2cc4341b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c976f171342ba2d39779279c28f3bc088572c440922e3e4421a3bf541263360",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8351:     if( memcmp(pDest, ((u8*)pX->pData) + iOffset, iAmt)!=0 ){",
          "8352:       int rc = sqlite3PagerWrite(pPage->pDbPage);",
          "8353:       if( rc ) return rc;",
          "8355:     }",
          "8356:   }",
          "8357:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "8354:       memcpy(pDest, ((u8*)pX->pData) + iOffset, iAmt);",
          "",
          "[Added Lines]",
          "8358:       memmove(pDest, ((u8*)pX->pData) + iOffset, iAmt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9252966b3c67f90e265394a597297908fccf691b",
      "candidate_info": {
        "commit_hash": "9252966b3c67f90e265394a597297908fccf691b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9252966b3c67f90e265394a597297908fccf691b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases in test/fuzzdata8.db.\n\nFossilOrigin-Name: 228e1087c0602470e450586499de5a3e87e266c688bc828f20e3bad2fdc65ff1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 456ced57774a92acff23cad975b78ff0e5cbbf5204ea48599fe1761a018a92e4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdabe742da30a22aff881fc89773cf0ec1eaec60",
      "candidate_info": {
        "commit_hash": "bdabe742da30a22aff881fc89773cf0ec1eaec60",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bdabe742da30a22aff881fc89773cf0ec1eaec60",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/pg_common.tcl",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Fixes for RANGE windows and NULL values.\n\nFossilOrigin-Name: 723c84be3ec5ae941b7abd2442cdb76ca3bd76a5ce2d830b0e648c6e1424885a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/pg_common.tcl||test/pg_common.tcl",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cebe09e11cc91d9776f259dd9b87e9c760a460f53ba6fa36481dfe58f77ad417",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1928:       assert( (flags1 & MEM_Cleared)==0 );",
          "1929:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 || CORRUPT_DB );",
          "1930:       testcase( (pOp->p5 & SQLITE_JUMPIFNULL)!=0 );",
          "",
          "[Removed Lines]",
          "1927:       assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1783:   windowReadPeerValues(p, csr2, reg2);",
          "1787:   sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1788:   addrGe = sqlite3VdbeAddOp3(v, OP_Ge, regString, 0, reg1);",
          "1798:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1799:   sqlite3VdbeJumpHere(v, addrGe);",
          "1800:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1802:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1803:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1790:   if( op==OP_Le ){",
          "1791:     sqlite3VdbeAddOp2(v, OP_IsNull, reg1, lbl);",
          "1792:   }",
          "1793:   if( op==OP_Ge ){",
          "1794:     sqlite3VdbeAddOp2(v, OP_NotNull, reg1, sqlite3VdbeCurrentAddr(v)+2);",
          "1795:     sqlite3VdbeAddOp2(v, OP_IsNull, reg2, lbl);",
          "1796:   }",
          "",
          "[Added Lines]",
          "1793:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2368:   switch( pMWin->eStart ){",
          "2369:     case TK_FOLLOWING: {",
          "2375:       }",
          "2377:       break;",
          "2378:     }",
          "2379:     case TK_UNBOUNDED:",
          "",
          "[Removed Lines]",
          "2370:       sqlite3 *db = pParse->db;",
          "2371:       sqlite3_value *pVal = 0;",
          "2372:       sqlite3ValueFromExpr(db, pMWin->pStart, db->enc,SQLITE_AFF_NUMERIC,&pVal);",
          "2373:       if( pVal && sqlite3_value_int(pVal)>0 ){",
          "2374:         s.eDelete = WINDOW_RETURN_ROW;",
          "2376:       sqlite3ValueFree(pVal);",
          "",
          "[Added Lines]",
          "2363:       if( pMWin->eType!=TK_RANGE ){",
          "2364:         sqlite3 *db = pParse->db;",
          "2365:         sqlite3_value *pVal = 0;",
          "2366:         sqlite3ValueFromExpr(db,pMWin->pStart,db->enc,SQLITE_AFF_NUMERIC,&pVal);",
          "2367:         if( pVal && sqlite3_value_int(pVal)>0 ){",
          "2368:           s.eDelete = WINDOW_RETURN_ROW;",
          "2369:         }",
          "2370:         sqlite3ValueFree(pVal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2390:       break;",
          "2391:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2388:   s.eDelete = 0;",
          "",
          "---------------"
        ],
        "test/pg_common.tcl||test/pg_common.tcl": [
          "File: test/pg_common.tcl -> test/pg_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: proc execsql_test {tn sql} {",
          "71:   set res [execsql $sql]",
          "72:   set sql [string map {string_agg group_concat} $sql]",
          "73:   puts $::fd \"do_execsql_test $tn {\"",
          "74:   puts $::fd \"  [string trim $sql]\"",
          "75:   puts $::fd \"} {$res}\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   set sql [string map [list {NULLS FIRST} {}] $sql]",
          "74:   set sql [string map [list {NULLS LAST} {}] $sql]",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:     (NULL, 1), (NULL, 2), (NULL, 3), (10, 4), (10, 5);",
          "172: }",
          "175:   SELECT sum(b) OVER (",
          "176:     ORDER BY a RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING",
          "177:   ) FROM t1 ORDER BY 1;",
          "178: }",
          "180: finish_test",
          "",
          "[Removed Lines]",
          "174: execsql_test 4.1 {",
          "",
          "[Added Lines]",
          "174: execsql_test 4.1.1 {",
          "179: execsql_test 4.1.2 {",
          "180:   SELECT sum(b) OVER (",
          "181:     ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING",
          "182:   ) FROM t1 ORDER BY 1;",
          "183: }",
          "185: execsql_test 4.2.1 {",
          "186:   SELECT sum(b) OVER (",
          "187:     ORDER BY a RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "188:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "189: }",
          "191: execsql_test 4.2.2 {",
          "192:   SELECT sum(b) OVER (",
          "193:     ORDER BY a DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "194:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "195: }",
          "197: execsql_test 4.3.1 {",
          "198:   SELECT sum(b) OVER (",
          "199:     ORDER BY a NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "200:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "201: }",
          "203: execsql_test 4.4.1 {",
          "204:   SELECT sum(b) OVER (",
          "205:     ORDER BY a NULLS FIRST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "206:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "207: }",
          "209: execsql_test 4.4.2 {",
          "210:   SELECT sum(b) OVER (",
          "211:     ORDER BY a DESC NULLS LAST ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "212:   ) FROM t1 ORDER BY 1 NULLS FIRST;",
          "213: }",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2622:     (NULL, 1), (NULL, 2), (NULL, 3), (10, 4), (10, 5);",
          "2623: } {}",
          "2626:   SELECT sum(b) OVER (",
          "2627:     ORDER BY a RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING",
          "2628:   ) FROM t1 ORDER BY 1;",
          "2629: } {6   6   6   9   9}",
          "2631: finish_test",
          "",
          "[Removed Lines]",
          "2625: do_execsql_test 4.1 {",
          "",
          "[Added Lines]",
          "2625: do_execsql_test 4.1.1 {",
          "2631: do_execsql_test 4.1.2 {",
          "2632:   SELECT sum(b) OVER (",
          "2633:     ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING",
          "2634:   ) FROM t1 ORDER BY 1;",
          "2635: } {6   6   6   9   9}",
          "2637: do_execsql_test 4.2.1 {",
          "2638:   SELECT sum(b) OVER (",
          "2639:     ORDER BY a RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "2640:   ) FROM t1 ORDER BY 1 ;",
          "2641: } {{}   {}   6   6   6}",
          "2643: do_execsql_test 4.2.2 {",
          "2644:   SELECT sum(b) OVER (",
          "2645:     ORDER BY a DESC RANGE BETWEEN 5 FOLLOWING AND 10 FOLLOWING",
          "2646:   ) FROM t1 ORDER BY 1 ;",
          "2647: } {{}   {}   6   6   6}",
          "2649: do_execsql_test 4.3.1 {",
          "2650:   SELECT sum(b) OVER (",
          "2651:     ORDER BY a  RANGE BETWEEN UNBOUNDED PRECEDING AND 10 FOLLOWING",
          "2652:   ) FROM t1 ORDER BY 1 ;",
          "2653: } {6   6   6   15   15}",
          "2655: do_execsql_test 4.4.1 {",
          "2656:   SELECT sum(b) OVER (",
          "2657:     ORDER BY a  ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "2658:   ) FROM t1 ORDER BY 1 ;",
          "2659: } {3   6   9   9   12}",
          "2661: do_execsql_test 4.4.2 {",
          "2662:   SELECT sum(b) OVER (",
          "2663:     ORDER BY a DESC  ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING",
          "2664:   ) FROM t1 ORDER BY 1 ;",
          "2665: } {5   6   8   9   10}",
          "",
          "---------------"
        ]
      }
    }
  ]
}