{
  "cve_id": "CVE-2022-35973",
  "cve_desc": "TensorFlow is an open source platform for machine learning. If `QuantizedMatMul` is given nonscalar input for: `min_a`, `max_a`, `min_b`, or `max_b` It gives a segfault that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit aca766ac7693bf29ed0df55ad6bfcc78f35e7f48. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "aca766ac7693bf29ed0df55ad6bfcc78f35e7f48",
  "patch_info": {
    "commit_hash": "aca766ac7693bf29ed0df55ad6bfcc78f35e7f48",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/aca766ac7693bf29ed0df55ad6bfcc78f35e7f48",
    "files": [
      "tensorflow/core/kernels/quantized_matmul_op.cc",
      "tensorflow/core/kernels/quantized_matmul_op_test.cc"
    ],
    "message": "Fix tf.raw_ops. QuantizedMatMul vulnerability from non scalar min/max a/b arguments.\n\nPiperOrigin-RevId: 465364257",
    "before_after_code_files": [
      "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
      "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc": [
      "File: tensorflow/core/kernels/quantized_matmul_op.cc -> tensorflow/core/kernels/quantized_matmul_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
      "21: #include \"public/gemmlowp.h\"",
      "22: #include \"tensorflow/core/framework/op_kernel.h\"",
      "23: #include \"tensorflow/core/framework/tensor.h\"",
      "24: #include \"tensorflow/core/kernels/meta_support.h\"",
      "25: #include \"tensorflow/core/kernels/quantization_utils.h\"",
      "26: #include \"tensorflow/core/kernels/reference_gemm.h\"",
      "27: #include \"tensorflow/core/lib/core/errors.h\"",
      "29: namespace tensorflow {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: #include \"tensorflow/core/framework/op_requires.h\"",
      "25: #include \"tensorflow/core/framework/tensor_shape.h\"",
      "30: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:   void Compute(OpKernelContext* context) override {",
      "76:     const Tensor& a = context->input(0);",
      "77:     const Tensor& b = context->input(1);",
      "78:     const float min_a = context->input(2).flat<float>()(0);",
      "79:     const float max_a = context->input(3).flat<float>()(0);",
      "80:     const float min_b = context->input(4).flat<float>()(0);",
      "81:     const float max_b = context->input(5).flat<float>()(0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
      "82:                 errors::InvalidArgument(\"min_a must be a scalar, but got shape\",",
      "83:                                         context->input(2).shape()));",
      "85:     OP_REQUIRES(context, context->input(3).NumElements() == 1,",
      "86:                 errors::InvalidArgument(\"max_a must be a scalar, but got shape\",",
      "87:                                         context->input(3).shape()));",
      "89:     OP_REQUIRES(context, context->input(4).NumElements() == 1,",
      "90:                 errors::InvalidArgument(\"min_b must be a scalar, but got shape\",",
      "91:                                         context->input(4).shape()));",
      "93:     OP_REQUIRES(context, context->input(5).NumElements() == 1,",
      "94:                 errors::InvalidArgument(\"max_b must be a scalar, but got shape\",",
      "95:                                         context->input(5).shape()));",
      "",
      "---------------"
    ],
    "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc": [
      "File: tensorflow/core/kernels/quantized_matmul_op_test.cc -> tensorflow/core/kernels/quantized_matmul_op_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "63:   AddInputFromArray<quint8>(TensorShape({3, 4}),",
      "64:                             {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18});",
      "70:   TF_ASSERT_OK(RunOpKernel());",
      "",
      "[Removed Lines]",
      "65:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "66:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "67:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "68:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "",
      "[Added Lines]",
      "65:   AddInputFromArray<float>(TensorShape({}), {0});",
      "66:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "67:   AddInputFromArray<float>(TensorShape({}), {0});",
      "68:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
      "125:   TF_ASSERT_OK(RunOpKernel());",
      "",
      "[Removed Lines]",
      "121:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
      "122:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
      "123:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
      "124:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
      "",
      "[Added Lines]",
      "121:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
      "122:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
      "123:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
      "124:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "164:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
      "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
      "172: }",
      "",
      "[Removed Lines]",
      "165:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
      "166:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
      "169:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
      "170:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
      "",
      "[Added Lines]",
      "165:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
      "166:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
      "169:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
      "170:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
      "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
      "172: }",
      "176: TEST_F(QuantizedMatMulTest, VerySmall_BadMinMax) {",
      "179:   const bool transpose_a = true;",
      "180:   const int a_rows = 1;",
      "181:   const int a_cols = 1;",
      "182:   const int b_rows = 1;",
      "183:   const int b_cols = 1;",
      "184:   const bool transpose_b = false;",
      "185:   TF_ASSERT_OK(NodeDefBuilder(\"quantized_mat_mul_op\", \"QuantizedMatMul\")",
      "186:                    .Input(FakeInput(DT_QUINT8))",
      "187:                    .Input(FakeInput(DT_QUINT8))",
      "188:                    .Input(FakeInput(DT_FLOAT))",
      "189:                    .Input(FakeInput(DT_FLOAT))",
      "190:                    .Input(FakeInput(DT_FLOAT))",
      "191:                    .Input(FakeInput(DT_FLOAT))",
      "192:                    .Attr(\"Toutput\", DataTypeToEnum<qint32>::v())",
      "193:                    .Attr(\"transpose_a\", transpose_a)",
      "194:                    .Attr(\"transpose_b\", transpose_b)",
      "195:                    .Finalize(node_def()));",
      "196:   TF_ASSERT_OK(InitOp());",
      "199:   AddInputFromArray<quint8>(TensorShape({a_rows, a_cols}), {11});",
      "202:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
      "205:   AddInputFromArray<float>(TensorShape({1}), {2});",
      "206:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
      "207:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
      "208:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "233:                                                                3,",
      "234:                                                                6,",
      "235:                                                            });",
      "240:   TF_ASSERT_OK(RunOpKernel());",
      "",
      "[Removed Lines]",
      "236:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
      "237:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
      "238:   AddInputFromArray<float>(TensorShape({1}), {0});",
      "239:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
      "",
      "[Added Lines]",
      "274:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
      "275:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
      "276:   AddInputFromArray<float>(TensorShape({}), {0});",
      "277:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "327:   AddInputFromArray<quint8>(a_quantized.shape(), a_quantized.flat<quint8>());",
      "328:   AddInputFromArray<quint8>(b_quantized.shape(), b_quantized.flat<quint8>());",
      "333:   TF_ASSERT_OK(RunOpKernel());",
      "335:   Tensor expected_float(DT_FLOAT, {a_cols, b_cols});",
      "",
      "[Removed Lines]",
      "329:   AddInputFromArray<float>(TensorShape({1}), {a_min});",
      "330:   AddInputFromArray<float>(TensorShape({1}), {a_max});",
      "331:   AddInputFromArray<float>(TensorShape({1}), {b_min});",
      "332:   AddInputFromArray<float>(TensorShape({1}), {b_max});",
      "",
      "[Added Lines]",
      "367:   AddInputFromArray<float>(TensorShape({}), {a_min});",
      "368:   AddInputFromArray<float>(TensorShape({}), {a_max});",
      "369:   AddInputFromArray<float>(TensorShape({}), {b_min});",
      "370:   AddInputFromArray<float>(TensorShape({}), {b_max});",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "034303c94a103a9290f1fe79604b6694192816e2",
      "candidate_info": {
        "commit_hash": "034303c94a103a9290f1fe79604b6694192816e2",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/034303c94a103a9290f1fe79604b6694192816e2",
        "files": [
          "tensorflow/core/common_runtime/base_collective_executor.cc",
          "tensorflow/core/common_runtime/eager/eager_executor_test.cc",
          "tensorflow/core/common_runtime/eager/tensor_handle_data_test.cc",
          "tensorflow/core/common_runtime/eager/tensor_handle_test.cc",
          "tensorflow/core/common_runtime/int32_fulltype.cc",
          "tensorflow/core/framework/op_gen_lib_test.cc",
          "tensorflow/core/framework/tensor_shape_test.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc",
          "tensorflow/core/kernels/tensor_flag_utils.cc",
          "tensorflow/lite/delegates/flex/util.cc",
          "tensorflow/lite/delegates/flex/util_test.cc",
          "tensorflow/tools/graph_transforms/inline_partitionedcall.cc",
          "tensorflow/tools/graph_transforms/rename_node.cc",
          "tensorflow/tsl/c/tsl_status.cc",
          "tensorflow/tsl/c/tsl_status_helper.cc",
          "tensorflow/tsl/profiler/rpc/client/capture_profile.cc",
          "tensorflow/tsl/profiler/rpc/client/profiler_client.cc"
        ],
        "message": "Replace usage of the tsl::Status constructor with a tsl::{error, errors}::Code.\n\nPiperOrigin-RevId: 515565609",
        "before_after_code_files": [
          "tensorflow/core/common_runtime/base_collective_executor.cc||tensorflow/core/common_runtime/base_collective_executor.cc",
          "tensorflow/core/common_runtime/eager/eager_executor_test.cc||tensorflow/core/common_runtime/eager/eager_executor_test.cc",
          "tensorflow/core/common_runtime/eager/tensor_handle_data_test.cc||tensorflow/core/common_runtime/eager/tensor_handle_data_test.cc",
          "tensorflow/core/common_runtime/eager/tensor_handle_test.cc||tensorflow/core/common_runtime/eager/tensor_handle_test.cc",
          "tensorflow/core/common_runtime/int32_fulltype.cc||tensorflow/core/common_runtime/int32_fulltype.cc",
          "tensorflow/core/framework/op_gen_lib_test.cc||tensorflow/core/framework/op_gen_lib_test.cc",
          "tensorflow/core/framework/tensor_shape_test.cc||tensorflow/core/framework/tensor_shape_test.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc",
          "tensorflow/core/kernels/tensor_flag_utils.cc||tensorflow/core/kernels/tensor_flag_utils.cc",
          "tensorflow/lite/delegates/flex/util.cc||tensorflow/lite/delegates/flex/util.cc",
          "tensorflow/lite/delegates/flex/util_test.cc||tensorflow/lite/delegates/flex/util_test.cc",
          "tensorflow/tools/graph_transforms/inline_partitionedcall.cc||tensorflow/tools/graph_transforms/inline_partitionedcall.cc",
          "tensorflow/tools/graph_transforms/rename_node.cc||tensorflow/tools/graph_transforms/rename_node.cc",
          "tensorflow/tsl/c/tsl_status.cc||tensorflow/tsl/c/tsl_status.cc",
          "tensorflow/tsl/c/tsl_status_helper.cc||tensorflow/tsl/c/tsl_status_helper.cc",
          "tensorflow/tsl/profiler/rpc/client/capture_profile.cc||tensorflow/tsl/profiler/rpc/client/capture_profile.cc",
          "tensorflow/tsl/profiler/rpc/client/profiler_client.cc||tensorflow/tsl/profiler/rpc/client/profiler_client.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/common_runtime/base_collective_executor.cc||tensorflow/core/common_runtime/base_collective_executor.cc": [
          "File: tensorflow/core/common_runtime/base_collective_executor.cc -> tensorflow/core/common_runtime/base_collective_executor.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:         timeout_microseconds, [this, is_callback_called, done] {",
          "295:           bool called = is_callback_called->exchange(true);",
          "296:           if (!called) {",
          "298:                           \"Collective has timed out during execution.\");",
          "299:             StartAbort(status);",
          "300:             done(status);",
          "",
          "[Removed Lines]",
          "297:             Status status(error::DEADLINE_EXCEEDED,",
          "",
          "[Added Lines]",
          "297:             Status status(absl::StatusCode::kDeadlineExceeded,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:           bool called = is_callback_called->exchange(true);",
          "394:           if (!called) {",
          "395:             Status status(",
          "397:                 \"Collective has timed out waiting for other workers.\");",
          "398:             StartAbort(status);",
          "399:             done(status);",
          "",
          "[Removed Lines]",
          "396:                 error::DEADLINE_EXCEEDED,",
          "",
          "[Added Lines]",
          "396:                 absl::StatusCode::kDeadlineExceeded,",
          "",
          "---------------"
        ],
        "tensorflow/core/common_runtime/eager/eager_executor_test.cc||tensorflow/core/common_runtime/eager/eager_executor_test.cc": [
          "File: tensorflow/core/common_runtime/eager/eager_executor_test.cc -> tensorflow/core/common_runtime/eager/eager_executor_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:                                               errors::InvalidArgument(\"test\"));",
          "157:   auto status = sync_executor->AddOrExecute(std::move(node));",
          "160:   ASSERT_EQ(state->read_state(), TestState::State::kNotRun);",
          "161: }",
          "",
          "[Removed Lines]",
          "159:   ASSERT_EQ(status.code(), tensorflow::error::INVALID_ARGUMENT);",
          "",
          "[Added Lines]",
          "159:   ASSERT_EQ(status.code(), absl::StatusCode::kInvalidArgument);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:   auto status = async_executor->AddOrExecute(std::move(node));",
          "227:   ASSERT_EQ(state->read_state(), TestState::State::kNotRun);",
          "228: }",
          "",
          "[Removed Lines]",
          "226:   ASSERT_EQ(status.code(), tensorflow::error::INVALID_ARGUMENT);",
          "",
          "[Added Lines]",
          "226:   ASSERT_EQ(status.code(), absl::StatusCode::kInvalidArgument);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:       state.get(), errors::InvalidArgument(\"test\"));",
          "251:   auto status = async_executor->AddOrExecute(std::move(node));",
          "254:   ASSERT_EQ(state->read_state(), TestState::State::kNotRun);",
          "255: }",
          "",
          "[Removed Lines]",
          "253:   ASSERT_EQ(status.code(), tensorflow::error::INVALID_ARGUMENT);",
          "",
          "[Added Lines]",
          "253:   ASSERT_EQ(status.code(), absl::StatusCode::kInvalidArgument);",
          "",
          "---------------"
        ],
        "tensorflow/core/common_runtime/eager/tensor_handle_data_test.cc||tensorflow/core/common_runtime/eager/tensor_handle_data_test.cc": [
          "File: tensorflow/core/common_runtime/eager/tensor_handle_data_test.cc -> tensorflow/core/common_runtime/eager/tensor_handle_data_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   LocalTensorHandleData handle_data(std::move(t));",
          "116:   TF_EXPECT_OK(handle_data.IsPoisoned());",
          "119:                                          \"Fake failure.\");",
          "120:   handle_data.Poison(fake_failure_status);",
          "",
          "[Removed Lines]",
          "118:   tensorflow::Status fake_failure_status(tensorflow::error::ABORTED,",
          "",
          "[Added Lines]",
          "118:   tensorflow::Status fake_failure_status(absl::StatusCode::kAborted,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   LocalTensorHandleData handle_data;",
          "128:   TF_EXPECT_OK(handle_data.IsPoisoned());",
          "131:                                          \"Fake failure.\");",
          "132:   handle_data.Poison(fake_failure_status);",
          "",
          "[Removed Lines]",
          "130:   tensorflow::Status fake_failure_status(tensorflow::error::ABORTED,",
          "",
          "[Added Lines]",
          "130:   tensorflow::Status fake_failure_status(absl::StatusCode::kAborted,",
          "",
          "---------------"
        ],
        "tensorflow/core/common_runtime/eager/tensor_handle_test.cc||tensorflow/core/common_runtime/eager/tensor_handle_test.cc": [
          "File: tensorflow/core/common_runtime/eager/tensor_handle_test.cc -> tensorflow/core/common_runtime/eager/tensor_handle_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   TF_EXPECT_OK(WaitReady(packed_handle));",
          "278:                                          \"Fake failure.\");",
          "279:   packed_handle->Poison(fake_failure_status, packed_handle->device());",
          "280:   EXPECT_THAT(",
          "",
          "[Removed Lines]",
          "277:   tensorflow::Status fake_failure_status(tensorflow::error::ABORTED,",
          "",
          "[Added Lines]",
          "277:   tensorflow::Status fake_failure_status(absl::StatusCode::kAborted,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:   EXPECT_EQ(h->device(), d1);",
          "478:                                          \"Fake failure.\");",
          "479:   h->PoisonRemote(fake_failure_status, d1, context->GetContextViewId());",
          "",
          "[Removed Lines]",
          "477:   tensorflow::Status fake_failure_status(tensorflow::error::ABORTED,",
          "",
          "[Added Lines]",
          "477:   tensorflow::Status fake_failure_status(absl::StatusCode::kAborted,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "523:   TF_ASSERT_OK(",
          "524:       h->AddUnshapedRemoteMirror(d2, op_id, output_num, remote_task, context));",
          "527:                                          \"Fake failure.\");",
          "528:   h->PoisonRemote(fake_failure_status, d2, context->GetContextViewId());",
          "",
          "[Removed Lines]",
          "526:   tensorflow::Status fake_failure_status(tensorflow::error::ABORTED,",
          "",
          "[Added Lines]",
          "526:   tensorflow::Status fake_failure_status(absl::StatusCode::kAborted,",
          "",
          "---------------"
        ],
        "tensorflow/core/common_runtime/int32_fulltype.cc||tensorflow/core/common_runtime/int32_fulltype.cc": [
          "File: tensorflow/core/common_runtime/int32_fulltype.cc -> tensorflow/core/common_runtime/int32_fulltype.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:       FullTypeDef* node_t = n->mutable_def()->mutable_experimental_type();",
          "85:       if (node_t->type_id() != TFT_PRODUCT) {",
          "86:         return Status(",
          "88:             absl::StrCat(\"Full type for node='\", n->name(), \"' (op='\",",
          "89:                          n->op_def().name(),",
          "90:                          \"') does not start with TFT_PRODUCT.\\n got:\\n\",",
          "",
          "[Removed Lines]",
          "87:             error::INVALID_ARGUMENT,",
          "",
          "[Added Lines]",
          "87:             absl::StatusCode::kInvalidArgument,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:       }",
          "93:       if (node_t->args_size() != output_types.size()) {",
          "94:         return Status(",
          "96:             absl::StrCat(\"Full type for node='\", n->name(), \"' (op='\",",
          "97:                          n->op_def().name(), \"') has \", node_t->args_size(),",
          "98:                          \" outputs but output_types has \", output_types.size(),",
          "",
          "[Removed Lines]",
          "95:             error::INVALID_ARGUMENT,",
          "",
          "[Added Lines]",
          "95:             absl::StatusCode::kInvalidArgument,",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/op_gen_lib_test.cc||tensorflow/core/framework/op_gen_lib_test.cc": [
          "File: tensorflow/core/framework/op_gen_lib_test.cc -> tensorflow/core/framework/op_gen_lib_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "470:   ApiDefMap api_map(op_list);",
          "472:   auto status = api_map.LoadApiDef(api_def);",
          "474: }",
          "476: TEST(OpGenLibTest, ApiDefUpdateDocs) {",
          "",
          "[Removed Lines]",
          "473:   ASSERT_EQ(tensorflow::error::INVALID_ARGUMENT, status.code());",
          "",
          "[Added Lines]",
          "473:   ASSERT_EQ(absl::StatusCode::kInvalidArgument, status.code());",
          "",
          "---------------"
        ],
        "tensorflow/core/framework/tensor_shape_test.cc||tensorflow/core/framework/tensor_shape_test.cc": [
          "File: tensorflow/core/framework/tensor_shape_test.cc -> tensorflow/core/framework/tensor_shape_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   ASSERT_EQ(4, s.dims());",
          "435:   status = s.AddDimWithStatus(-1);",
          "438:   TensorShape s2({std::numeric_limits<int64_t>::max()});",
          "439:   EXPECT_THAT(s2.AddDimWithStatus(2),",
          "",
          "[Removed Lines]",
          "436:   EXPECT_EQ(tensorflow::error::INVALID_ARGUMENT, status.code());",
          "",
          "[Added Lines]",
          "436:   EXPECT_EQ(absl::StatusCode::kInvalidArgument, status.code());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:   ASSERT_EQ(3, s.dims());",
          "466:   status = TensorShape::BuildTensorShapeBase({-10, 5, 20}, &s);",
          "468: }",
          "470: TEST(TensorShapeTest, AsEigenDSizess) {",
          "",
          "[Removed Lines]",
          "467:   EXPECT_EQ(tensorflow::error::INVALID_ARGUMENT, status.code());",
          "",
          "[Added Lines]",
          "467:   EXPECT_EQ(absl::StatusCode::kInvalidArgument, status.code());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "911:     for (auto dim : overflow) {",
          "912:       proto.add_dim()->set_size(dim);",
          "913:     }",
          "915:               TensorShape::IsValidShape(proto).code());",
          "916:     TensorShape shape;",
          "918:               TensorShapeUtils::MakeShape(overflow, &shape).code());",
          "919:   }",
          "920: }",
          "",
          "[Removed Lines]",
          "914:     EXPECT_EQ(tensorflow::error::INVALID_ARGUMENT,",
          "917:     EXPECT_EQ(tensorflow::error::INVALID_ARGUMENT,",
          "",
          "[Added Lines]",
          "914:     EXPECT_EQ(absl::StatusCode::kInvalidArgument,",
          "917:     EXPECT_EQ(absl::StatusCode::kInvalidArgument,",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op_test.cc -> tensorflow/core/kernels/quantized_matmul_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "172: }",
          "",
          "[Removed Lines]",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "",
          "[Added Lines]",
          "171:   EXPECT_EQ(::absl::StatusCode::kInvalidArgument, RunOpKernel().code());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "207:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "208:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "210: }",
          "",
          "[Removed Lines]",
          "209:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "",
          "[Added Lines]",
          "209:   EXPECT_EQ(::absl::StatusCode::kInvalidArgument, RunOpKernel().code());",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/tensor_flag_utils.cc||tensorflow/core/kernels/tensor_flag_utils.cc": [
          "File: tensorflow/core/kernels/tensor_flag_utils.cc -> tensorflow/core/kernels/tensor_flag_utils.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       return OkStatus();",
          "29:     }",
          "30:     return Status(",
          "32:         absl::StrCat(\"Expected config to be in range (0, 1] but instead found \",",
          "33:                      scalar_config));",
          "34:   }",
          "35:   if (!TensorShapeUtils::IsMatrix(config.shape())) {",
          "37:                   absl::StrCat(\"Expected config to be either scalar or matrix \"",
          "38:                                \"but instead found tensor of rank \",",
          "39:                                config.dims()));",
          "40:   }",
          "41:   if (config.dim_size(1) != 3) {",
          "42:     return Status(",
          "44:         absl::StrCat(",
          "45:             \"Expected config matrix to have dim(1) = 3 but instead found \",",
          "46:             config.dim_size(1)));",
          "",
          "[Removed Lines]",
          "31:         error::INVALID_ARGUMENT,",
          "36:     return Status(error::INVALID_ARGUMENT,",
          "43:         error::INVALID_ARGUMENT,",
          "",
          "[Added Lines]",
          "31:         absl::StatusCode::kInvalidArgument,",
          "36:     return Status(absl::StatusCode::kInvalidArgument,",
          "43:         absl::StatusCode::kInvalidArgument,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:       return OkStatus();",
          "93:     }",
          "94:     return Status(",
          "96:         absl::StrCat(\"Expected config to be in range (0, 1] but instead found \",",
          "97:                      scalar_config));",
          "98:   }",
          "99:   if (!TensorShapeUtils::IsMatrix(config.shape())) {",
          "101:                   absl::StrCat(\"Expected config to be either scalar or matrix \"",
          "102:                                \"but instead found tensor of rank \",",
          "103:                                config.dims()));",
          "104:   }",
          "105:   if (config.dim_size(1) != 2) {",
          "106:     return Status(",
          "108:         absl::StrCat(",
          "109:             \"Expected config matrix to have dim(1) = 2 but instead found \",",
          "110:             config.dim_size(1)));",
          "",
          "[Removed Lines]",
          "95:         error::INVALID_ARGUMENT,",
          "100:     return Status(error::INVALID_ARGUMENT,",
          "107:         error::INVALID_ARGUMENT,",
          "",
          "[Added Lines]",
          "95:         absl::StatusCode::kInvalidArgument,",
          "100:     return Status(absl::StatusCode::kInvalidArgument,",
          "107:         absl::StatusCode::kInvalidArgument,",
          "",
          "---------------"
        ],
        "tensorflow/lite/delegates/flex/util.cc||tensorflow/lite/delegates/flex/util.cc": [
          "File: tensorflow/lite/delegates/flex/util.cc -> tensorflow/lite/delegates/flex/util.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:     const TfLiteTensor* tflite_tensor) {",
          "223:   if (IsResourceOrVariant(tflite_tensor)) {",
          "226:                               \"Input tensor has resource or variant type.\");",
          "227:   }",
          "",
          "[Removed Lines]",
          "225:     return tensorflow::Status(tensorflow::error::INVALID_ARGUMENT,",
          "",
          "[Added Lines]",
          "225:     return tensorflow::Status(absl::StatusCode::kInvalidArgument,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:   } else {",
          "246:     if (tf_tensor.tensor_data().size() != tflite_tensor->bytes) {",
          "247:       return tensorflow::Status(",
          "249:           \"TfLiteTensor's size doesn't match the TF tensor's size.\");",
          "250:     }",
          "251:     if (!tflite_tensor->data.raw) {",
          "253:                                 \"TfLiteTensor's data field is null.\");",
          "254:     }",
          "255:     std::memcpy(tf_tensor.data(), tflite_tensor->data.raw,",
          "",
          "[Removed Lines]",
          "248:           tensorflow::error::INTERNAL,",
          "252:       return tensorflow::Status(tensorflow::error::INTERNAL,",
          "",
          "[Added Lines]",
          "248:           absl::StatusCode::kInternal,",
          "252:       return tensorflow::Status(absl::StatusCode::kInternal,",
          "",
          "---------------"
        ],
        "tensorflow/lite/delegates/flex/util_test.cc||tensorflow/lite/delegates/flex/util_test.cc": [
          "File: tensorflow/lite/delegates/flex/util_test.cc -> tensorflow/lite/delegates/flex/util_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:   TfLiteTensor tensor;",
          "190:   tensor.type = kTfLiteResource;",
          "191:   EXPECT_EQ(CreateTfTensorFromTfLiteTensor(&tensor).status().code(),",
          "193:   tensor.type = kTfLiteVariant;",
          "194:   EXPECT_EQ(CreateTfTensorFromTfLiteTensor(&tensor).status().code(),",
          "196: }",
          "198: TEST(UtilTest, CreateTfTensorFromTfLiteTensorFloat) {",
          "",
          "[Removed Lines]",
          "192:             tensorflow::error::INVALID_ARGUMENT);",
          "195:             tensorflow::error::INVALID_ARGUMENT);",
          "",
          "[Added Lines]",
          "192:             absl::StatusCode::kInvalidArgument);",
          "195:             absl::StatusCode::kInvalidArgument);",
          "",
          "---------------"
        ],
        "tensorflow/tools/graph_transforms/inline_partitionedcall.cc||tensorflow/tools/graph_transforms/inline_partitionedcall.cc": [
          "File: tensorflow/tools/graph_transforms/inline_partitionedcall.cc -> tensorflow/tools/graph_transforms/inline_partitionedcall.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     if (node.op() == kPartitionedCallOpName) {",
          "65:       if (node.attr().count(kFunctionAttrName) == 0) {",
          "66:         return Status(",
          "68:             \"Node \" + node.name() + \" has no attribute: \" + kFunctionAttrName);",
          "69:       }",
          "71:       if (!node.attr().at(kFunctionAttrName).has_func()) {",
          "73:                       \"Cannot figure out function name\");",
          "74:       }",
          "75:       const std::string function_name =",
          "",
          "[Removed Lines]",
          "67:             error::Code::NOT_FOUND,",
          "72:         return Status(error::Code::NOT_FOUND,",
          "",
          "[Added Lines]",
          "67:             absl::StatusCode::kNotFound,",
          "72:         return Status(absl::StatusCode::kNotFound,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:       absl::optional<FunctionDef> function =",
          "78:           GetFunctionByNameFromLibrary(input_graph_def, function_name);",
          "79:       if (!function.has_value()) {",
          "81:                       \"function \" + function_name + \" Not found\");",
          "82:       }",
          "",
          "[Removed Lines]",
          "80:         return Status(error::Code::NOT_FOUND,",
          "",
          "[Added Lines]",
          "80:         return Status(absl::StatusCode::kNotFound,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:       const int kInputArgumentCount = function->signature().input_arg().size();",
          "98:       if (node.input().size() != kInputArgumentCount) {",
          "100:                       \"Called function  \" + function_name +",
          "101:                           \" has invalid input signature.\");",
          "102:       }",
          "",
          "[Removed Lines]",
          "99:         return Status(error::Code::INVALID_ARGUMENT,",
          "",
          "[Added Lines]",
          "99:         return Status(absl::StatusCode::kInvalidArgument,",
          "",
          "---------------"
        ],
        "tensorflow/tools/graph_transforms/rename_node.cc||tensorflow/tools/graph_transforms/rename_node.cc": [
          "File: tensorflow/tools/graph_transforms/rename_node.cc -> tensorflow/tools/graph_transforms/rename_node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     NodeDef* node = output_graph_def->mutable_node()->Add();",
          "46:     if (node->name() == new_node_name) {",
          "48:                     \"A node is alreading using \" + new_node_name + \"as name.\");",
          "49:     }",
          "50:     if (node->name() == old_node_name) {",
          "",
          "[Removed Lines]",
          "47:       return Status(error::Code::INVALID_ARGUMENT,",
          "",
          "[Added Lines]",
          "47:       return Status(absl::StatusCode::kInvalidArgument,",
          "",
          "---------------"
        ],
        "tensorflow/tsl/c/tsl_status.cc||tensorflow/tsl/c/tsl_status.cc": [
          "File: tensorflow/tsl/c/tsl_status.cc -> tensorflow/tsl/c/tsl_status.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     s->status = ::tsl::OkStatus();",
          "33:     return;",
          "34:   }",
          "36: }",
          "38: void TSL_SetPayload(TSL_Status* s, const char* key, const char* value) {",
          "",
          "[Removed Lines]",
          "35:   s->status = Status(static_cast<Code>(code), tsl::StringPiece(msg));",
          "",
          "[Added Lines]",
          "35:   s->status =",
          "36:       Status(static_cast<absl::StatusCode>(code), tsl::StringPiece(msg));",
          "",
          "---------------"
        ],
        "tensorflow/tsl/c/tsl_status_helper.cc||tensorflow/tsl/c/tsl_status_helper.cc": [
          "File: tensorflow/tsl/c/tsl_status_helper.cc -> tensorflow/tsl/c/tsl_status_helper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace tsl {",
          "23: void Set_TSL_Status_from_Status(TSL_Status* tsl_status, const Status& status) {",
          "25:   const char* message(status.error_message().c_str());",
          "27:   switch (code) {",
          "29:       assert(TSL_GetCode(tsl_status) == TSL_OK);",
          "30:       break;",
          "32:       TSL_SetStatus(tsl_status, TSL_CANCELLED, message);",
          "33:       break;",
          "35:       TSL_SetStatus(tsl_status, TSL_UNKNOWN, message);",
          "36:       break;",
          "38:       TSL_SetStatus(tsl_status, TSL_INVALID_ARGUMENT, message);",
          "39:       break;",
          "41:       TSL_SetStatus(tsl_status, TSL_DEADLINE_EXCEEDED, message);",
          "42:       break;",
          "44:       TSL_SetStatus(tsl_status, TSL_NOT_FOUND, message);",
          "45:       break;",
          "47:       TSL_SetStatus(tsl_status, TSL_ALREADY_EXISTS, message);",
          "48:       break;",
          "50:       TSL_SetStatus(tsl_status, TSL_PERMISSION_DENIED, message);",
          "51:       break;",
          "53:       TSL_SetStatus(tsl_status, TSL_UNAUTHENTICATED, message);",
          "54:       break;",
          "56:       TSL_SetStatus(tsl_status, TSL_RESOURCE_EXHAUSTED, message);",
          "57:       break;",
          "59:       TSL_SetStatus(tsl_status, TSL_FAILED_PRECONDITION, message);",
          "60:       break;",
          "62:       TSL_SetStatus(tsl_status, TSL_ABORTED, message);",
          "63:       break;",
          "65:       TSL_SetStatus(tsl_status, TSL_OUT_OF_RANGE, message);",
          "66:       break;",
          "68:       TSL_SetStatus(tsl_status, TSL_UNIMPLEMENTED, message);",
          "69:       break;",
          "71:       TSL_SetStatus(tsl_status, TSL_INTERNAL, message);",
          "72:       break;",
          "74:       TSL_SetStatus(tsl_status, TSL_UNAVAILABLE, message);",
          "75:       break;",
          "77:       TSL_SetStatus(tsl_status, TSL_DATA_LOSS, message);",
          "78:       break;",
          "79:     default:",
          "",
          "[Removed Lines]",
          "24:   tensorflow::error::Code code = status.code();",
          "28:     case tensorflow::error::OK:",
          "31:     case tensorflow::error::CANCELLED:",
          "34:     case tensorflow::error::UNKNOWN:",
          "37:     case tensorflow::error::INVALID_ARGUMENT:",
          "40:     case tensorflow::error::DEADLINE_EXCEEDED:",
          "43:     case tensorflow::error::NOT_FOUND:",
          "46:     case tensorflow::error::ALREADY_EXISTS:",
          "49:     case tensorflow::error::PERMISSION_DENIED:",
          "52:     case tensorflow::error::UNAUTHENTICATED:",
          "55:     case tensorflow::error::RESOURCE_EXHAUSTED:",
          "58:     case tensorflow::error::FAILED_PRECONDITION:",
          "61:     case tensorflow::error::ABORTED:",
          "64:     case tensorflow::error::OUT_OF_RANGE:",
          "67:     case tensorflow::error::UNIMPLEMENTED:",
          "70:     case tensorflow::error::INTERNAL:",
          "73:     case tensorflow::error::UNAVAILABLE:",
          "76:     case tensorflow::error::DATA_LOSS:",
          "",
          "[Added Lines]",
          "24:   absl::StatusCode code = static_cast<absl::StatusCode>(status.code());",
          "28:     case absl::StatusCode::kOk:",
          "31:     case absl::StatusCode::kCancelled:",
          "34:     case absl::StatusCode::kUnknown:",
          "37:     case absl::StatusCode::kInvalidArgument:",
          "40:     case absl::StatusCode::kDeadlineExceeded:",
          "43:     case absl::StatusCode::kNotFound:",
          "46:     case absl::StatusCode::kAlreadyExists:",
          "49:     case absl::StatusCode::kPermissionDenied:",
          "52:     case absl::StatusCode::kUnauthenticated:",
          "55:     case absl::StatusCode::kResourceExhausted:",
          "58:     case absl::StatusCode::kFailedPrecondition:",
          "61:     case absl::StatusCode::kAborted:",
          "64:     case absl::StatusCode::kOutOfRange:",
          "67:     case absl::StatusCode::kUnimplemented:",
          "70:     case absl::StatusCode::kInternal:",
          "73:     case absl::StatusCode::kUnavailable:",
          "76:     case absl::StatusCode::kDataLoss:",
          "",
          "---------------"
        ],
        "tensorflow/tsl/profiler/rpc/client/capture_profile.cc||tensorflow/tsl/profiler/rpc/client/capture_profile.cc": [
          "File: tensorflow/tsl/profiler/rpc/client/capture_profile.cc -> tensorflow/tsl/profiler/rpc/client/capture_profile.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   }",
          "161:   if (!has_trace_data) {",
          "163:                   \"No trace event was collected because there were no responses\"",
          "164:                   \" from clients or the responses did not have trace data.\");",
          "165:   }",
          "",
          "[Removed Lines]",
          "162:     return Status(error::Code::UNAVAILABLE,",
          "",
          "[Added Lines]",
          "162:     return Status(absl::StatusCode::kUnavailable,",
          "",
          "---------------"
        ],
        "tensorflow/tsl/profiler/rpc/client/profiler_client.cc||tensorflow/tsl/profiler/rpc/client/profiler_client.cc": [
          "File: tensorflow/tsl/profiler/rpc/client/profiler_client.cc -> tensorflow/tsl/profiler/rpc/client/profiler_client.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: inline Status FromGrpcStatus(const ::grpc::Status& s) {",
          "42:   return s.ok() ? OkStatus()",
          "44:                          s.error_message());",
          "45: }",
          "",
          "[Removed Lines]",
          "43:                 : Status(static_cast<error::Code>(s.error_code()),",
          "",
          "[Added Lines]",
          "43:                 : Status(static_cast<absl::StatusCode>(s.error_code()),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c4b020811c5ba17281c52c3cf01f9a03159ee06",
      "candidate_info": {
        "commit_hash": "0c4b020811c5ba17281c52c3cf01f9a03159ee06",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0c4b020811c5ba17281c52c3cf01f9a03159ee06",
        "files": [
          "tensorflow/core/kernels/quantized_matmul_op.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc"
        ],
        "message": "Fix tf.raw_ops. QuantizedMatMul vulnerability from non scalar min/max a/b arguments.\n\nPiperOrigin-RevId: 465364257",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op.cc -> tensorflow/core/kernels/quantized_matmul_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          "21: #include \"public/gemmlowp.h\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/tensor.h\"",
          "24: #include \"tensorflow/core/kernels/meta_support.h\"",
          "25: #include \"tensorflow/core/kernels/quantization_utils.h\"",
          "26: #include \"tensorflow/core/kernels/reference_gemm.h\"",
          "27: #include \"tensorflow/core/lib/core/errors.h\"",
          "29: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/op_requires.h\"",
          "25: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "30: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   void Compute(OpKernelContext* context) override {",
          "76:     const Tensor& a = context->input(0);",
          "77:     const Tensor& b = context->input(1);",
          "78:     const float min_a = context->input(2).flat<float>()(0);",
          "79:     const float max_a = context->input(3).flat<float>()(0);",
          "80:     const float min_b = context->input(4).flat<float>()(0);",
          "81:     const float max_b = context->input(5).flat<float>()(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
          "82:                 errors::InvalidArgument(\"min_a must be a scalar, but got shape\",",
          "83:                                         context->input(2).shape()));",
          "85:     OP_REQUIRES(context, context->input(3).NumElements() == 1,",
          "86:                 errors::InvalidArgument(\"max_a must be a scalar, but got shape\",",
          "87:                                         context->input(3).shape()));",
          "89:     OP_REQUIRES(context, context->input(4).NumElements() == 1,",
          "90:                 errors::InvalidArgument(\"min_b must be a scalar, but got shape\",",
          "91:                                         context->input(4).shape()));",
          "93:     OP_REQUIRES(context, context->input(5).NumElements() == 1,",
          "94:                 errors::InvalidArgument(\"max_b must be a scalar, but got shape\",",
          "95:                                         context->input(5).shape()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op_test.cc -> tensorflow/core/kernels/quantized_matmul_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   AddInputFromArray<quint8>(TensorShape({3, 4}),",
          "64:                             {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18});",
          "70:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "65:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "66:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "67:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "68:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "65:   AddInputFromArray<float>(TensorShape({}), {0});",
          "66:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "67:   AddInputFromArray<float>(TensorShape({}), {0});",
          "68:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "125:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "121:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "122:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "123:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "124:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
          "",
          "[Added Lines]",
          "121:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "122:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "123:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "124:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "172: }",
          "",
          "[Removed Lines]",
          "165:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "166:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "169:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "",
          "[Added Lines]",
          "165:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "166:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "169:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "172: }",
          "176: TEST_F(QuantizedMatMulTest, VerySmall_BadMinMax) {",
          "179:   const bool transpose_a = true;",
          "180:   const int a_rows = 1;",
          "181:   const int a_cols = 1;",
          "182:   const int b_rows = 1;",
          "183:   const int b_cols = 1;",
          "184:   const bool transpose_b = false;",
          "185:   TF_ASSERT_OK(NodeDefBuilder(\"quantized_mat_mul_op\", \"QuantizedMatMul\")",
          "186:                    .Input(FakeInput(DT_QUINT8))",
          "187:                    .Input(FakeInput(DT_QUINT8))",
          "188:                    .Input(FakeInput(DT_FLOAT))",
          "189:                    .Input(FakeInput(DT_FLOAT))",
          "190:                    .Input(FakeInput(DT_FLOAT))",
          "191:                    .Input(FakeInput(DT_FLOAT))",
          "192:                    .Attr(\"Toutput\", DataTypeToEnum<qint32>::v())",
          "193:                    .Attr(\"transpose_a\", transpose_a)",
          "194:                    .Attr(\"transpose_b\", transpose_b)",
          "195:                    .Finalize(node_def()));",
          "196:   TF_ASSERT_OK(InitOp());",
          "199:   AddInputFromArray<quint8>(TensorShape({a_rows, a_cols}), {11});",
          "202:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({1}), {2});",
          "206:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "207:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "208:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:                                                                3,",
          "234:                                                                6,",
          "235:                                                            });",
          "240:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "236:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "237:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "238:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "239:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "274:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "275:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "276:   AddInputFromArray<float>(TensorShape({}), {0});",
          "277:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:   AddInputFromArray<quint8>(a_quantized.shape(), a_quantized.flat<quint8>());",
          "328:   AddInputFromArray<quint8>(b_quantized.shape(), b_quantized.flat<quint8>());",
          "333:   TF_ASSERT_OK(RunOpKernel());",
          "335:   Tensor expected_float(DT_FLOAT, {a_cols, b_cols});",
          "",
          "[Removed Lines]",
          "329:   AddInputFromArray<float>(TensorShape({1}), {a_min});",
          "330:   AddInputFromArray<float>(TensorShape({1}), {a_max});",
          "331:   AddInputFromArray<float>(TensorShape({1}), {b_min});",
          "332:   AddInputFromArray<float>(TensorShape({1}), {b_max});",
          "",
          "[Added Lines]",
          "367:   AddInputFromArray<float>(TensorShape({}), {a_min});",
          "368:   AddInputFromArray<float>(TensorShape({}), {a_max});",
          "369:   AddInputFromArray<float>(TensorShape({}), {b_min});",
          "370:   AddInputFromArray<float>(TensorShape({}), {b_max});",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18e3e17291d144d222cc7a598cf978e2d1aefd76",
      "candidate_info": {
        "commit_hash": "18e3e17291d144d222cc7a598cf978e2d1aefd76",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/18e3e17291d144d222cc7a598cf978e2d1aefd76",
        "files": [
          "tensorflow/core/kernels/quantized_matmul_op.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc"
        ],
        "message": "Fix tf.raw_ops. QuantizedMatMul vulnerability from non scalar min/max a/b arguments.\n\nPiperOrigin-RevId: 465364257",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op.cc -> tensorflow/core/kernels/quantized_matmul_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          "21: #include \"public/gemmlowp.h\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/tensor.h\"",
          "24: #include \"tensorflow/core/kernels/meta_support.h\"",
          "25: #include \"tensorflow/core/kernels/quantization_utils.h\"",
          "26: #include \"tensorflow/core/kernels/reference_gemm.h\"",
          "27: #include \"tensorflow/core/lib/core/errors.h\"",
          "29: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/op_requires.h\"",
          "25: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "30: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   void Compute(OpKernelContext* context) override {",
          "76:     const Tensor& a = context->input(0);",
          "77:     const Tensor& b = context->input(1);",
          "78:     const float min_a = context->input(2).flat<float>()(0);",
          "79:     const float max_a = context->input(3).flat<float>()(0);",
          "80:     const float min_b = context->input(4).flat<float>()(0);",
          "81:     const float max_b = context->input(5).flat<float>()(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
          "82:                 errors::InvalidArgument(\"min_a must be a scalar, but got shape\",",
          "83:                                         context->input(2).shape()));",
          "85:     OP_REQUIRES(context, context->input(3).NumElements() == 1,",
          "86:                 errors::InvalidArgument(\"max_a must be a scalar, but got shape\",",
          "87:                                         context->input(3).shape()));",
          "89:     OP_REQUIRES(context, context->input(4).NumElements() == 1,",
          "90:                 errors::InvalidArgument(\"min_b must be a scalar, but got shape\",",
          "91:                                         context->input(4).shape()));",
          "93:     OP_REQUIRES(context, context->input(5).NumElements() == 1,",
          "94:                 errors::InvalidArgument(\"max_b must be a scalar, but got shape\",",
          "95:                                         context->input(5).shape()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op_test.cc -> tensorflow/core/kernels/quantized_matmul_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   AddInputFromArray<quint8>(TensorShape({3, 4}),",
          "64:                             {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18});",
          "70:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "65:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "66:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "67:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "68:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "65:   AddInputFromArray<float>(TensorShape({}), {0});",
          "66:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "67:   AddInputFromArray<float>(TensorShape({}), {0});",
          "68:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "125:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "121:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "122:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "123:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "124:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
          "",
          "[Added Lines]",
          "121:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "122:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "123:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "124:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "172: }",
          "",
          "[Removed Lines]",
          "165:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "166:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "169:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "",
          "[Added Lines]",
          "165:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "166:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "169:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "172: }",
          "176: TEST_F(QuantizedMatMulTest, VerySmall_BadMinMax) {",
          "179:   const bool transpose_a = true;",
          "180:   const int a_rows = 1;",
          "181:   const int a_cols = 1;",
          "182:   const int b_rows = 1;",
          "183:   const int b_cols = 1;",
          "184:   const bool transpose_b = false;",
          "185:   TF_ASSERT_OK(NodeDefBuilder(\"quantized_mat_mul_op\", \"QuantizedMatMul\")",
          "186:                    .Input(FakeInput(DT_QUINT8))",
          "187:                    .Input(FakeInput(DT_QUINT8))",
          "188:                    .Input(FakeInput(DT_FLOAT))",
          "189:                    .Input(FakeInput(DT_FLOAT))",
          "190:                    .Input(FakeInput(DT_FLOAT))",
          "191:                    .Input(FakeInput(DT_FLOAT))",
          "192:                    .Attr(\"Toutput\", DataTypeToEnum<qint32>::v())",
          "193:                    .Attr(\"transpose_a\", transpose_a)",
          "194:                    .Attr(\"transpose_b\", transpose_b)",
          "195:                    .Finalize(node_def()));",
          "196:   TF_ASSERT_OK(InitOp());",
          "199:   AddInputFromArray<quint8>(TensorShape({a_rows, a_cols}), {11});",
          "202:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({1}), {2});",
          "206:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "207:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "208:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:                                                                3,",
          "234:                                                                6,",
          "235:                                                            });",
          "240:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "236:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "237:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "238:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "239:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "274:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "275:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "276:   AddInputFromArray<float>(TensorShape({}), {0});",
          "277:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:   AddInputFromArray<quint8>(a_quantized.shape(), a_quantized.flat<quint8>());",
          "328:   AddInputFromArray<quint8>(b_quantized.shape(), b_quantized.flat<quint8>());",
          "333:   TF_ASSERT_OK(RunOpKernel());",
          "335:   Tensor expected_float(DT_FLOAT, {a_cols, b_cols});",
          "",
          "[Removed Lines]",
          "329:   AddInputFromArray<float>(TensorShape({1}), {a_min});",
          "330:   AddInputFromArray<float>(TensorShape({1}), {a_max});",
          "331:   AddInputFromArray<float>(TensorShape({1}), {b_min});",
          "332:   AddInputFromArray<float>(TensorShape({1}), {b_max});",
          "",
          "[Added Lines]",
          "367:   AddInputFromArray<float>(TensorShape({}), {a_min});",
          "368:   AddInputFromArray<float>(TensorShape({}), {a_max});",
          "369:   AddInputFromArray<float>(TensorShape({}), {b_min});",
          "370:   AddInputFromArray<float>(TensorShape({}), {b_max});",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "264ddb4468aa4e8c05c94bf3550a7130b857d0c5",
      "candidate_info": {
        "commit_hash": "264ddb4468aa4e8c05c94bf3550a7130b857d0c5",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/264ddb4468aa4e8c05c94bf3550a7130b857d0c5",
        "files": [
          "tensorflow/core/kernels/quantized_matmul_op.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc"
        ],
        "message": "Fix tf.raw_ops. QuantizedMatMul vulnerability from non scalar min/max a/b arguments.\n\nPiperOrigin-RevId: 465364257",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op.cc -> tensorflow/core/kernels/quantized_matmul_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          "21: #include \"public/gemmlowp.h\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/tensor.h\"",
          "24: #include \"tensorflow/core/kernels/meta_support.h\"",
          "25: #include \"tensorflow/core/kernels/quantization_utils.h\"",
          "26: #include \"tensorflow/core/kernels/reference_gemm.h\"",
          "27: #include \"tensorflow/core/lib/core/errors.h\"",
          "29: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/op_requires.h\"",
          "25: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "30: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   void Compute(OpKernelContext* context) override {",
          "76:     const Tensor& a = context->input(0);",
          "77:     const Tensor& b = context->input(1);",
          "78:     const float min_a = context->input(2).flat<float>()(0);",
          "79:     const float max_a = context->input(3).flat<float>()(0);",
          "80:     const float min_b = context->input(4).flat<float>()(0);",
          "81:     const float max_b = context->input(5).flat<float>()(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
          "82:                 errors::InvalidArgument(\"min_a must be a scalar, but got shape\",",
          "83:                                         context->input(2).shape()));",
          "85:     OP_REQUIRES(context, context->input(3).NumElements() == 1,",
          "86:                 errors::InvalidArgument(\"max_a must be a scalar, but got shape\",",
          "87:                                         context->input(3).shape()));",
          "89:     OP_REQUIRES(context, context->input(4).NumElements() == 1,",
          "90:                 errors::InvalidArgument(\"min_b must be a scalar, but got shape\",",
          "91:                                         context->input(4).shape()));",
          "93:     OP_REQUIRES(context, context->input(5).NumElements() == 1,",
          "94:                 errors::InvalidArgument(\"max_b must be a scalar, but got shape\",",
          "95:                                         context->input(5).shape()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op_test.cc -> tensorflow/core/kernels/quantized_matmul_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   AddInputFromArray<quint8>(TensorShape({3, 4}),",
          "64:                             {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18});",
          "70:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "65:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "66:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "67:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "68:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "65:   AddInputFromArray<float>(TensorShape({}), {0});",
          "66:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "67:   AddInputFromArray<float>(TensorShape({}), {0});",
          "68:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "125:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "121:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "122:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "123:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "124:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
          "",
          "[Added Lines]",
          "121:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "122:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "123:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "124:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "172: }",
          "",
          "[Removed Lines]",
          "165:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "166:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "169:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "",
          "[Added Lines]",
          "165:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "166:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "169:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "172: }",
          "176: TEST_F(QuantizedMatMulTest, VerySmall_BadMinMax) {",
          "179:   const bool transpose_a = true;",
          "180:   const int a_rows = 1;",
          "181:   const int a_cols = 1;",
          "182:   const int b_rows = 1;",
          "183:   const int b_cols = 1;",
          "184:   const bool transpose_b = false;",
          "185:   TF_ASSERT_OK(NodeDefBuilder(\"quantized_mat_mul_op\", \"QuantizedMatMul\")",
          "186:                    .Input(FakeInput(DT_QUINT8))",
          "187:                    .Input(FakeInput(DT_QUINT8))",
          "188:                    .Input(FakeInput(DT_FLOAT))",
          "189:                    .Input(FakeInput(DT_FLOAT))",
          "190:                    .Input(FakeInput(DT_FLOAT))",
          "191:                    .Input(FakeInput(DT_FLOAT))",
          "192:                    .Attr(\"Toutput\", DataTypeToEnum<qint32>::v())",
          "193:                    .Attr(\"transpose_a\", transpose_a)",
          "194:                    .Attr(\"transpose_b\", transpose_b)",
          "195:                    .Finalize(node_def()));",
          "196:   TF_ASSERT_OK(InitOp());",
          "199:   AddInputFromArray<quint8>(TensorShape({a_rows, a_cols}), {11});",
          "202:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({1}), {2});",
          "206:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "207:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "208:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:                                                                3,",
          "234:                                                                6,",
          "235:                                                            });",
          "240:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "236:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "237:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "238:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "239:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "274:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "275:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "276:   AddInputFromArray<float>(TensorShape({}), {0});",
          "277:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:   AddInputFromArray<quint8>(a_quantized.shape(), a_quantized.flat<quint8>());",
          "328:   AddInputFromArray<quint8>(b_quantized.shape(), b_quantized.flat<quint8>());",
          "333:   TF_ASSERT_OK(RunOpKernel());",
          "335:   Tensor expected_float(DT_FLOAT, {a_cols, b_cols});",
          "",
          "[Removed Lines]",
          "329:   AddInputFromArray<float>(TensorShape({1}), {a_min});",
          "330:   AddInputFromArray<float>(TensorShape({1}), {a_max});",
          "331:   AddInputFromArray<float>(TensorShape({1}), {b_min});",
          "332:   AddInputFromArray<float>(TensorShape({1}), {b_max});",
          "",
          "[Added Lines]",
          "367:   AddInputFromArray<float>(TensorShape({}), {a_min});",
          "368:   AddInputFromArray<float>(TensorShape({}), {a_max});",
          "369:   AddInputFromArray<float>(TensorShape({}), {b_min});",
          "370:   AddInputFromArray<float>(TensorShape({}), {b_max});",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f73511e9b9579278e9b15152cd32653117355de",
      "candidate_info": {
        "commit_hash": "4f73511e9b9579278e9b15152cd32653117355de",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/4f73511e9b9579278e9b15152cd32653117355de",
        "files": [
          "tensorflow/core/kernels/quantized_matmul_op.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc"
        ],
        "message": "Fix tf.raw_ops. QuantizedMatMul vulnerability from non scalar min/max a/b arguments.\n\nPiperOrigin-RevId: 465364257",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
          "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc",
            "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_matmul_op.cc||tensorflow/core/kernels/quantized_matmul_op.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op.cc -> tensorflow/core/kernels/quantized_matmul_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK",
          "21: #include \"public/gemmlowp.h\"",
          "22: #include \"tensorflow/core/framework/op_kernel.h\"",
          "23: #include \"tensorflow/core/framework/tensor.h\"",
          "24: #include \"tensorflow/core/kernels/meta_support.h\"",
          "25: #include \"tensorflow/core/kernels/quantization_utils.h\"",
          "26: #include \"tensorflow/core/kernels/reference_gemm.h\"",
          "27: #include \"tensorflow/core/lib/core/errors.h\"",
          "29: namespace tensorflow {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"tensorflow/core/framework/op_requires.h\"",
          "25: #include \"tensorflow/core/framework/tensor_shape.h\"",
          "30: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:   void Compute(OpKernelContext* context) override {",
          "76:     const Tensor& a = context->input(0);",
          "77:     const Tensor& b = context->input(1);",
          "78:     const float min_a = context->input(2).flat<float>()(0);",
          "79:     const float max_a = context->input(3).flat<float>()(0);",
          "80:     const float min_b = context->input(4).flat<float>()(0);",
          "81:     const float max_b = context->input(5).flat<float>()(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),",
          "82:                 errors::InvalidArgument(\"min_a must be a scalar, but got shape\",",
          "83:                                         context->input(2).shape()));",
          "85:     OP_REQUIRES(context, context->input(3).NumElements() == 1,",
          "86:                 errors::InvalidArgument(\"max_a must be a scalar, but got shape\",",
          "87:                                         context->input(3).shape()));",
          "89:     OP_REQUIRES(context, context->input(4).NumElements() == 1,",
          "90:                 errors::InvalidArgument(\"min_b must be a scalar, but got shape\",",
          "91:                                         context->input(4).shape()));",
          "93:     OP_REQUIRES(context, context->input(5).NumElements() == 1,",
          "94:                 errors::InvalidArgument(\"max_b must be a scalar, but got shape\",",
          "95:                                         context->input(5).shape()));",
          "",
          "---------------"
        ],
        "tensorflow/core/kernels/quantized_matmul_op_test.cc||tensorflow/core/kernels/quantized_matmul_op_test.cc": [
          "File: tensorflow/core/kernels/quantized_matmul_op_test.cc -> tensorflow/core/kernels/quantized_matmul_op_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   AddInputFromArray<quint8>(TensorShape({3, 4}),",
          "64:                             {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18});",
          "70:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "65:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "66:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "67:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "68:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "65:   AddInputFromArray<float>(TensorShape({}), {0});",
          "66:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "67:   AddInputFromArray<float>(TensorShape({}), {0});",
          "68:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "125:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "121:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "122:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "123:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "124:   AddInputFromArray<float>(TensorShape({1}), {256.0f});",
          "",
          "[Added Lines]",
          "121:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "122:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "123:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "124:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "172: }",
          "",
          "[Removed Lines]",
          "165:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "166:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "169:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({1}), {1.0f});",
          "",
          "[Added Lines]",
          "165:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "166:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "169:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "170:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "171:   EXPECT_EQ(::tensorflow::error::INVALID_ARGUMENT, RunOpKernel().code());",
          "172: }",
          "176: TEST_F(QuantizedMatMulTest, VerySmall_BadMinMax) {",
          "179:   const bool transpose_a = true;",
          "180:   const int a_rows = 1;",
          "181:   const int a_cols = 1;",
          "182:   const int b_rows = 1;",
          "183:   const int b_cols = 1;",
          "184:   const bool transpose_b = false;",
          "185:   TF_ASSERT_OK(NodeDefBuilder(\"quantized_mat_mul_op\", \"QuantizedMatMul\")",
          "186:                    .Input(FakeInput(DT_QUINT8))",
          "187:                    .Input(FakeInput(DT_QUINT8))",
          "188:                    .Input(FakeInput(DT_FLOAT))",
          "189:                    .Input(FakeInput(DT_FLOAT))",
          "190:                    .Input(FakeInput(DT_FLOAT))",
          "191:                    .Input(FakeInput(DT_FLOAT))",
          "192:                    .Attr(\"Toutput\", DataTypeToEnum<qint32>::v())",
          "193:                    .Attr(\"transpose_a\", transpose_a)",
          "194:                    .Attr(\"transpose_b\", transpose_b)",
          "195:                    .Finalize(node_def()));",
          "196:   TF_ASSERT_OK(InitOp());",
          "199:   AddInputFromArray<quint8>(TensorShape({a_rows, a_cols}), {11});",
          "202:   AddInputFromArray<quint8>(TensorShape({b_rows, b_cols}), {0});",
          "205:   AddInputFromArray<float>(TensorShape({1}), {2});",
          "206:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "207:   AddInputFromArray<float>(TensorShape({}), {1.0f});",
          "208:   AddInputFromArray<float>(TensorShape({}), {256.0f});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "233:                                                                3,",
          "234:                                                                6,",
          "235:                                                            });",
          "240:   TF_ASSERT_OK(RunOpKernel());",
          "",
          "[Removed Lines]",
          "236:   AddInputFromArray<float>(TensorShape({1}), {-12.0f});",
          "237:   AddInputFromArray<float>(TensorShape({1}), {243.0f});",
          "238:   AddInputFromArray<float>(TensorShape({1}), {0});",
          "239:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
          "",
          "[Added Lines]",
          "274:   AddInputFromArray<float>(TensorShape({}), {-12.0f});",
          "275:   AddInputFromArray<float>(TensorShape({}), {243.0f});",
          "276:   AddInputFromArray<float>(TensorShape({}), {0});",
          "277:   AddInputFromArray<float>(TensorShape({}), {255.0f});",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:   AddInputFromArray<quint8>(a_quantized.shape(), a_quantized.flat<quint8>());",
          "328:   AddInputFromArray<quint8>(b_quantized.shape(), b_quantized.flat<quint8>());",
          "333:   TF_ASSERT_OK(RunOpKernel());",
          "335:   Tensor expected_float(DT_FLOAT, {a_cols, b_cols});",
          "",
          "[Removed Lines]",
          "329:   AddInputFromArray<float>(TensorShape({1}), {a_min});",
          "330:   AddInputFromArray<float>(TensorShape({1}), {a_max});",
          "331:   AddInputFromArray<float>(TensorShape({1}), {b_min});",
          "332:   AddInputFromArray<float>(TensorShape({1}), {b_max});",
          "",
          "[Added Lines]",
          "367:   AddInputFromArray<float>(TensorShape({}), {a_min});",
          "368:   AddInputFromArray<float>(TensorShape({}), {a_max});",
          "369:   AddInputFromArray<float>(TensorShape({}), {b_min});",
          "370:   AddInputFromArray<float>(TensorShape({}), {b_max});",
          "",
          "---------------"
        ]
      }
    }
  ]
}