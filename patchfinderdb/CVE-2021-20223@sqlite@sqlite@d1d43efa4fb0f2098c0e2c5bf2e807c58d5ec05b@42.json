{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "91654b20166402bbd6214c2c793e4b94459f46fb",
      "candidate_info": {
        "commit_hash": "91654b20166402bbd6214c2c793e4b94459f46fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/91654b20166402bbd6214c2c793e4b94459f46fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix an obsolete comment in the parameter binding logic of the CLI. No changes to code.\n\nFossilOrigin-Name: c9c735e201d7900d8c2b766463a6c90f547d9844352719dc650734e25e635fad",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a49f8ec552bede7da731e0571ccf49de1a30e7be3a5673150436c8b411ba6ffc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in"
        ]
      }
    },
    {
      "candidate_hash": "b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
      "candidate_info": {
        "commit_hash": "b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1c479b61d5ae2d675f3ea6521a8abb6515e52af",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Fix an fts3 assert() that could fail when operating on a database containing corrupt records.\n\nFossilOrigin-Name: 7c52f5478f9ecf5c078208759143ae9de43c1bf191dfcd74acb8bd169d4dc883",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2482: ){",
          "2484:   if( bDescIdx==0 || *pbFirst==0 ){",
          "2485:     iWrite = iVal - *piPrev;",
          "2486:   }else{",
          "2487:     iWrite = *piPrev - iVal;",
          "2488:   }",
          "2489:   assert( *pbFirst || *piPrev==0 );",
          "2490:   assert_fts3_nc( *pbFirst==0 || iWrite>0 );",
          "",
          "[Removed Lines]",
          "2483:   sqlite3_int64 iWrite;",
          "2491:   assert( *pbFirst==0 || iWrite>=0 );",
          "",
          "[Added Lines]",
          "2483:   sqlite3_uint64 iWrite;",
          "2485:     assert_fts3_nc( *pbFirst==0 || iVal>=*piPrev );",
          "2488:     assert_fts3_nc( *piPrev>=iVal );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc6a43e7ee6353b9ef3dea4309c77e170a1c798eefcfaa7636bf5a93e51c47ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "5546:   SELECT (matchinfo(null)) FROM t1 WHERE t1 MATCH 'ee*e*e*e*e*e*e*Re*e*e*e**'",
          "5547: } {1 {database disk image is malformed}}",
          "5549: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5549: #-------------------------------------------------------------------------",
          "5550: #",
          "5551: reset_db",
          "5552: do_execsql_test 31.0 {",
          "5553: CREATE VIRTUAL TABLE t1 USING fts3(a,b,c);",
          "5554: INSERT INTO t1_segdir VALUES(0,0,0,0,'0 592',X'00016dcb048ce6fbd3b2d68bfebf
          "5555: INSERT INTO t1_segdir VALUES(0,1,0,0,'0 18',X'00026d6d0d8ee6fbd3b2d68bfe7f01020200');",
          "5556: }",
          "5558: do_catchsql_test 31.1 {",
          "5559:   SELECT (matchinfo(t1, c ) ) FROM t1 WHERE t1 MATCH 'M*M*M*M*';",
          "5560: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38dfbdae8a61dd16987d93a6a4bfe0001eab7b3d",
      "candidate_info": {
        "commit_hash": "38dfbdae8a61dd16987d93a6a4bfe0001eab7b3d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38dfbdae8a61dd16987d93a6a4bfe0001eab7b3d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/vtab.c",
          "test/func5.test"
        ],
        "message": "Do not factor out constant functions into the initialization section at the end of the prepared statement, be cause if they throw an exception, it will abort the statement even if the function is never called.  Better to put constant functions in an OP_Once block.\n\nFossilOrigin-Name: 97a18a5cd701848a9660385e31bffe2c397e3cfe57ccdb876f44d08c00d1d39a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/vtab.c||src/vtab.c",
          "test/func5.test||test/func5.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb5a8a9edd0a4f979d6c30278d4ddc73c651f56ae989b4e5983fca36887c5ceb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4532:       }",
          "4533:     }",
          "4534:   }",
          "4535:   pExpr = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "4542:   }",
          "4544:   return regDest;",
          "4545: }",
          "",
          "[Removed Lines]",
          "4536:   p = sqlite3ExprListAppend(pParse, p, pExpr);",
          "4537:   if( p ){",
          "4538:      struct ExprList_item *pItem = &p->a[p->nExpr-1];",
          "4539:      pItem->reusable = regDest<0;",
          "4540:      if( regDest<0 ) regDest = ++pParse->nMem;",
          "4541:      pItem->u.iConstExprReg = regDest;",
          "4543:   pParse->pConstExpr = p;",
          "",
          "[Added Lines]",
          "4535:   if( regDest<0 ) regDest = ++pParse->nMem;",
          "4537:   if( pExpr!=0 && ExprHasProperty(pExpr, EP_HasFunc) ){",
          "4538:     Vdbe *v = pParse->pVdbe;",
          "4539:     int addr;",
          "4540:     assert( v );",
          "4541:     addr = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "4542:     pParse->okConstFactor = 0;",
          "4543:     if( !pParse->db->mallocFailed ){",
          "4544:       sqlite3ExprCode(pParse, pExpr, regDest);",
          "4545:     }",
          "4546:     pParse->okConstFactor = 1;",
          "4547:     sqlite3ExprDelete(pParse->db, pExpr);",
          "4548:     sqlite3VdbeJumpHere(v, addr);",
          "4549:   }else{",
          "4550:     p = sqlite3ExprListAppend(pParse, p, pExpr);",
          "4551:     if( p ){",
          "4552:        struct ExprList_item *pItem = &p->a[p->nExpr-1];",
          "4553:        pItem->reusable = regDest<0;",
          "4554:        pItem->u.iConstExprReg = regDest;",
          "4555:     }",
          "4556:     pParse->pConstExpr = p;",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1113:   int rc = 0;",
          "1117:   if( pExpr->op!=TK_COLUMN ) return pDef;",
          "1118:   pTab = pExpr->y.pTab;",
          "1119:   if( pTab==0 ) return pDef;",
          "",
          "[Removed Lines]",
          "1116:   if( NEVER(pExpr==0) ) return pDef;",
          "",
          "[Added Lines]",
          "1116:   if( pExpr==0 ) return pDef;",
          "",
          "---------------"
        ],
        "test/func5.test||test/func5.test": [
          "File: test/func5.test -> test/func5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:    WHERE x+counter1('hello')=counter1('hello')+x",
          "54:    ORDER BY +x;",
          "55: } {}",
          "56: do_execsql_test func5-2.3 {",
          "57:   SELECT x, y FROM t2",
          "59:    ORDER BY +x;",
          "60: } {1 2 3 4 5 6 7 8}",
          "",
          "[Removed Lines]",
          "58:    WHERE x+counter2('hello')=counter2('hello')+x",
          "",
          "[Added Lines]",
          "56: set cvalue [db one {SELECT counter2('hello')+1}]",
          "59:    WHERE x+counter2('hello')=$cvalue+x",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1129c423f0cda7c76a3664dd91e84701f431cc5",
      "candidate_info": {
        "commit_hash": "b1129c423f0cda7c76a3664dd91e84701f431cc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b1129c423f0cda7c76a3664dd91e84701f431cc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/gencol1.test"
        ],
        "message": "Fix the handling of NOT NULL constraint violations for generated columns in a REPLACE statement.  Ticket [2399f5986134f79c]\n\nFossilOrigin-Name: 77b1c90add514050fe62f22751362fecacd99f9775346cffc60e09c326e64e10",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5710845b6314f924b490434b4446169f4bb50576aaa940472af68150db16e127",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1518:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1519:           sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1520:             VdbeCoverage(v);",
          "1524:           onError = OE_Abort;",
          "",
          "[Removed Lines]",
          "1521:           sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1522:           sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1523:             VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "1521:           if( (pTab->aCol[i].colFlags & COLFLAG_GENERATED)==0 ){",
          "1522:             sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1523:             sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1524:               VdbeCoverage(v);",
          "1525:           }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   SELECT id,x,'|' FROM t1a ORDER BY id;",
          "206: } {1 1 | 3 7 |}",
          "208: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: do_catchsql_test gencol1-6.10 {",
          "209:   DROP TABLE IF EXISTS t0;",
          "210:   CREATE TABLE t0(c0 NOT NULL AS(c1), c1);",
          "211:   REPLACE INTO t0(c1) VALUES(NULL);",
          "212: } {1 {NOT NULL constraint failed: t0.c0}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5415ab49b48be86772557e6e03572ec2600398e7",
      "candidate_info": {
        "commit_hash": "5415ab49b48be86772557e6e03572ec2600398e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5415ab49b48be86772557e6e03572ec2600398e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix an uninitialized variable in the newly enhanced \".output\" command of the CLI.\n\nFossilOrigin-Name: 65c6c26bb48d5347ce53bb3607de3a03a5a03946b232d35e46a20533f86750f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8789368b91fb5b7477bdba3a953412fc3839b4894443b65186f7b8f79f6369c9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8346:     int i;",
          "8347:     int eMode = 0;",
          "8348:     int bBOM = 0;",
          "8351:     if( c=='e' ){",
          "8352:       eMode = 'x';",
          "",
          "[Removed Lines]",
          "8349:     int bOnce;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}