{
  "cve_id": "CVE-2014-8481",
  "cve_desc": "The instruction decoder in arch/x86/kvm/emulate.c in the KVM subsystem in the Linux kernel before 3.18-rc2 does not properly handle invalid instructions, which allows guest OS users to cause a denial of service (NULL pointer dereference and host OS crash) via a crafted application that triggers (1) an improperly fetched instruction or (2) an instruction that occupies too many bytes.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-8480.",
  "repo": "torvalds/linux",
  "patch_hash": "a430c9166312e1aa3d80bce32374233bdbfeba32",
  "patch_info": {
    "commit_hash": "a430c9166312e1aa3d80bce32374233bdbfeba32",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/a430c9166312e1aa3d80bce32374233bdbfeba32",
    "files": [
      "arch/x86/kvm/emulate.c"
    ],
    "message": "KVM: emulate: avoid accessing NULL ctxt->memopp\n\nA failure to decode the instruction can cause a NULL pointer access.\nThis is fixed simply by moving the \"done\" label as close as possible\nto the return.\n\nThis fixes CVE-2014-8481.\n\nReported-by: Andy Lutomirski <luto@amacapital.net>\nCc: stable@vger.kernel.org\nFixes: 41061cdb98a0bec464278b4db8e894a3121671f5\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c": [
      "File: arch/x86/kvm/emulate.c -> arch/x86/kvm/emulate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4581:  rc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask);",
      "4584:  if (ctxt->rip_relative)",
      "4585:   ctxt->memopp->addr.mem.ea += ctxt->_eip;",
      "4587:  return (rc != X86EMUL_CONTINUE) ? EMULATION_FAILED : EMULATION_OK;",
      "4588: }",
      "",
      "[Removed Lines]",
      "4583: done:",
      "",
      "[Added Lines]",
      "4586: done:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41061cdb98a0bec464278b4db8e894a3121671f5",
      "candidate_info": {
        "commit_hash": "41061cdb98a0bec464278b4db8e894a3121671f5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/41061cdb98a0bec464278b4db8e894a3121671f5",
        "files": [
          "arch/x86/include/asm/kvm_emulate.h",
          "arch/x86/kvm/emulate.c"
        ],
        "message": "KVM: emulate: do not initialize memopp\n\nrip_relative is only set if decode_modrm runs, and if you have ModRM\nyou will also have a memopp.  We can then access memopp unconditionally.\nNote that rip_relative cannot be hoisted up to decode_modrm, or you\nbreak \"mov $0, xyz(%rip)\".\n\nAlso, move typecast on \"out of range value\" of mem.ea to decode_modrm.\n\nTogether, all these optimizations save about 50 cycles on each emulated\ninstructions (4-6%).\n\nSigned-off-by: Bandan Das <bsd@redhat.com>\n[Fix immediate operands with rip-relative addressing. - Paolo]\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "arch/x86/include/asm/kvm_emulate.h||arch/x86/include/asm/kvm_emulate.h",
          "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
          ],
          "candidate": [
            "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/kvm_emulate.h||arch/x86/include/asm/kvm_emulate.h": [
          "File: arch/x86/include/asm/kvm_emulate.h -> arch/x86/include/asm/kvm_emulate.h"
        ],
        "arch/x86/kvm/emulate.c||arch/x86/kvm/emulate.c": [
          "File: arch/x86/kvm/emulate.c -> arch/x86/kvm/emulate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1177:   }",
          "1178:  }",
          "1179:  op->addr.mem.ea = modrm_ea;",
          "1180: done:",
          "1181:  return rc;",
          "1182: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1180:  if (ctxt->ad_bytes != 8)",
          "1181:   ctxt->memop.addr.mem.ea = (u32)ctxt->memop.addr.mem.ea;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4426:  ctxt->memop.addr.mem.seg = ctxt->seg_override;",
          "",
          "[Removed Lines]",
          "4428:  if (ctxt->memop.type == OP_MEM && ctxt->ad_bytes != 8)",
          "4429:   ctxt->memop.addr.mem.ea = (u32)ctxt->memop.addr.mem.ea;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4448:  rc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask);",
          "4450: done:",
          "4452:   ctxt->memopp->addr.mem.ea += ctxt->_eip;",
          "4454:  return (rc != X86EMUL_CONTINUE) ? EMULATION_FAILED : EMULATION_OK;",
          "",
          "[Removed Lines]",
          "4451:  if (ctxt->memopp && ctxt->memopp->type == OP_MEM && ctxt->rip_relative)",
          "",
          "[Added Lines]",
          "4451:  if (ctxt->rip_relative)",
          "",
          "---------------"
        ]
      }
    }
  ]
}