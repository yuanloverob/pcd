{
  "cve_id": "CVE-2016-6506",
  "cve_desc": "epan/dissectors/packet-wsp.c in the WSP dissector in Wireshark 1.12.x before 1.12.13 and 2.x before 2.0.5 allows remote attackers to cause a denial of service (infinite loop) via a crafted packet.",
  "repo": "wireshark/wireshark",
  "patch_hash": "a9d5256890c9189c7461bfce6ed6edce5d861499",
  "patch_info": {
    "commit_hash": "a9d5256890c9189c7461bfce6ed6edce5d861499",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/a9d5256890c9189c7461bfce6ed6edce5d861499",
    "files": [
      "epan/dissectors/packet-wsp.c"
    ],
    "message": "packet-wsp.c: Fix infinite loop in add_headers\n\nBug: 12594\nChange-Id: Id86d1e5f2db12871bc1b345721e79e57192f01e1\nReviewed-on: https://code.wireshark.org/review/16355\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
      "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "379: static expert_field ei_wsp_undecoded_parameter = EI_INIT;",
      "380: static expert_field ei_hdr_x_wap_tod = EI_INIT;",
      "381: static expert_field ei_wsp_trailing_quote = EI_INIT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "382: static expert_field ei_wsp_header_invalid = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4378:     guint8      hdr_id, val_id, codepage = 1;",
      "4379:     gint32      tvb_len                  = tvb_reported_length(tvb);",
      "4380:     gint32      offset                   = 0;",
      "4381:     gint32      hdr_len, hdr_start;",
      "4382:     gint32      val_len, val_start;",
      "4383:     gchar      *hdr_str, *val_str;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4382:     gint32      save_offset;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4401:             hdr_len = 1;",
      "4404:                 offset = WellKnownHeader[hdr_id & 0x7F](wsp_headers, tvb,",
      "4405:                                                         hdr_start, pinfo);",
      "4409:                 offset = WellKnownOpenwaveHeader[hdr_id & 0x7F](wsp_headers,",
      "4410:                                                                 tvb, hdr_start, pinfo);",
      "4411:             }",
      "4413:             codepage = tvb_get_guint8(tvb, offset+1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4406:                 save_offset = offset;",
      "4410:                 if (save_offset <= offset) {",
      "4411:                     expert_add_info(pinfo, ti, &ei_wsp_header_invalid);",
      "4412:                     break;",
      "4413:                 }",
      "4417:                 save_offset = offset;",
      "4421:                 if (save_offset <= offset) {",
      "4422:                     expert_add_info(pinfo, ti, &ei_wsp_header_invalid);",
      "4423:                     break;",
      "4424:                 }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "7142:       { &ei_hdr_x_wap_tod, { \"wsp.header.x_wap_tod.not_text\", PI_PROTOCOL, PI_WARN, \"Should be encoded as a textual value\", EXPFILL }},",
      "7143:       { &ei_wsp_undecoded_parameter, { \"wsp.undecoded_parameter\", PI_UNDECODED, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
      "7144:       { &ei_wsp_trailing_quote, { \"wsp.trailing_quote\", PI_PROTOCOL, PI_WARN, \"Quoted-string value has been encoded with a trailing quote\", EXPFILL }},",
      "7145:     };",
      "7147:     expert_module_t* expert_wsp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7159:       { &ei_wsp_header_invalid, { \"wsp.header_invalid\", PI_MALFORMED, PI_ERROR, \"Malformed header\", EXPFILL }},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eca19ca7f8f186932dbc7ff91747186e2247667b",
      "candidate_info": {
        "commit_hash": "eca19ca7f8f186932dbc7ff91747186e2247667b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/eca19ca7f8f186932dbc7ff91747186e2247667b",
        "files": [
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "packet-wsp.c: Fix infinite loop in add_headers\n\nBug: 12594\nChange-Id: Id86d1e5f2db12871bc1b345721e79e57192f01e1\nReviewed-on: https://code.wireshark.org/review/16355\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit a9d5256890c9189c7461bfce6ed6edce5d861499)\nReviewed-on: https://code.wireshark.org/review/16358\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "376: static expert_field ei_wsp_undecoded_parameter = EI_INIT;",
          "377: static expert_field ei_hdr_x_wap_tod = EI_INIT;",
          "378: static expert_field ei_wsp_trailing_quote = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379: static expert_field ei_wsp_header_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4370:     guint8      hdr_id, val_id, codepage = 1;",
          "4371:     gint32      tvb_len                  = tvb_reported_length(tvb);",
          "4372:     gint32      offset                   = 0;",
          "4373:     gint32      hdr_len, hdr_start;",
          "4374:     gint32      val_len, val_start;",
          "4375:     gchar      *hdr_str, *val_str;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4374:     gint32      save_offset;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4393:             hdr_len = 1;",
          "4396:                 offset = WellKnownHeader[hdr_id & 0x7F](wsp_headers, tvb,",
          "4397:                                                         hdr_start, pinfo);",
          "4401:                 offset = WellKnownOpenwaveHeader[hdr_id & 0x7F](wsp_headers,",
          "4402:                                                                 tvb, hdr_start, pinfo);",
          "4403:             }",
          "4405:             codepage = tvb_get_guint8(tvb, offset+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4398:                 save_offset = offset;",
          "4402:                 if (save_offset <= offset) {",
          "4403:                     expert_add_info(pinfo, ti, &ei_wsp_header_invalid);",
          "4404:                     break;",
          "4405:                 }",
          "4409:                 save_offset = offset;",
          "4413:                 if (save_offset <= offset) {",
          "4414:                     expert_add_info(pinfo, ti, &ei_wsp_header_invalid);",
          "4415:                     break;",
          "4416:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7130:       { &ei_hdr_x_wap_tod, { \"wsp.header.x_wap_tod.not_text\", PI_PROTOCOL, PI_WARN, \"Should be encoded as a textual value\", EXPFILL }},",
          "7131:       { &ei_wsp_undecoded_parameter, { \"wsp.undecoded_parameter\", PI_UNDECODED, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
          "7132:       { &ei_wsp_trailing_quote, { \"wsp.trailing_quote\", PI_PROTOCOL, PI_WARN, \"Quoted-string value has been encoded with a trailing quote\", EXPFILL }},",
          "7133:     };",
          "7135:     expert_module_t* expert_wsp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7147:       { &ei_wsp_header_invalid, { \"wsp.header_invalid\", PI_MALFORMED, PI_ERROR, \"Malformed header\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8148eaee8b2e8c3ed495a49f147bd6433844ee5",
      "candidate_info": {
        "commit_hash": "e8148eaee8b2e8c3ed495a49f147bd6433844ee5",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e8148eaee8b2e8c3ed495a49f147bd6433844ee5",
        "files": [
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "packet-wsp.c: Fix infinite loop in add_headers\n\n# Conflicts:\n#\tepan/dissectors/packet-wsp.c\n\nBug: 12594\nChange-Id: Id86d1e5f2db12871bc1b345721e79e57192f01e1\nReviewed-on: https://code.wireshark.org/review/16355\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit a9d5256890c9189c7461bfce6ed6edce5d861499)\nReviewed-on: https://code.wireshark.org/review/16358\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-on: https://code.wireshark.org/review/16360\n(cherry picked from commit ee37b7dcdbf86e674a0222f35b1ef1db95fd5c9d)\nReviewed-on: https://code.wireshark.org/review/17017\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1743:     guint8      hdr_id, val_id, codepage = 1;",
          "1744:     gint32      tvb_len                  = tvb_length(tvb);",
          "1745:     gint32      offset                   = 0;",
          "1746:     gint32      hdr_len, hdr_start;",
          "1747:     gint32      val_len, val_start;",
          "1748:     gchar      *hdr_str, *val_str;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1746:     gint32      save_offset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1771:                 DebugLog((\"add_headers(code page 0): %s\\n\",",
          "1772:                           val_to_str_ext_const (hdr_id & 0x7f, &vals_field_names_ext, \"Undefined\")));",
          "1773:                 offset = WellKnownHeader[hdr_id & 0x7F](wsp_headers, tvb,",
          "1774:                                                         hdr_start, pinfo);",
          "1778:                 DebugLog((\"add_headers(code page 0x%02x - assumed to be x-up-1): %s\\n\",",
          "1779:                           codepage, val_to_str_ext_const (hdr_id & 0x7f, &vals_openwave_field_names_ext, \"Undefined\")));",
          "1780:                 offset = WellKnownOpenwaveHeader[hdr_id & 0x7F](wsp_headers,",
          "1781:                                                                 tvb, hdr_start, pinfo);",
          "1782:             }",
          "1784:             codepage = tvb_get_guint8(tvb, offset+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1774:                 save_offset = offset;",
          "1778:                 if (save_offset <= offset) {",
          "1779:                     break;",
          "1780:                 }",
          "1786:                 save_offset = offset;",
          "1790:                 if (save_offset <= offset) {",
          "1791:                     break;",
          "1792:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee37b7dcdbf86e674a0222f35b1ef1db95fd5c9d",
      "candidate_info": {
        "commit_hash": "ee37b7dcdbf86e674a0222f35b1ef1db95fd5c9d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/ee37b7dcdbf86e674a0222f35b1ef1db95fd5c9d",
        "files": [
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "packet-wsp.c: Fix infinite loop in add_headers\n\n# Conflicts:\n#\tepan/dissectors/packet-wsp.c\n\nBug: 12594\nChange-Id: Id86d1e5f2db12871bc1b345721e79e57192f01e1\nReviewed-on: https://code.wireshark.org/review/16355\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit a9d5256890c9189c7461bfce6ed6edce5d861499)\nReviewed-on: https://code.wireshark.org/review/16358\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nReviewed-on: https://code.wireshark.org/review/16360",
        "before_after_code_files": [
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1743:     guint8      hdr_id, val_id, codepage = 1;",
          "1744:     gint32      tvb_len                  = tvb_length(tvb);",
          "1745:     gint32      offset                   = 0;",
          "1746:     gint32      hdr_len, hdr_start;",
          "1747:     gint32      val_len, val_start;",
          "1748:     gchar      *hdr_str, *val_str;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1746:     gint32      save_offset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1771:                 DebugLog((\"add_headers(code page 0): %s\\n\",",
          "1772:                           val_to_str_ext_const (hdr_id & 0x7f, &vals_field_names_ext, \"Undefined\")));",
          "1773:                 offset = WellKnownHeader[hdr_id & 0x7F](wsp_headers, tvb,",
          "1774:                                                         hdr_start, pinfo);",
          "1778:                 DebugLog((\"add_headers(code page 0x%02x - assumed to be x-up-1): %s\\n\",",
          "1779:                           codepage, val_to_str_ext_const (hdr_id & 0x7f, &vals_openwave_field_names_ext, \"Undefined\")));",
          "1780:                 offset = WellKnownOpenwaveHeader[hdr_id & 0x7F](wsp_headers,",
          "1781:                                                                 tvb, hdr_start, pinfo);",
          "1782:             }",
          "1784:             codepage = tvb_get_guint8(tvb, offset+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1774:                 save_offset = offset;",
          "1778:                 if (save_offset <= offset) {",
          "1779:                     break;",
          "1780:                 }",
          "1786:                 save_offset = offset;",
          "1790:                 if (save_offset <= offset) {",
          "1791:                     break;",
          "1792:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1f9dc6ad5c1ab09d38e68fe64376eaa8c08e429",
      "candidate_info": {
        "commit_hash": "f1f9dc6ad5c1ab09d38e68fe64376eaa8c08e429",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f1f9dc6ad5c1ab09d38e68fe64376eaa8c08e429",
        "files": [
          "epan/dissectors/packet-mmse.c",
          "epan/dissectors/packet-wap.c",
          "epan/dissectors/packet-wap.h",
          "epan/dissectors/packet-wbxml.c",
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "WAP: check that tvb_get_guintvar does not overflow\n\nBug: 12661\nChange-Id: I2ef857d6be6595fd89f3dbb8d41c1c70d550ad93\nReviewed-on: https://code.wireshark.org/review/16665\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Michael Mann <mmann78@netscape.net>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 2193bea3212d74e2a907152055e27d409b59485e)\nReviewed-on: https://code.wireshark.org/review/16684\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c",
          "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c",
          "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h",
          "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c",
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-mmse.c||epan/dissectors/packet-mmse.c": [
          "File: epan/dissectors/packet-mmse.c -> epan/dissectors/packet-mmse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <epan/packet.h>",
          "38: #include <epan/to_str.h>",
          "39: #include <epan/strutil.h>",
          "40: #include \"packet-wap.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: static gint ett_mmse                    = -1;",
          "249: static gint ett_mmse_hdr_details        = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: static expert_field ei_mmse_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "486: static guint",
          "488: {",
          "489:     guint        field;",
          "",
          "[Removed Lines]",
          "487: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count)",
          "",
          "[Added Lines]",
          "491: get_value_length(tvbuff_t *tvb, guint offset, guint *byte_count, packet_info *pinfo)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "492:     if (field < 31)",
          "496:         (*byte_count)++;",
          "497:     }",
          "498:     return field;",
          "",
          "[Removed Lines]",
          "495:         field = tvb_get_guintvar(tvb, offset, byte_count);",
          "",
          "[Added Lines]",
          "499:         field = tvb_get_guintvar(tvb, offset, byte_count, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "513: static guint",
          "515: {",
          "516:     guint        field;",
          "517:     guint        length;",
          "",
          "[Removed Lines]",
          "514: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval)",
          "",
          "[Added Lines]",
          "518: get_encoded_strval(tvbuff_t *tvb, guint offset, const char **strval, packet_info *pinfo)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:     field = tvb_get_guint8(tvb, offset);",
          "522:     if (field < 32) {",
          "524:         if (length < 2) {",
          "526:         } else {",
          "",
          "[Removed Lines]",
          "523:         length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "527:         length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "772:                     }",
          "773:                     break;",
          "776:                     if (tree) {",
          "777:                         proto_tree_add_string(mmse_tree, hf_mmse_bcc, tvb,",
          "778:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "775:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "779:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "780:                     offset += length;",
          "781:                     break;",
          "784:                     if (tree) {",
          "785:                         proto_tree_add_string(mmse_tree, hf_mmse_cc, tvb,",
          "786:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "783:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "787:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "794:                         if (length == 0x1F) {",
          "795:                             guint length_len = 0;",
          "796:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "798:                             length += 1 + length_len;",
          "799:                         } else {",
          "800:                             length += 1;",
          "",
          "[Removed Lines]",
          "797:                                     &length_len);",
          "",
          "[Added Lines]",
          "801:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "843:                     field = tvb_get_guint8(tvb, offset + count);",
          "844:                     if (tree) {",
          "845:                         guint            tval;",
          "",
          "[Removed Lines]",
          "842:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "846:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "872:                     field = tvb_get_guint8(tvb, offset + count);",
          "873:                     if (tree) {",
          "874:                         guint            tval;",
          "",
          "[Removed Lines]",
          "871:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "875:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "899:                     if (tree) {",
          "900:                         field = tvb_get_guint8(tvb, offset + count);",
          "901:                         if (field == 0x81) {",
          "",
          "[Removed Lines]",
          "898:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "902:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "904:                                     \"<insert address>\");",
          "905:                         } else {",
          "906:                             (void) get_encoded_strval(tvb, offset + count + 1,",
          "908:                             proto_tree_add_string(mmse_tree, hf_mmse_from, tvb,",
          "909:                                     offset-1, length + count + 1, strval);",
          "910:                         }",
          "",
          "[Removed Lines]",
          "907:                                                       &strval);",
          "",
          "[Added Lines]",
          "911:                                                       &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "990:                         if (length == 0x1F) {",
          "991:                             guint length_len = 0;",
          "992:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "994:                             length += 1 + length_len;",
          "995:                         } else {",
          "996:                             length += 1;",
          "",
          "[Removed Lines]",
          "993:                                     &length_len);",
          "",
          "[Added Lines]",
          "997:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1002:                                     \"<Undecoded value for m-mbox-delete-conf>\");",
          "1003:                         }",
          "1004:                     } else {",
          "1006:                         if (tree) {",
          "1007:                             proto_tree_add_string(mmse_tree,",
          "1008:                                     hf_mmse_response_text, tvb, offset - 1,",
          "",
          "[Removed Lines]",
          "1005:                         length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1009:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1026:                     }",
          "1027:                     break;",
          "1030:                     if (tree) {",
          "1031:                         proto_tree_add_string(mmse_tree, hf_mmse_subject, tvb,",
          "1032:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "1029:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1033:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1034:                     offset += length;",
          "1035:                     break;",
          "1038:                     if (tree) {",
          "1039:                         proto_tree_add_string(mmse_tree, hf_mmse_to, tvb,",
          "1040:                                 offset - 1, length + 1, strval);",
          "",
          "[Removed Lines]",
          "1037:                     length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1041:                     length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1059:                         if (length == 0x1F) {",
          "1060:                             guint length_len = 0;",
          "1061:                             length = tvb_get_guintvar(tvb, offset + 1,",
          "1063:                             length += 1 + length_len;",
          "1064:                         } else {",
          "1065:                             length += 1;",
          "",
          "[Removed Lines]",
          "1062:                                     &length_len);",
          "",
          "[Added Lines]",
          "1066:                                     &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1072:                         }",
          "1073:                     } else {",
          "1076:                         if (tree) {",
          "1077:                             proto_tree_add_string(mmse_tree,",
          "1078:                                     hf_mmse_retrieve_text, tvb, offset - 1,",
          "",
          "[Removed Lines]",
          "1075:                         length = get_encoded_strval(tvb, offset, &strval);",
          "",
          "[Added Lines]",
          "1079:                         length = get_encoded_strval(tvb, offset, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1104:                     field = tvb_get_guint8(tvb, offset + count);",
          "1105:                     if (tree) {",
          "1106:                         guint            tval;",
          "",
          "[Removed Lines]",
          "1103:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1107:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1142:                     break;",
          "1143:                 case MM_PREV_SENT_BY_HDR:",
          "1146:                     if (tree) {",
          "1147:                         guint32 fwd_count, count1, count2;",
          "1148:                         proto_tree *subtree = NULL;",
          "",
          "[Removed Lines]",
          "1145:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1149:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1152:                             &count1);",
          "1154:                         count2 = get_encoded_strval(tvb,",
          "1157:                         tii = proto_tree_add_string_format(mmse_tree,",
          "1158:                                 hf_mmse_prev_sent_by,",
          "",
          "[Removed Lines]",
          "1155:                                 offset + count + count1, &strval);",
          "",
          "[Added Lines]",
          "1159:                                 offset + count + count1, &strval, pinfo);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1173:                     break;",
          "1174:                 case MM_PREV_SENT_DATE_HDR:",
          "1177:                     if (tree) {",
          "1178:                         guint32 fwd_count, count1, count2;",
          "1179:                         guint            tval;",
          "",
          "[Removed Lines]",
          "1176:                     length = get_value_length(tvb, offset, &count);",
          "",
          "[Added Lines]",
          "1180:                     length = get_value_length(tvb, offset, &count, pinfo);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1241:                                 guint length_len = 0;",
          "1242:                                 length = 1 + tvb_get_guintvar(tvb, offset + 1,",
          "1244:                                 length += length_len;",
          "1246:                                 length = 1 + tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "1243:                                         &length_len);",
          "",
          "[Added Lines]",
          "1247:                                         &length_len, pinfo, &ei_mmse_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1645:         &ett_mmse_hdr_details,",
          "1646:     };",
          "1649:     proto_mmse = proto_register_protocol(\"MMS Message Encapsulation\",",
          "1650:                                          \"MMSE\", \"mmse\");",
          "1653:     proto_register_field_array(proto_mmse, hf, array_length(hf));",
          "1654:     proto_register_subtree_array(ett, array_length(ett));",
          "1655: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1652:     static ei_register_info ei[] = {",
          "1653:         { &ei_mmse_oversized_uintvar, { \"mmse.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "1654:     };",
          "1656:     expert_module_t* expert_mmse;",
          "1666:     expert_mmse = expert_register_protocol(proto_mmse);",
          "1667:     expert_register_field_array(expert_mmse, ei, array_length(ei));",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wap.c||epan/dissectors/packet-wap.c": [
          "File: epan/dissectors/packet-wap.c -> epan/dissectors/packet-wap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: guint",
          "42: {",
          "43:     guint value   = 0;",
          "44:     guint octet;",
          "",
          "[Removed Lines]",
          "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount)",
          "",
          "[Added Lines]",
          "41: tvb_get_guintvar (tvbuff_t *tvb, guint offset, guint *octetCount, packet_info *pinfo, expert_field *ei)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: #endif",
          "71:     }",
          "73:     if (octetCount != NULL)",
          "74:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     if (counter > 5) {",
          "74:         proto_tree_add_expert(NULL, pinfo, ei, tvb, offset, counter);",
          "75:         value = 0;",
          "76:     }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wap.h||epan/dissectors/packet-wap.h": [
          "File: epan/dissectors/packet-wap.h -> epan/dissectors/packet-wap.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <glib.h>",
          "32: #include <epan/packet.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: extern value_string_ext wap_mib_enum_vals_character_sets_ext;",
          "",
          "[Removed Lines]",
          "72: guint tvb_get_guintvar (tvbuff_t *, guint , guint *);",
          "",
          "[Added Lines]",
          "73: guint tvb_get_guintvar (tvbuff_t *, guint , guint *, packet_info *, expert_field *);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wbxml.c||epan/dissectors/packet-wbxml.c": [
          "File: epan/dissectors/packet-wbxml.c -> epan/dissectors/packet-wbxml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175: static expert_field ei_wbxml_data_not_shown = EI_INIT;",
          "176: static expert_field ei_wbxml_content_type_not_supported = EI_INIT;",
          "177: static expert_field ei_wbxml_content_type_disabled = EI_INIT;",
          "180: static gboolean skip_wbxml_token_mapping = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: static expert_field ei_wbxml_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "270: static char *",
          "271: default_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "273: {",
          "275:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "277:  return str;",
          "",
          "[Removed Lines]",
          "267: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *);",
          "268: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *);",
          "272:      guint8 token _U_, guint8 codepage _U_, guint32 *length)",
          "274:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "268: typedef char * (* opaque_token_func_ptr)(tvbuff_t *, guint32, guint8, guint8, guint32 *, packet_info *);",
          "269: typedef char * (* opaque_literal_func_ptr)(tvbuff_t *, guint32, const char *, guint8, guint32 *, packet_info *);",
          "273:      guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "275:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280: static char *",
          "281: default_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "283: {",
          "285:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "287:  return str;",
          "",
          "[Removed Lines]",
          "282:       const char *token _U_, guint8 codepage _U_, guint32 *length)",
          "284:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "283:       const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "285:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290: static char *",
          "291: default_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "293: {",
          "295:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "297:  return str;",
          "",
          "[Removed Lines]",
          "292:       guint8 token _U_, guint8 codepage _U_, guint32 *length)",
          "294:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "293:       guint8 token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "295:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "300: static char *",
          "301: default_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "303: {",
          "305:  char *str = wmem_strdup_printf(wmem_packet_scope(), \"(%u bytes of opaque data)\", data_len);",
          "307:  return str;",
          "",
          "[Removed Lines]",
          "302:        const char *token _U_, guint8 codepage _U_, guint32 *length)",
          "304:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "303:        const char *token _U_, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "305:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "443: static char *",
          "444: wv_csp10_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "446: {",
          "448:  char *str = NULL;",
          "450:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "445:       guint8 token, guint8 codepage, guint32 *length)",
          "447:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "446:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "448:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "506: static char *",
          "507: wv_csp10_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "509: {",
          "511:  char *str = NULL;",
          "513:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "508:        const char *token, guint8 codepage _U_, guint32 *length)",
          "510:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "509:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "511:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "541: static char *",
          "542: wv_csp11_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "544: {",
          "546:  char *str = NULL;",
          "548:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "543:       guint8 token, guint8 codepage, guint32 *length)",
          "545:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "544:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "546:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "613: static char *",
          "614: wv_csp11_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "616: {",
          "618:  char *str = NULL;",
          "620:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "615:        const char *token, guint8 codepage _U_, guint32 *length)",
          "617:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "616:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "618:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "650: static char *",
          "651: wv_csp12_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "653: {",
          "655:  char *str = NULL;",
          "657:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "652:       guint8 token, guint8 codepage, guint32 *length)",
          "654:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "653:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "655:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "733: static char *",
          "734: wv_csp12_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "736: {",
          "738:  char *str = NULL;",
          "740:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "735:        const char *token, guint8 codepage _U_, guint32 *length)",
          "737:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "736:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "738:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "771: static char *",
          "772: wv_csp13_opaque_binary_tag(tvbuff_t *tvb, guint32 offset,",
          "774: {",
          "776:  char *str = NULL;",
          "778:  switch (codepage)",
          "",
          "[Removed Lines]",
          "773:       guint8 token, guint8 codepage, guint32 *length)",
          "775:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "774:       guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "776:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "910: static char *",
          "911: wv_csp13_opaque_literal_tag(tvbuff_t *tvb, guint32 offset,",
          "913: {",
          "915:  char *str = NULL;",
          "917:  if ( token && ( (strcmp(token, \"Code\") == 0)",
          "",
          "[Removed Lines]",
          "912:        const char *token, guint8 codepage _U_, guint32 *length)",
          "914:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "913:        const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "915:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "968: static char *",
          "969: sic10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "971: {",
          "973:  char *str = NULL;",
          "975:  if ( token && ( (strcmp(token, \"created\") == 0)",
          "",
          "[Removed Lines]",
          "970:      const char *token, guint8 codepage _U_, guint32 *length)",
          "972:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "971:      const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "973:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "988: static char *",
          "989: sic10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "991: {",
          "993:  char *str = NULL;",
          "995:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "990:     guint8 token, guint8 codepage, guint32 *length)",
          "992:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "991:     guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "993:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1018: static char *",
          "1019: emnc10_opaque_literal_attr(tvbuff_t *tvb, guint32 offset,",
          "1021: {",
          "1023:  char *str = NULL;",
          "1025:  if ( token && (strcmp(token, \"timestamp\") == 0) )",
          "",
          "[Removed Lines]",
          "1020:       const char *token, guint8 codepage _U_, guint32 *length)",
          "1022:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "1021:       const char *token, guint8 codepage _U_, guint32 *length, packet_info *pinfo)",
          "1023:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1037: static char *",
          "1038: emnc10_opaque_binary_attr(tvbuff_t *tvb, guint32 offset,",
          "1040: {",
          "1042:  char *str = NULL;",
          "1044:  switch (codepage) {",
          "",
          "[Removed Lines]",
          "1039:      guint8 token, guint8 codepage, guint32 *length)",
          "1041:  guint32 data_len = tvb_get_guintvar(tvb, offset, length);",
          "",
          "[Added Lines]",
          "1040:      guint8 token, guint8 codepage, guint32 *length, packet_info *pinfo)",
          "1042:  guint32 data_len = tvb_get_guintvar(tvb, offset, length, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "7049: static guint32",
          "7051:         guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr,",
          "7052:         const wbxml_decoding *map)",
          "7053: {",
          "",
          "[Removed Lines]",
          "7050: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,",
          "",
          "[Added Lines]",
          "7051: parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "7088:       level, off - offset));",
          "7089:    return (off - offset);",
          "7092:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7093:           \"  %3d |  Attr | A %3d    | ENTITY                          |     %s'&#%u;'\",",
          "7094:           level, *codepage_attr, Indent (level), ent);",
          "",
          "[Removed Lines]",
          "7091:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7092:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "7110:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7111:    attr_save_known = 0;",
          "7112:    attr_save_literal = tvb_format_text (tvb,",
          "",
          "[Removed Lines]",
          "7109:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7110:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "7138:    {",
          "7139:     char *s;",
          "7140:     if (map != NULL) {",
          "",
          "[Removed Lines]",
          "7137:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7138:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7155:    off += 1+len;",
          "7156:    break;",
          "7159:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7160:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7161:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "",
          "[Removed Lines]",
          "7158:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7159:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7182:       if (map->opaque_binary_attr) {",
          "7183:        tmp_str = map->opaque_binary_attr(tvb, off + 1,",
          "7185:       } else {",
          "7186:        tmp_str = default_opaque_binary_attr(tvb, off + 1,",
          "7188:       }",
          "7190:       if (map->opaque_literal_tag) {",
          "7191:        tmp_str = map->opaque_literal_attr(tvb, off + 1,",
          "7193:       } else {",
          "7194:        tmp_str = default_opaque_literal_attr(tvb, off + 1,",
          "7196:       }",
          "7197:      }",
          "7198:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "",
          "[Removed Lines]",
          "7184:                attr_save_known, *codepage_attr, &len);",
          "7187:            attr_save_known, *codepage_attr, &len);",
          "7192:                 attr_save_literal, *codepage_attr, &len);",
          "7195:             attr_save_literal, *codepage_attr, &len);",
          "",
          "[Added Lines]",
          "7185:                attr_save_known, *codepage_attr, &len, pinfo);",
          "7188:            attr_save_known, *codepage_attr, &len, pinfo);",
          "7193:                 attr_save_literal, *codepage_attr, &len, pinfo);",
          "7196:             attr_save_literal, *codepage_attr, &len, pinfo);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7200:             level, *codepage_attr, Indent (level), tmp_str);",
          "7201:      off += 1 + len;",
          "7202:     } else {",
          "7204:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7205:             \"  %3d |  Attr | A %3d    | OPAQUE (Opaque data)            |       %s(%u bytes of opaque data)\",",
          "7206:             level, *codepage_attr, Indent (level), idx);",
          "",
          "[Removed Lines]",
          "7203:      idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7204:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7284: static guint32",
          "7286:     guint32 str_tbl, guint8 *level, guint8 *codepage_stag, guint8 *codepage_attr,",
          "7287:     const wbxml_decoding *map)",
          "7288: {",
          "",
          "[Removed Lines]",
          "7285: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,",
          "",
          "[Added Lines]",
          "7286: parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint32 offset,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7336:    DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));",
          "7337:    return (off - offset);",
          "7340:    proto_tree_add_uint_format(tree, hf_wbxml_entity, tvb, off, 1+len, ent,",
          "7341:           \"  %3d | Tag   | T %3d    | ENTITY                          | %s'&#%u;'\",",
          "",
          "[Removed Lines]",
          "7339:    ent = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7340:    ent = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "7369:    proto_tree_add_none_format(tree, hf_wbxml_pi_xml, tvb, off, 1,",
          "7370:           \"  %3d | Tag   | T %3d    | PI (XML Processing Instruction) | %s<?xml\",",
          "7373:           str_tbl, *level, codepage_attr, map);",
          "7375:    off += len;",
          "",
          "[Removed Lines]",
          "7372:    len = parse_wbxml_attribute_list_defined (tree, tvb, off,",
          "",
          "[Added Lines]",
          "7373:    len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo, off,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "7392:    {",
          "7393:     char *s;",
          "7394:     if (map)",
          "",
          "[Removed Lines]",
          "7391:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7392:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "7410:    off += 1+len;",
          "7411:    break;",
          "7414:    str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7415:    str = tvb_format_text (tvb, str_tbl+idx, str_len-1);",
          "7416:    proto_tree_add_string_format(tree, hf_wbxml_str_t, tvb, off, 1+len, str,",
          "",
          "[Removed Lines]",
          "7413:    idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7414:    idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "7437:       if (map->opaque_binary_tag) {",
          "7438:        tmp_str = map->opaque_binary_tag(tvb, off + 1,",
          "7440:       } else {",
          "7441:        tmp_str = default_opaque_binary_tag(tvb, off + 1,",
          "7443:       }",
          "7445:       if (map->opaque_literal_tag) {",
          "7446:        tmp_str = map->opaque_literal_tag(tvb, off + 1,",
          "7448:       } else {",
          "7449:        tmp_str = default_opaque_literal_tag(tvb, off + 1,",
          "7451:       }",
          "7452:      }",
          "7453:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len, NULL,",
          "",
          "[Removed Lines]",
          "7439:                tag_save_known, *codepage_stag, &len);",
          "7442:            tag_save_known, *codepage_stag, &len);",
          "7447:                 tag_save_literal, *codepage_stag, &len);",
          "7450:             tag_save_literal, *codepage_stag, &len);",
          "",
          "[Added Lines]",
          "7440:                tag_save_known, *codepage_stag, &len, pinfo);",
          "7443:            tag_save_known, *codepage_stag, &len, pinfo);",
          "7448:                 tag_save_literal, *codepage_stag, &len, pinfo);",
          "7451:             tag_save_literal, *codepage_stag, &len, pinfo);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "7456:      off += 1 + len;",
          "7457:     } else {",
          "7459:      proto_tree_add_bytes_format(tree, hf_wbxml_opaque_data, tvb, off, 1 + len + idx, NULL,",
          "7460:            \"  %3d | Tag   | T %3d    | OPAQUE (Opaque data)            | %s(%u bytes of opaque data)\",",
          "",
          "[Removed Lines]",
          "7458:      idx = tvb_get_guintvar (tvb, off+1, &len);",
          "",
          "[Added Lines]",
          "7459:      idx = tvb_get_guintvar (tvb, off+1, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "7491:    tag_len = 0;",
          "7493:     DebugLog((\"STAG: LITERAL tag (peek = 0x%02X, off = %u) - TableRef follows!\\n\", peek, off));",
          "7495:     str_len = tvb_strsize (tvb, str_tbl+idx);",
          "7496:     tag_new_literal = (const gchar*)tvb_get_ptr (tvb, str_tbl+idx, str_len);",
          "",
          "[Removed Lines]",
          "7494:     idx = tvb_get_guintvar (tvb, off+1, &tag_len);",
          "",
          "[Added Lines]",
          "7495:     idx = tvb_get_guintvar (tvb, off+1, &tag_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7521:      (*level)++;",
          "7523:                level, codepage_stag, codepage_attr, map);",
          "7524:      off += len;",
          "",
          "[Removed Lines]",
          "7522:      len = parse_wbxml_tag_defined (tree, tvb, off, str_tbl,",
          "",
          "[Added Lines]",
          "7523:      len = parse_wbxml_tag_defined (tree, tvb, pinfo, off, str_tbl,",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7548:        off += 1 + tag_len;",
          "7549:       }",
          "7551:              off, str_tbl, *level, codepage_attr, map);",
          "7553:       off += len;",
          "",
          "[Removed Lines]",
          "7550:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7551:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "7596:              Indent (*level), tag_new_literal);",
          "7598:       off++;",
          "7600:              off, str_tbl, *level, codepage_attr, map);",
          "7602:       off += len;",
          "",
          "[Removed Lines]",
          "7599:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7600:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "7615:              \"  %3d | Tag   | T %3d    | LITERAL_A  (Literal Tag)   (A.) | %s<%s\",",
          "7617:       off += 1 + tag_len;",
          "7619:              off, str_tbl, *level, codepage_attr, map);",
          "7621:       off += len;",
          "",
          "[Removed Lines]",
          "7618:       len = parse_wbxml_attribute_list_defined (tree, tvb,",
          "",
          "[Added Lines]",
          "7619:       len = parse_wbxml_attribute_list_defined (tree, tvb, pinfo,",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "7722:  if (! publicid) {",
          "7725:   publicid_len += len;",
          "7726:  }",
          "7727:  offset = 1 + publicid_len;",
          "",
          "[Removed Lines]",
          "7721:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len);",
          "7724:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len);",
          "",
          "[Added Lines]",
          "7722:  publicid = tvb_get_guintvar(tvb, 1, &publicid_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "7725:   publicid_index = tvb_get_guintvar (tvb, 1+publicid_len, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "7740:   offset += charset_len;",
          "7741:   break;",
          "",
          "[Removed Lines]",
          "7739:   charset = tvb_get_guintvar (tvb, offset, &charset_len);",
          "",
          "[Added Lines]",
          "7740:   charset = tvb_get_guintvar (tvb, offset, &charset_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "7746:  }",
          "",
          "[Removed Lines]",
          "7749:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len);",
          "",
          "[Added Lines]",
          "7750:  tvb_get_guintvar (tvb, offset, &str_tbl_len_len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "7794:   offset += charset_len;",
          "7795:  }",
          "",
          "[Removed Lines]",
          "7797:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len);",
          "",
          "[Added Lines]",
          "7798:  str_tbl_len = tvb_get_guintvar (tvb, offset, &len, pinfo, &ei_wbxml_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "7854:  len = parse_wbxml_tag_defined (tag_tree,",
          "7856:        &codepage_attr, content_map);",
          "7857: }",
          "",
          "[Removed Lines]",
          "7855:        tvb, offset, str_tbl, &level, &codepage_stag,",
          "",
          "[Added Lines]",
          "7856:        tvb, pinfo, offset, str_tbl, &level, &codepage_stag,",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "8099:   { &ei_wbxml_data_not_shown, { \"wbxml.data_not_shown\", PI_PROTOCOL, PI_NOTE, \"Data representation not shown (edit WBXML preferences to show)\", EXPFILL }},",
          "8100:   { &ei_wbxml_content_type_not_supported, { \"wbxml.content_type.not_supported\", PI_UNDECODED, PI_WARN, \"Rendering of this content type not (yet) supported\", EXPFILL }},",
          "8101:   { &ei_wbxml_content_type_disabled, { \"wbxml.content_type.disabled\", PI_PROTOCOL, PI_NOTE, \"Rendering of this content type has been disabled (edit WBXML preferences to enable)\", EXPFILL }},",
          "8102:  };",
          "8104:  expert_module_t* expert_wbxml;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8103:   { &ei_wbxml_oversized_uintvar, { \"wbxml.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377: static expert_field ei_hdr_x_wap_tod = EI_INIT;",
          "378: static expert_field ei_wsp_trailing_quote = EI_INIT;",
          "379: static expert_field ei_wsp_header_invalid = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: static expert_field ei_wsp_oversized_uintvar = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1288: #define is_uri_value(x)             is_text_string(x)",
          "1290: #define get_uintvar_integer(val,tvb,start,len,ok) \\",
          "1292:     if (len>5) ok = FALSE; else ok = TRUE;",
          "1293: #define get_short_integer(val,tvb,start,len,ok) \\",
          "1294:     val = tvb_get_guint8(tvb,start); \\",
          "",
          "[Removed Lines]",
          "1291:     val = tvb_get_guintvar(tvb,start,&len); \\",
          "",
          "[Added Lines]",
          "1292:     val = tvb_get_guintvar(tvb,start,&len, pinfo, &ei_wsp_oversized_uintvar); \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1436:     } else { /* val_start points to 1st byte of length field */ \\",
          "1437:         if (val_id == 0x1F) { /* Value Length = guintvar */ \\",
          "1439:             val_len_len++; /* 0x1F length indicator byte */ \\",
          "1440:         } else { /* Short length followed by Len data octets */ \\",
          "1441:             val_len = tvb_get_guint8(tvb, offset); \\",
          "",
          "[Removed Lines]",
          "1438:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len); \\",
          "",
          "[Added Lines]",
          "1439:             val_len = tvb_get_guintvar(tvb, val_start + 1, &val_len_len, pinfo, &ei_wsp_oversized_uintvar); \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4521:             tvb, 0, 1, version);",
          "4525:     proto_tree_add_uint(subtree, hf_sir_app_id_list_len,",
          "4526:             tvb, 1, len, val_len);",
          "4527:     offset = 1 + len;",
          "",
          "[Removed Lines]",
          "4524:     val_len = tvb_get_guintvar(tvb, 1, &len);",
          "",
          "[Added Lines]",
          "4525:     val_len = tvb_get_guintvar(tvb, 1, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4531:     offset += val_len;",
          "4535:     proto_tree_add_uint(subtree, hf_sir_wsp_contact_points_len,",
          "4536:             tvb, offset, len, val_len);",
          "4537:     offset += len;",
          "",
          "[Removed Lines]",
          "4534:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4535:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4546:     offset += val_len;",
          "4550:     proto_tree_add_uint(subtree, hf_sir_contact_points_len,",
          "4551:             tvb, offset, len, val_len);",
          "4552:     offset += len;",
          "",
          "[Removed Lines]",
          "4549:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4550:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4557:     offset += val_len;",
          "4561:     proto_tree_add_uint(subtree, hf_sir_protocol_options_len,",
          "4562:             tvb, offset, len, val_len);",
          "4563:     offset += len;",
          "",
          "[Removed Lines]",
          "4560:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4561:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4567:     val_len_save = val_len;",
          "4568:     for (i = 0; i < val_len_save; i++) {",
          "4570:         proto_tree_add_uint(subtree, hf_sir_protocol_options,",
          "4571:                 tvb, offset, len, val_len);",
          "4572:         offset += len;",
          "4573:     }",
          "4577:     proto_tree_add_uint(subtree, hf_sir_prov_url_len,",
          "4578:             tvb, offset, len, val_len);",
          "4579:     offset += len;",
          "",
          "[Removed Lines]",
          "4569:         val_len = tvb_get_guintvar(tvb, offset, &len);",
          "4576:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4570:         val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "4577:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4583:     offset += val_len;",
          "4587:     proto_tree_add_uint(subtree, hf_sir_cpi_tag_len,",
          "4588:             tvb, offset, len, val_len);",
          "4589:     offset += len;",
          "",
          "[Removed Lines]",
          "4586:     val_len = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "4587:     val_len = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4697:                 offset++;",
          "4698:             } else {",
          "4701:                 proto_tree_add_uint (wsp_tree,",
          "4702:                         hf_wsp_server_session_id,",
          "4703:                         tvb, offset, count, value);",
          "",
          "[Removed Lines]",
          "4700:                 value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4701:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4705:                 offset += count;",
          "4706:             }",
          "4709:             proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "4710:                     tvb, offset, count, capabilityLength);",
          "4711:             offset += count;",
          "",
          "[Removed Lines]",
          "4708:             capabilityLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4709:             capabilityLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4713:             if (pdut != WSP_PDU_RESUME)",
          "4714:             {",
          "4717:                 proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
          "4718:                         tvb, offset, count, headerLength);",
          "4719:                 offset += count;",
          "",
          "[Removed Lines]",
          "4716:                 headerLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4717:                 headerLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4750:         case WSP_PDU_SUSPEND:",
          "4751:             if (tree) {",
          "4754:                 proto_tree_add_uint (wsp_tree,",
          "4755:                         hf_wsp_server_session_id,",
          "4756:                         tvb, offset, count, value);",
          "",
          "[Removed Lines]",
          "4753:                 value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4754:                 value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4765:         case WSP_PDU_TRACE:",
          "4769:             nextOffset = offset + count;",
          "4770:             add_uri (wsp_tree, pinfo, tvb, offset, nextOffset, proto_ti);",
          "4771:             if (tree) {",
          "",
          "[Removed Lines]",
          "4768:             value = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4769:             value = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4779:         case WSP_PDU_PUT:",
          "4780:             uriStart = offset;",
          "4783:             headerStart = uriStart+count;",
          "4786:             offset = headerStart + count;",
          "4788:             add_uri (wsp_tree, pinfo, tvb, uriStart, offset, proto_ti);",
          "",
          "[Removed Lines]",
          "4782:             uriLength = tvb_get_guintvar (tvb, offset, &count);",
          "4785:             headersLength = tvb_get_guintvar (tvb, headerStart, &count);",
          "",
          "[Added Lines]",
          "4783:             uriLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "4786:             headersLength = tvb_get_guintvar (tvb, headerStart, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4861:         case WSP_PDU_REPLY:",
          "4864:             headerStart = offset + count + 1;",
          "4865:             {",
          "4866:                 guint8 reply_status = tvb_get_guint8(tvb, offset);",
          "",
          "[Removed Lines]",
          "4863:             headersLength = tvb_get_guintvar (tvb, offset+1, &count);",
          "",
          "[Added Lines]",
          "4864:             headersLength = tvb_get_guintvar (tvb, offset+1, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4951:         case WSP_PDU_PUSH:",
          "4952:         case WSP_PDU_CONFIRMEDPUSH:",
          "4955:             headerStart = offset + count;",
          "4957:             proto_tree_add_uint (wsp_tree, hf_wsp_header_length,",
          "",
          "[Removed Lines]",
          "4954:             headersLength = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "4955:             headersLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5083:         guint URILenOffset, guint URIOffset, proto_item *proto_ti)",
          "5084: {",
          "5085:     guint  count  = 0;",
          "5087:     gchar *str;",
          "5089:     proto_tree_add_uint (tree, hf_wsp_header_uri_len,",
          "",
          "[Removed Lines]",
          "5086:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count);",
          "",
          "[Added Lines]",
          "5087:     guint  uriLen = tvb_get_guintvar (tvb, URILenOffset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5175:         capaLen = capaValueLen + len;",
          "5177:         cap_subtree = proto_tree_add_subtree(wsp_capabilities, tvb, offset, capaLen, ett_capabilities_entry, &cap_item, \"Capability\");",
          "",
          "[Removed Lines]",
          "5174:         capaValueLen = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5175:         capaValueLen = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5233:         switch (peek) {",
          "5234:             case WSP_CAPA_CLIENT_SDU_SIZE:",
          "5236:                 proto_tree_add_uint(cap_subtree, hf_capa_client_sdu_size,",
          "5237:                         tvb, offset, len, value);",
          "5238:                 break;",
          "5239:             case WSP_CAPA_SERVER_SDU_SIZE:",
          "5241:                 proto_tree_add_uint(cap_subtree, hf_capa_server_sdu_size,",
          "5242:                         tvb, offset, len, value);",
          "5243:                 break;",
          "",
          "[Removed Lines]",
          "5235:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "5240:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5236:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "5241:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5340:                         tvb, capaStart, capaLen, ENC_NA);",
          "5341:                 break;",
          "5342:             case WSP_CAPA_CLIENT_MESSAGE_SIZE:",
          "5344:                 proto_tree_add_uint(cap_subtree, hf_capa_client_message_size,",
          "5345:                         tvb, offset, len, value);",
          "5346:                 break;",
          "5347:             case WSP_CAPA_SERVER_MESSAGE_SIZE:",
          "5349:                 proto_tree_add_uint(cap_subtree, hf_capa_server_message_size,",
          "5350:                         tvb, offset, len, value);",
          "5351:                 break;",
          "",
          "[Removed Lines]",
          "5343:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "5348:                 value = tvb_get_guintvar(tvb, offset, &len);",
          "",
          "[Added Lines]",
          "5344:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "5349:                 value = tvb_get_guintvar(tvb, offset, &len, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5478:     heur_dtbl_entry_t       *hdtbl_entry;",
          "5481:     offset += count;",
          "5482:     if (nEntries)",
          "5483:     {",
          "",
          "[Removed Lines]",
          "5480:     nEntries = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "5481:     nEntries = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5487:     while (nEntries--)",
          "5488:     {",
          "5489:         part_start = offset;",
          "5491:         offset += count;",
          "5493:         offset += count;",
          "5495:         ti = proto_tree_add_uint(sub_tree, hf_wsp_mpart, tvb, part_start,",
          "",
          "[Removed Lines]",
          "5490:         HeadersLen = tvb_get_guintvar (tvb, offset, &count);",
          "5492:         DataLen = tvb_get_guintvar (tvb, offset, &count);",
          "",
          "[Added Lines]",
          "5491:         HeadersLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "5493:         DataLen = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7145:       { &ei_wsp_undecoded_parameter, { \"wsp.undecoded_parameter\", PI_UNDECODED, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
          "7146:       { &ei_wsp_trailing_quote, { \"wsp.trailing_quote\", PI_PROTOCOL, PI_WARN, \"Quoted-string value has been encoded with a trailing quote\", EXPFILL }},",
          "7147:       { &ei_wsp_header_invalid, { \"wsp.header_invalid\", PI_MALFORMED, PI_ERROR, \"Malformed header\", EXPFILL }},",
          "7148:     };",
          "7150:     expert_module_t* expert_wsp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7149:       { &ei_wsp_oversized_uintvar, { \"wsp.oversized_uintvar\", PI_MALFORMED, PI_ERROR, \"Uintvar is oversized\", EXPFILL }}",
          "",
          "---------------"
        ]
      }
    }
  ]
}