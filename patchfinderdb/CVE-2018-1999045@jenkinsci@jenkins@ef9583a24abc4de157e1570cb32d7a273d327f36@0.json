{
  "cve_id": "CVE-2018-1999045",
  "cve_desc": "A improper authentication vulnerability exists in Jenkins 2.137 and earlier, 2.121.2 and earlier in SecurityRealm.java, TokenBasedRememberMeServices2.java that allows attackers with a valid cookie to remain logged in even if that feature is disabled.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "ef9583a24abc4de157e1570cb32d7a273d327f36",
  "patch_info": {
    "commit_hash": "ef9583a24abc4de157e1570cb32d7a273d327f36",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/ef9583a24abc4de157e1570cb32d7a273d327f36",
    "files": [
      "core/src/main/java/hudson/security/SecurityRealm.java",
      "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "test/src/test/java/hudson/security/TokenBasedRememberMeServices2Test_SEC996.java"
    ],
    "message": "[SECURITY-996]",
    "before_after_code_files": [
      "core/src/main/java/hudson/security/SecurityRealm.java||core/src/main/java/hudson/security/SecurityRealm.java",
      "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "test/src/test/java/hudson/security/TokenBasedRememberMeServices2Test_SEC996.java||test/src/test/java/hudson/security/TokenBasedRememberMeServices2Test_SEC996.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/security/SecurityRealm.java||core/src/main/java/hudson/security/SecurityRealm.java": [
      "File: core/src/main/java/hudson/security/SecurityRealm.java -> core/src/main/java/hudson/security/SecurityRealm.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "306:         Cookie cookie = new Cookie(ACEGI_SECURITY_HASHED_REMEMBER_ME_COOKIE_KEY,\"\");",
      "307:         cookie.setPath(req.getContextPath().length()>0 ? req.getContextPath() : \"/\");",
      "308:         rsp.addCookie(cookie);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "307:         cookie.setMaxAge(0);",
      "308:         cookie.setSecure(req.isSecure());",
      "309:         cookie.setHttpOnly(true);",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java": [
      "File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java -> core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:     @Override",
      "125:     public Authentication autoLogin(HttpServletRequest request, HttpServletResponse response) {",
      "130:             return null;",
      "131:         }",
      "132:     }",
      "139:             try {",
      "140:                 SET_HTTP_ONLY.invoke(cookie,true);",
      "141:             } catch (IllegalAccessException e) {",
      "",
      "[Removed Lines]",
      "126:         try {",
      "127:             return super.autoLogin(request, response);",
      "128:         } catch (Exception e) {",
      "129:             cancelCookie(request, response, \"Failed to handle remember-me cookie: \"+Functions.printThrowable(e));",
      "134:  @Override",
      "135:  protected Cookie makeValidCookie(String tokenValueBase64, HttpServletRequest request, long maxAge) {",
      "136:   Cookie cookie = super.makeValidCookie(tokenValueBase64, request, maxAge);",
      "138:   if (SET_HTTP_ONLY!=null) {",
      "",
      "[Added Lines]",
      "126:         if(Jenkins.getInstance().isDisableRememberMe()){",
      "127:             cancelCookie(request, response, null);",
      "129:         }else {",
      "130:             try {",
      "131:                 return super.autoLogin(request, response);",
      "132:             } catch (Exception e) {",
      "133:                 cancelCookie(request, response, \"Failed to handle remember-me cookie: \" + Functions.printThrowable(e));",
      "134:                 return null;",
      "135:             }",
      "139:     @Override",
      "140:     protected Cookie makeValidCookie(String tokenValueBase64, HttpServletRequest request, long maxAge) {",
      "141:         Cookie cookie = super.makeValidCookie(tokenValueBase64, request, maxAge);",
      "142:         secureCookie(cookie, request);",
      "143:         return cookie;",
      "144:     }",
      "146:     @Override",
      "147:     protected Cookie makeCancelCookie(HttpServletRequest request) {",
      "148:         Cookie cookie = super.makeCancelCookie(request);",
      "149:         secureCookie(cookie, request);",
      "150:         return cookie;",
      "151:     }",
      "156:     private void secureCookie(Cookie cookie, HttpServletRequest request){",
      "158:         if (SET_HTTP_ONLY!=null) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "159:     private static final HMACConfidentialKey MAC = new HMACConfidentialKey(TokenBasedRememberMeServices.class,\"mac\");",
      "",
      "[Removed Lines]",
      "151:         if (request.isSecure())",
      "152:             cookie.setSecure(true);",
      "153:   return cookie;",
      "154:  }",
      "",
      "[Added Lines]",
      "171:         cookie.setSecure(request.isSecure());",
      "172:     }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/security/TokenBasedRememberMeServices2Test_SEC996.java||test/src/test/java/hudson/security/TokenBasedRememberMeServices2Test_SEC996.java": [
      "File: test/src/test/java/hudson/security/TokenBasedRememberMeServices2Test_SEC996.java -> test/src/test/java/hudson/security/TokenBasedRememberMeServices2Test_SEC996.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.security;",
      "26: import com.gargoylesoftware.htmlunit.util.Cookie;",
      "27: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
      "28: import org.junit.Rule;",
      "29: import org.junit.Test;",
      "30: import org.jvnet.hudson.test.Issue;",
      "31: import org.jvnet.hudson.test.JenkinsRule;",
      "33: import static org.hamcrest.Matchers.is;",
      "34: import static org.hamcrest.Matchers.not;",
      "35: import static org.hamcrest.text.IsEmptyString.isEmptyString;",
      "36: import static org.hamcrest.xml.HasXPath.hasXPath;",
      "37: import static org.junit.Assert.assertNotNull;",
      "38: import static org.junit.Assert.assertThat;",
      "40: public class TokenBasedRememberMeServices2Test_SEC996 {",
      "41:     @Rule",
      "42:     public JenkinsRule j = new JenkinsRule();",
      "44:     @Test",
      "45:     @Issue(\"SECURITY-996\")",
      "46:     public void rememberMeToken_shouldNotBeRead_ifOptionIsDisabled() throws Exception {",
      "47:         j.jenkins.setDisableRememberMe(false);",
      "48:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
      "50:         Cookie rememberMeCookie = null;",
      "51:         {",
      "52:             JenkinsRule.WebClient wc = j.createWebClient();",
      "53:             wc.login(\"alice\", \"alice\", true);",
      "57:             rememberMeCookie = getRememberMeCookie(wc);",
      "58:             assertNotNull(rememberMeCookie);",
      "59:             assertThat(rememberMeCookie.getValue(), not(isEmptyString()));",
      "60:         }",
      "62:         j.jenkins.setDisableRememberMe(true);",
      "63:         {",
      "64:             JenkinsRule.WebClient wc = j.createWebClient();",
      "66:             wc.getCookieManager().addCookie(rememberMeCookie);",
      "69:             XmlPage page = (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");",
      "70:             assertThat(page, hasXPath(\"//name\", not(is(\"alice\"))));",
      "71:         }",
      "73:         j.jenkins.setDisableRememberMe(false);",
      "74:         {",
      "75:             JenkinsRule.WebClient wc = j.createWebClient();",
      "77:             wc.getCookieManager().addCookie(rememberMeCookie);",
      "80:             XmlPage page = (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");",
      "81:             assertThat(page, hasXPath(\"//name\", is(\"alice\")));",
      "82:         }",
      "83:     }",
      "85:     private Cookie getRememberMeCookie(JenkinsRule.WebClient wc) {",
      "86:         return wc.getCookieManager().getCookie(TokenBasedRememberMeServices2.ACEGI_SECURITY_HASHED_REMEMBER_ME_COOKIE_KEY);",
      "87:     }",
      "88: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c490d14c4ffe6162f6e97d25a66612330fe2ace",
      "candidate_info": {
        "commit_hash": "8c490d14c4ffe6162f6e97d25a66612330fe2ace",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/8c490d14c4ffe6162f6e97d25a66612330fe2ace",
        "files": [
          "core/src/main/java/hudson/Util.java",
          "core/src/main/java/hudson/cli/ClientAuthenticationCache.java",
          "core/src/main/java/hudson/search/Search.java",
          "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java",
          "core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java",
          "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
          "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
          "core/src/main/java/jenkins/install/SetupWizard.java",
          "core/src/main/java/jenkins/security/seed/UserSeedChangeListener.java",
          "core/src/main/java/jenkins/security/seed/UserSeedProperty.java",
          "core/src/main/java/jenkins/security/seed/UserSeedSecurityListener.java",
          "core/src/main/resources/jenkins/security/seed/Messages.properties",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.jelly",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.properties",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/help-resetSeed.html",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.css",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.js",
          "test/src/test/java/hudson/cli/ClientAuthenticationCacheWithUserSeedTest.java",
          "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmSEC1245Test.java",
          "test/src/test/java/hudson/security/TokenBasedRememberMeServices2SEC868Test.java",
          "test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java",
          "test/src/test/java/jenkins/security/seed/UserSeedPropertyRestartTest.java",
          "test/src/test/java/jenkins/security/seed/UserSeedPropertyTest.java",
          "test/src/test/java/test/README.md",
          "test/src/test/java/test/security/realm/InMemorySecurityRealm.java"
        ],
        "message": "[SECURITY-901]",
        "before_after_code_files": [
          "core/src/main/java/hudson/Util.java||core/src/main/java/hudson/Util.java",
          "core/src/main/java/hudson/cli/ClientAuthenticationCache.java||core/src/main/java/hudson/cli/ClientAuthenticationCache.java",
          "core/src/main/java/hudson/search/Search.java||core/src/main/java/hudson/search/Search.java",
          "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java||core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java",
          "core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java||core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java",
          "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java||core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
          "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
          "core/src/main/java/jenkins/install/SetupWizard.java||core/src/main/java/jenkins/install/SetupWizard.java",
          "core/src/main/java/jenkins/security/seed/UserSeedChangeListener.java||core/src/main/java/jenkins/security/seed/UserSeedChangeListener.java",
          "core/src/main/java/jenkins/security/seed/UserSeedProperty.java||core/src/main/java/jenkins/security/seed/UserSeedProperty.java",
          "core/src/main/java/jenkins/security/seed/UserSeedSecurityListener.java||core/src/main/java/jenkins/security/seed/UserSeedSecurityListener.java",
          "core/src/main/resources/jenkins/security/seed/Messages.properties||core/src/main/resources/jenkins/security/seed/Messages.properties",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.jelly||core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.jelly",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.properties||core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.properties",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/help-resetSeed.html||core/src/main/resources/jenkins/security/seed/UserSeedProperty/help-resetSeed.html",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.css||core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.css",
          "core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.js||core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.js",
          "test/src/test/java/hudson/cli/ClientAuthenticationCacheWithUserSeedTest.java||test/src/test/java/hudson/cli/ClientAuthenticationCacheWithUserSeedTest.java",
          "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmSEC1245Test.java||test/src/test/java/hudson/security/HudsonPrivateSecurityRealmSEC1245Test.java",
          "test/src/test/java/hudson/security/TokenBasedRememberMeServices2SEC868Test.java||test/src/test/java/hudson/security/TokenBasedRememberMeServices2SEC868Test.java",
          "test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java||test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java",
          "test/src/test/java/jenkins/security/seed/UserSeedPropertyRestartTest.java||test/src/test/java/jenkins/security/seed/UserSeedPropertyRestartTest.java",
          "test/src/test/java/jenkins/security/seed/UserSeedPropertyTest.java||test/src/test/java/jenkins/security/seed/UserSeedPropertyTest.java",
          "test/src/test/java/test/security/realm/InMemorySecurityRealm.java||test/src/test/java/test/security/realm/InMemorySecurityRealm.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/Util.java||core/src/main/java/hudson/Util.java": [
          "File: core/src/main/java/hudson/Util.java -> core/src/main/java/hudson/Util.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: import org.apache.commons.codec.digest.DigestUtils;",
          "91: import org.apache.commons.io.FileUtils;",
          "",
          "[Removed Lines]",
          "90: import org.apache.commons.codec.digest.DigestUtils;",
          "",
          "[Added Lines]",
          "91: import org.kohsuke.stapler.Ancestor;",
          "92: import org.kohsuke.stapler.StaplerRequest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657:         }",
          "1658:     }",
          "1660:     public static final FastDateFormat XS_DATETIME_FORMATTER = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss'Z'\",new SimpleTimeZone(0,\"GMT\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1665:     @Restricted(NoExternalUse.class)",
          "1666:     public static @Nonnull <T> T getNearestAncestorOfTypeOrThrow(@Nonnull StaplerRequest request, @Nonnull Class<T> clazz) {",
          "1667:         T t = request.findAncestorObject(clazz);",
          "1668:         if (t == null) {",
          "1669:             throw new IllegalArgumentException(\"No ancestor of type \" + clazz.getName() + \" in the request\");",
          "1670:         }",
          "1671:         return t;",
          "1672:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/cli/ClientAuthenticationCache.java||core/src/main/java/hudson/cli/ClientAuthenticationCache.java": [
          "File: core/src/main/java/hudson/cli/ClientAuthenticationCache.java -> core/src/main/java/hudson/cli/ClientAuthenticationCache.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.google.common.annotations.VisibleForTesting;",
          "4: import hudson.FilePath;",
          "5: import hudson.remoting.Channel;",
          "6: import hudson.util.Secret;",
          "7: import jenkins.model.Jenkins;",
          "8: import jenkins.security.MasterToSlaveCallable;",
          "9: import org.acegisecurity.Authentication;",
          "10: import org.acegisecurity.AuthenticationException;",
          "11: import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;",
          "12: import org.acegisecurity.userdetails.UserDetails;",
          "13: import org.springframework.dao.DataAccessException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import hudson.model.User;",
          "10: import jenkins.security.seed.UserSeedProperty;",
          "14: import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: import java.io.InputStream;",
          "18: import java.io.OutputStream;",
          "19: import java.io.Serializable;",
          "20: import java.util.Properties;",
          "21: import java.util.logging.Level;",
          "22: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Arrays;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "25: import javax.annotation.Nonnull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import javax.annotation.CheckForNull;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "41:     private static final HMACConfidentialKey MAC = new HMACConfidentialKey(ClientAuthenticationCache.class, \"MAC\");",
          "42:     private static final Logger LOGGER = Logger.getLogger(ClientAuthenticationCache.class.getName());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     private static final String VERIFICATION_FRAGMENT_SEPARATOR = \"_\";",
          "50:     private static final String USERNAME_VERIFICATION_SEPARATOR = \":\";",
          "51:     private static final String VERSION_2 = \"v2\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "78:     public @Nonnull Authentication get() {",
          "80:         String val = props.getProperty(getPropertyKey());",
          "81:         if (val == null) {",
          "82:             LOGGER.finer(\"No stored CLI authentication\");",
          "",
          "[Removed Lines]",
          "79:         Jenkins h = Jenkins.getActiveInstance();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "87:             LOGGER.log(Level.FINE, \"Ignoring insecure stored CLI authentication for {0}\", oldSecret.getPlainText());",
          "88:             return Jenkins.ANONYMOUS;",
          "89:         }",
          "91:         if (idx == -1) {",
          "92:             LOGGER.log(Level.FINE, \"Ignoring malformed stored CLI authentication: {0}\", val);",
          "93:             return Jenkins.ANONYMOUS;",
          "94:         }",
          "95:         String username = val.substring(0, idx);",
          "98:             return Jenkins.ANONYMOUS;",
          "99:         }",
          "100:         try {",
          "102:             LOGGER.log(Level.FINER, \"Loaded stored CLI authentication for {0}\", username);",
          "103:             return new UsernamePasswordAuthenticationToken(u.getUsername(), \"\", u.getAuthorities());",
          "104:         } catch (AuthenticationException | DataAccessException e) {",
          "",
          "[Removed Lines]",
          "90:         int idx = val.lastIndexOf(':');",
          "96:         if (!MAC.checkMac(username, val.substring(idx + 1))) {",
          "97:             LOGGER.log(Level.FINE, \"Ignoring stored CLI authentication due to MAC mismatch: {0}\", val);",
          "101:             UserDetails u = h.getSecurityRealm().loadUserByUsername(username);",
          "",
          "[Added Lines]",
          "98:         int idx = val.lastIndexOf(USERNAME_VERIFICATION_SEPARATOR);",
          "104:         String verificationPart = val.substring(idx + 1);",
          "105:         int indexOfSeparator = verificationPart.indexOf(VERIFICATION_FRAGMENT_SEPARATOR);",
          "106:         if (indexOfSeparator == -1) {",
          "107:             return legacy(username, verificationPart, val);",
          "108:         }",
          "115:         String[] verificationFragments = verificationPart.split(VERIFICATION_FRAGMENT_SEPARATOR);",
          "116:         if (verificationFragments.length < 2) {",
          "117:             LOGGER.log(Level.FINE, \"Ignoring malformed stored CLI authentication verification: {0}\", val);",
          "118:             return Jenkins.ANONYMOUS;",
          "119:         }",
          "122:         String macFragment = verificationFragments[0];",
          "123:         String version = verificationFragments[1];",
          "124:         String[] restOfFragments = Arrays.copyOfRange(verificationFragments, 2, verificationFragments.length);",
          "126:         Authentication authFromVersion;",
          "127:         if (VERSION_2.equals(version)) {",
          "128:             authFromVersion = version2(username, restOfFragments, val);",
          "129:         } else {",
          "130:             LOGGER.log(Level.FINE, \"Unrecognized version for stored CLI authentication verification: {0}\", val);",
          "131:             return Jenkins.ANONYMOUS;",
          "132:         }",
          "134:         if (authFromVersion != null) {",
          "135:             return authFromVersion;",
          "136:         }",
          "138:         return getUserAuthIfValidMac(username, macFragment, val);",
          "139:     }",
          "141:     private Authentication legacy(String username, String mac, String fullValueStored){",
          "142:         return getUserAuthIfValidMac(username, mac, fullValueStored);",
          "143:     }",
          "150:     private @CheckForNull Authentication version2(String username, String[] restOfFragments, String fullValueStored){",
          "151:         if (restOfFragments.length != 1) {",
          "152:             LOGGER.log(Level.FINE, \"Number of fragments invalid for stored CLI authentication verification: {0}\", fullValueStored);",
          "153:             return Jenkins.ANONYMOUS;",
          "154:         }",
          "156:         if (UserSeedProperty.DISABLE_USER_SEED) {",
          "157:             return null;",
          "158:         }",
          "160:         User user = User.getById(username, false);",
          "161:         if (user == null) {",
          "162:             LOGGER.log(Level.FINE, \"User not found for stored CLI authentication verification: {0}\", fullValueStored);",
          "163:             return Jenkins.ANONYMOUS;",
          "164:         }",
          "166:         UserSeedProperty property = user.getProperty(UserSeedProperty.class);",
          "167:         if (property == null) {",
          "168:             LOGGER.log(Level.INFO, \"User does not have a user seed but one is contained in CLI authentication: {0}\", fullValueStored);",
          "169:             return Jenkins.ANONYMOUS;",
          "170:         }",
          "172:         String receivedUserSeed = restOfFragments[0];",
          "173:         String actualUserSeed = property.getSeed();",
          "174:         if (!receivedUserSeed.equals(actualUserSeed)) {",
          "175:             LOGGER.log(Level.FINE, \"Actual user seed does not correspond to the one in stored CLI authentication: {0}\", fullValueStored);",
          "176:             return Jenkins.ANONYMOUS;",
          "177:         }",
          "179:         return null;",
          "180:     }",
          "182:     private Authentication getUserAuthIfValidMac(String username, String mac, String fullValueStored) {",
          "183:         if (!MAC.checkMac(username, mac)) {",
          "184:             LOGGER.log(Level.FINE, \"Ignoring stored CLI authentication due to MAC mismatch: {0}\", fullValueStored);",
          "188:             UserDetails u = Jenkins.get().getSecurityRealm().loadUserByUsername(username);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "131:         UserDetails u = h.getSecurityRealm().loadUserByUsername(a.getName());",
          "132:         String username = u.getUsername();",
          "135:         save();",
          "136:     }",
          "",
          "[Removed Lines]",
          "133:         props.setProperty(getPropertyKey(), username + \":\" + MAC.mac(username));",
          "",
          "[Added Lines]",
          "221:         User user;",
          "222:         if (a instanceof AnonymousAuthenticationToken) {",
          "223:             user = null;",
          "224:         } else {",
          "225:             user = User.getById(a.getName(), false);",
          "226:         }",
          "228:         if (user == null) {",
          "231:             setUsingLegacyMethod(username);",
          "232:             return;",
          "233:         }",
          "235:         String userSeed;",
          "236:         UserSeedProperty userSeedProperty = user.getProperty(UserSeedProperty.class);",
          "237:         if (userSeedProperty == null) {",
          "238:             userSeed = \"no-user-seed\";",
          "239:         } else {",
          "240:             userSeed = userSeedProperty.getSeed();",
          "241:         }",
          "242:         String mac = getMacOf(username);",
          "243:         String validationFragment = String.join(VERIFICATION_FRAGMENT_SEPARATOR, mac, VERSION_2, userSeed);",
          "245:         String propertyValue = username + USERNAME_VERIFICATION_SEPARATOR + validationFragment;",
          "246:         props.setProperty(getPropertyKey(), propertyValue);",
          "251:     @VisibleForTesting",
          "252:     void setUsingLegacyMethod(String username) throws IOException, InterruptedException {",
          "253:         props.setProperty(getPropertyKey(), username + USERNAME_VERIFICATION_SEPARATOR + getMacOf(username));",
          "254:         save();",
          "255:     }",
          "257:     @VisibleForTesting",
          "258:     @Nonnull String getMacOf(@Nonnull String value){",
          "259:         return MAC.mac(value);",
          "260:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/search/Search.java||core/src/main/java/hudson/search/Search.java": [
          "File: core/src/main/java/hudson/search/Search.java -> core/src/main/java/hudson/search/Search.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import java.util.logging.Level;",
          "41: import java.util.logging.Logger;",
          "43: import javax.servlet.ServletException;",
          "45: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import javax.annotation.CheckForNull;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:         return r;",
          "156:     }",
          "159:         List<Ancestor> l = req.getAncestors();",
          "160:         for( int i=l.size()-1; i>=0; i-- ) {",
          "161:             Ancestor a = l.get(i);",
          "",
          "[Removed Lines]",
          "158:     private SearchableModelObject findClosestSearchableModelObject(StaplerRequest req) {",
          "",
          "[Added Lines]",
          "159:     private @CheckForNull SearchableModelObject findClosestSearchableModelObject(StaplerRequest req) {",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java||core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java": [
          "File: core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java -> core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import javax.servlet.http.HttpServletRequest;",
          "32: import javax.servlet.http.HttpServletResponse;",
          "34: import hudson.Util;",
          "35: import jenkins.security.SecurityListener;",
          "36: import org.acegisecurity.Authentication;",
          "37: import org.acegisecurity.AuthenticationException;",
          "38: import org.acegisecurity.ui.webapp.AuthenticationProcessingFilter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import javax.servlet.http.HttpSession;",
          "36: import hudson.model.User;",
          "38: import jenkins.security.seed.UserSeedProperty;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:         request.getSession().invalidate();",
          "91:         SecurityListener.fireLoggedIn(authResult.getName());",
          "92:     }",
          "",
          "[Removed Lines]",
          "90:         request.getSession();",
          "",
          "[Added Lines]",
          "93:         HttpSession newSession = request.getSession();",
          "95:         if (!UserSeedProperty.DISABLE_USER_SEED) {",
          "96:             User user = User.getById(authResult.getName(), true);",
          "98:             UserSeedProperty userSeed = user.getProperty(UserSeedProperty.class);",
          "99:             String sessionSeed = userSeed.getSeed();",
          "100:             newSession.setAttribute(UserSeedProperty.USER_SESSION_SEED, sessionSeed);",
          "101:         }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java||core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java": [
          "File: core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java -> core/src/main/java/hudson/security/HttpSessionContextIntegrationFilter2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.security;",
          "26: import jenkins.security.NonSerializableSecurityContext;",
          "27: import org.acegisecurity.context.HttpSessionContextIntegrationFilter;",
          "28: import org.acegisecurity.context.SecurityContext;",
          "29: import org.acegisecurity.Authentication;",
          "31: import javax.servlet.ServletException;",
          "32: import javax.servlet.ServletRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import hudson.model.User;",
          "28: import jenkins.security.seed.UserSeedProperty;",
          "32: import org.acegisecurity.providers.anonymous.AnonymousAuthenticationToken;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {",
          "51:         HttpSession session = ((HttpServletRequest) req).getSession(false);",
          "55:                 Authentication a = o.getAuthentication();",
          "62:                     }",
          "63:                 }",
          "64:             }",
          "",
          "[Removed Lines]",
          "52:         if(session!=null) {",
          "53:             SecurityContext o = (SecurityContext)session.getAttribute(ACEGI_SECURITY_CONTEXT_KEY);",
          "54:             if(o!=null) {",
          "56:                 if(a!=null) {",
          "57:                     if (a.getPrincipal() instanceof InvalidatableUserDetails) {",
          "58:                         InvalidatableUserDetails ud = (InvalidatableUserDetails) a.getPrincipal();",
          "59:                         if(ud.isInvalid())",
          "61:                             session.setAttribute(ACEGI_SECURITY_CONTEXT_KEY,null);",
          "",
          "[Added Lines]",
          "55:         if (session != null) {",
          "56:             SecurityContext o = (SecurityContext) session.getAttribute(ACEGI_SECURITY_CONTEXT_KEY);",
          "57:             if (o != null) {",
          "59:                 if (a != null) {",
          "60:                     if (isAuthInvalidated(a) || hasInvalidSessionSeed(a, session)) {",
          "61:                         session.setAttribute(ACEGI_SECURITY_CONTEXT_KEY, null);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         super.doFilter(req, res, chain);",
          "68:     }",
          "69: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     private boolean isAuthInvalidated(Authentication authentication) {",
          "71:         if (authentication.getPrincipal() instanceof InvalidatableUserDetails) {",
          "72:             InvalidatableUserDetails ud = (InvalidatableUserDetails) authentication.getPrincipal();",
          "73:             if (ud.isInvalid()) {",
          "75:                 return true;",
          "76:             }",
          "77:         }",
          "79:         return false;",
          "80:     }",
          "82:     private boolean hasInvalidSessionSeed(Authentication authentication, HttpSession session) {",
          "83:         if (UserSeedProperty.DISABLE_USER_SEED || authentication instanceof AnonymousAuthenticationToken) {",
          "84:             return false;",
          "85:         }",
          "87:         User userFromSession = User.getById(authentication.getName(), false);",
          "88:         if (userFromSession == null) {",
          "90:             return false;",
          "91:         }",
          "94:         Object userSessionSeedObject = session.getAttribute(UserSeedProperty.USER_SESSION_SEED);",
          "95:         String actualUserSessionSeed;",
          "96:         if (userSessionSeedObject instanceof String) {",
          "97:             actualUserSessionSeed = (String) userSessionSeedObject;",
          "98:         } else {",
          "100:             return true;",
          "101:         }",
          "103:         UserSeedProperty userSeedProperty = userFromSession.getProperty(UserSeedProperty.class);",
          "104:         if (userSeedProperty == null) {",
          "106:             return true;",
          "107:         }",
          "110:         boolean validSeed = actualUserSessionSeed.equals(userSeedProperty.getSeed());",
          "113:         return !validSeed;",
          "114:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java||core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java": [
          "File: core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java -> core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import hudson.util.Scrambler;",
          "43: import hudson.util.XStream2;",
          "44: import jenkins.security.SecurityListener;",
          "45: import net.sf.json.JSONObject;",
          "46: import org.acegisecurity.Authentication;",
          "47: import org.acegisecurity.AuthenticationException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import jenkins.security.seed.UserSeedProperty;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "628:                     if(data.startsWith(prefix))",
          "629:                         return Details.fromHashedPassword(data.substring(prefix.length()));",
          "630:                 }",
          "631:                 return Details.fromPlainPassword(Util.fixNull(pwd));",
          "632:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633:                 User user = Util.getNearestAncestorOfTypeOrThrow(req, User.class);",
          "635:                 UserSeedProperty userSeedProperty = user.getProperty(UserSeedProperty.class);",
          "636:                 if (userSeedProperty != null) {",
          "637:                     userSeedProperty.renewSeed();",
          "638:                 }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java||core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java": [
          "File: core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java -> core/src/main/java/hudson/security/TokenBasedRememberMeServices2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package hudson.security;",
          "26: import hudson.Functions;",
          "27: import jenkins.model.Jenkins;",
          "28: import jenkins.security.HMACConfidentialKey;",
          "29: import jenkins.security.ImpersonatingUserDetailsService;",
          "30: import jenkins.security.LastGrantedAuthoritiesProperty;",
          "31: import org.acegisecurity.Authentication;",
          "32: import org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices;",
          "33: import org.acegisecurity.userdetails.UserDetails;",
          "34: import org.acegisecurity.userdetails.UserDetailsService;",
          "35: import org.apache.commons.codec.binary.Base64;",
          "36: import org.springframework.util.Assert;",
          "38: import javax.servlet.http.Cookie;",
          "39: import javax.servlet.http.HttpServletRequest;",
          "40: import javax.servlet.http.HttpServletResponse;",
          "41: import java.lang.reflect.InvocationTargetException;",
          "42: import java.lang.reflect.Method;",
          "43: import java.util.Date;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import hudson.model.User;",
          "32: import jenkins.security.seed.UserSeedProperty;",
          "33: import jenkins.util.SystemProperties;",
          "35: import org.acegisecurity.providers.rememberme.RememberMeAuthenticationToken;",
          "40: import org.kohsuke.accmod.Restricted;",
          "41: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "43: import org.springframework.util.StringUtils;",
          "45: import javax.annotation.CheckForNull;",
          "46: import javax.annotation.Nonnull;",
          "52: import java.nio.charset.StandardCharsets;",
          "53: import java.security.MessageDigest;",
          "55: import java.util.concurrent.TimeUnit;",
          "56: import java.util.logging.Level;",
          "57: import java.util.logging.Logger;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: public class TokenBasedRememberMeServices2 extends TokenBasedRememberMeServices {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     private static final Logger LOGGER = Logger.getLogger(TokenBasedRememberMeServices2.class.getName());",
          "76:     @Restricted(NoExternalUse.class)",
          "77:     public static /* Script Console modifiable */ boolean SKIP_TOO_FAR_EXPIRATION_DATE_CHECK =",
          "78:             SystemProperties.getBoolean(TokenBasedRememberMeServices2.class.getName() + \".skipTooFarExpirationDateCheck\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     @Override",
          "72:     protected String makeTokenSignature(long tokenExpiryTime, UserDetails userDetails) {",
          "76:     }",
          "78:     @Override",
          "",
          "[Removed Lines]",
          "73:         String expectedTokenSignature = MAC.mac(userDetails.getUsername() + \":\" + tokenExpiryTime + \":\"",
          "74:                 + \"N/A\" + \":\" + getKey());",
          "75:         return expectedTokenSignature;",
          "",
          "[Added Lines]",
          "97:         String userSeed;",
          "98:         if (UserSeedProperty.DISABLE_USER_SEED) {",
          "99:             userSeed = \"no-seed\";",
          "100:         } else {",
          "101:             User user = User.getById(userDetails.getUsername(), false);",
          "102:             if (user == null) {",
          "103:                 return \"no-user\";",
          "104:             }",
          "105:             UserSeedProperty userSeedProperty = user.getProperty(UserSeedProperty.class);",
          "106:             if (userSeedProperty == null) {",
          "108:                 return \"no-prop\";",
          "109:             }",
          "110:             userSeed = userSeedProperty.getSeed();",
          "111:         }",
          "112:         String token = String.join(\":\", userDetails.getUsername(), Long.toString(tokenExpiryTime), userSeed, getKey());",
          "113:         return MAC.mac(token);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:   Assert.notNull(successfulAuthentication.getCredentials());",
          "108:   Assert.isInstanceOf(UserDetails.class, successfulAuthentication.getPrincipal());",
          "111:   String username = ((UserDetails) successfulAuthentication.getPrincipal()).getUsername();",
          "113:   String signatureValue = makeTokenSignature(expiryTime, (UserDetails)successfulAuthentication.getPrincipal());",
          "",
          "[Removed Lines]",
          "110:   long expiryTime = System.currentTimeMillis() + (tokenValiditySeconds * 1000);",
          "",
          "[Added Lines]",
          "148:   long expiryTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(tokenValiditySeconds);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:             return null;",
          "129:         }else {",
          "130:             try {",
          "132:             } catch (Exception e) {",
          "133:                 cancelCookie(request, response, \"Failed to handle remember-me cookie: \" + Functions.printThrowable(e));",
          "134:                 return null;",
          "",
          "[Removed Lines]",
          "131:                 return super.autoLogin(request, response);",
          "",
          "[Added Lines]",
          "170:                 String rememberMeValue = findRememberMeCookieValue(request, response);",
          "171:                 if (rememberMeValue == null) {",
          "172:                     return null;",
          "173:                 }",
          "174:                 return retrieveAuthFromCookie(request, response, rememberMeValue);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "136:         }",
          "137:     }",
          "139:     @Override",
          "140:     protected Cookie makeValidCookie(String tokenValueBase64, HttpServletRequest request, long maxAge) {",
          "141:         Cookie cookie = super.makeValidCookie(tokenValueBase64, request, maxAge);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     private String findRememberMeCookieValue(HttpServletRequest request, HttpServletResponse response) {",
          "186:         Cookie[] cookies = request.getCookies();",
          "188:         if ((cookies == null) || (cookies.length == 0)) {",
          "189:             return null;",
          "190:         }",
          "192:         for (int i = 0; i < cookies.length; i++) {",
          "193:             if (ACEGI_SECURITY_HASHED_REMEMBER_ME_COOKIE_KEY.equals(cookies[i].getName())) {",
          "194:                 return cookies[i].getValue();",
          "195:             }",
          "196:         }",
          "198:         return null;",
          "199:     }",
          "204:     private @CheckForNull Authentication retrieveAuthFromCookie(HttpServletRequest request, HttpServletResponse response, String cookieValueBase64){",
          "205:         String cookieValue = decodeCookieBase64(cookieValueBase64);",
          "206:         if (cookieValue == null) {",
          "207:             String reason = \"Cookie token was not Base64 encoded; value was '\" + cookieValueBase64 + \"'\";",
          "208:             cancelCookie(request, response, reason);",
          "209:             return null;",
          "210:         }",
          "211:         if (logger.isDebugEnabled()) {",
          "212:             logger.debug(\"Remember-me cookie detected\");",
          "213:         }",
          "215:         String[] cookieTokens = StringUtils.delimitedListToStringArray(cookieValue, \":\");",
          "217:         if (cookieTokens.length != 3) {",
          "218:             cancelCookie(request, response, \"Cookie token did not contain 3 tokens separated by [:]\");",
          "219:             return null;",
          "220:         }",
          "222:         long tokenExpiryTime;",
          "224:         try {",
          "225:             tokenExpiryTime = Long.parseLong(cookieTokens[1]);",
          "226:         }",
          "227:         catch (NumberFormatException nfe) {",
          "228:             cancelCookie(request, response, \"Cookie token[1] did not contain a valid number\");",
          "229:             return null;",
          "230:         }",
          "232:         if (isTokenExpired(tokenExpiryTime)) {",
          "233:             cancelCookie(request, response, \"Cookie token[1] has expired\");",
          "234:             return null;",
          "235:         }",
          "240:         UserDetails userDetails = loadUserDetails(request, response, cookieTokens);",
          "242:         if (userDetails == null) {",
          "243:             cancelCookie(request, response, \"Cookie token[0] contained a username without user associated\");",
          "244:             return null;",
          "245:         }",
          "247:         if (!isValidUserDetails(request, response, userDetails, cookieTokens)) {",
          "248:             return null;",
          "249:         }",
          "251:         String receivedTokenSignature = cookieTokens[2];",
          "252:         String expectedTokenSignature = makeTokenSignature(tokenExpiryTime, userDetails);",
          "254:         boolean tokenValid = MessageDigest.isEqual(",
          "255:                 expectedTokenSignature.getBytes(StandardCharsets.US_ASCII),",
          "256:                 receivedTokenSignature.getBytes(StandardCharsets.US_ASCII)",
          "257:         );",
          "258:         if (!tokenValid) {",
          "259:             cancelCookie(request, response, \"Cookie token[2] contained invalid signature\");",
          "260:             return null;",
          "261:         }",
          "264:         if (logger.isDebugEnabled()) {",
          "265:             logger.debug(\"Remember-me cookie accepted\");",
          "266:         }",
          "268:         RememberMeAuthenticationToken auth = new RememberMeAuthenticationToken(this.getKey(), userDetails,",
          "269:                 userDetails.getAuthorities());",
          "270:         auth.setDetails(authenticationDetailsSource.buildDetails(request));",
          "272:         return auth;",
          "273:     }",
          "278:     private @CheckForNull String decodeCookieBase64(@Nonnull String base64EncodedValue){",
          "279:         for (int j = 0; j < base64EncodedValue.length() % 4; j++) {",
          "280:             base64EncodedValue = base64EncodedValue + \"=\";",
          "281:         }",
          "283:         try {",
          "285:             byte[] decodedPlainValue = java.util.Base64.getDecoder().decode(base64EncodedValue.getBytes(StandardCharsets.UTF_8));",
          "286:             return new String(decodedPlainValue, StandardCharsets.UTF_8);",
          "287:         } catch (IllegalArgumentException e) {",
          "288:             return null;",
          "289:         }",
          "290:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "171:         cookie.setSecure(request.isSecure());",
          "172:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:     @Override",
          "332:     protected boolean isTokenExpired(long tokenExpiryTimeMs) {",
          "333:         long nowMs = System.currentTimeMillis();",
          "334:         long maxExpirationMs = TimeUnit.SECONDS.toMillis(tokenValiditySeconds) + nowMs;",
          "335:         if(!SKIP_TOO_FAR_EXPIRATION_DATE_CHECK && tokenExpiryTimeMs > maxExpirationMs){",
          "338:             long diffMs = tokenExpiryTimeMs - maxExpirationMs;",
          "339:             LOGGER.log(Level.WARNING, \"Attempt to use a cookie with an expiration duration larger than the one configured (delta of: {0} ms)\", diffMs);",
          "340:             return true;",
          "341:         }",
          "343:         if (tokenExpiryTimeMs < nowMs) {",
          "344:             return true;",
          "345:         }",
          "346:         return false;",
          "347:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/install/SetupWizard.java||core/src/main/java/jenkins/install/SetupWizard.java": [
          "File: core/src/main/java/jenkins/install/SetupWizard.java -> core/src/main/java/jenkins/install/SetupWizard.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import javax.servlet.http.HttpServletRequest;",
          "20: import javax.servlet.http.HttpServletRequestWrapper;",
          "21: import javax.servlet.http.HttpServletResponse;",
          "23: import jenkins.util.SystemProperties;",
          "24: import org.acegisecurity.Authentication;",
          "25: import org.acegisecurity.context.SecurityContextHolder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import javax.servlet.http.HttpSession;",
          "24: import jenkins.security.seed.UserSeedProperty;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:                 Authentication a = new UsernamePasswordAuthenticationToken(u.getId(),req.getParameter(\"password1\"));",
          "273:                 a = securityRealm.getSecurityComponents().manager.authenticate(a);",
          "274:                 SecurityContextHolder.getContext().setAuthentication(a);",
          "275:                 CrumbIssuer crumbIssuer = Jenkins.getInstance().getCrumbIssuer();",
          "276:                 JSONObject data = new JSONObject();",
          "277:                 if (crumbIssuer != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:                 HttpSession session = req.getSession(false);",
          "279:                 if (session != null) {",
          "281:                     session.invalidate();",
          "282:                 }",
          "283:                 HttpSession newSession = req.getSession(true);",
          "285:                 UserSeedProperty userSeed = u.getProperty(UserSeedProperty.class);",
          "286:                 String sessionSeed = userSeed.getSeed();",
          "288:                 newSession.setAttribute(UserSeedProperty.USER_SESSION_SEED, sessionSeed);",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/seed/UserSeedChangeListener.java||core/src/main/java/jenkins/security/seed/UserSeedChangeListener.java": [
          "File: core/src/main/java/jenkins/security/seed/UserSeedChangeListener.java -> core/src/main/java/jenkins/security/seed/UserSeedChangeListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.security.seed;",
          "26: import hudson.ExtensionList;",
          "27: import hudson.model.User;",
          "28: import jenkins.security.SecurityListener;",
          "29: import org.apache.tools.ant.ExtensionPoint;",
          "30: import org.kohsuke.accmod.Restricted;",
          "31: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "33: import javax.annotation.Nonnull;",
          "34: import java.util.List;",
          "35: import java.util.logging.Level;",
          "36: import java.util.logging.Logger;",
          "42: @Restricted(NoExternalUse.class)",
          "43: public abstract class UserSeedChangeListener extends ExtensionPoint {",
          "44:     private static final Logger LOGGER = Logger.getLogger(SecurityListener.class.getName());",
          "50:     public abstract void onUserSeedRenewed(@Nonnull User user);",
          "56:     public static void fireUserSeedRenewed(@Nonnull User user) {",
          "57:         for (UserSeedChangeListener l : all()) {",
          "58:             try {",
          "59:                 l.onUserSeedRenewed(user);",
          "60:             }",
          "61:             catch (Exception e) {",
          "62:                 LOGGER.log(Level.WARNING, \"Exception caught during onUserSeedRenewed event\", e);",
          "63:             }",
          "64:         }",
          "65:     }",
          "67:     private static List<UserSeedChangeListener> all() {",
          "68:         return ExtensionList.lookup(UserSeedChangeListener.class);",
          "69:     }",
          "70: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/seed/UserSeedProperty.java||core/src/main/java/jenkins/security/seed/UserSeedProperty.java": [
          "File: core/src/main/java/jenkins/security/seed/UserSeedProperty.java -> core/src/main/java/jenkins/security/seed/UserSeedProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.security.seed;",
          "26: import hudson.BulkChange;",
          "27: import hudson.Extension;",
          "28: import hudson.model.User;",
          "29: import hudson.model.UserProperty;",
          "30: import hudson.model.UserPropertyDescriptor;",
          "31: import hudson.util.HttpResponses;",
          "32: import jenkins.model.Jenkins;",
          "33: import jenkins.security.LastGrantedAuthoritiesProperty;",
          "34: import jenkins.util.SystemProperties;",
          "35: import org.apache.commons.codec.binary.Hex;",
          "36: import org.jenkinsci.Symbol;",
          "37: import org.kohsuke.accmod.Restricted;",
          "38: import org.kohsuke.accmod.restrictions.DoNotUse;",
          "39: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "40: import org.kohsuke.stapler.AncestorInPath;",
          "41: import org.kohsuke.stapler.HttpResponse;",
          "42: import org.kohsuke.stapler.interceptor.RequirePOST;",
          "44: import javax.annotation.Nonnull;",
          "45: import java.io.IOException;",
          "46: import java.security.SecureRandom;",
          "47: import java.util.Objects;",
          "62: @Restricted(NoExternalUse.class)",
          "63: public class UserSeedProperty extends UserProperty {",
          "68:     @Restricted(NoExternalUse.class)",
          "69:     public static /* Script Console modifiable */ boolean DISABLE_USER_SEED = SystemProperties.getBoolean(UserSeedProperty.class.getName() + \".disableUserSeed\");",
          "74:     @Restricted(NoExternalUse.class)",
          "75:     public static /* Script Console modifiable */ boolean HIDE_USER_SEED_SECTION = SystemProperties.getBoolean(UserSeedProperty.class.getName() + \".hideUserSeedSection\");",
          "77:     public static final String USER_SESSION_SEED = \"_JENKINS_SESSION_SEED\";",
          "79:     private static final SecureRandom RANDOM = new SecureRandom();",
          "80:     private static final int SEED_NUM_BYTES = 8;",
          "82:     private String seed;",
          "84:     private UserSeedProperty() {",
          "85:         this.renewSeedInternal();",
          "86:     }",
          "88:     public @Nonnull String getSeed() {",
          "89:         return seed;",
          "90:     }",
          "92:     public void renewSeed() {",
          "93:         this.renewSeedInternal();",
          "95:         UserSeedChangeListener.fireUserSeedRenewed(this.user);",
          "96:     }",
          "98:     private void renewSeedInternal() {",
          "99:         String currentSeed = this.seed;",
          "100:         String newSeed = currentSeed;",
          "101:         while (Objects.equals(newSeed, currentSeed)) {",
          "102:             newSeed = new String(Hex.encodeHex(RANDOM.generateSeed(SEED_NUM_BYTES)));",
          "103:         }",
          "104:         this.seed = newSeed;",
          "105:     }",
          "107:     @Extension",
          "108:     @Symbol(\"userSeed\")",
          "109:     public static final class DescriptorImpl extends UserPropertyDescriptor {",
          "110:         public @Nonnull String getDisplayName() {",
          "111:             return Messages.UserSeedProperty_DisplayName();",
          "112:         }",
          "114:         public UserSeedProperty newInstance(User user) {",
          "115:             return new UserSeedProperty();",
          "116:         }",
          "119:         @Restricted(DoNotUse.class)",
          "120:         public boolean isCurrentUser(@Nonnull User target) {",
          "121:             return Objects.equals(User.current(), target);",
          "122:         }",
          "124:         @RequirePOST",
          "125:         public synchronized HttpResponse doRenewSessionSeed(@AncestorInPath @Nonnull User u) throws IOException {",
          "126:             u.checkPermission(Jenkins.ADMINISTER);",
          "128:             if (DISABLE_USER_SEED) {",
          "129:                 return HttpResponses.error(404, \"User seed feature is disabled\");",
          "130:             }",
          "132:             try (BulkChange bc = new BulkChange(u)) {",
          "133:                 UserSeedProperty p = u.getProperty(UserSeedProperty.class);",
          "134:                 p.renewSeed();",
          "136:                 LastGrantedAuthoritiesProperty lastGranted = u.getProperty(LastGrantedAuthoritiesProperty.class);",
          "137:                 if (lastGranted != null) {",
          "138:                     lastGranted.invalidate();",
          "139:                 }",
          "141:                 bc.commit();",
          "142:             }",
          "144:             return HttpResponses.ok();",
          "145:         }",
          "147:         @Override",
          "148:         public boolean isEnabled() {",
          "149:             return !DISABLE_USER_SEED && !HIDE_USER_SEED_SECTION;",
          "150:         }",
          "151:     }",
          "152: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/security/seed/UserSeedSecurityListener.java||core/src/main/java/jenkins/security/seed/UserSeedSecurityListener.java": [
          "File: core/src/main/java/jenkins/security/seed/UserSeedSecurityListener.java -> core/src/main/java/jenkins/security/seed/UserSeedSecurityListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.security.seed;",
          "26: import hudson.Extension;",
          "27: import hudson.model.User;",
          "28: import jenkins.security.SecurityListener;",
          "29: import org.acegisecurity.userdetails.UserDetails;",
          "30: import org.kohsuke.accmod.Restricted;",
          "31: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "32: import org.kohsuke.stapler.Stapler;",
          "33: import org.kohsuke.stapler.StaplerRequest;",
          "35: import javax.annotation.Nonnull;",
          "36: import javax.servlet.http.HttpSession;",
          "42: @Restricted(NoExternalUse.class)",
          "43: @Extension(ordinal = Integer.MAX_VALUE)",
          "44: public class UserSeedSecurityListener extends SecurityListener {",
          "45:     @Override",
          "46:     protected void loggedIn(@Nonnull String username) {",
          "47:         putUserSeedInSession(username);",
          "48:     }",
          "50:     @Override",
          "51:     protected void authenticated(@Nonnull UserDetails details) {",
          "52:         putUserSeedInSession(details.getUsername());",
          "53:     }",
          "55:     private void putUserSeedInSession(String username) {",
          "56:         StaplerRequest req = Stapler.getCurrentRequest();",
          "57:         if (req == null) {",
          "60:             return;",
          "61:         }",
          "63:         HttpSession session = req.getSession(false);",
          "64:         if (session == null) {",
          "66:             return;",
          "67:         }",
          "69:         if (!UserSeedProperty.DISABLE_USER_SEED) {",
          "70:             User user = User.getById(username, true);",
          "72:             UserSeedProperty userSeed = user.getProperty(UserSeedProperty.class);",
          "73:             if (userSeed == null) {",
          "75:                 return;",
          "76:             }",
          "77:             String sessionSeed = userSeed.getSeed();",
          "79:             session.setAttribute(UserSeedProperty.USER_SESSION_SEED, sessionSeed);",
          "80:         }",
          "81:     }",
          "82: }",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/seed/Messages.properties||core/src/main/resources/jenkins/security/seed/Messages.properties": [
          "File: core/src/main/resources/jenkins/security/seed/Messages.properties -> core/src/main/resources/jenkins/security/seed/Messages.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: UserSeedProperty.DisplayName=Session Termination",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.jelly||core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.jelly": [
          "File: core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.jelly -> core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.jelly",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?jelly escape-by-default='true'?>",
          "2: <j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:f=\"/lib/form\">",
          "3:     <st:adjunct includes=\"jenkins.security.seed.UserSeedProperty.resources\" />",
          "4:     <f:entry field=\"resetSeed\">",
          "5:         <!--",
          "6:             name=OK is a hack until 2.129 where the \"ignore-dirty-panel\" is added,",
          "7:             otherwise the \"there are some modifications on the page\" will appear after redirection",
          "8:         -->",
          "9:         <div class=\"user-seed-panel\" name=\"OK\">",
          "10:             <j:choose>",
          "11:                 <j:when test=\"${descriptor.isCurrentUser(it)}\">",
          "12:                     <span class=\"yui-button\">",
          "13:                         <button type=\"button\" name=\"reset-seed\"",
          "14:                                 onclick=\"return resetSeed(this)\"",
          "15:                                 data-target-url=\"${descriptor.descriptorFullUrl}/renewSessionSeed\"",
          "16:                                 data-confirm=\"${%resetSeed.confirmation}\"",
          "17:                                 data-redirect-url=\"${request.contextPath}/\">",
          "18:                             ${%resetSeed.button}",
          "19:                         </button>",
          "20:                     </span>",
          "21:                 </j:when>",
          "22:                 <j:otherwise>",
          "23:                     <span class=\"yui-button\">",
          "24:                         <button type=\"button\" name=\"reset-seed\"",
          "25:                                 onclick=\"return resetSeed(this)\"",
          "26:                                 data-target-url=\"${descriptor.descriptorFullUrl}/renewSessionSeed\"",
          "27:                                 data-confirm=\"${%resetSeed.confirmation}\">",
          "28:                             ${%resetSeed.button}",
          "29:                         </button>",
          "30:                     </span>",
          "31:                 </j:otherwise>",
          "32:             </j:choose>",
          "33:             <div class=\"display-after-reset\">${%resetSeed.result}</div>",
          "34:         </div>",
          "35:     </f:entry>",
          "36: </j:jelly>",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.properties||core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.properties": [
          "File: core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.properties -> core/src/main/resources/jenkins/security/seed/UserSeedProperty/config.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: resetSeed.button=Terminate All Sessions",
          "2: resetSeed.result=Operation success. All sessions were terminated.",
          "3: resetSeed.confirmation=All connected sessions for this user will be terminated. \\n\\",
          "4:   They will be required to log in again. \\n\\",
          "5:   Are you sure?",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/seed/UserSeedProperty/help-resetSeed.html||core/src/main/resources/jenkins/security/seed/UserSeedProperty/help-resetSeed.html": [
          "File: core/src/main/resources/jenkins/security/seed/UserSeedProperty/help-resetSeed.html -> core/src/main/resources/jenkins/security/seed/UserSeedProperty/help-resetSeed.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <div>",
          "2:     This action will disconnect all connected computers and devices for this user. <br />",
          "3:     The user will be required to log in again before performing any further operations. <br />",
          "4:     <br />",
          "5:     <div class=\"warning\">",
          "6:         API tokens and SSH Public Keys provide additional access mechanisms, which are not impacted by this action. <br />",
          "7:         To revoke all access for this user also revoke these mechanisms.",
          "8:     </div>",
          "9: </div>",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.css||core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.css": [
          "File: core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.css -> core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: .user-seed-panel .seed-message {",
          "25:     margin-bottom: 5px;",
          "26: }",
          "27: .user-seed-panel .display-after-reset {",
          "28:     display: none;",
          "29: }",
          "30: .user-seed-panel .display-after-reset.visible {",
          "31:     display: block;",
          "32:     margin-top: 5px;",
          "33:     margin-bottom: 5px;",
          "34: }",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.js||core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.js": [
          "File: core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.js -> core/src/main/resources/jenkins/security/seed/UserSeedProperty/resources.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: function resetSeed(button){",
          "25:     var userSeedPanel = button.up('.user-seed-panel');",
          "26:     var confirmMessage = button.getAttribute('data-confirm');",
          "27:     var targetUrl = button.getAttribute('data-target-url');",
          "28:     var redirectAfterClick = button.getAttribute('data-redirect-url');",
          "30:     var warningMessage = userSeedPanel.querySelector('.display-after-reset');",
          "31:     if (warningMessage.hasClassName('visible')) {",
          "32:         warningMessage.removeClassName('visible');",
          "33:     }",
          "35:     if (confirm(confirmMessage)) {",
          "36:         new Ajax.Request(targetUrl, {",
          "37:             method: \"post\",",
          "38:             onSuccess: function(rsp, _) {",
          "39:                 if (redirectAfterClick) {",
          "40:                     window.location.href = redirectAfterClick;",
          "41:                 } else {",
          "42:                     if (!warningMessage.hasClassName('visible')) {",
          "43:                         warningMessage.addClassName('visible');",
          "44:                     }",
          "45:                 }",
          "46:             }",
          "47:         });",
          "48:     }",
          "49: }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/ClientAuthenticationCacheWithUserSeedTest.java||test/src/test/java/hudson/cli/ClientAuthenticationCacheWithUserSeedTest.java": [
          "File: test/src/test/java/hudson/cli/ClientAuthenticationCacheWithUserSeedTest.java -> test/src/test/java/hudson/cli/ClientAuthenticationCacheWithUserSeedTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package hudson.cli;",
          "27: import com.google.common.collect.Lists;",
          "28: import hudson.Launcher;",
          "29: import hudson.model.User;",
          "30: import hudson.security.FullControlOnceLoggedInAuthorizationStrategy;",
          "31: import hudson.util.StreamTaskListener;",
          "32: import jenkins.model.Jenkins;",
          "33: import jenkins.security.seed.UserSeedProperty;",
          "34: import org.acegisecurity.Authentication;",
          "35: import org.acegisecurity.providers.UsernamePasswordAuthenticationToken;",
          "36: import org.apache.commons.io.FileUtils;",
          "37: import org.apache.commons.io.output.TeeOutputStream;",
          "38: import org.junit.Rule;",
          "39: import org.junit.Test;",
          "40: import org.junit.rules.TemporaryFolder;",
          "41: import org.jvnet.hudson.test.For;",
          "42: import org.jvnet.hudson.test.Issue;",
          "43: import org.jvnet.hudson.test.JenkinsRule;",
          "44: import org.jvnet.hudson.test.LoggerRule;",
          "45: import test.security.realm.InMemorySecurityRealm;",
          "47: import javax.annotation.CheckForNull;",
          "48: import java.io.ByteArrayOutputStream;",
          "49: import java.io.File;",
          "50: import java.util.Arrays;",
          "51: import java.util.List;",
          "52: import java.util.logging.Level;",
          "54: import static org.hamcrest.CoreMatchers.is;",
          "55: import static org.hamcrest.CoreMatchers.not;",
          "56: import static org.hamcrest.Matchers.containsString;",
          "57: import static org.junit.Assert.assertEquals;",
          "58: import static org.junit.Assert.assertThat;",
          "60: @For({UserSeedProperty.class, ClientAuthenticationCache.class})",
          "61: public class ClientAuthenticationCacheWithUserSeedTest {",
          "63:     @Rule",
          "64:     public JenkinsRule r = new JenkinsRule();",
          "66:     @Rule",
          "67:     public TemporaryFolder tmp = new TemporaryFolder();",
          "69:     @Rule",
          "70:     public LoggerRule logging = new LoggerRule().record(ClientAuthenticationCache.class, Level.FINER);",
          "72:     @Test",
          "73:     @Issue(\"SECURITY-1247\")",
          "74:     public void legacyCache_smoothlyMigratedWithUserSeed() throws Exception {",
          "75:         ClientAuthenticationCache cache = new ClientAuthenticationCache(null);",
          "76:         assertThat(cache.get(), is(Jenkins.ANONYMOUS));",
          "78:         InMemorySecurityRealm securityRealm = new InMemorySecurityRealm();",
          "79:         r.jenkins.setSecurityRealm(securityRealm);",
          "80:         r.jenkins.setAuthorizationStrategy(new FullControlOnceLoggedInAuthorizationStrategy());",
          "82:         User user = User.getById(\"user\", true);",
          "84:         securityRealm.createAccount(user.getId());",
          "86:         try {",
          "88:             String legacyValue = user.getId() + \":\" + cache.getMacOf(user.getId());",
          "89:             cache.props.setProperty(cache.getPropertyKey(), legacyValue);",
          "91:             cache.setUsingLegacyMethod(user.getId());",
          "92:             String valueAfterSave = cache.props.getProperty(cache.getPropertyKey());",
          "93:             assertThat(valueAfterSave, is(legacyValue));",
          "95:             File jar = tmp.newFile(\"jenkins-cli.jar\");",
          "96:             FileUtils.copyURLToFile(r.jenkins.getJnlpJars(\"jenkins-cli.jar\").getURL(), jar);",
          "98:             assertCLI(0, \"Authenticated as: \" + user.getId(), jar, \"who-am-i\");",
          "100:             cache = new ClientAuthenticationCache(null);",
          "101:             String valueAfterUsage = cache.props.getProperty(cache.getPropertyKey());",
          "102:             assertThat(valueAfterUsage, is(legacyValue));",
          "104:             assertCLI(0, null, jar, \"login\", \"--username\", user.getId(), \"--password\", \"<anyPwdForThatRealm>\");",
          "106:             cache = new ClientAuthenticationCache(null);",
          "107:             String valueAfterLogin = cache.props.getProperty(cache.getPropertyKey());",
          "108:             assertThat(valueAfterLogin, not(is(legacyValue)));",
          "110:             assertCLI(0, \"Authenticated as: \" + user.getId(), jar, \"who-am-i\");",
          "111:         } finally {",
          "112:             cache.props.remove(cache.getPropertyKey());",
          "113:         }",
          "114:     }",
          "116:     @Test",
          "117:     @Issue(\"SECURITY-1247\")",
          "118:     public void cannotUseCacheAfterUserSeedReset() throws Exception {",
          "119:         InMemorySecurityRealm securityRealm = new InMemorySecurityRealm();",
          "121:         File jar = tmp.newFile(\"jenkins-cli.jar\");",
          "122:         FileUtils.copyURLToFile(r.jenkins.getJnlpJars(\"jenkins-cli.jar\").getURL(), jar);",
          "123:         r.jenkins.setSecurityRealm(securityRealm);",
          "124:         r.jenkins.setAuthorizationStrategy(new FullControlOnceLoggedInAuthorizationStrategy());",
          "126:         User user = User.getById(\"user\", true);",
          "129:         assertCLI(0, \"Authenticated as: anonymous\", jar, \"who-am-i\");",
          "130:         try {",
          "132:             assertCLI(7, null, jar, \"login\", \"--username\", user.getId(), \"--password\", \"<anyPwdForThatRealm>\");",
          "133:             securityRealm.createAccount(user.getId());",
          "134:             assertCLI(0, null, jar, \"login\", \"--username\", user.getId(), \"--password\", \"<anyPwdForThatRealm>\");",
          "136:             assertCLI(0, \"Authenticated as: \" + user.getId(), jar, \"who-am-i\");",
          "138:             user.getProperty(UserSeedProperty.class).renewSeed();",
          "140:             assertCLI(0, \"Authenticated as: anonymous\", jar, \"who-am-i\");",
          "142:             assertCLI(0, null, jar, \"login\", \"--username\", user.getId(), \"--password\", \"<anyPwdForThatRealm>\");",
          "144:             assertCLI(0, \"Authenticated as: \" + user.getId(), jar, \"who-am-i\");",
          "145:         } finally {",
          "147:             assertCLI(null, null, jar, \"logout\");",
          "148:         }",
          "149:     }",
          "151:     @Test",
          "152:     @Issue(\"SECURITY-1247\")",
          "153:     public void canStillUseCacheAfterUserSeedReset_ifDisabled() throws Exception {",
          "154:         boolean previousConfig = UserSeedProperty.DISABLE_USER_SEED;",
          "155:         try {",
          "156:             UserSeedProperty.DISABLE_USER_SEED = true;",
          "158:             InMemorySecurityRealm securityRealm = new InMemorySecurityRealm();",
          "160:             File jar = tmp.newFile(\"jenkins-cli.jar\");",
          "161:             FileUtils.copyURLToFile(r.jenkins.getJnlpJars(\"jenkins-cli.jar\").getURL(), jar);",
          "162:             r.jenkins.setSecurityRealm(securityRealm);",
          "163:             r.jenkins.setAuthorizationStrategy(new FullControlOnceLoggedInAuthorizationStrategy());",
          "165:             User user = User.getById(\"user\", true);",
          "168:             assertCLI(0, \"Authenticated as: anonymous\", jar, \"who-am-i\");",
          "170:             try {",
          "172:                 assertCLI(7, null, jar, \"login\", \"--username\", user.getId(), \"--password\", \"<anyPwdForThatRealm>\");",
          "173:                 securityRealm.createAccount(user.getId());",
          "174:                 assertCLI(0, null, jar, \"login\", \"--username\", user.getId(), \"--password\", \"<anyPwdForThatRealm>\");",
          "176:                 assertCLI(0, \"Authenticated as: \" + user.getId(), jar, \"who-am-i\");",
          "178:                 user.getProperty(UserSeedProperty.class).renewSeed();",
          "180:                 assertCLI(0, \"Authenticated as: \" + user.getId(), jar, \"who-am-i\");",
          "181:             } finally {",
          "183:                 assertCLI(null, null, jar, \"logout\");",
          "184:             }",
          "185:         } finally {",
          "186:             UserSeedProperty.DISABLE_USER_SEED = previousConfig;",
          "187:         }",
          "188:     }",
          "190:     private void assertCLI(@CheckForNull Integer code, @CheckForNull String output, File jar, String... args) throws Exception {",
          "191:         List<String> commands = Lists.newArrayList(\"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", r.getURL().toString(), \"-noKeyAuth\", \"-remoting\");",
          "192:         commands.addAll(Arrays.asList(args));",
          "193:         ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "194:         int returnValue = new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(commands).stdout(new TeeOutputStream(System.out, baos)).stderr(System.err).join();",
          "195:         if (code != null) {",
          "196:             assertEquals(code.intValue(), returnValue);",
          "197:         }",
          "198:         if (output != null) {",
          "199:             assertThat(baos.toString(), containsString(output));",
          "200:         }",
          "201:     }",
          "202: }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/HudsonPrivateSecurityRealmSEC1245Test.java||test/src/test/java/hudson/security/HudsonPrivateSecurityRealmSEC1245Test.java": [
          "File: test/src/test/java/hudson/security/HudsonPrivateSecurityRealmSEC1245Test.java -> test/src/test/java/hudson/security/HudsonPrivateSecurityRealmSEC1245Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package hudson.security;",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "28: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "29: import com.gargoylesoftware.htmlunit.html.HtmlPasswordInput;",
          "30: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
          "31: import hudson.model.User;",
          "32: import jenkins.security.seed.UserSeedProperty;",
          "33: import org.junit.Rule;",
          "34: import org.junit.Test;",
          "35: import org.jvnet.hudson.test.For;",
          "36: import org.jvnet.hudson.test.Issue;",
          "37: import org.jvnet.hudson.test.JenkinsRule;",
          "38: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
          "40: import static org.hamcrest.Matchers.is;",
          "41: import static org.hamcrest.Matchers.not;",
          "42: import static org.hamcrest.xml.HasXPath.hasXPath;",
          "43: import static org.junit.Assert.assertThat;",
          "45: @For({UserSeedProperty.class, HudsonPrivateSecurityRealm.class})",
          "46: public class HudsonPrivateSecurityRealmSEC1245Test {",
          "48:     @Rule",
          "49:     public JenkinsRule j = new JenkinsRule();",
          "51:     @Test",
          "52:     @Issue(\"SECURITY-1245\")",
          "53:     public void changingPassword_mustInvalidateAllSessions() throws Exception {",
          "54:         User alice = prepareRealmAndAlice();",
          "55:         String initialSeed = alice.getProperty(UserSeedProperty.class).getSeed();",
          "57:         WebClient wc = j.createWebClient();",
          "58:         WebClient wc_anotherTab = j.createWebClient();",
          "60:         wc.login(alice.getId());",
          "61:         assertUserConnected(wc, alice.getId());",
          "63:         wc_anotherTab.login(alice.getId());",
          "64:         assertUserConnected(wc_anotherTab, alice.getId());",
          "66:         HtmlPage configurePage = wc.goTo(alice.getUrl() + \"/configure\");",
          "67:         HtmlPasswordInput password1 = configurePage.getElementByName(\"user.password\");",
          "68:         HtmlPasswordInput password2 = configurePage.getElementByName(\"user.password2\");",
          "70:         password1.setText(\"alice2\");",
          "71:         password2.setText(\"alice2\");",
          "73:         HtmlForm form = configurePage.getFormByName(\"config\");",
          "74:         j.submit(form);",
          "76:         assertUserNotConnected(wc, alice.getId());",
          "77:         assertUserNotConnected(wc_anotherTab, alice.getId());",
          "79:         String seedAfter = alice.getProperty(UserSeedProperty.class).getSeed();",
          "80:         assertThat(seedAfter, not(is(initialSeed)));",
          "81:     }",
          "83:     @Test",
          "84:     @Issue(\"SECURITY-1245\")",
          "85:     public void notChangingPassword_hasNoImpactOnSeed() throws Exception {",
          "86:         User alice = prepareRealmAndAlice();",
          "87:         String initialSeed = alice.getProperty(UserSeedProperty.class).getSeed();",
          "89:         WebClient wc = j.createWebClient();",
          "90:         WebClient wc_anotherTab = j.createWebClient();",
          "92:         wc.login(alice.getId());",
          "93:         assertUserConnected(wc, alice.getId());",
          "95:         wc_anotherTab.login(alice.getId());",
          "96:         assertUserConnected(wc_anotherTab, alice.getId());",
          "98:         HtmlPage configurePage = wc.goTo(alice.getUrl() + \"/configure\");",
          "100:         HtmlForm form = configurePage.getFormByName(\"config\");",
          "101:         j.submit(form);",
          "103:         assertUserConnected(wc, alice.getId());",
          "104:         assertUserConnected(wc_anotherTab, alice.getId());",
          "106:         String seedAfter = alice.getProperty(UserSeedProperty.class).getSeed();",
          "107:         assertThat(seedAfter, is(initialSeed));",
          "108:     }",
          "110:     @Test",
          "111:     @Issue(\"SECURITY-1245\")",
          "112:     public void changingPassword_withSeedDisable_hasNoImpact() throws Exception {",
          "113:         boolean previousConfig = UserSeedProperty.DISABLE_USER_SEED;",
          "114:         try {",
          "115:             UserSeedProperty.DISABLE_USER_SEED = true;",
          "117:             User alice = prepareRealmAndAlice();",
          "119:             WebClient wc = j.createWebClient();",
          "120:             WebClient wc_anotherTab = j.createWebClient();",
          "122:             wc.login(alice.getId());",
          "123:             assertUserConnected(wc, alice.getId());",
          "125:             wc_anotherTab.login(alice.getId());",
          "126:             assertUserConnected(wc_anotherTab, alice.getId());",
          "128:             HtmlPage configurePage = wc.goTo(alice.getUrl() + \"/configure\");",
          "129:             HtmlPasswordInput password1 = configurePage.getElementByName(\"user.password\");",
          "130:             HtmlPasswordInput password2 = configurePage.getElementByName(\"user.password2\");",
          "132:             password1.setText(\"alice2\");",
          "133:             password2.setText(\"alice2\");",
          "135:             HtmlForm form = configurePage.getFormByName(\"config\");",
          "136:             j.submit(form);",
          "138:             assertUserConnected(wc, alice.getId());",
          "139:             assertUserConnected(wc_anotherTab, alice.getId());",
          "140:         } finally {",
          "141:             UserSeedProperty.DISABLE_USER_SEED = previousConfig;",
          "142:         }",
          "143:     }",
          "145:     private User prepareRealmAndAlice() throws Exception {",
          "146:         j.jenkins.setDisableRememberMe(false);",
          "147:         HudsonPrivateSecurityRealm securityRealm = new HudsonPrivateSecurityRealm(false, false, null);",
          "148:         j.jenkins.setSecurityRealm(securityRealm);",
          "150:         return securityRealm.createAccount(\"alice\", \"alice\");",
          "151:     }",
          "153:     private void assertUserConnected(JenkinsRule.WebClient wc, String expectedUsername) throws Exception {",
          "154:         XmlPage page = (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");",
          "155:         assertThat(page, hasXPath(\"//name\", is(expectedUsername)));",
          "156:     }",
          "158:     private void assertUserNotConnected(JenkinsRule.WebClient wc, String notExpectedUsername) throws Exception {",
          "159:         XmlPage page = (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");",
          "160:         assertThat(page, hasXPath(\"//name\", not(is(notExpectedUsername))));",
          "161:     }",
          "162: }",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/TokenBasedRememberMeServices2SEC868Test.java||test/src/test/java/hudson/security/TokenBasedRememberMeServices2SEC868Test.java": [
          "File: test/src/test/java/hudson/security/TokenBasedRememberMeServices2SEC868Test.java -> test/src/test/java/hudson/security/TokenBasedRememberMeServices2SEC868Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package hudson.security;",
          "26: import com.gargoylesoftware.htmlunit.CookieManager;",
          "27: import com.gargoylesoftware.htmlunit.util.Cookie;",
          "28: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
          "29: import hudson.model.User;",
          "30: import jenkins.security.seed.UserSeedProperty;",
          "31: import org.apache.commons.codec.binary.Base64;",
          "32: import org.junit.Rule;",
          "33: import org.junit.Test;",
          "34: import org.jvnet.hudson.test.For;",
          "35: import org.jvnet.hudson.test.Issue;",
          "36: import org.jvnet.hudson.test.JenkinsRule;",
          "38: import java.util.concurrent.TimeUnit;",
          "40: import static org.hamcrest.Matchers.is;",
          "41: import static org.hamcrest.Matchers.not;",
          "42: import static org.hamcrest.xml.HasXPath.hasXPath;",
          "43: import static org.junit.Assert.assertThat;",
          "45: @For(TokenBasedRememberMeServices2.class)",
          "46: public class TokenBasedRememberMeServices2SEC868Test {",
          "47:     @Rule",
          "48:     public JenkinsRule j = new JenkinsRule();",
          "50:     @Test",
          "51:     @Issue(\"SECURITY-868\")",
          "52:     @For(UserSeedProperty.class)",
          "53:     public void rememberMeToken_invalid_afterUserSeedReset() throws Exception {",
          "54:         j.jenkins.setDisableRememberMe(false);",
          "56:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false, false, null);",
          "57:         j.jenkins.setSecurityRealm(realm);",
          "59:         String username = \"alice\";",
          "60:         User alice = realm.createAccount(username, username);",
          "62:         JenkinsRule.WebClient wc = j.createWebClient();",
          "64:         wc.login(username, username, true);",
          "65:         CookieManager cm = wc.getCookieManager();",
          "67:         cm.removeCookie(cm.getCookie(\"JSESSIONID\"));",
          "68:         assertUserConnected(wc, username);",
          "70:         alice.getProperty(UserSeedProperty.class).renewSeed();",
          "72:         cm.removeCookie(cm.getCookie(\"JSESSIONID\"));",
          "73:         assertUserNotConnected(wc, username);",
          "74:     }",
          "76:     @Test",
          "77:     @Issue(\"SECURITY-868\")",
          "78:     @For(UserSeedProperty.class)",
          "79:     public void rememberMeToken_stillValid_afterUserSeedReset_ifUserSeedDisabled() throws Exception {",
          "80:         boolean currentStatus = UserSeedProperty.DISABLE_USER_SEED;",
          "81:         try {",
          "82:             UserSeedProperty.DISABLE_USER_SEED = true;",
          "84:             j.jenkins.setDisableRememberMe(false);",
          "86:             HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false, false, null);",
          "87:             j.jenkins.setSecurityRealm(realm);",
          "89:             String username = \"alice\";",
          "90:             User alice = realm.createAccount(username, username);",
          "92:             JenkinsRule.WebClient wc = j.createWebClient();",
          "94:             wc.login(username, username, true);",
          "95:             CookieManager cm = wc.getCookieManager();",
          "97:             cm.removeCookie(cm.getCookie(\"JSESSIONID\"));",
          "98:             assertUserConnected(wc, username);",
          "100:             alice.getProperty(UserSeedProperty.class).renewSeed();",
          "102:             cm.removeCookie(cm.getCookie(\"JSESSIONID\"));",
          "104:             assertUserConnected(wc, username);",
          "105:         } finally {",
          "106:             UserSeedProperty.DISABLE_USER_SEED = currentStatus;",
          "107:         }",
          "108:     }",
          "110:     @Test",
          "111:     @Issue(\"SECURITY-868\")",
          "112:     public void rememberMeToken_shouldNotAccept_expirationDurationLargerThanConfigured() throws Exception {",
          "113:         j.jenkins.setDisableRememberMe(false);",
          "115:         HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false, false, null);",
          "116:         TokenBasedRememberMeServices2 tokenService = (TokenBasedRememberMeServices2) realm.getSecurityComponents().rememberMe;",
          "117:         j.jenkins.setSecurityRealm(realm);",
          "119:         String username = \"alice\";",
          "120:         User alice = realm.createAccount(username, username);",
          "122:         { // a malicious cookie with expiration too far in the future should not work",
          "123:             JenkinsRule.WebClient wc = j.createWebClient();",
          "127:             long oneDay = TimeUnit.DAYS.toMillis(1);",
          "128:             Cookie cookie = createRememberMeCookie(tokenService, oneDay, alice);",
          "129:             wc.getCookieManager().addCookie(cookie);",
          "132:             assertUserNotConnected(wc, username);",
          "133:         }",
          "135:         { // a hand crafted cookie with regular expiration duration works",
          "136:             JenkinsRule.WebClient wc = j.createWebClient();",
          "140:             long minusFiveMinutes = TimeUnit.MINUTES.toMillis(-5);",
          "141:             Cookie cookie = createRememberMeCookie(tokenService, minusFiveMinutes, alice);",
          "142:             wc.getCookieManager().addCookie(cookie);",
          "145:             assertUserConnected(wc, username);",
          "146:         }",
          "147:     }",
          "149:     @Test",
          "150:     @Issue(\"SECURITY-868\")",
          "151:     public void rememberMeToken_skipExpirationCheck() throws Exception {",
          "152:         boolean previousConfig = TokenBasedRememberMeServices2.SKIP_TOO_FAR_EXPIRATION_DATE_CHECK;",
          "153:         try {",
          "154:             TokenBasedRememberMeServices2.SKIP_TOO_FAR_EXPIRATION_DATE_CHECK = true;",
          "156:             j.jenkins.setDisableRememberMe(false);",
          "158:             HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false, false, null);",
          "159:             TokenBasedRememberMeServices2 tokenService = (TokenBasedRememberMeServices2) realm.getSecurityComponents().rememberMe;",
          "160:             j.jenkins.setSecurityRealm(realm);",
          "162:             String username = \"alice\";",
          "163:             User alice = realm.createAccount(username, username);",
          "165:             { // a malicious cookie with expiration too far in the future should not work",
          "166:                 JenkinsRule.WebClient wc = j.createWebClient();",
          "170:                 long oneDay = TimeUnit.DAYS.toMillis(1);",
          "171:                 Cookie cookie = createRememberMeCookie(tokenService, oneDay, alice);",
          "172:                 wc.getCookieManager().addCookie(cookie);",
          "175:                 assertUserConnected(wc, username);",
          "176:             }",
          "178:             { // a hand crafted cookie with regular expiration duration works",
          "179:                 JenkinsRule.WebClient wc = j.createWebClient();",
          "183:                 long minusFiveMinutes = TimeUnit.MINUTES.toMillis(-5);",
          "184:                 Cookie cookie = createRememberMeCookie(tokenService, minusFiveMinutes, alice);",
          "185:                 wc.getCookieManager().addCookie(cookie);",
          "188:                 assertUserConnected(wc, username);",
          "189:             }",
          "190:         } finally {",
          "191:             TokenBasedRememberMeServices2.SKIP_TOO_FAR_EXPIRATION_DATE_CHECK = previousConfig;",
          "192:         }",
          "193:     }",
          "195:     private Cookie createRememberMeCookie(TokenBasedRememberMeServices2 tokenService, long deltaDuration, User user) throws Exception {",
          "196:         long tokenValiditySeconds = tokenService.getTokenValiditySeconds();",
          "197:         long expiryTime = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(tokenValiditySeconds);",
          "200:         expiryTime += deltaDuration;",
          "202:         String signatureValue = tokenService.makeTokenSignature(expiryTime, user.getProperty(HudsonPrivateSecurityRealm.Details.class));",
          "203:         String tokenValue = user.getId() + \":\" + expiryTime + \":\" + signatureValue;",
          "204:         String tokenValueBase64 = new String(Base64.encodeBase64(tokenValue.getBytes()));",
          "205:         return new Cookie(j.getURL().getHost(), tokenService.getCookieName(), tokenValueBase64);",
          "206:     }",
          "208:     private void assertUserConnected(JenkinsRule.WebClient wc, String expectedUsername) throws Exception {",
          "209:         XmlPage page = (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");",
          "210:         assertThat(page, hasXPath(\"//name\", is(expectedUsername)));",
          "211:     }",
          "213:     private void assertUserNotConnected(JenkinsRule.WebClient wc, String notExpectedUsername) throws Exception {",
          "214:         XmlPage page = (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");",
          "215:         assertThat(page, hasXPath(\"//name\", not(is(notExpectedUsername))));",
          "216:     }",
          "217: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java||test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java": [
          "File: test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java -> test/src/test/java/jenkins/security/seed/UserSeedChangeListenerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.security.seed;",
          "26: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "27: import com.gargoylesoftware.htmlunit.WebRequest;",
          "28: import hudson.model.User;",
          "29: import org.hamcrest.CoreMatchers;",
          "30: import org.junit.Assert;",
          "31: import org.junit.Rule;",
          "32: import org.junit.Test;",
          "33: import org.jvnet.hudson.test.JenkinsRule;",
          "34: import org.jvnet.hudson.test.TestExtension;",
          "36: import javax.annotation.Nonnull;",
          "38: import java.net.URL;",
          "39: import java.util.Random;",
          "41: import static org.hamcrest.CoreMatchers.is;",
          "42: import static org.junit.Assert.assertNull;",
          "43: import static org.junit.Assert.assertThat;",
          "45: public class UserSeedChangeListenerTest {",
          "47:     @Rule",
          "48:     public JenkinsRule j = new JenkinsRule();",
          "49:     {j.timeout = 0;}",
          "51:     @Test",
          "52:     public void onProgrammaticUserSeedChange_listenerTriggered() throws Exception {",
          "53:         TestUserSeedChangeListener testListener = j.jenkins.getExtensionList(UserSeedChangeListener.class).get(TestUserSeedChangeListener.class);",
          "55:         String userId = \"alice\";",
          "56:         User alice = User.getById(userId, true);",
          "57:         assertNull(testListener.lastUserIdReceived);",
          "59:         UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);",
          "60:         assertNull(testListener.lastUserIdReceived);",
          "62:         userSeed.renewSeed();",
          "63:         assertThat(testListener.lastUserIdReceived, is(userId));",
          "64:         assertThat(testListener.userWasNull, is(false));",
          "65:     }",
          "67:     @Test",
          "68:     public void onWebCallUserSeedChange_listenerTriggered() throws Exception {",
          "69:         j.jenkins.setCrumbIssuer(null);",
          "71:         TestUserSeedChangeListener testListener = j.jenkins.getExtensionList(UserSeedChangeListener.class).get(TestUserSeedChangeListener.class);",
          "73:         String userId = \"alice\";",
          "74:         User alice = User.getById(userId, true);",
          "75:         UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);",
          "77:         JenkinsRule.WebClient wc = j.createWebClient();",
          "78:         WebRequest webRequest = new WebRequest(",
          "79:                 new URL(j.getURL() + alice.getUrl() + \"/\" + userSeed.getDescriptor().getDescriptorUrl() + \"/renewSessionSeed\"),",
          "80:                 HttpMethod.POST",
          "81:         );",
          "83:         assertNull(testListener.lastUserIdReceived);",
          "84:         wc.getPage(webRequest);",
          "85:         assertThat(testListener.lastUserIdReceived, is(userId));",
          "86:         assertThat(testListener.userWasNull, is(false));",
          "87:     }",
          "89:     @TestExtension",
          "90:     public static class TestUserSeedChangeListener extends UserSeedChangeListener {",
          "91:         String lastUserIdReceived;",
          "92:         boolean userWasNull;",
          "94:         @Override",
          "95:         public void onUserSeedRenewed(@Nonnull User user) {",
          "96:             if (user == null) {",
          "97:                 userWasNull = true;",
          "98:             }",
          "99:             lastUserIdReceived = user.getId();",
          "100:         }",
          "101:     }",
          "102: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/seed/UserSeedPropertyRestartTest.java||test/src/test/java/jenkins/security/seed/UserSeedPropertyRestartTest.java": [
          "File: test/src/test/java/jenkins/security/seed/UserSeedPropertyRestartTest.java -> test/src/test/java/jenkins/security/seed/UserSeedPropertyRestartTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.security.seed;",
          "26: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "27: import com.gargoylesoftware.htmlunit.WebRequest;",
          "28: import hudson.model.User;",
          "29: import org.junit.Rule;",
          "30: import org.junit.Test;",
          "31: import org.junit.runners.model.Statement;",
          "32: import org.jvnet.hudson.test.For;",
          "33: import org.jvnet.hudson.test.Issue;",
          "34: import org.jvnet.hudson.test.JenkinsRule;",
          "35: import org.jvnet.hudson.test.RestartableJenkinsRule;",
          "37: import java.net.URL;",
          "38: import java.util.concurrent.atomic.AtomicReference;",
          "40: import static org.junit.Assert.assertEquals;",
          "41: import static org.junit.Assert.assertNotEquals;",
          "42: import static org.junit.Assert.assertNotNull;",
          "44: @For(UserSeedProperty.class)",
          "45: public class UserSeedPropertyRestartTest {",
          "47:     @Rule",
          "48:     public RestartableJenkinsRule rr = new RestartableJenkinsRule();",
          "50:     @Test",
          "51:     @Issue(\"SECURITY-901\")",
          "52:     public void initialSeedIsSaved() throws Exception {",
          "53:         AtomicReference<String> initialSeedRef = new AtomicReference<>();",
          "55:         rr.addStep(new Statement() {",
          "56:             @Override",
          "57:             public void evaluate() throws Throwable {",
          "58:                 rr.j.jenkins.setCrumbIssuer(null);",
          "59:                 rr.j.jenkins.save();",
          "61:                 User alice = User.getById(\"alice\", true);",
          "62:                 alice.save();",
          "63:                 initialSeedRef.set(alice.getProperty(UserSeedProperty.class).getSeed());",
          "64:             }",
          "65:         });",
          "66:         rr.addStep(new Statement() {",
          "67:             @Override",
          "68:             public void evaluate() throws Throwable {",
          "69:                 User alice = User.getById(\"alice\", false);",
          "70:                 String initialSeed = alice.getProperty(UserSeedProperty.class).getSeed();",
          "71:                 assertEquals(initialSeed, initialSeedRef.get());",
          "72:             }",
          "73:         });",
          "74:     }",
          "76:     @Test",
          "77:     @Issue(\"SECURITY-901\")",
          "78:     public void renewSeedSavesTheChange() throws Exception {",
          "79:         AtomicReference<String> initialSeedRef = new AtomicReference<>();",
          "80:         AtomicReference<String> seedRef = new AtomicReference<>();",
          "82:         rr.addStep(new Statement() {",
          "83:             @Override",
          "84:             public void evaluate() throws Throwable {",
          "85:                 rr.j.jenkins.setCrumbIssuer(null);",
          "86:                 rr.j.jenkins.save();",
          "88:                 User alice = User.getById(\"alice\", true);",
          "89:                 alice.save();",
          "90:                 initialSeedRef.set(alice.getProperty(UserSeedProperty.class).getSeed());",
          "92:                 requestRenewSeedForUser(alice);",
          "94:                 seedRef.set(alice.getProperty(UserSeedProperty.class).getSeed());",
          "95:                 assertNotEquals(initialSeedRef.get(), seedRef.get());",
          "96:             }",
          "97:         });",
          "98:         rr.addStep(new Statement() {",
          "99:             @Override",
          "100:             public void evaluate() throws Throwable {",
          "101:                 User alice = User.getById(\"alice\", false);",
          "102:                 assertNotNull(alice);",
          "103:                 String currentSeed = alice.getProperty(UserSeedProperty.class).getSeed();",
          "104:                 assertEquals(currentSeed, seedRef.get());",
          "105:             }",
          "106:         });",
          "107:     }",
          "109:     private void requestRenewSeedForUser(User user) throws Exception {",
          "110:         JenkinsRule.WebClient wc = rr.j.createWebClient();",
          "111:         WebRequest request = new WebRequest(new URL(rr.j.jenkins.getRootUrl() + user.getUrl() + \"/descriptorByName/\" + UserSeedProperty.class.getName() + \"/renewSessionSeed/\"), HttpMethod.POST);",
          "112:         wc.getPage(request);",
          "113:     }",
          "114: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/seed/UserSeedPropertyTest.java||test/src/test/java/jenkins/security/seed/UserSeedPropertyTest.java": [
          "File: test/src/test/java/jenkins/security/seed/UserSeedPropertyTest.java -> test/src/test/java/jenkins/security/seed/UserSeedPropertyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.security.seed;",
          "26: import com.gargoylesoftware.htmlunit.ElementNotFoundException;",
          "27: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "28: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "29: import com.gargoylesoftware.htmlunit.WebRequest;",
          "30: import com.gargoylesoftware.htmlunit.html.HtmlElement;",
          "31: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "32: import com.gargoylesoftware.htmlunit.xml.XmlPage;",
          "33: import hudson.model.User;",
          "34: import org.junit.Rule;",
          "35: import org.junit.Test;",
          "36: import org.jvnet.hudson.test.Issue;",
          "37: import org.jvnet.hudson.test.JenkinsRule;",
          "38: import test.security.realm.InMemorySecurityRealm;",
          "40: import java.lang.reflect.Method;",
          "41: import java.net.URL;",
          "42: import java.util.Arrays;",
          "43: import java.util.HashSet;",
          "44: import java.util.List;",
          "45: import java.util.Set;",
          "47: import static org.hamcrest.Matchers.equalTo;",
          "48: import static org.hamcrest.Matchers.is;",
          "49: import static org.hamcrest.Matchers.not;",
          "50: import static org.hamcrest.xml.HasXPath.hasXPath;",
          "51: import static org.junit.Assert.assertEquals;",
          "52: import static org.junit.Assert.assertFalse;",
          "53: import static org.junit.Assert.assertNotNull;",
          "54: import static org.junit.Assert.assertThat;",
          "55: import static org.junit.Assert.fail;",
          "57: public class UserSeedPropertyTest {",
          "59:     @Rule",
          "60:     public JenkinsRule j = new JenkinsRule();",
          "62:     @Test",
          "63:     @Issue(\"SECURITY-901\")",
          "64:     public void userCreation_implies_userSeedCreation() throws Exception {",
          "65:         User alice = User.getById(\"alice\", true);",
          "66:         assertNotNull(alice);",
          "67:         UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);",
          "68:         assertNotNull(userSeed);",
          "69:         assertNotNull(userSeed.getSeed());",
          "70:     }",
          "72:     @Test",
          "73:     @Issue(\"SECURITY-901\")",
          "74:     public void userSeedRenewal_changeTheSeed() throws Exception {",
          "75:         j.jenkins.setCrumbIssuer(null);",
          "76:         Set<String> seeds = new HashSet<>();",
          "78:         User alice = User.getById(\"alice\", true);",
          "80:         UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);",
          "81:         seeds.add(userSeed.getSeed());",
          "83:         int times = 10;",
          "84:         for (int i = 1; i < times; i++) {",
          "85:             requestRenewSeedForUser(alice);",
          "86:             userSeed = alice.getProperty(UserSeedProperty.class);",
          "87:             seeds.add(userSeed.getSeed());",
          "88:         }",
          "90:         assertThat(seeds.size(), equalTo(times));",
          "91:         assertFalse(seeds.contains(\"\"));",
          "92:         assertFalse(seeds.contains(null));",
          "93:     }",
          "95:     @Test",
          "96:     @Issue(\"SECURITY-901\")",
          "97:     public void initialUserSeedIsAlwaysDifferent() throws Exception {",
          "98:         Set<String> seeds = new HashSet<>();",
          "100:         int times = 10;",
          "101:         for (int i = 0; i < times; i++) {",
          "102:             User alice = User.getById(\"alice\", true);",
          "103:             UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);",
          "104:             seeds.add(userSeed.getSeed());",
          "105:             alice.delete();",
          "106:         }",
          "108:         assertThat(seeds.size(), equalTo(times));",
          "109:         assertFalse(seeds.contains(\"\"));",
          "110:         assertFalse(seeds.contains(null));",
          "111:     }",
          "113:     @Test",
          "114:     @Issue(\"SECURITY-901\")",
          "115:     public void differentUserHaveDifferentInitialSeeds() throws Exception {",
          "116:         Set<String> seeds = new HashSet<>();",
          "118:         List<String> userIds = Arrays.asList(\"Alice\", \"Bob\", \"Charles\", \"Derek\", \"Edward\");",
          "119:         userIds.forEach(userId -> {",
          "120:             User user = User.getById(userId, true);",
          "121:             UserSeedProperty userSeed = user.getProperty(UserSeedProperty.class);",
          "122:             seeds.add(userSeed.getSeed());",
          "123:         });",
          "125:         assertThat(seeds.size(), equalTo(userIds.size()));",
          "126:         assertFalse(seeds.contains(\"\"));",
          "127:         assertFalse(seeds.contains(null));",
          "128:     }",
          "130:     @Test",
          "131:     @Issue(\"SECURITY-901\")",
          "132:     public void userCreatedInThirdPartyRealm_cannotReconnect_afterSessionInvalidation_andRealmDeletion() throws Exception {",
          "133:         InMemorySecurityRealm realm = new InMemorySecurityRealm();",
          "134:         j.jenkins.setSecurityRealm(realm);",
          "135:         j.jenkins.setCrumbIssuer(null);",
          "137:         String ALICE = \"alice\";",
          "139:         realm.createAccount(ALICE);",
          "141:         JenkinsRule.WebClient wc = j.createWebClient();",
          "142:         wc.login(ALICE);",
          "144:         User alice = User.getById(ALICE, false);",
          "145:         assertNotNull(alice);",
          "146:         UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);",
          "147:         assertNotNull(userSeed);",
          "149:         assertUserConnected(wc, ALICE);",
          "151:         realm.deleteAccount(ALICE);",
          "154:         assertUserConnected(wc, ALICE);",
          "156:         requestRenewSeedForUser(alice);",
          "158:         assertUserNotConnected(wc, ALICE);",
          "159:         assertUserConnected(wc, \"anonymous\");",
          "161:         try {",
          "162:             wc.login(ALICE);",
          "163:             fail(\"Alice does not exist any longer and so should not be able to login\");",
          "164:         } catch (FailingHttpStatusCodeException e) {",
          "165:             assertEquals(401, e.getStatusCode());",
          "166:         }",
          "167:     }",
          "169:     @Test",
          "170:     @Issue(\"SECURITY-901\")",
          "171:     public void userAfterBeingDeletedInThirdPartyRealm_canStillUseTheirSession_withDisabledSeed() throws Exception {",
          "172:         boolean currentStatus = UserSeedProperty.DISABLE_USER_SEED;",
          "173:         try {",
          "174:             UserSeedProperty.DISABLE_USER_SEED = true;",
          "176:             InMemorySecurityRealm realm = new InMemorySecurityRealm();",
          "177:             j.jenkins.setSecurityRealm(realm);",
          "178:             j.jenkins.setCrumbIssuer(null);",
          "180:             String ALICE = \"alice\";",
          "182:             realm.createAccount(ALICE);",
          "184:             JenkinsRule.WebClient wc = j.createWebClient();",
          "185:             wc.login(ALICE);",
          "187:             User alice = User.getById(ALICE, false);",
          "188:             assertNotNull(alice);",
          "189:             UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);",
          "190:             assertNotNull(userSeed);",
          "192:             assertUserConnected(wc, ALICE);",
          "194:             realm.deleteAccount(ALICE);",
          "197:             assertUserConnected(wc, ALICE);",
          "199:             try {",
          "200:                 requestRenewSeedForUser(alice);",
          "201:                 fail(\"The feature should be disabled\");",
          "202:             } catch (FailingHttpStatusCodeException e) {",
          "204:             }",
          "207:             assertUserConnected(wc, ALICE);",
          "209:             UserSeedProperty userSeedProperty = alice.getProperty(UserSeedProperty.class);",
          "210:             userSeedProperty.renewSeed();",
          "213:             assertUserConnected(wc, ALICE);",
          "215:             JenkinsRule.WebClient wc2 = j.createWebClient();",
          "216:             try {",
          "217:                 wc2.login(ALICE);",
          "218:                 fail(\"Alice is not longer backed by security realm\");",
          "219:             } catch (FailingHttpStatusCodeException e) {",
          "220:                 assertEquals(401, e.getStatusCode());",
          "221:             }",
          "222:         } finally {",
          "223:             UserSeedProperty.DISABLE_USER_SEED = currentStatus;",
          "224:         }",
          "225:     }",
          "227:     @Test",
          "228:     @Issue(\"SECURITY-901\")",
          "229:     public void userCreatedInThirdPartyRealm_canReconnect_afterSessionInvalidation() throws Exception {",
          "230:         InMemorySecurityRealm realm = new InMemorySecurityRealm();",
          "231:         j.jenkins.setSecurityRealm(realm);",
          "232:         j.jenkins.setCrumbIssuer(null);",
          "234:         String ALICE = \"alice\";",
          "236:         realm.createAccount(ALICE);",
          "238:         JenkinsRule.WebClient wc = j.createWebClient();",
          "239:         wc.login(ALICE);",
          "241:         User alice = User.getById(ALICE, false);",
          "242:         assertNotNull(alice);",
          "243:         UserSeedProperty userSeed = alice.getProperty(UserSeedProperty.class);",
          "244:         assertNotNull(userSeed);",
          "246:         assertUserConnected(wc, ALICE);",
          "248:         requestRenewSeedForUser(alice);",
          "250:         assertUserNotConnected(wc, ALICE);",
          "251:         assertUserConnected(wc, \"anonymous\");",
          "253:         wc.login(ALICE);",
          "254:         assertUserConnected(wc, ALICE);",
          "255:     }",
          "257:     @Test",
          "258:     public void userSeedSection_isCorrectlyDisplayed() throws Exception {",
          "259:         InMemorySecurityRealm realm = new InMemorySecurityRealm();",
          "260:         j.jenkins.setSecurityRealm(realm);",
          "261:         j.jenkins.setCrumbIssuer(null);",
          "263:         String ALICE = \"alice\";",
          "265:         realm.createAccount(ALICE);",
          "267:         JenkinsRule.WebClient wc = j.createWebClient();",
          "268:         wc.login(ALICE);",
          "270:         User alice = User.getById(ALICE, false);",
          "271:         assertNotNull(alice);",
          "273:         HtmlPage htmlPage = wc.goTo(alice.getUrl() + \"/configure\");",
          "274:         htmlPage.getDocumentElement().getOneHtmlElementByAttribute(\"div\", \"class\", \"user-seed-panel\");",
          "275:     }",
          "277:     @Test",
          "278:     public void userSeedSection_isCorrectlyHidden_withSpecificSetting() throws Exception {",
          "279:         boolean currentStatus = UserSeedProperty.HIDE_USER_SEED_SECTION;",
          "280:         try {",
          "281:             UserSeedProperty.HIDE_USER_SEED_SECTION = true;",
          "283:             InMemorySecurityRealm realm = new InMemorySecurityRealm();",
          "284:             j.jenkins.setSecurityRealm(realm);",
          "285:             j.jenkins.setCrumbIssuer(null);",
          "287:             String ALICE = \"alice\";",
          "289:             realm.createAccount(ALICE);",
          "291:             JenkinsRule.WebClient wc = j.createWebClient();",
          "292:             wc.login(ALICE);",
          "294:             User alice = User.getById(ALICE, false);",
          "295:             assertNotNull(alice);",
          "297:             HtmlPage htmlPage = wc.goTo(alice.getUrl() + \"/configure\");",
          "298:             try {",
          "299:                 htmlPage.getDocumentElement().getOneHtmlElementByAttribute(\"div\", \"class\", \"user-seed-panel\");",
          "300:                 fail(\"Seed section should not be displayed\");",
          "301:             }",
          "302:             catch (ElementNotFoundException e) {}",
          "303:         }",
          "304:         finally {",
          "305:             UserSeedProperty.HIDE_USER_SEED_SECTION = currentStatus;",
          "306:         }",
          "307:     }",
          "309:     private void assertUserConnected(JenkinsRule.WebClient wc, String expectedUsername) throws Exception {",
          "310:         XmlPage page = (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");",
          "311:         assertThat(page, hasXPath(\"//name\", is(expectedUsername)));",
          "312:     }",
          "314:     private void assertUserNotConnected(JenkinsRule.WebClient wc, String notExpectedUsername) throws Exception {",
          "315:         XmlPage page = (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");",
          "316:         assertThat(page, hasXPath(\"//name\", not(is(notExpectedUsername))));",
          "317:     }",
          "319:     private void requestRenewSeedForUser(User user) throws Exception {",
          "320:         JenkinsRule.WebClient wc = j.createWebClient();",
          "321:         WebRequest request = new WebRequest(new URL(j.jenkins.getRootUrl() + user.getUrl() + \"/descriptorByName/\" + UserSeedProperty.class.getName() + \"/renewSessionSeed/\"), HttpMethod.POST);",
          "322:         wc.getPage(request);",
          "323:     }",
          "324: }",
          "",
          "---------------"
        ],
        "test/src/test/java/test/security/realm/InMemorySecurityRealm.java||test/src/test/java/test/security/realm/InMemorySecurityRealm.java": [
          "File: test/src/test/java/test/security/realm/InMemorySecurityRealm.java -> test/src/test/java/test/security/realm/InMemorySecurityRealm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package test.security.realm;",
          "26: import hudson.security.AbstractPasswordBasedSecurityRealm;",
          "27: import hudson.security.GroupDetails;",
          "28: import org.acegisecurity.AuthenticationException;",
          "29: import org.acegisecurity.GrantedAuthority;",
          "30: import org.acegisecurity.userdetails.UserDetails;",
          "31: import org.acegisecurity.userdetails.UsernameNotFoundException;",
          "32: import org.springframework.dao.DataAccessException;",
          "34: import java.util.HashMap;",
          "35: import java.util.Map;",
          "41: public class InMemorySecurityRealm extends AbstractPasswordBasedSecurityRealm {",
          "42:     private Map<String, UserDetails> userStorage = new HashMap<>();",
          "44:     public synchronized void createAccount(String username) {",
          "45:         if (userStorage.containsKey(username)) {",
          "46:             return;",
          "47:         }",
          "48:         UserDetails details = new InMemoryUserDetails(username);",
          "49:         userStorage.put(username, details);",
          "50:     }",
          "52:     public synchronized void deleteAccount(String username) {",
          "53:         if (!userStorage.containsKey(username)) {",
          "54:             return;",
          "55:         }",
          "56:         userStorage.remove(username);",
          "57:     }",
          "59:     @Override",
          "60:     protected UserDetails authenticate(String username, String password) throws AuthenticationException {",
          "61:         if (userStorage.containsKey(username)) {",
          "62:             return userStorage.get(username);",
          "63:         }",
          "64:         throw new UsernameNotFoundException(\"Unknown user: \" + username);",
          "65:     }",
          "67:     @Override",
          "68:     public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException {",
          "69:         return userStorage.get(username);",
          "70:     }",
          "72:     @Override",
          "73:     public GroupDetails loadGroupByGroupname(String groupname) throws UsernameNotFoundException, DataAccessException {",
          "74:         return null;",
          "75:     }",
          "77:     private static class InMemoryUserDetails implements UserDetails {",
          "78:         private final String username;",
          "80:         private InMemoryUserDetails(String username) {",
          "81:             this.username = username;",
          "82:         }",
          "84:         @Override",
          "85:         public GrantedAuthority[] getAuthorities() {",
          "86:             return new GrantedAuthority[0];",
          "87:         }",
          "89:         @Override",
          "90:         public String getUsername() {",
          "91:             return username;",
          "92:         }",
          "94:         @Override",
          "95:         public String getPassword() {",
          "96:             return null;",
          "97:         }",
          "99:         @Override",
          "100:         public boolean isAccountNonExpired() {",
          "101:             return true;",
          "102:         }",
          "104:         @Override",
          "105:         public boolean isAccountNonLocked() {",
          "106:             return true;",
          "107:         }",
          "109:         @Override",
          "110:         public boolean isCredentialsNonExpired() {",
          "111:             return true;",
          "112:         }",
          "114:         @Override",
          "115:         public boolean isEnabled() {",
          "116:             return true;",
          "117:         }",
          "118:     }",
          "119: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}