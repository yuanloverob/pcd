{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c10a631e1e2210753b68b35b9a382189e48be796",
      "candidate_info": {
        "commit_hash": "c10a631e1e2210753b68b35b9a382189e48be796",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/c10a631e1e2210753b68b35b9a382189e48be796",
        "files": [
          "arch/X86/X86Disassembler.c"
        ],
        "message": "x86: fix an warning on unintialized vars",
        "before_after_code_files": [
          "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c": [
          "File: arch/X86/X86Disassembler.c -> arch/X86/X86Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "951:   if (*size  == 2) {",
          "954:    reader(&info, &b1, address);",
          "955:    reader(&info, &b2, address + 1);",
          "",
          "[Removed Lines]",
          "952:    unsigned char b1, b2;",
          "",
          "[Added Lines]",
          "952:    unsigned char b1 = 0, b2 = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db156165942d01bf5c4605cd6eaf51555f997b35",
      "candidate_info": {
        "commit_hash": "db156165942d01bf5c4605cd6eaf51555f997b35",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/db156165942d01bf5c4605cd6eaf51555f997b35",
        "files": [
          "arch/Sparc/SparcInstPrinter.c"
        ],
        "message": "sparc: fix #1061",
        "before_after_code_files": [
          "arch/Sparc/SparcInstPrinter.c||arch/Sparc/SparcInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/Sparc/SparcInstPrinter.c||arch/Sparc/SparcInstPrinter.c": [
          "File: arch/Sparc/SparcInstPrinter.c -> arch/Sparc/SparcInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:     SStream_concat(O, \"%u\", Imm);",
          "270:   } else {",
          "271:    if (Imm < -HEX_THRESHOLD)",
          "273:    else",
          "274:     SStream_concat(O, \"-%u\", -Imm);",
          "275:   }",
          "",
          "[Removed Lines]",
          "272:     SStream_concat(O, \"-0x%x\", -Imm);",
          "",
          "[Added Lines]",
          "272:     SStream_concat(O, \"-0x%x\", (unsigned int)-Imm);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f1d438d6c7385cd21342bd5d2461e109399bfda",
      "candidate_info": {
        "commit_hash": "9f1d438d6c7385cd21342bd5d2461e109399bfda",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/9f1d438d6c7385cd21342bd5d2461e109399bfda",
        "files": [
          "bindings/python/setup_cython.py"
        ],
        "message": "fix python (cython) bindings",
        "before_after_code_files": [
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: compile_args = ['-O3', '-fomit-frame-pointer', '-I' + HEADERS_DIR]",
          "41: link_args = ['-L' + LIBS_DIR]",
          "44: ext_modules = [Extension(\"capstone.ccapstone\",",
          "45:                          [\"pyx/ccapstone.pyx\"],",
          "46:                          libraries=[\"capstone\"],",
          "",
          "[Removed Lines]",
          "43: ext_module_names = ['arm', 'arm_const', 'arm64', 'arm64_const', 'm68k', 'm68k_const', 'mips', 'mips_const', 'ppc', 'ppc_const', 'x86', 'x86_const', 'sparc', 'sparc_const', 'systemz', 'sysz_const', 'xcore', 'xcore_const']",
          "",
          "[Added Lines]",
          "43: ext_module_names = ['arm', 'arm_const', 'arm64', 'arm64_const', 'm68k', 'm68k_const', 'mips', 'mips_const', 'ppc', 'ppc_const', 'x86', 'x86_const', 'sparc', 'sparc_const', 'systemz', 'sysz_const', 'xcore', 'xcore_const', 'tms320c64x', 'tms320c64x_const']",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7f4930ad7eebe45894e5ffd974c79cda5d320d1",
      "candidate_info": {
        "commit_hash": "b7f4930ad7eebe45894e5ffd974c79cda5d320d1",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/b7f4930ad7eebe45894e5ffd974c79cda5d320d1",
        "files": [
          "bindings/python/.gitignore",
          "bindings/python/BUILDING.txt",
          "bindings/python/Makefile",
          "bindings/python/README.txt",
          "bindings/python/setup.py",
          "bindings/python/setup_cython.py"
        ],
        "message": "Python: Make cython work with extreme prejudice",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py",
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import glob",
          "4: import os",
          "5: import shutil",
          "7: import sys",
          "8: import platform",
          "",
          "[Removed Lines]",
          "6: import stat",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         pass",
          "57:     shutil.copytree(os.path.join(BUILD_DIR, \"arch\"), os.path.join(SRC_DIR, \"arch\"))",
          "60:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.[ch]\")))",
          "71:     for filename in src:",
          "72:         outpath = os.path.join(SRC_DIR, os.path.basename(filename))",
          "",
          "[Removed Lines]",
          "58:  shutil.copytree(os.path.join(BUILD_DIR, \"include\"), os.path.join(SRC_DIR, \"include\"))",
          "61:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.mk\"))",
          "63:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"Makefile\"))",
          "64:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"LICENSE*\"))",
          "65:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"README\"))",
          "66:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.TXT\"))",
          "67:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"RELEASE_NOTES\"))",
          "68:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"make.sh\"))",
          "69:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"CMakeLists.txt\"))",
          "",
          "[Added Lines]",
          "57:     shutil.copytree(os.path.join(BUILD_DIR, \"include\"), os.path.join(SRC_DIR, \"include\"))",
          "60:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.mk\")))",
          "62:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"Makefile\")))",
          "63:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"LICENSE*\")))",
          "64:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"README\")))",
          "65:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"*.TXT\")))",
          "66:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"RELEASE_NOTES\")))",
          "67:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"make.sh\")))",
          "68:     src.extend(glob.glob(os.path.join(BUILD_DIR, \"CMakeLists.txt\")))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "102:         os.system(\"nmake\")",
          "103:     elif SYSTEM == \"cygwin\":",
          "107:         else:",
          "111:     else:   # Unix",
          "114:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "115:     if STATIC_LIBRARY_FILE: shutil.copy(STATIC_LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Removed Lines]",
          "104:         os.chmod(\"make.sh\", stat.S_IREAD|stat.S_IEXEC)",
          "105:         if is_64bits:",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw64\")",
          "108:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cygwin-mingw32\")",
          "110:         so = \"capstone.dll\"",
          "112:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh\")",
          "",
          "[Added Lines]",
          "103:         if IS_64BITS:",
          "104:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "106:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "108:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:     cmdclass['develop'] = custom_develop",
          "155: except ImportError:",
          "158: if 'bdist_wheel' in sys.argv and '--plat-name' not in sys.argv:",
          "159:     idx = sys.argv.index('bdist_wheel') + 1",
          "",
          "[Removed Lines]",
          "156:     print \"Proper 'develop' support unavailable.\"",
          "",
          "[Added Lines]",
          "152:     print(\"Proper 'develop' support unavailable.\")",
          "",
          "---------------"
        ],
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from distutils.core import setup",
          "2: from distutils.extension import Extension",
          "4: from Cython.Distutils import build_ext",
          "6: VERSION = '3.0.4'",
          "30: # clean package directory first",
          "31: #import os.path, shutil, sys",
          "",
          "[Removed Lines]",
          "3: from distutils.command.install_lib import install_lib as _install",
          "8: compile_args = ['-O3', '-fomit-frame-pointer']",
          "10: ext_modules = [",
          "11:     Extension(\"capstone.ccapstone\", [\"pyx/ccapstone.pyx\"], libraries=[\"capstone\"], extra_compile_args=compile_args),",
          "12:     Extension(\"capstone.arm\", [\"pyx/arm.pyx\"], extra_compile_args=compile_args),",
          "13:     Extension(\"capstone.arm_const\", [\"pyx/arm_const.pyx\"], extra_compile_args=compile_args),",
          "14:     Extension(\"capstone.arm64\", [\"pyx/arm64.pyx\"], extra_compile_args=compile_args),",
          "15:     Extension(\"capstone.arm64_const\", [\"pyx/arm64_const.pyx\"], extra_compile_args=compile_args),",
          "16:     Extension(\"capstone.mips\", [\"pyx/mips.pyx\"], extra_compile_args=compile_args),",
          "17:     Extension(\"capstone.mips_const\", [\"pyx/mips_const.pyx\"], extra_compile_args=compile_args),",
          "18:     Extension(\"capstone.ppc\", [\"pyx/ppc.pyx\"], extra_compile_args=compile_args),",
          "19:     Extension(\"capstone.ppc_const\", [\"pyx/ppc_const.pyx\"], extra_compile_args=compile_args),",
          "20:     Extension(\"capstone.x86\", [\"pyx/x86.pyx\"], extra_compile_args=compile_args),",
          "21:     Extension(\"capstone.x86_const\", [\"pyx/x86_const.pyx\"], extra_compile_args=compile_args),",
          "22:     Extension(\"capstone.sparc\", [\"pyx/sparc.pyx\"], extra_compile_args=compile_args),",
          "23:     Extension(\"capstone.sparc_const\", [\"pyx/sparc_const.pyx\"], extra_compile_args=compile_args),",
          "24:     Extension(\"capstone.systemz\", [\"pyx/systemz.pyx\"], extra_compile_args=compile_args),",
          "25:     Extension(\"capstone.sysz_const\", [\"pyx/sysz_const.pyx\"], extra_compile_args=compile_args),",
          "26:     Extension(\"capstone.xcore\", [\"pyx/xcore.pyx\"], extra_compile_args=compile_args),",
          "27:     Extension(\"capstone.xcore_const\", [\"pyx/xcore_const.pyx\"], extra_compile_args=compile_args)",
          "28: ]",
          "",
          "[Added Lines]",
          "1: import os",
          "2: import sys",
          "3: import shutil",
          "4: from distutils import log",
          "7: from distutils.command.build import build",
          "11: SYSTEM = sys.platform",
          "14: # adapted from commit e504b81 of Nguyen Tan Cong",
          "15: # Reference: https://docs.python.org/2/library/platform.html#cross-platform",
          "16: IS_64BITS = sys.maxsize > 2**32",
          "18: # are we building from the repository or from a source distribution?",
          "19: ROOT_DIR = os.path.dirname(os.path.realpath(__file__))",
          "20: LIBS_DIR = os.path.join(ROOT_DIR, 'pyx', 'lib')",
          "21: HEADERS_DIR = os.path.join(ROOT_DIR, 'pyx', 'include')",
          "22: SRC_DIR = os.path.join(ROOT_DIR, 'src')",
          "23: BUILD_DIR = SRC_DIR if os.path.exists(SRC_DIR) else os.path.join(ROOT_DIR, '../..')",
          "24: PYPACKAGE_DIR = os.path.join(ROOT_DIR, 'capstone')",
          "25: CYPACKAGE_DIR = os.path.join(ROOT_DIR, 'pyx')",
          "27: if SYSTEM == 'darwin':",
          "28:     LIBRARY_FILE = \"libcapstone.dylib\"",
          "29:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "30: elif SYSTEM in ('win32', 'cygwin'):",
          "31:     LIBRARY_FILE = \"capstone.dll\"",
          "32:     STATIC_LIBRARY_FILE = None",
          "33: else:",
          "34:     LIBRARY_FILE = \"libcapstone.so\"",
          "35:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "37: compile_args = ['-O3', '-fomit-frame-pointer', '-I' + HEADERS_DIR]",
          "38: link_args = ['-L' + LIBS_DIR]",
          "40: ext_module_names = ['arm', 'arm_const', 'arm64', 'arm64_const', 'mips', 'mips_const', 'ppc', 'ppc_const', 'x86', 'x86_const', 'sparc', 'sparc_const', 'systemz', 'sysz_const', 'xcore', 'xcore_const']",
          "41: ext_modules = [Extension(\"capstone.ccapstone\",",
          "42:                          [\"pyx/ccapstone.pyx\"],",
          "43:                          libraries=[\"capstone\"],",
          "44:                          extra_compile_args=compile_args,",
          "45:                          extra_link_args=link_args)]",
          "46: ext_modules += [Extension(\"capstone.%s\" % name,",
          "47:                           [\"pyx/%s.pyx\" % name],",
          "48:                           extra_compile_args=compile_args,",
          "49:                           extra_link_args=link_args)",
          "50:                 for name in ext_module_names]",
          "52: def clean_bins():",
          "53:     shutil.rmtree(LIBS_DIR, ignore_errors=True)",
          "54:     shutil.rmtree(HEADERS_DIR, ignore_errors=True)",
          "56: def copy_pysources():",
          "57:     for fname in os.listdir(PYPACKAGE_DIR):",
          "58:         if not fname.endswith('.py'):",
          "59:             continue",
          "61:         if fname == '__init__.py':",
          "62:             shutil.copy(os.path.join(PYPACKAGE_DIR, fname), os.path.join(CYPACKAGE_DIR, fname))",
          "63:         else:",
          "64:             shutil.copy(os.path.join(PYPACKAGE_DIR, fname), os.path.join(CYPACKAGE_DIR, fname + 'x'))",
          "66: def build_libraries():",
          "67:     \"\"\"",
          "68:     Prepare the capstone directory for a binary distribution or installation.",
          "69:     Builds shared libraries and copies header files.",
          "71:     Will use a src/ dir if one exists in the current directory, otherwise assumes it's in the repo",
          "72:     \"\"\"",
          "73:     cwd = os.getcwd()",
          "74:     clean_bins()",
          "75:     os.mkdir(HEADERS_DIR)",
          "76:     os.mkdir(LIBS_DIR)",
          "78:     # copy public headers",
          "79:     shutil.copytree(os.path.join(BUILD_DIR, 'include'), os.path.join(HEADERS_DIR, 'capstone'))",
          "81:     os.chdir(BUILD_DIR)",
          "83:     # platform description refers at https://docs.python.org/2/library/sys.html#sys.platform",
          "84:     if SYSTEM == \"win32\":",
          "85:         # Windows build: this process requires few things:",
          "86:         #    - CMake + MSVC installed",
          "87:         #    - Run this command in an environment setup for MSVC",
          "88:         if not os.path.exists(\"build\"): os.mkdir(\"build\")",
          "89:         os.chdir(\"build\")",
          "90:         # Do not build tests & static library",
          "91:         os.system('cmake -DCMAKE_BUILD_TYPE=RELEASE -DCAPSTONE_BUILD_TESTS=0 -DCAPSTONE_BUILD_STATIC=0 -G \"NMake Makefiles\" ..')",
          "92:         os.system(\"nmake\")",
          "93:     elif SYSTEM == \"cygwin\":",
          "94:         if IS_64BITS:",
          "95:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw64\")",
          "96:         else:",
          "97:             os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh cygwin-mingw32\")",
          "99:     else:   # Unix",
          "100:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "102:     shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "103:     if STATIC_LIBRARY_FILE: shutil.copy(STATIC_LIBRARY_FILE, LIBS_DIR)",
          "104:     os.chdir(cwd)",
          "107: class custom_build(build):",
          "108:     def run(self):",
          "109:         log.info('Copying python sources')",
          "110:         copy_pysources()",
          "111:         log.info('Building C extensions')",
          "112:         build_libraries()",
          "113:         return build.run(self)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     packages     = ['capstone'],",
          "45:     name         = 'capstone',",
          "46:     version      = VERSION,",
          "48:     ext_modules  = ext_modules,",
          "49:     author       = 'Nguyen Anh Quynh',",
          "50:     author_email = 'aquynh@gmail.com',",
          "",
          "[Removed Lines]",
          "47:     cmdclass     = {'build_ext': build_ext},",
          "",
          "[Added Lines]",
          "132:     cmdclass     = {'build_ext': build_ext, 'build': custom_build},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:                 'License :: OSI Approved :: BSD License',",
          "55:                 'Programming Language :: Python :: 2',",
          "56:                 ],",
          "57: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     include_package_data=True,",
          "143:     package_data={",
          "144:         \"capstone\": [\"lib/*\", \"include/capstone/*\"],",
          "145:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01f6dda00aa80a3842765422e128bb0efaef9bd0",
      "candidate_info": {
        "commit_hash": "01f6dda00aa80a3842765422e128bb0efaef9bd0",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/01f6dda00aa80a3842765422e128bb0efaef9bd0",
        "files": [
          "bindings/java/TestArm.java",
          "bindings/java/TestArm64.java",
          "bindings/java/TestBasic.java",
          "bindings/java/TestMips.java",
          "bindings/java/TestPpc.java",
          "bindings/java/TestSparc.java",
          "bindings/java/TestSystemz.java",
          "bindings/java/TestX86.java",
          "bindings/java/TestXcore.java"
        ],
        "message": "java: Rename Test class to TestBasic",
        "before_after_code_files": [
          "bindings/javTestArm.java||bindings/java/TestArm.java",
          "bindings/javTestArm64.java||bindings/java/TestArm64.java",
          "bindings/javTestBasic.java||bindings/java/TestBasic.java",
          "bindings/javTestMips.java||bindings/java/TestMips.java",
          "bindings/javTestPpc.java||bindings/java/TestPpc.java",
          "bindings/javTestSparc.java||bindings/java/TestSparc.java",
          "bindings/javTestSystemz.java||bindings/java/TestSystemz.java",
          "bindings/javTestX86.java||bindings/java/TestX86.java",
          "bindings/javTestXcore.java||bindings/java/TestXcore.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/javTestArm.java||bindings/java/TestArm.java": [
          "File: bindings/javTestArm.java -> bindings/java/TestArm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     final TestBasic.platform[] all_tests = {",
          "112:       new TestBasic.platform(Capstone.CS_ARCH_ARM, Capstone.CS_MODE_ARM, hexString2Byte(ARM_CODE), \"ARM\"),",
          "113:       new TestBasic.platform(Capstone.CS_ARCH_ARM, Capstone.CS_MODE_THUMB, hexString2Byte(THUMB_CODE), \"Thumb\"),",
          "114:       new TestBasic.platform(Capstone.CS_ARCH_ARM, Capstone.CS_MODE_THUMB, hexString2Byte(ARM_CODE2), \"Thumb-mixed\"),",
          "115:       new TestBasic.platform(Capstone.CS_ARCH_ARM, Capstone.CS_MODE_THUMB, Capstone.CS_OPT_SYNTAX_NOREGNAME, hexString2Byte(THUMB_CODE2), \"Thumb-2 & register named with numbers\"),",
          "119:       TestBasic.platform test = all_tests[i];",
          "122:       System.out.println(\"Code: \" + TestBasic.stringToHex(test.code));",
          "",
          "---------------"
        ],
        "bindings/javTestArm64.java||bindings/java/TestArm64.java": [
          "File: bindings/javTestArm64.java -> bindings/java/TestArm64.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     final TestBasic.platform[] all_tests = {",
          "100:       new TestBasic.platform(Capstone.CS_ARCH_ARM64, Capstone.CS_MODE_ARM, hexString2Byte(ARM64_CODE), \"ARM-64\"),",
          "104:       TestBasic.platform test = all_tests[i];",
          "107:       System.out.println(\"Code: \" + TestBasic.stringToHex(test.code));",
          "",
          "---------------"
        ],
        "bindings/javTestBasic.java||bindings/java/TestBasic.java": [
          "File: bindings/javTestBasic.java -> bindings/java/TestBasic.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: public class TestBasic {",
          "",
          "---------------"
        ],
        "bindings/javTestMips.java||bindings/java/TestMips.java": [
          "File: bindings/javTestMips.java -> bindings/java/TestMips.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     final TestBasic.platform[] all_tests = {",
          "64:       new TestBasic.platform(Capstone.CS_ARCH_MIPS, Capstone.CS_MODE_MIPS32 + Capstone.CS_MODE_BIG_ENDIAN, hexString2Byte(MIPS_CODE), \"MIPS-32 (Big-endian)\"),",
          "65:       new TestBasic.platform(Capstone.CS_ARCH_MIPS, Capstone.CS_MODE_MIPS64 + Capstone.CS_MODE_LITTLE_ENDIAN, hexString2Byte(MIPS_CODE2), \"MIPS-64-EL (Little-endian)\"),",
          "69:       TestBasic.platform test = all_tests[i];",
          "72:       System.out.println(\"Code: \" + TestBasic.stringToHex(test.code));",
          "",
          "---------------"
        ],
        "bindings/javTestPpc.java||bindings/java/TestPpc.java": [
          "File: bindings/javTestPpc.java -> bindings/java/TestPpc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     final TestBasic.platform[] all_tests = {",
          "71:       new TestBasic.platform(Capstone.CS_ARCH_PPC, Capstone.CS_MODE_BIG_ENDIAN, hexString2Byte(PPC_CODE), \"PPC-64\"),",
          "75:       TestBasic.platform test = all_tests[i];",
          "78:       System.out.println(\"Code: \" + TestBasic.stringToHex(test.code));",
          "",
          "---------------"
        ],
        "bindings/javTestSparc.java||bindings/java/TestSparc.java": [
          "File: bindings/javTestSparc.java -> bindings/java/TestSparc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     final TestBasic.platform[] all_tests = {",
          "71:       new TestBasic.platform(Capstone.CS_ARCH_SPARC, Capstone.CS_MODE_BIG_ENDIAN, hexString2Byte(SPARC_CODE), \"Sparc\"),",
          "72:       new TestBasic.platform(Capstone.CS_ARCH_SPARC, Capstone.CS_MODE_BIG_ENDIAN + Capstone.CS_MODE_V9, hexString2Byte(SPARCV9_CODE), \"SparcV9\"),",
          "76:       TestBasic.platform test = all_tests[i];",
          "79:       System.out.println(\"Code: \" + TestBasic.stringToHex(test.code));",
          "",
          "---------------"
        ],
        "bindings/javTestSystemz.java||bindings/java/TestSystemz.java": [
          "File: bindings/javTestSystemz.java -> bindings/java/TestSystemz.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     final TestBasic.platform[] all_tests = {",
          "71:       new TestBasic.platform(Capstone.CS_ARCH_SYSZ, 0, hexString2Byte(SYSZ_CODE), \"SystemZ\"),",
          "75:       TestBasic.platform test = all_tests[i];",
          "78:       System.out.println(\"Code: \" + TestBasic.stringToHex(test.code));",
          "",
          "---------------"
        ],
        "bindings/javTestX86.java||bindings/java/TestX86.java": [
          "File: bindings/javTestX86.java -> bindings/java/TestX86.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     final TestBasic.platform[] all_tests = {",
          "141:       new TestBasic.platform(Capstone.CS_ARCH_X86, Capstone.CS_MODE_16, hexString2Byte(X86_CODE16), \"X86 16bit (Intel syntax)\"),",
          "142:       new TestBasic.platform(Capstone.CS_ARCH_X86, Capstone.CS_MODE_32, Capstone.CS_OPT_SYNTAX_ATT, hexString2Byte(X86_CODE32), \"X86 32 (AT&T syntax)\"),",
          "143:       new TestBasic.platform(Capstone.CS_ARCH_X86, Capstone.CS_MODE_32, hexString2Byte(X86_CODE32), \"X86 32 (Intel syntax)\"),",
          "144:       new TestBasic.platform(Capstone.CS_ARCH_X86, Capstone.CS_MODE_64, hexString2Byte(X86_CODE64), \"X86 64 (Intel syntax)\"),",
          "148:       TestBasic.platform test = all_tests[i];",
          "151:       System.out.println(\"Code: \" + TestBasic.stringToHex(test.code));",
          "",
          "---------------"
        ],
        "bindings/javTestXcore.java||bindings/java/TestXcore.java": [
          "File: bindings/javTestXcore.java -> bindings/java/TestXcore.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:     final TestBasic.platform[] all_tests = {",
          "64:       new TestBasic.platform(Capstone.CS_ARCH_XCORE, Capstone.CS_MODE_BIG_ENDIAN, hexString2Byte(XCORE_CODE), \"XCore\"),",
          "68:       TestBasic.platform test = all_tests[i];",
          "71:       System.out.println(\"Code: \" + TestBasic.stringToHex(test.code));",
          "",
          "---------------"
        ]
      }
    }
  ]
}