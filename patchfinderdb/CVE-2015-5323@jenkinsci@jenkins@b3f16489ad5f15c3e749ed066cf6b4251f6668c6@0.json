{
  "cve_id": "CVE-2015-5323",
  "cve_desc": "Jenkins before 1.638 and LTS before 1.625.2 do not properly restrict access to API tokens which might allow remote administrators to gain privileges and run scripts by using an API token of another user.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "b3f16489ad5f15c3e749ed066cf6b4251f6668c6",
  "patch_info": {
    "commit_hash": "b3f16489ad5f15c3e749ed066cf6b4251f6668c6",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/b3f16489ad5f15c3e749ed066cf6b4251f6668c6",
    "files": [
      "core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "core/src/main/resources/jenkins/security/Messages.properties",
      "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
    ],
    "message": "[FIXED SECURITY-200] - Do not expose Api tokens to other users by default\n\nSystem property can be used to restore the original behavior",
    "before_after_code_files": [
      "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties",
      "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
      "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: import hudson.model.User;",
      "30: import hudson.model.UserProperty;",
      "31: import hudson.model.UserPropertyDescriptor;",
      "32: import hudson.util.HttpResponses;",
      "33: import hudson.util.Secret;",
      "34: import jenkins.model.Jenkins;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import hudson.security.ACL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: import java.io.IOException;",
      "43: import java.security.SecureRandom;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: import javax.annotation.Nonnull;",
      "46: import org.apache.commons.lang.StringUtils;",
      "47: import org.kohsuke.accmod.Restricted;",
      "48: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: public class ApiTokenProperty extends UserProperty {",
      "54:     private volatile Secret apiToken;",
      "56:     @DataBoundConstructor",
      "57:     public ApiTokenProperty() {",
      "58:         _changeApiToken();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67:     private static final boolean SHOW_TOKEN_TO_ADMINS =",
      "68:             Boolean.getBoolean(ApiTokenProperty.class.getName() + \".showTokenToAdmins\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "66:         apiToken = Secret.fromString(seed);",
      "67:     }",
      "69:     public String getApiToken() {",
      "70:         String p = apiToken.getPlainText();",
      "71:         if (p.equals(Util.getDigestOf(Jenkins.getInstance().getSecretKey()+\":\"+user.getId()))) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "93:     @Nonnull",
      "95:         return hasPermissionToSeeToken() ? getApiTokenInsecure()",
      "96:                 : Messages.ApiTokenProperty_ChangeToken_TokenIsHidden();",
      "97:     }",
      "99:     @Nonnull",
      "100:     @Restricted(NoExternalUse.class)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "77:     }",
      "79:     public boolean matchesPassword(String password) {",
      "81:     }",
      "83:     public void changeApiToken() throws IOException {",
      "",
      "[Removed Lines]",
      "80:         return getApiToken().equals(password);",
      "",
      "[Added Lines]",
      "112:         return  getApiTokenInsecure().equals(password);",
      "113:     }",
      "115:     private boolean hasPermissionToSeeToken() {",
      "116:         final Jenkins jenkins = Jenkins.getInstance();",
      "117:         if (jenkins == null) {",
      "118:             return false; // Should not happen - we don't display UIs in this stage",
      "119:         }",
      "122:         if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {",
      "123:             return true;",
      "124:         }",
      "127:         final User current = User.current();",
      "128:         if (current == null) { // Anonymous",
      "129:             return false;",
      "130:         }",
      "133:         if (Jenkins.getAuthentication() == ACL.SYSTEM) {",
      "134:             return true;",
      "135:         }",
      "139:         return StringUtils.equals(user.getId(), current.getId());",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "125:                 p.changeApiToken();",
      "126:             }",
      "127:             rsp.setHeader(\"script\",\"document.getElementById('apiToken').value='\"+p.getApiToken()+\"'\");",
      "129:         }",
      "130:     }",
      "",
      "[Removed Lines]",
      "128:             return HttpResponses.html(Messages.ApiTokenProperty_ChangeToken_Success());",
      "",
      "[Added Lines]",
      "187:             return HttpResponses.html(p.hasPermissionToSeeToken()",
      "188:                     ? Messages.ApiTokenProperty_ChangeToken_Success()",
      "189:                     : Messages.ApiTokenProperty_ChangeToken_SuccessHidden());",
      "",
      "---------------"
    ],
    "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties": [
      "File: core/src/main/resources/jenkins/security/Messages.properties -> core/src/main/resources/jenkins/security/Messages.properties",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: # THE SOFTWARE.",
      "23: ApiTokenProperty.DisplayName=API Token",
      "25: RekeySecretAdminMonitor.DisplayName=Re-keying",
      "",
      "[Removed Lines]",
      "24: ApiTokenProperty.ChangeToken.Success=<div>Updated</div>",
      "",
      "[Added Lines]",
      "24: ApiTokenProperty.ChangeToken.TokenIsHidden=Token is hidden",
      "25: ApiTokenProperty.ChangeToken.Success=<div>Updated. See the new token in the field above</div>",
      "26: ApiTokenProperty.ChangeToken.SuccessHidden=<div>Updated. You need to login as the user to see the token</div>",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
      "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "6: import hudson.Util;",
      "7: import hudson.model.User;",
      "8: import jenkins.model.Jenkins;",
      "9: import org.apache.commons.httpclient.Credentials;",
      "10: import org.apache.commons.httpclient.HttpClient;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: import hudson.security.ACL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: import org.jvnet.hudson.test.HudsonTestCase;",
      "18: import java.util.concurrent.Callable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import javax.annotation.Nonnull;",
      "21: import org.jvnet.hudson.test.Issue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "27:     public void testBasics() throws Exception {",
      "28:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "29:         User u = User.get(\"foo\");",
      "31:         final String token = t.getApiToken();",
      "49:             @Override",
      "55:             }",
      "56:         });",
      "59:         assertEquals(u,wc.executeOnServer(new Callable<User>() {",
      "60:             public User call() throws Exception {",
      "61:                 return User.current();",
      "62:             }",
      "63:         }));",
      "64:     }",
      "66:     public void testSecurity49Upgrade() throws Exception {",
      "",
      "[Removed Lines]",
      "30:         ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "34:         HtmlPage config = createWebClient().goTo(u.getUrl() + \"/configure\");",
      "35:         HtmlForm form = config.getFormByName(\"config\");",
      "36:         assertEquals(token, form.getInputByName(\"_.apiToken\").getValueAttribute());",
      "39:         submit(form);",
      "40:         assertSame(t, u.getProperty(ApiTokenProperty.class));",
      "42:         WebClient wc = createWebClient();",
      "43:         wc.setCredentialsProvider(new CredentialsProvider() {",
      "44:             public Credentials getCredentials(AuthScheme scheme, String host, int port, boolean proxy) throws CredentialsNotAvailableException {",
      "45:                 return new UsernamePasswordCredentials(\"foo\", token);",
      "46:             }",
      "47:         });",
      "48:         wc.setWebConnection(new HttpWebConnection(wc) {",
      "50:             protected HttpClient getHttpClient() {",
      "51:                 HttpClient c = super.getHttpClient();",
      "52:                 c.getParams().setAuthenticationPreemptive(true);",
      "53:                 c.getState().setCredentials(new AuthScope(\"localhost\", localPort, AuthScope.ANY_REALM), new UsernamePasswordCredentials(\"foo\", token));",
      "54:                 return c;",
      "",
      "[Added Lines]",
      "33:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "37:         ACL.impersonate(u.impersonate(), new Runnable() {",
      "39:             public void run() {",
      "40:                 assertEquals(\"User is unable to get its own token\", token, t.getApiToken());",
      "45:         WebClient wc = createClientForUser(\"foo\");",
      "53:         HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");",
      "54:         HtmlForm form = config.getFormByName(\"config\");",
      "55:         assertEquals(token, form.getInputByName(\"_.apiToken\").getValueAttribute());",
      "58:         submit(form);",
      "59:         assertSame(t, u.getProperty(ApiTokenProperty.class));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "85:         assertTrue(t.getApiToken().equals(Util.getDigestOf(historicalInitialValue+\"somethingElse\")));",
      "87:     }",
      "88: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:     @Issue(\"SECURITY-200\")",
      "86:     public void testAdminsShouldBeUnableToSeeTokensByDefault() throws Exception {",
      "87:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "88:         User u = User.get(\"foo\");",
      "89:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "90:         final String token = t.getApiToken();",
      "93:         WebClient wc = createClientForUser(\"bar\");",
      "94:         HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");",
      "95:         HtmlForm form = config.getFormByName(\"config\");",
      "96:         assertEquals(Messages.ApiTokenProperty_ChangeToken_TokenIsHidden(), form.getInputByName(\"_.apiToken\").getValueAttribute());",
      "97:     }",
      "99:     @Issue(\"SECURITY-200\")",
      "100:     public void testAdminsShouldBeUnableToChangeTokensByDefault() throws Exception {",
      "101:         jenkins.setSecurityRealm(createDummySecurityRealm());",
      "102:         User foo = User.get(\"foo\");",
      "103:         User bar = User.get(\"bar\");",
      "104:         final ApiTokenProperty t = foo.getProperty(ApiTokenProperty.class);",
      "105:         final ApiTokenProperty.DescriptorImpl descriptor = (ApiTokenProperty.DescriptorImpl) t.getDescriptor();",
      "108:         WebClient wc = createClientForUser(\"bar\");",
      "109:         HtmlPage res = wc.goTo(foo.getUrl() + \"/\" + descriptor.getDescriptorUrl()+ \"/changeToken\");",
      "110:         assertEquals(\"Update token response is incorrect\",",
      "111:                 Messages.ApiTokenProperty_ChangeToken_SuccessHidden(), \"<div>\" + res.getBody().asText() + \"</div>\");",
      "112:     }",
      "114:     @Nonnull",
      "115:     private WebClient createClientForUser(final String username) {",
      "116:         User u = User.get(username);",
      "117:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
      "119:         final String token = t.getApiTokenInsecure();",
      "121:         WebClient wc = createWebClient();",
      "122:         wc.setCredentialsProvider(new CredentialsProvider() {",
      "123:             @Override",
      "124:             public Credentials getCredentials(AuthScheme scheme, String host, int port, boolean proxy)",
      "125:                     throws CredentialsNotAvailableException {",
      "126:                 return new UsernamePasswordCredentials(username, token);",
      "127:             }",
      "128:         });",
      "129:         wc.setWebConnection(new HttpWebConnection(wc) {",
      "130:             @Override",
      "131:             protected HttpClient getHttpClient() {",
      "132:                 HttpClient c = super.getHttpClient();",
      "133:                 c.getParams().setAuthenticationPreemptive(true);",
      "134:                 c.getState().setCredentials(new AuthScope(\"localhost\", localPort, AuthScope.ANY_REALM),",
      "135:                         new UsernamePasswordCredentials(username, token));",
      "136:                 return c;",
      "137:             }",
      "138:         });",
      "139:         return wc;",
      "140:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "79e0b64322a6b15e0b80ac6511c9aa74383642be",
      "candidate_info": {
        "commit_hash": "79e0b64322a6b15e0b80ac6511c9aa74383642be",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/79e0b64322a6b15e0b80ac6511c9aa74383642be",
        "files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java"
        ],
        "message": "[FIX SECURITY-241] Compare API tokens in constant time",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
          "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.kohsuke.stapler.StaplerResponse;",
          "43: import java.io.IOException;",
          "44: import java.security.SecureRandom;",
          "45: import javax.annotation.Nonnull;",
          "46: import org.apache.commons.lang.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import java.security.MessageDigest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     }",
          "111:     public boolean matchesPassword(String password) {",
          "113:     }",
          "115:     private boolean hasPermissionToSeeToken() {",
          "",
          "[Removed Lines]",
          "112:         return  getApiTokenInsecure().equals(password);",
          "",
          "[Added Lines]",
          "113:         String token = getApiTokenInsecure();",
          "114:         return MessageDigest.isEqual(password.getBytes(), token.getBytes());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c86d079387afcc234be53cabfc32efd5041cc4b8",
      "candidate_info": {
        "commit_hash": "c86d079387afcc234be53cabfc32efd5041cc4b8",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/c86d079387afcc234be53cabfc32efd5041cc4b8",
        "files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java"
        ],
        "message": "Jenkins.getInstance() is safe to assume non-null\n\n- Only ever called after extensions are on the classpath and before termination",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
          "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     }",
          "120:     private boolean hasPermissionToSeeToken() {",
          "127:         if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {",
          "128:             return true;",
          "",
          "[Removed Lines]",
          "121:         final Jenkins jenkins = Jenkins.getInstanceOrNull();",
          "122:         if (jenkins == null) {",
          "123:             return false; // Should not happen - we don't display UIs in this stage",
          "124:         }",
          "",
          "[Added Lines]",
          "121:         final Jenkins jenkins = Jenkins.getInstance();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "363cbc3671f51ff08fb533e6e115f82d4d8d7f10",
      "candidate_info": {
        "commit_hash": "363cbc3671f51ff08fb533e6e115f82d4d8d7f10",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/363cbc3671f51ff08fb533e6e115f82d4d8d7f10",
        "files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "core/src/main/resources/jenkins/security/Messages.properties",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ],
        "message": "Merge branch 'security-stable-1.596' into security-stable-1.609\n\nConflicts:\n\ttest/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties",
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
            "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties",
            "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java",
            "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties",
            "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
          "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import hudson.model.User;",
          "30: import hudson.model.UserProperty;",
          "31: import hudson.model.UserPropertyDescriptor;",
          "32: import hudson.util.HttpResponses;",
          "33: import hudson.util.Secret;",
          "34: import jenkins.model.Jenkins;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import hudson.security.ACL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import java.io.IOException;",
          "43: import java.security.SecureRandom;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import javax.annotation.Nonnull;",
          "46: import org.apache.commons.lang.StringUtils;",
          "47: import org.kohsuke.accmod.Restricted;",
          "48: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: public class ApiTokenProperty extends UserProperty {",
          "54:     private volatile Secret apiToken;",
          "56:     @DataBoundConstructor",
          "57:     public ApiTokenProperty() {",
          "58:         _changeApiToken();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     private static final boolean SHOW_TOKEN_TO_ADMINS =",
          "68:             Boolean.getBoolean(ApiTokenProperty.class.getName() + \".showTokenToAdmins\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:         apiToken = Secret.fromString(seed);",
          "67:     }",
          "69:     public String getApiToken() {",
          "70:         String p = apiToken.getPlainText();",
          "71:         if (p.equals(Util.getDigestOf(Jenkins.getInstance().getSecretKey()+\":\"+user.getId()))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     @Nonnull",
          "95:         return hasPermissionToSeeToken() ? getApiTokenInsecure()",
          "96:                 : Messages.ApiTokenProperty_ChangeToken_TokenIsHidden();",
          "97:     }",
          "99:     @Nonnull",
          "100:     @Restricted(NoExternalUse.class)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77:     }",
          "79:     public boolean matchesPassword(String password) {",
          "81:     }",
          "83:     public void changeApiToken() throws IOException {",
          "",
          "[Removed Lines]",
          "80:         return getApiToken().equals(password);",
          "",
          "[Added Lines]",
          "112:         return  getApiTokenInsecure().equals(password);",
          "113:     }",
          "115:     private boolean hasPermissionToSeeToken() {",
          "116:         final Jenkins jenkins = Jenkins.getInstance();",
          "117:         if (jenkins == null) {",
          "118:             return false; // Should not happen - we don't display UIs in this stage",
          "119:         }",
          "122:         if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {",
          "123:             return true;",
          "124:         }",
          "127:         final User current = User.current();",
          "128:         if (current == null) { // Anonymous",
          "129:             return false;",
          "130:         }",
          "133:         if (Jenkins.getAuthentication() == ACL.SYSTEM) {",
          "134:             return true;",
          "135:         }",
          "139:         return StringUtils.equals(user.getId(), current.getId());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:                 p.changeApiToken();",
          "126:             }",
          "127:             rsp.setHeader(\"script\",\"document.getElementById('apiToken').value='\"+p.getApiToken()+\"'\");",
          "129:         }",
          "130:     }",
          "",
          "[Removed Lines]",
          "128:             return HttpResponses.html(Messages.ApiTokenProperty_ChangeToken_Success());",
          "",
          "[Added Lines]",
          "187:             return HttpResponses.html(p.hasPermissionToSeeToken()",
          "188:                     ? Messages.ApiTokenProperty_ChangeToken_Success()",
          "189:                     : Messages.ApiTokenProperty_ChangeToken_SuccessHidden());",
          "",
          "---------------"
        ],
        "core/src/main/resources/jenkins/security/Messages.properties||core/src/main/resources/jenkins/security/Messages.properties": [
          "File: core/src/main/resources/jenkins/security/Messages.properties -> core/src/main/resources/jenkins/security/Messages.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: # THE SOFTWARE.",
          "23: ApiTokenProperty.DisplayName=API Token",
          "25: RekeySecretAdminMonitor.DisplayName=Re-keying",
          "",
          "[Removed Lines]",
          "24: ApiTokenProperty.ChangeToken.Success=<div>Updated</div>",
          "",
          "[Added Lines]",
          "24: ApiTokenProperty.ChangeToken.TokenIsHidden=Token is hidden",
          "25: ApiTokenProperty.ChangeToken.Success=<div>Updated. See the new token in the field above</div>",
          "26: ApiTokenProperty.ChangeToken.SuccessHidden=<div>Updated. You need to login as the user to see the token</div>",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
          "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "11: import hudson.Util;",
          "12: import hudson.model.User;",
          "13: import jenkins.model.Jenkins;",
          "14: import org.apache.commons.httpclient.Credentials;",
          "15: import org.apache.commons.httpclient.HttpClient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import hudson.security.ACL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
          "26: import java.util.concurrent.Callable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import javax.annotation.Nonnull;",
          "29: import org.jvnet.hudson.test.Issue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:     public void basics() throws Exception {",
          "41:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "42:         User u = User.get(\"foo\");",
          "44:         final String token = t.getApiToken();",
          "62:             @Override",
          "68:             }",
          "69:         });",
          "72:         assertEquals(u,wc.executeOnServer(new Callable<User>() {",
          "73:             public User call() throws Exception {",
          "74:                 return User.current();",
          "75:             }",
          "76:         }));",
          "77:     }",
          "79:     @Test",
          "",
          "[Removed Lines]",
          "43:         ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "47:         HtmlPage config = j.createWebClient().goTo(u.getUrl() + \"/configure\");",
          "48:         HtmlForm form = config.getFormByName(\"config\");",
          "49:         assertEquals(token, form.getInputByName(\"_.apiToken\").getValueAttribute());",
          "52:         j.submit(form);",
          "53:         assertSame(t, u.getProperty(ApiTokenProperty.class));",
          "55:         WebClient wc = j.createWebClient();",
          "56:         wc.setCredentialsProvider(new CredentialsProvider() {",
          "57:             public Credentials getCredentials(AuthScheme scheme, String host, int port, boolean proxy) throws CredentialsNotAvailableException {",
          "58:                 return new UsernamePasswordCredentials(\"foo\", token);",
          "59:             }",
          "60:         });",
          "61:         wc.setWebConnection(new HttpWebConnection(wc) {",
          "63:             protected HttpClient getHttpClient() {",
          "64:                 HttpClient c = super.getHttpClient();",
          "65:                 c.getParams().setAuthenticationPreemptive(true);",
          "66:                 c.getState().setCredentials(new AuthScope(\"localhost\", AuthScope.ANY_PORT, AuthScope.ANY_REALM), new UsernamePasswordCredentials(\"foo\", token));",
          "67:                 return c;",
          "",
          "[Added Lines]",
          "46:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "50:         ACL.impersonate(u.impersonate(), new Runnable() {",
          "52:             public void run() {",
          "53:                 assertEquals(\"User is unable to get its own token\", token, t.getApiToken());",
          "58:         WebClient wc = createClientForUser(\"foo\");",
          "66:         HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");",
          "67:         HtmlForm form = config.getFormByName(\"config\");",
          "68:         assertEquals(token, form.getInputByName(\"_.apiToken\").getValueAttribute());",
          "71:         j.submit(form);",
          "72:         assertSame(t, u.getProperty(ApiTokenProperty.class));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:         u.addProperty(t);",
          "99:         assertTrue(t.getApiToken().equals(Util.getDigestOf(historicalInitialValue+\"somethingElse\")));",
          "100:     }",
          "101: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     @Issue(\"SECURITY-200\")",
          "99:     @Test",
          "100:     public void adminsShouldBeUnableToSeeTokensByDefault() throws Exception {",
          "101:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "102:         User u = User.get(\"foo\");",
          "103:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "104:         final String token = t.getApiToken();",
          "107:         WebClient wc = createClientForUser(\"bar\");",
          "108:         HtmlPage config = wc.goTo(u.getUrl() + \"/configure\");",
          "109:         HtmlForm form = config.getFormByName(\"config\");",
          "110:         assertEquals(Messages.ApiTokenProperty_ChangeToken_TokenIsHidden(), form.getInputByName(\"_.apiToken\").getValueAttribute());",
          "111:     }",
          "113:     @Issue(\"SECURITY-200\")",
          "114:     @Test",
          "115:     public void adminsShouldBeUnableToChangeTokensByDefault() throws Exception {",
          "116:         j.jenkins.setSecurityRealm(j.createDummySecurityRealm());",
          "117:         User foo = User.get(\"foo\");",
          "118:         User bar = User.get(\"bar\");",
          "119:         final ApiTokenProperty t = foo.getProperty(ApiTokenProperty.class);",
          "120:         final ApiTokenProperty.DescriptorImpl descriptor = (ApiTokenProperty.DescriptorImpl) t.getDescriptor();",
          "123:         WebClient wc = createClientForUser(\"bar\");",
          "124:         HtmlPage res = wc.goTo(foo.getUrl() + \"/\" + descriptor.getDescriptorUrl()+ \"/changeToken\");",
          "125:         assertEquals(\"Update token response is incorrect\",",
          "126:                 Messages.ApiTokenProperty_ChangeToken_SuccessHidden(), \"<div>\" + res.getBody().asText() + \"</div>\");",
          "127:     }",
          "129:     @Nonnull",
          "130:     private WebClient createClientForUser(final String username) {",
          "131:         User u = User.get(username);",
          "132:         final ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);",
          "134:         final String token = t.getApiTokenInsecure();",
          "136:         WebClient wc = j.createWebClient();",
          "137:         wc.setCredentialsProvider(new CredentialsProvider() {",
          "138:             @Override",
          "139:             public Credentials getCredentials(AuthScheme scheme, String host, int port, boolean proxy)",
          "140:                     throws CredentialsNotAvailableException {",
          "141:                 return new UsernamePasswordCredentials(username, token);",
          "142:             }",
          "143:         });",
          "144:         wc.setWebConnection(new HttpWebConnection(wc) {",
          "145:             @Override",
          "146:             protected HttpClient getHttpClient() {",
          "147:                 HttpClient c = super.getHttpClient();",
          "148:                 c.getParams().setAuthenticationPreemptive(true);",
          "149:                 c.getState().setCredentials(new AuthScope(\"localhost\", AuthScope.ANY_PORT, AuthScope.ANY_REALM),",
          "150:                         new UsernamePasswordCredentials(username, token));",
          "151:                 return c;",
          "152:             }",
          "153:         });",
          "154:         return wc;",
          "155:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e94c399139e405de3bd66372849751d8df02d80e",
      "candidate_info": {
        "commit_hash": "e94c399139e405de3bd66372849751d8df02d80e",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/e94c399139e405de3bd66372849751d8df02d80e",
        "files": [
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ],
        "message": "Simplified HTTP calls with basic auth. (#2441)",
        "before_after_code_files": [
          "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
          ],
          "candidate": [
            "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/jenkins/security/ApiTokenPropertyTest.java||test/src/test/java/jenkins/security/ApiTokenPropertyTest.java": [
          "File: test/src/test/java/jenkins/security/ApiTokenPropertyTest.java -> test/src/test/java/jenkins/security/ApiTokenPropertyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import static org.junit.Assert.assertSame;",
          "6: import static org.junit.Assert.assertTrue;",
          "14: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
          "15: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "35: import hudson.Util;",
          "36: import hudson.model.User;",
          "37: import hudson.security.ACL;",
          "38: import hudson.security.ACLContext;",
          "39: import jenkins.model.Jenkins;",
          "40: import org.junit.Rule;",
          "41: import org.junit.Test;",
          "42: import org.jvnet.hudson.test.JenkinsRule;",
          "43: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
          "49: import java.util.concurrent.Callable;",
          "50: import javax.annotation.Nonnull;",
          "51: import org.jvnet.hudson.test.Issue;",
          "",
          "[Removed Lines]",
          "8: import com.gargoylesoftware.htmlunit.DownloadedContent;",
          "9: import com.gargoylesoftware.htmlunit.HttpWebConnection;",
          "10: import com.gargoylesoftware.htmlunit.WebConnection;",
          "11: import com.gargoylesoftware.htmlunit.WebRequest;",
          "12: import com.gargoylesoftware.htmlunit.WebResponse;",
          "13: import com.gargoylesoftware.htmlunit.WebResponseData;",
          "16: import com.gargoylesoftware.htmlunit.util.NameValuePair;",
          "17: import com.gargoylesoftware.htmlunit.util.UrlUtils;",
          "18: import hidden.jth.org.apache.http.Header;",
          "19: import hidden.jth.org.apache.http.HttpEntity;",
          "20: import hidden.jth.org.apache.http.HttpHost;",
          "21: import hidden.jth.org.apache.http.auth.AuthScheme;",
          "22: import hidden.jth.org.apache.http.auth.AuthScope;",
          "23: import hidden.jth.org.apache.http.auth.Credentials;",
          "24: import hidden.jth.org.apache.http.auth.UsernamePasswordCredentials;",
          "25: import hidden.jth.org.apache.http.client.AuthCache;",
          "26: import hidden.jth.org.apache.http.client.CredentialsProvider;",
          "27: import hidden.jth.org.apache.http.client.methods.CloseableHttpResponse;",
          "28: import hidden.jth.org.apache.http.client.methods.HttpGet;",
          "29: import hidden.jth.org.apache.http.client.protocol.HttpClientContext;",
          "30: import hidden.jth.org.apache.http.impl.auth.BasicScheme;",
          "31: import hidden.jth.org.apache.http.impl.client.BasicAuthCache;",
          "32: import hidden.jth.org.apache.http.impl.client.BasicCredentialsProvider;",
          "33: import hidden.jth.org.apache.http.impl.client.CloseableHttpClient;",
          "34: import hidden.jth.org.apache.http.impl.client.HttpClientBuilder;",
          "45: import java.io.IOException;",
          "46: import java.net.URL;",
          "47: import java.util.ArrayList;",
          "48: import java.util.List;",
          "",
          "[Added Lines]",
          "14: import hudson.util.Scrambler;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         final String token = t.getApiTokenInsecure();",
          "155:         WebClient wc = j.createWebClient();",
          "179:         return wc;",
          "180:     }",
          "248: }",
          "",
          "[Removed Lines]",
          "156:         wc.setCredentialsProvider(new CredentialsProvider() {",
          "157:             @Override",
          "158:             public void clear() {",
          "160:             }",
          "162:             @Override",
          "163:             public Credentials getCredentials(AuthScope as) {",
          "164:                 return new UsernamePasswordCredentials(username, token);",
          "165:             }",
          "167:             @Override",
          "168:             public void setCredentials(AuthScope as, Credentials c) {",
          "170:             }",
          "171:         });",
          "174:         CredentialsProvider provider = new BasicCredentialsProvider();",
          "175:         provider.setCredentials(new AuthScope(\"localhost\", AuthScope.ANY_PORT, AuthScope.ANY_REALM),",
          "176:                                 new UsernamePasswordCredentials(username, token));",
          "177:         wc.setCredentialsProvider(provider);",
          "178:         wc.login(username);",
          "182:     private void configureWebConnection(final WebClient wc, final String username, final String token) throws IOException {",
          "184:         final UsernamePasswordCredentials fooCreds = new UsernamePasswordCredentials(username, token);",
          "186:         URL hostUrl = j.getURL();",
          "187:         final HttpHost targetHost = new HttpHost(hostUrl.getHost(), hostUrl.getPort(), hostUrl.getProtocol());",
          "188:         CredentialsProvider credsProvider = new BasicCredentialsProvider() {",
          "189:             @Override",
          "190:             public Credentials getCredentials(AuthScope authscope) {",
          "191:                 return fooCreds;",
          "192:             }",
          "193:         };",
          "194:         credsProvider.setCredentials(",
          "195:                 new AuthScope(\"localhost\", AuthScope.ANY_PORT, AuthScope.ANY_REALM),",
          "196:                 fooCreds);",
          "199:         AuthCache authCache = new BasicAuthCache();",
          "201:         AuthScheme authScheme = new BasicScheme();",
          "202:         authCache.put(targetHost, authScheme);",
          "205:         final HttpClientContext context = HttpClientContext.create();",
          "206:         context.setCredentialsProvider(credsProvider);",
          "207:         context.setAuthCache(authCache);",
          "209:         wc.setCredentialsProvider(credsProvider);",
          "214:         wc.setWebConnection(new WebConnection() {",
          "215:             @Override",
          "216:             public WebResponse getResponse(WebRequest request) throws IOException {",
          "217:                 try {",
          "218:                     long startTime = System.currentTimeMillis();",
          "220:                     HttpClientBuilder builder = HttpClientBuilder.create();",
          "221:                     CloseableHttpClient httpClient = builder.build();",
          "222:                     URL url = UrlUtils.encodeUrl(request.getUrl(), false, request.getCharset());",
          "223:                     HttpGet method = new HttpGet(url.toURI());",
          "225:                     CloseableHttpResponse response = httpClient.execute(targetHost, method, context);",
          "227:                     HttpEntity httpEntity = response.getEntity();",
          "228:                     DownloadedContent responseBody = HttpWebConnection.downloadContent(httpEntity.getContent(), wc.getOptions().getMaxInMemory());",
          "230:                     String statusMessage = response.getStatusLine().getReasonPhrase();",
          "231:                     if (statusMessage == null) {",
          "232:                         statusMessage = \"Unknown status message\";",
          "233:                     }",
          "234:                     int statusCode = response.getStatusLine().getStatusCode();",
          "235:                     List<NameValuePair> headers = new ArrayList<>();",
          "236:                     for (final Header header : response.getAllHeaders()) {",
          "237:                         headers.add(new NameValuePair(header.getName(), header.getValue()));",
          "238:                     }",
          "240:                     WebResponseData responseData = new WebResponseData(responseBody, statusCode, statusMessage, headers);",
          "241:                     return new WebResponse(responseData, request, (System.currentTimeMillis() - startTime));",
          "242:                 } catch (Exception e) {",
          "243:                     throw new AssertionError(\"Failed to execute WebRequest.\", e);",
          "244:                 }",
          "245:             }",
          "246:         });",
          "247:     }",
          "",
          "[Added Lines]",
          "128:         wc.addRequestHeader(\"Authorization\", \"Basic \" + Scrambler.scramble(username + \":\" + token));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "def5bdb1984705be3c41be8bca4fd387db084eda",
      "candidate_info": {
        "commit_hash": "def5bdb1984705be3c41be8bca4fd387db084eda",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/def5bdb1984705be3c41be8bca4fd387db084eda",
        "files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java"
        ],
        "message": "[SECURITY-241] Use US-ASCII to prevent charset issues",
        "before_after_code_files": [
          "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/jenkins/security/ApiTokenProperty.java||core/src/main/java/jenkins/security/ApiTokenProperty.java": [
          "File: core/src/main/java/jenkins/security/ApiTokenProperty.java -> core/src/main/java/jenkins/security/ApiTokenProperty.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.kohsuke.stapler.StaplerResponse;",
          "43: import java.io.IOException;",
          "44: import java.security.MessageDigest;",
          "45: import java.security.SecureRandom;",
          "46: import javax.annotation.Nonnull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import java.nio.charset.Charset;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     public boolean matchesPassword(String password) {",
          "113:         String token = getApiTokenInsecure();",
          "115:     }",
          "117:     private boolean hasPermissionToSeeToken() {",
          "",
          "[Removed Lines]",
          "114:         return MessageDigest.isEqual(password.getBytes(), token.getBytes());",
          "",
          "[Added Lines]",
          "115:         return MessageDigest.isEqual(password.getBytes(Charset.forName(\"US-ASCII\")),",
          "116:                 token.getBytes(Charset.forName(\"US-ASCII\")));",
          "",
          "---------------"
        ]
      }
    }
  ]
}