{
  "cve_id": "CVE-2018-8788",
  "cve_desc": "FreeRDP prior to version 2.0.0-rc4 contains an Out-Of-Bounds Write of up to 4 bytes in function nsc_rle_decode() that results in a memory corruption and possibly even a remote code execution.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "d1112c279bd1a327e8e4d0b5f371458bf2579659",
  "patch_info": {
    "commit_hash": "d1112c279bd1a327e8e4d0b5f371458bf2579659",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d1112c279bd1a327e8e4d0b5f371458bf2579659",
    "files": [
      "include/freerdp/codec/nsc.h",
      "libfreerdp/codec/nsc.c",
      "libfreerdp/codec/nsc_encode.c",
      "libfreerdp/codec/nsc_encode.h",
      "libfreerdp/codec/nsc_sse2.c"
    ],
    "message": "Fixed CVE-2018-8788\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
    "before_after_code_files": [
      "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
      "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
      "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
      "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h",
      "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c"
    ]
  },
  "patch_diff": {
    "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h": [
      "File: include/freerdp/codec/nsc.h -> include/freerdp/codec/nsc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:  const BYTE* palette;",
      "82:                 UINT32 rowstride);",
      "84:  NSC_CONTEXT_PRIV* priv;",
      "",
      "[Removed Lines]",
      "80:  void (*decode)(NSC_CONTEXT* context);",
      "81:  void (*encode)(NSC_CONTEXT* context, const BYTE* BitmapData,",
      "",
      "[Added Lines]",
      "80:  BOOL (*decode)(NSC_CONTEXT* context);",
      "81:  BOOL (*encode)(NSC_CONTEXT* context, const BYTE* BitmapData,",
      "",
      "---------------"
    ],
    "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
      "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: #define NSC_INIT_SIMD(_nsc_context) do { } while (0)",
      "43: #endif",
      "46: {",
      "47:  UINT16 x;",
      "48:  UINT16 y;",
      "53:  for (y = 0; y < context->height; y++)",
      "54:  {",
      "",
      "[Removed Lines]",
      "45: static void nsc_decode(NSC_CONTEXT* context)",
      "49:  UINT16 rw = ROUND_UP_TO(context->width, 8);",
      "51:  BYTE* bmpdata = context->BitmapData;",
      "",
      "[Added Lines]",
      "45: static BOOL nsc_decode(NSC_CONTEXT* context)",
      "49:  UINT16 rw;",
      "50:  BYTE shift;",
      "51:  BYTE* bmpdata;",
      "52:  size_t pos = 0;",
      "54:  if (!context)",
      "55:   return FALSE;",
      "57:  rw = ROUND_UP_TO(context->width, 8);",
      "59:  bmpdata = context->BitmapData;",
      "61:  if (!bmpdata)",
      "62:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "80:    INT16 r_val = y_val + co_val - cg_val;",
      "81:    INT16 g_val = y_val + cg_val;",
      "82:    INT16 b_val = y_val - co_val - cg_val;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "95:    if (pos + 4 > context->BitmapDataLength)",
      "96:     return FALSE;",
      "98:    pos += 4;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "90:    aplane++;",
      "91:   }",
      "92:  }",
      "93: }",
      "96: {",
      "97:  UINT32 len;",
      "98:  UINT32 left;",
      "",
      "[Removed Lines]",
      "95: static void nsc_rle_decode(BYTE* in, BYTE* out, UINT32 originalSize)",
      "",
      "[Added Lines]",
      "110:  return TRUE;",
      "113: static BOOL nsc_rle_decode(BYTE* in, BYTE* out, UINT32 outSize, UINT32 originalSize)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "106:   if (left == 5)",
      "107:   {",
      "109:    left--;",
      "110:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:    if (outSize < 1)",
      "127:     return FALSE;",
      "129:    outSize--;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "124:     in += 4;",
      "125:    }",
      "127:    FillMemory(out, len, value);",
      "128:    out += len;",
      "129:    left -= len;",
      "130:   }",
      "131:   else",
      "132:   {",
      "134:    left--;",
      "135:   }",
      "136:  }",
      "139: }",
      "142: {",
      "143:  UINT16 i;",
      "144:  BYTE* rle;",
      "145:  UINT32 planeSize;",
      "146:  UINT32 originalSize;",
      "147:  rle = context->Planes;",
      "149:  for (i = 0; i < 4; i++)",
      "",
      "[Removed Lines]",
      "141: static void nsc_rle_decompress_data(NSC_CONTEXT* context)",
      "",
      "[Added Lines]",
      "149:    if (outSize < len)",
      "150:     return FALSE;",
      "152:    outSize -= len;",
      "159:    if (outSize < 1)",
      "160:     return FALSE;",
      "162:    outSize--;",
      "168:  if ((outSize < 4) || (left < 4))",
      "169:   return FALSE;",
      "171:  memcpy(out, in, 4);",
      "172:  return TRUE;",
      "175: static BOOL nsc_rle_decompress_data(NSC_CONTEXT* context)",
      "182:  if (!context)",
      "183:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "152:   planeSize = context->PlaneByteCount[i];",
      "154:   if (planeSize == 0)",
      "155:    FillMemory(context->priv->PlaneBuffers[i], originalSize, 0xFF);",
      "156:   else if (planeSize < originalSize)",
      "158:   else",
      "159:    CopyMemory(context->priv->PlaneBuffers[i], rle, originalSize);",
      "161:   rle += planeSize;",
      "162:  }",
      "163: }",
      "165: static BOOL nsc_stream_initialize(NSC_CONTEXT* context, wStream* s)",
      "",
      "[Removed Lines]",
      "157:    nsc_rle_decode(rle, context->priv->PlaneBuffers[i], originalSize);",
      "",
      "[Added Lines]",
      "193:   {",
      "194:    if (context->priv->PlaneBuffersLength < originalSize)",
      "195:     return FALSE;",
      "198:   }",
      "200:   {",
      "201:    if (!nsc_rle_decode(rle, context->priv->PlaneBuffers[i], context->priv->PlaneBuffersLength,",
      "202:                        originalSize))",
      "203:     return FALSE;",
      "204:   }",
      "206:   {",
      "207:    if (context->priv->PlaneBuffersLength < originalSize)",
      "208:     return FALSE;",
      "211:   }",
      "216:  return TRUE;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "396:   return FALSE;",
      "407:  if (!freerdp_image_copy(pDstData, DstFormat, nDstStride, nXDst, nYDst,",
      "408:                          width, height, context->BitmapData,",
      "",
      "[Removed Lines]",
      "399:  PROFILER_ENTER(context->priv->prof_nsc_rle_decompress_data)",
      "400:  nsc_rle_decompress_data(context);",
      "401:  PROFILER_EXIT(context->priv->prof_nsc_rle_decompress_data)",
      "403:  PROFILER_ENTER(context->priv->prof_nsc_decode)",
      "404:  context->decode(context);",
      "405:  PROFILER_EXIT(context->priv->prof_nsc_decode)",
      "",
      "[Added Lines]",
      "453:  {",
      "454:   BOOL rc;",
      "455:   PROFILER_ENTER(context->priv->prof_nsc_rle_decompress_data)",
      "456:   rc = nsc_rle_decompress_data(context);",
      "457:   PROFILER_EXIT(context->priv->prof_nsc_rle_decompress_data)",
      "459:   if (!rc)",
      "460:    return FALSE;",
      "461:  }",
      "463:  {",
      "464:   BOOL rc;",
      "465:   PROFILER_ENTER(context->priv->prof_nsc_decode)",
      "466:   rc = context->decode(context);",
      "467:   PROFILER_EXIT(context->priv->prof_nsc_decode)",
      "469:   if (!rc)",
      "470:    return FALSE;",
      "471:  }",
      "",
      "---------------"
    ],
    "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c": [
      "File: libfreerdp/codec/nsc_encode.c -> libfreerdp/codec/nsc_encode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:  return FALSE;",
      "88: }",
      "91:                                       UINT32 scanline)",
      "92: {",
      "93:  UINT16 x;",
      "",
      "[Removed Lines]",
      "90: static void nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, const BYTE* data,",
      "",
      "[Added Lines]",
      "91: static BOOL nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, const BYTE* data,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "104:  INT16 b_val;",
      "105:  BYTE a_val;",
      "106:  UINT32 tempWidth;",
      "107:  tempWidth = ROUND_UP_TO(context->width, 8);",
      "108:  rw = (context->ChromaSubsamplingLevel ? tempWidth : context->width);",
      "109:  ccl = context->ColorLossLevel;",
      "111:  for (y = 0; y < context->height; y++)",
      "112:  {",
      "113:   src = data + (context->height - 1 - y) * scanline;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "109:  if (!context || data || (scanline == 0))",
      "110:   return FALSE;",
      "116:  if (context->priv->PlaneBuffersLength < rw * scanline)",
      "117:   return FALSE;",
      "119:  if (rw < scanline * 2)",
      "120:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "242:   CopyMemory(coplane, coplane - rw, rw);",
      "243:   CopyMemory(cgplane, cgplane - rw, rw);",
      "244:  }",
      "245: }",
      "248: {",
      "249:  UINT16 x;",
      "250:  UINT16 y;",
      "257:  UINT32 tempWidth;",
      "258:  UINT32 tempHeight;",
      "259:  tempWidth = ROUND_UP_TO(context->width, 8);",
      "260:  tempHeight = ROUND_UP_TO(context->height, 2);",
      "262:  for (y = 0; y < tempHeight >> 1; y++)",
      "263:  {",
      "271:   for (x = 0; x < tempWidth >> 1; x++)",
      "272:   {",
      "",
      "[Removed Lines]",
      "247: static void nsc_encode_subsampling(NSC_CONTEXT* context)",
      "251:  BYTE* co_dst;",
      "252:  BYTE* cg_dst;",
      "253:  INT8* co_src0;",
      "254:  INT8* co_src1;",
      "255:  INT8* cg_src0;",
      "256:  INT8* cg_src1;",
      "264:   co_dst = context->priv->PlaneBuffers[1] + y * (tempWidth >> 1);",
      "265:   cg_dst = context->priv->PlaneBuffers[2] + y * (tempWidth >> 1);",
      "266:   co_src0 = (INT8*) context->priv->PlaneBuffers[1] + (y << 1) * tempWidth;",
      "267:   co_src1 = co_src0 + tempWidth;",
      "268:   cg_src0 = (INT8*) context->priv->PlaneBuffers[2] + (y << 1) * tempWidth;",
      "269:   cg_src1 = cg_src0 + tempWidth;",
      "",
      "[Added Lines]",
      "257:  return TRUE;",
      "260: static BOOL nsc_encode_subsampling(NSC_CONTEXT* context)",
      "267:  if (!context)",
      "268:   return FALSE;",
      "273:  if (tempHeight == 0)",
      "274:   return FALSE;",
      "276:  if (tempWidth > context->priv->PlaneBuffersLength / tempHeight)",
      "277:   return FALSE;",
      "281:   BYTE* co_dst = context->priv->PlaneBuffers[1] + y * (tempWidth >> 1);",
      "282:   BYTE* cg_dst = context->priv->PlaneBuffers[2] + y * (tempWidth >> 1);",
      "283:   const INT8* co_src0 = (INT8*) context->priv->PlaneBuffers[1] + (y << 1) * tempWidth;",
      "284:   const INT8* co_src1 = co_src0 + tempWidth;",
      "285:   const INT8* cg_src0 = (INT8*) context->priv->PlaneBuffers[2] + (y << 1) * tempWidth;",
      "286:   const INT8* cg_src1 = cg_src0 + tempWidth;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "280:    cg_src1 += 2;",
      "281:   }",
      "282:  }",
      "283: }",
      "286: {",
      "289:  if (context->ChromaSubsamplingLevel)",
      "290:  {",
      "292:  }",
      "293: }",
      "296: {",
      "297:  UINT32 left;",
      "298:  UINT32 runlength = 1;",
      "",
      "[Removed Lines]",
      "285: void nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata, UINT32 rowstride)",
      "287:  nsc_encode_argb_to_aycocg(context, bmpdata, rowstride);",
      "291:   nsc_encode_subsampling(context);",
      "295: static UINT32 nsc_rle_encode(BYTE* in, BYTE* out, UINT32 originalSize)",
      "",
      "[Added Lines]",
      "301:  return TRUE;",
      "304: BOOL nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata, UINT32 rowstride)",
      "306:  if (!context || !bmpdata || (rowstride == 0))",
      "307:   return FALSE;",
      "309:  if (!nsc_encode_argb_to_aycocg(context, bmpdata, rowstride))",
      "310:   return FALSE;",
      "314:   if (!nsc_encode_subsampling(context))",
      "315:    return FALSE;",
      "318:  return TRUE;",
      "321: static UINT32 nsc_rle_encode(const BYTE* in, BYTE* out, UINT32 originalSize)",
      "",
      "---------------"
    ],
    "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h": [
      "File: libfreerdp/codec/nsc_encode.h -> libfreerdp/codec/nsc_encode.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: #include <freerdp/api.h>",
      "28:                               UINT32 rowstride);",
      "",
      "[Removed Lines]",
      "27: FREERDP_LOCAL void nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata,",
      "",
      "[Added Lines]",
      "27: FREERDP_LOCAL BOOL nsc_encode(NSC_CONTEXT* context, const BYTE* bmpdata,",
      "",
      "---------------"
    ],
    "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c": [
      "File: libfreerdp/codec/nsc_sse2.c -> libfreerdp/codec/nsc_sse2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "385:  }",
      "386: }",
      "389:                             UINT32 scanline)",
      "390: {",
      "391:  nsc_encode_argb_to_aycocg_sse2(context, data, scanline);",
      "",
      "[Removed Lines]",
      "388: static void nsc_encode_sse2(NSC_CONTEXT* context, const BYTE* data,",
      "",
      "[Added Lines]",
      "388: static BOOL nsc_encode_sse2(NSC_CONTEXT* context, const BYTE* data,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:  {",
      "395:   nsc_encode_subsampling_sse2(context);",
      "396:  }",
      "397: }",
      "399: void nsc_init_sse2(NSC_CONTEXT* context)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:  return TRUE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
      "candidate_info": {
        "commit_hash": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
        "files": [
          "libfreerdp/codec/zgfx.c"
        ],
        "message": "Fixed CVE-2018-8784\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
          "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  _zgfx->cBitsCurrent -= _nbits;",
          "138:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent;",
          "139:  _zgfx->BitsCurrent &= ((1 << _zgfx->cBitsCurrent) - 1);",
          "140: }",
          "142: static void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* zgfx, const BYTE* src, size_t count)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:  UINT32 count;",
          "230:  UINT32 distance;",
          "231:  BYTE* pbSegment;",
          "235:   return FALSE;",
          "",
          "[Removed Lines]",
          "232:  size_t cbSegment = segmentSize - 1;",
          "234:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1))",
          "",
          "[Added Lines]",
          "233:  size_t cbSegment;",
          "235:  if (!zgfx || !stream)",
          "236:   return FALSE;",
          "238:  cbSegment = segmentSize - 1;",
          "240:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1) ||",
          "241:      (segmentSize > UINT32_MAX))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:  if (!(flags & PACKET_COMPRESSED))",
          "243:  {",
          "244:   zgfx_history_buffer_ring_write(zgfx, pbSegment, cbSegment);",
          "245:   CopyMemory(zgfx->OutputBuffer, pbSegment, cbSegment);",
          "246:   zgfx->OutputCount = cbSegment;",
          "247:   return TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:   if (cbSegment > sizeof(zgfx->OutputBuffer))",
          "254:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:      if (++zgfx->HistoryIndex == zgfx->HistoryBufferSize)",
          "281:       zgfx->HistoryIndex = 0;",
          "283:      zgfx->OutputBuffer[zgfx->OutputCount++] = c;",
          "284:     }",
          "285:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:      if (zgfx->OutputCount >= sizeof(zgfx->OutputBuffer))",
          "295:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:        count += zgfx->bits;",
          "314:       }",
          "316:       zgfx_history_buffer_ring_read(zgfx, distance, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);",
          "317:       zgfx_history_buffer_ring_write(zgfx, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);",
          "318:       zgfx->OutputCount += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "331:        return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "325:       zgfx->cBitsRemaining -= zgfx->cBitsCurrent;",
          "326:       zgfx->cBitsCurrent = 0;",
          "327:       zgfx->BitsCurrent = 0;",
          "328:       CopyMemory(&(zgfx->OutputBuffer[zgfx->OutputCount]), zgfx->pbInputCurrent, count);",
          "329:       zgfx_history_buffer_ring_write(zgfx, zgfx->pbInputCurrent, count);",
          "330:       zgfx->pbInputCurrent += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "347:        return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e09f739b90646e613060417d4118e793b638706e",
      "candidate_info": {
        "commit_hash": "e09f739b90646e613060417d4118e793b638706e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/e09f739b90646e613060417d4118e793b638706e",
        "files": [
          "include/freerdp/codec/nsc.h",
          "libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_types.h",
          "server/shadow/shadow_encoder.c"
        ],
        "message": "Cleaned up NSC API",
        "before_after_code_files": [
          "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
          "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_types.h||libfreerdp/codec/nsc_types.h",
          "server/shadow/shadow_encoder.c||server/shadow/shadow_encoder.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
            "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
            "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c"
          ],
          "candidate": [
            "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
            "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
            "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c"
          ]
        }
      },
      "candidate_diff": {
        "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h": [
          "File: include/freerdp/codec/nsc.h -> include/freerdp/codec/nsc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <winpr/stream.h>",
          "32: #ifdef __cplusplus",
          "63: {",
          "114: #ifdef __cplusplus",
          "115: }",
          "",
          "[Removed Lines]",
          "33: extern \"C\" {",
          "34: #endif",
          "36: struct _NSC_MESSAGE",
          "37: {",
          "38:  UINT32 x;",
          "39:  UINT32 y;",
          "40:  UINT32 width;",
          "41:  UINT32 height;",
          "42:  const BYTE* data;",
          "43:  UINT32 scanline;",
          "44:  BYTE* PlaneBuffer;",
          "45:  UINT32 MaxPlaneSize;",
          "46:  BYTE* PlaneBuffers[5];",
          "47:  UINT32 OrgByteCount[4];",
          "49:  UINT32 LumaPlaneByteCount;",
          "50:  UINT32 OrangeChromaPlaneByteCount;",
          "51:  UINT32 GreenChromaPlaneByteCount;",
          "52:  UINT32 AlphaPlaneByteCount;",
          "53:  UINT32 ColorLossLevel;",
          "54:  UINT32 ChromaSubsamplingLevel;",
          "55: };",
          "56: typedef struct _NSC_MESSAGE NSC_MESSAGE;",
          "58: typedef struct _NSC_CONTEXT_PRIV NSC_CONTEXT_PRIV;",
          "60: typedef struct _NSC_CONTEXT NSC_CONTEXT;",
          "62: struct _NSC_CONTEXT",
          "64:  UINT32 OrgByteCount[4];",
          "65:  UINT32 format;",
          "66:  UINT16 width;",
          "67:  UINT16 height;",
          "68:  BYTE* BitmapData;",
          "69:  UINT32 BitmapDataLength;",
          "71:  BYTE* Planes;",
          "72:  UINT32 PlaneByteCount[4];",
          "73:  UINT32 ColorLossLevel;",
          "74:  UINT32 ChromaSubsamplingLevel;",
          "75:  BOOL DynamicColorFidelity;",
          "78:  const BYTE* palette;",
          "80:  BOOL (*decode)(NSC_CONTEXT* context);",
          "81:  BOOL (*encode)(NSC_CONTEXT* context, const BYTE* BitmapData,",
          "82:                 UINT32 rowstride);",
          "84:  NSC_CONTEXT_PRIV* priv;",
          "85: };",
          "87: FREERDP_API BOOL nsc_context_set_pixel_format(NSC_CONTEXT* context,",
          "88:         UINT32 pixel_format);",
          "89: FREERDP_API BOOL nsc_process_message(NSC_CONTEXT* context, UINT16 bpp,",
          "90:                                      UINT32 width, UINT32 height,",
          "91:                                      const BYTE* data, UINT32 length,",
          "92:                                      BYTE* pDstData, UINT32 DstFormat,",
          "93:                                      UINT32 nDstStride, UINT32 nXDst, UINT32 nYDst,",
          "94:                                      UINT32 nWidth, UINT32 nHeight, UINT32 flip);",
          "95: FREERDP_API BOOL nsc_compose_message(NSC_CONTEXT* context, wStream* s,",
          "96:                                      const BYTE* bmpdata,",
          "97:                                      UINT32 width, UINT32 height, UINT32 rowstride);",
          "99: FREERDP_API NSC_MESSAGE* nsc_encode_messages(NSC_CONTEXT* context,",
          "100:         const BYTE* data,",
          "101:         UINT32 x, UINT32 y,",
          "102:         UINT32 width, UINT32 height, UINT32 scanline,",
          "103:         UINT32* numMessages, UINT32 maxDataSize);",
          "104: FREERDP_API BOOL nsc_write_message(NSC_CONTEXT* context, wStream* s,",
          "105:                                    NSC_MESSAGE* message);",
          "106: FREERDP_API void nsc_message_free(NSC_CONTEXT* context, NSC_MESSAGE* message);",
          "108: FREERDP_API BOOL nsc_context_reset(NSC_CONTEXT* context, UINT32 width,",
          "109:                                    UINT32 height);",
          "111: FREERDP_API NSC_CONTEXT* nsc_context_new(void);",
          "112: FREERDP_API void nsc_context_free(NSC_CONTEXT* context);",
          "",
          "[Added Lines]",
          "33: extern \"C\"",
          "35: #endif",
          "37:  typedef enum",
          "38:  {",
          "39:   NSC_COLOR_LOSS_LEVEL,",
          "40:   NSC_ALLOW_SUBSAMPLING,",
          "41:   NSC_DYNAMIC_COLOR_FIDELITY,",
          "42:   NSC_COLOR_FORMAT",
          "43:  } NSC_PARAMETER;",
          "45:  typedef struct _NSC_CONTEXT NSC_CONTEXT;",
          "47:  FREERDP_API WINPR_DEPRECATED(BOOL nsc_context_set_pixel_format(NSC_CONTEXT* context,",
          "48:                    UINT32 pixel_format));",
          "49:  FREERDP_API BOOL nsc_context_set_parameters(NSC_CONTEXT* context, NSC_PARAMETER what,",
          "50:             UINT32 value);",
          "52:  FREERDP_API BOOL nsc_process_message(NSC_CONTEXT* context, UINT16 bpp, UINT32 width,",
          "53:            UINT32 height, const BYTE* data, UINT32 length,",
          "54:            BYTE* pDstData, UINT32 DstFormat, UINT32 nDstStride,",
          "55:            UINT32 nXDst, UINT32 nYDst, UINT32 nWidth, UINT32 nHeight,",
          "56:            UINT32 flip);",
          "57:  FREERDP_API BOOL nsc_compose_message(NSC_CONTEXT* context, wStream* s, const BYTE* bmpdata,",
          "58:            UINT32 width, UINT32 height, UINT32 rowstride);",
          "59:  FREERDP_API BOOL nsc_decompose_message(NSC_CONTEXT* context, wStream* s, BYTE* bmpdata,",
          "60:              UINT32 x, UINT32 y, UINT32 width, UINT32 height,",
          "61:              UINT32 rowstride, UINT32 format, UINT32 flip);",
          "63:  FREERDP_API BOOL nsc_context_reset(NSC_CONTEXT* context, UINT32 width, UINT32 height);",
          "65:  FREERDP_API NSC_CONTEXT* nsc_context_new(void);",
          "66:  FREERDP_API void nsc_context_free(NSC_CONTEXT* context);",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
          "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:  if (!context)",
          "318:   return FALSE;",
          "322:  return TRUE;",
          "323: }",
          "",
          "[Removed Lines]",
          "320:  context->width = width;",
          "321:  context->height = height;",
          "",
          "[Added Lines]",
          "320:  if ((width > UINT16_MAX) || (height > UINT16_MAX))",
          "321:   return FALSE;",
          "323:  context->width = (UINT16)width;",
          "324:  context->height = (UINT16)height;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:  context->BitmapData = NULL;",
          "341:  context->decode = nsc_decode;",
          "342:  context->encode = nsc_encode;",
          "348:  PROFILER_CREATE(context->priv->prof_nsc_rle_decompress_data,",
          "349:                  \"nsc_rle_decompress_data\")",
          "",
          "[Removed Lines]",
          "343:  context->priv->PlanePool = BufferPool_New(TRUE, 0, 16);",
          "345:  if (!context->priv->PlanePool)",
          "346:   goto error;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:   for (i = 0; i < 4; i++)",
          "375:    free(context->priv->PlaneBuffers[i]);",
          "378:   nsc_profiler_print(context->priv);",
          "379:   PROFILER_FREE(context->priv->prof_nsc_rle_decompress_data)",
          "380:   PROFILER_FREE(context->priv->prof_nsc_decode)",
          "",
          "[Removed Lines]",
          "377:   BufferPool_Free(context->priv->PlanePool);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "388: }",
          "390: BOOL nsc_context_set_pixel_format(NSC_CONTEXT* context, UINT32 pixel_format)",
          "391: {",
          "392:  if (!context)",
          "393:   return FALSE;",
          "396:  return TRUE;",
          "397: }",
          "",
          "[Removed Lines]",
          "395:  context->format = pixel_format;",
          "",
          "[Added Lines]",
          "389: {",
          "390:  return nsc_context_set_parameters(context, NSC_COLOR_FORMAT, pixel_format);",
          "391: }",
          "393: BOOL nsc_context_set_parameters(NSC_CONTEXT* context, NSC_PARAMETER what,",
          "394:         UINT32 value)",
          "399:  switch(what)",
          "400:  {",
          "401:  case NSC_COLOR_LOSS_LEVEL:",
          "402:   context->ColorLossLevel = value;",
          "403:   break;",
          "404:  case NSC_ALLOW_SUBSAMPLING:",
          "405:   context->ChromaSubsamplingLevel = value;",
          "406:   break;",
          "407:  case NSC_DYNAMIC_COLOR_FIDELITY:",
          "408:   context->DynamicColorFidelity = value != 0;",
          "409:   break;",
          "410:  case NSC_COLOR_FORMAT:",
          "411:   context->format = value;",
          "412:   break;",
          "413:  default:",
          "414:   return FALSE;",
          "415:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "406: {",
          "407:  wStream* s;",
          "408:  BOOL ret;",
          "409:  s = Stream_New((BYTE*)data, length);",
          "411:  if (!s)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:  if (!context || !data || !pDstData)",
          "430:   return FALSE;",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c": [
          "File: libfreerdp/codec/nsc_encode.c -> libfreerdp/codec/nsc_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"nsc_types.h\"",
          "36: #include \"nsc_encode.h\"",
          "38: static BOOL nsc_context_initialize_encode(NSC_CONTEXT* context)",
          "39: {",
          "40:  int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: struct _NSC_MESSAGE",
          "39: {",
          "40:  UINT32 x;",
          "41:  UINT32 y;",
          "42:  UINT32 width;",
          "43:  UINT32 height;",
          "44:  const BYTE* data;",
          "45:  UINT32 scanline;",
          "46:  BYTE* PlaneBuffer;",
          "47:  UINT32 MaxPlaneSize;",
          "48:  BYTE* PlaneBuffers[5];",
          "49:  UINT32 OrgByteCount[4];",
          "51:  UINT32 LumaPlaneByteCount;",
          "52:  UINT32 OrangeChromaPlaneByteCount;",
          "53:  UINT32 GreenChromaPlaneByteCount;",
          "54:  UINT32 AlphaPlaneByteCount;",
          "55:  UINT8 ColorLossLevel;",
          "56:  UINT8 ChromaSubsamplingLevel;",
          "57: };",
          "58: typedef struct _NSC_MESSAGE NSC_MESSAGE;",
          "60: static BOOL nsc_write_message(NSC_CONTEXT* context, wStream* s,",
          "61:            const NSC_MESSAGE* message);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:  rw = (context->ChromaSubsamplingLevel ? tempWidth : context->width);",
          "111:  ccl = context->ColorLossLevel;",
          "114:   return FALSE;",
          "117:   return FALSE;",
          "119:  for (y = 0; y < context->height; y++)",
          "",
          "[Removed Lines]",
          "113:  if (context->priv->PlaneBuffersLength < rw * scanline)",
          "116:  if (rw < scanline * 2)",
          "",
          "[Added Lines]",
          "139:  if (context->priv->PlaneBuffersLength < context->height * rw)",
          "143:  if (rw * GetBytesPerPixel(context->format) < scanline)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:  return maxPlaneSize;",
          "428: }",
          "560: {",
          "561:  UINT32 totalPlaneByteCount;",
          "562:  totalPlaneByteCount = message->LumaPlaneByteCount +",
          "",
          "[Removed Lines]",
          "430: NSC_MESSAGE* nsc_encode_messages(NSC_CONTEXT* context, const BYTE* data,",
          "431:                                  UINT32 x, UINT32 y, UINT32 width, UINT32 height,",
          "432:                                  UINT32 scanline, UINT32* numMessages,",
          "433:                                  UINT32 maxDataSize)",
          "434: {",
          "435:  UINT32 i, j, k;",
          "436:  UINT32 dataOffset;",
          "437:  UINT32 rows, cols;",
          "438:  UINT32 BytesPerPixel;",
          "439:  UINT32 MaxRegionWidth;",
          "440:  UINT32 MaxRegionHeight;",
          "441:  UINT32 ByteCount[4];",
          "442:  UINT32 MaxPlaneSize;",
          "443:  UINT32 MaxMessageSize;",
          "444:  NSC_MESSAGE* messages;",
          "445:  UINT32 PaddedMaxPlaneSize;",
          "447:  if (!context || !data || !numMessages)",
          "448:   return NULL;",
          "450:  if (maxDataSize < 1024)",
          "451:   return NULL;",
          "453:  k = 0;",
          "454:  MaxRegionWidth = 64 * 4;",
          "455:  MaxRegionHeight = 64 * 2;",
          "456:  BytesPerPixel = GetBytesPerPixel(context->format);",
          "457:  rows = (width + (MaxRegionWidth - (width % MaxRegionWidth))) / MaxRegionWidth;",
          "458:  cols = (height + (MaxRegionHeight - (height % MaxRegionHeight))) /",
          "459:         MaxRegionHeight;",
          "461:  MaxPlaneSize = nsc_compute_byte_count(context, (UINT32*) ByteCount, width,",
          "462:                                        height);",
          "463:  MaxMessageSize = ByteCount[0] + ByteCount[1] + ByteCount[2] + ByteCount[3] + 20;",
          "465:  if (maxDataSize < (*numMessages) * sizeof(NSC_MESSAGE))",
          "466:   return NULL;",
          "468:  messages = (NSC_MESSAGE*) calloc(*numMessages, sizeof(NSC_MESSAGE));",
          "470:  if (!messages)",
          "471:   return NULL;",
          "473:  for (i = 0; i < rows; i++)",
          "474:  {",
          "475:   for (j = 0; j < cols; j++)",
          "476:   {",
          "477:    messages[k].x = x + (i * MaxRegionWidth);",
          "478:    messages[k].y = y + (j * MaxRegionHeight);",
          "479:    messages[k].width = (i < (rows - 1)) ? MaxRegionWidth : width -",
          "480:                        (i * MaxRegionWidth);",
          "481:    messages[k].height = (j < (cols - 1)) ? MaxRegionHeight : height -",
          "482:                         (j * MaxRegionHeight);",
          "483:    messages[k].data = data;",
          "484:    messages[k].scanline = scanline;",
          "485:    messages[k].MaxPlaneSize = nsc_compute_byte_count(context,",
          "486:                               (UINT32*) messages[k].OrgByteCount, messages[k].width, messages[k].height);",
          "487:    k++;",
          "488:   }",
          "489:  }",
          "493:  for (i = 0; i < *numMessages; i++)",
          "494:  {",
          "495:   PaddedMaxPlaneSize = messages[i].MaxPlaneSize + 32;",
          "496:   messages[i].PlaneBuffer = (BYTE*) BufferPool_Take(context->priv->PlanePool,",
          "497:                             PaddedMaxPlaneSize * 5);",
          "499:   if (!messages[i].PlaneBuffer)",
          "500:    goto fail;",
          "502:   messages[i].PlaneBuffers[0] = (BYTE*) &",
          "503:                                 (messages[i].PlaneBuffer[(PaddedMaxPlaneSize * 0) + 16]);",
          "504:   messages[i].PlaneBuffers[1] = (BYTE*) &",
          "505:                                 (messages[i].PlaneBuffer[(PaddedMaxPlaneSize * 1) + 16]);",
          "506:   messages[i].PlaneBuffers[2] = (BYTE*) &",
          "507:                                 (messages[i].PlaneBuffer[(PaddedMaxPlaneSize * 2) + 16]);",
          "508:   messages[i].PlaneBuffers[3] = (BYTE*) &",
          "509:                                 (messages[i].PlaneBuffer[(PaddedMaxPlaneSize * 3) + 16]);",
          "510:   messages[i].PlaneBuffers[4] = (BYTE*) &",
          "511:                                 (messages[i].PlaneBuffer[(PaddedMaxPlaneSize * 4) + 16]);",
          "512:  }",
          "514:  for (i = 0; i < *numMessages; i++)",
          "515:  {",
          "516:   context->width = messages[i].width;",
          "517:   context->height = messages[i].height;",
          "518:   context->OrgByteCount[0] = messages[i].OrgByteCount[0];",
          "519:   context->OrgByteCount[1] = messages[i].OrgByteCount[1];",
          "520:   context->OrgByteCount[2] = messages[i].OrgByteCount[2];",
          "521:   context->OrgByteCount[3] = messages[i].OrgByteCount[3];",
          "522:   context->priv->PlaneBuffersLength = messages[i].MaxPlaneSize;",
          "523:   context->priv->PlaneBuffers[0] = messages[i].PlaneBuffers[0];",
          "524:   context->priv->PlaneBuffers[1] = messages[i].PlaneBuffers[1];",
          "525:   context->priv->PlaneBuffers[2] = messages[i].PlaneBuffers[2];",
          "526:   context->priv->PlaneBuffers[3] = messages[i].PlaneBuffers[3];",
          "527:   context->priv->PlaneBuffers[4] = messages[i].PlaneBuffers[4];",
          "528:   dataOffset = (messages[i].y * messages[i].scanline) + (messages[i].x *",
          "529:                BytesPerPixel);",
          "530:   PROFILER_ENTER(context->priv->prof_nsc_encode)",
          "531:   context->encode(context, &data[dataOffset], scanline);",
          "532:   PROFILER_EXIT(context->priv->prof_nsc_encode)",
          "533:   PROFILER_ENTER(context->priv->prof_nsc_rle_compress_data)",
          "534:   nsc_rle_compress_data(context);",
          "535:   PROFILER_EXIT(context->priv->prof_nsc_rle_compress_data)",
          "536:   messages[i].LumaPlaneByteCount = context->PlaneByteCount[0];",
          "537:   messages[i].OrangeChromaPlaneByteCount = context->PlaneByteCount[1];",
          "538:   messages[i].GreenChromaPlaneByteCount = context->PlaneByteCount[2];",
          "539:   messages[i].AlphaPlaneByteCount = context->PlaneByteCount[3];",
          "540:   messages[i].ColorLossLevel = context->ColorLossLevel;",
          "541:   messages[i].ChromaSubsamplingLevel = context->ChromaSubsamplingLevel;",
          "542:  }",
          "544:  context->priv->PlaneBuffers[0] = NULL;",
          "545:  context->priv->PlaneBuffers[1] = NULL;",
          "546:  context->priv->PlaneBuffers[2] = NULL;",
          "547:  context->priv->PlaneBuffers[3] = NULL;",
          "548:  context->priv->PlaneBuffers[4] = NULL;",
          "549:  return messages;",
          "550: fail:",
          "552:  for (i = 0; i < *numMessages; i++)",
          "553:   BufferPool_Return(context->priv->PlanePool, messages[i].PlaneBuffer);",
          "555:  free(messages);",
          "556:  return NULL;",
          "557: }",
          "559: BOOL nsc_write_message(NSC_CONTEXT* context, wStream* s, NSC_MESSAGE* message)",
          "",
          "[Added Lines]",
          "457: BOOL nsc_write_message(NSC_CONTEXT* context, wStream* s, const NSC_MESSAGE* message)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "564:                        message->GreenChromaPlaneByteCount + message->AlphaPlaneByteCount;",
          "566:  if (!Stream_EnsureRemainingCapacity(s, 20 + totalPlaneByteCount))",
          "569:  Stream_Write_UINT32(s,",
          "",
          "[Removed Lines]",
          "567:   return -1;",
          "",
          "[Added Lines]",
          "465:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "598:  return TRUE;",
          "599: }",
          "606: BOOL nsc_compose_message(NSC_CONTEXT* context, wStream* s, const BYTE* data,",
          "607:                          UINT32 width, UINT32 height, UINT32 scanline)",
          "608: {",
          "611:  context->width = width;",
          "612:  context->height = height;",
          "",
          "[Removed Lines]",
          "601: void nsc_message_free(NSC_CONTEXT* context, NSC_MESSAGE* message)",
          "602: {",
          "603:  BufferPool_Return(context->priv->PlanePool, message->PlaneBuffer);",
          "604: }",
          "609:  NSC_MESSAGE s_message = { 0 };",
          "610:  NSC_MESSAGE* message = &s_message;",
          "",
          "[Added Lines]",
          "502:  BOOL rc;",
          "503:  NSC_MESSAGE message = { 0 };",
          "505:  if (!context || !s || !data)",
          "506:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "618:  PROFILER_ENTER(context->priv->prof_nsc_encode)",
          "620:  PROFILER_EXIT(context->priv->prof_nsc_encode)",
          "622:  PROFILER_ENTER(context->priv->prof_nsc_rle_compress_data)",
          "623:  nsc_rle_compress_data(context);",
          "624:  PROFILER_EXIT(context->priv->prof_nsc_rle_compress_data)",
          "636: }",
          "",
          "[Removed Lines]",
          "619:  context->encode(context, data, scanline);",
          "625:  message->PlaneBuffers[0] = context->priv->PlaneBuffers[0];",
          "626:  message->PlaneBuffers[1] = context->priv->PlaneBuffers[1];",
          "627:  message->PlaneBuffers[2] = context->priv->PlaneBuffers[2];",
          "628:  message->PlaneBuffers[3] = context->priv->PlaneBuffers[3];",
          "629:  message->LumaPlaneByteCount = context->PlaneByteCount[0];",
          "630:  message->OrangeChromaPlaneByteCount = context->PlaneByteCount[1];",
          "631:  message->GreenChromaPlaneByteCount = context->PlaneByteCount[2];",
          "632:  message->AlphaPlaneByteCount = context->PlaneByteCount[3];",
          "633:  message->ColorLossLevel = context->ColorLossLevel;",
          "634:  message->ChromaSubsamplingLevel = context->ChromaSubsamplingLevel;",
          "635:  return nsc_write_message(context, s, message);",
          "",
          "[Added Lines]",
          "516:  rc = context->encode(context, data, scanline);",
          "518:  if (!rc)",
          "519:   return FALSE;",
          "525:  message.PlaneBuffers[0] = context->priv->PlaneBuffers[0];",
          "526:  message.PlaneBuffers[1] = context->priv->PlaneBuffers[1];",
          "527:  message.PlaneBuffers[2] = context->priv->PlaneBuffers[2];",
          "528:  message.PlaneBuffers[3] = context->priv->PlaneBuffers[3];",
          "529:  message.LumaPlaneByteCount = context->PlaneByteCount[0];",
          "530:  message.OrangeChromaPlaneByteCount = context->PlaneByteCount[1];",
          "531:  message.GreenChromaPlaneByteCount = context->PlaneByteCount[2];",
          "532:  message.AlphaPlaneByteCount = context->PlaneByteCount[3];",
          "533:  message.ColorLossLevel = context->ColorLossLevel;",
          "534:  message.ChromaSubsamplingLevel = context->ChromaSubsamplingLevel;",
          "535:  return nsc_write_message(context, s, &message);",
          "536: }",
          "538: BOOL nsc_decompose_message(NSC_CONTEXT* context, wStream* s, BYTE* bmpdata,",
          "539:                            UINT32 x, UINT32 y, UINT32 width, UINT32 height,",
          "540:                            UINT32 rowstride, UINT32 format, UINT32 flip)",
          "541: {",
          "542:  size_t size = Stream_GetRemainingLength(s);",
          "543:  if (size > UINT32_MAX)",
          "544:   return FALSE;",
          "546:  if (!nsc_process_message(context, (UINT16)GetBitsPerPixel(context->format),",
          "547:         width, height, Stream_Pointer(s),",
          "548:         (UINT32)size, bmpdata, format,",
          "549:         rowstride, x, y, width, height, flip))",
          "550:   return FALSE;",
          "551:  Stream_Seek(s, size);",
          "552:  return TRUE;",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_types.h||libfreerdp/codec/nsc_types.h": [
          "File: libfreerdp/codec/nsc_types.h -> libfreerdp/codec/nsc_types.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include <winpr/wlog.h>",
          "30: #include <winpr/collections.h>",
          "33: #include <freerdp/utils/profiler.h>",
          "35: #define ROUND_UP_TO(_b, _n) (_b + ((~(_b & (_n-1)) + 0x1) & (_n-1)))",
          "36: #define MINMAX(_v,_l,_h) ((_v) < (_l) ? (_l) : ((_v) > (_h) ? (_h) : (_v)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include <freerdp/codec/nsc.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: {",
          "40:  wLog* log;",
          "48:  PROFILER_DEFINE(prof_nsc_rle_decompress_data)",
          "",
          "[Removed Lines]",
          "42:  wBufferPool* PlanePool;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:  PROFILER_DEFINE(prof_nsc_encode)",
          "52: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:  typedef struct _NSC_CONTEXT_PRIV NSC_CONTEXT_PRIV;",
          "54:  struct _NSC_CONTEXT",
          "55:  {",
          "56:   UINT32 OrgByteCount[4];",
          "57:   UINT32 format;",
          "58:   UINT16 width;",
          "59:   UINT16 height;",
          "60:   BYTE* BitmapData;",
          "61:   UINT32 BitmapDataLength;",
          "63:   BYTE* Planes;",
          "64:   UINT32 PlaneByteCount[4];",
          "65:   UINT32 ColorLossLevel;",
          "66:   UINT32 ChromaSubsamplingLevel;",
          "67:   BOOL DynamicColorFidelity;",
          "70:   const BYTE* palette;",
          "72:   BOOL (*decode)(NSC_CONTEXT* context);",
          "73:   BOOL (*encode)(NSC_CONTEXT* context, const BYTE* BitmapData, UINT32 rowstride);",
          "75:   NSC_CONTEXT_PRIV* priv;",
          "76:  };",
          "",
          "---------------"
        ],
        "server/shadow/shadow_encoder.c||server/shadow/shadow_encoder.c": [
          "File: server/shadow/shadow_encoder.c -> server/shadow/shadow_encoder.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:  if (!nsc_context_reset(encoder->nsc, encoder->width, encoder->height))",
          "162:   goto fail;",
          "169:  encoder->codecs |= FREERDP_CODEC_NSCODEC;",
          "170:  return 1;",
          "171: fail:",
          "",
          "[Removed Lines]",
          "164:  encoder->nsc->ColorLossLevel = settings->NSCodecColorLossLevel;",
          "165:  encoder->nsc->ChromaSubsamplingLevel = settings->NSCodecAllowSubsampling ? 1 :",
          "166:                                         0;",
          "167:  encoder->nsc->DynamicColorFidelity = settings->NSCodecAllowDynamicColorFidelity;",
          "168:  nsc_context_set_pixel_format(encoder->nsc, PIXEL_FORMAT_BGRX32);",
          "",
          "[Added Lines]",
          "164:  if (!nsc_context_set_parameters(encoder->nsc, NSC_COLOR_LOSS_LEVEL, settings->NSCodecColorLossLevel))",
          "165:   goto fail;",
          "166:  if (!nsc_context_set_parameters(encoder->nsc, NSC_ALLOW_SUBSAMPLING, settings->NSCodecAllowSubsampling))",
          "167:   goto fail;",
          "168:  if (!nsc_context_set_parameters(encoder->nsc, NSC_DYNAMIC_COLOR_FIDELITY, settings->NSCodecAllowDynamicColorFidelity))",
          "169:   goto fail;",
          "170:  if (!nsc_context_set_parameters(encoder->nsc, NSC_COLOR_FORMAT, PIXEL_FORMAT_BGRX32))",
          "171:   goto fail;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50a0968c6ad0a7e85920013189ddf74840d56544",
      "candidate_info": {
        "commit_hash": "50a0968c6ad0a7e85920013189ddf74840d56544",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/50a0968c6ad0a7e85920013189ddf74840d56544",
        "files": [
          "libfreerdp/codec/ncrush.c",
          "libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_sse2.c",
          "libfreerdp/codec/zgfx.c",
          "rdtk/librdtk/rdtk_nine_patch.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "winpr/libwinpr/utils/ini.c"
        ],
        "message": "Removed unused variables.",
        "before_after_code_files": [
          "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c",
          "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c",
          "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c",
          "rdtk/librdtk/rdtk_nine_patch.c||rdtk/librdtk/rdtk_nine_patch.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "winpr/libwinpr/utils/ini.c||winpr/libwinpr/utils/ini.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
            "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c"
          ],
          "candidate": [
            "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
            "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c"
          ]
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/ncrush.c||libfreerdp/codec/ncrush.c": [
          "File: libfreerdp/codec/ncrush.c -> libfreerdp/codec/ncrush.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2313:    if (ncrush_move_encoder_windows(ncrush, &(HistoryBuffer[ncrush->HistoryOffset])) < 0)",
          "2314:     return -1001;",
          "2317:    ncrush->HistoryPtr = &HistoryBuffer[32768];",
          "2318:    ncrush->HistoryOffset = 32768;",
          "2319:    PacketAtFront = TRUE;",
          "",
          "[Removed Lines]",
          "2316:    HistoryPtr = &HistoryBuffer[32768];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c": [
          "File: libfreerdp/codec/nsc_encode.c -> libfreerdp/codec/nsc_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:  INT16 b_val;",
          "105:  BYTE a_val;",
          "106:  UINT32 tempWidth;",
          "108:  tempWidth = ROUND_UP_TO(context->width, 8);",
          "110:  rw = (context->ChromaSubsamplingLevel ? tempWidth : context->width);",
          "111:  ccl = context->ColorLossLevel;",
          "",
          "[Removed Lines]",
          "107:  UINT32 tempHeight;",
          "109:  tempHeight = ROUND_UP_TO(context->height, 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c": [
          "File: libfreerdp/codec/nsc_sse2.c -> libfreerdp/codec/nsc_sse2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:  __m128i co_val;",
          "55:  __m128i cg_val;",
          "56:  UINT32 tempWidth;",
          "58:  tempWidth = ROUND_UP_TO(context->width, 8);",
          "60:  rw = (context->ChromaSubsamplingLevel > 0 ? tempWidth : context->width);",
          "61:  ccl = context->ColorLossLevel;",
          "",
          "[Removed Lines]",
          "57:  UINT32 tempHeight;",
          "59:  tempHeight = ROUND_UP_TO(context->height, 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
          "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:   UINT32 segmentSize;",
          "343:   UINT16 segmentNumber;",
          "344:   UINT16 segmentCount;",
          "346:   UINT32 uncompressedSize;",
          "347:   BYTE* pConcatenated;",
          "350:   if (Stream_GetRemainingLength(stream) < 6)",
          "351:    goto fail;",
          "",
          "[Removed Lines]",
          "345:   UINT32 segmentOffset;",
          "348:   segmentOffset = 7;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rdtk/librdtk/rdtk_nine_patch.c||rdtk/librdtk/rdtk_nine_patch.c": [
          "File: rdtk/librdtk/rdtk_nine_patch.c -> rdtk/librdtk/rdtk_nine_patch.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:                                 int nWidth, int nHeight, BYTE* pSrcData, int nSrcStep, int nXSrc, int nYSrc)",
          "31: {",
          "32:  int x, y;",
          "35:  BYTE A, R, G, B;",
          "39:  for (y = 0; y < nHeight; y++)",
          "40:  {",
          "",
          "[Removed Lines]",
          "33:  int nSrcPad;",
          "34:  int nDstPad;",
          "36:  nSrcPad = (nSrcStep - (nWidth * 4));",
          "37:  nDstPad = (nDstStep - (nWidth * 4));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:    }",
          "269:   }",
          "272:  }",
          "274:  ninePatch->scaleTop = beg - 1;",
          "",
          "[Removed Lines]",
          "271:   pixel = (UINT32*) &((BYTE*) pixel)[scanline];",
          "",
          "[Added Lines]",
          "267:   pixel = (UINT32*) & ((BYTE*) pixel)[scanline];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "323:    }",
          "324:   }",
          "327:  }",
          "329:  ninePatch->fillTop = beg - 1;",
          "",
          "[Removed Lines]",
          "326:   pixel = (UINT32*) &((BYTE*) pixel)[scanline];",
          "",
          "[Added Lines]",
          "322:   pixel = (UINT32*) & ((BYTE*) pixel)[scanline];",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c||winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c -> winpr/libwinpr/sspi/NTLM/ntlm_av_pairs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:  int length;",
          "341:  ULONG AvPairsCount;",
          "342:  ULONG AvPairsLength;",
          "344:  NTLM_AV_PAIR* pAvPairList;",
          "345:  UNICODE_STRING NbDomainName;",
          "346:  UNICODE_STRING NbComputerName;",
          "",
          "[Removed Lines]",
          "343:  LONG AvPairListSize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:   return -1;",
          "377:  pAvPairList = (NTLM_AV_PAIR*) context->ChallengeTargetInfo.pvBuffer;",
          "379:  ntlm_av_pair_list_init(pAvPairList);",
          "380:  ntlm_av_pair_add(pAvPairList, MsvAvNbDomainName, (PBYTE) NbDomainName.Buffer, NbDomainName.Length);",
          "381:  ntlm_av_pair_add(pAvPairList, MsvAvNbComputerName, (PBYTE) NbComputerName.Buffer,",
          "",
          "[Removed Lines]",
          "378:  AvPairListSize = (ULONG) context->ChallengeTargetInfo.cbBuffer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspi/NTLM/ntlm_compute.c||winpr/libwinpr/sspi/NTLM/ntlm_compute.c": [
          "File: winpr/libwinpr/sspi/NTLM/ntlm_compute.c -> winpr/libwinpr/sspi/NTLM/ntlm_compute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: const char LM_MAGIC[] = \"KGS!@#$%\";",
          "46: static const BYTE NTLM_NULL_BUFFER[16] =",
          "47: { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };",
          "",
          "[Removed Lines]",
          "41: static const char NTLM_CLIENT_SIGN_MAGIC[] = \"session key to client-to-server signing key magic constant\";",
          "42: static const char NTLM_SERVER_SIGN_MAGIC[] = \"session key to server-to-client signing key magic constant\";",
          "43: static const char NTLM_CLIENT_SEAL_MAGIC[] = \"session key to client-to-server sealing key magic constant\";",
          "44: static const char NTLM_SERVER_SEAL_MAGIC[] = \"session key to server-to-client sealing key magic constant\";",
          "",
          "[Added Lines]",
          "41: static const char NTLM_CLIENT_SIGN_MAGIC[] =",
          "42:     \"session key to client-to-server signing key magic constant\";",
          "43: static const char NTLM_SERVER_SIGN_MAGIC[] =",
          "44:     \"session key to server-to-client signing key magic constant\";",
          "45: static const char NTLM_CLIENT_SEAL_MAGIC[] =",
          "46:     \"session key to client-to-server sealing key magic constant\";",
          "47: static const char NTLM_SERVER_SEAL_MAGIC[] =",
          "48:     \"session key to server-to-client sealing key magic constant\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:  WLog_INFO(TAG, \"\\tProductMinorVersion: %\"PRIu8\"\", versionInfo->ProductMinorVersion);",
          "112:  WLog_INFO(TAG, \"\\tProductBuild: %\"PRIu16\"\", versionInfo->ProductBuild);",
          "113:  WLog_INFO(TAG, \"\\tReserved: 0x%02\"PRIX8\"%02\"PRIX8\"%02\"PRIX8\"\", versionInfo->Reserved[0],",
          "115:  WLog_INFO(TAG, \"\\tNTLMRevisionCurrent: 0x%02\"PRIX8\"\", versionInfo->NTLMRevisionCurrent);",
          "116: }",
          "",
          "[Removed Lines]",
          "114:      versionInfo->Reserved[1], versionInfo->Reserved[2]);",
          "",
          "[Added Lines]",
          "118:            versionInfo->Reserved[1], versionInfo->Reserved[2]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:  WINPR_SAM* sam;",
          "196:  WINPR_SAM_ENTRY* entry;",
          "197:  SSPI_CREDENTIALS* credentials = context->credentials;",
          "199:  sam = SamOpen(context->SamFile, TRUE);",
          "201:  if (!sam)",
          "202:   return -1;",
          "207:  if (entry)",
          "208:  {",
          "",
          "[Removed Lines]",
          "204:  entry = SamLookupUserW(sam, (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "205:    (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2);",
          "",
          "[Added Lines]",
          "207:  entry = SamLookupUserW(sam, (LPWSTR) credentials->identity.User,",
          "208:                         credentials->identity.UserLength * 2,",
          "209:                         (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:   winpr_HexDump(TAG, WLOG_DEBUG, entry->NtHash, 16);",
          "212: #endif",
          "213:   NTOWFv2FromHashW(entry->NtHash,",
          "217:   SamFreeEntry(sam, entry);",
          "218:   SamClose(sam);",
          "219:   return 1;",
          "220:  }",
          "224:  if (entry)",
          "225:  {",
          "",
          "[Removed Lines]",
          "214:     (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "215:     (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2,",
          "216:     (BYTE*) hash);",
          "222:  entry = SamLookupUserW(sam, (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2, NULL, 0);",
          "",
          "[Added Lines]",
          "218:                    (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "219:                    (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2,",
          "220:                    (BYTE*) hash);",
          "226:  entry = SamLookupUserW(sam, (LPWSTR) credentials->identity.User,",
          "227:                         credentials->identity.UserLength * 2, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "228:   winpr_HexDump(TAG, WLOG_DEBUG, entry->NtHash, 16);",
          "229: #endif",
          "230:   NTOWFv2FromHashW(entry->NtHash,",
          "234:   SamFreeEntry(sam, entry);",
          "235:   SamClose(sam);",
          "236:   return 1;",
          "",
          "[Removed Lines]",
          "231:     (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "232:     (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2,",
          "233:     (BYTE*) hash);",
          "",
          "[Added Lines]",
          "236:                    (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "237:                    (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2,",
          "238:                    (BYTE*) hash);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:  PasswordHashLength = credentials->identity.PasswordLength / SSPI_CREDENTIALS_HASH_LENGTH_FACTOR;",
          "257:  status = ConvertFromUnicode(CP_UTF8, 0, (LPCWSTR) credentials->identity.Password,",
          "260:  if (status <= 0)",
          "261:   return -1;",
          "",
          "[Removed Lines]",
          "258:         PasswordHashLength, &PasswordHash, 0, NULL, NULL);",
          "",
          "[Added Lines]",
          "263:                              PasswordHashLength, &PasswordHash, 0, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "283:  if (memcmp(context->NtlmHash, NTLM_NULL_BUFFER, 16) != 0)",
          "284:  {",
          "285:   NTOWFv2FromHashW(context->NtlmHash,",
          "289:  }",
          "290:  else if (credentials->identity.PasswordLength > 256)",
          "291:  {",
          "",
          "[Removed Lines]",
          "286:     (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "287:     (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2,",
          "288:     (BYTE*) hash);",
          "",
          "[Added Lines]",
          "291:                    (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "292:                    (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2,",
          "293:                    (BYTE*) hash);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294:    return -1;",
          "296:   NTOWFv2FromHashW(context->NtlmHash,",
          "300:  }",
          "301:  else if (credentials->identity.Password)",
          "302:  {",
          "303:   NTOWFv2W((LPWSTR) credentials->identity.Password, credentials->identity.PasswordLength * 2,",
          "306:  }",
          "307:  else if (context->HashCallback)",
          "308:  {",
          "",
          "[Removed Lines]",
          "297:     (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "298:     (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2,",
          "299:     (BYTE*) hash);",
          "304:     (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "305:     (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2, (BYTE*) hash);",
          "",
          "[Added Lines]",
          "302:                    (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "303:                    (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2,",
          "304:                    (BYTE*) hash);",
          "309:            (LPWSTR) credentials->identity.User, credentials->identity.UserLength * 2,",
          "310:            (LPWSTR) credentials->identity.Domain, credentials->identity.DomainLength * 2, (BYTE*) hash);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "319:   }",
          "321:   ret = context->HashCallback(context->HashCallbackArg, &credentials->identity, &proofValue,",
          "325:   sspi_SecBufferFree(&proofValue);",
          "326:   sspi_SecBufferFree(&micValue);",
          "327:   return ret ? 1 : -1;",
          "",
          "[Removed Lines]",
          "322:     context->EncryptedRandomSessionKey, context->MessageIntegrityCheck, &micValue,",
          "323:     hash);",
          "",
          "[Added Lines]",
          "327:                               context->EncryptedRandomSessionKey, context->MessageIntegrityCheck, &micValue,",
          "328:                               hash);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "363:  response = (BYTE*) context->LmChallengeResponse.pvBuffer;",
          "365:  winpr_HMAC(WINPR_MD_MD5, (void*) context->NtlmV2Hash, WINPR_MD5_DIGEST_LENGTH,",
          "369:  CopyMemory(&response[16], context->ClientChallenge, 8);",
          "370:  return 1;",
          "",
          "[Removed Lines]",
          "366:    (BYTE*) value, WINPR_MD5_DIGEST_LENGTH,",
          "367:    (BYTE*) response, WINPR_MD5_DIGEST_LENGTH);",
          "",
          "[Added Lines]",
          "370:             (BYTE*) value, WINPR_MD5_DIGEST_LENGTH,",
          "371:             (BYTE*) response, WINPR_MD5_DIGEST_LENGTH);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "384:  SecBuffer ntlm_v2_temp;",
          "385:  SecBuffer ntlm_v2_temp_chal;",
          "386:  PSecBuffer TargetInfo;",
          "389:  TargetInfo = &context->ChallengeTargetInfo;",
          "391:  if (!sspi_SecBufferAlloc(&ntlm_v2_temp, TargetInfo->cbBuffer + 28))",
          "",
          "[Removed Lines]",
          "387:  SSPI_CREDENTIALS* credentials;",
          "388:  credentials = context->credentials;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "401: #ifdef WITH_DEBUG_NTLM",
          "402:  WLog_DBG(TAG, \"Password (length = %\"PRIu32\")\", credentials->identity.PasswordLength * 2);",
          "404:  WLog_DBG(TAG, \"Username (length = %\"PRIu32\")\", credentials->identity.UserLength * 2);",
          "406:  WLog_DBG(TAG, \"Domain (length = %\"PRIu32\")\", credentials->identity.DomainLength * 2);",
          "408:  WLog_DBG(TAG, \"Workstation (length = %\"PRIu16\")\", context->Workstation.Length);",
          "409:  winpr_HexDump(TAG, WLOG_DEBUG, (BYTE*) context->Workstation.Buffer, context->Workstation.Length);",
          "410:  WLog_DBG(TAG, \"NTOWFv2, NTLMv2 Hash\");",
          "",
          "[Removed Lines]",
          "403:  winpr_HexDump(TAG, WLOG_DEBUG, (BYTE*) credentials->identity.Password, credentials->identity.PasswordLength * 2);",
          "405:  winpr_HexDump(TAG, WLOG_DEBUG, (BYTE*) credentials->identity.User, credentials->identity.UserLength * 2);",
          "407:  winpr_HexDump(TAG, WLOG_DEBUG, (BYTE*) credentials->identity.Domain, credentials->identity.DomainLength * 2);",
          "",
          "[Added Lines]",
          "405:  winpr_HexDump(TAG, WLOG_DEBUG, (BYTE*) credentials->identity.Password,",
          "406:                credentials->identity.PasswordLength * 2);",
          "408:  winpr_HexDump(TAG, WLOG_DEBUG, (BYTE*) credentials->identity.User,",
          "409:                credentials->identity.UserLength * 2);",
          "411:  winpr_HexDump(TAG, WLOG_DEBUG, (BYTE*) credentials->identity.Domain,",
          "412:                credentials->identity.DomainLength * 2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "433:  CopyMemory(blob, context->ServerChallenge, 8);",
          "434:  CopyMemory(&blob[8], ntlm_v2_temp.pvBuffer, ntlm_v2_temp.cbBuffer);",
          "435:  winpr_HMAC(WINPR_MD_MD5, (BYTE*) context->NtlmV2Hash, WINPR_MD5_DIGEST_LENGTH,",
          "",
          "[Removed Lines]",
          "436:    (BYTE*) ntlm_v2_temp_chal.pvBuffer, ntlm_v2_temp_chal.cbBuffer,",
          "437:    (BYTE*) nt_proof_str, WINPR_MD5_DIGEST_LENGTH);",
          "",
          "[Added Lines]",
          "441:             (BYTE*) ntlm_v2_temp_chal.pvBuffer, ntlm_v2_temp_chal.cbBuffer,",
          "442:             (BYTE*) nt_proof_str, WINPR_MD5_DIGEST_LENGTH);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "446:  CopyMemory(&blob[16], ntlm_v2_temp.pvBuffer, ntlm_v2_temp.cbBuffer);",
          "448:  winpr_HMAC(WINPR_MD_MD5, (BYTE*) context->NtlmV2Hash, WINPR_MD5_DIGEST_LENGTH,",
          "451:  sspi_SecBufferFree(&ntlm_v2_temp);",
          "452:  sspi_SecBufferFree(&ntlm_v2_temp_chal);",
          "453:  return 1;",
          "",
          "[Removed Lines]",
          "449:    (BYTE*) nt_proof_str, WINPR_MD5_DIGEST_LENGTH,",
          "450:    (BYTE*) context->SessionBaseKey, WINPR_MD5_DIGEST_LENGTH);",
          "",
          "[Added Lines]",
          "454:             (BYTE*) nt_proof_str, WINPR_MD5_DIGEST_LENGTH,",
          "455:             (BYTE*) context->SessionBaseKey, WINPR_MD5_DIGEST_LENGTH);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "534: void ntlm_encrypt_random_session_key(NTLM_CONTEXT* context)",
          "535: {",
          "538: }",
          "",
          "[Removed Lines]",
          "537:  ntlm_rc4k(context->KeyExchangeKey, 16, context->RandomSessionKey, context->EncryptedRandomSessionKey);",
          "",
          "[Added Lines]",
          "543:  ntlm_rc4k(context->KeyExchangeKey, 16, context->RandomSessionKey,",
          "544:            context->EncryptedRandomSessionKey);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "555:  if (context->NegotiateKeyExchange)",
          "557:  else",
          "558:   CopyMemory(context->RandomSessionKey, context->KeyExchangeKey, 16);",
          "559: }",
          "",
          "[Removed Lines]",
          "556:   ntlm_rc4k(context->KeyExchangeKey, 16, context->EncryptedRandomSessionKey, context->RandomSessionKey);",
          "",
          "[Added Lines]",
          "563:   ntlm_rc4k(context->KeyExchangeKey, 16, context->EncryptedRandomSessionKey,",
          "564:             context->RandomSessionKey);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "639:  CopyMemory(p, exported_session_key, WINPR_MD5_DIGEST_LENGTH);",
          "640:  CopyMemory(&p[WINPR_MD5_DIGEST_LENGTH], seal_magic->pvBuffer, seal_magic->cbBuffer);",
          "643:  {",
          "644:   sspi_SecBufferFree(&buffer);",
          "645:   return -1;",
          "",
          "[Removed Lines]",
          "642:  if (!winpr_Digest(WINPR_MD_MD5, buffer.pvBuffer, buffer.cbBuffer, sealing_key, WINPR_MD5_DIGEST_LENGTH))",
          "",
          "[Added Lines]",
          "650:  if (!winpr_Digest(WINPR_MD_MD5, buffer.pvBuffer, buffer.cbBuffer, sealing_key,",
          "651:                    WINPR_MD5_DIGEST_LENGTH))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "719:  if (winpr_HMAC_Init(hmac, WINPR_MD_MD5, context->ExportedSessionKey, WINPR_MD5_DIGEST_LENGTH))",
          "720:  {",
          "724:   winpr_HMAC_Final(hmac, context->MessageIntegrityCheck, WINPR_MD5_DIGEST_LENGTH);",
          "725:  }",
          "726:  winpr_HMAC_Free(hmac);",
          "727: }",
          "",
          "[Removed Lines]",
          "721:   winpr_HMAC_Update(hmac, (BYTE*) context->NegotiateMessage.pvBuffer, context->NegotiateMessage.cbBuffer);",
          "722:   winpr_HMAC_Update(hmac, (BYTE*) context->ChallengeMessage.pvBuffer, context->ChallengeMessage.cbBuffer);",
          "723:   winpr_HMAC_Update(hmac, (BYTE*) context->AuthenticateMessage.pvBuffer, context->AuthenticateMessage.cbBuffer);",
          "",
          "[Added Lines]",
          "729:   winpr_HMAC_Update(hmac, (BYTE*) context->NegotiateMessage.pvBuffer,",
          "730:                     context->NegotiateMessage.cbBuffer);",
          "731:   winpr_HMAC_Update(hmac, (BYTE*) context->ChallengeMessage.pvBuffer,",
          "732:                     context->ChallengeMessage.cbBuffer);",
          "733:   winpr_HMAC_Update(hmac, (BYTE*) context->AuthenticateMessage.pvBuffer,",
          "734:                     context->AuthenticateMessage.cbBuffer);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/ini.c||winpr/libwinpr/utils/ini.c": [
          "File: winpr/libwinpr/utils/ini.c -> winpr/libwinpr/utils/ini.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:  char* value;",
          "367:  char* separator;",
          "368:  char* beg, *end;",
          "370:  wIniFileSection* section = NULL;",
          "372:  while (IniFile_Load_HasNextLine(ini))",
          "",
          "[Removed Lines]",
          "369:  wIniFileKey* key = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "417:    value = beg;",
          "419:    if (!IniFile_AddKey(ini, section, name, value))",
          "421:     return -1;",
          "428:   }",
          "429:  }",
          "",
          "[Removed Lines]",
          "420:    {",
          "422:    }",
          "424:    key = NULL;",
          "426:    if (section && section->keys)",
          "427:     key = section->keys[section->nKeys - 1];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af9a8fbf31a0dc6f46d55f64c06ece63dd2ec6a4",
      "candidate_info": {
        "commit_hash": "af9a8fbf31a0dc6f46d55f64c06ece63dd2ec6a4",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/af9a8fbf31a0dc6f46d55f64c06ece63dd2ec6a4",
        "files": [
          "include/freerdp/codec/nsc.h",
          "libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_encode.h",
          "libfreerdp/codec/nsc_sse2.c"
        ],
        "message": "fix: CVE-2018-8788\n\nBackport of d1112c279bd1a327e8e4d0b5f371458bf2579659",
        "before_after_code_files": [
          "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
          "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
          "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
          "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h",
          "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
            "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
            "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
            "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h",
            "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c"
          ],
          "candidate": [
            "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h",
            "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c",
            "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c",
            "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h",
            "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c"
          ]
        }
      },
      "candidate_diff": {
        "include/freerdp/codec/nsc.h||include/freerdp/codec/nsc.h": [
          "File: include/freerdp/codec/nsc.h -> include/freerdp/codec/nsc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  const BYTE* palette;",
          "65:  NSC_CONTEXT_PRIV* priv;",
          "66: };",
          "",
          "[Removed Lines]",
          "62:  void (*decode)(NSC_CONTEXT* context);",
          "63:  void (*encode)(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride);",
          "",
          "[Added Lines]",
          "62:  BOOL (*decode)(NSC_CONTEXT* context);",
          "63:  BOOL (*encode)(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride);",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc.c||libfreerdp/codec/nsc.c": [
          "File: libfreerdp/codec/nsc.c -> libfreerdp/codec/nsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #define NSC_INIT_SIMD(_nsc_context) do { } while (0)",
          "44: #endif",
          "47: {",
          "48:  UINT16 x;",
          "49:  UINT16 y;",
          "",
          "[Removed Lines]",
          "46: static void nsc_decode(NSC_CONTEXT* context)",
          "",
          "[Added Lines]",
          "46: static BOOL nsc_decode(NSC_CONTEXT* context)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:  INT16 g_val;",
          "61:  INT16 b_val;",
          "62:  BYTE* bmpdata;",
          "64:  bmpdata = context->bmpdata;",
          "65:  rw = ROUND_UP_TO(context->width, 8);",
          "68:  for (y = 0; y < context->height; y++)",
          "69:  {",
          "70:   if (context->nsc_stream.ChromaSubSamplingLevel > 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:  size_t pos = 0;",
          "65:  if (!context)",
          "66:   return FALSE;",
          "72:  if (!bmpdata)",
          "73:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:    r_val = y_val + co_val - cg_val;",
          "89:    g_val = y_val + cg_val;",
          "90:    b_val = y_val - co_val - cg_val;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:    if (pos + 4 > context->bmpdata_length)",
          "100:     return FALSE;",
          "102:    pos += 4;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:    aplane++;",
          "99:   }",
          "100:  }",
          "101: }",
          "104: {",
          "105:  UINT32 len;",
          "106:  UINT32 left;",
          "",
          "[Removed Lines]",
          "103: static void nsc_rle_decode(BYTE* in, BYTE* out, UINT32 origsz)",
          "",
          "[Added Lines]",
          "114:  return TRUE;",
          "117: static BOOL nsc_rle_decode(BYTE* in, BYTE* out, UINT32 outSize, UINT32 origsz)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:   if (left == 5)",
          "115:   {",
          "117:    left--;",
          "118:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:    if (outSize < 1)",
          "131:     return FALSE;",
          "133:    outSize--;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "130:     len = *((UINT32*) in);",
          "131:     in += 4;",
          "132:    }",
          "133:    memset(out, value, len);",
          "134:    out += len;",
          "135:    left -= len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:    if (outSize < len)",
          "152:     return FALSE;",
          "154:    outSize -= len;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "141:   }",
          "142:  }",
          "145: }",
          "148: {",
          "149:  UINT16 i;",
          "150:  BYTE* rle;",
          "151:  UINT32 origsize;",
          "152:  UINT32 planesize;",
          "154:  rle = context->nsc_stream.Planes;",
          "156:  for (i = 0; i < 4; i++)",
          "",
          "[Removed Lines]",
          "147: static void nsc_rle_decompress_data(NSC_CONTEXT* context)",
          "",
          "[Added Lines]",
          "166:  if ((outSize < 4) || (left < 4))",
          "167:   return FALSE;",
          "169:  memcpy(out, in, 4);",
          "170:  return TRUE;",
          "173: static BOOL nsc_rle_decompress_data(NSC_CONTEXT* context)",
          "181:  if (!context)",
          "182:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "159:   planesize = context->nsc_stream.PlaneByteCount[i];",
          "161:   if (planesize == 0)",
          "162:    memset(context->priv->plane_buf[i], 0xff, origsize);",
          "163:   else if (planesize < origsize)",
          "165:   else",
          "166:    memcpy(context->priv->plane_buf[i], rle, origsize);",
          "168:   rle += planesize;",
          "169:  }",
          "170: }",
          "172: static void nsc_stream_initialize(NSC_CONTEXT* context, wStream* s)",
          "",
          "[Removed Lines]",
          "164:    nsc_rle_decode(rle, context->priv->plane_buf[i], origsize);",
          "",
          "[Added Lines]",
          "192:   {",
          "193:    if (context->priv->plane_buf_length < origsize)",
          "194:     return FALSE;",
          "197:   }",
          "199:   {",
          "200:    if (!nsc_rle_decode(rle, context->priv->plane_buf[i], context->priv->plane_buf_length,",
          "201:                        origsize))",
          "202:     return FALSE;",
          "203:   }",
          "205:   {",
          "206:    if (context->priv->plane_buf_length < origsize)",
          "207:     return FALSE;",
          "210:   }",
          "215:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "337:  Stream_Free(s, FALSE);",
          "348: }",
          "",
          "[Removed Lines]",
          "340:  PROFILER_ENTER(context->priv->prof_nsc_rle_decompress_data);",
          "341:  nsc_rle_decompress_data(context);",
          "342:  PROFILER_EXIT(context->priv->prof_nsc_rle_decompress_data);",
          "345:  PROFILER_ENTER(context->priv->prof_nsc_decode);",
          "346:  context->decode(context);",
          "347:  PROFILER_EXIT(context->priv->prof_nsc_decode);",
          "",
          "[Added Lines]",
          "386:  {",
          "387:   BOOL rc;",
          "388:   PROFILER_ENTER(context->priv->prof_nsc_rle_decompress_data);",
          "389:   rc = nsc_rle_decompress_data(context);",
          "390:   PROFILER_EXIT(context->priv->prof_nsc_rle_decompress_data);",
          "392:   if (!rc)",
          "393:                   return;",
          "394:  }",
          "397:  {",
          "398:   BOOL rc;",
          "399:   PROFILER_ENTER(context->priv->prof_nsc_decode);",
          "400:   rc = context->decode(context);",
          "401:   PROFILER_EXIT(context->priv->prof_nsc_decode);",
          "403:   if (!rc)",
          "404:                   return;",
          "405:  }",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.c||libfreerdp/codec/nsc_encode.c": [
          "File: libfreerdp/codec/nsc_encode.c -> libfreerdp/codec/nsc_encode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  }",
          "68: }",
          "71: {",
          "72:  UINT16 x;",
          "73:  UINT16 y;",
          "",
          "[Removed Lines]",
          "70: static void nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride)",
          "",
          "[Added Lines]",
          "70: static BOOL nsc_encode_argb_to_aycocg(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:  UINT32 tempWidth;",
          "86:  UINT32 tempHeight;",
          "88:  tempWidth = ROUND_UP_TO(context->width, 8);",
          "89:  tempHeight = ROUND_UP_TO(context->height, 2);",
          "90:  rw = (context->nsc_stream.ChromaSubSamplingLevel > 0 ? tempWidth : context->width);",
          "91:  ccl = context->nsc_stream.ColorLossLevel;",
          "92:  yplane = context->priv->plane_buf[0];",
          "93:  coplane = context->priv->plane_buf[1];",
          "94:  cgplane = context->priv->plane_buf[2];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  if (!context || bmpdata || (rowstride == 0))",
          "89:   return FALSE;",
          "96:  if (context->priv->plane_buf_length < rw * rowstride)",
          "97:   return FALSE;",
          "99:  if (rw < rowstride * 2)",
          "100:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:   memcpy(coplane + rw, coplane, rw);",
          "197:   memcpy(cgplane + rw, cgplane, rw);",
          "198:  }",
          "199: }",
          "202: {",
          "203:  UINT16 x;",
          "204:  UINT16 y;",
          "211:  UINT32 tempWidth;",
          "212:  UINT32 tempHeight;",
          "214:  tempWidth = ROUND_UP_TO(context->width, 8);",
          "215:  tempHeight = ROUND_UP_TO(context->height, 2);",
          "217:  for (y = 0; y < tempHeight >> 1; y++)",
          "218:  {",
          "225:   for (x = 0; x < tempWidth >> 1; x++)",
          "226:   {",
          "",
          "[Removed Lines]",
          "201: static void nsc_encode_subsampling(NSC_CONTEXT* context)",
          "205:  BYTE* co_dst;",
          "206:  BYTE* cg_dst;",
          "207:  INT8* co_src0;",
          "208:  INT8* co_src1;",
          "209:  INT8* cg_src0;",
          "210:  INT8* cg_src1;",
          "219:   co_dst = context->priv->plane_buf[1] + y * (tempWidth >> 1);",
          "220:   cg_dst = context->priv->plane_buf[2] + y * (tempWidth >> 1);",
          "221:   co_src0 = (INT8*) context->priv->plane_buf[1] + (y << 1) * tempWidth;",
          "222:   co_src1 = co_src0 + tempWidth;",
          "223:   cg_src0 = (INT8*) context->priv->plane_buf[2] + (y << 1) * tempWidth;",
          "224:   cg_src1 = cg_src0 + tempWidth;",
          "",
          "[Added Lines]",
          "210:  return TRUE;",
          "213: static BOOL nsc_encode_subsampling(NSC_CONTEXT* context)",
          "221:  if (!context)",
          "222:   return FALSE;",
          "227:  if (tempHeight == 0)",
          "228:   return FALSE;",
          "230:  if (tempWidth > context->priv->plane_buf_length / tempHeight)",
          "231:   return FALSE;",
          "235:   BYTE* co_dst = context->priv->plane_buf[1] + y * (tempWidth >> 1);",
          "236:   BYTE* cg_dst = context->priv->plane_buf[2] + y * (tempWidth >> 1);",
          "237:   const INT8* co_src0 = (INT8*) context->priv->plane_buf[1] + (y << 1) * tempWidth;",
          "238:   const INT8* co_src1 = co_src0 + tempWidth;",
          "239:   const INT8* cg_src0 = (INT8*) context->priv->plane_buf[2] + (y << 1) * tempWidth;",
          "240:   const INT8* cg_src1 = cg_src0 + tempWidth;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234:    cg_src1 += 2;",
          "235:   }",
          "236:  }",
          "237: }",
          "240: {",
          "242:  if (context->nsc_stream.ChromaSubSamplingLevel > 0)",
          "243:  {",
          "245:  }",
          "246: }",
          "249: {",
          "250:  UINT32 left;",
          "251:  UINT32 runlength = 1;",
          "",
          "[Removed Lines]",
          "239: void nsc_encode(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride)",
          "241:  nsc_encode_argb_to_aycocg(context, bmpdata, rowstride);",
          "244:   nsc_encode_subsampling(context);",
          "248: static UINT32 nsc_rle_encode(BYTE* in, BYTE* out, UINT32 origsz)",
          "",
          "[Added Lines]",
          "254:  return TRUE;",
          "257: BOOL nsc_encode(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride)",
          "259:  if (!context || !bmpdata || (rowstride == 0))",
          "260:   return FALSE;",
          "262:  if (!nsc_encode_argb_to_aycocg(context, bmpdata, rowstride))",
          "263:   return FALSE;",
          "267:   if (!nsc_encode_subsampling(context))",
          "268:    return FALSE;",
          "271:  return TRUE;",
          "274: static UINT32 nsc_rle_encode(const BYTE* in, BYTE* out, UINT32 origsz)",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_encode.h||libfreerdp/codec/nsc_encode.h": [
          "File: libfreerdp/codec/nsc_encode.h -> libfreerdp/codec/nsc_encode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #ifndef __NSC_ENCODE_H",
          "21: #define __NSC_ENCODE_H",
          "25: #endif",
          "",
          "[Removed Lines]",
          "23: void nsc_encode(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride);",
          "",
          "[Added Lines]",
          "23: BOOL nsc_encode(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride);",
          "",
          "---------------"
        ],
        "libfreerdp/codec/nsc_sse2.c||libfreerdp/codec/nsc_sse2.c": [
          "File: libfreerdp/codec/nsc_sse2.c -> libfreerdp/codec/nsc_sse2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:  }",
          "334: }",
          "337: {",
          "338:  nsc_encode_argb_to_aycocg_sse2(context, bmpdata, rowstride);",
          "339:  if (context->nsc_stream.ChromaSubSamplingLevel > 0)",
          "340:  {",
          "341:   nsc_encode_subsampling_sse2(context);",
          "342:  }",
          "343: }",
          "345: void nsc_init_sse2(NSC_CONTEXT* context)",
          "",
          "[Removed Lines]",
          "336: static void nsc_encode_sse2(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride)",
          "",
          "[Added Lines]",
          "336: static BOOL nsc_encode_sse2(NSC_CONTEXT* context, BYTE* bmpdata, int rowstride)",
          "344:  return TRUE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}