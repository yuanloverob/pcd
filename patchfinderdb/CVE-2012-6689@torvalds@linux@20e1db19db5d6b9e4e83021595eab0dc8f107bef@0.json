{
  "cve_id": "CVE-2012-6689",
  "cve_desc": "The netlink_sendmsg function in net/netlink/af_netlink.c in the Linux kernel before 3.5.5 does not validate the dst_pid field, which allows local users to have an unspecified impact by spoofing Netlink messages.",
  "repo": "torvalds/linux",
  "patch_hash": "20e1db19db5d6b9e4e83021595eab0dc8f107bef",
  "patch_info": {
    "commit_hash": "20e1db19db5d6b9e4e83021595eab0dc8f107bef",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/20e1db19db5d6b9e4e83021595eab0dc8f107bef",
    "files": [
      "net/netlink/af_netlink.c"
    ],
    "message": "netlink: fix possible spoofing from non-root processes\n\nNon-root user-space processes can send Netlink messages to other\nprocesses that are well-known for being subscribed to Netlink\nasynchronous notifications. This allows ilegitimate non-root\nprocess to send forged messages to Netlink subscribers.\n\nThe userspace process usually verifies the legitimate origin in\ntwo ways:\n\na) Socket credentials. If UID != 0, then the message comes from\n   some ilegitimate process and the message needs to be dropped.\n\nb) Netlink portID. In general, portID == 0 means that the origin\n   of the messages comes from the kernel. Thus, discarding any\n   message not coming from the kernel.\n\nHowever, ctnetlink sets the portID in event messages that has\nbeen triggered by some user-space process, eg. conntrack utility.\nSo other processes subscribed to ctnetlink events, eg. conntrackd,\nknow that the event was triggered by some user-space action.\n\nNeither of the two ways to discard ilegitimate messages coming\nfrom non-root processes can help for ctnetlink.\n\nThis patch adds capability validation in case that dst_pid is set\nin netlink_sendmsg(). This approach is aggressive since existing\napplications using any Netlink bus to deliver messages between\ntwo user-space processes will break. Note that the exception is\nNETLINK_USERSOCK, since it is reserved for netlink-to-netlink\nuserspace communication.\n\nStill, if anyone wants that his Netlink bus allows netlink-to-netlink\nuserspace, then they can set NL_NONROOT_SEND. However, by default,\nI don't think it makes sense to allow to use NETLINK_ROUTE to\ncommunicate two processes that are sending no matter what information\nthat is not related to link/neighbouring/routing. They should be using\nNETLINK_USERSOCK instead for that.\n\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/netlink/af_netlink.c||net/netlink/af_netlink.c"
    ]
  },
  "patch_diff": {
    "net/netlink/af_netlink.c||net/netlink/af_netlink.c": [
      "File: net/netlink/af_netlink.c -> net/netlink/af_netlink.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1373:   dst_pid = addr->nl_pid;",
      "1374:   dst_group = ffs(addr->nl_groups);",
      "1375:   err =  -EPERM;",
      "1377:    goto out;",
      "1378:  } else {",
      "1379:   dst_pid = nlk->dst_pid;",
      "",
      "[Removed Lines]",
      "1376:   if (dst_group && !netlink_capable(sock, NL_NONROOT_SEND))",
      "",
      "[Added Lines]",
      "1376:   if ((dst_group || dst_pid) &&",
      "1377:       !netlink_capable(sock, NL_NONROOT_SEND))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2147:  rcu_assign_pointer(nl_table[NETLINK_USERSOCK].listeners, listeners);",
      "2148:  nl_table[NETLINK_USERSOCK].module = THIS_MODULE;",
      "2149:  nl_table[NETLINK_USERSOCK].registered = 1;",
      "2151:  netlink_table_ungrab();",
      "2152: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2151:  nl_table[NETLINK_USERSOCK].nl_nonroot = NL_NONROOT_SEND;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9785e10aedfa0fad5c1aac709dce5ada1b123783",
      "candidate_info": {
        "commit_hash": "9785e10aedfa0fad5c1aac709dce5ada1b123783",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9785e10aedfa0fad5c1aac709dce5ada1b123783",
        "files": [
          "include/linux/netlink.h",
          "lib/kobject_uevent.c",
          "net/core/rtnetlink.c",
          "net/netlink/af_netlink.c",
          "net/netlink/genetlink.c",
          "security/selinux/netlink.c"
        ],
        "message": "netlink: kill netlink_set_nonroot\n\nReplace netlink_set_nonroot by one new field `flags' in\nstruct netlink_kernel_cfg that is passed to netlink_kernel_create.\n\nThis patch also renames NL_NONROOT_* to NL_CFG_F_NONROOT_* since\nnow the flags field in nl_table is generic (so we can add more\nflags if needed in the future).\n\nAlso adjust all callers in the net-next tree to use these flags\ninstead of netlink_set_nonroot.\n\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/linux/netlink.h||include/linux/netlink.h",
          "lib/kobject_uevent.c||lib/kobject_uevent.c",
          "net/core/rtnetlink.c||net/core/rtnetlink.c",
          "net/netlink/af_netlink.c||net/netlink/af_netlink.c",
          "net/netlink/genetlink.c||net/netlink/genetlink.c",
          "security/selinux/netlink.c||security/selinux/netlink.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/netlink/af_netlink.c||net/netlink/af_netlink.c"
          ],
          "candidate": [
            "net/netlink/af_netlink.c||net/netlink/af_netlink.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/netlink.h||include/linux/netlink.h": [
          "File: include/linux/netlink.h -> include/linux/netlink.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "176: extern void netlink_table_grab(void);",
          "177: extern void netlink_table_ungrab(void);",
          "180: struct netlink_kernel_cfg {",
          "181:  unsigned int groups;",
          "182:  void  (*input)(struct sk_buff *skb);",
          "183:  struct mutex *cb_mutex;",
          "184:  void  (*bind)(int group);",
          "185: };",
          "187: extern struct sock *netlink_kernel_create(struct net *net, int unit,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179: #define NL_CFG_F_NONROOT_RECV (1 << 0)",
          "180: #define NL_CFG_F_NONROOT_SEND (1 << 1)",
          "188:  unsigned int flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "260:          const struct nlmsghdr *nlh,",
          "261:          struct netlink_dump_control *control);",
          "",
          "[Removed Lines]",
          "264: #define NL_NONROOT_RECV 0x1",
          "265: #define NL_NONROOT_SEND 0x2",
          "266: extern void netlink_set_nonroot(int protocol, unsigned flag);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/kobject_uevent.c||lib/kobject_uevent.c": [
          "File: lib/kobject_uevent.c -> lib/kobject_uevent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:  struct uevent_sock *ue_sk;",
          "376:  struct netlink_kernel_cfg cfg = {",
          "377:   .groups = 1,",
          "378:  };",
          "380:  ue_sk = kzalloc(sizeof(*ue_sk), GFP_KERNEL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "378:   .flags = NL_CFG_F_NONROOT_RECV,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423: static int __init kobject_uevent_init(void)",
          "424: {",
          "426:  return register_pernet_subsys(&uevent_net_ops);",
          "427: }",
          "",
          "[Removed Lines]",
          "425:  netlink_set_nonroot(NETLINK_KOBJECT_UEVENT, NL_NONROOT_RECV);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/core/rtnetlink.c||net/core/rtnetlink.c": [
          "File: net/core/rtnetlink.c -> net/core/rtnetlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2381:   .groups  = RTNLGRP_MAX,",
          "2382:   .input  = rtnetlink_rcv,",
          "2383:   .cb_mutex = &rtnl_mutex,",
          "2384:  };",
          "2386:  sk = netlink_kernel_create(net, NETLINK_ROUTE, THIS_MODULE, &cfg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2384:   .flags  = NL_CFG_F_NONROOT_RECV,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2416:  if (register_pernet_subsys(&rtnetlink_net_ops))",
          "2417:   panic(\"rtnetlink_init: cannot initialize rtnetlink\\n\");",
          "2420:  register_netdevice_notifier(&rtnetlink_dev_notifier);",
          "2422:  rtnl_register(PF_UNSPEC, RTM_GETLINK, rtnl_getlink,",
          "",
          "[Removed Lines]",
          "2419:  netlink_set_nonroot(NETLINK_ROUTE, NL_NONROOT_RECV);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/netlink/af_netlink.c||net/netlink/af_netlink.c": [
          "File: net/netlink/af_netlink.c -> net/netlink/af_netlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:  struct nl_pid_hash hash;",
          "122:  struct hlist_head mc_list;",
          "123:  struct listeners __rcu *listeners;",
          "125:  unsigned int  groups;",
          "126:  struct mutex  *cb_mutex;",
          "127:  struct module  *module;",
          "",
          "[Removed Lines]",
          "124:  unsigned int  nl_nonroot;",
          "",
          "[Added Lines]",
          "124:  unsigned int  flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:   if (--nl_table[sk->sk_protocol].registered == 0) {",
          "537:    kfree(nl_table[sk->sk_protocol].listeners);",
          "538:    nl_table[sk->sk_protocol].module = NULL;",
          "539:    nl_table[sk->sk_protocol].registered = 0;",
          "540:   }",
          "541:  } else if (nlk->subscriptions) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:    nl_table[sk->sk_protocol].bind = NULL;",
          "540:    nl_table[sk->sk_protocol].flags = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "597: static inline int netlink_capable(const struct socket *sock, unsigned int flag)",
          "598: {",
          "600:         capable(CAP_NET_ADMIN);",
          "601: }",
          "",
          "[Removed Lines]",
          "599:  return (nl_table[sock->sk->sk_protocol].nl_nonroot & flag) ||",
          "",
          "[Added Lines]",
          "601:  return (nl_table[sock->sk->sk_protocol].flags & flag) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "661:  if (nladdr->nl_groups) {",
          "663:    return -EPERM;",
          "664:   err = netlink_realloc_groups(sk);",
          "665:   if (err)",
          "",
          "[Removed Lines]",
          "662:   if (!netlink_capable(sock, NL_NONROOT_RECV))",
          "",
          "[Added Lines]",
          "664:   if (!netlink_capable(sock, NL_CFG_F_NONROOT_RECV))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "721:   return -EINVAL;",
          "725:   return -EPERM;",
          "727:  if (!nlk->pid)",
          "",
          "[Removed Lines]",
          "724:  if (nladdr->nl_groups && !netlink_capable(sock, NL_NONROOT_SEND))",
          "",
          "[Added Lines]",
          "726:  if (nladdr->nl_groups && !netlink_capable(sock, NL_CFG_F_NONROOT_SEND))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1244:   break;",
          "1245:  case NETLINK_ADD_MEMBERSHIP:",
          "1246:  case NETLINK_DROP_MEMBERSHIP: {",
          "1248:    return -EPERM;",
          "1249:   err = netlink_realloc_groups(sk);",
          "1250:   if (err)",
          "",
          "[Removed Lines]",
          "1247:   if (!netlink_capable(sock, NL_NONROOT_RECV))",
          "",
          "[Added Lines]",
          "1249:   if (!netlink_capable(sock, NL_CFG_F_NONROOT_RECV))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1376:   dst_group = ffs(addr->nl_groups);",
          "1377:   err =  -EPERM;",
          "1378:   if ((dst_group || dst_pid) &&",
          "1380:    goto out;",
          "1381:  } else {",
          "1382:   dst_pid = nlk->dst_pid;",
          "",
          "[Removed Lines]",
          "1379:       !netlink_capable(sock, NL_NONROOT_SEND))",
          "",
          "[Added Lines]",
          "1381:       !netlink_capable(sock, NL_CFG_F_NONROOT_SEND))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1580:   rcu_assign_pointer(nl_table[unit].listeners, listeners);",
          "1581:   nl_table[unit].cb_mutex = cb_mutex;",
          "1582:   nl_table[unit].module = module;",
          "1584:   nl_table[unit].registered = 1;",
          "1585:  } else {",
          "1586:   kfree(listeners);",
          "",
          "[Removed Lines]",
          "1583:   nl_table[unit].bind = cfg ? cfg->bind : NULL;",
          "",
          "[Added Lines]",
          "1585:   if (cfg) {",
          "1586:    nl_table[unit].bind = cfg->bind;",
          "1587:    nl_table[unit].flags = cfg->flags;",
          "1588:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1679:  netlink_table_ungrab();",
          "1680: }",
          "1689: struct nlmsghdr *",
          "1690: __nlmsg_put(struct sk_buff *skb, u32 pid, u32 seq, int type, int len, int flags)",
          "1691: {",
          "",
          "[Removed Lines]",
          "1682: void netlink_set_nonroot(int protocol, unsigned int flags)",
          "1683: {",
          "1684:  if ((unsigned int)protocol < MAX_LINKS)",
          "1685:   nl_table[protocol].nl_nonroot = flags;",
          "1686: }",
          "1687: EXPORT_SYMBOL(netlink_set_nonroot);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2150:  rcu_assign_pointer(nl_table[NETLINK_USERSOCK].listeners, listeners);",
          "2151:  nl_table[NETLINK_USERSOCK].module = THIS_MODULE;",
          "2152:  nl_table[NETLINK_USERSOCK].registered = 1;",
          "2155:  netlink_table_ungrab();",
          "2156: }",
          "",
          "[Removed Lines]",
          "2153:  nl_table[NETLINK_USERSOCK].nl_nonroot = NL_NONROOT_SEND;",
          "",
          "[Added Lines]",
          "2151:  nl_table[NETLINK_USERSOCK].flags = NL_CFG_F_NONROOT_SEND;",
          "",
          "---------------"
        ],
        "net/netlink/genetlink.c||net/netlink/genetlink.c": [
          "File: net/netlink/genetlink.c -> net/netlink/genetlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "918:  struct netlink_kernel_cfg cfg = {",
          "919:   .input  = genl_rcv,",
          "920:   .cb_mutex = &genl_mutex,",
          "921:  };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "921:   .flags  = NL_CFG_F_NONROOT_RECV,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "955:  if (err < 0)",
          "956:   goto problem;",
          "960:  err = register_pernet_subsys(&genl_pernet_ops);",
          "961:  if (err)",
          "962:   goto problem;",
          "",
          "[Removed Lines]",
          "958:  netlink_set_nonroot(NETLINK_GENERIC, NL_NONROOT_RECV);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "security/selinux/netlink.c||security/selinux/netlink.c": [
          "File: security/selinux/netlink.c -> security/selinux/netlink.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113: {",
          "114:  struct netlink_kernel_cfg cfg = {",
          "115:   .groups = SELNLGRP_MAX,",
          "116:  };",
          "118:  selnl = netlink_kernel_create(&init_net, NETLINK_SELINUX,",
          "119:           THIS_MODULE, &cfg);",
          "120:  if (selnl == NULL)",
          "121:   panic(\"SELinux:  Cannot create netlink socket.\");",
          "123:  return 0;",
          "124: }",
          "",
          "[Removed Lines]",
          "122:  netlink_set_nonroot(NETLINK_SELINUX, NL_NONROOT_RECV);",
          "",
          "[Added Lines]",
          "116:   .flags = NL_CFG_F_NONROOT_RECV,",
          "",
          "---------------"
        ]
      }
    }
  ]
}