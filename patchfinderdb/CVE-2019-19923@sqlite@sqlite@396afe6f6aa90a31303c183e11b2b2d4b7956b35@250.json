{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
      "candidate_info": {
        "commit_hash": "c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a possible memory leak when trying to UPDATE a corrupt RTREE index.\n\nFossilOrigin-Name: 63eb803dbc27077007dbee8def659d1523724eb73f1def1cdb68027e5c20843a",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:       pNode->pNext = 0;",
          "718:       rc = sqlite3_blob_read(pRtree->pNodeBlob, pNode->zData,",
          "719:                              pRtree->iNodeSize, 0);",
          "721:     }",
          "722:   }",
          "",
          "[Removed Lines]",
          "720:       nodeReference(pParent);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "749:   if( rc==SQLITE_OK ){",
          "750:     if( pNode!=0 ){",
          "751:       nodeHashInsert(pRtree, pNode);",
          "752:     }else{",
          "753:       rc = SQLITE_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:       nodeReference(pParent);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 673a7dd698eca05bb2909fa01f962a0667361732a6d0e61cf7780ead4a07c967",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7a5e498400ae8c533c53aa37a62194bd734b422",
      "candidate_info": {
        "commit_hash": "d7a5e498400ae8c533c53aa37a62194bd734b422",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d7a5e498400ae8c533c53aa37a62194bd734b422",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/pcache1.c"
        ],
        "message": "Back out the expansion of the temporary buffer size from [32754ca6f86da816] and replace it with an explicit test for buffer overreads.\n\nFossilOrigin-Name: 8ba3d9f38090c4bbbcffba1930e5c26f69ff61f49b72a4a5a59253d37341380f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f8b781cf41800e9f61a1c5376404a97e76a2bbbcaa17396d42be62f731363947",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6762:   for(i=0; i<nCell; i++){",
          "6763:     u8 *pCell = apCell[i];",
          "6764:     if( SQLITE_WITHIN(pCell,aData,pEnd) ){",
          "6765:       pCell = &pTmp[pCell - aData];",
          "6766:     }",
          "6767:     pData -= szCell[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6765:       if( ((uptr)(pCell+szCell[i]))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484: }",
          "",
          "[Removed Lines]",
          "483:   return pcache1Alloc(sz + 32);",
          "",
          "[Added Lines]",
          "483:   return pcache1Alloc(sz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
      "candidate_info": {
        "commit_hash": "dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/wherecode.c"
        ],
        "message": "Strive to prevent harmless compiler warnings in GCC 4.8.5.\n\nFossilOrigin-Name: 8b6691f619ed9a56f6aecbd878ebb447c40984f8767508b248494fd9ec68fbaa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 82062351a62f4ccc438a2b47a22ee581bd030dec952fecd610f360a25002a5ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7989:       while( i==cntOldNext ){",
          "7990:         iOld++;",
          "7991:         assert( iOld<nNew || iOld<nOld );",
          "7992:         pOld = iOld<nNew ? apNew[iOld] : apOld[iOld];",
          "7993:         cntOldNext += pOld->nCell + pOld->nOverflow + !leafData;",
          "7994:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7992:         assert( iOld>=0 && iOld<NB );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:     sqlite3VdbeGoto(v, pLevel->addrBrk);",
          "2116:     sqlite3VdbeResolveLabel(v, iLoopBody);",
          "2119:     if( !untestedTerms ) disableTerm(pLevel, pTerm);",
          "2120:   }else",
          "",
          "[Removed Lines]",
          "2118:     if( pWInfo->nLevel>1 ) sqlite3StackFree(db, pOrTab);",
          "",
          "[Added Lines]",
          "2118:     if( pWInfo->nLevel>1 ){ sqlite3StackFree(db, pOrTab); }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5eae1d1b33b376fab31497cbdb129e2e065568c8",
      "candidate_info": {
        "commit_hash": "5eae1d1b33b376fab31497cbdb129e2e065568c8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5eae1d1b33b376fab31497cbdb129e2e065568c8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/where.c",
          "src/whereexpr.c"
        ],
        "message": "More legacy STAT3 code removed.\n\nFossilOrigin-Name: 845d2f17de5b4740f95884307d9efec3223737bb0f2c4a74693666caf5f61c21",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e17ea2fd1df4ad49138c787c8fe3207dd0c25c93f9001d52a9b69f8c12e841c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1684:     nSample = sqlite3_column_int(pStmt, 1);",
          "1685:     pIdx = findIndexOrPrimaryKey(db, zIndex, zDb);",
          "1686:     assert( pIdx==0 || pIdx->nSample==0 );",
          "1690:     assert( !HasRowid(pIdx->pTable) || pIdx->nColumn==pIdx->nKeyCol+1 );",
          "1691:     if( !HasRowid(pIdx->pTable) && IsPrimaryKeyIndex(pIdx) ){",
          "1692:       nIdxCol = pIdx->nKeyCol;",
          "",
          "[Removed Lines]",
          "1689:     if( pIdx==0 || pIdx->nSample ) continue;",
          "",
          "[Added Lines]",
          "1687:     if( pIdx==0 ) continue;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7173:     { \"order-by-idx-join\",   SQLITE_OrderByIdxJoin },",
          "7174:     { \"transitive\",          SQLITE_Transitive     },",
          "7175:     { \"omit-noop-join\",      SQLITE_OmitNoopJoin   },",
          "7177:     { \"skip-scan\",           SQLITE_SkipScan       },",
          "7178:   };",
          "",
          "[Removed Lines]",
          "7176:     { \"stat4\",               SQLITE_Stat34         },",
          "",
          "[Added Lines]",
          "7176:     { \"stat4\",               SQLITE_Stat4          },",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1474:   Index *p = pLoop->u.btree.pIndex;",
          "1475:   int nEq = pLoop->u.btree.nEq;",
          "1479:   ){",
          "1480:     if( nEq==pBuilder->nRecValid ){",
          "1481:       UnpackedRecord *pRec = pBuilder->pRec;",
          "",
          "[Removed Lines]",
          "1477:   if( p->nSample>0 && nEq<p->nSampleCol",
          "1478:    && OptimizationEnabled(pParse->db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "1477:   if( p->nSample>0 && ALWAYS(nEq<p->nSampleCol)",
          "1478:    && OptimizationEnabled(pParse->db, SQLITE_Stat4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2633:          && pProbe->nSample",
          "2634:          && pNew->u.btree.nEq<=pProbe->nSampleCol",
          "2635:          && ((eOp & WO_IN)==0 || !ExprHasProperty(pTerm->pExpr, EP_xIsSelect))",
          "2637:         ){",
          "2638:           Expr *pExpr = pTerm->pExpr;",
          "2639:           if( (eOp & (WO_EQ|WO_ISNULL|WO_IS))!=0 ){",
          "",
          "[Removed Lines]",
          "2636:          && OptimizationEnabled(db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "2636:          && OptimizationEnabled(db, SQLITE_Stat4)",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1393:    && pExpr->pLeft->op==TK_COLUMN",
          "1394:    && pExpr->pLeft->iColumn>=0",
          "1395:    && !ExprHasProperty(pExpr, EP_FromJoin)",
          "1397:   ){",
          "1398:     Expr *pNewExpr;",
          "1399:     Expr *pLeft = pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "1396:    && OptimizationEnabled(db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "1396:    && OptimizationEnabled(db, SQLITE_Stat4)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38a59af41766695f2e1aa6581781bb222e56a8b9",
      "candidate_info": {
        "commit_hash": "38a59af41766695f2e1aa6581781bb222e56a8b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/38a59af41766695f2e1aa6581781bb222e56a8b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Use \"long double\" literals to initialize an array of \"long double\" objects.\n\nFossilOrigin-Name: 2e2ebad3ab636c4c65814ad41d417b105be8e254d609d0e08fbba4c5bd107bf3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b84e7057c05338347b4267f7ccc1d7b9b6d4e9a941ce8b76bf2c27c26772000c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "359: static LONGDOUBLE_TYPE sqlite3Pow10(int E){",
          "360: #if defined(_MSC_VER)",
          "361:   static const LONGDOUBLE_TYPE x[] = {",
          "371:   };",
          "372:   LONGDOUBLE_TYPE r = 1.0;",
          "373:   int i;",
          "",
          "[Removed Lines]",
          "362:     1.0e+001,",
          "363:     1.0e+002,",
          "364:     1.0e+004,",
          "365:     1.0e+008,",
          "366:     1.0e+016,",
          "367:     1.0e+032,",
          "368:     1.0e+064,",
          "369:     1.0e+128,",
          "370:     1.0e+256",
          "",
          "[Added Lines]",
          "362:     1.0e+001L,",
          "363:     1.0e+002L,",
          "364:     1.0e+004L,",
          "365:     1.0e+008L,",
          "366:     1.0e+016L,",
          "367:     1.0e+032L,",
          "368:     1.0e+064L,",
          "369:     1.0e+128L,",
          "370:     1.0e+256L",
          "",
          "---------------"
        ]
      }
    }
  ]
}