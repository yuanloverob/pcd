{
  "cve_id": "CVE-2013-1858",
  "cve_desc": "The clone system-call implementation in the Linux kernel before 3.8.3 does not properly handle a combination of the CLONE_NEWUSER and CLONE_FS flags, which allows local users to gain privileges by calling chroot and leveraging the sharing of the / directory between a parent process and a child process.",
  "repo": "torvalds/linux",
  "patch_hash": "e66eded8309ebf679d3d3c1f5820d1f2ca332c71",
  "patch_info": {
    "commit_hash": "e66eded8309ebf679d3d3c1f5820d1f2ca332c71",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e66eded8309ebf679d3d3c1f5820d1f2ca332c71",
    "files": [
      "kernel/fork.c",
      "kernel/user_namespace.c"
    ],
    "message": "userns: Don't allow CLONE_NEWUSER | CLONE_FS\n\nDon't allowing sharing the root directory with processes in a\ndifferent user namespace.  There doesn't seem to be any point, and to\nallow it would require the overhead of putting a user namespace\nreference in fs_struct (for permission checks) and incrementing that\nreference count on practically every call to fork.\n\nSo just perform the inexpensive test of forbidding sharing fs_struct\nacrosss processes in different user namespaces.  We already disallow\nother forms of threading when unsharing a user namespace so this\nshould be no real burden in practice.\n\nThis updates setns, clone, and unshare to disallow multiple user\nnamespaces sharing an fs_struct.\n\nCc: stable@vger.kernel.org\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "kernel/fork.c||kernel/fork.c",
      "kernel/user_namespace.c||kernel/user_namespace.c"
    ]
  },
  "patch_diff": {
    "kernel/fork.c||kernel/fork.c": [
      "File: kernel/fork.c -> kernel/fork.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:  if ((clone_flags & (CLONE_NEWNS|CLONE_FS)) == (CLONE_NEWNS|CLONE_FS))",
      "1142:   return ERR_PTR(-EINVAL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:  if ((clone_flags & (CLONE_NEWUSER|CLONE_FS)) == (CLONE_NEWUSER|CLONE_FS))",
      "1145:   return ERR_PTR(-EINVAL);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1809:  if (unshare_flags & CLONE_NEWUSER)",
      "",
      "[Removed Lines]",
      "1810:   unshare_flags |= CLONE_THREAD;",
      "",
      "[Added Lines]",
      "1813:   unshare_flags |= CLONE_THREAD | CLONE_FS;",
      "",
      "---------------"
    ],
    "kernel/user_namespace.c||kernel/user_namespace.c": [
      "File: kernel/user_namespace.c -> kernel/user_namespace.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: #include <linux/uaccess.h>",
      "22: #include <linux/ctype.h>",
      "23: #include <linux/projid.h>",
      "25: static struct kmem_cache *user_ns_cachep __read_mostly;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: #include <linux/fs_struct.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "837:  if (atomic_read(&current->mm->mm_users) > 1)",
      "838:   return -EINVAL;",
      "840:  if (!ns_capable(user_ns, CAP_SYS_ADMIN))",
      "841:   return -EPERM;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "841:  if (current->fs->users != 1)",
      "842:   return -EINVAL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2e0d98705e60e45bbb3c0032c48824ad7ae0704",
      "candidate_info": {
        "commit_hash": "b2e0d98705e60e45bbb3c0032c48824ad7ae0704",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/b2e0d98705e60e45bbb3c0032c48824ad7ae0704",
        "files": [
          "include/linux/nsproxy.h",
          "include/linux/user_namespace.h",
          "kernel/fork.c",
          "kernel/nsproxy.c",
          "kernel/user_namespace.c"
        ],
        "message": "userns: Implement unshare of the user namespace\n\n- Add CLONE_THREAD to the unshare flags if CLONE_NEWUSER is selected\n  As changing user namespaces is only valid if all there is only\n  a single thread.\n- Restore the code to add CLONE_VM if CLONE_THREAD is selected and\n  the code to addCLONE_SIGHAND if CLONE_VM is selected.\n  Making the constraints in the code clear.\n\nAcked-by: Serge Hallyn <serge.hallyn@canonical.com>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
        "before_after_code_files": [
          "include/linux/nsproxy.h||include/linux/nsproxy.h",
          "include/linux/user_namespace.h||include/linux/user_namespace.h",
          "kernel/fork.c||kernel/fork.c",
          "kernel/nsproxy.c||kernel/nsproxy.c",
          "kernel/user_namespace.c||kernel/user_namespace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/fork.c||kernel/fork.c",
            "kernel/user_namespace.c||kernel/user_namespace.c"
          ],
          "candidate": [
            "kernel/fork.c||kernel/fork.c",
            "kernel/user_namespace.c||kernel/user_namespace.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/nsproxy.h||include/linux/nsproxy.h": [
          "File: include/linux/nsproxy.h -> include/linux/nsproxy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);",
          "68: void free_nsproxy(struct nsproxy *ns);",
          "69: int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,",
          "71: int __init nsproxy_cache_init(void);",
          "73: static inline void put_nsproxy(struct nsproxy *ns)",
          "",
          "[Removed Lines]",
          "70:  struct fs_struct *);",
          "",
          "[Added Lines]",
          "70:  struct cred *, struct fs_struct *);",
          "",
          "---------------"
        ],
        "include/linux/user_namespace.h||include/linux/user_namespace.h": [
          "File: include/linux/user_namespace.h -> include/linux/user_namespace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: }",
          "41: extern int create_user_ns(struct cred *new);",
          "42: extern void free_user_ns(struct kref *kref);",
          "44: static inline void put_user_ns(struct user_namespace *ns)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: extern int unshare_userns(unsigned long unshare_flags, struct cred **new_cred);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:  return -EINVAL;",
          "67: }",
          "69: static inline void put_user_ns(struct user_namespace *ns)",
          "70: {",
          "71: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: static inline int unshare_userns(unsigned long unshare_flags,",
          "71:      struct cred **new_cred)",
          "72: {",
          "73:  if (unshare_flags & CLONE_NEWUSER)",
          "74:   return -EINVAL;",
          "75:  return 0;",
          "76: }",
          "",
          "---------------"
        ],
        "kernel/fork.c||kernel/fork.c": [
          "File: kernel/fork.c -> kernel/fork.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1687:  if (unshare_flags & ~(CLONE_THREAD|CLONE_FS|CLONE_NEWNS|CLONE_SIGHAND|",
          "1688:     CLONE_VM|CLONE_FILES|CLONE_SYSVSEM|",
          "1689:     CLONE_NEWUTS|CLONE_NEWIPC|CLONE_NEWNET|",
          "1691:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "1690:     CLONE_NEWPID))",
          "",
          "[Added Lines]",
          "1690:     CLONE_NEWUSER|CLONE_NEWPID))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1754: {",
          "1755:  struct fs_struct *fs, *new_fs = NULL;",
          "1756:  struct files_struct *fd, *new_fd = NULL;",
          "1757:  struct nsproxy *new_nsproxy = NULL;",
          "1758:  int do_sysvsem = 0;",
          "1759:  int err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1757:  struct cred *new_cred = NULL;",
          "1765:  if (unshare_flags & CLONE_NEWUSER)",
          "1766:   unshare_flags |= CLONE_THREAD;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1795:  err = unshare_fd(unshare_flags, &new_fd);",
          "1796:  if (err)",
          "1797:   goto bad_unshare_cleanup_fs;",
          "1799:  if (err)",
          "1800:   goto bad_unshare_cleanup_fd;",
          "1803:   if (do_sysvsem) {",
          "",
          "[Removed Lines]",
          "1798:  err = unshare_nsproxy_namespaces(unshare_flags, &new_nsproxy, new_fs);",
          "1802:  if (new_fs || new_fd || do_sysvsem || new_nsproxy) {",
          "",
          "[Added Lines]",
          "1804:  err = unshare_userns(unshare_flags, &new_cred);",
          "1807:  err = unshare_nsproxy_namespaces(unshare_flags, &new_nsproxy,",
          "1808:       new_cred, new_fs);",
          "1809:  if (err)",
          "1810:   goto bad_unshare_cleanup_cred;",
          "1812:  if (new_fs || new_fd || do_sysvsem || new_cred || new_nsproxy) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1832:   }",
          "1834:   task_unlock(current);",
          "1835:  }",
          "1837:  if (new_nsproxy)",
          "1838:   put_nsproxy(new_nsproxy);",
          "1840: bad_unshare_cleanup_fd:",
          "1841:  if (new_fd)",
          "1842:   put_files_struct(new_fd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1846:   if (new_cred) {",
          "1848:    commit_creds(new_cred);",
          "1849:    new_cred = NULL;",
          "1850:   }",
          "1856: bad_unshare_cleanup_cred:",
          "1857:  if (new_cred)",
          "1858:   put_cred(new_cred);",
          "",
          "---------------"
        ],
        "kernel/nsproxy.c||kernel/nsproxy.c": [
          "File: kernel/nsproxy.c -> kernel/nsproxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: int unshare_nsproxy_namespaces(unsigned long unshare_flags,",
          "190: {",
          "191:  struct user_namespace *user_ns;",
          "192:  int err = 0;",
          "",
          "[Removed Lines]",
          "189:   struct nsproxy **new_nsp, struct fs_struct *new_fs)",
          "",
          "[Added Lines]",
          "189:  struct nsproxy **new_nsp, struct cred *new_cred, struct fs_struct *new_fs)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:           CLONE_NEWNET | CLONE_NEWPID)))",
          "196:   return 0;",
          "199:   return -EPERM;",
          "204:  if (IS_ERR(*new_nsp)) {",
          "205:   err = PTR_ERR(*new_nsp);",
          "206:   goto out;",
          "",
          "[Removed Lines]",
          "198:  if (!nsown_capable(CAP_SYS_ADMIN))",
          "201:  user_ns = current_user_ns();",
          "203:     new_fs ? new_fs : current->fs);",
          "",
          "[Added Lines]",
          "198:  user_ns = new_cred ? new_cred->user_ns : current_user_ns();",
          "199:  if (!ns_capable(user_ns, CAP_SYS_ADMIN))",
          "203:       new_fs ? new_fs : current->fs);",
          "",
          "---------------"
        ],
        "kernel/user_namespace.c||kernel/user_namespace.c": [
          "File: kernel/user_namespace.c -> kernel/user_namespace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  return 0;",
          "83: }",
          "85: void free_user_ns(struct kref *kref)",
          "86: {",
          "87:  struct user_namespace *parent, *ns =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: int unshare_userns(unsigned long unshare_flags, struct cred **new_cred)",
          "86: {",
          "87:  struct cred *cred;",
          "89:  if (!(unshare_flags & CLONE_NEWUSER))",
          "90:   return 0;",
          "92:  cred = prepare_creds();",
          "93:  if (!cred)",
          "94:   return -ENOMEM;",
          "97:  return create_user_ns(cred);",
          "98: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}