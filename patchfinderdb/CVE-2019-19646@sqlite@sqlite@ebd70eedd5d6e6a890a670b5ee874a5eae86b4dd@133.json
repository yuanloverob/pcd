{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1de92a64cd0413f4f8faae20f8af118eb5cb6f53",
      "candidate_info": {
        "commit_hash": "1de92a64cd0413f4f8faae20f8af118eb5cb6f53",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1de92a64cd0413f4f8faae20f8af118eb5cb6f53",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "Optimization to sqlite3VtabUnlockList() for the common case when there is no work to do.\n\nFossilOrigin-Name: fc8d45086dc2bcb9bce756088e99e63cbeedf9129139fb0e6a48b43c4f502180",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc49380ea76a4a05843d3a0bdfb925464dc9d72c33cf5ab5243dd07d161ad038",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306: void sqlite3VtabUnlockList(sqlite3 *db){",
          "307:   VTable *p = db->pDisconnect;",
          "310:   assert( sqlite3BtreeHoldsAllMutexes(db) );",
          "311:   assert( sqlite3_mutex_held(db->mutex) );",
          "313:   if( p ){",
          "314:     sqlite3ExpirePreparedStatements(db, 0);",
          "315:     do {",
          "316:       VTable *pNext = p->pNext;",
          "",
          "[Removed Lines]",
          "308:   db->pDisconnect = 0;",
          "",
          "[Added Lines]",
          "313:     db->pDisconnect = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e08663946ee6d0f5c8429aa035c9db2186ed4766",
      "candidate_info": {
        "commit_hash": "e08663946ee6d0f5c8429aa035c9db2186ed4766",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e08663946ee6d0f5c8429aa035c9db2186ed4766",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/tkt-a7debbe0.test"
        ],
        "message": "Ensure the columns of views and sub-selects in the FROM clause of a select are always assigned implicit collation sequences, just as table columns are. Possible fix for [a7debbe0].\n\nFossilOrigin-Name: 1863b7bf12521bdd2b51c5b8d3a4634bff3e15d3713e0b5343952df7da02f794",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb3e2be674316e1d39968eb6567f1fe1b72f9d89af49640a9e83f944979c4cf0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "3482:     }",
          "3483:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3485:         if( pSubst->bFlattener && pExpr ){",
          "3486:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3487:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3488:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "3489:                 (pColl ? pColl->zName : \"BINARY\")",
          "3490:             );",
          "3491:           }",
          "3492:           ExprClearProperty(pExpr, EP_Collate);",
          "3493:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4043:       x.iNewTable = iNewParent;",
          "4044:       x.isLeftJoin = isLeftJoin;",
          "4045:       x.pEList = pSub->pEList;",
          "4046:       substSelect(&x, pParent, 0);",
          "4047:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4059:       x.bFlattener = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4368:       x.iNewTable = iCursor;",
          "4369:       x.isLeftJoin = 0;",
          "4370:       x.pEList = pSubq->pEList;",
          "4371:       pNew = substExpr(&x, pNew);",
          "4372:       if( pSubq->selFlags & SF_Aggregate ){",
          "4373:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4385:       x.bFlattener = 0;",
          "",
          "---------------"
        ],
        "test/tkt-a7debbe0.test||test/tkt-a7debbe0.test": [
          "File: test/tkt-a7debbe0.test -> test/tkt-a7debbe0.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket a7debbe0ad1 have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-a7debbe0",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener",
          "23:     optimization_control db query-flattener 0",
          "24:   } else {",
          "25:     # Enable the flattener",
          "26:     optimization_control db query-flattener 1",
          "27:   }",
          "29:   do_execsql_test $tn.1.0 {",
          "30:     CREATE TABLE t0(xyz INTEGER);",
          "31:     INSERT INTO t0(xyz) VALUES(456);",
          "32:     CREATE VIEW v2(a, B) AS",
          "33:         SELECT 'a', 'B' COLLATE NOCASE FROM t0;",
          "34:     CREATE TABLE t2(a, B COLLATE NOCASE);",
          "35:     INSERT INTO t2 VALUES('a', 'B');",
          "36:     CREATE VIEW v3(a, B) AS",
          "37:         SELECT 'a' COLLATE BINARY, 'B' COLLATE NOCASE FROM t0;",
          "39:     CREATE VIEW v4(a, B) AS",
          "40:         SELECT 'a', +CAST('B' COLLATE NOCASE AS TEXT) FROM t0;",
          "42:     CREATE VIEW v5(a, B) AS",
          "43:         SELECT 'a', ('B' COLLATE NOCASE) || '' FROM t0;",
          "44:   }",
          "46:   # Table t2 and views v2 through v5 should all be equivalent.",
          "47:   do_execsql_test $tn.1.1.1 { SELECT a   >= B FROM t2;         } 1",
          "48:   do_execsql_test $tn.1.1.2 { SELECT 'a' >= 'B' COLLATE NOCASE } 0",
          "49:   do_execsql_test $tn.1.1.3 { SELECT a   >= B FROM v2          } 1",
          "50:   do_execsql_test $tn.1.1.4 { SELECT a   >= B FROM v3          } 1",
          "51:   do_execsql_test $tn.1.1.5 { SELECT a   >= B FROM v4          } 1",
          "52:   do_execsql_test $tn.1.1.6 { SELECT a   >= B FROM v5          } 1",
          "54:   do_execsql_test $tn.1.2.1 { SELECT B   < a FROM t2           } 0",
          "55:   do_execsql_test $tn.1.2.2 { SELECT 'B' COLLATE NOCASE < 'a'  } 0",
          "56:   do_execsql_test $tn.1.2.3 { SELECT B   < a FROM v2           } 0",
          "57:   do_execsql_test $tn.1.2.4 { SELECT B   < a FROM v3           } 0",
          "58:   do_execsql_test $tn.1.2.5 { SELECT a  < B FROM v4           } 0",
          "59:   do_execsql_test $tn.1.2.6 { SELECT a  < B FROM v5           } 0",
          "61:   #-------------------------------------------------------------------------",
          "62:   do_execsql_test 2.0 {",
          "63:     CREATE TABLE t5(a, b COLLATE NOCASE);",
          "64:     INSERT INTO t5 VALUES(1, 'XYZ');",
          "65:   }",
          "67:   # Result should be 0, as column \"xyz\" from the sub-query has implicit",
          "68:   # collation sequence BINARY.",
          "69:   do_execsql_test 2.1 {",
          "70:     SELECT xyz==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "71:   } {0}",
          "73:   # Result should be 1, as literal 'xyz' has no collation sequence, so",
          "74:   # the comparison uses the implicit collation sequence of the RHS - NOCASE.",
          "75:   do_execsql_test 2.2 {",
          "76:     SELECT 'xyz'==b FROM ( SELECT a, 'xyz' AS xyz FROM t5 ), t5;",
          "77:   } {1}",
          "79:   #-----------------------------------------------------------------------",
          "80:   # The test case submitted with the ticket.",
          "81:   #",
          "82:   do_execsql_test 3.0 {",
          "83:     DROP TABLE t0;",
          "84:     DROP VIEW v2;",
          "86:     CREATE TABLE t0(c0);",
          "87:     INSERT INTO t0(c0) VALUES('');",
          "88:     CREATE VIEW v2(c0, c1) AS",
          "89:         SELECT 'B' COLLATE NOCASE, 'a' FROM t0 ORDER BY t0.c0;",
          "90:     SELECT SUM(count) FROM (",
          "91:       SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2",
          "92:     );",
          "93:   } 1",
          "95:   # The result is 1, as the collation used is the implicit collation sequence",
          "96:   # of v2.c1 - BINARY.",
          "97:   do_execsql_test 3.1 {",
          "98:     SELECT v2.c1 BETWEEN v2.c0 AND v2.c1 as count FROM v2;",
          "99:   } 1",
          "100: }",
          "102: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "108e6b2c875cd723626a5960cce4d492d6c59813",
      "candidate_info": {
        "commit_hash": "108e6b2c875cd723626a5960cce4d492d6c59813",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/108e6b2c875cd723626a5960cce4d492d6c59813",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/window.c",
          "test/permutations.test",
          "test/window4.test",
          "test/windowfault.test"
        ],
        "message": "Always evaluate window functions using the alternative path usually only used by EXCLUDE frames if the SQLITE_QueryFlattener test flag is set.\n\nFossilOrigin-Name: 2879a691aca9304aea5acb46bab8e82bb2e08eb54201f3679d60bfc0e8383845",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/permutations.test||test/permutations.test",
          "test/window4.test||test/window4.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 723c84be3ec5ae941b7abd2442cdb76ca3bd76a5ce2d830b0e648c6e1424885a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6540:   assert( (pMem->flags & ~(MEM_Null|MEM_Agg))==0 );",
          "6541: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6542:   if( pOp->p3 ){",
          "6543:     rc = sqlite3VdbeMemAggValue(pMem, &aMem[pOp->p3], pOp->p4.pFunc);",
          "6544:     pMem = &aMem[pOp->p3];",
          "6545:   }else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6543:     memAboutToChange(p, &aMem[pOp->p3]);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   struct NthValueCtx *p;",
          "216:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "217:   if( p ){",
          "219:     p->nStep++;",
          "220:     if( iVal==p->nStep ){",
          "221:       p->pValue = sqlite3_value_dup(apArg[0]);",
          "222:     }",
          "223:   }",
          "224:   UNUSED_PARAMETER(nArg);",
          "225:   UNUSED_PARAMETER(apArg);",
          "226: }",
          "227: static void nth_valueValueFunc(sqlite3_context *pCtx){",
          "228:   struct NthValueCtx *p;",
          "",
          "[Removed Lines]",
          "218:     i64 iVal = sqlite3_value_int64(apArg[1]);",
          "",
          "[Added Lines]",
          "218:     i64 iVal;",
          "219:     switch( sqlite3_value_numeric_type(apArg[1]) ){",
          "220:       case SQLITE_INTEGER:",
          "221:         iVal = sqlite3_value_int64(apArg[1]);",
          "222:         break;",
          "223:       case SQLITE_FLOAT: {",
          "224:         double fVal = sqlite3_value_double(apArg[1]);",
          "225:         if( ((i64)fVal)!=fVal ) goto error_out;",
          "226:         iVal = (i64)fVal;",
          "227:         break;",
          "228:       }",
          "229:       default:",
          "230:         goto error_out;",
          "231:     }",
          "232:     if( iVal<=0 ) goto error_out;",
          "237:       if( !p->pValue ){",
          "238:         sqlite3_result_error_nomem(pCtx);",
          "239:       }",
          "244:   return;",
          "246:  error_out:",
          "247:   sqlite3_result_error(",
          "248:       pCtx, \"second argument to nth_value must be a positive integer\", -1",
          "249:   );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "252:   if( p && p->pValue==0 ){",
          "253:     p->pValue = sqlite3_value_dup(apArg[0]);",
          "254:   }",
          "255:   UNUSED_PARAMETER(nArg);",
          "256:   UNUSED_PARAMETER(apArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:     if( !p->pValue ){",
          "279:       sqlite3_result_error_nomem(pCtx);",
          "280:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1072:   pWin->eType = eType;",
          "1073:   pWin->eStart = eStart;",
          "1074:   pWin->eEnd = eEnd;",
          "1075:   pWin->eExclude = eExclude;",
          "1076:   pWin->bImplicitFrame = bImplicitFrame;",
          "1077:   pWin->pEnd = sqlite3WindowOffsetExpr(pParse, pEnd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1102:   if( eExclude==0 && OptimizationDisabled(pParse->db, SQLITE_QueryFlattener) ){",
          "1103:     eExclude = TK_NO;",
          "1104:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1536:   addrNext = sqlite3VdbeCurrentAddr(v);",
          "1537:   sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1538:   sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lblBrk, regRowid);",
          "1539:   if( pMWin->eExclude==TK_CURRENT ){",
          "1540:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1541:   }else if( pMWin->eExclude!=TK_NO ){",
          "1542:     int addr;",
          "1545:     if( pMWin->eExclude==TK_TIES ){",
          "1546:       addrEq = sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1547:     }",
          "",
          "[Removed Lines]",
          "1543:     int addrEq = 0;;",
          "1544:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pMWin->pOrderBy,0,0);",
          "",
          "[Added Lines]",
          "1574:     int addrEq = 0;",
          "1575:     KeyInfo *pKeyInfo;",
          "1577:     pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pMWin->pOrderBy, 0, 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1668:     FuncDef *pFunc = pWin->pFunc;",
          "1669:     sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1670:     nArg = MAX(nArg, windowArgCount(pWin));",
          "1672:       if( pFunc->zName==nth_valueName || pFunc->zName==first_valueName ){",
          "1673:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1674:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "",
          "[Removed Lines]",
          "1671:     if( pWin->eExclude==0 ){",
          "",
          "[Added Lines]",
          "1704:     if( pMWin->regStartRowid==0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1764:   int reg2 = sqlite3GetTempReg(pParse);",
          "1765:   int arith = OP_Add;",
          "1766:   int addrGe;",
          "1769:   int regString = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1767:   int addrNotNull;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2337:   assert( pMWin->eEnd==TK_FOLLOWING || pMWin->eEnd==TK_CURRENT",
          "2338:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "2339:   );",
          "2341:   lblWhereEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2372:   assert( pMWin->eExclude==0 || pMWin->eExclude==TK_CURRENT",
          "2373:        || pMWin->eExclude==TK_GROUP || pMWin->eExclude==TK_TIES",
          "2374:        || pMWin->eExclude==TK_NO",
          "2375:   );",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1032: test_suite \"no_optimization\" -description {",
          "1033:   Run test scripts with optimizations disabled using the",
          "1034:   sqlite3_test_control(SQLITE_TESTCTRL_OPTIMIZATIONS) interface.",
          "1042:   optimization_control $::dbhandle all 0",
          "1043: }",
          "",
          "[Removed Lines]",
          "1035: } -files {",
          "1036:   where.test where2.test where3.test where4.test where5.test",
          "1037:   where6.test where7.test where8.test where9.test",
          "1038:   whereA.test whereB.test wherelimit.test",
          "1039:   select1.test select2.test select3.test select4.test select5.test",
          "1040:   select7.test select8.test selectA.test selectC.test",
          "1041: } -dbconfig {",
          "",
          "[Added Lines]",
          "1035: } -files [",
          "1036:   test_set \\",
          "1037:     [glob -nocomplain $::testdir/window*.test]                       \\",
          "1038:     where.test where2.test where3.test where4.test where5.test       \\",
          "1039:     where6.test where7.test where8.test where9.test                  \\",
          "1040:     whereA.test whereB.test wherelimit.test                          \\",
          "1041:     select1.test select2.test select3.test select4.test select5.test \\",
          "1042:     select7.test select8.test selectA.test selectC.test",
          "1043: ] -dbconfig {",
          "",
          "---------------"
        ],
        "test/window4.test||test/window4.test": [
          "File: test/window4.test -> test/window4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:   SELECT group_concat(b, '.') OVER (",
          "151:     ORDER BY a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING",
          "152:   ) FROM t4",
          "155: do_execsql_test 3.0 {",
          "156:   DROP TABLE IF EXISTS t5;",
          "",
          "[Removed Lines]",
          "153: } {A.B.C.D.E.F.G.H.I.J   B.C.D.E.F.G.H.I.J   C.D.E.F.G.H.I.J   D.E.F.G.H.I.J   E.F.G.H.I.J   F.G.H.I.J   G.H.I.J   H.I.J   I.J   J}",
          "",
          "[Added Lines]",
          "153: } {A.B.C.D.E.F.G.H.I.J   B.C.D.E.F.G.H.I.J   C.D.E.F.G.H.I.J   D.E.F.G.H.I.J",
          "154:   E.F.G.H.I.J   F.G.H.I.J   G.H.I.J   H.I.J   I.J   J}",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: }",
          "29: faultsim_save_and_close",
          "32:   faultsim_restore_and_reopen",
          "33: } -body {",
          "34:   execsql {",
          "",
          "[Removed Lines]",
          "31: do_faultsim_test 1 -start 1 -faults oom-* -prep {",
          "",
          "[Added Lines]",
          "31: do_faultsim_test 1 -start 1 -faults oom-t* -prep {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
      "candidate_info": {
        "commit_hash": "e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e88c0cde6caa0136fb9b6b3b2ea3330faf8547d1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_devsym.c",
          "test/permutations.test"
        ],
        "message": "As it requires wal mode support, do not run test file chunksize.test as part of the \"journaltest\" permutation.\n\nFossilOrigin-Name: acd2df36c2876ff3cc477889fc99f493cdf53a656bdb84bde6121676c9eeed1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_devsym.c||src/test_devsym.c",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_devsym.c||src/test_devsym.c": [
          "File: src/test_devsym.c -> src/test_devsym.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506: void devsym_unregister(){",
          "507:   sqlite3_vfs_unregister(&devsym_vfs);",
          "508:   g.pVfs = 0;",
          "509:   g.iDeviceChar = 0;",
          "510:   g.iSectorSize = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   sqlite3_vfs_unregister(&writecrash_vfs);",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   async4.test bigfile.test backcompat.test e_wal* fstat.test mmap2.test",
          "967:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "968:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "970: }]",
          "972: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "969:   delete_db.test shmlock.test",
          "",
          "[Added Lines]",
          "969:   delete_db.test shmlock.test chunksize.test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e464802d49013ea759c30be7106976cbc2cde1e5",
      "candidate_info": {
        "commit_hash": "e464802d49013ea759c30be7106976cbc2cde1e5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e464802d49013ea759c30be7106976cbc2cde1e5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeblob.c",
          "test/close.test"
        ],
        "message": "Fix a problem that could cause a crash if a blob handle were closed after the associated database handle was closed using sqlite3_close_v2().\n\nFossilOrigin-Name: 52f463d29407fad691c42b13462880e7605603c9be9f480d18e953a0ef78149a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeblob.c||src/vdbeblob.c",
          "test/close.test||test/close.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0fff105a3e501fd91877d67761459eb0323e6cf79916242027cce0d05697f554",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeblob.c||src/vdbeblob.c": [
          "File: src/vdbeblob.c -> src/vdbeblob.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:   sqlite3 *db;",
          "357:   if( p ){",
          "358:     db = p->db;",
          "359:     sqlite3_mutex_enter(db->mutex);",
          "361:     sqlite3DbFree(db, p);",
          "362:     sqlite3_mutex_leave(db->mutex);",
          "363:   }else{",
          "364:     rc = SQLITE_OK;",
          "365:   }",
          "",
          "[Removed Lines]",
          "360:     rc = sqlite3_finalize(p->pStmt);",
          "",
          "[Added Lines]",
          "358:     sqlite3_stmt *pStmt = p->pStmt;",
          "363:     rc = sqlite3_finalize(pStmt);",
          "",
          "---------------"
        ],
        "test/close.test||test/close.test": [
          "File: test/close.test -> test/close.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   sqlite3_finalize $STMT",
          "80: } {SQLITE_OK}",
          "82: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: do_test 1.5 {",
          "83:   set DB [sqlite3_open test.db]",
          "84:   sqlite3_blob_open $DB main t1 x 2 0 BLOB",
          "85:   sqlite3_close_v2 $DB",
          "86:   sqlite3_blob_close $BLOB",
          "87: } {}",
          "",
          "---------------"
        ]
      }
    }
  ]
}