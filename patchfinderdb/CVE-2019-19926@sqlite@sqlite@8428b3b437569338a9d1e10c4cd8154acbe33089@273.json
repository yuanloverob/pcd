{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
      "candidate_info": {
        "commit_hash": "750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming tables when the schema contains WINDOW definitions with (illegal) non-numeric expressions as part of a PRECEDING or FOLLOWING clause.\n\nFossilOrigin-Name: 348e7f193a963390a0595183d603541f85c5d1a911c98ed2e06599691ffe98f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee076c28d8ee0f5b099cdef83ae6cea6ef5aa209ab528d7c49949dd653ce019c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:   }",
          "32:   return WRC_Continue;",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     if( sqlite3WalkExpr(pWalker, pWin->pStart) ) return WRC_Abort;",
          "32:     if( sqlite3WalkExpr(pWalker, pWin->pEnd) ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:   END}",
          "274: }",
          "276: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #-------------------------------------------------------------------------",
          "278: reset_db",
          "279: do_execsql_test 12.1 {",
          "280: CREATE TABLE t1(a,b,c,d,e,f,g,h,j,jj,Zjj,k,aQ,bb,cc,dd,ee DEFAULT 3.14,",
          "281: ff DEFAULT('hiccup'),gg NOD NULL DEFAULT(false));",
          "282: CREATE TRIGGER AFTER INSERT ON t1 WHEN new.a NOT NULL BEGIN",
          "284: SELECT b () OVER , dense_rank() OVER d, d () OVER w1",
          "285: FROM t1",
          "286: WINDOW",
          "287: w1 AS",
          "288: ( w1 ORDER BY d",
          "289: ROWS BETWEEN 2 NOT IN(SELECT a, sum(d) w2,max(d)OVER FROM t1",
          "290: WINDOW",
          "291: w1 AS",
          "292: (PARTITION BY d",
          "293: ROWS BETWEEN '' PRECEDING AND false FOLLOWING),",
          "294: d AS",
          "295: (PARTITION BY b ORDER BY d",
          "296: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "297: ) PRECEDING AND 1 FOLLOWING),",
          "298: w2 AS",
          "299: (PARTITION BY b ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),",
          "300: w3 AS",
          "301: (PARTITION BY b ORDER BY d",
          "302: ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "303: ;",
          "304: SELECT a, sum(d) w2,max(d)OVER FROM t1",
          "305: WINDOW",
          "306: w1 AS",
          "307: (PARTITION BY d",
          "308: ROWS BETWEEN '' PRECEDING AND false FOLLOWING),",
          "309: d AS",
          "310: (PARTITION BY b ORDER BY d",
          "311: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "312: ;",
          "314: END;",
          "315: }",
          "317: do_execsql_test 12.2 {",
          "318:   ALTER TABLE t1 RENAME TO t1x;",
          "319: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d950af311f8db2c34efa5da0256477794b9c3dd",
      "candidate_info": {
        "commit_hash": "0d950af311f8db2c34efa5da0256477794b9c3dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d950af311f8db2c34efa5da0256477794b9c3dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/whereexpr.c",
          "test/whereG.test"
        ],
        "message": "Fix the likely(), unlikely(), and likelihood() functions so that they have no affinity, just like any other function. Ticket [7e07a3dbf5a8cd26]\n\nFossilOrigin-Name: 44578865fa7baf9760e355691ca9ce753295aaba7a4ee0bba29d4f85d9335bab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e62eddbb048cbc2c15cb8eeb5b7a907e7cb08c21a27ebba96a069f62dbcb0f30",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: }",
          "112: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "113:   while( pExpr && ExprHasProperty(pExpr, EP_Skip|EP_Unlikely) ){",
          "114:     if( ExprHasProperty(pExpr, EP_Unlikely) ){",
          "115:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "113:     assert( pExpr->op==TK_COLLATE );",
          "114:     pExpr = pExpr->pLeft;",
          "115:   }",
          "116:   return pExpr;",
          "117: }",
          "124: Expr *sqlite3ExprSkipCollateAndLikely(Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3384: static void exprToRegister(Expr *pExpr, int iReg){",
          "3386:   p->op2 = p->op;",
          "3387:   p->op = TK_REGISTER;",
          "3388:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3385:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "3397:   Expr *p = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4191: int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){",
          "4192:   int r2;",
          "4194:   if( ConstFactorOk(pParse)",
          "4195:    && pExpr->op!=TK_REGISTER",
          "4196:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "",
          "[Removed Lines]",
          "4193:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "4205:   pExpr = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4934: int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){",
          "4935:   return sqlite3ExprCompare(0,",
          "4938:              iTab);",
          "4939: }",
          "",
          "[Removed Lines]",
          "4936:              sqlite3ExprSkipCollate(pA),",
          "4937:              sqlite3ExprSkipCollate(pB),",
          "",
          "[Added Lines]",
          "4948:              sqlite3ExprSkipCollateAndLikely(pA),",
          "4949:              sqlite3ExprSkipCollateAndLikely(pB),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5143: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5144:   Walker w;",
          "5146:   while( p ){",
          "5147:     if( p->op==TK_NOTNULL ){",
          "5148:       p = p->pLeft;",
          "",
          "[Removed Lines]",
          "5145:   p = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "5157:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     }",
          "974:     case TK_IS:",
          "975:     case TK_ISNOT: {",
          "977:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "",
          "[Removed Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "",
          "[Added Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollateAndLikely(pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1184:       int iCol = -1;",
          "1185:       Expr *pE, *pDup;",
          "1186:       if( pItem->done ) continue;",
          "1188:       if( sqlite3ExprIsInteger(pE, &iCol) ){",
          "1189:         if( iCol<=0 || iCol>pEList->nExpr ){",
          "1190:           resolveOutOfRangeError(pParse, \"ORDER\", i+1, pEList->nExpr);",
          "",
          "[Removed Lines]",
          "1187:       pE = sqlite3ExprSkipCollate(pItem->pExpr);",
          "",
          "[Added Lines]",
          "1187:       pE = sqlite3ExprSkipCollateAndLikely(pItem->pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1363:   pParse = pNC->pParse;",
          "1364:   for(i=0, pItem=pOrderBy->a; i<pOrderBy->nExpr; i++, pItem++){",
          "1365:     Expr *pE = pItem->pExpr;",
          "1367:     if( zType[0]!='G' ){",
          "1368:       iCol = resolveAsName(pParse, pSelect->pEList, pE2);",
          "1369:       if( iCol>0 ){",
          "",
          "[Removed Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollate(pE);",
          "",
          "[Added Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1960:     if( (zName = pEList->a[i].zName)!=0 ){",
          "1962:     }else{",
          "1964:       while( pColExpr->op==TK_DOT ){",
          "1965:         pColExpr = pColExpr->pRight;",
          "1966:         assert( pColExpr!=0 );",
          "",
          "[Removed Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollate(pEList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4274: Expr *sqlite3ExprAddCollateToken(Parse *pParse, Expr*, const Token*, int);",
          "4275: Expr *sqlite3ExprAddCollateString(Parse*,Expr*,const char*);",
          "4276: Expr *sqlite3ExprSkipCollate(Expr*);",
          "4277: int sqlite3CheckCollSeq(Parse *, CollSeq *);",
          "4278: int sqlite3WritableSchema(sqlite3*);",
          "4279: int sqlite3CheckObjectName(Parse*, const char*,const char*,const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4277: Expr *sqlite3ExprSkipCollateAndLikely(Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:         ){",
          "254:           if( (pTerm->eOperator & WO_EQUIV)!=0",
          "255:            && pScan->nEquiv<ArraySize(pScan->aiCur)",
          "257:           ){",
          "258:             int j;",
          "259:             for(j=0; j<pScan->nEquiv; j++){",
          "",
          "[Removed Lines]",
          "256:            && (pX = sqlite3ExprSkipCollate(pTerm->pExpr->pRight))->op==TK_COLUMN",
          "",
          "[Added Lines]",
          "256:            && (pX = sqlite3ExprSkipCollateAndLikely(pTerm->pExpr->pRight))->op",
          "257:                ==TK_COLUMN",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:   const char *zColl = pIdx->azColl[iCol];",
          "451:   for(i=0; i<pList->nExpr; i++){",
          "453:     if( p->op==TK_COLUMN",
          "454:      && p->iColumn==pIdx->aiColumn[iCol]",
          "455:      && p->iTable==iBase",
          "",
          "[Removed Lines]",
          "452:     Expr *p = sqlite3ExprSkipCollate(pList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "453:     Expr *p = sqlite3ExprSkipCollateAndLikely(pList->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:   for(i=0; i<pDistinct->nExpr; i++){",
          "517:     if( p->op==TK_COLUMN && p->iTable==iBase && p->iColumn<0 ) return 1;",
          "518:   }",
          "",
          "[Removed Lines]",
          "516:     Expr *p = sqlite3ExprSkipCollate(pDistinct->a[i].pExpr);",
          "",
          "[Added Lines]",
          "517:     Expr *p = sqlite3ExprSkipCollateAndLikely(pDistinct->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2769:   if( pIndex->bUnordered ) return 0;",
          "2770:   if( (pOB = pBuilder->pWInfo->pOrderBy)==0 ) return 0;",
          "2771:   for(ii=0; ii<pOB->nExpr; ii++){",
          "2773:     if( pExpr->op==TK_COLUMN && pExpr->iTable==iCursor ){",
          "2774:       if( pExpr->iColumn<0 ) return 1;",
          "2775:       for(jj=0; jj<pIndex->nKeyCol; jj++){",
          "",
          "[Removed Lines]",
          "2772:     Expr *pExpr = sqlite3ExprSkipCollate(pOB->a[ii].pExpr);",
          "",
          "[Added Lines]",
          "2773:     Expr *pExpr = sqlite3ExprSkipCollateAndLikely(pOB->a[ii].pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3710:     for(i=0; i<nOrderBy; i++){",
          "3711:       if( MASKBIT(i) & obSat ) continue;",
          "3713:       if( pOBExpr->op!=TK_COLUMN ) continue;",
          "3714:       if( pOBExpr->iTable!=iCur ) continue;",
          "3715:       pTerm = sqlite3WhereFindTerm(&pWInfo->sWC, iCur, pOBExpr->iColumn,",
          "",
          "[Removed Lines]",
          "3712:       pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3713:       pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3829:         isMatch = 0;",
          "3830:         for(i=0; bOnce && i<nOrderBy; i++){",
          "3831:           if( MASKBIT(i) & obSat ) continue;",
          "3833:           testcase( wctrlFlags & WHERE_GROUPBY );",
          "3834:           testcase( wctrlFlags & WHERE_DISTINCTBY );",
          "3835:           if( (wctrlFlags & (WHERE_GROUPBY|WHERE_DISTINCTBY))==0 ) bOnce = 0;",
          "",
          "[Removed Lines]",
          "3832:           pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3833:           pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   }else{",
          "85:     pTerm->truthProb = 1;",
          "86:   }",
          "88:   pTerm->wtFlags = wtFlags;",
          "89:   pTerm->pWC = pWC;",
          "90:   pTerm->iParent = -1;",
          "",
          "[Removed Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453: void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){",
          "1455:   pWC->op = op;",
          "1456:   if( pE2==0 ) return;",
          "1457:   if( pE2->op!=op ){",
          "",
          "[Removed Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   SELECT coalesce(a,a), x FROM t1, t2 ORDER BY 1, 2;",
          "267: } {1 3 1 4 9 3 9 4}",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: # 2019-08-22",
          "270: # Ticket https://www.sqlite.org/src/info/7e07a3dbf5a8cd26",
          "271: #",
          "272: do_execsql_test 8.1 {",
          "273:   DROP TABLE IF EXISTS t0;",
          "274:   CREATE TABLE t0 (c0);",
          "275:   INSERT INTO t0(c0) VALUES ('a');",
          "276:   SELECT LIKELY(t0.rowid) <= '0' FROM t0;",
          "277: } {1}",
          "278: do_execsql_test 8.2 {",
          "279:   SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0';",
          "280: } {a}",
          "281: do_execsql_test 8.3 {",
          "282:   SELECT (t0.rowid) <= '0' FROM t0;",
          "283: } {0}",
          "284: do_execsql_test 8.4 {",
          "285:   SELECT * FROM t0 WHERE (t0.rowid) <= '0';",
          "286: } {}",
          "287: do_execsql_test 8.5 {",
          "288:   SELECT unlikely(t0.rowid) <= '0', likelihood(t0.rowid,0.5) <= '0' FROM t0;",
          "289: } {1 1}",
          "290: do_execsql_test 8.6 {",
          "291:   SELECT * FROM t0 WHERE unlikely(t0.rowid) <= '0';",
          "292: } {a}",
          "293: do_execsql_test 8.7 {",
          "294:   SELECT * FROM t0 WHERE likelihood(t0.rowid, 0.5) <= '0';",
          "295: } {a}",
          "296: do_execsql_test 8.8 {",
          "297:   SELECT unlikely(t0.rowid <= '0'),",
          "298:          likely(t0.rowid <= '0'),",
          "299:          likelihood(t0.rowid <= '0',0.5)",
          "300:     FROM t0;",
          "301: } {0 0 0}",
          "302: do_execsql_test 8.9 {",
          "303:   SELECT * FROM t0 WHERE unlikely(t0.rowid <= '0');",
          "304: } {}",
          "305: do_execsql_test 8.10 {",
          "306:   SELECT * FROM t0 WHERE likelihood(t0.rowid <= '0', 0.5);",
          "307: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bdd26dfab8408645b1e32e657355e332b098350",
      "candidate_info": {
        "commit_hash": "4bdd26dfab8408645b1e32e657355e332b098350",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4bdd26dfab8408645b1e32e657355e332b098350",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Remove a testcase() macro which is now unreachable due to the contraction of the use of IN_INDEX_ROWID.\n\nFossilOrigin-Name: 90c5a17cd526b256753f876e575f3e731d5e8b9dd6e196cf8d8f7306e099b91c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2d50df8fd1a1fdae6226a3e77296ded09b53a74540caedd4868e686a93cbc10",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c"
        ]
      }
    },
    {
      "candidate_hash": "50efa586006c6ddb7290c37e35b9102747f18d78",
      "candidate_info": {
        "commit_hash": "50efa586006c6ddb7290c37e35b9102747f18d78",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/50efa586006c6ddb7290c37e35b9102747f18d78",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/select1.test"
        ],
        "message": "Remove an assert() in the code generator that can fail due to an invalid INSERT statement.  The same assert() appears again in the VDBE and will fire there if the problem persists in an SQL statement that does not contain errors.  Gramfuzz find.\n\nFossilOrigin-Name: 9bdd57cb9ad8ac1f4a0f1a3942d94ca5193109eeb1975343c4f0c7abf7135946",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/select1.test||test/select1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3509: void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){",
          "3511:   sqlite3VdbeAddOp3(pParse->pVdbe, OP_Move, iFrom, iTo, nReg);",
          "3512: }",
          "",
          "[Removed Lines]",
          "3510:   assert( iFrom>=iTo+nReg || iFrom+nReg<=iTo );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1165:   );",
          "1166: } {1}",
          "1168: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1168: # 2019-12-17 gramfuzz find",
          "1169: #",
          "1170: do_execsql_test select-19.10 {",
          "1171:   DROP TABLE IF EXISTS t1;",
          "1172:   CREATE TABLE t1(x);",
          "1173: } {}",
          "1174: do_catchsql_test select-19.20 {",
          "1175:   INSERT INTO t1",
          "1176:     SELECT 1,2,3,4,5,6,7",
          "1177:     UNION ALL SELECT 1,2,3,4,5,6,7",
          "1178:     ORDER BY 1;",
          "1179: } {1 {table t1 has 1 columns but 7 values were supplied}}",
          "1180: do_catchsql_test select-19.21 {",
          "1181:   INSERT INTO t1",
          "1182:     SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",
          "1183:     UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",
          "1184:     ORDER BY 1;",
          "1185: } {1 {table t1 has 1 columns but 15 values were supplied}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03836614148488e8ea5539743b796d557451d630",
      "candidate_info": {
        "commit_hash": "03836614148488e8ea5539743b796d557451d630",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/03836614148488e8ea5539743b796d557451d630",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/e_expr.test",
          "test/trigger2.test"
        ],
        "message": "Fix a problem in VIEW creation that was introduced by the generated columns feature.\n\nFossilOrigin-Name: 9c795c4d2b042d2932774bd1274fa0167ca2dc9838e127e0cf31eb9273a32f2c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/e_expr.test||test/e_expr.test",
          "test/trigger2.test||test/trigger2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 167cd574d6a1d4fe2253f5bc5aaa7b031cbc82853e4d33b8d9b72eaf049003d4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2627:       assert( pTable->aCol==0 );",
          "2629:       pTable->aCol = pSelTab->aCol;",
          "2630:       pSelTab->nCol = 0;",
          "2631:       pSelTab->aCol = 0;",
          "",
          "[Removed Lines]",
          "2628:       pTable->nCol = pTable->nNVCol = pSelTab->nCol;",
          "",
          "[Added Lines]",
          "2628:       pTable->nCol = pSelTab->nCol;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2634:       pTable->nCol = 0;",
          "2635:       nErr++;",
          "2636:     }",
          "2637:     sqlite3DeleteTable(db, pSelTab);",
          "2638:     sqlite3SelectDelete(db, pSel);",
          "2639:     EnableLookaside;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2637:     pTable->nNVCol = pTable->nCol;",
          "",
          "---------------"
        ],
        "test/e_expr.test||test/e_expr.test": [
          "File: test/e_expr.test -> test/e_expr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1909: # EVIDENCE-OF: R-18318-14995 The value of a subquery expression is the",
          "1910: # first row of the result from the enclosed SELECT statement.",
          "1911: #",
          "1915: do_execsql_test e_expr-36.3.1 {",
          "1916:   CREATE TABLE t4(x, y);",
          "1917:   INSERT INTO t4 VALUES(1, 'one');",
          "",
          "[Removed Lines]",
          "1912: # EVIDENCE-OF: R-15900-52156 In other words, an implied \"LIMIT 1\" is",
          "1913: # added to the subquery, overriding an explicitly coded LIMIT.",
          "1914: #",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/trigger2.test||test/trigger2.test": [
          "File: test/trigger2.test -> test/trigger2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:   }",
          "753: } {}",
          "755: } ;# ifcapable view",
          "759: finish_test",
          "",
          "[Removed Lines]",
          "757: integrity_check trigger2-9.9",
          "",
          "[Added Lines]",
          "755: integrity_check trigger2-9.99",
          "757: # 2019-11-02 Problem found by TH3, related to generated column support.",
          "758: db close",
          "759: sqlite3 db :memory:",
          "760: do_execsql_test trigger2-10.1 {",
          "761:   CREATE TABLE t1(a,b,c,d);",
          "762:   CREATE VIEW v2(a,b,c,d) AS SELECT * FROM t1;",
          "763:   CREATE TRIGGER v2ins INSTEAD OF INSERT ON v2 BEGIN",
          "764:     INSERT INTO t1(a,b,c,d) VALUES(new.a, new.b, new.c, new.d);",
          "765:   END;",
          "766:   INSERT INTO v2(a,d) VALUES(11,14);",
          "767:   SELECT * FROM t1;",
          "768: } {11 {} {} 14}",
          "772: integrity_check trigger2-999",
          "",
          "---------------"
        ]
      }
    }
  ]
}