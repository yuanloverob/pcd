{
  "cve_id": "CVE-2019-11810",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.7. A NULL pointer dereference can occur when megasas_create_frame_pool() fails in megasas_alloc_cmds() in drivers/scsi/megaraid/megaraid_sas_base.c. This causes a Denial of Service, related to a use-after-free.",
  "repo": "torvalds/linux",
  "patch_hash": "bcf3b67d16a4c8ffae0aa79de5853435e683945c",
  "patch_info": {
    "commit_hash": "bcf3b67d16a4c8ffae0aa79de5853435e683945c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bcf3b67d16a4c8ffae0aa79de5853435e683945c",
    "files": [
      "drivers/scsi/megaraid/megaraid_sas_base.c"
    ],
    "message": "scsi: megaraid_sas: return error when create DMA pool failed\n\nwhen create DMA pool for cmd frames failed, we should return -ENOMEM,\ninstead of 0.\nIn some case in:\n\n    megasas_init_adapter_fusion()\n\n    -->megasas_alloc_cmds()\n       -->megasas_create_frame_pool\n          create DMA pool failed,\n        --> megasas_free_cmds() [1]\n\n    -->megasas_alloc_cmds_fusion()\n       failed, then goto fail_alloc_cmds.\n    -->megasas_free_cmds() [2]\n\nwe will call megasas_free_cmds twice, [1] will kfree cmd_list,\n[2] will use cmd_list.it will cause a problem:\n\nUnable to handle kernel NULL pointer dereference at virtual address\n00000000\npgd = ffffffc000f70000\n[00000000] *pgd=0000001fbf893003, *pud=0000001fbf893003,\n*pmd=0000001fbf894003, *pte=006000006d000707\nInternal error: Oops: 96000005 [#1] SMP\n Modules linked in:\n CPU: 18 PID: 1 Comm: swapper/0 Not tainted\n task: ffffffdfb9290000 ti: ffffffdfb923c000 task.ti: ffffffdfb923c000\n PC is at megasas_free_cmds+0x30/0x70\n LR is at megasas_free_cmds+0x24/0x70\n ...\n Call trace:\n [<ffffffc0005b779c>] megasas_free_cmds+0x30/0x70\n [<ffffffc0005bca74>] megasas_init_adapter_fusion+0x2f4/0x4d8\n [<ffffffc0005b926c>] megasas_init_fw+0x2dc/0x760\n [<ffffffc0005b9ab0>] megasas_probe_one+0x3c0/0xcd8\n [<ffffffc0004a5abc>] local_pci_probe+0x4c/0xb4\n [<ffffffc0004a5c40>] pci_device_probe+0x11c/0x14c\n [<ffffffc00053a5e4>] driver_probe_device+0x1ec/0x430\n [<ffffffc00053a92c>] __driver_attach+0xa8/0xb0\n [<ffffffc000538178>] bus_for_each_dev+0x74/0xc8\n  [<ffffffc000539e88>] driver_attach+0x28/0x34\n [<ffffffc000539a18>] bus_add_driver+0x16c/0x248\n [<ffffffc00053b234>] driver_register+0x6c/0x138\n [<ffffffc0004a5350>] __pci_register_driver+0x5c/0x6c\n [<ffffffc000ce3868>] megasas_init+0xc0/0x1a8\n [<ffffffc000082a58>] do_one_initcall+0xe8/0x1ec\n [<ffffffc000ca7be8>] kernel_init_freeable+0x1c8/0x284\n [<ffffffc0008d90b8>] kernel_init+0x1c/0xe4\n\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nAcked-by: Sumit Saxena <sumit.saxena@broadcom.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/megaraid/megaraid_sas_base.c||drivers/scsi/megaraid/megaraid_sas_base.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/megaraid/megaraid_sas_base.c||drivers/scsi/megaraid/megaraid_sas_base.c": [
      "File: drivers/scsi/megaraid/megaraid_sas_base.c -> drivers/scsi/megaraid/megaraid_sas_base.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4188:  if (megasas_create_frame_pool(instance)) {",
      "4189:   dev_printk(KERN_DEBUG, &instance->pdev->dev, \"Error creating frame DMA pool\\n\");",
      "4190:   megasas_free_cmds(instance);",
      "4191:  }",
      "4193:  return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4191:   return -ENOMEM;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "311ade0eab192f0abee2f70bce761bf0d66990c4",
      "candidate_info": {
        "commit_hash": "311ade0eab192f0abee2f70bce761bf0d66990c4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/311ade0eab192f0abee2f70bce761bf0d66990c4",
        "files": [
          "mm/debug.c"
        ],
        "message": "mm/debug.c: fix __dump_page() for poisoned pages\n\nEvaluating page_mapping() on a poisoned page ends up dereferencing junk\nand making PF_POISONED_CHECK() considerably crashier than intended:\n\n    Unable to handle kernel NULL pointer dereference at virtual address 0000000000000006\n    Mem abort info:\n      ESR = 0x96000005\n      Exception class = DABT (current EL), IL = 32 bits\n      SET = 0, FnV = 0\n      EA = 0, S1PTW = 0\n    Data abort info:\n      ISV = 0, ISS = 0x00000005\n      CM = 0, WnR = 0\n    user pgtable: 4k pages, 39-bit VAs, pgdp = 00000000c2f6ac38\n    [0000000000000006] pgd=0000000000000000, pud=0000000000000000\n    Internal error: Oops: 96000005 [#1] PREEMPT SMP\n    Modules linked in:\n    CPU: 2 PID: 491 Comm: bash Not tainted 5.0.0-rc1+ #1\n    Hardware name: ARM LTD ARM Juno Development Platform/ARM Juno Development Platform, BIOS EDK II Dec 17 2018\n    pstate: 00000005 (nzcv daif -PAN -UAO)\n    pc : page_mapping+0x18/0x118\n    lr : __dump_page+0x1c/0x398\n    Process bash (pid: 491, stack limit = 0x000000004ebd4ecd)\n    Call trace:\n     page_mapping+0x18/0x118\n     __dump_page+0x1c/0x398\n     dump_page+0xc/0x18\n     remove_store+0xbc/0x120\n     dev_attr_store+0x18/0x28\n     sysfs_kf_write+0x40/0x50\n     kernfs_fop_write+0x130/0x1d8\n     __vfs_write+0x30/0x180\n     vfs_write+0xb4/0x1a0\n     ksys_write+0x60/0xd0\n     __arm64_sys_write+0x18/0x20\n     el0_svc_common+0x94/0xf8\n     el0_svc_handler+0x68/0x70\n     el0_svc+0x8/0xc\n    Code: f9400401 d1000422 f240003f 9a801040 (f9400402)\n    ---[ end trace cdb5eb5bf435cecb ]---\n\nFix that by not inspecting the mapping until we've determined that it's\nlikely to be valid.  Now the above condition still ends up stopping the\nkernel, but in the correct manner:\n\n    page:ffffffbf20000000 is uninitialized and poisoned\n    raw: ffffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffff\n    raw: ffffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffff\n    page dumped because: VM_BUG_ON_PAGE(PagePoisoned(p))\n    ------------[ cut here ]------------\n    kernel BUG at ./include/linux/mm.h:1006!\n    Internal error: Oops - BUG: 0 [#1] PREEMPT SMP\n    Modules linked in:\n    CPU: 1 PID: 483 Comm: bash Not tainted 5.0.0-rc1+ #3\n    Hardware name: ARM LTD ARM Juno Development Platform/ARM Juno Development Platform, BIOS EDK II Dec 17 2018\n    pstate: 40000005 (nZcv daif -PAN -UAO)\n    pc : remove_store+0xbc/0x120\n    lr : remove_store+0xbc/0x120\n    ...\n\nLink: http://lkml.kernel.org/r/03b53ee9d7e76cda4b9b5e1e31eea080db033396.1550071778.git.robin.murphy@arm.com\nFixes: 1c6fb1d89e73 (\"mm: print more information about mapping in __dump_page\")\nSigned-off-by: Robin Murphy <robin.murphy@arm.com>\nAcked-by: Michal Hocko <mhocko@suse.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/debug.c||mm/debug.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/debug.c||mm/debug.c": [
          "File: mm/debug.c -> mm/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: void __dump_page(struct page *page, const char *reason)",
          "46: {",
          "48:  bool page_poisoned = PagePoisoned(page);",
          "49:  int mapcount;",
          "",
          "[Removed Lines]",
          "47:  struct address_space *mapping = page_mapping(page);",
          "",
          "[Added Lines]",
          "47:  struct address_space *mapping;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   goto hex_only;",
          "59:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:  mapping = page_mapping(page);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1d1746f6d4b37518fe3dc4aba99db1f7a155bdb",
      "candidate_info": {
        "commit_hash": "c1d1746f6d4b37518fe3dc4aba99db1f7a155bdb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c1d1746f6d4b37518fe3dc4aba99db1f7a155bdb",
        "files": [
          "drivers/gpu/drm/i915/i915_gem_fence_reg.c"
        ],
        "message": "drm/i915: Avoid reset lock in writing fence registers\n\nThe idea of taking the reset lock around writing the fence register was\nto serialise the mmio write we also perform during the reset where those\nregisters get clobbered. However, the lock is overkill as write tearing\nbetween reset and fence_update() is harmless; the final value of the\nfence register is the same. A race between revoke_fences() and\nfence_update() is also harmless at this point as on the fault path where\nthis is necessary, we acquire the reset lock to coordinate ourselves in\nthe upper layer.\n\nThe danger of acquiring the reset lock again in fence_update() is that\nwe may recurse from the shrinker along the i915_gem_fault() path.\n\n<4> [125.739646] ============================================\n<4> [125.739652] WARNING: possible recursive locking detected\n<4> [125.739659] 5.0.0-rc6-ga6e4cbf00557-drmtip_223+ #1 Tainted: G     U\n<4> [125.739666] --------------------------------------------\n<4> [125.739672] gem_mmap_gtt/1017 is trying to acquire lock:\n<4> [125.739679] 00000000a730190a (&dev_priv->gpu_error.reset_backoff_srcu){+.+.}, at: i915_reset_trylock+0x0/0x310 [i915]\n<4> [125.739848]\nbut task is already holding lock:\n<4> [125.739854] 00000000a730190a (&dev_priv->gpu_error.reset_backoff_srcu){+.+.}, at: i915_reset_trylock+0x192/0x310 [i915]\n<4> [125.739918]\nother info that might help us debug this:\n<4> [125.739925]  Possible unsafe locking scenario:\n\n<4> [125.739930]        CPU0\n<4> [125.739934]        ----\n<4> [125.739937]   lock(&dev_priv->gpu_error.reset_backoff_srcu);\n<4> [125.739944]   lock(&dev_priv->gpu_error.reset_backoff_srcu);\n<4> [125.739950]\n *** DEADLOCK ***\n\n<4> [125.739958]  May be due to missing lock nesting notation\n\n<4> [125.739966] 5 locks held by gem_mmap_gtt/1017:\n<4> [125.739972]  #0: 00000000471f682c (&mm->mmap_sem){++++}, at: __do_page_fault+0x133/0x500\n<4> [125.739987]  #1: 0000000026542685 (&dev->struct_mutex){+.+.}, at: i915_gem_fault+0x1f6/0x860 [i915]\n<4> [125.740061]  #2: 00000000a730190a (&dev_priv->gpu_error.reset_backoff_srcu){+.+.}, at: i915_reset_trylock+0x192/0x310 [i915]\n<4> [125.740126]  #3: 00000000c828eb4f (fs_reclaim){+.+.}, at: fs_reclaim_acquire.part.25+0x0/0x30\n<4> [125.740140]  #4: 000000002d360d65 (shrinker_rwsem){++++}, at: shrink_slab+0x1cb/0x2c0\n<4> [125.740151]\nstack backtrace:\n<4> [125.740159] CPU: 1 PID: 1017 Comm: gem_mmap_gtt Tainted: G     U            5.0.0-rc6-ga6e4cbf00557-drmtip_223+ #1\n<4> [125.740170] Hardware name: Dell Inc.                 OptiPlex 745                 /0GW726, BIOS 2.3.1  05/21/2007\n<4> [125.740180] Call Trace:\n<4> [125.740189]  dump_stack+0x67/0x9b\n<4> [125.740199]  __lock_acquire+0xc75/0x1b00\n<4> [125.740209]  ? arch_tlb_finish_mmu+0x2a/0xa0\n<4> [125.740216]  ? tlb_finish_mmu+0x1a/0x30\n<4> [125.740222]  ? zap_page_range_single+0xe2/0x130\n<4> [125.740230]  ? lock_acquire+0xa6/0x1c0\n<4> [125.740237]  lock_acquire+0xa6/0x1c0\n<4> [125.740296]  ? i915_clear_error_registers+0x280/0x280 [i915]\n<4> [125.740357]  i915_reset_trylock+0x44/0x310 [i915]\n<4> [125.740417]  ? i915_clear_error_registers+0x280/0x280 [i915]\n<4> [125.740426]  ? lockdep_hardirqs_on+0xe0/0x1b0\n<4> [125.740434]  ? _raw_spin_unlock_irqrestore+0x39/0x60\n<4> [125.740499]  fence_update+0x218/0x470 [i915]\n<4> [125.740571]  i915_vma_unbind+0xa6/0x550 [i915]\n<4> [125.740640]  i915_gem_object_unbind+0xfa/0x190 [i915]\n<4> [125.740711]  i915_gem_shrink+0x2dc/0x590 [i915]\n<4> [125.740722]  ? ___preempt_schedule+0x16/0x18\n<4> [125.740792]  ? i915_gem_shrinker_scan+0xc9/0x130 [i915]\n<4> [125.740861]  i915_gem_shrinker_scan+0xc9/0x130 [i915]\n<4> [125.740870]  do_shrink_slab+0x143/0x3f0\n<4> [125.740878]  shrink_slab+0x228/0x2c0\n<4> [125.740886]  shrink_node+0x167/0x450\n<4> [125.740894]  do_try_to_free_pages+0xc4/0x340\n<4> [125.740902]  try_to_free_pages+0xdc/0x2e0\n<4> [125.740911]  __alloc_pages_nodemask+0x662/0x1110\n<4> [125.740921]  ? reacquire_held_locks+0xb5/0x1b0\n<4> [125.740928]  ? reacquire_held_locks+0xb5/0x1b0\n<4> [125.740986]  ? i915_reset_trylock+0x192/0x310 [i915]\n<4> [125.741045]  ? i915_memcpy_init_early+0x30/0x30 [i915]\n<4> [125.741054]  pte_alloc_one+0x12/0x70\n<4> [125.741060]  __pte_alloc+0x11/0xf0\n<4> [125.741067]  apply_to_page_range+0x37e/0x440\n<4> [125.741127]  remap_io_mapping+0x6c/0x100 [i915]\n<4> [125.741196]  i915_gem_fault+0x5a9/0x860 [i915]\n<4> [125.741204]  ? ptlock_alloc+0x15/0x30\n<4> [125.741212]  __do_fault+0x2c/0xb0\n<4> [125.741218]  __handle_mm_fault+0x8ee/0xfa0\n<4> [125.741227]  handle_mm_fault+0x196/0x3a0\n<4> [125.741235]  __do_page_fault+0x246/0x500\n<4> [125.741243]  ? page_fault+0x8/0x30\n<4> [125.741250]  page_fault+0x1e/0x30\n<4> [125.741256] RIP: 0033:0x55d0cc456e12\n<4> [125.741264] Code: b0 df ff ff 89 c2 8b 85 70 df ff ff 01 c2 8b 85 70 df ff ff 48 98 48 8d 0c 85 00 00 00 00 48 8b 85 e0 df ff ff 48 01 c8 f7 d2 <89> 10 83 85 70 df ff ff 01 81 bd 70 df ff ff ff 03 00 00 7e be 48\n<4> [125.741280] RSP: 002b:00007ffc1bab7ab0 EFLAGS: 00010206\n<4> [125.741287] RAX: 00007fc787cb6000 RBX: 0000000000000000 RCX: 0000000000000000\n<4> [125.741295] RDX: 00000000ffffffff RSI: 0000000000005401 RDI: 0000000000000002\n<4> [125.741303] RBP: 00007ffc1bab9b70 R08: 00007ffc1bab7920 R09: 000000000000001b\n<4> [125.741310] R10: 7165722074736554 R11: 0000000000000246 R12: 000055d0cc454a80\n<4> [125.741318] R13: 00007ffc1bab9f60 R14: 0000000000000000 R15: 0000000000000000\n\nBugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=109665\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: Mika Kuoppala <mika.kuoppala@linux.intel.com>\nReviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190219122215.8941-4-chris@chris-wilson.co.uk",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_gem_fence_reg.c||drivers/gpu/drm/i915/i915_gem_fence_reg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_gem_fence_reg.c||drivers/gpu/drm/i915/i915_gem_fence_reg.c": [
          "File: drivers/gpu/drm/i915/i915_gem_fence_reg.c -> drivers/gpu/drm/i915/i915_gem_fence_reg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:   return 0;",
          "271:  }",
          "277:  fence_write(fence, vma);",
          "280:  if (vma) {",
          "281:   vma->fence = fence;",
          "282:   list_move_tail(&fence->link, &fence->i915->mm.fence_list);",
          "283:  }",
          "289:  intel_runtime_pm_put(fence->i915, wakeref);",
          "291: }",
          "",
          "[Removed Lines]",
          "273:  ret = i915_reset_trylock(fence->i915);",
          "274:  if (ret < 0)",
          "275:   goto out_rpm;",
          "278:  fence->vma = vma;",
          "285:  i915_reset_unlock(fence->i915, ret);",
          "286:  ret = 0;",
          "288: out_rpm:",
          "290:  return ret;",
          "",
          "[Added Lines]",
          "273:  WRITE_ONCE(fence->vma, vma);",
          "282:  return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efcc9bcaf77c07df01371a7c34e50424c291f3ac",
      "candidate_info": {
        "commit_hash": "efcc9bcaf77c07df01371a7c34e50424c291f3ac",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/efcc9bcaf77c07df01371a7c34e50424c291f3ac",
        "files": [
          "net/ipv6/ip6_gre.c"
        ],
        "message": "net: ip6_gre: fix possible NULL pointer dereference in ip6erspan_set_version\n\nFix a possible NULL pointer dereference in ip6erspan_set_version checking\nnlattr data pointer\n\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] PREEMPT SMP KASAN\nCPU: 1 PID: 7549 Comm: syz-executor432 Not tainted 5.0.0-rc6-next-20190218\n#37\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS\nGoogle 01/01/2011\nRIP: 0010:ip6erspan_set_version+0x5c/0x350 net/ipv6/ip6_gre.c:1726\nCode: 07 38 d0 7f 08 84 c0 0f 85 9f 02 00 00 49 8d bc 24 b0 00 00 00 c6 43\n54 01 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f\n85 9a 02 00 00 4d 8b ac 24 b0 00 00 00 4d 85 ed 0f\nRSP: 0018:ffff888089ed7168 EFLAGS: 00010202\nRAX: dffffc0000000000 RBX: ffff8880869d6e58 RCX: 0000000000000000\nRDX: 0000000000000016 RSI: ffffffff862736b4 RDI: 00000000000000b0\nRBP: ffff888089ed7180 R08: 1ffff11010d3adcb R09: ffff8880869d6e58\nR10: ffffed1010d3add5 R11: ffff8880869d6eaf R12: 0000000000000000\nR13: ffffffff8931f8c0 R14: ffffffff862825d0 R15: ffff8880869d6e58\nFS:  0000000000b3d880(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020000184 CR3: 0000000092cc5000 CR4: 00000000001406e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n  ip6erspan_newlink+0x66/0x7b0 net/ipv6/ip6_gre.c:2210\n  __rtnl_newlink+0x107b/0x16c0 net/core/rtnetlink.c:3176\n  rtnl_newlink+0x69/0xa0 net/core/rtnetlink.c:3234\n  rtnetlink_rcv_msg+0x465/0xb00 net/core/rtnetlink.c:5192\n  netlink_rcv_skb+0x17a/0x460 net/netlink/af_netlink.c:2485\n  rtnetlink_rcv+0x1d/0x30 net/core/rtnetlink.c:5210\n  netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]\n  netlink_unicast+0x536/0x720 net/netlink/af_netlink.c:1336\n  netlink_sendmsg+0x8ae/0xd70 net/netlink/af_netlink.c:1925\n  sock_sendmsg_nosec net/socket.c:621 [inline]\n  sock_sendmsg+0xdd/0x130 net/socket.c:631\n  ___sys_sendmsg+0x806/0x930 net/socket.c:2136\n  __sys_sendmsg+0x105/0x1d0 net/socket.c:2174\n  __do_sys_sendmsg net/socket.c:2183 [inline]\n  __se_sys_sendmsg net/socket.c:2181 [inline]\n  __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2181\n  do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290\n  entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x440159\nCode: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7\n48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff\nff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00\nRSP: 002b:00007fffa69156e8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e\nRAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440159\nRDX: 0000000000000000 RSI: 0000000020001340 RDI: 0000000000000003\nRBP: 00000000006ca018 R08: 0000000000000001 R09: 00000000004002c8\nR10: 0000000000000011 R11: 0000000000000246 R12: 00000000004019e0\nR13: 0000000000401a70 R14: 0000000000000000 R15: 0000000000000000\nModules linked in:\n---[ end trace 09f8a7d13b4faaa1 ]---\nRIP: 0010:ip6erspan_set_version+0x5c/0x350 net/ipv6/ip6_gre.c:1726\nCode: 07 38 d0 7f 08 84 c0 0f 85 9f 02 00 00 49 8d bc 24 b0 00 00 00 c6 43\n54 01 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f\n85 9a 02 00 00 4d 8b ac 24 b0 00 00 00 4d 85 ed 0f\nRSP: 0018:ffff888089ed7168 EFLAGS: 00010202\nRAX: dffffc0000000000 RBX: ffff8880869d6e58 RCX: 0000000000000000\nRDX: 0000000000000016 RSI: ffffffff862736b4 RDI: 00000000000000b0\nRBP: ffff888089ed7180 R08: 1ffff11010d3adcb R09: ffff8880869d6e58\nR10: ffffed1010d3add5 R11: ffff8880869d6eaf R12: 0000000000000000\nR13: ffffffff8931f8c0 R14: ffffffff862825d0 R15: ffff8880869d6e58\nFS:  0000000000b3d880(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020000184 CR3: 0000000092cc5000 CR4: 00000000001406e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n\nFixes: 4974d5f678ab (\"net: ip6_gre: initialize erspan_ver just for erspan tunnels\")\nReported-and-tested-by: syzbot+30191cf1057abd3064af@syzkaller.appspotmail.com\nSigned-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>\nReviewed-by: Greg Rose <gvrose8192@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/ip6_gre.c||net/ipv6/ip6_gre.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/ipv6/ip6_gre.c||net/ipv6/ip6_gre.c": [
          "File: net/ipv6/ip6_gre.c -> net/ipv6/ip6_gre.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1722: static void ip6erspan_set_version(struct nlattr *data[],",
          "1723:       struct __ip6_tnl_parm *parms)",
          "1724: {",
          "1725:  parms->erspan_ver = 1;",
          "1726:  if (data[IFLA_GRE_ERSPAN_VER])",
          "1727:   parms->erspan_ver = nla_get_u8(data[IFLA_GRE_ERSPAN_VER]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1725:  if (!data)",
          "1726:   return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "891cb2a72d821f930a39d5900cb7a3aa752c1d5b",
      "candidate_info": {
        "commit_hash": "891cb2a72d821f930a39d5900cb7a3aa752c1d5b",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/891cb2a72d821f930a39d5900cb7a3aa752c1d5b",
        "files": [
          "mm/memory_hotplug.c"
        ],
        "message": "mm, memory_hotplug: fix off-by-one in is_pageblock_removable\n\nRong Chen has reported the following boot crash:\n\n    PGD 0 P4D 0\n    Oops: 0000 [#1] PREEMPT SMP PTI\n    CPU: 1 PID: 239 Comm: udevd Not tainted 5.0.0-rc4-00149-gefad4e4 #1\n    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014\n    RIP: 0010:page_mapping+0x12/0x80\n    Code: 5d c3 48 89 df e8 0e ad 02 00 85 c0 75 da 89 e8 5b 5d c3 0f 1f 44 00 00 53 48 89 fb 48 8b 43 08 48 8d 50 ff a8 01 48 0f 45 da <48> 8b 53 08 48 8d 42 ff 83 e2 01 48 0f 44 c3 48 83 38 ff 74 2f 48\n    RSP: 0018:ffff88801fa87cd8 EFLAGS: 00010202\n    RAX: ffffffffffffffff RBX: fffffffffffffffe RCX: 000000000000000a\n    RDX: fffffffffffffffe RSI: ffffffff820b9a20 RDI: ffff88801e5c0000\n    RBP: 6db6db6db6db6db7 R08: ffff88801e8bb000 R09: 0000000001b64d13\n    R10: ffff88801fa87cf8 R11: 0000000000000001 R12: ffff88801e640000\n    R13: ffffffff820b9a20 R14: ffff88801f145258 R15: 0000000000000001\n    FS:  00007fb2079817c0(0000) GS:ffff88801dd00000(0000) knlGS:0000000000000000\n    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n    CR2: 0000000000000006 CR3: 000000001fa82000 CR4: 00000000000006a0\n    Call Trace:\n     __dump_page+0x14/0x2c0\n     is_mem_section_removable+0x24c/0x2c0\n     removable_show+0x87/0xa0\n     dev_attr_show+0x25/0x60\n     sysfs_kf_seq_show+0xba/0x110\n     seq_read+0x196/0x3f0\n     __vfs_read+0x34/0x180\n     vfs_read+0xa0/0x150\n     ksys_read+0x44/0xb0\n     do_syscall_64+0x5e/0x4a0\n     entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nand bisected it down to commit efad4e475c31 (\"mm, memory_hotplug:\nis_mem_section_removable do not pass the end of a zone\").\n\nThe reason for the crash is that the mapping is garbage for poisoned\n(uninitialized) page.  This shouldn't happen as all pages in the zone's\nboundary should be initialized.\n\nLater debugging revealed that the actual problem is an off-by-one when\nevaluating the end_page.  'start_pfn + nr_pages' resp 'zone_end_pfn'\nrefers to a pfn after the range and as such it might belong to a\ndifferen memory section.\n\nThis along with CONFIG_SPARSEMEM then makes the loop condition\ncompletely bogus because a pointer arithmetic doesn't work for pages\nfrom two different sections in that memory model.\n\nFix the issue by reworking is_pageblock_removable to be pfn based and\nonly use struct page where necessary.  This makes the code slightly\neasier to follow and we will remove the problematic pointer arithmetic\ncompletely.\n\nLink: http://lkml.kernel.org/r/20190218181544.14616-1-mhocko@kernel.org\nFixes: efad4e475c31 (\"mm, memory_hotplug: is_mem_section_removable do not pass the end of a zone\")\nSigned-off-by: Michal Hocko <mhocko@suse.com>\nReported-by: <rong.a.chen@intel.com>\nTested-by: <rong.a.chen@intel.com>\nAcked-by: Mike Rapoport <rppt@linux.ibm.com>\nReviewed-by: Oscar Salvador <osalvador@suse.de>\nCc: Matthew Wilcox <willy@infradead.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/memory_hotplug.c||mm/memory_hotplug.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/memory_hotplug.c||mm/memory_hotplug.c": [
          "File: mm/memory_hotplug.c -> mm/memory_hotplug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1188:  return PageBuddy(page) && page_order(page) >= pageblock_order;",
          "1189: }",
          "1193: {",
          "1198:  if (pageblock_free(page)) {",
          "",
          "[Removed Lines]",
          "1192: static struct page *next_active_pageblock(struct page *page)",
          "1195:  BUG_ON(page_to_pfn(page) & (pageblock_nr_pages - 1));",
          "",
          "[Added Lines]",
          "1192: static unsigned long next_active_pageblock(unsigned long pfn)",
          "1194:  struct page *page = pfn_to_page(pfn);",
          "1197:  BUG_ON(pfn & (pageblock_nr_pages - 1));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1201:   order = page_order(page);",
          "1202:   if ((order < MAX_ORDER) && (order >= pageblock_order))",
          "1204:  }",
          "1207: }",
          "1210: {",
          "1211:  struct zone *zone;",
          "",
          "[Removed Lines]",
          "1203:    return page + (1 << order);",
          "1206:  return page + pageblock_nr_pages;",
          "1209: static bool is_pageblock_removable_nolock(struct page *page)",
          "1212:  unsigned long pfn;",
          "",
          "[Added Lines]",
          "1205:    return pfn + (1 << order);",
          "1208:  return pfn + pageblock_nr_pages;",
          "1211: static bool is_pageblock_removable_nolock(unsigned long pfn)",
          "1213:  struct page *page = pfn_to_page(pfn);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1233: bool is_mem_section_removable(unsigned long start_pfn, unsigned long nr_pages)",
          "1234: {",
          "1242:    return false;",
          "1243:   cond_resched();",
          "1244:  }",
          "",
          "[Removed Lines]",
          "1235:  struct page *page = pfn_to_page(start_pfn);",
          "1236:  unsigned long end_pfn = min(start_pfn + nr_pages, zone_end_pfn(page_zone(page)));",
          "1237:  struct page *end_page = pfn_to_page(end_pfn);",
          "1240:  for (; page < end_page; page = next_active_pageblock(page)) {",
          "1241:   if (!is_pageblock_removable_nolock(page))",
          "",
          "[Added Lines]",
          "1237:  unsigned long end_pfn, pfn;",
          "1239:  end_pfn = min(start_pfn + nr_pages,",
          "1240:    zone_end_pfn(page_zone(pfn_to_page(start_pfn))));",
          "1243:  for (pfn = start_pfn; pfn < end_pfn; pfn = next_active_pageblock(pfn)) {",
          "1244:   if (!is_pageblock_removable_nolock(pfn))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9060cb719e61b685ec0102574e10337fa5f445ea",
      "candidate_info": {
        "commit_hash": "9060cb719e61b685ec0102574e10337fa5f445ea",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9060cb719e61b685ec0102574e10337fa5f445ea",
        "files": [
          "crypto/af_alg.c"
        ],
        "message": "net: crypto set sk to NULL when af_alg_release.\n\nKASAN has found use-after-free in sockfs_setattr.\nThe existed commit 6d8c50dcb029 (\"socket: close race condition between sock_close()\nand sockfs_setattr()\") is to fix this simillar issue, but it seems to ignore\nthat crypto module forgets to set the sk to NULL after af_alg_release.\n\nKASAN report details as below:\nBUG: KASAN: use-after-free in sockfs_setattr+0x120/0x150\nWrite of size 4 at addr ffff88837b956128 by task syz-executor0/4186\n\nCPU: 2 PID: 4186 Comm: syz-executor0 Not tainted xxx + #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\n1.10.2-1ubuntu1 04/01/2014\nCall Trace:\n dump_stack+0xca/0x13e\n print_address_description+0x79/0x330\n ? vprintk_func+0x5e/0xf0\n kasan_report+0x18a/0x2e0\n ? sockfs_setattr+0x120/0x150\n sockfs_setattr+0x120/0x150\n ? sock_register+0x2d0/0x2d0\n notify_change+0x90c/0xd40\n ? chown_common+0x2ef/0x510\n chown_common+0x2ef/0x510\n ? chmod_common+0x3b0/0x3b0\n ? __lock_is_held+0xbc/0x160\n ? __sb_start_write+0x13d/0x2b0\n ? __mnt_want_write+0x19a/0x250\n do_fchownat+0x15c/0x190\n ? __ia32_sys_chmod+0x80/0x80\n ? trace_hardirqs_on_thunk+0x1a/0x1c\n __x64_sys_fchownat+0xbf/0x160\n ? lockdep_hardirqs_on+0x39a/0x5e0\n do_syscall_64+0xc8/0x580\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462589\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89\nf7 48 89 d6 48 89\nca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3\n48 c7 c1 bc ff ff\nff f7 d8 64 89 01 48\nRSP: 002b:00007fb4b2c83c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000104\nRAX: ffffffffffffffda RBX: 000000000072bfa0 RCX: 0000000000462589\nRDX: 0000000000000000 RSI: 00000000200000c0 RDI: 0000000000000007\nRBP: 0000000000000005 R08: 0000000000001000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007fb4b2c846bc\nR13: 00000000004bc733 R14: 00000000006f5138 R15: 00000000ffffffff\n\nAllocated by task 4185:\n kasan_kmalloc+0xa0/0xd0\n __kmalloc+0x14a/0x350\n sk_prot_alloc+0xf6/0x290\n sk_alloc+0x3d/0xc00\n af_alg_accept+0x9e/0x670\n hash_accept+0x4a3/0x650\n __sys_accept4+0x306/0x5c0\n __x64_sys_accept4+0x98/0x100\n do_syscall_64+0xc8/0x580\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nFreed by task 4184:\n __kasan_slab_free+0x12e/0x180\n kfree+0xeb/0x2f0\n __sk_destruct+0x4e6/0x6a0\n sk_destruct+0x48/0x70\n __sk_free+0xa9/0x270\n sk_free+0x2a/0x30\n af_alg_release+0x5c/0x70\n __sock_release+0xd3/0x280\n sock_close+0x1a/0x20\n __fput+0x27f/0x7f0\n task_work_run+0x136/0x1b0\n exit_to_usermode_loop+0x1a7/0x1d0\n do_syscall_64+0x461/0x580\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nSyzkaller reproducer:\nr0 = perf_event_open(&(0x7f0000000000)={0x0, 0x70, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, @perf_config_ext}, 0x0, 0x0,\n0xffffffffffffffff, 0x0)\nr1 = socket$alg(0x26, 0x5, 0x0)\ngetrusage(0x0, 0x0)\nbind(r1, &(0x7f00000001c0)=@alg={0x26, 'hash\\x00', 0x0, 0x0,\n'sha256-ssse3\\x00'}, 0x80)\nr2 = accept(r1, 0x0, 0x0)\nr3 = accept4$unix(r2, 0x0, 0x0, 0x0)\nr4 = dup3(r3, r0, 0x0)\nfchownat(r4, &(0x7f00000000c0)='\\x00', 0x0, 0x0, 0x1000)\n\nFixes: 6d8c50dcb029 (\"socket: close race condition between sock_close() and sockfs_setattr()\")\nSigned-off-by: Mao Wenan <maowenan@huawei.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "crypto/af_alg.c||crypto/af_alg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/af_alg.c||crypto/af_alg.c": [
          "File: crypto/af_alg.c -> crypto/af_alg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: int af_alg_release(struct socket *sock)",
          "124: {",
          "126:   sock_put(sock->sk);",
          "127:  return 0;",
          "128: }",
          "129: EXPORT_SYMBOL_GPL(af_alg_release);",
          "",
          "[Removed Lines]",
          "125:  if (sock->sk)",
          "",
          "[Added Lines]",
          "125:  if (sock->sk) {",
          "127:   sock->sk = NULL;",
          "128:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}