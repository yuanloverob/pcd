{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
      "candidate_info": {
        "commit_hash": "844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/844b9004917ac2843eb1eb15c4b2e5cfbf8b5a7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tokenize.c"
        ],
        "message": "Fix harmless compiler warning.\n\nFossilOrigin-Name: dddda685f3443d8a38901f758543fcde73d7b8cfe72b0ad5f419cd7459343bf5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tokenize.c||src/tokenize.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1aee70d6de8a9b17ebb74a7cb1dad65139cde1b615dcce4d15d3a476fda8676b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c"
        ]
      }
    },
    {
      "candidate_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
      "candidate_info": {
        "commit_hash": "c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c930b405f0717d5f8626dd846f3ab1d2a7243195",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Performance improvement on the instr() function, especially for large haystacks.\n\nFossilOrigin-Name: ce51f1a2b6a1789a5876e01cf829e45d84f3851d135a2fa5c44a56f948673a60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63eb803dbc27077007dbee8def659d1523724eb73f1def1cdb68027e5c20843a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   int typeHaystack, typeNeedle;",
          "202:   int N = 1;",
          "203:   int isText;",
          "205:   UNUSED_PARAMETER(argc);",
          "206:   typeHaystack = sqlite3_value_type(argv[0]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:   unsigned char firstChar;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "219:       isText = 1;",
          "220:     }",
          "221:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) return;",
          "223:       N++;",
          "224:       do{",
          "225:         nHaystack--;",
          "",
          "[Removed Lines]",
          "222:     while( nNeedle<=nHaystack && memcmp(zHaystack, zNeedle, nNeedle)!=0 ){",
          "",
          "[Added Lines]",
          "223:     firstChar = zNeedle[0];",
          "224:     while( nNeedle<=nHaystack",
          "225:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "226:     ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95063c286768c880447ff66641e1a722c32d0b10",
      "candidate_info": {
        "commit_hash": "95063c286768c880447ff66641e1a722c32d0b10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/95063c286768c880447ff66641e1a722c32d0b10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improve the \".recover\" command in the shell tool so that it is not confused by auto-vacuum databases. And so that it can recover tables for which one or more of the column names are SQL keywords.\n\nFossilOrigin-Name: 87d76047d6a3df31bc9b7c0cffa7b758236c124f87263a520850b019cbbc4c6e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d8e88248e3204b5f2b95b9b8921ee7ee2f7574ae81e6abd5b4f2ddf187f7d71b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6397:       }",
          "6398:       i = 1;",
          "6399:       shellPreparePrintf(dbtmp, &rc, &pStmt,",
          "6401:           \"  FILTER (WHERE cid!=%d) OVER (ORDER BY %s cid) \"",
          "6402:           \"FROM pragma_table_info(%Q)\",",
          "6403:           bIntkey ? \", \" : \"\", pTab->iPk,",
          "",
          "[Removed Lines]",
          "6400:           \"SELECT %Q || group_concat(name, ', ') \"",
          "",
          "[Added Lines]",
          "6400:           \"SELECT %Q || group_concat(quote(name), ', ') \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6619:     );",
          "6620:   }",
          "6622:   shellExec(pState->db, &rc,",
          "6623:     \"CREATE TABLE recovery.dbptr(\"",
          "6624:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6625:   shellExec(pState->db, &rc,",
          "6626:     \"WITH ptrmap(pgno) AS (\"",
          "6627:     \"  SELECT 2 WHERE shell_int32(\"",
          "6628:     \"    (SELECT data FROM sqlite_dbpage WHERE pgno=1), 13\"",
          "6629:     \"  )\"",
          "6630:     \"    UNION ALL \"",
          "6631:     \"  SELECT pgno+1+(SELECT page_size FROM pragma_page_size)/5 AS pp \"",
          "6632:     \"  FROM ptrmap WHERE pp<=(SELECT page_count FROM pragma_page_count)\"",
          "6633:     \")\"",
          "6634:     \"REPLACE INTO recovery.freelist SELECT pgno FROM ptrmap\"",
          "6635:   );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94febb3a77a8c79bc090119585fc7878f44bbf38",
      "candidate_info": {
        "commit_hash": "94febb3a77a8c79bc090119585fc7878f44bbf38",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94febb3a77a8c79bc090119585fc7878f44bbf38",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Improved detection of corrupt shadow tables in FTS3.  Enable the debugging special-inserts for FTS3 for both SQLITE_DEBUG and SQLITE_TEST.\n\nFossilOrigin-Name: 04b2873be5aedeb1c4325cf36c4b5d180f929a641caf1e3829c03778adb29c8e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4337:   int bIncrOk = (bOptOk",
          "4338:    && pCsr->bDesc==pTab->bDescIdx",
          "4339:    && p->nToken<=MAX_INCR_PHRASE_TOKENS && p->nToken>0",
          "4341:    && pTab->bNoIncrDoclist==0",
          "4342: #endif",
          "4343:   );",
          "",
          "[Removed Lines]",
          "4340: #ifdef SQLITE_TEST",
          "",
          "[Added Lines]",
          "4340: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: #endif",
          "303:   int bNoIncrDoclist;",
          "",
          "[Removed Lines]",
          "300: #ifdef SQLITE_TEST",
          "",
          "[Added Lines]",
          "300: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <string.h>",
          "24: #include <assert.h>",
          "25: #include <stdlib.h>",
          "28: #define FTS_MAX_APPENDABLE_HEIGHT 16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <stdio.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2030:     nPrefix = fts3PrefixCompress(pTree->zTerm, pTree->nTerm, zTerm, nTerm);",
          "2031:     nSuffix = nTerm-nPrefix;",
          "2033:     nReq += sqlite3Fts3VarintLen(nPrefix)+sqlite3Fts3VarintLen(nSuffix)+nSuffix;",
          "2034:     if( nReq<=p->nNodeSize || !pTree->zTerm ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2036:     if( nSuffix<=0 ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2324:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nPrefix);",
          "2325:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nSuffix);",
          "2326:   memcpy(&pWriter->aData[nData], &zTerm[nPrefix], nSuffix);",
          "2327:   nData += nSuffix;",
          "2328:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nDoclist);",
          "2329:   memcpy(&pWriter->aData[nData], aDoclist, nDoclist);",
          "2330:   pWriter->nData = nData + nDoclist;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331:   assert( nSuffix>0 );",
          "2335:   assert( nDoclist>0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2345:       pWriter->zTerm = zNew;",
          "2346:     }",
          "2347:     assert( pWriter->zTerm==pWriter->zMalloc );",
          "2348:     memcpy(pWriter->zTerm, zTerm, nTerm);",
          "2349:   }else{",
          "2350:     pWriter->zTerm = (char *)zTerm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:     assert( nTerm>0 );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2653:     pMsr->aBuffer = pNew;",
          "2654:   }",
          "2656:   memcpy(pMsr->aBuffer, pList, nList);",
          "2657:   return SQLITE_OK;",
          "2658: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2664:   assert( nList>0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3842:     nPrefix = fts3PrefixCompress(pNode->key.a, pNode->key.n, zTerm, nTerm);",
          "3843:     nSuffix = nTerm - nPrefix;",
          "3844:     nSpace  = sqlite3Fts3VarintLen(nPrefix);",
          "3845:     nSpace += sqlite3Fts3VarintLen(nSuffix) + nSuffix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3853:     if( NEVER(nSuffix<=0) ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5360:     rc = fts3DoIncrmerge(p, &zVal[6]);",
          "5361:   }else if( nVal>10 && 0==sqlite3_strnicmp(zVal, \"automerge=\", 10) ){",
          "5362:     rc = fts3DoAutoincrmerge(p, &zVal[10]);",
          "5374:   }else{",
          "5376:   }",
          "5378:   return rc;",
          "5379: }",
          "",
          "[Removed Lines]",
          "5363: #ifdef SQLITE_TEST",
          "5364:   }else if( nVal>9 && 0==sqlite3_strnicmp(zVal, \"nodesize=\", 9) ){",
          "5365:     p->nNodeSize = atoi(&zVal[9]);",
          "5366:     rc = SQLITE_OK;",
          "5367:   }else if( nVal>11 && 0==sqlite3_strnicmp(zVal, \"maxpending=\", 9) ){",
          "5368:     p->nMaxPendingData = atoi(&zVal[11]);",
          "5369:     rc = SQLITE_OK;",
          "5370:   }else if( nVal>21 && 0==sqlite3_strnicmp(zVal, \"test-no-incr-doclist=\", 21) ){",
          "5371:     p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5372:     rc = SQLITE_OK;",
          "5373: #endif",
          "5375:     rc = SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "5373: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "5375:     int v;",
          "5376:     if( nVal>9 && 0==sqlite3_strnicmp(zVal, \"nodesize=\", 9) ){",
          "5377:       v = atoi(&zVal[9]);",
          "5378:       if( v>=24 && v<=p->nPgsz-35 ) p->nNodeSize = v;",
          "5379:       rc = SQLITE_OK;",
          "5380:     }else if( nVal>11 && 0==sqlite3_strnicmp(zVal, \"maxpending=\", 9) ){",
          "5381:       v = atoi(&zVal[11]);",
          "5382:       if( v>=64 && v<=FTS3_MAX_PENDING_DATA ) p->nMaxPendingData = v;",
          "5383:       rc = SQLITE_OK;",
          "5384:     }else if( nVal>21 && 0==sqlite3_strnicmp(zVal,\"test-no-incr-doclist=\",21) ){",
          "5385:       p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5386:       rc = SQLITE_OK;",
          "5387:     }",
          "5388: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bae76a5c40703871e5ce4cd23d6fae5a3836606f524a63b01ac828c7a602c5e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce5752cd1f748e9449afc3fcfa6e1e9f1670d1e9",
      "candidate_info": {
        "commit_hash": "ce5752cd1f748e9449afc3fcfa6e1e9f1670d1e9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ce5752cd1f748e9449afc3fcfa6e1e9f1670d1e9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Add some missing VdbeCoverage() macros.\n\nFossilOrigin-Name: d03b611302f68483770d49b113b4ed685ba03526d2007647c306f8ec7ae697d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 10ee9e337e5f8a846dc827f6deb07930a790ac9d290b62f73de59454e465d5a1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323:     VdbeCoverageIf(v, eCond==2);",
          "1324:   }",
          "1325:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1331:   sqlite3MayAbort(pParse);",
          "1332:   sqlite3VdbeAddOp2(v, OP_Halt, SQLITE_ERROR, OE_Abort);",
          "1333:   sqlite3VdbeAppendP4(v, (void*)azErr[eCond], P4_STATIC);",
          "",
          "[Removed Lines]",
          "1326:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1327:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "1328:   VdbeCoverageNeverNullIf(v, eCond==2);",
          "1329:   VdbeCoverageNeverNullIf(v, eCond==3);",
          "1330:   VdbeCoverageNeverNullIf(v, eCond==4);",
          "",
          "[Added Lines]",
          "1326:   VdbeCoverageIf(v, eCond==0);",
          "1327:   VdbeCoverageIf(v, eCond==1);",
          "1328:   VdbeCoverageIf(v, eCond==2);",
          "1329:   VdbeCoverageIf(v, eCond==3);",
          "1330:   VdbeCoverageIf(v, eCond==4);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1578:   if( pMWin->eExclude==TK_CURRENT ){",
          "1579:     sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, lblNext, regRowid);",
          "1580:   }else if( pMWin->eExclude!=TK_NO ){",
          "1581:     int addr;",
          "1582:     int addrEq = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1580:     VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1587:     }",
          "1588:     if( pMWin->eExclude==TK_TIES ){",
          "1589:       addrEq = sqlite3VdbeAddOp3(v, OP_Eq, regCRowid, 0, regRowid);",
          "1590:     }",
          "1591:     if( pKeyInfo ){",
          "1592:       windowReadPeerValues(p, csr, regPeer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1591:       VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    }
  ]
}