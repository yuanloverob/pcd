{
  "cve_id": "CVE-2012-4508",
  "cve_desc": "Race condition in fs/ext4/extents.c in the Linux kernel before 3.4.16 allows local users to obtain sensitive information from a deleted file by reading an extent that was not properly marked as uninitialized.",
  "repo": "torvalds/linux",
  "patch_hash": "dee1f973ca341c266229faa5a1a5bb268bed3531",
  "patch_info": {
    "commit_hash": "dee1f973ca341c266229faa5a1a5bb268bed3531",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/dee1f973ca341c266229faa5a1a5bb268bed3531",
    "files": [
      "fs/ext4/extents.c"
    ],
    "message": "ext4: race-condition protection for ext4_convert_unwritten_extents_endio\n\nWe assumed that at the time we call ext4_convert_unwritten_extents_endio()\nextent in question is fully inside [map.m_lblk, map->m_len] because\nit was already split during submission.  But this may not be true due to\na race between writeback vs fallocate.\n\nIf extent in question is larger than requested we will split it again.\nSpecial precautions should being done if zeroout required because\n[map.m_lblk, map->m_len] already contains valid data.\n\nSigned-off-by: Dmitry Monakhov <dmonakhov@openvz.org>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>\nCc: stable@vger.kernel.org",
    "before_after_code_files": [
      "fs/ext4/extents.c||fs/ext4/extents.c"
    ]
  },
  "patch_diff": {
    "fs/ext4/extents.c||fs/ext4/extents.c": [
      "File: fs/ext4/extents.c -> fs/ext4/extents.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2914:  unsigned int ee_len, depth;",
      "2915:  int err = 0;",
      "2917:  ext_debug(\"ext4_split_extents_at: inode %lu, logical\"",
      "2918:   \"block %llu\\n\", inode->i_ino, (unsigned long long)split);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2920:  BUG_ON((split_flag & (EXT4_EXT_DATA_VALID1 | EXT4_EXT_DATA_VALID2)) ==",
      "2921:         (EXT4_EXT_DATA_VALID1 | EXT4_EXT_DATA_VALID2));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2973:  err = ext4_ext_insert_extent(handle, inode, path, &newex, flags);",
      "2974:  if (err == -ENOSPC && (EXT4_EXT_MAY_ZEROOUT & split_flag)) {",
      "2976:   if (err)",
      "2977:    goto fix_extent_len;",
      "",
      "[Removed Lines]",
      "2975:   err = ext4_ext_zeroout(inode, &orig_ex);",
      "",
      "[Added Lines]",
      "2981:   if (split_flag & (EXT4_EXT_DATA_VALID1|EXT4_EXT_DATA_VALID2)) {",
      "2982:    if (split_flag & EXT4_EXT_DATA_VALID1)",
      "2983:     err = ext4_ext_zeroout(inode, ex2);",
      "2984:    else",
      "2985:     err = ext4_ext_zeroout(inode, ex);",
      "2986:   } else",
      "2987:    err = ext4_ext_zeroout(inode, &orig_ex);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3025:  uninitialized = ext4_ext_is_uninitialized(ex);",
      "3027:  if (map->m_lblk + map->m_len < ee_block + ee_len) {",
      "3030:   flags1 = flags | EXT4_GET_BLOCKS_PRE_IO;",
      "3031:   if (uninitialized)",
      "3032:    split_flag1 |= EXT4_EXT_MARK_UNINIT1 |",
      "3033:            EXT4_EXT_MARK_UNINIT2;",
      "3034:   err = ext4_split_extent_at(handle, inode, path,",
      "3035:     map->m_lblk + map->m_len, split_flag1, flags1);",
      "3036:   if (err)",
      "",
      "[Removed Lines]",
      "3028:   split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ?",
      "3029:          EXT4_EXT_MAY_ZEROOUT : 0;",
      "",
      "[Added Lines]",
      "3041:   split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT;",
      "3046:   if (split_flag & EXT4_EXT_DATA_VALID2)",
      "3047:    split_flag1 |= EXT4_EXT_DATA_VALID1;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3043:   return PTR_ERR(path);",
      "3045:  if (map->m_lblk >= ee_block) {",
      "3048:   if (uninitialized)",
      "3049:    split_flag1 |= EXT4_EXT_MARK_UNINIT1;",
      "3050:   if (split_flag & EXT4_EXT_MARK_UNINIT2)",
      "",
      "[Removed Lines]",
      "3046:   split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ?",
      "3047:          EXT4_EXT_MAY_ZEROOUT : 0;",
      "",
      "[Added Lines]",
      "3060:   split_flag1 = split_flag & (EXT4_EXT_MAY_ZEROOUT |",
      "3061:          EXT4_EXT_DATA_VALID2);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3324:  split_flag |= ee_block + ee_len <= eof_block ? EXT4_EXT_MAY_ZEROOUT : 0;",
      "3325:  split_flag |= EXT4_EXT_MARK_UNINIT2;",
      "3327:  flags |= EXT4_GET_BLOCKS_PRE_IO;",
      "3328:  return ext4_split_extent(handle, inode, path, map, split_flag, flags);",
      "3329: }",
      "3331: static int ext4_convert_unwritten_extents_endio(handle_t *handle,",
      "3334: {",
      "3335:  struct ext4_extent *ex;",
      "3336:  int depth;",
      "3337:  int err = 0;",
      "3339:  depth = ext_depth(inode);",
      "3340:  ex = path[depth].p_ext;",
      "3342:  ext_debug(\"ext4_convert_unwritten_extents_endio: inode %lu, logical\"",
      "3343:   \"block %llu, max_blocks %u\\n\", inode->i_ino,",
      "3347:  err = ext4_ext_get_access(handle, inode, path + depth);",
      "3348:  if (err)",
      "",
      "[Removed Lines]",
      "3332:            struct inode *inode,",
      "3333:            struct ext4_ext_path *path)",
      "3344:   (unsigned long long)le32_to_cpu(ex->ee_block),",
      "3345:   ext4_ext_get_actual_len(ex));",
      "",
      "[Added Lines]",
      "3340:  if (flags & EXT4_GET_BLOCKS_CONVERT)",
      "3341:   split_flag |= EXT4_EXT_DATA_VALID2;",
      "3347:       struct inode *inode,",
      "3348:       struct ext4_map_blocks *map,",
      "3349:       struct ext4_ext_path *path)",
      "3352:  ext4_lblk_t ee_block;",
      "3353:  unsigned int ee_len;",
      "3359:  ee_block = le32_to_cpu(ex->ee_block);",
      "3360:  ee_len = ext4_ext_get_actual_len(ex);",
      "3364:     (unsigned long long)ee_block, ee_len);",
      "3367:  if (ee_block != map->m_lblk || ee_len > map->m_len) {",
      "3368:   err = ext4_split_unwritten_extents(handle, inode, map, path,",
      "3369:          EXT4_GET_BLOCKS_CONVERT);",
      "3370:   if (err < 0)",
      "3371:    goto out;",
      "3372:   ext4_ext_drop_refs(path);",
      "3373:   path = ext4_ext_find_extent(inode, map->m_lblk, path);",
      "3374:   if (IS_ERR(path)) {",
      "3375:    err = PTR_ERR(path);",
      "3376:    goto out;",
      "3377:   }",
      "3378:   depth = ext_depth(inode);",
      "3379:   ex = path[depth].p_ext;",
      "3380:  }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3652:  }",
      "3654:  if ((flags & EXT4_GET_BLOCKS_CONVERT)) {",
      "3656:        path);",
      "3657:   if (ret >= 0) {",
      "3658:    ext4_update_inode_fsync_trans(handle, inode, 1);",
      "",
      "[Removed Lines]",
      "3655:   ret = ext4_convert_unwritten_extents_endio(handle, inode,",
      "",
      "[Added Lines]",
      "3690:   ret = ext4_convert_unwritten_extents_endio(handle, inode, map,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "adb2355104b2109e06ba5276485d187d023b2fd2",
      "candidate_info": {
        "commit_hash": "adb2355104b2109e06ba5276485d187d023b2fd2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/adb2355104b2109e06ba5276485d187d023b2fd2",
        "files": [
          "fs/ext4/extents.c",
          "fs/ext4/extents_status.c",
          "fs/ext4/extents_status.h",
          "fs/ext4/inode.c"
        ],
        "message": "ext4: update extent status tree after an extent is zeroed out\n\nWhen we try to split an extent, this extent could be zeroed out and mark\nas initialized.  But we don't know this in ext4_map_blocks because it\nonly returns a length of allocated extent.  Meanwhile we will mark this\nextent as uninitialized because we only check m_flags.\n\nThis commit update extent status tree when we try to split an unwritten\nextent.  We don't need to worry about the status of this extent because\nwe always mark it as initialized.\n\nSigned-off-by: Zheng Liu <wenqing.lz@taobao.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>\nCc: Dmitry Monakhov <dmonakhov@openvz.org>",
        "before_after_code_files": [
          "fs/ext4/extents.c||fs/ext4/extents.c",
          "fs/ext4/extents_status.c||fs/ext4/extents_status.c",
          "fs/ext4/extents_status.h||fs/ext4/extents_status.h",
          "fs/ext4/inode.c||fs/ext4/inode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2925: {",
          "2926:  ext4_fsblk_t newblock;",
          "2927:  ext4_lblk_t ee_block;",
          "2929:  struct ext4_extent *ex2 = NULL;",
          "2930:  unsigned int ee_len, depth;",
          "2931:  int err = 0;",
          "",
          "[Removed Lines]",
          "2928:  struct ext4_extent *ex, newex, orig_ex;",
          "",
          "[Added Lines]",
          "2928:  struct ext4_extent *ex, newex, orig_ex, zero_ex;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2996:  err = ext4_ext_insert_extent(handle, inode, path, &newex, flags);",
          "2997:  if (err == -ENOSPC && (EXT4_EXT_MAY_ZEROOUT & split_flag)) {",
          "2998:   if (split_flag & (EXT4_EXT_DATA_VALID1|EXT4_EXT_DATA_VALID2)) {",
          "3000:     err = ext4_ext_zeroout(inode, ex2);",
          "3002:     err = ext4_ext_zeroout(inode, ex);",
          "3004:    err = ext4_ext_zeroout(inode, &orig_ex);",
          "3006:   if (err)",
          "3007:    goto fix_extent_len;",
          "",
          "[Removed Lines]",
          "2999:    if (split_flag & EXT4_EXT_DATA_VALID1)",
          "3001:    else",
          "3003:   } else",
          "",
          "[Added Lines]",
          "2999:    if (split_flag & EXT4_EXT_DATA_VALID1) {",
          "3001:     zero_ex.ee_block = ex2->ee_block;",
          "3002:     zero_ex.ee_len = ext4_ext_get_actual_len(ex2);",
          "3003:     ext4_ext_store_pblock(&zero_ex,",
          "3004:             ext4_ext_pblock(ex2));",
          "3005:    } else {",
          "3007:     zero_ex.ee_block = ex->ee_block;",
          "3008:     zero_ex.ee_len = ext4_ext_get_actual_len(ex);",
          "3009:     ext4_ext_store_pblock(&zero_ex,",
          "3010:             ext4_ext_pblock(ex));",
          "3011:    }",
          "3012:   } else {",
          "3014:    zero_ex.ee_block = orig_ex.ee_block;",
          "3015:    zero_ex.ee_len = ext4_ext_get_actual_len(&orig_ex);",
          "3016:    ext4_ext_store_pblock(&zero_ex,",
          "3017:            ext4_ext_pblock(&orig_ex));",
          "3018:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3009:   ex->ee_len = cpu_to_le16(ee_len);",
          "3010:   ext4_ext_try_to_merge(handle, inode, path, ex);",
          "3011:   err = ext4_ext_dirty(handle, inode, path + path->p_depth);",
          "3012:   goto out;",
          "3013:  } else if (err)",
          "3014:   goto fix_extent_len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3026:   if (err)",
          "3027:    goto fix_extent_len;",
          "3030:   err = ext4_es_zeroout(inode, &zero_ex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3150:  ee_block = le32_to_cpu(ex->ee_block);",
          "3151:  ee_len = ext4_ext_get_actual_len(ex);",
          "3152:  allocated = ee_len - (map->m_lblk - ee_block);",
          "3154:  trace_ext4_ext_convert_to_initialized_enter(inode, map, ex);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3173:  zero_ex.ee_len = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3247:   err = ext4_ext_zeroout(inode, ex);",
          "3248:   if (err)",
          "3249:    goto out;",
          "3251:   err = ext4_ext_get_access(handle, inode, path + depth);",
          "3252:   if (err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3271:   zero_ex.ee_block = ex->ee_block;",
          "3272:   zero_ex.ee_len = ext4_ext_get_actual_len(ex);",
          "3273:   ext4_ext_store_pblock(&zero_ex, ext4_ext_pblock(ex));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3305:   err = allocated;",
          "3307: out:",
          "3308:  return err ? err : allocated;",
          "3309: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3333:  if (!err)",
          "3334:   err = ext4_es_zeroout(inode, &zero_ex);",
          "",
          "---------------"
        ],
        "fs/ext4/extents_status.c||fs/ext4/extents_status.c": [
          "File: fs/ext4/extents_status.c -> fs/ext4/extents_status.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "854:  return err;",
          "855: }",
          "857: static int ext4_es_shrink(struct shrinker *shrink, struct shrink_control *sc)",
          "858: {",
          "859:  struct ext4_sb_info *sbi = container_of(shrink,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857: int ext4_es_zeroout(struct inode *inode, struct ext4_extent *ex)",
          "858: {",
          "859:  ext4_lblk_t  ee_block;",
          "860:  ext4_fsblk_t ee_pblock;",
          "861:  unsigned int ee_len;",
          "863:  ee_block  = le32_to_cpu(ex->ee_block);",
          "864:  ee_len    = ext4_ext_get_actual_len(ex);",
          "865:  ee_pblock = ext4_ext_pblock(ex);",
          "867:  if (ee_len == 0)",
          "868:   return 0;",
          "870:  return ext4_es_insert_extent(inode, ee_block, ee_len, ee_pblock,",
          "871:          EXTENT_STATUS_WRITTEN);",
          "872: }",
          "",
          "---------------"
        ],
        "fs/ext4/extents_status.h||fs/ext4/extents_status.h": [
          "File: fs/ext4/extents_status.h -> fs/ext4/extents_status.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:      EXTENT_STATUS_DELAYED | \\",
          "40:      EXTENT_STATUS_HOLE)",
          "42: struct extent_status {",
          "43:  struct rb_node rb_node;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: struct ext4_extent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:      struct extent_status *es);",
          "65: extern int ext4_es_lookup_extent(struct inode *inode, ext4_lblk_t lblk,",
          "66:      struct extent_status *es);",
          "68: static inline int ext4_es_is_written(struct extent_status *es)",
          "69: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: extern int ext4_es_zeroout(struct inode *inode, struct ext4_extent *ex);",
          "",
          "---------------"
        ],
        "fs/ext4/inode.c||fs/ext4/inode.c": [
          "File: fs/ext4/inode.c -> fs/ext4/inode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "722:   }",
          "723: #endif",
          "725:   status = map->m_flags & EXT4_MAP_UNWRITTEN ?",
          "726:     EXTENT_STATUS_UNWRITTEN : EXTENT_STATUS_WRITTEN;",
          "727:   if (!(flags & EXT4_GET_BLOCKS_DELALLOC_RESERVE) &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:   if ((flags & EXT4_GET_BLOCKS_PRE_IO) &&",
          "730:       ext4_es_lookup_extent(inode, map->m_lblk, &es)) {",
          "731:    if (ext4_es_is_written(&es))",
          "732:     goto has_zeroout;",
          "733:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "734:    retval = ret;",
          "735:  }",
          "737:  up_write((&EXT4_I(inode)->i_data_sem));",
          "738:  if (retval > 0 && map->m_flags & EXT4_MAP_MAPPED) {",
          "739:   int ret = check_block_validity(inode, map);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746: has_zeroout:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "107a7bd31ac003e42c0f966aa8e5b26947de6024",
      "candidate_info": {
        "commit_hash": "107a7bd31ac003e42c0f966aa8e5b26947de6024",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/107a7bd31ac003e42c0f966aa8e5b26947de6024",
        "files": [
          "fs/ext4/ext4.h",
          "fs/ext4/extents.c",
          "fs/ext4/extents_status.c",
          "fs/ext4/extents_status.h",
          "fs/ext4/migrate.c",
          "fs/ext4/move_extent.c",
          "include/trace/events/ext4.h"
        ],
        "message": "ext4: cache all of an extent tree's leaf block upon reading\n\nWhen we read in an extent tree leaf block from disk, arrange to have\nall of its entries cached.  In nearly all cases the in-memory\nrepresentation will be more compact than the on-disk representation in\nthe buffer cache, and it allows us to get the information without\nhaving to traverse the extent tree for successive extents.\n\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>\nReviewed-by: Zheng Liu <wenqing.lz@taobao.com>",
        "before_after_code_files": [
          "fs/ext4/ext4.h||fs/ext4/ext4.h",
          "fs/ext4/extents.c||fs/ext4/extents.c",
          "fs/ext4/extents_status.c||fs/ext4/extents_status.c",
          "fs/ext4/extents_status.h||fs/ext4/extents_status.h",
          "fs/ext4/migrate.c||fs/ext4/migrate.c",
          "fs/ext4/move_extent.c||fs/ext4/move_extent.c",
          "include/trace/events/ext4.h||include/trace/events/ext4.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/ext4.h||fs/ext4/ext4.h": [
          "File: fs/ext4/ext4.h -> fs/ext4/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "561: #define EXT4_GET_BLOCKS_NO_PUT_HOLE  0x0200",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572: #define EXT4_EX_NOCACHE    0x0400",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2684:       struct ext4_ext_path *,",
          "2685:       struct ext4_extent *, int);",
          "2686: extern struct ext4_ext_path *ext4_ext_find_extent(struct inode *, ext4_lblk_t,",
          "2688: extern void ext4_ext_drop_refs(struct ext4_ext_path *);",
          "2689: extern int ext4_ext_check_inode(struct inode *inode);",
          "2690: extern int ext4_find_delalloc_range(struct inode *inode,",
          "",
          "[Removed Lines]",
          "2687:         struct ext4_ext_path *);",
          "",
          "[Added Lines]",
          "2698:         struct ext4_ext_path *,",
          "2699:         int flags);",
          "",
          "---------------"
        ],
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "467: static struct buffer_head *",
          "468: __read_extent_tree_block(const char *function, unsigned int line,",
          "470: {",
          "471:  struct buffer_head  *bh;",
          "472:  int    err;",
          "",
          "[Removed Lines]",
          "469:     struct inode *inode, ext4_fsblk_t pblk, int depth)",
          "",
          "[Added Lines]",
          "469:     struct inode *inode, ext4_fsblk_t pblk, int depth,",
          "470:     int flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "488:  if (err)",
          "489:   goto errout;",
          "490:  set_buffer_verified(bh);",
          "491:  return bh;",
          "492: errout:",
          "493:  put_bh(bh);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "495:  if (!(flags & EXT4_EX_NOCACHE) && depth == 0) {",
          "496:   struct ext4_extent_header *eh = ext_block_hdr(bh);",
          "497:   struct ext4_extent *ex = EXT_FIRST_EXTENT(eh);",
          "498:   ext4_lblk_t prev = 0;",
          "499:   int i;",
          "501:   for (i = le16_to_cpu(eh->eh_entries); i > 0; i--, ex++) {",
          "502:    unsigned int status = EXTENT_STATUS_WRITTEN;",
          "503:    ext4_lblk_t lblk = le32_to_cpu(ex->ee_block);",
          "504:    int len = ext4_ext_get_actual_len(ex);",
          "506:    if (prev && (prev != lblk))",
          "507:     ext4_es_cache_extent(inode, prev,",
          "508:            lblk - prev, ~0,",
          "509:            EXTENT_STATUS_HOLE);",
          "511:    if (ext4_ext_is_uninitialized(ex))",
          "512:     status = EXTENT_STATUS_UNWRITTEN;",
          "513:    ext4_es_cache_extent(inode, lblk, len,",
          "514:           ext4_ext_pblock(ex), status);",
          "515:    prev = lblk + len;",
          "516:   }",
          "517:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "496: }",
          "501: #ifdef EXT_DEBUG",
          "502: static void ext4_ext_show_path(struct inode *inode, struct ext4_ext_path *path)",
          "",
          "[Removed Lines]",
          "498: #define read_extent_tree_block(inode, pblk, depth)  \\",
          "499:  __read_extent_tree_block(__func__, __LINE__, (inode), (pblk), (depth))",
          "",
          "[Added Lines]",
          "525: #define read_extent_tree_block(inode, pblk, depth, flags)  \\",
          "526:  __read_extent_tree_block(__func__, __LINE__, (inode), (pblk),   \\",
          "527:      (depth), (flags))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "731: struct ext4_ext_path *",
          "732: ext4_ext_find_extent(struct inode *inode, ext4_lblk_t block,",
          "734: {",
          "735:  struct ext4_extent_header *eh;",
          "736:  struct buffer_head *bh;",
          "",
          "[Removed Lines]",
          "733:      struct ext4_ext_path *path)",
          "",
          "[Added Lines]",
          "761:        struct ext4_ext_path *path, int flags)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "762:   path[ppos].p_depth = i;",
          "763:   path[ppos].p_ext = NULL;",
          "766:   if (IS_ERR(bh)) {",
          "767:    ret = PTR_ERR(bh);",
          "768:    goto err;",
          "",
          "[Removed Lines]",
          "765:   bh = read_extent_tree_block(inode, path[ppos].p_block, --i);",
          "",
          "[Added Lines]",
          "793:   bh = read_extent_tree_block(inode, path[ppos].p_block, --i,",
          "794:          flags);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1201: static int ext4_ext_create_new_leaf(handle_t *handle, struct inode *inode,",
          "1203:         struct ext4_ext_path *path,",
          "1204:         struct ext4_extent *newext)",
          "1205: {",
          "",
          "[Removed Lines]",
          "1202:         unsigned int flags,",
          "",
          "[Added Lines]",
          "1231:         unsigned int mb_flags,",
          "1232:         unsigned int gb_flags,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1221:  if (EXT_HAS_FREE_INDEX(curp)) {",
          "1225:   if (err)",
          "1226:    goto out;",
          "",
          "[Removed Lines]",
          "1224:   err = ext4_ext_split(handle, inode, flags, path, newext, i);",
          "",
          "[Added Lines]",
          "1254:   err = ext4_ext_split(handle, inode, mb_flags, path, newext, i);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1229:   ext4_ext_drop_refs(path);",
          "1230:   path = ext4_ext_find_extent(inode,",
          "1231:         (ext4_lblk_t)le32_to_cpu(newext->ee_block),",
          "1233:   if (IS_ERR(path))",
          "1234:    err = PTR_ERR(path);",
          "1235:  } else {",
          "1238:   if (err)",
          "1239:    goto out;",
          "",
          "[Removed Lines]",
          "1232:         path);",
          "1237:   err = ext4_ext_grow_indepth(handle, inode, flags, newext);",
          "",
          "[Added Lines]",
          "1262:         path, gb_flags);",
          "1267:   err = ext4_ext_grow_indepth(handle, inode, mb_flags, newext);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1242:   ext4_ext_drop_refs(path);",
          "1243:   path = ext4_ext_find_extent(inode,",
          "1244:        (ext4_lblk_t)le32_to_cpu(newext->ee_block),",
          "1246:   if (IS_ERR(path)) {",
          "1247:    err = PTR_ERR(path);",
          "1248:    goto out;",
          "",
          "[Removed Lines]",
          "1245:         path);",
          "",
          "[Added Lines]",
          "1275:         path, gb_flags);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1415:  while (++depth < path->p_depth) {",
          "1417:   bh = read_extent_tree_block(inode, block,",
          "1419:   if (IS_ERR(bh))",
          "1420:    return PTR_ERR(bh);",
          "1421:   eh = ext_block_hdr(bh);",
          "",
          "[Removed Lines]",
          "1418:          path->p_depth - depth);",
          "",
          "[Added Lines]",
          "1448:          path->p_depth - depth, 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1424:   put_bh(bh);",
          "1425:  }",
          "1428:  if (IS_ERR(bh))",
          "1429:   return PTR_ERR(bh);",
          "1430:  eh = ext_block_hdr(bh);",
          "",
          "[Removed Lines]",
          "1427:  bh = read_extent_tree_block(inode, block, path->p_depth - depth);",
          "",
          "[Added Lines]",
          "1457:  bh = read_extent_tree_block(inode, block, path->p_depth - depth, 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1787: int ext4_ext_insert_extent(handle_t *handle, struct inode *inode,",
          "1788:     struct ext4_ext_path *path,",
          "1790: {",
          "1791:  struct ext4_extent_header *eh;",
          "1792:  struct ext4_extent *ex, *fex;",
          "",
          "[Removed Lines]",
          "1789:     struct ext4_extent *newext, int flag)",
          "",
          "[Added Lines]",
          "1819:     struct ext4_extent *newext, int gb_flags)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1795:  int depth, len, err;",
          "1796:  ext4_lblk_t next;",
          "1797:  unsigned uninitialized = 0;",
          "1800:  if (unlikely(ext4_ext_get_actual_len(newext) == 0)) {",
          "1801:   EXT4_ERROR_INODE(inode, \"ext4_ext_get_actual_len(newext) == 0\");",
          "",
          "[Removed Lines]",
          "1798:  int flags = 0;",
          "",
          "[Added Lines]",
          "1828:  int mb_flags = 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1810:  }",
          "",
          "[Removed Lines]",
          "1813:  if (ex && !(flag & EXT4_GET_BLOCKS_PRE_IO)) {",
          "",
          "[Added Lines]",
          "1843:  if (ex && !(gb_flags & EXT4_GET_BLOCKS_PRE_IO)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1913:  if (next != EXT_MAX_BLOCKS) {",
          "1914:   ext_debug(\"next leaf block - %u\\n\", next);",
          "1915:   BUG_ON(npath != NULL);",
          "1917:   if (IS_ERR(npath))",
          "1918:    return PTR_ERR(npath);",
          "1919:   BUG_ON(npath->p_depth != path->p_depth);",
          "",
          "[Removed Lines]",
          "1916:   npath = ext4_ext_find_extent(inode, next, NULL);",
          "",
          "[Added Lines]",
          "1946:   npath = ext4_ext_find_extent(inode, next, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1938:  if (err)",
          "1939:   goto cleanup;",
          "1940:  depth = ext_depth(inode);",
          "",
          "[Removed Lines]",
          "1935:  if (flag & EXT4_GET_BLOCKS_METADATA_NOFAIL)",
          "1936:   flags = EXT4_MB_USE_RESERVED;",
          "1937:  err = ext4_ext_create_new_leaf(handle, inode, flags, path, newext);",
          "",
          "[Added Lines]",
          "1965:  if (gb_flags & EXT4_GET_BLOCKS_METADATA_NOFAIL)",
          "1966:   mb_flags = EXT4_MB_USE_RESERVED;",
          "1967:  err = ext4_ext_create_new_leaf(handle, inode, mb_flags, gb_flags,",
          "1968:            path, newext);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2001: merge:",
          "2004:   ext4_ext_try_to_merge(handle, inode, path, nearex);",
          "",
          "[Removed Lines]",
          "2003:  if (!(flag & EXT4_GET_BLOCKS_PRE_IO))",
          "",
          "[Added Lines]",
          "2034:  if (!(gb_flags & EXT4_GET_BLOCKS_PRE_IO))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2043:    path = NULL;",
          "2044:   }",
          "2047:   if (IS_ERR(path)) {",
          "2048:    up_read(&EXT4_I(inode)->i_data_sem);",
          "2049:    err = PTR_ERR(path);",
          "",
          "[Removed Lines]",
          "2046:   path = ext4_ext_find_extent(inode, block, path);",
          "",
          "[Added Lines]",
          "2077:   path = ext4_ext_find_extent(inode, block, path, 0);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2705:   ext4_lblk_t ee_block;",
          "2709:   if (IS_ERR(path)) {",
          "2710:    ext4_journal_stop(handle);",
          "2711:    return PTR_ERR(path);",
          "",
          "[Removed Lines]",
          "2708:   path = ext4_ext_find_extent(inode, end, NULL);",
          "",
          "[Added Lines]",
          "2739:   path = ext4_ext_find_extent(inode, end, NULL, EXT4_EX_NOCACHE);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2748:    err = ext4_split_extent_at(handle, inode, path,",
          "2749:      end + 1, split_flag,",
          "2750:      EXT4_GET_BLOCKS_PRE_IO |",
          "2751:      EXT4_GET_BLOCKS_METADATA_NOFAIL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2781:      EXT4_EX_NOCACHE |",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2823:       i + 1, ext4_idx_pblock(path[i].p_idx));",
          "2824:    memset(path + i + 1, 0, sizeof(*path));",
          "2825:    bh = read_extent_tree_block(inode,",
          "2827:    if (IS_ERR(bh)) {",
          "2829:     err = PTR_ERR(bh);",
          "",
          "[Removed Lines]",
          "2826:     ext4_idx_pblock(path[i].p_idx), depth - i - 1);",
          "",
          "[Added Lines]",
          "2858:     ext4_idx_pblock(path[i].p_idx), depth - i - 1,",
          "2859:     EXT4_EX_NOCACHE);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3172:  ext4_ext_drop_refs(path);",
          "3174:  if (IS_ERR(path))",
          "3175:   return PTR_ERR(path);",
          "3176:  depth = ext_depth(inode);",
          "",
          "[Removed Lines]",
          "3173:  path = ext4_ext_find_extent(inode, map->m_lblk, path);",
          "",
          "[Added Lines]",
          "3206:  path = ext4_ext_find_extent(inode, map->m_lblk, path, 0);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3554:   if (err < 0)",
          "3555:    goto out;",
          "3556:   ext4_ext_drop_refs(path);",
          "3558:   if (IS_ERR(path)) {",
          "3559:    err = PTR_ERR(path);",
          "3560:    goto out;",
          "",
          "[Removed Lines]",
          "3557:   path = ext4_ext_find_extent(inode, map->m_lblk, path);",
          "",
          "[Added Lines]",
          "3590:   path = ext4_ext_find_extent(inode, map->m_lblk, path, 0);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4041:  trace_ext4_ext_map_blocks_enter(inode, map->m_lblk, map->m_len, flags);",
          "4045:  if (IS_ERR(path)) {",
          "4046:   err = PTR_ERR(path);",
          "4047:   path = NULL;",
          "",
          "[Removed Lines]",
          "4044:  path = ext4_ext_find_extent(inode, map->m_lblk, NULL);",
          "",
          "[Added Lines]",
          "4077:  path = ext4_ext_find_extent(inode, map->m_lblk, NULL, 0);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4760:   error = ext4_fill_fiemap_extents(inode, start_blk,",
          "4761:        len_blks, fieinfo);",
          "4762:  }",
          "4764:  return error;",
          "4765: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4796:  ext4_es_lru_add(inode);",
          "",
          "---------------"
        ],
        "fs/ext4/extents_status.c||fs/ext4/extents_status.c": [
          "File: fs/ext4/extents_status.c -> fs/ext4/extents_status.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:  unsigned short ee_len;",
          "420:  int depth, ee_status, es_status;",
          "423:  if (IS_ERR(path))",
          "424:   return;",
          "",
          "[Removed Lines]",
          "422:  path = ext4_ext_find_extent(inode, es->es_lblk, NULL);",
          "",
          "[Added Lines]",
          "422:  path = ext4_ext_find_extent(inode, es->es_lblk, NULL, EXT4_EX_NOCACHE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "683:  return err;",
          "684: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691: void ext4_es_cache_extent(struct inode *inode, ext4_lblk_t lblk,",
          "692:      ext4_lblk_t len, ext4_fsblk_t pblk,",
          "693:      unsigned int status)",
          "694: {",
          "695:  struct extent_status *es;",
          "696:  struct extent_status newes;",
          "697:  ext4_lblk_t end = lblk + len - 1;",
          "699:  newes.es_lblk = lblk;",
          "700:  newes.es_len = len;",
          "701:  ext4_es_store_pblock(&newes, pblk);",
          "702:  ext4_es_store_status(&newes, status);",
          "703:  trace_ext4_es_cache_extent(inode, &newes);",
          "705:  if (!len)",
          "706:   return;",
          "708:  BUG_ON(end < lblk);",
          "710:  write_lock(&EXT4_I(inode)->i_es_lock);",
          "712:  es = __es_tree_search(&EXT4_I(inode)->i_es_tree.root, lblk);",
          "713:  if (es && ((es->es_lblk <= lblk) || (es->es_lblk <= end)))",
          "714:   goto out;",
          "716:  __es_insert_extent(inode, &newes);",
          "717: out:",
          "718:  write_unlock(&EXT4_I(inode)->i_es_lock);",
          "719: }",
          "",
          "---------------"
        ],
        "fs/ext4/extents_status.h||fs/ext4/extents_status.h": [
          "File: fs/ext4/extents_status.h -> fs/ext4/extents_status.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: extern int ext4_es_insert_extent(struct inode *inode, ext4_lblk_t lblk,",
          "72:      ext4_lblk_t len, ext4_fsblk_t pblk,",
          "73:      unsigned int status);",
          "74: extern int ext4_es_remove_extent(struct inode *inode, ext4_lblk_t lblk,",
          "75:      ext4_lblk_t len);",
          "76: extern void ext4_es_find_delayed_extent_range(struct inode *inode,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: extern void ext4_es_cache_extent(struct inode *inode, ext4_lblk_t lblk,",
          "75:      ext4_lblk_t len, ext4_fsblk_t pblk,",
          "76:      unsigned int status);",
          "",
          "---------------"
        ],
        "fs/ext4/migrate.c||fs/ext4/migrate.c": [
          "File: fs/ext4/migrate.c -> fs/ext4/migrate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  newext.ee_block = cpu_to_le32(lb->first_block);",
          "40:  newext.ee_len   = cpu_to_le16(lb->last_block - lb->first_block + 1);",
          "41:  ext4_ext_store_pblock(&newext, lb->first_pblock);",
          "44:  if (IS_ERR(path)) {",
          "45:   retval = PTR_ERR(path);",
          "",
          "[Removed Lines]",
          "42:  path = ext4_ext_find_extent(inode, lb->first_block, NULL);",
          "",
          "[Added Lines]",
          "42:  path = ext4_ext_find_extent(inode, lb->first_block, NULL, 0);",
          "",
          "---------------"
        ],
        "fs/ext4/move_extent.c||fs/ext4/move_extent.c": [
          "File: fs/ext4/move_extent.c -> fs/ext4/move_extent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  int ret = 0;",
          "38:  struct ext4_ext_path *path;",
          "41:  if (IS_ERR(path))",
          "42:   ret = PTR_ERR(path);",
          "43:  else if (path[ext_depth(inode)].p_ext == NULL)",
          "",
          "[Removed Lines]",
          "40:  path = ext4_ext_find_extent(inode, lblock, *orig_path);",
          "",
          "[Added Lines]",
          "40:  path = ext4_ext_find_extent(inode, lblock, *orig_path, EXT4_EX_NOCACHE);",
          "",
          "---------------"
        ],
        "include/trace/events/ext4.h||include/trace/events/ext4.h": [
          "File: include/trace/events/ext4.h -> include/trace/events/ext4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2192:     (unsigned short) __entry->eh_entries)",
          "2193: );",
          "2196:  TP_PROTO(struct inode *inode, struct extent_status *es),",
          "2198:  TP_ARGS(inode, es),",
          "",
          "[Removed Lines]",
          "2195: TRACE_EVENT(ext4_es_insert_extent,",
          "",
          "[Added Lines]",
          "2195: DECLARE_EVENT_CLASS(ext4__es_extent,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2222:     __entry->pblk, show_extent_status(__entry->status))",
          "2223: );",
          "2225: TRACE_EVENT(ext4_es_remove_extent,",
          "2226:  TP_PROTO(struct inode *inode, ext4_lblk_t lblk, ext4_lblk_t len),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2225: DEFINE_EVENT(ext4__es_extent, ext4_es_insert_extent,",
          "2226:  TP_PROTO(struct inode *inode, struct extent_status *es),",
          "2228:  TP_ARGS(inode, es)",
          "2229: );",
          "2231: DEFINE_EVENT(ext4__es_extent, ext4_es_cache_extent,",
          "2232:  TP_PROTO(struct inode *inode, struct extent_status *es),",
          "2234:  TP_ARGS(inode, es)",
          "2235: );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "357b66fdc8ad4cea6e6336956a70742f961f0a4d",
      "candidate_info": {
        "commit_hash": "357b66fdc8ad4cea6e6336956a70742f961f0a4d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/357b66fdc8ad4cea6e6336956a70742f961f0a4d",
        "files": [
          "fs/ext4/extents.c"
        ],
        "message": "ext4: ext4_split_extent should take care of extent zeroout\n\nWhen ext4_split_extent_at() ends up doing zeroout & conversion to\ninitialized instead of split & conversion, ext4_split_extent() gets\nconfused and can wrongly mark the extent back as uninitialized\nresulting in end IO code getting confused from large unwritten extents\nand may result in data loss.\n\nThe example of problematic behavior is:\n\t\t\t    lblk len              lblk len\n  ext4_split_extent() (ex=[1000,30,uninit], map=[1010,10])\n    ext4_split_extent_at() (split [1000,30,uninit] at 1020)\n      ext4_ext_insert_extent() -> ENOSPC\n      ext4_ext_zeroout()\n\t -> extent [1000,30] is now initialized\n    ext4_split_extent_at() (split [1000,30,init] at 1010,\n\t\t\t     MARK_UNINIT1 | MARK_UNINIT2)\n      -> extent is split and parts marked as uninitialized\n\nFix the problem by rechecking extent type after the first\next4_split_extent_at() returns. None of split_flags can not be applied\nto initialized extent so this patch also add BUG_ON to prevent similar\nissues in future.\n\nTESTCASE: https://github.com/dmonakhov/xfstests/commit/b8a55eb5ce28c6ff29e620ab090902fcd5833597\n\nSigned-off-by: Dmitry Monakhov <dmonakhov@openvz.org>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>\nReviewed-by: Jan Kara <jack@suse.cz>",
        "before_after_code_files": [
          "fs/ext4/extents.c||fs/ext4/extents.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2943:  newblock = split - ee_block + ext4_ext_pblock(ex);",
          "2945:  BUG_ON(split < ee_block || split >= (ee_block + ee_len));",
          "2947:  err = ext4_ext_get_access(handle, inode, path + depth);",
          "2948:  if (err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2946:  BUG_ON(!ext4_ext_is_uninitialized(ex) &&",
          "2947:         split_flag & (EXT4_EXT_MAY_ZEROOUT |",
          "2948:         EXT4_EXT_MARK_UNINIT1 |",
          "2949:         EXT4_EXT_MARK_UNINIT2));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3061:   if (err)",
          "3062:    goto out;",
          "3063:  }",
          "3065:  ext4_ext_drop_refs(path);",
          "3066:  path = ext4_ext_find_extent(inode, map->m_lblk, path);",
          "3067:  if (IS_ERR(path))",
          "3068:   return PTR_ERR(path);",
          "3070:  if (map->m_lblk >= ee_block) {",
          "3074:    split_flag1 |= EXT4_EXT_MARK_UNINIT1;",
          "3077:   err = ext4_split_extent_at(handle, inode, path,",
          "3078:     map->m_lblk, split_flag1, flags);",
          "3079:   if (err)",
          "",
          "[Removed Lines]",
          "3071:   split_flag1 = split_flag & (EXT4_EXT_MAY_ZEROOUT |",
          "3072:          EXT4_EXT_DATA_VALID2);",
          "3073:   if (uninitialized)",
          "3075:   if (split_flag & EXT4_EXT_MARK_UNINIT2)",
          "3076:    split_flag1 |= EXT4_EXT_MARK_UNINIT2;",
          "",
          "[Added Lines]",
          "3076:  depth = ext_depth(inode);",
          "3077:  ex = path[depth].p_ext;",
          "3078:  uninitialized = ext4_ext_is_uninitialized(ex);",
          "3079:  split_flag1 = 0;",
          "3082:   split_flag1 = split_flag & EXT4_EXT_DATA_VALID2;",
          "3083:   if (uninitialized) {",
          "3085:    split_flag1 |= split_flag & (EXT4_EXT_MAY_ZEROOUT |",
          "3086:            EXT4_EXT_MARK_UNINIT2);",
          "3087:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cde7ad17e4f4ff8d12ff60dd09c0a291cb0b61c",
      "candidate_info": {
        "commit_hash": "8cde7ad17e4f4ff8d12ff60dd09c0a291cb0b61c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/8cde7ad17e4f4ff8d12ff60dd09c0a291cb0b61c",
        "files": [
          "fs/ext4/extents.c",
          "fs/ext4/indirect.c"
        ],
        "message": "ext4: fix big-endian bugs which could cause fs corruptions\n\nWhen an extent was zeroed out, we forgot to do convert from cpu to le16.\nIt could make us hit a BUG_ON when we try to write dirty pages out.  So\nfix it.\n\n[ Also fix a bug found by Dmitry Monakhov where we were missing\n  le32_to_cpu() calls in the new indirect punch hole code.\n\n  There are a number of other big endian warnings found by static code\n  analyzers, but we'll wait for the next merge window to fix them all\n  up.  These fixes are designed to be Obviously Correct by code\n  inspection, and easy to demonstrate that it won't make any\n  difference (and hence, won't introduce any bugs) on little endian\n  architectures such as x86.  --tytso ]\n\nSigned-off-by: Zheng Liu <wenqing.lz@taobao.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>\nReported-by: CAI Qian <caiqian@redhat.com>\nReported-by: Christian Kujau <lists@nerdbynature.de>\nCc: Dmitry Monakhov <dmonakhov@openvz.org>",
        "before_after_code_files": [
          "fs/ext4/extents.c||fs/ext4/extents.c",
          "fs/ext4/indirect.c||fs/ext4/indirect.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ],
          "candidate": [
            "fs/ext4/extents.c||fs/ext4/extents.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/ext4/extents.c||fs/ext4/extents.c": [
          "File: fs/ext4/extents.c -> fs/ext4/extents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2999:    if (split_flag & EXT4_EXT_DATA_VALID1) {",
          "3000:     err = ext4_ext_zeroout(inode, ex2);",
          "3001:     zero_ex.ee_block = ex2->ee_block;",
          "3003:     ext4_ext_store_pblock(&zero_ex,",
          "3004:             ext4_ext_pblock(ex2));",
          "3005:    } else {",
          "3006:     err = ext4_ext_zeroout(inode, ex);",
          "3007:     zero_ex.ee_block = ex->ee_block;",
          "3009:     ext4_ext_store_pblock(&zero_ex,",
          "3010:             ext4_ext_pblock(ex));",
          "3011:    }",
          "3012:   } else {",
          "3013:    err = ext4_ext_zeroout(inode, &orig_ex);",
          "3014:    zero_ex.ee_block = orig_ex.ee_block;",
          "3016:    ext4_ext_store_pblock(&zero_ex,",
          "3017:            ext4_ext_pblock(&orig_ex));",
          "3018:   }",
          "",
          "[Removed Lines]",
          "3002:     zero_ex.ee_len = ext4_ext_get_actual_len(ex2);",
          "3008:     zero_ex.ee_len = ext4_ext_get_actual_len(ex);",
          "3015:    zero_ex.ee_len = ext4_ext_get_actual_len(&orig_ex);",
          "",
          "[Added Lines]",
          "3002:     zero_ex.ee_len = cpu_to_le16(",
          "3003:       ext4_ext_get_actual_len(ex2));",
          "3009:     zero_ex.ee_len = cpu_to_le16(",
          "3010:       ext4_ext_get_actual_len(ex));",
          "3017:    zero_ex.ee_len = cpu_to_le16(",
          "3018:       ext4_ext_get_actual_len(&orig_ex));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3272:   if (err)",
          "3273:    goto out;",
          "3274:   zero_ex.ee_block = ex->ee_block;",
          "3276:   ext4_ext_store_pblock(&zero_ex, ext4_ext_pblock(ex));",
          "3278:   err = ext4_ext_get_access(handle, inode, path + depth);",
          "",
          "[Removed Lines]",
          "3275:   zero_ex.ee_len = ext4_ext_get_actual_len(ex);",
          "",
          "[Added Lines]",
          "3278:   zero_ex.ee_len = cpu_to_le16(ext4_ext_get_actual_len(ex));",
          "",
          "---------------"
        ],
        "fs/ext4/indirect.c||fs/ext4/indirect.c": [
          "File: fs/ext4/indirect.c -> fs/ext4/indirect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1539:   blk = *i_data;",
          "1540:   if (level > 0) {",
          "1541:    ext4_lblk_t first2;",
          "1543:    if (!bh) {",
          "1545:              \"Read failure\");",
          "1546:     return -EIO;",
          "1547:    }",
          "",
          "[Removed Lines]",
          "1542:    bh = sb_bread(inode->i_sb, blk);",
          "1544:     EXT4_ERROR_INODE_BLOCK(inode, blk,",
          "",
          "[Added Lines]",
          "1542:    bh = sb_bread(inode->i_sb, le32_to_cpu(blk));",
          "1544:     EXT4_ERROR_INODE_BLOCK(inode, le32_to_cpu(blk),",
          "",
          "---------------"
        ]
      }
    }
  ]
}