{
  "cve_id": "CVE-2022-1769",
  "cve_desc": "Buffer Over-read in GitHub repository vim/vim prior to 8.2.4974.",
  "repo": "vim/vim",
  "patch_hash": "4748c4bd64610cf943a431d215bb1aad51f8d0b4",
  "patch_info": {
    "commit_hash": "4748c4bd64610cf943a431d215bb1aad51f8d0b4",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/4748c4bd64610cf943a431d215bb1aad51f8d0b4",
    "files": [
      "src/scriptfile.c",
      "src/testdir/test_source.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4974: \":so\" command may read after end of buffer\n\nProblem:    \":so\" command may read after end of buffer.\nSolution:   Compute length of text properly.",
    "before_after_code_files": [
      "src/scriptfile.c||src/scriptfile.c",
      "src/testdir/test_source.vim||src/testdir/test_source.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/scriptfile.c||src/scriptfile.c": [
      "File: src/scriptfile.c -> src/scriptfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1965:   break;",
      "1966:      buf = (char_u *)ga.ga_data;",
      "1967:      buf[ga.ga_len++] = NUL;",
      "1968:  }",
      "1969:  else",
      "1970:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1968:      len = ga.ga_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1972:      if (fgets((char *)buf + ga.ga_len, ga.ga_maxlen - ga.ga_len,",
      "1973:    sp->fp) == NULL)",
      "1974:   break;",
      "1975:  }",
      "1977: #ifdef USE_CRNL",
      "",
      "[Removed Lines]",
      "1976:  len = ga.ga_len + (int)STRLEN(buf + ga.ga_len);",
      "",
      "[Added Lines]",
      "1976:      len = ga.ga_len + (int)STRLEN(buf + ga.ga_len);",
      "",
      "---------------"
    ],
    "src/testdir/test_source.vim||src/testdir/test_source.vim": [
      "File: src/testdir/test_source.vim -> src/testdir/test_source.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "652:   norm300gr0",
      "653:   so",
      "654:   bwipe!",
      "655: endfunc",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "656:   let lines =<< trim END",
      "657:       new",
      "658:       norm 10a0000000000\u00f800000000000",
      "659:       norm i0000000000000000000",
      "660:       silent! so",
      "661:   END",
      "662:   call writefile(lines, 'Xtest.vim')",
      "663:   source Xtest.vim",
      "664:   bwipe!",
      "665:   call delete('Xtest.vim')",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "747: static int included_patches[] =",
      "750:     4973,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "750:     4974,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "caa1d19da1cdfd07f93b578b4fd5214a53197cd6",
      "candidate_info": {
        "commit_hash": "caa1d19da1cdfd07f93b578b4fd5214a53197cd6",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/caa1d19da1cdfd07f93b578b4fd5214a53197cd6",
        "files": [
          "src/testdir/test_source.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0613: running source tests leaves file behind\n\nProblem:    Running source tests leaves file behind.\nSolution:   Add the \"D\" flag to writefile(). (Dominique Pell\u00e9, closes #11243)\n            Also do this for other writefile() calls and drop delete().",
        "before_after_code_files": [
          "src/testdir/test_source.vim||src/testdir/test_source.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_source.vim||src/testdir/test_source.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_source.vim||src/testdir/test_source.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_source.vim||src/testdir/test_source.vim": [
          "File: src/testdir/test_source.vim -> src/testdir/test_source.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: func Test_source_autocmd()",
          "7:   call writefile([",
          "8:  \\ 'let did_source = 1',",
          "10:   au SourcePre *source* let did_source_pre = 1",
          "11:   au SourcePost *source* let did_source_post = 1",
          "",
          "[Removed Lines]",
          "9:  \\ ], 'Xsourced')",
          "",
          "[Added Lines]",
          "9:  \\ ], 'Xsourced', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:   call assert_equal(g:did_source_pre, 1)",
          "17:   call assert_equal(g:did_source_post, 1)",
          "20:   au! SourcePre",
          "21:   au! SourcePost",
          "22:   unlet g:did_source",
          "",
          "[Removed Lines]",
          "19:   call delete('Xsourced')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: func Test_source_sandbox()",
          "44:   new",
          "46:   source! Xsourcehello | echo",
          "47:   call assert_equal('hello', getline(1))",
          "48:   call assert_fails('sandbox source! Xsourcehello', 'E48:')",
          "49:   bwipe!",
          "51: endfunc",
          "53: \" When deleting a file and immediately creating a new one the inode may be",
          "",
          "[Removed Lines]",
          "45:   call writefile([\"Ohello\\<Esc>\"], 'Xsourcehello')",
          "50:   call delete('Xsourcehello')",
          "",
          "[Added Lines]",
          "44:   call writefile([\"Ohello\\<Esc>\"], 'Xsourcehello', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: \" When sourcing a vim script, shebang should be ignored.",
          "65: func Test_source_ignore_shebang()",
          "67:   source Xsisfile.vim",
          "68:   call assert_equal(g:val, 369)",
          "70: endfunc",
          "72: \" Test for expanding <sfile> in an autocmd and for <slnum> and <sflnum>",
          "",
          "[Removed Lines]",
          "66:   call writefile(['#!./xyzabc', 'let g:val=369'], 'Xsisfile.vim')",
          "69:   call delete('Xsisfile.vim')",
          "",
          "[Added Lines]",
          "64:   call writefile(['#!./xyzabc', 'let g:val=369'], 'Xsisfile.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "82:     let g:Sflnum = expand('<sflnum>')",
          "83:     augroup! sfiletest",
          "84:   [CODE]",
          "86:   source Xscript.vim",
          "87:   call assert_equal('Xscript.vim', g:Sfile)",
          "88:   call assert_equal('7', g:Slnum)",
          "89:   call assert_equal('8', g:Sflnum)",
          "91: endfunc",
          "93: func Test_source_error()",
          "",
          "[Removed Lines]",
          "85:   call writefile(code, 'Xscript.vim')",
          "90:   call delete('Xscript.vim')",
          "",
          "[Added Lines]",
          "82:   call writefile(code, 'Xscript.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "105: \" Test for sourcing a script recursively",
          "106: func Test_nested_script()",
          "107:   CheckRunVimInTerminal",
          "109:   let buf = RunVimInTerminal('', {'rows': 6})",
          "110:   call term_wait(buf)",
          "111:   call term_sendkeys(buf, \":set noruler\\n\")",
          "112:   call term_sendkeys(buf, \":source! Xscript.vim\\n\")",
          "113:   call term_wait(buf)",
          "114:   call WaitForAssert({-> assert_match('E22: Scripts nested too deep\\s*', term_getline(buf, 6))})",
          "116:   call StopVimInTerminal(buf)",
          "117: endfunc",
          "",
          "[Removed Lines]",
          "108:   call writefile([':source! Xscript.vim', ''], 'Xscript.vim')",
          "115:   call delete('Xscript.vim')",
          "",
          "[Added Lines]",
          "104:   call writefile([':source! Xscript.vim', ''], 'Xscript.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "285:      let g:ScriptID3 = expand(\"<SID>\")",
          "286:      let g:Slnum3 = expand(\"<slnum>\")",
          "287:   END",
          "289:   source Xscript",
          "290:   call assert_true(g:ScriptID1 != g:ScriptID2)",
          "291:   call assert_equal(g:ScriptID1, g:ScriptID3)",
          "292:   call assert_equal('2', g:Slnum1)",
          "293:   call assert_equal('1', g:Slnum2)",
          "294:   call assert_equal('12', g:Slnum3)",
          "297:   \" test for sourcing a heredoc",
          "298:   %d _",
          "",
          "[Removed Lines]",
          "288:   call writefile(lines, 'Xscript')",
          "295:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "283:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "659:       norm i0000000000000000000",
          "660:       silent! so",
          "661:   END",
          "663:   source Xtest.vim",
          "664:   bwipe!",
          "666: endfunc",
          "668: func Test_source_buffer_with_NUL_char()",
          "",
          "[Removed Lines]",
          "662:   call writefile(lines, 'Xtest.vim')",
          "665:   call delete('Xtest.vim')",
          "",
          "[Added Lines]",
          "656:   call writefile(lines, 'Xtest.vim', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "675:   END",
          "676:   \" Can't have a NL in heredoc",
          "677:   let lines += [\"silent! vim9 echo [0 \\<NL> ? 'a' : 'b']\"]",
          "679:   edit XsourceNul",
          "680:   source",
          "",
          "[Removed Lines]",
          "678:   call writefile(lines, 'XsourceNul', '')",
          "",
          "[Added Lines]",
          "671:   call writefile(lines, 'XsourceNul', 'D')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     612,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     613,",
          "",
          "---------------"
        ]
      }
    }
  ]
}