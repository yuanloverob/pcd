{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0660884ea02dd51864223f7c31e0293b9bbd7429",
      "candidate_info": {
        "commit_hash": "0660884ea02dd51864223f7c31e0293b9bbd7429",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0660884ea02dd51864223f7c31e0293b9bbd7429",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "test/insert.test"
        ],
        "message": "Add missing VdbeCoverage() macro.  Fix an off-by-one error in partial index handling.  New test cases.  Ticket [c1e19e12046d23fe]\n\nFossilOrigin-Name: 41cc8e3dab998f7efc898d18837ca7fdac94ea3f89954990c5231456bf725fee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "test/insert.test||test/insert.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fbac0c65d8464b126d385262d176864add55452ec9e3d5eb76ffee06e820cb9c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1905:           if( pIdx->pPartIdxWhere ){",
          "1909:             VdbeCoverage(v);",
          "1910:           }",
          "",
          "[Removed Lines]",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx, lblRecheckOk);",
          "",
          "[Added Lines]",
          "1908:             sqlite3VdbeAddOp2(v, OP_IsNull, regIdx-1, lblRecheckOk);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1922:               sqlite3VdbeAddOp4(v, pOp->opcode, pOp->p1, p2, pOp->p3,",
          "1923:                                 pOp->p4.z, pOp->p4type);",
          "1924:               sqlite3VdbeChangeP5(v, pOp->p5);",
          "1925:             }",
          "1926:             nConflictCk--;",
          "1927:             pOp++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1925:               VdbeCoverageIf(v, p2!=pOp->p2 );",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "515:   END;",
          "516:   INSERT INTO p1 VALUES(1, 1);",
          "517:   INSERT INTO c1 VALUES(2, 1);",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "",
          "[Removed Lines]",
          "518:   REPLACE INTO p1 VALUES(3, 1);",
          "",
          "[Added Lines]",
          "518:   REPLACE INTO p1 VALUES(3, 1);2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:   REPLACE INTO t1(rowid,a,b,c) VALUES(200,1,2,3);",
          "543: } {1 {UNIQUE constraint failed: t1.c}}",
          "544: integrity_check insert-17.4",
          "547: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: do_execsql_test insert-17.5 {",
          "546:   CREATE TABLE t2(a INTEGER PRIMARY KEY, b);",
          "547:   CREATE UNIQUE INDEX t2b ON t2(b);",
          "548:   INSERT INTO t2(a,b) VALUES(1,1),(2,2),(3,3),(4,4);",
          "549:   CREATE TABLE fire(x);",
          "550:   CREATE TRIGGER t2r1 AFTER DELETE ON t2 BEGIN",
          "551:     INSERT INTO fire VALUES(old.a);",
          "552:   END;",
          "553:   UPDATE OR REPLACE t2 SET a=4, b=3 WHERE a=1;",
          "554:   SELECT *, 'x' FROM t2 ORDER BY a;",
          "555: } {2 2 x 4 3 x}",
          "556: do_execsql_test insert-17.6 {",
          "557:   SELECT x FROM fire ORDER BY x;",
          "558: } {3 4}",
          "559: do_execsql_test insert-17.7 {",
          "560:   DELETE FROM t2;",
          "561:   DELETE FROM fire;",
          "562:   INSERT INTO t2(a,b) VALUES(1,1),(2,2),(3,3),(4,4);",
          "563:   UPDATE OR REPLACE t2 SET a=1, b=3 WHERE a=1;",
          "564:   SELECT *, 'x' FROM t2 ORDER BY a;",
          "565: } {1 3 x 2 2 x 4 4 x}",
          "566: do_execsql_test insert-17.8 {",
          "567:   SELECT x FROM fire ORDER BY x;",
          "568: } {3}",
          "569: do_execsql_test insert-17.10 {",
          "570:   CREATE TABLE t3(a INTEGER PRIMARY KEY, b INT, c INT, d INT);",
          "571:   CREATE UNIQUE INDEX t3bpi ON t3(b) WHERE c<=d;",
          "572:   CREATE UNIQUE INDEX t3d ON t3(d);",
          "573:   INSERT INTO t3(a,b,c,d) VALUES(1,1,1,1),(2,1,3,2),(3,4,5,6);",
          "574:   CREATE TRIGGER t3r1 AFTER DELETE ON t3 BEGIN",
          "575:     SELECT 'hi';",
          "576:   END;",
          "577:   REPLACE INTO t3(a,b,c,d) VALUES(4,4,8,9);",
          "578: } {}",
          "579: do_execsql_test insert-17.11 {",
          "580:   SELECT *, 'x' FROM t3 ORDER BY a;",
          "581: } {1 1 1 1 x 2 1 3 2 x 4 4 8 9 x}",
          "582: do_execsql_test insert-17.12 {",
          "583:   REPLACE INTO t3(a,b,c,d) VALUES(5,1,11,2);",
          "584:   SELECT *, 'x' FROM t3 ORDER BY a;",
          "585: } {1 1 1 1 x 4 4 8 9 x 5 1 11 2 x}",
          "587: do_execsql_test insert-17.13 {",
          "588:   DELETE FROM t3;",
          "589:   INSERT INTO t3(a,b,c,d) VALUES(1,1,1,1),(2,1,3,2),(3,4,5,6);",
          "590:   DROP TRIGGER t3r1;",
          "591:   CREATE TRIGGER t3r1 AFTER DELETE ON t3 BEGIN",
          "592:     INSERT INTO t3(b,c,d) VALUES(old.b,old.c,old.d);",
          "593:   END;",
          "594: } {}",
          "595: do_catchsql_test insert-17.14 {",
          "596:   REPLACE INTO t3(a,b,c,d) VALUES(4,4,8,9);",
          "597: } {1 {UNIQUE constraint failed: t3.b}}",
          "598: do_catchsql_test insert-17.15 {",
          "599:   REPLACE INTO t3(a,b,c,d) VALUES(5,1,11,2);",
          "600: } {1 {UNIQUE constraint failed: t3.d}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
      "candidate_info": {
        "commit_hash": "490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/490e6f2506a1ebd37c2acdddcd2484d7b59d8071",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a stack overflow that could occur when renaming a table that has a trigger containing a window function invocation that itself contains a specific syntax error.\n\nFossilOrigin-Name: c621fc668c6538f9f5bdac204f012c64998679a61aa8e224d212503820224c09",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 50fe48458942fa7a6bcc76316c6321f95b23dc34f2f8e0a483826483b2fb16f6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "866: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "867:         if( pExpr->y.pWin ){",
          "868:           Select *pSel = pNC->pWinSelect;",
          "870:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pPartition);",
          "871:           sqlite3WalkExprList(pWalker, pExpr->y.pWin->pOrderBy);",
          "872:           sqlite3WalkExpr(pWalker, pExpr->y.pWin->pFilter);",
          "",
          "[Removed Lines]",
          "869:           sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Added Lines]",
          "869:           if( IN_RENAME_OBJECT==0 ){",
          "870:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "871:           }",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   ALTER TABLE Table0 RENAME Col0 TO Col0;",
          "143: }",
          "145: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: #-------------------------------------------------------------------------",
          "146: reset_db",
          "147: do_execsql_test 7.1.0 {",
          "148:   CREATE TABLE t1(a,b,c);",
          "149:   CREATE TRIGGER AFTER INSERT ON t1 BEGIN",
          "150:     SELECT a, rank() OVER w1 FROM t1",
          "151:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1);",
          "152:   END;",
          "153: }",
          "155: do_execsql_test 7.1.2 {",
          "156:   ALTER TABLE t1 RENAME TO t1x;",
          "157:   SELECT sql FROM sqlite_master;",
          "158: } {",
          "159:   {CREATE TABLE \"t1x\"(a,b,c)}",
          "160:   {CREATE TRIGGER AFTER INSERT ON \"t1x\" BEGIN",
          "161:     SELECT a, rank() OVER w1 FROM \"t1x\"",
          "162:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1);",
          "163:   END}",
          "164: }",
          "166: do_execsql_test 7.2.1 {",
          "167:   DROP TRIGGER after;",
          "168:   CREATE TRIGGER AFTER INSERT ON t1x BEGIN",
          "169:     SELECT a, rank() OVER w1 FROM t1x",
          "170:     WINDOW w1 AS (PARTITION BY b, percent_rank() OVER w1 ORDER BY d);",
          "171:   END;",
          "172: }",
          "174: do_catchsql_test 7.2.2 {",
          "175:   ALTER TABLE t1x RENAME TO t1;",
          "176: } {1 {error in trigger AFTER: no such column: d}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
      "candidate_info": {
        "commit_hash": "0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f28e1bdd93e443292fafb3527a594372b40a7c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Remove a NEVER() comparison from sqlite3ExprCompare().\n\nFossilOrigin-Name: f4285297e1e7ebef90bfc0f71402a4e1726d31bc15b69fec13a1f0d98fed1f08",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1e1ba9145049491c593ac70d9e05149662d34770129c270d702f284cd19a481",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5030:     ){",
          "5031:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op2!=pB->op2 ) return 2;",
          "5036:     }",
          "5037:   }",
          "5038:   return 0;",
          "",
          "[Removed Lines]",
          "5033:       if( pA->op!=TK_IN",
          "5034:        && pA->iTable!=pB->iTable",
          "5035:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "",
          "[Added Lines]",
          "5033:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5034:         return 2;",
          "5035:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7678fdc33d312ef08b5edaee5bb4c84d123a79df",
      "candidate_info": {
        "commit_hash": "7678fdc33d312ef08b5edaee5bb4c84d123a79df",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7678fdc33d312ef08b5edaee5bb4c84d123a79df",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3atoken.test"
        ],
        "message": "Change the fts3_tokenizer() function to always return the pointer as a BLOB as long as the first argument is a bound parameter, regardless of the SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER setting.\n\nFossilOrigin-Name: 27160df7b3a04ac59d06013ede1d2ee27a4ace86a525ecc333bf7f8b5c580afb",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:       return;",
          "107:     }",
          "108:   }",
          "110:     sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "111:   }",
          "112: }",
          "",
          "[Removed Lines]",
          "109:   if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "109:   if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[0]) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ab76e3a90e56bd36a17ded9c7a77e88632ca12d3bd73f197df747a634c81e0cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: } {{There was movement at the station}}",
          "90: set simple [db one {SELECT fts3_tokenizer('simple')}]",
          "91: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 0",
          "92: do_catchsql_test 1.6 {",
          "",
          "[Removed Lines]",
          "89: unset -nocomplain simple",
          "",
          "[Added Lines]",
          "89: unset -nocomplain simple blah2name simplename",
          "90: set simplename \"simple\"",
          "91: set blah2name \"blah2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     SELECT fts3_tokenizer('blah2', $simple) IS NULL;",
          "98:   }",
          "99: } {1}",
          "101: do_test fts3atoken-1.8 {",
          "102:   execsql {",
          "104:   }",
          "109: #--------------------------------------------------------------------------",
          "110: # Test cases fts3atoken-2.* test error cases in the scalar function based",
          "",
          "[Removed Lines]",
          "100: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "103:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple');",
          "105: } {1}",
          "",
          "[Added Lines]",
          "103: # With ENABLE_FTS3_TOKENIZER off, the fts3_tokenzer(1) function",
          "104: # returns NULL unless the first parameter is a bound parameter.",
          "105: # If the first parameter is a bound parameter, then fts3_tokenizer(1)",
          "106: # returns the actual pointer value as a BLOB.",
          "107: #",
          "110:     SELECT fts3_tokenizer($blah2name) == fts3_tokenizer($simplename),",
          "111:            typeof(fts3_tokenizer($blah2name)),",
          "112:            typeof(fts3_tokenizer('blah2')),",
          "113:            typeof(fts3_tokenizer($simplename)),",
          "114:            typeof(fts3_tokenizer('simple'));",
          "116: } {1 blob null blob null}",
          "118: # With ENABLE_FTS3_TOKENIZER on, fts3_tokenizer() always returns",
          "119: # the BLOB pointer, regardless the parameter",
          "120: #",
          "121: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "122: do_test fts3atoken-1.9 {",
          "123:   execsql {",
          "124:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple'),",
          "125:            typeof(fts3_tokenizer($blah2name)),",
          "126:            typeof(fts3_tokenizer('blah2')),",
          "127:            typeof(fts3_tokenizer($simplename)),",
          "128:            typeof(fts3_tokenizer('simple'));",
          "129:   }",
          "130: } {1 blob blob blob blob}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13d04020775b10b252029455d2b8dcfcf49a47e4",
      "candidate_info": {
        "commit_hash": "13d04020775b10b252029455d2b8dcfcf49a47e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13d04020775b10b252029455d2b8dcfcf49a47e4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/cast.test"
        ],
        "message": "As a special case, casting '-0.0' into numeric should yield 0. Fix for ticket [674385aeba91c774].\n\nFossilOrigin-Name: 491f0f9bbddb6302536d99abd1ea481fd747ddcf6c6eaaacc0338d147b119081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/cast.test||test/cast.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c6146b56a75a94f4baa10e95407c54dd0b9314a57a8702a4b96b15c4d7ac48c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){",
          "701:   double r2 = (double)i;",
          "704: }",
          "",
          "[Removed Lines]",
          "702:   return memcmp(&r1, &r2, sizeof(r1))==0",
          "703:       && i >= -2251799813685248 && i < 2251799813685248;",
          "",
          "[Added Lines]",
          "704:   return r1==0.0",
          "705:       || (memcmp(&r1, &r2, sizeof(r1))==0",
          "706:           && i >= -2251799813685248 && i < 2251799813685248);",
          "",
          "---------------"
        ],
        "test/cast.test||test/cast.test": [
          "File: test/cast.test -> test/cast.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   execsql {SELECT CAST('123.5abc' AS integer)}",
          "184: } 123",
          "187:   execsql {SELECT CAST(null AS REAL)}",
          "188: } {{}}",
          "190:   execsql {SELECT typeof(CAST(null AS REAL))}",
          "191: } {null}",
          "193:   execsql {SELECT CAST(1 AS REAL)}",
          "194: } {1.0}",
          "196:   execsql {SELECT typeof(CAST(1 AS REAL))}",
          "197: } {real}",
          "199:   execsql {SELECT CAST('1' AS REAL)}",
          "200: } {1.0}",
          "202:   execsql {SELECT typeof(CAST('1' AS REAL))}",
          "203: } {real}",
          "205:   execsql {SELECT CAST('abc' AS REAL)}",
          "206: } {0.0}",
          "208:   execsql {SELECT typeof(CAST('abc' AS REAL))}",
          "209: } {real}",
          "211:   execsql {SELECT CAST(x'31' AS REAL)}",
          "212: } {1.0}",
          "214:   execsql {SELECT typeof(CAST(x'31' AS REAL))}",
          "215: } {real}",
          "",
          "[Removed Lines]",
          "186: do_test case-1.60 {",
          "189: do_test case-1.61 {",
          "192: do_test case-1.62 {",
          "195: do_test case-1.63 {",
          "198: do_test case-1.64 {",
          "201: do_test case-1.65 {",
          "204: do_test case-1.66 {",
          "207: do_test case-1.67 {",
          "210: do_test case-1.68 {",
          "213: do_test case-1.69 {",
          "",
          "[Added Lines]",
          "186: do_test cast-1.60 {",
          "189: do_test cast-1.61 {",
          "192: do_test cast-1.62 {",
          "195: do_test cast-1.63 {",
          "198: do_test cast-1.64 {",
          "201: do_test cast-1.65 {",
          "204: do_test cast-1.66 {",
          "207: do_test cast-1.67 {",
          "210: do_test cast-1.68 {",
          "213: do_test cast-1.69 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:     } 9223372036854774784",
          "300:   }",
          "301: }",
          "303:   execsql {SELECT CAST(NULL AS numeric)}",
          "304: } {{}}",
          "",
          "[Removed Lines]",
          "302: do_test case-3.31 {",
          "",
          "[Added Lines]",
          "302: do_test cast-3.31 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368: # ignored because it is no part of the integer prefix.",
          "369: # EVIDENCE-OF: R-24225-46995 For example, \"(CAST '123e+5' AS INTEGER)\"",
          "370: # results in 123, not in 12300000.",
          "372:   SELECT CAST('123e+5' AS INTEGER);",
          "373:   SELECT CAST('123e+5' AS NUMERIC);",
          "374:   SELECT CAST('123e+5' AS REAL);",
          "",
          "[Removed Lines]",
          "371: do_execsql_test case-5.3 {",
          "",
          "[Added Lines]",
          "371: do_execsql_test cast-5.3 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378: # The following does not have anything to do with the CAST operator,",
          "379: # but it does deal with affinity transformations.",
          "380: #",
          "382:   DROP TABLE IF EXISTS t1;",
          "383:   CREATE TABLE t1(a NUMERIC);",
          "384:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "381: do_execsql_test case-6.1 {",
          "",
          "[Added Lines]",
          "381: do_execsql_test cast-6.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "392: # 2019-06-07",
          "393: # https://www.sqlite.org/src/info/4c2d7639f076aa7c",
          "395:   SELECT CAST('-' AS NUMERIC);",
          "396: } {0}",
          "398:   SELECT CAST('-0' AS NUMERIC);",
          "399: } {0}",
          "401:   SELECT CAST('+' AS NUMERIC);",
          "402: } {0}",
          "404:   SELECT CAST('/' AS NUMERIC);",
          "405: } {0}",
          "407: # 2019-06-07",
          "408: # https://www.sqlite.org/src/info/e8bedb2a184001bb",
          "410:   SELECT '' - 2851427734582196970;",
          "411: } {-2851427734582196970}",
          "413:   SELECT 0 - 2851427734582196970;",
          "414: } {-2851427734582196970}",
          "416:   SELECT '' - 1;",
          "417: } {-1}",
          "",
          "[Removed Lines]",
          "394: do_execsql_test case-7.1 {",
          "397: do_execsql_test case-7.2 {",
          "400: do_execsql_test case-7.3 {",
          "403: do_execsql_test case-7.4 {",
          "409: do_execsql_test case-7.10 {",
          "412: do_execsql_test case-7.11 {",
          "415: do_execsql_test case-7.12 {",
          "",
          "[Added Lines]",
          "394: do_execsql_test cast-7.1 {",
          "397: do_execsql_test cast-7.2 {",
          "400: do_execsql_test cast-7.3 {",
          "403: do_execsql_test cast-7.4 {",
          "409: do_execsql_test cast-7.10 {",
          "412: do_execsql_test cast-7.11 {",
          "415: do_execsql_test cast-7.12 {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "447:   SELECT -CAST('.' AS numeric);",
          "448: } 0",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450: # 2019-06-12",
          "451: # https://www.sqlite.org/src/info/674385aeba91c774",
          "452: #",
          "453: do_execsql_test cast-7.40 {",
          "454:   SELECT CAST('-0.0' AS numeric);",
          "455: } 0",
          "456: do_execsql_test cast-7.41 {",
          "457:   SELECT CAST('0.0' AS numeric);",
          "458: } 0",
          "459: do_execsql_test cast-7.42 {",
          "460:   SELECT CAST('+0.0' AS numeric);",
          "461: } 0",
          "462: do_execsql_test cast-7.43 {",
          "463:   SELECT CAST('-1.0' AS numeric);",
          "464: } -1",
          "",
          "---------------"
        ]
      }
    }
  ]
}