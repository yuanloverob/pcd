{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c51cf8642f867050c8cb9e330582605dabeff76c",
      "candidate_info": {
        "commit_hash": "c51cf8642f867050c8cb9e330582605dabeff76c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c51cf8642f867050c8cb9e330582605dabeff76c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "A new implementation for the sqlite3ExprImpliesExpr() theorem prover that does a better job of answering TRUE to \"(NOT A) OR B\" when B is a NOT NULL expression.\n\nFossilOrigin-Name: b3413197f57711f04102d8cc6ff1e8ddbe0f5f2bcb6e1989cf314fa97f0ff7f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b24303220b7b4f59520176a0150fc619c668865450b4fdaa9ce4113a56e9687",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4908:              iTab);",
          "4909: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4914: static int exprImpliesNotNull(",
          "4920: ){",
          "4921:   assert( p );",
          "4922:   assert( pNN );",
          "4923:   if( sqlite3ExprCompare(pParse, p, pNN, iTab)==0 ) return 1;",
          "4924:   switch( p->op ){",
          "4925:     case TK_IN: {",
          "4926:       if( seenNot && ExprHasProperty(p, EP_xIsSelect) ) return 0;",
          "4927:       assert( ExprHasProperty(p,EP_xIsSelect)",
          "4928:            || (p->x.pList!=0 && p->x.pList->nExpr>0) );",
          "4929:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "4930:     }",
          "4931:     case TK_BETWEEN: {",
          "4932:       ExprList *pList = p->x.pList;",
          "4933:       assert( pList!=0 );",
          "4934:       assert( pList->nExpr==2 );",
          "4935:       if( seenNot ) return 0;",
          "4936:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, seenNot)",
          "4937:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, seenNot)",
          "4938:       ){",
          "4939:         return 1;",
          "4940:       }",
          "4941:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "4942:     }",
          "4943:     case TK_EQ:",
          "4944:     case TK_NE:",
          "4945:     case TK_LT:",
          "4946:     case TK_LE:",
          "4947:     case TK_GT:",
          "4948:     case TK_GE:",
          "4949:     case TK_PLUS:",
          "4950:     case TK_MINUS:",
          "4951:     case TK_STAR:",
          "4952:     case TK_REM:",
          "4953:     case TK_BITAND:",
          "4954:     case TK_BITOR:",
          "4955:     case TK_SLASH:",
          "4956:     case TK_LSHIFT:",
          "4957:     case TK_RSHIFT:",
          "4958:     case TK_CONCAT: {",
          "4959:       if( exprImpliesNotNull(pParse, p->pRight, pNN, iTab, seenNot) ) return 1;",
          "4961:     }",
          "4962:     case TK_SPAN:",
          "4963:     case TK_COLLATE:",
          "4964:     case TK_BITNOT:",
          "4965:     case TK_UPLUS:",
          "4966:     case TK_UMINUS: {",
          "4967:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "4968:     }",
          "4969:     case TK_TRUTH: {",
          "4970:       if( seenNot ) return 0;",
          "4971:       if( p->op2!=TK_IS ) return 0;",
          "4972:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "4973:     }",
          "4974:     case TK_NOT: {",
          "4975:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "4976:     }",
          "4977:   }",
          "4978:   return 0;",
          "4979: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4944:     return 1;",
          "4945:   }",
          "4946:   if( pE2->op==TK_NOTNULL",
          "4952:   ){",
          "4956:   }",
          "4957:   return 0;",
          "4958: }",
          "",
          "[Removed Lines]",
          "4947:    && pE1->op!=TK_ISNULL",
          "4948:    && pE1->op!=TK_IS",
          "4949:    && pE1->op!=TK_ISNOT",
          "4950:    && pE1->op!=TK_OR",
          "4951:    && pE1->op!=TK_CASE",
          "4953:     Expr *pX = sqlite3ExprSkipCollate(pE1->pLeft);",
          "4954:     testcase( pX!=pE1->pLeft );",
          "4955:     if( sqlite3ExprCompare(pParse, pX, pE2->pLeft, iTab)==0 ) return 1;",
          "",
          "[Added Lines]",
          "5017:    && exprImpliesNotNull(pParse, pE1, pE2->pLeft, iTab, 0)",
          "5019:     return 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
      "candidate_info": {
        "commit_hash": "b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a bug preventing .recover from working on databases where the final page of the db is corrupt.\n\nFossilOrigin-Name: 959bbd11e92cc789973daf20dfcb8a6d8dc724dd603b286cbdd59e5d1fdb2909",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a50768314d10d743a0cc013b434b516f0763e0a6c5b79655d8fefde7de53e869",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6373:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "6372: static int recoverDatabaseCmd(ShellState *pState){",
          "",
          "[Added Lines]",
          "6372: static int recoverDatabaseCmd(ShellState *pState, int nArg, char **azArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6408:     \"WITH pages(i, maxlen) AS (\"",
          "6411:     \"    UNION ALL\"",
          "6412:     \"  SELECT i-1, (\"",
          "6413:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=i-1\"",
          "",
          "[Removed Lines]",
          "6409:     \"  SELECT page_count, max(field+1) \"",
          "6410:     \"      FROM pragma_page_count, sqlite_dbdata WHERE pgno=page_count\"",
          "",
          "[Added Lines]",
          "6409:     \"  SELECT page_count, (\"",
          "6410:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=page_count\"",
          "6411:     \"  ) FROM pragma_page_count\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6832:   if( c=='r' && strncmp(azArg[0], \"recover\", n)==0 ){",
          "6833:     open_db(p, 0);",
          "6835:   }else",
          "6837:   if( c=='d' && strncmp(azArg[0], \"dump\", n)==0 ){",
          "",
          "[Removed Lines]",
          "6834:     rc = recoverDatabaseCmd(p);",
          "",
          "[Added Lines]",
          "6835:     rc = recoverDatabaseCmd(p, nArg, azArg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "192418bd499cb1dbd358142cbeb6b2295ec8f060",
      "candidate_info": {
        "commit_hash": "192418bd499cb1dbd358142cbeb6b2295ec8f060",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/192418bd499cb1dbd358142cbeb6b2295ec8f060",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "test/minmax4.test"
        ],
        "message": "Fix a problem with queries of the form \"SELECT min(<expr>) ... WHERE <expr>=?\" where there is an index on <expr>. Fix for [71e183ca].\n\nFossilOrigin-Name: d465c3eef458c851d97eea6e4117247d9c69386b276168080dbff7bb64070c93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/minmax4.test||test/minmax4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fd598e475d353363e19adc27a671170f11ae9f6d8cad58cb2303fb2ad8ac6bec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3862:             distinctColumns = 1;",
          "3863:           }",
          "3864:           obSat |= MASKBIT(i);",
          "3865:         }else{",
          "3867:           if( j==0 || j<nKeyCol ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3865:           if( (wctrlFlags & WHERE_ORDERBY_MIN) && j==pLoop->u.btree.nEq ){",
          "3866:             pLoop->wsFlags |= WHERE_MIN_ORDERED;",
          "3867:           }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1567:          || (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0 );",
          "1572:       assert( pLoop->nSkip==0 );",
          "1573:       bSeekPastNull = 1;",
          "1574:       nExtraReg = 1;",
          "",
          "[Removed Lines]",
          "1565:     assert( pWInfo->pOrderBy==0",
          "1566:          || pWInfo->pOrderBy->nExpr==1",
          "1568:     if( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0",
          "1569:      && pWInfo->nOBSat>0",
          "1570:      && (pIdx->nKeyCol>nEq)",
          "1571:     ){",
          "",
          "[Added Lines]",
          "1565:     assert( (pWInfo->pOrderBy!=0 && pWInfo->pOrderBy->nExpr==1)",
          "1567:     if( pLoop->wsFlags & WHERE_MIN_ORDERED ){",
          "1568:       assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN) );",
          "1569:       assert( pWInfo->nOBSat );",
          "1570:       assert( pIdx->nColumn>nEq );",
          "",
          "---------------"
        ],
        "test/minmax4.test||test/minmax4.test": [
          "File: test/minmax4.test -> test/minmax4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   } {2 2}",
          "179: }",
          "181: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: #-------------------------------------------------------------------------",
          "182: reset_db",
          "183: do_execsql_test 4.0 {",
          "184:   CREATE TABLE t0 (c0, c1);",
          "185:   CREATE INDEX i0 ON t0(c1, c1 + 1 DESC);",
          "186:   INSERT INTO t0(c0) VALUES (1);",
          "187: }",
          "188: do_execsql_test 4.1 {",
          "189:   SELECT MIN(t0.c1), t0.c0 FROM t0 WHERE t0.c1 ISNULL;",
          "190: } {{} 1}",
          "192: #-------------------------------------------------------------------------",
          "193: reset_db",
          "194: do_execsql_test 5.0 {",
          "195:   CREATE TABLE t1 (a, b);",
          "196:   INSERT INTO t1 VALUES(123, NULL);",
          "197:   CREATE INDEX i1 ON t1(a, b DESC);",
          "198: }",
          "199: do_execsql_test 5.1 {",
          "200:   SELECT MIN(a) FROM t1 WHERE a=123;",
          "201: } {123}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ba7ab0d2524748479376e70043be9fc4cfbeccc",
      "candidate_info": {
        "commit_hash": "6ba7ab0d2524748479376e70043be9fc4cfbeccc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ba7ab0d2524748479376e70043be9fc4cfbeccc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/walker.c",
          "src/window.c",
          "test/filter1.test",
          "test/filter2.tcl",
          "test/filter2.test"
        ],
        "message": "Experimental implementation of FILTER clause for aggregate functions.\n\nFossilOrigin-Name: 1f1ae2d6ac8dcbb62e5aa3dc17bc67d559cb565fc0d0a8c00a596075d35f8130",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/walker.c||src/walker.c",
          "src/window.c||src/window.c",
          "test/filter1.test||test/filter1.test",
          "test/filter2.tcl||test/filter2.tcl",
          "test/filter2.test||test/filter2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eab4297577e4d325fed4757867fc77860de7448998d86f098c8a50272e17d35e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1028:   assert( !ExprHasProperty(p, EP_WinFunc) || p->y.pWin!=0 || db->mallocFailed );",
          "1029:   assert( p->op!=TK_FUNCTION || ExprHasProperty(p, EP_TokenOnly|EP_Reduced)",
          "1031: #ifdef SQLITE_DEBUG",
          "1032:   if( ExprHasProperty(p, EP_Leaf) && !ExprHasProperty(p, EP_TokenOnly) ){",
          "1033:     assert( p->pLeft==0 );",
          "",
          "[Removed Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1030:           || p->y.pWin==0 || ExprHasProperty(p, EP_WinFunc|EP_Filter) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1046:     }else{",
          "1047:       sqlite3ExprListDelete(db, p->x.pList);",
          "1048:     }",
          "1049:     if( ExprHasProperty(p, EP_WinFunc) ){",
          "1051:       sqlite3WindowDelete(db, p->y.pWin);",
          "1052:     }",
          "1053:   }",
          "1054:   if( ExprHasProperty(p, EP_MemToken) ) sqlite3DbFree(db, p->u.zToken);",
          "1055:   if( !ExprHasProperty(p, EP_Static) ){",
          "",
          "[Removed Lines]",
          "1050:       assert( p->op==TK_FUNCTION );",
          "",
          "[Added Lines]",
          "1049: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1051:       assert( p->op==TK_FUNCTION && !ExprHasProperty(p, EP_Filter) );",
          "1053:     }else if( ExprHasProperty(p, EP_Filter) ){",
          "1054:       assert( p->op==TK_FUNCTION || p->op==TK_AGG_FUNCTION );",
          "1055:       sqlite3ExprDelete(db, p->y.pFilter);",
          "1057: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1264:     }",
          "1268:       zAlloc += dupedExprNodeSize(p, dupFlags);",
          "1269:       if( !ExprHasProperty(pNew, EP_TokenOnly|EP_Leaf) ){",
          "1270:         pNew->pLeft = p->pLeft ?",
          "",
          "[Removed Lines]",
          "1267:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc) ){",
          "",
          "[Added Lines]",
          "1272:     if( ExprHasProperty(pNew, EP_Reduced|EP_TokenOnly|EP_WinFunc|EP_Filter) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1277:         pNew->y.pWin = sqlite3WindowDup(db, pNew, p->y.pWin);",
          "1278:         assert( ExprHasProperty(pNew, EP_WinFunc) );",
          "1279:       }",
          "1281:       if( pzBuffer ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1285:       if( ExprHasProperty(p, EP_Filter) ){",
          "1286:         pNew->y.pFilter = sqlite3ExprDup(db, p->y.pFilter, 0);",
          "1287:         assert( ExprHasProperty(pNew, EP_Filter) );",
          "1288:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1334: static int gatherSelectWindowsCallback(Walker *pWalker, Expr *pExpr){",
          "1337:     pExpr->y.pWin->pNextWin = pWalker->u.pSelect->pWin;",
          "1338:     pWalker->u.pSelect->pWin = pExpr->y.pWin;",
          "1339:   }",
          "",
          "[Removed Lines]",
          "1335:   if( pExpr->op==TK_FUNCTION && pExpr->y.pWin!=0 ){",
          "1336:     assert( ExprHasProperty(pExpr, EP_WinFunc) );",
          "",
          "[Added Lines]",
          "1344:   if( pExpr->op==TK_FUNCTION && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1345:     assert( pExpr->y.pWin );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4862:     }else if( ALWAYS(pB->u.zToken!=0) && strcmp(pA->u.zToken,pB->u.zToken)!=0 ){",
          "4863:       return 2;",
          "4864:     }",
          "4865:   }",
          "4866:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "4867:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4874: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "4875:     else if( pA->op==TK_AGG_FUNCTION ){",
          "4876:       assert( ExprHasProperty(pA, EP_WinFunc)==0 );",
          "4877:       if( sqlite3ExprCompare(pParse, pA->y.pFilter, pB->y.pFilter, iTab) ){",
          "4878:         return 2;",
          "4879:       }",
          "4880:     }",
          "4881: #endif",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1036: %endif  SQLITE_OMIT_CAST",
          "1039: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP. {",
          "1040:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1041: }",
          "1042: expr(A) ::= id(X) LP STAR RP. {",
          "1043:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1044: }",
          "1046: %ifndef SQLITE_OMIT_WINDOWFUNC",
          "1048:   A = sqlite3ExprFunction(pParse, Y, &X, D);",
          "1050: }",
          "1052:   A = sqlite3ExprFunction(pParse, 0, &X, 0);",
          "1054: }",
          "1055: %endif",
          "",
          "[Removed Lines]",
          "1047: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP over_clause(Z). {",
          "1049:   sqlite3WindowAttach(pParse, A, Z);",
          "1051: expr(A) ::= id(X) LP STAR RP over_clause(Z). {",
          "1053:   sqlite3WindowAttach(pParse, A, Z);",
          "",
          "[Added Lines]",
          "1039: %ifdef SQLITE_OMIT_WINDOWFUNC",
          "1046: %endif",
          "1049: expr(A) ::= id(X) LP distinct(D) exprlist(Y) RP filter_opt(F) over_opt(Z). {",
          "1051:   sqlite3WindowAttach(pParse, A, F, Z);",
          "1053: expr(A) ::= id(X) LP STAR RP filter_opt(F) over_opt(Z). {",
          "1055:   sqlite3WindowAttach(pParse, A, F, Z);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1724: %destructor window_clause {sqlite3WindowListDelete(pParse->db, $$);}",
          "1725: window_clause(A) ::= WINDOW windowdefn_list(B). { A = B; }",
          "1730:   A = Z;",
          "1731:   assert( A!=0 );",
          "1733: }",
          "1735:   A = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));",
          "1736:   if( A ){",
          "1737:     A->zName = sqlite3DbStrNDup(pParse->db, Z.z, Z.n);",
          "1741:   }",
          "1742: }",
          "",
          "[Removed Lines]",
          "1727: %type over_clause {Window*}",
          "1728: %destructor over_clause {sqlite3WindowDelete(pParse->db, $$);}",
          "1729: over_clause(A) ::= filter_opt(W) OVER LP window(Z) RP. {",
          "1732:   A->pFilter = W;",
          "1734: over_clause(A) ::= filter_opt(W) OVER nm(Z). {",
          "1738:     A->pFilter = W;",
          "1739:   }else{",
          "1740:     sqlite3ExprDelete(pParse->db, W);",
          "",
          "[Added Lines]",
          "1729: %type over_opt {Window*}",
          "1730: %destructor over_opt {sqlite3WindowDelete(pParse->db, $$);}",
          "1731: over_opt(A) ::= . { A=0; }",
          "1732: over_opt(A) ::= OVER LP window(Z) RP. {",
          "1736: over_opt(A) ::= OVER nm(Z). {",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "849:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "850:           pNC->nErr++;",
          "851:           is_agg = 0;",
          "852:         }",
          "853: #else",
          "854:         if( (is_agg && (pNC->ncFlags & NC_AllowAgg)==0) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "852:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_Filter) ){",
          "853:           sqlite3ErrorMsg(pParse,",
          "854:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "855:               nId, zId",
          "856:           );",
          "857:           pNC->nErr++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "883:       sqlite3WalkExprList(pWalker, pList);",
          "884:       if( is_agg ){",
          "885: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "887:           Select *pSel = pNC->pWinSelect;",
          "888:           if( IN_RENAME_OBJECT==0 ){",
          "889:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pExpr->y.pWin, pDef);",
          "",
          "[Removed Lines]",
          "886:         if( pExpr->y.pWin ){",
          "",
          "[Added Lines]",
          "892:         if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "904:           NameContext *pNC2 = pNC;",
          "905:           pExpr->op = TK_AGG_FUNCTION;",
          "906:           pExpr->op2 = 0;",
          "907:           while( pNC2 && !sqlite3FunctionUsesThisSrc(pExpr, pNC2->pSrcList) ){",
          "908:             pExpr->op2++;",
          "909:             pNC2 = pNC2->pNext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "913: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "914:           sqlite3WalkExpr(pWalker, pExpr->y.pFilter);",
          "915: #endif",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4407:   assert( *ppMinMax==0 );",
          "4408:   assert( pFunc->op==TK_AGG_FUNCTION );",
          "4410:   zFunc = pFunc->u.zToken;",
          "4411:   if( sqlite3StrICmp(zFunc, \"min\")==0 ){",
          "4412:     eRet = WHERE_ORDERBY_MIN;",
          "",
          "[Removed Lines]",
          "4409:   if( pEList==0 || pEList->nExpr!=1 ) return eRet;",
          "",
          "[Added Lines]",
          "4409:   if( pEList==0 || pEList->nExpr!=1 || ExprHasProperty(pFunc, EP_Filter) ){",
          "4410:     return eRet;",
          "4411:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4453:   if( pExpr->op!=TK_AGG_FUNCTION ) return 0;",
          "4454:   if( NEVER(pAggInfo->nFunc==0) ) return 0;",
          "4455:   if( (pAggInfo->aFunc[0].pFunc->funcFlags&SQLITE_FUNC_COUNT)==0 ) return 0;",
          "4458:   return pTab;",
          "4459: }",
          "",
          "[Removed Lines]",
          "4456:   if( pExpr->flags&EP_Distinct ) return 0;",
          "",
          "[Added Lines]",
          "4458:   if( ExprHasProperty(pExpr, EP_Distinct|EP_Filter) ) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5333:     int regAgg;",
          "5334:     ExprList *pList = pF->pExpr->x.pList;",
          "5335:     assert( !ExprHasProperty(pF->pExpr, EP_xIsSelect) );",
          "5336:     if( pList ){",
          "5337:       nArg = pList->nExpr;",
          "5338:       regAgg = sqlite3GetTempRange(pParse, nArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5338:     if( ExprHasProperty(pF->pExpr, EP_Filter) ){",
          "5339:       Expr *pFilter = pF->pExpr->y.pFilter;",
          "5340:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5341:       sqlite3ExprIfFalse(pParse, pFilter, addrNext, SQLITE_JUMPIFNULL);",
          "5342:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5342:       regAgg = 0;",
          "5343:     }",
          "5344:     if( pF->iDistinct>=0 ){",
          "5348:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5345:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Added Lines]",
          "5352:       if( addrNext==0 ){",
          "5353:         addrNext = sqlite3VdbeMakeLabel(pParse);",
          "5354:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6225:       minMaxFlag = WHERE_ORDERBY_NORMAL;",
          "6226:     }",
          "6227:     for(i=0; i<sAggInfo.nFunc; i++){",
          "6229:       sNC.ncFlags |= NC_InAggFunc;",
          "6231:       sNC.ncFlags &= ~NC_InAggFunc;",
          "6232:     }",
          "6233:     sAggInfo.mxReg = pParse->nMem;",
          "",
          "[Removed Lines]",
          "6228:       assert( !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) );",
          "6230:       sqlite3ExprAnalyzeAggList(&sNC, sAggInfo.aFunc[i].pExpr->x.pList);",
          "",
          "[Added Lines]",
          "6237:       Expr *pExpr = sAggInfo.aFunc[i].pExpr;",
          "6238:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "6240:       sqlite3ExprAnalyzeAggList(&sNC, pExpr->x.pList);",
          "6241: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6242:       assert( !ExprHasProperty(pExpr, EP_WinFunc) );",
          "6243:       sqlite3ExprAnalyzeAggregates(&sNC, pExpr->y.pFilter);",
          "6244: #endif",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3602: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3603: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3604: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3606: int sqlite3WindowCompare(Parse*, Window*, Window*);",
          "3607: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3608: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "",
          "[Removed Lines]",
          "3605: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "",
          "[Added Lines]",
          "3607: void sqlite3WindowAttach(Parse*, Expr*, Expr*, Window*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3617: #else",
          "3618: # define sqlite3WindowDelete(a,b)",
          "3619: # define sqlite3WindowFunctions()",
          "3621: #endif",
          "",
          "[Removed Lines]",
          "3620: # define sqlite3WindowAttach(a,b,c)",
          "",
          "[Added Lines]",
          "3622: # define sqlite3WindowAttach(a,b,c,d)",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:       if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "75:         if( walkWindowList(pWalker, pExpr->y.pWin) ) return WRC_Abort;",
          "76:       }",
          "77: #endif",
          "78:     }",
          "79:     break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:       if( ExprHasProperty(pExpr, EP_Filter) ){",
          "78:         if( walkExpr(pWalker, pExpr->y.pFilter) ) return WRC_Abort;",
          "79:       }",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:   if( p ){",
          "1183:     assert( p->op==TK_FUNCTION );",
          "1188:       p->y.pWin = pWin;",
          "1189:       ExprSetProperty(p, EP_WinFunc);",
          "1190:       pWin->pOwner = p;",
          "",
          "[Removed Lines]",
          "1181: void sqlite3WindowAttach(Parse *pParse, Expr *p, Window *pWin){",
          "1187:     if( ALWAYS(pWin) ){",
          "",
          "[Added Lines]",
          "1181: void sqlite3WindowAttach(Parse *pParse, Expr *p, Expr *pFilter, Window *pWin){",
          "1184:     if( pWin ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1192:         sqlite3ErrorMsg(pParse,",
          "1193:            \"DISTINCT is not supported for window functions\");",
          "1194:       }",
          "1195:     }",
          "1196:   }else{",
          "1197:     sqlite3WindowDelete(pParse->db, pWin);",
          "1198:   }",
          "1199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1192:       pWin->pFilter = pFilter;",
          "1193:     }else if( pFilter ){",
          "1194:       p->y.pFilter = pFilter;",
          "1195:       ExprSetProperty(p, EP_Filter);",
          "1199:     sqlite3ExprDelete(pParse->db, pFilter);",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix filter1",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a);",
          "25:   CREATE INDEX i1 ON t1(a);",
          "26:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "27: }",
          "29: do_execsql_test 1.1 { SELECT sum(a) FROM t1; } 45",
          "30: do_execsql_test 1.2 { SELECT sum(a) FILTER( WHERE a<5 ) FROM t1; } 10",
          "32: do_execsql_test 1.3 {",
          "33:   SELECT sum(a) FILTER( WHERE a>9 ),",
          "34:          sum(a) FILTER( WHERE a>8 ),",
          "35:          sum(a) FILTER( WHERE a>7 ),",
          "36:          sum(a) FILTER( WHERE a>6 ),",
          "37:          sum(a) FILTER( WHERE a>5 ),",
          "38:          sum(a) FILTER( WHERE a>4 ),",
          "39:          sum(a) FILTER( WHERE a>3 ),",
          "40:          sum(a) FILTER( WHERE a>2 ),",
          "41:          sum(a) FILTER( WHERE a>1 ),",
          "42:          sum(a) FILTER( WHERE a>0 )",
          "43:   FROM t1;",
          "44: } {{} 9 17 24 30 35 39 42 44 45}",
          "46: do_execsql_test 1.4 {",
          "47:   SELECT max(a) FILTER (WHERE (a % 2)==0) FROM t1",
          "48: } {8}",
          "50: do_execsql_test 1.5 {",
          "51:   SELECT min(a) FILTER (WHERE a>4) FROM t1",
          "52: } {5}",
          "54: do_execsql_test 1.6 {",
          "55:   SELECT count(*) FILTER (WHERE a!=5) FROM t1",
          "56: } {8}",
          "58: do_execsql_test 1.6 {",
          "59:   SELECT min(a) FILTER (WHERE a>3) FROM t1 GROUP BY (a%2) ORDER BY 1;",
          "60: } {4 5}",
          "63: #-------------------------------------------------------------------------",
          "64: # Test some errors:",
          "65: #",
          "66: #   .1 FILTER on a non-aggregate function,",
          "67: #   .2 Window function in FILTER clause,",
          "68: #   .3 Aggregate function in FILTER clause,",
          "69: #",
          "70: reset_db",
          "71: do_execsql_test 2.0 {",
          "72:   CREATE TABLE t1(a);",
          "73:   INSERT INTO t1 VALUES(1), (2), (3), (4), (5), (6), (7), (8), (9);",
          "74: }",
          "76: do_catchsql_test 2.1 {",
          "77:   SELECT upper(a) FILTER (WHERE a=1) FROM t1",
          "78: } {1 {filter clause may not be used with non-aggregate upper()}}",
          "80: do_catchsql_test 2.2 {",
          "81:   SELECT sum(a) FILTER (WHERE 1 - max(a) OVER () > 0) FROM t1",
          "82: } {1 {misuse of window function max()}}",
          "84: do_catchsql_test 2.3 {",
          "85:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "86: } {1 {misuse of aggregate: count()}}",
          "88: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.tcl||test/filter2.tcl": [
          "File: test/filter2.tcl -> test/filter2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "18: start_test filter2 \"2019 July 2\"",
          "20: ifcapable !windowfunc",
          "22: execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t1;",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "27:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "28:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "29:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "30:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "31:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "32:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "33: }",
          "35: execsql_test 1.1 { SELECT sum(b) FROM t1 }",
          "37: execsql_test 1.2 { SELECT sum(b) FILTER (WHERE a<10) FROM t1 }",
          "39: execsql_test 1.3 { SELECT count(DISTINCT b) FROM t1 }",
          "41: execsql_test 1.4 { SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1 }",
          "43: execsql_test 1.5 {",
          "44:   SELECT min(b) FILTER (WHERE a>19),",
          "45:          min(b) FILTER (WHERE a>0),",
          "46:          max(a+b) FILTER (WHERE a>19),",
          "47:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "48:   FROM t1;",
          "49: }",
          "51: execsql_test 1.6 {",
          "52:   SELECT min(b),",
          "53:          min(b),",
          "54:          max(a+b),",
          "55:          max(b+a)",
          "56:   FROM t1",
          "57:   GROUP BY (a%10)",
          "58:   ORDER BY 1, 2, 3, 4;",
          "59: }",
          "61: execsql_test 1.7 {",
          "62:   SELECT min(b) FILTER (WHERE a>19),",
          "63:          min(b) FILTER (WHERE a>0),",
          "64:          max(a+b) FILTER (WHERE a>19),",
          "65:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "66:   FROM t1",
          "67:   GROUP BY (a%10)",
          "68:   ORDER BY 1, 2, 3, 4;",
          "69: }",
          "71: finish_test",
          "",
          "---------------"
        ],
        "test/filter2.test||test/filter2.test": [
          "File: test/filter2.test -> test/filter2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 July 2",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix filter2",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b INTEGER);",
          "26:   INSERT INTO t1 VALUES",
          "27:    (1, 7), (2, 3), (3, 5), (4, 30), (5, 26), (6, 23), (7, 27),",
          "28:    (8, 3), (9, 17), (10, 26), (11, 33), (12, 25), (13, NULL), (14, 47),",
          "29:    (15, 36), (16, 13), (17, 45), (18, 31), (19, 11), (20, 36), (21, 37),",
          "30:    (22, 21), (23, 22), (24, 14), (25, 16), (26, 3), (27, 7), (28, 29),",
          "31:    (29, 50), (30, 38), (31, 3), (32, 36), (33, 12), (34, 4), (35, 46),",
          "32:    (36, 3), (37, 48), (38, 23), (39, NULL), (40, 24), (41, 5), (42, 46),",
          "33:    (43, 11), (44, NULL), (45, 18), (46, 25), (47, 15), (48, 18), (49, 23);",
          "34: } {}",
          "36: do_execsql_test 1.1 {",
          "37:   SELECT sum(b) FROM t1",
          "38: } {1041}",
          "40: do_execsql_test 1.2 {",
          "41:   SELECT sum(b) FILTER (WHERE a<10) FROM t1",
          "42: } {141}",
          "44: do_execsql_test 1.3 {",
          "45:   SELECT count(DISTINCT b) FROM t1",
          "46: } {31}",
          "48: do_execsql_test 1.4 {",
          "49:   SELECT count(DISTINCT b) FILTER (WHERE a!=19) FROM t1",
          "50: } {31}",
          "52: do_execsql_test 1.5 {",
          "53:   SELECT min(b) FILTER (WHERE a>19),",
          "54:          min(b) FILTER (WHERE a>0),",
          "55:          max(a+b) FILTER (WHERE a>19),",
          "56:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "57:   FROM t1;",
          "58: } {3 3 88 85}",
          "60: do_execsql_test 1.6 {",
          "61:   SELECT min(b),",
          "62:          min(b),",
          "63:          max(a+b),",
          "64:          max(b+a)",
          "65:   FROM t1",
          "66:   GROUP BY (a%10)",
          "67:   ORDER BY 1, 2, 3, 4;",
          "68: } {3 3 58 58   3 3 66 66   3 3 71 71   3 3 88 88   4 4 61 61   5 5 54 54",
          "69:   7 7 85 85   11 11 79 79   16 16 81 81   24 24 68 68}",
          "71: do_execsql_test 1.7 {",
          "72:   SELECT min(b) FILTER (WHERE a>19),",
          "73:          min(b) FILTER (WHERE a>0),",
          "74:          max(a+b) FILTER (WHERE a>19),",
          "75:          max(b+a) FILTER (WHERE a BETWEEN 10 AND 40)",
          "76:   FROM t1",
          "77:   GROUP BY (a%10)",
          "78:   ORDER BY 1, 2, 3, 4;",
          "79: } {3 3 58 58   3 3 71 39   4 4 38 61   7 7 85 85   11 5 54 45   16 16 81 81",
          "80:   18 3 66 61   21 3 88 68   23 11 79 79   24 24 68 68}",
          "82: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4a6744b501483c7e5bb06660906f9077f0d9835",
      "candidate_info": {
        "commit_hash": "d4a6744b501483c7e5bb06660906f9077f0d9835",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4a6744b501483c7e5bb06660906f9077f0d9835",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Improvements to comments.  No changes to code.\n\nFossilOrigin-Name: 16eb0fc8f8cce51eaa5305ebc9f3bd8c8d935dd3ebebab6820e5629f9292eec2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 480a5090befdc29eaeb6f0b22831c980d6ee92438d9b2e766de68b037ded38b8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    }
  ]
}