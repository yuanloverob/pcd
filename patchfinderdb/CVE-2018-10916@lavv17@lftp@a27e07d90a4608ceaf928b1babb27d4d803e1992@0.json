{
  "cve_id": "CVE-2018-10916",
  "cve_desc": "It has been discovered that lftp up to and including version 4.8.3 does not properly sanitize remote file names, leading to a loss of integrity on the local system when reverse mirroring is used. A remote attacker may trick a user to use reverse mirroring on an attacker controlled FTP server, resulting in the removal of all files in the current working directory of the victim's system.",
  "repo": "lavv17/lftp",
  "patch_hash": "a27e07d90a4608ceaf928b1babb27d4d803e1992",
  "patch_info": {
    "commit_hash": "a27e07d90a4608ceaf928b1babb27d4d803e1992",
    "repo": "lavv17/lftp",
    "commit_url": "https://github.com/lavv17/lftp/commit/a27e07d90a4608ceaf928b1babb27d4d803e1992",
    "files": [
      "src/MirrorJob.cc"
    ],
    "message": "mirror: prepend ./ to rm and chmod arguments to avoid URL recognition (fix #452)",
    "before_after_code_files": [
      "src/MirrorJob.cc||src/MirrorJob.cc"
    ]
  },
  "patch_diff": {
    "src/MirrorJob.cc||src/MirrorJob.cc": [
      "File: src/MirrorJob.cc -> src/MirrorJob.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1164:      }",
      "1165:      continue;",
      "1166:   }",
      "1167:   if(script)",
      "1168:   {",
      "1177:      args.Append(target_session->GetFileURL(file->name));",
      "1178:      xstring_ca cmd(args.CombineQuoted());",
      "1179:      fprintf(script,\"%s\\n\",cmd.get());",
      "1180:   }",
      "1181:   if(!script_only)",
      "1182:   {",
      "1185:      args->seek(1);",
      "1186:      rmJob *j=new rmJob(target_session->Clone(),args);",
      "1187:      args->CombineTo(j->cmdline);",
      "",
      "[Removed Lines]",
      "1169:      ArgV args(\"rm\");",
      "1170:      if(file->TypeIs(file->DIRECTORY))",
      "1171:      {",
      "1172:         if(recursion_mode==RECURSION_NEVER)",
      "1173:     args.setarg(0,\"rmdir\");",
      "1174:         else",
      "1175:     args.Append(\"-r\");",
      "1176:      }",
      "1183:      ArgV *args=new ArgV(\"rm\");",
      "1184:      args->Append(file->name);",
      "",
      "[Added Lines]",
      "1167:   bool use_rmdir = (file->TypeIs(file->DIRECTORY)",
      "1168:       && recursion_mode==RECURSION_NEVER);",
      "1171:      ArgV args(use_rmdir?\"rmdir\":\"rm\");",
      "1172:      if(file->TypeIs(file->DIRECTORY) && !use_rmdir)",
      "1173:         args.Append(\"-r\");",
      "1180:      ArgV *args=new ArgV(use_rmdir?\"rmdir\":\"rm\");",
      "1181:      args->Append(dir_file(\".\",file->name));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1189:      if(file->TypeIs(file->DIRECTORY))",
      "1190:      {",
      "1191:         if(recursion_mode==RECURSION_NEVER)",
      "1194:     j->Rmdir();",
      "1196:         else",
      "1197:     j->Recurse();",
      "1198:      }",
      "",
      "[Removed Lines]",
      "1192:         {",
      "1193:     args->setarg(0,\"rmdir\");",
      "1195:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1258:   if(!script_only)",
      "1259:   {",
      "1260:      ArgV *a=new ArgV(\"chmod\");",
      "1262:      a->seek(1);",
      "1263:      ChmodJob *cj=new ChmodJob(target_session->Clone(),",
      "1264:      file->mode&~mode_mask,a);",
      "",
      "[Removed Lines]",
      "1261:      a->Append(file->name);",
      "",
      "[Added Lines]",
      "1255:      a->Append(dir_file(\".\",file->name));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1380:   if(!script_only)",
      "1381:   {",
      "1382:      ArgV *args=new ArgV(\"rm\");",
      "1384:      args->seek(1);",
      "1385:      rmJob *j=new rmJob(source_session->Clone(),args);",
      "1386:      args->CombineTo(j->cmdline);",
      "",
      "[Removed Lines]",
      "1383:      args->Append(file->name);",
      "",
      "[Added Lines]",
      "1377:      args->Append(dir_file(\".\",file->name));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "076bc4c6ddfa6fbe2e7bb9573d08f4f0db2efb9f",
      "candidate_info": {
        "commit_hash": "076bc4c6ddfa6fbe2e7bb9573d08f4f0db2efb9f",
        "repo": "lavv17/lftp",
        "commit_url": "https://github.com/lavv17/lftp/commit/076bc4c6ddfa6fbe2e7bb9573d08f4f0db2efb9f",
        "files": [
          "src/ArgV.cc",
          "src/ArgV.h",
          "src/CmdExec.cc",
          "src/CopyJob.cc",
          "src/FileGlob.cc",
          "src/FileGlob.h",
          "src/FileSetOutput.cc",
          "src/Filter.cc",
          "src/FtpDirList.h",
          "src/Http.cc",
          "src/LocalDir.cc",
          "src/MirrorJob.cc",
          "src/NetAccess.cc",
          "src/PtyShell.cc",
          "src/ResMgr.cc",
          "src/SFtp.cc",
          "src/StatusLine.cc",
          "src/commands.cc",
          "src/lftp.cc",
          "src/lftp_ssl.cc",
          "src/log.cc",
          "src/misc.cc",
          "src/misc.h",
          "src/resource.cc",
          "src/url.cc",
          "src/url.h",
          "src/xstring.cc",
          "src/xstring.h"
        ],
        "message": "avoid most set_allocated calls; update copyright year",
        "before_after_code_files": [
          "src/ArgV.cc||src/ArgV.cc",
          "src/ArgV.h||src/ArgV.h",
          "src/CmdExec.cc||src/CmdExec.cc",
          "src/CopyJob.cc||src/CopyJob.cc",
          "src/FileGlob.cc||src/FileGlob.cc",
          "src/FileGlob.h||src/FileGlob.h",
          "src/FileSetOutput.cc||src/FileSetOutput.cc",
          "src/Filter.cc||src/Filter.cc",
          "src/FtpDirList.h||src/FtpDirList.h",
          "src/Http.cc||src/Http.cc",
          "src/LocalDir.cc||src/LocalDir.cc",
          "src/MirrorJob.cc||src/MirrorJob.cc",
          "src/NetAccess.cc||src/NetAccess.cc",
          "src/PtyShell.cc||src/PtyShell.cc",
          "src/ResMgr.cc||src/ResMgr.cc",
          "src/SFtp.cc||src/SFtp.cc",
          "src/StatusLine.cc||src/StatusLine.cc",
          "src/commands.cc||src/commands.cc",
          "src/lftp.cc||src/lftp.cc",
          "src/lftp_ssl.cc||src/lftp_ssl.cc",
          "src/log.cc||src/log.cc",
          "src/misc.cc||src/misc.cc",
          "src/misc.h||src/misc.h",
          "src/resource.cc||src/resource.cc",
          "src/url.cc||src/url.cc",
          "src/url.h||src/url.h",
          "src/xstring.cc||src/xstring.cc",
          "src/xstring.h||src/xstring.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/MirrorJob.cc||src/MirrorJob.cc"
          ],
          "candidate": [
            "src/MirrorJob.cc||src/MirrorJob.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/ArgV.cc||src/ArgV.cc": [
          "File: src/ArgV.cc -> src/ArgV.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:       ind--;",
          "57: }",
          "60: {",
          "62:    if(!end)",
          "63:       end=Count();",
          "64:    if(start>=end)",
          "66:    for(;;)",
          "67:    {",
          "68:       res.append(getarg(start++));",
          "69:       if(start>=end)",
          "71:       res.append(' ');",
          "72:    }",
          "73: }",
          "76: {",
          "78:    if(start>=Count())",
          "80:    for(;;)",
          "81:    {",
          "82:       for(const char *arg=String(start++); *arg; arg++)",
          "",
          "[Removed Lines]",
          "59: char *ArgV::Combine(int start,int end) const",
          "61:    xstring res(\"\");",
          "65:       return res.borrow();",
          "70:   return(res.borrow());",
          "75: char *ArgV::CombineShellQuoted(int start) const",
          "77:    xstring res(\"\");",
          "79:       return res.borrow();",
          "",
          "[Added Lines]",
          "59: xstring& ArgV::CombineTo(xstring& res,int start,int end) const",
          "61:    res.nset(\"\",0);",
          "65:       return res;",
          "70:   return(res);",
          "75: xstring& ArgV::CombineShellQuotedTo(xstring& res,int start) const",
          "77:    res.nset(\"\",0);",
          "79:       return res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:   res.append(*arg);",
          "87:       }",
          "88:       if(start>=Count())",
          "90:       res.append(' ');",
          "91:    }",
          "92: }",
          "",
          "[Removed Lines]",
          "89:   return(res.borrow());",
          "",
          "[Added Lines]",
          "89:   return(res);",
          "",
          "---------------"
        ],
        "src/ArgV.h||src/ArgV.h": [
          "File: src/ArgV.h -> src/ArgV.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:    ArgV& Append(int a) { char buf[32]; sprintf(buf,\"%d\",a); return Append(buf); }",
          "42:    ArgV& Add(const char *a) { return Append(a); } // alias",
          "52:    int getopt_long(const char *opts,const struct option *lopts,int *lind=0);",
          "53:    int getopt(const char *opts)",
          "",
          "[Removed Lines]",
          "44:    char *Combine(int start_index=0,int end_index=0) const;",
          "47:    char *CombineShellQuoted(int start) const;",
          "49:    char *CombineQuoted(int start_index=0) const;",
          "50:    char *CombineCmd(int i=0) const;",
          "",
          "[Added Lines]",
          "44:    xstring& CombineTo(xstring& res,int start_index=0,int end_index=0) const;",
          "45:    const char *CombineTo(xstring_c& res,int start_index=0,int end_index=0) const {",
          "46:       xstring tmp; tmp.move_here(res);",
          "47:       return res.move_here(CombineTo(tmp,start_index,end_index));",
          "48:    }",
          "49:    char *Combine(int start_index=0,int end_index=0) const { return CombineTo(xstring::get_tmp(),start_index,end_index).borrow(); }",
          "52:    xstring& CombineShellQuotedTo(xstring& res,int start) const;",
          "53:    char *CombineShellQuoted(int start) const { return CombineShellQuotedTo(xstring::get_tmp(),start).borrow(); }",
          "55:    xstring& CombineQuotedTo(xstring& res,int start_index=0) const;",
          "56:    const char *CombineQuotedTo(xstring_c& res,int start_index=0) const {",
          "57:       xstring tmp; tmp.move_here(res);",
          "58:       return res.move_here(CombineQuotedTo(tmp,start_index));",
          "59:    }",
          "60:    char *CombineQuoted(int start_index=0) const { return CombineQuotedTo(xstring::get_tmp(),start_index).borrow(); }",
          "61:    xstring& CombineCmdTo(xstring& res,int i=0) const;",
          "62:    char *CombineCmd(int i=0) const { return CombineCmdTo(xstring::get_tmp(),i).borrow(); }",
          "",
          "---------------"
        ],
        "src/CmdExec.cc||src/CmdExec.cc": [
          "File: src/CmdExec.cc -> src/CmdExec.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:       RevertToSavedSession();",
          "249:       if(new_job) {",
          "250:   if(!new_job->cmdline)",
          "252:   AddNewJob(new_job);",
          "253:       }",
          "254:    }",
          "",
          "[Removed Lines]",
          "251:      new_job->cmdline.set_allocated(cmdline.borrow());",
          "",
          "[Added Lines]",
          "251:      new_job->cmdline.move_here(cmdline);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "909:       { ']', EndIgn },",
          "910:       { 0, \"\" }",
          "911:    };",
          "915:    return(prompt);",
          "916: }",
          "",
          "[Removed Lines]",
          "912:    static xstring_c prompt;",
          "913:    prompt.set_allocated(Subst(scan, subst));",
          "",
          "[Added Lines]",
          "912:    static xstring prompt;",
          "913:    SubstTo(prompt, scan, subst);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1088: }",
          "1092: {",
          "1094:    if(start>=Count())",
          "1096:    for(;;)",
          "1097:    {",
          "1098:       const char *arg=String(start++);",
          "1099:       res.append_quoted(arg);",
          "1100:       if(start>=Count())",
          "1102:       res.append(' ');",
          "1103:    }",
          "1104: }",
          "1106: {",
          "1108: }",
          "1110: const char *CmdExec::GetFullCommandName(const char *cmd)",
          "",
          "[Removed Lines]",
          "1091: char *ArgV::CombineQuoted(int start) const",
          "1093:    xstring res(\"\");",
          "1095:       return res.borrow();",
          "1101:   return(res.borrow());",
          "1105: char *ArgV::CombineCmd(int i) const",
          "1107:    return i>=count()-1 ? Combine(i) : CombineQuoted(i);",
          "",
          "[Added Lines]",
          "1091: xstring& ArgV::CombineQuotedTo(xstring& res,int start) const",
          "1093:    res.nset(\"\",0);",
          "1095:       return res;",
          "1101:   return(res);",
          "1105: xstring& ArgV::CombineCmdTo(xstring& res,int i) const",
          "1107:    return i>=count()-1 ? CombineTo(res,i) : CombineQuotedTo(res,i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1294: void CmdExec::FeedArgV(const ArgV *args,int start)",
          "1295: {",
          "1303:    FeedCmd(cmd);",
          "1304:    FeedCmd(\"\\n\");",
          "1305: }",
          "",
          "[Removed Lines]",
          "1296:    xstring_c cmd;",
          "1298:    if(start+1==args->count())",
          "1299:       cmd.set_allocated(args->Combine(start));",
          "1300:    else",
          "1301:       cmd.set_allocated(args->CombineQuoted(start));",
          "",
          "[Added Lines]",
          "1296:    xstring cmd;",
          "1297:    args->CombineCmdTo(cmd,start);",
          "",
          "---------------"
        ],
        "src/CopyJob.cc||src/CopyJob.cc": [
          "File: src/CopyJob.cc -> src/CopyJob.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:    no_status=false;",
          "196:    cont=cont1;",
          "197:    ascii=false;",
          "199: }",
          "200: CopyJobEnv::~CopyJobEnv()",
          "201: {",
          "",
          "[Removed Lines]",
          "198:    cwd.set_allocated(xgetcwd());",
          "",
          "[Added Lines]",
          "198:    xgetcwd_to(cwd);",
          "",
          "---------------"
        ],
        "src/FileGlob.cc||src/FileGlob.cc": [
          "File: src/FileGlob.cc -> src/FileGlob.cc"
        ],
        "src/FileGlob.h||src/FileGlob.h": [
          "File: src/FileGlob.h -> src/FileGlob.h"
        ],
        "src/FileSetOutput.cc||src/FileSetOutput.cc": [
          "File: src/FileSetOutput.cc -> src/FileSetOutput.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:       }",
          "356:       FileSet *res = list_info->GetResult();",
          "358:       if(res)",
          "",
          "[Removed Lines]",
          "355:       fso->pat.set_allocated(mask.borrow());",
          "",
          "[Added Lines]",
          "355:       fso->pat.move_here(mask);",
          "",
          "---------------"
        ],
        "src/Filter.cc||src/Filter.cc": [
          "File: src/Filter.cc -> src/Filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: {",
          "247:    w=0;",
          "248:    second_fd=-1;",
          "250:    pg=0;",
          "251:    stderr_to_stdout=false;",
          "252:    stdout_to_null=false;",
          "253:    if(a)",
          "255: }",
          "257: OutputFilter::OutputFilter(const char *filter,int new_second_fd)",
          "",
          "[Removed Lines]",
          "249:    cwd.set_allocated(xgetcwd());",
          "254:       name.set_allocated(a->Combine());",
          "",
          "[Added Lines]",
          "249:    xgetcwd_to(cwd);",
          "254:       a->CombineTo(name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:       full_name.set(name);",
          "361:    else",
          "362:    {",
          "364:       full_name.set(dir_file(cwd,name));",
          "365:    }",
          "366: }",
          "",
          "[Removed Lines]",
          "363:       cwd.set_allocated(xgetcwd());",
          "",
          "[Added Lines]",
          "363:       xgetcwd_to(cwd);",
          "",
          "---------------"
        ],
        "src/FtpDirList.h||src/FtpDirList.h": [
          "File: src/FtpDirList.h -> src/FtpDirList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: class FtpDirList : public DirList",
          "24: {",
          "25:    SMTaskRef<IOBuffer> ubuf;",
          "28:    bool TryEPLF(const char *line,int len);",
          "29:    bool TryMLSD(const char *line,int len);",
          "",
          "[Removed Lines]",
          "26:    xstring_ca pattern;",
          "",
          "[Added Lines]",
          "26:    const xstring_ca pattern;",
          "",
          "---------------"
        ],
        "src/Http.cc||src/Http.cc": [
          "File: src/Http.cc -> src/Http.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1974:       && user && !url.user) {",
          "1976:   url.user.set(user);",
          "1978:       }",
          "1979:    }",
          "1980: }",
          "",
          "[Removed Lines]",
          "1977:   location.set_allocated(url.Combine());",
          "",
          "[Added Lines]",
          "1977:   location.truncate();",
          "1978:   url.CombineTo(location);",
          "",
          "---------------"
        ],
        "src/LocalDir.cc||src/LocalDir.cc": [
          "File: src/LocalDir.cc -> src/LocalDir.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:    Unset();",
          "38:    fd=open(\".\",O_RDONLY|O_DIRECTORY);",
          "39:    fcntl(fd,F_SETFD,FD_CLOEXEC);",
          "41: }",
          "43: const char *LocalDirectory::Chdir()",
          "",
          "[Removed Lines]",
          "40:    name.set_allocated(xgetcwd());",
          "",
          "[Added Lines]",
          "40:    xgetcwd_to(name);",
          "",
          "---------------"
        ],
        "src/MirrorJob.cc||src/MirrorJob.cc": [
          "File: src/MirrorJob.cc -> src/MirrorJob.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "758:      ArgV *a=new ArgV(\"mkdir\");",
          "759:      a->Append(target_dir);",
          "760:      mkdirJob *mkj=new mkdirJob(target_session->Clone(),a);",
          "762:      JobStarted(mkj);",
          "763:   }",
          "764:       }",
          "",
          "[Removed Lines]",
          "761:      mkj->cmdline.set_allocated(a->Combine());",
          "",
          "[Added Lines]",
          "761:      a->CombineTo(mkj->cmdline);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1062:      ArgV *a=new ArgV(\"mkdir\");",
          "1063:      a->Append(file->name);",
          "1064:      mkdirJob *mkj=new mkdirJob(target_session->Clone(),a);",
          "1066:      JobStarted(mkj);",
          "1067:      m=MOVED;",
          "1068:   }",
          "",
          "[Removed Lines]",
          "1065:      mkj->cmdline.set_allocated(a->Combine());",
          "",
          "[Added Lines]",
          "1065:      a->CombineTo(mkj->cmdline);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1181:      args->Append(file->name);",
          "1182:      args->seek(1);",
          "1183:      rmJob *j=new rmJob(target_session->Clone(),args);",
          "1185:      JobStarted(j);",
          "1186:      if(file->TypeIs(file->DIRECTORY))",
          "1187:      {",
          "",
          "[Removed Lines]",
          "1184:      j->cmdline.set_allocated(args->Combine());",
          "",
          "[Added Lines]",
          "1184:      args->CombineTo(j->cmdline);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1259:      a->seek(1);",
          "1260:      ChmodJob *cj=new ChmodJob(target_session->Clone(),",
          "1261:      file->mode&~mode_mask,a);",
          "1263:      if(!verbose_report)",
          "1264:         cj->BeQuiet(); // chmod is not supported on all servers; be quiet.",
          "1265:      JobStarted(cj);",
          "",
          "[Removed Lines]",
          "1262:      cj->cmdline.set_allocated(a->Combine());",
          "",
          "[Added Lines]",
          "1262:      a->CombineTo(cj->cmdline);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1313:      args->Append(source_dir);",
          "1314:      args->seek(1);",
          "1315:      rmJob *j=new rmJob(source_session->Clone(),args);",
          "1317:      j->Rmdir();",
          "1318:      JobStarted(j);",
          "1319:   }",
          "",
          "[Removed Lines]",
          "1316:      j->cmdline.set_allocated(args->Combine());",
          "",
          "[Added Lines]",
          "1316:      args->CombineTo(j->cmdline);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1380:      args->Append(file->name);",
          "1381:      args->seek(1);",
          "1382:      rmJob *j=new rmJob(source_session->Clone(),args);",
          "1384:      JobStarted(j);",
          "1385:   }",
          "1386:   const char *source_name_rel=dir_file(source_relative_dir,file->name);",
          "",
          "[Removed Lines]",
          "1383:      j->cmdline.set_allocated(args->Combine());",
          "",
          "[Added Lines]",
          "1383:      args->CombineTo(j->cmdline);",
          "",
          "---------------"
        ],
        "src/NetAccess.cc||src/NetAccess.cc": [
          "File: src/NetAccess.cc -> src/NetAccess.cc"
        ],
        "src/PtyShell.cc||src/PtyShell.cc": [
          "File: src/PtyShell.cc -> src/PtyShell.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: void PtyShell::Init()",
          "195: {",
          "197:    pg=0;",
          "198:    closed=false;",
          "199:    use_pipes=false;",
          "",
          "[Removed Lines]",
          "196:    oldcwd.set_allocated(xgetcwd());",
          "",
          "[Added Lines]",
          "196:    xgetcwd_to(oldcwd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:    : FDStream(-1,0), a(a1)",
          "217: {",
          "218:    Init();",
          "220: }",
          "222: PtyShell::~PtyShell()",
          "",
          "[Removed Lines]",
          "219:    name.set_allocated(a->Combine());",
          "",
          "[Added Lines]",
          "219:    a->CombineTo(name);",
          "",
          "---------------"
        ],
        "src/ResMgr.cc||src/ResMgr.cc": [
          "File: src/ResMgr.cc -> src/ResMgr.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "824:    const char *error=0;",
          "825:    if(f[0]!='/')",
          "826:    {",
          "828:       if(cwd)",
          "829:   f=dir_file(cwd,f);",
          "830:    }",
          "",
          "[Removed Lines]",
          "827:       cwd.set_allocated(xgetcwd());",
          "",
          "[Added Lines]",
          "827:       xgetcwd_to(cwd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "861:    const char *bn=basename_ptr(*value);",
          "862:    xstring_c dir(dirname(*value));",
          "863:    if(!*dir)",
          "865:    error=FileAccessible(&dir,X_OK|W_OK,true);",
          "866:    if(!error)  // dir may be expanded, combine it with base file name.",
          "867:       value->set(dir_file(dir,bn));",
          "",
          "[Removed Lines]",
          "864:       dir.set_allocated(xgetcwd());",
          "",
          "[Added Lines]",
          "864:       xgetcwd_to(dir);",
          "",
          "---------------"
        ],
        "src/SFtp.cc||src/SFtp.cc": [
          "File: src/SFtp.cc -> src/SFtp.cc"
        ],
        "src/StatusLine.cc||src/StatusLine.cc": [
          "File: src/StatusLine.cc -> src/StatusLine.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:    xstring &disp=xstring::get_tmp();",
          "160:    if(status_format && *status_format)",
          "162:    else if(to_status_line && from_status_line)",
          "164:       disp.vset(to_status_line, s, from_status_line, NULL);",
          "",
          "[Removed Lines]",
          "161:       disp.set_allocated(Subst(status_format, subst));",
          "",
          "[Added Lines]",
          "161:       SubstTo(disp, status_format, subst);",
          "",
          "---------------"
        ],
        "src/commands.cc||src/commands.cc": [
          "File: src/commands.cc -> src/commands.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "797:   cmd.append(';');",
          "798:   break;",
          "799:       case('c'):",
          "802:   args->seek(args->count());",
          "803:   break;",
          "804:       case('d'):",
          "",
          "[Removed Lines]",
          "800:   cmd.set_allocated(args->CombineCmd(args->getindex()-1));",
          "801:   cmd.append(\"\\n\\n\");",
          "",
          "[Added Lines]",
          "800:   args->CombineCmdTo(cmd,args->getindex()-1).append(\"\\n\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3039: CMD(echo)",
          "3040: {",
          "3041:    xstring s;",
          "3043:    if(args->count()>1 && !strcmp(args->getarg(1),\"-n\"))",
          "3044:    {",
          "3045:       if(s.length()<=3)",
          "",
          "[Removed Lines]",
          "3042:    s.set_allocated(args->Combine(1));",
          "",
          "[Added Lines]",
          "3041:    args->CombineTo(s,1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3607:    int base=optind;",
          "3608:    xstring cmd;",
          "3609:    if(!fmt)",
          "3611:    else",
          "3612:    {",
          "3613:       while(*fmt)",
          "",
          "[Removed Lines]",
          "3610:       cmd.set_allocated(args->Combine(optind));",
          "",
          "[Added Lines]",
          "3609:       args->CombineTo(cmd,optind);",
          "",
          "---------------"
        ],
        "src/lftp.cc||src/lftp.cc": [
          "File: src/lftp.cc -> src/lftp.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:       add_newline=false;",
          "108:       eof_count=0;",
          "109:       if(args && args->count()>1)",
          "111:    }",
          "112:    virtual ~ReadlineFeeder()",
          "113:    {",
          "",
          "[Removed Lines]",
          "110:   for_history.set_allocated(args->CombineQuoted());",
          "",
          "[Added Lines]",
          "110:   args->CombineQuotedTo(for_history);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:        return \"\";",
          "179:     }",
          "182:         }",
          "183:      }",
          "184:      lftp_add_history_nodups(cmd_buf);",
          "",
          "[Removed Lines]",
          "181:     cmd_buf.set_allocated(history_value.borrow());",
          "",
          "[Added Lines]",
          "181:     cmd_buf.move_here(history_value);",
          "",
          "---------------"
        ],
        "src/lftp_ssl.cc||src/lftp_ssl.cc": [
          "File: src/lftp_ssl.cc -> src/lftp_ssl.cc"
        ],
        "src/log.cc||src/log.cc": [
          "File: src/log.cc -> src/log.cc"
        ],
        "src/misc.cc||src/misc.cc": [
          "File: src/misc.cc -> src/misc.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:       u.path.set(file);",
          "102:    else",
          "103:       u.path.set(dir_file(u.path,file));",
          "106: }",
          "108: const char *output_file_name(const char *src,const char *dst,bool dst_local,",
          "",
          "[Removed Lines]",
          "104:    buf.set_allocated(u.Combine());",
          "105:    return buf;",
          "",
          "[Added Lines]",
          "104:    buf.truncate();",
          "105:    return u.CombineTo(buf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:    return res;",
          "560: }",
          "563: {",
          "566:    char str[3];",
          "567:    bool last_subst_empty=true;",
          "",
          "[Removed Lines]",
          "562: char *Subst(const char *txt, const subst_t *s)",
          "564:    xstring buf(\"\");",
          "",
          "[Added Lines]",
          "562: xstring& SubstTo(xstring& buf,const char *txt, const subst_t *s)",
          "564:    buf.nset(\"\",0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:       buf.append(to_add);",
          "623:    }",
          "625: }",
          "627: void xgettimeofday(time_t *sec, int *usec)",
          "",
          "[Removed Lines]",
          "624:    return(buf.borrow());",
          "",
          "[Added Lines]",
          "624:    return(buf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1012:    return human_readable(n, buf, human_autoscale|human_SI, 1, 1);",
          "1013: }",
          "1016: const char *xidna_to_ascii(const char *name)",
          "1017: {",
          "1018: #if LIBIDN2",
          "1019:    if(!name)",
          "1020:       return 0;",
          "1024: #endif//LIBIDN2",
          "1025:    return name;",
          "1026: }",
          "",
          "[Removed Lines]",
          "1015: static const int lftp_idn2_flags=IDN2_NONTRANSITIONAL|IDN2_NFC_INPUT;",
          "1021:    char *name_ace_tmp=0;",
          "1022:    if(idn2_to_ascii_lz(name,&name_ace_tmp,lftp_idn2_flags)==IDN2_OK)",
          "1023:       return xstring::get_tmp().set_allocated(name_ace_tmp);",
          "",
          "[Added Lines]",
          "1020:    static xstring_c name_ace_tmp;",
          "1021:    name_ace_tmp.unset();",
          "1022:    if(idn2_to_ascii_lz(name,name_ace_tmp.buf_ptr(),0)==IDN2_OK) {",
          "1023:       xmalloc_register_block((void*)name_ace_tmp.get());",
          "1024:       return name_ace_tmp;",
          "1025:    }",
          "",
          "---------------"
        ],
        "src/misc.h||src/misc.h": [
          "File: src/misc.h -> src/misc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: char *xgetcwd();",
          "70: int percent(off_t offset,off_t size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: template<class STR> void xgetcwd_to(STR& s) { s.set_allocated(xgetcwd()); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97: void xgettimeofday(time_t *sec, int *usec);",
          "",
          "[Removed Lines]",
          "94: char *Subst(const char *txt, const subst_t *s);",
          "",
          "[Added Lines]",
          "95: xstring& SubstTo(xstring& buf,const char *txt,const subst_t *s);",
          "",
          "---------------"
        ],
        "src/resource.cc||src/resource.cc": [
          "File: src/resource.cc -> src/resource.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:    if(url.user && !url.pass)",
          "53:    {",
          "54:       url.pass.set(GetPass(_(\"ftp:proxy password: \")));",
          "56:    }",
          "57:    return 0;",
          "58: }",
          "",
          "[Removed Lines]",
          "55:       p->set_allocated(url.Combine());",
          "",
          "[Added Lines]",
          "55:       p->truncate();",
          "56:       url.CombineTo(*p);",
          "",
          "---------------"
        ],
        "src/url.cc||src/url.cc": [
          "File: src/url.cc -> src/url.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:    xstring buf(\"\");",
          "297:    return CombineTo(buf,home,use_rfc1738).borrow();",
          "298: }",
          "300: {",
          "301:    bool is_file=!xstrcmp(proto,\"file\");",
          "302:    bool is_ftp=(!xstrcmp(proto,\"ftp\") || !xstrcmp(proto,\"hftp\"));",
          "",
          "[Removed Lines]",
          "299: xstring& ParsedURL::CombineTo(xstring& u,const char *home,bool use_rfc1738)",
          "",
          "[Added Lines]",
          "299: xstring& ParsedURL::CombineTo(xstring& u,const char *home,bool use_rfc1738) const",
          "",
          "---------------"
        ],
        "src/url.h||src/url.h": [
          "File: src/url.h -> src/url.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:    void parse(const char *url,bool proto_required=false,bool use_rfc1738=true);",
          "40:    ~ParsedURL();",
          "44:    char *Combine(const char *home=0,bool use_rfc1738=true);",
          "45: };",
          "",
          "[Removed Lines]",
          "42:    xstring& CombineTo(xstring &buf,const char *home=0,bool use_rfc1738=true);",
          "",
          "[Added Lines]",
          "42:    xstring& CombineTo(xstring &buf,const char *home=0,bool use_rfc1738=true) const;",
          "43:    const char *CombineTo(xstring_c &buf,const char *home=0,bool use_rfc1738=true) const {",
          "44:       xstring tmp; tmp.move_here(buf);",
          "45:       return buf.move_here(CombineTo(tmp,home,use_rfc1738));",
          "46:    }",
          "",
          "---------------"
        ],
        "src/xstring.cc||src/xstring.cc": [
          "File: src/xstring.cc -> src/xstring.cc"
        ],
        "src/xstring.h||src/xstring.h": [
          "File: src/xstring.h -> src/xstring.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:    const char *set(const char *s) { return xstrset(buf,s); }",
          "135:    const char *nset(const char *s,int n) { return xstrset(buf,s,n); }",
          "136:    const char *set_allocated(char *s) { xfree(buf); return buf=s; }",
          "138:    const char *vset(...) ATTRIBUTE_SENTINEL;",
          "139:    void truncate(size_t n=0) { if(buf) buf[n]=0; }",
          "140:    char *borrow() { return replace_value(buf,(char*)0); }",
          "",
          "[Removed Lines]",
          "137:    const char *move_here(xstring_c& s) { return set_allocated(s.borrow()); }",
          "",
          "[Added Lines]",
          "137:    template<class STR> const char *move_here(STR& s) { return set_allocated(s.borrow()); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:    xstring& nset(const char *s,int len);",
          "203:    xstring& set_allocated(char *s);",
          "204:    xstring& move_here(xstring&);",
          "205:    void swap(xstring& o);",
          "207:    xstring& set_substr(int start,size_t sublen,const char *,size_t);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:    xstring& move_here(xstring_c& s) { return set_allocated(s.borrow()); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:    xstring& set_substr(int start,size_t sublen,const xstring &s) { return set_substr(start,sublen,s.get(),s.length()); }",
          "210:    xstring& prepend(const char *s,size_t len) { return set_substr(0,0,s,len); }",
          "211:    xstring& prepend(const xstring &s) { return prepend(s.get(),s.length()); }",
          "213:    xstring& append(const char *s);",
          "214:    xstring& append(char c);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:    xstring& prepend(char c) { return prepend(&c,1); }",
          "",
          "---------------"
        ]
      }
    }
  ]
}