{
  "cve_id": "CVE-2016-7134",
  "cve_desc": "ext/curl/interface.c in PHP 7.x before 7.0.10 does not work around a libcurl integer overflow, which allows remote attackers to cause a denial of service (allocation error and heap-based buffer overflow) or possibly have unspecified other impact via a long string that is mishandled in a curl_escape call.",
  "repo": "php/php-src",
  "patch_hash": "72dbb7f416160f490c4e9987040989a10ad431c7",
  "patch_info": {
    "commit_hash": "72dbb7f416160f490c4e9987040989a10ad431c7",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/72dbb7f416160f490c4e9987040989a10ad431c7",
    "files": [
      "ext/curl/interface.c"
    ],
    "message": "Fix bug #72674 - check both curl_escape and curl_unescape",
    "before_after_code_files": [
      "ext/curl/interface.c||ext/curl/interface.c"
    ]
  },
  "patch_diff": {
    "ext/curl/interface.c||ext/curl/interface.c": [
      "File: ext/curl/interface.c -> ext/curl/interface.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3517: PHP_FUNCTION(curl_escape)",
      "3518: {",
      "3519:  char       *str = NULL, *res = NULL;",
      "3521:  zval       *zid;",
      "3522:  php_curl   *ch;",
      "",
      "[Removed Lines]",
      "3520:  size_t        str_len = 0;",
      "",
      "[Added Lines]",
      "3520:  size_t     str_len = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3529:   RETURN_FALSE;",
      "3530:  }",
      "3532:  if ((res = curl_easy_escape(ch->cp, str, str_len))) {",
      "3533:   RETVAL_STRING(res);",
      "3534:   curl_free(res);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3532:  if (ZEND_SIZE_T_INT_OVFL(str_len)) {",
      "3533:   RETURN_FALSE;",
      "3534:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3556:   RETURN_FALSE;",
      "3557:  }",
      "3560:   RETURN_FALSE;",
      "3561:  }",
      "",
      "[Removed Lines]",
      "3559:  if (str_len > INT_MAX) {",
      "",
      "[Added Lines]",
      "3563:  if (ZEND_SIZE_T_INT_OVFL(str_len)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "19c10bb629139c42f55f10c9c84dfe3ba29567c6",
      "candidate_info": {
        "commit_hash": "19c10bb629139c42f55f10c9c84dfe3ba29567c6",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/19c10bb629139c42f55f10c9c84dfe3ba29567c6",
        "files": [
          "ext/curl/interface.c"
        ],
        "message": "Fix bug #72674 - check both curl_escape and curl_unescape\n\n(cherry picked from commit 72dbb7f416160f490c4e9987040989a10ad431c7)",
        "before_after_code_files": [
          "ext/curl/interface.c||ext/curl/interface.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ext/curl/interface.c||ext/curl/interface.c"
          ],
          "candidate": [
            "ext/curl/interface.c||ext/curl/interface.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/curl/interface.c||ext/curl/interface.c": [
          "File: ext/curl/interface.c -> ext/curl/interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3517: PHP_FUNCTION(curl_escape)",
          "3518: {",
          "3519:  char       *str = NULL, *res = NULL;",
          "3521:  zval       *zid;",
          "3522:  php_curl   *ch;",
          "",
          "[Removed Lines]",
          "3520:  size_t        str_len = 0;",
          "",
          "[Added Lines]",
          "3520:  size_t     str_len = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3529:   RETURN_FALSE;",
          "3530:  }",
          "3532:  if ((res = curl_easy_escape(ch->cp, str, str_len))) {",
          "3533:   RETVAL_STRING(res);",
          "3534:   curl_free(res);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3532:  if (ZEND_SIZE_T_INT_OVFL(str_len)) {",
          "3533:   RETURN_FALSE;",
          "3534:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3556:   RETURN_FALSE;",
          "3557:  }",
          "3560:   RETURN_FALSE;",
          "3561:  }",
          "",
          "[Removed Lines]",
          "3559:  if (str_len > INT_MAX) {",
          "",
          "[Added Lines]",
          "3563:  if (ZEND_SIZE_T_INT_OVFL(str_len)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "994170ea805627796df2e09588f2991017573497",
      "candidate_info": {
        "commit_hash": "994170ea805627796df2e09588f2991017573497",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/994170ea805627796df2e09588f2991017573497",
        "files": [
          "ext/curl/curl_file.c",
          "ext/curl/interface.c",
          "ext/curl/multi.c",
          "ext/curl/share.c"
        ],
        "message": "Migrate curl to new parameters API\n\nPlus a handful of char*->zend_string* conversions",
        "before_after_code_files": [
          "ext/curl/curl_file.c||ext/curl/curl_file.c",
          "ext/curl/interface.c||ext/curl/interface.c",
          "ext/curl/multi.c||ext/curl/multi.c",
          "ext/curl/share.c||ext/curl/share.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/curl/interface.c||ext/curl/interface.c"
          ],
          "candidate": [
            "ext/curl/interface.c||ext/curl/interface.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/curl/curl_file.c||ext/curl/curl_file.c": [
          "File: ext/curl/curl_file.c -> ext/curl/curl_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static void curlfile_ctor(INTERNAL_FUNCTION_PARAMETERS)",
          "33: {",
          "36:  zval *cf = return_value;",
          "46:  if (mime) {",
          "48:  }",
          "50:  if (postname) {",
          "52:  }",
          "53: }",
          "",
          "[Removed Lines]",
          "34:  char *fname = NULL, *mime = NULL, *postname = NULL;",
          "35:  size_t fname_len, mime_len, postname_len;",
          "38:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s|ss\", &fname, &fname_len, &mime, &mime_len, &postname, &postname_len) == FAILURE) {",
          "39:   return;",
          "40:  }",
          "42:  if (fname) {",
          "43:   zend_update_property_string(curl_CURLFile_class, cf, \"name\", sizeof(\"name\")-1, fname);",
          "44:  }",
          "47:   zend_update_property_string(curl_CURLFile_class, cf, \"mime\", sizeof(\"mime\")-1, mime);",
          "51:   zend_update_property_string(curl_CURLFile_class, cf, \"postname\", sizeof(\"postname\")-1, postname);",
          "",
          "[Added Lines]",
          "34:  zend_string *fname, *mime = NULL, *postname = NULL;",
          "37:  ZEND_PARSE_PARAMETERS_START(1,3)",
          "38:   Z_PARAM_STR(fname)",
          "39:   Z_PARAM_OPTIONAL",
          "40:   Z_PARAM_STR(mime)",
          "41:   Z_PARAM_STR(postname)",
          "42:  ZEND_PARSE_PARAMETERS_END();",
          "44:  zend_update_property_string(curl_CURLFile_class, cf, \"name\", sizeof(\"name\")-1, ZSTR_VAL(fname));",
          "47:   zend_update_property_string(curl_CURLFile_class, cf, \"mime\", sizeof(\"mime\")-1, ZSTR_VAL(mime));",
          "51:   zend_update_property_string(curl_CURLFile_class, cf, \"postname\", sizeof(\"postname\")-1, ZSTR_VAL(postname));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: static void curlfile_set_property(char *name, size_t name_len, INTERNAL_FUNCTION_PARAMETERS)",
          "86: {",
          "94: }",
          "",
          "[Removed Lines]",
          "87:  char *arg = NULL;",
          "88:  size_t arg_len;",
          "90:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &arg, &arg_len) == FAILURE) {",
          "91:   return;",
          "92:  }",
          "93:  zend_update_property_string(curl_CURLFile_class, getThis(), name, name_len, arg);",
          "",
          "[Added Lines]",
          "87:  zend_string *arg;",
          "89:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "90:   Z_PARAM_STR(arg)",
          "91:  ZEND_PARSE_PARAMETERS_END();",
          "93:  zend_update_property_string(curl_CURLFile_class, getThis(), name, name_len, ZSTR_VAL(arg));",
          "",
          "---------------"
        ],
        "ext/curl/interface.c||ext/curl/interface.c": [
          "File: ext/curl/interface.c -> ext/curl/interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1964: {",
          "1965:  php_curl *ch;",
          "1966:  CURL   *cp;",
          "1974:  cp = curl_easy_init();",
          "1975:  if (!cp) {",
          "",
          "[Removed Lines]",
          "1967:  char   *url = NULL;",
          "1968:  size_t    url_len = 0;",
          "1970:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"|s\", &url, &url_len) == FAILURE) {",
          "1971:   return;",
          "1972:  }",
          "",
          "[Added Lines]",
          "1967:  zend_string *url = NULL;",
          "1969:  ZEND_PARSE_PARAMETERS_START(0,1)",
          "1970:   Z_PARAM_OPTIONAL",
          "1971:   Z_PARAM_STR(url)",
          "1972:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1988:  _php_curl_set_default_options(ch);",
          "1990:  if (url) {",
          "1992:    _php_curl_close_ex(ch);",
          "1993:    RETURN_FALSE;",
          "1994:   }",
          "",
          "[Removed Lines]",
          "1991:   if (php_curl_option_url(ch, url, url_len) == FAILURE) {",
          "",
          "[Added Lines]",
          "1991:   if (php_curl_option_url(ch, ZSTR_VAL(url), ZSTR_LEN(url)) == FAILURE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2080:  zval  *zid;",
          "2081:  php_curl *ch, *dupch;",
          "2087:  if ((ch = (php_curl*)zend_fetch_resource(Z_RES_P(zid), le_curl_name, le_curl)) == NULL) {",
          "2088:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "2083:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &zid) == FAILURE) {",
          "2084:   return;",
          "2085:  }",
          "",
          "[Added Lines]",
          "2083:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "2084:   Z_PARAM_RESOURCE(zid)",
          "2085:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3311:  zval  *zid;",
          "3312:  php_curl *ch;",
          "3318:  if ((ch = (php_curl*)zend_fetch_resource(Z_RES_P(zid), le_curl_name, le_curl)) == NULL) {",
          "3319:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "3314:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &zid) == FAILURE) {",
          "3315:   return;",
          "3316:  }",
          "",
          "[Added Lines]",
          "3314:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "3315:   Z_PARAM_RESOURCE(zid)",
          "3316:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3535: PHP_FUNCTION(curl_escape)",
          "3536: {",
          "3546:  if ((ch = (php_curl*)zend_fetch_resource(Z_RES_P(zid), le_curl_name, le_curl)) == NULL) {",
          "3547:   RETURN_FALSE;",
          "3548:  }",
          "3551:   RETURN_FALSE;",
          "3552:  }",
          "3555:   RETVAL_STRING(res);",
          "3556:   curl_free(res);",
          "3557:  } else {",
          "",
          "[Removed Lines]",
          "3537:  char       *str = NULL, *res = NULL;",
          "3538:  size_t     str_len = 0;",
          "3539:  zval       *zid;",
          "3540:  php_curl   *ch;",
          "3542:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"rs\", &zid, &str, &str_len) == FAILURE) {",
          "3543:   return;",
          "3544:  }",
          "3550:  if (ZEND_SIZE_T_INT_OVFL(str_len)) {",
          "3554:  if ((res = curl_easy_escape(ch->cp, str, str_len))) {",
          "",
          "[Added Lines]",
          "3537:  zend_string *str;",
          "3538:  char        *res;",
          "3539:  zval        *zid;",
          "3540:  php_curl    *ch;",
          "3542:  ZEND_PARSE_PARAMETERS_START(2,2)",
          "3543:   Z_PARAM_RESOURCE(zid)",
          "3544:   Z_PARAM_STR(str)",
          "3545:  ZEND_PARSE_PARAMETERS_END();",
          "3551:  if (ZEND_SIZE_T_INT_OVFL(ZSTR_LEN(str))) {",
          "3555:  if ((res = curl_easy_escape(ch->cp, ZSTR_VAL(str), ZSTR_LEN(str)))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3565: PHP_FUNCTION(curl_unescape)",
          "3566: {",
          "3577:  if ((ch = (php_curl*)zend_fetch_resource(Z_RES_P(zid), le_curl_name, le_curl)) == NULL) {",
          "3578:   RETURN_FALSE;",
          "3579:  }",
          "3582:   RETURN_FALSE;",
          "3583:  }",
          "3586:   RETVAL_STRINGL(out, out_len);",
          "3587:   curl_free(out);",
          "3588:  } else {",
          "",
          "[Removed Lines]",
          "3567:  char       *str = NULL, *out = NULL;",
          "3568:  size_t     str_len = 0;",
          "3569:  int        out_len;",
          "3570:  zval       *zid;",
          "3571:  php_curl   *ch;",
          "3573:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"rs\", &zid, &str, &str_len) == FAILURE) {",
          "3574:   return;",
          "3575:  }",
          "3581:  if (ZEND_SIZE_T_INT_OVFL(str_len)) {",
          "3585:  if ((out = curl_easy_unescape(ch->cp, str, str_len, &out_len))) {",
          "",
          "[Added Lines]",
          "3568:  char        *out = NULL;",
          "3569:  int          out_len;",
          "3570:  zval        *zid;",
          "3571:  zend_string *str;",
          "3572:  php_curl    *ch;",
          "3574:  ZEND_PARSE_PARAMETERS_START(2,2)",
          "3575:   Z_PARAM_RESOURCE(zid)",
          "3576:   Z_PARAM_STR(str)",
          "3577:  ZEND_PARSE_PARAMETERS_END();",
          "3583:  if (ZEND_SIZE_T_INT_OVFL(ZSTR_LEN(str))) {",
          "3587:  if ((out = curl_easy_unescape(ch->cp, ZSTR_VAL(str), ZSTR_LEN(str), &out_len))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3601:  zval       *zid;",
          "3602:  php_curl   *ch;",
          "3608:  if ((ch = (php_curl*)zend_fetch_resource(Z_RES_P(zid), le_curl_name, le_curl)) == NULL) {",
          "3609:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "3604:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"rl\", &zid, &bitmask) == FAILURE) {",
          "3605:   return;",
          "3606:  }",
          "",
          "[Added Lines]",
          "3606:  ZEND_PARSE_PARAMETERS_START(2,2)",
          "3607:   Z_PARAM_RESOURCE(zid)",
          "3608:   Z_PARAM_LONG(bitmask)",
          "3609:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------"
        ],
        "ext/curl/multi.c||ext/curl/multi.c": [
          "File: ext/curl/multi.c -> ext/curl/multi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  zval tmp_val;",
          "83:  CURLMcode error = CURLM_OK;",
          "89:  if ((mh = (php_curlm *)zend_fetch_resource(Z_RES_P(z_mh), le_curl_multi_handle_name, le_curl_multi_handle)) == NULL) {",
          "90:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "85:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"rr\", &z_mh, &z_ch) == FAILURE) {",
          "86:   return;",
          "87:  }",
          "",
          "[Added Lines]",
          "85:  ZEND_PARSE_PARAMETERS_START(2,2)",
          "86:   Z_PARAM_RESOURCE(z_mh)",
          "87:   Z_PARAM_RESOURCE(z_ch)",
          "88:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:  php_curl  *ch;",
          "170:  CURLMcode error = CURLM_OK;",
          "176:  if ((mh = (php_curlm *)zend_fetch_resource(Z_RES_P(z_mh), le_curl_multi_handle_name, le_curl_multi_handle)) == NULL) {",
          "177:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "172:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"rr\", &z_mh, &z_ch) == FAILURE) {",
          "173:   return;",
          "174:  }",
          "",
          "[Added Lines]",
          "173:  ZEND_PARSE_PARAMETERS_START(2,2)",
          "174:   Z_PARAM_RESOURCE(z_mh)",
          "175:   Z_PARAM_RESOURCE(z_ch)",
          "176:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "214:  struct timeval  to;",
          "215:  CURLMcode error = CURLM_OK;",
          "221:  if ((mh = (php_curlm *)zend_fetch_resource(Z_RES_P(z_mh), le_curl_multi_handle_name, le_curl_multi_handle)) == NULL) {",
          "222:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "217:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r|d\", &z_mh, &timeout) == FAILURE) {",
          "218:   return;",
          "219:  }",
          "",
          "[Added Lines]",
          "219:  ZEND_PARSE_PARAMETERS_START(1,2)",
          "220:   Z_PARAM_RESOURCE(z_mh)",
          "221:   Z_PARAM_OPTIONAL",
          "222:   Z_PARAM_DOUBLE(timeout)",
          "223:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:  int        still_running;",
          "249:  CURLMcode error = CURLM_OK;",
          "255:  if ((mh = (php_curlm *)zend_fetch_resource(Z_RES_P(z_mh), le_curl_multi_handle_name, le_curl_multi_handle)) == NULL) {",
          "256:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "251:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"rz/\", &z_mh, &z_still_running) == FAILURE) {",
          "252:   return;",
          "253:  }",
          "",
          "[Added Lines]",
          "255:  ZEND_PARSE_PARAMETERS_START(2, 2)",
          "256:   Z_PARAM_RESOURCE(z_mh)",
          "257:   Z_PARAM_ZVAL_DEREF_EX(z_still_running, 0, 1)",
          "258:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "289:  zval     *z_ch;",
          "290:  php_curl *ch;",
          "296:  if ((ch = (php_curl *)zend_fetch_resource(Z_RES_P(z_ch), le_curl_name, le_curl)) == NULL) {",
          "297:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "292:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &z_ch) == FAILURE) {",
          "293:   return;",
          "294:  }",
          "",
          "[Added Lines]",
          "297:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "298:   Z_PARAM_RESOURCE(z_ch)",
          "299:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "319:  int        queued_msgs;",
          "320:  zval      *zmsgs_in_queue = NULL;",
          "326:  if ((mh = (php_curlm *)zend_fetch_resource(Z_RES_P(z_mh), le_curl_multi_handle_name, le_curl_multi_handle)) == NULL) {",
          "327:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "322:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r|z/\", &z_mh, &zmsgs_in_queue) == FAILURE) {",
          "323:   return;",
          "324:  }",
          "",
          "[Added Lines]",
          "327:  ZEND_PARSE_PARAMETERS_START(1, 2)",
          "328:   Z_PARAM_RESOURCE(z_mh)",
          "329:   Z_PARAM_OPTIONAL",
          "330:   Z_PARAM_ZVAL_DEREF_EX(zmsgs_in_queue, 0, 1)",
          "331:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "369:  zval      *z_mh;",
          "370:  php_curlm *mh;",
          "376:  if ((mh = (php_curlm *)zend_fetch_resource(Z_RES_P(z_mh), le_curl_multi_handle_name, le_curl_multi_handle)) == NULL) {",
          "377:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "372:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &z_mh) == FAILURE) {",
          "373:   return;",
          "374:  }",
          "",
          "[Added Lines]",
          "379:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "380:   Z_PARAM_RESOURCE(z_mh)",
          "381:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "420:  zval        *z_mh;",
          "421:  php_curlm   *mh;",
          "427:  if ((mh = (php_curlm *)zend_fetch_resource(Z_RES_P(z_mh), le_curl_multi_handle_name, le_curl_multi_handle)) == NULL) {",
          "428:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "423:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &z_mh) == FAILURE) {",
          "424:   return;",
          "425:  }",
          "",
          "[Added Lines]",
          "430:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "431:   Z_PARAM_RESOURCE(z_mh)",
          "432:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "440:  zend_long code;",
          "441:  const char *str;",
          "447:  str = curl_multi_strerror(code);",
          "448:  if (str) {",
          "",
          "[Removed Lines]",
          "443:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"l\", &code) == FAILURE) {",
          "444:   return;",
          "445:  }",
          "",
          "[Added Lines]",
          "450:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "451:   Z_PARAM_LONG(code)",
          "452:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "598:  zend_long        options;",
          "599:  php_curlm *mh;",
          "605:  if ((mh = (php_curlm *)zend_fetch_resource(Z_RES_P(z_mh), le_curl_multi_handle_name, le_curl_multi_handle)) == NULL) {",
          "606:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "601:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"rlz\", &z_mh, &options, &zvalue) == FAILURE) {",
          "602:   return;",
          "603:  }",
          "",
          "[Added Lines]",
          "608:  ZEND_PARSE_PARAMETERS_START(3,3)",
          "609:   Z_PARAM_RESOURCE(z_mh)",
          "610:   Z_PARAM_LONG(options)",
          "611:   Z_PARAM_ZVAL_DEREF(zvalue)",
          "612:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------"
        ],
        "ext/curl/share.c||ext/curl/share.c": [
          "File: ext/curl/share.c -> ext/curl/share.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  zval *z_sh;",
          "60:  php_curlsh *sh;",
          "66:  if ((sh = (php_curlsh *)zend_fetch_resource(Z_RES_P(z_sh), le_curl_share_handle_name, le_curl_share_handle)) == NULL) {",
          "67:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "62:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &z_sh) == FAILURE) {",
          "63:   return;",
          "64:  }",
          "",
          "[Added Lines]",
          "62:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "63:   Z_PARAM_RESOURCE(z_sh)",
          "64:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:  zend_long        options;",
          "105:  php_curlsh *sh;",
          "111:  if ((sh = (php_curlsh *)zend_fetch_resource(Z_RES_P(zid), le_curl_share_handle_name, le_curl_share_handle)) == NULL) {",
          "112:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "107:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"rlz\", &zid, &options, &zvalue) == FAILURE) {",
          "108:   return;",
          "109:  }",
          "",
          "[Added Lines]",
          "107:  ZEND_PARSE_PARAMETERS_START(3,3)",
          "108:   Z_PARAM_RESOURCE(zid)",
          "109:   Z_PARAM_LONG(options)",
          "110:   Z_PARAM_ZVAL_DEREF(zvalue)",
          "111:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:  zval        *z_sh;",
          "139:  php_curlsh  *sh;",
          "145:  if ((sh = (php_curlsh *)zend_fetch_resource(Z_RES_P(z_sh), le_curl_share_handle_name, le_curl_share_handle)) == NULL) {",
          "146:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "141:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &z_sh) == FAILURE) {",
          "142:   return;",
          "143:  }",
          "",
          "[Added Lines]",
          "143:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "144:   Z_PARAM_RESOURCE(z_sh)",
          "145:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:  zend_long code;",
          "160:  const char *str;",
          "166:  str = curl_share_strerror(code);",
          "167:  if (str) {",
          "",
          "[Removed Lines]",
          "162:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"l\", &code) == FAILURE) {",
          "163:   return;",
          "164:  }",
          "",
          "[Added Lines]",
          "164:  ZEND_PARSE_PARAMETERS_START(1,1)",
          "165:   Z_PARAM_LONG(code)",
          "166:  ZEND_PARSE_PARAMETERS_END();",
          "",
          "---------------"
        ]
      }
    }
  ]
}