{
  "cve_id": "CVE-2021-28041",
  "cve_desc": "ssh-agent in OpenSSH before 8.5 has a double free that may be relevant in a few less-common scenarios, such as unconstrained agent-socket access on a legacy operating system, or the forwarding of an agent to an attacker-controlled host.",
  "repo": "openssh/openssh-portable",
  "patch_hash": "e04fd6dde16de1cdc5a4d9946397ff60d96568db",
  "patch_info": {
    "commit_hash": "e04fd6dde16de1cdc5a4d9946397ff60d96568db",
    "repo": "openssh/openssh-portable",
    "commit_url": "https://github.com/openssh/openssh-portable/commit/e04fd6dde16de1cdc5a4d9946397ff60d96568db",
    "files": [
      "ssh-agent.c"
    ],
    "message": "upstream: factor SSH_AGENT_CONSTRAIN_EXTENSION parsing into its own\n\nfunction and remove an unused variable; ok dtucker@\n\nOpenBSD-Commit-ID: e1a938657fbf7ef0ba5e73b30365734a0cc96559",
    "before_after_code_files": [
      "ssh-agent.c||ssh-agent.c"
    ]
  },
  "patch_diff": {
    "ssh-agent.c||ssh-agent.c": [
      "File: ssh-agent.c -> ssh-agent.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "574:   return (deadline - now);",
      "575: }",
      "577: static int",
      "578: parse_key_constraints(struct sshbuf *m, struct sshkey *k, time_t *deathp,",
      "579:     u_int *secondsp, int *confirmp, char **sk_providerp)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "577: static int",
      "578: parse_key_constraint_extension(struct sshbuf *m, char **sk_providerp)",
      "579: {",
      "580:  char *ext_name = NULL;",
      "581:  int r;",
      "583:  if ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {",
      "584:   error_fr(r, \"parse constraint extension\");",
      "585:   goto out;",
      "586:  }",
      "587:  debug_f(\"constraint ext %s\", ext_name);",
      "588:  if (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {",
      "589:   if (sk_providerp == NULL) {",
      "590:    error_f(\"%s not valid here\", ext_name);",
      "591:    r = SSH_ERR_INVALID_FORMAT;",
      "592:    goto out;",
      "593:   }",
      "594:   if (*sk_providerp != NULL) {",
      "595:    error_f(\"%s already set\", ext_name);",
      "596:    r = SSH_ERR_INVALID_FORMAT;",
      "597:    goto out;",
      "598:   }",
      "599:   if ((r = sshbuf_get_cstring(m, sk_providerp, NULL)) != 0) {",
      "600:    error_fr(r, \"parse %s\", ext_name);",
      "601:    goto out;",
      "602:   }",
      "603:  } else {",
      "604:   error_f(\"unsupported constraint \\\"%s\\\"\", ext_name);",
      "605:   r = SSH_ERR_FEATURE_UNSUPPORTED;",
      "606:   goto out;",
      "607:  }",
      "609:  r = 0;",
      "610:  out:",
      "611:  free(ext_name);",
      "612:  return r;",
      "613: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "581:  u_char ctype;",
      "582:  int r;",
      "583:  u_int seconds, maxsign = 0;",
      "587:  while (sshbuf_len(m)) {",
      "588:   if ((r = sshbuf_get_u8(m, &ctype)) != 0) {",
      "589:    error_fr(r, \"parse constraint type\");",
      "591:   }",
      "592:   switch (ctype) {",
      "593:   case SSH_AGENT_CONSTRAIN_LIFETIME:",
      "594:    if (*deathp != 0) {",
      "595:     error_f(\"lifetime already set\");",
      "597:    }",
      "598:    if ((r = sshbuf_get_u32(m, &seconds)) != 0) {",
      "599:     error_fr(r, \"parse lifetime constraint\");",
      "601:    }",
      "",
      "[Removed Lines]",
      "584:  char *ext_name = NULL;",
      "585:  struct sshbuf *b = NULL;",
      "590:    goto err;",
      "596:     goto err;",
      "600:     goto err;",
      "",
      "[Added Lines]",
      "626:    goto out;",
      "632:     r = SSH_ERR_INVALID_FORMAT;",
      "633:     goto out;",
      "637:     goto out;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "605:   case SSH_AGENT_CONSTRAIN_CONFIRM:",
      "606:    if (*confirmp != 0) {",
      "607:     error_f(\"confirm already set\");",
      "609:    }",
      "611:    break;",
      "612:   case SSH_AGENT_CONSTRAIN_MAXSIGN:",
      "613:    if (k == NULL) {",
      "614:     error_f(\"maxsign not valid here\");",
      "616:    }",
      "617:    if (maxsign != 0) {",
      "618:     error_f(\"maxsign already set\");",
      "620:    }",
      "621:    if ((r = sshbuf_get_u32(m, &maxsign)) != 0) {",
      "622:     error_fr(r, \"parse maxsign constraint\");",
      "624:    }",
      "625:    if ((r = sshkey_enable_maxsign(k, maxsign)) != 0) {",
      "626:     error_fr(r, \"enable maxsign\");",
      "628:    }",
      "629:    break;",
      "630:   case SSH_AGENT_CONSTRAIN_EXTENSION:",
      "656:    break;",
      "657:   default:",
      "658:    error_f(\"Unknown constraint %d\", ctype);",
      "663:   }",
      "664:  }",
      "667: }",
      "669: static void",
      "",
      "[Removed Lines]",
      "608:     goto err;",
      "615:     goto err;",
      "619:     goto err;",
      "623:     goto err;",
      "627:     goto err;",
      "631:    if ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {",
      "632:     error_fr(r, \"parse constraint extension\");",
      "633:     goto err;",
      "634:    }",
      "635:    debug_f(\"constraint ext %s\", ext_name);",
      "636:    if (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {",
      "637:     if (sk_providerp == NULL) {",
      "638:      error_f(\"%s not valid here\", ext_name);",
      "639:      goto err;",
      "640:     }",
      "641:     if (*sk_providerp != NULL) {",
      "642:      error_f(\"%s already set\", ext_name);",
      "643:      goto err;",
      "644:     }",
      "645:     if ((r = sshbuf_get_cstring(m,",
      "646:         sk_providerp, NULL)) != 0) {",
      "647:      error_fr(r, \"parse %s\", ext_name);",
      "648:      goto err;",
      "649:     }",
      "650:    } else {",
      "651:     error_f(\"unsupported constraint \\\"%s\\\"\",",
      "652:         ext_name);",
      "653:     goto err;",
      "654:    }",
      "655:    free(ext_name);",
      "659:  err:",
      "660:    free(ext_name);",
      "661:    sshbuf_free(b);",
      "662:    return -1;",
      "666:  return 0;",
      "",
      "[Added Lines]",
      "645:     r = SSH_ERR_INVALID_FORMAT;",
      "646:     goto out;",
      "653:     r = SSH_ERR_INVALID_FORMAT;",
      "654:     goto out;",
      "658:     r = SSH_ERR_INVALID_FORMAT;",
      "659:     goto out;",
      "663:     goto out;",
      "667:     goto out;",
      "671:    if ((r = parse_key_constraint_extension(m,",
      "672:        sk_providerp)) != 0)",
      "677:    r = SSH_ERR_FEATURE_UNSUPPORTED;",
      "678:    goto out;",
      "682:  r = 0;",
      "683:  out:",
      "684:  return r;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1fe16fd61bb53944ec510882acc0491abd66ff76",
      "candidate_info": {
        "commit_hash": "1fe16fd61bb53944ec510882acc0491abd66ff76",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/1fe16fd61bb53944ec510882acc0491abd66ff76",
        "files": [
          "ssh-agent.c"
        ],
        "message": "upstream: use recallocarray to allocate the agent sockets table;\n\nalso clear socket entries that are being marked as unused.\n\nspinkle in some debug2() spam to make it easier to watch an agent\ndo its thing.\n\nok markus\n\nOpenBSD-Commit-ID: 74582c8e82e96afea46f6c7b6813a429cbc75922",
        "before_after_code_files": [
          "ssh-agent.c||ssh-agent.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssh-agent.c||ssh-agent.c"
          ],
          "candidate": [
            "ssh-agent.c||ssh-agent.c"
          ]
        }
      },
      "candidate_diff": {
        "ssh-agent.c||ssh-agent.c": [
          "File: ssh-agent.c -> ssh-agent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175: close_socket(SocketEntry *e)",
          "176: {",
          "177:  close(e->fd);",
          "180:  sshbuf_free(e->input);",
          "181:  sshbuf_free(e->output);",
          "182:  sshbuf_free(e->request);",
          "183: }",
          "185: static void",
          "",
          "[Removed Lines]",
          "178:  e->fd = -1;",
          "179:  e->type = AUTH_UNUSED;",
          "",
          "[Added Lines]",
          "181:  memset(e, '\\0', sizeof(*e));",
          "182:  e->fd = -1;",
          "183:  e->type = AUTH_UNUSED;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:  struct sshbuf *msg;",
          "250:  int r;",
          "252:  if ((msg = sshbuf_new()) == NULL)",
          "253:   fatal_f(\"sshbuf_new failed\");",
          "254:  if ((r = sshbuf_put_u8(msg, SSH2_AGENT_IDENTITIES_ANSWER)) != 0 ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:  debug2_f(\"entering\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:  struct sshkey *key = NULL;",
          "442:  Identity *id;",
          "444:  if ((r = sshkey_froms(e->request, &key)) != 0) {",
          "445:   error_fr(r, \"parse key\");",
          "446:   goto done;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447:  debug2_f(\"entering\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "466: {",
          "467:  Identity *id;",
          "470:  for (id = TAILQ_FIRST(&idtab->idlist); id;",
          "471:      id = TAILQ_FIRST(&idtab->idlist)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "473:  debug2_f(\"entering\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "519:  u_char ctype;",
          "520:  int r = SSH_ERR_INTERNAL_ERROR;",
          "522:  if ((r = sshkey_private_deserialize(e->request, &k)) != 0 ||",
          "523:      k == NULL ||",
          "524:      (r = sshbuf_get_cstring(e->request, &comment, NULL)) != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "527:  debug2_f(\"entering\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "660:  static u_int fail_count = 0;",
          "661:  size_t pwlen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669:  debug2_f(\"entering\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "730:  struct sshkey **keys = NULL, *k;",
          "731:  Identity *id;",
          "733:  if ((r = sshbuf_get_cstring(e->request, &provider, NULL)) != 0 ||",
          "734:      (r = sshbuf_get_cstring(e->request, &pin, NULL)) != 0) {",
          "735:   error_fr(r, \"parse\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740:  debug2_f(\"entering\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "809:  int r, success = 0;",
          "810:  Identity *id, *nxt;",
          "812:  if ((r = sshbuf_get_cstring(e->request, &provider, NULL)) != 0 ||",
          "813:      (r = sshbuf_get_cstring(e->request, &pin, NULL)) != 0) {",
          "814:   error_fr(r, \"parse\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:  debug2_f(\"entering\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "951: {",
          "952:  u_int i, old_alloc, new_alloc;",
          "954:  set_nonblock(fd);",
          "956:  if (fd > max_fd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "963:  debug_f(\"type = %s\", type == AUTH_CONNECTION ? \"CONNECTION\" :",
          "964:      (type == AUTH_SOCKET ? \"SOCKET\" : \"UNKNOWN\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "968:   }",
          "969:  old_alloc = sockets_alloc;",
          "970:  new_alloc = sockets_alloc + 10;",
          "972:  for (i = old_alloc; i < new_alloc; i++)",
          "973:   sockets[i].type = AUTH_UNUSED;",
          "974:  sockets_alloc = new_alloc;",
          "",
          "[Removed Lines]",
          "971:  sockets = xreallocarray(sockets, new_alloc, sizeof(sockets[0]));",
          "",
          "[Added Lines]",
          "982:  sockets = xrecallocarray(sockets, old_alloc, new_alloc,",
          "983:      sizeof(sockets[0]));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37c70ea8d4f3664a88141bcdf0bf7a16bd5fd1ac",
      "candidate_info": {
        "commit_hash": "37c70ea8d4f3664a88141bcdf0bf7a16bd5fd1ac",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/37c70ea8d4f3664a88141bcdf0bf7a16bd5fd1ac",
        "files": [
          "ssh-agent.c"
        ],
        "message": "upstream: refactor key constraint parsing in ssh-agent\n\nKey constraints parsing code previously existed in both the \"add regular\nkey\" and \"add smartcard key\" path. This unifies them but also introduces\nmore consistency checking: duplicated constraints and constraints that\nare nonsensical for a particular situation (e.g. FIDO provider for a\nsmartcard key) are now banned.\n\nok markus@\n\nOpenBSD-Commit-ID: 511cb1b1c021ee1d51a4c2d649b937445de7983c",
        "before_after_code_files": [
          "ssh-agent.c||ssh-agent.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssh-agent.c||ssh-agent.c"
          ],
          "candidate": [
            "ssh-agent.c||ssh-agent.c"
          ]
        }
      },
      "candidate_diff": {
        "ssh-agent.c||ssh-agent.c": [
          "File: ssh-agent.c -> ssh-agent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:   return (deadline - now);",
          "575: }",
          "579: {",
          "587:  u_char ctype;",
          "599:    error_fr(r, \"parse constraint type\");",
          "600:    goto err;",
          "601:   }",
          "602:   switch (ctype) {",
          "603:   case SSH_AGENT_CONSTRAIN_LIFETIME:",
          "605:     error_fr(r, \"parse lifetime constraint\");",
          "606:     goto err;",
          "607:    }",
          "609:    break;",
          "610:   case SSH_AGENT_CONSTRAIN_CONFIRM:",
          "612:    break;",
          "613:   case SSH_AGENT_CONSTRAIN_MAXSIGN:",
          "615:     error_fr(r, \"parse maxsign constraint\");",
          "616:     goto err;",
          "617:    }",
          "",
          "[Removed Lines]",
          "577: static void",
          "578: process_add_identity(SocketEntry *e)",
          "580:  Identity *id;",
          "581:  int success = 0, confirm = 0;",
          "582:  u_int seconds = 0, maxsign;",
          "583:  char *fp, *comment = NULL, *ext_name = NULL, *sk_provider = NULL;",
          "584:  char canonical_provider[PATH_MAX];",
          "585:  time_t death = 0;",
          "586:  struct sshkey *k = NULL;",
          "588:  int r = SSH_ERR_INTERNAL_ERROR;",
          "590:  debug2_f(\"entering\");",
          "591:  if ((r = sshkey_private_deserialize(e->request, &k)) != 0 ||",
          "592:      k == NULL ||",
          "593:      (r = sshbuf_get_cstring(e->request, &comment, NULL)) != 0) {",
          "594:   error_fr(r, \"parse\");",
          "595:   goto err;",
          "596:  }",
          "597:  while (sshbuf_len(e->request)) {",
          "598:   if ((r = sshbuf_get_u8(e->request, &ctype)) != 0) {",
          "604:    if ((r = sshbuf_get_u32(e->request, &seconds)) != 0) {",
          "608:    death = monotime() + seconds;",
          "611:    confirm = 1;",
          "614:    if ((r = sshbuf_get_u32(e->request, &maxsign)) != 0) {",
          "",
          "[Added Lines]",
          "577: static int",
          "578: parse_key_constraints(struct sshbuf *m, struct sshkey *k, time_t *deathp,",
          "579:     u_int *secondsp, int *confirmp, char **sk_providerp)",
          "582:  int r;",
          "583:  u_int seconds, maxsign = 0;",
          "584:  char *ext_name = NULL, *sk_provider = NULL;",
          "585:  size_t pos;",
          "586:  struct sshbuf *b = NULL;",
          "588:  while (sshbuf_len(m)) {",
          "589:   if ((r = sshbuf_get_u8(m, &ctype)) != 0) {",
          "595:    if (*deathp != 0) {",
          "596:     error_f(\"lifetime already set\");",
          "597:     goto err;",
          "598:    }",
          "599:    if ((r = sshbuf_get_u32(m, &seconds)) != 0) {",
          "607:    if (*confirmp != 0) {",
          "608:     error_f(\"confirm already set\");",
          "609:     goto err;",
          "610:    }",
          "614:    if (k == NULL) {",
          "615:     error_f(\"maxsign not valid here\");",
          "616:     goto err;",
          "617:    }",
          "618:    if (maxsign != 0) {",
          "619:     error_f(\"maxsign already set\");",
          "620:     goto err;",
          "621:    }",
          "622:    if ((r = sshbuf_get_u32(m, &maxsign)) != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "621:    }",
          "622:    break;",
          "623:   case SSH_AGENT_CONSTRAIN_EXTENSION:",
          "626:     error_fr(r, \"parse constraint extension\");",
          "627:     goto err;",
          "628:    }",
          "629:    debug_f(\"constraint ext %s\", ext_name);",
          "630:    if (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {",
          "633:      goto err;",
          "634:     }",
          "637:      error_fr(r, \"parse %s\", ext_name);",
          "638:      goto err;",
          "639:     }",
          "",
          "[Removed Lines]",
          "624:    if ((r = sshbuf_get_cstring(e->request,",
          "625:        &ext_name, NULL)) != 0) {",
          "631:     if (sk_provider != NULL) {",
          "632:      error(\"%s already set\", ext_name);",
          "635:     if ((r = sshbuf_get_cstring(e->request,",
          "636:         &sk_provider, NULL)) != 0) {",
          "",
          "[Added Lines]",
          "632:    if ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {",
          "638:     if (sk_providerp == NULL) {",
          "639:      error_f(\"%s not valid here\", ext_name);",
          "640:      goto err;",
          "641:     }",
          "642:     if (*sk_providerp != NULL) {",
          "643:      error_f(\"%s already set\", ext_name);",
          "646:     if ((r = sshbuf_get_cstring(m,",
          "647:         sk_providerp, NULL)) != 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "647:   default:",
          "648:    error_f(\"Unknown constraint %d\", ctype);",
          "649:  err:",
          "651:    free(ext_name);",
          "656:   }",
          "657:  }",
          "658:  if (sk_provider != NULL) {",
          "659:   if (!sshkey_is_sk(k)) {",
          "660:    error(\"Cannot add provider: %s is not an \"",
          "661:        \"authenticator-hosted key\", sshkey_type(k));",
          "664:   }",
          "665:   if (strcasecmp(sk_provider, \"internal\") == 0) {",
          "666:    debug_f(\"internal provider\");",
          "",
          "[Removed Lines]",
          "650:    free(sk_provider);",
          "652:    sshbuf_reset(e->request);",
          "653:    free(comment);",
          "654:    sshkey_free(k);",
          "655:    goto send;",
          "662:    free(sk_provider);",
          "663:    goto send;",
          "",
          "[Added Lines]",
          "662:    sshbuf_free(b);",
          "663:    return -1;",
          "667:  return 0;",
          "668: }",
          "670: static void",
          "671: process_add_identity(SocketEntry *e)",
          "672: {",
          "673:  Identity *id;",
          "674:  int success = 0, confirm = 0;",
          "675:  char *fp, *comment = NULL, *ext_name = NULL, *sk_provider = NULL;",
          "676:  char canonical_provider[PATH_MAX];",
          "677:  time_t death = 0;",
          "678:  u_int seconds = 0;",
          "679:  struct sshkey *k = NULL;",
          "680:  int r = SSH_ERR_INTERNAL_ERROR;",
          "682:  debug2_f(\"entering\");",
          "683:  if ((r = sshkey_private_deserialize(e->request, &k)) != 0 ||",
          "684:      k == NULL ||",
          "685:      (r = sshbuf_get_cstring(e->request, &comment, NULL)) != 0) {",
          "686:   error_fr(r, \"parse\");",
          "687:   goto out;",
          "688:  }",
          "689:  if (parse_key_constraints(e->request, k, &death, &seconds, &confirm,",
          "690:      &sk_provider) != 0) {",
          "691:   error_f(\"failed to parse constraints\");",
          "692:   sshbuf_reset(e->request);",
          "693:   goto out;",
          "694:  }",
          "700:    goto out;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "669:     verbose(\"failed provider \\\"%.100s\\\": \"",
          "670:         \"realpath: %s\", sk_provider,",
          "671:         strerror(errno));",
          "674:    }",
          "675:    free(sk_provider);",
          "676:    sk_provider = xstrdup(canonical_provider);",
          "",
          "[Removed Lines]",
          "672:     free(sk_provider);",
          "673:     goto send;",
          "",
          "[Added Lines]",
          "709:     goto out;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "678:        allowed_providers, 0) != 1) {",
          "679:     error(\"Refusing add key: \"",
          "680:         \"provider %s not allowed\", sk_provider);",
          "683:    }",
          "684:   }",
          "685:  }",
          "686:  if ((r = sshkey_shield_private(k)) != 0) {",
          "687:   error_fr(r, \"shield private\");",
          "689:  }",
          "692:  if (lifetime && !death)",
          "693:   death = monotime() + lifetime;",
          "694:  if ((id = lookup_identity(k)) == NULL) {",
          "",
          "[Removed Lines]",
          "681:     free(sk_provider);",
          "682:     goto send;",
          "688:   goto err;",
          "691:  success = 1;",
          "",
          "[Added Lines]",
          "717:     goto out;",
          "723:   goto out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "712:      SSH_FP_DEFAULT)) == NULL)",
          "713:   fatal_f(\"sshkey_fingerprint failed\");",
          "714:  debug_f(\"add %s %s \\\"%.100s\\\" (life: %u) (confirm: %u) \"",
          "717:  free(fp);",
          "719:  send_status(e, success);",
          "720: }",
          "",
          "[Removed Lines]",
          "715:      \"(provider: %s)\", sshkey_ssh_name(k), fp, comment,",
          "716:      seconds, confirm, sk_provider == NULL ? \"none\" : sk_provider);",
          "718: send:",
          "",
          "[Added Lines]",
          "749:      \"(provider: %s)\", sshkey_ssh_name(k), fp, comment, seconds,",
          "750:      confirm, sk_provider == NULL ? \"none\" : sk_provider);",
          "753:  k = NULL;",
          "754:  comment = NULL;",
          "755:  sk_provider = NULL;",
          "756:  success = 1;",
          "757:  out:",
          "758:  free(sk_provider);",
          "759:  free(comment);",
          "760:  sshkey_free(k);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "794:  char *provider = NULL, *pin = NULL, canonical_provider[PATH_MAX];",
          "795:  char **comments = NULL;",
          "796:  int r, i, count = 0, success = 0, confirm = 0;",
          "798:  time_t death = 0;",
          "799:  u_char type;",
          "800:  struct sshkey **keys = NULL, *k;",
          "",
          "[Removed Lines]",
          "797:  u_int seconds;",
          "",
          "[Added Lines]",
          "839:  u_int seconds = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "806:   error_fr(r, \"parse\");",
          "807:   goto send;",
          "808:  }",
          "830:  }",
          "831:  if (realpath(provider, canonical_provider) == NULL) {",
          "832:   verbose(\"failed PKCS#11 add of \\\"%.100s\\\": realpath: %s\",",
          "",
          "[Removed Lines]",
          "810:  while (sshbuf_len(e->request)) {",
          "811:   if ((r = sshbuf_get_u8(e->request, &type)) != 0) {",
          "812:    error_fr(r, \"parse type\");",
          "813:    goto send;",
          "814:   }",
          "815:   switch (type) {",
          "816:   case SSH_AGENT_CONSTRAIN_LIFETIME:",
          "817:    if ((r = sshbuf_get_u32(e->request, &seconds)) != 0) {",
          "818:     error_fr(r, \"parse lifetime\");",
          "819:     goto send;",
          "820:    }",
          "821:    death = monotime() + seconds;",
          "822:    break;",
          "823:   case SSH_AGENT_CONSTRAIN_CONFIRM:",
          "824:    confirm = 1;",
          "825:    break;",
          "826:   default:",
          "827:    error_f(\"Unknown constraint type %d\", type);",
          "828:    goto send;",
          "829:   }",
          "",
          "[Added Lines]",
          "851:  if (parse_key_constraints(e->request, NULL, &death, &seconds, &confirm,",
          "852:      NULL) != 0) {",
          "853:   error_f(\"failed to parse constraints\");",
          "854:   goto send;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39f00dcf44915f20684160f0a88d3ef8a3278351",
      "candidate_info": {
        "commit_hash": "39f00dcf44915f20684160f0a88d3ef8a3278351",
        "repo": "openssh/openssh-portable",
        "commit_url": "https://github.com/openssh/openssh-portable/commit/39f00dcf44915f20684160f0a88d3ef8a3278351",
        "files": [
          "ssh-agent.c"
        ],
        "message": "upstream: ssh-agent side of destination constraints\n\nGives ssh-agent the ability to parse restrict-destination-v00@openssh.com\nconstraints and to apply them to keys.\n\nCheck constraints against the hostkeys recorded for a SocketEntry when\nattempting a signature, adding, listing or deleting keys. Note that\nthe \"delete all keys\" request will remove constrained keys regardless of\nlocation.\n\nfeedback Jann Horn & markus@\nok markus@\n\nOpenBSD-Commit-ID: 84a7fb81106c2d609a6ac17469436df16d196319",
        "before_after_code_files": [
          "ssh-agent.c||ssh-agent.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssh-agent.c||ssh-agent.c"
          ],
          "candidate": [
            "ssh-agent.c||ssh-agent.c"
          ]
        }
      },
      "candidate_diff": {
        "ssh-agent.c||ssh-agent.c": [
          "File: ssh-agent.c -> ssh-agent.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: #include \"pathnames.h\"",
          "93: #include \"ssh-pkcs11.h\"",
          "94: #include \"sk-api.h\"",
          "96: #ifndef DEFAULT_ALLOWED_PROVIDERS",
          "97: # define DEFAULT_ALLOWED_PROVIDERS \"/usr/lib*/*,/usr/local/lib*/*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: #include \"myproposal.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: #define AGENT_MAX_SESSION_IDS  16",
          "107: #define AGENT_MAX_SID_LEN  128",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: #define AGENT_MAX_DEST_CONSTRAINTS 1024",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:  time_t death;",
          "142:  u_int confirm;",
          "143:  char *sk_provider;",
          "144: } Identity;",
          "146: struct idtable {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:  struct dest_constraint *dest_constraints;",
          "148:  size_t ndest_constraints;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:  idtab->nentries = 0;",
          "213: }",
          "215: static void",
          "216: free_identity(Identity *id)",
          "217: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220: static void",
          "221: free_dest_constraint_hop(struct dest_constraint_hop *dch)",
          "222: {",
          "223:  u_int i;",
          "225:  if (dch == NULL)",
          "226:   return;",
          "227:  free(dch->user);",
          "228:  free(dch->hostname);",
          "229:  for (i = 0; i < dch->nkeys; i++)",
          "230:   sshkey_free(dch->keys[i]);",
          "231:  free(dch->keys);",
          "232:  free(dch->key_is_ca);",
          "233: }",
          "235: static void",
          "236: free_dest_constraints(struct dest_constraint *dcs, size_t ndcs)",
          "237: {",
          "238:  size_t i;",
          "240:  for (i = 0; i < ndcs; i++) {",
          "241:   free_dest_constraint_hop(&dcs[i].from);",
          "242:   free_dest_constraint_hop(&dcs[i].to);",
          "243:  }",
          "244:  free(dcs);",
          "245: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:  free(id->provider);",
          "220:  free(id->comment);",
          "221:  free(id->sk_provider);",
          "222:  free(id);",
          "223: }",
          "226: static Identity *",
          "227: lookup_identity(struct sshkey *key)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:  free_dest_constraints(id->dest_constraints, id->ndest_constraints);",
          "262: static int",
          "263: match_key_hop(const char *tag, const struct sshkey *key,",
          "264:     const struct dest_constraint_hop *dch)",
          "265: {",
          "266:  const char *reason = NULL;",
          "267:  u_int i;",
          "268:  char *fp;",
          "270:  if (key == NULL)",
          "271:   return -1;",
          "273:  if ((fp = sshkey_fingerprint(key, SSH_FP_HASH_DEFAULT,",
          "274:      SSH_FP_DEFAULT)) == NULL)",
          "275:   fatal_f(\"fingerprint failed\");",
          "276:  debug3_f(\"%s: entering hostname %s, requested key %s %s, %u keys avail\",",
          "277:      tag, dch->hostname, sshkey_type(key), fp, dch->nkeys);",
          "278:  free(fp);",
          "279:  for (i = 0; i < dch->nkeys; i++) {",
          "280:   if (dch->keys[i] == NULL)",
          "281:    return -1;",
          "283:   if ((fp = sshkey_fingerprint(dch->keys[i], SSH_FP_HASH_DEFAULT,",
          "284:       SSH_FP_DEFAULT)) == NULL)",
          "285:    fatal_f(\"fingerprint failed\");",
          "286:   debug3_f(\"%s: key %u: %s%s %s\", tag, i,",
          "287:       dch->key_is_ca[i] ? \"CA \" : \"\",",
          "288:       sshkey_type(dch->keys[i]), fp);",
          "289:   free(fp);",
          "290:   if (!sshkey_is_cert(key)) {",
          "292:    if (dch->key_is_ca[i] ||",
          "293:        !sshkey_equal(key, dch->keys[i]))",
          "294:     continue;",
          "295:    return 0;",
          "296:   }",
          "298:   if (!dch->key_is_ca[i])",
          "299:    continue;",
          "300:   if (key->cert == NULL || key->cert->signature_key == NULL)",
          "302:   if (!sshkey_equal(key->cert->signature_key, dch->keys[i]))",
          "303:    continue;",
          "304:   if (sshkey_cert_check_host(key, dch->hostname, 1,",
          "305:       SSH_ALLOWED_CA_SIGALGS, &reason) != 0) {",
          "306:    debug_f(\"cert %s / hostname %s rejected: %s\",",
          "307:        key->cert->key_id, dch->hostname, reason);",
          "308:    continue;",
          "309:   }",
          "310:   return 0;",
          "311:  }",
          "312:  return -1;",
          "313: }",
          "316: static int",
          "317: permitted_by_dest_constraints(const struct sshkey *fromkey,",
          "318:     const struct sshkey *tokey, Identity *id, const char *user,",
          "319:     const char **hostnamep)",
          "320: {",
          "321:  size_t i;",
          "322:  struct dest_constraint *d;",
          "324:  if (hostnamep != NULL)",
          "326:  for (i = 0; i < id->ndest_constraints; i++) {",
          "327:   d = id->dest_constraints + i;",
          "329:   debug2_f(\"constraint %zu %s%s%s (%u keys) > %s%s%s (%u keys)\",",
          "330:       i, d->from.user ? d->from.user : \"\",",
          "331:       d->from.user ? \"@\" : \"\",",
          "332:       d->from.hostname ? d->from.hostname : \"(ORIGIN)\",",
          "333:       d->from.nkeys,",
          "334:       d->to.user ? d->to.user : \"\", d->to.user ? \"@\" : \"\",",
          "335:       d->to.hostname ? d->to.hostname : \"(ANY)\", d->to.nkeys);",
          "338:   if (fromkey == NULL) {",
          "340:    if (d->from.hostname != NULL || d->from.nkeys != 0)",
          "341:     continue;",
          "342:   } else if (match_key_hop(\"from\", fromkey, &d->from) != 0)",
          "343:    continue;",
          "346:   if (tokey != NULL && match_key_hop(\"to\", tokey, &d->to) != 0)",
          "347:    continue;",
          "350:   if (d->to.user != NULL && user != NULL &&",
          "351:       !match_pattern(user, d->to.user))",
          "352:    continue;",
          "355:   if (hostnamep != NULL)",
          "357:   debug2_f(\"allowed for hostname %s\",",
          "358:       d->to.hostname == NULL ? \"*\" : d->to.hostname);",
          "359:   return 0;",
          "360:  }",
          "362:  debug2_f(\"%s identity \\\"%s\\\" not permitted for this destination\",",
          "363:      sshkey_type(id->key), id->comment);",
          "364:  return -1;",
          "365: }",
          "372: static int",
          "373: identity_permitted(Identity *id, SocketEntry *e, char *user,",
          "374:     const char **forward_hostnamep, const char **last_hostnamep)",
          "375: {",
          "376:  size_t i;",
          "377:  const char **hp;",
          "378:  struct hostkey_sid *hks;",
          "379:  const struct sshkey *fromkey = NULL;",
          "380:  const char *test_user;",
          "381:  char *fp1, *fp2;",
          "384:  debug3_f(\"entering: key %s comment \\\"%s\\\", %zu socket bindings, \"",
          "385:      \"%zu constraints\", sshkey_type(id->key), id->comment,",
          "386:      e->nsession_ids, id->ndest_constraints);",
          "387:  if (id->ndest_constraints == 0)",
          "389:  if (e->nsession_ids == 0)",
          "395:  for (i = 0; i < e->nsession_ids; i++) {",
          "396:   hks = e->session_ids + i;",
          "397:   if (hks->key == NULL)",
          "398:    fatal_f(\"internal error: no bound key\");",
          "400:   fp1 = fp2 = NULL;",
          "401:   if (fromkey != NULL &&",
          "402:       (fp1 = sshkey_fingerprint(fromkey, SSH_FP_HASH_DEFAULT,",
          "403:       SSH_FP_DEFAULT)) == NULL)",
          "404:    fatal_f(\"fingerprint failed\");",
          "405:   if ((fp2 = sshkey_fingerprint(hks->key, SSH_FP_HASH_DEFAULT,",
          "406:       SSH_FP_DEFAULT)) == NULL)",
          "407:    fatal_f(\"fingerprint failed\");",
          "408:   debug3_f(\"socketentry fd=%d, entry %zu %s, \"",
          "409:       \"from hostkey %s %s to user %s hostkey %s %s\",",
          "410:       e->fd, i, hks->forwarded ? \"FORWARD\" : \"AUTH\",",
          "411:       fromkey ? sshkey_type(fromkey) : \"(ORIGIN)\",",
          "412:       fromkey ? fp1 : \"\", user ? user : \"(ANY)\",",
          "413:       sshkey_type(hks->key), fp2);",
          "414:   free(fp1);",
          "415:   free(fp2);",
          "420:   hp = NULL;",
          "421:   if (i == e->nsession_ids - 1)",
          "422:    hp = last_hostnamep;",
          "423:   else if (i == 0)",
          "424:    hp = forward_hostnamep;",
          "426:   test_user = NULL;",
          "427:   if (i == e->nsession_ids - 1) {",
          "429:    test_user = user;",
          "435:    if (hks->forwarded && user != NULL) {",
          "436:     error_f(\"tried to sign on forwarding hop\");",
          "437:     return -1;",
          "438:    }",
          "439:   } else if (!hks->forwarded) {",
          "440:    error_f(\"tried to forward though signing bind\");",
          "441:    return -1;",
          "442:   }",
          "443:   if (permitted_by_dest_constraints(fromkey, hks->key, id,",
          "444:       test_user, hp) != 0)",
          "445:    return -1;",
          "446:   fromkey = hks->key;",
          "447:  }",
          "456:  hks = &e->session_ids[e->nsession_ids - 1];",
          "457:  if (hks->forwarded && user == NULL &&",
          "458:      permitted_by_dest_constraints(hks->key, NULL, id,",
          "459:      NULL, NULL) != 0) {",
          "460:   debug3_f(\"key permitted at host but not after\");",
          "461:   return -1;",
          "462:  }",
          "465:  return 0;",
          "466: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "269: process_request_identities(SocketEntry *e)",
          "270: {",
          "271:  Identity *id;",
          "273:  int r;",
          "275:  debug2_f(\"entering\");",
          "278:   fatal_f(\"sshbuf_new failed\");",
          "282:  TAILQ_FOREACH(id, &idtab->idlist, next) {",
          "284:       SSHKEY_SERIALIZE_INFO)) != 0 ||",
          "286:    error_fr(r, \"compose key/comment\");",
          "287:    continue;",
          "288:   }",
          "289:  }",
          "290:  if ((r = sshbuf_put_stringb(e->output, msg)) != 0)",
          "291:   fatal_fr(r, \"enqueue\");",
          "292:  sshbuf_free(msg);",
          "293: }",
          "",
          "[Removed Lines]",
          "272:  struct sshbuf *msg;",
          "277:  if ((msg = sshbuf_new()) == NULL)",
          "279:  if ((r = sshbuf_put_u8(msg, SSH2_AGENT_IDENTITIES_ANSWER)) != 0 ||",
          "280:      (r = sshbuf_put_u32(msg, idtab->nentries)) != 0)",
          "281:   fatal_fr(r, \"compose\");",
          "283:   if ((r = sshkey_puts_opts(id->key, msg,",
          "285:       (r = sshbuf_put_cstring(msg, id->comment)) != 0) {",
          "",
          "[Added Lines]",
          "515:  struct sshbuf *msg, *keys;",
          "517:  u_int nentries = 0;",
          "521:  if ((msg = sshbuf_new()) == NULL || (keys = sshbuf_new()) == NULL)",
          "525:   if (identity_permitted(id, e, NULL, NULL, NULL) != 0)",
          "526:    continue;",
          "527:   if ((r = sshkey_puts_opts(id->key, keys,",
          "529:       (r = sshbuf_put_cstring(keys, id->comment)) != 0) {",
          "533:   nentries++;",
          "535:  debug2_f(\"replying with %u allowed of %u available keys\",",
          "536:      nentries, idtab->nentries);",
          "537:  if ((r = sshbuf_put_u8(msg, SSH2_AGENT_IDENTITIES_ANSWER)) != 0 ||",
          "538:      (r = sshbuf_put_u32(msg, nentries)) != 0 ||",
          "539:      (r = sshbuf_putb(msg, keys)) != 0)",
          "540:   fatal_fr(r, \"compose\");",
          "544:  sshbuf_free(keys);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "460: process_sign_request2(SocketEntry *e)",
          "461: {",
          "462:  u_char *signature = NULL;",
          "464:  u_int compat = 0, flags;",
          "465:  int r, ok = -1;",
          "466:  char *fp = NULL, *user = NULL, *sig_dest = NULL;",
          "467:  struct sshbuf *msg = NULL, *data = NULL, *sid = NULL;",
          "468:  struct sshkey *key = NULL;",
          "469:  struct identity *id;",
          "",
          "[Removed Lines]",
          "463:  size_t i, slen = 0;",
          "",
          "[Added Lines]",
          "715:  size_t slen = 0;",
          "719:  const char *fwd_host = NULL, *dest_host = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "484:   verbose_f(\"%s key not found\", sshkey_type(key));",
          "485:   goto send;",
          "486:  }",
          "511:   }",
          "512:  }",
          "513:  if (id->confirm && confirm_key(id, sig_dest) != 0) {",
          "514:   verbose_f(\"user refused key\");",
          "",
          "[Removed Lines]",
          "491:  if (e->nsession_ids > 0 &&",
          "492:      parse_userauth_request(data, key, &user, &sid) == 0) {",
          "499:   i = e->nsession_ids - 1;",
          "500:   if (buf_equal(sid, e->session_ids[i].sid) == 0) {",
          "501:    if ((fp = sshkey_fingerprint(e->session_ids[i].key,",
          "502:        SSH_FP_HASH_DEFAULT, SSH_FP_DEFAULT)) == NULL)",
          "503:     fatal_f(\"fingerprint failed\");",
          "504:    debug3_f(\"destination %s %s (slot %zu)\",",
          "505:        sshkey_type(e->session_ids[i].key), fp, i);",
          "506:    xasprintf(&sig_dest, \"public key request for \"",
          "507:        \"target user \\\"%s\\\" to %s %s\", user,",
          "508:        sshkey_type(e->session_ids[i].key), fp);",
          "509:    free(fp);",
          "510:    fp = NULL;",
          "",
          "[Added Lines]",
          "740:  if ((fp = sshkey_fingerprint(key, SSH_FP_HASH_DEFAULT,",
          "741:      SSH_FP_DEFAULT)) == NULL)",
          "742:   fatal_f(\"fingerprint failed\");",
          "744:  if (id->ndest_constraints != 0) {",
          "745:   if (e->nsession_ids == 0) {",
          "746:    logit_f(\"refusing use of destination-constrained key \"",
          "747:        \"to sign on unbound connection\");",
          "748:    goto send;",
          "749:   }",
          "750:   if (parse_userauth_request(data, key, &user, &sid) != 0) {",
          "751:    logit_f(\"refusing use of destination-constrained key \"",
          "752:       \"to sign an unidentified signature\");",
          "753:    goto send;",
          "754:   }",
          "756:   debug_f(\"user=%s\", user);",
          "757:   if (identity_permitted(id, e, user, &fwd_host, &dest_host) != 0)",
          "758:    goto send;",
          "765:   if (buf_equal(sid,",
          "766:       e->session_ids[e->nsession_ids - 1].sid) != 0) {",
          "767:    error_f(\"unexpected session ID (%zu listed) on \"",
          "768:        \"signature request for target user %s with \"",
          "769:        \"key %s %s\", e->nsession_ids, user,",
          "770:        sshkey_type(id->key), fp);",
          "771:    goto send;",
          "773:   xasprintf(&sig_dest, \"public key authentication request for \"",
          "774:       \"user \\\"%s\\\" to listed host\", user);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "521:    goto send;",
          "522:   }",
          "523:   if ((id->key->sk_flags & SSH_SK_USER_PRESENCE_REQD)) {",
          "527:    notifier = notify_start(0,",
          "528:        \"Confirm user presence for key %s %s%s%s\",",
          "529:        sshkey_type(id->key), fp,",
          "",
          "[Removed Lines]",
          "524:    if ((fp = sshkey_fingerprint(key, SSH_FP_HASH_DEFAULT,",
          "525:        SSH_FP_DEFAULT)) == NULL)",
          "526:     fatal_f(\"fingerprint failed\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "580:   debug_f(\"key not found\");",
          "581:   goto done;",
          "582:  }",
          "584:  if (idtab->nentries < 1)",
          "585:   fatal_f(\"internal error: nentries %d\", idtab->nentries);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:  if (identity_permitted(id, e, NULL, NULL, NULL) != 0)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "639: }",
          "641: static int",
          "643: {",
          "644:  char *ext_name = NULL;",
          "645:  int r;",
          "647:  if ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {",
          "648:   error_fr(r, \"parse constraint extension\");",
          "",
          "[Removed Lines]",
          "642: parse_key_constraint_extension(struct sshbuf *m, char **sk_providerp)",
          "",
          "[Added Lines]",
          "905: parse_dest_constraint_hop(struct sshbuf *b, struct dest_constraint_hop *dch)",
          "906: {",
          "907:  u_char key_is_ca;",
          "908:  size_t elen = 0;",
          "909:  int r;",
          "910:  struct sshkey *k = NULL;",
          "911:  char *fp;",
          "913:  memset(dch, '\\0', sizeof(*dch));",
          "914:  if ((r = sshbuf_get_cstring(b, &dch->user, NULL)) != 0 ||",
          "915:      (r = sshbuf_get_cstring(b, &dch->hostname, NULL)) != 0 ||",
          "916:      (r = sshbuf_get_string_direct(b, NULL, &elen)) != 0) {",
          "917:   error_fr(r, \"parse\");",
          "918:   goto out;",
          "919:  }",
          "920:  if (elen != 0) {",
          "921:   error_f(\"unsupported extensions (len %zu)\", elen);",
          "922:   r = SSH_ERR_FEATURE_UNSUPPORTED;",
          "923:   goto out;",
          "924:  }",
          "925:  if (*dch->hostname == '\\0') {",
          "926:   free(dch->hostname);",
          "927:   dch->hostname = NULL;",
          "928:  }",
          "929:  if (*dch->user == '\\0') {",
          "930:   free(dch->user);",
          "931:   dch->user = NULL;",
          "932:  }",
          "933:  while (sshbuf_len(b) != 0) {",
          "934:   dch->keys = xrecallocarray(dch->keys, dch->nkeys,",
          "935:       dch->nkeys + 1, sizeof(*dch->keys));",
          "936:   dch->key_is_ca = xrecallocarray(dch->key_is_ca, dch->nkeys,",
          "937:       dch->nkeys + 1, sizeof(*dch->key_is_ca));",
          "938:   if ((r = sshkey_froms(b, &k)) != 0 ||",
          "939:       (r = sshbuf_get_u8(b, &key_is_ca)) != 0)",
          "940:    goto out;",
          "941:   if ((fp = sshkey_fingerprint(k, SSH_FP_HASH_DEFAULT,",
          "942:       SSH_FP_DEFAULT)) == NULL)",
          "943:    fatal_f(\"fingerprint failed\");",
          "944:   debug3_f(\"%s%s%s: adding %skey %s %s\",",
          "945:       dch->user == NULL ? \"\" : dch->user,",
          "946:       dch->user == NULL ? \"\" : \"@\",",
          "947:       dch->hostname, key_is_ca ? \"CA \" : \"\", sshkey_type(k), fp);",
          "948:   free(fp);",
          "949:   dch->keys[dch->nkeys] = k;",
          "950:   dch->key_is_ca[dch->nkeys] = key_is_ca != 0;",
          "951:   dch->nkeys++;",
          "953:  }",
          "955:  r = 0;",
          "956:  out:",
          "957:  sshkey_free(k);",
          "958:  return r;",
          "959: }",
          "961: static int",
          "962: parse_dest_constraint(struct sshbuf *m, struct dest_constraint *dc)",
          "963: {",
          "964:  struct sshbuf *b = NULL, *frombuf = NULL, *tobuf = NULL;",
          "965:  int r;",
          "966:  size_t elen = 0;",
          "968:  debug3_f(\"entering\");",
          "970:  memset(dc, '\\0', sizeof(*dc));",
          "971:  if ((r = sshbuf_froms(m, &b)) != 0 ||",
          "972:      (r = sshbuf_froms(b, &frombuf)) != 0 ||",
          "973:      (r = sshbuf_froms(b, &tobuf)) != 0 ||",
          "974:      (r = sshbuf_get_string_direct(b, NULL, &elen)) != 0) {",
          "975:   error_fr(r, \"parse\");",
          "976:   goto out;",
          "977:  }",
          "978:  if ((r = parse_dest_constraint_hop(frombuf, &dc->from) != 0) ||",
          "979:      (r = parse_dest_constraint_hop(tobuf, &dc->to) != 0))",
          "981:  if (elen != 0) {",
          "982:   error_f(\"unsupported extensions (len %zu)\", elen);",
          "983:   r = SSH_ERR_FEATURE_UNSUPPORTED;",
          "984:   goto out;",
          "985:  }",
          "986:  debug2_f(\"parsed %s (%u keys) > %s%s%s (%u keys)\",",
          "987:      dc->from.hostname ? dc->from.hostname : \"(ORIGIN)\", dc->from.nkeys,",
          "988:      dc->to.user ? dc->to.user : \"\", dc->to.user ? \"@\" : \"\",",
          "989:      dc->to.hostname ? dc->to.hostname : \"(ANY)\", dc->to.nkeys);",
          "991:  if ((dc->from.hostname == NULL) != (dc->from.nkeys == 0) ||",
          "992:      dc->from.user != NULL) {",
          "993:   error_f(\"inconsistent \\\"from\\\" specification\");",
          "994:   r = SSH_ERR_INVALID_FORMAT;",
          "995:   goto out;",
          "996:  }",
          "997:  if (dc->to.hostname == NULL || dc->to.nkeys == 0) {",
          "998:   error_f(\"incomplete \\\"to\\\" specification\");",
          "999:   r = SSH_ERR_INVALID_FORMAT;",
          "1000:   goto out;",
          "1001:  }",
          "1003:  r = 0;",
          "1004:  out:",
          "1005:  sshbuf_free(b);",
          "1006:  sshbuf_free(frombuf);",
          "1007:  sshbuf_free(tobuf);",
          "1008:  return r;",
          "1009: }",
          "1011: static int",
          "1012: parse_key_constraint_extension(struct sshbuf *m, char **sk_providerp,",
          "1013:     struct dest_constraint **dcsp, size_t *ndcsp)",
          "1017:  struct sshbuf *b = NULL;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "664:    error_fr(r, \"parse %s\", ext_name);",
          "665:    goto out;",
          "666:   }",
          "667:  } else {",
          "668:   error_f(\"unsupported constraint \\\"%s\\\"\", ext_name);",
          "669:   r = SSH_ERR_FEATURE_UNSUPPORTED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1039:  } else if (strcmp(ext_name,",
          "1040:      \"restrict-destination-v00@openssh.com\") == 0) {",
          "1041:   if (*dcsp != NULL) {",
          "1042:    error_f(\"%s already set\", ext_name);",
          "1043:    goto out;",
          "1044:   }",
          "1045:   if ((r = sshbuf_froms(m, &b)) != 0) {",
          "1046:    error_fr(r, \"parse %s outer\", ext_name);",
          "1047:    goto out;",
          "1048:   }",
          "1049:   while (sshbuf_len(b) != 0) {",
          "1050:    if (*ndcsp >= AGENT_MAX_DEST_CONSTRAINTS) {",
          "1051:     error_f(\"too many %s constraints\", ext_name);",
          "1052:     goto out;",
          "1053:    }",
          "1055:        sizeof(**dcsp));",
          "1056:    if ((r = parse_dest_constraint(b,",
          "1059:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "673:  r = 0;",
          "674:  out:",
          "675:  free(ext_name);",
          "676:  return r;",
          "677: }",
          "679: static int",
          "680: parse_key_constraints(struct sshbuf *m, struct sshkey *k, time_t *deathp,",
          "682: {",
          "683:  u_char ctype;",
          "684:  int r;",
          "",
          "[Removed Lines]",
          "681:     u_int *secondsp, int *confirmp, char **sk_providerp)",
          "",
          "[Added Lines]",
          "1069:  sshbuf_free(b);",
          "1075:     u_int *secondsp, int *confirmp, char **sk_providerp,",
          "1076:     struct dest_constraint **dcsp, size_t *ndcsp)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "733:    break;",
          "734:   case SSH_AGENT_CONSTRAIN_EXTENSION:",
          "735:    if ((r = parse_key_constraint_extension(m,",
          "738:    break;",
          "739:   default:",
          "",
          "[Removed Lines]",
          "736:        sk_providerp)) != 0)",
          "",
          "[Added Lines]",
          "1131:        sk_providerp, dcsp, ndcsp)) != 0)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "757:  char canonical_provider[PATH_MAX];",
          "758:  time_t death = 0;",
          "759:  u_int seconds = 0;",
          "760:  struct sshkey *k = NULL;",
          "761:  int r = SSH_ERR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1155:  struct dest_constraint *dest_constraints = NULL;",
          "1156:  size_t ndest_constraints = 0;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "768:   goto out;",
          "769:  }",
          "770:  if (parse_key_constraints(e->request, k, &death, &seconds, &confirm,",
          "772:   error_f(\"failed to parse constraints\");",
          "773:   sshbuf_reset(e->request);",
          "774:   goto out;",
          "",
          "[Removed Lines]",
          "771:      &sk_provider) != 0) {",
          "",
          "[Added Lines]",
          "1168:      &sk_provider, &dest_constraints, &ndest_constraints) != 0) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "812:   idtab->nentries++;",
          "813:  } else {",
          "815:   sshkey_free(id->key);",
          "816:   free(id->comment);",
          "817:   free(id->sk_provider);",
          "818:  }",
          "820:  id->key = k;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1212:   if (identity_permitted(id, e, NULL, NULL, NULL) != 0)",
          "1218:   free_dest_constraints(id->dest_constraints,",
          "1219:       id->ndest_constraints);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "822:  id->death = death;",
          "823:  id->confirm = confirm;",
          "824:  id->sk_provider = sk_provider;",
          "826:  if ((fp = sshkey_fingerprint(k, SSH_FP_HASH_DEFAULT,",
          "827:      SSH_FP_DEFAULT)) == NULL)",
          "828:   fatal_f(\"sshkey_fingerprint failed\");",
          "829:  debug_f(\"add %s %s \\\"%.100s\\\" (life: %u) (confirm: %u) \"",
          "832:  free(fp);",
          "834:  k = NULL;",
          "835:  comment = NULL;",
          "836:  sk_provider = NULL;",
          "837:  success = 1;",
          "838:  out:",
          "839:  free(sk_provider);",
          "840:  free(comment);",
          "841:  sshkey_free(k);",
          "842:  send_status(e, success);",
          "843: }",
          "",
          "[Removed Lines]",
          "830:      \"(provider: %s)\", sshkey_ssh_name(k), fp, comment, seconds,",
          "831:      confirm, sk_provider == NULL ? \"none\" : sk_provider);",
          "",
          "[Added Lines]",
          "1227:  id->dest_constraints = dest_constraints;",
          "1228:  id->ndest_constraints = ndest_constraints;",
          "1234:      \"(provider: %s) (destination constraints: %zu)\",",
          "1235:      sshkey_ssh_name(k), fp, comment, seconds, confirm,",
          "1236:      sk_provider == NULL ? \"none\" : sk_provider, ndest_constraints);",
          "1242:  dest_constraints = NULL;",
          "1243:  ndest_constraints = 0;",
          "1249:  free_dest_constraints(dest_constraints, ndest_constraints);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "921:  time_t death = 0;",
          "922:  struct sshkey **keys = NULL, *k;",
          "923:  Identity *id;",
          "925:  debug2_f(\"entering\");",
          "926:  if ((r = sshbuf_get_cstring(e->request, &provider, NULL)) != 0 ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1332:  struct dest_constraint *dest_constraints = NULL;",
          "1333:  size_t ndest_constraints = 0;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "929:   goto send;",
          "930:  }",
          "931:  if (parse_key_constraints(e->request, NULL, &death, &seconds, &confirm,",
          "933:   error_f(\"failed to parse constraints\");",
          "934:   goto send;",
          "935:  }",
          "",
          "[Removed Lines]",
          "932:      NULL) != 0) {",
          "",
          "[Added Lines]",
          "1342:      NULL, &dest_constraints, &ndest_constraints) != 0) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "963:    }",
          "964:    id->death = death;",
          "965:    id->confirm = confirm;",
          "966:    TAILQ_INSERT_TAIL(&idtab->idlist, id, next);",
          "967:    idtab->nentries++;",
          "968:    success = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1376:    id->dest_constraints = dest_constraints;",
          "1377:    id->ndest_constraints = ndest_constraints;",
          "1379:    ndest_constraints = 0;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "976:  free(provider);",
          "977:  free(keys);",
          "978:  free(comments);",
          "979:  send_status(e, success);",
          "980: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1393:  free_dest_constraints(dest_constraints, ndest_constraints);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1029:  struct sshkey *key = NULL;",
          "1030:  struct sshbuf *sid = NULL, *sig = NULL;",
          "1031:  char *fp = NULL;",
          "1033:  size_t i;",
          "1035:  debug2_f(\"entering\");",
          "1036:  if ((r = sshkey_froms(e->request, &key)) != 0 ||",
          "",
          "[Removed Lines]",
          "1032:  u_char fwd;",
          "",
          "[Added Lines]",
          "1448:  u_char fwd = 0;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1051:  }",
          "1053:  for (i = 0; i < e->nsession_ids; i++) {",
          "1054:   sid_match = buf_equal(sid, e->session_ids[i].sid) == 0;",
          "1055:   key_match = sshkey_equal(key, e->session_ids[i].key);",
          "1056:   if (sid_match && key_match) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1469:   if (!e->session_ids[i].forwarded) {",
          "1470:    error_f(\"attempt to bind session ID to socket \"",
          "1471:        \"previously bound for authentication attempt\");",
          "1472:    r = -1;",
          "1473:    goto out;",
          "1474:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}