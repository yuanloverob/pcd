{
  "cve_id": "CVE-2020-15471",
  "cve_desc": "In nDPI through 3.2, the packet parsing code is vulnerable to a heap-based buffer over-read in ndpi_parse_packet_line_info in lib/ndpi_main.c.",
  "repo": "ntop/nDPI",
  "patch_hash": "61066fb106efa6d3d95b67e47b662de208b2b622",
  "patch_info": {
    "commit_hash": "61066fb106efa6d3d95b67e47b662de208b2b622",
    "repo": "ntop/nDPI",
    "commit_url": "https://github.com/ntop/nDPI/commit/61066fb106efa6d3d95b67e47b662de208b2b622",
    "files": [
      "src/lib/ndpi_main.c"
    ],
    "message": "Added check for heap buffer overflow read",
    "before_after_code_files": [
      "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
    ]
  },
  "patch_diff": {
    "src/lib/ndpi_main.c||src/lib/ndpi_main.c": [
      "File: src/lib/ndpi_main.c -> src/lib/ndpi_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4870:  u_int32_t a1 = a + 4;",
      "4874:  if(diff > 0) {",
      "4875:    memcpy(&flow->initial_binary_bytes, &packet->payload[a1], diff);",
      "4876:    flow->initial_binary_bytes_len = diff;",
      "4877:  }",
      "",
      "[Removed Lines]",
      "4872:  diff = ndpi_min(packet->payload_packet_len-a1, sizeof(flow->initial_binary_bytes));",
      "",
      "[Added Lines]",
      "4877:  diff = packet->payload_packet_len - a1;",
      "4880:    diff = ndpi_min(diff, sizeof(flow->initial_binary_bytes));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4802987178a0a49ea5ff4a01e92a35b5517734dc",
      "candidate_info": {
        "commit_hash": "4802987178a0a49ea5ff4a01e92a35b5517734dc",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/4802987178a0a49ea5ff4a01e92a35b5517734dc",
        "files": [
          "example/ndpiReader.c",
          "example/reader_util.c",
          "example/reader_util.h",
          "src/include/ndpi_typedefs.h",
          "src/lib/ndpi_main.c",
          "src/lib/ndpi_utils.c",
          "src/lib/protocols/http.c",
          "tests/result/1kxun.pcap.out",
          "tests/result/6in4tunnel.pcap.out",
          "tests/result/EAQ.pcap.out",
          "tests/result/KakaoTalk_chat.pcap.out",
          "tests/result/KakaoTalk_talk.pcap.out",
          "tests/result/anyconnect-vpn.pcap.out",
          "tests/result/instagram.pcap.out",
          "tests/result/malware.pcap.out",
          "tests/result/mpeg.pcap.out",
          "tests/result/netflix.pcap.out",
          "tests/result/ocs.pcap.out",
          "tests/result/pps.pcap.out",
          "tests/result/quickplay.pcap.out",
          "tests/result/starcraft_battle.pcap.out",
          "tests/result/waze.pcap.out",
          "tests/result/webex.pcap.out",
          "tests/result/weibo.pcap.out"
        ],
        "message": "Initial work towards HTTP content-type export",
        "before_after_code_files": [
          "example/ndpiReader.c||example/ndpiReader.c",
          "example/reader_util.c||example/reader_util.c",
          "example/reader_util.h||example/reader_util.h",
          "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h",
          "src/lib/ndpi_main.c||src/lib/ndpi_main.c",
          "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c",
          "src/lib/protocols/http.c||src/lib/protocols/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
          ],
          "candidate": [
            "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
          ]
        }
      },
      "candidate_diff": {
        "example/ndpiReader.c||example/ndpiReader.c": [
          "File: example/ndpiReader.c -> example/ndpiReader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1143:     }",
          "1145:     if(flow->http.url[0] != '\\0')",
          "1149:     if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls));",
          "1150:     if(flow->ssh_tls.client_info[0] != '\\0') fprintf(out, \"[Client: %s]\", flow->ssh_tls.client_info);",
          "",
          "[Removed Lines]",
          "1146:       fprintf(out, \"[URL: %s][StatusCode: %u]\",",
          "1147:        flow->http.url, flow->http.response_status_code);",
          "",
          "[Added Lines]",
          "1146:       fprintf(out, \"[URL: %s][StatusCode: %u][ContentType: %s][UserAgent: %s]\",",
          "1147:        flow->http.url, flow->http.response_status_code,",
          "1148:        flow->http.content_type, flow->http.user_agent);",
          "",
          "---------------"
        ],
        "example/reader_util.c||example/reader_util.c": [
          "File: example/reader_util.c -> example/reader_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "980:     if(flow->ndpi_flow->http.url != NULL) {",
          "981:       snprintf(flow->http.url, sizeof(flow->http.url), \"%s\", flow->ndpi_flow->http.url);",
          "982:       flow->http.response_status_code = flow->ndpi_flow->http.response_status_code;",
          "983:     }",
          "984:   } else if(is_ndpi_proto(flow, NDPI_PROTOCOL_TELNET)) {",
          "985:     snprintf(flow->telnet.username, sizeof(flow->telnet.username), \"%s\", flow->ndpi_flow->protos.telnet.username);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "983:       snprintf(flow->http.content_type, sizeof(flow->http.content_type), \"%s\", flow->ndpi_flow->http.content_type ? flow->ndpi_flow->http.content_type : \"\");",
          "984:       snprintf(flow->http.user_agent, sizeof(flow->http.user_agent), \"%s\", flow->ndpi_flow->http.user_agent ? flow->ndpi_flow->http.user_agent : \"\");",
          "",
          "---------------"
        ],
        "example/reader_util.h||example/reader_util.h": [
          "File: example/reader_util.h -> example/reader_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:   } ssh_tls;",
          "196:   struct {",
          "198:     u_int response_status_code;",
          "199:   } http;",
          "",
          "[Removed Lines]",
          "197:     char url[256];",
          "",
          "[Added Lines]",
          "197:     char url[256], content_type[64], user_agent[128];",
          "",
          "---------------"
        ],
        "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h": [
          "File: src/include/ndpi_typedefs.h -> src/include/ndpi_typedefs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1169:   struct {",
          "1170:     ndpi_http_method method;",
          "1172:     u_int8_t num_request_headers, num_response_headers;",
          "",
          "[Removed Lines]",
          "1171:     char *url, *content_type;",
          "",
          "[Added Lines]",
          "1171:     char *url, *content_type, *user_agent;",
          "",
          "---------------"
        ],
        "src/lib/ndpi_main.c||src/lib/ndpi_main.c": [
          "File: src/lib/ndpi_main.c -> src/lib/ndpi_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3737:  if(flow->http.url)          ndpi_free(flow->http.url);",
          "3738:  if(flow->http.content_type) ndpi_free(flow->http.content_type);",
          "3740:  backup  = flow->num_processed_pkts;",
          "3741:  backup1 = flow->guessed_protocol_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3739:  if(flow->http.user_agent)   ndpi_free(flow->http.user_agent);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5067:       || strncasecmp((const char *)packet->line[packet->parsed_lines].ptr, \"Content-type: \", 14) == 0)) {",
          "5068:         packet->content_line.ptr = &packet->line[packet->parsed_lines].ptr[14];",
          "5069:         packet->content_line.len = packet->line[packet->parsed_lines].len - 14;",
          "5070:         packet->http_num_headers++;",
          "5071:       }",
          "5075:         packet->content_line.ptr = &packet->line[packet->parsed_lines].ptr[13];",
          "5076:         packet->content_line.len = packet->line[packet->parsed_lines].len - 13;",
          "5077:         packet->http_num_headers++;",
          "5078:       }",
          "5080:       if(packet->line[packet->parsed_lines].len > 8",
          "5081:   && strncasecmp((const char *)packet->line[packet->parsed_lines].ptr, \"Accept: \", 8) == 0) {",
          "",
          "[Removed Lines]",
          "5073:       if(packet->line[packet->parsed_lines].len > 13",
          "5074:   && strncasecmp((const char *)packet->line[packet->parsed_lines].ptr, \"Content-type:\", 13) == 0) {",
          "",
          "[Added Lines]",
          "5072:  while((packet->content_line.len > 0) && (packet->content_line.ptr[0] == ' '))",
          "5073:    packet->content_line.len--, packet->content_line.ptr++;",
          "5078:       if((packet->content_line.len == 0)",
          "5079:   && (packet->line[packet->parsed_lines].len > 13)",
          "5080:   && (strncasecmp((const char *)packet->line[packet->parsed_lines].ptr, \"Content-type:\", 13) == 0)) {",
          "5086:       if(packet->content_line.len > 0) {",
          "5088:  char *c = strchr((char*)packet->content_line.ptr, ';');",
          "5090:  if(c != NULL) {",
          "5091:    packet->content_line.len = c - (char*)packet->content_line.ptr;",
          "5092:  }",
          "5093:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6250: void ndpi_free_flow(struct ndpi_flow_struct *flow) {",
          "6251:   if(flow) {",
          "6253:     if(flow->http.content_type) ndpi_free(flow->http.content_type);",
          "6255:     if(flow->l4_proto == IPPROTO_TCP) {",
          "6256:       if(flow->l4.tcp.tls_srv_cert_fingerprint_ctx)",
          "",
          "[Removed Lines]",
          "6252:   if(flow->http.url)          ndpi_free(flow->http.url);",
          "",
          "[Added Lines]",
          "6268:   if(flow->http.url)            ndpi_free(flow->http.url);",
          "6270:     if(flow->http.user_agent)   ndpi_free(flow->http.user_agent);",
          "",
          "---------------"
        ],
        "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c": [
          "File: src/lib/ndpi_utils.c -> src/lib/ndpi_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:     ndpi_serialize_end_of_block(serializer);",
          "967:     break;",
          "969:   case NDPI_PROTOCOL_HTTP:",
          "970:     ndpi_serialize_start_of_block(serializer, \"http\");",
          "971:     if(flow->host_server_name[0] != '\\0')",
          "972:       ndpi_serialize_string_string(serializer, \"hostname\", (const char*)flow->host_server_name);",
          "974:     ndpi_serialize_string_uint32(serializer,   \"code\", flow->http.response_status_code);",
          "975:     ndpi_serialize_end_of_block(serializer);",
          "976:     break;",
          "",
          "[Removed Lines]",
          "973:     ndpi_serialize_string_string(serializer,   \"url\", flow->http.url);",
          "",
          "[Added Lines]",
          "969:   case NDPI_PROTOCOL_TELNET:",
          "970:     ndpi_serialize_start_of_block(serializer, \"telnet\");",
          "971:     ndpi_serialize_string_string(serializer, \"username\", flow->protos.telnet.username);",
          "972:     ndpi_serialize_end_of_block(serializer);",
          "973:     break;",
          "979:     ndpi_serialize_string_string(serializer,   \"url\", flow->http.url);",
          "981:     ndpi_serialize_string_string(serializer,   \"content_type\", flow->http.content_type);",
          "982:     ndpi_serialize_string_string(serializer,   \"user_agent\", flow->http.user_agent);",
          "",
          "---------------"
        ],
        "src/lib/protocols/http.c||src/lib/protocols/http.c": [
          "File: src/lib/protocols/http.c -> src/lib/protocols/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:     ndpi_set_detected_protocol(ndpi_struct, flow, flow->guessed_host_protocol_id, NDPI_PROTOCOL_HTTP);",
          "72:   } else",
          "73:     ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_HTTP, NDPI_PROTOCOL_UNKNOWN);",
          "77:   flow->max_extra_packets_to_check = 5;",
          "78:   flow->extra_packets_func = ndpi_search_http_tcp_again;",
          "79:   flow->http_detected = 1, flow->guessed_category = category;",
          "",
          "[Removed Lines]",
          "76:   flow->check_extra_packets = 1;",
          "",
          "[Added Lines]",
          "76:   flow->check_extra_packets = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:   struct ndpi_packet_struct *packet = &flow->packet;",
          "136:   ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_HTTP, NDPI_PROTOCOL_UNKNOWN);",
          "141: #if defined(NDPI_PROTOCOL_1KXUN) || defined(NDPI_PROTOCOL_IQIYI)",
          "",
          "[Removed Lines]",
          "138:   if(flow->http_detected && (flow->http.response_status_code != 0))",
          "139:     return;",
          "",
          "[Added Lines]",
          "138:   if(flow->http_detected && (flow->http.response_status_code != 0))",
          "139:     return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:       }",
          "201:     }",
          "214:   if(packet->user_agent_line.ptr != NULL && packet->user_agent_line.len != 0) {",
          "216:        Format examples:",
          "",
          "[Removed Lines]",
          "203:     if((flow->http.content_type == NULL) && (packet->content_line.len > 0)) {",
          "204:       int len = packet->content_line.len + 1;",
          "206:       flow->http.content_type = ndpi_malloc(len);",
          "207:       if(flow->http.content_type) {",
          "208:  strncpy(flow->http.content_type, (char*)packet->content_line.ptr,",
          "209:   packet->content_line.len);",
          "210:  flow->http.content_type[packet->content_line.len] = '\\0';",
          "211:       }",
          "212:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "276:       }",
          "277:     }",
          "279:     NDPI_LOG_DBG2(ndpi_struct, \"User Agent Type line found %.*s\\n\",",
          "280:     packet->user_agent_line.len, packet->user_agent_line.ptr);",
          "281:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:     if(flow->http.user_agent == NULL) {",
          "269:       int len = packet->user_agent_line.len + 1;",
          "271:       flow->http.user_agent = ndpi_malloc(len);",
          "272:       if(flow->http.user_agent) {",
          "273:  strncpy(flow->http.user_agent, (char*)packet->user_agent_line.ptr,",
          "274:   packet->user_agent_line.len);",
          "275:  flow->http.user_agent[packet->user_agent_line.len] = '\\0';",
          "276:       }",
          "277:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "383:     NDPI_LOG_DBG2(ndpi_struct, \"Content Type line found %.*s\\n\",",
          "384:     packet->content_line.len, packet->content_line.ptr);",
          "386:     if(flow->http_detected) {",
          "387:       ndpi_protocol_match_result ret_match;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     if((flow->http.content_type == NULL) && (packet->content_line.len > 0)) {",
          "387:       int len = packet->content_line.len + 1;",
          "389:       flow->http.content_type = ndpi_malloc(len);",
          "390:       if(flow->http.content_type) {",
          "391:  strncpy(flow->http.content_type, (char*)packet->content_line.ptr,",
          "392:   packet->content_line.len);",
          "393:  flow->http.content_type[packet->content_line.len] = '\\0';",
          "394:       }",
          "395:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "492:  }",
          "495:         check_content_type_and_change_protocol(ndpi_struct, flow);",
          "496:         return;",
          "497:       }",
          "",
          "[Removed Lines]",
          "494:         ndpi_int_http_add_connection(ndpi_struct, flow, NDPI_PROTOCOL_HTTP);",
          "",
          "[Added Lines]",
          "505:  ndpi_parse_packet_line_info(ndpi_struct, flow);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "688:  flow->http_detected = 1;",
          "689:  NDPI_LOG_DBG2(ndpi_struct,",
          "690:         \"HTTP START Found, we will look further for the response...\\n\");",
          "692:         check_content_type_and_change_protocol(ndpi_struct, flow);",
          "693:         return;",
          "694:       }",
          "",
          "[Removed Lines]",
          "691:  flow->l4.tcp.http_stage = packet->packet_direction + 1; // packet_direction 0: stage 1, packet_direction 1: stage 2",
          "",
          "[Added Lines]",
          "702:  flow->l4.tcp.http_stage = packet->packet_direction + 1; // packet_direction 0: stage 1, packet_direction 1: stage 2",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5e69d0f7ab382e3507660fe752027c09e32310e",
      "candidate_info": {
        "commit_hash": "e5e69d0f7ab382e3507660fe752027c09e32310e",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/e5e69d0f7ab382e3507660fe752027c09e32310e",
        "files": [
          "example/ndpiReader.c",
          "example/reader_util.c",
          "example/reader_util.h",
          "src/include/ndpi_api.h.in",
          "src/include/ndpi_typedefs.h",
          "src/lib/ndpi_main.c",
          "src/lib/ndpi_utils.c",
          "src/lib/protocols/http.c",
          "tests/result/1kxun.pcap.out",
          "tests/result/6in4tunnel.pcap.out",
          "tests/result/EAQ.pcap.out",
          "tests/result/KakaoTalk_chat.pcap.out",
          "tests/result/KakaoTalk_talk.pcap.out",
          "tests/result/WebattackRCE.pcap.out",
          "tests/result/WebattackSQLinj.pcap.out",
          "tests/result/WebattackXSS.pcap.out",
          "tests/result/android.pcap.out",
          "tests/result/anyconnect-vpn.pcap.out",
          "tests/result/dns_dot.pcap.out",
          "tests/result/fuzz-2006-09-29-28586.pcap.out",
          "tests/result/fuzz-2020-02-16-11740.pcap.out",
          "tests/result/hangout.pcap.out",
          "tests/result/instagram.pcap.out",
          "tests/result/iphone.pcap.out",
          "tests/result/malware.pcap.out",
          "tests/result/mpeg.pcap.out",
          "tests/result/netflix.pcap.out",
          "tests/result/ocs.pcap.out",
          "tests/result/pps.pcap.out",
          "tests/result/quickplay.pcap.out",
          "tests/result/skype-conference-call.pcap.out",
          "tests/result/skype.pcap.out",
          "tests/result/skype_no_unknown.pcap.out",
          "tests/result/smb_deletefile.pcap.out",
          "tests/result/smbv1.pcap.out",
          "tests/result/starcraft_battle.pcap.out",
          "tests/result/teams.pcap.out",
          "tests/result/wa_video.pcap.out",
          "tests/result/wa_voice.pcap.out",
          "tests/result/waze.pcap.out",
          "tests/result/webex.pcap.out",
          "tests/result/weibo.pcap.out",
          "tests/result/whatsapp_login_call.pcap.out",
          "tests/result/zoom.pcap.out"
        ],
        "message": "Added the ability to detect when a known protocol is using a non-standard port Added check to spot executables exchanged via HTTP",
        "before_after_code_files": [
          "example/ndpiReader.c||example/ndpiReader.c",
          "example/reader_util.c||example/reader_util.c",
          "example/reader_util.h||example/reader_util.h",
          "src/include/ndpi_api.h.in||src/include/ndpi_api.h.in",
          "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h",
          "src/lib/ndpi_main.c||src/lib/ndpi_main.c",
          "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c",
          "src/lib/protocols/http.c||src/lib/protocols/http.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
          ],
          "candidate": [
            "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
          ]
        }
      },
      "candidate_diff": {
        "example/ndpiReader.c||example/ndpiReader.c": [
          "File: example/ndpiReader.c -> example/ndpiReader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "978: char* printUrlRisk(ndpi_url_risk risk) {",
          "979:   switch(risk) {",
          "980:     case ndpi_url_no_problem:",
          "981:       return(\"\");",
          "982:       break;",
          "983:     case ndpi_url_possible_xss:",
          "984:       return(\" ** XSS **\");",
          "985:       break;",
          "986:     case ndpi_url_possible_sql_injection:",
          "987:       return(\" ** SQL Injection **\");",
          "988:       break;",
          "989:     case ndpi_url_possible_rce_injection:",
          "990:       return(\" ** RCE Injection **\");",
          "991:       break;",
          "992:   }",
          "994:   return(\"\");",
          "995: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:     }",
          "1219:   }",
          "1228:   if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls));",
          "1229:   if(flow->ssh_tls.client_requested_server_name[0] != '\\0') fprintf(out, \"[Client: %s]\", flow->ssh_tls.client_requested_server_name);",
          "1230:   if(flow->ssh_tls.client_hassh[0] != '\\0') fprintf(out, \"[HASSH-C: %s]\", flow->ssh_tls.client_hassh);",
          "",
          "[Removed Lines]",
          "1221:   if(flow->http.url[0] != '\\0')",
          "1222:     fprintf(out, \"[URL: %s%s][StatusCode: %u][ContentType: %s][UserAgent: %s]\",",
          "1223:      flow->http.url,",
          "1224:      printUrlRisk(ndpi_validate_url(flow->http.url)),",
          "1225:      flow->http.response_status_code,",
          "1226:      flow->http.content_type, flow->http.user_agent);",
          "",
          "[Added Lines]",
          "1201:   if(flow->http.url[0] != '\\0') {",
          "1202:     u_int16_t risk = ndpi_validate_url(flow->http.url);",
          "1204:     if(risk != NDPI_NO_RISK)",
          "1205:       flow->risk |= risk;",
          "1207:     fprintf(out, \"[URL: %s[StatusCode: %u]\",",
          "1208:      flow->http.url, flow->http.response_status_code);",
          "1210:     if(flow->http.content_type[0] != '\\0')",
          "1211:       fprintf(out, \"[ContentType: %s]\", flow->http.content_type);",
          "1213:     if(flow->http.user_agent[0] != '\\0')",
          "1214:       fprintf(out, \"[UserAgent: %s]\", flow->http.user_agent);",
          "1215:   }",
          "1217:   if(flow->risk) {",
          "1218:     u_int i;",
          "1220:     fprintf(out, \"[Risk: \");",
          "1222:     for(i=0; i<NDPI_MAX_RISK; i++)",
          "1223:       if(NDPI_ISSET_BIT_16(flow->risk, i))",
          "1224:  fprintf(out, \"** %s **\", ndpi_risk2str(i));",
          "1226:     fprintf(out, \"]\");",
          "1227:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3045: void automataUnitTest() {",
          "3046:   void *automa = ndpi_init_automa();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3046: static void bitmapUnitTest() {",
          "3047:   u_int16_t val, i, j;",
          "3049:   for(i=0; i<16; i++) {",
          "3050:     NDPI_ZERO_16(val);",
          "3051:     NDPI_SET_BIT_16(val, i);",
          "3053:     assert(NDPI_ISSET_BIT_16(val, i));",
          "3055:     for(j=0; j<16; j++) {",
          "3056:       if(j != i) {",
          "3057:  assert(!NDPI_ISSET_BIT_16(val, j));",
          "3058:       }",
          "3059:     }",
          "3060:   }",
          "3061: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3258:     }",
          "3261:     automataUnitTest();",
          "3262:     serializerUnitTest();",
          "3263:     analyzeUnitTest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3281:     bitmapUnitTest();",
          "",
          "---------------"
        ],
        "example/reader_util.c||example/reader_util.c": [
          "File: example/reader_util.c -> example/reader_util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:   snprintf(flow->flow_extra_info, sizeof(flow->flow_extra_info), \"%s\",",
          "994:     flow->ndpi_flow->flow_extra_info);",
          "996:   if(is_ndpi_proto(flow, NDPI_PROTOCOL_DHCP)) {",
          "997:     snprintf(flow->dhcp_fingerprint, sizeof(flow->dhcp_fingerprint), \"%s\", flow->ndpi_flow->protos.dhcp.fingerprint);",
          "998:   } else if(is_ndpi_proto(flow, NDPI_PROTOCOL_BITTORRENT)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "996:   flow->risk = flow->ndpi_flow->risk;",
          "",
          "---------------"
        ],
        "example/reader_util.h||example/reader_util.h": [
          "File: example/reader_util.h -> example/reader_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:   char host_server_name[240];",
          "194:   char bittorent_hash[41];",
          "195:   char dhcp_fingerprint[48];",
          "197:   struct {",
          "198:     u_int16_t ssl_version;",
          "199:     char client_requested_server_name[64], server_info[64],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:   ndpi_risk risk;",
          "",
          "---------------"
        ],
        "src/include/ndpi_api.h.in||src/include/ndpi_api.h.in": [
          "File: src/include/ndpi_api.h.in -> src/include/ndpi_api.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1034:   u_int8_t ndpi_is_protocol_detected(struct ndpi_detection_module_struct *ndpi_str,",
          "1035:          ndpi_protocol proto);",
          "1036: #ifdef __cplusplus",
          "1037: }",
          "1038: #endif",
          "",
          "[Removed Lines]",
          "1032:   ndpi_url_risk ndpi_validate_url(char *url);",
          "",
          "[Added Lines]",
          "1032:   ndpi_risk ndpi_validate_url(char *url);",
          "1037:   const char* ndpi_risk2str(ndpi_risk risk);",
          "",
          "---------------"
        ],
        "src/include/ndpi_typedefs.h||src/include/ndpi_typedefs.h": [
          "File: src/include/ndpi_typedefs.h -> src/include/ndpi_typedefs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: } ndpi_packet_tunnel;",
          "53: typedef enum {",
          "61: typedef enum {",
          "",
          "[Removed Lines]",
          "54:   ndpi_url_no_problem = 0,",
          "55:   ndpi_url_possible_xss,",
          "56:   ndpi_url_possible_sql_injection,",
          "57:   ndpi_url_possible_rce_injection",
          "58: } ndpi_url_risk;",
          "",
          "[Added Lines]",
          "54:   NDPI_NO_RISK = 0,",
          "55:   NDPI_URL_POSSIBLE_XSS,",
          "56:   NDPI_URL_POSSIBLE_SQL_INJECTION,",
          "57:   NDPI_URL_POSSIBLE_RCE_INJECTION,",
          "58:   NDPI_BINARY_APPLICATION_TRANSFER,",
          "59:   NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT,",
          "62:   NDPI_MAX_RISK",
          "63: } ndpi_risk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941:   u_int8_t can_have_a_subprotocol;",
          "942:   u_int16_t protoId, protoIdx;",
          "944:   ndpi_protocol_breed_t protoBreed;",
          "945:   void (*func) (struct ndpi_detection_module_struct *, struct ndpi_flow_struct *flow);",
          "946: } ndpi_proto_defaults_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "949:   u_int16_t tcp_default_ports[MAX_DEFAULT_PORTS], udp_default_ports[MAX_DEFAULT_PORTS];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1152:   struct ndpi_id_struct *server_id;",
          "1154:   u_char host_server_name[240];",
          "1157:     This structure below will not not stay inside the protos",
          "1158:     structure below as HTTP is used by many subprotocols",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1161:   u_int8_t initial_binary_bytes[8], initial_binary_bytes_len;",
          "1162:   u_int8_t risk_checked;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1343:   u_int8_t csgo_strid[18],csgo_state,csgo_s2;",
          "1344:   u_int32_t csgo_id2;",
          "1350:   struct ndpi_packet_struct packet;",
          "1351:   struct ndpi_flow_struct *flow;",
          "",
          "[Removed Lines]",
          "1347:   u_int16_t kxun_counter, iqiyi_counter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/ndpi_main.c||src/lib/ndpi_main.c": [
          "File: src/lib/ndpi_main.c -> src/lib/ndpi_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     if(tcpDefPorts[j].port_low != 0)",
          "340:       addDefaultPort(ndpi_str, &tcpDefPorts[j], &ndpi_str->proto_defaults[protoId], 0, &ndpi_str->tcpRoot,",
          "341:        __FUNCTION__, __LINE__);",
          "342:   }",
          "343: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:     ndpi_str->proto_defaults[protoId].tcp_default_ports[j] = tcpDefPorts[j].port_low;",
          "345:     ndpi_str->proto_defaults[protoId].udp_default_ports[j] = udpDefPorts[j].port_low;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:     }",
          "387:     node->proto = def, node->default_port = port, node->customUserProto = customUserProto;",
          "391:     if(ret != node) {",
          "392:       NDPI_LOG_DBG(ndpi_str, \"[NDPI] %s:%d found duplicate for port %u: overwriting it with new value\\n\", _func,",
          "",
          "[Removed Lines]",
          "388:     ret = (ndpi_default_ports_tree_node_t *) ndpi_tsearch(",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "708:      ndpi_build_default_ports(ports_b, 177, 0, 0, 0, 0) /* UDP */);",
          "709:   ndpi_set_proto_defaults(ndpi_str, NDPI_PROTOCOL_DANGEROUS, NDPI_PROTOCOL_SMBV1, 0 /* can_have_a_subprotocol */,",
          "710:      no_master, no_master, \"SMBv1\", NDPI_PROTOCOL_CATEGORY_SYSTEM_OS,",
          "712:      ndpi_build_default_ports(ports_b, 0, 0, 0, 0, 0) /* UDP */);",
          "713:   ndpi_set_proto_defaults(ndpi_str, NDPI_PROTOCOL_ACCEPTABLE, NDPI_PROTOCOL_SYSLOG, 0 /* can_have_a_subprotocol */,",
          "714:      no_master, no_master, \"Syslog\", NDPI_PROTOCOL_CATEGORY_SYSTEM_OS,",
          "",
          "[Removed Lines]",
          "711:      ndpi_build_default_ports(ports_a, 0, 0, 0, 0, 0) /* TCP */,",
          "",
          "[Added Lines]",
          "714:      ndpi_build_default_ports(ports_a, 445, 0, 0, 0, 0) /* TCP */,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1220:      ndpi_build_default_ports(ports_b, 0, 0, 0, 0, 0) /* UDP */);",
          "1221:   ndpi_set_proto_defaults(ndpi_str, NDPI_PROTOCOL_ACCEPTABLE, NDPI_PROTOCOL_APPLE_PUSH,",
          "1222:      0 /* can_have_a_subprotocol */, no_master, no_master, \"ApplePush\",",
          "1224:      ndpi_build_default_ports(ports_b, 0, 0, 0, 0, 0) /* UDP */);",
          "1225:   ndpi_set_proto_defaults(ndpi_str, NDPI_PROTOCOL_ACCEPTABLE, NDPI_PROTOCOL_DROPBOX, 0 /* can_have_a_subprotocol */,",
          "1226:      no_master, no_master, \"Dropbox\", NDPI_PROTOCOL_CATEGORY_CLOUD,",
          "",
          "[Removed Lines]",
          "1223:      NDPI_PROTOCOL_CATEGORY_CLOUD, ndpi_build_default_ports(ports_a, 1, 0, 0, 0, 0) /* TCP */,",
          "",
          "[Added Lines]",
          "1226:      NDPI_PROTOCOL_CATEGORY_CLOUD, ndpi_build_default_ports(ports_a, 0, 0, 0, 0, 0) /* TCP */,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3752: void check_ndpi_other_flow_func(struct ndpi_detection_module_struct *ndpi_str, struct ndpi_flow_struct *flow,",
          "3753:                                 NDPI_SELECTION_BITMASK_PROTOCOL_SIZE *ndpi_selection_packet) {",
          "3758:   void *func = NULL;",
          "3759:   u_int32_t a;",
          "",
          "[Removed Lines]",
          "3754:   if(!flow) {",
          "3755:     return;",
          "3756:   }",
          "",
          "[Added Lines]",
          "3757:   if(!flow)",
          "3758:     return;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4339: ndpi_protocol ndpi_detection_process_packet(struct ndpi_detection_module_struct *ndpi_str,",
          "4340:                                             struct ndpi_flow_struct *flow, const unsigned char *packet,",
          "4341:                                             const unsigned short packetlen, const u_int64_t current_tick_l,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4341: #if 0",
          "4342: static u_int16_t ndpi_checK_flow_port(, u_int16_t sport, u_int16_t dport) {",
          "4344: }",
          "4345: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4569:     ret.app_protocol = flow->guessed_host_protocol_id;",
          "4570:   }",
          "4572:  invalidate_ptr:",
          "4574:     Invalidate packet memory to avoid accessing the pointers below",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4582:   if((!flow->risk_checked) && (ret.master_protocol != NDPI_PROTOCOL_UNKNOWN)) {",
          "4583:     ndpi_default_ports_tree_node_t *found;",
          "4584:     u_int16_t *default_ports, sport, dport;",
          "4586:     if(flow->packet.udp)",
          "4587:       found = ndpi_get_guessed_protocol_id(ndpi_str, IPPROTO_UDP,",
          "4588:         sport = ntohs(flow->packet.udp->source),",
          "4589:         dport = ntohs(flow->packet.udp->dest)),",
          "4590:  default_ports = ndpi_str->proto_defaults[ret.master_protocol].udp_default_ports;",
          "4591:     else if(flow->packet.tcp)",
          "4592:       found = ndpi_get_guessed_protocol_id(ndpi_str, IPPROTO_TCP,",
          "4593:         sport = ntohs(flow->packet.tcp->source),",
          "4594:         dport = ntohs(flow->packet.tcp->dest)),",
          "4595:  default_ports = ndpi_str->proto_defaults[ret.master_protocol].tcp_default_ports;",
          "4596:     else",
          "4597:       found = NULL, default_ports = NULL;",
          "4599:     if(found",
          "4600:        && (found->proto->protoId != NDPI_PROTOCOL_UNKNOWN)",
          "4601:        && (found->proto->protoId != ret.master_protocol)) {",
          "4603:       NDPI_SET_BIT_16(flow->risk, NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT);",
          "4604:     } else if(default_ports && (default_ports[0] != 0)) {",
          "4605:       u_int8_t found = 0, i;",
          "4607:       for(i=0; (i<MAX_DEFAULT_PORTS) && (default_ports[i] != 0); i++) {",
          "4608:  if((default_ports[i] == sport) || (default_ports[i] == dport)) {",
          "4609:    found = 1;",
          "4610:    break;",
          "4611:  }",
          "4614:       if(!found) {",
          "4616:  NDPI_SET_BIT_16(flow->risk, NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT);",
          "4617:       }",
          "4618:     }",
          "4620:     flow->risk_checked = 1;",
          "4621:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4730:   u_int32_t a;",
          "4731:   struct ndpi_packet_struct *packet = &flow->packet;",
          "4733:   if(packet->packet_lines_parsed_complete != 0)",
          "4734:     return;",
          "4736:   packet->packet_lines_parsed_complete = 1;",
          "4737:   ndpi_reset_packet_line_info(packet);",
          "4742:   packet->line[packet->parsed_lines].ptr = packet->payload;",
          "4743:   packet->line[packet->parsed_lines].len = 0;",
          "",
          "[Removed Lines]",
          "4739:   if((packet->payload_packet_len < 3) || (packet->payload == NULL))",
          "4740:     return;",
          "",
          "[Added Lines]",
          "4785:   if((packet->payload_packet_len < 3) || (packet->payload == NULL))",
          "4786:     return;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4746:     if((a + 1) >= packet->payload_packet_len)",
          "4755:       if(packet->parsed_lines == 0 && packet->line[0].len >= NDPI_STATICSTRING_LEN(\"HTTP/1.X 200 \") &&",
          "",
          "[Removed Lines]",
          "4749:     if(get_u_int16_t(packet->payload, a) ==",
          "4751:       packet->line[packet->parsed_lines].len = (u_int16_t)(",
          "4752:           ((unsigned long) &packet->payload[a]) - ((unsigned long) packet->line[packet->parsed_lines].ptr));",
          "",
          "[Added Lines]",
          "4801:     if(get_u_int16_t(packet->payload, a) == ntohs(0x0d0a)) {",
          "4804:       if(get_u_int16_t(packet->payload, a+2) == ntohs(0x0d0a)) {",
          "4807:  u_int32_t a1 = a + 4;",
          "4809:  diff = ndpi_min(packet->payload_packet_len-a1, sizeof(flow->initial_binary_bytes));",
          "4811:  if(diff > 0) {",
          "4812:    memcpy(&flow->initial_binary_bytes, &packet->payload[a1], diff);",
          "4813:    flow->initial_binary_bytes_len = diff;",
          "4814:  }",
          "4815:       }",
          "4817:       packet->line[packet->parsed_lines].len =",
          "4818:  (u_int16_t)(((unsigned long) &packet->payload[a]) - ((unsigned long) packet->line[packet->parsed_lines].ptr));",
          "",
          "---------------"
        ],
        "src/lib/ndpi_utils.c||src/lib/ndpi_utils.c": [
          "File: src/lib/ndpi_utils.c -> src/lib/ndpi_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1336:   char *orig_str = NULL, *str = NULL, *question_mark = strchr(url, '?');",
          "1339:   if(question_mark) {",
          "1340:     char *tmp;",
          "",
          "[Removed Lines]",
          "1335: ndpi_url_risk ndpi_validate_url(char *url) {",
          "1337:   ndpi_url_risk rc = ndpi_url_no_problem;",
          "",
          "[Added Lines]",
          "1335: ndpi_risk ndpi_validate_url(char *url) {",
          "1337:   ndpi_risk rc = NDPI_NO_RISK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1366:    if(ndpi_is_xss_injection(decoded))",
          "1368:    else if(ndpi_is_sql_injection(decoded))",
          "1370: #ifdef HAVE_PCRE",
          "1371:    else if(ndpi_is_rce_injection(decoded))",
          "1373: #endif",
          "1375: #ifdef URL_CHECK_DEBUG",
          "",
          "[Removed Lines]",
          "1367:      rc = ndpi_url_possible_xss;",
          "1369:      rc = ndpi_url_possible_sql_injection;",
          "1372:      rc = ndpi_url_possible_rce_injection;",
          "",
          "[Added Lines]",
          "1367:      rc = NDPI_URL_POSSIBLE_XSS;",
          "1369:      rc = NDPI_URL_POSSIBLE_SQL_INJECTION;",
          "1372:      rc = NDPI_URL_POSSIBLE_RCE_INJECTION;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1380:  ndpi_free(decoded);",
          "1383:    break;",
          "1384:       }",
          "",
          "[Removed Lines]",
          "1382:  if(rc != ndpi_url_no_problem)",
          "",
          "[Added Lines]",
          "1382:  if(rc != NDPI_NO_RISK)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1403:   else",
          "1404:     return(0);",
          "1405: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1409: const char* ndpi_risk2str(ndpi_risk risk) {",
          "1410:   switch(risk) {",
          "1411:   case NDPI_URL_POSSIBLE_XSS:",
          "1412:     return(\"XSS attack\");",
          "1413:   case NDPI_URL_POSSIBLE_SQL_INJECTION:",
          "1414:     return(\"SQL injection\");",
          "1415:   case NDPI_URL_POSSIBLE_RCE_INJECTION:",
          "1416:     return(\"RCE injection\");",
          "1417:   case NDPI_BINARY_APPLICATION_TRANSFER:",
          "1418:     return(\"Binary application transfer\");",
          "1419:   case NDPI_KNOWN_PROTOCOL_ON_NON_STANDARD_PORT:",
          "1420:     return(\"Known protocol on non standard port\");",
          "1421:   default:",
          "1422:     return(\"\");",
          "1423:   }",
          "1424: }",
          "",
          "---------------"
        ],
        "src/lib/protocols/http.c||src/lib/protocols/http.c": [
          "File: src/lib/protocols/http.c -> src/lib/protocols/http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: static int ndpi_search_http_tcp_again(struct ndpi_detection_module_struct *ndpi_struct,",
          "37:           struct ndpi_flow_struct *flow) {",
          "38:   ndpi_search_http_tcp(ndpi_struct, flow);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: static void ndpi_analyze_content_signature(struct ndpi_flow_struct *flow) {",
          "37:   if((flow->initial_binary_bytes_len >= 2) && (flow->initial_binary_bytes[0] == 0x4D) && (flow->initial_binary_bytes[1] == 0x5A))",
          "39:   else if((flow->initial_binary_bytes_len >= 4) && (flow->initial_binary_bytes[0] == 0x7F) && (flow->initial_binary_bytes[1] == 'E')",
          "40:    && (flow->initial_binary_bytes[2] == 'L') && (flow->initial_binary_bytes[3] == 'F'))",
          "42:   else if((flow->initial_binary_bytes_len >= 4) && (flow->initial_binary_bytes[0] == 0xCF) && (flow->initial_binary_bytes[1] == 0xFA)",
          "43:    && (flow->initial_binary_bytes[2] == 0xED) && (flow->initial_binary_bytes[3] == 0xFE))",
          "45:   else if(flow->initial_binary_bytes_len >= 8) {",
          "46:     u_int8_t exec_pattern[] = { 0x64, 0x65, 0x78, 0x0A, 0x30, 0x33, 0x35, 0x00 };",
          "48:     if(memcmp(flow->initial_binary_bytes, exec_pattern, 8) == 0)",
          "50:   }",
          "51: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   printf(\"=> %s()\\n\", __FUNCTION__);",
          "42: #endif",
          "47:     return(0);",
          "48:   }",
          "",
          "[Removed Lines]",
          "44:   if((flow->host_server_name[0] != '\\0') && (flow->http.response_status_code != 0)) {",
          "",
          "[Added Lines]",
          "63:   if((flow->host_server_name[0] != '\\0')",
          "64:      && (flow->http.response_status_code != 0)",
          "65:      ) {",
          "68:     if(flow->initial_binary_bytes_len) ndpi_analyze_content_signature(flow);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "612:     \"Found more than one line, we look further for the next packet...\\n\");",
          "614:     if(packet->line[0].len >= (9 + filename_start)",
          "617:       packet->http_url_name.ptr = &packet->payload[filename_start];",
          "618:       packet->http_url_name.len = packet->line[0].len - (filename_start + 9);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:        && memcmp(&packet->line[0].ptr[packet->line[0].len - 9], \" HTTP/1.\", 8) == 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "635:  goto ookla_found;",
          "636:       }",
          "682:       if((packet->http_url_name.len > 7)",
          "683:   && (!strncmp((const char*) packet->http_url_name.ptr, \"http://\", 7))) {",
          "684:         NDPI_LOG_INFO(ndpi_struct, \"found HTTP_PROXY\\n\");",
          "",
          "[Removed Lines]",
          "638: #if defined(NDPI_PROTOCOL_1KXUN) || defined(NDPI_PROTOCOL_IQIYI)",
          "642:       if(ndpi_strnstr((const char*) &packet->payload[filename_start], \"iqiyi.com\",",
          "643:         (packet->payload_packet_len - filename_start)) != NULL) {",
          "644:  if(flow->kxun_counter == 0) {",
          "645:    flow->l4.tcp.ppstream_stage++;",
          "646:    flow->iqiyi_counter++;",
          "648:    return;",
          "649:  }",
          "650:       }",
          "653:       x = 1;",
          "654:       while((packet->line[x].len >= 4) && (packet->line[x+1].len >= 5) && (packet->line[x+2].len >= 10)) {",
          "655:  if(packet->line[x].ptr && ((memcmp(packet->line[x].ptr, \"qyid\", 4)) == 0)",
          "656:     && packet->line[x+1].ptr && ((memcmp(packet->line[x+1].ptr, \"qypid\", 5)) == 0)",
          "657:     && packet->line[x+2].ptr && ((memcmp(packet->line[x+2].ptr, \"qyplatform\", 10)) == 0)",
          "658:     ) {",
          "659:    flow->l4.tcp.ppstream_stage++;",
          "660:    flow->iqiyi_counter++;",
          "661:    check_content_type_and_change_protocol(ndpi_struct, flow);",
          "662:    return;",
          "663:  }",
          "664:  x++;",
          "665:       }",
          "666: #endif",
          "668: #if defined(NDPI_PROTOCOL_1KXUN) || defined(NDPI_PROTOCOL_IQIYI)",
          "670:       int a;",
          "671:       for (a = 0; a < packet->parsed_lines; a++) {",
          "672:  if(packet->line[a].len >= 14 && (memcmp(packet->line[a].ptr, \"Client-Source:\", 14)) == 0) {",
          "673:    if((memcmp(packet->line[a].ptr+15, \"1kxun\", 5)) == 0) {",
          "674:      flow->kxun_counter++;",
          "675:      check_content_type_and_change_protocol(ndpi_struct, flow);",
          "676:      return;",
          "677:    }",
          "678:  }",
          "679:       }",
          "680: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62fa0908a3fd0b3f354f420ca7259d414be3ba59",
      "candidate_info": {
        "commit_hash": "62fa0908a3fd0b3f354f420ca7259d414be3ba59",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/62fa0908a3fd0b3f354f420ca7259d414be3ba59",
        "files": [
          "src/lib/ndpi_main.c",
          "src/lib/protocols/steam.c",
          "tests/pcap/steam.pcap",
          "tests/result/steam.pcap.out"
        ],
        "message": "Improved packet datastructure cleanup after packet processing Cleaned up code of steam dissector Added steam test pcap",
        "before_after_code_files": [
          "src/lib/ndpi_main.c||src/lib/ndpi_main.c",
          "src/lib/protocols/steam.c||src/lib/protocols/steam.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
          ],
          "candidate": [
            "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/ndpi_main.c||src/lib/ndpi_main.c": [
          "File: src/lib/ndpi_main.c -> src/lib/ndpi_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4463: ndpi_protocol ndpi_detection_process_packet(struct ndpi_detection_module_struct *ndpi_struct,",
          "4464:          struct ndpi_flow_struct *flow,",
          "4465:          const unsigned char *packet,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4463: static void ndpi_reset_packet_line_info(struct ndpi_packet_struct *packet) {",
          "4464:   packet->parsed_lines = 0,",
          "4465:   packet->empty_line_position_set = 0,",
          "4466:   packet->host_line.ptr = NULL,",
          "4467:   packet->host_line.len = 0,",
          "4468:   packet->referer_line.ptr = NULL,",
          "4469:   packet->referer_line.len = 0,",
          "4470:   packet->content_line.ptr = NULL,",
          "4471:   packet->content_line.len = 0,",
          "4472:   packet->accept_line.ptr = NULL,",
          "4473:   packet->accept_line.len = 0,",
          "4474:   packet->user_agent_line.ptr = NULL,",
          "4475:   packet->user_agent_line.len = 0,",
          "4476:   packet->http_url_name.ptr = NULL,",
          "4477:   packet->http_url_name.len = 0,",
          "4478:   packet->http_encoding.ptr = NULL,",
          "4479:   packet->http_encoding.len = 0,",
          "4480:   packet->http_transfer_encoding.ptr = NULL,",
          "4481:   packet->http_transfer_encoding.len = 0,",
          "4482:   packet->http_contentlen.ptr = NULL,",
          "4483:   packet->http_contentlen.len = 0,",
          "4484:   packet->http_cookie.ptr = NULL,",
          "4485:   packet->http_cookie.len = 0,",
          "4486:   packet->http_origin.len = 0,",
          "4487:   packet->http_origin.ptr = NULL,",
          "4488:   packet->http_x_session_type.ptr = NULL,",
          "4489:   packet->http_x_session_type.len = 0,",
          "4490:   packet->server_line.ptr = NULL,",
          "4491:   packet->server_line.len = 0,",
          "4492:   packet->http_method.ptr = NULL,",
          "4493:   packet->http_method.len = 0,",
          "4494:   packet->http_response.ptr = NULL,",
          "4495:   packet->http_response.len = 0,",
          "4496:   packet->http_num_headers = 0;",
          "4497: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4701:      Invalidate packet memory to avoid accessing the pointers below",
          "4702:      when the packet is no longer accessible",
          "4706:   return(ret);",
          "4707: }",
          "",
          "[Removed Lines]",
          "4704:   flow->packet.iph = NULL, flow->packet.tcp = NULL, flow->packet.udp = NULL;",
          "",
          "[Added Lines]",
          "4742:   flow->packet.iph = NULL, flow->packet.tcp = NULL, flow->packet.udp = NULL, flow->packet.payload = NULL;",
          "4743:   ndpi_reset_packet_line_info(&flow->packet);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4864:     return;",
          "4866:   packet->packet_lines_parsed_complete = 1;",
          "4901:   if((packet->payload_packet_len < 3)",
          "4902:      || (packet->payload == NULL))",
          "4903:     return;",
          "",
          "[Removed Lines]",
          "4867:   packet->parsed_lines = 0;",
          "4868:   packet->empty_line_position_set = 0;",
          "4869:   packet->host_line.ptr = NULL;",
          "4870:   packet->host_line.len = 0;",
          "4871:   packet->referer_line.ptr = NULL;",
          "4872:   packet->referer_line.len = 0;",
          "4873:   packet->content_line.ptr = NULL;",
          "4874:   packet->content_line.len = 0;",
          "4875:   packet->accept_line.ptr = NULL;",
          "4876:   packet->accept_line.len = 0;",
          "4877:   packet->user_agent_line.ptr = NULL;",
          "4878:   packet->user_agent_line.len = 0;",
          "4879:   packet->http_url_name.ptr = NULL;",
          "4880:   packet->http_url_name.len = 0;",
          "4881:   packet->http_encoding.ptr = NULL;",
          "4882:   packet->http_encoding.len = 0;",
          "4883:   packet->http_transfer_encoding.ptr = NULL;",
          "4884:   packet->http_transfer_encoding.len = 0;",
          "4885:   packet->http_contentlen.ptr = NULL;",
          "4886:   packet->http_contentlen.len = 0;",
          "4887:   packet->http_cookie.ptr = NULL;",
          "4888:   packet->http_cookie.len = 0;",
          "4889:   packet->http_origin.len = 0;",
          "4890:   packet->http_origin.ptr = NULL;",
          "4891:   packet->http_x_session_type.ptr = NULL;",
          "4892:   packet->http_x_session_type.len = 0;",
          "4893:   packet->server_line.ptr = NULL;",
          "4894:   packet->server_line.len = 0;",
          "4895:   packet->http_method.ptr = NULL;",
          "4896:   packet->http_method.len = 0;",
          "4897:   packet->http_response.ptr = NULL;",
          "4898:   packet->http_response.len = 0;",
          "4899:   packet->http_num_headers=0;",
          "",
          "[Added Lines]",
          "4906:   ndpi_reset_packet_line_info(packet);",
          "",
          "---------------"
        ],
        "src/lib/protocols/steam.c||src/lib/protocols/steam.c": [
          "File: src/lib/protocols/steam.c -> src/lib/protocols/steam.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242: void ndpi_search_steam(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow) {",
          "243:   struct ndpi_packet_struct *packet = &flow->packet;",
          "283:   }",
          "286: }",
          "291:   ndpi_set_bitmask_protocol_detection(\"Steam\", ndpi_struct, detection_bitmask, *id,",
          "292:           NDPI_PROTOCOL_STEAM,",
          "293:           ndpi_search_steam,",
          "",
          "[Removed Lines]",
          "246:   if (flow->packet_counter > 20) {",
          "247:     NDPI_EXCLUDE_PROTO(ndpi_struct, flow);",
          "248:     return;",
          "249:   }",
          "252:   if (packet->tcp_retransmission != 0) {",
          "253:     return;",
          "254:   }",
          "256:   if (packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM) {",
          "257:     return;",
          "258:   }",
          "260:   NDPI_LOG_DBG(ndpi_struct, \"search STEAM\\n\");",
          "261:   ndpi_check_steam_http(ndpi_struct, flow);",
          "263:   if (packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM) {",
          "264:     return;",
          "265:   }",
          "267:   ndpi_check_steam_tcp(ndpi_struct, flow);",
          "269:   if (packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM) {",
          "270:     return;",
          "271:   }",
          "273:   ndpi_check_steam_udp1(ndpi_struct, flow);",
          "275:   if (packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM) {",
          "276:     return;",
          "277:   }",
          "279:   ndpi_check_steam_udp2(ndpi_struct, flow);",
          "281:   if (packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM) {",
          "282:     return;",
          "285:   ndpi_check_steam_udp3(ndpi_struct, flow);",
          "289: void init_steam_dissector(struct ndpi_detection_module_struct *ndpi_struct, u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask)",
          "290: {",
          "",
          "[Added Lines]",
          "246:   if(flow->packet.udp != NULL) {",
          "247:     if(flow->packet_counter > 5) {",
          "248:       NDPI_EXCLUDE_PROTO(ndpi_struct, flow);",
          "249:       return;",
          "250:     }",
          "252:     ndpi_check_steam_udp1(ndpi_struct, flow);",
          "254:     if(packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM)",
          "255:       return;",
          "257:     ndpi_check_steam_udp2(ndpi_struct, flow);",
          "259:     if(packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM)",
          "260:       return;",
          "262:     ndpi_check_steam_udp3(ndpi_struct, flow);",
          "263:   } else {",
          "265:     if(flow->packet_counter > 10) {",
          "266:       NDPI_EXCLUDE_PROTO(ndpi_struct, flow);",
          "267:       return;",
          "268:     }",
          "272:     if(packet->tcp_retransmission != 0) {",
          "273:       return;",
          "274:     }",
          "276:     if(packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM)",
          "277:       return;",
          "279:     NDPI_LOG_DBG(ndpi_struct, \"search STEAM\\n\");",
          "280:     ndpi_check_steam_http(ndpi_struct, flow);",
          "282:     if(packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM)",
          "283:       return;",
          "285:     ndpi_check_steam_tcp(ndpi_struct, flow);",
          "287:     if(packet->detected_protocol_stack[0] == NDPI_PROTOCOL_STEAM)",
          "288:       return;",
          "293: void init_steam_dissector(struct ndpi_detection_module_struct *ndpi_struct,",
          "294:      u_int32_t *id, NDPI_PROTOCOL_BITMASK *detection_bitmask) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbbc5fdbae79c72dbe157e02dfee4ef9f18014b5",
      "candidate_info": {
        "commit_hash": "bbbc5fdbae79c72dbe157e02dfee4ef9f18014b5",
        "repo": "ntop/nDPI",
        "commit_url": "https://github.com/ntop/nDPI/commit/bbbc5fdbae79c72dbe157e02dfee4ef9f18014b5",
        "files": [
          "src/lib/ndpi_main.c"
        ],
        "message": "Added memory boundary checks",
        "before_after_code_files": [
          "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
          ],
          "candidate": [
            "src/lib/ndpi_main.c||src/lib/ndpi_main.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/ndpi_main.c||src/lib/ndpi_main.c": [
          "File: src/lib/ndpi_main.c -> src/lib/ndpi_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4858:     if(get_u_int16_t(packet->payload, a) == ntohs(0x0d0a)) {",
          "4864:  u_int32_t a1 = a + 4;",
          "",
          "[Removed Lines]",
          "4861:       if(get_u_int16_t(packet->payload, a+2) == ntohs(0x0d0a)) {",
          "",
          "[Added Lines]",
          "4861:       if(((a + 3) <= packet->payload_packet_len)",
          "4862:   && (get_u_int16_t(packet->payload, a+2) == ntohs(0x0d0a))) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}