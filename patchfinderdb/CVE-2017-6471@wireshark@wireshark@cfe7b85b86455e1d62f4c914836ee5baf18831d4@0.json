{
  "cve_id": "CVE-2017-6471",
  "cve_desc": "In Wireshark 2.2.0 to 2.2.4 and 2.0.0 to 2.0.10, there is a WSP infinite loop, triggered by packet injection or a malformed capture file. This was addressed in epan/dissectors/packet-wsp.c by validating the capability length.",
  "repo": "wireshark/wireshark",
  "patch_hash": "cfe7b85b86455e1d62f4c914836ee5baf18831d4",
  "patch_info": {
    "commit_hash": "cfe7b85b86455e1d62f4c914836ee5baf18831d4",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/cfe7b85b86455e1d62f4c914836ee5baf18831d4",
    "files": [
      "epan/dissectors/packet-wsp.c"
    ],
    "message": "wsp: Sanity check capability length\n\nBug: 13348\nChange-Id: I64abc79475087f1c971419629b5c86e646123f3f\nReviewed-on: https://code.wireshark.org/review/19776\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
      "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "372: static int ett_openwave_default         = -1;",
      "374: static expert_field ei_wsp_capability_invalid = EI_INIT;",
      "375: static expert_field ei_wsp_capability_encoding_invalid = EI_INIT;",
      "376: static expert_field ei_wsp_text_field_invalid = EI_INIT;",
      "377: static expert_field ei_wsp_header_invalid_value    = EI_INIT;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "375: static expert_field ei_wsp_capability_length_invalid = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4631:     tvbuff_t   *tmp_tvb;",
      "4632:     int         found_match;",
      "4633:     heur_dtbl_entry_t *hdtbl_entry;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4635:     proto_item* ti;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4716:             }",
      "4718:             capabilityLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
      "4720:                     tvb, offset, count, capabilityLength);",
      "4721:             offset += count;",
      "4723:             if (pdut != WSP_PDU_RESUME)",
      "4724:             {",
      "",
      "[Removed Lines]",
      "4719:             proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
      "",
      "[Added Lines]",
      "4721:             ti = proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
      "4724:             if (capabilityLength > tvb_reported_length(tvb))",
      "4725:             {",
      "4726:                 expert_add_info(pinfo, ti, &ei_wsp_capability_length_invalid);",
      "4727:                 break;",
      "4728:             }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "7151:     static ei_register_info ei[] = {",
      "7152:       { &ei_wsp_capability_invalid, { \"wsp.capability.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability\", EXPFILL }},",
      "7153:       { &ei_wsp_capability_encoding_invalid, { \"wsp.capability_encoding.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability encoding\", EXPFILL }},",
      "7154:       { &ei_wsp_text_field_invalid, { \"wsp.text_field_invalid\", PI_PROTOCOL, PI_WARN, \"Text field invalid\", EXPFILL }},",
      "7155:       { &ei_wsp_invalid_parameter_value, { \"wsp.invalid_parameter_value\", PI_PROTOCOL, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7160:       { &ei_wsp_capability_length_invalid, { \"wsp.capabilities.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability length\", EXPFILL }},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b708d4e6b4950055654530f3d409f8298e698705",
      "candidate_info": {
        "commit_hash": "b708d4e6b4950055654530f3d409f8298e698705",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/b708d4e6b4950055654530f3d409f8298e698705",
        "files": [
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "wsp: Sanity check capability length\n\nBug: 13348\nChange-Id: I64abc79475087f1c971419629b5c86e646123f3f\nReviewed-on: https://code.wireshark.org/review/19776\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit cfe7b85b86455e1d62f4c914836ee5baf18831d4)\nReviewed-on: https://code.wireshark.org/review/19791\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "372: static int ett_openwave_default         = -1;",
          "374: static expert_field ei_wsp_capability_invalid = EI_INIT;",
          "375: static expert_field ei_wsp_capability_encoding_invalid = EI_INIT;",
          "376: static expert_field ei_wsp_text_field_invalid = EI_INIT;",
          "377: static expert_field ei_wsp_header_invalid_value    = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375: static expert_field ei_wsp_capability_length_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4631:     tvbuff_t   *tmp_tvb;",
          "4632:     int         found_match;",
          "4633:     heur_dtbl_entry_t *hdtbl_entry;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4635:     proto_item* ti;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4716:             }",
          "4718:             capabilityLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "4720:                     tvb, offset, count, capabilityLength);",
          "4721:             offset += count;",
          "4723:             if (pdut != WSP_PDU_RESUME)",
          "4724:             {",
          "",
          "[Removed Lines]",
          "4719:             proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "",
          "[Added Lines]",
          "4721:             ti = proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "4724:             if (capabilityLength > tvb_reported_length(tvb))",
          "4725:             {",
          "4726:                 expert_add_info(pinfo, ti, &ei_wsp_capability_length_invalid);",
          "4727:                 break;",
          "4728:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7151:     static ei_register_info ei[] = {",
          "7152:       { &ei_wsp_capability_invalid, { \"wsp.capability.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability\", EXPFILL }},",
          "7153:       { &ei_wsp_capability_encoding_invalid, { \"wsp.capability_encoding.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability encoding\", EXPFILL }},",
          "7154:       { &ei_wsp_text_field_invalid, { \"wsp.text_field_invalid\", PI_PROTOCOL, PI_WARN, \"Text field invalid\", EXPFILL }},",
          "7155:       { &ei_wsp_invalid_parameter_value, { \"wsp.invalid_parameter_value\", PI_PROTOCOL, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7160:       { &ei_wsp_capability_length_invalid, { \"wsp.capabilities.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability length\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3521c336128406bd1473b61c0dab1a884c43b1d3",
      "candidate_info": {
        "commit_hash": "3521c336128406bd1473b61c0dab1a884c43b1d3",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/3521c336128406bd1473b61c0dab1a884c43b1d3",
        "files": [
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "wsp: Sanity check capability length\n\nConflicts:\n\tepan/dissectors/packet-wsp.c\n\nBug: 13348\nChange-Id: I64abc79475087f1c971419629b5c86e646123f3f\nReviewed-on: https://code.wireshark.org/review/19776\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit cfe7b85b86455e1d62f4c914836ee5baf18831d4)\nReviewed-on: https://code.wireshark.org/review/19791\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit b708d4e6b4950055654530f3d409f8298e698705)\nReviewed-on: https://code.wireshark.org/review/19792\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-on: https://code.wireshark.org/review/20500\nReviewed-by: Balint Reczey <balint@balintreczey.hu>",
        "before_after_code_files": [
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #include <epan/to_str.h>",
          "48: #include <epan/wmem/wmem.h>",
          "49: #include <epan/conversation.h>",
          "51: #include \"packet-wap.h\"",
          "52: #include \"packet-wsp.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: #include <epan/expert.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342: static int ett_addresses                = ETT_EMPTY;",
          "343: static int ett_address                  = ETT_EMPTY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346: static expert_field ei_wsp_capability_length_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4928:     tvbuff_t   *tmp_tvb;",
          "4929:     gboolean    found_match;",
          "4930:     heur_dtbl_entry_t *hdtbl_entry;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4933:     proto_item* ti;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5027:                 }",
          "5029:                 capabilityLength = tvb_get_guintvar (tvb, offset, &count);",
          "5031:                         tvb, offset, count, capabilityLength);",
          "5032:                 offset += count;",
          "5034:                 if (pdut != WSP_PDU_RESUME)",
          "5035:                 {",
          "",
          "[Removed Lines]",
          "5030:                 proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "",
          "[Added Lines]",
          "5033:                 ti = proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "5036:                 if (capabilityLength > tvb_reported_length(tvb))",
          "5037:                 {",
          "5038:                         expert_add_info(pinfo, ti, &ei_wsp_capability_length_invalid);",
          "5039:                         break;",
          "5040:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7275:     };",
          "7278:     proto_wsp = proto_register_protocol(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7285:     static ei_register_info ei[] = {",
          "7286:       { &ei_wsp_capability_length_invalid, { \"wsp.capabilities.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability length\", EXPFILL }},",
          "7287:     };",
          "7289:     expert_module_t* expert_wsp;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7293:     proto_register_field_array(proto_wsp, hf, array_length(hf));",
          "7294:     proto_register_subtree_array(ett, array_length(ett));",
          "7296:     register_dissector(\"wsp-co\", dissect_wsp_fromwap_co, proto_wsp);",
          "7297:     register_dissector(\"wsp-cl\", dissect_wsp_fromwap_cl, proto_wsp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7309:     expert_wsp = expert_register_protocol(proto_wsp);",
          "7310:     expert_register_field_array(expert_wsp, ei, array_length(ei));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62afef41277dfac37f515207ca73d33306e3302b",
      "candidate_info": {
        "commit_hash": "62afef41277dfac37f515207ca73d33306e3302b",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/62afef41277dfac37f515207ca73d33306e3302b",
        "files": [
          "epan/dissectors/packet-wsp.c"
        ],
        "message": "wsp: Sanity check capability length\n\nBug: 13348\nChange-Id: I64abc79475087f1c971419629b5c86e646123f3f\nReviewed-on: https://code.wireshark.org/review/19776\nReviewed-by: Alexis La Goutte <alexis.lagoutte@gmail.com>\nPetri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit cfe7b85b86455e1d62f4c914836ee5baf18831d4)\nReviewed-on: https://code.wireshark.org/review/19791\nReviewed-by: Michael Mann <mmann78@netscape.net>\n(cherry picked from commit b708d4e6b4950055654530f3d409f8298e698705)\nReviewed-on: https://code.wireshark.org/review/19792\nPetri-Dish: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-wsp.c||epan/dissectors/packet-wsp.c": [
          "File: epan/dissectors/packet-wsp.c -> epan/dissectors/packet-wsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "369: static int ett_openwave_default         = -1;",
          "371: static expert_field ei_wsp_capability_invalid = EI_INIT;",
          "372: static expert_field ei_wsp_capability_encoding_invalid = EI_INIT;",
          "373: static expert_field ei_wsp_text_field_invalid = EI_INIT;",
          "374: static expert_field ei_wsp_header_invalid_value    = EI_INIT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: static expert_field ei_wsp_capability_length_invalid = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4622:     tvbuff_t   *tmp_tvb;",
          "4623:     int         found_match;",
          "4624:     heur_dtbl_entry_t *hdtbl_entry;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4626:     proto_item* ti;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4707:             }",
          "4709:             capabilityLength = tvb_get_guintvar (tvb, offset, &count, pinfo, &ei_wsp_oversized_uintvar);",
          "4711:                     tvb, offset, count, capabilityLength);",
          "4712:             offset += count;",
          "4714:             if (pdut != WSP_PDU_RESUME)",
          "4715:             {",
          "",
          "[Removed Lines]",
          "4710:             proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "",
          "[Added Lines]",
          "4712:             ti = proto_tree_add_uint (wsp_tree, hf_capabilities_length,",
          "4715:             if (capabilityLength > tvb_reported_length(tvb))",
          "4716:             {",
          "4717:                 expert_add_info(pinfo, ti, &ei_wsp_capability_length_invalid);",
          "4718:                 break;",
          "4719:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7139:     static ei_register_info ei[] = {",
          "7140:       { &ei_wsp_capability_invalid, { \"wsp.capability.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability\", EXPFILL }},",
          "7141:       { &ei_wsp_capability_encoding_invalid, { \"wsp.capability_encoding.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability encoding\", EXPFILL }},",
          "7142:       { &ei_wsp_text_field_invalid, { \"wsp.text_field_invalid\", PI_PROTOCOL, PI_WARN, \"Text field invalid\", EXPFILL }},",
          "7143:       { &ei_wsp_invalid_parameter_value, { \"wsp.invalid_parameter_value\", PI_PROTOCOL, PI_WARN, \"Invalid parameter value\", EXPFILL }},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7148:       { &ei_wsp_capability_length_invalid, { \"wsp.capabilities.length.invalid\", PI_PROTOCOL, PI_WARN, \"Invalid capability length\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    }
  ]
}