{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e72d1a8682ba69f163ed022178a286e69406ef40",
      "candidate_info": {
        "commit_hash": "e72d1a8682ba69f163ed022178a286e69406ef40",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e72d1a8682ba69f163ed022178a286e69406ef40",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Fix a harmless use-of-initialized-value fault in the assert() logic added by check-in [d612fb7873cf59d]\n\nFossilOrigin-Name: 3dac90728a6a1962da478afe751582ddf8b6d4666548a805564817b21e07a246",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dff823ca8b5ca4a5611407b0231f89b2e8c981f50e85e361e76d3e4973cea8ca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   if( p->flags & MEM_Term ){",
          "151:       assert( p->enc==SQLITE_UTF8 || p->szMalloc >= ((p->n+1)&~1)+2 );",
          "152:       assert( p->enc!=SQLITE_UTF8 || p->szMalloc >= p->n+1 );",
          "153:     }",
          "",
          "[Removed Lines]",
          "150:     if( p->z==p->zMalloc && p->szMalloc>0 ){",
          "",
          "[Added Lines]",
          "150:     if( p->szMalloc>0 && p->z==p->zMalloc ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e61c1b741b3bf6f93445f30454925e430c3ebea",
      "candidate_info": {
        "commit_hash": "5e61c1b741b3bf6f93445f30454925e430c3ebea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5e61c1b741b3bf6f93445f30454925e430c3ebea",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/filter1.test",
          "test/window1.test",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Fix error handling for the case where a window function is passed the wrong number of arguments.\n\nFossilOrigin-Name: 871796bb19e61c1282d8ac97a82d8b57bde50f2a2a08004ab53136d77c138df4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/filter1.test||test/filter1.test",
          "test/window1.test||test/window1.test",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fcd937d9786a82ef4147e657d54ea0beb6ac87e2eb1677186b318493d473077b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "851:           sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);",
          "852:           pNC->nErr++;",
          "853:           is_agg = 0;",
          "861:         }",
          "862: #else",
          "863:         if( (is_agg && (pNC->ncFlags & NC_AllowAgg)==0) ){",
          "",
          "[Removed Lines]",
          "854:         }else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "855:           assert( !IsWindowFunc(pExpr) );",
          "856:           sqlite3ErrorMsg(pParse,",
          "857:               \"filter clause may not be used with non-aggregate %.*s()\",",
          "858:               nId, zId",
          "859:           );",
          "860:           pNC->nErr++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "878:                nId, zId);",
          "879:           pNC->nErr++;",
          "880:         }",
          "881:         if( is_agg ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "875:         else if( is_agg==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "876:           sqlite3ErrorMsg(pParse,",
          "877:               \"FILTER may not be used with non-aggregate %.*s()\",",
          "878:               nId, zId",
          "879:           );",
          "880:           pNC->nErr++;",
          "881:         }",
          "882: #endif",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: do_catchsql_test 2.1 {",
          "93:   SELECT upper(a) FILTER (WHERE a=1) FROM t1",
          "96: do_catchsql_test 2.2 {",
          "97:   SELECT sum(a) FILTER (WHERE 1 - max(a) OVER () > 0) FROM t1",
          "",
          "[Removed Lines]",
          "94: } {1 {filter clause may not be used with non-aggregate upper()}}",
          "",
          "[Added Lines]",
          "94: } {1 {FILTER may not be used with non-aggregate upper()}}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "257: do_catchsql_test 7.1.7 {",
          "258:   SELECT max(x) OVER abc FROM t1 WINDOW def AS (ORDER BY y);",
          "259: } {1 {no such window: abc}}",
          "261: do_execsql_test 7.2 {",
          "262:   SELECT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260: do_catchsql_test 7.1.8 {",
          "261:   SELECT row_number(x) OVER () FROM t1",
          "262: } {1 {wrong number of arguments to function row_number}}",
          "",
          "---------------"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   WINDOW win AS (ROWS BETWEEN 10 PRECEDING AND x'ABCD' FOLLOWING)",
          "65: }",
          "68: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: errorsql_test 3.3 {",
          "68:   SELECT row_number(a) OVER () FROM t1;",
          "69: }",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   WINDOW win AS (ROWS BETWEEN 10 PRECEDING AND x'ABCD' FOLLOWING)",
          "109: } } } 1",
          "111: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: # PG says ERROR:  function row_number(integer) does not exist",
          "112: do_test 3.3 { catch { execsql {",
          "113:   SELECT row_number(a) OVER () FROM t1;",
          "114: } } } 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
      "candidate_info": {
        "commit_hash": "e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6c628e98ca26a3f3cc3b2d832ef118a1eac16dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Make sure the extra bytes allocated for the saved cursor position by check-in [160b1e31c0f27257] are initialized to zero.\n\nFossilOrigin-Name: 2737564929e86ead84a3ff6512369268198d38b46e3e02866f8ce34babc76cb9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1e12fa2a8eb5648a96cc2d8d39899d6f87c5e2269cec7de486964c8b915e724",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:     if( pKey ){",
          "673:       rc = sqlite3BtreePayload(pCur, 0, (int)pCur->nKey, pKey);",
          "674:       if( rc==SQLITE_OK ){",
          "675:         pCur->pKey = pKey;",
          "676:       }else{",
          "677:         sqlite3_free(pKey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "675:         memset(((u8*)pKey)+pCur->nKey, 0, 9+8);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "87c889cfa5067f433259794f9796e6b44232bbd6",
      "candidate_info": {
        "commit_hash": "87c889cfa5067f433259794f9796e6b44232bbd6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/87c889cfa5067f433259794f9796e6b44232bbd6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "In the CLI, give better error messages if something goes wrong with the \".dbinfo\" command.\n\nFossilOrigin-Name: 3649a77b79001ea6c5defe882f9934521b20b9d36aab26d03b5d42006c7fa228",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9e2393cf201e3fc24519c5ae65d0a5953147d78884e53d44a7958747b4a7e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4773:      { \"schema size:\",",
          "4774:        \"SELECT total(length(sql)) FROM %s\" },",
          "4775:   };",
          "4777:   unsigned iDataVersion;",
          "4778:   char *zSchemaTab;",
          "4779:   char *zDb = nArg>=2 ? azArg[1] : \"main\";",
          "",
          "[Removed Lines]",
          "4776:   int i;",
          "",
          "[Added Lines]",
          "4776:   int i, rc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4781:   unsigned char aHdr[100];",
          "4782:   open_db(p, 0);",
          "4783:   if( p->db==0 ) return 1;",
          "4786:   sqlite3_bind_text(pStmt, 1, zDb, -1, SQLITE_STATIC);",
          "4787:   if( sqlite3_step(pStmt)==SQLITE_ROW",
          "4788:    && sqlite3_column_bytes(pStmt,0)>100",
          "",
          "[Removed Lines]",
          "4784:   sqlite3_prepare_v2(p->db,\"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1\",",
          "4785:                      -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "4784:   rc = sqlite3_prepare_v2(p->db,",
          "4785:              \"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1\",",
          "4786:              -1, &pStmt, 0);",
          "4787:   if( rc ){",
          "4788:     if( !sqlite3_compileoption_used(\"ENABLE_DBPAGE_VTAB\") ){",
          "4789:       utf8_printf(stderr, \"the \\\".dbinfo\\\" command requires the \"",
          "4790:                           \"-DSQLITE_ENABLE_DBPAGE_VTAB compile-time options\\n\");",
          "4791:     }else{",
          "4792:       utf8_printf(stderr, \"error: %s\\n\", sqlite3_errmsg(p->db));",
          "4793:     }",
          "4794:     sqlite3_finalize(pStmt);",
          "4795:     return 1;",
          "4796:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e86974c61985d68676d2803dcf6cd3f3eaf82989",
      "candidate_info": {
        "commit_hash": "e86974c61985d68676d2803dcf6cd3f3eaf82989",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e86974c61985d68676d2803dcf6cd3f3eaf82989",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Fix a performance regression caused by the previous commit.\n\nFossilOrigin-Name: c4db0ad12d4f3d2800d36404f391b325cdc4aa7f8dcea93b2d63a489d9095ad4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ef711d98fb239cf24472f124e7b36b0dde33355de5a2c9a3a978bbdd042a735",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:   return 0;",
          "311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "319: static SQLITE_NOINLINE WhereTerm *whereScanInitIndexExpr(WhereScan *pScan){",
          "320:   pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "321:   return whereScanNext(pScan);",
          "322: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:   pScan->pIdxExpr = 0;",
          "343:   pScan->idxaff = 0;",
          "344:   pScan->zCollName = 0;",
          "345:   if( pIdx ){",
          "346:     int j = iColumn;",
          "347:     iColumn = pIdx->aiColumn[j];",
          "348:     if( iColumn==XN_EXPR ){",
          "349:       pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;",
          "350:       pScan->zCollName = pIdx->azColl[j];",
          "352:     }else if( iColumn==pIdx->pTable->iPKey ){",
          "353:       iColumn = XN_ROWID;",
          "354:     }else if( iColumn>=0 ){",
          "",
          "[Removed Lines]",
          "351:       pScan->idxaff = sqlite3ExprAffinity(pScan->pIdxExpr);",
          "",
          "[Added Lines]",
          "356:   pScan->opMask = opMask;",
          "357:   pScan->k = 0;",
          "358:   pScan->aiCur[0] = iCur;",
          "359:   pScan->nEquiv = 1;",
          "360:   pScan->iEquiv = 1;",
          "367:       pScan->aiColumn[0] = XN_EXPR;",
          "368:       return whereScanInitIndexExpr(pScan);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:   }else if( iColumn==XN_EXPR ){",
          "359:     return 0;",
          "360:   }",
          "364:   pScan->aiColumn[0] = iColumn;",
          "367:   return whereScanNext(pScan);",
          "368: }",
          "",
          "[Removed Lines]",
          "361:   pScan->opMask = opMask;",
          "362:   pScan->k = 0;",
          "363:   pScan->aiCur[0] = iCur;",
          "365:   pScan->nEquiv = 1;",
          "366:   pScan->iEquiv = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}