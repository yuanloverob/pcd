{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2c5affc582b8a419f94ca29da47152eb14f15655",
      "candidate_info": {
        "commit_hash": "2c5affc582b8a419f94ca29da47152eb14f15655",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/2c5affc582b8a419f94ca29da47152eb14f15655",
        "files": [
          "src/jsiWebSocket.c",
          "www/favicon.ico"
        ],
        "message": "Remove favicon.ico inline image.  Change 301 redir to 302.\n\nFossilOrigin-Name: 03183c3ab8f782376b7a9973318858da8d01d33a363b63fe65cbc8d6fa0d38e1",
        "before_after_code_files": [
          "src/jsiWebSocket.c||src/jsiWebSocket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: typedef struct {",
          "106:     int sentCnt, recvCnt, recvErrCnt, sentErrCnt, httpCnt, uploadCnt;",
          "109:     int msgQLen;",
          "110:     int redirCnt;",
          "113:     int eventCnt;",
          "114:     int connectCnt;",
          "115:     bool isBinary, isFinal;",
          "",
          "[Removed Lines]",
          "107:     time_t sentLast, recvLast, recvErrLast, sentErrLast, httpLast;",
          "108:     time_t uploadStart, uploadLast, uploadEnd;",
          "111:     time_t redirLast;",
          "112:     time_t eventLast;",
          "",
          "[Added Lines]",
          "107:     time_t sentLast, recvLast, recvErrLast, sentErrLast, httpLast,",
          "108:         createTime, uploadStart, uploadLast, uploadEnd, redirLast, eventLast;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:     const char *clientIP;",
          "204:     int hdrSz[200]; // Space for up to 100 headers",
          "205:     int hdrNum;     // Num of above.",
          "208:     Jsi_DString dHdrs; // Store header string here.",
          "209:     Jsi_Stack *stack;",
          "210:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
          "211:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
          "212:     char *lastData;",
          "213: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
          "214:     char filename[PATH_MAX];",
          "215:     long file_length;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:     time_t deferDel; // TODO: defer delete if output via SSI echo ${#}.",
          "211:     char key[100]; // Lookup key.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250: static Jsi_OptionSpec WPSStats[] =",
          "251: {",
          "252:     JSI_OPT(INT,        jsi_wsStatData, connectCnt,   .help=\"Number of active connections\", jsi_IIRO),",
          "253:     JSI_OPT(INT,        jsi_wsStatData, eventCnt,     .help=\"Number of events of any type\"),",
          "254:     JSI_OPT(TIME_T,     jsi_wsStatData, eventLast,    .help=\"Time of last event of any type\"),",
          "255:     JSI_OPT(INT,        jsi_wsStatData, httpCnt,      .help=\"Number of http reqs\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:     JSI_OPT(TIME_T,     jsi_wsStatData, createTime,   .help=\"Time created\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:     JSI_OPT(STRKEY,     jsi_wsPss, clientName,  .help=\"Client hostname\", jsi_IIRO),",
          "280:     JSI_OPT(BOOL,       jsi_wsPss, echo,        .help=\"LogInfo outputs all websock Send/Recv messages\"),",
          "281:     JSI_OPT(ARRAY,      jsi_wsPss, headers,     .help=\"Headers to send to browser on connection: name/value pairs\"),",
          "283:     JSI_OPT(FUNC,       jsi_wsPss, onClose,     .help=\"Function to call when the websocket connection closes\", .flags=0, .custom=0, .data=(void*)\"ws:userobj|null, id:number\"),",
          "284:     JSI_OPT(FUNC,       jsi_wsPss, onGet,       .help=\"Function to call to server handle http-get\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, query:array\"),",
          "285:     JSI_OPT(FUNC,       jsi_wsPss, onUnknown,   .help=\"Function to call to server out content when no file exists\", .flags=0, .custom=0, .data=(void*)\"ws:userobj, id:number, url:string, args:array\"),",
          "",
          "[Removed Lines]",
          "282:     JSI_OPT(BOOL,       jsi_wsPss, isWebsock,   .help=\"Socket has been upgraded to a websocket connection\" ),",
          "",
          "[Added Lines]",
          "282:     JSI_OPT(BOOL,       jsi_wsPss, isWebsock,   .help=\"Is a websocket connection\" ),",
          "283:     JSI_OPT(STRBUF,     jsi_wsPss, key,         .help=\"String key lookup in ids command for SSI echo ${#}\", jsi_IIRO),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "409:         Jsi_HashValueSet(hPtr, pss);",
          "410:         pss->cmdPtr = cmdPtr;",
          "411:         pss->wsi = wsi;",
          "413:         pss->state = PWS_CONNECTED;",
          "414:         pss->cnt = cmdPtr->idx++;",
          "415:         pss->wid = sid;",
          "416:         pss->sfd = sfd;",
          "417:         pss->udata = Jsi_ValueNewObj(cmdPtr->interp, NULL);",
          "418:         Jsi_IncrRefCount(cmdPtr->interp, pss->udata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:         pss->stats.createTime = time(NULL);",
          "419:         snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", sid, pss, (int)cmdPtr->startTime);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1006:             cp += 9;",
          "1007:             llen -= 9;",
          "1008:             if (!Jsi_Strcmp(cp, \"#\"))",
          "1010:             else {",
          "1011:                 Jsi_Value *val = NULL;",
          "1012:                 if (!cmdPtr->udata) {",
          "",
          "[Removed Lines]",
          "1009:                 Jsi_DSPrintf(dStr, \"'%p'\", pss);",
          "",
          "[Added Lines]",
          "1012:                 Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1254:             && difftime(now, cmdPtr->stats.redirLast)<600 && ++cmdPtr->redirAllCnt>cmdPtr->redirMax)",
          "1255:             cmdPtr->redirDisable = 100;",
          "1256:         cmdPtr->stats.redirLast = now;",
          "1258:     }",
          "1259:     if (!inPtr || !*inPtr)",
          "1260:         inPtr = \"/\";",
          "",
          "[Removed Lines]",
          "1257:         return lws_http_redirect(wsi, 301, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "",
          "[Added Lines]",
          "1260:         rc = lws_http_redirect(wsi, 301, (uchar*)inPtr, Jsi_Strlen(inPtr), &p, end);",
          "1261:         return (rc == 100 ? 0 : 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1329:                 case JSI_ERROR: return -1;",
          "1330:                 case JSI_OK: return 0;",
          "1331:                 case JSI_SIGNAL:",
          "1333:                 case JSI_CONTINUE:",
          "1334:                     inPtr = Jsi_DSValue(tStr); break;",
          "1335:                 case JSI_BREAK: break;",
          "",
          "[Removed Lines]",
          "1332:                     return jsi_ws_http_redirect(wsi, 301, tStr, &p, end);",
          "",
          "[Added Lines]",
          "1336:                     return jsi_ws_http_redirect(wsi, 302, tStr, &p, end);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1521:                 goto done;",
          "1522:         }",
          "1525:             rc = jsi_wsServeString(pss, wsi, \"data:;base64,iVBORw0KGgo=\", 200, NULL, \"image/icon\");",
          "1526:         else {",
          "1527:             const char *cp = Jsi_Strrchr(buf,'/');",
          "",
          "[Removed Lines]",
          "1524:         if (Jsi_Strstr(buf, \"favicon.ico\"))",
          "",
          "[Added Lines]",
          "1528:         if (0 && Jsi_Strstr(buf, \"favicon.ico\"))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1536:                     goto serve;",
          "1537:                 }",
          "1538:             }",
          "1540:                 fprintf(stderr, \"failed open file for read: %s\\n\", buf);",
          "1541:             rc = jsi_wsServeString(pss, wsi, \"<b style='color:red'>ERROR: can not serve file!</b>\", 404, NULL, NULL);",
          "1542:         }",
          "",
          "[Removed Lines]",
          "1539:             if (cmdPtr->noWarn==0)",
          "",
          "[Added Lines]",
          "1543:             if (cmdPtr->noWarn==0 && !Jsi_Strstr(buf, \"favicon.ico\"))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2476:         pss = (jsi_wsPss*)Jsi_HashValueGet(hPtr);",
          "2477:         WSSIGASSERT(pss, PWS);",
          "2478:         if (pss->state == PWS_DEAD) continue;",
          "2484:         Jsi_DSPrintf(&dStr, \"%s%d\", (cnt++?\",\":\"\"), pss->wid);",
          "2485:     }",
          "2486:     Jsi_DSAppend(&dStr, \"]\", NULL);",
          "2487:     Jsi_RC rc = Jsi_JSONParse(interp, Jsi_DSValue(&dStr), ret, 0);",
          "",
          "[Removed Lines]",
          "2479:         if (val) {",
          "2480:             char buf[100];",
          "2481:             snprintf(buf, sizeof(buf), \"%p\", pss);",
          "2482:             if (Jsi_Strcmp(buf, val)) continue;",
          "2483:         }",
          "",
          "[Added Lines]",
          "2483:         if (val && Jsi_Strcmp(pss->key, val)) continue;",
          "2485:         if (val) break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
      "candidate_info": {
        "commit_hash": "788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/788726a8fb4989f3c9fc961e1aef1b23e9ad106f",
        "files": [
          "lib/Websrv.jsi",
          "src/jsi.h",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiValue.c",
          "src/parser.y",
          "tests/func.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.4\": object member dup detection, returned function invoke\n\nFossilOrigin-Name: 364d399b70459f7a23ae78c2650f2ee5b12270a26c25aea12b12a165d4de4503",
        "before_after_code_files": [
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tests/func.jsi||tests/func.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 .js scripts in file or dir and below, then exit.",
          "",
          "[Added Lines]",
          "30:         es5lint     :'',        // Parse-only a .js file or dir of files recursively disabling es6 features.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:         }",
          "401:     }",
          "405:         var i, lst;",
          "406:         if (File.isdir(d))",
          "407:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "",
          "[Removed Lines]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "",
          "[Added Lines]",
          "403:     function es5lint() {",
          "404:         var d = self.es5lint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "413:         }",
          "414:     }",
          "419:     if (self.srcFile !== '')",
          "420:         source(self.srcFile);",
          "",
          "[Removed Lines]",
          "416:     if (self.es5test)",
          "417:         return es5test();",
          "",
          "[Added Lines]",
          "416:     if (self.es5lint)",
          "417:         return es5lint();",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1880:                 int itemcount = (uintptr_t)ip->data;",
          "1881:                 Assert(itemcount>=0);",
          "1882:                 jsiVarDeref(interp, itemcount * 2);",
          "1885:                 jsiClearStack(interp,1);",
          "1886:                 Jsi_ValueMakeObject(interp, &_jsi_TOP, obj);",
          "",
          "[Removed Lines]",
          "1883:                 Jsi_Obj *obj = Jsi_ObjNewObj(interp, _jsi_STACK+(fp->Sp-itemcount*2), itemcount*2);",
          "",
          "[Added Lines]",
          "1883:                 Jsi_Obj *obj = jsi_ObjNewObj(interp, _jsi_STACK+(fp->Sp-itemcount*2), itemcount*2, 1);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1547: extern bool jsi_ModBlacklisted(Jsi_Interp *interp, const char *mod);",
          "1548: extern bool jsi_FuncIsNoop(Jsi_Interp* interp, Jsi_Value *func);",
          "1549: extern Jsi_RC jsi_InfoLocalsCmd(Jsi_Interp *interp, bool funcsOnly, bool varsOnly, Jsi_Value **ret);",
          "1551: typedef enum {",
          "1552:     _JSI_CDATA_INFO=0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: extern Jsi_Obj *jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count, bool unique);",
          "1551: extern Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     hPtr = Jsi_TreeEntryNew(treePtr, key, &isNew);",
          "39:     if (!hPtr)",
          "40:         return NULL;",
          "42:         Jsi_LogWarn(\"add duplicate key: %s\", key);",
          "43:     if (val)",
          "44:         SIGASSERT(val,VALUE);",
          "",
          "[Removed Lines]",
          "41:     if (unique && !isNew)",
          "",
          "[Added Lines]",
          "41:     if (unique && !isNew) // Want this only from OP_OBJECT in jsiEval.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495: {",
          "496:     const char *key = NULL;",
          "497:     int flags = 0;",
          "",
          "[Removed Lines]",
          "494: static Jsi_RC ObjInsertFromValue(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *keyVal, Jsi_Value *nv)",
          "",
          "[Added Lines]",
          "494: static Jsi_RC ObjInsertFromValue(Jsi_Interp *interp, Jsi_Obj *obj, Jsi_Value *keyVal, Jsi_Value *nv, bool unique)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "508:         key = Jsi_ValueGetDString(interp, keyVal, &dStr, 0);",
          "509:     if (!key)",
          "510:         return JSI_ERROR;",
          "512: }",
          "514: Jsi_RC Jsi_ObjFreeze(Jsi_Interp *interp, Jsi_Obj *obj, bool freeze, bool modifyOk, bool readCheck) {",
          "",
          "[Removed Lines]",
          "511:     return Jsi_ObjInsert(interp, obj, key, nv, flags);",
          "",
          "[Added Lines]",
          "511:     return jsi_ObjValInsert(interp, obj, key, nv, NULL, flags, unique);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "660:     return adp;",
          "661: }",
          "664: {",
          "665:     Jsi_Obj *obj = Jsi_ObjNewType(interp, JSI_OT_OBJECT);",
          "666:     if (count%2) return obj;",
          "",
          "[Removed Lines]",
          "663: Jsi_Obj *Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count)",
          "",
          "[Added Lines]",
          "663: Jsi_Obj *jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count, bool unique)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:             }",
          "698:         }",
          "699:         v = Jsi_ValueDup(interp, v);",
          "701:         Jsi_DecrRefCount(interp, v);",
          "702:     }",
          "703:     return obj;",
          "704: }",
          "706: void Jsi_ObjSetLength(Jsi_Interp *interp, Jsi_Obj *obj, uint len)",
          "707: {",
          "708:     if (obj->isarrlist) {",
          "",
          "[Removed Lines]",
          "700:         ObjInsertFromValue(interp, obj, items[i], v);",
          "",
          "[Added Lines]",
          "700:         ObjInsertFromValue(interp, obj, items[i], v, unique);",
          "706: Jsi_Obj *Jsi_ObjNewObj(Jsi_Interp *interp, Jsi_Value **items, int count)",
          "707: {",
          "708:     return jsi_ObjNewObj(interp, items, count, 0);",
          "709: }",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:     return rc;",
          "1400: }",
          "1403: {",
          "1404:     Jsi_TreeEntry *hPtr;",
          "1405:     SIGASSERT(val, VALUE);",
          "",
          "[Removed Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "[Added Lines]",
          "1402: Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1441: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "1442: {",
          "1444: }",
          "1446: static Jsi_RC IterGetKeysCallback(Jsi_Tree* tree, Jsi_TreeEntry *hPtr, void *data)",
          "",
          "[Removed Lines]",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 1);",
          "",
          "[Added Lines]",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 0);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:         int expr_cnt = opl ? opl->expr_counter:0;",
          "738:         $$ = codes_join3(ff, (opl ? opl : code_nop()), code_fcall(pstate, &@3, expr_cnt, NULL, NULL, opl, NULL));",
          "739:     }",
          "740:     | '(' expr ')' '(' exprlist_opt ')' {",
          "741:         Jsi_OpCodes *opl = $5;",
          "742:         int expr_cnt = opl ? opl->expr_counter:0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "740:     | fcall_exprs '(' exprlist_opt ')' {",
          "741:         Jsi_OpCodes *opl = $3;",
          "742:         int expr_cnt = opl ? opl->expr_counter:0;",
          "743:         $$ = codes_join4($1, code_chthis(pstate,&@1, 0), (opl ? opl : code_nop()), code_fcall(pstate, &@2,expr_cnt, NULL, NULL, opl, NULL));",
          "744:     }",
          "",
          "---------------"
        ],
        "tests/func.jsi||tests/func.jsi": [
          "File: tests/func.jsi -> tests/func.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     return sum;",
          "8: };",
          "10: ;'===Begin Test===';",
          "11: ;a(10);",
          "12: ;a(100);",
          "13: ;a(1000);",
          "16: =!EXPECTSTART!=",
          "17: '===Begin Test==='",
          "18: a(10) ==> 45",
          "19: a(100) ==> 4950",
          "20: a(1000) ==> 499500",
          "21: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: function foo() {",
          "11:   return function (x) { return('FOO',x); };",
          "12: }",
          "13: function bar() {",
          "14:   return function () { return foo(); };",
          "15: }",
          "22: ;'===Func return-invoke===';",
          "23: ;(foo())(1);",
          "24: ;foo()(2);",
          "25: ;bar()()(3);",
          "34: '===Func return-invoke==='",
          "35: (foo())(1) ==> 1",
          "36: foo()(2) ==> 2",
          "37: bar()()(3) ==> 3",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
      "candidate_info": {
        "commit_hash": "97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/97cd9c7332c6fe2d452b27ce9c0007d67b9631cb",
        "files": [
          "lib/Cdata.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiMySql.c",
          "src/jsiProto.c",
          "src/jsiSqlite.c",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.41\": provide/require option changes\n\nFossilOrigin-Name: af2c94530bd223b842b50e10e2d6cfc3ba05fd90318caf44fd5e7177ba9063b6",
        "before_after_code_files": [
          "lib/Cdata.jsi||lib/Cdata.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Cdata.jsi||lib/Cdata.jsi": [
          "File: lib/Cdata.jsi -> lib/Cdata.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         name        :null,  // Name of group",
          "20:         noline      :false, // Do not add #line to c output file",
          "21:         O           :'',    // Output file, or '-' to return string. Default is FILE.c.",
          "22:         unkType     :true,  // Warn of unknown struct fields self will be ignored.",
          "23:         varSuffix   :'_Data'// Suffix to add to data used for object config.",
          "24:     };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:         prod        :false, // Set production mode: masks out --I log=debug,trace,test,assert",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1655:         vr.spec = Demo__Specs;",
          "1656:         vr.data = ddPtr;",
          "1657:         vr.cmdSpec = DemoCmds;",
          "1658:         if (Demo_PkgInfo) {",
          "1661:         }",
          "1662:         if (rc == JSI_OK)",
          "1663:             rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, &vr);",
          "1666: #else",
          "1667:         rc = Jsi_PkgProvideEx(interp, \"Demo\", 1, Jsi_InitDemo, NULL);",
          "1668: #endif",
          "",
          "[Removed Lines]",
          "1659:             vr.info = Jsi_ValueNew1(interp);",
          "1660:             rc = Jsi_JSONParse(interp, Demo_PkgInfo, &vr.info, 0);",
          "1664:         if (vr.info)",
          "1665:             Jsi_DecrRefCount(interp, vr.info);",
          "",
          "[Added Lines]",
          "1659:         if (self.prod)",
          "1660:             vr.conf.logmask = Jsi_LogProdMask;",
          "1662:             vr.conf.info = Jsi_ValueNew1(interp);",
          "1663:             rc = Jsi_JSONParse(interp, Demo_PkgInfo, &vr.conf.info, 0);",
          "1667:         if (vr.conf.info)",
          "1668:             Jsi_DecrRefCount(interp, vr.conf.info);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 40",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 41",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392: } Jsi_CmdSpec;",
          "394: typedef struct {",
          "396:     int traceCall;",
          "397:     bool coverage;",
          "398:     bool profile;",
          "399: } Jsi_ModuleConf;",
          "401: typedef struct {",
          "402:     struct Jsi_OptionSpec *spec;",
          "403:     void *data; // \"status\" output in Info.package",
          "404:     Jsi_CmdSpec *cmdSpec;",
          "409: } Jsi_PkgOpts;",
          "411: typedef struct {",
          "412:     char *str;",
          "413:     int32_t len;",
          "",
          "[Removed Lines]",
          "395:     uint log, logmask;",
          "405:     Jsi_Value *info;",
          "406:     void *reserved[3]; // Reserved for future use.",
          "407:     Jsi_ModuleConf modConf;",
          "408:     void *reserved2[3]; // Reserved for future use.",
          "",
          "[Added Lines]",
          "395:     Jsi_Value *info;",
          "396:     uint logmask; // Mask out interp->log. In production C sets to Jsi_LogProdMask and Js sets via self.Debug=false...",
          "397:     uint log;",
          "401:     Jsi_Value *udata;",
          "408:     Jsi_ModuleConf conf;",
          "409:     void *reserved[5]; // Reserved for future use.",
          "412: #define Jsi_LogProdMask (uint)((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "413: #define Jsi_LogDefVal ~Jsi_LogProdMask",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1239: #define Jsi_LogError(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1240: #define Jsi_LogParse(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1243: #define Jsi_LogDebug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1244: #define Jsi_LogTrace(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1247: #ifndef JSI_EXT_OPTS_OMIT",
          "1249: #define Jsi_LogErrorExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_ERROR, fmt, ##__VA_ARGS__)",
          "1250: #define Jsi_LogParseExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_PARSE, fmt, ##__VA_ARGS__)",
          "1253: #define Jsi_LogDebugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_DEBUG, fmt, ##__VA_ARGS__)",
          "1254: #define Jsi_LogTraceExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TRACE, fmt, ##__VA_ARGS__)",
          "1256: #else",
          "1257: #define Jsi_LogBugExt(fmt,...)",
          "1258: #define Jsi_LogErrorExt(fmt,...)",
          "",
          "[Removed Lines]",
          "1238: #define Jsi_LogBug(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1241: #define Jsi_LogWarn(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1242: #define Jsi_LogInfo(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogTest(fmt,...) Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1248: #define Jsi_LogBugExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1251: #define Jsi_LogWarnExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1252: #define Jsi_LogInfoExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogTestExt(fmt,...) Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "1242: #define Jsi_LogBug(fmt,...)   Jsi_LogMsgExt(interp, NULL, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1245: #define Jsi_LogWarn(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1246: #define Jsi_LogInfo(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1249: #define Jsi_LogTest(fmt,...)  Jsi_LogMsgExt(interp, NULL, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "1252: #define Jsi_LogBugExt(fmt,...)   Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_BUG, fmt, ##__VA_ARGS__)",
          "1255: #define Jsi_LogWarnExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "1256: #define Jsi_LogInfoExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_INFO, fmt, ##__VA_ARGS__)",
          "1259: #define Jsi_LogTestExt(fmt,...)  Jsi_LogMsgExt(interp, JSI_EXT_OPTS, JSI_LOG_TEST, fmt, ##__VA_ARGS__)",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     JSI_OPT(CUSTOM,Jsi_ModuleConf, log,     .help=\"Logging flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "856:     JSI_OPT(CUSTOM,Jsi_ModuleConf, logmask, .help=\"Logging mask flags\", .flags=JSI_OPT_CUST_NOCASE,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_LogCodes),",
          "857:     JSI_OPT(BOOL,  Jsi_ModuleConf, coverage,.help=\"On exit generate detailed code coverage for function calls (with profile)\" ),",
          "858:     JSI_OPT(BOOL,  Jsi_ModuleConf, profile, .help=\"On exit generate profile of function calls\" ),",
          "859:     JSI_OPT(CUSTOM,Jsi_ModuleConf, traceCall,.help=\"Trace commands\", .flags=0,  .custom=Jsi_Opt_SwitchBitset,  .data=jsi_callTraceStrs),",
          "860:     JSI_OPT_END(Jsi_ModuleConf, .help=\"Options for require command\")",
          "861: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:     JSI_OPT(OBJ,   Jsi_ModuleConf, info,    .help=\"Info provided by module\", .flags=JSI_OPT_INIT_ONLY ),",
          "861:     JSI_OPT(OBJ,   Jsi_ModuleConf, udata,   .help=\"User data settable by require\" ),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "874:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
          "875:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
          "876:         Jsi_ObjInsert(interp, nobj, \"loadFile\", Jsi_ValueNewStringDup(interp, cp), 0);",
          "878:         if (!fval || !Jsi_ValueIsFunction(interp, fval))",
          "879:             fval = Jsi_ValueNewNull(interp);",
          "880:         Jsi_ObjInsert(interp, nobj, \"func\", fval, 0);",
          "893:         fval = interp->NullValue;",
          "894:         if (ptr->popts.spec && ptr->popts.data) {",
          "895:             fval = Jsi_ValueNew1(interp);",
          "",
          "[Removed Lines]",
          "877:         Jsi_Value *fval2, *fval = Jsi_NameLookup(interp, name);",
          "881:         fval = ptr->popts.info;",
          "882:         if (!fval) fval = interp->NullValue;",
          "883:         if (!Jsi_ValueIsObjType(interp, fval, JSI_OT_FUNCTION))",
          "884:             Jsi_ObjInsert(interp, nobj, \"info\", fval, 0);",
          "885:         else {",
          "886:             fval2 = Jsi_ValueNew1(interp);",
          "887:             Jsi_RC rc = Jsi_FunctionInvoke(interp, fval, NULL, &fval2, NULL);",
          "888:             if (rc != JSI_OK)",
          "889:                 Jsi_LogWarn(\"status call failed\");",
          "890:             Jsi_ObjInsert(interp, nobj, \"info\", fval2, 0);",
          "891:             Jsi_DecrRefCount(interp, fval2);",
          "892:         }",
          "",
          "[Added Lines]",
          "879:         Jsi_Value *fval = Jsi_NameLookup(interp, name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "900:             Jsi_DecrRefCount(interp, fval);",
          "902:         fval = Jsi_ValueNew1(interp);",
          "905:         Jsi_DecrRefCount(interp, fval);",
          "907:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "903:         Jsi_OptionsConf(interp, jsiModuleOptions, &ptr->popts.modConf, NULL, &fval, 0);",
          "904:         Jsi_ObjInsert(interp, nobj, \"moduleOpts\", fval, 0);",
          "",
          "[Added Lines]",
          "893:         Jsi_OptionsConf(interp, jsiModuleOptions, &ptr->popts.conf, NULL, &fval, 0);",
          "894:         Jsi_ObjInsert(interp, nobj, \"conf\", fval, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "955:         return JSI_ERROR;",
          "956:     Jsi_RC rc = JSI_OK;",
          "957:     if (argc==2) {",
          "959:             rc = Jsi_LogType(\"package '%s' downlevel: %.\" JSI_NUMGFMT \" < %.\" JSI_VERFMT_LEN JSI_NUMGFMT, name, ver, n);",
          "960:         if (rc != JSI_OK)",
          "961:             return rc;",
          "",
          "[Removed Lines]",
          "958:         if (ver < n)",
          "",
          "[Added Lines]",
          "948:         if (ver < n)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "966:     if (opts != NULL) {",
          "967:         jsi_PkgInfo *pkg = jsi_PkgGet(interp, name);",
          "968:         if (!pkg) return JSI_ERROR;",
          "971:             return JSI_ERROR;",
          "972:     }",
          "",
          "[Removed Lines]",
          "969:         Jsi_ModuleConf *mptr = &pkg->popts.modConf;",
          "970:         if (Jsi_OptionsProcess(interp, jsiModuleOptions, mptr, opts, 0) < 0)",
          "",
          "[Added Lines]",
          "959:         Jsi_ModuleConf *mptr = &pkg->popts.conf;",
          "960:         if (Jsi_OptionsProcess(interp, jsiModuleOptions, mptr, opts, JSI_OPTS_IS_UPDATE) < 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "980: {",
          "981:     jsi_PkgInfo *ptr;",
          "982:     Jsi_HashEntry *hPtr = Jsi_HashEntryFind(interp->packageHash, name);",
          "984:     jsi_Frame *fp = interp->framePtr;",
          "985:     if (version<0) {",
          "986:         if (hPtr) {",
          "",
          "[Removed Lines]",
          "983:     Jsi_Value *opts = (popts?popts->info:NULL);",
          "",
          "[Added Lines]",
          "973:     Jsi_Value *opts = (popts?popts->conf.info:NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1008:         ptr->initProc = initProc;",
          "1009:         if (popts) {",
          "1010:             ptr->popts = *popts;",
          "1013:         }",
          "1014:         if (!initProc && fp->filePtr && fp->filePtr->fileName && fp->filePtr->fileName[0]) {",
          "1015:             ptr->filePtr = fp->filePtr;",
          "",
          "[Removed Lines]",
          "1011:             if (popts->info)",
          "1012:                 Jsi_IncrRefCount(interp, popts->info);",
          "",
          "[Added Lines]",
          "1001:             if (popts->conf.info)",
          "1002:                 Jsi_IncrRefCount(interp, popts->conf.info);",
          "1003:             if (popts->conf.udata)",
          "1004:                 Jsi_IncrRefCount(interp, popts->conf.udata);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1028:                 if (opts) {",
          "1029:                     nopts = Jsi_ValueNew1(interp->topInterp);",
          "1030:                     Jsi_CleanValue(interp, interp->topInterp, opts, &nopts);",
          "1032:                 }",
          "1033:                 Jsi_RC rc = Jsi_PkgProvideEx(interp->topInterp, name, version, initProc, &po);",
          "1034:                 if (nopts)",
          "",
          "[Removed Lines]",
          "1031:                     po.info = nopts;",
          "",
          "[Added Lines]",
          "1023:                     po.conf.info = nopts;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1093:             return JSI_ERROR;",
          "1094:         if (rc == JSI_OK) {",
          "1095:             Jsi_PkgOpts po = {};",
          "1098:         }",
          "1099:     }",
          "1100:     Jsi_DSFree(&dStr);",
          "",
          "[Removed Lines]",
          "1096:             po.info = Jsi_ValueArrayIndex(interp, args, 2);",
          "1097:             rc = Jsi_PkgProvideEx(interp, name, n, NULL, &po);",
          "",
          "[Added Lines]",
          "1088:             v = Jsi_ValueArrayIndex(interp, args, 2);",
          "1089:             if (v && Jsi_OptionsProcess(interp, jsiModuleOptions, &po.conf, v, 0) < 0)",
          "1090:                 rc = JSI_ERROR;",
          "1091:             else",
          "1092:                 rc = Jsi_PkgProvideEx(interp, name, n, NULL, &po);",
          "1093:             if (po.conf.info)",
          "1094:                 Jsi_DecrRefCount(interp, po.conf.info);",
          "1095:             if (po.conf.udata)",
          "1096:                 Jsi_DecrRefCount(interp, po.conf.udata);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1785:     return cp;",
          "1786: }",
          "1804: #define FN_assert JSI_INFO(\"\\",
          "1805: Assertions.  Enable with jsish --I Assert or using the -Assert module option.\")",
          "1806: Jsi_RC jsi_AssertCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1807:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1808: {",
          "1810:         return JSI_OK;",
          "1811:     int rc = 0;",
          "1812:     Jsi_RC rv = JSI_OK;",
          "",
          "[Removed Lines]",
          "1788: uint jsi_GetLogFlag(Jsi_Interp *interp, uint maskidx) {",
          "1789:     uint logflag = interp->log, logmask = 0;",
          "1790:     jsi_Frame* fp = interp->framePtr;",
          "1791:      if (fp->filePtr) {",
          "1792:         logflag |= fp->filePtr->log;",
          "1793:         if (fp->filePtr->pkg) {",
          "1794:             logflag |= fp->filePtr->pkg->log;",
          "1795:             logmask |= fp->filePtr->pkg->logmask;",
          "1796:         }",
          "1797:      }",
          "1798:     logflag &= ~logmask;",
          "1799:     if (maskidx)",
          "1800:         logflag = logflag&(1<<maskidx);",
          "1801:     return logflag;",
          "1802: }",
          "1809:     if (!jsi_GetLogFlag(interp,JSI_LOG_ASSERT))",
          "",
          "[Added Lines]",
          "1792:     if (!jsi_GetLogFlag(interp,JSI_LOG_ASSERT, NULL))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3990:         }",
          "3991: mismatch:",
          "3992:         ok = 0;",
          "3994:             rc = Jsi_LogError(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "3995:         else",
          "3996:             Jsi_LogWarn(\"matchobj failed: expected '%s', not '%s'\", sp, cp);",
          "",
          "[Removed Lines]",
          "3993:         if (jsi_GetLogFlag(interp, JSI_LOG_ASSERT) && !noerror)",
          "",
          "[Added Lines]",
          "3976:         if (jsi_GetLogFlag(interp, JSI_LOG_ASSERT, NULL) && !noerror)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4778:         Jsi_Func *pf = interp->prevActiveFunc;",
          "4779:         Jsi_ModuleConf *mo = NULL;",
          "4780:         if (pf && pf->pkg) {",
          "4782:             pf->pkg->logmask = mo->logmask;",
          "4783:             pf->pkg->log = mo->log;",
          "4784:         }",
          "",
          "[Removed Lines]",
          "4781:             mo = &pf->pkg->popts.modConf;",
          "",
          "[Added Lines]",
          "4764:             mo = &pf->pkg->popts.conf;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:         jsi_NoOpCmd(interp, NULL, NULL, NULL, NULL);",
          "750:         goto empty_func;",
          "751:     }",
          "753:         goto empty_func;",
          "754:     const char *onam = funcPtr->name;",
          "",
          "[Removed Lines]",
          "752:     if (!jsi_GetLogFlag(interp, JSI_LOG_ASSERT) && funcPtr->callback == jsi_AssertCmd)",
          "",
          "[Added Lines]",
          "752:     if (!jsi_GetLogFlag(interp, JSI_LOG_ASSERT, NULL) && funcPtr->callback == jsi_AssertCmd)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066:         if (ip->logidx) { // Mask out LogDebug, etc if not enabled.",
          "1068:             interp->curIp = ip;",
          "1069:             if (!logflag2) {",
          "1070:                 ip++;",
          "",
          "[Removed Lines]",
          "1067:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx);",
          "",
          "[Added Lines]",
          "1067:             uint oli = ip->logidx, logflag2 = jsi_GetLogFlag(interp, ip->logidx, NULL);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "953:     if (--func->refCnt > 0)",
          "954:         return;",
          "955:     jsi_PkgInfo *pkg = func->pkg;",
          "958:     if (profile || cover) {",
          "959:         Jsi_DString dStr;",
          "960:         Jsi_DSInit(&dStr);",
          "",
          "[Removed Lines]",
          "956:     bool profile = (interp->profile || (pkg?pkg->popts.modConf.profile:0)),",
          "957:         cover = (interp->coverage || (pkg?pkg->popts.modConf.coverage:0));",
          "",
          "[Added Lines]",
          "956:     bool profile = (interp->profile || (pkg?pkg->popts.conf.profile:0)),",
          "957:         cover = (interp->coverage || (pkg?pkg->popts.conf.coverage:0));",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: } jsi_Sig;",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsgExt(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "264: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "267: struct jsi_OpCode;",
          "",
          "[Removed Lines]",
          "263: #define jsi_LogDefVal (uint)((1<<JSI_LOG_DEBUG)|(1<<JSI_LOG_TRACE)|(1<<JSI_LOG_TEST)|(1<<JSI_LOG_ASSERT))",
          "265: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask);",
          "",
          "[Added Lines]",
          "264: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask, Jsi_PkgOpts* popts);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "901:     const char *loadFile;  // Full path of file name loaded.",
          "902:     Jsi_InitProc *initProc; // For C-extensions.",
          "903:     bool needInit;  // If a C-extension and _Init func needs calling in this interp.",
          "905:     Jsi_PkgOpts popts;",
          "906:     jsi_FileInfo* filePtr;",
          "907:     int log, logmask; // Runtime values set by moduleOps.",
          "",
          "[Removed Lines]",
          "904:     Jsi_Value *info;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574: static Jsi_RC packageHashFree(Jsi_Interp *interp, Jsi_HashEntry *hPtr, void *ptr) {",
          "575:     jsi_PkgInfo *p = (jsi_PkgInfo*)ptr;",
          "577:     Jsi_Free(p);",
          "578:     return JSI_OK;",
          "579: }",
          "",
          "[Removed Lines]",
          "576:     if (p->popts.info) Jsi_DecrRefCount(interp, p->popts.info);",
          "",
          "[Added Lines]",
          "576:     if (p->popts.conf.info) Jsi_DecrRefCount(interp, p->popts.conf.info);",
          "577:     if (p->popts.conf.udata) Jsi_DecrRefCount(interp, p->popts.conf.udata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1110:     interp->logOpts.func = 1;",
          "1111:     interp->logOpts.before = 1;",
          "1112:     interp->typeCheck.strict = 1;",
          "1114:     int argc = interp->opts.argc;",
          "1115:     char **argv = interp->opts.argv;",
          "1116:     char *argv0 = (argv?argv[0]:NULL);",
          "",
          "[Removed Lines]",
          "1113:     interp->log = ~jsi_LogDefVal;",
          "",
          "[Added Lines]",
          "1114:     interp->log = Jsi_LogDefVal;",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2502:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "2503:     Jsi_JSONParseFmt(interp, &info, \"{pkgVer:%d}\", MYSQL_VERSION_ID);",
          "2505:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"MySql\", 1.1, Jsi_InitMySql, &dbPkgOpts);",
          "2506:     Jsi_DecrRefCount(interp, info);",
          "2507:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "2504:     Jsi_PkgOpts dbPkgOpts = { .spec=mydb_ObjCmd_Specs, .data=&mydb_PkgStatus, .cmdSpec=mysqlCmds, .info=info};",
          "",
          "[Added Lines]",
          "2504:     Jsi_ModuleConf modConf = {  .info=info, .logmask=Jsi_LogProdMask};",
          "2505:     Jsi_PkgOpts dbPkgOpts = { .spec=mydb_ObjCmd_Specs, .data=&mydb_PkgStatus, .cmdSpec=mysqlCmds,.conf=modConf};",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:         double timStart = 0;",
          "188:         jsi_PkgInfo *pkg = funcPtr->pkg;",
          "189:         if (pkg) {",
          "193:         }",
          "195:         interp->callDepth++;",
          "",
          "[Removed Lines]",
          "190:             tc |= pkg->popts.modConf.traceCall;",
          "191:             profile |= pkg->popts.modConf.profile;",
          "192:             coverage |= pkg->popts.modConf.coverage;",
          "",
          "[Added Lines]",
          "190:             tc |= pkg->popts.conf.traceCall;",
          "191:             profile |= pkg->popts.conf.profile;",
          "192:             coverage |= pkg->popts.conf.coverage;",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4653:     Jsi_Value *info = Jsi_ValueNew1(interp);",
          "4654:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", hdrNum:%d, hdrSrcId:\\\"%s\\\", pkgVer:%d}\",",
          "4655:         (char *)sqlite3_libversion(), SQLITE_VERSION, SQLITE_VERSION_NUMBER, SQLITE_SOURCE_ID, jsi_DbPkgVersion);",
          "4657:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"Sqlite\", jsi_DbPkgVersion, Jsi_InitSqlite, &dbPkgOpts);",
          "4658:     Jsi_DecrRefCount(interp, info);",
          "4659:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "4656:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&db_PkgStatus, .cmdSpec=sqliteCmds, .info=info };",
          "",
          "[Added Lines]",
          "4656:     Jsi_ModuleConf modConf = { .info=info, .logmask=Jsi_LogProdMask};",
          "4657:     Jsi_PkgOpts dbPkgOpts = { .spec=db_ObjCmd_Specs, .data=&db_PkgStatus, .cmdSpec=sqliteCmds, .conf=modConf };",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:     }",
          "107: }",
          "109: static void (*logHook)(const char *buf, va_list va) = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: uint jsi_GetLogFlag(Jsi_Interp *interp, uint maskidx, Jsi_PkgOpts* popts) {",
          "110:     uint log = 0, mask = 0, ilog = interp->log;",
          "111:     jsi_Frame* fp = interp->framePtr;",
          "112:      if (popts) {",
          "113:         mask = popts->conf.logmask;",
          "114:         log = popts->conf.log;",
          "115:      } else if (fp->filePtr) {",
          "116:         log = fp->filePtr->log;",
          "117:         if (fp->filePtr->pkg) {",
          "118:             log |= fp->filePtr->pkg->log;",
          "119:             mask |= fp->filePtr->pkg->logmask;",
          "120:         }",
          "121:      }",
          "122:      log |= (ilog&~mask);",
          "123:      if (maskidx)",
          "124:         log &= (1<<maskidx);",
          "125:     return log;",
          "126: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     if (!interp || Jsi_InterpGone(interp))",
          "114:         return JSI_ERROR;",
          "115:     bool isExt = 0, ftail = interp->logOpts.ftail;",
          "120:         mask = popts->modConf.logmask;",
          "123:         isExt = 1;",
          "124:         ftail = 1;",
          "125:     }",
          "",
          "[Removed Lines]",
          "116:     uint log = 0, mask, cshift = (1<<code);",
          "117:     if (!popts)",
          "118:         log = jsi_GetLogFlag(interp, code);",
          "119:     else {",
          "121:         log = popts->modConf.log;",
          "122:         log = ((~mask|log)&cshift);",
          "",
          "[Added Lines]",
          "136:     uint log = jsi_GetLogFlag(interp, code, popts);",
          "139:         log = popts->modConf.log|interp->log;",
          "141:     if (popts) {",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3347: #endif",
          "3348:     Jsi_JSONParseFmt(interp, &info, \"{libVer:\\\"%s\\\", hdrVer:\\\"%s\\\", pkgVer:%d, ssl:%s, sslVer:%ld, sslVerStr:\\\"%s\\\", sslCompat:%ld}\",",
          "3349:         libver, LWS_LIBRARY_VERSION, jsi_WsPkgVersion, (hasSSL?\"true\":\"false\"), sslVer, sslVerStr, sslCompat);",
          "3351:     Jsi_RC rc = Jsi_PkgProvideEx(interp, \"WebSocket\", jsi_WsPkgVersion, Jsi_InitWebSocket, &wsPkgOpts);",
          "3352:     Jsi_DecrRefCount(interp, info);",
          "3353:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "3350:     Jsi_PkgOpts wsPkgOpts = { .spec=wsObjCmd_Specs, .data=&ws_PkgStatus, .cmdSpec=websockCmds, .info=info };",
          "",
          "[Added Lines]",
          "3350:     Jsi_ModuleConf modConf = { .info=info, .logmask=Jsi_LogProdMask};",
          "3351:     Jsi_PkgOpts wsPkgOpts = { .spec=wsObjCmd_Specs, .data=&ws_PkgStatus, .cmdSpec=websockCmds, .conf=modConf };",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1429: <tr><td>log</td><td><i>ARRAY</i></td><td>Logging flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1430: <tr><td>logmask</td><td><i>ARRAY</i></td><td>Logging mask flags. (zero or more of: <b>bug</b>, <b>assert</b>, <b>debug</b>, <b>trace</b>, <b>test</b>, <b>info</b>, <b>warn</b>, <b>error</b>, <b>parse</b>)</td><td><i>noCase</i></td></tr>",
          "1431: <tr><td>coverage</td><td><i>BOOL</i></td><td>On exit generate detailed code coverage for function calls (with profile).</td><td><i></i></td></tr>",
          "1432: <tr><td>profile</td><td><i>BOOL</i></td><td>On exit generate profile of function calls.</td><td><i></i></td></tr>",
          "1433: <tr><td>traceCall</td><td><i>ARRAY</i></td><td>Trace commands. (zero or more of: <b>funcs</b>, <b>cmds</b>, <b>new</b>, <b>return</b>, <b>args</b>, <b>notrunc</b>, <b>noparent</b>, <b>full</b>, <b>before</b>)</td><td><i></i></td></tr>",
          "1434: </table>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1432: <tr><td>info</td><td><i>OBJ</i></td><td>Info provided by module.</td><td><i>initOnly</i></td></tr>",
          "1435: <tr><td>udata</td><td><i>OBJ</i></td><td>User data settable by require.</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
      "candidate_info": {
        "commit_hash": "4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/4b93968b73d3c9a9ac42fb71150c1a0dcad634bd",
        "files": [
          "lib/Debug.jsi",
          "lib/Jsish.jsi",
          "lib/Zip.jsi",
          "lib/autoload.jsi",
          "lib/www/md/Logging.md",
          "lib/www/md/Misc.md",
          "lib/www/md/Modules.md",
          "lib/www/md/Reference.md",
          "lib/www/md/Start.md",
          "lib/www/md/Testing.md",
          "lib/www/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiFileCmds.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "tests/assert.jsi",
          "tests/file2.jsi",
          "tools/mkindex.jsi",
          "tools/protos.jsi",
          "tools/randtest.jsi",
          "tools/stubrenumber.jsi"
        ],
        "message": "Release \"3.4.5\": fix File.glob, add Interp.asserts, add Jsi_CopyDir, Zip -startDir\n\nFossilOrigin-Name: 27bcb4bd9f140eeafdafdab0249afec9620c87e333cb153f3baae27e3bed6f73",
        "before_after_code_files": [
          "lib/Debug.jsi||lib/Debug.jsi",
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/Zip.jsi||lib/Zip.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "tests/assert.jsi||tests/assert.jsi",
          "tests/file2.jsi||tests/file2.jsi",
          "tools/mkindex.jsi||tools/mkindex.jsi",
          "tools/protos.jsi||tools/protos.jsi",
          "tools/randtest.jsi||tools/randtest.jsi",
          "tools/stubrenumber.jsi||tools/stubrenumber.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiInterp.c||src/jsiInterp.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiInterp.c||src/jsiInterp.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Debug.jsi||lib/Debug.jsi": [
          "File: lib/Debug.jsi -> lib/Debug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:             args:self.args,",
          "484:             scriptFile:self.dbfile,",
          "485:             isSafe:self.safe,",
          "487:         };",
          "488:         self.interp = new Interp(dopts);",
          "489:         puts(\"Running in debugger: \"+self.dbfile+' '+self.args.toString());",
          "",
          "[Removed Lines]",
          "486:             name:'debugProg'",
          "",
          "[Added Lines]",
          "486:             name:'debugProg',",
          "487:             log:Interp.conf('log'),",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:     return false;",
          "306: }",
          "308: if (Info.isMain()) {",
          "310:     var self = {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308: function Jsi_CopyDir(dir:string, to:string, globOpts:object=void) {",
          "309:     var opts = {recurse:true, types:'f', dir};",
          "310:     if (globOpts)",
          "311:          opts = Object.assign(opts, globopts);",
          "312:     var i, n, dn, d = File.glob(opts).sort();",
          "313:     to = File.realpath(to);",
          "314:     if (!File.exists(to))",
          "315:         File.mkdir(to);",
          "316:     for (i of d) {",
          "317:         n = File.join(to, i);",
          "318:         dn = File.dirname(n);",
          "319:         if (!File.exists(dn))",
          "320:             File.mkdir(dn);",
          "321:         File.copy(File.join(dir, i), n);",
          "322:     }",
          "323: }",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||lib/Zip.jsi": [
          "File: lib/Zip.jsi -> lib/Zip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: function Zip(args:string|array, conf:object=void) {",
          "7:     const options = { // Implements zip functionality",
          "10:         indir       :'',        // Input directory",
          "12:     };",
          "13:     var self = parseOpts({}, options, conf);",
          "",
          "[Removed Lines]",
          "8:         userDir     :'',        // User directory to add to zip (zvfs)",
          "9:         outfile     :'',        // Output file for zvfs instead of appending \"sh\"",
          "11:         verbose     :false      // Echo file name of unzip.",
          "",
          "[Added Lines]",
          "9:         outfile     :'',        // Output file for zvfs instead of appending \"sh\"",
          "10:         startDir    :'',        // Start at dir for unzip.",
          "11:         userDir     :'',        // User directory to add to zip (zvfs)",
          "12:         verbose     :false,     // Echo file name of unzip.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         return 0;",
          "69:     }",
          "74:             zdir = '/zvfs';",
          "75:         else",
          "76:             zdir = Zvfs.mount(fname);",
          "80:         var flist = File.glob('*', {dir:zdir,recurse:true}).sort();",
          "81:         for (var i in flist) {",
          "",
          "[Removed Lines]",
          "71:     function unzip(fname:string, ddir='') {",
          "72:         fname = File.realpath(fname);",
          "73:         if (fname === Info.executable())",
          "77:         if (ddir !== '' && ddir.substr(-1,1) != '/')",
          "78:             ddir += '/';",
          "",
          "[Added Lines]",
          "72:     function unzip(fname:string, destDir='') {",
          "73:         if (fname)",
          "74:             fname = File.realpath(fname);",
          "75:         if (!fname || fname === Info.executable())",
          "79:         if (self.startDir)",
          "80:             zdir += '/'+self.startDir;",
          "81:         if (destDir !== '' && destDir.substr(-1,1) != '/')",
          "82:             destDir += '/';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:             if (ftyp[0] === 'd') continue;",
          "86:             if (self.verbose)",
          "87:                 puts(\"\"+fn);",
          "89:             if (fdir !== '.' && !File.isdir(fdir))",
          "90:                 File.mkdir(fdir, true);",
          "92:         }",
          "93:         return 0;",
          "94:     }",
          "",
          "[Removed Lines]",
          "88:             var fdir = File.dirname(ddir+fn);",
          "91:             File.write(ddir+fn, File.read(zdir+'/'+fn));",
          "",
          "[Added Lines]",
          "92:             var fdir = File.dirname(destDir+fn);",
          "95:             File.write(destDir+fn, File.read(zdir+'/'+fn));",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Jsi_Auto.Jsi_Opts       =",
          "12: Jsi_Auto.Jsi_SqlValues  =",
          "13: Jsi_Auto.Jsi_TableObj   =",
          "14: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "15: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "16: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: Jsi_Auto.Jsi_CopyDir    =",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 4",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 5",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4709: }",
          "4711: bool jsi_isDebugKey(const char *key) {",
          "4713: }",
          "4715: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Removed Lines]",
          "4712:     return (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"));",
          "",
          "[Added Lines]",
          "4712:     return ((*key=='T' && (!Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")))",
          "4713:         ||  (*key=='A' && !Jsi_Strcmp(key, \"Assert\"))",
          "4714:         ||  (*key=='D' && !Jsi_Strcmp(key, \"Debug\")));",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "877:     Jsi_Value *dir;",
          "878:     const char *dirStr;",
          "879:     int dirLen;",
          "880:     const char *prefix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878:     Jsi_Value *pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "888:     JSI_OPT(FUNC,   GlobData, filter,   .help=\"Filter function to call with each file, returning false to discard\", .flags=0, .custom=0, .data=(void*)\"file:string\"),",
          "889:     JSI_OPT(INT,    GlobData, limit,    .help=\"The maximum number of results to return/count: -1 is unlimited (Interp.maxArrayList)\"),",
          "890:     JSI_OPT(STRKEY, GlobData, noTypes,  .help=\"Filter files to exclude these \\\"types\\\"\"),",
          "891:     JSI_OPT(STRKEY, GlobData, prefix,   .help=\"String prefix to prepend to each file in result list\"),",
          "892:     JSI_OPT(BOOL,   GlobData, recurse,  .help=\"Recurse into sub-directories\"),",
          "893:     JSI_OPT(BOOL,   GlobData, retCount, .help=\"Return only the count of matches\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "892:     JSI_OPT(VALUE,  GlobData, pattern,  .help=\"Pattern to use if arg 1 is null\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1166: #define FN_glob JSI_INFO(\"\\",
          "1167: With no arguments (or null) returns all files/directories in current directory.\\n\\",
          "1169: When the second argument is a function, it is called with each path, and filter on false.\\n\\",
          "1170: Otherwise second argument must be a set of options.\")",
          "1172:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1173: {",
          "1174:     int fo = 1, isOpts = 0;",
          "",
          "[Removed Lines]",
          "1168: The first argument can be a pattern (either a glob or regexp) of the files to return.\\n\\",
          "1171: static Jsi_RC FileGlobsCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "[Added Lines]",
          "1170: The first argument can be options, a pattern (either a glob or regexp) of the files to return.\\n\\",
          "1173: static Jsi_RC FileGlobCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1177:     Jsi_Value *arg = Jsi_ValueArrayIndex(interp, args, 1);",
          "1178:     GlobData Data = {};",
          "1179:     Jsi_Obj *obj = NULL;",
          "1182:     const char *dcp, *zPattern = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1182:     bool iso1 = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1186:     Data.flags = JSI_FILE_TYPE_FILES;",
          "1189:         switch (arg->vt) {",
          "1201:                         break;",
          "1204:             }",
          "1206:         }",
          "1210:     }",
          "1211:     if (isOpts && Jsi_OptionsProcess(interp, GlobOptions, &Data, arg, 0) < 0) {",
          "1212:         rc = JSI_ERROR;",
          "1213:         goto done;",
          "1214:     }",
          "1215:     if (!Data.limit)",
          "1216:         Data.limit = interp->maxArrayList;",
          "1217:     if (Data.dir) {",
          "",
          "[Removed Lines]",
          "1188:     if (arg)",
          "1190:         case JSI_VT_NULL: break;",
          "1191:         case JSI_VT_OBJECT:",
          "1192:         {",
          "1193:             Jsi_Obj *sobj = arg->d.obj;",
          "1194:             switch (sobj->ot) {",
          "1195:                 case JSI_OT_FUNCTION:",
          "1196:                     Data.filter = arg;",
          "1197:                     break;",
          "1198:                 case JSI_OT_OBJECT:",
          "1199:                     if (!sobj->isarrlist) {",
          "1200:                         isOpts = 1;",
          "1202:                     }",
          "1203:                 default: fo = 0;",
          "1205:             if (fo) break;",
          "1207:         default:",
          "1208:             rc = Jsi_LogError(\"arg2 must be a function, object or null\");",
          "1209:             goto done;",
          "",
          "[Added Lines]",
          "1191:     if (!arg && pat && Jsi_ValueIsObjType(interp, pat, JSI_OT_OBJECT)) {",
          "1192:         arg = pat;",
          "1193:         pat = NULL;",
          "1194:         iso1 = 1;",
          "1195:     }",
          "1196:     if (arg) {",
          "1198:             case JSI_VT_NULL: break;",
          "1199:             case JSI_VT_OBJECT:",
          "1200:             {",
          "1201:                 Jsi_Obj *sobj = arg->d.obj;",
          "1202:                 switch (sobj->ot) {",
          "1203:                     case JSI_OT_FUNCTION:",
          "1204:                         Data.filter = arg;",
          "1206:                     case JSI_OT_OBJECT:",
          "1207:                         if (!sobj->isarrlist) {",
          "1208:                             isOpts = 1;",
          "1209:                             break;",
          "1210:                         }",
          "1211:                     default: fo = 0;",
          "1212:                 }",
          "1213:                 if (fo) break;",
          "1215:             default:",
          "1216:                 rc = Jsi_LogError(\"arg2 must be a function, object or null\");",
          "1217:                 goto done;",
          "1224:     if (!iso1 && pat && pat->vt == JSI_VT_NULL && Data.pattern)",
          "1225:         pat = Data.pattern;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1220:             dcp = Jsi_FileRealpath(interp, Data.dir, NULL);",
          "1221:             if (!dcp)",
          "1222:                 dcp = Data.dirStr;",
          "1224:                 Data.dirLen = Jsi_Strlen(dcp);",
          "1225:         }",
          "1226:         Jsi_DSAppend(&dStr, dcp, (*dcp && dcp[Jsi_Strlen(dcp)-1]!='/')?\"/\":\"\", NULL);",
          "1227:     }",
          "",
          "[Removed Lines]",
          "1223:             else",
          "",
          "[Added Lines]",
          "1234:             else {",
          "1235:                 Jsi_DecrRefCount(interp, Data.dir);",
          "1236:                 Data.dir = Jsi_ValueNewStringDup(interp, dcp);",
          "1237:                 Jsi_IncrRefCount(interp, Data.dir);",
          "1239:             }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1285:     { \"isdir\",      FileIsdirCmd,       1,  1, \"file:string\",  .help=\"Return true if file is a directory\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1286:     { \"isfile\",     FileIsfileCmd,      1,  1, \"file:string\",  .help=\"Return true if file is a normal file\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1287:     { \"isrelative\", FileIsRelativeCmd,  1,  1, \"file:string\",  .help=\"Return true if file path is relative\", .retType=(uint)JSI_TT_BOOLEAN },",
          "1289:     { \"link\",       FileLinkCmd,        2,  3, \"src:string, dest:string, ishard:boolean=false\",  .help=\"Link a file\", .retType=0, .flags=0, .info=FN_link },",
          "1290:     { \"lstat\",      FileLstatCmd,       1,  1, \"file:string\",  .help=\"Return status info for file\", .retType=(uint)JSI_TT_OBJECT },",
          "1291:     { \"mkdir\",      FileMkdirCmd,       1,  2, \"file:string,force:boolean=false\",  .help=\"Create a directory: force creates subdirs\" },",
          "",
          "[Removed Lines]",
          "1288:     { \"glob\",       FileGlobsCmd,        0,  2, \"pattern:regexp|string|null='*', options:function|object|null=void\", .help=\"Return list of files in dir with optional pattern match\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_glob, .opts=GlobOptions },",
          "",
          "[Added Lines]",
          "1303:     { \"glob\",       FileGlobCmd,        0,  2, \"options:regexp|string|object|null='*', opts:function|object|null=void\", .help=\"Return list of files in dir with optional pattern match\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_glob, .opts=GlobOptions },",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "971: } Jsi_TypeCheck;",
          "973: typedef enum {",
          "975:     jsi_AssertModeLog,",
          "977: } jsi_AssertMode;",
          "979: typedef struct {",
          "",
          "[Removed Lines]",
          "974:     jsi_AssertModeThrow,",
          "976:     jsi_AssertModePuts",
          "",
          "[Added Lines]",
          "975:     jsi_AssertModePuts,",
          "976:     jsi_AssertModeThrow",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1119:     int profileCnt;",
          "1120:     bool noNetwork;",
          "1121:     bool noInput;",
          "1122:     jsi_AssertMode assertMode;",
          "1123:     uint testMode;",
          "1124:     const char *jsppChars;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1122:     bool asserts;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: static const char *jsi_SafeModeStrs[] = { \"none\", \"read\", \"write\", \"writeRead\", \"lockdown\", NULL };",
          "76: static const char *jsi_TypeChkStrs[] = { \"noreturn\", \"noundef\", \"nowith\", \"builtins\", \"funcdecl\", NULL };",
          "77: const char *jsi_callTraceStrs[] = { \"funcs\", \"cmds\", \"new\", \"return\", \"args\", \"notrunc\", \"noparent\", \"full\", \"before\", NULL};",
          "80: static Jsi_OptionSpec InterpOptions[] = {",
          "81:     JSI_OPT(ARRAY, Jsi_Interp, args,        .help=\"The console.arguments for interp\", jsi_IIOF),",
          "82:     JSI_OPT(CUSTOM,Jsi_Interp, assertMode,  .help=\"Action upon assert failure\", .flags=0, .custom=Jsi_Opt_SwitchEnum, .data=jsi_AssertModeStrs ),",
          "83:     JSI_OPT(ARRAY, Jsi_Interp, autoFiles,   .help=\"File(s) to source for loading Jsi_Auto to handle unknown commands\"),",
          "84:     JSI_OPT(CUSTOM,Jsi_Interp, busyCallback,.help=\"Command in parent interp (or noOp) to periodically call\", .flags=0, .custom=Jsi_Opt_SwitchParentFunc, .data=(void*)\"interpName:string, opCnt:number\"),",
          "",
          "[Removed Lines]",
          "78: const char *jsi_AssertModeStrs[] = { \"throw\", \"log\", \"puts\", NULL};",
          "",
          "[Added Lines]",
          "78: const char *jsi_AssertModeStrs[] = { \"log\", \"puts\", \"throw\", NULL};",
          "82:     JSI_OPT(BOOL,  Jsi_Interp, asserts,     .help=\"Shortcut for toggling log:assert and assertMode=throw\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1074:         interp->tracePuts = 1;",
          "1075: }",
          "1077: static Jsi_Interp* jsi_InterpNew(Jsi_Interp *parent, Jsi_Value *opts, Jsi_InterpOpts *iopts)",
          "1078: {",
          "1079:     Jsi_Interp* interp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078: static void jsi_interpAssertsUpdate(Jsi_Interp *interp) {",
          "1079:     if (interp->asserts) {",
          "1080:         interp->log |= JSI_LOG_ASSERT;",
          "1081:         interp->assertMode = jsi_AssertModeThrow;",
          "1082:     } else {",
          "1083:         interp->log &= ~JSI_LOG_ASSERT;",
          "1084:         interp->assertMode = jsi_AssertModePuts;",
          "1085:     }",
          "1086: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1446:     interp->framePtr->ingsc = interp->gsc = jsi_ScopeChainNew(interp, 0);",
          "1449:     jsi_UnitTestSetup(interp);",
          "1450:     if (interp->args && argc) {",
          "1451:         Jsi_LogBug(\"args may not be specified both as options and parameter\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:     jsi_interpAssertsUpdate(interp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2879:     Jsi_RC rc;",
          "2880:     Jsi_Value *opts = Jsi_ValueArrayIndex(interp, args, 0);",
          "2881:     Jsi_Interp *sinterp = interp;",
          "2882:     if (!udf || udf->subinterp == interp) {",
          "2883:         if (interp->noConfig && opts && !Jsi_ValueIsString(interp, opts))",
          "2884:             return Jsi_LogError(\"Interp conf() is disabled for set\");",
          "2885:         rc = Jsi_OptionsConf(interp, InterpOptions, interp, opts, ret, 0);",
          "2886:     } else {",
          "2887:         sinterp = udf->subinterp;",
          "2888:         Jsi_Value *popts = opts;",
          "2889:         if (opts && opts->vt != JSI_VT_NULL && !Jsi_ValueString(interp, opts, NULL) && opts->vt == JSI_VT_OBJECT) {",
          "2890:             popts = Jsi_ValueNew1(sinterp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2894:     bool oasserts = interp->asserts;",
          "2901:         oasserts = interp->asserts;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2895:             Jsi_DecrRefCount(sinterp, popts);",
          "2896:         Jsi_CleanValue(sinterp, interp, *ret, ret);",
          "2897:     }",
          "2898:     jsi_UnitTestSetup(sinterp);",
          "2899:     return rc;",
          "2900: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2912:     if (sinterp->asserts != oasserts)",
          "2913:         jsi_interpAssertsUpdate(sinterp);",
          "",
          "---------------"
        ],
        "tests/assert.jsi||tests/assert.jsi": [
          "File: tests/assert.jsi -> tests/assert.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: ;assert(true,'true');",
          "5: ;assert(2*3 == 6,'math');",
          "6: try {",
          "7:     assert(false,'false');",
          "8: } catch(e) {",
          "9:     puts('caught error');",
          "10: }",
          "12: var x;",
          "13: ;x = 1;",
          "14: ;assert(false,'false2');",
          "",
          "[Removed Lines]",
          "11: ;Interp.conf({log:{assert:false}});",
          "",
          "[Added Lines]",
          "7: Interp.conf({asserts:true});",
          "14: ;Interp.conf({asserts:false});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: assert(true,'true') ==> undefined",
          "43: assert(2*3 == 6,'math') ==> undefined",
          "44: caught error",
          "46: x = 1 ==> 1",
          "49: Interp.conf({log:{assert:true}}) ==> undefined",
          "50: assert(function () { return (i<j); },'fail') ==> undefined",
          "53: assert(false,'this assert failed',{mode:'puts', noStderr:true}) ==> this assert failed",
          "54: undefined",
          "55: Interp.conf({assertMode:'puts', noStderr:true}) ==> undefined",
          "",
          "[Removed Lines]",
          "45: Interp.conf({log:{assert:false}}) ==> undefined",
          "47: assert(false,'false2') ==> undefined",
          "48: assert(false===true) ==> undefined",
          "51: caught error2: assert(false==true)",
          "52: assert(false,'false') ==> caught error2: false",
          "",
          "[Added Lines]",
          "48: Interp.conf({asserts:false}) ==> undefined",
          "50: assert(false,'false2') ==> false2",
          "51: undefined",
          "52: assert(false===true) ==> assert(false===true)`),puts(assert(false===true))",
          "53: undefined",
          "56: assert(false==true)",
          "57: assert(false,'false') ==> false",
          "58: undefined",
          "",
          "---------------"
        ],
        "tests/file2.jsi||tests/file2.jsi": [
          "File: tests/file2.jsi -> tests/file2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: File.mkdir('XX1/AA');",
          "5: File.mkdir('XX1/BB');",
          "6: File.rename('XX1/BB','XX1/CC.txt');",
          "7: ;File.glob(null,{dir:'XX1'}).sort();",
          "8: ;File.dirname('XX1/AA');",
          "9: ;File.rootname('XX1/CC.txt');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: ;File.glob({dir:'XX1'}).sort();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: =!EXPECTSTART!=",
          "23: File.glob(null,{dir:'XX1'}).sort() ==> [ \"AA\", \"CC.txt\" ]",
          "24: File.dirname('XX1/AA') ==> XX1",
          "25: File.rootname('XX1/CC.txt') ==> XX1/CC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: File.glob({dir:'XX1'}).sort() ==> [ \"AA\", \"CC.txt\" ]",
          "",
          "---------------"
        ],
        "tools/mkindex.jsi||tools/mkindex.jsi": [
          "File: tools/mkindex.jsi -> tools/mkindex.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     puts(rv);",
          "22: }",
          "",
          "[Removed Lines]",
          "24: runModule(mkindex);",
          "",
          "[Added Lines]",
          "24: module(mkindex);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: File.prototype.executable = function(file:string):boolean {};",
          "62: File.prototype.exists = function(file:string):boolean {};",
          "63: File.prototype.extension = function(file:string):string {};",
          "65: File.prototype.isdir = function(file:string):boolean {};",
          "66: File.prototype.isfile = function(file:string):boolean {};",
          "67: File.prototype.isrelative = function(file:string):boolean {};",
          "",
          "[Removed Lines]",
          "64: File.prototype.glob = function(pattern:regexp|string|null='*', options:function|object|null=void):array {};",
          "",
          "[Added Lines]",
          "64: File.prototype.glob = function(options:regexp|string|object|null='*', opts:function|object|null=void):array {};",
          "",
          "---------------"
        ],
        "tools/randtest.jsi||tools/randtest.jsi": [
          "File: tools/randtest.jsi -> tools/randtest.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     return;",
          "79: }",
          "",
          "[Removed Lines]",
          "81: runModule(randtest);",
          "",
          "[Added Lines]",
          "81: module(randtest);",
          "",
          "---------------"
        ],
        "tools/stubrenumber.jsi||tools/stubrenumber.jsi": [
          "File: tools/stubrenumber.jsi -> tools/stubrenumber.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     return rc;",
          "18: }",
          "",
          "[Removed Lines]",
          "20: runModule(stubrenumber);",
          "",
          "[Added Lines]",
          "20: module(stubrenumber);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a14b026e6d908e567aa73f3a87b623908ca36ab9",
      "candidate_info": {
        "commit_hash": "a14b026e6d908e567aa73f3a87b623908ca36ab9",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/a14b026e6d908e567aa73f3a87b623908ca36ab9",
        "files": [
          "js-demos/log/other.jsi",
          "js-demos/modDebug.jsi",
          "js-demos/module.jsi",
          "js-demos/warndemo.jsi",
          "lib/Testing.jsi",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFormat.c",
          "src/jsiFunc.c",
          "src/jsiHash.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiOptions.c",
          "src/jsiProto.c",
          "src/jsiPstate.c",
          "src/jsiTree.c",
          "src/jsiUtils.c",
          "src/jsiValue.c",
          "tests/expr.jsi",
          "tests/strict.jsi",
          "tests/syntax.jsi"
        ],
        "message": "Release \"3.1.9\": Fix set/get issues, cleanup typeCheck\n\nFossilOrigin-Name: 349b99793c392c66eff1cd30219eec6cc6a6d077bb324703f31a0ec0240f49af",
        "before_after_code_files": [
          "js-demos/log/other.jsi||js-demos/log/other.jsi",
          "js-demos/modDebug.jsi||js-demos/modDebug.jsi",
          "js-demos/module.jsi||js-demos/module.jsi",
          "js-demos/warndemo.jsi||js-demos/warndemo.jsi",
          "lib/Testing.jsi||lib/Testing.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFormat.c||src/jsiFormat.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiHash.c||src/jsiHash.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiOptions.c||src/jsiOptions.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiPstate.c||src/jsiPstate.c",
          "src/jsiTree.c||src/jsiTree.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiValue.c||src/jsiValue.c",
          "tests/expr.jsi||tests/expr.jsi",
          "tests/strict.jsi||tests/strict.jsi",
          "tests/syntax.jsi||tests/syntax.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiHash.c||src/jsiHash.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiOptions.c||src/jsiOptions.c",
            "src/jsiPstate.c||src/jsiPstate.c",
            "src/jsiTree.c||src/jsiTree.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiHash.c||src/jsiHash.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiOptions.c||src/jsiOptions.c",
            "src/jsiPstate.c||src/jsiPstate.c",
            "src/jsiTree.c||src/jsiTree.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "js-demos/log/other.jsi||js-demos/log/other.jsi": [
          "File: js-demos/log/other.jsi -> js-demos/log/other.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: provide(other, 1);",
          "27: if (isMain()) {",
          "29:         return runModule(other);",
          "32: ;   other();",
          "33: ;// other('',{badArg:0});",
          "",
          "[Removed Lines]",
          "28:     if (!Interp.conf('unitTest'))",
          "31: ;'  other unit-test';",
          "",
          "[Added Lines]",
          "28:     if (!Interp.conf('testMode'))",
          "31: ;'  other test';",
          "",
          "---------------"
        ],
        "js-demos/modDebug.jsi||js-demos/modDebug.jsi": [
          "File: js-demos/modDebug.jsi -> js-demos/modDebug.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: ;'\\n === Enabling LogDebug in fileSize.jsi only ===';",
          "4: ;require('fileSize');",
          "5: ;fileSize('fileSize.jsi');",
          "7: ;fileSize('fileSize.jsi');",
          "8: ;require('module');",
          "9: ;module([1]);",
          "11: ;module([2]);",
          "13: ;'\\n === Trace function calls in fileSize.jsi ===';",
          "15: ;fileSize('fileSize.jsi');",
          "16: ;module([2]);",
          "17: ;require('fileSize', 0, {traceCall:[]});",
          "",
          "[Removed Lines]",
          "6: ;require('fileSize', 0, {Debug:true, Test:true});",
          "10: ;require('module', 0, {Debug:true, Test:true});",
          "14: ;require('fileSize', 0, {Debug:false, traceCall:['funcs']});",
          "",
          "[Added Lines]",
          "6: ;require('fileSize', 0, {log:{Debug:true, Test:true}});",
          "10: ;require('module', 0, {log:{Debug:true, Test:true}});",
          "14: ;require('fileSize', 0, {log:{Debug:false}, traceCall:['funcs']});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:  === Enabling LogDebug in fileSize.jsi only ==='",
          "34: require('fileSize') ==> 1",
          "35: fileSize('fileSize.jsi') ==> 907",
          "37: fileSize('fileSize.jsi') ==> \"TEST:  Starting\", fileSize.jsi:27, fileSize()",
          "38: \"DEBUG: Len [ \"fileSize.jsi\" ]\", fileSize.jsi:15, getLength()",
          "39: 907",
          "40: require('module') ==> 1",
          "41: module([1]) ==> undefined",
          "43: module([2]) ==> \"TEST:  Starting [ 2 ]\", module.jsi:14, main()",
          "44: \"DEBUG: Done\", module.jsi:23, main()",
          "45: undefined",
          "46: '",
          "47:  === Trace function calls in fileSize.jsi ==='",
          "49: fileSize('fileSize.jsi') ==>   #2: > fileSize() in modDebug.jsi:15",
          "50: \"TEST:  Starting\", fileSize.jsi:27, fileSize()",
          "51: 907",
          "",
          "[Removed Lines]",
          "36: require('fileSize', 0, {Debug:true, Test:true}) ==> 1",
          "42: require('module', 0, {Debug:true, Test:true}) ==> 1",
          "48: require('fileSize', 0, {Debug:false, traceCall:['funcs']}) ==> 1",
          "",
          "[Added Lines]",
          "36: require('fileSize', 0, {log:{Debug:true, Test:true}) ==> 1",
          "42: require('module', 0, {log:{Debug:true, Test:true}) ==> 1",
          "48: require('fileSize', 0, {log:{Debug:false, traceCall:['funcs']}) ==> 1",
          "",
          "---------------"
        ],
        "js-demos/module.jsi||js-demos/module.jsi": [
          "File: js-demos/module.jsi -> js-demos/module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: provide(module, 1);",
          "31: if (isMain()) {",
          "33:         return runModule(module);",
          "36: ;   module();",
          "37: ;// module('',{badArg:0});",
          "",
          "[Removed Lines]",
          "32:     if (!Interp.conf('unitTest'))",
          "35: ;'  module unit-test';",
          "",
          "[Added Lines]",
          "32:     if (!Interp.conf('testMode'))",
          "35: ;'  module test';",
          "",
          "---------------"
        ],
        "js-demos/warndemo.jsi||js-demos/warndemo.jsi": [
          "File: js-demos/warndemo.jsi -> js-demos/warndemo.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: function warndemoA() {",
          "10: }",
          "",
          "[Removed Lines]",
          "1: #!/usr/local/bin/jsish --I testMode=1 %s",
          "7: Interp.conf({logOpts:{ftail:true}});",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env jsish",
          "5: Interp.conf({noError:true, logOpts:{ftail:true}});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: =!EXPECTSTART!=",
          "31: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "19: warndemo2.jsi:4: warn: got 0 args, expected 1-2, calling function exec(val:string, options:string|object=void)    (at or near \"warndemo2\")",
          "21: warndemo2.jsi:5: warn: got 4 args, expected 1-2, calling function exec(val:string, options:string|object=void)    (at or near \"warndemo2\")",
          "23: warndemo2.jsi:6: warn: got 3 args, expected 0, calling function warndemoA()    (at or near \"warndemo2\")",
          "25: warndemo2.jsi:7: warn: got 0 args, expected 1, calling function warndemoB(n:number)    (at or near \"warndemo2\")",
          "27: warndemo2.jsi:8: warn: got 3 args, expected 1, calling function warndemoB(n:number)    (at or near \"warndemo2\")",
          "29: warndemo2.jsi:9: error: type mismatch for argument arg 1 'warndemoB': expected \"number\" but got \"string\", in call to 'warndemoB' declared at warndemo.jsi:12.2    (at or near \"warndemo2\")",
          "",
          "[Added Lines]",
          "17: warndemo2.jsi:6: warn: got 0 args, expected 1-2, calling function exec(val:string, options:string|object=void)",
          "18: warndemo2.jsi:7: warn: got 4 args, expected 1-2, calling function exec(val:string, options:string|object=void)",
          "19: warndemo2.jsi:9: warn: got 0 args, expected 1, calling function warndemoB(n:number)",
          "20: warndemo2.jsi:10: warn: got 3 args, expected 1, calling function warndemoB(n:number)",
          "",
          "---------------"
        ],
        "lib/Testing.jsi||lib/Testing.jsi": [
          "File: lib/Testing.jsi -> lib/Testing.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:                 res = dres.trim();",
          "168:                 puts(res);",
          "169:             } else if (self.silent)",
          "171:             else",
          "172:                 puts('\\n'+res);",
          "173:             return 0;",
          "",
          "[Removed Lines]",
          "170:                 puts(res.trim());",
          "",
          "[Added Lines]",
          "170:                 puts(res?res.trim():res);",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   1",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 8",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:     Jsi_Key_Type keyType; // Read-only",
          "746:     Jsi_Interp *interp;",
          "747:     Jsi_Wide flags;",
          "749:     void *user, *user2;",
          "750:     Jsi_MapFmtKeyProc *fmtKeyProc;",
          "751:     Jsi_RBCompareProc *compareTreeProc;",
          "",
          "[Removed Lines]",
          "748:     int refCnt;           // Shared map.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3819:     func->d.obj->d.fobj->func->parentName = parentName;",
          "3820:     func->d.obj->d.fobj->func->pkg = pkg;",
          "3821:     func->d.obj->d.fobj->func->parentSpec = cSpec;",
          "3823:         jsi_CommandArgCheck(interp, cmdSpec, f, parentName);",
          "3825:     f->retType = cmdSpec->retType;",
          "",
          "[Removed Lines]",
          "3822:     if (cmdSpec->argStr && interp->typeCheck.all)",
          "",
          "[Added Lines]",
          "3822:     if (cmdSpec->argStr && !interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4897:     { \"log\",    consoleLogCmd,      1, -1, \"val, ...\", .help=\"Like System.puts, but goes to stderr and includes file:line.\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4898:     { \"logp\",   consoleLogPCmd,     1, -1, \"val, ...\", .help=\"Same as console.log, but first arg is string prefix and if second is a boolean it controls output\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4899:     { \"printf\", consolePrintfCmd,   1, -1, \"format:string, ...\", .help=\"Same as System.printf but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4901:     { \"warn\",   consoleLogCmd,      1, -1, \"val, ...\", .help=\"Same as log\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "4902:     { NULL, 0,0,0,0,  .help=\"Console input and output to stderr\" }",
          "4903: };",
          "",
          "[Removed Lines]",
          "4900:     { \"puts\",   consolePutsCmd,     1, -1, \"val, ...\", .help=\"Same as System.puts, but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "[Added Lines]",
          "4900:     { \"puts\",   consolePutsCmd,     1, -1, \"val:any, ...\", .help=\"Same as System.puts, but goes to stderr\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5049:     { \"parseOpts\",  SysParseOptsCmd, 3,  3, \"self:object|userobj, options:object, conf:object|null|undefined\", .help=\"Parse module options: similar to moduleOpts but arg order different and no freeze\", .retType=(uint)JSI_TT_OBJECT, .flags=0},",
          "5050:     { \"printf\",     SysPrintfCmd,    1, -1, \"format:string, ...\", .help=\"Formatted output to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0 },",
          "5051:     { \"provide\",    SysProvideCmd,   0,  3, \"name:string|null|function=void, version:number|string=void, options:object=void\", .help=\"Provide a package for use with require.\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_provide, .opts=jsiModuleOptions  },",
          "5053:     { \"quote\",      SysQuoteCmd,     1,  1, \"val:string\", .help=\"Return quoted string\", .retType=(uint)JSI_TT_STRING },",
          "5054:     { \"require\",    SysRequireCmd,   0,  3, \"name:string=void, version:number|string=1, options:object=void\", .help=\"Load/query packages\", .retType=(uint)JSI_TT_NUMBER|JSI_TT_OBJECT|JSI_TT_ARRAY, .flags=0, .info=FN_require, .opts=jsiModuleOptions },",
          "5055:     { \"runModule\",  SysModuleRunCmd, 0,  2, \"cmd:string|null|function=void, conf:array=undefined\", .help=\"Invoke named module. If name is empty, uses file basename. If isMain invokes function with same name as file. With no args will invoke provide\", .retType=(uint)JSI_TT_ANY, .flags=0},",
          "",
          "[Removed Lines]",
          "5052:     { \"puts\",       SysPutsCmd,      1, -1, \"val, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "[Added Lines]",
          "5052:     { \"puts\",       SysPutsCmd,      1, -1, \"val:any, ...\", .help=\"Output one or more values to stdout\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_puts },",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "151: {",
          "152:     Jsi_Value *v;",
          "153:     if (dst->vt != JSI_VT_VARIABLE) {",
          "155:             return Jsi_LogError(\"operand not a left value\");",
          "156:     } else {",
          "157:         v = dst->d.lval;",
          "158:         SIGASSERT(v, VALUE);",
          "160:         if (strict && lop == OP_PUSHFUN && interp->curIp[-1].local)",
          "161:             dst->f.bits.local = 1;",
          "162:         if (strict && dst->f.bits.local==0) {",
          "",
          "[Removed Lines]",
          "154:         if (interp->typeCheck.strict)",
          "159:         int strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "154:         if (!interp->noCheck)",
          "159:         int strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:             return JSI_OK;",
          "173:         bool ro = v->f.bits.readonly;",
          "174:         if (ro && v->vt != JSI_VT_UNDEF) {",
          "176:                 return Jsi_LogError(\"assign to readonly variable\");",
          "177:             return JSI_OK;",
          "178:         }",
          "",
          "[Removed Lines]",
          "175:             if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "175:             if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240: static Jsi_RC jsiLogicLess(Jsi_Interp* interp, int i1, int i2) {",
          "241:     Jsi_Value *v, *v1 = _jsi_STACK[interp->framePtr->Sp-i1], *v2 = _jsi_STACK[interp->framePtr->Sp-i2], *res = _jsi_TOQ;",
          "242:     int val = 0, l1 = 0, l2 = 0;",
          "244:     Jsi_RC rc = JSI_OK;",
          "245:     rc = _jsi_StrictUChk2(v1, v2);",
          "246:     if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "243:     bool strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "243:     bool strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1094:     jsi_TryList  *trylist = NULL;",
          "1095:     jsi_Frame *fp = interp->framePtr;",
          "1096:     Jsi_HashEntry *hPtrGet = NULL;",
          "1098:     const char *curFile = NULL, *throwStr;",
          "1100:     if (currentScope->vt != JSI_VT_OBJECT) {",
          "",
          "[Removed Lines]",
          "1097:     bool strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "1097:     bool strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1252:                         throwStr = \"fcall\";",
          "1253:                         rc = JSI_ERROR;",
          "1254:                 }",
          "1257:                 break;",
          "1258:             }",
          "",
          "[Removed Lines]",
          "1255:                 strict = interp->typeCheck.strict;",
          "",
          "[Added Lines]",
          "1255:                 strict = !interp->noCheck;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1690:                     t->d.num -= inc;",
          "1691:                 }",
          "1692:                 if (hPtrGet) {",
          "1695:                     hPtrGet = NULL;",
          "1696:                 }",
          "1697:                 break;",
          "",
          "[Removed Lines]",
          "1694:                     jsi_SetterCall(interp, hPtrGet, v, _jsi_TOQ, 0);",
          "",
          "[Added Lines]",
          "1694:                     Jsi_Value *v2 = (fp->Sp>1?_jsi_TOQ:_jsi_TOP);",
          "1695:                     jsi_SetterCall(interp, hPtrGet, v, v2, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2379:                     goto bail;",
          "2380:                 }",
          "2381:             }",
          "2383:             if (cp && !Jsi_Strcmp(cp, \".jsi\") && interp->isMain) {",
          "2384:                 interp->typeCheck.parse = interp->typeCheck.run = interp->typeCheck.all = 1;",
          "2387:             bool isNew;",
          "2388:             Jsi_HashEntry *hPtr;",
          "2389:             hPtr = Jsi_HashEntryNew(interp->fileTbl, fname, &isNew);",
          "",
          "[Removed Lines]",
          "2382:             cp = Jsi_Strrchr(fname, '.');",
          "2385:                 interp->typeCheck.strict = 1;",
          "2386:             }",
          "",
          "[Added Lines]",
          "2386:                 interp->noCheck = 0;",
          "",
          "---------------"
        ],
        "src/jsiFormat.c||src/jsiFormat.c": [
          "File: src/jsiFormat.c -> src/jsiFormat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:             goto doprec;",
          "279:         case 's':",
          "280:             v = Jsi_ValueArrayIndex(interp, args, argIndex);",
          "282:                 msg = \"expected string argument\";",
          "283:                 goto error;",
          "284:             } else",
          "",
          "[Removed Lines]",
          "281:             if (interp->typeCheck.strict && !Jsi_ValueIsString(interp, v)) {",
          "",
          "[Added Lines]",
          "281:             if (!interp->noCheck && !Jsi_ValueIsString(interp, v)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:                 p += sprintf(p, \".%ld\", precision);",
          "348:             }",
          "349:             v = Jsi_ValueArrayIndex(interp, args, argIndex);",
          "351:                 msg = \"expected number argument\";",
          "352:                 goto error;",
          "353:             }",
          "",
          "[Removed Lines]",
          "350:             if (interp->typeCheck.strict && !Jsi_ValueIsNumber(interp, v)) {",
          "",
          "[Added Lines]",
          "350:             if (!interp->noCheck && !Jsi_ValueIsNumber(interp, v)) {",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
          "200:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
          "201:     Jsi_RC rc = JSI_OK;",
          "203:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
          "204:     idxBuf[0] = 0;",
          "206:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "207:         jsi_TypeMismatch(interp);",
          "",
          "[Removed Lines]",
          "202:     if (interp->typeCheck.none) return JSI_OK;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
          "",
          "[Added Lines]",
          "201:     if (interp->noCheck) return JSI_OK;",
          "205:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&(JSI_TT_UNDEFINED|JSI_TT_ANY))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:         return JSI_OK;",
          "224:         return JSI_OK;",
          "225:     if ((typ&JSI_TT_ANY)) return JSI_OK;",
          "226:     if (index == 0 && arg->vt == JSI_VT_UNDEF) {",
          "",
          "[Removed Lines]",
          "218:     if (interp->typeCheck.all==0) {",
          "219:         if (func ? (interp->typeCheck.run==0) : (interp->typeCheck.parse==0))",
          "220:             return JSI_OK;",
          "221:     }",
          "222:     if (index == 0 && func && func->type == FC_BUILDIN &&",
          "223:         interp->typeCheck.all == 0) // Normally do not check return types for builtins.",
          "",
          "[Added Lines]",
          "218:     if (index == 0 && func && func->type == FC_BUILDIN && !interp->typeCheck.builtins) // BUILTIN returns",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "250:         const char *vtyp = jsi_ValueTypeName(interp, arg);",
          "251:         if (index>0)",
          "252:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "254:             rc = JSI_ERROR;",
          "255:         jsi_TypeMismatch(interp);",
          "256:         Jsi_DString fStr = {};",
          "",
          "[Removed Lines]",
          "253:         if (interp->typeCheck.error)",
          "",
          "[Added Lines]",
          "248:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263: }",
          "265: Jsi_RC jsi_StaticArgTypeCheck(Jsi_Interp *interp, int atyp, const char *p1, const char *p2, int index, Jsi_Func *func, jsi_Pline *line) {",
          "266:     Assert(index>0);",
          "267:     Jsi_RC rc;",
          "270:     int ai = index-1+func->callflags.bits.addargs;",
          "271:     if (func->argnames == NULL || ai>=func->argnames->count || ai<0)",
          "272:         return JSI_OK;",
          "",
          "[Removed Lines]",
          "268:     if (interp->typeCheck.parse==0 && interp->typeCheck.all==0)",
          "269:         return JSI_OK;",
          "",
          "[Added Lines]",
          "261:     if (interp->noCheck) return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "274:     if (typ <= 0)",
          "275:         return JSI_OK;",
          "276:     if (index == 0 && func && func->type == FC_BUILDIN &&",
          "278:         return JSI_OK;",
          "279:     if ((typ&JSI_TT_ANY)) return JSI_OK;",
          "280:     if (index == 0 && atyp == JSI_VT_UNDEF) {",
          "",
          "[Removed Lines]",
          "277:         interp->typeCheck.all==0) // Normally do not check return types for builtins.",
          "",
          "[Added Lines]",
          "271:         interp->typeCheck.builtins==0) // Normally do not check return types for builtins.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "312:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
          "313:         if (line)",
          "314:             interp->parseLine = line;",
          "316:             rc = JSI_ERROR;",
          "317:         jsi_TypeMismatch(interp);",
          "318:         Jsi_DString fStr = {};",
          "",
          "[Removed Lines]",
          "315:         if (interp->typeCheck.error)",
          "",
          "[Added Lines]",
          "309:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "340: Jsi_RC jsi_RunFuncCallCheck(Jsi_Interp *interp, Jsi_Func *func, int argc, const char *name, jsi_Pline *line, Jsi_OpCodes *argCodes, bool isParse)",
          "341: {",
          "342:     Jsi_RC rc = JSI_OK;",
          "349:     Jsi_CmdSpec *spec = func->cmdSpec;",
          "350:     Jsi_ScopeStrs *ss = func->argnames;",
          "351:     if (ss==NULL && spec == NULL)",
          "",
          "[Removed Lines]",
          "343:     if (interp->typeCheck.none) return JSI_OK;",
          "344:     if (interp->typeCheck.all==0) {",
          "345:         if (!argCodes ? (interp->typeCheck.run==0) : (interp->typeCheck.parse==0))",
          "346:             return JSI_OK;",
          "347:     }",
          "",
          "[Added Lines]",
          "336:     if (interp->noCheck) return JSI_OK;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "361:         minArgs = (ss->firstDef>0 ? ss->firstDef-1 : ss->count);",
          "362:         maxArgs = ss->count;",
          "363:         mis = (argc != ss->count);",
          "365:             return JSI_OK;",
          "366:     }",
          "367:     if (varargs) {",
          "",
          "[Removed Lines]",
          "364:         if (func->retType == 0 && ss && ss->typeCnt == 0 && interp->typeCheck.all==0)",
          "",
          "[Added Lines]",
          "353:         if (func->retType == 0 && ss && ss->typeCnt == 0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "379:             snprintf(nbuf, sizeof(nbuf), \"%d\", maxArgs);",
          "380:         if (line)",
          "381:             interp->parseLine = line;",
          "383:             rc = JSI_ERROR;",
          "384:         Jsi_DString dStr = {};",
          "385:         Jsi_FuncObjToString(interp, func, &dStr, 2);",
          "390:         jsi_TypeMismatch(interp);",
          "391:         Jsi_DSFree(&dStr);",
          "392:         if (line)",
          "",
          "[Removed Lines]",
          "382:         if (interp->typeCheck.error)",
          "386:         if (isParse)",
          "387:             Jsi_LogWarn(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "388:         else",
          "389:             rc = Jsi_LogType(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "",
          "[Added Lines]",
          "371:         if (!interp->noCheck)",
          "375:         rc = Jsi_LogType(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "435: void jsi_FuncCallCheck(jsi_Pstate *p, jsi_Pline *line, int argc, bool isNew, const char *name, const char *namePre, Jsi_OpCodes *argCodes)",
          "436: {",
          "437:     Jsi_Interp *interp = p->interp;",
          "440:         return;",
          "441:     if (name && isdigit(name[0]))",
          "442:         return;",
          "",
          "[Removed Lines]",
          "438:     if (interp->typeCheck.none) return;",
          "439:     if (name == NULL || !(interp->typeCheck.funcsig|interp->typeCheck.all|interp->typeCheck.parse))",
          "",
          "[Added Lines]",
          "424:     if (interp->noCheck) return;",
          "425:     if (name == NULL || interp->typeCheck.funcdecl)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "451:     }",
          "452:     if (f)",
          "453:         jsi_RunFuncCallCheck(interp, f, argc, name, line, argCodes, 1);",
          "455:         if (line)",
          "456:             interp->parseLine = line;",
          "457:         Jsi_LogWarn(\"called function '%s' with no previous definition\", name);",
          "",
          "[Removed Lines]",
          "454:     else if (interp->typeCheck.funcsig && (namePre==NULL || jsi_BuiltinCmd(interp, namePre))) {",
          "",
          "[Added Lines]",
          "440:     else if (interp->typeCheck.funcdecl && (namePre==NULL || jsi_BuiltinCmd(interp, namePre))) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "459:         if (line)",
          "460:             interp->parseLine = NULL;",
          "461:     }",
          "462: }",
          "464: int jsi_FuncSigsMatch(jsi_Pstate *pstate, Jsi_Func *f1, Jsi_Func *f2)",
          "465: {",
          "467:     if (f1->retType==0 && f1->argnames->typeCnt==0 && f1->argnames->varargs==0 &&",
          "470:         return 1;",
          "471:     if (f1->retType != f2->retType)",
          "472:         return 0;",
          "",
          "[Removed Lines]",
          "468:         f2->retType==0 && f2->argnames->typeCnt==0 && f2->argnames->varargs==0 &&",
          "469:         pstate->interp->typeCheck.all==0)",
          "",
          "[Added Lines]",
          "456:         f2->retType==0 && f2->argnames->typeCnt==0 && f2->argnames->varargs==0)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "521:         Jsi_LogWarn(\"invalid use of 'undefined' in a return type: %s\", name?name:\"\");",
          "523:     pstate->argType = 0;",
          "525:         int i, j;",
          "526:         for (i=0; i<args->count; i++) {",
          "527:             for (j=0; j<args->count; j++) {",
          "",
          "[Removed Lines]",
          "524:     if (localvar && args && (interp->typeCheck.strict)) {",
          "",
          "[Added Lines]",
          "511:     if (localvar && args && (!interp->noCheck)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "557:                 pstate->err_count++;",
          "558:         }",
          "559:         f->name = Jsi_KeyAdd(interp, name);",
          "562:             if (f->retType && !(f->retType&JSI_TT_VOID) && ops && ops->code_len && ops->codes[ops->code_len-1].op != OP_RET) {",
          "563:                 if (line)",
          "",
          "[Removed Lines]",
          "560:         if ((interp->typeCheck.run|interp->typeCheck.parse|interp->typeCheck.all|interp->typeCheck.funcsig)) {",
          "",
          "[Added Lines]",
          "547:         if (!interp->noCheck) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "570:             }",
          "573:                 Jsi_Func *fo = (Jsi_Func*)Jsi_HashGet(interp->staticFuncsTbl, (void*)name, 0);",
          "577:                     if (!jsi_FuncSigsMatch(pstate, f, fo)) {",
          "578:                         if (line)",
          "579:                             interp->parseLine = line;",
          "",
          "[Removed Lines]",
          "572:             if (interp->staticFuncsTbl) {",
          "576:                 if (interp->typeCheck.funcsig && fo && fo->opcodes && fo->opcodes->code_len == 1 && fo->opcodes->codes->op == OP_NOP) {",
          "",
          "[Added Lines]",
          "559:             if (interp->typeCheck.funcdecl) {",
          "563:                 if (interp->typeCheck.funcdecl && fo && fo->opcodes && fo->opcodes->code_len == 1 && fo->opcodes->codes->op == OP_NOP) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "805: bool jsi_FuncArgCheck(Jsi_Interp *interp, Jsi_Func *f, const char *argStr)",
          "806: {",
          "807:     int i, atyp, ftyp, rc = 0, acnt;",
          "808:     Jsi_DString dStr;",
          "809:     Jsi_DSInit(&dStr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794:     if (interp->noCheck) return 1;",
          "",
          "---------------"
        ],
        "src/jsiHash.c||src/jsiHash.c": [
          "File: src/jsiHash.c -> src/jsiHash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:     tablePtr->opts.mapType = (Jsi_Map_Type)JSI_MAP_HASH;",
          "408:     tablePtr->typ = JSI_MAP_HASH;",
          "409:     tablePtr->opts.interp = interp;",
          "411:     tablePtr->buckets = tablePtr->staticBuckets;",
          "412: #if !(JSI_SMALL_HASH_TABLE && !(JSI_SMALL_HASH_TABLE & (JSI_SMALL_HASH_TABLE - 1)))",
          "413: #error \"small hash must be a power of two\"",
          "",
          "[Removed Lines]",
          "410:     tablePtr->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "523: int",
          "524: Jsi_HashDelete(Jsi_Hash *tablePtr)",
          "525: {",
          "529:     Jsi_HashClear(tablePtr);",
          "530:     Jsi_Free(tablePtr);",
          "531:     return 0;",
          "",
          "[Removed Lines]",
          "526:     SIGASSERT(tablePtr, HASH);",
          "527:     if (--tablePtr->opts.refCnt>0) // Shared hash check.",
          "528:         return tablePtr->opts.refCnt;",
          "",
          "[Added Lines]",
          "525:     SIGASSERTRET(tablePtr, HASH, 0);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:     JSI_SIG_NAMEDATA, JSI_SIG_ACCESSOR",
          "260: } jsi_Sig;",
          "263: extern const char *jsi_LogCodes[], *jsi_LogCodesU[];",
          "264: extern uint jsi_GetLogFlag(Jsi_Interp *interp, uint mask, Jsi_PkgOpts* popts);",
          "",
          "[Removed Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, NULL, (interp->typeCheck.strict || interp->typeCheck.error)?JSI_LOG_ERROR:JSI_LOG_WARN, fmt, ##__VA_ARGS__)",
          "",
          "[Added Lines]",
          "262: #define Jsi_LogType(fmt,...) Jsi_LogMsg(interp, NULL, (interp->noError?JSI_LOG_WARN:(interp->inParse?JSI_LOG_PARSE:JSI_LOG_ERROR)), fmt, ##__VA_ARGS__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "960: } jsi_numUnion;",
          "962: typedef struct {",
          "969:     uint noundef:1;",
          "970:     uint nowith:1;",
          "973: } Jsi_TypeCheck;",
          "975: typedef enum {",
          "",
          "[Removed Lines]",
          "963:     uint none:1;",
          "964:     uint parse:1;",
          "965:     uint run:1;",
          "966:     uint all:1;",
          "967:     uint error:1;",
          "968:     uint strict:1;",
          "971:     uint funcsig:1;",
          "972:     uint unused:24;",
          "",
          "[Added Lines]",
          "963:     uint noreturn:1;",
          "966:     uint builtins:1;",
          "967:     uint funcdecl:1;",
          "968:     uint unused:27;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1154:     Jsi_Value *stdinStr;",
          "1155:     Jsi_Value *stdoutStr;",
          "1156:     Jsi_TypeCheck typeCheck;",
          "1157:     jsi_LogOptions logOpts;",
          "1158:     uint log;",
          "1159:     int typeWarnMax;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1152:     bool noError;",
          "1153:     bool noCheck;",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: };",
          "75: static const char *jsi_SafeModeStrs[] = { \"none\", \"read\", \"write\", \"writeRead\", \"lockdown\", NULL };",
          "77: const char *jsi_callTraceStrs[] = { \"funcs\", \"cmds\", \"new\", \"return\", \"args\", \"notrunc\", \"noparent\", \"full\", \"before\", NULL};",
          "78: const char *jsi_AssertModeStrs[] = { \"throw\", \"log\", \"puts\", NULL};",
          "",
          "[Removed Lines]",
          "76: static const char *jsi_TypeChkStrs[] = { \"none\", \"parse\", \"run\", \"all\", \"error\", \"strict\", \"noundef\", \"nowith\", \"funcsig\", NULL };",
          "",
          "[Added Lines]",
          "76: static const char *jsi_TypeChkStrs[] = { \"noreturn\", \"noundef\", \"nowith\", \"builtins\", \"funcdecl\", NULL };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     JSI_OPT(INT,   Jsi_Interp, memLeakCnt,  .help=\"Leak memory count due to object added to self\", jsi_IIOF|JSI_OPT_LOCKSAFE ),",
          "109:     JSI_OPT(STRKEY,Jsi_Interp, name,        .help=\"Optional text name for this interp\"),",
          "110:     JSI_OPT(BOOL,  Jsi_Interp, noAutoLoad,  .help=\"Disable autoload\", .flags=JSI_OPT_LOCKSAFE ),",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noConfig,    .help=\"Disable use of Interp.conf to change options after create\", jsi_IIOF),",
          "112:     JSI_OPT(BOOL,  Jsi_Interp, noEval,      .help=\"Disable eval: just parses file to check syntax\", jsi_IIOF),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noInput,     .help=\"Disable use of console.input()\", .flags=JSI_OPT_LOCKSAFE),",
          "114:     JSI_OPT(BOOL,  Jsi_Interp, noLoad,      .help=\"Disable load of shared libs\", .flags=JSI_OPT_LOCKSAFE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     JSI_OPT(BOOL,  Jsi_Interp, noCheck,     .help=\"Disable type checking\", .flags=JSI_OPT_LOCKSAFE ),",
          "113:     JSI_OPT(BOOL,  Jsi_Interp, noError,     .help=\"Type checks failures are warning\", .flags=JSI_OPT_LOCKSAFE ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1111:     interp->logOpts.file = 1;",
          "1112:     interp->logOpts.func = 1;",
          "1113:     interp->logOpts.before = 1;",
          "1115:     interp->log = Jsi_LogDefVal;",
          "1116:     int argc = interp->opts.argc;",
          "1117:     char **argv = interp->opts.argv;",
          "1118:     char *argv0 = (argv?argv[0]:NULL);",
          "",
          "[Removed Lines]",
          "1114:     interp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1408:     interp->codesTbl = (interp == jsiIntData.mainInterp ? Jsi_HashNew(interp, JSI_KEYS_ONEWORD, NULL) : jsiIntData.mainInterp->codesTbl);",
          "1409: #endif",
          "1410:     interp->GetterValue = Jsi_ValueNew1(interp);",
          "1413:     if (!jsiIntData.isInit) {",
          "1414:         jsiIntData.isInit = 1;",
          "1415:         jsi_InitValue(interp, 0);",
          "",
          "[Removed Lines]",
          "1411:     if (interp->typeCheck.all|interp->typeCheck.parse|interp->typeCheck.funcsig)",
          "1412:         interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "[Added Lines]",
          "1413:     interp->staticFuncsTbl = Jsi_HashNew(interp, JSI_KEYS_STRING, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1666:         }",
          "1667:     }",
          "1668: }",
          "1670: void jsi_DebugDumpValues(Jsi_Interp *interp)",
          "1671: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1670: #define Jsi_DecrRefCountIF(i,s) if (s) Jsi_DecrRefCount(i,s)",
          "1671: #define Jsi_HashDeleteIF(s) if (s) Jsi_HashDelete(s)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1773:                 fprintf(stderr, \"unfreed opcodes: %d\\n\", vp->id);",
          "1774:             }",
          "1775:     }",
          "1779:     bool isMainInt = (interp == jsiIntData.mainInterp);",
          "1780:     if (isMainInt && vdLev>3)",
          "1781:         _exit(1); // Avoid sanitize output.",
          "",
          "[Removed Lines]",
          "1776:     Jsi_HashDelete(interp->dbPtr->valueDebugTbl);",
          "1777:     Jsi_HashDelete(interp->dbPtr->objDebugTbl);",
          "1778:     Jsi_HashDelete(interp->codesTbl);",
          "",
          "[Added Lines]",
          "1779:     Jsi_HashDeleteIF(interp->dbPtr->valueDebugTbl);",
          "1780:     Jsi_HashDeleteIF(interp->dbPtr->objDebugTbl);",
          "1781:     Jsi_HashDeleteIF(interp->codesTbl);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1804:         Jsi_Free(interp->Stack);",
          "1805:         Jsi_Free(interp->Obj_this);",
          "1806:     }",
          "1821:     if (interp->profileCnt) { // TODO: resolve some values from dbPtr, others not.",
          "1822:         double endTime = jsi_GetTimestamp();",
          "1823:         double coverage = (int)(100.0*interp->coverHit/interp->coverAll);",
          "",
          "[Removed Lines]",
          "1808:     if (interp->argv0)",
          "1809:         Jsi_DecrRefCount(interp, interp->argv0);",
          "1810:     if (interp->console)",
          "1811:         Jsi_DecrRefCount(interp, interp->console);",
          "1812:     if (interp->lastSubscriptFail)",
          "1813:         Jsi_DecrRefCount(interp, interp->lastSubscriptFail);",
          "1814:     if (interp->nullFuncRet)",
          "1815:         Jsi_DecrRefCount(interp, interp->nullFuncRet);",
          "1816:     Jsi_HashDelete(interp->codeTbl);",
          "1817:     Jsi_MapDelete(interp->cmdSpecTbl);",
          "1818:     Jsi_HashDelete(interp->fileTbl);",
          "1819:     Jsi_HashDelete(interp->funcObjTbl);",
          "1820:     Jsi_HashDelete(interp->funcsTbl);",
          "",
          "[Added Lines]",
          "1810:     Jsi_DecrRefCountIF(interp, interp->argv0);",
          "1811:     Jsi_DecrRefCountIF(interp, interp->console);",
          "1812:     Jsi_DecrRefCountIF(interp, interp->lastSubscriptFail);",
          "1813:     Jsi_DecrRefCountIF(interp, interp->nullFuncRet);",
          "1814:     Jsi_HashDeleteIF(interp->codeTbl);",
          "1815:     if (interp->cmdSpecTbl) Jsi_MapDelete(interp->cmdSpecTbl);",
          "1816:     Jsi_HashDeleteIF(interp->funcObjTbl);",
          "1817:     Jsi_HashDeleteIF(interp->funcsTbl);",
          "1818:     Jsi_HashDeleteIF(interp->fileTbl);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1831:         Jsi_DSFree(&dStr);",
          "1832:     }",
          "1833:     if (isMainInt)",
          "1836:     if (interp->subthread)",
          "1837:         jsiIntData.mainInterp->threadCnt--;",
          "1838:     if (interp->subthread && interp->strKeyTbl == jsiIntData.mainInterp->strKeyTbl)",
          "",
          "[Removed Lines]",
          "1834:         Jsi_HashDelete(interp->lexkeyTbl);",
          "1835:     Jsi_HashDelete(interp->protoTbl);",
          "",
          "[Added Lines]",
          "1832:         Jsi_HashDeleteIF(interp->lexkeyTbl);",
          "1833:     Jsi_HashDeleteIF(interp->protoTbl);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1844:         jsiIntData.mainInterp->strKeyTbl->v.hash->opts.lockHashProc = NULL;",
          "1845: #endif",
          "1857:     if (interp->preserveTbl->numEntries!=0)",
          "1858:         Jsi_LogBug(\"Preserves unbalanced\");",
          "1860:     if (interp->curDir)",
          "1861:         Jsi_Free(interp->curDir);",
          "1862:     if (isMainInt) {",
          "",
          "[Removed Lines]",
          "1847:     Jsi_HashDelete(interp->thisTbl);",
          "1848:     Jsi_HashDelete(interp->varTbl);",
          "1849:     Jsi_HashDelete(interp->genValueTbl);",
          "1850:     Jsi_HashDelete(interp->genObjTbl);",
          "1851:     Jsi_HashDelete(interp->aliasHash);",
          "1852:     Jsi_DecrRefCount(interp, interp->GetterValue);",
          "1853:     if (interp->staticFuncsTbl)",
          "1854:         Jsi_HashDelete(interp->staticFuncsTbl);",
          "1855:     if (interp->breakpointHash)",
          "1856:         Jsi_HashDelete(interp->breakpointHash);",
          "1859:     Jsi_HashDelete(interp->preserveTbl);",
          "",
          "[Added Lines]",
          "1845:     Jsi_HashDeleteIF(interp->thisTbl);",
          "1846:     Jsi_HashDeleteIF(interp->varTbl);",
          "1847:     Jsi_HashDeleteIF(interp->genValueTbl);",
          "1848:     Jsi_HashDeleteIF(interp->genObjTbl);",
          "1849:     Jsi_HashDeleteIF(interp->aliasHash);",
          "1850:     Jsi_DecrRefCountIF(interp, interp->GetterValue);",
          "1851:     Jsi_HashDeleteIF(interp->staticFuncsTbl);",
          "1852:     Jsi_HashDeleteIF(interp->breakpointHash);",
          "1855:     Jsi_HashDeleteIF(interp->preserveTbl);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1887:         Jsi_MutexDelete(interp, interp->QMutex);",
          "1888:         Jsi_DSFree(&interp->interpEvalQ);",
          "1889:     }",
          "1894:     if (interp->Function_prototype_prototype) {",
          "1895:         if (interp->Function_prototype_prototype->refCnt>1)",
          "1901:     }",
          "1903:     Jsi_OptionsFree(interp, InterpOptions, interp, 0);",
          "1914:     for (i=0; interp->cleanObjs[i]; i++) {",
          "1915:         interp->cleanObjs[i]->tree->opts.freeHashProc = 0;",
          "1916:         Jsi_ObjFree(interp, interp->cleanObjs[i]);",
          "1917:     }",
          "1919:     for (i = 0; i <= interp->cur_scope; i++)",
          "1920:         jsi_ScopeStrsFree(interp, interp->scopes[i]);",
          "1921: #if JSI__ZVFS==1",
          "1922:     Jsi_InitZvfs(interp, mainFlag);",
          "1923: #endif",
          "1929:     interp->cleanup = 1;",
          "1931: #ifdef JSI_MEM_DEBUG",
          "",
          "[Removed Lines]",
          "1890:     if (interp->nullFuncArg)",
          "1891:         Jsi_DecrRefCount(interp, interp->nullFuncArg);",
          "1892:     if (interp->NullValue)",
          "1893:         Jsi_DecrRefCount(interp, interp->NullValue);",
          "1896:             Jsi_DecrRefCount(interp, interp->Function_prototype_prototype);",
          "1897:         Jsi_DecrRefCount(interp, interp->Function_prototype_prototype);",
          "1898:     }",
          "1899:     if (interp->Object_prototype) {",
          "1900:         Jsi_DecrRefCount(interp, interp->Object_prototype);",
          "1902:     Jsi_HashDelete(interp->regexpTbl);",
          "1904:     Jsi_HashDelete(interp->userdataTbl);",
          "1905:     Jsi_HashDelete(interp->eventTbl);",
          "1906:     if (interp->inopts)",
          "1907:         Jsi_DecrRefCount(interp, interp->inopts);",
          "1908:     if (interp->safeWriteDirs)",
          "1909:         Jsi_DecrRefCount(interp, interp->safeWriteDirs);",
          "1910:     if (interp->safeReadDirs)",
          "1911:         Jsi_DecrRefCount(interp, interp->safeReadDirs);",
          "1912:     if (interp->pkgDirs)",
          "1913:         Jsi_DecrRefCount(interp, interp->pkgDirs);",
          "1918:     Jsi_HashDelete(interp->bindTbl);",
          "1925:         Jsi_HashDelete(interp->loadTbl);",
          "1926:     if (interp->packageHash)",
          "1927:         Jsi_HashDelete(interp->packageHash);",
          "1928:     Jsi_HashDelete(interp->assocTbl);",
          "",
          "[Added Lines]",
          "1886:     Jsi_DecrRefCountIF(interp, interp->nullFuncArg);",
          "1887:     Jsi_DecrRefCountIF(interp, interp->NullValue);",
          "1890:             Jsi_DecrRefCountIF(interp, interp->Function_prototype_prototype);",
          "1891:         Jsi_DecrRefCountIF(interp, interp->Function_prototype_prototype);",
          "1893:     Jsi_DecrRefCountIF(interp, interp->Object_prototype);",
          "1894:     Jsi_HashDeleteIF(interp->regexpTbl);",
          "1896:     Jsi_HashDeleteIF(interp->userdataTbl);",
          "1897:     Jsi_HashDeleteIF(interp->eventTbl);",
          "1898:     Jsi_DecrRefCountIF(interp, interp->inopts);",
          "1899:     Jsi_DecrRefCountIF(interp, interp->safeWriteDirs);",
          "1900:     Jsi_DecrRefCountIF(interp, interp->safeReadDirs);",
          "1901:     Jsi_DecrRefCountIF(interp, interp->pkgDirs);",
          "1906:     Jsi_HashDeleteIF(interp->bindTbl);",
          "1913:     Jsi_HashDeleteIF(interp->loadTbl);",
          "1914:     Jsi_HashDeleteIF(interp->packageHash);",
          "1915:     Jsi_HashDeleteIF(interp->assocTbl);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2104:     }",
          "2105:     if (interp->subOpts.mutexUnlock) Jsi_MutexUnlock(interp, interp->Mutex);",
          "2106:     if (!isthrd) {",
          "2108:         if (interp->isSafe)",
          "2110:         sinterp->level++;",
          "2111:         if (interp->framePtr->tryDepth)",
          "2112:             sinterp->framePtr->tryDepth++;",
          "",
          "[Removed Lines]",
          "2107:         int ostrict = sinterp->typeCheck.strict;",
          "2109:             sinterp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "2094:         int onoerror = sinterp->noCheck;",
          "2096:             sinterp->noCheck = 0;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2126:         else {",
          "2127:             rc = (jsi_evalStrFile(sinterp, NULL, cp, 0, lev) == 0 ? JSI_OK : JSI_ERROR);",
          "2128:         }",
          "2130:         if (interp->framePtr->tryDepth) {",
          "2131:             sinterp->framePtr->tryDepth--;",
          "2132:             if (rc != JSI_OK && interp != sinterp) {",
          "",
          "[Removed Lines]",
          "2129:         sinterp->typeCheck.strict = ostrict;",
          "",
          "[Added Lines]",
          "2116:         sinterp->noCheck = onoerror;",
          "",
          "---------------"
        ],
        "src/jsiOptions.c||src/jsiOptions.c": [
          "File: src/jsiOptions.c -> src/jsiOptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:         switch (specPtr->id) {",
          "350: #define _JSI_OPTSETNTYP(typ, n, ptr) if (!argValue) *(typ*)ptr = 0; else { if (isIncr) n += *((typ *)ptr); \\",
          "351:             interp->cdataIncrVal = *((typ *)ptr) = (typ)(n); \\",
          "354:             case JSI_OPTION_NUMBER: _JSI_OPTSETNTYP(Jsi_Number, nv, ptr); break;",
          "355:             case JSI_OPTION_LDOUBLE: _JSI_OPTSETNTYP(ldouble, nv, ptr); break;",
          "",
          "[Removed Lines]",
          "352:             if (interp->typeCheck.strict && Jsi_NumberIsNaN((Jsi_Number)(*((typ *)ptr)))) return Jsi_LogError(\"not a number\"); }",
          "",
          "[Added Lines]",
          "352:             if (!interp->noCheck && Jsi_NumberIsNaN((Jsi_Number)(*((typ *)ptr)))) return Jsi_LogError(\"not a number\"); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:         _JSI_OPT_CHECKNULL(argValue);",
          "503:         if (argValue->vt != JSI_VT_OBJECT || argValue->d.obj->ot != JSI_OT_FUNCTION)",
          "504:             goto bail;",
          "509:         _JSI_OPT_ARGSET(argValue, ptr);",
          "510:         break;",
          "",
          "[Removed Lines]",
          "505:         if (specPtr->data && !interp->typeCheck.none && (interp->typeCheck.run|interp->typeCheck.all))",
          "506:             if (!jsi_FuncArgCheck(interp, argValue->d.obj->d.fobj->func, (char*)specPtr->data))",
          "507:                 return Jsi_LogError(\"failed setting func pointer for %s\", specPtr->name);",
          "",
          "[Added Lines]",
          "505:         if (specPtr->data && !jsi_FuncArgCheck(interp, argValue->d.obj->d.fobj->func, (char*)specPtr->data))",
          "506:             return Jsi_LogError(\"failed setting func pointer for %s\", specPtr->name);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1808:         return Jsi_LogError(\"value not found in parent: %s\", s);",
          "1809:     if (!Jsi_ValueIsFunction(pinterp, val))",
          "1810:         return Jsi_LogError(\"expected a func value\");",
          "1812:         if (!jsi_FuncIsNoop(pinterp, val)",
          "1813:             && !jsi_FuncArgCheck(pinterp, val->d.obj->d.fobj->func, (char*)spec->data))",
          "1814:             return Jsi_LogError(\"failed setting func pointer for %s\", spec->name);",
          "",
          "[Removed Lines]",
          "1811:     if (spec->data && (interp->typeCheck.strict || pinterp->typeCheck.strict))",
          "",
          "[Added Lines]",
          "1810:     if (spec->data && (!interp->noCheck || !pinterp->noCheck))",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         func->argnames = jsi_ParseArgStr(interp, argStr);",
          "119:     argnames = func->argnames;",
          "120:     int argc = Jsi_ValueGetLength(interp, args);",
          "123:         nrc = JSI_ERROR;",
          "124:     if (!argnames)",
          "125:         return nrc;",
          "",
          "[Removed Lines]",
          "121:     if (alloc && (interp->typeCheck.all|interp->typeCheck.run) && jsi_RunFuncCallCheck(interp, func, argc, func->name, NULL, NULL, 0) != JSI_OK",
          "122:         && (interp->typeCheck.strict || interp->typeCheck.error))",
          "",
          "[Added Lines]",
          "121:     if (alloc && jsi_RunFuncCallCheck(interp, func, argc, func->name, NULL, NULL, 0) != JSI_OK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:                 dv = v = argnames->args[n].defValue;",
          "150:             if (v && rc == JSI_OK && i >= addargs) {",
          "151:                 int typ = argnames->args[n].type;",
          "154:             }",
          "155:             if (func->type == FC_BUILDIN)",
          "156:                 continue;",
          "",
          "[Removed Lines]",
          "152:                 if ((typ && interp->typeCheck.run) || interp->typeCheck.all)",
          "153:                     rc = jsi_ArgTypeCheck(interp, typ, v, \"for argument\", argkey, i+1, func, (dv!=NULL));",
          "",
          "[Added Lines]",
          "151:                 rc = jsi_ArgTypeCheck(interp, typ, v, \"for argument\", argkey, i+1, func, (dv!=NULL));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:         if (rc == JSI_OK && calltrc && (tc&jsi_callTraceReturn))",
          "263:             jsi_TraceFuncCall(interp, funcPtr, NULL, fthis, NULL, *ret, tc);",
          "265:             rc = jsi_ArgTypeCheck(interp, funcPtr->retType, *ret, \"returned from\", funcPtr->name, 0, funcPtr, 0);",
          "266:         interp->callDepth--;",
          "267:     }",
          "",
          "[Removed Lines]",
          "264:         if (rc == JSI_OK && !as_cons && funcPtr->retType && (interp->typeCheck.all || interp->typeCheck.run))",
          "",
          "[Added Lines]",
          "262:         if (rc == JSI_OK && !as_cons && funcPtr->retType && !interp->typeCheck.noreturn)",
          "",
          "---------------"
        ],
        "src/jsiPstate.c||src/jsiPstate.c": [
          "File: src/jsiPstate.c -> src/jsiPstate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:         if (atyp)",
          "113:             jsi_ArgTypeCheck(interp, atyp, defValue, \"default value\", name, a->argCnt, NULL, 1);",
          "114:     } else {",
          "117:     }",
          "118:     interp->parseLine = opl;",
          "119:     return a;",
          "",
          "[Removed Lines]",
          "115:         if (a->firstDef && (interp->typeCheck.run || interp->typeCheck.all) )",
          "116:             Jsi_LogWarn(\"expected default value in argument list: \\\"%s\\\"\", name);",
          "",
          "[Added Lines]",
          "115:         if (a->firstDef && !interp->noCheck)",
          "116:             Jsi_LogType(\"expected default value in argument list: \\\"%s\\\"\", name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     for (i = 0; i < interp->scopes[interp->cur_scope]->count; ++i) {",
          "155:         if (Jsi_Strcmp(str, interp->scopes[interp->cur_scope]->args[i].name) == 0) {",
          "156:             Jsi_Interp *interp = ps->interp;",
          "158:                 interp->parseLine = line;",
          "159:                 Jsi_LogWarn(\"duplicate var: %s\", str);",
          "160:                 interp->parseLine = NULL;",
          "",
          "[Removed Lines]",
          "157:             if (interp && interp->typeCheck.strict) {",
          "",
          "[Added Lines]",
          "157:             if (interp && !interp->noCheck) {",
          "",
          "---------------"
        ],
        "src/jsiTree.c||src/jsiTree.c": [
          "File: src/jsiTree.c -> src/jsiTree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     treePtr->typ = (Jsi_Map_Type)JSI_MAP_TREE;",
          "452:     treePtr->root = NULL;",
          "453:     treePtr->opts.interp = interp;",
          "455:     treePtr->numEntries = 0;",
          "456:     treePtr->epoch = 0;",
          "457:     treePtr->opts.keyType = (Jsi_Key_Type)keyType;",
          "",
          "[Removed Lines]",
          "454:     treePtr->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "511: int Jsi_TreeDelete (Jsi_Tree *treePtr)",
          "512: {",
          "513:     SIGASSERTV(treePtr, TREE);",
          "519:     treePtr->flags.destroyed = 1;",
          "520:     destroy_node(treePtr->opts.interp, treePtr->root);",
          "",
          "[Removed Lines]",
          "514:     if (--treePtr->opts.refCnt>0) // Shared tree check.",
          "515:         return treePtr->opts.refCnt;",
          "516:     if (treePtr->flags.destroyed)",
          "517:         return -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     if (isHelp) mt = \"help\";",
          "204:     assert((JSI__LOGLAST+2) == (sizeof(jsi_LogCodes)/sizeof(jsi_LogCodes[0])));",
          "205:     if (!Jsi_Strchr(format,'\\n')) term = \"\\n\";",
          "207:         ss = (char*)Jsi_ValueToString(interp, interp->lastParseOpt, NULL);",
          "208:     if (isExt)",
          "209:         snprintf(pbuf, sizeof(pbuf), \"    (c-extn [%s])\", popts->cmdSpec->name);",
          "",
          "[Removed Lines]",
          "206:     if (interp->typeCheck.strict && interp->lastParseOpt)",
          "",
          "[Added Lines]",
          "206:     if (!interp->noCheck && interp->lastParseOpt)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:                 lastCnt++;",
          "284:                 goto done;",
          "285:             } else if (lastMsg[0] && lastCnt>1 ) {",
          "287:             }",
          "288:             if (buf1[0] == 0 || (buf1[0] == '.' && buf1[1] == 0))",
          "289:                 goto done;",
          "",
          "[Removed Lines]",
          "286:                 fprintf(stderr, \"REPEAT: Last msg repeated %d times...\\\"\\n\" ,lastCnt);",
          "",
          "[Added Lines]",
          "286:                 fprintf(stderr, \"REPEAT: Last msg repeated %d times...\\\"\\n\" ,lastCnt-1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:     }",
          "316:     if ((code & jsi_fatalexit) && !interp->opts.no_exit)",
          "317:         jsi_DoExit(interp, 1);",
          "319: }",
          "321: const char* Jsi_KeyAdd(Jsi_Interp *interp, const char *str)",
          "",
          "[Removed Lines]",
          "318:     return (code==JSI_LOG_ERROR?JSI_ERROR:JSI_OK);",
          "",
          "[Added Lines]",
          "318:     return (code==JSI_LOG_ERROR||code==JSI_LOG_PARSE?JSI_ERROR:JSI_OK);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1132: #if JSI__SIGNAL",
          "1133:   signal(SIGINT, jsi_InteractiveSignal);",
          "1134: #endif",
          "1137:     interp->isInteractive = 1;",
          "1138:     jsi_interactiveInterp = interp;",
          "1139:     interp->subOpts.istty = 1;",
          "",
          "[Removed Lines]",
          "1135:     interp->typeCheck.parse = interp->typeCheck.run = interp->typeCheck.all = 1;",
          "1136:     interp->typeCheck.strict = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1178:                  fprintf(stderr, \"abandoned input\");",
          "1179:             } else",
          "1180:                 Jsi_DSAppend(&dStr, buf, NULL);",
          "1182:         } else {",
          "1183:             done = 1;",
          "1184:         }",
          "",
          "[Removed Lines]",
          "1181:             free(buf);",
          "",
          "[Added Lines]",
          "1179:             Jsi_Free(buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1439:     list->opts.flags = flags;",
          "1440:     list->opts.freeHashProc = freeProc;",
          "1441:     list->opts.interp = interp;",
          "1443:     list->opts.mapType = JSI_MAP_LIST;",
          "1444:     list->opts.keyType = (Jsi_Key_Type)-1;",
          "1445:     return list;",
          "",
          "[Removed Lines]",
          "1442:     list->opts.refCnt = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1459: int Jsi_ListDelete(Jsi_List *list) {",
          "1460:     SIGASSERT(list, LIST);",
          "1463:     Jsi_ListClear(list);",
          "1465:     return 0;",
          "1466: }",
          "",
          "[Removed Lines]",
          "1461:     if (--list->opts.refCnt>0) // Shared hash check.",
          "1462:         return list->opts.refCnt;",
          "1464:     free(list);",
          "",
          "[Added Lines]",
          "1459:     Jsi_Free(list);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1650:     return r;",
          "1651: }",
          "1652: Jsi_MapEntry* Jsi_MapSet(Jsi_Map *mapPtr, const void *key, const void *value){",
          "1654:     Jsi_MapEntry* mptr = NULL;",
          "1655:     switch (mapPtr->typ) {",
          "1656:         case JSI_MAP_HASH: mptr = (Jsi_MapEntry*)Jsi_HashSet(mapPtr->v.hash, (void*)key, (void*)value); break;",
          "",
          "[Removed Lines]",
          "1653:     SIGASSERT(mapPtr, MAP);",
          "",
          "[Added Lines]",
          "1648:     SIGASSERTRET(mapPtr, MAP,NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1665:     return mptr;",
          "1666: }",
          "1667: void* Jsi_MapGet(Jsi_Map *mapPtr, const void *key, int flags){",
          "1669:     switch (mapPtr->typ) {",
          "1670:         case JSI_MAP_HASH: return Jsi_HashGet(mapPtr->v.hash, (void*)key, flags);",
          "1671:         case JSI_MAP_TREE: return Jsi_TreeGet(mapPtr->v.tree, (void*)key, flags);",
          "",
          "[Removed Lines]",
          "1668:     SIGASSERT(mapPtr, MAP);",
          "",
          "[Added Lines]",
          "1663:     SIGASSERTRET(mapPtr, MAP, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2646:     if (!value)",
          "2647:         return JSI_ERROR;",
          "2649:         jsi_ValueToOInt32(interp, value);",
          "2650:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2648:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2643:     if (interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2658: {",
          "2659:     if (!value)",
          "2660:         return JSI_ERROR;",
          "2662:         jsi_ValueToOInt32(interp, value);",
          "2663:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2661:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2656:     if (interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2672: {",
          "2673:     if (!value)",
          "2674:         return JSI_ERROR;",
          "2676:         Jsi_ValueToNumber(interp, value);",
          "2677:     if (!Jsi_ValueIsNumber(interp, value))",
          "",
          "[Removed Lines]",
          "2675:     if (!interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "2670:     if (interp->noCheck)",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: bool Jsi_IsShared(Jsi_Interp* interp, Jsi_Value *v)",
          "27: {",
          "29:     return (v->refCnt > 1);",
          "30: }",
          "32: int Jsi_IncrRefCount(Jsi_Interp* interp, Jsi_Value *v)",
          "33: {",
          "35:     assert(v->refCnt>=0);",
          "36:     jsi_DebugValue(v,\"Incr\", jsi_DebugValueCallIdx(), interp);",
          "37:     return ++(v->refCnt);",
          "38: }",
          "40: int Jsi_DecrRefCount(Jsi_Interp* interp, Jsi_Value *v) {",
          "42:     if (v->refCnt<=0) {",
          "43: #ifdef JSI_MEM_DEBUG",
          "44:         fprintf(stderr, \"Value decr with ref %d: VD.Idx=%d\\n\", v->refCnt, v->VD.Idx);",
          "",
          "[Removed Lines]",
          "28:     SIGASSERT(v,VALUE);",
          "34:     SIGASSERT(v,VALUE);",
          "41:     SIGASSERT(v,VALUE);",
          "",
          "[Added Lines]",
          "28:     SIGASSERTRET(v,VALUE,0);",
          "34:     SIGASSERTRET(v,VALUE,-1);",
          "41:     SIGASSERTRET(v,VALUE,0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:         }",
          "337:     }",
          "338:     if (target->vt != JSI_VT_OBJECT) {",
          "340:             Jsi_LogWarn(\"Target is not object: %d\", target->vt);",
          "341:         return NULL;",
          "342:     }",
          "",
          "[Removed Lines]",
          "339:         if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "339:         if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:     switch(v->vt) {",
          "700:         case JSI_VT_UNDEF:",
          "701:         case JSI_VT_NULL:",
          "703:                 rc = Jsi_LogError(\"converting a undefined/null value to object\");",
          "704:             o->d.num = 0;",
          "705:             o->ot = JSI_OT_NUMBER;",
          "",
          "[Removed Lines]",
          "702:             if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "702:             if (!interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "992:     if (obj->getters) {",
          "993:         Jsi_HashEntry *hPtr = Jsi_HashEntryFind(obj->getters, keyStr);",
          "994:         if (hPtr) {",
          "996:             if (rc == JSI_OK) {",
          "997:                 v = interp->GetterValue;",
          "998:                 v->f.bits.isgetter = 1;",
          "1001:                 return v;",
          "1002:             }",
          "",
          "[Removed Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, target, 0);",
          "999:                 if (obj->setters)",
          "1000:                     interp->hPtrGet = Jsi_HashEntryFind(obj->setters, keyStr);",
          "",
          "[Added Lines]",
          "995:             Jsi_RC rc = jsi_GetterCall(interp, hPtr, &interp->GetterValue, target, JSI_ACCESSOR_TOOBJECT);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1150:             io->isArrayList = 1;",
          "1151:             io->count = to->arrCnt;",
          "1152:         } else {",
          "1154:                 Jsi_LogWarn(\"non-array in 'for...of'\");",
          "1155:             Jsi_IterGetKeys(interp, target, io, 0);",
          "1156:         }",
          "",
          "[Removed Lines]",
          "1153:             if (isof &&interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "1151:             if (isof && !interp->noCheck)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1371:     Jsi_Value *vcall = (Jsi_Value*)Jsi_HashValueGet(hPtr);",
          "1372:     if (!vcall || !key)",
          "1373:         return Jsi_LogBug(\"bad getter\");",
          "1375:     Jsi_FuncObj *fobj = vcall->d.obj->d.fobj;",
          "1378:         vargs[i++] = Jsi_ValueNewStringDup(interp, key);",
          "1379:         Jsi_IncrRefCount(interp, vargs[0]);",
          "1380:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vargs, i, 0));",
          "",
          "[Removed Lines]",
          "1374:     Jsi_Value *vpargs = NULL, *vargs[2];",
          "1376:     int i = 0;",
          "1377:     if (!fobj->func->isGet) {",
          "",
          "[Added Lines]",
          "1372:     Jsi_Value *v, *vpargs = NULL, *vargs[2];",
          "1374:     int i = 0, isCext = !fobj->func->isGet;",
          "1375:     if (isCext) { // C-extension: add key name",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1386:         Jsi_DecrRefCount(interp, vargs[0]);",
          "1387:         Jsi_DecrRefCount(interp, vpargs);",
          "1388:     }",
          "1389:     return rc;",
          "1390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1387:     v = (*vres);",
          "1388:     Jsi_Obj *obj = _this->d.obj;",
          "1389:     if (rc == JSI_OK && flags&JSI_ACCESSOR_TOOBJECT) {",
          "1390:         if (obj->setters && v->vt != JSI_VT_OBJECT)",
          "1391:             interp->hPtrGet = Jsi_HashEntryFind(obj->setters, key);",
          "1394:             Jsi_ValueToObject(interp, v);",
          "1395:         else if (obj->setters && v->vt != JSI_VT_OBJECT)",
          "1397:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1446: {",
          "1447:     if (!target) return;",
          "1448:     if (target->vt != JSI_VT_OBJECT) {",
          "1450:             Jsi_LogWarn(\"operand is not a object\");",
          "1451:         return;",
          "1452:     }",
          "",
          "[Removed Lines]",
          "1449:         if (interp->typeCheck.strict)",
          "",
          "[Added Lines]",
          "1458:         if (!interp->noCheck)",
          "",
          "---------------"
        ],
        "tests/expr.jsi||tests/expr.jsi": [
          "File: tests/expr.jsi -> tests/expr.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: ;a.a += true;",
          "83: ;a.a += 'fock';",
          "86: ;-NaN;",
          "87: ;-Infinity;",
          "88: ;NaN + NaN;",
          "",
          "[Removed Lines]",
          "85: Interp.conf({typeCheck:{strict:false}});",
          "",
          "[Added Lines]",
          "85: Interp.conf({noCheck:true});",
          "",
          "---------------"
        ],
        "tests/strict.jsi||tests/strict.jsi": [
          "File: tests/strict.jsi -> tests/strict.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: Interp.conf({maxDumpStack:0});",
          "",
          "[Removed Lines]",
          "1: #!/usr/local/bin/jsish -u %s",
          "",
          "[Added Lines]",
          "1: #!/usr/local/bin/jsish",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208: bar2() ==> e ==> function created global: \"j\"",
          "209: bar3() ==> e ==> function created global: \"k\"",
          "210: bar4() ==> e ==> function created global: \"l\"",
          "214: foo3() ==> e ==> got 0 args, expected 1, calling function foo3(n:string)",
          "215: foo3(1) ==> e ==> type mismatch for argument arg 1 'n': expected \"string\" but got \"number\", in call to 'foo3' declared at strict.jsi:78.2 <1>.",
          "216: foo4(1) ==> e ==> type mismatch for argument arg 1 'n': expected \"string\" but got \"number\", in call to 'foo4' declared at strict.jsi:91.2 <1>.",
          "",
          "[Removed Lines]",
          "211: foo1(1) ==> e ==> got 1 args, expected 0, calling function foo1()",
          "212: foo2() ==> e ==> got 0 args, expected 1, calling function foo2(n)",
          "213: foo2(1,2) ==> e ==> got 2 args, expected 1, calling function foo2(n)",
          "",
          "[Added Lines]",
          "211: foo1(1) ==> undefined",
          "212: foo2() ==> undefined",
          "213: foo2(1,2) ==> undefined",
          "",
          "---------------"
        ],
        "tests/syntax.jsi||tests/syntax.jsi": [
          "File: tests/syntax.jsi -> tests/syntax.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "4: function foo() {",
          "5:   var i = Info; // Prevents static type check detections.",
          "6:   i.cmds(1,2,3,4);",
          "",
          "[Removed Lines]",
          "3: Interp.conf({typeCheck:['error'], maxDumpStack:0});",
          "",
          "[Added Lines]",
          "3: ;Interp.conf({noError:true, maxDumpStack:0});",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15: =!EXPECTSTART!=",
          "17: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "16: foo() ==> e ==> got 4 args, expected 0-2, calling function cmds(val:string|regexp='*', options:object=void)",
          "",
          "[Added Lines]",
          "16: Interp.conf({noError:true, maxDumpStack:0}) ==> undefined",
          "17: foo() ==> /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: got 4 args, expected 0-2, calling function cmds(val:string|regexp='*', options:object=void)",
          "18: /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: type mismatch for argument arg 1 'val': expected \"string|regexp\" but got \"number\", in call to 'cmds' declared at syntax.jsi:0.0 <1>.",
          "19: /home/pmacdona/src/jsi3/tests/syntax.jsi:6: warn: type mismatch for argument arg 2 'options': expected \"object\" but got \"number\", in call to 'cmds' declared at syntax.jsi:0.0 <2>.",
          "20: e ==> extra args, expected \"cmds(val:string|regexp='*', options:object=void)\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}