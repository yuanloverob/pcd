{
  "cve_id": "CVE-2018-19625",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.4 and 2.4.0 to 2.4.10, the dissection engine could crash. This was addressed in epan/tvbuff_composite.c by preventing a heap-based buffer over-read.",
  "repo": "wireshark/wireshark",
  "patch_hash": "ec5adb0ce98c37c8119feb972a5207e0e1721d9b",
  "patch_info": {
    "commit_hash": "ec5adb0ce98c37c8119feb972a5207e0e1721d9b",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/ec5adb0ce98c37c8119feb972a5207e0e1721d9b",
    "files": [
      "epan/tvbuff_composite.c"
    ],
    "message": "tvbuff_composite: fix buffer overflow due to wrong offset adjustment\n\nThe tvb_offset method should return the offset of the buffer within the\nbacking tvb (ds_tvb). The currently returned non-zero offset is valid\nfor tvbuff_subset.c, but not for the composite TVB. The backing tvb is\nthe tvb itself, so the offset should be zero (or \"counter\" for\nconsistency with tvbuff_real.c and others).\n\nThis bug is observable with the capture from the bug. In tshark, the\ndata field in the PDML output has value \"field length invalid!\" and the\nposition attribute (\"pos\") is too large. With the -V option it even\ncrashes with a buffer overflow (read). In the GUI, the bytes tab shows\nrange 3199-19642 even if the data source is only 16444 bytes while the\nselection should have been 0-16443.\n\nBug: 14466\nChange-Id: I01399ff500321dba262eb60b67c4cddb173b4679\nReviewed-on: https://code.wireshark.org/review/30124\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/tvbuff_composite.c||epan/tvbuff_composite.c"
    ]
  },
  "patch_diff": {
    "epan/tvbuff_composite.c||epan/tvbuff_composite.c": [
      "File: epan/tvbuff_composite.c -> epan/tvbuff_composite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "51: }",
      "53: static guint",
      "55: {",
      "60: }",
      "62: static const guint8*",
      "",
      "[Removed Lines]",
      "54: composite_offset(const tvbuff_t *tvb, const guint counter)",
      "56:  const struct tvb_composite *composite_tvb = (const struct tvb_composite *) tvb;",
      "57:  const tvbuff_t *member = (const tvbuff_t *)composite_tvb->composite.tvbs->data;",
      "59:  return tvb_offset_from_real_beginning_counter(member, counter);",
      "",
      "[Added Lines]",
      "54: composite_offset(const tvbuff_t *tvb _U_, const guint counter)",
      "56:  return counter;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f489f8f2c4506945f9ffbc8cf1b609b6db56ab10",
      "candidate_info": {
        "commit_hash": "f489f8f2c4506945f9ffbc8cf1b609b6db56ab10",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f489f8f2c4506945f9ffbc8cf1b609b6db56ab10",
        "files": [
          "epan/tvbuff_composite.c"
        ],
        "message": "tvbuff_composite: fix buffer overflow due to wrong offset adjustment\n\nThe tvb_offset method should return the offset of the buffer within the\nbacking tvb (ds_tvb). The currently returned non-zero offset is valid\nfor tvbuff_subset.c, but not for the composite TVB. The backing tvb is\nthe tvb itself, so the offset should be zero (or \"counter\" for\nconsistency with tvbuff_real.c and others).\n\nThis bug is observable with the capture from the bug. In tshark, the\ndata field in the PDML output has value \"field length invalid!\" and the\nposition attribute (\"pos\") is too large. With the -V option it even\ncrashes with a buffer overflow (read). In the GUI, the bytes tab shows\nrange 3199-19642 even if the data source is only 16444 bytes while the\nselection should have been 0-16443.\n\nBug: 14466\nChange-Id: I01399ff500321dba262eb60b67c4cddb173b4679\nReviewed-on: https://code.wireshark.org/review/30124\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit ec5adb0ce98c37c8119feb972a5207e0e1721d9b)\nReviewed-on: https://code.wireshark.org/review/30152\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
        "before_after_code_files": [
          "epan/tvbuff_composite.c||epan/tvbuff_composite.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/tvbuff_composite.c||epan/tvbuff_composite.c"
          ],
          "candidate": [
            "epan/tvbuff_composite.c||epan/tvbuff_composite.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/tvbuff_composite.c||epan/tvbuff_composite.c": [
          "File: epan/tvbuff_composite.c -> epan/tvbuff_composite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: }",
          "53: static guint",
          "55: {",
          "60: }",
          "62: static const guint8*",
          "",
          "[Removed Lines]",
          "54: composite_offset(const tvbuff_t *tvb, const guint counter)",
          "56:  const struct tvb_composite *composite_tvb = (const struct tvb_composite *) tvb;",
          "57:  const tvbuff_t *member = (const tvbuff_t *)composite_tvb->composite.tvbs->data;",
          "59:  return tvb_offset_from_real_beginning_counter(member, counter);",
          "",
          "[Added Lines]",
          "54: composite_offset(const tvbuff_t *tvb _U_, const guint counter)",
          "56:  return counter;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc4d209f39132a4ae05675a11609176ae9705cfc",
      "candidate_info": {
        "commit_hash": "dc4d209f39132a4ae05675a11609176ae9705cfc",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/dc4d209f39132a4ae05675a11609176ae9705cfc",
        "files": [
          "epan/tvbuff_composite.c"
        ],
        "message": "tvbuff_composite: fix buffer overflow due to wrong offset adjustment\n\nThe tvb_offset method should return the offset of the buffer within the\nbacking tvb (ds_tvb). The currently returned non-zero offset is valid\nfor tvbuff_subset.c, but not for the composite TVB. The backing tvb is\nthe tvb itself, so the offset should be zero (or \"counter\" for\nconsistency with tvbuff_real.c and others).\n\nThis bug is observable with the capture from the bug. In tshark, the\ndata field in the PDML output has value \"field length invalid!\" and the\nposition attribute (\"pos\") is too large. With the -V option it even\ncrashes with a buffer overflow (read). In the GUI, the bytes tab shows\nrange 3199-19642 even if the data source is only 16444 bytes while the\nselection should have been 0-16443.\n\nBug: 14466\nChange-Id: I01399ff500321dba262eb60b67c4cddb173b4679\nReviewed-on: https://code.wireshark.org/review/30124\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit ec5adb0ce98c37c8119feb972a5207e0e1721d9b)\nReviewed-on: https://code.wireshark.org/review/30153\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
        "before_after_code_files": [
          "epan/tvbuff_composite.c||epan/tvbuff_composite.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/tvbuff_composite.c||epan/tvbuff_composite.c"
          ],
          "candidate": [
            "epan/tvbuff_composite.c||epan/tvbuff_composite.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/tvbuff_composite.c||epan/tvbuff_composite.c": [
          "File: epan/tvbuff_composite.c -> epan/tvbuff_composite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: }",
          "65: static guint",
          "67: {",
          "72: }",
          "74: static const guint8*",
          "",
          "[Removed Lines]",
          "66: composite_offset(const tvbuff_t *tvb, const guint counter)",
          "68:  const struct tvb_composite *composite_tvb = (const struct tvb_composite *) tvb;",
          "69:  const tvbuff_t *member = (const tvbuff_t *)composite_tvb->composite.tvbs->data;",
          "71:  return tvb_offset_from_real_beginning_counter(member, counter);",
          "",
          "[Added Lines]",
          "66: composite_offset(const tvbuff_t *tvb _U_, const guint counter)",
          "68:  return counter;",
          "",
          "---------------"
        ]
      }
    }
  ]
}