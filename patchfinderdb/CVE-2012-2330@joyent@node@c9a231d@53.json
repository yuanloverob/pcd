{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55ef9ef6809d97e9c0c65d2b8f55d993bd8c5f13",
      "candidate_info": {
        "commit_hash": "55ef9ef6809d97e9c0c65d2b8f55d993bd8c5f13",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/55ef9ef6809d97e9c0c65d2b8f55d993bd8c5f13",
        "files": [
          "src/stream_wrap.cc",
          "test/simple/test-net-resume-pause.js"
        ],
        "message": "Revert \"Check if a stream has a valid fd before read_start\"\n\nuv_stream_t.fd is a private field which exists only on unix.\nThis reverts commit 8d5c1201f24a6102d047bd7ec70f30da70a5ea64.",
        "before_after_code_files": [
          "src/stream_wrap.cc||src/stream_wrap.cc",
          "test/simple/test-net-resume-pause.js||test/simple/test-net-resume-pause.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/stream_wrap.cc||src/stream_wrap.cc": [
          "File: src/stream_wrap.cc -> src/stream_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   UNWRAP(StreamWrap)",
          "139:   bool ipc_pipe = wrap->stream_->type == UV_NAMED_PIPE &&",
          "140:                   ((uv_pipe_t*)wrap->stream_)->ipc;",
          "141:   int r;",
          "",
          "[Removed Lines]",
          "137:   if (wrap->stream_->fd < 0) return scope.Close(Integer::New(1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-resume-pause.js||test/simple/test-net-resume-pause.js": [
          "File: test/simple/test-net-resume-pause.js -> test/simple/test-net-resume-pause.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71078f91ed096c9aa687b5a6e556822769692c76",
      "candidate_info": {
        "commit_hash": "71078f91ed096c9aa687b5a6e556822769692c76",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/71078f91ed096c9aa687b5a6e556822769692c76",
        "files": [
          "src/node_version.h"
        ],
        "message": "Now working on 0.8.3",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define NODE_MAJOR_VERSION 0",
          "26: #define NODE_MINOR_VERSION 8",
          "30: #ifndef NODE_STRINGIFY",
          "31: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "27: #define NODE_PATCH_VERSION 2",
          "28: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "[Added Lines]",
          "27: #define NODE_PATCH_VERSION 3",
          "28: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22d7fe12067be32ac456045f8f2014526e4aabb4",
      "candidate_info": {
        "commit_hash": "22d7fe12067be32ac456045f8f2014526e4aabb4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/22d7fe12067be32ac456045f8f2014526e4aabb4",
        "files": [
          "lib/events.js",
          "test/simple/test-event-emitter-check-listener-leaks.js"
        ],
        "message": "events: fix checking max listeners with `1`\n\nFixes #2490.",
        "before_after_code_files": [
          "lib/events.js||lievents.js",
          "test/simple/test-event-emitter-check-listener-leaks.js||test/simple/test-event-emitter-check-listener-leaks.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lievents.js": [
          "File: lib/events.js -> lievents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     this._events[type].push(listener);",
          "136:   } else {",
          "138:     this._events[type] = [this._events[type], listener];",
          "139:   }",
          "141:   return this;",
          "",
          "[Removed Lines]",
          "119:     if (!this._events[type].warned) {",
          "120:       var m;",
          "121:       if (this._maxListeners !== undefined) {",
          "122:         m = this._maxListeners;",
          "123:       } else {",
          "124:         m = defaultMaxListeners;",
          "125:       }",
          "127:       if (m && m > 0 && this._events[type].length > m) {",
          "128:         this._events[type].warned = true;",
          "129:         console.error('(node) warning: possible EventEmitter memory ' +",
          "130:                       'leak detected. %d listeners added. ' +",
          "131:                       'Use emitter.setMaxListeners() to increase limit.',",
          "132:                       this._events[type].length);",
          "133:         console.trace();",
          "134:       }",
          "135:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-event-emitter-check-listener-leaks.js||test/simple/test-event-emitter-check-listener-leaks.js": [
          "File: test/simple/test-event-emitter-check-listener-leaks.js -> test/simple/test-event-emitter-check-listener-leaks.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: e.on('specific', function() {});",
          "42: assert.ok(e._events['specific'].warned);",
          "45: e.setMaxListeners(0);",
          "46: for (var i = 0; i < 1000; i++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: e.setMaxListeners(1);",
          "46: e.on('only one', function() {});",
          "47: assert.ok(!e._events['only one'].hasOwnProperty('warned'));",
          "48: e.on('only one', function() {});",
          "49: assert.ok(e._events['only one'].hasOwnProperty('warned'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed111975a096cb44a7d737e46c6e0c73025e0670",
      "candidate_info": {
        "commit_hash": "ed111975a096cb44a7d737e46c6e0c73025e0670",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ed111975a096cb44a7d737e46c6e0c73025e0670",
        "files": [
          "lib/dgram.js"
        ],
        "message": "dgram: make setMulticastTTL() conform to v0.4 API\n\n- throw if the ttl argument is not a number\n- return the ttl argument (not particulary useful but it's what v0.4 did)\n\nNote that the 0 < ttl < 256 check has *not* been reinstated. On Linux, -1 is a\nvalid argument to setsockopt(IPPROTO_IP, IP_TTL).",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "239: Socket.prototype.setMulticastTTL = function(arg) {",
          "241:     throw errnoException(errno, 'setMulticastTTL');",
          "242:   }",
          "245: };",
          "",
          "[Removed Lines]",
          "240:   if (this._handle.setMulticastTTL(arg) == -1) {",
          "244:   return true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30e462e91937ced3847af3fe9c393ebd32294b68",
      "candidate_info": {
        "commit_hash": "30e462e91937ced3847af3fe9c393ebd32294b68",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/30e462e91937ced3847af3fe9c393ebd32294b68",
        "files": [
          "lib/net.js",
          "test/simple/test-cluster-bind-twice-v1.js",
          "test/simple/test-cluster-bind-twice-v2.js",
          "test/simple/test-cluster-bind-twice.js"
        ],
        "message": "cluster: propagate bind errors\n\nThis commit fixes a bug where the cluster module failed to propagate EADDRINUSE\nerrors.\n\nWhen a worker starts a (net, http) server, it requests the listen socket from\nits master who then creates and binds the socket.\n\nNow, OS X and Windows don't always signal EADDRINUSE from bind() but instead\ndefer the error until a later syscall. libuv mimics this behaviour to provide\nconsistent behaviour across platforms but that means the worker could end up\nwith a socket that is not actually bound to the requested addresss.\n\nThat's why the worker now checks if the socket is bound, raising EADDRINUSE if\nthat's not the case.\n\nFixes #2721.",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-cluster-bind-twice-v2.js||test/simple/test-cluster-bind-twice-v2.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "758: function listen(self, address, port, addressType) {",
          "765:     self._listen2(address, port, addressType);",
          "766:   }",
          "767: }",
          "",
          "[Removed Lines]",
          "759:   if (process.env.NODE_WORKER_ID) {",
          "760:     require('cluster')._getServer(address, port, addressType, function(handle) {",
          "761:       self._handle = handle;",
          "762:       self._listen2(address, port, addressType);",
          "763:     });",
          "764:   } else {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-cluster-bind-twice-v2.js||test/simple/test-cluster-bind-twice-v2.js": [
          "File: test/simple/test-cluster-bind-twice-v2.js -> test/simple/test-cluster-bind-twice-v2.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: var common = require('../common');",
          "42: var assert = require('assert');",
          "43: var cluster = require('cluster');",
          "44: var fork = require('child_process').fork;",
          "45: var http = require('http');",
          "47: var id = process.argv[2];",
          "49: if (!id) {",
          "50:   var a = fork(__filename, ['one']);",
          "51:   var b = fork(__filename, ['two']);",
          "53:   a.on('message', function(m) {",
          "54:     if (typeof m === 'object') return;",
          "55:     assert.equal(m, 'READY');",
          "56:     b.send('START');",
          "57:   });",
          "59:   var ok = false;",
          "61:   b.on('message', function(m) {",
          "62:     if (typeof m === 'object') return; // ignore system messages",
          "63:     assert.equal(m, 'EADDRINUSE');",
          "64:     a.kill();",
          "65:     b.kill();",
          "66:     ok = true;",
          "67:   });",
          "69:   process.on('exit', function() {",
          "70:     a.kill();",
          "71:     b.kill();",
          "72:     assert(ok);",
          "73:   });",
          "74: }",
          "75: else if (id === 'one') {",
          "76:   if (cluster.isMaster) return startWorker();",
          "78:   http.createServer(assert.fail).listen(common.PORT, function() {",
          "79:     process.send('READY');",
          "80:   });",
          "81: }",
          "82: else if (id === 'two') {",
          "83:   if (cluster.isMaster) return startWorker();",
          "85:   var ok = false;",
          "86:   process.on('SIGTERM', process.exit);",
          "87:   process.on('exit', function() {",
          "88:     assert(ok);",
          "89:   });",
          "91:   process.on('message', function(m) {",
          "92:     if (typeof m === 'object') return; // ignore system messages",
          "93:     assert.equal(m, 'START');",
          "94:     var server = http.createServer(assert.fail);",
          "95:     server.listen(common.PORT, assert.fail);",
          "96:     server.on('error', function(e) {",
          "97:       assert.equal(e.code, 'EADDRINUSE');",
          "98:       process.send(e.code);",
          "99:       ok = true;",
          "100:     });",
          "101:   });",
          "102: }",
          "103: else {",
          "104:   assert(0); // bad command line argument",
          "105: }",
          "107: function startWorker() {",
          "108:   var worker = cluster.fork();",
          "109:   worker.on('message', process.send);",
          "110:   process.on('message', worker.send.bind(worker));",
          "111:   process.on('SIGTERM', function() {",
          "112:     worker.kill();",
          "113:     process.exit();",
          "114:   });",
          "115: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}