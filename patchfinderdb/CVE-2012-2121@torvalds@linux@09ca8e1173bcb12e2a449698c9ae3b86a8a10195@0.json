{
  "cve_id": "CVE-2012-2121",
  "cve_desc": "The KVM implementation in the Linux kernel before 3.3.4 does not properly manage the relationships between memory slots and the iommu, which allows guest OS users to cause a denial of service (memory leak and host OS crash) by leveraging administrative access to the guest OS to conduct hotunplug and hotplug operations on devices.",
  "repo": "torvalds/linux",
  "patch_hash": "09ca8e1173bcb12e2a449698c9ae3b86a8a10195",
  "patch_info": {
    "commit_hash": "09ca8e1173bcb12e2a449698c9ae3b86a8a10195",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/09ca8e1173bcb12e2a449698c9ae3b86a8a10195",
    "files": [
      "include/linux/kvm_host.h",
      "virt/kvm/iommu.c",
      "virt/kvm/kvm_main.c"
    ],
    "message": "KVM: unmap pages from the iommu when slots are removed\n\ncommit 32f6daad4651a748a58a3ab6da0611862175722f upstream.\n\nWe've been adding new mappings, but not destroying old mappings.\nThis can lead to a page leak as pages are pinned using\nget_user_pages, but only unpinned with put_page if they still\nexist in the memslots list on vm shutdown.  A memslot that is\ndestroyed while an iommu domain is enabled for the guest will\ntherefore result in an elevated page reference count that is\nnever cleared.\n\nAdditionally, without this fix, the iommu is only programmed\nwith the first translation for a gpa.  This can result in\npeer-to-peer errors if a mapping is destroyed and replaced by a\nnew mapping at the same gpa as the iommu will still be pointing\nto the original, pinned memory address.\n\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "before_after_code_files": [
      "include/linux/kvm_host.h||include/linux/kvm_host.h",
      "virt/kvm/iommu.c||virt/kvm/iommu.c",
      "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
    ]
  },
  "patch_diff": {
    "include/linux/kvm_host.h||include/linux/kvm_host.h": [
      "File: include/linux/kvm_host.h -> include/linux/kvm_host.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "594: #ifdef CONFIG_IOMMU_API",
      "595: int kvm_iommu_map_pages(struct kvm *kvm, struct kvm_memory_slot *slot);",
      "596: int kvm_iommu_map_guest(struct kvm *kvm);",
      "597: int kvm_iommu_unmap_guest(struct kvm *kvm);",
      "598: int kvm_assign_device(struct kvm *kvm,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596: void kvm_iommu_unmap_pages(struct kvm *kvm, struct kvm_memory_slot *slot);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "606:  return 0;",
      "607: }",
      "609: static inline int kvm_iommu_map_guest(struct kvm *kvm)",
      "610: {",
      "611:  return -ENODEV;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "610: static inline void kvm_iommu_unmap_pages(struct kvm *kvm,",
      "611:       struct kvm_memory_slot *slot)",
      "612: {",
      "613: }",
      "",
      "---------------"
    ],
    "virt/kvm/iommu.c||virt/kvm/iommu.c": [
      "File: virt/kvm/iommu.c -> virt/kvm/iommu.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "310:  }",
      "311: }",
      "313: static int kvm_iommu_unmap_memslots(struct kvm *kvm)",
      "314: {",
      "315:  int idx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "313: void kvm_iommu_unmap_pages(struct kvm *kvm, struct kvm_memory_slot *slot)",
      "314: {",
      "315:  kvm_iommu_put_pages(kvm, slot->base_gfn, slot->npages);",
      "316: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "320:  slots = kvm_memslots(kvm);",
      "322:  kvm_for_each_memslot(memslot, slots)",
      "325:  srcu_read_unlock(&kvm->srcu, idx);",
      "",
      "[Removed Lines]",
      "323:   kvm_iommu_put_pages(kvm, memslot->base_gfn, memslot->npages);",
      "",
      "[Added Lines]",
      "328:   kvm_iommu_unmap_pages(kvm, memslot);",
      "",
      "---------------"
    ],
    "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c": [
      "File: virt/kvm/kvm_main.c -> virt/kvm/kvm_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "873:  if (r)",
      "874:   goto out_free;",
      "877:  if (npages) {",
      "878:   r = kvm_iommu_map_pages(kvm, &new);",
      "879:   if (r)",
      "880:    goto out_free;",
      "883:  r = -ENOMEM;",
      "884:  slots = kmemdup(kvm->memslots, sizeof(struct kvm_memslots),",
      "",
      "[Removed Lines]",
      "881:  }",
      "",
      "[Added Lines]",
      "881:  } else",
      "882:   kvm_iommu_unmap_pages(kvm, &old);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32f6daad4651a748a58a3ab6da0611862175722f",
      "candidate_info": {
        "commit_hash": "32f6daad4651a748a58a3ab6da0611862175722f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/32f6daad4651a748a58a3ab6da0611862175722f",
        "files": [
          "include/linux/kvm_host.h",
          "virt/kvm/iommu.c",
          "virt/kvm/kvm_main.c"
        ],
        "message": "KVM: unmap pages from the iommu when slots are removed\n\nWe've been adding new mappings, but not destroying old mappings.\nThis can lead to a page leak as pages are pinned using\nget_user_pages, but only unpinned with put_page if they still\nexist in the memslots list on vm shutdown.  A memslot that is\ndestroyed while an iommu domain is enabled for the guest will\ntherefore result in an elevated page reference count that is\nnever cleared.\n\nAdditionally, without this fix, the iommu is only programmed\nwith the first translation for a gpa.  This can result in\npeer-to-peer errors if a mapping is destroyed and replaced by a\nnew mapping at the same gpa as the iommu will still be pointing\nto the original, pinned memory address.\n\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>\nSigned-off-by: Marcelo Tosatti <mtosatti@redhat.com>",
        "before_after_code_files": [
          "include/linux/kvm_host.h||include/linux/kvm_host.h",
          "virt/kvm/iommu.c||virt/kvm/iommu.c",
          "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "include/linux/kvm_host.h||include/linux/kvm_host.h",
            "virt/kvm/iommu.c||virt/kvm/iommu.c",
            "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
          ],
          "candidate": [
            "include/linux/kvm_host.h||include/linux/kvm_host.h",
            "virt/kvm/iommu.c||virt/kvm/iommu.c",
            "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/kvm_host.h||include/linux/kvm_host.h": [
          "File: include/linux/kvm_host.h -> include/linux/kvm_host.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "597: #ifdef CONFIG_IOMMU_API",
          "598: int kvm_iommu_map_pages(struct kvm *kvm, struct kvm_memory_slot *slot);",
          "599: int kvm_iommu_map_guest(struct kvm *kvm);",
          "600: int kvm_iommu_unmap_guest(struct kvm *kvm);",
          "601: int kvm_assign_device(struct kvm *kvm,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "599: void kvm_iommu_unmap_pages(struct kvm *kvm, struct kvm_memory_slot *slot);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "609:  return 0;",
          "610: }",
          "612: static inline int kvm_iommu_map_guest(struct kvm *kvm)",
          "613: {",
          "614:  return -ENODEV;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613: static inline void kvm_iommu_unmap_pages(struct kvm *kvm,",
          "614:       struct kvm_memory_slot *slot)",
          "615: {",
          "616: }",
          "",
          "---------------"
        ],
        "virt/kvm/iommu.c||virt/kvm/iommu.c": [
          "File: virt/kvm/iommu.c -> virt/kvm/iommu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:  }",
          "311: }",
          "313: static int kvm_iommu_unmap_memslots(struct kvm *kvm)",
          "314: {",
          "315:  int idx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313: void kvm_iommu_unmap_pages(struct kvm *kvm, struct kvm_memory_slot *slot)",
          "314: {",
          "315:  kvm_iommu_put_pages(kvm, slot->base_gfn, slot->npages);",
          "316: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:  slots = kvm_memslots(kvm);",
          "322:  kvm_for_each_memslot(memslot, slots)",
          "325:  srcu_read_unlock(&kvm->srcu, idx);",
          "",
          "[Removed Lines]",
          "323:   kvm_iommu_put_pages(kvm, memslot->base_gfn, memslot->npages);",
          "",
          "[Added Lines]",
          "328:   kvm_iommu_unmap_pages(kvm, memslot);",
          "",
          "---------------"
        ],
        "virt/kvm/kvm_main.c||virt/kvm/kvm_main.c": [
          "File: virt/kvm/kvm_main.c -> virt/kvm/kvm_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "808:  if (r)",
          "809:   goto out_free;",
          "812:  if (npages) {",
          "813:   r = kvm_iommu_map_pages(kvm, &new);",
          "814:   if (r)",
          "815:    goto out_free;",
          "818:  r = -ENOMEM;",
          "819:  slots = kmemdup(kvm->memslots, sizeof(struct kvm_memslots),",
          "",
          "[Removed Lines]",
          "816:  }",
          "",
          "[Added Lines]",
          "816:  } else",
          "817:   kvm_iommu_unmap_pages(kvm, &old);",
          "",
          "---------------"
        ]
      }
    }
  ]
}