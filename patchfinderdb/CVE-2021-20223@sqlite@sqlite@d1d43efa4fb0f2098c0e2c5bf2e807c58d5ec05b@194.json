{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ca7d3e1d4290fda5887b91c2afbc5d85c39c7d1f",
      "candidate_info": {
        "commit_hash": "ca7d3e1d4290fda5887b91c2afbc5d85c39c7d1f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ca7d3e1d4290fda5887b91c2afbc5d85c39c7d1f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Remove an incorrect assert().  Fix for ticket [614b25314c766238]\n\nFossilOrigin-Name: 6a999c5aa0d1d5569a5bda50d27e3a15c13e93e69d00db97c5294901522064a3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fd7bcc53524096f5245e5ae04c12780d2c43b9b3af17ec529447aed21b82cc2b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2156:         if( pAndExpr ){",
          "2157:           pAndExpr->pLeft = pOrExpr;",
          "2158:           pOrExpr = pAndExpr;",
          "",
          "[Removed Lines]",
          "2153:         assert( (pTabItem[0].fg.jointype & JT_LEFT)==0",
          "2154:              || ExprHasProperty(pOrExpr, EP_FromJoin)",
          "2155:         );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db7ab53f9c30e2e22731ace93ab6b18eef6c4ae",
      "candidate_info": {
        "commit_hash": "4db7ab53f9c30e2e22731ace93ab6b18eef6c4ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4db7ab53f9c30e2e22731ace93ab6b18eef6c4ae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab.test"
        ],
        "message": "Do not suppress errors when resolving references in an ORDER BY clause belonging to a compound SELECT within a view or trigger within ALTER TABLE. Fix for ticket [a10a14e9b4ba2].\n\nFossilOrigin-Name: 684293882c302600e112cf52553c19d84fdb31663d96e5dd7f8ac17dda00a026",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d09f8c3621d5f7f8c6d99d7d82bcaa8421855b3f470bea2b26c858106382b906",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1193:   nc.nErr = 0;",
          "1194:   db = pParse->db;",
          "1195:   savedSuppErr = db->suppressErr;",
          "1197:   rc = sqlite3ResolveExprNames(&nc, pE);",
          "1198:   db->suppressErr = savedSuppErr;",
          "1199:   if( rc ) return 0;",
          "",
          "[Removed Lines]",
          "1196:   db->suppressErr = 1;",
          "",
          "[Added Lines]",
          "1196:   if( IN_RENAME_OBJECT==0 ) db->suppressErr = 1;",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: do_execsql_test 18.1.0 {",
          "595:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0)) WITHOUT ROWID;",
          "596: }",
          "598: do_execsql_test 18.1.1 {",
          "599:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "600: }",
          "",
          "[Removed Lines]",
          "597: breakpoint",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "636:   CREATE TABLE a(a);",
          "637:   CREATE VIEW b AS SELECT(SELECT *FROM c JOIN a USING(d, a, a, a) JOIN a) IN();",
          "638: }",
          "640: do_execsql_test 20.1 {",
          "641:   ALTER TABLE a RENAME a TO e;",
          "642: } {}",
          "644: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642: reset_db",
          "643: do_execsql_test 21.0 {",
          "644:   CREATE TABLE a(b);",
          "645:   CREATE VIEW c AS",
          "646:       SELECT NULL INTERSECT",
          "647:       SELECT NULL ORDER BY",
          "648:       likelihood(NULL, (d, (SELECT c)));",
          "649: } {}",
          "650: do_catchsql_test 21.1 {",
          "651:   SELECT likelihood(NULL, (d, (SELECT c)));",
          "652: } {1 {second argument to likelihood() must be a constant between 0.0 and 1.0}}",
          "653: do_catchsql_test 21.2 {",
          "654:   SELECT * FROM c;",
          "655: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "657: do_catchsql_test 21.3 {",
          "658:   ALTER TABLE a RENAME TO e;",
          "659: } {1 {error in view c: 1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf9d0996b91c158a1a0b2acda479da5380676509",
      "candidate_info": {
        "commit_hash": "bf9d0996b91c158a1a0b2acda479da5380676509",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bf9d0996b91c158a1a0b2acda479da5380676509",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Fix incorrect column-usage accounting associated with generated columns and added by check-in [6601da58032d18ae].  Fix for ticket [b92e5e8ec2cdbaa1].\n\nFossilOrigin-Name: 9d75e1ccc72e9f536f45df3b24e9ecd25076cc1f7cf16b806b19e0e1b68e8326",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 26d991f214db143976e2593d3564b5003eb3539a2728d1a0ccae2a2accece76f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:   if( pExpr->iColumn>=0 && pMatch!=0 ){",
          "568:     int n = pExpr->iColumn;",
          "569:     testcase( n==BMS-1 );",
          "570:     if( n>=BMS ){",
          "571:       n = BMS-1;",
          "572:     }",
          "574:     assert( pMatch->iCursor==pExpr->iTable );",
          "578:     }",
          "579:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "580:   }",
          "",
          "[Removed Lines]",
          "573:     assert( pExpr->y.pTab!=0 );",
          "575:     if( pExpr->y.pTab->tabFlags & TF_HasGenerated ){",
          "576:       Column *pColumn = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pColumn->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "",
          "[Added Lines]",
          "568:     Table *pTab;",
          "573:     pTab = pExpr->y.pTab;",
          "574:     assert( pTab!=0 );",
          "576:     if( pTab->tabFlags & TF_HasGenerated ){",
          "577:       Column *pColumn = pTab->aCol + pExpr->iColumn;",
          "578:       if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "579:         testcase( pTab->nCol==63 );",
          "580:         testcase( pTab->nCol==64 );",
          "581:         if( pTab->nCol>=64 ){",
          "582:           pMatch->colUsed = ALLBITS;",
          "583:         }else{",
          "584:           pMatch->colUsed = MASKBIT(pTab->nCol)-1;",
          "585:         }",
          "586:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f761d937c233ab7e1ac1a187a80c45846a8d1c52",
      "candidate_info": {
        "commit_hash": "f761d937c233ab7e1ac1a187a80c45846a8d1c52",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f761d937c233ab7e1ac1a187a80c45846a8d1c52",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "The OP_SeekScan opcode works, but using it requires disabling the IN-earlyout optimization because the OP_IfNoHope opcode might move the cursor.\n\nFossilOrigin-Name: f3c36b840c9a29c0add28039db216f4207a308e5057fc76e3f0004024a8267ac",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d720b6981eeb0ffdb14494ca63eca298ee724ae4ad4863c7c7cbfdad7fa52519",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4427: case OP_SeekScan: {",
          "4428:   assert( pOp[1].opcode==OP_SeekGE );",
          "4429:   assert( pOp[2].opcode==OP_IdxGT );",
          "4430:   assert( pOp[1].p1==pOp[2].p1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4428:   VdbeCursor *pC;",
          "4429:   int res;",
          "4430:   int n;",
          "4431:   UnpackedRecord r;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4432:   assert( pOp[1].p3==pOp[2].p3 );",
          "4433:   assert( pOp[1].p4.i==pOp[2].p4.i );",
          "4434:   assert( pOp->p1>0 );",
          "4436: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4440:   pC = p->apCsr[pOp[1].p1];",
          "4441:   assert( pC!=0 );",
          "4442:   assert( pC->eCurType==CURTYPE_BTREE );",
          "4443:   assert( !pC->isTable );",
          "4444:   if( pC->nullRow ){",
          "4445: #ifdef SQLITE_DEBUG",
          "4446:      if( db->flags&SQLITE_VdbeTrace ){",
          "4447:        printf(\"... no prior seeks - fall through\\n\");",
          "4448:      }",
          "4449: #endif",
          "4450:     break;",
          "4451:   }",
          "4452:   n = pOp->p1;",
          "4453:   assert( n>=1 );",
          "4454:   r.pKeyInfo = pC->pKeyInfo;",
          "4455:   r.nField = (u16)pOp[1].p4.i;",
          "4456:   r.default_rc = 0;",
          "4457:   r.aMem = &aMem[pOp[1].p3];",
          "4458: #ifdef SQLITE_DEBUG",
          "4459:   {",
          "4460:     int i;",
          "4461:     for(i=0; i<r.nField; i++){",
          "4462:       assert( memIsValid(&r.aMem[i]) );",
          "4463:       REGISTER_TRACE(pOp[1].p3+i, &aMem[pOp[1].p3+i]);",
          "4464:     }",
          "4465:   }",
          "4466: #endif",
          "4468:   while(1){",
          "4469:     rc = sqlite3VdbeIdxKeyCompare(db, pC, &r, &res);",
          "4470:     if( rc ) goto abort_due_to_error;",
          "4471:     if( res>0 ){",
          "4472: #ifdef SQLITE_DEBUG",
          "4473:      if( db->flags&SQLITE_VdbeTrace ){",
          "4474:        printf(\"... %d steps and then skip\\n\", pOp->p1 - n);",
          "4475:      }",
          "4476: #endif",
          "4477:       pOp++;",
          "4478:       goto jump_to_p2;",
          "4479:     }",
          "4480:     if( res==0 ){",
          "4481: #ifdef SQLITE_DEBUG",
          "4482:      if( db->flags&SQLITE_VdbeTrace ){",
          "4483:        printf(\"... %d steps and then success\\n\", pOp->p1 - n);",
          "4484:      }",
          "4485: #endif",
          "4486:       pOp += 2;",
          "4487:       break;",
          "4488:     }",
          "4489:     if( n<=0 ) break;",
          "4490:     n--;",
          "4491:     rc = sqlite3BtreeNext(pC->uc.pCursor, 0);",
          "4492:     if( rc ) goto abort_due_to_error;",
          "4493:   }",
          "4494:   break;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5360:         sqlite3VdbeJumpHere(v, pIn->addrInTop+1);",
          "5361:         if( pIn->eEndLoopOp!=OP_Noop ){",
          "5362:           if( pIn->nPrefix ){",
          "5364:             if( pLevel->iLeftJoin ){",
          "",
          "[Removed Lines]",
          "5363:             assert( pLoop->wsFlags & WHERE_IN_EARLYOUT );",
          "",
          "[Added Lines]",
          "5363:             int bEarlyOut =",
          "5364:                 (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0",
          "5365:                  && (pLoop->wsFlags & WHERE_IN_EARLYOUT)!=0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5373:               sqlite3VdbeAddOp2(v, OP_IfNotOpen, pIn->iCur,",
          "5377:               VdbeCoverage(v);",
          "5378:             }",
          "5380:               sqlite3VdbeAddOp4Int(v, OP_IfNoHope, pLevel->iIdxCur,",
          "5381:                   sqlite3VdbeCurrentAddr(v)+2,",
          "5382:                   pIn->iBase, pIn->nPrefix);",
          "",
          "[Removed Lines]",
          "5374:                   sqlite3VdbeCurrentAddr(v) + 2 +",
          "5375:                      ((pLoop->wsFlags & WHERE_VIRTUALTABLE)==0)",
          "5376:               );",
          "5379:             if( (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ){",
          "",
          "[Added Lines]",
          "5376:                   sqlite3VdbeCurrentAddr(v) + 2 + bEarlyOut);",
          "5379:             if( bEarlyOut ){",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:     if( pLevel->u.in.nIn==0 ){",
          "571:       pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "572:     }",
          "574:       pLoop->wsFlags |= WHERE_IN_EARLYOUT;",
          "575:     }",
          "",
          "[Removed Lines]",
          "573:     if( iEq>0 ){",
          "",
          "[Added Lines]",
          "573:     if( iEq>0 && (pLoop->wsFlags && WHERE_IN_SEEKSCAN)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1911:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1912:     }",
          "1915:       sqlite3VdbeAddOp3(v, OP_SeekHit, iIdxCur, nEq, nEq);",
          "1916:     }",
          "",
          "[Removed Lines]",
          "1914:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "",
          "[Added Lines]",
          "1914:     if( (pLoop->wsFlags & WHERE_IN_EARLYOUT)!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18ef40e563e12e58402f87e5e5710001005da0d8",
      "candidate_info": {
        "commit_hash": "18ef40e563e12e58402f87e5e5710001005da0d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/18ef40e563e12e58402f87e5e5710001005da0d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Fix harmless compiler warnings in Lemon.\n\nFossilOrigin-Name: 6c94ba4b1c16b676978808dcb24f63c2f22915af5dcfe9f635c037011affcf4b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3d35fa0be866213274fc09250225b345f6b08a9b4ec373d53d95e627e24512be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1593: static struct rule *Rule_sort(struct rule *rp){",
          "1595:   struct rule *pNext;",
          "1596:   struct rule *x[32];",
          "1597:   memset(x, 0, sizeof(x));",
          "",
          "[Removed Lines]",
          "1594:   int i;",
          "",
          "[Added Lines]",
          "1594:   unsigned int i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1625: }",
          "1630:   static int version = 0;",
          "1631:   static int rpflag = 0;",
          "1632:   static int basisflag = 0;",
          "",
          "[Removed Lines]",
          "1628: int main(int argc, char **argv)",
          "1629: {",
          "",
          "[Added Lines]",
          "1628: int main(int argc, char **argv){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1669:   struct lemon lem;",
          "1670:   struct rule *rp;",
          "1672:   OptInit(argv,options,stderr);",
          "1673:   if( version ){",
          "1674:      printf(\"Lemon version 1.0\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1671:   (void)argc;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:       return yy_default[stateno];",
          "561:     }else{",
          "563:       return yy_action[i];",
          "564:     }",
          "565:   }while(1);",
          "",
          "[Removed Lines]",
          "562:       assert( i>=0 && i<sizeof(yy_action)/sizeof(yy_action[0]) );",
          "",
          "[Added Lines]",
          "562:       assert( i>=0 && i<(int)(sizeof(yy_action)/sizeof(yy_action[0])) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}