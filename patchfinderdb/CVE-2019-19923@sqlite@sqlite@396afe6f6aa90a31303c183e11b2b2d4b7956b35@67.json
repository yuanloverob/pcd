{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
      "candidate_info": {
        "commit_hash": "d0c51d1a041966bccc598d114aa17a13cf64d662",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d0c51d1a041966bccc598d114aa17a13cf64d662",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Do not allow shadow tables to be dropped in defensive mode.\n\nFossilOrigin-Name: 70390bbca49e706649ca5b7c031f0baf416fc38798c17e5f3b73746b3e66e3b5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0adb273f7e7671efb0e0a1619887e369500dfd2db7ef1b1e125c2414ea96e96f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2894:   sqliteViewResetAll(db, iDb);",
          "2895: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2900: static int tableMayNotBeDropped(Parse *pParse, Table *pTab){",
          "2901:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0 ){",
          "2902:     if( sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)==0 ) return 0;",
          "2903:     if( sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)==0 ) return 0;",
          "2904:     return 1;",
          "2905:   }",
          "2906:   if( pTab->tabFlags & TF_Shadow ){",
          "2907:     sqlite3 *db = pParse->db;",
          "2908:     if( (db->flags & SQLITE_Defensive)!=0 && db->nVdbeExec==0 ) return 1;",
          "2909:   }",
          "2910:   return 0;",
          "2911: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2963:     }",
          "2964:   }",
          "2965: #endif",
          "2969:     sqlite3ErrorMsg(pParse, \"table %s may not be dropped\", pTab->zName);",
          "2970:     goto exit_drop_table;",
          "2971:   }",
          "",
          "[Removed Lines]",
          "2966:   if( sqlite3StrNICmp(pTab->zName, \"sqlite_\", 7)==0",
          "2967:     && sqlite3StrNICmp(pTab->zName+7, \"stat\", 4)!=0",
          "2968:     && sqlite3StrNICmp(pTab->zName+7, \"parameters\", 10)!=0 ){",
          "",
          "[Added Lines]",
          "2982:   if( tableMayNotBeDropped(pParse, pTab) ){",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "542:     CREATE VIRTUAL TABLE y1 USING fts3;",
          "543:   }",
          "546:     INSERT INTO y1_segments VALUES(1, X'1234567890');",
          "547:   } {1 {table y1_segments may not be modified}}",
          "550:     ALTER TABLE y1_segments RENAME TO abc;",
          "551:   } {1 {table y1_segments may not be altered}}",
          "554:     ALTER TABLE y1 RENAME TO z1;",
          "555:   }",
          "558:     SELECT * FROM z1_segments;",
          "559:   }",
          "560: }",
          "",
          "[Removed Lines]",
          "545:   do_catchsql_test 16.1 {",
          "549:   do_catchsql_test 16.2 {",
          "553:   do_execsql_test 16.3 {",
          "557:   do_execsql_test 16.4 {",
          "",
          "[Added Lines]",
          "545:   do_catchsql_test 16.10 {",
          "549:   do_catchsql_test 16.20 {",
          "553:   do_catchsql_test 16.21 {",
          "554:     DROP TABLE y1_segments;",
          "555:   } {1 {table y1_segments may not be dropped}}",
          "557:   do_execsql_test 16.30 {",
          "561:   do_execsql_test 16.40 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
      "candidate_info": {
        "commit_hash": "8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8a7e11fb7894e286ac9f66ff93a6c8b0668e954a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/index.test"
        ],
        "message": "Avoid unwelcomed side effects on the input operands in the OP_Concat operator.  Fix for ticket [3be1295b264be2fac49b681]\n\nFossilOrigin-Name: 713caa382cf7ddef872e510a76a5fca40be1a8d8876ce2f91b632bb0810a6630",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 09623cc4cc82e3c123d1fd5d88b2f4b50ec5f2cc7e579a7203258bf0c246a74f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   }",
          "196: #endif",
          "",
          "[Removed Lines]",
          "202: #define Stringify(P, enc) \\",
          "203:    if(((P)->flags&(MEM_Str|MEM_Blob))==0 && sqlite3VdbeMemStringify(P,enc,0)) \\",
          "204:      { goto no_mem; }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1468:   pIn1 = &aMem[pOp->p1];",
          "1469:   pIn2 = &aMem[pOp->p2];",
          "1470:   pOut = &aMem[pOp->p3];",
          "1471:   assert( pIn1!=pOut );",
          "1473:     sqlite3VdbeMemSetNull(pOut);",
          "1474:     break;",
          "1475:   }",
          "1479:   nByte = pIn1->n + pIn2->n;",
          "1480:   if( nByte>db->aLimit[SQLITE_LIMIT_LENGTH] ){",
          "1481:     goto too_big;",
          "",
          "[Removed Lines]",
          "1466:   i64 nByte;",
          "1472:   if( (pIn1->flags | pIn2->flags) & MEM_Null ){",
          "1476:   if( ExpandBlob(pIn1) || ExpandBlob(pIn2) ) goto no_mem;",
          "1477:   Stringify(pIn1, encoding);",
          "1478:   Stringify(pIn2, encoding);",
          "",
          "[Added Lines]",
          "1465:   testcase( pIn1==pIn2 );",
          "1466:   testcase( pOut==pIn2 );",
          "1468:   flags1 = pIn1->flags;",
          "1469:   testcase( flags1 & MEM_Null );",
          "1470:   testcase( pIn2->flags & MEM_Null );",
          "1471:   if( (flags1 | pIn2->flags) & MEM_Null ){",
          "1475:   if( (flags1 & (MEM_Str|MEM_Blob))==0 ){",
          "1476:     if( sqlite3VdbeMemStringify(pIn1,encoding,0) ) goto no_mem;",
          "1477:   }else if( (flags1 & MEM_Zero)!=0 ){",
          "1478:     if( sqlite3VdbeMemExpandBlob(pIn1) ) goto no_mem;",
          "1479:   }",
          "1480:   flags2 = pIn2->flags;",
          "1481:   if( (flags2 & (MEM_Str|MEM_Blob))==0 ){",
          "1482:     if( sqlite3VdbeMemStringify(pIn2,encoding,0) ) goto no_mem;",
          "1483:   }else if( (flags2 & MEM_Zero)!=0 ){",
          "1484:     if( sqlite3VdbeMemExpandBlob(pIn2) ) goto no_mem;",
          "1485:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1486:   MemSetTypeFlag(pOut, MEM_Str);",
          "1487:   if( pOut!=pIn2 ){",
          "1488:     memcpy(pOut->z, pIn2->z, pIn2->n);",
          "1489:   }",
          "1490:   memcpy(&pOut->z[pIn2->n], pIn1->z, pIn1->n);",
          "1491:   pOut->z[nByte]=0;",
          "1492:   pOut->z[nByte+1] = 0;",
          "1493:   pOut->flags |= MEM_Term;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1496:     assert( (pIn2->flags & MEM_Dyn) == (flags2 & MEM_Dyn) );",
          "1497:     pIn2->flags = flags2;",
          "1500:   assert( (pIn1->flags & MEM_Dyn) == (flags1 & MEM_Dyn) );",
          "1501:   pIn1->flags = flags1;",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:   }",
          "739: } {0 {9 5 1}}",
          "743: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "741: # 2019-05-01 ticket https://www.sqlite.org/src/info/3be1295b264be2fa",
          "742: do_execsql_test index-22.0 {",
          "743:   DROP TABLE IF EXISTS t1;",
          "744:   CREATE TABLE t1(a, b TEXT);",
          "745:   CREATE UNIQUE INDEX IF NOT EXISTS x1 ON t1(b==0);",
          "746:   CREATE INDEX IF NOT EXISTS x2 ON t1(a || 0) WHERE b;",
          "747:   INSERT INTO t1(a,b) VALUES('a',1),('a',0);",
          "748:   SELECT a, b, '|' FROM t1;",
          "749: } {a 1 | a 0 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fda0aaf00198e05cfbccc6cb8b9fd1827b5343e",
      "candidate_info": {
        "commit_hash": "3fda0aaf00198e05cfbccc6cb8b9fd1827b5343e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3fda0aaf00198e05cfbccc6cb8b9fd1827b5343e",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Put the list of keywords in mkkeywordhash.c into alphabetical order.\n\nFossilOrigin-Name: ac98b23b34632fbc654a34a8b3d842ce65603e4c04d89c589b46f4d48a61152d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7ba2daf91c96ba16958188d6084a0ff129310d348932de493d326f1d24679cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS                 },",
          "294:   { \"VIEW\",             \"TK_VIEW\",         VIEW                   },",
          "295:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB                   },",
          "296:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC             },",
          "297:   { \"WITH\",             \"TK_WITH\",         CTE                    },",
          "298:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS                 },",
          "301: };",
          "",
          "[Removed Lines]",
          "299:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS                 },",
          "300:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS                 },",
          "",
          "[Added Lines]",
          "296:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS                 },",
          "297:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c960269dd94cf6898f330c22ce0005ef370b3f6",
      "candidate_info": {
        "commit_hash": "1c960269dd94cf6898f330c22ce0005ef370b3f6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1c960269dd94cf6898f330c22ce0005ef370b3f6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Fix a faulty assert() statement in balance_nonroot() - the assert() should use get2byteNotZero() instead of get2byte() for the corner case where the number cells is zero on a 65536-byte page.\n\nFossilOrigin-Name: bcbe7d96df3c9515f679ccf671ca9ba89d081b53501495d4218eb5126196838b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 919fec91dac4cb0d5f67404d4f47a65f353d752f5da0aa7b071bf3caf19e0522",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8166:     rc = defragmentPage(apNew[0], -1);",
          "8167:     testcase( rc!=SQLITE_OK );",
          "8168:     assert( apNew[0]->nFree ==",
          "8170:       || rc!=SQLITE_OK",
          "8171:     );",
          "8172:     copyNodeContent(apNew[0], pParent, &rc);",
          "",
          "[Removed Lines]",
          "8169:         (get2byte(&apNew[0]->aData[5])-apNew[0]->cellOffset-apNew[0]->nCell*2)",
          "",
          "[Added Lines]",
          "8169:         (get2byteNotZero(&apNew[0]->aData[5]) - apNew[0]->cellOffset",
          "8170:           - apNew[0]->nCell*2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25e3073741c2bc23b846bd74dc50334295dd2c1a",
      "candidate_info": {
        "commit_hash": "25e3073741c2bc23b846bd74dc50334295dd2c1a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25e3073741c2bc23b846bd74dc50334295dd2c1a",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5update.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid use-after-free and double-free errors that could occur if an fts5 table is modified in certain ways while there are active cursors.\n\nFossilOrigin-Name: 3291b2a6fe6f38ae91b933e5cd2bf7d97432374b4fb1fccd92b4bd759b02ee06",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2758:     for(i=0; i<pIter->nSeg; i++){",
          "2759:       fts5SegIterClear(&pIter->aSeg[i]);",
          "2760:     }",
          "2762:     fts5BufferFree(&pIter->poslist);",
          "2763:     sqlite3_free(pIter);",
          "2764:   }",
          "",
          "[Removed Lines]",
          "2761:     fts5StructureRelease(pIter->pStruct);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3404:   if( pNew==0 ) return;",
          "3405:   pNew->bRev = (0!=(flags & FTS5INDEX_QUERY_DESC));",
          "3406:   pNew->bSkipEmpty = (0!=(flags & FTS5INDEX_QUERY_SKIPEMPTY));",
          "3408:   pNew->pColset = pColset;",
          "3409:   fts5StructureRef(pStruct);",
          "3410:   if( (flags & FTS5INDEX_QUERY_NOOUTPUT)==0 ){",
          "",
          "[Removed Lines]",
          "3407:   pNew->pStruct = pStruct;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3512:   SELECT fts5_decode(id, block) FROM t1_data;",
          "3513: } {1 {database disk image is malformed}}",
          "3515: sqlite3_fts5_may_be_corrupt 0",
          "3516: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3515: #-------------------------------------------------------------------------",
          "3516: reset_db",
          "3517: do_test 31.0 {",
          "3518:   sqlite3 db {}",
          "3519:   db deserialize [decode_hexdb {",
          "3520: | size 8192 pagesize 4096 filename crash-7629f35f11d48e.db",
          "3521: | page 1 offset 0",
          "3522: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "3523: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 02   .....@  ........",
          "3524: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 04   ................",
          "3525: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "3526: |     96: 00 00 00 00 0d 00 00 00 01 0f c7 00 0f c7 00 00   ................",
          "3527: |   4032: 00 00 00 00 00 00 00 37 01 06 17 15 15 01 53 74   .......7......St",
          "3528: |   4048: 61 62 6c 65 64 75 61 6c 64 75 61 6c 02 43 52 45   abledualdual.CRE",
          "3529: |   4064: 41 54 45 20 54 41 42 4c 45 20 64 75 61 6c 28 64   ATE TABLE dual(d",
          "3530: |   4080: 75 6d 6d 79 20 76 61 72 28 31 29 29 0d 00 00 00   ummy var(1))....",
          "3531: | page 2 offset 4096",
          "3532: |      0: 01 0f fb 00 0f fb 00 00 00 00 00 00 00 00 00 00   ................",
          "3533: |   4080: 00 00 00 00 00 00 00 00 00 00 00 03 01 02 0f 58   ...............X",
          "3534: | end crash-7629f35f11d48e.db",
          "3535: }]} {}",
          "3537: do_execsql_test 31.1 {",
          "3538:   CREATE VIRTUAL TABLE t1 USING fts5(a,b,c);",
          "3539:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<72)",
          "3540:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "3541:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<10)",
          "3542:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "3543: }",
          "3545: do_catchsql_test 31.2 {",
          "3546:   DELETE FROM t1 WHERE a MATCH X'6620e574f32a';",
          "3547: } {0 {}}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test": [
          "File: ext/fts5/test/fts5update.test -> ext/fts5/test/fts5update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:   INSERT INTO x2(x2) VALUES('integrity-check');",
          "116: }",
          "118: }",
          "119: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: #-------------------------------------------------------------------------",
          "119: #",
          "120: do_execsql_test 3.0 {",
          "121:   CREATE VIRTUAL TABLE x3 USING fts5(x, detail=%DETAIL%);",
          "122:   INSERT INTO x3 VALUES('one');",
          "123:   INSERT INTO x3 VALUES('two');",
          "124:   INSERT INTO x3 VALUES('one');",
          "125:   INSERT INTO x3 VALUES('two');",
          "126:   INSERT INTO x3 VALUES('one');",
          "127: }",
          "129: do_test 3.1 {",
          "130:   db eval { SELECT * FROM x3('one') } {",
          "131:     db eval {",
          "132:       INSERT INTO x3(x3) VALUES('optimize');",
          "133:     }",
          "134:   }",
          "135: } {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 83c467d7af63bd2e7800aff4fe9b09dbd75557460b75a9e07205dfae7e28312c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}