{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9c9319ace1f0a76b12bf349d62f455a506d286df",
      "candidate_info": {
        "commit_hash": "9c9319ace1f0a76b12bf349d62f455a506d286df",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/9c9319ace1f0a76b12bf349d62f455a506d286df",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Correct casting of WEATHER union",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10863: void MainWorker::decode_Weather(const int HwdID, const _eHardwareTypes HwdType, const tRBUF *pResponse, _tRxMessageProcessingResult & procResult)",
          "10864: {",
          "10866:  char szTmp[100];",
          "10867:  sprintf(szTmp, \"%d\", windID);",
          "10868:  std::string ID = szTmp;",
          "",
          "[Removed Lines]",
          "10865:  unsigned short windID = (pResponse->WIND.id1 * 256) + pResponse->WIND.id2;",
          "",
          "[Added Lines]",
          "10865:  unsigned short windID = (pResponse->WEATHER.id1 * 256) + pResponse->WEATHER.id2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f0a62a06b71809130416feac976fd3a35f9b74e",
      "candidate_info": {
        "commit_hash": "3f0a62a06b71809130416feac976fd3a35f9b74e",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/3f0a62a06b71809130416feac976fd3a35f9b74e",
        "files": [
          "hardware/cayenne_lpp/CayenneLPP.h",
          "hardware/cayenne_lpp/CayenneLPP_Dec.cpp"
        ],
        "message": "CayenneLPP, added initial support for LPP_UNIXTIME",
        "before_after_code_files": [
          "hardware/cayenne_lpp/CayenneLPP.h||hardware/cayenne_lpp/CayenneLPP.h",
          "hardware/cayenne_lpp/CayenneLPP_Dec.cpp||hardware/cayenne_lpp/CayenneLPP_Dec.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/cayenne_lpp/CayenneLPP.h||hardware/cayenne_lpp/CayenneLPP.h": [
          "File: hardware/cayenne_lpp/CayenneLPP.h -> hardware/cayenne_lpp/CayenneLPP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #define LPP_RELATIVE_HUMIDITY   104     // 1 byte, 0.5% unsigned",
          "17: #define LPP_ACCELEROMETER       113     // 2 bytes per axis, 0.001G",
          "18: #define LPP_BAROMETRIC_PRESSURE 115     // 2 bytes 0.1 hPa Unsigned",
          "19: #define LPP_GYROMETER           134     // 2 bytes per axis, 0.01 \u00b0/s",
          "20: #define LPP_GPS                 136     // 3 byte lon/lat 0.0001 \u00b0, 3 bytes alt 0.01 meter",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #define LPP_UNIXTIME   133  // 4 bytes, unsigned uint_32_t",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: #define LPP_RELATIVE_HUMIDITY_SIZE   3       // 1 byte, 0.5% unsigned",
          "32: #define LPP_ACCELEROMETER_SIZE       8       // 2 bytes per axis, 0.001G",
          "33: #define LPP_BAROMETRIC_PRESSURE_SIZE 4       // 2 bytes 0.1 hPa Unsigned",
          "34: #define LPP_GYROMETER_SIZE           8       // 2 bytes per axis, 0.01 \u00b0/s",
          "35: #define LPP_GPS_SIZE                 11      // 3 byte lon/lat 0.0001 \u00b0, 3 bytes alt 0.01 meter",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #define LPP_UNIXTIME_SIZE    6   // 4 bytes, unsigned uint_32_t",
          "",
          "---------------"
        ],
        "hardware/cayenne_lpp/CayenneLPP_Dec.cpp||hardware/cayenne_lpp/CayenneLPP_Dec.cpp": [
          "File: hardware/cayenne_lpp/CayenneLPP_Dec.cpp -> hardware/cayenne_lpp/CayenneLPP_Dec.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:    pBuffer += LPP_BAROMETRIC_PRESSURE_SIZE;",
          "190:    Len -= LPP_BAROMETRIC_PRESSURE_SIZE;",
          "191:   }",
          "192:   else if (lpp_type == LPP_GYROMETER) {",
          "193:    if (Len < LPP_GYROMETER_SIZE)",
          "194:     return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:   else if (lpp_type == LPP_UNIXTIME) {",
          "193:    if (Len < LPP_UNIXTIME_SIZE)",
          "194:     return false;",
          "196:    root[iIndex][\"channel\"] = channel;",
          "197:    root[iIndex][\"type\"] = \"unixtime\";",
          "199:    uint32_t value = (pBuffer[2] << 24) | (pBuffer[3] << 16) | (pBuffer[4] << 8) | pBuffer[5];",
          "200:    root[iIndex++][\"value\"] = value;",
          "202:    pBuffer += LPP_UNIXTIME_SIZE;",
          "203:    Len -= LPP_UNIXTIME_SIZE;",
          "204:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fad48f6fb5de80c487774b65c9ef819a7c33495d",
      "candidate_info": {
        "commit_hash": "fad48f6fb5de80c487774b65c9ef819a7c33495d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/fad48f6fb5de80c487774b65c9ef819a7c33495d",
        "files": [
          "hardware/ASyncTCP.cpp"
        ],
        "message": "ASyncTCP masking unreferenced local variable warning",
        "before_after_code_files": [
          "hardware/ASyncTCP.cpp||hardware/ASyncTCP.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/ASyncTCP.cpp||hardware/ASyncTCP.cpp": [
          "File: hardware/ASyncTCP.cpp -> hardware/ASyncTCP.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  #include <unistd.h> //gethostbyname",
          "10: #endif",
          "12: #define RECONNECT_TIME 30",
          "14: ASyncTCP::ASyncTCP()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #define Q_UNUSED(x) (void)x;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  }",
          "62:  catch (const std::exception &e)",
          "63:  {",
          "64:   if (!mAllowCallbacks)",
          "65:    return;",
          "66:   OnError(boost::system::error_code(boost::asio::error::host_not_found));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:   Q_UNUSED(e);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16e1fd39a8c6a94405b5e30a5cc52922d4592080",
      "candidate_info": {
        "commit_hash": "16e1fd39a8c6a94405b5e30a5cc52922d4592080",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/16e1fd39a8c6a94405b5e30a5cc52922d4592080",
        "files": [
          "History.txt",
          "push/InfluxPush.cpp",
          "push/InfluxPush.h",
          "webserver/Base64.cpp",
          "webserver/Base64.h",
          "www/app/DPInfluxController.js",
          "www/views/dpinflux.html"
        ],
        "message": "Implemented: InfluxDB Data push, support for Username/Password",
        "before_after_code_files": [
          "push/InfluxPush.cpp||push/InfluxPush.cpp",
          "push/InfluxPush.h||push/InfluxPush.h",
          "webserver/Base64.cpp||webserver/Base64.cpp",
          "webserver/Base64.h||webserver/Base64.h",
          "www/app/DPInfluxController.js||www/app/DPInfluxController.js",
          "www/views/dpinflux.html||www/views/dpinflux.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "push/InfluxPush.cpp||push/InfluxPush.cpp": [
          "File: push/InfluxPush.cpp -> push/InfluxPush.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include \"../main/mainworker.h\"",
          "9: #include \"../main/RFXtrx.h\"",
          "10: #include \"../main/SQLHelper.h\"",
          "12: #include \"../main/WebServer.h\"",
          "13: #include \"../webserver/cWebem.h\"",
          "14: #include \"../main/localtime_r.h\"",
          "15: #define __STDC_FORMAT_MACROS",
          "",
          "[Removed Lines]",
          "11: #include \"../webserver/Base64.h\"",
          "",
          "[Added Lines]",
          "12: #include \"../webserver/Base64.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:  m_sql.GetPreferencesVar(\"InfluxIP\", m_InfluxIP);",
          "47:  m_sql.GetPreferencesVar(\"InfluxPort\", m_InfluxPort);",
          "48:  m_sql.GetPreferencesVar(\"InfluxDatabase\", m_InfluxDatabase);",
          "49:  int InfluxDebugActiveInt = 0;",
          "50:  m_bInfluxDebugActive = false;",
          "51:  m_sql.GetPreferencesVar(\"InfluxDebug\", InfluxDebugActiveInt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:  m_sql.GetPreferencesVar(\"InfluxUsername\", m_InfluxUsername);",
          "50:  m_sql.GetPreferencesVar(\"InfluxPassword\", m_InfluxPassword);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:  }",
          "55:  m_szURL = \"\";",
          "56:  if (",
          "58:   (m_InfluxPort == 0) ||",
          "60:   )",
          "61:   return;",
          "62:  std::stringstream sURL;",
          "63:  if (m_InfluxIP.find(\"://\") == std::string::npos)",
          "64:   sURL << \"http://\";",
          "66:  m_szURL = sURL.str();",
          "67: }",
          "",
          "[Removed Lines]",
          "57:   (m_InfluxIP == \"\") ||",
          "59:   (m_InfluxDatabase == \"\")",
          "65:  sURL << m_InfluxIP << \":\" << m_InfluxPort << \"/write?db=\" << m_InfluxDatabase;",
          "",
          "[Added Lines]",
          "60:   (m_InfluxIP.empty()) ||",
          "62:   (m_InfluxDatabase.empty())",
          "68:  sURL << m_InfluxIP << \":\" << m_InfluxPort << \"/write?\";",
          "69:  if ((!m_InfluxUsername.empty()) && (!m_InfluxPassword.empty()))",
          "70:   sURL << \"u=\" << m_InfluxUsername << \"&p=\" << base64_decode(m_InfluxPassword) << \"&\";",
          "71:  sURL << \"db=\" << m_InfluxDatabase;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "225:    std::string remote = request::findValue(&req, \"remote\");",
          "226:    std::string port = request::findValue(&req, \"port\");",
          "227:    std::string database = request::findValue(&req, \"database\");",
          "228:    std::string debugenabled = request::findValue(&req, \"debugenabled\");",
          "229:    if (",
          "230:     (linkactive == \"\") ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:    std::string username = request::findValue(&req, \"username\");",
          "235:    std::string password = request::findValue(&req, \"password\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240:    m_sql.UpdatePreferencesVar(\"InfluxIP\", remote.c_str());",
          "241:    m_sql.UpdatePreferencesVar(\"InfluxPort\", atoi(port.c_str()));",
          "242:    m_sql.UpdatePreferencesVar(\"InfluxDatabase\", database.c_str());",
          "243:    m_sql.UpdatePreferencesVar(\"InfluxDebug\", idebugenabled);",
          "244:    m_influxpush.UpdateSettings();",
          "245:    root[\"status\"] = \"OK\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:    m_sql.UpdatePreferencesVar(\"InfluxUsername\", username.c_str());",
          "252:    m_sql.UpdatePreferencesVar(\"InfluxPassword\", base64_encode(password));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "273:    {",
          "274:     root[\"InfluxDatabase\"] = sValue;",
          "275:    }",
          "276:    if (m_sql.GetPreferencesVar(\"InfluxDebug\", nValue)) {",
          "277:     root[\"InfluxDebug\"] = nValue;",
          "278:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:    if (m_sql.GetPreferencesVar(\"InfluxUsername\", sValue))",
          "287:    {",
          "288:     root[\"InfluxUsername\"] = sValue;",
          "289:    }",
          "290:    if (m_sql.GetPreferencesVar(\"InfluxPassword\", sValue))",
          "291:    {",
          "292:     root[\"InfluxPassword\"] = base64_decode(sValue);",
          "293:    }",
          "",
          "---------------"
        ],
        "push/InfluxPush.h||push/InfluxPush.h": [
          "File: push/InfluxPush.h -> push/InfluxPush.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  std::string m_InfluxIP;",
          "33:  int m_InfluxPort;",
          "34:  std::string m_InfluxDatabase;",
          "35:  bool m_bInfluxDebugActive;",
          "36: };",
          "37: extern CInfluxPush m_influxpush;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:  std::string m_InfluxUsername;",
          "36:  std::string m_InfluxPassword;",
          "",
          "---------------"
        ],
        "webserver/Base64.cpp||webserver/Base64.cpp": [
          "File: webserver/Base64.cpp -> webserver/Base64.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: }",
          "100: std::string base64_decode(std::string const& encoded_string) {",
          "101:   size_t in_len = encoded_string.size();",
          "102:   int i = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: std::string base64_encode(std::string const& s) {",
          "101:  return base64_encode((unsigned char const*)s.c_str(), (unsigned int)s.size());",
          "102: }",
          "",
          "---------------"
        ],
        "webserver/Base64.h||webserver/Base64.h": [
          "File: webserver/Base64.h -> webserver/Base64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <string>",
          "7: std::string base64_encode(unsigned char const* , unsigned int len);",
          "8: std::string base64_decode(std::string const& s);",
          "10: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: std::string base64_encode(std::string const& s);",
          "",
          "---------------"
        ],
        "www/app/DPInfluxController.js||www/app/DPInfluxController.js": [
          "File: www/app/DPInfluxController.js -> www/app/DPInfluxController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:        $('#influxremote #tcpaddress').val(data.InfluxIP);",
          "14:        $('#influxremote #tcpport').val(data.InfluxPort);",
          "15:        $('#influxremote #database').val(data.InfluxDatabase);",
          "16:        $('#influxremote #influxlinkenabled').prop('checked', false);",
          "17:        if (data.InfluxActive) {",
          "18:         $('#influxremote #influxlinkenabled').prop('checked', true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:        $('#influxremote #username').val(data.InfluxUsername);",
          "17:        $('#influxremote #password').val(data.InfluxPassword);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:    if (port.Length==0)",
          "43:     port=\"8086\";",
          "44:    var database = $('#influxremote #database').val();",
          "45:    var debugenabled = 0;",
          "46:    if ($('#influxremote #debugenabled').is(\":checked\"))",
          "47:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:    var username = $('#influxremote #username').val();",
          "48:    var password = $('#influxremote #password').val();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:      \"&remote=\" + encodeURIComponent(remoteurl) +",
          "55:      \"&port=\" + port +",
          "56:      \"&database=\" + encodeURIComponent(database) +",
          "57:      \"&debugenabled=\" + debugenabled,",
          "58:      async: false,",
          "59:      dataType: 'json',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:      \"&username=\" + encodeURIComponent(username) +",
          "62:      \"&password=\" + encodeURIComponent(password) +",
          "",
          "---------------"
        ],
        "www/views/dpinflux.html||www/views/dpinflux.html": [
          "File: www/views/dpinflux.html -> www/views/dpinflux.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:    <td align=\"right\" style=\"width:110px\"><label><span data-i18n=\"Database\"></span>:</label></td>",
          "67:    <td><input type=\"text\" id=\"database\" style=\"width: 150px; padding: .2em;\" class=\"text ui-widget-content ui-corner-all\" />",
          "68:   </tr>",
          "69:   <tr>",
          "70:    <td align=\"right\" style=\"width:80px\"><span data-i18n=\"Debug to logfile\"></span>:</td>",
          "71:    <td><input type=\"checkbox\" id=\"debugenabled\" checked><label for=\"debugenabled\"/></td>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   <tr>",
          "70:    <td align=\"right\" style=\"width:110px\"><label><span data-i18n=\"Username\"></span>:</label></td>",
          "71:    <td><input type=\"text\" id=\"username\" style=\"width: 150px; padding: .2em;\" class=\"text ui-widget-content ui-corner-all\" />",
          "72:   </tr>",
          "73:   <tr>",
          "74:    <td align=\"right\" style=\"width:110px\"><label><span data-i18n=\"Password\"></span>:</label></td>",
          "75:    <td><input type=\"text\" id=\"password\" style=\"width: 150px; padding: .2em;\" class=\"text ui-widget-content ui-corner-all\" />",
          "76:   </tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dd3263e5bf38d89b9d7442b16608f9f80f7d43d",
      "candidate_info": {
        "commit_hash": "4dd3263e5bf38d89b9d7442b16608f9f80f7d43d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4dd3263e5bf38d89b9d7442b16608f9f80f7d43d",
        "files": [
          "www/app/SetupController.js"
        ],
        "message": "Using MapQuest Geo API (fixes #2929)",
        "before_after_code_files": [
          "www/app/SetupController.js||www/app/SetupController.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/app/SetupController.js||www/app/SetupController.js": [
          "File: www/app/SetupController.js -> www/app/SetupController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "812:        bootbox.alert($.t('Please enter a Address to search for!...'), 3500, true);",
          "813:        return false;",
          "814:       }",
          "822:        }",
          "823:       });",
          "824:       return false;",
          "825:      });",
          "",
          "[Removed Lines]",
          "815:       geocoder = new google.maps.Geocoder();",
          "816:       geocoder.geocode({ 'address': address }, function (results, status) {",
          "817:        if (status == google.maps.GeocoderStatus.OK) {",
          "818:         $('#dialog-findlatlong #latitude').val(results[0].geometry.location.lat().toFixed(6));",
          "819:         $('#dialog-findlatlong #longitude').val(results[0].geometry.location.lng().toFixed(6));",
          "820:        } else {",
          "821:         bootbox.alert($.t('Geocode was not successful for the following reason') + ': ' + status);",
          "",
          "[Added Lines]",
          "815:       var url = \"https://www.mapquestapi.com/geocoding/v1/address?key=XN5Eyt9GjLaRPG6T2if7VtUueRLckR8b&inFormat=kvp&outFormat=json&thumbMaps=false&location=\" + address;",
          "816:       $http({",
          "817:        url: url,",
          "818:        async: true,",
          "819:        dataType: 'json'",
          "820:       }).then(function successCallback(response) {",
          "821:        var data = response.data;",
          "822:        var bIsOK = false;",
          "823:        if(data.hasOwnProperty('results')) {",
          "824:         if (data['results'][0]['locations'].length > 0) {",
          "825:          $('#dialog-findlatlong #latitude').val(data['results'][0]['locations'][0]['displayLatLng']['lat']);",
          "826:          $('#dialog-findlatlong #longitude').val(data['results'][0]['locations'][0]['displayLatLng']['lng']);//.toFixed(6)",
          "827:          bIsOK = true;",
          "828:         }",
          "829:        }",
          "830:        if (!bIsOk) {",
          "831:         bootbox.alert($.t('Geocode was not successful for the following reason') + ': Invalid/No data returned!');",
          "833:       }, function errorCallback(response) {",
          "834:        bootbox.alert($.t('Geocode was not successful for the following reason') + ': ' + response.statusText);",
          "",
          "---------------"
        ]
      }
    }
  ]
}