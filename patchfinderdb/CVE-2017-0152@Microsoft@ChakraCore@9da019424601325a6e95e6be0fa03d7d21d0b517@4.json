{
  "cve_id": "CVE-2017-0152",
  "cve_desc": "A remote code execution vulnerability exists in the way affected Microsoft scripting engine render when handling objects in memory in Microsoft browsers. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. An attacker who successfully exploited the vulnerability could gain the same user rights as the current user, aka \"Scripting Engine Memory Corruption Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "9da019424601325a6e95e6be0fa03d7d21d0b517",
  "patch_info": {
    "commit_hash": "9da019424601325a6e95e6be0fa03d7d21d0b517",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/9da019424601325a6e95e6be0fa03d7d21d0b517",
    "files": [
      "lib/Parser/Parse.cpp",
      "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "test/es6/default-splitscope.js"
    ],
    "message": "[CVE-2017-0152] MSFT: 10592731 : Issue with Function name capturing in param scope\n\nIn a function expression with name, where the name is captured in one\nof the param scope functions, if there is a function or var declaration\nwith the same name as the function expression name we were marking the\nfunction expression name as shadowed. In non-eval case this causes\nissue because the name symbol won't get added to the body. This change is to\nfix it in such a way if the name is captured in the param scope then we\nsplit the param and body scope such that the name symbol is added to the\nparam scope not body scope.",
    "before_after_code_files": [
      "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
      "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
    ]
  },
  "patch_diff": {
    "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
      "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "5198:                         paramScope->SetCannotMergeWithBodyScope();",
      "5199:                     }",
      "5200:                 }",
      "5201:             }",
      "5202:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5201:                 if (paramScope->GetCanMergeWithBodyScope() && !fDeclaration && pnodeFnc->sxFnc.pnodeName != nullptr)",
      "5202:                 {",
      "5203:                     Symbol* funcSym = pnodeFnc->sxFnc.pnodeName->sxVar.sym;",
      "5204:                     if (funcSym->GetPid()->GetTopRef()->GetFuncScopeId() > pnodeFnc->sxFnc.functionId)",
      "5205:                     {",
      "5210:                         paramScope->SetCannotMergeWithBodyScope();",
      "5211:                     }",
      "5212:                 }",
      "",
      "---------------"
    ],
    "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
      "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "3319:         {",
      "3322:             paramScope->ForEachSymbol([&](Symbol* param) {",
      "3323:                 Symbol* varSym = funcInfo->GetBodyScope()->FindLocalSymbol(param->GetName());",
      "3324:                 Assert(varSym || pnode->sxFnc.pnodeName->sxVar.sym == param);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3322:             Symbol* funcSym = funcInfo->root->sxFnc.GetFuncSymbol();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3327:                 {",
      "3329:                 }",
      "3331:                 {",
      "",
      "[Removed Lines]",
      "3330:                 else if (varSym && varSym->GetSymbolType() == STVariable && (varSym->IsInSlot(funcInfo) || varSym->GetLocation() != Js::Constants::NoRegister))",
      "",
      "[Added Lines]",
      "3331:                 else if ((funcSym == nullptr || funcSym != param)    // Do not copy the symbol over to body as the function expression symbol",
      "3333:                     && (varSym && varSym->GetSymbolType() == STVariable && (varSym->IsInSlot(funcInfo) || varSym->GetLocation() != Js::Constants::NoRegister)))",
      "",
      "---------------"
    ],
    "test/es6/default-splitscope.js||test/es6/default-splitscope.js": [
      "File: test/es6/default-splitscope.js -> test/es6/default-splitscope.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "159:             return a;",
      "160:         }",
      "161:         assert.areEqual(10, f11()(), \"Recursive call to the function from the body scope returns the right value when eval is there in the body\");",
      "162:     }",
      "163:  },",
      "164:  {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "163:         function f13() {",
      "164:             var a = function jnvgfg(sfgnmj = function ccunlk() { jnvgfg(undefined, 1); }, b) {",
      "165:                 if (b) {",
      "166:                     assert.areEqual(undefined, jnvgfg, \"This refers to the instance in the body and the value of the function expression is not copied over\");",
      "167:                 }",
      "168:                 var jnvgfg = 10;",
      "169:                 if (!b) {",
      "170:                     sfgnmj();",
      "171:                     return 100;",
      "172:                 }",
      "173:             };",
      "174:             assert.areEqual(100, a(), \"After the recursion the right value is returned by the split scoped function\");",
      "175:         };",
      "176:         f13();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dd61e049dee473351541d54261c32cb4c2c02263",
      "candidate_info": {
        "commit_hash": "dd61e049dee473351541d54261c32cb4c2c02263",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/dd61e049dee473351541d54261c32cb4c2c02263",
        "files": [
          "lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/FuncInfo.h",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.cpp"
        ],
        "message": "[CVE-2017-0150] DeferDeserialize is not working properly with asm.js ChangeHeap",
        "before_after_code_files": [
          "lib/Runtime/ByteCode/FuncInfo.cpp||lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/FuncInfo.h||lib/Runtime/ByteCode/FuncInfo.h",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Runtime/ByteCode/FuncInfo.cpp||lib/Runtime/ByteCode/FuncInfo.cpp": [
          "File: lib/Runtime/ByteCode/FuncInfo.cpp -> lib/Runtime/ByteCode/FuncInfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     Js::ParseableFunctionInfo* byteCodeFunction)",
          "14:     : alloc(alloc),",
          "15:     varRegsCount(0),",
          "17:     inArgsCount(0),",
          "18:     innerScopeCount(0),",
          "19:     currentInnerScopeIndex((uint)-1),",
          "",
          "[Removed Lines]",
          "16:     constRegsCount(2),",
          "",
          "[Added Lines]",
          "16:     constRegsCount(InitialConstRegsCount),",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/FuncInfo.h||lib/Runtime/ByteCode/FuncInfo.h": [
          "File: lib/Runtime/ByteCode/FuncInfo.h -> lib/Runtime/ByteCode/FuncInfo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     uint        nextForInLoopLevel;",
          "84:     uint        maxForInLoopLevel;",
          "85: public:",
          "86:     ArenaAllocator *alloc;",
          "88:     Js::RegSlot varRegsCount; // number of registers used for non-constants",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     static const Js::RegSlot InitialConstRegsCount = 2; // constRegsCount is set to 2 because R0 is the return register, and R1 is the root object",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp": [
          "File: lib/Runtime/Language/AsmJsByteCodeGenerator.cpp -> lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3324:         byteCodeGen->Writer()->EndStatement(functionNode);",
          "3325:         byteCodeGen->Writer()->End();",
          "3327:         autoCleanup.Done();",
          "3328:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3327:         functionBody->CheckAndSetConstantCount(FuncInfo::InitialConstRegsCount);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2773:                 AsmJsScriptFunction* scriptFuncObj = (AsmJsScriptFunction*)ScriptFunction::OP_NewScFunc(pDisplay, functionInfo);",
          "2774:                 localModuleFunctions[modFunc.location] = scriptFuncObj;",
          "2775:                 if (i == 0 && info->GetUsesChangeHeap())",
          "2776:                 {",
          "2777:                     scriptFuncObj->GetDynamicType()->SetEntryPoint(AsmJsChangeHeapBuffer);",
          "2778:                 }",
          "2779:                 else",
          "2780:                 {",
          "2785:                     scriptFuncObj->GetDynamicType()->SetEntryPoint(AsmJsExternalEntryPoint);",
          "2786:                     scriptFuncObj->GetFunctionBody()->GetAsmJsFunctionInfo()->SetModuleFunctionBody(asmJsModuleFunctionBody);",
          "2787:                 }",
          "",
          "[Removed Lines]",
          "2781:                     if (scriptFuncObj->GetDynamicType()->GetEntryPoint() == DefaultDeferredDeserializeThunk)",
          "2782:                     {",
          "2783:                         JavascriptFunction::DeferredDeserialize(scriptFuncObj);",
          "2784:                     }",
          "",
          "[Added Lines]",
          "2776:                 if (scriptFuncObj->GetDynamicType()->GetEntryPoint() == DefaultDeferredDeserializeThunk)",
          "2777:                 {",
          "2778:                     JavascriptFunction::DeferredDeserialize(scriptFuncObj);",
          "2779:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
      "candidate_info": {
        "commit_hash": "80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/80cfdbb9c697ea5b5691fc10e87bce6da8886dc0",
        "files": [
          "lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/Library/GlobalObject.cpp",
          "test/AsmJs/nested.baseline",
          "test/AsmJs/nested.js",
          "test/AsmJs/qmarkbug.baseline",
          "test/AsmJs/qmarkbug.js",
          "test/AsmJs/rlexe.xml",
          "test/AsmJs/shadowingBug.baseline",
          "test/AsmJs/shadowingBug.js"
        ],
        "message": "[CVE-2017-0067] prevent parser from getting into inconsistent state when asm.js parse fails",
        "before_after_code_files": [
          "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/Library/GlobalObject.cpp||lib/Runtime/Library/GlobalObject.cpp",
          "test/AsmJs/nested.baseline||test/AsmJs/nested.baseline",
          "test/AsmJs/nested.js||test/AsmJs/nested.js",
          "test/AsmJs/qmarkbug.baseline||test/AsmJs/qmarkbug.baseline",
          "test/AsmJs/qmarkbug.js||test/AsmJs/qmarkbug.js",
          "test/AsmJs/shadowingBug.baseline||test/AsmJs/shadowingBug.baseline",
          "test/AsmJs/shadowingBug.js||test/AsmJs/shadowingBug.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/2697"
        ],
        "olp_code_files": {
          "patch": [
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp"
          ],
          "candidate": [
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp": [
          "File: lib/Runtime/Base/FunctionBody.cpp -> lib/Runtime/Base/FunctionBody.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2134:             return GetFunctionBody();",
          "2135:         }",
          "2137:         BOOL fParsed = FALSE;",
          "2138:         FunctionBody* returnFunctionBody = nullptr;",
          "2139:         ENTER_PINNED_SCOPE(Js::PropertyRecordList, propertyRecordList);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2137:         bool asmjsParseFailed = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2143:         bool isDebugOrAsmJsReparse = false;",
          "2144:         FunctionBody* funcBody = nullptr;",
          "2154:         {",
          "2155:             this->GetUtf8SourceInfo()->StopTrackingDeferredFunction(this->GetLocalFunctionId());",
          "2156:             funcBody = FunctionBody::NewFromParseableFunctionInfo(this, propertyRecordList);",
          "2175:                 {",
          "2180:                     {",
          "2194:                         {",
          "2197:                             {",
          "2199:                             }",
          "2200:                         }",
          "2205:             }",
          "2230:                 {",
          "2235:             }",
          "2243: #if ENABLE_PROFILE_INFO",
          "2245: #endif",
          "2267:                 {",
          "2300:                     {",
          "2303:                     }",
          "2305:                     {",
          "2323:                         {",
          "2325:                         }",
          "2326:                         else",
          "2327:                         {",
          "2330:                         }",
          "2331:                     }",
          "2332:                 }",
          "2342:             {",
          "2344:             }",
          "2346:             {",
          "2356:             }",
          "2357:         }",
          "2365:         if (fParsed == TRUE)",
          "2366:         {",
          "",
          "[Removed Lines]",
          "2146:         AutoRestoreFunctionInfo autoRestoreFunctionInfo(this, DefaultEntryThunk);",
          "2153:         if (!this->m_hasBeenParsed)",
          "2157:             autoRestoreFunctionInfo.funcBody = funcBody;",
          "2159:             PERF_COUNTER_DEC(Code, DeferredFunction);",
          "2161:             if (!this->GetSourceContextInfo()->IsDynamic())",
          "2162:             {",
          "2163:                 PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d; Is Top Level: %s; Source Url: %s\\n\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"), this->GetSourceContextInfo()->url);",
          "2164:             }",
          "2165:             else",
          "2166:             {",
          "2167:                 PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d\\n; Is Top Level: %s;\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(),  this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"));",
          "2168:             }",
          "2170:             if (!this->GetIsTopLevel() &&",
          "2171:                 !this->GetSourceContextInfo()->IsDynamic() &&",
          "2172:                 this->m_scriptContext->DoUndeferGlobalFunctions())",
          "2173:             {",
          "2174:                 this->GetUtf8SourceInfo()->UndeferGlobalFunctions([this](JsUtil::SimpleDictionaryEntry<Js::LocalFunctionId, Js::ParseableFunctionInfo*> func)",
          "2176:                     Js::ParseableFunctionInfo *nextFunc = func.Value();",
          "2177:                     JavascriptExceptionObject* pExceptionObject = nullptr;",
          "2179:                     if (nextFunc != nullptr && this != nextFunc)",
          "2181:                         try",
          "2182:                         {",
          "2183:                             nextFunc->Parse();",
          "2184:                         }",
          "2185:                         catch (OutOfMemoryException) {}",
          "2186:                         catch (StackOverflowException) {}",
          "2187:                         catch (const Js::JavascriptException& err)",
          "2188:                         {",
          "2189:                             pExceptionObject = err.GetAndClear();",
          "2190:                         }",
          "2193:                         if(pExceptionObject)",
          "2195:                             if(pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingOOMErrorObject() &&",
          "2196:                                 pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingSOErrorObject())",
          "2198:                                 JavascriptExceptionOperators::DoThrow(pExceptionObject, /*scriptContext*/nullptr);",
          "2201:                     }",
          "2203:                     return true;",
          "2204:                 });",
          "2206:         }",
          "2207:         else",
          "2208:         {",
          "2209:             bool isDebugReparse = m_scriptContext->IsScriptContextInSourceRundownOrDebugMode() && !this->GetUtf8SourceInfo()->GetIsLibraryCode();",
          "2210:             bool isAsmJsReparse = m_isAsmjsMode && !isDebugReparse;",
          "2212:             isDebugOrAsmJsReparse = isAsmJsReparse || isDebugReparse;",
          "2214:             funcBody = this->GetFunctionBody();",
          "2216:             if (isDebugOrAsmJsReparse)",
          "2217:             {",
          "2218:     #if ENABLE_DEBUG_CONFIG_OPTIONS",
          "2219:                 char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "2220:     #endif",
          "2221:     #if DBG",
          "2222:                 Assert(",
          "2223:                     funcBody->IsReparsed()",
          "2224:                     || m_scriptContext->IsScriptContextInSourceRundownOrDebugMode()",
          "2225:                     || m_isAsmjsMode);",
          "2226:     #endif",
          "2227:                 OUTPUT_TRACE(Js::DebuggerPhase, _u(\"Full nested reparse of function: %s (%s)\\n\"), funcBody->GetDisplayName(), funcBody->GetDebugNumberSet(debugStringBuffer));",
          "2229:                 if (funcBody->GetByteCode())",
          "2232:                     funcBody->CleanupToReparse();",
          "2233:                 }",
          "2236:         }",
          "2241:         if (funcBody->GetByteCode() == nullptr)",
          "2242:         {",
          "2244:             Assert(!funcBody->HasExecutionDynamicProfileInfo());",
          "2247:             AssertMsg(isDebugOrAsmJsReparse || funcBody->GetGrfscr() & fscrGlobalCode || CONFIG_FLAG(DeferNested), \"Deferred parsing of non-global procedure?\");",
          "2249:             HRESULT hr = NO_ERROR;",
          "2250:             HRESULT hrParser = NO_ERROR;",
          "2251:             HRESULT hrParseCodeGen = NO_ERROR;",
          "2253:             BEGIN_LEAVE_SCRIPT_INTERNAL(m_scriptContext)",
          "2254:             {",
          "2255:                 bool isCesu8 = m_scriptContext->GetSource(funcBody->GetSourceIndex())->IsCesu8();",
          "2257:                 size_t offset = this->StartOffset();",
          "2258:                 charcount_t charOffset = this->StartInDocument();",
          "2259:                 size_t length = this->LengthInBytes();",
          "2261:                 LPCUTF8 pszStart = this->GetStartOfDocument();",
          "2263:                 uint32 grfscr = funcBody->GetGrfscr() | fscrDeferredFnc;",
          "2266:                 if (!funcBody->GetIsGlobalFunc())",
          "2268:                     grfscr &= ~fscrGlobalCode;",
          "2269:                 }",
          "2271:                 if (!funcBody->GetIsDeclaration() && !funcBody->GetIsGlobalFunc()) // No refresh may reparse global function (e.g. eval code)",
          "2272:                 {",
          "2275:                     grfscr |= fscrDeferredFncExpression;",
          "2276:                 }",
          "2277:                 if (!CONFIG_FLAG(DeferNested) || isDebugOrAsmJsReparse)",
          "2278:                 {",
          "2279:                     grfscr &= ~fscrDeferFncParse; // Disable deferred parsing if not DeferNested, or doing a debug/asm.js re-parse",
          "2280:                 }",
          "2282:                 if (isDebugOrAsmJsReparse)",
          "2283:                 {",
          "2284:                     grfscr |= fscrNoAsmJs; // Disable asm.js when debugging or if linking failed",
          "2285:                 }",
          "2287:                 BEGIN_TRANSLATE_EXCEPTION_TO_HRESULT",
          "2288:                 {",
          "2289:                     CompileScriptException se;",
          "2290:                     Parser ps(m_scriptContext, funcBody->GetIsStrictMode() ? TRUE : FALSE);",
          "2291:                     ParseNodePtr parseTree;",
          "2293:                     uint nextFunctionId = funcBody->GetLocalFunctionId();",
          "2294:                     hrParser = ps.ParseSourceWithOffset(&parseTree, pszStart, offset, length, charOffset, isCesu8, grfscr, &se,",
          "2295:                         &nextFunctionId, funcBody->GetRelativeLineNumber(), funcBody->GetSourceContextInfo(),",
          "2296:                         funcBody);",
          "2299:                     if (FAILED(hrParser))",
          "2301:                         hrParseCodeGen = MapDeferredReparseError(hrParser, se); // Map certain errors like OOM/SOE",
          "2302:                         AssertMsg(FAILED(hrParseCodeGen) && SUCCEEDED(hrParser), \"Syntax errors should never be detected on deferred re-parse\");",
          "2304:                     else",
          "2306:                         TRACE_BYTECODE(_u(\"\\nDeferred parse %s\\n\"), funcBody->GetDisplayName());",
          "2307:                         Js::AutoDynamicCodeReference dynamicFunctionReference(m_scriptContext);",
          "2309:                         bool forceNoNative = isDebugOrAsmJsReparse ? this->GetScriptContext()->IsInterpreted() : false;",
          "2310:                         hrParseCodeGen = GenerateByteCode(parseTree, grfscr, m_scriptContext,",
          "2311:                             funcBody->GetParseableFunctionInfoRef(), funcBody->GetSourceIndex(),",
          "2312:                             forceNoNative, &ps, &se, funcBody->GetScopeInfo(), functionRef);",
          "2314:                         if (se.ei.scode == JSERR_AsmJsCompileError)",
          "2315:                         {",
          "2317:                             m_grfscr |= fscrNoAsmJs;",
          "2318:                             se.Clear();",
          "2319:                             return Parse(functionRef, isByteCodeDeserialization);",
          "2320:                         }",
          "2322:                         if (SUCCEEDED(hrParseCodeGen))",
          "2324:                             fParsed = TRUE;",
          "2328:                             Assert(hrParseCodeGen == SCRIPT_E_RECORDED);",
          "2329:                             hrParseCodeGen = se.ei.scode;",
          "2333:                 END_TRANSLATE_EXCEPTION_TO_HRESULT(hr);",
          "2334:             }",
          "2335:             END_LEAVE_SCRIPT_INTERNAL(m_scriptContext);",
          "2337:             THROW_KNOWN_HRESULT_EXCEPTIONS(hr, m_scriptContext);",
          "2339:             Assert(hr == NO_ERROR);",
          "2341:             if (!SUCCEEDED(hrParser))",
          "2343:                 JavascriptError::ThrowError(m_scriptContext, VBSERR_InternalError);",
          "2345:             else if (!SUCCEEDED(hrParseCodeGen))",
          "2351:                 if (hrParseCodeGen == VBSERR_OutOfStack)",
          "2352:                 {",
          "2353:                     JavascriptError::ThrowStackOverflowError(m_scriptContext);",
          "2354:                 }",
          "2355:                 JavascriptError::MapAndThrowError(m_scriptContext, hrParseCodeGen);",
          "2358:         else",
          "2359:         {",
          "2360:             fParsed = FALSE;",
          "2361:         }",
          "2363:         autoRestoreFunctionInfo.Clear();",
          "",
          "[Added Lines]",
          "2148:             AutoRestoreFunctionInfo autoRestoreFunctionInfo(this, DefaultEntryThunk);",
          "2156:             if (!this->m_hasBeenParsed)",
          "2157:             {",
          "2160:                 autoRestoreFunctionInfo.funcBody = funcBody;",
          "2162:                 PERF_COUNTER_DEC(Code, DeferredFunction);",
          "2164:                 if (!this->GetSourceContextInfo()->IsDynamic())",
          "2166:                     PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d; Is Top Level: %s; Source Url: %s\\n\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"), this->GetSourceContextInfo()->url);",
          "2167:                 }",
          "2168:                 else",
          "2169:                 {",
          "2170:                     PHASE_PRINT_TESTTRACE1(Js::DeferParsePhase, _u(\"TestTrace: Deferred function parsed - ID: %d; Display Name: %s; Length: %d; Nested Function Count: %d; Utf8SourceInfo: %d; Source Length: %d\\n; Is Top Level: %s;\"), m_functionNumber, m_displayName, this->m_cchLength, this->GetNestedCount(), this->m_utf8SourceInfo->GetSourceInfoId(), this->m_utf8SourceInfo->GetCchLength(), this->GetIsTopLevel() ? _u(\"True\") : _u(\"False\"));",
          "2171:                 }",
          "2173:                 if (!this->GetIsTopLevel() &&",
          "2174:                     !this->GetSourceContextInfo()->IsDynamic() &&",
          "2175:                     this->m_scriptContext->DoUndeferGlobalFunctions())",
          "2176:                 {",
          "2177:                     this->GetUtf8SourceInfo()->UndeferGlobalFunctions([this](JsUtil::SimpleDictionaryEntry<Js::LocalFunctionId, Js::ParseableFunctionInfo*> func)",
          "2179:                         Js::ParseableFunctionInfo *nextFunc = func.Value();",
          "2180:                         JavascriptExceptionObject* pExceptionObject = nullptr;",
          "2182:                         if (nextFunc != nullptr && this != nextFunc)",
          "2184:                             try",
          "2185:                             {",
          "2186:                                 nextFunc->Parse();",
          "2187:                             }",
          "2188:                             catch (OutOfMemoryException) {}",
          "2189:                             catch (StackOverflowException) {}",
          "2190:                             catch (const Js::JavascriptException& err)",
          "2192:                                 pExceptionObject = err.GetAndClear();",
          "2193:                             }",
          "2196:                             if (pExceptionObject)",
          "2197:                             {",
          "2198:                                 if (pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingOOMErrorObject() &&",
          "2199:                                     pExceptionObject != ThreadContext::GetContextForCurrentThread()->GetPendingSOErrorObject())",
          "2200:                                 {",
          "2201:                                     JavascriptExceptionOperators::DoThrow(pExceptionObject, /*scriptContext*/nullptr);",
          "2202:                                 }",
          "2206:                         return true;",
          "2207:                     });",
          "2208:                 }",
          "2210:             else",
          "2211:             {",
          "2212:                 bool isDebugReparse = m_scriptContext->IsScriptContextInSourceRundownOrDebugMode() && !this->GetUtf8SourceInfo()->GetIsLibraryCode();",
          "2213:                 bool isAsmJsReparse = m_isAsmjsMode && !isDebugReparse;",
          "2215:                 isDebugOrAsmJsReparse = isAsmJsReparse || isDebugReparse;",
          "2217:                 funcBody = this->GetFunctionBody();",
          "2219:                 if (isDebugOrAsmJsReparse)",
          "2221: #if ENABLE_DEBUG_CONFIG_OPTIONS",
          "2222:                     char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "2223: #endif",
          "2224: #if DBG",
          "2225:                     Assert(",
          "2226:                         funcBody->IsReparsed()",
          "2227:                         || m_scriptContext->IsScriptContextInSourceRundownOrDebugMode()",
          "2228:                         || m_isAsmjsMode);",
          "2229: #endif",
          "2230:                     OUTPUT_TRACE(Js::DebuggerPhase, _u(\"Full nested reparse of function: %s (%s)\\n\"), funcBody->GetDisplayName(), funcBody->GetDebugNumberSet(debugStringBuffer));",
          "2232:                     if (funcBody->GetByteCode())",
          "2233:                     {",
          "2235:                         funcBody->CleanupToReparse();",
          "2236:                     }",
          "2238:                 }",
          "2244:             if (funcBody->GetByteCode() == nullptr)",
          "2245:             {",
          "2247:                 Assert(!funcBody->HasExecutionDynamicProfileInfo());",
          "2250:                 AssertMsg(isDebugOrAsmJsReparse || funcBody->GetGrfscr() & fscrGlobalCode || CONFIG_FLAG(DeferNested), \"Deferred parsing of non-global procedure?\");",
          "2252:                 HRESULT hr = NO_ERROR;",
          "2253:                 HRESULT hrParser = NO_ERROR;",
          "2254:                 HRESULT hrParseCodeGen = NO_ERROR;",
          "2256:                 BEGIN_LEAVE_SCRIPT_INTERNAL(m_scriptContext)",
          "2258:                     bool isCesu8 = m_scriptContext->GetSource(funcBody->GetSourceIndex())->IsCesu8();",
          "2260:                     size_t offset = this->StartOffset();",
          "2261:                     charcount_t charOffset = this->StartInDocument();",
          "2262:                     size_t length = this->LengthInBytes();",
          "2264:                     LPCUTF8 pszStart = this->GetStartOfDocument();",
          "2266:                     uint32 grfscr = funcBody->GetGrfscr() | fscrDeferredFnc;",
          "2269:                     if (!funcBody->GetIsGlobalFunc())",
          "2270:                     {",
          "2271:                         grfscr &= ~fscrGlobalCode;",
          "2272:                     }",
          "2274:                     if (!funcBody->GetIsDeclaration() && !funcBody->GetIsGlobalFunc()) // No refresh may reparse global function (e.g. eval code)",
          "2278:                         grfscr |= fscrDeferredFncExpression;",
          "2280:                     if (!CONFIG_FLAG(DeferNested) || isDebugOrAsmJsReparse)",
          "2282:                         grfscr &= ~fscrDeferFncParse; // Disable deferred parsing if not DeferNested, or doing a debug/asm.js re-parse",
          "2283:                     }",
          "2285:                     if (isDebugOrAsmJsReparse)",
          "2286:                     {",
          "2287:                         grfscr |= fscrNoAsmJs; // Disable asm.js when debugging or if linking failed",
          "2288:                     }",
          "2290:                     BEGIN_TRANSLATE_EXCEPTION_TO_HRESULT",
          "2291:                     {",
          "2292:                         CompileScriptException se;",
          "2293:                         Parser ps(m_scriptContext, funcBody->GetIsStrictMode() ? TRUE : FALSE);",
          "2294:                         ParseNodePtr parseTree;",
          "2296:                         uint nextFunctionId = funcBody->GetLocalFunctionId();",
          "2297:                         hrParser = ps.ParseSourceWithOffset(&parseTree, pszStart, offset, length, charOffset, isCesu8, grfscr, &se,",
          "2298:                             &nextFunctionId, funcBody->GetRelativeLineNumber(), funcBody->GetSourceContextInfo(),",
          "2299:                             funcBody);",
          "2302:                         if (FAILED(hrParser))",
          "2304:                             hrParseCodeGen = MapDeferredReparseError(hrParser, se); // Map certain errors like OOM/SOE",
          "2305:                             AssertMsg(FAILED(hrParseCodeGen) && SUCCEEDED(hrParser), \"Syntax errors should never be detected on deferred re-parse\");",
          "2309:                             TRACE_BYTECODE(_u(\"\\nDeferred parse %s\\n\"), funcBody->GetDisplayName());",
          "2310:                             Js::AutoDynamicCodeReference dynamicFunctionReference(m_scriptContext);",
          "2312:                             bool forceNoNative = isDebugOrAsmJsReparse ? this->GetScriptContext()->IsInterpreted() : false;",
          "2313:                             hrParseCodeGen = GenerateByteCode(parseTree, grfscr, m_scriptContext,",
          "2314:                                 funcBody->GetParseableFunctionInfoRef(), funcBody->GetSourceIndex(),",
          "2315:                                 forceNoNative, &ps, &se, funcBody->GetScopeInfo(), functionRef);",
          "2317:                             if (SUCCEEDED(hrParseCodeGen))",
          "2318:                             {",
          "2319:                                 fParsed = TRUE;",
          "2320:                             }",
          "2321:                             else",
          "2322:                             {",
          "2323:                                 Assert(hrParseCodeGen == SCRIPT_E_RECORDED);",
          "2324:                                 hrParseCodeGen = se.ei.scode;",
          "2325:                             }",
          "2328:                     END_TRANSLATE_EXCEPTION_TO_HRESULT(hr);",
          "2330:                 END_LEAVE_SCRIPT_INTERNAL(m_scriptContext);",
          "2332:                 THROW_KNOWN_HRESULT_EXCEPTIONS(hr, m_scriptContext);",
          "2334:                 Assert(hr == NO_ERROR);",
          "2336:                 if (!SUCCEEDED(hrParser))",
          "2337:                 {",
          "2338:                     JavascriptError::ThrowError(m_scriptContext, VBSERR_InternalError);",
          "2339:                 }",
          "2340:                 else if (!SUCCEEDED(hrParseCodeGen))",
          "2341:                 {",
          "2346:                     if (hrParseCodeGen == VBSERR_OutOfStack)",
          "2347:                     {",
          "2348:                         JavascriptError::ThrowStackOverflowError(m_scriptContext);",
          "2349:                     }",
          "2350:                     else if (hrParseCodeGen == JSERR_AsmJsCompileError)",
          "2351:                     {",
          "2352:                         asmjsParseFailed = true;",
          "2353:                     }",
          "2354:                     else",
          "2355:                     {",
          "2356:                         JavascriptError::MapAndThrowError(m_scriptContext, hrParseCodeGen);",
          "2357:                     }",
          "2358:                 }",
          "2359:             }",
          "2360:             else",
          "2362:                 fParsed = FALSE;",
          "2365:             if (!asmjsParseFailed)",
          "2367:                 autoRestoreFunctionInfo.Clear();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2370:             this->m_hasBeenParsed = true;",
          "2371:             returnFunctionBody = funcBody;",
          "2372:         }",
          "2374:         {",
          "2375:             returnFunctionBody = this->GetFunctionBody();",
          "2376:         }",
          "2378:         LEAVE_PINNED_SCOPE();",
          "2380:         return returnFunctionBody;",
          "2381:     }",
          "",
          "[Removed Lines]",
          "2373:         else",
          "",
          "[Added Lines]",
          "2379:         else if(!asmjsParseFailed)",
          "2386:         if (asmjsParseFailed)",
          "2387:         {",
          "2389:             m_grfscr |= fscrNoAsmJs;",
          "2390:             return Parse(functionRef, isByteCodeDeserialization);",
          "2391:         }",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3633:                 {",
          "3634:                     exit(JSERR_AsmJsCompileError);",
          "3635:                 }",
          "3637:                 {",
          "3639:                     throw Js::AsmJsParseException();",
          "3640:                 }",
          "3641:             }",
          "",
          "[Removed Lines]",
          "3636:                 else if (!(flags & fscrDeferFncParse))",
          "",
          "[Added Lines]",
          "3636:                 else",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/GlobalObject.cpp||lib/Runtime/Library/GlobalObject.cpp": [
          "File: lib/Runtime/Library/GlobalObject.cpp -> lib/Runtime/Library/GlobalObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:             {",
          "945:                 JavascriptError::ThrowStackOverflowError(scriptContext);",
          "946:             }",
          "952:             {",
          "954:                 grfscr |= fscrNoAsmJs;",
          "956:                 return DefaultEvalHelper(scriptContext, source, sourceLength, moduleID, grfscr, pszTitle, registerDocument, isIndirect, strictMode);",
          "957:             }",
          "959:             Assert(funcBody != nullptr);",
          "960:             funcBody->SetDisplayName(pszTitle);",
          "",
          "[Removed Lines]",
          "947:             JavascriptError::MapAndThrowError(scriptContext, hrCodeGen);",
          "948:         }",
          "949:         else",
          "950:         {",
          "951:             if (se.ei.scode == JSERR_AsmJsCompileError)",
          "955:                 se.Clear();",
          "",
          "[Added Lines]",
          "947:             else if (hrCodeGen == JSERR_AsmJsCompileError)",
          "953:             JavascriptError::MapAndThrowError(scriptContext, hrCodeGen);",
          "954:         }",
          "955:         else",
          "956:         {",
          "",
          "---------------"
        ],
        "test/AsmJs/nested.baseline||test/AsmJs/nested.baseline": [
          "File: test/AsmJs/nested.baseline -> test/AsmJs/nested.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: closure functions are not allowed",
          "2: Asm.js compilation failed.",
          "",
          "---------------"
        ],
        "test/AsmJs/nested.js||test/AsmJs/nested.js": [
          "File: test/AsmJs/nested.js -> test/AsmJs/nested.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: function AsmModule() {",
          "7:     \"use asm\";",
          "8:     function f() {",
          "9:         function g() { }",
          "10:     }",
          "11: }",
          "12: AsmModule();",
          "",
          "---------------"
        ],
        "test/AsmJs/qmarkbug.baseline||test/AsmJs/qmarkbug.baseline": [
          "File: test/AsmJs/qmarkbug.baseline -> test/AsmJs/qmarkbug.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  Asm.js Compilation Error function : None::f",
          "4:  Conditional expressions must be of type int, double, or float",
          "6: Asm.js compilation failed.",
          "9:  Asm.js Compilation Error function : None::f",
          "10:  Conditional expressions must be of type int, double, or float",
          "",
          "[Removed Lines]",
          "2: qmarkbug.js(9, 3)",
          "8: qmarkbug.js(25, 3)",
          "",
          "[Added Lines]",
          "2: qmarkbug.js(6, 5)",
          "8: qmarkbug.js(6, 5)",
          "",
          "---------------"
        ],
        "test/AsmJs/qmarkbug.js||test/AsmJs/qmarkbug.js": [
          "File: test/AsmJs/qmarkbug.js -> test/AsmJs/qmarkbug.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "6: var asmModule =",
          "7: (function(stdlib, foreign, heap) { 'use asm';   var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "8:   var Int16ArrayView = new stdlib.Int16Array(heap);",
          "9:   function f(d0, i1)",
          "10:   {",
          "11:     d0 = +d0;",
          "12:     i1 = i1|0;",
          "13:     var i4 = 0;",
          "14:     i4 = ((0) ? 0 : ((Uint8ArrayView[0])));",
          "15:     return +((-7.555786372591432e+22));",
          "16:   }",
          "17:   return f; })",
          "19:   var asmHeap = new ArrayBuffer(1<<24);",
          "20:   var asmFun = asmModule(this, {}, asmHeap);",
          "21:   asmFun();",
          "22:   var asmModule =",
          "23: (function(stdlib, foreign, heap) { 'use asm';   var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "24:   var Int16ArrayView = new stdlib.Int16Array(heap);",
          "25:   function f(d0, i1)",
          "26:   {",
          "27:     d0 = +d0;",
          "28:     i1 = i1|0;",
          "29:     var i4 = 0;",
          "30:     i4 = ((0) ? ((Uint8ArrayView[0])): 0 );",
          "31:     return +((-7.555786372591432e+22));",
          "32:   }",
          "33:   return f; })",
          "35:   var asmFun = asmModule(this, {}, asmHeap);",
          "36:   asmFun();",
          "",
          "[Added Lines]",
          "6: eval(`",
          "7: (function(stdlib, foreign, heap) {",
          "8:     'use asm';",
          "9:     var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "10:     var Int16ArrayView = new stdlib.Int16Array(heap);",
          "11:     function f(d0, i1)",
          "12:     {",
          "13:         d0 = +d0;",
          "14:         i1 = i1|0;",
          "15:         var i4 = 0;",
          "16:         i4 = ((0) ? 0 : ((Uint8ArrayView[0])));",
          "17:         return +((-7.555786372591432e+22));",
          "18:     }",
          "19:     return f;",
          "20: })(this, {}, new ArrayBuffer(1<<24));",
          "21: `);",
          "23: eval(`",
          "24: (function(stdlib, foreign, heap) {",
          "25:     'use asm';",
          "26:     var Uint8ArrayView = new stdlib.Uint8Array(heap);",
          "27:     var Int16ArrayView = new stdlib.Int16Array(heap);",
          "28:     function f(d0, i1)",
          "29:     {",
          "30:         d0 = +d0;",
          "31:         i1 = i1|0;",
          "32:         var i4 = 0;",
          "33:         i4 = ((0) ? ((Uint8ArrayView[0])): 0 );",
          "34:         return +((-7.555786372591432e+22));",
          "35:     }",
          "36:     return f;",
          "37: })(this, {}, new ArrayBuffer(1<<24));",
          "38: `);",
          "",
          "---------------"
        ],
        "test/AsmJs/shadowingBug.baseline||test/AsmJs/shadowingBug.baseline": [
          "File: test/AsmJs/shadowingBug.baseline -> test/AsmJs/shadowingBug.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "3:  Asm.js Compilation Error function : None::f1",
          "4:  Invalid identifier f64",
          "6: Asm.js compilation failed.",
          "9:  Asm.js Compilation Error function : None::f1",
          "10:  Invalid identifier f64",
          "12: Asm.js compilation failed.",
          "13: Var declaration with non-constant",
          "14: Asm.js compilation failed.",
          "15: 0",
          "18: 0",
          "",
          "[Removed Lines]",
          "2: shadowingBug.js(7, 97)",
          "8: shadowingBug.js(8, 97)",
          "16: NaN",
          "17: 0",
          "",
          "[Added Lines]",
          "2: shadowingBug.js(1, 97)",
          "7: 0",
          "9: shadowingBug.js(1, 97)",
          "14: NaN",
          "",
          "---------------"
        ],
        "test/AsmJs/shadowingBug.js||test/AsmJs/shadowingBug.js": [
          "File: test/AsmJs/shadowingBug.js -> test/AsmJs/shadowingBug.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: var buffer = new ArrayBuffer(1<<20);",
          "11: var f64Arr = new Float64Array(buffer);",
          "12: print(f64Arr[0]);",
          "",
          "[Removed Lines]",
          "7: print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; f64[0] = 0.0;return +0.0;} return f1;})(this,{},buffer)());",
          "8: print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; return +f64[0];} return f1;})(this,{},buffer)());",
          "9: print((function (stdlib,foreign,buffer) { \"use asm\"; const a = 10; function f1(){ var a =0; var b = a; return b|0;} return f1;})(this,{},buffer)());",
          "",
          "[Added Lines]",
          "7: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; f64[0] = 0.0;return +0.0;} return f1;})(this,{},buffer)())');",
          "8: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; var f64 = new stdlib.Float64Array(buffer); function f1(){ var f64 = 1.; return +f64[0];} return f1;})(this,{},buffer)())');",
          "9: eval('print((function (stdlib,foreign,buffer) { \"use asm\"; const a = 10; function f1(){ var a =0; var b = a; return b|0;} return f1;})(this,{},buffer)())');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0727a82a8f53e563c13fca66637b4efed92448ff",
      "candidate_info": {
        "commit_hash": "0727a82a8f53e563c13fca66637b4efed92448ff",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/0727a82a8f53e563c13fca66637b4efed92448ff",
        "files": [
          "test/es6/default-splitscope.js"
        ],
        "message": "Build Fix\n\nCommenting the failing test for now. I am working on a fix for it. Will\nuncomment it once the fix is in.",
        "before_after_code_files": [
          "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
          ],
          "candidate": [
            "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
          ]
        }
      },
      "candidate_diff": {
        "test/es6/default-splitscope.js||test/es6/default-splitscope.js": [
          "File: test/es6/default-splitscope.js -> test/es6/default-splitscope.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:         }",
          "161:         assert.areEqual(10, f11()(), \"Recursive call to the function from the body scope returns the right value when eval is there in the body\");",
          "178:     }",
          "179:  },",
          "",
          "[Removed Lines]",
          "163:         function f13() {",
          "164:             var a = function jnvgfg(sfgnmj = function ccunlk() { jnvgfg(undefined, 1); }, b) {",
          "165:                 if (b) {",
          "166:                     assert.areEqual(undefined, jnvgfg, \"This refers to the instance in the body and the value of the function expression is not copied over\");",
          "167:                 }",
          "168:                 var jnvgfg = 10;",
          "169:                 if (!b) {",
          "170:                     sfgnmj();",
          "171:                     return 100;",
          "172:                 }",
          "173:             };",
          "174:             assert.areEqual(100, a(), \"After the recursion the right value is returned by the split scoped function\");",
          "175:         };",
          "176:         f13();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a73606e94e000ff74641f334b5481b99b41e893f",
      "candidate_info": {
        "commit_hash": "a73606e94e000ff74641f334b5481b99b41e893f",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/a73606e94e000ff74641f334b5481b99b41e893f",
        "files": [
          "lib/Parser/CMakeLists.txt",
          "lib/Parser/Chakra.Parser.vcxproj",
          "lib/Parser/FormalsUtil.h",
          "lib/Parser/Hash.h",
          "lib/Parser/Parse.cpp",
          "lib/Parser/Parse.h",
          "lib/Parser/ParseTreeComparer.h",
          "lib/Parser/ParserCommon.h",
          "lib/Parser/pnodewalk.h",
          "lib/Parser/ptree.cpp",
          "lib/Parser/ptree.h",
          "lib/Parser/screrror.h",
          "lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/Scope.cpp",
          "lib/Runtime/Language/AsmJs.cpp",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/AsmJsModule.cpp",
          "lib/Runtime/Language/AsmJsTypes.cpp",
          "lib/Runtime/Language/AsmJsUtils.cpp",
          "lib/Runtime/Language/AsmJsUtils.h",
          "lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "lib/Runtime/Library/GlobalObject.cpp",
          "lib/Runtime/Library/JavascriptLibrary.cpp"
        ],
        "message": "Convert parse node to class hierarchy\n\nFix an issue with near null AV in ParseFncFunc when we are validating the function formals with destructuring without passing in a ParseNode for the function.\nFix some benign type confusion from the assert where two kind of node have same field at the same location (the sym between ParseNodeVar and ParseNodePid) and between pnodeTarget/pnode1 in ParseNodeCall and ParseNodeBin\nFix simple this property assignment statement only constructor identification because of type confusion of ParseNodeVar and ParseNodePid in Parse::ParseExpr",
        "before_after_code_files": [
          "lib/Parser/Chakra.Parser.vcxproj||lib/Parser/Chakra.Parser.vcxproj",
          "lib/Parser/FormalsUtil.h||lib/Parser/FormalsUtil.h",
          "lib/Parser/Hash.h||lib/Parser/Hash.h",
          "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
          "lib/Parser/Parse.h||lib/Parser/Parse.h",
          "lib/Parser/ParseTreeComparer.h||lib/Parser/ParseTreeComparer.h",
          "lib/Parser/ParserCommon.h||lib/Parser/ParserCommon.h",
          "lib/Parser/pnodewalk.h||lib/Parser/pnodewalk.h",
          "lib/Parser/ptree.cpp||lib/Parser/ptree.cpp",
          "lib/Parser/ptree.h||lib/Parser/ptree.h",
          "lib/Parser/screrror.h||lib/Parser/screrror.h",
          "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp",
          "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.cpp||lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "lib/Runtime/ByteCode/ByteCodeGenerator.h||lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "lib/Runtime/ByteCode/FuncInfo.cpp||lib/Runtime/ByteCode/FuncInfo.cpp",
          "lib/Runtime/ByteCode/Scope.cpp||lib/Runtime/ByteCode/Scope.cpp",
          "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp",
          "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "lib/Runtime/Language/AsmJsModule.cpp||lib/Runtime/Language/AsmJsModule.cpp",
          "lib/Runtime/Language/AsmJsTypes.cpp||lib/Runtime/Language/AsmJsTypes.cpp",
          "lib/Runtime/Language/AsmJsUtils.cpp||lib/Runtime/Language/AsmJsUtils.cpp",
          "lib/Runtime/Language/AsmJsUtils.h||lib/Runtime/Language/AsmJsUtils.h",
          "lib/Runtime/Language/SourceTextModuleRecord.cpp||lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "lib/Runtime/Library/GlobalObject.cpp||lib/Runtime/Library/GlobalObject.cpp",
          "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp"
          ],
          "candidate": [
            "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp",
            "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Parser/Chakra.Parser.vcxproj||lib/Parser/Chakra.Parser.vcxproj": [
          "File: lib/Parser/Chakra.Parser.vcxproj -> lib/Parser/Chakra.Parser.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:       <PrecompiledHeader>Create</PrecompiledHeader>",
          "65:     </ClCompile>",
          "66:     <ClCompile Include=\"$(MSBuildThisFileDirectory)TextbookBoyerMoore.cpp\" />",
          "67:     <None Include=\"HashFunc.cpp\" />",
          "68:   </ItemGroup>",
          "69:   <ItemGroup>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     <ClCompile Include=\"$(MSBuildThisFileDirectory)ptree.cpp\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   </ItemGroup>",
          "149:   <Import Project=\"$(BuildConfigPropsPath)Chakra.Build.targets\" Condition=\"exists('$(BuildConfigPropsPath)Chakra.Build.targets')\" />",
          "150:   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />",
          "",
          "[Removed Lines]",
          "151: </Project>",
          "",
          "[Added Lines]",
          "152: </Project>",
          "",
          "---------------"
        ],
        "lib/Parser/FormalsUtil.h||lib/Parser/FormalsUtil.h": [
          "File: lib/Parser/FormalsUtil.h -> lib/Parser/FormalsUtil.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: template <class Fn, bool mapRest>",
          "7: void MapFormalsImpl(ParseNode *pnodeFunc, Fn fn)",
          "8: {",
          "10:     {",
          "11:         fn(pnode);",
          "12:     }",
          "14:     {",
          "16:     }",
          "17: }",
          "",
          "[Removed Lines]",
          "9:     for (ParseNode *pnode = pnodeFunc->sxFnc.pnodeParams; pnode != nullptr; pnode = pnode->GetFormalNext())",
          "13:     if (mapRest && pnodeFunc->sxFnc.pnodeRest != nullptr)",
          "15:         fn(pnodeFunc->sxFnc.pnodeRest);",
          "",
          "[Added Lines]",
          "9:     for (ParseNode *pnode = pnodeFunc->AsParseNodeFnc()->pnodeParams; pnode != nullptr; pnode = pnode->GetFormalNext())",
          "13:     if (mapRest && pnodeFunc->AsParseNodeFnc()->pnodeRest != nullptr)",
          "15:         fn(pnodeFunc->AsParseNodeFnc()->pnodeRest);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: template <class Fn>",
          "32: void MapFormalsFromPattern(ParseNode *pnodeFunc, Fn fn)",
          "33: {",
          "35:     {",
          "36:         if (pnode->nop == knopParamPattern)",
          "37:         {",
          "39:         }",
          "40:     }",
          "41: }",
          "",
          "[Removed Lines]",
          "34:     for (ParseNode *pnode = pnodeFunc->sxFnc.pnodeParams; pnode != nullptr; pnode = pnode->GetFormalNext())",
          "38:             Parser::MapBindIdentifier(pnode->sxParamPattern.pnode1, fn);",
          "",
          "[Added Lines]",
          "34:     for (ParseNode *pnode = pnodeFunc->AsParseNodeFnc()->pnodeParams; pnode != nullptr; pnode = pnode->GetFormalNext())",
          "38:             Parser::MapBindIdentifier(pnode->AsParseNodeParamPattern()->pnode1, fn);",
          "",
          "---------------"
        ],
        "lib/Parser/Hash.h||lib/Parser/Hash.h": [
          "File: lib/Parser/Hash.h -> lib/Parser/Hash.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:     {",
          "177:         if (pnode && pnode->nop == knopStr)",
          "178:         {",
          "180:         }",
          "181:     }",
          "",
          "[Removed Lines]",
          "179:             pnode->sxPid.pid->SetIsUsedInLdElem(true);",
          "",
          "[Added Lines]",
          "179:             pnode->AsParseNodePid()->pid->SetIsUsedInLdElem(true);",
          "",
          "---------------"
        ],
        "lib/Parser/Parse.cpp||lib/Parser/Parse.cpp": [
          "File: lib/Parser/Parse.cpp -> lib/Parser/Parse.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:         m_nextBlockId = 0;",
          "301:         ParseNode *pnodeFnc = CreateNode(knopFncDecl);",
          "315:         m_currentNodeFunc = pnodeFnc;",
          "316:         m_currentNodeDeferredFunc = NULL;",
          "317:         m_sourceContextInfo = nullptr;",
          "",
          "[Removed Lines]",
          "302:         pnodeFnc->sxFnc.ClearFlags();",
          "303:         pnodeFnc->sxFnc.SetDeclaration(false);",
          "304:         pnodeFnc->sxFnc.functionId   = 0;",
          "305:         pnodeFnc->sxFnc.astSize      = 0;",
          "306:         pnodeFnc->sxFnc.pnodeVars    = nullptr;",
          "307:         pnodeFnc->sxFnc.pnodeParams  = nullptr;",
          "308:         pnodeFnc->sxFnc.pnodeBody    = nullptr;",
          "309:         pnodeFnc->sxFnc.pnodeName    = nullptr;",
          "310:         pnodeFnc->sxFnc.pnodeRest    = nullptr;",
          "311:         pnodeFnc->sxFnc.deferredStub = nullptr;",
          "312:         pnodeFnc->sxFnc.SetIsGenerator(isGenerator);",
          "313:         pnodeFnc->sxFnc.SetIsAsync(isAsync);",
          "314:         m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "",
          "[Added Lines]",
          "302:         pnodeFnc->AsParseNodeFnc()->ClearFlags();",
          "303:         pnodeFnc->AsParseNodeFnc()->SetDeclaration(false);",
          "304:         pnodeFnc->AsParseNodeFnc()->functionId   = 0;",
          "305:         pnodeFnc->AsParseNodeFnc()->astSize      = 0;",
          "306:         pnodeFnc->AsParseNodeFnc()->pnodeVars    = nullptr;",
          "307:         pnodeFnc->AsParseNodeFnc()->pnodeParams  = nullptr;",
          "308:         pnodeFnc->AsParseNodeFnc()->pnodeBody    = nullptr;",
          "309:         pnodeFnc->AsParseNodeFnc()->pnodeName    = nullptr;",
          "310:         pnodeFnc->AsParseNodeFnc()->pnodeRest    = nullptr;",
          "311:         pnodeFnc->AsParseNodeFnc()->deferredStub = nullptr;",
          "312:         pnodeFnc->AsParseNodeFnc()->SetIsGenerator(isGenerator);",
          "313:         pnodeFnc->AsParseNodeFnc()->SetIsAsync(isAsync);",
          "314:         m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:         FinishParseBlock(block);",
          "324:         pnodeFnc->ichLim = m_pscan->IchLimTok();",
          "329:         if (m_token.tk != tkEOF)",
          "",
          "[Removed Lines]",
          "325:         pnodeFnc->sxFnc.cbLim = m_pscan->IecpLimTok();",
          "326:         pnodeFnc->sxFnc.pnodeVars = nullptr;",
          "",
          "[Added Lines]",
          "325:         pnodeFnc->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTok();",
          "326:         pnodeFnc->AsParseNodeFnc()->pnodeVars = nullptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "590:         {",
          "591:             FOREACH_DLIST_ENTRY(ParseNodePtr, ArenaAllocator, pnode, currBackgroundItem->RegExpNodeList())",
          "592:             {",
          "594:             }",
          "595:             NEXT_DLIST_ENTRY;",
          "596:         }",
          "",
          "[Removed Lines]",
          "593:                 Assert(pnode->sxPid.regexPattern == nullptr);",
          "",
          "[Added Lines]",
          "593:                 Assert(pnode->AsParseNodePid()->regexPattern == nullptr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "608:     FOREACH_DLIST_ENTRY(ParseNodePtr, ArenaAllocator, pnodeFgnd, this->fastScannedRegExpNodes)",
          "609:     {",
          "610:         Assert(pnodeFgnd->nop == knopRegExp);",
          "612:         bool quit = false;",
          "614:         while (!quit)",
          "",
          "[Removed Lines]",
          "611:         Assert(pnodeFgnd->sxPid.regexPattern != nullptr);",
          "",
          "[Added Lines]",
          "611:         Assert(pnodeFgnd->AsParseNodePid()->regexPattern != nullptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "635:                     if (pnodeFgnd->ichMin == pnodeBgnd->ichMin)",
          "636:                     {",
          "637:                         Assert(pnodeFgnd->ichLim == pnodeBgnd->ichLim);",
          "639:                     }",
          "640:                     quit = true;",
          "641:                     break;",
          "",
          "[Removed Lines]",
          "638:                         pnodeBgnd->sxPid.regexPattern = pnodeFgnd->sxPid.regexPattern;",
          "",
          "[Added Lines]",
          "638:                         pnodeBgnd->AsParseNodePid()->regexPattern = pnodeFgnd->AsParseNodePid()->regexPattern;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "661:         {",
          "662:             FOREACH_DLIST_ENTRY(ParseNodePtr, ArenaAllocator, pnode, currBackgroundItem->RegExpNodeList())",
          "663:             {",
          "665:             }",
          "666:             NEXT_DLIST_ENTRY;",
          "667:         }",
          "",
          "[Removed Lines]",
          "664:                 Assert(pnode->sxPid.regexPattern != nullptr);",
          "",
          "[Added Lines]",
          "664:                 Assert(pnode->AsParseNodePid()->regexPattern != nullptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "720: void Parser::InitBlockNode(ParseNodePtr pnode, int blockId, PnodeBlockType blockType)",
          "721: {",
          "722:     Assert(pnode->nop == knopBlock);",
          "736:     if (blockType != PnodeBlockType::Regular)",
          "737:     {",
          "",
          "[Removed Lines]",
          "723:     pnode->sxBlock.pnodeScopes = nullptr;",
          "724:     pnode->sxBlock.pnodeNext = nullptr;",
          "725:     pnode->sxBlock.scope = nullptr;",
          "726:     pnode->sxBlock.enclosingBlock = nullptr;",
          "727:     pnode->sxBlock.pnodeLexVars = nullptr;",
          "728:     pnode->sxBlock.pnodeStmt = nullptr;",
          "729:     pnode->sxBlock.pnodeLastValStmt = nullptr;",
          "731:     pnode->sxBlock.callsEval = false;",
          "732:     pnode->sxBlock.childCallsEval = false;",
          "733:     pnode->sxBlock.blockType = blockType;",
          "734:     pnode->sxBlock.blockId = blockId;",
          "",
          "[Added Lines]",
          "723:     pnode->AsParseNodeBlock()->pnodeScopes = nullptr;",
          "724:     pnode->AsParseNodeBlock()->pnodeNext = nullptr;",
          "725:     pnode->AsParseNodeBlock()->scope = nullptr;",
          "726:     pnode->AsParseNodeBlock()->enclosingBlock = nullptr;",
          "727:     pnode->AsParseNodeBlock()->pnodeLexVars = nullptr;",
          "728:     pnode->AsParseNodeBlock()->pnodeStmt = nullptr;",
          "729:     pnode->AsParseNodeBlock()->pnodeLastValStmt = nullptr;",
          "731:     pnode->AsParseNodeBlock()->callsEval = false;",
          "732:     pnode->AsParseNodeBlock()->childCallsEval = false;",
          "733:     pnode->AsParseNodeBlock()->blockType = blockType;",
          "734:     pnode->AsParseNodeBlock()->blockId = blockId;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "756: {",
          "757:     ParseNodePtr pnode = CreateNode(nop);",
          "761:     if (symbolType != STUnknown)",
          "762:     {",
          "764:     }",
          "766:     return pnode;",
          "",
          "[Removed Lines]",
          "759:     pnode->sxVar.InitDeclNode(pid, NULL);",
          "763:         pnode->sxVar.sym = AddDeclForPid(pnode, pid, symbolType, errorOnRedecl);",
          "",
          "[Added Lines]",
          "759:     pnode->AsParseNodeVar()->InitDeclNode(pid, NULL);",
          "763:         pnode->AsParseNodeVar()->sym = AddDeclForPid(pnode, pid, symbolType, errorOnRedecl);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "785:         if (m_pstmtCur->pstmtOuter && m_pstmtCur->pstmtOuter->GetNop() == knopSwitch)",
          "786:         {",
          "789:         }",
          "791:         fBlockScope = pnode->nop != knopVarDecl ||",
          "792:             (",
          "795:                 );",
          "796:     }",
          "797:     if (fBlockScope)",
          "",
          "[Removed Lines]",
          "788:             pnode->sxVar.isSwitchStmtDecl = true;",
          "793:                 !GetCurrentBlockInfo()->pnodeBlock->sxBlock.scope ||",
          "794:                 GetCurrentBlockInfo()->pnodeBlock->sxBlock.scope->GetScopeType() != ScopeType_GlobalEvalBlock",
          "",
          "[Added Lines]",
          "788:             pnode->AsParseNodeVar()->isSwitchStmtDecl = true;",
          "793:                 !GetCurrentBlockInfo()->pnodeBlock->AsParseNodeBlock()->scope ||",
          "794:                 GetCurrentBlockInfo()->pnodeBlock->AsParseNodeBlock()->scope->GetScopeType() != ScopeType_GlobalEvalBlock",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "803:         blockInfo = GetCurrentFunctionBlockInfo();",
          "804:     }",
          "808:     if (refForDecl == nullptr)",
          "809:     {",
          "810:         Error(ERRnoMemory);",
          "811:     }",
          "814:     {",
          "816:         Assert(this->m_reparsingLambdaParams);",
          "818:     }",
          "820:     if (blockInfo == GetCurrentBlockInfo())",
          "",
          "[Removed Lines]",
          "806:     refForDecl = this->FindOrAddPidRef(pid, blockInfo->pnodeBlock->sxBlock.blockId, GetCurrentFunctionNode()->sxFnc.functionId);",
          "813:     if (refForDecl->funcId != GetCurrentFunctionNode()->sxFnc.functionId)",
          "817:         refForDecl->funcId = GetCurrentFunctionNode()->sxFnc.functionId;",
          "",
          "[Added Lines]",
          "806:     refForDecl = this->FindOrAddPidRef(pid, blockInfo->pnodeBlock->AsParseNodeBlock()->blockId, GetCurrentFunctionNode()->AsParseNodeFnc()->functionId);",
          "813:     if (refForDecl->funcId != GetCurrentFunctionNode()->AsParseNodeFnc()->functionId)",
          "817:         refForDecl->funcId = GetCurrentFunctionNode()->AsParseNodeFnc()->functionId;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "825:     {",
          "826:         refForUse = this->PushPidRef(pid);",
          "827:     }",
          "829:     Symbol *sym = refForDecl->GetSym();",
          "830:     if (sym != nullptr)",
          "831:     {",
          "",
          "[Removed Lines]",
          "828:     pnode->sxVar.symRef = refForUse->GetSymRef();",
          "",
          "[Added Lines]",
          "828:     pnode->AsParseNodeVar()->symRef = refForUse->GetSymRef();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "834:         {",
          "835:         case knopLetDecl:",
          "836:         case knopConstDecl:",
          "838:             {",
          "840:                 Assert(errorOnRedecl);",
          "",
          "[Removed Lines]",
          "837:             if (!sym->GetDecl()->sxVar.isBlockScopeFncDeclVar && !sym->IsArguments())",
          "",
          "[Added Lines]",
          "837:             if (!sym->GetDecl()->AsParseNodeVar()->isBlockScopeFncDeclVar && !sym->IsArguments())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "874:                 break;",
          "875:             case knopVarDecl:",
          "878:                 {",
          "879:                     if (symbolType == STFormal ||",
          "880:                         (symbolType == STFunction && sym->GetSymbolType() != STFormal) ||",
          "",
          "[Removed Lines]",
          "877:                 if (errorOnRedecl || sym->GetDecl()->sxVar.isBlockScopeFncDeclVar || sym->IsArguments())",
          "",
          "[Added Lines]",
          "877:                 if (errorOnRedecl || sym->GetDecl()->AsParseNodeVar()->isBlockScopeFncDeclVar || sym->IsArguments())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "892:     }",
          "893:     else",
          "894:     {",
          "896:         if (scope == nullptr)",
          "897:         {",
          "899:             scope = Anew(&m_nodeAllocator, Scope, &m_nodeAllocator, ScopeType_Block);",
          "900:             if (this->IsCurBlockInLoop())",
          "901:             {",
          "902:                 scope->SetIsBlockInLoop();",
          "903:             }",
          "905:             PushScope(scope);",
          "906:         }",
          "",
          "[Removed Lines]",
          "895:         Scope *scope = blockInfo->pnodeBlock->sxBlock.scope;",
          "898:             Assert(blockInfo->pnodeBlock->sxBlock.blockType == PnodeBlockType::Regular);",
          "904:             blockInfo->pnodeBlock->sxBlock.scope = scope;",
          "",
          "[Added Lines]",
          "895:         Scope *scope = blockInfo->pnodeBlock->AsParseNodeBlock()->scope;",
          "898:             Assert(blockInfo->pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Regular);",
          "904:             blockInfo->pnodeBlock->AsParseNodeBlock()->scope = scope;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "909:         if (scope->GetScopeType() == ScopeType_GlobalEvalBlock)",
          "910:         {",
          "911:             Assert(fBlockScope);",
          "914:             CheckRedeclarationErrorForBlockId(pid, 0);",
          "915:         }",
          "",
          "[Removed Lines]",
          "912:             Assert(scope->GetEnclosingScope() == m_currentNodeProg->sxProg.scope);",
          "",
          "[Added Lines]",
          "912:             Assert(scope->GetEnclosingScope() == m_currentNodeProg->AsParseNodeProg()->scope);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "922:             Assert(!fBlockScope || (this->m_grfscr & fscrConsoleScopeEval) == fscrConsoleScopeEval);",
          "923:             CheckRedeclarationErrorForBlockId(pid, 1);",
          "924:             }",
          "926:             && scope->GetScopeType() == ScopeType_FunctionBody",
          "927:             && (pnode->nop == knopLetDecl || pnode->nop == knopConstDecl))",
          "928:         {",
          "932:         }",
          "934:         if ((scope->GetScopeType() == ScopeType_FunctionBody || scope->GetScopeType() == ScopeType_Parameter) && symbolType != STFunction)",
          "935:         {",
          "936:             AnalysisAssert(pnodeFnc);",
          "941:             {",
          "946:             }",
          "947:         }",
          "",
          "[Removed Lines]",
          "925:         else if (!pnodeFnc->sxFnc.IsBodyAndParamScopeMerged()",
          "931:             CheckRedeclarationErrorForBlockId(pid, pnodeFnc->sxFnc.pnodeScopes->sxBlock.blockId);",
          "937:             if (pnodeFnc->sxFnc.pnodeName &&",
          "938:                 pnodeFnc->sxFnc.pnodeName->nop == knopVarDecl &&",
          "939:                 pnodeFnc->sxFnc.pnodeName->sxVar.pid == pid &&",
          "940:                 (pnodeFnc->sxFnc.IsBodyAndParamScopeMerged() || scope->GetScopeType() == ScopeType_Parameter))",
          "945:                 m_currentNodeFunc->sxFnc.SetNameIsHidden();",
          "",
          "[Added Lines]",
          "925:         else if (!pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged()",
          "931:             CheckRedeclarationErrorForBlockId(pid, pnodeFnc->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->blockId);",
          "937:             if (pnodeFnc->AsParseNodeFnc()->pnodeName &&",
          "938:                 pnodeFnc->AsParseNodeFnc()->pnodeName->nop == knopVarDecl &&",
          "939:                 pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid == pid &&",
          "940:                 (pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged() || scope->GetScopeType() == ScopeType_Parameter))",
          "945:                 m_currentNodeFunc->AsParseNodeFnc()->SetNameIsHidden();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1005:         switch (pnode->nop)",
          "1006:         {",
          "1007:         case knopName:",
          "1010:         case knopVarDecl:",
          "1013:         case knopDot:",
          "1017:         case knopComma:",
          "1020:             break;",
          "1022:         default:",
          "",
          "[Removed Lines]",
          "1008:             return pnode->sxPid.pid;",
          "1011:             return pnode->sxVar.pid;",
          "1014:             Assert(pnode->sxBin.pnode2->nop == knopName);",
          "1015:             return pnode->sxBin.pnode2->sxPid.pid;",
          "1019:             pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "1008:             return pnode->AsParseNodePid()->pid;",
          "1011:             return pnode->AsParseNodeVar()->pid;",
          "1014:             Assert(pnode->AsParseNodeBin()->pnode2->nop == knopName);",
          "1015:             return pnode->AsParseNodeBin()->pnode2->AsParseNodePid()->pid;",
          "1019:             pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1062:     ParseNodePtr pnode = (ParseNodePtr)alloc->Alloc(allocSize);",
          "1063:     InitNode(nop, pnode);",
          "1070:     if (!PHASE_OFF1(Js::ByteCodeConcatExprOptPhase))",
          "",
          "[Removed Lines]",
          "1065:     pnode->sxBin.pnodeNext = nullptr;",
          "1066:     pnode->sxBin.pnode1 = pnode1;",
          "1067:     pnode->sxBin.pnode2 = pnode2;",
          "",
          "[Added Lines]",
          "1065:     pnode->AsParseNodeBin()->pnodeNext = nullptr;",
          "1066:     pnode->AsParseNodeBin()->pnode1 = pnode1;",
          "1067:     pnode->AsParseNodeBin()->pnode2 = pnode2;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1126:     InitNode(nop, pnode);",
          "1129:     if (nullptr == pnode1)",
          "1130:     {",
          "",
          "[Removed Lines]",
          "1128:     pnode->sxUni.pnode1 = pnode1;",
          "",
          "[Added Lines]",
          "1128:     pnode->AsParseNodeUni()->pnode1 = pnode1;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1185: ParseNodePtr Parser::CreateSuperReferenceNode(OpCode nop, ParseNodePtr pnode1, ParseNodePtr pnode2)",
          "1186: {",
          "1187:     Assert(!this->m_deferringAST);",
          "1189:     Assert(pnode2 != nullptr);",
          "1190:     Assert(nop == knopDot || nop == knopIndex);",
          "",
          "[Removed Lines]",
          "1188:     Assert(pnode1 && pnode1->isSpecialName && pnode1->sxSpecialName.isSuper);",
          "",
          "[Added Lines]",
          "1188:     Assert(pnode1 && pnode1->isSpecialName && pnode1->AsParseNodeSpecialName()->isSuper);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1197:     pnode->ichMin = pnode1->ichMin;",
          "1198:     pnode->ichLim = pnode2->ichLim;",
          "1201:     return pnode;",
          "1202: }",
          "",
          "[Removed Lines]",
          "1199:     pnode->sxSuperReference.pnodeThis = nullptr;",
          "",
          "[Added Lines]",
          "1199:     pnode->AsParseNodeSuperReference()->pnodeThis = nullptr;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1256:     InitNode(nop, pnode);",
          "1267:     pnode->ichMin = ichMin;",
          "1268:     pnode->ichLim = ichLim;",
          "",
          "[Removed Lines]",
          "1258:     pnode->sxCall.pnodeTarget = pnode1;",
          "1259:     pnode->sxCall.pnodeArgs = pnode2;",
          "1260:     pnode->sxCall.argCount = 0;",
          "1261:     pnode->sxCall.spreadArgCount = 0;",
          "1262:     pnode->sxCall.callOfConstants = false;",
          "1263:     pnode->sxCall.isApplyCall = false;",
          "1264:     pnode->sxCall.isEvalCall = false;",
          "1265:     pnode->sxCall.isSuperCall = false;",
          "1266:     pnode->sxCall.hasDestructuring = false;",
          "",
          "[Added Lines]",
          "1258:     pnode->AsParseNodeCall()->pnodeTarget = pnode1;",
          "1259:     pnode->AsParseNodeCall()->pnodeArgs = pnode2;",
          "1260:     pnode->AsParseNodeCall()->argCount = 0;",
          "1261:     pnode->AsParseNodeCall()->spreadArgCount = 0;",
          "1262:     pnode->AsParseNodeCall()->callOfConstants = false;",
          "1263:     pnode->AsParseNodeCall()->isApplyCall = false;",
          "1264:     pnode->AsParseNodeCall()->isEvalCall = false;",
          "1265:     pnode->AsParseNodeCall()->isSuperCall = false;",
          "1266:     pnode->AsParseNodeCall()->hasDestructuring = false;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1275:     Assert(!this->m_deferringAST);",
          "1277:     ParseNodePtr pnode = CreateNode(knopStr);",
          "1279:     pnode->grfpn |= PNodeFlags::fpnCanFlattenConcatExpr;",
          "1280:     return pnode;",
          "1281: }",
          "",
          "[Removed Lines]",
          "1278:     pnode->sxPid.pid=pid;",
          "",
          "[Added Lines]",
          "1278:     pnode->AsParseNodePid()->pid=pid;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1283: ParseNodePtr Parser::CreateIntNode(int32 lw)",
          "1284: {",
          "1285:     ParseNodePtr pnode = CreateNode(knopInt);",
          "1287:     return pnode;",
          "1288: }",
          "",
          "[Removed Lines]",
          "1286:     pnode->sxInt.lw = lw;",
          "",
          "[Added Lines]",
          "1286:     pnode->AsParseNodeInt()->lw = lw;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1350:         }",
          "1351:         if (pnode1->nop == knopDot || pnode1->nop == knopIndex)",
          "1352:         {",
          "1354:         }",
          "1355:     }",
          "1356:     return CreateCallNode(nop, pnode1, pnode2, ichMin, ichLim);",
          "",
          "[Removed Lines]",
          "1353:             this->CheckArguments(pnode1->sxBin.pnode1);",
          "",
          "[Added Lines]",
          "1353:             this->CheckArguments(pnode1->AsParseNodeBin()->pnode1);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1359: ParseNodePtr Parser::CreateSuperCallNode(ParseNodePtr pnode1, ParseNodePtr pnode2)",
          "1360: {",
          "1361:     Assert(!this->m_deferringAST);",
          "1364:     DebugOnly(VerifyNodeSize(knopSuperCall, kcbPnSuperCall));",
          "1365:     ParseNodePtr pnode = (ParseNodePtr)m_nodeAllocator.Alloc(kcbPnSuperCall);",
          "",
          "[Removed Lines]",
          "1362:     Assert(pnode1 && pnode1->isSpecialName && pnode1->sxSpecialName.isSuper);",
          "",
          "[Added Lines]",
          "1362:     Assert(pnode1 && pnode1->isSpecialName && pnode1->AsParseNodeSpecialName()->isSuper);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1370:     InitNode(knopCall, pnode);",
          "1383:     pnode->ichMin = pnode1->ichMin;",
          "1384:     pnode->ichLim = pnode2 == nullptr ? pnode1->ichLim : pnode2->ichLim;",
          "",
          "[Removed Lines]",
          "1372:     pnode->sxCall.pnodeTarget = pnode1;",
          "1373:     pnode->sxCall.pnodeArgs = pnode2;",
          "1374:     pnode->sxCall.argCount = 0;",
          "1375:     pnode->sxCall.spreadArgCount = 0;",
          "1376:     pnode->sxCall.callOfConstants = false;",
          "1377:     pnode->sxCall.isApplyCall = false;",
          "1378:     pnode->sxCall.isEvalCall = false;",
          "1379:     pnode->sxCall.isSuperCall = true;",
          "1380:     pnode->sxSuperCall.pnodeThis = nullptr;",
          "1381:     pnode->sxSuperCall.pnodeNewTarget = nullptr;",
          "",
          "[Added Lines]",
          "1372:     pnode->AsParseNodeCall()->pnodeTarget = pnode1;",
          "1373:     pnode->AsParseNodeCall()->pnodeArgs = pnode2;",
          "1374:     pnode->AsParseNodeCall()->argCount = 0;",
          "1375:     pnode->AsParseNodeCall()->spreadArgCount = 0;",
          "1376:     pnode->AsParseNodeCall()->callOfConstants = false;",
          "1377:     pnode->AsParseNodeCall()->isApplyCall = false;",
          "1378:     pnode->AsParseNodeCall()->isEvalCall = false;",
          "1379:     pnode->AsParseNodeCall()->isSuperCall = true;",
          "1380:     pnode->AsParseNodeSuperCall()->pnodeThis = nullptr;",
          "1381:     pnode->AsParseNodeSuperCall()->pnodeNewTarget = nullptr;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1391:     Assert(!this->m_deferringAST);",
          "1393:     ParseNodePtr pnode = CreateNodeWithScanner<knopStr>();",
          "1395:     pnode->grfpn |= PNodeFlags::fpnCanFlattenConcatExpr;",
          "1396:     return pnode;",
          "1397: }",
          "",
          "[Removed Lines]",
          "1394:     pnode->sxPid.pid=pid;",
          "",
          "[Added Lines]",
          "1394:     pnode->AsParseNodePid()->pid=pid;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1400: {",
          "1401:     Assert(!this->m_deferringAST);",
          "1402:     ParseNodePtr pnode = CreateNodeWithScanner<knopInt>();",
          "1404:     return pnode;",
          "1405: }",
          "1407: ParseNodePtr Parser::CreateTempNode(ParseNode* initExpr)",
          "1408: {",
          "1409:     ParseNodePtr pnode = CreateNode(knopTemp, (charcount_t)0);",
          "1412:     return pnode;",
          "1413: }",
          "",
          "[Removed Lines]",
          "1403:     pnode->sxInt.lw = lw;",
          "1410:     pnode->sxVar.pnodeInit =initExpr;",
          "1411:     pnode->sxVar.pnodeNext = nullptr;",
          "",
          "[Added Lines]",
          "1403:     pnode->AsParseNodeInt()->lw = lw;",
          "1410:     pnode->AsParseNodeVar()->pnodeInit =initExpr;",
          "1411:     pnode->AsParseNodeVar()->pnodeNext = nullptr;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1445:     ParseNodePtr *const ppnodeVarSave = m_ppnodeVar;",
          "1448:     while (*m_ppnodeVar != nullptr)",
          "1449:     {",
          "1451:     }",
          "1453:     ParseNodePtr pnode = CreateVarDeclNode(pid, STUnknown, false, 0, /* checkReDecl = */ false);",
          "",
          "[Removed Lines]",
          "1447:     m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "1450:         m_ppnodeVar = &(*m_ppnodeVar)->sxVar.pnodeNext;",
          "",
          "[Added Lines]",
          "1447:     m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "1450:         m_ppnodeVar = &(*m_ppnodeVar)->AsParseNodeVar()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1460: ParseNodePtr Parser::CreateModuleImportDeclNode(IdentPtr localName)",
          "1461: {",
          "1462:     ParseNodePtr declNode = CreateBlockScopedDeclNode(localName, knopConstDecl);",
          "1465:     sym->SetIsModuleExportStorage(true);",
          "1466:     sym->SetIsModuleImport(true);",
          "",
          "[Removed Lines]",
          "1463:     Symbol* sym = declNode->sxVar.sym;",
          "",
          "[Added Lines]",
          "1463:     Symbol* sym = declNode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1476:     AssertMem(m_ppnodeVar);",
          "1479:     if (nullptr != pid)",
          "1480:     {",
          "1482:         AssertMem(pid);",
          "1484:         CheckPidIsValid(pid, autoArgumentsObject);",
          "1485:     }",
          "",
          "[Removed Lines]",
          "1477:     pnode->sxVar.pnodeNext = *m_ppnodeVar;",
          "1483:         m_ppnodeVar = &pnode->sxVar.pnodeNext;",
          "",
          "[Added Lines]",
          "1477:     pnode->AsParseNodeVar()->pnodeNext = *m_ppnodeVar;",
          "1483:         m_ppnodeVar = &pnode->AsParseNodeVar()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1513:     AssertMem(m_currentBlockInfo->m_ppnodeLex);",
          "1517: }",
          "1519: void Parser::SetCurrentStatement(StmtNest *stmt)",
          "",
          "[Removed Lines]",
          "1515:     m_currentBlockInfo->m_ppnodeLex = &pnode->sxVar.pnodeNext;",
          "1516:     pnode->sxVar.pnodeNext = nullptr;",
          "",
          "[Added Lines]",
          "1515:     m_currentBlockInfo->m_ppnodeLex = &pnode->AsParseNodeVar()->pnodeNext;",
          "1516:     pnode->AsParseNodeVar()->pnodeNext = nullptr;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1552: ParseNodePtr Parser::StartParseBlockHelper(PnodeBlockType blockType, Scope *scope, LabelId* pLabelId)",
          "1553: {",
          "1554:     ParseNodePtr pnodeBlock = CreateBlockNode(blockType);",
          "1556:     BlockInfoStack *newBlockInfo = PushBlockInfo(pnodeBlock);",
          "1558:     PushStmt<buildAST>(&newBlockInfo->pstmt, pnodeBlock, knopBlock, pLabelId);",
          "",
          "[Removed Lines]",
          "1555:     pnodeBlock->sxBlock.scope = scope;",
          "",
          "[Added Lines]",
          "1555:     pnodeBlock->AsParseNodeBlock()->scope = scope;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1578: {",
          "",
          "[Removed Lines]",
          "1581:     pnodeBlock->sxBlock.pnodeScopes = nullptr;",
          "1582:     pnodeBlock->sxBlock.pnodeNext = nullptr;",
          "",
          "[Added Lines]",
          "1581:     pnodeBlock->AsParseNodeBlock()->pnodeScopes = nullptr;",
          "1582:     pnodeBlock->AsParseNodeBlock()->pnodeNext = nullptr;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1590:         Assert(*m_ppnodeExprScope == nullptr);",
          "1593:     }",
          "1594:     else",
          "1595:     {",
          "1596:         Assert(m_ppnodeScope);",
          "1597:         Assert(*m_ppnodeScope == nullptr);",
          "1602:     }",
          "1607:     m_ppnodeExprScope = nullptr;",
          "1608: }",
          "",
          "[Removed Lines]",
          "1605:     m_ppnodeScope = &pnodeBlock->sxBlock.pnodeScopes;",
          "",
          "[Added Lines]",
          "1605:     m_ppnodeScope = &pnodeBlock->AsParseNodeBlock()->pnodeScopes;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1629:     BlockInfoStack* outerBlockInfo = m_currentBlockInfo->pBlockInfoOuter;",
          "1630:     if (outerBlockInfo != nullptr && outerBlockInfo->pnodeBlock != nullptr",
          "1633:     {",
          "1636:         {",
          "1639:         }",
          "1640:     }",
          "",
          "[Removed Lines]",
          "1631:         && outerBlockInfo->pnodeBlock->sxBlock.scope != nullptr",
          "1632:         && outerBlockInfo->pnodeBlock->sxBlock.scope->GetScopeType() == ScopeType_CatchParamPattern)",
          "1635:         for (ParseNodePtr pnode = m_currentBlockInfo->pBlockInfoOuter->pnodeBlock->sxBlock.pnodeLexVars; pnode; pnode = pnode->sxVar.pnodeNext)",
          "1637:             PidRefStack* ref = PushPidRef(pnode->sxVar.sym->GetPid());",
          "1638:             ref->SetSym(pnode->sxVar.sym);",
          "",
          "[Added Lines]",
          "1631:         && outerBlockInfo->pnodeBlock->AsParseNodeBlock()->scope != nullptr",
          "1632:         && outerBlockInfo->pnodeBlock->AsParseNodeBlock()->scope->GetScopeType() == ScopeType_CatchParamPattern)",
          "1635:         for (ParseNodePtr pnode = m_currentBlockInfo->pBlockInfoOuter->pnodeBlock->AsParseNodeBlock()->pnodeLexVars; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "1637:             PidRefStack* ref = PushPidRef(pnode->AsParseNodeVar()->sym->GetPid());",
          "1638:             ref->SetSym(pnode->AsParseNodeVar()->sym);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1644:     if (buildAST)",
          "1645:     {",
          "1646:         PushFuncBlockScope(pnodeBlock, &ppnodeScopeSave, &ppnodeExprScopeSave);",
          "1648:     }",
          "1650:     ParseStmtList<buildAST>(ppnodeList);",
          "",
          "[Removed Lines]",
          "1647:         ppnodeList = &pnodeBlock->sxBlock.pnodeStmt;",
          "",
          "[Added Lines]",
          "1647:         ppnodeList = &pnodeBlock->AsParseNodeBlock()->pnodeStmt;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1681:     ParseNode* pnode = CreateSpecialNameNode(pid);",
          "1682:     pnode->ichMin = ichMin;",
          "1683:     pnode->ichLim = ichLim;",
          "1686:     if (pid == wellKnownPropertyPids._this)",
          "1687:     {",
          "1689:     }",
          "1690:     else if (pid == wellKnownPropertyPids._super || pid == wellKnownPropertyPids._superConstructor)",
          "1691:     {",
          "1693:     }",
          "1695:     return pnode;",
          "",
          "[Removed Lines]",
          "1684:     pnode->sxPid.SetSymRef(ref);",
          "1688:         pnode->sxSpecialName.isThis = true;",
          "1692:         pnode->sxSpecialName.isSuper = true;",
          "",
          "[Added Lines]",
          "1684:     pnode->AsParseNodePid()->SetSymRef(ref);",
          "1688:         pnode->AsParseNodeSpecialName()->isThis = true;",
          "1692:         pnode->AsParseNodeSpecialName()->isSuper = true;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1702:     PidRefStack* ref = pid->GetTopRef();",
          "1706:     {",
          "1707:         return this->CreateSpecialVarDeclNode(pnodeFnc, pid);",
          "1708:     }",
          "",
          "[Removed Lines]",
          "1705:     if (forceCreate || (ref && ref->GetScopeId() >= m_currentBlockInfo->pnodeBlock->sxBlock.blockId))",
          "",
          "[Added Lines]",
          "1705:     if (forceCreate || (ref && ref->GetScopeId() >= m_currentBlockInfo->pnodeBlock->AsParseNodeBlock()->blockId))",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1713: void Parser::CreateSpecialSymbolDeclarations(ParseNodePtr pnodeFnc)",
          "1714: {",
          "1717:     {",
          "1718:         return;",
          "1719:     }",
          "1725:     if (varDeclNode)",
          "1726:     {",
          "1730:         {",
          "1732:         }",
          "1733:     }",
          "1737:     if (varDeclNode)",
          "1738:     {",
          "1740:     }",
          "1743:     varDeclNode = CreateSpecialVarDeclIfNeeded(pnodeFnc, wellKnownPropertyPids._super);",
          "1744:     if (varDeclNode)",
          "1745:     {",
          "1747:     }",
          "1751:     {",
          "1752:         varDeclNode = CreateSpecialVarDeclIfNeeded(pnodeFnc, wellKnownPropertyPids._superConstructor);",
          "1753:         if (varDeclNode)",
          "1754:         {",
          "1756:         }",
          "1757:     }",
          "1758: }",
          "",
          "[Removed Lines]",
          "1716:     if (pnodeFnc->sxFnc.IsLambda())",
          "1721:     bool isTopLevelEventHandler = (this->m_grfscr & fscrImplicitThis || this->m_grfscr & fscrImplicitParents) && !pnodeFnc->sxFnc.IsNested();",
          "1724:     ParseNodePtr varDeclNode = CreateSpecialVarDeclIfNeeded(pnodeFnc, wellKnownPropertyPids._this, pnodeFnc->sxFnc.IsClassConstructor() || isTopLevelEventHandler);",
          "1727:         varDeclNode->sxPid.sym->SetIsThis(true);",
          "1729:         if (pnodeFnc->sxFnc.IsDerivedClassConstructor())",
          "1731:             varDeclNode->sxPid.sym->SetNeedDeclaration(true);",
          "1736:     varDeclNode = CreateSpecialVarDeclIfNeeded(pnodeFnc, wellKnownPropertyPids._newTarget, pnodeFnc->sxFnc.IsClassConstructor());",
          "1739:         varDeclNode->sxPid.sym->SetIsNewTarget(true);",
          "1746:         varDeclNode->sxPid.sym->SetIsSuper(true);",
          "1750:     if (pnodeFnc->sxFnc.IsDerivedClassConstructor())",
          "1755:             varDeclNode->sxPid.sym->SetIsSuperConstructor(true);",
          "",
          "[Added Lines]",
          "1716:     if (pnodeFnc->AsParseNodeFnc()->IsLambda())",
          "1721:     bool isTopLevelEventHandler = (this->m_grfscr & fscrImplicitThis || this->m_grfscr & fscrImplicitParents) && !pnodeFnc->AsParseNodeFnc()->IsNested();",
          "1724:     ParseNodePtr varDeclNode = CreateSpecialVarDeclIfNeeded(pnodeFnc, wellKnownPropertyPids._this, pnodeFnc->AsParseNodeFnc()->IsClassConstructor() || isTopLevelEventHandler);",
          "1727:         varDeclNode->AsParseNodeVar()->sym->SetIsThis(true);",
          "1729:         if (pnodeFnc->AsParseNodeFnc()->IsDerivedClassConstructor())",
          "1731:             varDeclNode->AsParseNodeVar()->sym->SetNeedDeclaration(true);",
          "1736:     varDeclNode = CreateSpecialVarDeclIfNeeded(pnodeFnc, wellKnownPropertyPids._newTarget, pnodeFnc->AsParseNodeFnc()->IsClassConstructor());",
          "1739:         varDeclNode->AsParseNodeVar()->sym->SetIsNewTarget(true);",
          "1746:         varDeclNode->AsParseNodeVar()->sym->SetIsSuper(true);",
          "1750:     if (pnodeFnc->AsParseNodeFnc()->IsDerivedClassConstructor())",
          "1755:             varDeclNode->AsParseNodeVar()->sym->SetIsSuperConstructor(true);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1776:     PopBlockInfo();",
          "1779:     if (scope)",
          "1780:     {",
          "1781:         PopScope(scope);",
          "",
          "[Removed Lines]",
          "1778:     Scope *scope = pnodeBlock->sxBlock.scope;",
          "",
          "[Added Lines]",
          "1778:     Scope *scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1785: void Parser::FinishParseFncExprScope(ParseNodePtr pnodeFnc, ParseNodePtr pnodeFncExprScope)",
          "1786: {",
          "1789:     if (pnodeName)",
          "1790:     {",
          "1791:         Assert(pnodeName->nop == knopVarDecl);",
          "1793:     }",
          "1794:     FinishParseBlock(pnodeFncExprScope);",
          "1795: }",
          "",
          "[Removed Lines]",
          "1787:     int fncExprScopeId = pnodeFncExprScope->sxBlock.blockId;",
          "1788:     ParseNodePtr pnodeName = pnodeFnc->sxFnc.pnodeName;",
          "1792:         BindPidRefsInScope(pnodeName->sxVar.pid, pnodeName->sxVar.sym, fncExprScopeId, m_nextBlockId - 1);",
          "",
          "[Added Lines]",
          "1787:     int fncExprScopeId = pnodeFncExprScope->AsParseNodeBlock()->blockId;",
          "1788:     ParseNodePtr pnodeName = pnodeFnc->AsParseNodeFnc()->pnodeName;",
          "1792:         BindPidRefsInScope(pnodeName->AsParseNodeVar()->pid, pnodeName->AsParseNodeVar()->sym, fncExprScopeId, m_nextBlockId - 1);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1798: void Parser::BindPidRefs(BlockInfoStack *blockInfo, uint maxBlockId)",
          "1799: {",
          "1804:     if (scope)",
          "1805:     {",
          "1806:         auto bindPidRefs = [blockId, maxBlockId, this](Symbol *sym)",
          "",
          "[Removed Lines]",
          "1801:     int blockId = blockInfo->pnodeBlock->sxBlock.blockId;",
          "1803:     Scope *scope = blockInfo->pnodeBlock->sxBlock.scope;",
          "",
          "[Added Lines]",
          "1801:     int blockId = blockInfo->pnodeBlock->AsParseNodeBlock()->blockId;",
          "1803:     Scope *scope = blockInfo->pnodeBlock->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1816:             case knopVarDecl:",
          "1817:             case knopLetDecl:",
          "1818:             case knopConstDecl:",
          "1820:                 if (backgroundPidRef)",
          "1821:                 {",
          "1822:                     pid = this->m_pscan->m_phtbl->FindExistingPid(pid->Psz(), pid->Psz() + pid->Cch(), pid->Cch(), pid->Hash(), nullptr, nullptr",
          "",
          "[Removed Lines]",
          "1819:                 pid = pnode->sxVar.pid;",
          "",
          "[Added Lines]",
          "1819:                 pid = pnode->AsParseNodeVar()->pid;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1832:                 this->BindPidRefsInScope(pid, sym, blockId, maxBlockId);",
          "1833:                 break;",
          "1834:             case knopName:",
          "1836:                 if (backgroundPidRef)",
          "1837:                 {",
          "1838:                     pid = this->m_pscan->m_phtbl->FindExistingPid(pid->Psz(), pid->Psz() + pid->Cch(), pid->Cch(), pid->Hash(), nullptr, nullptr",
          "",
          "[Removed Lines]",
          "1835:                 pid = pnode->sxPid.pid;",
          "",
          "[Added Lines]",
          "1835:                 pid = pnode->AsParseNodePid()->pid;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1860: void Parser::BindPidRefsInScope(IdentPtr pid, Symbol *sym, int blockId, uint maxBlockId)",
          "1861: {",
          "1862:     PidRefStack *ref, *nextRef, *lastRef = nullptr;",
          "1864:     Assert(sym);",
          "1866:     if (pid->GetIsModuleExport() && IsTopLevelModuleFunc())",
          "",
          "[Removed Lines]",
          "1863:     Js::LocalFunctionId funcId = GetCurrentFunctionNode()->sxFnc.functionId;",
          "",
          "[Added Lines]",
          "1863:     Js::LocalFunctionId funcId = GetCurrentFunctionNode()->AsParseNodeFnc()->functionId;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1895:             sym->PromoteAssignmentState();",
          "1896:             if (sym->GetIsFormal())",
          "1897:             {",
          "1899:             }",
          "1900:         }",
          "",
          "[Removed Lines]",
          "1898:                 GetCurrentFunctionNode()->sxFnc.SetHasAnyWriteToFormals(true);",
          "",
          "[Added Lines]",
          "1898:                 GetCurrentFunctionNode()->AsParseNodeFnc()->SetHasAnyWriteToFormals(true);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1922:         if (m_currentNodeFunc && doesEscape && hasFuncAssignment)",
          "1923:         {",
          "1924:             if (m_sourceContextInfo ?",
          "1926:                     !PHASE_OFF1(Js::DisableStackFuncOnDeferredEscapePhase))",
          "1927:             {",
          "1929:             }",
          "1930:         }",
          "",
          "[Removed Lines]",
          "1925:                     !PHASE_OFF_RAW(Js::DisableStackFuncOnDeferredEscapePhase, m_sourceContextInfo->sourceContextId, m_currentNodeFunc->sxFnc.functionId) :",
          "1928:                 m_currentNodeFunc->sxFnc.SetNestedFuncEscapes();",
          "",
          "[Added Lines]",
          "1925:                     !PHASE_OFF_RAW(Js::DisableStackFuncOnDeferredEscapePhase, m_sourceContextInfo->sourceContextId, m_currentNodeFunc->AsParseNodeFnc()->functionId) :",
          "1928:                 m_currentNodeFunc->AsParseNodeFnc()->SetNestedFuncEscapes();",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1966: void Parser::SetNestedFuncEscapes() const",
          "1967: {",
          "1968:     if (m_sourceContextInfo ?",
          "1970:             !PHASE_OFF1(Js::DisableStackFuncOnDeferredEscapePhase))",
          "1971:     {",
          "1973:     }",
          "1974: }",
          "",
          "[Removed Lines]",
          "1969:             !PHASE_OFF_RAW(Js::DisableStackFuncOnDeferredEscapePhase, m_sourceContextInfo->sourceContextId, m_currentNodeFunc->sxFnc.functionId) :",
          "1972:         m_currentNodeFunc->sxFnc.SetNestedFuncEscapes();",
          "",
          "[Added Lines]",
          "1969:             !PHASE_OFF_RAW(Js::DisableStackFuncOnDeferredEscapePhase, m_sourceContextInfo->sourceContextId, m_currentNodeFunc->AsParseNodeFnc()->functionId) :",
          "1972:         m_currentNodeFunc->AsParseNodeFnc()->SetNestedFuncEscapes();",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1987:     newBlockInfo->pnodeBlock = pnodeBlock;",
          "1988:     newBlockInfo->pBlockInfoOuter = m_currentBlockInfo;",
          "1992:     {",
          "1993:         newBlockInfo->pBlockInfoFunction = newBlockInfo;",
          "1994:     }",
          "",
          "[Removed Lines]",
          "1989:     newBlockInfo->m_ppnodeLex = &pnodeBlock->sxBlock.pnodeLexVars;",
          "1991:     if (pnodeBlock->sxBlock.blockType != PnodeBlockType::Regular)",
          "",
          "[Added Lines]",
          "1989:     newBlockInfo->m_ppnodeLex = &pnodeBlock->AsParseNodeBlock()->pnodeLexVars;",
          "1991:     if (pnodeBlock->AsParseNodeBlock()->blockType != PnodeBlockType::Regular)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2012: void Parser::PushDynamicBlock()",
          "2013: {",
          "2014:     Assert(GetCurrentBlock());",
          "2016:     if (m_currentDynamicBlock && m_currentDynamicBlock->id == blockId)",
          "2017:     {",
          "2018:         return;",
          "",
          "[Removed Lines]",
          "2015:     int blockId = GetCurrentBlock()->sxBlock.blockId;",
          "",
          "[Added Lines]",
          "2015:     int blockId = GetCurrentBlock()->AsParseNodeBlock()->blockId;",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2031: void Parser::PopDynamicBlock()",
          "2032: {",
          "2033:     int blockId = GetCurrentDynamicBlockId();",
          "2035:     {",
          "2036:         return;",
          "2037:     }",
          "",
          "[Removed Lines]",
          "2034:     if (GetCurrentBlock()->sxBlock.blockId != blockId || blockId == -1)",
          "",
          "[Added Lines]",
          "2034:     if (GetCurrentBlock()->AsParseNodeBlock()->blockId != blockId || blockId == -1)",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2064:     }",
          "2065:     else",
          "2066:     {",
          "2068:             \"Most likely we are trying to find a syntax error, related to 'let' or 'const' in deferred parsing mode with disabled support of 'let' and 'const'\");",
          "2069:         return m_currentNodeProg;",
          "2070:     }",
          "",
          "[Removed Lines]",
          "2067:         AssertMsg(GetFunctionBlock()->sxBlock.blockType == PnodeBlockType::Global,",
          "",
          "[Added Lines]",
          "2067:         AssertMsg(GetFunctionBlock()->AsParseNodeBlock()->blockType == PnodeBlockType::Global,",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2171: {",
          "2172:     if (m_currentNodeFunc && this->NodeIsIdent(pnode, wellKnownPropertyPids.arguments))",
          "2173:     {",
          "2175:     }",
          "2176: }",
          "",
          "[Removed Lines]",
          "2174:         m_currentNodeFunc->sxFnc.SetHasHeapArguments();",
          "",
          "[Added Lines]",
          "2174:         m_currentNodeFunc->AsParseNodeFnc()->SetHasHeapArguments();",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2182:     {",
          "2183:         if (pnodeFnc != nullptr && pnodeFnc != m_currentNodeProg)",
          "2184:         {",
          "2186:         }",
          "2187:         else",
          "2188:         {",
          "",
          "[Removed Lines]",
          "2185:             pnodeFnc->sxFnc.SetUsesArguments(TRUE);",
          "",
          "[Added Lines]",
          "2185:             pnodeFnc->AsParseNodeFnc()->SetUsesArguments(TRUE);",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2384: IdentPtrList* Parser::GetRequestedModulesList()",
          "2385: {",
          "2387: }",
          "2389: ModuleImportOrExportEntryList* Parser::GetModuleImportEntryList()",
          "2390: {",
          "2392: }",
          "2394: ModuleImportOrExportEntryList* Parser::GetModuleLocalExportEntryList()",
          "2395: {",
          "2397: }",
          "2399: ModuleImportOrExportEntryList* Parser::GetModuleIndirectExportEntryList()",
          "2400: {",
          "2402: }",
          "2404: ModuleImportOrExportEntryList* Parser::GetModuleStarExportEntryList()",
          "2405: {",
          "2407: }",
          "2409: IdentPtrList* Parser::EnsureRequestedModulesList()",
          "2410: {",
          "2412:     {",
          "2414:     }",
          "2416: }",
          "2418: ModuleImportOrExportEntryList* Parser::EnsureModuleImportEntryList()",
          "2419: {",
          "2421:     {",
          "2423:     }",
          "2425: }",
          "2427: ModuleImportOrExportEntryList* Parser::EnsureModuleLocalExportEntryList()",
          "2428: {",
          "2430:     {",
          "2432:     }",
          "2434: }",
          "2436: ModuleImportOrExportEntryList* Parser::EnsureModuleIndirectExportEntryList()",
          "2437: {",
          "2439:     {",
          "2441:     }",
          "2443: }",
          "2445: ModuleImportOrExportEntryList* Parser::EnsureModuleStarExportEntryList()",
          "2446: {",
          "2448:     {",
          "2450:     }",
          "2452: }",
          "2454: void Parser::AddModuleSpecifier(IdentPtr moduleRequest)",
          "",
          "[Removed Lines]",
          "2386:     return m_currentNodeProg->sxModule.requestedModules;",
          "2391:     return m_currentNodeProg->sxModule.importEntries;",
          "2396:     return m_currentNodeProg->sxModule.localExportEntries;",
          "2401:     return m_currentNodeProg->sxModule.indirectExportEntries;",
          "2406:     return m_currentNodeProg->sxModule.starExportEntries;",
          "2411:     if (m_currentNodeProg->sxModule.requestedModules == nullptr)",
          "2413:         m_currentNodeProg->sxModule.requestedModules = Anew(&m_nodeAllocator, IdentPtrList, &m_nodeAllocator);",
          "2415:     return m_currentNodeProg->sxModule.requestedModules;",
          "2420:     if (m_currentNodeProg->sxModule.importEntries == nullptr)",
          "2422:         m_currentNodeProg->sxModule.importEntries = Anew(&m_nodeAllocator, ModuleImportOrExportEntryList, &m_nodeAllocator);",
          "2424:     return m_currentNodeProg->sxModule.importEntries;",
          "2429:     if (m_currentNodeProg->sxModule.localExportEntries == nullptr)",
          "2431:         m_currentNodeProg->sxModule.localExportEntries = Anew(&m_nodeAllocator, ModuleImportOrExportEntryList, &m_nodeAllocator);",
          "2433:     return m_currentNodeProg->sxModule.localExportEntries;",
          "2438:     if (m_currentNodeProg->sxModule.indirectExportEntries == nullptr)",
          "2440:         m_currentNodeProg->sxModule.indirectExportEntries = Anew(&m_nodeAllocator, ModuleImportOrExportEntryList, &m_nodeAllocator);",
          "2442:     return m_currentNodeProg->sxModule.indirectExportEntries;",
          "2447:     if (m_currentNodeProg->sxModule.starExportEntries == nullptr)",
          "2449:         m_currentNodeProg->sxModule.starExportEntries = Anew(&m_nodeAllocator, ModuleImportOrExportEntryList, &m_nodeAllocator);",
          "2451:     return m_currentNodeProg->sxModule.starExportEntries;",
          "",
          "[Added Lines]",
          "2386:     return m_currentNodeProg->AsParseNodeModule()->requestedModules;",
          "2391:     return m_currentNodeProg->AsParseNodeModule()->importEntries;",
          "2396:     return m_currentNodeProg->AsParseNodeModule()->localExportEntries;",
          "2401:     return m_currentNodeProg->AsParseNodeModule()->indirectExportEntries;",
          "2406:     return m_currentNodeProg->AsParseNodeModule()->starExportEntries;",
          "2411:     if (m_currentNodeProg->AsParseNodeModule()->requestedModules == nullptr)",
          "2413:         m_currentNodeProg->AsParseNodeModule()->requestedModules = Anew(&m_nodeAllocator, IdentPtrList, &m_nodeAllocator);",
          "2415:     return m_currentNodeProg->AsParseNodeModule()->requestedModules;",
          "2420:     if (m_currentNodeProg->AsParseNodeModule()->importEntries == nullptr)",
          "2422:         m_currentNodeProg->AsParseNodeModule()->importEntries = Anew(&m_nodeAllocator, ModuleImportOrExportEntryList, &m_nodeAllocator);",
          "2424:     return m_currentNodeProg->AsParseNodeModule()->importEntries;",
          "2429:     if (m_currentNodeProg->AsParseNodeModule()->localExportEntries == nullptr)",
          "2431:         m_currentNodeProg->AsParseNodeModule()->localExportEntries = Anew(&m_nodeAllocator, ModuleImportOrExportEntryList, &m_nodeAllocator);",
          "2433:     return m_currentNodeProg->AsParseNodeModule()->localExportEntries;",
          "2438:     if (m_currentNodeProg->AsParseNodeModule()->indirectExportEntries == nullptr)",
          "2440:         m_currentNodeProg->AsParseNodeModule()->indirectExportEntries = Anew(&m_nodeAllocator, ModuleImportOrExportEntryList, &m_nodeAllocator);",
          "2442:     return m_currentNodeProg->AsParseNodeModule()->indirectExportEntries;",
          "2447:     if (m_currentNodeProg->AsParseNodeModule()->starExportEntries == nullptr)",
          "2449:         m_currentNodeProg->AsParseNodeModule()->starExportEntries = Anew(&m_nodeAllocator, ModuleImportOrExportEntryList, &m_nodeAllocator);",
          "2451:     return m_currentNodeProg->AsParseNodeModule()->starExportEntries;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2489: {",
          "2490:     AssertOrFailFast(varDeclNode->nop == knopVarDecl || varDeclNode->nop == knopLetDecl || varDeclNode->nop == knopConstDecl);",
          "2495:     AddModuleImportOrExportEntry(EnsureModuleLocalExportEntryList(), nullptr, localName, localName, nullptr);",
          "2496: }",
          "",
          "[Removed Lines]",
          "2492:     IdentPtr localName = varDeclNode->sxVar.pid;",
          "2493:     varDeclNode->sxVar.sym->SetIsModuleExportStorage(true);",
          "",
          "[Added Lines]",
          "2492:     IdentPtr localName = varDeclNode->AsParseNodeVar()->pid;",
          "2493:     varDeclNode->AsParseNodeVar()->sym->SetIsModuleExportStorage(true);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2602:     return curFunc->nop == knopFncDecl",
          "2605:         && (this->m_grfscr & fscrEvalCode) != fscrEvalCode",
          "2606:         && this->m_tryCatchOrFinallyDepth == 0",
          "2607:         && !this->m_disallowImportExportStmt;",
          "",
          "[Removed Lines]",
          "2603:         && curFunc->sxFnc.IsModule()",
          "2604:         && this->m_currentBlockInfo->pnodeBlock == curFunc->sxFnc.pnodeBodyScope",
          "",
          "[Added Lines]",
          "2603:         && curFunc->AsParseNodeFnc()->IsModule()",
          "2604:         && this->m_currentBlockInfo->pnodeBlock == curFunc->AsParseNodeFnc()->pnodeBodyScope",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2610: bool Parser::IsTopLevelModuleFunc()",
          "2611: {",
          "2612:     ParseNodePtr curFunc = GetCurrentFunctionNode();",
          "2614: }",
          "2616: template<bool buildAST> ParseNodePtr Parser::ParseImportCall()",
          "",
          "[Removed Lines]",
          "2613:     return curFunc->nop == knopFncDecl && curFunc->sxFnc.IsModule();",
          "",
          "[Added Lines]",
          "2613:     return curFunc->nop == knopFncDecl && curFunc->AsParseNodeFnc()->IsModule();",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2768:                 AnalysisAssert(pnode != nullptr);",
          "2769:                 Assert(pnode->nop == knopClassDecl);",
          "2772:             }",
          "2774:             break;",
          "",
          "[Removed Lines]",
          "2771:                 pnode->sxClass.SetIsDefaultModuleExport(true);",
          "",
          "[Added Lines]",
          "2771:                 pnode->AsParseNodeClass()->SetIsDefaultModuleExport(true);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2833:                 AnalysisAssert(pnode != nullptr);",
          "2834:                 Assert(pnode->nop == knopFncDecl);",
          "2837:             }",
          "2838:             break;",
          "2839:         }",
          "",
          "[Removed Lines]",
          "2836:                 pnode->sxFnc.SetIsDefaultModuleExport(true);",
          "",
          "[Added Lines]",
          "2836:                 pnode->AsParseNodeFnc()->SetIsDefaultModuleExport(true);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2857:                 pnode = CreateNode(knopExportDefault);",
          "2859:             }",
          "2860:             break;",
          "2861:         }",
          "",
          "[Removed Lines]",
          "2858:                 pnode->sxExportDefault.pnodeExpr = pnodeExpression;",
          "",
          "[Added Lines]",
          "2858:                 pnode->AsParseNodeExportDefault()->pnodeExpr = pnodeExpression;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3029:                 IdentPtr localName;",
          "3030:                 if (pnode->nop == knopClassDecl)",
          "3031:                 {",
          "3034:                 }",
          "3035:                 else",
          "3036:                 {",
          "3037:                     Assert(pnode->nop == knopFncDecl);",
          "3041:                 }",
          "3042:                 Assert(localName != nullptr);",
          "",
          "[Removed Lines]",
          "3032:                     pnode->sxClass.pnodeDeclName->sxVar.sym->SetIsModuleExportStorage(true);",
          "3033:                     localName = pnode->sxClass.pnodeName->sxVar.pid;",
          "3039:                     pnode->sxFnc.GetFuncSymbol()->SetIsModuleExportStorage(true);",
          "3040:                     localName = pnode->sxFnc.pid;",
          "",
          "[Added Lines]",
          "3032:                     pnode->AsParseNodeClass()->pnodeDeclName->AsParseNodeVar()->sym->SetIsModuleExportStorage(true);",
          "3033:                     localName = pnode->AsParseNodeClass()->pnodeName->AsParseNodeVar()->pid;",
          "3039:                     pnode->AsParseNodeFnc()->GetFuncSymbol()->SetIsModuleExportStorage(true);",
          "3040:                     localName = pnode->AsParseNodeFnc()->pid;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3163:                 if (pid == wellKnownPropertyPids._super ||",
          "3164:                     pid == wellKnownPropertyPids._superConstructor)",
          "3165:                 {",
          "3167:                 }",
          "3168:                 else if (pid == wellKnownPropertyPids._this)",
          "3169:                 {",
          "3171:                 }",
          "3172:             }",
          "3173:             else",
          "",
          "[Removed Lines]",
          "3166:                     pnode->sxSpecialName.isSuper = true;",
          "3170:                     pnode->sxSpecialName.isThis = true;",
          "",
          "[Added Lines]",
          "3166:                     pnode->AsParseNodeSpecialName()->isSuper = true;",
          "3170:                     pnode->AsParseNodeSpecialName()->isThis = true;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3176:             }",
          "3177:             pnode->ichMin = ichMin;",
          "3178:             pnode->ichLim = ichLim;",
          "3180:         }",
          "3181:         else",
          "3182:         {",
          "",
          "[Removed Lines]",
          "3179:             pnode->sxPid.SetSymRef(ref);",
          "",
          "[Added Lines]",
          "3179:             pnode->AsParseNodePid()->SetSymRef(ref);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3259:         uint saveNextBlockId = m_nextBlockId;",
          "3264:         bool deferEllipsisErrorSave = m_deferEllipsisError;",
          "",
          "[Removed Lines]",
          "3260:         uint saveCurrBlockId = GetCurrentBlock()->sxBlock.blockId;",
          "3261:         GetCurrentBlock()->sxBlock.blockId = m_nextBlockId++;",
          "",
          "[Added Lines]",
          "3260:         uint saveCurrBlockId = GetCurrentBlock()->AsParseNodeBlock()->blockId;",
          "3261:         GetCurrentBlock()->AsParseNodeBlock()->blockId = m_nextBlockId++;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3276:         ChkCurTok(tkRParen, ERRnoRparen);",
          "3279:         if (m_token.tk == tkDArrow)",
          "3280:         {",
          "",
          "[Removed Lines]",
          "3278:         GetCurrentBlock()->sxBlock.blockId = saveCurrBlockId;",
          "",
          "[Added Lines]",
          "3278:         GetCurrentBlock()->AsParseNodeBlock()->blockId = saveCurrBlockId;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3324:         if (buildAST)",
          "3325:         {",
          "3326:             pnode = CreateNodeWithScanner<knopFlt>();",
          "3329:         }",
          "3330:         fCanAssign = FALSE;",
          "3331:         m_pscan->Scan();",
          "",
          "[Removed Lines]",
          "3327:             pnode->sxFlt.dbl = m_token.GetDouble();",
          "3328:             pnode->sxFlt.maybeInt = m_token.GetDoubleMayBeInt();",
          "",
          "[Added Lines]",
          "3327:             pnode->AsParseNodeFloat()->dbl = m_token.GetDouble();",
          "3328:             pnode->AsParseNodeFloat()->maybeInt = m_token.GetDoubleMayBeInt();",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "3497:         pnode = ParseFncDecl<buildAST>(flags, pNameHint, false, true, fUnaryOrParen);",
          "3498:         if (isAsyncExpr)",
          "3499:         {",
          "3501:             pnode->ichMin = ichMin;",
          "3502:         }",
          "3503:         fCanAssign = FALSE;",
          "",
          "[Removed Lines]",
          "3500:             pnode->sxFnc.cbMin = iecpMin;",
          "",
          "[Added Lines]",
          "3500:             pnode->AsParseNodeFnc()->cbMin = iecpMin;",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "3608:         }",
          "3609: #endif",
          "3610:         pnode = CreateNodeWithScanner<knopRegExp>();",
          "3612: #if ENABLE_BACKGROUND_PARSING",
          "3613:         if (m_doingFastScan)",
          "3614:         {",
          "",
          "[Removed Lines]",
          "3611:         pnode->sxPid.regexPattern = m_token.GetRegex();",
          "",
          "[Added Lines]",
          "3611:         pnode->AsParseNodePid()->regexPattern = m_token.GetRegex();",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "3621:         }",
          "3622:         else if (this->IsBackgroundParser())",
          "3623:         {",
          "3625:             this->AddBackgroundRegExpNode(pnode);",
          "3626:         }",
          "3627: #endif",
          "",
          "[Removed Lines]",
          "3624:             Assert(pnode->sxPid.regexPattern == nullptr);",
          "",
          "[Added Lines]",
          "3624:             Assert(pnode->AsParseNodePid()->regexPattern == nullptr);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "3638: BOOL Parser::NodeIsEvalName(ParseNodePtr pnode)",
          "3639: {",
          "3642: }",
          "3644: BOOL Parser::NodeIsSuperName(ParseNodePtr pnode)",
          "3645: {",
          "3647: }",
          "3649: BOOL Parser::NodeEqualsName(ParseNodePtr pnode, LPCOLESTR sz, uint32 cch)",
          "3650: {",
          "3651:     return pnode->nop == knopName &&",
          "3654: }",
          "3656: BOOL Parser::NodeIsIdent(ParseNodePtr pnode, IdentPtr pid)",
          "",
          "[Removed Lines]",
          "3641:     return pnode->nop == knopName && (pnode->sxPid.pid == wellKnownPropertyPids.eval);",
          "3646:     return pnode->nop == knopName && (pnode->sxPid.pid == wellKnownPropertyPids._superConstructor);",
          "3652:         pnode->sxPid.pid->Cch() == cch &&",
          "3653:         !wmemcmp(pnode->sxPid.pid->Psz(), sz, cch);",
          "",
          "[Added Lines]",
          "3641:     return pnode->nop == knopName && (pnode->AsParseNodePid()->pid == wellKnownPropertyPids.eval);",
          "3646:     return pnode->nop == knopName && (pnode->AsParseNodePid()->pid == wellKnownPropertyPids._superConstructor);",
          "3652:         pnode->AsParseNodePid()->pid->Cch() == cch &&",
          "3653:         !wmemcmp(pnode->AsParseNodePid()->pid->Psz(), sz, cch);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3660:         switch (pnode->nop)",
          "3661:         {",
          "3662:         case knopName:",
          "3665:         case knopComma:",
          "3667:             break;",
          "3669:         default:",
          "",
          "[Removed Lines]",
          "3663:             return (pnode->sxPid.pid == pid);",
          "3666:             pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "3663:             return (pnode->AsParseNodePid()->pid == pid);",
          "3666:             pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3704:                     if (buildAST)",
          "3705:                     {",
          "3706:                         Assert(pnode->nop == knopNew);",
          "3714:                         Assert(!m_hasDestructuringPattern || count > 0);",
          "3717:                         pnode->ichLim = m_pscan->IchLimTok();",
          "3718:                     }",
          "3719:                     else",
          "",
          "[Removed Lines]",
          "3707:                         Assert(pnode->sxCall.pnodeArgs == nullptr);",
          "3708:                         pnode->sxCall.pnodeArgs = pnodeArgs;",
          "3709:                         pnode->sxCall.callOfConstants = callOfConstants;",
          "3710:                         pnode->sxCall.isApplyCall = false;",
          "3711:                         pnode->sxCall.isEvalCall = false;",
          "3712:                         pnode->sxCall.isSuperCall = false;",
          "3713:                         pnode->sxCall.hasDestructuring = m_hasDestructuringPattern;",
          "3715:                         pnode->sxCall.argCount = count;",
          "3716:                         pnode->sxCall.spreadArgCount = spreadArgCount;",
          "",
          "[Added Lines]",
          "3707:                         Assert(pnode->AsParseNodeCall()->pnodeArgs == nullptr);",
          "3708:                         pnode->AsParseNodeCall()->pnodeArgs = pnodeArgs;",
          "3709:                         pnode->AsParseNodeCall()->callOfConstants = callOfConstants;",
          "3710:                         pnode->AsParseNodeCall()->isApplyCall = false;",
          "3711:                         pnode->AsParseNodeCall()->isEvalCall = false;",
          "3712:                         pnode->AsParseNodeCall()->isSuperCall = false;",
          "3713:                         pnode->AsParseNodeCall()->hasDestructuring = m_hasDestructuringPattern;",
          "3715:                         pnode->AsParseNodeCall()->argCount = count;",
          "3716:                         pnode->AsParseNodeCall()->spreadArgCount = spreadArgCount;",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3732:                     }",
          "3734:                     uint saveNextBlockId = m_nextBlockId;",
          "3737:                     if (isAsyncExpr)",
          "3738:                     {",
          "3743:                     }",
          "3745:                     ParseNodePtr pnodeArgs = ParseArgList<buildAST>(&callOfConstants, &spreadArgCount, &count);",
          "",
          "[Removed Lines]",
          "3735:                     uint saveCurrBlockId = GetCurrentBlock()->sxBlock.blockId;",
          "3742:                         GetCurrentBlock()->sxBlock.blockId = m_nextBlockId++;",
          "",
          "[Added Lines]",
          "3735:                     uint saveCurrBlockId = GetCurrentBlock()->AsParseNodeBlock()->blockId;",
          "3742:                         GetCurrentBlock()->AsParseNodeBlock()->blockId = m_nextBlockId++;",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3755:                             pnode = CreateSuperCallNode(pnode, pnodeArgs);",
          "3756:                             Assert(pnode);",
          "3760:                         }",
          "3761:                         else",
          "3762:                         {",
          "",
          "[Removed Lines]",
          "3758:                             pnode->sxSuperCall.pnodeThis = ReferenceSpecialName(wellKnownPropertyPids._this, pnode->ichMin, m_pscan->IchLimTok(), true);",
          "3759:                             pnode->sxSuperCall.pnodeNewTarget = ReferenceSpecialName(wellKnownPropertyPids._newTarget, pnode->ichMin, m_pscan->IchLimTok(), true);",
          "",
          "[Added Lines]",
          "3758:                             pnode->AsParseNodeSuperCall()->pnodeThis = ReferenceSpecialName(wellKnownPropertyPids._this, pnode->ichMin, m_pscan->IchLimTok(), true);",
          "3759:                             pnode->AsParseNodeSuperCall()->pnodeNewTarget = ReferenceSpecialName(wellKnownPropertyPids._newTarget, pnode->ichMin, m_pscan->IchLimTok(), true);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3772:                         {",
          "3773:                             this->MarkEvalCaller();",
          "3774:                             fCallIsEval = true;",
          "",
          "[Removed Lines]",
          "3771:                         if (count > 0 && this->NodeIsEvalName(pnode->sxCall.pnodeTarget))",
          "",
          "[Added Lines]",
          "3771:                         if (count > 0 && this->NodeIsEvalName(pnode->AsParseNodeCall()->pnodeTarget))",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3781:                             ReferenceSpecialName(wellKnownPropertyPids.arguments);",
          "3782:                         }",
          "3789:                         Assert(!m_hasDestructuringPattern || count > 0);",
          "3791:                         pnode->ichLim = m_pscan->IchLimTok();",
          "3792:                     }",
          "3793:                     else",
          "",
          "[Removed Lines]",
          "3784:                         pnode->sxCall.callOfConstants = callOfConstants;",
          "3785:                         pnode->sxCall.spreadArgCount = spreadArgCount;",
          "3786:                         pnode->sxCall.isApplyCall = false;",
          "3787:                         pnode->sxCall.isEvalCall = fCallIsEval;",
          "3788:                         pnode->sxCall.hasDestructuring = m_hasDestructuringPattern;",
          "3790:                         pnode->sxCall.argCount = count;",
          "",
          "[Added Lines]",
          "3784:                         pnode->AsParseNodeCall()->callOfConstants = callOfConstants;",
          "3785:                         pnode->AsParseNodeCall()->spreadArgCount = spreadArgCount;",
          "3786:                         pnode->AsParseNodeCall()->isApplyCall = false;",
          "3787:                         pnode->AsParseNodeCall()->isEvalCall = fCallIsEval;",
          "3788:                         pnode->AsParseNodeCall()->hasDestructuring = m_hasDestructuringPattern;",
          "3790:                         pnode->AsParseNodeCall()->argCount = count;",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3811:                     if (isAsyncExpr)",
          "3812:                     {",
          "3814:                         if (m_token.tk == tkDArrow)",
          "3815:                         {",
          "",
          "[Removed Lines]",
          "3813:                         GetCurrentBlock()->sxBlock.blockId = saveCurrBlockId;",
          "",
          "[Added Lines]",
          "3813:                         GetCurrentBlock()->AsParseNodeBlock()->blockId = saveCurrBlockId;",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3836:                 ParseNodePtr pnodeExpr = ParseExpr<buildAST>(0, FALSE, TRUE, FALSE, nullptr, nullptr, nullptr, &tok);",
          "3837:                 if (buildAST)",
          "3838:                 {",
          "3840:                     {",
          "3841:                         pnode = CreateSuperReferenceNode(knopIndex, pnode, pnodeExpr);",
          "3843:                     }",
          "3844:                     else",
          "3845:                     {",
          "",
          "[Removed Lines]",
          "3839:                     if (pnode && pnode->isSpecialName && pnode->sxSpecialName.isSuper)",
          "3842:                         pnode->sxSuperReference.pnodeThis = ReferenceSpecialName(wellKnownPropertyPids._this, pnode->ichMin, pnode->ichLim, true);",
          "",
          "[Added Lines]",
          "3839:                     if (pnode && pnode->isSpecialName && pnode->AsParseNodeSpecialName()->isSuper)",
          "3842:                         pnode->AsParseNodeSuperReference()->pnodeThis = ReferenceSpecialName(wellKnownPropertyPids._this, pnode->ichMin, pnode->ichLim, true);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3869:                 {",
          "3870:                     if (pnodeExpr && pnodeExpr->nop == knopName)",
          "3871:                     {",
          "3873:                     }",
          "3874:                 }",
          "3875:                 else if (tok.tk == tkID)",
          "",
          "[Removed Lines]",
          "3872:                         topPidRef = pnodeExpr->sxPid.pid->GetTopRef();",
          "",
          "[Added Lines]",
          "3872:                         topPidRef = pnodeExpr->AsParseNodePid()->pid->GetTopRef();",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3887:                 }",
          "3889:                 bool shouldConvertToDot = false;",
          "3891:                 {",
          "3894:                 }",
          "3896:                 if (shouldConvertToDot)",
          "3897:                 {",
          "3901:                     uint32 uintValue;",
          "3902:                     if(Js::JavascriptOperators::TryConvertToUInt32(",
          "3903:                            str,",
          "3905:                            &uintValue) &&",
          "3906:                        !Js::TaggedInt::IsOverflow(uintValue)) // the optimization is not very useful if the number can't be represented as a TaggedInt",
          "3907:                     {",
          "3909:                         auto intNode = CreateIntNodeWithScanner(uintValue); // implicit conversion from uint32 to int32",
          "3911:                     }",
          "",
          "[Removed Lines]",
          "3890:                 if (pnode->sxBin.pnode2->nop == knopStr)",
          "3893:                     shouldConvertToDot = pnode->sxBin.pnode2->sxPid.pid->Cch() > 0 && !m_pscan->IsEscapeOnLastTkStrCon();",
          "3898:                     LPCOLESTR str = pnode->sxBin.pnode2->sxPid.pid->Psz();",
          "3904:                            pnode->sxBin.pnode2->sxPid.pid->Cch(),",
          "3910:                         pnode->sxBin.pnode2 = intNode;",
          "",
          "[Added Lines]",
          "3890:                 if (pnode->AsParseNodeBin()->pnode2->nop == knopStr)",
          "3893:                     shouldConvertToDot = pnode->AsParseNodeBin()->pnode2->AsParseNodePid()->pid->Cch() > 0 && !m_pscan->IsEscapeOnLastTkStrCon();",
          "3898:                     LPCOLESTR str = pnode->AsParseNodeBin()->pnode2->AsParseNodePid()->pid->Psz();",
          "3904:                            pnode->AsParseNodeBin()->pnode2->AsParseNodePid()->pid->Cch(),",
          "3910:                         pnode->AsParseNodeBin()->pnode2 = intNode;",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3929:                         if (doConvertToProperty)",
          "3930:                         {",
          "3932:                             pnode->nop = knopDot;",
          "3933:                             pnode->grfpn |= PNodeFlags::fpnIndexOperator;",
          "3934:                         }",
          "",
          "[Removed Lines]",
          "3931:                             pnode->sxBin.pnode2->nop = knopName;",
          "",
          "[Added Lines]",
          "3931:                             pnode->AsParseNodeBin()->pnode2->nop = knopName;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3971:                     Assert(opCode == knopIndex);",
          "3972:                     name = CreateStrNodeWithScanner(m_token.GetIdentifier(m_phtbl));",
          "3973:                 }",
          "3975:                 {",
          "3976:                     pnode = CreateSuperReferenceNode(opCode, pnode, name);",
          "3978:                 }",
          "3979:                 else",
          "3980:                 {",
          "",
          "[Removed Lines]",
          "3974:                 if (pnode && pnode->isSpecialName && pnode->sxSpecialName.isSuper)",
          "3977:                     pnode->sxSuperReference.pnodeThis = ReferenceSpecialName(wellKnownPropertyPids._this, pnode->ichMin, pnode->ichLim, true);",
          "",
          "[Added Lines]",
          "3974:                 if (pnode && pnode->isSpecialName && pnode->AsParseNodeSpecialName()->isSuper)",
          "3977:                     pnode->AsParseNodeSuperReference()->pnodeThis = ReferenceSpecialName(wellKnownPropertyPids._this, pnode->ichMin, pnode->ichLim, true);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "4054: BOOL Parser::IsConstantInFunctionCall(ParseNodePtr pnode)",
          "4055: {",
          "4057:     {",
          "4058:         return TRUE;",
          "4059:     }",
          "",
          "[Removed Lines]",
          "4056:     if (pnode->nop == knopInt && !Js::TaggedInt::IsOverflow(pnode->sxInt.lw))",
          "",
          "[Added Lines]",
          "4056:     if (pnode->nop == knopInt && !Js::TaggedInt::IsOverflow(pnode->AsParseNodeInt()->lw))",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "4147: BOOL Parser::IsConstantInArrayLiteral(ParseNodePtr pnode)",
          "4148: {",
          "4150:     {",
          "4151:         return TRUE;",
          "4152:     }",
          "",
          "[Removed Lines]",
          "4149:     if (pnode->nop == knopInt && !Js::TaggedInt::IsOverflow(pnode->sxInt.lw))",
          "",
          "[Added Lines]",
          "4149:     if (pnode->nop == knopInt && !Js::TaggedInt::IsOverflow(pnode->AsParseNodeInt()->lw))",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "4169:     if (buildAST)",
          "4170:     {",
          "4171:         pnode = CreateNodeWithScanner<knopArray>();",
          "4181:         {",
          "4183:         }",
          "4184:     }",
          "",
          "[Removed Lines]",
          "4172:         pnode->sxArrLit.pnode1 = pnode1;",
          "4173:         pnode->sxArrLit.arrayOfTaggedInts = arrayOfTaggedInts;",
          "4174:         pnode->sxArrLit.arrayOfInts = arrayOfInts;",
          "4175:         pnode->sxArrLit.arrayOfNumbers = arrayOfNumbers;",
          "4176:         pnode->sxArrLit.hasMissingValues = hasMissingValues;",
          "4177:         pnode->sxArrLit.count = count;",
          "4178:         pnode->sxArrLit.spreadCount = spreadCount;",
          "4180:         if (pnode->sxArrLit.pnode1)",
          "4182:             this->CheckArguments(pnode->sxArrLit.pnode1);",
          "",
          "[Added Lines]",
          "4172:         pnode->AsParseNodeArrLit()->pnode1 = pnode1;",
          "4173:         pnode->AsParseNodeArrLit()->arrayOfTaggedInts = arrayOfTaggedInts;",
          "4174:         pnode->AsParseNodeArrLit()->arrayOfInts = arrayOfInts;",
          "4175:         pnode->AsParseNodeArrLit()->arrayOfNumbers = arrayOfNumbers;",
          "4176:         pnode->AsParseNodeArrLit()->hasMissingValues = hasMissingValues;",
          "4177:         pnode->AsParseNodeArrLit()->count = count;",
          "4178:         pnode->AsParseNodeArrLit()->spreadCount = spreadCount;",
          "4180:         if (pnode->AsParseNodeArrLit()->pnode1)",
          "4182:             this->CheckArguments(pnode->AsParseNodeArrLit()->pnode1);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "4260:                         arrayOfInts = false;",
          "4261:                         arrayOfNumbers = false;",
          "4262:                     }",
          "4264:                     {",
          "",
          "[Removed Lines]",
          "4263:                     else if (arrayOfInts && Js::JavascriptNumber::IsInt32OrUInt32(pnodeArg->sxFlt.dbl) && (!Js::JavascriptNumber::IsInt32(pnodeArg->sxFlt.dbl) || pnodeArg->sxFlt.dbl == -2147483648.0))",
          "",
          "[Added Lines]",
          "4263:                     else if (arrayOfInts && Js::JavascriptNumber::IsInt32OrUInt32(pnodeArg->AsParseNodeFloat()->dbl) && (!Js::JavascriptNumber::IsInt32(pnodeArg->AsParseNodeFloat()->dbl) || pnodeArg->AsParseNodeFloat()->dbl == -2147483648.0))",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "4275:                 }",
          "4276:                 else",
          "4277:                 {",
          "4279:                     {",
          "4280:                         arrayOfInts = false;",
          "4281:                     }",
          "4283:                     {",
          "4284:                         arrayOfTaggedInts = false;",
          "4285:                     }",
          "",
          "[Removed Lines]",
          "4278:                     if (Js::SparseArraySegment<int32>::IsMissingItem((int32*)&pnodeArg->sxInt.lw))",
          "4282:                     if (Js::TaggedInt::IsOverflow(pnodeArg->sxInt.lw))",
          "",
          "[Added Lines]",
          "4278:                     if (Js::SparseArraySegment<int32>::IsMissingItem((int32*)&pnodeArg->AsParseNodeInt()->lw))",
          "4282:                     if (Js::TaggedInt::IsOverflow(pnodeArg->AsParseNodeInt()->lw))",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "4337:     if (buildAST)",
          "4338:     {",
          "4341:     }",
          "4343:     if (ppFullNameHint && buildAST && CONFIG_FLAG(UseFullName))",
          "",
          "[Removed Lines]",
          "4340:         (*ppnodeName)->sxUni.pnode1 = pnodeNameExpr;",
          "",
          "[Added Lines]",
          "4340:         (*ppnodeName)->AsParseNodeUni()->pnode1 = pnodeNameExpr;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "4453:     if (buildAST)",
          "4454:     {",
          "4456:         return CreateBinNode(nop, pnodeName, pnodeFnc);",
          "4457:     }",
          "4458:     else",
          "",
          "[Removed Lines]",
          "4455:         pnodeFnc->sxFnc.SetIsAccessor();",
          "",
          "[Added Lines]",
          "4455:         pnodeFnc->AsParseNodeFnc()->SetIsAccessor();",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "4732:             if (buildAST)",
          "4733:             {",
          "4734:                 pnodeArg = CreateBinNode(isObjectPattern ? knopObjectPatternMember : knopMember, pnodeName, pnodeExpr);",
          "4736:                 {",
          "4738:                 }",
          "4739:             }",
          "4740:         }",
          "",
          "[Removed Lines]",
          "4735:                 if (pnodeArg->sxBin.pnode1->nop == knopStr)",
          "4737:                     pnodeArg->sxBin.pnode1->sxPid.pid->PromoteAssignmentState();",
          "",
          "[Added Lines]",
          "4735:                 if (pnodeArg->AsParseNodeBin()->pnode1->nop == knopStr)",
          "4737:                     pnodeArg->AsParseNodeBin()->pnode1->AsParseNodePid()->pid->PromoteAssignmentState();",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "4755:             if (isAsyncMethod || isGenerator)",
          "4756:             {",
          "4758:                 pnodeFunc->ichMin = ichMin;",
          "4759:             }",
          "4760:             if (buildAST)",
          "",
          "[Removed Lines]",
          "4757:                 pnodeFunc->sxFnc.cbMin = iecpMin;",
          "",
          "[Added Lines]",
          "4757:                 pnodeFunc->AsParseNodeFnc()->cbMin = iecpMin;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "4781:                 pnodeArg = ParseMemberGetSet<buildAST>(op, &pNameGetOrSet);",
          "4784:                 {",
          "4785:                     if (m_scriptContext->GetConfig()->IsES6FunctionNameEnabled())",
          "4786:                     {",
          "",
          "[Removed Lines]",
          "4783:                 if (CONFIG_FLAG(UseFullName) && buildAST && pnodeArg->sxBin.pnode2->nop == knopFncDecl)",
          "",
          "[Added Lines]",
          "4783:                 if (CONFIG_FLAG(UseFullName) && buildAST && pnodeArg->AsParseNodeBin()->pnode2->nop == knopFncDecl)",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "4856:                     if (buildAST)",
          "4857:                     {",
          "4858:                         pnodeIdent = CreateNameNode(pidHint, idHintIchMin, idHintIchLim);",
          "4860:                     }",
          "4861:                 }",
          "",
          "[Removed Lines]",
          "4859:                         pnodeIdent->sxPid.SetSymRef(ref);",
          "",
          "[Added Lines]",
          "4859:                         pnodeIdent->AsParseNodePid()->SetSymRef(ref);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "4880:         if (buildAST)",
          "4881:         {",
          "4884:             {",
          "4885:                 Assert(fullNameHintLength >= shortNameOffset);",
          "4889:             }",
          "4890:             AddToNodeListEscapedUse(&pnodeList, &lastNodeRef, pnodeArg);",
          "4891:         }",
          "",
          "[Removed Lines]",
          "4882:             Assert(pnodeArg->sxBin.pnode2 != nullptr);",
          "4883:             if (pnodeArg->sxBin.pnode2->nop == knopFncDecl)",
          "4886:                 pnodeArg->sxBin.pnode2->sxFnc.hint = pFullNameHint;",
          "4887:                 pnodeArg->sxBin.pnode2->sxFnc.hintLength =  fullNameHintLength;",
          "4888:                 pnodeArg->sxBin.pnode2->sxFnc.hintOffset  = shortNameOffset;",
          "",
          "[Added Lines]",
          "4882:             Assert(pnodeArg->AsParseNodeBin()->pnode2 != nullptr);",
          "4883:             if (pnodeArg->AsParseNodeBin()->pnode2->nop == knopFncDecl)",
          "4886:                 pnodeArg->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hint = pFullNameHint;",
          "4887:                 pnodeArg->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hintLength =  fullNameHintLength;",
          "4888:                 pnodeArg->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hintOffset  = shortNameOffset;",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "5032:     pnodeFnc = CreateNode(knopFncDecl);",
          "",
          "[Removed Lines]",
          "5033:     pnodeFnc->sxFnc.ClearFlags();",
          "5034:     pnodeFnc->sxFnc.SetDeclaration(fDeclaration);",
          "5035:     pnodeFnc->sxFnc.astSize             = 0;",
          "5036:     pnodeFnc->sxFnc.pnodeName           = nullptr;",
          "5037:     pnodeFnc->sxFnc.pnodeScopes         = nullptr;",
          "5038:     pnodeFnc->sxFnc.pnodeRest           = nullptr;",
          "5039:     pnodeFnc->sxFnc.pid                 = nullptr;",
          "5040:     pnodeFnc->sxFnc.hint                = nullptr;",
          "5041:     pnodeFnc->sxFnc.hintOffset          = 0;",
          "5042:     pnodeFnc->sxFnc.hintLength          = 0;",
          "5043:     pnodeFnc->sxFnc.isNameIdentifierRef = true;",
          "5044:     pnodeFnc->sxFnc.nestedFuncEscapes   = false;",
          "5045:     pnodeFnc->sxFnc.pnodeNext           = nullptr;",
          "5046:     pnodeFnc->sxFnc.pnodeParams         = nullptr;",
          "5047:     pnodeFnc->sxFnc.pnodeVars           = nullptr;",
          "5048:     pnodeFnc->sxFnc.funcInfo            = nullptr;",
          "5049:     pnodeFnc->sxFnc.deferredStub        = nullptr;",
          "5050:     pnodeFnc->sxFnc.nestedCount         = 0;",
          "5051:     pnodeFnc->sxFnc.cbMin = m_pscan->IecpMinTok();",
          "5052:     pnodeFnc->sxFnc.functionId = (*m_nextFunctionId)++;",
          "5053:     pnodeFnc->sxFnc.isBodyAndParamScopeMerged = true;",
          "",
          "[Added Lines]",
          "5033:     pnodeFnc->AsParseNodeFnc()->ClearFlags();",
          "5034:     pnodeFnc->AsParseNodeFnc()->SetDeclaration(fDeclaration);",
          "5035:     pnodeFnc->AsParseNodeFnc()->astSize             = 0;",
          "5036:     pnodeFnc->AsParseNodeFnc()->pnodeName           = nullptr;",
          "5037:     pnodeFnc->AsParseNodeFnc()->pnodeScopes         = nullptr;",
          "5038:     pnodeFnc->AsParseNodeFnc()->pnodeRest           = nullptr;",
          "5039:     pnodeFnc->AsParseNodeFnc()->pid                 = nullptr;",
          "5040:     pnodeFnc->AsParseNodeFnc()->hint                = nullptr;",
          "5041:     pnodeFnc->AsParseNodeFnc()->hintOffset          = 0;",
          "5042:     pnodeFnc->AsParseNodeFnc()->hintLength          = 0;",
          "5043:     pnodeFnc->AsParseNodeFnc()->isNameIdentifierRef = true;",
          "5044:     pnodeFnc->AsParseNodeFnc()->nestedFuncEscapes   = false;",
          "5045:     pnodeFnc->AsParseNodeFnc()->pnodeNext           = nullptr;",
          "5046:     pnodeFnc->AsParseNodeFnc()->pnodeParams         = nullptr;",
          "5047:     pnodeFnc->AsParseNodeFnc()->pnodeVars           = nullptr;",
          "5048:     pnodeFnc->AsParseNodeFnc()->funcInfo            = nullptr;",
          "5049:     pnodeFnc->AsParseNodeFnc()->deferredStub        = nullptr;",
          "5050:     pnodeFnc->AsParseNodeFnc()->nestedCount         = 0;",
          "5051:     pnodeFnc->AsParseNodeFnc()->cbMin = m_pscan->IecpMinTok();",
          "5052:     pnodeFnc->AsParseNodeFnc()->functionId = (*m_nextFunctionId)++;",
          "5053:     pnodeFnc->AsParseNodeFnc()->isBodyAndParamScopeMerged = true;",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "5062:     if (buildAST)",
          "5063:     {",
          "5071:     }",
          "5072:     else // if !buildAST",
          "5073:     {",
          "",
          "[Removed Lines]",
          "5064:         pnodeFnc->sxFnc.lineNumber = m_pscan->LineCur();",
          "5065:         pnodeFnc->sxFnc.columnNumber = CalculateFunctionColumnNumber();",
          "5066:         pnodeFnc->sxFnc.SetNested(m_currentNodeFunc != nullptr); // If there is a current function, then we're a nested function.",
          "5067:         pnodeFnc->sxFnc.SetStrictMode(IsStrictMode()); // Inherit current strict mode -- may be overridden by the function itself if it contains a strict mode directive.",
          "5068:         pnodeFnc->sxFnc.firstDefaultArg = 0;",
          "5070:         m_pCurrentAstSize = &pnodeFnc->sxFnc.astSize;",
          "",
          "[Added Lines]",
          "5064:         pnodeFnc->AsParseNodeFnc()->lineNumber = m_pscan->LineCur();",
          "5065:         pnodeFnc->AsParseNodeFnc()->columnNumber = CalculateFunctionColumnNumber();",
          "5066:         pnodeFnc->AsParseNodeFnc()->SetNested(m_currentNodeFunc != nullptr); // If there is a current function, then we're a nested function.",
          "5067:         pnodeFnc->AsParseNodeFnc()->SetStrictMode(IsStrictMode()); // Inherit current strict mode -- may be overridden by the function itself if it contains a strict mode directive.",
          "5068:         pnodeFnc->AsParseNodeFnc()->firstDefaultArg = 0;",
          "5070:         m_pCurrentAstSize = &pnodeFnc->AsParseNodeFnc()->astSize;",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "5075:         m_inDeferredNestedFunc = true;",
          "5076:     }",
          "5080:     AnalysisAssert(pnodeFnc);",
          "5089:     IdentPtr pFncNamePid = nullptr;",
          "5090:     bool needScanRCurly = true;",
          "",
          "[Removed Lines]",
          "5078:     m_pnestedCount = &pnodeFnc->sxFnc.nestedCount;",
          "5081:     pnodeFnc->sxFnc.SetIsAsync((flags & fFncAsync) != 0);",
          "5082:     pnodeFnc->sxFnc.SetIsLambda(fLambda);",
          "5083:     pnodeFnc->sxFnc.SetIsMethod((flags & fFncMethod) != 0);",
          "5084:     pnodeFnc->sxFnc.SetIsClassMember((flags & fFncClassMember) != 0);",
          "5085:     pnodeFnc->sxFnc.SetIsModule(fModule);",
          "5086:     pnodeFnc->sxFnc.SetIsClassConstructor((flags & fFncClassConstructor) != 0);",
          "5087:     pnodeFnc->sxFnc.SetIsBaseClassConstructor((flags & fFncBaseClassConstructor) != 0);",
          "",
          "[Added Lines]",
          "5078:     m_pnestedCount = &pnodeFnc->AsParseNodeFnc()->nestedCount;",
          "5081:     pnodeFnc->AsParseNodeFnc()->SetIsAsync((flags & fFncAsync) != 0);",
          "5082:     pnodeFnc->AsParseNodeFnc()->SetIsLambda(fLambda);",
          "5083:     pnodeFnc->AsParseNodeFnc()->SetIsMethod((flags & fFncMethod) != 0);",
          "5084:     pnodeFnc->AsParseNodeFnc()->SetIsClassMember((flags & fFncClassMember) != 0);",
          "5085:     pnodeFnc->AsParseNodeFnc()->SetIsModule(fModule);",
          "5086:     pnodeFnc->AsParseNodeFnc()->SetIsClassConstructor((flags & fFncClassConstructor) != 0);",
          "5087:     pnodeFnc->AsParseNodeFnc()->SetIsBaseClassConstructor((flags & fFncBaseClassConstructor) != 0);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "5102:     m_ppnodeVar = ppnodeVarSave;",
          "5105:     {",
          "5107:     }",
          "5114:     {",
          "5115:         ParseNodePtr pnodeFncParent = GetCurrentFunctionNode();",
          "5117:         if (pnodeFncParent != nullptr)",
          "5118:         {",
          "5120:         }",
          "5121:         else",
          "5122:         {",
          "",
          "[Removed Lines]",
          "5104:     if (m_currentNodeFunc && (pnodeFnc->sxFnc.CallsEval() || pnodeFnc->sxFnc.ChildCallsEval()))",
          "5106:         GetCurrentFunctionNode()->sxFnc.SetChildCallsEval(true);",
          "5113:     if (fLambda && (pnodeFnc->sxFnc.UsesArguments() || pnodeFnc->sxFnc.CallsEval()))",
          "5119:             pnodeFncParent->sxFnc.SetUsesArguments();",
          "",
          "[Added Lines]",
          "5104:     if (m_currentNodeFunc && (pnodeFnc->AsParseNodeFnc()->CallsEval() || pnodeFnc->AsParseNodeFnc()->ChildCallsEval()))",
          "5106:         GetCurrentFunctionNode()->AsParseNodeFnc()->SetChildCallsEval(true);",
          "5113:     if (fLambda && (pnodeFnc->AsParseNodeFnc()->UsesArguments() || pnodeFnc->AsParseNodeFnc()->CallsEval()))",
          "5119:             pnodeFncParent->AsParseNodeFnc()->SetUsesArguments();",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "5175:     {",
          "5176:         if (pFncNamePid != nullptr &&",
          "5177:             GetCurrentBlock() &&",
          "5179:         {",
          "",
          "[Removed Lines]",
          "5178:             GetCurrentBlock()->sxBlock.blockType == PnodeBlockType::Regular)",
          "",
          "[Added Lines]",
          "5178:             GetCurrentBlock()->AsParseNodeBlock()->blockType == PnodeBlockType::Regular)",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "5186:             ParseNodePtr vardecl = CreateVarDeclNode(pFncNamePid, STVariable, false, nullptr, false);",
          "5189:             {",
          "5191:             }",
          "5192:         }",
          "5193:     }",
          "5195:     if (pnodeFncBlockScope)",
          "5196:     {",
          "5199:         if (buildAST)",
          "5200:         {",
          "5201:             PopFuncBlockScope(ppnodeScopeSave, ppnodeExprScopeSave);",
          "",
          "[Removed Lines]",
          "5187:             vardecl->sxVar.isBlockScopeFncDeclVar = true;",
          "5188:             if (GetCurrentFunctionNode() && vardecl->sxVar.sym->GetIsFormal())",
          "5190:                 GetCurrentFunctionNode()->sxFnc.SetHasAnyWriteToFormals(true);",
          "5197:         Assert(pnodeFncBlockScope->sxBlock.pnodeStmt == nullptr);",
          "5198:         pnodeFncBlockScope->sxBlock.pnodeStmt = pnodeFnc;",
          "",
          "[Added Lines]",
          "5187:             vardecl->AsParseNodeVar()->isBlockScopeFncDeclVar = true;",
          "5188:             if (GetCurrentFunctionNode() && vardecl->AsParseNodeVar()->sym->GetIsFormal())",
          "5190:                 GetCurrentFunctionNode()->AsParseNodeFnc()->SetHasAnyWriteToFormals(true);",
          "5197:         Assert(pnodeFncBlockScope->AsParseNodeBlock()->pnodeStmt == nullptr);",
          "5198:         pnodeFncBlockScope->AsParseNodeBlock()->pnodeStmt = pnodeFnc;",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "5237:         ULONG offsetFromCurrentFunction = m_pscan->IchMinTok() - m_currentNodeFunc->ichMin;",
          "5239:     }",
          "5240:     else",
          "5241:     {",
          "",
          "[Removed Lines]",
          "5238:         columnNumber = m_currentNodeFunc->sxFnc.columnNumber + offsetFromCurrentFunction ;",
          "",
          "[Added Lines]",
          "5238:         columnNumber = m_currentNodeFunc->AsParseNodeFnc()->columnNumber + offsetFromCurrentFunction ;",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "5255:         Assert(*m_ppnodeExprScope == nullptr);",
          "5258:     }",
          "5259:     else",
          "5260:     {",
          "5261:         Assert(*m_ppnodeScope == nullptr);",
          "5264:     }",
          "5265: }",
          "",
          "[Removed Lines]",
          "5257:         m_ppnodeExprScope = &pnodeFnc->sxFnc.pnodeNext;",
          "5263:         m_ppnodeScope = &pnodeFnc->sxFnc.pnodeNext;",
          "",
          "[Added Lines]",
          "5257:         m_ppnodeExprScope = &pnodeFnc->AsParseNodeFnc()->pnodeNext;",
          "5263:         m_ppnodeScope = &pnodeFnc->AsParseNodeFnc()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "5288:     if (buildAST)",
          "5289:     {",
          "5290:         fFunctionInBlock = GetCurrentBlockInfo() != GetCurrentFunctionBlockInfo() &&",
          "5293:     }",
          "",
          "[Removed Lines]",
          "5291:             (GetCurrentBlockInfo()->pnodeBlock->sxBlock.scope == nullptr ||",
          "5292:              GetCurrentBlockInfo()->pnodeBlock->sxBlock.scope->GetScopeType() != ScopeType_GlobalEvalBlock);",
          "",
          "[Added Lines]",
          "5291:             (GetCurrentBlockInfo()->pnodeBlock->AsParseNodeBlock()->scope == nullptr ||",
          "5292:              GetCurrentBlockInfo()->pnodeBlock->AsParseNodeBlock()->scope->GetScopeType() != ScopeType_GlobalEvalBlock);",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "5303:         if (!fLambda)",
          "5304:         {",
          "5305:             pnodeFncExprScope = StartParseBlock<buildAST>(PnodeBlockType::Function, ScopeType_FuncExpr);",
          "5307:         }",
          "",
          "[Removed Lines]",
          "5306:             fncExprScope = pnodeFncExprScope->sxBlock.scope;",
          "",
          "[Added Lines]",
          "5306:             fncExprScope = pnodeFncExprScope->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "5322:         this->UpdateCurrentNodeFunc<buildAST>(pnodeFnc, fLambda);",
          "5323:     }",
          "5326:     {",
          "",
          "[Removed Lines]",
          "5325:     if (noStmtContext && pnodeFnc->sxFnc.IsGenerator())",
          "",
          "[Added Lines]",
          "5325:     if (noStmtContext && pnodeFnc->AsParseNodeFnc()->IsGenerator())",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "5335:     bool fPreviousAwaitIsKeyword = m_pscan->SetAwaitIsKeywordRegion(fAsync);",
          "5338:     {",
          "5339:         CHAKRATEL_LANGSTATS_INC_LANGFEATURECOUNT(Generator, m_scriptContext);",
          "5340:     }",
          "",
          "[Removed Lines]",
          "5334:     bool fPreviousYieldIsKeyword = m_pscan->SetYieldIsKeywordRegion(pnodeFnc && pnodeFnc->sxFnc.IsGenerator());",
          "5337:     if (pnodeFnc && pnodeFnc->sxFnc.IsGenerator())",
          "",
          "[Added Lines]",
          "5334:     bool fPreviousYieldIsKeyword = m_pscan->SetYieldIsKeywordRegion(pnodeFnc && pnodeFnc->AsParseNodeFnc()->IsGenerator());",
          "5337:     if (pnodeFnc && pnodeFnc->AsParseNodeFnc()->IsGenerator())",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "5349:     }",
          "5350:     if (pnodeFnc)",
          "5351:     {",
          "5353:     }",
          "",
          "[Removed Lines]",
          "5352:         pnodeFnc->sxFnc.scope = fncExprScope;",
          "",
          "[Added Lines]",
          "5352:         pnodeFnc->AsParseNodeFnc()->scope = fncExprScope;",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "5404:         isTopLevelDeferredFunc =",
          "5405:             (pnodeFnc",
          "5408:              && !m_InAsmMode",
          "5410:              && !fModule",
          "",
          "[Removed Lines]",
          "5406:              && DeferredParse(pnodeFnc->sxFnc.functionId)",
          "5407:              && (!pnodeFnc->sxFnc.IsNested() || CONFIG_FLAG(DeferNested))",
          "",
          "[Added Lines]",
          "5406:              && DeferredParse(pnodeFnc->AsParseNodeFnc()->functionId)",
          "5407:              && (!pnodeFnc->AsParseNodeFnc()->IsNested() || CONFIG_FLAG(DeferNested))",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "5413:         if (pnodeFnc)",
          "5414:         {",
          "5416:         }",
          "5419:         isTopLevelDeferredFunc = isTopLevelDeferredFunc && !isDeferredFnc &&",
          "5422: #if ENABLE_BACKGROUND_PARSING",
          "5423:         if (!fLambda &&",
          "",
          "[Removed Lines]",
          "5415:             pnodeFnc->sxFnc.SetCanBeDeferred(isTopLevelDeferredFunc && PnFnc::CanBeRedeferred(pnodeFnc->sxFnc.fncFlags));",
          "5420:             (!isLikelyIIFE || !topLevelStmt || PHASE_FORCE_RAW(Js::DeferParsePhase, m_sourceContextInfo->sourceContextId, pnodeFnc->sxFnc.functionId));",
          "",
          "[Added Lines]",
          "5415:             pnodeFnc->AsParseNodeFnc()->SetCanBeDeferred(isTopLevelDeferredFunc && ParseNodeFnc::CanBeRedeferred(pnodeFnc->AsParseNodeFnc()->fncFlags));",
          "5420:             (!isLikelyIIFE || !topLevelStmt || PHASE_FORCE_RAW(Js::DeferParsePhase, m_sourceContextInfo->sourceContextId, pnodeFnc->AsParseNodeFnc()->functionId));",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "5453:                         pnodeFnc->ichLim = m_pscan->IchLimTok();",
          "5455:                     }",
          "5456:                 }",
          "5457:             }",
          "",
          "[Removed Lines]",
          "5454:                         pnodeFnc->sxFnc.cbLim = m_pscan->IecpLimTok();",
          "",
          "[Added Lines]",
          "5454:                         pnodeFnc->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTok();",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "5475:         AnalysisAssert(pnodeFnc);",
          "5476:         ParseNodePtr pnodeBlock = StartParseBlock<buildAST>(PnodeBlockType::Parameter, ScopeType_Parameter);",
          "5477:         AnalysisAssert(pnodeBlock != nullptr);",
          "5482:         ParseNodePtr argNode = nullptr;",
          "5484:         if (!fModule && !fLambda)",
          "5485:         {",
          "5486:             ParseNodePtr *const ppnodeVarSave = m_ppnodeVar;",
          "5490:             argNode = this->AddArgumentsNodeToVars(pnodeFnc);",
          "",
          "[Removed Lines]",
          "5478:         pnodeFnc->sxFnc.pnodeScopes = pnodeBlock;",
          "5479:         m_ppnodeVar = &pnodeFnc->sxFnc.pnodeParams;",
          "5480:         pnodeFnc->sxFnc.pnodeVars = nullptr;",
          "5481:         ParseNodePtr* varNodesList = &pnodeFnc->sxFnc.pnodeVars;",
          "5487:             m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "",
          "[Added Lines]",
          "5478:         pnodeFnc->AsParseNodeFnc()->pnodeScopes = pnodeBlock;",
          "5479:         m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeParams;",
          "5480:         pnodeFnc->AsParseNodeFnc()->pnodeVars = nullptr;",
          "5481:         ParseNodePtr* varNodesList = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "5487:             m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "5501:         if (pnodeBlock)",
          "5502:         {",
          "5506:         }",
          "",
          "[Removed Lines]",
          "5504:             m_ppnodeScope = &pnodeBlock->sxBlock.pnodeScopes;",
          "5505:             pnodeBlock->sxBlock.pnodeStmt = pnodeFnc;",
          "",
          "[Added Lines]",
          "5504:             m_ppnodeScope = &pnodeBlock->AsParseNodeBlock()->pnodeScopes;",
          "5505:             pnodeBlock->AsParseNodeBlock()->pnodeStmt = pnodeFnc;",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "5539:         ParseNodePtr pnodeInnerBlock = StartParseBlock<buildAST>(PnodeBlockType::Function, ScopeType_FunctionBody);",
          "",
          "[Removed Lines]",
          "5545:         pnodeFnc->sxFnc.pnodeBodyScope = pnodeInnerBlock;",
          "5548:         m_ppnodeScope = &pnodeInnerBlock->sxBlock.pnodeScopes;",
          "5549:         pnodeInnerBlock->sxBlock.pnodeStmt = pnodeFnc;",
          "",
          "[Added Lines]",
          "5545:         pnodeFnc->AsParseNodeFnc()->pnodeBodyScope = pnodeInnerBlock;",
          "5548:         m_ppnodeScope = &pnodeInnerBlock->AsParseNodeBlock()->pnodeScopes;",
          "5549:         pnodeInnerBlock->AsParseNodeBlock()->pnodeStmt = pnodeFnc;",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "5569:         if (isTopLevelDeferredFunc &&",
          "5570:             !(this->m_grfscr & fscrEvalCode) &&",
          "5572: #ifndef DISABLE_DYNAMIC_PROFILE_DEFER_PARSE",
          "5573:             m_sourceContextInfo->sourceDynamicProfileManager == nullptr &&",
          "5574: #endif",
          "5576:             (",
          "5579:                 ))",
          "5580:         {",
          "",
          "[Removed Lines]",
          "5571:             pnodeFnc->sxFnc.IsNested() &&",
          "5575:             PHASE_ON_RAW(Js::ScanAheadPhase, m_sourceContextInfo->sourceContextId, pnodeFnc->sxFnc.functionId) &&",
          "5577:                 !PHASE_FORCE_RAW(Js::DeferParsePhase, m_sourceContextInfo->sourceContextId, pnodeFnc->sxFnc.functionId) ||",
          "5578:                 PHASE_FORCE_RAW(Js::ScanAheadPhase, m_sourceContextInfo->sourceContextId, pnodeFnc->sxFnc.functionId)",
          "",
          "[Added Lines]",
          "5571:             pnodeFnc->AsParseNodeFnc()->IsNested() &&",
          "5575:             PHASE_ON_RAW(Js::ScanAheadPhase, m_sourceContextInfo->sourceContextId, pnodeFnc->AsParseNodeFnc()->functionId) &&",
          "5577:                 !PHASE_FORCE_RAW(Js::DeferParsePhase, m_sourceContextInfo->sourceContextId, pnodeFnc->AsParseNodeFnc()->functionId) ||",
          "5578:                 PHASE_FORCE_RAW(Js::ScanAheadPhase, m_sourceContextInfo->sourceContextId, pnodeFnc->AsParseNodeFnc()->functionId)",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "5586:             }",
          "5587:         }",
          "5590:         if (paramScope != nullptr)",
          "5591:         {",
          "5592:             if (CONFIG_FLAG(ForceSplitScope))",
          "5593:             {",
          "5595:             }",
          "5597:             {",
          "5598:                 paramScope->ForEachSymbolUntil([this, paramScope, pnodeFnc](Symbol* sym) {",
          "5600:                     {",
          "5603:                         return true;",
          "5604:                     }",
          "5605:                     return false;",
          "5606:                 });",
          "5609:                 {",
          "5612:                     {",
          "5618:                     }",
          "5619:                 }",
          "5620:             }",
          "",
          "[Removed Lines]",
          "5589:         Scope* paramScope = pnodeFnc->sxFnc.pnodeScopes ? pnodeFnc->sxFnc.pnodeScopes->sxBlock.scope : nullptr;",
          "5594:                 pnodeFnc->sxFnc.ResetBodyAndParamScopeMerged();",
          "5596:             else if (pnodeFnc->sxFnc.HasNonSimpleParameterList() && pnodeFnc->sxFnc.IsBodyAndParamScopeMerged())",
          "5599:                     if (sym->GetPid()->GetTopRef()->GetFuncScopeId() > pnodeFnc->sxFnc.functionId)",
          "5602:                         pnodeFnc->sxFnc.ResetBodyAndParamScopeMerged();",
          "5608:                 if (pnodeFnc->sxFnc.IsBodyAndParamScopeMerged() && !fDeclaration && pnodeFnc->sxFnc.pnodeName != nullptr)",
          "5610:                     Symbol* funcSym = pnodeFnc->sxFnc.pnodeName->sxVar.sym;",
          "5611:                     if (funcSym->GetPid()->GetTopRef()->GetFuncScopeId() > pnodeFnc->sxFnc.functionId)",
          "5617:                         pnodeFnc->sxFnc.ResetBodyAndParamScopeMerged();",
          "",
          "[Added Lines]",
          "5589:         Scope* paramScope = pnodeFnc->AsParseNodeFnc()->pnodeScopes ? pnodeFnc->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->scope : nullptr;",
          "5594:                 pnodeFnc->AsParseNodeFnc()->ResetBodyAndParamScopeMerged();",
          "5596:             else if (pnodeFnc->AsParseNodeFnc()->HasNonSimpleParameterList() && pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged())",
          "5599:                     if (sym->GetPid()->GetTopRef()->GetFuncScopeId() > pnodeFnc->AsParseNodeFnc()->functionId)",
          "5602:                         pnodeFnc->AsParseNodeFnc()->ResetBodyAndParamScopeMerged();",
          "5608:                 if (pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged() && !fDeclaration && pnodeFnc->AsParseNodeFnc()->pnodeName != nullptr)",
          "5610:                     Symbol* funcSym = pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->sym;",
          "5611:                     if (funcSym->GetPid()->GetTopRef()->GetFuncScopeId() > pnodeFnc->AsParseNodeFnc()->functionId)",
          "5617:                         pnodeFnc->AsParseNodeFnc()->ResetBodyAndParamScopeMerged();",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "5627:         {",
          "5628:             paramScope->ForEachSymbol([this](Symbol* paramSym)",
          "5629:             {",
          "",
          "[Removed Lines]",
          "5626:         if (paramScope != nullptr && pnodeFnc->sxFnc.IsBodyAndParamScopeMerged())",
          "",
          "[Added Lines]",
          "5626:         if (paramScope != nullptr && pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged())",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "5687:             m_ppnodeVar = varNodesList;",
          "5690:             {",
          "5692:             }",
          "",
          "[Removed Lines]",
          "5689:             if (!pnodeFnc->sxFnc.IsBodyAndParamScopeMerged())",
          "5691:                 OUTPUT_TRACE_DEBUGONLY(Js::ParsePhase, _u(\"The param and body scope of the function %s cannot be merged\\n\"), pnodeFnc->sxFnc.pnodeName ? pnodeFnc->sxFnc.pnodeName->sxVar.pid->Psz() : _u(\"Anonymous function\"));",
          "",
          "[Added Lines]",
          "5689:             if (!pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged())",
          "5691:                 OUTPUT_TRACE_DEBUGONLY(Js::ParsePhase, _u(\"The param and body scope of the function %s cannot be merged\\n\"), pnodeFnc->AsParseNodeFnc()->pnodeName ? pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid->Psz() : _u(\"Anonymous function\"));",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "5710:                     {",
          "5711:                         m_prevSiblingDeferredStub = nullptr;",
          "5712:                     }",
          "5714:                     if (m_prevSiblingDeferredStub == nullptr)",
          "5715:                     {",
          "5717:                     }",
          "5719:                     if (m_prevSiblingDeferredStub->ichMin == pnodeFnc->ichMin)",
          "",
          "[Removed Lines]",
          "5709:                     if (pnodeFncSave->sxFnc.nestedCount == 1)",
          "5716:                         m_prevSiblingDeferredStub = (m_currDeferredStub + (pnodeFncSave->sxFnc.nestedCount - 1));",
          "",
          "[Added Lines]",
          "5709:                     if (pnodeFncSave->AsParseNodeFnc()->nestedCount == 1)",
          "5716:                         m_prevSiblingDeferredStub = (m_currDeferredStub + (pnodeFncSave->AsParseNodeFnc()->nestedCount - 1));",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "5787:                     m_pscan->SeekTo(beginNameHint);",
          "5788:                     m_pscan->Scan();",
          "5790:                     {",
          "5791:                         Assert(m_token.tk == tkStar);",
          "5792:                         Assert(m_scriptContext->GetConfig()->IsES6GeneratorsEnabled());",
          "",
          "[Removed Lines]",
          "5789:                     if (pnodeFnc->sxFnc.IsGenerator())",
          "",
          "[Added Lines]",
          "5789:                     if (pnodeFnc->AsParseNodeFnc()->IsGenerator())",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "5810:             if (buildAST)",
          "5811:             {",
          "5813:                 {",
          "5815:                 }",
          "5816:             }",
          "",
          "[Removed Lines]",
          "5812:                 if (pnodeFnc->sxFnc.pnodeName != nullptr && knopVarDecl == pnodeFnc->sxFnc.pnodeName->nop)",
          "5814:                     CheckStrictModeEvalArgumentsUsage(pnodeFnc->sxFnc.pnodeName->sxVar.pid, pnodeFnc->sxFnc.pnodeName);",
          "",
          "[Added Lines]",
          "5812:                 if (pnodeFnc->AsParseNodeFnc()->pnodeName != nullptr && knopVarDecl == pnodeFnc->AsParseNodeFnc()->pnodeName->nop)",
          "5814:                     CheckStrictModeEvalArgumentsUsage(pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid, pnodeFnc->AsParseNodeFnc()->pnodeName);",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "5822:         if (fDeferred)",
          "5823:         {",
          "5824:             AnalysisAssert(pnodeFnc);",
          "5826:         }",
          "5828:         if (parallelJobStarted)",
          "",
          "[Removed Lines]",
          "5825:             pnodeFnc->sxFnc.pnodeVars = nullptr;",
          "",
          "[Added Lines]",
          "5825:             pnodeFnc->AsParseNodeFnc()->pnodeVars = nullptr;",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "5836:             pnodeFnc->ichLim = m_pscan->IchLimTok();",
          "5838:         }",
          "5839:     }",
          "5842:     AnalysisAssert(pnodeFnc);",
          "5844:     {",
          "5845:         m_InAsmMode = false;",
          "5846:     }",
          "",
          "[Removed Lines]",
          "5837:             pnodeFnc->sxFnc.cbLim = m_pscan->IecpLimTok();",
          "5843:     if (pnodeFnc->sxFnc.GetAsmjsMode())",
          "",
          "[Added Lines]",
          "5837:             pnodeFnc->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTok();",
          "5843:     if (pnodeFnc->AsParseNodeFnc()->GetAsmjsMode())",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "5886:         m_currentNodeDeferredFunc = pnodeFncSave;",
          "5887:     }",
          "5890:     {",
          "5892:     }",
          "5894:     return true;",
          "",
          "[Removed Lines]",
          "5889:     if (m_currentNodeFunc && pnodeFnc->sxFnc.HasWithStmt())",
          "5891:         GetCurrentFunctionNode()->sxFnc.SetHasWithStmt(true);",
          "",
          "[Added Lines]",
          "5889:     if (m_currentNodeFunc && pnodeFnc->AsParseNodeFnc()->HasWithStmt())",
          "5891:         GetCurrentFunctionNode()->AsParseNodeFnc()->SetHasWithStmt(true);",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "5926: {",
          "5932:     this->m_deferringAST = TRUE;",
          "",
          "[Removed Lines]",
          "5929:     pnodeFnc->sxFnc.pnodeVars = nullptr;",
          "5930:     pnodeFnc->sxFnc.pnodeBody = nullptr;",
          "",
          "[Added Lines]",
          "5929:     pnodeFnc->AsParseNodeFnc()->pnodeVars = nullptr;",
          "5930:     pnodeFnc->AsParseNodeFnc()->pnodeBody = nullptr;",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "5954:     ParseNodePtr *ppnodeVarSave = m_ppnodeVar;",
          "5958:     if (pnodeFncParent != nullptr",
          "5959:         && m_currDeferredStub != nullptr",
          "5962:     {",
          "5967:         Assert(pnodeFnc->ichMin == stub->ichMin);",
          "5968:         if (stub->fncFlags & kFunctionCallsEval)",
          "5969:         {",
          "",
          "[Removed Lines]",
          "5956:     m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "5961:         && pnodeFnc->sxFnc.pnodeScopes->sxBlock.blockType != PnodeBlockType::Parameter)",
          "5966:         DeferredFunctionStub *stub = m_currDeferredStub + (pnodeFncParent->sxFnc.nestedCount - 1);",
          "",
          "[Added Lines]",
          "5956:     m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "5961:         && pnodeFnc->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->blockType != PnodeBlockType::Parameter)",
          "5966:         DeferredFunctionStub *stub = m_currDeferredStub + (pnodeFncParent->AsParseNodeFnc()->nestedCount - 1);",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "5971:         }",
          "5972:         if (stub->fncFlags & kFunctionChildCallsEval)",
          "5973:         {",
          "5975:         }",
          "5976:         if (stub->fncFlags & kFunctionHasWithStmt)",
          "5977:         {",
          "5979:         }",
          "5981:         PHASE_PRINT_TRACE1(",
          "5982:             Js::SkipNestedDeferredPhase,",
          "5983:             _u(\"Skipping nested deferred function %d. %s: %d...%d\\n\"),",
          "5986:         m_pscan->SeekTo(stub->restorePoint, m_nextFunctionId);",
          "5989:         if (stub->fncFlags & kFunctionStrictMode)",
          "5990:         {",
          "5992:         }",
          "5993:     }",
          "5994:     else",
          "",
          "[Removed Lines]",
          "5974:             pnodeFnc->sxFnc.SetChildCallsEval(true);",
          "5978:             pnodeFnc->sxFnc.SetHasWithStmt(true);",
          "5984:             pnodeFnc->sxFnc.functionId, GetFunctionName(pnodeFnc, pNameHint), pnodeFnc->ichMin, stub->restorePoint.m_ichMinTok);",
          "5987:         pnodeFnc->sxFnc.nestedCount = stub->nestedCount;",
          "5988:         pnodeFnc->sxFnc.deferredStub = stub->deferredStubs;",
          "5991:             pnodeFnc->sxFnc.SetStrictMode(true);",
          "",
          "[Added Lines]",
          "5974:             pnodeFnc->AsParseNodeFnc()->SetChildCallsEval(true);",
          "5978:             pnodeFnc->AsParseNodeFnc()->SetHasWithStmt(true);",
          "5984:             pnodeFnc->AsParseNodeFnc()->functionId, GetFunctionName(pnodeFnc, pNameHint), pnodeFnc->ichMin, stub->restorePoint.m_ichMinTok);",
          "5987:         pnodeFnc->AsParseNodeFnc()->nestedCount = stub->nestedCount;",
          "5988:         pnodeFnc->AsParseNodeFnc()->deferredStub = stub->deferredStubs;",
          "5991:             pnodeFnc->AsParseNodeFnc()->SetStrictMode(true);",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "6006:     if (!fLambda || *pNeedScanRCurly)",
          "6007:     {",
          "6008:         pnodeFnc->ichLim = m_pscan->IchLimTok();",
          "6010:     }",
          "6012:     m_ppnodeVar = ppnodeVarSave;",
          "",
          "[Removed Lines]",
          "6009:         pnodeFnc->sxFnc.cbLim = m_pscan->IecpLimTok();",
          "",
          "[Added Lines]",
          "6009:         pnodeFnc->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTok();",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "6021:     }",
          "6023: #if DBG",
          "6025: #endif",
          "6026:     this->m_deferringAST = FALSE;",
          "6027: }",
          "",
          "[Removed Lines]",
          "6024:     pnodeFnc->sxFnc.deferredParseNextFunctionId = *this->m_nextFunctionId;",
          "",
          "[Added Lines]",
          "6024:     pnodeFnc->AsParseNodeFnc()->deferredParseNextFunctionId = *this->m_nextFunctionId;",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "6029: bool Parser::DoParallelParse(ParseNodePtr pnodeFnc) const",
          "6030: {",
          "6031: #if ENABLE_BACKGROUND_PARSING",
          "6033:     {",
          "6034:         return false;",
          "6035:     }",
          "",
          "[Removed Lines]",
          "6032:     if (!PHASE_ON_RAW(Js::ParallelParsePhase, m_sourceContextInfo->sourceContextId, pnodeFnc->sxFnc.functionId))",
          "",
          "[Added Lines]",
          "6032:     if (!PHASE_ON_RAW(Js::ParallelParsePhase, m_sourceContextInfo->sourceContextId, pnodeFnc->AsParseNodeFnc()->functionId))",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "6149:                     if (PHASE_TRACE1(Js::ParallelParsePhase))",
          "6150:                     {",
          "6151:                         Output::Print(_u(\"Finished fast seek: %d. %s -- %d...%d\\n\"),",
          "6154:                                       ichStart, m_pscan->IchLimTok());",
          "6155:                     }",
          "6156:                     return true;",
          "",
          "[Removed Lines]",
          "6152:                                       m_currentNodeFunc->sxFnc.functionId,",
          "6153:                                       GetFunctionName(m_currentNodeFunc, m_currentNodeFunc->sxFnc.hint),",
          "",
          "[Added Lines]",
          "6152:                                       m_currentNodeFunc->AsParseNodeFnc()->functionId,",
          "6153:                                       GetFunctionName(m_currentNodeFunc, m_currentNodeFunc->AsParseNodeFnc()->hint),",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "6277:                     ParseNodePtr *ppnodeExprScopeSave = m_ppnodeExprScope;",
          "6279:                     ParseNodePtr pnodeFnc = CreateDummyFuncNode(true);",
          "6281:                     m_ppnodeExprScope = nullptr;",
          "6283:                     charcount_t ichStop = m_pscan->IchLimTok();",
          "",
          "[Removed Lines]",
          "6280:                     m_ppnodeScope = &pnodeFnc->sxFnc.pnodeScopes;",
          "",
          "[Added Lines]",
          "6280:                     m_ppnodeScope = &pnodeFnc->AsParseNodeFnc()->pnodeScopes;",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "6316:                 if (PHASE_TRACE1(Js::ParallelParsePhase))",
          "6317:                 {",
          "6318:                     Output::Print(_u(\"Failed fast seek: %d. %s -- %d...%d\\n\"),",
          "6321:                                   ichStart, m_pscan->IchLimTok());",
          "6322:                 }",
          "6323:                 m_nextBlockId = blockIdSave;",
          "",
          "[Removed Lines]",
          "6319:                                   m_currentNodeFunc->sxFnc.functionId,",
          "6320:                                   GetFunctionName(m_currentNodeFunc, m_currentNodeFunc->sxFnc.hint),",
          "",
          "[Added Lines]",
          "6319:                                   m_currentNodeFunc->AsParseNodeFnc()->functionId,",
          "6320:                                   GetFunctionName(m_currentNodeFunc, m_currentNodeFunc->AsParseNodeFnc()->hint),",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "6339:     ParseNodePtr pnodeFnc = CreateNode(knopFncDecl);",
          "6364:     m_currentNodeFunc = pnodeFnc;",
          "6367:     return pnodeFnc;",
          "6368: }",
          "",
          "[Removed Lines]",
          "6340:     pnodeFnc->sxFnc.ClearFlags();",
          "6341:     pnodeFnc->sxFnc.SetDeclaration(fDeclaration);",
          "6342:     pnodeFnc->sxFnc.astSize             = 0;",
          "6343:     pnodeFnc->sxFnc.pnodeName           = nullptr;",
          "6344:     pnodeFnc->sxFnc.pnodeScopes         = nullptr;",
          "6345:     pnodeFnc->sxFnc.pnodeRest           = nullptr;",
          "6346:     pnodeFnc->sxFnc.pid                 = nullptr;",
          "6347:     pnodeFnc->sxFnc.hint                = nullptr;",
          "6348:     pnodeFnc->sxFnc.hintOffset          = 0;",
          "6349:     pnodeFnc->sxFnc.hintLength          = 0;",
          "6350:     pnodeFnc->sxFnc.isNameIdentifierRef = true;",
          "6351:     pnodeFnc->sxFnc.nestedFuncEscapes   = false;",
          "6352:     pnodeFnc->sxFnc.pnodeNext           = nullptr;",
          "6353:     pnodeFnc->sxFnc.pnodeParams         = nullptr;",
          "6354:     pnodeFnc->sxFnc.pnodeVars           = nullptr;",
          "6355:     pnodeFnc->sxFnc.funcInfo            = nullptr;",
          "6356:     pnodeFnc->sxFnc.deferredStub        = nullptr;",
          "6357:     pnodeFnc->sxFnc.nestedCount         = 0;",
          "6358:     pnodeFnc->sxFnc.SetNested(m_currentNodeFunc != nullptr); // If there is a current function, then we're a nested function.",
          "6359:     pnodeFnc->sxFnc.SetStrictMode(IsStrictMode()); // Inherit current strict mode -- may be overridden by the function itself if it contains a strict mode directive.",
          "6360:     pnodeFnc->sxFnc.firstDefaultArg = 0;",
          "6361:     pnodeFnc->sxFnc.isBodyAndParamScopeMerged = true;",
          "6363:     m_pCurrentAstSize = &pnodeFnc->sxFnc.astSize;",
          "6365:     m_pnestedCount = &pnodeFnc->sxFnc.nestedCount;",
          "",
          "[Added Lines]",
          "6340:     pnodeFnc->AsParseNodeFnc()->ClearFlags();",
          "6341:     pnodeFnc->AsParseNodeFnc()->SetDeclaration(fDeclaration);",
          "6342:     pnodeFnc->AsParseNodeFnc()->astSize             = 0;",
          "6343:     pnodeFnc->AsParseNodeFnc()->pnodeName           = nullptr;",
          "6344:     pnodeFnc->AsParseNodeFnc()->pnodeScopes         = nullptr;",
          "6345:     pnodeFnc->AsParseNodeFnc()->pnodeRest           = nullptr;",
          "6346:     pnodeFnc->AsParseNodeFnc()->pid                 = nullptr;",
          "6347:     pnodeFnc->AsParseNodeFnc()->hint                = nullptr;",
          "6348:     pnodeFnc->AsParseNodeFnc()->hintOffset          = 0;",
          "6349:     pnodeFnc->AsParseNodeFnc()->hintLength          = 0;",
          "6350:     pnodeFnc->AsParseNodeFnc()->isNameIdentifierRef = true;",
          "6351:     pnodeFnc->AsParseNodeFnc()->nestedFuncEscapes   = false;",
          "6352:     pnodeFnc->AsParseNodeFnc()->pnodeNext           = nullptr;",
          "6353:     pnodeFnc->AsParseNodeFnc()->pnodeParams         = nullptr;",
          "6354:     pnodeFnc->AsParseNodeFnc()->pnodeVars           = nullptr;",
          "6355:     pnodeFnc->AsParseNodeFnc()->funcInfo            = nullptr;",
          "6356:     pnodeFnc->AsParseNodeFnc()->deferredStub        = nullptr;",
          "6357:     pnodeFnc->AsParseNodeFnc()->nestedCount         = 0;",
          "6358:     pnodeFnc->AsParseNodeFnc()->SetNested(m_currentNodeFunc != nullptr); // If there is a current function, then we're a nested function.",
          "6359:     pnodeFnc->AsParseNodeFnc()->SetStrictMode(IsStrictMode()); // Inherit current strict mode -- may be overridden by the function itself if it contains a strict mode directive.",
          "6360:     pnodeFnc->AsParseNodeFnc()->firstDefaultArg = 0;",
          "6361:     pnodeFnc->AsParseNodeFnc()->isBodyAndParamScopeMerged = true;",
          "6363:     m_pCurrentAstSize = &pnodeFnc->AsParseNodeFnc()->astSize;",
          "6365:     m_pnestedCount = &pnodeFnc->AsParseNodeFnc()->nestedCount;",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "6383:         ChkCurTok(tkLCurly, ERRnoLcurly);",
          "6385:         bool* detectStrictModeOn = IsStrictMode() ? nullptr : pStrictModeTurnedOn;",
          "6388:         ParseStmtList<false>(nullptr, nullptr, SM_DeferredParse, true /* isSourceElementList */, detectStrictModeOn);",
          "6390:         ChkCurTokNoScan(tkRCurly, ERRnoRcurly);",
          "6392:         pnodeFnc->ichLim = m_pscan->IchLimTok();",
          "6394:     }",
          "6396:     if (*pStrictModeTurnedOn)",
          "6397:     {",
          "6399:     }",
          "6401:     if (!PHASE_OFF1(Js::SkipNestedDeferredPhase))",
          "",
          "[Removed Lines]",
          "6386:         m_ppnodeVar = &m_currentNodeDeferredFunc->sxFnc.pnodeVars;",
          "6393:         pnodeFnc->sxFnc.cbLim = m_pscan->IecpLimTok();",
          "6398:         pnodeFnc->sxFnc.SetStrictMode(true);",
          "",
          "[Added Lines]",
          "6386:         m_ppnodeVar = &m_currentNodeDeferredFunc->AsParseNodeFnc()->pnodeVars;",
          "6393:         pnodeFnc->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTok();",
          "6398:         pnodeFnc->AsParseNodeFnc()->SetStrictMode(true);",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "6406:         RestorePoint *restorePoint = Anew(&m_nodeAllocator, RestorePoint);",
          "6407:         m_pscan->Capture(restorePoint,",
          "6409:                          lengthBeforeBody - this->GetSourceLength());",
          "6411:     }",
          "6412: }",
          "",
          "[Removed Lines]",
          "6410:         pnodeFnc->sxFnc.pRestorePoint = restorePoint;",
          "",
          "[Added Lines]",
          "6410:         pnodeFnc->AsParseNodeFnc()->pRestorePoint = restorePoint;",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "6455:     if (flags & fFncGenerator)",
          "6456:     {",
          "6457:         Assert(m_scriptContext->GetConfig()->IsES6GeneratorsEnabled());",
          "6459:     }",
          "6460:     else if (m_scriptContext->GetConfig()->IsES6GeneratorsEnabled() &&",
          "6461:         m_token.tk == tkStar &&",
          "",
          "[Removed Lines]",
          "6458:         pnodeFnc->sxFnc.SetIsGenerator();",
          "",
          "[Added Lines]",
          "6458:         pnodeFnc->AsParseNodeFnc()->SetIsGenerator();",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "6472:             m_pscan->Scan();",
          "6473:         }",
          "6476:     }",
          "6478:     if (fIsAsync)",
          "6479:     {",
          "6481:         {",
          "6482:             Error(ERRsyntax);",
          "6483:         }",
          "6485:     }",
          "6487:     if (pnodeFnc)",
          "6488:     {",
          "6490:     }",
          "6492:     if ((m_token.tk != tkID || flags & fFncNoName)",
          "6494:     {",
          "6495:         if (fDeclaration  ||",
          "6496:             m_token.IsReservedWord())  // For example:  var x = (function break(){});",
          "",
          "[Removed Lines]",
          "6475:         pnodeFnc->sxFnc.SetIsGenerator();",
          "6480:         if (pnodeFnc->sxFnc.IsGenerator())",
          "6484:         pnodeFnc->sxFnc.SetIsAsync();",
          "6489:         pnodeFnc->sxFnc.pnodeName = nullptr;",
          "6493:         && (IsStrictMode() || (pnodeFnc && pnodeFnc->sxFnc.IsGenerator()) || m_token.tk != tkYIELD || fDeclaration)) // Function expressions can have the name yield even inside generator functions",
          "",
          "[Added Lines]",
          "6475:         pnodeFnc->AsParseNodeFnc()->SetIsGenerator();",
          "6480:         if (pnodeFnc->AsParseNodeFnc()->IsGenerator())",
          "6484:         pnodeFnc->AsParseNodeFnc()->SetIsAsync();",
          "6489:         pnodeFnc->AsParseNodeFnc()->pnodeName = nullptr;",
          "6493:         && (IsStrictMode() || (pnodeFnc && pnodeFnc->AsParseNodeFnc()->IsGenerator()) || m_token.tk != tkYIELD || fDeclaration)) // Function expressions can have the name yield even inside generator functions",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "6527:     if (fDeclaration &&",
          "6528:         pnodeFncParent &&",
          "6532:     {",
          "6534:     }",
          "6536:     if (buildAST)",
          "6537:     {",
          "6538:         AnalysisAssert(pnodeFnc);",
          "6539:         ichLimNames = pnodeT->ichLim;",
          "6545:         {",
          "6548:         }",
          "6549:         else",
          "6550:         {",
          "6553:                 m_pscan->PchBase() + ichMinNames,",
          "6554:                 m_pscan->AdjustedLast(),",
          "6555:                 ichLimNames - ichMinNames);",
          "",
          "[Removed Lines]",
          "6529:         pnodeFncParent->sxFnc.pnodeName &&",
          "6530:         pnodeFncParent->sxFnc.pnodeName->nop == knopVarDecl &&",
          "6531:         pnodeFncParent->sxFnc.pnodeName->sxVar.pid == pidBase)",
          "6533:         pnodeFncParent->sxFnc.SetNameIsHidden();",
          "6540:         AddToNodeList(&pnodeFnc->sxFnc.pnodeName, pLastNodeRef, pnodeT);",
          "6542:         pnodeFnc->sxFnc.pnodeName->ichMin = ichMinNames;",
          "6543:         pnodeFnc->sxFnc.pnodeName->ichLim = ichLimNames;",
          "6544:         if (knopVarDecl == pnodeFnc->sxFnc.pnodeName->nop)",
          "6547:             pnodeFnc->sxFnc.pid = pnodeFnc->sxFnc.pnodeName->sxVar.pid;",
          "6552:             pnodeFnc->sxFnc.pid = m_phtbl->PidHashNameLen(",
          "",
          "[Added Lines]",
          "6529:         pnodeFncParent->AsParseNodeFnc()->pnodeName &&",
          "6530:         pnodeFncParent->AsParseNodeFnc()->pnodeName->nop == knopVarDecl &&",
          "6531:         pnodeFncParent->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid == pidBase)",
          "6533:         pnodeFncParent->AsParseNodeFnc()->SetNameIsHidden();",
          "6540:         AddToNodeList(&pnodeFnc->AsParseNodeFnc()->pnodeName, pLastNodeRef, pnodeT);",
          "6542:         pnodeFnc->AsParseNodeFnc()->pnodeName->ichMin = ichMinNames;",
          "6543:         pnodeFnc->AsParseNodeFnc()->pnodeName->ichLim = ichLimNames;",
          "6544:         if (knopVarDecl == pnodeFnc->AsParseNodeFnc()->pnodeName->nop)",
          "6547:             pnodeFnc->AsParseNodeFnc()->pid = pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid;",
          "6552:             pnodeFnc->AsParseNodeFnc()->pid = m_phtbl->PidHashNameLen(",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "6562: void Parser::ValidateFormals()",
          "6563: {",
          "6566:     m_pscan->Scan();",
          "6567: }",
          "",
          "[Removed Lines]",
          "6564:     ParseFncFormals<false>(nullptr, nullptr, fFncNoFlgs);",
          "",
          "[Added Lines]",
          "6564:     ParseFncFormals<false>(this->GetCurrentFunctionNode(), nullptr, fFncNoFlgs);",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "6611:     if (fLambda)",
          "6612:     {",
          "6615:     }",
          "6617:     Assert(!fNoArg || !fOneArg); // fNoArg and fOneArg can never be true at the same time.",
          "",
          "[Removed Lines]",
          "6613:         fPreviousYieldIsKeyword = m_pscan->SetYieldIsKeywordRegion(pnodeParentFnc != nullptr && pnodeParentFnc->sxFnc.IsGenerator());",
          "6614:         fPreviousAwaitIsKeyword = m_pscan->SetAwaitIsKeywordRegion(fAsync || (pnodeParentFnc != nullptr && pnodeParentFnc->sxFnc.IsAsync()));",
          "",
          "[Added Lines]",
          "6613:         fPreviousYieldIsKeyword = m_pscan->SetYieldIsKeywordRegion(pnodeParentFnc != nullptr && pnodeParentFnc->AsParseNodeFnc()->IsGenerator());",
          "6614:         fPreviousAwaitIsKeyword = m_pscan->SetAwaitIsKeywordRegion(fAsync || (pnodeParentFnc != nullptr && pnodeParentFnc->AsParseNodeFnc()->IsAsync()));",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "6688:                 if (IsES6DestructuringEnabled() && IsPossiblePatternStart())",
          "6689:                 {",
          "6694:                     ParseNodePtr *const ppnodeVarSave = m_ppnodeVar;",
          "6697:                     ParseNodePtr * ppNodeLex = m_currentBlockInfo->m_ppnodeLex;",
          "6698:                     Assert(ppNodeLex != nullptr);",
          "",
          "[Removed Lines]",
          "6691:                     this->GetCurrentFunctionNode()->sxFnc.SetHasNonSimpleParameterList();",
          "6692:                     this->GetCurrentFunctionNode()->sxFnc.SetHasDestructuredParams();",
          "6695:                     m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "",
          "[Added Lines]",
          "6691:                     this->GetCurrentFunctionNode()->AsParseNodeFnc()->SetHasNonSimpleParameterList();",
          "6692:                     this->GetCurrentFunctionNode()->AsParseNodeFnc()->SetHasDestructuredParams();",
          "6695:                     m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "6709:                     }",
          "6713:                     {",
          "6714:                         Assert(lexNode->IsVarLetOrConst());",
          "6718:                         {",
          "6719:                             GetCurrentFunctionNode()->grfpn |= PNodeFlags::fpnArguments_overriddenInParam;",
          "6720:                         }",
          "",
          "[Removed Lines]",
          "6712:                     for (ParseNodePtr lexNode = *ppNodeLex; lexNode != nullptr; lexNode = lexNode->sxVar.pnodeNext)",
          "6715:                         UpdateOrCheckForDuplicateInFormals(lexNode->sxVar.pid, &formals);",
          "6716:                         lexNode->sxVar.sym->SetSymbolType(STFormal);",
          "6717:                         if (lexNode->sxVar.pid == wellKnownPropertyPids.arguments)",
          "",
          "[Added Lines]",
          "6712:                     for (ParseNodePtr lexNode = *ppNodeLex; lexNode != nullptr; lexNode = lexNode->AsParseNodeVar()->pnodeNext)",
          "6715:                         UpdateOrCheckForDuplicateInFormals(lexNode->AsParseNodeVar()->pid, &formals);",
          "6716:                         lexNode->AsParseNodeVar()->sym->SetSymbolType(STFormal);",
          "6717:                         if (lexNode->AsParseNodeVar()->pid == wellKnownPropertyPids.arguments)",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "6737:                         }",
          "6742:                     }",
          "6744:                     isBindingPattern = true;",
          "",
          "[Removed Lines]",
          "6740:                         paramPattern->sxParamPattern.pnodeNext = nullptr;",
          "6741:                         m_ppnodeVar = &paramPattern->sxParamPattern.pnodeNext;",
          "",
          "[Added Lines]",
          "6740:                         paramPattern->AsParseNodeParamPattern()->pnodeNext = nullptr;",
          "6741:                         m_ppnodeVar = &paramPattern->AsParseNodeParamPattern()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "6760:                 if (seenRestParameter)",
          "6761:                 {",
          "6763:                     if (flags & fFncOneArg)",
          "6764:                     {",
          "6766:                         Error(ERRUnexpectedEllipsis);",
          "6767:                     }",
          "6768:                     pnodeT = CreateDeclNode(knopVarDecl, pid, STFormal, false);",
          "6770:                     if (buildAST)",
          "6771:                     {",
          "6774:                         if (!isNonSimpleParameterList)",
          "6775:                         {",
          "6779:                         }",
          "6780:                     }",
          "",
          "[Removed Lines]",
          "6762:                     this->GetCurrentFunctionNode()->sxFnc.SetHasNonSimpleParameterList();",
          "6769:                     pnodeT->sxVar.sym->SetIsNonSimpleParameter(true);",
          "6773:                         pnodeFnc->sxFnc.pnodeRest = pnodeT;",
          "6778:                             MapFormalsWithoutRest(m_currentNodeFunc, [&](ParseNodePtr pnodeArg) { pnodeArg->sxVar.sym->SetIsNonSimpleParameter(true); });",
          "",
          "[Added Lines]",
          "6762:                     this->GetCurrentFunctionNode()->AsParseNodeFnc()->SetHasNonSimpleParameterList();",
          "6769:                     pnodeT->AsParseNodeVar()->sym->SetIsNonSimpleParameter(true);",
          "6773:                         pnodeFnc->AsParseNodeFnc()->pnodeRest = pnodeT;",
          "6778:                             MapFormalsWithoutRest(m_currentNodeFunc, [&](ParseNodePtr pnodeArg) { pnodeArg->AsParseNodeVar()->sym->SetIsNonSimpleParameter(true); });",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "6786:                     pnodeT = CreateVarDeclNode(pid, STFormal, false, nullptr, false);",
          "6787:                     if (isNonSimpleParameterList)",
          "6788:                     {",
          "6790:                     }",
          "6791:                 }",
          "",
          "[Removed Lines]",
          "6789:                         pnodeT->sxVar.sym->SetIsNonSimpleParameter(true);",
          "",
          "[Added Lines]",
          "6789:                         pnodeT->AsParseNodeVar()->sym->SetIsNonSimpleParameter(true);",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "6821:                     ParseNode* currentFncNode = GetCurrentFunctionNode();",
          "6823:                     {",
          "6827:                     }",
          "6829:                     m_pscan->Scan();",
          "",
          "[Removed Lines]",
          "6822:                     if (!currentFncNode->sxFnc.HasDefaultArguments())",
          "6824:                         currentFncNode->sxFnc.SetHasDefaultArguments();",
          "6825:                         currentFncNode->sxFnc.SetHasNonSimpleParameterList();",
          "6826:                         currentFncNode->sxFnc.firstDefaultArg = argPos;",
          "",
          "[Added Lines]",
          "6822:                     if (!currentFncNode->AsParseNodeFnc()->HasDefaultArguments())",
          "6824:                         currentFncNode->AsParseNodeFnc()->SetHasDefaultArguments();",
          "6825:                         currentFncNode->AsParseNodeFnc()->SetHasNonSimpleParameterList();",
          "6826:                         currentFncNode->AsParseNodeFnc()->firstDefaultArg = argPos;",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "6844:                     if (buildAST && pnodeInit && pnodeInit->nop == knopFncDecl)",
          "6845:                     {",
          "6846:                         Assert(nameHintLength >= nameHintOffset);",
          "6850:                     }",
          "6852:                     AnalysisAssert(pnodeT);",
          "6854:                     if (!isNonSimpleParameterList)",
          "6855:                     {",
          "6856:                         if (buildAST)",
          "6857:                         {",
          "6861:                         }",
          "",
          "[Removed Lines]",
          "6847:                         pnodeInit->sxFnc.hint = pNameHint;",
          "6848:                         pnodeInit->sxFnc.hintLength = nameHintLength;",
          "6849:                         pnodeInit->sxFnc.hintOffset = nameHintOffset;",
          "6853:                     pnodeT->sxVar.sym->SetIsNonSimpleParameter(true);",
          "6860:                             MapFormalsWithoutRest(m_currentNodeFunc, [&](ParseNodePtr pnodeArg) { pnodeArg->sxVar.sym->SetIsNonSimpleParameter(true); });",
          "",
          "[Added Lines]",
          "6847:                         pnodeInit->AsParseNodeFnc()->hint = pNameHint;",
          "6848:                         pnodeInit->AsParseNodeFnc()->hintLength = nameHintLength;",
          "6849:                         pnodeInit->AsParseNodeFnc()->hintOffset = nameHintOffset;",
          "6853:                     pnodeT->AsParseNodeVar()->sym->SetIsNonSimpleParameter(true);",
          "6860:                             MapFormalsWithoutRest(m_currentNodeFunc, [&](ParseNodePtr pnodeArg) { pnodeArg->AsParseNodeVar()->sym->SetIsNonSimpleParameter(true); });",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "6867:                     if (buildAST)",
          "6868:                     {",
          "6870:                         {",
          "6871:                             CHAKRATEL_LANGSTATS_INC_LANGFEATURECOUNT(DefaultArgFunction, m_scriptContext);",
          "6872:                         }",
          "6874:                         pnodeT->ichLim = m_pscan->IchLimTok();",
          "6875:                     }",
          "6876:                 }",
          "",
          "[Removed Lines]",
          "6869:                         if (!m_currentNodeFunc->sxFnc.HasDefaultArguments())",
          "6873:                         pnodeT->sxVar.pnodeInit = pnodeInit;",
          "",
          "[Added Lines]",
          "6869:                         if (!m_currentNodeFunc->AsParseNodeFnc()->HasDefaultArguments())",
          "6873:                         pnodeT->AsParseNodeVar()->pnodeInit = pnodeInit;",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "6913:             Error(ERRnoRparen);",
          "6914:         }",
          "6917:         {",
          "6920:         }",
          "6921:     }",
          "6922:     Assert(m_token.tk == tkRParen);",
          "",
          "[Removed Lines]",
          "6916:         if (this->GetCurrentFunctionNode()->sxFnc.CallsEval() || this->GetCurrentFunctionNode()->sxFnc.ChildCallsEval())",
          "6918:             Assert(pnodeFnc->sxFnc.HasNonSimpleParameterList());",
          "6919:             pnodeFnc->sxFnc.ResetBodyAndParamScopeMerged();",
          "",
          "[Added Lines]",
          "6916:         if (this->GetCurrentFunctionNode()->AsParseNodeFnc()->CallsEval() || this->GetCurrentFunctionNode()->AsParseNodeFnc()->ChildCallsEval())",
          "6918:             Assert(pnodeFnc->AsParseNodeFnc()->HasNonSimpleParameterList());",
          "6919:             pnodeFnc->AsParseNodeFnc()->ResetBodyAndParamScopeMerged();",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "6946:     pnodeFnc = CreateNode(knopFncDecl);",
          "6958:     pnodeFnc->ichLim = m_pscan->IchLimTok();",
          "6959:     pnodeFnc->ichMin = m_pscan->IchMinTok();",
          "6990: #ifdef DBG",
          "6992: #endif",
          "6994:     AppendFunctionToScopeList(true, pnodeFnc);",
          "",
          "[Removed Lines]",
          "6947:     pnodeFnc->sxFnc.ClearFlags();",
          "6948:     pnodeFnc->sxFnc.SetNested(NULL != m_currentNodeFunc);",
          "6949:     pnodeFnc->sxFnc.SetStrictMode();",
          "6950:     pnodeFnc->sxFnc.SetDeclaration(TRUE);",
          "6951:     pnodeFnc->sxFnc.SetIsMethod(TRUE);",
          "6952:     pnodeFnc->sxFnc.SetIsClassMember(TRUE);",
          "6953:     pnodeFnc->sxFnc.SetIsClassConstructor(TRUE);",
          "6954:     pnodeFnc->sxFnc.SetIsBaseClassConstructor(!extends);",
          "6955:     pnodeFnc->sxFnc.SetHasNonThisStmt();",
          "6956:     pnodeFnc->sxFnc.SetIsGeneratedDefault(TRUE);",
          "6960:     pnodeFnc->sxFnc.cbLim = m_pscan->IecpLimTok();",
          "6961:     pnodeFnc->sxFnc.cbMin = m_pscan->IecpMinTok();",
          "6962:     pnodeFnc->sxFnc.astSize = 0;",
          "6963:     pnodeFnc->sxFnc.lineNumber = m_pscan->LineCur();",
          "6965:     pnodeFnc->sxFnc.functionId          = (*m_nextFunctionId);",
          "6966:     pnodeFnc->sxFnc.pid                 = nullptr;",
          "6967:     pnodeFnc->sxFnc.hint                = nullptr;",
          "6968:     pnodeFnc->sxFnc.hintOffset          = 0;",
          "6969:     pnodeFnc->sxFnc.hintLength          = 0;",
          "6970:     pnodeFnc->sxFnc.isNameIdentifierRef = true;",
          "6971:     pnodeFnc->sxFnc.nestedFuncEscapes   = false;",
          "6972:     pnodeFnc->sxFnc.pnodeName           = nullptr;",
          "6973:     pnodeFnc->sxFnc.pnodeScopes         = nullptr;",
          "6974:     pnodeFnc->sxFnc.pnodeParams         = nullptr;",
          "6975:     pnodeFnc->sxFnc.pnodeVars           = nullptr;",
          "6976:     pnodeFnc->sxFnc.pnodeBody           = nullptr;",
          "6977:     pnodeFnc->sxFnc.nestedCount         = 0;",
          "6978:     pnodeFnc->sxFnc.pnodeNext           = nullptr;",
          "6979:     pnodeFnc->sxFnc.pnodeRest           = nullptr;",
          "6980:     pnodeFnc->sxFnc.deferredStub        = nullptr;",
          "6981:     pnodeFnc->sxFnc.funcInfo            = nullptr;",
          "6986:     pnodeFnc->sxFnc.canBeDeferred       = false;",
          "6988:     pnodeFnc->sxFnc.isBodyAndParamScopeMerged = true;",
          "6991:     pnodeFnc->sxFnc.deferredParseNextFunctionId = *(this->m_nextFunctionId);",
          "",
          "[Added Lines]",
          "6947:     pnodeFnc->AsParseNodeFnc()->ClearFlags();",
          "6948:     pnodeFnc->AsParseNodeFnc()->SetNested(NULL != m_currentNodeFunc);",
          "6949:     pnodeFnc->AsParseNodeFnc()->SetStrictMode();",
          "6950:     pnodeFnc->AsParseNodeFnc()->SetDeclaration(TRUE);",
          "6951:     pnodeFnc->AsParseNodeFnc()->SetIsMethod(TRUE);",
          "6952:     pnodeFnc->AsParseNodeFnc()->SetIsClassMember(TRUE);",
          "6953:     pnodeFnc->AsParseNodeFnc()->SetIsClassConstructor(TRUE);",
          "6954:     pnodeFnc->AsParseNodeFnc()->SetIsBaseClassConstructor(!extends);",
          "6955:     pnodeFnc->AsParseNodeFnc()->SetHasNonThisStmt();",
          "6956:     pnodeFnc->AsParseNodeFnc()->SetIsGeneratedDefault(TRUE);",
          "6960:     pnodeFnc->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTok();",
          "6961:     pnodeFnc->AsParseNodeFnc()->cbMin = m_pscan->IecpMinTok();",
          "6962:     pnodeFnc->AsParseNodeFnc()->astSize = 0;",
          "6963:     pnodeFnc->AsParseNodeFnc()->lineNumber = m_pscan->LineCur();",
          "6965:     pnodeFnc->AsParseNodeFnc()->functionId          = (*m_nextFunctionId);",
          "6966:     pnodeFnc->AsParseNodeFnc()->pid                 = nullptr;",
          "6967:     pnodeFnc->AsParseNodeFnc()->hint                = nullptr;",
          "6968:     pnodeFnc->AsParseNodeFnc()->hintOffset          = 0;",
          "6969:     pnodeFnc->AsParseNodeFnc()->hintLength          = 0;",
          "6970:     pnodeFnc->AsParseNodeFnc()->isNameIdentifierRef = true;",
          "6971:     pnodeFnc->AsParseNodeFnc()->nestedFuncEscapes   = false;",
          "6972:     pnodeFnc->AsParseNodeFnc()->pnodeName           = nullptr;",
          "6973:     pnodeFnc->AsParseNodeFnc()->pnodeScopes         = nullptr;",
          "6974:     pnodeFnc->AsParseNodeFnc()->pnodeParams         = nullptr;",
          "6975:     pnodeFnc->AsParseNodeFnc()->pnodeVars           = nullptr;",
          "6976:     pnodeFnc->AsParseNodeFnc()->pnodeBody           = nullptr;",
          "6977:     pnodeFnc->AsParseNodeFnc()->nestedCount         = 0;",
          "6978:     pnodeFnc->AsParseNodeFnc()->pnodeNext           = nullptr;",
          "6979:     pnodeFnc->AsParseNodeFnc()->pnodeRest           = nullptr;",
          "6980:     pnodeFnc->AsParseNodeFnc()->deferredStub        = nullptr;",
          "6981:     pnodeFnc->AsParseNodeFnc()->funcInfo            = nullptr;",
          "6986:     pnodeFnc->AsParseNodeFnc()->canBeDeferred       = false;",
          "6988:     pnodeFnc->AsParseNodeFnc()->isBodyAndParamScopeMerged = true;",
          "6991:     pnodeFnc->AsParseNodeFnc()->deferredParseNextFunctionId = *(this->m_nextFunctionId);",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "7007:     if (m_pscan->IchMinTok() >= m_pscan->IchMinLine())",
          "7008:     {",
          "7011:     }",
          "7012:     else if (m_currentNodeFunc)",
          "7013:     {",
          "7016:         ULONG offsetFromCurrentFunction = m_pscan->IchMinTok() - m_currentNodeFunc->ichMin;",
          "7018:     }",
          "7019:     else",
          "7020:     {",
          "7023:     }",
          "7025:     int32 * pAstSizeSave = m_pCurrentAstSize;",
          "7029:     ParseNodePtr pnodeFncSave = m_currentNodeFunc;",
          "",
          "[Removed Lines]",
          "7010:         pnodeFnc->sxFnc.columnNumber = m_pscan->IchMinTok() - m_pscan->IchMinLine();",
          "7017:         pnodeFnc->sxFnc.columnNumber = m_currentNodeFunc->sxFnc.columnNumber + offsetFromCurrentFunction;",
          "7022:         pnodeFnc->sxFnc.columnNumber = 0;",
          "7026:     m_pCurrentAstSize = &(pnodeFnc->sxFnc.astSize);",
          "",
          "[Added Lines]",
          "7010:         pnodeFnc->AsParseNodeFnc()->columnNumber = m_pscan->IchMinTok() - m_pscan->IchMinLine();",
          "7017:         pnodeFnc->AsParseNodeFnc()->columnNumber = m_currentNodeFunc->AsParseNodeFnc()->columnNumber + offsetFromCurrentFunction;",
          "7022:         pnodeFnc->AsParseNodeFnc()->columnNumber = 0;",
          "7026:     m_pCurrentAstSize = &(pnodeFnc->AsParseNodeFnc()->astSize);",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "7040:         ParseNodePtr *const ppnodeVarSave = m_ppnodeVar;",
          "7043:         IdentPtr pidargs = m_phtbl->PidHashNameLen(_u(\"args\"), sizeof(\"args\") - 1);",
          "7044:         ParseNodePtr pnodeT = CreateVarDeclNode(pidargs, STFormal);",
          "7047:         PidRefStack *ref = this->PushPidRef(pidargs);",
          "7049:         argsId = CreateNameNode(pidargs, pnodeFnc->ichMin, pnodeFnc->ichLim);",
          "7052:         m_ppnodeVar = ppnodeVarSave;",
          "7053:     }",
          "7055:     ParseNodePtr pnodeInnerBlock = StartParseBlock<buildAST>(PnodeBlockType::Function, ScopeType_FunctionBody);",
          "7060:     if (buildAST)",
          "7061:     {",
          "",
          "[Removed Lines]",
          "7041:         m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "7045:         pnodeT->sxVar.sym->SetIsNonSimpleParameter(true);",
          "7046:         pnodeFnc->sxFnc.pnodeRest = pnodeT;",
          "7051:         argsId->sxPid.symRef = ref->GetSymRef();",
          "7056:     pnodeBlock->sxBlock.pnodeScopes = pnodeInnerBlock;",
          "7057:     pnodeFnc->sxFnc.pnodeBodyScope = pnodeInnerBlock;",
          "7058:     pnodeFnc->sxFnc.pnodeScopes = pnodeBlock;",
          "",
          "[Added Lines]",
          "7041:         m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "7045:         pnodeT->AsParseNodeVar()->sym->SetIsNonSimpleParameter(true);",
          "7046:         pnodeFnc->AsParseNodeFnc()->pnodeRest = pnodeT;",
          "7051:         argsId->AsParseNodePid()->symRef = ref->GetSymRef();",
          "7056:     pnodeBlock->AsParseNodeBlock()->pnodeScopes = pnodeInnerBlock;",
          "7057:     pnodeFnc->AsParseNodeFnc()->pnodeBodyScope = pnodeInnerBlock;",
          "7058:     pnodeFnc->AsParseNodeFnc()->pnodeScopes = pnodeBlock;",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "7066:             Assert(argsId);",
          "7067:             ParseNodePtr spreadArg = CreateUniNode(knopEllipsis, argsId, pnodeFnc->ichMin, pnodeFnc->ichLim);",
          "7068:             ParseNodePtr superRef = ReferenceSpecialName(wellKnownPropertyPids._superConstructor, pnodeFnc->ichMin, pnodeFnc->ichLim, true);",
          "7070:             ParseNodePtr callNode = CreateSuperCallNode(superRef, spreadArg);",
          "7076:         }",
          "7079:     }",
          "7081:     FinishParseBlock(pnodeInnerBlock);",
          "",
          "[Removed Lines]",
          "7069:             pnodeFnc->sxFnc.SetHasSuperReference(TRUE);",
          "7072:             callNode->sxSuperCall.pnodeThis = ReferenceSpecialName(wellKnownPropertyPids._this, pnodeFnc->ichMin, pnodeFnc->ichLim, true);",
          "7073:             callNode->sxSuperCall.pnodeNewTarget = ReferenceSpecialName(wellKnownPropertyPids._newTarget, pnodeFnc->ichMin, pnodeFnc->ichLim, true);",
          "7074:             callNode->sxCall.spreadArgCount = 1;",
          "7075:             AddToNodeList(&pnodeFnc->sxFnc.pnodeBody, &lastNodeRef, callNode);",
          "7078:         AddToNodeList(&pnodeFnc->sxFnc.pnodeBody, &lastNodeRef, CreateNodeWithScanner<knopEndCode>());",
          "",
          "[Added Lines]",
          "7069:             pnodeFnc->AsParseNodeFnc()->SetHasSuperReference(TRUE);",
          "7072:             callNode->AsParseNodeSuperCall()->pnodeThis = ReferenceSpecialName(wellKnownPropertyPids._this, pnodeFnc->ichMin, pnodeFnc->ichLim, true);",
          "7073:             callNode->AsParseNodeSuperCall()->pnodeNewTarget = ReferenceSpecialName(wellKnownPropertyPids._newTarget, pnodeFnc->ichMin, pnodeFnc->ichLim, true);",
          "7074:             callNode->AsParseNodeCall()->spreadArgCount = 1;",
          "7075:             AddToNodeList(&pnodeFnc->AsParseNodeFnc()->pnodeBody, &lastNodeRef, callNode);",
          "7078:         AddToNodeList(&pnodeFnc->AsParseNodeFnc()->pnodeBody, &lastNodeRef, CreateNodeWithScanner<knopEndCode>());",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "7102:     {",
          "7103:         pnodeRet = CreateNodeWithScanner<knopReturn>();",
          "7104:         pnodeRet->grfpn |= PNodeFlags::fpnSyntheticNode;",
          "7106:     }",
          "7108:     IdentToken token;",
          "",
          "[Removed Lines]",
          "7105:         pnodeLambda->sxFnc.pnodeScopes->sxBlock.pnodeStmt = pnodeRet;",
          "",
          "[Added Lines]",
          "7105:         pnodeLambda->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->pnodeStmt = pnodeRet;",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "7120:     if (buildAST)",
          "7121:     {",
          "7132:         pnodeLambda->ichLim = max(pnodeRet->ichLim, lastRParen);",
          "7140:         ParseNodePtr end = CreateNodeWithScanner<knopEndCode>(pnodeRet->ichLim);",
          "7141:         end->ichLim = end->ichMin; // make end code zero width at the immediate end of lambda body",
          "7146:     }",
          "7147:     else",
          "7148:     {",
          "7149:         pnodeLambda->ichLim = max(m_pscan->IchLimTokPrevious(), lastRParen);",
          "7151:     }",
          "7152: }",
          "",
          "[Removed Lines]",
          "7122:         pnodeRet->sxReturn.pnodeExpr = result;",
          "7124:         pnodeRet->ichMin = pnodeRet->sxReturn.pnodeExpr->ichMin;",
          "7125:         pnodeRet->ichLim = pnodeRet->sxReturn.pnodeExpr->ichLim;",
          "7129:         pnodeRet->sxStmt.grfnop = 0;",
          "7130:         pnodeRet->sxStmt.pnodeOuter = nullptr;",
          "7133:         pnodeLambda->sxFnc.cbLim = m_pscan->IecpLimTokPrevious();",
          "7134:         pnodeLambda->sxFnc.pnodeScopes->ichLim = pnodeRet->ichLim;",
          "7136:         pnodeLambda->sxFnc.pnodeBody = nullptr;",
          "7137:         AddToNodeList(&pnodeLambda->sxFnc.pnodeBody, &lastNodeRef, pnodeRet);",
          "7142:         AddToNodeList(&pnodeLambda->sxFnc.pnodeBody, &lastNodeRef, end);",
          "7145:         pnodeLambda->sxFnc.SetHasReferenceableBuiltInArguments(false);",
          "7150:         pnodeLambda->sxFnc.cbLim = m_pscan->IecpLimTokPrevious();",
          "",
          "[Added Lines]",
          "7122:         pnodeRet->AsParseNodeReturn()->pnodeExpr = result;",
          "7124:         pnodeRet->ichMin = pnodeRet->AsParseNodeReturn()->pnodeExpr->ichMin;",
          "7125:         pnodeRet->ichLim = pnodeRet->AsParseNodeReturn()->pnodeExpr->ichLim;",
          "7129:         pnodeRet->AsParseNodeStmt()->grfnop = 0;",
          "7130:         pnodeRet->AsParseNodeStmt()->pnodeOuter = nullptr;",
          "7133:         pnodeLambda->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTokPrevious();",
          "7134:         pnodeLambda->AsParseNodeFnc()->pnodeScopes->ichLim = pnodeRet->ichLim;",
          "7136:         pnodeLambda->AsParseNodeFnc()->pnodeBody = nullptr;",
          "7137:         AddToNodeList(&pnodeLambda->AsParseNodeFnc()->pnodeBody, &lastNodeRef, pnodeRet);",
          "7142:         AddToNodeList(&pnodeLambda->AsParseNodeFnc()->pnodeBody, &lastNodeRef, end);",
          "7145:         pnodeLambda->AsParseNodeFnc()->SetHasReferenceableBuiltInArguments(false);",
          "7150:         pnodeLambda->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTokPrevious();",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "7223:     Js::LocalFunctionId * nextFunctionIdSave = m_nextFunctionId;",
          "7225:     this->m_nextFunctionId = &tempNextFunctionId;",
          "7227:     ParseNodePtr pnodeFncSave = m_currentNodeFunc;",
          "",
          "[Removed Lines]",
          "7224:     Js::LocalFunctionId tempNextFunctionId = pnodeFnc->sxFnc.functionId + 1;",
          "",
          "[Added Lines]",
          "7224:     Js::LocalFunctionId tempNextFunctionId = pnodeFnc->AsParseNodeFnc()->functionId + 1;",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "7229:     int32* pAstSizeSave = m_pCurrentAstSize;",
          "7231:     m_currentNodeFunc = pnodeFnc;",
          "7242:     {",
          "7245:     }",
          "7246:     else",
          "7247:     {",
          "7250:         if (fMethod)",
          "7251:         {",
          "",
          "[Removed Lines]",
          "7232:     m_pCurrentAstSize = & (pnodeFnc->sxFnc.astSize);",
          "7234:     pnodeFnc->sxFnc.nestedCount = 0;",
          "7235:     m_pnestedCount = &pnodeFnc->sxFnc.nestedCount;",
          "7237:     bool fLambda = pnodeFnc->sxFnc.IsLambda();",
          "7238:     bool fMethod = pnodeFnc->sxFnc.IsMethod();",
          "7241:     if (pnodeFnc->sxFnc.pnodeName)",
          "7244:         m_pscan->SetCurrentCharacter(pnodeFnc->sxFnc.pnodeName->ichLim, pnodeFnc->sxFnc.lineNumber);",
          "7248:         m_pscan->SetCurrentCharacter(pnodeFnc->ichMin, pnodeFnc->sxFnc.lineNumber);",
          "",
          "[Added Lines]",
          "7232:     m_pCurrentAstSize = & (pnodeFnc->AsParseNodeFnc()->astSize);",
          "7234:     pnodeFnc->AsParseNodeFnc()->nestedCount = 0;",
          "7235:     m_pnestedCount = &pnodeFnc->AsParseNodeFnc()->nestedCount;",
          "7237:     bool fLambda = pnodeFnc->AsParseNodeFnc()->IsLambda();",
          "7238:     bool fMethod = pnodeFnc->AsParseNodeFnc()->IsMethod();",
          "7241:     if (pnodeFnc->AsParseNodeFnc()->pnodeName)",
          "7244:         m_pscan->SetCurrentCharacter(pnodeFnc->AsParseNodeFnc()->pnodeName->ichLim, pnodeFnc->AsParseNodeFnc()->lineNumber);",
          "7248:         m_pscan->SetCurrentCharacter(pnodeFnc->ichMin, pnodeFnc->AsParseNodeFnc()->lineNumber);",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "7269:                 }",
          "7270:             }",
          "7271:         }",
          "7273:         {",
          "7275:             m_pscan->ScanNoKeywords();",
          "",
          "[Removed Lines]",
          "7272:         else if (pnodeFnc->sxFnc.IsAccessor())",
          "",
          "[Added Lines]",
          "7272:         else if (pnodeFnc->AsParseNodeFnc()->IsAccessor())",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "7282:                 m_pscan->Scan();",
          "7283:                 if (m_token.GetIdentifier(m_phtbl) == wellKnownPropertyPids.async)",
          "7284:                 {",
          "7286:                     continue;",
          "7287:                 }",
          "",
          "[Removed Lines]",
          "7285:                     Assert(pnodeFnc->sxFnc.IsAsync());",
          "",
          "[Added Lines]",
          "7285:                     Assert(pnodeFnc->AsParseNodeFnc()->IsAsync());",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "7304:     if (!fMethod)",
          "",
          "[Removed Lines]",
          "7300:     bool fPreviousYieldIsKeyword = m_pscan->SetYieldIsKeywordRegion(pnodeFnc && pnodeFnc->sxFnc.IsGenerator());",
          "7301:     bool fPreviousAwaitIsKeyword = m_pscan->SetAwaitIsKeywordRegion(pnodeFnc && pnodeFnc->sxFnc.IsAsync());",
          "",
          "[Added Lines]",
          "7300:     bool fPreviousYieldIsKeyword = m_pscan->SetYieldIsKeywordRegion(pnodeFnc && pnodeFnc->AsParseNodeFnc()->IsGenerator());",
          "7301:     bool fPreviousAwaitIsKeyword = m_pscan->SetAwaitIsKeywordRegion(pnodeFnc && pnodeFnc->AsParseNodeFnc()->IsAsync());",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "7308:     }",
          "7309:     if (m_token.tk == tkStar)",
          "7310:     {",
          "7312:         m_pscan->ScanNoKeywords();",
          "7313:     }",
          "7314:     if (fLambda && m_token.tk == tkID && m_token.GetIdentifier(m_phtbl) == wellKnownPropertyPids.async)",
          "7315:     {",
          "7317:         m_pscan->ScanNoKeywords();",
          "7318:     }",
          "7319:     Assert(m_token.tk == tkLParen || (fLambda && m_token.tk == tkID));",
          "",
          "[Removed Lines]",
          "7311:         Assert(pnodeFnc->sxFnc.IsGenerator());",
          "7316:         Assert(pnodeFnc->sxFnc.IsAsync());",
          "",
          "[Added Lines]",
          "7311:         Assert(pnodeFnc->AsParseNodeFnc()->IsGenerator());",
          "7316:         Assert(pnodeFnc->AsParseNodeFnc()->IsAsync());",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "7377:         ParseNodePtr* lastNodeRef = NULL;",
          "7378:         const charcount_t ichLim = pnodeFnc->ichLim;",
          "7381:         this->FinishFncDecl(pnodeFnc, NULL, lastNodeRef, fLambda);",
          "",
          "[Removed Lines]",
          "7379:         const size_t cbLim = pnodeFnc->sxFnc.cbLim;",
          "",
          "[Added Lines]",
          "7379:         const size_t cbLim = pnodeFnc->AsParseNodeFnc()->cbLim;",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "7396:         }",
          "7397: #endif",
          "7398:         pnodeFnc->ichLim = ichLim;",
          "7400:     }",
          "7402:     m_currentNodeFunc = pnodeFncSave;",
          "",
          "[Removed Lines]",
          "7399:         pnodeFnc->sxFnc.cbLim = cbLim;",
          "",
          "[Added Lines]",
          "7399:         pnodeFnc->AsParseNodeFnc()->cbLim = cbLim;",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "7404:     m_pnestedCount = pnestedCountSave;",
          "7405:     Assert(m_pnestedCount);",
          "7408:     this->m_nextFunctionId = nextFunctionIdSave;",
          "7410:     m_pscan->SetYieldIsKeywordRegion(fPreviousYieldIsKeyword);",
          "",
          "[Removed Lines]",
          "7407:     Assert(tempNextFunctionId == pnodeFnc->sxFnc.deferredParseNextFunctionId);",
          "",
          "[Added Lines]",
          "7407:     Assert(tempNextFunctionId == pnodeFnc->AsParseNodeFnc()->deferredParseNextFunctionId);",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "7419:     {",
          "7420:         name = GetFunctionName(pnodeFnc, pNameHint);",
          "7421:         m_functionBody = NULL;  // for nested functions we do not want to get the name of the top deferred function return name;",
          "7424:     }",
          "",
          "[Removed Lines]",
          "7422:         JS_ETW(EventWriteJSCRIPT_PARSE_METHOD_START(m_sourceContextInfo->dwHostSourceContext, GetScriptContext(), pnodeFnc->sxFnc.functionId, 0, m_parseType, name));",
          "7423:         OUTPUT_TRACE(Js::DeferParsePhase, _u(\"Parsing function (%s) : %s (%d)\\n\"), GetParseType(), name, pnodeFnc->sxFnc.functionId);",
          "7426:     JS_ETW_INTERNAL(EventWriteJSCRIPT_PARSE_FUNC(GetScriptContext(), pnodeFnc->sxFnc.functionId, /*Undefer*/FALSE));",
          "",
          "[Added Lines]",
          "7422:         JS_ETW(EventWriteJSCRIPT_PARSE_METHOD_START(m_sourceContextInfo->dwHostSourceContext, GetScriptContext(), pnodeFnc->AsParseNodeFnc()->functionId, 0, m_parseType, name));",
          "7423:         OUTPUT_TRACE(Js::DeferParsePhase, _u(\"Parsing function (%s) : %s (%d)\\n\"), GetParseType(), name, pnodeFnc->AsParseNodeFnc()->functionId);",
          "7426:     JS_ETW_INTERNAL(EventWriteJSCRIPT_PARSE_FUNC(GetScriptContext(), pnodeFnc->AsParseNodeFnc()->functionId, /*Undefer*/FALSE));",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "7442:             ChkCurTok(tkLCurly, ERRnoLcurly);",
          "7443:         }",
          "7449:         if (!skipCurlyBraces)",
          "7450:         {",
          "",
          "[Removed Lines]",
          "7445:         ParseStmtList<true>(&pnodeFnc->sxFnc.pnodeBody, &lastNodeRef, SM_OnFunctionCode, true /* isSourceElementList */);",
          "7447:         AddToNodeList(&pnodeFnc->sxFnc.pnodeBody, &lastNodeRef, CreateNodeWithScanner<knopEndCode>());",
          "",
          "[Added Lines]",
          "7445:         ParseStmtList<true>(&pnodeFnc->AsParseNodeFnc()->pnodeBody, &lastNodeRef, SM_OnFunctionCode, true /* isSourceElementList */);",
          "7447:         AddToNodeList(&pnodeFnc->AsParseNodeFnc()->pnodeBody, &lastNodeRef, CreateNodeWithScanner<knopEndCode>());",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "7452:         }",
          "7454:         pnodeFnc->ichLim = m_pscan->IchLimTok();",
          "7456:     }",
          "7458: #ifdef ENABLE_JS_ETW",
          "7459:     int32 astSize = *m_pCurrentAstSize - startAstSize;",
          "7461: #endif",
          "7462: }",
          "",
          "[Removed Lines]",
          "7455:         pnodeFnc->sxFnc.cbLim = m_pscan->IecpLimTok();",
          "7460:     EventWriteJSCRIPT_PARSE_METHOD_STOP(m_sourceContextInfo->dwHostSourceContext, GetScriptContext(), pnodeFnc->sxFnc.functionId, astSize, m_parseType, name);",
          "",
          "[Added Lines]",
          "7455:         pnodeFnc->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTok();",
          "7460:     EventWriteJSCRIPT_PARSE_METHOD_STOP(m_sourceContextInfo->dwHostSourceContext, GetScriptContext(), pnodeFnc->AsParseNodeFnc()->functionId, astSize, m_parseType, name);",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "7468:     pnode->grfpn |= fpnSpecialSymbol;",
          "7472:     return pnode;",
          "7473: }",
          "",
          "[Removed Lines]",
          "7470:     pnode->sxPid.sym->SetIsGlobal(false);",
          "",
          "[Added Lines]",
          "7470:     pnode->AsParseNodeVar()->sym->SetIsGlobal(false);",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "7476: {",
          "7477:     ParseNodePtr pnode = nullptr;",
          "7480:     {",
          "7481:         pnode = CreateVarDeclNode(pid, STVariable, true, pnodeFnc);",
          "7482:     }",
          "7483:     else",
          "7484:     {",
          "7485:         ParseNodePtr *const ppnodeVarSave = m_ppnodeVar;",
          "7487:         pnode = CreateVarDeclNode(pid, STVariable, true, pnodeFnc);",
          "7488:         m_ppnodeVar = ppnodeVarSave;",
          "7489:     }",
          "",
          "[Removed Lines]",
          "7479:     if (m_ppnodeVar == &pnodeFnc->sxFnc.pnodeVars)",
          "7486:         m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "",
          "[Added Lines]",
          "7479:     if (m_ppnodeVar == &pnodeFnc->AsParseNodeFnc()->pnodeVars)",
          "7486:         m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "7495: ParseNodePtr Parser::AddArgumentsNodeToVars(ParseNodePtr pnodeFnc)",
          "7496: {",
          "7499:     ParseNodePtr argNode = InsertVarAtBeginning(pnodeFnc, wellKnownPropertyPids.arguments);",
          "",
          "[Removed Lines]",
          "7497:     Assert(!GetCurrentFunctionNode()->sxFnc.IsLambda());",
          "",
          "[Added Lines]",
          "7497:     Assert(!GetCurrentFunctionNode()->AsParseNodeFnc()->IsLambda());",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "7506: void Parser::UpdateArgumentsNode(ParseNodePtr pnodeFnc, ParseNodePtr argNode)",
          "7507: {",
          "7509:     {",
          "7512:     }",
          "7514:     {",
          "7517:     }",
          "7518:     else",
          "7519:     {",
          "7521:         Assert(argNode);",
          "7522:     }",
          "7525:     {",
          "7527:         argNode->grfpn |= PNodeFlags::fpnArguments;",
          "7529:     }",
          "7530: }",
          "7532: LPCOLESTR Parser::GetFunctionName(ParseNodePtr pnodeFnc, LPCOLESTR pNameHint)",
          "7533: {",
          "7534:     LPCOLESTR name = nullptr;",
          "7536:     {",
          "7538:     }",
          "7539:     if(name == nullptr && pNameHint != nullptr)",
          "7540:     {",
          "",
          "[Removed Lines]",
          "7508:     if ((pnodeFnc->grfpn & PNodeFlags::fpnArguments_overriddenInParam) || pnodeFnc->sxFnc.IsLambda())",
          "7511:         pnodeFnc->sxFnc.SetHasReferenceableBuiltInArguments(false);",
          "7513:     else if ((pnodeFnc->grfpn & PNodeFlags::fpnArguments_overriddenByDecl) && pnodeFnc->sxFnc.IsBodyAndParamScopeMerged())",
          "7516:         pnodeFnc->sxFnc.SetHasReferenceableBuiltInArguments(false);",
          "7520:         pnodeFnc->sxFnc.SetHasReferenceableBuiltInArguments(true);",
          "7524:     if (argNode != nullptr && !argNode->sxVar.sym->IsArguments())",
          "7528:         argNode->sxVar.sym->SetDecl(argNode);",
          "7535:     if(pnodeFnc->sxFnc.pnodeName != nullptr && knopVarDecl == pnodeFnc->sxFnc.pnodeName->nop)",
          "7537:         name = pnodeFnc->sxFnc.pnodeName->sxVar.pid->Psz();",
          "",
          "[Added Lines]",
          "7508:     if ((pnodeFnc->grfpn & PNodeFlags::fpnArguments_overriddenInParam) || pnodeFnc->AsParseNodeFnc()->IsLambda())",
          "7511:         pnodeFnc->AsParseNodeFnc()->SetHasReferenceableBuiltInArguments(false);",
          "7513:     else if ((pnodeFnc->grfpn & PNodeFlags::fpnArguments_overriddenByDecl) && pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged())",
          "7516:         pnodeFnc->AsParseNodeFnc()->SetHasReferenceableBuiltInArguments(false);",
          "7520:         pnodeFnc->AsParseNodeFnc()->SetHasReferenceableBuiltInArguments(true);",
          "7524:     if (argNode != nullptr && !argNode->AsParseNodeVar()->sym->IsArguments())",
          "7528:         argNode->AsParseNodeVar()->sym->SetDecl(argNode);",
          "7535:     if(pnodeFnc->AsParseNodeFnc()->pnodeName != nullptr && knopVarDecl == pnodeFnc->AsParseNodeFnc()->pnodeName->nop)",
          "7537:         name = pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid->Psz();",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "7705:         IdentifierExpectedError(m_token);",
          "7706:     }",
          "7709:     {",
          "7710:         GetCurrentFunctionNode()->grfpn |= PNodeFlags::fpnArguments_overriddenByDecl;",
          "7711:     }",
          "",
          "[Removed Lines]",
          "7708:     if (isDeclaration && name == wellKnownPropertyPids.arguments && GetCurrentBlockInfo()->pnodeBlock->sxBlock.blockType == Function)",
          "",
          "[Added Lines]",
          "7708:     if (isDeclaration && name == wellKnownPropertyPids.arguments && GetCurrentBlockInfo()->pnodeBlock->AsParseNodeBlock()->blockType == Function)",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "7726:     if (buildAST)",
          "7727:     {",
          "7728:         PushFuncBlockScope(pnodeBlock, &ppnodeScopeSave, &ppnodeExprScopeSave);",
          "7730:     }",
          "7732:     if (name)",
          "",
          "[Removed Lines]",
          "7729:         pnodeClass->sxClass.pnodeBlock = pnodeBlock;",
          "",
          "[Added Lines]",
          "7729:         pnodeClass->AsParseNodeClass()->pnodeBlock = pnodeBlock;",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "7754:     m_pscan->ScanForcingPid();",
          "7758:     for (;;)",
          "7759:     {",
          "",
          "[Removed Lines]",
          "7756:     IdentPtr pClassNamePid = pnodeName ? pnodeName->sxVar.pid : nullptr;",
          "",
          "[Added Lines]",
          "7756:     IdentPtr pClassNamePid = pnodeName ? pnodeName->AsParseNodeVar()->pid : nullptr;",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "7860:             LPCOLESTR pConstructorName = nullptr;",
          "7861:             uint32  constructorNameLength = 0;",
          "7862:             uint32  constructorShortNameHintOffset = 0;",
          "7864:             {",
          "7867:             }",
          "7868:             else",
          "7869:             {",
          "",
          "[Removed Lines]",
          "7863:             if (pnodeName && pnodeName->sxVar.pid)",
          "7865:                 pConstructorName = pnodeName->sxVar.pid->Psz();",
          "7866:                 constructorNameLength = pnodeName->sxVar.pid->Cch();",
          "",
          "[Added Lines]",
          "7863:             if (pnodeName && pnodeName->AsParseNodeVar()->pid)",
          "7865:                 pConstructorName = pnodeName->AsParseNodeVar()->pid->Psz();",
          "7866:                 constructorNameLength = pnodeName->AsParseNodeVar()->pid->Cch();",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "7881:                 pnodeConstructor = ParseFncDecl<buildAST>(fncDeclFlags, pConstructorName, /* needsPIDOnRCurlyScan */ true, /* resetParsingSuperRestrictionState = */false);",
          "7882:             }",
          "7885:             {",
          "7886:                 Error(ERRConstructorCannotBeGenerator);",
          "7887:             }",
          "7889:             Assert(constructorNameLength >= constructorShortNameHintOffset);",
          "7896:         }",
          "7897:         else",
          "7898:         {",
          "",
          "[Removed Lines]",
          "7884:             if (pnodeConstructor->sxFnc.IsGenerator())",
          "7891:             pnodeConstructor->sxFnc.hint = pConstructorName;",
          "7892:             pnodeConstructor->sxFnc.hintLength = constructorNameLength;",
          "7893:             pnodeConstructor->sxFnc.hintOffset = constructorShortNameHintOffset;",
          "7894:             pnodeConstructor->sxFnc.pid = pnodeName && pnodeName->sxVar.pid ? pnodeName->sxVar.pid : wellKnownPropertyPids.constructor;",
          "7895:             pnodeConstructor->sxFnc.SetHasNonThisStmt();",
          "",
          "[Added Lines]",
          "7884:             if (pnodeConstructor->AsParseNodeFnc()->IsGenerator())",
          "7891:             pnodeConstructor->AsParseNodeFnc()->hint = pConstructorName;",
          "7892:             pnodeConstructor->AsParseNodeFnc()->hintLength = constructorNameLength;",
          "7893:             pnodeConstructor->AsParseNodeFnc()->hintOffset = constructorShortNameHintOffset;",
          "7894:             pnodeConstructor->AsParseNodeFnc()->pid = pnodeName && pnodeName->AsParseNodeVar()->pid ? pnodeName->AsParseNodeVar()->pid : wellKnownPropertyPids.constructor;",
          "7895:             pnodeConstructor->AsParseNodeFnc()->SetHasNonThisStmt();",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "7946:                 }",
          "7950:                 if (buildAST)",
          "7951:                 {",
          "7953:                     pnodeMember = CreateBinNode(isGetter ? knopGetMember : knopSetMember, pnodeMemberName, pnodeFnc);",
          "7954:                     pMemberNameHint = ConstructFinalHintNode(pClassNamePid, pidHint,",
          "7955:                         isGetter ? wellKnownPropertyPids.get : wellKnownPropertyPids.set, isStatic,",
          "",
          "[Removed Lines]",
          "7948:                 pnodeFnc->sxFnc.SetIsStaticMember(isStatic);",
          "7952:                     pnodeFnc->sxFnc.SetIsAccessor();",
          "",
          "[Added Lines]",
          "7948:                 pnodeFnc->AsParseNodeFnc()->SetIsStaticMember(isStatic);",
          "7952:                     pnodeFnc->AsParseNodeFnc()->SetIsAccessor();",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "7975:                     pnodeFnc = ParseFncDecl<buildAST>(fncDeclFlags, pidHint ? pidHint->Psz() : nullptr, /* needsPIDOnRCurlyScan */ true, /* resetParsingSuperRestrictionState */false);",
          "7976:                     if (isAsyncMethod)",
          "7977:                     {",
          "7979:                         pnodeFnc->ichMin = ichMin;",
          "7980:                     }",
          "7981:                 }",
          "7984:                 if (buildAST)",
          "7985:                 {",
          "",
          "[Removed Lines]",
          "7978:                         pnodeFnc->sxFnc.cbMin = iecpMin;",
          "7982:                 pnodeFnc->sxFnc.SetIsStaticMember(isStatic);",
          "",
          "[Added Lines]",
          "7978:                         pnodeFnc->AsParseNodeFnc()->cbMin = iecpMin;",
          "7982:                 pnodeFnc->AsParseNodeFnc()->SetIsStaticMember(isStatic);",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "7991:             if (buildAST)",
          "7992:             {",
          "7993:                 Assert(memberNameHintLength >= memberNameOffset);",
          "7999:                 AddToNodeList(isStatic ? &pnodeStaticMembers : &pnodeMembers, isStatic ? &lastStaticMemberNodeRef : &lastMemberNodeRef, pnodeMember);",
          "8000:             }",
          "",
          "[Removed Lines]",
          "7994:                 pnodeMember->sxBin.pnode2->sxFnc.hint = pMemberNameHint; // Fully qualified name",
          "7995:                 pnodeMember->sxBin.pnode2->sxFnc.hintLength = memberNameHintLength;",
          "7996:                 pnodeMember->sxBin.pnode2->sxFnc.hintOffset = memberNameOffset;",
          "7997:                 pnodeMember->sxBin.pnode2->sxFnc.pid = memberPid; // Short name",
          "",
          "[Added Lines]",
          "7994:                 pnodeMember->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hint = pMemberNameHint; // Fully qualified name",
          "7995:                 pnodeMember->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hintLength = memberNameHintLength;",
          "7996:                 pnodeMember->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hintOffset = memberNameOffset;",
          "7997:                 pnodeMember->AsParseNodeBin()->pnode2->AsParseNodeFnc()->pid = memberPid; // Short name",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "8021:         {",
          "8022:             if (pClassNamePid)",
          "8023:             {",
          "8027:             }",
          "8028:             else",
          "8029:             {",
          "8030:                 Assert(nameHintLength >= nameHintOffset);",
          "8034:             }",
          "8036:         }",
          "8038:         m_pscan->SeekTo(endClass);",
          "",
          "[Removed Lines]",
          "8024:                 pnodeConstructor->sxFnc.hint = pClassNamePid->Psz();",
          "8025:                 pnodeConstructor->sxFnc.hintLength = pClassNamePid->Cch();",
          "8026:                 pnodeConstructor->sxFnc.hintOffset = 0;",
          "8031:                 pnodeConstructor->sxFnc.hint = pNameHint;",
          "8032:                 pnodeConstructor->sxFnc.hintLength = nameHintLength;",
          "8033:                 pnodeConstructor->sxFnc.hintOffset = nameHintOffset;",
          "8035:             pnodeConstructor->sxFnc.pid = pClassNamePid;",
          "",
          "[Added Lines]",
          "8024:                 pnodeConstructor->AsParseNodeFnc()->hint = pClassNamePid->Psz();",
          "8025:                 pnodeConstructor->AsParseNodeFnc()->hintLength = pClassNamePid->Cch();",
          "8026:                 pnodeConstructor->AsParseNodeFnc()->hintOffset = 0;",
          "8031:                 pnodeConstructor->AsParseNodeFnc()->hint = pNameHint;",
          "8032:                 pnodeConstructor->AsParseNodeFnc()->hintLength = nameHintLength;",
          "8033:                 pnodeConstructor->AsParseNodeFnc()->hintOffset = nameHintOffset;",
          "8035:             pnodeConstructor->AsParseNodeFnc()->pid = pClassNamePid;",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "8041:     if (buildAST)",
          "8042:     {",
          "8045:         pnodeConstructor->ichMin = pnodeClass->ichMin;",
          "8046:         pnodeConstructor->ichLim = pnodeClass->ichLim;",
          "8048:         PopFuncBlockScope(ppnodeScopeSave, ppnodeExprScopeSave);",
          "8057:     }",
          "8058:     FinishParseBlock(pnodeBlock);",
          "",
          "[Removed Lines]",
          "8043:         pnodeConstructor->sxFnc.cbMin = cbMinConstructor;",
          "8044:         pnodeConstructor->sxFnc.cbLim = cbLimConstructor;",
          "8050:         pnodeClass->sxClass.pnodeDeclName = pnodeDeclName;",
          "8051:         pnodeClass->sxClass.pnodeName = pnodeName;",
          "8052:         pnodeClass->sxClass.pnodeConstructor = pnodeConstructor;",
          "8053:         pnodeClass->sxClass.pnodeExtends = pnodeExtends;",
          "8054:         pnodeClass->sxClass.pnodeMembers = pnodeMembers;",
          "8055:         pnodeClass->sxClass.pnodeStaticMembers = pnodeStaticMembers;",
          "8056:         pnodeClass->sxClass.isDefaultModuleExport = false;",
          "",
          "[Added Lines]",
          "8043:         pnodeConstructor->AsParseNodeFnc()->cbMin = cbMinConstructor;",
          "8044:         pnodeConstructor->AsParseNodeFnc()->cbLim = cbLimConstructor;",
          "8050:         pnodeClass->AsParseNodeClass()->pnodeDeclName = pnodeDeclName;",
          "8051:         pnodeClass->AsParseNodeClass()->pnodeName = pnodeName;",
          "8052:         pnodeClass->AsParseNodeClass()->pnodeConstructor = pnodeConstructor;",
          "8053:         pnodeClass->AsParseNodeClass()->pnodeExtends = pnodeExtends;",
          "8054:         pnodeClass->AsParseNodeClass()->pnodeMembers = pnodeMembers;",
          "8055:         pnodeClass->AsParseNodeClass()->pnodeStaticMembers = pnodeStaticMembers;",
          "8056:         pnodeClass->AsParseNodeClass()->isDefaultModuleExport = false;",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "8088:     if (buildAST)",
          "8089:     {",
          "8090:         pnodeStringTemplate = CreateNode(knopStrTemplate);",
          "8095:         if (isTagged)",
          "",
          "[Removed Lines]",
          "8091:         pnodeStringTemplate->sxStrTemplate.countStringLiterals = 0;",
          "8092:         pnodeStringTemplate->sxStrTemplate.isTaggedTemplate = isTagged ? TRUE : FALSE;",
          "",
          "[Added Lines]",
          "8091:         pnodeStringTemplate->AsParseNodeStrTemplate()->countStringLiterals = 0;",
          "8092:         pnodeStringTemplate->AsParseNodeStrTemplate()->isTaggedTemplate = isTagged ? TRUE : FALSE;",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "8160:             OUTPUT_TRACE_DEBUGONLY(",
          "8161:                 Js::StringTemplateParsePhase,",
          "8162:                 _u(\"Parsed string constant: \\n\\tcooked = \\\"%s\\\" \\n\\traw = \\\"%s\\\" \\n\\tdiffer = %d\\n\"),",
          "8166:         }",
          "8168:         switch (m_token.tk)",
          "",
          "[Removed Lines]",
          "8163:                 stringLiteral->sxPid.pid->Psz(),",
          "8164:                 stringLiteralRaw->sxPid.pid->Psz(),",
          "8165:                 stringLiteral->sxPid.pid->Psz() == stringLiteralRaw->sxPid.pid->Psz() ? 0 : 1);",
          "",
          "[Added Lines]",
          "8163:                 stringLiteral->AsParseNodePid()->pid->Psz(),",
          "8164:                 stringLiteralRaw->AsParseNodePid()->pid->Psz(),",
          "8165:                 stringLiteral->AsParseNodePid()->pid->Psz() == stringLiteralRaw->AsParseNodePid()->pid->Psz() ? 0 : 1);",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "8226:     if (buildAST)",
          "8227:     {",
          "",
          "[Removed Lines]",
          "8228:         pnodeStringTemplate->sxStrTemplate.pnodeStringLiterals = pnodeStringLiterals;",
          "8229:         pnodeStringTemplate->sxStrTemplate.pnodeStringRawLiterals = pnodeRawStringLiterals;",
          "8230:         pnodeStringTemplate->sxStrTemplate.pnodeSubstitutionExpressions = pnodeSubstitutionExpressions;",
          "8231:         pnodeStringTemplate->sxStrTemplate.countStringLiterals = stringConstantCount;",
          "",
          "[Added Lines]",
          "8228:         pnodeStringTemplate->AsParseNodeStrTemplate()->pnodeStringLiterals = pnodeStringLiterals;",
          "8229:         pnodeStringTemplate->AsParseNodeStrTemplate()->pnodeStringRawLiterals = pnodeRawStringLiterals;",
          "8230:         pnodeStringTemplate->AsParseNodeStrTemplate()->pnodeSubstitutionExpressions = pnodeSubstitutionExpressions;",
          "8231:         pnodeStringTemplate->AsParseNodeStrTemplate()->countStringLiterals = stringConstantCount;",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "8241:             pnodeStringTemplate = CreateCallNode(knopCall, pnodeTagFnc, pnodeTagFncArgs, ichMin, pnodeStringTemplate->ichLim);",
          "8245:         }",
          "8246:     }",
          "",
          "[Removed Lines]",
          "8244:             pnodeStringTemplate->sxCall.argCount = stringConstantCount;",
          "",
          "[Added Lines]",
          "8244:             pnodeStringTemplate->AsParseNodeCall()->argCount = stringConstantCount;",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "8268:     }",
          "8269:     else if (op == knopStr)",
          "8270:     {",
          "8272:     }",
          "8273:     else if(op == knopFlt)",
          "8274:     {",
          "8276:     }",
          "8277:     else",
          "8278:     {",
          "8281:     }",
          "8283:     return AppendNameHints(propertyString, rightNode, fullNameHintLength, pShortNameOffset, false, true/*add brackets*/);",
          "",
          "[Removed Lines]",
          "8271:         return AppendNameHints(propertyString, pNode->sxPid.pid, fullNameHintLength, pShortNameOffset, false, true/*add brackets*/);",
          "8275:         rightNode = m_pscan->StringFromDbl(pNode->sxFlt.dbl);",
          "8279:         rightNode = op == knopInt ? m_pscan->StringFromLong(pNode->sxInt.lw)",
          "8280:             : pNode->sxPid.pid->Psz();",
          "",
          "[Added Lines]",
          "8271:         return AppendNameHints(propertyString, pNode->AsParseNodePid()->pid, fullNameHintLength, pShortNameOffset, false, true/*add brackets*/);",
          "8275:         rightNode = m_pscan->StringFromDbl(pNode->AsParseNodeFloat()->dbl);",
          "8279:         rightNode = op == knopInt ? m_pscan->StringFromLong(pNode->AsParseNodeInt()->lw)",
          "8280:             : pNode->AsParseNodePid()->pid->Psz();",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "8296:     PROBE_STACK_NO_DISPOSE(this->m_scriptContext, Js::Constants::MinStackByteCodeVisitor);",
          "8298:     LPCOLESTR leftNode = nullptr;",
          "8300:     {",
          "8302:     }",
          "8304:     {",
          "",
          "[Removed Lines]",
          "8299:     if (pNode->sxBin.pnode1->nop == knopDot || pNode->sxBin.pnode1->nop == knopIndex)",
          "8301:         leftNode = ConstructNameHint(pNode->sxBin.pnode1, fullNameHintLength, pShortNameOffset);",
          "8303:     else if (pNode->sxBin.pnode1->nop == knopName && !pNode->sxBin.pnode1->isSpecialName)",
          "",
          "[Added Lines]",
          "8299:     if (pNode->AsParseNodeBin()->pnode1->nop == knopDot || pNode->AsParseNodeBin()->pnode1->nop == knopIndex)",
          "8301:         leftNode = ConstructNameHint(pNode->AsParseNodeBin()->pnode1, fullNameHintLength, pShortNameOffset);",
          "8303:     else if (pNode->AsParseNodeBin()->pnode1->nop == knopName && !pNode->AsParseNodeBin()->pnode1->isSpecialName)",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "8316:     }",
          "",
          "[Removed Lines]",
          "8313:         leftNode = pNode->sxBin.pnode1->sxPid.pid->Psz();",
          "",
          "[Added Lines]",
          "8313:         leftNode = pNode->AsParseNodeBin()->pnode1->AsParseNodePid()->pid->Psz();",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "8319:     {",
          "8320:         return FormatPropertyString(",
          "8321:             leftNode ? leftNode : Js::Constants::AnonymousFunction, // e.g. f()[0] = function () {}",
          "8323:     }",
          "8327:     LPCOLESTR rightNode = nullptr;",
          "8328:     bool wrapWithBrackets = false;",
          "8330:     {",
          "8332:     }",
          "8333:     else",
          "8334:     {",
          "8336:         wrapWithBrackets = PNodeFlags::fpnIndexOperator == (pNode->grfpn & PNodeFlags::fpnIndexOperator);",
          "8337:     }",
          "8338:     Assert(rightNode != nullptr);",
          "",
          "[Removed Lines]",
          "8322:             pNode->sxBin.pnode2, fullNameHintLength, pShortNameOffset);",
          "8325:     Assert(pNode->sxBin.pnode2->nop == knopDot || pNode->sxBin.pnode2->nop == knopName);",
          "8329:     if (pNode->sxBin.pnode2->nop == knopDot)",
          "8331:         rightNode = ConstructNameHint(pNode->sxBin.pnode2, fullNameHintLength, pShortNameOffset);",
          "8335:         rightNode = pNode->sxBin.pnode2->sxPid.pid->Psz();",
          "",
          "[Added Lines]",
          "8322:             pNode->AsParseNodeBin()->pnode2, fullNameHintLength, pShortNameOffset);",
          "8325:     Assert(pNode->AsParseNodeBin()->pnode2->nop == knopDot || pNode->AsParseNodeBin()->pnode2->nop == knopName);",
          "8329:     if (pNode->AsParseNodeBin()->pnode2->nop == knopDot)",
          "8331:         rightNode = ConstructNameHint(pNode->AsParseNodeBin()->pnode2, fullNameHintLength, pShortNameOffset);",
          "8335:         rightNode = pNode->AsParseNodeBin()->pnode2->AsParseNodePid()->pid->Psz();",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "8753:                 {",
          "8754:                     if (IsStrictMode() && pnodeT->nop == knopName)",
          "8755:                     {",
          "8757:                     }",
          "8758:                 }",
          "8759:                 else",
          "",
          "[Removed Lines]",
          "8756:                         CheckStrictModeEvalArgumentsUsage(pnodeT->sxPid.pid);",
          "",
          "[Added Lines]",
          "8756:                         CheckStrictModeEvalArgumentsUsage(pnodeT->AsParseNodePid()->pid);",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "8786:                     pnode = pnodeT;",
          "8787:                 }",
          "8788:                 else if (nop == knopNeg &&",
          "8791:                 {",
          "8793:                     pnode = pnodeT;",
          "8794:                     if (pnode->nop == knopInt)",
          "8795:                     {",
          "8797:                     }",
          "8798:                     else",
          "8799:                     {",
          "8801:                     }",
          "8802:                 }",
          "8803:                 else",
          "8804:                 {",
          "8805:                     pnode = CreateUniNode(nop, pnodeT);",
          "8807:                 }",
          "8808:                 pnode->ichMin = ichMin;",
          "8809:             }",
          "",
          "[Removed Lines]",
          "8789:                     ((pnodeT->nop == knopInt && pnodeT->sxInt.lw != 0) ||",
          "8790:                     (pnodeT->nop == knopFlt && (pnodeT->sxFlt.dbl != 0 || this->m_InAsmMode))))",
          "8796:                         pnode->sxInt.lw = -pnode->sxInt.lw;",
          "8800:                         pnode->sxFlt.dbl = -pnode->sxFlt.dbl;",
          "8806:                     this->CheckArguments(pnode->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "8789:                     ((pnodeT->nop == knopInt && pnodeT->AsParseNodeInt()->lw != 0) ||",
          "8790:                     (pnodeT->nop == knopFlt && (pnodeT->AsParseNodeFloat()->dbl != 0 || this->m_InAsmMode))))",
          "8796:                         pnode->AsParseNodeInt()->lw = -pnode->AsParseNodeInt()->lw;",
          "8800:                         pnode->AsParseNodeFloat()->dbl = -pnode->AsParseNodeFloat()->dbl;",
          "8806:                     this->CheckArguments(pnode->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "8812:             {",
          "8813:                 if (IsStrictMode())",
          "8814:                 {",
          "8816:                         (!buildAST && operandToken.tk == tkID && !this->IsSpecialName(operandToken.pid)))",
          "8817:                     {",
          "8818:                         Error(ERRInvalidDelete);",
          "",
          "[Removed Lines]",
          "8815:                     if ((buildAST && pnode->sxUni.pnode1->IsUserIdentifier()) ||",
          "",
          "[Added Lines]",
          "8815:                     if ((buildAST && pnode->AsParseNodeUni()->pnode1->IsUserIdentifier()) ||",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "8822:                 if (buildAST)",
          "8823:                 {",
          "8825:                     if (m_currentNodeFunc)",
          "8826:                     {",
          "8827:                         if (pnode1->nop == knopDot || pnode1->nop == knopIndex)",
          "8828:                         {",
          "8832:                         }",
          "8833:                     }",
          "8834:                 }",
          "",
          "[Removed Lines]",
          "8824:                     ParseNodePtr pnode1 = pnode->sxUni.pnode1;",
          "8831:                             this->CheckArguments(pnode1->sxBin.pnode1);",
          "",
          "[Added Lines]",
          "8824:                     ParseNodePtr pnode1 = pnode->AsParseNodeUni()->pnode1;",
          "8831:                             this->CheckArguments(pnode1->AsParseNodeBin()->pnode1);",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "8880:             pNameHint = NULL;",
          "8881:             if (pnode->nop == knopName)",
          "8882:             {",
          "8885:                 hintOffset = 0;",
          "8886:             }",
          "8887:             else if (pnode->nop == knopDot || pnode->nop == knopIndex)",
          "",
          "[Removed Lines]",
          "8883:                 pNameHint = pnode->sxPid.pid->Psz();",
          "8884:                 hintLength = pnode->sxPid.pid->Cch();",
          "",
          "[Added Lines]",
          "8883:                 pNameHint = pnode->AsParseNodePid()->pid->Psz();",
          "8884:                 hintLength = pnode->AsParseNodePid()->pid->Cch();",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "8895:                     ParseNodePtr pnodeName = pnode;",
          "8896:                     while (pnodeName->nop == knopDot)",
          "8897:                     {",
          "8899:                     }",
          "8901:                     if (pnodeName->nop == knopName)",
          "8902:                     {",
          "8905:                         hintOffset = 0;",
          "8906:                     }",
          "8907:                 }",
          "",
          "[Removed Lines]",
          "8898:                         pnodeName = pnodeName->sxBin.pnode2;",
          "8903:                         pNameHint = pnodeName->sxPid.pid->Psz();",
          "8904:                         hintLength = pnodeName->sxPid.pid->Cch();",
          "",
          "[Added Lines]",
          "8898:                         pnodeName = pnodeName->AsParseNodeBin()->pnode2;",
          "8903:                         pNameHint = pnodeName->AsParseNodePid()->pid->Psz();",
          "8904:                         hintLength = pnodeName->AsParseNodePid()->pid->Cch();",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "8922:             {",
          "8923:                 if (IsStrictMode() && pnode->nop == knopName)",
          "8924:                 {",
          "8926:                 }",
          "8927:                 this->CheckArguments(pnode);",
          "8928:                 pnode = CreateUniNode(tkInc == m_token.tk ? knopIncPost : knopDecPost, pnode);",
          "",
          "[Removed Lines]",
          "8925:                     CheckStrictModeEvalArgumentsUsage(pnode->sxPid.pid);",
          "",
          "[Added Lines]",
          "8925:                     CheckStrictModeEvalArgumentsUsage(pnode->AsParseNodePid()->pid);",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "8969:                 {",
          "8970:                     if (IsStrictMode() && pnode->nop == knopName)",
          "8971:                     {",
          "8973:                     }",
          "8976:                     if (nop == knopAsg",
          "8977:                         && pnode->nop == knopDot",
          "8981:                     {",
          "8983:                         {",
          "8984:                             assignmentStmt = true;",
          "8985:                         }",
          "",
          "[Removed Lines]",
          "8972:                         CheckStrictModeEvalArgumentsUsage(pnode->sxPid.pid);",
          "8978:                         && pnode->sxBin.pnode1->nop == knopName",
          "8979:                         && pnode->sxBin.pnode1->sxVar.pid == wellKnownPropertyPids._this",
          "8980:                         && pnode->sxBin.pnode2->nop == knopName)",
          "8982:                         if (pnode->sxBin.pnode2->sxPid.pid != wellKnownPropertyPids.__proto__)",
          "",
          "[Added Lines]",
          "8972:                         CheckStrictModeEvalArgumentsUsage(pnode->AsParseNodePid()->pid);",
          "8978:                         && pnode->AsParseNodeBin()->pnode1->nop == knopName",
          "8979:                         && pnode->AsParseNodeBin()->pnode1->AsParseNodePid()->pid == wellKnownPropertyPids._this",
          "8980:                         && pnode->AsParseNodeBin()->pnode2->nop == knopName)",
          "8982:                         if (pnode->AsParseNodeBin()->pnode2->AsParseNodePid()->pid != wellKnownPropertyPids.__proto__)",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "9034:             if (buildAST)",
          "9035:             {",
          "9036:                 pnode = CreateTriNode(nop, pnode, pnodeT, pnodeT2);",
          "9039:             }",
          "9040:         }",
          "9041:         else if (nop == knopFncDecl)",
          "",
          "[Removed Lines]",
          "9037:                 this->CheckArguments(pnode->sxTri.pnode2);",
          "9038:                 this->CheckArguments(pnode->sxTri.pnode3);",
          "",
          "[Added Lines]",
          "9037:                 this->CheckArguments(pnode->AsParseNodeTri()->pnode2);",
          "9038:                 this->CheckArguments(pnode->AsParseNodeTri()->pnode3);",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "9066:             pnode = ParseFncDecl<buildAST>(flags, nullptr, /* needsPIDOnRCurlyScan = */false, /* resetParsingSuperRestrictionState = */false);",
          "9067:             if (isAsyncMethod)",
          "9068:             {",
          "9070:                 pnode->ichMin = ichMin;",
          "9071:             }",
          "",
          "[Removed Lines]",
          "9069:                 pnode->sxFnc.cbMin = iecpMin;",
          "",
          "[Added Lines]",
          "9069:                 pnode->AsParseNodeFnc()->cbMin = iecpMin;",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "9097:             if (buildAST)",
          "9098:             {",
          "9099:                 pnode = CreateBinNode(nop, pnode, pnodeT);",
          "9102:                 {",
          "9103:                     Assert(hintLength >= hintOffset);",
          "9109:                     {",
          "9111:                     }",
          "9113:                     {",
          "9115:                         pidRef->isFuncAssignment = true;",
          "9116:                     }",
          "9117:                 }",
          "9119:                 {",
          "9123:                     {",
          "9125:                     }",
          "9126:                 }",
          "9127:             }",
          "",
          "[Removed Lines]",
          "9100:                 Assert(pnode->sxBin.pnode2 != NULL);",
          "9101:                 if (pnode->sxBin.pnode2->nop == knopFncDecl)",
          "9104:                     pnode->sxBin.pnode2->sxFnc.hint = pNameHint;",
          "9105:                     pnode->sxBin.pnode2->sxFnc.hintLength = hintLength;",
          "9106:                     pnode->sxBin.pnode2->sxFnc.hintOffset = hintOffset;",
          "9108:                     if (pnode->sxBin.pnode1->nop == knopDot)",
          "9110:                         pnode->sxBin.pnode2->sxFnc.isNameIdentifierRef = false;",
          "9112:                     else if (pnode->sxBin.pnode1->nop == knopName)",
          "9114:                         PidRefStack *pidRef = pnode->sxBin.pnode1->sxPid.pid->GetTopRef();",
          "9118:                 if (pnode->sxBin.pnode2->nop == knopClassDecl && pnode->sxBin.pnode1->nop == knopDot)",
          "9120:                     Assert(pnode->sxBin.pnode2->sxClass.pnodeConstructor);",
          "9122:                     if (!pnode->sxBin.pnode2->sxClass.pnodeConstructor->sxFnc.pid)",
          "9124:                         pnode->sxBin.pnode2->sxClass.pnodeConstructor->sxFnc.isNameIdentifierRef = false;",
          "",
          "[Added Lines]",
          "9100:                 Assert(pnode->AsParseNodeBin()->pnode2 != NULL);",
          "9101:                 if (pnode->AsParseNodeBin()->pnode2->nop == knopFncDecl)",
          "9104:                     pnode->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hint = pNameHint;",
          "9105:                     pnode->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hintLength = hintLength;",
          "9106:                     pnode->AsParseNodeBin()->pnode2->AsParseNodeFnc()->hintOffset = hintOffset;",
          "9108:                     if (pnode->AsParseNodeBin()->pnode1->nop == knopDot)",
          "9110:                         pnode->AsParseNodeBin()->pnode2->AsParseNodeFnc()->isNameIdentifierRef = false;",
          "9112:                     else if (pnode->AsParseNodeBin()->pnode1->nop == knopName)",
          "9114:                         PidRefStack *pidRef = pnode->AsParseNodeBin()->pnode1->AsParseNodePid()->pid->GetTopRef();",
          "9118:                 if (pnode->AsParseNodeBin()->pnode2->nop == knopClassDecl && pnode->AsParseNodeBin()->pnode1->nop == knopDot)",
          "9120:                     Assert(pnode->AsParseNodeBin()->pnode2->AsParseNodeClass()->pnodeConstructor);",
          "9122:                     if (!pnode->AsParseNodeBin()->pnode2->AsParseNodeClass()->pnodeConstructor->AsParseNodeFnc()->pid)",
          "9124:                         pnode->AsParseNodeBin()->pnode2->AsParseNodeClass()->pnodeConstructor->AsParseNodeFnc()->isNameIdentifierRef = false;",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "9148:             default:",
          "9149:                 if (m_currentNodeFunc)",
          "9150:                 {",
          "9152:                 }",
          "9153:                 else if (m_currentNodeProg)",
          "9154:                 {",
          "9156:                 }",
          "9157:             }",
          "9158:         }",
          "",
          "[Removed Lines]",
          "9151:                     m_currentNodeFunc->sxFnc.SetHasNonThisStmt();",
          "9155:                     m_currentNodeProg->sxFnc.SetHasNonThisStmt();",
          "",
          "[Added Lines]",
          "9151:                     m_currentNodeFunc->AsParseNodeFnc()->SetHasNonThisStmt();",
          "9155:                     m_currentNodeProg->AsParseNodeFnc()->SetHasNonThisStmt();",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "9187:         {",
          "9188:             if (nodeType & fnopBin)",
          "9189:             {",
          "9192:                 Assert(lhs);",
          "9193:                 if (lhs->nop == knopDot)",
          "9194:                 {",
          "9196:                     if (propertyNode->nop == knopName)",
          "9197:                     {",
          "9199:                     }",
          "9200:                 }",
          "9201:             }",
          "9202:             else if (nodeType & fnopUni)",
          "9203:             {",
          "9206:                 if (lhs->nop == knopDot)",
          "9207:                 {",
          "9209:                     if (propertyNode->nop == knopName)",
          "9210:                     {",
          "9212:                     }",
          "9213:                 }",
          "9214:             }",
          "",
          "[Removed Lines]",
          "9190:                 ParseNodePtr lhs = pnode->sxBin.pnode1;",
          "9195:                     ParseNodePtr propertyNode = lhs->sxBin.pnode2;",
          "9198:                         propertyNode->sxPid.pid->PromoteAssignmentState();",
          "9205:                 ParseNodePtr lhs = pnode->sxUni.pnode1;",
          "9208:                     ParseNodePtr propertyNode = lhs->sxBin.pnode2;",
          "9211:                         propertyNode->sxPid.pid->PromoteAssignmentState();",
          "",
          "[Added Lines]",
          "9190:                 ParseNodePtr lhs = pnode->AsParseNodeBin()->pnode1;",
          "9195:                     ParseNodePtr propertyNode = lhs->AsParseNodeBin()->pnode2;",
          "9198:                         propertyNode->AsParseNodePid()->pid->PromoteAssignmentState();",
          "9205:                 ParseNodePtr lhs = pnode->AsParseNodeUni()->pnode1;",
          "9208:                     ParseNodePtr propertyNode = lhs->AsParseNodeBin()->pnode2;",
          "9211:                         propertyNode->AsParseNodePid()->pid->PromoteAssignmentState();",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "9225:         Assert(pnodeT != nullptr);",
          "9226:         if (pnodeT->nop == knopName)",
          "9227:         {",
          "9229:             Assert(ref);",
          "9230:             ref->isAsg = true;",
          "9231:         }",
          "",
          "[Removed Lines]",
          "9228:             PidRefStack *ref = pnodeT->sxPid.pid->GetTopRef();",
          "",
          "[Added Lines]",
          "9228:             PidRefStack *ref = pnodeT->AsParseNodePid()->pid->GetTopRef();",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "9242:     }",
          "9243: }",
          "9246: {",
          "9247:     Assert(symRef == nullptr);",
          "9248:     this->symRef = ref->GetSymRef();",
          "9249: }",
          "9252: {",
          "9253:     Js::PropertyId propertyId;",
          "9254:     Symbol *sym = this->sym;",
          "",
          "[Removed Lines]",
          "9245: void PnPid::SetSymRef(PidRefStack *ref)",
          "9251: Js::PropertyId PnPid::PropertyIdFromNameNode() const",
          "",
          "[Added Lines]",
          "9245: void ParseNodePid::SetSymRef(PidRefStack *ref)",
          "9251: Js::PropertyId ParseNodePid::PropertyIdFromNameNode() const",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "9274:     }",
          "9276:     Assert(GetCurrentBlock() != nullptr);",
          "9277:     AssertMsg(pid != nullptr, \"PID should be created\");",
          "9278:     PidRefStack *ref = pid->GetTopRef(m_nextBlockId - 1);",
          "9281:     if (!ref || (ref->GetScopeId() < blockId))",
          "9282:     {",
          "9283:         ref = Anew(&m_nodeAllocator, PidRefStack);",
          "",
          "[Removed Lines]",
          "9273:         return pid->FindOrAddPidRef(&m_nodeAllocator, GetCurrentBlock()->sxBlock.blockId, GetCurrentFunctionNode()->sxFnc.functionId);",
          "9279:     int blockId = GetCurrentBlock()->sxBlock.blockId;",
          "9280:     int funcId = GetCurrentFunctionNode()->sxFnc.functionId;",
          "",
          "[Added Lines]",
          "9273:         return pid->FindOrAddPidRef(&m_nodeAllocator, GetCurrentBlock()->AsParseNodeBlock()->blockId, GetCurrentFunctionNode()->AsParseNodeFnc()->functionId);",
          "9279:     int blockId = GetCurrentBlock()->AsParseNodeBlock()->blockId;",
          "9280:     int funcId = GetCurrentFunctionNode()->AsParseNodeFnc()->functionId;",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "9428:                 }",
          "9429:                 else",
          "9430:                 {",
          "9432:                     {",
          "9434:                         GetCurrentFunctionNode()->grfpn |= PNodeFlags::fpnArguments_overriddenByDecl;",
          "",
          "[Removed Lines]",
          "9431:                     if (GetCurrentBlockInfo()->pnodeBlock->sxBlock.blockType == Function)",
          "",
          "[Added Lines]",
          "9431:                     if (GetCurrentBlockInfo()->pnodeBlock->AsParseNodeBlock()->blockType == Function)",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "9459:                 if (buildAST)",
          "9460:                 {",
          "9461:                     AnalysisAssert(pnodeThis);",
          "9463:                     pnodeThis->ichLim = pnodeInit->ichLim;",
          "9465:                     if (pnodeInit->nop == knopFncDecl)",
          "9466:                     {",
          "9467:                         Assert(nameHintLength >= nameHintOffset);",
          "9472:                     }",
          "9473:                     else",
          "9474:                     {",
          "",
          "[Removed Lines]",
          "9462:                     pnodeThis->sxVar.pnodeInit = pnodeInit;",
          "9468:                         pnodeInit->sxFnc.hint = pNameHint;",
          "9469:                         pnodeInit->sxFnc.hintLength = nameHintLength;",
          "9470:                         pnodeInit->sxFnc.hintOffset = nameHintOffset;",
          "9471:                         pnodeThis->sxVar.pid->GetTopRef()->isFuncAssignment = true;",
          "",
          "[Added Lines]",
          "9462:                     pnodeThis->AsParseNodeVar()->pnodeInit = pnodeInit;",
          "9468:                         pnodeInit->AsParseNodeFnc()->hint = pNameHint;",
          "9469:                         pnodeInit->AsParseNodeFnc()->hintLength = nameHintLength;",
          "9470:                         pnodeInit->AsParseNodeFnc()->hintOffset = nameHintOffset;",
          "9471:                         pnodeThis->AsParseNodeVar()->pid->GetTopRef()->isFuncAssignment = true;",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "9483:                 {",
          "9485:                 }",
          "9486:             }",
          "",
          "[Removed Lines]",
          "9482:                 if (pnodeThis && pnodeThis->sxVar.pnodeInit != nullptr)",
          "9484:                     pnodeThis->sxVar.sym->PromoteAssignmentState();",
          "",
          "[Added Lines]",
          "9482:                 if (pnodeThis && pnodeThis->AsParseNodeVar()->pnodeInit != nullptr)",
          "9484:                     pnodeThis->AsParseNodeVar()->sym->PromoteAssignmentState();",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "9491:                 Error(ERRUninitializedConst);",
          "9492:             }",
          "9495:             {",
          "9497:             }",
          "9498:         }",
          "",
          "[Removed Lines]",
          "9494:             if (m_currentNodeFunc && pnodeThis && pnodeThis->sxVar.sym->GetIsFormal())",
          "9496:                 m_currentNodeFunc->sxFnc.SetHasAnyWriteToFormals(true);",
          "",
          "[Added Lines]",
          "9494:             if (m_currentNodeFunc && pnodeThis && pnodeThis->AsParseNodeVar()->sym->GetIsFormal())",
          "9496:                 m_currentNodeFunc->AsParseNodeFnc()->SetHasAnyWriteToFormals(true);",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "9544:         if (buildAST)",
          "9545:         {",
          "9546:             pnodeTC = CreateNodeWithScanner<knopTryCatch>();",
          "9549:         }",
          "9550:         PushStmt<buildAST>(&stmt, pnodeTC, knopTryCatch, nullptr);",
          "9552:         ParseNodePtr pnodeCatch = ParseCatch<buildAST>();",
          "9553:         if (buildAST)",
          "9554:         {",
          "9556:         }",
          "9557:         PopStmt(&stmt);",
          "9558:     }",
          "",
          "[Removed Lines]",
          "9547:             pnodeT->sxStmt.pnodeOuter = pnodeTC;",
          "9548:             pnodeTC->sxTryCatch.pnodeTry = pnodeT;",
          "9555:             pnodeTC->sxTryCatch.pnodeCatch = pnodeCatch;",
          "",
          "[Added Lines]",
          "9547:             pnodeT->AsParseNodeStmt()->pnodeOuter = pnodeTC;",
          "9548:             pnodeTC->AsParseNodeTryCatch()->pnodeTry = pnodeT;",
          "9555:             pnodeTC->AsParseNodeTryCatch()->pnodeCatch = pnodeCatch;",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "9578:     {",
          "9579:         if (!hasCatch)",
          "9580:         {",
          "9583:         }",
          "9584:         else",
          "9585:         {",
          "9590:         }",
          "9592:     }",
          "9593:     PopStmt(&stmt);",
          "9594:     this->m_tryCatchOrFinallyDepth--;",
          "",
          "[Removed Lines]",
          "9581:             pnodeTF->sxTryFinally.pnodeTry = pnodeT;",
          "9582:             pnodeT->sxStmt.pnodeOuter = pnodeTF;",
          "9586:             pnodeTF->sxTryFinally.pnodeTry = CreateNode(knopTry);",
          "9587:             pnodeTF->sxTryFinally.pnodeTry->sxStmt.pnodeOuter = pnodeTF;",
          "9588:             pnodeTF->sxTryFinally.pnodeTry->sxTry.pnodeBody = pnodeTC;",
          "9589:             pnodeTC->sxStmt.pnodeOuter = pnodeTF->sxTryFinally.pnodeTry;",
          "9591:         pnodeTF->sxTryFinally.pnodeFinally = pnodeFinally;",
          "",
          "[Added Lines]",
          "9581:             pnodeTF->AsParseNodeTryFinally()->pnodeTry = pnodeT;",
          "9582:             pnodeT->AsParseNodeStmt()->pnodeOuter = pnodeTF;",
          "9586:             pnodeTF->AsParseNodeTryFinally()->pnodeTry = CreateNode(knopTry);",
          "9587:             pnodeTF->AsParseNodeTryFinally()->pnodeTry->AsParseNodeStmt()->pnodeOuter = pnodeTF;",
          "9588:             pnodeTF->AsParseNodeTryFinally()->pnodeTry->AsParseNodeTry()->pnodeBody = pnodeTC;",
          "9589:             pnodeTC->AsParseNodeStmt()->pnodeOuter = pnodeTF->AsParseNodeTryFinally()->pnodeTry;",
          "9591:         pnodeTF->AsParseNodeTryFinally()->pnodeFinally = pnodeFinally;",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "9615:     ParseNodePtr pnodeBody = ParseStatement<buildAST>();",
          "9616:     if (buildAST)",
          "9617:     {",
          "9621:     }",
          "9622:     PopStmt(&stmt);",
          "9623:     return pnode;",
          "",
          "[Removed Lines]",
          "9618:         pnode->sxTry.pnodeBody = pnodeBody;",
          "9619:         if (pnode->sxTry.pnodeBody)",
          "9620:             pnode->ichLim = pnode->sxTry.pnodeBody->ichLim;",
          "",
          "[Added Lines]",
          "9618:         pnode->AsParseNodeTry()->pnodeBody = pnodeBody;",
          "9619:         if (pnode->AsParseNodeTry()->pnodeBody)",
          "9620:             pnode->ichLim = pnode->AsParseNodeTry()->pnodeBody->ichLim;",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "9643:     ParseNodePtr pnodeBody = ParseStatement<buildAST>();",
          "9644:     if (buildAST)",
          "9645:     {",
          "9650:         else",
          "9652:     }",
          "9653:     PopStmt(&stmt);",
          "",
          "[Removed Lines]",
          "9646:         pnode->sxFinally.pnodeBody = pnodeBody;",
          "9647:         if (!pnode->sxFinally.pnodeBody)",
          "9649:             pnode->sxFinally.pnodeBody = CreateNodeWithScanner<knopEmpty>();",
          "9651:             pnode->ichLim = pnode->sxFinally.pnodeBody->ichLim;",
          "",
          "[Added Lines]",
          "9646:         pnode->AsParseNodeFinally()->pnodeBody = pnodeBody;",
          "9647:         if (!pnode->AsParseNodeFinally()->pnodeBody)",
          "9649:             pnode->AsParseNodeFinally()->pnodeBody = CreateNodeWithScanner<knopEmpty>();",
          "9651:             pnode->ichLim = pnode->AsParseNodeFinally()->pnodeBody->ichLim;",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "9691:             pnode = CreateNodeWithScanner<knopCatch>(ichMin);",
          "9692:             PushStmt<buildAST>(&stmt, pnode, knopCatch, nullptr);",
          "9696:         }",
          "",
          "[Removed Lines]",
          "9694:             ppnode = &pnode->sxCatch.pnodeNext;",
          "",
          "[Added Lines]",
          "9694:             ppnode = &pnode->AsParseNodeCatch()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "9705:             {",
          "9706:                 Assert(*m_ppnodeExprScope == nullptr);",
          "9709:             }",
          "9710:             else",
          "9711:             {",
          "9712:                 Assert(m_ppnodeScope);",
          "9713:                 Assert(*m_ppnodeScope == nullptr);",
          "9716:             }",
          "9720:             ppnodeExprScopeSave = m_ppnodeExprScope;",
          "9723:         }",
          "9725:         if (isPattern)",
          "",
          "[Removed Lines]",
          "9708:                 m_ppnodeExprScope = &pnode->sxCatch.pnodeNext;",
          "9715:                 m_ppnodeScope = &pnode->sxCatch.pnodeNext;",
          "9721:             m_ppnodeExprScope = &pnode->sxCatch.pnodeScopes;",
          "9722:             pnode->sxCatch.pnodeScopes = nullptr;",
          "",
          "[Added Lines]",
          "9708:                 m_ppnodeExprScope = &pnode->AsParseNodeCatch()->pnodeNext;",
          "9715:                 m_ppnodeScope = &pnode->AsParseNodeCatch()->pnodeNext;",
          "9721:             m_ppnodeExprScope = &pnode->AsParseNodeCatch()->pnodeScopes;",
          "9722:             pnode->AsParseNodeCatch()->pnodeScopes = nullptr;",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "9727:             ParseNodePtr pnodePattern = ParseDestructuredLiteral<buildAST>(tkLET, true /*isDecl*/, true /*topLevel*/, DIC_ForceErrorOnInitializer);",
          "9728:             if (buildAST)",
          "9729:             {",
          "9733:             }",
          "9734:         }",
          "9735:         else",
          "",
          "[Removed Lines]",
          "9730:                 pnode->sxCatch.pnodeParam = CreateParamPatternNode(pnodePattern);",
          "9731:                 Scope *scope = pnodeCatchScope->sxBlock.scope;",
          "9732:                 pnode->sxCatch.scope = scope;",
          "",
          "[Added Lines]",
          "9730:                 pnode->AsParseNodeCatch()->pnodeParam = CreateParamPatternNode(pnodePattern);",
          "9731:                 Scope *scope = pnodeCatchScope->AsParseNodeBlock()->scope;",
          "9732:                 pnode->AsParseNodeCatch()->scope = scope;",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "9748:             }",
          "9750:             pidCatch = m_token.GetIdentifier(m_phtbl);",
          "9753:             ParseNodePtr pnodeParam = CreateNameNode(pidCatch);",
          "9756:             const char16 *name = reinterpret_cast<const char16*>(pidCatch->Psz());",
          "9757:             int nameLength = pidCatch->Cch();",
          "",
          "[Removed Lines]",
          "9751:             PidRefStack *ref = this->FindOrAddPidRef(pidCatch, GetCurrentBlock()->sxBlock.blockId, GetCurrentFunctionNode()->sxFnc.functionId);",
          "9754:             pnodeParam->sxPid.symRef = ref->GetSymRef();",
          "",
          "[Added Lines]",
          "9751:             PidRefStack *ref = this->FindOrAddPidRef(pidCatch, GetCurrentBlock()->AsParseNodeBlock()->blockId, GetCurrentFunctionNode()->AsParseNodeFnc()->functionId);",
          "9754:             pnodeParam->AsParseNodePid()->symRef = ref->GetSymRef();",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "9765:             Assert(ref->GetSym() == nullptr);",
          "9766:             ref->SetSym(sym);",
          "9769:             scope->AddNewSymbol(sym);",
          "9771:             if (buildAST)",
          "9772:             {",
          "9775:             }",
          "9777:             m_pscan->Scan();",
          "",
          "[Removed Lines]",
          "9768:             Scope *scope = pnodeCatchScope->sxBlock.scope;",
          "9773:                 pnode->sxCatch.pnodeParam = pnodeParam;",
          "9774:                 pnode->sxCatch.scope = scope;",
          "",
          "[Added Lines]",
          "9768:             Scope *scope = pnodeCatchScope->AsParseNodeBlock()->scope;",
          "9773:                 pnode->AsParseNodeCatch()->pnodeParam = pnodeParam;",
          "9774:                 pnode->AsParseNodeCatch()->scope = scope;",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "9792:         ParseNodePtr pnodeBody = ParseStatement<buildAST>();  //catch(id[:expr]) {block}",
          "9793:         if (buildAST)",
          "9794:         {",
          "9796:             pnode->ichLim = ichLim;",
          "9797:         }",
          "",
          "[Removed Lines]",
          "9795:             pnode->sxCatch.pnodeBody = pnodeBody;",
          "",
          "[Added Lines]",
          "9795:             pnode->AsParseNodeCatch()->pnodeBody = pnodeBody;",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "9801:             FinishParseBlock(pnodeCatchScope);",
          "9802:         }",
          "9805:         {",
          "9807:         }",
          "9809:         if (buildAST)",
          "",
          "[Removed Lines]",
          "9804:         if (pnodeCatchScope->sxBlock.GetCallsEval() || pnodeCatchScope->sxBlock.GetChildCallsEval())",
          "9806:             GetCurrentBlock()->sxBlock.SetChildCallsEval(true);",
          "",
          "[Added Lines]",
          "9804:         if (pnodeCatchScope->AsParseNodeBlock()->GetCallsEval() || pnodeCatchScope->AsParseNodeBlock()->GetChildCallsEval())",
          "9806:             GetCurrentBlock()->AsParseNodeBlock()->SetChildCallsEval(true);",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "9835:     if (buildAST)",
          "9836:     {",
          "9837:         pnodeT = CreateNodeWithScanner<knopCase>(ichMinT);",
          "9839:         pnodeT->ichLim = ichLim;",
          "9840:     }",
          "9841:     ParseStmtList<buildAST>(ppnodeBody);",
          "",
          "[Removed Lines]",
          "9838:         pnodeT->sxCase.pnodeExpr = pnodeExpr;",
          "",
          "[Added Lines]",
          "9838:         pnodeT->AsParseNodeCase()->pnodeExpr = pnodeExpr;",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "9938:         }",
          "9939:         if (isAsyncMethod)",
          "9940:         {",
          "9942:             pnode->ichMin = ichMin;",
          "9943:         }",
          "9944:         break;",
          "",
          "[Removed Lines]",
          "9941:             pnode->sxFnc.cbMin = iecpMin;",
          "",
          "[Added Lines]",
          "9941:             pnode->AsParseNodeFnc()->cbMin = iecpMin;",
          "",
          "---------------",
          "--- Hunk 226 ---",
          "[Context before]",
          "10166:                 {",
          "10167:                     pnode = CreateNodeWithScanner<knopForIn>(ichMin);",
          "10168:                 }",
          "10172:                 pnode->ichLim = ichLim;",
          "10174:                 TrackAssignment<true>(pnodeT, nullptr);",
          "",
          "[Removed Lines]",
          "10169:                 pnode->sxForInOrForOf.pnodeBlock = pnodeBlock;",
          "10170:                 pnode->sxForInOrForOf.pnodeLval = pnodeT;",
          "10171:                 pnode->sxForInOrForOf.pnodeObj = pnodeObj;",
          "",
          "[Added Lines]",
          "10169:                 pnode->AsParseNodeForInOrForOf()->pnodeBlock = pnodeBlock;",
          "10170:                 pnode->AsParseNodeForInOrForOf()->pnodeLval = pnodeT;",
          "10171:                 pnode->AsParseNodeForInOrForOf()->pnodeObj = pnodeObj;",
          "",
          "---------------",
          "--- Hunk 227 ---",
          "[Context before]",
          "10179:             if (buildAST)",
          "10180:             {",
          "10182:             }",
          "10183:             PopStmt(&stmt);",
          "10184:         }",
          "",
          "[Removed Lines]",
          "10181:                 pnode->sxForInOrForOf.pnodeBody = pnodeBody;",
          "",
          "[Added Lines]",
          "10181:                 pnode->AsParseNodeForInOrForOf()->pnodeBody = pnodeBody;",
          "",
          "---------------",
          "--- Hunk 228 ---",
          "[Context before]",
          "10220:             if (buildAST)",
          "10221:             {",
          "10222:                 pnode = CreateNodeWithScanner<knopFor>(ichMin);",
          "10228:                 pnode->ichLim = ichLim;",
          "10229:             }",
          "10230:             PushStmt<buildAST>(&stmt, pnode, knopFor, pLabelIdList);",
          "10231:             ParseNodePtr pnodeBody = ParseStatement<buildAST>();",
          "10232:             if (buildAST)",
          "10233:             {",
          "10235:             }",
          "10236:             PopStmt(&stmt);",
          "10237:         }",
          "",
          "[Removed Lines]",
          "10223:                 pnode->sxFor.pnodeBlock = pnodeBlock;",
          "10224:                 pnode->sxFor.pnodeInverted= nullptr;",
          "10225:                 pnode->sxFor.pnodeInit = pnodeT;",
          "10226:                 pnode->sxFor.pnodeCond = pnodeCond;",
          "10227:                 pnode->sxFor.pnodeIncr = pnodeIncr;",
          "10234:                 pnode->sxFor.pnodeBody = pnodeBody;",
          "",
          "[Added Lines]",
          "10223:                 pnode->AsParseNodeFor()->pnodeBlock = pnodeBlock;",
          "10224:                 pnode->AsParseNodeFor()->pnodeInverted= nullptr;",
          "10225:                 pnode->AsParseNodeFor()->pnodeInit = pnodeT;",
          "10226:                 pnode->AsParseNodeFor()->pnodeCond = pnodeCond;",
          "10227:                 pnode->AsParseNodeFor()->pnodeIncr = pnodeIncr;",
          "10234:                 pnode->AsParseNodeFor()->pnodeBody = pnodeBody;",
          "",
          "---------------",
          "--- Hunk 229 ---",
          "[Context before]",
          "10271:         if (buildAST)",
          "10272:         {",
          "10275:             pnode->ichLim = ichLim;",
          "10280:         }",
          "10282:         for (;;)",
          "",
          "[Removed Lines]",
          "10273:             pnode->sxSwitch.pnodeVal = pnodeVal;",
          "10274:             pnode->sxSwitch.pnodeBlock = pnodeBlock;",
          "10276:             PushFuncBlockScope(pnode->sxSwitch.pnodeBlock, &ppnodeScopeSave, &ppnodeExprScopeSave);",
          "10278:             pnode->sxSwitch.pnodeDefault = nullptr;",
          "10279:             ppnodeT = &pnode->sxSwitch.pnodeCases;",
          "",
          "[Added Lines]",
          "10273:             pnode->AsParseNodeSwitch()->pnodeVal = pnodeVal;",
          "10274:             pnode->AsParseNodeSwitch()->pnodeBlock = pnodeBlock;",
          "10276:             PushFuncBlockScope(pnode->AsParseNodeSwitch()->pnodeBlock, &ppnodeScopeSave, &ppnodeExprScopeSave);",
          "10278:             pnode->AsParseNodeSwitch()->pnodeDefault = nullptr;",
          "10279:             ppnodeT = &pnode->AsParseNodeSwitch()->pnodeCases;",
          "",
          "---------------",
          "--- Hunk 230 ---",
          "[Context before]",
          "10305:                 if (buildAST)",
          "10306:                 {",
          "10307:                     pnodeT = CreateNodeWithScanner<knopCase>(ichMinT);",
          "10309:                     pnodeT->ichLim = ichMinInner;",
          "10311:                 }",
          "10312:                 ParseStmtList<buildAST>(&pnodeBody);",
          "10313:                 break;",
          "",
          "[Removed Lines]",
          "10308:                     pnode->sxSwitch.pnodeDefault = pnodeT;",
          "10310:                     pnodeT->sxCase.pnodeExpr = nullptr;",
          "",
          "[Added Lines]",
          "10308:                     pnode->AsParseNodeSwitch()->pnodeDefault = pnodeT;",
          "10310:                     pnodeT->AsParseNodeCase()->pnodeExpr = nullptr;",
          "",
          "---------------",
          "--- Hunk 231 ---",
          "[Context before]",
          "10322:                 {",
          "10323:                     pnodeFakeBlock->ichMin = pnodeT->ichMin;",
          "10324:                     pnodeFakeBlock->ichLim = pnodeT->ichLim;",
          "10328:                 }",
          "10329:                 else",
          "10330:                 {",
          "10332:                 }",
          "10335:             }",
          "10336:         }",
          "10337: LEndSwitch:",
          "",
          "[Removed Lines]",
          "10325:                     pnodeT->sxCase.pnodeBody = pnodeFakeBlock;",
          "10326:                     pnodeT->sxCase.pnodeBody->grfpn |= PNodeFlags::fpnSyntheticNode; // block is not a user specifier block",
          "10327:                     pnodeT->sxCase.pnodeBody->sxBlock.pnodeStmt = pnodeBody;",
          "10331:                     pnodeT->sxCase.pnodeBody = nullptr;",
          "10334:                 ppnodeT = &pnodeT->sxCase.pnodeNext;",
          "",
          "[Added Lines]",
          "10325:                     pnodeT->AsParseNodeCase()->pnodeBody = pnodeFakeBlock;",
          "10326:                     pnodeT->AsParseNodeCase()->pnodeBody->grfpn |= PNodeFlags::fpnSyntheticNode; // block is not a user specifier block",
          "10327:                     pnodeT->AsParseNodeCase()->pnodeBody->AsParseNodeBlock()->pnodeStmt = pnodeBody;",
          "10331:                     pnodeT->AsParseNodeCase()->pnodeBody = nullptr;",
          "10334:                 ppnodeT = &pnodeT->AsParseNodeCase()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 232 ---",
          "[Context before]",
          "10340:         {",
          "10342:             PopFuncBlockScope(ppnodeScopeSave, ppnodeExprScopeSave);",
          "10344:         }",
          "10345:         else",
          "10346:         {",
          "",
          "[Removed Lines]",
          "10343:             FinishParseBlock(pnode->sxSwitch.pnodeBlock);",
          "",
          "[Added Lines]",
          "10343:             FinishParseBlock(pnode->AsParseNodeSwitch()->pnodeBlock);",
          "",
          "---------------",
          "--- Hunk 233 ---",
          "[Context before]",
          "10362:         if (buildAST)",
          "10363:         {",
          "10364:             pnode = CreateNodeWithScanner<knopWhile>(ichMin);",
          "10366:             pnode->ichLim = ichLim;",
          "10367:         }",
          "10368:         bool stashedDisallowImportExportStmt = m_disallowImportExportStmt;",
          "",
          "[Removed Lines]",
          "10365:             pnode->sxWhile.pnodeCond = pnodeCond;",
          "",
          "[Added Lines]",
          "10365:             pnode->AsParseNodeWhile()->pnodeCond = pnodeCond;",
          "",
          "---------------",
          "--- Hunk 234 ---",
          "[Context before]",
          "10374:         if (buildAST)",
          "10375:         {",
          "10377:         }",
          "10378:         m_disallowImportExportStmt = stashedDisallowImportExportStmt;",
          "10379:         break;",
          "",
          "[Removed Lines]",
          "10376:             pnode->sxWhile.pnodeBody = pnodeBody;",
          "",
          "[Added Lines]",
          "10376:             pnode->AsParseNodeWhile()->pnodeBody = pnodeBody;",
          "",
          "---------------",
          "--- Hunk 235 ---",
          "[Context before]",
          "10404:         if (buildAST)",
          "10405:         {",
          "10408:             pnode->ichLim = ichLim;",
          "10409:             pnode->ichMin = ichMinT;",
          "10410:         }",
          "",
          "[Removed Lines]",
          "10406:             pnode->sxWhile.pnodeBody = pnodeBody;",
          "10407:             pnode->sxWhile.pnodeCond = pnodeCond;",
          "",
          "[Added Lines]",
          "10406:             pnode->AsParseNodeWhile()->pnodeBody = pnodeBody;",
          "10407:             pnode->AsParseNodeWhile()->pnodeCond = pnodeCond;",
          "",
          "---------------",
          "--- Hunk 236 ---",
          "[Context before]",
          "10438:         {",
          "10439:             pnode = CreateNodeWithScanner<knopIf>(ichMin);",
          "10440:             pnode->ichLim = m_pscan->IchLimTok();",
          "10442:         }",
          "10443:         ChkCurTok(tkRParen, ERRnoRparen);",
          "",
          "[Removed Lines]",
          "10441:             pnode->sxIf.pnodeCond = pnodeCond;",
          "",
          "[Added Lines]",
          "10441:             pnode->AsParseNodeIf()->pnodeCond = pnodeCond;",
          "",
          "---------------",
          "--- Hunk 237 ---",
          "[Context before]",
          "10454:         }",
          "10455:         if (buildAST)",
          "10456:         {",
          "10459:         }",
          "10460:         PopStmt(&stmt);",
          "10461:         m_disallowImportExportStmt = stashedDisallowImportExportStmt;",
          "",
          "[Removed Lines]",
          "10457:             pnode->sxIf.pnodeTrue = pnodeTrue;",
          "10458:             pnode->sxIf.pnodeFalse = pnodeFalse;",
          "",
          "[Added Lines]",
          "10457:             pnode->AsParseNodeIf()->pnodeTrue = pnodeTrue;",
          "10458:             pnode->AsParseNodeIf()->pnodeFalse = pnodeFalse;",
          "",
          "---------------",
          "--- Hunk 238 ---",
          "[Context before]",
          "10470:         ParseNodePtr pnodeStmt = ParseTryCatchFinally<buildAST>();",
          "10471:         if (buildAST)",
          "10472:         {",
          "10474:         }",
          "10475:         PopStmt(&stmt);",
          "10476:         break;",
          "",
          "[Removed Lines]",
          "10473:             pnode->sxBlock.pnodeStmt = pnodeStmt;",
          "",
          "[Added Lines]",
          "10473:             pnode->AsParseNodeBlock()->pnodeStmt = pnodeStmt;",
          "",
          "---------------",
          "--- Hunk 239 ---",
          "[Context before]",
          "10484:         }",
          "10485:         if (m_currentNodeFunc)",
          "10486:         {",
          "10488:         }",
          "10490:         ichMin = m_pscan->IchMinTok();",
          "",
          "[Removed Lines]",
          "10487:             GetCurrentFunctionNode()->sxFnc.SetHasWithStmt(); // Used by DeferNested",
          "",
          "[Added Lines]",
          "10487:             GetCurrentFunctionNode()->AsParseNodeFnc()->SetHasWithStmt(); // Used by DeferNested",
          "",
          "---------------",
          "--- Hunk 240 ---",
          "[Context before]",
          "10506:         ParseNodePtr *ppnodeExprScopeSave = nullptr;",
          "10507:         if (buildAST)",
          "10508:         {",
          "10512:             if (m_ppnodeExprScope)",
          "10513:             {",
          "10514:                 Assert(*m_ppnodeExprScope == nullptr);",
          "10517:             }",
          "10518:             else",
          "10519:             {",
          "10520:                 Assert(m_ppnodeScope);",
          "10521:                 Assert(*m_ppnodeScope == nullptr);",
          "10524:             }",
          "10528:             ppnodeExprScopeSave = m_ppnodeExprScope;",
          "10532:             pnode->ichLim = ichLim;",
          "10533:         }",
          "",
          "[Removed Lines]",
          "10509:             pnode->sxWith.pnodeObj = pnodeObj;",
          "10510:             this->CheckArguments(pnode->sxWith.pnodeObj);",
          "10516:                 m_ppnodeExprScope = &pnode->sxWith.pnodeNext;",
          "10523:                 m_ppnodeScope = &pnode->sxWith.pnodeNext;",
          "10525:             pnode->sxWith.pnodeNext = nullptr;",
          "10526:             pnode->sxWith.scope = nullptr;",
          "10529:             m_ppnodeExprScope = &pnode->sxWith.pnodeScopes;",
          "10530:             pnode->sxWith.pnodeScopes = nullptr;",
          "",
          "[Added Lines]",
          "10509:             pnode->AsParseNodeWith()->pnodeObj = pnodeObj;",
          "10510:             this->CheckArguments(pnode->AsParseNodeWith()->pnodeObj);",
          "10516:                 m_ppnodeExprScope = &pnode->AsParseNodeWith()->pnodeNext;",
          "10523:                 m_ppnodeScope = &pnode->AsParseNodeWith()->pnodeNext;",
          "10525:             pnode->AsParseNodeWith()->pnodeNext = nullptr;",
          "10526:             pnode->AsParseNodeWith()->scope = nullptr;",
          "10529:             m_ppnodeExprScope = &pnode->AsParseNodeWith()->pnodeScopes;",
          "10530:             pnode->AsParseNodeWith()->pnodeScopes = nullptr;",
          "",
          "---------------",
          "--- Hunk 241 ---",
          "[Context before]",
          "10538:         ParseNodePtr pnodeBody = ParseStatement<buildAST>();",
          "10539:         if (buildAST)",
          "10540:         {",
          "10542:             m_ppnodeExprScope = ppnodeExprScopeSave;",
          "10543:         }",
          "10544:         else",
          "",
          "[Removed Lines]",
          "10541:             pnode->sxWith.pnodeBody = pnodeBody;",
          "",
          "[Added Lines]",
          "10541:             pnode->AsParseNodeWith()->pnodeBody = pnodeBody;",
          "",
          "---------------",
          "--- Hunk 242 ---",
          "[Context before]",
          "10554:         PopBlockInfo();",
          "10555:         if (callsEval)",
          "10556:         {",
          "10559:         }",
          "10561:         PopStmt(&stmt);",
          "",
          "[Removed Lines]",
          "10553:         bool callsEval = GetCurrentBlock()->sxBlock.GetCallsEval();",
          "10558:             GetCurrentBlock()->sxBlock.SetCallsEval(true);",
          "",
          "[Added Lines]",
          "10553:         bool callsEval = GetCurrentBlock()->AsParseNodeBlock()->GetCallsEval();",
          "10558:             GetCurrentBlock()->AsParseNodeBlock()->SetCallsEval(true);",
          "",
          "---------------",
          "--- Hunk 243 ---",
          "[Context before]",
          "10594:             pid = m_token.GetIdentifier(m_phtbl);",
          "10595:             if (buildAST)",
          "10596:             {",
          "10598:                 pnode->ichLim = m_pscan->IchLimTok();",
          "10600:                 m_pscan->Scan();",
          "10601:                 PushStmt<buildAST>(&stmt, pnode, pnode->nop, pLabelIdList);",
          "10603:                 for (pstmt = m_pstmtCur; nullptr != pstmt; pstmt = pstmt->pstmtOuter)",
          "10604:                 {",
          "10605:                     for (LabelId* label = pstmt->pLabelId; label != nullptr; label = label->next)",
          "",
          "[Removed Lines]",
          "10597:                 pnode->sxJump.hasExplicitTarget=true;",
          "10602:                 Assert(pnode->sxStmt.grfnop == 0);",
          "",
          "[Added Lines]",
          "10597:                 pnode->AsParseNodeJump()->hasExplicitTarget=true;",
          "10602:                 Assert(pnode->AsParseNodeStmt()->grfnop == 0);",
          "",
          "---------------",
          "--- Hunk 244 ---",
          "[Context before]",
          "10616:                             }",
          "10617:                             else",
          "10618:                             {",
          "10621:                             }",
          "10622:                             PopStmt(&stmt);",
          "10623:                             goto LNeedTerminator;",
          "10624:                         }",
          "10625:                     }",
          "10627:                         (pstmt->pnodeStmt->Grfnop() & fnopCleanup);",
          "10628:                 }",
          "10629:             }",
          "",
          "[Removed Lines]",
          "10619:                                 pstmt->pnodeStmt->sxStmt.grfnop |= fnop;",
          "10620:                                 pnode->sxJump.pnodeTarget = pstmt->pnodeStmt;",
          "10626:                     pnode->sxStmt.grfnop |=",
          "",
          "[Added Lines]",
          "10619:                                 pstmt->pnodeStmt->AsParseNodeStmt()->grfnop |= fnop;",
          "10620:                                 pnode->AsParseNodeJump()->pnodeTarget = pstmt->pnodeStmt;",
          "10626:                     pnode->AsParseNodeStmt()->grfnop |=",
          "",
          "---------------",
          "--- Hunk 245 ---",
          "[Context before]",
          "10663:                 if (buildAST)",
          "10664:                 {",
          "10666:                     PushStmt<buildAST>(&stmt, pnode, pnode->nop, pLabelIdList);",
          "10668:                 }",
          "10670:                 for (pstmt = m_pstmtCur; nullptr != pstmt; pstmt = pstmt->pstmtOuter)",
          "",
          "[Removed Lines]",
          "10665:                     pnode->sxJump.hasExplicitTarget=false;",
          "10667:                     Assert(pnode->sxStmt.grfnop == 0);",
          "",
          "[Added Lines]",
          "10665:                     pnode->AsParseNodeJump()->hasExplicitTarget=false;",
          "10667:                     Assert(pnode->AsParseNodeStmt()->grfnop == 0);",
          "",
          "---------------",
          "--- Hunk 246 ---",
          "[Context before]",
          "10674:                         AnalysisAssert(pstmt->pnodeStmt);",
          "10675:                         if (pstmt->pnodeStmt->Grfnop() & fnop)",
          "10676:                         {",
          "10679:                             PopStmt(&stmt);",
          "10680:                             goto LNeedTerminator;",
          "10681:                         }",
          "10683:                             (pstmt->pnodeStmt->Grfnop() & fnopCleanup);",
          "10684:                     }",
          "10685:                     else",
          "",
          "[Removed Lines]",
          "10677:                             pstmt->pnodeStmt->sxStmt.grfnop |= fnop;",
          "10678:                             pnode->sxJump.pnodeTarget = pstmt->pnodeStmt;",
          "10682:                         pnode->sxStmt.grfnop |=",
          "",
          "[Added Lines]",
          "10677:                             pstmt->pnodeStmt->AsParseNodeStmt()->grfnop |= fnop;",
          "10678:                             pnode->AsParseNodeJump()->pnodeTarget = pstmt->pnodeStmt;",
          "10682:                         pnode->AsParseNodeStmt()->grfnop |=",
          "",
          "---------------",
          "--- Hunk 247 ---",
          "[Context before]",
          "10689:                             if (!pstmt->isDeferred)",
          "10690:                             {",
          "10691:                                 AnalysisAssert(pstmt->pnodeStmt);",
          "10693:                             }",
          "10694:                             goto LNeedTerminator;",
          "10695:                         }",
          "",
          "[Removed Lines]",
          "10692:                                 pstmt->pnodeStmt->sxStmt.grfnop |= fnop;",
          "",
          "[Added Lines]",
          "10692:                                 pstmt->pnodeStmt->AsParseNodeStmt()->grfnop |= fnop;",
          "",
          "---------------",
          "--- Hunk 248 ---",
          "[Context before]",
          "10720:         {",
          "10721:             ReferenceSpecialName(wellKnownPropertyPids._this);",
          "10722:         }",
          "10724:         if (buildAST)",
          "10725:         {",
          "10727:             if (pnodeExpr)",
          "10728:             {",
          "10731:             }",
          "10733:             PushStmt<buildAST>(&stmt, pnode, knopReturn, pLabelIdList);",
          "10735:             for (pstmt = m_pstmtCur; nullptr != pstmt; pstmt = pstmt->pstmtOuter)",
          "10736:             {",
          "10737:                 if (pstmt->pnodeStmt->Grfnop() & fnopCleanup)",
          "10738:                 {",
          "10740:                     break;",
          "10741:                 }",
          "10742:             }",
          "",
          "[Removed Lines]",
          "10719:         if (GetCurrentFunctionNode()->sxFnc.IsClassConstructor())",
          "10726:             pnode->sxReturn.pnodeExpr = pnodeExpr;",
          "10729:                 this->CheckArguments(pnode->sxReturn.pnodeExpr);",
          "10730:                 pnode->ichLim = pnode->sxReturn.pnodeExpr->ichLim;",
          "10734:             Assert(pnode->sxStmt.grfnop == 0);",
          "10739:                     pnode->sxStmt.grfnop |= fnopCleanup;",
          "",
          "[Added Lines]",
          "10719:         if (GetCurrentFunctionNode()->AsParseNodeFnc()->IsClassConstructor())",
          "10726:             pnode->AsParseNodeReturn()->pnodeExpr = pnodeExpr;",
          "10729:                 this->CheckArguments(pnode->AsParseNodeReturn()->pnodeExpr);",
          "10730:                 pnode->ichLim = pnode->AsParseNodeReturn()->pnodeExpr->ichLim;",
          "10734:             Assert(pnode->AsParseNodeStmt()->grfnop == 0);",
          "10739:                     pnode->AsParseNodeStmt()->grfnop |= fnopCleanup;",
          "",
          "---------------",
          "--- Hunk 249 ---",
          "[Context before]",
          "10767:         if (buildAST)",
          "10768:         {",
          "10770:             if (pnode1)",
          "10771:             {",
          "10774:             }",
          "10775:         }",
          "10776:         goto LNeedTerminator;",
          "",
          "[Removed Lines]",
          "10769:             pnode->sxUni.pnode1 = pnode1;",
          "10772:                 this->CheckArguments(pnode->sxUni.pnode1);",
          "10773:                 pnode->ichLim = pnode->sxUni.pnode1->ichLim;",
          "",
          "[Added Lines]",
          "10769:             pnode->AsParseNodeUni()->pnode1 = pnode1;",
          "10772:                 this->CheckArguments(pnode->AsParseNodeUni()->pnode1);",
          "10773:                 pnode->ichLim = pnode->AsParseNodeUni()->pnode1->ichLim;",
          "",
          "---------------",
          "--- Hunk 250 ---",
          "[Context before]",
          "10898:         {",
          "10899:             if (m_currentNodeFunc)",
          "10900:             {",
          "10902:             }",
          "10903:             else if (m_currentNodeProg)",
          "10904:             {",
          "10906:             }",
          "10907:         }",
          "",
          "[Removed Lines]",
          "10901:                 m_currentNodeFunc->sxFnc.SetHasNonThisStmt();",
          "10905:                 m_currentNodeProg->sxFnc.SetHasNonThisStmt();",
          "",
          "[Added Lines]",
          "10901:                 m_currentNodeFunc->AsParseNodeFnc()->SetHasNonThisStmt();",
          "10905:                 m_currentNodeProg->AsParseNodeFnc()->SetHasNonThisStmt();",
          "",
          "---------------",
          "--- Hunk 251 ---",
          "[Context before]",
          "10912:         {",
          "10914:             PopStmt(&stmtTryBlock);",
          "10916:             PopStmt(&stmtTry);",
          "10917:             if(pnode != nullptr)",
          "10918:             {",
          "10919:                 pTry->ichLim = pnode->ichLim;",
          "10920:             }",
          "",
          "[Removed Lines]",
          "10915:             pTryBlock->sxBlock.pnodeStmt = pnode;",
          "10921:             pTry->sxTry.pnodeBody = pTryBlock;",
          "",
          "[Added Lines]",
          "10915:             pTryBlock->AsParseNodeBlock()->pnodeStmt = pnode;",
          "10921:             pTry->AsParseNodeTry()->pnodeBody = pTryBlock;",
          "",
          "---------------",
          "--- Hunk 252 ---",
          "[Context before]",
          "10926:             ParseNodePtr pCatch;",
          "10927:             pCatch = CreateNodeWithScanner<knopCatch>();",
          "10928:             PushStmt<buildAST>(&stmtCatch, pCatch, knopCatch, nullptr);",
          "10930:             if(pnode != nullptr)",
          "10931:             {",
          "10932:                 pCatch->ichLim = pnode->ichLim;",
          "10933:             }",
          "10938:             const WCHAR *uniqueNameStr = _u(\"__ehobj\");",
          "10939:             IdentPtr uniqueName = m_phtbl->PidHashNameLen(uniqueNameStr, static_cast<int32>(wcslen(uniqueNameStr)));",
          "",
          "[Removed Lines]",
          "10929:             pCatch->sxCatch.pnodeBody = nullptr;",
          "10934:             pCatch->sxCatch.grfnop = 0;",
          "10935:             pCatch->sxCatch.pnodeNext = nullptr;",
          "10941:             pCatch->sxCatch.pnodeParam = CreateNameNode(uniqueName);",
          "",
          "[Added Lines]",
          "10929:             pCatch->AsParseNodeCatch()->pnodeBody = nullptr;",
          "10934:             pCatch->AsParseNodeCatch()->grfnop = 0;",
          "10935:             pCatch->AsParseNodeCatch()->pnodeNext = nullptr;",
          "10941:             pCatch->AsParseNodeCatch()->pnodeParam = CreateNameNode(uniqueName);",
          "",
          "---------------",
          "--- Hunk 253 ---",
          "[Context before]",
          "10947:             {",
          "10948:                 Assert(*m_ppnodeExprScope == nullptr);",
          "10951:             }",
          "10952:             else",
          "10953:             {",
          "10954:                 Assert(m_ppnodeScope);",
          "10955:                 Assert(*m_ppnodeScope == nullptr);",
          "10958:             }",
          "10962:             PopStmt(&stmtCatch);",
          "10967:             PopStmt(&stmtTryCatch);",
          "10968:             PopStmt(&stmtTryCatchBlock);",
          "10972:             pnode = pParentTryCatchBlock;",
          "10973:         }",
          "10974: #endif // EXCEPTION_RECOVERY",
          "",
          "[Removed Lines]",
          "10950:                 m_ppnodeExprScope = &pCatch->sxCatch.pnodeNext;",
          "10957:                 m_ppnodeScope = &pCatch->sxCatch.pnodeNext;",
          "10960:             pCatch->sxCatch.pnodeScopes = nullptr;",
          "10965:             pParentTryCatch->sxTryCatch.pnodeTry = pTry;",
          "10966:             pParentTryCatch->sxTryCatch.pnodeCatch = pCatch;",
          "10971:             pParentTryCatchBlock->sxBlock.pnodeStmt = pParentTryCatch;",
          "",
          "[Added Lines]",
          "10950:                 m_ppnodeExprScope = &pCatch->AsParseNodeCatch()->pnodeNext;",
          "10957:                 m_ppnodeScope = &pCatch->AsParseNodeCatch()->pnodeNext;",
          "10960:             pCatch->AsParseNodeCatch()->pnodeScopes = nullptr;",
          "10965:             pParentTryCatch->AsParseNodeTryCatch()->pnodeTry = pTry;",
          "10966:             pParentTryCatch->AsParseNodeTryCatch()->pnodeCatch = pCatch;",
          "10971:             pParentTryCatchBlock->AsParseNodeBlock()->pnodeStmt = pParentTryCatch;",
          "",
          "---------------",
          "--- Hunk 254 ---",
          "[Context before]",
          "11044:                 if (isUseStrictDirective)",
          "11045:                 {",
          "11048:                     {",
          "11049:                         Error(ERRNonSimpleParamListInStrictMode);",
          "11050:                     }",
          "",
          "[Removed Lines]",
          "11047:                     if (GetCurrentFunctionNode()->sxFnc.HasNonSimpleParameterList())",
          "",
          "[Added Lines]",
          "11047:                     if (GetCurrentFunctionNode()->AsParseNodeFnc()->HasNonSimpleParameterList())",
          "",
          "---------------",
          "--- Hunk 255 ---",
          "[Context before]",
          "11062:                         {",
          "11064:                             Assert(m_currentNodeFunc != nullptr);",
          "11066:                         }",
          "11067:                         else if (strictModeOn)",
          "11068:                         {",
          "",
          "[Removed Lines]",
          "11065:                             m_currentNodeFunc->sxFnc.SetStrictMode();",
          "",
          "[Added Lines]",
          "11065:                             m_currentNodeFunc->AsParseNodeFnc()->SetStrictMode();",
          "",
          "---------------",
          "--- Hunk 256 ---",
          "[Context before]",
          "11082:                         {",
          "11084:                             Assert(m_currentNodeFunc != nullptr);",
          "11086:                         }",
          "11087:                     }",
          "11088:                 }",
          "",
          "[Removed Lines]",
          "11085:                             m_currentNodeFunc->sxFnc.SetStrictMode();",
          "",
          "[Added Lines]",
          "11085:                             m_currentNodeFunc->AsParseNodeFnc()->SetStrictMode();",
          "",
          "---------------",
          "--- Hunk 257 ---",
          "[Context before]",
          "11092:                     {",
          "11094:                         Assert(m_currentNodeFunc != nullptr);",
          "11097:                         m_InAsmMode = true;",
          "11099:                         CHAKRATEL_LANGSTATS_INC_LANGFEATURECOUNT(AsmJSFunction, m_scriptContext);",
          "",
          "[Removed Lines]",
          "11095:                         m_currentNodeFunc->sxFnc.SetAsmjsMode();",
          "11096:                         m_currentNodeFunc->sxFnc.SetCanBeDeferred(false);",
          "",
          "[Added Lines]",
          "11095:                         m_currentNodeFunc->AsParseNodeFnc()->SetAsmjsMode();",
          "11096:                         m_currentNodeFunc->AsParseNodeFnc()->SetCanBeDeferred(false);",
          "",
          "---------------",
          "--- Hunk 258 ---",
          "[Context before]",
          "11133:         switch (pnodeScope->nop)",
          "11134:         {",
          "11135:         case knopBlock:",
          "11137:             PushBlockInfo(pnodeScope);",
          "11139:             if (scope && scope != origCurrentScope)",
          "11140:             {",
          "11141:                 PushScope(scope);",
          "11142:             }",
          "11144:             if (scope && scope != origCurrentScope)",
          "11145:             {",
          "11146:                 BindPidRefs<false>(GetCurrentBlockInfo(), m_nextBlockId - 1);",
          "11147:                 PopScope(scope);",
          "11148:             }",
          "11149:             PopBlockInfo();",
          "11151:             break;",
          "11153:         case knopFncDecl:",
          "11154:             fn(pnodeScope);",
          "11156:             break;",
          "11158:         case knopCatch:",
          "11160:             if (scope)",
          "11161:             {",
          "11162:                 PushScope(scope);",
          "11163:             }",
          "11164:             pnodeBlock = CreateBlockNode(PnodeBlockType::Regular);",
          "11166:             PushBlockInfo(pnodeBlock);",
          "11168:             if (scope)",
          "11169:             {",
          "11170:                 BindPidRefs<false>(GetCurrentBlockInfo(), m_nextBlockId - 1);",
          "11171:                 PopScope(scope);",
          "11172:             }",
          "11173:             PopBlockInfo();",
          "11175:             break;",
          "11177:         case knopWith:",
          "11178:             PushBlockInfo(CreateBlockNode());",
          "11179:             PushDynamicBlock();",
          "11181:             PopBlockInfo();",
          "11183:             break;",
          "11185:         default:",
          "",
          "[Removed Lines]",
          "11136:             m_nextBlockId = pnodeScope->sxBlock.blockId + 1;",
          "11138:             scope = pnodeScope->sxBlock.scope;",
          "11143:             FinishFunctionsInScope(pnodeScope->sxBlock.pnodeScopes, fn);",
          "11150:             pnodeScope = pnodeScope->sxBlock.pnodeNext;",
          "11155:             pnodeScope = pnodeScope->sxFnc.pnodeNext;",
          "11159:             scope = pnodeScope->sxCatch.scope;",
          "11165:             pnodeBlock->sxBlock.scope = scope;",
          "11167:             FinishFunctionsInScope(pnodeScope->sxCatch.pnodeScopes, fn);",
          "11174:             pnodeScope = pnodeScope->sxCatch.pnodeNext;",
          "11180:             FinishFunctionsInScope(pnodeScope->sxWith.pnodeScopes, fn);",
          "11182:             pnodeScope = pnodeScope->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "11136:             m_nextBlockId = pnodeScope->AsParseNodeBlock()->blockId + 1;",
          "11138:             scope = pnodeScope->AsParseNodeBlock()->scope;",
          "11143:             FinishFunctionsInScope(pnodeScope->AsParseNodeBlock()->pnodeScopes, fn);",
          "11150:             pnodeScope = pnodeScope->AsParseNodeBlock()->pnodeNext;",
          "11155:             pnodeScope = pnodeScope->AsParseNodeFnc()->pnodeNext;",
          "11159:             scope = pnodeScope->AsParseNodeCatch()->scope;",
          "11165:             pnodeBlock->AsParseNodeBlock()->scope = scope;",
          "11167:             FinishFunctionsInScope(pnodeScope->AsParseNodeCatch()->pnodeScopes, fn);",
          "11174:             pnodeScope = pnodeScope->AsParseNodeCatch()->pnodeNext;",
          "11180:             FinishFunctionsInScope(pnodeScope->AsParseNodeWith()->pnodeScopes, fn);",
          "11182:             pnodeScope = pnodeScope->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 259 ---",
          "[Context before]",
          "11218: void Parser::FinishDeferredFunction(ParseNodePtr pnodeScopeList)",
          "11219: {",
          "11220:     uint saveNextBlockId = m_nextBlockId;",
          "11223:     FinishFunctionsInScope(pnodeScopeList,",
          "11224:         [this](ParseNodePtr pnodeFnc)",
          "",
          "[Removed Lines]",
          "11221:     m_nextBlockId = pnodeScopeList->sxBlock.blockId + 1;",
          "",
          "[Added Lines]",
          "11221:     m_nextBlockId = pnodeScopeList->AsParseNodeBlock()->blockId + 1;",
          "",
          "---------------",
          "--- Hunk 260 ---",
          "[Context before]",
          "11232:         {",
          "11236:             ParseNodePtr pnodeFncSave = this->m_currentNodeFunc;",
          "11237:             this->m_currentNodeFunc = pnodeFnc;",
          "11239:             ParseNodePtr pnodeFncExprBlock = nullptr;",
          "11241:             if (pnodeName)",
          "11242:             {",
          "11243:                 Assert(pnodeName->nop == knopVarDecl);",
          "11247:                 {",
          "11249:                     pnodeFncExprBlock = this->StartParseBlock<true>(PnodeBlockType::Function, ScopeType_FuncExpr);",
          "11257:                 }",
          "11258:             }",
          "11260:             ParseNodePtr pnodeBlock = this->StartParseBlock<true>(PnodeBlockType::Parameter, ScopeType_Parameter);",
          "11266:             ParseNodePtr argNode = nullptr;",
          "11268:             {",
          "11269:                 ParseNodePtr *const ppnodeVarSave = m_ppnodeVar;",
          "11272:                 argNode = this->AddArgumentsNodeToVars(pnodeFnc);",
          "",
          "[Removed Lines]",
          "11231:         if (pnodeFnc->sxFnc.pnodeBody == nullptr && !pnodeFnc->sxFnc.HasNonSimpleParameterList())",
          "11234:             JS_ETW_INTERNAL(EventWriteJSCRIPT_PARSE_FUNC(this->GetScriptContext(), pnodeFnc->sxFnc.functionId, /*Undefer*/TRUE));",
          "11240:             ParseNodePtr pnodeName = pnodeFnc->sxFnc.pnodeName;",
          "11244:                 Assert(pnodeName->sxVar.pnodeNext == nullptr);",
          "11246:                 if (!pnodeFnc->sxFnc.IsDeclaration())",
          "11250:                     PidRefStack *ref = this->PushPidRef(pnodeName->sxVar.pid);",
          "11251:                     pnodeName->sxVar.symRef = ref->GetSymRef();",
          "11252:                     ref->SetSym(pnodeName->sxVar.sym);",
          "11254:                     Scope *fncExprScope = pnodeFncExprBlock->sxBlock.scope;",
          "11255:                     fncExprScope->AddNewSymbol(pnodeName->sxVar.sym);",
          "11256:                     pnodeFnc->sxFnc.scope = fncExprScope;",
          "11261:             pnodeFnc->sxFnc.pnodeScopes = pnodeBlock;",
          "11262:             m_ppnodeScope = &pnodeBlock->sxBlock.pnodeScopes;",
          "11263:             pnodeBlock->sxBlock.pnodeStmt = pnodeFnc;",
          "11265:             ParseNodePtr* varNodesList = &pnodeFnc->sxFnc.pnodeVars;",
          "11267:             if (!pnodeFnc->sxFnc.IsModule() && !pnodeFnc->sxFnc.IsLambda() && !(pnodeFnc->grfpn & PNodeFlags::fpnArguments_overriddenInParam))",
          "11270:                 m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "",
          "[Added Lines]",
          "11231:         if (pnodeFnc->AsParseNodeFnc()->pnodeBody == nullptr && !pnodeFnc->AsParseNodeFnc()->HasNonSimpleParameterList())",
          "11234:             JS_ETW_INTERNAL(EventWriteJSCRIPT_PARSE_FUNC(this->GetScriptContext(), pnodeFnc->AsParseNodeFnc()->functionId, /*Undefer*/TRUE));",
          "11240:             ParseNodePtr pnodeName = pnodeFnc->AsParseNodeFnc()->pnodeName;",
          "11244:                 Assert(pnodeName->AsParseNodeVar()->pnodeNext == nullptr);",
          "11246:                 if (!pnodeFnc->AsParseNodeFnc()->IsDeclaration())",
          "11250:                     PidRefStack *ref = this->PushPidRef(pnodeName->AsParseNodeVar()->pid);",
          "11251:                     pnodeName->AsParseNodeVar()->symRef = ref->GetSymRef();",
          "11252:                     ref->SetSym(pnodeName->AsParseNodeVar()->sym);",
          "11254:                     Scope *fncExprScope = pnodeFncExprBlock->AsParseNodeBlock()->scope;",
          "11255:                     fncExprScope->AddNewSymbol(pnodeName->AsParseNodeVar()->sym);",
          "11256:                     pnodeFnc->AsParseNodeFnc()->scope = fncExprScope;",
          "11261:             pnodeFnc->AsParseNodeFnc()->pnodeScopes = pnodeBlock;",
          "11262:             m_ppnodeScope = &pnodeBlock->AsParseNodeBlock()->pnodeScopes;",
          "11263:             pnodeBlock->AsParseNodeBlock()->pnodeStmt = pnodeFnc;",
          "11265:             ParseNodePtr* varNodesList = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "11267:             if (!pnodeFnc->AsParseNodeFnc()->IsModule() && !pnodeFnc->AsParseNodeFnc()->IsLambda() && !(pnodeFnc->grfpn & PNodeFlags::fpnArguments_overriddenInParam))",
          "11270:                 m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "",
          "---------------",
          "--- Hunk 261 ---",
          "[Context before]",
          "11276:             }",
          "11282:             auto addArgsToScope = [&](ParseNodePtr pnodeArg) {",
          "11283:                 if (pnodeArg->IsVarLetOrConst())",
          "11284:                 {",
          "11287:                     if (ref->GetSym() != nullptr)",
          "11288:                     {",
          "11292:                         ref->GetSym()->SetDecl(pnodeArg);",
          "11293:                     }",
          "11294:                     else",
          "11295:                     {",
          "11298:                     }",
          "11299:                 }",
          "11300:             };",
          "",
          "[Removed Lines]",
          "11279:             Scope *scope = pnodeBlock->sxBlock.scope;",
          "11280:             uint blockId = GetCurrentBlock()->sxBlock.blockId;",
          "11281:             uint funcId = GetCurrentFunctionNode()->sxFnc.functionId;",
          "11285:                     PidRefStack *ref = this->FindOrAddPidRef(pnodeArg->sxVar.pid, blockId, funcId);",
          "11286:                     pnodeArg->sxVar.symRef = ref->GetSymRef();",
          "11291:                         Assert(ref->GetSym() == pnodeArg->sxVar.sym);",
          "11296:                         ref->SetSym(pnodeArg->sxVar.sym);",
          "11297:                         scope->AddNewSymbol(pnodeArg->sxVar.sym);",
          "",
          "[Added Lines]",
          "11279:             Scope *scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "11280:             uint blockId = GetCurrentBlock()->AsParseNodeBlock()->blockId;",
          "11281:             uint funcId = GetCurrentFunctionNode()->AsParseNodeFnc()->functionId;",
          "11285:                     PidRefStack *ref = this->FindOrAddPidRef(pnodeArg->AsParseNodeVar()->pid, blockId, funcId);",
          "11286:                     pnodeArg->AsParseNodeVar()->symRef = ref->GetSymRef();",
          "11291:                         Assert(ref->GetSym() == pnodeArg->AsParseNodeVar()->sym);",
          "11296:                         ref->SetSym(pnodeArg->AsParseNodeVar()->sym);",
          "11297:                         scope->AddNewSymbol(pnodeArg->AsParseNodeVar()->sym);",
          "",
          "---------------",
          "--- Hunk 262 ---",
          "[Context before]",
          "11303:             MapFormalsFromPattern(pnodeFnc, addArgsToScope);",
          "11305:             ParseNodePtr pnodeInnerBlock = this->StartParseBlock<true>(PnodeBlockType::Function, ScopeType_FunctionBody);",
          "",
          "[Removed Lines]",
          "11306:             pnodeFnc->sxFnc.pnodeBodyScope = pnodeInnerBlock;",
          "",
          "[Added Lines]",
          "11306:             pnodeFnc->AsParseNodeFnc()->pnodeBodyScope = pnodeInnerBlock;",
          "",
          "---------------",
          "--- Hunk 263 ---",
          "[Context before]",
          "11314:             ppnodeScopeSave = m_ppnodeScope;",
          "",
          "[Removed Lines]",
          "11317:             m_ppnodeScope = &pnodeInnerBlock->sxBlock.pnodeScopes;",
          "11318:             pnodeInnerBlock->sxBlock.pnodeStmt = pnodeFnc;",
          "",
          "[Added Lines]",
          "11317:             m_ppnodeScope = &pnodeInnerBlock->AsParseNodeBlock()->pnodeScopes;",
          "11318:             pnodeInnerBlock->AsParseNodeBlock()->pnodeStmt = pnodeFnc;",
          "",
          "---------------",
          "--- Hunk 264 ---",
          "[Context before]",
          "11331:             if (scope != nullptr)",
          "11332:             {",
          "11336:                 scope->ForEachSymbol([this, blockId, funcId](Symbol* paramSym)",
          "11337:                 {",
          "11338:                     PidRefStack* ref = this->FindOrAddPidRef(paramSym->GetPid(), blockId, funcId);",
          "",
          "[Removed Lines]",
          "11333:                 Assert(pnodeFnc->sxFnc.IsBodyAndParamScopeMerged());",
          "11334:                 blockId = GetCurrentBlock()->sxBlock.blockId;",
          "11335:                 funcId = GetCurrentFunctionNode()->sxFnc.functionId;",
          "",
          "[Added Lines]",
          "11333:                 Assert(pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged());",
          "11334:                 blockId = GetCurrentBlock()->AsParseNodeBlock()->blockId;",
          "11335:                 funcId = GetCurrentFunctionNode()->AsParseNodeFnc()->functionId;",
          "",
          "---------------",
          "--- Hunk 265 ---",
          "[Context before]",
          "11357:             this->FinishParseBlock(pnodeInnerBlock);",
          "11360:             {",
          "11361:                 UpdateArgumentsNode(pnodeFnc, argNode);",
          "11362:             }",
          "",
          "[Removed Lines]",
          "11359:             if (!pnodeFnc->sxFnc.IsModule() && (m_token.tk == tkLCurly || !pnodeFnc->sxFnc.IsLambda()))",
          "",
          "[Added Lines]",
          "11359:             if (!pnodeFnc->AsParseNodeFnc()->IsModule() && (m_token.tk == tkLCurly || !pnodeFnc->AsParseNodeFnc()->IsLambda()))",
          "",
          "---------------",
          "--- Hunk 266 ---",
          "[Context before]",
          "11444:     }",
          "11446:     pnodeScope = StartParseBlockWithCapacity<true>(blockType, scopeType, scopeInfo->GetSymbolCount());",
          "11448:     scope->SetScopeInfo(scopeInfo);",
          "11449:     scopeInfo->ExtractScopeInfo(this, /*nullptr, nullptr,*/ scope);",
          "11450: }",
          "",
          "[Removed Lines]",
          "11447:     Scope *scope = pnodeScope->sxBlock.scope;",
          "",
          "[Added Lines]",
          "11447:     Scope *scope = pnodeScope->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 267 ---",
          "[Context before]",
          "11524:     m_pCurrentAstSize = &initSize;",
          "11525:     pnodeProg = CreateProgNodeWithScanner(isModuleSource);",
          "11526:     pnodeProg->grfpn = PNodeFlags::fpnNone;",
          "11538:     if (!isDeferred || (isDeferred && isGlobalCode))",
          "11539:     {",
          "11543:     }",
          "11544:     else",
          "11545:     {",
          "11547:     }",
          "11549:     if (isModuleSource)",
          "11550:     {",
          "11551:         Assert(m_scriptContext->GetConfig()->IsES6ModuleEnabled());",
          "11558:     }",
          "11571:     m_currentNodeFunc = nullptr;",
          "11572:     m_currentNodeDeferredFunc = nullptr;",
          "11573:     m_currentNodeProg = pnodeProg;",
          "11574:     m_cactIdentToNodeLookup = 1;",
          "11578:     m_inDeferredNestedFunc = false;",
          "11584:     SetCurrentStatement(nullptr);",
          "11585:     AssertMsg(m_pstmtCur == nullptr, \"Statement stack should be empty when we start parse global code\");",
          "11588:     ParseNodePtr pnodeGlobalBlock = StartParseBlock<true>(PnodeBlockType::Global, ScopeType_Global);",
          "11590:     ParseNodePtr pnodeGlobalEvalBlock = nullptr;",
          "11593:     m_ppnodeExprScope = nullptr;",
          "11600:     if ((this->m_grfscr & fscrEvalCode) &&",
          "11601:         !(this->m_functionBody && this->m_functionBody->GetScopeInfo()))",
          "11602:     {",
          "11603:         pnodeGlobalEvalBlock = StartParseBlock<true>(PnodeBlockType::Regular, ScopeType_GlobalEvalBlock);",
          "11606:     }",
          "11608:     Js::ScopeInfo *scopeInfo = nullptr;",
          "",
          "[Removed Lines]",
          "11527:     pnodeProg->sxFnc.pid = nullptr;",
          "11528:     pnodeProg->sxFnc.pnodeName = nullptr;",
          "11529:     pnodeProg->sxFnc.pnodeRest = nullptr;",
          "11530:     pnodeProg->sxFnc.ClearFlags();",
          "11531:     pnodeProg->sxFnc.SetNested(FALSE);",
          "11532:     pnodeProg->sxFnc.astSize = 0;",
          "11533:     pnodeProg->sxFnc.cbMin = m_pscan->IecpMinTok();",
          "11534:     pnodeProg->sxFnc.lineNumber = lineNumber;",
          "11535:     pnodeProg->sxFnc.columnNumber = 0;",
          "11536:     pnodeProg->sxFnc.isBodyAndParamScopeMerged = true;",
          "11542:         pnodeProg->sxFnc.functionId = (*m_nextFunctionId)++;",
          "11546:         pnodeProg->sxFnc.functionId = Js::Constants::NoFunctionId;",
          "11553:         pnodeProg->sxModule.localExportEntries = nullptr;",
          "11554:         pnodeProg->sxModule.indirectExportEntries = nullptr;",
          "11555:         pnodeProg->sxModule.starExportEntries = nullptr;",
          "11556:         pnodeProg->sxModule.importEntries = nullptr;",
          "11557:         pnodeProg->sxModule.requestedModules = nullptr;",
          "11560:     m_pCurrentAstSize = & (pnodeProg->sxFnc.astSize);",
          "11562:     pnodeProg->sxFnc.hint = nullptr;",
          "11563:     pnodeProg->sxFnc.hintLength = 0;",
          "11564:     pnodeProg->sxFnc.hintOffset = 0;",
          "11565:     pnodeProg->sxFnc.isNameIdentifierRef = true;",
          "11566:     pnodeProg->sxFnc.nestedFuncEscapes = false;",
          "11569:     pnodeProg->sxFnc.pnodeNext = nullptr;",
          "11576:     pnodeProg->sxFnc.nestedCount = 0;",
          "11577:     m_pnestedCount = &pnodeProg->sxFnc.nestedCount;",
          "11580:     pnodeProg->sxFnc.pnodeParams = nullptr;",
          "11581:     pnodeProg->sxFnc.pnodeVars = nullptr;",
          "11582:     pnodeProg->sxFnc.pnodeRest = nullptr;",
          "11583:     m_ppnodeVar = &pnodeProg->sxFnc.pnodeVars;",
          "11589:     pnodeProg->sxProg.scope = pnodeGlobalBlock->sxBlock.scope;",
          "11596:     pnodeProg->sxFnc.pnodeBodyScope = nullptr;",
          "11597:     pnodeProg->sxFnc.pnodeScopes = pnodeGlobalBlock;",
          "11598:     m_ppnodeScope = &pnodeGlobalBlock->sxBlock.pnodeScopes;",
          "11604:         pnodeProg->sxFnc.pnodeScopes = pnodeGlobalEvalBlock;",
          "11605:         m_ppnodeScope = &pnodeGlobalEvalBlock->sxBlock.pnodeScopes;",
          "",
          "[Added Lines]",
          "11527:     pnodeProg->AsParseNodeFnc()->pid = nullptr;",
          "11528:     pnodeProg->AsParseNodeFnc()->pnodeName = nullptr;",
          "11529:     pnodeProg->AsParseNodeFnc()->pnodeRest = nullptr;",
          "11530:     pnodeProg->AsParseNodeFnc()->ClearFlags();",
          "11531:     pnodeProg->AsParseNodeFnc()->SetNested(FALSE);",
          "11532:     pnodeProg->AsParseNodeFnc()->astSize = 0;",
          "11533:     pnodeProg->AsParseNodeFnc()->cbMin = m_pscan->IecpMinTok();",
          "11534:     pnodeProg->AsParseNodeFnc()->lineNumber = lineNumber;",
          "11535:     pnodeProg->AsParseNodeFnc()->columnNumber = 0;",
          "11536:     pnodeProg->AsParseNodeFnc()->isBodyAndParamScopeMerged = true;",
          "11542:         pnodeProg->AsParseNodeFnc()->functionId = (*m_nextFunctionId)++;",
          "11546:         pnodeProg->AsParseNodeFnc()->functionId = Js::Constants::NoFunctionId;",
          "11553:         pnodeProg->AsParseNodeModule()->localExportEntries = nullptr;",
          "11554:         pnodeProg->AsParseNodeModule()->indirectExportEntries = nullptr;",
          "11555:         pnodeProg->AsParseNodeModule()->starExportEntries = nullptr;",
          "11556:         pnodeProg->AsParseNodeModule()->importEntries = nullptr;",
          "11557:         pnodeProg->AsParseNodeModule()->requestedModules = nullptr;",
          "11560:     m_pCurrentAstSize = & (pnodeProg->AsParseNodeFnc()->astSize);",
          "11562:     pnodeProg->AsParseNodeFnc()->hint = nullptr;",
          "11563:     pnodeProg->AsParseNodeFnc()->hintLength = 0;",
          "11564:     pnodeProg->AsParseNodeFnc()->hintOffset = 0;",
          "11565:     pnodeProg->AsParseNodeFnc()->isNameIdentifierRef = true;",
          "11566:     pnodeProg->AsParseNodeFnc()->nestedFuncEscapes = false;",
          "11569:     pnodeProg->AsParseNodeFnc()->pnodeNext = nullptr;",
          "11576:     pnodeProg->AsParseNodeFnc()->nestedCount = 0;",
          "11577:     m_pnestedCount = &pnodeProg->AsParseNodeFnc()->nestedCount;",
          "11580:     pnodeProg->AsParseNodeFnc()->pnodeParams = nullptr;",
          "11581:     pnodeProg->AsParseNodeFnc()->pnodeVars = nullptr;",
          "11582:     pnodeProg->AsParseNodeFnc()->pnodeRest = nullptr;",
          "11583:     m_ppnodeVar = &pnodeProg->AsParseNodeFnc()->pnodeVars;",
          "11589:     pnodeProg->AsParseNodeProg()->scope = pnodeGlobalBlock->AsParseNodeBlock()->scope;",
          "11596:     pnodeProg->AsParseNodeFnc()->pnodeBodyScope = nullptr;",
          "11597:     pnodeProg->AsParseNodeFnc()->pnodeScopes = pnodeGlobalBlock;",
          "11598:     m_ppnodeScope = &pnodeGlobalBlock->AsParseNodeBlock()->pnodeScopes;",
          "11604:         pnodeProg->AsParseNodeFnc()->pnodeScopes = pnodeGlobalEvalBlock;",
          "11605:         m_ppnodeScope = &pnodeGlobalEvalBlock->AsParseNodeBlock()->pnodeScopes;",
          "",
          "---------------",
          "--- Hunk 268 ---",
          "[Context before]",
          "11614:         {",
          "11616:             m_currentNodeFunc = CreateNode(knopFncDecl);",
          "11622:             this->RestoreScopeInfo(scopeInfo);",
          "11627:         }",
          "11628:     }",
          "",
          "[Removed Lines]",
          "11617:             m_currentNodeFunc->sxFnc.pnodeName = nullptr;",
          "11618:             m_currentNodeFunc->sxFnc.functionId = m_functionBody->GetLocalFunctionId();",
          "11619:             m_currentNodeFunc->sxFnc.nestedCount = m_functionBody->GetNestedCount();",
          "11620:             m_currentNodeFunc->sxFnc.SetStrictMode(!!this->m_fUseStrictMode);",
          "11624:             m_currentNodeFunc->sxFnc.ClearFlags();",
          "11625:             m_currentNodeFunc->sxFnc.SetIsGenerator(scopeInfo->IsGeneratorFunctionBody());",
          "11626:             m_currentNodeFunc->sxFnc.SetIsAsync(scopeInfo->IsAsyncFunctionBody());",
          "",
          "[Added Lines]",
          "11617:             m_currentNodeFunc->AsParseNodeFnc()->pnodeName = nullptr;",
          "11618:             m_currentNodeFunc->AsParseNodeFnc()->functionId = m_functionBody->GetLocalFunctionId();",
          "11619:             m_currentNodeFunc->AsParseNodeFnc()->nestedCount = m_functionBody->GetNestedCount();",
          "11620:             m_currentNodeFunc->AsParseNodeFnc()->SetStrictMode(!!this->m_fUseStrictMode);",
          "11624:             m_currentNodeFunc->AsParseNodeFnc()->ClearFlags();",
          "11625:             m_currentNodeFunc->AsParseNodeFnc()->SetIsGenerator(scopeInfo->IsGeneratorFunctionBody());",
          "11626:             m_currentNodeFunc->AsParseNodeFnc()->SetIsAsync(scopeInfo->IsAsyncFunctionBody());",
          "",
          "---------------",
          "--- Hunk 269 ---",
          "[Context before]",
          "11631:     if (isModuleSource && (!isDeferred || (isDeferred && isGlobalCode)))",
          "11632:     {",
          "11633:         ParseNodePtr moduleFunction = GenerateModuleFunctionWrapper<true>();",
          "11636:     }",
          "11637:     else",
          "11638:     {",
          "",
          "[Removed Lines]",
          "11634:         pnodeProg->sxFnc.pnodeBody = nullptr;",
          "11635:         AddToNodeList(&pnodeProg->sxFnc.pnodeBody, &lastNodeRef, moduleFunction);",
          "",
          "[Added Lines]",
          "11634:         pnodeProg->AsParseNodeFnc()->pnodeBody = nullptr;",
          "11635:         AddToNodeList(&pnodeProg->AsParseNodeFnc()->pnodeBody, &lastNodeRef, moduleFunction);",
          "",
          "---------------",
          "--- Hunk 270 ---",
          "[Context before]",
          "11725:             }",
          "11727:             ParseNodePtr pnodeFnc = ParseFncDecl<true>(flags, nullptr, false, false);",
          "11732:             if (isAsync || isGenerator)",
          "11733:             {",
          "11735:                 pnodeFnc->ichMin = ichMin;",
          "11736:             }",
          "11737:         }",
          "",
          "[Removed Lines]",
          "11728:             pnodeProg->sxFnc.pnodeBody = nullptr;",
          "11729:             AddToNodeList(&pnodeProg->sxFnc.pnodeBody, &lastNodeRef, pnodeFnc);",
          "11734:                 pnodeFnc->sxFnc.cbMin = iecpMin;",
          "",
          "[Added Lines]",
          "11728:             pnodeProg->AsParseNodeFnc()->pnodeBody = nullptr;",
          "11729:             AddToNodeList(&pnodeProg->AsParseNodeFnc()->pnodeBody, &lastNodeRef, pnodeFnc);",
          "11734:                 pnodeFnc->AsParseNodeFnc()->cbMin = iecpMin;",
          "",
          "---------------",
          "--- Hunk 271 ---",
          "[Context before]",
          "11739:         {",
          "11741:             ParseStmtList<true>(",
          "11743:                 &lastNodeRef,",
          "11744:                 SM_OnGlobalCode,",
          "11745:                 !(m_grfscr & fscrDeferredFncExpression) /* isSourceElementList */);",
          "",
          "[Removed Lines]",
          "11742:                 &pnodeProg->sxFnc.pnodeBody,",
          "",
          "[Added Lines]",
          "11742:                 &pnodeProg->AsParseNodeFnc()->pnodeBody,",
          "",
          "---------------",
          "--- Hunk 272 ---",
          "[Context before]",
          "11754:         }",
          "11755:     }",
          "11759:     if (IsStrictMode())",
          "11760:     {",
          "11762:     }",
          "11764: #if DEBUG",
          "11766:     {",
          "11767:         Error(ERRsyntax);",
          "11768:     }",
          "",
          "[Removed Lines]",
          "11757:     pnodeProg->sxProg.m_UsesArgumentsAtGlobal = m_UsesArgumentsAtGlobal;",
          "11761:         pnodeProg->sxFnc.SetStrictMode();",
          "11765:     if(m_grfscr & fscrEnforceJSON && !IsJSONValid(pnodeProg->sxFnc.pnodeBody))",
          "",
          "[Added Lines]",
          "11757:     pnodeProg->AsParseNodeProg()->m_UsesArgumentsAtGlobal = m_UsesArgumentsAtGlobal;",
          "11761:         pnodeProg->AsParseNodeFnc()->SetStrictMode();",
          "11765:     if(m_grfscr & fscrEnforceJSON && !IsJSONValid(pnodeProg->AsParseNodeFnc()->pnodeBody))",
          "",
          "---------------",
          "--- Hunk 273 ---",
          "[Context before]",
          "11772:         Error(ERRsyntax);",
          "11776:         CreateNodeWithScanner<knopEndCode>());",
          "11777:     AssertMem(lastNodeRef);",
          "11778:     AssertNodeMem(*lastNodeRef);",
          "",
          "[Removed Lines]",
          "11775:     AddToNodeList(&pnodeProg->sxFnc.pnodeBody, &lastNodeRef,",
          "",
          "[Added Lines]",
          "11775:     AddToNodeList(&pnodeProg->AsParseNodeFnc()->pnodeBody, &lastNodeRef,",
          "",
          "---------------",
          "--- Hunk 274 ---",
          "[Context before]",
          "11784:     pnodeProg->ichLim = m_pscan->IchLimTok();",
          "11790:     Assert(nullptr == *m_ppnodeScope);",
          "11793: #ifdef ENABLE_DEBUG_CONFIG_OPTIONS",
          "11794:     if (Js::Configuration::Global.flags.IsEnabled(Js::ForceUndoDeferFlag))",
          "",
          "[Removed Lines]",
          "11785:     pnodeProg->sxFnc.cbLim = m_pscan->IecpLimTok();",
          "11791:     Assert(nullptr == pnodeProg->sxFnc.pnodeNext);",
          "",
          "[Added Lines]",
          "11785:     pnodeProg->AsParseNodeFnc()->cbLim = m_pscan->IecpLimTok();",
          "11791:     Assert(nullptr == pnodeProg->AsParseNodeFnc()->pnodeNext);",
          "",
          "---------------",
          "--- Hunk 275 ---",
          "[Context before]",
          "11820:         m_phtbl->VisitPids([&](IdentPtr pid) { pid->SetTopRef(nullptr); });",
          "11824:         BlockInfoStack *newBlockInfo = PushBlockInfo(pnodeGlobalBlock);",
          "11825:         PushStmt<true>(&newBlockInfo->pstmt, pnodeGlobalBlock, knopBlock, nullptr);",
          "11827:         if (pnodeGlobalEvalBlock)",
          "11828:         {",
          "11830:             newBlockInfo = PushBlockInfo(pnodeGlobalEvalBlock);",
          "11831:             PushStmt<true>(&newBlockInfo->pstmt, pnodeGlobalEvalBlock, knopBlock, nullptr);",
          "11832:         }",
          "11837:     }",
          "11839:     if (pnodeGlobalEvalBlock)",
          "",
          "[Removed Lines]",
          "11823:         PushScope(pnodeGlobalBlock->sxBlock.scope);",
          "11829:             PushScope(pnodeGlobalEvalBlock->sxBlock.scope);",
          "11836:         FinishDeferredFunction(pnodeProg->sxFnc.pnodeScopes);",
          "",
          "[Added Lines]",
          "11823:         PushScope(pnodeGlobalBlock->AsParseNodeBlock()->scope);",
          "11829:             PushScope(pnodeGlobalEvalBlock->AsParseNodeBlock()->scope);",
          "11836:         FinishDeferredFunction(pnodeProg->AsParseNodeFnc()->pnodeScopes);",
          "",
          "---------------",
          "--- Hunk 276 ---",
          "[Context before]",
          "11848:     if (m_parseType != ParseType_Deferred)",
          "11849:     {",
          "11851:     }",
          "11852:     return pnodeProg;",
          "11853: }",
          "",
          "[Removed Lines]",
          "11850:         JS_ETW(EventWriteJSCRIPT_PARSE_METHOD_STOP(m_sourceContextInfo->dwHostSourceContext, GetScriptContext(), pnodeProg->sxFnc.functionId, *m_pCurrentAstSize, false, Js::Constants::GlobalFunction));",
          "",
          "[Added Lines]",
          "11850:         JS_ETW(EventWriteJSCRIPT_PARSE_METHOD_STOP(m_sourceContextInfo->dwHostSourceContext, GetScriptContext(), pnodeProg->AsParseNodeFnc()->functionId, *m_pCurrentAstSize, false, Js::Constants::GlobalFunction));",
          "",
          "---------------",
          "--- Hunk 277 ---",
          "[Context before]",
          "12029:     m_parseType = ParseType_Upfront;",
          "12030:     HRESULT hr = S_OK;",
          "12031:     SmartFPUControl smartFpuControl;",
          "12034:     this->RestoreContext(parseContext);",
          "12035:     m_nextFunctionId = &nextFunctionId;",
          "",
          "[Removed Lines]",
          "12032:     uint nextFunctionId = pnodeFnc->sxFnc.functionId + 1;",
          "",
          "[Added Lines]",
          "12032:     uint nextFunctionId = pnodeFnc->AsParseNodeFnc()->functionId + 1;",
          "",
          "---------------",
          "--- Hunk 278 ---",
          "[Context before]",
          "12040:     SetCurrentStatement(nullptr);",
          "12047:     ParseNodePtr pnodeParentFnc = GetCurrentFunctionNode();",
          "12048:     m_currentNodeFunc = pnodeFnc;",
          "",
          "[Removed Lines]",
          "12042:     pnodeFnc->sxFnc.pnodeVars = nullptr;",
          "12043:     pnodeFnc->sxFnc.pnodeParams = nullptr;",
          "12044:     pnodeFnc->sxFnc.pnodeBody = nullptr;",
          "12045:     pnodeFnc->sxFnc.nestedCount = 0;",
          "",
          "[Added Lines]",
          "12042:     pnodeFnc->AsParseNodeFnc()->pnodeVars = nullptr;",
          "12043:     pnodeFnc->AsParseNodeFnc()->pnodeParams = nullptr;",
          "12044:     pnodeFnc->AsParseNodeFnc()->pnodeBody = nullptr;",
          "12045:     pnodeFnc->AsParseNodeFnc()->nestedCount = 0;",
          "",
          "---------------",
          "--- Hunk 279 ---",
          "[Context before]",
          "12050:     m_ppnodeScope = nullptr;",
          "12051:     m_ppnodeExprScope = nullptr;",
          "12056:     ParseNodePtr pnodeBlock = StartParseBlock<true>(PnodeBlockType::Function, ScopeType_FunctionBody);",
          "12060:     uint uDeferSave = m_grfscr & fscrDeferFncParse;",
          "",
          "[Removed Lines]",
          "12053:     m_pnestedCount = &pnodeFnc->sxFnc.nestedCount;",
          "12054:     m_pCurrentAstSize = &pnodeFnc->sxFnc.astSize;",
          "12057:     pnodeFnc->sxFnc.pnodeScopes = pnodeBlock;",
          "12058:     m_ppnodeScope = &pnodeBlock->sxBlock.pnodeScopes;",
          "",
          "[Added Lines]",
          "12053:     m_pnestedCount = &pnodeFnc->AsParseNodeFnc()->nestedCount;",
          "12054:     m_pCurrentAstSize = &pnodeFnc->AsParseNodeFnc()->astSize;",
          "12057:     pnodeFnc->AsParseNodeFnc()->pnodeScopes = pnodeBlock;",
          "12058:     m_ppnodeScope = &pnodeBlock->AsParseNodeBlock()->pnodeScopes;",
          "",
          "---------------",
          "--- Hunk 280 ---",
          "[Context before]",
          "12063:     {",
          "12064:         m_pscan->Scan();",
          "12067:         this->ParseFncFormals<true>(pnodeFnc, pnodeParentFnc, fFncNoFlgs);",
          "12069:         if (m_token.tk == tkRParen)",
          "",
          "[Removed Lines]",
          "12066:         m_ppnodeVar = &pnodeFnc->sxFnc.pnodeParams;",
          "",
          "[Added Lines]",
          "12066:         m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeParams;",
          "",
          "---------------",
          "--- Hunk 281 ---",
          "[Context before]",
          "12074:         ChkCurTok(tkLCurly, ERRnoLcurly);",
          "12079:         BYTE deferFlags = m_pscan->SetDeferredParse(topLevelDeferred);",
          "",
          "[Removed Lines]",
          "12076:         m_ppnodeVar = &pnodeFnc->sxFnc.pnodeVars;",
          "",
          "[Added Lines]",
          "12076:         m_ppnodeVar = &pnodeFnc->AsParseNodeFnc()->pnodeVars;",
          "",
          "---------------",
          "--- Hunk 282 ---",
          "[Context before]",
          "12086:         else",
          "12087:         {",
          "12088:             ParseNodePtr *lastNodeRef = nullptr;",
          "12090:             AddArgumentsNodeToVars(pnodeFnc);",
          "12093:         }",
          "12096:         m_pscan->SetDeferredParseFlags(deferFlags);",
          "12098: #if DBG",
          "12100: #endif",
          "12101:         this->m_deferringAST = FALSE;",
          "",
          "[Removed Lines]",
          "12089:             ParseStmtList<true>(&pnodeFnc->sxFnc.pnodeBody, &lastNodeRef, SM_OnFunctionCode, true);",
          "12092:             AddToNodeList(&pnodeFnc->sxFnc.pnodeBody, &lastNodeRef, CreateNodeWithScanner<knopEndCode>());",
          "12099:         pnodeFnc->sxFnc.deferredParseNextFunctionId = *this->m_nextFunctionId;",
          "",
          "[Added Lines]",
          "12089:             ParseStmtList<true>(&pnodeFnc->AsParseNodeFnc()->pnodeBody, &lastNodeRef, SM_OnFunctionCode, true);",
          "12092:             AddToNodeList(&pnodeFnc->AsParseNodeFnc()->pnodeBody, &lastNodeRef, CreateNodeWithScanner<knopEndCode>());",
          "12099:         pnodeFnc->AsParseNodeFnc()->deferredParseNextFunctionId = *this->m_nextFunctionId;",
          "",
          "---------------",
          "--- Hunk 283 ---",
          "[Context before]",
          "12116:     if (IsStrictMode())",
          "12117:     {",
          "12119:     }",
          "12121:     if (topLevelDeferred)",
          "12122:     {",
          "12124:     }",
          "12126:     m_grfscr |= uDeferSave;",
          "",
          "[Removed Lines]",
          "12118:         pnodeFnc->sxFnc.SetStrictMode();",
          "12123:         pnodeFnc->sxFnc.pnodeVars = nullptr;",
          "",
          "[Added Lines]",
          "12118:         pnodeFnc->AsParseNodeFnc()->SetStrictMode();",
          "12123:         pnodeFnc->AsParseNodeFnc()->pnodeVars = nullptr;",
          "",
          "---------------",
          "--- Hunk 284 ---",
          "[Context before]",
          "12150: bool Parser::IsStrictMode() const",
          "12151: {",
          "12152:     return (m_fUseStrictMode ||",
          "12154: }",
          "12156: BOOL Parser::ExpectingExternalSource()",
          "",
          "[Removed Lines]",
          "12153:            (m_currentNodeFunc != nullptr && m_currentNodeFunc->sxFnc.GetStrictMode()));",
          "",
          "[Added Lines]",
          "12153:            (m_currentNodeFunc != nullptr && m_currentNodeFunc->AsParseNodeFnc()->GetStrictMode()));",
          "",
          "---------------",
          "--- Hunk 285 ---",
          "[Context before]",
          "12158:     return m_fExpectExternalSource;",
          "12159: }",
          "12162: {",
          "12163:     if (pnodeName &&",
          "12164:         pnodeName->nop == knopVarDecl)",
          "12165:     {",
          "12167:     }",
          "12168:     return nullptr;",
          "12169: }",
          "12172: {",
          "12173:     Assert(pnodeName &&",
          "12174:            pnodeName->nop == knopVarDecl);",
          "12176: }",
          "12179: {",
          "12180:     if (this->pnodeScopes == nullptr)",
          "12181:     {",
          "12182:         return nullptr;",
          "12183:     }",
          "12184:     Assert(this->pnodeScopes->nop == knopBlock &&",
          "12187: }",
          "12190: {",
          "12191:     if (this->pnodeBodyScope == nullptr)",
          "12192:     {",
          "12193:         return nullptr;",
          "12194:     }",
          "12195:     Assert(this->pnodeBodyScope->nop == knopBlock &&",
          "12198: }",
          "",
          "[Removed Lines]",
          "12161: Symbol *PnFnc::GetFuncSymbol()",
          "12166:         return pnodeName->sxVar.sym;",
          "12171: void PnFnc::SetFuncSymbol(Symbol *sym)",
          "12175:     pnodeName->sxVar.sym = sym;",
          "12178: ParseNodePtr PnFnc::GetParamScope() const",
          "12185:            this->pnodeScopes->sxBlock.pnodeNext == nullptr);",
          "12186:     return this->pnodeScopes->sxBlock.pnodeScopes;",
          "12189: ParseNodePtr PnFnc::GetBodyScope() const",
          "12196:            this->pnodeBodyScope->sxBlock.pnodeNext == nullptr);",
          "12197:     return this->pnodeBodyScope->sxBlock.pnodeScopes;",
          "",
          "[Added Lines]",
          "12161: Symbol *ParseNodeFnc::GetFuncSymbol()",
          "12166:         return pnodeName->AsParseNodeVar()->sym;",
          "12171: void ParseNodeFnc::SetFuncSymbol(Symbol *sym)",
          "12175:     pnodeName->AsParseNodeVar()->sym = sym;",
          "12178: ParseNodePtr ParseNodeFnc::GetParamScope() const",
          "12185:            this->pnodeScopes->AsParseNodeBlock()->pnodeNext == nullptr);",
          "12186:     return this->pnodeScopes->AsParseNodeBlock()->pnodeScopes;",
          "12189: ParseNodePtr ParseNodeFnc::GetBodyScope() const",
          "12196:            this->pnodeBodyScope->AsParseNodeBlock()->pnodeNext == nullptr);",
          "12197:     return this->pnodeBodyScope->AsParseNodeBlock()->pnodeScopes;",
          "",
          "---------------",
          "--- Hunk 286 ---",
          "[Context before]",
          "12220:     return pnode;",
          "12221: }",
          "12229: }",
          "12231: ParseNodePtr Parser::CreateUniNode(OpCode nop, ParseNodePtr pnode1, charcount_t ichMin,charcount_t ichLim)",
          "",
          "[Removed Lines]",
          "12223: ParseNodePtr Parser::CreateNameNode(IdentPtr pid,charcount_t ichMin,charcount_t ichLim) {",
          "12224:   ParseNodePtr pnode = CreateNodeT<knopName>(ichMin,ichLim);",
          "12225:   pnode->sxPid.pid = pid;",
          "12226:   pnode->sxPid.sym=NULL;",
          "12227:   pnode->sxPid.symRef=NULL;",
          "12228:   return pnode;",
          "",
          "[Added Lines]",
          "12223: ParseNodePtr Parser::CreateNameNode(IdentPtr pid,charcount_t ichMin,charcount_t ichLim)",
          "12224: {",
          "12225:       ParseNodePtr pnode = CreateNodeT<knopName>(ichMin,ichLim);",
          "12226:       pnode->AsParseNodePid()->pid = pid;",
          "12227:       pnode->AsParseNodePid()->sym=NULL;",
          "12228:       pnode->AsParseNodePid()->symRef=NULL;",
          "12229:       return pnode;",
          "",
          "---------------",
          "--- Hunk 287 ---",
          "[Context before]",
          "12241:     InitNode(nop, pnode);",
          "12245:     pnode->ichMin = ichMin;",
          "12246:     pnode->ichLim = ichLim;",
          "",
          "[Removed Lines]",
          "12243:     pnode->sxUni.pnode1 = pnode1;",
          "",
          "[Added Lines]",
          "12244:     pnode->AsParseNodeUni()->pnode1 = pnode1;",
          "",
          "---------------",
          "--- Hunk 288 ---",
          "[Context before]",
          "12277:     InitNode(nop, pnode);",
          "12284:     pnode->ichMin = ichMin;",
          "12285:     pnode->ichLim = ichLim;",
          "",
          "[Removed Lines]",
          "12279:     pnode->sxTri.pnodeNext = NULL;",
          "12280:     pnode->sxTri.pnode1 = pnode1;",
          "12281:     pnode->sxTri.pnode2 = pnode2;",
          "12282:     pnode->sxTri.pnode3 = pnode3;",
          "",
          "[Added Lines]",
          "12280:     pnode->AsParseNodeTri()->pnodeNext = NULL;",
          "12281:     pnode->AsParseNodeTri()->pnode1 = pnode1;",
          "12282:     pnode->AsParseNodeTri()->pnode2 = pnode2;",
          "12283:     pnode->AsParseNodeTri()->pnode3 = pnode3;",
          "",
          "---------------",
          "--- Hunk 289 ---",
          "[Context before]",
          "12287:     return pnode;",
          "12288: }",
          "12291: {",
          "",
          "[Removed Lines]",
          "12290: bool PnBlock::HasBlockScopedContent() const",
          "",
          "[Added Lines]",
          "12291: bool ParseNodeBlock::HasBlockScopedContent() const",
          "",
          "---------------",
          "--- Hunk 290 ---",
          "[Context before]",
          "12307:             return true;",
          "12309:         case knopBlock:",
          "12311:             break;",
          "12313:         case knopCatch:",
          "12315:             break;",
          "12317:         case knopWith:",
          "12319:             break;",
          "12321:         default:",
          "",
          "[Removed Lines]",
          "12310:             pnode = pnode->sxBlock.pnodeNext;",
          "12314:             pnode = pnode->sxCatch.pnodeNext;",
          "12318:             pnode = pnode->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "12311:             pnode = pnode->AsParseNodeBlock()->pnodeNext;",
          "12315:             pnode = pnode->AsParseNodeCatch()->pnodeNext;",
          "12319:             pnode = pnode->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 291 ---",
          "[Context before]",
          "12336:     switch (pnode->nop) {",
          "12338:     case knopName: {",
          "12341:       return nameNode;",
          "12342:     }",
          "",
          "[Removed Lines]",
          "12339:       ParseNode* nameNode=CreateNameNode(pnode->sxPid.pid,pnode->ichMin,pnode->ichLim);",
          "12340:       nameNode->sxPid.sym=pnode->sxPid.sym;",
          "",
          "[Added Lines]",
          "12340:       ParseNode* nameNode=CreateNameNode(pnode->AsParseNodePid()->pid,pnode->ichMin,pnode->ichLim);",
          "12341:       nameNode->AsParseNodePid()->sym=pnode->AsParseNodePid()->sym;",
          "",
          "---------------",
          "--- Hunk 292 ---",
          "[Context before]",
          "12397:   case knopTypeof:",
          "12398:   case knopVoid:",
          "12399:   case knopDelete:",
          "12403:   case knopArray:",
          "",
          "[Removed Lines]",
          "12400:     return CreateUniNode(pnode->nop,CopyPnode(pnode->sxUni.pnode1),pnode->ichMin,pnode->ichLim);",
          "",
          "[Added Lines]",
          "12401:     return CreateUniNode(pnode->nop,CopyPnode(pnode->AsParseNodeUni()->pnode1),pnode->ichMin,pnode->ichLim);",
          "",
          "---------------",
          "--- Hunk 293 ---",
          "[Context before]",
          "12493:   case knopIndex:",
          "12494:   case knopList:",
          "12500:   case knopNew:",
          "12501:   case knopCall:",
          "12505:   case knopQmark:",
          "12508:                          pnode->ichMin,pnode->ichLim);",
          "12511:     case knopVarDecl: {",
          "12512:       ParseNode* copyNode=CreateNodeT<knopVarDecl>(pnode->ichMin,pnode->ichLim);",
          "12518:       return copyNode;",
          "12519:     }",
          "",
          "[Removed Lines]",
          "12495:     return CreateBinNode(pnode->nop,CopyPnode(pnode->sxBin.pnode1),",
          "12496:                          CopyPnode(pnode->sxBin.pnode2),pnode->ichMin,pnode->ichLim);",
          "12502:     return CreateCallNode(pnode->nop,CopyPnode(pnode->sxCall.pnodeTarget),",
          "12503:                          CopyPnode(pnode->sxCall.pnodeArgs),pnode->ichMin,pnode->ichLim);",
          "12506:     return CreateTriNode(pnode->nop,CopyPnode(pnode->sxTri.pnode1),",
          "12507:                          CopyPnode(pnode->sxTri.pnode2),CopyPnode(pnode->sxTri.pnode3),",
          "12513:       copyNode->sxVar.pnodeInit=CopyPnode(pnode->sxVar.pnodeInit);",
          "12514:       copyNode->sxVar.sym=pnode->sxVar.sym;",
          "12516:       Assert(pnode->sxVar.pnodeNext==NULL);",
          "12517:       copyNode->sxVar.pnodeNext=NULL;",
          "",
          "[Added Lines]",
          "12496:     return CreateBinNode(pnode->nop,CopyPnode(pnode->AsParseNodeBin()->pnode1),",
          "12497:                          CopyPnode(pnode->AsParseNodeBin()->pnode2),pnode->ichMin,pnode->ichLim);",
          "12503:     return CreateCallNode(pnode->nop,CopyPnode(pnode->AsParseNodeCall()->pnodeTarget),",
          "12504:                          CopyPnode(pnode->AsParseNodeCall()->pnodeArgs),pnode->ichMin,pnode->ichLim);",
          "12507:     return CreateTriNode(pnode->nop,CopyPnode(pnode->AsParseNodeTri()->pnode1),",
          "12508:                          CopyPnode(pnode->AsParseNodeTri()->pnode2),CopyPnode(pnode->AsParseNodeTri()->pnode3),",
          "12514:       copyNode->AsParseNodeVar()->pnodeInit=CopyPnode(pnode->AsParseNodeVar()->pnodeInit);",
          "12515:       copyNode->AsParseNodeVar()->sym=pnode->AsParseNodeVar()->sym;",
          "12517:       Assert(pnode->AsParseNodeVar()->pnodeNext==NULL);",
          "12518:       copyNode->AsParseNodeVar()->pnodeNext=NULL;",
          "",
          "---------------",
          "--- Hunk 294 ---",
          "[Context before]",
          "12533:     case knopFor: {",
          "12534:       ParseNode* copyNode=CreateNodeT<knopFor>(pnode->ichMin,pnode->ichLim);",
          "12540:       return copyNode;",
          "12541:     }",
          "",
          "[Removed Lines]",
          "12535:       copyNode->sxFor.pnodeInverted=NULL;",
          "12536:       copyNode->sxFor.pnodeInit=CopyPnode(pnode->sxFor.pnodeInit);",
          "12537:       copyNode->sxFor.pnodeCond=CopyPnode(pnode->sxFor.pnodeCond);",
          "12538:       copyNode->sxFor.pnodeIncr=CopyPnode(pnode->sxFor.pnodeIncr);",
          "12539:       copyNode->sxFor.pnodeBody=CopyPnode(pnode->sxFor.pnodeBody);",
          "",
          "[Added Lines]",
          "12536:       copyNode->AsParseNodeFor()->pnodeInverted=NULL;",
          "12537:       copyNode->AsParseNodeFor()->pnodeInit=CopyPnode(pnode->AsParseNodeFor()->pnodeInit);",
          "12538:       copyNode->AsParseNodeFor()->pnodeCond=CopyPnode(pnode->AsParseNodeFor()->pnodeCond);",
          "12539:       copyNode->AsParseNodeFor()->pnodeIncr=CopyPnode(pnode->AsParseNodeFor()->pnodeIncr);",
          "12540:       copyNode->AsParseNodeFor()->pnodeBody=CopyPnode(pnode->AsParseNodeFor()->pnodeBody);",
          "",
          "---------------",
          "--- Hunk 295 ---",
          "[Context before]",
          "12562:   case knopReturn: {",
          "12563:     ParseNode* copyNode=CreateNodeT<knopReturn>(pnode->ichMin,pnode->ichLim);",
          "12565:     return copyNode;",
          "12566:   }",
          "12568:   case knopBlock: {",
          "12570:     if (pnode->grfpn & PNodeFlags::fpnSyntheticNode) {",
          "12574:         copyNode->grfpn |= PNodeFlags::fpnSyntheticNode;",
          "12575:     }",
          "12577:     return copyNode;",
          "12578:   }",
          "",
          "[Removed Lines]",
          "12564:     copyNode->sxReturn.pnodeExpr=CopyPnode(pnode->sxReturn.pnodeExpr);",
          "12569:     ParseNode* copyNode=CreateBlockNode(pnode->ichMin,pnode->ichLim,pnode->sxBlock.blockType);",
          "12576:     copyNode->sxBlock.pnodeStmt=CopyPnode(pnode->sxBlock.pnodeStmt);",
          "",
          "[Added Lines]",
          "12565:     copyNode->AsParseNodeReturn()->pnodeExpr=CopyPnode(pnode->AsParseNodeReturn()->pnodeExpr);",
          "12570:     ParseNode* copyNode=CreateBlockNode(pnode->ichMin,pnode->ichLim,pnode->AsParseNodeBlock()->blockType);",
          "12577:     copyNode->AsParseNodeBlock()->pnodeStmt=CopyPnode(pnode->AsParseNodeBlock()->pnodeStmt);",
          "",
          "---------------",
          "--- Hunk 296 ---",
          "[Context before]",
          "12660:         break;",
          "12661:     }",
          "12664:     CHAKRATEL_LANGSTATS_INC_LANGFEATURECOUNT(Super, m_scriptContext);",
          "",
          "[Removed Lines]",
          "12663:     currentNodeFunc->sxFnc.SetHasSuperReference(TRUE);",
          "",
          "[Added Lines]",
          "12664:     currentNodeFunc->AsParseNodeFnc()->SetHasSuperReference(TRUE);",
          "",
          "---------------",
          "--- Hunk 297 ---",
          "[Context before]",
          "12717:     ParseNodePtr* lastPtr = node;",
          "12718:     while ((*lastPtr) && (*lastPtr)->nop == knopList)",
          "12719:     {",
          "12721:     }",
          "12722:     auto last = (*lastPtr);",
          "12723:     if (last)",
          "",
          "[Removed Lines]",
          "12720:         lastPtr = &(*lastPtr)->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "12721:         lastPtr = &(*lastPtr)->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 298 ---",
          "[Context before]",
          "12735:     Assert(pnode->nop == knopArray);",
          "12736:     pnode->nop = knopArrayPattern;",
          "12739:         ParseNodePtr item = *itemRef;",
          "12740:         if (item->nop == knopEllipsis)",
          "12741:         {",
          "12743:             item = *itemRef;",
          "12744:             if (!(item->nop == knopName",
          "12745:                   || item->nop == knopDot",
          "",
          "[Removed Lines]",
          "12738:     ForEachItemRefInList(&pnode->sxArrLit.pnode1, [&](ParseNodePtr *itemRef) {",
          "12742:             itemRef = &item->sxUni.pnode1;",
          "",
          "[Added Lines]",
          "12739:     ForEachItemRefInList(&pnode->AsParseNodeArrLit()->pnode1, [&](ParseNodePtr *itemRef) {",
          "12743:             itemRef = &item->AsParseNodeUni()->pnode1;",
          "",
          "---------------",
          "--- Hunk 299 ---",
          "[Context before]",
          "12752:         }",
          "12753:         else if (item->nop == knopAsg)",
          "12754:         {",
          "12756:             item = *itemRef;",
          "12757:         }",
          "",
          "[Removed Lines]",
          "12755:             itemRef = &item->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "12756:             itemRef = &item->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 300 ---",
          "[Context before]",
          "12776: ParseNodePtr Parser::CreateParamPatternNode(ParseNodePtr pnode1)",
          "12777: {",
          "12778:     ParseNodePtr paramPatternNode = CreateNode(knopParamPattern, pnode1->ichMin, pnode1->ichLim);",
          "12782:     return paramPatternNode;",
          "12783: }",
          "12785: ParseNodePtr Parser::CreateDummyParamPatternNode(charcount_t ichMin)",
          "12786: {",
          "12787:     ParseNodePtr paramPatternNode = CreateNode(knopParamPattern, ichMin);",
          "12791:     return paramPatternNode;",
          "12792: }",
          "",
          "[Removed Lines]",
          "12779:     paramPatternNode->sxParamPattern.pnode1 = pnode1;",
          "12780:     paramPatternNode->sxParamPattern.pnodeNext = nullptr;",
          "12781:     paramPatternNode->sxParamPattern.location = Js::Constants::NoRegister;",
          "12788:     paramPatternNode->sxParamPattern.pnode1 = nullptr;",
          "12789:     paramPatternNode->sxParamPattern.pnodeNext = nullptr;",
          "12790:     paramPatternNode->sxParamPattern.location = Js::Constants::NoRegister;",
          "",
          "[Added Lines]",
          "12780:     paramPatternNode->AsParseNodeParamPattern()->pnode1 = pnode1;",
          "12781:     paramPatternNode->AsParseNodeParamPattern()->pnodeNext = nullptr;",
          "12782:     paramPatternNode->AsParseNodeParamPattern()->location = Js::Constants::NoRegister;",
          "12789:     paramPatternNode->AsParseNodeParamPattern()->pnode1 = nullptr;",
          "12790:     paramPatternNode->AsParseNodeParamPattern()->pnodeNext = nullptr;",
          "12791:     paramPatternNode->AsParseNodeParamPattern()->location = Js::Constants::NoRegister;",
          "",
          "---------------",
          "--- Hunk 301 ---",
          "[Context before]",
          "12800:     {",
          "12801:         ichMin = pnodeMemberList->ichMin;",
          "12802:         ichLim = pnodeMemberList->ichLim;",
          "12804:     }",
          "12806:     ForEachItemInList(pnodeMemberList, [&](ParseNodePtr item) {",
          "",
          "[Removed Lines]",
          "12803:         pnodeMemberList = pnodeMemberList->sxUni.pnode1;",
          "",
          "[Added Lines]",
          "12804:         pnodeMemberList = pnodeMemberList->AsParseNodeUni()->pnode1;",
          "",
          "---------------",
          "--- Hunk 302 ---",
          "[Context before]",
          "12846:     Assert(pnodeMember->nop == knopMember || pnodeMember->nop == knopMemberShort);",
          "12850:     resultNode->ichMin = pnodeMember->ichMin;",
          "12851:     resultNode->ichLim = pnodeMember->ichLim;",
          "12852:     return resultNode;",
          "",
          "[Removed Lines]",
          "12848:     ParseNodePtr rightNode = GetRightSideNodeFromPattern(pnodeMember->sxBin.pnode2);",
          "12849:     ParseNodePtr resultNode = CreateBinNode(knopObjectPatternMember, pnodeMember->sxBin.pnode1, rightNode);",
          "",
          "[Added Lines]",
          "12849:     ParseNodePtr rightNode = GetRightSideNodeFromPattern(pnodeMember->AsParseNodeBin()->pnode2);",
          "12850:     ParseNodePtr resultNode = CreateBinNode(knopObjectPatternMember, pnodeMember->AsParseNodeBin()->pnode1, rightNode);",
          "",
          "---------------",
          "--- Hunk 303 ---",
          "[Context before]",
          "12999:         Assert(lhsNode != nullptr);",
          "13001:         pnodeDestructAsg = CreateNodeWithScanner<knopAsg>();",
          "13005:         pnodeDestructAsg->ichMin = lhsNode->ichMin;",
          "13006:         pnodeDestructAsg->ichLim = pnodeDefault->ichLim;",
          "13007:     }",
          "",
          "[Removed Lines]",
          "13002:         pnodeDestructAsg->sxBin.pnode1 = lhsNode;",
          "13003:         pnodeDestructAsg->sxBin.pnode2 = pnodeDefault;",
          "13004:         pnodeDestructAsg->sxBin.pnodeNext = nullptr;",
          "",
          "[Added Lines]",
          "13003:         pnodeDestructAsg->AsParseNodeBin()->pnode1 = lhsNode;",
          "13004:         pnodeDestructAsg->AsParseNodeBin()->pnode2 = pnodeDefault;",
          "13005:         pnodeDestructAsg->AsParseNodeBin()->pnodeNext = nullptr;",
          "",
          "---------------",
          "--- Hunk 304 ---",
          "[Context before]",
          "13039:     bool seenRest = false;",
          "13045:     if (!isDecl)",
          "",
          "[Removed Lines]",
          "13042:     int originalCurrentBlockId = GetCurrentBlock()->sxBlock.blockId;",
          "",
          "[Added Lines]",
          "13043:     int originalCurrentBlockId = GetCurrentBlock()->AsParseNodeBlock()->blockId;",
          "",
          "---------------",
          "--- Hunk 305 ---",
          "[Context before]",
          "13055:         }",
          "13056:     }",
          "",
          "[Removed Lines]",
          "13054:             GetCurrentBlock()->sxBlock.blockId = m_nextBlockId++;",
          "",
          "[Added Lines]",
          "13055:             GetCurrentBlock()->AsParseNodeBlock()->blockId = m_nextBlockId++;",
          "",
          "---------------",
          "--- Hunk 306 ---",
          "[Context before]",
          "13077:             }",
          "13078:         }",
          "",
          "[Removed Lines]",
          "13076:                 GetCurrentBlock()->sxBlock.blockId = m_nextBlockId++;",
          "",
          "[Added Lines]",
          "13077:                 GetCurrentBlock()->AsParseNodeBlock()->blockId = m_nextBlockId++;",
          "",
          "---------------",
          "--- Hunk 307 ---",
          "[Context before]",
          "13136:             {",
          "13137:                 if (IsStrictMode() && pnodeElem != nullptr && pnodeElem->nop == knopName)",
          "13138:                 {",
          "13140:                 }",
          "13141:             }",
          "13142:             else",
          "",
          "[Removed Lines]",
          "13139:                     CheckStrictModeEvalArgumentsUsage(pnodeElem->sxPid.pid);",
          "",
          "[Added Lines]",
          "13140:                     CheckStrictModeEvalArgumentsUsage(pnodeElem->AsParseNodePid()->pid);",
          "",
          "---------------",
          "--- Hunk 308 ---",
          "[Context before]",
          "13169:         }",
          "13173:     }",
          "13175:     if (parenCount != 0)",
          "",
          "[Removed Lines]",
          "13172:         GetCurrentBlock()->sxBlock.blockId = originalCurrentBlockId;",
          "",
          "[Added Lines]",
          "13173:         GetCurrentBlock()->AsParseNodeBlock()->blockId = originalCurrentBlockId;",
          "",
          "---------------",
          "--- Hunk 309 ---",
          "[Context before]",
          "13208:     if (buildAST && seenRest)",
          "13209:     {",
          "13210:         ParseNodePtr pnodeRest = CreateNodeWithScanner<knopEllipsis>();",
          "13212:         pnodeElem = pnodeRest;",
          "13213:     }",
          "",
          "[Removed Lines]",
          "13211:         pnodeRest->sxUni.pnode1 = pnodeElem;",
          "",
          "[Added Lines]",
          "13212:         pnodeRest->AsParseNodeUni()->pnode1 = pnodeElem;",
          "",
          "---------------",
          "--- Hunk 310 ---",
          "[Context before]",
          "13283:     if (buildAST)",
          "13284:     {",
          "13285:         pnodeDestructArr = CreateNodeWithScanner<knopArrayPattern>();",
          "13293:         pnodeDestructArr->ichMin = ichMin;",
          "13294:         pnodeDestructArr->ichLim = m_pscan->IchLimTok();",
          "13297:         {",
          "13299:         }",
          "13300:     }",
          "",
          "[Removed Lines]",
          "13286:         pnodeDestructArr->sxArrLit.pnode1 = pnodeList;",
          "13287:         pnodeDestructArr->sxArrLit.arrayOfTaggedInts = false;",
          "13288:         pnodeDestructArr->sxArrLit.arrayOfInts = false;",
          "13289:         pnodeDestructArr->sxArrLit.arrayOfNumbers = false;",
          "13290:         pnodeDestructArr->sxArrLit.hasMissingValues = hasMissingValues;",
          "13291:         pnodeDestructArr->sxArrLit.count = count;",
          "13292:         pnodeDestructArr->sxArrLit.spreadCount = seenRest ? 1 : 0;",
          "13296:         if (pnodeDestructArr->sxArrLit.pnode1)",
          "13298:             this->CheckArguments(pnodeDestructArr->sxArrLit.pnode1);",
          "",
          "[Added Lines]",
          "13287:         pnodeDestructArr->AsParseNodeArrLit()->pnode1 = pnodeList;",
          "13288:         pnodeDestructArr->AsParseNodeArrLit()->arrayOfTaggedInts = false;",
          "13289:         pnodeDestructArr->AsParseNodeArrLit()->arrayOfInts = false;",
          "13290:         pnodeDestructArr->AsParseNodeArrLit()->arrayOfNumbers = false;",
          "13291:         pnodeDestructArr->AsParseNodeArrLit()->hasMissingValues = hasMissingValues;",
          "13292:         pnodeDestructArr->AsParseNodeArrLit()->count = count;",
          "13293:         pnodeDestructArr->AsParseNodeArrLit()->spreadCount = seenRest ? 1 : 0;",
          "13297:         if (pnodeDestructArr->AsParseNodeArrLit()->pnode1)",
          "13299:             this->CheckArguments(pnodeDestructArr->AsParseNodeArrLit()->pnode1);",
          "",
          "---------------",
          "--- Hunk 311 ---",
          "[Context before]",
          "13374:     switch(pnode->nop)",
          "13375:     {",
          "13376:     case knopProg:",
          "13385:     }",
          "13386:     if (scope) {",
          "13387:         Output::Print(_u(\"[%4d, %4d): \"), scope->ichMin, scope->ichLim);",
          "",
          "[Removed Lines]",
          "13377:     case knopFncDecl: scope = pnode->sxFnc.pnodeScopes; break;",
          "13378:     case knopBlock: scope = pnode->sxBlock.pnodeScopes; break;",
          "13379:     case knopCatch: scope = pnode->sxCatch.pnodeScopes; break;",
          "13380:     case knopWith: scope = pnode->sxWith.pnodeScopes; break;",
          "13381:     case knopSwitch: scope = pnode->sxSwitch.pnodeBlock; firstOnly = true; break;",
          "13382:     case knopFor: scope = pnode->sxFor.pnodeBlock; firstOnly = true; break;",
          "13383:     case knopForIn: scope = pnode->sxForInOrForOf.pnodeBlock; firstOnly = true; break;",
          "13384:     case knopForOf: scope = pnode->sxForInOrForOf.pnodeBlock; firstOnly = true; break;",
          "",
          "[Added Lines]",
          "13378:     case knopFncDecl: scope = pnode->AsParseNodeFnc()->pnodeScopes; break;",
          "13379:     case knopBlock: scope = pnode->AsParseNodeBlock()->pnodeScopes; break;",
          "13380:     case knopCatch: scope = pnode->AsParseNodeCatch()->pnodeScopes; break;",
          "13381:     case knopWith: scope = pnode->AsParseNodeWith()->pnodeScopes; break;",
          "13382:     case knopSwitch: scope = pnode->AsParseNodeSwitch()->pnodeBlock; firstOnly = true; break;",
          "13383:     case knopFor: scope = pnode->AsParseNodeFor()->pnodeBlock; firstOnly = true; break;",
          "13384:     case knopForIn: scope = pnode->AsParseNodeForInOrForOf()->pnodeBlock; firstOnly = true; break;",
          "13385:     case knopForOf: scope = pnode->AsParseNodeForInOrForOf()->pnodeBlock; firstOnly = true; break;",
          "",
          "---------------",
          "--- Hunk 312 ---",
          "[Context before]",
          "13391:         ParseNode *syntheticBlock = nullptr;",
          "13392:         while (scope) {",
          "13393:             switch (scope->nop) {",
          "13398:             default: Output::Print(_u(\"unknown\")); break;",
          "13399:             }",
          "13400:             if (firstOnly) {",
          "",
          "[Removed Lines]",
          "13394:             case knopFncDecl: Output::Print(_u(\"knopFncDecl\")); next = scope->sxFnc.pnodeNext; break;",
          "13395:             case knopBlock: Output::Print(_u(\"knopBlock\")); PrintBlockType(scope->sxBlock.blockType); next = scope->sxBlock.pnodeNext; break;",
          "13396:             case knopCatch: Output::Print(_u(\"knopCatch\")); next = scope->sxCatch.pnodeNext; break;",
          "13397:             case knopWith: Output::Print(_u(\"knopWith\")); next = scope->sxWith.pnodeNext; break;",
          "",
          "[Added Lines]",
          "13395:             case knopFncDecl: Output::Print(_u(\"knopFncDecl\")); next = scope->AsParseNodeFnc()->pnodeNext; break;",
          "13396:             case knopBlock: Output::Print(_u(\"knopBlock\")); PrintBlockType(scope->AsParseNodeBlock()->blockType); next = scope->AsParseNodeBlock()->pnodeNext; break;",
          "13397:             case knopCatch: Output::Print(_u(\"knopCatch\")); next = scope->AsParseNodeCatch()->pnodeNext; break;",
          "13398:             case knopWith: Output::Print(_u(\"knopWith\")); next = scope->AsParseNodeWith()->pnodeNext; break;",
          "",
          "---------------",
          "--- Hunk 313 ---",
          "[Context before]",
          "13427:   case knopName:",
          "13428:       Indent(indentAmt);",
          "13431:       }",
          "13432:       else {",
          "13433:         Output::Print(_u(\"name node\\n\"));",
          "",
          "[Removed Lines]",
          "13429:       if (pnode->sxPid.pid!=NULL) {",
          "13430:         Output::Print(_u(\"id: %s\\n\"),pnode->sxPid.pid->Psz());",
          "",
          "[Added Lines]",
          "13430:       if (pnode->AsParseNodePid()->pid!=NULL) {",
          "13431:         Output::Print(_u(\"id: %s\\n\"),pnode->AsParseNodePid()->pid->Psz());",
          "",
          "---------------",
          "--- Hunk 314 ---",
          "[Context before]",
          "13437:   case knopInt:",
          "13438:       Indent(indentAmt);",
          "13440:       break;",
          "13442:   case knopFlt:",
          "13443:       Indent(indentAmt);",
          "13445:       break;",
          "13447:   case knopStr:",
          "13448:       Indent(indentAmt);",
          "13450:       break;",
          "13452:   case knopRegExp:",
          "13453:       Indent(indentAmt);",
          "13455:       break;",
          "13457:   case knopNull:",
          "",
          "[Removed Lines]",
          "13439:       Output::Print(_u(\"%d\\n\"),pnode->sxInt.lw);",
          "13444:       Output::Print(_u(\"%lf\\n\"),pnode->sxFlt.dbl);",
          "13449:       Output::Print(_u(\"\\\"%s\\\"\\n\"),pnode->sxPid.pid->Psz());",
          "13454:       Output::Print(_u(\"/%x/\\n\"),pnode->sxPid.regexPattern);",
          "",
          "[Added Lines]",
          "13440:       Output::Print(_u(\"%d\\n\"),pnode->AsParseNodeInt()->lw);",
          "13445:       Output::Print(_u(\"%lf\\n\"),pnode->AsParseNodeFloat()->dbl);",
          "13450:       Output::Print(_u(\"\\\"%s\\\"\\n\"),pnode->AsParseNodePid()->pid->Psz());",
          "13455:       Output::Print(_u(\"/%x/\\n\"),pnode->AsParseNodePid()->regexPattern);",
          "",
          "---------------",
          "--- Hunk 315 ---",
          "[Context before]",
          "13478:   case knopNot:",
          "13479:       Indent(indentAmt);",
          "13480:       Output::Print(_u(\"~\\n\"));",
          "13482:       break;",
          "13484:   case knopNeg:",
          "13485:       Indent(indentAmt);",
          "13486:       Output::Print(_u(\"U-\\n\"));",
          "13488:       break;",
          "13490:   case knopPos:",
          "13491:       Indent(indentAmt);",
          "13492:       Output::Print(_u(\"U+\\n\"));",
          "13494:       break;",
          "13496:   case knopLogNot:",
          "13497:       Indent(indentAmt);",
          "13498:       Output::Print(_u(\"!\\n\"));",
          "13500:       break;",
          "13502:   case knopEllipsis:",
          "13503:       Indent(indentAmt);",
          "13504:       Output::Print(_u(\"...<expr>\\n\"));",
          "13506:       break;",
          "13508:   case knopIncPost:",
          "13509:       Indent(indentAmt);",
          "13510:       Output::Print(_u(\"<expr>++\\n\"));",
          "13512:       break;",
          "13514:   case knopDecPost:",
          "13515:       Indent(indentAmt);",
          "13516:       Output::Print(_u(\"<expr>--\\n\"));",
          "13518:       break;",
          "13520:   case knopIncPre:",
          "13521:       Indent(indentAmt);",
          "13522:       Output::Print(_u(\"++<expr>\\n\"));",
          "13524:       break;",
          "13526:   case knopDecPre:",
          "13527:       Indent(indentAmt);",
          "13528:       Output::Print(_u(\"--<expr>\\n\"));",
          "13530:       break;",
          "13532:   case knopTypeof:",
          "13533:       Indent(indentAmt);",
          "13534:       Output::Print(_u(\"typeof\\n\"));",
          "13536:       break;",
          "13538:   case knopVoid:",
          "13539:       Indent(indentAmt);",
          "13540:       Output::Print(_u(\"void\\n\"));",
          "13542:       break;",
          "13544:   case knopDelete:",
          "13545:       Indent(indentAmt);",
          "13546:       Output::Print(_u(\"delete\\n\"));",
          "13548:       break;",
          "13551:   case knopArrayPattern:",
          "13552:       Indent(indentAmt);",
          "13553:       Output::Print(_u(\"Array Pattern\\n\"));",
          "13555:       break;",
          "13557:   case knopObjectPattern:",
          "13558:       Indent(indentAmt);",
          "13559:       Output::Print(_u(\"Object Pattern\\n\"));",
          "13561:       break;",
          "13563:   case knopArray:",
          "13564:       Indent(indentAmt);",
          "13565:       Output::Print(_u(\"Array Literal\\n\"));",
          "13567:       break;",
          "13569:   case knopObject:",
          "13570:       Indent(indentAmt);",
          "13571:       Output::Print(_u(\"Object Literal\\n\"));",
          "13573:       break;",
          "13576:   case knopAdd:",
          "13577:       Indent(indentAmt);",
          "13578:       Output::Print(_u(\"+\\n\"));",
          "13581:       break;",
          "13583:   case knopSub:",
          "13584:       Indent(indentAmt);",
          "13585:       Output::Print(_u(\"-\\n\"));",
          "13588:       break;",
          "13590:   case knopMul:",
          "13591:       Indent(indentAmt);",
          "13592:       Output::Print(_u(\"*\\n\"));",
          "13595:       break;",
          "13597:   case knopExpo:",
          "13598:       Indent(indentAmt);",
          "13599:       Output::Print(_u(\"**\\n\"));",
          "13602:       break;",
          "13605:   case knopDiv:",
          "13606:       Indent(indentAmt);",
          "13607:       Output::Print(_u(\"/\\n\"));",
          "13610:       break;",
          "13612:   case knopMod:",
          "13613:       Indent(indentAmt);",
          "13614:       Output::Print(_u(\"%\\n\"));",
          "13617:       break;",
          "13619:   case knopOr:",
          "13620:       Indent(indentAmt);",
          "13621:       Output::Print(_u(\"|\\n\"));",
          "13624:       break;",
          "13626:   case knopXor:",
          "13627:       Indent(indentAmt);",
          "13628:       Output::Print(_u(\"^\\n\"));",
          "13631:       break;",
          "13633:   case knopAnd:",
          "13634:       Indent(indentAmt);",
          "13635:       Output::Print(_u(\"&\\n\"));",
          "13638:       break;",
          "13640:   case knopEq:",
          "13641:       Indent(indentAmt);",
          "13642:       Output::Print(_u(\"==\\n\"));",
          "13645:       break;",
          "13647:   case knopNe:",
          "13648:       Indent(indentAmt);",
          "13649:       Output::Print(_u(\"!=\\n\"));",
          "13652:       break;",
          "13654:   case knopLt:",
          "13655:       Indent(indentAmt);",
          "13656:       Output::Print(_u(\"<\\n\"));",
          "13659:       break;",
          "13661:   case knopLe:",
          "13662:       Indent(indentAmt);",
          "13663:       Output::Print(_u(\"<=\\n\"));",
          "13666:       break;",
          "13668:   case knopGe:",
          "13669:       Indent(indentAmt);",
          "13670:       Output::Print(_u(\">=\\n\"));",
          "13673:       break;",
          "13675:   case knopGt:",
          "13676:       Indent(indentAmt);",
          "13677:       Output::Print(_u(\">\\n\"));",
          "13680:       break;",
          "13682:   case knopCall:",
          "13683:       Indent(indentAmt);",
          "13684:       Output::Print(_u(\"Call\\n\"));",
          "13687:       break;",
          "13689:   case knopDot:",
          "13690:       Indent(indentAmt);",
          "13691:       Output::Print(_u(\".\\n\"));",
          "13694:       break;",
          "13696:   case knopAsg:",
          "13697:       Indent(indentAmt);",
          "13698:       Output::Print(_u(\"=\\n\"));",
          "13701:       break;",
          "13703:   case knopInstOf:",
          "13704:       Indent(indentAmt);",
          "13705:       Output::Print(_u(\"instanceof\\n\"));",
          "13708:       break;",
          "13710:   case knopIn:",
          "13711:       Indent(indentAmt);",
          "13712:       Output::Print(_u(\"in\\n\"));",
          "13715:       break;",
          "13717:   case knopEqv:",
          "13718:       Indent(indentAmt);",
          "13719:       Output::Print(_u(\"===\\n\"));",
          "13722:       break;",
          "13724:   case knopNEqv:",
          "13725:       Indent(indentAmt);",
          "13726:       Output::Print(_u(\"!==\\n\"));",
          "13729:       break;",
          "13731:   case knopComma:",
          "13732:       Indent(indentAmt);",
          "13733:       Output::Print(_u(\",\\n\"));",
          "13736:       break;",
          "13738:   case knopLogOr:",
          "13739:       Indent(indentAmt);",
          "13740:       Output::Print(_u(\"||\\n\"));",
          "13743:       break;",
          "13745:   case knopLogAnd:",
          "13746:       Indent(indentAmt);",
          "13747:       Output::Print(_u(\"&&\\n\"));",
          "13750:       break;",
          "13752:   case knopLsh:",
          "13753:       Indent(indentAmt);",
          "13754:       Output::Print(_u(\"<<\\n\"));",
          "13757:       break;",
          "13759:   case knopRsh:",
          "13760:       Indent(indentAmt);",
          "13761:       Output::Print(_u(\">>\\n\"));",
          "13764:       break;",
          "13766:   case knopRs2:",
          "13767:       Indent(indentAmt);",
          "13768:       Output::Print(_u(\">>>\\n\"));",
          "13771:       break;",
          "13773:   case knopNew:",
          "13774:       Indent(indentAmt);",
          "13775:       Output::Print(_u(\"new\\n\"));",
          "13778:       break;",
          "13780:   case knopIndex:",
          "13781:       Indent(indentAmt);",
          "13782:       Output::Print(_u(\"[]\\n\"));",
          "13785:       break;",
          "13787:   case knopQmark:",
          "13788:       Indent(indentAmt);",
          "13789:       Output::Print(_u(\"?:\\n\"));",
          "13793:       break;",
          "13795:   case knopAsgAdd:",
          "13796:       Indent(indentAmt);",
          "13797:       Output::Print(_u(\"+=\\n\"));",
          "13800:       break;",
          "13802:   case knopAsgSub:",
          "13803:       Indent(indentAmt);",
          "13804:       Output::Print(_u(\"-=\\n\"));",
          "13807:       break;",
          "13809:   case knopAsgMul:",
          "13810:       Indent(indentAmt);",
          "13811:       Output::Print(_u(\"*=\\n\"));",
          "13814:       break;",
          "13816:   case knopAsgExpo:",
          "13817:       Indent(indentAmt);",
          "13818:       Output::Print(_u(\"**=\\n\"));",
          "13821:       break;",
          "13824:   case knopAsgDiv:",
          "13825:       Indent(indentAmt);",
          "13826:       Output::Print(_u(\"/=\\n\"));",
          "13829:       break;",
          "13831:   case knopAsgMod:",
          "13832:       Indent(indentAmt);",
          "13833:       Output::Print(_u(\"%=\\n\"));",
          "13836:       break;",
          "13838:   case knopAsgAnd:",
          "13839:       Indent(indentAmt);",
          "13840:       Output::Print(_u(\"&=\\n\"));",
          "13843:       break;",
          "13845:   case knopAsgXor:",
          "13846:       Indent(indentAmt);",
          "13847:       Output::Print(_u(\"^=\\n\"));",
          "13850:       break;",
          "13852:   case knopAsgOr:",
          "13853:       Indent(indentAmt);",
          "13854:       Output::Print(_u(\"|=\\n\"));",
          "13857:       break;",
          "13859:   case knopAsgLsh:",
          "13860:       Indent(indentAmt);",
          "13861:       Output::Print(_u(\"<<=\\n\"));",
          "13864:       break;",
          "13866:   case knopAsgRsh:",
          "13867:       Indent(indentAmt);",
          "13868:       Output::Print(_u(\">>=\\n\"));",
          "13871:       break;",
          "13873:   case knopAsgRs2:",
          "13874:       Indent(indentAmt);",
          "13875:       Output::Print(_u(\">>>=\\n\"));",
          "13878:       break;",
          "13880:   case knopComputedName:",
          "13881:       Indent(indentAmt);",
          "13882:       Output::Print(_u(\"ComputedProperty\\n\"));",
          "13884:       break;",
          "",
          "[Removed Lines]",
          "13481:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13487:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13493:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13499:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13505:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13511:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13517:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13523:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13529:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13535:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13541:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13547:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13554:       PrintPnodeListWIndent(pnode->sxUni.pnode1, indentAmt + INDENT_SIZE);",
          "13560:       PrintPnodeListWIndent(pnode->sxUni.pnode1, indentAmt + INDENT_SIZE);",
          "13566:       PrintPnodeListWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13572:       PrintPnodeListWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "13579:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13580:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13586:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13587:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13593:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13594:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13600:       PrintPnodeWIndent(pnode->sxBin.pnode1, indentAmt + INDENT_SIZE);",
          "13601:       PrintPnodeWIndent(pnode->sxBin.pnode2, indentAmt + INDENT_SIZE);",
          "13608:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13609:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13615:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13616:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13622:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13623:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13629:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13630:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13636:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13637:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13643:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13644:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13650:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13651:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13657:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13658:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13664:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13665:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13671:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13672:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13678:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13679:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13685:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13686:       PrintPnodeListWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13692:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13693:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13699:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13700:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13706:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13707:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13713:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13714:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13720:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13721:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13727:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13728:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13734:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13735:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13741:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13742:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13748:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13749:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13755:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13756:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13762:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13763:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13769:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13770:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13776:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13777:       PrintPnodeListWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13783:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13784:       PrintPnodeListWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13790:       PrintPnodeWIndent(pnode->sxTri.pnode1,indentAmt+INDENT_SIZE);",
          "13791:       PrintPnodeWIndent(pnode->sxTri.pnode2,indentAmt+INDENT_SIZE);",
          "13792:       PrintPnodeWIndent(pnode->sxTri.pnode3,indentAmt+INDENT_SIZE);",
          "13798:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13799:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13805:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13806:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13812:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13813:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13819:       PrintPnodeWIndent(pnode->sxBin.pnode1, indentAmt + INDENT_SIZE);",
          "13820:       PrintPnodeWIndent(pnode->sxBin.pnode2, indentAmt + INDENT_SIZE);",
          "13827:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13828:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13834:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13835:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13841:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13842:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13848:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13849:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13855:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13856:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13862:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13863:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13869:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13870:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13876:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13877:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "13883:       PrintPnodeWIndent(pnode->sxUni.pnode1, indentAmt + INDENT_SIZE);",
          "",
          "[Added Lines]",
          "13482:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13488:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13494:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13500:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13506:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13512:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13518:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13524:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13530:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13536:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13542:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13548:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13555:       PrintPnodeListWIndent(pnode->AsParseNodeUni()->pnode1, indentAmt + INDENT_SIZE);",
          "13561:       PrintPnodeListWIndent(pnode->AsParseNodeUni()->pnode1, indentAmt + INDENT_SIZE);",
          "13567:       PrintPnodeListWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13573:       PrintPnodeListWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "13580:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13581:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13587:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13588:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13594:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13595:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13601:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1, indentAmt + INDENT_SIZE);",
          "13602:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2, indentAmt + INDENT_SIZE);",
          "13609:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13610:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13616:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13617:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13623:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13624:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13630:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13631:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13637:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13638:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13644:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13645:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13651:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13652:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13658:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13659:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13665:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13666:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13672:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13673:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13679:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13680:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13686:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13687:       PrintPnodeListWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13693:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13694:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13700:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13701:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13707:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13708:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13714:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13715:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13721:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13722:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13728:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13729:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13735:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13736:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13742:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13743:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13749:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13750:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13756:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13757:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13763:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13764:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13770:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13771:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13777:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13778:       PrintPnodeListWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13784:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13785:       PrintPnodeListWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13791:       PrintPnodeWIndent(pnode->AsParseNodeTri()->pnode1,indentAmt+INDENT_SIZE);",
          "13792:       PrintPnodeWIndent(pnode->AsParseNodeTri()->pnode2,indentAmt+INDENT_SIZE);",
          "13793:       PrintPnodeWIndent(pnode->AsParseNodeTri()->pnode3,indentAmt+INDENT_SIZE);",
          "13799:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13800:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13806:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13807:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13813:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13814:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13820:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1, indentAmt + INDENT_SIZE);",
          "13821:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2, indentAmt + INDENT_SIZE);",
          "13828:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13829:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13835:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13836:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13842:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13843:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13849:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13850:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13856:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13857:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13863:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13864:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13870:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13871:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13877:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13878:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "13884:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1, indentAmt + INDENT_SIZE);",
          "",
          "---------------",
          "--- Hunk 316 ---",
          "[Context before]",
          "13889:   case knopObjectPatternMember:",
          "13890:       Indent(indentAmt);",
          "13891:       Output::Print(_u(\":\\n\"));",
          "13894:       break;",
          "",
          "[Removed Lines]",
          "13892:       PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt+INDENT_SIZE);",
          "13893:       PrintPnodeWIndent(pnode->sxBin.pnode2,indentAmt+INDENT_SIZE);",
          "",
          "[Added Lines]",
          "13893:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt+INDENT_SIZE);",
          "13894:       PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode2,indentAmt+INDENT_SIZE);",
          "",
          "---------------",
          "--- Hunk 317 ---",
          "[Context before]",
          "13903:   case knopVarDecl:",
          "13904:       Indent(indentAmt);",
          "13908:       break;",
          "13909:   case knopConstDecl:",
          "13910:       Indent(indentAmt);",
          "13914:       break;",
          "13915:   case knopLetDecl:",
          "13916:       Indent(indentAmt);",
          "13920:       break;",
          "13922:   case knopFncDecl:",
          "13923:       Indent(indentAmt);",
          "13925:       {",
          "13928:       }",
          "13929:       else",
          "13930:       {",
          "13932:       }",
          "13933:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "13938:       {",
          "13939:           Output::Print(_u(\"[%4d, %4d): \"), pnode->ichMin, pnode->ichLim);",
          "13940:           Indent(indentAmt + INDENT_SIZE);",
          "",
          "[Removed Lines]",
          "13905:       Output::Print(_u(\"var %s\\n\"),pnode->sxVar.pid->Psz());",
          "13906:       if (pnode->sxVar.pnodeInit!=NULL)",
          "13907:           PrintPnodeWIndent(pnode->sxVar.pnodeInit,indentAmt+INDENT_SIZE);",
          "13911:       Output::Print(_u(\"const %s\\n\"),pnode->sxVar.pid->Psz());",
          "13912:       if (pnode->sxVar.pnodeInit!=NULL)",
          "13913:           PrintPnodeWIndent(pnode->sxVar.pnodeInit,indentAmt+INDENT_SIZE);",
          "13917:       Output::Print(_u(\"let %s\\n\"),pnode->sxVar.pid->Psz());",
          "13918:       if (pnode->sxVar.pnodeInit!=NULL)",
          "13919:           PrintPnodeWIndent(pnode->sxVar.pnodeInit,indentAmt+INDENT_SIZE);",
          "13924:       if (pnode->sxFnc.pid!=NULL)",
          "13926:           Output::Print(_u(\"fn decl %d nested %d name %s (%d-%d)\\n\"),pnode->sxFnc.IsDeclaration(),pnode->sxFnc.IsNested(),",
          "13927:               pnode->sxFnc.pid->Psz(), pnode->ichMin, pnode->ichLim);",
          "13931:           Output::Print(_u(\"fn decl %d nested %d anonymous (%d-%d)\\n\"),pnode->sxFnc.IsDeclaration(),pnode->sxFnc.IsNested(),pnode->ichMin,pnode->ichLim);",
          "13934:       PrintFormalsWIndent(pnode->sxFnc.pnodeParams, indentAmt + INDENT_SIZE);",
          "13935:       PrintPnodeWIndent(pnode->sxFnc.pnodeRest, indentAmt + INDENT_SIZE);",
          "13936:       PrintPnodeWIndent(pnode->sxFnc.pnodeBody, indentAmt + INDENT_SIZE);",
          "13937:       if (pnode->sxFnc.pnodeBody == nullptr)",
          "",
          "[Added Lines]",
          "13906:       Output::Print(_u(\"var %s\\n\"),pnode->AsParseNodeVar()->pid->Psz());",
          "13907:       if (pnode->AsParseNodeVar()->pnodeInit!=NULL)",
          "13908:           PrintPnodeWIndent(pnode->AsParseNodeVar()->pnodeInit,indentAmt+INDENT_SIZE);",
          "13912:       Output::Print(_u(\"const %s\\n\"),pnode->AsParseNodeVar()->pid->Psz());",
          "13913:       if (pnode->AsParseNodeVar()->pnodeInit!=NULL)",
          "13914:           PrintPnodeWIndent(pnode->AsParseNodeVar()->pnodeInit,indentAmt+INDENT_SIZE);",
          "13918:       Output::Print(_u(\"let %s\\n\"),pnode->AsParseNodeVar()->pid->Psz());",
          "13919:       if (pnode->AsParseNodeVar()->pnodeInit!=NULL)",
          "13920:           PrintPnodeWIndent(pnode->AsParseNodeVar()->pnodeInit,indentAmt+INDENT_SIZE);",
          "13925:       if (pnode->AsParseNodeFnc()->pid!=NULL)",
          "13927:           Output::Print(_u(\"fn decl %d nested %d name %s (%d-%d)\\n\"),pnode->AsParseNodeFnc()->IsDeclaration(),pnode->AsParseNodeFnc()->IsNested(),",
          "13928:               pnode->AsParseNodeFnc()->pid->Psz(), pnode->ichMin, pnode->ichLim);",
          "13932:           Output::Print(_u(\"fn decl %d nested %d anonymous (%d-%d)\\n\"),pnode->AsParseNodeFnc()->IsDeclaration(),pnode->AsParseNodeFnc()->IsNested(),pnode->ichMin,pnode->ichLim);",
          "13935:       PrintFormalsWIndent(pnode->AsParseNodeFnc()->pnodeParams, indentAmt + INDENT_SIZE);",
          "13936:       PrintPnodeWIndent(pnode->AsParseNodeFnc()->pnodeRest, indentAmt + INDENT_SIZE);",
          "13937:       PrintPnodeWIndent(pnode->AsParseNodeFnc()->pnodeBody, indentAmt + INDENT_SIZE);",
          "13938:       if (pnode->AsParseNodeFnc()->pnodeBody == nullptr)",
          "",
          "---------------",
          "--- Hunk 318 ---",
          "[Context before]",
          "13946:       Indent(indentAmt);",
          "13947:       Output::Print(_u(\"program\\n\"));",
          "13948:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "13950:       break;",
          "13952:   case knopEndCode:",
          "",
          "[Removed Lines]",
          "13949:       PrintPnodeListWIndent(pnode->sxFnc.pnodeBody,indentAmt+INDENT_SIZE);",
          "",
          "[Added Lines]",
          "13950:       PrintPnodeListWIndent(pnode->AsParseNodeFnc()->pnodeBody,indentAmt+INDENT_SIZE);",
          "",
          "---------------",
          "--- Hunk 319 ---",
          "[Context before]",
          "13963:       Indent(indentAmt);",
          "13964:       Output::Print(_u(\"for\\n\"));",
          "13965:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "13970:       break;",
          "13972:   case knopIf:",
          "13973:       Indent(indentAmt);",
          "13974:       Output::Print(_u(\"if\\n\"));",
          "13979:       break;",
          "13981:   case knopWhile:",
          "13982:       Indent(indentAmt);",
          "13983:       Output::Print(_u(\"while\\n\"));",
          "13986:       break;",
          "13988:   case knopDoWhile:",
          "13989:       Indent(indentAmt);",
          "13990:       Output::Print(_u(\"do\\n\"));",
          "13993:       break;",
          "13995:   case knopForIn:",
          "13996:       Indent(indentAmt);",
          "13997:       Output::Print(_u(\"forIn\\n\"));",
          "13998:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "14002:       break;",
          "14003:   case knopForOf:",
          "14004:       Indent(indentAmt);",
          "14005:       Output::Print(_u(\"forOf\\n\"));",
          "14006:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "14010:       break;",
          "14012:   case knopReturn:",
          "14013:       Indent(indentAmt);",
          "14014:       Output::Print(_u(\"return\\n\"));",
          "14017:       break;",
          "14019:   case knopBlock:",
          "",
          "[Removed Lines]",
          "13966:       PrintPnodeWIndent(pnode->sxFor.pnodeInit,indentAmt+INDENT_SIZE);",
          "13967:       PrintPnodeWIndent(pnode->sxFor.pnodeCond,indentAmt+INDENT_SIZE);",
          "13968:       PrintPnodeWIndent(pnode->sxFor.pnodeIncr,indentAmt+INDENT_SIZE);",
          "13969:       PrintPnodeWIndent(pnode->sxFor.pnodeBody,indentAmt+INDENT_SIZE);",
          "13975:       PrintPnodeWIndent(pnode->sxIf.pnodeCond,indentAmt+INDENT_SIZE);",
          "13976:       PrintPnodeWIndent(pnode->sxIf.pnodeTrue,indentAmt+INDENT_SIZE);",
          "13977:       if (pnode->sxIf.pnodeFalse!=NULL)",
          "13978:           PrintPnodeWIndent(pnode->sxIf.pnodeFalse,indentAmt+INDENT_SIZE);",
          "13984:       PrintPnodeWIndent(pnode->sxWhile.pnodeCond,indentAmt+INDENT_SIZE);",
          "13985:       PrintPnodeWIndent(pnode->sxWhile.pnodeBody,indentAmt+INDENT_SIZE);",
          "13991:       PrintPnodeWIndent(pnode->sxWhile.pnodeCond,indentAmt+INDENT_SIZE);",
          "13992:       PrintPnodeWIndent(pnode->sxWhile.pnodeBody,indentAmt+INDENT_SIZE);",
          "13999:       PrintPnodeWIndent(pnode->sxForInOrForOf.pnodeLval,indentAmt+INDENT_SIZE);",
          "14000:       PrintPnodeWIndent(pnode->sxForInOrForOf.pnodeObj,indentAmt+INDENT_SIZE);",
          "14001:       PrintPnodeWIndent(pnode->sxForInOrForOf.pnodeBody,indentAmt+INDENT_SIZE);",
          "14007:       PrintPnodeWIndent(pnode->sxForInOrForOf.pnodeLval,indentAmt+INDENT_SIZE);",
          "14008:       PrintPnodeWIndent(pnode->sxForInOrForOf.pnodeObj,indentAmt+INDENT_SIZE);",
          "14009:       PrintPnodeWIndent(pnode->sxForInOrForOf.pnodeBody,indentAmt+INDENT_SIZE);",
          "14015:       if (pnode->sxReturn.pnodeExpr!=NULL)",
          "14016:           PrintPnodeWIndent(pnode->sxReturn.pnodeExpr,indentAmt+INDENT_SIZE);",
          "",
          "[Added Lines]",
          "13967:       PrintPnodeWIndent(pnode->AsParseNodeFor()->pnodeInit,indentAmt+INDENT_SIZE);",
          "13968:       PrintPnodeWIndent(pnode->AsParseNodeFor()->pnodeCond,indentAmt+INDENT_SIZE);",
          "13969:       PrintPnodeWIndent(pnode->AsParseNodeFor()->pnodeIncr,indentAmt+INDENT_SIZE);",
          "13970:       PrintPnodeWIndent(pnode->AsParseNodeFor()->pnodeBody,indentAmt+INDENT_SIZE);",
          "13976:       PrintPnodeWIndent(pnode->AsParseNodeIf()->pnodeCond,indentAmt+INDENT_SIZE);",
          "13977:       PrintPnodeWIndent(pnode->AsParseNodeIf()->pnodeTrue,indentAmt+INDENT_SIZE);",
          "13978:       if (pnode->AsParseNodeIf()->pnodeFalse!=NULL)",
          "13979:           PrintPnodeWIndent(pnode->AsParseNodeIf()->pnodeFalse,indentAmt+INDENT_SIZE);",
          "13985:       PrintPnodeWIndent(pnode->AsParseNodeWhile()->pnodeCond,indentAmt+INDENT_SIZE);",
          "13986:       PrintPnodeWIndent(pnode->AsParseNodeWhile()->pnodeBody,indentAmt+INDENT_SIZE);",
          "13992:       PrintPnodeWIndent(pnode->AsParseNodeWhile()->pnodeCond,indentAmt+INDENT_SIZE);",
          "13993:       PrintPnodeWIndent(pnode->AsParseNodeWhile()->pnodeBody,indentAmt+INDENT_SIZE);",
          "14000:       PrintPnodeWIndent(pnode->AsParseNodeForInOrForOf()->pnodeLval,indentAmt+INDENT_SIZE);",
          "14001:       PrintPnodeWIndent(pnode->AsParseNodeForInOrForOf()->pnodeObj,indentAmt+INDENT_SIZE);",
          "14002:       PrintPnodeWIndent(pnode->AsParseNodeForInOrForOf()->pnodeBody,indentAmt+INDENT_SIZE);",
          "14008:       PrintPnodeWIndent(pnode->AsParseNodeForInOrForOf()->pnodeLval,indentAmt+INDENT_SIZE);",
          "14009:       PrintPnodeWIndent(pnode->AsParseNodeForInOrForOf()->pnodeObj,indentAmt+INDENT_SIZE);",
          "14010:       PrintPnodeWIndent(pnode->AsParseNodeForInOrForOf()->pnodeBody,indentAmt+INDENT_SIZE);",
          "14016:       if (pnode->AsParseNodeReturn()->pnodeExpr!=NULL)",
          "14017:           PrintPnodeWIndent(pnode->AsParseNodeReturn()->pnodeExpr,indentAmt+INDENT_SIZE);",
          "",
          "---------------",
          "--- Hunk 320 ---",
          "[Context before]",
          "14021:       Output::Print(_u(\"block \"));",
          "14022:       if (pnode->grfpn & fpnSyntheticNode)",
          "14023:           Output::Print(_u(\"synthetic \"));",
          "14025:       Output::Print(_u(\"(%d-%d)\\n\"),pnode->ichMin,pnode->ichLim);",
          "14026:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "14029:       break;",
          "14031:   case knopWith:",
          "14032:       Indent(indentAmt);",
          "14033:       Output::Print(_u(\"with (%d-%d)\\n\"), pnode->ichMin,pnode->ichLim);",
          "14034:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "14037:       break;",
          "14039:   case knopBreak:",
          "",
          "[Removed Lines]",
          "14024:       PrintBlockType(pnode->sxBlock.blockType);",
          "14027:       if (pnode->sxBlock.pnodeStmt!=NULL)",
          "14028:           PrintPnodeWIndent(pnode->sxBlock.pnodeStmt,indentAmt+INDENT_SIZE);",
          "14035:       PrintPnodeWIndent(pnode->sxWith.pnodeObj,indentAmt+INDENT_SIZE);",
          "14036:       PrintPnodeWIndent(pnode->sxWith.pnodeBody,indentAmt+INDENT_SIZE);",
          "",
          "[Added Lines]",
          "14025:       PrintBlockType(pnode->AsParseNodeBlock()->blockType);",
          "14028:       if (pnode->AsParseNodeBlock()->pnodeStmt!=NULL)",
          "14029:           PrintPnodeWIndent(pnode->AsParseNodeBlock()->pnodeStmt,indentAmt+INDENT_SIZE);",
          "14036:       PrintPnodeWIndent(pnode->AsParseNodeWith()->pnodeObj,indentAmt+INDENT_SIZE);",
          "14037:       PrintPnodeWIndent(pnode->AsParseNodeWith()->pnodeBody,indentAmt+INDENT_SIZE);",
          "",
          "---------------",
          "--- Hunk 321 ---",
          "[Context before]",
          "14052:       Indent(indentAmt);",
          "14053:       Output::Print(_u(\"switch\\n\"));",
          "14054:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "14056:           PrintPnodeWIndent(pnodeT,indentAmt+2);",
          "14057:       }",
          "14058:       break;",
          "",
          "[Removed Lines]",
          "14055:       for (ParseNode *pnodeT = pnode->sxSwitch.pnodeCases; NULL != pnodeT;pnodeT = pnodeT->sxCase.pnodeNext) {",
          "",
          "[Added Lines]",
          "14056:       for (ParseNode *pnodeT = pnode->AsParseNodeSwitch()->pnodeCases; NULL != pnodeT;pnodeT = pnodeT->AsParseNodeCase()->pnodeNext) {",
          "",
          "---------------",
          "--- Hunk 322 ---",
          "[Context before]",
          "14060:   case knopCase:",
          "14061:       Indent(indentAmt);",
          "14062:       Output::Print(_u(\"case\\n\"));",
          "14065:       break;",
          "14067:   case knopTryFinally:",
          "14070:       break;",
          "14071:   case knopFinally:",
          "14072:       Indent(indentAmt);",
          "14073:       Output::Print(_u(\"finally\\n\"));",
          "14075:       break;",
          "14077:   case knopCatch:",
          "14078:       Indent(indentAmt);",
          "14079:       Output::Print(_u(\"catch (%d-%d)\\n\"), pnode->ichMin,pnode->ichLim);",
          "14080:       PrintScopesWIndent(pnode, indentAmt+INDENT_SIZE);",
          "14085:       break;",
          "14087:   case knopTryCatch:",
          "14090:       break;",
          "14092:   case knopTry:",
          "14093:       Indent(indentAmt);",
          "14094:       Output::Print(_u(\"try\\n\"));",
          "14096:       break;",
          "14098:   case knopThrow:",
          "14099:       Indent(indentAmt);",
          "14100:       Output::Print(_u(\"throw\\n\"));",
          "14102:       break;",
          "14104:   case knopClassDecl:",
          "14105:       Indent(indentAmt);",
          "14108:       {",
          "14109:           Output::Print(_u(\" extends \"));",
          "14111:       }",
          "14112:       else {",
          "14113:           Output::Print(_u(\"\\n\"));",
          "14114:       }",
          "14119:       break;",
          "14120:   case knopStrTemplate:",
          "14121:       Indent(indentAmt);",
          "14122:       Output::Print(_u(\"string template\\n\"));",
          "14124:       break;",
          "14125:   case knopYieldStar:",
          "14126:       Indent(indentAmt);",
          "14127:       Output::Print(_u(\"yield*\\n\"));",
          "14129:       break;",
          "14130:   case knopYield:",
          "14131:   case knopYieldLeaf:",
          "14132:       Indent(indentAmt);",
          "14133:       Output::Print(_u(\"yield\\n\"));",
          "14135:       break;",
          "14136:   case knopAwait:",
          "14137:       Indent(indentAmt);",
          "14138:       Output::Print(_u(\"await\\n\"));",
          "14140:       break;",
          "14141:   case knopExportDefault:",
          "14142:       Indent(indentAmt);",
          "14143:       Output::Print(_u(\"export default\\n\"));",
          "14145:       break;",
          "14146:   default:",
          "14147:       Output::Print(_u(\"unhandled pnode op %d\\n\"),pnode->nop);",
          "",
          "[Removed Lines]",
          "14063:       PrintPnodeWIndent(pnode->sxCase.pnodeExpr,indentAmt+INDENT_SIZE);",
          "14064:       PrintPnodeWIndent(pnode->sxCase.pnodeBody,indentAmt+INDENT_SIZE);",
          "14068:       PrintPnodeWIndent(pnode->sxTryFinally.pnodeTry,indentAmt);",
          "14069:       PrintPnodeWIndent(pnode->sxTryFinally.pnodeFinally,indentAmt);",
          "14074:       PrintPnodeWIndent(pnode->sxFinally.pnodeBody,indentAmt+INDENT_SIZE);",
          "14081:       PrintPnodeWIndent(pnode->sxCatch.pnodeParam,indentAmt+INDENT_SIZE);",
          "14084:       PrintPnodeWIndent(pnode->sxCatch.pnodeBody,indentAmt+INDENT_SIZE);",
          "14088:       PrintPnodeWIndent(pnode->sxTryCatch.pnodeTry,indentAmt);",
          "14089:       PrintPnodeWIndent(pnode->sxTryCatch.pnodeCatch,indentAmt);",
          "14095:       PrintPnodeWIndent(pnode->sxTry.pnodeBody,indentAmt+INDENT_SIZE);",
          "14101:       PrintPnodeWIndent(pnode->sxUni.pnode1,indentAmt+INDENT_SIZE);",
          "14106:       Output::Print(_u(\"class %s\"), pnode->sxClass.pnodeName->sxVar.pid->Psz());",
          "14107:       if (pnode->sxClass.pnodeExtends != nullptr)",
          "14110:           PrintPnodeWIndent(pnode->sxClass.pnodeExtends, 0);",
          "14116:       PrintPnodeWIndent(pnode->sxClass.pnodeConstructor,   indentAmt + INDENT_SIZE);",
          "14117:       PrintPnodeWIndent(pnode->sxClass.pnodeMembers,       indentAmt + INDENT_SIZE);",
          "14118:       PrintPnodeWIndent(pnode->sxClass.pnodeStaticMembers, indentAmt + INDENT_SIZE);",
          "14123:       PrintPnodeListWIndent(pnode->sxStrTemplate.pnodeSubstitutionExpressions, indentAmt + INDENT_SIZE);",
          "14128:       PrintPnodeListWIndent(pnode->sxUni.pnode1, indentAmt + INDENT_SIZE);",
          "14134:       PrintPnodeListWIndent(pnode->sxUni.pnode1, indentAmt + INDENT_SIZE);",
          "14139:       PrintPnodeListWIndent(pnode->sxUni.pnode1, indentAmt + INDENT_SIZE);",
          "14144:       PrintPnodeListWIndent(pnode->sxExportDefault.pnodeExpr, indentAmt + INDENT_SIZE);",
          "",
          "[Added Lines]",
          "14064:       PrintPnodeWIndent(pnode->AsParseNodeCase()->pnodeExpr,indentAmt+INDENT_SIZE);",
          "14065:       PrintPnodeWIndent(pnode->AsParseNodeCase()->pnodeBody,indentAmt+INDENT_SIZE);",
          "14069:       PrintPnodeWIndent(pnode->AsParseNodeTryFinally()->pnodeTry,indentAmt);",
          "14070:       PrintPnodeWIndent(pnode->AsParseNodeTryFinally()->pnodeFinally,indentAmt);",
          "14075:       PrintPnodeWIndent(pnode->AsParseNodeFinally()->pnodeBody,indentAmt+INDENT_SIZE);",
          "14082:       PrintPnodeWIndent(pnode->AsParseNodeCatch()->pnodeParam,indentAmt+INDENT_SIZE);",
          "14085:       PrintPnodeWIndent(pnode->AsParseNodeCatch()->pnodeBody,indentAmt+INDENT_SIZE);",
          "14089:       PrintPnodeWIndent(pnode->AsParseNodeTryCatch()->pnodeTry,indentAmt);",
          "14090:       PrintPnodeWIndent(pnode->AsParseNodeTryCatch()->pnodeCatch,indentAmt);",
          "14096:       PrintPnodeWIndent(pnode->AsParseNodeTry()->pnodeBody,indentAmt+INDENT_SIZE);",
          "14102:       PrintPnodeWIndent(pnode->AsParseNodeUni()->pnode1,indentAmt+INDENT_SIZE);",
          "14107:       Output::Print(_u(\"class %s\"), pnode->AsParseNodeClass()->pnodeName->AsParseNodeVar()->pid->Psz());",
          "14108:       if (pnode->AsParseNodeClass()->pnodeExtends != nullptr)",
          "14111:           PrintPnodeWIndent(pnode->AsParseNodeClass()->pnodeExtends, 0);",
          "14117:       PrintPnodeWIndent(pnode->AsParseNodeClass()->pnodeConstructor,   indentAmt + INDENT_SIZE);",
          "14118:       PrintPnodeWIndent(pnode->AsParseNodeClass()->pnodeMembers,       indentAmt + INDENT_SIZE);",
          "14119:       PrintPnodeWIndent(pnode->AsParseNodeClass()->pnodeStaticMembers, indentAmt + INDENT_SIZE);",
          "14124:       PrintPnodeListWIndent(pnode->AsParseNodeStrTemplate()->pnodeSubstitutionExpressions, indentAmt + INDENT_SIZE);",
          "14129:       PrintPnodeListWIndent(pnode->AsParseNodeUni()->pnode1, indentAmt + INDENT_SIZE);",
          "14135:       PrintPnodeListWIndent(pnode->AsParseNodeUni()->pnode1, indentAmt + INDENT_SIZE);",
          "14140:       PrintPnodeListWIndent(pnode->AsParseNodeUni()->pnode1, indentAmt + INDENT_SIZE);",
          "14145:       PrintPnodeListWIndent(pnode->AsParseNodeExportDefault()->pnodeExpr, indentAmt + INDENT_SIZE);",
          "",
          "---------------",
          "--- Hunk 323 ---",
          "[Context before]",
          "14152: void PrintPnodeListWIndent(ParseNode *pnode,int indentAmt) {",
          "14153:     if (pnode!=NULL) {",
          "14154:         while(pnode->nop==knopList) {",
          "14157:         }",
          "14158:         PrintPnodeWIndent(pnode,indentAmt);",
          "14159:     }",
          "",
          "[Removed Lines]",
          "14155:             PrintPnodeWIndent(pnode->sxBin.pnode1,indentAmt);",
          "14156:             pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "14156:             PrintPnodeWIndent(pnode->AsParseNodeBin()->pnode1,indentAmt);",
          "14157:             pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 324 ---",
          "[Context before]",
          "14163: {",
          "14164:     for (ParseNode *pnode = pnodeArgs; pnode != nullptr; pnode = pnode->GetFormalNext())",
          "14165:     {",
          "14167:     }",
          "14168: }",
          "",
          "[Removed Lines]",
          "14166:         PrintPnodeWIndent(pnode->nop == knopParamPattern ? pnode->sxParamPattern.pnode1 : pnode, indentAmt);",
          "",
          "[Added Lines]",
          "14167:         PrintPnodeWIndent(pnode->nop == knopParamPattern ? pnode->AsParseNodeParamPattern()->pnode1 : pnode, indentAmt);",
          "",
          "---------------",
          "--- Hunk 325 ---",
          "[Context before]",
          "14178:     case knopFncDecl:",
          "14179:     case knopProg:",
          "14180:         LPCOLESTR name = Js::Constants::AnonymousFunction;",
          "14182:         {",
          "14184:         }",
          "14187:         Output::Print(_u(\"hasArguments: %s callsEval:%s childCallsEval:%s HasReferenceableBuiltInArguments:%s ArgumentsObjectEscapes:%s HasWith:%s HasOnlyThis:%s \\n\"),",
          "14196:         {",
          "14198:         }",
          "14199:         break;",
          "14200:     }",
          "",
          "[Removed Lines]",
          "14181:         if(this->sxFnc.pnodeName)",
          "14183:             name = this->sxFnc.pnodeName->sxVar.pid->Psz();",
          "14186:         Output::Print(_u(\"%s (%d) [%d, %d]:\\n\"), name, this->sxFnc.functionId, this->sxFnc.lineNumber, this->sxFnc.columnNumber);",
          "14188:             IsTrueOrFalse(this->sxFnc.HasHeapArguments()),",
          "14189:             IsTrueOrFalse(this->sxFnc.CallsEval()),",
          "14190:             IsTrueOrFalse(this->sxFnc.ChildCallsEval()),",
          "14191:             IsTrueOrFalse(this->sxFnc.HasReferenceableBuiltInArguments()),",
          "14192:             IsTrueOrFalse(this->sxFnc.GetArgumentsObjectEscapes()),",
          "14193:             IsTrueOrFalse(this->sxFnc.HasWithStmt()),",
          "14194:             IsTrueOrFalse(this->sxFnc.HasOnlyThisStmts()));",
          "14195:         if(this->sxFnc.funcInfo)",
          "14197:             this->sxFnc.funcInfo->Dump();",
          "",
          "[Added Lines]",
          "14182:         if(this->AsParseNodeFnc()->pnodeName)",
          "14184:             name = this->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid->Psz();",
          "14187:         Output::Print(_u(\"%s (%d) [%d, %d]:\\n\"), name, this->AsParseNodeFnc()->functionId, this->AsParseNodeFnc()->lineNumber, this->AsParseNodeFnc()->columnNumber);",
          "14189:             IsTrueOrFalse(this->AsParseNodeFnc()->HasHeapArguments()),",
          "14190:             IsTrueOrFalse(this->AsParseNodeFnc()->CallsEval()),",
          "14191:             IsTrueOrFalse(this->AsParseNodeFnc()->ChildCallsEval()),",
          "14192:             IsTrueOrFalse(this->AsParseNodeFnc()->HasReferenceableBuiltInArguments()),",
          "14193:             IsTrueOrFalse(this->AsParseNodeFnc()->GetArgumentsObjectEscapes()),",
          "14194:             IsTrueOrFalse(this->AsParseNodeFnc()->HasWithStmt()),",
          "14195:             IsTrueOrFalse(this->AsParseNodeFnc()->HasOnlyThisStmts()));",
          "14196:         if(this->AsParseNodeFnc()->funcInfo)",
          "14198:             this->AsParseNodeFnc()->funcInfo->Dump();",
          "",
          "---------------",
          "--- Hunk 326 ---",
          "[Context before]",
          "14205: {",
          "14206:     Assert(pnodeFnc->nop == knopFncDecl);",
          "14209:     if (nestedCount == 0)",
          "14210:     {",
          "14211:         return nullptr;",
          "14212:     }",
          "14215:     {",
          "14217:     }",
          "14219:     DeferredFunctionStub *deferredStubs = RecyclerNewArray(recycler, DeferredFunctionStub, nestedCount);",
          "14220:     uint i = 0;",
          "14223:     Assert(pnodeBlock != nullptr",
          "14224:         && pnodeBlock->nop == knopBlock",
          "14229:     {",
          "14231:         if (pnodeChild->nop != knopFncDecl)",
          "14232:         {",
          "14234:             Assert(pnodeChild->nop == knopBlock",
          "14238:             continue;",
          "14239:         }",
          "14240:         AssertOrFailFast(i < nestedCount);",
          "14243:         {",
          "14246:             return nullptr;",
          "14247:         }",
          "14250:         {",
          "14251:             ++i;",
          "14253:             continue;",
          "14254:         }",
          "14256:         AnalysisAssertOrFailFast(i < nestedCount);",
          "14261:         deferredStubs[i].deferredStubs = BuildDeferredStubTree(pnodeChild, recycler);",
          "14262:         deferredStubs[i].ichMin = pnodeChild->ichMin;",
          "14263:         ++i;",
          "14265:     }",
          "14267:     return deferredStubs;",
          "",
          "[Removed Lines]",
          "14208:     uint nestedCount = pnodeFnc->sxFnc.nestedCount;",
          "14214:     if (pnodeFnc->sxFnc.deferredStub)",
          "14216:         return pnodeFnc->sxFnc.deferredStub;",
          "14222:     ParseNode *pnodeBlock = pnodeFnc->sxFnc.pnodeBodyScope;",
          "14225:         && (pnodeBlock->sxBlock.blockType == PnodeBlockType::Function",
          "14226:             || pnodeBlock->sxBlock.blockType == PnodeBlockType::Parameter));",
          "14228:     for (ParseNode *pnodeChild = pnodeBlock->sxBlock.pnodeScopes; pnodeChild != nullptr;)",
          "14235:                 && (pnodeBlock->sxBlock.blockType == PnodeBlockType::Parameter",
          "14236:                     || pnodeChild->sxBlock.blockType == PnodeBlockType::Function));",
          "14237:             pnodeChild = pnodeChild->sxBlock.pnodeNext;",
          "14242:         if (pnodeChild->sxFnc.pnodeBody != nullptr)",
          "14249:         if (pnodeChild->sxFnc.IsGeneratedDefault())",
          "14252:             pnodeChild = pnodeChild->sxFnc.pnodeNext;",
          "14258:         deferredStubs[i].fncFlags = pnodeChild->sxFnc.fncFlags;",
          "14259:         deferredStubs[i].nestedCount = pnodeChild->sxFnc.nestedCount;",
          "14260:         deferredStubs[i].restorePoint = *pnodeChild->sxFnc.pRestorePoint;",
          "14264:         pnodeChild = pnodeChild->sxFnc.pnodeNext;",
          "",
          "[Added Lines]",
          "14209:     uint nestedCount = pnodeFnc->AsParseNodeFnc()->nestedCount;",
          "14215:     if (pnodeFnc->AsParseNodeFnc()->deferredStub)",
          "14217:         return pnodeFnc->AsParseNodeFnc()->deferredStub;",
          "14223:     ParseNode *pnodeBlock = pnodeFnc->AsParseNodeFnc()->pnodeBodyScope;",
          "14226:         && (pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Function",
          "14227:             || pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Parameter));",
          "14229:     for (ParseNode *pnodeChild = pnodeBlock->AsParseNodeBlock()->pnodeScopes; pnodeChild != nullptr;)",
          "14236:                 && (pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Parameter",
          "14237:                     || pnodeChild->AsParseNodeBlock()->blockType == PnodeBlockType::Function));",
          "14238:             pnodeChild = pnodeChild->AsParseNodeBlock()->pnodeNext;",
          "14243:         if (pnodeChild->AsParseNodeFnc()->pnodeBody != nullptr)",
          "14250:         if (pnodeChild->AsParseNodeFnc()->IsGeneratedDefault())",
          "14253:             pnodeChild = pnodeChild->AsParseNodeFnc()->pnodeNext;",
          "14259:         deferredStubs[i].fncFlags = pnodeChild->AsParseNodeFnc()->fncFlags;",
          "14260:         deferredStubs[i].nestedCount = pnodeChild->AsParseNodeFnc()->nestedCount;",
          "14261:         deferredStubs[i].restorePoint = *pnodeChild->AsParseNodeFnc()->pRestorePoint;",
          "14265:         pnodeChild = pnodeChild->AsParseNodeFnc()->pnodeNext;",
          "",
          "---------------"
        ],
        "lib/Parser/Parse.h||lib/Parser/Parse.h": [
          "File: lib/Parser/Parse.h -> lib/Parser/Parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:     ParseNodePtr CreateNameNode(IdentPtr pid)",
          "281:     {",
          "282:         ParseNodePtr pnode = CreateNode(knopName);",
          "286:         return pnode;",
          "287:     }",
          "288:     ParseNodePtr CreateSpecialNameNode(IdentPtr pid)",
          "",
          "[Removed Lines]",
          "283:         pnode->sxPid.pid = pid;",
          "284:         pnode->sxPid.sym=NULL;",
          "285:         pnode->sxPid.symRef=NULL;",
          "",
          "[Added Lines]",
          "283:         pnode->AsParseNodePid()->pid = pid;",
          "284:         pnode->AsParseNodePid()->sym=NULL;",
          "285:         pnode->AsParseNodePid()->symRef=NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:         pnode->nop = knopName;",
          "297:         pnode->isSpecialName = true;",
          "300:         return pnode;",
          "301:     }",
          "302:     ParseNodePtr CreateBlockNode(PnodeBlockType blockType = PnodeBlockType::Regular)",
          "",
          "[Removed Lines]",
          "294:         pnode->sxPid.pid = pid;",
          "295:         pnode->sxPid.sym = NULL;",
          "296:         pnode->sxPid.symRef = NULL;",
          "298:         pnode->sxSpecialName.isThis = false;",
          "299:         pnode->sxSpecialName.isSuper = false;",
          "",
          "[Added Lines]",
          "294:         pnode->AsParseNodePid()->pid = pid;",
          "295:         pnode->AsParseNodePid()->sym = NULL;",
          "296:         pnode->AsParseNodePid()->symRef = NULL;",
          "298:         pnode->AsParseNodeSpecialName()->isThis = false;",
          "299:         pnode->AsParseNodeSpecialName()->isSuper = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "509:     {",
          "510:         if (buildAST)",
          "511:         {",
          "515:             pStmt->pnodeStmt = pnode;",
          "516:         }",
          "",
          "[Removed Lines]",
          "512:             pnode->sxStmt.grfnop = 0;",
          "513:             pnode->sxStmt.pnodeOuter = (NULL == m_pstmtCur) ? NULL : m_pstmtCur->pnodeStmt;",
          "",
          "[Added Lines]",
          "512:             pnode->AsParseNodeStmt()->grfnop = 0;",
          "513:             pnode->AsParseNodeStmt()->pnodeOuter = (NULL == m_pstmtCur) ? NULL : m_pstmtCur->pnodeStmt;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "538:         if (this->GetCurrentFunctionNode())",
          "539:         {",
          "540:             ParseNodePtr pnodeFunc = GetCurrentFunctionNode();",
          "542:         }",
          "543:         ParseNode *pnodeBlock = GetCurrentBlock();",
          "544:         if (pnodeBlock != NULL)",
          "545:         {",
          "547:             PushDynamicBlock();",
          "548:         }",
          "549:     }",
          "",
          "[Removed Lines]",
          "541:             pnodeFunc->sxFnc.SetCallsEval(true);",
          "546:             pnodeBlock->sxBlock.SetCallsEval(true);",
          "",
          "[Added Lines]",
          "541:             pnodeFunc->AsParseNodeFnc()->SetCallsEval(true);",
          "546:             pnodeBlock->AsParseNodeBlock()->SetCallsEval(true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "613:         {",
          "614:             if ((*current)->nop == knopList)",
          "615:             {",
          "620:             }",
          "621:             else",
          "622:             {",
          "",
          "[Removed Lines]",
          "616:                 handler(&(*current)->sxBin.pnode1);",
          "619:                 current = &(*current)->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "616:                 handler(&(*current)->AsParseNodeBin()->pnode1);",
          "619:                 current = &(*current)->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "642:         ParseNodePtr bindIdentNode = elementNode;",
          "643:         if (bindIdentNode->nop == knopAsg)",
          "644:         {",
          "646:         }",
          "647:         else if (bindIdentNode->nop == knopEllipsis)",
          "648:         {",
          "650:         }",
          "652:         if (bindIdentNode->IsPattern())",
          "",
          "[Removed Lines]",
          "645:             bindIdentNode = bindIdentNode->sxBin.pnode1;",
          "649:             bindIdentNode = bindIdentNode->sxUni.pnode1;",
          "",
          "[Added Lines]",
          "645:             bindIdentNode = bindIdentNode->AsParseNodeBin()->pnode1;",
          "649:             bindIdentNode = bindIdentNode->AsParseNodeUni()->pnode1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "668:     {",
          "669:         if (patternNode->nop == knopAsg)",
          "670:         {",
          "672:         }",
          "674:         Assert(patternNode->IsPattern());",
          "675:         if (patternNode->nop == knopArrayPattern)",
          "676:         {",
          "678:                 MapBindIdentifierFromElement(item, handler);",
          "679:             });",
          "680:         }",
          "681:         else",
          "682:         {",
          "684:                 Assert(item->nop == knopObjectPatternMember);",
          "686:             });",
          "687:         }",
          "688:     }",
          "",
          "[Removed Lines]",
          "671:             patternNode = patternNode->sxBin.pnode1;",
          "677:             ForEachItemInList(patternNode->sxArrLit.pnode1, [&](ParseNodePtr item) {",
          "683:             ForEachItemInList(patternNode->sxUni.pnode1, [&](ParseNodePtr item) {",
          "685:                 MapBindIdentifierFromElement(item->sxBin.pnode2, handler);",
          "",
          "[Added Lines]",
          "671:             patternNode = patternNode->AsParseNodeBin()->pnode1;",
          "677:             ForEachItemInList(patternNode->AsParseNodeArrLit()->pnode1, [&](ParseNodePtr item) {",
          "683:             ForEachItemInList(patternNode->AsParseNodeUni()->pnode1, [&](ParseNodePtr item) {",
          "685:                 MapBindIdentifierFromElement(item->AsParseNodeBin()->pnode2, handler);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "906:     BOOL NodeIsSuperName(ParseNodePtr pnode);",
          "907:     BOOL IsJSONValid(ParseNodePtr pnodeExpr)",
          "908:     {",
          "910:         if (knopNeg == pnodeExpr->nop)",
          "911:         {",
          "912:             return (knopInt == jnop ||  knopFlt == jnop);",
          "",
          "[Removed Lines]",
          "909:         OpCode jnop = (knopNeg == pnodeExpr->nop) ? pnodeExpr->sxUni.pnode1->nop : pnodeExpr->nop;",
          "",
          "[Added Lines]",
          "909:         OpCode jnop = (knopNeg == pnodeExpr->nop) ? pnodeExpr->AsParseNodeUni()->pnode1->nop : pnodeExpr->nop;",
          "",
          "---------------"
        ],
        "lib/Parser/ParseTreeComparer.h||lib/Parser/ParseTreeComparer.h": [
          "File: lib/Parser/ParseTreeComparer.h -> lib/Parser/ParseTreeComparer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:             {",
          "174:             case knopName:",
          "175:             case knopStr:",
          "178:             case knopInt:",
          "181:             case knopFlt:",
          "185:                 break;",
          "186:             }",
          "",
          "[Removed Lines]",
          "176:                 return ComputeDistance(left->sxPid.pid, right->sxPid.pid);",
          "179:                 return left->sxInt.lw == right->sxInt.lw ? ExactMatchDistance : 1.0;",
          "182:                 return left->sxFlt.dbl == right->sxFlt.dbl ? ExactMatchDistance : 1.0;",
          "184:             case knopRegExp: //TODO: sxPid.regexPattern",
          "",
          "[Added Lines]",
          "176:                 return ComputeDistance(left->AsParseNodePid()->pid, right->AsParseNodePid()->pid);",
          "179:                 return left->AsParseNodeInt()->lw == right->AsParseNodeInt()->lw ? ExactMatchDistance : 1.0;",
          "182:                 return left->AsParseNodeFloat()->dbl == right->AsParseNodeFloat()->dbl ? ExactMatchDistance : 1.0;",
          "184:             case knopRegExp: //TODO: AsParseNodePid()->regexPattern",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:         static bool IsToken(ParseNode* pnode)",
          "382:         {",
          "385:                 && pnode->nop != knopFncDecl",
          "386:                 && pnode->nop != knopClassDecl;",
          "387:         }",
          "",
          "[Removed Lines]",
          "384:             return (ParseNode::Grfnop(pnode->nop) & fnopLeaf)",
          "",
          "[Added Lines]",
          "384:             return (pnode->Grfnop() & fnopLeaf)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:             {",
          "408:             case knopName:",
          "409:             case knopStr:",
          "412:             case knopInt:",
          "415:             case knopFlt:",
          "418:             case knopRegExp:",
          "420:                 break;",
          "421:             }",
          "",
          "[Removed Lines]",
          "410:                 return AreEquivalent(left->sxPid.pid, right->sxPid.pid);",
          "413:                 return left->sxInt.lw == right->sxInt.lw;",
          "416:                 return left->sxFlt.dbl == right->sxFlt.dbl;",
          "",
          "[Added Lines]",
          "410:                 return AreEquivalent(left->AsParseNodePid()->pid, right->AsParseNodePid()->pid);",
          "413:                 return left->AsParseNodeInt()->lw == right->AsParseNodeInt()->lw;",
          "416:                 return left->AsParseNodeFloat()->dbl == right->AsParseNodeFloat()->dbl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434:             switch (left->nop)",
          "435:             {",
          "436:             case knopVarDecl:",
          "439:             case knopFncDecl:",
          "443:             }",
          "",
          "[Removed Lines]",
          "437:                 return AreEquivalent(left->sxVar.pid, right->sxVar.pid);",
          "440:                 return AreEquivalent(left->sxFnc.pid, right->sxFnc.pid);",
          "",
          "[Added Lines]",
          "437:                 return AreEquivalent(left->AsParseNodeVar()->pid, right->AsParseNodeVar()->pid);",
          "440:                 return AreEquivalent(left->AsParseNodeFnc()->pid, right->AsParseNodeFnc()->pid);",
          "",
          "---------------"
        ],
        "lib/Parser/ParserCommon.h||lib/Parser/ParserCommon.h": [
          "File: lib/Parser/ParserCommon.h -> lib/Parser/ParserCommon.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #endif",
          "35: };",
          "38: typedef ParseNode *ParseNodePtr;",
          "40: struct Ident;",
          "",
          "[Removed Lines]",
          "37: struct ParseNode;",
          "",
          "[Added Lines]",
          "37: class ParseNode;",
          "",
          "---------------"
        ],
        "lib/Parser/pnodewalk.h||lib/Parser/pnodewalk.h": [
          "File: lib/Parser/pnodewalk.h -> lib/Parser/pnodewalk.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:             while ((current->nop == knopList && (current->grfpn & PNodeFlags::fpnDclList) == 0) ||",
          "64:                    (current->nop == pnode->nop && (current->grfpn & pnode->grfpn & PNodeFlags::fpnDclList)))",
          "65:             {",
          "68:                 first = false;",
          "69:                 if (!ContinueWalk(result)) return result;",
          "71:                 current = *ppnode;",
          "72:             }",
          "73:             WalkReference(ppnode, context);",
          "",
          "[Removed Lines]",
          "66:                 WalkReference(&current->sxBin.pnode1, context);",
          "67:                 result = first ? WalkFirstChild(current->sxBin.pnode1, context) : WalkNthChild(pnodeparent, current->sxBin.pnode1, context);",
          "70:                 ppnode = &current->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "66:                 WalkReference(&current->AsParseNodeBin()->pnode1, context);",
          "67:                 result = first ? WalkFirstChild(current->AsParseNodeBin()->pnode1, context) : WalkNthChild(pnodeparent, current->AsParseNodeBin()->pnode1, context);",
          "70:                 ppnode = &current->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     ResultType WalkPreUnary(ParseNode *pnode, Context context)",
          "87:     {",
          "88:         ResultType result = WalkNode(pnode, context);",
          "90:         return result;",
          "91:     }",
          "93:     ResultType WalkPostUnary(ParseNode *pnode, Context context)",
          "94:     {",
          "96:         if (ContinueWalk(result)) result = WalkNode(pnode, context);",
          "97:         return result;",
          "98:     }",
          "100:     ResultType WalkBinary(ParseNode *pnode, Context context)",
          "101:     {",
          "103:         if (ContinueWalk(result))",
          "104:         {",
          "105:             result = WalkNode(pnode, context);",
          "107:         }",
          "108:         return result;",
          "109:     }",
          "111:     ResultType WalkTernary(ParseNode *pnode, Context context)",
          "112:     {",
          "114:         if (ContinueWalk(result))",
          "115:         {",
          "116:             result = WalkNode(pnode, context);",
          "117:             if (ContinueWalk(result))",
          "118:             {",
          "121:             }",
          "122:         }",
          "123:         return result;",
          "",
          "[Removed Lines]",
          "89:         if (ContinueWalk(result) && pnode->sxUni.pnode1) result = WalkFirstChild(pnode->sxUni.pnode1, context);",
          "95:         ResultType result = WalkFirstChild(pnode->sxUni.pnode1, context);",
          "102:         ResultType result = WalkFirstChild(pnode->sxBin.pnode1, context);",
          "106:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->sxBin.pnode2, context);",
          "113:         ResultType result = WalkFirstChild(pnode->sxTri.pnode1, context);",
          "119:                 result = WalkSecondChild(pnode->sxTri.pnode2, context);",
          "120:                 if (ContinueWalk(result)) result = WalkNthChild(pnode, pnode->sxTri.pnode3, context);",
          "",
          "[Added Lines]",
          "89:         if (ContinueWalk(result) && pnode->AsParseNodeUni()->pnode1) result = WalkFirstChild(pnode->AsParseNodeUni()->pnode1, context);",
          "95:         ResultType result = WalkFirstChild(pnode->AsParseNodeUni()->pnode1, context);",
          "102:         ResultType result = WalkFirstChild(pnode->AsParseNodeBin()->pnode1, context);",
          "106:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->AsParseNodeBin()->pnode2, context);",
          "113:         ResultType result = WalkFirstChild(pnode->AsParseNodeTri()->pnode1, context);",
          "119:                 result = WalkSecondChild(pnode->AsParseNodeTri()->pnode2, context);",
          "120:                 if (ContinueWalk(result)) result = WalkNthChild(pnode, pnode->AsParseNodeTri()->pnode3, context);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:     ResultType WalkCall(ParseNode *pnode, Context context)",
          "127:     {",
          "129:         if (ContinueWalk(result))",
          "130:         {",
          "131:             result = WalkNode(pnode, context);",
          "133:         }",
          "134:         return result;",
          "135:     }",
          "",
          "[Removed Lines]",
          "128:         ResultType result = WalkFirstChild(pnode->sxBin.pnode1, context);",
          "132:             if (ContinueWalk(result)) result = WalkList(pnode, pnode->sxBin.pnode2, context);",
          "",
          "[Added Lines]",
          "128:         ResultType result = WalkFirstChild(pnode->AsParseNodeCall()->pnodeTarget, context);",
          "132:             if (ContinueWalk(result)) result = WalkList(pnode, pnode->AsParseNodeCall()->pnodeArgs, context);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:     {",
          "139:         ResultType result;",
          "142:         {",
          "144:             {",
          "147:             }",
          "148:             else",
          "149:             {",
          "151:                 if (ContinueWalk(result))",
          "152:                 {",
          "154:                 }",
          "155:             }",
          "156:         }",
          "",
          "[Removed Lines]",
          "141:         if (!pnode->sxStrTemplate.isTaggedTemplate)",
          "143:             if (pnode->sxStrTemplate.pnodeSubstitutionExpressions == nullptr)",
          "146:                 result = WalkNode(pnode->sxStrTemplate.pnodeStringLiterals, context);",
          "150:                 result = WalkList(pnode, pnode->sxStrTemplate.pnodeSubstitutionExpressions, context);",
          "153:                     result = WalkList(pnode, pnode->sxStrTemplate.pnodeStringLiterals, context);",
          "",
          "[Added Lines]",
          "141:         if (!pnode->AsParseNodeStrTemplate()->isTaggedTemplate)",
          "143:             if (pnode->AsParseNodeStrTemplate()->pnodeSubstitutionExpressions == nullptr)",
          "146:                 result = WalkNode(pnode->AsParseNodeStrTemplate()->pnodeStringLiterals, context);",
          "150:                 result = WalkList(pnode, pnode->AsParseNodeStrTemplate()->pnodeSubstitutionExpressions, context);",
          "153:                     result = WalkList(pnode, pnode->AsParseNodeStrTemplate()->pnodeStringLiterals, context);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:     ResultType WalkVar(ParseNode *pnode, Context context)",
          "167:     {",
          "168:         ResultType result = WalkNode(pnode, context);",
          "170:         return result;",
          "171:     }",
          "",
          "[Removed Lines]",
          "169:         if (ContinueWalk(result) && pnode->sxVar.pnodeInit) result = WalkFirstChild(pnode->sxVar.pnodeInit, context);",
          "",
          "[Added Lines]",
          "169:         if (ContinueWalk(result) && pnode->AsParseNodeVar()->pnodeInit) result = WalkFirstChild(pnode->AsParseNodeVar()->pnodeInit, context);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "174:     {",
          "175:         ResultType result;",
          "178:         {",
          "180:             if (!ContinueWalk(result)) return result;",
          "181:         }",
          "184:         {",
          "186:             if (!ContinueWalk(result))  return result;",
          "187:         }",
          "189:         result = WalkNode(pnode, context);",
          "191:         return result;",
          "192:     }",
          "194:     ResultType WalkProg(ParseNode *pnode, Context context)",
          "195:     {",
          "196:         ResultType result = WalkNode(pnode, context);",
          "198:         return result;",
          "199:     }",
          "201:     ResultType WalkFor(ParseNode *pnode, Context context)",
          "202:     {",
          "204:         if (ContinueWalk(result))",
          "205:         {",
          "207:             if (ContinueWalk(result))",
          "208:             {",
          "210:                 if (ContinueWalk(result))",
          "211:                 {",
          "212:                     result = WalkNode(pnode, context);",
          "213:                     if (ContinueWalk(result))",
          "214:                     {",
          "216:                     }",
          "217:                 }",
          "218:             }",
          "",
          "[Removed Lines]",
          "177:         for (ParseNode** argNode = &(pnode->sxFnc.pnodeParams); *argNode != nullptr; argNode = &((*argNode)->sxVar.pnodeNext))",
          "179:             result = *argNode == pnode->sxFnc.pnodeParams ? WalkFirstChild(*argNode, context) : WalkNthChild(pnode, *argNode, context);",
          "183:         if (pnode->sxFnc.pnodeRest != nullptr)",
          "185:             result = WalkSecondChild(pnode->sxFnc.pnodeRest, context);",
          "190:         if (ContinueWalk(result)) result = WalkNthChild(pnode, pnode->sxFnc.pnodeBody, context);",
          "197:         if (ContinueWalk(result)) result = WalkList(pnode, pnode->sxFnc.pnodeBody, context);",
          "203:         ResultType result = WalkFirstChild(pnode->sxFor.pnodeInit, context);",
          "206:             result = WalkNthChild(pnode, pnode->sxFor.pnodeCond, context);",
          "209:                 result = WalkNthChild(pnode, pnode->sxFor.pnodeIncr, context);",
          "215:                         result = WalkSecondChild(pnode->sxFor.pnodeBody, context);",
          "",
          "[Added Lines]",
          "177:         for (ParseNode** argNode = &(pnode->AsParseNodeFnc()->pnodeParams); *argNode != nullptr; argNode = &((*argNode)->AsParseNodeVar()->pnodeNext))",
          "179:             result = *argNode == pnode->AsParseNodeFnc()->pnodeParams ? WalkFirstChild(*argNode, context) : WalkNthChild(pnode, *argNode, context);",
          "183:         if (pnode->AsParseNodeFnc()->pnodeRest != nullptr)",
          "185:             result = WalkSecondChild(pnode->AsParseNodeFnc()->pnodeRest, context);",
          "190:         if (ContinueWalk(result)) result = WalkNthChild(pnode, pnode->AsParseNodeFnc()->pnodeBody, context);",
          "197:         if (ContinueWalk(result)) result = WalkList(pnode, pnode->AsParseNodeFnc()->pnodeBody, context);",
          "203:         ResultType result = WalkFirstChild(pnode->AsParseNodeFor()->pnodeInit, context);",
          "206:             result = WalkNthChild(pnode, pnode->AsParseNodeFor()->pnodeCond, context);",
          "209:                 result = WalkNthChild(pnode, pnode->AsParseNodeFor()->pnodeIncr, context);",
          "215:                         result = WalkSecondChild(pnode->AsParseNodeFor()->pnodeBody, context);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "223:     ResultType WalkIf(ParseNode *pnode, Context context)",
          "224:     {",
          "226:         if (ContinueWalk(result))",
          "227:         {",
          "228:             result = WalkNode(pnode, context);",
          "229:             if (ContinueWalk(result))",
          "230:             {",
          "234:             }",
          "235:         }",
          "236:         return result;",
          "",
          "[Removed Lines]",
          "225:         ResultType result = WalkFirstChild(pnode->sxIf.pnodeCond, context);",
          "231:                 result = WalkSecondChild(pnode->sxIf.pnodeTrue, context);",
          "232:                 if (ContinueWalk(result) && pnode->sxIf.pnodeFalse)",
          "233:                     result = WalkNthChild(pnode, pnode->sxIf.pnodeFalse, context);",
          "",
          "[Added Lines]",
          "225:         ResultType result = WalkFirstChild(pnode->AsParseNodeIf()->pnodeCond, context);",
          "231:                 result = WalkSecondChild(pnode->AsParseNodeIf()->pnodeTrue, context);",
          "232:                 if (ContinueWalk(result) && pnode->AsParseNodeIf()->pnodeFalse)",
          "233:                     result = WalkNthChild(pnode, pnode->AsParseNodeIf()->pnodeFalse, context);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "239:     ResultType WalkWhile(ParseNode *pnode, Context context)",
          "240:     {",
          "242:         if (ContinueWalk(result))",
          "243:         {",
          "244:             result = WalkNode(pnode, context);",
          "246:         }",
          "247:         return result;",
          "248:     }",
          "250:     ResultType WalkDoWhile(ParseNode *pnode, Context context)",
          "251:     {",
          "253:         if (ContinueWalk(result))",
          "254:         {",
          "255:             result = WalkNode(pnode, context);",
          "256:             if (ContinueWalk(result))",
          "257:             {",
          "259:             }",
          "260:         }",
          "261:         return result;",
          "",
          "[Removed Lines]",
          "241:         ResultType result = WalkFirstChild(pnode->sxWhile.pnodeCond, context);",
          "245:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->sxWhile.pnodeBody, context);",
          "252:         ResultType result = WalkFirstChild(pnode->sxWhile.pnodeBody, context);",
          "258:                 result = WalkSecondChild(pnode->sxWhile.pnodeCond, context);",
          "",
          "[Added Lines]",
          "241:         ResultType result = WalkFirstChild(pnode->AsParseNodeWhile()->pnodeCond, context);",
          "245:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->AsParseNodeWhile()->pnodeBody, context);",
          "252:         ResultType result = WalkFirstChild(pnode->AsParseNodeWhile()->pnodeBody, context);",
          "258:                 result = WalkSecondChild(pnode->AsParseNodeWhile()->pnodeCond, context);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "264:     ResultType WalkForInOrForOf(ParseNode *pnode, Context context)",
          "265:     {",
          "267:         if (ContinueWalk(result))",
          "268:         {",
          "270:             if (ContinueWalk(result))",
          "271:             {",
          "272:                 result = WalkNode(pnode, context);",
          "274:             }",
          "275:         }",
          "276:         return result;",
          "",
          "[Removed Lines]",
          "266:         ResultType result = WalkFirstChild(pnode->sxForInOrForOf.pnodeLval, context);",
          "269:             result = WalkNthChild(pnode, pnode->sxForInOrForOf.pnodeObj, context);",
          "273:                 if (ContinueWalk(result)) result = WalkSecondChild(pnode->sxForInOrForOf.pnodeBody, context);",
          "",
          "[Added Lines]",
          "266:         ResultType result = WalkFirstChild(pnode->AsParseNodeForInOrForOf()->pnodeLval, context);",
          "269:             result = WalkNthChild(pnode, pnode->AsParseNodeForInOrForOf()->pnodeObj, context);",
          "273:                 if (ContinueWalk(result)) result = WalkSecondChild(pnode->AsParseNodeForInOrForOf()->pnodeBody, context);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "279:     ResultType WalkReturn(ParseNode *pnode, Context context)",
          "280:     {",
          "281:         ResultType result = WalkNode(pnode, context);",
          "283:         return result;",
          "284:     }",
          "286:     ResultType WalkBlock(ParseNode *pnode, Context context)",
          "287:     {",
          "288:         ResultType result = WalkNode(pnode, context);",
          "291:         return result;",
          "292:     }",
          "294:     ResultType WalkWith(ParseNode *pnode, Context context)",
          "295:     {",
          "297:         if (ContinueWalk(result))",
          "298:         {",
          "299:             result = WalkNode(pnode, context);",
          "300:             if (ContinueWalk(result))",
          "301:             {",
          "303:             }",
          "304:         }",
          "305:         return result;",
          "",
          "[Removed Lines]",
          "282:         if (ContinueWalk(result) && pnode->sxReturn.pnodeExpr) result = WalkFirstChild(pnode->sxReturn.pnodeExpr, context);",
          "289:         if (ContinueWalk(result) && pnode->sxBlock.pnodeStmt)",
          "290:             result = WalkList(pnode, pnode->sxBlock.pnodeStmt, context);",
          "296:         ResultType result = WalkFirstChild(pnode->sxWith.pnodeObj, context);",
          "302:                 result = WalkSecondChild(pnode->sxWith.pnodeBody, context);",
          "",
          "[Added Lines]",
          "282:         if (ContinueWalk(result) && pnode->AsParseNodeReturn()->pnodeExpr) result = WalkFirstChild(pnode->AsParseNodeReturn()->pnodeExpr, context);",
          "289:         if (ContinueWalk(result) && pnode->AsParseNodeBlock()->pnodeStmt)",
          "290:             result = WalkList(pnode, pnode->AsParseNodeBlock()->pnodeStmt, context);",
          "296:         ResultType result = WalkFirstChild(pnode->AsParseNodeWith()->pnodeObj, context);",
          "302:                 result = WalkSecondChild(pnode->AsParseNodeWith()->pnodeBody, context);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "308:     ResultType WalkSwitch(ParseNode *pnode, Context context)",
          "309:     {",
          "311:         if (ContinueWalk(result))",
          "312:         {",
          "314:             {",
          "316:                 if (!ContinueWalk(result)) return result;",
          "317:             }",
          "318:             result = WalkNode(pnode, context);",
          "",
          "[Removed Lines]",
          "310:         ResultType result = WalkFirstChild(pnode->sxSwitch.pnodeVal, context);",
          "313:             for (ParseNode** caseNode = &(pnode->sxSwitch.pnodeCases); *caseNode != nullptr; caseNode = &((*caseNode)->sxCase.pnodeNext))",
          "315:                 result = *caseNode == pnode->sxSwitch.pnodeCases ? WalkFirstChild(*caseNode, context) : WalkNthChild(pnode, *caseNode, context);",
          "",
          "[Added Lines]",
          "310:         ResultType result = WalkFirstChild(pnode->AsParseNodeSwitch()->pnodeVal, context);",
          "313:             for (ParseNode** caseNode = &(pnode->AsParseNodeSwitch()->pnodeCases); *caseNode != nullptr; caseNode = &((*caseNode)->AsParseNodeCase()->pnodeNext))",
          "315:                 result = *caseNode == pnode->AsParseNodeSwitch()->pnodeCases ? WalkFirstChild(*caseNode, context) : WalkNthChild(pnode, *caseNode, context);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "323:     ResultType WalkCase(ParseNode *pnode, Context context)",
          "324:     {",
          "326:         if (ContinueWalk(result))",
          "327:         {",
          "328:             result = WalkNode(pnode, context);",
          "330:         }",
          "331:         return result;",
          "332:     }",
          "334:     ResultType WalkTryFinally(ParseNode *pnode, Context context)",
          "335:     {",
          "337:         if (ContinueWalk(result))",
          "338:         {",
          "339:             result = WalkNode(pnode, context);",
          "341:         }",
          "342:         return result;",
          "343:     }",
          "",
          "[Removed Lines]",
          "325:         ResultType result = WalkFirstChild(pnode->sxCase.pnodeExpr, context);",
          "329:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->sxCase.pnodeBody, context);",
          "336:         ResultType result = WalkFirstChild(pnode->sxTryFinally.pnodeTry, context);",
          "340:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->sxTryFinally.pnodeFinally, context);",
          "",
          "[Added Lines]",
          "325:         ResultType result = WalkFirstChild(pnode->AsParseNodeCase()->pnodeExpr, context);",
          "329:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->AsParseNodeCase()->pnodeBody, context);",
          "336:         ResultType result = WalkFirstChild(pnode->AsParseNodeTryFinally()->pnodeTry, context);",
          "340:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->AsParseNodeTryFinally()->pnodeFinally, context);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "345:     ResultType WalkFinally(ParseNode *pnode, Context context)",
          "346:     {",
          "347:         ResultType result = WalkNode(pnode, context);",
          "349:         return result;",
          "350:     }",
          "352:     ResultType WalkCatch(ParseNode *pnode, Context context)",
          "353:     {",
          "355:         if (ContinueWalk(result))",
          "356:         {",
          "357:             result = WalkNode(pnode, context);",
          "359:         }",
          "360:         return result;",
          "361:     }",
          "363:     ResultType WalkTryCatch(ParseNode *pnode, Context context)",
          "364:     {",
          "366:         if (ContinueWalk(result))",
          "367:         {",
          "368:             result = WalkNode(pnode, context);",
          "370:         }",
          "371:         return result;",
          "372:     }",
          "",
          "[Removed Lines]",
          "348:         if (ContinueWalk(result)) result = WalkFirstChild(pnode->sxFinally.pnodeBody, context);",
          "354:         ResultType result = WalkFirstChild(pnode->sxCatch.pnodeParam, context);",
          "358:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->sxCatch.pnodeBody, context);",
          "365:         ResultType result = WalkFirstChild(pnode->sxTryCatch.pnodeTry, context);",
          "369:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->sxTryCatch.pnodeCatch, context);",
          "",
          "[Added Lines]",
          "348:         if (ContinueWalk(result)) result = WalkFirstChild(pnode->AsParseNodeFinally()->pnodeBody, context);",
          "354:         ResultType result = WalkFirstChild(pnode->AsParseNodeCatch()->pnodeParam, context);",
          "358:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->AsParseNodeCatch()->pnodeBody, context);",
          "365:         ResultType result = WalkFirstChild(pnode->AsParseNodeTryCatch()->pnodeTry, context);",
          "369:             if (ContinueWalk(result)) result = WalkSecondChild(pnode->AsParseNodeTryCatch()->pnodeCatch, context);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "374:     ResultType WalkTry(ParseNode *pnode, Context context)",
          "375:     {",
          "376:         ResultType result = WalkNode(pnode, context);",
          "378:         return result;",
          "379:     }",
          "",
          "[Removed Lines]",
          "377:         if (ContinueWalk(result)) result = WalkFirstChild(pnode->sxTry.pnodeBody, context);",
          "",
          "[Added Lines]",
          "377:         if (ContinueWalk(result)) result = WalkFirstChild(pnode->AsParseNodeTry()->pnodeBody, context);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "384:         ResultType result = WalkNode(pnode, context);",
          "385:         if (!ContinueWalk(result)) return result;",
          "388:         if (!ContinueWalk(result)) return result;",
          "391:         if (!ContinueWalk(result)) return result;",
          "394:         if (!ContinueWalk(result)) return result;",
          "397:         return result;",
          "398:     }",
          "",
          "[Removed Lines]",
          "387:         result = WalkFirstChild(pnode->sxClass.pnodeExtends, context);",
          "390:         result = WalkNthChild(pnode, pnode->sxClass.pnodeConstructor, context);",
          "393:         result = WalkList(pnode, pnode->sxClass.pnodeMembers, context);",
          "396:         result = WalkList(pnode, pnode->sxClass.pnodeStaticMembers, context);",
          "",
          "[Added Lines]",
          "387:         result = WalkFirstChild(pnode->AsParseNodeClass()->pnodeExtends, context);",
          "390:         result = WalkNthChild(pnode, pnode->AsParseNodeClass()->pnodeConstructor, context);",
          "393:         result = WalkList(pnode, pnode->AsParseNodeClass()->pnodeMembers, context);",
          "396:         result = WalkList(pnode, pnode->AsParseNodeClass()->pnodeStaticMembers, context);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "419:         case knopCall:",
          "420:         case knopNew:",
          "422:             return WalkCall(pnode, context);",
          "",
          "[Removed Lines]",
          "421:         case knopIndex:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "520:             return WalkClass(pnode, context);",
          "522:         case knopExportDefault:",
          "525:         default:",
          "526:         {",
          "",
          "[Removed Lines]",
          "523:             return Walk(pnode->sxExportDefault.pnodeExpr, context);",
          "",
          "[Added Lines]",
          "521:             return Walk(pnode->AsParseNodeExportDefault()->pnodeExpr, context);",
          "",
          "---------------"
        ],
        "lib/Parser/ptree.cpp||lib/Parser/ptree.cpp": [
          "File: lib/Parser/ptree.cpp -> lib/Parser/ptree.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include \"ParserPch.h\"",
          "7: ParseNodeUni * ParseNode::AsParseNodeUni()",
          "8: {",
          "9:     Assert(((this->Grfnop() & fnopUni) && this->nop != knopParamPattern) || this->nop == knopThrow);",
          "10:     return reinterpret_cast<ParseNodeUni *>(this);",
          "11: }",
          "13: ParseNodeBin * ParseNode::AsParseNodeBin()",
          "14: {",
          "15:     Assert(((this->Grfnop() & fnopBin) && this->nop != knopQmark && this->nop != knopCall && this->nop != knopNew) || this->nop == knopList);",
          "16:     return reinterpret_cast<ParseNodeBin *>(this);",
          "17: }",
          "19: ParseNodeTri * ParseNode::AsParseNodeTri()",
          "20: {",
          "21:     Assert(this->nop == knopQmark);",
          "22:     return reinterpret_cast<ParseNodeTri *>(this);",
          "23: }",
          "25: ParseNodeInt * ParseNode::AsParseNodeInt()",
          "26: {",
          "27:     Assert(this->nop == knopInt);",
          "28:     return reinterpret_cast<ParseNodeInt *>(this);",
          "29: }",
          "31: ParseNodeFloat * ParseNode::AsParseNodeFloat()",
          "32: {",
          "33:     Assert(this->nop == knopFlt);",
          "34:     return reinterpret_cast<ParseNodeFloat *>(this);",
          "35: }",
          "37: ParseNodeVar * ParseNode::AsParseNodeVar()",
          "38: {",
          "39:     Assert(this->nop == knopVarDecl || this->nop == knopConstDecl || this->nop == knopLetDecl || this->nop == knopTemp);",
          "40:     return reinterpret_cast<ParseNodeVar *>(this);",
          "41: }",
          "43: ParseNodePid * ParseNode::AsParseNodePid()",
          "44: {",
          "45:     Assert(this->nop == knopName || this->nop == knopStr || this->nop == knopRegExp || this->nop == knopSpecialName);",
          "46:     return reinterpret_cast<ParseNodePid *>(this);",
          "47: }",
          "49: ParseNodeSpecialName * ParseNode::AsParseNodeSpecialName()",
          "50: {",
          "51:     Assert(this->nop == knopName && this->isSpecialName);",
          "52:     return reinterpret_cast<ParseNodeSpecialName *>(this);",
          "53: }",
          "55: ParseNodeExportDefault * ParseNode::AsParseNodeExportDefault()",
          "56: {",
          "57:     Assert(this->nop == knopExportDefault);",
          "58:     return reinterpret_cast<ParseNodeExportDefault *>(this);",
          "59: }",
          "61: ParseNodeStrTemplate * ParseNode::AsParseNodeStrTemplate()",
          "62: {",
          "63:     Assert(this->nop == knopStrTemplate);",
          "64:     return reinterpret_cast<ParseNodeStrTemplate *>(this);",
          "65: }",
          "67: ParseNodeSuperReference * ParseNode::AsParseNodeSuperReference()",
          "68: {",
          "69:     Assert(this->nop == knopDot || this->nop == knopIndex);",
          "70:     Assert(this->AsParseNodeBin()->pnode1 && this->AsParseNodeBin()->pnode1->isSpecialName && this->AsParseNodeBin()->pnode1->AsParseNodeSpecialName()->isSuper);",
          "71:     return reinterpret_cast<ParseNodeSuperReference*>(this);",
          "72: }",
          "74: ParseNodeArrLit * ParseNode::AsParseNodeArrLit()",
          "75: {",
          "76:     Assert(this->nop == knopArray || this->nop == knopArrayPattern);",
          "77:     return reinterpret_cast<ParseNodeArrLit*>(this);",
          "78: }",
          "80: ParseNodeCall * ParseNode::AsParseNodeCall()",
          "81: {",
          "82:     Assert(this->nop == knopCall || this->nop == knopNew);",
          "83:     return reinterpret_cast<ParseNodeCall*>(this);",
          "84: }",
          "86: ParseNodeSuperCall * ParseNode::AsParseNodeSuperCall()",
          "87: {",
          "88:     Assert(this->nop == knopCall && this->AsParseNodeCall()->isSuperCall);",
          "89:     return reinterpret_cast<ParseNodeSuperCall*>(this);",
          "90: }",
          "92: ParseNodeClass * ParseNode::AsParseNodeClass()",
          "93: {",
          "94:     Assert(this->nop == knopClassDecl);",
          "95:     return reinterpret_cast<ParseNodeClass*>(this);",
          "96: }",
          "98: ParseNodeParamPattern * ParseNode::AsParseNodeParamPattern()",
          "99: {",
          "100:     Assert(this->nop == knopParamPattern);",
          "101:     return reinterpret_cast<ParseNodeParamPattern*>(this);",
          "102: }",
          "104: ParseNodeStmt * ParseNode::AsParseNodeStmt()",
          "105: {",
          "106:     Assert(this->nop == knopBlock || this->nop == knopBreak || this->nop == knopContinue || this->nop == knopWith || this->nop == knopIf || this->nop == knopSwitch || this->nop == knopCase || this->nop == knopReturn",
          "107:         || this->nop == knopTryFinally || this->nop == knopTryCatch || this->nop == knopTry || this->nop == knopCatch || this->nop == knopFinally",
          "108:         || this->nop == knopWhile || this->nop == knopDoWhile || this->nop == knopFor || this->nop == knopForIn || this->nop == knopForOf);",
          "109:     return reinterpret_cast<ParseNodeStmt*>(this);",
          "110: }",
          "112: ParseNodeBlock * ParseNode::AsParseNodeBlock()",
          "113: {",
          "114:     Assert(this->nop == knopBlock);",
          "115:     return reinterpret_cast<ParseNodeBlock*>(this);",
          "116: }",
          "118: ParseNodeJump * ParseNode::AsParseNodeJump()",
          "119: {",
          "120:     Assert(this->nop == knopBreak || this->nop == knopContinue);",
          "121:     return reinterpret_cast<ParseNodeJump*>(this);",
          "122: }",
          "124: ParseNodeWith * ParseNode::AsParseNodeWith()",
          "125: {",
          "126:     Assert(this->nop == knopWith);",
          "127:     return reinterpret_cast<ParseNodeWith*>(this);",
          "128: }",
          "130: ParseNodeIf * ParseNode::AsParseNodeIf()",
          "131: {",
          "132:     Assert(this->nop == knopIf);",
          "133:     return reinterpret_cast<ParseNodeIf*>(this);",
          "134: }",
          "136: ParseNodeSwitch * ParseNode::AsParseNodeSwitch()",
          "137: {",
          "138:     Assert(this->nop == knopSwitch);",
          "139:     return reinterpret_cast<ParseNodeSwitch*>(this);",
          "140: }",
          "142: ParseNodeCase * ParseNode::AsParseNodeCase()",
          "143: {",
          "144:     Assert(this->nop == knopCase);",
          "145:     return reinterpret_cast<ParseNodeCase*>(this);",
          "146: }",
          "148: ParseNodeReturn * ParseNode::AsParseNodeReturn()",
          "149: {",
          "150:     Assert(this->nop == knopReturn);",
          "151:     return reinterpret_cast<ParseNodeReturn*>(this);",
          "152: }",
          "154: ParseNodeTryFinally * ParseNode::AsParseNodeTryFinally()",
          "155: {",
          "156:     Assert(this->nop == knopTryFinally);",
          "157:     return reinterpret_cast<ParseNodeTryFinally*>(this);",
          "158: }",
          "160: ParseNodeTryCatch * ParseNode::AsParseNodeTryCatch()",
          "161: {",
          "162:     Assert(this->nop == knopTryCatch);",
          "163:     return reinterpret_cast<ParseNodeTryCatch*>(this);",
          "164: }",
          "166: ParseNodeTry * ParseNode::AsParseNodeTry()",
          "167: {",
          "168:     Assert(this->nop == knopTry);",
          "169:     return reinterpret_cast<ParseNodeTry*>(this);",
          "170: }",
          "172: ParseNodeCatch * ParseNode::AsParseNodeCatch()",
          "173: {",
          "174:     Assert(this->nop == knopCatch);",
          "175:     return reinterpret_cast<ParseNodeCatch*>(this);",
          "176: }",
          "178: ParseNodeFinally * ParseNode::AsParseNodeFinally()",
          "179: {",
          "180:     Assert(this->nop == knopFinally);",
          "181:     return reinterpret_cast<ParseNodeFinally*>(this);",
          "182: }",
          "184: ParseNodeLoop * ParseNode::AsParseNodeLoop()",
          "185: {",
          "186:     Assert(this->nop == knopWhile || this->nop == knopDoWhile || this->nop == knopFor || this->nop == knopForIn || this->nop == knopForOf);",
          "187:     return reinterpret_cast<ParseNodeLoop*>(this);",
          "188: }",
          "190: ParseNodeWhile * ParseNode::AsParseNodeWhile()",
          "191: {",
          "192:     Assert(this->nop == knopWhile || this->nop == knopDoWhile);",
          "193:     return reinterpret_cast<ParseNodeWhile*>(this);",
          "194: }",
          "196: ParseNodeFor * ParseNode::AsParseNodeFor()",
          "197: {",
          "198:     Assert(this->nop == knopFor);",
          "199:     return reinterpret_cast<ParseNodeFor*>(this);",
          "200: }",
          "202: ParseNodeForInOrForOf * ParseNode::AsParseNodeForInOrForOf()",
          "203: {",
          "204:     Assert(this->nop == knopForIn || this->nop == knopForOf);",
          "205:     return reinterpret_cast<ParseNodeForInOrForOf*>(this);",
          "206: }",
          "208: ParseNodeFnc * ParseNode::AsParseNodeFnc()",
          "209: {",
          "210:     Assert(this->nop == knopFncDecl || this->nop == knopProg || this->nop == knopModule);",
          "211:     return reinterpret_cast<ParseNodeFnc*>(this);",
          "212: }",
          "214: ParseNodeProg * ParseNode::AsParseNodeProg()",
          "215: {",
          "216:     Assert(this->nop == knopProg);",
          "217:     return reinterpret_cast<ParseNodeProg*>(this);",
          "218: }",
          "220: ParseNodeModule * ParseNode::AsParseNodeModule()",
          "221: {",
          "223:     Assert(this->nop == knopProg);",
          "224:     return reinterpret_cast<ParseNodeModule*>(this);",
          "225: }",
          "227: IdentPtr ParseNode::name()",
          "228: {",
          "229:     if (this->nop == knopName || this->nop == knopStr)",
          "230:     {",
          "231:         return this->AsParseNodePid()->pid;",
          "232:     }",
          "233:     else if (this->nop == knopVarDecl || this->nop == knopConstDecl)",
          "234:     {",
          "235:         return this->AsParseNodeVar()->pid;",
          "236:     }",
          "237:     return nullptr;",
          "238: }",
          "240: ParseNodePtr ParseNode::GetFormalNext()",
          "241: {",
          "242:     ParseNodePtr pnodeNext = nullptr;",
          "244:     if (nop == knopParamPattern)",
          "245:     {",
          "246:         pnodeNext = this->AsParseNodeParamPattern()->pnodeNext;",
          "247:     }",
          "248:     else",
          "249:     {",
          "250:         Assert(IsVarLetOrConst());",
          "251:         pnodeNext = this->AsParseNodeVar()->pnodeNext;",
          "252:     }",
          "253:     return pnodeNext;",
          "254: }",
          "",
          "---------------"
        ],
        "lib/Parser/ptree.h||lib/Parser/ptree.h": [
          "File: lib/Parser/ptree.h -> lib/Parser/ptree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: Data structs for ParseNodes. ParseNode includes a union of these.",
          "71: {",
          "72:     ParseNodePtr pnode1;",
          "73: };",
          "76: {",
          "77:     ParseNodePtr pnodeNext;",
          "78:     ParseNodePtr pnode1;",
          "79:     ParseNodePtr pnode2;",
          "80: };",
          "83: {",
          "84:     ParseNodePtr pnodeNext;",
          "85:     ParseNodePtr pnode1;",
          "86:     ParseNodePtr pnode2;",
          "87:     ParseNodePtr pnode3;",
          "88: };",
          "102: {",
          "103:     int32 lw;",
          "104: };",
          "107: {",
          "108:     double dbl;",
          "109:     bool maybeInt : 1;",
          "110: };",
          "112: class Symbol;",
          "113: struct PidRefStack;",
          "115: {",
          "116:     IdentPtr pid;",
          "117:     Symbol **symRef;",
          "118:     Symbol *sym;",
          "",
          "[Removed Lines]",
          "70: struct PnUni",
          "75: struct PnBin",
          "82: struct PnTri",
          "90: struct PnSlot",
          "91: {",
          "92:   uint slotIndex;",
          "93: };",
          "95: struct PnUniSlot : PnUni",
          "96: {",
          "97:   uint slotIndex;",
          "98:   uint staticFuncId;",
          "99: };",
          "101: struct PnInt",
          "106: struct PnFlt",
          "114: struct PnPid",
          "",
          "[Added Lines]",
          "70: class ParseNodeUni;",
          "71: class ParseNodeBin;",
          "72: class ParseNodeTri;",
          "73: class ParseNodeInt;",
          "74: class ParseNodeFloat;",
          "75: class ParseNodePid;",
          "76: class ParseNodeVar;",
          "77: class ParseNodeCall;",
          "78: class ParseNodeSuperCall;",
          "79: class ParseNodeSpecialName;",
          "80: class ParseNodeExportDefault;",
          "81: class ParseNodeStrTemplate;",
          "82: class ParseNodeSuperReference;",
          "83: class ParseNodeArrLit;",
          "84: class ParseNodeClass;",
          "85: class ParseNodeParamPattern;",
          "87: class ParseNodeStmt;",
          "88: class ParseNodeBlock;",
          "89: class ParseNodeJump;",
          "90: class ParseNodeWith;",
          "91: class ParseNodeIf;",
          "92: class ParseNodeSwitch;",
          "93: class ParseNodeCase;",
          "94: class ParseNodeReturn;",
          "95: class ParseNodeTryFinally;",
          "96: class ParseNodeTryCatch;",
          "97: class ParseNodeTry;",
          "98: class ParseNodeCatch;",
          "99: class ParseNodeFinally;",
          "100: class ParseNodeLoop;",
          "101: class ParseNodeWhile;",
          "102: class ParseNodeFor;",
          "103: class ParseNodeForInOrForOf;",
          "105: class ParseNodeFnc;",
          "106: class ParseNodeProg;",
          "107: class ParseNodeModule;",
          "109: class ParseNode",
          "111: public:",
          "112:     ParseNodeUni * AsParseNodeUni();",
          "113:     ParseNodeBin * AsParseNodeBin();",
          "114:     ParseNodeTri * AsParseNodeTri();",
          "115:     ParseNodeInt * AsParseNodeInt();",
          "116:     ParseNodeFloat * AsParseNodeFloat();",
          "117:     ParseNodeVar * AsParseNodeVar();",
          "118:     ParseNodePid * AsParseNodePid();",
          "120:     ParseNodeSpecialName * AsParseNodeSpecialName();",
          "121:     ParseNodeExportDefault * AsParseNodeExportDefault();",
          "122:     ParseNodeStrTemplate * AsParseNodeStrTemplate();",
          "123:     ParseNodeSuperReference * AsParseNodeSuperReference();",
          "124:     ParseNodeArrLit * AsParseNodeArrLit();",
          "126:     ParseNodeCall * AsParseNodeCall();",
          "127:     ParseNodeSuperCall * AsParseNodeSuperCall();",
          "128:     ParseNodeClass * AsParseNodeClass();",
          "129:     ParseNodeParamPattern * AsParseNodeParamPattern();",
          "131:     ParseNodeStmt * AsParseNodeStmt();",
          "132:     ParseNodeBlock * AsParseNodeBlock();",
          "133:     ParseNodeJump * AsParseNodeJump();",
          "134:     ParseNodeWith * AsParseNodeWith();",
          "135:     ParseNodeIf * AsParseNodeIf();",
          "136:     ParseNodeSwitch * AsParseNodeSwitch();",
          "137:     ParseNodeCase * AsParseNodeCase();",
          "138:     ParseNodeReturn * AsParseNodeReturn();",
          "140:     ParseNodeTryFinally * AsParseNodeTryFinally();",
          "141:     ParseNodeTryCatch * AsParseNodeTryCatch();",
          "142:     ParseNodeTry * AsParseNodeTry();",
          "143:     ParseNodeCatch * AsParseNodeCatch();",
          "144:     ParseNodeFinally * AsParseNodeFinally();",
          "146:     ParseNodeLoop * AsParseNodeLoop();",
          "147:     ParseNodeWhile * AsParseNodeWhile();",
          "148:     ParseNodeFor * AsParseNodeFor();",
          "149:     ParseNodeForInOrForOf * AsParseNodeForInOrForOf();",
          "151:     ParseNodeFnc * AsParseNodeFnc();",
          "152:     ParseNodeProg * AsParseNodeProg();",
          "153:     ParseNodeModule * AsParseNodeModule();",
          "155:     static uint Grfnop(int nop)",
          "156:     {",
          "157:         Assert(nop < knopLim);",
          "158:         return nop < knopLim ? mpnopgrfnop[nop] : fnopNone;",
          "159:     }",
          "161:     BOOL IsStatement()",
          "162:     {",
          "163:         return nop >= knopList || ((Grfnop(nop) & fnopAsg) != 0);",
          "164:     }",
          "166:     uint Grfnop(void)",
          "167:     {",
          "168:         Assert(nop < knopLim);",
          "169:         return nop < knopLim ? mpnopgrfnop[nop] : fnopNone;",
          "170:     }",
          "172:     IdentPtr name();",
          "174:     charcount_t LengthInCodepoints() const",
          "175:     {",
          "176:         return (this->ichLim - this->ichMin);",
          "177:     }",
          "180:     bool HasVarArguments() const",
          "181:     {",
          "182:         return ((nop == knopFncDecl) && (grfpn & PNodeFlags::fpnArguments_varDeclaration));",
          "183:     }",
          "185:     bool CapturesSyms() const",
          "186:     {",
          "187:         return (grfpn & PNodeFlags::fpnCapturesSyms) != 0;",
          "188:     }",
          "190:     void SetCapturesSyms()",
          "191:     {",
          "192:         grfpn |= PNodeFlags::fpnCapturesSyms;",
          "193:     }",
          "195:     bool IsInList() const { return this->isInList; }",
          "196:     void SetIsInList() { this->isInList = true; }",
          "198:     bool IsNotEscapedUse() const { return this->notEscapedUse; }",
          "199:     void SetNotEscapedUse() { this->notEscapedUse = true; }",
          "201:     bool CanFlattenConcatExpr() const { return !!(this->grfpn & PNodeFlags::fpnCanFlattenConcatExpr); }",
          "203:     bool IsCallApplyTargetLoad() { return isCallApplyTargetLoad; }",
          "204:     void SetIsCallApplyTargetLoad() { isCallApplyTargetLoad = true; }",
          "206:     bool IsSpecialName() { return isSpecialName; }",
          "207:     void SetIsSpecialName() { isSpecialName = true; }",
          "209:     bool IsUserIdentifier() const",
          "210:     {",
          "211:         return this->nop == knopName && !this->isSpecialName;",
          "212:     }",
          "214:     bool IsVarLetOrConst() const",
          "215:     {",
          "216:         return this->nop == knopVarDecl || this->nop == knopLetDecl || this->nop == knopConstDecl;",
          "217:     }",
          "219:     ParseNodePtr GetFormalNext();",
          "221:     bool IsPattern() const",
          "222:     {",
          "223:         return nop == knopObjectPattern || nop == knopArrayPattern;",
          "224:     }",
          "226: #if DBG_DUMP",
          "227:     void Dump();",
          "228: #endif",
          "229: public:",
          "230:     static const uint mpnopgrfnop[knopLim];",
          "232:     OpCode nop;",
          "233:     ushort grfpn;",
          "234:     charcount_t ichMin;         // start offset into the original source buffer",
          "235:     charcount_t ichLim;         // end offset into the original source buffer",
          "236:     Js::RegSlot location;",
          "237:     bool isUsed;                // indicates whether an expression such as x++ is used",
          "238:     bool emitLabels;",
          "239:     bool notEscapedUse;         // Use by byte code generator.  Currently, only used by child of knopComma",
          "240:     bool isInList;",
          "241:     bool isCallApplyTargetLoad;",
          "242:     bool isSpecialName;         // indicates a PnPid (knopName) is a special name like 'this' or 'super'",
          "243: #ifdef EDIT_AND_CONTINUE",
          "244:     ParseNodePtr parent;",
          "245: #endif",
          "246: };",
          "249: class ParseNodeUni : public ParseNode",
          "250: {",
          "251: public:",
          "256: class ParseNodeBin : public ParseNode",
          "258: public:",
          "265: class ParseNodeTri : public ParseNode",
          "267: public:",
          "275: class ParseNodeInt : public ParseNode",
          "277: public:",
          "282: class ParseNodeFloat : public ParseNode",
          "284: public:",
          "292: class ParseNodePid : public ParseNode",
          "294: public:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     Js::PropertyId PropertyIdFromNameNode() const;",
          "125: };",
          "128: {",
          "129:     ParseNodePtr pnodeNext;",
          "130:     IdentPtr pid;",
          "131:     Symbol *sym;",
          "",
          "[Removed Lines]",
          "127: struct PnVar",
          "",
          "[Added Lines]",
          "307: class ParseNodeVar : public ParseNode",
          "309: public:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:     }",
          "147: };",
          "150: {",
          "151:     uint count;",
          "152:     uint spreadCount;",
          "153:     BYTE arrayOfTaggedInts:1;     // indicates that array initializer nodes are all tagged ints",
          "",
          "[Removed Lines]",
          "149: struct PnArrLit : PnUni",
          "",
          "[Added Lines]",
          "331: class ParseNodeArrLit : public ParseNodeUni",
          "333: public:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "206: struct RestorePoint;",
          "207: struct DeferredFunctionStub;",
          "210: {",
          "211:     ParseNodePtr pnodeNext;",
          "212:     ParseNodePtr pnodeName;",
          "213:     IdentPtr pid;",
          "",
          "[Removed Lines]",
          "209: struct PnFnc",
          "",
          "[Added Lines]",
          "393: class ParseNodeFnc : public ParseNode",
          "395: public:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "390:     template<typename Fn>",
          "391:     void MapContainerScopes(Fn fn)",
          "392:     {",
          "394:         if (this->pnodeBodyScope != nullptr)",
          "395:         {",
          "397:         }",
          "398:     }",
          "399: };",
          "402: {",
          "403:     ParseNodePtr pnodeName;",
          "404:     ParseNodePtr pnodeDeclName;",
          "405:     ParseNodePtr pnodeBlock;",
          "",
          "[Removed Lines]",
          "393:         fn(this->pnodeScopes->sxBlock.pnodeScopes);",
          "396:             fn(this->pnodeBodyScope->sxBlock.pnodeScopes);",
          "401: struct PnClass",
          "",
          "[Added Lines]",
          "578:         fn(this->pnodeScopes->AsParseNodeBlock()->pnodeScopes);",
          "581:             fn(this->pnodeBodyScope->AsParseNodeBlock()->pnodeScopes);",
          "587: class ParseNodeClass : public ParseNode",
          "589: public:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "414:     bool IsDefaultModuleExport() const { return isDefaultModuleExport; }",
          "415: };",
          "418: {",
          "419:     ParseNodePtr pnodeExpr;",
          "420: };",
          "423: {",
          "424:     ParseNodePtr pnodeStringLiterals;",
          "425:     ParseNodePtr pnodeStringRawLiterals;",
          "426:     ParseNodePtr pnodeSubstitutionExpressions;",
          "",
          "[Removed Lines]",
          "417: struct PnExportDefault",
          "422: struct PnStrTemplate",
          "",
          "[Added Lines]",
          "605: class ParseNodeExportDefault : public ParseNode",
          "607: public:",
          "612: class ParseNodeStrTemplate : public ParseNode",
          "614: public:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "428:     BYTE isTaggedTemplate:1;",
          "429: };",
          "432: {",
          "433:     ParseNodePtr pnodeLastValStmt;",
          "434:     bool m_UsesArgumentsAtGlobal;",
          "435: };",
          "438: {",
          "439:     ModuleImportOrExportEntryList* localExportEntries;",
          "440:     ModuleImportOrExportEntryList* indirectExportEntries;",
          "441:     ModuleImportOrExportEntryList* starExportEntries;",
          "",
          "[Removed Lines]",
          "431: struct PnProg : PnFnc",
          "437: struct PnModule : PnProg",
          "",
          "[Added Lines]",
          "623: class ParseNodeProg : public ParseNodeFnc",
          "625: public:",
          "631: class ParseNodeModule : public ParseNodeProg",
          "633: public:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "443:     IdentPtrList* requestedModules;",
          "444: };",
          "447: {",
          "448:     ParseNodePtr pnodeNext;",
          "449:     ParseNodePtr pnodeTarget;",
          "450:     ParseNodePtr pnodeArgs;",
          "",
          "[Removed Lines]",
          "446: struct PnCall",
          "",
          "[Added Lines]",
          "642: class ParseNodeCall : public ParseNode",
          "644: public:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "457:     BYTE hasDestructuring : 1;",
          "458: };",
          "461: {",
          "462:     ParseNodePtr pnodeOuter;",
          "",
          "[Removed Lines]",
          "460: struct PnStmt",
          "",
          "[Added Lines]",
          "658: class ParseNodeStmt : public ParseNode",
          "660: public:",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "469:     Js::ByteCodeLabel continueLabel;",
          "470: };",
          "473: {",
          "474:     ParseNodePtr pnodeStmt;",
          "475:     ParseNodePtr pnodeLastValStmt;",
          "476:     ParseNodePtr pnodeLexVars;",
          "",
          "[Removed Lines]",
          "472: struct PnBlock : PnStmt",
          "",
          "[Added Lines]",
          "672: class ParseNodeBlock : public ParseNodeStmt",
          "674: public:",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "496:     bool HasBlockScopedContent() const;",
          "497: };",
          "500: {",
          "501:     ParseNodePtr pnodeTarget;",
          "502:     bool hasExplicitTarget;",
          "503: };",
          "506: {",
          "508:     uint loopId;",
          "509: };",
          "512: {",
          "513:     ParseNodePtr pnodeCond;",
          "514:     ParseNodePtr pnodeBody;",
          "515: };",
          "518: {",
          "519:     ParseNodePtr pnodeObj;",
          "520:     ParseNodePtr pnodeBody;",
          "521:     ParseNodePtr pnodeScopes;",
          "",
          "[Removed Lines]",
          "499: struct PnJump : PnStmt",
          "505: struct PnLoop : PnStmt",
          "511: struct PnWhile : PnLoop",
          "517: struct PnWith : PnStmt",
          "",
          "[Added Lines]",
          "701: class ParseNodeJump : public ParseNodeStmt",
          "703: public:",
          "709: class ParseNodeLoop : public ParseNodeStmt",
          "711: public:",
          "717: class ParseNodeWhile : public ParseNodeLoop",
          "719: public:",
          "725: class ParseNodeWith : public ParseNodeStmt",
          "727: public:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "523:     Scope        *scope;",
          "524: };",
          "527: {",
          "528:     ParseNodePtr pnodeNext;",
          "529:     Js::RegSlot location;",
          "530:     ParseNodePtr pnode1;",
          "531: };",
          "534: {",
          "535:     ParseNodePtr pnodeCond;",
          "536:     ParseNodePtr pnodeTrue;",
          "537:     ParseNodePtr pnodeFalse;",
          "538: };",
          "547: {",
          "548:     ParseNodePtr pnodeObj;",
          "549:     ParseNodePtr pnodeBody;",
          "550:     ParseNodePtr pnodeLval;",
          "",
          "[Removed Lines]",
          "526: struct PnParamPattern",
          "533: struct PnIf : PnStmt",
          "540: struct PnHelperCall2 {",
          "541:   ParseNodePtr pnodeArg1;",
          "542:   ParseNodePtr pnodeArg2;",
          "543:   int helperId;",
          "544: };",
          "546: struct PnForInOrForOf : PnLoop",
          "",
          "[Added Lines]",
          "736: class ParseNodeParamPattern : public ParseNode",
          "738: public:",
          "745: class ParseNodeIf : public ParseNodeStmt",
          "747: public:",
          "754: class ParseNodeForInOrForOf : public ParseNodeLoop",
          "756: public:",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "552:     Js::RegSlot itemLocation;",
          "553: };",
          "556: {",
          "557:     ParseNodePtr pnodeCond;",
          "558:     ParseNodePtr pnodeBody;",
          "559:     ParseNodePtr pnodeInit;",
          "",
          "[Removed Lines]",
          "555: struct PnFor : PnLoop",
          "",
          "[Added Lines]",
          "765: class ParseNodeFor : public ParseNodeLoop",
          "767: public:",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "562:     ParseNodePtr pnodeInverted;",
          "563: };",
          "566: {",
          "567:     ParseNodePtr pnodeVal;",
          "568:     ParseNodePtr pnodeCases;",
          "569:     ParseNodePtr pnodeDefault;",
          "570:     ParseNodePtr pnodeBlock;",
          "571: };",
          "574: {",
          "575:     ParseNodePtr pnodeNext;",
          "576:     ParseNodePtr pnodeExpr; // nullptr for default",
          "577:     ParseNodePtr pnodeBody;",
          "578:     Js::ByteCodeLabel labelCase;",
          "579: };",
          "582: {",
          "583:     ParseNodePtr pnodeExpr;",
          "584: };",
          "587: {",
          "588:     ParseNodePtr pnodeTry;",
          "589:     ParseNodePtr pnodeFinally;",
          "590: };",
          "593: {",
          "594:     ParseNodePtr pnodeTry;",
          "595:     ParseNodePtr pnodeCatch;",
          "596: };",
          "599: {",
          "600:     ParseNodePtr pnodeBody;",
          "601: };",
          "604: {",
          "605:     ParseNodePtr pnodeNext;",
          "606:     ParseNodePtr pnodeParam;",
          "607:     ParseNodePtr pnodeBody;",
          "",
          "[Removed Lines]",
          "565: struct PnSwitch : PnStmt",
          "573: struct PnCase : PnStmt",
          "581: struct PnReturn : PnStmt",
          "586: struct PnTryFinally : PnStmt",
          "592: struct PnTryCatch : PnStmt",
          "598: struct PnTry : PnStmt",
          "603: struct PnCatch : PnStmt",
          "",
          "[Added Lines]",
          "777: class ParseNodeSwitch : public ParseNodeStmt",
          "779: public:",
          "787: class ParseNodeCase : public ParseNodeStmt",
          "789: public:",
          "797: class ParseNodeReturn : public ParseNodeStmt",
          "799: public:",
          "804: class ParseNodeTryFinally : public ParseNodeStmt",
          "806: public:",
          "812: class ParseNodeTryCatch : public ParseNodeStmt",
          "814: public:",
          "820: class ParseNodeTry : public ParseNodeStmt",
          "822: public:",
          "827: class ParseNodeCatch : public ParseNodeStmt",
          "829: public:",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "609:     Scope        *scope;",
          "610: };",
          "613: {",
          "614:     ParseNodePtr pnodeBody;",
          "615: };",
          "618: {",
          "619:     bool isThis : 1;",
          "620:     bool isSuper : 1;",
          "621: };",
          "624: {",
          "625:     ParseNodePtr pnodeThis;",
          "626: };",
          "629: {",
          "630:     ParseNodePtr pnodeThis;",
          "631:     ParseNodePtr pnodeNewTarget;",
          "632: };",
          "839: #define AssertNodeMem(pnode) AssertPvCb(pnode, kcbPnNone)",
          "840: #define AssertNodeMemN(pnode) AssertPvCbN(pnode, kcbPnNone)",
          "",
          "[Removed Lines]",
          "612: struct PnFinally : PnStmt",
          "617: struct PnSpecialName : PnPid",
          "623: struct PnSuperReference : PnBin",
          "628: struct PnSuperCall : PnCall",
          "634: struct ParseNode",
          "635: {",
          "636:     OpCode nop;",
          "637:     ushort grfpn;",
          "638:     charcount_t ichMin;         // start offset into the original source buffer",
          "639:     charcount_t ichLim;         // end offset into the original source buffer",
          "640:     Js::RegSlot location;",
          "641:     bool isUsed;                // indicates whether an expression such as x++ is used",
          "642:     bool emitLabels;",
          "643:     bool notEscapedUse;         // Use by byte code generator.  Currently, only used by child of knopComma",
          "644:     bool isInList;",
          "645:     bool isCallApplyTargetLoad;",
          "646:     bool isSpecialName;         // indicates a PnPid (knopName) is a special name like 'this' or 'super'",
          "647: #ifdef EDIT_AND_CONTINUE",
          "648:     ParseNodePtr parent;",
          "649: #endif",
          "651:     union",
          "652:     {",
          "653:         PnArrLit         sxArrLit;         // Array literal",
          "654:         PnBin            sxBin;            // binary operators",
          "655:         PnBlock          sxBlock;          // block { }",
          "656:         PnCall           sxCall;           // function call",
          "657:         PnCase           sxCase;           // switch case",
          "658:         PnCatch          sxCatch;          // { catch(e : expr) {body} }",
          "659:         PnClass          sxClass;          // class declaration",
          "660:         PnExportDefault  sxExportDefault;  // export default expr;",
          "661:         PnFinally        sxFinally;        // finally",
          "662:         PnFlt            sxFlt;            // double constant",
          "663:         PnFnc            sxFnc;            // function declaration",
          "664:         PnFor            sxFor;            // for loop",
          "665:         PnForInOrForOf   sxForInOrForOf;   // for-in loop",
          "666:         PnHelperCall2    sxHelperCall2;    // call to helper",
          "667:         PnIf             sxIf;             // if",
          "668:         PnInt            sxInt;            // integer constant",
          "669:         PnJump           sxJump;           // break and continue",
          "670:         PnLoop           sxLoop;           // base for loop nodes",
          "671:         PnModule         sxModule;         // global module",
          "672:         PnParamPattern   sxParamPattern;   // Destructure pattern for function/catch parameter",
          "673:         PnPid            sxPid;            // identifier or string",
          "674:         PnProg           sxProg;           // global program",
          "675:         PnReturn         sxReturn;         // return [expr]",
          "676:         PnSpecialName    sxSpecialName;    // special name like 'this'",
          "677:         PnStmt           sxStmt;           // base for statement nodes",
          "678:         PnStrTemplate    sxStrTemplate;    // string template declaration",
          "679:         PnSuperCall      sxSuperCall;      // call node with super target",
          "680:         PnSuperReference sxSuperReference; // binary operator with super reference",
          "681:         PnSwitch         sxSwitch;         // switch",
          "682:         PnTri            sxTri;            // ternary operator",
          "683:         PnTry            sxTry;            // try-catch",
          "684:         PnTryCatch       sxTryCatch;       // try-catch",
          "685:         PnTryFinally     sxTryFinally;     // try-catch-finally",
          "686:         PnUni            sxUni;            // unary operators",
          "687:         PnVar            sxVar;            // variable declaration",
          "688:         PnWhile          sxWhile;          // while and do-while loops",
          "689:         PnWith           sxWith;           // with",
          "690:     };",
          "692:     IdentPtr name()",
          "693:     {",
          "694:         if (this->nop == knopName || this->nop == knopStr)",
          "695:         {",
          "696:             return this->sxPid.pid;",
          "697:         }",
          "698:         else if (this->nop == knopVarDecl)",
          "699:         {",
          "700:             return this->sxVar.pid;",
          "701:         }",
          "702:         else if (this->nop == knopConstDecl)",
          "703:         {",
          "704:             return this->sxVar.pid;",
          "705:         }",
          "706:         return nullptr;",
          "707:     }",
          "709:     static const uint mpnopgrfnop[knopLim];",
          "711:     static uint Grfnop(int nop)",
          "712:     {",
          "713:         Assert(nop < knopLim);",
          "714:         return nop < knopLim ? mpnopgrfnop[nop] : fnopNone;",
          "715:     }",
          "717:     BOOL IsStatement()",
          "718:     {",
          "719:         return nop >= knopList || ((Grfnop(nop) & fnopAsg) != 0);",
          "720:     }",
          "722:     uint Grfnop(void)",
          "723:     {",
          "724:         Assert(nop < knopLim);",
          "725:         return nop < knopLim ? mpnopgrfnop[nop] : fnopNone;",
          "726:     }",
          "728:     charcount_t LengthInCodepoints() const",
          "729:     {",
          "730:         return (this->ichLim - this->ichMin);",
          "731:     }",
          "734:     bool HasVarArguments() const",
          "735:     {",
          "736:         return ((nop == knopFncDecl) && (grfpn & PNodeFlags::fpnArguments_varDeclaration));",
          "737:     }",
          "739:     bool CapturesSyms() const",
          "740:     {",
          "741:         return (grfpn & PNodeFlags::fpnCapturesSyms) != 0;",
          "742:     }",
          "744:     void SetCapturesSyms()",
          "745:     {",
          "746:         grfpn |= PNodeFlags::fpnCapturesSyms;",
          "747:     }",
          "749:     bool IsInList() const { return this->isInList; }",
          "750:     void SetIsInList() { this->isInList = true; }",
          "752:     bool IsNotEscapedUse() const { return this->notEscapedUse; }",
          "753:     void SetNotEscapedUse() { this->notEscapedUse = true; }",
          "755:     bool CanFlattenConcatExpr() const { return !!(this->grfpn & PNodeFlags::fpnCanFlattenConcatExpr); }",
          "757:     bool IsCallApplyTargetLoad() { return isCallApplyTargetLoad; }",
          "758:     void SetIsCallApplyTargetLoad() { isCallApplyTargetLoad = true; }",
          "760:     bool IsSpecialName() { return isSpecialName; }",
          "761:     void SetIsSpecialName() { isSpecialName = true; }",
          "763:     bool IsUserIdentifier() const",
          "764:     {",
          "765:         return this->nop == knopName && !this->isSpecialName;",
          "766:     }",
          "768:     bool IsVarLetOrConst() const",
          "769:     {",
          "770:         return this->nop == knopVarDecl || this->nop == knopLetDecl || this->nop == knopConstDecl;",
          "771:     }",
          "773:     ParseNodePtr GetFormalNext()",
          "774:     {",
          "775:         ParseNodePtr pnodeNext = nullptr;",
          "777:         if (nop == knopParamPattern)",
          "778:         {",
          "779:             pnodeNext = this->sxParamPattern.pnodeNext;",
          "780:         }",
          "781:         else",
          "782:         {",
          "783:             Assert(IsVarLetOrConst());",
          "784:             pnodeNext = this->sxVar.pnodeNext;",
          "785:         }",
          "786:         return pnodeNext;",
          "787:     }",
          "789:     bool IsPattern() const",
          "790:     {",
          "791:         return nop == knopObjectPattern || nop == knopArrayPattern;",
          "792:     }",
          "794: #if DBG_DUMP",
          "795:     void Dump();",
          "796: #endif",
          "797: };",
          "799: const int kcbPnNone           = offsetof(ParseNode, sxUni);",
          "800: const int kcbPnArrLit         = kcbPnNone + sizeof(PnArrLit);",
          "801: const int kcbPnBin            = kcbPnNone + sizeof(PnBin);",
          "802: const int kcbPnBlock          = kcbPnNone + sizeof(PnBlock);",
          "803: const int kcbPnCall           = kcbPnNone + sizeof(PnCall);",
          "804: const int kcbPnCase           = kcbPnNone + sizeof(PnCase);",
          "805: const int kcbPnCatch          = kcbPnNone + sizeof(PnCatch);",
          "806: const int kcbPnClass          = kcbPnNone + sizeof(PnClass);",
          "807: const int kcbPnExportDefault  = kcbPnNone + sizeof(PnExportDefault);",
          "808: const int kcbPnFinally        = kcbPnNone + sizeof(PnFinally);",
          "809: const int kcbPnFlt            = kcbPnNone + sizeof(PnFlt);",
          "810: const int kcbPnFnc            = kcbPnNone + sizeof(PnFnc);",
          "811: const int kcbPnFor            = kcbPnNone + sizeof(PnFor);",
          "812: const int kcbPnForIn          = kcbPnNone + sizeof(PnForInOrForOf);",
          "813: const int kcbPnForOf          = kcbPnNone + sizeof(PnForInOrForOf);",
          "814: const int kcbPnHelperCall3    = kcbPnNone + sizeof(PnHelperCall2);",
          "815: const int kcbPnIf             = kcbPnNone + sizeof(PnIf);",
          "816: const int kcbPnInt            = kcbPnNone + sizeof(PnInt);",
          "817: const int kcbPnJump           = kcbPnNone + sizeof(PnJump);",
          "818: const int kcbPnModule         = kcbPnNone + sizeof(PnModule);",
          "819: const int kcbPnParamPattern   = kcbPnNone + sizeof(PnParamPattern);",
          "820: const int kcbPnPid            = kcbPnNone + sizeof(PnPid);",
          "821: const int kcbPnProg           = kcbPnNone + sizeof(PnProg);",
          "822: const int kcbPnReturn         = kcbPnNone + sizeof(PnReturn);",
          "823: const int kcbPnSlot           = kcbPnNone + sizeof(PnSlot);",
          "824: const int kcbPnSpecialName    = kcbPnNone + sizeof(PnSpecialName);",
          "825: const int kcbPnStrTemplate    = kcbPnNone + sizeof(PnStrTemplate);",
          "826: const int kcbPnSuperCall      = kcbPnNone + sizeof(PnSuperCall);",
          "827: const int kcbPnSuperReference = kcbPnNone + sizeof(PnSuperReference);",
          "828: const int kcbPnSwitch         = kcbPnNone + sizeof(PnSwitch);",
          "829: const int kcbPnTri            = kcbPnNone + sizeof(PnTri);",
          "830: const int kcbPnTry            = kcbPnNone + sizeof(PnTry);",
          "831: const int kcbPnTryCatch       = kcbPnNone + sizeof(PnTryCatch);",
          "832: const int kcbPnTryFinally     = kcbPnNone + sizeof(PnTryFinally);",
          "833: const int kcbPnUni            = kcbPnNone + sizeof(PnUni);",
          "834: const int kcbPnUniSlot        = kcbPnNone + sizeof(PnUniSlot);",
          "835: const int kcbPnVar            = kcbPnNone + sizeof(PnVar);",
          "836: const int kcbPnWhile          = kcbPnNone + sizeof(PnWhile);",
          "837: const int kcbPnWith           = kcbPnNone + sizeof(PnWith);",
          "",
          "[Added Lines]",
          "838: class ParseNodeFinally : public ParseNodeStmt",
          "840: public:",
          "845: class ParseNodeSpecialName : public ParseNodePid",
          "847: public:",
          "853: class ParseNodeSuperReference : public ParseNodeBin",
          "855: public:",
          "860: class ParseNodeSuperCall : public ParseNodeCall",
          "862: public:",
          "867: const int kcbPnNone           = sizeof(ParseNode);",
          "868: const int kcbPnArrLit         = sizeof(ParseNodeArrLit);",
          "869: const int kcbPnBin            = sizeof(ParseNodeBin);",
          "870: const int kcbPnBlock          = sizeof(ParseNodeBlock);",
          "871: const int kcbPnCall           = sizeof(ParseNodeCall);",
          "872: const int kcbPnCase           = sizeof(ParseNodeCase);",
          "873: const int kcbPnCatch          = sizeof(ParseNodeCatch);",
          "874: const int kcbPnClass          = sizeof(ParseNodeClass);",
          "875: const int kcbPnExportDefault  = sizeof(ParseNodeExportDefault);",
          "876: const int kcbPnFinally        = sizeof(ParseNodeFinally);",
          "877: const int kcbPnFlt            = sizeof(ParseNodeFloat);",
          "878: const int kcbPnFnc            = sizeof(ParseNodeFnc);",
          "879: const int kcbPnFor            = sizeof(ParseNodeFor);",
          "880: const int kcbPnForIn          = sizeof(ParseNodeForInOrForOf);",
          "881: const int kcbPnForOf          = sizeof(ParseNodeForInOrForOf);",
          "882: const int kcbPnIf             = sizeof(ParseNodeIf);",
          "883: const int kcbPnInt            = sizeof(ParseNodeInt);",
          "884: const int kcbPnJump           = sizeof(ParseNodeJump);",
          "885: const int kcbPnModule         = sizeof(ParseNodeModule);",
          "886: const int kcbPnParamPattern   = sizeof(ParseNodeParamPattern);",
          "887: const int kcbPnPid            = sizeof(ParseNodePid);",
          "888: const int kcbPnProg           = sizeof(ParseNodeProg);",
          "889: const int kcbPnReturn         = sizeof(ParseNodeReturn);",
          "890: const int kcbPnSpecialName    = sizeof(ParseNodeSpecialName);",
          "891: const int kcbPnStrTemplate    = sizeof(ParseNodeStrTemplate);",
          "892: const int kcbPnSuperCall      = sizeof(ParseNodeSuperCall);",
          "893: const int kcbPnSuperReference = sizeof(ParseNodeSuperReference);",
          "894: const int kcbPnSwitch         = sizeof(ParseNodeSwitch);",
          "895: const int kcbPnTri            = sizeof(ParseNodeTri);",
          "896: const int kcbPnTry            = sizeof(ParseNodeTry);",
          "897: const int kcbPnTryCatch       = sizeof(ParseNodeTryCatch);",
          "898: const int kcbPnTryFinally     = sizeof(ParseNodeTryFinally);",
          "899: const int kcbPnUni            = sizeof(ParseNodeUni);",
          "900: const int kcbPnVar            = sizeof(ParseNodeVar);",
          "901: const int kcbPnWhile          = sizeof(ParseNodeWhile);",
          "902: const int kcbPnWith           = sizeof(ParseNodeWith);",
          "",
          "---------------"
        ],
        "lib/Parser/screrror.h||lib/Parser/screrror.h": [
          "File: lib/Parser/screrror.h -> lib/Parser/screrror.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: Exception blocks",
          "11: class COleScript;",
          "12: interface IScanner;",
          "",
          "[Removed Lines]",
          "10: struct ParseNode;",
          "",
          "[Added Lines]",
          "10: class ParseNode;",
          "",
          "---------------"
        ],
        "lib/Runtime/Base/FunctionBody.cpp||lib/Runtime/Base/FunctionBody.cpp": [
          "File: lib/Runtime/Base/FunctionBody.cpp -> lib/Runtime/Base/FunctionBody.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2781:             this->m_sourceIndex = sourceIndex;",
          "2782:             this->m_cchStartOffset = node->ichMin;",
          "2783:             this->m_cchLength = node->LengthInCodepoints();",
          "2786:             this->m_isEval = isEval;",
          "2787:             this->m_isDynamicFunction = isDynamicFunction;",
          "2792:             if (cbMin > UINT_MAX || lengthInBytes > UINT_MAX)",
          "2793:             {",
          "2794:                 Js::Throw::OutOfMemory();",
          "",
          "[Removed Lines]",
          "2784:             this->m_lineNumber = node->sxFnc.lineNumber;",
          "2785:             this->m_columnNumber = node->sxFnc.columnNumber;",
          "2790:             size_t cbMin = node->sxFnc.cbMin;",
          "2791:             size_t lengthInBytes = node->sxFnc.LengthInBytes();",
          "",
          "[Added Lines]",
          "2784:             this->m_lineNumber = node->AsParseNodeFnc()->lineNumber;",
          "2785:             this->m_columnNumber = node->AsParseNodeFnc()->columnNumber;",
          "2790:             size_t cbMin = node->AsParseNodeFnc()->cbMin;",
          "2791:             size_t lengthInBytes = node->AsParseNodeFnc()->LengthInBytes();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2812:             {",
          "2816:                 AssertMsg(this->m_cchStartOffset == node->ichMin, \"Mismatched source character start offset\");",
          "2817:                 AssertMsg(this->m_cchLength == node->LengthInCodepoints(), \"Mismatched source length\");",
          "2819:             }",
          "2821:             AssertMsg(this->m_isEval == isEval, \"Mismatched source type\");",
          "",
          "[Removed Lines]",
          "2815:                 AssertMsg(this->StartOffset() == node->sxFnc.cbMin, \"Mismatched source start offset\");",
          "2818:                 AssertMsg(this->LengthInBytes() == node->sxFnc.LengthInBytes(), \"Mismatched source encoded byte length\");",
          "",
          "[Added Lines]",
          "2815:                 AssertMsg(this->StartOffset() == node->AsParseNodeFnc()->cbMin, \"Mismatched source start offset\");",
          "2818:                 AssertMsg(this->LengthInBytes() == node->AsParseNodeFnc()->LengthInBytes(), \"Mismatched source encoded byte length\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2980:     void FunctionBody::SaveState(ParseNodePtr pnode)",
          "2981:     {",
          "2982:         Assert(!this->IsReparsed());",
          "2986:     }",
          "2988:     void FunctionBody::RestoreState(ParseNodePtr pnode)",
          "",
          "[Removed Lines]",
          "2983:         this->SetChildCallsEval(!!pnode->sxFnc.ChildCallsEval());",
          "2984:         this->SetCallsEval(!!pnode->sxFnc.CallsEval());",
          "2985:         this->SetHasReferenceableBuiltInArguments(!!pnode->sxFnc.HasReferenceableBuiltInArguments());",
          "",
          "[Added Lines]",
          "2983:         this->SetChildCallsEval(!!pnode->AsParseNodeFnc()->ChildCallsEval());",
          "2984:         this->SetCallsEval(!!pnode->AsParseNodeFnc()->CallsEval());",
          "2985:         this->SetHasReferenceableBuiltInArguments(!!pnode->AsParseNodeFnc()->HasReferenceableBuiltInArguments());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2991: #if ENABLE_DEBUG_CONFIG_OPTIONS",
          "2992:         char16 debugStringBuffer[MAX_FUNCTION_BODY_DEBUG_STRING_SIZE];",
          "2993: #endif",
          "2995:         {",
          "2996:             OUTPUT_VERBOSE_TRACE(Js::DebuggerPhase, _u(\"Child calls eval is different on debug reparse: %s(%s)\\n\"), this->GetExternalDisplayName(), this->GetDebugNumberSet(debugStringBuffer));",
          "2997:         }",
          "2999:         {",
          "3000:             OUTPUT_VERBOSE_TRACE(Js::DebuggerPhase, _u(\"Calls eval is different on debug reparse: %s(%s)\\n\"), this->GetExternalDisplayName(), this->GetDebugNumberSet(debugStringBuffer));",
          "3001:         }",
          "3003:         {",
          "3004:             OUTPUT_VERBOSE_TRACE(Js::DebuggerPhase, _u(\"Referenceable Built in args is different on debug reparse: %s(%s)\\n\"), this->GetExternalDisplayName(), this->GetDebugNumberSet(debugStringBuffer));",
          "3005:         }",
          "3010:     }",
          "",
          "[Removed Lines]",
          "2994:         if(!!pnode->sxFnc.ChildCallsEval() != this->GetChildCallsEval())",
          "2998:         if(!!pnode->sxFnc.CallsEval() != this->GetCallsEval())",
          "3002:         if(!!pnode->sxFnc.HasReferenceableBuiltInArguments() != this->HasReferenceableBuiltInArguments())",
          "3007:         pnode->sxFnc.SetChildCallsEval(this->GetChildCallsEval());",
          "3008:         pnode->sxFnc.SetCallsEval(this->GetCallsEval());",
          "3009:         pnode->sxFnc.SetHasReferenceableBuiltInArguments(this->HasReferenceableBuiltInArguments());",
          "",
          "[Added Lines]",
          "2994:         if(!!pnode->AsParseNodeFnc()->ChildCallsEval() != this->GetChildCallsEval())",
          "2998:         if(!!pnode->AsParseNodeFnc()->CallsEval() != this->GetCallsEval())",
          "3002:         if(!!pnode->AsParseNodeFnc()->HasReferenceableBuiltInArguments() != this->HasReferenceableBuiltInArguments())",
          "3007:         pnode->AsParseNodeFnc()->SetChildCallsEval(this->GetChildCallsEval());",
          "3008:         pnode->AsParseNodeFnc()->SetCallsEval(this->GetCallsEval());",
          "3009:         pnode->AsParseNodeFnc()->SetHasReferenceableBuiltInArguments(this->HasReferenceableBuiltInArguments());",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeEmitter.cpp||lib/Runtime/ByteCode/ByteCodeEmitter.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeEmitter.cpp -> lib/Runtime/ByteCode/ByteCodeEmitter.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: bool CallTargetIsArray(ParseNode *pnode)",
          "21: {",
          "23: }",
          "25: #define STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode) \\",
          "",
          "[Removed Lines]",
          "22:     return pnode->nop == knopName && pnode->sxPid.PropertyIdFromNameNode() == Js::PropertyIds::Array;",
          "",
          "[Added Lines]",
          "22:     return pnode->nop == knopName && pnode->AsParseNodePid()->PropertyIdFromNameNode() == Js::PropertyIds::Array;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     if (pnode->nop == knopComputedName)",
          "42:     {",
          "44:     }",
          "46:     if (pnode->nop != knopName)",
          "",
          "[Removed Lines]",
          "43:         pnode = pnode->sxUni.pnode1;",
          "",
          "[Added Lines]",
          "43:         pnode = pnode->AsParseNodeUni()->pnode1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         }",
          "74:         else",
          "75:         {",
          "77:         }",
          "78:     }",
          "79:     else if (fnop & fnopBin)",
          "",
          "[Removed Lines]",
          "76:             return pnodeSE->sxUni.pnode1 && MayHaveSideEffectOnNode(pnode, pnodeSE->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "76:             return pnodeSE->AsParseNodeUni()->pnode1 && MayHaveSideEffectOnNode(pnode, pnodeSE->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:         if (pnodeSE->nop == knopQmark)",
          "83:         {",
          "87:         }",
          "88:         else if (pnodeSE->nop == knopCall || pnodeSE->nop == knopNew)",
          "89:         {",
          "92:         }",
          "93:         else",
          "94:         {",
          "97:         }",
          "98:     }",
          "99:     else if (pnodeSE->nop == knopList)",
          "",
          "[Removed Lines]",
          "84:             return MayHaveSideEffectOnNode(pnode, pnodeSE->sxTri.pnode1) ||",
          "85:                 MayHaveSideEffectOnNode(pnode, pnodeSE->sxTri.pnode2) ||",
          "86:                 MayHaveSideEffectOnNode(pnode, pnodeSE->sxTri.pnode3);",
          "90:             return MayHaveSideEffectOnNode(pnode, pnodeSE->sxCall.pnodeTarget) ||",
          "91:                 (pnodeSE->sxCall.pnodeArgs && MayHaveSideEffectOnNode(pnode, pnodeSE->sxCall.pnodeArgs));",
          "95:             return MayHaveSideEffectOnNode(pnode, pnodeSE->sxBin.pnode1) ||",
          "96:                 (pnodeSE->sxBin.pnode2 && MayHaveSideEffectOnNode(pnode, pnodeSE->sxBin.pnode2));",
          "",
          "[Added Lines]",
          "84:             return MayHaveSideEffectOnNode(pnode, pnodeSE->AsParseNodeTri()->pnode1) ||",
          "85:                 MayHaveSideEffectOnNode(pnode, pnodeSE->AsParseNodeTri()->pnode2) ||",
          "86:                 MayHaveSideEffectOnNode(pnode, pnodeSE->AsParseNodeTri()->pnode3);",
          "90:             return MayHaveSideEffectOnNode(pnode, pnodeSE->AsParseNodeCall()->pnodeTarget) ||",
          "91:                 (pnodeSE->AsParseNodeCall()->pnodeArgs && MayHaveSideEffectOnNode(pnode, pnodeSE->AsParseNodeCall()->pnodeArgs));",
          "95:             return MayHaveSideEffectOnNode(pnode, pnodeSE->AsParseNodeBin()->pnode1) ||",
          "96:                 (pnodeSE->AsParseNodeBin()->pnode2 && MayHaveSideEffectOnNode(pnode, pnodeSE->AsParseNodeBin()->pnode2));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:         switch (pnode->nop)",
          "116:         {",
          "117:         case knopName:",
          "120:         case knopCall:",
          "121:         case knopNew:",
          "123:             {",
          "124:                 return true;",
          "125:             }",
          "128:             {",
          "130:                 while (pnodeArg->nop == knopList)",
          "131:                 {",
          "133:                         return true;",
          "136:                 }",
          "138:                 pnode = pnodeArg;",
          "",
          "[Removed Lines]",
          "118:             return pnode->sxPid.sym && pnode->sxPid.sym->IsArguments();",
          "122:             if (IsArguments(pnode->sxCall.pnodeTarget))",
          "127:             if (pnode->sxCall.pnodeArgs)",
          "129:                 ParseNode *pnodeArg = pnode->sxCall.pnodeArgs;",
          "132:                     if (IsArguments(pnodeArg->sxBin.pnode1))",
          "135:                     pnodeArg = pnodeArg->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "118:             return pnode->AsParseNodePid()->sym && pnode->AsParseNodePid()->sym->IsArguments();",
          "122:             if (IsArguments(pnode->AsParseNodeCall()->pnodeTarget))",
          "127:             if (pnode->AsParseNodeCall()->pnodeArgs)",
          "129:                 ParseNode *pnodeArg = pnode->AsParseNodeCall()->pnodeArgs;",
          "132:                     if (IsArguments(pnodeArg->AsParseNodeBin()->pnode1))",
          "135:                     pnodeArg = pnodeArg->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "142:             return false;",
          "144:         case knopArray:",
          "146:             {",
          "147:                 return false;",
          "148:             }",
          "151:             break;",
          "153:         case knopQmark:",
          "155:             {",
          "156:                 return true;",
          "157:             }",
          "160:             break;",
          "",
          "[Removed Lines]",
          "145:             if (pnode->sxArrLit.arrayOfNumbers || pnode->sxArrLit.count == 0)",
          "150:             pnode = pnode->sxUni.pnode1;",
          "154:             if (IsArguments(pnode->sxTri.pnode1) || IsArguments(pnode->sxTri.pnode2))",
          "159:             pnode = pnode->sxTri.pnode3;",
          "",
          "[Added Lines]",
          "145:             if (pnode->AsParseNodeArrLit()->arrayOfNumbers || pnode->AsParseNodeArrLit()->count == 0)",
          "150:             pnode = pnode->AsParseNodeUni()->pnode1;",
          "154:             if (IsArguments(pnode->AsParseNodeTri()->pnode1) || IsArguments(pnode->AsParseNodeTri()->pnode2))",
          "159:             pnode = pnode->AsParseNodeTri()->pnode3;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197:             uint flags = ParseNode::Grfnop(pnode->nop);",
          "198:             if (flags&fnopUni)",
          "199:             {",
          "203:                 break;",
          "204:             }",
          "205:             else if (flags&fnopBin)",
          "206:             {",
          "210:                 {",
          "211:                     return true;",
          "212:                 }",
          "215:                 break;",
          "216:             }",
          "",
          "[Removed Lines]",
          "200:                 Assert(pnode->sxUni.pnode1);",
          "202:                 pnode = pnode->sxUni.pnode1;",
          "207:                 Assert(pnode->sxBin.pnode1 && pnode->sxBin.pnode2);",
          "209:                 if (IsArguments(pnode->sxBin.pnode1))",
          "214:                 pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "200:                 Assert(pnode->AsParseNodeUni()->pnode1);",
          "202:                 pnode = pnode->AsParseNodeUni()->pnode1;",
          "207:                 Assert(pnode->AsParseNodeBin()->pnode1 && pnode->AsParseNodeBin()->pnode2);",
          "209:                 if (IsArguments(pnode->AsParseNodeBin()->pnode1))",
          "214:                 pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "478:         if (pnode->IsVarLetOrConst())",
          "479:         {",
          "480:             Assert(i < propIds->count);",
          "482:             Assert(sym);",
          "483:             Js::PropertyId symPos = sym->EnsurePosition(byteCodeGenerator);",
          "",
          "[Removed Lines]",
          "481:             Symbol *sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "481:             Symbol *sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "521:     Js::RegSlot argumentsLoc = argSym->GetLocation();",
          "526:     uint count = funcInfo->inArgsCount + (hasRest ? 1 : 0) - 1;",
          "527:     if (count == 0)",
          "528:     {",
          "532:     }",
          "533:     else if (!NeedScopeObjectForArguments(funcInfo, funcInfo->root))",
          "534:     {",
          "",
          "[Removed Lines]",
          "524:     Js::OpCode opcode = !funcInfo->root->sxFnc.HasNonSimpleParameterList() ? Js::OpCode::LdHeapArguments : Js::OpCode::LdLetHeapArguments;",
          "525:     bool hasRest = funcInfo->root->sxFnc.pnodeRest != nullptr;",
          "531:         Assert(funcInfo->root->sxFnc.pnodeParams == nullptr && !hasRest);",
          "",
          "[Added Lines]",
          "524:     Js::OpCode opcode = !funcInfo->root->AsParseNodeFnc()->HasNonSimpleParameterList() ? Js::OpCode::LdHeapArguments : Js::OpCode::LdLetHeapArguments;",
          "525:     bool hasRest = funcInfo->root->AsParseNodeFnc()->pnodeRest != nullptr;",
          "531:         Assert(funcInfo->root->AsParseNodeFnc()->pnodeParams == nullptr && !hasRest);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "556:     Assert(argSym && argSym->IsArguments());",
          "557:     Js::RegSlot argumentsLoc = argSym->GetLocation();",
          "561:     this->m_writer.Reg1(op, argumentsLoc);",
          "562:     EmitLocalPropInit(argumentsLoc, argSym, funcInfo);",
          "",
          "[Removed Lines]",
          "559:     Js::OpCode op = !funcInfo->root->sxFnc.HasNonSimpleParameterList() ? Js::OpCode::LdHeapArgsCached : Js::OpCode::LdLetHeapArgsCached;",
          "",
          "[Added Lines]",
          "559:     Js::OpCode op = !funcInfo->root->AsParseNodeFnc()->HasNonSimpleParameterList() ? Js::OpCode::LdHeapArgsCached : Js::OpCode::LdLetHeapArgsCached;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "574:     while (stringNodeList->nop == knopList)",
          "575:     {",
          "579:         str = Js::JavascriptString::NewCopyBuffer(pid->Psz(), pid->Cch(), scriptContext);",
          "580:         pArr->SetItemWithAttributes(index, str, PropertyEnumerable);",
          "583:         index++;",
          "584:     }",
          "586:     Assert(stringNodeList->nop == knopStr);",
          "589:     str = Js::JavascriptString::NewCopyBuffer(pid->Psz(), pid->Cch(), scriptContext);",
          "590:     pArr->SetItemWithAttributes(index, str, PropertyEnumerable);",
          "",
          "[Removed Lines]",
          "576:         Assert(stringNodeList->sxBin.pnode1->nop == knopStr);",
          "578:         pid = stringNodeList->sxBin.pnode1->sxPid.pid;",
          "582:         stringNodeList = stringNodeList->sxBin.pnode2;",
          "588:     pid = stringNodeList->sxPid.pid;",
          "",
          "[Added Lines]",
          "576:         Assert(stringNodeList->AsParseNodeBin()->pnode1->nop == knopStr);",
          "578:         pid = stringNodeList->AsParseNodeBin()->pnode1->AsParseNodePid()->pid;",
          "582:         stringNodeList = stringNodeList->AsParseNodeBin()->pnode2;",
          "588:     pid = stringNodeList->AsParseNodePid()->pid;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "614:         AssertMsg(debuggerScope, \"Missing a case of scope tracking in BeginEmitBlock.\");",
          "616:         FuncInfo *funcInfo = this->TopFuncInfo();",
          "618:         Scope *scope = sym->GetScope();",
          "620:         if (sym->GetIsGlobal())",
          "",
          "[Removed Lines]",
          "617:         Symbol *sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "617:         Symbol *sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "675:         }",
          "676:         else if (!sym->GetIsModuleExportStorage())",
          "677:         {",
          "679:             {",
          "",
          "[Removed Lines]",
          "678:             if (sym->GetDecl()->sxVar.isSwitchStmtDecl)",
          "",
          "[Added Lines]",
          "678:             if (sym->GetDecl()->AsParseNodeVar()->isSwitchStmtDecl)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "702: Js::DebuggerScope* ByteCodeGenerator::RecordStartScopeObject(ParseNode *pnodeBlock, Js::DiagExtraScopesType scopeType, Js::RegSlot scopeLocation /*= Js::Constants::NoRegister*/, int* index /*= nullptr*/)",
          "703: {",
          "704:     Assert(pnodeBlock);",
          "706:     {",
          "",
          "[Removed Lines]",
          "705:     if (pnodeBlock->nop == knopBlock && !pnodeBlock->sxBlock.HasBlockScopedContent())",
          "",
          "[Added Lines]",
          "705:     if (pnodeBlock->nop == knopBlock && !pnodeBlock->AsParseNodeBlock()->HasBlockScopedContent())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "717: void ByteCodeGenerator::RecordEndScopeObject(ParseNode *pnodeBlock)",
          "718: {",
          "719:     Assert(pnodeBlock);",
          "721:     {",
          "722:         return;",
          "723:     }",
          "",
          "[Removed Lines]",
          "720:     if (pnodeBlock->nop == knopBlock && !pnodeBlock->sxBlock.HasBlockScopedContent())",
          "",
          "[Added Lines]",
          "720:     if (pnodeBlock->nop == knopBlock && !pnodeBlock->AsParseNodeBlock()->HasBlockScopedContent())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "732:     if (BlockHasOwnScope(pnodeBlock, byteCodeGenerator))",
          "733:     {",
          "735:         byteCodeGenerator->PushScope(scope);",
          "737:         Js::RegSlot scopeLocation = scope->GetLocation();",
          "",
          "[Removed Lines]",
          "734:         Scope *scope = pnodeBlock->sxBlock.scope;",
          "",
          "[Added Lines]",
          "734:         Scope *scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "768:         Js::RegSlot frameDisplayLoc = Js::Constants::NoRegister;",
          "769:         Js::RegSlot tmpInnerEnvReg = Js::Constants::NoRegister;",
          "770:         ParseNodePtr pnodeScope;",
          "772:         {",
          "773:             switch (pnodeScope->nop)",
          "774:             {",
          "775:             case knopFncDecl:",
          "777:                 {",
          "",
          "[Removed Lines]",
          "771:         for (pnodeScope = pnodeBlock->sxBlock.pnodeScopes; pnodeScope;)",
          "776:                 if (pnodeScope->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "771:         for (pnodeScope = pnodeBlock->AsParseNodeBlock()->pnodeScopes; pnodeScope;)",
          "776:                 if (pnodeScope->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "802:                     funcInfo->ReleaseLoc(pnodeScope);",
          "803:                     pnodeScope->location = Js::Constants::NoRegister;",
          "804:                 }",
          "806:                 break;",
          "808:             case knopBlock:",
          "810:                 break;",
          "812:             case knopCatch:",
          "814:                 break;",
          "816:             case knopWith:",
          "818:                 break;",
          "819:             }",
          "820:         }",
          "",
          "[Removed Lines]",
          "805:                 pnodeScope = pnodeScope->sxFnc.pnodeNext;",
          "809:                 pnodeScope = pnodeScope->sxBlock.pnodeNext;",
          "813:                 pnodeScope = pnodeScope->sxCatch.pnodeNext;",
          "817:                 pnodeScope = pnodeScope->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "805:                 pnodeScope = pnodeScope->AsParseNodeFnc()->pnodeNext;",
          "809:                 pnodeScope = pnodeScope->AsParseNodeBlock()->pnodeNext;",
          "813:                 pnodeScope = pnodeScope->AsParseNodeCatch()->pnodeNext;",
          "817:                 pnodeScope = pnodeScope->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "826:     }",
          "827:     else",
          "828:     {",
          "830:         if (scope)",
          "831:         {",
          "832:             if (scope->GetMustInstantiate())",
          "",
          "[Removed Lines]",
          "829:         Scope *scope = pnodeBlock->sxBlock.scope;",
          "",
          "[Added Lines]",
          "829:         Scope *scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "851: {",
          "852:     if (BlockHasOwnScope(pnodeBlock, byteCodeGenerator))",
          "853:     {",
          "855:         Assert(scope);",
          "856:         Assert(scope == byteCodeGenerator->GetCurrentScope());",
          "857:         byteCodeGenerator->PopScope();",
          "",
          "[Removed Lines]",
          "854:         Scope *scope = pnodeBlock->sxBlock.scope;",
          "",
          "[Added Lines]",
          "854:         Scope *scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "871:         bool isConst = false;",
          "",
          "[Removed Lines]",
          "872:         pnodeBlock->sxBlock.scope->ForEachSymbolUntil([&isConst](Symbol * const sym) {",
          "",
          "[Added Lines]",
          "872:         pnodeBlock->AsParseNodeBlock()->scope->ForEachSymbolUntil([&isConst](Symbol * const sym) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "880:         if (!isConst)",
          "881:         {",
          "883:             Assert(scope == byteCodeGenerator->GetCurrentScope());",
          "885:             if (scope->GetMustInstantiate())",
          "",
          "[Removed Lines]",
          "882:             Scope *scope = pnodeBlock->sxBlock.scope;",
          "",
          "[Added Lines]",
          "882:             Scope *scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "895: void EmitBlock(ParseNode *pnodeBlock, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, BOOL fReturnValue)",
          "896: {",
          "897:     Assert(pnodeBlock->nop == knopBlock);",
          "899:     if (pnode == nullptr)",
          "900:     {",
          "901:         return;",
          "",
          "[Removed Lines]",
          "898:     ParseNode *pnode = pnodeBlock->sxBlock.pnodeStmt;",
          "",
          "[Added Lines]",
          "898:     ParseNode *pnode = pnodeBlock->AsParseNodeBlock()->pnodeStmt;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "904:     BeginEmitBlock(pnodeBlock, byteCodeGenerator, funcInfo);",
          "908:     while (pnode->nop == knopList)",
          "909:     {",
          "911:         if (stmt == pnodeLastValStmt)",
          "912:         {",
          "",
          "[Removed Lines]",
          "906:     ParseNode *pnodeLastValStmt = pnodeBlock->sxBlock.pnodeLastValStmt;",
          "910:         ParseNode* stmt = pnode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "906:     ParseNode *pnodeLastValStmt = pnodeBlock->AsParseNodeBlock()->pnodeLastValStmt;",
          "910:         ParseNode* stmt = pnode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "915:             pnodeLastValStmt = nullptr;",
          "916:         }",
          "917:         byteCodeGenerator->EmitTopLevelStatement(stmt, funcInfo, fReturnValue && (pnodeLastValStmt == nullptr));",
          "919:     }",
          "921:     if (pnode == pnodeLastValStmt)",
          "",
          "[Removed Lines]",
          "918:         pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "918:         pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "938: void ByteCodeGenerator::EmitTopLevelStatement(ParseNode *stmt, FuncInfo *funcInfo, BOOL fReturnValue)",
          "939: {",
          "941:     {",
          "",
          "[Removed Lines]",
          "940:     if (stmt->nop == knopFncDecl && stmt->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "940:     if (stmt->nop == knopFncDecl && stmt->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "996:             {",
          "997:             case knopFncDecl:",
          "998:                 fn(pnode);",
          "1000:                 break;",
          "1002:             case knopBlock:",
          "1004:                 break;",
          "1006:             case knopCatch:",
          "1008:                 break;",
          "1010:             case knopWith:",
          "1012:                 break;",
          "1014:             default:",
          "",
          "[Removed Lines]",
          "999:                 pnode = pnode->sxFnc.pnodeNext;",
          "1003:                 pnode = pnode->sxBlock.pnodeNext;",
          "1007:                 pnode = pnode->sxCatch.pnodeNext;",
          "1011:                 pnode = pnode->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "999:                 pnode = pnode->AsParseNodeFnc()->pnodeNext;",
          "1003:                 pnode = pnode->AsParseNodeBlock()->pnodeNext;",
          "1007:                 pnode = pnode->AsParseNodeCatch()->pnodeNext;",
          "1011:                 pnode = pnode->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1017:             }",
          "1018:         }",
          "1019:     };",
          "1021: }",
          "1023: void ByteCodeGenerator::DefineCachedFunctions(FuncInfo *funcInfoParent)",
          "",
          "[Removed Lines]",
          "1020:     pnodeScope->sxFnc.MapContainerScopes(mapFncDeclsInScopeList);",
          "",
          "[Added Lines]",
          "1020:     pnodeScope->AsParseNodeFnc()->MapContainerScopes(mapFncDeclsInScopeList);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1028:     auto countFncSlots = [&](ParseNode *pnodeFnc)",
          "1029:     {",
          "1031:         {",
          "1032:             slotCount++;",
          "1033:         }",
          "",
          "[Removed Lines]",
          "1030:         if (pnodeFnc->sxFnc.GetFuncSymbol() != nullptr && pnodeFnc->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "1030:         if (pnodeFnc->AsParseNodeFnc()->GetFuncSymbol() != nullptr && pnodeFnc->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1057:     auto fillEntries = [&](ParseNode *pnodeFnc)",
          "1058:     {",
          "1061:         {",
          "1063:             Js::FuncInfoEntry *entry = &info->elements[slotCount];",
          "1065:             entry->scopeSlot = sym->GetScopeSlot();",
          "1068:             slotCount++;",
          "1069:         }",
          "1070:     };",
          "",
          "[Removed Lines]",
          "1059:         Symbol *sym = pnodeFnc->sxFnc.GetFuncSymbol();",
          "1060:         if (sym != nullptr && (pnodeFnc->sxFnc.IsDeclaration()))",
          "1062:             AssertMsg(!pnodeFnc->sxFnc.IsGenerator(), \"Generator functions are not supported by InitCachedFuncs but since they always escape they should disable function caching\");",
          "1064:             entry->nestedIndex = pnodeFnc->sxFnc.nestedIndex;",
          "1067:             slotIdInCachedScopeToNestedIndexArray->elements[slotCount] = pnodeFnc->sxFnc.nestedIndex;",
          "",
          "[Added Lines]",
          "1059:         Symbol *sym = pnodeFnc->AsParseNodeFnc()->GetFuncSymbol();",
          "1060:         if (sym != nullptr && (pnodeFnc->AsParseNodeFnc()->IsDeclaration()))",
          "1062:             AssertMsg(!pnodeFnc->AsParseNodeFnc()->IsGenerator(), \"Generator functions are not supported by InitCachedFuncs but since they always escape they should disable function caching\");",
          "1064:             entry->nestedIndex = pnodeFnc->AsParseNodeFnc()->nestedIndex;",
          "1067:             slotIdInCachedScopeToNestedIndexArray->elements[slotCount] = pnodeFnc->AsParseNodeFnc()->nestedIndex;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1078:     slotCount = 0;",
          "1079:     auto defineOrGetCachedFunc = [&](ParseNode *pnodeFnc)",
          "1080:     {",
          "1083:         {",
          "",
          "[Removed Lines]",
          "1081:         Symbol *sym = pnodeFnc->sxFnc.GetFuncSymbol();",
          "1082:         if (pnodeFnc->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "1081:         Symbol *sym = pnodeFnc->AsParseNodeFnc()->GetFuncSymbol();",
          "1082:         if (pnodeFnc->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1128:         {",
          "1129:             this->DefineOneFunction(pnodeFnc, funcInfoParent);",
          "",
          "[Removed Lines]",
          "1127:         if (pnodeFnc->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "1127:         if (pnodeFnc->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1139: void EmitAssignmentToFuncName(ParseNode *pnodeFnc, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfoParent)",
          "1140: {",
          "1144:     if (sym != nullptr && !sym->GetIsFuncExpr())",
          "1145:     {",
          "",
          "[Removed Lines]",
          "1142:     Symbol *sym = pnodeFnc->sxFnc.pnodeName->sxVar.sym;",
          "",
          "[Added Lines]",
          "1142:     Symbol *sym = pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1232:     if (regEnv == funcInfoParent->frameDisplayRegister || regEnv == funcInfoParent->GetEnvRegister())",
          "1233:     {",
          "1235:     }",
          "1236:     else",
          "1237:     {",
          "1239:     }",
          "1241:     if (funcInfoParent->IsGlobalFunction() && (this->flags & fscrEval))",
          "",
          "[Removed Lines]",
          "1234:         m_writer.NewFunction(pnodeFnc->location, pnodeFnc->sxFnc.nestedIndex, pnodeFnc->sxFnc.IsCoroutine());",
          "1238:         m_writer.NewInnerFunction(pnodeFnc->location, pnodeFnc->sxFnc.nestedIndex, regEnv, pnodeFnc->sxFnc.IsCoroutine());",
          "",
          "[Added Lines]",
          "1234:         m_writer.NewFunction(pnodeFnc->location, pnodeFnc->AsParseNodeFnc()->nestedIndex, pnodeFnc->AsParseNodeFnc()->IsCoroutine());",
          "1238:         m_writer.NewInnerFunction(pnodeFnc->location, pnodeFnc->AsParseNodeFnc()->nestedIndex, regEnv, pnodeFnc->AsParseNodeFnc()->IsCoroutine());",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1246:     }",
          "1247:     else",
          "1248:     {",
          "1250:         {",
          "1252:             if (funcSymbol)",
          "1253:             {",
          "",
          "[Removed Lines]",
          "1249:         if (pnodeFnc->sxFnc.IsDeclaration())",
          "1251:             Symbol * funcSymbol = pnodeFnc->sxFnc.GetFuncSymbol();",
          "",
          "[Added Lines]",
          "1249:         if (pnodeFnc->AsParseNodeFnc()->IsDeclaration())",
          "1251:             Symbol * funcSymbol = pnodeFnc->AsParseNodeFnc()->GetFuncSymbol();",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1292:         }",
          "1293:     }",
          "1296:     {",
          "1297:         this->EmitAssignmentToDefaultModuleExport(pnodeFnc, funcInfoParent);",
          "1298:     }",
          "1301:     {",
          "1302:         return regEnv;",
          "1303:     }",
          "",
          "[Removed Lines]",
          "1295:     if (pnodeFnc->sxFnc.IsDefaultModuleExport())",
          "1300:     if (pnodeFnc->sxFnc.pnodeName == nullptr || !generateAssignment)",
          "",
          "[Added Lines]",
          "1295:     if (pnodeFnc->AsParseNodeFnc()->IsDefaultModuleExport())",
          "1300:     if (pnodeFnc->AsParseNodeFnc()->pnodeName == nullptr || !generateAssignment)",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1320:     Js::RegSlot tmpReg = fGlobal ? funcInfo->AcquireTmpRegister() : Js::Constants::NoRegister;",
          "1323:     {",
          "1327:         {",
          "1328:             if (sym->IsSpecialSymbol())",
          "1329:             {",
          "",
          "[Removed Lines]",
          "1322:     for (pnode = funcInfo->root->sxFnc.pnodeVars; pnode; pnode = pnode->sxVar.pnodeNext)",
          "1324:         Symbol* sym = pnode->sxVar.sym;",
          "1326:         if (sym != nullptr && !(pnode->sxVar.isBlockScopeFncDeclVar && sym->GetIsBlockVar()))",
          "",
          "[Added Lines]",
          "1322:     for (pnode = funcInfo->root->AsParseNodeFnc()->pnodeVars; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "1324:         Symbol* sym = pnode->AsParseNodeVar()->sym;",
          "1326:         if (sym != nullptr && !(pnode->AsParseNodeVar()->isBlockScopeFncDeclVar && sym->GetIsBlockVar()))",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1336:                 {",
          "1337:                     EmitPropStoreForSpecialSymbol(sym->GetLocation(), sym, sym->GetPid(), funcInfo, true);",
          "",
          "[Removed Lines]",
          "1335:                 if (!funcInfo->root->sxFnc.HasNonSimpleParameterList())",
          "",
          "[Added Lines]",
          "1335:                 if (!funcInfo->root->AsParseNodeFnc()->HasNonSimpleParameterList())",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1474:         case knopFncDecl:",
          "1475:         {",
          "1479:             {",
          "1481:                 Assert(sym);",
          "1482:                 if (sym->GetLocation() != Js::Constants::NoRegister &&",
          "1483:                     sym->GetScope()->IsBlockScope(funcInfo) &&",
          "",
          "[Removed Lines]",
          "1477:             ParseNode *pnodeName = pnode->sxFnc.pnodeName;",
          "1478:             if (!pnode->sxFnc.IsMethod() && pnodeName && pnodeName->nop == knopVarDecl)",
          "1480:                 Symbol *sym = pnodeName->sxVar.sym;",
          "",
          "[Added Lines]",
          "1477:             ParseNode *pnodeName = pnode->AsParseNodeFnc()->pnodeName;",
          "1478:             if (!pnode->AsParseNodeFnc()->IsMethod() && pnodeName && pnodeName->nop == knopVarDecl)",
          "1480:                 Symbol *sym = pnodeName->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1488:             }",
          "1492:             break;",
          "1493:         }",
          "1495:         case knopBlock:",
          "1496:         {",
          "1498:             if (scope)",
          "1499:             {",
          "1500:                 if (scope->IsBlockScope(funcInfo))",
          "",
          "[Removed Lines]",
          "1491:             pnode = pnode->sxFnc.pnodeNext;",
          "1497:             Scope *scope = pnode->sxBlock.scope;",
          "",
          "[Added Lines]",
          "1491:             pnode = pnode->AsParseNodeFnc()->pnodeNext;",
          "1497:             Scope *scope = pnode->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1507:                 }",
          "1508:                 auto fnInit = [this, funcInfo](ParseNode *pnode)",
          "1509:                 {",
          "1511:                     if (!sym->IsInSlot(funcInfo) && !sym->GetIsGlobal() && !sym->GetIsModuleImport())",
          "1512:                     {",
          "1514:                     }",
          "1515:                 };",
          "1516:                 IterateBlockScopedVariables(pnode, fnInit);",
          "1517:             }",
          "1520:             break;",
          "1521:         }",
          "1522:         case knopCatch:",
          "1525:             break;",
          "1527:         case knopWith:",
          "",
          "[Removed Lines]",
          "1510:                     Symbol *sym = pnode->sxVar.sym;",
          "1513:                         this->m_writer.Reg1(Js::OpCode::InitUndecl, pnode->sxVar.sym->GetLocation());",
          "1518:             InitBlockScopedNonTemps(pnode->sxBlock.pnodeScopes, funcInfo);",
          "1519:             pnode = pnode->sxBlock.pnodeNext;",
          "1523:             InitBlockScopedNonTemps(pnode->sxCatch.pnodeScopes, funcInfo);",
          "1524:             pnode = pnode->sxCatch.pnodeNext;",
          "",
          "[Added Lines]",
          "1510:                     Symbol *sym = pnode->AsParseNodeVar()->sym;",
          "1513:                         this->m_writer.Reg1(Js::OpCode::InitUndecl, pnode->AsParseNodeVar()->sym->GetLocation());",
          "1518:             InitBlockScopedNonTemps(pnode->AsParseNodeBlock()->pnodeScopes, funcInfo);",
          "1519:             pnode = pnode->AsParseNodeBlock()->pnodeNext;",
          "1523:             InitBlockScopedNonTemps(pnode->AsParseNodeCatch()->pnodeScopes, funcInfo);",
          "1524:             pnode = pnode->AsParseNodeCatch()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1530:             AssertMsg(withLoc != Js::Constants::NoRegister && !funcInfo->IsTmpReg(withLoc),",
          "1531:                 \"We should put with objects at known stack locations in debug mode\");",
          "1532:             this->m_writer.Reg1(Js::OpCode::LdUndef, withLoc);",
          "1535:             break;",
          "1536:         }",
          "",
          "[Removed Lines]",
          "1533:             InitBlockScopedNonTemps(pnode->sxWith.pnodeScopes, funcInfo);",
          "1534:             pnode = pnode->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "1533:             InitBlockScopedNonTemps(pnode->AsParseNodeWith()->pnodeScopes, funcInfo);",
          "1534:             pnode = pnode->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1569:     ParseNode *pnode;",
          "1570:     Symbol *sym;",
          "1573:     {",
          "1575:     }",
          "1577:     if (funcInfo->GetHasArguments())",
          "",
          "[Removed Lines]",
          "1572:     if (funcInfo->GetFuncExprNameReference() && pnodeFnc->sxFnc.GetFuncSymbol()->GetScope() == funcInfo->GetBodyScope())",
          "1574:         Symbol::SaveToPropIdArray(pnodeFnc->sxFnc.GetFuncSymbol(), propIds, this);",
          "",
          "[Added Lines]",
          "1572:     if (funcInfo->GetFuncExprNameReference() && pnodeFnc->AsParseNodeFnc()->GetFuncSymbol()->GetScope() == funcInfo->GetBodyScope())",
          "1574:         Symbol::SaveToPropIdArray(pnodeFnc->AsParseNodeFnc()->GetFuncSymbol(), propIds, this);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1583:         {",
          "1584:             if (pnode->IsVarLetOrConst())",
          "1585:             {",
          "1587:                 Assert(sym);",
          "1588:                 if (sym->GetScopeSlot() == slot)",
          "1589:                 {",
          "",
          "[Removed Lines]",
          "1586:                 Symbol *sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "1586:                 Symbol *sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1608:         MapFormalsWithoutRest(pnodeFnc, initArg);",
          "1612:         {",
          "1614:         }",
          "1615:     }",
          "1616:     else",
          "",
          "[Removed Lines]",
          "1611:         if (pnodeFnc->sxFnc.pnodeRest != nullptr && pnodeFnc->sxFnc.pnodeRest->sxVar.sym->IsInSlot(funcInfo))",
          "1613:             Symbol::SaveToPropIdArray(pnodeFnc->sxFnc.pnodeRest->sxVar.sym, propIds, this);",
          "",
          "[Added Lines]",
          "1611:         if (pnodeFnc->AsParseNodeFnc()->pnodeRest != nullptr && pnodeFnc->AsParseNodeFnc()->pnodeRest->AsParseNodeVar()->sym->IsInSlot(funcInfo))",
          "1613:             Symbol::SaveToPropIdArray(pnodeFnc->AsParseNodeFnc()->pnodeRest->AsParseNodeVar()->sym, propIds, this);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1619:         {",
          "1620:             if (pnode->IsVarLetOrConst())",
          "1621:             {",
          "1623:             }",
          "1624:         });",
          "1625:     }",
          "1627:     auto saveFunctionVarsToPropIdArray = [&](ParseNode *pnodeFunction)",
          "1628:     {",
          "1630:         {",
          "1632:             if (pnodeName != nullptr)",
          "1633:             {",
          "1634:                 while (pnodeName->nop == knopList)",
          "1635:                 {",
          "1637:                     {",
          "1639:                         if (sym)",
          "1640:                         {",
          "1641:                             Symbol::SaveToPropIdArray(sym, propIds, this, &firstFuncSlot);",
          "1642:                         }",
          "1643:                     }",
          "1645:                 }",
          "1646:                 if (pnodeName->nop == knopVarDecl)",
          "1647:                 {",
          "1649:                     if (sym)",
          "1650:                     {",
          "1651:                         Symbol::SaveToPropIdArray(sym, propIds, this, &firstFuncSlot);",
          "",
          "[Removed Lines]",
          "1622:                 Symbol::SaveToPropIdArray(pnode->sxVar.sym, propIds, this);",
          "1629:         if (pnodeFunction->sxFnc.IsDeclaration())",
          "1631:             ParseNode *pnodeName = pnodeFunction->sxFnc.pnodeName;",
          "1636:                     if (pnodeName->sxBin.pnode1->nop == knopVarDecl)",
          "1638:                         sym = pnodeName->sxBin.pnode1->sxVar.sym;",
          "1644:                     pnodeName = pnodeName->sxBin.pnode2;",
          "1648:                     sym = pnodeName->sxVar.sym;",
          "",
          "[Added Lines]",
          "1622:                 Symbol::SaveToPropIdArray(pnode->AsParseNodeVar()->sym, propIds, this);",
          "1629:         if (pnodeFunction->AsParseNodeFnc()->IsDeclaration())",
          "1631:             ParseNode *pnodeName = pnodeFunction->AsParseNodeFnc()->pnodeName;",
          "1636:                     if (pnodeName->AsParseNodeBin()->pnode1->nop == knopVarDecl)",
          "1638:                         sym = pnodeName->AsParseNodeBin()->pnode1->AsParseNodeVar()->sym;",
          "1644:                     pnodeName = pnodeName->AsParseNodeBin()->pnode2;",
          "1648:                     sym = pnodeName->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1660:     if (currentScope->GetScopeType() != ScopeType_Parameter)",
          "1661:     {",
          "1663:         {",
          "1666:             {",
          "1667:                 if (sym->GetIsCatch() || (pnode->nop == knopVarDecl && sym->GetIsBlockVar()))",
          "1668:                 {",
          "",
          "[Removed Lines]",
          "1662:         for (pnode = pnodeFnc->sxFnc.pnodeVars; pnode; pnode = pnode->sxVar.pnodeNext)",
          "1664:             sym = pnode->sxVar.sym;",
          "1665:             if (!(pnode->sxVar.isBlockScopeFncDeclVar && sym->GetIsBlockVar()))",
          "",
          "[Added Lines]",
          "1662:         for (pnode = pnodeFnc->AsParseNodeFnc()->pnodeVars; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "1664:             sym = pnode->AsParseNodeVar()->sym;",
          "1665:             if (!(pnode->AsParseNodeVar()->isBlockScopeFncDeclVar && sym->GetIsBlockVar()))",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1672:             }",
          "1673:         }",
          "1677:         {",
          "1679:             Symbol::SaveToPropIdArray(sym, propIds, this, &firstVarSlot);",
          "1680:         }",
          "1684:         {",
          "1686:             Symbol::SaveToPropIdArray(sym, propIds, this, &firstVarSlot);",
          "1687:         }",
          "1688:     }",
          "",
          "[Removed Lines]",
          "1675:         ParseNode *pnodeBlock = pnodeFnc->sxFnc.pnodeScopes;",
          "1676:         for (pnode = pnodeBlock->sxBlock.pnodeLexVars; pnode; pnode = pnode->sxVar.pnodeNext)",
          "1678:             sym = pnode->sxVar.sym;",
          "1682:         pnodeBlock = pnodeFnc->sxFnc.pnodeBodyScope;",
          "1683:         for (pnode = pnodeBlock->sxBlock.pnodeLexVars; pnode; pnode = pnode->sxVar.pnodeNext)",
          "1685:             sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "1675:         ParseNode *pnodeBlock = pnodeFnc->AsParseNodeFnc()->pnodeScopes;",
          "1676:         for (pnode = pnodeBlock->AsParseNodeBlock()->pnodeLexVars; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "1678:             sym = pnode->AsParseNodeVar()->sym;",
          "1682:         pnodeBlock = pnodeFnc->AsParseNodeFnc()->pnodeBodyScope;",
          "1683:         for (pnode = pnodeBlock->AsParseNodeBlock()->pnodeLexVars; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "1685:             sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1698:     slots[2] = firstVarSlot;",
          "1699:     slots[3] = funcInfo->GetParsedFunctionBody()->NewObjectLiteral();",
          "1703:     funcInfo->GetParsedFunctionBody()->SetHasCachedScopePropIds(true);",
          "1704: }",
          "",
          "[Removed Lines]",
          "1701:     propIds->hasNonSimpleParams = funcInfo->root->sxFnc.HasNonSimpleParameterList();",
          "",
          "[Added Lines]",
          "1701:     propIds->hasNonSimpleParams = funcInfo->root->AsParseNodeFnc()->HasNonSimpleParameterList();",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1995:     }",
          "1996:     else if (!funcInfo->IsGlobalFunction() && !IsInNonDebugMode())",
          "1997:     {",
          "1999:         if (count != 0)",
          "2000:         {",
          "2001:             Js::PropertyIdArray *propIds = RecyclerNewPlus(scriptContext->GetRecycler(), UInt32Math::Mul(count, sizeof(Js::PropertyId)), Js::PropertyIdArray, count, 0);",
          "",
          "[Removed Lines]",
          "1998:         uint count = funcInfo->inArgsCount + (funcInfo->root->sxFnc.pnodeRest != nullptr ? 1 : 0) - 1;",
          "",
          "[Added Lines]",
          "1998:         uint count = funcInfo->inArgsCount + (funcInfo->root->AsParseNodeFnc()->pnodeRest != nullptr ? 1 : 0) - 1;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2046:     bool funcExprWithName = !funcInfo->IsGlobalFunction() && sym && sym->GetIsFuncExpr();",
          "2048:     if (funcExprWithName)",
          "",
          "[Removed Lines]",
          "2045:     sym = funcInfo->root->sxFnc.GetFuncSymbol();",
          "",
          "[Added Lines]",
          "2045:     sym = funcInfo->root->AsParseNodeFnc()->GetFuncSymbol();",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2235:     funcInfo->AcquireLoc(pnode);",
          "",
          "[Removed Lines]",
          "2238:     funcInfo->AcquireLoc(pnode->sxSuperCall.pnodeThis);",
          "2239:     EmitPropLoadThis(pnode->sxSuperCall.pnodeThis->location, pnode->sxSuperCall.pnodeThis, funcInfo, false);",
          "2241:     EmitLoad(pnode->sxSuperCall.pnodeNewTarget, this, funcInfo);",
          "2243:     Assert(pnode->sxCall.isSuperCall);",
          "2244:     EmitLoad(pnode->sxCall.pnodeTarget, this, funcInfo);",
          "",
          "[Added Lines]",
          "2238:     funcInfo->AcquireLoc(pnode->AsParseNodeSuperCall()->pnodeThis);",
          "2239:     EmitPropLoadThis(pnode->AsParseNodeSuperCall()->pnodeThis->location, pnode->AsParseNodeSuperCall()->pnodeThis, funcInfo, false);",
          "2241:     EmitLoad(pnode->AsParseNodeSuperCall()->pnodeNewTarget, this, funcInfo);",
          "2243:     Assert(pnode->AsParseNodeCall()->isSuperCall);",
          "2244:     EmitLoad(pnode->AsParseNodeCall()->pnodeTarget, this, funcInfo);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2270:     Js::ByteCodeLabel useSuperCallResultLabel = this->Writer()->DefineLabel();",
          "2271:     Js::ByteCodeLabel doneLabel = this->Writer()->DefineLabel();",
          "2274:     this->Writer()->BrReg1(Js::OpCode::BrOnClassConstructor, useNewTargetForThisLabel, tmpReg);",
          "2276:     this->Writer()->Br(Js::OpCode::Br, makeCallLabel);",
          "2277:     this->Writer()->MarkLabel(useNewTargetForThisLabel);",
          "2279:     this->Writer()->MarkLabel(makeCallLabel);",
          "",
          "[Removed Lines]",
          "2273:     Js::RegSlot tmpReg = this->EmitLdObjProto(Js::OpCode::LdFuncObjProto, pnode->sxCall.pnodeTarget->location, funcInfo);",
          "2275:     this->Writer()->Reg2(Js::OpCode::NewScObjectNoCtorFull, thisForSuperCall, pnode->sxSuperCall.pnodeNewTarget->location);",
          "2278:     this->Writer()->Reg2(Js::OpCode::Ld_A, thisForSuperCall, pnode->sxSuperCall.pnodeNewTarget->location);",
          "2280:     EmitCall(pnode, this, funcInfo, fReturnValue, /*fEvaluateComponents*/ true, thisForSuperCall, pnode->sxSuperCall.pnodeNewTarget->location);",
          "",
          "[Added Lines]",
          "2273:     Js::RegSlot tmpReg = this->EmitLdObjProto(Js::OpCode::LdFuncObjProto, pnode->AsParseNodeCall()->pnodeTarget->location, funcInfo);",
          "2275:     this->Writer()->Reg2(Js::OpCode::NewScObjectNoCtorFull, thisForSuperCall, pnode->AsParseNodeSuperCall()->pnodeNewTarget->location);",
          "2278:     this->Writer()->Reg2(Js::OpCode::Ld_A, thisForSuperCall, pnode->AsParseNodeSuperCall()->pnodeNewTarget->location);",
          "2280:     EmitCall(pnode, this, funcInfo, fReturnValue, /*fEvaluateComponents*/ true, thisForSuperCall, pnode->AsParseNodeSuperCall()->pnodeNewTarget->location);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2300:     Js::ByteCodeLabel skipLabel = this->Writer()->DefineLabel();",
          "2301:     this->Writer()->Reg1(Js::OpCode::InitUndecl, tmpUndeclReg);",
          "2303:     this->Writer()->W1(Js::OpCode::RuntimeReferenceError, SCODE_CODE(JSERR_ClassThisAlreadyAssigned));",
          "2304:     this->Writer()->MarkLabel(skipLabel);",
          "",
          "[Removed Lines]",
          "2302:     this->Writer()->BrReg2(Js::OpCode::BrSrEq_A, skipLabel, pnode->sxSuperCall.pnodeThis->location, tmpUndeclReg);",
          "",
          "[Added Lines]",
          "2302:     this->Writer()->BrReg2(Js::OpCode::BrSrEq_A, skipLabel, pnode->AsParseNodeSuperCall()->pnodeThis->location, tmpUndeclReg);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2309:         this->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, valueForThis);",
          "2310:     }",
          "2317:     funcInfo->ReleaseTmpRegister(tmpUndeclReg);",
          "2318:     funcInfo->ReleaseTmpRegister(valueForThis);",
          "2319:     funcInfo->ReleaseTmpRegister(thisForSuperCall);",
          "2324: }",
          "2326: void ByteCodeGenerator::EmitClassConstructorEndCode(FuncInfo *funcInfo)",
          "",
          "[Removed Lines]",
          "2312:     Symbol* thisSym = pnode->sxSuperCall.pnodeThis->sxPid.sym;",
          "2313:     this->Writer()->Reg2(Js::OpCode::StrictLdThis, pnode->sxSuperCall.pnodeThis->location, valueForThis);",
          "2315:     EmitPropStoreForSpecialSymbol(pnode->sxSuperCall.pnodeThis->location, thisSym, pnode->sxSuperCall.pnodeThis->sxPid.pid, funcInfo, false);",
          "2321:     funcInfo->ReleaseLoc(pnode->sxCall.pnodeTarget);",
          "2322:     funcInfo->ReleaseLoc(pnode->sxSuperCall.pnodeNewTarget);",
          "2323:     funcInfo->ReleaseLoc(pnode->sxSuperCall.pnodeThis);",
          "",
          "[Added Lines]",
          "2312:     Symbol* thisSym = pnode->AsParseNodeSuperCall()->pnodeThis->AsParseNodePid()->sym;",
          "2313:     this->Writer()->Reg2(Js::OpCode::StrictLdThis, pnode->AsParseNodeSuperCall()->pnodeThis->location, valueForThis);",
          "2315:     EmitPropStoreForSpecialSymbol(pnode->AsParseNodeSuperCall()->pnodeThis->location, thisSym, pnode->AsParseNodeSuperCall()->pnodeThis->AsParseNodePid()->pid, funcInfo, false);",
          "2321:     funcInfo->ReleaseLoc(pnode->AsParseNodeCall()->pnodeTarget);",
          "2322:     funcInfo->ReleaseLoc(pnode->AsParseNodeSuperCall()->pnodeNewTarget);",
          "2323:     funcInfo->ReleaseLoc(pnode->AsParseNodeSuperCall()->pnodeThis);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2352:     {",
          "2356:         if (formal->GetLocation() + 1 == pos)",
          "2357:         {",
          "",
          "[Removed Lines]",
          "2355:         Symbol *formal = pnodeFormal->sxVar.sym;",
          "",
          "[Added Lines]",
          "2355:         Symbol *formal = pnodeFormal->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2370:         {",
          "2371:             if (pnodeFormal->IsVarLetOrConst())",
          "2372:             {",
          "2374:                 if (!formal->IsInSlot(funcInfo))",
          "2375:                 {",
          "2376:                     Assert(!formal->GetHasInit());",
          "",
          "[Removed Lines]",
          "2373:                 Symbol* formal = pnodeFormal->sxVar.sym;",
          "",
          "[Added Lines]",
          "2373:                 Symbol* formal = pnodeFormal->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2386:     if (funcInfo->GetHasArguments())",
          "2387:     {",
          "2389:         {",
          "2392:         }",
          "",
          "[Removed Lines]",
          "2388:         if (funcInfo->root->sxFnc.pnodeRest != nullptr)",
          "2391:             EmitLoadFormalIntoRegister(funcInfo->root->sxFnc.pnodeRest, funcInfo->root->sxFnc.pnodeRest->sxVar.sym->GetLocation() + 1, funcInfo);",
          "",
          "[Added Lines]",
          "2388:         if (funcInfo->root->AsParseNodeFnc()->pnodeRest != nullptr)",
          "2391:             EmitLoadFormalIntoRegister(funcInfo->root->AsParseNodeFnc()->pnodeRest, funcInfo->root->AsParseNodeFnc()->pnodeRest->AsParseNodeVar()->sym->GetLocation() + 1, funcInfo);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2411:     while (iter.Next())",
          "2412:     {",
          "2413:         ParseNode * node = iter.Data();",
          "2416:         node->emitLabels = true;",
          "2417:     }",
          "2418: }",
          "",
          "[Removed Lines]",
          "2414:         node->sxStmt.breakLabel = m_writer.DefineLabel();",
          "2415:         node->sxStmt.continueLabel = m_writer.DefineLabel();",
          "",
          "[Added Lines]",
          "2414:         node->AsParseNodeStmt()->breakLabel = m_writer.DefineLabel();",
          "2415:         node->AsParseNodeStmt()->continueLabel = m_writer.DefineLabel();",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2421: {",
          "2426:     if (pnodeLastVal == nullptr)",
          "2427:     {",
          "",
          "[Removed Lines]",
          "2424:     ParseNode *pnode = funcInfo->root->sxFnc.pnodeBody;",
          "2425:     ParseNode *pnodeLastVal = funcInfo->root->sxProg.pnodeLastValStmt;",
          "",
          "[Added Lines]",
          "2424:     ParseNode *pnode = funcInfo->root->AsParseNodeFnc()->pnodeBody;",
          "2425:     ParseNode *pnodeLastVal = funcInfo->root->AsParseNodeProg()->pnodeLastValStmt;",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2433:     while (pnode->nop == knopList)",
          "2434:     {",
          "2436:         if (stmt == pnodeLastVal)",
          "2437:         {",
          "2438:             pnodeLastVal = nullptr;",
          "",
          "[Removed Lines]",
          "2435:         ParseNode *stmt = pnode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "2435:         ParseNode *stmt = pnode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2448:             EmitTopLevelStatement(stmt, funcInfo, false);",
          "2449:         }",
          "2451:     }",
          "2452:     EmitTopLevelStatement(pnode, funcInfo, false);",
          "2453: }",
          "",
          "[Removed Lines]",
          "2450:         pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "2450:         pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2456: {",
          "2460:     ParseNode *pnode = pnodeBody;",
          "2461:     while (pnode->nop == knopList)",
          "2462:     {",
          "2464:         if (stmt->CapturesSyms())",
          "2465:         {",
          "2466:             CapturedSymMap *map = funcInfo->EnsureCapturedSymMap();",
          "",
          "[Removed Lines]",
          "2459:     ParseNode *pnodeBody = funcInfo->root->sxFnc.pnodeBody;",
          "2463:         ParseNode *stmt = pnode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "2459:     ParseNode *pnodeBody = funcInfo->root->AsParseNodeFnc()->pnodeBody;",
          "2463:         ParseNode *stmt = pnode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2490:             NEXT_SLIST_ENTRY;",
          "2491:         }",
          "2492:         EmitTopLevelStatement(stmt, funcInfo, false);",
          "2494:     }",
          "2495:     Assert(!pnode->CapturesSyms());",
          "2496:     EmitTopLevelStatement(pnode, funcInfo, false);",
          "",
          "[Removed Lines]",
          "2493:         pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "2493:         pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2502:     this->isBinding = false;",
          "2503:     this->trackEnvDepth = true;",
          "2506:     int32 initSize = this->maxAstSize / AstBytecodeRatioEstimate;",
          "",
          "[Removed Lines]",
          "2504:     AssignPropertyIds(pnodeProg->sxFnc.funcInfo->byteCodeFunction);",
          "",
          "[Added Lines]",
          "2504:     AssignPropertyIds(pnodeProg->AsParseNodeFnc()->funcInfo->byteCodeFunction);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2519:     {",
          "2523:     }",
          "2524:     else",
          "2525:     {",
          "",
          "[Removed Lines]",
          "2522:         this->EmitScopeList(pnodeProg->sxProg.pnodeScopes);",
          "",
          "[Added Lines]",
          "2522:         this->EmitScopeList(pnodeProg->AsParseNodeProg()->pnodeScopes);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2542:                 debuggerScope->SetBegin(beginOffset);",
          "2543:             }",
          "2546:         }",
          "2547:     };",
          "",
          "[Removed Lines]",
          "2545:             InsertPropertyToDebuggerScope(funcInfo, debuggerScope, pnodeArg->sxVar.sym);",
          "",
          "[Added Lines]",
          "2545:             InsertPropertyToDebuggerScope(funcInfo, debuggerScope, pnodeArg->AsParseNodeVar()->sym);",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2587:         {",
          "2588:             this->StartStatement(pnodeArg);",
          "2593:             if (pnode1->IsPattern())",
          "2594:             {",
          "2596:             }",
          "2597:             else",
          "2598:             {",
          "2599:                 Assert(pnode1->nop == knopAsg);",
          "2604:                     false /*isNonPatternAssignmentTarget*/,",
          "2605:                     this,",
          "2606:                     funcInfo);",
          "",
          "[Removed Lines]",
          "2590:             Assert(pnodeArg->sxParamPattern.location != Js::Constants::NoRegister);",
          "2591:             ParseNodePtr pnode1 = pnodeArg->sxParamPattern.pnode1;",
          "2595:                 EmitAssignment(nullptr, pnode1, pnodeArg->sxParamPattern.location, this, funcInfo);",
          "2600:                 Assert(pnode1->sxBin.pnode1->IsPattern());",
          "2601:                 EmitDestructuredValueOrInitializer(pnode1->sxBin.pnode1,",
          "2602:                     pnodeArg->sxParamPattern.location,",
          "2603:                     pnode1->sxBin.pnode2,",
          "",
          "[Added Lines]",
          "2590:             Assert(pnodeArg->AsParseNodeParamPattern()->location != Js::Constants::NoRegister);",
          "2591:             ParseNodePtr pnode1 = pnodeArg->AsParseNodeParamPattern()->pnode1;",
          "2595:                 EmitAssignment(nullptr, pnode1, pnodeArg->AsParseNodeParamPattern()->location, this, funcInfo);",
          "2600:                 Assert(pnode1->AsParseNodeBin()->pnode1->IsPattern());",
          "2601:                 EmitDestructuredValueOrInitializer(pnode1->AsParseNodeBin()->pnode1,",
          "2602:                     pnodeArg->AsParseNodeParamPattern()->location,",
          "2603:                     pnode1->AsParseNodeBin()->pnode2,",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2610:         }",
          "2611:         else if (pnodeArg->IsVarLetOrConst())",
          "2612:         {",
          "2616:             {",
          "2621:                 return;",
          "2622:             }",
          "",
          "[Removed Lines]",
          "2613:             Js::RegSlot location = pnodeArg->sxVar.sym->GetLocation();",
          "2615:             if (pnodeArg->sxVar.pnodeInit == nullptr)",
          "2618:                 pnodeArg->sxVar.sym->SetNeedDeclaration(false);",
          "2619:                 EmitPropStore(location, pnodeArg->sxVar.sym, pnodeArg->sxVar.pid, funcInfo, true);",
          "",
          "[Added Lines]",
          "2613:             Js::RegSlot location = pnodeArg->AsParseNodeVar()->sym->GetLocation();",
          "2615:             if (pnodeArg->AsParseNodeVar()->pnodeInit == nullptr)",
          "2618:                 pnodeArg->AsParseNodeVar()->sym->SetNeedDeclaration(false);",
          "2619:                 EmitPropStore(location, pnodeArg->AsParseNodeVar()->sym, pnodeArg->AsParseNodeVar()->pid, funcInfo, true);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2629:             m_writer.BrReg2(Js::OpCode::BrSrNeq_A, noDefaultLabel, location, funcInfo->undefinedConstantRegister);",
          "2635:             {",
          "2638:                 m_writer.Br(endLabel);",
          "2639:             }",
          "2640:             else",
          "2641:             {",
          "2643:             }",
          "2647:             m_writer.MarkLabel(noDefaultLabel);",
          "2650:             {",
          "2653:                 m_writer.MarkLabel(endLabel);",
          "2654:             }",
          "",
          "[Removed Lines]",
          "2631:             Emit(pnodeArg->sxVar.pnodeInit, this, funcInfo, false);",
          "2632:             pnodeArg->sxVar.sym->SetNeedDeclaration(false); // After emit to prevent foo(a = a)",
          "2634:             if (funcInfo->GetHasArguments() && pnodeArg->sxVar.sym->IsInSlot(funcInfo))",
          "2636:                 EmitPropStore(pnodeArg->sxVar.pnodeInit->location, pnodeArg->sxVar.sym, pnodeArg->sxVar.pid, funcInfo, true);",
          "2642:                 EmitAssignment(nullptr, pnodeArg, pnodeArg->sxVar.pnodeInit->location, this, funcInfo);",
          "2645:             funcInfo->ReleaseLoc(pnodeArg->sxVar.pnodeInit);",
          "2649:             if (funcInfo->GetHasArguments() && pnodeArg->sxVar.sym->IsInSlot(funcInfo))",
          "2651:                 EmitPropStore(location, pnodeArg->sxVar.sym, pnodeArg->sxVar.pid, funcInfo, true);",
          "",
          "[Added Lines]",
          "2631:             Emit(pnodeArg->AsParseNodeVar()->pnodeInit, this, funcInfo, false);",
          "2632:             pnodeArg->AsParseNodeVar()->sym->SetNeedDeclaration(false); // After emit to prevent foo(a = a)",
          "2634:             if (funcInfo->GetHasArguments() && pnodeArg->AsParseNodeVar()->sym->IsInSlot(funcInfo))",
          "2636:                 EmitPropStore(pnodeArg->AsParseNodeVar()->pnodeInit->location, pnodeArg->AsParseNodeVar()->sym, pnodeArg->AsParseNodeVar()->pid, funcInfo, true);",
          "2642:                 EmitAssignment(nullptr, pnodeArg, pnodeArg->AsParseNodeVar()->pnodeInit->location, this, funcInfo);",
          "2645:             funcInfo->ReleaseLoc(pnodeArg->AsParseNodeVar()->pnodeInit);",
          "2649:             if (funcInfo->GetHasArguments() && pnodeArg->AsParseNodeVar()->sym->IsInSlot(funcInfo))",
          "2651:                 EmitPropStore(location, pnodeArg->AsParseNodeVar()->sym, pnodeArg->AsParseNodeVar()->pid, funcInfo, true);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2658:     };",
          "2662:     {",
          "2663:         uint cacheId;",
          "2664:         Js::ByteCodeLabel catchLabel = m_writer.DefineLabel();",
          "",
          "[Removed Lines]",
          "2661:     if (pnode->sxFnc.IsAsync())",
          "",
          "[Added Lines]",
          "2661:     if (pnode->AsParseNodeFnc()->IsAsync())",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2721: void ByteCodeGenerator::EmitOneFunction(ParseNode *pnode)",
          "2722: {",
          "2723:     Assert(pnode && (pnode->nop == knopProg || pnode->nop == knopFncDecl));",
          "2725:     Assert(funcInfo != nullptr);",
          "2727:     if (funcInfo->IsFakeGlobalFunction(this->flags))",
          "",
          "[Removed Lines]",
          "2724:     FuncInfo *funcInfo = pnode->sxFnc.funcInfo;",
          "",
          "[Added Lines]",
          "2724:     FuncInfo *funcInfo = pnode->AsParseNodeFnc()->funcInfo;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2737:         ((this->flags & fscrDynamicCode) && !(this->flags & fscrEvalCode)));",
          "2739:     deferParseFunction->SetInParamsCount(funcInfo->inArgsCount);",
          "2741:     {",
          "2743:     }",
          "2744:     else",
          "2745:     {",
          "",
          "[Removed Lines]",
          "2740:     if (pnode->sxFnc.HasDefaultArguments())",
          "2742:         deferParseFunction->SetReportedInParamsCount(pnode->sxFnc.firstDefaultArg + 1);",
          "",
          "[Added Lines]",
          "2740:     if (pnode->AsParseNodeFnc()->HasDefaultArguments())",
          "2742:         deferParseFunction->SetReportedInParamsCount(pnode->AsParseNodeFnc()->firstDefaultArg + 1);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2753:         Js::ScopeInfo::SaveEnclosingScopeInfo(this, funcInfo);",
          "2754:     }",
          "2757:     {",
          "2758:         if (!PHASE_OFF1(Js::SkipNestedDeferredPhase))",
          "2759:         {",
          "",
          "[Removed Lines]",
          "2756:     if (funcInfo->root->sxFnc.pnodeBody == nullptr)",
          "",
          "[Added Lines]",
          "2756:     if (funcInfo->root->AsParseNodeFnc()->pnodeBody == nullptr)",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2780: #if DBG",
          "2781:                 byteCodeFunction->SetCanDoStackNestedFunc();",
          "2782: #endif",
          "2784:                 {",
          "2785:                     byteCodeFunction->SetStackNestedFunc(true);",
          "2786:                 }",
          "",
          "[Removed Lines]",
          "2783:                 if (funcInfo->root->sxFnc.astSize <= PnFnc::MaxStackClosureAST)",
          "",
          "[Added Lines]",
          "2783:                 if (funcInfo->root->AsParseNodeFnc()->astSize <= ParseNodeFnc::MaxStackClosureAST)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2813:         {",
          "2814:             byteCodeFunction->SetHasOnlyThisStmts(true);",
          "2815:         }",
          "",
          "[Removed Lines]",
          "2812:         if (funcInfo->root->sxFnc.HasOnlyThisStmts() && !IsInDebugMode())",
          "",
          "[Added Lines]",
          "2812:         if (funcInfo->root->AsParseNodeFnc()->HasOnlyThisStmts() && !IsInDebugMode())",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2819:             if ((pnode->nop == knopFncDecl) && (funcInfo->GetHasHeapArguments()) && (!funcInfo->GetCallsEval()) && ApplyEnclosesArgs(pnode, this))",
          "2820:             {",
          "2821:                 bool applyEnclosesArgs = true;",
          "2823:                 {",
          "2825:                     if (sym->GetSymbolType() == STVariable && !sym->IsArguments())",
          "2826:                     {",
          "2827:                         applyEnclosesArgs = false;",
          "",
          "[Removed Lines]",
          "2822:                 for (ParseNode* pnodeVar = funcInfo->root->sxFnc.pnodeVars; pnodeVar; pnodeVar = pnodeVar->sxVar.pnodeNext)",
          "2824:                     Symbol* sym = pnodeVar->sxVar.sym;",
          "",
          "[Added Lines]",
          "2822:                 for (ParseNode* pnodeVar = funcInfo->root->AsParseNodeFnc()->pnodeVars; pnodeVar; pnodeVar = pnodeVar->AsParseNodeVar()->pnodeNext)",
          "2824:                     Symbol* sym = pnodeVar->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2832:                 {",
          "2833:                     if (*applyEnclosesArgs)",
          "2834:                     {",
          "2836:                         {",
          "2838:                             if (sym->GetSymbolType() == STVariable && !sym->IsArguments())",
          "2839:                             {",
          "",
          "[Removed Lines]",
          "2835:                         for (auto lexvar = pnodeBlock->sxBlock.pnodeLexVars; lexvar; lexvar = lexvar->sxVar.pnodeNext)",
          "2837:                             Symbol* sym = lexvar->sxVar.sym;",
          "",
          "[Added Lines]",
          "2835:                         for (auto lexvar = pnodeBlock->AsParseNodeBlock()->pnodeLexVars; lexvar; lexvar = lexvar->AsParseNodeVar()->pnodeNext)",
          "2837:                             Symbol* sym = lexvar->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2843:                         }",
          "2844:                     }",
          "2845:                 };",
          "2848:                 funcInfo->SetApplyEnclosesArgs(applyEnclosesArgs);",
          "2849:             }",
          "2850:         }",
          "",
          "[Removed Lines]",
          "2846:                 constAndLetCheck(funcInfo->root->sxFnc.pnodeScopes, &applyEnclosesArgs);",
          "2847:                 constAndLetCheck(funcInfo->root->sxFnc.pnodeBodyScope, &applyEnclosesArgs);",
          "",
          "[Added Lines]",
          "2846:                 constAndLetCheck(funcInfo->root->AsParseNodeFnc()->pnodeScopes, &applyEnclosesArgs);",
          "2847:                 constAndLetCheck(funcInfo->root->AsParseNodeFnc()->pnodeBodyScope, &applyEnclosesArgs);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2910:             Assert(this->GetCurrentScope() == paramScope);",
          "2911:         }",
          "2914:         {",
          "2915:             byteCodeFunction->SetHasRestParameter();",
          "2916:         }",
          "2918:         if (funcInfo->IsGlobalFunction())",
          "2919:         {",
          "2921:         }",
          "2925:         DefineLabels(funcInfo);",
          "2930:         {",
          "2933:             if (funcInfo->IsBodyAndParamScopeMerged())",
          "2934:             {",
          "2936:                 {",
          "2937: #if DBG",
          "2938:                     bool reachedEndOfSpecialSymbols = false;",
          "2939: #endif",
          "2942:                     if (sym != nullptr && sym->IsSpecialSymbol())",
          "2943:                     {",
          "",
          "[Removed Lines]",
          "2913:         if (funcInfo->root->sxFnc.pnodeRest != nullptr)",
          "2920:             EnsureNoRedeclarations(pnode->sxFnc.pnodeScopes, funcInfo);",
          "2923:         ::BeginEmitBlock(pnode->sxFnc.pnodeScopes, this, funcInfo);",
          "2929:         if (pnode->sxFnc.HasNonSimpleParameterList())",
          "2935:                 for (ParseNodePtr pnodeVar = pnode->sxFnc.pnodeVars; pnodeVar; pnodeVar = pnodeVar->sxVar.pnodeNext)",
          "2940:                     Symbol* sym = pnodeVar->sxVar.sym;",
          "",
          "[Added Lines]",
          "2913:         if (funcInfo->root->AsParseNodeFnc()->pnodeRest != nullptr)",
          "2920:             EnsureNoRedeclarations(pnode->AsParseNodeFnc()->pnodeScopes, funcInfo);",
          "2923:         ::BeginEmitBlock(pnode->AsParseNodeFnc()->pnodeScopes, this, funcInfo);",
          "2929:         if (pnode->AsParseNodeFnc()->HasNonSimpleParameterList())",
          "2935:                 for (ParseNodePtr pnodeVar = pnode->AsParseNodeFnc()->pnodeVars; pnodeVar; pnodeVar = pnodeVar->AsParseNodeVar()->pnodeNext)",
          "2940:                     Symbol* sym = pnodeVar->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2977:             }",
          "2978:         }",
          "2981:         {",
          "2986:             EmitDefaultArgs(funcInfo, pnode);",
          "",
          "[Removed Lines]",
          "2980:         if (pnode->sxFnc.HasNonSimpleParameterList() || !funcInfo->IsBodyAndParamScopeMerged())",
          "2982:             Assert(pnode->sxFnc.HasNonSimpleParameterList() || CONFIG_FLAG(ForceSplitScope));",
          "2984:             this->InitBlockScopedNonTemps(funcInfo->root->sxFnc.pnodeScopes, funcInfo);",
          "",
          "[Added Lines]",
          "2980:         if (pnode->AsParseNodeFnc()->HasNonSimpleParameterList() || !funcInfo->IsBodyAndParamScopeMerged())",
          "2982:             Assert(pnode->AsParseNodeFnc()->HasNonSimpleParameterList() || CONFIG_FLAG(ForceSplitScope));",
          "2984:             this->InitBlockScopedNonTemps(funcInfo->root->AsParseNodeFnc()->pnodeScopes, funcInfo);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3006:         {",
          "3007:             Js::RegSlot tempReg = funcInfo->AcquireTmpRegister();",
          "3008:             EmitYield(funcInfo->AssignUndefinedConstRegister(), tempReg, this, funcInfo);",
          "",
          "[Removed Lines]",
          "3005:         if (pnode->sxFnc.IsGenerator())",
          "",
          "[Added Lines]",
          "3005:         if (pnode->AsParseNodeFnc()->IsGenerator())",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3023:             DefineFunctions(funcInfo);",
          "3024:         }",
          "3027:         {",
          "3030:         }",
          "3031:         else",
          "3032:         {",
          "3034:         }",
          "3037:         {",
          "3040:         }",
          "3044:         {",
          "3046:         }",
          "3048:         Js::RegSlot formalsUpperBound = Js::Constants::NoRegister; // Needed for tracking the last RegSlot in the param scope",
          "",
          "[Removed Lines]",
          "3026:         if (pnode->sxFnc.HasNonSimpleParameterList() || !funcInfo->IsBodyAndParamScopeMerged())",
          "3028:             Assert(pnode->sxFnc.HasNonSimpleParameterList() || CONFIG_FLAG(ForceSplitScope));",
          "3029:             this->InitBlockScopedNonTemps(funcInfo->root->sxFnc.pnodeBodyScope, funcInfo);",
          "3033:             this->InitBlockScopedNonTemps(funcInfo->root->sxFnc.pnodeScopes, funcInfo);",
          "3036:         if (!pnode->sxFnc.HasNonSimpleParameterList() && funcInfo->GetHasArguments() && !NeedScopeObjectForArguments(funcInfo, pnode))",
          "3039:             MapFormalsWithoutRest(pnode, [&](ParseNode *pnodeArg) { EmitPropStore(pnodeArg->sxVar.sym->GetLocation(), pnodeArg->sxVar.sym, pnodeArg->sxVar.pid, funcInfo); });",
          "3043:         if (pnode->sxFnc.pnodeRest != nullptr)",
          "3045:             pnode->sxFnc.pnodeRest->sxVar.sym->SetNeedDeclaration(false);",
          "",
          "[Added Lines]",
          "3026:         if (pnode->AsParseNodeFnc()->HasNonSimpleParameterList() || !funcInfo->IsBodyAndParamScopeMerged())",
          "3028:             Assert(pnode->AsParseNodeFnc()->HasNonSimpleParameterList() || CONFIG_FLAG(ForceSplitScope));",
          "3029:             this->InitBlockScopedNonTemps(funcInfo->root->AsParseNodeFnc()->pnodeBodyScope, funcInfo);",
          "3033:             this->InitBlockScopedNonTemps(funcInfo->root->AsParseNodeFnc()->pnodeScopes, funcInfo);",
          "3036:         if (!pnode->AsParseNodeFnc()->HasNonSimpleParameterList() && funcInfo->GetHasArguments() && !NeedScopeObjectForArguments(funcInfo, pnode))",
          "3039:             MapFormalsWithoutRest(pnode, [&](ParseNode *pnodeArg) { EmitPropStore(pnodeArg->AsParseNodeVar()->sym->GetLocation(), pnodeArg->AsParseNodeVar()->sym, pnodeArg->AsParseNodeVar()->pid, funcInfo); });",
          "3043:         if (pnode->AsParseNodeFnc()->pnodeRest != nullptr)",
          "3045:             pnode->AsParseNodeFnc()->pnodeRest->AsParseNodeVar()->sym->SetNeedDeclaration(false);",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3050:         {",
          "3054:             paramScope->ForEachSymbol([&](Symbol* param) {",
          "3055:                 Symbol* varSym = funcInfo->GetBodyScope()->FindLocalSymbol(param->GetName());",
          "3056:                 if ((funcSym == nullptr || funcSym != param)    // Do not copy the symbol over to body as the function expression symbol",
          "",
          "[Removed Lines]",
          "3053:             Symbol* funcSym = funcInfo->root->sxFnc.GetFuncSymbol();",
          "",
          "[Added Lines]",
          "3053:             Symbol* funcSym = funcInfo->root->AsParseNodeFnc()->GetFuncSymbol();",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3105:             byteCodeFunction->GetPropertyIdOnRegSlotsContainer()->formalsUpperBound = formalsUpperBound;",
          "3106:         }",
          "3109:         {",
          "3111:         }",
          "3113:         this->inPrologue = false;",
          "",
          "[Removed Lines]",
          "3108:         if (pnode->sxFnc.pnodeBodyScope != nullptr)",
          "3110:             ::BeginEmitBlock(pnode->sxFnc.pnodeBodyScope, this, funcInfo);",
          "",
          "[Added Lines]",
          "3108:         if (pnode->AsParseNodeFnc()->pnodeBodyScope != nullptr)",
          "3110:             ::BeginEmitBlock(pnode->AsParseNodeFnc()->pnodeBodyScope, this, funcInfo);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3121:             EmitFunctionBody(funcInfo);",
          "3122:         }",
          "3125:         {",
          "3127:         }",
          "3130:         if (!this->IsInDebugMode())",
          "3131:         {",
          "",
          "[Removed Lines]",
          "3124:         if (pnode->sxFnc.pnodeBodyScope != nullptr)",
          "3126:             ::EndEmitBlock(pnode->sxFnc.pnodeBodyScope, this, funcInfo);",
          "3128:         ::EndEmitBlock(pnode->sxFnc.pnodeScopes, this, funcInfo);",
          "",
          "[Added Lines]",
          "3124:         if (pnode->AsParseNodeFnc()->pnodeBodyScope != nullptr)",
          "3126:             ::EndEmitBlock(pnode->AsParseNodeFnc()->pnodeBodyScope, this, funcInfo);",
          "3128:         ::EndEmitBlock(pnode->AsParseNodeFnc()->pnodeScopes, this, funcInfo);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3175:         PopFuncInfo(_u(\"EmitOneFunction\"));",
          "3176:         m_writer.SetCallSiteCount(m_callSiteId);",
          "3177: #ifdef LOG_BYTECODE_AST_RATIO",
          "3179: #else",
          "3180:         m_writer.End();",
          "3181: #endif",
          "",
          "[Removed Lines]",
          "3178:         m_writer.End(funcInfo->root->sxFnc.astSize, this->maxAstSize);",
          "",
          "[Added Lines]",
          "3178:         m_writer.End(funcInfo->root->AsParseNodeFnc()->astSize, this->maxAstSize);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3364:         {",
          "3365:         case knopFncDecl:",
          "3366: #ifdef ASMJS_PLAT",
          "3368:             {",
          "3369:                 Js::ExclusiveContext context(this, GetScriptContext());",
          "3371:                 {",
          "3373:                     break;",
          "3374:                 }",
          "3375:                 else if (CONFIG_FLAG(AsmJsStopOnError))",
          "",
          "[Removed Lines]",
          "3367:             if (pnode->sxFnc.GetAsmjsMode())",
          "3370:                 if (Js::AsmJSCompiler::Compile(&context, pnode, pnode->sxFnc.pnodeParams))",
          "3372:                     pnode = pnode->sxFnc.pnodeNext;",
          "",
          "[Added Lines]",
          "3367:             if (pnode->AsParseNodeFnc()->GetAsmjsMode())",
          "3370:                 if (Js::AsmJSCompiler::Compile(&context, pnode, pnode->AsParseNodeFnc()->pnodeParams))",
          "3372:                     pnode = pnode->AsParseNodeFnc()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3385: #endif",
          "3387:         case knopProg:",
          "3389:             {",
          "3391:                 Scope* paramScope = funcInfo->GetParamScope();",
          "3393:                 if (!funcInfo->IsBodyAndParamScopeMerged())",
          "",
          "[Removed Lines]",
          "3388:             if (pnode->sxFnc.funcInfo)",
          "3390:                 FuncInfo* funcInfo = pnode->sxFnc.funcInfo;",
          "",
          "[Added Lines]",
          "3388:             if (pnode->AsParseNodeFnc()->funcInfo)",
          "3390:                 FuncInfo* funcInfo = pnode->AsParseNodeFnc()->funcInfo;",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3405:                 if (!funcInfo->IsBodyAndParamScopeMerged())",
          "3406:                 {",
          "3408:                 }",
          "3409:                 else",
          "3410:                 {",
          "3412:                 }",
          "3414:                 this->EmitOneFunction(pnode);",
          "3415:                 this->EndEmitFunction(pnode);",
          "3418:                 funcInfo->SetCurrentChildScope(nullptr);",
          "3419:             }",
          "3421:             break;",
          "3423:         case knopBlock:",
          "3424:             this->StartEmitBlock(pnode);",
          "3426:             this->EndEmitBlock(pnode);",
          "3428:             break;",
          "3430:         case knopCatch:",
          "3431:             this->StartEmitCatch(pnode);",
          "3433:             this->EndEmitCatch(pnode);",
          "3435:             break;",
          "3437:         case knopWith:",
          "3438:             this->StartEmitWith(pnode);",
          "3440:             this->EndEmitWith(pnode);",
          "3442:             break;",
          "3444:         default:",
          "",
          "[Removed Lines]",
          "3407:                     this->EmitScopeList(pnode->sxFnc.pnodeBodyScope->sxBlock.pnodeScopes);",
          "3411:                     this->EmitScopeList(pnode->sxFnc.pnodeScopes);",
          "3417:                 Assert(pnode->sxFnc.pnodeBody == nullptr || funcInfo->isReused || funcInfo->GetCurrentChildScope() == funcInfo->GetBodyScope());",
          "3420:             pnode = pnode->sxFnc.pnodeNext;",
          "3425:             this->EmitScopeList(pnode->sxBlock.pnodeScopes);",
          "3427:             pnode = pnode->sxBlock.pnodeNext;",
          "3432:             this->EmitScopeList(pnode->sxCatch.pnodeScopes);",
          "3434:             pnode = pnode->sxCatch.pnodeNext;",
          "3439:             this->EmitScopeList(pnode->sxWith.pnodeScopes);",
          "3441:             pnode = pnode->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "3407:                     this->EmitScopeList(pnode->AsParseNodeFnc()->pnodeBodyScope->AsParseNodeBlock()->pnodeScopes);",
          "3411:                     this->EmitScopeList(pnode->AsParseNodeFnc()->pnodeScopes);",
          "3417:                 Assert(pnode->AsParseNodeFnc()->pnodeBody == nullptr || funcInfo->isReused || funcInfo->GetCurrentChildScope() == funcInfo->GetBodyScope());",
          "3420:             pnode = pnode->AsParseNodeFnc()->pnodeNext;",
          "3425:             this->EmitScopeList(pnode->AsParseNodeBlock()->pnodeScopes);",
          "3427:             pnode = pnode->AsParseNodeBlock()->pnodeNext;",
          "3432:             this->EmitScopeList(pnode->AsParseNodeCatch()->pnodeScopes);",
          "3434:             pnode = pnode->AsParseNodeCatch()->pnodeNext;",
          "3439:             this->EmitScopeList(pnode->AsParseNodeWith()->pnodeScopes);",
          "3441:             pnode = pnode->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3451: void EnsureFncDeclScopeSlot(ParseNode *pnodeFnc, FuncInfo *funcInfo)",
          "3452: {",
          "3454:     {",
          "3459:         if (sym && !sym->IsArguments())",
          "",
          "[Removed Lines]",
          "3453:     if (pnodeFnc->sxFnc.pnodeName)",
          "3455:         Assert(pnodeFnc->sxFnc.pnodeName->nop == knopVarDecl);",
          "3456:         Symbol *sym = pnodeFnc->sxFnc.pnodeName->sxVar.sym;",
          "",
          "[Added Lines]",
          "3453:     if (pnodeFnc->AsParseNodeFnc()->pnodeName)",
          "3455:         Assert(pnodeFnc->AsParseNodeFnc()->pnodeName->nop == knopVarDecl);",
          "3456:         Symbol *sym = pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3467: void CheckFncDeclScopeSlot(ParseNode *pnodeFnc, FuncInfo *funcInfo)",
          "3468: {",
          "3470:     {",
          "3473:         if (sym && sym->NeedsSlotAlloc(funcInfo))",
          "3474:         {",
          "3475:             sym->EnsureScopeSlot(funcInfo);",
          "",
          "[Removed Lines]",
          "3469:     if (pnodeFnc->sxFnc.pnodeName && pnodeFnc->sxFnc.pnodeName->nop == knopVarDecl)",
          "3471:         Assert(pnodeFnc->sxFnc.pnodeName->nop == knopVarDecl);",
          "3472:         Symbol *sym = pnodeFnc->sxFnc.pnodeName->sxVar.sym;",
          "",
          "[Added Lines]",
          "3469:     if (pnodeFnc->AsParseNodeFnc()->pnodeName && pnodeFnc->AsParseNodeFnc()->pnodeName->nop == knopVarDecl)",
          "3471:         Assert(pnodeFnc->AsParseNodeFnc()->pnodeName->nop == knopVarDecl);",
          "3472:         Symbol *sym = pnodeFnc->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3481: {",
          "3482:     Assert(pnodeFnc->nop == knopFncDecl || pnodeFnc->nop == knopProg);",
          "3485:     Scope * const bodyScope = funcInfo->GetBodyScope();",
          "3486:     Scope * const paramScope = funcInfo->GetParamScope();",
          "3489:     {",
          "3490:         if (funcInfo->GetParsedFunctionBody()->GetByteCode() == nullptr && !(flags & (fscrEval | fscrImplicitThis | fscrImplicitParents)))",
          "3491:         {",
          "",
          "[Removed Lines]",
          "3484:     FuncInfo *funcInfo = pnodeFnc->sxFnc.funcInfo;",
          "3488:     if (funcInfo->byteCodeFunction->IsFunctionParsed() && funcInfo->root->sxFnc.pnodeBody != nullptr)",
          "",
          "[Added Lines]",
          "3484:     FuncInfo *funcInfo = pnodeFnc->AsParseNodeFnc()->funcInfo;",
          "3488:     if (funcInfo->byteCodeFunction->IsFunctionParsed() && funcInfo->root->AsParseNodeFnc()->pnodeBody != nullptr)",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3514:             }",
          "3515:             else",
          "3516:             {",
          "3518:                 if (funcInfo->IsBodyAndParamScopeMerged())",
          "3519:                 {",
          "3520:                     funcInfo->bodyScope->AddSymbol(sym);",
          "",
          "[Removed Lines]",
          "3517:                 Symbol *sym = funcInfo->root->sxFnc.GetFuncSymbol();",
          "",
          "[Added Lines]",
          "3517:                 Symbol *sym = funcInfo->root->AsParseNodeFnc()->GetFuncSymbol();",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3568:                     funcInfo->frameObjRegister != Js::Constants::NoRegister &&",
          "3569:                     !ApplyEnclosesArgs(pnodeFnc, this) &&",
          "3570:                     funcInfo->IsBodyAndParamScopeMerged() && // There is eval in the param scope",
          "3573:                     (PHASE_FORCE(Js::CachedScopePhase, funcInfo->byteCodeFunction) || !IsInDebugMode())",
          "3574: #if ENABLE_TTD",
          "3575:                     && !funcInfo->GetParsedFunctionBody()->GetScriptContext()->GetThreadContext()->IsRuntimeInTTDMode()",
          "",
          "[Removed Lines]",
          "3571:                     !pnodeFnc->sxFnc.HasDefaultArguments() &&",
          "3572:                     !pnodeFnc->sxFnc.HasDestructuredParams() &&",
          "",
          "[Added Lines]",
          "3571:                     !pnodeFnc->AsParseNodeFnc()->HasDefaultArguments() &&",
          "3572:                     !pnodeFnc->AsParseNodeFnc()->HasDestructuredParams() &&",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3579:                 if (funcInfo->GetHasCachedScope())",
          "3580:                 {",
          "3581:                     Assert(funcInfo->funcObjRegister == Js::Constants::NoRegister);",
          "3583:                     if (funcSym && funcSym->GetIsFuncExpr())",
          "3584:                     {",
          "3585:                         if (funcSym->GetLocation() == Js::Constants::NoRegister)",
          "",
          "[Removed Lines]",
          "3582:                     Symbol *funcSym = funcInfo->root->sxFnc.GetFuncSymbol();",
          "",
          "[Added Lines]",
          "3582:                     Symbol *funcSym = funcInfo->root->AsParseNodeFnc()->GetFuncSymbol();",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3608:                     {",
          "3609:                         if (pnode->IsVarLetOrConst())",
          "3610:                         {",
          "3612:                         }",
          "3613:                     });",
          "",
          "[Removed Lines]",
          "3611:                             pnode->sxVar.sym->EnsureScopeSlot(funcInfo);",
          "3615:                     MapFormalsFromPattern(pnodeFnc, [&](ParseNode *pnode) { pnode->sxVar.sym->EnsureScopeSlot(funcInfo); });",
          "",
          "[Added Lines]",
          "3611:                             pnode->AsParseNodeVar()->sym->EnsureScopeSlot(funcInfo);",
          "3615:                     MapFormalsFromPattern(pnodeFnc, [&](ParseNode *pnode) { pnode->AsParseNodeVar()->sym->EnsureScopeSlot(funcInfo); });",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3625:                     }",
          "3626:                 }",
          "3630:                 if (sym && sym->NeedsSlotAlloc(funcInfo))",
          "3631:                 {",
          "",
          "[Removed Lines]",
          "3628:                 sym = funcInfo->root->sxFnc.GetFuncSymbol();",
          "",
          "[Added Lines]",
          "3628:                 sym = funcInfo->root->AsParseNodeFnc()->GetFuncSymbol();",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3647:                     {",
          "3648:                         if (pnode->IsVarLetOrConst())",
          "3649:                         {",
          "3653:                             if (formal->GetLocation() + 1 == pos)",
          "3654:                             {",
          "3656:                             }",
          "3657:                         }",
          "3658:                         pos++;",
          "3659:                     };",
          "3660:                     MapFormals(pnodeFnc, moveArgToReg);",
          "3662:                 }",
          "3665:                 {",
          "3668:                     {",
          "3669:                         if (sym->GetIsCatch() || (pnode->nop == knopVarDecl && sym->GetIsBlockVar()))",
          "3670:                         {",
          "",
          "[Removed Lines]",
          "3650:                             formal = pnode->sxVar.sym;",
          "3655:                                 pnode->sxVar.sym->EnsureScopeSlot(funcInfo);",
          "3661:                     MapFormalsFromPattern(pnodeFnc, [&](ParseNode *pnode) { pnode->sxVar.sym->EnsureScopeSlot(funcInfo); });",
          "3664:                 for (pnode = pnodeFnc->sxFnc.pnodeVars; pnode; pnode = pnode->sxVar.pnodeNext)",
          "3666:                     sym = pnode->sxVar.sym;",
          "3667:                     if (!(pnode->sxVar.isBlockScopeFncDeclVar && sym->GetIsBlockVar()))",
          "",
          "[Added Lines]",
          "3650:                             formal = pnode->AsParseNodeVar()->sym;",
          "3655:                                 pnode->AsParseNodeVar()->sym->EnsureScopeSlot(funcInfo);",
          "3661:                     MapFormalsFromPattern(pnodeFnc, [&](ParseNode *pnode) { pnode->AsParseNodeVar()->sym->EnsureScopeSlot(funcInfo); });",
          "3664:                 for (pnode = pnodeFnc->AsParseNodeFnc()->pnodeVars; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "3666:                     sym = pnode->AsParseNodeVar()->sym;",
          "3667:                     if (!(pnode->AsParseNodeVar()->isBlockScopeFncDeclVar && sym->GetIsBlockVar()))",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3683:                         switch (pnode->nop)",
          "3684:                         {",
          "3685:                         case knopFncDecl:",
          "3687:                             {",
          "3688:                                 EnsureFncDeclScopeSlot(pnode, funcInfo);",
          "3689:                             }",
          "3691:                             break;",
          "3692:                         case knopBlock:",
          "3694:                             break;",
          "3695:                         case knopCatch:",
          "3697:                             break;",
          "3698:                         case knopWith:",
          "3700:                             break;",
          "3701:                         }",
          "3702:                     }",
          "3703:                 };",
          "3707:                 {",
          "3710:                 }",
          "3711:             }",
          "3712:             else",
          "",
          "[Removed Lines]",
          "3686:                             if (pnode->sxFnc.IsDeclaration())",
          "3690:                             pnode = pnode->sxFnc.pnodeNext;",
          "3693:                             pnode = pnode->sxBlock.pnodeNext;",
          "3696:                             pnode = pnode->sxCatch.pnodeNext;",
          "3699:                             pnode = pnode->sxWith.pnodeNext;",
          "3704:                 pnodeFnc->sxFnc.MapContainerScopes(ensureFncDeclScopeSlots);",
          "3706:                 if (pnodeFnc->sxFnc.pnodeBody)",
          "3708:                     Assert(pnodeFnc->sxFnc.pnodeScopes->nop == knopBlock);",
          "3709:                     this->EnsureLetConstScopeSlots(pnodeFnc->sxFnc.pnodeBodyScope, funcInfo);",
          "",
          "[Added Lines]",
          "3686:                             if (pnode->AsParseNodeFnc()->IsDeclaration())",
          "3690:                             pnode = pnode->AsParseNodeFnc()->pnodeNext;",
          "3693:                             pnode = pnode->AsParseNodeBlock()->pnodeNext;",
          "3696:                             pnode = pnode->AsParseNodeCatch()->pnodeNext;",
          "3699:                             pnode = pnode->AsParseNodeWith()->pnodeNext;",
          "3704:                 pnodeFnc->AsParseNodeFnc()->MapContainerScopes(ensureFncDeclScopeSlots);",
          "3706:                 if (pnodeFnc->AsParseNodeFnc()->pnodeBody)",
          "3708:                     Assert(pnodeFnc->AsParseNodeFnc()->pnodeScopes->nop == knopBlock);",
          "3709:                     this->EnsureLetConstScopeSlots(pnodeFnc->AsParseNodeFnc()->pnodeBodyScope, funcInfo);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3714:                 ParseNode *pnode;",
          "3715:                 Symbol *sym;",
          "3720:                 {",
          "3723:                     {",
          "3724:                         if (sym->GetIsCatch() || (pnode->nop == knopVarDecl && sym->GetIsBlockVar()))",
          "3725:                         {",
          "",
          "[Removed Lines]",
          "3717:                 pnodeFnc->sxFnc.MapContainerScopes([&](ParseNode *pnodeScope) { this->EnsureFncScopeSlots(pnodeScope, funcInfo); });",
          "3719:                 for (pnode = pnodeFnc->sxFnc.pnodeVars; pnode; pnode = pnode->sxVar.pnodeNext)",
          "3721:                     sym = pnode->sxVar.sym;",
          "3722:                     if (!(pnode->sxVar.isBlockScopeFncDeclVar && sym->GetIsBlockVar()))",
          "",
          "[Added Lines]",
          "3717:                 pnodeFnc->AsParseNodeFnc()->MapContainerScopes([&](ParseNode *pnodeScope) { this->EnsureFncScopeSlots(pnodeScope, funcInfo); });",
          "3719:                 for (pnode = pnodeFnc->AsParseNodeFnc()->pnodeVars; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "3721:                     sym = pnode->AsParseNodeVar()->sym;",
          "3722:                     if (!(pnode->AsParseNodeVar()->isBlockScopeFncDeclVar && sym->GetIsBlockVar()))",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3736:                 {",
          "3737:                     if (pnode->IsVarLetOrConst())",
          "3738:                     {",
          "3740:                         if (sym->GetSymbolType() == STFormal && sym->NeedsSlotAlloc(funcInfo))",
          "3741:                         {",
          "3742:                             sym->EnsureScopeSlot(funcInfo);",
          "",
          "[Removed Lines]",
          "3739:                         sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "3739:                         sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3757:                     sym->EnsureScopeSlot(funcInfo);",
          "3758:                 }",
          "3761:                 {",
          "3764:                 }",
          "3765:             }",
          "",
          "[Removed Lines]",
          "3760:                 if (pnodeFnc->sxFnc.pnodeBody)",
          "3762:                     this->EnsureLetConstScopeSlots(pnodeFnc->sxFnc.pnodeScopes, funcInfo);",
          "3763:                     this->EnsureLetConstScopeSlots(pnodeFnc->sxFnc.pnodeBodyScope, funcInfo);",
          "",
          "[Added Lines]",
          "3760:                 if (pnodeFnc->AsParseNodeFnc()->pnodeBody)",
          "3762:                     this->EnsureLetConstScopeSlots(pnodeFnc->AsParseNodeFnc()->pnodeScopes, funcInfo);",
          "3763:                     this->EnsureLetConstScopeSlots(pnodeFnc->AsParseNodeFnc()->pnodeBodyScope, funcInfo);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3769:             {",
          "3770:                 bodyScope->SetMustInstantiate(true);",
          "3771:             }",
          "3773:             {",
          "3774:                 bodyScope->SetMustInstantiate(funcInfo->frameSlotsRegister != Js::Constants::NoRegister);",
          "3775:             }",
          "3778:             {",
          "3779:                 if (funcInfo->frameObjRegister != Js::Constants::NoRegister)",
          "3780:                 {",
          "",
          "[Removed Lines]",
          "3772:             else if (pnodeFnc->sxFnc.IsBodyAndParamScopeMerged() || bodyScope->GetScopeSlotCount() != 0)",
          "3777:             if (!pnodeFnc->sxFnc.IsBodyAndParamScopeMerged())",
          "",
          "[Added Lines]",
          "3772:             else if (pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged() || bodyScope->GetScopeSlotCount() != 0)",
          "3777:             if (!pnodeFnc->AsParseNodeFnc()->IsBodyAndParamScopeMerged())",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3802:     if (!funcInfo->IsBodyAndParamScopeMerged())",
          "3803:     {",
          "3807:         PushScope(paramScope);",
          "3812:         Assert(this->GetCurrentScope() == paramScope);",
          "3813:     }",
          "",
          "[Removed Lines]",
          "3804:         ParseNodePtr paramBlock = pnodeFnc->sxFnc.pnodeScopes;",
          "3805:         Assert(paramBlock->nop == knopBlock && paramBlock->sxBlock.blockType == Parameter);",
          "3811:         this->EmitScopeList(paramBlock->sxBlock.pnodeScopes, pnodeFnc->sxFnc.pnodeBodyScope);",
          "",
          "[Added Lines]",
          "3804:         ParseNodePtr paramBlock = pnodeFnc->AsParseNodeFnc()->pnodeScopes;",
          "3805:         Assert(paramBlock->nop == knopBlock && paramBlock->AsParseNodeBlock()->blockType == Parameter);",
          "3811:         this->EmitScopeList(paramBlock->AsParseNodeBlock()->pnodeScopes, pnodeFnc->AsParseNodeFnc()->pnodeBodyScope);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3892: void ByteCodeGenerator::EnsureLetConstScopeSlots(ParseNode *pnodeBlock, FuncInfo *funcInfo)",
          "3893: {",
          "3895:     auto ensureLetConstSlots = ([this, funcInfo, callsEval](ParseNode *pnode)",
          "3896:     {",
          "3898:         if (callsEval || sym->NeedsSlotAlloc(funcInfo))",
          "3899:         {",
          "3900:             sym->EnsureScopeSlot(funcInfo);",
          "",
          "[Removed Lines]",
          "3894:     bool callsEval = pnodeBlock->sxBlock.GetCallsEval() || pnodeBlock->sxBlock.GetChildCallsEval();",
          "3897:         Symbol *sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "3894:     bool callsEval = pnodeBlock->AsParseNodeBlock()->GetCallsEval() || pnodeBlock->AsParseNodeBlock()->GetChildCallsEval();",
          "3897:         Symbol *sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3911:         switch (pnode->nop)",
          "3912:         {",
          "3913:         case knopFncDecl:",
          "3915:             {",
          "3916:                 CheckFncDeclScopeSlot(pnode, funcInfo);",
          "3917:             }",
          "3919:             break;",
          "3920:         case knopBlock:",
          "3922:             break;",
          "3923:         case knopCatch:",
          "3925:             break;",
          "3926:         case knopWith:",
          "3928:             break;",
          "3929:         }",
          "3930:     }",
          "",
          "[Removed Lines]",
          "3914:             if (pnode->sxFnc.IsDeclaration())",
          "3918:             pnode = pnode->sxFnc.pnodeNext;",
          "3921:             pnode = pnode->sxBlock.pnodeNext;",
          "3924:             pnode = pnode->sxCatch.pnodeNext;",
          "3927:             pnode = pnode->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "3914:             if (pnode->AsParseNodeFnc()->IsDeclaration())",
          "3918:             pnode = pnode->AsParseNodeFnc()->pnodeNext;",
          "3921:             pnode = pnode->AsParseNodeBlock()->pnodeNext;",
          "3924:             pnode = pnode->AsParseNodeCatch()->pnodeNext;",
          "3927:             pnode = pnode->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3938:     PopScope(); // function body",
          "3942:     Scope* paramScope = funcInfo->paramScope;",
          "3943:     if (!funcInfo->IsBodyAndParamScopeMerged())",
          "",
          "[Removed Lines]",
          "3940:     FuncInfo *funcInfo = pnodeFnc->sxFnc.funcInfo;",
          "",
          "[Added Lines]",
          "3940:     FuncInfo *funcInfo = pnodeFnc->AsParseNodeFnc()->funcInfo;",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3946:         PopScope(); // Pop the param scope",
          "3947:     }",
          "3950:     {",
          "",
          "[Removed Lines]",
          "3949:     if (funcInfo->byteCodeFunction->IsFunctionParsed() && funcInfo->root->sxFnc.pnodeBody != nullptr)",
          "",
          "[Added Lines]",
          "3949:     if (funcInfo->byteCodeFunction->IsFunctionParsed() && funcInfo->root->AsParseNodeFnc()->pnodeBody != nullptr)",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3969: {",
          "3970:     Assert(pnodeCatch->nop == knopCatch);",
          "3973:     FuncInfo *funcInfo = scope->GetFunc();",
          "",
          "[Removed Lines]",
          "3972:     Scope *scope = pnodeCatch->sxCatch.scope;",
          "",
          "[Added Lines]",
          "3972:     Scope *scope = pnodeCatch->AsParseNodeCatch()->scope;",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3978:         scope->SetIsObject();",
          "3979:     }",
          "3982:     {",
          "3983:         scope->SetCapturesAll(funcInfo->GetCallsEval() || funcInfo->GetChildCallsEval());",
          "3984:         scope->SetMustInstantiate(scope->Count() > 0 && (scope->GetMustInstantiate() || scope->GetCapturesAll() || funcInfo->IsGlobalFunction()));",
          "3987:         {",
          "3989:             if (funcInfo->IsGlobalFunction())",
          "3990:             {",
          "3991:                 sym->SetIsGlobalCatch(true);",
          "",
          "[Removed Lines]",
          "3981:     if (pnodeCatch->sxCatch.pnodeParam->nop == knopParamPattern)",
          "3986:         Parser::MapBindIdentifier(pnodeCatch->sxCatch.pnodeParam->sxParamPattern.pnode1, [&](ParseNodePtr item)",
          "3988:             Symbol *sym = item->sxVar.sym;",
          "",
          "[Added Lines]",
          "3981:     if (pnodeCatch->AsParseNodeCatch()->pnodeParam->nop == knopParamPattern)",
          "3986:         Parser::MapBindIdentifier(pnodeCatch->AsParseNodeCatch()->pnodeParam->AsParseNodeParamPattern()->pnode1, [&](ParseNodePtr item)",
          "3988:             Symbol *sym = item->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "4003:     }",
          "4004:     else",
          "4005:     {",
          "4009:         scope->SetCapturesAll(funcInfo->GetCallsEval() || funcInfo->GetChildCallsEval() || sym->GetHasNonLocalReference());",
          "",
          "[Removed Lines]",
          "4006:         Symbol *sym = pnodeCatch->sxCatch.pnodeParam->sxPid.sym;",
          "",
          "[Added Lines]",
          "4006:         Symbol *sym = pnodeCatch->AsParseNodeCatch()->pnodeParam->AsParseNodePid()->sym;",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "4032: void ByteCodeGenerator::EndEmitCatch(ParseNode *pnodeCatch)",
          "4033: {",
          "4034:     Assert(pnodeCatch->nop == knopCatch);",
          "4036:     PopScope();",
          "4037: }",
          "",
          "[Removed Lines]",
          "4035:     Assert(currentScope == pnodeCatch->sxCatch.scope);",
          "",
          "[Added Lines]",
          "4035:     Assert(currentScope == pnodeCatch->AsParseNodeCatch()->scope);",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "4048:     PushBlock(pnodeBlock);",
          "4052:     {",
          "4053:         Assert(scope->GetIsObject());",
          "4054:     }",
          "",
          "[Removed Lines]",
          "4050:     Scope *scope = pnodeBlock->sxBlock.scope;",
          "4051:     if (pnodeBlock->sxBlock.GetCallsEval() || pnodeBlock->sxBlock.GetChildCallsEval() || (this->flags & (fscrEval | fscrImplicitThis | fscrImplicitParents)))",
          "",
          "[Added Lines]",
          "4050:     Scope *scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "4051:     if (pnodeBlock->AsParseNodeBlock()->GetCallsEval() || pnodeBlock->AsParseNodeBlock()->GetChildCallsEval() || (this->flags & (fscrEval | fscrImplicitThis | fscrImplicitParents)))",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "4057:     if (scope->GetMustInstantiate())",
          "4058:     {",
          "4059:         FuncInfo *funcInfo = scope->GetFunc();",
          "4061:         this->EnsureLetConstScopeSlots(pnodeBlock, funcInfo);",
          "4062:         PushScope(scope);",
          "4063:     }",
          "",
          "[Removed Lines]",
          "4060:         this->EnsureFncScopeSlots(pnodeBlock->sxBlock.pnodeScopes, funcInfo);",
          "",
          "[Added Lines]",
          "4060:         this->EnsureFncScopeSlots(pnodeBlock->AsParseNodeBlock()->pnodeScopes, funcInfo);",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "4073:     Assert(pnodeBlock->nop == knopBlock);",
          "4076:     if (scope && scope->GetMustInstantiate())",
          "4077:     {",
          "4079:         PopScope();",
          "4080:     }",
          "",
          "[Removed Lines]",
          "4075:     Scope *scope = pnodeBlock->sxBlock.scope;",
          "4078:         Assert(currentScope == pnodeBlock->sxBlock.scope);",
          "",
          "[Added Lines]",
          "4075:     Scope *scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "4078:         Assert(currentScope == pnodeBlock->AsParseNodeBlock()->scope);",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "4086: {",
          "4087:     Assert(pnodeWith->nop == knopWith);",
          "4091:     AssertOrFailFast(scope->GetIsObject());",
          "",
          "[Removed Lines]",
          "4089:     Scope *scope = pnodeWith->sxWith.scope;",
          "",
          "[Added Lines]",
          "4089:     Scope *scope = pnodeWith->AsParseNodeWith()->scope;",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "4096: void ByteCodeGenerator::EndEmitWith(ParseNode *pnodeWith)",
          "4097: {",
          "4098:     Assert(pnodeWith->nop == knopWith);",
          "4101:     PopScope();",
          "4102: }",
          "",
          "[Removed Lines]",
          "4099:     Assert(currentScope == pnodeWith->sxWith.scope);",
          "",
          "[Added Lines]",
          "4099:     Assert(currentScope == pnodeWith->AsParseNodeWith()->scope);",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "4900: void ByteCodeGenerator::EmitPropLoadThis(Js::RegSlot lhsLocation, ParseNode *pnode, FuncInfo *funcInfo, bool chkUndecl)",
          "4901: {",
          "4904:     if (!sym && this->ShouldLoadConstThis(funcInfo))",
          "4905:     {",
          "",
          "[Removed Lines]",
          "4902:     Symbol* sym = pnode->sxPid.sym;",
          "",
          "[Added Lines]",
          "4902:     Symbol* sym = pnode->AsParseNodePid()->sym;",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "4907:     }",
          "4908:     else",
          "4909:     {",
          "4912:         if ((!sym || sym->GetNeedDeclaration()) && chkUndecl)",
          "4913:         {",
          "",
          "[Removed Lines]",
          "4910:         this->EmitPropLoad(lhsLocation, pnode->sxPid.sym, pnode->sxPid.pid, funcInfo, true);",
          "",
          "[Added Lines]",
          "4910:         this->EmitPropLoad(lhsLocation, pnode->AsParseNodePid()->sym, pnode->AsParseNodePid()->pid, funcInfo, true);",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "5172:         {",
          "5173:             this->m_writer.Reg2(Js::OpCode::Ld_A, lhsLocation, sym->GetLocation());",
          "5174:         }",
          "5176:         {",
          "5177:             this->m_writer.Reg1(Js::OpCode::ChkUndecl, lhsLocation);",
          "5178:         }",
          "",
          "[Removed Lines]",
          "5175:         if (sym->GetIsBlockVar() && ((sym->GetDecl()->nop == knopLetDecl || sym->GetDecl()->nop == knopConstDecl) && sym->GetDecl()->sxVar.isSwitchStmtDecl))",
          "",
          "[Added Lines]",
          "5175:         if (sym->GetIsBlockVar() && ((sym->GetDecl()->nop == knopLetDecl || sym->GetDecl()->nop == knopConstDecl) && sym->GetDecl()->AsParseNodeVar()->isSwitchStmtDecl))",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "5187: bool ByteCodeGenerator::NeedCheckBlockVar(Symbol* sym, Scope* scope, FuncInfo* funcInfo) const",
          "5188: {",
          "5189:     bool tdz = sym->GetIsBlockVar()",
          "5192:     return tdz || sym->GetIsNonSimpleParameter();",
          "5193: }",
          "",
          "[Removed Lines]",
          "5190:         && (scope->GetFunc() != funcInfo || ((sym->GetDecl()->nop == knopLetDecl || sym->GetDecl()->nop == knopConstDecl) && sym->GetDecl()->sxVar.isSwitchStmtDecl));",
          "",
          "[Added Lines]",
          "5190:         && (scope->GetFunc() != funcInfo || ((sym->GetDecl()->nop == knopLetDecl || sym->GetDecl()->nop == knopConstDecl) && sym->GetDecl()->AsParseNodeVar()->isSwitchStmtDecl));",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "5558:     Assert(pnodeBlock->nop == knopBlock);",
          "5561:     if (!(this->flags & fscrEvalCode))",
          "5562:     {",
          "5563:         IterateBlockScopedVariables(pnodeBlock, [this](ParseNode *pnode)",
          "5564:         {",
          "5565:             FuncInfo *funcInfo = this->TopFuncInfo();",
          "5568:             Assert(sym->GetIsGlobal());",
          "",
          "[Removed Lines]",
          "5559:     Assert(pnodeBlock->sxBlock.blockType == PnodeBlockType::Global || pnodeBlock->sxBlock.scope->GetScopeType() == ScopeType_GlobalEvalBlock);",
          "5566:             Symbol *sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "5559:     Assert(pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Global || pnodeBlock->AsParseNodeBlock()->scope->GetScopeType() == ScopeType_GlobalEvalBlock);",
          "5566:             Symbol *sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "5573:         });",
          "5574:     }",
          "5577:     {",
          "5581:             continue;",
          "5583:         if (sym->GetIsCatch() || (pnode->nop == knopVarDecl && sym->GetIsBlockVar()))",
          "",
          "[Removed Lines]",
          "5576:     for (ParseNode *pnode = funcInfo->root->sxFnc.pnodeVars; pnode; pnode = pnode->sxVar.pnodeNext)",
          "5578:         Symbol* sym = pnode->sxVar.sym;",
          "5580:         if (sym == nullptr || pnode->sxVar.isBlockScopeFncDeclVar || sym->IsSpecialSymbol())",
          "",
          "[Added Lines]",
          "5576:     for (ParseNode *pnode = funcInfo->root->AsParseNodeFnc()->pnodeVars; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "5578:         Symbol* sym = pnode->AsParseNodeVar()->sym;",
          "5580:         if (sym == nullptr || pnode->AsParseNodeVar()->isBlockScopeFncDeclVar || sym->IsSpecialSymbol())",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "5645:         if (callsiteObject == nullptr)",
          "5646:         {",
          "5648:             rawArray->Freeze();",
          "5651:             callsiteObject->SetPropertyWithAttributes(Js::PropertyIds::raw, rawArray, PropertyNone, nullptr);",
          "5652:             callsiteObject->Freeze();",
          "",
          "[Removed Lines]",
          "5647:             Js::RecyclableObject* rawArray = ByteCodeGenerator::BuildArrayFromStringList(pnode->sxStrTemplate.pnodeStringRawLiterals, pnode->sxStrTemplate.countStringLiterals, scriptContext);",
          "5650:             callsiteObject = ByteCodeGenerator::BuildArrayFromStringList(pnode->sxStrTemplate.pnodeStringLiterals, pnode->sxStrTemplate.countStringLiterals, scriptContext);",
          "",
          "[Added Lines]",
          "5647:             Js::RecyclableObject* rawArray = ByteCodeGenerator::BuildArrayFromStringList(pnode->AsParseNodeStrTemplate()->pnodeStringRawLiterals, pnode->AsParseNodeStrTemplate()->countStringLiterals, scriptContext);",
          "5650:             callsiteObject = ByteCodeGenerator::BuildArrayFromStringList(pnode->AsParseNodeStrTemplate()->pnodeStringLiterals, pnode->AsParseNodeStrTemplate()->countStringLiterals, scriptContext);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "5661: bool IsApplyArgs(ParseNode* callNode)",
          "5662: {",
          "5665:     if ((target != nullptr) && (target->nop == knopDot))",
          "5666:     {",
          "5668:         if ((lhsNode != nullptr) && ((lhsNode->nop == knopDot) || (lhsNode->nop == knopName)) && !IsArguments(lhsNode))",
          "5669:         {",
          "5671:             if (nameNode != nullptr)",
          "5672:             {",
          "5674:                 if (nameIsApply && args != nullptr && args->nop == knopList)",
          "5675:                 {",
          "5679:                     {",
          "5681:                     }",
          "5682:                 }",
          "5683:             }",
          "",
          "[Removed Lines]",
          "5663:     ParseNode* target = callNode->sxCall.pnodeTarget;",
          "5664:     ParseNode* args = callNode->sxCall.pnodeArgs;",
          "5667:         ParseNode* lhsNode = target->sxBin.pnode1;",
          "5670:             ParseNode* nameNode = target->sxBin.pnode2;",
          "5673:                 bool nameIsApply = nameNode->sxPid.PropertyIdFromNameNode() == Js::PropertyIds::apply;",
          "5676:                     ParseNode* arg1 = args->sxBin.pnode1;",
          "5677:                     ParseNode* arg2 = args->sxBin.pnode2;",
          "5678:                     if ((arg1 != nullptr) && ByteCodeGenerator::IsThis(arg1) && (arg2 != nullptr) && (arg2->nop == knopName) && (arg2->sxPid.sym != nullptr))",
          "5680:                         return arg2->sxPid.sym->IsArguments();",
          "",
          "[Added Lines]",
          "5663:     ParseNode* target = callNode->AsParseNodeCall()->pnodeTarget;",
          "5664:     ParseNode* args = callNode->AsParseNodeCall()->pnodeArgs;",
          "5667:         ParseNode* lhsNode = target->AsParseNodeBin()->pnode1;",
          "5670:             ParseNode* nameNode = target->AsParseNodeBin()->pnode2;",
          "5673:                 bool nameIsApply = nameNode->AsParseNodePid()->PropertyIdFromNameNode() == Js::PropertyIds::apply;",
          "5676:                     ParseNode* arg1 = args->AsParseNodeBin()->pnode1;",
          "5677:                     ParseNode* arg2 = args->AsParseNodeBin()->pnode2;",
          "5678:                     if ((arg1 != nullptr) && ByteCodeGenerator::IsThis(arg1) && (arg2 != nullptr) && (arg2->nop == knopName) && (arg2->AsParseNodePid()->sym != nullptr))",
          "5680:                         return arg2->AsParseNodePid()->sym->IsArguments();",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "5717:     {",
          "5718:     case knopName:",
          "5719:     {",
          "5721:         if (sym != nullptr)",
          "5722:         {",
          "5723:             if (sym->IsArguments())",
          "",
          "[Removed Lines]",
          "5720:         Symbol* sym = pnode->sxPid.sym;",
          "",
          "[Added Lines]",
          "5720:         Symbol* sym = pnode->AsParseNodePid()->sym;",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "5743:             {",
          "5744:                 applyCheck->insideApplyCall = true;",
          "5745:                 applyCheck->sawApply = true;",
          "5747:             }",
          "5748:         }",
          "5749:         break;",
          "",
          "[Removed Lines]",
          "5746:                 pnode->sxCall.isApplyCall = true;",
          "",
          "[Added Lines]",
          "5746:                 pnode->AsParseNodeCall()->isApplyCall = true;",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "5768:         while (pnode->nop == knopList)",
          "5769:         {",
          "5770:             argCount++;",
          "5772:             {",
          "5774:             }",
          "5776:         }",
          "5777:         argCount++;",
          "5778:         if (pSideEffect && !(ParseNode::Grfnop(pnode->nop) & fnopLeaf))",
          "",
          "[Removed Lines]",
          "5771:             if (pSideEffect && !(ParseNode::Grfnop(pnode->sxBin.pnode1->nop) & fnopLeaf))",
          "5775:             pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "5771:             if (pSideEffect && !(ParseNode::Grfnop(pnode->AsParseNodeBin()->pnode1->nop) & fnopLeaf))",
          "5775:             pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "5793:     Symbol *sym = nullptr;",
          "5794:     if (pnode->nop == knopName)",
          "5795:     {",
          "5797:     }",
          "5798:     else if (pnode->nop == knopComputedName)",
          "5799:     {",
          "5801:         if (pnode1->nop == knopName)",
          "5802:         {",
          "5804:         }",
          "5805:     }",
          "",
          "[Removed Lines]",
          "5796:         sym = pnode->sxPid.sym;",
          "5800:         ParseNode *pnode1 = pnode->sxUni.pnode1;",
          "5803:             sym = pnode1->sxPid.sym;",
          "",
          "[Added Lines]",
          "5796:         sym = pnode->AsParseNodePid()->sym;",
          "5800:         ParseNode *pnode1 = pnode->AsParseNodeUni()->pnode1;",
          "5803:             sym = pnode1->AsParseNodePid()->sym;",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "5847:     switch (pnode->nop)",
          "5848:     {",
          "5849:     case knopDot:",
          "5851:         break;",
          "5853:     case knopIndex:",
          "5856:         break;",
          "5858:     case knopName:",
          "",
          "[Removed Lines]",
          "5850:         Emit(pnode->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "5854:         Emit(pnode->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "5855:         Emit(pnode->sxBin.pnode2, byteCodeGenerator, funcInfo, false);",
          "",
          "[Added Lines]",
          "5850:         Emit(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "5854:         Emit(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "5855:         Emit(pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo, false);",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "5872:         {",
          "5873:         case knopDot:",
          "5874:         case knopIndex:",
          "5877:             break;",
          "5879:         case knopName:",
          "5880:         {",
          "5882:             if (!sym || sym->GetLocation() == Js::Constants::NoRegister)",
          "5883:             {",
          "5885:             }",
          "5886:             if (sym && (sym->IsInSlot(funcInfo) || sym->GetScope()->GetFunc() != funcInfo))",
          "5887:             {",
          "5890:             }",
          "5891:             else",
          "5892:             {",
          "5898:             }",
          "5899:             break;",
          "5900:         }",
          "5901:         default:",
          "5903:             break;",
          "5904:         }",
          "5908:         {",
          "5910:             while (pnodeArg->nop == knopList)",
          "5911:             {",
          "5914:             }",
          "5915:             Emit(pnodeArg, byteCodeGenerator, funcInfo, false);",
          "5916:         }",
          "5919:         {",
          "5922:         }",
          "5923:         break;",
          "",
          "[Removed Lines]",
          "5871:         switch (pnode->sxCall.pnodeTarget->nop)",
          "5875:             funcInfo->AcquireLoc(pnode->sxCall.pnodeTarget);",
          "5876:             EmitReference(pnode->sxCall.pnodeTarget, byteCodeGenerator, funcInfo);",
          "5881:             Symbol *sym = pnode->sxCall.pnodeTarget->sxPid.sym;",
          "5884:                 funcInfo->AcquireLoc(pnode->sxCall.pnodeTarget);",
          "5889:                 EmitLoad(pnode->sxCall.pnodeTarget, byteCodeGenerator, funcInfo);",
          "5896:                 EmitUseBeforeDeclaration(pnode->sxCall.pnodeTarget->sxPid.sym, byteCodeGenerator, funcInfo);",
          "5897:                 EmitReference(pnode->sxCall.pnodeTarget, byteCodeGenerator, funcInfo);",
          "5902:             EmitLoad(pnode->sxCall.pnodeTarget, byteCodeGenerator, funcInfo);",
          "5907:         if (pnode->sxCall.pnodeArgs)",
          "5909:             ParseNode *pnodeArg = pnode->sxCall.pnodeArgs;",
          "5912:                 Emit(pnodeArg->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "5913:                 pnodeArg = pnodeArg->sxBin.pnode2;",
          "5918:         if (pnode->sxCall.isSuperCall)",
          "5920:             Emit(pnode->sxSuperCall.pnodeThis, byteCodeGenerator, funcInfo, false);",
          "5921:             Emit(pnode->sxSuperCall.pnodeNewTarget, byteCodeGenerator, funcInfo, false);",
          "",
          "[Added Lines]",
          "5871:         switch (pnode->AsParseNodeCall()->pnodeTarget->nop)",
          "5875:             funcInfo->AcquireLoc(pnode->AsParseNodeCall()->pnodeTarget);",
          "5876:             EmitReference(pnode->AsParseNodeCall()->pnodeTarget, byteCodeGenerator, funcInfo);",
          "5881:             Symbol *sym = pnode->AsParseNodeCall()->pnodeTarget->AsParseNodePid()->sym;",
          "5884:                 funcInfo->AcquireLoc(pnode->AsParseNodeCall()->pnodeTarget);",
          "5889:                 EmitLoad(pnode->AsParseNodeCall()->pnodeTarget, byteCodeGenerator, funcInfo);",
          "5896:                 EmitUseBeforeDeclaration(pnode->AsParseNodeCall()->pnodeTarget->AsParseNodePid()->sym, byteCodeGenerator, funcInfo);",
          "5897:                 EmitReference(pnode->AsParseNodeCall()->pnodeTarget, byteCodeGenerator, funcInfo);",
          "5902:             EmitLoad(pnode->AsParseNodeCall()->pnodeTarget, byteCodeGenerator, funcInfo);",
          "5907:         if (pnode->AsParseNodeCall()->pnodeArgs)",
          "5909:             ParseNode *pnodeArg = pnode->AsParseNodeCall()->pnodeArgs;",
          "5912:                 Emit(pnodeArg->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "5913:                 pnodeArg = pnodeArg->AsParseNodeBin()->pnode2;",
          "5918:         if (pnode->AsParseNodeCall()->isSuperCall)",
          "5920:             Emit(pnode->AsParseNodeSuperCall()->pnodeThis, byteCodeGenerator, funcInfo, false);",
          "5921:             Emit(pnode->AsParseNodeSuperCall()->pnodeNewTarget, byteCodeGenerator, funcInfo, false);",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "5942:     case knopLetDecl:",
          "5943:     case knopConstDecl:",
          "5946:         break;",
          "5948:     default:",
          "",
          "[Removed Lines]",
          "5945:         elem->sxVar.sym->SetNeedDeclaration(false);",
          "",
          "[Added Lines]",
          "5945:         elem->AsParseNodeVar()->sym->SetNeedDeclaration(false);",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "5961:     FuncInfo *funcInfo)",
          "5962: {",
          "5963:     Js::RegSlot restArrayLocation = funcInfo->AcquireTmpRegister();",
          "5966:     if (isAssignmentTarget)",
          "5967:     {",
          "5968:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocation);",
          "5969:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocationFinally);",
          "5971:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocation);",
          "5972:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocationFinally);",
          "5973:     }",
          "",
          "[Removed Lines]",
          "5964:     bool isAssignmentTarget = !(elem->sxUni.pnode1->IsPattern() || elem->sxUni.pnode1->IsVarLetOrConst());",
          "5970:         EmitReference(elem->sxUni.pnode1, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "5964:     bool isAssignmentTarget = !(elem->AsParseNodeUni()->pnode1->IsPattern() || elem->AsParseNodeUni()->pnode1->IsVarLetOrConst());",
          "5970:         EmitReference(elem->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "6024:     byteCodeGenerator->Writer()->MarkLabel(iteratorDone);",
          "6027:     if (isAssignmentTarget)",
          "6028:     {",
          "6029:         EmitAssignment(nullptr, restElem, restArrayLocation, byteCodeGenerator, funcInfo);",
          "",
          "[Removed Lines]",
          "6026:     ParseNode *restElem = elem->sxUni.pnode1;",
          "",
          "[Added Lines]",
          "6026:     ParseNode *restElem = elem->AsParseNodeUni()->pnode1;",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "6097:         if (list->nop == knopList)",
          "6098:         {",
          "6100:         }",
          "6101:         else",
          "6102:         {",
          "",
          "[Removed Lines]",
          "6099:             elem = list->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "6099:             elem = list->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "6112:         {",
          "6113:         case knopAsg:",
          "6117:             break;",
          "6119:         case knopVarDecl:",
          "6120:         case knopLetDecl:",
          "6121:         case knopConstDecl:",
          "6123:             break;",
          "6125:         default:",
          "",
          "[Removed Lines]",
          "6115:             init = elem->sxBin.pnode2;",
          "6116:             elem = elem->sxBin.pnode1;",
          "6122:             init = elem->sxVar.pnodeInit;",
          "",
          "[Added Lines]",
          "6115:             init = elem->AsParseNodeBin()->pnode2;",
          "6116:             elem = elem->AsParseNodeBin()->pnode1;",
          "6122:             init = elem->AsParseNodeVar()->pnodeInit;",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "6150:         {",
          "6151:             if (list->nop == knopList)",
          "6152:             {",
          "6154:                 funcInfo->ReleaseTmpRegister(doneLocation);",
          "6155:                 funcInfo->ReleaseTmpRegister(itemLocation);",
          "6156:                 continue;",
          "",
          "[Removed Lines]",
          "6153:                 list = list->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "6153:                 list = list->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "6286:         if (list->nop == knopList)",
          "6287:         {",
          "6289:         }",
          "6290:         else",
          "6291:         {",
          "",
          "[Removed Lines]",
          "6288:             list = list->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "6288:             list = list->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "6502:     EmitGetIterator(iteratorLocation, rhsLocation, byteCodeGenerator, funcInfo);",
          "6504:     Assert(lhs->nop == knopArrayPattern);",
          "6507:     if (list == nullptr)",
          "6508:     { // Handline this case ([] = obj);",
          "",
          "[Removed Lines]",
          "6505:     ParseNode *list = lhs->sxArrLit.pnode1;",
          "",
          "[Added Lines]",
          "6505:     ParseNode *list = lhs->AsParseNodeArrLit()->pnode1;",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "6593:     Assert(nameNode != nullptr);",
          "6594:     if (nameNode->nop == knopComputedName)",
          "6595:     {",
          "6597:         Emit(pnode1, byteCodeGenerator, funcInfo, false/*isConstructorCall*/);",
          "6599:         byteCodeGenerator->Writer()->Element(Js::OpCode::LdElemI_A, lhsLocation, objectLocation, pnode1->location);",
          "",
          "[Removed Lines]",
          "6596:         ParseNodePtr pnode1 = nameNode->sxUni.pnode1;",
          "",
          "[Added Lines]",
          "6596:         ParseNodePtr pnode1 = nameNode->AsParseNodeUni()->pnode1;",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "6602:     else",
          "6603:     {",
          "6604:         Assert(nameNode->nop == knopName || nameNode->nop == knopStr);",
          "6608:         uint cacheId = funcInfo->FindOrAddInlineCacheId(objectLocation, propertyId, false/*isLoadMethod*/, false/*isStore*/);",
          "6609:         byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld, lhsLocation, objectLocation, cacheId);",
          "",
          "[Removed Lines]",
          "6605:         Symbol *sym = nameNode->sxPid.sym;",
          "6606:         Js::PropertyId propertyId = sym ? sym->EnsurePosition(byteCodeGenerator) : nameNode->sxPid.pid->GetPropertyId();",
          "",
          "[Added Lines]",
          "6605:         Symbol *sym = nameNode->AsParseNodePid()->sym;",
          "6606:         Js::PropertyId propertyId = sym ? sym->EnsurePosition(byteCodeGenerator) : nameNode->AsParseNodePid()->pid->GetPropertyId();",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "6674:     Assert(memberNode->nop == knopObjectPatternMember);",
          "6676:     Js::RegSlot nameLocation = funcInfo->AcquireTmpRegister();",
          "6683:     ParseNodePtr init = nullptr;",
          "6684:     if (lhsElementNode->IsVarLetOrConst())",
          "6685:     {",
          "6687:     }",
          "6688:     else if (lhsElementNode->nop == knopAsg)",
          "6689:     {",
          "6692:     }",
          "6694:     EmitDestructuredValueOrInitializer(lhsElementNode, nameLocation, init, false /*isNonPatternAssignmentTarget*/, byteCodeGenerator, funcInfo);",
          "",
          "[Removed Lines]",
          "6677:     EmitNameInvoke(nameLocation, rhsLocation, memberNode->sxBin.pnode1, byteCodeGenerator, funcInfo);",
          "6682:     ParseNodePtr lhsElementNode = memberNode->sxBin.pnode2;",
          "6686:         init = lhsElementNode->sxVar.pnodeInit;",
          "6690:         init = lhsElementNode->sxBin.pnode2;",
          "6691:         lhsElementNode = lhsElementNode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "6677:     EmitNameInvoke(nameLocation, rhsLocation, memberNode->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo);",
          "6682:     ParseNodePtr lhsElementNode = memberNode->AsParseNodeBin()->pnode2;",
          "6686:         init = lhsElementNode->AsParseNodeVar()->pnodeInit;",
          "6690:         init = lhsElementNode->AsParseNodeBin()->pnode2;",
          "6691:         lhsElementNode = lhsElementNode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "6702:     FuncInfo *funcInfo)",
          "6703: {",
          "6704:     Assert(lhs->nop == knopObjectPattern);",
          "6707:     byteCodeGenerator->StartStatement(lhs);",
          "",
          "[Removed Lines]",
          "6705:     ParseNodePtr pnode1 = lhs->sxUni.pnode1;",
          "",
          "[Added Lines]",
          "6705:     ParseNodePtr pnode1 = lhs->AsParseNodeUni()->pnode1;",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "6720:         ParseNodePtr current = pnode1;",
          "6721:         while (current->nop == knopList)",
          "6722:         {",
          "6724:             EmitDestructuredObjectMember(memberNode, rhsLocation, byteCodeGenerator, funcInfo);",
          "6726:         }",
          "6727:         EmitDestructuredObjectMember(current, rhsLocation, byteCodeGenerator, funcInfo);",
          "6728:     }",
          "",
          "[Removed Lines]",
          "6723:             ParseNodePtr memberNode = current->sxBin.pnode1;",
          "6725:             current = current->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "6723:             ParseNodePtr memberNode = current->AsParseNodeBin()->pnode1;",
          "6725:             current = current->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "6745:     case knopLetDecl:",
          "6746:     case knopConstDecl:",
          "6747:     {",
          "6749:         Assert(sym != nullptr);",
          "6750:         byteCodeGenerator->EmitPropStore(rhsLocation, sym, nullptr, funcInfo, lhs->nop == knopLetDecl, lhs->nop == knopConstDecl);",
          "6751:         break;",
          "",
          "[Removed Lines]",
          "6748:         Symbol *sym = lhs->sxVar.sym;",
          "",
          "[Added Lines]",
          "6748:         Symbol *sym = lhs->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "6760:         }",
          "6761:         else",
          "6762:         {",
          "6764:         }",
          "6765:         break;",
          "6766:     }",
          "",
          "[Removed Lines]",
          "6763:             byteCodeGenerator->EmitPropStore(rhsLocation, lhs->sxPid.sym, lhs->sxPid.pid, funcInfo);",
          "",
          "[Added Lines]",
          "6763:             byteCodeGenerator->EmitPropStore(rhsLocation, lhs->AsParseNodePid()->sym, lhs->AsParseNodePid()->pid, funcInfo);",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "6769:     case knopDot:",
          "6770:     {",
          "6775:         {",
          "6779:             uint cacheId = funcInfo->FindOrAddInlineCacheId(tmpReg, propertyId, false, true);",
          "6781:         }",
          "6782:         else",
          "6783:         {",
          "6785:             byteCodeGenerator->Writer()->PatchableProperty(",
          "6787:         }",
          "6789:         break;",
          "",
          "[Removed Lines]",
          "6772:         Js::PropertyId propertyId = lhs->sxBin.pnode2->sxPid.PropertyIdFromNameNode();",
          "6774:         if (ByteCodeGenerator::IsSuper(lhs->sxBin.pnode1))",
          "6776:             Emit(lhs->sxSuperReference.pnodeThis, byteCodeGenerator, funcInfo, false);",
          "6777:             Js::RegSlot tmpReg = byteCodeGenerator->EmitLdObjProto(Js::OpCode::LdHomeObjProto, lhs->sxBin.pnode1->location, funcInfo);",
          "6778:             funcInfo->ReleaseLoc(lhs->sxSuperReference.pnodeThis);",
          "6780:             byteCodeGenerator->Writer()->PatchablePropertyWithThisPtr(Js::OpCode::StSuperFld, rhsLocation, tmpReg, lhs->sxSuperReference.pnodeThis->location, cacheId);",
          "6784:             uint cacheId = funcInfo->FindOrAddInlineCacheId(lhs->sxBin.pnode1->location, propertyId, false, true);",
          "6786:                 ByteCodeGenerator::GetStFldOpCode(funcInfo, false, false, false, false), rhsLocation, lhs->sxBin.pnode1->location, cacheId);",
          "",
          "[Added Lines]",
          "6772:         Js::PropertyId propertyId = lhs->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode();",
          "6774:         if (ByteCodeGenerator::IsSuper(lhs->AsParseNodeBin()->pnode1))",
          "6776:             Emit(lhs->AsParseNodeSuperReference()->pnodeThis, byteCodeGenerator, funcInfo, false);",
          "6777:             Js::RegSlot tmpReg = byteCodeGenerator->EmitLdObjProto(Js::OpCode::LdHomeObjProto, lhs->AsParseNodeBin()->pnode1->location, funcInfo);",
          "6778:             funcInfo->ReleaseLoc(lhs->AsParseNodeSuperReference()->pnodeThis);",
          "6780:             byteCodeGenerator->Writer()->PatchablePropertyWithThisPtr(Js::OpCode::StSuperFld, rhsLocation, tmpReg, lhs->AsParseNodeSuperReference()->pnodeThis->location, cacheId);",
          "6784:             uint cacheId = funcInfo->FindOrAddInlineCacheId(lhs->AsParseNodeBin()->pnode1->location, propertyId, false, true);",
          "6786:                 ByteCodeGenerator::GetStFldOpCode(funcInfo, false, false, false, false), rhsLocation, lhs->AsParseNodeBin()->pnode1->location, cacheId);",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "6792:     case knopIndex:",
          "6793:     {",
          "6797:         {",
          "6803:             targetLocation = byteCodeGenerator->EmitLdObjProto(Js::OpCode::LdHomeObjProto, targetLocation, funcInfo);",
          "6804:         }",
          "6806:         byteCodeGenerator->Writer()->Element(",
          "6807:             ByteCodeGenerator::GetStElemIOpCode(funcInfo),",
          "6810:         break;",
          "6811:     }",
          "",
          "[Removed Lines]",
          "6794:         Js::RegSlot targetLocation = lhs->sxBin.pnode1->location;",
          "6796:         if (ByteCodeGenerator::IsSuper(lhs->sxBin.pnode1))",
          "6801:             Emit(lhs->sxSuperReference.pnodeThis, byteCodeGenerator, funcInfo, false);",
          "6802:             funcInfo->ReleaseLoc(lhs->sxSuperReference.pnodeThis);",
          "6808:             rhsLocation, targetLocation, lhs->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "6794:         Js::RegSlot targetLocation = lhs->AsParseNodeBin()->pnode1->location;",
          "6796:         if (ByteCodeGenerator::IsSuper(lhs->AsParseNodeBin()->pnode1))",
          "6801:             Emit(lhs->AsParseNodeSuperReference()->pnodeThis, byteCodeGenerator, funcInfo, false);",
          "6802:             funcInfo->ReleaseLoc(lhs->AsParseNodeSuperReference()->pnodeThis);",
          "6808:             rhsLocation, targetLocation, lhs->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "6872:     case knopName:",
          "6873:     {",
          "6874:         funcInfo->AcquireLoc(lhs);",
          "6876:         break;",
          "6877:     }",
          "",
          "[Removed Lines]",
          "6875:         byteCodeGenerator->EmitPropLoad(lhs->location, lhs->sxPid.sym, lhs->sxPid.pid, funcInfo);",
          "",
          "[Added Lines]",
          "6875:         byteCodeGenerator->EmitPropLoad(lhs->location, lhs->AsParseNodePid()->sym, lhs->AsParseNodePid()->pid, funcInfo);",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "6880:     case knopDot:",
          "6881:     {",
          "6884:         funcInfo->AcquireLoc(lhs);",
          "6885:         EmitReference(lhs, byteCodeGenerator, funcInfo);",
          "6888:         break;",
          "6889:     }",
          "",
          "[Removed Lines]",
          "6883:         Js::PropertyId propertyId = lhs->sxBin.pnode2->sxPid.PropertyIdFromNameNode();",
          "6886:         uint cacheId = funcInfo->FindOrAddInlineCacheId(lhs->sxBin.pnode1->location, propertyId, false, false);",
          "6887:         byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld, lhs->location, lhs->sxBin.pnode1->location, cacheId);",
          "",
          "[Added Lines]",
          "6883:         Js::PropertyId propertyId = lhs->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode();",
          "6886:         uint cacheId = funcInfo->FindOrAddInlineCacheId(lhs->AsParseNodeBin()->pnode1->location, propertyId, false, false);",
          "6887:         byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFld, lhs->location, lhs->AsParseNodeBin()->pnode1->location, cacheId);",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "6892:         funcInfo->AcquireLoc(lhs);",
          "6893:         EmitReference(lhs, byteCodeGenerator, funcInfo);",
          "6894:         byteCodeGenerator->Writer()->Element(",
          "6896:         break;",
          "6899:     case knopCall:",
          "6901:         {",
          "6903:             Assert(CountArguments(args) == 2); // import() takes one argument",
          "6904:             Emit(args, byteCodeGenerator, funcInfo, false);",
          "6905:             funcInfo->ReleaseLoc(args);",
          "",
          "[Removed Lines]",
          "6895:             Js::OpCode::LdElemI_A, lhs->location, lhs->sxBin.pnode1->location, lhs->sxBin.pnode2->location);",
          "6900:         if (lhs->sxCall.pnodeTarget->nop == knopImport)",
          "6902:             ParseNodePtr args = lhs->sxCall.pnodeArgs;",
          "",
          "[Added Lines]",
          "6895:             Js::OpCode::LdElemI_A, lhs->location, lhs->AsParseNodeBin()->pnode1->location, lhs->AsParseNodeBin()->pnode2->location);",
          "6900:         if (lhs->AsParseNodeCall()->pnodeTarget->nop == knopImport)",
          "6902:             ParseNodePtr args = lhs->AsParseNodeCall()->pnodeArgs;",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "6927:     {",
          "6928:         while (pnode->nop == knopList)",
          "6929:         {",
          "6932:         }",
          "6933:         byteCodeGenerator->EmitTopLevelStatement(pnode, funcInfo, false);",
          "6934:     }",
          "",
          "[Removed Lines]",
          "6930:             byteCodeGenerator->EmitTopLevelStatement(pnode->sxBin.pnode1, funcInfo, false);",
          "6931:             pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "6930:             byteCodeGenerator->EmitTopLevelStatement(pnode->AsParseNodeBin()->pnode1, funcInfo, false);",
          "6931:             pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "7014:     while (pnode->nop == knopList)",
          "7015:     {",
          "7018:         argTempLocation = funcInfo->AcquireTmpRegister();",
          "7019:     }",
          "",
          "[Removed Lines]",
          "7016:         EmitOneArg(pnode->sxBin.pnode1, fAssignRegs, byteCodeGenerator, funcInfo, callSiteId, argIndex, spreadIndex, argTempLocation, false /*emitProfiledArgout*/, spreadIndices);",
          "7017:         pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "7016:         EmitOneArg(pnode->AsParseNodeBin()->pnode1, fAssignRegs, byteCodeGenerator, funcInfo, callSiteId, argIndex, spreadIndex, argTempLocation, false /*emitProfiledArgout*/, spreadIndices);",
          "7017:         pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "7061:     {",
          "7062:         while (pnode->nop == knopList)",
          "7063:         {",
          "7066:         }",
          "7068:         EmitOneArg(pnode, fAssignRegs, byteCodeGenerator, funcInfo, callSiteId, argIndex, spreadIndex, Js::Constants::NoRegister, emitProfiledArgouts, spreadIndices);",
          "",
          "[Removed Lines]",
          "7064:             EmitOneArg(pnode->sxBin.pnode1, fAssignRegs, byteCodeGenerator, funcInfo, callSiteId, argIndex, spreadIndex, Js::Constants::NoRegister, emitProfiledArgouts, spreadIndices);",
          "7065:             pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "7064:             EmitOneArg(pnode->AsParseNodeBin()->pnode1, fAssignRegs, byteCodeGenerator, funcInfo, callSiteId, argIndex, spreadIndex, Js::Constants::NoRegister, emitProfiledArgouts, spreadIndices);",
          "7065:             pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "7228:     uint index = 0;",
          "7229:     while (args->nop == knopList && index < argCount)",
          "7230:     {",
          "7232:         {",
          "7234:             vars[index++] = Js::TaggedInt::ToVarUnchecked(value);",
          "7235:         }",
          "7237:         {",
          "7239: #if ! FLOATVAR",
          "7240:             byteCodeGenerator->GetScriptContext()->BindReference(number);",
          "7241: #endif",
          "",
          "[Removed Lines]",
          "7231:         if (args->sxBin.pnode1->nop == knopInt)",
          "7233:             int value = args->sxBin.pnode1->sxInt.lw;",
          "7236:         else if (args->sxBin.pnode1->nop == knopFlt)",
          "7238:             Js::Var number = Js::JavascriptNumber::New(args->sxBin.pnode1->sxFlt.dbl, byteCodeGenerator->GetScriptContext());",
          "",
          "[Added Lines]",
          "7231:         if (args->AsParseNodeBin()->pnode1->nop == knopInt)",
          "7233:             int value = args->AsParseNodeBin()->pnode1->AsParseNodeInt()->lw;",
          "7236:         else if (args->AsParseNodeBin()->pnode1->nop == knopFlt)",
          "7238:             Js::Var number = Js::JavascriptNumber::New(args->AsParseNodeBin()->pnode1->AsParseNodeFloat()->dbl, byteCodeGenerator->GetScriptContext());",
          "",
          "---------------",
          "--- Hunk 157 ---",
          "[Context before]",
          "7245:         {",
          "7246:             AnalysisAssert(false);",
          "7247:         }",
          "7249:     }",
          "7251:     if (index == argCount)",
          "",
          "[Removed Lines]",
          "7248:         args = args->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "7248:         args = args->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 158 ---",
          "[Context before]",
          "7258:     if (args->nop == knopInt)",
          "7259:     {",
          "7261:         vars[index++] = Js::TaggedInt::ToVarUnchecked(value);",
          "7262:     }",
          "7263:     else if (args->nop == knopFlt)",
          "7264:     {",
          "7266: #if ! FLOATVAR",
          "7267:         byteCodeGenerator->GetScriptContext()->BindReference(number);",
          "7268: #endif",
          "",
          "[Removed Lines]",
          "7260:         int value = args->sxInt.lw;",
          "7265:         Js::Var number = Js::JavascriptNumber::New(args->sxFlt.dbl, byteCodeGenerator->GetScriptContext());",
          "",
          "[Added Lines]",
          "7260:         int value = args->AsParseNodeInt()->lw;",
          "7265:         Js::Var number = Js::JavascriptNumber::New(args->AsParseNodeFloat()->dbl, byteCodeGenerator->GetScriptContext());",
          "",
          "---------------",
          "--- Hunk 159 ---",
          "[Context before]",
          "7279:     uint index = 0;",
          "7280:     while (args->nop == knopList && index < argCount)",
          "7281:     {",
          "7285:     }",
          "7288:     {",
          "7290:         Js::Throw::InternalError();",
          "7291:         return;",
          "7292:     }",
          "7294:     Assert(args->nop == knopInt);",
          "7297:     Assert(index == argCount);",
          "7298: }",
          "",
          "[Removed Lines]",
          "7282:         Assert(args->sxBin.pnode1->nop == knopInt);",
          "7283:         vars[index++] = args->sxBin.pnode1->sxInt.lw;",
          "7284:         args = args->sxBin.pnode2;",
          "7287:     if (index == argCount)",
          "7289:         Assert(false);",
          "7295:     vars[index++] = args->sxInt.lw;",
          "",
          "[Added Lines]",
          "7282:         Assert(args->AsParseNodeBin()->pnode1->nop == knopInt);",
          "7283:         vars[index++] = args->AsParseNodeBin()->pnode1->AsParseNodeInt()->lw;",
          "7284:         args = args->AsParseNodeBin()->pnode2;",
          "7287:     if (index >= argCount)",
          "7294:     vars[index++] = args->AsParseNodeInt()->lw;",
          "",
          "---------------",
          "--- Hunk 160 ---",
          "[Context before]",
          "7302:     uint index = 0;",
          "7303:     while (args->nop == knopList && index < argCount)",
          "7304:     {",
          "7306:         if (nop == knopInt)",
          "7307:         {",
          "7309:         }",
          "7310:         else",
          "7311:         {",
          "7312:             Assert(nop == knopFlt);",
          "7314:         }",
          "7316:     }",
          "7319:     {",
          "7321:         Js::Throw::InternalError();",
          "7322:         return;",
          "7323:     }",
          "7325:     if (args->nop == knopInt)",
          "7326:     {",
          "7328:     }",
          "7329:     else",
          "7330:     {",
          "7331:         Assert(args->nop == knopFlt);",
          "7333:     }",
          "7335:     Assert(index == argCount);",
          "",
          "[Removed Lines]",
          "7305:         OpCode nop = args->sxBin.pnode1->nop;",
          "7308:             vars[index++] = (double)args->sxBin.pnode1->sxInt.lw;",
          "7313:             vars[index++] = args->sxBin.pnode1->sxFlt.dbl;",
          "7315:         args = args->sxBin.pnode2;",
          "7318:     if (index == argCount)",
          "7320:         Assert(false);",
          "7327:         vars[index++] = (double)args->sxInt.lw;",
          "7332:         vars[index++] = args->sxFlt.dbl;",
          "",
          "[Added Lines]",
          "7304:         OpCode nop = args->AsParseNodeBin()->pnode1->nop;",
          "7307:             vars[index++] = (double)args->AsParseNodeBin()->pnode1->AsParseNodeInt()->lw;",
          "7312:             vars[index++] = args->AsParseNodeBin()->pnode1->AsParseNodeFloat()->dbl;",
          "7314:         args = args->AsParseNodeBin()->pnode2;",
          "7317:     if (index >= argCount)",
          "7325:         vars[index++] = (double)args->AsParseNodeInt()->lw;",
          "7330:         vars[index++] = args->AsParseNodeFloat()->dbl;",
          "",
          "---------------",
          "--- Hunk 161 ---",
          "[Context before]",
          "7350:     Js::VarArrayVarCount *vars = AnewPlus(byteCodeGenerator->GetAllocator(), UInt32Math::Mul((argCount - 1), sizeof(Js::Var)), Js::VarArrayVarCount, Js::TaggedInt::ToVarUnchecked(argCount - 1));",
          "7356:     Js::ArgSlot actualArgCount = EmitArgListEnd(",
          "7358:         Js::Constants::NoRegister,",
          "7359:         Js::Constants::NoRegister,",
          "7360:         Js::Constants::NoRegister,",
          "",
          "[Removed Lines]",
          "7353:     EmitConstantArgsToVarArray(byteCodeGenerator, vars->elements, pnode->sxCall.pnodeArgs, argCount - 1);",
          "7357:         pnode->sxCall.pnodeArgs,",
          "",
          "[Added Lines]",
          "7351:     EmitConstantArgsToVarArray(byteCodeGenerator, vars->elements, pnode->AsParseNodeCall()->pnodeArgs, argCount - 1);",
          "7355:         pnode->AsParseNodeCall()->pnodeArgs,",
          "",
          "---------------",
          "--- Hunk 162 ---",
          "[Context before]",
          "7364:         Js::Constants::NoProfileId);",
          "7370:     byteCodeGenerator->Writer()->AuxiliaryContext(",
          "",
          "[Removed Lines]",
          "7367:     byteCodeGenerator->Writer()->RemoveEntryForRegSlotFromCacheIdMap(pnode->sxCall.pnodeTarget->location);",
          "",
          "[Added Lines]",
          "7365:     byteCodeGenerator->Writer()->RemoveEntryForRegSlotFromCacheIdMap(pnode->AsParseNodeCall()->pnodeTarget->location);",
          "",
          "---------------",
          "--- Hunk 163 ---",
          "[Context before]",
          "7372:         funcInfo->AcquireLoc(pnode),",
          "7373:         vars,",
          "7374:         UInt32Math::MulAdd<sizeof(Js::Var), sizeof(Js::VarArray)>((argCount-1)),",
          "7378:         AdeletePlus(byteCodeGenerator->GetAllocator(), UInt32Math::Mul((argCount-1), sizeof(Js::VarArrayVarCount)), vars);",
          "",
          "[Removed Lines]",
          "7375:         pnode->sxCall.pnodeTarget->location);",
          "",
          "[Added Lines]",
          "7373:         pnode->AsParseNodeCall()->pnodeTarget->location);",
          "",
          "---------------",
          "--- Hunk 164 ---",
          "[Context before]",
          "7427: {",
          "7431:     bool isScoped = (byteCodeGenerator->GetFlags() & fscrEval) != 0 ||",
          "7432:         (isRoot && callObjLocation != ByteCodeGenerator::RootObjectRegister);",
          "",
          "[Removed Lines]",
          "7430:     bool isRoot = pnode->nop == knopName && (pnode->sxPid.sym == nullptr || pnode->sxPid.sym->GetIsGlobal());",
          "",
          "[Added Lines]",
          "7428:     bool isRoot = pnode->nop == knopName && (pnode->AsParseNodePid()->sym == nullptr || pnode->AsParseNodePid()->sym->GetIsGlobal());",
          "",
          "---------------",
          "--- Hunk 165 ---",
          "[Context before]",
          "7438: void EmitApplyCall(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo, BOOL fReturnValue)",
          "7439: {",
          "7442:     Assert(applyNode->nop == knopDot);",
          "7445:     Js::ByteCodeLabel slowPath = byteCodeGenerator->Writer()->DefineLabel();",
          "7446:     Js::ByteCodeLabel afterSlowPath = byteCodeGenerator->Writer()->DefineLabel();",
          "7447:     Js::ByteCodeLabel argsAlreadyCreated = byteCodeGenerator->Writer()->DefineLabel();",
          "",
          "[Removed Lines]",
          "7440:     ParseNode* applyNode = pnode->sxCall.pnodeTarget;",
          "7441:     ParseNode* thisNode = pnode->sxCall.pnodeArgs->sxBin.pnode1;",
          "7444:     ParseNode* funcNode = applyNode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "7438:     ParseNode* applyNode = pnode->AsParseNodeCall()->pnodeTarget;",
          "7439:     ParseNode* thisNode = pnode->AsParseNodeCall()->pnodeArgs->AsParseNodeBin()->pnode1;",
          "7442:     ParseNode* funcNode = applyNode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 166 ---",
          "[Context before]",
          "7451:     Emit(funcNode, byteCodeGenerator, funcInfo, false);",
          "7453:     funcInfo->AcquireLoc(applyNode);",
          "",
          "[Removed Lines]",
          "7454:     Js::PropertyId propertyId = applyNode->sxBin.pnode2->sxPid.PropertyIdFromNameNode();",
          "",
          "[Added Lines]",
          "7452:     Js::PropertyId propertyId = applyNode->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode();",
          "",
          "---------------",
          "--- Hunk 167 ---",
          "[Context before]",
          "7535:     switch (pnodeTarget->nop)",
          "7536:     {",
          "7537:     case knopDot:",
          "7540:         break;",
          "7542:     case knopIndex:",
          "7545:         break;",
          "7547:     case knopName:",
          "7550:         if (*thisLocation == Js::Constants::NoRegister)",
          "7551:         {",
          "",
          "[Removed Lines]",
          "7549:         byteCodeGenerator->EmitLoadInstance(pnodeTarget->sxPid.sym, pnodeTarget->sxPid.pid, thisLocation, callObjLocation, funcInfo);",
          "",
          "[Added Lines]",
          "7547:         byteCodeGenerator->EmitLoadInstance(pnodeTarget->AsParseNodePid()->sym, pnodeTarget->AsParseNodePid()->pid, thisLocation, callObjLocation, funcInfo);",
          "",
          "---------------",
          "--- Hunk 168 ---",
          "[Context before]",
          "7591:         {",
          "7595:         }",
          "7598:         {",
          "7600:         }",
          "7607:         {",
          "7609:             protoLocation = byteCodeGenerator->EmitLdObjProto(Js::OpCode::LdHomeObjProto, protoLocation, funcInfo);",
          "7616:         }",
          "7617:         else",
          "7618:         {",
          "7620:         }",
          "7622:         EmitMethodFld(pnodeTarget, protoLocation, propertyId, byteCodeGenerator, funcInfo);",
          "",
          "[Removed Lines]",
          "7594:             SaveOpndValue(pnodeTarget->sxBin.pnode1, funcInfo);",
          "7597:         if ((pnodeTarget->sxBin.pnode2->nop == knopName) && ((pnodeTarget->sxBin.pnode2->sxPid.PropertyIdFromNameNode() == Js::PropertyIds::apply) || (pnodeTarget->sxBin.pnode2->sxPid.PropertyIdFromNameNode() == Js::PropertyIds::call)))",
          "7599:             pnodeTarget->sxBin.pnode1->SetIsCallApplyTargetLoad();",
          "7602:         Emit(pnodeTarget->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "7603:         Js::PropertyId propertyId = pnodeTarget->sxBin.pnode2->sxPid.PropertyIdFromNameNode();",
          "7604:         Js::RegSlot protoLocation = pnodeTarget->sxBin.pnode1->location;",
          "7606:         if (ByteCodeGenerator::IsSuper(pnodeTarget->sxBin.pnode1))",
          "7608:             Emit(pnodeTarget->sxSuperReference.pnodeThis, byteCodeGenerator, funcInfo, false);",
          "7610:             funcInfo->ReleaseLoc(pnodeTarget->sxSuperReference.pnodeThis);",
          "7611:             funcInfo->ReleaseLoc(pnodeTarget->sxBin.pnode1);",
          "",
          "[Added Lines]",
          "7592:             SaveOpndValue(pnodeTarget->AsParseNodeBin()->pnode1, funcInfo);",
          "7595:         if ((pnodeTarget->AsParseNodeBin()->pnode2->nop == knopName) && ((pnodeTarget->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode() == Js::PropertyIds::apply) || (pnodeTarget->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode() == Js::PropertyIds::call)))",
          "7597:             pnodeTarget->AsParseNodeBin()->pnode1->SetIsCallApplyTargetLoad();",
          "7600:         Emit(pnodeTarget->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "7601:         Js::PropertyId propertyId = pnodeTarget->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode();",
          "7602:         Js::RegSlot protoLocation = pnodeTarget->AsParseNodeBin()->pnode1->location;",
          "7604:         if (ByteCodeGenerator::IsSuper(pnodeTarget->AsParseNodeBin()->pnode1))",
          "7606:             Emit(pnodeTarget->AsParseNodeSuperReference()->pnodeThis, byteCodeGenerator, funcInfo, false);",
          "7608:             funcInfo->ReleaseLoc(pnodeTarget->AsParseNodeSuperReference()->pnodeThis);",
          "7609:             funcInfo->ReleaseLoc(pnodeTarget->AsParseNodeBin()->pnode1);",
          "",
          "---------------",
          "--- Hunk 169 ---",
          "[Context before]",
          "7628:         funcInfo->AcquireLoc(pnodeTarget);",
          "7632:         {",
          "7636:         }",
          "7644:         {",
          "7646:             protoLocation = byteCodeGenerator->EmitLdObjProto(Js::OpCode::LdHomeObjProto, protoLocation, funcInfo);",
          "7652:         }",
          "7653:         else",
          "7654:         {",
          "7656:         }",
          "7658:         EmitMethodElem(pnodeTarget, protoLocation, indexLocation, byteCodeGenerator);",
          "7663:         {",
          "7665:         }",
          "7666:         break;",
          "7667:     }",
          "",
          "[Removed Lines]",
          "7631:         if (fSideEffectArgs || !(ParseNode::Grfnop(pnodeTarget->sxBin.pnode2->nop) & fnopLeaf))",
          "7635:             SaveOpndValue(pnodeTarget->sxBin.pnode1, funcInfo);",
          "7637:         Emit(pnodeTarget->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "7638:         Emit(pnodeTarget->sxBin.pnode2, byteCodeGenerator, funcInfo, false);",
          "7640:         Js::RegSlot indexLocation = pnodeTarget->sxBin.pnode2->location;",
          "7641:         Js::RegSlot protoLocation = pnodeTarget->sxBin.pnode1->location;",
          "7643:         if (ByteCodeGenerator::IsSuper(pnodeTarget->sxBin.pnode1))",
          "7645:             Emit(pnodeTarget->sxSuperReference.pnodeThis, byteCodeGenerator, funcInfo, false);",
          "7647:             funcInfo->ReleaseLoc(pnodeTarget->sxSuperReference.pnodeThis);",
          "7660:         funcInfo->ReleaseLoc(pnodeTarget->sxBin.pnode2); // don't release indexLocation until after we use it.",
          "7662:         if (ByteCodeGenerator::IsSuper(pnodeTarget->sxBin.pnode1))",
          "7664:             funcInfo->ReleaseLoc(pnodeTarget->sxBin.pnode1);",
          "",
          "[Added Lines]",
          "7629:         if (fSideEffectArgs || !(ParseNode::Grfnop(pnodeTarget->AsParseNodeBin()->pnode2->nop) & fnopLeaf))",
          "7633:             SaveOpndValue(pnodeTarget->AsParseNodeBin()->pnode1, funcInfo);",
          "7635:         Emit(pnodeTarget->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "7636:         Emit(pnodeTarget->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo, false);",
          "7638:         Js::RegSlot indexLocation = pnodeTarget->AsParseNodeBin()->pnode2->location;",
          "7639:         Js::RegSlot protoLocation = pnodeTarget->AsParseNodeBin()->pnode1->location;",
          "7641:         if (ByteCodeGenerator::IsSuper(pnodeTarget->AsParseNodeBin()->pnode1))",
          "7643:             Emit(pnodeTarget->AsParseNodeSuperReference()->pnodeThis, byteCodeGenerator, funcInfo, false);",
          "7645:             funcInfo->ReleaseLoc(pnodeTarget->AsParseNodeSuperReference()->pnodeThis);",
          "7658:         funcInfo->ReleaseLoc(pnodeTarget->AsParseNodeBin()->pnode2); // don't release indexLocation until after we use it.",
          "7660:         if (ByteCodeGenerator::IsSuper(pnodeTarget->AsParseNodeBin()->pnode1))",
          "7662:             funcInfo->ReleaseLoc(pnodeTarget->AsParseNodeBin()->pnode1);",
          "",
          "---------------",
          "--- Hunk 170 ---",
          "[Context before]",
          "7677:             {",
          "7678:                 SaveOpndValue(pnodeTarget, funcInfo);",
          "7679:             }",
          "7681:             if (*callObjLocation != Js::Constants::NoRegister)",
          "7682:             {",
          "7685:                 EmitMethodFld(pnodeTarget, *callObjLocation, propertyId, byteCodeGenerator, funcInfo);",
          "7686:                 break;",
          "7687:             }",
          "",
          "[Removed Lines]",
          "7680:             byteCodeGenerator->EmitLoadInstance(pnodeTarget->sxPid.sym, pnodeTarget->sxPid.pid, thisLocation, callObjLocation, funcInfo);",
          "7684:                 Js::PropertyId propertyId = pnodeTarget->sxPid.PropertyIdFromNameNode();",
          "",
          "[Added Lines]",
          "7678:             byteCodeGenerator->EmitLoadInstance(pnodeTarget->AsParseNodePid()->sym, pnodeTarget->AsParseNodePid()->pid, thisLocation, callObjLocation, funcInfo);",
          "7682:                 Js::PropertyId propertyId = pnodeTarget->AsParseNodePid()->PropertyIdFromNameNode();",
          "",
          "---------------",
          "--- Hunk 171 ---",
          "[Context before]",
          "7720:     Js::OpCode op;",
          "7721:     Js::CallFlags callFlags = Js::CallFlags::CallFlags_None;",
          "7722:     uint spreadExtraAlloc = 0;",
          "7725:     Js::ArgSlot actualArgSlotCount = (Js::ArgSlot) actualArgCount;",
          "",
          "[Removed Lines]",
          "7719:     ParseNode *pnodeTarget = pnode->sxBin.pnode1;",
          "7723:     bool isSuperCall = pnode->sxCall.isSuperCall;",
          "",
          "[Added Lines]",
          "7717:     ParseNode *pnodeTarget = pnode->AsParseNodeCall()->pnodeTarget;",
          "7721:     bool isSuperCall = pnode->AsParseNodeCall()->isSuperCall;",
          "",
          "---------------",
          "--- Hunk 172 ---",
          "[Context before]",
          "7759:             callFlags = (Js::CallFlags) (callFlags | Js::CallFlags::CallFlags_ExtraArg | Js::CallFlags::CallFlags_NewTarget);",
          "7760:         }",
          "7763:         {",
          "7764:             op = (isSuperCall || fHasNewTarget) ? Js::OpCode::CallIExtendedFlags : Js::OpCode::CallIExtended;",
          "7765:         }",
          "",
          "[Removed Lines]",
          "7762:         if (pnode->sxCall.spreadArgCount > 0)",
          "",
          "[Added Lines]",
          "7760:         if (pnode->AsParseNodeCall()->spreadArgCount > 0)",
          "",
          "---------------",
          "--- Hunk 173 ---",
          "[Context before]",
          "7786:         uint spreadIndicesSize = 0;",
          "7787:         Js::CallIExtendedOptions options = Js::CallIExtended_None;",
          "7790:         {",
          "7791:             Assert(spreadIndices != nullptr);",
          "7792:             spreadExtraAlloc = UInt32Math::Mul(spreadIndices->count, sizeof(uint32));",
          "",
          "[Removed Lines]",
          "7789:         if (pnode->sxCall.spreadArgCount > 0)",
          "",
          "[Added Lines]",
          "7787:         if (pnode->AsParseNodeCall()->spreadArgCount > 0)",
          "",
          "---------------",
          "--- Hunk 174 ---",
          "[Context before]",
          "7805:         }",
          "7806:     }",
          "7809:     {",
          "7810:         Assert(spreadExtraAlloc != 0);",
          "7811:         AdeletePlus(byteCodeGenerator->GetAllocator(), spreadExtraAlloc, spreadIndices);",
          "",
          "[Removed Lines]",
          "7808:     if (pnode->sxCall.spreadArgCount > 0)",
          "",
          "[Added Lines]",
          "7806:     if (pnode->AsParseNodeCall()->spreadArgCount > 0)",
          "",
          "---------------",
          "--- Hunk 175 ---",
          "[Context before]",
          "7833:     switch (pnodeTarget->nop)",
          "7834:     {",
          "7835:     case knopDot:",
          "7836:     {",
          "7840:         EmitMethodFld(pnodeTarget, callObjLocation, propertyId, byteCodeGenerator, funcInfo);",
          "7841:         EmitCallI(pnode, /*fEvaluateComponents*/ FALSE, fIsEval, /*fHasNewTarget*/ FALSE, actualArgCount, byteCodeGenerator, funcInfo, callSiteId, spreadIndices);",
          "",
          "[Removed Lines]",
          "7831:     ParseNode *pnodeTarget = pnode->sxBin.pnode1;",
          "7837:         Assert(pnodeTarget->sxBin.pnode2->nop == knopName);",
          "7838:         Js::PropertyId propertyId = pnodeTarget->sxBin.pnode2->sxPid.PropertyIdFromNameNode();",
          "",
          "[Added Lines]",
          "7829:     ParseNode *pnodeTarget = pnode->AsParseNodeCall()->pnodeTarget;",
          "7835:         Assert(pnodeTarget->AsParseNodeBin()->pnode2->nop == knopName);",
          "7836:         Js::PropertyId propertyId = pnodeTarget->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode();",
          "",
          "---------------",
          "--- Hunk 176 ---",
          "[Context before]",
          "7845:     case knopIndex:",
          "7846:     {",
          "7848:         EmitCallI(pnode, /*fEvaluateComponents*/ FALSE, fIsEval, /*fHasNewTarget*/ FALSE, actualArgCount, byteCodeGenerator, funcInfo, callSiteId, spreadIndices);",
          "7849:     }",
          "7850:     break;",
          "",
          "[Removed Lines]",
          "7847:         EmitMethodElem(pnodeTarget, pnodeTarget->sxBin.pnode1->location, pnodeTarget->sxBin.pnode2->location, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "7845:         EmitMethodElem(pnodeTarget, pnodeTarget->AsParseNodeBin()->pnode1->location, pnodeTarget->AsParseNodeBin()->pnode2->location, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 177 ---",
          "[Context before]",
          "7860:             }",
          "7861:             funcInfo->ReleaseTmpRegister(callObjLocation);",
          "7864:             EmitMethodFld(pnodeTarget, callObjLocation, propertyId, byteCodeGenerator, funcInfo);",
          "7865:             EmitCallI(pnode, /*fEvaluateComponents*/ FALSE, fIsEval, /*fHasNewTarget*/ FALSE, actualArgCount, byteCodeGenerator, funcInfo, callSiteId, spreadIndices);",
          "7866:             break;",
          "",
          "[Removed Lines]",
          "7863:             Js::PropertyId propertyId = pnodeTarget->sxPid.PropertyIdFromNameNode();",
          "",
          "[Added Lines]",
          "7861:             Js::PropertyId propertyId = pnodeTarget->AsParseNodePid()->PropertyIdFromNameNode();",
          "",
          "---------------",
          "--- Hunk 178 ---",
          "[Context before]",
          "7908: void EmitNew(ParseNode* pnode, ByteCodeGenerator* byteCodeGenerator, FuncInfo* funcInfo)",
          "7909: {",
          "7911:     argCount++; // include \"this\"",
          "7913:     BOOL fSideEffectArgs = FALSE;",
          "7915:     AssertOrFailFastMsg(argCount == tmpCount, \"argCount cannot overflow as max args capped at parser level\");",
          "7917:     byteCodeGenerator->StartStatement(pnode);",
          "",
          "[Removed Lines]",
          "7910:     Js::ArgSlot argCount = pnode->sxCall.argCount;",
          "7914:     unsigned int tmpCount = CountArguments(pnode->sxCall.pnodeArgs, &fSideEffectArgs);",
          "",
          "[Added Lines]",
          "7908:     Js::ArgSlot argCount = pnode->AsParseNodeCall()->argCount;",
          "7912:     unsigned int tmpCount = CountArguments(pnode->AsParseNodeCall()->pnodeArgs, &fSideEffectArgs);",
          "",
          "---------------",
          "--- Hunk 179 ---",
          "[Context before]",
          "7924:     if (fSideEffectArgs)",
          "7925:     {",
          "7927:     }",
          "7932:     {",
          "7934:         Js::OpCode op = (CreateNativeArrays(byteCodeGenerator, funcInfo)",
          "7936:             ? Js::OpCode::NewScObjArray : Js::OpCode::NewScObject;",
          "7937:         Assert(argCount == 1);",
          "7939:         Js::ProfileId callSiteId = byteCodeGenerator->GetNextCallSiteId(op);",
          "7940:         byteCodeGenerator->Writer()->StartCall(Js::OpCode::StartCall, argCount);",
          "7941:         byteCodeGenerator->Writer()->CallI(op, funcInfo->AcquireLoc(pnode),",
          "7943:     }",
          "7944:     else",
          "7945:     {",
          "",
          "[Removed Lines]",
          "7926:         SaveOpndValue(pnode->sxCall.pnodeTarget, funcInfo);",
          "7929:     Emit(pnode->sxCall.pnodeTarget, byteCodeGenerator, funcInfo, false, true);",
          "7931:     if (pnode->sxCall.pnodeArgs == nullptr)",
          "7933:         funcInfo->ReleaseLoc(pnode->sxCall.pnodeTarget);",
          "7935:             && CallTargetIsArray(pnode->sxCall.pnodeTarget))",
          "7942:             pnode->sxCall.pnodeTarget->location, argCount, callSiteId);",
          "",
          "[Added Lines]",
          "7924:         SaveOpndValue(pnode->AsParseNodeCall()->pnodeTarget, funcInfo);",
          "7927:     Emit(pnode->AsParseNodeCall()->pnodeTarget, byteCodeGenerator, funcInfo, false, true);",
          "7929:     if (pnode->AsParseNodeCall()->pnodeArgs == nullptr)",
          "7931:         funcInfo->ReleaseLoc(pnode->AsParseNodeCall()->pnodeTarget);",
          "7933:             && CallTargetIsArray(pnode->AsParseNodeCall()->pnodeTarget))",
          "7940:             pnode->AsParseNodeCall()->pnodeTarget->location, argCount, callSiteId);",
          "",
          "---------------",
          "--- Hunk 180 ---",
          "[Context before]",
          "7948:         if (IsCallOfConstants(pnode))",
          "7949:         {",
          "7950:             byteCodeGenerator->Writer()->StartCall(Js::OpCode::StartCall, argCount);",
          "7952:             actualArgCount = EmitNewObjectOfConstants(pnode, byteCodeGenerator, funcInfo, argCount);",
          "7953:         }",
          "7954:         else",
          "7955:         {",
          "7956:             Js::OpCode op;",
          "7958:             {",
          "7960:             }",
          "7961:             else",
          "7962:             {",
          "7964:             }",
          "7966:             Js::ProfileId callSiteId = byteCodeGenerator->GetNextCallSiteId(op);",
          "",
          "[Removed Lines]",
          "7951:             funcInfo->ReleaseLoc(pnode->sxCall.pnodeTarget);",
          "7957:             if ((CreateNativeArrays(byteCodeGenerator, funcInfo) && CallTargetIsArray(pnode->sxCall.pnodeTarget)))",
          "7959:                 op = pnode->sxCall.spreadArgCount > 0 ? Js::OpCode::NewScObjArraySpread : Js::OpCode::NewScObjArray;",
          "7963:                 op = pnode->sxCall.spreadArgCount > 0 ? Js::OpCode::NewScObjectSpread : Js::OpCode::NewScObject;",
          "",
          "[Added Lines]",
          "7949:             funcInfo->ReleaseLoc(pnode->AsParseNodeCall()->pnodeTarget);",
          "7955:             if ((CreateNativeArrays(byteCodeGenerator, funcInfo) && CallTargetIsArray(pnode->AsParseNodeCall()->pnodeTarget)))",
          "7957:                 op = pnode->AsParseNodeCall()->spreadArgCount > 0 ? Js::OpCode::NewScObjArraySpread : Js::OpCode::NewScObjArray;",
          "7961:                 op = pnode->AsParseNodeCall()->spreadArgCount > 0 ? Js::OpCode::NewScObjectSpread : Js::OpCode::NewScObject;",
          "",
          "---------------",
          "--- Hunk 181 ---",
          "[Context before]",
          "7971:             Js::AuxArray<uint32> *spreadIndices = nullptr;",
          "7979:             {",
          "7980:                 Assert(spreadIndices != nullptr);",
          "7981:                 uint spreadExtraAlloc = UInt32Math::Mul(spreadIndices->count, sizeof(uint32));",
          "7982:                 uint spreadIndicesSize = UInt32Math::Add(sizeof(*spreadIndices), spreadExtraAlloc);",
          "7984:                     (uint16)actualArgCount, Js::CallIExtended_SpreadArgs,",
          "7985:                     spreadIndices, spreadIndicesSize, callSiteId);",
          "7986:             }",
          "7987:             else",
          "7988:             {",
          "7990:                     (uint16)actualArgCount, callSiteId);",
          "7991:             }",
          "7992:         }",
          "",
          "[Removed Lines]",
          "7973:             actualArgCount = EmitArgList(pnode->sxCall.pnodeArgs, Js::Constants::NoRegister, Js::Constants::NoRegister,",
          "7974:                 false, true, byteCodeGenerator, funcInfo, callSiteId, argCount, pnode->sxCall.hasDestructuring, emitProfiledArgouts, pnode->sxCall.spreadArgCount, &spreadIndices);",
          "7976:             funcInfo->ReleaseLoc(pnode->sxCall.pnodeTarget);",
          "7978:             if (pnode->sxCall.spreadArgCount > 0)",
          "7983:                 byteCodeGenerator->Writer()->CallIExtended(op, funcInfo->AcquireLoc(pnode), pnode->sxCall.pnodeTarget->location,",
          "7989:                 byteCodeGenerator->Writer()->CallI(op, funcInfo->AcquireLoc(pnode), pnode->sxCall.pnodeTarget->location,",
          "",
          "[Added Lines]",
          "7971:             actualArgCount = EmitArgList(pnode->AsParseNodeCall()->pnodeArgs, Js::Constants::NoRegister, Js::Constants::NoRegister,",
          "7972:                 false, true, byteCodeGenerator, funcInfo, callSiteId, argCount, pnode->AsParseNodeCall()->hasDestructuring, emitProfiledArgouts, pnode->AsParseNodeCall()->spreadArgCount, &spreadIndices);",
          "7974:             funcInfo->ReleaseLoc(pnode->AsParseNodeCall()->pnodeTarget);",
          "7976:             if (pnode->AsParseNodeCall()->spreadArgCount > 0)",
          "7981:                 byteCodeGenerator->Writer()->CallIExtended(op, funcInfo->AcquireLoc(pnode), pnode->AsParseNodeCall()->pnodeTarget->location,",
          "7987:                 byteCodeGenerator->Writer()->CallI(op, funcInfo->AcquireLoc(pnode), pnode->AsParseNodeCall()->pnodeTarget->location,",
          "",
          "---------------",
          "--- Hunk 182 ---",
          "[Context before]",
          "8013:     Js::RegSlot callObjLocation = Js::Constants::NoRegister;",
          "8014:     BOOL fHasNewTarget = newTargetLocation != Js::Constants::NoRegister;",
          "8015:     BOOL fSideEffectArgs = FALSE;",
          "",
          "[Removed Lines]",
          "8016:     BOOL fIsSuperCall = pnode->sxCall.isSuperCall;",
          "8017:     ParseNode *pnodeTarget = pnode->sxCall.pnodeTarget;",
          "8018:     ParseNode *pnodeArgs = pnode->sxCall.pnodeArgs;",
          "8019:     uint16 spreadArgCount = pnode->sxCall.spreadArgCount;",
          "8021:     if (CreateNativeArrays(byteCodeGenerator, funcInfo) && CallTargetIsArray(pnode->sxCall.pnodeTarget)) {",
          "",
          "[Added Lines]",
          "8014:     BOOL fIsSuperCall = pnode->AsParseNodeCall()->isSuperCall;",
          "8015:     ParseNode *pnodeTarget = pnode->AsParseNodeCall()->pnodeTarget;",
          "8016:     ParseNode *pnodeArgs = pnode->AsParseNodeCall()->pnodeArgs;",
          "8017:     uint16 spreadArgCount = pnode->AsParseNodeCall()->spreadArgCount;",
          "8019:     if (CreateNativeArrays(byteCodeGenerator, funcInfo) && CallTargetIsArray(pnode->AsParseNodeCall()->pnodeTarget)) {",
          "",
          "---------------",
          "--- Hunk 183 ---",
          "[Context before]",
          "8028:     }",
          "8033:     Js::ArgSlot argSlotCount = (Js::ArgSlot)argCount;",
          "8035:     if (fIsEval)",
          "",
          "[Removed Lines]",
          "8030:     unsigned int argCount = CountArguments(pnode->sxCall.pnodeArgs, &fSideEffectArgs);",
          "8032:     BOOL fIsEval = pnode->sxCall.isEvalCall;",
          "",
          "[Added Lines]",
          "8028:     unsigned int argCount = CountArguments(pnode->AsParseNodeCall()->pnodeArgs, &fSideEffectArgs);",
          "8030:     BOOL fIsEval = pnode->AsParseNodeCall()->isEvalCall;",
          "",
          "---------------",
          "--- Hunk 184 ---",
          "[Context before]",
          "8105:     bool emitProfiledArgouts = callSiteId != byteCodeGenerator->GetCurrentCallSiteId();",
          "8106:     Js::AuxArray<uint32> *spreadIndices;",
          "8109:     if (!fEvaluateComponents)",
          "8110:     {",
          "",
          "[Removed Lines]",
          "8107:     EmitArgList(pnodeArgs, thisLocation, newTargetLocation, fIsEval, fEvaluateComponents, byteCodeGenerator, funcInfo, callSiteId, (Js::ArgSlot)argCount, pnode->sxCall.hasDestructuring, emitProfiledArgouts, spreadArgCount, &spreadIndices);",
          "",
          "[Added Lines]",
          "8105:     EmitArgList(pnodeArgs, thisLocation, newTargetLocation, fIsEval, fEvaluateComponents, byteCodeGenerator, funcInfo, callSiteId, (Js::ArgSlot)argCount, pnode->AsParseNodeCall()->hasDestructuring, emitProfiledArgouts, spreadArgCount, &spreadIndices);",
          "",
          "---------------",
          "--- Hunk 185 ---",
          "[Context before]",
          "8168:         return;",
          "8169:     }",
          "8172:     {",
          "8173:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetComputedNameVar, exprNode->location, nameNode->location);",
          "8174:     }",
          "",
          "[Removed Lines]",
          "8171:     if ((exprNode->nop == knopFncDecl && (exprNode->sxFnc.pnodeName == nullptr || exprNode->sxFnc.pnodeName->nop != knopVarDecl)))",
          "",
          "[Added Lines]",
          "8169:     if ((exprNode->nop == knopFncDecl && (exprNode->AsParseNodeFnc()->pnodeName == nullptr || exprNode->AsParseNodeFnc()->pnodeName->nop != knopVarDecl)))",
          "",
          "---------------",
          "--- Hunk 186 ---",
          "[Context before]",
          "8177: void EmitMemberNode(ParseNode *memberNode, Js::RegSlot objectLocation, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo, ParseNode* parentNode, bool useStore, bool* isObjectEmpty = nullptr)",
          "8178: {",
          "8182:     bool isFncDecl = exprNode->nop == knopFncDecl;",
          "",
          "[Removed Lines]",
          "8179:     ParseNode *nameNode = memberNode->sxBin.pnode1;",
          "8180:     ParseNode *exprNode = memberNode->sxBin.pnode2;",
          "8183:     bool isClassMember = isFncDecl && exprNode->sxFnc.IsClassMember();",
          "",
          "[Added Lines]",
          "8177:     ParseNode *nameNode = memberNode->AsParseNodeBin()->pnode1;",
          "8178:     ParseNode *exprNode = memberNode->AsParseNodeBin()->pnode2;",
          "8181:     bool isClassMember = isFncDecl && exprNode->AsParseNodeFnc()->IsClassMember();",
          "",
          "---------------",
          "--- Hunk 187 ---",
          "[Context before]",
          "8193:         EmitBinaryOpnds(nameNode, exprNode, byteCodeGenerator, funcInfo);",
          "8195:         {",
          "8196:             EmitComputedFunctionNameVar(nameNode, exprNode, byteCodeGenerator);",
          "8197:         }",
          "",
          "[Removed Lines]",
          "8192:         nameNode->location = nameNode->sxUni.pnode1->location;",
          "8194:         if (isFncDecl && !exprNode->sxFnc.IsClassConstructor())",
          "",
          "[Added Lines]",
          "8190:         nameNode->location = nameNode->AsParseNodeUni()->pnode1->location;",
          "8192:         if (isFncDecl && !exprNode->AsParseNodeFnc()->IsClassConstructor())",
          "",
          "---------------",
          "--- Hunk 188 ---",
          "[Context before]",
          "8238:     }",
          "8240:     Emit(exprNode, byteCodeGenerator, funcInfo, false);",
          "8243:     if (Js::PropertyIds::name == propertyId",
          "8244:         && exprNode->nop == knopFncDecl",
          "8246:         && parentNode != nullptr && parentNode->nop == knopClassDecl",
          "8248:     {",
          "8250:         nameFunc->SetIsStaticNameFunction(true);",
          "8251:     }",
          "8253:     if (memberNode->nop == knopMember || memberNode->nop == knopMemberShort)",
          "8254:     {",
          "8257:         {",
          "8258:             byteCodeGenerator->Writer()->Property(Js::OpCode::InitProto, exprNode->location, objectLocation,",
          "8259:                 funcInfo->FindOrAddReferencedPropertyId(propertyId));",
          "",
          "[Removed Lines]",
          "8241:     Js::PropertyId propertyId = nameNode->sxPid.PropertyIdFromNameNode();",
          "8245:         && exprNode->sxFnc.IsStaticMember()",
          "8247:         && parentNode->sxClass.pnodeConstructor != nullptr)",
          "8249:         Js::ParseableFunctionInfo* nameFunc = parentNode->sxClass.pnodeConstructor->sxFnc.funcInfo->byteCodeFunction->GetParseableFunctionInfo();",
          "8256:         if (propertyId == Js::PropertyIds::__proto__ && memberNode->nop != knopMemberShort && (exprNode->nop != knopFncDecl || !exprNode->sxFnc.IsMethod()))",
          "",
          "[Added Lines]",
          "8239:     Js::PropertyId propertyId = nameNode->AsParseNodePid()->PropertyIdFromNameNode();",
          "8243:         && exprNode->AsParseNodeFnc()->IsStaticMember()",
          "8245:         && parentNode->AsParseNodeClass()->pnodeConstructor != nullptr)",
          "8247:         Js::ParseableFunctionInfo* nameFunc = parentNode->AsParseNodeClass()->pnodeConstructor->AsParseNodeFnc()->funcInfo->byteCodeFunction->GetParseableFunctionInfo();",
          "8254:         if (propertyId == Js::PropertyIds::__proto__ && memberNode->nop != knopMemberShort && (exprNode->nop != knopFncDecl || !exprNode->AsParseNodeFnc()->IsMethod()))",
          "",
          "---------------",
          "--- Hunk 189 ---",
          "[Context before]",
          "8314:     {",
          "8315:         while (memberList->nop == knopList)",
          "8316:         {",
          "8318:             EmitMemberNode(memberNode, objectLocation, byteCodeGenerator, funcInfo, parentNode, /*useStore*/ false, &isObjectEmpty);",
          "8320:         }",
          "8321:         EmitMemberNode(memberList, objectLocation, byteCodeGenerator, funcInfo, parentNode, /*useStore*/ false, &isObjectEmpty);",
          "8322:     }",
          "",
          "[Removed Lines]",
          "8317:             ParseNode *memberNode = memberList->sxBin.pnode1;",
          "8319:             memberList = memberList->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "8315:             ParseNode *memberNode = memberList->AsParseNodeBin()->pnode1;",
          "8317:             memberList = memberList->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 190 ---",
          "[Context before]",
          "8347:     {",
          "8348:         while (memberList->nop == knopList)",
          "8349:         {",
          "8351:             {",
          "8352:                 hasComputedName = true;",
          "8353:                 break;",
          "8354:             }",
          "8357:             if (!byteCodeGenerator->GetScriptContext()->IsNumericPropertyId(propertyId, &value))",
          "8358:             {",
          "8359:                 propertyIds->Item(propertyId);",
          "8360:             }",
          "8363:         }",
          "8366:         {",
          "8368:             if (!byteCodeGenerator->GetScriptContext()->IsNumericPropertyId(propertyId, &value))",
          "8369:             {",
          "8370:                 propertyIds->Item(propertyId);",
          "",
          "[Removed Lines]",
          "8350:             if (memberList->sxBin.pnode1->sxBin.pnode1->nop == knopComputedName)",
          "8356:             propertyId = memberList->sxBin.pnode1->sxBin.pnode1->sxPid.PropertyIdFromNameNode();",
          "8362:             memberList = memberList->sxBin.pnode2;",
          "8365:         if (memberList->sxBin.pnode1->nop != knopComputedName && !hasComputedName)",
          "8367:             propertyId = memberList->sxBin.pnode1->sxPid.PropertyIdFromNameNode();",
          "",
          "[Added Lines]",
          "8348:             if (memberList->AsParseNodeBin()->pnode1->AsParseNodeBin()->pnode1->nop == knopComputedName)",
          "8354:             propertyId = memberList->AsParseNodeBin()->pnode1->AsParseNodeBin()->pnode1->AsParseNodePid()->PropertyIdFromNameNode();",
          "8360:             memberList = memberList->AsParseNodeBin()->pnode2;",
          "8363:         if (memberList->AsParseNodeBin()->pnode1->nop != knopComputedName && !hasComputedName)",
          "8365:             propertyId = memberList->AsParseNodeBin()->pnode1->AsParseNodePid()->PropertyIdFromNameNode();",
          "",
          "---------------",
          "--- Hunk 191 ---",
          "[Context before]",
          "8395:         unsigned int argIndex = 0;",
          "8396:         while (memberList->nop == knopList)",
          "8397:         {",
          "8399:             {",
          "8400:                 break;",
          "8401:             }",
          "8403:             if (!byteCodeGenerator->GetScriptContext()->IsNumericPropertyId(propertyId, &value) && propertyIds->Remove(propertyId))",
          "8404:             {",
          "8405:                 propIds->elements[argIndex] = propertyId;",
          "8406:                 argIndex++;",
          "8407:             }",
          "8409:         }",
          "8412:         {",
          "8414:             if (!byteCodeGenerator->GetScriptContext()->IsNumericPropertyId(propertyId, &value) && propertyIds->Remove(propertyId))",
          "8415:             {",
          "8416:                 propIds->elements[argIndex] = propertyId;",
          "",
          "[Removed Lines]",
          "8398:             if (memberList->sxBin.pnode1->sxBin.pnode1->nop == knopComputedName)",
          "8402:             propertyId = memberList->sxBin.pnode1->sxBin.pnode1->sxPid.PropertyIdFromNameNode();",
          "8408:             memberList = memberList->sxBin.pnode2;",
          "8411:         if (memberList->sxBin.pnode1->nop != knopComputedName && !hasComputedName)",
          "8413:             propertyId = memberList->sxBin.pnode1->sxPid.PropertyIdFromNameNode();",
          "",
          "[Added Lines]",
          "8396:             if (memberList->AsParseNodeBin()->pnode1->AsParseNodeBin()->pnode1->nop == knopComputedName)",
          "8400:             propertyId = memberList->AsParseNodeBin()->pnode1->AsParseNodeBin()->pnode1->AsParseNodePid()->PropertyIdFromNameNode();",
          "8406:             memberList = memberList->AsParseNodeBin()->pnode2;",
          "8409:         if (memberList->AsParseNodeBin()->pnode1->nop != knopComputedName && !hasComputedName)",
          "8411:             propertyId = memberList->AsParseNodeBin()->pnode1->AsParseNodePid()->PropertyIdFromNameNode();",
          "",
          "---------------",
          "--- Hunk 192 ---",
          "[Context before]",
          "8436:     {",
          "8437:         while (memberList->nop == knopList)",
          "8438:         {",
          "8442:             {",
          "8443:                 useStore = true;",
          "8444:             }",
          "",
          "[Removed Lines]",
          "8439:             ParseNode *memberNode = memberList->sxBin.pnode1;",
          "8441:             if (memberNode->sxBin.pnode1->nop == knopComputedName)",
          "",
          "[Added Lines]",
          "8437:             ParseNode *memberNode = memberList->AsParseNodeBin()->pnode1;",
          "8439:             if (memberNode->AsParseNodeBin()->pnode1->nop == knopComputedName)",
          "",
          "---------------",
          "--- Hunk 193 ---",
          "[Context before]",
          "8446:             byteCodeGenerator->StartSubexpression(memberNode);",
          "8447:             EmitMemberNode(memberNode, objectLocation, byteCodeGenerator, funcInfo, nullptr, useStore);",
          "8448:             byteCodeGenerator->EndSubexpression(memberNode);",
          "8450:         }",
          "8452:         byteCodeGenerator->StartSubexpression(memberList);",
          "",
          "[Removed Lines]",
          "8449:             memberList = memberList->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "8447:             memberList = memberList->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 194 ---",
          "[Context before]",
          "8458: void EmitStringTemplate(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "8459: {",
          "8465:     {",
          "8468:         {",
          "8471:             funcInfo->AcquireLoc(pnode);",
          "8478:         }",
          "8479:         else",
          "8480:         {",
          "",
          "[Removed Lines]",
          "8460:     Assert(pnode->sxStrTemplate.pnodeStringLiterals);",
          "8464:     if (!pnode->sxStrTemplate.isTaggedTemplate)",
          "8467:         if (pnode->sxStrTemplate.pnodeSubstitutionExpressions == nullptr)",
          "8469:             Assert(pnode->sxStrTemplate.pnodeStringLiterals->nop != knopList);",
          "8472:             Emit(pnode->sxStrTemplate.pnodeStringLiterals, byteCodeGenerator, funcInfo, false);",
          "8474:             Assert(pnode->location != pnode->sxStrTemplate.pnodeStringLiterals->location);",
          "8476:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->sxStrTemplate.pnodeStringLiterals->location);",
          "8477:             funcInfo->ReleaseLoc(pnode->sxStrTemplate.pnodeStringLiterals);",
          "",
          "[Added Lines]",
          "8458:     Assert(pnode->AsParseNodeStrTemplate()->pnodeStringLiterals);",
          "8462:     if (!pnode->AsParseNodeStrTemplate()->isTaggedTemplate)",
          "8465:         if (pnode->AsParseNodeStrTemplate()->pnodeSubstitutionExpressions == nullptr)",
          "8467:             Assert(pnode->AsParseNodeStrTemplate()->pnodeStringLiterals->nop != knopList);",
          "8470:             Emit(pnode->AsParseNodeStrTemplate()->pnodeStringLiterals, byteCodeGenerator, funcInfo, false);",
          "8472:             Assert(pnode->location != pnode->AsParseNodeStrTemplate()->pnodeStringLiterals->location);",
          "8474:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->AsParseNodeStrTemplate()->pnodeStringLiterals->location);",
          "8475:             funcInfo->ReleaseLoc(pnode->AsParseNodeStrTemplate()->pnodeStringLiterals);",
          "",
          "---------------",
          "--- Hunk 195 ---",
          "[Context before]",
          "8482:             funcInfo->AcquireLoc(pnode);",
          "8498:             ParseNode* stringNode;",
          "8499:             ParseNode* expressionNode;",
          "",
          "[Removed Lines]",
          "8485:             AssertMsg(pnode->sxStrTemplate.pnodeStringLiterals->nop == knopList, \"First string in the list must be a knopList node.\");",
          "8487:             ParseNode* stringNodeList = pnode->sxStrTemplate.pnodeStringLiterals;",
          "8490:             Emit(stringNodeList->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "8492:             Assert(pnode->location != stringNodeList->sxBin.pnode1->location);",
          "8494:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, stringNodeList->sxBin.pnode1->location);",
          "8495:             funcInfo->ReleaseLoc(stringNodeList->sxBin.pnode1);",
          "8497:             ParseNode* expressionNodeList = pnode->sxStrTemplate.pnodeSubstitutionExpressions;",
          "",
          "[Added Lines]",
          "8483:             AssertMsg(pnode->AsParseNodeStrTemplate()->pnodeStringLiterals->nop == knopList, \"First string in the list must be a knopList node.\");",
          "8485:             ParseNode* stringNodeList = pnode->AsParseNodeStrTemplate()->pnodeStringLiterals;",
          "8488:             Emit(stringNodeList->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "8490:             Assert(pnode->location != stringNodeList->AsParseNodeBin()->pnode1->location);",
          "8492:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, stringNodeList->AsParseNodeBin()->pnode1->location);",
          "8493:             funcInfo->ReleaseLoc(stringNodeList->AsParseNodeBin()->pnode1);",
          "8495:             ParseNode* expressionNodeList = pnode->AsParseNodeStrTemplate()->pnodeSubstitutionExpressions;",
          "",
          "---------------",
          "--- Hunk 196 ---",
          "[Context before]",
          "8513:                 if (expressionNodeList->nop == knopList)",
          "8514:                 {",
          "8517:                 }",
          "8518:                 else",
          "8519:                 {",
          "",
          "[Removed Lines]",
          "8515:                     expressionNode = expressionNodeList->sxBin.pnode1;",
          "8516:                     expressionNodeList = expressionNodeList->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "8513:                     expressionNode = expressionNodeList->AsParseNodeBin()->pnode1;",
          "8514:                     expressionNodeList = expressionNodeList->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 197 ---",
          "[Context before]",
          "8531:                 funcInfo->ReleaseLoc(expressionNode);",
          "8537:                 if (stringNodeList->nop == knopList)",
          "8538:                 {",
          "8540:                 }",
          "8541:                 else",
          "8542:                 {",
          "",
          "[Removed Lines]",
          "8534:                 stringNodeList = stringNodeList->sxBin.pnode2;",
          "8539:                     stringNode = stringNodeList->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "8532:                 stringNodeList = stringNodeList->AsParseNodeBin()->pnode2;",
          "8537:                     stringNode = stringNodeList->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 198 ---",
          "[Context before]",
          "8557: void SetNewArrayElements(ParseNode *pnode, Js::RegSlot arrayLocation, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "8558: {",
          "8562:     bool nativeArrays = CreateNativeArrays(byteCodeGenerator, funcInfo);",
          "8565:     if (arrayIntOpt)",
          "8566:     {",
          "8567:         int extraAlloc = 0, auxSize = 0;",
          "",
          "[Removed Lines]",
          "8559:     ParseNode *args = pnode->sxUni.pnode1;",
          "8560:     uint argCount = pnode->sxArrLit.count;",
          "8561:     uint spreadCount = pnode->sxArrLit.spreadCount;",
          "8564:     bool arrayIntOpt = nativeArrays && pnode->sxArrLit.arrayOfInts;",
          "",
          "[Added Lines]",
          "8557:     ParseNode *args = pnode->AsParseNodeUni()->pnode1;",
          "8558:     uint argCount = pnode->AsParseNodeArrLit()->count;",
          "8559:     uint spreadCount = pnode->AsParseNodeArrLit()->spreadCount;",
          "8562:     bool arrayIntOpt = nativeArrays && pnode->AsParseNodeArrLit()->arrayOfInts;",
          "",
          "---------------",
          "--- Hunk 199 ---",
          "[Context before]",
          "8572:         }",
          "8573:         Js::AuxArray<int> *ints = AnewPlus(byteCodeGenerator->GetAllocator(), extraAlloc, Js::AuxArray<int32>, argCount);",
          "8574:         EmitConstantArgsToIntArray(byteCodeGenerator, ints->elements, args, argCount);",
          "8576:         byteCodeGenerator->Writer()->Auxiliary(",
          "8577:             Js::OpCode::NewScIntArray,",
          "8578:             pnode->location,",
          "",
          "[Removed Lines]",
          "8575:         Assert(!pnode->sxArrLit.hasMissingValues);",
          "",
          "[Added Lines]",
          "8573:         Assert(!pnode->AsParseNodeArrLit()->hasMissingValues);",
          "",
          "---------------",
          "--- Hunk 200 ---",
          "[Context before]",
          "8583:         return;",
          "8584:     }",
          "8587:     if (arrayNumOpt)",
          "8588:     {",
          "8589:         int extraAlloc = 0, auxSize = 0;",
          "",
          "[Removed Lines]",
          "8586:     bool arrayNumOpt = nativeArrays && pnode->sxArrLit.arrayOfNumbers;",
          "",
          "[Added Lines]",
          "8584:     bool arrayNumOpt = nativeArrays && pnode->AsParseNodeArrLit()->arrayOfNumbers;",
          "",
          "---------------",
          "--- Hunk 201 ---",
          "[Context before]",
          "8594:         }",
          "8595:         Js::AuxArray<double> *doubles = AnewPlus(byteCodeGenerator->GetAllocator(), extraAlloc, Js::AuxArray<double>, argCount);",
          "8596:         EmitConstantArgsToFltArray(byteCodeGenerator, doubles->elements, args, argCount);",
          "8598:         byteCodeGenerator->Writer()->Auxiliary(",
          "8599:             Js::OpCode::NewScFltArray,",
          "8600:             pnode->location,",
          "",
          "[Removed Lines]",
          "8597:         Assert(!pnode->sxArrLit.hasMissingValues);",
          "",
          "[Added Lines]",
          "8595:         Assert(!pnode->AsParseNodeArrLit()->hasMissingValues);",
          "",
          "---------------",
          "--- Hunk 202 ---",
          "[Context before]",
          "8605:         return;",
          "8606:     }",
          "8609:     Assert(!arrayLitOpt || !nativeArrays);",
          "8611:     Js::RegSlot spreadArrLoc = arrayLocation;",
          "8612:     Js::AuxArray<uint32> *spreadIndices = nullptr;",
          "8613:     const uint extraAlloc = UInt32Math::Mul(spreadCount, sizeof(uint32));",
          "8615:     {",
          "8616:         arrayLocation = funcInfo->AcquireTmpRegister();",
          "8617:         spreadIndices = AnewPlus(byteCodeGenerator->GetAllocator(), extraAlloc, Js::AuxArray<uint32>, spreadCount);",
          "8618:     }",
          "8620:     byteCodeGenerator->Writer()->Reg1Unsigned1(",
          "8622:         arrayLocation,",
          "8623:         argCount);",
          "",
          "[Removed Lines]",
          "8608:     bool arrayLitOpt = pnode->sxArrLit.arrayOfTaggedInts && pnode->sxArrLit.count > 1;",
          "8614:     if (pnode->sxArrLit.spreadCount > 0)",
          "8621:         pnode->sxArrLit.hasMissingValues ? Js::OpCode::NewScArrayWithMissingValues : Js::OpCode::NewScArray,",
          "",
          "[Added Lines]",
          "8606:     bool arrayLitOpt = pnode->AsParseNodeArrLit()->arrayOfTaggedInts && pnode->AsParseNodeArrLit()->count > 1;",
          "8612:     if (pnode->AsParseNodeArrLit()->spreadCount > 0)",
          "8619:         pnode->AsParseNodeArrLit()->hasMissingValues ? Js::OpCode::NewScArrayWithMissingValues : Js::OpCode::NewScArray,",
          "",
          "---------------",
          "--- Hunk 203 ---",
          "[Context before]",
          "8675:             Js::RegSlot rhsLocation;",
          "8676:             while (args->nop == knopList)",
          "8677:             {",
          "8679:                 {",
          "8682:                     Js::RegSlot regVal = rhsLocation;",
          "8684:                     {",
          "8685:                         AnalysisAssert(spreadIndices);",
          "8686:                         regVal = funcInfo->AcquireTmpRegister();",
          "",
          "[Removed Lines]",
          "8678:                 if (args->sxBin.pnode1->nop != knopEmpty)",
          "8680:                     Emit(args->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "8681:                     rhsLocation = args->sxBin.pnode1->location;",
          "8683:                     if (args->sxBin.pnode1->nop == knopEllipsis)",
          "",
          "[Added Lines]",
          "8676:                 if (args->AsParseNodeBin()->pnode1->nop != knopEmpty)",
          "8678:                     Emit(args->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "8679:                     rhsLocation = args->AsParseNodeBin()->pnode1->location;",
          "8681:                     if (args->AsParseNodeBin()->pnode1->nop == knopEllipsis)",
          "",
          "---------------",
          "--- Hunk 204 ---",
          "[Context before]",
          "8691:                     byteCodeGenerator->Writer()->ElementUnsigned1(opcode, regVal, arrLoc, i);",
          "8694:                     {",
          "8695:                         funcInfo->ReleaseTmpRegister(regVal);",
          "8696:                     }",
          "8699:                 }",
          "8702:                 i++;",
          "8703:             }",
          "",
          "[Removed Lines]",
          "8693:                     if (args->sxBin.pnode1->nop == knopEllipsis)",
          "8698:                     funcInfo->ReleaseLoc(args->sxBin.pnode1);",
          "8701:                 args = args->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "8691:                     if (args->AsParseNodeBin()->pnode1->nop == knopEllipsis)",
          "8696:                     funcInfo->ReleaseLoc(args->AsParseNodeBin()->pnode1);",
          "8699:                 args = args->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 205 ---",
          "[Context before]",
          "8734:         }",
          "8735:     }",
          "8738:     {",
          "8739:         byteCodeGenerator->Writer()->Reg2Aux(Js::OpCode::SpreadArrayLiteral, spreadArrLoc, arrayLocation, spreadIndices, UInt32Math::Add(sizeof(Js::AuxArray<uint32>), extraAlloc), extraAlloc);",
          "8740:         AdeletePlus(byteCodeGenerator->GetAllocator(), extraAlloc, spreadIndices);",
          "",
          "[Removed Lines]",
          "8737:     if (pnode->sxArrLit.spreadCount > 0)",
          "",
          "[Added Lines]",
          "8735:     if (pnode->AsParseNodeArrLit()->spreadCount > 0)",
          "",
          "---------------",
          "--- Hunk 206 ---",
          "[Context before]",
          "8756:     case knopLogOr:",
          "8757:     {",
          "8758:         Js::ByteCodeLabel leftFalse = byteCodeGenerator->Writer()->DefineLabel();",
          "8761:         byteCodeGenerator->Writer()->MarkLabel(leftFalse);",
          "8764:         break;",
          "8765:     }",
          "8767:     case knopLogAnd:",
          "8768:     {",
          "8769:         Js::ByteCodeLabel leftTrue = byteCodeGenerator->Writer()->DefineLabel();",
          "8772:         byteCodeGenerator->Writer()->MarkLabel(leftTrue);",
          "8775:         break;",
          "8776:     }",
          "8778:     case knopLogNot:",
          "8781:         break;",
          "8783:     case knopEq:",
          "",
          "[Removed Lines]",
          "8759:         EmitBooleanExpression(expr->sxBin.pnode1, trueLabel, leftFalse, byteCodeGenerator, funcInfo);",
          "8760:         funcInfo->ReleaseLoc(expr->sxBin.pnode1);",
          "8762:         EmitBooleanExpression(expr->sxBin.pnode2, trueLabel, falseLabel, byteCodeGenerator, funcInfo);",
          "8763:         funcInfo->ReleaseLoc(expr->sxBin.pnode2);",
          "8770:         EmitBooleanExpression(expr->sxBin.pnode1, leftTrue, falseLabel, byteCodeGenerator, funcInfo);",
          "8771:         funcInfo->ReleaseLoc(expr->sxBin.pnode1);",
          "8773:         EmitBooleanExpression(expr->sxBin.pnode2, trueLabel, falseLabel, byteCodeGenerator, funcInfo);",
          "8774:         funcInfo->ReleaseLoc(expr->sxBin.pnode2);",
          "8779:         EmitBooleanExpression(expr->sxUni.pnode1, falseLabel, trueLabel, byteCodeGenerator, funcInfo);",
          "8780:         funcInfo->ReleaseLoc(expr->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "8757:         EmitBooleanExpression(expr->AsParseNodeBin()->pnode1, trueLabel, leftFalse, byteCodeGenerator, funcInfo);",
          "8758:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode1);",
          "8760:         EmitBooleanExpression(expr->AsParseNodeBin()->pnode2, trueLabel, falseLabel, byteCodeGenerator, funcInfo);",
          "8761:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode2);",
          "8768:         EmitBooleanExpression(expr->AsParseNodeBin()->pnode1, leftTrue, falseLabel, byteCodeGenerator, funcInfo);",
          "8769:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode1);",
          "8771:         EmitBooleanExpression(expr->AsParseNodeBin()->pnode2, trueLabel, falseLabel, byteCodeGenerator, funcInfo);",
          "8772:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode2);",
          "8777:         EmitBooleanExpression(expr->AsParseNodeUni()->pnode1, falseLabel, trueLabel, byteCodeGenerator, funcInfo);",
          "8778:         funcInfo->ReleaseLoc(expr->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 207 ---",
          "[Context before]",
          "8788:     case knopLe:",
          "8789:     case knopGe:",
          "8790:     case knopGt:",
          "8796:         byteCodeGenerator->Writer()->Br(falseLabel);",
          "8797:         break;",
          "8798:     case knopTrue:",
          "",
          "[Removed Lines]",
          "8791:         EmitBinaryOpnds(expr->sxBin.pnode1, expr->sxBin.pnode2, byteCodeGenerator, funcInfo);",
          "8792:         funcInfo->ReleaseLoc(expr->sxBin.pnode2);",
          "8793:         funcInfo->ReleaseLoc(expr->sxBin.pnode1);",
          "8794:         byteCodeGenerator->Writer()->BrReg2(nopToOp[expr->nop], trueLabel, expr->sxBin.pnode1->location,",
          "8795:             expr->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "8789:         EmitBinaryOpnds(expr->AsParseNodeBin()->pnode1, expr->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo);",
          "8790:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode2);",
          "8791:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode1);",
          "8792:         byteCodeGenerator->Writer()->BrReg2(nopToOp[expr->nop], trueLabel, expr->AsParseNodeBin()->pnode1->location,",
          "8793:             expr->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 208 ---",
          "[Context before]",
          "8825:     {",
          "8826:         byteCodeGenerator->StartStatement(expr);",
          "8827:         Js::ByteCodeLabel leftFalse = byteCodeGenerator->Writer()->DefineLabel();",
          "8830:         byteCodeGenerator->Writer()->MarkLabel(leftFalse);",
          "8833:         byteCodeGenerator->EndStatement(expr);",
          "8834:         break;",
          "8835:     }",
          "",
          "[Removed Lines]",
          "8828:         EmitGeneratingBooleanExpression(expr->sxBin.pnode1, trueLabel, false, leftFalse, true, writeto, byteCodeGenerator, funcInfo);",
          "8829:         funcInfo->ReleaseLoc(expr->sxBin.pnode1);",
          "8831:         EmitGeneratingBooleanExpression(expr->sxBin.pnode2, trueLabel, truefallthrough, falseLabel, falsefallthrough, writeto, byteCodeGenerator, funcInfo);",
          "8832:         funcInfo->ReleaseLoc(expr->sxBin.pnode2);",
          "",
          "[Added Lines]",
          "8826:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode1, trueLabel, false, leftFalse, true, writeto, byteCodeGenerator, funcInfo);",
          "8827:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode1);",
          "8829:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode2, trueLabel, truefallthrough, falseLabel, falsefallthrough, writeto, byteCodeGenerator, funcInfo);",
          "8830:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode2);",
          "",
          "---------------",
          "--- Hunk 209 ---",
          "[Context before]",
          "8838:     {",
          "8839:         byteCodeGenerator->StartStatement(expr);",
          "8840:         Js::ByteCodeLabel leftTrue = byteCodeGenerator->Writer()->DefineLabel();",
          "8843:         byteCodeGenerator->Writer()->MarkLabel(leftTrue);",
          "8846:         byteCodeGenerator->EndStatement(expr);",
          "8847:         break;",
          "8848:     }",
          "",
          "[Removed Lines]",
          "8841:         EmitGeneratingBooleanExpression(expr->sxBin.pnode1, leftTrue, true, falseLabel, false, writeto, byteCodeGenerator, funcInfo);",
          "8842:         funcInfo->ReleaseLoc(expr->sxBin.pnode1);",
          "8844:         EmitGeneratingBooleanExpression(expr->sxBin.pnode2, trueLabel, truefallthrough, falseLabel, falsefallthrough, writeto, byteCodeGenerator, funcInfo);",
          "8845:         funcInfo->ReleaseLoc(expr->sxBin.pnode2);",
          "",
          "[Added Lines]",
          "8839:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode1, leftTrue, true, falseLabel, false, writeto, byteCodeGenerator, funcInfo);",
          "8840:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode1);",
          "8842:         EmitGeneratingBooleanExpression(expr->AsParseNodeBin()->pnode2, trueLabel, truefallthrough, falseLabel, falsefallthrough, writeto, byteCodeGenerator, funcInfo);",
          "8843:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode2);",
          "",
          "---------------",
          "--- Hunk 210 ---",
          "[Context before]",
          "8854:         Js::ByteCodeLabel emitTrue = byteCodeGenerator->Writer()->DefineLabel();",
          "8855:         Js::ByteCodeLabel emitFalse = byteCodeGenerator->Writer()->DefineLabel();",
          "8857:         byteCodeGenerator->Writer()->MarkLabel(emitTrue);",
          "8858:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, writeto);",
          "8859:         byteCodeGenerator->Writer()->Br(trueLabel);",
          "",
          "[Removed Lines]",
          "8856:         EmitBooleanExpression(expr->sxUni.pnode1, emitFalse, emitTrue, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "8854:         EmitBooleanExpression(expr->AsParseNodeUni()->pnode1, emitFalse, emitTrue, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 211 ---",
          "[Context before]",
          "8863:         {",
          "8864:             byteCodeGenerator->Writer()->Br(falseLabel);",
          "8865:         }",
          "8867:         byteCodeGenerator->EndStatement(expr);",
          "8868:         break;",
          "8869:     }",
          "",
          "[Removed Lines]",
          "8866:         funcInfo->ReleaseLoc(expr->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "8864:         funcInfo->ReleaseLoc(expr->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 212 ---",
          "[Context before]",
          "8876:     case knopGe:",
          "8877:     case knopGt:",
          "8878:         byteCodeGenerator->StartStatement(expr);",
          "8882:         funcInfo->AcquireLoc(expr);",
          "8885:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, writeto, expr->location);",
          "8887:         if (!(truefallthrough || falsefallthrough))",
          "",
          "[Removed Lines]",
          "8879:         EmitBinaryOpnds(expr->sxBin.pnode1, expr->sxBin.pnode2, byteCodeGenerator, funcInfo);",
          "8880:         funcInfo->ReleaseLoc(expr->sxBin.pnode2);",
          "8881:         funcInfo->ReleaseLoc(expr->sxBin.pnode1);",
          "8883:         byteCodeGenerator->Writer()->Reg3(nopToCMOp[expr->nop], expr->location, expr->sxBin.pnode1->location,",
          "8884:             expr->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "8877:         EmitBinaryOpnds(expr->AsParseNodeBin()->pnode1, expr->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo);",
          "8878:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode2);",
          "8879:         funcInfo->ReleaseLoc(expr->AsParseNodeBin()->pnode1);",
          "8881:         byteCodeGenerator->Writer()->Reg3(nopToCMOp[expr->nop], expr->location, expr->AsParseNodeBin()->pnode1->location,",
          "8882:             expr->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 213 ---",
          "[Context before]",
          "8979:     Js::ByteCodeLabel continuePastLoop = byteCodeGenerator->Writer()->DefineLabel();",
          "8981:     uint loopId = byteCodeGenerator->Writer()->EnterLoop(loopEntrance);",
          "8984:     if (doWhile)",
          "8985:     {",
          "",
          "[Removed Lines]",
          "8982:     loopNode->sxLoop.loopId = loopId;",
          "",
          "[Added Lines]",
          "8980:     loopNode->AsParseNodeLoop()->loopId = loopId;",
          "",
          "---------------",
          "--- Hunk 214 ---",
          "[Context before]",
          "8987:         funcInfo->ReleaseLoc(body);",
          "8988:         if (loopNode->emitLabels)",
          "8989:         {",
          "8991:         }",
          "8992:         if (!ByteCodeGenerator::IsFalse(cond) ||",
          "8993:             byteCodeGenerator->IsInDebugMode())",
          "",
          "[Removed Lines]",
          "8990:             byteCodeGenerator->Writer()->MarkLabel(loopNode->sxStmt.continueLabel);",
          "",
          "[Added Lines]",
          "8988:             byteCodeGenerator->Writer()->MarkLabel(loopNode->AsParseNodeStmt()->continueLabel);",
          "",
          "---------------",
          "--- Hunk 215 ---",
          "[Context before]",
          "9001:         if (cond)",
          "9002:         {",
          "9003:             if (!(cond->nop == knopInt &&",
          "9005:             {",
          "9006:                 Js::ByteCodeLabel trueLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "9007:                 EmitBooleanExpression(cond, trueLabel, continuePastLoop, byteCodeGenerator, funcInfo);",
          "",
          "[Removed Lines]",
          "9004:                 cond->sxInt.lw != 0))",
          "",
          "[Added Lines]",
          "9002:                 cond->AsParseNodeInt()->lw != 0))",
          "",
          "---------------",
          "--- Hunk 216 ---",
          "[Context before]",
          "9021:         if (loopNode->emitLabels)",
          "9022:         {",
          "9024:         }",
          "9026:         if (incr != nullptr)",
          "",
          "[Removed Lines]",
          "9023:             byteCodeGenerator->Writer()->MarkLabel(loopNode->sxStmt.continueLabel);",
          "",
          "[Added Lines]",
          "9021:             byteCodeGenerator->Writer()->MarkLabel(loopNode->AsParseNodeStmt()->continueLabel);",
          "",
          "---------------",
          "--- Hunk 217 ---",
          "[Context before]",
          "9035:     byteCodeGenerator->Writer()->MarkLabel(continuePastLoop);",
          "9036:     if (loopNode->emitLabels)",
          "9037:     {",
          "9039:     }",
          "9041:     byteCodeGenerator->Writer()->ExitLoop(loopId);",
          "",
          "[Removed Lines]",
          "9038:         byteCodeGenerator->Writer()->MarkLabel(loopNode->sxStmt.breakLabel);",
          "",
          "[Added Lines]",
          "9036:         byteCodeGenerator->Writer()->MarkLabel(loopNode->AsParseNodeStmt()->breakLabel);",
          "",
          "---------------",
          "--- Hunk 218 ---",
          "[Context before]",
          "9047:     Js::ByteCodeLabel afterInvertedLoop = this->m_writer.DefineLabel();",
          "9052:     this->m_writer.BrS(Js::OpCode::BrNotHasSideEffects, invertedLoopLabel, Js::SideEffects_Any);",
          "",
          "[Removed Lines]",
          "9050:     Emit(outerLoop->sxFor.pnodeInit, this, funcInfo, false);",
          "9051:     funcInfo->ReleaseLoc(outerLoop->sxFor.pnodeInit);",
          "9055:     EmitLoop(outerLoop, outerLoop->sxFor.pnodeCond, outerLoop->sxFor.pnodeBody,",
          "9056:         outerLoop->sxFor.pnodeIncr, this, funcInfo, false);",
          "",
          "[Added Lines]",
          "9048:     Emit(outerLoop->AsParseNodeFor()->pnodeInit, this, funcInfo, false);",
          "9049:     funcInfo->ReleaseLoc(outerLoop->AsParseNodeFor()->pnodeInit);",
          "9053:     EmitLoop(outerLoop, outerLoop->AsParseNodeFor()->pnodeCond, outerLoop->AsParseNodeFor()->pnodeBody,",
          "9054:         outerLoop->AsParseNodeFor()->pnodeIncr, this, funcInfo, false);",
          "",
          "---------------",
          "--- Hunk 219 ---",
          "[Context before]",
          "9067:     Js::ByteCodeLabel zeroTrip = this->m_writer.DefineLabel();",
          "9069:     EmitBooleanExpression(testNode, zeroTrip, afterInvertedLoop, this, funcInfo);",
          "9070:     this->m_writer.MarkLabel(zeroTrip);",
          "9071:     funcInfo->ReleaseLoc(testNode);",
          "9078:     this->m_writer.MarkLabel(afterInvertedLoop);",
          "9079: }",
          "",
          "[Removed Lines]",
          "9068:     ParseNode* testNode = this->GetParser()->CopyPnode(outerLoop->sxFor.pnodeCond);",
          "9074:     Emit(invertedLoop->sxFor.pnodeInit, this, funcInfo, false);",
          "9075:     funcInfo->ReleaseLoc(invertedLoop->sxFor.pnodeInit);",
          "9076:     EmitLoop(invertedLoop, invertedLoop->sxFor.pnodeCond, invertedLoop->sxFor.pnodeBody,",
          "9077:         invertedLoop->sxFor.pnodeIncr, this, funcInfo, false);",
          "",
          "[Added Lines]",
          "9066:     ParseNode* testNode = this->GetParser()->CopyPnode(outerLoop->AsParseNodeFor()->pnodeCond);",
          "9072:     Emit(invertedLoop->AsParseNodeFor()->pnodeInit, this, funcInfo, false);",
          "9073:     funcInfo->ReleaseLoc(invertedLoop->AsParseNodeFor()->pnodeInit);",
          "9074:     EmitLoop(invertedLoop, invertedLoop->AsParseNodeFor()->pnodeCond, invertedLoop->AsParseNodeFor()->pnodeBody,",
          "9075:         invertedLoop->AsParseNodeFor()->pnodeIncr, this, funcInfo, false);",
          "",
          "---------------",
          "--- Hunk 220 ---",
          "[Context before]",
          "9163:     FuncInfo *funcInfo,",
          "9164:     BOOL fReturnValue)",
          "9165: {",
          "9169:     {",
          "9171:     }",
          "9172:     else",
          "9173:     {",
          "9175:         sym->SetNeedDeclaration(false);",
          "9176:     }",
          "9178:     if (byteCodeGenerator->IsES6ForLoopSemanticsEnabled())",
          "9179:     {",
          "9181:     }",
          "9193:     if (byteCodeGenerator->IsES6ForLoopSemanticsEnabled())",
          "9194:     {",
          "9196:     }",
          "9199:     if (loopNode->emitLabels)",
          "9200:     {",
          "9202:     }",
          "9203:     byteCodeGenerator->Writer()->Br(loopEntrance);",
          "9204:     byteCodeGenerator->Writer()->MarkLabel(continuePastLoop);",
          "9205:     if (loopNode->emitLabels)",
          "9206:     {",
          "9208:     }",
          "9209: }",
          "",
          "[Removed Lines]",
          "9166:     if (loopNode->sxForInOrForOf.pnodeLval->nop != knopVarDecl &&",
          "9167:         loopNode->sxForInOrForOf.pnodeLval->nop != knopLetDecl &&",
          "9168:         loopNode->sxForInOrForOf.pnodeLval->nop != knopConstDecl)",
          "9170:         EmitReference(loopNode->sxForInOrForOf.pnodeLval, byteCodeGenerator, funcInfo);",
          "9174:         Symbol * sym = loopNode->sxForInOrForOf.pnodeLval->sxVar.sym;",
          "9180:         BeginEmitBlock(loopNode->sxForInOrForOf.pnodeBlock, byteCodeGenerator, funcInfo);",
          "9183:     EmitAssignment(nullptr, loopNode->sxForInOrForOf.pnodeLval, loopNode->sxForInOrForOf.itemLocation, byteCodeGenerator, funcInfo);",
          "9186:     byteCodeGenerator->EndStatement(loopNode->sxForInOrForOf.pnodeLval);",
          "9188:     funcInfo->ReleaseReference(loopNode->sxForInOrForOf.pnodeLval);",
          "9190:     Emit(loopNode->sxForInOrForOf.pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "9191:     funcInfo->ReleaseLoc(loopNode->sxForInOrForOf.pnodeBody);",
          "9195:         EndEmitBlock(loopNode->sxForInOrForOf.pnodeBlock, byteCodeGenerator, funcInfo);",
          "9198:     funcInfo->ReleaseTmpRegister(loopNode->sxForInOrForOf.itemLocation);",
          "9201:         byteCodeGenerator->Writer()->MarkLabel(loopNode->sxForInOrForOf.continueLabel);",
          "9207:         byteCodeGenerator->Writer()->MarkLabel(loopNode->sxForInOrForOf.breakLabel);",
          "",
          "[Added Lines]",
          "9164:     if (loopNode->AsParseNodeForInOrForOf()->pnodeLval->nop != knopVarDecl &&",
          "9165:         loopNode->AsParseNodeForInOrForOf()->pnodeLval->nop != knopLetDecl &&",
          "9166:         loopNode->AsParseNodeForInOrForOf()->pnodeLval->nop != knopConstDecl)",
          "9168:         EmitReference(loopNode->AsParseNodeForInOrForOf()->pnodeLval, byteCodeGenerator, funcInfo);",
          "9172:         Symbol * sym = loopNode->AsParseNodeForInOrForOf()->pnodeLval->AsParseNodeVar()->sym;",
          "9178:         BeginEmitBlock(loopNode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "9181:     EmitAssignment(nullptr, loopNode->AsParseNodeForInOrForOf()->pnodeLval, loopNode->AsParseNodeForInOrForOf()->itemLocation, byteCodeGenerator, funcInfo);",
          "9184:     byteCodeGenerator->EndStatement(loopNode->AsParseNodeForInOrForOf()->pnodeLval);",
          "9186:     funcInfo->ReleaseReference(loopNode->AsParseNodeForInOrForOf()->pnodeLval);",
          "9188:     Emit(loopNode->AsParseNodeForInOrForOf()->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "9189:     funcInfo->ReleaseLoc(loopNode->AsParseNodeForInOrForOf()->pnodeBody);",
          "9193:         EndEmitBlock(loopNode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "9196:     funcInfo->ReleaseTmpRegister(loopNode->AsParseNodeForInOrForOf()->itemLocation);",
          "9199:         byteCodeGenerator->Writer()->MarkLabel(loopNode->AsParseNodeForInOrForOf()->continueLabel);",
          "9205:         byteCodeGenerator->Writer()->MarkLabel(loopNode->AsParseNodeForInOrForOf()->breakLabel);",
          "",
          "---------------",
          "--- Hunk 221 ---",
          "[Context before]",
          "9225:     uint forInLoopLevel = funcInfo->AcquireForInLoopLevel();",
          "9231:     byteCodeGenerator->EndStatement(loopNode);",
          "9234:     uint loopId = byteCodeGenerator->Writer()->EnterLoop(loopEntrance);",
          "9243:     EmitForInOfLoopBody(loopNode, loopEntrance, continuePastLoop, byteCodeGenerator, funcInfo, fReturnValue);",
          "",
          "[Removed Lines]",
          "9223:     loopNode->sxForInOrForOf.itemLocation = funcInfo->AcquireTmpRegister();",
          "9228:     byteCodeGenerator->Writer()->Reg1Unsigned1(Js::OpCode::InitForInEnumerator, loopNode->sxForInOrForOf.pnodeObj->location, forInLoopLevel);",
          "9235:     loopNode->sxForInOrForOf.loopId = loopId;",
          "9238:     byteCodeGenerator->StartStatement(loopNode->sxForInOrForOf.pnodeLval);",
          "9241:     byteCodeGenerator->Writer()->BrReg1Unsigned1(Js::OpCode::BrOnEmpty, continuePastLoop, loopNode->sxForInOrForOf.itemLocation, forInLoopLevel);",
          "",
          "[Added Lines]",
          "9221:     loopNode->AsParseNodeForInOrForOf()->itemLocation = funcInfo->AcquireTmpRegister();",
          "9226:     byteCodeGenerator->Writer()->Reg1Unsigned1(Js::OpCode::InitForInEnumerator, loopNode->AsParseNodeForInOrForOf()->pnodeObj->location, forInLoopLevel);",
          "9233:     loopNode->AsParseNodeForInOrForOf()->loopId = loopId;",
          "9236:     byteCodeGenerator->StartStatement(loopNode->AsParseNodeForInOrForOf()->pnodeLval);",
          "9239:     byteCodeGenerator->Writer()->BrReg1Unsigned1(Js::OpCode::BrOnEmpty, continuePastLoop, loopNode->AsParseNodeForInOrForOf()->itemLocation, forInLoopLevel);",
          "",
          "---------------",
          "--- Hunk 222 ---",
          "[Context before]",
          "9249:     if (!byteCodeGenerator->IsES6ForLoopSemanticsEnabled())",
          "9250:     {",
          "9252:     }",
          "9253: }",
          "",
          "[Removed Lines]",
          "9251:         EndEmitBlock(loopNode->sxForInOrForOf.pnodeBlock, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "9249:         EndEmitBlock(loopNode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 223 ---",
          "[Context before]",
          "9257:     bool isForIn = (loopNode->nop == knopForIn);",
          "9258:     Assert(isForIn || loopNode->nop == knopForOf);",
          "9262:     byteCodeGenerator->StartStatement(loopNode);",
          "9263:     if (!isForIn)",
          "",
          "[Removed Lines]",
          "9260:     BeginEmitBlock(loopNode->sxForInOrForOf.pnodeBlock, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "9258:     BeginEmitBlock(loopNode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 224 ---",
          "[Context before]",
          "9276:     byteCodeGenerator->Writer()->RecordStatementAdjustment(Js::FunctionBody::SAT_All);",
          "9277:     if (byteCodeGenerator->IsES6ForLoopSemanticsEnabled() &&",
          "9279:     {",
          "9280:         byteCodeGenerator->Writer()->RecordForInOrOfCollectionScope();",
          "9281:     }",
          "9282:     Js::ByteCodeLabel loopEntrance = byteCodeGenerator->Writer()->DefineLabel();",
          "9283:     Js::ByteCodeLabel continuePastLoop = byteCodeGenerator->Writer()->DefineLabel();",
          "9286:     {",
          "9288:     }",
          "9293:     if (byteCodeGenerator->IsES6ForLoopSemanticsEnabled())",
          "9294:     {",
          "9297:         {",
          "9299:                 sym->SetIsTrackedForDebugger(false);",
          "9300:             });",
          "9301:         }",
          "",
          "[Removed Lines]",
          "9278:         loopNode->sxForInOrForOf.pnodeBlock->sxBlock.HasBlockScopedContent())",
          "9285:     if (loopNode->sxForInOrForOf.pnodeLval->nop == knopVarDecl)",
          "9287:         EmitReference(loopNode->sxForInOrForOf.pnodeLval, byteCodeGenerator, funcInfo);",
          "9290:     Emit(loopNode->sxForInOrForOf.pnodeObj, byteCodeGenerator, funcInfo, false); // evaluate collection expression",
          "9291:     funcInfo->ReleaseLoc(loopNode->sxForInOrForOf.pnodeObj);",
          "9295:         EndEmitBlock(loopNode->sxForInOrForOf.pnodeBlock, byteCodeGenerator, funcInfo);",
          "9296:         if (loopNode->sxForInOrForOf.pnodeBlock->sxBlock.scope != nullptr)",
          "9298:             loopNode->sxForInOrForOf.pnodeBlock->sxBlock.scope->ForEachSymbol([](Symbol *sym) {",
          "",
          "[Added Lines]",
          "9276:         loopNode->AsParseNodeForInOrForOf()->pnodeBlock->AsParseNodeBlock()->HasBlockScopedContent())",
          "9283:     if (loopNode->AsParseNodeForInOrForOf()->pnodeLval->nop == knopVarDecl)",
          "9285:         EmitReference(loopNode->AsParseNodeForInOrForOf()->pnodeLval, byteCodeGenerator, funcInfo);",
          "9288:     Emit(loopNode->AsParseNodeForInOrForOf()->pnodeObj, byteCodeGenerator, funcInfo, false); // evaluate collection expression",
          "9289:     funcInfo->ReleaseLoc(loopNode->AsParseNodeForInOrForOf()->pnodeObj);",
          "9293:         EndEmitBlock(loopNode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "9294:         if (loopNode->AsParseNodeForInOrForOf()->pnodeBlock->AsParseNodeBlock()->scope != nullptr)",
          "9296:             loopNode->AsParseNodeForInOrForOf()->pnodeBlock->AsParseNodeBlock()->scope->ForEachSymbol([](Symbol *sym) {",
          "",
          "---------------",
          "--- Hunk 225 ---",
          "[Context before]",
          "9308:         if (!byteCodeGenerator->IsES6ForLoopSemanticsEnabled())",
          "9309:         {",
          "9311:         }",
          "9313:         return;",
          "9314:     }",
          "9316:     Js::ByteCodeLabel skipThrow = byteCodeGenerator->Writer()->DefineLabel();",
          "9318:     byteCodeGenerator->Writer()->W1(Js::OpCode::RuntimeTypeError, SCODE_CODE(JSERR_ObjectCoercible));",
          "9319:     byteCodeGenerator->Writer()->MarkLabel(skipThrow);",
          "",
          "[Removed Lines]",
          "9310:             EndEmitBlock(loopNode->sxForInOrForOf.pnodeBlock, byteCodeGenerator, funcInfo);",
          "9317:     byteCodeGenerator->Writer()->BrReg2(Js::OpCode::BrNeq_A, skipThrow, loopNode->sxForInOrForOf.pnodeObj->location, funcInfo->undefinedConstantRegister);",
          "",
          "[Added Lines]",
          "9308:             EndEmitBlock(loopNode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "9315:     byteCodeGenerator->Writer()->BrReg2(Js::OpCode::BrNeq_A, skipThrow, loopNode->AsParseNodeForInOrForOf()->pnodeObj->location, funcInfo->undefinedConstantRegister);",
          "",
          "---------------",
          "--- Hunk 226 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "9341:     loopNode->sxForInOrForOf.itemLocation = funcInfo->AcquireTmpRegister();",
          "",
          "[Added Lines]",
          "9339:     loopNode->AsParseNodeForInOrForOf()->itemLocation = funcInfo->AcquireTmpRegister();",
          "",
          "---------------",
          "--- Hunk 227 ---",
          "[Context before]",
          "9352:     Js::RegSlot tmpObj = funcInfo->AcquireTmpRegister();",
          "9355:     EmitGetIterator(loopNode->location, tmpObj, byteCodeGenerator, funcInfo);",
          "9356:     funcInfo->ReleaseTmpRegister(tmpObj);",
          "",
          "[Removed Lines]",
          "9353:     byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Obj, tmpObj, loopNode->sxForInOrForOf.pnodeObj->location);",
          "",
          "[Added Lines]",
          "9351:     byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Obj, tmpObj, loopNode->AsParseNodeForInOrForOf()->pnodeObj->location);",
          "",
          "---------------",
          "--- Hunk 228 ---",
          "[Context before]",
          "9391:     uint loopId = byteCodeGenerator->Writer()->EnterLoop(loopEntrance);",
          "9396:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocation);",
          "9397:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, shouldCallReturnFunctionLocationFinally);",
          "9401:     Js::RegSlot doneLocation = funcInfo->AcquireTmpRegister();",
          "9405:     byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrTrue_A, continuePastLoop, doneLocation);",
          "9406:     funcInfo->ReleaseTmpRegister(doneLocation);",
          "9411:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocation);",
          "9412:     byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, shouldCallReturnFunctionLocationFinally);",
          "",
          "[Removed Lines]",
          "9392:     loopNode->sxForInOrForOf.loopId = loopId;",
          "9394:     byteCodeGenerator->StartStatement(loopNode->sxForInOrForOf.pnodeLval);",
          "9399:     EmitIteratorNext(loopNode->sxForInOrForOf.itemLocation, loopNode->location, Js::Constants::NoRegister, byteCodeGenerator, funcInfo);",
          "9402:     EmitIteratorComplete(doneLocation, loopNode->sxForInOrForOf.itemLocation, byteCodeGenerator, funcInfo);",
          "9409:     EmitIteratorValue(loopNode->sxForInOrForOf.itemLocation, loopNode->sxForInOrForOf.itemLocation, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "9390:     loopNode->AsParseNodeForInOrForOf()->loopId = loopId;",
          "9392:     byteCodeGenerator->StartStatement(loopNode->AsParseNodeForInOrForOf()->pnodeLval);",
          "9397:     EmitIteratorNext(loopNode->AsParseNodeForInOrForOf()->itemLocation, loopNode->location, Js::Constants::NoRegister, byteCodeGenerator, funcInfo);",
          "9400:     EmitIteratorComplete(doneLocation, loopNode->AsParseNodeForInOrForOf()->itemLocation, byteCodeGenerator, funcInfo);",
          "9407:     EmitIteratorValue(loopNode->AsParseNodeForInOrForOf()->itemLocation, loopNode->AsParseNodeForInOrForOf()->itemLocation, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 229 ---",
          "[Context before]",
          "9428:     if (!byteCodeGenerator->IsES6ForLoopSemanticsEnabled())",
          "9429:     {",
          "9431:     }",
          "9432: }",
          "9434: void EmitArrayLiteral(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "9435: {",
          "9436:     funcInfo->AcquireLoc(pnode);",
          "9438:     if (args == nullptr)",
          "9439:     {",
          "9440:         byteCodeGenerator->Writer()->Reg1Unsigned1(",
          "9442:             pnode->location,",
          "9443:             ByteCodeGenerator::DefaultArraySize);",
          "9444:     }",
          "",
          "[Removed Lines]",
          "9430:         EndEmitBlock(loopNode->sxForInOrForOf.pnodeBlock, byteCodeGenerator, funcInfo);",
          "9437:     ParseNode *args = pnode->sxUni.pnode1;",
          "9441:             pnode->sxArrLit.hasMissingValues ? Js::OpCode::NewScArrayWithMissingValues : Js::OpCode::NewScArray,",
          "",
          "[Added Lines]",
          "9428:         EndEmitBlock(loopNode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "9435:     ParseNode *args = pnode->AsParseNodeUni()->pnode1;",
          "9439:             pnode->AsParseNodeArrLit()->hasMissingValues ? Js::OpCode::NewScArrayWithMissingValues : Js::OpCode::NewScArray,",
          "",
          "---------------",
          "--- Hunk 230 ---",
          "[Context before]",
          "9451: void EmitJumpCleanup(ParseNode *pnode, ParseNode *pnodeTarget, ByteCodeGenerator *byteCodeGenerator, FuncInfo * funcInfo)",
          "9452: {",
          "9454:     {",
          "9455:         switch (pnode->nop)",
          "9456:         {",
          "",
          "[Removed Lines]",
          "9453:     for (; pnode != pnodeTarget; pnode = pnode->sxStmt.pnodeOuter)",
          "",
          "[Added Lines]",
          "9451:     for (; pnode != pnodeTarget; pnode = pnode->AsParseNodeStmt()->pnodeOuter)",
          "",
          "---------------",
          "--- Hunk 231 ---",
          "[Context before]",
          "9467: #if ENABLE_PROFILE_INFO",
          "9468:             if (Js::DynamicProfileInfo::EnableImplicitCallFlags(funcInfo->GetParsedFunctionBody()))",
          "9469:             {",
          "9471:             }",
          "9472: #endif",
          "",
          "[Removed Lines]",
          "9470:                 byteCodeGenerator->Writer()->Unsigned1(Js::OpCode::ProfiledLoopEnd, pnode->sxLoop.loopId);",
          "",
          "[Added Lines]",
          "9468:                 byteCodeGenerator->Writer()->Unsigned1(Js::OpCode::ProfiledLoopEnd, pnode->AsParseNodeLoop()->loopId);",
          "",
          "---------------",
          "--- Hunk 232 ---",
          "[Context before]",
          "9482:         case knopForIn:",
          "9483:             if (Js::DynamicProfileInfo::EnableImplicitCallFlags(funcInfo->GetParsedFunctionBody()))",
          "9484:             {",
          "9486:             }",
          "9487:             break;",
          "9488: #endif",
          "",
          "[Removed Lines]",
          "9485:                 byteCodeGenerator->Writer()->Unsigned1(Js::OpCode::ProfiledLoopEnd, pnode->sxLoop.loopId);",
          "",
          "[Added Lines]",
          "9483:                 byteCodeGenerator->Writer()->Unsigned1(Js::OpCode::ProfiledLoopEnd, pnode->AsParseNodeLoop()->loopId);",
          "",
          "---------------",
          "--- Hunk 233 ---",
          "[Context before]",
          "9502:     Emit(pnode1, byteCodeGenerator, funcInfo, false);",
          "9504:     if (pnode1->nop == knopComputedName && pnode2->nop == knopClassDecl &&",
          "9506:     {",
          "9507:         Emit(pnode2, byteCodeGenerator, funcInfo, false, false, pnode1);",
          "9508:     }",
          "",
          "[Removed Lines]",
          "9505:         (pnode2->sxClass.pnodeConstructor == nullptr || pnode2->sxClass.pnodeConstructor->nop != knopVarDecl))",
          "",
          "[Added Lines]",
          "9503:         (pnode2->AsParseNodeClass()->pnodeConstructor == nullptr || pnode2->AsParseNodeClass()->pnodeConstructor->nop != knopVarDecl))",
          "",
          "---------------",
          "--- Hunk 234 ---",
          "[Context before]",
          "9532:             funcInfo->AcquireLoc(pnode1);",
          "9533:         }",
          "9535:         {",
          "9538:         }",
          "9539:         break;",
          "9540:     case knopIndex:",
          "",
          "[Removed Lines]",
          "9534:         if (MayHaveSideEffectOnNode(pnode1->sxBin.pnode1, pnode2))",
          "9537:             SaveOpndValue(pnode1->sxBin.pnode1, funcInfo);",
          "",
          "[Added Lines]",
          "9532:         if (MayHaveSideEffectOnNode(pnode1->AsParseNodeBin()->pnode1, pnode2))",
          "9535:             SaveOpndValue(pnode1->AsParseNodeBin()->pnode1, funcInfo);",
          "",
          "---------------",
          "--- Hunk 235 ---",
          "[Context before]",
          "9544:             funcInfo->AcquireLoc(pnode1);",
          "9545:         }",
          "9548:         {",
          "9551:         }",
          "9553:         {",
          "9558:         }",
          "9559:         break;",
          "9560:     }",
          "",
          "[Removed Lines]",
          "9546:         if (MayHaveSideEffectOnNode(pnode1->sxBin.pnode1, pnode2) ||",
          "9547:             MayHaveSideEffectOnNode(pnode1->sxBin.pnode1, pnode1->sxBin.pnode2))",
          "9550:             SaveOpndValue(pnode1->sxBin.pnode1, funcInfo);",
          "9552:         if (MayHaveSideEffectOnNode(pnode1->sxBin.pnode2, pnode2))",
          "9556:             funcInfo->AcquireLoc(pnode1->sxBin.pnode1);",
          "9557:             SaveOpndValue(pnode1->sxBin.pnode2, funcInfo);",
          "",
          "[Added Lines]",
          "9544:         if (MayHaveSideEffectOnNode(pnode1->AsParseNodeBin()->pnode1, pnode2) ||",
          "9545:             MayHaveSideEffectOnNode(pnode1->AsParseNodeBin()->pnode1, pnode1->AsParseNodeBin()->pnode2))",
          "9548:             SaveOpndValue(pnode1->AsParseNodeBin()->pnode1, funcInfo);",
          "9550:         if (MayHaveSideEffectOnNode(pnode1->AsParseNodeBin()->pnode2, pnode2))",
          "9554:             funcInfo->AcquireLoc(pnode1->AsParseNodeBin()->pnode1);",
          "9555:             SaveOpndValue(pnode1->AsParseNodeBin()->pnode2, funcInfo);",
          "",
          "---------------",
          "--- Hunk 236 ---",
          "[Context before]",
          "9602: void EmitBinary(Js::OpCode opcode, ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator, FuncInfo *funcInfo)",
          "9603: {",
          "9604:     byteCodeGenerator->StartStatement(pnode);",
          "9608:     funcInfo->AcquireLoc(pnode);",
          "9609:     byteCodeGenerator->Writer()->Reg3(opcode,",
          "9610:         pnode->location,",
          "9613:     byteCodeGenerator->EndStatement(pnode);",
          "9614: }",
          "",
          "[Removed Lines]",
          "9605:     EmitBinaryOpnds(pnode->sxBin.pnode1, pnode->sxBin.pnode2, byteCodeGenerator, funcInfo);",
          "9606:     funcInfo->ReleaseLoc(pnode->sxBin.pnode2);",
          "9607:     funcInfo->ReleaseLoc(pnode->sxBin.pnode1);",
          "9611:         pnode->sxBin.pnode1->location,",
          "9612:         pnode->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "9603:     EmitBinaryOpnds(pnode->AsParseNodeBin()->pnode1, pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo);",
          "9604:     funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode2);",
          "9605:     funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode1);",
          "9609:         pnode->AsParseNodeBin()->pnode1->location,",
          "9610:         pnode->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 237 ---",
          "[Context before]",
          "9621:     bool doConcatString = false;",
          "9622:     DList<ParseNode*, ArenaAllocator> pnodeStack(arenaAllocator);",
          "9625:     while (true)",
          "9626:     {",
          "9627:         if (!pnode->CanFlattenConcatExpr())",
          "",
          "[Removed Lines]",
          "9623:     pnodeStack.Prepend(pnodeAdd->sxBin.pnode2);",
          "9624:     ParseNode * pnode = pnodeAdd->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "9621:     pnodeStack.Prepend(pnodeAdd->AsParseNodeBin()->pnode2);",
          "9622:     ParseNode * pnode = pnodeAdd->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 238 ---",
          "[Context before]",
          "9638:         }",
          "9639:         else",
          "9640:         {",
          "9641:             Assert(pnode->nop == knopAdd);",
          "9644:             continue;",
          "9645:         }",
          "",
          "[Removed Lines]",
          "9637:             doConcatString = doConcatString || !Js::CompoundString::ShouldAppendChars(pnode->sxPid.pid->Cch());",
          "9642:             pnodeStack.Prepend(pnode->sxBin.pnode2);",
          "9643:             pnode = pnode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "9635:             doConcatString = doConcatString || !Js::CompoundString::ShouldAppendChars(pnode->AsParseNodePid()->pid->Cch());",
          "9640:             pnodeStack.Prepend(pnode->AsParseNodeBin()->pnode2);",
          "9641:             pnode = pnode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 239 ---",
          "[Context before]",
          "9892:     Js::RegSlot iteratorLocation = funcInfo->AcquireTmpRegister();",
          "9901:     EmitIteratorNext(yieldStarNode->location, iteratorLocation, funcInfo->undefinedConstantRegister, byteCodeGenerator, funcInfo);",
          "",
          "[Removed Lines]",
          "9895:     Emit(yieldStarNode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "9896:     funcInfo->ReleaseLoc(yieldStarNode->sxUni.pnode1);",
          "9898:     EmitGetIterator(iteratorLocation, yieldStarNode->sxUni.pnode1->location, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "9893:     Emit(yieldStarNode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "9894:     funcInfo->ReleaseLoc(yieldStarNode->AsParseNodeUni()->pnode1);",
          "9896:     EmitGetIterator(iteratorLocation, yieldStarNode->AsParseNodeUni()->pnode1->location, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 240 ---",
          "[Context before]",
          "9955:     Assert(objNode->nop == knopObject);",
          "9956:     Assert(ParseNode::Grfnop(objNode->nop) & fnopUni);",
          "9960:     while (memberList != nullptr)",
          "9961:     {",
          "9966:         if (memberNameNode->nop != knopComputedName && memberValNode->nop == knopInt)",
          "9967:         {",
          "9969:             TrackIntConstantsOnGlobalUserObject(byteCodeGenerator, true, propertyId);",
          "9970:         }",
          "9973:     }",
          "9974: }",
          "",
          "[Removed Lines]",
          "9958:     ParseNodePtr memberList = objNode->sxUni.pnode1;",
          "9962:         ParseNodePtr memberNode = memberList->nop == knopList ? memberList->sxBin.pnode1 : memberList;",
          "9963:         ParseNodePtr memberNameNode = memberNode->sxBin.pnode1;",
          "9964:         ParseNodePtr memberValNode = memberNode->sxBin.pnode2;",
          "9968:             Js::PropertyId propertyId = memberNameNode->sxPid.PropertyIdFromNameNode();",
          "9972:         memberList = memberList->nop == knopList ? memberList->sxBin.pnode2 : nullptr;",
          "",
          "[Added Lines]",
          "9956:     ParseNodePtr memberList = objNode->AsParseNodeUni()->pnode1;",
          "9960:         ParseNodePtr memberNode = memberList->nop == knopList ? memberList->AsParseNodeBin()->pnode1 : memberList;",
          "9961:         ParseNodePtr memberNameNode = memberNode->AsParseNodeBin()->pnode1;",
          "9962:         ParseNodePtr memberValNode = memberNode->AsParseNodeBin()->pnode2;",
          "9966:             Js::PropertyId propertyId = memberNameNode->AsParseNodePid()->PropertyIdFromNameNode();",
          "9970:         memberList = memberList->nop == knopList ? memberList->AsParseNodeBin()->pnode2 : nullptr;",
          "",
          "---------------",
          "--- Hunk 241 ---",
          "[Context before]",
          "9977: {",
          "9978:     Assert(knopDotNode->nop == knopDot);",
          "9982:     bool isSymGlobalAndSingleAssignment = false;",
          "9984:     if (objectNode->nop == knopName)",
          "",
          "[Removed Lines]",
          "9980:     ParseNodePtr objectNode = knopDotNode->sxBin.pnode1;",
          "9981:     ParseNodePtr propertyNode = knopDotNode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "9978:     ParseNodePtr objectNode = knopDotNode->AsParseNodeBin()->pnode1;",
          "9979:     ParseNodePtr propertyNode = knopDotNode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 242 ---",
          "[Context before]",
          "9987:         {",
          "9992:             TrackIntConstantsOnGlobalObject(byteCodeGenerator, isSymGlobalAndSingleAssignment, propertyId);",
          "9993:         }",
          "9994:         else",
          "9995:         {",
          "9999:             TrackIntConstantsOnGlobalUserObject(byteCodeGenerator, isSymGlobalAndSingleAssignment, propertyId);",
          "10000:         }",
          "10001:     }",
          "",
          "[Removed Lines]",
          "9990:             isSymGlobalAndSingleAssignment = propertyNode->sxPid.pid->IsSingleAssignment();",
          "9991:             Js::PropertyId propertyId = propertyNode->sxPid.PropertyIdFromNameNode();",
          "9996:             Symbol * sym = objectNode->sxVar.sym;",
          "9997:             isSymGlobalAndSingleAssignment = sym && sym->GetIsGlobal() && sym->IsAssignedOnce() && propertyNode->sxPid.pid->IsSingleAssignment();",
          "9998:             Js::PropertyId propertyId = propertyNode->sxPid.PropertyIdFromNameNode();",
          "",
          "[Added Lines]",
          "9988:             isSymGlobalAndSingleAssignment = propertyNode->AsParseNodePid()->pid->IsSingleAssignment();",
          "9989:             Js::PropertyId propertyId = propertyNode->AsParseNodePid()->PropertyIdFromNameNode();",
          "9994:             Symbol * sym = objectNode->AsParseNodePid()->sym;",
          "9995:             isSymGlobalAndSingleAssignment = sym && sym->GetIsGlobal() && sym->IsAssignedOnce() && propertyNode->AsParseNodePid()->pid->IsSingleAssignment();",
          "9996:             Js::PropertyId propertyId = propertyNode->AsParseNodePid()->PropertyIdFromNameNode();",
          "",
          "---------------",
          "--- Hunk 243 ---",
          "[Context before]",
          "10009:     {",
          "10010:         if (nodeType & fnopBin)",
          "10011:         {",
          "10015:             Assert(lhs && rhs);",
          "",
          "[Removed Lines]",
          "10012:             ParseNodePtr lhs = pnode->sxBin.pnode1;",
          "10013:             ParseNodePtr rhs = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "10010:             ParseNodePtr lhs = pnode->AsParseNodeBin()->pnode1;",
          "10011:             ParseNodePtr rhs = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 244 ---",
          "[Context before]",
          "10020:                 TrackMemberNodesInObjectForIntConstants(byteCodeGenerator, rhs);",
          "10021:             }",
          "10022:             else if (rhs->nop != knopInt &&",
          "10024:             {",
          "10025:                 return;",
          "10026:             }",
          "",
          "[Removed Lines]",
          "10023:                 ((rhs->nop != knopLsh && rhs->nop != knopRsh) || (rhs->sxBin.pnode1->nop != knopInt || rhs->sxBin.pnode2->nop != knopInt)))",
          "",
          "[Added Lines]",
          "10021:                 ((rhs->nop != knopLsh && rhs->nop != knopRsh) || (rhs->AsParseNodeBin()->pnode1->nop != knopInt || rhs->AsParseNodeBin()->pnode2->nop != knopInt)))",
          "",
          "---------------",
          "--- Hunk 245 ---",
          "[Context before]",
          "10028:             if (lhs->nop == knopName)",
          "10029:             {",
          "10032:                 TrackIntConstantsOnGlobalObject(byteCodeGenerator, sym);",
          "10033:             }",
          "10035:             {",
          "10037:                 TrackGlobalIntAssignmentsForknopDotProps(lhs, byteCodeGenerator);",
          "",
          "[Removed Lines]",
          "10031:                 Symbol * sym = lhs->sxVar.sym;",
          "10034:             else if (lhs->nop == knopDot && lhs->sxBin.pnode2->nop == knopName)",
          "",
          "[Added Lines]",
          "10029:                 Symbol * sym = lhs->AsParseNodePid()->sym;",
          "10032:             else if (lhs->nop == knopDot && lhs->AsParseNodeBin()->pnode2->nop == knopName)",
          "",
          "---------------",
          "--- Hunk 246 ---",
          "[Context before]",
          "10039:         }",
          "10040:         else if (nodeType & fnopUni)",
          "10041:         {",
          "10044:             if (lhs->nop == knopName)",
          "10045:             {",
          "10048:                 TrackIntConstantsOnGlobalObject(byteCodeGenerator, sym);",
          "10049:             }",
          "10051:             {",
          "10053:                 TrackGlobalIntAssignmentsForknopDotProps(lhs, byteCodeGenerator);",
          "",
          "[Removed Lines]",
          "10042:             ParseNodePtr lhs = pnode->sxUni.pnode1;",
          "10047:                 Symbol * sym = lhs->sxVar.sym;",
          "10050:             else if (lhs->nop == knopDot && lhs->sxBin.pnode2->nop == knopName)",
          "",
          "[Added Lines]",
          "10040:             ParseNodePtr lhs = pnode->AsParseNodeUni()->pnode1;",
          "10045:                 Symbol * sym = lhs->AsParseNodePid()->sym;",
          "10048:             else if (lhs->nop == knopDot && lhs->AsParseNodeBin()->pnode2->nop == knopName)",
          "",
          "---------------",
          "--- Hunk 247 ---",
          "[Context before]",
          "10086:         break;",
          "10088:     case knopRegExp:",
          "10091:         break;",
          "10093:     case knopNull:",
          "",
          "[Removed Lines]",
          "10089:         funcInfo->GetParsedFunctionBody()->SetLiteralRegex(pnode->sxPid.regexPatternIndex, pnode->sxPid.regexPattern);",
          "10090:         byteCodeGenerator->Writer()->Reg1Unsigned1(Js::OpCode::NewRegEx, funcInfo->AcquireLoc(pnode), pnode->sxPid.regexPatternIndex);",
          "",
          "[Added Lines]",
          "10087:         funcInfo->GetParsedFunctionBody()->SetLiteralRegex(pnode->AsParseNodePid()->regexPatternIndex, pnode->AsParseNodePid()->regexPattern);",
          "10088:         byteCodeGenerator->Writer()->Reg1Unsigned1(Js::OpCode::NewRegEx, funcInfo->AcquireLoc(pnode), pnode->AsParseNodePid()->regexPatternIndex);",
          "",
          "---------------",
          "--- Hunk 248 ---",
          "[Context before]",
          "10109:     case knopNot:",
          "10110:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10113:         byteCodeGenerator->Writer()->Reg2(",
          "10115:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10116:         break;",
          "10118:     case knopNeg:",
          "10119:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10122:         funcInfo->AcquireLoc(pnode);",
          "10123:         byteCodeGenerator->Writer()->Reg2(",
          "10125:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10126:         break;",
          "10128:     case knopPos:",
          "10129:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10132:         byteCodeGenerator->Writer()->Reg2(",
          "10134:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10135:         break;",
          "",
          "[Removed Lines]",
          "10111:         Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "10112:         funcInfo->ReleaseLoc(pnode->sxUni.pnode1);",
          "10114:             Js::OpCode::Not_A, funcInfo->AcquireLoc(pnode), pnode->sxUni.pnode1->location);",
          "10120:         Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "10121:         funcInfo->ReleaseLoc(pnode->sxUni.pnode1);",
          "10124:             Js::OpCode::Neg_A, pnode->location, pnode->sxUni.pnode1->location);",
          "10130:         Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "10131:         funcInfo->ReleaseLoc(pnode->sxUni.pnode1);",
          "10133:             Js::OpCode::Conv_Num, funcInfo->AcquireLoc(pnode), pnode->sxUni.pnode1->location);",
          "",
          "[Added Lines]",
          "10109:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10110:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "10112:             Js::OpCode::Not_A, funcInfo->AcquireLoc(pnode), pnode->AsParseNodeUni()->pnode1->location);",
          "10118:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10119:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "10122:             Js::OpCode::Neg_A, pnode->location, pnode->AsParseNodeUni()->pnode1->location);",
          "10128:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10129:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "10131:             Js::OpCode::Conv_Num, funcInfo->AcquireLoc(pnode), pnode->AsParseNodeUni()->pnode1->location);",
          "",
          "---------------",
          "--- Hunk 249 ---",
          "[Context before]",
          "10144:         funcInfo->AcquireLoc(pnode);",
          "10146:         {",
          "10148:             Js::OpCode op = value ? Js::OpCode::LdFalse : Js::OpCode::LdTrue;",
          "10149:             byteCodeGenerator->Writer()->Reg1(op, pnode->location);",
          "10150:         }",
          "10151:         else",
          "10152:         {",
          "10154:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdFalse, pnode->location);",
          "10156:             byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdTrue, pnode->location);",
          "10157:             byteCodeGenerator->Writer()->MarkLabel(doneLabel);",
          "10158:         }",
          "10160:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10161:         break;",
          "10162:     }",
          "10164:     case knopEllipsis:",
          "10165:     {",
          "10169:         break;",
          "10170:     }",
          "",
          "[Removed Lines]",
          "10145:         if (pnode->sxUni.pnode1->nop == knopInt)",
          "10147:             int32 value = pnode->sxUni.pnode1->sxInt.lw;",
          "10153:             Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "10155:             byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrTrue_A, doneLabel, pnode->sxUni.pnode1->location);",
          "10159:         funcInfo->ReleaseLoc(pnode->sxUni.pnode1);",
          "10166:         Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "10168:         pnode->location = pnode->sxUni.pnode1->location;",
          "",
          "[Added Lines]",
          "10143:         if (pnode->AsParseNodeUni()->pnode1->nop == knopInt)",
          "10145:             int32 value = pnode->AsParseNodeUni()->pnode1->AsParseNodeInt()->lw;",
          "10151:             Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10153:             byteCodeGenerator->Writer()->BrReg1(Js::OpCode::BrTrue_A, doneLabel, pnode->AsParseNodeUni()->pnode1->location);",
          "10157:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "10164:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10166:         pnode->location = pnode->AsParseNodeUni()->pnode1->location;",
          "",
          "---------------",
          "--- Hunk 250 ---",
          "[Context before]",
          "10184:             funcInfo->AcquireLoc(pnode);",
          "10191:             if (funcInfo->RegIsConst(incDecResult))",
          "10192:             {",
          "",
          "[Removed Lines]",
          "10187:             EmitLoad(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo);",
          "10188:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Num, pnode->location, pnode->sxUni.pnode1->location);",
          "10190:             Js::RegSlot incDecResult = pnode->sxUni.pnode1->location;",
          "",
          "[Added Lines]",
          "10185:             EmitLoad(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo);",
          "10186:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Num, pnode->location, pnode->AsParseNodeUni()->pnode1->location);",
          "10188:             Js::RegSlot incDecResult = pnode->AsParseNodeUni()->pnode1->location;",
          "",
          "---------------",
          "--- Hunk 251 ---",
          "[Context before]",
          "10200:             byteCodeGenerator->Writer()->Reg3(op, incDecResult, pnode->location, oneReg);",
          "10207:             {",
          "10208:                 funcInfo->ReleaseTmpRegister(incDecResult);",
          "10209:             }",
          "10211:             byteCodeGenerator->EndStatement(pnode);",
          "10213:             break;",
          "",
          "[Removed Lines]",
          "10203:             EmitAssignment(nullptr, pnode->sxUni.pnode1, incDecResult, byteCodeGenerator, funcInfo);",
          "10206:             if (incDecResult != pnode->sxUni.pnode1->location)",
          "10210:             funcInfo->ReleaseLoad(pnode->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "10201:             EmitAssignment(nullptr, pnode->AsParseNodeUni()->pnode1, incDecResult, byteCodeGenerator, funcInfo);",
          "10204:             if (incDecResult != pnode->AsParseNodeUni()->pnode1->location)",
          "10208:             funcInfo->ReleaseLoad(pnode->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 252 ---",
          "[Context before]",
          "10236:             funcInfo->AcquireLoc(pnode);",
          "10245:         }",
          "10246:         else",
          "10247:         {",
          "10252:             if (funcInfo->RegIsConst(incDecResult))",
          "10253:             {",
          "",
          "[Removed Lines]",
          "10239:             EmitLoad(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo);",
          "10240:             byteCodeGenerator->Writer()->Reg2(op, pnode->location, pnode->sxUni.pnode1->location);",
          "10243:             EmitAssignment(nullptr, pnode->sxUni.pnode1, pnode->location, byteCodeGenerator, funcInfo);",
          "10244:             funcInfo->ReleaseLoad(pnode->sxUni.pnode1);",
          "10249:             EmitLoad(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo);",
          "10251:             Js::RegSlot incDecResult = pnode->sxUni.pnode1->location;",
          "",
          "[Added Lines]",
          "10237:             EmitLoad(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo);",
          "10238:             byteCodeGenerator->Writer()->Reg2(op, pnode->location, pnode->AsParseNodeUni()->pnode1->location);",
          "10241:             EmitAssignment(nullptr, pnode->AsParseNodeUni()->pnode1, pnode->location, byteCodeGenerator, funcInfo);",
          "10242:             funcInfo->ReleaseLoad(pnode->AsParseNodeUni()->pnode1);",
          "10247:             EmitLoad(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo);",
          "10249:             Js::RegSlot incDecResult = pnode->AsParseNodeUni()->pnode1->location;",
          "",
          "---------------",
          "--- Hunk 253 ---",
          "[Context before]",
          "10256:                 incDecResult = funcInfo->AcquireTmpRegister();",
          "10257:             }",
          "10264:             {",
          "10265:                 funcInfo->ReleaseTmpRegister(incDecResult);",
          "10266:             }",
          "10268:         }",
          "10270:         byteCodeGenerator->EndStatement(pnode);",
          "",
          "[Removed Lines]",
          "10259:             byteCodeGenerator->Writer()->Reg2(op, incDecResult, pnode->sxUni.pnode1->location);",
          "10262:             EmitAssignment(nullptr, pnode->sxUni.pnode1, incDecResult, byteCodeGenerator, funcInfo);",
          "10263:             if (incDecResult != pnode->sxUni.pnode1->location)",
          "10267:             funcInfo->ReleaseLoad(pnode->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "10257:             byteCodeGenerator->Writer()->Reg2(op, incDecResult, pnode->AsParseNodeUni()->pnode1->location);",
          "10260:             EmitAssignment(nullptr, pnode->AsParseNodeUni()->pnode1, incDecResult, byteCodeGenerator, funcInfo);",
          "10261:             if (incDecResult != pnode->AsParseNodeUni()->pnode1->location)",
          "10265:             funcInfo->ReleaseLoad(pnode->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 254 ---",
          "[Context before]",
          "10274:     case knopTypeof:",
          "10275:     {",
          "10276:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10278:         switch (pnodeOpnd->nop)",
          "10279:         {",
          "10280:         case knopDot:",
          "10281:         {",
          "10286:             funcInfo->AcquireLoc(pnode);",
          "10289:             break;",
          "10290:         }",
          "10292:         case knopIndex:",
          "10293:         {",
          "10297:             funcInfo->AcquireLoc(pnode);",
          "10299:             break;",
          "10300:         }",
          "10301:         case knopName:",
          "",
          "[Removed Lines]",
          "10277:         ParseNode* pnodeOpnd = pnode->sxUni.pnode1;",
          "10282:             Emit(pnodeOpnd->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "10283:             Js::PropertyId propertyId = pnodeOpnd->sxBin.pnode2->sxPid.PropertyIdFromNameNode();",
          "10284:             Assert(pnodeOpnd->sxBin.pnode2->nop == knopName);",
          "10285:             funcInfo->ReleaseLoc(pnodeOpnd->sxBin.pnode1);",
          "10288:             byteCodeGenerator->EmitTypeOfFld(funcInfo, propertyId, pnode->location, pnodeOpnd->sxBin.pnode1->location, Js::OpCode::LdFldForTypeOf);",
          "10294:             EmitBinaryOpnds(pnodeOpnd->sxBin.pnode1, pnodeOpnd->sxBin.pnode2, byteCodeGenerator, funcInfo);",
          "10295:             funcInfo->ReleaseLoc(pnodeOpnd->sxBin.pnode2);",
          "10296:             funcInfo->ReleaseLoc(pnodeOpnd->sxBin.pnode1);",
          "10298:             byteCodeGenerator->Writer()->Element(Js::OpCode::TypeofElem, pnode->location, pnodeOpnd->sxBin.pnode1->location, pnodeOpnd->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "10275:         ParseNode* pnodeOpnd = pnode->AsParseNodeUni()->pnode1;",
          "10280:             Emit(pnodeOpnd->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10281:             Js::PropertyId propertyId = pnodeOpnd->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode();",
          "10282:             Assert(pnodeOpnd->AsParseNodeBin()->pnode2->nop == knopName);",
          "10283:             funcInfo->ReleaseLoc(pnodeOpnd->AsParseNodeBin()->pnode1);",
          "10286:             byteCodeGenerator->EmitTypeOfFld(funcInfo, propertyId, pnode->location, pnodeOpnd->AsParseNodeBin()->pnode1->location, Js::OpCode::LdFldForTypeOf);",
          "10292:             EmitBinaryOpnds(pnodeOpnd->AsParseNodeBin()->pnode1, pnodeOpnd->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo);",
          "10293:             funcInfo->ReleaseLoc(pnodeOpnd->AsParseNodeBin()->pnode2);",
          "10294:             funcInfo->ReleaseLoc(pnodeOpnd->AsParseNodeBin()->pnode1);",
          "10296:             byteCodeGenerator->Writer()->Element(Js::OpCode::TypeofElem, pnode->location, pnodeOpnd->AsParseNodeBin()->pnode1->location, pnodeOpnd->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 255 ---",
          "[Context before]",
          "10303:             if (pnodeOpnd->IsUserIdentifier())",
          "10304:             {",
          "10305:                 funcInfo->AcquireLoc(pnode);",
          "10307:                 break;",
          "10308:             }",
          "",
          "[Removed Lines]",
          "10306:                 byteCodeGenerator->EmitPropTypeof(pnode->location, pnodeOpnd->sxPid.sym, pnodeOpnd->sxPid.pid, funcInfo);",
          "",
          "[Added Lines]",
          "10304:                 byteCodeGenerator->EmitPropTypeof(pnode->location, pnodeOpnd->AsParseNodePid()->sym, pnodeOpnd->AsParseNodePid()->pid, funcInfo);",
          "",
          "---------------",
          "--- Hunk 256 ---",
          "[Context before]",
          "10321:     }",
          "10323:     case knopVoid:",
          "10326:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::LdUndef, funcInfo->AcquireLoc(pnode));",
          "10327:         break;",
          "",
          "[Removed Lines]",
          "10324:         Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "10325:         funcInfo->ReleaseLoc(pnode->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "10322:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10323:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 257 ---",
          "[Context before]",
          "10335:     case knopObject:",
          "10336:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10337:         funcInfo->AcquireLoc(pnode);",
          "10339:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10340:         break;",
          "10342:     case knopComputedName:",
          "10344:         if (pnode->location == Js::Constants::NoRegister)",
          "10345:         {",
          "10348:         }",
          "10350:         {",
          "10353:         }",
          "10354:         break;",
          "",
          "[Removed Lines]",
          "10338:         EmitObjectInitializers(pnode->sxUni.pnode1, pnode->location, byteCodeGenerator, funcInfo);",
          "10343:         Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "10347:             pnode->location = pnode->sxUni.pnode1->location;",
          "10349:         else if (pnode->location != pnode->sxUni.pnode1->location)",
          "10352:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->sxUni.pnode1->location);",
          "",
          "[Added Lines]",
          "10336:         EmitObjectInitializers(pnode->AsParseNodeUni()->pnode1, pnode->location, byteCodeGenerator, funcInfo);",
          "10341:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10345:             pnode->location = pnode->AsParseNodeUni()->pnode1->location;",
          "10347:         else if (pnode->location != pnode->AsParseNodeUni()->pnode1->location)",
          "10350:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->AsParseNodeUni()->pnode1->location);",
          "",
          "---------------",
          "--- Hunk 258 ---",
          "[Context before]",
          "10373:     case knopInstOf:",
          "10374:     {",
          "10375:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10379:         funcInfo->AcquireLoc(pnode);",
          "10380:         uint cacheId = funcInfo->NewIsInstInlineCache();",
          "10383:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10384:     }",
          "10385:     break;",
          "",
          "[Removed Lines]",
          "10376:         EmitBinaryOpnds(pnode->sxBin.pnode1, pnode->sxBin.pnode2, byteCodeGenerator, funcInfo);",
          "10377:         funcInfo->ReleaseLoc(pnode->sxBin.pnode2);",
          "10378:         funcInfo->ReleaseLoc(pnode->sxBin.pnode1);",
          "10381:         byteCodeGenerator->Writer()->Reg3C(nopToOp[pnode->nop], pnode->location, pnode->sxBin.pnode1->location,",
          "10382:             pnode->sxBin.pnode2->location, cacheId);",
          "",
          "[Added Lines]",
          "10374:         EmitBinaryOpnds(pnode->AsParseNodeBin()->pnode1, pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo);",
          "10375:         funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode2);",
          "10376:         funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode1);",
          "10379:         byteCodeGenerator->Writer()->Reg3C(nopToOp[pnode->nop], pnode->location, pnode->AsParseNodeBin()->pnode1->location,",
          "10380:             pnode->AsParseNodeBin()->pnode2->location, cacheId);",
          "",
          "---------------",
          "--- Hunk 259 ---",
          "[Context before]",
          "10392:     case knopGe:",
          "10393:     case knopGt:",
          "10394:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10398:         funcInfo->AcquireLoc(pnode);",
          "10401:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10402:         break;",
          "10403:     case knopNew:",
          "",
          "[Removed Lines]",
          "10395:         EmitBinaryOpnds(pnode->sxBin.pnode1, pnode->sxBin.pnode2, byteCodeGenerator, funcInfo);",
          "10396:         funcInfo->ReleaseLoc(pnode->sxBin.pnode2);",
          "10397:         funcInfo->ReleaseLoc(pnode->sxBin.pnode1);",
          "10399:         byteCodeGenerator->Writer()->Reg3(nopToCMOp[pnode->nop], pnode->location, pnode->sxBin.pnode1->location,",
          "10400:             pnode->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "10393:         EmitBinaryOpnds(pnode->AsParseNodeBin()->pnode1, pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo);",
          "10394:         funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode2);",
          "10395:         funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode1);",
          "10397:         byteCodeGenerator->Writer()->Reg3(nopToCMOp[pnode->nop], pnode->location, pnode->AsParseNodeBin()->pnode1->location,",
          "10398:             pnode->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 260 ---",
          "[Context before]",
          "10409:     }",
          "10410:     case knopDelete:",
          "10411:     {",
          "10413:         byteCodeGenerator->StartStatement(pnode);",
          "10414:         switch (pexpr->nop)",
          "10415:         {",
          "",
          "[Removed Lines]",
          "10412:         ParseNode *pexpr = pnode->sxUni.pnode1;",
          "",
          "[Added Lines]",
          "10410:         ParseNode *pexpr = pnode->AsParseNodeUni()->pnode1;",
          "",
          "---------------",
          "--- Hunk 261 ---",
          "[Context before]",
          "10423:             else",
          "10424:             {",
          "10425:                 funcInfo->AcquireLoc(pnode);",
          "10427:             }",
          "10428:             break;",
          "10429:         }",
          "10430:         case knopDot:",
          "10431:         {",
          "10433:             {",
          "10434:                 byteCodeGenerator->Writer()->W1(Js::OpCode::RuntimeReferenceError, SCODE_CODE(JSERR_DeletePropertyWithSuper));",
          "",
          "[Removed Lines]",
          "10426:                 byteCodeGenerator->EmitPropDelete(pnode->location, pexpr->sxPid.sym, pexpr->sxPid.pid, funcInfo);",
          "10432:             if (ByteCodeGenerator::IsSuper(pexpr->sxBin.pnode1))",
          "",
          "[Added Lines]",
          "10424:                 byteCodeGenerator->EmitPropDelete(pnode->location, pexpr->AsParseNodePid()->sym, pexpr->AsParseNodePid()->pid, funcInfo);",
          "10430:             if (ByteCodeGenerator::IsSuper(pexpr->AsParseNodeBin()->pnode1))",
          "",
          "---------------",
          "--- Hunk 262 ---",
          "[Context before]",
          "10438:             }",
          "10439:             else",
          "10440:             {",
          "10445:                 funcInfo->AcquireLoc(pnode);",
          "10447:                     funcInfo->FindOrAddReferencedPropertyId(propertyId));",
          "10448:             }",
          "",
          "[Removed Lines]",
          "10441:                 Emit(pexpr->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "10443:                 funcInfo->ReleaseLoc(pexpr->sxBin.pnode1);",
          "10444:                 Js::PropertyId propertyId = pexpr->sxBin.pnode2->sxPid.PropertyIdFromNameNode();",
          "10446:                 byteCodeGenerator->Writer()->Property(Js::OpCode::DeleteFld, pnode->location, pexpr->sxBin.pnode1->location,",
          "",
          "[Added Lines]",
          "10439:                 Emit(pexpr->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10441:                 funcInfo->ReleaseLoc(pexpr->AsParseNodeBin()->pnode1);",
          "10442:                 Js::PropertyId propertyId = pexpr->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode();",
          "10444:                 byteCodeGenerator->Writer()->Property(Js::OpCode::DeleteFld, pnode->location, pexpr->AsParseNodeBin()->pnode1->location,",
          "",
          "---------------",
          "--- Hunk 263 ---",
          "[Context before]",
          "10451:         }",
          "10452:         case knopIndex:",
          "10453:         {",
          "10457:             funcInfo->AcquireLoc(pnode);",
          "10459:             break;",
          "10460:         }",
          "10461:         default:",
          "",
          "[Removed Lines]",
          "10454:             EmitBinaryOpnds(pexpr->sxBin.pnode1, pexpr->sxBin.pnode2, byteCodeGenerator, funcInfo);",
          "10455:             funcInfo->ReleaseLoc(pexpr->sxBin.pnode2);",
          "10456:             funcInfo->ReleaseLoc(pexpr->sxBin.pnode1);",
          "10458:             byteCodeGenerator->Writer()->Element(Js::OpCode::DeleteElemI_A, pnode->location, pexpr->sxBin.pnode1->location, pexpr->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "10452:             EmitBinaryOpnds(pexpr->AsParseNodeBin()->pnode1, pexpr->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo);",
          "10453:             funcInfo->ReleaseLoc(pexpr->AsParseNodeBin()->pnode2);",
          "10454:             funcInfo->ReleaseLoc(pexpr->AsParseNodeBin()->pnode1);",
          "10456:             byteCodeGenerator->Writer()->Element(Js::OpCode::DeleteElemI_A, pnode->location, pexpr->AsParseNodeBin()->pnode1->location, pexpr->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 264 ---",
          "[Context before]",
          "10474:     {",
          "10475:         byteCodeGenerator->StartStatement(pnode);",
          "10478:         {",
          "10479:             byteCodeGenerator->EmitSuperCall(funcInfo, pnode, fReturnValue);",
          "10480:         }",
          "10482:         {",
          "10484:             Assert(CountArguments(args) == 2); // import() takes one argument",
          "10485:             Emit(args, byteCodeGenerator, funcInfo, false);",
          "10486:             funcInfo->ReleaseLoc(args);",
          "",
          "[Removed Lines]",
          "10477:         if (pnode->sxCall.isSuperCall)",
          "10481:         else if (pnode->sxCall.pnodeTarget->nop == knopImport)",
          "10483:             ParseNodePtr args = pnode->sxCall.pnodeArgs;",
          "",
          "[Added Lines]",
          "10475:         if (pnode->AsParseNodeCall()->isSuperCall)",
          "10479:         else if (pnode->AsParseNodeCall()->pnodeTarget->nop == knopImport)",
          "10481:             ParseNodePtr args = pnode->AsParseNodeCall()->pnodeArgs;",
          "",
          "---------------",
          "--- Hunk 265 ---",
          "[Context before]",
          "10489:         }",
          "10490:         else",
          "10491:         {",
          "10493:             {",
          "10495:                 EmitApplyCall(pnode, byteCodeGenerator, funcInfo, fReturnValue);",
          "",
          "[Removed Lines]",
          "10492:             if (pnode->sxCall.isApplyCall && funcInfo->GetApplyEnclosesArgs())",
          "",
          "[Added Lines]",
          "10490:             if (pnode->AsParseNodeCall()->isApplyCall && funcInfo->GetApplyEnclosesArgs())",
          "",
          "---------------",
          "--- Hunk 266 ---",
          "[Context before]",
          "10506:     case knopIndex:",
          "10507:     {",
          "10508:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10512:         Js::RegSlot protoLocation = callObjLocation;",
          "10515:         {",
          "10517:             protoLocation = byteCodeGenerator->EmitLdObjProto(Js::OpCode::LdHomeObjProto, callObjLocation, funcInfo);",
          "10519:         }",
          "10523:         funcInfo->AcquireLoc(pnode);",
          "10525:         byteCodeGenerator->Writer()->Element(",
          "10528:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10529:         break;",
          "",
          "[Removed Lines]",
          "10509:         EmitBinaryOpnds(pnode->sxBin.pnode1, pnode->sxBin.pnode2, byteCodeGenerator, funcInfo);",
          "10511:         Js::RegSlot callObjLocation = pnode->sxBin.pnode1->location;",
          "10514:         if (ByteCodeGenerator::IsSuper(pnode->sxBin.pnode1))",
          "10516:             Emit(pnode->sxSuperReference.pnodeThis, byteCodeGenerator, funcInfo, false);",
          "10518:             funcInfo->ReleaseLoc(pnode->sxSuperReference.pnodeThis);",
          "10521:         funcInfo->ReleaseLoc(pnode->sxBin.pnode2);",
          "10522:         funcInfo->ReleaseLoc(pnode->sxBin.pnode1);",
          "10526:             Js::OpCode::LdElemI_A, pnode->location, protoLocation, pnode->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "10507:         EmitBinaryOpnds(pnode->AsParseNodeBin()->pnode1, pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo);",
          "10509:         Js::RegSlot callObjLocation = pnode->AsParseNodeBin()->pnode1->location;",
          "10512:         if (ByteCodeGenerator::IsSuper(pnode->AsParseNodeBin()->pnode1))",
          "10514:             Emit(pnode->AsParseNodeSuperReference()->pnodeThis, byteCodeGenerator, funcInfo, false);",
          "10516:             funcInfo->ReleaseLoc(pnode->AsParseNodeSuperReference()->pnodeThis);",
          "10519:         funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode2);",
          "10520:         funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode1);",
          "10524:             Js::OpCode::LdElemI_A, pnode->location, protoLocation, pnode->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 267 ---",
          "[Context before]",
          "10532:     case knopDot:",
          "10533:     {",
          "10536:         funcInfo->AcquireLoc(pnode);",
          "10540:         Js::RegSlot protoLocation = callObjLocation;",
          "10542:         if (propertyId == Js::PropertyIds::length)",
          "",
          "[Removed Lines]",
          "10534:         Emit(pnode->sxBin.pnode1, byteCodeGenerator, funcInfo, false);",
          "10535:         funcInfo->ReleaseLoc(pnode->sxBin.pnode1);",
          "10537:         Js::PropertyId propertyId = pnode->sxBin.pnode2->sxPid.PropertyIdFromNameNode();",
          "10539:         Js::RegSlot callObjLocation = pnode->sxBin.pnode1->location;",
          "",
          "[Added Lines]",
          "10532:         Emit(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, false);",
          "10533:         funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode1);",
          "10535:         Js::PropertyId propertyId = pnode->AsParseNodeBin()->pnode2->AsParseNodePid()->PropertyIdFromNameNode();",
          "10537:         Js::RegSlot callObjLocation = pnode->AsParseNodeBin()->pnode1->location;",
          "",
          "---------------",
          "--- Hunk 268 ---",
          "[Context before]",
          "10546:         }",
          "10547:         else if (pnode->IsCallApplyTargetLoad())",
          "10548:         {",
          "10550:             {",
          "10552:                 protoLocation = byteCodeGenerator->EmitLdObjProto(Js::OpCode::LdHomeObjProto, callObjLocation, funcInfo);",
          "10554:             }",
          "10555:             uint cacheId = funcInfo->FindOrAddInlineCacheId(protoLocation, propertyId, false, false);",
          "10556:             byteCodeGenerator->Writer()->PatchableProperty(Js::OpCode::LdFldForCallApplyTarget, pnode->location, protoLocation, cacheId);",
          "10557:         }",
          "10558:         else",
          "10559:         {",
          "10561:             {",
          "10563:                 protoLocation = byteCodeGenerator->EmitLdObjProto(Js::OpCode::LdHomeObjProto, callObjLocation, funcInfo);",
          "10565:                 uint cacheId = funcInfo->FindOrAddInlineCacheId(protoLocation, propertyId, false, false);",
          "10567:             }",
          "10568:             else",
          "10569:             {",
          "",
          "[Removed Lines]",
          "10549:             if (ByteCodeGenerator::IsSuper(pnode->sxBin.pnode1))",
          "10551:                 Emit(pnode->sxSuperReference.pnodeThis, byteCodeGenerator, funcInfo, false);",
          "10553:                 funcInfo->ReleaseLoc(pnode->sxSuperReference.pnodeThis);",
          "10560:             if (ByteCodeGenerator::IsSuper(pnode->sxBin.pnode1))",
          "10562:                 Emit(pnode->sxSuperReference.pnodeThis, byteCodeGenerator, funcInfo, false);",
          "10564:                 funcInfo->ReleaseLoc(pnode->sxSuperReference.pnodeThis);",
          "10566:                 byteCodeGenerator->Writer()->PatchablePropertyWithThisPtr(Js::OpCode::LdSuperFld, pnode->location, protoLocation, pnode->sxSuperReference.pnodeThis->location, cacheId, isConstructorCall);",
          "",
          "[Added Lines]",
          "10547:             if (ByteCodeGenerator::IsSuper(pnode->AsParseNodeBin()->pnode1))",
          "10549:                 Emit(pnode->AsParseNodeSuperReference()->pnodeThis, byteCodeGenerator, funcInfo, false);",
          "10551:                 funcInfo->ReleaseLoc(pnode->AsParseNodeSuperReference()->pnodeThis);",
          "10558:             if (ByteCodeGenerator::IsSuper(pnode->AsParseNodeBin()->pnode1))",
          "10560:                 Emit(pnode->AsParseNodeSuperReference()->pnodeThis, byteCodeGenerator, funcInfo, false);",
          "10562:                 funcInfo->ReleaseLoc(pnode->AsParseNodeSuperReference()->pnodeThis);",
          "10564:                 byteCodeGenerator->Writer()->PatchablePropertyWithThisPtr(Js::OpCode::LdSuperFld, pnode->location, protoLocation, pnode->AsParseNodeSuperReference()->pnodeThis->location, cacheId, isConstructorCall);",
          "",
          "---------------",
          "--- Hunk 269 ---",
          "[Context before]",
          "10579:     case knopAsg:",
          "10580:     {",
          "10583:         byteCodeGenerator->StartStatement(pnode);",
          "10584:         if (pnode->isUsed || fReturnValue)",
          "10585:         {",
          "",
          "[Removed Lines]",
          "10581:         ParseNode *lhs = pnode->sxBin.pnode1;",
          "10582:         ParseNode *rhs = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "10579:         ParseNode *lhs = pnode->AsParseNodeBin()->pnode1;",
          "10580:         ParseNode *rhs = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 270 ---",
          "[Context before]",
          "10612:         }",
          "10613:         else",
          "10614:         {",
          "10616:         }",
          "10617:         break;",
          "",
          "[Removed Lines]",
          "10615:             byteCodeGenerator->EmitPropLoad(pnode->location, pnode->sxPid.sym, pnode->sxPid.pid, funcInfo);",
          "",
          "[Added Lines]",
          "10613:             byteCodeGenerator->EmitPropLoad(pnode->location, pnode->AsParseNodePid()->sym, pnode->AsParseNodePid()->pid, funcInfo);",
          "",
          "---------------",
          "--- Hunk 271 ---",
          "[Context before]",
          "10621:         STARTSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10625:         pnode1->isUsed = false;",
          "10626:         if (pnode1->nop == knopComma)",
          "10627:         {",
          "",
          "[Removed Lines]",
          "10624:         ParseNode *pnode1 = pnode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "10622:         ParseNode *pnode1 = pnode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 272 ---",
          "[Context before]",
          "10632:             SList<ParseNode *> rhsStack(alloc);",
          "10633:             do",
          "10634:             {",
          "10637:                 pnode1->isUsed = false;",
          "10638:             } while (pnode1->nop == knopComma);",
          "",
          "[Removed Lines]",
          "10635:                 rhsStack.Push(pnode1->sxBin.pnode2);",
          "10636:                 pnode1 = pnode1->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "10633:                 rhsStack.Push(pnode1->AsParseNodeBin()->pnode2);",
          "10634:                 pnode1 = pnode1->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 273 ---",
          "[Context before]",
          "10665:         }",
          "10666:         funcInfo->ReleaseLoc(pnode1);",
          "10671:         funcInfo->AcquireLoc(pnode);",
          "10673:         {",
          "10675:         }",
          "10676:         ENDSTATEMENET_IFTOPLEVEL(isTopLevel, pnode);",
          "10677:     }",
          "",
          "[Removed Lines]",
          "10668:         pnode->sxBin.pnode2->isUsed = pnode->isUsed || fReturnValue;",
          "10669:         Emit(pnode->sxBin.pnode2, byteCodeGenerator, funcInfo, false);",
          "10670:         funcInfo->ReleaseLoc(pnode->sxBin.pnode2);",
          "10672:         if (pnode->sxBin.pnode2->isUsed && pnode->location != pnode->sxBin.pnode2->location)",
          "10674:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->sxBin.pnode2->location);",
          "",
          "[Added Lines]",
          "10666:         pnode->AsParseNodeBin()->pnode2->isUsed = pnode->isUsed || fReturnValue;",
          "10667:         Emit(pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo, false);",
          "10668:         funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode2);",
          "10670:         if (pnode->AsParseNodeBin()->pnode2->isUsed && pnode->location != pnode->AsParseNodeBin()->pnode2->location)",
          "10672:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->AsParseNodeBin()->pnode2->location);",
          "",
          "---------------",
          "--- Hunk 274 ---",
          "[Context before]",
          "10712:         Js::ByteCodeLabel trueLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "10713:         Js::ByteCodeLabel falseLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "10714:         Js::ByteCodeLabel skipLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "10716:         byteCodeGenerator->Writer()->MarkLabel(trueLabel);",
          "10722:         funcInfo->AcquireLoc(pnode);",
          "10729:         byteCodeGenerator->Writer()->RecordStatementAdjustment(Js::FunctionBody::SAT_FromCurrentToNext);",
          "",
          "[Removed Lines]",
          "10715:         EmitBooleanExpression(pnode->sxTri.pnode1, trueLabel, falseLabel, byteCodeGenerator, funcInfo);",
          "10717:         funcInfo->ReleaseLoc(pnode->sxTri.pnode1);",
          "10724:         Emit(pnode->sxTri.pnode2, byteCodeGenerator, funcInfo, false);",
          "10725:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->sxTri.pnode2->location);",
          "10726:         funcInfo->ReleaseLoc(pnode->sxTri.pnode2);",
          "",
          "[Added Lines]",
          "10713:         EmitBooleanExpression(pnode->AsParseNodeTri()->pnode1, trueLabel, falseLabel, byteCodeGenerator, funcInfo);",
          "10715:         funcInfo->ReleaseLoc(pnode->AsParseNodeTri()->pnode1);",
          "10722:         Emit(pnode->AsParseNodeTri()->pnode2, byteCodeGenerator, funcInfo, false);",
          "10723:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->AsParseNodeTri()->pnode2->location);",
          "10724:         funcInfo->ReleaseLoc(pnode->AsParseNodeTri()->pnode2);",
          "",
          "---------------",
          "--- Hunk 275 ---",
          "[Context before]",
          "10731:         byteCodeGenerator->Writer()->Br(skipLabel);",
          "10733:         byteCodeGenerator->Writer()->MarkLabel(falseLabel);",
          "10738:         byteCodeGenerator->Writer()->MarkLabel(skipLabel);",
          "",
          "[Removed Lines]",
          "10734:         Emit(pnode->sxTri.pnode3, byteCodeGenerator, funcInfo, false);",
          "10735:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->sxTri.pnode3->location);",
          "10736:         funcInfo->ReleaseLoc(pnode->sxTri.pnode3);",
          "",
          "[Added Lines]",
          "10732:         Emit(pnode->AsParseNodeTri()->pnode3, byteCodeGenerator, funcInfo, false);",
          "10733:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->AsParseNodeTri()->pnode3->location);",
          "10734:         funcInfo->ReleaseLoc(pnode->AsParseNodeTri()->pnode3);",
          "",
          "---------------",
          "--- Hunk 276 ---",
          "[Context before]",
          "10755:         byteCodeGenerator->StartStatement(pnode);",
          "10759:         {",
          "10761:             funcInfo->AcquireLoc(pnode);",
          "10771:         }",
          "10772:         else",
          "10773:         {",
          "10781:         }",
          "10784:         byteCodeGenerator->EndStatement(pnode);",
          "10785:         break;",
          "",
          "[Removed Lines]",
          "10758:         if (pnode->isUsed || fReturnValue || funcInfo->RegIsConst(pnode->sxBin.pnode1->location))",
          "10764:             EmitBinaryReference(pnode->sxBin.pnode1, pnode->sxBin.pnode2, byteCodeGenerator, funcInfo, true);",
          "10765:             funcInfo->ReleaseLoc(pnode->sxBin.pnode2);",
          "10767:             byteCodeGenerator->Writer()->Reg3(nopToOp[pnode->nop], pnode->location, pnode->sxBin.pnode1->location,",
          "10768:                 pnode->sxBin.pnode2->location);",
          "10770:             EmitAssignment(pnode, pnode->sxBin.pnode1, pnode->location, byteCodeGenerator, funcInfo);",
          "10775:             EmitBinaryReference(pnode->sxBin.pnode1, pnode->sxBin.pnode2, byteCodeGenerator, funcInfo, true);",
          "10776:             funcInfo->ReleaseLoc(pnode->sxBin.pnode2);",
          "10778:             byteCodeGenerator->Writer()->Reg3(nopToOp[pnode->nop], pnode->sxBin.pnode1->location, pnode->sxBin.pnode1->location,",
          "10779:                 pnode->sxBin.pnode2->location);",
          "10780:             EmitAssignment(nullptr, pnode->sxBin.pnode1, pnode->sxBin.pnode1->location, byteCodeGenerator, funcInfo);",
          "10782:         funcInfo->ReleaseLoad(pnode->sxBin.pnode1);",
          "",
          "[Added Lines]",
          "10756:         if (pnode->isUsed || fReturnValue || funcInfo->RegIsConst(pnode->AsParseNodeBin()->pnode1->location))",
          "10762:             EmitBinaryReference(pnode->AsParseNodeBin()->pnode1, pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo, true);",
          "10763:             funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode2);",
          "10765:             byteCodeGenerator->Writer()->Reg3(nopToOp[pnode->nop], pnode->location, pnode->AsParseNodeBin()->pnode1->location,",
          "10766:                 pnode->AsParseNodeBin()->pnode2->location);",
          "10768:             EmitAssignment(pnode, pnode->AsParseNodeBin()->pnode1, pnode->location, byteCodeGenerator, funcInfo);",
          "10773:             EmitBinaryReference(pnode->AsParseNodeBin()->pnode1, pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, funcInfo, true);",
          "10774:             funcInfo->ReleaseLoc(pnode->AsParseNodeBin()->pnode2);",
          "10776:             byteCodeGenerator->Writer()->Reg3(nopToOp[pnode->nop], pnode->AsParseNodeBin()->pnode1->location, pnode->AsParseNodeBin()->pnode1->location,",
          "10777:                 pnode->AsParseNodeBin()->pnode2->location);",
          "10778:             EmitAssignment(nullptr, pnode->AsParseNodeBin()->pnode1, pnode->AsParseNodeBin()->pnode1->location, byteCodeGenerator, funcInfo);",
          "10780:         funcInfo->ReleaseLoad(pnode->AsParseNodeBin()->pnode1);",
          "",
          "---------------",
          "--- Hunk 277 ---",
          "[Context before]",
          "10789:     case knopTempRef:",
          "10791:         funcInfo->AcquireLoc(pnode);",
          "10793:         break;",
          "10795:     case knopTemp:",
          "10798:         {",
          "10799:             byteCodeGenerator->StartStatement(pnode);",
          "10803:             byteCodeGenerator->EndStatement(pnode);",
          "10804:         }",
          "10805:         break;",
          "",
          "[Removed Lines]",
          "10792:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->sxUni.pnode1->location);",
          "10797:         if (pnode->sxVar.pnodeInit != nullptr)",
          "10800:             Emit(pnode->sxVar.pnodeInit, byteCodeGenerator, funcInfo, false);",
          "10801:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->sxVar.pnodeInit->location);",
          "10802:             funcInfo->ReleaseLoc(pnode->sxVar.pnodeInit);",
          "",
          "[Added Lines]",
          "10790:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->AsParseNodeUni()->pnode1->location);",
          "10795:         if (pnode->AsParseNodeVar()->pnodeInit != nullptr)",
          "10798:             Emit(pnode->AsParseNodeVar()->pnodeInit, byteCodeGenerator, funcInfo, false);",
          "10799:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, pnode->location, pnode->AsParseNodeVar()->pnodeInit->location);",
          "10800:             funcInfo->ReleaseLoc(pnode->AsParseNodeVar()->pnodeInit);",
          "",
          "---------------",
          "--- Hunk 278 ---",
          "[Context before]",
          "10809:     case knopLetDecl:",
          "10810:     {",
          "10813:         AssertMsg(pnode->nop != knopConstDecl || initNode != nullptr, \"knopConstDecl expected to have an initializer\");",
          "10815:         if (initNode != nullptr || pnode->nop == knopLetDecl)",
          "10816:         {",
          "10818:             Js::RegSlot rhsLocation;",
          "10820:             byteCodeGenerator->StartStatement(pnode);",
          "",
          "[Removed Lines]",
          "10812:         ParseNodePtr initNode = pnode->sxVar.pnodeInit;",
          "10817:             Symbol *sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "10810:         ParseNodePtr initNode = pnode->AsParseNodeVar()->pnodeInit;",
          "10815:             Symbol *sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 279 ---",
          "[Context before]",
          "10857:     case knopFncDecl:",
          "10860:         {",
          "10861:             byteCodeGenerator->DefineOneFunction(pnode, funcInfo, false);",
          "10862:         }",
          "",
          "[Removed Lines]",
          "10859:         if (!pnode->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "10857:         if (!pnode->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 280 ---",
          "[Context before]",
          "10866:     {",
          "10867:         funcInfo->AcquireLoc(pnode);",
          "10876:         {",
          "10880:         }",
          "10886:         {",
          "10890:         }",
          "10891:         else",
          "10892:         {",
          "",
          "[Removed Lines]",
          "10869:         Assert(pnode->sxClass.pnodeConstructor);",
          "10870:         pnode->sxClass.pnodeConstructor->location = pnode->location;",
          "10872:         BeginEmitBlock(pnode->sxClass.pnodeBlock, byteCodeGenerator, funcInfo);",
          "10875:         if (pnode->sxClass.pnodeExtends)",
          "10879:             Emit(pnode->sxClass.pnodeExtends, byteCodeGenerator, funcInfo, false);",
          "10883:         Emit(pnode->sxClass.pnodeConstructor, byteCodeGenerator, funcInfo, false);",
          "10884:         EmitComputedFunctionNameVar(bindPnode, pnode->sxClass.pnodeConstructor, byteCodeGenerator);",
          "10885:         if (pnode->sxClass.pnodeExtends)",
          "10887:             byteCodeGenerator->StartStatement(pnode->sxClass.pnodeExtends);",
          "10888:             byteCodeGenerator->Writer()->InitClass(pnode->location, pnode->sxClass.pnodeExtends->location);",
          "10889:             byteCodeGenerator->EndStatement(pnode->sxClass.pnodeExtends);",
          "",
          "[Added Lines]",
          "10867:         Assert(pnode->AsParseNodeClass()->pnodeConstructor);",
          "10868:         pnode->AsParseNodeClass()->pnodeConstructor->location = pnode->location;",
          "10870:         BeginEmitBlock(pnode->AsParseNodeClass()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "10873:         if (pnode->AsParseNodeClass()->pnodeExtends)",
          "10877:             Emit(pnode->AsParseNodeClass()->pnodeExtends, byteCodeGenerator, funcInfo, false);",
          "10881:         Emit(pnode->AsParseNodeClass()->pnodeConstructor, byteCodeGenerator, funcInfo, false);",
          "10882:         EmitComputedFunctionNameVar(bindPnode, pnode->AsParseNodeClass()->pnodeConstructor, byteCodeGenerator);",
          "10883:         if (pnode->AsParseNodeClass()->pnodeExtends)",
          "10885:             byteCodeGenerator->StartStatement(pnode->AsParseNodeClass()->pnodeExtends);",
          "10886:             byteCodeGenerator->Writer()->InitClass(pnode->location, pnode->AsParseNodeClass()->pnodeExtends->location);",
          "10887:             byteCodeGenerator->EndStatement(pnode->AsParseNodeClass()->pnodeExtends);",
          "",
          "---------------",
          "--- Hunk 281 ---",
          "[Context before]",
          "10899:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::SetHomeObj, pnode->location, protoLoc);",
          "10906:         funcInfo->ReleaseTmpRegister(protoLoc);",
          "10910:         {",
          "10912:             sym->SetNeedDeclaration(false);",
          "10913:             byteCodeGenerator->EmitPropStore(pnode->location, sym, nullptr, funcInfo, false, true);",
          "10914:         }",
          "10919:         {",
          "10921:         }",
          "10924:         {",
          "10926:             sym->SetNeedDeclaration(false);",
          "10927:             byteCodeGenerator->EmitPropStore(pnode->location, sym, nullptr, funcInfo, true, false);",
          "10928:         }",
          "10931:         {",
          "10932:             byteCodeGenerator->EmitAssignmentToDefaultModuleExport(pnode, funcInfo);",
          "10933:         }",
          "",
          "[Removed Lines]",
          "10902:         EmitClassInitializers(pnode->sxClass.pnodeStaticMembers, pnode->location, byteCodeGenerator, funcInfo, pnode, /*isObjectEmpty*/ false);",
          "10905:         EmitClassInitializers(pnode->sxClass.pnodeMembers, protoLoc, byteCodeGenerator, funcInfo, pnode, /*isObjectEmpty*/ true);",
          "10909:         if (pnode->sxClass.pnodeName)",
          "10911:             Symbol * sym = pnode->sxClass.pnodeName->sxVar.sym;",
          "10916:         EndEmitBlock(pnode->sxClass.pnodeBlock, byteCodeGenerator, funcInfo);",
          "10918:         if (pnode->sxClass.pnodeExtends)",
          "10920:             funcInfo->ReleaseLoc(pnode->sxClass.pnodeExtends);",
          "10923:         if (pnode->sxClass.pnodeDeclName)",
          "10925:             Symbol * sym = pnode->sxClass.pnodeDeclName->sxVar.sym;",
          "10930:         if (pnode->sxClass.IsDefaultModuleExport())",
          "",
          "[Added Lines]",
          "10900:         EmitClassInitializers(pnode->AsParseNodeClass()->pnodeStaticMembers, pnode->location, byteCodeGenerator, funcInfo, pnode, /*isObjectEmpty*/ false);",
          "10903:         EmitClassInitializers(pnode->AsParseNodeClass()->pnodeMembers, protoLoc, byteCodeGenerator, funcInfo, pnode, /*isObjectEmpty*/ true);",
          "10907:         if (pnode->AsParseNodeClass()->pnodeName)",
          "10909:             Symbol * sym = pnode->AsParseNodeClass()->pnodeName->AsParseNodeVar()->sym;",
          "10914:         EndEmitBlock(pnode->AsParseNodeClass()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "10916:         if (pnode->AsParseNodeClass()->pnodeExtends)",
          "10918:             funcInfo->ReleaseLoc(pnode->AsParseNodeClass()->pnodeExtends);",
          "10921:         if (pnode->AsParseNodeClass()->pnodeDeclName)",
          "10923:             Symbol * sym = pnode->AsParseNodeClass()->pnodeDeclName->AsParseNodeVar()->sym;",
          "10928:         if (pnode->AsParseNodeClass()->IsDefaultModuleExport())",
          "",
          "---------------",
          "--- Hunk 282 ---",
          "[Context before]",
          "10977:         break;",
          "10979:     case knopFor:",
          "10981:         {",
          "10983:         }",
          "10984:         else",
          "10985:         {",
          "10989:             if (byteCodeGenerator->IsES6ForLoopSemanticsEnabled())",
          "10990:             {",
          "10992:             }",
          "10993:             EmitLoop(pnode,",
          "10997:                 byteCodeGenerator,",
          "10998:                 funcInfo,",
          "10999:                 fReturnValue,",
          "11000:                 FALSE,",
          "11003:         }",
          "11004:         break;",
          "",
          "[Removed Lines]",
          "10980:         if (pnode->sxFor.pnodeInverted != nullptr)",
          "10982:             byteCodeGenerator->EmitInvertedLoop(pnode, pnode->sxFor.pnodeInverted, funcInfo);",
          "10986:             BeginEmitBlock(pnode->sxFor.pnodeBlock, byteCodeGenerator, funcInfo);",
          "10987:             Emit(pnode->sxFor.pnodeInit, byteCodeGenerator, funcInfo, false);",
          "10988:             funcInfo->ReleaseLoc(pnode->sxFor.pnodeInit);",
          "10991:                 CloneEmitBlock(pnode->sxFor.pnodeBlock, byteCodeGenerator, funcInfo);",
          "10994:                 pnode->sxFor.pnodeCond,",
          "10995:                 pnode->sxFor.pnodeBody,",
          "10996:                 pnode->sxFor.pnodeIncr,",
          "11001:                 pnode->sxFor.pnodeBlock);",
          "11002:             EndEmitBlock(pnode->sxFor.pnodeBlock, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "10978:         if (pnode->AsParseNodeFor()->pnodeInverted != nullptr)",
          "10980:             byteCodeGenerator->EmitInvertedLoop(pnode, pnode->AsParseNodeFor()->pnodeInverted, funcInfo);",
          "10984:             BeginEmitBlock(pnode->AsParseNodeFor()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "10985:             Emit(pnode->AsParseNodeFor()->pnodeInit, byteCodeGenerator, funcInfo, false);",
          "10986:             funcInfo->ReleaseLoc(pnode->AsParseNodeFor()->pnodeInit);",
          "10989:                 CloneEmitBlock(pnode->AsParseNodeFor()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "10992:                 pnode->AsParseNodeFor()->pnodeCond,",
          "10993:                 pnode->AsParseNodeFor()->pnodeBody,",
          "10994:                 pnode->AsParseNodeFor()->pnodeIncr,",
          "10999:                 pnode->AsParseNodeFor()->pnodeBlock);",
          "11000:             EndEmitBlock(pnode->AsParseNodeFor()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 283 ---",
          "[Context before]",
          "11010:         Js::ByteCodeLabel trueLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "11011:         Js::ByteCodeLabel falseLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "11015:         byteCodeGenerator->EndStatement(pnode);",
          "11017:         byteCodeGenerator->Writer()->MarkLabel(trueLabel);",
          "11021:         {",
          "11023:             Js::ByteCodeLabel skipLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "",
          "[Removed Lines]",
          "11012:         EmitBooleanExpression(pnode->sxIf.pnodeCond, trueLabel, falseLabel, byteCodeGenerator, funcInfo);",
          "11013:         funcInfo->ReleaseLoc(pnode->sxIf.pnodeCond);",
          "11018:         Emit(pnode->sxIf.pnodeTrue, byteCodeGenerator, funcInfo, fReturnValue);",
          "11019:         funcInfo->ReleaseLoc(pnode->sxIf.pnodeTrue);",
          "11020:         if (pnode->sxIf.pnodeFalse != nullptr)",
          "",
          "[Added Lines]",
          "11010:         EmitBooleanExpression(pnode->AsParseNodeIf()->pnodeCond, trueLabel, falseLabel, byteCodeGenerator, funcInfo);",
          "11011:         funcInfo->ReleaseLoc(pnode->AsParseNodeIf()->pnodeCond);",
          "11016:         Emit(pnode->AsParseNodeIf()->pnodeTrue, byteCodeGenerator, funcInfo, fReturnValue);",
          "11017:         funcInfo->ReleaseLoc(pnode->AsParseNodeIf()->pnodeTrue);",
          "11018:         if (pnode->AsParseNodeIf()->pnodeFalse != nullptr)",
          "",
          "---------------",
          "--- Hunk 284 ---",
          "[Context before]",
          "11029:             byteCodeGenerator->Writer()->Br(skipLabel);",
          "11031:             byteCodeGenerator->Writer()->MarkLabel(falseLabel);",
          "11034:             byteCodeGenerator->Writer()->MarkLabel(skipLabel);",
          "11035:         }",
          "11036:         else",
          "",
          "[Removed Lines]",
          "11032:             Emit(pnode->sxIf.pnodeFalse, byteCodeGenerator, funcInfo, fReturnValue);",
          "11033:             funcInfo->ReleaseLoc(pnode->sxIf.pnodeFalse);",
          "",
          "[Added Lines]",
          "11030:             Emit(pnode->AsParseNodeIf()->pnodeFalse, byteCodeGenerator, funcInfo, fReturnValue);",
          "11031:             funcInfo->ReleaseLoc(pnode->AsParseNodeIf()->pnodeFalse);",
          "",
          "---------------",
          "--- Hunk 285 ---",
          "[Context before]",
          "11041:         if (pnode->emitLabels)",
          "11042:         {",
          "11044:         }",
          "11045:         break;",
          "11046:     }",
          "11047:     case knopWhile:",
          "11048:         EmitLoop(pnode,",
          "11051:             nullptr,",
          "11052:             byteCodeGenerator,",
          "11053:             funcInfo,",
          "",
          "[Removed Lines]",
          "11043:             byteCodeGenerator->Writer()->MarkLabel(pnode->sxStmt.breakLabel);",
          "11049:             pnode->sxWhile.pnodeCond,",
          "11050:             pnode->sxWhile.pnodeBody,",
          "",
          "[Added Lines]",
          "11041:             byteCodeGenerator->Writer()->MarkLabel(pnode->AsParseNodeStmt()->breakLabel);",
          "11047:             pnode->AsParseNodeWhile()->pnodeCond,",
          "11048:             pnode->AsParseNodeWhile()->pnodeBody,",
          "",
          "---------------",
          "--- Hunk 286 ---",
          "[Context before]",
          "11057:     case knopDoWhile:",
          "11058:         EmitLoop(pnode,",
          "11061:             nullptr,",
          "11062:             byteCodeGenerator,",
          "11063:             funcInfo,",
          "",
          "[Removed Lines]",
          "11059:             pnode->sxWhile.pnodeCond,",
          "11060:             pnode->sxWhile.pnodeBody,",
          "",
          "[Added Lines]",
          "11057:             pnode->AsParseNodeWhile()->pnodeCond,",
          "11058:             pnode->AsParseNodeWhile()->pnodeBody,",
          "",
          "---------------",
          "--- Hunk 287 ---",
          "[Context before]",
          "11075:     case knopReturn:",
          "11076:         byteCodeGenerator->StartStatement(pnode);",
          "11078:         {",
          "11080:             {",
          "11083:             }",
          "11086:             {",
          "11088:             }",
          "11089:             funcInfo->GetParsedFunctionBody()->SetHasNoExplicitReturnValue(false);",
          "11090:         }",
          "",
          "[Removed Lines]",
          "11077:         if (pnode->sxReturn.pnodeExpr != nullptr)",
          "11079:             if (pnode->sxReturn.pnodeExpr->location == Js::Constants::NoRegister)",
          "11082:                 pnode->sxReturn.pnodeExpr->location = ByteCodeGenerator::ReturnRegister;",
          "11084:             Emit(pnode->sxReturn.pnodeExpr, byteCodeGenerator, funcInfo, fReturnValue);",
          "11085:             if (pnode->sxReturn.pnodeExpr->location != ByteCodeGenerator::ReturnRegister)",
          "11087:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, ByteCodeGenerator::ReturnRegister, pnode->sxReturn.pnodeExpr->location);",
          "",
          "[Added Lines]",
          "11075:         if (pnode->AsParseNodeReturn()->pnodeExpr != nullptr)",
          "11077:             if (pnode->AsParseNodeReturn()->pnodeExpr->location == Js::Constants::NoRegister)",
          "11080:                 pnode->AsParseNodeReturn()->pnodeExpr->location = ByteCodeGenerator::ReturnRegister;",
          "11082:             Emit(pnode->AsParseNodeReturn()->pnodeExpr, byteCodeGenerator, funcInfo, fReturnValue);",
          "11083:             if (pnode->AsParseNodeReturn()->pnodeExpr->location != ByteCodeGenerator::ReturnRegister)",
          "11085:                 byteCodeGenerator->Writer()->Reg2(Js::OpCode::Ld_A, ByteCodeGenerator::ReturnRegister, pnode->AsParseNodeReturn()->pnodeExpr->location);",
          "",
          "---------------",
          "--- Hunk 288 ---",
          "[Context before]",
          "11123:             byteCodeGenerator->Writer()->MarkLabel(returnExprLabel);",
          "11124:         }",
          "11126:         {",
          "11127:             EmitJumpCleanup(pnode, nullptr, byteCodeGenerator, funcInfo);",
          "11128:         }",
          "",
          "[Removed Lines]",
          "11125:         if (pnode->sxStmt.grfnop & fnopCleanup)",
          "",
          "[Added Lines]",
          "11123:         if (pnode->AsParseNodeStmt()->grfnop & fnopCleanup)",
          "",
          "---------------",
          "--- Hunk 289 ---",
          "[Context before]",
          "11132:         break;",
          "11134:     case knopBlock:",
          "11136:         {",
          "11137:             EmitBlock(pnode, byteCodeGenerator, funcInfo, fReturnValue);",
          "11138:             if (pnode->emitLabels)",
          "11139:             {",
          "11141:             }",
          "11142:         }",
          "11143:         break;",
          "11145:     case knopWith:",
          "11146:     {",
          "11148:         byteCodeGenerator->StartStatement(pnode);",
          "11151:         funcInfo->AcquireLoc(pnode);",
          "11154:         Js::RegSlot regVal = (byteCodeGenerator->GetScriptContext()->GetConfig()->IsES6UnscopablesEnabled()) ? funcInfo->AcquireTmpRegister() : pnode->location;",
          "11156:         if (byteCodeGenerator->GetScriptContext()->GetConfig()->IsES6UnscopablesEnabled())",
          "11157:         {",
          "11158:             byteCodeGenerator->Writer()->Reg2(Js::OpCode::NewWithObject, pnode->location, regVal);",
          "",
          "[Removed Lines]",
          "11135:         if (pnode->sxBlock.pnodeStmt != nullptr)",
          "11140:                 byteCodeGenerator->Writer()->MarkLabel(pnode->sxStmt.breakLabel);",
          "11147:         Assert(pnode->sxWith.pnodeObj != nullptr);",
          "11152:         Emit(pnode->sxWith.pnodeObj, byteCodeGenerator, funcInfo, false);",
          "11155:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Obj, regVal, pnode->sxWith.pnodeObj->location);",
          "",
          "[Added Lines]",
          "11133:         if (pnode->AsParseNodeBlock()->pnodeStmt != nullptr)",
          "11138:                 byteCodeGenerator->Writer()->MarkLabel(pnode->AsParseNodeStmt()->breakLabel);",
          "11145:         Assert(pnode->AsParseNodeWith()->pnodeObj != nullptr);",
          "11150:         Emit(pnode->AsParseNodeWith()->pnodeObj, byteCodeGenerator, funcInfo, false);",
          "11153:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::Conv_Obj, regVal, pnode->AsParseNodeWith()->pnodeObj->location);",
          "",
          "---------------",
          "--- Hunk 290 ---",
          "[Context before]",
          "11165:             WritePerfHint(PerfHints::HasWithBlock, funcInfo->byteCodeFunction->GetFunctionBody(), byteCodeGenerator->Writer()->GetCurrentOffset() - 1);",
          "11166:         }",
          "11167: #endif",
          "11169:         {",
          "11171:             scope->SetLocation(pnode->location);",
          "11172:             byteCodeGenerator->PushScope(scope);",
          "",
          "[Removed Lines]",
          "11168:         if (pnode->sxWith.pnodeBody != nullptr)",
          "11170:             Scope *scope = pnode->sxWith.scope;",
          "",
          "[Added Lines]",
          "11166:         if (pnode->AsParseNodeWith()->pnodeBody != nullptr)",
          "11168:             Scope *scope = pnode->AsParseNodeWith()->scope;",
          "",
          "---------------",
          "--- Hunk 291 ---",
          "[Context before]",
          "11178:                 byteCodeGenerator->Writer()->AddPropertyToDebuggerScope(debuggerScope, regVal, Js::Constants::NoProperty, /*shouldConsumeRegister*/ true, Js::DebuggerScopePropertyFlags_WithObject);",
          "11179:             }",
          "11183:             byteCodeGenerator->PopScope();",
          "11185:             byteCodeGenerator->RecordEndScopeObject(pnode);",
          "11186:         }",
          "11187:         if (pnode->emitLabels)",
          "11188:         {",
          "11190:         }",
          "11191:         if (byteCodeGenerator->GetScriptContext()->GetConfig()->IsES6UnscopablesEnabled())",
          "11192:         {",
          "11193:             funcInfo->ReleaseTmpRegister(regVal);",
          "11194:         }",
          "11196:         break;",
          "11197:     }",
          "11199:     case knopBreak:",
          "11201:         byteCodeGenerator->StartStatement(pnode);",
          "11203:         {",
          "11205:         }",
          "11207:         if (pnode->emitLabels)",
          "11208:         {",
          "11210:         }",
          "11211:         byteCodeGenerator->EndStatement(pnode);",
          "11212:         break;",
          "11213:     case knopContinue:",
          "11215:         byteCodeGenerator->StartStatement(pnode);",
          "11217:         {",
          "11219:         }",
          "11221:         byteCodeGenerator->EndStatement(pnode);",
          "11222:         break;",
          "11224:     case knopSwitch:",
          "11225:     {",
          "11226:         BOOL fHasDefault = false;",
          "11228:         byteCodeGenerator->StartStatement(pnode);",
          "11231:         Js::RegSlot regVal = funcInfo->AcquireTmpRegister();",
          "11237:         byteCodeGenerator->EndStatement(pnode);",
          "",
          "[Removed Lines]",
          "11181:             Emit(pnode->sxWith.pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11182:             funcInfo->ReleaseLoc(pnode->sxWith.pnodeBody);",
          "11189:             byteCodeGenerator->Writer()->MarkLabel(pnode->sxStmt.breakLabel);",
          "11195:         funcInfo->ReleaseLoc(pnode->sxWith.pnodeObj);",
          "11200:         Assert(pnode->sxJump.pnodeTarget->emitLabels);",
          "11202:         if (pnode->sxStmt.grfnop & fnopCleanup)",
          "11204:             EmitJumpCleanup(pnode, pnode->sxJump.pnodeTarget, byteCodeGenerator, funcInfo);",
          "11206:         byteCodeGenerator->Writer()->Br(pnode->sxJump.pnodeTarget->sxStmt.breakLabel);",
          "11209:             byteCodeGenerator->Writer()->MarkLabel(pnode->sxStmt.breakLabel);",
          "11214:         Assert(pnode->sxJump.pnodeTarget->emitLabels);",
          "11216:         if (pnode->sxStmt.grfnop & fnopCleanup)",
          "11218:             EmitJumpCleanup(pnode, pnode->sxJump.pnodeTarget, byteCodeGenerator, funcInfo);",
          "11220:         byteCodeGenerator->Writer()->Br(pnode->sxJump.pnodeTarget->sxStmt.continueLabel);",
          "11227:         Assert(pnode->sxSwitch.pnodeVal != nullptr);",
          "11229:         Emit(pnode->sxSwitch.pnodeVal, byteCodeGenerator, funcInfo, false);",
          "11233:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::BeginSwitch, regVal, pnode->sxSwitch.pnodeVal->location);",
          "11235:         BeginEmitBlock(pnode->sxSwitch.pnodeBlock, byteCodeGenerator, funcInfo);",
          "",
          "[Added Lines]",
          "11179:             Emit(pnode->AsParseNodeWith()->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11180:             funcInfo->ReleaseLoc(pnode->AsParseNodeWith()->pnodeBody);",
          "11187:             byteCodeGenerator->Writer()->MarkLabel(pnode->AsParseNodeStmt()->breakLabel);",
          "11193:         funcInfo->ReleaseLoc(pnode->AsParseNodeWith()->pnodeObj);",
          "11198:         Assert(pnode->AsParseNodeJump()->pnodeTarget->emitLabels);",
          "11200:         if (pnode->AsParseNodeStmt()->grfnop & fnopCleanup)",
          "11202:             EmitJumpCleanup(pnode, pnode->AsParseNodeJump()->pnodeTarget, byteCodeGenerator, funcInfo);",
          "11204:         byteCodeGenerator->Writer()->Br(pnode->AsParseNodeJump()->pnodeTarget->AsParseNodeStmt()->breakLabel);",
          "11207:             byteCodeGenerator->Writer()->MarkLabel(pnode->AsParseNodeStmt()->breakLabel);",
          "11212:         Assert(pnode->AsParseNodeJump()->pnodeTarget->emitLabels);",
          "11214:         if (pnode->AsParseNodeStmt()->grfnop & fnopCleanup)",
          "11216:             EmitJumpCleanup(pnode, pnode->AsParseNodeJump()->pnodeTarget, byteCodeGenerator, funcInfo);",
          "11218:         byteCodeGenerator->Writer()->Br(pnode->AsParseNodeJump()->pnodeTarget->AsParseNodeStmt()->continueLabel);",
          "11225:         Assert(pnode->AsParseNodeSwitch()->pnodeVal != nullptr);",
          "11227:         Emit(pnode->AsParseNodeSwitch()->pnodeVal, byteCodeGenerator, funcInfo, false);",
          "11231:         byteCodeGenerator->Writer()->Reg2(Js::OpCode::BeginSwitch, regVal, pnode->AsParseNodeSwitch()->pnodeVal->location);",
          "11233:         BeginEmitBlock(pnode->AsParseNodeSwitch()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "",
          "---------------",
          "--- Hunk 292 ---",
          "[Context before]",
          "11242:         ParseNode *pnodeCase;",
          "11244:         {",
          "11249:             {",
          "11250:                 fHasDefault = true;",
          "11251:                 continue;",
          "11252:             }",
          "11254:             byteCodeGenerator->Writer()->BrReg2(",
          "11257:         }",
          "11260:         if (fHasDefault)",
          "11261:         {",
          "11263:         }",
          "11264:         else",
          "11265:         {",
          "11266:             if (!pnode->emitLabels)",
          "11267:             {",
          "11269:             }",
          "11271:         }",
          "11274:         {",
          "11278:         }",
          "11281:         funcInfo->ReleaseTmpRegister(regVal);",
          "11284:         if (!fHasDefault || pnode->emitLabels)",
          "11285:         {",
          "11287:         }",
          "11288:         break;",
          "11289:     }",
          "",
          "[Removed Lines]",
          "11243:         for (pnodeCase = pnode->sxSwitch.pnodeCases; pnodeCase; pnodeCase = pnodeCase->sxCase.pnodeNext)",
          "11247:             pnodeCase->sxCase.labelCase = byteCodeGenerator->Writer()->DefineLabel();",
          "11248:             if (pnodeCase == pnode->sxSwitch.pnodeDefault)",
          "11253:             Emit(pnodeCase->sxCase.pnodeExpr, byteCodeGenerator, funcInfo, false);",
          "11255:                 Js::OpCode::Case, pnodeCase->sxCase.labelCase, regVal, pnodeCase->sxCase.pnodeExpr->location);",
          "11256:             funcInfo->ReleaseLoc(pnodeCase->sxCase.pnodeExpr);",
          "11262:             byteCodeGenerator->Writer()->Br(Js::OpCode::EndSwitch, pnode->sxSwitch.pnodeDefault->sxCase.labelCase);",
          "11268:                 pnode->sxStmt.breakLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "11270:             byteCodeGenerator->Writer()->Br(Js::OpCode::EndSwitch, pnode->sxStmt.breakLabel);",
          "11273:         for (pnodeCase = pnode->sxSwitch.pnodeCases; pnodeCase; pnodeCase = pnodeCase->sxCase.pnodeNext)",
          "11275:             byteCodeGenerator->Writer()->MarkLabel(pnodeCase->sxCase.labelCase);",
          "11276:             Emit(pnodeCase->sxCase.pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11277:             funcInfo->ReleaseLoc(pnodeCase->sxCase.pnodeBody);",
          "11280:         EndEmitBlock(pnode->sxSwitch.pnodeBlock, byteCodeGenerator, funcInfo);",
          "11282:         funcInfo->ReleaseLoc(pnode->sxSwitch.pnodeVal);",
          "11286:             byteCodeGenerator->Writer()->MarkLabel(pnode->sxStmt.breakLabel);",
          "",
          "[Added Lines]",
          "11241:         for (pnodeCase = pnode->AsParseNodeSwitch()->pnodeCases; pnodeCase; pnodeCase = pnodeCase->AsParseNodeCase()->pnodeNext)",
          "11245:             pnodeCase->AsParseNodeCase()->labelCase = byteCodeGenerator->Writer()->DefineLabel();",
          "11246:             if (pnodeCase == pnode->AsParseNodeSwitch()->pnodeDefault)",
          "11251:             Emit(pnodeCase->AsParseNodeCase()->pnodeExpr, byteCodeGenerator, funcInfo, false);",
          "11253:                 Js::OpCode::Case, pnodeCase->AsParseNodeCase()->labelCase, regVal, pnodeCase->AsParseNodeCase()->pnodeExpr->location);",
          "11254:             funcInfo->ReleaseLoc(pnodeCase->AsParseNodeCase()->pnodeExpr);",
          "11260:             byteCodeGenerator->Writer()->Br(Js::OpCode::EndSwitch, pnode->AsParseNodeSwitch()->pnodeDefault->AsParseNodeCase()->labelCase);",
          "11266:                 pnode->AsParseNodeStmt()->breakLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "11268:             byteCodeGenerator->Writer()->Br(Js::OpCode::EndSwitch, pnode->AsParseNodeStmt()->breakLabel);",
          "11271:         for (pnodeCase = pnode->AsParseNodeSwitch()->pnodeCases; pnodeCase; pnodeCase = pnodeCase->AsParseNodeCase()->pnodeNext)",
          "11273:             byteCodeGenerator->Writer()->MarkLabel(pnodeCase->AsParseNodeCase()->labelCase);",
          "11274:             Emit(pnodeCase->AsParseNodeCase()->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11275:             funcInfo->ReleaseLoc(pnodeCase->AsParseNodeCase()->pnodeBody);",
          "11278:         EndEmitBlock(pnode->AsParseNodeSwitch()->pnodeBlock, byteCodeGenerator, funcInfo);",
          "11280:         funcInfo->ReleaseLoc(pnode->AsParseNodeSwitch()->pnodeVal);",
          "11284:             byteCodeGenerator->Writer()->MarkLabel(pnode->AsParseNodeStmt()->breakLabel);",
          "",
          "---------------",
          "--- Hunk 293 ---",
          "[Context before]",
          "11292:     {",
          "11293:         Js::ByteCodeLabel catchLabel = (Js::ByteCodeLabel) - 1;",
          "11296:         Assert(pnodeTry);",
          "11298:         Assert(pnodeCatch);",
          "11300:         catchLabel = byteCodeGenerator->Writer()->DefineLabel();",
          "",
          "[Removed Lines]",
          "11295:         ParseNode *pnodeTry = pnode->sxTryCatch.pnodeTry;",
          "11297:         ParseNode *pnodeCatch = pnode->sxTryCatch.pnodeCatch;",
          "",
          "[Added Lines]",
          "11293:         ParseNode *pnodeTry = pnode->AsParseNodeTryCatch()->pnodeTry;",
          "11295:         ParseNode *pnodeCatch = pnode->AsParseNodeTryCatch()->pnodeCatch;",
          "",
          "---------------",
          "--- Hunk 294 ---",
          "[Context before]",
          "11311:             byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForTry);",
          "11312:         }",
          "11317:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "11318:         {",
          "",
          "[Removed Lines]",
          "11314:         Emit(pnodeTry->sxTry.pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11315:         funcInfo->ReleaseLoc(pnodeTry->sxTry.pnodeBody);",
          "",
          "[Added Lines]",
          "11312:         Emit(pnodeTry->AsParseNodeTry()->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11313:         funcInfo->ReleaseLoc(pnodeTry->AsParseNodeTry()->pnodeBody);",
          "",
          "---------------",
          "--- Hunk 295 ---",
          "[Context before]",
          "11322:         byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(/* isEnterBlock = */ false);",
          "11324:         byteCodeGenerator->Writer()->Empty(Js::OpCode::Leave);",
          "11326:         byteCodeGenerator->Writer()->MarkLabel(catchLabel);",
          "11329:         Js::RegSlot location;",
          "11331:         bool acquiredTempLocation = false;",
          "",
          "[Removed Lines]",
          "11325:         byteCodeGenerator->Writer()->Br(pnode->sxStmt.breakLabel);",
          "11327:         Assert(pnodeCatch->sxCatch.pnodeParam);",
          "11328:         ParseNode *pnodeObj = pnodeCatch->sxCatch.pnodeParam;",
          "",
          "[Added Lines]",
          "11323:         byteCodeGenerator->Writer()->Br(pnode->AsParseNodeStmt()->breakLabel);",
          "11325:         Assert(pnodeCatch->AsParseNodeCatch()->pnodeParam);",
          "11326:         ParseNode *pnodeObj = pnodeCatch->AsParseNodeCatch()->pnodeParam;",
          "",
          "---------------",
          "--- Hunk 296 ---",
          "[Context before]",
          "11338:         if (isPattern)",
          "11339:         {",
          "11341:         }",
          "11342:         else",
          "11343:         {",
          "11345:         }",
          "11347:         if (location == Js::Constants::NoRegister)",
          "",
          "[Removed Lines]",
          "11340:             location = pnodeObj->sxParamPattern.location;",
          "11344:             location = pnodeObj->sxPid.sym->GetLocation();",
          "",
          "[Added Lines]",
          "11338:             location = pnodeObj->AsParseNodeParamPattern()->location;",
          "11342:             location = pnodeObj->AsParseNodePid()->sym->GetLocation();",
          "",
          "---------------",
          "--- Hunk 297 ---",
          "[Context before]",
          "11351:         }",
          "11352:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::Catch, location);",
          "11355:         byteCodeGenerator->PushScope(scope);",
          "11357:         if (scope->GetMustInstantiate())",
          "",
          "[Removed Lines]",
          "11354:         Scope *scope = pnodeCatch->sxCatch.scope;",
          "",
          "[Added Lines]",
          "11352:         Scope *scope = pnodeCatch->AsParseNodeCatch()->scope;",
          "",
          "---------------",
          "--- Hunk 298 ---",
          "[Context before]",
          "11424:         ByteCodeGenerator::TryScopeRecord tryRecForCatch(Js::OpCode::ResumeCatch, catchLabel);",
          "11425:         if (isPattern)",
          "11426:         {",
          "11428:             {",
          "11430:                 if (itemLocation == Js::Constants::NoRegister)",
          "11431:                 {",
          "11434:                     itemLocation = ByteCodeGenerator::ReturnRegister;",
          "11435:                 }",
          "11437:             });",
          "11438:             byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(true);",
          "11441:             byteCodeGenerator->StartStatement(pnodeCatch);",
          "11443:             Assert(pnode1->IsPattern());",
          "11445:             if (funcInfo->byteCodeFunction->IsCoroutine())",
          "",
          "[Removed Lines]",
          "11427:             Parser::MapBindIdentifier(pnodeObj->sxParamPattern.pnode1, [&](ParseNodePtr item)",
          "11429:                 Js::RegSlot itemLocation = item->sxVar.sym->GetLocation();",
          "11436:                 ParamTrackAndInitialization(item->sxVar.sym, false /*initializeParam*/, itemLocation);",
          "11442:             ParseNodePtr pnode1 = pnodeObj->sxParamPattern.pnode1;",
          "",
          "[Added Lines]",
          "11425:             Parser::MapBindIdentifier(pnodeObj->AsParseNodeParamPattern()->pnode1, [&](ParseNodePtr item)",
          "11427:                 Js::RegSlot itemLocation = item->AsParseNodeVar()->sym->GetLocation();",
          "11434:                 ParamTrackAndInitialization(item->AsParseNodeVar()->sym, false /*initializeParam*/, itemLocation);",
          "11440:             ParseNodePtr pnode1 = pnodeObj->AsParseNodeParamPattern()->pnode1;",
          "",
          "---------------",
          "--- Hunk 299 ---",
          "[Context before]",
          "11452:         }",
          "11453:         else",
          "11454:         {",
          "11456:             if (scope->GetMustInstantiate())",
          "11457:             {",
          "11459:             }",
          "11460:             byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(true);",
          "",
          "[Removed Lines]",
          "11455:             ParamTrackAndInitialization(pnodeObj->sxPid.sym, true /*initializeParam*/, location);",
          "11458:                 pnodeObj->sxPid.sym->SetIsGlobalCatch(true);",
          "",
          "[Added Lines]",
          "11453:             ParamTrackAndInitialization(pnodeObj->AsParseNodePid()->sym, true /*initializeParam*/, location);",
          "11456:                 pnodeObj->AsParseNodePid()->sym->SetIsGlobalCatch(true);",
          "",
          "---------------",
          "--- Hunk 300 ---",
          "[Context before]",
          "11470:             }",
          "11471:         }",
          "11475:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "11476:         {",
          "",
          "[Removed Lines]",
          "11473:         Emit(pnodeCatch->sxCatch.pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "",
          "[Added Lines]",
          "11471:         Emit(pnodeCatch->AsParseNodeCatch()->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "",
          "---------------",
          "--- Hunk 301 ---",
          "[Context before]",
          "11482:         byteCodeGenerator->RecordEndScopeObject(pnode);",
          "11486:         if (acquiredTempLocation)",
          "11487:         {",
          "",
          "[Removed Lines]",
          "11484:         funcInfo->ReleaseLoc(pnodeCatch->sxCatch.pnodeBody);",
          "",
          "[Added Lines]",
          "11482:         funcInfo->ReleaseLoc(pnodeCatch->AsParseNodeCatch()->pnodeBody);",
          "",
          "---------------",
          "--- Hunk 302 ---",
          "[Context before]",
          "11491:         byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(false);",
          "11493:         byteCodeGenerator->Writer()->Empty(Js::OpCode::Leave);",
          "11495:         break;",
          "11496:     }",
          "",
          "[Removed Lines]",
          "11494:         byteCodeGenerator->Writer()->MarkLabel(pnode->sxStmt.breakLabel);",
          "",
          "[Added Lines]",
          "11492:         byteCodeGenerator->Writer()->MarkLabel(pnode->AsParseNodeStmt()->breakLabel);",
          "",
          "---------------",
          "--- Hunk 303 ---",
          "[Context before]",
          "11499:     {",
          "11500:         Js::ByteCodeLabel finallyLabel = (Js::ByteCodeLabel) - 1;",
          "11503:         Assert(pnodeTry);",
          "11505:         Assert(pnodeFinally);",
          "",
          "[Removed Lines]",
          "11502:         ParseNode *pnodeTry = pnode->sxTryFinally.pnodeTry;",
          "11504:         ParseNode *pnodeFinally = pnode->sxTryFinally.pnodeFinally;",
          "",
          "[Added Lines]",
          "11500:         ParseNode *pnodeTry = pnode->AsParseNodeTryFinally()->pnodeTry;",
          "11502:         ParseNode *pnodeFinally = pnode->AsParseNodeTryFinally()->pnodeFinally;",
          "",
          "---------------",
          "--- Hunk 304 ---",
          "[Context before]",
          "11533:         funcInfo->StartRecordingOutArgs(1);",
          "11538:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "11539:         {",
          "",
          "[Removed Lines]",
          "11535:         Emit(pnodeTry->sxTry.pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11536:         funcInfo->ReleaseLoc(pnodeTry->sxTry.pnodeBody);",
          "",
          "[Added Lines]",
          "11533:         Emit(pnodeTry->AsParseNodeTry()->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11534:         funcInfo->ReleaseLoc(pnodeTry->AsParseNodeTry()->pnodeBody);",
          "",
          "---------------",
          "--- Hunk 305 ---",
          "[Context before]",
          "11549:         byteCodeGenerator->Writer()->RecordCrossFrameEntryExitRecord(true);",
          "11552:         byteCodeGenerator->Writer()->MarkLabel(finallyLabel);",
          "11553:         byteCodeGenerator->Writer()->Empty(Js::OpCode::Finally);",
          "",
          "[Removed Lines]",
          "11551:         byteCodeGenerator->Writer()->Br(pnode->sxStmt.breakLabel);",
          "",
          "[Added Lines]",
          "11549:         byteCodeGenerator->Writer()->Br(pnode->AsParseNodeStmt()->breakLabel);",
          "",
          "---------------",
          "--- Hunk 306 ---",
          "[Context before]",
          "11558:             byteCodeGenerator->tryScopeRecordsList.LinkToEnd(&tryRecForFinally);",
          "11559:         }",
          "11564:         if (funcInfo->byteCodeFunction->IsCoroutine())",
          "11565:         {",
          "",
          "[Removed Lines]",
          "11561:         Emit(pnodeFinally->sxFinally.pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11562:         funcInfo->ReleaseLoc(pnodeFinally->sxFinally.pnodeBody);",
          "",
          "[Added Lines]",
          "11559:         Emit(pnodeFinally->AsParseNodeFinally()->pnodeBody, byteCodeGenerator, funcInfo, fReturnValue);",
          "11560:         funcInfo->ReleaseLoc(pnodeFinally->AsParseNodeFinally()->pnodeBody);",
          "",
          "---------------",
          "--- Hunk 307 ---",
          "[Context before]",
          "11575:         byteCodeGenerator->Writer()->Empty(Js::OpCode::LeaveNull);",
          "11578:         break;",
          "11579:     }",
          "11580:     case knopThrow:",
          "11581:         byteCodeGenerator->StartStatement(pnode);",
          "11585:         byteCodeGenerator->EndStatement(pnode);",
          "11586:         break;",
          "11587:     case knopYieldLeaf:",
          "",
          "[Removed Lines]",
          "11577:         byteCodeGenerator->Writer()->MarkLabel(pnode->sxStmt.breakLabel);",
          "11582:         Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "11583:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::Throw, pnode->sxUni.pnode1->location);",
          "11584:         funcInfo->ReleaseLoc(pnode->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "11575:         byteCodeGenerator->Writer()->MarkLabel(pnode->AsParseNodeStmt()->breakLabel);",
          "11580:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "11581:         byteCodeGenerator->Writer()->Reg1(Js::OpCode::Throw, pnode->AsParseNodeUni()->pnode1->location);",
          "11582:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 308 ---",
          "[Context before]",
          "11594:     case knopYield:",
          "11595:         byteCodeGenerator->StartStatement(pnode);",
          "11596:         funcInfo->AcquireLoc(pnode);",
          "11600:         byteCodeGenerator->EndStatement(pnode);",
          "11601:         break;",
          "11602:     case knopYieldStar:",
          "",
          "[Removed Lines]",
          "11597:         Emit(pnode->sxUni.pnode1, byteCodeGenerator, funcInfo, false);",
          "11598:         EmitYield(pnode->sxUni.pnode1->location, pnode->location, byteCodeGenerator, funcInfo);",
          "11599:         funcInfo->ReleaseLoc(pnode->sxUni.pnode1);",
          "",
          "[Added Lines]",
          "11595:         Emit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, funcInfo, false);",
          "11596:         EmitYield(pnode->AsParseNodeUni()->pnode1->location, pnode->location, byteCodeGenerator, funcInfo);",
          "11597:         funcInfo->ReleaseLoc(pnode->AsParseNodeUni()->pnode1);",
          "",
          "---------------",
          "--- Hunk 309 ---",
          "[Context before]",
          "11605:         byteCodeGenerator->EndStatement(pnode);",
          "11606:         break;",
          "11607:     case knopExportDefault:",
          "11612:         break;",
          "11613:     default:",
          "11614:         AssertMsg(0, \"emit unhandled pnode op\");",
          "",
          "[Removed Lines]",
          "11608:         Emit(pnode->sxExportDefault.pnodeExpr, byteCodeGenerator, funcInfo, false);",
          "11609:         byteCodeGenerator->EmitAssignmentToDefaultModuleExport(pnode->sxExportDefault.pnodeExpr, funcInfo);",
          "11610:         funcInfo->ReleaseLoc(pnode->sxExportDefault.pnodeExpr);",
          "11611:         pnode = pnode->sxExportDefault.pnodeExpr;",
          "",
          "[Added Lines]",
          "11606:         Emit(pnode->AsParseNodeExportDefault()->pnodeExpr, byteCodeGenerator, funcInfo, false);",
          "11607:         byteCodeGenerator->EmitAssignmentToDefaultModuleExport(pnode->AsParseNodeExportDefault()->pnodeExpr, funcInfo);",
          "11608:         funcInfo->ReleaseLoc(pnode->AsParseNodeExportDefault()->pnodeExpr);",
          "11609:         pnode = pnode->AsParseNodeExportDefault()->pnodeExpr;",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeGenerator.cpp||lib/Runtime/ByteCode/ByteCodeGenerator.cpp": [
          "File: lib/Runtime/ByteCode/ByteCodeGenerator.cpp -> lib/Runtime/ByteCode/ByteCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: bool IsCallOfConstants(ParseNode *pnode)",
          "13: {",
          "15: }",
          "17: template <class PrefixFn, class PostfixFn>",
          "",
          "[Removed Lines]",
          "14:     return pnode->sxCall.callOfConstants && pnode->sxCall.argCount > ByteCodeGenerator::MinArgumentsForCallOptimization;",
          "",
          "[Added Lines]",
          "14:     return pnode->AsParseNodeCall()->callOfConstants && pnode->AsParseNodeCall()->argCount > ByteCodeGenerator::MinArgumentsForCallOptimization;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     do",
          "59:     {",
          "61:         Visit(pnode1, byteCodeGenerator, prefix, postfix);",
          "63:     }",
          "64:     while (pnode->nop == knopList);",
          "65:     Visit(pnode, byteCodeGenerator, prefix, postfix);",
          "",
          "[Removed Lines]",
          "60:         ParseNode * pnode1 = pnode->sxBin.pnode1;",
          "62:         pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "60:         ParseNode * pnode1 = pnode->AsParseNodeBin()->pnode1;",
          "62:         pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70: {",
          "75:     byteCodeGenerator->PushScope(scope);",
          "78:     scope->SetIsObject();",
          "79:     scope->SetMustInstantiate(true);",
          "",
          "[Removed Lines]",
          "73:     Scope *scope = pnode->sxWith.scope;",
          "76:     Visit(pnode->sxWith.pnodeBody, byteCodeGenerator, prefix, postfix, pnodeParent);",
          "",
          "[Added Lines]",
          "73:     Scope *scope = pnode->AsParseNodeWith()->scope;",
          "76:     Visit(pnode->AsParseNodeWith()->pnodeBody, byteCodeGenerator, prefix, postfix, pnodeParent);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: bool BlockHasOwnScope(ParseNode* pnodeBlock, ByteCodeGenerator *byteCodeGenerator)",
          "85: {",
          "86:     Assert(pnodeBlock->nop == knopBlock);",
          "88:         (!(pnodeBlock->grfpn & fpnSyntheticNode) ||",
          "90: }",
          "92: void BeginVisitBlock(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator)",
          "93: {",
          "94:     if (BlockHasOwnScope(pnode, byteCodeGenerator))",
          "95:     {",
          "97:         FuncInfo *func = scope->GetFunc();",
          "99:         if (scope->IsInnerScope())",
          "",
          "[Removed Lines]",
          "87:     return pnodeBlock->sxBlock.scope != nullptr &&",
          "89:             (pnodeBlock->sxBlock.blockType == PnodeBlockType::Global && byteCodeGenerator->IsEvalWithNoParentScopeInfo()));",
          "96:         Scope *scope = pnode->sxBlock.scope;",
          "",
          "[Added Lines]",
          "87:     return pnodeBlock->AsParseNodeBlock()->scope != nullptr &&",
          "89:             (pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Global && byteCodeGenerator->IsEvalWithNoParentScopeInfo()));",
          "96:         Scope *scope = pnode->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:         }",
          "106:         byteCodeGenerator->PushBlock(pnode);",
          "108:     }",
          "109: }",
          "",
          "[Removed Lines]",
          "107:         byteCodeGenerator->PushScope(pnode->sxBlock.scope);",
          "",
          "[Added Lines]",
          "107:         byteCodeGenerator->PushScope(pnode->AsParseNodeBlock()->scope);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "112: {",
          "113:     if (BlockHasOwnScope(pnode, byteCodeGenerator))",
          "114:     {",
          "116:         FuncInfo *func = scope->GetFunc();",
          "118:         if (!byteCodeGenerator->IsInDebugMode() &&",
          "",
          "[Removed Lines]",
          "115:         Scope *scope = pnode->sxBlock.scope;",
          "",
          "[Added Lines]",
          "115:         Scope *scope = pnode->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "133: void BeginVisitCatch(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator)",
          "134: {",
          "136:     FuncInfo *func = scope->GetFunc();",
          "138:     if (func->GetCallsEval() || func->GetChildCallsEval() ||",
          "",
          "[Removed Lines]",
          "135:     Scope *scope = pnode->sxCatch.scope;",
          "",
          "[Added Lines]",
          "135:     Scope *scope = pnode->AsParseNodeCatch()->scope;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "146:     scope->SetInnerScopeIndex(func->AcquireInnerScopeIndex());",
          "149: }",
          "151: void EndVisitCatch(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator)",
          "152: {",
          "155:     if (scope->HasInnerScopeIndex() && !byteCodeGenerator->IsInDebugMode())",
          "156:     {",
          "",
          "[Removed Lines]",
          "148:     byteCodeGenerator->PushScope(pnode->sxCatch.scope);",
          "153:     Scope *scope = pnode->sxCatch.scope;",
          "",
          "[Added Lines]",
          "148:     byteCodeGenerator->PushScope(pnode->AsParseNodeCatch()->scope);",
          "153:     Scope *scope = pnode->AsParseNodeCatch()->scope;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "194:     if (CreateNativeArrays(byteCodeGenerator, byteCodeGenerator->TopFuncInfo()))",
          "195:     {",
          "197:     }",
          "200: }",
          "202: void PropagateFlags(ParseNode *pnodeChild, ParseNode *pnodeParent);",
          "",
          "[Removed Lines]",
          "196:         return pnodeArr->sxArrLit.arrayOfNumbers;",
          "199:     return pnodeArr->sxArrLit.arrayOfTaggedInts && pnodeArr->sxArrLit.count > 1;",
          "",
          "[Added Lines]",
          "196:         return pnodeArr->AsParseNodeArrLit()->arrayOfNumbers;",
          "199:     return pnodeArr->AsParseNodeArrLit()->arrayOfTaggedInts && pnodeArr->AsParseNodeArrLit()->count > 1;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "219:         uint flags = ParseNode::Grfnop(pnode->nop);",
          "220:         if (flags&fnopUni)",
          "221:         {",
          "223:         }",
          "224:         else if (flags&fnopBin)",
          "225:         {",
          "230:             {",
          "232:             }",
          "233:         }",
          "",
          "[Removed Lines]",
          "222:             Visit(pnode->sxUni.pnode1, byteCodeGenerator, prefix, postfix);",
          "226:             Visit(pnode->sxBin.pnode1, byteCodeGenerator, prefix, postfix);",
          "227:             Visit(pnode->sxBin.pnode2, byteCodeGenerator, prefix, postfix);",
          "229:             if (ByteCodeGenerator::IsSuper(pnode->sxBin.pnode1))",
          "231:                 Visit(pnode->sxSuperReference.pnodeThis, byteCodeGenerator, prefix, postfix);",
          "",
          "[Added Lines]",
          "222:             Visit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, prefix, postfix);",
          "226:             Visit(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator, prefix, postfix);",
          "227:             Visit(pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, prefix, postfix);",
          "229:             if (ByteCodeGenerator::IsSuper(pnode->AsParseNodeBin()->pnode1))",
          "231:                 Visit(pnode->AsParseNodeSuperReference()->pnodeThis, byteCodeGenerator, prefix, postfix);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "236:     }",
          "238:     case knopParamPattern:",
          "240:         break;",
          "242:     case knopArrayPattern:",
          "243:         if (!byteCodeGenerator->InDestructuredPattern())",
          "244:         {",
          "245:             byteCodeGenerator->SetInDestructuredPattern(true);",
          "247:             byteCodeGenerator->SetInDestructuredPattern(false);",
          "248:         }",
          "249:         else",
          "250:         {",
          "252:         }",
          "253:         break;",
          "255:     case knopCall:",
          "260:         {",
          "263:         }",
          "264:         break;",
          "266:     case knopNew:",
          "267:     {",
          "269:         if (!IsCallOfConstants(pnode))",
          "270:         {",
          "272:         }",
          "273:         break;",
          "274:     }",
          "276:     case knopQmark:",
          "280:         break;",
          "281:     case knopList:",
          "282:         VisitList(pnode, byteCodeGenerator, prefix, postfix);",
          "",
          "[Removed Lines]",
          "239:         Visit(pnode->sxParamPattern.pnode1, byteCodeGenerator, prefix, postfix);",
          "246:             Visit(pnode->sxUni.pnode1, byteCodeGenerator, prefix, postfix);",
          "251:             Visit(pnode->sxUni.pnode1, byteCodeGenerator, prefix, postfix);",
          "256:         Visit(pnode->sxCall.pnodeTarget, byteCodeGenerator, prefix, postfix);",
          "257:         Visit(pnode->sxCall.pnodeArgs, byteCodeGenerator, prefix, postfix);",
          "259:         if (pnode->sxCall.isSuperCall)",
          "261:             Visit(pnode->sxSuperCall.pnodeThis, byteCodeGenerator, prefix, postfix);",
          "262:             Visit(pnode->sxSuperCall.pnodeNewTarget, byteCodeGenerator, prefix, postfix);",
          "268:         Visit(pnode->sxCall.pnodeTarget, byteCodeGenerator, prefix, postfix);",
          "271:             Visit(pnode->sxCall.pnodeArgs, byteCodeGenerator, prefix, postfix);",
          "277:         Visit(pnode->sxTri.pnode1, byteCodeGenerator, prefix, postfix);",
          "278:         Visit(pnode->sxTri.pnode2, byteCodeGenerator, prefix, postfix);",
          "279:         Visit(pnode->sxTri.pnode3, byteCodeGenerator, prefix, postfix);",
          "",
          "[Added Lines]",
          "239:         Visit(pnode->AsParseNodeParamPattern()->pnode1, byteCodeGenerator, prefix, postfix);",
          "246:             Visit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, prefix, postfix);",
          "251:             Visit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, prefix, postfix);",
          "256:         Visit(pnode->AsParseNodeCall()->pnodeTarget, byteCodeGenerator, prefix, postfix);",
          "257:         Visit(pnode->AsParseNodeCall()->pnodeArgs, byteCodeGenerator, prefix, postfix);",
          "259:         if (pnode->AsParseNodeCall()->isSuperCall)",
          "261:             Visit(pnode->AsParseNodeSuperCall()->pnodeThis, byteCodeGenerator, prefix, postfix);",
          "262:             Visit(pnode->AsParseNodeSuperCall()->pnodeNewTarget, byteCodeGenerator, prefix, postfix);",
          "268:         Visit(pnode->AsParseNodeCall()->pnodeTarget, byteCodeGenerator, prefix, postfix);",
          "271:             Visit(pnode->AsParseNodeCall()->pnodeArgs, byteCodeGenerator, prefix, postfix);",
          "277:         Visit(pnode->AsParseNodeTri()->pnode1, byteCodeGenerator, prefix, postfix);",
          "278:         Visit(pnode->AsParseNodeTri()->pnode2, byteCodeGenerator, prefix, postfix);",
          "279:         Visit(pnode->AsParseNodeTri()->pnode3, byteCodeGenerator, prefix, postfix);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "285:     case knopVarDecl:",
          "286:     case knopConstDecl:",
          "287:     case knopLetDecl:",
          "290:         break;",
          "292:     case knopFncDecl:",
          "",
          "[Removed Lines]",
          "288:         if (pnode->sxVar.pnodeInit != nullptr)",
          "289:             Visit(pnode->sxVar.pnodeInit, byteCodeGenerator, prefix, postfix);",
          "",
          "[Added Lines]",
          "288:         if (pnode->AsParseNodeVar()->pnodeInit != nullptr)",
          "289:             Visit(pnode->AsParseNodeVar()->pnodeInit, byteCodeGenerator, prefix, postfix);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "297:     }",
          "298:     case knopClassDecl:",
          "299:     {",
          "312:         break;",
          "313:     }",
          "314:     case knopStrTemplate:",
          "",
          "[Removed Lines]",
          "300:         Visit(pnode->sxClass.pnodeDeclName, byteCodeGenerator, prefix, postfix);",
          "302:         BeginVisitBlock(pnode->sxClass.pnodeBlock, byteCodeGenerator);",
          "306:         Visit(pnode->sxClass.pnodeExtends, byteCodeGenerator, prefix, postfix);",
          "307:         Visit(pnode->sxClass.pnodeName, byteCodeGenerator, prefix, postfix);",
          "308:         Visit(pnode->sxClass.pnodeStaticMembers, byteCodeGenerator, prefix, postfix);",
          "309:         Visit(pnode->sxClass.pnodeConstructor, byteCodeGenerator, prefix, postfix);",
          "310:         Visit(pnode->sxClass.pnodeMembers, byteCodeGenerator, prefix, postfix);",
          "311:         EndVisitBlock(pnode->sxClass.pnodeBlock, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "300:         Visit(pnode->AsParseNodeClass()->pnodeDeclName, byteCodeGenerator, prefix, postfix);",
          "302:         BeginVisitBlock(pnode->AsParseNodeClass()->pnodeBlock, byteCodeGenerator);",
          "306:         Visit(pnode->AsParseNodeClass()->pnodeExtends, byteCodeGenerator, prefix, postfix);",
          "307:         Visit(pnode->AsParseNodeClass()->pnodeName, byteCodeGenerator, prefix, postfix);",
          "308:         Visit(pnode->AsParseNodeClass()->pnodeStaticMembers, byteCodeGenerator, prefix, postfix);",
          "309:         Visit(pnode->AsParseNodeClass()->pnodeConstructor, byteCodeGenerator, prefix, postfix);",
          "310:         Visit(pnode->AsParseNodeClass()->pnodeMembers, byteCodeGenerator, prefix, postfix);",
          "311:         EndVisitBlock(pnode->AsParseNodeClass()->pnodeBlock, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "320:         {",
          "322:         }",
          "324:         break;",
          "325:     }",
          "326:     case knopExportDefault:",
          "328:         break;",
          "330:     case knopProg:",
          "331:     {",
          "336:         uint i = 0;",
          "343:         break;",
          "344:     }",
          "345:     case knopFor:",
          "348:         byteCodeGenerator->EnterLoop();",
          "352:         byteCodeGenerator->ExitLoop();",
          "354:         break;",
          "356:     case knopIf:",
          "360:         {",
          "362:         }",
          "363:         break;",
          "",
          "[Removed Lines]",
          "319:         if (!pnode->sxStrTemplate.isTaggedTemplate)",
          "321:             Visit(pnode->sxStrTemplate.pnodeStringLiterals, byteCodeGenerator, prefix, postfix);",
          "323:         Visit(pnode->sxStrTemplate.pnodeSubstitutionExpressions, byteCodeGenerator, prefix, postfix);",
          "327:         Visit(pnode->sxExportDefault.pnodeExpr, byteCodeGenerator, prefix, postfix);",
          "334:         Assert(pnode->sxFnc.pnodeBody);",
          "337:         VisitNestedScopes(pnode->sxFnc.pnodeScopes, pnode, byteCodeGenerator, prefix, postfix, &i);",
          "339:         BeginVisitBlock(pnode->sxFnc.pnodeScopes, byteCodeGenerator);",
          "340:         pnode->sxProg.pnodeLastValStmt = VisitBlock(pnode->sxFnc.pnodeBody, byteCodeGenerator, prefix, postfix);",
          "341:         EndVisitBlock(pnode->sxFnc.pnodeScopes, byteCodeGenerator);",
          "346:         BeginVisitBlock(pnode->sxFor.pnodeBlock, byteCodeGenerator);",
          "347:         Visit(pnode->sxFor.pnodeInit, byteCodeGenerator, prefix, postfix);",
          "349:         Visit(pnode->sxFor.pnodeCond, byteCodeGenerator, prefix, postfix);",
          "350:         Visit(pnode->sxFor.pnodeIncr, byteCodeGenerator, prefix, postfix);",
          "351:         Visit(pnode->sxFor.pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "353:         EndVisitBlock(pnode->sxFor.pnodeBlock, byteCodeGenerator);",
          "357:         Visit(pnode->sxIf.pnodeCond, byteCodeGenerator, prefix, postfix);",
          "358:         Visit(pnode->sxIf.pnodeTrue, byteCodeGenerator, prefix, postfix, pnode);",
          "359:         if (pnode->sxIf.pnodeFalse != nullptr)",
          "361:             Visit(pnode->sxIf.pnodeFalse, byteCodeGenerator, prefix, postfix, pnode);",
          "",
          "[Added Lines]",
          "319:         if (!pnode->AsParseNodeStrTemplate()->isTaggedTemplate)",
          "321:             Visit(pnode->AsParseNodeStrTemplate()->pnodeStringLiterals, byteCodeGenerator, prefix, postfix);",
          "323:         Visit(pnode->AsParseNodeStrTemplate()->pnodeSubstitutionExpressions, byteCodeGenerator, prefix, postfix);",
          "327:         Visit(pnode->AsParseNodeExportDefault()->pnodeExpr, byteCodeGenerator, prefix, postfix);",
          "334:         Assert(pnode->AsParseNodeFnc()->pnodeBody);",
          "337:         VisitNestedScopes(pnode->AsParseNodeFnc()->pnodeScopes, pnode, byteCodeGenerator, prefix, postfix, &i);",
          "339:         BeginVisitBlock(pnode->AsParseNodeFnc()->pnodeScopes, byteCodeGenerator);",
          "340:         pnode->AsParseNodeProg()->pnodeLastValStmt = VisitBlock(pnode->AsParseNodeFnc()->pnodeBody, byteCodeGenerator, prefix, postfix);",
          "341:         EndVisitBlock(pnode->AsParseNodeFnc()->pnodeScopes, byteCodeGenerator);",
          "346:         BeginVisitBlock(pnode->AsParseNodeFor()->pnodeBlock, byteCodeGenerator);",
          "347:         Visit(pnode->AsParseNodeFor()->pnodeInit, byteCodeGenerator, prefix, postfix);",
          "349:         Visit(pnode->AsParseNodeFor()->pnodeCond, byteCodeGenerator, prefix, postfix);",
          "350:         Visit(pnode->AsParseNodeFor()->pnodeIncr, byteCodeGenerator, prefix, postfix);",
          "351:         Visit(pnode->AsParseNodeFor()->pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "353:         EndVisitBlock(pnode->AsParseNodeFor()->pnodeBlock, byteCodeGenerator);",
          "357:         Visit(pnode->AsParseNodeIf()->pnodeCond, byteCodeGenerator, prefix, postfix);",
          "358:         Visit(pnode->AsParseNodeIf()->pnodeTrue, byteCodeGenerator, prefix, postfix, pnode);",
          "359:         if (pnode->AsParseNodeIf()->pnodeFalse != nullptr)",
          "361:             Visit(pnode->AsParseNodeIf()->pnodeFalse, byteCodeGenerator, prefix, postfix, pnode);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "366:     case knopDoWhile:",
          "367:     case knopWhile:",
          "368:         byteCodeGenerator->EnterLoop();",
          "371:         byteCodeGenerator->ExitLoop();",
          "372:         break;",
          "374:     case knopForIn:",
          "375:     case knopForOf:",
          "379:         byteCodeGenerator->EnterLoop();",
          "381:         byteCodeGenerator->ExitLoop();",
          "383:         break;",
          "385:     case knopReturn:",
          "388:         break;",
          "390:     case knopBlock:",
          "391:     {",
          "393:         {",
          "394:             BeginVisitBlock(pnode, byteCodeGenerator);",
          "396:             EndVisitBlock(pnode, byteCodeGenerator);",
          "397:         }",
          "398:         else",
          "399:         {",
          "401:         }",
          "402:         break;",
          "403:     }",
          "405:     case knopWith:",
          "408:         break;",
          "410:     case knopBreak:",
          "",
          "[Removed Lines]",
          "369:         Visit(pnode->sxWhile.pnodeCond, byteCodeGenerator, prefix, postfix);",
          "370:         Visit(pnode->sxWhile.pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "376:         BeginVisitBlock(pnode->sxForInOrForOf.pnodeBlock, byteCodeGenerator);",
          "377:         Visit(pnode->sxForInOrForOf.pnodeLval, byteCodeGenerator, prefix, postfix);",
          "378:         Visit(pnode->sxForInOrForOf.pnodeObj, byteCodeGenerator, prefix, postfix);",
          "380:         Visit(pnode->sxForInOrForOf.pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "382:         EndVisitBlock(pnode->sxForInOrForOf.pnodeBlock, byteCodeGenerator);",
          "386:         if (pnode->sxReturn.pnodeExpr != nullptr)",
          "387:             Visit(pnode->sxReturn.pnodeExpr, byteCodeGenerator, prefix, postfix);",
          "392:         if (pnode->sxBlock.pnodeStmt != nullptr)",
          "395:             pnode->sxBlock.pnodeLastValStmt = VisitBlock(pnode->sxBlock.pnodeStmt, byteCodeGenerator, prefix, postfix, pnode);",
          "400:             pnode->sxBlock.pnodeLastValStmt = nullptr;",
          "406:         Visit(pnode->sxWith.pnodeObj, byteCodeGenerator, prefix, postfix);",
          "407:         VisitWithStmt(pnode, pnode->sxWith.pnodeObj->location, byteCodeGenerator, prefix, postfix, pnode);",
          "",
          "[Added Lines]",
          "369:         Visit(pnode->AsParseNodeWhile()->pnodeCond, byteCodeGenerator, prefix, postfix);",
          "370:         Visit(pnode->AsParseNodeWhile()->pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "376:         BeginVisitBlock(pnode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator);",
          "377:         Visit(pnode->AsParseNodeForInOrForOf()->pnodeLval, byteCodeGenerator, prefix, postfix);",
          "378:         Visit(pnode->AsParseNodeForInOrForOf()->pnodeObj, byteCodeGenerator, prefix, postfix);",
          "380:         Visit(pnode->AsParseNodeForInOrForOf()->pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "382:         EndVisitBlock(pnode->AsParseNodeForInOrForOf()->pnodeBlock, byteCodeGenerator);",
          "386:         if (pnode->AsParseNodeReturn()->pnodeExpr != nullptr)",
          "387:             Visit(pnode->AsParseNodeReturn()->pnodeExpr, byteCodeGenerator, prefix, postfix);",
          "392:         if (pnode->AsParseNodeBlock()->pnodeStmt != nullptr)",
          "395:             pnode->AsParseNodeBlock()->pnodeLastValStmt = VisitBlock(pnode->AsParseNodeBlock()->pnodeStmt, byteCodeGenerator, prefix, postfix, pnode);",
          "400:             pnode->AsParseNodeBlock()->pnodeLastValStmt = nullptr;",
          "406:         Visit(pnode->AsParseNodeWith()->pnodeObj, byteCodeGenerator, prefix, postfix);",
          "407:         VisitWithStmt(pnode, pnode->AsParseNodeWith()->pnodeObj->location, byteCodeGenerator, prefix, postfix, pnode);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "416:         break;",
          "418:     case knopSwitch:",
          "422:         {",
          "423:             Visit(pnodeT, byteCodeGenerator, prefix, postfix, pnode);",
          "424:         }",
          "427:         break;",
          "429:     case knopCase:",
          "432:         break;",
          "433:     case knopTypeof:",
          "435:         break;",
          "437:     case knopTryFinally:",
          "440:         break;",
          "442:     case knopTryCatch:",
          "445:         break;",
          "447:     case knopTry:",
          "449:         break;",
          "450:     case knopCatch:",
          "451:         BeginVisitCatch(pnode, byteCodeGenerator);",
          "454:         EndVisitCatch(pnode, byteCodeGenerator);",
          "455:         break;",
          "456:     case knopFinally:",
          "458:         break;",
          "460:     case knopThrow:",
          "462:         break;",
          "463:     case knopArray:",
          "464:     {",
          "465:         bool arrayLitOpt = EmitAsConstantArray(pnode, byteCodeGenerator);",
          "466:         if (!arrayLitOpt)",
          "467:         {",
          "469:         }",
          "470:         break;",
          "471:     }",
          "472:     case knopComma:",
          "473:     {",
          "475:         if (pnode1->nop == knopComma)",
          "476:         {",
          "",
          "[Removed Lines]",
          "419:         Visit(pnode->sxSwitch.pnodeVal, byteCodeGenerator, prefix, postfix);",
          "420:         BeginVisitBlock(pnode->sxSwitch.pnodeBlock, byteCodeGenerator);",
          "421:         for (ParseNode *pnodeT = pnode->sxSwitch.pnodeCases; nullptr != pnodeT; pnodeT = pnodeT->sxCase.pnodeNext)",
          "425:         Visit(pnode->sxSwitch.pnodeBlock, byteCodeGenerator, prefix, postfix);",
          "426:         EndVisitBlock(pnode->sxSwitch.pnodeBlock, byteCodeGenerator);",
          "430:         Visit(pnode->sxCase.pnodeExpr, byteCodeGenerator, prefix, postfix);",
          "431:         Visit(pnode->sxCase.pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "434:         Visit(pnode->sxUni.pnode1, byteCodeGenerator, prefix, postfix);",
          "438:         Visit(pnode->sxTryFinally.pnodeTry, byteCodeGenerator, prefix, postfix, pnode);",
          "439:         Visit(pnode->sxTryFinally.pnodeFinally, byteCodeGenerator, prefix, postfix, pnode);",
          "443:         Visit(pnode->sxTryCatch.pnodeTry, byteCodeGenerator, prefix, postfix, pnode);",
          "444:         Visit(pnode->sxTryCatch.pnodeCatch, byteCodeGenerator, prefix, postfix, pnode);",
          "448:         Visit(pnode->sxTry.pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "452:         Visit(pnode->sxCatch.pnodeParam, byteCodeGenerator, prefix, postfix);",
          "453:         Visit(pnode->sxCatch.pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "457:         Visit(pnode->sxFinally.pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "461:         Visit(pnode->sxUni.pnode1, byteCodeGenerator, prefix, postfix);",
          "468:             Visit(pnode->sxUni.pnode1, byteCodeGenerator, prefix, postfix);",
          "474:         ParseNode *pnode1 = pnode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "419:         Visit(pnode->AsParseNodeSwitch()->pnodeVal, byteCodeGenerator, prefix, postfix);",
          "420:         BeginVisitBlock(pnode->AsParseNodeSwitch()->pnodeBlock, byteCodeGenerator);",
          "421:         for (ParseNode *pnodeT = pnode->AsParseNodeSwitch()->pnodeCases; nullptr != pnodeT; pnodeT = pnodeT->AsParseNodeCase()->pnodeNext)",
          "425:         Visit(pnode->AsParseNodeSwitch()->pnodeBlock, byteCodeGenerator, prefix, postfix);",
          "426:         EndVisitBlock(pnode->AsParseNodeSwitch()->pnodeBlock, byteCodeGenerator);",
          "430:         Visit(pnode->AsParseNodeCase()->pnodeExpr, byteCodeGenerator, prefix, postfix);",
          "431:         Visit(pnode->AsParseNodeCase()->pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "434:         Visit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, prefix, postfix);",
          "438:         Visit(pnode->AsParseNodeTryFinally()->pnodeTry, byteCodeGenerator, prefix, postfix, pnode);",
          "439:         Visit(pnode->AsParseNodeTryFinally()->pnodeFinally, byteCodeGenerator, prefix, postfix, pnode);",
          "443:         Visit(pnode->AsParseNodeTryCatch()->pnodeTry, byteCodeGenerator, prefix, postfix, pnode);",
          "444:         Visit(pnode->AsParseNodeTryCatch()->pnodeCatch, byteCodeGenerator, prefix, postfix, pnode);",
          "448:         Visit(pnode->AsParseNodeTry()->pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "452:         Visit(pnode->AsParseNodeCatch()->pnodeParam, byteCodeGenerator, prefix, postfix);",
          "453:         Visit(pnode->AsParseNodeCatch()->pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "457:         Visit(pnode->AsParseNodeFinally()->pnodeBody, byteCodeGenerator, prefix, postfix, pnode);",
          "461:         Visit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, prefix, postfix);",
          "468:             Visit(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator, prefix, postfix);",
          "474:         ParseNode *pnode1 = pnode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "479:             SList<ParseNode*> rhsStack(alloc);",
          "480:             do",
          "481:             {",
          "484:             }",
          "485:             while (pnode1->nop == knopComma);",
          "",
          "[Removed Lines]",
          "482:                 rhsStack.Push(pnode1->sxBin.pnode2);",
          "483:                 pnode1 = pnode1->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "482:                 rhsStack.Push(pnode1->AsParseNodeBin()->pnode2);",
          "483:                 pnode1 = pnode1->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "495:         {",
          "496:             Visit(pnode1, byteCodeGenerator, prefix, postfix);",
          "497:         }",
          "499:     }",
          "500:         break;",
          "501:     }",
          "",
          "[Removed Lines]",
          "498:         Visit(pnode->sxBin.pnode2, byteCodeGenerator, prefix, postfix);",
          "",
          "[Added Lines]",
          "498:         Visit(pnode->AsParseNodeBin()->pnode2, byteCodeGenerator, prefix, postfix);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "531:     case knopTry:",
          "532:     case knopCatch:",
          "533:     case knopFinally:",
          "536:     default:",
          "537:         return false;",
          "",
          "[Removed Lines]",
          "534:         return (pnode->sxStmt.grfnop & fnopJump) != 0;",
          "",
          "[Added Lines]",
          "534:         return (pnode->AsParseNodeStmt()->grfnop & fnopJump) != 0;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "542: {",
          "543:     if (IsJump(pnodeChild))",
          "544:     {",
          "546:     }",
          "547: }",
          "",
          "[Removed Lines]",
          "545:         pnodeParent->sxStmt.grfnop |= fnopJump;",
          "",
          "[Added Lines]",
          "545:         pnodeParent->AsParseNodeStmt()->grfnop |= fnopJump;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "562:     }",
          "563:     if ((stmt->nop >= 0) && (stmt->nop<knopLim))",
          "564:     {",
          "",
          "[Removed Lines]",
          "561:         return !stmt->sxFnc.IsDeclaration();",
          "",
          "[Added Lines]",
          "561:         return !stmt->AsParseNodeFnc()->IsDeclaration();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "583:         {",
          "584:         case knopFor:",
          "588:             {",
          "589:                 return false;",
          "590:             }",
          "593:             break;",
          "595:         case knopIf:",
          "599:             {",
          "600:                 return false;",
          "601:             }",
          "603:             {",
          "604:                 return false;",
          "605:             }",
          "607:             break;",
          "609:         case knopWhile:",
          "615:             {",
          "616:                 return false;",
          "617:             }",
          "620:             break;",
          "622:         case knopDoWhile:",
          "624:             {",
          "625:                 return false;",
          "626:             }",
          "629:             break;",
          "631:         case knopBlock:",
          "634:         case knopWith:",
          "636:             {",
          "637:                 return false;",
          "638:             }",
          "640:             break;",
          "642:         case knopSwitch:",
          "",
          "[Removed Lines]",
          "586:             if (pnode->sxFor.pnodeCond != nullptr ||",
          "587:                 pnode->sxFor.pnodeBody == nullptr)",
          "592:             pnode = pnode->sxFor.pnodeBody;",
          "597:             if (pnode->sxIf.pnodeTrue == nullptr ||",
          "598:                 pnode->sxIf.pnodeFalse == nullptr)",
          "602:             if (!MustProduceValue(pnode->sxIf.pnodeFalse, scriptContext))",
          "606:             pnode = pnode->sxIf.pnodeTrue;",
          "611:             if (pnode->sxWhile.pnodeBody == nullptr ||",
          "612:                 (pnode->sxWhile.pnodeCond &&",
          "613:                 (pnode->sxWhile.pnodeCond->nop != knopInt ||",
          "614:                 pnode->sxWhile.pnodeCond->sxInt.lw == 0)))",
          "619:             pnode = pnode->sxWhile.pnodeBody;",
          "623:             if (pnode->sxWhile.pnodeBody == nullptr)",
          "628:             pnode = pnode->sxWhile.pnodeBody;",
          "632:             return pnode->sxBlock.pnodeLastValStmt != nullptr;",
          "635:             if (pnode->sxWith.pnodeBody == nullptr)",
          "639:             pnode = pnode->sxWith.pnodeBody;",
          "",
          "[Added Lines]",
          "586:             if (pnode->AsParseNodeFor()->pnodeCond != nullptr ||",
          "587:                 pnode->AsParseNodeFor()->pnodeBody == nullptr)",
          "592:             pnode = pnode->AsParseNodeFor()->pnodeBody;",
          "597:             if (pnode->AsParseNodeIf()->pnodeTrue == nullptr ||",
          "598:                 pnode->AsParseNodeIf()->pnodeFalse == nullptr)",
          "602:             if (!MustProduceValue(pnode->AsParseNodeIf()->pnodeFalse, scriptContext))",
          "606:             pnode = pnode->AsParseNodeIf()->pnodeTrue;",
          "611:             if (pnode->AsParseNodeWhile()->pnodeBody == nullptr ||",
          "612:                 (pnode->AsParseNodeWhile()->pnodeCond &&",
          "613:                 (pnode->AsParseNodeWhile()->pnodeCond->nop != knopInt ||",
          "614:                 pnode->AsParseNodeWhile()->pnodeCond->AsParseNodeInt()->lw == 0)))",
          "619:             pnode = pnode->AsParseNodeWhile()->pnodeBody;",
          "623:             if (pnode->AsParseNodeWhile()->pnodeBody == nullptr)",
          "628:             pnode = pnode->AsParseNodeWhile()->pnodeBody;",
          "632:             return pnode->AsParseNodeBlock()->pnodeLastValStmt != nullptr;",
          "635:             if (pnode->AsParseNodeWith()->pnodeBody == nullptr)",
          "639:             pnode = pnode->AsParseNodeWith()->pnodeBody;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "650:                 {",
          "652:                 return false;",
          "653:                 }",
          "654:                 ParseNode *pnodeCase;",
          "656:                 {",
          "658:                     {",
          "660:                         {",
          "662:                         return false;",
          "",
          "[Removed Lines]",
          "649:                 if (pnode->sxSwitch.pnodeDefault == nullptr)",
          "655:                 for (pnodeCase = pnode->sxSwitch.pnodeCases; pnodeCase; pnodeCase = pnodeCase->sxCase.pnodeNext)",
          "657:                     if (pnodeCase->sxCase.pnodeBody == nullptr)",
          "659:                         if (pnodeCase->sxCase.pnodeNext == nullptr)",
          "",
          "[Added Lines]",
          "649:                 if (pnode->AsParseNodeSwitch()->pnodeDefault == nullptr)",
          "655:                 for (pnodeCase = pnode->AsParseNodeSwitch()->pnodeCases; pnodeCase; pnodeCase = pnodeCase->AsParseNodeCase()->pnodeNext)",
          "657:                     if (pnodeCase->AsParseNodeCase()->pnodeBody == nullptr)",
          "659:                         if (pnodeCase->AsParseNodeCase()->pnodeNext == nullptr)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "665:                     }",
          "666:                     else",
          "667:                     {",
          "669:                         {",
          "670:                         return false;",
          "671:                         }",
          "",
          "[Removed Lines]",
          "668:                         if (!MustProduceValue(pnodeCase->sxCase.pnodeBody, scriptContext))",
          "",
          "[Added Lines]",
          "668:                         if (!MustProduceValue(pnodeCase->AsParseNodeCase()->pnodeBody, scriptContext))",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "677:         case knopTryCatch:",
          "681:             {",
          "682:                 return false;",
          "683:             }",
          "685:             {",
          "686:                 return false;",
          "687:             }",
          "689:             break;",
          "691:         case knopTryFinally:",
          "693:             {",
          "696:                 {",
          "697:                     return false;",
          "698:                 }",
          "700:                 break;",
          "701:             }",
          "704:             break;",
          "706:         default:",
          "",
          "[Removed Lines]",
          "679:             if (pnode->sxTryCatch.pnodeTry->sxTry.pnodeBody == nullptr ||",
          "680:                 pnode->sxTryCatch.pnodeCatch->sxCatch.pnodeBody == nullptr)",
          "684:             if (!MustProduceValue(pnode->sxTryCatch.pnodeCatch->sxCatch.pnodeBody, scriptContext))",
          "688:             pnode = pnode->sxTryCatch.pnodeTry->sxTry.pnodeBody;",
          "692:             if (pnode->sxTryFinally.pnodeFinally->sxFinally.pnodeBody == nullptr)",
          "695:                 if (pnode->sxTryFinally.pnodeTry->sxTry.pnodeBody == nullptr)",
          "699:                 pnode = pnode->sxTryFinally.pnodeTry->sxTry.pnodeBody;",
          "703:             pnode = pnode->sxTryFinally.pnodeFinally->sxFinally.pnodeBody;",
          "",
          "[Added Lines]",
          "679:             if (pnode->AsParseNodeTryCatch()->pnodeTry->AsParseNodeTry()->pnodeBody == nullptr ||",
          "680:                 pnode->AsParseNodeTryCatch()->pnodeCatch->AsParseNodeCatch()->pnodeBody == nullptr)",
          "684:             if (!MustProduceValue(pnode->AsParseNodeTryCatch()->pnodeCatch->AsParseNodeCatch()->pnodeBody, scriptContext))",
          "688:             pnode = pnode->AsParseNodeTryCatch()->pnodeTry->AsParseNodeTry()->pnodeBody;",
          "692:             if (pnode->AsParseNodeTryFinally()->pnodeFinally->AsParseNodeFinally()->pnodeBody == nullptr)",
          "695:                 if (pnode->AsParseNodeTryFinally()->pnodeTry->AsParseNodeTry()->pnodeBody == nullptr)",
          "699:                 pnode = pnode->AsParseNodeTryFinally()->pnodeTry->AsParseNodeTry()->pnodeBody;",
          "703:             pnode = pnode->AsParseNodeTryFinally()->pnodeFinally->AsParseNodeFinally()->pnodeBody;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "757: bool ByteCodeGenerator::IsFalse(ParseNode* node)",
          "758: {",
          "760: }",
          "763: bool ByteCodeGenerator::IsThis(ParseNode* pnode)",
          "764: {",
          "766: }",
          "769: bool ByteCodeGenerator::IsSuper(ParseNode* pnode)",
          "770: {",
          "772: }",
          "774: bool ByteCodeGenerator::IsES6DestructuringEnabled() const",
          "",
          "[Removed Lines]",
          "759:     return (node->nop == knopInt && node->sxInt.lw == 0) || node->nop == knopFalse;",
          "765:     return pnode->nop == knopName && pnode->IsSpecialName() && pnode->sxSpecialName.isThis;",
          "771:     return pnode->nop == knopName && pnode->IsSpecialName() && pnode->sxSpecialName.isSuper;",
          "",
          "[Added Lines]",
          "759:     return (node->nop == knopInt && node->AsParseNodeInt()->lw == 0) || node->nop == knopFalse;",
          "765:     return pnode->nop == knopName && pnode->IsSpecialName() && pnode->AsParseNodeSpecialName()->isThis;",
          "771:     return pnode->nop == knopName && pnode->IsSpecialName() && pnode->AsParseNodeSpecialName()->isSuper;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "989: Js::RegSlot ByteCodeGenerator::EnregisterStringTemplateCallsiteConstant(ParseNode* pnode)",
          "990: {",
          "991:     Assert(pnode->nop == knopStrTemplate);",
          "994:     Js::RegSlot loc = Js::Constants::NoRegister;",
          "995:     FuncInfo* top = funcInfoStack->Top();",
          "",
          "[Removed Lines]",
          "992:     Assert(pnode->sxStrTemplate.isTaggedTemplate);",
          "",
          "[Added Lines]",
          "992:     Assert(pnode->AsParseNodeStrTemplate()->isTaggedTemplate);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1103:     }",
          "1104:     else",
          "1105:     {",
          "1107:         Assert(currentScope);",
          "1108:         globalScope = currentScope;",
          "1109:     }",
          "",
          "[Removed Lines]",
          "1106:         currentScope = pnode->sxProg.scope;",
          "",
          "[Added Lines]",
          "1106:         currentScope = pnode->AsParseNodeProg()->scope;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1134:         byteCodeFunction->SetIsTopLevel(true);",
          "1137:         {",
          "1138:             byteCodeFunction->SetIsStrictMode();",
          "1139:         }",
          "",
          "[Removed Lines]",
          "1136:         if (pnode->sxFnc.GetStrictMode() != 0)",
          "",
          "[Added Lines]",
          "1136:         if (pnode->AsParseNodeFnc()->GetStrictMode() != 0)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1150:     FuncInfo *funcInfo = Anew(alloc, FuncInfo, Js::Constants::GlobalFunction,",
          "1151:         alloc, this, nullptr, globalScope, pnode, byteCodeFunction);",
          "1154:     if (currentAstSize > this->maxAstSize)",
          "1155:     {",
          "1156:         this->maxAstSize = currentAstSize;",
          "",
          "[Removed Lines]",
          "1153:     int32 currentAstSize = pnode->sxFnc.astSize;",
          "",
          "[Added Lines]",
          "1153:     int32 currentAstSize = pnode->AsParseNodeFnc()->astSize;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1185:             byteCodeGenerator->TopFuncInfo()->IsGlobalFunction();",
          "1186:         while (pnode->nop == knopList)",
          "1187:         {",
          "1189:             if (fTrackVal)",
          "1190:             {",
          "1194:                 {",
          "1196:                 }",
          "1198:                 {",
          "1201:                     fTrackVal = false;",
          "1202:                 }",
          "1203:             }",
          "1205:         }",
          "1206:         Visit(pnode, byteCodeGenerator, prefix, postfix, pnodeParent);",
          "1207:         if (fTrackVal)",
          "",
          "[Removed Lines]",
          "1188:             Visit(pnode->sxBin.pnode1, byteCodeGenerator, prefix, postfix, pnodeParent);",
          "1193:                 if (MustProduceValue(pnode->sxBin.pnode1, byteCodeGenerator->GetScriptContext()))",
          "1195:                     pnodeLastVal = pnode->sxBin.pnode1;",
          "1197:                 if (IsJump(pnode->sxBin.pnode1))",
          "1204:             pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "1188:             Visit(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator, prefix, postfix, pnodeParent);",
          "1193:                 if (MustProduceValue(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator->GetScriptContext()))",
          "1195:                     pnodeLastVal = pnode->AsParseNodeBin()->pnode1;",
          "1197:                 if (IsJump(pnode->AsParseNodeBin()->pnode1))",
          "1204:             pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1242:         Assert(!parsedFunctionBody->IsDeferredParseFunction() || parsedFunctionBody->IsReparsed());",
          "1246:         {",
          "1247:             parsedFunctionBody->SetAttributes(",
          "1248:                 (Js::FunctionInfo::Attributes)(parsedFunctionBody->GetAttributes() & ~Js::FunctionInfo::Attributes::CanDefer));",
          "1249:         }",
          "1250:         funcExprWithName =",
          "",
          "[Removed Lines]",
          "1244:         pnode->sxFnc.SetDeclaration(parsedFunctionBody->GetIsDeclaration());",
          "1245:         if (!pnode->sxFnc.CanBeDeferred())",
          "1251:             !(parsedFunctionBody->GetIsDeclaration() || pnode->sxFnc.IsMethod()) &&",
          "1252:             pnode->sxFnc.pnodeName != nullptr &&",
          "1253:             pnode->sxFnc.pnodeName->nop == knopVarDecl;",
          "1256:         Assert(parsedFunctionBody->GetLocalFunctionId() == pnode->sxFnc.functionId || !IsInNonDebugMode());",
          "",
          "[Added Lines]",
          "1244:         pnode->AsParseNodeFnc()->SetDeclaration(parsedFunctionBody->GetIsDeclaration());",
          "1245:         if (!pnode->AsParseNodeFnc()->CanBeDeferred())",
          "1251:             !(parsedFunctionBody->GetIsDeclaration() || pnode->AsParseNodeFnc()->IsMethod()) &&",
          "1252:             pnode->AsParseNodeFnc()->pnodeName != nullptr &&",
          "1253:             pnode->AsParseNodeFnc()->pnodeName->nop == knopVarDecl;",
          "1256:         Assert(parsedFunctionBody->GetLocalFunctionId() == pnode->AsParseNodeFnc()->functionId || !IsInNonDebugMode());",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1277:     else",
          "1278:     {",
          "1279:         funcExprWithName = *pfuncExprWithName;",
          "1286:         if (!CONFIG_FLAG(CreateFunctionProxy)) createFunctionBody = true;",
          "1288:         Js::FunctionInfo::Attributes attributes = Js::FunctionInfo::Attributes::None;",
          "1290:         {",
          "1291:             attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::ErrorOnNew | Js::FunctionInfo::Attributes::Async);",
          "1292:         }",
          "1294:         {",
          "1295:             attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::ErrorOnNew | Js::FunctionInfo::Attributes::Lambda);",
          "1296:         }",
          "1298:         {",
          "1299:             attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::SuperReference);",
          "1300:         }",
          "1302:         {",
          "1304:             {",
          "1305:                 attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::ClassConstructor);",
          "1308:                 {",
          "1309:                     attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::BaseConstructorKind);",
          "1310:                 }",
          "",
          "[Removed Lines]",
          "1280:         Js::LocalFunctionId functionId = pnode->sxFnc.functionId;",
          "1285:         bool createFunctionBody = (pnode->sxFnc.pnodeBody != nullptr);",
          "1289:         if (pnode->sxFnc.IsAsync())",
          "1293:         if (pnode->sxFnc.IsLambda())",
          "1297:         if (pnode->sxFnc.HasSuperReference())",
          "1301:         if (pnode->sxFnc.IsClassMember())",
          "1303:             if (pnode->sxFnc.IsClassConstructor())",
          "1307:                 if (pnode->sxFnc.IsBaseClassConstructor())",
          "",
          "[Added Lines]",
          "1280:         Js::LocalFunctionId functionId = pnode->AsParseNodeFnc()->functionId;",
          "1285:         bool createFunctionBody = (pnode->AsParseNodeFnc()->pnodeBody != nullptr);",
          "1289:         if (pnode->AsParseNodeFnc()->IsAsync())",
          "1293:         if (pnode->AsParseNodeFnc()->IsLambda())",
          "1297:         if (pnode->AsParseNodeFnc()->HasSuperReference())",
          "1301:         if (pnode->AsParseNodeFnc()->IsClassMember())",
          "1303:             if (pnode->AsParseNodeFnc()->IsClassConstructor())",
          "1307:                 if (pnode->AsParseNodeFnc()->IsBaseClassConstructor())",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1314:                 attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::ErrorOnNew | Js::FunctionInfo::Attributes::ClassMethod);",
          "1315:             }",
          "1316:         }",
          "1318:         {",
          "1319:             attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::Generator);",
          "1320:         }",
          "1322:         {",
          "1323:             attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::ErrorOnNew);",
          "1324:         }",
          "1326:         {",
          "1327:             attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::Module);",
          "1328:         }",
          "1330:         {",
          "1331:             attributes = (Js::FunctionInfo::Attributes)(attributes | Js::FunctionInfo::Attributes::CanDefer);",
          "1332:         }",
          "",
          "[Removed Lines]",
          "1317:         if (pnode->sxFnc.IsGenerator())",
          "1321:         if (pnode->sxFnc.IsAccessor())",
          "1325:         if (pnode->sxFnc.IsModule())",
          "1329:         if (pnode->sxFnc.CanBeDeferred())",
          "",
          "[Added Lines]",
          "1317:         if (pnode->AsParseNodeFnc()->IsGenerator())",
          "1321:         if (pnode->AsParseNodeFnc()->IsAccessor())",
          "1325:         if (pnode->AsParseNodeFnc()->IsModule())",
          "1329:         if (pnode->AsParseNodeFnc()->CanBeDeferred())",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1352:             }",
          "1353:             else",
          "1354:             {",
          "1356:                     m_utf8SourceInfo->GetSrcInfo()->sourceContextInfo->sourceContextId, functionId, propertyRecordList",
          "1357:                     , attributes",
          "1359:                         Js::FunctionBody::FunctionBodyFlags::Flags_None :",
          "1360:                         Js::FunctionBody::FunctionBodyFlags::Flags_HasNoExplicitReturnValue",
          "1361: #ifdef PERF_COUNTERS",
          "",
          "[Removed Lines]",
          "1355:                 parseableFunctionInfo = Js::FunctionBody::NewFromRecycler(scriptContext, name, nameLength, shortNameOffset, pnode->sxFnc.nestedCount, m_utf8SourceInfo,",
          "1358:                     , pnode->sxFnc.IsClassConstructor() ?",
          "",
          "[Added Lines]",
          "1355:                 parseableFunctionInfo = Js::FunctionBody::NewFromRecycler(scriptContext, name, nameLength, shortNameOffset, pnode->AsParseNodeFnc()->nestedCount, m_utf8SourceInfo,",
          "1358:                     , pnode->AsParseNodeFnc()->IsClassConstructor() ?",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1378:             if (reuseNestedFunc)",
          "1379:             {",
          "1380:                 Assert(!reuseNestedFunc->IsFunctionBody() || reuseNestedFunc->GetFunctionBody()->GetByteCode() != nullptr);",
          "1382:                 parseableFunctionInfo = reuseNestedFunc;",
          "1383:             }",
          "1384:             else",
          "1385:             {",
          "1388:                                             Js::FunctionBody::FunctionBodyFlags::Flags_None :",
          "1389:                                             Js::FunctionBody::FunctionBodyFlags::Flags_HasNoExplicitReturnValue);",
          "1390:             }",
          "",
          "[Removed Lines]",
          "1381:                 Assert(pnode->sxFnc.pnodeBody == nullptr);",
          "1386:                 parseableFunctionInfo = Js::ParseableFunctionInfo::New(scriptContext, pnode->sxFnc.nestedCount, functionId, m_utf8SourceInfo, name, nameLength, shortNameOffset, propertyRecordList, attributes,",
          "1387:                                         pnode->sxFnc.IsClassConstructor() ?",
          "",
          "[Added Lines]",
          "1381:                 Assert(pnode->AsParseNodeFnc()->pnodeBody == nullptr);",
          "1386:                 parseableFunctionInfo = Js::ParseableFunctionInfo::New(scriptContext, pnode->AsParseNodeFnc()->nestedCount, functionId, m_utf8SourceInfo, name, nameLength, shortNameOffset, propertyRecordList, attributes,",
          "1387:                                         pnode->AsParseNodeFnc()->IsClassConstructor() ?",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1395:         scriptContext->GetLibrary()->RegisterDynamicFunctionReference(parseableFunctionInfo);",
          "1397: #if DBG",
          "1399: #endif",
          "1404:         {",
          "1405:             scriptContext->optimizationOverrides.SetSideEffects(Js::SideEffects_Accessor);",
          "1406:         }",
          "",
          "[Removed Lines]",
          "1398:         parseableFunctionInfo->deferredParseNextFunctionId = pnode->sxFnc.deferredParseNextFunctionId;",
          "1400:         parseableFunctionInfo->SetIsDeclaration(pnode->sxFnc.IsDeclaration() != 0);",
          "1401:         parseableFunctionInfo->SetIsMethod(pnode->sxFnc.IsMethod() != 0);",
          "1402:         parseableFunctionInfo->SetIsAccessor(pnode->sxFnc.IsAccessor() != 0);",
          "1403:         if (pnode->sxFnc.IsAccessor())",
          "",
          "[Added Lines]",
          "1398:         parseableFunctionInfo->deferredParseNextFunctionId = pnode->AsParseNodeFnc()->deferredParseNextFunctionId;",
          "1400:         parseableFunctionInfo->SetIsDeclaration(pnode->AsParseNodeFnc()->IsDeclaration() != 0);",
          "1401:         parseableFunctionInfo->SetIsMethod(pnode->AsParseNodeFnc()->IsMethod() != 0);",
          "1402:         parseableFunctionInfo->SetIsAccessor(pnode->AsParseNodeFnc()->IsAccessor() != 0);",
          "1403:         if (pnode->AsParseNodeFnc()->IsAccessor())",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1409:     Scope *funcExprScope = nullptr;",
          "1410:     if (funcExprWithName)",
          "1411:     {",
          "1413:         Assert(funcExprScope);",
          "1414:         PushScope(funcExprScope);",
          "1417:         sym->SetIsFuncExpr(true);",
          "1419:         sym->SetPosition(parseableFunctionInfo->GetOrAddPropertyIdTracked(sym->GetName()));",
          "1423:         if (funcExprScope->GetIsObject())",
          "1424:         {",
          "",
          "[Removed Lines]",
          "1412:         funcExprScope = pnode->sxFnc.scope;",
          "1415:         Symbol *sym = AddSymbolToScope(funcExprScope, name, nameLength, pnode->sxFnc.pnodeName, STFunction);",
          "1421:         pnode->sxFnc.SetFuncSymbol(sym);",
          "",
          "[Added Lines]",
          "1412:         funcExprScope = pnode->AsParseNodeFnc()->scope;",
          "1415:         Symbol *sym = AddSymbolToScope(funcExprScope, name, nameLength, pnode->AsParseNodeFnc()->pnodeName, STFunction);",
          "1421:         pnode->AsParseNodeFnc()->SetFuncSymbol(sym);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1426:         }",
          "1427:     }",
          "1432:     if (paramScope == nullptr)",
          "1433:     {",
          "1434:         paramScope = Anew(alloc, Scope, alloc, ScopeType_Parameter, true);",
          "1436:         {",
          "1438:         }",
          "1439:     }",
          "1440:     if (bodyScope == nullptr)",
          "1441:     {",
          "1442:         bodyScope = Anew(alloc, Scope, alloc, ScopeType_FunctionBody, true);",
          "1444:         {",
          "1446:         }",
          "1447:     }",
          "1449:     AssertMsg(pnode->nop == knopFncDecl, \"Non-function declaration trying to create function body\");",
          "1451:     parseableFunctionInfo->SetIsGlobalFunc(false);",
          "1453:     {",
          "1454:         parseableFunctionInfo->SetIsStrictMode();",
          "1455:     }",
          "",
          "[Removed Lines]",
          "1429:     Scope *paramScope = pnode->sxFnc.pnodeScopes ? pnode->sxFnc.pnodeScopes->sxBlock.scope : nullptr;",
          "1430:     Scope *bodyScope = pnode->sxFnc.pnodeBodyScope ? pnode->sxFnc.pnodeBodyScope->sxBlock.scope : nullptr;",
          "1431:     Assert(paramScope != nullptr || !pnode->sxFnc.pnodeScopes);",
          "1435:         if (pnode->sxFnc.pnodeScopes)",
          "1437:             pnode->sxFnc.pnodeScopes->sxBlock.scope = paramScope;",
          "1443:         if (pnode->sxFnc.pnodeBodyScope)",
          "1445:             pnode->sxFnc.pnodeBodyScope->sxBlock.scope = bodyScope;",
          "1452:     if (pnode->sxFnc.GetStrictMode() != 0)",
          "",
          "[Added Lines]",
          "1429:     Scope *paramScope = pnode->AsParseNodeFnc()->pnodeScopes ? pnode->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->scope : nullptr;",
          "1430:     Scope *bodyScope = pnode->AsParseNodeFnc()->pnodeBodyScope ? pnode->AsParseNodeFnc()->pnodeBodyScope->AsParseNodeBlock()->scope : nullptr;",
          "1431:     Assert(paramScope != nullptr || !pnode->AsParseNodeFnc()->pnodeScopes);",
          "1435:         if (pnode->AsParseNodeFnc()->pnodeScopes)",
          "1437:             pnode->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->scope = paramScope;",
          "1443:         if (pnode->AsParseNodeFnc()->pnodeBodyScope)",
          "1445:             pnode->AsParseNodeFnc()->pnodeBodyScope->AsParseNodeBlock()->scope = bodyScope;",
          "1452:     if (pnode->AsParseNodeFnc()->GetStrictMode() != 0)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1460:     funcInfo->isReused = (reuseNestedFunc != nullptr);",
          "1461: #endif",
          "1464:     {",
          "",
          "[Removed Lines]",
          "1463:     if (pnode->sxFnc.GetArgumentsObjectEscapes())",
          "",
          "[Added Lines]",
          "1463:     if (pnode->AsParseNodeFnc()->GetArgumentsObjectEscapes())",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1481:         }",
          "1482:     }",
          "1487:     {",
          "1488:         funcInfo->SetCallsEval(true);",
          "",
          "[Removed Lines]",
          "1484:     funcInfo->SetChildCallsEval(!!pnode->sxFnc.ChildCallsEval());",
          "1486:     if (pnode->sxFnc.CallsEval())",
          "",
          "[Added Lines]",
          "1484:     funcInfo->SetChildCallsEval(!!pnode->AsParseNodeFnc()->ChildCallsEval());",
          "1486:     if (pnode->AsParseNodeFnc()->CallsEval())",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1506:         funcInfo->funcExprScope = funcExprScope;",
          "1507:     }",
          "1510:     if (currentAstSize > this->maxAstSize)",
          "1511:     {",
          "1512:         this->maxAstSize = currentAstSize;",
          "",
          "[Removed Lines]",
          "1509:     int32 currentAstSize = pnode->sxFnc.astSize;",
          "",
          "[Added Lines]",
          "1509:     int32 currentAstSize = pnode->AsParseNodeFnc()->astSize;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1515:     autoRestoreFunctionInfo.Clear();",
          "1518:     {",
          "1519:         funcInfo->ResetBodyAndParamScopeMerged();",
          "1520:     }",
          "",
          "[Removed Lines]",
          "1517:     if (!pnode->sxFnc.IsBodyAndParamScopeMerged())",
          "",
          "[Added Lines]",
          "1517:     if (!pnode->AsParseNodeFnc()->IsBodyAndParamScopeMerged())",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1551: void ByteCodeGenerator::StartBindCatch(ParseNode *pnode)",
          "1552: {",
          "1554:     Assert(scope);",
          "1555:     Assert(currentScope);",
          "1556:     scope->SetFunc(currentScope->GetFunc());",
          "",
          "[Removed Lines]",
          "1553:     Scope *scope = pnode->sxCatch.scope;",
          "",
          "[Added Lines]",
          "1553:     Scope *scope = pnode->AsParseNodeCatch()->scope;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1603: void ByteCodeGenerator::PushBlock(ParseNode *pnode)",
          "1604: {",
          "1606:     currentBlock = pnode;",
          "1607: }",
          "1609: void ByteCodeGenerator::PopBlock()",
          "1610: {",
          "1612: }",
          "1614: void ByteCodeGenerator::PushFuncInfo(char16 const * location, FuncInfo* funcInfo)",
          "",
          "[Removed Lines]",
          "1605:     pnode->sxBlock.SetEnclosingBlock(currentBlock);",
          "1611:     currentBlock = currentBlock->sxBlock.GetEnclosingBlock();",
          "",
          "[Added Lines]",
          "1605:     pnode->AsParseNodeBlock()->SetEnclosingBlock(currentBlock);",
          "1611:     currentBlock = currentBlock->AsParseNodeBlock()->GetEnclosingBlock();",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1746:     case knopConstDecl:",
          "1747:     case knopLetDecl:",
          "1748:     case knopVarDecl:",
          "1750:         break;",
          "1751:     case knopName:",
          "1754:         break;",
          "1755:     default:",
          "1756:         AnalysisAssert(0);",
          "",
          "[Removed Lines]",
          "1749:         sym = varDecl->sxVar.sym;",
          "1752:         AnalysisAssert(varDecl->sxPid.symRef);",
          "1753:         sym = *varDecl->sxPid.symRef;",
          "",
          "[Added Lines]",
          "1749:         sym = varDecl->AsParseNodeVar()->sym;",
          "1752:         AnalysisAssert(varDecl->AsParseNodePid()->symRef);",
          "1753:         sym = *varDecl->AsParseNodePid()->symRef;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1952:     SourceContextInfo * sourceContextInfo = utf8SourceInfo->GetSrcInfo()->sourceContextInfo;",
          "1954:     sourceContextInfo->EnsureInitialized();",
          "1956:     ArenaAllocator localAlloc(_u(\"ByteCode\"), threadContext->GetPageAllocator(), Js::Throw::OutOfMemory);",
          "",
          "[Removed Lines]",
          "1953:     utf8SourceInfo->EnsureInitialized((grfscr & fscrDynamicCode) ? 4 : (sourceContextInfo->nextLocalFunctionId - pnode->sxFnc.functionId));",
          "",
          "[Added Lines]",
          "1953:     utf8SourceInfo->EnsureInitialized((grfscr & fscrDynamicCode) ? 4 : (sourceContextInfo->nextLocalFunctionId - pnode->AsParseNodeFnc()->functionId));",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1980:     {",
          "1982:         byteCodeGenerator->GetRootFunc()->GetFunctionBody()->SetFuncEscapes(",
          "1984:     }",
          "1986: #ifdef IR_VIEWER",
          "",
          "[Removed Lines]",
          "1983:             byteCodeGenerator->funcEscapes || pnode->sxProg.m_UsesArgumentsAtGlobal);",
          "",
          "[Added Lines]",
          "1983:             byteCodeGenerator->funcEscapes || pnode->AsParseNodeProg()->m_UsesArgumentsAtGlobal);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2184:     BindReference(pnode, byteCodeGenerator);",
          "2187:     Assert(right->nop == knopName);",
          "2191:     right->grfpn |= fpnMemberReference;",
          "2192: }",
          "",
          "[Removed Lines]",
          "2186:     ParseNode *right = pnode->sxBin.pnode2;",
          "2188:     byteCodeGenerator->AssignPropertyId(right->sxPid.pid);",
          "2189:     right->sxPid.sym = nullptr;",
          "2190:     right->sxPid.symRef = nullptr;",
          "",
          "[Added Lines]",
          "2186:     ParseNode *right = pnode->AsParseNodeBin()->pnode2;",
          "2188:     byteCodeGenerator->AssignPropertyId(right->AsParseNodePid()->pid);",
          "2189:     right->AsParseNodePid()->sym = nullptr;",
          "2190:     right->AsParseNodePid()->symRef = nullptr;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2202:     {",
          "2203:     case knopCall:",
          "2204:         isCallNode = true;",
          "2206:         break;",
          "2207:     case knopDelete:",
          "2208:     case knopTypeof:",
          "2210:         break;",
          "2211:     case knopDot:",
          "2212:     case knopIndex:",
          "2213:         funcEscapes = true;",
          "2215:     case knopAsg:",
          "2217:         break;",
          "2218:     default:",
          "2219:         AssertMsg(0, \"Unexpected opcode in BindReference\");",
          "",
          "[Removed Lines]",
          "2205:         pnode = pnode->sxCall.pnodeTarget;",
          "2209:         pnode = pnode->sxUni.pnode1;",
          "2216:         pnode = pnode->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "2205:         pnode = pnode->AsParseNodeCall()->pnodeTarget;",
          "2209:         pnode = pnode->AsParseNodeUni()->pnode1;",
          "2216:         pnode = pnode->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2223:     if (pnode->nop == knopName)",
          "2224:     {",
          "2227:         if (funcEscapes &&",
          "2231:         {",
          "2235:         }",
          "2236:     }",
          "2237: }",
          "",
          "[Removed Lines]",
          "2225:         pnode->sxPid.sym = byteCodeGenerator->FindSymbol(pnode->sxPid.symRef, pnode->sxPid.pid, isCallNode);",
          "2228:             pnode->sxPid.sym &&",
          "2229:             pnode->sxPid.sym->GetSymbolType() == STFunction &&",
          "2230:             (!pnode->sxPid.sym->GetIsGlobal() || (byteCodeGenerator->GetFlags() & fscrEval)))",
          "2234:             byteCodeGenerator->FuncEscapes(pnode->sxPid.sym->GetScope());",
          "",
          "[Added Lines]",
          "2225:         pnode->AsParseNodePid()->sym = byteCodeGenerator->FindSymbol(pnode->AsParseNodePid()->symRef, pnode->AsParseNodePid()->pid, isCallNode);",
          "2228:             pnode->AsParseNodePid()->sym &&",
          "2229:             pnode->AsParseNodePid()->sym->GetSymbolType() == STFunction &&",
          "2230:             (!pnode->AsParseNodePid()->sym->GetIsGlobal() || (byteCodeGenerator->GetFlags() & fscrEval)))",
          "2234:             byteCodeGenerator->FuncEscapes(pnode->AsParseNodePid()->sym->GetScope());",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2252: {",
          "2253:     Assert(byteCodeGenerator->TopFuncInfo()->varRegsCount == 0);",
          "2254:     Js::ArgSlot pos = 1;",
          "2257:     auto addArgToScope = [&](ParseNode *arg)",
          "2258:     {",
          "2259:         if (arg->IsVarLetOrConst())",
          "2260:         {",
          "2261:             Symbol *formal = byteCodeGenerator->AddSymbolToScope(byteCodeGenerator->TopFuncInfo()->GetParamScope(),",
          "2264:                 arg,",
          "2265:                 STFormal);",
          "2266: #if DBG_DUMP",
          "2267:             if (byteCodeGenerator->Trace())",
          "2268:             {",
          "2270:             }",
          "2271: #endif",
          "",
          "[Removed Lines]",
          "2255:     bool isNonSimpleParameterList = pnode->sxFnc.HasNonSimpleParameterList();",
          "2262:                 reinterpret_cast<const char16*>(arg->sxVar.pid->Psz()),",
          "2263:                 arg->sxVar.pid->Cch(),",
          "2269:                 Output::Print(_u(\"current context has declared arg %s of type %s at position %d\\n\"), arg->sxVar.pid->Psz(), formal->GetSymbolTypeName(), pos);",
          "",
          "[Added Lines]",
          "2255:     bool isNonSimpleParameterList = pnode->AsParseNodeFnc()->HasNonSimpleParameterList();",
          "2262:                 reinterpret_cast<const char16*>(arg->AsParseNodeVar()->pid->Psz()),",
          "2263:                 arg->AsParseNodeVar()->pid->Cch(),",
          "2269:                 Output::Print(_u(\"current context has declared arg %s of type %s at position %d\\n\"), arg->AsParseNodeVar()->pid->Psz(), formal->GetSymbolTypeName(), pos);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2275:                 formal->SetIsNonSimpleParameter(true);",
          "2276:             }",
          "2279:             MarkFormal(byteCodeGenerator, formal, assignLocation || isNonSimpleParameterList, isNonSimpleParameterList);",
          "2280:         }",
          "2281:         else if (arg->nop == knopParamPattern)",
          "2282:         {",
          "2284:         }",
          "2285:         else",
          "2286:         {",
          "",
          "[Removed Lines]",
          "2278:             arg->sxVar.sym = formal;",
          "2283:             arg->sxParamPattern.location = byteCodeGenerator->NextVarRegister();",
          "",
          "[Added Lines]",
          "2278:             arg->AsParseNodeVar()->sym = formal;",
          "2283:             arg->AsParseNodeParamPattern()->location = byteCodeGenerator->NextVarRegister();",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2293:     MapFormalsWithoutRest(pnode, addArgToScope);",
          "2294:     byteCodeGenerator->SetNumberOfInArgs(pos);",
          "2297:     {",
          "2300:         bool assignLocationSave = assignLocation;",
          "2301:         assignLocation = true;",
          "2305:         assignLocation = assignLocationSave;",
          "2306:     }",
          "",
          "[Removed Lines]",
          "2296:     if (pnode->sxFnc.pnodeRest != nullptr)",
          "2303:         addArgToScope(pnode->sxFnc.pnodeRest);",
          "",
          "[Added Lines]",
          "2296:     if (pnode->AsParseNodeFnc()->pnodeRest != nullptr)",
          "2303:         addArgToScope(pnode->AsParseNodeFnc()->pnodeRest);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2314: {",
          "2315:     while (vars != nullptr)",
          "2316:     {",
          "2319: #if DBG_DUMP",
          "2320:         if (sym->GetSymbolType() == STVariable && byteCodeGenerator->Trace())",
          "2321:         {",
          "2322:             Output::Print(_u(\"current context has declared var %s of type %s\\n\"),",
          "2324:         }",
          "2325: #endif",
          "2328:         {",
          "2335:             if (sym->IsArguments())",
          "2336:             {",
          "2337:                 FuncInfo* funcInfo = byteCodeGenerator->TopFuncInfo();",
          "",
          "[Removed Lines]",
          "2317:         Symbol *sym = byteCodeGenerator->AddSymbolToFunctionScope(reinterpret_cast<const char16*>(vars->sxVar.pid->Psz()), vars->sxVar.pid->Cch(), vars, STVariable);",
          "2323:                 vars->sxVar.pid->Psz(), sym->GetSymbolTypeName());",
          "2327:         if (sym->IsArguments() || sym->IsSpecialSymbol() || vars->sxVar.pnodeInit == nullptr)",
          "2334:             vars->sxVar.sym = sym;",
          "",
          "[Added Lines]",
          "2317:         Symbol *sym = byteCodeGenerator->AddSymbolToFunctionScope(reinterpret_cast<const char16*>(vars->AsParseNodeVar()->pid->Psz()), vars->AsParseNodeVar()->pid->Cch(), vars, STVariable);",
          "2323:                 vars->AsParseNodeVar()->pid->Psz(), sym->GetSymbolTypeName());",
          "2327:         if (sym->IsArguments() || sym->IsSpecialSymbol() || vars->AsParseNodeVar()->pnodeInit == nullptr)",
          "2334:             vars->AsParseNodeVar()->sym = sym;",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2361:         }",
          "2362:         else",
          "2363:         {",
          "2365:         }",
          "2367:     }",
          "2368: }",
          "",
          "[Removed Lines]",
          "2364:             vars->sxVar.sym = nullptr;",
          "2366:         vars = vars->sxVar.pnodeNext;",
          "",
          "[Added Lines]",
          "2364:             vars->AsParseNodeVar()->sym = nullptr;",
          "2366:         vars = vars->AsParseNodeVar()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2376:         {",
          "2377:         case knopFncDecl:",
          "2378:             action(fns);",
          "2380:             break;",
          "2382:         case knopBlock:",
          "2384:             break;",
          "2386:         case knopCatch:",
          "2388:             break;",
          "2390:         case knopWith:",
          "2392:             break;",
          "2394:         default:",
          "",
          "[Removed Lines]",
          "2379:             fns = fns->sxFnc.pnodeNext;",
          "2383:             fns = fns->sxBlock.pnodeNext;",
          "2387:             fns = fns->sxCatch.pnodeNext;",
          "2391:             fns = fns->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "2379:             fns = fns->AsParseNodeFnc()->pnodeNext;",
          "2383:             fns = fns->AsParseNodeBlock()->pnodeNext;",
          "2387:             fns = fns->AsParseNodeCatch()->pnodeNext;",
          "2391:             fns = fns->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2411:     bool fIsRoot = (!(byteCodeGenerator->GetFlags() & fscrGlobalCode) &&",
          "2412:         parentFunc->IsGlobalFunction() &&",
          "2415:     const char16 *funcName = Js::Constants::AnonymousFunction;",
          "2416:     uint funcNameLength = Js::Constants::AnonymousFunctionLength;",
          "2417:     uint functionNameOffset = 0;",
          "2418:     bool funcExprWithName = false;",
          "2421:     {",
          "2425:         Assert(funcNameLength != 0 || funcNameLength == (int)wcslen(funcName));",
          "2426:     }",
          "2428:     {",
          "2431:         {",
          "2434:             functionNameOffset = 0;",
          "2435:         }",
          "2436:     }",
          "2439:     {",
          "2442:         functionNameOffset = 0;",
          "",
          "[Removed Lines]",
          "2413:         parentFunc->root->sxFnc.GetTopLevelScope() == pnode);",
          "2420:     if (pnode->sxFnc.hint != nullptr)",
          "2422:         funcName = reinterpret_cast<const char16*>(pnode->sxFnc.hint);",
          "2423:         funcNameLength = pnode->sxFnc.hintLength;",
          "2424:         functionNameOffset = pnode->sxFnc.hintOffset;",
          "2427:     if (pnode->sxFnc.IsDeclaration() || pnode->sxFnc.IsMethod())",
          "2430:         if (pnode->sxFnc.pid && !pnode->sxFnc.IsClassMember())",
          "2432:             funcName = reinterpret_cast<const char16*>(pnode->sxFnc.pid->Psz());",
          "2433:             funcNameLength = pnode->sxFnc.pid->Cch();",
          "2437:     else if ((pnode->sxFnc.pnodeName != nullptr) &&",
          "2438:         (pnode->sxFnc.pnodeName->nop == knopVarDecl))",
          "2440:         funcName = reinterpret_cast<const char16*>(pnode->sxFnc.pnodeName->sxVar.pid->Psz());",
          "2441:         funcNameLength = pnode->sxFnc.pnodeName->sxVar.pid->Cch();",
          "",
          "[Added Lines]",
          "2413:         parentFunc->root->AsParseNodeFnc()->GetTopLevelScope() == pnode);",
          "2420:     if (pnode->AsParseNodeFnc()->hint != nullptr)",
          "2422:         funcName = reinterpret_cast<const char16*>(pnode->AsParseNodeFnc()->hint);",
          "2423:         funcNameLength = pnode->AsParseNodeFnc()->hintLength;",
          "2424:         functionNameOffset = pnode->AsParseNodeFnc()->hintOffset;",
          "2427:     if (pnode->AsParseNodeFnc()->IsDeclaration() || pnode->AsParseNodeFnc()->IsMethod())",
          "2430:         if (pnode->AsParseNodeFnc()->pid && !pnode->AsParseNodeFnc()->IsClassMember())",
          "2432:             funcName = reinterpret_cast<const char16*>(pnode->AsParseNodeFnc()->pid->Psz());",
          "2433:             funcNameLength = pnode->AsParseNodeFnc()->pid->Cch();",
          "2437:     else if ((pnode->AsParseNodeFnc()->pnodeName != nullptr) &&",
          "2438:         (pnode->AsParseNodeFnc()->pnodeName->nop == knopVarDecl))",
          "2440:         funcName = reinterpret_cast<const char16*>(pnode->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid->Psz());",
          "2441:         funcNameLength = pnode->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->pid->Cch();",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2451:         Output::Print(_u(\"function start %s\\n\"), funcName);",
          "2452:     }",
          "2456:     funcInfo->byteCodeFunction->SetIsNamedFunctionExpression(funcExprWithName);",
          "2458:     if (fIsRoot)",
          "2459:     {",
          "2460:         byteCodeGenerator->SetRootFuncInfo(funcInfo);",
          "2461:     }",
          "2464:     {",
          "",
          "[Removed Lines]",
          "2454:     Assert(pnode->sxFnc.funcInfo == nullptr);",
          "2455:     FuncInfo* funcInfo = pnode->sxFnc.funcInfo = byteCodeGenerator->StartBindFunction(funcName, funcNameLength, functionNameOffset, &funcExprWithName, pnode, reuseNestedFunc);",
          "2457:     funcInfo->byteCodeFunction->SetIsNameIdentifierRef(pnode->sxFnc.isNameIdentifierRef);",
          "2463:     if (pnode->sxFnc.pnodeBody == nullptr)",
          "",
          "[Added Lines]",
          "2454:     Assert(pnode->AsParseNodeFnc()->funcInfo == nullptr);",
          "2455:     FuncInfo* funcInfo = pnode->AsParseNodeFnc()->funcInfo = byteCodeGenerator->StartBindFunction(funcName, funcNameLength, functionNameOffset, &funcExprWithName, pnode, reuseNestedFunc);",
          "2457:     funcInfo->byteCodeFunction->SetIsNameIdentifierRef(pnode->AsParseNodeFnc()->isNameIdentifierRef);",
          "2463:     if (pnode->AsParseNodeFnc()->pnodeBody == nullptr)",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2471:         return funcInfo;",
          "2472:     }",
          "2475:     {",
          "2479:         {",
          "",
          "[Removed Lines]",
          "2474:     if (pnode->sxFnc.HasReferenceableBuiltInArguments())",
          "2478:         if (pnode->sxFnc.CallsEval())",
          "",
          "[Added Lines]",
          "2474:     if (pnode->AsParseNodeFnc()->HasReferenceableBuiltInArguments())",
          "2478:         if (pnode->AsParseNodeFnc()->CallsEval())",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2487:                 byteCodeGenerator->AssignNullConstRegister();",
          "2488:             }",
          "2489:         }",
          "2491:         {",
          "2493:             funcInfo->SetHasArguments(true);",
          "2494:             funcInfo->GetParsedFunctionBody()->SetUsesArgumentsObject(true);",
          "2496:             {",
          "2498: #ifdef PERF_HINT",
          "2499:                 if (PHASE_TRACE1(Js::PerfHintPhase) && !doStackArgsOpt)",
          "2500:                 {",
          "",
          "[Removed Lines]",
          "2490:         else if (pnode->sxFnc.UsesArguments())",
          "2495:             if (pnode->sxFnc.HasHeapArguments())",
          "2497:                 bool doStackArgsOpt = (!pnode->sxFnc.HasAnyWriteToFormals() || funcInfo->GetIsStrictMode());",
          "",
          "[Added Lines]",
          "2490:         else if (pnode->AsParseNodeFnc()->UsesArguments())",
          "2495:             if (pnode->AsParseNodeFnc()->HasHeapArguments())",
          "2497:                 bool doStackArgsOpt = (!pnode->AsParseNodeFnc()->HasAnyWriteToFormals() || funcInfo->GetIsStrictMode());",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2503: #endif",
          "2508:                 {",
          "2509:                     doStackArgsOpt = false;",
          "2510: #ifdef PERF_HINT",
          "2511:                     if (PHASE_TRACE1(Js::PerfHintPhase))",
          "2512:                     {",
          "2514:                         {",
          "2515:                             WritePerfHint(PerfHints::HasWithBlock, funcInfo->GetParsedFunctionBody(), 0);",
          "2516:                         }",
          "",
          "[Removed Lines]",
          "2506:                 if ((doStackArgsOpt && pnode->sxFnc.funcInfo->GetParamScope()->Count() > 1) && ((byteCodeGenerator->GetFlags() & fscrEval) ||",
          "2507:                     pnode->sxFnc.HasWithStmt() || byteCodeGenerator->IsInDebugMode() || PHASE_OFF1(Js::StackArgFormalsOptPhase) || PHASE_OFF1(Js::StackArgOptPhase)))",
          "2513:                         if (pnode->sxFnc.HasWithStmt())",
          "",
          "[Added Lines]",
          "2506:                 if ((doStackArgsOpt && pnode->AsParseNodeFnc()->funcInfo->GetParamScope()->Count() > 1) && ((byteCodeGenerator->GetFlags() & fscrEval) ||",
          "2507:                     pnode->AsParseNodeFnc()->HasWithStmt() || byteCodeGenerator->IsInDebugMode() || PHASE_OFF1(Js::StackArgFormalsOptPhase) || PHASE_OFF1(Js::StackArgOptPhase)))",
          "2513:                         if (pnode->AsParseNodeFnc()->HasWithStmt())",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2522:                     }",
          "2523: #endif",
          "2524:                 }",
          "2526:                 if (funcInfo->inArgsCount == 0)",
          "2527:                 {",
          "",
          "[Removed Lines]",
          "2525:                 funcInfo->SetHasHeapArguments(true, !pnode->sxFnc.IsCoroutine() && doStackArgsOpt /*= Optimize arguments in backend*/);",
          "",
          "[Added Lines]",
          "2525:                 funcInfo->SetHasHeapArguments(true, !pnode->AsParseNodeFnc()->IsCoroutine() && doStackArgsOpt /*= Optimize arguments in backend*/);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2540:         funcInfo->GetParsedFunctionBody()->SetHasOrParentHasArguments(true);",
          "2541:     }",
          "2544:     bool assignLocationForFormals = !ByteCodeGenerator::NeedScopeObjectForArguments(funcInfo, funcInfo->root);",
          "2545:     AddArgsToScope(pnode, byteCodeGenerator, assignLocationForFormals);",
          "",
          "[Removed Lines]",
          "2542:     PreVisitBlock(pnode->sxFnc.pnodeScopes, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "2542:     PreVisitBlock(pnode->AsParseNodeFnc()->pnodeScopes, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2556:     {",
          "2557:         return;",
          "2558:     }",
          "2561:     if (sym)",
          "2562:     {",
          "2563:         if (!sym->GetIsGlobal() && !(callee->funcExprScope && callee->funcExprScope->GetIsObject()))",
          "",
          "[Removed Lines]",
          "2555:     if (pnode->sxFnc.pnodeName == nullptr)",
          "2559:     Assert(pnode->sxFnc.pnodeName->nop == knopVarDecl);",
          "2560:     Symbol *sym = pnode->sxFnc.pnodeName->sxVar.sym;",
          "",
          "[Added Lines]",
          "2555:     if (pnode->AsParseNodeFnc()->pnodeName == nullptr)",
          "2559:     Assert(pnode->AsParseNodeFnc()->pnodeName->nop == knopVarDecl);",
          "2560:     Symbol *sym = pnode->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2571:             {",
          "",
          "[Removed Lines]",
          "2570:             if (!pnode->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "2570:             if (!pnode->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2607:                 }",
          "2608:             }",
          "2609:         }",
          "2611:         {",
          "2612:             if (sym->GetLocation() == Js::Constants::NoRegister)",
          "2613:             {",
          "",
          "[Removed Lines]",
          "2610:         else if (!pnode->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "2610:         else if (!pnode->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2646:     FuncInfo *top = byteCodeGenerator->TopFuncInfo();",
          "2648:     bool funcExprWithName = !top->IsGlobalFunction() && sym && sym->GetIsFuncExpr();",
          "2650:     if (top->IsLambda())",
          "",
          "[Removed Lines]",
          "2647:     Symbol *sym = pnode->sxFnc.GetFuncSymbol();",
          "",
          "[Added Lines]",
          "2647:     Symbol *sym = pnode->AsParseNodeFnc()->GetFuncSymbol();",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2682:             Assert(CONFIG_FLAG(DeferNested));",
          "2683:             byteCodeGenerator->ProcessCapturedSym(sym);",
          "2686:             {",
          "2687:                 top->SetFuncExprNameReference(true);",
          "2689:                 {",
          "2690:                     top->GetParsedFunctionBody()->SetFuncExprNameReference(true);",
          "2691:                 }",
          "",
          "[Removed Lines]",
          "2685:             if (!top->root->sxFnc.NameIsHidden())",
          "2688:                 if (pnode->sxFnc.pnodeBody)",
          "",
          "[Added Lines]",
          "2685:             if (!top->root->AsParseNodeFnc()->NameIsHidden())",
          "2688:                 if (pnode->AsParseNodeFnc()->pnodeBody)",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2728:         top->bodyScope->SetIsObject();",
          "2729:     }",
          "2732:     {",
          "2733:         if (!top->IsGlobalFunction())",
          "2734:         {",
          "",
          "[Removed Lines]",
          "2731:     if (pnode->sxFnc.pnodeBody)",
          "",
          "[Added Lines]",
          "2731:     if (pnode->AsParseNodeFnc()->pnodeBody)",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2758:                 top->SetHasLocalInClosure(true);",
          "2759:             }",
          "2763:         }",
          "",
          "[Removed Lines]",
          "2761:             PostVisitBlock(pnode->sxFnc.pnodeBodyScope, byteCodeGenerator);",
          "2762:             PostVisitBlock(pnode->sxFnc.pnodeScopes, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "2761:             PostVisitBlock(pnode->AsParseNodeFnc()->pnodeBodyScope, byteCodeGenerator);",
          "2762:             PostVisitBlock(pnode->AsParseNodeFnc()->pnodeScopes, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2775:             top->GetCallsEval() ||",
          "2776:             top->GetHasClosureReference() ||",
          "2777:             byteCodeGenerator->InDynamicScope() ||",
          "",
          "[Removed Lines]",
          "2774:         if (pnode->sxFnc.nestedCount != 0 ||",
          "",
          "[Added Lines]",
          "2774:         if (pnode->AsParseNodeFnc()->nestedCount != 0 ||",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2823:                 if (top->GetCallsEval() ||",
          "2825:                     || (top->GetHasArguments()",
          "2827:                         && byteCodeGenerator->IsInDebugMode()))",
          "2828:                 {",
          "2829:                     byteCodeGenerator->SetNeedEnvRegister(); // This to ensure that Env should be there when the FrameDisplay register is there.",
          "",
          "[Removed Lines]",
          "2824:                     pnode->sxFnc.nestedCount != 0",
          "2826:                         && (pnode->sxFnc.pnodeParams != nullptr)",
          "",
          "[Added Lines]",
          "2824:                     pnode->AsParseNodeFnc()->nestedCount != 0",
          "2826:                         && (pnode->AsParseNodeFnc()->pnodeParams != nullptr)",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2845:                     {",
          "2846:                         if (pnodeArg->IsVarLetOrConst())",
          "2847:                         {",
          "2849:                             if (sym->GetScopeSlot() != Js::Constants::NoProperty)",
          "2850:                             {",
          "2851:                                 top->argsPlaceHolderSlotCount++; // Same name args appeared before",
          "",
          "[Removed Lines]",
          "2848:                             Symbol* sym = pnodeArg->sxVar.sym;",
          "",
          "[Added Lines]",
          "2848:                             Symbol* sym = pnodeArg->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2876:                     Assert(top->GetHasHeapArguments());",
          "2877:                     if (ByteCodeGenerator::NeedScopeObjectForArguments(top, pnode)",
          "2879:                     {",
          "2880:                         top->byteCodeFunction->SetHasImplicitArgIns(false);",
          "2881:                     }",
          "",
          "[Removed Lines]",
          "2878:                         && !pnode->sxFnc.HasNonSimpleParameterList())",
          "",
          "[Added Lines]",
          "2878:                         && !pnode->AsParseNodeFnc()->HasNonSimpleParameterList())",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2884:         }",
          "2885:         else",
          "2886:         {",
          "2889:             bool newScopeForEval = (top->byteCodeFunction->GetIsStrictMode() && (byteCodeGenerator->GetFlags() & fscrEval));",
          "",
          "[Removed Lines]",
          "2887:             Assert(top->IsGlobalFunction() || pnode->sxFnc.IsModule());",
          "",
          "[Added Lines]",
          "2887:             Assert(top->IsGlobalFunction() || pnode->AsParseNodeFnc()->IsModule());",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2994:         if (currentBlock)",
          "2995:         {",
          "2996:             Assert(currentBlock->nop == knopBlock);",
          "2998:         }",
          "2999:         parentFunc->SetHasHeapArguments(true);",
          "3000:         setHasNonLocalReference = true;",
          "",
          "[Removed Lines]",
          "2997:             currentBlock->sxBlock.SetChildCallsEval(true);",
          "",
          "[Added Lines]",
          "2997:             currentBlock->AsParseNodeBlock()->SetChildCallsEval(true);",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3024:         parentFunctionBody->SetHasDoneAllNonLocalReferenced(true);",
          "3025:     }",
          "3028:     {",
          "3029:         top->AssignUndefinedConstRegister();",
          "3030:     }",
          "3033:     {",
          "3034:         if (!top->IsBaseClassConstructor())",
          "3035:         {",
          "",
          "[Removed Lines]",
          "3027:     if (pnode->sxFnc.IsGenerator())",
          "3032:     if ((top->root->sxFnc.IsConstructor() && (top->GetCallsEval() || top->GetChildCallsEval())) || top->IsClassConstructor())",
          "",
          "[Added Lines]",
          "3027:     if (pnode->AsParseNodeFnc()->IsGenerator())",
          "3032:     if ((top->root->AsParseNodeFnc()->IsConstructor() && (top->GetCallsEval() || top->GetChildCallsEval())) || top->IsClassConstructor())",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3041:     AssignFuncSymRegister(pnode, byteCodeGenerator, top);",
          "3045:     {",
          "3046:         bool doStackArgsOpt = top->byteCodeFunction->GetDoBackendArgumentsOptimization();",
          "",
          "[Removed Lines]",
          "3043:     if (pnode->sxFnc.pnodeBody && pnode->sxFnc.HasReferenceableBuiltInArguments() && pnode->sxFnc.UsesArguments() &&",
          "3044:         pnode->sxFnc.HasHeapArguments())",
          "",
          "[Added Lines]",
          "3043:     if (pnode->AsParseNodeFnc()->pnodeBody && pnode->AsParseNodeFnc()->HasReferenceableBuiltInArguments() && pnode->AsParseNodeFnc()->UsesArguments() &&",
          "3044:         pnode->AsParseNodeFnc()->HasHeapArguments())",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3105:     Assert(pnodeChild && pnodeChild->nop == knopFncDecl);",
          "3108:     {",
          "3110:         Scope *scopeChild = funcHome->GetCurrentChildScope();",
          "",
          "[Removed Lines]",
          "3107:     if (pnodeChild->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "3107:     if (pnodeChild->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "3151:     {",
          "3152:         do",
          "3153:         {",
          "3156:         }",
          "3157:         while (pnode->nop == knopList);",
          "3158:         MarkInit(pnode);",
          "",
          "[Removed Lines]",
          "3154:             MarkInit(pnode->sxBin.pnode1);",
          "3155:             pnode = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "3154:             MarkInit(pnode->AsParseNodeBin()->pnode1);",
          "3155:             pnode = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "3163:         ParseNode *pnodeInit = nullptr;",
          "3164:         if (pnode->nop == knopVarDecl)",
          "3165:         {",
          "3168:         }",
          "3170:         {",
          "3173:         }",
          "3175:         if (sym && !sym->GetIsUsed() && pnodeInit)",
          "",
          "[Removed Lines]",
          "3166:             sym = pnode->sxVar.sym;",
          "3167:             pnodeInit = pnode->sxVar.pnodeInit;",
          "3169:         else if (pnode->nop == knopAsg && pnode->sxBin.pnode1->nop == knopName)",
          "3171:             sym = pnode->sxBin.pnode1->sxPid.sym;",
          "3172:             pnodeInit = pnode->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "3166:             sym = pnode->AsParseNodeVar()->sym;",
          "3167:             pnodeInit = pnode->AsParseNodeVar()->pnodeInit;",
          "3169:         else if (pnode->nop == knopAsg && pnode->AsParseNodeBin()->pnode1->nop == knopName)",
          "3171:             sym = pnode->AsParseNodeBin()->pnode1->AsParseNodePid()->sym;",
          "3172:             pnodeInit = pnode->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "3187: {",
          "3188:     VisitFncDecls(scope, [byteCodeGenerator](ParseNode *fn)",
          "3189:     {",
          "3192:         {",
          "3194:             if (byteCodeGenerator->Trace())",
          "3195:             {",
          "3196:                 Output::Print(_u(\"current context has declared function %s\\n\"), fnName);",
          "",
          "[Removed Lines]",
          "3190:         ParseNode *pnodeName = fn->sxFnc.pnodeName;",
          "3191:         if (pnodeName && pnodeName->nop == knopVarDecl && fn->sxFnc.IsDeclaration())",
          "3193:             const char16 *fnName = pnodeName->sxVar.pid->Psz();",
          "",
          "[Added Lines]",
          "3190:         ParseNode *pnodeName = fn->AsParseNodeFnc()->pnodeName;",
          "3191:         if (pnodeName && pnodeName->nop == knopVarDecl && fn->AsParseNodeFnc()->IsDeclaration())",
          "3193:             const char16 *fnName = pnodeName->AsParseNodeVar()->pid->Psz();",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "3200:             Symbol *sym;",
          "3201:             if (!byteCodeGenerator->GetCurrentScope()->IsGlobalEvalBlockScope())",
          "3202:             {",
          "3204:             }",
          "3205:             else",
          "3206:             {",
          "3208:             }",
          "3211:             if (sym->GetScope() != sym->GetScope()->GetFunc()->GetBodyScope() &&",
          "3212:                 sym->GetScope() != sym->GetScope()->GetFunc()->GetParamScope())",
          "3213:             {",
          "",
          "[Removed Lines]",
          "3203:                 sym = byteCodeGenerator->AddSymbolToScope(byteCodeGenerator->GetCurrentScope(), fnName, pnodeName->sxVar.pid->Cch(), pnodeName, STFunction);",
          "3207:                 sym = byteCodeGenerator->AddSymbolToFunctionScope(fnName, pnodeName->sxVar.pid->Cch(), pnodeName, STFunction);",
          "3210:             pnodeName->sxVar.sym = sym;",
          "",
          "[Added Lines]",
          "3203:                 sym = byteCodeGenerator->AddSymbolToScope(byteCodeGenerator->GetCurrentScope(), fnName, pnodeName->AsParseNodeVar()->pid->Cch(), pnodeName, STFunction);",
          "3207:                 sym = byteCodeGenerator->AddSymbolToFunctionScope(fnName, pnodeName->AsParseNodeVar()->pid->Cch(), pnodeName, STFunction);",
          "3210:             pnodeName->AsParseNodeVar()->sym = sym;",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "3230:     Js::ParseableFunctionInfo* parentFunc = parentFuncInfo->byteCodeFunction;",
          "3231:     ParseNode* pnodeScope;",
          "3232:     uint i = 0;",
          "",
          "[Removed Lines]",
          "3229:     FuncInfo * parentFuncInfo = pnodeParent->sxFnc.funcInfo;",
          "",
          "[Added Lines]",
          "3229:     FuncInfo * parentFuncInfo = pnodeParent->AsParseNodeFnc()->funcInfo;",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "3237:     for (pnodeScope = pnodeScopeList; pnodeScope;)",
          "3238:     {",
          "3240:         {",
          "3241:             break;",
          "3242:         }",
          "",
          "[Removed Lines]",
          "3239:         if (breakOnBodyScope && pnodeScope == pnodeParent->sxFnc.pnodeBodyScope)",
          "",
          "[Added Lines]",
          "3239:         if (breakOnBodyScope && pnodeScope == pnodeParent->AsParseNodeFnc()->pnodeBodyScope)",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "3299:                 }",
          "3300:             }",
          "3301:             PreVisitFunction(pnodeScope, byteCodeGenerator, reuseNestedFunc);",
          "3304:             parentFuncInfo->OnStartVisitFunction(pnodeScope);",
          "3307:             {",
          "3308:                 if (!byteCodeGenerator->IsInNonDebugMode() && pLastReuseFunc != nullptr && byteCodeGenerator->pCurrentFunction == nullptr)",
          "3309:                 {",
          "",
          "[Removed Lines]",
          "3302:             FuncInfo *funcInfo = pnodeScope->sxFnc.funcInfo;",
          "3306:             if (pnodeScope->sxFnc.pnodeBody)",
          "",
          "[Added Lines]",
          "3302:             FuncInfo *funcInfo = pnodeScope->AsParseNodeFnc()->funcInfo;",
          "3306:             if (pnodeScope->AsParseNodeFnc()->pnodeBody)",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "3320:                 Scope *paramScope = funcInfo->GetParamScope();",
          "3321:                 Scope *bodyScope = funcInfo->GetBodyScope();",
          "3324:                 i = 0;",
          "3328:                 byteCodeGenerator->PushScope(paramScope);",
          "3331:                 {",
          "3333:                     funcInfo->SetCurrentChildScope(paramScope);",
          "3336:                     MapFormals(pnodeScope, [&](ParseNode *argNode) { Visit(argNode, byteCodeGenerator, prefix, postfix); });",
          "3337:                 }",
          "",
          "[Removed Lines]",
          "3323:                 BeginVisitBlock(pnodeScope->sxFnc.pnodeScopes, byteCodeGenerator);",
          "3325:                 ParseNodePtr containerScope = pnodeScope->sxFnc.pnodeScopes;",
          "3330:                 if (pnodeScope->sxFnc.HasNonSimpleParameterList() && !funcInfo->IsBodyAndParamScopeMerged())",
          "3334:                     Assert(containerScope->nop == knopBlock && containerScope->sxBlock.blockType == Parameter);",
          "3335:                     VisitNestedScopes(containerScope->sxBlock.pnodeScopes, pnodeScope, byteCodeGenerator, prefix, postfix, &i, true);",
          "",
          "[Added Lines]",
          "3323:                 BeginVisitBlock(pnodeScope->AsParseNodeFnc()->pnodeScopes, byteCodeGenerator);",
          "3325:                 ParseNodePtr containerScope = pnodeScope->AsParseNodeFnc()->pnodeScopes;",
          "3330:                 if (pnodeScope->AsParseNodeFnc()->HasNonSimpleParameterList() && !funcInfo->IsBodyAndParamScopeMerged())",
          "3334:                     Assert(containerScope->nop == knopBlock && containerScope->AsParseNodeBlock()->blockType == Parameter);",
          "3335:                     VisitNestedScopes(containerScope->AsParseNodeBlock()->pnodeScopes, pnodeScope, byteCodeGenerator, prefix, postfix, &i, true);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "3340:                 byteCodeGenerator->PushScope(bodyScope);",
          "3341:                 funcInfo->SetCurrentChildScope(bodyScope);",
          "3347:                 {",
          "3348:                     VisitNestedScopes(containerScope, pnodeScope, byteCodeGenerator, prefix, postfix, &i);",
          "3349:                     MapFormals(pnodeScope, [&](ParseNode *argNode) { Visit(argNode, byteCodeGenerator, prefix, postfix); });",
          "3350:                 }",
          "3353:                 {",
          "3354:                     byteCodeGenerator->AssignUndefinedConstRegister();",
          "3356:                     if (!funcInfo->IsBodyAndParamScopeMerged())",
          "3357:                     {",
          "3360:                     }",
          "3361:                 }",
          "3366:                 while (pnode->nop == knopList)",
          "3367:                 {",
          "",
          "[Removed Lines]",
          "3343:                 PreVisitBlock(pnodeScope->sxFnc.pnodeBodyScope, byteCodeGenerator);",
          "3344:                 AddVarsToScope(pnodeScope->sxFnc.pnodeVars, byteCodeGenerator);",
          "3346:                 if (!pnodeScope->sxFnc.HasNonSimpleParameterList() || funcInfo->IsBodyAndParamScopeMerged())",
          "3352:                 if (pnodeScope->sxFnc.HasNonSimpleParameterList())",
          "3358:                         Assert(pnodeScope->sxFnc.pnodeBodyScope->sxBlock.scope);",
          "3359:                         VisitNestedScopes(pnodeScope->sxFnc.pnodeBodyScope->sxBlock.pnodeScopes, pnodeScope, byteCodeGenerator, prefix, postfix, &i);",
          "3363:                 BeginVisitBlock(pnodeScope->sxFnc.pnodeBodyScope, byteCodeGenerator);",
          "3365:                 ParseNode* pnode = pnodeScope->sxFnc.pnodeBody;",
          "",
          "[Added Lines]",
          "3343:                 PreVisitBlock(pnodeScope->AsParseNodeFnc()->pnodeBodyScope, byteCodeGenerator);",
          "3344:                 AddVarsToScope(pnodeScope->AsParseNodeFnc()->pnodeVars, byteCodeGenerator);",
          "3346:                 if (!pnodeScope->AsParseNodeFnc()->HasNonSimpleParameterList() || funcInfo->IsBodyAndParamScopeMerged())",
          "3352:                 if (pnodeScope->AsParseNodeFnc()->HasNonSimpleParameterList())",
          "3358:                         Assert(pnodeScope->AsParseNodeFnc()->pnodeBodyScope->AsParseNodeBlock()->scope);",
          "3359:                         VisitNestedScopes(pnodeScope->AsParseNodeFnc()->pnodeBodyScope->AsParseNodeBlock()->pnodeScopes, pnodeScope, byteCodeGenerator, prefix, postfix, &i);",
          "3363:                 BeginVisitBlock(pnodeScope->AsParseNodeFnc()->pnodeBodyScope, byteCodeGenerator);",
          "3365:                 ParseNode* pnode = pnodeScope->AsParseNodeFnc()->pnodeBody;",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "3375:                     if (!funcInfo->GetCallsEval() && !funcInfo->GetChildCallsEval() &&",
          "3377:                         !(byteCodeGenerator->ShouldTrackDebuggerMetadata()))",
          "3378:                     {",
          "3380:                     }",
          "3382:                 }",
          "3383:                 byteCodeGenerator->SetCurrentTopStatement(pnode);",
          "3384:                 Visit(pnode, byteCodeGenerator, prefix, postfix);",
          "3388:             }",
          "3391:             {",
          "3393:                 byteCodeGenerator->PushScope(funcInfo->GetParamScope());",
          "",
          "[Removed Lines]",
          "3373:                     byteCodeGenerator->SetCurrentTopStatement(pnode->sxBin.pnode1);",
          "3374:                     Visit(pnode->sxBin.pnode1, byteCodeGenerator, prefix, postfix);",
          "3379:                         MarkInit(pnode->sxBin.pnode1);",
          "3381:                     pnode = pnode->sxBin.pnode2;",
          "3386:                 EndVisitBlock(pnodeScope->sxFnc.pnodeBodyScope, byteCodeGenerator);",
          "3387:                 EndVisitBlock(pnodeScope->sxFnc.pnodeScopes, byteCodeGenerator);",
          "3390:             if (!pnodeScope->sxFnc.pnodeBody)",
          "",
          "[Added Lines]",
          "3373:                     byteCodeGenerator->SetCurrentTopStatement(pnode->AsParseNodeBin()->pnode1);",
          "3374:                     Visit(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator, prefix, postfix);",
          "3379:                         MarkInit(pnode->AsParseNodeBin()->pnode1);",
          "3381:                     pnode = pnode->AsParseNodeBin()->pnode2;",
          "3386:                 EndVisitBlock(pnodeScope->AsParseNodeFnc()->pnodeBodyScope, byteCodeGenerator);",
          "3387:                 EndVisitBlock(pnodeScope->AsParseNodeFnc()->pnodeScopes, byteCodeGenerator);",
          "3390:             if (!pnodeScope->AsParseNodeFnc()->pnodeBody)",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "3397:             if (!parentFuncInfo->IsFakeGlobalFunction(byteCodeGenerator->GetFlags()))",
          "3398:             {",
          "3400:                 parentFunc->SetNestedFunc(funcInfo->byteCodeFunction->GetFunctionInfo(), (*pIndex)++, byteCodeGenerator->GetFlags());",
          "3401:             }",
          "",
          "[Removed Lines]",
          "3399:                 pnodeScope->sxFnc.nestedIndex = *pIndex;",
          "",
          "[Added Lines]",
          "3399:                 pnodeScope->AsParseNodeFnc()->nestedIndex = *pIndex;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "3407:             PostVisitFunction(pnodeScope, byteCodeGenerator);",
          "3411:             byteCodeGenerator->pCurrentFunction = pLastReuseFunc;",
          "3412:             break;",
          "",
          "[Removed Lines]",
          "3409:             pnodeScope = pnodeScope->sxFnc.pnodeNext;",
          "",
          "[Added Lines]",
          "3409:             pnodeScope = pnodeScope->AsParseNodeFnc()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "3416:         {",
          "3417:             PreVisitBlock(pnodeScope, byteCodeGenerator);",
          "3418:             bool isMergedScope;",
          "3422:             PostVisitBlock(pnodeScope, byteCodeGenerator);",
          "3425:             break;",
          "3426:         }",
          "",
          "[Removed Lines]",
          "3419:             parentFuncInfo->OnStartVisitScope(pnodeScope->sxBlock.scope, &isMergedScope);",
          "3420:             VisitNestedScopes(pnodeScope->sxBlock.pnodeScopes, pnodeParent, byteCodeGenerator, prefix, postfix, pIndex);",
          "3421:             parentFuncInfo->OnEndVisitScope(pnodeScope->sxBlock.scope, isMergedScope);",
          "3424:             pnodeScope = pnodeScope->sxBlock.pnodeNext;",
          "",
          "[Added Lines]",
          "3419:             parentFuncInfo->OnStartVisitScope(pnodeScope->AsParseNodeBlock()->scope, &isMergedScope);",
          "3420:             VisitNestedScopes(pnodeScope->AsParseNodeBlock()->pnodeScopes, pnodeParent, byteCodeGenerator, prefix, postfix, pIndex);",
          "3421:             parentFuncInfo->OnEndVisitScope(pnodeScope->AsParseNodeBlock()->scope, isMergedScope);",
          "3424:             pnodeScope = pnodeScope->AsParseNodeBlock()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "3429:         {",
          "3430:             PreVisitCatch(pnodeScope, byteCodeGenerator);",
          "3433:             {",
          "3435:             }",
          "3437:             bool isMergedScope;",
          "3442:             PostVisitCatch(pnodeScope, byteCodeGenerator);",
          "3445:             break;",
          "3446:         }",
          "",
          "[Removed Lines]",
          "3432:             if (pnodeScope->sxCatch.pnodeParam->nop != knopParamPattern)",
          "3434:                 Visit(pnodeScope->sxCatch.pnodeParam, byteCodeGenerator, prefix, postfix);",
          "3438:             parentFuncInfo->OnStartVisitScope(pnodeScope->sxCatch.scope, &isMergedScope);",
          "3439:             VisitNestedScopes(pnodeScope->sxCatch.pnodeScopes, pnodeParent, byteCodeGenerator, prefix, postfix, pIndex);",
          "3441:             parentFuncInfo->OnEndVisitScope(pnodeScope->sxCatch.scope, isMergedScope);",
          "3444:             pnodeScope = pnodeScope->sxCatch.pnodeNext;",
          "",
          "[Added Lines]",
          "3432:             if (pnodeScope->AsParseNodeCatch()->pnodeParam->nop != knopParamPattern)",
          "3434:                 Visit(pnodeScope->AsParseNodeCatch()->pnodeParam, byteCodeGenerator, prefix, postfix);",
          "3438:             parentFuncInfo->OnStartVisitScope(pnodeScope->AsParseNodeCatch()->scope, &isMergedScope);",
          "3439:             VisitNestedScopes(pnodeScope->AsParseNodeCatch()->pnodeScopes, pnodeParent, byteCodeGenerator, prefix, postfix, pIndex);",
          "3441:             parentFuncInfo->OnEndVisitScope(pnodeScope->AsParseNodeCatch()->scope, isMergedScope);",
          "3444:             pnodeScope = pnodeScope->AsParseNodeCatch()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "3449:         {",
          "3450:             PreVisitWith(pnodeScope, byteCodeGenerator);",
          "3451:             bool isMergedScope;",
          "3455:             PostVisitWith(pnodeScope, byteCodeGenerator);",
          "3457:             break;",
          "3458:         }",
          "",
          "[Removed Lines]",
          "3452:             parentFuncInfo->OnStartVisitScope(pnodeScope->sxWith.scope, &isMergedScope);",
          "3453:             VisitNestedScopes(pnodeScope->sxWith.pnodeScopes, pnodeParent, byteCodeGenerator, prefix, postfix, pIndex);",
          "3454:             parentFuncInfo->OnEndVisitScope(pnodeScope->sxWith.scope, isMergedScope);",
          "3456:             pnodeScope = pnodeScope->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "3452:             parentFuncInfo->OnStartVisitScope(pnodeScope->AsParseNodeWith()->scope, &isMergedScope);",
          "3453:             VisitNestedScopes(pnodeScope->AsParseNodeWith()->pnodeScopes, pnodeParent, byteCodeGenerator, prefix, postfix, pIndex);",
          "3454:             parentFuncInfo->OnEndVisitScope(pnodeScope->AsParseNodeWith()->scope, isMergedScope);",
          "3456:             pnodeScope = pnodeScope->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "3467: void PreVisitBlock(ParseNode *pnodeBlock, ByteCodeGenerator *byteCodeGenerator)",
          "3468: {",
          "3472:     {",
          "3474:         return;",
          "",
          "[Removed Lines]",
          "3469:     if (!pnodeBlock->sxBlock.scope &&",
          "3470:         !pnodeBlock->sxBlock.HasBlockScopedContent() &&",
          "3471:         !pnodeBlock->sxBlock.GetCallsEval())",
          "",
          "[Added Lines]",
          "3469:     if (!pnodeBlock->AsParseNodeBlock()->scope &&",
          "3470:         !pnodeBlock->AsParseNodeBlock()->HasBlockScopedContent() &&",
          "3471:         !pnodeBlock->AsParseNodeBlock()->GetCallsEval())",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "3477:     bool isGlobalEvalBlockScope = false;",
          "3478:     FuncInfo *func = byteCodeGenerator->TopFuncInfo();",
          "3479:     if (func->IsGlobalFunction() &&",
          "3481:         byteCodeGenerator->IsEvalWithNoParentScopeInfo())",
          "3482:     {",
          "3483:         isGlobalEvalBlockScope = true;",
          "3484:     }",
          "3488:     ArenaAllocator *alloc = byteCodeGenerator->GetAllocator();",
          "3489:     Scope *scope;",
          "3492:     {",
          "3493:         scope = byteCodeGenerator->GetCurrentScope();",
          "3496:         {",
          "3499:                 && scope->GetScopeType() == ScopeType_FunctionBody)",
          "3500:             {",
          "3501:                 scope = scope->GetEnclosingScope();",
          "3502:             }",
          "3503:         }",
          "3506:     }",
          "3507:     else if (!(pnodeBlock->grfpn & fpnSyntheticNode) || isGlobalEvalBlockScope)",
          "3508:     {",
          "3510:         if (!scope)",
          "3511:         {",
          "3512:             scope = Anew(alloc, Scope, alloc,",
          "3513:                          isGlobalEvalBlockScope? ScopeType_GlobalEvalBlock : ScopeType_Block, true);",
          "3515:         }",
          "3516:         scope->SetFunc(byteCodeGenerator->TopFuncInfo());",
          "",
          "[Removed Lines]",
          "3480:         func->root->sxFnc.pnodeScopes == pnodeBlock &&",
          "3485:     Assert(!pnodeBlock->sxBlock.scope ||",
          "3486:            isGlobalEvalBlockScope == (pnodeBlock->sxBlock.scope->GetScopeType() == ScopeType_GlobalEvalBlock));",
          "3491:     if ((pnodeBlock->sxBlock.blockType == PnodeBlockType::Global && !byteCodeGenerator->IsEvalWithNoParentScopeInfo()) || pnodeBlock->sxBlock.blockType == PnodeBlockType::Function)",
          "3495:         if (pnodeBlock->sxBlock.blockType == PnodeBlockType::Function)",
          "3497:             AnalysisAssert(pnodeBlock->sxBlock.scope);",
          "3498:             if (pnodeBlock->sxBlock.scope->GetScopeType() == ScopeType_Parameter",
          "3505:         pnodeBlock->sxBlock.scope = scope;",
          "3509:         scope = pnodeBlock->sxBlock.scope;",
          "3514:             pnodeBlock->sxBlock.scope = scope;",
          "",
          "[Added Lines]",
          "3480:         func->root->AsParseNodeFnc()->pnodeScopes == pnodeBlock &&",
          "3485:     Assert(!pnodeBlock->AsParseNodeBlock()->scope ||",
          "3486:            isGlobalEvalBlockScope == (pnodeBlock->AsParseNodeBlock()->scope->GetScopeType() == ScopeType_GlobalEvalBlock));",
          "3491:     if ((pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Global && !byteCodeGenerator->IsEvalWithNoParentScopeInfo()) || pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Function)",
          "3495:         if (pnodeBlock->AsParseNodeBlock()->blockType == PnodeBlockType::Function)",
          "3497:             AnalysisAssert(pnodeBlock->AsParseNodeBlock()->scope);",
          "3498:             if (pnodeBlock->AsParseNodeBlock()->scope->GetScopeType() == ScopeType_Parameter",
          "3505:         pnodeBlock->AsParseNodeBlock()->scope = scope;",
          "3509:         scope = pnodeBlock->AsParseNodeBlock()->scope;",
          "3514:             pnodeBlock->AsParseNodeBlock()->scope = scope;",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3531:         return;",
          "3532:     }",
          "3536:     bool isGlobalScope = (scope->GetEnclosingScope() == nullptr);",
          "3537:     Assert(!isGlobalScope || (pnodeBlock->grfpn & fpnSyntheticNode));",
          "",
          "[Removed Lines]",
          "3534:     Assert(scope && scope == pnodeBlock->sxBlock.scope);",
          "",
          "[Added Lines]",
          "3534:     Assert(scope && scope == pnodeBlock->AsParseNodeBlock()->scope);",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3541:     if (!isGlobalEvalBlockScope && !isGlobalScope)",
          "3542:     {",
          "3544:     }",
          "",
          "[Removed Lines]",
          "3543:         AddFunctionsToScope(pnodeBlock->sxBlock.pnodeScopes, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "3543:         AddFunctionsToScope(pnodeBlock->AsParseNodeBlock()->pnodeScopes, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3555:     auto addSymbolToScope = [scope, byteCodeGenerator, isGlobalScope](ParseNode *pnode)",
          "3556:         {",
          "3558: #if DBG_DUMP",
          "3559:         if (sym->GetSymbolType() == STVariable && byteCodeGenerator->Trace())",
          "3560:         {",
          "3561:             Output::Print(_u(\"current context has declared %s %s of type %s\\n\"),",
          "3562:                 sym->GetDecl()->nop == knopLetDecl ? _u(\"let\") : _u(\"const\"),",
          "3564:                 sym->GetSymbolTypeName());",
          "3565:         }",
          "3566: #endif",
          "",
          "[Removed Lines]",
          "3557:             Symbol *sym = byteCodeGenerator->AddSymbolToScope(scope, reinterpret_cast<const char16*>(pnode->sxVar.pid->Psz()), pnode->sxVar.pid->Cch(), pnode, STVariable);",
          "3563:                 pnode->sxVar.pid->Psz(),",
          "",
          "[Added Lines]",
          "3557:             Symbol *sym = byteCodeGenerator->AddSymbolToScope(scope, reinterpret_cast<const char16*>(pnode->AsParseNodeVar()->pid->Psz()), pnode->AsParseNodeVar()->pid->Cch(), pnode, STVariable);",
          "3563:                 pnode->AsParseNodeVar()->pid->Psz(),",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3568:             sym->SetIsBlockVar(true);",
          "3569:             sym->SetIsConst(pnode->nop == knopConstDecl);",
          "3570:             sym->SetNeedDeclaration(true);",
          "3572:         };",
          "3574:     byteCodeGenerator->IterateBlockScopedVariables(pnodeBlock, addSymbolToScope);",
          "",
          "[Removed Lines]",
          "3571:             pnode->sxVar.sym = sym;",
          "",
          "[Added Lines]",
          "3571:             pnode->AsParseNodeVar()->sym = sym;",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3581:         return;",
          "3582:     }",
          "3587:     {",
          "3588:         bool scopeIsEmpty = scope->IsEmpty();",
          "3589:         scope->SetIsObject();",
          "",
          "[Removed Lines]",
          "3584:     Scope *scope = pnode->sxBlock.scope;",
          "3586:     if (pnode->sxBlock.GetCallsEval() || pnode->sxBlock.GetChildCallsEval() || (byteCodeGenerator->GetFlags() & (fscrEval | fscrImplicitThis | fscrImplicitParents)))",
          "",
          "[Added Lines]",
          "3584:     Scope *scope = pnode->AsParseNodeBlock()->scope;",
          "3586:     if (pnode->AsParseNodeBlock()->GetCallsEval() || pnode->AsParseNodeBlock()->GetChildCallsEval() || (byteCodeGenerator->GetFlags() & (fscrEval | fscrImplicitThis | fscrImplicitParents)))",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3600:     byteCodeGenerator->PopBlock();",
          "3602:     ParseNode *currentBlock = byteCodeGenerator->GetCurrentBlock();",
          "3604:     {",
          "3606:     }",
          "3607: }",
          "",
          "[Removed Lines]",
          "3603:     if (currentBlock && (pnode->sxBlock.GetCallsEval() || pnode->sxBlock.GetChildCallsEval()))",
          "3605:         currentBlock->sxBlock.SetChildCallsEval(true);",
          "",
          "[Added Lines]",
          "3603:     if (currentBlock && (pnode->AsParseNodeBlock()->GetCallsEval() || pnode->AsParseNodeBlock()->GetChildCallsEval()))",
          "3605:         currentBlock->AsParseNodeBlock()->SetChildCallsEval(true);",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3610: {",
          "3612:     byteCodeGenerator->StartBindCatch(pnode);",
          "3614:     {",
          "3616:         {",
          "3618: #if DBG_DUMP",
          "3619:             if (byteCodeGenerator->Trace())",
          "3620:             {",
          "3621:                 Output::Print(_u(\"current context has declared catch var %s of type %s\\n\"),",
          "3623:             }",
          "3624: #endif",
          "3625:             sym->SetIsCatch(true);",
          "",
          "[Removed Lines]",
          "3613:     if (pnode->sxCatch.pnodeParam->nop == knopParamPattern)",
          "3615:         Parser::MapBindIdentifier(pnode->sxCatch.pnodeParam->sxParamPattern.pnode1, [&](ParseNodePtr item)",
          "3617:             Symbol *sym = item->sxVar.sym;",
          "3622:                     item->sxVar.pid->Psz(), sym->GetSymbolTypeName());",
          "",
          "[Added Lines]",
          "3613:     if (pnode->AsParseNodeCatch()->pnodeParam->nop == knopParamPattern)",
          "3615:         Parser::MapBindIdentifier(pnode->AsParseNodeCatch()->pnodeParam->AsParseNodeParamPattern()->pnode1, [&](ParseNodePtr item)",
          "3617:             Symbol *sym = item->AsParseNodeVar()->sym;",
          "3622:                     item->AsParseNodeVar()->pid->Psz(), sym->GetSymbolTypeName());",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3628:     }",
          "3629:     else",
          "3630:     {",
          "3633: #if DBG_DUMP",
          "3634:         if (byteCodeGenerator->Trace())",
          "3635:         {",
          "3636:             Output::Print(_u(\"current context has declared catch var %s of type %s\\n\"),",
          "3638:         }",
          "3639: #endif",
          "3640:         sym->SetIsCatch(true);",
          "3642:     }",
          "3645: }",
          "3647: void PostVisitCatch(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator)",
          "3648: {",
          "3650:     if (scope->GetHasOwnLocalInClosure())",
          "3651:     {",
          "3652:         byteCodeGenerator->ProcessScopeWithCapturedSym(scope);",
          "",
          "[Removed Lines]",
          "3631:         Symbol *sym = *pnode->sxCatch.pnodeParam->sxPid.symRef;",
          "3632:         Assert(sym->GetScope() == pnode->sxCatch.scope);",
          "3637:                 pnode->sxCatch.pnodeParam->sxPid.pid->Psz(), sym->GetSymbolTypeName());",
          "3641:         pnode->sxCatch.pnodeParam->sxPid.sym = sym;",
          "3644:     AddFunctionsToScope(pnode->sxCatch.pnodeScopes, byteCodeGenerator);",
          "3649:     Scope *scope = pnode->sxCatch.scope;",
          "",
          "[Added Lines]",
          "3631:         Symbol *sym = *pnode->AsParseNodeCatch()->pnodeParam->AsParseNodePid()->symRef;",
          "3632:         Assert(sym->GetScope() == pnode->AsParseNodeCatch()->scope);",
          "3637:                 pnode->AsParseNodeCatch()->pnodeParam->AsParseNodePid()->pid->Psz(), sym->GetSymbolTypeName());",
          "3641:         pnode->AsParseNodeCatch()->pnodeParam->AsParseNodePid()->sym = sym;",
          "3644:     AddFunctionsToScope(pnode->AsParseNodeCatch()->pnodeScopes, byteCodeGenerator);",
          "3649:     Scope *scope = pnode->AsParseNodeCatch()->scope;",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3660:     Scope *scope = Anew(alloc, Scope, alloc, ScopeType_With);",
          "3661:     scope->SetFunc(byteCodeGenerator->TopFuncInfo());",
          "3662:     scope->SetIsDynamic(true);",
          "3665:     byteCodeGenerator->PushScope(scope);",
          "3666: }",
          "",
          "[Removed Lines]",
          "3663:     pnode->sxWith.scope = scope;",
          "",
          "[Added Lines]",
          "3663:     pnode->AsParseNodeWith()->scope = scope;",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3679: {",
          "3680:     if (expr && expr->nop == knopDot)",
          "3681:     {",
          "3684:         if ((lhs != nullptr) && (rhs != nullptr) && (lhs->nop == knopName) && (rhs->nop == knopName))",
          "3685:         {",
          "3688:             {",
          "3690:             }",
          "3691:         }",
          "3692:     }",
          "",
          "[Removed Lines]",
          "3682:         ParseNode* lhs = expr->sxBin.pnode1;",
          "3683:         ParseNode* rhs = expr->sxBin.pnode2;",
          "3686:             Symbol* lsym = lhs->sxPid.sym;",
          "3687:             if ((lsym == nullptr || lsym->GetIsGlobal()) && lhs->sxPid.PropertyIdFromNameNode() == Js::PropertyIds::Math)",
          "3689:                 return IsMathLibraryId(rhs->sxPid.PropertyIdFromNameNode());",
          "",
          "[Added Lines]",
          "3682:         ParseNode* lhs = expr->AsParseNodeBin()->pnode1;",
          "3683:         ParseNode* rhs = expr->AsParseNodeBin()->pnode2;",
          "3686:             Symbol* lsym = lhs->AsParseNodePid()->sym;",
          "3687:             if ((lsym == nullptr || lsym->GetIsGlobal()) && lhs->AsParseNodePid()->PropertyIdFromNameNode() == Js::PropertyIds::Math)",
          "3689:                 return IsMathLibraryId(rhs->AsParseNodePid()->PropertyIdFromNameNode());",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3744:         switch (pnode->nop)",
          "3745:         {",
          "3746:         case knopName:",
          "3748:             {",
          "3749:                 symCheck->result = false;",
          "3750:             }",
          "3751:             break;",
          "3752:         case knopCall:",
          "3753:         {",
          "3755:             if (callTarget != nullptr)",
          "3756:             {",
          "3757:                 if (callTarget->nop == knopName)",
          "3758:                 {",
          "3760:                     if (sym && sym->SingleDef())",
          "3761:                     {",
          "3762:                         ParseNode* decl = sym->GetDecl();",
          "3763:                         if (decl == nullptr ||",
          "3764:                             decl->nop != knopVarDecl ||",
          "3766:                         {",
          "3767:                             symCheck->result = false;",
          "3768:                         }",
          "",
          "[Removed Lines]",
          "3747:             if (symCheck->MatchSymbol(pnode->sxPid.sym))",
          "3754:             ParseNode* callTarget = pnode->sxBin.pnode1;",
          "3759:                     Symbol* sym = callTarget->sxPid.sym;",
          "3765:                             !IsLibraryFunction(decl->sxVar.pnodeInit, byteCodeGenerator->GetScriptContext()))",
          "",
          "[Added Lines]",
          "3747:             if (symCheck->MatchSymbol(pnode->AsParseNodePid()->sym))",
          "3754:             ParseNode* callTarget = pnode->AsParseNodeCall()->pnodeTarget;",
          "3759:                     Symbol* sym = callTarget->AsParseNodePid()->sym;",
          "3765:                             !IsLibraryFunction(decl->AsParseNodeVar()->pnodeInit, byteCodeGenerator->GetScriptContext()))",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3838: void CheckLocalVarDef(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator)",
          "3839: {",
          "3840:     Assert(pnode->nop == knopAsg);",
          "3842:     {",
          "3844:         if (lhs->nop == knopName)",
          "3845:         {",
          "3847:             if (sym != nullptr)",
          "3848:             {",
          "3849:                 sym->RecordDef();",
          "3850:                 if (sym->IsUsedInLdElem())",
          "3851:                 {",
          "3853:                 }",
          "3854:             }",
          "3855:         }",
          "",
          "[Removed Lines]",
          "3841:     if (pnode->sxBin.pnode1 != nullptr)",
          "3843:         ParseNode *lhs = pnode->sxBin.pnode1;",
          "3846:             Symbol *sym = lhs->sxPid.sym;",
          "3852:                     Ident::TrySetIsUsedInLdElem(pnode->sxBin.pnode2);",
          "",
          "[Added Lines]",
          "3841:     if (pnode->AsParseNodeBin()->pnode1 != nullptr)",
          "3843:         ParseNode *lhs = pnode->AsParseNodeBin()->pnode1;",
          "3846:             Symbol *sym = lhs->AsParseNodePid()->sym;",
          "3852:                     Ident::TrySetIsUsedInLdElem(pnode->AsParseNodeBin()->pnode2);",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3873:         if (stmt->nop == knopAsg)",
          "3874:         {",
          "3877:             }",
          "3878:         else if (stmt->nop == knopVarDecl)",
          "3879:         {",
          "3881:             }",
          "3882:         ArenaAllocator* alloc = byteCodeGenerator->GetAllocator();",
          "3883:         ParseNode* loopInvar = byteCodeGenerator->GetParser()->CreateTempNode(rhs);",
          "",
          "[Removed Lines]",
          "3875:             rhs = stmt->sxBin.pnode2;",
          "3876:             lhs = stmt->sxBin.pnode1;",
          "3880:             rhs = stmt->sxVar.pnodeInit;",
          "",
          "[Added Lines]",
          "3875:             rhs = stmt->AsParseNodeBin()->pnode2;",
          "3876:             lhs = stmt->AsParseNodeBin()->pnode1;",
          "3880:             rhs = stmt->AsParseNodeVar()->pnodeInit;",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3889:             funcInfo->nonUserNonTempRegistersToInitialize.Add(loopInvar->location);",
          "3893:         {",
          "3895:             }",
          "3896:         else",
          "3897:         {",
          "3898:             ParseNode* listNode = Parser::StaticCreateBinNode(knopList, nullptr, nullptr, alloc);",
          "3902:             }",
          "",
          "[Removed Lines]",
          "3892:         if ((*outerStmtRef)->sxBin.pnode1 == nullptr)",
          "3894:             (*outerStmtRef)->sxBin.pnode1 = loopInvar;",
          "3899:             (*outerStmtRef)->sxBin.pnode2 = listNode;",
          "3900:             listNode->sxBin.pnode1 = loopInvar;",
          "",
          "[Added Lines]",
          "3892:         if ((*outerStmtRef)->AsParseNodeBin()->pnode1 == nullptr)",
          "3894:             (*outerStmtRef)->AsParseNodeBin()->pnode1 = loopInvar;",
          "3899:             (*outerStmtRef)->AsParseNodeBin()->pnode2 = listNode;",
          "3900:             listNode->AsParseNodeBin()->pnode1 = loopInvar;",
          "",
          "---------------",
          "--- Hunk 112 ---",
          "[Context before]",
          "3918:             }",
          "3919:         }",
          "3920:     else",
          "",
          "[Removed Lines]",
          "3915:             cStmt = byteCodeGenerator->GetParser()->AddVarDeclNode(stmt->sxVar.pid, funcInfo->root);",
          "3916:             cStmt->sxVar.pnodeInit = tempName;",
          "3917:             cStmt->sxVar.sym = stmt->sxVar.sym;",
          "",
          "[Added Lines]",
          "3915:             cStmt = byteCodeGenerator->GetParser()->AddVarDeclNode(stmt->AsParseNodeVar()->pid, funcInfo->root);",
          "3916:             cStmt->AsParseNodeVar()->pnodeInit = tempName;",
          "3917:             cStmt->AsParseNodeVar()->sym = stmt->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 113 ---",
          "[Context before]",
          "3929: {",
          "3930:     ArenaAllocator* alloc = byteCodeGenerator->GetAllocator();",
          "3931:     ParseNode* outerLoopC = Parser::StaticCreateNodeT<knopFor>(alloc);",
          "3938:     ParseNode* innerLoopC = Parser::StaticCreateNodeT<knopFor>(alloc);",
          "3945:     ParseNode* innerBod = Parser::StaticCreateBlockNode(alloc);",
          "3949:     ParseNode* outerBod = Parser::StaticCreateBlockNode(alloc);",
          "3953:     ParseNode* listNode = Parser::StaticCreateBinNode(knopList, nullptr, nullptr, alloc);",
          "3958:     if (origStmt->nop == knopList)",
          "3959:     {",
          "3960:         ParseNode* invertedStmt = nullptr;",
          "3961:         while (origStmt->nop == knopList)",
          "3962:         {",
          "3964:             if (invertedStmt != nullptr)",
          "3965:             {",
          "3967:             }",
          "3968:             else",
          "3969:             {",
          "3971:             }",
          "3973:         }",
          "3974:         Assert(invertedStmt != nullptr);",
          "3976:     }",
          "3977:     else",
          "3978:     {",
          "3980:     }",
          "3983:     {",
          "3985:     }",
          "3988:     return outerLoopC;",
          "3989: }",
          "",
          "[Removed Lines]",
          "3932:     outerLoopC->sxFor.pnodeInit = innerLoop->sxFor.pnodeInit;",
          "3933:     outerLoopC->sxFor.pnodeCond = innerLoop->sxFor.pnodeCond;",
          "3934:     outerLoopC->sxFor.pnodeIncr = innerLoop->sxFor.pnodeIncr;",
          "3935:     outerLoopC->sxFor.pnodeBlock = innerLoop->sxFor.pnodeBlock;",
          "3936:     outerLoopC->sxFor.pnodeInverted = nullptr;",
          "3939:     innerLoopC->sxFor.pnodeInit = outerLoop->sxFor.pnodeInit;",
          "3940:     innerLoopC->sxFor.pnodeCond = outerLoop->sxFor.pnodeCond;",
          "3941:     innerLoopC->sxFor.pnodeIncr = outerLoop->sxFor.pnodeIncr;",
          "3942:     innerLoopC->sxFor.pnodeBlock = outerLoop->sxFor.pnodeBlock;",
          "3943:     innerLoopC->sxFor.pnodeInverted = nullptr;",
          "3946:     innerLoopC->sxFor.pnodeBody = innerBod;",
          "3947:     innerBod->sxBlock.scope = innerLoop->sxFor.pnodeBody->sxBlock.scope;",
          "3950:     outerLoopC->sxFor.pnodeBody = outerBod;",
          "3951:     outerBod->sxBlock.scope = outerLoop->sxFor.pnodeBody->sxBlock.scope;",
          "3954:     outerBod->sxBlock.pnodeStmt = listNode;",
          "3956:     ParseNode* innerBodOriginal = innerLoop->sxFor.pnodeBody;",
          "3957:     ParseNode* origStmt = innerBodOriginal->sxBlock.pnodeStmt;",
          "3963:             ParseNode* invertedItem = ConstructInvertedStatement(origStmt->sxBin.pnode1, byteCodeGenerator, funcInfo, &listNode);",
          "3966:                 invertedStmt = invertedStmt->sxBin.pnode2 = byteCodeGenerator->GetParser()->CreateBinNode(knopList, invertedItem, nullptr);",
          "3970:                 invertedStmt = innerBod->sxBlock.pnodeStmt = byteCodeGenerator->GetParser()->CreateBinNode(knopList, invertedItem, nullptr);",
          "3972:             origStmt = origStmt->sxBin.pnode2;",
          "3975:         invertedStmt->sxBin.pnode2 = ConstructInvertedStatement(origStmt, byteCodeGenerator, funcInfo, &listNode);",
          "3979:         innerBod->sxBlock.pnodeStmt = ConstructInvertedStatement(origStmt, byteCodeGenerator, funcInfo, &listNode);",
          "3982:     if (listNode->sxBin.pnode1 == nullptr)",
          "3984:         listNode->sxBin.pnode1 = byteCodeGenerator->GetParser()->CreateTempNode(nullptr);",
          "3987:     listNode->sxBin.pnode2 = innerLoopC;",
          "",
          "[Added Lines]",
          "3932:     outerLoopC->AsParseNodeFor()->pnodeInit = innerLoop->AsParseNodeFor()->pnodeInit;",
          "3933:     outerLoopC->AsParseNodeFor()->pnodeCond = innerLoop->AsParseNodeFor()->pnodeCond;",
          "3934:     outerLoopC->AsParseNodeFor()->pnodeIncr = innerLoop->AsParseNodeFor()->pnodeIncr;",
          "3935:     outerLoopC->AsParseNodeFor()->pnodeBlock = innerLoop->AsParseNodeFor()->pnodeBlock;",
          "3936:     outerLoopC->AsParseNodeFor()->pnodeInverted = nullptr;",
          "3939:     innerLoopC->AsParseNodeFor()->pnodeInit = outerLoop->AsParseNodeFor()->pnodeInit;",
          "3940:     innerLoopC->AsParseNodeFor()->pnodeCond = outerLoop->AsParseNodeFor()->pnodeCond;",
          "3941:     innerLoopC->AsParseNodeFor()->pnodeIncr = outerLoop->AsParseNodeFor()->pnodeIncr;",
          "3942:     innerLoopC->AsParseNodeFor()->pnodeBlock = outerLoop->AsParseNodeFor()->pnodeBlock;",
          "3943:     innerLoopC->AsParseNodeFor()->pnodeInverted = nullptr;",
          "3946:     innerLoopC->AsParseNodeFor()->pnodeBody = innerBod;",
          "3947:     innerBod->AsParseNodeBlock()->scope = innerLoop->AsParseNodeFor()->pnodeBody->AsParseNodeBlock()->scope;",
          "3950:     outerLoopC->AsParseNodeFor()->pnodeBody = outerBod;",
          "3951:     outerBod->AsParseNodeBlock()->scope = outerLoop->AsParseNodeFor()->pnodeBody->AsParseNodeBlock()->scope;",
          "3954:     outerBod->AsParseNodeBlock()->pnodeStmt = listNode;",
          "3956:     ParseNode* innerBodOriginal = innerLoop->AsParseNodeFor()->pnodeBody;",
          "3957:     ParseNode* origStmt = innerBodOriginal->AsParseNodeBlock()->pnodeStmt;",
          "3963:             ParseNode* invertedItem = ConstructInvertedStatement(origStmt->AsParseNodeBin()->pnode1, byteCodeGenerator, funcInfo, &listNode);",
          "3966:                 invertedStmt = invertedStmt->AsParseNodeBin()->pnode2 = byteCodeGenerator->GetParser()->CreateBinNode(knopList, invertedItem, nullptr);",
          "3970:                 invertedStmt = innerBod->AsParseNodeBlock()->pnodeStmt = byteCodeGenerator->GetParser()->CreateBinNode(knopList, invertedItem, nullptr);",
          "3972:             origStmt = origStmt->AsParseNodeBin()->pnode2;",
          "3975:         invertedStmt->AsParseNodeBin()->pnode2 = ConstructInvertedStatement(origStmt, byteCodeGenerator, funcInfo, &listNode);",
          "3979:         innerBod->AsParseNodeBlock()->pnodeStmt = ConstructInvertedStatement(origStmt, byteCodeGenerator, funcInfo, &listNode);",
          "3982:     if (listNode->AsParseNodeBin()->pnode1 == nullptr)",
          "3984:         listNode->AsParseNodeBin()->pnode1 = byteCodeGenerator->GetParser()->CreateTempNode(nullptr);",
          "3987:     listNode->AsParseNodeBin()->pnode2 = innerLoopC;",
          "",
          "---------------",
          "--- Hunk 114 ---",
          "[Context before]",
          "3996:         ParseNode* rhs = nullptr;",
          "3997:         if (stmt->nop == knopAsg)",
          "3998:         {",
          "4001:         }",
          "4002:         else if (stmt->nop == knopVarDecl)",
          "4003:         {",
          "4005:         }",
          "4007:         if (lhs != nullptr)",
          "",
          "[Removed Lines]",
          "3999:             lhs = stmt->sxBin.pnode1;",
          "4000:             rhs = stmt->sxBin.pnode2;",
          "4004:             rhs = stmt->sxVar.pnodeInit;",
          "",
          "[Added Lines]",
          "3999:             lhs = stmt->AsParseNodeBin()->pnode1;",
          "4000:             rhs = stmt->AsParseNodeBin()->pnode2;",
          "4004:             rhs = stmt->AsParseNodeVar()->pnodeInit;",
          "",
          "---------------",
          "--- Hunk 115 ---",
          "[Context before]",
          "4014:             if (lhs->nop == knopName)",
          "4015:             {",
          "4017:                 {",
          "4018:                     return false;",
          "4019:                 }",
          "4020:             }",
          "4021:             else if (lhs->nop == knopIndex)",
          "4022:             {",
          "4026:                 if ((index == nullptr) || (indexed == nullptr))",
          "4027:                 {",
          "4028:                     return false;",
          "4029:                 }",
          "4032:                 {",
          "4033:                     return false;",
          "4034:                 }",
          "",
          "[Removed Lines]",
          "4016:                 if ((lhs->sxPid.sym != nullptr) && (lhs->sxPid.sym->GetIsGlobal()))",
          "4023:                 ParseNode* indexed = lhs->sxBin.pnode1;",
          "4024:                 ParseNode* index = lhs->sxBin.pnode2;",
          "4031:                 if ((indexed->nop != knopName) || (indexed->sxPid.sym == nullptr))",
          "",
          "[Added Lines]",
          "4016:                 if ((lhs->AsParseNodePid()->sym != nullptr) && (lhs->AsParseNodePid()->sym->GetIsGlobal()))",
          "4023:                 ParseNode* indexed = lhs->AsParseNodeBin()->pnode1;",
          "4024:                 ParseNode* index = lhs->AsParseNodeBin()->pnode2;",
          "4031:                 if ((indexed->nop != knopName) || (indexed->AsParseNodePid()->sym == nullptr))",
          "",
          "---------------",
          "--- Hunk 116 ---",
          "[Context before]",
          "4071:         if (stmt->nop == knopAsg)",
          "4072:         {",
          "4074:         }",
          "4075:         else if (stmt->nop == knopVarDecl)",
          "4076:         {",
          "4078:         }",
          "4080:         if (lhs != nullptr)",
          "",
          "[Removed Lines]",
          "4073:             lhs = stmt->sxBin.pnode1;",
          "4077:             auxSym = stmt->sxVar.sym;",
          "",
          "[Added Lines]",
          "4073:             lhs = stmt->AsParseNodeBin()->pnode1;",
          "4077:             auxSym = stmt->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 117 ---",
          "[Context before]",
          "4087:             if (lhs->nop == knopName)",
          "4088:             {",
          "4090:                 {",
          "4091:                     return false;",
          "4092:                 }",
          "4093:                 else",
          "4094:                 {",
          "4096:                 }",
          "4097:             }",
          "4098:         }",
          "",
          "[Removed Lines]",
          "4089:                 if ((lhs->sxPid.sym == nullptr) || (lhs->sxPid.sym->GetIsGlobal()))",
          "4095:                     auxSym = lhs->sxPid.sym;",
          "",
          "[Added Lines]",
          "4089:                 if ((lhs->AsParseNodePid()->sym == nullptr) || (lhs->AsParseNodePid()->sym->GetIsGlobal()))",
          "4095:                     auxSym = lhs->AsParseNodePid()->sym;",
          "",
          "---------------",
          "--- Hunk 118 ---",
          "[Context before]",
          "4119:             return false;",
          "4120:         }",
          "4124:         {",
          "4126:             return false;",
          "",
          "[Removed Lines]",
          "4122:         if ((innerLoop->sxFor.pnodeBody->nop == knopBlock && innerLoop->sxFor.pnodeBody->sxBlock.HasBlockScopedContent())",
          "4123:             || (outerLoop->sxFor.pnodeBody->nop == knopBlock && outerLoop->sxFor.pnodeBody->sxBlock.HasBlockScopedContent()))",
          "",
          "[Added Lines]",
          "4122:         if ((innerLoop->AsParseNodeFor()->pnodeBody->nop == knopBlock && innerLoop->AsParseNodeFor()->pnodeBody->AsParseNodeBlock()->HasBlockScopedContent())",
          "4123:             || (outerLoop->AsParseNodeFor()->pnodeBody->nop == knopBlock && outerLoop->AsParseNodeFor()->pnodeBody->AsParseNodeBlock()->HasBlockScopedContent()))",
          "",
          "---------------",
          "--- Hunk 119 ---",
          "[Context before]",
          "4129:     if ((block != nullptr) && (block->nop == knopBlock))",
          "4130:     {",
          "4132:         while ((stmt != nullptr) && (stmt->nop == knopList))",
          "4133:         {",
          "4135:             {",
          "4136:                     return false;",
          "4137:                 }",
          "4139:             }",
          "4141:         if (!GatherInversionSyms(stmt, outerVar, innerLoop, byteCodeGenerator, symCheck))",
          "",
          "[Removed Lines]",
          "4131:         ParseNode* stmt = block->sxBlock.pnodeStmt;",
          "4134:             if (!GatherInversionSyms(stmt->sxBin.pnode1, outerVar, innerLoop, byteCodeGenerator, symCheck))",
          "4138:             stmt = stmt->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "4131:         ParseNode* stmt = block->AsParseNodeBlock()->pnodeStmt;",
          "4134:             if (!GatherInversionSyms(stmt->AsParseNodeBin()->pnode1, outerVar, innerLoop, byteCodeGenerator, symCheck))",
          "4138:             stmt = stmt->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 120 ---",
          "[Context before]",
          "4143:                 return false;",
          "4144:             }",
          "4147:         while ((stmt != nullptr) && (stmt->nop == knopList))",
          "4148:         {",
          "4150:             {",
          "4151:                     return false;",
          "4152:                 }",
          "4154:             }",
          "4156:         if (!InvertableStmt(stmt, outerVar, innerLoop, outerLoop, byteCodeGenerator, symCheck))",
          "",
          "[Removed Lines]",
          "4146:         stmt = block->sxBlock.pnodeStmt;",
          "4149:             if (!InvertableStmt(stmt->sxBin.pnode1, outerVar, innerLoop, outerLoop, byteCodeGenerator, symCheck))",
          "4153:             stmt = stmt->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "4146:         stmt = block->AsParseNodeBlock()->pnodeStmt;",
          "4149:             if (!InvertableStmt(stmt->AsParseNodeBin()->pnode1, outerVar, innerLoop, outerLoop, byteCodeGenerator, symCheck))",
          "4153:             stmt = stmt->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 121 ---",
          "[Context before]",
          "4158:                 return false;",
          "4159:             }",
          "4163:         }",
          "4164:     else",
          "4165:     {",
          "",
          "[Removed Lines]",
          "4161:         return (InvertableExprPlus(symCheck, innerLoop->sxFor.pnodeCond, byteCodeGenerator, nullptr) &&",
          "4162:             InvertableExprPlus(symCheck, outerLoop->sxFor.pnodeCond, byteCodeGenerator, outerVar));",
          "",
          "[Added Lines]",
          "4161:         return (InvertableExprPlus(symCheck, innerLoop->AsParseNodeFor()->pnodeCond, byteCodeGenerator, nullptr) &&",
          "4162:             InvertableExprPlus(symCheck, outerLoop->AsParseNodeFor()->pnodeCond, byteCodeGenerator, outerVar));",
          "",
          "---------------",
          "--- Hunk 122 ---",
          "[Context before]",
          "4186:     if (outerLoop->nop == knopFor)",
          "4187:     {",
          "4189:         if ((innerLoop == nullptr) || (innerLoop->nop != knopBlock))",
          "4190:         {",
          "4191:             return nullptr;",
          "4192:         }",
          "4193:         else",
          "4194:         {",
          "4196:         }",
          "4198:         if ((innerLoop != nullptr) && (innerLoop->nop == knopFor))",
          "4199:         {",
          "4216:             {",
          "4219:                 if ((outerVar != nullptr) && (innerVar != nullptr))",
          "4220:                 {",
          "4222:                     if (InvertableBlock(block, outerVar, innerLoop, outerLoop, byteCodeGenerator, &symCheck))",
          "4223:                     {",
          "4224:                         return ConstructInvertedLoop(innerLoop, outerLoop, byteCodeGenerator, funcInfo);",
          "",
          "[Removed Lines]",
          "4188:         ParseNode* innerLoop = outerLoop->sxFor.pnodeBody;",
          "4195:             innerLoop = innerLoop->sxBlock.pnodeStmt;",
          "4200:             if ((outerLoop->sxFor.pnodeInit != nullptr) &&",
          "4201:                 (outerLoop->sxFor.pnodeInit->nop == knopVarDecl) &&",
          "4202:                 (outerLoop->sxFor.pnodeInit->sxVar.pnodeInit != nullptr) &&",
          "4203:                 (outerLoop->sxFor.pnodeInit->sxVar.pnodeInit->nop == knopInt) &&",
          "4204:                 (outerLoop->sxFor.pnodeIncr != nullptr) &&",
          "4205:                 ((outerLoop->sxFor.pnodeIncr->nop == knopIncPre) || (outerLoop->sxFor.pnodeIncr->nop == knopIncPost)) &&",
          "4206:                 (outerLoop->sxFor.pnodeIncr->sxUni.pnode1->nop == knopName) &&",
          "4207:                 (outerLoop->sxFor.pnodeInit->sxVar.pid == outerLoop->sxFor.pnodeIncr->sxUni.pnode1->sxPid.pid) &&",
          "4208:                 (innerLoop->sxFor.pnodeIncr != nullptr) &&",
          "4209:                 ((innerLoop->sxFor.pnodeIncr->nop == knopIncPre) || (innerLoop->sxFor.pnodeIncr->nop == knopIncPost)) &&",
          "4210:                 (innerLoop->sxFor.pnodeInit != nullptr) &&",
          "4211:                 (innerLoop->sxFor.pnodeInit->nop == knopVarDecl) &&",
          "4212:                 (innerLoop->sxFor.pnodeInit->sxVar.pnodeInit != nullptr) &&",
          "4213:                 (innerLoop->sxFor.pnodeInit->sxVar.pnodeInit->nop == knopInt) &&",
          "4214:                 (innerLoop->sxFor.pnodeIncr->sxUni.pnode1->nop == knopName) &&",
          "4215:                 (innerLoop->sxFor.pnodeInit->sxVar.pid == innerLoop->sxFor.pnodeIncr->sxUni.pnode1->sxPid.pid))",
          "4217:                 Symbol* outerVar = outerLoop->sxFor.pnodeInit->sxVar.sym;",
          "4218:                 Symbol* innerVar = innerLoop->sxFor.pnodeInit->sxVar.sym;",
          "4221:                     ParseNode* block = innerLoop->sxFor.pnodeBody;",
          "",
          "[Added Lines]",
          "4188:         ParseNode* innerLoop = outerLoop->AsParseNodeFor()->pnodeBody;",
          "4195:             innerLoop = innerLoop->AsParseNodeBlock()->pnodeStmt;",
          "4200:             if ((outerLoop->AsParseNodeFor()->pnodeInit != nullptr) &&",
          "4201:                 (outerLoop->AsParseNodeFor()->pnodeInit->nop == knopVarDecl) &&",
          "4202:                 (outerLoop->AsParseNodeFor()->pnodeInit->AsParseNodeVar()->pnodeInit != nullptr) &&",
          "4203:                 (outerLoop->AsParseNodeFor()->pnodeInit->AsParseNodeVar()->pnodeInit->nop == knopInt) &&",
          "4204:                 (outerLoop->AsParseNodeFor()->pnodeIncr != nullptr) &&",
          "4205:                 ((outerLoop->AsParseNodeFor()->pnodeIncr->nop == knopIncPre) || (outerLoop->AsParseNodeFor()->pnodeIncr->nop == knopIncPost)) &&",
          "4206:                 (outerLoop->AsParseNodeFor()->pnodeIncr->AsParseNodeUni()->pnode1->nop == knopName) &&",
          "4207:                 (outerLoop->AsParseNodeFor()->pnodeInit->AsParseNodeVar()->pid == outerLoop->AsParseNodeFor()->pnodeIncr->AsParseNodeUni()->pnode1->AsParseNodePid()->pid) &&",
          "4208:                 (innerLoop->AsParseNodeFor()->pnodeIncr != nullptr) &&",
          "4209:                 ((innerLoop->AsParseNodeFor()->pnodeIncr->nop == knopIncPre) || (innerLoop->AsParseNodeFor()->pnodeIncr->nop == knopIncPost)) &&",
          "4210:                 (innerLoop->AsParseNodeFor()->pnodeInit != nullptr) &&",
          "4211:                 (innerLoop->AsParseNodeFor()->pnodeInit->nop == knopVarDecl) &&",
          "4212:                 (innerLoop->AsParseNodeFor()->pnodeInit->AsParseNodeVar()->pnodeInit != nullptr) &&",
          "4213:                 (innerLoop->AsParseNodeFor()->pnodeInit->AsParseNodeVar()->pnodeInit->nop == knopInt) &&",
          "4214:                 (innerLoop->AsParseNodeFor()->pnodeIncr->AsParseNodeUni()->pnode1->nop == knopName) &&",
          "4215:                 (innerLoop->AsParseNodeFor()->pnodeInit->AsParseNodeVar()->pid == innerLoop->AsParseNodeFor()->pnodeIncr->AsParseNodeUni()->pnode1->AsParseNodePid()->pid))",
          "4217:                 Symbol* outerVar = outerLoop->AsParseNodeFor()->pnodeInit->AsParseNodeVar()->sym;",
          "4218:                 Symbol* innerVar = innerLoop->AsParseNodeFor()->pnodeInit->AsParseNodeVar()->sym;",
          "4221:                     ParseNode* block = innerLoop->AsParseNodeFor()->pnodeBody;",
          "",
          "---------------",
          "--- Hunk 123 ---",
          "[Context before]",
          "4234: void SetAdditionalBindInfoForVariables(ParseNode *pnode, ByteCodeGenerator *byteCodeGenerator)",
          "4235: {",
          "4237:     if (sym == nullptr)",
          "4238:     {",
          "4239:         return;",
          "",
          "[Removed Lines]",
          "4236:     Symbol *sym = pnode->sxVar.sym;",
          "",
          "[Added Lines]",
          "4236:     Symbol *sym = pnode->AsParseNodeVar()->sym;",
          "",
          "---------------",
          "--- Hunk 124 ---",
          "[Context before]",
          "4254:     }",
          "4255:     if (sym->IsUsedInLdElem())",
          "4256:     {",
          "4258:     }",
          "4263:     if (byteCodeGenerator->IsInLoop() &&",
          "4265:     {",
          "4266:         sym->SetIsUsed(true);",
          "4267:     }",
          "",
          "[Removed Lines]",
          "4257:         Ident::TrySetIsUsedInLdElem(pnode->sxVar.pnodeInit);",
          "4264:         pnode->sxVar.pnodeInit)",
          "",
          "[Added Lines]",
          "4257:         Ident::TrySetIsUsedInLdElem(pnode->AsParseNodeVar()->pnodeInit);",
          "4264:         pnode->AsParseNodeVar()->pnodeInit)",
          "",
          "---------------",
          "--- Hunk 125 ---",
          "[Context before]",
          "4279:     {",
          "4280:     case knopBreak:",
          "4281:     case knopContinue:",
          "4283:         break;",
          "4284:     case knopProg:",
          "4285:         {",
          "4286:             FuncInfo* globFuncInfo = byteCodeGenerator->StartBindGlobalStatements(pnode);",
          "4291:             byteCodeGenerator->SetNumberOfInArgs(!!(byteCodeGenerator->GetFlags() & fscrEvalCode));",
          "4292:             if (!globFuncInfo->IsFakeGlobalFunction(byteCodeGenerator->GetFlags()))",
          "",
          "[Removed Lines]",
          "4282:         byteCodeGenerator->AddTargetStmt(pnode->sxJump.pnodeTarget);",
          "4287:             pnode->sxFnc.funcInfo = globFuncInfo;",
          "4288:             AddFunctionsToScope(pnode->sxFnc.GetTopLevelScope(), byteCodeGenerator);",
          "4289:             AddVarsToScope(pnode->sxFnc.pnodeVars, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "4282:         byteCodeGenerator->AddTargetStmt(pnode->AsParseNodeJump()->pnodeTarget);",
          "4287:             pnode->AsParseNodeFnc()->funcInfo = globFuncInfo;",
          "4288:             AddFunctionsToScope(pnode->AsParseNodeFnc()->GetTopLevelScope(), byteCodeGenerator);",
          "4289:             AddVarsToScope(pnode->AsParseNodeFnc()->pnodeVars, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 126 ---",
          "[Context before]",
          "4301:                 globFuncInfo->byteCodeFunction->SetIsTopLevel(false);",
          "4302:             }",
          "4304:             {",
          "4305:                 globFuncInfo->SetCallsEval(true);",
          "4306:             }",
          "4307:             break;",
          "4308:         }",
          "4309:     case knopFncDecl:",
          "4311:         {",
          "4314:             byteCodeGenerator->FuncEscapes(byteCodeGenerator->TopFuncInfo()->GetBodyScope());",
          "4315:         }",
          "4317:         {",
          "4318:             FuncInfo *funcInfo = byteCodeGenerator->TopFuncInfo();",
          "4319:             if (!funcInfo->IsGlobalFunction() || (byteCodeGenerator->GetFlags() & fscrEval))",
          "",
          "[Removed Lines]",
          "4303:             if (pnode->sxFnc.CallsEval())",
          "4310:         if (pnode->sxFnc.IsCoroutine())",
          "4316:         if (!pnode->sxFnc.IsDeclaration())",
          "",
          "[Added Lines]",
          "4303:             if (pnode->AsParseNodeFnc()->CallsEval())",
          "4310:         if (pnode->AsParseNodeFnc()->IsCoroutine())",
          "4316:         if (!pnode->AsParseNodeFnc()->IsDeclaration())",
          "",
          "---------------",
          "--- Hunk 127 ---",
          "[Context before]",
          "4326:         }",
          "4327:         else if (byteCodeGenerator->IsInLoop())",
          "4328:         {",
          "4330:             if (funcSym)",
          "4331:             {",
          "4332:                 Symbol *funcVarSym = funcSym->GetFuncScopeVarSym();",
          "",
          "[Removed Lines]",
          "4329:             Symbol *funcSym = pnode->sxFnc.GetFuncSymbol();",
          "",
          "[Added Lines]",
          "4329:             Symbol *funcSym = pnode->AsParseNodeFnc()->GetFuncSymbol();",
          "",
          "---------------",
          "--- Hunk 128 ---",
          "[Context before]",
          "4344:         break;",
          "4345:     case knopName:",
          "4346:     {",
          "4348:         {",
          "4349:             if (pnode->grfpn & fpnMemberReference)",
          "4350:             {",
          "",
          "[Removed Lines]",
          "4347:         if (pnode->sxPid.sym == nullptr)",
          "",
          "[Added Lines]",
          "4347:         if (pnode->AsParseNodePid()->sym == nullptr)",
          "",
          "---------------",
          "--- Hunk 129 ---",
          "[Context before]",
          "4352:                 break;",
          "4353:             }",
          "4356:             if (sym)",
          "4357:             {",
          "4365:                 if (sym->GetSymbolType() == STFunction &&",
          "4366:                     (!sym->GetIsGlobal() || (byteCodeGenerator->GetFlags() & fscrEval)))",
          "4367:                 {",
          "",
          "[Removed Lines]",
          "4355:             Symbol *sym = byteCodeGenerator->FindSymbol(pnode->sxPid.symRef, pnode->sxPid.pid);",
          "4360:                 Assert(!sym->GetDecl() || (pnode->sxPid.symRef && *pnode->sxPid.symRef));",
          "4361:                 Assert(!sym->GetDecl() || ((*pnode->sxPid.symRef)->GetDecl() == sym->GetDecl()) ||",
          "4362:                        ((*pnode->sxPid.symRef)->GetFuncScopeVarSym() == sym));",
          "4364:                 pnode->sxPid.sym = sym;",
          "",
          "[Added Lines]",
          "4355:             Symbol *sym = byteCodeGenerator->FindSymbol(pnode->AsParseNodePid()->symRef, pnode->AsParseNodePid()->pid);",
          "4360:                 Assert(!sym->GetDecl() || (pnode->AsParseNodePid()->symRef && *pnode->AsParseNodePid()->symRef));",
          "4361:                 Assert(!sym->GetDecl() || ((*pnode->AsParseNodePid()->symRef)->GetDecl() == sym->GetDecl()) ||",
          "4362:                        ((*pnode->AsParseNodePid()->symRef)->GetFuncScopeVarSym() == sym));",
          "4364:                 pnode->AsParseNodePid()->sym = sym;",
          "",
          "---------------",
          "--- Hunk 130 ---",
          "[Context before]",
          "4370:             }",
          "4371:         }",
          "4374:         {",
          "4376:         }",
          "4378:         break;",
          "",
          "[Removed Lines]",
          "4373:         if (pnode->sxPid.sym)",
          "4375:             pnode->sxPid.sym->SetIsUsed(true);",
          "",
          "[Added Lines]",
          "4373:         if (pnode->AsParseNodePid()->sym)",
          "4375:             pnode->AsParseNodePid()->sym->SetIsUsed(true);",
          "",
          "---------------",
          "--- Hunk 131 ---",
          "[Context before]",
          "4380:     case knopMember:",
          "4381:     case knopMemberShort:",
          "4382:     case knopObjectPatternMember:",
          "4384:         {",
          "4386:             break;",
          "",
          "[Removed Lines]",
          "4383:         if (pnode->sxBin.pnode1->nop == knopComputedName)",
          "",
          "[Added Lines]",
          "4383:         if (pnode->AsParseNodeBin()->pnode1->nop == knopComputedName)",
          "",
          "---------------",
          "--- Hunk 132 ---",
          "[Context before]",
          "4390:     case knopSetMember:",
          "4391:         {",
          "4394:             if (id->nop == knopStr || id->nop == knopName)",
          "4395:             {",
          "4399:                 id->grfpn |= fpnMemberReference;",
          "4400:             }",
          "4401:             break;",
          "",
          "[Removed Lines]",
          "4393:         ParseNode *id = pnode->sxBin.pnode1;",
          "4396:                 byteCodeGenerator->AssignPropertyId(id->sxPid.pid);",
          "4397:                 id->sxPid.sym = nullptr;",
          "4398:                 id->sxPid.symRef = nullptr;",
          "",
          "[Added Lines]",
          "4393:         ParseNode *id = pnode->AsParseNodeBin()->pnode1;",
          "4396:                 byteCodeGenerator->AssignPropertyId(id->AsParseNodePid()->pid);",
          "4397:                 id->AsParseNodePid()->sym = nullptr;",
          "4398:                 id->AsParseNodePid()->symRef = nullptr;",
          "",
          "---------------",
          "--- Hunk 133 ---",
          "[Context before]",
          "4420:         break;",
          "4421:     case knopVarDecl:",
          "4424:         {",
          "4426:         }",
          "4427:         SetAdditionalBindInfoForVariables(pnode, byteCodeGenerator);",
          "4428:         break;",
          "4429:     case knopConstDecl:",
          "4430:     case knopLetDecl:",
          "4433:         {",
          "4436:         }",
          "4437:         SetAdditionalBindInfoForVariables(pnode, byteCodeGenerator);",
          "4438:         break;",
          "",
          "[Removed Lines]",
          "4423:         if (pnode->sxVar.sym == nullptr)",
          "4425:             pnode->sxVar.sym = byteCodeGenerator->FindSymbol(pnode->sxVar.symRef, pnode->sxVar.pid);",
          "4432:         if (!pnode->sxVar.sym)",
          "4434:             AssertMsg(pnode->sxVar.symRef && *pnode->sxVar.symRef, \"'const' and 'let' should be binded when we bind block\");",
          "4435:             pnode->sxVar.sym = *pnode->sxVar.symRef;",
          "",
          "[Added Lines]",
          "4423:         if (pnode->AsParseNodeVar()->sym == nullptr)",
          "4425:             pnode->AsParseNodeVar()->sym = byteCodeGenerator->FindSymbol(pnode->AsParseNodeVar()->symRef, pnode->AsParseNodeVar()->pid);",
          "4432:         if (!pnode->AsParseNodeVar()->sym)",
          "4434:             AssertMsg(pnode->AsParseNodeVar()->symRef && *pnode->AsParseNodeVar()->symRef, \"'const' and 'let' should be binded when we bind block\");",
          "4435:             pnode->AsParseNodeVar()->sym = *pnode->AsParseNodeVar()->symRef;",
          "",
          "---------------",
          "--- Hunk 134 ---",
          "[Context before]",
          "4443:         break;",
          "4445:     case knopRegExp:",
          "4447:         break;",
          "4449:     case knopComma:",
          "4451:         break;",
          "4453:     case knopBlock:",
          "4454:     {",
          "4456:         {",
          "4457:             switch (pnodeScope->nop)",
          "4458:             {",
          "4459:             case knopFncDecl:",
          "4461:                 {",
          "4462:                     byteCodeGenerator->ProcessCapturedSyms(pnodeScope);",
          "4463:                 }",
          "4465:                 break;",
          "4467:             case knopBlock:",
          "4469:                 break;",
          "4471:             case knopCatch:",
          "4473:                 break;",
          "4475:             case knopWith:",
          "4477:                 break;",
          "4478:             }",
          "4479:         }",
          "",
          "[Removed Lines]",
          "4446:         pnode->sxPid.regexPatternIndex = byteCodeGenerator->TopFuncInfo()->GetParsedFunctionBody()->NewLiteralRegex();",
          "4450:         pnode->sxBin.pnode1->SetNotEscapedUse();",
          "4455:         for (ParseNode *pnodeScope = pnode->sxBlock.pnodeScopes; pnodeScope; /* no increment */)",
          "4460:                 if (pnodeScope->sxFnc.IsDeclaration())",
          "4464:                 pnodeScope = pnodeScope->sxFnc.pnodeNext;",
          "4468:                 pnodeScope = pnodeScope->sxBlock.pnodeNext;",
          "4472:                 pnodeScope = pnodeScope->sxCatch.pnodeNext;",
          "4476:                 pnodeScope = pnodeScope->sxWith.pnodeNext;",
          "",
          "[Added Lines]",
          "4446:         pnode->AsParseNodePid()->regexPatternIndex = byteCodeGenerator->TopFuncInfo()->GetParsedFunctionBody()->NewLiteralRegex();",
          "4450:         pnode->AsParseNodeBin()->pnode1->SetNotEscapedUse();",
          "4455:         for (ParseNode *pnodeScope = pnode->AsParseNodeBlock()->pnodeScopes; pnodeScope; /* no increment */)",
          "4460:                 if (pnodeScope->AsParseNodeFnc()->IsDeclaration())",
          "4464:                 pnodeScope = pnodeScope->AsParseNodeFnc()->pnodeNext;",
          "4468:                 pnodeScope = pnodeScope->AsParseNodeBlock()->pnodeNext;",
          "4472:                 pnodeScope = pnodeScope->AsParseNodeCatch()->pnodeNext;",
          "4476:                 pnodeScope = pnodeScope->AsParseNodeWith()->pnodeNext;",
          "",
          "---------------",
          "--- Hunk 135 ---",
          "[Context before]",
          "4486: void ByteCodeGenerator::ProcessCapturedSyms(ParseNode *pnode)",
          "4487: {",
          "4489:     if (capturedSyms)",
          "4490:     {",
          "4491:         FuncInfo *funcInfo = this->TopFuncInfo();",
          "",
          "[Removed Lines]",
          "4488:     SymbolTable *capturedSyms = pnode->sxFnc.funcInfo->GetCapturedSyms();",
          "",
          "[Added Lines]",
          "4488:     SymbolTable *capturedSyms = pnode->AsParseNodeFnc()->funcInfo->GetCapturedSyms();",
          "",
          "---------------",
          "--- Hunk 136 ---",
          "[Context before]",
          "4555:     switch (pnode->nop)",
          "4556:     {",
          "4557:     case knopAsg:",
          "4559:         {",
          "4560:             break;",
          "4561:         }",
          "4564:         isCall = false;",
          "4566:     case knopName:",
          "4567:         if (!isCall)",
          "4568:         {",
          "4571:             {",
          "4573:             }",
          "4574:         }",
          "4575:         break;",
          "",
          "[Removed Lines]",
          "4558:         if (pnode->sxBin.pnode1->nop != knopName)",
          "4563:         pnode = pnode->sxBin.pnode1;",
          "4570:             if (pnode->sxPid.sym)",
          "4572:                 pnode->sxPid.sym->SetHasMaybeEscapedUse(byteCodeGenerator);",
          "",
          "[Added Lines]",
          "4558:         if (pnode->AsParseNodeBin()->pnode1->nop != knopName)",
          "4563:         pnode = pnode->AsParseNodeBin()->pnode1;",
          "4570:             if (pnode->AsParseNodePid()->sym)",
          "4572:                 pnode->AsParseNodePid()->sym->SetHasMaybeEscapedUse(byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 137 ---",
          "[Context before]",
          "4626:                 while (sym->GetScope() != funcParentScope)",
          "4627:                 {",
          "4628:                     if (funcParentScope->GetMustInstantiate())",
          "",
          "[Removed Lines]",
          "4625:                 Scope * funcParentScope = pnode2->sxFnc.funcInfo->GetBodyScope()->GetEnclosingScope();",
          "",
          "[Added Lines]",
          "4625:                 Scope * funcParentScope = pnode2->AsParseNodeFnc()->funcInfo->GetBodyScope()->GetEnclosingScope();",
          "",
          "---------------",
          "--- Hunk 138 ---",
          "[Context before]",
          "4672:             uint flags = ParseNode::Grfnop(nop);",
          "4673:             if (flags & fnopUni)",
          "4674:             {",
          "4676:             }",
          "4677:             else if (flags & fnopBin)",
          "4678:             {",
          "4681:             }",
          "4682:         break;",
          "4683:     }",
          "4685:     case knopParamPattern:",
          "4686:         byteCodeGenerator->AssignUndefinedConstRegister();",
          "4688:         break;",
          "4690:     case knopObjectPattern:",
          "4691:     case knopArrayPattern:",
          "4692:         byteCodeGenerator->AssignUndefinedConstRegister();",
          "4694:         break;",
          "4696:     case knopDot:",
          "4698:         break;",
          "4699:     case knopMember:",
          "4700:     case knopMemberShort:",
          "4701:     case knopGetMember:",
          "4702:     case knopSetMember:",
          "4704:         break;",
          "4706:     case knopAsg:",
          "4707:         {",
          "4711:             if (pnode->IsInList())",
          "4712:             {",
          "4715:             }",
          "4718:             {",
          "4720:                 byteCodeGenerator->AssignUndefinedConstRegister();",
          "",
          "[Removed Lines]",
          "4675:                 CheckMaybeEscapedUse(pnode->sxUni.pnode1, byteCodeGenerator);",
          "4679:                 CheckMaybeEscapedUse(pnode->sxBin.pnode1, byteCodeGenerator);",
          "4680:                 CheckMaybeEscapedUse(pnode->sxBin.pnode2, byteCodeGenerator);",
          "4687:         CheckMaybeEscapedUse(pnode->sxParamPattern.pnode1, byteCodeGenerator);",
          "4693:         CheckMaybeEscapedUse(pnode->sxUni.pnode1, byteCodeGenerator);",
          "4697:         CheckMaybeEscapedUse(pnode->sxBin.pnode1, byteCodeGenerator);",
          "4703:         CheckMaybeEscapedUse(pnode->sxBin.pnode2, byteCodeGenerator);",
          "4708:             Symbol * symName = pnode->sxBin.pnode1->nop == knopName ? pnode->sxBin.pnode1->sxPid.sym : nullptr;",
          "4709:             CheckFuncAssignment(symName, pnode->sxBin.pnode2, byteCodeGenerator);",
          "4714:                 CheckMaybeEscapedUse(pnode->sxBin.pnode1, byteCodeGenerator);",
          "4717:             if (byteCodeGenerator->IsES6DestructuringEnabled() && (pnode->sxBin.pnode1->nop == knopArrayPattern || pnode->sxBin.pnode1->nop == knopObjectPattern))",
          "",
          "[Added Lines]",
          "4675:                 CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "4679:                 CheckMaybeEscapedUse(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator);",
          "4680:                 CheckMaybeEscapedUse(pnode->AsParseNodeBin()->pnode2, byteCodeGenerator);",
          "4687:         CheckMaybeEscapedUse(pnode->AsParseNodeParamPattern()->pnode1, byteCodeGenerator);",
          "4693:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "4697:         CheckMaybeEscapedUse(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator);",
          "4703:         CheckMaybeEscapedUse(pnode->AsParseNodeBin()->pnode2, byteCodeGenerator);",
          "4708:             Symbol * symName = pnode->AsParseNodeBin()->pnode1->nop == knopName ? pnode->AsParseNodeBin()->pnode1->AsParseNodePid()->sym : nullptr;",
          "4709:             CheckFuncAssignment(symName, pnode->AsParseNodeBin()->pnode2, byteCodeGenerator);",
          "4714:                 CheckMaybeEscapedUse(pnode->AsParseNodeBin()->pnode1, byteCodeGenerator);",
          "4717:             if (byteCodeGenerator->IsES6DestructuringEnabled() && (pnode->AsParseNodeBin()->pnode1->nop == knopArrayPattern || pnode->AsParseNodeBin()->pnode1->nop == knopObjectPattern))",
          "",
          "---------------",
          "--- Hunk 139 ---",
          "[Context before]",
          "4736:             byteCodeGenerator->EnregisterConstant(0);",
          "4737:         }",
          "4739:         break;",
          "4741:     case knopQmark:",
          "4745:         break;",
          "4746:     case knopWith:",
          "4747:         pnode->location = byteCodeGenerator->NextVarRegister();",
          "4749:         break;",
          "4750:     case knopComma:",
          "4751:         if (!pnode->IsNotEscapedUse())",
          "4752:         {",
          "4755:         }",
          "4756:         break;",
          "4757:     case knopFncDecl:",
          "4758:         if (!byteCodeGenerator->TopFuncInfo()->IsGlobalFunction())",
          "4759:         {",
          "4761:             {",
          "",
          "[Removed Lines]",
          "4738:         CheckMaybeEscapedUse(pnode->sxUni.pnode1, byteCodeGenerator);",
          "4742:         CheckMaybeEscapedUse(pnode->sxTri.pnode1, byteCodeGenerator);",
          "4743:         CheckMaybeEscapedUse(pnode->sxTri.pnode2, byteCodeGenerator);",
          "4744:         CheckMaybeEscapedUse(pnode->sxTri.pnode3, byteCodeGenerator);",
          "4748:         CheckMaybeEscapedUse(pnode->sxWith.pnodeObj, byteCodeGenerator);",
          "4754:             CheckMaybeEscapedUse(pnode->sxBin.pnode2, byteCodeGenerator);",
          "4760:             if (pnode->sxFnc.IsCoroutine())",
          "",
          "[Added Lines]",
          "4738:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "4742:         CheckMaybeEscapedUse(pnode->AsParseNodeTri()->pnode1, byteCodeGenerator);",
          "4743:         CheckMaybeEscapedUse(pnode->AsParseNodeTri()->pnode2, byteCodeGenerator);",
          "4744:         CheckMaybeEscapedUse(pnode->AsParseNodeTri()->pnode3, byteCodeGenerator);",
          "4748:         CheckMaybeEscapedUse(pnode->AsParseNodeWith()->pnodeObj, byteCodeGenerator);",
          "4754:             CheckMaybeEscapedUse(pnode->AsParseNodeBin()->pnode2, byteCodeGenerator);",
          "4760:             if (pnode->AsParseNodeFnc()->IsCoroutine())",
          "",
          "---------------",
          "--- Hunk 140 ---",
          "[Context before]",
          "4771:                 byteCodeGenerator->TopFuncInfo()->SetHasMaybeEscapedNestedFunc(DebugOnly(_u(\"InList\")));",
          "4772:             }",
          "4775:             if (pnodeName != nullptr)",
          "4776:             {",
          "",
          "[Removed Lines]",
          "4774:             ParseNodePtr pnodeName = pnode->sxFnc.pnodeName;",
          "",
          "[Added Lines]",
          "4774:             ParseNodePtr pnodeName = pnode->AsParseNodeFnc()->pnodeName;",
          "",
          "---------------",
          "--- Hunk 141 ---",
          "[Context before]",
          "4786:                 {",
          "4797:                     if (functionScopeVarSym)",
          "4798:                     {",
          "4799:                         functionScopeVarSym->SetHasFuncAssignment(byteCodeGenerator);",
          "",
          "[Removed Lines]",
          "4785:                 if (pnodeName->nop == knopVarDecl && pnodeName->sxVar.sym != nullptr)",
          "4791:                     pnodeName->sxVar.sym->SetHasFuncAssignment(byteCodeGenerator);",
          "4796:                     Symbol * functionScopeVarSym = pnodeName->sxVar.sym->GetFuncScopeVarSym();",
          "",
          "[Added Lines]",
          "4785:                 if (pnodeName->nop == knopVarDecl && pnodeName->AsParseNodeVar()->sym != nullptr)",
          "4791:                     pnodeName->AsParseNodeVar()->sym->SetHasFuncAssignment(byteCodeGenerator);",
          "4796:                     Symbol * functionScopeVarSym = pnodeName->AsParseNodeVar()->sym->GetFuncScopeVarSym();",
          "",
          "---------------",
          "--- Hunk 142 ---",
          "[Context before]",
          "4805:                     byteCodeGenerator->TopFuncInfo()->SetHasMaybeEscapedNestedFunc(DebugOnly(",
          "4806:                         pnodeName->nop == knopList ? _u(\"MultipleFuncName\") :",
          "4807:                         pnodeName->nop == knopDot ? _u(\"PropFuncName\") :",
          "4809:                         _u(\"WeirdFuncName\")",
          "4810:                     ));",
          "4811:                 }",
          "",
          "[Removed Lines]",
          "4808:                         pnodeName->nop == knopVarDecl && pnodeName->sxVar.sym == nullptr ? _u(\"WithScopeFuncName\") :",
          "",
          "[Added Lines]",
          "4808:                         pnodeName->nop == knopVarDecl && pnodeName->AsParseNodeVar()->sym == nullptr ? _u(\"WithScopeFuncName\") :",
          "",
          "---------------",
          "--- Hunk 143 ---",
          "[Context before]",
          "4815:         break;",
          "4816:     case knopNew:",
          "4819:         break;",
          "4820:     case knopThrow:",
          "4822:         break;",
          "4826:     case knopSwitch:",
          "4828:         break;",
          "4829:     case knopCase:",
          "4831:         break;",
          "4835:     case knopForIn:",
          "4837:         break;",
          "4839:     case knopForOf:",
          "4840:         byteCodeGenerator->AssignNullConstRegister();",
          "4841:         byteCodeGenerator->AssignUndefinedConstRegister();",
          "4843:         break;",
          "4845:     case knopTrue:",
          "",
          "[Removed Lines]",
          "4817:         CheckMaybeEscapedUse(pnode->sxCall.pnodeTarget, byteCodeGenerator);",
          "4818:         CheckMaybeEscapedUse(pnode->sxCall.pnodeArgs, byteCodeGenerator);",
          "4821:         CheckMaybeEscapedUse(pnode->sxUni.pnode1, byteCodeGenerator);",
          "4827:         CheckMaybeEscapedUse(pnode->sxSwitch.pnodeVal, byteCodeGenerator);",
          "4830:         CheckMaybeEscapedUse(pnode->sxCase.pnodeExpr, byteCodeGenerator);",
          "4836:         CheckMaybeEscapedUse(pnode->sxForInOrForOf.pnodeObj, byteCodeGenerator);",
          "4842:         CheckMaybeEscapedUse(pnode->sxForInOrForOf.pnodeObj, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "4817:         CheckMaybeEscapedUse(pnode->AsParseNodeCall()->pnodeTarget, byteCodeGenerator);",
          "4818:         CheckMaybeEscapedUse(pnode->AsParseNodeCall()->pnodeArgs, byteCodeGenerator);",
          "4821:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "4827:         CheckMaybeEscapedUse(pnode->AsParseNodeSwitch()->pnodeVal, byteCodeGenerator);",
          "4830:         CheckMaybeEscapedUse(pnode->AsParseNodeCase()->pnodeExpr, byteCodeGenerator);",
          "4836:         CheckMaybeEscapedUse(pnode->AsParseNodeForInOrForOf()->pnodeObj, byteCodeGenerator);",
          "4842:         CheckMaybeEscapedUse(pnode->AsParseNodeForInOrForOf()->pnodeObj, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 144 ---",
          "[Context before]",
          "4855:     case knopDecPre:",
          "4856:     case knopIncPre:",
          "4857:         byteCodeGenerator->EnregisterConstant(1);",
          "4859:         break;",
          "4860:     case knopObject:",
          "4861:         byteCodeGenerator->AssignNullConstRegister();",
          "",
          "[Removed Lines]",
          "4858:         CheckMaybeEscapedUse(pnode->sxUni.pnode1, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "4858:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 145 ---",
          "[Context before]",
          "4875:         break;",
          "4876:     case knopCall:",
          "4877:     {",
          "4880:         {",
          "4881:             byteCodeGenerator->AssignUndefinedConstRegister();",
          "4882:         }",
          "4884:         FuncInfo *funcInfo = byteCodeGenerator->TopFuncInfo();",
          "4887:         {",
          "4888:             if (!funcInfo->GetParsedFunctionBody()->IsReparsed())",
          "4889:             {",
          "",
          "[Removed Lines]",
          "4878:         if (pnode->sxCall.pnodeTarget->nop != knopIndex &&",
          "4879:             pnode->sxCall.pnodeTarget->nop != knopDot)",
          "4886:         if (pnode->sxCall.isEvalCall)",
          "",
          "[Added Lines]",
          "4878:         if (pnode->AsParseNodeCall()->pnodeTarget->nop != knopIndex &&",
          "4879:             pnode->AsParseNodeCall()->pnodeTarget->nop != knopDot)",
          "4886:         if (pnode->AsParseNodeCall()->isEvalCall)",
          "",
          "---------------",
          "--- Hunk 146 ---",
          "[Context before]",
          "4895:             {",
          "4899:             }",
          "4900:         }",
          "",
          "[Removed Lines]",
          "4898:                 pnode->sxCall.isEvalCall = funcInfo->GetParsedFunctionBody()->GetCallsEval();",
          "",
          "[Added Lines]",
          "4898:                 pnode->AsParseNodeCall()->isEvalCall = funcInfo->GetParsedFunctionBody()->GetCallsEval();",
          "",
          "---------------",
          "--- Hunk 147 ---",
          "[Context before]",
          "4908:     }",
          "4910:     case knopInt:",
          "4912:         break;",
          "4913:     case knopFlt:",
          "4914:     {",
          "4916:         break;",
          "4917:     }",
          "4918:     case knopStr:",
          "4920:         break;",
          "4921:     case knopVarDecl:",
          "4922:     case knopConstDecl:",
          "4923:     case knopLetDecl:",
          "4924:         {",
          "4926:             Assert(sym != nullptr);",
          "4928:             Assert(sym->GetScope()->GetEnclosingFunc() == byteCodeGenerator->TopFuncInfo());",
          "4931:             {",
          "4932:                 break;",
          "4933:             }",
          "",
          "[Removed Lines]",
          "4911:         pnode->location = byteCodeGenerator->EnregisterConstant(pnode->sxInt.lw);",
          "4915:         pnode->location = byteCodeGenerator->EnregisterDoubleConstant(pnode->sxFlt.dbl);",
          "4919:         pnode->location = byteCodeGenerator->EnregisterStringConstant(pnode->sxPid.pid);",
          "4925:             sym = pnode->sxVar.sym;",
          "4930:             if (pnode->sxVar.isBlockScopeFncDeclVar && sym->GetIsBlockVar())",
          "",
          "[Added Lines]",
          "4911:         pnode->location = byteCodeGenerator->EnregisterConstant(pnode->AsParseNodeInt()->lw);",
          "4915:         pnode->location = byteCodeGenerator->EnregisterDoubleConstant(pnode->AsParseNodeFloat()->dbl);",
          "4919:         pnode->location = byteCodeGenerator->EnregisterStringConstant(pnode->AsParseNodePid()->pid);",
          "4925:             sym = pnode->AsParseNodeVar()->sym;",
          "4930:             if (pnode->AsParseNodeVar()->isBlockScopeFncDeclVar && sym->GetIsBlockVar())",
          "",
          "---------------",
          "--- Hunk 148 ---",
          "[Context before]",
          "4945:                 {",
          "",
          "[Removed Lines]",
          "4941:                 CheckFuncAssignment(sym, pnode->sxVar.pnodeInit, byteCodeGenerator);",
          "4944:                 if ((sym->GetIsCatch() && pnode->sxVar.sym->GetScope()->GetScopeType() != ScopeType_CatchParamPattern) || (pnode->nop == knopVarDecl && sym->GetIsBlockVar() && !pnode->sxVar.isBlockScopeFncDeclVar))",
          "",
          "[Added Lines]",
          "4941:                 CheckFuncAssignment(sym, pnode->AsParseNodeVar()->pnodeInit, byteCodeGenerator);",
          "4944:                 if ((sym->GetIsCatch() && pnode->AsParseNodeVar()->sym->GetScope()->GetScopeType() != ScopeType_CatchParamPattern) || (pnode->nop == knopVarDecl && sym->GetIsBlockVar() && !pnode->AsParseNodeVar()->isBlockScopeFncDeclVar))",
          "",
          "---------------",
          "--- Hunk 149 ---",
          "[Context before]",
          "4987:         }",
          "4989:     case knopFor:",
          "4993:             (!byteCodeGenerator->IsInDebugMode()))",
          "4994:         {",
          "4995:                 FuncInfo *funcInfo = byteCodeGenerator->TopFuncInfo();",
          "4997:         }",
          "4998:         else",
          "4999:         {",
          "5001:         }",
          "5003:         break;",
          "5005:     case knopName:",
          "5007:         if (sym == nullptr)",
          "5008:         {",
          "5012:             if (ByteCodeGenerator::IsThis(pnode) && !byteCodeGenerator->TopFuncInfo()->GetThisSymbol() && !(byteCodeGenerator->GetFlags() & fscrEval))",
          "",
          "[Removed Lines]",
          "4990:         if ((pnode->sxFor.pnodeBody != nullptr) && (pnode->sxFor.pnodeBody->nop == knopBlock) &&",
          "4991:             (pnode->sxFor.pnodeBody->sxBlock.pnodeStmt != nullptr) &&",
          "4992:             (pnode->sxFor.pnodeBody->sxBlock.pnodeStmt->nop == knopFor) &&",
          "4996:             pnode->sxFor.pnodeInverted = InvertLoop(pnode, byteCodeGenerator, funcInfo);",
          "5000:             pnode->sxFor.pnodeInverted = nullptr;",
          "5006:         sym = pnode->sxPid.sym;",
          "5009:             Assert(pnode->sxPid.pid->GetPropertyId() != Js::Constants::NoProperty);",
          "",
          "[Added Lines]",
          "4990:         if ((pnode->AsParseNodeFor()->pnodeBody != nullptr) && (pnode->AsParseNodeFor()->pnodeBody->nop == knopBlock) &&",
          "4991:             (pnode->AsParseNodeFor()->pnodeBody->AsParseNodeBlock()->pnodeStmt != nullptr) &&",
          "4992:             (pnode->AsParseNodeFor()->pnodeBody->AsParseNodeBlock()->pnodeStmt->nop == knopFor) &&",
          "4996:             pnode->AsParseNodeFor()->pnodeInverted = InvertLoop(pnode, byteCodeGenerator, funcInfo);",
          "5000:             pnode->AsParseNodeFor()->pnodeInverted = nullptr;",
          "5006:         sym = pnode->AsParseNodePid()->sym;",
          "5009:             Assert(pnode->AsParseNodePid()->pid->GetPropertyId() != Js::Constants::NoProperty);",
          "",
          "---------------",
          "--- Hunk 150 ---",
          "[Context before]",
          "5068:         break;",
          "5069:     case knopReturn:",
          "5070:         {",
          "5072:             CheckMaybeEscapedUse(pnodeExpr, byteCodeGenerator);",
          "5073:             break;",
          "5074:         }",
          "5076:     case knopStrTemplate:",
          "5077:         {",
          "5079:             if (pnodeExprs != nullptr)",
          "5080:             {",
          "5081:                 while (pnodeExprs->nop == knopList)",
          "5082:                 {",
          "5088:                 }",
          "5091:                 CheckMaybeEscapedUse(pnodeExprs, byteCodeGenerator);",
          "5092:             }",
          "5095:             {",
          "5096:                 pnode->location = byteCodeGenerator->EnregisterStringTemplateCallsiteConstant(pnode);",
          "5097:             }",
          "",
          "[Removed Lines]",
          "5071:             ParseNode *pnodeExpr = pnode->sxReturn.pnodeExpr;",
          "5078:             ParseNode* pnodeExprs = pnode->sxStrTemplate.pnodeSubstitutionExpressions;",
          "5083:                     Assert(pnodeExprs->sxBin.pnode1 != nullptr);",
          "5084:                     Assert(pnodeExprs->sxBin.pnode2 != nullptr);",
          "5086:                     CheckMaybeEscapedUse(pnodeExprs->sxBin.pnode1, byteCodeGenerator);",
          "5087:                     pnodeExprs = pnodeExprs->sxBin.pnode2;",
          "5094:             if (pnode->sxStrTemplate.isTaggedTemplate)",
          "",
          "[Added Lines]",
          "5071:             ParseNode *pnodeExpr = pnode->AsParseNodeReturn()->pnodeExpr;",
          "5078:             ParseNode* pnodeExprs = pnode->AsParseNodeStrTemplate()->pnodeSubstitutionExpressions;",
          "5083:                     Assert(pnodeExprs->AsParseNodeBin()->pnode1 != nullptr);",
          "5084:                     Assert(pnodeExprs->AsParseNodeBin()->pnode2 != nullptr);",
          "5086:                     CheckMaybeEscapedUse(pnodeExprs->AsParseNodeBin()->pnode1, byteCodeGenerator);",
          "5087:                     pnodeExprs = pnodeExprs->AsParseNodeBin()->pnode2;",
          "5094:             if (pnode->AsParseNodeStrTemplate()->isTaggedTemplate)",
          "",
          "---------------",
          "--- Hunk 151 ---",
          "[Context before]",
          "5099:         }",
          "5100:     case knopExportDefault:",
          "5101:         {",
          "5104:             if (expr != nullptr)",
          "5105:             {",
          "",
          "[Removed Lines]",
          "5102:             ParseNode* expr = pnode->sxExportDefault.pnodeExpr;",
          "",
          "[Added Lines]",
          "5102:             ParseNode* expr = pnode->AsParseNodeExportDefault()->pnodeExpr;",
          "",
          "---------------",
          "--- Hunk 152 ---",
          "[Context before]",
          "5112:         byteCodeGenerator->AssignUndefinedConstRegister();",
          "5113:         break;",
          "5114:     case knopYield:",
          "5116:         break;",
          "5117:     case knopYieldStar:",
          "5118:         byteCodeGenerator->AssignNullConstRegister();",
          "5119:         byteCodeGenerator->AssignUndefinedConstRegister();",
          "5121:         break;",
          "5122:     }",
          "5123: }",
          "",
          "[Removed Lines]",
          "5115:         CheckMaybeEscapedUse(pnode->sxUni.pnode1, byteCodeGenerator);",
          "5120:         CheckMaybeEscapedUse(pnode->sxUni.pnode1, byteCodeGenerator);",
          "",
          "[Added Lines]",
          "5115:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "5120:         CheckMaybeEscapedUse(pnode->AsParseNodeUni()->pnode1, byteCodeGenerator);",
          "",
          "---------------",
          "--- Hunk 153 ---",
          "[Context before]",
          "5134:     }",
          "5136:     if (!fncDecl->HasVarArguments()",
          "5140:     {",
          "5141:         ApplyCheck applyCheck;",
          "5142:         applyCheck.matches = true;",
          "5143:         applyCheck.sawApply = false;",
          "5144:         applyCheck.insideApplyCall = false;",
          "5146:         return applyCheck.matches&&applyCheck.sawApply;",
          "5147:     }",
          "",
          "[Removed Lines]",
          "5137:         && fncDecl->sxFnc.pnodeParams == nullptr",
          "5138:         && fncDecl->sxFnc.pnodeRest == nullptr",
          "5139:         && fncDecl->sxFnc.nestedCount == 0)",
          "5145:         VisitIndirect<ApplyCheck>(fncDecl->sxFnc.pnodeBody, byteCodeGenerator, &applyCheck, &CheckApplyEnclosesArgs, &PostCheckApplyEnclosesArgs);",
          "",
          "[Added Lines]",
          "5137:         && fncDecl->AsParseNodeFnc()->pnodeParams == nullptr",
          "5138:         && fncDecl->AsParseNodeFnc()->pnodeRest == nullptr",
          "5139:         && fncDecl->AsParseNodeFnc()->nestedCount == 0)",
          "5145:         VisitIndirect<ApplyCheck>(fncDecl->AsParseNodeFnc()->pnodeBody, byteCodeGenerator, &applyCheck, &CheckApplyEnclosesArgs, &PostCheckApplyEnclosesArgs);",
          "",
          "---------------",
          "--- Hunk 154 ---",
          "[Context before]",
          "5169:             Js::Constants::GlobalFunction,",
          "5170:             Js::Constants::GlobalFunctionLength,",
          "5171:             0,",
          "5173:             m_utf8SourceInfo,",
          "5174:             m_utf8SourceInfo->GetSrcInfo()->sourceContextInfo->sourceContextId,",
          "5176:             propertyRecordList,",
          "5177:             Js::FunctionInfo::Attributes::None,",
          "5178:             Js::FunctionBody::FunctionBodyFlags::Flags_HasNoExplicitReturnValue",
          "",
          "[Removed Lines]",
          "5172:             pnode->sxFnc.nestedCount,",
          "5175:             pnode->sxFnc.functionId,",
          "",
          "[Added Lines]",
          "5172:             pnode->AsParseNodeFnc()->nestedCount,",
          "5175:             pnode->AsParseNodeFnc()->functionId,",
          "",
          "---------------",
          "--- Hunk 155 ---",
          "[Context before]",
          "5197:         funcInfo->GetHasHeapArguments()",
          "5199:         && (funcInfo->GetIsStrictMode()",
          "5202:         && !funcInfo->paramScope->GetIsObject()",
          "5203:         && !funcInfo->bodyScope->GetIsObject();",
          "5205:     return funcInfo->GetHasHeapArguments()",
          "5208:         && !dontNeedScopeObject;",
          "5209: }",
          "",
          "[Removed Lines]",
          "5200:             || pnodeFnc->sxFnc.HasNonSimpleParameterList())",
          "5207:         && (pnodeFnc->sxFnc.pnodeParams != nullptr || pnodeFnc->sxFnc.pnodeRest != nullptr)",
          "",
          "[Added Lines]",
          "5200:             || pnodeFnc->AsParseNodeFnc()->HasNonSimpleParameterList())",
          "5207:         && (pnodeFnc->AsParseNodeFnc()->pnodeParams != nullptr || pnodeFnc->AsParseNodeFnc()->pnodeRest != nullptr)",
          "",
          "---------------",
          "--- Hunk 156 ---",
          "[Context before]",
          "5220:     {",
          "5221:         func->SetBoundPropertyRecords(EnsurePropertyRecordList());",
          "5222:     }",
          "5224:     {",
          "5225:         func->SetIsStrictMode();",
          "5226:     }",
          "",
          "[Removed Lines]",
          "5223:     if (pnode->sxFnc.GetStrictMode() != 0)",
          "",
          "[Added Lines]",
          "5223:     if (pnode->AsParseNodeFnc()->GetStrictMode() != 0)",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/ByteCodeGenerator.h||lib/Runtime/ByteCode/ByteCodeGenerator.h": [
          "File: lib/Runtime/ByteCode/ByteCodeGenerator.h -> lib/Runtime/ByteCode/ByteCodeGenerator.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: template<class Fn> void ByteCodeGenerator::IterateBlockScopedVariables(ParseNode *pnodeBlock, Fn fn)",
          "417: {",
          "418:     Assert(pnodeBlock->nop == knopBlock);",
          "420:     {",
          "421:         fn(lexvar);",
          "422:     }",
          "",
          "[Removed Lines]",
          "419:     for (auto lexvar = pnodeBlock->sxBlock.pnodeLexVars; lexvar; lexvar = lexvar->sxVar.pnodeNext)",
          "",
          "[Added Lines]",
          "419:     for (auto lexvar = pnodeBlock->AsParseNodeBlock()->pnodeLexVars; lexvar; lexvar = lexvar->AsParseNodeVar()->pnodeNext)",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/FuncInfo.cpp||lib/Runtime/ByteCode/FuncInfo.cpp": [
          "File: lib/Runtime/ByteCode/FuncInfo.cpp -> lib/Runtime/ByteCode/FuncInfo.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     {",
          "110:         paramScope->SetFunc(this);",
          "111:     }",
          "113:     {",
          "114:         this->SetHasMaybeEscapedNestedFunc(DebugOnly(_u(\"Child\")));",
          "115:     }",
          "",
          "[Removed Lines]",
          "112:     if (pnode && pnode->sxFnc.NestedFuncEscapes())",
          "",
          "[Added Lines]",
          "112:     if (pnode && pnode->AsParseNodeFnc()->NestedFuncEscapes())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132: bool FuncInfo::IsDeferred() const",
          "133: {",
          "135: }",
          "137: BOOL FuncInfo::HasSuperReference() const",
          "138: {",
          "140: }",
          "142: BOOL FuncInfo::HasDirectSuper() const",
          "143: {",
          "145: }",
          "147: BOOL FuncInfo::IsClassMember() const",
          "",
          "[Removed Lines]",
          "134:     return root && root->sxFnc.pnodeBody == nullptr;",
          "139:     return root->sxFnc.HasSuperReference();",
          "144:     return root->sxFnc.HasDirectSuper();",
          "",
          "[Added Lines]",
          "134:     return root && root->AsParseNodeFnc()->pnodeBody == nullptr;",
          "139:     return root->AsParseNodeFnc()->HasSuperReference();",
          "144:     return root->AsParseNodeFnc()->HasDirectSuper();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167: BOOL FuncInfo::IsDerivedClassConstructor() const",
          "168: {",
          "170: }",
          "172: Scope *",
          "173: FuncInfo::GetGlobalBlockScope() const",
          "174: {",
          "175:     Assert(this->IsGlobalFunction());",
          "177:     Assert(scope == nullptr || scope == this->GetBodyScope() || scope->GetEnclosingScope() == this->GetBodyScope());",
          "178:     return scope;",
          "179: }",
          "",
          "[Removed Lines]",
          "169:     return root->sxFnc.IsDerivedClassConstructor();",
          "176:     Scope * scope = this->root->sxFnc.pnodeScopes->sxBlock.scope;",
          "",
          "[Added Lines]",
          "169:     return root->AsParseNodeFnc()->IsDerivedClassConstructor();",
          "176:     Scope * scope = this->root->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:     switch (pnode->nop)",
          "282:     {",
          "283:     case knopDot:",
          "285:         break;",
          "287:     case knopIndex:",
          "290:         break;",
          "292:     case knopName:",
          "",
          "[Removed Lines]",
          "284:         this->ReleaseLoc(pnode->sxBin.pnode1);",
          "288:         this->ReleaseLoc(pnode->sxBin.pnode2);",
          "289:         this->ReleaseLoc(pnode->sxBin.pnode1);",
          "",
          "[Added Lines]",
          "284:         this->ReleaseLoc(pnode->AsParseNodeBin()->pnode1);",
          "288:         this->ReleaseLoc(pnode->AsParseNodeBin()->pnode2);",
          "289:         this->ReleaseLoc(pnode->AsParseNodeBin()->pnode1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "303:         {",
          "305:             Js::RegSlot firstArg = Js::Constants::NoRegister;",
          "306:             Js::RegSlot lastArg = Js::Constants::NoRegister;",
          "307:             if (pnodeArg->nop == knopList)",
          "308:             {",
          "309:                 do",
          "310:                 {",
          "312:                     {",
          "314:                         if (firstArg == Js::Constants::NoRegister)",
          "315:                         {",
          "316:                             firstArg = lastArg;",
          "317:                         }",
          "318:                     }",
          "320:                 }",
          "321:                 while (pnodeArg->nop == knopList);",
          "322:             }",
          "",
          "[Removed Lines]",
          "302:         if (pnode->sxCall.pnodeArgs)",
          "304:             ParseNode *pnodeArg = pnode->sxCall.pnodeArgs;",
          "311:                     if (this->IsTmpReg(pnodeArg->sxBin.pnode1->location))",
          "313:                         lastArg = pnodeArg->sxBin.pnode1->location;",
          "319:                     pnodeArg = pnodeArg->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "302:         if (pnode->AsParseNodeCall()->pnodeArgs)",
          "304:             ParseNode *pnodeArg = pnode->AsParseNodeCall()->pnodeArgs;",
          "311:                     if (this->IsTmpReg(pnodeArg->AsParseNodeBin()->pnode1->location))",
          "313:                         lastArg = pnodeArg->AsParseNodeBin()->pnode1->location;",
          "319:                     pnodeArg = pnodeArg->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "341:             }",
          "342:         }",
          "345:         {",
          "346:         case knopDot:",
          "347:         case knopIndex:",
          "350:             break;",
          "351:         default:",
          "353:             break;",
          "354:         }",
          "355:         break;",
          "",
          "[Removed Lines]",
          "344:         switch (pnode->sxCall.pnodeTarget->nop)",
          "348:             this->ReleaseReference(pnode->sxCall.pnodeTarget);",
          "349:             this->ReleaseLoc(pnode->sxCall.pnodeTarget);",
          "352:             this->ReleaseLoad(pnode->sxCall.pnodeTarget);",
          "",
          "[Added Lines]",
          "344:         switch (pnode->AsParseNodeCall()->pnodeTarget->nop)",
          "348:             this->ReleaseReference(pnode->AsParseNodeCall()->pnodeTarget);",
          "349:             this->ReleaseLoc(pnode->AsParseNodeCall()->pnodeTarget);",
          "352:             this->ReleaseLoad(pnode->AsParseNodeCall()->pnodeTarget);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "410:     Assert(pnodeFnc->nop == knopFncDecl);",
          "411:     Assert(this->GetCurrentChildFunction() == nullptr);",
          "414: }",
          "416: void FuncInfo::OnEndVisitFunction(ParseNode *pnodeFnc)",
          "417: {",
          "418:     Assert(pnodeFnc->nop == knopFncDecl);",
          "422:     this->SetCurrentChildFunction(nullptr);",
          "423: }",
          "",
          "[Removed Lines]",
          "413:     this->SetCurrentChildFunction(pnodeFnc->sxFnc.funcInfo);",
          "419:     Assert(this->GetCurrentChildFunction() == pnodeFnc->sxFnc.funcInfo);",
          "421:     pnodeFnc->sxFnc.funcInfo->SetCurrentChildScope(nullptr);",
          "",
          "[Added Lines]",
          "413:     this->SetCurrentChildFunction(pnodeFnc->AsParseNodeFnc()->funcInfo);",
          "419:     Assert(this->GetCurrentChildFunction() == pnodeFnc->AsParseNodeFnc()->funcInfo);",
          "421:     pnodeFnc->AsParseNodeFnc()->funcInfo->SetCurrentChildScope(nullptr);",
          "",
          "---------------"
        ],
        "lib/Runtime/ByteCode/Scope.cpp||lib/Runtime/ByteCode/Scope.cpp": [
          "File: lib/Runtime/ByteCode/Scope.cpp -> lib/Runtime/ByteCode/Scope.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: void Scope::MergeParamAndBodyScopes(ParseNode *pnodeScope)",
          "81: {",
          "86:     if (paramScope->Count() == 0)",
          "87:     {",
          "",
          "[Removed Lines]",
          "82:     Assert(pnodeScope->sxFnc.funcInfo);",
          "83:     Scope *paramScope = pnodeScope->sxFnc.pnodeScopes->sxBlock.scope;",
          "84:     Scope *bodyScope = pnodeScope->sxFnc.pnodeBodyScope->sxBlock.scope;",
          "",
          "[Added Lines]",
          "82:     Assert(pnodeScope->AsParseNodeFnc()->funcInfo);",
          "83:     Scope *paramScope = pnodeScope->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->scope;",
          "84:     Scope *bodyScope = pnodeScope->AsParseNodeFnc()->pnodeBodyScope->AsParseNodeBlock()->scope;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: void Scope::RemoveParamScope(ParseNode *pnodeScope)",
          "112: {",
          "118:     paramScope->SetMustInstantiate(false);",
          "",
          "[Removed Lines]",
          "113:     Assert(pnodeScope->sxFnc.funcInfo);",
          "114:     Scope *paramScope = pnodeScope->sxFnc.pnodeScopes->sxBlock.scope;",
          "115:     Scope *bodyScope = pnodeScope->sxFnc.pnodeBodyScope->sxBlock.scope;",
          "",
          "[Added Lines]",
          "113:     Assert(pnodeScope->AsParseNodeFnc()->funcInfo);",
          "114:     Scope *paramScope = pnodeScope->AsParseNodeFnc()->pnodeScopes->AsParseNodeBlock()->scope;",
          "115:     Scope *bodyScope = pnodeScope->AsParseNodeFnc()->pnodeBodyScope->AsParseNodeBlock()->scope;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJs.cpp||lib/Runtime/Language/AsmJs.cpp": [
          "File: lib/Runtime/Language/AsmJs.cpp -> lib/Runtime/Language/AsmJs.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     bool",
          "59:     AsmJSCompiler::CheckFunctionHead(AsmJsModuleCompiler &m, ParseNode *fn, bool isGlobal /*= true*/)",
          "60:     {",
          "64:         {",
          "65:             return m.Fail(fn, _u(\"default, rest & destructuring args not allowed\"));",
          "66:         }",
          "69:         {",
          "70:             return m.Fail(fn, _u(\"static functions are not allowed\"));",
          "71:         }",
          "74:         {",
          "75:             return m.Fail(fn, _u(\"generator functions are not allowed\"));",
          "76:         }",
          "79:         {",
          "80:             return m.Fail(fn, _u(\"async functions are not allowed\"));",
          "81:         }",
          "84:         {",
          "85:             return m.Fail(fn, _u(\"lambda functions are not allowed\"));",
          "86:         }",
          "89:         {",
          "90:             return m.Fail(fn, _u(\"closure functions are not allowed\"));",
          "91:         }",
          "94:         {",
          "95:             return m.Fail(fn, _u(\"invalid function flags detected\"));",
          "96:         }",
          "",
          "[Removed Lines]",
          "61:         PnFnc fnc = fn->sxFnc;",
          "63:         if (fnc.HasNonSimpleParameterList())",
          "68:         if (fnc.IsStaticMember())",
          "73:         if (fnc.IsGenerator())",
          "78:         if (fnc.IsAsync())",
          "83:         if (fnc.IsLambda())",
          "88:         if (!isGlobal && fnc.nestedCount != 0)",
          "93:         if (!fnc.IsAsmJsAllowed())",
          "",
          "[Added Lines]",
          "61:         ParseNodeFnc * fnc = fn->AsParseNodeFnc();",
          "63:         if (fnc->HasNonSimpleParameterList())",
          "68:         if (fnc->IsStaticMember())",
          "73:         if (fnc->IsGenerator())",
          "78:         if (fnc->IsAsync())",
          "83:         if (fnc->IsLambda())",
          "88:         if (!isGlobal && fnc->nestedCount != 0)",
          "93:         if (!fnc->IsAsmJsAllowed())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:             if( coercedExpr )",
          "114:             {",
          "117:                 {",
          "118:                     if( rhs->nop == knopAnd )",
          "119:                     {",
          "",
          "[Removed Lines]",
          "116:                 if( rhs->nop == knopInt && rhs->sxInt.lw == 0 )",
          "",
          "[Added Lines]",
          "116:                 if( rhs->nop == knopInt && rhs->AsParseNodeInt()->lw == 0 )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145:             ParseNode* target;",
          "146:             AsmJsFunctionDeclaration* sym;",
          "150:             if (!target || target->nop != knopName)",
          "151:             {",
          "",
          "[Removed Lines]",
          "148:             target = coercionNode->sxCall.pnodeTarget;",
          "",
          "[Added Lines]",
          "148:             target = coercionNode->AsParseNodeCall()->pnodeTarget;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:             {",
          "180:             }",
          "182:             {",
          "183:                 return m.Fail(coercionNode, _u(\"Integer literal in return must be in range [-2^31, 2^31)\"));",
          "184:             }",
          "",
          "[Removed Lines]",
          "181:             else if (coercionNode->sxFlt.maybeInt)",
          "",
          "[Added Lines]",
          "181:             else if (coercionNode->AsParseNodeFloat()->maybeInt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:         Assert( newExpr->nop == knopNew );",
          "346:         m.SetUsesHeapBuffer(true);",
          "349:         ArrayBufferView::ViewType type;",
          "350:         if( ParserWrapper::IsDotMember(ctorExpr) )",
          "351:         {",
          "",
          "[Removed Lines]",
          "348:         ParseNode *ctorExpr = newExpr->sxCall.pnodeTarget;",
          "",
          "[Added Lines]",
          "348:         ParseNode *ctorExpr = newExpr->AsParseNodeCall()->pnodeTarget;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "426:             return m.Fail(newExpr, _u(\"invalid 'new' import\"));",
          "427:         }",
          "430:         if( !bufArg || !ParserWrapper::IsNameDeclaration( bufArg ) )",
          "431:         {",
          "432:             return m.Fail( ctorExpr, _u(\"array view constructor takes exactly one argument\") );",
          "",
          "[Removed Lines]",
          "429:         ParseNode *bufArg = newExpr->sxCall.pnodeArgs;",
          "",
          "[Added Lines]",
          "429:         ParseNode *bufArg = newExpr->AsParseNodeCall()->pnodeArgs;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "553:             return false;",
          "554:         }",
          "557:         {",
          "558:             return m.Fail(var, _u(\"module import needs initializer\"));",
          "559:         }",
          "564:         if( ParserWrapper::IsNumericLiteral( initNode ) )",
          "",
          "[Removed Lines]",
          "556:         if (!var->sxVar.pnodeInit)",
          "561:         ParseNode *initNode = var->sxVar.pnodeInit;",
          "",
          "[Added Lines]",
          "556:         if (!var->AsParseNodeVar()->pnodeInit)",
          "561:         ParseNode *initNode = var->AsParseNodeVar()->pnodeInit;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "631:                     goto varDeclEnd;",
          "632:                 }",
          "635:                 {",
          "637:                     goto varDeclEnd;",
          "",
          "[Removed Lines]",
          "634:                 if (decl->sxVar.pnodeInit && decl->sxVar.pnodeInit->nop == knopArray)",
          "",
          "[Added Lines]",
          "634:                 if (decl->AsParseNodeVar()->pnodeInit && decl->AsParseNodeVar()->pnodeInit->nop == knopArray)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "686:         if( PHASE_TRACE1( Js::ByteCodePhase ) )",
          "687:         {",
          "689:         }",
          "691:         if( !CheckFunctionHead( m, fncNode, false ) )",
          "",
          "[Removed Lines]",
          "688:             Output::Print( _u(\"  Checking Asm function: %s\\n\"), fncNode->sxFnc.funcInfo->name);",
          "",
          "[Added Lines]",
          "688:             Output::Print( _u(\"  Checking Asm function: %s\\n\"), fncNode->AsParseNodeFnc()->funcInfo->name);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "742:             {",
          "743:                 break;",
          "744:             }",
          "746:             {",
          "747:                 break;",
          "748:             }",
          "750:             if (!::Math::IsPow2(tableSize))",
          "751:             {",
          "752:                 return m.FailName(varStmt, _u(\"Function table [%s] size must be a power of 2\"), varStmt->name());",
          "",
          "[Removed Lines]",
          "745:             if (!varStmt->sxVar.pnodeInit || varStmt->sxVar.pnodeInit->nop != knopArray)",
          "749:             const uint tableSize = varStmt->sxVar.pnodeInit->sxArrLit.count;",
          "",
          "[Added Lines]",
          "745:             if (!varStmt->AsParseNodeVar()->pnodeInit || varStmt->AsParseNodeVar()->pnodeInit->nop != knopArray)",
          "749:             const uint tableSize = varStmt->AsParseNodeVar()->pnodeInit->AsParseNodeArrLit()->count;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "759:             AsmJsFunctionTable* ftable = (AsmJsFunctionTable*)m.LookupIdentifier(varStmt->name());",
          "760:             Assert(ftable);",
          "762:             if (pnode->nop == knopList)",
          "763:             {",
          "764:                 pnode = ParserWrapper::GetBinaryLeft(pnode);",
          "",
          "[Removed Lines]",
          "761:             ParseNode* pnode = varStmt->sxVar.pnodeInit->sxArrLit.pnode1;",
          "",
          "[Added Lines]",
          "761:             ParseNode* pnode = varStmt->AsParseNodeVar()->pnodeInit->AsParseNodeArrLit()->pnode1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "794:             return m.Fail( node, _u(\"Only expression after table functions must be a return\") );",
          "795:         }",
          "798:         if ( !objNode )",
          "799:         {",
          "800:             return m.Fail( node, _u( \"Module return must be an object or 1 function\" ) );",
          "",
          "[Removed Lines]",
          "797:         ParseNode* objNode = node->sxReturn.pnodeExpr;",
          "",
          "[Added Lines]",
          "797:         ParseNode* objNode = node->AsParseNodeReturn()->pnodeExpr;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "895:                 break;",
          "896:             }",
          "899:             if( !nodeInit || nodeInit->nop != knopArray )",
          "900:             {",
          "901:                 return m.Fail( varStmt, _u(\"Invalid variable after function declaration\") );",
          "",
          "[Removed Lines]",
          "898:             ParseNode* nodeInit = varStmt->sxVar.pnodeInit;",
          "",
          "[Added Lines]",
          "898:             ParseNode* nodeInit = varStmt->AsParseNodeVar()->pnodeInit;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "923:                 }",
          "927:                 if( table->GetSize() != count )",
          "928:                 {",
          "929:                     return m.FailName( varStmt, _u(\"Invalid size of function table %s\"), tableName );",
          "930:                 }",
          "934:                 uint i = 0;",
          "935:                 while( node )",
          "936:                 {",
          "",
          "[Removed Lines]",
          "926:                 uint count = nodeInit->sxArrLit.count;",
          "933:                 ParseNode* node = nodeInit->sxArrLit.pnode1;",
          "",
          "[Added Lines]",
          "926:                 uint count = nodeInit->AsParseNodeArrLit()->count;",
          "933:                 ParseNode* node = nodeInit->AsParseNodeArrLit()->pnode1;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1069:         ParseNode * moduleNode = m.GetModuleFunctionNode();",
          "1070:         if( moduleNode )",
          "1071:         {",
          "1073:             body->ResetByteCodeGenState();",
          "1074:         }",
          "",
          "[Removed Lines]",
          "1072:             FunctionBody* body = moduleNode->sxFnc.funcInfo->GetParsedFunctionBody();",
          "",
          "[Added Lines]",
          "1072:             FunctionBody* body = moduleNode->AsParseNodeFnc()->funcInfo->GetParsedFunctionBody();",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsByteCodeGenerator.cpp||lib/Runtime/Language/AsmJsByteCodeGenerator.cpp": [
          "File: lib/Runtime/Language/AsmJsByteCodeGenerator.cpp -> lib/Runtime/Language/AsmJsByteCodeGenerator.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     {",
          "95:         mWriter.Create();",
          "99:         mWriter.InitData(&mAllocator, astSize);",
          "",
          "[Removed Lines]",
          "97:         const int32 astSize = func->GetFncNode()->sxFnc.astSize/AstBytecodeRatioEstimate;",
          "",
          "[Added Lines]",
          "97:         const int32 astSize = func->GetFncNode()->AsParseNodeFnc()->astSize/AstBytecodeRatioEstimate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     bool AsmJSByteCodeGenerator::BlockHasOwnScope( ParseNode* pnodeBlock )",
          "108:     {",
          "109:         Assert( pnodeBlock->nop == knopBlock );",
          "111:     }",
          "113:     template<typename T> byte* AsmJSByteCodeGenerator::SetConstsToTable(byte* byteTable, T zeroValue)",
          "",
          "[Removed Lines]",
          "110:         return pnodeBlock->sxBlock.scope != nullptr && ( !( pnodeBlock->grfpn & fpnSyntheticNode ) );",
          "",
          "[Added Lines]",
          "110:         return pnodeBlock->AsParseNodeBlock()->scope != nullptr && ( !( pnodeBlock->grfpn & fpnSyntheticNode ) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "195:             MaybeTodo( mInfo->IsFakeGlobalFunction( byteCodeGen->GetFlags() ) );",
          "200:             FunctionBody* functionBody = mFunction->GetFuncBody();",
          "201:             functionBody->SetStackNestedFunc( false );",
          "",
          "[Removed Lines]",
          "198:             MaybeTodo( pnode->sxFnc.HasDefaultArguments() );",
          "",
          "[Added Lines]",
          "198:             MaybeTodo( pnode->AsParseNodeFnc()->HasDefaultArguments() );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "299:         while (iter.Next())",
          "300:         {",
          "301:             ParseNode * node = iter.Data();",
          "304:             node->emitLabels=true;",
          "305:         }",
          "306:     }",
          "",
          "[Removed Lines]",
          "302:             node->sxStmt.breakLabel=mWriter.DefineLabel();",
          "303:             node->sxStmt.continueLabel=mWriter.DefineLabel();",
          "",
          "[Added Lines]",
          "302:             node->AsParseNodeStmt()->breakLabel=mWriter.DefineLabel();",
          "303:             node->AsParseNodeStmt()->continueLabel=mWriter.DefineLabel();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:                 else",
          "346:                 {",
          "347:                     AsmJsVar * initSource = nullptr;",
          "349:                     {",
          "351:                         if (AsmJsVar::Is(initSym))",
          "352:                         {",
          "",
          "[Removed Lines]",
          "348:                     if (decl->sxVar.pnodeInit->nop == knopName)",
          "350:                         AsmJsSymbol * initSym = mCompiler->LookupIdentifier(decl->sxVar.pnodeInit->name(), mFunction);",
          "",
          "[Added Lines]",
          "348:                     if (decl->AsParseNodeVar()->pnodeInit->nop == knopName)",
          "350:                         AsmJsSymbol * initSym = mCompiler->LookupIdentifier(decl->AsParseNodeVar()->pnodeInit->name(), mFunction);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "411:     void AsmJSByteCodeGenerator::EmitTopLevelStatement( ParseNode *stmt )",
          "412:     {",
          "414:         {",
          "415:             throw AsmJsCompilationException( _u(\"Cannot declare functions inside asm.js functions\") );",
          "416:         }",
          "",
          "[Removed Lines]",
          "413:         if( stmt->nop == knopFncDecl && stmt->sxFnc.IsDeclaration() )",
          "",
          "[Added Lines]",
          "413:         if( stmt->nop == knopFncDecl && stmt->AsParseNodeFnc()->IsDeclaration() )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "445:         }",
          "446:         case knopBlock:",
          "447:         {",
          "449:             if (pnode->emitLabels)",
          "450:             {",
          "452:             }",
          "453:             return info;",
          "454:         }",
          "",
          "[Removed Lines]",
          "448:             EmitExpressionInfo info = Emit(pnode->sxBlock.pnodeStmt);",
          "451:                 mWriter.MarkAsmJsLabel(pnode->sxStmt.breakLabel);",
          "",
          "[Added Lines]",
          "448:             EmitExpressionInfo info = Emit(pnode->AsParseNodeBlock()->pnodeStmt);",
          "451:                 mWriter.MarkAsmJsLabel(pnode->AsParseNodeStmt()->breakLabel);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "516:             }",
          "517:             else if (ParserWrapper::IsUnsigned(pnode))",
          "518:             {",
          "520:             }",
          "522:             {",
          "523:                 throw AsmJsCompilationException(_u(\"Int literal must be in the range [-2^31, 2^32)\"));",
          "524:             }",
          "525:             else",
          "526:             {",
          "528:             }",
          "529:         case knopInt:",
          "531:             {",
          "533:             }",
          "534:             else",
          "535:             {",
          "537:             }",
          "538:         case knopIf:",
          "539:             return EmitIf( pnode );",
          "",
          "[Removed Lines]",
          "519:                 return EmitExpressionInfo(mFunction->GetConstRegister<int>((uint32)pnode->sxFlt.dbl), AsmJsType::Unsigned);",
          "521:             else if (pnode->sxFlt.maybeInt)",
          "527:                 return EmitExpressionInfo(mFunction->GetConstRegister<double>(pnode->sxFlt.dbl), AsmJsType::DoubleLit);",
          "530:             if (pnode->sxInt.lw < 0)",
          "532:                 return EmitExpressionInfo(mFunction->GetConstRegister<int>(pnode->sxInt.lw), AsmJsType::Signed);",
          "536:                 return EmitExpressionInfo(mFunction->GetConstRegister<int>(pnode->sxInt.lw), AsmJsType::Fixnum);",
          "",
          "[Added Lines]",
          "519:                 return EmitExpressionInfo(mFunction->GetConstRegister<int>((uint32)pnode->AsParseNodeFloat()->dbl), AsmJsType::Unsigned);",
          "521:             else if (pnode->AsParseNodeFloat()->maybeInt)",
          "527:                 return EmitExpressionInfo(mFunction->GetConstRegister<double>(pnode->AsParseNodeFloat()->dbl), AsmJsType::DoubleLit);",
          "530:             if (pnode->AsParseNodeInt()->lw < 0)",
          "532:                 return EmitExpressionInfo(mFunction->GetConstRegister<int>(pnode->AsParseNodeInt()->lw), AsmJsType::Signed);",
          "536:                 return EmitExpressionInfo(mFunction->GetConstRegister<int>(pnode->AsParseNodeInt()->lw), AsmJsType::Fixnum);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "542:         case knopSwitch:",
          "543:             return EmitSwitch( pnode );",
          "544:         case knopFor:",
          "546:             {",
          "548:                 mFunction->ReleaseLocationGeneric( &initInfo );",
          "549:                 return EmitLoop( pnode,",
          "553:             }",
          "554:             break;",
          "555:         case knopWhile:",
          "556:             return EmitLoop( pnode,",
          "559:                       nullptr);",
          "560:         case knopDoWhile:",
          "561:             return EmitLoop( pnode,",
          "564:                       NULL,",
          "565:                       true );",
          "566:         case knopBreak:",
          "568:             StartStatement(pnode);",
          "570:             if( pnode->emitLabels )",
          "571:             {",
          "573:             }",
          "574:             EndStatement(pnode);",
          "575:             break;",
          "576:         case knopContinue:",
          "578:             StartStatement(pnode);",
          "580:             EndStatement(pnode);",
          "581:             break;",
          "582:         case knopVarDecl:",
          "",
          "[Removed Lines]",
          "545:             MaybeTodo( pnode->sxFor.pnodeInverted != NULL );",
          "547:                 const EmitExpressionInfo& initInfo = Emit( pnode->sxFor.pnodeInit );",
          "550:                           pnode->sxFor.pnodeCond,",
          "551:                           pnode->sxFor.pnodeBody,",
          "552:                           pnode->sxFor.pnodeIncr);",
          "557:                       pnode->sxWhile.pnodeCond,",
          "558:                       pnode->sxWhile.pnodeBody,",
          "562:                       pnode->sxWhile.pnodeCond,",
          "563:                       pnode->sxWhile.pnodeBody,",
          "567:             Assert( pnode->sxJump.pnodeTarget->emitLabels );",
          "569:             mWriter.AsmBr( pnode->sxJump.pnodeTarget->sxStmt.breakLabel );",
          "572:                 mWriter.MarkAsmJsLabel( pnode->sxStmt.breakLabel );",
          "577:             Assert( pnode->sxJump.pnodeTarget->emitLabels );",
          "579:             mWriter.AsmBr( pnode->sxJump.pnodeTarget->sxStmt.continueLabel );",
          "",
          "[Added Lines]",
          "545:             MaybeTodo( pnode->AsParseNodeFor()->pnodeInverted != NULL );",
          "547:                 const EmitExpressionInfo& initInfo = Emit( pnode->AsParseNodeFor()->pnodeInit );",
          "550:                           pnode->AsParseNodeFor()->pnodeCond,",
          "551:                           pnode->AsParseNodeFor()->pnodeBody,",
          "552:                           pnode->AsParseNodeFor()->pnodeIncr);",
          "557:                       pnode->AsParseNodeWhile()->pnodeCond,",
          "558:                       pnode->AsParseNodeWhile()->pnodeBody,",
          "562:                       pnode->AsParseNodeWhile()->pnodeCond,",
          "563:                       pnode->AsParseNodeWhile()->pnodeBody,",
          "567:             Assert( pnode->AsParseNodeJump()->pnodeTarget->emitLabels );",
          "569:             mWriter.AsmBr( pnode->AsParseNodeJump()->pnodeTarget->AsParseNodeStmt()->breakLabel );",
          "572:                 mWriter.MarkAsmJsLabel( pnode->AsParseNodeStmt()->breakLabel );",
          "577:             Assert( pnode->AsParseNodeJump()->pnodeTarget->emitLabels );",
          "579:             mWriter.AsmBr( pnode->AsParseNodeJump()->pnodeTarget->AsParseNodeStmt()->continueLabel );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "672:     {",
          "673:         ParseNode* lhs = ParserWrapper::GetBinaryLeft( pnode );",
          "674:         ParseNode* rhs = ParserWrapper::GetBinaryRight( pnode );",
          "676:         const bool isOr0Operation = op == OpCodeAsmJs::Or_Int && isRhs0;",
          "677:         if( isOr0Operation && lhs->nop == knopCall )",
          "678:         {",
          "",
          "[Removed Lines]",
          "675:         const bool isRhs0 = rhs->nop == knopInt && rhs->sxInt.lw == 0;",
          "",
          "[Added Lines]",
          "675:         const bool isRhs0 = rhs->nop == knopInt && rhs->AsParseNodeInt()->lw == 0;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "719:     EmitExpressionInfo AsmJSByteCodeGenerator::EmitReturn( ParseNode * pnode )",
          "720:     {",
          "723:         AsmJsRetType retType;",
          "724:         EmitExpressionInfo emitInfo( Constants::NoRegister, AsmJsType::Void );",
          "",
          "[Removed Lines]",
          "721:         ParseNode* expr = pnode->sxReturn.pnodeExpr;",
          "",
          "[Added Lines]",
          "721:         ParseNode* expr = pnode->AsParseNodeReturn()->pnodeExpr;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "829:         {",
          "830:             throw AsmJsCompilationException(_u(\"Function table call must be of format identifier[expr & NumericLiteral](...)\"));",
          "831:         }",
          "833:         {",
          "834:             throw AsmJsCompilationException(_u(\"Function table size must be positive\"));",
          "835:         }",
          "837:         if (!::Math::IsPow2(tableSize))",
          "838:         {",
          "839:             throw AsmJsCompilationException(_u(\"Function table size must be a power of 2\"));",
          "",
          "[Removed Lines]",
          "832:         if (tableSizeNode->sxInt.lw < 0)",
          "836:         const uint tableSize = tableSizeNode->sxInt.lw + 1;",
          "",
          "[Added Lines]",
          "832:         if (tableSizeNode->AsParseNodeInt()->lw < 0)",
          "836:         const uint tableSize = tableSizeNode->AsParseNodeInt()->lw + 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "876:     {",
          "877:         Assert( pnode->nop == knopCall );",
          "880:         RegSlot funcTableIndexRegister = Constants::NoRegister;",
          "884:         {",
          "888:             funcTableIndexRegister = EmitIndirectCallIndex(identifierNode, indexNode);",
          "889:         }",
          "",
          "[Removed Lines]",
          "879:         ParseNode* identifierNode = pnode->sxCall.pnodeTarget;",
          "883:         if( pnode->sxCall.pnodeTarget->nop == knopIndex )",
          "885:             identifierNode = ParserWrapper::GetBinaryLeft( pnode->sxCall.pnodeTarget );",
          "886:             ParseNode* indexNode = ParserWrapper::GetBinaryRight( pnode->sxCall.pnodeTarget );",
          "",
          "[Added Lines]",
          "879:         ParseNode* identifierNode = pnode->AsParseNodeCall()->pnodeTarget;",
          "883:         if( pnode->AsParseNodeCall()->pnodeTarget->nop == knopIndex )",
          "885:             identifierNode = ParserWrapper::GetBinaryLeft( pnode->AsParseNodeCall()->pnodeTarget );",
          "886:             ParseNode* indexNode = ParserWrapper::GetBinaryRight( pnode->AsParseNodeCall()->pnodeTarget );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "912:             throw AsmJsCompilationException(_u(\"Different return type found for function %s\"), funcName->Psz());",
          "913:         }",
          "917:         EmitExpressionInfo * argArray = nullptr;",
          "918:         AsmJsType* types = nullptr;",
          "",
          "[Removed Lines]",
          "915:         const ArgSlot argCount = pnode->sxCall.argCount;",
          "",
          "[Added Lines]",
          "915:         const ArgSlot argCount = pnode->AsParseNodeCall()->argCount;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "921:         if (argCount > 0)",
          "922:         {",
          "924:             argArray = AnewArray(&mAllocator, EmitExpressionInfo, argCount);",
          "925:             types = AnewArray(&mAllocator, AsmJsType, argCount);",
          "926:             for (ArgSlot i = 0; i < argCount; i++)",
          "",
          "[Removed Lines]",
          "923:             ParseNode* argNode = pnode->sxCall.pnodeArgs;",
          "",
          "[Added Lines]",
          "923:             ParseNode* argNode = pnode->AsParseNodeCall()->pnodeArgs;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1005:         if( argCount > 0 )",
          "1006:         {",
          "1008:             uint16 regSlotLocation = 1;",
          "1010:             for(ArgSlot i = 0; i < argCount; i++)",
          "",
          "[Removed Lines]",
          "1007:             ParseNode* argNode = pnode->sxCall.pnodeArgs;",
          "",
          "[Added Lines]",
          "1007:             ParseNode* argNode = pnode->AsParseNodeCall()->pnodeArgs;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1145:             return EmitMinMax(pnode, mathFunction);",
          "1146:         }",
          "1150:         const bool isFRound = AsmJsMathFunction::IsFround(mathFunction);",
          "",
          "[Removed Lines]",
          "1148:         const ArgSlot argCount = pnode->sxCall.argCount;",
          "1149:         ParseNode* argNode = pnode->sxCall.pnodeArgs;",
          "",
          "[Added Lines]",
          "1148:         const ArgSlot argCount = pnode->AsParseNodeCall()->argCount;",
          "1149:         ParseNode* argNode = pnode->AsParseNodeCall()->pnodeArgs;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1158:             float constValue = -0.0f;",
          "1159:             if (argNode->nop == knopFlt)",
          "1160:             {",
          "1162:             }",
          "1163:             else if (argNode->nop == knopInt)",
          "1164:             {",
          "1166:             }",
          "1167:             else",
          "1168:             {",
          "",
          "[Removed Lines]",
          "1161:                 constValue = (float)argNode->sxFlt.dbl;",
          "1165:                 constValue = (float)argNode->sxInt.lw;",
          "",
          "[Added Lines]",
          "1161:                 constValue = (float)argNode->AsParseNodeFloat()->dbl;",
          "1165:                 constValue = (float)argNode->AsParseNodeInt()->lw;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1287:     EmitExpressionInfo AsmJSByteCodeGenerator::EmitMinMax(ParseNode* pnode, AsmJsMathFunction* mathFunction)",
          "1288:     {",
          "1289:         Assert(mathFunction->GetArgCount() == 2);",
          "1293:         if (argCount < 2)",
          "1294:         {",
          "",
          "[Removed Lines]",
          "1290:         uint16 argCount = pnode->sxCall.argCount;",
          "1291:         ParseNode* argNode = pnode->sxCall.pnodeArgs;",
          "",
          "[Added Lines]",
          "1290:         uint16 argCount = pnode->AsParseNodeCall()->argCount;",
          "1291:         ParseNode* argNode = pnode->AsParseNodeCall()->pnodeArgs;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1503:             {",
          "1504:                 if (indexNode->nop == knopInt)",
          "1505:                 {",
          "1507:                 }",
          "1508:                 else if (ParserWrapper::IsMinInt(indexNode))",
          "1509:                 {",
          "",
          "[Removed Lines]",
          "1506:                     slot = (uint32)indexNode->sxInt.lw;",
          "",
          "[Added Lines]",
          "1506:                     slot = (uint32)indexNode->AsParseNodeInt()->lw;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1512:                 }",
          "1513:                 else if (ParserWrapper::IsUnsigned(indexNode))",
          "1514:                 {",
          "1516:                 }",
          "1517:                 else",
          "1518:                 {",
          "",
          "[Removed Lines]",
          "1515:                     slot = (uint32)indexNode->sxFlt.dbl;",
          "",
          "[Added Lines]",
          "1515:                     slot = (uint32)indexNode->AsParseNodeFloat()->dbl;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1581:                 default:",
          "1582:                     Assume(UNREACHED);",
          "1583:                 }",
          "1585:                 {",
          "1586:                     throw AsmJsCompilationException(_u(\"shift amount must be %d\"), val);",
          "1587:                 }",
          "",
          "[Removed Lines]",
          "1584:                 if (rhsNode->sxInt.lw != val)",
          "",
          "[Added Lines]",
          "1584:                 if (rhsNode->AsParseNodeInt()->lw != val)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2093:         switch( expr->nop )",
          "2094:         {",
          "2095:         case knopLogNot:{",
          "2097:             return info;",
          "2098:             break;",
          "2099:         }",
          "",
          "[Removed Lines]",
          "2096:             const EmitExpressionInfo& info = EmitBooleanExpression( expr->sxUni.pnode1, falseLabel, trueLabel );",
          "",
          "[Added Lines]",
          "2096:             const EmitExpressionInfo& info = EmitBooleanExpression( expr->AsParseNodeUni()->pnode1, falseLabel, trueLabel );",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2137:     {",
          "2138:         Js::ByteCodeLabel trueLabel = mWriter.DefineLabel();",
          "2139:         Js::ByteCodeLabel falseLabel = mWriter.DefineLabel();",
          "2141:         mFunction->ReleaseLocation<int>( &boolInfo );",
          "2144:         mWriter.MarkAsmJsLabel( trueLabel );",
          "2147:         mFunction->ReleaseLocationGeneric( &trueInfo );",
          "2150:         {",
          "2152:             Js::ByteCodeLabel skipLabel = mWriter.DefineLabel();",
          "",
          "[Removed Lines]",
          "2140:         const EmitExpressionInfo& boolInfo = EmitBooleanExpression( pnode->sxIf.pnodeCond, trueLabel, falseLabel );",
          "2146:         const EmitExpressionInfo& trueInfo = Emit( pnode->sxIf.pnodeTrue );",
          "2149:         if( pnode->sxIf.pnodeFalse != nullptr )",
          "",
          "[Added Lines]",
          "2140:         const EmitExpressionInfo& boolInfo = EmitBooleanExpression( pnode->AsParseNodeIf()->pnodeCond, trueLabel, falseLabel );",
          "2146:         const EmitExpressionInfo& trueInfo = Emit( pnode->AsParseNodeIf()->pnodeTrue );",
          "2149:         if( pnode->AsParseNodeIf()->pnodeFalse != nullptr )",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2160:             mWriter.MarkAsmJsLabel( falseLabel );",
          "2163:             mFunction->ReleaseLocationGeneric( &falseInfo );",
          "2165:             mWriter.MarkAsmJsLabel( skipLabel );",
          "",
          "[Removed Lines]",
          "2162:             const EmitExpressionInfo& falseInfo = Emit( pnode->sxIf.pnodeFalse );",
          "",
          "[Added Lines]",
          "2162:             const EmitExpressionInfo& falseInfo = Emit( pnode->AsParseNodeIf()->pnodeFalse );",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2171:         }",
          "2172:         if( pnode->emitLabels )",
          "2173:         {",
          "2175:         }",
          "2176:         return EmitExpressionInfo( AsmJsType::Void );",
          "2177:     }",
          "",
          "[Removed Lines]",
          "2174:             mWriter.MarkAsmJsLabel( pnode->sxStmt.breakLabel );",
          "",
          "[Added Lines]",
          "2174:             mWriter.MarkAsmJsLabel( pnode->AsParseNodeStmt()->breakLabel );",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2184:         Js::ByteCodeLabel continuePastLoop = mWriter.DefineLabel();",
          "2186:         uint loopId = mWriter.EnterLoop( loopEntrance );",
          "2188:         EndStatement(loopNode);",
          "2189:         if( doWhile )",
          "2190:         {",
          "",
          "[Removed Lines]",
          "2187:         loopNode->sxLoop.loopId = loopId;",
          "",
          "[Added Lines]",
          "2187:         loopNode->AsParseNodeLoop()->loopId = loopId;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2194:             if( loopNode->emitLabels )",
          "2195:             {",
          "2197:             }",
          "2198:             if( !ByteCodeGenerator::IsFalse( cond ) )",
          "2199:             {",
          "",
          "[Removed Lines]",
          "2196:                 mWriter.MarkAsmJsLabel( loopNode->sxStmt.continueLabel );",
          "",
          "[Added Lines]",
          "2196:                 mWriter.MarkAsmJsLabel( loopNode->AsParseNodeStmt()->continueLabel );",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2216:             if( loopNode->emitLabels )",
          "2217:             {",
          "2219:             }",
          "2220:             if( incr != NULL )",
          "2221:             {",
          "",
          "[Removed Lines]",
          "2218:                 mWriter.MarkAsmJsLabel( loopNode->sxStmt.continueLabel );",
          "",
          "[Added Lines]",
          "2218:                 mWriter.MarkAsmJsLabel( loopNode->AsParseNodeStmt()->continueLabel );",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2227:         mWriter.MarkAsmJsLabel( continuePastLoop );",
          "2228:         if( loopNode->emitLabels )",
          "2229:         {",
          "2231:         }",
          "2233:         mWriter.ExitLoop( loopId );",
          "",
          "[Removed Lines]",
          "2230:             mWriter.MarkAsmJsLabel( loopNode->sxStmt.breakLabel );",
          "",
          "[Added Lines]",
          "2230:             mWriter.MarkAsmJsLabel( loopNode->AsParseNodeStmt()->breakLabel );",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2240:     EmitExpressionInfo AsmJSByteCodeGenerator::EmitQMark( ParseNode * pnode )",
          "2241:     {",
          "2243:         Js::ByteCodeLabel trueLabel = mWriter.DefineLabel();",
          "2244:         Js::ByteCodeLabel falseLabel = mWriter.DefineLabel();",
          "2245:         Js::ByteCodeLabel skipLabel = mWriter.DefineLabel();",
          "2248:         mFunction->ReleaseLocationGeneric( &boolInfo );",
          "2250:         RegSlot intReg = mFunction->AcquireTmpRegister<int>();",
          "",
          "[Removed Lines]",
          "2242:         StartStatement(pnode->sxTri.pnode1);",
          "2246:         EndStatement(pnode->sxTri.pnode1);",
          "2247:         const EmitExpressionInfo& boolInfo = EmitBooleanExpression( pnode->sxTri.pnode1, trueLabel, falseLabel );",
          "",
          "[Added Lines]",
          "2242:         StartStatement(pnode->AsParseNodeTri()->pnode1);",
          "2246:         EndStatement(pnode->AsParseNodeTri()->pnode1);",
          "2247:         const EmitExpressionInfo& boolInfo = EmitBooleanExpression( pnode->AsParseNodeTri()->pnode1, trueLabel, falseLabel );",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2256:         mWriter.MarkAsmJsLabel( trueLabel );",
          "2259:         if( trueInfo.type.isInt() )",
          "2260:         {",
          "2261:             mWriter.AsmReg2( Js::OpCodeAsmJs::Ld_Int, intReg, trueInfo.location );",
          "",
          "[Removed Lines]",
          "2257:         const EmitExpressionInfo& trueInfo = Emit( pnode->sxTri.pnode2 );",
          "2258:         StartStatement(pnode->sxTri.pnode2);",
          "",
          "[Added Lines]",
          "2257:         const EmitExpressionInfo& trueInfo = Emit( pnode->AsParseNodeTri()->pnode2 );",
          "2258:         StartStatement(pnode->AsParseNodeTri()->pnode2);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2288:             throw AsmJsCompilationException(_u(\"Conditional expressions must be of type int, double, or float\"));",
          "2289:         }",
          "2290:         mWriter.AsmBr( skipLabel );",
          "2292:         mWriter.MarkAsmJsLabel( falseLabel );",
          "2295:         if( falseInfo.type.isInt() )",
          "2296:         {",
          "2297:             if( !trueInfo.type.isInt() )",
          "",
          "[Removed Lines]",
          "2291:         EndStatement(pnode->sxTri.pnode2);",
          "2293:         const EmitExpressionInfo& falseInfo = Emit( pnode->sxTri.pnode3 );",
          "2294:         StartStatement(pnode->sxTri.pnode3);",
          "",
          "[Added Lines]",
          "2291:         EndStatement(pnode->AsParseNodeTri()->pnode2);",
          "2293:         const EmitExpressionInfo& falseInfo = Emit( pnode->AsParseNodeTri()->pnode3 );",
          "2294:         StartStatement(pnode->AsParseNodeTri()->pnode3);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2324:             throw AsmJsCompilationException(_u(\"Conditional expressions must be of type int, double, or float\"));",
          "2325:         }",
          "2326:         mWriter.MarkAsmJsLabel( skipLabel );",
          "2328:         return emitInfo;",
          "2329:     }",
          "2331:     EmitExpressionInfo AsmJSByteCodeGenerator::EmitSwitch( ParseNode * pnode )",
          "2332:     {",
          "2333:         BOOL fHasDefault = false;",
          "2337:         if( !valInfo.type.isSigned() )",
          "2338:         {",
          "",
          "[Removed Lines]",
          "2327:         EndStatement(pnode->sxTri.pnode3);",
          "2334:         Assert( pnode->sxSwitch.pnodeVal != NULL );",
          "2335:         const EmitExpressionInfo& valInfo = Emit( pnode->sxSwitch.pnodeVal );",
          "",
          "[Added Lines]",
          "2327:         EndStatement(pnode->AsParseNodeTri()->pnode3);",
          "2334:         Assert( pnode->AsParseNodeSwitch()->pnodeVal != NULL );",
          "2335:         const EmitExpressionInfo& valInfo = Emit( pnode->AsParseNodeSwitch()->pnodeVal );",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2350:         ParseNode *pnodeCase;",
          "2352:         {",
          "2357:             {",
          "2358:                 fHasDefault = true;",
          "2359:                 continue;",
          "2360:             }",
          "2363:             {",
          "2364:                 throw AsmJsCompilationException( _u(\"Switch case value must be int in the range [-2^31, 2^31)\") );",
          "2365:             }",
          "2370:         }",
          "2373:         if( fHasDefault )",
          "2374:         {",
          "2376:         }",
          "2377:         else",
          "2378:         {",
          "2379:             if( !pnode->emitLabels )",
          "2380:             {",
          "2382:             }",
          "2384:         }",
          "2387:         {",
          "2390:             mFunction->ReleaseLocationGeneric( &caseBodyInfo );",
          "2391:         }",
          "",
          "[Removed Lines]",
          "2351:         for( pnodeCase = pnode->sxSwitch.pnodeCases; pnodeCase; pnodeCase = pnodeCase->sxCase.pnodeNext )",
          "2355:             pnodeCase->sxCase.labelCase = mWriter.DefineLabel();",
          "2356:             if( pnodeCase == pnode->sxSwitch.pnodeDefault )",
          "2361:             ParseNode* caseExpr = pnodeCase->sxCase.pnodeExpr;",
          "2362:             if ((caseExpr->nop != knopInt || (caseExpr->sxInt.lw >> 31) > 1) && !ParserWrapper::IsMinInt(caseExpr))",
          "2367:             const EmitExpressionInfo& caseExprInfo = Emit( pnodeCase->sxCase.pnodeExpr );",
          "2368:             mWriter.AsmBrReg2( OpCodeAsmJs::Case_Int, pnodeCase->sxCase.labelCase, regVal, caseExprInfo.location );",
          "2375:             mWriter.AsmBr( pnode->sxSwitch.pnodeDefault->sxCase.labelCase, OpCodeAsmJs::EndSwitch_Int );",
          "2381:                 pnode->sxStmt.breakLabel = mWriter.DefineLabel();",
          "2383:             mWriter.AsmBr( pnode->sxStmt.breakLabel, OpCodeAsmJs::EndSwitch_Int );",
          "2386:         for( pnodeCase = pnode->sxSwitch.pnodeCases; pnodeCase; pnodeCase = pnodeCase->sxCase.pnodeNext )",
          "2388:             mWriter.MarkAsmJsLabel( pnodeCase->sxCase.labelCase );",
          "2389:             const EmitExpressionInfo& caseBodyInfo = Emit( pnodeCase->sxCase.pnodeBody );",
          "",
          "[Added Lines]",
          "2351:         for( pnodeCase = pnode->AsParseNodeSwitch()->pnodeCases; pnodeCase; pnodeCase = pnodeCase->AsParseNodeCase()->pnodeNext )",
          "2355:             pnodeCase->AsParseNodeCase()->labelCase = mWriter.DefineLabel();",
          "2356:             if( pnodeCase == pnode->AsParseNodeSwitch()->pnodeDefault )",
          "2361:             ParseNode* caseExpr = pnodeCase->AsParseNodeCase()->pnodeExpr;",
          "2362:             if ((caseExpr->nop != knopInt || (caseExpr->AsParseNodeInt()->lw >> 31) > 1) && !ParserWrapper::IsMinInt(caseExpr))",
          "2367:             const EmitExpressionInfo& caseExprInfo = Emit( pnodeCase->AsParseNodeCase()->pnodeExpr );",
          "2368:             mWriter.AsmBrReg2( OpCodeAsmJs::Case_Int, pnodeCase->AsParseNodeCase()->labelCase, regVal, caseExprInfo.location );",
          "2375:             mWriter.AsmBr( pnode->AsParseNodeSwitch()->pnodeDefault->AsParseNodeCase()->labelCase, OpCodeAsmJs::EndSwitch_Int );",
          "2381:                 pnode->AsParseNodeStmt()->breakLabel = mWriter.DefineLabel();",
          "2383:             mWriter.AsmBr( pnode->AsParseNodeStmt()->breakLabel, OpCodeAsmJs::EndSwitch_Int );",
          "2386:         for( pnodeCase = pnode->AsParseNodeSwitch()->pnodeCases; pnodeCase; pnodeCase = pnodeCase->AsParseNodeCase()->pnodeNext )",
          "2388:             mWriter.MarkAsmJsLabel( pnodeCase->AsParseNodeCase()->labelCase );",
          "2389:             const EmitExpressionInfo& caseBodyInfo = Emit( pnodeCase->AsParseNodeCase()->pnodeBody );",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2395:         if( !fHasDefault || pnode->emitLabels )",
          "2396:         {",
          "2398:         }",
          "2400:         return EmitExpressionInfo( AsmJsType::Void );",
          "",
          "[Removed Lines]",
          "2397:             mWriter.MarkAsmJsLabel( pnode->sxStmt.breakLabel );",
          "",
          "[Added Lines]",
          "2397:             mWriter.MarkAsmJsLabel( pnode->AsParseNodeStmt()->breakLabel );",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsModule.cpp||lib/Runtime/Language/AsmJsModule.cpp": [
          "File: lib/Runtime/Language/AsmJsModule.cpp -> lib/Runtime/Language/AsmJsModule.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:         funcBody->SetEntryPoint(funcBody->GetDefaultEntryPointInfo(), GetScriptContext()->DeferredParsingThunk);",
          "57:         funcBody->SetIsAsmjsMode(false);",
          "58:         funcBody->SetIsAsmJsFunction(false);",
          "60:     }",
          "62:     void AsmJsModuleCompiler::RevertAllFunctions()",
          "",
          "[Removed Lines]",
          "59:         func->GetFncNode()->sxFnc.funcInfo->byteCodeFunction = func->GetFuncBody();",
          "",
          "[Added Lines]",
          "59:         func->GetFncNode()->AsParseNodeFnc()->funcInfo->byteCodeFunction = func->GetFuncBody();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:     bool AsmJsModuleCompiler::CommitModule()",
          "119:     {",
          "121:         FunctionBody* functionBody = funcInfo->GetParsedFunctionBody();",
          "122:         AsmJsModuleInfo* asmInfo = functionBody->AllocateAsmJsModuleInfo();",
          "124:         if (funcInfo->byteCodeFunction->GetIsNamedFunctionExpression())",
          "125:         {",
          "128:             {",
          "130:                 GetByteCodeGenerator()->AssignPropertyId(nameNode->name());",
          "134:             }",
          "135:         }",
          "",
          "[Removed Lines]",
          "120:         FuncInfo* funcInfo = GetModuleFunctionNode()->sxFnc.funcInfo;",
          "126:             Assert(GetModuleFunctionNode()->sxFnc.pnodeName);",
          "127:             if (GetModuleFunctionNode()->sxFnc.pnodeName->sxVar.sym->IsInSlot(funcInfo))",
          "129:                 ParseNodePtr nameNode = GetModuleFunctionNode()->sxFnc.pnodeName;",
          "132:                 AsmJsClosureFunction* closure = Anew(&mAllocator, AsmJsClosureFunction, nameNode->sxVar.pid, AsmJsSymbol::ClosureFunction, &mAllocator);",
          "133:                 DefineIdentifier(nameNode->sxVar.pid, closure);",
          "",
          "[Added Lines]",
          "120:         FuncInfo* funcInfo = GetModuleFunctionNode()->AsParseNodeFnc()->funcInfo;",
          "126:             Assert(GetModuleFunctionNode()->AsParseNodeFnc()->pnodeName);",
          "127:             if (GetModuleFunctionNode()->AsParseNodeFnc()->pnodeName->AsParseNodeVar()->sym->IsInSlot(funcInfo))",
          "129:                 ParseNodePtr nameNode = GetModuleFunctionNode()->AsParseNodeFnc()->pnodeName;",
          "132:                 AsmJsClosureFunction* closure = Anew(&mAllocator, AsmJsClosureFunction, nameNode->AsParseNodeVar()->pid, AsmJsSymbol::ClosureFunction, &mAllocator);",
          "133:                 DefineIdentifier(nameNode->AsParseNodeVar()->pid, closure);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333:         case knopBreak:",
          "334:         case knopContinue:",
          "336:             break;",
          "338:         case knopInt:",
          "340:             break;",
          "341:         case knopFlt:",
          "342:         {",
          "344:             if (ParserWrapper::IsMinInt(pnode))",
          "345:             {",
          "346:                 func->AddConst<int>((int)d);",
          "",
          "[Removed Lines]",
          "335:             GetByteCodeGenerator()->AddTargetStmt(pnode->sxJump.pnodeTarget);",
          "339:             func->AddConst<int>(pnode->sxInt.lw);",
          "343:             const double d = pnode->sxFlt.dbl;",
          "",
          "[Added Lines]",
          "335:             GetByteCodeGenerator()->AddTargetStmt(pnode->AsParseNodeJump()->pnodeTarget);",
          "339:             func->AddConst<int>(pnode->AsParseNodeInt()->lw);",
          "343:             const double d = pnode->AsParseNodeFloat()->dbl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "390:         }",
          "391:         case knopCall:",
          "392:         {",
          "394:             bool evalArgs = true;",
          "396:             {",
          "399:                 {",
          "401:                     {",
          "402:                     case knopFlt:",
          "404:                         evalArgs = false;",
          "405:                         break;",
          "407:                     case knopInt:",
          "409:                         evalArgs = false;",
          "410:                         break;",
          "412:                     case knopNeg:",
          "414:                         {",
          "415:                             func->AddConst<float>(-0.0f);",
          "416:                             evalArgs = false;",
          "",
          "[Removed Lines]",
          "393:             ASTPrepass(pnode->sxCall.pnodeTarget, func);",
          "395:             if (pnode->sxCall.pnodeTarget->nop == knopName)",
          "397:                 AsmJsFunctionDeclaration* funcDecl = this->LookupFunction(pnode->sxCall.pnodeTarget->name());",
          "398:                 if (AsmJsMathFunction::IsFround(funcDecl) && pnode->sxCall.argCount > 0)",
          "400:                     switch (pnode->sxCall.pnodeArgs->nop)",
          "403:                         func->AddConst<float>((float)pnode->sxCall.pnodeArgs->sxFlt.dbl);",
          "408:                         func->AddConst<float>((float)pnode->sxCall.pnodeArgs->sxInt.lw);",
          "413:                         if (pnode->sxCall.pnodeArgs->sxUni.pnode1->nop == knopInt && pnode->sxCall.pnodeArgs->sxUni.pnode1->sxInt.lw == 0)",
          "",
          "[Added Lines]",
          "393:             ASTPrepass(pnode->AsParseNodeCall()->pnodeTarget, func);",
          "395:             if (pnode->AsParseNodeCall()->pnodeTarget->nop == knopName)",
          "397:                 AsmJsFunctionDeclaration* funcDecl = this->LookupFunction(pnode->AsParseNodeCall()->pnodeTarget->name());",
          "398:                 if (AsmJsMathFunction::IsFround(funcDecl) && pnode->AsParseNodeCall()->argCount > 0)",
          "400:                     switch (pnode->AsParseNodeCall()->pnodeArgs->nop)",
          "403:                         func->AddConst<float>((float)pnode->AsParseNodeCall()->pnodeArgs->AsParseNodeFloat()->dbl);",
          "408:                         func->AddConst<float>((float)pnode->AsParseNodeCall()->pnodeArgs->AsParseNodeInt()->lw);",
          "413:                         if (pnode->AsParseNodeCall()->pnodeArgs->AsParseNodeUni()->pnode1->nop == knopInt && pnode->AsParseNodeCall()->pnodeArgs->AsParseNodeUni()->pnode1->AsParseNodeInt()->lw == 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "421:             }",
          "422:             if (evalArgs)",
          "423:             {",
          "425:             }",
          "426:             break;",
          "427:         }",
          "428:         case knopVarDecl:",
          "429:             GetByteCodeGenerator()->AssignPropertyId(pnode->name());",
          "431:             break;",
          "433:         case knopQmark:",
          "437:             break;",
          "438:         case knopList:",
          "439:             do",
          "440:             {",
          "442:                 ASTPrepass(pnode1, func);",
          "444:             } while (pnode->nop == knopList);",
          "445:             ASTPrepass(pnode, func);",
          "446:             break;",
          "447:         case knopFor:",
          "452:             break;",
          "453:         case knopIf:",
          "457:             break;",
          "458:         case knopDoWhile:",
          "459:         case knopWhile:",
          "462:             break;",
          "463:         case knopReturn:",
          "465:             break;",
          "466:         case knopBlock:",
          "468:             break;",
          "469:         case knopSwitch:",
          "472:             {",
          "473:                 ASTPrepass(pnodeT, func);",
          "474:             }",
          "476:             break;",
          "477:         case knopCase:",
          "480:             break;",
          "481:         case knopComma:",
          "482:         {",
          "484:             if (pnode1->nop == knopComma)",
          "485:             {",
          "487:                 ArenaAllocator *alloc = GetByteCodeGenerator()->GetAllocator();",
          "488:                 SList<ParseNode*> *rhsStack = Anew(alloc, SList<ParseNode*>, alloc);",
          "489:                 do {",
          "492:                 } while (pnode1->nop == knopComma);",
          "493:                 ASTPrepass(pnode1, func);",
          "494:                 while (!rhsStack->Empty())",
          "",
          "[Removed Lines]",
          "424:                 ASTPrepass(pnode->sxCall.pnodeArgs, func);",
          "430:             ASTPrepass(pnode->sxVar.pnodeInit, func);",
          "434:             ASTPrepass(pnode->sxTri.pnode1, func);",
          "435:             ASTPrepass(pnode->sxTri.pnode2, func);",
          "436:             ASTPrepass(pnode->sxTri.pnode3, func);",
          "441:                 ParseNode * pnode1 = pnode->sxBin.pnode1;",
          "443:                 pnode = pnode->sxBin.pnode2;",
          "448:             ASTPrepass(pnode->sxFor.pnodeInit, func);",
          "449:             ASTPrepass(pnode->sxFor.pnodeCond, func);",
          "450:             ASTPrepass(pnode->sxFor.pnodeIncr, func);",
          "451:             ASTPrepass(pnode->sxFor.pnodeBody, func);",
          "454:             ASTPrepass(pnode->sxIf.pnodeCond, func);",
          "455:             ASTPrepass(pnode->sxIf.pnodeTrue, func);",
          "456:             ASTPrepass(pnode->sxIf.pnodeFalse, func);",
          "460:             ASTPrepass(pnode->sxWhile.pnodeCond, func);",
          "461:             ASTPrepass(pnode->sxWhile.pnodeBody, func);",
          "464:             ASTPrepass(pnode->sxReturn.pnodeExpr, func);",
          "467:             ASTPrepass(pnode->sxBlock.pnodeStmt, func);",
          "470:             ASTPrepass(pnode->sxSwitch.pnodeVal, func);",
          "471:             for (ParseNode *pnodeT = pnode->sxSwitch.pnodeCases; NULL != pnodeT; pnodeT = pnodeT->sxCase.pnodeNext)",
          "475:             ASTPrepass(pnode->sxSwitch.pnodeBlock, func);",
          "478:             ASTPrepass(pnode->sxCase.pnodeExpr, func);",
          "479:             ASTPrepass(pnode->sxCase.pnodeBody, func);",
          "483:             ParseNode *pnode1 = pnode->sxBin.pnode1;",
          "490:                     rhsStack->Push(pnode1->sxBin.pnode2);",
          "491:                     pnode1 = pnode1->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "424:                 ASTPrepass(pnode->AsParseNodeCall()->pnodeArgs, func);",
          "430:             ASTPrepass(pnode->AsParseNodeVar()->pnodeInit, func);",
          "434:             ASTPrepass(pnode->AsParseNodeTri()->pnode1, func);",
          "435:             ASTPrepass(pnode->AsParseNodeTri()->pnode2, func);",
          "436:             ASTPrepass(pnode->AsParseNodeTri()->pnode3, func);",
          "441:                 ParseNode * pnode1 = pnode->AsParseNodeBin()->pnode1;",
          "443:                 pnode = pnode->AsParseNodeBin()->pnode2;",
          "448:             ASTPrepass(pnode->AsParseNodeFor()->pnodeInit, func);",
          "449:             ASTPrepass(pnode->AsParseNodeFor()->pnodeCond, func);",
          "450:             ASTPrepass(pnode->AsParseNodeFor()->pnodeIncr, func);",
          "451:             ASTPrepass(pnode->AsParseNodeFor()->pnodeBody, func);",
          "454:             ASTPrepass(pnode->AsParseNodeIf()->pnodeCond, func);",
          "455:             ASTPrepass(pnode->AsParseNodeIf()->pnodeTrue, func);",
          "456:             ASTPrepass(pnode->AsParseNodeIf()->pnodeFalse, func);",
          "460:             ASTPrepass(pnode->AsParseNodeWhile()->pnodeCond, func);",
          "461:             ASTPrepass(pnode->AsParseNodeWhile()->pnodeBody, func);",
          "464:             ASTPrepass(pnode->AsParseNodeReturn()->pnodeExpr, func);",
          "467:             ASTPrepass(pnode->AsParseNodeBlock()->pnodeStmt, func);",
          "470:             ASTPrepass(pnode->AsParseNodeSwitch()->pnodeVal, func);",
          "471:             for (ParseNode *pnodeT = pnode->AsParseNodeSwitch()->pnodeCases; NULL != pnodeT; pnodeT = pnodeT->AsParseNodeCase()->pnodeNext)",
          "475:             ASTPrepass(pnode->AsParseNodeSwitch()->pnodeBlock, func);",
          "478:             ASTPrepass(pnode->AsParseNodeCase()->pnodeExpr, func);",
          "479:             ASTPrepass(pnode->AsParseNodeCase()->pnodeBody, func);",
          "483:             ParseNode *pnode1 = pnode->AsParseNodeBin()->pnode1;",
          "490:                     rhsStack->Push(pnode1->AsParseNodeBin()->pnode2);",
          "491:                     pnode1 = pnode1->AsParseNodeBin()->pnode1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "502:             {",
          "503:                 ASTPrepass(pnode1, func);",
          "504:             }",
          "506:             break;",
          "507:         }",
          "508:         default:",
          "",
          "[Removed Lines]",
          "505:             ASTPrepass(pnode->sxBin.pnode2, func);",
          "",
          "[Added Lines]",
          "505:             ASTPrepass(pnode->AsParseNodeBin()->pnode2, func);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "510:             uint flags = ParseNode::Grfnop(pnode->nop);",
          "511:             if (flags&fnopUni)",
          "512:             {",
          "514:             }",
          "515:             else if (flags&fnopBin)",
          "516:             {",
          "519:             }",
          "520:             break;",
          "521:         }",
          "",
          "[Removed Lines]",
          "513:                 ASTPrepass(pnode->sxUni.pnode1, func);",
          "517:                 ASTPrepass(pnode->sxBin.pnode1, func);",
          "518:                 ASTPrepass(pnode->sxBin.pnode2, func);",
          "",
          "[Added Lines]",
          "513:                 ASTPrepass(pnode->AsParseNodeUni()->pnode1, func);",
          "517:                 ASTPrepass(pnode->AsParseNodeBin()->pnode1, func);",
          "518:                 ASTPrepass(pnode->AsParseNodeBin()->pnode2, func);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "525:     void AsmJsModuleCompiler::BindArguments(ParseNode* argList)",
          "526:     {",
          "528:         {",
          "529:             GetByteCodeGenerator()->AssignPropertyId(pnode->name());",
          "530:         }",
          "",
          "[Removed Lines]",
          "527:         for (ParseNode* pnode = argList; pnode; pnode = pnode->sxVar.pnodeNext)",
          "",
          "[Added Lines]",
          "527:         for (ParseNode* pnode = argList; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "535:         ParseNodePtr fncNode = func->GetFncNode();",
          "536:         ParseNodePtr pnodeBody = nullptr;",
          "541:         Utf8SourceInfo * utf8SourceInfo = deferParseFunction->GetUtf8SourceInfo();",
          "542:         ULONG grfscr = utf8SourceInfo->GetParseFlags();",
          "543:         grfscr = grfscr & (~fscrGlobalCode);",
          "",
          "[Removed Lines]",
          "538:         Assert(fncNode->nop == knopFncDecl && fncNode->sxFnc.funcInfo && fncNode->sxFnc.funcInfo->IsDeferred() && fncNode->sxFnc.pnodeBody == NULL);",
          "540:         Js::ParseableFunctionInfo* deferParseFunction = fncNode->sxFnc.funcInfo->byteCodeFunction;",
          "",
          "[Added Lines]",
          "538:         Assert(fncNode->nop == knopFncDecl && fncNode->AsParseNodeFnc()->funcInfo && fncNode->AsParseNodeFnc()->funcInfo->IsDeferred() && fncNode->AsParseNodeFnc()->pnodeBody == NULL);",
          "540:         Js::ParseableFunctionInfo* deferParseFunction = fncNode->AsParseNodeFnc()->funcInfo->byteCodeFunction;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "548:             !!(grfscr & fscrEvalCode),",
          "549:             ((grfscr & fscrDynamicCode) && !(grfscr & fscrEvalCode)));",
          "555:         {",
          "556:             if (!PHASE_OFF1(Js::SkipNestedDeferredPhase))",
          "557:             {",
          "",
          "[Removed Lines]",
          "551:         deferParseFunction->SetInParamsCount(fncNode->sxFnc.funcInfo->inArgsCount);",
          "552:         deferParseFunction->SetReportedInParamsCount(fncNode->sxFnc.funcInfo->inArgsCount);",
          "554:         if (fncNode->sxFnc.pnodeBody == NULL)",
          "",
          "[Added Lines]",
          "551:         deferParseFunction->SetInParamsCount(fncNode->AsParseNodeFnc()->funcInfo->inArgsCount);",
          "552:         deferParseFunction->SetReportedInParamsCount(fncNode->AsParseNodeFnc()->funcInfo->inArgsCount);",
          "554:         if (fncNode->AsParseNodeFnc()->pnodeBody == NULL)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "567:         CompileScriptException se;",
          "568:         funcBody = deferParseFunction->ParseAsmJs(&ps, &se, &parseTree);",
          "571:         TRACE_BYTECODE(_u(\"\\nDeferred parse %s\\n\"), funcBody->GetDisplayName());",
          "572:         if (parseTree && parseTree->nop == knopProg)",
          "573:         {",
          "575:             if (body && body->nop == knopList)",
          "576:             {",
          "578:                 if (fncDecl && fncDecl->nop == knopFncDecl)",
          "579:                 {",
          "581:                     func->SetFuncBody(funcBody);",
          "582:                 }",
          "583:             }",
          "584:         }",
          "587:         ASTPrepass(pnodeBody, func);",
          "588:         GetByteCodeGenerator()->PopFuncInfo(_u(\"End asm.js AST prepass\"));",
          "592:         if (!pnodeBody)",
          "593:         {",
          "",
          "[Removed Lines]",
          "569:         fncNode->sxFnc.funcInfo->byteCodeFunction = funcBody;",
          "574:             auto body = parseTree->sxProg.pnodeBody;",
          "577:                 auto fncDecl = body->sxBin.pnode1;",
          "580:                     pnodeBody = fncDecl->sxFnc.pnodeBody;",
          "585:         GetByteCodeGenerator()->PushFuncInfo(_u(\"Start asm.js AST prepass\"), fncNode->sxFnc.funcInfo);",
          "586:         BindArguments(fncNode->sxFnc.pnodeParams);",
          "590:         fncNode->sxFnc.pnodeBody = pnodeBody;",
          "",
          "[Added Lines]",
          "569:         fncNode->AsParseNodeFnc()->funcInfo->byteCodeFunction = funcBody;",
          "574:             auto body = parseTree->AsParseNodeProg()->pnodeBody;",
          "577:                 auto fncDecl = body->AsParseNodeBin()->pnode1;",
          "580:                     pnodeBody = fncDecl->AsParseNodeFnc()->pnodeBody;",
          "585:         GetByteCodeGenerator()->PushFuncInfo(_u(\"Start asm.js AST prepass\"), fncNode->AsParseNodeFnc()->funcInfo);",
          "586:         BindArguments(fncNode->AsParseNodeFnc()->pnodeParams);",
          "590:         fncNode->AsParseNodeFnc()->pnodeBody = pnodeBody;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "597:         }",
          "602:         if (!SetupFunctionArguments(func, pnodeBody))",
          "603:         {",
          "606:             return false;",
          "607:         }",
          "609:         if (!SetupLocalVariables(func))",
          "610:         {",
          "613:             return false;",
          "614:         }",
          "617:         AsmJSByteCodeGenerator gen(func, this);",
          "618:         bool wasEmit = gen.EmitOneFunction();",
          "620:         return wasEmit;",
          "621:     }",
          "",
          "[Removed Lines]",
          "600:         UpdateMaxAstSize(fncNode->sxFnc.astSize);",
          "605:             fncNode->sxFnc.pnodeBody = NULL;",
          "612:             fncNode->sxFnc.pnodeBody = NULL;",
          "619:         fncNode->sxFnc.pnodeBody = NULL;",
          "",
          "[Added Lines]",
          "600:         UpdateMaxAstSize(fncNode->AsParseNodeFnc()->astSize);",
          "605:             fncNode->AsParseNodeFnc()->pnodeBody = NULL;",
          "612:             fncNode->AsParseNodeFnc()->pnodeBody = NULL;",
          "619:         fncNode->AsParseNodeFnc()->pnodeBody = NULL;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "701:                 {",
          "702:                     return Fail(lhs, _u(\"Defining wrong argument\"));",
          "703:                 }",
          "705:                 {",
          "706:                     return Fail(lhs, _u(\"Or value must be 0 when defining arguments\"));",
          "707:                 }",
          "708:             }",
          "709:             else if (rhs->nop == knopCall)",
          "710:             {",
          "712:                 {",
          "713:                     return Fail(rhs, _u(\"call should be for fround\"));",
          "714:                 }",
          "717:                 if (!funcDecl)",
          "718:                     return Fail(rhs, _u(\"Cannot resolve function for argument definition, or wrong function\"));",
          "",
          "[Removed Lines]",
          "704:                 if (intSym->nop != knopInt || intSym->sxInt.lw != 0)",
          "711:                 if (rhs->sxCall.pnodeTarget->nop != knopName)",
          "715:                 AsmJsFunctionDeclaration* funcDecl = this->LookupFunction(rhs->sxCall.pnodeTarget->name());",
          "",
          "[Added Lines]",
          "704:                 if (intSym->nop != knopInt || intSym->AsParseNodeInt()->lw != 0)",
          "711:                 if (rhs->AsParseNodeCall()->pnodeTarget->nop != knopName)",
          "715:                 AsmJsFunctionDeclaration* funcDecl = this->LookupFunction(rhs->AsParseNodeCall()->pnodeTarget->name());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "731:                     return Fail(rhs, _u(\"Wrong function used for argument definition\"));",
          "732:                 }",
          "735:                 {",
          "736:                     return Fail(lhs, _u(\"Defining wrong argument\"));",
          "737:                 }",
          "",
          "[Removed Lines]",
          "734:                 if (!NodeDefineThisArgument(rhs->sxCall.pnodeArgs, var))",
          "",
          "[Added Lines]",
          "734:                 if (!NodeDefineThisArgument(rhs->AsParseNodeCall()->pnodeArgs, var))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "786:                 {",
          "787:                     return true;",
          "788:                 }",
          "790:                 AsmJsSymbol * declSym = nullptr;",
          "792:                 bool isFroundInit = false;",
          "",
          "[Removed Lines]",
          "789:                 ParseNode* pnodeInit = decl->sxVar.pnodeInit;",
          "",
          "[Added Lines]",
          "789:                 ParseNode* pnodeInit = decl->AsParseNodeVar()->pnodeInit;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "805:                 }",
          "806:                 else if (pnodeInit->nop == knopCall)",
          "807:                 {",
          "809:                     {",
          "810:                         return Fail(decl, _u(\"Var declaration with something else than a literal value|fround call\"));",
          "811:                     }",
          "814:                     if (!funcDecl)",
          "815:                         return Fail(pnodeInit, _u(\"Cannot resolve function name\"));",
          "817:                     if (AsmJsMathFunction::Is(funcDecl))",
          "818:                     {",
          "820:                         {",
          "821:                             return Fail(decl, _u(\"Var declaration with something else than a literal value|fround call\"));",
          "822:                         }",
          "",
          "[Removed Lines]",
          "808:                     if (pnodeInit->sxCall.pnodeTarget->nop != knopName)",
          "812:                     AsmJsFunctionDeclaration* funcDecl = this->LookupFunction(pnodeInit->sxCall.pnodeTarget->name());",
          "819:                         if (!AsmJsMathFunction::IsFround(funcDecl) || !ParserWrapper::IsFroundNumericLiteral(pnodeInit->sxCall.pnodeArgs))",
          "",
          "[Added Lines]",
          "808:                     if (pnodeInit->AsParseNodeCall()->pnodeTarget->nop != knopName)",
          "812:                     AsmJsFunctionDeclaration* funcDecl = this->LookupFunction(pnodeInit->AsParseNodeCall()->pnodeTarget->name());",
          "819:                         if (!AsmJsMathFunction::IsFround(funcDecl) || !ParserWrapper::IsFroundNumericLiteral(pnodeInit->AsParseNodeCall()->pnodeArgs))",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "853:                 {",
          "854:                     var->SetVarType(AsmJsVarType::Int);",
          "855:                     var->SetLocation(func->AcquireRegister<int>());",
          "858:                 }",
          "859:                 else if (ParserWrapper::IsMinInt(pnodeInit))",
          "860:                 {",
          "",
          "[Removed Lines]",
          "856:                     var->SetConstInitialiser(pnodeInit->sxInt.lw);",
          "857:                     loc = func->GetConstRegister<int>(pnodeInit->sxInt.lw);",
          "",
          "[Added Lines]",
          "856:                     var->SetConstInitialiser(pnodeInit->AsParseNodeInt()->lw);",
          "857:                     loc = func->GetConstRegister<int>(pnodeInit->AsParseNodeInt()->lw);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "867:                 {",
          "868:                     var->SetVarType(AsmJsVarType::Int);",
          "869:                     var->SetLocation(func->AcquireRegister<int>());",
          "872:                 }",
          "873:                 else if (pnodeInit->nop == knopFlt)",
          "874:                 {",
          "876:                     {",
          "877:                         return Fail(decl, _u(\"Var declaration with integer literal outside range [-2^31, 2^32)\"));",
          "878:                     }",
          "879:                     var->SetVarType(AsmJsVarType::Double);",
          "880:                     var->SetLocation(func->AcquireRegister<double>());",
          "883:                 }",
          "884:                 else if (pnodeInit->nop == knopName)",
          "885:                 {",
          "",
          "[Removed Lines]",
          "870:                     var->SetConstInitialiser((int)((uint32)pnodeInit->sxFlt.dbl));",
          "871:                     loc = func->GetConstRegister<int>((uint32)pnodeInit->sxFlt.dbl);",
          "875:                     if (pnodeInit->sxFlt.maybeInt)",
          "881:                     loc = func->GetConstRegister<double>(pnodeInit->sxFlt.dbl);",
          "882:                     var->SetConstInitialiser(pnodeInit->sxFlt.dbl);",
          "",
          "[Added Lines]",
          "870:                     var->SetConstInitialiser((int)((uint32)pnodeInit->AsParseNodeFloat()->dbl));",
          "871:                     loc = func->GetConstRegister<int>((uint32)pnodeInit->AsParseNodeFloat()->dbl);",
          "875:                     if (pnodeInit->AsParseNodeFloat()->maybeInt)",
          "881:                     loc = func->GetConstRegister<double>(pnodeInit->AsParseNodeFloat()->dbl);",
          "882:                     var->SetConstInitialiser(pnodeInit->AsParseNodeFloat()->dbl);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "928:                     {",
          "929:                         var->SetVarType(AsmJsVarType::Float);",
          "930:                         var->SetLocation(func->AcquireRegister<float>());",
          "932:                         {",
          "934:                             var->SetConstInitialiser((float)iVal);",
          "935:                             loc = func->GetConstRegister<float>((float)iVal);",
          "936:                         }",
          "938:                         {",
          "939:                             var->SetConstInitialiser(-0.0f);",
          "940:                             loc = func->GetConstRegister<float>(-0.0f);",
          "",
          "[Removed Lines]",
          "931:                         if (pnodeInit->sxCall.pnodeArgs->nop == knopInt)",
          "933:                             int iVal = pnodeInit->sxCall.pnodeArgs->sxInt.lw;",
          "937:                         else if (ParserWrapper::IsNegativeZero(pnodeInit->sxCall.pnodeArgs))",
          "",
          "[Added Lines]",
          "931:                         if (pnodeInit->AsParseNodeCall()->pnodeArgs->nop == knopInt)",
          "933:                             int iVal = pnodeInit->AsParseNodeCall()->pnodeArgs->AsParseNodeInt()->lw;",
          "937:                         else if (ParserWrapper::IsNegativeZero(pnodeInit->AsParseNodeCall()->pnodeArgs))",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "942:                         else",
          "943:                         {",
          "947:                             var->SetConstInitialiser((float)fVal);",
          "948:                             loc = func->GetConstRegister<float>(fVal);",
          "949:                         }",
          "",
          "[Removed Lines]",
          "945:                             Assert(pnodeInit->sxCall.pnodeArgs->nop == knopFlt);",
          "946:                             float fVal = (float)pnodeInit->sxCall.pnodeArgs->sxFlt.dbl;",
          "",
          "[Added Lines]",
          "945:                             Assert(pnodeInit->AsParseNodeCall()->pnodeArgs->nop == knopFlt);",
          "946:                             float fVal = (float)pnodeInit->AsParseNodeCall()->pnodeArgs->AsParseNodeFloat()->dbl;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "984:             if (DefineIdentifier(name, func))",
          "985:             {",
          "986:                 uint index = (uint)mFunctionArray.Count();",
          "988:                 {",
          "989:                     return nullptr;",
          "990:                 }",
          "",
          "[Removed Lines]",
          "987:                 if (pnodeFnc->sxFnc.nestedIndex != index)",
          "",
          "[Added Lines]",
          "987:                 if (pnodeFnc->AsParseNodeFnc()->nestedIndex != index)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1003:     bool AsmJsModuleCompiler::CheckByteLengthCall(ParseNode * callNode, ParseNode * bufferDecl)",
          "1004:     {",
          "1006:         {",
          "1007:             return false;",
          "1008:         }",
          "1010:         if (!arrayFunc)",
          "1011:         {",
          "1012:             return false;",
          "1013:         }",
          "1019:             arrayFunc->GetArrayBuiltInFunction() == AsmJSTypedArrayBuiltin_byteLength &&",
          "1022:     }",
          "1024:     bool AsmJsModuleCompiler::Fail(ParseNode* usepn, const wchar *error)",
          "",
          "[Removed Lines]",
          "1005:         if (callNode->nop != knopCall || callNode->sxCall.pnodeTarget->nop != knopName)",
          "1009:         AsmJsTypedArrayFunction* arrayFunc = LookupIdentifier<AsmJsTypedArrayFunction>(callNode->sxCall.pnodeTarget->name());",
          "1015:         return callNode->sxCall.argCount == 1 &&",
          "1016:             !callNode->sxCall.isApplyCall &&",
          "1017:             !callNode->sxCall.isEvalCall &&",
          "1018:             callNode->sxCall.spreadArgCount == 0 &&",
          "1020:             callNode->sxCall.pnodeArgs->nop == knopName &&",
          "1021:             callNode->sxCall.pnodeArgs->name()->GetPropertyId() == bufferDecl->name()->GetPropertyId();",
          "",
          "[Added Lines]",
          "1005:         if (callNode->nop != knopCall || callNode->AsParseNodeCall()->pnodeTarget->nop != knopName)",
          "1009:         AsmJsTypedArrayFunction* arrayFunc = LookupIdentifier<AsmJsTypedArrayFunction>(callNode->AsParseNodeCall()->pnodeTarget->name());",
          "1015:         return callNode->AsParseNodeCall()->argCount == 1 &&",
          "1016:             !callNode->AsParseNodeCall()->isApplyCall &&",
          "1017:             !callNode->AsParseNodeCall()->isEvalCall &&",
          "1018:             callNode->AsParseNodeCall()->spreadArgCount == 0 &&",
          "1020:             callNode->AsParseNodeCall()->pnodeArgs->nop == knopName &&",
          "1021:             callNode->AsParseNodeCall()->pnodeArgs->name()->GetPropertyId() == bufferDecl->name()->GetPropertyId();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1376:             var->SetLocation(mFloatVarSpace.AcquireRegister());",
          "1377:             if (pnode->nop == knopInt)",
          "1378:             {",
          "1380:             }",
          "1381:             else if (ParserWrapper::IsNegativeZero(pnode))",
          "1382:             {",
          "",
          "[Removed Lines]",
          "1379:                 var->SetConstInitialiser((float)pnode->sxInt.lw);",
          "",
          "[Added Lines]",
          "1379:                 var->SetConstInitialiser((float)pnode->AsParseNodeInt()->lw);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1384:             }",
          "1385:             else",
          "1386:             {",
          "1388:             }",
          "1389:         }",
          "1390:         else if (pnode->nop == knopInt)",
          "1391:         {",
          "1392:             var->SetVarType(AsmJsVarType::Int);",
          "1393:             var->SetLocation(mIntVarSpace.AcquireRegister());",
          "1395:         }",
          "1396:         else",
          "1397:         {",
          "",
          "[Removed Lines]",
          "1387:                 var->SetConstInitialiser((float)pnode->sxFlt.dbl);",
          "1394:             var->SetConstInitialiser(pnode->sxInt.lw);",
          "",
          "[Added Lines]",
          "1387:                 var->SetConstInitialiser((float)pnode->AsParseNodeFloat()->dbl);",
          "1394:             var->SetConstInitialiser(pnode->AsParseNodeInt()->lw);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1405:             {",
          "1406:                 var->SetVarType(AsmJsVarType::Int);",
          "1407:                 var->SetLocation(mIntVarSpace.AcquireRegister());",
          "1409:             }",
          "1411:             {",
          "1413:                 return false;",
          "",
          "[Removed Lines]",
          "1408:                 var->SetConstInitialiser((int)((uint32)pnode->sxFlt.dbl));",
          "1410:             else if (pnode->sxFlt.maybeInt)",
          "",
          "[Added Lines]",
          "1408:                 var->SetConstInitialiser((int)((uint32)pnode->AsParseNodeFloat()->dbl));",
          "1410:             else if (pnode->AsParseNodeFloat()->maybeInt)",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1416:             {",
          "1417:                 var->SetVarType(AsmJsVarType::Double);",
          "1418:                 var->SetLocation(mDoubleVarSpace.AcquireRegister());",
          "1420:             }",
          "1421:         }",
          "1422:         return true;",
          "",
          "[Removed Lines]",
          "1419:                 var->SetConstInitialiser(pnode->sxFlt.dbl);",
          "",
          "[Added Lines]",
          "1419:                 var->SetConstInitialiser(pnode->AsParseNodeFloat()->dbl);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsTypes.cpp||lib/Runtime/Language/AsmJsTypes.cpp": [
          "File: lib/Runtime/Language/AsmJsTypes.cpp -> lib/Runtime/Language/AsmJsTypes.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "725:             | 1 << WAsmJs::INT64",
          "726: #endif",
          "727:         )",
          "729:         , mFuncBody(nullptr)",
          "730:         , mMaxArgOutDepth(0)",
          "731:         , mDefined( false )",
          "",
          "[Removed Lines]",
          "728:         , mFuncInfo(pnodeFnc->sxFnc.funcInfo)",
          "",
          "[Added Lines]",
          "728:         , mFuncInfo(pnodeFnc->AsParseNodeFnc()->funcInfo)",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsUtils.cpp||lib/Runtime/Language/AsmJsUtils.cpp": [
          "File: lib/Runtime/Language/AsmJsUtils.cpp -> lib/Runtime/Language/AsmJsUtils.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     {",
          "31:         Assert( parser );",
          "34:         if( body )",
          "35:         {",
          "36:             ParseNode* lhs = GetBinaryLeft( body );",
          "",
          "[Removed Lines]",
          "33:         ParseNode *body = parser->sxFnc.pnodeBody;",
          "",
          "[Added Lines]",
          "33:         ParseNode *body = parser->AsParseNodeFnc()->pnodeBody;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     ParseNode* ParserWrapper::NextInList( ParseNode *node )",
          "57:     {",
          "58:         Assert( node->nop == knopList );",
          "60:     }",
          "62:     ParseNode* ParserWrapper::NextVar( ParseNode *node )",
          "63:     {",
          "65:     }",
          "67:     ParseNode* ParserWrapper::FunctionArgsList( ParseNode *node, ArgSlot &numformals )",
          "68:     {",
          "69:         Assert( node->nop == knopFncDecl );",
          "74:         return first;",
          "75:     }",
          "",
          "[Removed Lines]",
          "59:         return node->sxBin.pnode2;",
          "64:         return node->sxVar.pnodeNext;",
          "70:         PnFnc func = node->sxFnc;",
          "71:         ParseNode* first = func.pnodeParams;",
          "73:         for( ParseNode* pnode = first; pnode; pnode = pnode->sxVar.pnodeNext, ArgSlotMath::Inc(numformals));",
          "",
          "[Added Lines]",
          "59:         return node->AsParseNodeBin()->pnode2;",
          "64:         return node->AsParseNodeVar()->pnodeNext;",
          "70:         ParseNodeFnc * func = node->AsParseNodeFnc();",
          "71:         ParseNode* first = func->pnodeParams;",
          "73:         for( ParseNode* pnode = first; pnode; pnode = pnode->AsParseNodeVar()->pnodeNext, ArgSlotMath::Inc(numformals));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:     {",
          "84:         if( node->nop == knopFncDecl )",
          "85:         {",
          "88:             {",
          "90:             }",
          "91:         }",
          "92:         return nullptr;",
          "",
          "[Removed Lines]",
          "86:             PnFnc function = node->sxFnc;",
          "87:             if( function.pnodeName && function.pnodeName->nop == knopVarDecl )",
          "89:                 return function.pnodeName->sxVar.pid;",
          "",
          "[Added Lines]",
          "86:             ParseNodeFnc * function = node->AsParseNodeFnc();",
          "87:             if( function->pnodeName && function->pnodeName->nop == knopVarDecl )",
          "89:                 return function->pnodeName->AsParseNodeVar()->pid;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/AsmJsUtils.h||lib/Runtime/Language/AsmJsUtils.h": [
          "File: lib/Runtime/Language/AsmJsUtils.h -> lib/Runtime/Language/AsmJsUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:         static inline bool IsUInt(ParseNode *node);",
          "57:         static inline uint GetUInt(ParseNode *node);",
          "58:         static inline bool IsNegativeZero(ParseNode* node);",
          "60:         static inline bool IsUnsigned(ParseNode *node)",
          "61:         {",
          "62:             return node &&",
          "63:                 node->nop == knopFlt &&",
          "67:         }",
          "69:         static bool IsDefinition( ParseNode *arg );",
          "70:         static bool ParseVarOrConstStatement( AsmJSParser &parser, ParseNode **var );",
          "71:         static inline bool IsNumericLiteral(ParseNode* node) { return node && (node->nop == knopInt || node->nop == knopFlt); }",
          "72:         static inline bool IsFroundNumericLiteral(ParseNode* node) { return node && (IsNumericLiteral(node) || IsNegativeZero(node)); }",
          "76:         static inline ParseNode* DotBase( ParseNode *node );",
          "77:         static inline bool IsDotMember( ParseNode *node );",
          "78:         static inline PropertyName DotMember( ParseNode *node );",
          "",
          "[Removed Lines]",
          "59:         static inline bool IsMinInt(ParseNode *node){ return node && node->nop == knopFlt && node->sxFlt.maybeInt && node->sxFlt.dbl == -2147483648.0; };",
          "64:                 node->sxFlt.maybeInt &&",
          "65:                 node->sxFlt.dbl > (double)INT_MAX &&",
          "66:                 node->sxFlt.dbl <= (double)UINT_MAX;",
          "73:         static inline ParseNode* GetUnaryNode( ParseNode* node ){Assert(IsNodeUnary(node));return node->sxUni.pnode1;}",
          "74:         static inline ParseNode* GetBinaryLeft( ParseNode* node ){Assert(IsNodeBinary(node));return node->sxBin.pnode1;}",
          "75:         static inline ParseNode* GetBinaryRight( ParseNode* node ){Assert(IsNodeBinary(node));return node->sxBin.pnode2;}",
          "",
          "[Added Lines]",
          "59:         static inline bool IsMinInt(ParseNode *node){ return node && node->nop == knopFlt && node->AsParseNodeFloat()->maybeInt && node->AsParseNodeFloat()->dbl == -2147483648.0; };",
          "64:                 node->AsParseNodeFloat()->maybeInt &&",
          "65:                 node->AsParseNodeFloat()->dbl > (double)INT_MAX &&",
          "66:                 node->AsParseNodeFloat()->dbl <= (double)UINT_MAX;",
          "73:         static inline ParseNode* GetUnaryNode( ParseNode* node ){Assert(IsNodeUnary(node));return node->AsParseNodeUni()->pnode1;}",
          "74:         static inline ParseNode* GetBinaryLeft( ParseNode* node ){Assert(IsNodeBinary(node));return node->AsParseNodeBin()->pnode1;}",
          "75:         static inline ParseNode* GetBinaryRight( ParseNode* node ){Assert(IsNodeBinary(node));return node->AsParseNodeBin()->pnode2;}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     bool ParserWrapper::IsNegativeZero(ParseNode *node)",
          "104:     {",
          "107:     }",
          "109:     bool ParserWrapper::IsUInt( ParseNode *node )",
          "",
          "[Removed Lines]",
          "105:         return node && ((node->nop == knopFlt && JavascriptNumber::IsNegZero(node->sxFlt.dbl)) ||",
          "106:             (node->nop == knopNeg && node->sxUni.pnode1->nop == knopInt && node->sxUni.pnode1->sxInt.lw == 0));",
          "",
          "[Added Lines]",
          "105:         return node && ((node->nop == knopFlt && JavascriptNumber::IsNegZero(node->AsParseNodeFloat()->dbl)) ||",
          "106:             (node->nop == knopNeg && node->AsParseNodeUni()->pnode1->nop == knopInt && node->AsParseNodeUni()->pnode1->AsParseNodeInt()->lw == 0));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:         Assert( IsUInt( node ) );",
          "117:         if( node->nop == knopInt )",
          "118:         {",
          "120:         }",
          "121:         Assert( node->nop == knopFlt );",
          "123:     }",
          "125:     bool ParserWrapper::IsDotMember( ParseNode *node )",
          "",
          "[Removed Lines]",
          "119:             return (uint)node->sxInt.lw;",
          "122:         return (uint)node->sxFlt.dbl;",
          "",
          "[Added Lines]",
          "119:             return (uint)node->AsParseNodeInt()->lw;",
          "122:         return (uint)node->AsParseNodeFloat()->dbl;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:     ParseNode * ParserWrapper::GetListHead( ParseNode *node )",
          "147:     {",
          "148:         Assert( node->nop == knopList );",
          "150:     }",
          "151: };",
          "152: #endif",
          "",
          "[Removed Lines]",
          "149:         return node->sxBin.pnode1;",
          "",
          "[Added Lines]",
          "149:         return node->AsParseNodeBin()->pnode1;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/SourceTextModuleRecord.cpp||lib/Runtime/Language/SourceTextModuleRecord.cpp": [
          "File: lib/Runtime/Language/SourceTextModuleRecord.cpp -> lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     void SourceTextModuleRecord::ImportModuleListsFromParser()",
          "240:     {",
          "241:         Assert(scriptContext->GetConfig()->IsES6ModuleEnabled());",
          "243:         SetrequestedModuleList(moduleParseNode->requestedModules);",
          "244:         SetImportRecordList(moduleParseNode->importEntries);",
          "245:         SetStarExportRecordList(moduleParseNode->starExportEntries);",
          "",
          "[Removed Lines]",
          "242:         PnModule* moduleParseNode = static_cast<PnModule*>(&this->parseTree->sxModule);",
          "",
          "[Added Lines]",
          "242:         ParseNodeModule* moduleParseNode = this->parseTree->AsParseNodeModule();",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/GlobalObject.cpp||lib/Runtime/Library/GlobalObject.cpp": [
          "File: lib/Runtime/Library/GlobalObject.cpp -> lib/Runtime/Library/GlobalObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "927:                 if (isIndirect &&",
          "928:                     !strictMode &&",
          "930:                 {",
          "931:                     grfscr &= ~fscrEval;",
          "932:                 }",
          "",
          "[Removed Lines]",
          "929:                     !parseTree->sxFnc.GetStrictMode())",
          "",
          "[Added Lines]",
          "929:                     !parseTree->AsParseNodeFnc()->GetStrictMode())",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptLibrary.cpp||lib/Runtime/Library/JavascriptLibrary.cpp": [
          "File: lib/Runtime/Library/JavascriptLibrary.cpp -> lib/Runtime/Library/JavascriptLibrary.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5381:         IdentPtr pid;",
          "5385:         {",
          "5386:             return false;",
          "5387:         }",
          "",
          "[Removed Lines]",
          "5384:         if (x->sxStrTemplate.countStringLiterals != length)",
          "",
          "[Added Lines]",
          "5384:         if (x->AsParseNodeStrTemplate()->countStringLiterals != length)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5396:         AssertOrFailFast(length != 0 && length == rawArray->GetLength());",
          "5400:         for (uint32 i = 0; i < length - 1; i++)",
          "5401:         {",
          "",
          "[Removed Lines]",
          "5398:         x = x->sxStrTemplate.pnodeStringRawLiterals;",
          "",
          "[Added Lines]",
          "5398:         x = x->AsParseNodeStrTemplate()->pnodeStringRawLiterals;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5404:             str = Js::JavascriptString::FromVar(element);",
          "5406:             Assert(x->nop == knopList);",
          "5412:             if (pid->Cch() != str->GetLength())",
          "",
          "[Removed Lines]",
          "5407:             Assert(x->sxBin.pnode1->nop == knopStr);",
          "5409:             pid = x->sxBin.pnode1->sxPid.pid;",
          "",
          "[Added Lines]",
          "5407:             Assert(x->AsParseNodeBin()->pnode1->nop == knopStr);",
          "5409:             pid = x->AsParseNodeBin()->pnode1->AsParseNodePid()->pid;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5420:                 return false;",
          "5421:             }",
          "5424:         }",
          "",
          "[Removed Lines]",
          "5423:             x = x->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "5423:             x = x->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5430:         str = Js::JavascriptString::FromVar(element);",
          "5432:         Assert(x->nop == knopStr);",
          "5436:         if (pid->Cch() != str->GetLength())",
          "",
          "[Removed Lines]",
          "5433:         pid = x->sxPid.pid;",
          "",
          "[Added Lines]",
          "5433:         pid = x->AsParseNodePid()->pid;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5458:             return true;",
          "5459:         }",
          "",
          "[Removed Lines]",
          "5461:         x = x->sxStrTemplate.pnodeStringRawLiterals;",
          "5462:         y = y->sxStrTemplate.pnodeStringRawLiterals;",
          "",
          "[Added Lines]",
          "5461:         x = x->AsParseNodeStrTemplate()->pnodeStringRawLiterals;",
          "5462:         y = y->AsParseNodeStrTemplate()->pnodeStringRawLiterals;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5479:                 return false;",
          "5480:             }",
          "5489:             if (!DefaultComparer<const char16*>::Equals(pid_x, pid_y))",
          "",
          "[Removed Lines]",
          "5482:             Assert(x->sxBin.pnode1->nop == knopStr);",
          "5483:             Assert(y->sxBin.pnode1->nop == knopStr);",
          "5485:             pid_x = x->sxBin.pnode1->sxPid.pid->Psz();",
          "5486:             pid_y = y->sxBin.pnode1->sxPid.pid->Psz();",
          "",
          "[Added Lines]",
          "5482:             Assert(x->AsParseNodeBin()->pnode1->nop == knopStr);",
          "5483:             Assert(y->AsParseNodeBin()->pnode1->nop == knopStr);",
          "5485:             pid_x = x->AsParseNodeBin()->pnode1->AsParseNodePid()->pid->Psz();",
          "5486:             pid_y = y->AsParseNodeBin()->pnode1->AsParseNodePid()->pid->Psz();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5491:                 return false;",
          "5492:             }",
          "5496:         }",
          "",
          "[Removed Lines]",
          "5494:             x = x->sxBin.pnode2;",
          "5495:             y = y->sxBin.pnode2;",
          "",
          "[Added Lines]",
          "5494:             x = x->AsParseNodeBin()->pnode2;",
          "5495:             y = y->AsParseNodeBin()->pnode2;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5504:         Assert(x->nop == knopStr);",
          "5510:         return DefaultComparer<const char16*>::Equals(pid_x, pid_y);",
          "",
          "[Removed Lines]",
          "5506:         pid_x = x->sxPid.pid->Psz();",
          "5507:         pid_y = y->sxPid.pid->Psz();",
          "",
          "[Added Lines]",
          "5506:         pid_x = x->AsParseNodePid()->pid->Psz();",
          "5507:         pid_y = y->AsParseNodePid()->pid->Psz();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5517:         Assert(i != nullptr);",
          "5518:         Assert(i->nop == knopStrTemplate);",
          "5522:         const char16* pid;",
          "5524:         while (i->nop == knopList)",
          "5525:         {",
          "5530:             hash ^= DefaultComparer<const char16*>::GetHashCode(pid);",
          "5531:             hash ^= DefaultComparer<const char16*>::GetHashCode(_u(\"${}\"));",
          "5534:         }",
          "5536:         Assert(i->nop == knopStr);",
          "5540:         hash ^= DefaultComparer<const char16*>::GetHashCode(pid);",
          "",
          "[Removed Lines]",
          "5520:         i = i->sxStrTemplate.pnodeStringRawLiterals;",
          "5526:             Assert(i->sxBin.pnode1->nop == knopStr);",
          "5528:             pid = i->sxBin.pnode1->sxPid.pid->Psz();",
          "5533:             i = i->sxBin.pnode2;",
          "5538:         pid = i->sxPid.pid->Psz();",
          "",
          "[Added Lines]",
          "5520:         i = i->AsParseNodeStrTemplate()->pnodeStringRawLiterals;",
          "5526:             Assert(i->AsParseNodeBin()->pnode1->nop == knopStr);",
          "5528:             pid = i->AsParseNodeBin()->pnode1->AsParseNodePid()->pid->Psz();",
          "5533:             i = i->AsParseNodeBin()->pnode2;",
          "5538:         pid = i->AsParseNodePid()->pid->Psz();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9029718192d8c7daaa2d584ed59c147449843910",
      "candidate_info": {
        "commit_hash": "9029718192d8c7daaa2d584ed59c147449843910",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/9029718192d8c7daaa2d584ed59c147449843910",
        "files": [
          "test/es6/default-splitscope.js"
        ],
        "message": "Re-enabling default param test case",
        "before_after_code_files": [
          "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
          ],
          "candidate": [
            "test/es6/default-splitscope.js||test/es6/default-splitscope.js"
          ]
        }
      },
      "candidate_diff": {
        "test/es6/default-splitscope.js||test/es6/default-splitscope.js": [
          "File: test/es6/default-splitscope.js -> test/es6/default-splitscope.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         }",
          "172:         assert.areEqual(10, f11()(), \"Recursive call to the function from the body scope returns the right value when eval is there in the body\");",
          "190:     }",
          "191:  },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:         function f13() {",
          "175:             var a = function jnvgfg(sfgnmj = function ccunlk() { jnvgfg(undefined, 1); }, b) {",
          "176:                 if (b) {",
          "177:                     assert.areEqual(undefined, jnvgfg, \"This refers to the instance in the body and the value of the function expression is not copied over\");",
          "178:                 }",
          "179:                 var jnvgfg = 10;",
          "180:                 if (!b) {",
          "181:                     sfgnmj();",
          "182:                     return 100;",
          "183:                 }",
          "184:             };",
          "185:             assert.areEqual(100, a(), \"After the recursion the right value is returned by the split scoped function\");",
          "186:         };",
          "187:         f13();",
          "",
          "---------------"
        ]
      }
    }
  ]
}