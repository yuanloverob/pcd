{
  "cve_id": "CVE-2016-7163",
  "cve_desc": "Integer overflow in the opj_pi_create_decode function in pi.c in OpenJPEG allows remote attackers to execute arbitrary code via a crafted JP2 file, which triggers an out-of-bounds read or write.",
  "repo": "uclouvain/openjpeg",
  "patch_hash": "ef01f18dfc6780b776d0674ed3e7415c6ef54d24",
  "patch_info": {
    "commit_hash": "ef01f18dfc6780b776d0674ed3e7415c6ef54d24",
    "repo": "uclouvain/openjpeg",
    "commit_url": "https://github.com/uclouvain/openjpeg/commit/ef01f18dfc6780b776d0674ed3e7415c6ef54d24",
    "files": [
      "src/lib/openjp2/pi.c"
    ],
    "message": "Cast to size_t before multiplication\n\nNeed to cast to size_t before multiplication otherwise overflow check is useless.",
    "before_after_code_files": [
      "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
    ]
  },
  "patch_diff": {
    "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c": [
      "File: src/lib/openjp2/pi.c -> src/lib/openjp2/pi.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1241:  l_current_pi->include = 00;",
      "1242:  if (l_step_l <= (SIZE_MAX / (l_tcp->numlayers + 1U)))",
      "1243:  {",
      "1245:  }",
      "1247:  if",
      "",
      "[Removed Lines]",
      "1244:   l_current_pi->include = (OPJ_INT16*) opj_calloc((l_tcp->numlayers +1) * l_step_l, sizeof(OPJ_INT16));",
      "",
      "[Added Lines]",
      "1244:   l_current_pi->include = (OPJ_INT16*) opj_calloc((size_t)(l_tcp->numlayers + 1U) * l_step_l, sizeof(OPJ_INT16));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51eb86d8f7a6297a4f0e8ca44977b72532de0353",
      "candidate_info": {
        "commit_hash": "51eb86d8f7a6297a4f0e8ca44977b72532de0353",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/51eb86d8f7a6297a4f0e8ca44977b72532de0353",
        "files": [
          "src/lib/openjp2/pi.c"
        ],
        "message": "Fix warnings in pi.c raised by VS11 analyze (#190)",
        "before_after_code_files": [
          "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ],
          "candidate": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c": [
          "File: src/lib/openjp2/pi.c -> src/lib/openjp2/pi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1351:                                         opj_cp_t *p_cp,",
          "1352:                                         OPJ_UINT32 p_tile_no)",
          "1353: {",
          "1355:     OPJ_UINT32 pino;",
          "1356:     OPJ_UINT32 compno, resno;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1354:     OPJ_UINT32 numcomps = p_image->numcomps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1389:     l_data_stride = 4 * OPJ_J2K_MAXRLVLS;",
          "1390:     l_tmp_data = (OPJ_UINT32*)opj_malloc(",
          "1392:     if",
          "1393:     (! l_tmp_data) {",
          "1394:         return 00;",
          "1395:     }",
          "1396:     l_tmp_ptr = (OPJ_UINT32**)opj_malloc(",
          "1398:     if",
          "1399:     (! l_tmp_ptr) {",
          "1400:         opj_free(l_tmp_data);",
          "",
          "[Removed Lines]",
          "1391:                      l_data_stride * p_image->numcomps * sizeof(OPJ_UINT32));",
          "1397:                     p_image->numcomps * sizeof(OPJ_UINT32 *));",
          "",
          "[Added Lines]",
          "1393:                      l_data_stride * numcomps * sizeof(OPJ_UINT32));",
          "1399:                     numcomps * sizeof(OPJ_UINT32 *));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1412:     l_encoding_value_ptr = l_tmp_data;",
          "1414:     for",
          "1416:         l_tmp_ptr[compno] = l_encoding_value_ptr;",
          "1417:         l_encoding_value_ptr += l_data_stride;",
          "1418:     }",
          "",
          "[Removed Lines]",
          "1415:     (compno = 0; compno < p_image->numcomps; ++compno) {",
          "",
          "[Added Lines]",
          "1417:     (compno = 0; compno < numcomps; ++compno) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1424:     l_step_p = 1;",
          "1425:     l_step_c = l_max_prec * l_step_p;",
          "1427:     l_step_l = l_max_res * l_step_r;",
          "",
          "[Removed Lines]",
          "1426:     l_step_r = p_image->numcomps * l_step_c;",
          "",
          "[Added Lines]",
          "1428:     l_step_r = numcomps * l_step_c;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1468:     for",
          "1470:         opj_pi_resolution_t *l_res = l_current_comp->resolutions;",
          "1471:         l_encoding_value_ptr = l_tmp_ptr[compno];",
          "",
          "[Removed Lines]",
          "1469:     (compno = 0; compno < l_current_pi->numcomps; ++compno) {",
          "",
          "[Added Lines]",
          "1471:     (compno = 0; compno < numcomps; ++compno) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1507:         for",
          "1509:             opj_pi_resolution_t *l_res = l_current_comp->resolutions;",
          "1510:             l_encoding_value_ptr = l_tmp_ptr[compno];",
          "",
          "[Removed Lines]",
          "1508:         (compno = 0; compno < l_current_pi->numcomps; ++compno) {",
          "",
          "[Added Lines]",
          "1510:         (compno = 0; compno < numcomps; ++compno) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1549:         OPJ_UINT32 p_tile_no,",
          "1550:         J2K_T2_MODE p_t2_mode)",
          "1551: {",
          "1553:     OPJ_UINT32 pino;",
          "1554:     OPJ_UINT32 compno, resno;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1554:     OPJ_UINT32 numcomps = p_image->numcomps;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1587:     l_data_stride = 4 * OPJ_J2K_MAXRLVLS;",
          "1588:     l_tmp_data = (OPJ_UINT32*)opj_malloc(",
          "1590:     if (! l_tmp_data) {",
          "1591:         return 00;",
          "1592:     }",
          "1594:     l_tmp_ptr = (OPJ_UINT32**)opj_malloc(",
          "1596:     if (! l_tmp_ptr) {",
          "1597:         opj_free(l_tmp_data);",
          "1598:         return 00;",
          "",
          "[Removed Lines]",
          "1589:                      l_data_stride * p_image->numcomps * sizeof(OPJ_UINT32));",
          "1595:                     p_image->numcomps * sizeof(OPJ_UINT32 *));",
          "",
          "[Added Lines]",
          "1593:                      l_data_stride * numcomps * sizeof(OPJ_UINT32));",
          "1599:                     numcomps * sizeof(OPJ_UINT32 *));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1609:     l_encoding_value_ptr = l_tmp_data;",
          "1612:         l_tmp_ptr[compno] = l_encoding_value_ptr;",
          "1613:         l_encoding_value_ptr += l_data_stride;",
          "1614:     }",
          "",
          "[Removed Lines]",
          "1611:     for (compno = 0; compno < p_image->numcomps; ++compno) {",
          "",
          "[Added Lines]",
          "1615:     for (compno = 0; compno < numcomps; ++compno) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1621:     l_step_p = 1;",
          "1622:     l_step_c = l_max_prec * l_step_p;",
          "1624:     l_step_l = l_max_res * l_step_r;",
          "",
          "[Removed Lines]",
          "1623:     l_step_r = p_image->numcomps * l_step_c;",
          "",
          "[Added Lines]",
          "1627:     l_step_r = numcomps * l_step_c;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1654:     l_current_pi->step_l = l_step_l;",
          "1658:         opj_pi_resolution_t *l_res = l_current_comp->resolutions;",
          "1659:         l_encoding_value_ptr = l_tmp_ptr[compno];",
          "",
          "[Removed Lines]",
          "1657:     for (compno = 0; compno < l_current_pi->numcomps; ++compno) {",
          "",
          "[Added Lines]",
          "1661:     for (compno = 0; compno < numcomps; ++compno) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1693:         l_current_pi->step_l = l_step_l;",
          "1697:             opj_pi_resolution_t *l_res = l_current_comp->resolutions;",
          "1698:             l_encoding_value_ptr = l_tmp_ptr[compno];",
          "",
          "[Removed Lines]",
          "1696:         for (compno = 0; compno < l_current_pi->numcomps; ++compno) {",
          "",
          "[Added Lines]",
          "1700:         for (compno = 0; compno < numcomps; ++compno) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1727:         opj_pi_update_encode_poc_and_final(p_cp, p_tile_no, l_tx0, l_tx1, l_ty0, l_ty1,",
          "1728:                                            l_max_prec, l_max_res, l_dx_min, l_dy_min);",
          "1729:     } else {",
          "1731:                                      l_ty0, l_ty1, l_max_prec, l_max_res, l_dx_min, l_dy_min);",
          "1732:     }",
          "",
          "[Removed Lines]",
          "1730:         opj_pi_update_encode_not_poc(p_cp, p_image->numcomps, p_tile_no, l_tx0, l_tx1,",
          "",
          "[Added Lines]",
          "1734:         opj_pi_update_encode_not_poc(p_cp, numcomps, p_tile_no, l_tx0, l_tx1,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a07ccb3d0f076388e4da684a3bfd4327125c721",
      "candidate_info": {
        "commit_hash": "9a07ccb3d0f076388e4da684a3bfd4327125c721",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/9a07ccb3d0f076388e4da684a3bfd4327125c721",
        "files": [
          "src/lib/openjp2/dwt.c",
          "src/lib/openjp2/pi.c",
          "src/lib/openjp2/t1.c"
        ],
        "message": "Add overflow checks for opj_aligned_malloc (#841)\n\nSee\nhttps://pdfium.googlesource.com/pdfium/+/b20ab6c7acb3be1393461eb650ca8fa4660c937e/third_party/libopenjpeg20/0020-opj_aligned_malloc.patch",
        "before_after_code_files": [
          "src/lib/openjp2/dwt.c||src/lib/openjp2/dwt.c",
          "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c",
          "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ],
          "candidate": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/dwt.c||src/lib/openjp2/dwt.c": [
          "File: src/lib/openjp2/dwt.c -> src/lib/openjp2/dwt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:  opj_tcd_resolution_t * l_cur_res = 0;",
          "401:  opj_tcd_resolution_t * l_last_res = 0;",
          "",
          "[Removed Lines]",
          "398:  OPJ_UINT32 l_data_size;",
          "",
          "[Added Lines]",
          "398:  size_t l_data_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:  l_cur_res = tilec->resolutions + l;",
          "408:  l_last_res = l_cur_res - 1;",
          "414:  if (l_data_size != 0 && ! bj) {",
          "",
          "[Removed Lines]",
          "410:  l_data_size = opj_dwt_max_resolution( tilec->resolutions,tilec->numresolutions) * (OPJ_UINT32)sizeof(OPJ_INT32);",
          "411:  bj = (OPJ_INT32*)opj_malloc((size_t)l_data_size);",
          "",
          "[Added Lines]",
          "410:  l_data_size = opj_dwt_max_resolution( tilec->resolutions,tilec->numresolutions);",
          "412:  if (l_data_size > (SIZE_MAX / sizeof(OPJ_INT32))) {",
          "414:   return OPJ_FALSE;",
          "415:  }",
          "416:  l_data_size *= sizeof(OPJ_INT32);",
          "417:  bj = (OPJ_INT32*)opj_malloc(l_data_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "638:   return OPJ_TRUE;",
          "639:  }",
          "640:  num_threads = opj_thread_pool_get_thread_count(tp);",
          "642:  h.mem = (OPJ_INT32*)opj_aligned_malloc(h_mem_size);",
          "643:  if (! h.mem){",
          "",
          "[Removed Lines]",
          "641:  h_mem_size = opj_dwt_max_resolution(tr, numres) * sizeof(OPJ_INT32);",
          "",
          "[Added Lines]",
          "647:  h_mem_size = opj_dwt_max_resolution(tr, numres);",
          "649:  if (h_mem_size > (SIZE_MAX / sizeof(OPJ_INT32))) {",
          "651:   return OPJ_FALSE;",
          "652:  }",
          "653:  h_mem_size *= sizeof(OPJ_INT32);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1004:  OPJ_UINT32 w = (OPJ_UINT32)(tilec->x1 - tilec->x0);",
          "1007:  if (!h.wavelet) {",
          "1009:   return OPJ_FALSE;",
          "",
          "[Removed Lines]",
          "1006:  h.wavelet = (opj_v4_t*) opj_aligned_malloc((opj_dwt_max_resolution(res, numres)+5) * sizeof(opj_v4_t));",
          "",
          "[Added Lines]",
          "1018:  size_t l_data_size;",
          "1020:  l_data_size = opj_dwt_max_resolution(res, numres);",
          "1022:  if (l_data_size > (SIZE_MAX - 5U)) {",
          "1024:   return OPJ_FALSE;",
          "1025:  }",
          "1026:  l_data_size += 5U;",
          "1028:  if (l_data_size > (SIZE_MAX / sizeof(opj_v4_t))) {",
          "1030:   return OPJ_FALSE;",
          "1031:  }",
          "1032:  h.wavelet = (opj_v4_t*) opj_aligned_malloc(l_data_size * sizeof(opj_v4_t));",
          "",
          "---------------"
        ],
        "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c": [
          "File: src/lib/openjp2/pi.c -> src/lib/openjp2/pi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1241:  l_current_pi->include = 00;",
          "1242:  if (l_step_l <= (SIZE_MAX / (l_tcp->numlayers + 1U)))",
          "1243:  {",
          "1244:   l_current_pi->include = (OPJ_INT16*) opj_calloc((size_t)(l_tcp->numlayers + 1U) * l_step_l, sizeof(OPJ_INT16));",
          "1245:  }",
          "1249:  {",
          "1250:   opj_free(l_tmp_data);",
          "1251:   opj_free(l_tmp_ptr);",
          "",
          "[Removed Lines]",
          "1247:  if",
          "1248:   (!l_current_pi->include)",
          "",
          "[Added Lines]",
          "1248:  if (!l_current_pi->include)",
          "",
          "---------------"
        ],
        "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c": [
          "File: src/lib/openjp2/t1.c -> src/lib/openjp2/t1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1406:   OPJ_UINT32 w,",
          "1407:   OPJ_UINT32 h)",
          "1408: {",
          "1413:  if (!t1->encoder) {",
          "1415:    opj_aligned_free(t1->data);",
          "1416:    t1->data = (OPJ_INT32*) opj_aligned_malloc(datasize * sizeof(OPJ_INT32));",
          "1417:    if(!t1->data){",
          "1419:     return OPJ_FALSE;",
          "1420:    }",
          "1422:   }",
          "1424:   if (t1->data != NULL) {",
          "1426:   }",
          "1427:  }",
          "1436:    return OPJ_FALSE;",
          "1437:   }",
          "1439:  }",
          "1442:  if (!t1->encoder) {",
          "1446:    opj_aligned_free(t1->colflags);",
          "1447:    t1->colflags = (opj_colflag_t*) opj_aligned_malloc(colflags_size * sizeof(opj_colflag_t));",
          "1448:    if(!t1->colflags){",
          "1450:     return OPJ_FALSE;",
          "1451:    }",
          "1453:   }",
          "1455:  }",
          "1460:  return OPJ_TRUE;",
          "1461: }",
          "",
          "[Removed Lines]",
          "1409:  OPJ_UINT32 datasize=w * h;",
          "1410:  OPJ_UINT32 flagssize;",
          "1414:   if(datasize > t1->datasize){",
          "1421:    t1->datasize=datasize;",
          "1425:    memset(t1->data,0,datasize * sizeof(OPJ_INT32));",
          "1428:  t1->flags_stride=w+2;",
          "1429:  flagssize=t1->flags_stride * (h+2);",
          "1431:  if(flagssize > t1->flagssize){",
          "1432:   opj_aligned_free(t1->flags);",
          "1433:   t1->flags = (opj_flag_t*) opj_aligned_malloc(flagssize * sizeof(opj_flag_t));",
          "1434:   if(!t1->flags){",
          "1438:   t1->flagssize=flagssize;",
          "1440:  memset(t1->flags,0,flagssize * sizeof(opj_flag_t));",
          "1443:   OPJ_UINT32 colflags_size=t1->flags_stride * ((h+3) / 4 + 2);",
          "1445:   if(colflags_size > t1->colflags_size){",
          "1452:    t1->colflags_size=colflags_size;",
          "1454:   memset(t1->colflags,0,colflags_size * sizeof(opj_colflag_t));",
          "1457:  t1->w=w;",
          "1458:  t1->h=h;",
          "",
          "[Added Lines]",
          "1411:   size_t datasize;",
          "1415:   if ((w > 0U) && ((size_t)h > (SIZE_MAX / (size_t)w))) {",
          "1417:    return OPJ_FALSE;",
          "1418:   }",
          "1419: #endif",
          "1420:   datasize = (size_t)w * h;",
          "1423:   if (datasize > (SIZE_MAX / sizeof(OPJ_INT32))) {",
          "1425:    return OPJ_FALSE;",
          "1426:   }",
          "1428:   if(datasize > (size_t)t1->datasize){",
          "1438:    if (datasize > (size_t)0xFFFFFFFFU /* UINT32_MAX */) {",
          "1440:     return OPJ_FALSE;",
          "1441:    }",
          "1442: #endif",
          "1443:    t1->datasize = (OPJ_UINT32)datasize;",
          "1447:    memset(t1->data, 0, datasize * sizeof(OPJ_INT32));",
          "1451:  {",
          "1452:   size_t flagssize;",
          "1455:   if (w > (0xFFFFFFFFU /* UINT32_MAX */ - 2U)) {",
          "1457:    return OPJ_FALSE;",
          "1458:   }",
          "1463:   if (h > (0xFFFFFFFFU /* UINT32_MAX */ - 3U)) {",
          "1465:    return OPJ_FALSE;",
          "1466:   }",
          "1467: #endif",
          "1468:   flagssize = (size_t)h + 3U;",
          "1471:   if (flagssize > (SIZE_MAX / (size_t)t1->flags_stride)) {",
          "1475:   flagssize *= (size_t)t1->flags_stride;",
          "1477:   if(flagssize > (size_t)t1->flagssize){",
          "1479:    if (flagssize > (SIZE_MAX / sizeof(opj_flag_t))) {",
          "1481:     return OPJ_FALSE;",
          "1482:    }",
          "1483:    opj_aligned_free(t1->flags);",
          "1484:    t1->flags = (opj_flag_t*) opj_aligned_malloc(flagssize * sizeof(opj_flag_t));",
          "1485:    if(!t1->flags){",
          "1487:     return OPJ_FALSE;",
          "1488:    }",
          "1492:    if (flagssize > (size_t)0xFFFFFFFFU /* UINT32_MAX */) {",
          "1494:     return OPJ_FALSE;",
          "1495:    }",
          "1496: #endif",
          "1497:    t1->flagssize = (OPJ_UINT32)flagssize;",
          "1498:   }",
          "1499:   memset(t1->flags, 0, flagssize * sizeof(opj_flag_t));",
          "1505:   if (colflags_size > (SIZE_MAX / (size_t)t1->flags_stride)) {",
          "1507:    return OPJ_FALSE;",
          "1508:   }",
          "1509:   colflags_size *= (size_t)t1->flags_stride;",
          "1511:   if(colflags_size > (size_t)t1->colflags_size){",
          "1513:    if ((size_t)colflags_size > (SIZE_MAX / sizeof(opj_colflag_t))) {",
          "1515:     return OPJ_FALSE;",
          "1516:    }",
          "1526:    if (colflags_size > (size_t)0xFFFFFFFFU /* UINT32_MAX */) {",
          "1528:     return OPJ_FALSE;",
          "1529:    }",
          "1530: #endif",
          "1531:    t1->colflags_size = (OPJ_UINT32)colflags_size;",
          "1533:   memset(t1->colflags, 0, colflags_size * sizeof(opj_colflag_t));",
          "1536:  t1->w = w;",
          "1537:  t1->h = h;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c16bc057ba3f125051c9966cf1f5b68a05681de4",
      "candidate_info": {
        "commit_hash": "c16bc057ba3f125051c9966cf1f5b68a05681de4",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/c16bc057ba3f125051c9966cf1f5b68a05681de4",
        "files": [
          "src/lib/openjp2/pi.c"
        ],
        "message": "Fix an integer overflow issue (#809)\n\nPrevent an integer overflow issue in function opj_pi_create_decode of\npi.c.",
        "before_after_code_files": [
          "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ],
          "candidate": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c": [
          "File: src/lib/openjp2/pi.c -> src/lib/openjp2/pi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:  l_current_pi = l_pi;",
          "1241:  if",
          "1242:   (!l_current_pi->include)",
          "1243:  {",
          "",
          "[Removed Lines]",
          "1240:  l_current_pi->include = (OPJ_INT16*) opj_calloc((l_tcp->numlayers +1) * l_step_l, sizeof(OPJ_INT16));",
          "",
          "[Added Lines]",
          "1241:  l_current_pi->include = 00;",
          "1242:  if (l_step_l <= (SIZE_MAX / (l_tcp->numlayers + 1U)))",
          "1243:  {",
          "1244:   l_current_pi->include = (OPJ_INT16*) opj_calloc((l_tcp->numlayers +1) * l_step_l, sizeof(OPJ_INT16));",
          "1245:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80818c39f5bfbac37768fcee95b0ffeceaa77264",
      "candidate_info": {
        "commit_hash": "80818c39f5bfbac37768fcee95b0ffeceaa77264",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/80818c39f5bfbac37768fcee95b0ffeceaa77264",
        "files": [
          "src/lib/openjp2/pi.c",
          "src/lib/openjp2/pi.h"
        ],
        "message": "Avoid index out of bounds access to pi->include[] (#938)\n\nFix id:000098,sig:11,src:005411,op:havoc,rep:2 test case",
        "before_after_code_files": [
          "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c",
          "src/lib/openjp2/pi.h||src/lib/openjp2/pi.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ],
          "candidate": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c": [
          "File: src/lib/openjp2/pi.c -> src/lib/openjp2/pi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: ==========================================================",
          "233: static OPJ_BOOL opj_pi_next_lrcp(opj_pi_iterator_t * pi)",
          "234: {",
          "235:     opj_pi_comp_t *comp = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: static void opj_pi_emit_error(opj_pi_iterator_t * pi, const char* msg)",
          "234: {",
          "235:     (void)pi;",
          "236:     (void)msg;",
          "237: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:                 for (pi->precno = pi->poc.precno0; pi->precno < pi->poc.precno1; pi->precno++) {",
          "260:                     index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *",
          "261:                             pi->step_c + pi->precno * pi->step_p;",
          "262:                     if (!pi->include[index]) {",
          "263:                         pi->include[index] = 1;",
          "264:                         return OPJ_TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:                     if (index >= pi->include_size) {",
          "275:                         opj_pi_emit_error(pi, \"Invalid access to pi->include\");",
          "276:                         return OPJ_FALSE;",
          "277:                     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:                 for (pi->precno = pi->poc.precno0; pi->precno < pi->poc.precno1; pi->precno++) {",
          "302:                     index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *",
          "303:                             pi->step_c + pi->precno * pi->step_p;",
          "304:                     if (!pi->include[index]) {",
          "305:                         pi->include[index] = 1;",
          "306:                         return OPJ_TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:                     if (index >= pi->include_size) {",
          "321:                         opj_pi_emit_error(pi, \"Invalid access to pi->include\");",
          "322:                         return OPJ_FALSE;",
          "323:                     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "407:                     for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {",
          "408:                         index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *",
          "409:                                 pi->step_c + pi->precno * pi->step_p;",
          "410:                         if (!pi->include[index]) {",
          "411:                             pi->include[index] = 1;",
          "412:                             return OPJ_TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:                         if (index >= pi->include_size) {",
          "431:                             opj_pi_emit_error(pi, \"Invalid access to pi->include\");",
          "432:                             return OPJ_FALSE;",
          "433:                         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "513:                     for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {",
          "514:                         index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *",
          "515:                                 pi->step_c + pi->precno * pi->step_p;",
          "516:                         if (!pi->include[index]) {",
          "517:                             pi->include[index] = 1;",
          "518:                             return OPJ_TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "540:                         if (index >= pi->include_size) {",
          "541:                             opj_pi_emit_error(pi, \"Invalid access to pi->include\");",
          "542:                             return OPJ_FALSE;",
          "543:                         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "617:                     for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {",
          "618:                         index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *",
          "619:                                 pi->step_c + pi->precno * pi->step_p;",
          "620:                         if (!pi->include[index]) {",
          "621:                             pi->include[index] = 1;",
          "622:                             return OPJ_TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "648:                         if (index >= pi->include_size) {",
          "649:                             opj_pi_emit_error(pi, \"Invalid access to pi->include\");",
          "650:                             return OPJ_FALSE;",
          "651:                         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1334:     l_current_pi->include = 00;",
          "1338:     }",
          "1340:     if (!l_current_pi->include) {",
          "",
          "[Removed Lines]",
          "1335:     if (l_step_l <= (SIZE_MAX / (l_tcp->numlayers + 1U))) {",
          "1336:         l_current_pi->include = (OPJ_INT16*) opj_calloc((size_t)(",
          "1337:                                     l_tcp->numlayers + 1U) * l_step_l, sizeof(OPJ_INT16));",
          "",
          "[Added Lines]",
          "1367:     if (l_step_l <= (UINT_MAX / (l_tcp->numlayers + 1U))) {",
          "1368:         l_current_pi->include_size = (l_tcp->numlayers + 1U) * l_step_l;",
          "1369:         l_current_pi->include = (OPJ_INT16*) opj_calloc(",
          "1370:                                     l_current_pi->include_size, sizeof(OPJ_INT16));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1424:         }",
          "1426:         l_current_pi->include = (l_current_pi - 1)->include;",
          "1427:         ++l_current_pi;",
          "1428:     }",
          "1429:     opj_free(l_tmp_data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:         l_current_pi->include_size = (l_current_pi - 1)->include_size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1525:     l_current_pi = l_pi;",
          "1529:                             sizeof(OPJ_INT16));",
          "1530:     if (!l_current_pi->include) {",
          "1531:         opj_free(l_tmp_data);",
          "",
          "[Removed Lines]",
          "1528:     l_current_pi->include = (OPJ_INT16*) opj_calloc(l_tcp->numlayers * l_step_l,",
          "",
          "[Added Lines]",
          "1562:     l_current_pi->include_size = l_tcp->numlayers * l_step_l;",
          "1563:     l_current_pi->include = (OPJ_INT16*) opj_calloc(l_current_pi->include_size,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1612:         l_current_pi->include = (l_current_pi - 1)->include;",
          "1613:         ++l_current_pi;",
          "1614:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1648:         l_current_pi->include_size = (l_current_pi - 1)->include_size;",
          "",
          "---------------"
        ],
        "src/lib/openjp2/pi.h||src/lib/openjp2/pi.h": [
          "File: src/lib/openjp2/pi.h -> src/lib/openjp2/pi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     OPJ_BYTE tp_on;",
          "77:     OPJ_INT16 *include;",
          "79:     OPJ_UINT32 step_l;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     OPJ_UINT32 include_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf845a3892a6701a3766ea6478abc9cf560362ef",
      "candidate_info": {
        "commit_hash": "bf845a3892a6701a3766ea6478abc9cf560362ef",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/bf845a3892a6701a3766ea6478abc9cf560362ef",
        "files": [
          "src/lib/openjp2/pi.c"
        ],
        "message": "Cast to size_t before multiplication\n\nNeed to cast to size_t before multiplication otherwise overflow check is useless.",
        "before_after_code_files": [
          "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ],
          "candidate": [
            "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/pi.c||src/lib/openjp2/pi.c": [
          "File: src/lib/openjp2/pi.c -> src/lib/openjp2/pi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1241:  l_current_pi->include = 00;",
          "1242:  if (l_step_l <= (SIZE_MAX / (l_tcp->numlayers + 1U)))",
          "1243:  {",
          "1245:  }",
          "1247:  if",
          "",
          "[Removed Lines]",
          "1244:   l_current_pi->include = (OPJ_INT16*) opj_calloc((l_tcp->numlayers +1) * l_step_l, sizeof(OPJ_INT16));",
          "",
          "[Added Lines]",
          "1244:   l_current_pi->include = (OPJ_INT16*) opj_calloc((size_t)(l_tcp->numlayers + 1U) * l_step_l, sizeof(OPJ_INT16));",
          "",
          "---------------"
        ]
      }
    }
  ]
}