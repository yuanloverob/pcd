{
  "cve_id": "CVE-2022-0413",
  "cve_desc": "Use After Free in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "37f47958b8a2a44abc60614271d9537e7f14e51a",
  "patch_info": {
    "commit_hash": "37f47958b8a2a44abc60614271d9537e7f14e51a",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/37f47958b8a2a44abc60614271d9537e7f14e51a",
    "files": [
      "src/ex_cmds.c",
      "src/testdir/test_substitute.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4253: using freed memory when substitute with function call\n\nProblem:    Using freed memory when substitute uses a recursive function call.\nSolution:   Make a copy of the substitute text.",
    "before_after_code_files": [
      "src/ex_cmds.c||src/ex_cmds.c",
      "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ex_cmds.c||src/ex_cmds.c": [
      "File: src/ex_cmds.c -> src/ex_cmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3687:     int  save_do_all;  // remember user specified 'g' flag",
      "3688:     int  save_do_ask;  // remember user specified 'c' flag",
      "3689:     char_u *pat = NULL, *sub = NULL; // init for GCC",
      "3690:     int  delimiter;",
      "3691:     int  sublen;",
      "3692:     int  got_quit = FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3690:     char_u *sub_copy = NULL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3980:     sub_firstline = NULL;",
      "3988:  sub = regtilde(sub, magic_isset());",
      "",
      "[Removed Lines]",
      "3987:     if (!(sub[0] == '\\\\' && sub[1] == '='))",
      "",
      "[Added Lines]",
      "3990:     if (sub[0] == '\\\\' && sub[1] == '=')",
      "3991:     {",
      "3992:  sub = vim_strsave(sub);",
      "3993:  if (sub == NULL)",
      "3994:      return;",
      "3995:  sub_copy = sub;",
      "3996:     }",
      "3997:     else",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4790: #endif",
      "4792:     vim_regfree(regmatch.regprog);",
      "4795:     subflags.do_all = save_do_all;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4803:     vim_free(sub_copy);",
      "",
      "---------------"
    ],
    "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim": [
      "File: src/testdir/test_substitute.vim -> src/testdir/test_substitute.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "980:   bw!",
      "981: endfunc",
      "983: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "983: \" This was using \"old_sub\" after it was freed.",
      "984: func Test_using_old_sub()",
      "985:   set compatible maxfuncdepth=10",
      "986:   new",
      "987:   call setline(1, 'some text.')",
      "988:   func Repl()",
      "989:     ~",
      "990:     s/",
      "991:   endfunc",
      "992:   silent!  s/\\%')/\\=Repl()",
      "994:   delfunc Repl",
      "995:   bwipe!",
      "996:   set nocompatible",
      "997: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4252,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4253,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44ddf19ec0ff59c969658ec7d9ed42070c59c51b",
      "candidate_info": {
        "commit_hash": "44ddf19ec0ff59c969658ec7d9ed42070c59c51b",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/44ddf19ec0ff59c969658ec7d9ed42070c59c51b",
        "files": [
          "src/alloc.c",
          "src/errors.h",
          "src/ex_cmds.c",
          "src/proto/regexp.pro",
          "src/regexp.c",
          "src/testdir/test_substitute.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.5146: memory leak when substitute expression nests\n\nProblem:    Memory leak when substitute expression nests.\nSolution:   Use an array of expression results.",
        "before_after_code_files": [
          "src/alloc.c||src/alloc.c",
          "src/errors.h||src/errors.h",
          "src/ex_cmds.c||src/ex_cmds.c",
          "src/proto/regexp.pro||src/proto/regexp.pro",
          "src/regexp.c||src/regexp.c",
          "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/ex_cmds.c||src/ex_cmds.c",
            "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/alloc.c||src/alloc.c": [
          "File: src/alloc.c -> src/alloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "586: # ifdef FEAT_QUICKFIX",
          "587:     check_quickfix_busy();",
          "588: # endif",
          "589: }",
          "590: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: # ifdef FEAT_EVAL",
          "590:     free_resub_eval_result();",
          "591: # endif",
          "",
          "---------------"
        ],
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3300: EXTERN char e_could_not_check_for_pending_sigalrm_str[]",
          "3301:  INIT(= N_(\"E1289: Could not check for pending SIGALRM: %s\"));",
          "3302: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3303: #ifdef FEAT_EVAL",
          "3304: EXTERN char e_substitute_nesting_too_deep[]",
          "3305:  INIT(= N_(\"E1290: substitute nesting too deep\"));",
          "3306: #endif",
          "",
          "---------------"
        ],
        "src/ex_cmds.c||src/ex_cmds.c": [
          "File: src/ex_cmds.c -> src/ex_cmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3701:     int  start_nsubs;",
          "3702: #ifdef FEAT_EVAL",
          "3703:     int  save_ma = 0;",
          "3704: #endif",
          "3706:     cmd = eap->arg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3704:     int  save_sandbox = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4404: #ifdef FEAT_EVAL",
          "4405:   save_ma = curbuf->b_p_ma;",
          "4406:   if (subflags.do_count)",
          "4407:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4407:   save_sandbox = sandbox;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4431:   subflags = subflags_save;",
          "4433:   {",
          "4434:       curbuf->b_p_ma = save_ma;",
          "4437:       goto skip;",
          "4438:   }",
          "4439: #endif",
          "",
          "[Removed Lines]",
          "4432:   if (aborting() || subflags.do_count)",
          "4435:       if (sandbox > 0)",
          "4436:    sandbox--;",
          "",
          "[Added Lines]",
          "4435:   if (sublen == 0 || aborting() || subflags.do_count)",
          "4438:       sandbox = save_sandbox;",
          "",
          "---------------"
        ],
        "src/proto/regexp.pro||src/proto/regexp.pro": [
          "File: src/proto/regexp.pro -> src/proto/regexp.pro",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: char_u *regtilde(char_u *source, int magic);",
          "11: int vim_regsub(regmatch_T *rmp, char_u *source, typval_T *expr, char_u *dest, int destlen, int flags);",
          "12: int vim_regsub_multi(regmmatch_T *rmp, linenr_T lnum, char_u *source, char_u *dest, int destlen, int flags);",
          "13: char_u *reg_submatch(int no);",
          "14: list_T *reg_submatch_list(int no);",
          "15: int vim_regcomp_had_eol(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: void free_resub_eval_result(void);",
          "",
          "---------------"
        ],
        "src/regexp.c||src/regexp.c": [
          "File: src/regexp.c -> src/regexp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1922:     return result;",
          "1923: }",
          "1925:     static int",
          "1926: vim_regsub_both(",
          "1927:     char_u *source,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1925: #if defined(FEAT_EVAL) || defined(PROTO)",
          "1927: # define MAX_REGSUB_NESTING 4",
          "1928: static char_u   *eval_result[MAX_REGSUB_NESTING] = {NULL, NULL, NULL, NULL};",
          "1930: # if defined(EXITFREE) || defined(PROTO)",
          "1931:     void",
          "1932: free_resub_eval_result(void)",
          "1933: {",
          "1934:     int i;",
          "1936:     for (i = 0; i < MAX_REGSUB_NESTING; ++i)",
          "1937:  VIM_CLEAR(eval_result[i]);",
          "1938: }",
          "1939: # endif",
          "1940: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1941:     linenr_T clnum = 0; // init for GCC",
          "1942:     int  len = 0; // init for GCC",
          "1943: #ifdef FEAT_EVAL",
          "1945: #endif",
          "1946:     int  copy = flags & REGSUB_COPY;",
          "",
          "[Removed Lines]",
          "1944:     static char_u   *eval_result = NULL;",
          "",
          "[Added Lines]",
          "1961:     static int  nesting = 0;",
          "1962:     int  nested;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1953:     }",
          "1954:     if (prog_magic_wrong())",
          "1955:  return 0;",
          "1956:     src = source;",
          "1957:     dst = dest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1974: #ifdef FEAT_EVAL",
          "1975:     if (nesting == MAX_REGSUB_NESTING)",
          "1976:     {",
          "1977:  emsg(_(e_substitute_nesting_too_deep));",
          "1978:  return 0;",
          "1979:     }",
          "1980:     nested = nesting;",
          "1981: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1970:  if (copy)",
          "1971:  {",
          "1973:      {",
          "1977:      }",
          "1978:  }",
          "1979:  else",
          "",
          "[Removed Lines]",
          "1972:      if (eval_result != NULL)",
          "1974:   STRCPY(dest, eval_result);",
          "1975:   dst += STRLEN(eval_result);",
          "1976:   VIM_CLEAR(eval_result);",
          "",
          "[Added Lines]",
          "1998:      if (eval_result[nested] != NULL)",
          "2000:   STRCPY(dest, eval_result[nested]);",
          "2001:   dst += STRLEN(eval_result[nested]);",
          "2002:   VIM_CLEAR(eval_result[nested]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1981:      int      prev_can_f_submatch = can_f_submatch;",
          "1982:      regsubmatch_T   rsm_save;",
          "",
          "[Removed Lines]",
          "1984:      VIM_CLEAR(eval_result);",
          "",
          "[Added Lines]",
          "2010:      VIM_CLEAR(eval_result[nested]);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1995:      rsm.sm_maxline = rex.reg_maxline;",
          "1996:      rsm.sm_line_lbr = rex.reg_line_lbr;",
          "1998:      if (expr != NULL)",
          "1999:      {",
          "2000:   typval_T argv[2];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2027:      ++nesting;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2035:   if (rettv.v_type == VAR_UNKNOWN)",
          "2038:   else",
          "2039:   {",
          "2043:   }",
          "2044:   clear_tv(&rettv);",
          "2045:      }",
          "2046:      else if (substitute_instr != NULL)",
          "2049:      else",
          "2053:      {",
          "2054:   int had_backslash = FALSE;",
          "2057:   {",
          "",
          "[Removed Lines]",
          "2037:       eval_result = NULL;",
          "2040:       eval_result = tv_get_string_buf_chk(&rettv, buf);",
          "2041:       if (eval_result != NULL)",
          "2042:    eval_result = vim_strsave(eval_result);",
          "2048:   eval_result = exe_substitute_instr();",
          "2050:   eval_result = eval_to_string(source + 2, TRUE);",
          "2052:      if (eval_result != NULL)",
          "2056:   for (s = eval_result; *s != NUL; MB_PTR_ADV(s))",
          "",
          "[Added Lines]",
          "2068:       eval_result[nested] = NULL;",
          "2071:       eval_result[nested] = tv_get_string_buf_chk(&rettv, buf);",
          "2072:       if (eval_result[nested] != NULL)",
          "2073:    eval_result[nested] = vim_strsave(eval_result[nested]);",
          "2079:   eval_result[nested] = exe_substitute_instr();",
          "2081:   eval_result[nested] = eval_to_string(source + 2, TRUE);",
          "2082:      --nesting;",
          "2084:      if (eval_result[nested] != NULL)",
          "2088:   for (s = eval_result[nested]; *s != NUL; MB_PTR_ADV(s))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2077:   if (had_backslash && (flags & REGSUB_BACKSLASH))",
          "2078:   {",
          "2081:       if (s != NULL)",
          "2082:       {",
          "2085:       }",
          "2086:   }",
          "2089:      }",
          "2091:      can_f_submatch = prev_can_f_submatch;",
          "",
          "[Removed Lines]",
          "2080:       s = vim_strsave_escaped(eval_result, (char_u *)\"\\\\\");",
          "2083:    vim_free(eval_result);",
          "2084:    eval_result = s;",
          "2088:   dst += STRLEN(eval_result);",
          "",
          "[Added Lines]",
          "2112:       s = vim_strsave_escaped(eval_result[nested], (char_u *)\"\\\\\");",
          "2115:    vim_free(eval_result[nested]);",
          "2116:    eval_result[nested] = s;",
          "2120:   dst += STRLEN(eval_result[nested]);",
          "",
          "---------------"
        ],
        "src/testdir/test_substitute.vim||src/testdir/test_substitute.vim": [
          "File: src/testdir/test_substitute.vim -> src/testdir/test_substitute.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:     ~",
          "996:     s/",
          "997:   endfunc",
          "1000:   delfunc Repl",
          "1001:   bwipe!",
          "",
          "[Removed Lines]",
          "998:   silent!  s/\\%')/\\=Repl()",
          "",
          "[Added Lines]",
          "998:   silent! s/\\%')/\\=Repl()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1359:   bw!",
          "1360: endfunc",
          "1362: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1362: \" This should be done last to reveal a memory leak when vim_regsub_both() is",
          "1363: \" called to evaluate an expression but it is not used in a second call.",
          "1364: func Test_z_substitute_expr_leak()",
          "1365:   func SubExpr()",
          "1366:     ~n",
          "1367:   endfunc",
          "1368:   silent! s/\\%')/\\=SubExpr()",
          "1369:   delfunc SubExpr",
          "1370: endfunc",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "735: static int included_patches[] =",
          "738:     5145,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     5146,",
          "",
          "---------------"
        ]
      }
    }
  ]
}