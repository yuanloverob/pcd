{
  "cve_id": "CVE-2013-0166",
  "cve_desc": "OpenSSL before 0.9.8y, 1.0.0 before 1.0.0k, and 1.0.1 before 1.0.1d does not properly perform signature verification for OCSP responses, which allows remote OCSP servers to cause a denial of service (NULL pointer dereference and application crash) via an invalid key.",
  "repo": "openssl/openssl",
  "patch_hash": "b48310627d1fdc58f64ccf208ac82c732e654dca",
  "patch_info": {
    "commit_hash": "b48310627d1fdc58f64ccf208ac82c732e654dca",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/b48310627d1fdc58f64ccf208ac82c732e654dca",
    "files": [
      "CHANGES",
      "crypto/asn1/a_verify.c",
      "crypto/ocsp/ocsp_vfy.c"
    ],
    "message": "Don't try and verify signatures if key is NULL (CVE-2013-0166) Add additional check to catch this in ASN1_item_verify too. (cherry picked from commit 66e8211c0b1347970096e04b18aa52567c325200)",
    "before_after_code_files": [
      "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
      "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
    ]
  },
  "patch_diff": {
    "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
      "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:  int mdnid, pknid;",
      "143:  EVP_MD_CTX_init(&ctx);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:  if (!pkey)",
      "144:   {",
      "145:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_PASSED_NULL_PARAMETER);",
      "146:   return -1;",
      "147:   }",
      "",
      "---------------"
    ],
    "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c": [
      "File: crypto/ocsp/ocsp_vfy.c -> crypto/ocsp/ocsp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:   {",
      "92:   EVP_PKEY *skey;",
      "93:   skey = X509_get_pubkey(signer);",
      "97:    {",
      "98:    OCSPerr(OCSP_F_OCSP_BASIC_VERIFY, OCSP_R_SIGNATURE_FAILURE);",
      "99:    goto end;",
      "",
      "[Removed Lines]",
      "94:   ret = OCSP_BASICRESP_verify(bs, skey, 0);",
      "95:   EVP_PKEY_free(skey);",
      "96:   if(ret <= 0)",
      "",
      "[Added Lines]",
      "94:   if (skey)",
      "95:    {",
      "96:    ret = OCSP_BASICRESP_verify(bs, skey, 0);",
      "97:    EVP_PKEY_free(skey);",
      "98:    }",
      "99:   if(!skey || ret <= 0)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e9b4b8afbd129adc18d3fe71ca2ab34fe61d8640",
      "candidate_info": {
        "commit_hash": "e9b4b8afbd129adc18d3fe71ca2ab34fe61d8640",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e9b4b8afbd129adc18d3fe71ca2ab34fe61d8640",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/ocsp/ocsp_vfy.c"
        ],
        "message": "Don't try and verify signatures if key is NULL (CVE-2013-0166) Add additional check to catch this in ASN1_item_verify too. (cherry picked from commit 66e8211c0b1347970096e04b18aa52567c325200)",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:  int mdnid, pknid;",
          "143:  EVP_MD_CTX_init(&ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:  if (!pkey)",
          "144:   {",
          "145:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_PASSED_NULL_PARAMETER);",
          "146:   return -1;",
          "147:   }",
          "",
          "---------------"
        ],
        "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c": [
          "File: crypto/ocsp/ocsp_vfy.c -> crypto/ocsp/ocsp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   {",
          "92:   EVP_PKEY *skey;",
          "93:   skey = X509_get_pubkey(signer);",
          "97:    {",
          "98:    OCSPerr(OCSP_F_OCSP_BASIC_VERIFY, OCSP_R_SIGNATURE_FAILURE);",
          "99:    goto end;",
          "",
          "[Removed Lines]",
          "94:   ret = OCSP_BASICRESP_verify(bs, skey, 0);",
          "95:   EVP_PKEY_free(skey);",
          "96:   if(ret <= 0)",
          "",
          "[Added Lines]",
          "94:   if (skey)",
          "95:    {",
          "96:    ret = OCSP_BASICRESP_verify(bs, skey, 0);",
          "97:    EVP_PKEY_free(skey);",
          "98:    }",
          "99:   if(!skey || ret <= 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "66e8211c0b1347970096e04b18aa52567c325200",
      "candidate_info": {
        "commit_hash": "66e8211c0b1347970096e04b18aa52567c325200",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/66e8211c0b1347970096e04b18aa52567c325200",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/ocsp/ocsp_vfy.c"
        ],
        "message": "Don't try and verify signatures if key is NULL (CVE-2013-0166) Add additional check to catch this in ASN1_item_verify too.",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
            "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:  unsigned char *buf_in=NULL;",
          "139:  int ret= -1,i,inl;",
          "141:  EVP_MD_CTX_init(&ctx);",
          "142:  i=OBJ_obj2nid(a->algorithm);",
          "143:  type=EVP_get_digestbyname(OBJ_nid2sn(i));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:  if (!pkey)",
          "142:   {",
          "143:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_PASSED_NULL_PARAMETER);",
          "144:   return -1;",
          "145:   }",
          "",
          "---------------"
        ],
        "crypto/ocsp/ocsp_vfy.c||crypto/ocsp/ocsp_vfy.c": [
          "File: crypto/ocsp/ocsp_vfy.c -> crypto/ocsp/ocsp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   {",
          "92:   EVP_PKEY *skey;",
          "93:   skey = X509_get_pubkey(signer);",
          "97:    {",
          "98:    OCSPerr(OCSP_F_OCSP_BASIC_VERIFY, OCSP_R_SIGNATURE_FAILURE);",
          "99:    goto end;",
          "",
          "[Removed Lines]",
          "94:   ret = OCSP_BASICRESP_verify(bs, skey, 0);",
          "95:   EVP_PKEY_free(skey);",
          "96:   if(ret <= 0)",
          "",
          "[Added Lines]",
          "94:   if (skey)",
          "95:    {",
          "96:    ret = OCSP_BASICRESP_verify(bs, skey, 0);",
          "97:    EVP_PKEY_free(skey);",
          "98:    }",
          "99:   if(!skey || ret <= 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "684400ce192dac51df3d3e92b61830a6ef90be3e",
      "candidate_info": {
        "commit_hash": "684400ce192dac51df3d3e92b61830a6ef90be3e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/684400ce192dac51df3d3e92b61830a6ef90be3e",
        "files": [
          "CHANGES",
          "crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_asn1.c",
          "crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c"
        ],
        "message": "Fix various certificate fingerprint issues.\n\nBy using non-DER or invalid encodings outside the signed portion of a\ncertificate the fingerprint can be changed without breaking the signature.\nAlthough no details of the signed portion of the certificate can be changed\nthis can cause problems with some applications: e.g. those using the\ncertificate fingerprint for blacklists.\n\n1. Reject signatures with non zero unused bits.\n\nIf the BIT STRING containing the signature has non zero unused bits reject\nthe signature. All current signature algorithms require zero unused bits.\n\n2. Check certificate algorithm consistency.\n\nCheck the AlgorithmIdentifier inside TBS matches the one in the\ncertificate signature. NB: this will result in signature failure\nerrors for some broken certificates.\n\n3. Check DSA/ECDSA signatures use DER.\n\nReencode DSA/ECDSA signatures and compare with the original received\nsignature. Return an error if there is a mismatch.\n\nThis will reject various cases including garbage after signature\n(thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS\nprogram for discovering this case) and use of BER or invalid ASN.1 INTEGERs\n(negative or with leading zeroes).\n\nCVE-2014-8275\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c",
          "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c",
          "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c",
          "crypto/x509/x_all.c||crypto/x509/x_all.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   ASN1err(ASN1_F_ASN1_VERIFY,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);",
          "91:   goto err;",
          "92:   }",
          "94:  inl=i2d(data,NULL);",
          "95:  buf_in=OPENSSL_malloc((unsigned int)inl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "95:   {",
          "96:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "97:   goto err;",
          "98:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:   return -1;",
          "151:   }",
          "153:  EVP_MD_CTX_init(&ctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "160:   {",
          "161:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "162:   return -1;",
          "163:   }",
          "",
          "---------------"
        ],
        "crypto/dsa/dsa_asn1.c||crypto/dsa/dsa_asn1.c": [
          "File: crypto/dsa/dsa_asn1.c -> crypto/dsa/dsa_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:       const unsigned char *sigbuf, int siglen, DSA *dsa)",
          "178:  {",
          "179:  DSA_SIG *s;",
          "180:  int ret=-1;",
          "182:  s = DSA_SIG_new();",
          "183:  if (s == NULL) return(ret);",
          "185:  ret=DSA_do_verify(dgst,dgst_len,s,dsa);",
          "186: err:",
          "187:  DSA_SIG_free(s);",
          "188:  return(ret);",
          "189:  }",
          "",
          "[Removed Lines]",
          "184:  if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;",
          "",
          "[Added Lines]",
          "180:  const unsigned char *p = sigbuf;",
          "181:  unsigned char *der = NULL;",
          "182:  int derlen = -1;",
          "187:  if (d2i_DSA_SIG(&s,&p,siglen) == NULL) goto err;",
          "189:  derlen = i2d_DSA_SIG(s, &der);",
          "190:  if (derlen != siglen || memcmp(sigbuf, der, derlen))",
          "191:   goto err;",
          "194:  if (derlen > 0)",
          "195:   {",
          "196:   OPENSSL_cleanse(der, derlen);",
          "197:   OPENSSL_free(der);",
          "198:   }",
          "",
          "---------------"
        ],
        "crypto/ecdsa/ecs_vrf.c||crypto/ecdsa/ecs_vrf.c": [
          "File: crypto/ecdsa/ecs_vrf.c -> crypto/ecdsa/ecs_vrf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #include \"ecs_locl.h\"",
          "60: #ifndef OPENSSL_NO_ENGINE",
          "61: #include <openssl/engine.h>",
          "62: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #include \"cryptlib.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:   const unsigned char *sigbuf, int sig_len, EC_KEY *eckey)",
          "87:   {",
          "88:  ECDSA_SIG *s;",
          "89:  int ret=-1;",
          "91:  s = ECDSA_SIG_new();",
          "92:  if (s == NULL) return(ret);",
          "94:  ret=ECDSA_do_verify(dgst, dgst_len, s, eckey);",
          "95: err:",
          "96:  ECDSA_SIG_free(s);",
          "97:  return(ret);",
          "98:  }",
          "",
          "[Removed Lines]",
          "93:  if (d2i_ECDSA_SIG(&s, &sigbuf, sig_len) == NULL) goto err;",
          "",
          "[Added Lines]",
          "90:  const unsigned char *p = sigbuf;",
          "91:  unsigned char *der = NULL;",
          "92:  int derlen = -1;",
          "97:  if (d2i_ECDSA_SIG(&s, &p, sig_len) == NULL) goto err;",
          "99:  derlen = i2d_ECDSA_SIG(s, &der);",
          "100:  if (derlen != sig_len || memcmp(sigbuf, der, derlen))",
          "101:   goto err;",
          "104:  if (derlen > 0)",
          "105:   {",
          "106:   OPENSSL_cleanse(der, derlen);",
          "107:   OPENSSL_free(der);",
          "108:   }",
          "",
          "---------------"
        ],
        "crypto/x509/x_all.c||crypto/x509/x_all.c": [
          "File: crypto/x509/x_all.c -> crypto/x509/x_all.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: int X509_verify(X509 *a, EVP_PKEY *r)",
          "75:  {",
          "76:  return(ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF),a->sig_alg,",
          "77:   a->signature,a->cert_info,r));",
          "78:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:  if (X509_ALGOR_cmp(a->sig_alg, a->cert_info->signature))",
          "77:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9c63b0180f658561f16afeb64e88d125d0ab4ca",
      "candidate_info": {
        "commit_hash": "c9c63b0180f658561f16afeb64e88d125d0ab4ca",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c9c63b0180f658561f16afeb64e88d125d0ab4ca",
        "files": [
          "crypto/asn1/a_verify.c"
        ],
        "message": "ASN1_verify, ASN1_item_verify: cleanse and free buf_in on error path\n\nSigned-off-by: Kurt Roeckx <kurt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:  p=buf_in;",
          "103:  i2d(data,&p);",
          "106:   {",
          "107:   ASN1err(ASN1_F_ASN1_VERIFY,ERR_R_EVP_LIB);",
          "109:   goto err;",
          "110:   }",
          "115:  if (EVP_VerifyFinal(&ctx,(unsigned char *)signature->data,",
          "116:    (unsigned int)signature->length,pkey) <= 0)",
          "",
          "[Removed Lines]",
          "104:  if (!EVP_VerifyInit_ex(&ctx,type, NULL)",
          "105:   || !EVP_VerifyUpdate(&ctx,(unsigned char *)buf_in,inl))",
          "108:   ret=0;",
          "112:  OPENSSL_cleanse(buf_in,(unsigned int)inl);",
          "113:  OPENSSL_free(buf_in);",
          "",
          "[Added Lines]",
          "104:  ret=",
          "105:   EVP_VerifyInit_ex(&ctx,type, NULL)",
          "106:   && EVP_VerifyUpdate(&ctx,(unsigned char *)buf_in,inl);",
          "108:  OPENSSL_cleanse(buf_in,(unsigned int)inl);",
          "109:  OPENSSL_free(buf_in);",
          "111:  if (!ret)",
          "116:  ret = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:   goto err;",
          "206:   }",
          "209:   {",
          "210:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY,ERR_R_EVP_LIB);",
          "212:   goto err;",
          "213:   }",
          "218:  if (EVP_DigestVerifyFinal(&ctx,signature->data,",
          "219:    (size_t)signature->length) <= 0)",
          "",
          "[Removed Lines]",
          "208:  if (!EVP_DigestVerifyUpdate(&ctx,buf_in,inl))",
          "211:   ret=0;",
          "215:  OPENSSL_cleanse(buf_in,(unsigned int)inl);",
          "216:  OPENSSL_free(buf_in);",
          "",
          "[Added Lines]",
          "212:  ret = EVP_DigestVerifyUpdate(&ctx,buf_in,inl);",
          "214:  OPENSSL_cleanse(buf_in,(unsigned int)inl);",
          "215:  OPENSSL_free(buf_in);",
          "217:  if (!ret)",
          "222:  ret = -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb62ab4b17818fe66d2fed0a7fe71969131c811b",
      "candidate_info": {
        "commit_hash": "cb62ab4b17818fe66d2fed0a7fe71969131c811b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cb62ab4b17818fe66d2fed0a7fe71969131c811b",
        "files": [
          "crypto/asn1/a_verify.c"
        ],
        "message": "use correct function name\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
          ],
          "candidate": [
            "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/a_verify.c||crypto/asn1/a_verify.c": [
          "File: crypto/asn1/a_verify.c -> crypto/asn1/a_verify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:  if (signature->type == V_ASN1_BIT_STRING && signature->flags & 0x7)",
          "160:   {",
          "162:   return -1;",
          "163:   }",
          "",
          "[Removed Lines]",
          "161:   ASN1err(ASN1_F_ASN1_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "",
          "[Added Lines]",
          "161:   ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ASN1_R_INVALID_BIT_STRING_BITS_LEFT);",
          "",
          "---------------"
        ]
      }
    }
  ]
}