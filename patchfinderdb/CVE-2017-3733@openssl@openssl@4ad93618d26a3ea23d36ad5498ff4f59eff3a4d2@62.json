{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3258e29a385f4800440a96a16889035a83aff437",
      "candidate_info": {
        "commit_hash": "3258e29a385f4800440a96a16889035a83aff437",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3258e29a385f4800440a96a16889035a83aff437",
        "files": [
          "crypto/evp/e_aes.c",
          "crypto/evp/e_des3.c",
          "crypto/evp/evp_enc.c",
          "crypto/evp/evp_err.c",
          "crypto/evp/evp_locl.h",
          "include/openssl/evp.h",
          "test/evp_test.c"
        ],
        "message": "Fix the overlapping check for fragmented \"Update\" operations\n\nWhen doing in place encryption the overlapping buffer check can fail\nincorrectly where we have done a partial block \"Update\" operation. This\nfixes things to take account of any pending partial blocks.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2275)\n(cherry picked from commit 7141ba31969d0b378d08104a51f8f99b9187b9d5)",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
          "crypto/evp/e_des3.c||crypto/evp/e_des3.c",
          "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c",
          "crypto/evp/evp_err.c||crypto/evp/evp_err.c",
          "crypto/evp/evp_locl.h||crypto/evp/evp_locl.h",
          "include/openssl/evp.h||include/openssl/evp.h",
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"internal/evp_int.h\"",
          "18: #include \"modes_lcl.h\"",
          "19: #include <openssl/rand.h>",
          "21: typedef struct {",
          "22:     union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include \"evp_locl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2234:     if (!pad && inlen & 0x7)",
          "2235:         return -1;",
          "2236:     if (!out) {",
          "2237:         if (EVP_CIPHER_CTX_encrypting(ctx)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2237:     if (is_partially_overlapping(out, in, inlen)) {",
          "2238:         EVPerr(EVP_F_AES_WRAP_CIPHER, EVP_R_PARTIALLY_OVERLAPPING);",
          "2239:         return 0;",
          "2240:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2551:         } else {",
          "2552:             buf = octx->data_buf;",
          "2553:             buf_len = &(octx->data_buf_len);",
          "2554:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2560:             if (is_partially_overlapping(out + *buf_len, in, len)) {",
          "2561:                 EVPerr(EVP_F_AES_OCB_CIPHER, EVP_R_PARTIALLY_OVERLAPPING);",
          "2562:                 return 0;",
          "2563:             }",
          "",
          "---------------"
        ],
        "crypto/evp/e_des3.c||crypto/evp/e_des3.c": [
          "File: crypto/evp/e_des3.c -> crypto/evp/e_des3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: # include \"internal/evp_int.h\"",
          "16: # include <openssl/des.h>",
          "17: # include <openssl/rand.h>",
          "19: typedef struct {",
          "20:     union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: # include \"evp_locl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:     if (inl >= EVP_MAXCHUNK || inl % 8)",
          "394:         return -1;",
          "395:     if (EVP_CIPHER_CTX_encrypting(ctx))",
          "396:         return des_ede3_wrap(ctx, out, in, inl);",
          "397:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:     if (is_partially_overlapping(out, in, inl)) {",
          "398:         EVPerr(EVP_F_DES_EDE3_WRAP_CIPHER, EVP_R_PARTIALLY_OVERLAPPING);",
          "399:         return 0;",
          "400:     }",
          "",
          "---------------"
        ],
        "crypto/evp/evp_enc.c||crypto/evp/evp_enc.c": [
          "File: crypto/evp/evp_enc.c -> crypto/evp/evp_enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "276: # define PTRDIFF_T size_t",
          "277: #endif",
          "281: {",
          "282:     PTRDIFF_T diff = (PTRDIFF_T)ptr1-(PTRDIFF_T)ptr2;",
          "",
          "[Removed Lines]",
          "279: static int is_partially_overlapping(const void *ptr1, const void *ptr2,",
          "280:                                     int len)",
          "",
          "[Added Lines]",
          "279: int is_partially_overlapping(const void *ptr1, const void *ptr2, int len)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296: {",
          "297:     int i, j, bl;",
          "299:     if (ctx->cipher->flags & EVP_CIPH_FLAG_CUSTOM_CIPHER) {",
          "301:             EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "302:             return 0;",
          "303:         }",
          "",
          "[Removed Lines]",
          "300:         if (is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "298:     bl = ctx->cipher->block_size;",
          "302:         if (bl == 1 && is_partially_overlapping(out, in, inl)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:         return inl == 0;",
          "316:     }",
          "318:         EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "319:         return 0;",
          "320:     }",
          "",
          "[Removed Lines]",
          "317:     if (is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "319:     if (is_partially_overlapping(out + ctx->buf_len, in, inl)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329:         }",
          "330:     }",
          "331:     i = ctx->buf_len;",
          "333:     OPENSSL_assert(bl <= (int)sizeof(ctx->buf));",
          "334:     if (i != 0) {",
          "335:         if (bl - i > inl) {",
          "",
          "[Removed Lines]",
          "332:     bl = ctx->cipher->block_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "342:             memcpy(&(ctx->buf[i]), in, j);",
          "343:             inl -= j;",
          "344:             in += j;",
          "349:             if (!ctx->cipher->do_cipher(ctx, out, ctx->buf, bl))",
          "350:                 return 0;",
          "351:             out += bl;",
          "",
          "[Removed Lines]",
          "345:             if (is_partially_overlapping(out, in, bl)) {",
          "346:          EVPerr(EVP_F_EVP_ENCRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "347:                 return 0;",
          "348:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "422:     int fix_len;",
          "423:     unsigned int b;",
          "425:     if (ctx->cipher->flags & EVP_CIPH_FLAG_CUSTOM_CIPHER) {",
          "427:             EVPerr(EVP_F_EVP_DECRYPTUPDATE, EVP_R_PARTIALLY_OVERLAPPING);",
          "428:             return 0;",
          "429:         }",
          "",
          "[Removed Lines]",
          "426:         if (is_partially_overlapping(out, in, inl)) {",
          "",
          "[Added Lines]",
          "422:     b = ctx->cipher->block_size;",
          "425:         if (b == 1 && is_partially_overlapping(out, in, inl)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "445:     if (ctx->flags & EVP_CIPH_NO_PADDING)",
          "446:         return EVP_EncryptUpdate(ctx, out, outl, in, inl);",
          "449:     OPENSSL_assert(b <= sizeof ctx->final);",
          "451:     if (ctx->final_used) {",
          "",
          "[Removed Lines]",
          "448:     b = ctx->cipher->block_size;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/evp/evp_err.c||crypto/evp/evp_err.c": [
          "File: crypto/evp/evp_err.c -> crypto/evp/evp_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: static ERR_STRING_DATA EVP_str_functs[] = {",
          "22:     {ERR_FUNC(EVP_F_AESNI_INIT_KEY), \"aesni_init_key\"},",
          "23:     {ERR_FUNC(EVP_F_AES_INIT_KEY), \"aes_init_key\"},",
          "24:     {ERR_FUNC(EVP_F_AES_T4_INIT_KEY), \"aes_t4_init_key\"},",
          "25:     {ERR_FUNC(EVP_F_ALG_MODULE_INIT), \"alg_module_init\"},",
          "26:     {ERR_FUNC(EVP_F_CAMELLIA_INIT_KEY), \"camellia_init_key\"},",
          "27:     {ERR_FUNC(EVP_F_CHACHA20_POLY1305_CTRL), \"chacha20_poly1305_ctrl\"},",
          "28:     {ERR_FUNC(EVP_F_CMLL_T4_INIT_KEY), \"cmll_t4_init_key\"},",
          "29:     {ERR_FUNC(EVP_F_DO_SIGVER_INIT), \"do_sigver_init\"},",
          "30:     {ERR_FUNC(EVP_F_EVP_CIPHERINIT_EX), \"EVP_CipherInit_ex\"},",
          "31:     {ERR_FUNC(EVP_F_EVP_CIPHER_CTX_COPY), \"EVP_CIPHER_CTX_copy\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     {ERR_FUNC(EVP_F_AES_OCB_CIPHER), \"aes_ocb_cipher\"},",
          "26:     {ERR_FUNC(EVP_F_AES_WRAP_CIPHER), \"aes_wrap_cipher\"},",
          "31:     {ERR_FUNC(EVP_F_DES_EDE3_WRAP_CIPHER), \"des_ede3_wrap_cipher\"},",
          "",
          "---------------"
        ],
        "crypto/evp/evp_locl.h||crypto/evp/evp_locl.h": [
          "File: crypto/evp/evp_locl.h -> crypto/evp/evp_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: typedef struct evp_pbe_st EVP_PBE_CTL;",
          "66: DEFINE_STACK_OF(EVP_PBE_CTL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: int is_partially_overlapping(const void *ptr1, const void *ptr2, int len);",
          "",
          "---------------"
        ],
        "include/openssl/evp.h||include/openssl/evp.h": [
          "File: include/openssl/evp.h -> include/openssl/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1456: # define EVP_F_AESNI_INIT_KEY                             165",
          "1457: # define EVP_F_AES_INIT_KEY                               133",
          "1458: # define EVP_F_AES_T4_INIT_KEY                            178",
          "1459: # define EVP_F_ALG_MODULE_INIT                            177",
          "1460: # define EVP_F_CAMELLIA_INIT_KEY                          159",
          "1461: # define EVP_F_CHACHA20_POLY1305_CTRL                     182",
          "1462: # define EVP_F_CMLL_T4_INIT_KEY                           179",
          "1463: # define EVP_F_DO_SIGVER_INIT                             161",
          "1464: # define EVP_F_EVP_CIPHERINIT_EX                          123",
          "1465: # define EVP_F_EVP_CIPHER_CTX_COPY                        163",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1458: # define EVP_F_AES_OCB_CIPHER                             169",
          "1460: # define EVP_F_AES_WRAP_CIPHER                            170",
          "1465: # define EVP_F_DES_EDE3_WRAP_CIPHER                       171",
          "",
          "---------------"
        ],
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1101:         static char aux_err[64];",
          "1102:         t->aux_err = aux_err;",
          "1103:         for (inp_misalign = (size_t)-1; inp_misalign != 2; inp_misalign++) {",
          "1107:             if (inp_misalign == (size_t)-1) {",
          "1109:                 BIO_snprintf(aux_err, sizeof(aux_err),",
          "",
          "[Removed Lines]",
          "1104:             if (frag && inp_misalign == (size_t)-1)",
          "1105:                  continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a59b90bf491410f1f2bc4540cc21f1980fd14c5b",
      "candidate_info": {
        "commit_hash": "a59b90bf491410f1f2bc4540cc21f1980fd14c5b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a59b90bf491410f1f2bc4540cc21f1980fd14c5b",
        "files": [
          "crypto/bn/asm/x86_64-mont5.pl"
        ],
        "message": "bn/asm/x86_64-mont5.pl: fix carry bug in bn_sqr8x_internal.\n\nCVE-2017-3732\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/bn/asm/x86_64-mont5.pl||crypto/bn/asm/x86_64-mont5.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/asm/x86_64-mont5.pl||crypto/bn/asm/x86_64-mont5.pl": [
          "File: crypto/bn/asm/x86_64-mont5.pl -> crypto/bn/asm/x86_64-mont5.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "1934:  mov \\$8,%ecx",
          "1935:  jmp .L8x_tail",
          "1937: .align 32",
          "1938: .L8x_tail_done:",
          "1939:  add (%rdx),%r8  # can this overflow?",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1937: .align 32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1941:  adc \\$0,%r10",
          "1942:  adc \\$0,%r11",
          "1943:  adc \\$0,%r12",
          "1948:      # of multiplication",
          "1949:  xor %rax,%rax",
          "",
          "[Removed Lines]",
          "1944:  adc \\$0,%r13",
          "1945:  adc \\$0,%r14",
          "1946:  adc \\$0,%r15  # can't overflow, because we",
          "1947:      # started with \"overhung\" part",
          "",
          "[Added Lines]",
          "1945:  adc \\$0,%r13",
          "1946:  adc \\$0,%r14",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3384:  lea 8*8($tptr),$tptr",
          "3385:  sbb %rax,%rax",
          "3386:  sub \\$8,%rcx  # mov \\$-8,%rcx",
          "3388:  xor $carry,$carry  # of=0, cf=0",
          "3389:  mov %rax,16+8(%rsp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3392: .align 32",
          "3393: .Lsqrx8x_tail_done:",
          "3398:  adc \\$0,%r12",
          "3399:  adc \\$0,%r13",
          "3400:  adc \\$0,%r14",
          "",
          "[Removed Lines]",
          "3394:  add 24+8(%rsp),%r8  # can this overflow?",
          "3395:  adc \\$0,%r9",
          "3396:  adc \\$0,%r10",
          "3397:  adc \\$0,%r11",
          "",
          "[Added Lines]",
          "3394:  add 24+8(%rsp),%r8  # can this overflow?",
          "3395:  adc \\$0,%r9",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3409:   movq %xmm3,%rcx",
          "3410:  adc 8*1($tptr),%r9",
          "3411:   mov 8*7($nptr),$carry",
          "3413:  adc 8*2($tptr),%r10",
          "3414:  adc 8*3($tptr),%r11",
          "3415:  adc 8*4($tptr),%r12",
          "",
          "[Removed Lines]",
          "3412:   movq %xmm2,$nptr  # restore $nptr",
          "",
          "[Added Lines]",
          "3410:   movq %xmm2,$nptr  # restore $nptr",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cee0cdbc618d89f6e9eb14c360be8230b8397095",
      "candidate_info": {
        "commit_hash": "cee0cdbc618d89f6e9eb14c360be8230b8397095",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cee0cdbc618d89f6e9eb14c360be8230b8397095",
        "files": [
          "ssl/ssl_sess.c"
        ],
        "message": "Fix a ssl session leak due to OOM in lh_SSL_SESSION_insert\n\n- s == NULL can mean c is a new session *or* lh_insert was\n  unable to create a hash entry.\n- use lh_SSL_SESSION_retrieve to check for this error condition.\n- If it happens simply remove the extra reference again.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2138)\n(cherry picked from commit 38088ce9934a90d4aea486edbff864f3935342e6)",
        "before_after_code_files": [
          "ssl/ssl_sess.c||ssl/ssl_sess.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "662:         s = NULL;",
          "663:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:     } else if (s == NULL &&",
          "664:                lh_SSL_SESSION_retrieve(ctx->sessions, c) == NULL) {",
          "671:         s = c;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ade16edd5260e7d19fe1ac6fd7eb016dc7cbea7",
      "candidate_info": {
        "commit_hash": "9ade16edd5260e7d19fe1ac6fd7eb016dc7cbea7",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9ade16edd5260e7d19fe1ac6fd7eb016dc7cbea7",
        "files": [
          "crypto/bn/bn_gcd.c"
        ],
        "message": "Refomat a few comments on 80 cols\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3066)\n(cherry picked from commit cbe952418376a25acd872db4281a0b09735001f1)",
        "before_after_code_files": [
          "crypto/bn/bn_gcd.c||crypto/bn/bn_gcd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_gcd.c||crypto/bn/bn_gcd.c": [
          "File: crypto/bn/bn_gcd.c -> crypto/bn/bn_gcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:             A = B;",
          "",
          "[Removed Lines]",
          "351:             tmp = A;            /* keep the BIGNUM object, the value does not",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:                     goto err;",
          "404:             }",
          "408:             Y = X;",
          "409:             X = tmp;",
          "410:             sign = -sign;",
          "",
          "[Removed Lines]",
          "406:             M = Y;              /* keep the BIGNUM object, the value does not",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2cefab06a9e1b8d9a21d030754f62dfbb199950",
      "candidate_info": {
        "commit_hash": "e2cefab06a9e1b8d9a21d030754f62dfbb199950",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e2cefab06a9e1b8d9a21d030754f62dfbb199950",
        "files": [
          "test/bad_dtls_test.c"
        ],
        "message": "Solution proposal for issue #1647.\n\nAvoid a memory alignment issue.\n\nSigned-off-by: Matthias Kraft <Matthias.Kraft@softwareag.com>\nCLA: trivial\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1650)\n\n(cherry picked from commit af5883fec95eb8c79c379b09885440a0d88b2d38)",
        "before_after_code_files": [
          "test/bad_dtls_test.c||test/bad_dtls_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/bad_dtls_test.c||test/bad_dtls_test.c": [
          "File: test/bad_dtls_test.c -> test/bad_dtls_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451:     BIO *rbio;",
          "452:     BIO *wbio;",
          "453:     BIO *err;",
          "454:     int testresult = 0;",
          "455:     int ret;",
          "456:     int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "454:     time_t now = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464:     RAND_bytes(master_secret, sizeof(master_secret));",
          "465:     RAND_bytes(cookie, sizeof(cookie));",
          "466:     RAND_bytes(server_random + 4, sizeof(server_random) - 4);",
          "469:     sess = client_session();",
          "470:     if (sess == NULL) {",
          "",
          "[Removed Lines]",
          "467:     time((void *)server_random);",
          "",
          "[Added Lines]",
          "469:     now = time(NULL);",
          "470:     memcpy(server_random, &now, sizeof(now));",
          "",
          "---------------"
        ]
      }
    }
  ]
}