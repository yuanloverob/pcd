{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81f7b372700d7595f486d364a26304b052eda55a",
      "candidate_info": {
        "commit_hash": "81f7b372700d7595f486d364a26304b052eda55a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81f7b372700d7595f486d364a26304b052eda55a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/expr.c",
          "src/parse.y",
          "src/pragma.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/wherecode.c",
          "tool/mkkeywordhash.c"
        ],
        "message": "Initial experimental code for generated column support.  Non-functional.\n\nFossilOrigin-Name: 11d472c1df707b8d03ec57d8fc582a34f5eb89a9d02a154a9871650c65065b45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/pragma.c||src/pragma.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/wherecode.c||src/wherecode.c",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7248e3476511ecd317f54edcfe1e87443bfdcc1b10c89c7734eefcabafec6c0b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:   return -1;",
          "889: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "900: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "901:   int i;",
          "902:   i16 n;",
          "903:   assert( iCol<pTab->nCol );",
          "904:   if( pTab->nVCol==0 ) return iCol;",
          "905:   for(i=0, n=0; i<iCol; i++){",
          "906:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "907:   }",
          "908:   return n;",
          "909: }",
          "910: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1520:   }",
          "1521: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1547: void sqlite3AddGenerated(Parse *pParse, Expr *pExpr, Token *pType){",
          "1548: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1549:   u8 eType = COLFLAG_VIRTUAL;",
          "1550:   Table *pTab = pParse->pNewTable;",
          "1551:   Column *pCol;",
          "1552:   if( IN_RENAME_OBJECT ){",
          "1553:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1554:   }",
          "1555:   if( pTab==0 ) goto generated_done;",
          "1556:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1557:   if( pCol->pDflt ) goto generated_error;",
          "1558:   if( pType ){",
          "1559:     if( pType->n==7 && sqlite3StrNICmp(\"virtual\",pType->z,7)==0 ){",
          "1561:     }else if( pType->n==6 && sqlite3StrNICmp(\"stored\",pType->z,6)==0 ){",
          "1562:       eType = COLFLAG_STORED;",
          "1563:     }else{",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1567:   pTab->nVCol++;",
          "1568:   pCol->colFlags |= eType;",
          "1569:   pCol->pDflt = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "1570:   goto generated_done;",
          "1572: generated_error:",
          "1573:   sqlite3ErrorMsg(pParse, \"bad GENERATED ALWAYS AS clause on column \\\"%s\\\"\",",
          "1574:                   pCol->zName);",
          "1575: generated_done:",
          "1576:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1577: #else",
          "1580:   sqlite3ErrorMsg(pParse, \"GENERATED ALWAYS AS not supported\");",
          "1581:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1582: #endif",
          "1583: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2114:     sqlite3ResolveSelfReference(pParse, p, NC_IsCheck, 0, p->pCheck);",
          "2115:   }",
          "2119:   estimateTableWidth(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2179: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2180:   if( p->nVCol ){",
          "2181:     int ii;",
          "2182:     for(ii=0; ii<p->nCol; ii++){",
          "2183:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2184:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2185:                                     p->aCol[ii].pDflt, 0);",
          "2186:       }",
          "2187:     }",
          "2188:   }",
          "2189: #endif",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:     if( pPk ){",
          "476:       for(i=0; i<nPk; i++){",
          "477:         assert( pPk->aiColumn[i]>=0 );",
          "479:                                         pPk->aiColumn[i], iPk+i);",
          "480:       }",
          "481:       iKey = iPk;",
          "482:     }else{",
          "483:       iKey = ++pParse->nMem;",
          "485:     }",
          "487:     if( eOnePass!=ONEPASS_OFF ){",
          "",
          "[Removed Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur, -1, iKey);",
          "",
          "[Added Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur, -1, iKey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:       testcase( mask!=0xffffffff && iCol==31 );",
          "738:       testcase( mask!=0xffffffff && iCol==32 );",
          "739:       if( mask==0xffffffff || (iCol<=31 && (mask & MASKBIT32(iCol))!=0) ){",
          "741:       }",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+iCol+1);",
          "",
          "[Added Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, iCol,",
          "741:                                         iOld+iCol+1);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3365:     sqlite3ExprCodeCopy(pParse, pIdx->aColExpr->a[iIdxCol].pExpr, regOut);",
          "3366:     pParse->iSelfTab = 0;",
          "3367:   }else{",
          "3369:                                     iTabCol, regOut);",
          "3370:   }",
          "3371: }",
          "",
          "[Removed Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse->pVdbe, pIdx->pTable, iTabCur,",
          "",
          "[Added Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse, pIdx->pTable, iTabCur,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3376: void sqlite3ExprCodeGetColumnOfTable(",
          "3382: ){",
          "3383:   if( pTab==0 ){",
          "3384:     sqlite3VdbeAddOp3(v, OP_Column, iTabCur, iCol, regOut);",
          "3385:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3383:   Vdbe *v = pParse->pVdbe;",
          "3384:   assert( v!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3387:   if( iCol<0 || iCol==pTab->iPKey ){",
          "3388:     sqlite3VdbeAddOp2(v, OP_Rowid, iTabCur, regOut);",
          "3389:   }else{",
          "3393:       x = sqlite3ColumnOfIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3394:     }",
          "3395:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "3396:   }",
          "",
          "[Removed Lines]",
          "3390:     int op = IsVirtual(pTab) ? OP_VColumn : OP_Column;",
          "3391:     int x = iCol;",
          "3392:     if( !HasRowid(pTab) && !IsVirtual(pTab) ){",
          "",
          "[Added Lines]",
          "3392:     int op;",
          "3393:     int x;",
          "3394:     if( IsVirtual(pTab) ){",
          "3395:       op = OP_VColumn;",
          "3396:       x = iCol;",
          "3397: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, iCol);",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "3403:       return;",
          "3404: #endif",
          "3405:     }else if( !HasRowid(pTab) ){",
          "3407:       op = OP_Column;",
          "3408:     }else{",
          "3409:       x = sqlite3ColumnOfTable(pTab,iCol);",
          "3410:       op = OP_Column;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3416: ){",
          "3420:   if( p5 ){",
          "3422:   }",
          "3423:   return iReg;",
          "3424: }",
          "",
          "[Removed Lines]",
          "3417:   Vdbe *v = pParse->pVdbe;",
          "3418:   assert( v!=0 );",
          "3419:   sqlite3ExprCodeGetColumnOfTable(v, pTab, iTable, iColumn, iReg);",
          "3421:     sqlite3VdbeChangeP5(v, p5);",
          "",
          "[Added Lines]",
          "3434:   assert( pParse->pVdbe!=0 );",
          "3435:   sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTable, iColumn, iReg);",
          "3437:     sqlite3VdbeChangeP5(pParse->pVdbe, p5);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:                                  {sqlite3CreateForeignKey(pParse,0,&T,TA,R);}",
          "348: ccons ::= defer_subclause(D).    {sqlite3DeferForeignKey(pParse,D);}",
          "349: ccons ::= COLLATE ids(C).        {sqlite3AddCollateType(pParse, &C);}",
          "352: %type autoinc {int}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: ccons ::= GENERATED ALWAYS AS generated.",
          "351: ccons ::= AS generated.",
          "352: generated ::= LP expr(E) RP.",
          "353:      {sqlite3AddGenerated(pParse,E,0);}",
          "354: generated ::= LP expr(E) RP ID(TYPE).",
          "355:      {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:         for(j=0; j<pFK->nCol; j++){",
          "1400:           int iCol = aiCols ? aiCols[j] : pFK->aCol[j].iFrom;",
          "1402:           sqlite3VdbeAddOp2(v, OP_IsNull, regRow+j, addrOk); VdbeCoverage(v);",
          "1403:         }",
          "",
          "[Removed Lines]",
          "1401:           sqlite3ExprCodeGetColumnOfTable(v, pTab, 0, iCol, regRow+j);",
          "",
          "[Added Lines]",
          "1401:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, 0, iCol, regRow+j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1586:           int jmp2;",
          "1587:           if( j==pTab->iPKey ) continue;",
          "1588:           if( pTab->aCol[j].notNull==0 ) continue;",
          "1590:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1591:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
          "1592:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
          "",
          "[Removed Lines]",
          "1589:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
          "",
          "[Added Lines]",
          "1589:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, j, 3);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:     if( cnt==0",
          "415:      && cntTab==1",
          "416:      && pMatch",
          "418:      && sqlite3IsRowid(zCol)",
          "419:      && VisibleRowid(pMatch->pTab)",
          "420:     ){",
          "",
          "[Removed Lines]",
          "417:      && (pNC->ncFlags & NC_IdxExpr)==0",
          "",
          "[Added Lines]",
          "417:      && (pNC->ncFlags & (NC_IdxExpr|NC_GenCol))==0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: ){",
          "629:   if( (pNC->ncFlags & validMask)!=0 ){",
          "630:     const char *zIn = \"partial index WHERE clauses\";",
          "631:     if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "632: #ifndef SQLITE_OMIT_CHECK",
          "633:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "634: #endif",
          "635:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "636:   }",
          "",
          "[Removed Lines]",
          "628:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr))==0 );",
          "",
          "[Added Lines]",
          "628:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 );",
          "634: #endif",
          "635: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"GENERATED ALWAYS AS columns\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "723:         zColumn = pExpr->u.zToken;",
          "724:       }else{",
          "725:         Expr *pLeft = pExpr->pLeft;",
          "727:         pRight = pExpr->pRight;",
          "728:         if( pRight->op==TK_ID ){",
          "729:           zDb = 0;",
          "",
          "[Removed Lines]",
          "726:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr);",
          "",
          "[Added Lines]",
          "729:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "822:           notValid(pParse, pNC, \"non-deterministic functions\",",
          "824:         }",
          "825:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "826:          && pParse->nested==0",
          "",
          "[Removed Lines]",
          "823:                    NC_IdxExpr|NC_PartIdx);",
          "",
          "[Added Lines]",
          "826:                    NC_IdxExpr|NC_PartIdx|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "964:       testcase( pExpr->op==TK_IN );",
          "965:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "966:         int nRef = pNC->nRef;",
          "968:         sqlite3WalkSelect(pWalker, pExpr->x.pSelect);",
          "969:         assert( pNC->nRef>=nRef );",
          "970:         if( nRef!=pNC->nRef ){",
          "",
          "[Removed Lines]",
          "967:         notValid(pParse, pNC, \"subqueries\", NC_IsCheck|NC_PartIdx|NC_IdxExpr);",
          "",
          "[Added Lines]",
          "970:         notValid(pParse, pNC, \"subqueries\",",
          "971:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "975:       break;",
          "976:     }",
          "977:     case TK_VARIABLE: {",
          "979:       break;",
          "980:     }",
          "981:     case TK_IS:",
          "",
          "[Removed Lines]",
          "978:       notValid(pParse, pNC, \"parameters\", NC_IsCheck|NC_PartIdx|NC_IdxExpr);",
          "",
          "[Added Lines]",
          "982:       notValid(pParse, pNC, \"parameters\",",
          "983:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1798: int sqlite3ResolveSelfReference(",
          "1804: ){",
          "1807:   int rc;",
          "1809:   assert( type==0 || pTab!=0 );",
          "1811:   memset(&sNC, 0, sizeof(sNC));",
          "1812:   memset(&sSrc, 0, sizeof(sSrc));",
          "1813:   if( pTab ){",
          "",
          "[Removed Lines]",
          "1810:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr || pTab==0 );",
          "",
          "[Added Lines]",
          "1816:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr",
          "1817:           || type==NC_GenCol || pTab==0 );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6417:           struct AggInfo_col *pCol = &sAggInfo.aCol[i];",
          "6418:           if( pCol->iSorterColumn>=j ){",
          "6419:             int r1 = j + regBase;",
          "6421:                                pCol->pTab, pCol->iTable, pCol->iColumn, r1);",
          "6422:             j++;",
          "6423:           }",
          "",
          "[Removed Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(v,",
          "",
          "[Added Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(pParse,",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3938: void sqlite3OpenMasterTable(Parse *, int);",
          "3939: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3940: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3941: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3942: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "3943:   void sqlite3ColumnPropertiesFromName(Table*, Column*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3945: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3947: #else",
          "3948:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3949: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950: void sqlite3AddCheckConstraint(Parse*, Expr*);",
          "3951: void sqlite3AddDefaultValue(Parse*,Expr*,const char*,const char*);",
          "3952: void sqlite3AddCollateType(Parse*, Token*);",
          "3953: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3954: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3955:                     sqlite3_vfs**,char**,char **);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3962: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4054: void sqlite3ExprCodeLoadIndexColumn(Parse*, Index*, int, int, int);",
          "4055: int sqlite3ExprCodeGetColumn(Parse*, Table*, int, int, int, u8);",
          "4057: void sqlite3ExprCodeMove(Parse*, int, int, int);",
          "4058: void sqlite3ExprCode(Parse*, Expr*, int);",
          "4059: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "",
          "[Removed Lines]",
          "4056: void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);",
          "",
          "[Added Lines]",
          "4066: void sqlite3ExprCodeGetColumnOfTable(Parse*, Table*, int, int, int);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:     for(i=0; i<nPk; i++){",
          "544:       assert( pPk->aiColumn[i]>=0 );",
          "546:     }",
          "547:     if( eOnePass ){",
          "548:       if( addrOpen ) sqlite3VdbeChangeToNoop(v, addrOpen);",
          "",
          "[Removed Lines]",
          "545:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur,pPk->aiColumn[i],iPk+i);",
          "",
          "[Added Lines]",
          "545:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur,",
          "546:                                       pPk->aiColumn[i], iPk+i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "628:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "629:       ){",
          "630:         testcase(  oldmask!=0xffffffff && i==31 );",
          "632:       }else{",
          "633:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "634:       }",
          "",
          "[Removed Lines]",
          "631:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regOld+i);",
          "",
          "[Added Lines]",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "670:         testcase( i==31 );",
          "671:         testcase( i==32 );",
          "673:       }else{",
          "674:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "675:       }",
          "",
          "[Removed Lines]",
          "672:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710:     for(i=0; i<pTab->nCol; i++){",
          "711:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:       }",
          "714:     }",
          "715:   }",
          "",
          "[Removed Lines]",
          "712:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2072:           if( (pWInfo->wctrlFlags & WHERE_DUPLICATES_OK)==0 ){",
          "2073:             int iSet = ((ii==pOrWc->nTerm-1)?-1:ii);",
          "2074:             if( HasRowid(pTab) ){",
          "2076:               jmp1 = sqlite3VdbeAddOp4Int(v, OP_RowSetTest, regRowset, 0,",
          "2077:                                           regRowid, iSet);",
          "2078:               VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, -1, regRowid);",
          "",
          "[Added Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, -1, regRowid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2086:               r = sqlite3GetTempRange(pParse, nPk);",
          "2087:               for(iPk=0; iPk<nPk; iPk++){",
          "2088:                 int iCol = pPk->aiColumn[iPk];",
          "2090:               }",
          "",
          "[Removed Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, iCol, r+iPk);",
          "",
          "[Added Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, iCol,r+iPk);",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER                },",
          "165:   { \"ALL\",              \"TK_ALL\",          ALWAYS                 },",
          "166:   { \"ALTER\",            \"TK_ALTER\",        ALTER                  },",
          "167:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE                },",
          "168:   { \"AND\",              \"TK_AND\",          ALWAYS                 },",
          "169:   { \"AS\",               \"TK_AS\",           ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "217:   { \"FROM\",             \"TK_FROM\",         ALWAYS                 },",
          "218:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "219:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "220:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS                 },",
          "221:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
      "candidate_info": {
        "commit_hash": "4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/pragma4.test"
        ],
        "message": "Avoid including the comment in the output of \"PRAGMA table_info\" in situations where there is a comment following a DEFAULT value within a CREATE TABLE statement.\n\nFossilOrigin-Name: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   assert( yyLookahead!=YYNOCODE );",
          "302:   A = yyLookaheadToken.z;",
          "303: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: scantok(A) ::= . {",
          "305:   assert( yyLookahead!=YYNOCODE );",
          "306:   A = yyLookaheadToken;",
          "307: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308: carglist ::= carglist ccons.",
          "309: carglist ::= .",
          "310: ccons ::= CONSTRAINT nm(X).           {pParse->constraintName = X;}",
          "313: ccons ::= DEFAULT LP(A) expr(X) RP(Z).",
          "314:                             {sqlite3AddDefaultValue(pParse,X,A.z+1,Z.z);}",
          "318:   Expr *p = sqlite3PExpr(pParse, TK_UMINUS, X, 0);",
          "320: }",
          "322:   Expr *p = tokenExpr(pParse, TK_STRING, X);",
          "323:   if( p ){",
          "324:     sqlite3ExprIdToTrueFalse(p);",
          "",
          "[Removed Lines]",
          "311: ccons ::= DEFAULT scanpt(A) term(X) scanpt(Z).",
          "312:                             {sqlite3AddDefaultValue(pParse,X,A,Z);}",
          "315: ccons ::= DEFAULT PLUS(A) term(X) scanpt(Z).",
          "316:                             {sqlite3AddDefaultValue(pParse,X,A.z,Z);}",
          "317: ccons ::= DEFAULT MINUS(A) term(X) scanpt(Z).      {",
          "319:   sqlite3AddDefaultValue(pParse,p,A.z,Z);",
          "321: ccons ::= DEFAULT scanpt id(X).       {",
          "",
          "[Added Lines]",
          "315: ccons ::= DEFAULT scantok(A) term(X).",
          "316:                             {sqlite3AddDefaultValue(pParse,X,A.z,&A.z[A.n]);}",
          "319: ccons ::= DEFAULT PLUS(A) scantok(Z) term(X).",
          "320:                             {sqlite3AddDefaultValue(pParse,X,A.z,&Z.z[Z.n]);}",
          "321: ccons ::= DEFAULT MINUS(A) scantok(Z) term(X). {",
          "323:   sqlite3AddDefaultValue(pParse,p,A.z,&Z.z[Z.n]);",
          "325: ccons ::= DEFAULT scantok id(X).       {",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   pragma foreign_key_check('c2')",
          "250: } {1 {no such table: c2}}",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: do_execsql_test 5.0 {",
          "253:   CREATE TABLE t4(a DEFAULT 'abc' /* comment */, b DEFAULT -1 -- comment",
          "255:   );",
          "256:   PRAGMA table_info = t4;",
          "257: } {",
          "258:   0 a {} 0 'abc' 0 1 b {} 0 -1 0 2 c {} 0 +4.0 0",
          "259: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
      "candidate_info": {
        "commit_hash": "d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4da4936cdfaf5647d9daf0b861b2e63969a810d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Avoid downgrading SQLITE_CORRUPT errors detected by the schema parser into SQLITE_NOMEM or SQLITE_ERROR errors.\n\nFossilOrigin-Name: b2e79f8ff0836fcc98a2df9377aad9137307c34058030ecd1b5d4ec3277ed36a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cc5694cbd69749c146679c367860952fdf3f5356426ddfd1dce470569702bc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:       if( db->init.orphanTrigger ){",
          "116:         assert( iDb==1 );",
          "117:       }else{",
          "119:         if( rc==SQLITE_NOMEM ){",
          "120:           sqlite3OomFault(db);",
          "121:         }else if( rc!=SQLITE_INTERRUPT && (rc&0xFF)!=SQLITE_LOCKED ){",
          "",
          "[Removed Lines]",
          "118:         pData->rc = rc;",
          "",
          "[Added Lines]",
          "118:         if( rc > pData->rc ) pData->rc = rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30ad79aeb4cc1243817fdb3c1b0b51a61bbb5f97",
      "candidate_info": {
        "commit_hash": "30ad79aeb4cc1243817fdb3c1b0b51a61bbb5f97",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/30ad79aeb4cc1243817fdb3c1b0b51a61bbb5f97",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Improvements to the view-self-join optimization so that it works on all VIEWs, not just on Common Table Expressions.\n\nFossilOrigin-Name: d2fe370cafa9b11f6c3eb4e1c3be48d9d2610b9d2f9d9ebf9e50267f9079dfc0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb1d06521de5918a2324a41e207b48c5e5149c23b927b9e3e1f3c3b38b82658e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5481:     if( pItem->pSelect==0 ) continue;",
          "5482:     if( pItem->fg.viaCoroutine ) continue;",
          "5483:     if( pItem->zName==0 ) continue;",
          "5485:     if( sqlite3_stricmp(pItem->zName, pThis->zName)!=0 ) continue;",
          "5486:     pS1 = pItem->pSelect;",
          "5490:       continue;",
          "",
          "[Removed Lines]",
          "5484:     if( sqlite3_stricmp(pItem->zDatabase, pThis->zDatabase)!=0 ) continue;",
          "5487:     if( pThis->pSelect->selId!=pS1->selId ){",
          "",
          "[Added Lines]",
          "5484:     assert( pItem->pTab!=0 );",
          "5485:     assert( pThis->pTab!=0 );",
          "5486:     if( pItem->pTab->pSchema!=pThis->pTab->pSchema ) continue;",
          "5489:     if( pItem->pTab->pSchema==0 && pThis->pSelect->selId!=pS1->selId ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
      "candidate_info": {
        "commit_hash": "ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec4ccdbcb1bd9d129888b38f209ed36bbe38a5d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/delete.c",
          "src/expr.c",
          "src/fkey.c",
          "src/insert.c",
          "src/pragma.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/update.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "src/where.c",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "A new implementation of sqlite3VdbeMakeLabel() is faster and makes fewer memory allocations by deferring memory allocation until sqlite3VdbeResolveLabel() is called, at which point the code generator has a better idea of how big the relocation table needs to be. The sqlite3VdbeMakeLabel() routine now takes a Parse* parameter instead of Vdbe*.\n\nFossilOrigin-Name: 4a0929ac76d8aa5dd65eac3b83d6bbf41e505e01d175ca0fb2b19ba02d439415",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/fkey.c||src/fkey.c",
          "src/insert.c||src/insert.c",
          "src/pragma.c||src/pragma.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/update.c||src/update.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 891f1f72187f0f9ec0d24fda98cc08be3ae3c3ff8b27c4e409ee7135c3106398",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1156:     addrNextRow = sqlite3VdbeCurrentAddr(v);",
          "1158:     if( nColTest>0 ){",
          "1161:       aGotoChng = sqlite3DbMallocRawNN(db, sizeof(int)*nColTest);",
          "1162:       if( aGotoChng==0 ) continue;",
          "",
          "[Removed Lines]",
          "1159:       int endDistinctTest = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1159:       int endDistinctTest = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "519:     if( eOnePass!=ONEPASS_OFF ){",
          "521:     }else{",
          "522:       sqlite3WhereEnd(pWInfo);",
          "523:     }",
          "",
          "[Removed Lines]",
          "520:       addrBypass = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "520:       addrBypass = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   opSeek = HasRowid(pTab) ? OP_NotExists : OP_NotFound;",
          "711:   if( eMode==ONEPASS_OFF ){",
          "712:     sqlite3VdbeAddOp4Int(v, opSeek, iDataCur, iLabel, iPk, nPk);",
          "",
          "[Removed Lines]",
          "709:   iLabel = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "709:   iLabel = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   int regLeft = 0;",
          "554:   int regRight = 0;",
          "555:   u8 opx = op;",
          "558:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "559:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "556:   int addrDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "556:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3033:   if( eType==IN_INDEX_NOOP ){",
          "3034:     ExprList *pList = pExpr->x.pList;",
          "3035:     CollSeq *pColl = sqlite3ExprCollSeq(pParse, pExpr->pLeft);",
          "3037:     int r2, regToFree;",
          "3038:     int regCkNull = 0;",
          "3039:     int ii;",
          "",
          "[Removed Lines]",
          "3036:     int labelOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3036:     int labelOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3077:   if( destIfNull==destIfFalse ){",
          "3078:     destStep2 = destIfFalse;",
          "3079:   }else{",
          "3081:   }",
          "3082:   for(i=0; i<nVector; i++){",
          "3083:     Expr *p = sqlite3VectorFieldSubexpr(pExpr->pLeft, i);",
          "",
          "[Removed Lines]",
          "3080:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3080:     destStep2 = destStep6 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3135:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, pExpr->iTable, destIfFalse);",
          "3136:   VdbeCoverage(v);",
          "3137:   if( nVector>1 ){",
          "3139:   }else{",
          "",
          "[Removed Lines]",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3702:       if( pDef->funcFlags & SQLITE_FUNC_COALESCE ){",
          "3704:         assert( nFarg>=2 );",
          "3705:         sqlite3ExprCode(pParse, pFarg->a[0].pExpr, target);",
          "3706:         for(i=1; i<nFarg; i++){",
          "",
          "[Removed Lines]",
          "3703:         int endCoalesce = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3703:         int endCoalesce = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3848:       return pExpr->pLeft->iTable + pExpr->iColumn;",
          "3849:     }",
          "3850:     case TK_IN: {",
          "3853:       sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3854:       sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);",
          "3855:       sqlite3VdbeAddOp2(v, OP_Integer, 1, target);",
          "",
          "[Removed Lines]",
          "3851:       int destIfFalse = sqlite3VdbeMakeLabel(v);",
          "3852:       int destIfNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3851:       int destIfFalse = sqlite3VdbeMakeLabel(pParse);",
          "3852:       int destIfNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3989:       pEList = pExpr->x.pList;",
          "3990:       aListelem = pEList->a;",
          "3991:       nExpr = pEList->nExpr;",
          "3993:       if( (pX = pExpr->pLeft)!=0 ){",
          "3994:         tempX = *pX;",
          "3995:         testcase( pX->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "3992:       endLabel = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3992:       endLabel = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4012:         }else{",
          "4013:           pTest = aListelem[i].pExpr;",
          "4014:         }",
          "4016:         testcase( pTest->op==TK_COLUMN );",
          "4017:         sqlite3ExprIfFalse(pParse, pTest, nextCase, SQLITE_JUMPIFNULL);",
          "4018:         testcase( aListelem[i+1].pExpr->op==TK_COLUMN );",
          "",
          "[Removed Lines]",
          "4015:         nextCase = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4015:         nextCase = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4381:   op = pExpr->op;",
          "4382:   switch( op ){",
          "4383:     case TK_AND: {",
          "4385:       testcase( jumpIfNull==0 );",
          "4386:       sqlite3ExprIfFalse(pParse, pExpr->pLeft, d2,jumpIfNull^SQLITE_JUMPIFNULL);",
          "4387:       sqlite3ExprIfTrue(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Removed Lines]",
          "4384:       int d2 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4384:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4467:     }",
          "4468: #ifndef SQLITE_OMIT_SUBQUERY",
          "4469:     case TK_IN: {",
          "4471:       int destIfNull = jumpIfNull ? dest : destIfFalse;",
          "4472:       sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);",
          "4473:       sqlite3VdbeGoto(v, dest);",
          "",
          "[Removed Lines]",
          "4470:       int destIfFalse = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4470:       int destIfFalse = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4554:       break;",
          "4555:     }",
          "4556:     case TK_OR: {",
          "4558:       testcase( jumpIfNull==0 );",
          "4559:       sqlite3ExprIfTrue(pParse, pExpr->pLeft, d2, jumpIfNull^SQLITE_JUMPIFNULL);",
          "4560:       sqlite3ExprIfFalse(pParse, pExpr->pRight, dest, jumpIfNull);",
          "",
          "[Removed Lines]",
          "4557:       int d2 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4557:       int d2 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4638:       if( jumpIfNull ){",
          "4639:         sqlite3ExprCodeIN(pParse, pExpr, dest, dest);",
          "4640:       }else{",
          "4642:         sqlite3ExprCodeIN(pParse, pExpr, dest, destIfNull);",
          "4643:         sqlite3VdbeResolveLabel(v, destIfNull);",
          "4644:       }",
          "",
          "[Removed Lines]",
          "4641:         int destIfNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4641:         int destIfNull = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:         if( p->isDeferred || (db->flags & SQLITE_DeferFKs) ) break;",
          "730:       }",
          "731:       if( !p ) return;",
          "733:       sqlite3VdbeAddOp2(v, OP_FkIfZero, 1, iSkip); VdbeCoverage(v);",
          "734:     }",
          "",
          "[Removed Lines]",
          "732:       iSkip = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "732:       iSkip = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:   if( tmask & TRIGGER_BEFORE ){",
          "871:     int regCols = sqlite3GetTempRange(pParse, pTab->nCol+1);",
          "",
          "[Removed Lines]",
          "869:   endOfLoop = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "869:   endOfLoop = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1356:     switch( onError ){",
          "1357:       case OE_Replace: {",
          "1358:         assert( onError==OE_Replace );",
          "1360:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1361:           VdbeCoverage(v);",
          "1362:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "",
          "[Removed Lines]",
          "1359:         addr1 = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1359:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1408:         continue;",
          "1409:       }",
          "1411:       sqlite3VdbeVerifyAbortable(v, onError);",
          "1412:       sqlite3ExprIfTrue(pParse, pExpr, allOk, SQLITE_JUMPIFNULL);",
          "1413:       if( onError==OE_Ignore ){",
          "",
          "[Removed Lines]",
          "1410:       allOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1410:       allOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1476:   if( pkChng && pPk==0 ){",
          "1480:     onError = pTab->keyConf;",
          "",
          "[Removed Lines]",
          "1477:     int addrRowidOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1477:     int addrRowidOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1624:       VdbeComment((v, \"Skip upsert subroutine\"));",
          "1625:       sqlite3VdbeJumpHere(v, upsertJump);",
          "1626:     }else{",
          "1628:     }",
          "1629:     if( bAffinityDone==0 && (pUpIdx==0 || pUpIdx==pIdx) ){",
          "1630:       sqlite3TableAffinity(v, pTab, regNewData+1);",
          "",
          "[Removed Lines]",
          "1627:       addrUniqueOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1627:       addrUniqueOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1376:           x = sqlite3FkLocateIndex(pParse, pParent, pFK, &pIdx, &aiCols);",
          "1377:           assert( x==0 );",
          "1378:         }",
          "",
          "[Removed Lines]",
          "1379:         addrOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1379:         addrOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1596:         if( pTab->pCheck && (db->flags & SQLITE_IgnoreChecks)==0 ){",
          "1597:           ExprList *pCheck = sqlite3ExprListDup(db, pTab->pCheck, 0);",
          "1598:           if( db->mallocFailed==0 ){",
          "1601:             char *zErr;",
          "1602:             int k;",
          "1603:             pParse->iSelfTab = iDataCur + 1;",
          "",
          "[Removed Lines]",
          "1599:             int addrCkFault = sqlite3VdbeMakeLabel(v);",
          "1600:             int addrCkOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1599:             int addrCkFault = sqlite3VdbeMakeLabel(pParse);",
          "1600:             int addrCkOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1621:           for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){",
          "1622:             int jmp2, jmp3, jmp4, jmp5;",
          "1624:             if( pPk==pIdx ) continue;",
          "1625:             r1 = sqlite3GenerateIndexKey(pParse, pIdx, iDataCur, 0, 0, &jmp3,",
          "1626:                                          pPrior, r1);",
          "",
          "[Removed Lines]",
          "1623:             int ckUniq = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1623:             int ckUniq = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1643:             if( IsUniqueIndex(pIdx) ){",
          "1645:               int jmp6;",
          "1646:               int kk;",
          "1647:               for(kk=0; kk<pIdx->nKeyCol; kk++){",
          "",
          "[Removed Lines]",
          "1644:               int uniqOk = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1644:               int uniqOk = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "631:   }",
          "632:   assert( pSelect->iOffset==0 || pSelect->iLimit!=0 );",
          "633:   iLimit = pSelect->iOffset ? pSelect->iOffset+1 : pSelect->iLimit;",
          "635:   sqlite3ExprCodeExprList(pParse, pSort->pOrderBy, regBase, regOrigData,",
          "636:                           SQLITE_ECEL_DUP | (regOrigData? SQLITE_ECEL_REF : 0));",
          "637:   if( bSeq ){",
          "",
          "[Removed Lines]",
          "634:   pSort->labelDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "634:   pSort->labelDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:                                            pKI->nAllField-pKI->nKeyField-1);",
          "671:     addrJmp = sqlite3VdbeCurrentAddr(v);",
          "672:     sqlite3VdbeAddOp3(v, OP_Jump, addrJmp+1, 0, addrJmp+1); VdbeCoverage(v);",
          "674:     pSort->regReturn = ++pParse->nMem;",
          "675:     sqlite3VdbeAddOp2(v, OP_Gosub, pSort->regReturn, pSort->labelBkOut);",
          "676:     sqlite3VdbeAddOp1(v, OP_ResetSorter, pSort->iECursor);",
          "",
          "[Removed Lines]",
          "673:     pSort->labelBkOut = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "673:     pSort->labelBkOut = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2329:   if( sqlite3AuthCheck(pParse, SQLITE_RECURSIVE, 0, 0, 0) ) return;",
          "2334:   computeLimitRegisters(pParse, p, addrBreak);",
          "2335:   pLimit = p->pLimit;",
          "",
          "[Removed Lines]",
          "2332:   addrBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2332:   addrBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2399:   sqlite3VdbeAddOp1(v, OP_Delete, iQueue);",
          "2403:   codeOffset(v, regOffset, addrCont);",
          "2404:   selectInnerLoop(pParse, p, iCurrent,",
          "2405:       0, 0, pDest, addrCont, addrBreak);",
          "",
          "[Removed Lines]",
          "2402:   addrCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2402:   addrCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2707:         if( dest.eDest!=priorOp ){",
          "2708:           int iCont, iBreak, iStart;",
          "2709:           assert( p->pEList );",
          "2712:           computeLimitRegisters(pParse, p, iBreak);",
          "2713:           sqlite3VdbeAddOp2(v, OP_Rewind, unionTab, iBreak); VdbeCoverage(v);",
          "2714:           iStart = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2710:           iBreak = sqlite3VdbeMakeLabel(v);",
          "2711:           iCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2710:           iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2711:           iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2778:         assert( p->pEList );",
          "2781:         computeLimitRegisters(pParse, p, iBreak);",
          "2782:         sqlite3VdbeAddOp2(v, OP_Rewind, tab1, iBreak); VdbeCoverage(v);",
          "2783:         r1 = sqlite3GetTempReg(pParse);",
          "",
          "[Removed Lines]",
          "2779:         iBreak = sqlite3VdbeMakeLabel(v);",
          "2780:         iCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2779:         iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2780:         iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2907:   int addr;",
          "2909:   addr = sqlite3VdbeCurrentAddr(v);",
          "",
          "[Removed Lines]",
          "2910:   iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "2910:   iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3144:   db = pParse->db;",
          "3145:   v = pParse->pVdbe;",
          "",
          "[Removed Lines]",
          "3147:   labelEnd = sqlite3VdbeMakeLabel(v);",
          "3148:   labelCmpr = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "3147:   labelEnd = sqlite3VdbeMakeLabel(pParse);",
          "3148:   labelCmpr = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5330:       regAgg = 0;",
          "5331:     }",
          "5332:     if( pF->iDistinct>=0 ){",
          "5336:       codeDistinct(pParse, pF->iDistinct, addrNext, 1, regAgg);",
          "",
          "[Removed Lines]",
          "5333:       addrNext = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "5333:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6042:   if( (p->selFlags & SF_FixedLimit)==0 ){",
          "6044:   }",
          "",
          "[Removed Lines]",
          "6041:   iEnd = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6041:   iEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6105:     assert( p->pEList==pEList );",
          "6106: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "6107:     if( pWin ){",
          "6111:       int regGosub = ++pParse->nMem;",
          "6113:       sqlite3WindowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Removed Lines]",
          "6108:       int addrGosub = sqlite3VdbeMakeLabel(v);",
          "6109:       int iCont = sqlite3VdbeMakeLabel(v);",
          "6110:       int iBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6108:       int addrGosub = sqlite3VdbeMakeLabel(pParse);",
          "6109:       int iCont = sqlite3VdbeMakeLabel(pParse);",
          "6110:       int iBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6182:     }",
          "",
          "[Removed Lines]",
          "6185:     addrEnd = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6185:     addrEnd = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6271:       iUseFlag = ++pParse->nMem;",
          "6272:       iAbortFlag = ++pParse->nMem;",
          "6273:       regOutputRow = ++pParse->nMem;",
          "6275:       regReset = ++pParse->nMem;",
          "6277:       iAMem = pParse->nMem + 1;",
          "6278:       pParse->nMem += pGroupBy->nExpr;",
          "6279:       iBMem = pParse->nMem + 1;",
          "",
          "[Removed Lines]",
          "6274:       addrOutputRow = sqlite3VdbeMakeLabel(v);",
          "6276:       addrReset = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "6274:       addrOutputRow = sqlite3VdbeMakeLabel(pParse);",
          "6276:       addrReset = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "944:       if( SQLITE_OK==sqlite3ResolveExprNames(&sNC, pWhen)",
          "945:        && db->mallocFailed==0",
          "946:       ){",
          "948:         sqlite3ExprIfFalse(pSubParse, pWhen, iEndTrigger, SQLITE_JUMPIFNULL);",
          "949:       }",
          "950:       sqlite3ExprDelete(db, pWhen);",
          "",
          "[Removed Lines]",
          "947:         iEndTrigger = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "947:         iEndTrigger = sqlite3VdbeMakeLabel(pSubParse);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "441: #endif",
          "",
          "[Removed Lines]",
          "444:   labelContinue = labelBreak = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "444:   labelContinue = labelBreak = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:         VdbeCoverage(v);",
          "577:       }",
          "578:       if( eOnePass!=ONEPASS_SINGLE ){",
          "580:       }",
          "581:       sqlite3VdbeAddOp2(v, OP_IsNull, pPk ? regKey : regOldRowid, labelBreak);",
          "582:       VdbeCoverageIf(v, pPk==0);",
          "583:       VdbeCoverageIf(v, pPk!=0);",
          "584:     }else if( pPk ){",
          "586:       sqlite3VdbeAddOp2(v, OP_Rewind, iEph, labelBreak); VdbeCoverage(v);",
          "587:       addrTop = sqlite3VdbeAddOp2(v, OP_RowData, iEph, regKey);",
          "588:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, labelContinue, regKey, 0);",
          "",
          "[Removed Lines]",
          "579:         labelContinue = sqlite3VdbeMakeLabel(v);",
          "585:       labelContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "579:         labelContinue = sqlite3VdbeMakeLabel(pParse);",
          "585:       labelContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: void sqlite3VdbeSetP4KeyInfo(Parse*, Index*);",
          "231: void sqlite3VdbeUsesBtree(Vdbe*, int);",
          "232: VdbeOp *sqlite3VdbeGetOp(Vdbe*, int);",
          "234: void sqlite3VdbeRunOnlyOnce(Vdbe*);",
          "235: void sqlite3VdbeReusable(Vdbe*);",
          "236: void sqlite3VdbeDelete(Vdbe*);",
          "",
          "[Removed Lines]",
          "233: int sqlite3VdbeMakeLabel(Vdbe*);",
          "",
          "[Added Lines]",
          "233: int sqlite3VdbeMakeLabel(Parse*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463: }",
          "",
          "[Removed Lines]",
          "451: int sqlite3VdbeMakeLabel(Vdbe *v){",
          "452:   Parse *p = v->pParse;",
          "453:   int i = p->nLabel++;",
          "454:   assert( v->magic==VDBE_MAGIC_INIT );",
          "455:   if( (i & (i-1))==0 ){",
          "456:     p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "457:                                        (i*2+1)*sizeof(p->aLabel[0]));",
          "458:   }",
          "459:   if( p->aLabel ){",
          "460:     p->aLabel[i] = -1;",
          "461:   }",
          "462:   return ADDR(i);",
          "",
          "[Added Lines]",
          "451: int sqlite3VdbeMakeLabel(Parse *pParse){",
          "452:   return ADDR(pParse->nLabel++);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470: void sqlite3VdbeResolveLabel(Vdbe *v, int x){",
          "471:   Parse *p = v->pParse;",
          "472:   int j = ADDR(x);",
          "473:   assert( v->magic==VDBE_MAGIC_INIT );",
          "474:   assert( j<p->nLabel );",
          "475:   assert( j>=0 );",
          "477: #ifdef SQLITE_DEBUG",
          "481: #endif",
          "483:     p->aLabel[j] = v->nOp;",
          "484:   }",
          "",
          "[Removed Lines]",
          "476:   if( p->aLabel ){",
          "478:     if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "479:       printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "480:     }",
          "",
          "[Added Lines]",
          "460: static SQLITE_NOINLINE void resizeResolveLabel(Parse *p, Vdbe *v, int j){",
          "461:   int nNewSize = p->nLabel+10;",
          "462:   p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "463:                      nNewSize*sizeof(p->aLabel[0]));",
          "464:   if( p->aLabel==0 ){",
          "465:     p->nLabelAlloc = 0;",
          "466:   }else{",
          "467: #ifdef SQLITE_DEBUG",
          "468:     int i;",
          "469:     for(i=p->nLabelAlloc; i<nNewSize; i++) p->aLabel[i] = -1;",
          "470: #endif",
          "471:     p->nLabelAlloc = nNewSize;",
          "472:     p->aLabel[j] = v->nOp;",
          "473:   }",
          "474: }",
          "482:   if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "483:     printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "484:   }",
          "486:   if( p->nLabelAlloc < p->nLabel ){",
          "487:     resizeResolveLabel(p,v,j);",
          "488:   }else{",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "837:     addrTop = sqlite3VdbeAddOp1(v, OP_Rewind, pLevel->iTabCur); VdbeCoverage(v);",
          "838:   }",
          "839:   if( pPartial ){",
          "841:     sqlite3ExprIfFalse(pParse, pPartial, iContinue, SQLITE_JUMPIFNULL);",
          "842:     pLoop->wsFlags |= WHERE_PARTIALIDX;",
          "843:   }",
          "",
          "[Removed Lines]",
          "840:     iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "840:     iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4643:   pWInfo->pResultSet = pResultSet;",
          "4644:   pWInfo->aiCurOnePass[0] = pWInfo->aiCurOnePass[1] = -1;",
          "4645:   pWInfo->nLevel = nTabList;",
          "4647:   pWInfo->wctrlFlags = wctrlFlags;",
          "4648:   pWInfo->iLimit = iAuxArg;",
          "4649:   pWInfo->savedNQueryLoop = pParse->nQueryLoop;",
          "",
          "[Removed Lines]",
          "4646:   pWInfo->iBreak = pWInfo->iContinue = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "4646:   pWInfo->iBreak = pWInfo->iContinue = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:     pLoop->wsFlags |= WHERE_IN_ABLE;",
          "567:     if( pLevel->u.in.nIn==0 ){",
          "569:     }",
          "571:     i = pLevel->u.in.nIn;",
          "",
          "[Removed Lines]",
          "568:       pLevel->addrNxt = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "568:       pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1216:   addrBrk = pLevel->addrBrk = pLevel->addrNxt = sqlite3VdbeMakeLabel(v);",
          "1217:   addrCont = pLevel->addrCont = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1216:   addrBrk = pLevel->addrBrk = pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "1217:   addrCont = pLevel->addrCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1330:      || pFunc->zName==first_valueName",
          "1331:     ){",
          "1332:       int csr = pWin->csrApp;",
          "1334:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1335:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "",
          "[Removed Lines]",
          "1333:       int lbl = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1333:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:       int nArg = pWin->pOwner->x.pList->nExpr;",
          "1354:       int iEph = pMWin->iEphCsr;",
          "1355:       int csr = pWin->csrApp;",
          "1357:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1359:       if( nArg<3 ){",
          "",
          "[Removed Lines]",
          "1356:       int lbl = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1356:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1616:   regFlushPart = ++pParse->nMem;",
          "1620:   regStart = ++pParse->nMem;",
          "1621:   regEnd = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1617:   lblFlushPart = sqlite3VdbeMakeLabel(v);",
          "1618:   lblFlushDone = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1617:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "1618:   lblFlushDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1725:    || pMWin->eStart==TK_PRECEDING",
          "1726:    || pMWin->eStart==TK_FOLLOWING",
          "1727:   ){",
          "1729:     if( pMWin->eStart==TK_PRECEDING ){",
          "1730:       sqlite3VdbeAddOp3(v, OP_IfPos, regStart, lblSkipInverse, 1);",
          "1731:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1728:     int lblSkipInverse = sqlite3VdbeMakeLabel(v);;",
          "",
          "[Added Lines]",
          "1728:     int lblSkipInverse = sqlite3VdbeMakeLabel(pParse);;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1890:        || (pMWin->eStart==TK_CURRENT && pMWin->eEnd==TK_UNBOUNDED)",
          "1891:   );",
          "1894:   regNewPeer = pParse->nMem+1;",
          "1895:   pParse->nMem += nPeer;",
          "1898:   regFlushPart = ++pParse->nMem;",
          "1901:   csrLead = pParse->nTab++;",
          "1902:   regCtr = ++pParse->nMem;",
          "",
          "[Removed Lines]",
          "1893:   lblEmpty = sqlite3VdbeMakeLabel(v);",
          "1899:   lblFlushPart = sqlite3VdbeMakeLabel(v);",
          "",
          "[Added Lines]",
          "1893:   lblEmpty = sqlite3VdbeMakeLabel(pParse);",
          "1899:   lblFlushPart = sqlite3VdbeMakeLabel(pParse);",
          "",
          "---------------"
        ]
      }
    }
  ]
}