{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8d3b66971dab2b54dd0946d85fd45a2470714a8",
      "candidate_info": {
        "commit_hash": "d8d3b66971dab2b54dd0946d85fd45a2470714a8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d8d3b66971dab2b54dd0946d85fd45a2470714a8",
        "files": [
          "apps/rehash.c"
        ],
        "message": "Make \"openssl rehash\" work on VMS 8.3 and up\n\nA spelling error prevented it from building correctly.\nFurthermore, we need to be more careful when to add a / at the end\nof the dirname and when not.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2706)\n(cherry picked from commit 5c80e2af3a7d8aa5129a1668c286c1464983e1ac)",
        "before_after_code_files": [
          "apps/rehash.c||apps/rehash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/rehash.c||apps/rehash.c": [
          "File: apps/rehash.c -> apps/rehash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"apps.h\"",
          "18: #if defined(OPENSSL_SYS_UNIX) || defined(__APPLE__) || \\",
          "20: # include <unistd.h>",
          "21: # include <stdio.h>",
          "22: # include <limits.h>",
          "",
          "[Removed Lines]",
          "19:     (defined(__VMS) && defined(__DECC) && __CTRL_VER >= 80300000)",
          "",
          "[Added Lines]",
          "19:     (defined(__VMS) && defined(__DECC) && __CRTL_VER >= 80300000)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     OPENSSL_free(s);",
          "268: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: static int ends_with_dirsep(const char *path)",
          "271: {",
          "272:     if (*path != '\\0')",
          "273:         path += strlen(path) - 1;",
          "274: # ifdef __VMS",
          "275:     if (*path == ']' || *path == '>' || *path == ':')",
          "276:         return 1;",
          "277: # elif _WIN32",
          "278:     if (*path == '\\\\')",
          "279:         return 1;",
          "280: # endif",
          "281:     return *path == '/';",
          "282: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:         return 1;",
          "290:     }",
          "291:     buflen = strlen(dirname);",
          "293:     buflen += NAME_MAX + 1 + 1;",
          "294:     buf = app_malloc(buflen, \"filename buffer\");",
          "",
          "[Removed Lines]",
          "292:     pathsep = (buflen && dirname[buflen - 1] == '/') ? \"\" : \"/\";",
          "",
          "[Added Lines]",
          "306:     pathsep = (buflen && !ends_with_dirsep(dirname)) ? \"/\": \"\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d63f25ff84740b4fd955bc2de4bb5f55b9d79adf",
      "candidate_info": {
        "commit_hash": "d63f25ff84740b4fd955bc2de4bb5f55b9d79adf",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d63f25ff84740b4fd955bc2de4bb5f55b9d79adf",
        "files": [
          "crypto/ex_data.c",
          "doc/crypto/CRYPTO_get_ex_new_index.pod",
          "include/openssl/crypto.h",
          "test/exdatatest.c"
        ],
        "message": "Fix the error handling in CRYPTO_dup_ex_data. Fix a strict aliasing issue in ui_dup_method_data. Add test coverage for CRYPTO_dup_ex_data, use OPENSSL_assert.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2997)",
        "before_after_code_files": [
          "crypto/ex_data.c||crypto/ex_data.c",
          "include/openssl/crypto.h||include/openssl/crypto.h",
          "test/exdatatest.c||test/exdatatest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ex_data.c||crypto/ex_data.c": [
          "File: crypto/ex_data.c -> crypto/ex_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:                      void *from_d, int idx,",
          "125:                      long argl, void *argp)",
          "126: {",
          "128: }",
          "130: int CRYPTO_free_ex_index(int class_index, int idx)",
          "",
          "[Removed Lines]",
          "127:     return 0;",
          "",
          "[Added Lines]",
          "127:     return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:                        const CRYPTO_EX_DATA *from)",
          "255: {",
          "256:     int mx, j, i;",
          "258:     EX_CALLBACK *stack[10];",
          "259:     EX_CALLBACK **storage = NULL;",
          "260:     EX_CALLBACKS *ip;",
          "262:     if (from->sk == NULL)",
          "",
          "[Removed Lines]",
          "257:     char *ptr;",
          "",
          "[Added Lines]",
          "257:     void *ptr;",
          "261:     int toret = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:     }",
          "281:     CRYPTO_THREAD_unlock(ex_data_lock);",
          "284:         CRYPTOerr(CRYPTO_F_CRYPTO_DUP_EX_DATA, ERR_R_MALLOC_FAILURE);",
          "285:         return 0;",
          "286:     }",
          "288:     for (i = 0; i < mx; i++) {",
          "289:         ptr = CRYPTO_get_ex_data(from, i);",
          "290:         if (storage[i] && storage[i]->dup_func)",
          "293:         CRYPTO_set_ex_data(to, i, ptr);",
          "294:     }",
          "295:     if (storage != stack)",
          "296:         OPENSSL_free(storage);",
          "298: }",
          "",
          "[Removed Lines]",
          "283:     if (mx > 0 && storage == NULL) {",
          "291:             storage[i]->dup_func(to, from, &ptr, i,",
          "292:                                  storage[i]->argl, storage[i]->argp);",
          "297:     return 1;",
          "",
          "[Added Lines]",
          "284:     if (mx == 0)",
          "285:         return 1;",
          "286:     if (storage == NULL) {",
          "290:     if (!CRYPTO_set_ex_data(to, mx - 1, NULL))",
          "291:         goto err;",
          "296:             if (!storage[i]->dup_func(to, from, &ptr, i,",
          "297:                                       storage[i]->argl, storage[i]->argp))",
          "298:                 goto err;",
          "301:     toret = 1;",
          "302:  err:",
          "305:     return toret;",
          "",
          "---------------"
        ],
        "include/openssl/crypto.h||include/openssl/crypto.h": [
          "File: include/openssl/crypto.h -> include/openssl/crypto.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "174: typedef void CRYPTO_EX_free (void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "175:                              int idx, long argl, void *argp);",
          "176: typedef int CRYPTO_EX_dup (CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,",
          "178: __owur int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,",
          "179:                             CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,",
          "180:                             CRYPTO_EX_free *free_func);",
          "",
          "[Removed Lines]",
          "177:                            void *srcp, int idx, long argl, void *argp);",
          "",
          "[Added Lines]",
          "177:                            void *from_d, int idx, long argl, void *argp);",
          "",
          "---------------"
        ],
        "test/exdatatest.c||test/exdatatest.c": [
          "File: test/exdatatest.c -> test/exdatatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <stdio.h>",
          "11: #include <string.h>",
          "12: #include <stdlib.h>",
          "14: #include <openssl/crypto.h>",
          "16: static long saved_argl;",
          "",
          "[Removed Lines]",
          "13: #include <assert.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: static void exnew(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "21:           int idx, long argl, void *argp)",
          "22: {",
          "26: }",
          "28: static int exdup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,",
          "29:           void *from_d, int idx, long argl, void *argp)",
          "30: {",
          "35: }",
          "37: static void exfree(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "38:             int idx, long argl, void *argp)",
          "39: {",
          "43: }",
          "45: typedef struct myobj_st {",
          "",
          "[Removed Lines]",
          "23:     assert(idx == saved_idx);",
          "24:     assert(argl == saved_argl);",
          "25:     assert(argp == saved_argp);",
          "31:     assert(idx == saved_idx);",
          "32:     assert(argl == saved_argl);",
          "33:     assert(argp == saved_argp);",
          "34:     return 0;",
          "40:     assert(idx == saved_idx);",
          "41:     assert(argl == saved_argl);",
          "42:     assert(argp == saved_argp);",
          "",
          "[Added Lines]",
          "22:     OPENSSL_assert(idx == saved_idx);",
          "23:     OPENSSL_assert(argl == saved_argl);",
          "24:     OPENSSL_assert(argp == saved_argp);",
          "25:     OPENSSL_assert(ptr == NULL);",
          "31:     OPENSSL_assert(idx == saved_idx);",
          "32:     OPENSSL_assert(argl == saved_argl);",
          "33:     OPENSSL_assert(argp == saved_argp);",
          "34:     OPENSSL_assert(from_d != NULL);",
          "35:     return 1;",
          "41:     OPENSSL_assert(idx == saved_idx);",
          "42:     OPENSSL_assert(argl == saved_argl);",
          "43:     OPENSSL_assert(argp == saved_argp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     obj->id = ++count;",
          "57:     obj->st = CRYPTO_new_ex_data(CRYPTO_EX_INDEX_APP, obj, &obj->ex_data);",
          "59:     return obj;",
          "60: }",
          "62: static void MYOBJ_sethello(MYOBJ *obj, char *cp)",
          "63: {",
          "64:     obj->st = CRYPTO_set_ex_data(&obj->ex_data, saved_idx, cp);",
          "66: }",
          "68: static char *MYOBJ_gethello(MYOBJ *obj)",
          "",
          "[Removed Lines]",
          "58:     assert(obj->st != 0);",
          "65:     assert(obj->st != 0);",
          "",
          "[Added Lines]",
          "59:     OPENSSL_assert(obj->st != 0);",
          "66:     OPENSSL_assert(obj->st != 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:     OPENSSL_free(obj);",
          "77: }",
          "79: int main()",
          "80: {",
          "82:     const char *cp;",
          "83:     char *p;",
          "",
          "[Removed Lines]",
          "81:     MYOBJ *t1, *t2;",
          "",
          "[Added Lines]",
          "80: static MYOBJ *MYOBJ_dup(MYOBJ *in)",
          "81: {",
          "82:     MYOBJ *obj = MYOBJ_new();",
          "84:     obj->st = CRYPTO_dup_ex_data(CRYPTO_EX_INDEX_APP, &obj->ex_data,",
          "85:                                  &in->ex_data);",
          "86:     OPENSSL_assert(obj->st != 0);",
          "87:     return obj;",
          "88: }",
          "92:     MYOBJ *t1, *t2, *t3;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:     t2 = MYOBJ_new();",
          "93:     MYOBJ_sethello(t1, p);",
          "94:     cp = MYOBJ_gethello(t1);",
          "96:     if (cp != p)",
          "97:         return 1;",
          "98:     cp = MYOBJ_gethello(t2);",
          "100:     if (cp != NULL)",
          "101:         return 1;",
          "102:     MYOBJ_free(t1);",
          "103:     MYOBJ_free(t2);",
          "104:     free(saved_argp);",
          "105:     free(p);",
          "106:     return 0;",
          "",
          "[Removed Lines]",
          "95:     assert(cp == p);",
          "99:     assert(cp == NULL);",
          "",
          "[Added Lines]",
          "106:     OPENSSL_assert(cp == p);",
          "110:     OPENSSL_assert(cp == NULL);",
          "113:     t3 = MYOBJ_dup(t1);",
          "114:     cp = MYOBJ_gethello(t3);",
          "115:     OPENSSL_assert(cp == p);",
          "116:     if (cp != p)",
          "117:         return 1;",
          "118:     cp = MYOBJ_gethello(t2);",
          "121:     MYOBJ_free(t3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7dbb4edce65446b8cd69b86ca73a48a1d7ea02a",
      "candidate_info": {
        "commit_hash": "e7dbb4edce65446b8cd69b86ca73a48a1d7ea02a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e7dbb4edce65446b8cd69b86ca73a48a1d7ea02a",
        "files": [
          "ssl/ssl_rsa.c"
        ],
        "message": "Use the callbacks from the SSL object instead of the SSL_CTX object\n\n... in functions dealing with the SSL object rather than the context.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2870)\n\n(cherry picked from commit d61461a7525322d188f9c6e3f90cfc93916cc636)",
        "before_after_code_files": [
          "ssl/ssl_rsa.c||ssl/ssl_rsa.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_rsa.c||ssl/ssl_rsa.c": [
          "File: ssl/ssl_rsa.c -> ssl/ssl_rsa.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:         x = d2i_X509_bio(in, NULL);",
          "56:     } else if (type == SSL_FILETYPE_PEM) {",
          "57:         j = ERR_R_PEM_LIB;",
          "60:     } else {",
          "61:         SSLerr(SSL_F_SSL_USE_CERTIFICATE_FILE, SSL_R_BAD_SSL_FILETYPE);",
          "62:         goto end;",
          "",
          "[Removed Lines]",
          "58:         x = PEM_read_bio_X509(in, NULL, ssl->ctx->default_passwd_callback,",
          "59:                               ssl->ctx->default_passwd_callback_userdata);",
          "",
          "[Added Lines]",
          "58:         x = PEM_read_bio_X509(in, NULL, ssl->default_passwd_callback,",
          "59:                               ssl->default_passwd_callback_userdata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:     } else if (type == SSL_FILETYPE_PEM) {",
          "188:         j = ERR_R_PEM_LIB;",
          "189:         rsa = PEM_read_bio_RSAPrivateKey(in, NULL,",
          "193:     } else {",
          "194:         SSLerr(SSL_F_SSL_USE_RSAPRIVATEKEY_FILE, SSL_R_BAD_SSL_FILETYPE);",
          "195:         goto end;",
          "",
          "[Removed Lines]",
          "190:                                          ssl->ctx->default_passwd_callback,",
          "191:                                          ssl->",
          "192:                                          ctx->default_passwd_callback_userdata);",
          "",
          "[Added Lines]",
          "190:                                          ssl->default_passwd_callback,",
          "191:                                          ssl->default_passwd_callback_userdata);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     if (type == SSL_FILETYPE_PEM) {",
          "255:         j = ERR_R_PEM_LIB;",
          "256:         pkey = PEM_read_bio_PrivateKey(in, NULL,",
          "260:     } else if (type == SSL_FILETYPE_ASN1) {",
          "261:         j = ERR_R_ASN1_LIB;",
          "262:         pkey = d2i_PrivateKey_bio(in, NULL);",
          "",
          "[Removed Lines]",
          "257:                                        ssl->ctx->default_passwd_callback,",
          "258:                                        ssl->",
          "259:                                        ctx->default_passwd_callback_userdata);",
          "",
          "[Added Lines]",
          "256:                                        ssl->default_passwd_callback,",
          "257:                                        ssl->default_passwd_callback_userdata);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ae6ff57f2667614c0bd6310f9a2856b3f5defd2",
      "candidate_info": {
        "commit_hash": "6ae6ff57f2667614c0bd6310f9a2856b3f5defd2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6ae6ff57f2667614c0bd6310f9a2856b3f5defd2",
        "files": [
          "test/ct_test.c"
        ],
        "message": "Use valid signature in test_decode_tls_sct()\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1548)\n(cherry picked from commit e2635c49f35c615820b1c6d92d180e31e28adeb2)",
        "before_after_code_files": [
          "test/ct_test.c||test/ct_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ct_test.c||test/ct_test.c": [
          "File: test/ct_test.c -> test/ct_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:     const char log_id[] = \"3xwuwRUAlFJHqWFoMl3cXHlZ6PfG04j8AC4LvT9012Q=\";",
          "514:     const uint64_t timestamp = 1;",
          "515:     const char extensions[] = \"\";",
          "519:     SETUP_CT_TEST_FIXTURE();",
          "",
          "[Removed Lines]",
          "516:     const char signature[] = \"RQIgSC9nUa8126ZUNr4f1mQPPb+aQUKUlZJFMCiPo+XiPgY\"",
          "517:         \"CIQDk7cDbOsVyseL16KtqaAZTmH3PQQJ9/v+hBVGdie2/CA==\";",
          "",
          "[Added Lines]",
          "516:     const char signature[] = \"BAMARzBAMiBIL2dRrzXbplQ2vh/WZA89v5pBQpSVkkUwKI+j5\"",
          "517:             \"eI+BgIhAOTtwNs6xXKx4vXoq2poBlOYfc9BAn3+/6EFUZ2J7b8I\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9a1525cdba39bfe1717773dda156fe6696102f8",
      "candidate_info": {
        "commit_hash": "c9a1525cdba39bfe1717773dda156fe6696102f8",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c9a1525cdba39bfe1717773dda156fe6696102f8",
        "files": [
          "test/recipes/15-test_dsa.t",
          "test/recipes/15-test_rsa.t",
          "test/recipes/tconversion.pl"
        ],
        "message": "Add conversion test for MSBLOB format.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit d922634d0c63cee01c89869d79306cd2df628855)",
        "before_after_code_files": [
          "test/recipes/15-test_dsa.t||test/recipes/15-test_dsa.t",
          "test/recipes/15-test_rsa.t||test/recipes/15-test_rsa.t",
          "test/recipes/tconversion.pl||test/recipes/tconversion.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/15-test_dsa.t||test/recipes/15-test_dsa.t": [
          "File: test/recipes/15-test_dsa.t -> test/recipes/15-test_dsa.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   tconversion(\"dsa\", srctop_file(\"test\",\"testdsa.pem\"), \"pkey\");",
          "35:      };",
          "36:      subtest 'dsa conversions -- public key' => sub {",
          "39:      };",
          "40: }",
          "",
          "[Removed Lines]",
          "37:   tconversion(\"dsa\", srctop_file(\"test\",\"testdsapub.pem\"), \"dsa\",",
          "38:        \"-pubin\", \"-pubout\");",
          "",
          "[Added Lines]",
          "37:   tconversion(\"msb\", srctop_file(\"test\",\"testdsapub.pem\"), \"dsa\",",
          "38:            \"-pubin\", \"-pubout\");",
          "",
          "---------------"
        ],
        "test/recipes/15-test_rsa.t||test/recipes/15-test_rsa.t": [
          "File: test/recipes/15-test_rsa.t -> test/recipes/15-test_rsa.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   tconversion(\"rsa\", srctop_file(\"test\",\"testrsa.pem\"), \"pkey\");",
          "36:      };",
          "37:      subtest 'rsa conversions -- public key' => sub {",
          "39:        \"-pubin\", \"-pubout\");",
          "40:      };",
          "41: }",
          "",
          "[Removed Lines]",
          "38:   tconversion(\"rsa\", srctop_file(\"test\",\"testrsapub.pem\"), \"rsa\",",
          "",
          "[Added Lines]",
          "38:   tconversion(\"msb\", srctop_file(\"test\",\"testrsapub.pem\"), \"rsa\",",
          "",
          "---------------"
        ],
        "test/recipes/tconversion.pl||test/recipes/tconversion.pl": [
          "File: test/recipes/tconversion.pl -> test/recipes/tconversion.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     # Default conversion forms.  Other series may be added with",
          "20:     # specific test types as key.",
          "21:     \"*\"  => [ \"d\", \"p\" ],",
          "22:     );",
          "23: sub tconversion {",
          "24:     my $testtype = shift;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     \"msb\" => [ \"d\", \"p\", \"msblob\" ],",
          "",
          "---------------"
        ]
      }
    }
  ]
}