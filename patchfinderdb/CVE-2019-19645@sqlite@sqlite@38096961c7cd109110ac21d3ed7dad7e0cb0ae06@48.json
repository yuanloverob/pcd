{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "35808435953097822ab86df84e02170e3b1839de",
      "candidate_info": {
        "commit_hash": "35808435953097822ab86df84e02170e3b1839de",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35808435953097822ab86df84e02170e3b1839de",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/bestindex1.test"
        ],
        "message": "Fix a fairly obscure problem causing the planner to sometimes choose sub-optimal plans for a query with a single virtual table in the FROM clause, and at least one IN(...) constraint in the WHERE clause.\n\nFossilOrigin-Name: f5752517f590b37bfc0267650f5800320e22a8ecaba34aa6893281ce8d268026",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/bestindex1.test||test/bestindex1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 040d5d515bcb37bea05e0d156dbaf066c68052ac574f1b0b2cb118d473a353e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3335:   rc = whereLoopAddVirtualOne(pBuilder, mPrereq, ALLBITS, 0, p, mNoOmit, &bIn);",
          "3345:     Bitmask mPrev = 0;",
          "",
          "[Removed Lines]",
          "3342:   if( rc==SQLITE_OK && (mBest = (pNew->prereq & ~mPrereq))!=0 ){",
          "",
          "[Added Lines]",
          "3342:   if( rc==SQLITE_OK && ((mBest = (pNew->prereq & ~mPrereq))!=0 || bIn) ){",
          "",
          "---------------"
        ],
        "test/bestindex1.test||test/bestindex1.test": [
          "File: test/bestindex1.test -> test/bestindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   4 0 ValueB 4 0 ValueB",
          "267: }",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #-------------------------------------------------------------------------",
          "270: # If there is an IN(..) condition in the WHERE clause of a query on a",
          "271: # virtual table, the xBestIndex method is first invoked with the IN(...)",
          "272: # represented by a \"usable\" SQLITE_INDEX_CONSTRAINT_EQ constraint. If",
          "273: # the virtual table elects to use the IN(...) constraint, then the",
          "274: # xBestIndex method is invoked again, this time with the IN(...) marked",
          "275: # as \"not usable\". Depending on the relative costs of the two plans as",
          "276: # defined by the virtual table implementation, and the cardinality of the",
          "277: # IN(...) operator, SQLite chooses the most efficient plan.",
          "278: #",
          "279: # At one point the second invocation of xBestIndex() was only being made",
          "280: # for join queries. The following tests check that this problem has been",
          "281: # fixed.",
          "282: #",
          "283: proc vtab_command {method args} {",
          "284:   switch -- $method {",
          "285:     xConnect {",
          "286:       return \"CREATE TABLE t1(a, b, c, d)\"",
          "287:     }",
          "289:     xBestIndex {",
          "290:       set clist [lindex $args 0]",
          "291:       lappend ::bestindex_calls $clist",
          "292:       set ret \"cost 1000000 idxnum 555\"",
          "293:       for {set i 0} {$i < [llength $clist]} {incr i} {",
          "294:         array set C [lindex $clist $i]",
          "295:         if {$C(usable)} { lappend ret use $i }",
          "296:       }",
          "297:       return $ret",
          "298:     }",
          "299:   }",
          "300:   return {}",
          "301: }",
          "303: do_execsql_test 4.0 {",
          "304:   CREATE VIRTUAL TABLE x1 USING tcl(vtab_command);",
          "305: } {}",
          "307: do_test 4.1 {",
          "308:   set ::bestindex_calls [list]",
          "309:   execsql {",
          "310:     SELECT * FROM x1 WHERE a=? AND b BETWEEN ? AND ? AND c IN (1, 2, 3, 4);",
          "311:   }",
          "312:   set ::bestindex_calls",
          "313: } [list \\",
          "314:     [list {op eq column 0 usable 1} \\",
          "315:           {op eq column 2 usable 1} \\",
          "316:           {op ge column 1 usable 1} \\",
          "317:           {op le column 1 usable 1} \\",
          "318:     ] \\",
          "319:     [list {op eq column 0 usable 1} \\",
          "320:           {op eq column 2 usable 0} \\",
          "321:           {op ge column 1 usable 1} \\",
          "322:           {op le column 1 usable 1}",
          "323:     ]",
          "324: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2712b022abeb6c3d3ca0f1253bbbcca404e52b8a",
      "candidate_info": {
        "commit_hash": "2712b022abeb6c3d3ca0f1253bbbcca404e52b8a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2712b022abeb6c3d3ca0f1253bbbcca404e52b8a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/view.test"
        ],
        "message": "Ensure that when the col in an operator like \"val IN(col)\" is a column of a view, its affinity is not used to coerce val. Fix for [0a5e2c1d].\n\nFossilOrigin-Name: 17b3d2218c02a4005d4c96471c452105b54abb25901ae62990b01f0c955135fe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/view.test||test/view.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 509c1ba26a4c12c63ecf04ddfa2f175eaf4dd9b96ab7be15faebd36deb0a0a31",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3476:           pNew->iRightJoinTable = pExpr->iRightJoinTable;",
          "3477:           ExprSetProperty(pNew, EP_FromJoin);",
          "3478:         }",
          "3479:         sqlite3ExprDelete(db, pExpr);",
          "3480:         pExpr = pNew;",
          "3481:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3479:         if( pNew && ExprHasProperty(pExpr,EP_Generic) ){",
          "3480:           ExprSetProperty(pNew, EP_Generic);",
          "3481:         }",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "764: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "764: #-------------------------------------------------------------------------",
          "765: reset_db",
          "766: do_execsql_test view-28.0 {",
          "767:   CREATE TABLE t0(c0 TEXT);",
          "768:   CREATE VIEW v0(c0) AS SELECT t0.c0 FROM t0;",
          "769:   INSERT INTO t0(c0) VALUES ('0');",
          "770: }",
          "771: do_execsql_test view-28.1 {",
          "772:   SELECT 0 IN (c0) FROM t0;",
          "773: } {0}",
          "774: do_execsql_test view-28.2 {",
          "775:   SELECT 0 IN (c0) FROM (SELECT c0 FROM t0);",
          "776: } {0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48646e497bbd423a4e207ee578ce86044d2237df",
      "candidate_info": {
        "commit_hash": "48646e497bbd423a4e207ee578ce86044d2237df",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48646e497bbd423a4e207ee578ce86044d2237df",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/chunksize.test"
        ],
        "message": "Add a test case for the unix SQLITE_FCNTL_CHUNK_SIZE file-control.\n\nFossilOrigin-Name: 3a477fd0c944440be03d23c667053b346c769c6a4f6ba1ef094b7581a08d7bd4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/chunksize.test||test/chunksize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4979f138e8c8bef7dd6b5921fb9ca9fea86bbf7ec1419934bb2d1a0d74e77183",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/chunksize.test||test/chunksize.test": [
          "File: test/chunksize.test -> test/chunksize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 June 5",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix chunksize",
          "17: if {$::tcl_platform(platform)!=\"unix\"} {",
          "18:   finish_test",
          "19:   return",
          "20: }",
          "22: foreach {tn jrnlmode} {",
          "23:   1 delete",
          "24:   2 wal",
          "25: } {",
          "26:   reset_db",
          "27:   file_control_chunksize_test db main 32768",
          "28:   do_execsql_test $tn.0 \" PRAGMA journal_mode = $jrnlmode \" $jrnlmode",
          "29:   do_execsql_test $tn.1 {",
          "30:     CREATE TABLE t1(a, b);",
          "31:     INSERT INTO t1 VALUES(1, 2);",
          "32:   }",
          "34:   execsql { PRAGMA wal_checkpoint }",
          "36:   do_test $tn.2 {",
          "37:     file size test.db",
          "38:   } 32768",
          "39: }",
          "41: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c8f40389ea950077ec8e265b4d9cb7a15e2bc58",
      "candidate_info": {
        "commit_hash": "0c8f40389ea950077ec8e265b4d9cb7a15e2bc58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0c8f40389ea950077ec8e265b4d9cb7a15e2bc58",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/vdbeapi.c",
          "test/intreal.test"
        ],
        "message": "Add the SQLITE_TESTCTRL_RESULT_INTREAL test-control and use it to create the intreal() SQL function in testfixture.  Write a few simple tests to prove this all works.  TH3 will hold most of the INTREAL tests, probably.\n\nFossilOrigin-Name: c9838731325e0ca73bd8784c10c74ae043fed7861e6de269fd90e29fa4a19955",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f73a7de7a53f6aa6517221550a9c9882893206edfd7433e80e5fc0f441db9fc4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4104:       break;",
          "4105:     }",
          "4107:   }",
          "4108:   va_end(ap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4118:     case SQLITE_TESTCTRL_RESULT_INTREAL: {",
          "4119:       sqlite3_context *pCtx = va_arg(ap, sqlite3_context*);",
          "4120:       sqlite3ResultIntReal(pCtx);",
          "4121:       break;",
          "4122:     }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7319: #define SQLITE_TESTCTRL_SORTER_MMAP             24",
          "7320: #define SQLITE_TESTCTRL_IMPOSTER                25",
          "7321: #define SQLITE_TESTCTRL_PARSER_COVERAGE         26",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7322: #define SQLITE_TESTCTRL_RESULT_INTREAL          27",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4272:                         void(*)(void*));",
          "4273: void sqlite3ValueSetNull(sqlite3_value*);",
          "4274: void sqlite3ValueFree(sqlite3_value*);",
          "4275: sqlite3_value *sqlite3ValueNew(sqlite3 *);",
          "4276: #ifndef SQLITE_OMIT_UTF16",
          "4277: char *sqlite3Utf16to8(sqlite3 *, const void*, int, u8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4275: #ifndef SQLITE_UNTESTABLE",
          "4276: void sqlite3ResultIntReal(sqlite3_context*);",
          "4277: #endif",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "998:   sqlite3_result_int(context, cnt++);",
          "999: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005: static void intrealFunction(",
          "1006:   sqlite3_context *context,",
          "1007:   int argc,",
          "1008:   sqlite3_value **argv",
          "1009: ){",
          "1010:   sqlite3_int64 v = sqlite3_value_int64(argv[0]);",
          "1011:   sqlite3_result_int64(context, v);",
          "1012:   sqlite3_test_control(SQLITE_TESTCTRL_RESULT_INTREAL, context);",
          "1013: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1062:           0, nondeterministicFunction, 0, 0);",
          "1063:   }",
          "1065: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082:   if( rc==SQLITE_OK ){",
          "1083:     rc = sqlite3_create_function(db, \"intreal\", 1, SQLITE_UTF8,",
          "1084:           0, intrealFunction, 0, 0);",
          "1085:   }",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:   sqlite3OomFault(pCtx->pOut->db);",
          "564: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566: #ifndef SQLITE_UNTESTABLE",
          "571: void sqlite3ResultIntReal(sqlite3_context *pCtx){",
          "572:   assert( sqlite3_mutex_held(pCtx->pOut->db->mutex) );",
          "573:   if( pCtx->pOut->flags & MEM_Int ){",
          "574:     pCtx->pOut->flags &= ~MEM_Int;",
          "575:     pCtx->pOut->flags |= MEM_IntReal;",
          "576:   }",
          "577: }",
          "578: #endif",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-05-03",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Tests to exercise the MEM_IntReal representation of Mem objects.",
          "12: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set ::testprefix intreal",
          "17: sqlite3_create_function db",
          "18: do_execsql_test 100 {",
          "19:   SELECT intreal(5);",
          "20: } {5.0}",
          "21: do_execsql_test 110 {",
          "22:   SELECT intreal(5)=5, 6=intreal(6);",
          "23: } {1 1}",
          "24: do_execsql_test 120 {",
          "25:   SELECT intreal(7)=7.0, 8.0=intreal(8);",
          "26: } {1 1}",
          "27: do_execsql_test 130 {",
          "28:   SELECT typeof(intreal(9));",
          "29: } {real}",
          "30: do_execsql_test 140 {",
          "31:   SELECT 'a'||intreal(11)||'z';",
          "32: } {a11.0z}",
          "34: do_execsql_test 150 {",
          "35:   SELECT max(1.0,intreal(2),3.0), max(1,intreal(2),3);",
          "36: } {3.0 3}",
          "37: do_execsql_test 160 {",
          "38:   SELECT max(1.0,intreal(4),3.0), max(1,intreal(4),3);",
          "39: } {4.0 4.0}",
          "40: do_execsql_test 170 {",
          "41:   SELECT max(1.0,intreal(2),intreal(3),4.0),",
          "42:          max(1,intreal(2),intreal(3),4);",
          "43: } {4.0 4}",
          "44: do_execsql_test 180 {",
          "45:   SELECT max(1.0,intreal(5),intreal(3),4.0),",
          "46:          max(1,intreal(5),intreal(3),4);",
          "47: } {5.0 5.0}",
          "52: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d137f4e6e5b7d7715a0a752c88dd4af533f9b352",
      "candidate_info": {
        "commit_hash": "d137f4e6e5b7d7715a0a752c88dd4af533f9b352",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d137f4e6e5b7d7715a0a752c88dd4af533f9b352",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h"
        ],
        "message": "Recover a some of the performance lost by window function alias fix two check-ins back.\n\nFossilOrigin-Name: 965cbcea117835d2c6d2ec58c8025b227f491c35805e282cb31228436bc6bec1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f908cd40b275a5753d5167ebb25871300381687adcb3a7fcb1f14b57a20ee3d0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1673: #if SQLITE_MAX_EXPR_DEPTH>0",
          "1674:   w.pParse->nHeight -= pExpr->nHeight;",
          "1675: #endif",
          "1682:   pNC->ncFlags |= savedHasAgg;",
          "1683:   return pNC->nErr>0 || w.pParse->nErr>0;",
          "1684: }",
          "",
          "[Removed Lines]",
          "1676:   if( pNC->ncFlags & NC_HasAgg ){",
          "1677:     ExprSetProperty(pExpr, EP_Agg);",
          "1678:   }",
          "1679:   if( pNC->ncFlags & NC_HasWin ){",
          "1680:     ExprSetProperty(pExpr, EP_Win);",
          "1681:   }",
          "",
          "[Added Lines]",
          "1676:   assert( EP_Agg==NC_HasAgg );",
          "1677:   assert( EP_Win==NC_HasWin );",
          "1678:   testcase( pNC->ncFlags & NC_HasAgg );",
          "1679:   testcase( pNC->ncFlags & NC_HasWin );",
          "1680:   ExprSetProperty(pExpr, pNC->ncFlags & (NC_HasAgg|NC_HasWin) );",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    }
  ]
}