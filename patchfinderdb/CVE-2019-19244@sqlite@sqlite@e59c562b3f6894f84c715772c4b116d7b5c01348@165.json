{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b10a50e7f829f7038242db6f52b557e7624df412",
      "candidate_info": {
        "commit_hash": "b10a50e7f829f7038242db6f52b557e7624df412",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b10a50e7f829f7038242db6f52b557e7624df412",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "In dbfuzz2, avoid using a malloc in the LLVMFuzzerInitialize() initializer routine, so that no memory leaks are reported.  Also, show the version of SQLite being used when the -v option is on.\n\nFossilOrigin-Name: 824f93246988ffa213bbd41a7de08886999b1a8ae00fdf6b9767acb6e3ec6a1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97e723d746eeb2159f5bf1701532271ac6a4620879c82d496f4499c178b64479",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: int LLVMFuzzerInitialize(int *pArgc, char ***pArgv){",
          "135:   int i, j, n;",
          "136:   int argc = *pArgc;",
          "138:   char **argv = *pArgv;",
          "142:   for(i=j=1; i<argc; i++){",
          "143:     char *z = argv[i];",
          "144:     if( z[0]=='-' ){",
          "",
          "[Removed Lines]",
          "137:   char **newArgv;",
          "139:   newArgv = malloc( sizeof(char*)*(argc+1) );",
          "140:   if( newArgv==0 ) return 0;",
          "141:   newArgv[0] = argv[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         continue;",
          "154:       }",
          "155:     }",
          "157:   }",
          "161:   return 0;",
          "162: }",
          "",
          "[Removed Lines]",
          "156:     newArgv[j++] = argv[i];",
          "158:   newArgv[j] = 0;",
          "",
          "[Added Lines]",
          "152:     argv[j++] = argv[i];",
          "154:   argv[j] = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:       free(pIn);",
          "203:     }",
          "204:   }",
          "205:   return 0;",
          "206: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:   if( eVerbosity>0 ){",
          "201:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "202:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "368bfe8b008d1c4de12059c13750954db1b21dc9",
      "candidate_info": {
        "commit_hash": "368bfe8b008d1c4de12059c13750954db1b21dc9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/368bfe8b008d1c4de12059c13750954db1b21dc9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/vdbeapi.c"
        ],
        "message": "Small performance improvement in the sqlite3_bind() family of interfaces.\n\nFossilOrigin-Name: 1dc0c3df32572f09265fc73eeaa0748159e0e9523b9b2d6768b834a29c909968",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c96bf6cca220e363b099455ce35195ce7e89d374a52dc787f56e7b11e587bced",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2405:     z = sqlite3ErrStr(SQLITE_NOMEM_BKPT);",
          "2406:   }else{",
          "2407:     testcase( db->pErr==0 );",
          "2409:     assert( !db->mallocFailed );",
          "2410:     if( z==0 ){",
          "2411:       z = sqlite3ErrStr(db->errCode);",
          "",
          "[Removed Lines]",
          "2408:     z = (char*)sqlite3_value_text(db->pErr);",
          "",
          "[Added Lines]",
          "2408:     z = db->errCode ? (char*)sqlite3_value_text(db->pErr) : 0;",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1286:   pVar = &p->aVar[i];",
          "1287:   sqlite3VdbeMemRelease(pVar);",
          "1288:   pVar->flags = MEM_Null;",
          "",
          "[Removed Lines]",
          "1289:   sqlite3Error(p->db, SQLITE_OK);",
          "",
          "[Added Lines]",
          "1289:   p->db->errCode = SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
      "candidate_info": {
        "commit_hash": "b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid reading outside a record buffer when extracting an SQL value in the sqlite_dbdata virtual table code.\n\nFossilOrigin-Name: d99bb0c11d62f629bf59da037827af73a9b814e65815006e0cbca1bc41f42e25",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:     case 7:",
          "383:       return 8;",
          "384:     default:",
          "386:   }",
          "387: }",
          "",
          "[Removed Lines]",
          "385:       return ((eType-12) / 2);",
          "",
          "[Added Lines]",
          "385:       if( eType>0 ){",
          "386:         return ((eType-12) / 2);",
          "387:       }",
          "388:       return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:       }",
          "436:       }",
          "437:     }",
          "438:   }",
          "439: }",
          "",
          "[Removed Lines]",
          "393: static void dbdataValue(sqlite3_context *pCtx, int eType, u8 *pData){",
          "394:   switch( eType ){",
          "395:     case 0:",
          "396:     case 10:",
          "397:     case 11:",
          "398:       sqlite3_result_null(pCtx);",
          "399:       break;",
          "401:     case 8:",
          "402:       sqlite3_result_int(pCtx, 0);",
          "403:       break;",
          "404:     case 9:",
          "405:       sqlite3_result_int(pCtx, 1);",
          "406:       break;",
          "408:     case 1: case 2: case 3: case 4: case 5: case 6: case 7: {",
          "409:       sqlite3_uint64 v = (signed char)pData[0];",
          "410:       pData++;",
          "411:       switch( eType ){",
          "412:         case 7:",
          "413:         case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "414:         case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "415:         case 4:  v = (v<<8) + pData[0];  pData++;",
          "416:         case 3:  v = (v<<8) + pData[0];  pData++;",
          "417:         case 2:  v = (v<<8) + pData[0];  pData++;",
          "418:       }",
          "420:       if( eType==7 ){",
          "421:         double r;",
          "422:         memcpy(&r, &v, sizeof(r));",
          "423:         sqlite3_result_double(pCtx, r);",
          "424:       }else{",
          "425:         sqlite3_result_int64(pCtx, (sqlite3_int64)v);",
          "427:       break;",
          "428:     }",
          "430:     default: {",
          "431:       int n = ((eType-12) / 2);",
          "432:       if( eType % 2 ){",
          "433:         sqlite3_result_text(pCtx, (const char*)pData, n, SQLITE_TRANSIENT);",
          "434:       }else{",
          "435:         sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "396: static void dbdataValue(",
          "397:   sqlite3_context *pCtx,",
          "398:   int eType,",
          "399:   u8 *pData,",
          "400:   int nData",
          "401: ){",
          "402:   if( eType>=0 && dbdataValueBytes(eType)<=nData ){",
          "403:     switch( eType ){",
          "404:       case 0:",
          "405:       case 10:",
          "406:       case 11:",
          "407:         sqlite3_result_null(pCtx);",
          "408:         break;",
          "410:       case 8:",
          "411:         sqlite3_result_int(pCtx, 0);",
          "412:         break;",
          "413:       case 9:",
          "414:         sqlite3_result_int(pCtx, 1);",
          "415:         break;",
          "417:       case 1: case 2: case 3: case 4: case 5: case 6: case 7: {",
          "418:         sqlite3_uint64 v = (signed char)pData[0];",
          "419:         pData++;",
          "420:         switch( eType ){",
          "421:           case 7:",
          "422:           case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "423:           case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "424:           case 4:  v = (v<<8) + pData[0];  pData++;",
          "425:           case 3:  v = (v<<8) + pData[0];  pData++;",
          "426:           case 2:  v = (v<<8) + pData[0];  pData++;",
          "427:         }",
          "429:         if( eType==7 ){",
          "430:           double r;",
          "431:           memcpy(&r, &v, sizeof(r));",
          "432:           sqlite3_result_double(pCtx, r);",
          "433:         }else{",
          "434:           sqlite3_result_int64(pCtx, (sqlite3_int64)v);",
          "435:         }",
          "436:         break;",
          "439:       default: {",
          "440:         int n = ((eType-12) / 2);",
          "441:         if( eType % 2 ){",
          "442:           sqlite3_result_text(pCtx, (const char*)pData, n, SQLITE_TRANSIENT);",
          "443:         }else{",
          "444:           sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);",
          "445:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "728:         }else{",
          "729:           sqlite3_int64 iType;",
          "730:           dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "732:         }",
          "733:         break;",
          "734:       }",
          "",
          "[Removed Lines]",
          "731:           dbdataValue(ctx, iType, pCsr->pPtr);",
          "",
          "[Added Lines]",
          "740:           dbdataValue(",
          "741:               ctx, iType, pCsr->pPtr, &pCsr->pRec[pCsr->nRec] - pCsr->pPtr",
          "742:           );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec9373031d76b34163a45d0ed05e43c0c9d585c8d47aa255f670340673bc7875",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aaad696141fdb4d72e9c8289e7d9183f9493c23f",
      "candidate_info": {
        "commit_hash": "aaad696141fdb4d72e9c8289e7d9183f9493c23f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/aaad696141fdb4d72e9c8289e7d9183f9493c23f",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/showdb.c"
        ],
        "message": "Fix a potential 32-bit integer overflow in the \"showdb\" utility program when it is trying to interpret a corrupt database file.\n\nFossilOrigin-Name: 3803e750384ec37091b0a6c350f8ef67720e316fd6f74c95e3c5f231c4a01ceb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/showdb.c||tool/showdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 38d2e510cdedf38153466b161c0842b1604aef7b5589c51f628ae7cbb6a8722a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/showdb.c||tool/showdb.c": [
          "File: tool/showdb.c -> tool/showdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:     while( ovfl && (cnt++)<g.mxPage ){",
          "829:       page_usage_msg(ovfl, \"overflow %d from cell %d of page %d\",",
          "830:                      cnt, cellno, pgno);",
          "832:       ovfl = decodeInt32(a);",
          "833:       sqlite3_free(a);",
          "834:     }",
          "",
          "[Removed Lines]",
          "831:       a = fileRead((ovfl-1)*g.pagesize, 4);",
          "",
          "[Added Lines]",
          "831:       a = fileRead((ovfl-1)*(sqlite3_int64)g.pagesize, 4);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
      "candidate_info": {
        "commit_hash": "992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/992e927281ea23f7c2e5a8c2d449bfe04a8ea3f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/vacuum-into.test"
        ],
        "message": "Add test cases for commit [6c6fb1c6].\n\nFossilOrigin-Name: 3961995cb56b43f1753c53fc869edf336f1c17ec994d67dc74e44e8e02493894",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c6fb1c6ea452c70b56fd4ac796affebee21512adba0455ae81c291b715f544f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: do_catchsql_test vacuum-into-320 {",
          "69:   VACUUM INTO x;",
          "70: } {1 {no such column: x}}",
          "72: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: } {1 {no such column: nosuchcol}}",
          "72: do_catchsql_test vacuum-into-330 {",
          "73:   VACUUM INTO t1.nosuchcol;",
          "74: } {1 {no such column: t1.nosuchcol}}",
          "76: forcedelete test.db2",
          "77: db func target target",
          "78: proc target {} { return \"test.db2\" }",
          "79: do_test vacuum-into-410 {",
          "80:   execsql { VACUUM INTO target() }",
          "81:   file exists test.db2",
          "82: } 1",
          "83: do_catchsql_test vacuum-into-420 {",
          "84:   VACUUM INTO target2()",
          "85: } {1 {no such function: target2}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}