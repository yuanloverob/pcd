{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90ed28b7979954d075c4a58c083dee931205ef2e",
      "candidate_info": {
        "commit_hash": "90ed28b7979954d075c4a58c083dee931205ef2e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/90ed28b7979954d075c4a58c083dee931205ef2e",
        "files": [
          "crypto/modes/asm/ghash-armv4.pl"
        ],
        "message": "modes/asm/ghash-armv4.pl: improve interoperability with Android NDK.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit 6cf412c473d8145562b76219ce3da73b201b3255)",
        "before_after_code_files": [
          "crypto/modes/asm/ghash-armv4.pl||crypto/modes/asm/ghash-armv4.pl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/modes/asm/ghash-armv4.pl||crypto/modes/asm/ghash-armv4.pl": [
          "File: crypto/modes/asm/ghash-armv4.pl -> crypto/modes/asm/ghash-armv4.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "143: #include \"arm_arch.h\"",
          "145: .text",
          "147: .syntax unified",
          "148: .thumb",
          "149: #else",
          "150: .code 32",
          "",
          "[Removed Lines]",
          "146: #if defined(__thumb2__)",
          "",
          "[Added Lines]",
          "146: #if defined(__thumb2__) || defined(__clang__)",
          "148: #endif",
          "149: #if defined(__thumb2__)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e4a7023aa1d713969879110caa25338390ef68e",
      "candidate_info": {
        "commit_hash": "9e4a7023aa1d713969879110caa25338390ef68e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9e4a7023aa1d713969879110caa25338390ef68e",
        "files": [
          "test/recipes/70-test_sslcbcpadding.t"
        ],
        "message": "Switch back to assuming TLS 1.2.\n\nThe TLSProxy::Record->new call hard-codes a version, like\n70-test_sslrecords.t.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit f3ea8d77080580979be086d97879ebc8b72f970a)",
        "before_after_code_files": [
          "test/recipes/70-test_sslcbcpadding.t||test/recipes/70-test_sslcbcpadding.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/70-test_sslcbcpadding.t||test/recipes/70-test_sslcbcpadding.t": [
          "File: test/recipes/70-test_sslcbcpadding.t -> test/recipes/70-test_sslcbcpadding.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: plan skip_all => \"$test_name needs the sock feature enabled\"",
          "24:     if disabled(\"sock\");",
          "29: $ENV{OPENSSL_ia32cap} = '~0x200000200000000';",
          "30: my $proxy = TLSProxy::Proxy->new(",
          "",
          "[Removed Lines]",
          "26: plan skip_all => \"$test_name needs TLSv1.1 enabled\"",
          "27:     if disabled(\"tls1_1\");",
          "",
          "[Added Lines]",
          "26: plan skip_all => \"$test_name needs TLSv1.2 enabled\"",
          "27:     if disabled(\"tls1_2\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08a78f8c444cd8a66f847f250ee0974774d3e0e4",
      "candidate_info": {
        "commit_hash": "08a78f8c444cd8a66f847f250ee0974774d3e0e4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/08a78f8c444cd8a66f847f250ee0974774d3e0e4",
        "files": [
          "apps/s_client.c"
        ],
        "message": "fix memory leak\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\n(cherry picked from commit eb67172ae53da63a6ff5189dfde2af8f98309ce3)",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2474: #ifndef OPENSSL_NO_SRP",
          "2475:     OPENSSL_free(srp_arg.srppassin);",
          "2476: #endif",
          "2477:     OPENSSL_free(host);",
          "2478:     OPENSSL_free(port);",
          "2479:     X509_VERIFY_PARAM_free(vpm);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2477:     OPENSSL_free(connectstr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c0ead5c68f2707f7158a251520dcd63d768a7f4",
      "candidate_info": {
        "commit_hash": "0c0ead5c68f2707f7158a251520dcd63d768a7f4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0c0ead5c68f2707f7158a251520dcd63d768a7f4",
        "files": [
          "test/evp_test.c"
        ],
        "message": "Remove BIO_seek/BIO_tell from evp_test.c\n\nBIO_seek and BIO_tell can cause problems with evp_test.c on some platforms.\nAvoid them by using a temporary memory BIO to store key PEM data.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2183)\n(cherry picked from commit 71f60ef3376144885384f2b1b3f00c3d54806f38)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: struct evp_test {",
          "199:     BIO *in;",
          "201:     struct key_list *private;",
          "202:     struct key_list *public;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:     BIO *key;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "459:     return 0;",
          "460: }",
          "462: static int process_test(struct evp_test *t, char *buf, int verbose)",
          "463: {",
          "464:     char *keyword = NULL, *value = NULL;",
          "465:     int rv = 0, add_key = 0;",
          "467:     struct key_list **lst = NULL, *key = NULL;",
          "468:     EVP_PKEY *pk = NULL;",
          "469:     const struct evp_test_method *tmeth = NULL;",
          "",
          "[Removed Lines]",
          "466:     long save_pos = 0;",
          "",
          "[Added Lines]",
          "465: static int read_key(struct evp_test *t)",
          "466: {",
          "467:     char tmpbuf[80];",
          "468:     if (t->key == NULL)",
          "469:         t->key = BIO_new(BIO_s_mem());",
          "470:     else if (BIO_reset(t->key) <= 0)",
          "471:         return 0;",
          "472:     if (t->key == NULL) {",
          "473:         fprintf(stderr, \"Error allocating key memory BIO\\n\");",
          "474:         return 0;",
          "475:     }",
          "477:     while (BIO_gets(t->in, tmpbuf, sizeof(tmpbuf))) {",
          "478:         t->line++;",
          "479:         if (BIO_puts(t->key, tmpbuf) <= 0) {",
          "480:             fprintf(stderr, \"Error writing to key memory BIO\\n\");",
          "481:             return 0;",
          "482:         }",
          "483:         if (strncmp(tmpbuf, \"-----END\", 8) == 0)",
          "484:             return 1;",
          "485:     }",
          "486:     fprintf(stderr, \"Can't find key end\\n\");",
          "487:     return 0;",
          "488: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:     if (!parse_line(&keyword, &value, buf))",
          "473:         return 1;",
          "474:     if (strcmp(keyword, \"PrivateKey\") == 0) {",
          "477:         if (pk == NULL && !check_unsupported()) {",
          "478:             fprintf(stderr, \"Error reading private key %s\\n\", value);",
          "479:             ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "475:         save_pos = BIO_tell(t->in);",
          "476:         pk = PEM_read_bio_PrivateKey(t->in, NULL, 0, NULL);",
          "",
          "[Added Lines]",
          "502:         if (!read_key(t))",
          "503:             return 0;",
          "504:         pk = PEM_read_bio_PrivateKey(t->key, NULL, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "483:         add_key = 1;",
          "484:     }",
          "485:     if (strcmp(keyword, \"PublicKey\") == 0) {",
          "488:         if (pk == NULL && !check_unsupported()) {",
          "489:             fprintf(stderr, \"Error reading public key %s\\n\", value);",
          "490:             ERR_print_errors_fp(stderr);",
          "",
          "[Removed Lines]",
          "486:         save_pos = BIO_tell(t->in);",
          "487:         pk = PEM_read_bio_PUBKEY(t->in, NULL, 0, NULL);",
          "",
          "[Added Lines]",
          "514:         if (!read_key(t))",
          "515:             return 0;",
          "516:         pk = PEM_read_bio_PUBKEY(t->key, NULL, 0, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "495:     }",
          "497:     if (add_key) {",
          "499:         if (find_key(NULL, value, *lst)) {",
          "500:             fprintf(stderr, \"Duplicate key %s\\n\", value);",
          "501:             return 0;",
          "",
          "[Removed Lines]",
          "498:         char tmpbuf[80];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "507:         key->key = pk;",
          "508:         key->next = *lst;",
          "519:     }",
          "",
          "[Removed Lines]",
          "511:         (void)BIO_seek(t->in, save_pos);",
          "512:         while (BIO_gets(t->in,tmpbuf, sizeof(tmpbuf))) {",
          "513:             t->line++;",
          "514:             if (strncmp(tmpbuf, \"-----END\", 8) == 0)",
          "515:                 return 1;",
          "516:         }",
          "517:         fprintf(stderr, \"Can't find key end\\n\");",
          "518:         return 0;",
          "",
          "[Added Lines]",
          "538:         return 1;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "639:             t.ntests, t.errors, t.nskip);",
          "640:     free_key_list(t.public);",
          "641:     free_key_list(t.private);",
          "642:     BIO_free(in);",
          "644: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:     BIO_free(t.key);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69bb97c6d65250324a65fbb6fcac3fefb59d242a",
      "candidate_info": {
        "commit_hash": "69bb97c6d65250324a65fbb6fcac3fefb59d242a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/69bb97c6d65250324a65fbb6fcac3fefb59d242a",
        "files": [
          "crypto/o_dir.c"
        ],
        "message": "Fix typo, missing ||\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2707)\n(cherry picked from commit 6eb837583758506607f538fe2a3dd87925e4e69d)",
        "before_after_code_files": [
          "crypto/o_dir.c||crypto/o_dir.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/o_dir.c||crypto/o_dir.c": [
          "File: crypto/o_dir.c -> crypto/o_dir.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #define LPDIR_H",
          "26: #if defined OPENSSL_SYS_UNIX || defined DJGPP \\",
          "28: # include \"LPdir_unix.c\"",
          "29: #elif defined OPENSSL_SYS_VMS",
          "30: # include \"LPdir_vms.c\"",
          "",
          "[Removed Lines]",
          "27:     (defined __VMS_VER && __VMS_VER >= 70000000)",
          "",
          "[Added Lines]",
          "27:     || (defined __VMS_VER && __VMS_VER >= 70000000)",
          "",
          "---------------"
        ]
      }
    }
  ]
}