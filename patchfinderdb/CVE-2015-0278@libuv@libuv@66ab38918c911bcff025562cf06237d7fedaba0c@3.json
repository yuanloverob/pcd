{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8041c52fcd7e2a58c142b116356090132c1c7251",
      "candidate_info": {
        "commit_hash": "8041c52fcd7e2a58c142b116356090132c1c7251",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8041c52fcd7e2a58c142b116356090132c1c7251",
        "files": [
          "src/unix/aix.c",
          "src/unix/darwin.c",
          "src/unix/linux-core.c",
          "src/unix/netbsd.c",
          "src/unix/stream.c",
          "src/unix/sunos.c"
        ],
        "message": "unix: style fixups",
        "before_after_code_files": [
          "src/unix/aix.c||src/unix/aix.c",
          "src/unix/darwin.c||src/unix/darwin.c",
          "src/unix/linux-core.c||src/unix/linux-core.c",
          "src/unix/netbsd.c||src/unix/netbsd.c",
          "src/unix/stream.c||src/unix/stream.c",
          "src/unix/sunos.c||src/unix/sunos.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/aix.c||src/unix/aix.c": [
          "File: src/unix/aix.c -> src/unix/aix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:     address->name = strdup(p->ifr_name);",
          "366:     if (p->ifr_addr.sa_family == AF_INET6) {",
          "368:     } else {",
          "370:     }",
          "",
          "[Removed Lines]",
          "367:       address->address.address6 = *((struct sockaddr_in6 *)&p->ifr_addr);",
          "369:       address->address.address4 = *((struct sockaddr_in *)&p->ifr_addr);",
          "",
          "[Added Lines]",
          "367:       address->address.address6 = *((struct sockaddr_in6*) &p->ifr_addr);",
          "369:       address->address.address4 = *((struct sockaddr_in*) &p->ifr_addr);",
          "",
          "---------------"
        ],
        "src/unix/darwin.c||src/unix/darwin.c": [
          "File: src/unix/darwin.c -> src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:     address->name = strdup(ent->ifa_name);",
          "405:     if (ent->ifa_addr->sa_family == AF_INET6) {",
          "407:     } else {",
          "409:     }",
          "411:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "413:     } else {",
          "415:     }",
          "417:     address->is_internal = ent->ifa_flags & IFF_LOOPBACK ? 1 : 0;",
          "",
          "[Removed Lines]",
          "406:       address->address.address6 = *((struct sockaddr_in6 *)ent->ifa_addr);",
          "408:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "412:       address->netmask.netmask6 = *((struct sockaddr_in6 *)ent->ifa_netmask);",
          "414:       address->netmask.netmask4 = *((struct sockaddr_in *)ent->ifa_netmask);",
          "",
          "[Added Lines]",
          "406:       address->address.address6 = *((struct sockaddr_in6*) ent->ifa_addr);",
          "408:       address->address.address4 = *((struct sockaddr_in*) ent->ifa_addr);",
          "412:       address->netmask.netmask6 = *((struct sockaddr_in6*) ent->ifa_netmask);",
          "414:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "",
          "---------------"
        ],
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:     address->name = strdup(ent->ifa_name);",
          "690:     if (ent->ifa_addr->sa_family == AF_INET6) {",
          "692:     } else {",
          "694:     }",
          "696:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "698:     } else {",
          "700:     }",
          "702:     address->is_internal = ent->ifa_flags & IFF_LOOPBACK ? 1 : 0;",
          "",
          "[Removed Lines]",
          "691:       address->address.address6 = *((struct sockaddr_in6 *)ent->ifa_addr);",
          "693:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "697:       address->netmask.netmask6 = *((struct sockaddr_in6 *)ent->ifa_netmask);",
          "699:       address->netmask.netmask4 = *((struct sockaddr_in *)ent->ifa_netmask);",
          "",
          "[Added Lines]",
          "691:       address->address.address6 = *((struct sockaddr_in6*) ent->ifa_addr);",
          "693:       address->address.address4 = *((struct sockaddr_in*) ent->ifa_addr);",
          "697:       address->netmask.netmask6 = *((struct sockaddr_in6*) ent->ifa_netmask);",
          "699:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "",
          "---------------"
        ],
        "src/unix/netbsd.c||src/unix/netbsd.c": [
          "File: src/unix/netbsd.c -> src/unix/netbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     address->name = strdup(ent->ifa_name);",
          "328:     if (ent->ifa_addr->sa_family == AF_INET6) {",
          "330:     } else {",
          "332:     }",
          "334:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "336:     } else {",
          "338:     }",
          "340:     address->is_internal = !!(ent->ifa_flags & IFF_LOOPBACK) ? 1 : 0;",
          "",
          "[Removed Lines]",
          "329:       address->address.address6 = *((struct sockaddr_in6 *)ent->ifa_addr);",
          "331:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "335:       address->netmask.netmask6 = *((struct sockaddr_in6 *)ent->ifa_netmask);",
          "337:       address->netmask.netmask4 = *((struct sockaddr_in *)ent->ifa_netmask);",
          "",
          "[Added Lines]",
          "329:       address->address.address6 = *((struct sockaddr_in6*) ent->ifa_addr);",
          "331:       address->address.address4 = *((struct sockaddr_in*) ent->ifa_addr);",
          "335:       address->netmask.netmask6 = *((struct sockaddr_in6*) ent->ifa_netmask);",
          "337:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:       msg.msg_namelen = 0;",
          "968:       msg.msg_controllen = 64;",
          "971:       do {",
          "972:         nread = recvmsg(uv__stream_fd(stream), &msg, 0);",
          "",
          "[Removed Lines]",
          "969:       msg.msg_control = (void *) cmsg_space;",
          "",
          "[Added Lines]",
          "969:       msg.msg_control = (void*)  cmsg_space;",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "322:     if ((r == -1 && errno == ETIME) || n == 0)",
          "323:       break;",
          "326:     assert((r == 0) && \"unexpected port_get() error\");",
          "328:     events = 0;",
          "",
          "[Removed Lines]",
          "325:     handle = (uv_fs_event_t *)pe.portev_user;",
          "",
          "[Added Lines]",
          "325:     handle = (uv_fs_event_t*) pe.portev_user;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:   if ((kc = kstat_open()) == NULL)",
          "458:     return uv__new_sys_error(errno);",
          "462:   if (kstat_read(kc, ksp, NULL) == -1) {",
          "464:   } else {",
          "467:   }",
          "",
          "[Removed Lines]",
          "460:   ksp = kstat_lookup(kc, (char *)\"unix\", 0, (char *)\"system_misc\");",
          "465:     knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"clk_intr\");",
          "",
          "[Added Lines]",
          "460:   ksp = kstat_lookup(kc, (char*) \"unix\", 0, (char*) \"system_misc\");",
          "465:     knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"clk_intr\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "487:   lookup_instance = 0;",
          "489:     lookup_instance++;",
          "490:   }",
          "",
          "[Removed Lines]",
          "488:   while ((ksp = kstat_lookup(kc, (char *)\"cpu_info\", lookup_instance, NULL))) {",
          "",
          "[Added Lines]",
          "488:   while ((ksp = kstat_lookup(kc, (char*) \"cpu_info\", lookup_instance, NULL))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "500:   cpu_info = *cpu_infos;",
          "501:   lookup_instance = 0;",
          "503:     if (kstat_read(kc, ksp, NULL) == -1) {",
          "504:       cpu_info->speed = 0;",
          "505:       cpu_info->model = NULL;",
          "506:     } else {",
          "508:       assert(knp->data_type == KSTAT_DATA_INT32 ||",
          "509:              knp->data_type == KSTAT_DATA_INT64);",
          "510:       cpu_info->speed = (knp->data_type == KSTAT_DATA_INT32) ? knp->value.i32",
          "511:                                                              : knp->value.i64;",
          "514:       assert(knp->data_type == KSTAT_DATA_STRING);",
          "515:       cpu_info->model = strdup(KSTAT_NAMED_STR_PTR(knp));",
          "516:     }",
          "",
          "[Removed Lines]",
          "502:   while ((ksp = kstat_lookup(kc, (char *)\"cpu_info\", lookup_instance, NULL))) {",
          "507:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"clock_MHz\");",
          "513:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"brand\");",
          "",
          "[Added Lines]",
          "502:   while ((ksp = kstat_lookup(kc, (char*) \"cpu_info\", lookup_instance, NULL))) {",
          "507:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"clock_MHz\");",
          "513:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"brand\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "522:   cpu_info = *cpu_infos;",
          "523:   lookup_instance = 0;",
          "526:     if (kstat_read(kc, ksp, NULL) == -1) {",
          "527:       cpu_info->cpu_times.user = 0;",
          "",
          "[Removed Lines]",
          "524:   while ((ksp = kstat_lookup(kc, (char *)\"cpu\", lookup_instance, (char *)\"sys\"))){",
          "",
          "[Added Lines]",
          "524:   while ((ksp = kstat_lookup(kc, (char*) \"cpu\", lookup_instance, (char*) \"sys\"))){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "530:       cpu_info->cpu_times.idle = 0;",
          "531:       cpu_info->cpu_times.irq = 0;",
          "532:     } else {",
          "534:       assert(knp->data_type == KSTAT_DATA_UINT64);",
          "535:       cpu_info->cpu_times.user = knp->value.ui64;",
          "538:       assert(knp->data_type == KSTAT_DATA_UINT64);",
          "539:       cpu_info->cpu_times.sys = knp->value.ui64;",
          "542:       assert(knp->data_type == KSTAT_DATA_UINT64);",
          "543:       cpu_info->cpu_times.idle = knp->value.ui64;",
          "546:       assert(knp->data_type == KSTAT_DATA_UINT64);",
          "547:       cpu_info->cpu_times.irq = knp->value.ui64;",
          "548:       cpu_info->cpu_times.nice = 0;",
          "",
          "[Removed Lines]",
          "533:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"cpu_ticks_user\");",
          "537:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"cpu_ticks_kernel\");",
          "541:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"cpu_ticks_idle\");",
          "545:       knp = (kstat_named_t *) kstat_data_lookup(ksp, (char *)\"intr\");",
          "",
          "[Added Lines]",
          "533:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"cpu_ticks_user\");",
          "537:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"cpu_ticks_kernel\");",
          "541:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"cpu_ticks_idle\");",
          "545:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"intr\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "617:     address->name = strdup(ent->ifa_name);",
          "619:     if (ent->ifa_addr->sa_family == AF_INET6) {",
          "621:     } else {",
          "623:     }",
          "625:     if (ent->ifa_netmask->sa_family == AF_INET6) {",
          "627:     } else {",
          "629:     }",
          "631:     address->is_internal = ent->ifa_flags & IFF_PRIVATE || ent->ifa_flags &",
          "",
          "[Removed Lines]",
          "620:       address->address.address6 = *((struct sockaddr_in6 *)ent->ifa_addr);",
          "622:       address->address.address4 = *((struct sockaddr_in *)ent->ifa_addr);",
          "626:       address->netmask.netmask6 = *((struct sockaddr_in6 *)ent->ifa_netmask);",
          "628:       address->netmask.netmask4 = *((struct sockaddr_in *)ent->ifa_netmask);",
          "",
          "[Added Lines]",
          "620:       address->address.address6 = *((struct sockaddr_in6*) ent->ifa_addr);",
          "622:       address->address.address4 = *((struct sockaddr_in*) ent->ifa_addr);",
          "626:       address->netmask.netmask6 = *((struct sockaddr_in6*) ent->ifa_netmask);",
          "628:       address->netmask.netmask4 = *((struct sockaddr_in*) ent->ifa_netmask);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa0e1e50713ff76fc8eb50f4af06191b3fd630f6",
      "candidate_info": {
        "commit_hash": "fa0e1e50713ff76fc8eb50f4af06191b3fd630f6",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/fa0e1e50713ff76fc8eb50f4af06191b3fd630f6",
        "files": [
          "include/uv-bsd.h",
          "include/uv-darwin.h",
          "include/uv-linux.h",
          "include/uv-sunos.h",
          "include/uv-win.h",
          "src/uv-common.c",
          "test/test-ip6-addr.c"
        ],
        "message": "unix, windows: remove unneeded define",
        "before_after_code_files": [
          "include/uv-bsd.h||include/uv-bsd.h",
          "include/uv-darwin.h||include/uv-darwin.h",
          "include/uv-linux.h||include/uv-linux.h",
          "include/uv-sunos.h||include/uv-sunos.h",
          "include/uv-win.h||include/uv-win.h",
          "src/uv-common.c||src/uv-common.c",
          "test/test-ip6-addr.c||test/test-ip6-addr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-bsd.h||include/uv-bsd.h": [
          "File: include/uv-bsd.h -> include/uv-bsd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_HAVE_KQUEUE 1",
          "",
          "[Removed Lines]",
          "34: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv-darwin.h||include/uv-darwin.h": [
          "File: include/uv-darwin.h -> include/uv-darwin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: #define UV_HAVE_KQUEUE 1",
          "",
          "[Removed Lines]",
          "61: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv-linux.h||include/uv-linux.h": [
          "File: include/uv-linux.h -> include/uv-linux.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   void* watchers[2];                                                          \\",
          "32:   int wd;                                                                     \\",
          "",
          "[Removed Lines]",
          "34: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv-sunos.h||include/uv-sunos.h": [
          "File: include/uv-sunos.h -> include/uv-sunos.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "44: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "587: int uv_utf8_to_utf16(const char* utf8Buffer, WCHAR* utf16Buffer,",
          "588:     size_t utf16Size);",
          "",
          "[Removed Lines]",
          "590: #define UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #endif",
          "",
          "[Removed Lines]",
          "38: #if defined(UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS) && !defined(_WIN32)",
          "",
          "[Added Lines]",
          "38: #if !defined(_WIN32)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109: int uv_ip6_addr(const char* ip, int port, struct sockaddr_in6* addr) {",
          "111:   char address_part[40];",
          "112:   size_t address_part_size;",
          "113:   const char* zone_index;",
          "116:   memset(addr, 0, sizeof(*addr));",
          "117:   addr->sin6_family = AF_INET6;",
          "118:   addr->sin6_port = htons(port);",
          "121:   zone_index = strchr(ip, '%');",
          "122:   if (zone_index != NULL) {",
          "123:     address_part_size = zone_index - ip;",
          "",
          "[Removed Lines]",
          "110: #if defined(UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS)",
          "114: #endif",
          "120: #if defined(UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     addr->sin6_scope_id = if_nametoindex(zone_index);",
          "137: #endif",
          "138:   }",
          "141:   return uv_inet_pton(AF_INET6, ip, &addr->sin6_addr);",
          "142: }",
          "",
          "[Removed Lines]",
          "139: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test-ip6-addr.c||test/test-ip6-addr.c": [
          "File: test/test-ip6-addr.c -> test/test-ip6-addr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: TEST_IMPL(ip6_addr_link_local) {",
          "36:   char string_address[INET6_ADDRSTRLEN];",
          "37:   uv_interface_address_t* addresses;",
          "38:   uv_interface_address_t* address;",
          "",
          "[Removed Lines]",
          "35: #ifdef UV_PLATFORM_HAS_IP6_LINK_LOCAL_ADDRESS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:   MAKE_VALGRIND_HAPPY();",
          "95:   return 0;",
          "99: }",
          "",
          "[Removed Lines]",
          "96: #else",
          "97:   RETURN_SKIP(\"Qualified link-local addresses are not supported.\");",
          "98: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1ac59448088320e923c1e2d845b63bb77379105",
      "candidate_info": {
        "commit_hash": "d1ac59448088320e923c1e2d845b63bb77379105",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d1ac59448088320e923c1e2d845b63bb77379105",
        "files": [
          "test/test-spawn.c"
        ],
        "message": "mingw: fix build with autotools",
        "before_after_code_files": [
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "31: #endif",
          "",
          "[Removed Lines]",
          "29: #ifndef _WIN32",
          "30: #include <unistd.h>",
          "",
          "[Added Lines]",
          "29: #ifdef _WIN32",
          "30: # if defined(__MINGW32__)",
          "31: #  include <basetyps.h>",
          "32: # endif",
          "33: # include <shellapi.h>",
          "34: #else",
          "35: # include <unistd.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d80248623216a0a43ee1161af0cb965124541fbb",
      "candidate_info": {
        "commit_hash": "d80248623216a0a43ee1161af0cb965124541fbb",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d80248623216a0a43ee1161af0cb965124541fbb",
        "files": [
          "test/test-list.h",
          "test/test-tcp-close-accept.c"
        ],
        "message": "test: disable tcp_close_accept on Windows\n\nIt always was a Unix only test",
        "before_after_code_files": [
          "test/test-list.h||test/test-list.h",
          "test/test-tcp-close-accept.c||test/test-tcp-close-accept.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: TEST_DECLARE   (tcp_connect_timeout)",
          "74: TEST_DECLARE   (tcp_close_while_connecting)",
          "75: TEST_DECLARE   (tcp_close)",
          "76: TEST_DECLARE   (tcp_close_accept)",
          "77: TEST_DECLARE   (tcp_flags)",
          "78: TEST_DECLARE   (tcp_write_to_half_open_connection)",
          "79: TEST_DECLARE   (tcp_unexpected_read)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: #ifndef _WIN32",
          "78: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "358:   TEST_ENTRY  (tcp_connect_timeout)",
          "359:   TEST_ENTRY  (tcp_close_while_connecting)",
          "360:   TEST_ENTRY  (tcp_close)",
          "361:   TEST_ENTRY  (tcp_close_accept)",
          "362:   TEST_ENTRY  (tcp_flags)",
          "363:   TEST_ENTRY  (tcp_write_to_half_open_connection)",
          "364:   TEST_ENTRY  (tcp_unexpected_read)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363: #ifndef _WIN32",
          "365: #endif",
          "",
          "---------------"
        ],
        "test/test-tcp-close-accept.c||test/test-tcp-close-accept.c": [
          "File: test/test-tcp-close-accept.c -> test/test-tcp-close-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #ifndef _WIN32",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74b29000bebb2904670e924c29a3077aef601494",
      "candidate_info": {
        "commit_hash": "74b29000bebb2904670e924c29a3077aef601494",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/74b29000bebb2904670e924c29a3077aef601494",
        "files": [
          "src/unix/linux-core.c"
        ],
        "message": "linux: move sscanf() out of the assert()\n\nIf asserts are turned off then the sscanf() wouldn't have run, being\nplaced directly in the assert() itself.",
        "before_after_code_files": [
          "src/unix/linux-core.c||src/unix/linux-core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "637:     {",
          "638:       unsigned int n;",
          "640:       for (len = sizeof(\"cpu0\"); n /= 10; len++);",
          "641:     }",
          "",
          "[Removed Lines]",
          "639:       assert(sscanf(buf, \"cpu%u \", &n) == 1);",
          "",
          "[Added Lines]",
          "639:       int r = sscanf(buf, \"cpu%u \", &n);",
          "640:       assert(r == 1);",
          "641:       (void) r;  // silence build warning",
          "",
          "---------------"
        ]
      }
    }
  ]
}