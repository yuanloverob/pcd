{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a753d400393d34ec988b50f7a2cf77773332b33d",
      "candidate_info": {
        "commit_hash": "a753d400393d34ec988b50f7a2cf77773332b33d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a753d400393d34ec988b50f7a2cf77773332b33d",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/altertab2.test"
        ],
        "message": "Fix repeated test numbers in the altertab2.test file.\n\nFossilOrigin-Name: e82f235e7201a420149847cda630ac6f2fce5e3a4577b0ea4793f430d3dc1611",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 211c8002d5ea4b224125d4ed395fe15767d1dc32a77b40b89fdfc80bdd1c5a48",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:   INSERT INTO t3 VALUES(4, 5, 6);",
          "339: }",
          "342:   CREATE TABLE t4(a, b);",
          "343:   CREATE VIEW v4 AS SELECT * FROM t4 WHERE (a=1 AND 0) OR b=2;",
          "344: }",
          "346:   ALTER TABLE t4 RENAME a TO c;",
          "347:   SELECT sql FROM sqlite_master WHERE name = 'v4'",
          "348: } {{CREATE VIEW v4 AS SELECT * FROM t4 WHERE (c=1 AND 0) OR b=2}}",
          "350: finish_test",
          "",
          "[Removed Lines]",
          "341: do_execsql_test 8.1 {",
          "345: do_execsql_test 8.2 {",
          "",
          "[Added Lines]",
          "341: do_execsql_test 8.4 {",
          "345: do_execsql_test 8.5 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
      "candidate_info": {
        "commit_hash": "d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d9bc6e8973e9bedadf51bb8fb50f143afdeb497a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereInt.h",
          "tool/lemon.c"
        ],
        "message": "Fix some harmless compiler warnings.\n\nFossilOrigin-Name: ca068d82387fc3cda9d2050cedb4f9c61b6d9dc54f89015b4b2ee492243ed5c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereInt.h||src/whereInt.h",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6d5fee8cdbdce8515957e8288e4d1e7b06f417fd3f9deeeb636fbf5b995af51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #ifndef SQLITE_WHEREINT_H",
          "18: #define SQLITE_WHEREINT_H",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485: static struct action *Action_new(void){",
          "487:   struct action *newaction;",
          "490:     int i;",
          "491:     int amt = 100;",
          "494:       fprintf(stderr,\"Unable to allocate memory for a new parser action.\");",
          "495:       exit(1);",
          "496:     }",
          "499:   }",
          "502:   return newaction;",
          "503: }",
          "",
          "[Removed Lines]",
          "486:   static struct action *freelist = 0;",
          "489:   if( freelist==0 ){",
          "492:     freelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( freelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) freelist[i].next = &freelist[i+1];",
          "498:     freelist[amt-1].next = 0;",
          "500:   newaction = freelist;",
          "501:   freelist = freelist->next;",
          "",
          "[Added Lines]",
          "486:   static struct action *actionfreelist = 0;",
          "489:   if( actionfreelist==0 ){",
          "492:     actionfreelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( actionfreelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) actionfreelist[i].next = &actionfreelist[i+1];",
          "498:     actionfreelist[amt-1].next = 0;",
          "500:   newaction = actionfreelist;",
          "501:   actionfreelist = actionfreelist->next;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1907:   return ep;",
          "1908: }",
          "1911: static struct s_options *op;",
          "1912: static FILE *errstream;",
          "",
          "[Removed Lines]",
          "1910: static char **argv;",
          "",
          "[Added Lines]",
          "1910: static char **g_argv;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1920: static void errline(int n, int k, FILE *err)",
          "1921: {",
          "1922:   int spcnt, i;",
          "1928:   }",
          "1929:   spcnt += k;",
          "1931:   if( spcnt<20 ){",
          "1932:     fprintf(err,\"\\n%*s^-- here\\n\",spcnt,\"\");",
          "1933:   }else{",
          "",
          "[Removed Lines]",
          "1923:   if( argv[0] ) fprintf(err,\"%s\",argv[0]);",
          "1924:   spcnt = lemonStrlen(argv[0]) + 1;",
          "1925:   for(i=1; i<n && argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",argv[i]);",
          "1927:     spcnt += lemonStrlen(argv[i])+1;",
          "1930:   for(; argv[i]; i++) fprintf(err,\" %s\",argv[i]);",
          "",
          "[Added Lines]",
          "1923:   if( g_argv[0] ) fprintf(err,\"%s\",g_argv[0]);",
          "1924:   spcnt = lemonStrlen(g_argv[0]) + 1;",
          "1925:   for(i=1; i<n && g_argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",g_argv[i]);",
          "1927:     spcnt += lemonStrlen(g_argv[i])+1;",
          "1930:   for(; g_argv[i]; i++) fprintf(err,\" %s\",g_argv[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1943: {",
          "1944:   int i;",
          "1945:   int dashdash = 0;",
          "1949:         if( n==0 ) return i;",
          "1950:         n--;",
          "1951:       }",
          "1953:     }",
          "1954:   }",
          "1955:   return -1;",
          "",
          "[Removed Lines]",
          "1946:   if( argv!=0 && *argv!=0 ){",
          "1947:     for(i=1; argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(argv[i]) ){",
          "1952:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "1946:   if( g_argv!=0 && *g_argv!=0 ){",
          "1947:     for(i=1; g_argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(g_argv[i]) ){",
          "1952:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1966:   int errcnt = 0;",
          "1967:   int j;",
          "1968:   for(j=0; op[j].label; j++){",
          "1970:   }",
          "1972:   if( op[j].label==0 ){",
          "1973:     if( err ){",
          "1974:       fprintf(err,\"%sundefined option.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1969:     if( strncmp(&argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = argv[i][0]=='-' ? 1 : 0;",
          "",
          "[Added Lines]",
          "1969:     if( strncmp(&g_argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = g_argv[i][0]=='-' ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1982:   }else if( op[j].type==OPT_FFLAG ){",
          "1983:     (*(void(*)(int))(op[j].arg))(v);",
          "1984:   }else if( op[j].type==OPT_FSTR ){",
          "1986:   }else{",
          "1987:     if( err ){",
          "1988:       fprintf(err,\"%smissing argument on switch.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&argv[i][2]);",
          "",
          "[Added Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&g_argv[i][2]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2004:   char *cp;",
          "2005:   int j;",
          "2006:   int errcnt = 0;",
          "2008:   assert( cp!=0 );",
          "2010:   for(j=0; op[j].label; j++){",
          "2012:   }",
          "2014:   if( op[j].label==0 ){",
          "",
          "[Removed Lines]",
          "2007:   cp = strchr(argv[i],'=');",
          "2011:     if( strcmp(argv[i],op[j].label)==0 ) break;",
          "",
          "[Added Lines]",
          "2007:   cp = strchr(g_argv[i],'=');",
          "2011:     if( strcmp(g_argv[i],op[j].label)==0 ) break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2035:           if( err ){",
          "2036:             fprintf(err,",
          "2037:                \"%sillegal character in floating-point argument.\\n\",emsg);",
          "2039:           }",
          "2040:           errcnt++;",
          "2041:         }",
          "",
          "[Removed Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2046:         if( *end ){",
          "2047:           if( err ){",
          "2048:             fprintf(err,\"%sillegal character in integer argument.\\n\",emsg);",
          "2050:           }",
          "2051:           errcnt++;",
          "2052:         }",
          "",
          "[Removed Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2086: int OptInit(char **a, struct s_options *o, FILE *err)",
          "2087: {",
          "2088:   int errcnt = 0;",
          "2090:   op = o;",
          "2091:   errstream = err;",
          "2093:     int i;",
          "2096:         errcnt += handleflags(i,err);",
          "2098:         errcnt += handleswitch(i,err);",
          "2099:       }",
          "2100:     }",
          "",
          "[Removed Lines]",
          "2089:   argv = a;",
          "2092:   if( argv && *argv && op ){",
          "2094:     for(i=1; argv[i]; i++){",
          "2095:       if( argv[i][0]=='+' || argv[i][0]=='-' ){",
          "2097:       }else if( strchr(argv[i],'=') ){",
          "",
          "[Added Lines]",
          "2089:   g_argv = a;",
          "2092:   if( g_argv && *g_argv && op ){",
          "2094:     for(i=1; g_argv[i]; i++){",
          "2095:       if( g_argv[i][0]=='+' || g_argv[i][0]=='-' ){",
          "2097:       }else if( strchr(g_argv[i],'=') ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2111:   int cnt = 0;",
          "2112:   int dashdash = 0;",
          "2113:   int i;",
          "2118:     }",
          "2119:   }",
          "2120:   return cnt;",
          "",
          "[Removed Lines]",
          "2114:   if( argv!=0 && argv[0]!=0 ){",
          "2115:     for(i=1; argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(argv[i]) ) cnt++;",
          "2117:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "2114:   if( g_argv!=0 && g_argv[0]!=0 ){",
          "2115:     for(i=1; g_argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(g_argv[i]) ) cnt++;",
          "2117:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2124: {",
          "2125:   int i;",
          "2126:   i = argindex(n);",
          "2128: }",
          "2130: void OptErr(int n)",
          "",
          "[Removed Lines]",
          "2127:   return i>=0 ? argv[i] : 0;",
          "",
          "[Added Lines]",
          "2127:   return i>=0 ? g_argv[i] : 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2728:     case WAITING_FOR_CLASS_ID:",
          "2729:       if( !ISLOWER(x[0]) ){",
          "2730:         ErrorMsg(psp->filename, psp->tokenlineno,",
          "2732:         psp->errorcnt++;",
          "2733:         psp->state = RESYNC_AFTER_DECL_ERROR;",
          "2734:      }else if( Symbol_find(x) ){",
          "",
          "[Removed Lines]",
          "2731:           \"%%token_class must be followed by an identifier: \", x);",
          "",
          "[Added Lines]",
          "2731:           \"%%token_class must be followed by an identifier: %s\", x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20cee7d0bb8f627c3952f24a5c4772f8fbb4d720",
      "candidate_info": {
        "commit_hash": "20cee7d0bb8f627c3952f24a5c4772f8fbb4d720",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/20cee7d0bb8f627c3952f24a5c4772f8fbb4d720",
        "files": [
          "ext/misc/totype.c",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/vdbeaux.c",
          "test/check.test",
          "test/date2.test",
          "test/indexexpr1.test"
        ],
        "message": "Always disallow the use of non-deterministic functions in CHECK constraints, even date/time functions that use the 'now' or similar keywords.  Provide improved error messages when this requirement is not met. Ticket [830277d9db6c3ba1]\n\nFossilOrigin-Name: 2978b65ebe25eeabe543b67cb266308cceb20082a4ae71565d6d083d7c08bc9f",
        "before_after_code_files": [
          "ext/misc/totype.c||ext/misc/totype.c",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/check.test||test/check.test",
          "test/date2.test||test/date2.test",
          "test/indexexpr1.test||test/indexexpr1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/totype.c||ext/misc/totype.c": [
          "File: ext/misc/totype.c -> ext/misc/totype.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502:   int rc = SQLITE_OK;",
          "503:   SQLITE_EXTENSION_INIT2(pApi);",
          "507:   if( rc==SQLITE_OK ){",
          "510:   }",
          "511:   return rc;",
          "512: }",
          "",
          "[Removed Lines]",
          "505:   rc = sqlite3_create_function(db, \"tointeger\", 1, SQLITE_UTF8, 0,",
          "506:                                tointegerFunc, 0, 0);",
          "508:     rc = sqlite3_create_function(db, \"toreal\", 1, SQLITE_UTF8, 0,",
          "509:                                  torealFunc, 0, 0);",
          "",
          "[Added Lines]",
          "505:   rc = sqlite3_create_function(db, \"tointeger\", 1,",
          "506:         SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "507:         tointegerFunc, 0, 0);",
          "509:     rc = sqlite3_create_function(db, \"toreal\", 1,",
          "510:         SQLITE_UTF8 | SQLITE_DETERMINISTIC, 0,",
          "511:         torealFunc, 0, 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84e02d773d60cffe619104991d21d7f0c68616c0f6bb99686bf54f5306c756d0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4033: #endif",
          "4034:       {",
          "4035:         sqlite3VdbeAddFunctionCall(pParse, constMask, r1, target, nFarg,",
          "4037:       }",
          "4038:       if( nFarg && constMask==0 ){",
          "4039:         sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "",
          "[Removed Lines]",
          "4036:                                    pDef, pParse->iSelfTab);",
          "",
          "[Added Lines]",
          "4036:                                    pDef, pExpr->op2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5028:      && (combinedFlags & EP_Reduced)==0",
          "5029:     ){",
          "5030:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "5032:       if( pA->op!=TK_IN && pA->iTable!=pB->iTable && pA->iTable!=iTab ){",
          "5033:         return 2;",
          "5034:       }",
          "",
          "[Removed Lines]",
          "5031:       if( pA->op2!=pB->op2 ) return 2;",
          "",
          "[Added Lines]",
          "5031:       if( pA->op2!=pB->op2 && (pA->op!=TK_FUNCTION || iTab<0) ) return 2;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "815:         if( pDef->funcFlags & (SQLITE_FUNC_CONSTANT|SQLITE_FUNC_SLOCHNG) ){",
          "819:           ExprSetProperty(pExpr,EP_ConstFunc);",
          "820:         }",
          "821:         if( (pDef->funcFlags & SQLITE_FUNC_CONSTANT)==0 ){",
          "827:         }",
          "828:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "829:          && pParse->nested==0",
          "",
          "[Removed Lines]",
          "825:           notValid(pParse, pNC, \"non-deterministic functions\",",
          "826:                    NC_IdxExpr|NC_PartIdx|NC_GenCol);",
          "",
          "[Added Lines]",
          "826:           notValid(pParse, pNC, \"non-deterministic functions\", NC_SelfRef);",
          "827:         }else{",
          "829:           pExpr->op2 = pNC->ncFlags & NC_SelfRef;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2487: struct Expr {",
          "2491:   union {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2490:   u8 op2;                /* TK_REGISTER/TK_TRUTH: original value of Expr.op",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2532:   union {",
          "2533:     Table *pTab;           /* TK_COLUMN: Table containing column. Can be NULL",
          "",
          "[Removed Lines]",
          "2528:   u8 op2;                /* TK_REGISTER/TK_TRUTH: original value of Expr.op",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "365:   }",
          "366:   pCtx->pOut = 0;",
          "367:   pCtx->pFunc = (FuncDef*)pFunc;",
          "369:   pCtx->isError = 0;",
          "370:   pCtx->argc = nArg;",
          "371:   addr = sqlite3VdbeAddOp4(v, eCallCtx ? OP_PureFunc : OP_Function,",
          "372:                            p1, p2, p3, (char*)pCtx, P4_FUNCCTX);",
          "373:   pCtx->iOp = addr;",
          "374:   return addr;",
          "375: }",
          "",
          "[Removed Lines]",
          "368:   pCtx->pVdbe = v;",
          "",
          "[Added Lines]",
          "368:   pCtx->pVdbe = 0;",
          "373:   sqlite3VdbeChangeP5(v, eCallCtx & NC_SelfRef);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5001: int sqlite3NotPureFunc(sqlite3_context *pCtx){",
          "5002: #ifdef SQLITE_ENABLE_STAT4",
          "5003:   if( pCtx->pVdbe==0 ) return 1;",
          "5004: #endif",
          "5010:     sqlite3_result_error(pCtx, zMsg, -1);",
          "5011:     sqlite3_free(zMsg);",
          "5017:     return 0;",
          "5018:   }",
          "5019:   return 1;",
          "",
          "[Removed Lines]",
          "5005:   if( pCtx->pVdbe->aOp[pCtx->iOp].opcode==OP_PureFunc ){",
          "5006: #if 0",
          "5007:     char *zMsg = sqlite3_mprintf(",
          "5008:        \"non-deterministic use of %s() in an index, CHECK constraint, \"",
          "5009:        \"or generated column\", pCtx->pFunc->zName);",
          "5012: #else",
          "5013:     sqlite3_result_error(pCtx,",
          "5014:        \"non-deterministic function in index expression or CHECK constraint\",",
          "5015:        -1);",
          "5016: #endif",
          "",
          "[Added Lines]",
          "5003:   const VdbeOp *pOp;",
          "5007:   pOp = pCtx->pVdbe->aOp + pCtx->iOp;",
          "5008:   if( pOp->opcode==OP_PureFunc ){",
          "5009:     const char *zContext;",
          "5010:     char *zMsg;",
          "5011:     if( pOp->p5 & NC_IsCheck ){",
          "5012:       zContext = \"a CHECK constraint\";",
          "5013:     }else if( pOp->p5 & NC_GenCol ){",
          "5014:       zContext = \"a generated column\";",
          "5015:     }else{",
          "5016:       zContext = \"an index\";",
          "5017:     }",
          "5018:     zMsg = sqlite3_mprintf(\"non-deterministic use of %s() in %s\",",
          "5019:                            pCtx->pFunc->zName, zContext);",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "442: #",
          "443: reset_db",
          "444: proc myfunc {x} {expr $x < 10}",
          "447: do_execsql_test  7.1 { CREATE TABLE t6(a CHECK (myfunc(a))) }",
          "448: do_execsql_test  7.2 { INSERT INTO t6 VALUES(9)  }",
          "",
          "[Removed Lines]",
          "445: db func myfunc myfunc",
          "",
          "[Added Lines]",
          "445: db func myfunc -deterministic myfunc",
          "",
          "---------------"
        ],
        "test/date2.test||test/date2.test": [
          "File: test/date2.test -> test/date2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: } {}",
          "31: do_catchsql_test date2-110 {",
          "32:   INSERT INTO t1(x,y) VALUES('now','two');",
          "34: do_execsql_test date2-120 {",
          "35:   SELECT * FROM t1;",
          "36: } {2017-07-20 one}",
          "",
          "[Removed Lines]",
          "33: } {1 {non-deterministic function in index expression or CHECK constraint}}",
          "",
          "[Added Lines]",
          "33: } {1 {non-deterministic use of date() in a CHECK constraint}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: }",
          "46: do_catchsql_test date2-210 {",
          "47:   INSERT INTO t2(x,y) VALUES(3, 'now');",
          "49: do_execsql_test date2-220 {",
          "50:   SELECT x, y FROM t2 ORDER BY x;",
          "51: } {1 2017-07-20 2 xyzzy}",
          "",
          "[Removed Lines]",
          "48: } {1 {non-deterministic function in index expression or CHECK constraint}}",
          "",
          "[Added Lines]",
          "48: } {1 {non-deterministic use of date() in an index}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: }",
          "59: do_catchsql_test date2-310 {",
          "60:   CREATE INDEX t3b1 ON t3(datetime(b));",
          "62: do_catchsql_test date2-320 {",
          "63:   CREATE INDEX t3b1 ON t3(datetime(b)) WHERE typeof(b)='real';",
          "64: } {0 {}}",
          "",
          "[Removed Lines]",
          "61: } {1 {non-deterministic function in index expression or CHECK constraint}}",
          "",
          "[Added Lines]",
          "61: } {1 {non-deterministic use of datetime() in an index}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: do_catchsql_test date2-410 {",
          "85:   CREATE INDEX t4b1 ON t4(b)",
          "86:     WHERE date(b) BETWEEN '2017-06-01' AND '2017-08-31';",
          "88: do_execsql_test date2-420 {",
          "89:   DELETE FROM t4 WHERE a=500;",
          "90:   CREATE INDEX t4b1 ON t4(b)",
          "",
          "[Removed Lines]",
          "87: } {1 {non-deterministic function in index expression or CHECK constraint}}",
          "",
          "[Added Lines]",
          "87: } {1 {non-deterministic use of date() in an index}}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92: }",
          "93: do_catchsql_test date2-430 {",
          "94:   INSERT INTO t4(a,b) VALUES(9999,'now');",
          "97: do_execsql_test date2-500 {",
          "98:   CREATE TABLE mods(x);",
          "",
          "[Removed Lines]",
          "95: } {1 {non-deterministic function in index expression or CHECK constraint}}",
          "",
          "[Added Lines]",
          "95: } {1 {non-deterministic use of date() in an index}}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "121: }",
          "122: do_catchsql_test date2-510 {",
          "123:   INSERT INTO t5(y,m) VALUES('2017-07-20','localtime');",
          "125: do_catchsql_test date2-520 {",
          "126:   INSERT INTO t5(y,m) VALUES('2017-07-20','utc');",
          "134: finish_test",
          "",
          "[Removed Lines]",
          "124: } {1 {non-deterministic function in index expression or CHECK constraint}}",
          "127: } {1 {non-deterministic function in index expression or CHECK constraint}}",
          "",
          "[Added Lines]",
          "124: } {1 {non-deterministic use of datetime() in an index}}",
          "127: } {1 {non-deterministic use of datetime() in an index}}",
          "129: # 2019-10-30 Ticket 830277d9db6c3ba1",
          "130: #",
          "131: do_catchsql_test date2-600 {",
          "132:   CREATE TABLE t600(a REAL CHECK( a<julianday('now') ));",
          "133:   INSERT INTO t600(a) VALUES(1.0);",
          "134: } {1 {non-deterministic use of julianday() in a CHECK constraint}}",
          "135: do_catchsql_test date2-601 {",
          "136:   CREATE TABLE t601(a REAL, b TEXT, CHECK( a<julianday(b) ));",
          "137:   INSERT INTO t601(a,b) VALUES(1.0, '1970-01-01');",
          "138: } {0 {}}",
          "139: do_catchsql_test date2-602 {",
          "140:   INSERT INTO t601(a,b) VALUES(1e100, '1970-01-01');",
          "141: } {1 {CHECK constraint failed: t601}}",
          "142: do_catchsql_test date2-603 {",
          "143:   INSERT INTO t601(a,b) VALUES(10, 'now');",
          "144: } {1 {non-deterministic use of julianday() in a CHECK constraint}}",
          "145: do_catchsql_test date2-604 {",
          "146:   INSERT INTO t600(a) VALUES(julianday('now')+10);",
          "147: } {1 {non-deterministic use of julianday() in a CHECK constraint}}",
          "150: do_catchsql_test date2-610 {",
          "151:   CREATE TABLE t610(a,b);",
          "152:   CREATE INDEX t610x1 ON t610(julianday('now')+b);",
          "153:   INSERT INTO t610(a,b) VALUES(123,456);",
          "154: } {1 {non-deterministic use of julianday() in an index}}",
          "155: do_catchsql_test date2-611 {",
          "156:   CREATE TABLE t611(a,b);",
          "157:   CREATE INDEX t611x1 ON t611(julianday(a)+b);",
          "158:   INSERT INTO t611(a,b) VALUES('1970-01-01',10.0);",
          "159: } {0 {}}",
          "160: do_catchsql_test date2-612 {",
          "161:   INSERT INTO t611(a,b) VALUES('now',10.0);",
          "162: } {1 {non-deterministic use of julianday() in an index}}",
          "164: do_catchsql_test date3-620 {",
          "165:   CREATE TABLE t620(a, b AS (a+julianday('now')));",
          "166:   INSERT INTO t620 VALUES(10);",
          "167: } {1 {non-deterministic use of julianday() in a generated column}}",
          "",
          "---------------"
        ],
        "test/indexexpr1.test||test/indexexpr1.test": [
          "File: test/indexexpr1.test -> test/indexexpr1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "186: } {1 {non-deterministic functions prohibited in index expressions}}",
          "187: do_catchsql_test indexexpr1-301 {",
          "188:   CREATE INDEX t2x1 ON t2(julianday('now',a));",
          "190: do_catchsql_test indexexpr1-310 {",
          "191:   CREATE INDEX t2x2 ON t2(a,b+(SELECT 15));",
          "192: } {1 {subqueries prohibited in index expressions}}",
          "",
          "[Removed Lines]",
          "189: } {1 {non-deterministic function in index expression or CHECK constraint}}",
          "",
          "[Added Lines]",
          "189: } {1 {non-deterministic use of julianday() in an index}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "583521fbb0bd28c45931aff6bdaddc9e7b6836dc",
      "candidate_info": {
        "commit_hash": "583521fbb0bd28c45931aff6bdaddc9e7b6836dc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/583521fbb0bd28c45931aff6bdaddc9e7b6836dc",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fts4umlaut.test"
        ],
        "message": "Fix cut-and-paste error in test file fts4umlaut.test.\n\nFossilOrigin-Name: cad5da1bf5f65ad87d97b72e9a84081fde455ba4085e79943fdf6c0144b1ef83",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/fts4umlaut.test||test/fts4umlaut.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db8d1d12f5c1673404b2afb5426d5ea3afe3b69d01f8f2bc47ffdf70684fdf24",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4umlaut.test||test/fts4umlaut.test": [
          "File: test/fts4umlaut.test -> test/fts4umlaut.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix fts4umlaut",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "26:   CREATE VIRTUAL TABLE t2 USING fts4(",
          "27:       x,",
          "28:       tokenize=unicode61 \"remove_diacritics=2\"",
          "",
          "[Removed Lines]",
          "19: ifcapable !fts3||!fts5 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "",
          "[Added Lines]",
          "19: ifcapable !fts3 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts4(x, tokenize=unicode61);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     SELECT count(*) FROM t1 WHERE t1 MATCH 'Ha Noi'",
          "50:   } $res1",
          "53:     DELETE FROM t2;",
          "54:     INSERT INTO t2(rowid, x) VALUES (1, 'Ha Noi');",
          "55:     SELECT count(*) FROM t2 WHERE t2 MATCH $q",
          "56:   } $res2",
          "58:     DELETE FROM t2;",
          "59:     INSERT INTO t2(rowid, x) VALUES (1, $q);",
          "60:     SELECT count(*) FROM t2 WHERE t2 MATCH 'Ha Noi'",
          "",
          "[Removed Lines]",
          "52:   do_execsql_test 1.$tn.2 {",
          "57:   do_execsql_test 1.$tn.2 {",
          "",
          "[Added Lines]",
          "52:   do_execsql_test 1.$tn.3 {",
          "57:   do_execsql_test 1.$tn.4 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55220a6c7016750ad316a985d2b887ed58b017ad",
      "candidate_info": {
        "commit_hash": "55220a6c7016750ad316a985d2b887ed58b017ad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55220a6c7016750ad316a985d2b887ed58b017ad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Improved reuse of file descriptors for which close() is delayed to prevent clearly of posix advisory locks.\n\nFossilOrigin-Name: 509c1ba26a4c12c63ecf04ddfa2f175eaf4dd9b96ab7be15faebd36deb0a0a31",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 846d2d2d2f7fd2e4178c70bc2b92f18941a7972fe88c0129035b7a253ed21785",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5770:       UnixUnusedFd **pp;",
          "5771:       assert( sqlite3_mutex_notheld(pInode->pLockMutex) );",
          "5772:       sqlite3_mutex_enter(pInode->pLockMutex);",
          "5773:       for(pp=&pInode->pUnused; *pp && (*pp)->flags!=flags; pp=&((*pp)->pNext));",
          "5774:       pUnused = *pp;",
          "5775:       if( pUnused ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5773:       flags &= (SQLITE_OPEN_READONLY|SQLITE_OPEN_READWRITE);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6074:   if( p->pPreallocatedUnused ){",
          "6075:     p->pPreallocatedUnused->fd = fd;",
          "6077:   }",
          "6079:   if( isDelete ){",
          "",
          "[Removed Lines]",
          "6076:     p->pPreallocatedUnused->flags = flags;",
          "",
          "[Added Lines]",
          "6077:     p->pPreallocatedUnused->flags =",
          "6078:                           flags & (SQLITE_OPEN_READONLY|SQLITE_OPEN_READWRITE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}