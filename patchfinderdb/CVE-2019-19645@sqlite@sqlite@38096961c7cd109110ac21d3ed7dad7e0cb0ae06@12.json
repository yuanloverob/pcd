{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7464f578eda14dbf56d4e37d72aae2af03a5930c",
      "candidate_info": {
        "commit_hash": "7464f578eda14dbf56d4e37d72aae2af03a5930c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7464f578eda14dbf56d4e37d72aae2af03a5930c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vacuum.c",
          "test/vacuum-into.test"
        ],
        "message": "Do not allow VACUUM INTO into a file that already exists.\n\nFossilOrigin-Name: 92f70e0fa3c9de7fde046f11cc0a7c2800511bb5ace8e68c845133931607616e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vacuum.c||src/vacuum.c",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93d92a0a5d21a1856316c0205ecaa253691b6e5349b552d43027005676d14820",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:   pDb = &db->aDb[nDb];",
          "201:   assert( strcmp(pDb->zDbSName,\"vacuum_db\")==0 );",
          "202:   pTemp = pDb->pBt;",
          "203:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:   if( zOut!=0 ){",
          "204:     sqlite3_file *id = sqlite3PagerFile(sqlite3BtreePager(pTemp));",
          "205:     i64 sz = 0;",
          "206:     if( id->pMethods!=0 && (sqlite3OsFileSize(id, &sz)!=SQLITE_OK || sz>0) ){",
          "207:       rc = SQLITE_ERROR;",
          "208:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "209:       goto end_of_vacuum;",
          "210:     }",
          "211:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:     pDb->pSchema = 0;",
          "375:   }",
          "383:   return rc;",
          "384: }",
          "",
          "[Removed Lines]",
          "377:   if( zOut==0 ){",
          "380:     sqlite3ResetAllSchemasOfConnection(db);",
          "381:   }",
          "",
          "[Added Lines]",
          "388:   sqlite3ResetAllSchemasOfConnection(db);",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-07",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the VACUUM INTO statement.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # If the VACUUM statement is disabled in the current build, skip all",
          "19: # the tests in this file.",
          "20: #",
          "21: ifcapable {!vacuum} {",
          "22:   omit_test vacuum.test {Compiled with SQLITE_OMIT_VACUUM}",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: forcedelete out.db",
          "28: do_execsql_test vacuum-into-100 {",
          "29:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "30:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<100)",
          "31:   INSERT INTO t1(a,b) SELECT x, randomblob(600) FROM c;",
          "32:   CREATE INDEX t1b ON t1(b);",
          "33:   DELETE FROM t1 WHERE a%2;",
          "34:   SELECT count(*), sum(a), sum(length(b)) FROM t1;",
          "35: } {50 2550 30000}",
          "36: do_execsql_test vacuum-into-110 {",
          "37:   VACUUM main INTO 'out.db';",
          "38: } {}",
          "39: sqlite3 db2 out.db",
          "40: do_test vacuum-into-120 {",
          "41:   db2 eval {SELECT count(*), sum(a), sum(length(b)) FROM t1}",
          "42: } {50 2550 30000}",
          "43: do_catchsql_test vacuum-into-130 {",
          "44:   VACUUM INTO 'out.db';",
          "45: } {1 {output file already exists}}",
          "46: forcedelete out2.db",
          "47: do_catchsql_test vacuum-into-140 {",
          "48:   VACUUM INTO 'out2.db';",
          "49: } {0 {}}",
          "50: do_catchsql_test vacuum-into-150 {",
          "51:   VACUUM INTO 'out2.db';",
          "52: } {1 {output file already exists}}",
          "54: do_catchsql_test vacuum-into-200 {",
          "55:   VACUUM main INTO ':memory:';",
          "56: } {0 {}}",
          "58: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bef06d2637b77a8b99c49a91656974049b86963a",
      "candidate_info": {
        "commit_hash": "bef06d2637b77a8b99c49a91656974049b86963a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bef06d2637b77a8b99c49a91656974049b86963a",
        "files": [
          "ext/fts5/fts5.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix errors in comments in fts5.h.\n\nFossilOrigin-Name: 4002790d9418289f3e090c694f651a89d8f523119c8ce2f396999b0387148241",
        "before_after_code_files": [
          "ext/fts5/fts5.h||ext/fts5/fts5.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5.h||ext/fts5/fts5.h": [
          "File: ext/fts5/fts5.h -> ext/fts5/fts5.h"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27221c69901d2b4546167639c4a3c8f54b2e18820f1346870fa26b7c919027db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
      "candidate_info": {
        "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
          "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
          "6067:   ){",
          "6068:     p->selFlags &= ~SF_Distinct;",
          "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6067:    && p->pWin==0",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243:   ALTER TABLE a0 RENAME TO S;",
          "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
          "1246: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246: reset_db",
          "1247: do_execsql_test 33.1 {",
          "1248:   CREATE TABLE t1(aa, bb);",
          "1249:   INSERT INTO t1 VALUES(1, 2);",
          "1250:   INSERT INTO t1 VALUES(5, 6);",
          "1251:   CREATE TABLE t2(x);",
          "1252:   INSERT INTO t2 VALUES(1);",
          "1253: }",
          "1254: do_execsql_test 33.2 {",
          "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
          "1256:   ORDER BY 1;",
          "1257: } {6 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "069d1b1faf819c9d49a299129caeef9774d73b89",
      "candidate_info": {
        "commit_hash": "069d1b1faf819c9d49a299129caeef9774d73b89",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/069d1b1faf819c9d49a299129caeef9774d73b89",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/between.test"
        ],
        "message": "Avoid transforming TK_COLLATE or TK_UNLIKELY Expr nodes to TK_REFERENCE. Instead, transform the uppermost Expr node in the expression tree that is not of this type.\n\nFossilOrigin-Name: ba7870e292919cf6c2f4b65b63fb0420ba2718eb0a797e0ba5302eec551a4238",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/between.test||test/between.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca4ddfefc1be1afbf366d87c47f0dd1122350d7ab34ba60020c5babb64a654a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3391:   p->op2 = p->op;",
          "3392:   p->op = TK_REGISTER;",
          "3393:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3390: static void exprToRegister(Expr *p, int iReg){",
          "",
          "[Added Lines]",
          "3390: static void exprToRegister(Expr *pExpr, int iReg){",
          "3391:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "---------------"
        ],
        "test/between.test||test/between.test": [
          "File: test/between.test -> test/between.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:   }",
          "120: } {4 2 25 27 sort t1 *}",
          "123: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #-------------------------------------------------------------------------",
          "123: reset_db",
          "124: do_execsql_test between-2.0 {",
          "125:   CREATE TABLE t1(x TEXT, y TEXT COLLATE nocase);",
          "126:   INSERT INTO t1 VALUES('0', 'abc');",
          "127: }",
          "129: foreach {tn expr res} {",
          "130:   1 \"x                BETWEEN 1 AND '5'\" 0",
          "131:   2 \"x COLLATE binary BETWEEN 1 AND '5'\" 0",
          "132:   3 \"x COLLATE nocase BETWEEN 1 AND '5'\" 0",
          "134:   4 \"y                  BETWEEN 'A' AND 'B'\" 1",
          "135:   5 \"y COLLATE nocase   BETWEEN 'A' AND 'B'\" 1",
          "136:   6 \"y COLLATE binary   BETWEEN 'A' AND 'B'\" 0",
          "137:   7 \"(y COLLATE binary) BETWEEN 'A' AND 'B'\" 0",
          "138: } {",
          "139:   set sql \"SELECT $expr FROM t1\"",
          "140:   do_execsql_test between-2.1.$tn $sql $res",
          "141: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e51716b1520fc6e681e9578d681e2e60ae6590f",
      "candidate_info": {
        "commit_hash": "2e51716b1520fc6e681e9578d681e2e60ae6590f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2e51716b1520fc6e681e9578d681e2e60ae6590f",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c",
          "tool/lempar.c"
        ],
        "message": "Increase the size of the yy_lookahead table so that it is never necessary to down bounds checking on the index.\n\nFossilOrigin-Name: bafd872398e58766e996963372c7acc03a1e20a6d39a3867ca45d3ea0ed2ac1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 94085fb3e756bc984237b74b6e29c68462ad860870c64dcb5124feaeec387660",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4153:   struct rule *rp;",
          "4154:   struct acttab *pActtab;",
          "4155:   int i, j, n, sz;",
          "4158:   const char *name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4156:   int nLookAhead;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4403:     if( la<0 ) la = lemp->nsymbol;",
          "4404:     if( j==0 ) fprintf(out,\" /* %5d */ \", i);",
          "4405:     fprintf(out, \" %4d,\", la);",
          "4407:       fprintf(out, \"\\n\"); lineno++;",
          "4408:       j = 0;",
          "4409:     }else{",
          "4410:       j++;",
          "4411:     }",
          "4412:   }",
          "4413:   fprintf(out, \"};\\n\"); lineno++;",
          "",
          "[Removed Lines]",
          "4406:     if( j==9 || i==n-1 ){",
          "",
          "[Added Lines]",
          "4407:     if( j==9 ){",
          "4408:       fprintf(out, \"\\n\"); lineno++;",
          "4409:       j = 0;",
          "4410:     }else{",
          "4411:       j++;",
          "4412:     }",
          "4413:   }",
          "4417:   nLookAhead = lemp->nterminal + lemp->nactiontab;",
          "4418:   while( i<nLookAhead ){",
          "4419:     if( j==0 ) fprintf(out,\" /* %5d */ \", i);",
          "4420:     fprintf(out, \" %4d,\", lemp->nterminal);",
          "4421:     if( j==9 ){",
          "4427:     i++;",
          "4429:   if( j>0 ) fprintf(out, \"\\n\"); lineno++;",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:   do{",
          "522:     i = yy_shift_ofst[stateno];",
          "523:     assert( i>=0 );",
          "525:     assert( iLookAhead!=YYNOCODE );",
          "526:     assert( iLookAhead < YYNTOKEN );",
          "527:     i += iLookAhead;",
          "529: #ifdef YYFALLBACK",
          "531:       if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])",
          "",
          "[Removed Lines]",
          "528:     if( i>=YY_NLOOKAHEAD || yy_lookahead[i]!=iLookAhead ){",
          "",
          "[Added Lines]",
          "524:     assert( i<=YY_ACTTAB_COUNT );",
          "525:     assert( i+YYNTOKEN<=(int)YY_NLOOKAHEAD );",
          "529:     assert( i<(int)YY_NLOOKAHEAD );",
          "530:     if( yy_lookahead[i]!=iLookAhead ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}