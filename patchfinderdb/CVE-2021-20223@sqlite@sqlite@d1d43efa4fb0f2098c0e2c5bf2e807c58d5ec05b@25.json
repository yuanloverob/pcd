{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4be621e1ba6a5ef729cf4f90896b16421fc6a4e2",
      "candidate_info": {
        "commit_hash": "4be621e1ba6a5ef729cf4f90896b16421fc6a4e2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4be621e1ba6a5ef729cf4f90896b16421fc6a4e2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/sqliteInt.h"
        ],
        "message": "Invert the SQLITE_FUNC_SAFE bit to be SQLITE_FUNC_UNSAFE.  The external bit is still SQLITE_INNOCUOUS.  It gets inverted as the appdef function is registered.\n\nFossilOrigin-Name: 1c266cb3be46d26e640752a99979acb1a1809361ba70ca3fca981c42383c360e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ee79b254e4c51a2a41f7ed49ad389d8d7105e649483adb79772052fa0ade3c0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1761:   assert( SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC );",
          "1762:   assert( SQLITE_FUNC_DIRECT==SQLITE_DIRECTONLY );",
          "1764:   extraFlags = enc &  (SQLITE_DETERMINISTIC|SQLITE_DIRECTONLY|",
          "1765:                        SQLITE_SUBTYPE|SQLITE_INNOCUOUS);",
          "1766:   enc &= (SQLITE_FUNC_ENCMASK|SQLITE_ANY);",
          "1768: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "1763:   assert( SQLITE_FUNC_SAFE==SQLITE_INNOCUOUS );",
          "",
          "[Added Lines]",
          "1769:   assert( SQLITE_FUNC_UNSAFE==SQLITE_INNOCUOUS );",
          "1770:   extraFlags ^= SQLITE_FUNC_UNSAFE;",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "886:           no_such_func = 1;",
          "887:           pDef = 0;",
          "888:         }else",
          "891:          && ExprHasProperty(pExpr, EP_Indirect)",
          "892:          && !IN_RENAME_OBJECT",
          "893:         ){",
          "",
          "[Removed Lines]",
          "889:         if( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_SAFE))",
          "890:                != SQLITE_FUNC_SAFE",
          "",
          "[Added Lines]",
          "889:         if( (pDef->funcFlags & (SQLITE_FUNC_DIRECT|SQLITE_FUNC_UNSAFE))!=0",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1773: #define INLINEFUNC_coalesce             0",
          "1774: #define INLINEFUNC_implies_nonnull_row  1",
          "",
          "[Removed Lines]",
          "1770: #define SQLITE_FUNC_PURE     (SQLITE_FUNC_CONSTANT|SQLITE_FUNC_SAFE)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1843: #define FUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1845:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1846: #define VFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1847:   {nArg, SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "",
          "[Removed Lines]",
          "1844:   {nArg, SQLITE_FUNC_PURE|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "",
          "[Added Lines]",
          "1841:   {nArg, SQLITE_FUNC_CONSTANT|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1850:   {nArg, SQLITE_UTF8|SQLITE_DIRECTONLY, \\",
          "1851:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1852: #define INLINE_FUNC(zName, nArg, iArg, mFlags) \\",
          "1854:    SQLITE_INT_TO_PTR(iArg), 0, noopFunc, 0, 0, 0, #zName, {0} }",
          "1855: #define TEST_FUNC(zName, nArg, iArg, mFlags) \\",
          "1856:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INTERNAL|SQLITE_FUNC_TEST| \\",
          "1858:    SQLITE_INT_TO_PTR(iArg), 0, noopFunc, 0, 0, 0, #zName, {0} }",
          "1859: #define DFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1861:    0, 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1862: #define PURE_DATE(zName, nArg, iArg, bNC, xFunc) \\",
          "1864:    (void*)&sqlite3Config, 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1865: #define FUNCTION2(zName, nArg, iArg, bNC, xFunc, extraFlags) \\",
          "1867:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1868: #define STR_FUNCTION(zName, nArg, pArg, bNC, xFunc) \\",
          "1871:    pArg, 0, xFunc, 0, 0, 0, #zName, }",
          "1872: #define LIKEFUNC(zName, nArg, arg, flags) \\",
          "1874:    (void *)arg, 0, likeFunc, 0, 0, 0, #zName, {0} }",
          "1875: #define WAGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue, xInverse, f) \\",
          "1876:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|f, \\",
          "",
          "[Removed Lines]",
          "1853:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INLINE|SQLITE_FUNC_PURE|(mFlags), \\",
          "1857:          SQLITE_FUNC_INLINE|(mFlags), \\",
          "1860:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_FUNC_SAFE|SQLITE_UTF8, \\",
          "1863:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8|SQLITE_FUNC_PURE, \\",
          "1866:   {nArg,SQLITE_FUNC_PURE|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL)|extraFlags,\\",
          "1869:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_FUNC_SAFE| \\",
          "1870:            SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "1873:   {nArg, SQLITE_FUNC_PURE|SQLITE_UTF8|flags, \\",
          "",
          "[Added Lines]",
          "1850:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INLINE|SQLITE_FUNC_CONSTANT|(mFlags), \\",
          "1854:          SQLITE_FUNC_INLINE|SQLITE_FUNC_CONSTANT|(mFlags), \\",
          "1857:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8, \\",
          "1860:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8|SQLITE_FUNC_CONSTANT, \\",
          "1863:   {nArg,SQLITE_FUNC_CONSTANT|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL)|extraFlags,\\",
          "1866:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8|(bNC*SQLITE_FUNC_NEEDCOLL), \\",
          "1869:   {nArg, SQLITE_FUNC_CONSTANT|SQLITE_UTF8|flags, \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbb29ecfb4a166d6df9f8be6b88b1357a3bce8f3",
      "candidate_info": {
        "commit_hash": "bbb29ecfb4a166d6df9f8be6b88b1357a3bce8f3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bbb29ecfb4a166d6df9f8be6b88b1357a3bce8f3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/shell1.test"
        ],
        "message": "Add the --nosys option to the .schema command in the CLI.\n\nFossilOrigin-Name: b72ee694532c0c5d2285dd580154546eb592fd6892cad9ad7a49e98737adb974",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bcb0bc6a7b7006f07adb7266b1fecca39bf85a0adea6d78a341623a3546f2c2a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "4015:   \".save FILE               Write in-memory database into FILE\",",
          "4016:   \".scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off\",",
          "4017:   \".schema ?PATTERN?        Show the CREATE statements matching PATTERN\",",
          "4020:   \".selftest ?OPTIONS?      Run tests defined in the SELFTEST table\",",
          "4021:   \"    Options:\",",
          "4022:   \"       --init               Create a new SELFTEST table\",",
          "",
          "[Removed Lines]",
          "4018:   \"     Options:\",",
          "4019:   \"         --indent            Try to pretty-print the schema\",",
          "",
          "[Added Lines]",
          "4018:   \"   Options:\",",
          "4019:   \"      --indent             Try to pretty-print the schema\",",
          "4020:   \"      --nosys              Omit objects whose names start with \\\"sqlite_\\\"\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9088:     const char *zName = 0;",
          "9089:     int iSchema = 0;",
          "9090:     int bDebug = 0;",
          "9091:     int ii;",
          "9093:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9092:     int bNoSystemTabs = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9100:         data.cMode = data.mode = MODE_Pretty;",
          "9101:       }else if( optionMatch(azArg[ii],\"debug\") ){",
          "9102:         bDebug = 1;",
          "9103:       }else if( zName==0 ){",
          "9104:         zName = azArg[ii];",
          "9105:       }else{",
          "9107:         rc = 1;",
          "9108:         goto meta_command_exit;",
          "9109:       }",
          "",
          "[Removed Lines]",
          "9106:         raw_printf(stderr, \"Usage: .schema ?--indent? ?LIKE-PATTERN?\\n\");",
          "",
          "[Added Lines]",
          "9105:       }else if( optionMatch(azArg[ii],\"nosys\") ){",
          "9106:         bNoSystemTabs = 1;",
          "9107:       }else if( azArg[ii][0]=='-' ){",
          "9108:         utf8_printf(stderr, \"Unknown option: \\\"%s\\\"\\n\", azArg[ii]);",
          "9109:         rc = 1;",
          "9110:         goto meta_command_exit;",
          "9114:         raw_printf(stderr, \"Usage: .schema ?--indent? ?--nosys? ?LIKE-PATTERN?\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9189:         appendText(&sSelect, \" AND \", 0);",
          "9190:         sqlite3_free(zQarg);",
          "9191:       }",
          "9193:                            \" ORDER BY snum, rowid\", 0);",
          "9194:       if( bDebug ){",
          "9195:         utf8_printf(p->out, \"SQL: %s;\\n\", sSelect.z);",
          "",
          "[Removed Lines]",
          "9192:       appendText(&sSelect, \"type!='meta' AND sql IS NOT NULL\"",
          "",
          "[Added Lines]",
          "9200:       if( bNoSystemTabs ){",
          "9201:         appendText(&sSelect, \"name NOT LIKE 'sqlite_%%' AND \", 0);",
          "9202:       }",
          "9203:       appendText(&sSelect, \"sql IS NOT NULL\"",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "583: do_test shell1-3.21.3 {",
          "584:   # too many arguments",
          "585:   catchcmd \"test.db\" \".schema FOO BAD\"",
          "588: do_test shell1-3.21.4 {",
          "589:   catchcmd \"test.db\" {",
          "",
          "[Removed Lines]",
          "586: } {1 {Usage: .schema ?--indent? ?LIKE-PATTERN?}}",
          "",
          "[Added Lines]",
          "586: } {1 {Usage: .schema ?--indent? ?--nosys? ?LIKE-PATTERN?}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96e337df6b87c1c731cdf0bad5e2611f93030cae",
      "candidate_info": {
        "commit_hash": "96e337df6b87c1c731cdf0bad5e2611f93030cae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/96e337df6b87c1c731cdf0bad5e2611f93030cae",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test"
        ],
        "message": "Fix \"make test\" handling of environment variable QUICKTEST_OMIT so that it can be used to exclude test files in other than the main test directory.\n\nFossilOrigin-Name: b050976079ba4a22d4dfeadb81f40cf71da6588c95bf2b634d88b416de5accd7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f6cffa2d50bfebe5b025f412b7a49b7fdafb798aaf1ddc80e6656ccd1f012a7f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   set allquicktests [concat $allquicktests $::env(QUICKTEST_INCLUDE)]",
          "137: }",
          "138: if {[info exists ::env(QUICKTEST_OMIT)]} {",
          "141:   }",
          "142: }",
          "144: # If the TEST_FAILURE environment variable is set, it means that we what to",
          "",
          "[Removed Lines]",
          "139:   foreach x [split $::env(QUICKTEST_OMIT) ,] {",
          "140:     regsub -all \\\\y$x\\\\y $allquicktests {} allquicktests",
          "",
          "[Added Lines]",
          "139:   # If environment variable QUICKTEST_OMIT is set, it is a comma-separated",
          "140:   # list of regular expressions to match against test file names in",
          "141:   # the \"allquicktests\" set. Any matches are excluded. Only the filename",
          "142:   # is matched, not any directory component of the path.",
          "143:   set all [list]",
          "144:   foreach a $allquicktests {",
          "145:     set bIn 1",
          "146:     foreach x [split $::env(QUICKTEST_OMIT) ,] {",
          "147:       if {[regexp $x [file tail $a]]} {",
          "148:         set bIn 0",
          "149:         break",
          "150:       }",
          "151:     }",
          "152:     if {$bIn} {",
          "153:       lappend all $a",
          "154:     }",
          "156:   set allquicktests $all",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74bbd37dae20ce353abf2b593f24d24713465be3",
      "candidate_info": {
        "commit_hash": "74bbd37dae20ce353abf2b593f24d24713465be3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/74bbd37dae20ce353abf2b593f24d24713465be3",
        "files": [
          "doc/wal-lock.md",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add new file doc/wal-lock.md, containing notes on wal-mode blocking locks.\n\nFossilOrigin-Name: c6b1d3a385751633d3ac1853e13d5e847185dd6432fb8b960a4080f61357c08c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f3bd689336fecaa1e2928b826c6aedb0178d322f4633ac429dd1ae6fbc08e7f1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efdba1a8b3c6c967e7fae9c1989c40d420ce64cc",
      "candidate_info": {
        "commit_hash": "efdba1a8b3c6c967e7fae9c1989c40d420ce64cc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efdba1a8b3c6c967e7fae9c1989c40d420ce64cc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/sqliteLimit.h"
        ],
        "message": "Increase the default upper bound on the number of parameters in a single SQL statement to 32766 (from 999).\n\nFossilOrigin-Name: 2def75693a8ae002375aff80db0e6c970c75f75e8b6ba64f2c518712badb0ae8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/sqliteLimit.h||src/sqliteLimit.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 16aed5d0c63dcdc2054dbb8a4b6b992476640433bf81e19301e6db5a3fc82633",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2519: typedef i16 ynVar;",
          "2520: #else",
          "2521: typedef int ynVar;",
          "",
          "[Removed Lines]",
          "2518: #if SQLITE_MAX_VARIABLE_NUMBER<=32767",
          "",
          "[Added Lines]",
          "2518: #if SQLITE_MAX_VARIABLE_NUMBER<32767",
          "",
          "---------------"
        ],
        "src/sqliteLimit.h||src/sqliteLimit.h": [
          "File: src/sqliteLimit.h -> src/sqliteLimit.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: #ifndef SQLITE_MAX_VARIABLE_NUMBER",
          "137: #endif",
          "",
          "[Removed Lines]",
          "136: # define SQLITE_MAX_VARIABLE_NUMBER 999",
          "",
          "[Added Lines]",
          "139: # define SQLITE_MAX_VARIABLE_NUMBER 32766",
          "",
          "---------------"
        ]
      }
    }
  ]
}