{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "37ccfcfeb99181026f6beb35dfb0fe043130773b",
      "candidate_info": {
        "commit_hash": "37ccfcfeb99181026f6beb35dfb0fe043130773b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/37ccfcfeb99181026f6beb35dfb0fe043130773b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/btreeInt.h",
          "src/main.c",
          "src/shell.c.in",
          "src/sqlite.h.in"
        ],
        "message": "New test-control that returns the number of calls to sqlite3BtreeMovetoUnpacked() on the main database and then resets the counter.  This only works for SQLITE_DEBUG builds.\n\nFossilOrigin-Name: dca5b91926431768babac28a6faf7674a5014db95caba727995b470e92b3182a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/btreeInt.h||src/btreeInt.h",
          "src/main.c||src/main.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 62f7d2a61259f296ffdcb3b3ee1a13925c4563ac8ed669f8a8a63fc7bc3a0a37",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   #define hasReadConflicts(a, b) 0",
          "113: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: #ifdef SQLITE_DEBUG",
          "119: sqlite3_uint64 sqlite3BtreeSeekCount(Btree *pBt){",
          "120:   u64 n =  pBt->nSeek;",
          "121:   pBt->nSeek = 0;",
          "122:   return n;",
          "123: }",
          "124: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5459:     }",
          "5460:   }",
          "5462:   if( pIdxKey ){",
          "5463:     xRecordCompare = sqlite3VdbeFindCompare(pIdxKey);",
          "5464:     pIdxKey->errCode = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5473: #ifdef SQLITE_DEBUG",
          "5475: #endif",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "330: int sqlite3BtreeIsReadonly(Btree *pBt);",
          "331: int sqlite3HeaderSizeBtree(void);",
          "333: #ifndef NDEBUG",
          "334: int sqlite3BtreeCursorIsValid(BtCursor*);",
          "335: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333: #ifdef SQLITE_DEBUG",
          "334: sqlite3_uint64 sqlite3BtreeSeekCount(Btree*);",
          "335: #else",
          "336: # define sqlite3BtreeSeekCount(X) 0",
          "337: #endif",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "356: #ifndef SQLITE_OMIT_SHARED_CACHE",
          "358: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356: #ifdef SQLITE_DEBUG",
          "358: #endif",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4235:       sqlite3ResultIntReal(pCtx);",
          "4236:       break;",
          "4237:     }",
          "4238:   }",
          "4239:   va_end(ap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4248:     case SQLITE_TESTCTRL_SEEK_COUNT: {",
          "4249:       sqlite3 *db = va_arg(ap, sqlite3*);",
          "4250:       u64 *pn = va_arg(ap, sqlite3_uint64*);",
          "4252:       break;",
          "4253:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9873:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"               },",
          "9874:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"               },",
          "9875:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"      },",
          "9876:     };",
          "9877:     int testctrl = -1;",
          "9878:     int iCtrl = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9876:       { \"seek_count\",         SQLITE_TESTCTRL_SEEK_COUNT,    \"\"               },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9936:         case SQLITE_TESTCTRL_PRNG_SAVE:",
          "9937:         case SQLITE_TESTCTRL_PRNG_RESTORE:",
          "9939:         case SQLITE_TESTCTRL_BYTEORDER:",
          "9940:           if( nArg==2 ){",
          "9941:             rc2 = sqlite3_test_control(testctrl);",
          "",
          "[Removed Lines]",
          "9938:         case SQLITE_TESTCTRL_PRNG_RESET:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10009:           }",
          "10010:           break;",
          "10012: #ifdef YYCOVERAGE",
          "10013:         case SQLITE_TESTCTRL_PARSER_COVERAGE:",
          "10014:           if( nArg==2 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10012:         case SQLITE_TESTCTRL_SEEK_COUNT: {",
          "10013:           u64 x = 0;",
          "10014:           rc2 = sqlite3_test_control(testctrl, p->db, &x);",
          "10015:           utf8_printf(p->out, \"%llu\\n\", x);",
          "10016:           isOk = 3;",
          "10017:           break;",
          "10018:         }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7739: #define SQLITE_TESTCTRL_PRNG_SAVE                5",
          "7740: #define SQLITE_TESTCTRL_PRNG_RESTORE             6",
          "7742: #define SQLITE_TESTCTRL_BITVEC_TEST              8",
          "7743: #define SQLITE_TESTCTRL_FAULT_INSTALL            9",
          "7744: #define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7742: #define SQLITE_TESTCTRL_SEEK_COUNT               7",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5ee67d5b3ec8eaca71bde483dbb9fd9c77cea1a",
      "candidate_info": {
        "commit_hash": "a5ee67d5b3ec8eaca71bde483dbb9fd9c77cea1a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a5ee67d5b3ec8eaca71bde483dbb9fd9c77cea1a",
        "files": [
          "Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add vdbevtab.lo to build of libsqlite3.lib in Makefile.msc.\n\nFossilOrigin-Name: f64d054b799c0af8d582fd9aff9bcbfa380ef08026ba5db8c5f89f6f56dfdad9",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:          table.lo threads.lo tokenize.lo treeview.lo trigger.lo \\",
          "1257:          update.lo upsert.lo util.lo vacuum.lo \\",
          "1258:          vdbeapi.lo vdbeaux.lo vdbeblob.lo vdbemem.lo vdbesort.lo \\",
          "1260:          window.lo utf.lo vtab.lo",
          "1261: # <</mark>>",
          "",
          "[Removed Lines]",
          "1259:          vdbetrace.lo wal.lo walker.lo where.lo wherecode.lo whereexpr.lo \\",
          "",
          "[Added Lines]",
          "1259:          vdbetrace.lo vdbevtab.lo wal.lo walker.lo where.lo wherecode.lo \\",
          "1260:          whereexpr.lo \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69e149f76853d196c8855fedfc98848b60fb116ac36bc08824b1a122469f8ece",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ee02a1ce5a471966c3e5cc04af74ed16b1be6ce",
      "candidate_info": {
        "commit_hash": "1ee02a1ce5a471966c3e5cc04af74ed16b1be6ce",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1ee02a1ce5a471966c3e5cc04af74ed16b1be6ce",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/with3.test"
        ],
        "message": "Fix the VDBE so that it correctly handles the sequence of operations OP_OpenEphemeral, OP_OpenDup, OP_OpenEphemeral, and OP_OpenDup in that order on the same cursor.\n\nFossilOrigin-Name: a1be6ee0188911448c064e2c25fb0ca1daad50f3d50fb49a34430bd09736b4a9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/with3.test||test/with3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4363f69c3ad5a9859471547cab713f1acabd5fce13872cc1ddaa972d6c1dfb35",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3917:   assert( pOp->p1>=0 );",
          "3918:   assert( pOp->p2>=0 );",
          "3919:   pCx = p->apCsr[pOp->p1];",
          "3923:     assert( pCx->isEphemeral );",
          "3924:     pCx->seqCount = 0;",
          "3925:     pCx->cacheStatus = CACHE_STALE;",
          "3929:   }else{",
          "3930:     pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);",
          "3931:     if( pCx==0 ) goto no_mem;",
          "",
          "[Removed Lines]",
          "3920:   if( pCx ){",
          "3926:     if( pCx->pBtx ){",
          "3927:       rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "3928:     }",
          "",
          "[Added Lines]",
          "3920:   if( pCx && pCx->pBtx ){",
          "3926:     rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);",
          "",
          "---------------"
        ],
        "test/with3.test||test/with3.test": [
          "File: test/with3.test -> test/with3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:     );",
          "174: } {1}",
          "177: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176: # 2020-01-18 chrome ticket 1043236",
          "177: # Correct handling of the sequence:",
          "178: #    OP_OpenEphem",
          "179: #    OP_OpenDup",
          "180: #    Op_OpenEphem",
          "181: #    OP_OpenDup",
          "182: #",
          "183: do_execsql_test 4.2 {",
          "184:   SELECT (",
          "185:     WITH t1(a) AS (VALUES(1))",
          "186:     SELECT (",
          "187:       WITH t2(b) AS (",
          "188:         WITH t3(c) AS (",
          "189:           WITH t4(d) AS (VALUES('elvis'))",
          "190:           SELECT t4a.d FROM t4 AS t4a JOIN t4 AS t4b LEFT JOIN t4 AS t4c",
          "191:         )",
          "192:         SELECT c FROM t3 WHERE a = 1",
          "193:       )",
          "194:       SELECT t2a.b FROM t2 AS t2a JOIN t2 AS t2x",
          "195:     )",
          "196:     FROM t1 GROUP BY 1",
          "197:   )",
          "198:   GROUP BY 1;",
          "199: } {elvis}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "926f796e8feec15f3836aa0a060ed906f8ae04d3",
      "candidate_info": {
        "commit_hash": "926f796e8feec15f3836aa0a060ed906f8ae04d3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/926f796e8feec15f3836aa0a060ed906f8ae04d3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/gencol1.test"
        ],
        "message": "Ensure that the SrcList_item.colUsed field is set correctly (set to have a 1 for all columns of the table) when a generated column appears in the USING clause of a join.\n\nFossilOrigin-Name: 1923efb283e8840fa7436eb20b9d2174ef7cace1690d3b97b572a0db2048b8e3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   Expr *p = sqlite3ExprAlloc(db, TK_COLUMN, 0, 0);",
          "625:   if( p ){",
          "626:     struct SrcList_item *pItem = &pSrc->a[iSrc];",
          "628:     p->iTable = pItem->iCursor;",
          "629:     if( p->y.pTab->iPKey==iCol ){",
          "630:       p->iColumn = -1;",
          "631:     }else{",
          "632:       p->iColumn = (ynVar)iCol;",
          "636:     }",
          "637:   }",
          "638:   return p;",
          "",
          "[Removed Lines]",
          "627:     p->y.pTab = pItem->pTab;",
          "633:       testcase( iCol==BMS );",
          "634:       testcase( iCol==BMS-1 );",
          "635:       pItem->colUsed |= ((Bitmask)1)<<(iCol>=BMS ? BMS-1 : iCol);",
          "",
          "[Added Lines]",
          "627:     Table *pTab = p->y.pTab = pItem->pTab;",
          "633:       if( pTab->tabFlags & TF_HasGenerated ){",
          "634:         Column *pColumn = pTab->aCol + iCol;",
          "635:         if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "636:           testcase( pTab->nCol==63 );",
          "637:           testcase( pTab->nCol==64 );",
          "638:           if( pTab->nCol>=64 ){",
          "639:             pItem->colUsed = ALLBITS;",
          "640:           }else{",
          "641:             pItem->colUsed = MASKBIT(pTab->nCol)-1;",
          "642:           }",
          "643:         }",
          "644:       }else{",
          "645:         testcase( iCol==BMS );",
          "646:         testcase( iCol==BMS-1 );",
          "647:         pItem->colUsed |= ((Bitmask)1)<<(iCol>=BMS ? BMS-1 : iCol);",
          "648:       }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:   PRAGMA integrity_check;",
          "343: } {ok}",
          "345: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: # 2019-12-09 but report from Yongheng Chen",
          "346: # Ensure that the SrcList_item.colUsed field is set correctly when a",
          "347: # generated column appears in the USING clause of a join.",
          "348: #",
          "349: do_execsql_test gencol1-13.10 {",
          "350:   CREATE TABLE t1(x, y AS(x+1));",
          "351:   INSERT INTO t1 VALUES(10);",
          "352:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "353: } {11}",
          "354: do_execsql_test gencol1-13.11 {",
          "355:   CREATE INDEX t1y ON t1(y);",
          "356:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "357: } {11}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2fa084cf1104e9ec96d2dfc063952baafaf1883",
      "candidate_info": {
        "commit_hash": "f2fa084cf1104e9ec96d2dfc063952baafaf1883",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2fa084cf1104e9ec96d2dfc063952baafaf1883",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Earlier detection of corruption in the rtreecheck() SQL function to prevent a (harmless) read of an uninitialized value.\n\nFossilOrigin-Name: e2074b24788149562b15022ccd2784d6649f08ebc41410e3bfb2401baf0892e2",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:     pRtree->iDepth = readInt16(pNode->zData);",
          "764:     if( pRtree->iDepth>RTREE_MAX_DEPTH ){",
          "765:       rc = SQLITE_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "762:   if( pNode && iNode==1 ){",
          "",
          "[Added Lines]",
          "762:   if( pNode && rc==SQLITE_OK && iNode==1 ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 751fe4edb2d4602e652523c2759de3f4fffd29d5c66cae68caf45b30fd8b750a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}