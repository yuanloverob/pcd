{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8625221444d4f70965d41d241ed7fecc2d8bf7bc",
      "candidate_info": {
        "commit_hash": "8625221444d4f70965d41d241ed7fecc2d8bf7bc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8625221444d4f70965d41d241ed7fecc2d8bf7bc",
        "files": [
          "ext/misc/csv.c",
          "manifest",
          "manifest.uuid",
          "test/csv01.test"
        ],
        "message": "Fix a problem with the CSV extension when it uses the \"header\" option on a real file.\n\nFossilOrigin-Name: 7acaed08f946633fca3ab8434dd6349ea6f1bac4fd9ec21f476db013ee06de30",
        "before_after_code_files": [
          "ext/misc/csv.c||ext/misc/csv.c",
          "manifest.uuid||manifest.uuid",
          "test/csv01.test||test/csv01.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/csv.c||ext/misc/csv.c": [
          "File: ext/misc/csv.c -> ext/misc/csv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   }else if( pNew->zData ){",
          "622:     pNew->iStart = (int)sRdr.iIn;",
          "623:   }else{",
          "625:   }",
          "626:   csv_reader_reset(&sRdr);",
          "627:   rc = sqlite3_declare_vtab(db, CSV_SCHEMA);",
          "",
          "[Removed Lines]",
          "624:     pNew->iStart = ftell(sRdr.in);",
          "",
          "[Added Lines]",
          "624:     pNew->iStart = ftell(sRdr.in) - sRdr.nIn + sRdr.iIn;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1f50d57ce76f6c08a0ddbdd3c3fe2732d0e57dda14cb9aa3da00a14ceb4bc44",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/csv01.test||test/csv01.test": [
          "File: test/csv01.test -> test/csv01.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   SELECT * FROM trent;",
          "215: } {1}",
          "217: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: # 2018-12-26",
          "218: # Bug report on the mailing list",
          "219: #",
          "220: forcedelete csv01.csv",
          "221: set fd [open csv01.csv w]",
          "222: puts $fd \"a,b,c,d\\r\\n1,2,3,4\\r\\none,two,three,four\\r\\n5,6,7,8\"",
          "223: close $fd",
          "224: do_execsql_test 5.1 {",
          "225:   CREATE VIRTUAL TABLE t5_1 USING csv(filename='csv01.csv');",
          "226:   SELECT name FROM temp.pragma_table_info('t5_1');",
          "227: } {c0 c1 c2 c3}",
          "228: do_execsql_test 5.2 {",
          "229:   SELECT *, '|' FROM t5_1;",
          "230: } {a b c d | 1 2 3 4 | one two three four | 5 6 7 8 |}",
          "231: do_execsql_test 5.3 {",
          "232:   DROP TABLE t5_1;",
          "233:   CREATE VIRTUAL TABLE t5_1 USING csv(filename='csv01.csv', header);",
          "234:   SELECT name FROM temp.pragma_table_info('t5_1');",
          "235: } {a b c d}",
          "236: do_execsql_test 5.4 {",
          "237:   SELECT *, '|' FROM t5_1;",
          "238: } {1 2 3 4 | one two three four | 5 6 7 8 |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dc0e9c2afeadf5896478cf0e1a37b6c18a45ce7",
      "candidate_info": {
        "commit_hash": "0dc0e9c2afeadf5896478cf0e1a37b6c18a45ce7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0dc0e9c2afeadf5896478cf0e1a37b6c18a45ce7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/treeview.c"
        ],
        "message": "More improvements to TreeView output for Window objects: (1) Show when the frame-spec is implied rather than explicit. (2) Move the FILTER clause out from within the OVER clause, making it a sibling of the OVER clause, to match syntax.\n\nFossilOrigin-Name: d6a07433421ac9a475ff0014587f0beefdf88ce89aef9443f8a20cd26083731f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/treeview.c||src/treeview.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec2f207dedb223077bbd3e4584499250eb12219712c917e930acccfa2c46e23b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "311: void sqlite3TreeViewWindow(TreeView *pView, const Window *pWin, u8 more){",
          "312:   int nElement = 0;",
          "313:   pView = sqlite3TreeViewPush(pView, more);",
          "314:   if( pWin->zName ){",
          "315:     sqlite3TreeViewLine(pView, \"OVER %s\", pWin->zName);",
          "316:   }else{",
          "317:     sqlite3TreeViewLine(pView, \"OVER\");",
          "318:   }",
          "320:   if( pWin->zBase )    nElement++;",
          "321:   if( pWin->pOrderBy ) nElement++;",
          "322:   if( pWin->eFrmType ) nElement++;",
          "323:   if( pWin->eExclude ) nElement++;",
          "329:   if( pWin->zBase ){",
          "330:     sqlite3TreeViewPush(pView, (--nElement)>0);",
          "331:     sqlite3TreeViewLine(pView, \"window: %s\", pWin->zBase);",
          "",
          "[Removed Lines]",
          "319:   if( pWin->pFilter )  nElement++;",
          "324:   if( pWin->pFilter ){",
          "325:     sqlite3TreeViewItem(pView, \"FILTER\", (--nElement)>0);",
          "326:     sqlite3TreeViewExpr(pView, pWin->pFilter, 0);",
          "327:     sqlite3TreeViewPop(pView);",
          "328:   }",
          "",
          "[Added Lines]",
          "313:   if( pWin->pFilter ){",
          "314:     sqlite3TreeViewItem(pView, \"FILTER\", 1);",
          "315:     sqlite3TreeViewExpr(pView, pWin->pFilter, 0);",
          "316:     sqlite3TreeViewPop(pView);",
          "317:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:     sqlite3TreeViewExprList(pView, pWin->pOrderBy, (--nElement)>0, \"ORDER-BY\");",
          "339:   }",
          "340:   if( pWin->eFrmType ){",
          "341:     const char *zFrmType = \"ROWS\";",
          "342:     if( pWin->eFrmType==TK_RANGE ) zFrmType = \"RANGE\";",
          "343:     if( pWin->eFrmType==TK_GROUPS ) zFrmType = \"GROUPS\";",
          "345:     sqlite3TreeViewBound(pView, pWin->eStart, pWin->pStart, 1);",
          "346:     sqlite3TreeViewBound(pView, pWin->eEnd, pWin->pEnd, 0);",
          "347:     sqlite3TreeViewPop(pView);",
          "",
          "[Removed Lines]",
          "344:     sqlite3TreeViewItem(pView, zFrmType, (--nElement)>0);",
          "",
          "[Added Lines]",
          "340:     char zBuf[30];",
          "344:     sqlite3_snprintf(sizeof(zBuf),zBuf,\"%s%s\",zFrmType,",
          "345:         pWin->bImplicitFrame ? \" (implied)\" : \"\");",
          "346:     sqlite3TreeViewItem(pView, zBuf, (--nElement)>0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27e80a3b68010d7ece74ed4a6836ab9f0b2fb9ac",
      "candidate_info": {
        "commit_hash": "27e80a3b68010d7ece74ed4a6836ab9f0b2fb9ac",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/27e80a3b68010d7ece74ed4a6836ab9f0b2fb9ac",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Ensure that the cell overwrite optimization does not overwrite the header of the b-tree page.\n\nFossilOrigin-Name: 4cc5694cbd69749c146679c367860952fdf3f5356426ddfd1dce470569702bc1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b517a52fa36df0a0854a75858b5e81861771d2e9032a5a0ad79aa76ae64130a2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7676:     memset(&b.szCell[b.nCell], 0, sizeof(b.szCell[0])*(limit+pOld->nOverflow));",
          "7677:     if( pOld->nOverflow>0 ){",
          "7679:         rc = SQLITE_CORRUPT_BKPT;",
          "7680:         goto balance_cleanup;",
          "7681:       }",
          "",
          "[Removed Lines]",
          "7678:       if( limit<pOld->aiOvfl[0] ){",
          "",
          "[Added Lines]",
          "7678:       if( NEVER(limit<pOld->aiOvfl[0]) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8480:     return SQLITE_CORRUPT_BKPT;",
          "8481:   }",
          "",
          "[Removed Lines]",
          "8479:   if( pCur->info.pPayload + pCur->info.nLocal > pPage->aDataEnd ){",
          "",
          "[Added Lines]",
          "8479:   if( pCur->info.pPayload + pCur->info.nLocal > pPage->aDataEnd",
          "8480:    || pCur->info.pPayload < pPage->aData + pPage->cellOffset",
          "8481:   ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1af016b7f45243f973725bb196ac413a8bbed95b",
      "candidate_info": {
        "commit_hash": "1af016b7f45243f973725bb196ac413a8bbed95b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1af016b7f45243f973725bb196ac413a8bbed95b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Remove -DSQLITE_USER_AUTHENTICATION from the \"Unlock-Notify\" configuration. Create a dedicated \"User-Auth\" configuration for testing this feature.\n\nFossilOrigin-Name: 8c41024fbba8c70b671c63a5719c6757f0e6dc731ce52caa755edbb8e21d6944",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bcdec85e21a5228c700f7373b92ae7ea14b585bcda34235b605be4f7ec15a15",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:     -DSQLITE_ENABLE_UNLOCK_NOTIFY",
          "80:     -DSQLITE_THREADSAFE",
          "81:     -DSQLITE_TCL_DEFAULT_FULLMUTEX=1",
          "82:     -DSQLITE_USER_AUTHENTICATION=1",
          "83:   }",
          "84:   \"Secure-Delete\" {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   }",
          "83:   \"User-Auth\" {",
          "84:     -O2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:     \"Have-Not\"                test",
          "275:     \"Secure-Delete\"           test",
          "276:     \"Unlock-Notify\"           \"QUICKTEST_INCLUDE=notify2.test test\"",
          "277:     \"Update-Delete-Limit\"     test",
          "278:     \"Extra-Robustness\"        test",
          "279:     \"Device-Two\"              test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:     \"User-Auth\"               tcltest",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ebb550824373fd1aca922b20af5db28ca3e6b87",
      "candidate_info": {
        "commit_hash": "2ebb550824373fd1aca922b20af5db28ca3e6b87",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ebb550824373fd1aca922b20af5db28ca3e6b87",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "ext/fts3/fts3_snippet.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5rank.test",
          "ext/lsm1/Makefile",
          "ext/lsm1/lsm_vtab.c",
          "ext/lsm1/test/lsm1_simple.test",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/loadext.c",
          "src/pragma.c",
          "src/pragma.h",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqlite3ext.h",
          "src/test1.c",
          "src/vtab.c",
          "src/where.c",
          "src/wherecode.c",
          "test/affinity2.test",
          "test/distinct2.test",
          "test/fts3snippet.test",
          "test/in5.test",
          "test/join.test",
          "test/pragma5.test",
          "test/windowfault.test",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Update this branch with latest trunk changes.\n\nFossilOrigin-Name: 6153bcf41a9aa0497f8210311c99ac23846223068f2b6a3a1c2d9dec7673c7e1",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "ext/fts5/test/fts5rank.test||ext/fts5/test/fts5rank.test",
          "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c",
          "ext/lsm1/test/lsm1_simple.test||ext/lsm1/test/lsm1_simple.test",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/loadext.c||src/loadext.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h",
          "src/test1.c||src/test1.c",
          "src/vtab.c||src/vtab.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c",
          "test/affinity2.test||test/affinity2.test",
          "test/distinct2.test||test/distinct2.test",
          "test/fts3snippet.test||test/fts3snippet.test",
          "test/in5.test||test/in5.test",
          "test/join.test||test/join.test",
          "test/pragma5.test||test/pragma5.test",
          "test/windowfault.test||test/windowfault.test",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/wherecode.c||src/wherecode.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c",
            "src/wherecode.c||src/wherecode.c"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "609: SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "610: SHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC",
          "611: SHELL_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "613: FUZZERSHELL_OPT = -DSQLITE_ENABLE_JSON1",
          "614: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5 -DSQLITE_OSS_FUZZ",
          "615: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "",
          "[Removed Lines]",
          "612: SHELL_OPT += -DSQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "351: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "352: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "353: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBSTAT_VTAB=1",
          "355: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "356: !ENDIF",
          "357: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_COLUMN_METADATA=1",
          "",
          "[Removed Lines]",
          "354: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_INTROSPECTION_PRAGMAS=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:       while( iCsr<(iStart+pIter->nSnippet) && iCsr>=iStart ){",
          "435:         int j;",
          "437:         u64 mPos = (u64)1 << (iCsr - iStart);",
          "438:         assert( iCsr>=iStart && (iCsr - iStart)<=64 );",
          "440:         if( (mCover|mCovered)&mPhrase ){",
          "441:           iScore++;",
          "442:         }else{",
          "",
          "[Removed Lines]",
          "436:         u64 mPhrase = (u64)1 << i;",
          "439:         assert( i>=0 && i<=64 );",
          "",
          "[Added Lines]",
          "436:         u64 mPhrase = (u64)1 << (i%64);",
          "439:         assert( i>=0 );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:   rc = fts5PrepareStatement(&pSorter->pStmt, pConfig,",
          "936:       pConfig->zDb, pConfig->zName, zRank, pConfig->zName,",
          "937:       (zRankArgs ? \", \" : \"\"),",
          "938:       (zRankArgs ? zRankArgs : \"\"),",
          "",
          "[Removed Lines]",
          "935:       \"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(%s%s%s) %s\",",
          "",
          "[Added Lines]",
          "935:       \"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(\\\"%w\\\"%s%s) %s\",",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768: do_catchsql_test 13.1 {",
          "769:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "772: #-------------------------------------------------------------------------",
          "773: reset_db",
          "",
          "[Removed Lines]",
          "770: } {1 {vtable constructor failed: t1}}",
          "",
          "[Added Lines]",
          "770: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "959: do_catchsql_test 15.1 {",
          "960:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "963: #---------------------------------------------------------------------------",
          "964: #",
          "",
          "[Removed Lines]",
          "961: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "961: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3903: | end crash-fed6e90021ba5d.db",
          "3904: }]} {}",
          "3907:   CREATE VIRTUAL TABLE t2 USING fts5vocab('t1','row');",
          "3908:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1','col');",
          "3909:   CREATE VIRTUAL TABLE t4 USING fts5vocab('t1','instance');",
          "3912: do_catchsql_test 33.2 {",
          "3913:   SELECT * FROM t2;",
          "3916: do_catchsql_test 33.3 {",
          "3917:   SELECT * FROM t2, t3, t4 WHERE t2.term=t3.term AND t3.term=t4.term;",
          "3920: #-------------------------------------------------------------------------",
          "3921: reset_db",
          "",
          "[Removed Lines]",
          "3906: do_execsql_test 33.1 {",
          "3910: }",
          "3914: } {1 {database disk image is malformed}}",
          "3918: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "3906: do_catchsql_test 33.1 {",
          "3910: } {/*malformed database schema*/}",
          "3914: } {/*malformed database schema*/}",
          "3918: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4638: do_catchsql_test 37.1 {",
          "4639:   SELECT * FROM t3;",
          "4642: #-------------------------------------------------------------------------",
          "4643: reset_db",
          "4645:   CREATE VIRTUAL TABLE t1 USING fts5(b, c);",
          "4646:   INSERT INTO t1 VALUES('a', 'b');",
          "4647:   SELECT quote(block) FROM t1_data WHERE rowid=10;",
          "4648: } {X'000000000101010001010101'}",
          "4651:   UPDATE t1_data SET block = X'FFFFFFFF0101010001010101' WHERE rowid = 10;",
          "4652:   SELECT rowid FROM t1('a');",
          "4653: } {1}",
          "",
          "[Removed Lines]",
          "4640: } {1 {database disk image is malformed}}",
          "4644: do_execsql_test 37.0 {",
          "4650: do_execsql_test 37.1 {",
          "",
          "[Added Lines]",
          "4640: } {/*malformed database schema*/}",
          "4644: do_execsql_test 37a.0 {",
          "4650: do_execsql_test 37a.1 {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4895: do_catchsql_test 38.1 {",
          "4896:   UPDATE t1 SET b=quote(zeroblob(200)) WHERE t1 MATCH 'thread*';",
          "4899: #-------------------------------------------------------------------------",
          "4900: reset_db",
          "",
          "[Removed Lines]",
          "4897: } {0 {}}",
          "",
          "[Added Lines]",
          "4897: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5326: | end crash2.txt.db",
          "5327: }]} {}",
          "5330:   BEGIN;",
          "5331:   INSERT INTO t1(b) VALUES(X'819192e578de3fa24af3733ca8769291a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bf');",
          "5332:   INSERT INTO t1(b) VALUES(X'c8ae0d0e7c3175946e62ba2b449511d4eb504079984a20f77969f62206c9f3d7ea25358ab705e6978627290b6d48db9032f815a06a79a4f4b809841a0942eed12954ed166f666111812a508abc3bec87958846edaec0a6fe14564bc0a4b78f1c35ebcacca6bae29cc37ae9b59d8a2d7593af1e47dda0ece2268a98d20febafad037964f139851f9a57f48b3706b01721769071991412044cd6006f1d72eb6eb4aa5ad77e378176db8c15575fbeee47165e38a7c6c5a557ac2dfe11813976eaf6741cf593a9e457053a3c34cddfbe605a6e25419f993de8374fafcd3636509d8416a51dc7bcc14cfca322ae343078f47e23522431c17d0da0c033');",
          "5333:   INSERT INTO t1(b) VALUES(X'dc29a94e873a45a4243fce9b912aaefbadf1d0423e0345793874b356eeb500b92fb05284c1601fe9bad3143f72162f10242cec27c44ebf764c8fc9fb0824e32c4161472a4f914f579e0e8274f08ca1a02e59b9d8eec1f31061f9ccb9ed97a6f06534e991f7992c761489e6a7724f6e9c2b581e77487ded3a986d53c4419bbd3e9747cee300e670dd7294874c77e2ed48da68eaa6c3ec954a09ac410493d98e34d6686e54fbbe80696705f10e040c66093efb40746b33600685c94c664c7942835a9e954866121d5dcfb2cb12e92521ea3df175ee17072502dad9b9c1565f801b2179799011eb7418bfa00323e3157589e648ff7378be233c79b7');",
          "5336: do_catchsql_test 40.2 {",
          "5337:   INSERT INTO t1(a,b) VALUES(1,11),(2,22),(3, true ),(4,44);",
          "5340: #-------------------------------------------------------------------------",
          "5341: reset_db",
          "",
          "[Removed Lines]",
          "5329: do_execsql_test 40.1 {",
          "5334: }",
          "5338: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5329: do_catchsql_test 40.1 {",
          "5334: } {/*malformed database schema*/}",
          "5338: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5790: do_catchsql_test 43.1 {",
          "5791:   INSERT INTO t1(t1) VALUES('optimize');",
          "5794: #-------------------------------------------------------------------------",
          "5795: reset_db",
          "",
          "[Removed Lines]",
          "5792: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "5792: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6047:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6048:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6049:   INSERT INTO t1(t1, rank) VALUES('merge', 5);",
          "6052: #--------------------------------------------------------------------------",
          "6053: reset_db",
          "",
          "[Removed Lines]",
          "6050: } {0 {}}",
          "",
          "[Added Lines]",
          "6050: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6266: do_catchsql_test 46.1 {",
          "6267:   SELECT snippet(t1,'[','', '--',-1,10) FROM t1('*');",
          "6270: #--------------------------------------------------------------------------",
          "6271: reset_db",
          "",
          "[Removed Lines]",
          "6268: } {0 {{}}}",
          "",
          "[Added Lines]",
          "6268: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6419: do_catchsql_test 47.1 {",
          "6420:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "6423: do_catchsql_test 47.2 {",
          "6424:   SELECT count(*) FROM (",
          "",
          "[Removed Lines]",
          "6421: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "6421: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6426:       highlight(t1, 2, '[', ']') FROM t1('g h')",
          "6427:       WHERE rank MATCH 'bm25(1.0, 1.0)' ORDER BY rank",
          "6428:   )",
          "6431: #--------------------------------------------------------------------------",
          "6432: reset_db",
          "",
          "[Removed Lines]",
          "6429: } {0 3}",
          "",
          "[Added Lines]",
          "6429: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7131: do_catchsql_test 52.1 {",
          "7132:   SELECT fts5_decode(id, block) FROM t1_data;",
          "7135: #-------------------------------------------------------------------------",
          "7136: reset_db",
          "",
          "[Removed Lines]",
          "7133: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "7133: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7346: do_catchsql_test 53.1 {",
          "7347:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x<>1 FROM c WHERE x<10)",
          "7348:     INSERT INTO t1(a) SELECT randomblob(3000) FROM c;",
          "7351: #-------------------------------------------------------------------------",
          "7352: reset_db",
          "",
          "[Removed Lines]",
          "7349: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "7349: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7563: do_catchsql_test 54.1 {",
          "7564:   SELECT rowid==-1 FROM t1('t*');",
          "7567: #-------------------------------------------------------------------------",
          "7568: reset_db",
          "",
          "[Removed Lines]",
          "7565: } {0 {0 0 0}}",
          "",
          "[Added Lines]",
          "7565: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7777: | end crash-b366b5ac0d3887.db",
          "7778: }]} {}",
          "7781:   SAVEPOINT one;",
          "7782:   DELETE FROM t1 WHERE a MATCH 'ts';",
          "7785: do_execsql_test 55.2 {",
          "7786:   ROLLBACK TO one;",
          "",
          "[Removed Lines]",
          "7780: do_execsql_test 55.1 {",
          "7783: }",
          "",
          "[Added Lines]",
          "7780: do_catchsql_test 55.1 {",
          "7783: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8013:     set res \"1 {database disk image is malformed}\"",
          "8014:   }",
          "8015:   set res",
          "8018: #-------------------------------------------------------------------------",
          "8019: reset_db",
          "",
          "[Removed Lines]",
          "8016: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8016: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8132: do_catchsql_test 57.1 {",
          "8133:   INSERT INTO t1(t1) VALUES('optimize')",
          "8136: #-------------------------------------------------------------------------",
          "8137: reset_db",
          "",
          "[Removed Lines]",
          "8134: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8134: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8339: | end crash-5a5acd0ab42d31.db",
          "8340: }]} {}",
          "8343:   SELECT * FROM t1('t*');",
          "8346: #-------------------------------------------------------------------------",
          "8347: do_test 59.0 {",
          "",
          "[Removed Lines]",
          "8342: do_execsql_test 58.1 {",
          "8344: } {{} {} {} {} {} {}}",
          "",
          "[Added Lines]",
          "8342: do_catchsql_test 58.1 {",
          "8344: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8948: | end crash-e5fa281edabddf.db",
          "8949: }]} {}",
          "8952:   CREATE VIRTUAL TABLE t3 USING fts5vocab('t1'(),'col' );",
          "8955: do_catchsql_test 61.2 {",
          "8956:   SELECT * FROM t3 ORDER BY rowid;",
          "8959: breakpoint",
          "8960: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "8951: do_execsql_test 61.1 {",
          "8953: }",
          "8957: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "8951: do_catchsql_test 61.1 {",
          "8953: } {/*malformed database schema*/}",
          "8957: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "9159: do_catchsql_test 62.1 {",
          "9160:   WITH c(x) AS (VALUES(false) UNION ALL SELECT x+1 FROM c WHERE x<72)",
          "9161:     INSERT INTO t1(a) SELECT randomblob(2829) FROM c;",
          "9164: #---------------------------------------------------------------------------",
          "9165: do_test 63.0 {",
          "",
          "[Removed Lines]",
          "9162: } {0 {}}",
          "",
          "[Added Lines]",
          "9162: } {/*malformed database schema*/}",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "9358: do_catchsql_test 63.1 {",
          "9359:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9362: do_catchsql_test 63.2 {",
          "9363:   INSERT INTO t1(t1) VALUES('optimize');",
          "9367: do_catchsql_test 63.3 {",
          "9368:   SELECT * FROM t1 WHERE b MATCH 'thead*thead*theSt*';",
          "9371: sqlite3_fts5_may_be_corrupt 0",
          "9372: finish_test",
          "",
          "[Removed Lines]",
          "9360: } {1 {database disk image is malformed}}",
          "9364: } {0 {}}",
          "9366: breakpoint",
          "9369: } {0 {}}",
          "",
          "[Added Lines]",
          "9360: } {/*malformed database schema*/}",
          "9364: } {/*malformed database schema*/}",
          "9368: } {/*malformed database schema*/}",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5rank.test||ext/fts5/test/fts5rank.test": [
          "File: ext/fts5/test/fts5rank.test -> ext/fts5/test/fts5rank.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:   SELECT rowid FROM ttt('word') WHERE rowid BETWEEN 30 AND 40 ORDER BY rank;",
          "163: } {30 31 32 33 34 35 36 37 38 39 40}",
          "165: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: #-------------------------------------------------------------------------",
          "166: reset_db",
          "167: do_execsql_test 6.0 {",
          "168:   CREATE VIRTUAL TABLE \"My.Table\" USING fts5(Text);",
          "170:   INSERT INTO \"My.Table\" VALUES ('hello this is a test');",
          "171:   INSERT INTO \"My.Table\" VALUES ('of trying to order by');",
          "172:   INSERT INTO \"My.Table\" VALUES ('rank on an fts5 table');",
          "173:   INSERT INTO \"My.Table\" VALUES ('that have periods in');",
          "174:   INSERT INTO \"My.Table\" VALUES ('the table names.');",
          "175:   INSERT INTO \"My.Table\" VALUES ('table table table');",
          "176: }",
          "177: do_execsql_test 6.1 {",
          "178:   SELECT * FROM \"My.Table\" WHERE Text MATCH 'table' ORDER BY rank;",
          "179: } {",
          "180:   {table table table} {the table names.} {rank on an fts5 table}",
          "181: }",
          "",
          "---------------"
        ],
        "ext/lsm1/lsm_vtab.c||ext/lsm1/lsm_vtab.c": [
          "File: ext/lsm1/lsm_vtab.c -> ext/lsm1/lsm_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "843:   const struct sqlite3_index_constraint *pConstraint;",
          "844:   pConstraint = pIdxInfo->aConstraint;",
          "846:     if( pConstraint->usable==0 ) continue;",
          "847:     if( pConstraint->iColumn!=0 ) continue;",
          "848:     switch( pConstraint->op ){",
          "",
          "[Removed Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint && idxNum<16; i++, pConstraint++){",
          "",
          "[Added Lines]",
          "845:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "",
          "---------------"
        ],
        "ext/lsm1/test/lsm1_simple.test||ext/lsm1/test/lsm1_simple.test": [
          "File: ext/lsm1/test/lsm1_simple.test -> ext/lsm1/test/lsm1_simple.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: do_execsql_test 211 {",
          "89:   SELECT quote(a), quote(lsm1_key), quote(lsm1_value), '|' FROM x1;",
          "90: } {'12' X'3132' X'05320000000000000A401FFB42ABE9DB' | '15' X'3135' X'4284C6' | '8' X'38' X'2162616E6A6F1633323105' |}",
          "93: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: do_execsql_test 212 {",
          "92:   SELECT quote(a), quote(lsm1_key), quote(lsm1_value) FROM x1 WHERE a='12';",
          "93: } {'12' X'3132' X'05320000000000000A401FFB42ABE9DB'}",
          "95: #-------------------------------------------------------------------------",
          "96: reset_db",
          "97: forcedelete testlsm.db",
          "98: load_lsm1_vtab db",
          "99: do_execsql_test 300 {",
          "100:   CREATE VIRTUAL TABLE x1 USING lsm1(testlsm.db,a,TEXT,b,c,d);",
          "101: }",
          "102: do_eqp_test 310 {",
          "103:   SELECT * FROM x1 WHERE a=?",
          "104: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 0:}",
          "106: do_eqp_test 320 {",
          "107:   SELECT * FROM x1 WHERE a>?",
          "108: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 2:}",
          "110: do_eqp_test 330 {",
          "111:   SELECT * FROM x1 WHERE a<?",
          "112: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 3:}",
          "113: do_eqp_test 340 {",
          "114:   SELECT * FROM x1 WHERE a BETWEEN ? AND ?",
          "115: } {SCAN TABLE x1 VIRTUAL TABLE INDEX 1:}",
          "117: #-------------------------------------------------------------------------",
          "118: reset_db",
          "119: forcedelete testlsm.db",
          "120: load_lsm1_vtab db",
          "121: do_execsql_test 400 {",
          "122:   CREATE VIRTUAL TABLE x1 USING lsm1(testlsm.db,a,TEXT,b);",
          "123:   INSERT INTO x1 VALUES('one', 1);",
          "124:   INSERT INTO x1 VALUES('two', 2);",
          "125:   INSERT INTO x1 VALUES('three', 3);",
          "126:   INSERT INTO x1 VALUES('four', 4);",
          "127:   INSERT INTO x1 VALUES('five', 5);",
          "128: }",
          "129: do_execsql_test 410 {",
          "130:   SELECT b FROM x1 WHERE a = 'two'",
          "131: } {2}",
          "132: do_execsql_test 411 {",
          "133:   SELECT b FROM x1 WHERE a = 'one'",
          "134: } {1}",
          "135: do_execsql_test 412 {",
          "136:   SELECT b FROM x1 WHERE a = 'five'",
          "137: } {5}",
          "139: do_execsql_test 420 {",
          "140:   SELECT b FROM x1 WHERE a BETWEEN 'one' AND 'three';",
          "141: } {1 3}",
          "142: do_execsql_test 421 {",
          "143:   SELECT b FROM x1 WHERE a BETWEEN 'five' AND 'two';",
          "144: } {5 4 1 3 2}",
          "145: do_execsql_test 421 {",
          "146:   SELECT b FROM x1 WHERE a > 'five';",
          "147: } {4 1 3 2}",
          "148: do_execsql_test 421 {",
          "149:   SELECT b FROM x1 WHERE a <= 'three';",
          "150: } {3 1 4 5}",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "527: SHELL_OPT += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "528: SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "529: SHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC",
          "531: FUZZERSHELL_OPT = -DSQLITE_ENABLE_JSON1",
          "532: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "533: FUZZCHECK_OPT += -DSQLITE_MAX_MEMORY=50000000",
          "",
          "[Removed Lines]",
          "530: SHELL_OPT += -DSQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0dbbb51f4d39cafb01d625d65c12dcb232a9c1da7ed5a9397bf55cfea1b980d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1512: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1513:     pNew->pWin = 0;",
          "1514:     pNew->pWinDefn = sqlite3WindowListDup(db, p->pWinDefn);",
          "1516: #endif",
          "1517:     pNew->selId = p->selId;",
          "",
          "[Removed Lines]",
          "1515:     if( p->pWin ) gatherSelectWindows(pNew);",
          "",
          "[Added Lines]",
          "1515:     if( p->pWin && db->mallocFailed==0 ) gatherSelectWindows(pNew);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2807:     int i;",
          "2808:     ExprList *pList = pExpr->x.pList;",
          "2809:     struct ExprList_item *pItem;",
          "2811:     affinity = sqlite3ExprAffinity(pLeft);",
          "2812:     if( affinity<=SQLITE_AFF_NONE ){",
          "2813:       affinity = SQLITE_AFF_BLOB;",
          "",
          "[Removed Lines]",
          "2810:     int r1, r2, r3;",
          "",
          "[Added Lines]",
          "2810:     int r1, r2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2835:       }",
          "2841:     }",
          "2842:     sqlite3ReleaseTempReg(pParse, r1);",
          "2843:     sqlite3ReleaseTempReg(pParse, r2);",
          "",
          "[Removed Lines]",
          "2838:       r3 = sqlite3ExprCodeTarget(pParse, pE2, r1);",
          "2839:       sqlite3VdbeAddOp4(v, OP_MakeRecord, r3, 1, r2, &affinity, 1);",
          "2840:       sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r3, 1);",
          "",
          "[Added Lines]",
          "2838:       sqlite3ExprCode(pParse, pE2, r1);",
          "2839:       sqlite3VdbeAddOp4(v, OP_MakeRecord, r1, 1, r2, &affinity, 1);",
          "2840:       sqlite3VdbeAddOp4Int(v, OP_IdxInsert, iTab, r2, r1, 1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4014:       break;",
          "4015:     }",
          "4017:     case TK_IF_NULL_ROW: {",
          "4018:       int addrINR;",
          "4019:       addrINR = sqlite3VdbeAddOp1(v, OP_IfNullRow, pExpr->iTable);",
          "4020:       inReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft, target);",
          "4021:       sqlite3VdbeJumpHere(v, addrINR);",
          "4022:       sqlite3VdbeChangeP3(v, addrINR, inReg);",
          "4023:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4025:       u8 okConstFactor = pParse->okConstFactor;",
          "4031:       pParse->okConstFactor = 0;",
          "4033:       pParse->okConstFactor = okConstFactor;",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: #endif",
          "463:   sqlite3_stmt_isexplain,",
          "465: };",
          "",
          "[Removed Lines]",
          "464:   sqlite3_value_frombind",
          "",
          "[Added Lines]",
          "464:   sqlite3_value_frombind,",
          "466:   sqlite3_drop_modules,",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1245:   }",
          "1246:   break;",
          "1249:   case PragTyp_FUNCTION_LIST: {",
          "1250:     int i;",
          "1251:     HashElem *j;",
          "",
          "[Removed Lines]",
          "1248: #ifdef SQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "1248: #ifndef SQLITE_OMIT_INTROSPECTION_PRAGMAS",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "312: #endif",
          "313: #if !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "315:  {/* zName:     */ \"function_list\",",
          "",
          "[Removed Lines]",
          "314: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "",
          "[Added Lines]",
          "314: #if !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435: #endif",
          "436: #if !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "437: #if !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "439:  {/* zName:     */ \"module_list\",",
          "",
          "[Removed Lines]",
          "438: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "",
          "[Added Lines]",
          "438: #if !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "471: #endif",
          "472: #endif",
          "474:  {/* zName:     */ \"pragma_list\",",
          "",
          "[Removed Lines]",
          "473: #if defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "",
          "[Added Lines]",
          "473: #if !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3652: #ifdef SQLITE_DEBUG",
          "3653:   \".unmodule NAME ...       Unregister virtual table modules\",",
          "3654: #endif",
          "3655:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3656:   \".vfslist                 List all available VFSes\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3654:   \"    --allexcept             Unregister everything except those named\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6892:   int nArg = 0;",
          "6893:   int n, c;",
          "6894:   int rc = 0;",
          "6897: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "6898:   if( p->expert.pExpert ){",
          "",
          "[Removed Lines]",
          "6895:   char *azArg[50];",
          "",
          "[Added Lines]",
          "6896:   char *azArg[52];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6906:     while( IsSpace(zLine[h]) ){ h++; }",
          "6907:     if( zLine[h]==0 ) break;",
          "6908:     if( zLine[h]=='\\'' || zLine[h]=='\"' ){",
          "",
          "[Removed Lines]",
          "6905:   while( zLine[h] && nArg<ArraySize(azArg) ){",
          "",
          "[Added Lines]",
          "6906:   while( zLine[h] && nArg<ArraySize(azArg)-1 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6923:       resolve_backslashes(azArg[nArg-1]);",
          "6924:     }",
          "6925:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6927:   azArg[nArg] = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8461:         appendText(&sSelect, \".sqlite_master\", 0);",
          "8462:       }",
          "8463:       sqlite3_finalize(pStmt);",
          "8465:       if( zName ){",
          "8466:         appendText(&sSelect,",
          "8467:            \" UNION ALL SELECT shell_module_schema(name),\"",
          "",
          "[Removed Lines]",
          "8464: #ifdef SQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "8466: #ifndef SQLITE_OMIT_INTROSPECTION_PRAGMAS",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9407: #ifdef SQLITE_DEBUG",
          "9408:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9409:     int ii;",
          "9410:     if( nArg<2 ){",
          "9412:       rc = 1;",
          "9413:       goto meta_command_exit;",
          "9414:     }",
          "9415:     open_db(p, 0);",
          "9418:     }",
          "9419:   }else",
          "9420: #endif",
          "",
          "[Removed Lines]",
          "9411:       raw_printf(stderr, \"Usage: .unmodule NAME ...\\n\");",
          "9416:     for(ii=1; ii<nArg; ii++){",
          "9417:       sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "",
          "[Added Lines]",
          "9412:     int lenOpt;",
          "9413:     char *zOpt;",
          "9415:       raw_printf(stderr, \"Usage: .unmodule [--allexcept] NAME ...\\n\");",
          "9420:     zOpt = azArg[1];",
          "9421:     if( zOpt[0]=='-' && zOpt[1]=='-' && zOpt[2]!=0 ) zOpt++;",
          "9422:     lenOpt = (int)strlen(zOpt);",
          "9423:     if( lenOpt>=3 && strncmp(zOpt, \"-allexcept\",lenOpt)==0 ){",
          "9424:       assert( azArg[nArg]==0 );",
          "9425:       sqlite3_drop_modules(p->db, nArg>2 ? (const char**)(azArg+2) : 0);",
          "9426:     }else{",
          "9427:       for(ii=1; ii<nArg; ii++){",
          "9428:         sqlite3_create_module(p->db, azArg[ii], 0, 0);",
          "9429:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6655: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6671: int sqlite3_drop_modules(",
          "6674: );",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:   int (*stmt_isexplain)(sqlite3_stmt*);",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "325: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   int (*drop_modules)(sqlite3*,const char**);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "616: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "619: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define sqlite3_drop_modules           sqlite3_api->drop_modules",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1110:   return TCL_OK;",
          "1111: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120: static int SQLITE_TCLAPI test_drop_modules(",
          "1121:   void *NotUsed,",
          "1125: ){",
          "1126:   sqlite3 *db;",
          "1128:   if( argc!=2 ){",
          "1129:     Tcl_AppendResult(interp, \"wrong # args: should be \\\"\", argv[0],",
          "1130:        \" DB\\\"\", 0);",
          "1131:     return TCL_ERROR;",
          "1132:   }",
          "1133:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1134:   sqlite3_drop_modules(db, argc>2 ? (const char**)(argv+2) : 0);",
          "1135:   return TCL_OK;",
          "1136: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7860:      { \"sqlite3_close_v2\",              (Tcl_CmdProc*)sqlite_test_close_v2  },",
          "7861:      { \"sqlite3_create_function\",       (Tcl_CmdProc*)test_create_function  },",
          "7862:      { \"sqlite3_create_aggregate\",      (Tcl_CmdProc*)test_create_aggregate },",
          "7863:      { \"sqlite_register_test_function\", (Tcl_CmdProc*)test_register_func    },",
          "7864:      { \"sqlite_abort\",                  (Tcl_CmdProc*)sqlite_abort          },",
          "7865:      { \"sqlite_bind\",                   (Tcl_CmdProc*)test_bind             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7888:      { \"sqlite3_drop_modules\",          (Tcl_CmdProc*)test_drop_modules     },",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:       sqlite3DbFree(db, pDel);",
          "73:       pMod = 0;",
          "74:     }else{",
          "75:       sqlite3VtabModuleUnref(db, pDel);",
          "76:     }",
          "77:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:       sqlite3VtabEponymousTableClear(db, pDel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   return createModule(db, zName, pModule, pAux, xDestroy);",
          "133: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: int sqlite3_drop_modules(sqlite3 *db, const char** azNames){",
          "141:   HashElem *pThis, *pNext;",
          "142: #ifdef SQLITE_ENABLE_API_ARMOR",
          "143:   if( !sqlite3SafetyCheckOk(db) ) return SQLITE_MISUSE_BKPT;",
          "144: #endif",
          "145:   for(pThis=sqliteHashFirst(&db->aModule); pThis; pThis=pNext){",
          "146:     Module *pMod = (Module*)sqliteHashData(pThis);",
          "147:     pNext = sqliteHashNext(pThis);",
          "148:     if( azNames ){",
          "149:       int ii;",
          "150:       for(ii=0; azNames[ii]!=0 && strcmp(azNames[ii],pMod->zName)!=0; ii++){}",
          "151:       if( azNames[ii]!=0 ) continue;",
          "152:     }",
          "153:     createModule(db, pMod->zName, 0, 0, 0);",
          "154:   }",
          "155:   return SQLITE_OK;",
          "156: }",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3766:           u16 eOp = pLoop->aLTerm[j]->eOperator;",
          "3776:           if( (eOp & eqOpMask)!=0 ){",
          "3778:               testcase( isOrderDistinct );",
          "3779:               isOrderDistinct = 0;",
          "3780:             }",
          "",
          "[Removed Lines]",
          "3777:             if( eOp & WO_ISNULL ){",
          "",
          "[Added Lines]",
          "3781:             if( eOp & (WO_ISNULL|WO_IS) ){",
          "3782:               testcase( eOp & WO_ISNULL );",
          "3783:               testcase( eOp & WO_IS );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117: static int whereIndexExprTransNode(Walker *p, Expr *pExpr){",
          "1118:   IdxExprTrans *pX = p->u.pIdxTrans;",
          "1119:   if( sqlite3ExprCompare(0, pExpr, pX->pIdxExpr, pX->iTabCur)==0 ){",
          "1120:     pExpr->op = TK_COLUMN;",
          "1121:     pExpr->iTable = pX->iIdxCur;",
          "1122:     pExpr->iColumn = pX->iIdxCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120:     pExpr->affExpr = sqlite3ExprAffinity(pExpr);",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: do_execsql_test affinity2-100 {",
          "19:   CREATE TABLE t1(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: set testprefix affinity2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   SELECT rowid, xt==+xi, xt==xi, xt==xb FROM t1 ORDER BY rowid;",
          "59: } {1 1 1 0 2 1 1 1 3 0 1 1}",
          "61: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #-------------------------------------------------------------------------",
          "63: do_execsql_test 400 {",
          "64:   CREATE TABLE ttt(c0, c1);",
          "65:   CREATE INDEX ii ON ttt(CAST(c0 AS NUMERIC));",
          "66:   INSERT INTO ttt VALUES('abc', '-1');",
          "67: }",
          "68: do_execsql_test 410 {",
          "69:   SELECT * FROM ttt WHERE CAST(c0 AS NUMERIC) > c1 GROUP BY rowid;",
          "70: } {abc -1}",
          "71: do_execsql_test 420 {",
          "72:   SELECT * FROM ttt INDEXED BY ii WHERE CAST(c0 AS NUMERIC) > c1 GROUP BY rowid;",
          "73: } {abc -1}",
          "75: do_execsql_test 430 {",
          "76:   CREATE TABLE t3(a, b, c INTEGER);",
          "77:   CREATE INDEX t3ac ON t3(a, c-1);",
          "78:   INSERT INTO t3 VALUES(1, 1, 1);",
          "79:   INSERT INTO t3 VALUES(2, 1, 0);",
          "80:   INSERT INTO t3 VALUES(3, 1, 1);",
          "81:   INSERT INTO t3 VALUES(4, 1, 0);",
          "82:   INSERT INTO t3 VALUES(5, 1, 1);",
          "83: }",
          "84: do_execsql_test 440 {",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "",
          "---------------"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "274:   two 1 1",
          "275: }",
          "279: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #-------------------------------------------------------------------------",
          "278: #",
          "279: reset_db",
          "280: do_execsql_test 3000 {",
          "281:   CREATE TABLE t0 (c0, c1 NOT NULL DEFAULT 1, c2, PRIMARY KEY (c0, c1));",
          "282:   INSERT INTO t0(c2) VALUES (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL), (NULL);",
          "283:   INSERT INTO t0(c2) VALUES('a');",
          "284: }",
          "286: do_execsql_test 3010 {",
          "287:   SELECT DISTINCT * FROM t0 WHERE NULL IS t0.c0;",
          "288: } {",
          "289:   {} 1 {}",
          "290:   {} 1 a",
          "291: }",
          "293: do_execsql_test 3020 {",
          "294:   ANALYZE;",
          "295: }",
          "297: do_execsql_test 3030 {",
          "298:   SELECT DISTINCT * FROM t0 WHERE NULL IS c0;",
          "299: } {",
          "300:   {} 1 {}",
          "301:   {} 1 a",
          "302: }",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "561:   }]",
          "562: } {64}",
          "566: set sqlite_fts3_enable_parentheses 0",
          "567: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564: #-------------------------------------------------------------------------",
          "565: # Request a snippet from a query with more than 64 phrases.",
          "566: #",
          "567: do_execsql_test 5.0 {",
          "568:   CREATE VIRTUAL TABLE t5 USING fts3(x);",
          "569:   INSERT INTO t5 VALUES('a1 a2 a3');",
          "570:   INSERT INTO t5 VALUES('a4 a5 a6');",
          "571:   INSERT INTO t5 VALUES('a70 a71 a72');",
          "572: }",
          "574: do_execsql_test 5.1 {",
          "575:   SELECT snippet(t5, '[', ']') FROM t5 WHERE t5 MATCH",
          "576:   'a1 OR a2 OR a3 OR a4 OR a5 OR a6 OR a7 OR a8 OR a9 OR a10 OR ' ||",
          "577:   'a11 OR a12 OR a13 OR a14 OR a15 OR a16 OR a17 OR a18 OR a19 OR a10 OR ' ||",
          "578:   'a21 OR a22 OR a23 OR a24 OR a25 OR a26 OR a27 OR a28 OR a29 OR a20 OR ' ||",
          "579:   'a31 OR a32 OR a33 OR a34 OR a35 OR a36 OR a37 OR a38 OR a39 OR a30 OR ' ||",
          "580:   'a41 OR a42 OR a43 OR a44 OR a45 OR a46 OR a47 OR a48 OR a49 OR a40 OR ' ||",
          "581:   'a51 OR a52 OR a53 OR a54 OR a55 OR a56 OR a57 OR a58 OR a59 OR a50 OR ' ||",
          "582:   'a61 OR a62 OR a63 OR a64 OR a65 OR a66 OR a67 OR a68 OR a69 OR a60 OR ' ||",
          "583:   'a71 OR a72 OR a73 OR a74 OR a75 OR a76 OR a77 OR a78 OR a79 OR a70'",
          "584: } {",
          "585:   {[a1] [a2] [a3]}",
          "586:   {[a4] [a5] [a6]}",
          "587:   {[a70] [a71] [a72]}",
          "588: }",
          "",
          "---------------"
        ],
        "test/in5.test||test/in5.test": [
          "File: test/in5.test -> test/in5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   SELECT * FROM t9 WHERE a IN (44, 45, 44, 45)",
          "249: } {44 45}",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: #-------------------------------------------------------------------------",
          "252: # Test that ticket c7a117190 is fixed.",
          "253: #",
          "254: reset_db",
          "255: do_execsql_test 9.0 {",
          "256:   CREATE TABLE t0(c0);",
          "257:   CREATE VIEW v0(c0) AS SELECT LOWER(CAST('1e500' AS TEXT)) FROM t0;",
          "258:   INSERT INTO t0(c0) VALUES (NULL);",
          "259: }",
          "261: do_execsql_test 9.1 {",
          "262:   SELECT lower('1e500') FROM t0 WHERE rowid NOT IN (0, 0, lower('1e500'));",
          "263: } {1e500}",
          "265: do_execsql_test 9.2 {",
          "266:   SELECT lower('1e500') FROM t0 WHERE rowid != lower('1e500');",
          "267: } {1e500}",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:    WHERE (b IS NOT NULL)=0;",
          "865: } {1 {}}",
          "867: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: # 2019-08-17 ticket https://sqlite.org/src/tktview/6710d2f7a13a299728ab",
          "868: # Ensure that constants that derive from the right-hand table of a LEFT JOIN",
          "869: # are never factored out, since they are not really constant.",
          "870: #",
          "871: do_execsql_test join-17.100 {",
          "872:   DROP TABLE IF EXISTS t1;",
          "873:   CREATE TABLE t1(x);",
          "874:   INSERT INTO t1(x) VALUES(0),(1);",
          "875:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1) AS y FROM t1) ON x WHERE NOT(y='a');",
          "876: } {1 1 1 1}",
          "877: do_execsql_test join-17.110 {",
          "878:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1)+2 AS y FROM t1) ON x",
          "879:    WHERE NOT(y='a');",
          "880: } {1 3 1 3}",
          "",
          "---------------"
        ],
        "test/pragma5.test||test/pragma5.test": [
          "File: test/pragma5.test -> test/pragma5.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "13: # This file implements tests for the PRAGMA command. Specifically,",
          "15: #",
          "17: #",
          "19: set testdir [file dirname $argv0]",
          "",
          "[Removed Lines]",
          "14: # those pragmas enabled at build time by setting:",
          "16: #   -DSQLITE_INTROSPECTION_PRAGMAS",
          "",
          "[Added Lines]",
          "14: # those pragmas that are not disabled at build time by setting:",
          "16: #   -DSQLITE_OMIT_INTROSPECTION_PRAGMAS",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: catch {db close}",
          "225: tvfs delete",
          "227: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227: reset_db",
          "228: do_execsql_test 10.0 {",
          "229:   CREATE TABLE t1(a, b, c, d);",
          "230:   CREATE TABLE t2(a, b, c, d);",
          "231: }",
          "233: do_faultsim_test 1 -faults oom* -prep {",
          "234: } -body {",
          "235:   execsql {",
          "236:     SELECT row_number() OVER win",
          "237:     FROM t1",
          "238:     WINDOW win AS (",
          "239:       ORDER BY (",
          "240:         SELECT percent_rank() OVER win2 FROM t2",
          "241:         WINDOW win2 AS (ORDER BY a)",
          "242:       )",
          "243:     )",
          "244:   }",
          "245: } -test {",
          "246:   faultsim_test_result {0 {}}",
          "247: }",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:   FLAG: Result0",
          "265:   COLS: name builtin",
          "266:   IF:   !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "269:   NAME: module_list",
          "270:   FLAG: Result0",
          "271:   COLS: name",
          "272:   IF:   !defined(SQLITE_OMIT_SCHEMA_PRAGMAS)",
          "273:   IF:   !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "276:   NAME: pragma_list",
          "277:   FLAG: Result0",
          "278:   COLS: name",
          "281:   NAME: collation_list",
          "282:   FLAG: Result0",
          "",
          "[Removed Lines]",
          "267:   IF:   defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "274:   IF:   defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "279:   IF:   defined(SQLITE_INTROSPECTION_PRAGMAS)",
          "",
          "[Added Lines]",
          "267:   IF:   !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "274:   IF:   !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "279:   IF:   !defined(SQLITE_OMIT_INTROSPECTION_PRAGMAS)",
          "",
          "---------------"
        ]
      }
    }
  ]
}