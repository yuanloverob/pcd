{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dfb109c522a450af7f387d66ad32afeee87f9805",
      "candidate_info": {
        "commit_hash": "dfb109c522a450af7f387d66ad32afeee87f9805",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/dfb109c522a450af7f387d66ad32afeee87f9805",
        "files": [
          "crypto/bn/bn_shift.c"
        ],
        "message": "bn: fix occurance of negative zero in BN_rshift1()\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit 0a2dcb6990dacc94337f746f4f4a6dfac1fbeac4)",
        "before_after_code_files": [
          "crypto/bn/bn_shift.c||crypto/bn/bn_shift.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_shift.c||crypto/bn/bn_shift.c": [
          "File: crypto/bn/bn_shift.c -> crypto/bn/bn_shift.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         c = (t & 1) ? BN_TBIT : 0;",
          "75:     }",
          "76:     r->top = j;",
          "77:     bn_check_top(r);",
          "78:     return (1);",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     if (!r->top)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1d2ea3a54527996e9425de807143b061206e0ab",
      "candidate_info": {
        "commit_hash": "e1d2ea3a54527996e9425de807143b061206e0ab",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e1d2ea3a54527996e9425de807143b061206e0ab",
        "files": [
          "crypto/x509v3/v3_purp.c"
        ],
        "message": "Fix for #2730. Add CRLDP extension to list of supported extensions\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3087)\n(cherry picked from commit e6f648fd880369e186039501c960809b17f96e88)",
        "before_after_code_files": [
          "crypto/x509v3/v3_purp.c||crypto/x509v3/v3_purp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509v3/v3_purp.c||crypto/x509v3/v3_purp.c": [
          "File: crypto/x509v3/v3_purp.c -> crypto/x509v3/v3_purp.c"
        ]
      }
    },
    {
      "candidate_hash": "3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
      "candidate_info": {
        "commit_hash": "3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3f60b8fbdc9b17572a86457fe5b11437c0d3fbc2",
        "files": [
          "ssl/ssl_locl.h",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c"
        ],
        "message": "Use correct signature algorithm list when sending or checking.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2297)",
        "before_after_code_files": [
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ],
          "candidate": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/t1_lib.c||ssl/t1_lib.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2062:                                  const unsigned char *psig, size_t psiglen);",
          "2063: __owur int tls1_save_sigalgs(SSL *s, const unsigned char *data, int dsize);",
          "2064: __owur int tls1_process_sigalgs(SSL *s);",
          "2066: __owur int tls12_check_peer_sigalg(const EVP_MD **pmd, SSL *s,",
          "2067:                                    const unsigned char *sig, EVP_PKEY *pkey);",
          "2068: void ssl_set_client_disabled(SSL *s);",
          "",
          "[Removed Lines]",
          "2065: __owur size_t tls12_get_psigalgs(SSL *s, const unsigned char **psigs);",
          "",
          "[Added Lines]",
          "2065: __owur size_t tls12_get_psigalgs(SSL *s, int sent, const unsigned char **psigs);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2002:     if (SSL_USE_SIGALGS(s)) {",
          "2003:         const unsigned char *psigs;",
          "2004:         unsigned char *etmp = p;",
          "2007:         p += 2;",
          "2008:         nl = tls12_copy_sigalgs(s, p, psigs, nl);",
          "",
          "[Removed Lines]",
          "2005:         nl = tls12_get_psigalgs(s, &psigs);",
          "",
          "[Added Lines]",
          "2005:         nl = tls12_get_psigalgs(s, 1, &psigs);",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "711:         tlsext_sigalg_ecdsa(TLSEXT_hash_sha384)",
          "712: };",
          "713: #endif",
          "715: {",
          "",
          "[Removed Lines]",
          "714: size_t tls12_get_psigalgs(SSL *s, const unsigned char **psigs)",
          "",
          "[Added Lines]",
          "714: size_t tls12_get_psigalgs(SSL *s, int sent, const unsigned char **psigs)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:     }",
          "734: #endif",
          "738:         return s->cert->client_sigalgslen;",
          "739:     } else if (s->cert->conf_sigalgs) {",
          "",
          "[Removed Lines]",
          "736:     if (s->server && s->cert->client_sigalgs) {",
          "",
          "[Added Lines]",
          "736:     if (s->server == sent && s->cert->client_sigalgs) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "797: #endif",
          "801:     for (i = 0; i < sent_sigslen; i += 2, sent_sigs += 2) {",
          "802:         if (sig[0] == sent_sigs[0] && sig[1] == sent_sigs[1])",
          "803:             break;",
          "",
          "[Removed Lines]",
          "800:     sent_sigslen = tls12_get_psigalgs(s, &sent_sigs);",
          "",
          "[Added Lines]",
          "800:     sent_sigslen = tls12_get_psigalgs(s, 1, &sent_sigs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189:         size_t salglen;",
          "1190:         const unsigned char *salg;",
          "1191:         unsigned char *etmp;",
          "",
          "[Removed Lines]",
          "1192:         salglen = tls12_get_psigalgs(s, &salg);",
          "",
          "[Added Lines]",
          "1192:         salglen = tls12_get_psigalgs(s, 1, &salg);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3400:     for (i = 0; i < sigalgslen; i += 2, sigalgs += 2) {",
          "3401:         switch (sigalgs[1]) {",
          "3402: #ifndef OPENSSL_NO_RSA",
          "",
          "[Removed Lines]",
          "3399:     sigalgslen = tls12_get_psigalgs(s, &sigalgs);",
          "",
          "[Added Lines]",
          "3399:     sigalgslen = tls12_get_psigalgs(s, 1, &sigalgs);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3491:         conf = c->conf_sigalgs;",
          "3492:         conflen = c->conf_sigalgslen;",
          "3493:     } else",
          "3495:     if (s->options & SSL_OP_CIPHER_SERVER_PREFERENCE || is_suiteb) {",
          "3496:         pref = conf;",
          "3497:         preflen = conflen;",
          "",
          "[Removed Lines]",
          "3494:         conflen = tls12_get_psigalgs(s, &conf);",
          "",
          "[Added Lines]",
          "3494:         conflen = tls12_get_psigalgs(s, 0, &conf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6642518dedfef916066bf26c588dc5fa70ebf2e",
      "candidate_info": {
        "commit_hash": "f6642518dedfef916066bf26c588dc5fa70ebf2e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f6642518dedfef916066bf26c588dc5fa70ebf2e",
        "files": [
          "engines/engine_vector.mar"
        ],
        "message": "Code health: Remove unused VAX transfer vector for engines\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2793)\n(cherry picked from commit 38a322a5f29ae0b4a9bd42233310835487d875ac)",
        "before_after_code_files": [
          "engines/engine_vector.mar||engines/engine_vector.mar"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/engine_vector.mar||engines/engine_vector.mar": [
          "File: engines/engine_vector.mar -> engines/engine_vector.mar",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
      "candidate_info": {
        "commit_hash": "c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c6a9f005be1cf8e29a0985643b27b9548bcfdee2",
        "files": [
          "crypto/srp/srp_vfy.c"
        ],
        "message": "Prevent OOB in SRP base64 code.\n\nChange size comparison from > (GT) to >= (GTE) to ensure an additional\nbyte of output buffer, to prevent OOB reads/writes later in the function\nReject input strings larger than 2GB\nDetect invalid output buffer size and return early\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2672)\n\n(cherry picked from commit ecca16632a73bb80ee27cdec8a97f6def0a4714d)",
        "before_after_code_files": [
          "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
          "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     int i, j;",
          "37:     int size;",
          "39:     while (*src && (*src == ' ' || *src == '\\t' || *src == '\\n'))",
          "40:         ++src;",
          "41:     size = strlen(src);",
          "43:         return -1;",
          "45:     i = 0;",
          "",
          "[Removed Lines]",
          "42:     if (alen > INT_MAX || size > (int)alen)",
          "",
          "[Added Lines]",
          "39:     if (alen == 0 || alen > INT_MAX)",
          "40:         return -1;",
          "45:     if (size < 0 || size >= (int)alen)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         if (--i < 0)",
          "78:             break;",
          "79:     }",
          "81:         ++j;",
          "82:     i = 0;",
          "83:     while (j <= size)",
          "",
          "[Removed Lines]",
          "80:     while (a[j] == 0 && j <= size)",
          "",
          "[Added Lines]",
          "83:     while (j <= size && a[j] == 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}