{
  "cve_id": "CVE-2017-14991",
  "cve_desc": "The sg_ioctl function in drivers/scsi/sg.c in the Linux kernel before 4.13.4 allows local users to obtain sensitive information from uninitialized kernel heap-memory locations via an SG_GET_REQUEST_TABLE ioctl call for /dev/sg0.",
  "repo": "torvalds/linux",
  "patch_hash": "3e0097499839e0fe3af380410eababe5a47c4cf9",
  "patch_info": {
    "commit_hash": "3e0097499839e0fe3af380410eababe5a47c4cf9",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/3e0097499839e0fe3af380410eababe5a47c4cf9",
    "files": [
      "drivers/scsi/sg.c"
    ],
    "message": "scsi: sg: fixup infoleak when using SG_GET_REQUEST_TABLE\n\nWhen calling SG_GET_REQUEST_TABLE ioctl only a half-filled table is\nreturned; the remaining part will then contain stale kernel memory\ninformation.  This patch zeroes out the entire table to avoid this\nissue.\n\nSigned-off-by: Hannes Reinecke <hare@suse.com>\nReviewed-by: Bart Van Assche <bart.vanassche@wdc.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/sg.c||drivers/scsi/sg.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/sg.c||drivers/scsi/sg.c": [
      "File: drivers/scsi/sg.c -> drivers/scsi/sg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "839:  list_for_each_entry(srp, &sfp->rq_list, entry) {",
      "840:   if (val > SG_MAX_QUEUE)",
      "841:    break;",
      "843:   rinfo[val].req_state = srp->done + 1;",
      "844:   rinfo[val].problem =",
      "845:    srp->header.masked_status &",
      "",
      "[Removed Lines]",
      "842:   memset(&rinfo[val], 0, SZ_SG_REQ_INFO);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1047:   else {",
      "1048:    sg_req_info_t *rinfo;",
      "1052:    if (!rinfo)",
      "1053:     return -ENOMEM;",
      "1054:    read_lock_irqsave(&sfp->rq_list_lock, iflags);",
      "",
      "[Removed Lines]",
      "1050:    rinfo = kmalloc(SZ_SG_REQ_INFO * SG_MAX_QUEUE,",
      "1051:         GFP_KERNEL);",
      "",
      "[Added Lines]",
      "1049:    rinfo = kzalloc(SZ_SG_REQ_INFO * SG_MAX_QUEUE,",
      "1050:      GFP_KERNEL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4759df905a474d245752c9dc94288e779b8734dd",
      "candidate_info": {
        "commit_hash": "4759df905a474d245752c9dc94288e779b8734dd",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4759df905a474d245752c9dc94288e779b8734dd",
        "files": [
          "drivers/scsi/sg.c"
        ],
        "message": "scsi: sg: factor out sg_fill_request_table()\n\nFactor out sg_fill_request_table() for better readability.\n\n[mkp: typos, applied by hand]\n\nSigned-off-by: Hannes Reinecke <hare@suse.com>\nReviewed-by: Bart Van Assche <bart.vanassche@wdc.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/sg.c||drivers/scsi/sg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/scsi/sg.c||drivers/scsi/sg.c"
          ],
          "candidate": [
            "drivers/scsi/sg.c||drivers/scsi/sg.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/scsi/sg.c||drivers/scsi/sg.c": [
          "File: drivers/scsi/sg.c -> drivers/scsi/sg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:  return max_sectors << 9;",
          "829: }",
          "831: static long",
          "832: sg_ioctl(struct file *filp, unsigned int cmd_in, unsigned long arg)",
          "833: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "831: static void",
          "832: sg_fill_request_table(Sg_fd *sfp, sg_req_info_t *rinfo)",
          "833: {",
          "834:  Sg_request *srp;",
          "835:  int val;",
          "836:  unsigned int ms;",
          "838:  val = 0;",
          "839:  list_for_each_entry(srp, &sfp->rq_list, entry) {",
          "840:   if (val > SG_MAX_QUEUE)",
          "841:    break;",
          "842:   memset(&rinfo[val], 0, SZ_SG_REQ_INFO);",
          "843:   rinfo[val].req_state = srp->done + 1;",
          "844:   rinfo[val].problem =",
          "845:    srp->header.masked_status &",
          "846:    srp->header.host_status &",
          "847:    srp->header.driver_status;",
          "848:   if (srp->done)",
          "849:    rinfo[val].duration =",
          "850:     srp->header.duration;",
          "851:   else {",
          "852:    ms = jiffies_to_msecs(jiffies);",
          "853:    rinfo[val].duration =",
          "854:     (ms > srp->header.duration) ?",
          "855:     (ms - srp->header.duration) : 0;",
          "856:   }",
          "857:   rinfo[val].orphan = srp->orphan;",
          "858:   rinfo[val].sg_io_owned = srp->sg_io_owned;",
          "859:   rinfo[val].pack_id = srp->header.pack_id;",
          "860:   rinfo[val].usr_ptr = srp->header.usr_ptr;",
          "861:   val++;",
          "862:  }",
          "863: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1012:    return -EFAULT;",
          "1013:   else {",
          "1014:    sg_req_info_t *rinfo;",
          "1017:    rinfo = kmalloc(SZ_SG_REQ_INFO * SG_MAX_QUEUE,",
          "1018:         GFP_KERNEL);",
          "1019:    if (!rinfo)",
          "1020:     return -ENOMEM;",
          "1021:    read_lock_irqsave(&sfp->rq_list_lock, iflags);",
          "1047:    read_unlock_irqrestore(&sfp->rq_list_lock, iflags);",
          "1048:    result = __copy_to_user(p, rinfo,",
          "1049:       SZ_SG_REQ_INFO * SG_MAX_QUEUE);",
          "",
          "[Removed Lines]",
          "1015:    unsigned int ms;",
          "1022:    val = 0;",
          "1023:    list_for_each_entry(srp, &sfp->rq_list, entry) {",
          "1024:     if (val >= SG_MAX_QUEUE)",
          "1025:      break;",
          "1026:     memset(&rinfo[val], 0, SZ_SG_REQ_INFO);",
          "1027:     rinfo[val].req_state = srp->done + 1;",
          "1028:     rinfo[val].problem =",
          "1029:      srp->header.masked_status &",
          "1030:      srp->header.host_status &",
          "1031:      srp->header.driver_status;",
          "1032:     if (srp->done)",
          "1033:      rinfo[val].duration =",
          "1034:       srp->header.duration;",
          "1035:     else {",
          "1036:      ms = jiffies_to_msecs(jiffies);",
          "1037:      rinfo[val].duration =",
          "1038:       (ms > srp->header.duration) ?",
          "1039:       (ms - srp->header.duration) : 0;",
          "1040:     }",
          "1041:     rinfo[val].orphan = srp->orphan;",
          "1042:     rinfo[val].sg_io_owned = srp->sg_io_owned;",
          "1043:     rinfo[val].pack_id = srp->header.pack_id;",
          "1044:     rinfo[val].usr_ptr = srp->header.usr_ptr;",
          "1045:     val++;",
          "1046:    }",
          "",
          "[Added Lines]",
          "1055:    sg_fill_request_table(sfp, rinfo);",
          "",
          "---------------"
        ]
      }
    }
  ]
}