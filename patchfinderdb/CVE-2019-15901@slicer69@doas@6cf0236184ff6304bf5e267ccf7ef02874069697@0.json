{
  "cve_id": "CVE-2019-15901",
  "cve_desc": "An issue was discovered in slicer69 doas before 6.2 on certain platforms other than OpenBSD. A setusercontext(3) call with flags to change the UID, primary GID, and secondary GIDs was replaced (on certain platforms: Linux and possibly NetBSD) with a single setuid(2) call. This resulted in neither changing the group id nor initializing secondary group ids.",
  "repo": "slicer69/doas",
  "patch_hash": "6cf0236184ff6304bf5e267ccf7ef02874069697",
  "patch_info": {
    "commit_hash": "6cf0236184ff6304bf5e267ccf7ef02874069697",
    "repo": "slicer69/doas",
    "commit_url": "https://github.com/slicer69/doas/commit/6cf0236184ff6304bf5e267ccf7ef02874069697",
    "files": [
      "doas.c"
    ],
    "message": "fix the setusercontext(3) workaround\n\nSeeing this being used on even more system like Illumos with this ugly\nand security critical bug open makes me cringe every time I check if it\nwas finally fixed.\n\nI reported it directly to the maintainer in 2017. I reported it to\npkgsrc-security@netbsd.org without a response.",
    "before_after_code_files": [
      "doas.c||doas.c"
    ]
  },
  "patch_diff": {
    "doas.c||doas.c": [
      "File: doas.c -> doas.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "542:      LOGIN_SETPRIORITY | LOGIN_SETRESOURCES | LOGIN_SETUMASK |",
      "543:      LOGIN_SETUSER) != 0)",
      "544:   errx(1, \"failed to set user context for target\");",
      "545: #endif",
      "547:  if (pledge(\"stdio rpath exec\", NULL) == -1)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "545: #else",
      "546:  #if defined(__linux__) || defined(__FreeBSD__) || defined(__NetBSD__)",
      "547:  if (setresgid(target_pw->pw_gid, target_pw->pw_gid, target_pw->pw_gid) == -1)",
      "548:   err(1, \"setresgid\");",
      "549:  #else",
      "550:  if (setregid(target_pw->pw_gid, target_pw->pw_gid) == -1)",
      "551:   err(1, \"setregid\");",
      "552:  #endif",
      "553:  if (initgroups(target_pw->pw_name, target_pw->pw_gid) == -1)",
      "554:   err(1, \"initgroups\");",
      "555:  #if defined(__linux__) || defined(__FreeBSD__) || defined(__NetBSD__)",
      "556:  if (setresuid(target, target, target) == -1)",
      "557:   err(1, \"setresuid\");",
      "558:  #else",
      "559:  if (setreuid(target, target) == -1)",
      "560:   err(1, \"setreuid\");",
      "561:  #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "557:         if (pledge(\"stdio exec\", NULL) == -1)",
      "558:   err(1, \"pledge\");",
      "569:  syslog(LOG_AUTHPRIV | LOG_INFO, \"%s ran command %s as %s from %s\",",
      "570:      myname, cmdline, target_pw->pw_name, cwd);",
      "",
      "[Removed Lines]",
      "560: #ifndef HAVE_LOGIN_CAP_H",
      "563:         if (target != 0)",
      "564:            setuid(target);",
      "565:         if ( geteuid() == ROOT_UID )",
      "566:            setuid(ROOT_UID);",
      "567: #endif",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "705dd9ce2440878c78251ea92c4161f914300cdd",
      "candidate_info": {
        "commit_hash": "705dd9ce2440878c78251ea92c4161f914300cdd",
        "repo": "slicer69/doas",
        "commit_url": "https://github.com/slicer69/doas/commit/705dd9ce2440878c78251ea92c4161f914300cdd",
        "files": [
          "Makefile",
          "compat/compat.h",
          "compat/setresuid.c",
          "doas.c",
          "doas.h",
          "env.c",
          "execvpe.c",
          "reallocarray.c",
          "strlcat.c",
          "strlcpy.c",
          "tree.h"
        ],
        "message": "Reorganized compatibility code and Makefile. - amalleo25 Provided cleaner fix for crash when user/command has no valid match in the doas.conf file. - amalleo25 Removed option to match UID with -u flag. Provided usernames must now match a username, not UID. This was ambigious if a user had a numeric username. - Jesse",
        "before_after_code_files": [
          "compat/compat.h||compat/compat.h",
          "compat/setresuid.c||compat/setresuid.c",
          "doas.c||doas.c",
          "doas.h||doas.h",
          "env.c||env.c",
          "execvpe.c||execvpe.c",
          "reallocarray.c||reallocarray.c",
          "strlcat.c||strlcat.c",
          "strlcpy.c||strlcpy.c",
          "tree.h||tree.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "doas.c||doas.c"
          ],
          "candidate": [
            "doas.c||doas.c"
          ]
        }
      },
      "candidate_diff": {
        "compat/compat.h||compat/compat.h": [
          "File: compat/compat.h -> compat/compat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <sys/types.h>",
          "2: #include <stdarg.h>",
          "4: void errc(int eval, int code, const char *fmt, ...);",
          "6: int setresuid(uid_t ruid, uid_t euid, uid_t suid);",
          "8: void verrc(int eval, int code, const char *fmt, va_list ap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #if !defined(__NetBSD__)",
          "5: void closefrom(int lowfd);",
          "6: #endif",
          "10: int execvpe(const char *file, char * const *argv, char * const *envp);",
          "12: extern const char *__progname;",
          "14: const char *getprogname(void);",
          "16: void *reallocarray(void *optr, size_t nmemb, size_t size);",
          "18: void setprogname(const char *progname);",
          "22: size_t strlcat(char *dst, const char *src, size_t dsize);",
          "24: size_t strlcpy(char *dst, const char *src, size_t dsize);",
          "26: long long strtonum(const char *numstr, long long minval, long long maxval,",
          "27:  const char **errstrp);",
          "",
          "---------------"
        ],
        "compat/setresuid.c||compat/setresuid.c": [
          "File: compat/setresuid.c -> compat/setresuid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: int",
          "7: setresuid(uid_t ruid, uid_t euid, uid_t suid)",
          "8: {",
          "11:  if (ruid != suid) {",
          "12:   errno = ENOSYS;",
          "13:   return -1;",
          "14:  }",
          "21: }",
          "",
          "[Removed Lines]",
          "9:  int ret = 0;",
          "16:  if (setreuid(ruid, euid) < 0) {",
          "17:   ret = -1;",
          "18:  }",
          "20:  return ret;",
          "",
          "[Added Lines]",
          "32:  return setreuid(ruid, euid);",
          "",
          "---------------"
        ],
        "doas.c||doas.c": [
          "File: doas.c -> doas.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  exit(1);",
          "73: }",
          "87: static int",
          "88: parseuid(const char *s, uid_t *uid)",
          "89: {",
          "90:  struct passwd *pw;",
          "99:   return 0;",
          "100:  }",
          "111: }",
          "113: static int",
          "",
          "[Removed Lines]",
          "75: #ifdef linux",
          "76: void",
          "77: errc(int eval, int code, const char *format)",
          "78: {",
          "79:    if (format)",
          "80:       fprintf(stderr, \"%s\", format);",
          "81:     else",
          "82:       fprintf(stderr, \"doas: Permission error encountered. Your user may not have access to perform this action.\\n\");",
          "83:    exit(code);",
          "84: }",
          "85: #endif",
          "91:  #if !defined(__linux__) && !defined(__NetBSD__)",
          "92:  const char *errstr = NULL;",
          "93:         #else",
          "94:         int status;",
          "95:         #endif",
          "97:  if ((pw = getpwnam(s)) != NULL) {",
          "101:  #if !defined(__linux__) && !defined(__NetBSD__)",
          "103:  if (errstr)",
          "104:   return -1;",
          "105:  #else",
          "106:  status = sscanf(s, \"%d\", uid);",
          "107:         if (status != 1)",
          "108:            return -1;",
          "109:  #endif",
          "110:  return 0;",
          "",
          "[Added Lines]",
          "79:         pw = getpwnam(s);",
          "80:  if (pw != NULL) {",
          "84:  return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126: parsegid(const char *s, gid_t *gid)",
          "127: {",
          "128:  struct group *gr;",
          "137:   return 0;",
          "138:  }",
          "149: }",
          "151: static int",
          "",
          "[Removed Lines]",
          "129:  #if !defined(__linux__) && !defined(__NetBSD__)",
          "130:  const char *errstr = NULL;",
          "131:         #else",
          "132:         int status;",
          "133:         #endif",
          "135:  if ((gr = getgrnam(s)) != NULL) {",
          "139:  #if !defined(__linux__) && !defined(__NetBSD__)",
          "141:  if (errstr)",
          "142:   return -1;",
          "143:  #else",
          "144:  status = sscanf(s, \"%d\", gid);",
          "145:         if (status != 1)",
          "146:             return -1;",
          "147:  #endif",
          "148:  return 0;",
          "",
          "[Added Lines]",
          "103:         gr = getgrnam(s);",
          "104:  if (gr != NULL) {",
          "108:  return -1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:  status = setreuid(uid, uid);",
          "246:  #endif",
          "247:  if (status == -1)",
          "252:  parseconfig(confpath, 0);",
          "253:  if (!argc)",
          "254:   exit(0);",
          "",
          "[Removed Lines]",
          "248:  {",
          "249:   printf(\"doas: Unable to set UID\\n\");",
          "250:   exit(1);",
          "251:  }",
          "",
          "[Added Lines]",
          "208:   errx(1, \"unable to set uid to %d\", uid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "337:         #endif",
          "338:  char **envp;",
          "341:  setprogname(\"doas\");",
          "345:  closefrom(STDERR_FILENO + 1);",
          "348:  uid = getuid();",
          "",
          "[Removed Lines]",
          "340:  #ifndef linux",
          "342:  #endif",
          "344:  #ifndef linux",
          "346:  #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:      LOGIN_SETUSER) != 0)",
          "562:   errx(1, \"failed to set user context for target\");",
          "563: #else",
          "565:  if (setresgid(target_pw->pw_gid, target_pw->pw_gid, target_pw->pw_gid) == -1)",
          "566:   err(1, \"setresgid\");",
          "567:  #else",
          "",
          "[Removed Lines]",
          "564:  #if defined(__linux__) || defined(__FreeBSD__) || defined(__NetBSD__)",
          "",
          "[Added Lines]",
          "518:  #if defined(__linux__) || defined(__FreeBSD__)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "570:  #endif",
          "571:  if (initgroups(target_pw->pw_name, target_pw->pw_gid) == -1)",
          "572:   err(1, \"initgroups\");",
          "574:  if (setresuid(target, target, target) == -1)",
          "575:   err(1, \"setresuid\");",
          "576:  #else",
          "",
          "[Removed Lines]",
          "573:  #if defined(__linux__) || defined(__FreeBSD__) || defined(__NetBSD__)",
          "",
          "[Added Lines]",
          "527:  #if defined(__linux__) || defined(__FreeBSD__)",
          "",
          "---------------"
        ],
        "doas.h||doas.h": [
          "File: doas.h -> doas.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #define SAFE_PATH \"/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin\"",
          "64: #endif",
          "",
          "[Removed Lines]",
          "66: void *reallocarray(void *ptr, size_t nmemb, size_t size);",
          "68: #if !defined(HAVE_EXECVPE)",
          "69: int execvpe(const char *file, char * const *argv, char * const *envp);",
          "72: #ifdef linux",
          "73: void errc(int eval, int code, const char *format);",
          "74: size_t strlcat(char *dst, const char *src, size_t dsize);",
          "75: size_t strlcpy(char *dst, const char *src, size_t dsize);",
          "76: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "env.c||env.c": [
          "File: env.c -> env.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <sys/types.h>",
          "20: #include <sys/tree.h>",
          "23: #include <stdio.h>",
          "24: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "19: #ifndef linux",
          "21: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: #include <unistd.h>",
          "29: #include <errno.h>",
          "35: #include \"doas.h\"",
          "37: struct envnode {",
          "",
          "[Removed Lines]",
          "31: #ifdef linux",
          "32: #include \"tree.h\"",
          "33: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "execvpe.c||execvpe.c": [
          "File: execvpe.c -> execvpe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "reallocarray.c||reallocarray.c": [
          "File: reallocarray.c -> reallocarray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "strlcat.c||strlcat.c": [
          "File: strlcat.c -> strlcat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "strlcpy.c||strlcpy.c": [
          "File: strlcpy.c -> strlcpy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tree.h||tree.h": [
          "File: tree.h -> tree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}