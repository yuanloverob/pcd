{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
      "candidate_info": {
        "commit_hash": "7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7edcb11ca7153b3e8a0b01d14142453e2b11ea6f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix a typo in the documentation for sqlite3_total_changes().\n\nFossilOrigin-Name: 8474c1560e0c3a28c6a7ed360202a8e7caae3c8259f60bbfa6d2948ab7876f51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 84162af521f29df8a186163fbdef9856e1aa8aba78e74d7df0ba2cc83bb86240",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "61cb4ed7f10f9363572a73c1d087bdb10410835b",
      "candidate_info": {
        "commit_hash": "61cb4ed7f10f9363572a73c1d087bdb10410835b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/61cb4ed7f10f9363572a73c1d087bdb10410835b",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Add comments in the parse.sql file to help demonstrate how rules are encoded.\n\nFossilOrigin-Name: 2c4f714892327a1a9a303267b1f9685e310cca5dcea9c61287d95e26291b0506",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3a82c554c3bde4640df6865686f8f70e2c1e07c581fed4772b6b0a8ec1b10bb6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4224:     );",
          "4225:     for(i=0, rp=lemp->rule; rp; rp=rp->next, i++){",
          "4226:       assert( i==rp->iRule );",
          "4227:       fprintf(sql,",
          "4228:         \"INSERT INTO rule(ruleid,lhs)VALUES(%d,%d);\\n\",",
          "4229:         rp->iRule, rp->lhs->index",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4227:       fprintf(sql, \"-- \");",
          "4228:       writeRuleText(sql, rp);",
          "4229:       fprintf(sql, \"\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13d795026705020e58603a4005c99ad0fbfb73b2",
      "candidate_info": {
        "commit_hash": "13d795026705020e58603a4005c99ad0fbfb73b2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/13d795026705020e58603a4005c99ad0fbfb73b2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/vdbe.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/update.test"
        ],
        "message": "Enhance the sqlite3VdbeMemAboutToChange() shallow-copy validation mechanism by adding the new OP_ReleaseReg opcode to tell MemAboutToChange() that a range of registers is no longer needed so that the source register can be freely changed.  This is a change to debugging and test builds only and does not impact release builds.  Fix for ticket [c62c5e58524b204d] and [5ad2aa6921faa1ee].  The previous fix to ticket [5ad2aa6921faa1ee] is backed out by this change since this change is a better fix.\n\nFossilOrigin-Name: 36fdeb4f0a66970a35de688b617f90899c89cfdfab659f864df99aa7ebf854ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/update.test||test/update.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9ab985a9c8160b905730678f40ed440a246cdec549c798bafefaed5abbc0437f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3680:           }else",
          "3682:           if( pCol->affinity==SQLITE_AFF_REAL ){",
          "3684:             sqlite3VdbeAddOp1(v, OP_RealAffinity, target);",
          "3685:             return target;",
          "3686:           }else{",
          "",
          "[Removed Lines]",
          "3683:             sqlite3VdbeAddOp2(v, OP_Copy, iSrc, target);",
          "",
          "[Added Lines]",
          "3683:             sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4065:         sqlite3VdbeAddFunctionCall(pParse, constMask, r1, target, nFarg,",
          "4066:                                    pDef, pExpr->op2);",
          "4067:       }",
          "4070:       }",
          "4071:       return target;",
          "4072:     }",
          "",
          "[Removed Lines]",
          "4068:       if( nFarg && constMask==0 ){",
          "4069:         sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "",
          "[Added Lines]",
          "4068:       if( nFarg ){",
          "4069:         if( constMask==0 ){",
          "4070:           sqlite3ReleaseTempRange(pParse, r1, nFarg);",
          "4071:         }else{",
          "4072:           sqlite3VdbeReleaseRegisters(pParse, r1, nFarg, constMask);",
          "4073:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5709: void sqlite3ReleaseTempReg(Parse *pParse, int iReg){",
          "5712:   }",
          "5713: }",
          "",
          "[Removed Lines]",
          "5710:   if( iReg && pParse->nTempReg<ArraySize(pParse->aTempReg) ){",
          "5711:     pParse->aTempReg[pParse->nTempReg++] = iReg;",
          "",
          "[Added Lines]",
          "5714:   if( iReg ){",
          "5715:     sqlite3VdbeReleaseRegisters(pParse, iReg, 1, 0);",
          "5716:     if( pParse->nTempReg<ArraySize(pParse->aTempReg) ){",
          "5717:       pParse->aTempReg[pParse->nTempReg++] = iReg;",
          "5718:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5734:     sqlite3ReleaseTempReg(pParse, iReg);",
          "5735:     return;",
          "5736:   }",
          "5737:   if( nReg>pParse->nRangeReg ){",
          "5738:     pParse->nRangeReg = nReg;",
          "5739:     pParse->iRangeReg = iReg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5744:   sqlite3VdbeReleaseRegisters(pParse, iReg, nReg, 0);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2143:   VdbeBranchTaken(iCompare!=0, 2);",
          "2144:   if( iCompare!=0 ) goto jump_to_p2;",
          "2145:   break;",
          "",
          "[Removed Lines]",
          "2140:   assert( pOp>aOp );",
          "2141:   assert( pOp[-1].opcode==OP_Lt || pOp[-1].opcode==OP_Gt );",
          "2142:   assert( pOp[-1].p5 & SQLITE_STOREP2 );",
          "",
          "[Added Lines]",
          "2146: #ifdef SQLITE_DEBUG",
          "2150:   int iAddr;",
          "2151:   for(iAddr = (int)(pOp - aOp) - 1; ALWAYS(iAddr>=0); iAddr--){",
          "2152:     if( aOp[iAddr].opcode==OP_ReleaseReg ) continue;",
          "2153:     assert( aOp[iAddr].opcode==OP_Lt || aOp[iAddr].opcode==OP_Gt );",
          "2154:     assert( aOp[iAddr].p5 & SQLITE_STOREP2 );",
          "2155:     break;",
          "2156:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7685: }",
          "7686: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7703: #ifdef SQLITE_DEBUG",
          "7732: case OP_ReleaseReg: {",
          "7733:   Mem *pMem;",
          "7734:   int i;",
          "7735:   u32 constMask;",
          "7736:   assert( pOp->p1>0 );",
          "7737:   assert( pOp->p1+pOp->p2<=(p->nMem+1 - p->nCursor)+1 );",
          "7738:   pMem = &aMem[pOp->p1];",
          "7739:   constMask = pOp->p3;",
          "7740:   for(i=0; i<pOp->p2; i++, pMem++){",
          "7741:     if( (constMask & MASKBIT32(i))==0 ){",
          "7742:       pMem->pScopyFrom = 0;",
          "7744:     }",
          "7745:   }",
          "7746:   break;",
          "7747: }",
          "7748: #endif",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: void sqlite3VdbeJumpHere(Vdbe*, int addr);",
          "233: int sqlite3VdbeChangeToNoop(Vdbe*, int addr);",
          "234: int sqlite3VdbeDeletePriorOpcode(Vdbe*, u8 op);",
          "235: void sqlite3VdbeChangeP4(Vdbe*, int addr, const char *zP4, int N);",
          "236: void sqlite3VdbeAppendP4(Vdbe*, void *pP4, int p4type);",
          "237: void sqlite3VdbeSetP4KeyInfo(Parse*, Index*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235: #ifdef SQLITE_DEBUG",
          "236:   void sqlite3VdbeReleaseRegisters(Parse*,int addr, int n, u32 mask);",
          "237: #else",
          "238: # define sqlite3VdbeReleaseRegisters(P,A,N,M)",
          "239: #endif",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1186:   }",
          "1187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1189: #ifdef SQLITE_DEBUG",
          "1194: void sqlite3VdbeReleaseRegisters(Parse *pParse, int iFirst, int N, u32 mask){",
          "1195:   assert( pParse->pVdbe );",
          "1196:   while( N>0 && (mask&1)!=0 ){",
          "1197:     mask >>= 1;",
          "1198:     iFirst++;",
          "1199:     N--;",
          "1200:   }",
          "1201:   while( N>0 && N<=32 && (mask & MASKBIT32(N-1))!=0 ){",
          "1202:     mask &= ~MASKBIT32(N-1);",
          "1203:     N--;",
          "1204:   }",
          "1205:   if( N>0 ){",
          "1206:     sqlite3VdbeAddOp3(pParse->pVdbe, OP_ReleaseReg, iFirst, N, *(int*)&mask);",
          "1207:   }",
          "1208: }",
          "",
          "---------------"
        ],
        "test/update.test||test/update.test": [
          "File: test/update.test -> test/update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "672:   SELECT * FROM t0;",
          "673: } {xyz 345 uvw 345}",
          "675: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "675: # 2019-12-22 ticket c62c5e58524b204d",
          "676: # This is really the same underlying problem as 5ad2aa6921faa1ee",
          "677: #",
          "678: reset_db",
          "679: do_execsql_test update-18.20 {",
          "680:   PRAGMA encoding = 'utf16';",
          "681:   CREATE TABLE t0(c0 TEXT);",
          "682:   CREATE INDEX i0 ON t0(0 LIKE COALESCE(c0, 0));",
          "683:   INSERT INTO t0(c0) VALUES (0), (0);",
          "684:   SELECT * FROM t0;",
          "685: } {0 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
      "candidate_info": {
        "commit_hash": "337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/337cc3992a688d2e44b4a6e09c1fad088dec423d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/intreal.test"
        ],
        "message": "Fix the OP_Affinity operator so that when applying REAL affinity, it only sets MEM_IntReal if the integer value will fit in 6 bytes or less. Fix for ticket [ba2f4585cf495231]\n\nFossilOrigin-Name: 2b221bb15fd2b9f6a426e5eb439f7dbabbe3c4cab010c49b87dae3bb1f16c081",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cea8a892f76bddc63b921ffc11ea8dce8f8cf649a2c77aa908c7c5c91eed7f4c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2817:     assert( memIsValid(pIn1) );",
          "2818:     applyAffinity(pIn1, zAffinity[0], encoding);",
          "2819:     if( zAffinity[0]==SQLITE_AFF_REAL && (pIn1->flags & MEM_Int)!=0 ){",
          "2824:     }",
          "2825:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2826:     zAffinity++;",
          "",
          "[Removed Lines]",
          "2822:       pIn1->flags |= MEM_IntReal;",
          "2823:       pIn1->flags &= ~MEM_Int;",
          "",
          "[Added Lines]",
          "2824:       testcase( pIn1->u.i==140737488355328LL );",
          "2825:       testcase( pIn1->u.i==140737488355327LL );",
          "2826:       testcase( pIn1->u.i==-140737488355328LL );",
          "2827:       testcase( pIn1->u.i==-140737488355329LL );",
          "2828:       if( pIn1->u.i<=140737488355327LL && pIn1->u.i>=-140737488355328LL ){",
          "2829:         pIn1->flags |= MEM_IntReal;",
          "2830:         pIn1->flags &= ~MEM_Int;",
          "2831:       }else{",
          "2832:         pIn1->u.r = (double)pIn1->u.i;",
          "2833:         pIn1->flags |= MEM_Real;",
          "2834:         pIn1->flags &= ~MEM_Int;",
          "2835:       }",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   );",
          "83: } [list a $D]",
          "86: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: # 2019-07-29 ticket ba2f4585cf495231",
          "86: #",
          "87: db close",
          "88: sqlite3 db :memory:",
          "89: do_execsql_test 3.0 {",
          "90:   CREATE TABLE t0 (c0 REAL, c1);",
          "91:   CREATE UNIQUE INDEX i0 ON t0(c1, 0 | c0);",
          "92:   INSERT INTO t0(c0) VALUES (4750228396194493326), (0);",
          "93:   UPDATE OR REPLACE t0 SET c0 = 'a', c1 = '';",
          "94:   SELECT * FROM t0 ORDER BY t0.c1;",
          "95:   PRAGMA integrity_check;",
          "96: } {a {} ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0cbcd0edf4af5afa382ccdf18845ea9fe13e4a9",
      "candidate_info": {
        "commit_hash": "b0cbcd0edf4af5afa382ccdf18845ea9fe13e4a9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0cbcd0edf4af5afa382ccdf18845ea9fe13e4a9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzzdata8.db"
        ],
        "message": "When a corrupt schema is loaded using writable_schema=ON, the CHECK constraints (or other expressions in the table definition) might not be fully resolved. Ensure that the code generator can deal with this if the table is subsequently used in a DML statement.  dbsqlfuzz find.\n\nFossilOrigin-Name: ea721b34477ab8b49d182352c4bc198245933b850e9b6248b4f97600e80bb44b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 056bb8dcbdc45989c5c6e86d2966200062e3c01c382ec52aae37c828104b4496",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3649:           Table *pTab = pExpr->y.pTab;",
          "3650:           int iSrc;",
          "3651:           int iCol = pExpr->iColumn;",
          "3652:           assert( pTab!=0 );",
          "3653:           assert( iCol>=XN_ROWID );",
          "3655:           if( iCol<0 ){",
          "3656:             return -1-pParse->iSelfTab;",
          "3657:           }",
          "",
          "[Removed Lines]",
          "3654:           assert( iCol<pExpr->y.pTab->nCol );",
          "",
          "[Added Lines]",
          "3652:           if( pTab==0 ){",
          "3653:             assert( CORRUPT_DB );",
          "3654:             sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3655:             return target;",
          "3656:           }",
          "3659:           assert( iCol<pTab->nCol );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3717:     default: {",
          "3723:       sqlite3VdbeAddOp2(v, OP_Null, 0, target);",
          "3724:       return target;",
          "3725:     }",
          "",
          "[Removed Lines]",
          "3722:       assert( op==TK_NULL );",
          "",
          "[Added Lines]",
          "3727:       assert( op==TK_NULL || CORRUPT_DB );",
          "3728:       testcase( op!=TK_NULL );",
          "",
          "---------------"
        ]
      }
    }
  ]
}