{
  "cve_id": "CVE-2013-4623",
  "cve_desc": "The x509parse_crt function in x509.h in PolarSSL 1.1.x before 1.1.7 and 1.2.x before 1.2.8 does not properly parse certificate messages during the SSL/TLS handshake, which allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via a certificate message that contains a PEM encoded certificate.",
  "repo": "polarssl/polarssl",
  "patch_hash": "1922a4e6aade7b1d685af19d4d9339ddb5c02859",
  "patch_info": {
    "commit_hash": "1922a4e6aade7b1d685af19d4d9339ddb5c02859",
    "repo": "polarssl/polarssl",
    "commit_url": "https://github.com/polarssl/polarssl/commit/1922a4e6aade7b1d685af19d4d9339ddb5c02859",
    "files": [
      "ChangeLog",
      "include/polarssl/x509.h",
      "library/ssl_tls.c"
    ],
    "message": "ssl_parse_certificate() now calls x509parse_crt_der() directly",
    "before_after_code_files": [
      "include/polarssl/x509.h||include/polarssl/x509.h",
      "library/ssl_tls.c||library/ssl_tls.c"
    ]
  },
  "patch_diff": {
    "include/polarssl/x509.h||include/polarssl/x509.h": [
      "File: include/polarssl/x509.h -> include/polarssl/x509.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "437: int x509parse_crt_der( x509_cert *chain, const unsigned char *buf, size_t buflen );",
      "",
      "---------------"
    ],
    "library/ssl_tls.c||library/ssl_tls.c": [
      "File: library/ssl_tls.c -> library/ssl_tls.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2375:             return( POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE );",
      "2376:         }",
      "2380:         if( ret != 0 )",
      "2381:         {",
      "2382:             SSL_DEBUG_RET( 1, \" x509parse_crt\", ret );",
      "",
      "[Removed Lines]",
      "2378:         ret = x509parse_crt( ssl->session_negotiate->peer_cert, ssl->in_msg + i,",
      "2379:                              n );",
      "",
      "[Added Lines]",
      "2378:         ret = x509parse_crt_der( ssl->session_negotiate->peer_cert,",
      "2379:                                  ssl->in_msg + i, n );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5df3bf1b47775963689c62a866f807ed26e6ad0",
      "candidate_info": {
        "commit_hash": "b5df3bf1b47775963689c62a866f807ed26e6ad0",
        "repo": "polarssl/polarssl",
        "commit_url": "https://github.com/polarssl/polarssl/commit/b5df3bf1b47775963689c62a866f807ed26e6ad0",
        "files": [
          "ChangeLog",
          "include/polarssl/x509.h",
          "library/ssl_tls.c"
        ],
        "message": "ssl_parse_certificate() now calls x509parse_crt_der() directly (cherry picked from commit 1922a4e6aade7b1d685af19d4d9339ddb5c02859)\n\nConflicts:\n\tlibrary/ssl_tls.c",
        "before_after_code_files": [
          "include/polarssl/x509.h||include/polarssl/x509.h",
          "library/ssl_tls.c||library/ssl_tls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "include/polarssl/x509.h||include/polarssl/x509.h",
            "library/ssl_tls.c||library/ssl_tls.c"
          ],
          "candidate": [
            "include/polarssl/x509.h||include/polarssl/x509.h",
            "library/ssl_tls.c||library/ssl_tls.c"
          ]
        }
      },
      "candidate_diff": {
        "include/polarssl/x509.h||include/polarssl/x509.h": [
          "File: include/polarssl/x509.h -> include/polarssl/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429: int x509parse_crt_der( x509_cert *chain, const unsigned char *buf, size_t buflen );",
          "",
          "---------------"
        ],
        "library/ssl_tls.c||library/ssl_tls.c": [
          "File: library/ssl_tls.c -> library/ssl_tls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1474:             return( POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE );",
          "1475:         }",
          "1478:         if( ret != 0 )",
          "1479:         {",
          "1480:             SSL_DEBUG_RET( 1, \" x509parse_crt\", ret );",
          "",
          "[Removed Lines]",
          "1477:         ret = x509parse_crt( ssl->peer_cert, ssl->in_msg + i, n );",
          "",
          "[Added Lines]",
          "1477:         ret = x509parse_crt_der( ssl->peer_cert, ssl->in_msg + i, n );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89ecb2d074158347aa59e6522e4e11362a68fc67",
      "candidate_info": {
        "commit_hash": "89ecb2d074158347aa59e6522e4e11362a68fc67",
        "repo": "polarssl/polarssl",
        "commit_url": "https://github.com/polarssl/polarssl/commit/89ecb2d074158347aa59e6522e4e11362a68fc67",
        "files": [
          "include/polarssl/x509.h",
          "library/ssl_tls.c"
        ],
        "message": "ssl_parse_certificate() now calls x509parse_crt_der() directly (cherry picked from commit 1922a4e6aade7b1d685af19d4d9339ddb5c02859)",
        "before_after_code_files": [
          "include/polarssl/x509.h||include/polarssl/x509.h",
          "library/ssl_tls.c||library/ssl_tls.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "include/polarssl/x509.h||include/polarssl/x509.h",
            "library/ssl_tls.c||library/ssl_tls.c"
          ],
          "candidate": [
            "include/polarssl/x509.h||include/polarssl/x509.h",
            "library/ssl_tls.c||library/ssl_tls.c"
          ]
        }
      },
      "candidate_diff": {
        "include/polarssl/x509.h||include/polarssl/x509.h": [
          "File: include/polarssl/x509.h -> include/polarssl/x509.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341: int x509parse_crt_der( x509_cert *chain, const unsigned char *buf, size_t buflen );",
          "",
          "---------------"
        ],
        "library/ssl_tls.c||library/ssl_tls.c": [
          "File: library/ssl_tls.c -> library/ssl_tls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:             return( POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE );",
          "2116:         }",
          "2120:         if( ret != 0 )",
          "2121:         {",
          "2122:             SSL_DEBUG_RET( 1, \" x509parse_crt\", ret );",
          "",
          "[Removed Lines]",
          "2118:         ret = x509parse_crt( ssl->session_negotiate->peer_cert, ssl->in_msg + i,",
          "2119:                              n );",
          "",
          "[Added Lines]",
          "2118:         ret = x509parse_crt_der( ssl->session_negotiate->peer_cert,",
          "2119:                                  ssl->in_msg + i, n );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48916f9b670999e53f73f2c6085128ade47eafd8",
      "candidate_info": {
        "commit_hash": "48916f9b670999e53f73f2c6085128ade47eafd8",
        "repo": "polarssl/polarssl",
        "commit_url": "https://github.com/polarssl/polarssl/commit/48916f9b670999e53f73f2c6085128ade47eafd8",
        "files": [
          "ChangeLog",
          "include/polarssl/ssl.h",
          "library/ssl_cli.c",
          "library/ssl_srv.c",
          "library/ssl_tls.c",
          "programs/ssl/ssl_client2.c",
          "programs/ssl/ssl_fork_server.c",
          "programs/ssl/ssl_mail_client.c",
          "programs/ssl/ssl_server.c",
          "programs/x509/cert_app.c"
        ],
        "message": "- Added Secure Renegotiation (RFC 5746)",
        "before_after_code_files": [
          "include/polarssl/ssl.h||include/polarssl/ssl.h",
          "library/ssl_cli.c||library/ssl_cli.c",
          "library/ssl_srv.c||library/ssl_srv.c",
          "library/ssl_tls.c||library/ssl_tls.c",
          "programs/ssl/ssl_client2.c||programs/ssl/ssl_client2.c",
          "programs/ssl/ssl_fork_server.c||programs/ssl/ssl_fork_server.c",
          "programs/ssl/ssl_mail_client.c||programs/ssl/ssl_mail_client.c",
          "programs/ssl/ssl_server.c||programs/ssl/ssl_server.c",
          "programs/x509/cert_app.c||programs/x509/cert_app.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "library/ssl_tls.c||library/ssl_tls.c"
          ],
          "candidate": [
            "library/ssl_tls.c||library/ssl_tls.c"
          ]
        }
      },
      "candidate_diff": {
        "include/polarssl/ssl.h||include/polarssl/ssl.h": [
          "File: include/polarssl/ssl.h -> include/polarssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include <time.h>",
          "32: #include \"net.h\"",
          "34: #include \"rsa.h\"",
          "35: #include \"md5.h\"",
          "36: #include \"sha1.h\"",
          "",
          "[Removed Lines]",
          "33: #include \"dhm.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: #include \"x509.h\"",
          "40: #include \"config.h\"",
          "42: #if defined(POLARSSL_PKCS11_C)",
          "43: #include \"pkcs11.h\"",
          "44: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #if defined(POLARSSL_DHM_C)",
          "42: #include \"dhm.h\"",
          "43: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110: #define SSL_VERIFY_OPTIONAL             1",
          "111: #define SSL_VERIFY_REQUIRED             2",
          "113: #define SSL_MAX_CONTENT_LEN         16384",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: #define SSL_INITIAL_HANDSHAKE           0",
          "117: #define SSL_RENEGOTIATION               1",
          "119: #define SSL_LEGACY_RENEGOTIATION        0",
          "120: #define SSL_SECURE_RENEGOTIATION        1",
          "122: #define SSL_RENEGOTIATION_ENABLED       0",
          "123: #define SSL_RENEGOTIATION_DISABLED      1",
          "125: #define SSL_NO_LEGACY_RENEGOTIATION     0",
          "126: #define SSL_ALLOW_LEGACY_RENEGOTIATION  1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "234: #define TLS_EXT_SIG_ALG                13",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #define TLS_EXT_RENEGOTIATION_INFO 0xFF01",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "253:     SSL_SERVER_CHANGE_CIPHER_SPEC,",
          "254:     SSL_SERVER_FINISHED,",
          "255:     SSL_FLUSH_BUFFERS,",
          "256:     SSL_HANDSHAKE_OVER",
          "257: }",
          "258: ssl_states;",
          "260: typedef struct _ssl_session ssl_session;",
          "261: typedef struct _ssl_context ssl_context;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     SSL_HANDSHAKE_WRAPUP,",
          "282: typedef struct _ssl_transform ssl_transform;",
          "283: typedef struct _ssl_handshake_params ssl_handshake_params;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "275: };",
          "277: struct _ssl_context",
          "278: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: struct _ssl_transform",
          "305: {",
          "327: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "330: #endif",
          "331: };",
          "336: struct _ssl_handshake_params",
          "337: {",
          "341: #if defined(POLARSSL_DHM_C)",
          "343: #endif",
          "348:      md5_context fin_md5;",
          "349:     sha1_context fin_sha1;",
          "350:     sha2_context fin_sha2;",
          "351:     sha4_context fin_sha4;",
          "353:     void (*update_checksum)(ssl_context *, unsigned char *, size_t);",
          "354:     void (*calc_verify)(ssl_context *, unsigned char *);",
          "355:     void (*calc_finished)(ssl_context *, unsigned char *, int);",
          "356:     int  (*tls_prf)(unsigned char *, size_t, char *,",
          "357:                     unsigned char *, size_t,",
          "358:                     unsigned char *, size_t);",
          "364: };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "407:     ssl_handshake_params *handshake;    /*!<  params required only during",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "395: #endif",
          "",
          "[Removed Lines]",
          "364:     void (*update_checksum)(ssl_context *, unsigned char *, size_t);",
          "365:     void (*calc_verify)(ssl_context *, unsigned char *);",
          "366:     void (*calc_finished)(ssl_context *, unsigned char *, int);",
          "367:     int  (*tls_prf)(unsigned char *, size_t, char *,",
          "368:                     unsigned char *, size_t,",
          "369:                     unsigned char *, size_t);",
          "392: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "",
          "[Added Lines]",
          "467: #if defined(POLARSSL_DHM_C)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "400:     unsigned char *hostname;",
          "401:     size_t         hostname_len;",
          "402: };",
          "404: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "481:     int secure_renegotiation;           /*!<  does peer support legacy or",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "471: int ssl_session_reset( ssl_context *ssl );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:                    POLARSSL_ERR_SSL_HW_ACCEL_FAILED or",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "614:                        pkcs11_context *pkcs11_key );",
          "615: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "702: #if defined(POLARSSL_DHM_C)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "638: int ssl_set_dh_param_ctx( ssl_context *ssl, dhm_context *dhm_ctx );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "725: #endif",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "660: void ssl_set_max_version( ssl_context *ssl, int major, int minor );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757: void ssl_set_renegotiation( ssl_context *ssl, int renegotiation );",
          "770: void ssl_legacy_renegotiation( ssl_context *ssl, int allow_legacy );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "710: int ssl_handshake( ssl_context *ssl );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829: int ssl_renegotiate( ssl_context *ssl );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "758: int ssl_close_notify( ssl_context *ssl );",
          "765: void ssl_free( ssl_context *ssl );",
          "770: int ssl_handshake_client( ssl_context *ssl );",
          "771: int ssl_handshake_server( ssl_context *ssl );",
          "773: int ssl_derive_keys( ssl_context *ssl );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "892: void ssl_session_free( ssl_session *session );",
          "900: void ssl_transform_free( ssl_transform *transform );",
          "908: void ssl_handshake_free( ssl_handshake_params *handshake );",
          "915: void ssl_handshake_wrapup( ssl_context *ssl );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "791: int ssl_parse_finished( ssl_context *ssl );",
          "792: int ssl_write_finished( ssl_context *ssl );",
          "797: #ifdef __cplusplus",
          "798: }",
          "",
          "[Removed Lines]",
          "794: void ssl_kickstart_checksum( ssl_context *ssl, int ciphersuite,",
          "795:                              unsigned char *input_buf, size_t len );",
          "",
          "[Added Lines]",
          "938: void ssl_optimize_checksum( ssl_context *ssl, int ciphersuite );",
          "",
          "---------------"
        ],
        "library/ssl_cli.c||library/ssl_cli.c": [
          "File: library/ssl_cli.c -> library/ssl_cli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     SSL_DEBUG_MSG( 2, ( \"=> write client hello\" ) );",
          "60:     if( ssl->max_major_ver == 0 && ssl->max_minor_ver == 0 )",
          "61:     {",
          "",
          "[Removed Lines]",
          "57:     ssl->major_ver = SSL_MAJOR_VERSION_3;",
          "58:     ssl->minor_ver = SSL_MINOR_VERSION_0;",
          "",
          "[Added Lines]",
          "57:     if( ssl->renegotiation == SSL_INITIAL_HANDSHAKE )",
          "58:     {",
          "59:         ssl->major_ver = SSL_MAJOR_VERSION_3;",
          "60:         ssl->minor_ver = SSL_MINOR_VERSION_0;",
          "61:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     p += 28;",
          "97:     SSL_DEBUG_BUF( 3, \"client hello, random bytes\", buf + 6, 32 );",
          "",
          "[Removed Lines]",
          "95:     memcpy( ssl->randbytes, buf + 6, 32 );",
          "",
          "[Added Lines]",
          "98:     memcpy( ssl->handshake->randbytes, buf + 6, 32 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:     if( n < 16 || n > 32 || ssl->resume == 0 ||",
          "113:         n = 0;",
          "117:     for( i = 0; i < n; i++ )",
          "120:     SSL_DEBUG_MSG( 3, ( \"client hello, session id len.: %d\", n ) );",
          "121:     SSL_DEBUG_BUF( 3,   \"client hello, session id\", buf + 39, n );",
          "123:     for( n = 0; ssl->ciphersuites[n] != 0; n++ );",
          "127:     SSL_DEBUG_MSG( 3, ( \"client hello, got %d ciphersuites\", n ) );",
          "129:     for( i = 0; i < n; i++ )",
          "",
          "[Removed Lines]",
          "109:     n = ssl->session->length;",
          "112:         ( ssl->timeout != 0 && t - ssl->session->start > ssl->timeout ) )",
          "",
          "[Added Lines]",
          "112:     n = ssl->session_negotiate->length;",
          "115:         ( ssl->timeout != 0 &&",
          "116:           t - ssl->session_negotiate->start > ssl->timeout ) )",
          "128:     if( ssl->renegotiation == SSL_INITIAL_HANDSHAKE ) n++;",
          "135:     if( ssl->renegotiation == SSL_INITIAL_HANDSHAKE )",
          "136:     {",
          "139:         n--;",
          "140:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "139:     SSL_DEBUG_MSG( 3, ( \"client hello, compress len.: %d\", 2 ) );",
          "140:     SSL_DEBUG_MSG( 3, ( \"client hello, compress alg.: %d %d\",",
          "146: #else",
          "147:     SSL_DEBUG_MSG( 3, ( \"client hello, compress len.: %d\", 1 ) );",
          "148:     SSL_DEBUG_MSG( 3, ( \"client hello, compress alg.: %d\", SSL_COMPRESS_NULL ) );",
          "",
          "[Removed Lines]",
          "141:                         SSL_COMPRESS_NULL, SSL_COMPRESS_DEFLATE ) );",
          "",
          "[Added Lines]",
          "156:                         SSL_COMPRESS_DEFLATE, SSL_COMPRESS_NULL ) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159:         ext_len += ssl->hostname_len + 9;",
          "160:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:     if( ssl->renegotiation == SSL_RENEGOTIATION )",
          "178:     {",
          "179:         SSL_DEBUG_MSG( 3, ( \"client hello, prepping for renegotiation extension\" ) );",
          "180:         ext_len += 5 + ssl->verify_data_len;",
          "181:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:         sig_alg_list[sig_alg_len++] = SSL_HASH_MD5;",
          "185:         sig_alg_list[sig_alg_len++] = SSL_SIG_RSA;",
          "186: #endif",
          "188:     }",
          "190:     SSL_DEBUG_MSG( 3, ( \"client hello, total extension length: %d\",",
          "",
          "[Removed Lines]",
          "187:         ext_len = 6 + sig_alg_len;",
          "",
          "[Added Lines]",
          "208:         ext_len += 6 + sig_alg_len;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:         memcpy( p, ssl->hostname, ssl->hostname_len );",
          "234:         p += ssl->hostname_len;",
          "235:     }",
          "237:     if( ssl->max_minor_ver == SSL_MINOR_VERSION_3 )",
          "238:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:     if( ssl->renegotiation == SSL_RENEGOTIATION )",
          "258:     {",
          "262:         SSL_DEBUG_MSG( 3, ( \"client hello, renegotiation info extension\" ) );",
          "271:         memcpy( p, ssl->own_verify_data, ssl->verify_data_len );",
          "272:         p += ssl->verify_data_len;",
          "273:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "286:     return( 0 );",
          "287: }",
          "289: static int ssl_parse_server_hello( ssl_context *ssl )",
          "290: {",
          "291: #if defined(POLARSSL_DEBUG_C)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327: static int ssl_parse_renegotiation_info( ssl_context *ssl,",
          "328:                                          unsigned char *buf,",
          "329:                                          size_t len )",
          "330: {",
          "331:     if( ssl->renegotiation == SSL_INITIAL_HANDSHAKE )",
          "332:     {",
          "333:         if( len != 1 || buf[0] != 0x0 )",
          "334:         {",
          "335:             SSL_DEBUG_MSG( 1, ( \"non-zero length renegotiated connection field\" ) );",
          "337:             return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "338:         }",
          "340:         ssl->secure_renegotiation = SSL_SECURE_RENEGOTIATION;",
          "341:     }",
          "342:     else",
          "343:     {",
          "344:         if( len    != 1 + ssl->verify_data_len * 2 ||",
          "345:             buf[0] !=     ssl->verify_data_len * 2 ||",
          "346:             memcmp( buf + 1, ssl->own_verify_data,  ssl->verify_data_len ) != 0 ||",
          "347:             memcmp( buf + 1 + ssl->verify_data_len,",
          "348:                     ssl->peer_verify_data, ssl->verify_data_len ) != 0 )",
          "349:         {",
          "350:             SSL_DEBUG_MSG( 1, ( \"non-matching renegotiated connection field\" ) );",
          "352:             return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "353:         }",
          "354:     }",
          "356:     return( 0 );",
          "357: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "293: #endif",
          "294:     int ret, i, comp;",
          "295:     size_t n;",
          "299:     SSL_DEBUG_MSG( 2, ( \"=> parse server hello\" ) );",
          "",
          "[Removed Lines]",
          "296:     int ext_len;",
          "297:     unsigned char *buf;",
          "",
          "[Added Lines]",
          "366:     size_t ext_len = 0;",
          "367:     unsigned char *buf, *ext;",
          "368:     int renegotiation_info_seen = 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "345:       | ( (time_t) buf[9]       );",
          "346: #endif",
          "350:     n = buf[38];",
          "352:     SSL_DEBUG_MSG( 3, ( \"server hello, current time: %lu\", t ) );",
          "353:     SSL_DEBUG_BUF( 3,   \"server hello, random bytes\", buf + 6, 32 );",
          "",
          "[Removed Lines]",
          "348:     memcpy( ssl->randbytes + 32, buf + 6, 32 );",
          "",
          "[Added Lines]",
          "419:     memcpy( ssl->handshake->randbytes + 32, buf + 6, 32 );",
          "426:     if( n > 32 )",
          "427:     {",
          "428:         SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );",
          "429:         return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "430:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "364:     {",
          "365:         ext_len = ( ( buf[42 + n] <<  8 )",
          "377:     }",
          "379:     i = ( buf[39 + n] << 8 ) | buf[40 + n];",
          "",
          "[Removed Lines]",
          "363:     if( n > 32 || ssl->in_hslen > 42 + n )",
          "366:                   | ( buf[43 + n]       ) ) + 2;",
          "367:     }",
          "368:     else",
          "369:     {",
          "370:         ext_len = 0;",
          "371:     }",
          "373:     if( n > 32 || ssl->in_hslen != 42 + n + ext_len )",
          "374:     {",
          "375:         SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );",
          "376:         return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "",
          "[Added Lines]",
          "440:     if( ssl->in_hslen > 42 + n )",
          "443:                   | ( buf[43 + n]       ) );",
          "445:         if( ( ext_len > 0 && ext_len < 4 ) ||",
          "446:             ssl->in_hslen != 44 + n + ext_len )",
          "447:         {",
          "448:             SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );",
          "449:             return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "450:         }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "387:     SSL_DEBUG_MSG( 3, ( \"server hello, session id len.: %d\", n ) );",
          "388:     SSL_DEBUG_BUF( 3,   \"server hello, session id\", buf + 39, n );",
          "",
          "[Removed Lines]",
          "385:     ssl_kickstart_checksum( ssl, i, buf, ssl->in_hslen );",
          "",
          "[Added Lines]",
          "459:     ssl_optimize_checksum( ssl, i );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "393:     if( ssl->resume == 0 || n == 0 ||",
          "398:     {",
          "399:         ssl->state++;",
          "400:         ssl->resume = 0;",
          "406:     }",
          "407:     else",
          "408:     {",
          "",
          "[Removed Lines]",
          "394:         ssl->session->ciphersuite != i ||",
          "395:         ssl->session->compression != comp ||",
          "396:         ssl->session->length != n ||",
          "397:         memcmp( ssl->session->id, buf + 39, n ) != 0 )",
          "401:         ssl->session->start = time( NULL );",
          "402:         ssl->session->ciphersuite = i;",
          "403:         ssl->session->compression = comp;",
          "404:         ssl->session->length = n;",
          "405:         memcpy( ssl->session->id, buf + 39, n );",
          "",
          "[Added Lines]",
          "468:         ssl->session_negotiate->ciphersuite != i ||",
          "469:         ssl->session_negotiate->compression != comp ||",
          "470:         ssl->session_negotiate->length != n ||",
          "471:         memcmp( ssl->session_negotiate->id, buf + 39, n ) != 0 )",
          "475:         ssl->session_negotiate->start = time( NULL );",
          "476:         ssl->session_negotiate->ciphersuite = i;",
          "477:         ssl->session_negotiate->compression = comp;",
          "478:         ssl->session_negotiate->length = n;",
          "479:         memcpy( ssl->session_negotiate->id, buf + 39, n );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "430:             return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "431:         }",
          "434:             break;",
          "435:     }",
          "",
          "[Removed Lines]",
          "433:         if( ssl->ciphersuites[i++] == ssl->session->ciphersuite )",
          "",
          "[Added Lines]",
          "507:         if( ssl->ciphersuites[i++] == ssl->session_negotiate->ciphersuite )",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "443:         SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );",
          "444:         return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "445:     }",
          "450:     SSL_DEBUG_MSG( 2, ( \"<= parse server hello\" ) );",
          "",
          "[Removed Lines]",
          "446:     ssl->session->compression = comp;",
          "",
          "[Added Lines]",
          "520:     ssl->session_negotiate->compression = comp;",
          "522:     ext = buf + 44 + n;",
          "524:     while( ext_len )",
          "525:     {",
          "526:         unsigned int ext_id   = ( ( ext[0] <<  8 )",
          "527:                                 | ( ext[1]       ) );",
          "528:         unsigned int ext_size = ( ( ext[2] <<  8 )",
          "529:                                 | ( ext[3]       ) );",
          "531:         if( ext_size + 4 > ext_len )",
          "532:         {",
          "533:             SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );",
          "534:             return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "535:         }",
          "537:         switch( ext_id )",
          "538:         {",
          "539:         case TLS_EXT_RENEGOTIATION_INFO:",
          "540:             SSL_DEBUG_MSG( 3, ( \"found renegotiation extension\" ) );",
          "541:             renegotiation_info_seen = 1;",
          "543:             if( ( ret = ssl_parse_renegotiation_info( ssl, ext + 4, ext_size ) ) != 0 )",
          "544:                 return( ret );",
          "546:             break;",
          "548:         default:",
          "549:             SSL_DEBUG_MSG( 3, ( \"unknown extension found: %d (ignoring)\",",
          "550:                            ext_id ) );",
          "551:         }",
          "553:         ext_len -= 4 + ext_size;",
          "554:         ext += 4 + ext_size;",
          "556:         if( ext_len > 0 && ext_len < 4 )",
          "557:         {",
          "558:             SSL_DEBUG_MSG( 1, ( \"bad server hello message\" ) );",
          "559:             return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "560:         }",
          "561:     }",
          "566:     if( ssl->renegotiation == SSL_RENEGOTIATION &&",
          "567:         ssl->secure_renegotiation == SSL_SECURE_RENEGOTIATION &&",
          "568:         renegotiation_info_seen == 0 )",
          "569:     {",
          "570:         SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension missing\" ) );",
          "571:         return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "572:     }",
          "574:     if( !ssl->allow_legacy_renegotiation &&",
          "575:         ssl->secure_renegotiation == SSL_LEGACY_RENEGOTIATION )",
          "576:     {",
          "577:         SSL_DEBUG_MSG( 1, ( \"legacy renegotiation not allowed\" ) );",
          "578:         return( POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO );",
          "579:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "468:     SSL_DEBUG_MSG( 2, ( \"=> parse server key exchange\" ) );",
          "482:     {",
          "483:         SSL_DEBUG_MSG( 2, ( \"<= skip parse server key exchange\" ) );",
          "484:         ssl->state++;",
          "",
          "[Removed Lines]",
          "470:     if( ssl->session->ciphersuite != SSL_EDH_RSA_DES_SHA &&",
          "471:         ssl->session->ciphersuite != SSL_EDH_RSA_DES_168_SHA &&",
          "472:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_128_SHA &&",
          "473:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_256_SHA &&",
          "474:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_128_SHA256 &&",
          "475:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_256_SHA256 &&",
          "476:         ssl->session->ciphersuite != SSL_EDH_RSA_CAMELLIA_128_SHA &&",
          "477:         ssl->session->ciphersuite != SSL_EDH_RSA_CAMELLIA_256_SHA &&",
          "478:         ssl->session->ciphersuite != SSL_EDH_RSA_CAMELLIA_128_SHA256 &&",
          "479:         ssl->session->ciphersuite != SSL_EDH_RSA_CAMELLIA_256_SHA256 &&",
          "480:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_128_GCM_SHA256 &&",
          "481:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "[Added Lines]",
          "601:     if( ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_DES_SHA &&",
          "602:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_DES_168_SHA &&",
          "603:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_128_SHA &&",
          "604:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_256_SHA &&",
          "605:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_128_SHA256 &&",
          "606:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_256_SHA256 &&",
          "607:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_CAMELLIA_128_SHA &&",
          "608:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_CAMELLIA_256_SHA &&",
          "609:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_CAMELLIA_128_SHA256 &&",
          "610:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_CAMELLIA_256_SHA256 &&",
          "611:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_128_GCM_SHA256 &&",
          "612:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "521:     p   = ssl->in_msg + 4;",
          "522:     end = ssl->in_msg + ssl->in_hslen;",
          "525:     {",
          "526:         SSL_DEBUG_MSG( 2, ( \"DHM Read Params returned -0x%x\", -ret ) );",
          "527:         SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );",
          "",
          "[Removed Lines]",
          "524:     if( ( ret = dhm_read_params( &ssl->dhm_ctx, &p, end ) ) != 0 )",
          "",
          "[Added Lines]",
          "655:     if( ( ret = dhm_read_params( &ssl->handshake->dhm_ctx, &p, end ) ) != 0 )",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "585:         return( POLARSSL_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );",
          "586:     }",
          "589:     {",
          "590:         SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );",
          "591:         return( POLARSSL_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );",
          "592:     }",
          "595:     {",
          "596:         SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" ) );",
          "597:         return( POLARSSL_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );",
          "598:     }",
          "604:     if( ssl->minor_ver != SSL_MINOR_VERSION_3 )",
          "605:     {",
          "",
          "[Removed Lines]",
          "588:     if( (unsigned int)( end - p ) != ssl->peer_cert->rsa.len )",
          "594:     if( ssl->dhm_ctx.len < 64 || ssl->dhm_ctx.len > 512 )",
          "600:     SSL_DEBUG_MPI( 3, \"DHM: P \", &ssl->dhm_ctx.P  );",
          "601:     SSL_DEBUG_MPI( 3, \"DHM: G \", &ssl->dhm_ctx.G  );",
          "602:     SSL_DEBUG_MPI( 3, \"DHM: GY\", &ssl->dhm_ctx.GY );",
          "",
          "[Added Lines]",
          "719:     if( (unsigned int)( end - p ) !=",
          "720:         ssl->session_negotiate->peer_cert->rsa.len )",
          "726:     if( ssl->handshake->dhm_ctx.len < 64 || ssl->handshake->dhm_ctx.len > 512 )",
          "732:     SSL_DEBUG_MPI( 3, \"DHM: P \", &ssl->handshake->dhm_ctx.P  );",
          "733:     SSL_DEBUG_MPI( 3, \"DHM: G \", &ssl->handshake->dhm_ctx.G  );",
          "734:     SSL_DEBUG_MPI( 3, \"DHM: GY\", &ssl->handshake->dhm_ctx.GY );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "619:         n = ssl->in_hslen - ( end - p ) - 6;",
          "621:         md5_starts( &md5 );",
          "623:         md5_update( &md5, ssl->in_msg + 4, n );",
          "624:         md5_finish( &md5, hash );",
          "626:         sha1_starts( &sha1 );",
          "628:         sha1_update( &sha1, ssl->in_msg + 4, n );",
          "629:         sha1_finish( &sha1, hash + 16 );",
          "",
          "[Removed Lines]",
          "622:         md5_update( &md5, ssl->randbytes, 64 );",
          "627:         sha1_update( &sha1, ssl->randbytes, 64 );",
          "",
          "[Added Lines]",
          "754:         md5_update( &md5, ssl->handshake->randbytes, 64 );",
          "759:         sha1_update( &sha1, ssl->handshake->randbytes, 64 );",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "650: #if defined(POLARSSL_MD5_C)",
          "651:             case SIG_RSA_MD5:",
          "652:                 md5_starts( &md5 );",
          "654:                 md5_update( &md5, ssl->in_msg + 4, n );",
          "655:                 md5_finish( &md5, hash );",
          "656:                 hashlen = 16;",
          "",
          "[Removed Lines]",
          "653:                 md5_update( &md5, ssl->randbytes, 64 );",
          "",
          "[Added Lines]",
          "785:                 md5_update( &md5, ssl->handshake->randbytes, 64 );",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "659: #if defined(POLARSSL_SHA1_C)",
          "660:             case SIG_RSA_SHA1:",
          "661:                 sha1_starts( &sha1 );",
          "663:                 sha1_update( &sha1, ssl->in_msg + 4, n );",
          "664:                 sha1_finish( &sha1, hash );",
          "665:                 hashlen = 20;",
          "",
          "[Removed Lines]",
          "662:                 sha1_update( &sha1, ssl->randbytes, 64 );",
          "",
          "[Added Lines]",
          "794:                 sha1_update( &sha1, ssl->handshake->randbytes, 64 );",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "668: #if defined(POLARSSL_SHA2_C)",
          "669:             case SIG_RSA_SHA224:",
          "670:                 sha2_starts( &sha2, 1 );",
          "672:                 sha2_update( &sha2, ssl->in_msg + 4, n );",
          "673:                 sha2_finish( &sha2, hash );",
          "674:                 hashlen = 28;",
          "675:                 break;",
          "676:             case SIG_RSA_SHA256:",
          "677:                 sha2_starts( &sha2, 0 );",
          "679:                 sha2_update( &sha2, ssl->in_msg + 4, n );",
          "680:                 sha2_finish( &sha2, hash );",
          "681:                 hashlen = 32;",
          "",
          "[Removed Lines]",
          "671:                 sha2_update( &sha2, ssl->randbytes, 64 );",
          "678:                 sha2_update( &sha2, ssl->randbytes, 64 );",
          "",
          "[Added Lines]",
          "803:                 sha2_update( &sha2, ssl->handshake->randbytes, 64 );",
          "810:                 sha2_update( &sha2, ssl->handshake->randbytes, 64 );",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "684: #if defined(POLARSSL_SHA4_C)",
          "685:             case SIG_RSA_SHA384:",
          "686:                 sha4_starts( &sha4, 1 );",
          "688:                 sha4_update( &sha4, ssl->in_msg + 4, n );",
          "689:                 sha4_finish( &sha4, hash );",
          "690:                 hashlen = 48;",
          "691:                 break;",
          "692:             case SIG_RSA_SHA512:",
          "693:                 sha4_starts( &sha4, 0 );",
          "695:                 sha4_update( &sha4, ssl->in_msg + 4, n );",
          "696:                 sha4_finish( &sha4, hash );",
          "697:                 hashlen = 64;",
          "",
          "[Removed Lines]",
          "687:                 sha4_update( &sha4, ssl->randbytes, 64 );",
          "694:                 sha4_update( &sha4, ssl->randbytes, 64 );",
          "",
          "[Added Lines]",
          "819:                 sha4_update( &sha4, ssl->handshake->randbytes, 64 );",
          "826:                 sha4_update( &sha4, ssl->handshake->randbytes, 64 );",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "703:     SSL_DEBUG_BUF( 3, \"parameters hash\", hash, hashlen );",
          "706:                                   hash_id, hashlen, hash, p ) ) != 0 )",
          "707:     {",
          "708:         SSL_DEBUG_RET( 1, \"rsa_pkcs1_verify\", ret );",
          "",
          "[Removed Lines]",
          "705:     if( ( ret = rsa_pkcs1_verify( &ssl->peer_cert->rsa, RSA_PUBLIC,",
          "",
          "[Added Lines]",
          "837:     if( ( ret = rsa_pkcs1_verify( &ssl->session_negotiate->peer_cert->rsa,",
          "838:                                   RSA_PUBLIC,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "803:     SSL_DEBUG_MSG( 2, ( \"=> write client key exchange\" ) );",
          "817:     {",
          "818: #if !defined(POLARSSL_DHM_C)",
          "819:         SSL_DEBUG_MSG( 1, ( \"support for dhm in not available\" ) );",
          "",
          "[Removed Lines]",
          "805:     if( ssl->session->ciphersuite == SSL_EDH_RSA_DES_SHA ||",
          "806:         ssl->session->ciphersuite == SSL_EDH_RSA_DES_168_SHA ||",
          "807:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_SHA ||",
          "808:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_SHA ||",
          "809:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_SHA256 ||",
          "810:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_SHA256 ||",
          "811:         ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA ||",
          "812:         ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA ||",
          "813:         ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA256 ||",
          "814:         ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA256 ||",
          "815:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_GCM_SHA256 ||",
          "816:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "[Added Lines]",
          "938:     if( ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_DES_SHA ||",
          "939:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_DES_168_SHA ||",
          "940:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_128_SHA ||",
          "941:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_256_SHA ||",
          "942:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_128_SHA256 ||",
          "943:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_256_SHA256 ||",
          "944:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA ||",
          "945:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA ||",
          "946:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA256 ||",
          "947:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA256 ||",
          "948:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_128_GCM_SHA256 ||",
          "949:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "827:         ssl->out_msg[4] = (unsigned char)( n >> 8 );",
          "828:         ssl->out_msg[5] = (unsigned char)( n      );",
          "829:         i = 6;",
          "832:                                &ssl->out_msg[i], n,",
          "833:                                 ssl->f_rng, ssl->p_rng );",
          "834:         if( ret != 0 )",
          "",
          "[Removed Lines]",
          "825:         n = ssl->dhm_ctx.len;",
          "831:         ret = dhm_make_public( &ssl->dhm_ctx, 256,",
          "",
          "[Added Lines]",
          "958:         n = ssl->handshake->dhm_ctx.len;",
          "964:         ret = dhm_make_public( &ssl->handshake->dhm_ctx, 256,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "837:             return( ret );",
          "838:         }",
          "848:         {",
          "849:             SSL_DEBUG_RET( 1, \"dhm_calc_secret\", ret );",
          "850:             return( ret );",
          "851:         }",
          "854: #endif",
          "855:     }",
          "856:     else",
          "",
          "[Removed Lines]",
          "840:         SSL_DEBUG_MPI( 3, \"DHM: X \", &ssl->dhm_ctx.X  );",
          "841:         SSL_DEBUG_MPI( 3, \"DHM: GX\", &ssl->dhm_ctx.GX );",
          "843:         ssl->pmslen = ssl->dhm_ctx.len;",
          "845:         if( ( ret = dhm_calc_secret( &ssl->dhm_ctx,",
          "846:                                       ssl->premaster,",
          "847:                                      &ssl->pmslen ) ) != 0 )",
          "853:         SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->dhm_ctx.K  );",
          "",
          "[Added Lines]",
          "973:         SSL_DEBUG_MPI( 3, \"DHM: X \", &ssl->handshake->dhm_ctx.X  );",
          "974:         SSL_DEBUG_MPI( 3, \"DHM: GX\", &ssl->handshake->dhm_ctx.GX );",
          "976:         ssl->handshake->pmslen = ssl->handshake->dhm_ctx.len;",
          "978:         if( ( ret = dhm_calc_secret( &ssl->handshake->dhm_ctx,",
          "979:                                       ssl->handshake->premaster,",
          "980:                                      &ssl->handshake->pmslen ) ) != 0 )",
          "986:         SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->handshake->dhm_ctx.K  );",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "866:         if( ret != 0 )",
          "867:             return( ret );",
          "869:         i = 4;",
          "872:         if( ssl->minor_ver != SSL_MINOR_VERSION_0 )",
          "873:         {",
          "",
          "[Removed Lines]",
          "861:         ssl->premaster[0] = (unsigned char) ssl->max_major_ver;",
          "862:         ssl->premaster[1] = (unsigned char) ssl->max_minor_ver;",
          "863:         ssl->pmslen = 48;",
          "865:         ret = ssl->f_rng( ssl->p_rng, ssl->premaster + 2, ssl->pmslen - 2 );",
          "870:         n = ssl->peer_cert->rsa.len;",
          "",
          "[Added Lines]",
          "994:         ssl->handshake->premaster[0] = (unsigned char) ssl->max_major_ver;",
          "995:         ssl->handshake->premaster[1] = (unsigned char) ssl->max_minor_ver;",
          "996:         ssl->handshake->pmslen = 48;",
          "998:         ret = ssl->f_rng( ssl->p_rng, ssl->handshake->premaster + 2,",
          "999:                           ssl->handshake->pmslen - 2 );",
          "1004:         n = ssl->session_negotiate->peer_cert->rsa.len;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "876:             ssl->out_msg[5] = (unsigned char)( n      );",
          "877:         }",
          "880:                                   ssl->f_rng, ssl->p_rng,",
          "881:                                   RSA_PUBLIC,",
          "883:                                   ssl->out_msg + i );",
          "884:         if( ret != 0 )",
          "885:         {",
          "",
          "[Removed Lines]",
          "879:         ret = rsa_pkcs1_encrypt( &ssl->peer_cert->rsa,",
          "882:                                   ssl->pmslen, ssl->premaster,",
          "",
          "[Added Lines]",
          "1013:         ret = rsa_pkcs1_encrypt( &ssl->session_negotiate->peer_cert->rsa,",
          "1016:                                   ssl->handshake->pmslen,",
          "1017:                                   ssl->handshake->premaster,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "939:         {",
          "940:             hash_id = SIG_RSA_SHA384;",
          "941:             hashlen = 48;",
          "",
          "[Removed Lines]",
          "937:         if( ssl->session->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "938:             ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "[Added Lines]",
          "1072:         if( ssl->session_negotiate->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "1073:             ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "968:     if ( ssl->rsa_key )",
          "969:         n = ssl->rsa_key->len;",
          "",
          "[Removed Lines]",
          "966:     ssl->calc_verify( ssl, hash );",
          "",
          "[Added Lines]",
          "1101:     ssl->handshake->calc_verify( ssl, hash );",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "983:         {",
          "984:             ssl->out_msg[4] = SSL_HASH_SHA384;",
          "985:             ssl->out_msg[5] = SSL_SIG_RSA;",
          "",
          "[Removed Lines]",
          "981:         if( ssl->session->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "982:             ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "[Added Lines]",
          "1116:         if( ssl->session_negotiate->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "1117:             ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "999:     if( ssl->rsa_key )",
          "1000:     {",
          "1001:         ret = rsa_pkcs1_sign( ssl->rsa_key, ssl->f_rng, ssl->p_rng,",
          "1004:     } else {",
          "1005: #if defined(POLARSSL_PKCS11_C)",
          "1006:         ret = pkcs11_sign( ssl->pkcs11_key, RSA_PRIVATE, hash_id,",
          "1009:     }",
          "",
          "[Removed Lines]",
          "1002:                                    RSA_PRIVATE, hash_id,",
          "1003:                                    hashlen, hash, ssl->out_msg + 6 + offset );",
          "1007:                                     hashlen, hash, ssl->out_msg + 6 + offset );",
          "",
          "[Added Lines]",
          "1137:                               RSA_PRIVATE, hash_id,",
          "1138:                               hashlen, hash, ssl->out_msg + 6 + offset );",
          "1142:                            hashlen, hash, ssl->out_msg + 6 + offset );",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1129:             case SSL_FLUSH_BUFFERS:",
          "1130:                 SSL_DEBUG_MSG( 2, ( \"handshake: done\" ) );",
          "1132:                 break;",
          "1134:             default:",
          "",
          "[Removed Lines]",
          "1131:                 ssl->state = SSL_HANDSHAKE_OVER;",
          "",
          "[Added Lines]",
          "1266:                 ssl->state = SSL_HANDSHAKE_WRAPUP;",
          "1267:                 break;",
          "1269:             case SSL_HANDSHAKE_WRAPUP:",
          "1270:                 ssl_handshake_wrapup( ssl );",
          "",
          "---------------"
        ],
        "library/ssl_srv.c||library/ssl_srv.c": [
          "File: library/ssl_srv.c -> library/ssl_srv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #include <stdio.h>",
          "39: #include <time.h>",
          "41: static int ssl_parse_client_hello( ssl_context *ssl )",
          "42: {",
          "43:     int ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: static int ssl_parse_renegotiation_info( ssl_context *ssl,",
          "42:                                          unsigned char *buf,",
          "43:                                          size_t len )",
          "44: {",
          "45:     if( ssl->renegotiation == SSL_INITIAL_HANDSHAKE )",
          "46:     {",
          "47:         if( len != 1 || buf[0] != 0x0 )",
          "48:         {",
          "49:             SSL_DEBUG_MSG( 1, ( \"non-zero length renegotiated connection field\" ) );",
          "51:             return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "52:         }",
          "54:         ssl->secure_renegotiation = SSL_SECURE_RENEGOTIATION;",
          "55:     }",
          "56:     else",
          "57:     {",
          "58:         if( len    != 1 + ssl->verify_data_len ||",
          "59:             buf[0] !=     ssl->verify_data_len ||",
          "60:             memcmp( buf + 1, ssl->peer_verify_data, ssl->verify_data_len ) != 0 )",
          "61:         {",
          "62:             SSL_DEBUG_MSG( 1, ( \"non-matching renegotiated connection field\" ) );",
          "64:             return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "65:         }",
          "66:     }",
          "68:     return( 0 );",
          "69: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     size_t n;",
          "46:     unsigned int ciph_len, sess_len;",
          "47:     unsigned int comp_len;",
          "50:     SSL_DEBUG_MSG( 2, ( \"=> parse client hello\" ) );",
          "53:     {",
          "54:         SSL_DEBUG_RET( 1, \"ssl_fetch_input\", ret );",
          "55:         return( ret );",
          "",
          "[Removed Lines]",
          "48:     unsigned char *buf, *p;",
          "52:     if( ( ret = ssl_fetch_input( ssl, 5 ) ) != 0 )",
          "",
          "[Added Lines]",
          "78:     unsigned int ext_len = 0;",
          "79:     unsigned char *buf, *p, *ext;",
          "80:     int renegotiation_info_seen;",
          "84:     if( ssl->renegotiation == SSL_INITIAL_HANDSHAKE &&",
          "85:         ( ret = ssl_fetch_input( ssl, 5 ) ) != 0 )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "90:     }",
          "93:     {",
          "94:         SSL_DEBUG_RET( 1, \"ssl_fetch_input\", ret );",
          "95:         return( ret );",
          "96:     }",
          "98:     buf = ssl->in_msg;",
          "",
          "[Removed Lines]",
          "92:     if( ( ret = ssl_fetch_input( ssl, 5 + n ) ) != 0 )",
          "99:     n = ssl->in_left - 5;",
          "101:     ssl->update_checksum( ssl, buf, n );",
          "",
          "[Added Lines]",
          "125:     if( ssl->renegotiation == SSL_INITIAL_HANDSHAKE &&",
          "126:         ( ret = ssl_fetch_input( ssl, 5 + n ) ) != 0 )",
          "133:     if( !ssl->renegotiation )",
          "134:         n = ssl->in_left - 5;",
          "135:     else",
          "136:         n = ssl->in_msglen;",
          "138:     ssl->handshake->update_checksum( ssl, buf, n );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:     ssl->max_major_ver = buf[4];",
          "141:     ssl->max_minor_ver = buf[5];",
          "",
          "[Removed Lines]",
          "143:     memcpy( ssl->randbytes, buf + 6, 32 );",
          "",
          "[Added Lines]",
          "180:     memcpy( ssl->handshake->randbytes, buf + 6, 32 );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "163:     }",
          "",
          "[Removed Lines]",
          "165:     ssl->session->length = sess_len;",
          "166:     memset( ssl->session->id, 0, sizeof( ssl->session->id ) );",
          "167:     memcpy( ssl->session->id, buf + 39 , ssl->session->length );",
          "",
          "[Added Lines]",
          "202:     ssl->session_negotiate->length = sess_len;",
          "203:     memset( ssl->session_negotiate->id, 0,",
          "204:             sizeof( ssl->session_negotiate->id ) );",
          "205:     memcpy( ssl->session_negotiate->id, buf + 39,",
          "206:             ssl->session_negotiate->length );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "189:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "190:     }",
          "193: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "194:     for( i = 0; i < comp_len; ++i )",
          "195:     {",
          "197:         {",
          "199:             break;",
          "200:         }",
          "201:     }",
          "",
          "[Removed Lines]",
          "192:     ssl->session->compression = SSL_COMPRESS_NULL;",
          "196:         if( buf[41 + sess_len + ciph_len + i] == SSL_COMPRESS_DEFLATE )",
          "198:             ssl->session->compression = SSL_COMPRESS_DEFLATE;",
          "",
          "[Added Lines]",
          "234:     if( n > 42 + sess_len + ciph_len + comp_len )",
          "235:     {",
          "236:         ext_len = ( buf[42 + sess_len + ciph_len + comp_len] << 8 )",
          "237:                 | ( buf[43 + sess_len + ciph_len + comp_len]      );",
          "239:         if( ( ext_len > 0 && ext_len < 4 ) ||",
          "240:             n != 44 + sess_len + ciph_len + comp_len + ext_len )",
          "241:         {",
          "242:             SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );",
          "243:             SSL_DEBUG_BUF( 3, \"Ext\", buf + 44 + sess_len + ciph_len + comp_len, ext_len);",
          "244:             return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "245:         }",
          "246:     }",
          "248:     ssl->session_negotiate->compression = SSL_COMPRESS_NULL;",
          "252:         if( buf[42 + sess_len + ciph_len + i] == SSL_COMPRESS_DEFLATE )",
          "254:             ssl->session_negotiate->compression = SSL_COMPRESS_DEFLATE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "210:     SSL_DEBUG_BUF( 3, \"client hello, compression\",",
          "211:                    buf + 42 + sess_len + ciph_len, comp_len );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:     for( i = 0, p = buf + 41 + sess_len; i < ciph_len; i += 2, p += 2 )",
          "273:     {",
          "274:         if( p[0] == 0 && p[1] == SSL_EMPTY_RENEGOTIATION_INFO )",
          "275:         {",
          "276:             SSL_DEBUG_MSG( 3, ( \"received TLS_EMPTY_RENEGOTIATION_INFO \" ) );",
          "277:             if( ssl->renegotiation == SSL_RENEGOTIATION )",
          "278:             {",
          "279:                 SSL_DEBUG_MSG( 1, ( \"received RENEGOTIATION SCSV during renegotiation\" ) );",
          "280:                 return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "281:             }",
          "282:             ssl->secure_renegotiation = SSL_SECURE_RENEGOTIATION;",
          "283:             break;",
          "284:         }",
          "285:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "228:     return( POLARSSL_ERR_SSL_NO_CIPHER_CHOSEN );",
          "230: have_ciphersuite:",
          "235:     ssl->in_left = 0;",
          "236:     ssl->state++;",
          "",
          "[Removed Lines]",
          "232:     ssl->session->ciphersuite = ssl->ciphersuites[i];",
          "233:     ssl_kickstart_checksum( ssl, ssl->session->ciphersuite, buf, n );",
          "",
          "[Added Lines]",
          "305:     ssl->session_negotiate->ciphersuite = ssl->ciphersuites[i];",
          "306:     ssl_optimize_checksum( ssl, ssl->session_negotiate->ciphersuite );",
          "308:     ext = buf + 44 + sess_len + ciph_len + comp_len;",
          "309:     renegotiation_info_seen = 0;",
          "311:     while( ext_len )",
          "312:     {",
          "313:         unsigned int ext_id   = ( ( ext[0] <<  8 )",
          "314:                                 | ( ext[1]       ) );",
          "315:         unsigned int ext_size = ( ( ext[2] <<  8 )",
          "316:                                 | ( ext[3]       ) );",
          "318:         if( ext_size + 4 > ext_len )",
          "319:         {",
          "320:             SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );",
          "321:             return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "322:         }",
          "323:         switch( ext_id )",
          "324:         {",
          "325:         case TLS_EXT_RENEGOTIATION_INFO:",
          "326:             SSL_DEBUG_MSG( 3, ( \"found renegotiation extension\" ) );",
          "327:             renegotiation_info_seen = 1;",
          "329:             if( ( ret = ssl_parse_renegotiation_info( ssl, ext + 4, ext_size ) ) != 0 )",
          "330:                 return( ret );",
          "332:             break;",
          "334:         default:",
          "335:             SSL_DEBUG_MSG( 3, ( \"unknown extension found: %d (ignoring)\",",
          "336:                            ext_id ) );",
          "337:         }",
          "339:         ext_len -= 4 + ext_size;",
          "340:         ext += 4 + ext_size;",
          "342:         if( ext_len > 0 && ext_len < 4 )",
          "343:         {",
          "344:             SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );",
          "345:             return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "346:         }",
          "347:     }",
          "352:     if( ssl->renegotiation == SSL_RENEGOTIATION &&",
          "353:         ssl->secure_renegotiation == SSL_SECURE_RENEGOTIATION &&",
          "354:         renegotiation_info_seen == 0 )",
          "355:     {",
          "356:         SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension missing (secure)\" ) );",
          "357:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "358:     }",
          "360:     if( ssl->renegotiation == SSL_RENEGOTIATION &&",
          "361:         ssl->secure_renegotiation == SSL_LEGACY_RENEGOTIATION &&",
          "362:         renegotiation_info_seen == 1 )",
          "363:     {",
          "364:         SSL_DEBUG_MSG( 1, ( \"renegotiation_info extension present (legacy)\" ) );",
          "365:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "366:     }",
          "368:     if( !ssl->allow_legacy_renegotiation &&",
          "369:         ssl->secure_renegotiation == SSL_LEGACY_RENEGOTIATION )",
          "370:     {",
          "371:         SSL_DEBUG_MSG( 1, ( \"legacy renegotiation not allowed\" ) );",
          "372:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO );",
          "373:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "244: {",
          "245:     time_t t;",
          "246:     int ret, n;",
          "247:     unsigned char *buf, *p;",
          "249:     SSL_DEBUG_MSG( 2, ( \"=> write server hello\" ) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:     size_t ext_len = 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "278:     p += 28;",
          "282:     SSL_DEBUG_BUF( 3, \"server hello, random bytes\", buf + 6, 32 );",
          "",
          "[Removed Lines]",
          "280:     memcpy( ssl->randbytes + 32, buf + 6, 32 );",
          "",
          "[Added Lines]",
          "421:     memcpy( ssl->handshake->randbytes + 32, buf + 6, 32 );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "293:     if( ssl->s_get == NULL ||",
          "294:         ssl->s_get( ssl ) != 0 )",
          "",
          "[Removed Lines]",
          "290:     ssl->session->length = n = 32;",
          "",
          "[Added Lines]",
          "431:     ssl->session_negotiate->length = n = 32;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "299:         ssl->resume = 0;",
          "300:         ssl->state++;",
          "303:         {",
          "304:             SSL_DEBUG_MSG( 1, ( \"No session struct set\" ) );",
          "305:             return( POLARSSL_ERR_SSL_BAD_INPUT_DATA );",
          "306:         }",
          "309:             return( ret );",
          "310:     }",
          "311:     else",
          "",
          "[Removed Lines]",
          "302:         if( ssl->session == NULL )",
          "308:         if( ( ret = ssl->f_rng( ssl->p_rng, ssl->session->id, n ) ) != 0 )",
          "",
          "[Added Lines]",
          "443:         if( ssl->session_negotiate == NULL )",
          "449:         if( ( ret = ssl->f_rng( ssl->p_rng, ssl->session_negotiate->id,",
          "450:                                 n ) ) != 0 )",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "323:         }",
          "324:     }",
          "329:     SSL_DEBUG_MSG( 3, ( \"server hello, session id len.: %d\", n ) );",
          "330:     SSL_DEBUG_BUF( 3,   \"server hello, session id\", buf + 39, n );",
          "331:     SSL_DEBUG_MSG( 3, ( \"%s session has been resumed\",",
          "332:                    ssl->resume ? \"a\" : \"no\" ) );",
          "338:     SSL_DEBUG_MSG( 3, ( \"server hello, chosen ciphersuite: %d\",",
          "340:     SSL_DEBUG_MSG( 3, ( \"server hello, compress alg.: %d\",",
          "343:     ssl->out_msglen  = p - buf;",
          "344:     ssl->out_msgtype = SSL_MSG_HANDSHAKE;",
          "",
          "[Removed Lines]",
          "326:     memcpy( p, ssl->session->id, ssl->session->length );",
          "327:     p += ssl->session->length;",
          "339:                    ssl->session->ciphersuite ) );",
          "341:                    ssl->session->compression ) );",
          "",
          "[Added Lines]",
          "468:     memcpy( p, ssl->session_negotiate->id, ssl->session_negotiate->length );",
          "469:     p += ssl->session_negotiate->length;",
          "481:                    ssl->session_negotiate->ciphersuite ) );",
          "483:                    ssl->session_negotiate->compression ) );",
          "485:     SSL_DEBUG_MSG( 3, ( \"server hello, prepping for secure renegotiation extension\" ) );",
          "486:     ext_len += 5 + ssl->verify_data_len * 2;",
          "488:     SSL_DEBUG_MSG( 3, ( \"server hello, total extension length: %d\",",
          "489:                    ext_len ) );",
          "497:     SSL_DEBUG_MSG( 3, ( \"client hello, secure renegotiation extension\" ) );",
          "506:     memcpy( p, ssl->peer_verify_data, ssl->verify_data_len );",
          "507:     p += ssl->verify_data_len;",
          "508:     memcpy( p, ssl->own_verify_data, ssl->verify_data_len );",
          "509:     p += ssl->verify_data_len;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "432:     SSL_DEBUG_MSG( 2, ( \"=> write server key exchange\" ) );",
          "446:     {",
          "447:         SSL_DEBUG_MSG( 2, ( \"<= skip write server key exchange\" ) );",
          "448:         ssl->state++;",
          "",
          "[Removed Lines]",
          "434:     if( ssl->session->ciphersuite != SSL_EDH_RSA_DES_SHA &&",
          "435:         ssl->session->ciphersuite != SSL_EDH_RSA_DES_168_SHA &&",
          "436:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_128_SHA &&",
          "437:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_256_SHA &&",
          "438:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_128_SHA256 &&",
          "439:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_256_SHA256 &&",
          "440:         ssl->session->ciphersuite != SSL_EDH_RSA_CAMELLIA_128_SHA &&",
          "441:         ssl->session->ciphersuite != SSL_EDH_RSA_CAMELLIA_256_SHA &&",
          "442:         ssl->session->ciphersuite != SSL_EDH_RSA_CAMELLIA_128_SHA256 &&",
          "443:         ssl->session->ciphersuite != SSL_EDH_RSA_CAMELLIA_256_SHA256 &&",
          "444:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_128_GCM_SHA256 &&",
          "445:         ssl->session->ciphersuite != SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "[Added Lines]",
          "602:     if( ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_DES_SHA &&",
          "603:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_DES_168_SHA &&",
          "604:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_128_SHA &&",
          "605:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_256_SHA &&",
          "606:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_128_SHA256 &&",
          "607:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_256_SHA256 &&",
          "608:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_CAMELLIA_128_SHA &&",
          "609:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_CAMELLIA_256_SHA &&",
          "610:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_CAMELLIA_128_SHA256 &&",
          "611:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_CAMELLIA_256_SHA256 &&",
          "612:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_128_GCM_SHA256 &&",
          "613:         ssl->session_negotiate->ciphersuite != SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "481:     {",
          "482:         SSL_DEBUG_RET( 1, \"dhm_make_params\", ret );",
          "483:         return( ret );",
          "484:     }",
          "491:     if( ssl->minor_ver != SSL_MINOR_VERSION_3 )",
          "492:     {",
          "",
          "[Removed Lines]",
          "479:     if( ( ret = dhm_make_params( &ssl->dhm_ctx, 256, ssl->out_msg + 4,",
          "480:                                  &n, ssl->f_rng, ssl->p_rng ) ) != 0 )",
          "486:     SSL_DEBUG_MPI( 3, \"DHM: X \", &ssl->dhm_ctx.X  );",
          "487:     SSL_DEBUG_MPI( 3, \"DHM: P \", &ssl->dhm_ctx.P  );",
          "488:     SSL_DEBUG_MPI( 3, \"DHM: G \", &ssl->dhm_ctx.G  );",
          "489:     SSL_DEBUG_MPI( 3, \"DHM: GX\", &ssl->dhm_ctx.GX );",
          "",
          "[Added Lines]",
          "647:     if( ( ret = mpi_copy( &ssl->handshake->dhm_ctx.P, &ssl->dhm_P ) ) != 0 ||",
          "648:         ( ret = mpi_copy( &ssl->handshake->dhm_ctx.G, &ssl->dhm_G ) ) != 0 )",
          "649:     {",
          "650:         SSL_DEBUG_RET( 1, \"mpi_copy\", ret );",
          "651:         return( ret );",
          "652:     }",
          "654:     if( ( ret = dhm_make_params( &ssl->handshake->dhm_ctx, 256, ssl->out_msg + 4,",
          "655:                                   &n, ssl->f_rng, ssl->p_rng ) ) != 0 )",
          "661:     SSL_DEBUG_MPI( 3, \"DHM: X \", &ssl->handshake->dhm_ctx.X  );",
          "662:     SSL_DEBUG_MPI( 3, \"DHM: P \", &ssl->handshake->dhm_ctx.P  );",
          "663:     SSL_DEBUG_MPI( 3, \"DHM: G \", &ssl->handshake->dhm_ctx.G  );",
          "664:     SSL_DEBUG_MPI( 3, \"DHM: GX\", &ssl->handshake->dhm_ctx.GX );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "506:         md5_starts( &md5 );",
          "508:         md5_update( &md5, ssl->out_msg + 4, n );",
          "509:         md5_finish( &md5, hash );",
          "511:         sha1_starts( &sha1 );",
          "513:         sha1_update( &sha1, ssl->out_msg + 4, n );",
          "514:         sha1_finish( &sha1, hash + 16 );",
          "",
          "[Removed Lines]",
          "507:         md5_update( &md5, ssl->randbytes,  64 );",
          "512:         sha1_update( &sha1, ssl->randbytes,  64 );",
          "",
          "[Added Lines]",
          "682:         md5_update( &md5, ssl->handshake->randbytes,  64 );",
          "687:         sha1_update( &sha1, ssl->handshake->randbytes,  64 );",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "532:         sha1_starts( &sha1 );",
          "534:         sha1_update( &sha1, ssl->out_msg + 4, n );",
          "535:         sha1_finish( &sha1, hash );",
          "",
          "[Removed Lines]",
          "533:         sha1_update( &sha1, ssl->randbytes, 64 );",
          "",
          "[Added Lines]",
          "708:         sha1_update( &sha1, ssl->handshake->randbytes, 64 );",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "646:         return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );",
          "647:     }",
          "661:     {",
          "662: #if !defined(POLARSSL_DHM_C)",
          "663:         SSL_DEBUG_MSG( 1, ( \"support for dhm is not available\" ) );",
          "",
          "[Removed Lines]",
          "649:     if( ssl->session->ciphersuite == SSL_EDH_RSA_DES_SHA ||",
          "650:         ssl->session->ciphersuite == SSL_EDH_RSA_DES_168_SHA ||",
          "651:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_SHA ||",
          "652:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_SHA ||",
          "653:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_SHA256 ||",
          "654:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_SHA256 ||",
          "655:         ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA ||",
          "656:         ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA ||",
          "657:         ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA256 ||",
          "658:         ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA256 ||",
          "659:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_GCM_SHA256 ||",
          "660:         ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "[Added Lines]",
          "824:     if( ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_DES_SHA ||",
          "825:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_DES_168_SHA ||",
          "826:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_128_SHA ||",
          "827:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_256_SHA ||",
          "828:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_128_SHA256 ||",
          "829:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_256_SHA256 ||",
          "830:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA ||",
          "831:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA ||",
          "832:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA256 ||",
          "833:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA256 ||",
          "834:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_128_GCM_SHA256 ||",
          "835:         ssl->session_negotiate->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "669:         n = ( ssl->in_msg[4] << 8 ) | ssl->in_msg[5];",
          "672:             n + 6 != ssl->in_hslen )",
          "673:         {",
          "674:             SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );",
          "675:             return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );",
          "676:         }",
          "679:                                       ssl->in_msg + 6, n ) ) != 0 )",
          "680:         {",
          "681:             SSL_DEBUG_RET( 1, \"dhm_read_public\", ret );",
          "682:             return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_DHM_RP );",
          "683:         }",
          "691:         {",
          "692:             SSL_DEBUG_RET( 1, \"dhm_calc_secret\", ret );",
          "693:             return( POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_DHM_CS );",
          "694:         }",
          "697: #endif",
          "698:     }",
          "699:     else",
          "",
          "[Removed Lines]",
          "671:         if( n < 1 || n > ssl->dhm_ctx.len ||",
          "678:         if( ( ret = dhm_read_public( &ssl->dhm_ctx,",
          "685:         SSL_DEBUG_MPI( 3, \"DHM: GY\", &ssl->dhm_ctx.GY );",
          "687:         ssl->pmslen = ssl->dhm_ctx.len;",
          "689:         if( ( ret = dhm_calc_secret( &ssl->dhm_ctx,",
          "690:                      ssl->premaster, &ssl->pmslen ) ) != 0 )",
          "696:         SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->dhm_ctx.K  );",
          "",
          "[Added Lines]",
          "846:         if( n < 1 || n > ssl->handshake->dhm_ctx.len ||",
          "853:         if( ( ret = dhm_read_public( &ssl->handshake->dhm_ctx,",
          "860:         SSL_DEBUG_MPI( 3, \"DHM: GY\", &ssl->handshake->dhm_ctx.GY );",
          "862:         ssl->handshake->pmslen = ssl->handshake->dhm_ctx.len;",
          "864:         if( ( ret = dhm_calc_secret( &ssl->handshake->dhm_ctx,",
          "865:                                       ssl->handshake->premaster,",
          "866:                                      &ssl->handshake->pmslen ) ) != 0 )",
          "872:         SSL_DEBUG_MPI( 3, \"DHM: K \", &ssl->handshake->dhm_ctx.K  );",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "721:         else",
          "722:             n = ssl->pkcs11_key->len;",
          "723: #endif",
          "726:         if( ssl->minor_ver != SSL_MINOR_VERSION_0 )",
          "727:         {",
          "",
          "[Removed Lines]",
          "724:         ssl->pmslen = 48;",
          "",
          "[Added Lines]",
          "900:         ssl->handshake->pmslen = 48;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "741:         }",
          "743:         if( ssl->rsa_key ) {",
          "747:         }",
          "748: #if defined(POLARSSL_PKCS11_C)",
          "749:         else {",
          "753:         }",
          "759:         {",
          "760:             SSL_DEBUG_MSG( 1, ( \"bad client key exchange message\" ) );",
          "",
          "[Removed Lines]",
          "744:             ret = rsa_pkcs1_decrypt( ssl->rsa_key, RSA_PRIVATE, &ssl->pmslen,",
          "745:                                  ssl->in_msg + i, ssl->premaster,",
          "746:                                  sizeof(ssl->premaster) );",
          "750:             ret = pkcs11_decrypt( ssl->pkcs11_key, RSA_PRIVATE, &ssl->pmslen,",
          "751:                                  ssl->in_msg + i, ssl->premaster,",
          "752:                                  sizeof(ssl->premaster) );",
          "756:         if( ret != 0 || ssl->pmslen != 48 ||",
          "757:             ssl->premaster[0] != ssl->max_major_ver ||",
          "758:             ssl->premaster[1] != ssl->max_minor_ver )",
          "",
          "[Added Lines]",
          "920:             ret = rsa_pkcs1_decrypt(  ssl->rsa_key, RSA_PRIVATE,",
          "921:                                      &ssl->handshake->pmslen,",
          "922:                                       ssl->in_msg + i,",
          "923:                                       ssl->handshake->premaster,",
          "924:                                       sizeof(ssl->handshake->premaster) );",
          "928:             ret = pkcs11_decrypt(  ssl->pkcs11_key, RSA_PRIVATE,",
          "929:                                   &ssl->handshake->pmslen,",
          "930:                                    ssl->in_msg + i,",
          "931:                                    ssl->handshake->premaster,",
          "932:                                    sizeof(ssl->handshake->premaster) );",
          "936:         if( ret != 0 || ssl->handshake->pmslen != 48 ||",
          "937:             ssl->handshake->premaster[0] != ssl->max_major_ver ||",
          "938:             ssl->handshake->premaster[1] != ssl->max_minor_ver )",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "771:             if( ret != 0 )",
          "772:                 return( ret );",
          "773:         }",
          "",
          "[Removed Lines]",
          "768:             ssl->pmslen = 48;",
          "770:             ret = ssl->f_rng( ssl->p_rng, ssl->premaster, ssl->pmslen );",
          "",
          "[Added Lines]",
          "948:             ssl->handshake->pmslen = 48;",
          "950:             ret = ssl->f_rng( ssl->p_rng, ssl->handshake->premaster,",
          "951:                               ssl->handshake->pmslen );",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "798:     SSL_DEBUG_MSG( 2, ( \"=> parse certificate verify\" ) );",
          "801:     {",
          "802:         SSL_DEBUG_MSG( 2, ( \"<= skip parse certificate verify\" ) );",
          "803:         ssl->state++;",
          "804:         return( 0 );",
          "805:     }",
          "809:     if( ( ret = ssl_read_record( ssl ) ) != 0 )",
          "810:     {",
          "",
          "[Removed Lines]",
          "800:     if( ssl->peer_cert == NULL )",
          "807:     ssl->calc_verify( ssl, hash );",
          "",
          "[Added Lines]",
          "981:     if( ssl->session_negotiate->peer_cert == NULL )",
          "988:     ssl->handshake->calc_verify( ssl, hash );",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "826:         return( POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );",
          "827:     }",
          "830:     n2 = ( ssl->in_msg[4] << 8 ) | ssl->in_msg[5];",
          "832:     if( n1 + 6 != ssl->in_hslen || n1 != n2 )",
          "",
          "[Removed Lines]",
          "829:     n1 = ssl->peer_cert->rsa.len;",
          "",
          "[Added Lines]",
          "1010:     n1 = ssl->session_negotiate->peer_cert->rsa.len;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "835:         return( POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );",
          "836:     }",
          "839:                             SIG_RSA_RAW, 36, hash, ssl->in_msg + 6 );",
          "840:     if( ret != 0 )",
          "841:     {",
          "",
          "[Removed Lines]",
          "838:     ret = rsa_pkcs1_verify( &ssl->peer_cert->rsa, RSA_PUBLIC,",
          "",
          "[Added Lines]",
          "1019:     ret = rsa_pkcs1_verify( &ssl->session_negotiate->peer_cert->rsa, RSA_PUBLIC,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "946:             case SSL_FLUSH_BUFFERS:",
          "947:                 SSL_DEBUG_MSG( 2, ( \"handshake: done\" ) );",
          "949:                 break;",
          "951:             default:",
          "",
          "[Removed Lines]",
          "948:                 ssl->state = SSL_HANDSHAKE_OVER;",
          "",
          "[Added Lines]",
          "1129:                 ssl->state = SSL_HANDSHAKE_WRAPUP;",
          "1130:                 break;",
          "1132:             case SSL_HANDSHAKE_WRAPUP:",
          "1133:                 ssl_handshake_wrapup( ssl );",
          "",
          "---------------"
        ],
        "library/ssl_tls.c||library/ssl_tls.c": [
          "File: library/ssl_tls.c -> library/ssl_tls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:     unsigned char *key1;",
          "273:     unsigned char *key2;",
          "274:     unsigned int iv_copy_len;",
          "276:     SSL_DEBUG_MSG( 2, ( \"=> derive keys\" ) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     ssl_session *session = ssl->session_negotiate;",
          "276:     ssl_transform *transform = ssl->transform_negotiate;",
          "277:     ssl_handshake_params *handshake = ssl->handshake;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:     if( ssl->minor_ver == SSL_MINOR_VERSION_0 )",
          "282:     {",
          "286:     }",
          "287:     else if( ssl->minor_ver < SSL_MINOR_VERSION_3 )",
          "288:     {",
          "292:     }",
          "295:     {",
          "299:     }",
          "300:     else",
          "301:     {",
          "305:     }",
          "",
          "[Removed Lines]",
          "283:         ssl->tls_prf = ssl3_prf;",
          "284:         ssl->calc_verify = ssl_calc_verify_ssl;",
          "285:         ssl->calc_finished = ssl_calc_finished_ssl;",
          "289:         ssl->tls_prf = tls1_prf;",
          "290:         ssl->calc_verify = ssl_calc_verify_tls;",
          "291:         ssl->calc_finished = ssl_calc_finished_tls;",
          "293:     else if( ssl->session->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "294:             ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "296:         ssl->tls_prf = tls_prf_sha384;",
          "297:         ssl->calc_verify = ssl_calc_verify_tls_sha384;",
          "298:         ssl->calc_finished = ssl_calc_finished_tls_sha384;",
          "302:         ssl->tls_prf = tls_prf_sha256;",
          "303:         ssl->calc_verify = ssl_calc_verify_tls_sha256;",
          "304:         ssl->calc_finished = ssl_calc_finished_tls_sha256;",
          "",
          "[Added Lines]",
          "286:         handshake->tls_prf = ssl3_prf;",
          "287:         handshake->calc_verify = ssl_calc_verify_ssl;",
          "288:         handshake->calc_finished = ssl_calc_finished_ssl;",
          "292:         handshake->tls_prf = tls1_prf;",
          "293:         handshake->calc_verify = ssl_calc_verify_tls;",
          "294:         handshake->calc_finished = ssl_calc_finished_tls;",
          "296:     else if( session->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "297:              session->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "299:         handshake->tls_prf = tls_prf_sha384;",
          "300:         handshake->calc_verify = ssl_calc_verify_tls_sha384;",
          "301:         handshake->calc_finished = ssl_calc_finished_tls_sha384;",
          "305:         handshake->tls_prf = tls_prf_sha256;",
          "306:         handshake->calc_verify = ssl_calc_verify_tls_sha256;",
          "307:         handshake->calc_finished = ssl_calc_finished_tls_sha256;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:     if( ssl->resume == 0 )",
          "318:     {",
          "325:     }",
          "326:     else",
          "327:         SSL_DEBUG_MSG( 3, ( \"no premaster (session resumed)\" ) );",
          "",
          "[Removed Lines]",
          "319:         SSL_DEBUG_BUF( 3, \"premaster secret\", ssl->premaster, ssl->pmslen );",
          "321:         ssl->tls_prf( ssl->premaster, ssl->pmslen, \"master secret\",",
          "322:                       ssl->randbytes, 64, ssl->session->master, 48 );",
          "324:         memset( ssl->premaster, 0, sizeof( ssl->premaster ) );",
          "",
          "[Added Lines]",
          "322:         SSL_DEBUG_BUF( 3, \"premaster secret\", handshake->premaster,",
          "323:                        handshake->pmslen );",
          "325:         handshake->tls_prf( handshake->premaster, handshake->pmslen,",
          "326:                             \"master secret\",",
          "327:                             handshake->randbytes, 64, session->master, 48 );",
          "329:         memset( handshake->premaster, 0, sizeof( handshake->premaster ) );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:     memset( tmp, 0, sizeof( tmp ) );",
          "",
          "[Removed Lines]",
          "332:     memcpy( tmp, ssl->randbytes, 64 );",
          "333:     memcpy( ssl->randbytes, tmp + 32, 32 );",
          "334:     memcpy( ssl->randbytes + 32, tmp, 32 );",
          "",
          "[Added Lines]",
          "337:     memcpy( tmp, handshake->randbytes, 64 );",
          "338:     memcpy( handshake->randbytes, tmp + 32, 32 );",
          "339:     memcpy( handshake->randbytes + 32, tmp, 32 );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "355:     SSL_DEBUG_BUF( 4, \"key block\", keyblk, 256 );",
          "363:     {",
          "364: #if defined(POLARSSL_ARC4_C)",
          "365:         case SSL_RSA_RC4_128_MD5:",
          "368:             break;",
          "370:         case SSL_RSA_RC4_128_SHA:",
          "373:             break;",
          "374: #endif",
          "376: #if defined(POLARSSL_DES_C)",
          "377:         case SSL_RSA_DES_168_SHA:",
          "378:         case SSL_EDH_RSA_DES_168_SHA:",
          "381:             break;",
          "382: #endif",
          "384: #if defined(POLARSSL_AES_C)",
          "385:         case SSL_RSA_AES_128_SHA:",
          "386:         case SSL_EDH_RSA_AES_128_SHA:",
          "389:             break;",
          "391:         case SSL_RSA_AES_256_SHA:",
          "392:         case SSL_EDH_RSA_AES_256_SHA:",
          "395:             break;",
          "397: #if defined(POLARSSL_SHA2_C)",
          "398:         case SSL_RSA_AES_128_SHA256:",
          "399:         case SSL_EDH_RSA_AES_128_SHA256:",
          "402:             break;",
          "404:         case SSL_RSA_AES_256_SHA256:",
          "405:         case SSL_EDH_RSA_AES_256_SHA256:",
          "408:             break;",
          "409: #endif",
          "410: #if defined(POLARSSL_GCM_C)",
          "411:         case SSL_RSA_AES_128_GCM_SHA256:",
          "412:         case SSL_EDH_RSA_AES_128_GCM_SHA256:",
          "416:             break;",
          "418:         case SSL_RSA_AES_256_GCM_SHA384:",
          "419:         case SSL_EDH_RSA_AES_256_GCM_SHA384:",
          "423:             break;",
          "424: #endif",
          "425: #endif",
          "",
          "[Removed Lines]",
          "349:     ssl->tls_prf( ssl->session->master, 48, \"key expansion\",",
          "350:                   ssl->randbytes, 64, keyblk, 256 );",
          "352:     SSL_DEBUG_MSG( 3, ( \"ciphersuite = %s\", ssl_get_ciphersuite( ssl ) ) );",
          "353:     SSL_DEBUG_BUF( 3, \"master secret\", ssl->session->master, 48 );",
          "354:     SSL_DEBUG_BUF( 4, \"random bytes\", ssl->randbytes, 64 );",
          "357:     memset( ssl->randbytes, 0, sizeof( ssl->randbytes ) );",
          "362:     switch( ssl->session->ciphersuite )",
          "366:             ssl->keylen = 16; ssl->minlen = 16;",
          "367:             ssl->ivlen  =  0; ssl->maclen = 16;",
          "371:             ssl->keylen = 16; ssl->minlen = 20;",
          "372:             ssl->ivlen  =  0; ssl->maclen = 20;",
          "379:             ssl->keylen = 24; ssl->minlen = 24;",
          "380:             ssl->ivlen  =  8; ssl->maclen = 20;",
          "387:             ssl->keylen = 16; ssl->minlen = 32;",
          "388:             ssl->ivlen  = 16; ssl->maclen = 20;",
          "393:             ssl->keylen = 32; ssl->minlen = 32;",
          "394:             ssl->ivlen  = 16; ssl->maclen = 20;",
          "400:             ssl->keylen = 16; ssl->minlen = 32;",
          "401:             ssl->ivlen  = 16; ssl->maclen = 32;",
          "406:             ssl->keylen = 32; ssl->minlen = 32;",
          "407:             ssl->ivlen  = 16; ssl->maclen = 32;",
          "413:             ssl->keylen = 16; ssl->minlen = 1;",
          "414:             ssl->ivlen  = 12; ssl->maclen = 0;",
          "415:             ssl->fixed_ivlen = 4;",
          "420:             ssl->keylen = 32; ssl->minlen = 1;",
          "421:             ssl->ivlen  = 12; ssl->maclen = 0;",
          "422:             ssl->fixed_ivlen = 4;",
          "",
          "[Added Lines]",
          "354:     handshake->tls_prf( session->master, 48, \"key expansion\",",
          "355:                         handshake->randbytes, 64, keyblk, 256 );",
          "357:     SSL_DEBUG_MSG( 3, ( \"ciphersuite = %s\",",
          "358:                    ssl_get_ciphersuite_name( session->ciphersuite ) ) );",
          "359:     SSL_DEBUG_BUF( 3, \"master secret\", session->master, 48 );",
          "360:     SSL_DEBUG_BUF( 4, \"random bytes\", handshake->randbytes, 64 );",
          "363:     memset( handshake->randbytes, 0, sizeof( handshake->randbytes ) );",
          "368:     switch( session->ciphersuite )",
          "372:             transform->keylen = 16; transform->minlen = 16;",
          "373:             transform->ivlen  =  0; transform->maclen = 16;",
          "377:             transform->keylen = 16; transform->minlen = 20;",
          "378:             transform->ivlen  =  0; transform->maclen = 20;",
          "385:             transform->keylen = 24; transform->minlen = 24;",
          "386:             transform->ivlen  =  8; transform->maclen = 20;",
          "393:             transform->keylen = 16; transform->minlen = 32;",
          "394:             transform->ivlen  = 16; transform->maclen = 20;",
          "399:             transform->keylen = 32; transform->minlen = 32;",
          "400:             transform->ivlen  = 16; transform->maclen = 20;",
          "406:             transform->keylen = 16; transform->minlen = 32;",
          "407:             transform->ivlen  = 16; transform->maclen = 32;",
          "412:             transform->keylen = 32; transform->minlen = 32;",
          "413:             transform->ivlen  = 16; transform->maclen = 32;",
          "419:             transform->keylen = 16; transform->minlen = 1;",
          "420:             transform->ivlen  = 12; transform->maclen = 0;",
          "421:             transform->fixed_ivlen = 4;",
          "426:             transform->keylen = 32; transform->minlen = 1;",
          "427:             transform->ivlen  = 12; transform->maclen = 0;",
          "428:             transform->fixed_ivlen = 4;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "427: #if defined(POLARSSL_CAMELLIA_C)",
          "428:         case SSL_RSA_CAMELLIA_128_SHA:",
          "429:         case SSL_EDH_RSA_CAMELLIA_128_SHA:",
          "432:             break;",
          "434:         case SSL_RSA_CAMELLIA_256_SHA:",
          "435:         case SSL_EDH_RSA_CAMELLIA_256_SHA:",
          "438:             break;",
          "440: #if defined(POLARSSL_SHA2_C)",
          "441:         case SSL_RSA_CAMELLIA_128_SHA256:",
          "442:         case SSL_EDH_RSA_CAMELLIA_128_SHA256:",
          "445:             break;",
          "447:         case SSL_RSA_CAMELLIA_256_SHA256:",
          "448:         case SSL_EDH_RSA_CAMELLIA_256_SHA256:",
          "451:             break;",
          "452: #endif",
          "453: #endif",
          "",
          "[Removed Lines]",
          "430:             ssl->keylen = 16; ssl->minlen = 32;",
          "431:             ssl->ivlen  = 16; ssl->maclen = 20;",
          "436:             ssl->keylen = 32; ssl->minlen = 32;",
          "437:             ssl->ivlen  = 16; ssl->maclen = 20;",
          "443:             ssl->keylen = 16; ssl->minlen = 32;",
          "444:             ssl->ivlen  = 16; ssl->maclen = 32;",
          "449:             ssl->keylen = 32; ssl->minlen = 32;",
          "450:             ssl->ivlen  = 16; ssl->maclen = 32;",
          "",
          "[Added Lines]",
          "436:             transform->keylen = 16; transform->minlen = 32;",
          "437:             transform->ivlen  = 16; transform->maclen = 20;",
          "442:             transform->keylen = 32; transform->minlen = 32;",
          "443:             transform->ivlen  = 16; transform->maclen = 20;",
          "449:             transform->keylen = 16; transform->minlen = 32;",
          "450:             transform->ivlen  = 16; transform->maclen = 32;",
          "455:             transform->keylen = 32; transform->minlen = 32;",
          "456:             transform->ivlen  = 16; transform->maclen = 32;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "455: #if defined(POLARSSL_ENABLE_WEAK_CIPHERSUITES)",
          "456: #if defined(POLARSSL_CIPHER_NULL_CIPHER)",
          "457:         case SSL_RSA_NULL_MD5:",
          "460:             break;",
          "462:         case SSL_RSA_NULL_SHA:",
          "465:             break;",
          "467:         case SSL_RSA_NULL_SHA256:",
          "470:             break;",
          "473: #if defined(POLARSSL_DES_C)",
          "474:         case SSL_RSA_DES_SHA:",
          "475:         case SSL_EDH_RSA_DES_SHA:",
          "478:             break;",
          "479: #endif",
          "482:         default:",
          "483:             SSL_DEBUG_MSG( 1, ( \"ciphersuite %s is not available\",",
          "485:             return( POLARSSL_ERR_SSL_FEATURE_UNAVAILABLE );",
          "486:     }",
          "488:     SSL_DEBUG_MSG( 3, ( \"keylen: %d, minlen: %d, ivlen: %d, maclen: %d\",",
          "494:     if( ssl->endpoint == SSL_IS_CLIENT )",
          "495:     {",
          "508:                 iv_copy_len );",
          "509:     }",
          "510:     else",
          "511:     {",
          "524:                 iv_copy_len );",
          "525:     }",
          "",
          "[Removed Lines]",
          "458:             ssl->keylen = 0; ssl->minlen = 0;",
          "459:             ssl->ivlen = 0; ssl->maclen = 16;",
          "463:             ssl->keylen = 0; ssl->minlen = 0;",
          "464:             ssl->ivlen = 0; ssl->maclen = 20;",
          "468:             ssl->keylen = 0; ssl->minlen = 0;",
          "469:             ssl->ivlen = 0; ssl->maclen = 32;",
          "476:             ssl->keylen =  8; ssl->minlen = 8;",
          "477:             ssl->ivlen  =  8; ssl->maclen = 20;",
          "484:                            ssl_get_ciphersuite( ssl ) ) );",
          "489:                    ssl->keylen, ssl->minlen, ssl->ivlen, ssl->maclen ) );",
          "496:         key1 = keyblk + ssl->maclen * 2;",
          "497:         key2 = keyblk + ssl->maclen * 2 + ssl->keylen;",
          "499:         memcpy( ssl->mac_enc, keyblk,  ssl->maclen );",
          "500:         memcpy( ssl->mac_dec, keyblk + ssl->maclen, ssl->maclen );",
          "505:         iv_copy_len = ( ssl->fixed_ivlen ) ? ssl->fixed_ivlen : ssl->ivlen;",
          "506:         memcpy( ssl->iv_enc, key2 + ssl->keylen,  iv_copy_len );",
          "507:         memcpy( ssl->iv_dec, key2 + ssl->keylen + iv_copy_len,",
          "512:         key1 = keyblk + ssl->maclen * 2 + ssl->keylen;",
          "513:         key2 = keyblk + ssl->maclen * 2;",
          "515:         memcpy( ssl->mac_dec, keyblk,  ssl->maclen );",
          "516:         memcpy( ssl->mac_enc, keyblk + ssl->maclen, ssl->maclen );",
          "521:         iv_copy_len = ( ssl->fixed_ivlen ) ? ssl->fixed_ivlen : ssl->ivlen;",
          "522:         memcpy( ssl->iv_dec, key1 + ssl->keylen,  iv_copy_len );",
          "523:         memcpy( ssl->iv_enc, key1 + ssl->keylen + iv_copy_len,",
          "",
          "[Added Lines]",
          "464:             transform->keylen = 0; transform->minlen = 0;",
          "465:             transform->ivlen  = 0; transform->maclen = 16;",
          "469:             transform->keylen = 0; transform->minlen = 0;",
          "470:             transform->ivlen  = 0; transform->maclen = 20;",
          "474:             transform->keylen = 0; transform->minlen = 0;",
          "475:             transform->ivlen  = 0; transform->maclen = 32;",
          "482:             transform->keylen =  8; transform->minlen = 8;",
          "483:             transform->ivlen  =  8; transform->maclen = 20;",
          "490:                            ssl_get_ciphersuite_name( session->ciphersuite ) ) );",
          "495:                    transform->keylen, transform->minlen, transform->ivlen,",
          "496:                    transform->maclen ) );",
          "503:         key1 = keyblk + transform->maclen * 2;",
          "504:         key2 = keyblk + transform->maclen * 2 + transform->keylen;",
          "506:         memcpy( transform->mac_enc, keyblk,  transform->maclen );",
          "507:         memcpy( transform->mac_dec, keyblk + transform->maclen,",
          "508:                 transform->maclen );",
          "513:         iv_copy_len = ( transform->fixed_ivlen ) ?",
          "514:                             transform->fixed_ivlen : transform->ivlen;",
          "515:         memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );",
          "516:         memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,",
          "521:         key1 = keyblk + transform->maclen * 2 + transform->keylen;",
          "522:         key2 = keyblk + transform->maclen * 2;",
          "524:         memcpy( transform->mac_dec, keyblk,  transform->maclen );",
          "525:         memcpy( transform->mac_enc, keyblk + transform->maclen,",
          "526:                 transform->maclen );",
          "531:         iv_copy_len = ( transform->fixed_ivlen ) ?",
          "532:                             transform->fixed_ivlen : transform->ivlen;",
          "533:         memcpy( transform->iv_dec, key1 + transform->keylen,  iv_copy_len );",
          "534:         memcpy( transform->iv_enc, key1 + transform->keylen + iv_copy_len,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "532:         SSL_DEBUG_MSG( 2, ( \"going for ssl_hw_record_init()\" ) );",
          "537:         {",
          "538:             SSL_DEBUG_RET( 1, \"ssl_hw_record_init\", ret );",
          "539:             return POLARSSL_ERR_SSL_HW_ACCEL_FAILED;",
          "",
          "[Removed Lines]",
          "534:         if( ( ret = ssl_hw_record_init( ssl, key1, key2, ssl->iv_enc,",
          "535:                                         ssl->iv_dec, ssl->mac_enc,",
          "536:                                         ssl->mac_dec ) ) != 0 )",
          "",
          "[Added Lines]",
          "545:         if( ( ret = ssl_hw_record_init( ssl, key1, key2, transform->iv_enc,",
          "546:                                         transform->iv_dec, transform->mac_enc,",
          "547:                                         transform->mac_dec ) ) != 0 )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "541:     }",
          "542: #endif",
          "545:     {",
          "546: #if defined(POLARSSL_ARC4_C)",
          "547:         case SSL_RSA_RC4_128_MD5:",
          "548:         case SSL_RSA_RC4_128_SHA:",
          "551:             break;",
          "552: #endif",
          "554: #if defined(POLARSSL_DES_C)",
          "555:         case SSL_RSA_DES_168_SHA:",
          "556:         case SSL_EDH_RSA_DES_168_SHA:",
          "559:             break;",
          "560: #endif",
          "",
          "[Removed Lines]",
          "544:     switch( ssl->session->ciphersuite )",
          "549:             arc4_setup( (arc4_context *) ssl->ctx_enc, key1, ssl->keylen );",
          "550:             arc4_setup( (arc4_context *) ssl->ctx_dec, key2, ssl->keylen );",
          "557:             des3_set3key_enc( (des3_context *) ssl->ctx_enc, key1 );",
          "558:             des3_set3key_dec( (des3_context *) ssl->ctx_dec, key2 );",
          "",
          "[Added Lines]",
          "555:     switch( session->ciphersuite )",
          "560:             arc4_setup( (arc4_context *) transform->ctx_enc, key1,",
          "561:                         transform->keylen );",
          "562:             arc4_setup( (arc4_context *) transform->ctx_dec, key2,",
          "563:                         transform->keylen );",
          "570:             des3_set3key_enc( (des3_context *) transform->ctx_enc, key1 );",
          "571:             des3_set3key_dec( (des3_context *) transform->ctx_dec, key2 );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "564:         case SSL_EDH_RSA_AES_128_SHA:",
          "565:         case SSL_RSA_AES_128_SHA256:",
          "566:         case SSL_EDH_RSA_AES_128_SHA256:",
          "569:             break;",
          "571:         case SSL_RSA_AES_256_SHA:",
          "572:         case SSL_EDH_RSA_AES_256_SHA:",
          "573:         case SSL_RSA_AES_256_SHA256:",
          "574:         case SSL_EDH_RSA_AES_256_SHA256:",
          "577:             break;",
          "579: #if defined(POLARSSL_GCM_C)",
          "580:         case SSL_RSA_AES_128_GCM_SHA256:",
          "581:         case SSL_EDH_RSA_AES_128_GCM_SHA256:",
          "584:             break;",
          "586:         case SSL_RSA_AES_256_GCM_SHA384:",
          "587:         case SSL_EDH_RSA_AES_256_GCM_SHA384:",
          "590:             break;",
          "591: #endif",
          "592: #endif",
          "",
          "[Removed Lines]",
          "567:             aes_setkey_enc( (aes_context *) ssl->ctx_enc, key1, 128 );",
          "568:             aes_setkey_dec( (aes_context *) ssl->ctx_dec, key2, 128 );",
          "575:             aes_setkey_enc( (aes_context *) ssl->ctx_enc, key1, 256 );",
          "576:             aes_setkey_dec( (aes_context *) ssl->ctx_dec, key2, 256 );",
          "582:             gcm_init( (gcm_context *) ssl->ctx_enc, key1, 128 );",
          "583:             gcm_init( (gcm_context *) ssl->ctx_dec, key2, 128 );",
          "588:             gcm_init( (gcm_context *) ssl->ctx_enc, key1, 256 );",
          "589:             gcm_init( (gcm_context *) ssl->ctx_dec, key2, 256 );",
          "",
          "[Added Lines]",
          "580:             aes_setkey_enc( (aes_context *) transform->ctx_enc, key1, 128 );",
          "581:             aes_setkey_dec( (aes_context *) transform->ctx_dec, key2, 128 );",
          "588:             aes_setkey_enc( (aes_context *) transform->ctx_enc, key1, 256 );",
          "589:             aes_setkey_dec( (aes_context *) transform->ctx_dec, key2, 256 );",
          "595:             gcm_init( (gcm_context *) transform->ctx_enc, key1, 128 );",
          "596:             gcm_init( (gcm_context *) transform->ctx_dec, key2, 128 );",
          "601:             gcm_init( (gcm_context *) transform->ctx_enc, key1, 256 );",
          "602:             gcm_init( (gcm_context *) transform->ctx_dec, key2, 256 );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "596:         case SSL_EDH_RSA_CAMELLIA_128_SHA:",
          "597:         case SSL_RSA_CAMELLIA_128_SHA256:",
          "598:         case SSL_EDH_RSA_CAMELLIA_128_SHA256:",
          "601:             break;",
          "603:         case SSL_RSA_CAMELLIA_256_SHA:",
          "604:         case SSL_EDH_RSA_CAMELLIA_256_SHA:",
          "605:         case SSL_RSA_CAMELLIA_256_SHA256:",
          "606:         case SSL_EDH_RSA_CAMELLIA_256_SHA256:",
          "609:             break;",
          "610: #endif",
          "",
          "[Removed Lines]",
          "599:             camellia_setkey_enc( (camellia_context *) ssl->ctx_enc, key1, 128 );",
          "600:             camellia_setkey_dec( (camellia_context *) ssl->ctx_dec, key2, 128 );",
          "607:             camellia_setkey_enc( (camellia_context *) ssl->ctx_enc, key1, 256 );",
          "608:             camellia_setkey_dec( (camellia_context *) ssl->ctx_dec, key2, 256 );",
          "",
          "[Added Lines]",
          "612:             camellia_setkey_enc( (camellia_context *) transform->ctx_enc, key1, 128 );",
          "613:             camellia_setkey_dec( (camellia_context *) transform->ctx_dec, key2, 128 );",
          "620:             camellia_setkey_enc( (camellia_context *) transform->ctx_enc, key1, 256 );",
          "621:             camellia_setkey_dec( (camellia_context *) transform->ctx_dec, key2, 256 );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "620: #if defined(POLARSSL_DES_C)",
          "621:         case SSL_RSA_DES_SHA:",
          "622:         case SSL_EDH_RSA_DES_SHA:",
          "625:             break;",
          "626: #endif",
          "",
          "[Removed Lines]",
          "623:             des_setkey_enc( (des_context *) ssl->ctx_enc, key1 );",
          "624:             des_setkey_dec( (des_context *) ssl->ctx_dec, key2 );",
          "",
          "[Added Lines]",
          "636:             des_setkey_enc( (des_context *) transform->ctx_enc, key1 );",
          "637:             des_setkey_dec( (des_context *) transform->ctx_dec, key2 );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "635: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "639:     {",
          "640:         SSL_DEBUG_MSG( 3, ( \"Initializing zlib states\" ) );",
          "647:         {",
          "648:             SSL_DEBUG_MSG( 1, ( \"Failed to initialize compression\" ) );",
          "649:             return( POLARSSL_ERR_SSL_COMPRESSION_FAILED );",
          "",
          "[Removed Lines]",
          "638:     if( ssl->session->compression == SSL_COMPRESS_DEFLATE )",
          "642:         memset( &ssl->ctx_deflate, 0, sizeof( ssl->ctx_deflate ) );",
          "643:         memset( &ssl->ctx_inflate, 0, sizeof( ssl->ctx_inflate ) );",
          "645:         if( deflateInit( &ssl->ctx_deflate, Z_DEFAULT_COMPRESSION ) != Z_OK ||",
          "646:             inflateInit( &ssl->ctx_inflate ) != Z_OK )",
          "",
          "[Added Lines]",
          "651:     if( session->compression == SSL_COMPRESS_DEFLATE )",
          "655:         memset( &transform->ctx_deflate, 0, sizeof( transform->ctx_deflate ) );",
          "656:         memset( &transform->ctx_inflate, 0, sizeof( transform->ctx_inflate ) );",
          "658:         if( deflateInit( &transform->ctx_deflate, Z_DEFAULT_COMPRESSION ) != Z_OK ||",
          "659:             inflateInit( &transform->ctx_inflate ) != Z_OK )",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "666:     SSL_DEBUG_MSG( 2, ( \"=> calc verify ssl\" ) );",
          "672:     memset( pad_1, 0x36, 48 );",
          "673:     memset( pad_2, 0x5C, 48 );",
          "676:     md5_update( &md5, pad_1, 48 );",
          "677:     md5_finish( &md5, hash );",
          "679:     md5_starts( &md5 );",
          "681:     md5_update( &md5, pad_2, 48 );",
          "682:     md5_update( &md5, hash,  16 );",
          "683:     md5_finish( &md5, hash );",
          "686:     sha1_update( &sha1, pad_1, 40 );",
          "687:     sha1_finish( &sha1, hash + 16 );",
          "689:     sha1_starts( &sha1 );",
          "691:     sha1_update( &sha1, pad_2, 40 );",
          "692:     sha1_update( &sha1, hash + 16, 20 );",
          "693:     sha1_finish( &sha1, hash + 16 );",
          "",
          "[Removed Lines]",
          "668:     memcpy( &md5 , (md5_context *) ssl->ctx_checksum, sizeof(md5_context) );",
          "669:     memcpy( &sha1, (sha1_context *) ( ssl->ctx_checksum + sizeof(md5_context) ),",
          "670:             sizeof( sha1_context ) );",
          "675:     md5_update( &md5, ssl->session->master, 48 );",
          "680:     md5_update( &md5, ssl->session->master, 48 );",
          "685:     sha1_update( &sha1, ssl->session->master, 48 );",
          "690:     sha1_update( &sha1, ssl->session->master, 48 );",
          "",
          "[Added Lines]",
          "681:     memcpy( &md5 , &ssl->handshake->fin_md5 , sizeof(md5_context)  );",
          "682:     memcpy( &sha1, &ssl->handshake->fin_sha1, sizeof(sha1_context) );",
          "687:     md5_update( &md5, ssl->session_negotiate->master, 48 );",
          "692:     md5_update( &md5, ssl->session_negotiate->master, 48 );",
          "697:     sha1_update( &sha1, ssl->session_negotiate->master, 48 );",
          "702:     sha1_update( &sha1, ssl->session_negotiate->master, 48 );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "706:     SSL_DEBUG_MSG( 2, ( \"=> calc verify tls\" ) );",
          "713:     sha1_finish( &sha1, hash + 16 );",
          "715:     SSL_DEBUG_BUF( 3, \"calculated verify result\", hash, 36 );",
          "",
          "[Removed Lines]",
          "708:     memcpy( &md5 , (md5_context *) ssl->ctx_checksum, sizeof(md5_context) );",
          "709:     memcpy( &sha1, (sha1_context *) ( ssl->ctx_checksum + sizeof(md5_context) ),",
          "710:             sizeof( sha1_context ) );",
          "712:     md5_finish( &md5,  hash );",
          "",
          "[Added Lines]",
          "720:     memcpy( &md5 , &ssl->handshake->fin_md5 , sizeof(md5_context)  );",
          "721:     memcpy( &sha1, &ssl->handshake->fin_sha1, sizeof(sha1_context) );",
          "723:      md5_finish( &md5,  hash );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "725:     SSL_DEBUG_MSG( 2, ( \"=> calc verify sha256\" ) );",
          "728:     sha2_finish( &sha2, hash );",
          "730:     SSL_DEBUG_BUF( 3, \"calculated verify result\", hash, 32 );",
          "",
          "[Removed Lines]",
          "727:     memcpy( &sha2 , (sha2_context *) ssl->ctx_checksum, sizeof(sha2_context) );",
          "",
          "[Added Lines]",
          "738:     memcpy( &sha2, &ssl->handshake->fin_sha2, sizeof(sha2_context) );",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "740:     SSL_DEBUG_MSG( 2, ( \"=> calc verify sha384\" ) );",
          "743:     sha4_finish( &sha4, hash );",
          "745:     SSL_DEBUG_BUF( 3, \"calculated verify result\", hash, 48 );",
          "",
          "[Removed Lines]",
          "742:     memcpy( &sha4 , (sha4_context *) ssl->ctx_checksum, sizeof(sha4_context) );",
          "",
          "[Added Lines]",
          "753:     memcpy( &sha4, &ssl->handshake->fin_sha4, sizeof(sha4_context) );",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "853:     if( ssl->minor_ver == SSL_MINOR_VERSION_0 )",
          "854:     {",
          "857:                           ssl->out_msg, ssl->out_msglen,",
          "858:                           ssl->out_ctr, ssl->out_msgtype );",
          "861:                           ssl->out_msg, ssl->out_msglen,",
          "862:                           ssl->out_ctr, ssl->out_msgtype );",
          "865:                           ssl->out_msg, ssl->out_msglen,",
          "866:                           ssl->out_ctr, ssl->out_msgtype );",
          "868:         {",
          "870:             return( POLARSSL_ERR_SSL_FEATURE_UNAVAILABLE );",
          "871:         }",
          "872:     }",
          "873:     else",
          "874:     {",
          "876:         {",
          "877:             md5_context ctx;",
          "879:             md5_hmac_update( &ctx, ssl->out_ctr, 13 );",
          "880:             md5_hmac_update( &ctx, ssl->out_msg, ssl->out_msglen );",
          "881:             md5_hmac_finish( &ctx, ssl->out_msg + ssl->out_msglen );",
          "882:             memset( &ctx, 0, sizeof(md5_context));",
          "883:         }",
          "885:         {",
          "886:             sha1_context ctx;",
          "888:             sha1_hmac_update( &ctx, ssl->out_ctr, 13 );",
          "889:             sha1_hmac_update( &ctx, ssl->out_msg, ssl->out_msglen );",
          "890:             sha1_hmac_finish( &ctx, ssl->out_msg + ssl->out_msglen );",
          "891:             memset( &ctx, 0, sizeof(sha1_context));",
          "892:         }",
          "894:         {",
          "895:             sha2_context ctx;",
          "897:             sha2_hmac_update( &ctx, ssl->out_ctr, 13 );",
          "898:             sha2_hmac_update( &ctx, ssl->out_msg, ssl->out_msglen );",
          "899:             sha2_hmac_finish( &ctx, ssl->out_msg + ssl->out_msglen );",
          "900:             memset( &ctx, 0, sizeof(sha2_context));",
          "901:         }",
          "903:         {",
          "905:             return( POLARSSL_ERR_SSL_FEATURE_UNAVAILABLE );",
          "906:         }",
          "907:     }",
          "909:     SSL_DEBUG_BUF( 4, \"computed mac\",",
          "915:     {",
          "916:         padlen = 0;",
          "",
          "[Removed Lines]",
          "855:         if( ssl->maclen == 16 )",
          "856:              ssl_mac_md5( ssl->mac_enc,",
          "859:         else if( ssl->maclen == 20 )",
          "860:             ssl_mac_sha1( ssl->mac_enc,",
          "863:         else if( ssl->maclen == 32 )",
          "864:             ssl_mac_sha2( ssl->mac_enc,",
          "867:         else if( ssl->maclen != 0 )",
          "869:             SSL_DEBUG_MSG( 1, ( \"invalid MAC len: %d\", ssl->maclen ) );",
          "875:         if( ssl->maclen == 16 )",
          "878:             md5_hmac_starts( &ctx, ssl->mac_enc, 16 );",
          "884:         else if( ssl->maclen == 20 )",
          "887:             sha1_hmac_starts( &ctx, ssl->mac_enc, 20 );",
          "893:         else if( ssl->maclen == 32 )",
          "896:             sha2_hmac_starts( &ctx, ssl->mac_enc, 32, 0 );",
          "902:         else if( ssl->maclen != 0 )",
          "904:             SSL_DEBUG_MSG( 1, ( \"invalid MAC len: %d\", ssl->maclen ) );",
          "910:                    ssl->out_msg + ssl->out_msglen, ssl->maclen );",
          "912:     ssl->out_msglen += ssl->maclen;",
          "914:     if( ssl->ivlen == 0 )",
          "",
          "[Added Lines]",
          "866:         if( ssl->transform_out->maclen == 16 )",
          "867:              ssl_mac_md5( ssl->transform_out->mac_enc,",
          "870:         else if( ssl->transform_out->maclen == 20 )",
          "871:             ssl_mac_sha1( ssl->transform_out->mac_enc,",
          "874:         else if( ssl->transform_out->maclen == 32 )",
          "875:             ssl_mac_sha2( ssl->transform_out->mac_enc,",
          "878:         else if( ssl->transform_out->maclen != 0 )",
          "880:             SSL_DEBUG_MSG( 1, ( \"invalid MAC len: %d\",",
          "881:                                 ssl->transform_out->maclen ) );",
          "887:         if( ssl->transform_out->maclen == 16 )",
          "890:             md5_hmac_starts( &ctx, ssl->transform_out->mac_enc, 16 );",
          "896:         else if( ssl->transform_out->maclen == 20 )",
          "899:             sha1_hmac_starts( &ctx, ssl->transform_out->mac_enc, 20 );",
          "905:         else if( ssl->transform_out->maclen == 32 )",
          "908:             sha2_hmac_starts( &ctx, ssl->transform_out->mac_enc, 32, 0 );",
          "914:         else if( ssl->transform_out->maclen != 0 )",
          "916:             SSL_DEBUG_MSG( 1, ( \"invalid MAC len: %d\",",
          "917:                                 ssl->transform_out->maclen ) );",
          "923:                    ssl->out_msg + ssl->out_msglen, ssl->transform_out->maclen );",
          "925:     ssl->out_msglen += ssl->transform_out->maclen;",
          "927:     if( ssl->transform_out->ivlen == 0 )",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "923:                        ssl->out_msg, ssl->out_msglen );",
          "925: #if defined(POLARSSL_ARC4_C)",
          "928:         {",
          "930:                         ssl->out_msglen, ssl->out_msg,",
          "931:                         ssl->out_msg );",
          "932:         } else",
          "933: #endif",
          "934: #if defined(POLARSSL_CIPHER_NULL_CIPHER)",
          "938:         {",
          "939:         } else",
          "940: #endif",
          "941:         return( POLARSSL_ERR_SSL_FEATURE_UNAVAILABLE );",
          "942:     }",
          "944:     {",
          "945:         size_t enc_msglen;",
          "946:         unsigned char *enc_msg;",
          "",
          "[Removed Lines]",
          "926:         if( ssl->session->ciphersuite == SSL_RSA_RC4_128_MD5 ||",
          "927:             ssl->session->ciphersuite == SSL_RSA_RC4_128_SHA )",
          "929:             arc4_crypt( (arc4_context *) ssl->ctx_enc,",
          "935:         if( ssl->session->ciphersuite == SSL_RSA_NULL_MD5 ||",
          "936:             ssl->session->ciphersuite == SSL_RSA_NULL_SHA ||",
          "937:             ssl->session->ciphersuite == SSL_RSA_NULL_SHA256 )",
          "943:     else if( ssl->ivlen == 12 )",
          "",
          "[Added Lines]",
          "939:         if( ssl->session_out->ciphersuite == SSL_RSA_RC4_128_MD5 ||",
          "940:             ssl->session_out->ciphersuite == SSL_RSA_RC4_128_SHA )",
          "942:             arc4_crypt( (arc4_context *) ssl->transform_out->ctx_enc,",
          "948:         if( ssl->session_out->ciphersuite == SSL_RSA_NULL_MD5 ||",
          "949:             ssl->session_out->ciphersuite == SSL_RSA_NULL_SHA ||",
          "950:             ssl->session_out->ciphersuite == SSL_RSA_NULL_SHA256 )",
          "956:     else if( ssl->transform_out->ivlen == 12 )",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "963: #if defined(POLARSSL_AES_C) && defined(POLARSSL_GCM_C)",
          "969:         {",
          "975:             if( ret != 0 )",
          "976:                 return( ret );",
          "982:                      ssl->out_msg, ssl->out_msglen );",
          "990:             enc_msglen = ssl->out_msglen;",
          "993:             SSL_DEBUG_MSG( 3, ( \"before encrypt: msglen = %d, \"",
          "994:                                 \"including %d bytes of padding\",",
          "",
          "[Removed Lines]",
          "965:         if( ssl->session->ciphersuite == SSL_RSA_AES_128_GCM_SHA256 ||",
          "966:             ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_GCM_SHA256 ||",
          "967:             ssl->session->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "968:             ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "973:             ret = ssl->f_rng( ssl->p_rng, ssl->iv_enc + ssl->fixed_ivlen,",
          "974:                                   ssl->ivlen - ssl->fixed_ivlen );",
          "981:             memmove( ssl->out_msg + ssl->ivlen - ssl->fixed_ivlen,",
          "983:             memcpy( ssl->out_msg, ssl->iv_enc + ssl->fixed_ivlen,",
          "984:                     ssl->ivlen - ssl->fixed_ivlen );",
          "989:             enc_msg = ssl->out_msg + ssl->ivlen - ssl->fixed_ivlen;",
          "991:             ssl->out_msglen += ssl->ivlen - ssl->fixed_ivlen;",
          "",
          "[Added Lines]",
          "978:         if( ssl->session_out->ciphersuite == SSL_RSA_AES_128_GCM_SHA256 ||",
          "979:             ssl->session_out->ciphersuite == SSL_EDH_RSA_AES_128_GCM_SHA256 ||",
          "980:             ssl->session_out->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "981:             ssl->session_out->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "986:             ret = ssl->f_rng( ssl->p_rng,",
          "987:                         ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,",
          "988:                         ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );",
          "995:             memmove( ssl->out_msg + ssl->transform_out->ivlen -",
          "996:                      ssl->transform_out->fixed_ivlen,",
          "998:             memcpy( ssl->out_msg,",
          "999:                     ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,",
          "1000:                     ssl->transform_out->ivlen  - ssl->transform_out->fixed_ivlen );",
          "1005:             enc_msg = ssl->out_msg + ssl->transform_out->ivlen -",
          "1006:                       ssl->transform_out->fixed_ivlen;",
          "1008:             ssl->out_msglen += ssl->transform_out->ivlen -",
          "1009:                                ssl->transform_out->fixed_ivlen;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1003:             ssl->out_msglen += 16;",
          "1006:                     GCM_ENCRYPT, enc_msglen,",
          "1008:                     add_data, 13,",
          "1009:                     enc_msg, enc_msg,",
          "1010:                     16, enc_msg + enc_msglen );",
          "",
          "[Removed Lines]",
          "1005:             gcm_crypt_and_tag( (gcm_context *) ssl->ctx_enc,",
          "1007:                     ssl->iv_enc, ssl->ivlen,",
          "",
          "[Added Lines]",
          "1023:             gcm_crypt_and_tag( (gcm_context *) ssl->transform_out->ctx_enc,",
          "1025:                     ssl->transform_out->iv_enc, ssl->transform_out->ivlen,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1021:         unsigned char *enc_msg;",
          "1022:         size_t enc_msglen;",
          "1026:             padlen = 0;",
          "1028:         for( i = 0; i <= padlen; i++ )",
          "",
          "[Removed Lines]",
          "1024:         padlen = ssl->ivlen - ( ssl->out_msglen + 1 ) % ssl->ivlen;",
          "1025:         if( padlen == ssl->ivlen )",
          "",
          "[Added Lines]",
          "1042:         padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %",
          "1043:                  ssl->transform_out->ivlen;",
          "1044:         if( padlen == ssl->transform_out->ivlen )",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1046:             if( ret != 0 )",
          "1047:                 return( ret );",
          "1059:             enc_msglen = ssl->out_msglen;",
          "1061:         }",
          "1063:         SSL_DEBUG_MSG( 3, ( \"before encrypt: msglen = %d, \"",
          "1064:                             \"including %d bytes of IV and %d bytes of padding\",",
          "1067:         SSL_DEBUG_BUF( 4, \"before encrypt: output payload\",",
          "1068:                        ssl->out_msg, ssl->out_msglen );",
          "1071:         {",
          "1072: #if defined(POLARSSL_DES_C)",
          "1073:             case  8:",
          "1074: #if defined(POLARSSL_ENABLE_WEAK_CIPHERSUITES)",
          "1077:                 {",
          "1079:                                    DES_ENCRYPT, enc_msglen,",
          "1081:                 }",
          "1082:                 else",
          "1083: #endif",
          "1087:                 break;",
          "1088: #endif",
          "1090:             case 16:",
          "1091: #if defined(POLARSSL_AES_C)",
          "1102:                         AES_ENCRYPT, enc_msglen,",
          "1104:                     break;",
          "1105:         }",
          "1106: #endif",
          "1108: #if defined(POLARSSL_CAMELLIA_C)",
          "1119:                         CAMELLIA_ENCRYPT, enc_msglen,",
          "1121:                     break;",
          "1122:         }",
          "1123: #endif",
          "",
          "[Removed Lines]",
          "1045:             int ret = ssl->f_rng( ssl->p_rng, ssl->iv_enc, ssl->ivlen );",
          "1052:             memmove( ssl->out_msg + ssl->ivlen, ssl->out_msg, ssl->out_msglen );",
          "1053:             memcpy( ssl->out_msg, ssl->iv_enc, ssl->ivlen );",
          "1058:             enc_msg = ssl->out_msg + ssl->ivlen;",
          "1060:             ssl->out_msglen += ssl->ivlen;",
          "1065:                        ssl->out_msglen, ssl->ivlen, padlen + 1 ) );",
          "1070:         switch( ssl->ivlen )",
          "1075:                 if( ssl->session->ciphersuite == SSL_RSA_DES_SHA ||",
          "1076:                     ssl->session->ciphersuite == SSL_EDH_RSA_DES_SHA )",
          "1078:                     des_crypt_cbc( (des_context *) ssl->ctx_enc,",
          "1080:                                    ssl->iv_enc, enc_msg, enc_msg );",
          "1084:                         des3_crypt_cbc( (des3_context *) ssl->ctx_enc,",
          "1085:                         DES_ENCRYPT, enc_msglen,",
          "1086:                         ssl->iv_enc, enc_msg, enc_msg );",
          "1092:         if ( ssl->session->ciphersuite == SSL_RSA_AES_128_SHA ||",
          "1093:              ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_SHA ||",
          "1094:              ssl->session->ciphersuite == SSL_RSA_AES_256_SHA ||",
          "1095:              ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_SHA ||",
          "1096:              ssl->session->ciphersuite == SSL_RSA_AES_128_SHA256 ||",
          "1097:              ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_SHA256 ||",
          "1098:              ssl->session->ciphersuite == SSL_RSA_AES_256_SHA256 ||",
          "1099:              ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_SHA256 )",
          "1100:         {",
          "1101:                     aes_crypt_cbc( (aes_context *) ssl->ctx_enc,",
          "1103:                         ssl->iv_enc, enc_msg, enc_msg);",
          "1109:         if ( ssl->session->ciphersuite == SSL_RSA_CAMELLIA_128_SHA ||",
          "1110:              ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA ||",
          "1111:              ssl->session->ciphersuite == SSL_RSA_CAMELLIA_256_SHA ||",
          "1112:              ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA ||",
          "1113:              ssl->session->ciphersuite == SSL_RSA_CAMELLIA_128_SHA256 ||",
          "1114:              ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA256 ||",
          "1115:              ssl->session->ciphersuite == SSL_RSA_CAMELLIA_256_SHA256 ||",
          "1116:              ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA256 )",
          "1117:         {",
          "1118:                     camellia_crypt_cbc( (camellia_context *) ssl->ctx_enc,",
          "1120:                         ssl->iv_enc, enc_msg, enc_msg );",
          "",
          "[Added Lines]",
          "1064:             int ret = ssl->f_rng( ssl->p_rng, ssl->transform_out->iv_enc,",
          "1065:                                   ssl->transform_out->ivlen );",
          "1072:             memmove( ssl->out_msg + ssl->transform_out->ivlen, ssl->out_msg,",
          "1073:                      ssl->out_msglen );",
          "1074:             memcpy( ssl->out_msg, ssl->transform_out->iv_enc,",
          "1075:                     ssl->transform_out->ivlen );",
          "1080:             enc_msg = ssl->out_msg + ssl->transform_out->ivlen;",
          "1082:             ssl->out_msglen += ssl->transform_out->ivlen;",
          "1087:                        ssl->out_msglen, ssl->transform_out->ivlen, padlen + 1 ) );",
          "1092:         switch( ssl->transform_out->ivlen )",
          "1097:                 if( ssl->session_out->ciphersuite == SSL_RSA_DES_SHA ||",
          "1098:                     ssl->session_out->ciphersuite == SSL_EDH_RSA_DES_SHA )",
          "1100:                     des_crypt_cbc( (des_context *) ssl->transform_out->ctx_enc,",
          "1102:                                    ssl->transform_out->iv_enc, enc_msg, enc_msg );",
          "1106:                     des3_crypt_cbc( (des3_context *) ssl->transform_out->ctx_enc,",
          "1107:                                     DES_ENCRYPT, enc_msglen,",
          "1108:                                     ssl->transform_out->iv_enc, enc_msg, enc_msg );",
          "1114:         if ( ssl->session_out->ciphersuite == SSL_RSA_AES_128_SHA ||",
          "1115:              ssl->session_out->ciphersuite == SSL_EDH_RSA_AES_128_SHA ||",
          "1116:              ssl->session_out->ciphersuite == SSL_RSA_AES_256_SHA ||",
          "1117:              ssl->session_out->ciphersuite == SSL_EDH_RSA_AES_256_SHA ||",
          "1118:              ssl->session_out->ciphersuite == SSL_RSA_AES_128_SHA256 ||",
          "1119:              ssl->session_out->ciphersuite == SSL_EDH_RSA_AES_128_SHA256 ||",
          "1120:              ssl->session_out->ciphersuite == SSL_RSA_AES_256_SHA256 ||",
          "1121:              ssl->session_out->ciphersuite == SSL_EDH_RSA_AES_256_SHA256 )",
          "1122:         {",
          "1123:                     aes_crypt_cbc( (aes_context *) ssl->transform_out->ctx_enc,",
          "1125:                         ssl->transform_out->iv_enc, enc_msg, enc_msg);",
          "1131:         if ( ssl->session_out->ciphersuite == SSL_RSA_CAMELLIA_128_SHA ||",
          "1132:              ssl->session_out->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA ||",
          "1133:              ssl->session_out->ciphersuite == SSL_RSA_CAMELLIA_256_SHA ||",
          "1134:              ssl->session_out->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA ||",
          "1135:              ssl->session_out->ciphersuite == SSL_RSA_CAMELLIA_128_SHA256 ||",
          "1136:              ssl->session_out->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA256 ||",
          "1137:              ssl->session_out->ciphersuite == SSL_RSA_CAMELLIA_256_SHA256 ||",
          "1138:              ssl->session_out->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA256 )",
          "1139:         {",
          "1140:                     camellia_crypt_cbc( (camellia_context *) ssl->transform_out->ctx_enc,",
          "1142:                         ssl->transform_out->iv_enc, enc_msg, enc_msg );",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1149:     SSL_DEBUG_MSG( 2, ( \"=> decrypt buf\" ) );",
          "1152:     {",
          "1153:         SSL_DEBUG_MSG( 1, ( \"in_msglen (%d) < minlen (%d)\",",
          "1155:         return( POLARSSL_ERR_SSL_INVALID_MAC );",
          "1156:     }",
          "1159:     {",
          "1160: #if defined(POLARSSL_ARC4_C)",
          "1161:         padlen = 0;",
          "1164:         {",
          "1166:                     ssl->in_msglen, ssl->in_msg,",
          "1167:                     ssl->in_msg );",
          "1168:         } else",
          "1169: #endif",
          "1170: #if defined(POLARSSL_CIPHER_NULL_CIPHER)",
          "1174:         {",
          "1175:         } else",
          "1176: #endif",
          "1177:         return( POLARSSL_ERR_SSL_FEATURE_UNAVAILABLE );",
          "1178:     }",
          "1180:     {",
          "1181:         unsigned char *dec_msg;",
          "1182:         unsigned char *dec_msg_result;",
          "",
          "[Removed Lines]",
          "1151:     if( ssl->in_msglen < ssl->minlen )",
          "1154:                        ssl->in_msglen, ssl->minlen ) );",
          "1158:     if( ssl->ivlen == 0 )",
          "1162:         if( ssl->session->ciphersuite == SSL_RSA_RC4_128_MD5 ||",
          "1163:             ssl->session->ciphersuite == SSL_RSA_RC4_128_SHA )",
          "1165:             arc4_crypt( (arc4_context *) ssl->ctx_dec,",
          "1171:         if( ssl->session->ciphersuite == SSL_RSA_NULL_MD5 ||",
          "1172:             ssl->session->ciphersuite == SSL_RSA_NULL_SHA ||",
          "1173:             ssl->session->ciphersuite == SSL_RSA_NULL_SHA256 )",
          "1179:     else if( ssl->ivlen == 12 )",
          "",
          "[Added Lines]",
          "1173:     if( ssl->in_msglen < ssl->transform_in->minlen )",
          "1176:                        ssl->in_msglen, ssl->transform_in->minlen ) );",
          "1180:     if( ssl->transform_in->ivlen == 0 )",
          "1184:         if( ssl->session_in->ciphersuite == SSL_RSA_RC4_128_MD5 ||",
          "1185:             ssl->session_in->ciphersuite == SSL_RSA_RC4_128_SHA )",
          "1187:             arc4_crypt( (arc4_context *) ssl->transform_in->ctx_dec,",
          "1193:         if( ssl->session_in->ciphersuite == SSL_RSA_NULL_MD5 ||",
          "1194:             ssl->session_in->ciphersuite == SSL_RSA_NULL_SHA ||",
          "1195:             ssl->session_in->ciphersuite == SSL_RSA_NULL_SHA256 )",
          "1201:     else if( ssl->transform_in->ivlen == 12 )",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1187:         padlen = 0;",
          "1189: #if defined(POLARSSL_AES_C) && defined(POLARSSL_GCM_C)",
          "1194:         {",
          "1196:             dec_msglen -= 16;",
          "1198:             dec_msg_result = ssl->in_msg;",
          "1199:             ssl->in_msglen = dec_msglen;",
          "",
          "[Removed Lines]",
          "1190:         if( ssl->session->ciphersuite == SSL_RSA_AES_128_GCM_SHA256 ||",
          "1191:             ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_GCM_SHA256 ||",
          "1192:             ssl->session->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "1193:             ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "1195:             dec_msglen = ssl->in_msglen - ( ssl->ivlen - ssl->fixed_ivlen );",
          "1197:             dec_msg = ssl->in_msg + ( ssl->ivlen - ssl->fixed_ivlen );",
          "",
          "[Added Lines]",
          "1212:         if( ssl->session_in->ciphersuite == SSL_RSA_AES_128_GCM_SHA256 ||",
          "1213:             ssl->session_in->ciphersuite == SSL_EDH_RSA_AES_128_GCM_SHA256 ||",
          "1214:             ssl->session_in->ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "1215:             ssl->session_in->ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "1217:             dec_msglen = ssl->in_msglen - ( ssl->transform_in->ivlen -",
          "1218:                                             ssl->transform_in->fixed_ivlen );",
          "1220:             dec_msg = ssl->in_msg + ( ssl->transform_in->ivlen -",
          "1221:                                       ssl->transform_in->fixed_ivlen );",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1208:             SSL_DEBUG_BUF( 4, \"additional data used for AEAD\",",
          "1209:                            add_data, 13 );",
          "1215:             SSL_DEBUG_BUF( 4, \"TAG used\", dec_msg + dec_msglen, 16 );",
          "1221:                                      dec_msglen,",
          "1223:                                      add_data, 13,",
          "1224:                                      dec_msg + dec_msglen, 16,",
          "1225:                                      dec_msg, dec_msg_result );",
          "",
          "[Removed Lines]",
          "1211:             memcpy( ssl->iv_dec + ssl->fixed_ivlen, ssl->in_msg,",
          "1212:                     ssl->ivlen - ssl->fixed_ivlen );",
          "1214:             SSL_DEBUG_BUF( 4, \"IV used\", ssl->iv_dec, ssl->ivlen );",
          "1217:             memcpy( ssl->iv_dec + ssl->fixed_ivlen, ssl->in_msg,",
          "1218:                     ssl->ivlen - ssl->fixed_ivlen );",
          "1220:             ret = gcm_auth_decrypt( (gcm_context *) ssl->ctx_dec,",
          "1222:                                      ssl->iv_dec, ssl->ivlen,",
          "",
          "[Added Lines]",
          "1235:             memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,",
          "1236:                     ssl->in_msg,",
          "1237:                     ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );",
          "1239:             SSL_DEBUG_BUF( 4, \"IV used\", ssl->transform_in->iv_dec,",
          "1240:                                          ssl->transform_in->ivlen );",
          "1243:             memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,",
          "1244:                     ssl->in_msg,",
          "1245:                     ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );",
          "1247:             ret = gcm_auth_decrypt( (gcm_context *) ssl->transform_in->ctx_dec,",
          "1249:                                      ssl->transform_in->iv_dec,",
          "1250:                                      ssl->transform_in->ivlen,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1248:         {",
          "1249:             SSL_DEBUG_MSG( 1, ( \"msglen (%d) %% ivlen (%d) != 0\",",
          "1251:             return( POLARSSL_ERR_SSL_INVALID_MAC );",
          "1252:         }",
          "",
          "[Removed Lines]",
          "1247:         if( ssl->in_msglen % ssl->ivlen != 0 )",
          "1250:                            ssl->in_msglen, ssl->ivlen ) );",
          "",
          "[Added Lines]",
          "1275:         if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )",
          "1278:                            ssl->in_msglen, ssl->transform_in->ivlen ) );",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1261:         if( ssl->minor_ver >= SSL_MINOR_VERSION_2 )",
          "1262:         {",
          "1269:         }",
          "1272:         {",
          "1273: #if defined(POLARSSL_DES_C)",
          "1274:             case  8:",
          "1275: #if defined(POLARSSL_ENABLE_WEAK_CIPHERSUITES)",
          "1278:                 {",
          "1280:                                    DES_DECRYPT, dec_msglen,",
          "1282:                 }",
          "1283:                 else",
          "1284: #endif",
          "1286:                         DES_DECRYPT, dec_msglen,",
          "1288:                 break;",
          "1289: #endif",
          "1291:             case 16:",
          "1292: #if defined(POLARSSL_AES_C)",
          "1303:                        AES_DECRYPT, dec_msglen,",
          "1305:                     break;",
          "1306:         }",
          "1307: #endif",
          "1309: #if defined(POLARSSL_CAMELLIA_C)",
          "1320:                        CAMELLIA_DECRYPT, dec_msglen,",
          "1322:                     break;",
          "1323:         }",
          "1324: #endif",
          "",
          "[Removed Lines]",
          "1263:             dec_msg += ssl->ivlen;",
          "1264:             dec_msglen -= ssl->ivlen;",
          "1265:             ssl->in_msglen -= ssl->ivlen;",
          "1267:             for( i = 0; i < ssl->ivlen; i++ )",
          "1268:                 ssl->iv_dec[i] = ssl->in_msg[i];",
          "1271:         switch( ssl->ivlen )",
          "1276:                 if( ssl->session->ciphersuite == SSL_RSA_DES_SHA ||",
          "1277:                     ssl->session->ciphersuite == SSL_EDH_RSA_DES_SHA )",
          "1279:                     des_crypt_cbc( (des_context *) ssl->ctx_dec,",
          "1281:                                    ssl->iv_dec, dec_msg, dec_msg_result );",
          "1285:                     des3_crypt_cbc( (des3_context *) ssl->ctx_dec,",
          "1287:                         ssl->iv_dec, dec_msg, dec_msg_result );",
          "1293:         if ( ssl->session->ciphersuite == SSL_RSA_AES_128_SHA ||",
          "1294:              ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_SHA ||",
          "1295:              ssl->session->ciphersuite == SSL_RSA_AES_256_SHA ||",
          "1296:              ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_SHA ||",
          "1297:              ssl->session->ciphersuite == SSL_RSA_AES_128_SHA256 ||",
          "1298:              ssl->session->ciphersuite == SSL_EDH_RSA_AES_128_SHA256 ||",
          "1299:              ssl->session->ciphersuite == SSL_RSA_AES_256_SHA256 ||",
          "1300:              ssl->session->ciphersuite == SSL_EDH_RSA_AES_256_SHA256 )",
          "1301:         {",
          "1302:                     aes_crypt_cbc( (aes_context *) ssl->ctx_dec,",
          "1304:                        ssl->iv_dec, dec_msg, dec_msg_result );",
          "1310:         if ( ssl->session->ciphersuite == SSL_RSA_CAMELLIA_128_SHA ||",
          "1311:              ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA ||",
          "1312:              ssl->session->ciphersuite == SSL_RSA_CAMELLIA_256_SHA ||",
          "1313:              ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA ||",
          "1314:              ssl->session->ciphersuite == SSL_RSA_CAMELLIA_128_SHA256 ||",
          "1315:              ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA256 ||",
          "1316:              ssl->session->ciphersuite == SSL_RSA_CAMELLIA_256_SHA256 ||",
          "1317:              ssl->session->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA256 )",
          "1318:         {",
          "1319:                     camellia_crypt_cbc( (camellia_context *) ssl->ctx_dec,",
          "1321:                        ssl->iv_dec, dec_msg, dec_msg_result );",
          "",
          "[Added Lines]",
          "1291:             dec_msg += ssl->transform_in->ivlen;",
          "1292:             dec_msglen -= ssl->transform_in->ivlen;",
          "1293:             ssl->in_msglen -= ssl->transform_in->ivlen;",
          "1295:             for( i = 0; i < ssl->transform_in->ivlen; i++ )",
          "1296:                 ssl->transform_in->iv_dec[i] = ssl->in_msg[i];",
          "1299:         switch( ssl->transform_in->ivlen )",
          "1304:                 if( ssl->session_in->ciphersuite == SSL_RSA_DES_SHA ||",
          "1305:                     ssl->session_in->ciphersuite == SSL_EDH_RSA_DES_SHA )",
          "1307:                     des_crypt_cbc( (des_context *) ssl->transform_in->ctx_dec,",
          "1309:                                    ssl->transform_in->iv_dec, dec_msg, dec_msg_result );",
          "1313:                     des3_crypt_cbc( (des3_context *) ssl->transform_in->ctx_dec,",
          "1315:                         ssl->transform_in->iv_dec, dec_msg, dec_msg_result );",
          "1321:         if ( ssl->session_in->ciphersuite == SSL_RSA_AES_128_SHA ||",
          "1322:              ssl->session_in->ciphersuite == SSL_EDH_RSA_AES_128_SHA ||",
          "1323:              ssl->session_in->ciphersuite == SSL_RSA_AES_256_SHA ||",
          "1324:              ssl->session_in->ciphersuite == SSL_EDH_RSA_AES_256_SHA ||",
          "1325:              ssl->session_in->ciphersuite == SSL_RSA_AES_128_SHA256 ||",
          "1326:              ssl->session_in->ciphersuite == SSL_EDH_RSA_AES_128_SHA256 ||",
          "1327:              ssl->session_in->ciphersuite == SSL_RSA_AES_256_SHA256 ||",
          "1328:              ssl->session_in->ciphersuite == SSL_EDH_RSA_AES_256_SHA256 )",
          "1329:         {",
          "1330:                     aes_crypt_cbc( (aes_context *) ssl->transform_in->ctx_dec,",
          "1332:                        ssl->transform_in->iv_dec, dec_msg, dec_msg_result );",
          "1338:         if ( ssl->session_in->ciphersuite == SSL_RSA_CAMELLIA_128_SHA ||",
          "1339:              ssl->session_in->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA ||",
          "1340:              ssl->session_in->ciphersuite == SSL_RSA_CAMELLIA_256_SHA ||",
          "1341:              ssl->session_in->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA ||",
          "1342:              ssl->session_in->ciphersuite == SSL_RSA_CAMELLIA_128_SHA256 ||",
          "1343:              ssl->session_in->ciphersuite == SSL_EDH_RSA_CAMELLIA_128_SHA256 ||",
          "1344:              ssl->session_in->ciphersuite == SSL_RSA_CAMELLIA_256_SHA256 ||",
          "1345:              ssl->session_in->ciphersuite == SSL_EDH_RSA_CAMELLIA_256_SHA256 )",
          "1346:         {",
          "1347:                     camellia_crypt_cbc( (camellia_context *) ssl->transform_in->ctx_dec,",
          "1349:                        ssl->transform_in->iv_dec, dec_msg, dec_msg_result );",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1332:         if( ssl->minor_ver == SSL_MINOR_VERSION_0 )",
          "1333:         {",
          "1335:             {",
          "1336:                 SSL_DEBUG_MSG( 1, ( \"bad padding length: is %d, \"",
          "1337:                                     \"should be no more than %d\",",
          "1339:                 padlen = 0;",
          "1340:             }",
          "1341:         }",
          "",
          "[Removed Lines]",
          "1334:             if( padlen > ssl->ivlen )",
          "1338:                                padlen, ssl->ivlen ) );",
          "",
          "[Added Lines]",
          "1362:             if( padlen > ssl->transform_in->ivlen )",
          "1366:                                padlen, ssl->transform_in->ivlen ) );",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1367:     {",
          "1368:         SSL_DEBUG_MSG( 1, ( \"msglen (%d) < maclen (%d) + padlen (%d)\",",
          "1370:         return( POLARSSL_ERR_SSL_INVALID_MAC );",
          "1371:     }",
          "1375:     ssl->in_hdr[3] = (unsigned char)( ssl->in_msglen >> 8 );",
          "1376:     ssl->in_hdr[4] = (unsigned char)( ssl->in_msglen      );",
          "",
          "[Removed Lines]",
          "1366:     if( ssl->in_msglen < ssl->maclen + padlen )",
          "1369:                     ssl->in_msglen, ssl->maclen, padlen ) );",
          "1373:     ssl->in_msglen -= ( ssl->maclen + padlen );",
          "",
          "[Added Lines]",
          "1394:     if( ssl->in_msglen < ssl->transform_in->maclen + padlen )",
          "1397:                     ssl->in_msglen, ssl->transform_in->maclen, padlen ) );",
          "1401:     ssl->in_msglen -= ( ssl->transform_in->maclen + padlen );",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1380:     if( ssl->minor_ver == SSL_MINOR_VERSION_0 )",
          "1381:     {",
          "1384:                           ssl->in_msg, ssl->in_msglen,",
          "1385:                           ssl->in_ctr, ssl->in_msgtype );",
          "1388:                           ssl->in_msg, ssl->in_msglen,",
          "1389:                           ssl->in_ctr, ssl->in_msgtype );",
          "1390:     }",
          "1391:     else",
          "1392:     {",
          "1395:                        ssl->in_ctr,  ssl->in_msglen + 13,",
          "1396:                        ssl->in_msg + ssl->in_msglen );",
          "1399:                        ssl->in_ctr,  ssl->in_msglen + 13,",
          "1400:                        ssl->in_msg + ssl->in_msglen );",
          "1403:                        ssl->in_ctr,  ssl->in_msglen + 13,",
          "1404:                        ssl->in_msg + ssl->in_msglen, 0 );",
          "1405:     }",
          "1408:     SSL_DEBUG_BUF( 4, \"computed mac\", ssl->in_msg + ssl->in_msglen,",
          "1411:     if( memcmp( tmp, ssl->in_msg + ssl->in_msglen,",
          "1413:     {",
          "1414:         SSL_DEBUG_MSG( 1, ( \"message mac does not match\" ) );",
          "1415:         return( POLARSSL_ERR_SSL_INVALID_MAC );",
          "",
          "[Removed Lines]",
          "1382:         if( ssl->maclen == 16 )",
          "1383:              ssl_mac_md5( ssl->mac_dec,",
          "1386:         else if( ssl->maclen == 20 )",
          "1387:             ssl_mac_sha1( ssl->mac_dec,",
          "1393:         if( ssl->maclen == 16 )",
          "1394:              md5_hmac( ssl->mac_dec, 16,",
          "1397:         else if( ssl->maclen == 20 )",
          "1398:             sha1_hmac( ssl->mac_dec, 20,",
          "1401:         else if( ssl->maclen == 32 )",
          "1402:             sha2_hmac( ssl->mac_dec, 32,",
          "1407:     SSL_DEBUG_BUF( 4, \"message  mac\", tmp, ssl->maclen );",
          "1409:                    ssl->maclen );",
          "1412:                      ssl->maclen ) != 0 )",
          "",
          "[Added Lines]",
          "1410:         if( ssl->transform_in->maclen == 16 )",
          "1411:              ssl_mac_md5( ssl->transform_in->mac_dec,",
          "1414:         else if( ssl->transform_in->maclen == 20 )",
          "1415:             ssl_mac_sha1( ssl->transform_in->mac_dec,",
          "1418:         else if( ssl->transform_in->maclen == 32 )",
          "1419:             ssl_mac_sha2( ssl->transform_in->mac_dec,",
          "1420:                           ssl->in_msg, ssl->in_msglen,",
          "1421:                           ssl->in_ctr, ssl->in_msgtype );",
          "1422:         else if( ssl->transform_in->maclen != 0 )",
          "1423:         {",
          "1424:             SSL_DEBUG_MSG( 1, ( \"invalid MAC len: %d\",",
          "1425:                                 ssl->transform_in->maclen ) );",
          "1426:             return( POLARSSL_ERR_SSL_FEATURE_UNAVAILABLE );",
          "1427:         }",
          "1431:         if( ssl->transform_in->maclen == 16 )",
          "1432:              md5_hmac( ssl->transform_in->mac_dec, 16,",
          "1435:         else if( ssl->transform_in->maclen == 20 )",
          "1436:             sha1_hmac( ssl->transform_in->mac_dec, 20,",
          "1439:         else if( ssl->transform_in->maclen == 32 )",
          "1440:             sha2_hmac( ssl->transform_in->mac_dec, 32,",
          "1443:         else if( ssl->transform_in->maclen != 0 )",
          "1444:         {",
          "1445:             SSL_DEBUG_MSG( 1, ( \"invalid MAC len: %d\",",
          "1446:                                 ssl->transform_in->maclen ) );",
          "1447:             return( POLARSSL_ERR_SSL_FEATURE_UNAVAILABLE );",
          "1448:         }",
          "1451:     SSL_DEBUG_BUF( 4, \"message  mac\", tmp, ssl->transform_in->maclen );",
          "1453:                    ssl->transform_in->maclen );",
          "1456:                      ssl->transform_in->maclen ) != 0 )",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1423:         return( POLARSSL_ERR_SSL_INVALID_MAC );",
          "1425:     if( ssl->in_msglen == 0 )",
          "",
          "[Removed Lines]",
          "1422:     if( ssl->ivlen != 0 && ssl->ivlen != 12 && padlen == 0 )",
          "",
          "[Added Lines]",
          "1466:     if( ssl->transform_in->ivlen != 0 && ssl->transform_in->ivlen != 12 &&",
          "1467:         padlen == 0 )",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1477:     SSL_DEBUG_BUF( 4, \"before compression: output payload\",",
          "1478:                    ssl->out_msg, ssl->out_msglen );",
          "1486:     if( ret != Z_OK )",
          "1487:     {",
          "1488:         SSL_DEBUG_MSG( 1, ( \"failed to perform compression (%d)\", ret ) );",
          "1489:         return( POLARSSL_ERR_SSL_COMPRESSION_FAILED );",
          "1490:     }",
          "1494:     free( msg_pre );",
          "",
          "[Removed Lines]",
          "1480:     ssl->ctx_deflate.next_in = msg_pre;",
          "1481:     ssl->ctx_deflate.avail_in = len_pre;",
          "1482:     ssl->ctx_deflate.next_out = msg_post;",
          "1483:     ssl->ctx_deflate.avail_out = SSL_BUFFER_LEN;",
          "1485:     ret = deflate( &ssl->ctx_deflate, Z_SYNC_FLUSH );",
          "1492:     ssl->out_msglen = SSL_BUFFER_LEN - ssl->ctx_deflate.avail_out;",
          "",
          "[Added Lines]",
          "1525:     ssl->transform_out->ctx_deflate.next_in = msg_pre;",
          "1526:     ssl->transform_out->ctx_deflate.avail_in = len_pre;",
          "1527:     ssl->transform_out->ctx_deflate.next_out = msg_post;",
          "1528:     ssl->transform_out->ctx_deflate.avail_out = SSL_BUFFER_LEN;",
          "1530:     ret = deflate( &ssl->transform_out->ctx_deflate, Z_SYNC_FLUSH );",
          "1537:     ssl->out_msglen = SSL_BUFFER_LEN - ssl->transform_out->ctx_deflate.avail_out;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1528:     SSL_DEBUG_BUF( 4, \"before decompression: input payload\",",
          "1529:                    ssl->in_msg, ssl->in_msglen );",
          "1537:     if( ret != Z_OK )",
          "1538:     {",
          "1539:         SSL_DEBUG_MSG( 1, ( \"failed to perform decompression (%d)\", ret ) );",
          "1540:         return( POLARSSL_ERR_SSL_COMPRESSION_FAILED );",
          "1541:     }",
          "1545:     free( msg_pre );",
          "",
          "[Removed Lines]",
          "1531:     ssl->ctx_inflate.next_in = msg_pre;",
          "1532:     ssl->ctx_inflate.avail_in = len_pre;",
          "1533:     ssl->ctx_inflate.next_out = msg_post;",
          "1534:     ssl->ctx_inflate.avail_out = SSL_MAX_CONTENT_LEN;",
          "1536:     ret = inflate( &ssl->ctx_inflate, Z_SYNC_FLUSH );",
          "1543:     ssl->in_msglen = SSL_MAX_CONTENT_LEN - ssl->ctx_inflate.avail_out;",
          "",
          "[Added Lines]",
          "1576:     ssl->transform_in->ctx_inflate.next_in = msg_pre;",
          "1577:     ssl->transform_in->ctx_inflate.avail_in = len_pre;",
          "1578:     ssl->transform_in->ctx_inflate.next_out = msg_post;",
          "1579:     ssl->transform_in->ctx_inflate.avail_out = SSL_MAX_CONTENT_LEN;",
          "1581:     ret = inflate( &ssl->transform_in->ctx_inflate, Z_SYNC_FLUSH );",
          "1588:     ssl->in_msglen = SSL_MAX_CONTENT_LEN - ssl->transform_in->ctx_inflate.avail_out;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1651:         ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );",
          "1652:         ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );",
          "1655:     }",
          "1657: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "1660:     {",
          "1661:         if( ( ret = ssl_compress_buf( ssl ) ) != 0 )",
          "1662:         {",
          "",
          "[Removed Lines]",
          "1654:         ssl->update_checksum( ssl, ssl->out_msg, len );",
          "1658:     if( ssl->do_crypt != 0 &&",
          "1659:         ssl->session->compression == SSL_COMPRESS_DEFLATE )",
          "",
          "[Added Lines]",
          "1699:         ssl->handshake->update_checksum( ssl, ssl->out_msg, len );",
          "1703:     if( ssl->transform_out != NULL &&",
          "1704:         ssl->session_out->compression == SSL_COMPRESS_DEFLATE )",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1690:         ssl->out_hdr[3] = (unsigned char)( len >> 8 );",
          "1691:         ssl->out_hdr[4] = (unsigned char)( len      );",
          "1694:         {",
          "1695:             if( ( ret = ssl_encrypt_buf( ssl ) ) != 0 )",
          "1696:             {",
          "",
          "[Removed Lines]",
          "1693:         if( ssl->do_crypt != 0 )",
          "",
          "[Added Lines]",
          "1738:         if( ssl->transform_out != NULL )",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1742:         ssl->in_msglen -= ssl->in_hslen;",
          "1744:         memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,",
          "1747:         ssl->in_hslen  = 4;",
          "1748:         ssl->in_hslen += ( ssl->in_msg[2] << 8 ) | ssl->in_msg[3];",
          "",
          "[Removed Lines]",
          "1745:                 ssl->in_msglen );",
          "",
          "[Added Lines]",
          "1790:                  ssl->in_msglen );",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1763:             return( POLARSSL_ERR_SSL_INVALID_RECORD );",
          "1764:         }",
          "1768:         return( 0 );",
          "1769:     }",
          "",
          "[Removed Lines]",
          "1766:         ssl->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );",
          "",
          "[Added Lines]",
          "1811:         ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1806:     {",
          "1807:         if( ssl->in_msglen < 1 ||",
          "1808:             ssl->in_msglen > SSL_MAX_CONTENT_LEN )",
          "",
          "[Removed Lines]",
          "1805:     if( ssl->do_crypt == 0 )",
          "",
          "[Added Lines]",
          "1850:     if( ssl->transform_in == NULL )",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1813:     }",
          "1814:     else",
          "1815:     {",
          "1817:         {",
          "1818:             SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );",
          "1819:             return( POLARSSL_ERR_SSL_INVALID_RECORD );",
          "1820:         }",
          "1822:         if( ssl->minor_ver == SSL_MINOR_VERSION_0 &&",
          "1824:         {",
          "1825:             SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );",
          "1826:             return( POLARSSL_ERR_SSL_INVALID_RECORD );",
          "",
          "[Removed Lines]",
          "1816:         if( ssl->in_msglen < ssl->minlen )",
          "1823:             ssl->in_msglen > ssl->minlen + SSL_MAX_CONTENT_LEN )",
          "",
          "[Added Lines]",
          "1861:         if( ssl->in_msglen < ssl->transform_in->minlen )",
          "1868:             ssl->in_msglen > ssl->transform_in->minlen + SSL_MAX_CONTENT_LEN )",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1832:         if( ssl->minor_ver >= SSL_MINOR_VERSION_1 &&",
          "1834:         {",
          "1835:             SSL_DEBUG_MSG( 1, ( \"bad message length\" ) );",
          "1836:             return( POLARSSL_ERR_SSL_INVALID_RECORD );",
          "",
          "[Removed Lines]",
          "1833:             ssl->in_msglen > ssl->minlen + SSL_MAX_CONTENT_LEN + 256 )",
          "",
          "[Added Lines]",
          "1878:             ssl->in_msglen > ssl->transform_in->minlen + SSL_MAX_CONTENT_LEN + 256 )",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1863:         done = 1;",
          "1864:     }",
          "1865: #endif",
          "1867:     {",
          "1868:         if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )",
          "1869:         {",
          "",
          "[Removed Lines]",
          "1866:     if( !done && ssl->do_crypt != 0 )",
          "",
          "[Added Lines]",
          "1911:     if( !done && ssl->transform_in != NULL )",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1882:     }",
          "1884: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "1887:     {",
          "1888:         if( ( ret = ssl_decompress_buf( ssl ) ) != 0 )",
          "1889:         {",
          "",
          "[Removed Lines]",
          "1885:     if( ssl->do_crypt != 0 &&",
          "1886:         ssl->session->compression == SSL_COMPRESS_DEFLATE )",
          "",
          "[Added Lines]",
          "1930:     if( ssl->transform_in != NULL &&",
          "1931:         ssl->session_in->compression == SSL_COMPRESS_DEFLATE )",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1903:     {",
          "1904:         SSL_DEBUG_MSG( 1, ( \"unknown record type\" ) );",
          "1908:         {",
          "1909:             return( ret );",
          "1910:         }",
          "",
          "[Removed Lines]",
          "1906:         if( ( ret = ssl_send_alert_message( ssl, SSL_ALERT_LEVEL_FATAL,",
          "1907:               SSL_ALERT_MSG_UNEXPECTED_MESSAGE ) ) != 0 )",
          "",
          "[Added Lines]",
          "1951:         if( ( ret = ssl_send_alert_message( ssl,",
          "1952:                         SSL_ALERT_LEVEL_FATAL,",
          "1953:                         SSL_ALERT_MSG_UNEXPECTED_MESSAGE ) ) != 0 )",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1936:             return( POLARSSL_ERR_SSL_INVALID_RECORD );",
          "1937:         }",
          "1940:     }",
          "1942:     if( ssl->in_msgtype == SSL_MSG_ALERT )",
          "",
          "[Removed Lines]",
          "1939:         ssl->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );",
          "",
          "[Added Lines]",
          "1985:         if( ssl->state != SSL_HANDSHAKE_OVER )",
          "1986:             ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2183:         return( POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE );",
          "2184:     }",
          "2187:                     sizeof( x509_cert ) ) ) == NULL )",
          "2188:     {",
          "2189:         SSL_DEBUG_MSG( 1, ( \"malloc(%d bytes) failed\",",
          "",
          "[Removed Lines]",
          "2186:     if( ( ssl->peer_cert = (x509_cert *) malloc(",
          "",
          "[Added Lines]",
          "2233:     if( ( ssl->session_negotiate->peer_cert = (x509_cert *) malloc(",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2191:         return( POLARSSL_ERR_SSL_MALLOC_FAILED );",
          "2192:     }",
          "2196:     i = 7;",
          "",
          "[Removed Lines]",
          "2194:     memset( ssl->peer_cert, 0, sizeof( x509_cert ) );",
          "",
          "[Added Lines]",
          "2241:     memset( ssl->session_negotiate->peer_cert, 0, sizeof( x509_cert ) );",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2213:             return( POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE );",
          "2214:         }",
          "2217:         if( ret != 0 )",
          "2218:         {",
          "2219:             SSL_DEBUG_RET( 1, \" x509parse_crt\", ret );",
          "",
          "[Removed Lines]",
          "2216:         ret = x509parse_crt( ssl->peer_cert, ssl->in_msg + i, n );",
          "",
          "[Added Lines]",
          "2263:         ret = x509parse_crt( ssl->session_negotiate->peer_cert, ssl->in_msg + i,",
          "2264:                              n );",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2223:         i += n;",
          "2224:     }",
          "2228:     if( ssl->authmode != SSL_VERIFY_NONE )",
          "2229:     {",
          "",
          "[Removed Lines]",
          "2226:     SSL_DEBUG_CRT( 3, \"peer certificate\", ssl->peer_cert );",
          "",
          "[Added Lines]",
          "2274:     SSL_DEBUG_CRT( 3, \"peer certificate\", ssl->session_negotiate->peer_cert );",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2233:             return( POLARSSL_ERR_SSL_CA_CHAIN_REQUIRED );",
          "2234:         }",
          "2237:                                 ssl->peer_cn,  &ssl->verify_result,",
          "2238:                                 ssl->f_vrfy, ssl->p_vrfy );",
          "",
          "[Removed Lines]",
          "2236:         ret = x509parse_verify( ssl->peer_cert, ssl->ca_chain, ssl->ca_crl,",
          "",
          "[Added Lines]",
          "2284:         ret = x509parse_verify( ssl->session_negotiate->peer_cert,",
          "2285:                                 ssl->ca_chain, ssl->ca_crl,",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2259:     ssl->out_msglen  = 1;",
          "2260:     ssl->out_msg[0]  = 1;",
          "2263:     ssl->state++;",
          "2265:     if( ( ret = ssl_write_record( ssl ) ) != 0 )",
          "",
          "[Removed Lines]",
          "2262:     ssl->do_crypt = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "2280:     SSL_DEBUG_MSG( 2, ( \"=> parse change cipher spec\" ) );",
          "2284:     if( ( ret = ssl_read_record( ssl ) ) != 0 )",
          "2285:     {",
          "2286:         SSL_DEBUG_RET( 1, \"ssl_read_record\", ret );",
          "",
          "[Removed Lines]",
          "2282:     ssl->do_crypt = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "2306:     return( 0 );",
          "2307: }",
          "2311: {",
          "2312:     if( ssl->minor_ver < SSL_MINOR_VERSION_3 )",
          "2320:     else if ( ciphersuite == SSL_RSA_AES_256_GCM_SHA384 ||",
          "2321:               ciphersuite == SSL_EDH_RSA_AES_256_GCM_SHA384 )",
          "2322:     {",
          "2325:     }",
          "2326:     else",
          "2335: }",
          "2337: static void ssl_update_checksum_start( ssl_context *ssl, unsigned char *buf,",
          "2338:                                        size_t len )",
          "2339: {",
          "2343: }",
          "2345: static void ssl_update_checksum_md5sha1( ssl_context *ssl, unsigned char *buf,",
          "2346:                                          size_t len )",
          "2347: {",
          "2351: }",
          "2353: static void ssl_update_checksum_sha256( ssl_context *ssl, unsigned char *buf,",
          "2354:                                         size_t len )",
          "2355: {",
          "2357: }",
          "2359: static void ssl_update_checksum_sha384( ssl_context *ssl, unsigned char *buf,",
          "2360:                                         size_t len )",
          "2361: {",
          "2363: }",
          "2365: static void ssl_calc_finished_ssl(",
          "",
          "[Removed Lines]",
          "2309: void ssl_kickstart_checksum( ssl_context *ssl, int ciphersuite,",
          "2310:                              unsigned char *input_buf, size_t len )",
          "2313:     {",
          "2314:         md5_starts( (md5_context *) ssl->ctx_checksum );",
          "2315:         sha1_starts( (sha1_context *) ( ssl->ctx_checksum +",
          "2316:                                         sizeof(md5_context) ) );",
          "2318:         ssl->update_checksum = ssl_update_checksum_md5sha1;",
          "2319:     }",
          "2323:         sha4_starts( (sha4_context *) ssl->ctx_checksum, 1 );",
          "2324:         ssl->update_checksum = ssl_update_checksum_sha384;",
          "2327:     {",
          "2328:         sha2_starts( (sha2_context *) ssl->ctx_checksum, 0 );",
          "2329:         ssl->update_checksum = ssl_update_checksum_sha256;",
          "2330:     }",
          "2332:     if( ssl->endpoint == SSL_IS_CLIENT )",
          "2333:         ssl->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );",
          "2334:     ssl->update_checksum( ssl, input_buf, len );",
          "2340:     ((void) ssl);",
          "2341:     ((void) buf);",
          "2342:     ((void) len);",
          "2348:     md5_update( (md5_context *) ssl->ctx_checksum, buf, len );",
          "2349:     sha1_update( (sha1_context *) ( ssl->ctx_checksum + sizeof(md5_context) ),",
          "2350:                  buf, len );",
          "2356:     sha2_update( (sha2_context *) ssl->ctx_checksum, buf, len );",
          "2362:     sha4_update( (sha4_context *) ssl->ctx_checksum, buf, len );",
          "",
          "[Added Lines]",
          "2355: void ssl_optimize_checksum( ssl_context *ssl, int ciphersuite )",
          "2358:         ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;",
          "2362:         ssl->handshake->update_checksum = ssl_update_checksum_sha384;",
          "2365:         ssl->handshake->update_checksum = ssl_update_checksum_sha256;",
          "2371:      md5_update( &ssl->handshake->fin_md5 , buf, len );",
          "2372:     sha1_update( &ssl->handshake->fin_sha1, buf, len );",
          "2373:     sha2_update( &ssl->handshake->fin_sha2, buf, len );",
          "2374:     sha4_update( &ssl->handshake->fin_sha4, buf, len );",
          "2380:      md5_update( &ssl->handshake->fin_md5 , buf, len );",
          "2381:     sha1_update( &ssl->handshake->fin_sha1, buf, len );",
          "2387:     sha2_update( &ssl->handshake->fin_sha2, buf, len );",
          "2393:     sha4_update( &ssl->handshake->fin_sha4, buf, len );",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "2373:     unsigned char md5sum[16];",
          "2374:     unsigned char sha1sum[20];",
          "2376:     SSL_DEBUG_MSG( 2, ( \"=> calc  finished ssl\" ) );",
          "",
          "[Removed Lines]",
          "2378:     memcpy( &md5 , (md5_context *) ssl->ctx_checksum, sizeof(md5_context) );",
          "2379:     memcpy( &sha1, (sha1_context *) ( ssl->ctx_checksum + sizeof(md5_context) ),",
          "2380:             sizeof( sha1_context ) );",
          "",
          "[Added Lines]",
          "2407:     ssl_session *session = ssl->session_negotiate;",
          "2408:     if( !session )",
          "2409:         session = ssl->session;",
          "2413:     memcpy( &md5 , &ssl->handshake->fin_md5 , sizeof(md5_context)  );",
          "2414:     memcpy( &sha1, &ssl->handshake->fin_sha1, sizeof(sha1_context) );",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "2400:     memset( padbuf, 0x36, 48 );",
          "2402:     md5_update( &md5, (unsigned char *) sender, 4 );",
          "2404:     md5_update( &md5, padbuf, 48 );",
          "2405:     md5_finish( &md5, md5sum );",
          "2407:     sha1_update( &sha1, (unsigned char *) sender, 4 );",
          "2409:     sha1_update( &sha1, padbuf, 40 );",
          "2410:     sha1_finish( &sha1, sha1sum );",
          "2412:     memset( padbuf, 0x5C, 48 );",
          "2414:     md5_starts( &md5 );",
          "2416:     md5_update( &md5, padbuf, 48 );",
          "2417:     md5_update( &md5, md5sum, 16 );",
          "2418:     md5_finish( &md5, buf );",
          "2420:     sha1_starts( &sha1 );",
          "2422:     sha1_update( &sha1, padbuf , 40 );",
          "2423:     sha1_update( &sha1, sha1sum, 20 );",
          "2424:     sha1_finish( &sha1, buf + 16 );",
          "",
          "[Removed Lines]",
          "2403:     md5_update( &md5, ssl->session->master, 48 );",
          "2408:     sha1_update( &sha1, ssl->session->master, 48 );",
          "2415:     md5_update( &md5, ssl->session->master, 48 );",
          "2421:     sha1_update( &sha1, ssl->session->master, 48 );",
          "",
          "[Added Lines]",
          "2437:     md5_update( &md5, session->master, 48 );",
          "2442:     sha1_update( &sha1, session->master, 48 );",
          "2449:     md5_update( &md5, session->master, 48 );",
          "2455:     sha1_update( &sha1, session->master, 48 );",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "2444:     sha1_context sha1;",
          "2445:     unsigned char padbuf[36];",
          "2447:     SSL_DEBUG_MSG( 2, ( \"=> calc  finished tls\" ) );",
          "",
          "[Removed Lines]",
          "2449:     memcpy( &md5 , (md5_context *) ssl->ctx_checksum, sizeof(md5_context) );",
          "2450:     memcpy( &sha1, (sha1_context *) ( ssl->ctx_checksum + sizeof(md5_context) ),",
          "2451:             sizeof( sha1_context ) );",
          "",
          "[Added Lines]",
          "2481:     ssl_session *session = ssl->session_negotiate;",
          "2482:     if( !session )",
          "2483:         session = ssl->session;",
          "2487:     memcpy( &md5 , &ssl->handshake->fin_md5 , sizeof(md5_context)  );",
          "2488:     memcpy( &sha1, &ssl->handshake->fin_sha1, sizeof(sha1_context) );",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "2469:     md5_finish(  &md5, padbuf );",
          "2470:     sha1_finish( &sha1, padbuf + 16 );",
          "2475:     SSL_DEBUG_BUF( 3, \"calc finished result\", buf, len );",
          "",
          "[Removed Lines]",
          "2472:     ssl->tls_prf( ssl->session->master, 48, sender,",
          "2473:             padbuf, 36, buf, len );",
          "",
          "[Added Lines]",
          "2509:     ssl->handshake->tls_prf( session->master, 48, sender,",
          "2510:                              padbuf, 36, buf, len );",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "2490:     sha2_context sha2;",
          "2491:     unsigned char padbuf[32];",
          "2493:     SSL_DEBUG_MSG( 2, ( \"=> calc  finished tls sha256\" ) );",
          "",
          "[Removed Lines]",
          "2495:     memcpy( &sha2 , (sha2_context *) ssl->ctx_checksum, sizeof(sha2_context) );",
          "",
          "[Added Lines]",
          "2530:     ssl_session *session = ssl->session_negotiate;",
          "2531:     if( !session )",
          "2532:         session = ssl->session;",
          "2536:     memcpy( &sha2, &ssl->handshake->fin_sha2, sizeof(sha2_context) );",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "2510:     sha2_finish( &sha2, padbuf );",
          "2515:     SSL_DEBUG_BUF( 3, \"calc finished result\", buf, len );",
          "",
          "[Removed Lines]",
          "2512:     ssl->tls_prf( ssl->session->master, 48, sender,",
          "2513:                   padbuf, 32, buf, len );",
          "",
          "[Added Lines]",
          "2553:     ssl->handshake->tls_prf( session->master, 48, sender,",
          "2554:                              padbuf, 32, buf, len );",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "2529:     sha4_context sha4;",
          "2530:     unsigned char padbuf[48];",
          "2532:     SSL_DEBUG_MSG( 2, ( \"=> calc  finished tls sha384\" ) );",
          "",
          "[Removed Lines]",
          "2534:     memcpy( &sha4 , (sha4_context *) ssl->ctx_checksum, sizeof(sha4_context) );",
          "",
          "[Added Lines]",
          "2573:     ssl_session *session = ssl->session_negotiate;",
          "2574:     if( !session )",
          "2575:         session = ssl->session;",
          "2579:     memcpy( &sha4, &ssl->handshake->fin_sha4, sizeof(sha4_context) );",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "2549:     sha4_finish( &sha4, padbuf );",
          "2554:     SSL_DEBUG_BUF( 3, \"calc finished result\", buf, len );",
          "",
          "[Removed Lines]",
          "2551:     ssl->tls_prf( ssl->session->master, 48, sender,",
          "2552:                   padbuf, 48, buf, len );",
          "",
          "[Added Lines]",
          "2596:     ssl->handshake->tls_prf( session->master, 48, sender,",
          "2597:                              padbuf, 48, buf, len );",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "2560:     SSL_DEBUG_MSG( 2, ( \"<= calc  finished\" ) );",
          "2561: }",
          "2563: int ssl_write_finished( ssl_context *ssl )",
          "2564: {",
          "2565:     int ret, hash_len;",
          "2567:     SSL_DEBUG_MSG( 2, ( \"=> write finished\" ) );",
          "2572:     hash_len = ( ssl->minor_ver == SSL_MINOR_VERSION_0 ) ? 36 : 12;",
          "2574:     ssl->out_msglen  = 4 + hash_len;",
          "2575:     ssl->out_msgtype = SSL_MSG_HANDSHAKE;",
          "2576:     ssl->out_msg[0]  = SSL_HS_FINISHED;",
          "",
          "[Removed Lines]",
          "2569:     ssl->calc_finished( ssl, ssl->out_msg + 4, ssl->endpoint );",
          "",
          "[Added Lines]",
          "2608: void ssl_handshake_wrapup( ssl_context *ssl )",
          "2609: {",
          "2610:     SSL_DEBUG_MSG( 3, ( \"=> handshake wrapup\" ) );",
          "2615:     ssl_handshake_free( ssl->handshake );",
          "2616:     free( ssl->handshake );",
          "2617:     ssl->handshake = NULL;",
          "2622:     if( ssl->transform )",
          "2623:     {",
          "2624:         ssl_transform_free( ssl->transform );",
          "2625:         free( ssl->transform );",
          "2626:     }",
          "2627:     ssl->transform = ssl->transform_negotiate;",
          "2628:     ssl->transform_negotiate = NULL;",
          "2637:     ssl->session_negotiate->next = ssl->session->next;",
          "2638:     ssl->session->next = NULL;",
          "2639:     ssl_session_free( ssl->session );",
          "2641:     memcpy( ssl->session, ssl->session_negotiate, sizeof(ssl_session) );",
          "2642:     ssl->session_in = ssl->session;",
          "2643:     ssl->session_out = ssl->session;",
          "2645:     memset( ssl->session_negotiate, 0, sizeof(ssl_session) );",
          "2646:     free( ssl->session_negotiate );",
          "2647:     ssl->session_negotiate = NULL;",
          "2649:     ssl->state++;",
          "2651:     SSL_DEBUG_MSG( 3, ( \"<= handshake wrapup\" ) );",
          "2652: }",
          "2660:     ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->endpoint );",
          "2665:     ssl->verify_data_len = hash_len;",
          "2666:     memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "2582:     if( ssl->resume != 0 )",
          "2583:     {",
          "2584:         if( ssl->endpoint == SSL_IS_CLIENT )",
          "2586:         else",
          "2587:             ssl->state = SSL_CLIENT_CHANGE_CIPHER_SPEC;",
          "2588:     }",
          "2589:     else",
          "2590:         ssl->state++;",
          "2594:     if( ( ret = ssl_write_record( ssl ) ) != 0 )",
          "2595:     {",
          "",
          "[Removed Lines]",
          "2585:             ssl->state = SSL_HANDSHAKE_OVER;",
          "2592:     ssl->do_crypt = 1;",
          "",
          "[Added Lines]",
          "2679:             ssl->state = SSL_HANDSHAKE_WRAPUP;",
          "2689:     SSL_DEBUG_MSG( 3, ( \"switching to new transform spec for outbound data\" ) );",
          "2690:     ssl->transform_out = ssl->transform_negotiate;",
          "2691:     ssl->session_out = ssl->session_negotiate;",
          "2692:     memset( ssl->out_ctr, 0, 8 );",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "2611:     SSL_DEBUG_MSG( 2, ( \"=> parse finished\" ) );",
          "2617:     if( ( ret = ssl_read_record( ssl ) ) != 0 )",
          "2618:     {",
          "",
          "[Removed Lines]",
          "2613:     ssl->calc_finished( ssl, buf, ssl->endpoint ^ 1 );",
          "2615:     ssl->do_crypt = 1;",
          "",
          "[Added Lines]",
          "2713:     ssl->handshake->calc_finished( ssl, buf, ssl->endpoint ^ 1 );",
          "2718:     SSL_DEBUG_MSG( 3, ( \"switching to new transform spec for inbound data\" ) );",
          "2719:     ssl->transform_in = ssl->transform_negotiate;",
          "2720:     ssl->session_in = ssl->session_negotiate;",
          "2721:     memset( ssl->in_ctr, 0, 8 );",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "2642:         return( POLARSSL_ERR_SSL_BAD_HS_FINISHED );",
          "2643:     }",
          "2645:     if( ssl->resume != 0 )",
          "2646:     {",
          "2647:         if( ssl->endpoint == SSL_IS_CLIENT )",
          "2648:             ssl->state = SSL_CLIENT_CHANGE_CIPHER_SPEC;",
          "2650:         if( ssl->endpoint == SSL_IS_SERVER )",
          "2652:     }",
          "2653:     else",
          "2654:         ssl->state++;",
          "",
          "[Removed Lines]",
          "2651:             ssl->state = SSL_HANDSHAKE_OVER;",
          "",
          "[Added Lines]",
          "2751:     ssl->verify_data_len = hash_len;",
          "2752:     memcpy( ssl->peer_verify_data, buf, hash_len );",
          "2760:             ssl->state = SSL_HANDSHAKE_WRAPUP;",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "2658:     return( 0 );",
          "2659: }",
          "2664: int ssl_init( ssl_context *ssl )",
          "2665: {",
          "2666:     int len = SSL_BUFFER_LEN;",
          "2668:     memset( ssl, 0, sizeof( ssl_context ) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2770: int ssl_handshake_init( ssl_context *ssl )",
          "2771: {",
          "2772:     if( ssl->transform_negotiate )",
          "2773:         ssl_transform_free( ssl->transform_negotiate );",
          "2774:     else",
          "2775:         ssl->transform_negotiate = malloc( sizeof(ssl_transform) );",
          "2777:     if( ssl->session_negotiate )",
          "2778:         ssl_session_free( ssl->session_negotiate );",
          "2779:     else",
          "2780:         ssl->session_negotiate = malloc( sizeof(ssl_session) );",
          "2782:     if( ssl->handshake )",
          "2783:         ssl_handshake_free( ssl->handshake );",
          "2784:     else",
          "2785:         ssl->handshake = malloc( sizeof(ssl_handshake_params) );",
          "2787:     if( ssl->handshake == NULL ||",
          "2788:         ssl->transform_negotiate == NULL ||",
          "2789:         ssl->session_negotiate == NULL )",
          "2790:     {",
          "2791:         SSL_DEBUG_MSG( 1, ( \"malloc() of ssl sub-contexts failed\" ) );",
          "2792:         return( POLARSSL_ERR_SSL_MALLOC_FAILED );",
          "2793:     }",
          "2795:     memset( ssl->handshake, 0, sizeof(ssl_handshake_params) );",
          "2796:     memset( ssl->transform_negotiate, 0, sizeof(ssl_transform) );",
          "2797:     memset( ssl->session_negotiate, 0, sizeof(ssl_session) );",
          "2799:      md5_starts( &ssl->handshake->fin_md5 );",
          "2800:     sha1_starts( &ssl->handshake->fin_sha1 );",
          "2801:     sha2_starts( &ssl->handshake->fin_sha2, 0 );",
          "2802:     sha4_starts( &ssl->handshake->fin_sha4, 1 );",
          "2804:     ssl->handshake->update_checksum = ssl_update_checksum_start;",
          "2806:     return( 0 );",
          "2807: }",
          "2814:     int ret;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2694:     ssl->hostname = NULL;",
          "2695:     ssl->hostname_len = 0;",
          "2699:     return( 0 );",
          "2700: }",
          "",
          "[Removed Lines]",
          "2697:     ssl->update_checksum = ssl_update_checksum_start;",
          "",
          "[Added Lines]",
          "2846:     if( ( ret = ssl_handshake_init( ssl ) ) != 0 )",
          "2847:         return( ret );",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2706: int ssl_session_reset( ssl_context *ssl )",
          "2707: {",
          "2708:     ssl->state = SSL_HELLO_REQUEST;",
          "2710:     ssl->in_offt = NULL;",
          "2712:     ssl->in_msgtype = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2858:     int ret;",
          "2861:     ssl->renegotiation = SSL_INITIAL_HANDSHAKE;",
          "2862:     ssl->secure_renegotiation = SSL_LEGACY_RENEGOTIATION;",
          "2864:     ssl->verify_data_len = 0;",
          "2865:     memset( ssl->own_verify_data, 0, 36 );",
          "2866:     memset( ssl->peer_verify_data, 0, 36 );",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2720:     ssl->out_msglen = 0;",
          "2721:     ssl->out_left = 0;",
          "2730:     memset( ssl->out_ctr, 0, SSL_BUFFER_LEN );",
          "2731:     memset( ssl->in_ctr, 0, SSL_BUFFER_LEN );",
          "2743: #if defined(POLARSSL_SSL_HW_RECORD_ACCEL)",
          "2744:     if( ssl_hw_record_reset != NULL)",
          "",
          "[Removed Lines]",
          "2723:     ssl->do_crypt = 0;",
          "2724:     ssl->pmslen = 0;",
          "2725:     ssl->keylen = 0;",
          "2726:     ssl->minlen = 0;",
          "2727:     ssl->ivlen = 0;",
          "2728:     ssl->maclen = 0;",
          "2732:     memset( ssl->randbytes, 0, 64 );",
          "2733:     memset( ssl->premaster, 0, 256 );",
          "2734:     memset( ssl->iv_enc, 0, 16 );",
          "2735:     memset( ssl->iv_dec, 0, 16 );",
          "2736:     memset( ssl->mac_enc, 0, 32 );",
          "2737:     memset( ssl->mac_dec, 0, 32 );",
          "2738:     memset( ssl->ctx_enc, 0, 128 );",
          "2739:     memset( ssl->ctx_dec, 0, 128 );",
          "2741:     ssl->update_checksum = ssl_update_checksum_start;",
          "",
          "[Added Lines]",
          "2881:     ssl->transform_in = NULL;",
          "2882:     ssl->transform_out = NULL;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2752:     }",
          "2753: #endif",
          "2759:     {",
          "2776:     }",
          "2779:     return( 0 );",
          "2780: }",
          "",
          "[Removed Lines]",
          "2755: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "2758:     if( ssl->session->compression == SSL_COMPRESS_DEFLATE )",
          "2760:         ssl->ctx_deflate.next_in = Z_NULL;",
          "2761:         ssl->ctx_deflate.next_out = Z_NULL;",
          "2762:         ssl->ctx_deflate.avail_in = 0;",
          "2763:         ssl->ctx_deflate.avail_out = 0;",
          "2765:         ssl->ctx_inflate.next_in = Z_NULL;",
          "2766:         ssl->ctx_inflate.next_out = Z_NULL;",
          "2767:         ssl->ctx_inflate.avail_in = 0;",
          "2768:         ssl->ctx_inflate.avail_out = 0;",
          "2770:         if( deflateReset( &ssl->ctx_deflate ) != Z_OK ||",
          "2771:             inflateReset( &ssl->ctx_inflate ) != Z_OK )",
          "2772:         {",
          "2773:             SSL_DEBUG_MSG( 1, ( \"Failed to reset compression\" ) );",
          "2774:             return( POLARSSL_ERR_SSL_COMPRESSION_FAILED );",
          "2775:         }",
          "",
          "[Added Lines]",
          "2899:     if( ssl->transform )",
          "2901:         ssl_transform_free( ssl->transform );",
          "2902:         free( ssl->transform );",
          "2903:         ssl->transform = NULL;",
          "2906:     if( ( ret = ssl_handshake_init( ssl ) ) != 0 )",
          "2907:         return( ret );",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2871: }",
          "2872: #endif",
          "2874: int ssl_set_dh_param( ssl_context *ssl, const char *dhm_P, const char *dhm_G )",
          "2875: {",
          "2876:     int ret;",
          "2879:     {",
          "2880:         SSL_DEBUG_RET( 1, \"mpi_read_string\", ret );",
          "2881:         return( ret );",
          "2882:     }",
          "2885:     {",
          "2886:         SSL_DEBUG_RET( 1, \"mpi_read_string\", ret );",
          "2887:         return( ret );",
          "",
          "[Removed Lines]",
          "2878:     if( ( ret = mpi_read_string( &ssl->dhm_ctx.P, 16, dhm_P ) ) != 0 )",
          "2884:     if( ( ret = mpi_read_string( &ssl->dhm_ctx.G, 16, dhm_G ) ) != 0 )",
          "",
          "[Added Lines]",
          "3004: #if defined(POLARSSL_DHM_C)",
          "3009:     if( ( ret = mpi_read_string( &ssl->dhm_P, 16, dhm_P ) ) != 0 )",
          "3015:     if( ( ret = mpi_read_string( &ssl->dhm_G, 16, dhm_G ) ) != 0 )",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2894: {",
          "2895:     int ret;",
          "2898:     {",
          "2899:         SSL_DEBUG_RET( 1, \"mpi_copy\", ret );",
          "2900:         return( ret );",
          "2901:     }",
          "2904:     {",
          "2905:         SSL_DEBUG_RET( 1, \"mpi_copy\", ret );",
          "2906:         return( ret );",
          "",
          "[Removed Lines]",
          "2897:     if( ( ret = mpi_copy(&ssl->dhm_ctx.P, &dhm_ctx->P) ) != 0 )",
          "2903:     if( ( ret = mpi_copy(&ssl->dhm_ctx.G, &dhm_ctx->G) ) != 0 )",
          "",
          "[Added Lines]",
          "3028:     if( ( ret = mpi_copy(&ssl->dhm_P, &dhm_ctx->P) ) != 0 )",
          "3034:     if( ( ret = mpi_copy(&ssl->dhm_G, &dhm_ctx->G) ) != 0 )",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2934:     ssl->max_minor_ver = minor;",
          "2935: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3069: void ssl_set_renegotiation( ssl_context *ssl, int renegotiation )",
          "3070: {",
          "3071:     ssl->disable_renegotiation = renegotiation;",
          "3072: }",
          "3074: void ssl_legacy_renegotiation( ssl_context *ssl, int allow_legacy )",
          "3075: {",
          "3076:     ssl->allow_legacy_renegotiation = allow_legacy;",
          "3077: }",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "3284:     return( ret );",
          "3285: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3432: int ssl_renegotiate( ssl_context *ssl )",
          "3433: {",
          "3434:     int ret;",
          "3436:     SSL_DEBUG_MSG( 2, ( \"=> renegotiate\" ) );",
          "3438:     if( ssl->state != SSL_HANDSHAKE_OVER )",
          "3439:         return( POLARSSL_ERR_SSL_BAD_INPUT_DATA );",
          "3441:     ssl->state = SSL_HELLO_REQUEST;",
          "3442:     ssl->renegotiation = SSL_RENEGOTIATION;",
          "3444:     if( ( ret = ssl_handshake_init( ssl ) ) != 0 )",
          "3445:         return( ret );",
          "3447:     if( ( ret = ssl_handshake( ssl ) ) != 0 )",
          "3448:     {",
          "3449:         SSL_DEBUG_RET( 1, \"ssl_handshake\", ret );",
          "3450:         return( ret );",
          "3451:     }",
          "3453:     SSL_DEBUG_MSG( 2, ( \"<= renegotiate\" ) );",
          "3455:     return( 0 );",
          "3456: }",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "3330:             }",
          "3331:         }",
          "3334:         {",
          "3335:             SSL_DEBUG_MSG( 1, ( \"bad application data message\" ) );",
          "3336:             return( POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE );",
          "",
          "[Removed Lines]",
          "3333:         if( ssl->in_msgtype != SSL_MSG_APPLICATION_DATA )",
          "",
          "[Added Lines]",
          "3504:         if( ssl->in_msgtype == SSL_MSG_HANDSHAKE )",
          "3505:         {",
          "3506:             SSL_DEBUG_MSG( 1, ( \"received handshake message\" ) );",
          "3508:             if( ssl->endpoint == SSL_IS_CLIENT &&",
          "3509:                 ( ssl->in_msg[0] != SSL_HS_HELLO_REQUEST ||",
          "3510:                   ssl->in_hslen != 4 ) )",
          "3511:             {",
          "3512:                 SSL_DEBUG_MSG( 1, ( \"handshake received (not HelloRequest)\" ) );",
          "3513:                 return( POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE );",
          "3514:             }",
          "3516:             if( ssl->disable_renegotiation == SSL_RENEGOTIATION_DISABLED )",
          "3517:             {",
          "3518:                 SSL_DEBUG_MSG( 3, ( \"ignoring renegotiation, sending alert\" ) );",
          "3520:                 if( ( ret = ssl_send_alert_message( ssl,",
          "3521:                                 SSL_ALERT_LEVEL_WARNING,",
          "3522:                                 SSL_ALERT_MSG_NO_RENEGOTIATION ) ) != 0 )",
          "3523:                 {",
          "3524:                     return( ret );",
          "3525:                 }",
          "3526:             }",
          "3527:             else",
          "3528:             {",
          "3529:                 if( ( ret = ssl_renegotiate( ssl ) ) != 0 )",
          "3530:                 {",
          "3531:                     SSL_DEBUG_RET( 1, \"ssl_renegotiate\", ret );",
          "3532:                     return( ret );",
          "3533:                 }",
          "3535:                 return( POLARSSL_ERR_NET_WANT_READ );",
          "3536:             }",
          "3537:         }",
          "3538:         else if( ssl->in_msgtype != SSL_MSG_APPLICATION_DATA )",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "3423:     if( ssl->state == SSL_HANDSHAKE_OVER )",
          "3424:     {",
          "3431:         {",
          "3433:             return( ret );",
          "3434:         }",
          "3435:     }",
          "",
          "[Removed Lines]",
          "3425:         ssl->out_msgtype = SSL_MSG_ALERT;",
          "3426:         ssl->out_msglen  = 2;",
          "3427:         ssl->out_msg[0]  = SSL_ALERT_LEVEL_WARNING;",
          "3428:         ssl->out_msg[1]  = SSL_ALERT_MSG_CLOSE_NOTIFY;",
          "3430:         if( ( ret = ssl_write_record( ssl ) ) != 0 )",
          "3432:             SSL_DEBUG_RET( 1, \"ssl_write_record\", ret );",
          "",
          "[Added Lines]",
          "3630:         if( ( ret = ssl_send_alert_message( ssl,",
          "3631:                         SSL_ALERT_LEVEL_WARNING,",
          "3632:                         SSL_ALERT_MSG_CLOSE_NOTIFY ) ) != 0 )",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "3439:     return( ret );",
          "3440: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3643: void ssl_transform_free( ssl_transform *transform )",
          "3644: {",
          "3645: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "3646:     deflateEnd( &transform->ctx_deflate );",
          "3647:     inflateEnd( &transform->ctx_inflate );",
          "3648: #endif",
          "3650:     memset( transform, 0, sizeof( ssl_transform ) );",
          "3651: }",
          "3653: void ssl_handshake_free( ssl_handshake_params *handshake )",
          "3654: {",
          "3655: #if defined(POLARSSL_DHM_C)",
          "3656:     dhm_free( &handshake->dhm_ctx );",
          "3657: #endif",
          "3658:     memset( handshake, 0, sizeof( ssl_handshake_params ) );",
          "3659: }",
          "3661: void ssl_session_free( ssl_session *session )",
          "3662: {",
          "3663:     ssl_session *cur = session, *prv;",
          "3665:     while( cur != NULL )",
          "3666:     {",
          "3667:         prv = cur;",
          "3668:         cur = cur->next;",
          "3670:         if( prv->peer_cert != NULL )",
          "3671:         {",
          "3672:             x509_free( prv->peer_cert );",
          "3673:             free( prv->peer_cert );",
          "3674:         }",
          "3676:         memset( prv, 0, sizeof( ssl_session ) );",
          "3677:         if( prv != session )",
          "3678:             free( prv );",
          "3679:     }",
          "3680: }",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "3446: {",
          "3447:     SSL_DEBUG_MSG( 2, ( \"=> free\" ) );",
          "3456:     if( ssl->out_ctr != NULL )",
          "3457:     {",
          "3458:         memset( ssl->out_ctr, 0, SSL_BUFFER_LEN );",
          "",
          "[Removed Lines]",
          "3449:     if( ssl->peer_cert != NULL )",
          "3450:     {",
          "3451:         x509_free( ssl->peer_cert );",
          "3452:         memset( ssl->peer_cert, 0, sizeof( x509_cert ) );",
          "3453:           free( ssl->peer_cert );",
          "3454:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "3466:     }",
          "3468: #if defined(POLARSSL_DHM_C)",
          "3470: #endif",
          "3472:     if ( ssl->hostname != NULL)",
          "3473:     {",
          "3474:         memset( ssl->hostname, 0, ssl->hostname_len );",
          "",
          "[Removed Lines]",
          "3469:     dhm_free( &ssl->dhm_ctx );",
          "",
          "[Added Lines]",
          "3702:     mpi_free( &ssl->dhm_P );",
          "3703:     mpi_free( &ssl->dhm_G );",
          "3706:     if( ssl->transform )",
          "3707:     {",
          "3708:         ssl_transform_free( ssl->transform );",
          "3709:         free( ssl->transform );",
          "3710:     }",
          "3712:     if( ssl->handshake )",
          "3713:     {",
          "3714:         ssl_handshake_free( ssl->handshake );",
          "3715:         ssl_transform_free( ssl->transform_negotiate );",
          "3716:         ssl_session_free( ssl->session_negotiate );",
          "3718:         free( ssl->handshake );",
          "3719:         free( ssl->transform_negotiate );",
          "3720:         free( ssl->session_negotiate );",
          "3721:     }",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "3484:     }",
          "3485: #endif",
          "3492:     SSL_DEBUG_MSG( 2, ( \"<= free\" ) );",
          "",
          "[Removed Lines]",
          "3487: #if defined(POLARSSL_ZLIB_SUPPORT)",
          "3488:     deflateEnd( &ssl->ctx_deflate );",
          "3489:     inflateEnd( &ssl->ctx_inflate );",
          "3490: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "programs/ssl/ssl_client2.c||programs/ssl/ssl_client2.c": [
          "File: programs/ssl/ssl_client2.c -> programs/ssl/ssl_client2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #define DFL_CRT_FILE            \"\"",
          "51: #define DFL_KEY_FILE            \"\"",
          "52: #define DFL_FORCE_CIPHER        0",
          "54: #define GET_REQUEST \"GET %s HTTP/1.0\\r\\n\\r\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #define DFL_RENEGOTIATION       SSL_RENEGOTIATION_ENABLED",
          "54: #define DFL_ALLOW_LEGACY        SSL_NO_LEGACY_RENEGOTIATION",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     \"    debug_level=%%d      default: 0 (disabled)\\n\"      \\",
          "98:     USAGE_IO                                                \\",
          "99:     \"    request_page=%%s     default: \\\".\\\"\\n\"             \\",
          "100:     \"    force_ciphersuite=<name>    default: all enabled\\n\"\\",
          "101:     \" acceptable ciphersuite names:\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     \"    renegotiation=%%d    default: 1 (enabled)\\n\"       \\",
          "105:     \"    allow_legacy=%%d     default: 0 (disabled)\\n\"      \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:     opt.crt_file            = DFL_CRT_FILE;",
          "172:     opt.key_file            = DFL_KEY_FILE;",
          "173:     opt.force_ciphersuite[0]= DFL_FORCE_CIPHER;",
          "175:     for( i = 1; i < argc; i++ )",
          "176:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:     opt.renegotiation       = DFL_RENEGOTIATION;",
          "181:     opt.allow_legacy        = DFL_ALLOW_LEGACY;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "224:             }",
          "225:             opt.force_ciphersuite[1] = 0;",
          "226:         }",
          "227:         else",
          "228:             goto usage;",
          "229:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:         else if( strcmp( p, \"renegotiation\" ) == 0 )",
          "236:         {",
          "237:             opt.renegotiation = (atoi( q )) ? SSL_RENEGOTIATION_ENABLED :",
          "238:                                               SSL_RENEGOTIATION_DISABLED;",
          "239:         }",
          "240:         else if( strcmp( p, \"allow_legacy\" ) == 0 )",
          "241:         {",
          "242:             opt.allow_legacy = atoi( q );",
          "243:             if( opt.allow_legacy < 0 || opt.allow_legacy > 1 )",
          "244:                 goto usage;",
          "245:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "367:     else",
          "368:         ssl_set_ciphersuites( &ssl, opt.force_ciphersuite );",
          "370:     ssl_set_session( &ssl, 1, 600, &ssn );",
          "372:     ssl_set_ca_chain( &ssl, &cacert, NULL, opt.server_name );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389:     ssl_set_renegotiation( &ssl, opt.renegotiation );",
          "390:     ssl_legacy_renegotiation( &ssl, opt.allow_legacy );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "419:         printf( \" ok\\n\" );",
          "421:     printf( \"  . Peer certificate information    ...\\n\" );",
          "423:     printf( \"%s\\n\", buf );",
          "",
          "[Removed Lines]",
          "422:     x509parse_cert_info( (char *) buf, sizeof( buf ) - 1, \"      \", ssl.peer_cert );",
          "",
          "[Added Lines]",
          "444:     x509parse_cert_info( (char *) buf, sizeof( buf ) - 1, \"      \",",
          "445:                          ssl.session->peer_cert );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "495:     x509_free( &clicert );",
          "496:     x509_free( &cacert );",
          "497:     rsa_free( &rsa );",
          "498:     ssl_free( &ssl );",
          "500:     memset( &ssl, 0, sizeof( ssl ) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "521:     ssl_session_free( &ssn );",
          "",
          "---------------"
        ],
        "programs/ssl/ssl_fork_server.c||programs/ssl/ssl_fork_server.c": [
          "File: programs/ssl/ssl_fork_server.c -> programs/ssl/ssl_fork_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:         ssl_set_ca_chain( &ssl, srvcert.next, NULL, NULL );",
          "381:         ssl_set_own_cert( &ssl, &srvcert, &rsa );",
          "382:         ssl_set_dh_param( &ssl, my_dhm_P, my_dhm_G );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: #if defined(POLARSSL_DHM_C)",
          "384: #endif",
          "",
          "---------------"
        ],
        "programs/ssl/ssl_mail_client.c||programs/ssl/ssl_mail_client.c": [
          "File: programs/ssl/ssl_mail_client.c -> programs/ssl/ssl_mail_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         printf( \" ok\\n\" );",
          "173:     printf( \"  . Peer certificate information    ...\\n\" );",
          "175:     printf( \"%s\\n\", buf );",
          "177:     return( 0 );",
          "",
          "[Removed Lines]",
          "174:     x509parse_cert_info( (char *) buf, sizeof( buf ) - 1, \"      \", ssl->peer_cert );",
          "",
          "[Added Lines]",
          "174:     x509parse_cert_info( (char *) buf, sizeof( buf ) - 1, \"      \",",
          "175:                          ssl->session->peer_cert );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "803:     x509_free( &clicert );",
          "804:     x509_free( &cacert );",
          "805:     rsa_free( &rsa );",
          "806:     ssl_free( &ssl );",
          "808:     memset( &ssl, 0, sizeof( ssl ) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "807:     ssl_session_free( &ssn );",
          "",
          "---------------"
        ],
        "programs/ssl/ssl_server.c||programs/ssl/ssl_server.c": [
          "File: programs/ssl/ssl_server.c -> programs/ssl/ssl_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:     ssl_set_ca_chain( &ssl, srvcert.next, NULL, NULL );",
          "372:     ssl_set_own_cert( &ssl, &srvcert, &rsa );",
          "373:     ssl_set_dh_param( &ssl, my_dhm_P, my_dhm_G );",
          "375:     printf( \" ok\\n\" );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: #if defined(POLARSSL_DHM_C)",
          "375: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485:         len = ret;",
          "486:         printf( \" %d bytes read\\n\\n%s\", len, (char *) buf );",
          "487:     }",
          "",
          "[Removed Lines]",
          "488:     while( 0 );",
          "",
          "[Added Lines]",
          "490:         if( ret > 0 )",
          "491:             break;",
          "493:     while( 1 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531:     net_close( client_fd );",
          "532:     x509_free( &srvcert );",
          "533:     rsa_free( &rsa );",
          "534:     ssl_free( &ssl );",
          "547: #if defined(_WIN32)",
          "548:     printf( \"  Press Enter to exit this program.\\n\" );",
          "549:     fflush( stdout ); getchar();",
          "",
          "[Removed Lines]",
          "536:     cur = s_list_1st;",
          "537:     while( cur != NULL )",
          "538:     {",
          "539:         prv = cur;",
          "540:         cur = cur->next;",
          "541:         memset( prv, 0, sizeof( ssl_session ) );",
          "542:         free( prv );",
          "543:     }",
          "545:     memset( &ssl, 0, sizeof( ssl_context ) );",
          "",
          "[Added Lines]",
          "539:     ssl_session_free( &ssn );",
          "540:     ssl_session_free( s_list_1st );",
          "",
          "---------------"
        ],
        "programs/x509/cert_app.c||programs/x509/cert_app.c": [
          "File: programs/x509/cert_app.c -> programs/x509/cert_app.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:         printf( \"  . Peer certificate information    ...\\n\" );",
          "316:         if( ret == -1 )",
          "317:         {",
          "318:             printf( \" failed\\n  !  x509parse_cert_info returned %d\\n\\n\", ret );",
          "",
          "[Removed Lines]",
          "315:         ret = x509parse_cert_info( (char *) buf, sizeof( buf ) - 1, \"      \", ssl.peer_cert );",
          "",
          "[Added Lines]",
          "315:         ret = x509parse_cert_info( (char *) buf, sizeof( buf ) - 1, \"      \",",
          "316:                                    ssl.session->peer_cert );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332:         net_close( server_fd );",
          "333:     x509_free( &clicert );",
          "334:     rsa_free( &rsa );",
          "335:     ssl_free( &ssl );",
          "339: #if defined(_WIN32)",
          "340:     printf( \"  + Press Enter to exit this program.\\n\" );",
          "341:     fflush( stdout ); getchar();",
          "",
          "[Removed Lines]",
          "337:     memset( &ssl, 0, sizeof( ssl ) );",
          "",
          "[Added Lines]",
          "336:     ssl_session_free( &ssn );",
          "",
          "---------------"
        ]
      }
    }
  ]
}