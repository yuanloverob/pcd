{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6e08c4a5e609ddae15f2d537a7c1820558dd4a86",
      "candidate_info": {
        "commit_hash": "6e08c4a5e609ddae15f2d537a7c1820558dd4a86",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6e08c4a5e609ddae15f2d537a7c1820558dd4a86",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz001.test"
        ],
        "message": "Update test file dbfuzz001.test so that it works with SQLITE_ENABLE_OVERSIZE_CELL_CHECK builds.\n\nFossilOrigin-Name: 4371a0c46ee7bfbc0a1507796bd9eefd3371adad81b8dda214d018854316727b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 433d6ef637a10ee017b5d8cadd125a162cfedc9895ae862b8dde6dddb7eda59b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     |    496: 01 0d 3f 00 00 48 01 54 00 01 f7 01 ec 01 c5 01   ..?..H.T........",
          "169:     | end c4.db",
          "170:   }]",
          "174: # The DELETE query below deletes the very last cell from page 8.",
          "175: # Prior to a certain fix to sqlite3BtreeDelete() and because of the",
          "",
          "[Removed Lines]",
          "171:   db eval {PRAGMA writable_schema=on; PRAGMA integrity_check}",
          "172: } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "",
          "[Added Lines]",
          "171: } {}",
          "173: ifcapable !oversize_cell_check {",
          "174:   # Non SQLITE_ENABLE_OVERSIZE_CELL_CHECK builds:",
          "175:   do_test dbfuzz001-101a {",
          "176:     db eval {PRAGMA writable_schema=on; PRAGMA integrity_check}",
          "177:   } {/Fragmentation of 384 bytes reported as 0 on page 8/}",
          "178: } else {",
          "179:   # SQLITE_ENABLE_OVERSIZE_CELL_CHECK builds:",
          "180:   do_catchsql_test dbfuzz001-101b {",
          "181:     PRAGMA writable_schema=on;",
          "182:     PRAGMA integrity_check;",
          "183:   } {1 {database disk image is malformed}}",
          "184: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177: # cause a rebalance operation, which would leave the btree in a weird",
          "178: # state that would lead to segfaults and or assertion faults.",
          "179: #",
          "181:   DELETE FROM t3 WHERE x IS NOT NULL AND +rowid=6;",
          "184: # This is a dbfuzz2-generate test case that can cause a page with",
          "185: # pPage->nCell==0 to enter the balancer.",
          "",
          "[Removed Lines]",
          "180: do_execsql_test dbfuzz001-110 {",
          "182: } {}",
          "",
          "[Added Lines]",
          "192: set res {0 {}}",
          "193: ifcapable oversize_cell_check { set res {1 {database disk image is malformed}} }",
          "194: do_catchsql_test dbfuzz001-110 {",
          "196: } $res",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "270: } {1 {database disk image is malformed}}",
          "274:   sqlite3 db {}",
          "275:   db deserialize [decode_hexdb {",
          "276: | size 3584 pagesize 512 filename x/c02.db",
          "",
          "[Removed Lines]",
          "273: do_test dbfuzz001-110 {",
          "",
          "[Added Lines]",
          "287: do_test dbfuzz001-310 {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:   }]",
          "350: } {}",
          "353:   PRAGMA integrity_check;",
          "354: } {1 {database disk image is malformed}}",
          "357:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "358: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "352: do_catchsql_test dbfuzz001-120 {",
          "356: do_catchsql_test dbfuzz001-130 {",
          "",
          "[Added Lines]",
          "366: do_catchsql_test dbfuzz001-320 {",
          "370: do_catchsql_test dbfuzz001-330 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d331c7ab1fa42ab7bcd4e26cf8c60a9201621922",
      "candidate_info": {
        "commit_hash": "d331c7ab1fa42ab7bcd4e26cf8c60a9201621922",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d331c7ab1fa42ab7bcd4e26cf8c60a9201621922",
        "files": [
          "manifest",
          "manifest.uuid"
        ],
        "message": "Version 3.28.0\n\nFossilOrigin-Name: 884b4b7e502b4e991677b53971277adfaf0a04a284f8e483e2553d0f83156b50",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: af61a2fc45a0fa1277d7453779238b77de4c298a9f60714b7dc62ddca5874f80",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "178edcd774d21a1eab9e2b92d76c60950c4da894",
      "candidate_info": {
        "commit_hash": "178edcd774d21a1eab9e2b92d76c60950c4da894",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/178edcd774d21a1eab9e2b92d76c60950c4da894",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Update dbfuzz2 to set a maximum database size of 100MiB by default, but with the new --max-db-size N option to change that limit.\n\nFossilOrigin-Name: 21d6bb78ef2979d011b917d2d6519d7cd0009fcad83ed23ab2e9a5e02d8e51ab",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 30f08d58882819a69e353bcc1b6b349664bbfbe00aa1c115ba44a9fd899fcc5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: static int bVdbeDebug = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: static sqlite3_int64 szMax = 104857600;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   sqlite3 *db;",
          "79:   int rc;",
          "80:   int i;",
          "82:   if( eVerbosity>=1 ){",
          "83:     printf(\"************** nByte=%d ***************\\n\", (int)nByte);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   sqlite3_int64 x;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   sqlite3_deserialize(db, \"main\", a, nByte, nByte,",
          "93:         SQLITE_DESERIALIZE_RESIZEABLE |",
          "94:         SQLITE_DESERIALIZE_FREEONCLOSE);",
          "95:   if( bVdbeDebug ){",
          "96:     sqlite3_exec(db, \"PRAGMA vdbe_debug=ON\", 0, 0, 0);",
          "97:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   x = szMax;",
          "100:   sqlite3_file_control(db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &x);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:         bVdbeDebug = 1;",
          "151:         continue;",
          "152:       }",
          "153:       if( strcmp(z,\"max-stack\")==0",
          "154:        || strcmp(z,\"max-data\")==0",
          "155:        || strcmp(z,\"max-as\")==0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:       if( strcmp(z,\"max-db-size\")==0 ){",
          "160:         if( i+1==argc ){",
          "161:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "162:           exit(1);",
          "163:         }",
          "164:         szMax = strtol(argv[++i], 0, 0);",
          "165:         continue;",
          "166:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
      "candidate_info": {
        "commit_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0578084507ee2d5f951409b61029093e1408ec7b",
        "files": [
          "ext/fts3/fts3Int.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the assert_fts3_nc() macro so that it works for test builds that omit SQLITE_DEBUG.\n\nFossilOrigin-Name: b10df2b569e356551cf51ca179f307e4f8827413ee9feb886db1f1e0650e6c5f",
        "before_after_code_files": [
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: extern int sqlite3_fts3_may_be_corrupt;",
          "139: # define assert_fts3_nc(x) assert(sqlite3_fts3_may_be_corrupt || (x))",
          "140: #else",
          "",
          "[Removed Lines]",
          "137: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "137: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d82269ca8ccc13328af42cd9dad7edd565f9456",
      "candidate_info": {
        "commit_hash": "2d82269ca8ccc13328af42cd9dad7edd565f9456",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d82269ca8ccc13328af42cd9dad7edd565f9456",
        "files": [
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/rowvaluevtab.test"
        ],
        "message": "Fix a problem with row-value IN(...) operators and virtual tables.\n\nFossilOrigin-Name: aa57d7abac0bb92d4d5fd4e093a11cf8efc04e4eed748b2a400d01f137250649",
        "before_after_code_files": [
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/rowvaluevtab.test||test/rowvaluevtab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:   INSERT INTO vt0(vt0) VALUES('rebuild');",
          "194: }",
          "196: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: #-------------------------------------------------------------------------",
          "197: #",
          "198: reset_db",
          "199: do_execsql_test 7.0 {",
          "200:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "201:   INSERT INTO t1(rowid, x) VALUES(1, 'hello world');",
          "202:   INSERT INTO t1(rowid, x) VALUES(2, 'well said');",
          "203:   INSERT INTO t1(rowid, x) VALUES(3, 'hello said');",
          "204:   INSERT INTO t1(rowid, x) VALUES(4, 'well world');",
          "206:   CREATE TABLE t2 (a, b);",
          "207:   INSERT INTO t2 VALUES(1, 'hello');",
          "208:   INSERT INTO t2 VALUES(2, 'world');",
          "209:   INSERT INTO t2 VALUES(3, 'said');",
          "210:   INSERT INTO t2 VALUES(4, 'hello');",
          "211: }",
          "213: do_execsql_test 7.1 {",
          "214:   SELECT rowid FROM t1 WHERE (rowid, x) IN (SELECT a, b FROM t2);",
          "215: }",
          "217: do_execsql_test 7.2 {",
          "218:   SELECT rowid FROM t1 WHERE rowid=2 AND t1 = 'hello';",
          "219: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d1acf72ae1ea7484bb9c3a8630094f1a3a9597578c7b9d6e02fc0a4e3f59c57d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1307:       pTerm = pLoop->aLTerm[j];",
          "1308:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1309:         disableTerm(pLevel, pTerm);",
          "",
          "[Removed Lines]",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 ){",
          "",
          "[Added Lines]",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "1311:           sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "1312:       ){",
          "",
          "---------------"
        ],
        "test/rowvaluevtab.test||test/rowvaluevtab.test": [
          "File: test/rowvaluevtab.test -> test/rowvaluevtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 October 14",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set ::testprefix rowvaluevtab",
          "18: register_echo_module db",
          "20: do_execsql_test 1.0 {",
          "21:   CREATE TABLE t1(a, b, c);",
          "22:   CREATE INDEX t1b ON t1(b);",
          "23:   INSERT INTO t1 VALUES('one', 1, 1);",
          "24:   INSERT INTO t1 VALUES('two', 1, 2);",
          "25:   INSERT INTO t1 VALUES('three', 1, 3);",
          "26:   INSERT INTO t1 VALUES('four', 2, 1);",
          "27:   INSERT INTO t1 VALUES('five', 2, 2);",
          "28:   INSERT INTO t1 VALUES('six', 2, 3);",
          "29:   INSERT INTO t1 VALUES('seven', 3, 1);",
          "30:   INSERT INTO t1 VALUES('eight', 3, 2);",
          "31:   INSERT INTO t1 VALUES('nine', 3, 3);",
          "33:   WITH s(i) AS (",
          "34:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<10000",
          "35:   ) INSERT INTO t1 SELECT NULL, NULL, NULL FROM s;",
          "36:   CREATE VIRTUAL TABLE e1 USING echo(t1);",
          "37: }",
          "39: proc do_vfilter4_test {tn sql expected} {",
          "40:   set res [list]",
          "41:   db eval \"explain $sql\" {",
          "42:     if {$opcode==\"VFilter\"} {",
          "43:       lappend res $p4",
          "44:     }",
          "45:   }",
          "46:   uplevel [list do_test $tn [list set {} $res] [list {*}$expected]]",
          "47: }",
          "49: do_execsql_test 1.1 {",
          "50:   SELECT a FROM e1 WHERE (b, c) = (2, 2)",
          "51: } {five}",
          "52: do_vfilter4_test 1.1f {",
          "53:   SELECT a FROM e1 WHERE (b, c) = (?, ?)",
          "54: } {{SELECT rowid, a, b, c FROM 't1' WHERE b = ?}}",
          "56: do_execsql_test 1.2 {",
          "57:   SELECT a FROM e1 WHERE (b, c) > (2, 2)",
          "58: } {six seven eight nine}",
          "59: do_vfilter4_test 1.2f {",
          "60:   SELECT a FROM e1 WHERE (b, c) > (2, 2)",
          "61: } {",
          "62:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ?}",
          "63: }",
          "65: do_execsql_test 1.3 {",
          "66:   SELECT a FROM e1 WHERE (b, c) >= (2, 2)",
          "67: } {five six seven eight nine}",
          "68: do_vfilter4_test 1.3f {",
          "69:   SELECT a FROM e1 WHERE (b, c) >= (2, 2)",
          "70: } {",
          "71:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ?}",
          "72: }",
          "74: do_execsql_test 1.3 {",
          "75:   SELECT a FROM e1 WHERE (b, c) BETWEEN (1, 2) AND (2, 3)",
          "76: } {two three four five six}",
          "77: do_vfilter4_test 1.3f {",
          "78:   SELECT a FROM e1 WHERE (b, c) BETWEEN (1, 2) AND (2, 3)",
          "79: } {",
          "80:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ? AND b <= ?}",
          "81: }",
          "83: do_execsql_test 1.4 {",
          "84:   SELECT a FROM e1 WHERE (b, c) IN ( VALUES(2, 2) )",
          "85: } {five}",
          "86: do_vfilter4_test 1.4f {",
          "87:   SELECT a FROM e1 WHERE (b, c) IN ( VALUES(2, 2) )",
          "88: } {{SELECT rowid, a, b, c FROM 't1' WHERE b = ?}}",
          "90: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}