{
  "cve_id": "CVE-2018-10021",
  "cve_desc": "drivers/scsi/libsas/sas_scsi_host.c in the Linux kernel before 4.16 allows local users to cause a denial of service (ata qc leak) by triggering certain failure conditions. NOTE: a third party disputes the relevance of this report because the failure can only occur for physically proximate attackers who unplug SAS Host Bus Adapter cables",
  "repo": "torvalds/linux",
  "patch_hash": "318aaf34f1179b39fa9c30fa0f3288b645beee39",
  "patch_info": {
    "commit_hash": "318aaf34f1179b39fa9c30fa0f3288b645beee39",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/318aaf34f1179b39fa9c30fa0f3288b645beee39",
    "files": [
      "drivers/scsi/libsas/sas_scsi_host.c"
    ],
    "message": "scsi: libsas: defer ata device eh commands to libata\n\nWhen ata device doing EH, some commands still attached with tasks are\nnot passed to libata when abort failed or recover failed, so libata did\nnot handle these commands. After these commands done, sas task is freed,\nbut ata qc is not freed. This will cause ata qc leak and trigger a\nwarning like below:\n\nWARNING: CPU: 0 PID: 28512 at drivers/ata/libata-eh.c:4037\nata_eh_finish+0xb4/0xcc\nCPU: 0 PID: 28512 Comm: kworker/u32:2 Tainted: G     W  OE 4.14.0#1\n......\nCall trace:\n[<ffff0000088b7bd0>] ata_eh_finish+0xb4/0xcc\n[<ffff0000088b8420>] ata_do_eh+0xc4/0xd8\n[<ffff0000088b8478>] ata_std_error_handler+0x44/0x8c\n[<ffff0000088b8068>] ata_scsi_port_error_handler+0x480/0x694\n[<ffff000008875fc4>] async_sas_ata_eh+0x4c/0x80\n[<ffff0000080f6be8>] async_run_entry_fn+0x4c/0x170\n[<ffff0000080ebd70>] process_one_work+0x144/0x390\n[<ffff0000080ec100>] worker_thread+0x144/0x418\n[<ffff0000080f2c98>] kthread+0x10c/0x138\n[<ffff0000080855dc>] ret_from_fork+0x10/0x18\n\nIf ata qc leaked too many, ata tag allocation will fail and io blocked\nfor ever.\n\nAs suggested by Dan Williams, defer ata device commands to libata and\nmerge sas_eh_finish_cmd() with sas_eh_defer_cmd(). libata will handle\nata qcs correctly after this.\n\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nCC: Xiaofei Tan <tanxiaofei@huawei.com>\nCC: John Garry <john.garry@huawei.com>\nCC: Dan Williams <dan.j.williams@intel.com>\nReviewed-by: Dan Williams <dan.j.williams@intel.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/libsas/sas_scsi_host.c||drivers/scsi/libsas/sas_scsi_host.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/libsas/sas_scsi_host.c||drivers/scsi/libsas/sas_scsi_host.c": [
      "File: drivers/scsi/libsas/sas_scsi_host.c -> drivers/scsi/libsas/sas_scsi_host.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "223: static void sas_eh_finish_cmd(struct scsi_cmnd *cmd)",
      "224: {",
      "225:  struct sas_ha_struct *sas_ha = SHOST_TO_SAS_HA(cmd->device->host);",
      "226:  struct sas_task *task = TO_SAS_TASK(cmd);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:  struct domain_device *dev = cmd_to_domain_dev(cmd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "232:  sas_end_task(cmd, task);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "235:  if (dev_is_sata(dev)) {",
      "239:   list_move_tail(&cmd->eh_entry, &sas_ha->eh_ata_q);",
      "240:   return;",
      "241:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "238:  scsi_eh_finish_cmd(cmd, &sas_ha->eh_done_q);",
      "239: }",
      "257: static void sas_scsi_clear_queue_lu(struct list_head *error_q, struct scsi_cmnd *my_cmd)",
      "258: {",
      "259:  struct scsi_cmnd *cmd, *n;",
      "",
      "[Removed Lines]",
      "241: static void sas_eh_defer_cmd(struct scsi_cmnd *cmd)",
      "242: {",
      "243:  struct domain_device *dev = cmd_to_domain_dev(cmd);",
      "244:  struct sas_ha_struct *ha = dev->port->ha;",
      "245:  struct sas_task *task = TO_SAS_TASK(cmd);",
      "247:  if (!dev_is_sata(dev)) {",
      "248:   sas_eh_finish_cmd(cmd);",
      "249:   return;",
      "250:  }",
      "253:  sas_end_task(cmd, task);",
      "254:  list_move_tail(&cmd->eh_entry, &ha->eh_ata_q);",
      "255: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "261:  list_for_each_entry_safe(cmd, n, error_q, eh_entry) {",
      "262:   if (cmd->device->sdev_target == my_cmd->device->sdev_target &&",
      "263:       cmd->device->lun == my_cmd->device->lun)",
      "265:  }",
      "266: }",
      "",
      "[Removed Lines]",
      "264:    sas_eh_defer_cmd(cmd);",
      "",
      "[Added Lines]",
      "257:    sas_eh_finish_cmd(cmd);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "618:   case TASK_IS_DONE:",
      "619:    SAS_DPRINTK(\"%s: task 0x%p is done\\n\", __func__,",
      "620:         task);",
      "622:    continue;",
      "623:   case TASK_IS_ABORTED:",
      "624:    SAS_DPRINTK(\"%s: task 0x%p is aborted\\n\",",
      "625:         __func__, task);",
      "627:    continue;",
      "628:   case TASK_IS_AT_LU:",
      "629:    SAS_DPRINTK(\"task 0x%p is at LU: lu recover\\n\", task);",
      "",
      "[Removed Lines]",
      "621:    sas_eh_defer_cmd(cmd);",
      "626:    sas_eh_defer_cmd(cmd);",
      "",
      "[Added Lines]",
      "614:    sas_eh_finish_cmd(cmd);",
      "619:    sas_eh_finish_cmd(cmd);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "634:          \"recovered\\n\",",
      "635:          SAS_ADDR(task->dev),",
      "636:          cmd->device->lun);",
      "638:     sas_scsi_clear_queue_lu(work_q, cmd);",
      "639:     goto Again;",
      "640:    }",
      "",
      "[Removed Lines]",
      "637:     sas_eh_defer_cmd(cmd);",
      "",
      "[Added Lines]",
      "630:     sas_eh_finish_cmd(cmd);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "033b7a230cfa759d1b582fa46bf2cd54db406cf3",
      "candidate_info": {
        "commit_hash": "033b7a230cfa759d1b582fa46bf2cd54db406cf3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/033b7a230cfa759d1b582fa46bf2cd54db406cf3",
        "files": [
          "drivers/gpu/drm/i915/i915_irq.c",
          "drivers/gpu/drm/i915/intel_display.c",
          "drivers/gpu/drm/i915/intel_drv.h",
          "drivers/gpu/drm/i915/intel_pipe_crc.c"
        ],
        "message": "drm/i915: Handle pipe CRC around enabling/disabling pipe.\n\nThis will get rid of the following error:\n[   74.730271] WARNING: CPU: 4 PID: 0 at drivers/gpu/drm/drm_vblank.c:614 drm_calc_vbltimestamp_from_scanoutpos+0x13e/0x2f0\n[   74.730311] Modules linked in: vgem snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic i915 x86_pkg_temp_thermal intel_powerclamp coretemp snd_hda_intel crct10dif_pclmul snd_hda_codec crc32_pclmul snd_hwdep broadcom ghash_clmulni_intel snd_hda_core bcm_phy_lib snd_pcm tg3 lpc_ich mei_me mei prime_numbers\n[   74.730353] CPU: 4 PID: 0 Comm: swapper/4 Tainted: G     U           4.16.0-rc2-CI-CI_DRM_3822+ #1\n[   74.730355] Hardware name: Dell Inc. XPS 8300  /0Y2MRG, BIOS A06 10/17/2011\n[   74.730359] RIP: 0010:drm_calc_vbltimestamp_from_scanoutpos+0x13e/0x2f0\n[   74.730361] RSP: 0018:ffff88022fb03d10 EFLAGS: 00010086\n[   74.730365] RAX: ffffffffa0291d20 RBX: ffff88021a180000 RCX: 0000000000000001\n[   74.730367] RDX: ffffffff820e7db8 RSI: 0000000000000001 RDI: ffffffff82068cea\n[   74.730369] RBP: ffff88022fb03d70 R08: 0000000000000000 R09: ffffffff815d26d0\n[   74.730371] R10: 0000000000000000 R11: ffffffffa0161ca0 R12: 0000000000000001\n[   74.730373] R13: ffff880212448008 R14: ffff880212448330 R15: 0000000000000000\n[   74.730376] FS:  0000000000000000(0000) GS:ffff88022fb00000(0000) knlGS:0000000000000000\n[   74.730378] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[   74.730380] CR2: 000055edcbec9000 CR3: 0000000002210001 CR4: 00000000000606e0\n[   74.730382] Call Trace:\n[   74.730385]  <IRQ>\n[   74.730397]  drm_get_last_vbltimestamp+0x36/0x50\n[   74.730401]  drm_update_vblank_count+0x64/0x240\n[   74.730409]  drm_crtc_accurate_vblank_count+0x41/0x90\n[   74.730453]  display_pipe_crc_irq_handler+0x176/0x220 [i915]\n[   74.730497]  i9xx_pipe_crc_irq_handler+0xfe/0x150 [i915]\n[   74.730537]  ironlake_irq_handler+0x618/0xa30 [i915]\n[   74.730548]  __handle_irq_event_percpu+0x3c/0x340\n[   74.730556]  handle_irq_event_percpu+0x1b/0x50\n[   74.730561]  handle_irq_event+0x2f/0x50\n[   74.730566]  handle_edge_irq+0xe4/0x1b0\n[   74.730572]  handle_irq+0x11/0x20\n[   74.730576]  do_IRQ+0x5e/0x120\n[   74.730584]  common_interrupt+0x84/0x84\n[   74.730586]  </IRQ>\n[   74.730591] RIP: 0010:cpuidle_enter_state+0xaa/0x350\n[   74.730593] RSP: 0018:ffffc9000008beb8 EFLAGS: 00000212 ORIG_RAX: ffffffffffffffde\n[   74.730597] RAX: ffff880226b80040 RBX: 000000000031fc3e RCX: 0000000000000001\n[   74.730599] RDX: 0000000000000000 RSI: ffffffff8210fb59 RDI: ffffffff820c02e7\n[   74.730601] RBP: 0000000000000004 R08: 00000000000040af R09: 0000000000000018\n[   74.730603] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000004\n[   74.730606] R13: ffffe8ffffd00430 R14: 0000001166120bf4 R15: ffffffff82294460\n[   74.730621]  ? cpuidle_enter_state+0xa6/0x350\n[   74.730629]  do_idle+0x188/0x1d0\n[   74.730636]  cpu_startup_entry+0x14/0x20\n[   74.730641]  start_secondary+0x129/0x160\n[   74.730646]  secondary_startup_64+0xa5/0xb0\n[   74.730660] Code: e1 48 c7 c2 b8 7d 0e 82 be 01 00 00 00 48 c7 c7 ea 8c 06 82 e8 64 ec ff ff 48 8b 83 c8 07 00 00 48 83 78 28 00 0f 84 e2 fe ff ff <0f> 0b 45 31 ed e9 db fe ff ff 41 b8 d3 4d 62 10 89 c8 6a 03 41\n[   74.730754] ---[ end trace 14b1345705b68565 ]---\n\nChanges since v1:\n- Don't try to apply CRC workaround when enabling pipe, it should already be enabled.\nChanges since v2:\n- Make crc functions for !DEBUGFS case inline.\n- Pass intel_crtc to crc functions.\n- Add comments to callsites.\nChanges since v3:\n- Cache selected source to pipe_crc->source.\n- Set pipe_crc->skipped to MIN_INT during disable to close a race condition.\nChanges since v4:\n- Handle fallout from setting pipe_crc->source in irq handler.\n\nCc: Marta L\u00f6fstedt <marta.lofstedt@intel.com>\nReported-by: Marta L\u00f6fstedt <marta.lofstedt@intel.com>\nBugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=105185\nSigned-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20180308120202.52446-1-maarten.lankhorst@linux.intel.com\nReviewed-by: Ville Syrj\u00e4l\u00e4 <ville.syrjala@linux.intel.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_irq.c||drivers/gpu/drm/i915/i915_irq.c",
          "drivers/gpu/drm/i915/intel_display.c||drivers/gpu/drm/i915/intel_display.c",
          "drivers/gpu/drm/i915/intel_drv.h||drivers/gpu/drm/i915/intel_drv.h",
          "drivers/gpu/drm/i915/intel_pipe_crc.c||drivers/gpu/drm/i915/intel_pipe_crc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_irq.c||drivers/gpu/drm/i915/i915_irq.c": [
          "File: drivers/gpu/drm/i915/i915_irq.c -> drivers/gpu/drm/i915/i915_irq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1627:  int head, tail;",
          "1629:  spin_lock(&pipe_crc->lock);",
          "1631:   if (!pipe_crc->entries) {",
          "1632:    spin_unlock(&pipe_crc->lock);",
          "1633:    DRM_DEBUG_KMS(\"spurious interrupt\\n\");",
          "",
          "[Removed Lines]",
          "1630:  if (pipe_crc->source) {",
          "",
          "[Added Lines]",
          "1630:  if (pipe_crc->source && !crtc->base.crc.opened) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1671:       (INTEL_GEN(dev_priv) >= 8 && pipe_crc->skipped == 1)) {",
          "1672:    pipe_crc->skipped++;",
          "1673:    spin_unlock(&pipe_crc->lock);",
          "",
          "[Removed Lines]",
          "1670:   if (pipe_crc->skipped == 0 ||",
          "",
          "[Added Lines]",
          "1670:   if (pipe_crc->skipped <= 0 ||",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/intel_display.c||drivers/gpu/drm/i915/intel_display.c": [
          "File: drivers/gpu/drm/i915/intel_display.c -> drivers/gpu/drm/i915/intel_display.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "12145:  if (modeset) {",
          "12146:   update_scanline_offset(intel_crtc);",
          "12147:   dev_priv->display.crtc_enable(pipe_config, state);",
          "12148:  } else {",
          "12149:   intel_pre_plane_update(to_intel_crtc_state(old_crtc_state),",
          "12150:            pipe_config);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12150:   intel_crtc_enable_pipe_crc(intel_crtc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12326:   if (old_crtc_state->active) {",
          "12327:    intel_crtc_disable_planes(crtc, old_crtc_state->plane_mask);",
          "12328:    dev_priv->display.crtc_disable(to_intel_crtc_state(old_crtc_state), state);",
          "12329:    intel_crtc->active = false;",
          "12330:    intel_fbc_disable(intel_crtc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12336:    intel_crtc_disable_pipe_crc(intel_crtc);",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/intel_drv.h||drivers/gpu/drm/i915/intel_drv.h": [
          "File: drivers/gpu/drm/i915/intel_drv.h -> drivers/gpu/drm/i915/intel_drv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2136: #ifdef CONFIG_DEBUG_FS",
          "2137: int intel_crtc_set_crc_source(struct drm_crtc *crtc, const char *source_name,",
          "2138:          size_t *values_cnt);",
          "2139: #else",
          "2140: #define intel_crtc_set_crc_source NULL",
          "2141: #endif",
          "2142: extern const struct file_operations i915_display_crc_ctl_fops;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2139: void intel_crtc_disable_pipe_crc(struct intel_crtc *crtc);",
          "2140: void intel_crtc_enable_pipe_crc(struct intel_crtc *crtc);",
          "2143: static inline void intel_crtc_disable_pipe_crc(struct intel_crtc *crtc)",
          "2144: {",
          "2145: }",
          "2147: static inline void intel_crtc_enable_pipe_crc(struct intel_crtc *crtc)",
          "2148: {",
          "2149: }",
          "",
          "---------------"
        ],
        "drivers/gpu/drm/i915/intel_pipe_crc.c||drivers/gpu/drm/i915/intel_pipe_crc.c": [
          "File: drivers/gpu/drm/i915/intel_pipe_crc.c -> drivers/gpu/drm/i915/intel_pipe_crc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569: static int ivb_pipe_crc_ctl_reg(struct drm_i915_private *dev_priv,",
          "570:     enum pipe pipe,",
          "571:     enum intel_pipe_crc_source *source,",
          "573: {",
          "574:  if (*source == INTEL_PIPE_CRC_SOURCE_AUTO)",
          "",
          "[Removed Lines]",
          "572:     uint32_t *val)",
          "",
          "[Added Lines]",
          "572:     uint32_t *val,",
          "573:     bool set_wa)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "583:   break;",
          "584:  case INTEL_PIPE_CRC_SOURCE_PF:",
          "586:        IS_BROADWELL(dev_priv)) && pipe == PIPE_A)",
          "587:    hsw_pipe_A_crc_wa(dev_priv, true);",
          "",
          "[Removed Lines]",
          "585:   if ((IS_HASWELL(dev_priv) ||",
          "",
          "[Added Lines]",
          "586:   if (set_wa && (IS_HASWELL(dev_priv) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "601: static int get_new_crc_ctl_reg(struct drm_i915_private *dev_priv,",
          "602:           enum pipe pipe,",
          "604: {",
          "605:  if (IS_GEN2(dev_priv))",
          "606:   return i8xx_pipe_crc_ctl_reg(source, val);",
          "",
          "[Removed Lines]",
          "603:           enum intel_pipe_crc_source *source, u32 *val)",
          "",
          "[Added Lines]",
          "604:           enum intel_pipe_crc_source *source, u32 *val,",
          "605:           bool set_wa)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "611:  else if (IS_GEN5(dev_priv) || IS_GEN6(dev_priv))",
          "612:   return ilk_pipe_crc_ctl_reg(source, val);",
          "613:  else",
          "615: }",
          "617: static int pipe_crc_set_source(struct drm_i915_private *dev_priv,",
          "",
          "[Removed Lines]",
          "614:   return ivb_pipe_crc_ctl_reg(dev_priv, pipe, source, val);",
          "",
          "[Added Lines]",
          "616:   return ivb_pipe_crc_ctl_reg(dev_priv, pipe, source, val, set_wa);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "636:   return -EIO;",
          "637:  }",
          "640:  if (ret != 0)",
          "641:   goto out;",
          "",
          "[Removed Lines]",
          "639:  ret = get_new_crc_ctl_reg(dev_priv, pipe, &source, &val);",
          "",
          "[Added Lines]",
          "641:  ret = get_new_crc_ctl_reg(dev_priv, pipe, &source, &val, true);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "916: int intel_crtc_set_crc_source(struct drm_crtc *crtc, const char *source_name,",
          "917:          size_t *values_cnt)",
          "918: {",
          "920:  struct intel_pipe_crc *pipe_crc = &dev_priv->pipe_crc[crtc->index];",
          "921:  enum intel_display_power_domain power_domain;",
          "922:  enum intel_pipe_crc_source source;",
          "",
          "[Removed Lines]",
          "919:  struct drm_i915_private *dev_priv = crtc->dev->dev_private;",
          "",
          "[Added Lines]",
          "921:  struct drm_i915_private *dev_priv = to_i915(crtc->dev);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "934:   return -EIO;",
          "935:  }",
          "938:  if (ret != 0)",
          "939:   goto out;",
          "941:  I915_WRITE(PIPE_CRC_CTL(crtc->index), val);",
          "942:  POSTING_READ(PIPE_CRC_CTL(crtc->index));",
          "",
          "[Removed Lines]",
          "937:  ret = get_new_crc_ctl_reg(dev_priv, crtc->index, &source, &val);",
          "",
          "[Added Lines]",
          "939:  ret = get_new_crc_ctl_reg(dev_priv, crtc->index, &source, &val, true);",
          "943:  pipe_crc->source = source;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "960:  return ret;",
          "961: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "966: void intel_crtc_enable_pipe_crc(struct intel_crtc *intel_crtc)",
          "967: {",
          "968:  struct drm_crtc *crtc = &intel_crtc->base;",
          "969:  struct drm_i915_private *dev_priv = to_i915(crtc->dev);",
          "970:  struct intel_pipe_crc *pipe_crc = &dev_priv->pipe_crc[crtc->index];",
          "971:  u32 val = 0;",
          "973:  if (!crtc->crc.opened)",
          "974:   return;",
          "976:  if (get_new_crc_ctl_reg(dev_priv, crtc->index, &pipe_crc->source, &val, false) < 0)",
          "977:   return;",
          "980:  pipe_crc->skipped = 0;",
          "982:  I915_WRITE(PIPE_CRC_CTL(crtc->index), val);",
          "983:  POSTING_READ(PIPE_CRC_CTL(crtc->index));",
          "984: }",
          "986: void intel_crtc_disable_pipe_crc(struct intel_crtc *intel_crtc)",
          "987: {",
          "988:  struct drm_crtc *crtc = &intel_crtc->base;",
          "989:  struct drm_i915_private *dev_priv = to_i915(crtc->dev);",
          "990:  struct intel_pipe_crc *pipe_crc = &dev_priv->pipe_crc[crtc->index];",
          "993:  spin_lock_irq(&pipe_crc->lock);",
          "994:  pipe_crc->skipped = INT_MIN;",
          "995:  spin_unlock_irq(&pipe_crc->lock);",
          "997:  I915_WRITE(PIPE_CRC_CTL(crtc->index), 0);",
          "998:  POSTING_READ(PIPE_CRC_CTL(crtc->index));",
          "999:  synchronize_irq(dev_priv->drm.irq);",
          "1000: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "864b75f9d6b0100bb24fdd9a20d156e7cda9b5ae",
      "candidate_info": {
        "commit_hash": "864b75f9d6b0100bb24fdd9a20d156e7cda9b5ae",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/864b75f9d6b0100bb24fdd9a20d156e7cda9b5ae",
        "files": [
          "mm/page_alloc.c"
        ],
        "message": "mm/page_alloc: fix memmap_init_zone pageblock alignment\n\nCommit b92df1de5d28 (\"mm: page_alloc: skip over regions of invalid pfns\nwhere possible\") introduced a bug where move_freepages() triggers a\nVM_BUG_ON() on uninitialized page structure due to pageblock alignment.\nTo fix this, simply align the skipped pfns in memmap_init_zone() the\nsame way as in move_freepages_block().\n\nSeen in one of the RHEL reports:\n\n  crash> log | grep -e BUG -e RIP -e Call.Trace -e move_freepages_block -e rmqueue -e freelist -A1\n  kernel BUG at mm/page_alloc.c:1389!\n  invalid opcode: 0000 [#1] SMP\n  --\n  RIP: 0010:[<ffffffff8118833e>]  [<ffffffff8118833e>] move_freepages+0x15e/0x160\n  RSP: 0018:ffff88054d727688  EFLAGS: 00010087\n  --\n  Call Trace:\n   [<ffffffff811883b3>] move_freepages_block+0x73/0x80\n   [<ffffffff81189e63>] __rmqueue+0x263/0x460\n   [<ffffffff8118c781>] get_page_from_freelist+0x7e1/0x9e0\n   [<ffffffff8118caf6>] __alloc_pages_nodemask+0x176/0x420\n  --\n  RIP  [<ffffffff8118833e>] move_freepages+0x15e/0x160\n   RSP <ffff88054d727688>\n\n  crash> page_init_bug -v | grep RAM\n  <struct resource 0xffff88067fffd2f8>          1000 -        9bfff\tSystem RAM (620.00 KiB)\n  <struct resource 0xffff88067fffd3a0>        100000 -     430bffff\tSystem RAM (  1.05 GiB = 1071.75 MiB = 1097472.00 KiB)\n  <struct resource 0xffff88067fffd410>      4b0c8000 -     4bf9cfff\tSystem RAM ( 14.83 MiB = 15188.00 KiB)\n  <struct resource 0xffff88067fffd480>      4bfac000 -     646b1fff\tSystem RAM (391.02 MiB = 400408.00 KiB)\n  <struct resource 0xffff88067fffd560>      7b788000 -     7b7fffff\tSystem RAM (480.00 KiB)\n  <struct resource 0xffff88067fffd640>     100000000 -    67fffffff\tSystem RAM ( 22.00 GiB)\n\n  crash> page_init_bug | head -6\n  <struct resource 0xffff88067fffd560>      7b788000 -     7b7fffff\tSystem RAM (480.00 KiB)\n  <struct page 0xffffea0001ede200>   1fffff00000000  0 <struct pglist_data 0xffff88047ffd9000> 1 <struct zone 0xffff88047ffd9800> DMA32          4096    1048575\n  <struct page 0xffffea0001ede200> 505736 505344 <struct page 0xffffea0001ed8000> 505855 <struct page 0xffffea0001edffc0>\n  <struct page 0xffffea0001ed8000>                0  0 <struct pglist_data 0xffff88047ffd9000> 0 <struct zone 0xffff88047ffd9000> DMA               1       4095\n  <struct page 0xffffea0001edffc0>   1fffff00000400  0 <struct pglist_data 0xffff88047ffd9000> 1 <struct zone 0xffff88047ffd9800> DMA32          4096    1048575\n  BUG, zones differ!\n\nNote that this range follows two not populated sections\n68000000-77ffffff in this zone.  7b788000-7b7fffff is the first one\nafter a gap.  This makes memmap_init_zone() skip all the pfns up to the\nbeginning of this range.  But this range is not pageblock (2M) aligned.\nIn fact no range has to be.\n\n  crash> kmem -p 77fff000 78000000 7b5ff000 7b600000 7b787000 7b788000\n        PAGE        PHYSICAL      MAPPING       INDEX CNT FLAGS\n  ffffea0001e00000  78000000                0        0  0 0\n  ffffea0001ed7fc0  7b5ff000                0        0  0 0\n  ffffea0001ed8000  7b600000                0        0  0 0\t<<<<\n  ffffea0001ede1c0  7b787000                0        0  0 0\n  ffffea0001ede200  7b788000                0        0  1 1fffff00000000\n\nTop part of page flags should contain nodeid and zonenr, which is not\nthe case for page ffffea0001ed8000 here (<<<<).\n\n  crash> log | grep -o fffea0001ed[^\\ ]* | sort -u\n  fffea0001ed8000\n  fffea0001eded20\n  fffea0001edffc0\n\n  crash> bt -r | grep -o fffea0001ed[^\\ ]* | sort -u\n  fffea0001ed8000\n  fffea0001eded00\n  fffea0001eded20\n  fffea0001edffc0\n\nInitialization of the whole beginning of the section is skipped up to\nthe start of the range due to the commit b92df1de5d28.  Now any code\ncalling move_freepages_block() (like reusing the page from a freelist as\nin this example) with a page from the beginning of the range will get\nthe page rounded down to start_page ffffea0001ed8000 and passed to\nmove_freepages() which crashes on assertion getting wrong zonenr.\n\n  >         VM_BUG_ON(page_zone(start_page) != page_zone(end_page));\n\nNote, page_zone() derives the zone from page flags here.\n\nFrom similar machine before commit b92df1de5d28:\n\n  crash> kmem -p 77fff000 78000000 7b5ff000 7b600000 7b7fe000 7b7ff000\n        PAGE        PHYSICAL      MAPPING       INDEX CNT FLAGS\n  fffff73941e00000  78000000                0        0  1 1fffff00000000\n  fffff73941ed7fc0  7b5ff000                0        0  1 1fffff00000000\n  fffff73941ed8000  7b600000                0        0  1 1fffff00000000\n  fffff73941edff80  7b7fe000                0        0  1 1fffff00000000\n  fffff73941edffc0  7b7ff000 ffff8e67e04d3ae0     ad84  1 1fffff00020068 uptodate,lru,active,mappedtodisk\n\nAll the pages since the beginning of the section are initialized.\nmove_freepages()' not gonna blow up.\n\nThe same machine with this fix applied:\n\n  crash> kmem -p 77fff000 78000000 7b5ff000 7b600000 7b7fe000 7b7ff000\n        PAGE        PHYSICAL      MAPPING       INDEX CNT FLAGS\n  ffffea0001e00000  78000000                0        0  0 0\n  ffffea0001e00000  7b5ff000                0        0  0 0\n  ffffea0001ed8000  7b600000                0        0  1 1fffff00000000\n  ffffea0001edff80  7b7fe000                0        0  1 1fffff00000000\n  ffffea0001edffc0  7b7ff000 ffff88017fb13720        8  2 1fffff00020068 uptodate,lru,active,mappedtodisk\n\nAt least the bare minimum of pages is initialized preventing the crash\nas well.\n\nCustomers started to report this as soon as 7.4 (where b92df1de5d28 was\nmerged in RHEL) was released.  I remember reports from\nSeptember/October-ish times.  It's not easily reproduced and happens on\na handful of machines only.  I guess that's why.  But that does not make\nit less serious, I think.\n\nThough there actually is a report here:\n  https://bugzilla.kernel.org/show_bug.cgi?id=196443\n\nAnd there are reports for Fedora from July:\n  https://bugzilla.redhat.com/show_bug.cgi?id=1473242\nand CentOS:\n  https://bugs.centos.org/view.php?id=13964\nand we internally track several dozens reports for RHEL bug\n  https://bugzilla.redhat.com/show_bug.cgi?id=1525121\n\nLink: http://lkml.kernel.org/r/0485727b2e82da7efbce5f6ba42524b429d0391a.1520011945.git.neelx@redhat.com\nFixes: b92df1de5d28 (\"mm: page_alloc: skip over regions of invalid pfns where possible\")\nSigned-off-by: Daniel Vacek <neelx@redhat.com>\nCc: Mel Gorman <mgorman@techsingularity.net>\nCc: Michal Hocko <mhocko@suse.com>\nCc: Paul Burton <paul.burton@imgtec.com>\nCc: Pavel Tatashin <pasha.tatashin@oracle.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/page_alloc.c||mm/page_alloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/page_alloc.c||mm/page_alloc.c": [
          "File: mm/page_alloc.c -> mm/page_alloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5365: #endif",
          "5366:    continue;",
          "5367:   }",
          "",
          "[Removed Lines]",
          "5364:    pfn = memblock_next_valid_pfn(pfn, end_pfn) - 1;",
          "",
          "[Added Lines]",
          "5368:    pfn = (memblock_next_valid_pfn(pfn, end_pfn) &",
          "5369:      ~(pageblock_nr_pages-1)) - 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75a4598209cbe45540baa316c3b51d9db222e96e",
      "candidate_info": {
        "commit_hash": "75a4598209cbe45540baa316c3b51d9db222e96e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/75a4598209cbe45540baa316c3b51d9db222e96e",
        "files": [
          "drivers/infiniband/hw/mlx5/qp.c"
        ],
        "message": "RDMA/mlx5: Fix NULL dereference while accessing XRC_TGT QPs\n\nmlx5 modify_qp() relies on FW that the error will be thrown if wrong\nstate is supplied. The missing check in FW causes the following crash\nwhile using XRC_TGT QPs.\n\n[   14.769632] BUG: unable to handle kernel NULL pointer dereference at (null)\n[   14.771085] IP: mlx5_ib_modify_qp+0xf60/0x13f0\n[   14.771894] PGD 800000001472e067 P4D 800000001472e067 PUD 14529067 PMD 0\n[   14.773126] Oops: 0002 [#1] SMP PTI\n[   14.773763] CPU: 0 PID: 365 Comm: ubsan Not tainted 4.16.0-rc1-00038-g8151138c0793 #119\n[   14.775192] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.7.5-0-ge51488c-20140602_164612-nilsson.home.kraxel.org 04/01/2014\n[   14.777522] RIP: 0010:mlx5_ib_modify_qp+0xf60/0x13f0\n[   14.778417] RSP: 0018:ffffbf48001c7bd8 EFLAGS: 00010246\n[   14.779346] RAX: 0000000000000000 RBX: ffff9a8f9447d400 RCX: 0000000000000000\n[   14.780643] RDX: 0000000000000000 RSI: 000000000000000a RDI: 0000000000000000\n[   14.781930] RBP: 0000000000000000 R08: 00000000000217b0 R09: ffffffffbc9c1504\n[   14.783214] R10: fffff4a180519480 R11: ffff9a8f94523600 R12: ffff9a8f9493e240\n[   14.784507] R13: ffff9a8f9447d738 R14: 000000000000050a R15: 0000000000000000\n[   14.785800] FS:  00007f545b466700(0000) GS:ffff9a8f9fc00000(0000) knlGS:0000000000000000\n[   14.787073] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[   14.787792] CR2: 0000000000000000 CR3: 00000000144be000 CR4: 00000000000006b0\n[   14.788689] Call Trace:\n[   14.789007]  _ib_modify_qp+0x71/0x120\n[   14.789475]  modify_qp.isra.20+0x207/0x2f0\n[   14.790010]  ib_uverbs_modify_qp+0x90/0xe0\n[   14.790532]  ib_uverbs_write+0x1d2/0x3c0\n[   14.791049]  ? __handle_mm_fault+0x93c/0xe40\n[   14.791644]  __vfs_write+0x36/0x180\n[   14.792096]  ? handle_mm_fault+0xc1/0x210\n[   14.792601]  vfs_write+0xad/0x1e0\n[   14.793018]  SyS_write+0x52/0xc0\n[   14.793422]  do_syscall_64+0x75/0x180\n[   14.793888]  entry_SYSCALL_64_after_hwframe+0x21/0x86\n[   14.794527] RIP: 0033:0x7f545ad76099\n[   14.794975] RSP: 002b:00007ffd78787468 EFLAGS: 00000287 ORIG_RAX: 0000000000000001\n[   14.795958] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f545ad76099\n[   14.797075] RDX: 0000000000000078 RSI: 0000000020009000 RDI: 0000000000000003\n[   14.798140] RBP: 00007ffd78787470 R08: 00007ffd78787480 R09: 00007ffd78787480\n[   14.799207] R10: 00007ffd78787480 R11: 0000000000000287 R12: 00005599ada98760\n[   14.800277] R13: 00007ffd78787560 R14: 0000000000000000 R15: 0000000000000000\n[   14.801341] Code: 4c 8b 1c 24 48 8b 83 70 02 00 00 48 c7 83 cc 02 00\n00 00 00 00 00 48 c7 83 24 03 00 00 00 00 00 00 c7 83 2c 03 00 00 00 00\n00 00 <c7> 00 00 00 00 00 48 8b 83 70 02 00 00 c7 40 04 00 00 00 00 4c\n[   14.804012] RIP: mlx5_ib_modify_qp+0xf60/0x13f0 RSP: ffffbf48001c7bd8\n[   14.804838] CR2: 0000000000000000\n[   14.805288] ---[ end trace 3f1da0df5c8b7c37 ]---\n\nCc: syzkaller <syzkaller@googlegroups.com>\nReported-by: Maor Gottlieb <maorg@mellanox.com>\nSigned-off-by: Leon Romanovsky <leonro@mellanox.com>\nSigned-off-by: Doug Ledford <dledford@redhat.com>",
        "before_after_code_files": [
          "drivers/infiniband/hw/mlx5/qp.c||drivers/infiniband/hw/mlx5/qp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/hw/mlx5/qp.c||drivers/infiniband/hw/mlx5/qp.c": [
          "File: drivers/infiniband/hw/mlx5/qp.c -> drivers/infiniband/hw/mlx5/qp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3160:   mlx5_ib_cq_clean(recv_cq, base->mqp.qpn,",
          "3161:      ibqp->srq ? to_msrq(ibqp->srq) : NULL);",
          "3162:   if (send_cq != recv_cq)",
          "",
          "[Removed Lines]",
          "3159:  if (new_state == IB_QPS_RESET && !ibqp->uobject) {",
          "",
          "[Added Lines]",
          "3159:  if (new_state == IB_QPS_RESET &&",
          "3160:      !ibqp->uobject && ibqp->qp_type != IB_QPT_XRC_TGT) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1dc0f8991d4d93194fb7a3ac3164e05e8b24ad02",
      "candidate_info": {
        "commit_hash": "1dc0f8991d4d93194fb7a3ac3164e05e8b24ad02",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1dc0f8991d4d93194fb7a3ac3164e05e8b24ad02",
        "files": [
          "fs/f2fs/file.c"
        ],
        "message": "f2fs: fix to avoid race in between atomic write and background GC\n\nSqlite user\t\t\tBackground GC\n\t\t\t\t- move_data_block\n\t\t\t\t  : move page #1\n\t\t\t\t - f2fs_is_atomic_file\n- f2fs_ioc_start_atomic_write\n- f2fs_ioc_commit_atomic_write\n - commit_inmem_pages\n   : commit page #1 & set node #2 dirty\n\t\t\t\t - f2fs_submit_page_write\n\t\t\t\t  - f2fs_update_data_blkaddr\n\t\t\t\t   - set_page_dirty\n\t\t\t\t     : set node #2 dirty\n - f2fs_do_sync_file\n  - fsync_node_pages\n   : commit node #1 & node #2, then sudden power-cut\n\nIn a race case, we may check FI_ATOMIC_FILE flag before starting atomic\nwrite flow, then we will commit meta data before data with reversed\norder, after a sudden pow-cut, database transaction will be inconsistent.\n\nSo we'd better to exclude gc/atomic_write to each other by using lock\ninstead of flag checking.\n\nSigned-off-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
        "before_after_code_files": [
          "fs/f2fs/file.c||fs/f2fs/file.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/f2fs/file.c||fs/f2fs/file.c": [
          "File: fs/f2fs/file.c -> fs/f2fs/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1716:  inode_lock(inode);",
          "1718:  if (f2fs_is_volatile_file(inode))",
          "1719:   goto err_out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1718:  down_write(&F2FS_I(inode)->dio_rwsem[WRITE]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1733:   ret = f2fs_do_sync_file(filp, 0, LLONG_MAX, 1, false);",
          "1734:  }",
          "1735: err_out:",
          "1736:  inode_unlock(inode);",
          "1737:  mnt_drop_write_file(filp);",
          "1738:  return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1738:  up_write(&F2FS_I(inode)->dio_rwsem[WRITE]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f002612b9d86613bc6fde0a444e0095225f6053e",
      "candidate_info": {
        "commit_hash": "f002612b9d86613bc6fde0a444e0095225f6053e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/f002612b9d86613bc6fde0a444e0095225f6053e",
        "files": [
          "drivers/char/ipmi/ipmi_ssif.c"
        ],
        "message": "ipmi_ssif: Fix kernel panic at msg_done_handler\n\nThis happens when BMC doesn't return any data and the code is trying\nto print the value of data[2].\n\nGetting following crash:\n[  484.728410] Unable to handle kernel NULL pointer dereference at virtual address 00000002\n[  484.736496] pgd = ffff0000094a2000\n[  484.739885] [00000002] *pgd=00000047fcffe003, *pud=00000047fcffd003, *pmd=0000000000000000\n[  484.748158] Internal error: Oops: 96000005 [#1] SMP\n[...]\n[  485.101451] Call trace:\n[...]\n[  485.188473] [<ffff000000a46e68>] msg_done_handler+0x668/0x700 [ipmi_ssif]\n[  485.195249] [<ffff000000a456b8>] ipmi_ssif_thread+0x110/0x128 [ipmi_ssif]\n[  485.202038] [<ffff0000080f1430>] kthread+0x108/0x138\n[  485.206994] [<ffff0000080838e0>] ret_from_fork+0x10/0x30\n[  485.212294] Code: aa1903e1 aa1803e0 b900227f 95fef6a5 (39400aa3)\n\nAdding a check to validate the data len before printing data[2] to fix this issue.\n\nSigned-off-by: Kamlakant Patel <kamlakant.patel@cavium.com>\nSigned-off-by: Corey Minyard <cminyard@mvista.com>",
        "before_after_code_files": [
          "drivers/char/ipmi/ipmi_ssif.c||drivers/char/ipmi/ipmi_ssif.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/char/ipmi/ipmi_ssif.c||drivers/char/ipmi/ipmi_ssif.c": [
          "File: drivers/char/ipmi/ipmi_ssif.c -> drivers/char/ipmi/ipmi_ssif.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:    ssif_info->ssif_state = SSIF_NORMAL;",
          "758:    ipmi_ssif_unlock_cond(ssif_info, flags);",
          "759:    pr_warn(PFX \"Error getting flags: %d %d, %x\\n\",",
          "761:   } else if (data[0] != (IPMI_NETFN_APP_REQUEST | 1) << 2",
          "762:       || data[1] != IPMI_GET_MSG_FLAGS_CMD) {",
          "",
          "[Removed Lines]",
          "760:           result, len, data[2]);",
          "",
          "[Added Lines]",
          "760:           result, len, (len >= 3) ? data[2] : 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "779:   if ((result < 0) || (len < 3) || (data[2] != 0)) {",
          "781:    pr_warn(PFX \"Error clearing flags: %d %d, %x\\n\",",
          "783:   } else if (data[0] != (IPMI_NETFN_APP_REQUEST | 1) << 2",
          "784:       || data[1] != IPMI_CLEAR_MSG_FLAGS_CMD) {",
          "785:    pr_warn(PFX \"Invalid response clearing flags: %x %x\\n\",",
          "",
          "[Removed Lines]",
          "782:           result, len, data[2]);",
          "",
          "[Added Lines]",
          "782:           result, len, (len >= 3) ? data[2] : 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}